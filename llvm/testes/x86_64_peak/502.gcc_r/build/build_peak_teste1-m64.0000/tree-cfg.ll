; ModuleID = 'tree-cfg.c'
source_filename = "tree-cfg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.lang_hooks = type { ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_tree_inlining = type { ptr }
%struct.lang_hooks_for_callgraph = type { ptr }
%struct.lang_hooks_for_tree_dump = type { ptr, ptr }
%struct.lang_hooks_for_decls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.lang_hooks_for_types = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_lto = type { ptr, ptr, ptr }
%struct.cfg_hooks = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.bitmap_element_def = type { ptr, ptr, i32, [2 x i64] }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.function = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i32 }
%struct.control_flow_graph = type { ptr, ptr, ptr, i32, i32, i32, ptr, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.VEC_basic_block_base = type { i32, i32, [1 x ptr] }
%struct.basic_block_def = type { ptr, ptr, ptr, ptr, [2 x ptr], ptr, ptr, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%union.basic_block_il_dependent = type { ptr }
%struct.expanded_location = type { ptr, i32, i32, i8 }
%struct.gimple_stmt_iterator = type { ptr, ptr, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%struct.gimple_statement_base = type { i32, i32, i32, i32, ptr, ptr }
%struct.gimple_seq_node_d = type { ptr, ptr, ptr }
%struct.gimple_seq_d = type { ptr, ptr, ptr }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.diagnostic_context = type { ptr, [12 x i32], i8, i8, [870 x i32], i8, i8, ptr, ptr, ptr, ptr, ptr, i32, i8 }
%struct.edge_def = type { ptr, ptr, %union.edge_def_insns, ptr, ptr, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { ptr }
%struct.tree_exp = type { %struct.tree_common, i32, ptr, [1 x ptr] }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, ptr, i8, i8, i8, i8, [1 x ptr] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, ptr, ptr }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, ptr, ptr }
%struct.tree_list = type { %struct.tree_common, ptr, ptr }
%struct.omp_region = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i8 }
%struct.VEC_edge_base = type { i32, i32, [1 x ptr] }
%struct.label_record = type { ptr, i8 }
%struct.eh_status = type { ptr, ptr, ptr, ptr, ptr, %union.eh_status_u }
%union.eh_status_u = type { ptr }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x ptr] }
%struct.eh_landing_pad_d = type { ptr, ptr, ptr, ptr, i32 }
%struct.eh_region_d = type { ptr, ptr, ptr, i32, i32, %union.eh_region_u, ptr, ptr, ptr, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { ptr, ptr, i32 }
%struct.eh_catch_d = type { ptr, ptr, ptr, ptr, ptr }
%struct.ssa_use_operand_d = type { ptr, ptr, %union.anon, ptr }
%union.anon = type { ptr }
%struct.immediate_use_iterator_d = type { ptr, ptr, %struct.ssa_use_operand_d, ptr }
%struct.tree_ssa_name = type { %struct.tree_common, ptr, ptr, i32, ptr, %struct.ssa_use_operand_d }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, ptr, [1 x %struct.phi_arg_d] }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, ptr, i32 }
%struct.loops = type { i32, ptr, ptr, ptr }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.loop = type { i32, i32, ptr, ptr, %struct.lpt_decision, i32, i32, ptr, ptr, ptr, ptr, ptr, %struct.double_int, %struct.double_int, i8, i8, i32, ptr, ptr, i8, ptr }
%struct.lpt_decision = type { i32, i32 }
%struct.double_int = type { i64, i64 }
%struct.VEC_loop_p_base = type { i32, i32, [1 x ptr] }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, ptr, ptr, ptr, ptr, i32 }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%union.tree_type_symtab = type { ptr }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, ptr, ptr, i8, i8, i8, i8, ptr }
%struct.gimple_bb_info = type { ptr, ptr }
%struct.move_stmt_d = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.gimple_df = type { ptr, ptr, ptr, ptr, %struct.pt_solution, %struct.pt_solution, ptr, ptr, ptr, ptr, i8, %struct.ssa_operands }
%struct.pt_solution = type { i8, ptr }
%struct.ssa_operands = type { ptr, i32, i32, i8, ptr, ptr }
%struct.tree_block = type { %struct.tree_common, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.tree_map = type { %struct.tree_map_base, i32, ptr }
%struct.tree_map_base = type { ptr }
%struct.def_optype_d = type { ptr, ptr }
%struct.VEC_edge_var_map_base = type { i32, i32, [1 x %struct._edge_var_map] }
%struct._edge_var_map = type { ptr, ptr, i32 }
%struct.simple_bitmap_def = type { ptr, i32, i32, [1 x i64] }
%struct.locus_discrim_map = type { i32, i32 }
%struct.use_optype_d = type { ptr, %struct.ssa_use_operand_d }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }

@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@cfun = external local_unnamed_addr global ptr, align 8
@.str = private unnamed_addr constant [4 x i8] c"cfg\00", align 1
@pass_build_cfg = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str, ptr null, ptr @execute_build_cfg, ptr null, ptr null, i32 0, i32 50, i32 4, i32 8, i32 0, i32 0, i32 49 } }, align 8
@global_trees = external local_unnamed_addr global [131 x ptr], align 16
@edge_to_cases = internal unnamed_addr global ptr null, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"tree-cfg.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@global_dc = external local_unnamed_addr global ptr, align 8
@label_for_bb = internal unnamed_addr global ptr null, align 8
@cfgcleanup_altered_bbs = external local_unnamed_addr global ptr, align 8
@stderr = external local_unnamed_addr global ptr, align 8
@lang_hooks = external local_unnamed_addr global %struct.lang_hooks, align 8
@current_function_decl = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c";; Function %s\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c";; \0A%d basic blocks, %d edges, last basic block %d.\0A\0A\00", align 1
@dump_cfg_stats.max_num_merged_labels = internal unnamed_addr global i64 0, align 8
@.str.6 = private unnamed_addr constant [16 x i8] c"%-30s%-13s%12s\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"%-30s%13d%11lu%c\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"%-30s%13ld%11lu%c\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"%-43s%11lu%c\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"\0ACFG Statistics for %s\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"---------------------------------------------------------\0A\00", align 1
@.str.12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"  Number of  \00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Memory\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"  instances  \00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"used \00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"Basic blocks\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Edges\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"Total memory used by CFG data\00", align 1
@cfg_stats.0 = internal unnamed_addr global i64 0, align 8
@.str.20 = private unnamed_addr constant [47 x i8] c"Coalesced label blocks: %ld (Max so far: %ld)\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"verify_gimple failed\00", align 1
@tree_code_type = external local_unnamed_addr constant [0 x i32], align 4
@timevar_enable = external local_unnamed_addr global i8, align 1
@.str.22 = private unnamed_addr constant [46 x i8] c"gimple_bb (phi) is set to a wrong basic block\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"missing PHI def\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"PHI argument is not a GIMPLE value\00", align 1
@.str.25 = private unnamed_addr constant [32 x i8] c"incorrect sharing of tree nodes\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"invalid GIMPLE statement\00", align 1
@.str.27 = private unnamed_addr constant [47 x i8] c"gimple_bb (stmt) is set to a wrong basic block\00", align 1
@.str.28 = private unnamed_addr constant [38 x i8] c"incorrect entry in label_to_block_map\00", align 1
@.str.29 = private unnamed_addr constant [40 x i8] c"incorrect setting of landing pad number\00", align 1
@eh_error_found = internal unnamed_addr global i1 false, align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"verify_stmts failed\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"%s (\00", align 1
@dump_flags = external local_unnamed_addr global i32, align 4
@.str.33 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"%s  bb_%d (preds = {\00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c"}, succs = {\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"})\0A\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"%s  {\0A\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"%s  }\0A\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"gimple\00", align 1
@gimple_cfg_hooks = dso_local local_unnamed_addr global %struct.cfg_hooks { ptr @.str.43, ptr @gimple_verify_flow_info, ptr @gimple_dump_bb, ptr @create_bb, ptr @gimple_redirect_edge_and_branch, ptr @gimple_redirect_edge_and_branch_force, ptr @gimple_can_remove_branch_p, ptr @remove_bb, ptr @gimple_split_block, ptr @gimple_move_block_after, ptr @gimple_can_merge_blocks_p, ptr @gimple_merge_blocks, ptr @gimple_predict_edge, ptr @gimple_predicted_by_p, ptr @gimple_can_duplicate_bb_p, ptr @gimple_duplicate_bb, ptr @gimple_split_edge, ptr @gimple_make_forwarder_block, ptr null, ptr @gimple_block_ends_with_call_p, ptr @gimple_block_ends_with_condjump_p, ptr @gimple_flow_call_edges_add, ptr @gimple_execute_on_growing_pred, ptr @gimple_execute_on_shrinking_pred, ptr @gimple_duplicate_loop_to_header_edge, ptr @gimple_lv_add_condition_to_bb, ptr @gimple_lv_adjust_loop_header_phi, ptr @extract_true_false_edges_from_block, ptr @flush_pending_stmts }, align 8
@.str.44 = private unnamed_addr constant [7 x i8] c"crited\00", align 1
@pass_split_crit_edges = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str.44, ptr null, ptr @split_critical_edges, ptr null, ptr null, i32 0, i32 67, i32 8, i32 64, i32 0, i32 0, i32 9 } }, align 8
@.str.45 = private unnamed_addr constant [22 x i8] c"*warn_function_return\00", align 1
@pass_warn_function_return = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str.45, ptr null, ptr @execute_warn_function_return, ptr null, ptr null, i32 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0 } }, align 8
@.str.46 = private unnamed_addr constant [24 x i8] c"*warn_function_noreturn\00", align 1
@pass_warn_function_noreturn = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str.46, ptr null, ptr @execute_warn_function_noreturn, ptr null, ptr null, i32 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0 } }, align 8
@.str.47 = private unnamed_addr constant [20 x i8] c"*warn_unused_result\00", align 1
@pass_warn_unused_result = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, ptr @.str.47, ptr @gate_warn_unused_result, ptr @run_warn_unused_result, ptr null, ptr null, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0 } }, align 8
@dump_file = external local_unnamed_addr global ptr, align 8
@.str.48 = private unnamed_addr constant [15 x i8] c"Scope blocks:\0A\00", align 1
@found_computed_goto = internal unnamed_addr global i1 false, align 1
@discriminator_per_locus = internal unnamed_addr global ptr null, align 8
@.str.49 = private unnamed_addr constant [8 x i8] c"gotovar\00", align 1
@root_omp_region = external local_unnamed_addr global ptr, align 8
@.str.50 = private unnamed_addr constant [22 x i8] c"graph: { title: \22%s\22\0A\00", align 1
@.str.51 = private unnamed_addr constant [41 x i8] c"node: { title: \22ENTRY\22 label: \22ENTRY\22 }\0A\00", align 1
@.str.52 = private unnamed_addr constant [39 x i8] c"node: { title: \22EXIT\22 label: \22EXIT\22 }\0A\00", align 1
@.str.53 = private unnamed_addr constant [45 x i8] c"edge: { sourcename: \22ENTRY\22 targetname: \22%d\22\00", align 1
@.str.54 = private unnamed_addr constant [32 x i8] c" linestyle: dotted priority: 10\00", align 1
@.str.55 = private unnamed_addr constant [32 x i8] c" linestyle: solid priority: 100\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c" }\0A\00", align 1
@gimple_code_name = external local_unnamed_addr constant [0 x ptr], align 8
@.str.57 = private unnamed_addr constant [13 x i8] c"no-statement\00", align 1
@.str.58 = private unnamed_addr constant [53 x i8] c"node: { title: \22%d\22 label: \22#%d\\n%s (%d)\\n%s (%d)\22}\0A\00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"edge: { sourcename: \22%d\22 targetname: \22EXIT\22\00", align 1
@.str.60 = private unnamed_addr constant [42 x i8] c"edge: { sourcename: \22%d\22 targetname: \22%d\22\00", align 1
@.str.61 = private unnamed_addr constant [32 x i8] c" priority: 10 linestyle: dotted\00", align 1
@.str.62 = private unnamed_addr constant [32 x i8] c" priority: 100 linestyle: solid\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"}\0A\0A\00", align 1
@.str.64 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external local_unnamed_addr constant [0 x i64], align 8
@gss_for_code_ = external local_unnamed_addr constant [0 x i32], align 4
@.str.65 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@flag_var_tracking_assignments = external local_unnamed_addr global i32, align 4
@.str.66 = private unnamed_addr constant [39 x i8] c"invalid comparison code in gimple cond\00", align 1
@.str.67 = private unnamed_addr constant [30 x i8] c"invalid labels in gimple cond\00", align 1
@gimple_rhs_class_table = external local_unnamed_addr constant [0 x i8], align 1
@.str.68 = private unnamed_addr constant [37 x i8] c"non-trivial conversion at assignment\00", align 1
@.str.69 = private unnamed_addr constant [36 x i8] c"invalid operand in unary expression\00", align 1
@.str.70 = private unnamed_addr constant [36 x i8] c"type mismatch in address expression\00", align 1
@.str.71 = private unnamed_addr constant [36 x i8] c"invalid rhs for gimple memory store\00", align 1
@.str.72 = private unnamed_addr constant [36 x i8] c"invalid operands to array reference\00", align 1
@.str.73 = private unnamed_addr constant [33 x i8] c"type mismatch in array reference\00", align 1
@.str.74 = private unnamed_addr constant [39 x i8] c"type mismatch in array range reference\00", align 1
@.str.75 = private unnamed_addr constant [41 x i8] c"type mismatch in real/imagpart reference\00", align 1
@.str.76 = private unnamed_addr constant [37 x i8] c"type mismatch in component reference\00", align 1
@.str.77 = private unnamed_addr constant [49 x i8] c"Conversion of an SSA_NAME on the left hand side.\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"invalid expression for min lvalue\00", align 1
@.str.79 = private unnamed_addr constant [38 x i8] c"invalid operand in indirect reference\00", align 1
@.str.80 = private unnamed_addr constant [36 x i8] c"type mismatch in indirect reference\00", align 1
@optimize = external local_unnamed_addr global i32, align 4
@.str.81 = private unnamed_addr constant [39 x i8] c"non-register as LHS of unary operation\00", align 1
@.str.82 = private unnamed_addr constant [35 x i8] c"invalid operand in unary operation\00", align 1
@sizetype_tab = external local_unnamed_addr global [4 x ptr], align 16
@.str.83 = private unnamed_addr constant [32 x i8] c"invalid types in nop conversion\00", align 1
@.str.84 = private unnamed_addr constant [42 x i8] c"invalid types in address space conversion\00", align 1
@.str.85 = private unnamed_addr constant [40 x i8] c"invalid types in fixed-point conversion\00", align 1
@.str.86 = private unnamed_addr constant [46 x i8] c"invalid types in conversion to floating point\00", align 1
@.str.87 = private unnamed_addr constant [39 x i8] c"invalid types in conversion to integer\00", align 1
@.str.88 = private unnamed_addr constant [42 x i8] c"non-trivial conversion in unary operation\00", align 1
@.str.89 = private unnamed_addr constant [40 x i8] c"non-register as LHS of binary operation\00", align 1
@.str.90 = private unnamed_addr constant [37 x i8] c"invalid operands in binary operation\00", align 1
@.str.91 = private unnamed_addr constant [36 x i8] c"type mismatch in complex expression\00", align 1
@.str.92 = private unnamed_addr constant [34 x i8] c"type mismatch in shift expression\00", align 1
@.str.93 = private unnamed_addr constant [41 x i8] c"type mismatch in vector shift expression\00", align 1
@.str.94 = private unnamed_addr constant [56 x i8] c"non-element sized vector shift of floating point vector\00", align 1
@.str.95 = private unnamed_addr constant [50 x i8] c"invalid non-vector operands to vector valued plus\00", align 1
@.str.96 = private unnamed_addr constant [41 x i8] c"invalid (pointer) operands to plus/minus\00", align 1
@.str.97 = private unnamed_addr constant [41 x i8] c"type mismatch in pointer plus expression\00", align 1
@.str.98 = private unnamed_addr constant [41 x i8] c"type mismatch in binary truth expression\00", align 1
@.str.99 = private unnamed_addr constant [35 x i8] c"type mismatch in binary expression\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"invalid function in gimple call\00", align 1
@.str.101 = private unnamed_addr constant [28 x i8] c"non-function in gimple call\00", align 1
@.str.102 = private unnamed_addr constant [27 x i8] c"invalid LHS in gimple call\00", align 1
@.str.103 = private unnamed_addr constant [21 x i8] c"LHS in noreturn call\00", align 1
@.str.104 = private unnamed_addr constant [34 x i8] c"invalid conversion in gimple call\00", align 1
@.str.105 = private unnamed_addr constant [36 x i8] c"invalid static chain in gimple call\00", align 1
@.str.106 = private unnamed_addr constant [37 x i8] c"static chain in indirect gimple call\00", align 1
@.str.107 = private unnamed_addr constant [48 x i8] c"static chain with function that doesn't use one\00", align 1
@.str.108 = private unnamed_addr constant [32 x i8] c"invalid argument to gimple call\00", align 1
@.str.109 = private unnamed_addr constant [38 x i8] c"invalid operands in gimple comparison\00", align 1
@.str.110 = private unnamed_addr constant [39 x i8] c"type mismatch in comparison expression\00", align 1
@.str.111 = private unnamed_addr constant [50 x i8] c"goto destination is neither a label nor a pointer\00", align 1
@.str.112 = private unnamed_addr constant [36 x i8] c"invalid operand to switch statement\00", align 1
@.str.113 = private unnamed_addr constant [36 x i8] c"invalid operand in return statement\00", align 1
@.str.114 = private unnamed_addr constant [39 x i8] c"invalid conversion in return statement\00", align 1
@.str.115 = private unnamed_addr constant [19 x i8] c"Invalid PHI result\00", align 1
@.str.116 = private unnamed_addr constant [21 x i8] c"Invalid PHI argument\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"Incompatible types in PHI argument %u\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"invalid function in call statement\00", align 1
@.str.119 = private unnamed_addr constant [38 x i8] c"invalid pure const state for function\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"in statement\00", align 1
@cgraph_state = external local_unnamed_addr global i32, align 4
@.str.121 = private unnamed_addr constant [41 x i8] c"statement marked for throw, but doesn%'t\00", align 1
@.str.122 = private unnamed_addr constant [46 x i8] c"statement marked for throw in middle of block\00", align 1
@.str.123 = private unnamed_addr constant [42 x i8] c"SSA name in freelist but still referenced\00", align 1
@.str.124 = private unnamed_addr constant [62 x i8] c"Indirect reference's operand is not a register or a constant.\00", align 1
@.str.125 = private unnamed_addr constant [43 x i8] c"ASSERT_EXPR with an always-false condition\00", align 1
@.str.126 = private unnamed_addr constant [46 x i8] c"MODIFY_EXPR not expected while having tuples.\00", align 1
@.str.127 = private unnamed_addr constant [47 x i8] c"constant not recomputed when ADDR_EXPR changed\00", align 1
@.str.128 = private unnamed_addr constant [51 x i8] c"side effects not recomputed when ADDR_EXPR changed\00", align 1
@.str.129 = private unnamed_addr constant [43 x i8] c"address taken, but ADDRESSABLE bit not set\00", align 1
@.str.130 = private unnamed_addr constant [55 x i8] c"DECL_GIMPLE_REG_P set on a variable with address taken\00", align 1
@.str.131 = private unnamed_addr constant [31 x i8] c"non-integral used in condition\00", align 1
@.str.132 = private unnamed_addr constant [28 x i8] c"invalid conditional operand\00", align 1
@.str.133 = private unnamed_addr constant [34 x i8] c"invalid operand to unary operator\00", align 1
@.str.134 = private unnamed_addr constant [38 x i8] c"invalid COMPONENT_REF offset operator\00", align 1
@.str.135 = private unnamed_addr constant [20 x i8] c"invalid array index\00", align 1
@.str.136 = private unnamed_addr constant [26 x i8] c"invalid array lower bound\00", align 1
@.str.137 = private unnamed_addr constant [21 x i8] c"invalid array stride\00", align 1
@.str.138 = private unnamed_addr constant [50 x i8] c"invalid position or size operand to BIT_FIELD_REF\00", align 1
@.str.139 = private unnamed_addr constant [74 x i8] c"integral result type precision does not match field size of BIT_FIELD_REF\00", align 1
@mode_precision = external local_unnamed_addr constant [87 x i16], align 16
@.str.140 = private unnamed_addr constant [81 x i8] c"mode precision of non-integral result does not match field size of BIT_FIELD_REF\00", align 1
@.str.141 = private unnamed_addr constant [25 x i8] c"invalid reference prefix\00", align 1
@.str.142 = private unnamed_addr constant [49 x i8] c"invalid operand to plus/minus, type is a pointer\00", align 1
@.str.143 = private unnamed_addr constant [35 x i8] c"invalid operand to binary operator\00", align 1
@.str.144 = private unnamed_addr constant [64 x i8] c"invalid operand to pointer plus, first operand is not a pointer\00", align 1
@.str.145 = private unnamed_addr constant [89 x i8] c"invalid operand to pointer plus, second operand is not an integer with type of sizetype.\00", align 1
@.str.146 = private unnamed_addr constant [22 x i8] c"Dead STMT in EH table\00", align 1
@.str.147 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.148 = private unnamed_addr constant [7 x i8] c"bb_%d \00", align 1
@.str.149 = private unnamed_addr constant [35 x i8] c"%sloop_%d (header = %d, latch = %d\00", align 1
@.str.150 = private unnamed_addr constant [11 x i8] c", niter = \00", align 1
@.str.151 = private unnamed_addr constant [17 x i8] c", upper_bound = \00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c", estimate = \00", align 1
@.str.153 = private unnamed_addr constant [5 x i8] c"%s{\0A\00", align 1
@.str.154 = private unnamed_addr constant [5 x i8] c"%s}\0A\00", align 1
@bitmap_zero_bits = external local_unnamed_addr global %struct.bitmap_element_def, align 8
@.str.155 = private unnamed_addr constant [38 x i8] c"ENTRY_BLOCK has IL associated with it\00", align 1
@.str.156 = private unnamed_addr constant [37 x i8] c"EXIT_BLOCK has IL associated with it\00", align 1
@.str.157 = private unnamed_addr constant [28 x i8] c"fallthru to exit from bb %d\00", align 1
@.str.158 = private unnamed_addr constant [16 x i8] c"nonlocal label \00", align 1
@.str.159 = private unnamed_addr constant [47 x i8] c" is not first in a sequence of labels in bb %d\00", align 1
@.str.160 = private unnamed_addr constant [22 x i8] c"EH landing pad label \00", align 1
@.str.161 = private unnamed_addr constant [7 x i8] c"label \00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c" to block does not match in bb %d\00", align 1
@.str.163 = private unnamed_addr constant [32 x i8] c" has incorrect context in bb %d\00", align 1
@.str.164 = private unnamed_addr constant [45 x i8] c"control flow in the middle of basic block %d\00", align 1
@.str.165 = private unnamed_addr constant [33 x i8] c" in the middle of basic block %d\00", align 1
@.str.166 = private unnamed_addr constant [49 x i8] c"fallthru edge after a control statement in bb %d\00", align 1
@.str.167 = private unnamed_addr constant [49 x i8] c"true/false edge after a non-GIMPLE_COND in bb %d\00", align 1
@.str.168 = private unnamed_addr constant [42 x i8] c"wrong outgoing edge flags at end of bb %d\00", align 1
@.str.169 = private unnamed_addr constant [30 x i8] c"explicit goto at end of bb %d\00", align 1
@.str.170 = private unnamed_addr constant [44 x i8] c"return edge does not point to exit in bb %d\00", align 1
@.str.171 = private unnamed_addr constant [51 x i8] c"found default case not at the start of case vector\00", align 1
@.str.172 = private unnamed_addr constant [25 x i8] c"case labels not sorted: \00", align 1
@.str.173 = private unnamed_addr constant [18 x i8] c" is greater than \00", align 1
@.str.174 = private unnamed_addr constant [23 x i8] c" but comes before it.\0A\00", align 1
@.str.175 = private unnamed_addr constant [27 x i8] c"extra outgoing edge %d->%d\00", align 1
@.str.176 = private unnamed_addr constant [20 x i8] c"missing edge %i->%i\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"Removing basic block %d\0A\00", align 1
@.str.178 = private unnamed_addr constant [26 x i8] c"Merging blocks %d and %d\0A\00", align 1
@.str.179 = private unnamed_addr constant [34 x i8] c"%<noreturn%> function does return\00", align 1
@warn_return_type = external local_unnamed_addr global i32, align 4
@.str.180 = private unnamed_addr constant [41 x i8] c"control reaches end of non-void function\00", align 1
@warn_missing_noreturn = external local_unnamed_addr global i32, align 4
@.str.181 = private unnamed_addr constant [64 x i8] c"function might be possible candidate for attribute %<noreturn%>\00", align 1
@flag_warn_unused_result = external local_unnamed_addr global i8, align 1
@.str.182 = private unnamed_addr constant [19 x i8] c"warn_unused_result\00", align 1
@.str.183 = private unnamed_addr constant [73 x i8] c"ignoring return value of %qD, declared with attribute warn_unused_result\00", align 1
@.str.184 = private unnamed_addr constant [77 x i8] c"ignoring return value of function declared with attribute warn_unused_result\00", align 1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !5
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #26
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #26
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #26
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #26
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #26
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #26
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #26
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #26
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #26
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #26
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #26
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #26
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #26
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !21

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @init_empty_tree_cfg_for_function(ptr noundef %0) local_unnamed_addr #9 {
  tail call void @init_flow(ptr noundef %0) #26
  %2 = getelementptr inbounds %struct.function, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !23
  %4 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 7
  store i32 0, ptr %4, align 8, !tbaa !25
  %5 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 3
  store i32 2, ptr %5, align 8, !tbaa !27
  %6 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 5
  store i32 2, ptr %6, align 8, !tbaa !28
  %7 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef null, i32 noundef 20) #26
  %8 = load ptr, ptr %2, align 8, !tbaa !23
  %9 = getelementptr inbounds %struct.control_flow_graph, ptr %8, i64 0, i32 2
  store ptr %7, ptr %9, align 8, !tbaa !29
  %10 = icmp eq ptr %7, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %1
  %12 = load i32, ptr %7, align 8, !tbaa !30
  %13 = sub nsw i32 20, %12
  %14 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %7, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !32
  %16 = sub i32 %15, %12
  %17 = icmp ult i32 %16, %13
  br i1 %17, label %18, label %23

18:                                               ; preds = %1, %11
  %19 = phi i32 [ %12, %11 ], [ 0, %1 ]
  %20 = phi i32 [ %13, %11 ], [ 20, %1 ]
  %21 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef %7, i32 noundef %20) #26
  store ptr %21, ptr %9, align 8, !tbaa !5
  %22 = sub nsw i32 20, %19
  br label %23

23:                                               ; preds = %11, %18
  %24 = phi i32 [ %13, %11 ], [ %22, %18 ]
  %25 = phi i32 [ %12, %11 ], [ %19, %18 ]
  %26 = phi ptr [ %7, %11 ], [ %21, %18 ]
  store i32 20, ptr %26, align 8, !tbaa !30
  %27 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %26, i64 0, i32 2
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  %30 = sext i32 %24 to i64
  %31 = shl nsw i64 %30, 3
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 %29, i8 0, i64 %31, i1 false)
  %32 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef null, i32 noundef 20) #26
  %33 = load ptr, ptr %2, align 8, !tbaa !23
  %34 = getelementptr inbounds %struct.control_flow_graph, ptr %33, i64 0, i32 6
  store ptr %32, ptr %34, align 8, !tbaa !33
  %35 = icmp eq ptr %32, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %23
  %37 = load i32, ptr %32, align 8, !tbaa !30
  %38 = sub nsw i32 20, %37
  %39 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %32, i64 0, i32 1
  %40 = load i32, ptr %39, align 4, !tbaa !32
  %41 = sub i32 %40, %37
  %42 = icmp ult i32 %41, %38
  br i1 %42, label %43, label %48

43:                                               ; preds = %23, %36
  %44 = phi i32 [ %37, %36 ], [ 0, %23 ]
  %45 = phi i32 [ %38, %36 ], [ 20, %23 ]
  %46 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef %32, i32 noundef %45) #26
  store ptr %46, ptr %34, align 8, !tbaa !5
  %47 = sub nsw i32 20, %44
  br label %48

48:                                               ; preds = %36, %43
  %49 = phi i32 [ %38, %36 ], [ %47, %43 ]
  %50 = phi i32 [ %37, %36 ], [ %44, %43 ]
  %51 = phi ptr [ %32, %36 ], [ %46, %43 ]
  store i32 20, ptr %51, align 8, !tbaa !30
  %52 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %51, i64 0, i32 2
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds ptr, ptr %52, i64 %53
  %55 = sext i32 %49 to i64
  %56 = shl nsw i64 %55, 3
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 %54, i8 0, i64 %56, i1 false)
  %57 = load ptr, ptr %2, align 8, !tbaa !23
  %58 = getelementptr inbounds %struct.control_flow_graph, ptr %57, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !29
  %60 = load ptr, ptr %57, align 8, !tbaa !34
  %61 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %59, i64 0, i32 2, i64 0
  store ptr %60, ptr %61, align 8, !tbaa !5
  %62 = load ptr, ptr %2, align 8, !tbaa !23
  %63 = getelementptr inbounds %struct.control_flow_graph, ptr %62, i64 0, i32 2
  %64 = load ptr, ptr %63, align 8, !tbaa !29
  %65 = getelementptr inbounds %struct.control_flow_graph, ptr %62, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !35
  %67 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %64, i64 0, i32 2, i64 1
  store ptr %66, ptr %67, align 8, !tbaa !5
  %68 = load ptr, ptr %2, align 8, !tbaa !23
  %69 = getelementptr inbounds %struct.control_flow_graph, ptr %68, i64 0, i32 1
  %70 = load ptr, ptr %69, align 8, !tbaa !35
  %71 = load ptr, ptr %68, align 8, !tbaa !34
  %72 = getelementptr inbounds %struct.basic_block_def, ptr %71, i64 0, i32 6
  store ptr %70, ptr %72, align 8, !tbaa !36
  %73 = getelementptr inbounds %struct.basic_block_def, ptr %70, i64 0, i32 5
  store ptr %71, ptr %73, align 8, !tbaa !38
  ret void
}

declare void @init_flow(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @init_empty_tree_cfg() local_unnamed_addr #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  tail call void @init_empty_tree_cfg_for_function(ptr noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @execute_build_cfg() #9 {
  %1 = alloca %struct.expanded_location, align 8
  %2 = alloca %struct.expanded_location, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  %6 = alloca %struct.gimple_stmt_iterator, align 8
  %7 = alloca %struct.gimple_stmt_iterator, align 8
  %8 = alloca %struct.gimple_stmt_iterator, align 8
  %9 = alloca %struct.gimple_stmt_iterator, align 8
  %10 = alloca %struct.gimple_stmt_iterator, align 8
  %11 = alloca %struct.gimple_stmt_iterator, align 8
  %12 = alloca i32, align 4
  %13 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %14 = tail call ptr @gimple_body(ptr noundef %13) #26
  tail call void @gimple_register_cfg_hooks() #26
  store i64 0, ptr @cfg_stats.0, align 8
  %15 = load ptr, ptr @cfun, align 8, !tbaa !5
  tail call void @init_empty_tree_cfg_for_function(ptr noundef %15)
  store i1 false, ptr @found_computed_goto, align 1
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %11) #26
  tail call void @llvm.experimental.noalias.scope.decl(metadata !39)
  %16 = icmp eq ptr %14, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %0
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %11) #26
  %18 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %385

19:                                               ; preds = %0
  %20 = load ptr, ptr %14, align 8, !tbaa !42, !noalias !39
  store ptr %20, ptr %11, align 8, !tbaa !44, !alias.scope !39
  %21 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %11, i64 0, i32 1
  store ptr %14, ptr %21, align 8, !tbaa !46, !alias.scope !39
  %22 = icmp eq ptr %20, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %11) #26
  %24 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %385

25:                                               ; preds = %19
  %26 = load ptr, ptr %20, align 8, !tbaa !47, !noalias !39
  %27 = icmp eq ptr %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = getelementptr i8, ptr %26, i64 16
  %30 = load ptr, ptr %29, align 8, !tbaa !16, !noalias !39
  br label %31

31:                                               ; preds = %28, %25
  %32 = phi ptr [ %30, %28 ], [ null, %25 ]
  %33 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %11, i64 0, i32 2
  store ptr %32, ptr %33, align 8, !tbaa !49, !alias.scope !39
  %34 = load ptr, ptr @cfun, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.function, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !23
  %37 = load ptr, ptr %36, align 8, !tbaa !34
  br label %38

38:                                               ; preds = %239, %31
  %39 = phi ptr [ %243, %239 ], [ %20, %31 ]
  %40 = phi ptr [ %112, %239 ], [ %14, %31 ]
  %41 = phi ptr [ %45, %239 ], [ null, %31 ]
  %42 = phi i8 [ %240, %239 ], [ 1, %31 ]
  %43 = phi i1 [ true, %239 ], [ false, %31 ]
  %44 = phi ptr [ %111, %239 ], [ %37, %31 ]
  %45 = load ptr, ptr %39, align 8, !tbaa !47
  %46 = icmp eq i8 %42, 0
  br i1 %46, label %47, label %104

47:                                               ; preds = %38
  %48 = icmp eq ptr %45, null
  br i1 %48, label %110, label %49

49:                                               ; preds = %47
  %50 = load i32, ptr %45, align 8
  %51 = and i32 %50, 255
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %53, label %110

53:                                               ; preds = %49
  %54 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %55
  %57 = load i64, ptr %56, align 8, !tbaa !50
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %53
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %60

60:                                               ; preds = %59, %53
  %61 = getelementptr inbounds i8, ptr %45, i64 %57
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  %63 = getelementptr inbounds %struct.tree_decl_common, ptr %62, i64 0, i32 2
  %64 = load i64, ptr %63, align 8
  %65 = and i64 %64, 256
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %104

67:                                               ; preds = %60
  %68 = load i32, ptr %45, align 8
  %69 = and i32 %68, 255
  %70 = add nsw i32 %69, -1
  %71 = icmp ult i32 %70, 9
  call void @llvm.assume(i1 %71)
  %72 = zext i32 %69 to i64
  %73 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !16
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %75
  %77 = load i64, ptr %76, align 8, !tbaa !50
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %67
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %80

80:                                               ; preds = %79, %67
  %81 = getelementptr inbounds i8, ptr %45, i64 %77
  %82 = load ptr, ptr %81, align 8, !tbaa !5
  %83 = load i64, ptr %82, align 8
  %84 = and i64 %83, 65536
  %85 = icmp ne i64 %84, 0
  %86 = icmp eq ptr %41, null
  %87 = or i1 %86, %85
  br i1 %87, label %104, label %88

88:                                               ; preds = %80
  %89 = load i32, ptr %41, align 8
  %90 = and i32 %89, 255
  %91 = icmp eq i32 %90, 4
  br i1 %91, label %92, label %104

92:                                               ; preds = %88
  br i1 %58, label %93, label %94

93:                                               ; preds = %92
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %94

94:                                               ; preds = %93, %92
  %95 = getelementptr inbounds i8, ptr %41, i64 %57
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  %97 = getelementptr inbounds %struct.tree_decl_common, ptr %96, i64 0, i32 2
  %98 = load i64, ptr %97, align 8
  %99 = and i64 %98, 256
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %94
  %102 = load i64, ptr @cfg_stats.0, align 8, !tbaa !51
  %103 = add nsw i64 %102, 1
  store i64 %103, ptr @cfg_stats.0, align 8, !tbaa !51
  br label %110

104:                                              ; preds = %94, %88, %80, %60, %38
  br i1 %43, label %105, label %107

105:                                              ; preds = %104
  %106 = call ptr @gsi_split_seq_before(ptr noundef nonnull %11) #26
  br label %107

107:                                              ; preds = %105, %104
  %108 = phi ptr [ %40, %104 ], [ %106, %105 ]
  %109 = call ptr @create_basic_block(ptr noundef %108, ptr noundef null, ptr noundef %44) #26
  br label %110

110:                                              ; preds = %107, %101, %49, %47
  %111 = phi ptr [ %109, %107 ], [ %44, %47 ], [ %44, %49 ], [ %44, %101 ]
  %112 = phi ptr [ %108, %107 ], [ %40, %47 ], [ %40, %49 ], [ %40, %101 ]
  call void @gimple_set_bb(ptr noundef %45, ptr noundef %111) #26
  %113 = load i32, ptr %45, align 8
  %114 = and i32 %113, 255
  %115 = icmp eq i32 %114, 3
  br i1 %115, label %116, label %130

116:                                              ; preds = %110
  %117 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %118
  %120 = load i64, ptr %119, align 8, !tbaa !50
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %116
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %123

123:                                              ; preds = %122, %116
  %124 = getelementptr inbounds i8, ptr %45, i64 %120
  %125 = load ptr, ptr %124, align 8, !tbaa !5
  %126 = load i64, ptr %125, align 8
  %127 = and i64 %126, 65535
  %128 = icmp eq i64 %127, 30
  br i1 %128, label %130, label %129

129:                                              ; preds = %123
  store i1 true, ptr @found_computed_goto, align 1
  br label %130

130:                                              ; preds = %129, %123, %110
  %131 = load i32, ptr %45, align 8
  %132 = trunc i32 %131 to i8
  switch i8 %132, label %152 [
    i8 1, label %155
    i8 5, label %155
    i8 3, label %155
    i8 9, label %155
    i8 14, label %155
    i8 8, label %133
    i8 15, label %155
    i8 7, label %148
    i8 26, label %155
    i8 27, label %155
    i8 23, label %155
    i8 30, label %155
    i8 31, label %155
    i8 32, label %155
    i8 29, label %155
    i8 24, label %155
    i8 25, label %155
    i8 22, label %155
    i8 28, label %155
    i8 19, label %155
    i8 20, label %155
    i8 21, label %155
  ]

133:                                              ; preds = %130
  %134 = call i32 @gimple_call_flags(ptr noundef nonnull %45) #26
  %135 = and i32 %134, 3
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %145

137:                                              ; preds = %133
  %138 = load ptr, ptr @cfun, align 8, !tbaa !5
  %139 = getelementptr inbounds %struct.function, ptr %138, i64 0, i32 20
  %140 = load i32, ptr %139, align 8
  %141 = and i32 %140, 1048576
  %142 = and i32 %134, 8
  %143 = or i32 %141, %142
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %152, label %155

145:                                              ; preds = %133
  %146 = and i32 %134, 8
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %152, label %155

148:                                              ; preds = %130
  %149 = getelementptr i8, ptr %45, i64 75
  %150 = load i8, ptr %149, align 1, !tbaa !16
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %148, %145, %137, %130
  %153 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %45) #26
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %239, label %155

155:                                              ; preds = %152, %148, %145, %137, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130, %130
  %156 = load i32, ptr %45, align 8
  %157 = and i32 %156, 255
  %158 = trunc i32 %156 to i8
  switch i8 %158, label %239 [
    i8 6, label %177
    i8 8, label %159
  ]

159:                                              ; preds = %155
  %160 = add nsw i32 %157, -10
  %161 = icmp ult i32 %160, -9
  br i1 %161, label %239, label %162

162:                                              ; preds = %159
  %163 = zext i32 %157 to i64
  %164 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %163
  %165 = load i32, ptr %164, align 4, !tbaa !16
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %166
  %168 = load i64, ptr %167, align 8, !tbaa !50
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %171

170:                                              ; preds = %162
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %171

171:                                              ; preds = %170, %162
  %172 = getelementptr inbounds i8, ptr %45, i64 %168
  %173 = load ptr, ptr %172, align 8, !tbaa !5
  %174 = icmp eq ptr %173, null
  br i1 %174, label %239, label %175

175:                                              ; preds = %171
  %176 = load i32, ptr %45, align 8
  br label %177

177:                                              ; preds = %175, %155
  %178 = phi i32 [ %176, %175 ], [ %156, %155 ]
  %179 = and i32 %178, 255
  %180 = icmp eq i32 %179, 3
  br i1 %180, label %181, label %196

181:                                              ; preds = %177
  %182 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %183
  %185 = load i64, ptr %184, align 8, !tbaa !50
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %181
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %188

188:                                              ; preds = %187, %181
  %189 = getelementptr inbounds i8, ptr %45, i64 %185
  %190 = load ptr, ptr %189, align 8, !tbaa !5
  %191 = load i64, ptr %190, align 8
  %192 = and i64 %191, 65535
  %193 = icmp eq i64 %192, 30
  br i1 %193, label %194, label %209

194:                                              ; preds = %188
  %195 = load i32, ptr %45, align 8
  br label %196

196:                                              ; preds = %194, %177
  %197 = phi i32 [ %195, %194 ], [ %178, %177 ]
  %198 = and i32 %197, 255
  %199 = icmp eq i32 %198, 8
  br i1 %199, label %200, label %239

200:                                              ; preds = %196
  %201 = call zeroext i8 @gimple_has_side_effects(ptr noundef nonnull %45) #26
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %239, label %203

203:                                              ; preds = %200
  %204 = load ptr, ptr @cfun, align 8, !tbaa !5
  %205 = getelementptr inbounds %struct.function, ptr %204, i64 0, i32 20
  %206 = load i32, ptr %205, align 8
  %207 = and i32 %206, 1048576
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %239, label %209

209:                                              ; preds = %203, %188
  %210 = call ptr @gimple_get_lhs(ptr noundef nonnull %45) #26
  %211 = getelementptr inbounds %struct.tree_common, ptr %210, i64 0, i32 2
  %212 = load ptr, ptr %211, align 8, !tbaa !16
  %213 = call zeroext i8 @is_gimple_reg_type(ptr noundef %212) #26
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %239, label %215

215:                                              ; preds = %209
  %216 = call ptr @gimple_get_lhs(ptr noundef nonnull %45) #26
  %217 = getelementptr inbounds %struct.tree_common, ptr %216, i64 0, i32 2
  %218 = load ptr, ptr %217, align 8, !tbaa !16
  %219 = call ptr @create_tmp_var(ptr noundef %218, ptr noundef null) #26
  %220 = call ptr @gimple_build_assign_stat(ptr noundef %216, ptr noundef %219) #26
  %221 = getelementptr i8, ptr %45, i64 8
  %222 = load i32, ptr %221, align 8, !tbaa !16
  %223 = getelementptr inbounds %struct.gimple_statement_base, ptr %220, i64 0, i32 2
  store i32 %222, ptr %223, align 8, !tbaa !16
  %224 = getelementptr i8, ptr %45, i64 24
  %225 = load ptr, ptr %224, align 8, !tbaa !16
  %226 = getelementptr inbounds %struct.gimple_statement_base, ptr %220, i64 0, i32 5
  store ptr %225, ptr %226, align 8, !tbaa !16
  call void @gimple_set_lhs(ptr noundef nonnull %45, ptr noundef %219) #26
  %227 = getelementptr inbounds %struct.tree_common, ptr %219, i64 0, i32 2
  %228 = load ptr, ptr %227, align 8, !tbaa !16
  %229 = load i64, ptr %228, align 8
  %230 = trunc i64 %229 to i32
  %231 = and i32 %230, 65535
  %232 = add nsw i32 %231, -13
  %233 = icmp ult i32 %232, 2
  br i1 %233, label %234, label %238

234:                                              ; preds = %215
  %235 = getelementptr inbounds %struct.tree_decl_common, ptr %219, i64 0, i32 2
  %236 = load i64, ptr %235, align 8
  %237 = or i64 %236, 134217728
  store i64 %237, ptr %235, align 8
  br label %238

238:                                              ; preds = %234, %215
  call void @gsi_insert_after(ptr noundef nonnull %11, ptr noundef nonnull %220, i32 noundef 1) #26
  br label %239

239:                                              ; preds = %238, %209, %203, %200, %196, %171, %159, %155, %152
  %240 = phi i8 [ 0, %152 ], [ 1, %238 ], [ 1, %209 ], [ 1, %203 ], [ 1, %171 ], [ 1, %159 ], [ 1, %155 ], [ 1, %200 ], [ 1, %196 ]
  %241 = load ptr, ptr %11, align 8, !tbaa !44
  %242 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %241, i64 0, i32 2
  %243 = load ptr, ptr %242, align 8, !tbaa !53
  store ptr %243, ptr %11, align 8, !tbaa !44
  %244 = icmp eq ptr %243, null
  br i1 %244, label %245, label %38, !llvm.loop !54

245:                                              ; preds = %239
  %246 = load i1, ptr @found_computed_goto, align 1
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %11) #26
  %247 = load ptr, ptr @cfun, align 8, !tbaa !5
  br i1 %246, label %248, label %385

248:                                              ; preds = %245
  %249 = getelementptr inbounds %struct.function, ptr %247, i64 0, i32 1
  %250 = load ptr, ptr %249, align 8, !tbaa !23
  %251 = load ptr, ptr %250, align 8, !tbaa !34
  %252 = getelementptr inbounds %struct.basic_block_def, ptr %251, i64 0, i32 6
  %253 = load ptr, ptr %252, align 8, !tbaa !36
  %254 = getelementptr inbounds %struct.control_flow_graph, ptr %250, i64 0, i32 1
  %255 = load ptr, ptr %254, align 8, !tbaa !35
  %256 = icmp eq ptr %253, %255
  br i1 %256, label %385, label %257

257:                                              ; preds = %248
  %258 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %9, i64 0, i32 1
  %259 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %9, i64 0, i32 2
  %260 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %10, i64 0, i32 1
  %261 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %10, i64 0, i32 2
  br label %262

262:                                              ; preds = %373, %257
  %263 = phi ptr [ %253, %257 ], [ %378, %373 ]
  %264 = phi ptr [ null, %257 ], [ %376, %373 ]
  %265 = phi ptr [ null, %257 ], [ %375, %373 ]
  %266 = phi ptr [ null, %257 ], [ %374, %373 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #26
  call void @llvm.experimental.noalias.scope.decl(metadata !55)
  %267 = getelementptr inbounds %struct.basic_block_def, ptr %263, i64 0, i32 13
  %268 = load i32, ptr %267, align 8, !tbaa !58, !noalias !55
  %269 = and i32 %268, 512
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %373

271:                                              ; preds = %262
  %272 = getelementptr inbounds %struct.basic_block_def, ptr %263, i64 0, i32 7
  %273 = load ptr, ptr %272, align 8, !tbaa !16, !noalias !55
  %274 = icmp eq ptr %273, null
  br i1 %274, label %373, label %275

275:                                              ; preds = %271
  %276 = load ptr, ptr %273, align 8, !tbaa !59, !noalias !55
  %277 = icmp eq ptr %276, null
  br i1 %277, label %373, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds %struct.gimple_seq_d, ptr %276, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !61, !noalias !55
  store ptr %280, ptr %9, align 8, !tbaa !44, !alias.scope !55
  store ptr %276, ptr %258, align 8, !tbaa !46, !alias.scope !55
  store ptr %263, ptr %259, align 8, !tbaa !49, !alias.scope !55
  %281 = icmp eq ptr %280, null
  br i1 %281, label %373, label %282

282:                                              ; preds = %278
  %283 = load ptr, ptr %280, align 8, !tbaa !47
  %284 = icmp eq ptr %283, %266
  br i1 %284, label %373, label %285

285:                                              ; preds = %282
  %286 = load i32, ptr %283, align 8
  %287 = and i32 %286, 255
  %288 = icmp eq i32 %287, 3
  br i1 %288, label %289, label %373

289:                                              ; preds = %285
  %290 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %291
  %293 = load i64, ptr %292, align 8, !tbaa !50
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %296

295:                                              ; preds = %289
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %296

296:                                              ; preds = %295, %289
  %297 = getelementptr inbounds i8, ptr %283, i64 %293
  %298 = load ptr, ptr %297, align 8, !tbaa !5
  %299 = load i64, ptr %298, align 8
  %300 = and i64 %299, 65535
  %301 = icmp eq i64 %300, 30
  br i1 %301, label %373, label %302

302:                                              ; preds = %296
  %303 = icmp eq ptr %266, null
  br i1 %303, label %304, label %327

304:                                              ; preds = %302
  %305 = call ptr @create_empty_bb(ptr noundef nonnull %263) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #26
  call void @llvm.experimental.noalias.scope.decl(metadata !62)
  %306 = getelementptr inbounds %struct.basic_block_def, ptr %305, i64 0, i32 13
  %307 = load i32, ptr %306, align 8, !tbaa !58, !noalias !62
  %308 = and i32 %307, 512
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %319

310:                                              ; preds = %304
  %311 = getelementptr inbounds %struct.basic_block_def, ptr %305, i64 0, i32 7
  %312 = load ptr, ptr %311, align 8, !tbaa !16, !noalias !62
  %313 = icmp eq ptr %312, null
  br i1 %313, label %319, label %314

314:                                              ; preds = %310
  %315 = load ptr, ptr %312, align 8, !tbaa !59, !noalias !62
  %316 = icmp eq ptr %315, null
  br i1 %316, label %319, label %317

317:                                              ; preds = %314
  %318 = load ptr, ptr %315, align 8, !tbaa !42, !noalias !62
  br label %319

319:                                              ; preds = %317, %314, %310, %304
  %320 = phi ptr [ %315, %317 ], [ null, %314 ], [ null, %310 ], [ null, %304 ]
  %321 = phi ptr [ %318, %317 ], [ null, %314 ], [ null, %310 ], [ null, %304 ]
  store ptr %321, ptr %10, align 8, !tbaa !44, !alias.scope !62
  store ptr %320, ptr %260, align 8, !tbaa !46, !alias.scope !62
  store ptr %305, ptr %261, align 8, !tbaa !49, !alias.scope !62
  %322 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 39), align 8, !tbaa !5
  %323 = call ptr @create_tmp_var(ptr noundef %322, ptr noundef nonnull @.str.49) #26
  %324 = call ptr @create_artificial_label(i32 noundef 0) #26
  %325 = call ptr @gimple_build_label(ptr noundef %324) #26
  call void @gsi_insert_after(ptr noundef nonnull %10, ptr noundef %325, i32 noundef 0) #26
  %326 = call ptr @gimple_build_goto(ptr noundef %323) #26
  call void @gsi_insert_after(ptr noundef nonnull %10, ptr noundef %326, i32 noundef 0) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #26
  br label %327

327:                                              ; preds = %319, %302
  %328 = phi ptr [ %266, %302 ], [ %326, %319 ]
  %329 = phi ptr [ %265, %302 ], [ %323, %319 ]
  %330 = phi ptr [ %264, %302 ], [ %324, %319 ]
  %331 = load i32, ptr %283, align 8
  %332 = and i32 %331, 255
  %333 = add nsw i32 %332, -10
  %334 = icmp ult i32 %333, -9
  br i1 %334, label %347, label %335

335:                                              ; preds = %327
  %336 = zext i32 %332 to i64
  %337 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %336
  %338 = load i32, ptr %337, align 4, !tbaa !16
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %339
  %341 = load i64, ptr %340, align 8, !tbaa !50
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %344

343:                                              ; preds = %335
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %344

344:                                              ; preds = %343, %335
  %345 = getelementptr inbounds i8, ptr %283, i64 %341
  %346 = load ptr, ptr %345, align 8, !tbaa !5
  br label %347

347:                                              ; preds = %344, %327
  %348 = phi ptr [ %346, %344 ], [ null, %327 ]
  %349 = call ptr @gimple_build_assign_stat(ptr noundef %329, ptr noundef %348) #26
  call void @gsi_insert_before(ptr noundef nonnull %9, ptr noundef %349, i32 noundef 1) #26
  %350 = load i32, ptr %283, align 8
  %351 = and i32 %350, 255
  %352 = add nsw i32 %351, -10
  %353 = icmp ult i32 %352, -9
  br i1 %353, label %358, label %354

354:                                              ; preds = %347
  %355 = getelementptr i8, ptr %283, i64 12
  %356 = load i32, ptr %355, align 4, !tbaa !16
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %361

358:                                              ; preds = %354, %347
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %359 = load i32, ptr %283, align 8
  %360 = and i32 %359, 255
  br label %361

361:                                              ; preds = %358, %354
  %362 = phi i32 [ %351, %354 ], [ %360, %358 ]
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %363
  %365 = load i32, ptr %364, align 4, !tbaa !16
  %366 = zext i32 %365 to i64
  %367 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %366
  %368 = load i64, ptr %367, align 8, !tbaa !50
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %361
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %371

371:                                              ; preds = %370, %361
  %372 = getelementptr inbounds i8, ptr %283, i64 %368
  store ptr %330, ptr %372, align 8, !tbaa !5
  br label %373

373:                                              ; preds = %371, %296, %285, %282, %278, %275, %271, %262
  %374 = phi ptr [ %266, %278 ], [ %266, %282 ], [ %328, %371 ], [ %266, %296 ], [ %266, %285 ], [ %266, %275 ], [ %266, %271 ], [ %266, %262 ]
  %375 = phi ptr [ %265, %278 ], [ %265, %282 ], [ %329, %371 ], [ %265, %296 ], [ %265, %285 ], [ %265, %275 ], [ %265, %271 ], [ %265, %262 ]
  %376 = phi ptr [ %264, %278 ], [ %264, %282 ], [ %330, %371 ], [ %264, %296 ], [ %264, %285 ], [ %264, %275 ], [ %264, %271 ], [ %264, %262 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #26
  %377 = getelementptr inbounds %struct.basic_block_def, ptr %263, i64 0, i32 6
  %378 = load ptr, ptr %377, align 8, !tbaa !36
  %379 = load ptr, ptr @cfun, align 8, !tbaa !5
  %380 = getelementptr inbounds %struct.function, ptr %379, i64 0, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !23
  %382 = getelementptr inbounds %struct.control_flow_graph, ptr %381, i64 0, i32 1
  %383 = load ptr, ptr %382, align 8, !tbaa !35
  %384 = icmp eq ptr %378, %383
  br i1 %384, label %385, label %262, !llvm.loop !65

385:                                              ; preds = %373, %248, %245, %23, %17
  %386 = phi ptr [ %247, %248 ], [ %18, %17 ], [ %247, %245 ], [ %24, %23 ], [ %379, %373 ]
  %387 = getelementptr inbounds %struct.function, ptr %386, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !tbaa !23
  %389 = getelementptr inbounds %struct.control_flow_graph, ptr %388, i64 0, i32 3
  %390 = load i32, ptr %389, align 8, !tbaa !27
  %391 = icmp eq i32 %390, 2
  br i1 %391, label %392, label %398

392:                                              ; preds = %385
  %393 = load ptr, ptr %388, align 8, !tbaa !34
  %394 = call ptr @create_empty_bb(ptr noundef %393) #26
  %395 = load ptr, ptr @cfun, align 8, !tbaa !5
  %396 = getelementptr inbounds %struct.function, ptr %395, i64 0, i32 1
  %397 = load ptr, ptr %396, align 8, !tbaa !23
  br label %398

398:                                              ; preds = %392, %385
  %399 = phi ptr [ %397, %392 ], [ %388, %385 ]
  %400 = getelementptr inbounds %struct.control_flow_graph, ptr %399, i64 0, i32 2
  %401 = load ptr, ptr %400, align 8, !tbaa !5
  %402 = icmp eq ptr %401, null
  br i1 %402, label %403, label %407

403:                                              ; preds = %398
  %404 = getelementptr inbounds %struct.control_flow_graph, ptr %399, i64 0, i32 3
  %405 = load i32, ptr %404, align 8, !tbaa !27
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %436, label %420

407:                                              ; preds = %398
  %408 = load i32, ptr %401, align 8, !tbaa !30
  %409 = zext i32 %408 to i64
  %410 = getelementptr inbounds %struct.control_flow_graph, ptr %399, i64 0, i32 3
  %411 = load i32, ptr %410, align 8, !tbaa !27
  %412 = sext i32 %411 to i64
  %413 = icmp ult i64 %409, %412
  br i1 %413, label %414, label %436

414:                                              ; preds = %407
  %415 = sub nsw i32 %411, %408
  %416 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %401, i64 0, i32 1
  %417 = load i32, ptr %416, align 4, !tbaa !32
  %418 = sub i32 %417, %408
  %419 = icmp ult i32 %418, %415
  br i1 %419, label %420, label %426

420:                                              ; preds = %403, %414
  %421 = phi i32 [ %411, %414 ], [ %405, %403 ]
  %422 = phi i32 [ %408, %414 ], [ 0, %403 ]
  %423 = phi i32 [ %415, %414 ], [ %405, %403 ]
  %424 = call ptr @vec_gc_p_reserve_exact(ptr noundef %401, i32 noundef %423) #26
  store ptr %424, ptr %400, align 8, !tbaa !5
  %425 = sub nsw i32 %421, %422
  br label %426

426:                                              ; preds = %420, %414
  %427 = phi i32 [ %411, %414 ], [ %421, %420 ]
  %428 = phi i32 [ %415, %414 ], [ %425, %420 ]
  %429 = phi i32 [ %408, %414 ], [ %422, %420 ]
  %430 = phi ptr [ %401, %414 ], [ %424, %420 ]
  store i32 %427, ptr %430, align 8, !tbaa !30
  %431 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %430, i64 0, i32 2
  %432 = sext i32 %429 to i64
  %433 = getelementptr inbounds ptr, ptr %431, i64 %432
  %434 = sext i32 %428 to i64
  %435 = shl nsw i64 %434, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 8 %433, i8 0, i64 %435, i1 false)
  br label %436

436:                                              ; preds = %426, %407, %403
  call void @cleanup_dead_labels()
  call void @group_case_labels()
  %437 = call ptr @htab_create(i64 noundef 13, ptr noundef nonnull @locus_map_hash, ptr noundef nonnull @locus_map_eq, ptr noundef nonnull @free) #26
  store ptr %437, ptr @discriminator_per_locus, align 8, !tbaa !5
  %438 = load ptr, ptr @cfun, align 8, !tbaa !5
  %439 = getelementptr inbounds %struct.function, ptr %438, i64 0, i32 1
  %440 = load ptr, ptr %439, align 8, !tbaa !23
  %441 = load ptr, ptr %440, align 8, !tbaa !34
  %442 = getelementptr inbounds %struct.control_flow_graph, ptr %440, i64 0, i32 2
  %443 = load ptr, ptr %442, align 8, !tbaa !29
  %444 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %443, i64 0, i32 2, i64 2
  %445 = load ptr, ptr %444, align 8, !tbaa !5
  %446 = call ptr @make_edge(ptr noundef %441, ptr noundef %445, i32 noundef 1) #26
  %447 = load ptr, ptr @cfun, align 8, !tbaa !5
  %448 = getelementptr inbounds %struct.function, ptr %447, i64 0, i32 1
  %449 = load ptr, ptr %448, align 8, !tbaa !23
  %450 = load ptr, ptr %449, align 8, !tbaa !34
  %451 = getelementptr inbounds %struct.basic_block_def, ptr %450, i64 0, i32 6
  %452 = load ptr, ptr %451, align 8, !tbaa !36
  %453 = getelementptr inbounds %struct.control_flow_graph, ptr %449, i64 0, i32 1
  %454 = load ptr, ptr %453, align 8, !tbaa !35
  %455 = icmp eq ptr %452, %454
  br i1 %455, label %1309, label %456

456:                                              ; preds = %436
  %457 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  %458 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  %459 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 1
  %460 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 2
  %461 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %6, i64 0, i32 1
  %462 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %6, i64 0, i32 2
  %463 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %5, i64 0, i32 1
  %464 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %5, i64 0, i32 2
  %465 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %8, i64 0, i32 1
  %466 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %8, i64 0, i32 2
  %467 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %7, i64 0, i32 1
  %468 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %7, i64 0, i32 2
  br label %469

469:                                              ; preds = %1298, %456
  %470 = phi ptr [ %454, %456 ], [ %1307, %1298 ]
  %471 = phi ptr [ %452, %456 ], [ %1302, %1298 ]
  %472 = phi ptr [ null, %456 ], [ %1299, %1298 ]
  %473 = phi i8 [ undef, %456 ], [ %1300, %1298 ]
  %474 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 13
  %475 = load i32, ptr %474, align 8, !tbaa !58, !noalias !66
  %476 = and i32 %475, 512
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %1285

478:                                              ; preds = %469
  %479 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 7
  %480 = load ptr, ptr %479, align 8, !tbaa !16, !noalias !66
  %481 = icmp eq ptr %480, null
  br i1 %481, label %1285, label %482

482:                                              ; preds = %478
  %483 = load ptr, ptr %480, align 8, !tbaa !59, !noalias !66
  %484 = icmp eq ptr %483, null
  br i1 %484, label %1285, label %485

485:                                              ; preds = %482
  %486 = getelementptr inbounds %struct.gimple_seq_d, ptr %483, i64 0, i32 1
  %487 = load ptr, ptr %486, align 8, !tbaa !61, !noalias !66
  %488 = icmp eq ptr %487, null
  br i1 %488, label %1285, label %489

489:                                              ; preds = %485, %495
  %490 = phi ptr [ %497, %495 ], [ %487, %485 ]
  %491 = load ptr, ptr %490, align 8, !tbaa !47
  %492 = load i32, ptr %491, align 8
  %493 = and i32 %492, 255
  %494 = icmp eq i32 %493, 2
  br i1 %494, label %495, label %499

495:                                              ; preds = %489
  %496 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %490, i64 0, i32 1
  %497 = load ptr, ptr %496, align 8, !tbaa !67
  %498 = icmp eq ptr %497, null
  br i1 %498, label %1285, label %489, !llvm.loop !68

499:                                              ; preds = %489
  %500 = trunc i32 %492 to i8
  switch i8 %500, label %1277 [
    i8 3, label %511
    i8 9, label %617
    i8 1, label %619
    i8 5, label %506
    i8 14, label %1023
    i8 15, label %1024
    i8 8, label %1026
    i8 6, label %1062
    i8 7, label %501
    i8 26, label %1176
    i8 27, label %1176
    i8 23, label %1176
    i8 32, label %1176
    i8 24, label %1176
    i8 25, label %1176
    i8 22, label %1176
    i8 29, label %1176
    i8 30, label %1178
    i8 31, label %1298
    i8 19, label %1289
    i8 20, label %1289
    i8 28, label %1180
    i8 21, label %1187
  ]

501:                                              ; preds = %499
  %502 = load ptr, ptr %487, align 8, !tbaa !47
  %503 = load i32, ptr %502, align 8
  %504 = and i32 %503, 255
  %505 = icmp eq i32 %504, 2
  br i1 %505, label %1066, label %1074

506:                                              ; preds = %499
  %507 = load ptr, ptr %487, align 8, !tbaa !47
  %508 = load i32, ptr %507, align 8
  %509 = and i32 %508, 255
  %510 = icmp eq i32 %509, 2
  br i1 %510, label %915, label %923

511:                                              ; preds = %499
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8) #26
  store ptr %487, ptr %8, align 8, !tbaa !44, !alias.scope !69
  store ptr %483, ptr %465, align 8, !tbaa !46, !alias.scope !69
  store ptr %471, ptr %466, align 8, !tbaa !49, !alias.scope !69
  %512 = load ptr, ptr %487, align 8, !tbaa !47
  %513 = load i32, ptr %512, align 8
  %514 = and i32 %513, 255
  %515 = icmp eq i32 %514, 3
  br i1 %515, label %516, label %615

516:                                              ; preds = %511
  %517 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %518 = zext i32 %517 to i64
  %519 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %518
  %520 = load i64, ptr %519, align 8, !tbaa !50
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %523

522:                                              ; preds = %516
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %523

523:                                              ; preds = %522, %516
  %524 = getelementptr inbounds i8, ptr %512, i64 %520
  %525 = load ptr, ptr %524, align 8, !tbaa !5
  %526 = load i64, ptr %525, align 8
  %527 = and i64 %526, 65535
  %528 = icmp eq i64 %527, 30
  br i1 %528, label %529, label %615

529:                                              ; preds = %523
  %530 = load i32, ptr %512, align 8
  %531 = and i32 %530, 255
  %532 = add nsw i32 %531, -10
  %533 = icmp ult i32 %532, -9
  br i1 %533, label %546, label %534

534:                                              ; preds = %529
  %535 = zext i32 %531 to i64
  %536 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %535
  %537 = load i32, ptr %536, align 4, !tbaa !16
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %538
  %540 = load i64, ptr %539, align 8, !tbaa !50
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %542, label %543

542:                                              ; preds = %534
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %543

543:                                              ; preds = %542, %534
  %544 = getelementptr inbounds i8, ptr %512, i64 %540
  %545 = load ptr, ptr %544, align 8, !tbaa !5
  br label %546

546:                                              ; preds = %543, %529
  %547 = phi ptr [ %545, %543 ], [ null, %529 ]
  %548 = load ptr, ptr @cfun, align 8, !tbaa !5
  %549 = getelementptr inbounds %struct.tree_label_decl, ptr %547, i64 0, i32 1
  %550 = load i32, ptr %549, align 8, !tbaa !16
  %551 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %552 = getelementptr inbounds %struct.diagnostic_context, ptr %551, i64 0, i32 1, i64 4
  %553 = load i32, ptr %552, align 8, !tbaa !20
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %561

555:                                              ; preds = %546
  %556 = getelementptr inbounds %struct.diagnostic_context, ptr %551, i64 0, i32 1, i64 5
  %557 = load i32, ptr %556, align 4, !tbaa !20
  %558 = icmp ne i32 %557, 0
  %559 = icmp slt i32 %550, 0
  %560 = select i1 %558, i1 %559, i1 false
  br i1 %560, label %563, label %588

561:                                              ; preds = %546
  %562 = icmp slt i32 %550, 0
  br i1 %562, label %563, label %588

563:                                              ; preds = %561, %555
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #26
  %564 = getelementptr inbounds %struct.function, ptr %548, i64 0, i32 1
  %565 = load ptr, ptr %564, align 8, !tbaa !23
  %566 = getelementptr inbounds %struct.control_flow_graph, ptr %565, i64 0, i32 2
  %567 = load ptr, ptr %566, align 8, !tbaa !29
  %568 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %567, i64 0, i32 2, i64 2
  %569 = load ptr, ptr %568, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !72)
  %570 = getelementptr inbounds %struct.basic_block_def, ptr %569, i64 0, i32 13
  %571 = load i32, ptr %570, align 8, !tbaa !58, !noalias !72
  %572 = and i32 %571, 512
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %583

574:                                              ; preds = %563
  %575 = getelementptr inbounds %struct.basic_block_def, ptr %569, i64 0, i32 7
  %576 = load ptr, ptr %575, align 8, !tbaa !16, !noalias !72
  %577 = icmp eq ptr %576, null
  br i1 %577, label %583, label %578

578:                                              ; preds = %574
  %579 = load ptr, ptr %576, align 8, !tbaa !59, !noalias !72
  %580 = icmp eq ptr %579, null
  br i1 %580, label %583, label %581

581:                                              ; preds = %578
  %582 = load ptr, ptr %579, align 8, !tbaa !42, !noalias !72
  br label %583

583:                                              ; preds = %581, %578, %574, %563
  %584 = phi ptr [ %579, %581 ], [ null, %578 ], [ null, %574 ], [ null, %563 ]
  %585 = phi ptr [ %582, %581 ], [ null, %578 ], [ null, %574 ], [ null, %563 ]
  store ptr %585, ptr %7, align 8, !tbaa !44, !alias.scope !72
  store ptr %584, ptr %467, align 8, !tbaa !46, !alias.scope !72
  store ptr %569, ptr %468, align 8, !tbaa !49, !alias.scope !72
  %586 = call ptr @gimple_build_label(ptr noundef nonnull %547) #26
  call void @gsi_insert_before(ptr noundef nonnull %7, ptr noundef %586, i32 noundef 0) #26
  %587 = load i32, ptr %549, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #26
  br label %588

588:                                              ; preds = %583, %561, %555
  %589 = phi i32 [ %587, %583 ], [ %550, %561 ], [ %550, %555 ]
  %590 = getelementptr inbounds %struct.function, ptr %548, i64 0, i32 1
  %591 = load ptr, ptr %590, align 8, !tbaa !23
  %592 = getelementptr inbounds %struct.control_flow_graph, ptr %591, i64 0, i32 6
  %593 = load ptr, ptr %592, align 8, !tbaa !33
  %594 = icmp eq ptr %593, null
  br i1 %594, label %602, label %595

595:                                              ; preds = %588
  %596 = load i32, ptr %593, align 8, !tbaa !30
  %597 = icmp ugt i32 %596, %589
  br i1 %597, label %598, label %602

598:                                              ; preds = %595
  %599 = zext i32 %589 to i64
  %600 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %593, i64 0, i32 2, i64 %599
  %601 = load ptr, ptr %600, align 8, !tbaa !5
  br label %602

602:                                              ; preds = %598, %595, %588
  %603 = phi ptr [ %601, %598 ], [ null, %595 ], [ null, %588 ]
  %604 = call ptr @make_edge(ptr noundef nonnull %471, ptr noundef %603, i32 noundef 1) #26
  %605 = getelementptr i8, ptr %512, i64 8
  %606 = load i32, ptr %605, align 8, !tbaa !16
  %607 = getelementptr inbounds %struct.edge_def, ptr %604, i64 0, i32 5
  store i32 %606, ptr %607, align 8, !tbaa !75
  call fastcc void @assign_discriminator(i32 noundef %606, ptr noundef %603)
  %608 = load i32, ptr %607, align 8, !tbaa !75
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %614, label %610

610:                                              ; preds = %602
  %611 = getelementptr i8, ptr %512, i64 24
  %612 = load ptr, ptr %611, align 8, !tbaa !16
  %613 = getelementptr inbounds %struct.edge_def, ptr %604, i64 0, i32 4
  store ptr %612, ptr %613, align 8, !tbaa !77
  br label %614

614:                                              ; preds = %610, %602
  call void @gsi_remove(ptr noundef nonnull %8, i8 noundef zeroext 1) #26
  br label %616

615:                                              ; preds = %523, %511
  call void @make_abnormal_goto_edges(ptr noundef nonnull %471, i8 noundef zeroext 0)
  br label %616

616:                                              ; preds = %615, %614
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8) #26
  br label %1298

617:                                              ; preds = %499
  %618 = call ptr @make_edge(ptr noundef %471, ptr noundef %470, i32 noundef 0) #26
  br label %1298

619:                                              ; preds = %499, %624
  %620 = phi ptr [ %626, %624 ], [ %487, %499 ]
  %621 = load ptr, ptr %620, align 8, !tbaa !47
  %622 = load i32, ptr %621, align 8
  %623 = trunc i32 %622 to i8
  switch i8 %623, label %632 [
    i8 2, label %624
    i8 1, label %628
  ]

624:                                              ; preds = %619
  %625 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %620, i64 0, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !67
  %627 = icmp eq ptr %626, null
  br i1 %627, label %631, label %619, !llvm.loop !68

628:                                              ; preds = %619
  %629 = getelementptr i8, ptr %621, i64 8
  %630 = load i32, ptr %629, align 8, !tbaa !16
  br label %639

631:                                              ; preds = %624
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 788, ptr noundef nonnull @.str.2) #26
  unreachable

632:                                              ; preds = %619
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 789, ptr noundef nonnull @.str.2) #26
  %633 = load i32, ptr %621, align 8
  %634 = and i32 %633, 255
  %635 = getelementptr i8, ptr %621, i64 8
  %636 = load i32, ptr %635, align 8, !tbaa !16
  %637 = add nsw i32 %634, -10
  %638 = icmp ult i32 %637, -9
  br i1 %638, label %660, label %639

639:                                              ; preds = %632, %628
  %640 = phi i32 [ -9, %628 ], [ %637, %632 ]
  %641 = phi i32 [ %630, %628 ], [ %636, %632 ]
  %642 = phi i32 [ 1, %628 ], [ %634, %632 ]
  %643 = zext i32 %642 to i64
  %644 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %643
  %645 = load i32, ptr %644, align 4, !tbaa !16
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %646
  %648 = load i64, ptr %647, align 8, !tbaa !50
  %649 = icmp eq i64 %648, 0
  br i1 %649, label %650, label %654

650:                                              ; preds = %639
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %651 = load i32, ptr %621, align 8
  %652 = and i32 %651, 255
  %653 = add nsw i32 %652, -10
  br label %654

654:                                              ; preds = %650, %639
  %655 = phi i32 [ %653, %650 ], [ %640, %639 ]
  %656 = phi i32 [ %652, %650 ], [ %642, %639 ]
  %657 = getelementptr inbounds i8, ptr %621, i64 %648
  %658 = getelementptr inbounds ptr, ptr %657, i64 2
  %659 = load ptr, ptr %658, align 8, !tbaa !5
  br label %660

660:                                              ; preds = %654, %632
  %661 = phi i32 [ %636, %632 ], [ %641, %654 ]
  %662 = phi i32 [ %637, %632 ], [ %655, %654 ]
  %663 = phi i32 [ %634, %632 ], [ %656, %654 ]
  %664 = phi ptr [ null, %632 ], [ %659, %654 ]
  %665 = icmp ult i32 %662, -9
  br i1 %665, label %679, label %666

666:                                              ; preds = %660
  %667 = zext i32 %663 to i64
  %668 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %667
  %669 = load i32, ptr %668, align 4, !tbaa !16
  %670 = zext i32 %669 to i64
  %671 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %670
  %672 = load i64, ptr %671, align 8, !tbaa !50
  %673 = icmp eq i64 %672, 0
  br i1 %673, label %674, label %675

674:                                              ; preds = %666
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %675

675:                                              ; preds = %674, %666
  %676 = getelementptr inbounds i8, ptr %621, i64 %672
  %677 = getelementptr inbounds ptr, ptr %676, i64 3
  %678 = load ptr, ptr %677, align 8, !tbaa !5
  br label %679

679:                                              ; preds = %675, %660
  %680 = phi ptr [ %678, %675 ], [ null, %660 ]
  %681 = load ptr, ptr @cfun, align 8, !tbaa !5
  %682 = getelementptr inbounds %struct.tree_label_decl, ptr %664, i64 0, i32 1
  %683 = load i32, ptr %682, align 8, !tbaa !16
  %684 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %685 = getelementptr inbounds %struct.diagnostic_context, ptr %684, i64 0, i32 1, i64 4
  %686 = load i32, ptr %685, align 8, !tbaa !20
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %688, label %694

688:                                              ; preds = %679
  %689 = getelementptr inbounds %struct.diagnostic_context, ptr %684, i64 0, i32 1, i64 5
  %690 = load i32, ptr %689, align 4, !tbaa !20
  %691 = icmp ne i32 %690, 0
  %692 = icmp slt i32 %683, 0
  %693 = select i1 %691, i1 %692, i1 false
  br i1 %693, label %696, label %721

694:                                              ; preds = %679
  %695 = icmp slt i32 %683, 0
  br i1 %695, label %696, label %721

696:                                              ; preds = %694, %688
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #26
  %697 = getelementptr inbounds %struct.function, ptr %681, i64 0, i32 1
  %698 = load ptr, ptr %697, align 8, !tbaa !23
  %699 = getelementptr inbounds %struct.control_flow_graph, ptr %698, i64 0, i32 2
  %700 = load ptr, ptr %699, align 8, !tbaa !29
  %701 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %700, i64 0, i32 2, i64 2
  %702 = load ptr, ptr %701, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !78)
  %703 = getelementptr inbounds %struct.basic_block_def, ptr %702, i64 0, i32 13
  %704 = load i32, ptr %703, align 8, !tbaa !58, !noalias !78
  %705 = and i32 %704, 512
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %707, label %716

707:                                              ; preds = %696
  %708 = getelementptr inbounds %struct.basic_block_def, ptr %702, i64 0, i32 7
  %709 = load ptr, ptr %708, align 8, !tbaa !16, !noalias !78
  %710 = icmp eq ptr %709, null
  br i1 %710, label %716, label %711

711:                                              ; preds = %707
  %712 = load ptr, ptr %709, align 8, !tbaa !59, !noalias !78
  %713 = icmp eq ptr %712, null
  br i1 %713, label %716, label %714

714:                                              ; preds = %711
  %715 = load ptr, ptr %712, align 8, !tbaa !42, !noalias !78
  br label %716

716:                                              ; preds = %714, %711, %707, %696
  %717 = phi ptr [ %712, %714 ], [ null, %711 ], [ null, %707 ], [ null, %696 ]
  %718 = phi ptr [ %715, %714 ], [ null, %711 ], [ null, %707 ], [ null, %696 ]
  store ptr %718, ptr %6, align 8, !tbaa !44, !alias.scope !78
  store ptr %717, ptr %461, align 8, !tbaa !46, !alias.scope !78
  store ptr %702, ptr %462, align 8, !tbaa !49, !alias.scope !78
  %719 = call ptr @gimple_build_label(ptr noundef nonnull %664) #26
  call void @gsi_insert_before(ptr noundef nonnull %6, ptr noundef %719, i32 noundef 0) #26
  %720 = load i32, ptr %682, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #26
  br label %721

721:                                              ; preds = %716, %694, %688
  %722 = phi i32 [ %720, %716 ], [ %683, %694 ], [ %683, %688 ]
  %723 = getelementptr inbounds %struct.function, ptr %681, i64 0, i32 1
  %724 = load ptr, ptr %723, align 8, !tbaa !23
  %725 = getelementptr inbounds %struct.control_flow_graph, ptr %724, i64 0, i32 6
  %726 = load ptr, ptr %725, align 8, !tbaa !33
  %727 = icmp eq ptr %726, null
  br i1 %727, label %735, label %728

728:                                              ; preds = %721
  %729 = load i32, ptr %726, align 8, !tbaa !30
  %730 = icmp ugt i32 %729, %722
  br i1 %730, label %731, label %735

731:                                              ; preds = %728
  %732 = zext i32 %722 to i64
  %733 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %726, i64 0, i32 2, i64 %732
  %734 = load ptr, ptr %733, align 8, !tbaa !5
  br label %735

735:                                              ; preds = %731, %728, %721
  %736 = phi ptr [ %734, %731 ], [ null, %728 ], [ null, %721 ]
  %737 = load ptr, ptr @cfun, align 8, !tbaa !5
  %738 = getelementptr inbounds %struct.tree_label_decl, ptr %680, i64 0, i32 1
  %739 = load i32, ptr %738, align 8, !tbaa !16
  %740 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %741 = getelementptr inbounds %struct.diagnostic_context, ptr %740, i64 0, i32 1, i64 4
  %742 = load i32, ptr %741, align 8, !tbaa !20
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %750

744:                                              ; preds = %735
  %745 = getelementptr inbounds %struct.diagnostic_context, ptr %740, i64 0, i32 1, i64 5
  %746 = load i32, ptr %745, align 4, !tbaa !20
  %747 = icmp ne i32 %746, 0
  %748 = icmp slt i32 %739, 0
  %749 = select i1 %747, i1 %748, i1 false
  br i1 %749, label %752, label %777

750:                                              ; preds = %735
  %751 = icmp slt i32 %739, 0
  br i1 %751, label %752, label %777

752:                                              ; preds = %750, %744
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  %753 = getelementptr inbounds %struct.function, ptr %737, i64 0, i32 1
  %754 = load ptr, ptr %753, align 8, !tbaa !23
  %755 = getelementptr inbounds %struct.control_flow_graph, ptr %754, i64 0, i32 2
  %756 = load ptr, ptr %755, align 8, !tbaa !29
  %757 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %756, i64 0, i32 2, i64 2
  %758 = load ptr, ptr %757, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !81)
  %759 = getelementptr inbounds %struct.basic_block_def, ptr %758, i64 0, i32 13
  %760 = load i32, ptr %759, align 8, !tbaa !58, !noalias !81
  %761 = and i32 %760, 512
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %763, label %772

763:                                              ; preds = %752
  %764 = getelementptr inbounds %struct.basic_block_def, ptr %758, i64 0, i32 7
  %765 = load ptr, ptr %764, align 8, !tbaa !16, !noalias !81
  %766 = icmp eq ptr %765, null
  br i1 %766, label %772, label %767

767:                                              ; preds = %763
  %768 = load ptr, ptr %765, align 8, !tbaa !59, !noalias !81
  %769 = icmp eq ptr %768, null
  br i1 %769, label %772, label %770

770:                                              ; preds = %767
  %771 = load ptr, ptr %768, align 8, !tbaa !42, !noalias !81
  br label %772

772:                                              ; preds = %770, %767, %763, %752
  %773 = phi ptr [ %768, %770 ], [ null, %767 ], [ null, %763 ], [ null, %752 ]
  %774 = phi ptr [ %771, %770 ], [ null, %767 ], [ null, %763 ], [ null, %752 ]
  store ptr %774, ptr %5, align 8, !tbaa !44, !alias.scope !81
  store ptr %773, ptr %463, align 8, !tbaa !46, !alias.scope !81
  store ptr %758, ptr %464, align 8, !tbaa !49, !alias.scope !81
  %775 = call ptr @gimple_build_label(ptr noundef nonnull %680) #26
  call void @gsi_insert_before(ptr noundef nonnull %5, ptr noundef %775, i32 noundef 0) #26
  %776 = load i32, ptr %738, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  br label %777

777:                                              ; preds = %772, %750, %744
  %778 = phi i32 [ %776, %772 ], [ %739, %750 ], [ %739, %744 ]
  %779 = getelementptr inbounds %struct.function, ptr %737, i64 0, i32 1
  %780 = load ptr, ptr %779, align 8, !tbaa !23
  %781 = getelementptr inbounds %struct.control_flow_graph, ptr %780, i64 0, i32 6
  %782 = load ptr, ptr %781, align 8, !tbaa !33
  %783 = icmp eq ptr %782, null
  br i1 %783, label %791, label %784

784:                                              ; preds = %777
  %785 = load i32, ptr %782, align 8, !tbaa !30
  %786 = icmp ugt i32 %785, %778
  br i1 %786, label %787, label %791

787:                                              ; preds = %784
  %788 = zext i32 %778 to i64
  %789 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %782, i64 0, i32 2, i64 %788
  %790 = load ptr, ptr %789, align 8, !tbaa !5
  br label %791

791:                                              ; preds = %787, %784, %777
  %792 = phi ptr [ %790, %787 ], [ null, %784 ], [ null, %777 ]
  %793 = getelementptr inbounds %struct.basic_block_def, ptr %736, i64 0, i32 13
  %794 = load i32, ptr %793, align 8, !tbaa !58, !noalias !84
  %795 = and i32 %794, 512
  %796 = icmp eq i32 %795, 0
  br i1 %796, label %797, label %817

797:                                              ; preds = %791
  %798 = getelementptr inbounds %struct.basic_block_def, ptr %736, i64 0, i32 7
  %799 = load ptr, ptr %798, align 8, !tbaa !16, !noalias !84
  %800 = icmp eq ptr %799, null
  br i1 %800, label %817, label %801

801:                                              ; preds = %797
  %802 = load ptr, ptr %799, align 8, !tbaa !59, !noalias !84
  %803 = icmp eq ptr %802, null
  br i1 %803, label %817, label %804

804:                                              ; preds = %801
  %805 = load ptr, ptr %802, align 8, !tbaa !42, !noalias !84
  %806 = icmp eq ptr %805, null
  br i1 %806, label %817, label %807

807:                                              ; preds = %804, %813
  %808 = phi ptr [ %815, %813 ], [ %805, %804 ]
  %809 = load ptr, ptr %808, align 8, !tbaa !47
  %810 = load i32, ptr %809, align 8
  %811 = and i32 %810, 255
  %812 = icmp eq i32 %811, 2
  br i1 %812, label %813, label %817

813:                                              ; preds = %807
  %814 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %808, i64 0, i32 2
  %815 = load ptr, ptr %814, align 8, !tbaa !53
  %816 = icmp eq ptr %815, null
  br i1 %816, label %817, label %807, !llvm.loop !87

817:                                              ; preds = %813, %807, %804, %801, %797, %791
  %818 = phi ptr [ null, %804 ], [ null, %801 ], [ null, %797 ], [ null, %791 ], [ null, %813 ], [ %809, %807 ]
  %819 = getelementptr inbounds %struct.basic_block_def, ptr %792, i64 0, i32 13
  %820 = load i32, ptr %819, align 8, !tbaa !58, !noalias !88
  %821 = and i32 %820, 512
  %822 = icmp eq i32 %821, 0
  br i1 %822, label %823, label %843

823:                                              ; preds = %817
  %824 = getelementptr inbounds %struct.basic_block_def, ptr %792, i64 0, i32 7
  %825 = load ptr, ptr %824, align 8, !tbaa !16, !noalias !88
  %826 = icmp eq ptr %825, null
  br i1 %826, label %843, label %827

827:                                              ; preds = %823
  %828 = load ptr, ptr %825, align 8, !tbaa !59, !noalias !88
  %829 = icmp eq ptr %828, null
  br i1 %829, label %843, label %830

830:                                              ; preds = %827
  %831 = load ptr, ptr %828, align 8, !tbaa !42, !noalias !88
  %832 = icmp eq ptr %831, null
  br i1 %832, label %843, label %833

833:                                              ; preds = %830, %839
  %834 = phi ptr [ %841, %839 ], [ %831, %830 ]
  %835 = load ptr, ptr %834, align 8, !tbaa !47
  %836 = load i32, ptr %835, align 8
  %837 = and i32 %836, 255
  %838 = icmp eq i32 %837, 2
  br i1 %838, label %839, label %843

839:                                              ; preds = %833
  %840 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %834, i64 0, i32 2
  %841 = load ptr, ptr %840, align 8, !tbaa !53
  %842 = icmp eq ptr %841, null
  br i1 %842, label %843, label %833, !llvm.loop !87

843:                                              ; preds = %839, %833, %830, %827, %823, %817
  %844 = phi ptr [ null, %830 ], [ null, %827 ], [ null, %823 ], [ null, %817 ], [ null, %839 ], [ %835, %833 ]
  %845 = call ptr @make_edge(ptr noundef %471, ptr noundef %736, i32 noundef 1024) #26
  call fastcc void @assign_discriminator(i32 noundef %661, ptr noundef %736)
  %846 = getelementptr i8, ptr %818, i64 8
  %847 = load i32, ptr %846, align 8, !tbaa !16
  %848 = getelementptr inbounds %struct.edge_def, ptr %845, i64 0, i32 5
  store i32 %847, ptr %848, align 8, !tbaa !75
  %849 = icmp eq i32 %847, 0
  br i1 %849, label %854, label %850

850:                                              ; preds = %843
  %851 = getelementptr i8, ptr %818, i64 24
  %852 = load ptr, ptr %851, align 8, !tbaa !16
  %853 = getelementptr inbounds %struct.edge_def, ptr %845, i64 0, i32 4
  store ptr %852, ptr %853, align 8, !tbaa !77
  br label %854

854:                                              ; preds = %850, %843
  %855 = call ptr @make_edge(ptr noundef %471, ptr noundef %792, i32 noundef 2048) #26
  %856 = icmp eq ptr %855, null
  br i1 %856, label %866, label %857

857:                                              ; preds = %854
  call fastcc void @assign_discriminator(i32 noundef %661, ptr noundef %792)
  %858 = getelementptr i8, ptr %844, i64 8
  %859 = load i32, ptr %858, align 8, !tbaa !16
  %860 = getelementptr inbounds %struct.edge_def, ptr %855, i64 0, i32 5
  store i32 %859, ptr %860, align 8, !tbaa !75
  %861 = icmp eq i32 %859, 0
  br i1 %861, label %866, label %862

862:                                              ; preds = %857
  %863 = getelementptr i8, ptr %844, i64 24
  %864 = load ptr, ptr %863, align 8, !tbaa !16
  %865 = getelementptr inbounds %struct.edge_def, ptr %855, i64 0, i32 4
  store ptr %864, ptr %865, align 8, !tbaa !77
  br label %866

866:                                              ; preds = %862, %857, %854
  %867 = load i32, ptr %621, align 8
  %868 = and i32 %867, 255
  %869 = add nsw i32 %868, -10
  %870 = icmp ult i32 %869, -9
  br i1 %870, label %875, label %871

871:                                              ; preds = %866
  %872 = getelementptr i8, ptr %621, i64 12
  %873 = load i32, ptr %872, align 4, !tbaa !16
  %874 = icmp ugt i32 %873, 2
  br i1 %874, label %878, label %875

875:                                              ; preds = %871, %866
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %876 = load i32, ptr %621, align 8
  %877 = and i32 %876, 255
  br label %878

878:                                              ; preds = %875, %871
  %879 = phi i32 [ %868, %871 ], [ %877, %875 ]
  %880 = zext i32 %879 to i64
  %881 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %880
  %882 = load i32, ptr %881, align 4, !tbaa !16
  %883 = zext i32 %882 to i64
  %884 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %883
  %885 = load i64, ptr %884, align 8, !tbaa !50
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %887, label %888

887:                                              ; preds = %878
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %888

888:                                              ; preds = %887, %878
  %889 = getelementptr inbounds i8, ptr %621, i64 %885
  %890 = getelementptr inbounds ptr, ptr %889, i64 2
  store ptr null, ptr %890, align 8, !tbaa !5
  %891 = load i32, ptr %621, align 8
  %892 = and i32 %891, 255
  %893 = add nsw i32 %892, -10
  %894 = icmp ult i32 %893, -9
  br i1 %894, label %899, label %895

895:                                              ; preds = %888
  %896 = getelementptr i8, ptr %621, i64 12
  %897 = load i32, ptr %896, align 4, !tbaa !16
  %898 = icmp ugt i32 %897, 3
  br i1 %898, label %902, label %899

899:                                              ; preds = %895, %888
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %900 = load i32, ptr %621, align 8
  %901 = and i32 %900, 255
  br label %902

902:                                              ; preds = %899, %895
  %903 = phi i32 [ %892, %895 ], [ %901, %899 ]
  %904 = zext i32 %903 to i64
  %905 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %904
  %906 = load i32, ptr %905, align 4, !tbaa !16
  %907 = zext i32 %906 to i64
  %908 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %907
  %909 = load i64, ptr %908, align 8, !tbaa !50
  %910 = icmp eq i64 %909, 0
  br i1 %910, label %911, label %912

911:                                              ; preds = %902
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %912

912:                                              ; preds = %911, %902
  %913 = getelementptr inbounds i8, ptr %621, i64 %909
  %914 = getelementptr inbounds ptr, ptr %913, i64 3
  store ptr null, ptr %914, align 8, !tbaa !5
  br label %1298

915:                                              ; preds = %506, %915
  %916 = phi ptr [ %918, %915 ], [ %487, %506 ]
  %917 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %916, i64 0, i32 1
  %918 = load ptr, ptr %917, align 8, !tbaa !67, !nonnull !66, !noundef !66
  %919 = load ptr, ptr %918, align 8, !tbaa !47
  %920 = load i32, ptr %919, align 8
  %921 = and i32 %920, 255
  %922 = icmp eq i32 %921, 2
  br i1 %922, label %915, label %923

923:                                              ; preds = %915, %506
  %924 = phi ptr [ %507, %506 ], [ %919, %915 ]
  %925 = getelementptr i8, ptr %924, i64 8
  %926 = load i32, ptr %925, align 8, !tbaa !16
  %927 = getelementptr i8, ptr %924, i64 12
  %928 = load i32, ptr %927, align 4, !tbaa !16
  %929 = icmp ugt i32 %928, 1
  br i1 %929, label %930, label %932

930:                                              ; preds = %923
  %931 = add i32 %928, -1
  br label %934

932:                                              ; preds = %923
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %933 = icmp eq i32 %928, 1
  br i1 %933, label %1298, label %934

934:                                              ; preds = %932, %930
  %935 = phi i32 [ %931, %930 ], [ -1, %932 ]
  %936 = zext i32 %935 to i64
  br label %937

937:                                              ; preds = %1018, %934
  %938 = phi i64 [ 0, %934 ], [ %1021, %1018 ]
  %939 = trunc i64 %938 to i32
  %940 = load i32, ptr %927, align 4, !tbaa !16
  %941 = add i32 %939, 1
  %942 = icmp ugt i32 %940, %941
  br i1 %942, label %944, label %943

943:                                              ; preds = %937
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %944

944:                                              ; preds = %943, %937
  %945 = load i32, ptr %924, align 8
  %946 = and i32 %945, 255
  %947 = add nsw i32 %946, -1
  %948 = icmp ult i32 %947, 9
  call void @llvm.assume(i1 %948)
  %949 = zext i32 %946 to i64
  %950 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %949
  %951 = load i32, ptr %950, align 4, !tbaa !16
  %952 = zext i32 %951 to i64
  %953 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %952
  %954 = load i64, ptr %953, align 8, !tbaa !50
  %955 = icmp eq i64 %954, 0
  br i1 %955, label %956, label %957

956:                                              ; preds = %944
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %957

957:                                              ; preds = %956, %944
  %958 = getelementptr inbounds i8, ptr %924, i64 %954
  %959 = zext i32 %941 to i64
  %960 = getelementptr inbounds ptr, ptr %958, i64 %959
  %961 = load ptr, ptr %960, align 8, !tbaa !5
  %962 = getelementptr inbounds %struct.tree_exp, ptr %961, i64 1, i32 0, i32 1
  %963 = load ptr, ptr %962, align 8, !tbaa !16
  %964 = load ptr, ptr @cfun, align 8, !tbaa !5
  %965 = getelementptr inbounds %struct.tree_label_decl, ptr %963, i64 0, i32 1
  %966 = load i32, ptr %965, align 8, !tbaa !16
  %967 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %968 = getelementptr inbounds %struct.diagnostic_context, ptr %967, i64 0, i32 1, i64 4
  %969 = load i32, ptr %968, align 8, !tbaa !20
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %971, label %977

971:                                              ; preds = %957
  %972 = getelementptr inbounds %struct.diagnostic_context, ptr %967, i64 0, i32 1, i64 5
  %973 = load i32, ptr %972, align 4, !tbaa !20
  %974 = icmp ne i32 %973, 0
  %975 = icmp slt i32 %966, 0
  %976 = select i1 %974, i1 %975, i1 false
  br i1 %976, label %979, label %1004

977:                                              ; preds = %957
  %978 = icmp slt i32 %966, 0
  br i1 %978, label %979, label %1004

979:                                              ; preds = %977, %971
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  %980 = getelementptr inbounds %struct.function, ptr %964, i64 0, i32 1
  %981 = load ptr, ptr %980, align 8, !tbaa !23
  %982 = getelementptr inbounds %struct.control_flow_graph, ptr %981, i64 0, i32 2
  %983 = load ptr, ptr %982, align 8, !tbaa !29
  %984 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %983, i64 0, i32 2, i64 2
  %985 = load ptr, ptr %984, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !91)
  %986 = getelementptr inbounds %struct.basic_block_def, ptr %985, i64 0, i32 13
  %987 = load i32, ptr %986, align 8, !tbaa !58, !noalias !91
  %988 = and i32 %987, 512
  %989 = icmp eq i32 %988, 0
  br i1 %989, label %990, label %999

990:                                              ; preds = %979
  %991 = getelementptr inbounds %struct.basic_block_def, ptr %985, i64 0, i32 7
  %992 = load ptr, ptr %991, align 8, !tbaa !16, !noalias !91
  %993 = icmp eq ptr %992, null
  br i1 %993, label %999, label %994

994:                                              ; preds = %990
  %995 = load ptr, ptr %992, align 8, !tbaa !59, !noalias !91
  %996 = icmp eq ptr %995, null
  br i1 %996, label %999, label %997

997:                                              ; preds = %994
  %998 = load ptr, ptr %995, align 8, !tbaa !42, !noalias !91
  br label %999

999:                                              ; preds = %997, %994, %990, %979
  %1000 = phi ptr [ %995, %997 ], [ null, %994 ], [ null, %990 ], [ null, %979 ]
  %1001 = phi ptr [ %998, %997 ], [ null, %994 ], [ null, %990 ], [ null, %979 ]
  store ptr %1001, ptr %4, align 8, !tbaa !44, !alias.scope !91
  store ptr %1000, ptr %459, align 8, !tbaa !46, !alias.scope !91
  store ptr %985, ptr %460, align 8, !tbaa !49, !alias.scope !91
  %1002 = call ptr @gimple_build_label(ptr noundef nonnull %963) #26
  call void @gsi_insert_before(ptr noundef nonnull %4, ptr noundef %1002, i32 noundef 0) #26
  %1003 = load i32, ptr %965, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  br label %1004

1004:                                             ; preds = %999, %977, %971
  %1005 = phi i32 [ %1003, %999 ], [ %966, %977 ], [ %966, %971 ]
  %1006 = getelementptr inbounds %struct.function, ptr %964, i64 0, i32 1
  %1007 = load ptr, ptr %1006, align 8, !tbaa !23
  %1008 = getelementptr inbounds %struct.control_flow_graph, ptr %1007, i64 0, i32 6
  %1009 = load ptr, ptr %1008, align 8, !tbaa !33
  %1010 = icmp eq ptr %1009, null
  br i1 %1010, label %1018, label %1011

1011:                                             ; preds = %1004
  %1012 = load i32, ptr %1009, align 8, !tbaa !30
  %1013 = icmp ugt i32 %1012, %1005
  br i1 %1013, label %1014, label %1018

1014:                                             ; preds = %1011
  %1015 = zext i32 %1005 to i64
  %1016 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %1009, i64 0, i32 2, i64 %1015
  %1017 = load ptr, ptr %1016, align 8, !tbaa !5
  br label %1018

1018:                                             ; preds = %1014, %1011, %1004
  %1019 = phi ptr [ %1017, %1014 ], [ null, %1011 ], [ null, %1004 ]
  %1020 = call ptr @make_edge(ptr noundef %471, ptr noundef %1019, i32 noundef 0) #26
  call fastcc void @assign_discriminator(i32 noundef %926, ptr noundef %1019)
  %1021 = add nuw nsw i64 %938, 1
  %1022 = icmp eq i64 %1021, %936
  br i1 %1022, label %1298, label %937, !llvm.loop !94

1023:                                             ; preds = %499
  call void @make_eh_edges(ptr noundef nonnull %491) #26
  br label %1298

1024:                                             ; preds = %499
  %1025 = call zeroext i8 @make_eh_dispatch_edges(ptr noundef nonnull %491) #26
  br label %1281

1026:                                             ; preds = %499
  %1027 = icmp eq i32 %493, 3
  br i1 %1027, label %1028, label %1043

1028:                                             ; preds = %1026
  %1029 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %1030 = zext i32 %1029 to i64
  %1031 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1030
  %1032 = load i64, ptr %1031, align 8, !tbaa !50
  %1033 = icmp eq i64 %1032, 0
  br i1 %1033, label %1034, label %1035

1034:                                             ; preds = %1028
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1035

1035:                                             ; preds = %1034, %1028
  %1036 = getelementptr inbounds i8, ptr %491, i64 %1032
  %1037 = load ptr, ptr %1036, align 8, !tbaa !5
  %1038 = load i64, ptr %1037, align 8
  %1039 = and i64 %1038, 65535
  %1040 = icmp eq i64 %1039, 30
  br i1 %1040, label %1041, label %1056

1041:                                             ; preds = %1035
  %1042 = load i32, ptr %491, align 8
  br label %1043

1043:                                             ; preds = %1041, %1026
  %1044 = phi i32 [ %1042, %1041 ], [ %492, %1026 ]
  %1045 = and i32 %1044, 255
  %1046 = icmp eq i32 %1045, 8
  br i1 %1046, label %1047, label %1057

1047:                                             ; preds = %1043
  %1048 = call zeroext i8 @gimple_has_side_effects(ptr noundef nonnull %491) #26
  %1049 = icmp eq i8 %1048, 0
  br i1 %1049, label %1057, label %1050

1050:                                             ; preds = %1047
  %1051 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1052 = getelementptr inbounds %struct.function, ptr %1051, i64 0, i32 20
  %1053 = load i32, ptr %1052, align 8
  %1054 = and i32 %1053, 1048576
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %1057, label %1056

1056:                                             ; preds = %1050, %1035
  call void @make_abnormal_goto_edges(ptr noundef %471, i8 noundef zeroext 1)
  br label %1057

1057:                                             ; preds = %1056, %1050, %1047, %1043
  call void @make_eh_edges(ptr noundef nonnull %491) #26
  %1058 = call i32 @gimple_call_flags(ptr noundef nonnull %491) #26
  %1059 = and i32 %1058, 8
  %1060 = icmp eq i32 %1059, 0
  %1061 = zext i1 %1060 to i8
  br label %1281

1062:                                             ; preds = %499
  %1063 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %491) #26
  %1064 = icmp eq i8 %1063, 0
  br i1 %1064, label %1289, label %1065

1065:                                             ; preds = %1062
  call void @make_eh_edges(ptr noundef nonnull %491) #26
  br label %1289

1066:                                             ; preds = %501, %1066
  %1067 = phi ptr [ %1069, %1066 ], [ %487, %501 ]
  %1068 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1067, i64 0, i32 1
  %1069 = load ptr, ptr %1068, align 8, !tbaa !67, !nonnull !66, !noundef !66
  %1070 = load ptr, ptr %1069, align 8, !tbaa !47
  %1071 = load i32, ptr %1070, align 8
  %1072 = and i32 %1071, 255
  %1073 = icmp eq i32 %1072, 2
  br i1 %1073, label %1066, label %1074

1074:                                             ; preds = %1066, %501
  %1075 = phi ptr [ %502, %501 ], [ %1070, %1066 ]
  %1076 = getelementptr i8, ptr %1075, i64 8
  %1077 = load i32, ptr %1076, align 8, !tbaa !16
  %1078 = getelementptr i8, ptr %1075, i64 75
  %1079 = load i8, ptr %1078, align 1, !tbaa !16
  %1080 = zext i8 %1079 to i32
  %1081 = icmp eq i8 %1079, 0
  br i1 %1081, label %1289, label %1082

1082:                                             ; preds = %1074
  %1083 = getelementptr inbounds %struct.gimple_statement_asm, ptr %1075, i64 0, i32 2
  %1084 = getelementptr inbounds %struct.gimple_statement_asm, ptr %1075, i64 0, i32 4
  br label %1085

1085:                                             ; preds = %1171, %1082
  %1086 = phi i32 [ 0, %1082 ], [ %1174, %1171 ]
  %1087 = load i8, ptr %1078, align 1, !tbaa !16
  %1088 = zext i8 %1087 to i32
  %1089 = icmp ugt i32 %1086, %1088
  br i1 %1089, label %1090, label %1091

1090:                                             ; preds = %1085
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 2710, ptr noundef nonnull @.str.2) #26
  br label %1091

1091:                                             ; preds = %1090, %1085
  %1092 = load i8, ptr %1083, align 8, !tbaa !16
  %1093 = zext i8 %1092 to i32
  %1094 = add nuw nsw i32 %1086, %1093
  %1095 = load i8, ptr %1084, align 2, !tbaa !16
  %1096 = zext i8 %1095 to i32
  %1097 = add nuw nsw i32 %1094, %1096
  %1098 = load i32, ptr %1075, align 8
  %1099 = and i32 %1098, 255
  %1100 = add nsw i32 %1099, -1
  %1101 = icmp ult i32 %1100, 9
  call void @llvm.assume(i1 %1101)
  %1102 = zext i32 %1099 to i64
  %1103 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1102
  %1104 = load i32, ptr %1103, align 4, !tbaa !16
  %1105 = zext i32 %1104 to i64
  %1106 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1105
  %1107 = load i64, ptr %1106, align 8, !tbaa !50
  %1108 = icmp eq i64 %1107, 0
  br i1 %1108, label %1109, label %1110

1109:                                             ; preds = %1091
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1110

1110:                                             ; preds = %1109, %1091
  %1111 = getelementptr inbounds i8, ptr %1075, i64 %1107
  %1112 = zext i32 %1097 to i64
  %1113 = getelementptr inbounds ptr, ptr %1111, i64 %1112
  %1114 = load ptr, ptr %1113, align 8, !tbaa !5
  %1115 = getelementptr inbounds %struct.tree_list, ptr %1114, i64 0, i32 2
  %1116 = load ptr, ptr %1115, align 8, !tbaa !16
  %1117 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1118 = getelementptr inbounds %struct.tree_label_decl, ptr %1116, i64 0, i32 1
  %1119 = load i32, ptr %1118, align 8, !tbaa !16
  %1120 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %1121 = getelementptr inbounds %struct.diagnostic_context, ptr %1120, i64 0, i32 1, i64 4
  %1122 = load i32, ptr %1121, align 8, !tbaa !20
  %1123 = icmp eq i32 %1122, 0
  br i1 %1123, label %1124, label %1130

1124:                                             ; preds = %1110
  %1125 = getelementptr inbounds %struct.diagnostic_context, ptr %1120, i64 0, i32 1, i64 5
  %1126 = load i32, ptr %1125, align 4, !tbaa !20
  %1127 = icmp ne i32 %1126, 0
  %1128 = icmp slt i32 %1119, 0
  %1129 = select i1 %1127, i1 %1128, i1 false
  br i1 %1129, label %1132, label %1157

1130:                                             ; preds = %1110
  %1131 = icmp slt i32 %1119, 0
  br i1 %1131, label %1132, label %1157

1132:                                             ; preds = %1130, %1124
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %1133 = getelementptr inbounds %struct.function, ptr %1117, i64 0, i32 1
  %1134 = load ptr, ptr %1133, align 8, !tbaa !23
  %1135 = getelementptr inbounds %struct.control_flow_graph, ptr %1134, i64 0, i32 2
  %1136 = load ptr, ptr %1135, align 8, !tbaa !29
  %1137 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %1136, i64 0, i32 2, i64 2
  %1138 = load ptr, ptr %1137, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !95)
  %1139 = getelementptr inbounds %struct.basic_block_def, ptr %1138, i64 0, i32 13
  %1140 = load i32, ptr %1139, align 8, !tbaa !58, !noalias !95
  %1141 = and i32 %1140, 512
  %1142 = icmp eq i32 %1141, 0
  br i1 %1142, label %1143, label %1152

1143:                                             ; preds = %1132
  %1144 = getelementptr inbounds %struct.basic_block_def, ptr %1138, i64 0, i32 7
  %1145 = load ptr, ptr %1144, align 8, !tbaa !16, !noalias !95
  %1146 = icmp eq ptr %1145, null
  br i1 %1146, label %1152, label %1147

1147:                                             ; preds = %1143
  %1148 = load ptr, ptr %1145, align 8, !tbaa !59, !noalias !95
  %1149 = icmp eq ptr %1148, null
  br i1 %1149, label %1152, label %1150

1150:                                             ; preds = %1147
  %1151 = load ptr, ptr %1148, align 8, !tbaa !42, !noalias !95
  br label %1152

1152:                                             ; preds = %1150, %1147, %1143, %1132
  %1153 = phi ptr [ %1148, %1150 ], [ null, %1147 ], [ null, %1143 ], [ null, %1132 ]
  %1154 = phi ptr [ %1151, %1150 ], [ null, %1147 ], [ null, %1143 ], [ null, %1132 ]
  store ptr %1154, ptr %3, align 8, !tbaa !44, !alias.scope !95
  store ptr %1153, ptr %457, align 8, !tbaa !46, !alias.scope !95
  store ptr %1138, ptr %458, align 8, !tbaa !49, !alias.scope !95
  %1155 = call ptr @gimple_build_label(ptr noundef nonnull %1116) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %1155, i32 noundef 0) #26
  %1156 = load i32, ptr %1118, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %1157

1157:                                             ; preds = %1152, %1130, %1124
  %1158 = phi i32 [ %1156, %1152 ], [ %1119, %1130 ], [ %1119, %1124 ]
  %1159 = getelementptr inbounds %struct.function, ptr %1117, i64 0, i32 1
  %1160 = load ptr, ptr %1159, align 8, !tbaa !23
  %1161 = getelementptr inbounds %struct.control_flow_graph, ptr %1160, i64 0, i32 6
  %1162 = load ptr, ptr %1161, align 8, !tbaa !33
  %1163 = icmp eq ptr %1162, null
  br i1 %1163, label %1171, label %1164

1164:                                             ; preds = %1157
  %1165 = load i32, ptr %1162, align 8, !tbaa !30
  %1166 = icmp ugt i32 %1165, %1158
  br i1 %1166, label %1167, label %1171

1167:                                             ; preds = %1164
  %1168 = zext i32 %1158 to i64
  %1169 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %1162, i64 0, i32 2, i64 %1168
  %1170 = load ptr, ptr %1169, align 8, !tbaa !5
  br label %1171

1171:                                             ; preds = %1167, %1164, %1157
  %1172 = phi ptr [ %1170, %1167 ], [ null, %1164 ], [ null, %1157 ]
  %1173 = call ptr @make_edge(ptr noundef %471, ptr noundef %1172, i32 noundef 0) #26
  call fastcc void @assign_discriminator(i32 noundef %1077, ptr noundef %1172)
  %1174 = add nuw nsw i32 %1086, 1
  %1175 = icmp eq i32 %1174, %1080
  br i1 %1175, label %1289, label %1085, !llvm.loop !98

1176:                                             ; preds = %499, %499, %499, %499, %499, %499, %499, %499
  %1177 = call ptr @new_omp_region(ptr noundef %471, i32 noundef %493, ptr noundef %472) #26
  br label %1289

1178:                                             ; preds = %499
  %1179 = call ptr @new_omp_region(ptr noundef %471, i32 noundef 30, ptr noundef %472) #26
  br label %1289

1180:                                             ; preds = %499
  %1181 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 4
  store ptr %471, ptr %1181, align 8, !tbaa !99
  %1182 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 7
  %1183 = load i32, ptr %1182, align 8, !tbaa !101
  %1184 = icmp ne i32 %1183, 29
  %1185 = zext i1 %1184 to i8
  %1186 = load ptr, ptr %472, align 8, !tbaa !102
  br label %1281

1187:                                             ; preds = %499
  %1188 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 5
  store ptr %471, ptr %1188, align 8, !tbaa !103
  %1189 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 7
  %1190 = load i32, ptr %1189, align 8, !tbaa !101
  switch i32 %1190, label %1276 [
    i32 23, label %1191
    i32 30, label %1235
  ]

1191:                                             ; preds = %1187
  %1192 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 3
  %1193 = load ptr, ptr %1192, align 8, !tbaa !104
  %1194 = getelementptr i8, ptr %1193, i64 8
  %1195 = load ptr, ptr %1194, align 8, !tbaa !105
  %1196 = icmp eq ptr %1195, null
  br i1 %1196, label %1206, label %1197

1197:                                             ; preds = %1191
  %1198 = load i32, ptr %1195, align 8, !tbaa !106
  %1199 = icmp eq i32 %1198, 1
  br i1 %1199, label %1200, label %1206

1200:                                             ; preds = %1197
  %1201 = getelementptr inbounds %struct.VEC_edge_base, ptr %1195, i64 0, i32 2, i64 0
  %1202 = load ptr, ptr %1201, align 8, !tbaa !5
  %1203 = getelementptr inbounds %struct.edge_def, ptr %1202, i64 0, i32 7
  %1204 = load i32, ptr %1203, align 8, !tbaa !108
  %1205 = or i32 %1204, 2
  store i32 %1205, ptr %1203, align 8, !tbaa !108
  br label %1222

1206:                                             ; preds = %1197, %1191
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %1207 = load ptr, ptr %1194, align 8, !tbaa !105
  %1208 = load ptr, ptr %1192, align 8, !tbaa !104
  %1209 = getelementptr i8, ptr %1208, i64 8
  %1210 = load ptr, ptr %1209, align 8, !tbaa !105
  %1211 = getelementptr inbounds %struct.VEC_edge_base, ptr %1207, i64 0, i32 2, i64 0
  %1212 = load ptr, ptr %1211, align 8, !tbaa !5
  %1213 = getelementptr inbounds %struct.edge_def, ptr %1212, i64 0, i32 7
  %1214 = load i32, ptr %1213, align 8, !tbaa !108
  %1215 = or i32 %1214, 2
  store i32 %1215, ptr %1213, align 8, !tbaa !108
  %1216 = icmp eq ptr %1210, null
  br i1 %1216, label %1220, label %1217

1217:                                             ; preds = %1206
  %1218 = load i32, ptr %1210, align 8, !tbaa !106
  %1219 = icmp eq i32 %1218, 1
  br i1 %1219, label %1222, label %1220

1220:                                             ; preds = %1217, %1206
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %1221 = load ptr, ptr %1209, align 8, !tbaa !105
  br label %1222

1222:                                             ; preds = %1220, %1217, %1200
  %1223 = phi ptr [ %1210, %1217 ], [ %1221, %1220 ], [ %1195, %1200 ]
  %1224 = getelementptr inbounds %struct.VEC_edge_base, ptr %1223, i64 0, i32 2, i64 0
  %1225 = load ptr, ptr %1224, align 8, !tbaa !5
  %1226 = getelementptr inbounds %struct.edge_def, ptr %1225, i64 0, i32 1
  %1227 = load ptr, ptr %1226, align 8, !tbaa !109
  %1228 = call ptr @make_edge(ptr noundef %471, ptr noundef %1227, i32 noundef 2) #26
  %1229 = load ptr, ptr %1192, align 8, !tbaa !104
  %1230 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 6
  %1231 = load ptr, ptr %1230, align 8, !tbaa !36
  %1232 = call ptr @make_edge(ptr noundef %1229, ptr noundef %1231, i32 noundef 2) #26
  %1233 = load ptr, ptr %1230, align 8, !tbaa !36
  %1234 = call ptr @make_edge(ptr noundef %471, ptr noundef %1233, i32 noundef 3) #26
  br label %1298

1235:                                             ; preds = %1187
  %1236 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 3
  %1237 = load ptr, ptr %1236, align 8, !tbaa !104
  %1238 = getelementptr i8, ptr %1237, i64 8
  %1239 = load ptr, ptr %1238, align 8, !tbaa !105
  %1240 = icmp eq ptr %1239, null
  br i1 %1240, label %1244, label %1241

1241:                                             ; preds = %1235
  %1242 = load i32, ptr %1239, align 8, !tbaa !106
  %1243 = icmp eq i32 %1242, 1
  br i1 %1243, label %1246, label %1244

1244:                                             ; preds = %1241, %1235
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %1245 = load ptr, ptr %1238, align 8, !tbaa !105
  br label %1246

1246:                                             ; preds = %1244, %1241
  %1247 = phi ptr [ %1239, %1241 ], [ %1245, %1244 ]
  %1248 = getelementptr inbounds %struct.VEC_edge_base, ptr %1247, i64 0, i32 2, i64 0
  %1249 = load ptr, ptr %1248, align 8, !tbaa !5
  %1250 = getelementptr inbounds %struct.edge_def, ptr %1249, i64 0, i32 1
  %1251 = load ptr, ptr %1250, align 8, !tbaa !109
  %1252 = getelementptr inbounds %struct.omp_region, ptr %472, i64 0, i32 1
  %1253 = load ptr, ptr %1252, align 8, !tbaa !5
  %1254 = icmp eq ptr %1253, null
  br i1 %1254, label %1271, label %1255

1255:                                             ; preds = %1246, %1261
  %1256 = phi ptr [ %1269, %1261 ], [ %1253, %1246 ]
  %1257 = getelementptr inbounds %struct.omp_region, ptr %1256, i64 0, i32 7
  %1258 = load i32, ptr %1257, align 8, !tbaa !101
  %1259 = icmp eq i32 %1258, 29
  br i1 %1259, label %1261, label %1260

1260:                                             ; preds = %1255
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  br label %1261

1261:                                             ; preds = %1260, %1255
  %1262 = getelementptr inbounds %struct.omp_region, ptr %1256, i64 0, i32 3
  %1263 = load ptr, ptr %1262, align 8, !tbaa !104
  %1264 = call ptr @make_edge(ptr noundef %1251, ptr noundef %1263, i32 noundef 0) #26
  %1265 = getelementptr inbounds %struct.omp_region, ptr %1256, i64 0, i32 4
  %1266 = load ptr, ptr %1265, align 8, !tbaa !99
  %1267 = call ptr @make_edge(ptr noundef %1266, ptr noundef %471, i32 noundef 1) #26
  %1268 = getelementptr inbounds %struct.omp_region, ptr %1256, i64 0, i32 2
  %1269 = load ptr, ptr %1268, align 8, !tbaa !5
  %1270 = icmp eq ptr %1269, null
  br i1 %1270, label %1271, label %1255, !llvm.loop !110

1271:                                             ; preds = %1261, %1246
  %1272 = call ptr @make_edge(ptr noundef %471, ptr noundef %1251, i32 noundef 0) #26
  %1273 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 6
  %1274 = load ptr, ptr %1273, align 8, !tbaa !36
  %1275 = call ptr @make_edge(ptr noundef %1251, ptr noundef %1274, i32 noundef 0) #26
  br label %1298

1276:                                             ; preds = %1187
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 661, ptr noundef nonnull @.str.2) #26
  br label %1281

1277:                                             ; preds = %499
  %1278 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %491) #26
  %1279 = icmp eq i8 %1278, 0
  br i1 %1279, label %1289, label %1280

1280:                                             ; preds = %1277
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 666, ptr noundef nonnull @.str.2) #26
  br label %1289

1281:                                             ; preds = %1276, %1180, %1057, %1024
  %1282 = phi i8 [ %473, %1276 ], [ %1185, %1180 ], [ %1061, %1057 ], [ %1025, %1024 ]
  %1283 = phi ptr [ %472, %1276 ], [ %1186, %1180 ], [ %472, %1057 ], [ %472, %1024 ]
  %1284 = icmp eq i8 %1282, 0
  br i1 %1284, label %1298, label %1289

1285:                                             ; preds = %495, %485, %482, %478, %469
  %1286 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 6
  %1287 = load ptr, ptr %1286, align 8, !tbaa !36
  %1288 = call ptr @make_edge(ptr noundef %471, ptr noundef %1287, i32 noundef 1) #26
  br label %1298

1289:                                             ; preds = %1171, %1281, %1280, %1277, %1178, %1176, %1074, %1065, %1062, %499, %499
  %1290 = phi i8 [ %1282, %1281 ], [ 1, %1280 ], [ 1, %1277 ], [ 1, %1178 ], [ 1, %1176 ], [ 1, %1074 ], [ 1, %1065 ], [ 1, %1062 ], [ 1, %499 ], [ 1, %499 ], [ 1, %1171 ]
  %1291 = phi ptr [ %1283, %1281 ], [ %472, %1280 ], [ %472, %1277 ], [ %1179, %1178 ], [ %1177, %1176 ], [ %472, %1074 ], [ %472, %1065 ], [ %472, %1062 ], [ %472, %499 ], [ %472, %499 ], [ %472, %1171 ]
  %1292 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 6
  %1293 = load ptr, ptr %1292, align 8, !tbaa !36
  %1294 = call ptr @make_edge(ptr noundef %471, ptr noundef %1293, i32 noundef 1) #26
  %1295 = getelementptr i8, ptr %491, i64 8
  %1296 = load i32, ptr %1295, align 8, !tbaa !16
  %1297 = load ptr, ptr %1292, align 8, !tbaa !36
  call fastcc void @assign_discriminator(i32 noundef %1296, ptr noundef %1297)
  br label %1298

1298:                                             ; preds = %1018, %1289, %1285, %1281, %1271, %1222, %1023, %932, %912, %617, %616, %499
  %1299 = phi ptr [ %472, %1285 ], [ %1291, %1289 ], [ %1283, %1281 ], [ %472, %1271 ], [ %472, %1222 ], [ %472, %1023 ], [ %472, %912 ], [ %472, %617 ], [ %472, %616 ], [ %472, %499 ], [ %472, %932 ], [ %472, %1018 ]
  %1300 = phi i8 [ 1, %1285 ], [ %1290, %1289 ], [ 0, %1281 ], [ 0, %1271 ], [ 0, %1222 ], [ 0, %1023 ], [ 0, %912 ], [ 0, %617 ], [ 0, %616 ], [ 0, %499 ], [ 0, %932 ], [ 0, %1018 ]
  %1301 = getelementptr inbounds %struct.basic_block_def, ptr %471, i64 0, i32 6
  %1302 = load ptr, ptr %1301, align 8, !tbaa !36
  %1303 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1304 = getelementptr inbounds %struct.function, ptr %1303, i64 0, i32 1
  %1305 = load ptr, ptr %1304, align 8, !tbaa !23
  %1306 = getelementptr inbounds %struct.control_flow_graph, ptr %1305, i64 0, i32 1
  %1307 = load ptr, ptr %1306, align 8, !tbaa !35
  %1308 = icmp eq ptr %1302, %1307
  br i1 %1308, label %1309, label %469, !llvm.loop !111

1309:                                             ; preds = %1298, %436
  %1310 = load ptr, ptr @root_omp_region, align 8, !tbaa !5
  %1311 = icmp eq ptr %1310, null
  br i1 %1311, label %1313, label %1312

1312:                                             ; preds = %1309
  call void @free_omp_regions() #26
  br label %1313

1313:                                             ; preds = %1312, %1309
  call void @fold_cond_expr_cond()
  call void @cleanup_dead_labels()
  %1314 = load ptr, ptr @discriminator_per_locus, align 8, !tbaa !5
  call void @htab_delete(ptr noundef %1314) #26
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #26
  %1315 = call ptr @dump_begin(i32 noundef 7, ptr noundef nonnull %12) #26
  %1316 = icmp eq ptr %1315, null
  br i1 %1316, label %1523, label %1317

1317:                                             ; preds = %1313
  %1318 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 22), align 8, !tbaa !112
  %1319 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %1320 = call ptr %1318(ptr noundef %1319, i32 noundef 2) #26
  %1321 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1315, ptr noundef nonnull @.str.50, ptr noundef %1320)
  %1322 = call i64 @fwrite(ptr nonnull @.str.51, i64 40, i64 1, ptr nonnull %1315)
  %1323 = call i64 @fwrite(ptr nonnull @.str.52, i64 38, i64 1, ptr nonnull %1315)
  %1324 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1325 = getelementptr inbounds %struct.function, ptr %1324, i64 0, i32 1
  %1326 = load ptr, ptr %1325, align 8, !tbaa !23
  %1327 = load ptr, ptr %1326, align 8, !tbaa !34
  %1328 = getelementptr inbounds %struct.basic_block_def, ptr %1327, i64 0, i32 1
  br label %1329

1329:                                             ; preds = %1360, %1317
  %1330 = phi i32 [ 0, %1317 ], [ %1361, %1360 ]
  %1331 = load ptr, ptr %1328, align 8, !tbaa !5
  %1332 = icmp eq ptr %1331, null
  br i1 %1332, label %1335, label %1333

1333:                                             ; preds = %1329
  %1334 = load i32, ptr %1331, align 8, !tbaa !106
  br label %1335

1335:                                             ; preds = %1333, %1329
  %1336 = phi i32 [ %1334, %1333 ], [ 0, %1329 ]
  %1337 = icmp eq i32 %1336, %1330
  br i1 %1337, label %1362, label %1338

1338:                                             ; preds = %1335
  %1339 = zext i32 %1330 to i64
  %1340 = getelementptr inbounds %struct.VEC_edge_base, ptr %1331, i64 0, i32 2, i64 %1339
  %1341 = load ptr, ptr %1340, align 8, !tbaa !5
  %1342 = getelementptr inbounds %struct.edge_def, ptr %1341, i64 0, i32 1
  %1343 = load ptr, ptr %1342, align 8, !tbaa !109
  %1344 = getelementptr inbounds %struct.basic_block_def, ptr %1343, i64 0, i32 9
  %1345 = load i32, ptr %1344, align 8, !tbaa !120
  %1346 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1315, ptr noundef nonnull @.str.53, i32 noundef %1345)
  %1347 = getelementptr inbounds %struct.edge_def, ptr %1341, i64 0, i32 7
  %1348 = load i32, ptr %1347, align 8, !tbaa !108
  %1349 = and i32 %1348, 16
  %1350 = icmp eq i32 %1349, 0
  %1351 = select i1 %1350, ptr @.str.55, ptr @.str.54
  %1352 = call i64 @fwrite(ptr nonnull %1351, i64 31, i64 1, ptr nonnull %1315)
  %1353 = call i64 @fwrite(ptr nonnull @.str.56, i64 3, i64 1, ptr nonnull %1315)
  %1354 = load ptr, ptr %1328, align 8, !tbaa !5
  %1355 = icmp eq ptr %1354, null
  br i1 %1355, label %1359, label %1356

1356:                                             ; preds = %1338
  %1357 = load i32, ptr %1354, align 8, !tbaa !106
  %1358 = icmp ult i32 %1330, %1357
  br i1 %1358, label %1360, label %1359

1359:                                             ; preds = %1356, %1338
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %1360

1360:                                             ; preds = %1359, %1356
  %1361 = add i32 %1330, 1
  br label %1329, !llvm.loop !121

1362:                                             ; preds = %1335
  %1363 = call i32 @fputc(i32 noundef 10, ptr noundef nonnull %1315)
  %1364 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1365 = getelementptr inbounds %struct.function, ptr %1364, i64 0, i32 1
  %1366 = load ptr, ptr %1365, align 8, !tbaa !23
  %1367 = load ptr, ptr %1366, align 8, !tbaa !34
  %1368 = getelementptr inbounds %struct.basic_block_def, ptr %1367, i64 0, i32 6
  %1369 = load ptr, ptr %1368, align 8, !tbaa !36
  %1370 = getelementptr inbounds %struct.control_flow_graph, ptr %1366, i64 0, i32 1
  %1371 = load ptr, ptr %1370, align 8, !tbaa !35
  %1372 = icmp eq ptr %1369, %1371
  br i1 %1372, label %1521, label %1373

1373:                                             ; preds = %1362
  %1374 = getelementptr inbounds %struct.expanded_location, ptr %2, i64 0, i32 1
  %1375 = getelementptr inbounds %struct.expanded_location, ptr %1, i64 0, i32 1
  br label %1376

1376:                                             ; preds = %1512, %1373
  %1377 = phi ptr [ %1369, %1373 ], [ %1514, %1512 ]
  %1378 = getelementptr inbounds %struct.basic_block_def, ptr %1377, i64 0, i32 13
  %1379 = load i32, ptr %1378, align 8, !tbaa !58, !noalias !66
  %1380 = and i32 %1379, 512
  %1381 = icmp eq i32 %1380, 0
  br i1 %1381, label %1382, label %1450

1382:                                             ; preds = %1376
  %1383 = getelementptr inbounds %struct.basic_block_def, ptr %1377, i64 0, i32 7
  %1384 = load ptr, ptr %1383, align 8, !tbaa !16, !noalias !66
  %1385 = icmp eq ptr %1384, null
  br i1 %1385, label %1450, label %1386

1386:                                             ; preds = %1382
  %1387 = load ptr, ptr %1384, align 8, !tbaa !59, !noalias !66
  %1388 = icmp eq ptr %1387, null
  br i1 %1388, label %1450, label %1389

1389:                                             ; preds = %1386
  %1390 = load ptr, ptr %1387, align 8, !tbaa !42, !noalias !122
  %1391 = icmp eq ptr %1390, null
  br i1 %1391, label %1402, label %1392

1392:                                             ; preds = %1389, %1398
  %1393 = phi ptr [ %1400, %1398 ], [ %1390, %1389 ]
  %1394 = load ptr, ptr %1393, align 8, !tbaa !47
  %1395 = load i32, ptr %1394, align 8
  %1396 = and i32 %1395, 255
  %1397 = icmp eq i32 %1396, 2
  br i1 %1397, label %1398, label %1402

1398:                                             ; preds = %1392
  %1399 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1393, i64 0, i32 2
  %1400 = load ptr, ptr %1399, align 8, !tbaa !53
  %1401 = icmp eq ptr %1400, null
  br i1 %1401, label %1402, label %1392, !llvm.loop !87

1402:                                             ; preds = %1398, %1392, %1389
  %1403 = phi ptr [ null, %1389 ], [ null, %1398 ], [ %1394, %1392 ]
  %1404 = getelementptr inbounds %struct.gimple_seq_d, ptr %1387, i64 0, i32 1
  %1405 = load ptr, ptr %1404, align 8, !tbaa !61, !noalias !125
  %1406 = icmp eq ptr %1405, null
  br i1 %1406, label %1417, label %1407

1407:                                             ; preds = %1402, %1413
  %1408 = phi ptr [ %1415, %1413 ], [ %1405, %1402 ]
  %1409 = load ptr, ptr %1408, align 8, !tbaa !47
  %1410 = load i32, ptr %1409, align 8
  %1411 = and i32 %1410, 255
  %1412 = icmp eq i32 %1411, 2
  br i1 %1412, label %1413, label %1417

1413:                                             ; preds = %1407
  %1414 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %1408, i64 0, i32 1
  %1415 = load ptr, ptr %1414, align 8, !tbaa !67
  %1416 = icmp eq ptr %1415, null
  br i1 %1416, label %1417, label %1407, !llvm.loop !68

1417:                                             ; preds = %1413, %1407, %1402
  %1418 = phi ptr [ null, %1402 ], [ null, %1413 ], [ %1409, %1407 ]
  %1419 = icmp eq ptr %1403, null
  br i1 %1419, label %1433, label %1420

1420:                                             ; preds = %1417
  %1421 = load i32, ptr %1403, align 8
  %1422 = and i32 %1421, 255
  %1423 = zext i32 %1422 to i64
  %1424 = getelementptr inbounds [0 x ptr], ptr @gimple_code_name, i64 0, i64 %1423
  %1425 = load ptr, ptr %1424, align 8, !tbaa !5
  %1426 = getelementptr i8, ptr %1403, i64 8
  %1427 = load i32, ptr %1426, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2)
  %1428 = icmp eq i32 %1427, 0
  br i1 %1428, label %1431, label %1429

1429:                                             ; preds = %1420
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %2, i32 noundef %1427) #26
  %1430 = load i32, ptr %1374, align 8, !tbaa !128
  br label %1431

1431:                                             ; preds = %1429, %1420
  %1432 = phi i32 [ %1430, %1429 ], [ -1, %1420 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2)
  br label %1433

1433:                                             ; preds = %1431, %1417
  %1434 = phi i32 [ %1432, %1431 ], [ 0, %1417 ]
  %1435 = phi ptr [ %1425, %1431 ], [ @.str.57, %1417 ]
  %1436 = icmp eq ptr %1418, null
  br i1 %1436, label %1450, label %1437

1437:                                             ; preds = %1433
  %1438 = load i32, ptr %1418, align 8
  %1439 = and i32 %1438, 255
  %1440 = zext i32 %1439 to i64
  %1441 = getelementptr inbounds [0 x ptr], ptr @gimple_code_name, i64 0, i64 %1440
  %1442 = load ptr, ptr %1441, align 8, !tbaa !5
  %1443 = getelementptr i8, ptr %1418, i64 8
  %1444 = load i32, ptr %1443, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %1)
  %1445 = icmp eq i32 %1444, 0
  br i1 %1445, label %1448, label %1446

1446:                                             ; preds = %1437
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %1, i32 noundef %1444) #26
  %1447 = load i32, ptr %1375, align 8, !tbaa !128
  br label %1448

1448:                                             ; preds = %1446, %1437
  %1449 = phi i32 [ %1447, %1446 ], [ -1, %1437 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %1)
  br label %1450

1450:                                             ; preds = %1448, %1433, %1386, %1382, %1376
  %1451 = phi ptr [ %1435, %1448 ], [ %1435, %1433 ], [ @.str.57, %1376 ], [ @.str.57, %1382 ], [ @.str.57, %1386 ]
  %1452 = phi i32 [ %1434, %1448 ], [ %1434, %1433 ], [ 0, %1376 ], [ 0, %1382 ], [ 0, %1386 ]
  %1453 = phi i32 [ %1449, %1448 ], [ 0, %1433 ], [ 0, %1376 ], [ 0, %1382 ], [ 0, %1386 ]
  %1454 = phi ptr [ %1442, %1448 ], [ @.str.57, %1433 ], [ @.str.57, %1376 ], [ @.str.57, %1382 ], [ @.str.57, %1386 ]
  %1455 = getelementptr inbounds %struct.basic_block_def, ptr %1377, i64 0, i32 9
  %1456 = load i32, ptr %1455, align 8, !tbaa !120
  %1457 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1315, ptr noundef nonnull @.str.58, i32 noundef %1456, i32 noundef %1456, ptr noundef %1451, i32 noundef %1452, ptr noundef %1454, i32 noundef %1453)
  %1458 = getelementptr inbounds %struct.basic_block_def, ptr %1377, i64 0, i32 1
  br label %1459

1459:                                             ; preds = %1501, %1450
  %1460 = phi i32 [ 0, %1450 ], [ %1502, %1501 ]
  %1461 = load ptr, ptr %1458, align 8, !tbaa !5
  %1462 = icmp eq ptr %1461, null
  br i1 %1462, label %1465, label %1463

1463:                                             ; preds = %1459
  %1464 = load i32, ptr %1461, align 8, !tbaa !106
  br label %1465

1465:                                             ; preds = %1463, %1459
  %1466 = phi i32 [ %1464, %1463 ], [ 0, %1459 ]
  %1467 = icmp eq i32 %1466, %1460
  br i1 %1467, label %1503, label %1468

1468:                                             ; preds = %1465
  %1469 = zext i32 %1460 to i64
  %1470 = getelementptr inbounds %struct.VEC_edge_base, ptr %1461, i64 0, i32 2, i64 %1469
  %1471 = load ptr, ptr %1470, align 8, !tbaa !5
  %1472 = getelementptr inbounds %struct.edge_def, ptr %1471, i64 0, i32 1
  %1473 = load ptr, ptr %1472, align 8, !tbaa !109
  %1474 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1475 = getelementptr inbounds %struct.function, ptr %1474, i64 0, i32 1
  %1476 = load ptr, ptr %1475, align 8, !tbaa !23
  %1477 = getelementptr inbounds %struct.control_flow_graph, ptr %1476, i64 0, i32 1
  %1478 = load ptr, ptr %1477, align 8, !tbaa !35
  %1479 = icmp eq ptr %1473, %1478
  %1480 = load i32, ptr %1455, align 8, !tbaa !120
  br i1 %1479, label %1481, label %1483

1481:                                             ; preds = %1468
  %1482 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1315, ptr noundef nonnull @.str.59, i32 noundef %1480)
  br label %1487

1483:                                             ; preds = %1468
  %1484 = getelementptr inbounds %struct.basic_block_def, ptr %1473, i64 0, i32 9
  %1485 = load i32, ptr %1484, align 8, !tbaa !120
  %1486 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1315, ptr noundef nonnull @.str.60, i32 noundef %1480, i32 noundef %1485)
  br label %1487

1487:                                             ; preds = %1483, %1481
  %1488 = getelementptr inbounds %struct.edge_def, ptr %1471, i64 0, i32 7
  %1489 = load i32, ptr %1488, align 8, !tbaa !108
  %1490 = and i32 %1489, 16
  %1491 = icmp eq i32 %1490, 0
  %1492 = select i1 %1491, ptr @.str.62, ptr @.str.61
  %1493 = call i64 @fwrite(ptr nonnull %1492, i64 31, i64 1, ptr nonnull %1315)
  %1494 = call i64 @fwrite(ptr nonnull @.str.56, i64 3, i64 1, ptr nonnull %1315)
  %1495 = load ptr, ptr %1458, align 8, !tbaa !5
  %1496 = icmp eq ptr %1495, null
  br i1 %1496, label %1500, label %1497

1497:                                             ; preds = %1487
  %1498 = load i32, ptr %1495, align 8, !tbaa !106
  %1499 = icmp ult i32 %1460, %1498
  br i1 %1499, label %1501, label %1500

1500:                                             ; preds = %1497, %1487
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %1501

1501:                                             ; preds = %1500, %1497
  %1502 = add i32 %1460, 1
  br label %1459, !llvm.loop !130

1503:                                             ; preds = %1465
  %1504 = getelementptr inbounds %struct.basic_block_def, ptr %1377, i64 0, i32 6
  %1505 = load ptr, ptr %1504, align 8, !tbaa !36
  %1506 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1507 = getelementptr inbounds %struct.function, ptr %1506, i64 0, i32 1
  %1508 = load ptr, ptr %1507, align 8, !tbaa !23
  %1509 = getelementptr inbounds %struct.control_flow_graph, ptr %1508, i64 0, i32 1
  %1510 = load ptr, ptr %1509, align 8, !tbaa !35
  %1511 = icmp eq ptr %1505, %1510
  br i1 %1511, label %1521, label %1512

1512:                                             ; preds = %1503
  %1513 = call i32 @fputc(i32 noundef 10, ptr noundef nonnull %1315)
  %1514 = load ptr, ptr %1504, align 8, !tbaa !36
  %1515 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1516 = getelementptr inbounds %struct.function, ptr %1515, i64 0, i32 1
  %1517 = load ptr, ptr %1516, align 8, !tbaa !23
  %1518 = getelementptr inbounds %struct.control_flow_graph, ptr %1517, i64 0, i32 1
  %1519 = load ptr, ptr %1518, align 8, !tbaa !35
  %1520 = icmp eq ptr %1514, %1519
  br i1 %1520, label %1521, label %1376, !llvm.loop !131

1521:                                             ; preds = %1512, %1503, %1362
  %1522 = call i64 @fwrite(ptr nonnull @.str.63, i64 3, i64 1, ptr nonnull %1315)
  call void @dump_end(i32 noundef 7, ptr noundef nonnull %1315) #26
  br label %1523

1523:                                             ; preds = %1313, %1521
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #26
  %1524 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  call void @gimple_set_body(ptr noundef %1524, ptr noundef null) #26
  %1525 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1526 = icmp eq ptr %1525, null
  br i1 %1526, label %1535, label %1527

1527:                                             ; preds = %1523
  %1528 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %1529 = and i32 %1528, 8
  %1530 = icmp eq i32 %1529, 0
  br i1 %1530, label %1535, label %1531

1531:                                             ; preds = %1527
  %1532 = call i64 @fwrite(ptr nonnull @.str.48, i64 14, i64 1, ptr nonnull %1525)
  %1533 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %1534 = load i32, ptr @dump_flags, align 4, !tbaa !20
  call void @dump_scope_blocks(ptr noundef %1533, i32 noundef %1534) #26
  br label %1535

1535:                                             ; preds = %1531, %1527, %1523
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @fold_cond_expr_cond() local_unnamed_addr #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !23
  %4 = load ptr, ptr %3, align 8, !tbaa !34
  %5 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !36
  %7 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !35
  %9 = icmp eq ptr %6, %8
  br i1 %9, label %211, label %10

10:                                               ; preds = %0, %202
  %11 = phi ptr [ %204, %202 ], [ %6, %0 ]
  %12 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 13
  %13 = load i32, ptr %12, align 8, !tbaa !58, !noalias !132
  %14 = and i32 %13, 512
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %202

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !16, !noalias !132
  %19 = icmp eq ptr %18, null
  br i1 %19, label %202, label %20

20:                                               ; preds = %16
  %21 = load ptr, ptr %18, align 8, !tbaa !59, !noalias !132
  %22 = icmp eq ptr %21, null
  br i1 %22, label %202, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.gimple_seq_d, ptr %21, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !61, !noalias !132
  %26 = icmp eq ptr %25, null
  br i1 %26, label %202, label %27

27:                                               ; preds = %23, %32
  %28 = phi ptr [ %34, %32 ], [ %25, %23 ]
  %29 = load ptr, ptr %28, align 8, !tbaa !47
  %30 = load i32, ptr %29, align 8
  %31 = trunc i32 %30 to i8
  switch i8 %31, label %202 [
    i8 2, label %32
    i8 1, label %36
  ]

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %28, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !67
  %35 = icmp eq ptr %34, null
  br i1 %35, label %202, label %27, !llvm.loop !68

36:                                               ; preds = %27
  %37 = getelementptr i8, ptr %29, i64 8
  %38 = load i32, ptr %37, align 8, !tbaa !16
  tail call void @fold_defer_overflow_warnings() #26
  %39 = load i32, ptr %29, align 8
  %40 = lshr i32 %39, 16
  %41 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !5
  %42 = and i32 %39, 255
  %43 = add nsw i32 %42, -10
  %44 = icmp ult i32 %43, -9
  br i1 %44, label %62, label %45

45:                                               ; preds = %36
  %46 = zext i32 %42 to i64
  %47 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %46
  %48 = load i32, ptr %47, align 4, !tbaa !16
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %49
  %51 = load i64, ptr %50, align 8, !tbaa !50
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %57

53:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %54 = load i32, ptr %29, align 8
  %55 = and i32 %54, 255
  %56 = add nsw i32 %55, -10
  br label %57

57:                                               ; preds = %53, %45
  %58 = phi i32 [ %56, %53 ], [ %43, %45 ]
  %59 = phi i32 [ %55, %53 ], [ %42, %45 ]
  %60 = getelementptr inbounds i8, ptr %29, i64 %51
  %61 = load ptr, ptr %60, align 8, !tbaa !5
  br label %62

62:                                               ; preds = %36, %57
  %63 = phi i32 [ %43, %36 ], [ %58, %57 ]
  %64 = phi i32 [ %42, %36 ], [ %59, %57 ]
  %65 = phi ptr [ null, %36 ], [ %61, %57 ]
  %66 = icmp ult i32 %63, -9
  br i1 %66, label %80, label %67

67:                                               ; preds = %62
  %68 = zext i32 %64 to i64
  %69 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !16
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %71
  %73 = load i64, ptr %72, align 8, !tbaa !50
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %67
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %76

76:                                               ; preds = %75, %67
  %77 = getelementptr inbounds i8, ptr %29, i64 %73
  %78 = getelementptr inbounds ptr, ptr %77, i64 1
  %79 = load ptr, ptr %78, align 8, !tbaa !5
  br label %80

80:                                               ; preds = %62, %76
  %81 = phi ptr [ %79, %76 ], [ null, %62 ]
  %82 = tail call ptr @fold_binary_loc(i32 noundef %38, i32 noundef %40, ptr noundef %41, ptr noundef %65, ptr noundef %81) #26
  %83 = icmp eq ptr %82, null
  br i1 %83, label %89, label %84

84:                                               ; preds = %80
  %85 = tail call i32 @integer_zerop(ptr noundef nonnull %82) #26
  %86 = trunc i32 %85 to i8
  %87 = tail call i32 @integer_onep(ptr noundef nonnull %82) #26
  %88 = trunc i32 %87 to i8
  br label %89

89:                                               ; preds = %80, %84
  %90 = phi i8 [ %86, %84 ], [ 0, %80 ]
  %91 = phi i8 [ %88, %84 ], [ 0, %80 ]
  %92 = icmp ne i8 %90, 0
  %93 = icmp ne i8 %91, 0
  %94 = select i1 %92, i1 true, i1 %93
  %95 = zext i1 %94 to i8
  tail call void @fold_undefer_overflow_warnings(i8 noundef zeroext %95, ptr noundef nonnull %29, i32 noundef 2) #26
  %96 = icmp eq i8 %90, 0
  br i1 %96, label %143, label %97

97:                                               ; preds = %89
  %98 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %99 = load i32, ptr %29, align 8
  %100 = and i32 %99, 255
  %101 = add nsw i32 %100, -10
  %102 = icmp ult i32 %101, -9
  br i1 %102, label %107, label %103

103:                                              ; preds = %97
  %104 = getelementptr i8, ptr %29, i64 12
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %103, %97
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %108 = load i32, ptr %29, align 8
  %109 = and i32 %108, 255
  br label %110

110:                                              ; preds = %107, %103
  %111 = phi i32 [ %100, %103 ], [ %109, %107 ]
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %112
  %114 = load i32, ptr %113, align 4, !tbaa !16
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %115
  %117 = load i64, ptr %116, align 8, !tbaa !50
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %110
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %120

120:                                              ; preds = %119, %110
  %121 = getelementptr inbounds i8, ptr %29, i64 %117
  store ptr %98, ptr %121, align 8, !tbaa !5
  %122 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  %123 = load i32, ptr %29, align 8
  %124 = and i32 %123, 255
  %125 = add nsw i32 %124, -10
  %126 = icmp ult i32 %125, -9
  br i1 %126, label %131, label %127

127:                                              ; preds = %120
  %128 = getelementptr i8, ptr %29, i64 12
  %129 = load i32, ptr %128, align 4, !tbaa !16
  %130 = icmp ugt i32 %129, 1
  br i1 %130, label %134, label %131

131:                                              ; preds = %127, %120
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %132 = load i32, ptr %29, align 8
  %133 = and i32 %132, 255
  br label %134

134:                                              ; preds = %131, %127
  %135 = phi i32 [ %124, %127 ], [ %133, %131 ]
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %136
  %138 = load i32, ptr %137, align 4, !tbaa !16
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %139
  %141 = load i64, ptr %140, align 8, !tbaa !50
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %191, label %194

143:                                              ; preds = %89
  %144 = icmp eq i8 %91, 0
  br i1 %144, label %202, label %145

145:                                              ; preds = %143
  %146 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %147 = load i32, ptr %29, align 8
  %148 = and i32 %147, 255
  %149 = add nsw i32 %148, -10
  %150 = icmp ult i32 %149, -9
  br i1 %150, label %155, label %151

151:                                              ; preds = %145
  %152 = getelementptr i8, ptr %29, i64 12
  %153 = load i32, ptr %152, align 4, !tbaa !16
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %158

155:                                              ; preds = %151, %145
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %156 = load i32, ptr %29, align 8
  %157 = and i32 %156, 255
  br label %158

158:                                              ; preds = %155, %151
  %159 = phi i32 [ %148, %151 ], [ %157, %155 ]
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %160
  %162 = load i32, ptr %161, align 4, !tbaa !16
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %163
  %165 = load i64, ptr %164, align 8, !tbaa !50
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %158
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %168

168:                                              ; preds = %167, %158
  %169 = getelementptr inbounds i8, ptr %29, i64 %165
  store ptr %146, ptr %169, align 8, !tbaa !5
  %170 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !5
  %171 = load i32, ptr %29, align 8
  %172 = and i32 %171, 255
  %173 = add nsw i32 %172, -10
  %174 = icmp ult i32 %173, -9
  br i1 %174, label %179, label %175

175:                                              ; preds = %168
  %176 = getelementptr i8, ptr %29, i64 12
  %177 = load i32, ptr %176, align 4, !tbaa !16
  %178 = icmp ugt i32 %177, 1
  br i1 %178, label %182, label %179

179:                                              ; preds = %175, %168
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %180 = load i32, ptr %29, align 8
  %181 = and i32 %180, 255
  br label %182

182:                                              ; preds = %179, %175
  %183 = phi i32 [ %172, %175 ], [ %181, %179 ]
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %184
  %186 = load i32, ptr %185, align 4, !tbaa !16
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %187
  %189 = load i64, ptr %188, align 8, !tbaa !50
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %191, label %194

191:                                              ; preds = %182, %134
  %192 = phi i64 [ %141, %134 ], [ %189, %182 ]
  %193 = phi ptr [ %122, %134 ], [ %170, %182 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %194

194:                                              ; preds = %191, %182, %134
  %195 = phi i64 [ %141, %134 ], [ %189, %182 ], [ %192, %191 ]
  %196 = phi ptr [ %122, %134 ], [ %170, %182 ], [ %193, %191 ]
  %197 = getelementptr inbounds i8, ptr %29, i64 %195
  %198 = getelementptr inbounds ptr, ptr %197, i64 1
  store ptr %196, ptr %198, align 8, !tbaa !5
  %199 = load i32, ptr %29, align 8
  %200 = and i32 %199, 65535
  %201 = or i32 %200, 6619136
  store i32 %201, ptr %29, align 8
  br label %202

202:                                              ; preds = %32, %27, %194, %10, %16, %20, %23, %143
  %203 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 6
  %204 = load ptr, ptr %203, align 8, !tbaa !36
  %205 = load ptr, ptr @cfun, align 8, !tbaa !5
  %206 = getelementptr inbounds %struct.function, ptr %205, i64 0, i32 1
  %207 = load ptr, ptr %206, align 8, !tbaa !23
  %208 = getelementptr inbounds %struct.control_flow_graph, ptr %207, i64 0, i32 1
  %209 = load ptr, ptr %208, align 8, !tbaa !35
  %210 = icmp eq ptr %204, %209
  br i1 %210, label %211, label %10, !llvm.loop !135

211:                                              ; preds = %202, %0
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @last_stmt(ptr nocapture noundef readonly %0) local_unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !136
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !16, !noalias !136
  %9 = icmp eq ptr %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %8, align 8, !tbaa !59, !noalias !136
  %12 = icmp eq ptr %11, null
  br i1 %12, label %27, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.gimple_seq_d, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !61, !noalias !136
  %16 = icmp eq ptr %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %13, %23
  %18 = phi ptr [ %25, %23 ], [ %15, %13 ]
  %19 = load ptr, ptr %18, align 8, !tbaa !47
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %18, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !67
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %17, !llvm.loop !68

27:                                               ; preds = %17, %23, %1, %6, %10, %13
  %28 = phi ptr [ null, %13 ], [ null, %10 ], [ null, %6 ], [ null, %1 ], [ null, %23 ], [ %19, %17 ]
  ret ptr %28
}

declare void @fold_defer_overflow_warnings() local_unnamed_addr #3

declare ptr @fold_binary_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @integer_zerop(ptr noundef) local_unnamed_addr #3

declare i32 @integer_onep(ptr noundef) local_unnamed_addr #3

declare void @fold_undefer_overflow_warnings(i8 noundef zeroext, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @start_recording_case_labels() local_unnamed_addr #9 {
  %1 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  %2 = icmp eq ptr %1, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %0
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 849, ptr noundef nonnull @.str.2) #26
  br label %4

4:                                                ; preds = %0, %3
  %5 = tail call ptr @pointer_map_create() #26
  store ptr %5, ptr @edge_to_cases, align 8, !tbaa !5
  ret void
}

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @pointer_map_create() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @end_recording_case_labels() local_unnamed_addr #9 {
  %1 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  tail call void @pointer_map_traverse(ptr noundef %1, ptr noundef nonnull @edge_to_cases_cleanup, ptr noundef null) #26
  %2 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  tail call void @pointer_map_destroy(ptr noundef %2) #26
  store ptr null, ptr @edge_to_cases, align 8, !tbaa !5
  ret void
}

declare void @pointer_map_traverse(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal zeroext i8 @edge_to_cases_cleanup(ptr nocapture readnone %0, ptr nocapture noundef %1, ptr nocapture readnone %2) #11 {
  %4 = load ptr, ptr %1, align 8, !tbaa !5
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %3, %6
  %7 = phi ptr [ %9, %6 ], [ %4, %3 ]
  %8 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  store ptr null, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %6, !llvm.loop !139

11:                                               ; preds = %6, %3
  store ptr null, ptr %1, align 8, !tbaa !5
  ret i8 0
}

declare void @pointer_map_destroy(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @label_to_block_fn(ptr nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = getelementptr inbounds %struct.tree_label_decl, ptr %1, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !16
  %6 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.diagnostic_context, ptr %6, i64 0, i32 1, i64 4
  %8 = load i32, ptr %7, align 8, !tbaa !20
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.diagnostic_context, ptr %6, i64 0, i32 1, i64 5
  %12 = load i32, ptr %11, align 4, !tbaa !20
  %13 = icmp ne i32 %12, 0
  %14 = icmp slt i32 %5, 0
  %15 = select i1 %13, i1 %14, i1 false
  br i1 %15, label %18, label %46

16:                                               ; preds = %2
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %18, label %46

18:                                               ; preds = %10, %16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %19 = load ptr, ptr @cfun, align 8, !tbaa !5
  %20 = getelementptr inbounds %struct.function, ptr %19, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !23
  %22 = getelementptr inbounds %struct.control_flow_graph, ptr %21, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !29
  %24 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %23, i64 0, i32 2, i64 2
  %25 = load ptr, ptr %24, align 8, !tbaa !5
  tail call void @llvm.experimental.noalias.scope.decl(metadata !140)
  %26 = getelementptr inbounds %struct.basic_block_def, ptr %25, i64 0, i32 13
  %27 = load i32, ptr %26, align 8, !tbaa !58, !noalias !140
  %28 = and i32 %27, 512
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %39

30:                                               ; preds = %18
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %25, i64 0, i32 7
  %32 = load ptr, ptr %31, align 8, !tbaa !16, !noalias !140
  %33 = icmp eq ptr %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %30
  %35 = load ptr, ptr %32, align 8, !tbaa !59, !noalias !140
  %36 = icmp eq ptr %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = load ptr, ptr %35, align 8, !tbaa !42, !noalias !140
  br label %39

39:                                               ; preds = %18, %30, %34, %37
  %40 = phi ptr [ %35, %37 ], [ null, %34 ], [ null, %30 ], [ null, %18 ]
  %41 = phi ptr [ %38, %37 ], [ null, %34 ], [ null, %30 ], [ null, %18 ]
  store ptr %41, ptr %3, align 8, !tbaa !44, !alias.scope !140
  %42 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  store ptr %40, ptr %42, align 8, !tbaa !46, !alias.scope !140
  %43 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  store ptr %25, ptr %43, align 8, !tbaa !49, !alias.scope !140
  %44 = tail call ptr @gimple_build_label(ptr noundef nonnull %1) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %44, i32 noundef 0) #26
  %45 = load i32, ptr %4, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %46

46:                                               ; preds = %39, %16, %10
  %47 = phi i32 [ %45, %39 ], [ %5, %16 ], [ %5, %10 ]
  %48 = getelementptr inbounds %struct.function, ptr %0, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !23
  %50 = getelementptr inbounds %struct.control_flow_graph, ptr %49, i64 0, i32 6
  %51 = load ptr, ptr %50, align 8, !tbaa !33
  %52 = icmp eq ptr %51, null
  br i1 %52, label %60, label %53

53:                                               ; preds = %46
  %54 = load i32, ptr %51, align 8, !tbaa !30
  %55 = icmp ugt i32 %54, %47
  br i1 %55, label %56, label %60

56:                                               ; preds = %53
  %57 = zext i32 %47 to i64
  %58 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %51, i64 0, i32 2, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !5
  br label %60

60:                                               ; preds = %46, %53, %56
  %61 = phi ptr [ %59, %56 ], [ null, %53 ], [ null, %46 ]
  ret ptr %61
}

declare ptr @gimple_build_label(ptr noundef) local_unnamed_addr #3

declare void @gsi_insert_before(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @make_abnormal_goto_edges(ptr noundef %0, i8 noundef zeroext %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !23
  %6 = load ptr, ptr %5, align 8, !tbaa !34
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %6, i64 0, i32 6
  %8 = load ptr, ptr %7, align 8, !tbaa !36
  %9 = getelementptr inbounds %struct.control_flow_graph, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !35
  %11 = icmp eq ptr %8, %10
  br i1 %11, label %115, label %12

12:                                               ; preds = %2
  %13 = icmp eq i8 %1, 0
  br i1 %13, label %65, label %14

14:                                               ; preds = %12, %30
  %15 = phi ptr [ %32, %30 ], [ %8, %12 ]
  %16 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 13
  %17 = load i32, ptr %16, align 8, !tbaa !58, !noalias !143
  %18 = and i32 %17, 512
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %30

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 7
  %22 = load ptr, ptr %21, align 8, !tbaa !16, !noalias !143
  %23 = icmp eq ptr %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = load ptr, ptr %22, align 8, !tbaa !59, !noalias !143
  %26 = icmp eq ptr %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %24
  %28 = load ptr, ptr %25, align 8, !tbaa !42, !noalias !143
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %39

30:                                               ; preds = %59, %39, %14, %20, %24, %27, %63
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 6
  %32 = load ptr, ptr %31, align 8, !tbaa !36
  %33 = load ptr, ptr @cfun, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.function, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !23
  %36 = getelementptr inbounds %struct.control_flow_graph, ptr %35, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !35
  %38 = icmp eq ptr %32, %37
  br i1 %38, label %115, label %14, !llvm.loop !146

39:                                               ; preds = %27, %59
  %40 = phi ptr [ %61, %59 ], [ %28, %27 ]
  %41 = load ptr, ptr %40, align 8, !tbaa !47
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 255
  %44 = icmp eq i32 %43, 4
  br i1 %44, label %45, label %30

45:                                               ; preds = %39
  %46 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %47
  %49 = load i64, ptr %48, align 8, !tbaa !50
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %52

52:                                               ; preds = %51, %45
  %53 = getelementptr inbounds i8, ptr %41, i64 %49
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = getelementptr inbounds %struct.tree_decl_common, ptr %54, i64 0, i32 2
  %56 = load i64, ptr %55, align 8
  %57 = and i64 %56, 256
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %40, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !tbaa !53
  %62 = icmp eq ptr %61, null
  br i1 %62, label %30, label %39, !llvm.loop !147

63:                                               ; preds = %52
  %64 = tail call ptr @make_edge(ptr noundef %0, ptr noundef %15, i32 noundef 2) #26
  br label %30

65:                                               ; preds = %12, %106
  %66 = phi ptr [ %108, %106 ], [ %8, %12 ]
  %67 = getelementptr inbounds %struct.basic_block_def, ptr %66, i64 0, i32 13
  %68 = load i32, ptr %67, align 8, !tbaa !58, !noalias !143
  %69 = and i32 %68, 512
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %106

71:                                               ; preds = %65
  %72 = getelementptr inbounds %struct.basic_block_def, ptr %66, i64 0, i32 7
  %73 = load ptr, ptr %72, align 8, !tbaa !16, !noalias !143
  %74 = icmp eq ptr %73, null
  br i1 %74, label %106, label %75

75:                                               ; preds = %71
  %76 = load ptr, ptr %73, align 8, !tbaa !59, !noalias !143
  %77 = icmp eq ptr %76, null
  br i1 %77, label %106, label %78

78:                                               ; preds = %75
  %79 = load ptr, ptr %76, align 8, !tbaa !42, !noalias !143
  %80 = icmp eq ptr %79, null
  br i1 %80, label %106, label %81

81:                                               ; preds = %78, %100
  %82 = phi ptr [ %102, %100 ], [ %79, %78 ]
  %83 = load ptr, ptr %82, align 8, !tbaa !47
  %84 = load i32, ptr %83, align 8
  %85 = and i32 %84, 255
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %87, label %106

87:                                               ; preds = %81
  %88 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %89
  %91 = load i64, ptr %90, align 8, !tbaa !50
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %94

94:                                               ; preds = %87, %93
  %95 = getelementptr inbounds i8, ptr %83, i64 %91
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  %97 = load i64, ptr %96, align 8
  %98 = and i64 %97, 65536
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %94
  %101 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %82, i64 0, i32 2
  %102 = load ptr, ptr %101, align 8, !tbaa !53
  %103 = icmp eq ptr %102, null
  br i1 %103, label %106, label %81, !llvm.loop !147

104:                                              ; preds = %94
  %105 = tail call ptr @make_edge(ptr noundef %0, ptr noundef %66, i32 noundef 2) #26
  br label %106

106:                                              ; preds = %100, %81, %65, %71, %75, %78, %104
  %107 = getelementptr inbounds %struct.basic_block_def, ptr %66, i64 0, i32 6
  %108 = load ptr, ptr %107, align 8, !tbaa !36
  %109 = load ptr, ptr @cfun, align 8, !tbaa !5
  %110 = getelementptr inbounds %struct.function, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !23
  %112 = getelementptr inbounds %struct.control_flow_graph, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %112, align 8, !tbaa !35
  %114 = icmp eq ptr %108, %113
  br i1 %114, label %115, label %65, !llvm.loop !146

115:                                              ; preds = %30, %106, %2
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #12

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @gimple_label_label(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 255
  %4 = add nsw i32 %3, -10
  %5 = icmp ult i32 %4, -9
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = zext i32 %3 to i64
  %8 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !16
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %10
  %12 = load i64, ptr %11, align 8, !tbaa !50
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %15

15:                                               ; preds = %14, %6
  %16 = getelementptr inbounds i8, ptr %0, i64 %12
  %17 = load ptr, ptr %16, align 8, !tbaa !5
  br label %18

18:                                               ; preds = %1, %15
  %19 = phi ptr [ %17, %15 ], [ null, %1 ]
  ret ptr %19
}

declare ptr @make_edge(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @cleanup_dead_labels() local_unnamed_addr #9 {
  %1 = alloca %struct.gimple_stmt_iterator, align 8
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = load ptr, ptr @cfun, align 8, !tbaa !5
  %6 = getelementptr inbounds %struct.function, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !23
  %8 = getelementptr inbounds %struct.control_flow_graph, ptr %7, i64 0, i32 5
  %9 = load i32, ptr %8, align 8, !tbaa !28
  %10 = sext i32 %9 to i64
  %11 = tail call ptr @xcalloc(i64 noundef %10, i64 noundef 16) #26
  store ptr %11, ptr @label_for_bb, align 8, !tbaa !5
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !23
  %15 = load ptr, ptr %14, align 8, !tbaa !34
  %16 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !36
  %18 = getelementptr inbounds %struct.control_flow_graph, ptr %14, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !35
  %20 = icmp eq ptr %17, %19
  br i1 %20, label %504, label %21

21:                                               ; preds = %0, %80
  %22 = phi ptr [ %81, %80 ], [ %11, %0 ]
  %23 = phi ptr [ %83, %80 ], [ %17, %0 ]
  %24 = getelementptr inbounds %struct.basic_block_def, ptr %23, i64 0, i32 13
  %25 = load i32, ptr %24, align 8, !tbaa !58, !noalias !148
  %26 = and i32 %25, 512
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %80

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.basic_block_def, ptr %23, i64 0, i32 7
  %30 = load ptr, ptr %29, align 8, !tbaa !16, !noalias !148
  %31 = icmp eq ptr %30, null
  br i1 %31, label %80, label %32

32:                                               ; preds = %28
  %33 = load ptr, ptr %30, align 8, !tbaa !59, !noalias !148
  %34 = icmp eq ptr %33, null
  br i1 %34, label %80, label %35

35:                                               ; preds = %32
  %36 = load ptr, ptr %33, align 8, !tbaa !42, !noalias !148
  %37 = icmp eq ptr %36, null
  br i1 %37, label %80, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %23, i64 0, i32 9
  br label %40

40:                                               ; preds = %38, %76
  %41 = phi ptr [ %22, %38 ], [ %56, %76 ]
  %42 = phi ptr [ %36, %38 ], [ %78, %76 ]
  %43 = load ptr, ptr %42, align 8, !tbaa !47
  %44 = load i32, ptr %43, align 8
  %45 = and i32 %44, 255
  %46 = icmp eq i32 %45, 4
  br i1 %46, label %47, label %80

47:                                               ; preds = %40
  %48 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %49
  %51 = load i64, ptr %50, align 8, !tbaa !50
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %54 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  br label %55

55:                                               ; preds = %47, %53
  %56 = phi ptr [ %41, %47 ], [ %54, %53 ]
  %57 = getelementptr inbounds i8, ptr %43, i64 %51
  %58 = load ptr, ptr %57, align 8, !tbaa !5
  %59 = load i32, ptr %39, align 8, !tbaa !120
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.label_record, ptr %56, i64 %60
  %62 = load ptr, ptr %61, align 8, !tbaa !151
  %63 = icmp eq ptr %62, null
  br i1 %63, label %64, label %65

64:                                               ; preds = %55
  store ptr %58, ptr %61, align 8, !tbaa !151
  br label %76

65:                                               ; preds = %55
  %66 = getelementptr inbounds %struct.tree_decl_common, ptr %58, i64 0, i32 2
  %67 = load i64, ptr %66, align 8
  %68 = and i64 %67, 4096
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %76

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.tree_decl_common, ptr %62, i64 0, i32 2
  %72 = load i64, ptr %71, align 8
  %73 = and i64 %72, 4096
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %76, label %75

75:                                               ; preds = %70
  store ptr %58, ptr %61, align 8, !tbaa !151
  br label %80

76:                                               ; preds = %64, %70, %65
  %77 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %42, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !53
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %40, !llvm.loop !153

80:                                               ; preds = %76, %40, %21, %28, %32, %35, %75
  %81 = phi ptr [ %22, %35 ], [ %56, %75 ], [ %22, %32 ], [ %22, %28 ], [ %22, %21 ], [ %56, %76 ], [ %41, %40 ]
  %82 = getelementptr inbounds %struct.basic_block_def, ptr %23, i64 0, i32 6
  %83 = load ptr, ptr %82, align 8, !tbaa !36
  %84 = load ptr, ptr @cfun, align 8, !tbaa !5
  %85 = getelementptr inbounds %struct.function, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !23
  %87 = getelementptr inbounds %struct.control_flow_graph, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !35
  %89 = icmp eq ptr %83, %88
  br i1 %89, label %90, label %21, !llvm.loop !154

90:                                               ; preds = %80
  %91 = load ptr, ptr %86, align 8, !tbaa !34
  %92 = getelementptr inbounds %struct.basic_block_def, ptr %91, i64 0, i32 6
  %93 = load ptr, ptr %92, align 8, !tbaa !36
  %94 = icmp eq ptr %93, %83
  br i1 %94, label %504, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 1
  %97 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 2
  %98 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  %99 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  br label %100

100:                                              ; preds = %95, %495
  %101 = phi ptr [ %93, %95 ], [ %497, %495 ]
  %102 = getelementptr inbounds %struct.basic_block_def, ptr %101, i64 0, i32 13
  %103 = load i32, ptr %102, align 8, !tbaa !58, !noalias !155
  %104 = and i32 %103, 512
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %495

106:                                              ; preds = %100
  %107 = getelementptr inbounds %struct.basic_block_def, ptr %101, i64 0, i32 7
  %108 = load ptr, ptr %107, align 8, !tbaa !16, !noalias !155
  %109 = icmp eq ptr %108, null
  br i1 %109, label %495, label %110

110:                                              ; preds = %106
  %111 = load ptr, ptr %108, align 8, !tbaa !59, !noalias !155
  %112 = icmp eq ptr %111, null
  br i1 %112, label %495, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds %struct.gimple_seq_d, ptr %111, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !61, !noalias !155
  %116 = icmp eq ptr %115, null
  br i1 %116, label %495, label %117

117:                                              ; preds = %113, %123
  %118 = phi ptr [ %125, %123 ], [ %115, %113 ]
  %119 = load ptr, ptr %118, align 8, !tbaa !47
  %120 = load i32, ptr %119, align 8
  %121 = and i32 %120, 255
  %122 = icmp eq i32 %121, 2
  br i1 %122, label %123, label %127

123:                                              ; preds = %117
  %124 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %118, i64 0, i32 1
  %125 = load ptr, ptr %124, align 8, !tbaa !67
  %126 = icmp eq ptr %125, null
  br i1 %126, label %495, label %117, !llvm.loop !68

127:                                              ; preds = %117
  %128 = trunc i32 %120 to i8
  switch i8 %128, label %495 [
    i8 1, label %129
    i8 5, label %225
    i8 7, label %328
    i8 3, label %435
  ]

129:                                              ; preds = %127
  %130 = add nsw i32 %121, -10
  %131 = icmp ult i32 %130, -9
  br i1 %131, label %150, label %132

132:                                              ; preds = %129
  %133 = zext i32 %121 to i64
  %134 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %133
  %135 = load i32, ptr %134, align 4, !tbaa !16
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %136
  %138 = load i64, ptr %137, align 8, !tbaa !50
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %132
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %141 = load i32, ptr %119, align 8
  %142 = and i32 %141, 255
  %143 = add nsw i32 %142, -10
  br label %144

144:                                              ; preds = %140, %132
  %145 = phi i32 [ %143, %140 ], [ %130, %132 ]
  %146 = phi i32 [ %142, %140 ], [ %121, %132 ]
  %147 = getelementptr inbounds i8, ptr %119, i64 %138
  %148 = getelementptr inbounds ptr, ptr %147, i64 2
  %149 = load ptr, ptr %148, align 8, !tbaa !5
  br label %150

150:                                              ; preds = %129, %144
  %151 = phi i32 [ %130, %129 ], [ %145, %144 ]
  %152 = phi i32 [ %121, %129 ], [ %146, %144 ]
  %153 = phi ptr [ null, %129 ], [ %149, %144 ]
  %154 = icmp ult i32 %151, -9
  br i1 %154, label %168, label %155

155:                                              ; preds = %150
  %156 = zext i32 %152 to i64
  %157 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %156
  %158 = load i32, ptr %157, align 4, !tbaa !16
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %159
  %161 = load i64, ptr %160, align 8, !tbaa !50
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %155
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %164

164:                                              ; preds = %163, %155
  %165 = getelementptr inbounds i8, ptr %119, i64 %161
  %166 = getelementptr inbounds ptr, ptr %165, i64 3
  %167 = load ptr, ptr %166, align 8, !tbaa !5
  br label %168

168:                                              ; preds = %150, %164
  %169 = phi ptr [ %167, %164 ], [ null, %150 ]
  %170 = icmp eq ptr %153, null
  br i1 %170, label %197, label %171

171:                                              ; preds = %168
  %172 = call fastcc ptr @main_block_label(ptr noundef nonnull %153)
  %173 = load i32, ptr %119, align 8
  %174 = and i32 %173, 255
  %175 = add nsw i32 %174, -10
  %176 = icmp ult i32 %175, -9
  br i1 %176, label %181, label %177

177:                                              ; preds = %171
  %178 = getelementptr i8, ptr %119, i64 12
  %179 = load i32, ptr %178, align 4, !tbaa !16
  %180 = icmp ugt i32 %179, 2
  br i1 %180, label %184, label %181

181:                                              ; preds = %177, %171
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %182 = load i32, ptr %119, align 8
  %183 = and i32 %182, 255
  br label %184

184:                                              ; preds = %181, %177
  %185 = phi i32 [ %174, %177 ], [ %183, %181 ]
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %186
  %188 = load i32, ptr %187, align 4, !tbaa !16
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %189
  %191 = load i64, ptr %190, align 8, !tbaa !50
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %184
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %194

194:                                              ; preds = %184, %193
  %195 = getelementptr inbounds i8, ptr %119, i64 %191
  %196 = getelementptr inbounds ptr, ptr %195, i64 2
  store ptr %172, ptr %196, align 8, !tbaa !5
  br label %197

197:                                              ; preds = %194, %168
  %198 = icmp eq ptr %169, null
  br i1 %198, label %495, label %199

199:                                              ; preds = %197
  %200 = call fastcc ptr @main_block_label(ptr noundef nonnull %169)
  %201 = load i32, ptr %119, align 8
  %202 = and i32 %201, 255
  %203 = add nsw i32 %202, -10
  %204 = icmp ult i32 %203, -9
  br i1 %204, label %209, label %205

205:                                              ; preds = %199
  %206 = getelementptr i8, ptr %119, i64 12
  %207 = load i32, ptr %206, align 4, !tbaa !16
  %208 = icmp ugt i32 %207, 3
  br i1 %208, label %212, label %209

209:                                              ; preds = %205, %199
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %210 = load i32, ptr %119, align 8
  %211 = and i32 %210, 255
  br label %212

212:                                              ; preds = %209, %205
  %213 = phi i32 [ %202, %205 ], [ %211, %209 ]
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %214
  %216 = load i32, ptr %215, align 4, !tbaa !16
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %217
  %219 = load i64, ptr %218, align 8, !tbaa !50
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %212
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %222

222:                                              ; preds = %212, %221
  %223 = getelementptr inbounds i8, ptr %119, i64 %219
  %224 = getelementptr inbounds ptr, ptr %223, i64 3
  store ptr %200, ptr %224, align 8, !tbaa !5
  br label %495

225:                                              ; preds = %127
  %226 = getelementptr i8, ptr %119, i64 12
  %227 = load i32, ptr %226, align 4, !tbaa !16
  %228 = icmp ugt i32 %227, 1
  br i1 %228, label %229, label %231

229:                                              ; preds = %225
  %230 = add i32 %227, -1
  br label %234

231:                                              ; preds = %225
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %232 = add nsw i32 %227, -1
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %495, label %234

234:                                              ; preds = %229, %231
  %235 = phi i32 [ %230, %229 ], [ %232, %231 ]
  %236 = zext i32 %235 to i64
  br label %237

237:                                              ; preds = %234, %323
  %238 = phi i64 [ %326, %323 ], [ 0, %234 ]
  %239 = trunc i64 %238 to i32
  %240 = load i32, ptr %226, align 4, !tbaa !16
  %241 = add i32 %239, 1
  %242 = icmp ugt i32 %240, %241
  br i1 %242, label %244, label %243

243:                                              ; preds = %237
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %244

244:                                              ; preds = %243, %237
  %245 = load i32, ptr %119, align 8
  %246 = and i32 %245, 255
  %247 = add nsw i32 %246, -1
  %248 = icmp ult i32 %247, 9
  call void @llvm.assume(i1 %248)
  %249 = zext i32 %246 to i64
  %250 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %249
  %251 = load i32, ptr %250, align 4, !tbaa !16
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %252
  %254 = load i64, ptr %253, align 8, !tbaa !50
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %244
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %257

257:                                              ; preds = %256, %244
  %258 = getelementptr inbounds i8, ptr %119, i64 %254
  %259 = zext i32 %241 to i64
  %260 = getelementptr inbounds ptr, ptr %258, i64 %259
  %261 = load ptr, ptr %260, align 8, !tbaa !5
  %262 = getelementptr inbounds %struct.tree_exp, ptr %261, i64 1, i32 0, i32 1
  %263 = load ptr, ptr %262, align 8, !tbaa !16
  %264 = load ptr, ptr @cfun, align 8, !tbaa !5
  %265 = getelementptr inbounds %struct.tree_label_decl, ptr %263, i64 0, i32 1
  %266 = load i32, ptr %265, align 8, !tbaa !16
  %267 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %268 = getelementptr inbounds %struct.diagnostic_context, ptr %267, i64 0, i32 1, i64 4
  %269 = load i32, ptr %268, align 8, !tbaa !20
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %277

271:                                              ; preds = %257
  %272 = getelementptr inbounds %struct.diagnostic_context, ptr %267, i64 0, i32 1, i64 5
  %273 = load i32, ptr %272, align 4, !tbaa !20
  %274 = icmp ne i32 %273, 0
  %275 = icmp slt i32 %266, 0
  %276 = select i1 %274, i1 %275, i1 false
  br i1 %276, label %279, label %304

277:                                              ; preds = %257
  %278 = icmp slt i32 %266, 0
  br i1 %278, label %279, label %304

279:                                              ; preds = %277, %271
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %280 = getelementptr inbounds %struct.function, ptr %264, i64 0, i32 1
  %281 = load ptr, ptr %280, align 8, !tbaa !23
  %282 = getelementptr inbounds %struct.control_flow_graph, ptr %281, i64 0, i32 2
  %283 = load ptr, ptr %282, align 8, !tbaa !29
  %284 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %283, i64 0, i32 2, i64 2
  %285 = load ptr, ptr %284, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !158)
  %286 = getelementptr inbounds %struct.basic_block_def, ptr %285, i64 0, i32 13
  %287 = load i32, ptr %286, align 8, !tbaa !58, !noalias !158
  %288 = and i32 %287, 512
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %299

290:                                              ; preds = %279
  %291 = getelementptr inbounds %struct.basic_block_def, ptr %285, i64 0, i32 7
  %292 = load ptr, ptr %291, align 8, !tbaa !16, !noalias !158
  %293 = icmp eq ptr %292, null
  br i1 %293, label %299, label %294

294:                                              ; preds = %290
  %295 = load ptr, ptr %292, align 8, !tbaa !59, !noalias !158
  %296 = icmp eq ptr %295, null
  br i1 %296, label %299, label %297

297:                                              ; preds = %294
  %298 = load ptr, ptr %295, align 8, !tbaa !42, !noalias !158
  br label %299

299:                                              ; preds = %297, %294, %290, %279
  %300 = phi ptr [ %295, %297 ], [ null, %294 ], [ null, %290 ], [ null, %279 ]
  %301 = phi ptr [ %298, %297 ], [ null, %294 ], [ null, %290 ], [ null, %279 ]
  store ptr %301, ptr %3, align 8, !tbaa !44, !alias.scope !158
  store ptr %300, ptr %98, align 8, !tbaa !46, !alias.scope !158
  store ptr %285, ptr %99, align 8, !tbaa !49, !alias.scope !158
  %302 = call ptr @gimple_build_label(ptr noundef nonnull %263) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %302, i32 noundef 0) #26
  %303 = load i32, ptr %265, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %304

304:                                              ; preds = %299, %277, %271
  %305 = phi i32 [ %303, %299 ], [ %266, %277 ], [ %266, %271 ]
  %306 = getelementptr inbounds %struct.function, ptr %264, i64 0, i32 1
  %307 = load ptr, ptr %306, align 8, !tbaa !23
  %308 = getelementptr inbounds %struct.control_flow_graph, ptr %307, i64 0, i32 6
  %309 = load ptr, ptr %308, align 8, !tbaa !33, !nonnull !66, !noundef !66
  %310 = load i32, ptr %309, align 8, !tbaa !30
  %311 = icmp ugt i32 %310, %305
  call void @llvm.assume(i1 %311)
  %312 = zext i32 %305 to i64
  %313 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %309, i64 0, i32 2, i64 %312
  %314 = load ptr, ptr %313, align 8, !tbaa !5
  %315 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  %316 = getelementptr inbounds %struct.basic_block_def, ptr %314, i64 0, i32 9
  %317 = load i32, ptr %316, align 8, !tbaa !120
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds %struct.label_record, ptr %315, i64 %318
  %320 = load ptr, ptr %319, align 8, !tbaa !151
  %321 = icmp eq ptr %320, null
  br i1 %321, label %322, label %323

322:                                              ; preds = %304
  store ptr %263, ptr %319, align 8, !tbaa !151
  br label %323

323:                                              ; preds = %304, %322
  %324 = phi ptr [ %320, %304 ], [ %263, %322 ]
  %325 = getelementptr inbounds %struct.label_record, ptr %315, i64 %318, i32 1
  store i8 1, ptr %325, align 8, !tbaa !161
  store ptr %324, ptr %262, align 8, !tbaa !16
  %326 = add nuw nsw i64 %238, 1
  %327 = icmp eq i64 %326, %236
  br i1 %327, label %495, label %237, !llvm.loop !162

328:                                              ; preds = %127
  %329 = getelementptr i8, ptr %119, i64 75
  %330 = load i8, ptr %329, align 1, !tbaa !16
  %331 = zext i8 %330 to i32
  %332 = icmp eq i8 %330, 0
  br i1 %332, label %495, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %struct.gimple_statement_asm, ptr %119, i64 0, i32 2
  %335 = getelementptr inbounds %struct.gimple_statement_asm, ptr %119, i64 0, i32 4
  br label %336

336:                                              ; preds = %333, %430
  %337 = phi i32 [ 0, %333 ], [ %433, %430 ]
  %338 = load i8, ptr %329, align 1, !tbaa !16
  %339 = zext i8 %338 to i32
  %340 = icmp ugt i32 %337, %339
  br i1 %340, label %341, label %342

341:                                              ; preds = %336
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 2710, ptr noundef nonnull @.str.2) #26
  br label %342

342:                                              ; preds = %341, %336
  %343 = load i8, ptr %334, align 8, !tbaa !16
  %344 = zext i8 %343 to i32
  %345 = add nuw nsw i32 %337, %344
  %346 = load i8, ptr %335, align 2, !tbaa !16
  %347 = zext i8 %346 to i32
  %348 = add nuw nsw i32 %345, %347
  %349 = load i32, ptr %119, align 8
  %350 = and i32 %349, 255
  %351 = add nsw i32 %350, -10
  %352 = icmp ult i32 %351, -9
  br i1 %352, label %367, label %353

353:                                              ; preds = %342
  %354 = zext i32 %350 to i64
  %355 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %354
  %356 = load i32, ptr %355, align 4, !tbaa !16
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %357
  %359 = load i64, ptr %358, align 8, !tbaa !50
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %353
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %362

362:                                              ; preds = %361, %353
  %363 = getelementptr inbounds i8, ptr %119, i64 %359
  %364 = zext i32 %348 to i64
  %365 = getelementptr inbounds ptr, ptr %363, i64 %364
  %366 = load ptr, ptr %365, align 8, !tbaa !5
  br label %367

367:                                              ; preds = %342, %362
  %368 = phi ptr [ %366, %362 ], [ null, %342 ]
  %369 = getelementptr inbounds %struct.tree_list, ptr %368, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !16
  %371 = load ptr, ptr @cfun, align 8, !tbaa !5
  %372 = getelementptr inbounds %struct.tree_label_decl, ptr %370, i64 0, i32 1
  %373 = load i32, ptr %372, align 8, !tbaa !16
  %374 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %375 = getelementptr inbounds %struct.diagnostic_context, ptr %374, i64 0, i32 1, i64 4
  %376 = load i32, ptr %375, align 8, !tbaa !20
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %378, label %384

378:                                              ; preds = %367
  %379 = getelementptr inbounds %struct.diagnostic_context, ptr %374, i64 0, i32 1, i64 5
  %380 = load i32, ptr %379, align 4, !tbaa !20
  %381 = icmp ne i32 %380, 0
  %382 = icmp slt i32 %373, 0
  %383 = select i1 %381, i1 %382, i1 false
  br i1 %383, label %386, label %411

384:                                              ; preds = %367
  %385 = icmp slt i32 %373, 0
  br i1 %385, label %386, label %411

386:                                              ; preds = %384, %378
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %387 = getelementptr inbounds %struct.function, ptr %371, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !tbaa !23
  %389 = getelementptr inbounds %struct.control_flow_graph, ptr %388, i64 0, i32 2
  %390 = load ptr, ptr %389, align 8, !tbaa !29
  %391 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %390, i64 0, i32 2, i64 2
  %392 = load ptr, ptr %391, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !163)
  %393 = getelementptr inbounds %struct.basic_block_def, ptr %392, i64 0, i32 13
  %394 = load i32, ptr %393, align 8, !tbaa !58, !noalias !163
  %395 = and i32 %394, 512
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %397, label %406

397:                                              ; preds = %386
  %398 = getelementptr inbounds %struct.basic_block_def, ptr %392, i64 0, i32 7
  %399 = load ptr, ptr %398, align 8, !tbaa !16, !noalias !163
  %400 = icmp eq ptr %399, null
  br i1 %400, label %406, label %401

401:                                              ; preds = %397
  %402 = load ptr, ptr %399, align 8, !tbaa !59, !noalias !163
  %403 = icmp eq ptr %402, null
  br i1 %403, label %406, label %404

404:                                              ; preds = %401
  %405 = load ptr, ptr %402, align 8, !tbaa !42, !noalias !163
  br label %406

406:                                              ; preds = %404, %401, %397, %386
  %407 = phi ptr [ %402, %404 ], [ null, %401 ], [ null, %397 ], [ null, %386 ]
  %408 = phi ptr [ %405, %404 ], [ null, %401 ], [ null, %397 ], [ null, %386 ]
  store ptr %408, ptr %2, align 8, !tbaa !44, !alias.scope !163
  store ptr %407, ptr %96, align 8, !tbaa !46, !alias.scope !163
  store ptr %392, ptr %97, align 8, !tbaa !49, !alias.scope !163
  %409 = call ptr @gimple_build_label(ptr noundef nonnull %370) #26
  call void @gsi_insert_before(ptr noundef nonnull %2, ptr noundef %409, i32 noundef 0) #26
  %410 = load i32, ptr %372, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  br label %411

411:                                              ; preds = %406, %384, %378
  %412 = phi i32 [ %410, %406 ], [ %373, %384 ], [ %373, %378 ]
  %413 = getelementptr inbounds %struct.function, ptr %371, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !23
  %415 = getelementptr inbounds %struct.control_flow_graph, ptr %414, i64 0, i32 6
  %416 = load ptr, ptr %415, align 8, !tbaa !33, !nonnull !66, !noundef !66
  %417 = load i32, ptr %416, align 8, !tbaa !30
  %418 = icmp ugt i32 %417, %412
  call void @llvm.assume(i1 %418)
  %419 = zext i32 %412 to i64
  %420 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %416, i64 0, i32 2, i64 %419
  %421 = load ptr, ptr %420, align 8, !tbaa !5
  %422 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  %423 = getelementptr inbounds %struct.basic_block_def, ptr %421, i64 0, i32 9
  %424 = load i32, ptr %423, align 8, !tbaa !120
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds %struct.label_record, ptr %422, i64 %425
  %427 = load ptr, ptr %426, align 8, !tbaa !151
  %428 = icmp eq ptr %427, null
  br i1 %428, label %429, label %430

429:                                              ; preds = %411
  store ptr %370, ptr %426, align 8, !tbaa !151
  br label %430

430:                                              ; preds = %411, %429
  %431 = phi ptr [ %427, %411 ], [ %370, %429 ]
  %432 = getelementptr inbounds %struct.label_record, ptr %422, i64 %425, i32 1
  store i8 1, ptr %432, align 8, !tbaa !161
  store ptr %431, ptr %369, align 8, !tbaa !16
  %433 = add nuw nsw i32 %337, 1
  %434 = icmp eq i32 %433, %331
  br i1 %434, label %495, label %336, !llvm.loop !166

435:                                              ; preds = %127
  %436 = icmp eq i32 %121, 3
  br i1 %436, label %437, label %453

437:                                              ; preds = %435
  %438 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %439
  %441 = load i64, ptr %440, align 8, !tbaa !50
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %444

443:                                              ; preds = %437
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %444

444:                                              ; preds = %437, %443
  %445 = getelementptr inbounds i8, ptr %119, i64 %441
  %446 = load ptr, ptr %445, align 8, !tbaa !5
  %447 = load i64, ptr %446, align 8
  %448 = and i64 %447, 65535
  %449 = icmp eq i64 %448, 30
  br i1 %449, label %450, label %495

450:                                              ; preds = %444
  %451 = load i32, ptr %119, align 8
  %452 = and i32 %451, 255
  br label %453

453:                                              ; preds = %450, %435
  %454 = phi i32 [ %452, %450 ], [ %121, %435 ]
  %455 = add nsw i32 %454, -10
  %456 = icmp ult i32 %455, -9
  br i1 %456, label %469, label %457

457:                                              ; preds = %453
  %458 = zext i32 %454 to i64
  %459 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %458
  %460 = load i32, ptr %459, align 4, !tbaa !16
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %461
  %463 = load i64, ptr %462, align 8, !tbaa !50
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %465, label %466

465:                                              ; preds = %457
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %466

466:                                              ; preds = %465, %457
  %467 = getelementptr inbounds i8, ptr %119, i64 %463
  %468 = load ptr, ptr %467, align 8, !tbaa !5
  br label %469

469:                                              ; preds = %453, %466
  %470 = phi ptr [ %468, %466 ], [ null, %453 ]
  %471 = call fastcc ptr @main_block_label(ptr noundef %470)
  %472 = load i32, ptr %119, align 8
  %473 = and i32 %472, 255
  %474 = add nsw i32 %473, -10
  %475 = icmp ult i32 %474, -9
  br i1 %475, label %480, label %476

476:                                              ; preds = %469
  %477 = getelementptr i8, ptr %119, i64 12
  %478 = load i32, ptr %477, align 4, !tbaa !16
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %483

480:                                              ; preds = %476, %469
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %481 = load i32, ptr %119, align 8
  %482 = and i32 %481, 255
  br label %483

483:                                              ; preds = %480, %476
  %484 = phi i32 [ %473, %476 ], [ %482, %480 ]
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %485
  %487 = load i32, ptr %486, align 4, !tbaa !16
  %488 = zext i32 %487 to i64
  %489 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %488
  %490 = load i64, ptr %489, align 8, !tbaa !50
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %492, label %493

492:                                              ; preds = %483
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %493

493:                                              ; preds = %483, %492
  %494 = getelementptr inbounds i8, ptr %119, i64 %490
  store ptr %471, ptr %494, align 8, !tbaa !5
  br label %495

495:                                              ; preds = %123, %430, %323, %328, %231, %100, %106, %110, %113, %493, %444, %127, %222, %197
  %496 = getelementptr inbounds %struct.basic_block_def, ptr %101, i64 0, i32 6
  %497 = load ptr, ptr %496, align 8, !tbaa !36
  %498 = load ptr, ptr @cfun, align 8, !tbaa !5
  %499 = getelementptr inbounds %struct.function, ptr %498, i64 0, i32 1
  %500 = load ptr, ptr %499, align 8, !tbaa !23
  %501 = getelementptr inbounds %struct.control_flow_graph, ptr %500, i64 0, i32 1
  %502 = load ptr, ptr %501, align 8, !tbaa !35
  %503 = icmp eq ptr %497, %502
  br i1 %503, label %504, label %100, !llvm.loop !167

504:                                              ; preds = %495, %0, %90
  %505 = phi ptr [ %84, %90 ], [ %12, %0 ], [ %498, %495 ]
  %506 = load ptr, ptr %505, align 8, !tbaa !168
  %507 = icmp eq ptr %506, null
  br i1 %507, label %658, label %508

508:                                              ; preds = %504
  %509 = getelementptr inbounds %struct.eh_status, ptr %506, i64 0, i32 2
  %510 = load ptr, ptr %509, align 8, !tbaa !169
  %511 = icmp eq ptr %510, null
  br i1 %511, label %545, label %512

512:                                              ; preds = %508
  %513 = load i32, ptr %510, align 8, !tbaa !171
  %514 = icmp ugt i32 %513, 1
  br i1 %514, label %520, label %545

515:                                              ; preds = %539
  %516 = add nuw nsw i64 %522, 1
  %517 = load i32, ptr %543, align 8, !tbaa !171
  %518 = zext i32 %517 to i64
  %519 = icmp ult i64 %516, %518
  br i1 %519, label %520, label %545, !llvm.loop !173

520:                                              ; preds = %512, %515
  %521 = phi ptr [ %543, %515 ], [ %510, %512 ]
  %522 = phi i64 [ %516, %515 ], [ 1, %512 ]
  %523 = getelementptr inbounds %struct.VEC_eh_landing_pad_base, ptr %521, i64 0, i32 2, i64 %522
  %524 = load ptr, ptr %523, align 8, !tbaa !5
  %525 = icmp eq ptr %524, null
  br i1 %525, label %539, label %526

526:                                              ; preds = %520
  %527 = getelementptr inbounds %struct.eh_landing_pad_d, ptr %524, i64 0, i32 2
  %528 = load ptr, ptr %527, align 8, !tbaa !174
  %529 = icmp eq ptr %528, null
  br i1 %529, label %539, label %530

530:                                              ; preds = %526
  %531 = call fastcc ptr @main_block_label(ptr noundef nonnull %528)
  %532 = load ptr, ptr %527, align 8, !tbaa !174
  %533 = icmp eq ptr %531, %532
  br i1 %533, label %539, label %534

534:                                              ; preds = %530
  %535 = getelementptr inbounds %struct.tree_label_decl, ptr %532, i64 0, i32 2
  store i32 0, ptr %535, align 4, !tbaa !16
  %536 = getelementptr inbounds %struct.eh_landing_pad_d, ptr %524, i64 0, i32 4
  %537 = load i32, ptr %536, align 8, !tbaa !176
  %538 = getelementptr inbounds %struct.tree_label_decl, ptr %531, i64 0, i32 2
  store i32 %537, ptr %538, align 4, !tbaa !16
  br label %539

539:                                              ; preds = %534, %530, %526, %520
  %540 = load ptr, ptr @cfun, align 8, !tbaa !5
  %541 = load ptr, ptr %540, align 8, !tbaa !168
  %542 = getelementptr inbounds %struct.eh_status, ptr %541, i64 0, i32 2
  %543 = load ptr, ptr %542, align 8, !tbaa !169
  %544 = icmp eq ptr %543, null
  br i1 %544, label %545, label %515, !llvm.loop !173

545:                                              ; preds = %515, %539, %512, %508
  %546 = phi ptr [ %505, %508 ], [ %505, %512 ], [ %540, %539 ], [ %540, %515 ]
  %547 = phi ptr [ %506, %508 ], [ %506, %512 ], [ %541, %539 ], [ %541, %515 ]
  %548 = load ptr, ptr %547, align 8, !tbaa !177
  %549 = icmp eq ptr %548, null
  br i1 %549, label %658, label %550

550:                                              ; preds = %545
  %551 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %1, i64 0, i32 1
  %552 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %1, i64 0, i32 2
  br label %553

553:                                              ; preds = %654, %550
  %554 = phi ptr [ %548, %550 ], [ %655, %654 ]
  %555 = getelementptr inbounds %struct.eh_region_d, ptr %554, i64 0, i32 4
  %556 = load i32, ptr %555, align 4, !tbaa !178
  switch i32 %556, label %638 [
    i32 2, label %632
    i32 1, label %557
  ]

557:                                              ; preds = %553
  %558 = getelementptr inbounds %struct.eh_region_d, ptr %554, i64 0, i32 5
  %559 = load ptr, ptr %558, align 8, !tbaa !16
  %560 = icmp eq ptr %559, null
  br i1 %560, label %638, label %561

561:                                              ; preds = %557, %629
  %562 = phi ptr [ %630, %629 ], [ %559, %557 ]
  %563 = getelementptr inbounds %struct.eh_catch_d, ptr %562, i64 0, i32 4
  %564 = load ptr, ptr %563, align 8, !tbaa !180
  %565 = icmp eq ptr %564, null
  br i1 %565, label %629, label %566

566:                                              ; preds = %561
  %567 = load ptr, ptr @cfun, align 8, !tbaa !5
  %568 = getelementptr inbounds %struct.tree_label_decl, ptr %564, i64 0, i32 1
  %569 = load i32, ptr %568, align 8, !tbaa !16
  %570 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %571 = getelementptr inbounds %struct.diagnostic_context, ptr %570, i64 0, i32 1, i64 4
  %572 = load i32, ptr %571, align 8, !tbaa !20
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %574, label %580

574:                                              ; preds = %566
  %575 = getelementptr inbounds %struct.diagnostic_context, ptr %570, i64 0, i32 1, i64 5
  %576 = load i32, ptr %575, align 4, !tbaa !20
  %577 = icmp ne i32 %576, 0
  %578 = icmp slt i32 %569, 0
  %579 = select i1 %577, i1 %578, i1 false
  br i1 %579, label %582, label %607

580:                                              ; preds = %566
  %581 = icmp slt i32 %569, 0
  br i1 %581, label %582, label %607

582:                                              ; preds = %580, %574
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %1) #26
  %583 = getelementptr inbounds %struct.function, ptr %567, i64 0, i32 1
  %584 = load ptr, ptr %583, align 8, !tbaa !23
  %585 = getelementptr inbounds %struct.control_flow_graph, ptr %584, i64 0, i32 2
  %586 = load ptr, ptr %585, align 8, !tbaa !29
  %587 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %586, i64 0, i32 2, i64 2
  %588 = load ptr, ptr %587, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !182)
  %589 = getelementptr inbounds %struct.basic_block_def, ptr %588, i64 0, i32 13
  %590 = load i32, ptr %589, align 8, !tbaa !58, !noalias !182
  %591 = and i32 %590, 512
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %602

593:                                              ; preds = %582
  %594 = getelementptr inbounds %struct.basic_block_def, ptr %588, i64 0, i32 7
  %595 = load ptr, ptr %594, align 8, !tbaa !16, !noalias !182
  %596 = icmp eq ptr %595, null
  br i1 %596, label %602, label %597

597:                                              ; preds = %593
  %598 = load ptr, ptr %595, align 8, !tbaa !59, !noalias !182
  %599 = icmp eq ptr %598, null
  br i1 %599, label %602, label %600

600:                                              ; preds = %597
  %601 = load ptr, ptr %598, align 8, !tbaa !42, !noalias !182
  br label %602

602:                                              ; preds = %600, %597, %593, %582
  %603 = phi ptr [ %598, %600 ], [ null, %597 ], [ null, %593 ], [ null, %582 ]
  %604 = phi ptr [ %601, %600 ], [ null, %597 ], [ null, %593 ], [ null, %582 ]
  store ptr %604, ptr %1, align 8, !tbaa !44, !alias.scope !182
  store ptr %603, ptr %551, align 8, !tbaa !46, !alias.scope !182
  store ptr %588, ptr %552, align 8, !tbaa !49, !alias.scope !182
  %605 = call ptr @gimple_build_label(ptr noundef nonnull %564) #26
  call void @gsi_insert_before(ptr noundef nonnull %1, ptr noundef %605, i32 noundef 0) #26
  %606 = load i32, ptr %568, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %1) #26
  br label %607

607:                                              ; preds = %602, %580, %574
  %608 = phi i32 [ %606, %602 ], [ %569, %580 ], [ %569, %574 ]
  %609 = getelementptr inbounds %struct.function, ptr %567, i64 0, i32 1
  %610 = load ptr, ptr %609, align 8, !tbaa !23
  %611 = getelementptr inbounds %struct.control_flow_graph, ptr %610, i64 0, i32 6
  %612 = load ptr, ptr %611, align 8, !tbaa !33, !nonnull !66, !noundef !66
  %613 = load i32, ptr %612, align 8, !tbaa !30
  %614 = icmp ugt i32 %613, %608
  call void @llvm.assume(i1 %614)
  %615 = zext i32 %608 to i64
  %616 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %612, i64 0, i32 2, i64 %615
  %617 = load ptr, ptr %616, align 8, !tbaa !5
  %618 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  %619 = getelementptr inbounds %struct.basic_block_def, ptr %617, i64 0, i32 9
  %620 = load i32, ptr %619, align 8, !tbaa !120
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds %struct.label_record, ptr %618, i64 %621
  %623 = load ptr, ptr %622, align 8, !tbaa !151
  %624 = icmp eq ptr %623, null
  br i1 %624, label %625, label %626

625:                                              ; preds = %607
  store ptr %564, ptr %622, align 8, !tbaa !151
  br label %626

626:                                              ; preds = %625, %607
  %627 = phi ptr [ %623, %607 ], [ %564, %625 ]
  %628 = getelementptr inbounds %struct.label_record, ptr %618, i64 %621, i32 1
  store i8 1, ptr %628, align 8, !tbaa !161
  store ptr %627, ptr %563, align 8, !tbaa !180
  br label %629

629:                                              ; preds = %626, %561
  %630 = load ptr, ptr %562, align 8, !tbaa !16
  %631 = icmp eq ptr %630, null
  br i1 %631, label %638, label %561, !llvm.loop !185

632:                                              ; preds = %553
  %633 = getelementptr inbounds %struct.eh_region_d, ptr %554, i64 0, i32 5, i32 0, i32 1
  %634 = load ptr, ptr %633, align 8, !tbaa !16
  %635 = icmp eq ptr %634, null
  br i1 %635, label %638, label %636

636:                                              ; preds = %632
  %637 = call fastcc ptr @main_block_label(ptr noundef nonnull %634)
  store ptr %637, ptr %633, align 8, !tbaa !16
  br label %638

638:                                              ; preds = %629, %636, %632, %557, %553
  %639 = getelementptr inbounds %struct.eh_region_d, ptr %554, i64 0, i32 1
  %640 = load ptr, ptr %639, align 8, !tbaa !186
  %641 = icmp eq ptr %640, null
  br i1 %641, label %642, label %654

642:                                              ; preds = %638
  %643 = getelementptr inbounds %struct.eh_region_d, ptr %554, i64 0, i32 2
  %644 = load ptr, ptr %643, align 8, !tbaa !187
  %645 = icmp eq ptr %644, null
  br i1 %645, label %646, label %654

646:                                              ; preds = %642, %650
  %647 = phi ptr [ %648, %650 ], [ %554, %642 ]
  %648 = load ptr, ptr %647, align 8, !tbaa !188
  %649 = icmp eq ptr %648, null
  br i1 %649, label %656, label %650

650:                                              ; preds = %646
  %651 = getelementptr inbounds %struct.eh_region_d, ptr %648, i64 0, i32 2
  %652 = load ptr, ptr %651, align 8, !tbaa !187
  %653 = icmp eq ptr %652, null
  br i1 %653, label %646, label %654, !llvm.loop !189

654:                                              ; preds = %650, %642, %638
  %655 = phi ptr [ %640, %638 ], [ %644, %642 ], [ %652, %650 ]
  br label %553, !llvm.loop !190

656:                                              ; preds = %646
  %657 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %658

658:                                              ; preds = %656, %504, %545
  %659 = phi ptr [ %657, %656 ], [ %505, %504 ], [ %546, %545 ]
  %660 = getelementptr inbounds %struct.function, ptr %659, i64 0, i32 1
  %661 = load ptr, ptr %660, align 8, !tbaa !23
  %662 = load ptr, ptr %661, align 8, !tbaa !34
  %663 = getelementptr inbounds %struct.basic_block_def, ptr %662, i64 0, i32 6
  %664 = load ptr, ptr %663, align 8, !tbaa !36
  %665 = getelementptr inbounds %struct.control_flow_graph, ptr %661, i64 0, i32 1
  %666 = load ptr, ptr %665, align 8, !tbaa !35
  %667 = icmp eq ptr %664, %666
  br i1 %667, label %746, label %668

668:                                              ; preds = %658
  %669 = getelementptr inbounds i8, ptr %4, i64 8
  %670 = getelementptr inbounds i8, ptr %4, i64 16
  br label %671

671:                                              ; preds = %668, %737
  %672 = phi ptr [ %659, %668 ], [ %738, %737 ]
  %673 = phi ptr [ %664, %668 ], [ %740, %737 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  %674 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  %675 = getelementptr inbounds %struct.basic_block_def, ptr %673, i64 0, i32 9
  %676 = load i32, ptr %675, align 8, !tbaa !120
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds %struct.label_record, ptr %674, i64 %677
  %679 = load ptr, ptr %678, align 8, !tbaa !151
  %680 = icmp eq ptr %679, null
  br i1 %680, label %737, label %681

681:                                              ; preds = %671
  %682 = getelementptr inbounds %struct.label_record, ptr %674, i64 %677, i32 1
  %683 = load i8, ptr %682, align 8, !tbaa !161
  %684 = icmp eq i8 %683, 0
  %685 = select i1 %684, ptr null, ptr %679
  %686 = getelementptr inbounds %struct.basic_block_def, ptr %673, i64 0, i32 13
  %687 = load i32, ptr %686, align 8, !tbaa !58, !noalias !191
  %688 = and i32 %687, 512
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %690, label %737

690:                                              ; preds = %681
  %691 = getelementptr inbounds %struct.basic_block_def, ptr %673, i64 0, i32 7
  %692 = load ptr, ptr %691, align 8, !tbaa !16, !noalias !191
  %693 = icmp eq ptr %692, null
  br i1 %693, label %737, label %694

694:                                              ; preds = %690
  %695 = load ptr, ptr %692, align 8, !tbaa !59, !noalias !191
  %696 = icmp eq ptr %695, null
  br i1 %696, label %737, label %697

697:                                              ; preds = %694
  %698 = load ptr, ptr %695, align 8, !tbaa !42, !noalias !191
  store ptr %698, ptr %4, align 8, !tbaa.struct !194
  store ptr %695, ptr %669, align 8, !tbaa.struct !195
  store ptr %673, ptr %670, align 8, !tbaa.struct !196
  %699 = icmp eq ptr %698, null
  br i1 %699, label %737, label %700

700:                                              ; preds = %697, %732
  %701 = phi ptr [ %733, %732 ], [ %698, %697 ]
  %702 = load ptr, ptr %701, align 8, !tbaa !47
  %703 = load i32, ptr %702, align 8
  %704 = and i32 %703, 255
  %705 = icmp eq i32 %704, 4
  br i1 %705, label %706, label %735

706:                                              ; preds = %700
  %707 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %708 = zext i32 %707 to i64
  %709 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %708
  %710 = load i64, ptr %709, align 8, !tbaa !50
  %711 = icmp eq i64 %710, 0
  br i1 %711, label %712, label %713

712:                                              ; preds = %706
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %713

713:                                              ; preds = %706, %712
  %714 = getelementptr inbounds i8, ptr %702, i64 %710
  %715 = load ptr, ptr %714, align 8, !tbaa !5
  %716 = icmp eq ptr %715, %685
  br i1 %716, label %726, label %717

717:                                              ; preds = %713
  %718 = getelementptr inbounds %struct.tree_decl_common, ptr %715, i64 0, i32 2
  %719 = load i64, ptr %718, align 8
  %720 = and i64 %719, 4352
  %721 = icmp eq i64 %720, 4096
  br i1 %721, label %722, label %726

722:                                              ; preds = %717
  %723 = load i64, ptr %715, align 8
  %724 = and i64 %723, 65536
  %725 = icmp eq i64 %724, 0
  br i1 %725, label %730, label %726

726:                                              ; preds = %722, %717, %713
  %727 = load ptr, ptr %4, align 8, !tbaa !44
  %728 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %727, i64 0, i32 2
  %729 = load ptr, ptr %728, align 8, !tbaa !53
  store ptr %729, ptr %4, align 8, !tbaa !44
  br label %732

730:                                              ; preds = %722
  call void @gsi_remove(ptr noundef nonnull %4, i8 noundef zeroext 1) #26
  %731 = load ptr, ptr %4, align 8, !tbaa !44
  br label %732

732:                                              ; preds = %726, %730
  %733 = phi ptr [ %729, %726 ], [ %731, %730 ]
  %734 = icmp eq ptr %733, null
  br i1 %734, label %735, label %700

735:                                              ; preds = %700, %732
  %736 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %737

737:                                              ; preds = %681, %690, %694, %735, %697, %671
  %738 = phi ptr [ %736, %735 ], [ %672, %697 ], [ %672, %671 ], [ %672, %694 ], [ %672, %690 ], [ %672, %681 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  %739 = getelementptr inbounds %struct.basic_block_def, ptr %673, i64 0, i32 6
  %740 = load ptr, ptr %739, align 8, !tbaa !36
  %741 = getelementptr inbounds %struct.function, ptr %738, i64 0, i32 1
  %742 = load ptr, ptr %741, align 8, !tbaa !23
  %743 = getelementptr inbounds %struct.control_flow_graph, ptr %742, i64 0, i32 1
  %744 = load ptr, ptr %743, align 8, !tbaa !35
  %745 = icmp eq ptr %740, %744
  br i1 %745, label %746, label %671, !llvm.loop !197

746:                                              ; preds = %737, %658
  %747 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  call void @free(ptr noundef %747)
  ret void
}

declare ptr @xcalloc(i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @main_block_label(ptr noundef %0) unnamed_addr #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.tree_label_decl, ptr %0, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !16
  %6 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.diagnostic_context, ptr %6, i64 0, i32 1, i64 4
  %8 = load i32, ptr %7, align 8, !tbaa !20
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.diagnostic_context, ptr %6, i64 0, i32 1, i64 5
  %12 = load i32, ptr %11, align 4, !tbaa !20
  %13 = icmp ne i32 %12, 0
  %14 = icmp slt i32 %5, 0
  %15 = select i1 %13, i1 %14, i1 false
  br i1 %15, label %18, label %45

16:                                               ; preds = %1
  %17 = icmp slt i32 %5, 0
  br i1 %17, label %18, label %45

18:                                               ; preds = %16, %10
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %19 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !23
  %21 = getelementptr inbounds %struct.control_flow_graph, ptr %20, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !29
  %23 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %22, i64 0, i32 2, i64 2
  %24 = load ptr, ptr %23, align 8, !tbaa !5
  tail call void @llvm.experimental.noalias.scope.decl(metadata !198)
  %25 = getelementptr inbounds %struct.basic_block_def, ptr %24, i64 0, i32 13
  %26 = load i32, ptr %25, align 8, !tbaa !58, !noalias !198
  %27 = and i32 %26, 512
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %38

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.basic_block_def, ptr %24, i64 0, i32 7
  %31 = load ptr, ptr %30, align 8, !tbaa !16, !noalias !198
  %32 = icmp eq ptr %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = load ptr, ptr %31, align 8, !tbaa !59, !noalias !198
  %35 = icmp eq ptr %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = load ptr, ptr %34, align 8, !tbaa !42, !noalias !198
  br label %38

38:                                               ; preds = %36, %33, %29, %18
  %39 = phi ptr [ %34, %36 ], [ null, %33 ], [ null, %29 ], [ null, %18 ]
  %40 = phi ptr [ %37, %36 ], [ null, %33 ], [ null, %29 ], [ null, %18 ]
  store ptr %40, ptr %2, align 8, !tbaa !44, !alias.scope !198
  %41 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 1
  store ptr %39, ptr %41, align 8, !tbaa !46, !alias.scope !198
  %42 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 2
  store ptr %24, ptr %42, align 8, !tbaa !49, !alias.scope !198
  %43 = tail call ptr @gimple_build_label(ptr noundef nonnull %0) #26
  call void @gsi_insert_before(ptr noundef nonnull %2, ptr noundef %43, i32 noundef 0) #26
  %44 = load i32, ptr %4, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  br label %45

45:                                               ; preds = %38, %16, %10
  %46 = phi i32 [ %44, %38 ], [ %5, %16 ], [ %5, %10 ]
  %47 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !23
  %49 = getelementptr inbounds %struct.control_flow_graph, ptr %48, i64 0, i32 6
  %50 = load ptr, ptr %49, align 8, !tbaa !33, !nonnull !66, !noundef !66
  %51 = load i32, ptr %50, align 8, !tbaa !30
  %52 = icmp ugt i32 %51, %46
  call void @llvm.assume(i1 %52)
  %53 = zext i32 %46 to i64
  %54 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %50, i64 0, i32 2, i64 %53
  %55 = load ptr, ptr %54, align 8, !tbaa !5
  %56 = load ptr, ptr @label_for_bb, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.basic_block_def, ptr %55, i64 0, i32 9
  %58 = load i32, ptr %57, align 8, !tbaa !120
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.label_record, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8, !tbaa !151
  %62 = icmp eq ptr %61, null
  br i1 %62, label %63, label %64

63:                                               ; preds = %45
  store ptr %0, ptr %60, align 8, !tbaa !151
  br label %64

64:                                               ; preds = %63, %45
  %65 = phi ptr [ %61, %45 ], [ %0, %63 ]
  %66 = getelementptr inbounds %struct.label_record, ptr %56, i64 %59, i32 1
  store i8 1, ptr %66, align 8, !tbaa !161
  ret ptr %65
}

declare void @gsi_remove(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #13

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @group_case_labels() local_unnamed_addr #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !23
  %4 = load ptr, ptr %3, align 8, !tbaa !34
  %5 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !36
  %7 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !35
  %9 = icmp eq ptr %6, %8
  br i1 %9, label %387, label %10

10:                                               ; preds = %0, %378
  %11 = phi ptr [ %379, %378 ], [ %1, %0 ]
  %12 = phi ptr [ %381, %378 ], [ %6, %0 ]
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 13
  %14 = load i32, ptr %13, align 8, !tbaa !58, !noalias !201
  %15 = and i32 %14, 512
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %378

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 7
  %19 = load ptr, ptr %18, align 8, !tbaa !16, !noalias !201
  %20 = icmp eq ptr %19, null
  br i1 %20, label %378, label %21

21:                                               ; preds = %17
  %22 = load ptr, ptr %19, align 8, !tbaa !59, !noalias !201
  %23 = icmp eq ptr %22, null
  br i1 %23, label %378, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.gimple_seq_d, ptr %22, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !61, !noalias !201
  %27 = icmp eq ptr %26, null
  br i1 %27, label %378, label %28

28:                                               ; preds = %24, %33
  %29 = phi ptr [ %35, %33 ], [ %26, %24 ]
  %30 = load ptr, ptr %29, align 8, !tbaa !47
  %31 = load i32, ptr %30, align 8
  %32 = trunc i32 %31 to i8
  switch i8 %32, label %378 [
    i8 2, label %33
    i8 5, label %37
  ]

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %29, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !67
  %36 = icmp eq ptr %35, null
  br i1 %36, label %378, label %28, !llvm.loop !68

37:                                               ; preds = %28
  %38 = getelementptr i8, ptr %30, i64 12
  %39 = load i32, ptr %38, align 4, !tbaa !16
  %40 = icmp ugt i32 %39, 1
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %42 = load i32, ptr %38, align 4, !tbaa !16
  %43 = icmp ugt i32 %42, 1
  br i1 %43, label %45, label %44

44:                                               ; preds = %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %45

45:                                               ; preds = %37, %44, %41
  %46 = add i32 %39, -1
  %47 = load i32, ptr %30, align 8
  %48 = and i32 %47, 255
  %49 = add nsw i32 %48, -1
  %50 = icmp ult i32 %49, 9
  tail call void @llvm.assume(i1 %50)
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %54
  %56 = load i64, ptr %55, align 8, !tbaa !50
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %59

59:                                               ; preds = %58, %45
  %60 = getelementptr inbounds i8, ptr %30, i64 %56
  %61 = getelementptr inbounds ptr, ptr %60, i64 1
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  %63 = getelementptr inbounds %struct.tree_exp, ptr %62, i64 0, i32 3
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %113

66:                                               ; preds = %59
  %67 = load i32, ptr %38, align 4, !tbaa !16
  %68 = icmp ugt i32 %67, 1
  br i1 %68, label %70, label %69

69:                                               ; preds = %66
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %70

70:                                               ; preds = %69, %66
  %71 = load i32, ptr %30, align 8
  %72 = and i32 %71, 255
  %73 = add nsw i32 %72, -1
  %74 = icmp ult i32 %73, 9
  tail call void @llvm.assume(i1 %74)
  %75 = zext i32 %72 to i64
  %76 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !16
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %78
  %80 = load i64, ptr %79, align 8, !tbaa !50
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %70
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %83

83:                                               ; preds = %82, %70
  %84 = getelementptr inbounds i8, ptr %30, i64 %80
  %85 = getelementptr inbounds ptr, ptr %84, i64 1
  %86 = load ptr, ptr %85, align 8, !tbaa !5
  %87 = getelementptr inbounds %struct.tree_exp, ptr %86, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = icmp eq ptr %88, null
  br i1 %89, label %90, label %113

90:                                               ; preds = %83
  %91 = load i32, ptr %38, align 4, !tbaa !16
  %92 = icmp ugt i32 %91, 1
  br i1 %92, label %94, label %93

93:                                               ; preds = %90
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %94

94:                                               ; preds = %93, %90
  %95 = load i32, ptr %30, align 8
  %96 = and i32 %95, 255
  %97 = add nsw i32 %96, -1
  %98 = icmp ult i32 %97, 9
  tail call void @llvm.assume(i1 %98)
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %99
  %101 = load i32, ptr %100, align 4, !tbaa !16
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %102
  %104 = load i64, ptr %103, align 8, !tbaa !50
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %94
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %107

107:                                              ; preds = %106, %94
  %108 = getelementptr inbounds i8, ptr %30, i64 %104
  %109 = getelementptr inbounds ptr, ptr %108, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !5
  %111 = getelementptr inbounds %struct.tree_exp, ptr %110, i64 1, i32 0, i32 1
  %112 = load ptr, ptr %111, align 8, !tbaa !16
  br label %113

113:                                              ; preds = %59, %83, %107
  %114 = phi ptr [ %112, %107 ], [ null, %83 ], [ null, %59 ]
  %115 = phi i32 [ 1, %107 ], [ 0, %83 ], [ 0, %59 ]
  %116 = icmp slt i32 %115, %46
  br i1 %116, label %126, label %121

117:                                              ; preds = %270
  %118 = sub i32 %127, %39
  %119 = add i32 %118, 2
  %120 = add i32 %119, %128
  br label %121

121:                                              ; preds = %276, %117, %113
  %122 = phi i32 [ %46, %113 ], [ %120, %117 ], [ %277, %276 ]
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %124, label %372

124:                                              ; preds = %121
  %125 = zext i32 %122 to i64
  br label %280

126:                                              ; preds = %113, %276
  %127 = phi i32 [ %278, %276 ], [ %115, %113 ]
  %128 = phi i32 [ %277, %276 ], [ %46, %113 ]
  %129 = load i32, ptr %38, align 4, !tbaa !16
  %130 = add nsw i32 %127, 1
  %131 = icmp ugt i32 %129, %130
  br i1 %131, label %133, label %132

132:                                              ; preds = %126
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %133

133:                                              ; preds = %132, %126
  %134 = load i32, ptr %30, align 8
  %135 = and i32 %134, 255
  %136 = add nsw i32 %135, -10
  %137 = icmp ult i32 %136, -9
  br i1 %137, label %153, label %138

138:                                              ; preds = %133
  %139 = zext i32 %135 to i64
  %140 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %139
  %141 = load i32, ptr %140, align 4, !tbaa !16
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %142
  %144 = load i64, ptr %143, align 8, !tbaa !50
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %138
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %147

147:                                              ; preds = %138, %146
  %148 = getelementptr inbounds i8, ptr %30, i64 %144
  %149 = zext i32 %130 to i64
  %150 = getelementptr inbounds ptr, ptr %148, i64 %149
  %151 = load ptr, ptr %150, align 8, !tbaa !5
  %152 = icmp eq ptr %151, null
  br i1 %152, label %153, label %154

153:                                              ; preds = %133, %147
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1325, ptr noundef nonnull @.str.2) #26
  br label %154

154:                                              ; preds = %147, %153
  %155 = phi ptr [ %151, %147 ], [ null, %153 ]
  %156 = getelementptr inbounds %struct.tree_exp, ptr %155, i64 0, i32 3
  %157 = getelementptr inbounds %struct.tree_exp, ptr %155, i64 1, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !16
  %159 = icmp eq ptr %158, %114
  br i1 %159, label %160, label %190

160:                                              ; preds = %154
  %161 = load i32, ptr %38, align 4, !tbaa !16
  %162 = icmp ugt i32 %161, %130
  br i1 %162, label %164, label %163

163:                                              ; preds = %160
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3225, ptr noundef nonnull @.str.2) #26
  br label %164

164:                                              ; preds = %163, %160
  %165 = load i32, ptr %30, align 8
  %166 = and i32 %165, 255
  %167 = add nsw i32 %166, -10
  %168 = icmp ult i32 %167, -9
  br i1 %168, label %172, label %169

169:                                              ; preds = %164
  %170 = load i32, ptr %38, align 4, !tbaa !16
  %171 = icmp ugt i32 %170, %130
  br i1 %171, label %175, label %172

172:                                              ; preds = %169, %164
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %173 = load i32, ptr %30, align 8
  %174 = and i32 %173, 255
  br label %175

175:                                              ; preds = %172, %169
  %176 = phi i32 [ %166, %169 ], [ %174, %172 ]
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %177
  %179 = load i32, ptr %178, align 4, !tbaa !16
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %180
  %182 = load i64, ptr %181, align 8, !tbaa !50
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %175
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %185

185:                                              ; preds = %175, %184
  %186 = getelementptr inbounds i8, ptr %30, i64 %182
  %187 = zext i32 %130 to i64
  %188 = getelementptr inbounds ptr, ptr %186, i64 %187
  store ptr null, ptr %188, align 8, !tbaa !5
  %189 = add nsw i32 %128, -1
  br label %276, !llvm.loop !204

190:                                              ; preds = %154
  %191 = getelementptr inbounds %struct.tree_exp, ptr %155, i64 1
  %192 = load ptr, ptr %191, align 8, !tbaa !16
  %193 = icmp eq ptr %192, null
  br i1 %193, label %194, label %196

194:                                              ; preds = %190
  %195 = load ptr, ptr %156, align 8, !tbaa !16
  br label %196

196:                                              ; preds = %190, %194
  %197 = phi ptr [ %195, %194 ], [ %192, %190 ]
  %198 = icmp slt i32 %130, %46
  br i1 %198, label %199, label %276

199:                                              ; preds = %196, %270
  %200 = phi i32 [ %204, %270 ], [ %130, %196 ]
  %201 = phi ptr [ %245, %270 ], [ %197, %196 ]
  %202 = phi i32 [ %274, %270 ], [ %128, %196 ]
  %203 = load i32, ptr %38, align 4, !tbaa !16
  %204 = add nsw i32 %200, 1
  %205 = icmp ugt i32 %203, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %199
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %207

207:                                              ; preds = %206, %199
  %208 = load i32, ptr %30, align 8
  %209 = and i32 %208, 255
  %210 = add nsw i32 %209, -10
  %211 = icmp ult i32 %210, -9
  br i1 %211, label %226, label %212

212:                                              ; preds = %207
  %213 = zext i32 %209 to i64
  %214 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %213
  %215 = load i32, ptr %214, align 4, !tbaa !16
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %216
  %218 = load i64, ptr %217, align 8, !tbaa !50
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %212
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %221

221:                                              ; preds = %220, %212
  %222 = getelementptr inbounds i8, ptr %30, i64 %218
  %223 = zext i32 %204 to i64
  %224 = getelementptr inbounds ptr, ptr %222, i64 %223
  %225 = load ptr, ptr %224, align 8, !tbaa !5
  br label %226

226:                                              ; preds = %207, %221
  %227 = phi ptr [ %225, %221 ], [ null, %207 ]
  %228 = getelementptr inbounds %struct.tree_exp, ptr %227, i64 0, i32 3
  %229 = getelementptr inbounds %struct.tree_exp, ptr %227, i64 1, i32 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !16
  %231 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !5
  %232 = tail call ptr @int_const_binop(i32 noundef 63, ptr noundef %201, ptr noundef %231, i32 noundef 1) #26
  %233 = icmp eq ptr %230, %158
  br i1 %233, label %234, label %276

234:                                              ; preds = %226
  %235 = load ptr, ptr %228, align 8, !tbaa !16
  %236 = tail call i32 @tree_int_cst_equal(ptr noundef %235, ptr noundef %232) #26
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %276, label %238

238:                                              ; preds = %234
  %239 = getelementptr inbounds %struct.tree_exp, ptr %227, i64 1
  %240 = load ptr, ptr %239, align 8, !tbaa !16
  %241 = icmp eq ptr %240, null
  br i1 %241, label %242, label %244

242:                                              ; preds = %238
  %243 = load ptr, ptr %228, align 8, !tbaa !16
  br label %244

244:                                              ; preds = %238, %242
  %245 = phi ptr [ %243, %242 ], [ %240, %238 ]
  store ptr %245, ptr %191, align 8, !tbaa !16
  %246 = load i32, ptr %38, align 4, !tbaa !16
  %247 = icmp ugt i32 %246, %204
  br i1 %247, label %249, label %248

248:                                              ; preds = %244
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3225, ptr noundef nonnull @.str.2) #26
  br label %249

249:                                              ; preds = %248, %244
  %250 = load i32, ptr %30, align 8
  %251 = and i32 %250, 255
  %252 = add nsw i32 %251, -10
  %253 = icmp ult i32 %252, -9
  br i1 %253, label %257, label %254

254:                                              ; preds = %249
  %255 = load i32, ptr %38, align 4, !tbaa !16
  %256 = icmp ugt i32 %255, %204
  br i1 %256, label %260, label %257

257:                                              ; preds = %254, %249
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %258 = load i32, ptr %30, align 8
  %259 = and i32 %258, 255
  br label %260

260:                                              ; preds = %257, %254
  %261 = phi i32 [ %251, %254 ], [ %259, %257 ]
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %262
  %264 = load i32, ptr %263, align 4, !tbaa !16
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %265
  %267 = load i64, ptr %266, align 8, !tbaa !50
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %260
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %270

270:                                              ; preds = %269, %260
  %271 = getelementptr inbounds i8, ptr %30, i64 %267
  %272 = zext i32 %204 to i64
  %273 = getelementptr inbounds ptr, ptr %271, i64 %272
  store ptr null, ptr %273, align 8, !tbaa !5
  %274 = add nsw i32 %202, -1
  %275 = icmp eq i32 %204, %46
  br i1 %275, label %117, label %199

276:                                              ; preds = %234, %226, %196, %185
  %277 = phi i32 [ %189, %185 ], [ %128, %196 ], [ %202, %226 ], [ %202, %234 ]
  %278 = phi i32 [ %130, %185 ], [ %130, %196 ], [ %200, %226 ], [ %200, %234 ]
  %279 = icmp slt i32 %278, %46
  br i1 %279, label %126, label %121

280:                                              ; preds = %124, %368
  %281 = phi i64 [ 0, %124 ], [ %335, %368 ]
  %282 = phi i32 [ 0, %124 ], [ %286, %368 ]
  br label %283

283:                                              ; preds = %294, %280
  %284 = phi i32 [ %282, %280 ], [ %286, %294 ]
  %285 = load i32, ptr %38, align 4, !tbaa !16
  %286 = add i32 %284, 1
  %287 = icmp ugt i32 %285, %286
  br i1 %287, label %289, label %288

288:                                              ; preds = %283
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %289

289:                                              ; preds = %288, %283
  %290 = load i32, ptr %30, align 8
  %291 = and i32 %290, 255
  %292 = add nsw i32 %291, -10
  %293 = icmp ult i32 %292, -9
  br i1 %293, label %294, label %295

294:                                              ; preds = %289, %304
  br label %283, !llvm.loop !205

295:                                              ; preds = %289
  %296 = zext i32 %291 to i64
  %297 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %296
  %298 = load i32, ptr %297, align 4, !tbaa !16
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %299
  %301 = load i64, ptr %300, align 8, !tbaa !50
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %304

303:                                              ; preds = %295
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %304

304:                                              ; preds = %295, %303
  %305 = getelementptr inbounds i8, ptr %30, i64 %301
  %306 = zext i32 %286 to i64
  %307 = getelementptr inbounds ptr, ptr %305, i64 %306
  %308 = load ptr, ptr %307, align 8, !tbaa !5
  %309 = icmp eq ptr %308, null
  br i1 %309, label %294, label %310

310:                                              ; preds = %304
  %311 = load i32, ptr %38, align 4, !tbaa !16
  %312 = icmp ugt i32 %311, %286
  br i1 %312, label %314, label %313

313:                                              ; preds = %310
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %314

314:                                              ; preds = %313, %310
  %315 = load i32, ptr %30, align 8
  %316 = and i32 %315, 255
  %317 = add nsw i32 %316, -10
  %318 = icmp ult i32 %317, -9
  br i1 %318, label %332, label %319

319:                                              ; preds = %314
  %320 = zext i32 %316 to i64
  %321 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %320
  %322 = load i32, ptr %321, align 4, !tbaa !16
  %323 = zext i32 %322 to i64
  %324 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %323
  %325 = load i64, ptr %324, align 8, !tbaa !50
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %328

327:                                              ; preds = %319
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %328

328:                                              ; preds = %327, %319
  %329 = getelementptr inbounds i8, ptr %30, i64 %325
  %330 = getelementptr inbounds ptr, ptr %329, i64 %306
  %331 = load ptr, ptr %330, align 8, !tbaa !5
  br label %332

332:                                              ; preds = %314, %328
  %333 = phi ptr [ %331, %328 ], [ null, %314 ]
  %334 = load i32, ptr %38, align 4, !tbaa !16
  %335 = add nuw nsw i64 %281, 1
  %336 = zext i32 %334 to i64
  %337 = icmp ult i64 %335, %336
  br i1 %337, label %339, label %338

338:                                              ; preds = %332
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3225, ptr noundef nonnull @.str.2) #26
  br label %339

339:                                              ; preds = %338, %332
  %340 = icmp eq ptr %333, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %339
  %342 = load i64, ptr %333, align 8
  %343 = and i64 %342, 65535
  %344 = icmp eq i64 %343, 139
  br i1 %344, label %346, label %345

345:                                              ; preds = %341
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3226, ptr noundef nonnull @.str.2) #26
  br label %346

346:                                              ; preds = %345, %341, %339
  %347 = load i32, ptr %30, align 8
  %348 = and i32 %347, 255
  %349 = add nsw i32 %348, -10
  %350 = icmp ult i32 %349, -9
  br i1 %350, label %355, label %351

351:                                              ; preds = %346
  %352 = load i32, ptr %38, align 4, !tbaa !16
  %353 = zext i32 %352 to i64
  %354 = icmp ult i64 %335, %353
  br i1 %354, label %358, label %355

355:                                              ; preds = %351, %346
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %356 = load i32, ptr %30, align 8
  %357 = and i32 %356, 255
  br label %358

358:                                              ; preds = %355, %351
  %359 = phi i32 [ %348, %351 ], [ %357, %355 ]
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %360
  %362 = load i32, ptr %361, align 4, !tbaa !16
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %363
  %365 = load i64, ptr %364, align 8, !tbaa !50
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %367, label %368

367:                                              ; preds = %358
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %368

368:                                              ; preds = %358, %367
  %369 = getelementptr inbounds i8, ptr %30, i64 %365
  %370 = getelementptr inbounds ptr, ptr %369, i64 %335
  store ptr %333, ptr %370, align 8, !tbaa !5
  %371 = icmp eq i64 %335, %125
  br i1 %371, label %372, label %280, !llvm.loop !206

372:                                              ; preds = %368, %121
  %373 = icmp sgt i32 %122, %46
  br i1 %373, label %374, label %375

374:                                              ; preds = %372
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1380, ptr noundef nonnull @.str.2) #26
  br label %375

375:                                              ; preds = %372, %374
  %376 = add i32 %122, 1
  store i32 %376, ptr %38, align 4, !tbaa !16
  %377 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %378

378:                                              ; preds = %33, %28, %10, %17, %21, %24, %375
  %379 = phi ptr [ %11, %10 ], [ %11, %17 ], [ %11, %21 ], [ %11, %24 ], [ %377, %375 ], [ %11, %28 ], [ %11, %33 ]
  %380 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 6
  %381 = load ptr, ptr %380, align 8, !tbaa !36
  %382 = getelementptr inbounds %struct.function, ptr %379, i64 0, i32 1
  %383 = load ptr, ptr %382, align 8, !tbaa !23
  %384 = getelementptr inbounds %struct.control_flow_graph, ptr %383, i64 0, i32 1
  %385 = load ptr, ptr %384, align 8, !tbaa !35
  %386 = icmp eq ptr %381, %385
  br i1 %386, label %387, label %10, !llvm.loop !207

387:                                              ; preds = %378, %0
  ret void
}

declare ptr @int_const_binop(i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @has_zero_uses_1(ptr noundef readonly %0) local_unnamed_addr #10 {
  br label %2

2:                                                ; preds = %7, %1
  %3 = phi ptr [ %0, %1 ], [ %5, %7 ]
  %4 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !208
  %6 = icmp eq ptr %5, %0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %5, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 255
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %2, label %13, !llvm.loop !210

13:                                               ; preds = %2, %7
  %14 = phi i8 [ 0, %7 ], [ 1, %2 ]
  ret i8 %14
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @single_imm_use_1(ptr noundef readonly %0, ptr noundef writeonly %1, ptr noundef writeonly %2) local_unnamed_addr #14 {
  %4 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !208
  %6 = icmp eq ptr %5, %0
  br i1 %6, label %22, label %7

7:                                                ; preds = %3, %17
  %8 = phi ptr [ %20, %17 ], [ %5, %3 ]
  %9 = phi ptr [ %18, %17 ], [ null, %3 ]
  %10 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %8, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 255
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %17, label %15

15:                                               ; preds = %7
  %16 = icmp eq ptr %9, null
  br i1 %16, label %17, label %22

17:                                               ; preds = %15, %7
  %18 = phi ptr [ %9, %7 ], [ %8, %15 ]
  %19 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %8, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !208
  %21 = icmp eq ptr %20, %0
  br i1 %21, label %22, label %7, !llvm.loop !211

22:                                               ; preds = %17, %15, %3
  %23 = phi ptr [ null, %3 ], [ null, %15 ], [ %18, %17 ]
  %24 = icmp eq ptr %1, null
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  store ptr %23, ptr %1, align 8, !tbaa !5
  br label %26

26:                                               ; preds = %25, %22
  %27 = icmp eq ptr %2, null
  br i1 %27, label %35, label %28

28:                                               ; preds = %26
  %29 = icmp eq ptr %23, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %23, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  br label %33

33:                                               ; preds = %28, %30
  %34 = phi ptr [ %32, %30 ], [ null, %28 ]
  store ptr %34, ptr %2, align 8, !tbaa !5
  br label %35

35:                                               ; preds = %33, %26
  %36 = icmp ne ptr %23, null
  %37 = zext i1 %36 to i8
  ret i8 %37
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @replace_uses_by(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.immediate_use_iterator_d, align 8
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %3) #26
  %4 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5
  %5 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %3, i64 0, i32 1
  store ptr %4, ptr %5, align 8, !tbaa !212
  %6 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 5, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !208
  store ptr %7, ptr %3, align 8, !tbaa !214
  %8 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %3, i64 0, i32 2
  %9 = icmp eq ptr %7, %4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %8, i8 0, i64 40, i1 false)
  br i1 %9, label %135, label %10

10:                                               ; preds = %2
  call fastcc void @link_use_stmts_after(ptr noundef %7, ptr noundef nonnull %3)
  %11 = load ptr, ptr %3, align 8, !tbaa !214
  %12 = load ptr, ptr %5, align 8, !tbaa !212
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %135, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %3, i64 0, i32 3
  %16 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %3, i64 0, i32 2, i32 1
  br label %17

17:                                               ; preds = %14, %131
  %18 = phi ptr [ %11, %14 ], [ %132, %131 ]
  %19 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %18, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !208
  store ptr %22, ptr %15, align 8, !tbaa !215
  %23 = icmp eq ptr %18, %8
  br i1 %23, label %66, label %24

24:                                               ; preds = %17
  %25 = getelementptr i8, ptr %20, i64 16
  br label %26

26:                                               ; preds = %63, %24
  %27 = phi ptr [ %18, %24 ], [ %61, %63 ]
  call void @replace_exp(ptr noundef nonnull %27, ptr noundef %1) #26
  %28 = load i32, ptr %20, align 8
  %29 = and i32 %28, 255
  %30 = icmp eq i32 %29, 16
  br i1 %30, label %31, label %60

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %27, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = load i32, ptr %33, align 8
  %35 = and i32 %34, 255
  %36 = icmp eq i32 %35, 16
  br i1 %36, label %38, label %37

37:                                               ; preds = %31
  call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 544, ptr noundef nonnull @.str.2) #26
  br label %38

38:                                               ; preds = %31, %37
  %39 = getelementptr inbounds %struct.gimple_statement_phi, ptr %33, i64 0, i32 4, i64 0
  %40 = ptrtoint ptr %27 to i64
  %41 = ptrtoint ptr %39 to i64
  %42 = sub i64 %40, %41
  %43 = sdiv exact i64 %42, 48
  %44 = and i64 %43, 4294967295
  %45 = load ptr, ptr %25, align 8, !tbaa !16
  %46 = load ptr, ptr %45, align 8, !tbaa !216
  %47 = getelementptr inbounds %struct.VEC_edge_base, ptr %46, i64 0, i32 2, i64 %44
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.edge_def, ptr %48, i64 0, i32 7
  %50 = load i32, ptr %49, align 8, !tbaa !108
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %60, label %53

53:                                               ; preds = %38
  %54 = call zeroext i8 @is_gimple_reg(ptr noundef %0) #26
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %53
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1518, ptr noundef nonnull @.str.2) #26
  br label %57

57:                                               ; preds = %53, %56
  %58 = load i64, ptr %1, align 8
  %59 = or i64 %58, 4194304
  store i64 %59, ptr %1, align 8
  br label %60

60:                                               ; preds = %26, %57, %38
  %61 = load ptr, ptr %15, align 8, !tbaa !215
  store ptr %61, ptr %3, align 8, !tbaa !214
  %62 = icmp eq ptr %61, %8
  br i1 %62, label %66, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %61, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !208
  store ptr %65, ptr %15, align 8, !tbaa !215
  br label %26

66:                                               ; preds = %60, %17
  %67 = load i32, ptr %20, align 8
  %68 = and i32 %67, 255
  %69 = icmp eq i32 %68, 16
  br i1 %69, label %121, label %70

70:                                               ; preds = %66
  %71 = call zeroext i8 @fold_stmt_inplace(ptr noundef nonnull %20) #26
  %72 = load ptr, ptr @cfgcleanup_altered_bbs, align 8, !tbaa !5
  %73 = icmp eq ptr %72, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %70
  %75 = getelementptr i8, ptr %20, i64 16
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = getelementptr inbounds %struct.basic_block_def, ptr %76, i64 0, i32 9
  %78 = load i32, ptr %77, align 8, !tbaa !120
  %79 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %72, i32 noundef %78) #26
  br label %80

80:                                               ; preds = %74, %70
  %81 = getelementptr i8, ptr %20, i64 12
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %114, label %84

84:                                               ; preds = %80, %109
  %85 = phi i64 [ %110, %109 ], [ 0, %80 ]
  %86 = load i32, ptr %20, align 8
  %87 = and i32 %86, 255
  %88 = add nsw i32 %87, -10
  %89 = icmp ult i32 %88, -9
  br i1 %89, label %109, label %90

90:                                               ; preds = %84
  %91 = zext i32 %87 to i64
  %92 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !16
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %94
  %96 = load i64, ptr %95, align 8, !tbaa !50
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %90
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %99

99:                                               ; preds = %90, %98
  %100 = getelementptr inbounds i8, ptr %20, i64 %96
  %101 = getelementptr inbounds ptr, ptr %100, i64 %85
  %102 = load ptr, ptr %101, align 8, !tbaa !5
  %103 = icmp eq ptr %102, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %99
  %105 = load i64, ptr %102, align 8
  %106 = and i64 %105, 65535
  %107 = icmp eq i64 %106, 121
  br i1 %107, label %108, label %109

108:                                              ; preds = %104
  call void @recompute_tree_invariant_for_addr_expr(ptr noundef nonnull %102) #26
  br label %109

109:                                              ; preds = %84, %108, %104, %99
  %110 = add nuw nsw i64 %85, 1
  %111 = load i32, ptr %81, align 4, !tbaa !16
  %112 = zext i32 %111 to i64
  %113 = icmp ult i64 %110, %112
  br i1 %113, label %84, label %114, !llvm.loop !217

114:                                              ; preds = %109, %80
  %115 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(ptr noundef nonnull %20, ptr noundef nonnull %20) #26
  %116 = load i32, ptr %20, align 8
  %117 = and i32 %116, 255
  %118 = add nsw i32 %117, -10
  %119 = icmp ult i32 %118, -9
  br i1 %119, label %121, label %120

120:                                              ; preds = %114
  call void @gimple_set_modified(ptr noundef nonnull %20, i8 noundef zeroext 1) #26
  call void @update_stmt_operands(ptr noundef nonnull %20) #26
  br label %121

121:                                              ; preds = %120, %114, %66
  %122 = load ptr, ptr %16, align 8, !tbaa !208
  store ptr %122, ptr %3, align 8, !tbaa !214
  %123 = load ptr, ptr %5, align 8, !tbaa !212
  %124 = icmp eq ptr %122, %123
  br i1 %124, label %125, label %131

125:                                              ; preds = %121
  %126 = load ptr, ptr %8, align 8, !tbaa !218
  %127 = icmp eq ptr %126, null
  br i1 %127, label %135, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %126, i64 0, i32 1
  store ptr %122, ptr %129, align 8, !tbaa !208
  %130 = load ptr, ptr %16, align 8, !tbaa !208
  store ptr %126, ptr %130, align 8, !tbaa !218
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  br label %135

131:                                              ; preds = %121
  call fastcc void @link_use_stmts_after(ptr noundef %122, ptr noundef nonnull %3)
  %132 = load ptr, ptr %3, align 8, !tbaa !214
  %133 = load ptr, ptr %5, align 8, !tbaa !212
  %134 = icmp eq ptr %132, %133
  br i1 %134, label %135, label %17, !llvm.loop !219

135:                                              ; preds = %131, %125, %128, %2, %10
  %136 = load ptr, ptr %6, align 8, !tbaa !208
  %137 = icmp eq ptr %4, %136
  br i1 %137, label %153, label %138

138:                                              ; preds = %135
  %139 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %152, label %141

141:                                              ; preds = %138, %146
  %142 = phi ptr [ %144, %146 ], [ %4, %138 ]
  %143 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %142, i64 0, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !208
  %145 = icmp eq ptr %144, %4
  br i1 %145, label %153, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %144, i64 0, i32 2
  %148 = load ptr, ptr %147, align 8, !tbaa !16
  %149 = load i32, ptr %148, align 8
  %150 = and i32 %149, 255
  %151 = icmp eq i32 %150, 2
  br i1 %151, label %141, label %152, !llvm.loop !210

152:                                              ; preds = %146, %138
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1548, ptr noundef nonnull @.str.2) #26
  br label %153

153:                                              ; preds = %141, %135, %152
  %154 = load ptr, ptr @cfun, align 8, !tbaa !5
  %155 = getelementptr inbounds %struct.function, ptr %154, i64 0, i32 4
  %156 = load ptr, ptr %155, align 8, !tbaa !220
  %157 = icmp eq ptr %156, null
  br i1 %157, label %255, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %struct.loops, ptr %156, i64 0, i32 1
  %160 = load ptr, ptr %159, align 8, !tbaa !221
  %161 = icmp eq ptr %160, null
  br i1 %161, label %164, label %162

162:                                              ; preds = %158
  %163 = load i32, ptr %160, align 8, !tbaa !223
  br label %164

164:                                              ; preds = %162, %158
  %165 = phi i32 [ %163, %162 ], [ 0, %158 ]
  %166 = call ptr @vec_heap_o_reserve_exact(ptr noundef null, i32 noundef %165, i64 noundef 8, i64 noundef 4) #26
  %167 = load ptr, ptr @cfun, align 8, !tbaa !5
  %168 = getelementptr inbounds %struct.function, ptr %167, i64 0, i32 4
  %169 = load ptr, ptr %168, align 8, !tbaa !220
  %170 = getelementptr inbounds %struct.loops, ptr %169, i64 0, i32 3
  %171 = load ptr, ptr %170, align 8, !tbaa !225
  br label %172

172:                                              ; preds = %185, %164
  %173 = phi ptr [ %171, %164 ], [ %186, %185 ]
  %174 = load i32, ptr %173, align 8, !tbaa !226
  %175 = icmp sgt i32 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %172
  %177 = load i32, ptr %166, align 4, !tbaa !230
  %178 = add i32 %177, 1
  store i32 %178, ptr %166, align 4, !tbaa !230
  %179 = zext i32 %177 to i64
  %180 = getelementptr inbounds %struct.VEC_int_base, ptr %166, i64 0, i32 2, i64 %179
  store i32 %174, ptr %180, align 4, !tbaa !20
  br label %181

181:                                              ; preds = %176, %172
  %182 = getelementptr inbounds %struct.loop, ptr %173, i64 0, i32 8
  %183 = load ptr, ptr %182, align 8, !tbaa !232
  %184 = icmp eq ptr %183, null
  br i1 %184, label %187, label %185

185:                                              ; preds = %187, %181
  %186 = phi ptr [ %183, %181 ], [ %190, %187 ]
  br label %172

187:                                              ; preds = %181, %199
  %188 = phi ptr [ %203, %199 ], [ %173, %181 ]
  %189 = getelementptr inbounds %struct.loop, ptr %188, i64 0, i32 9
  %190 = load ptr, ptr %189, align 8, !tbaa !233
  %191 = icmp eq ptr %190, null
  br i1 %191, label %192, label %185

192:                                              ; preds = %187
  %193 = getelementptr i8, ptr %188, i64 40
  %194 = load ptr, ptr %193, align 8, !tbaa !234
  %195 = icmp eq ptr %194, null
  br i1 %195, label %205, label %196

196:                                              ; preds = %192
  %197 = load i32, ptr %194, align 8, !tbaa !223
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %205, label %199

199:                                              ; preds = %196
  %200 = add i32 %197, -1
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %194, i64 0, i32 2, i64 %201
  %203 = load ptr, ptr %202, align 8, !tbaa !5
  %204 = icmp eq ptr %203, null
  br i1 %204, label %205, label %187, !llvm.loop !235

205:                                              ; preds = %199, %196, %192
  %206 = icmp eq ptr %166, null
  %207 = getelementptr inbounds %struct.loops, ptr %169, i64 0, i32 1
  br i1 %206, label %255, label %208

208:                                              ; preds = %205
  %209 = load i32, ptr %166, align 4, !tbaa !230
  %210 = zext i32 %209 to i64
  %211 = icmp eq i32 %209, 0
  br i1 %211, label %254, label %212

212:                                              ; preds = %208
  %213 = load ptr, ptr %207, align 8, !tbaa !221
  br label %216

214:                                              ; preds = %216
  %215 = icmp eq i64 %220, %210
  br i1 %215, label %254, label %216, !llvm.loop !236

216:                                              ; preds = %212, %214
  %217 = phi i64 [ 0, %212 ], [ %220, %214 ]
  %218 = getelementptr inbounds %struct.VEC_int_base, ptr %166, i64 0, i32 2, i64 %217
  %219 = load i32, ptr %218, align 4, !tbaa !20
  %220 = add nuw nsw i64 %217, 1
  %221 = zext i32 %219 to i64
  %222 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %213, i64 0, i32 2, i64 %221
  %223 = load ptr, ptr %222, align 8, !tbaa !5
  %224 = icmp eq ptr %223, null
  br i1 %224, label %214, label %225, !llvm.loop !236

225:                                              ; preds = %216
  %226 = trunc i64 %220 to i32
  call void @substitute_in_loop_info(ptr noundef nonnull %223, ptr noundef %0, ptr noundef %1) #26
  %227 = load i32, ptr %166, align 4, !tbaa !230
  %228 = icmp ugt i32 %227, %226
  br i1 %228, label %229, label %254

229:                                              ; preds = %225, %250
  %230 = phi i32 [ %252, %250 ], [ %227, %225 ]
  %231 = phi i64 [ %245, %250 ], [ %220, %225 ]
  %232 = zext i32 %230 to i64
  %233 = load ptr, ptr @cfun, align 8
  %234 = getelementptr inbounds %struct.function, ptr %233, i64 0, i32 4
  %235 = and i64 %231, 4294967295
  %236 = load ptr, ptr %234, align 8, !tbaa !220
  %237 = getelementptr inbounds %struct.loops, ptr %236, i64 0, i32 1
  %238 = load ptr, ptr %237, align 8, !tbaa !221
  br label %241

239:                                              ; preds = %241
  %240 = icmp eq i64 %245, %232
  br i1 %240, label %254, label %241, !llvm.loop !236

241:                                              ; preds = %229, %239
  %242 = phi i64 [ %235, %229 ], [ %245, %239 ]
  %243 = getelementptr inbounds %struct.VEC_int_base, ptr %166, i64 0, i32 2, i64 %242
  %244 = load i32, ptr %243, align 4, !tbaa !20
  %245 = add nuw nsw i64 %242, 1
  %246 = zext i32 %244 to i64
  %247 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %238, i64 0, i32 2, i64 %246
  %248 = load ptr, ptr %247, align 8, !tbaa !5
  %249 = icmp eq ptr %248, null
  br i1 %249, label %239, label %250, !llvm.loop !236

250:                                              ; preds = %241
  %251 = trunc i64 %245 to i32
  call void @substitute_in_loop_info(ptr noundef nonnull %248, ptr noundef %0, ptr noundef %1) #26
  %252 = load i32, ptr %166, align 4, !tbaa !230
  %253 = icmp ugt i32 %252, %251
  br i1 %253, label %229, label %254, !llvm.loop !237

254:                                              ; preds = %214, %250, %239, %225, %208
  call void @free(ptr noundef nonnull %166)
  br label %255

255:                                              ; preds = %254, %205, %153
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %3) #26
  ret void
}

declare void @replace_exp(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_reg(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @fold_stmt_inplace(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_set_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @recompute_tree_invariant_for_addr_expr(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @maybe_clean_or_replace_eh_stmt(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @substitute_in_loop_info(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @single_noncomplex_succ(ptr noundef readonly %0) local_unnamed_addr #15 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !105
  %4 = icmp eq ptr %3, null
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = load i32, ptr %3, align 8, !tbaa !106
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %8, label %26

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.VEC_edge_base, ptr %3, i64 0, i32 2, i64 0
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.VEC_edge_base, ptr %3, i64 0, i32 2, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.edge_def, ptr %10, i64 0, i32 7
  %14 = load i32, ptr %13, align 8, !tbaa !108
  %15 = and i32 %14, 14
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.edge_def, ptr %12, i64 0, i32 7
  %19 = load i32, ptr %18, align 8, !tbaa !108
  %20 = and i32 %19, 14
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %17, %8
  %23 = phi ptr [ %12, %8 ], [ %10, %17 ]
  %24 = getelementptr inbounds %struct.edge_def, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !109
  br label %26

26:                                               ; preds = %22, %1, %17, %5
  %27 = phi ptr [ %0, %5 ], [ %0, %17 ], [ %0, %1 ], [ %25, %22 ]
  ret ptr %27
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @notice_special_calls(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call i32 @gimple_call_flags(ptr noundef %0) #26
  %3 = and i32 %2, 32
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @cfun, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.function, ptr %6, i64 0, i32 20
  %8 = load i32, ptr %7, align 8
  %9 = or i32 %8, 524288
  store i32 %9, ptr %7, align 8
  br label %10

10:                                               ; preds = %5, %1
  %11 = and i32 %2, 128
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %10
  %14 = load ptr, ptr @cfun, align 8, !tbaa !5
  %15 = getelementptr inbounds %struct.function, ptr %14, i64 0, i32 20
  %16 = load i32, ptr %15, align 8
  %17 = or i32 %16, 262144
  store i32 %17, ptr %15, align 8
  br label %18

18:                                               ; preds = %13, %10
  ret void
}

declare i32 @gimple_call_flags(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @clear_special_calls() local_unnamed_addr #16 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 20
  %3 = load i32, ptr %2, align 8
  %4 = and i32 %3, -786433
  store i32 %4, ptr %2, align 8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @find_taken_edge(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %6 = load i32, ptr %5, align 8, !tbaa !58, !noalias !238
  %7 = and i32 %6, 512
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %32

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !16, !noalias !238
  %12 = icmp eq ptr %11, null
  br i1 %12, label %32, label %13

13:                                               ; preds = %9
  %14 = load ptr, ptr %11, align 8, !tbaa !59, !noalias !238
  %15 = icmp eq ptr %14, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.gimple_seq_d, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !61, !noalias !238
  %19 = icmp eq ptr %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %16, %26
  %21 = phi ptr [ %28, %26 ], [ %18, %16 ]
  %22 = load ptr, ptr %21, align 8, !tbaa !47
  %23 = load i32, ptr %22, align 8
  %24 = and i32 %23, 255
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %26, label %30

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %21, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !67
  %29 = icmp eq ptr %28, null
  br i1 %29, label %32, label %20, !llvm.loop !68

30:                                               ; preds = %20
  %31 = trunc i32 %23 to i8
  switch i8 %31, label %33 [
    i8 1, label %34
    i8 5, label %34
    i8 3, label %34
    i8 9, label %34
    i8 14, label %34
  ]

32:                                               ; preds = %26, %16, %13, %9, %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1839, ptr noundef nonnull @.str.2) #26
  unreachable

33:                                               ; preds = %30
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1840, ptr noundef nonnull @.str.2) #26
  br label %34

34:                                               ; preds = %30, %30, %30, %30, %30, %33
  %35 = icmp eq ptr %1, null
  br i1 %35, label %319, label %36

36:                                               ; preds = %34
  %37 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %1) #26
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %319, label %39

39:                                               ; preds = %36
  %40 = load i32, ptr %22, align 8
  %41 = trunc i32 %40 to i8
  switch i8 %41, label %318 [
    i8 1, label %42
    i8 5, label %63
    i8 3, label %234
  ]

42:                                               ; preds = %39
  %43 = getelementptr i8, ptr %0, i64 8
  %44 = load ptr, ptr %43, align 8, !tbaa !105
  %45 = getelementptr i8, ptr %44, i64 8
  %46 = load ptr, ptr %45, align 8, !tbaa !5
  %47 = getelementptr i8, ptr %44, i64 16
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.edge_def, ptr %46, i64 0, i32 7
  %50 = load i32, ptr %49, align 8, !tbaa !108
  %51 = load i64, ptr %1, align 8
  %52 = and i64 %51, 65535
  %53 = icmp eq i64 %52, 23
  br i1 %53, label %55, label %54

54:                                               ; preds = %42
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1905, ptr noundef nonnull @.str.2) #26
  br label %55

55:                                               ; preds = %42, %54
  %56 = and i32 %50, 1024
  %57 = icmp eq i32 %56, 0
  %58 = select i1 %57, ptr %46, ptr %48
  %59 = select i1 %57, ptr %48, ptr %46
  %60 = tail call i32 @integer_zerop(ptr noundef nonnull %1) #26
  %61 = icmp eq i32 %60, 0
  %62 = select i1 %61, ptr %59, ptr %58
  br label %319

63:                                               ; preds = %39
  %64 = load i32, ptr %5, align 8, !tbaa !58, !noalias !241
  %65 = and i32 %64, 512
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %87

67:                                               ; preds = %63
  %68 = load ptr, ptr %10, align 8, !tbaa !16, !noalias !241
  %69 = icmp eq ptr %68, null
  br i1 %69, label %87, label %70

70:                                               ; preds = %67
  %71 = load ptr, ptr %68, align 8, !tbaa !59, !noalias !241
  %72 = icmp eq ptr %71, null
  br i1 %72, label %87, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %struct.gimple_seq_d, ptr %71, i64 0, i32 1
  %75 = load ptr, ptr %74, align 8, !tbaa !61, !noalias !241
  %76 = icmp eq ptr %75, null
  br i1 %76, label %87, label %77

77:                                               ; preds = %73, %83
  %78 = phi ptr [ %85, %83 ], [ %75, %73 ]
  %79 = load ptr, ptr %78, align 8, !tbaa !47
  %80 = load i32, ptr %79, align 8
  %81 = and i32 %80, 255
  %82 = icmp eq i32 %81, 2
  br i1 %82, label %83, label %87

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %78, i64 0, i32 1
  %85 = load ptr, ptr %84, align 8, !tbaa !67
  %86 = icmp eq ptr %85, null
  br i1 %86, label %87, label %77, !llvm.loop !68

87:                                               ; preds = %83, %77, %73, %70, %67, %63
  %88 = phi ptr [ null, %73 ], [ null, %70 ], [ null, %67 ], [ null, %63 ], [ null, %83 ], [ %79, %77 ]
  %89 = getelementptr i8, ptr %88, i64 12
  %90 = load i32, ptr %89, align 4, !tbaa !16
  %91 = icmp ugt i32 %90, 1
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %93 = load i32, ptr %89, align 4, !tbaa !16
  %94 = icmp ugt i32 %93, 1
  br i1 %94, label %96, label %95

95:                                               ; preds = %92
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %96

96:                                               ; preds = %95, %92, %87
  %97 = add i32 %90, -1
  %98 = zext i32 %97 to i64
  %99 = load i32, ptr %88, align 8
  %100 = and i32 %99, 255
  %101 = add nsw i32 %100, -10
  %102 = icmp ult i32 %101, -9
  br i1 %102, label %116, label %103

103:                                              ; preds = %96
  %104 = zext i32 %100 to i64
  %105 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %104
  %106 = load i32, ptr %105, align 4, !tbaa !16
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %107
  %109 = load i64, ptr %108, align 8, !tbaa !50
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %103
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %112

112:                                              ; preds = %111, %103
  %113 = getelementptr inbounds i8, ptr %88, i64 %109
  %114 = getelementptr inbounds ptr, ptr %113, i64 1
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  br label %116

116:                                              ; preds = %112, %96
  %117 = phi ptr [ %115, %112 ], [ null, %96 ]
  %118 = icmp ugt i32 %97, 1
  br i1 %118, label %119, label %169

119:                                              ; preds = %116, %166
  %120 = phi i64 [ %155, %166 ], [ 0, %116 ]
  %121 = phi i64 [ %154, %166 ], [ %98, %116 ]
  %122 = add i64 %121, %120
  %123 = lshr i64 %122, 1
  %124 = trunc i64 %123 to i32
  %125 = load i32, ptr %89, align 4, !tbaa !16
  %126 = add i32 %124, 1
  %127 = icmp ugt i32 %125, %126
  br i1 %127, label %129, label %128

128:                                              ; preds = %119
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %129

129:                                              ; preds = %128, %119
  %130 = load i32, ptr %88, align 8
  %131 = and i32 %130, 255
  %132 = add nsw i32 %131, -10
  %133 = icmp ult i32 %132, -9
  br i1 %133, label %148, label %134

134:                                              ; preds = %129
  %135 = zext i32 %131 to i64
  %136 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %135
  %137 = load i32, ptr %136, align 4, !tbaa !16
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %138
  %140 = load i64, ptr %139, align 8, !tbaa !50
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %134
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %143

143:                                              ; preds = %142, %134
  %144 = getelementptr inbounds i8, ptr %88, i64 %140
  %145 = zext i32 %126 to i64
  %146 = getelementptr inbounds ptr, ptr %144, i64 %145
  %147 = load ptr, ptr %146, align 8, !tbaa !5
  br label %148

148:                                              ; preds = %143, %129
  %149 = phi ptr [ %147, %143 ], [ null, %129 ]
  %150 = getelementptr inbounds %struct.tree_exp, ptr %149, i64 0, i32 3
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = tail call i32 @tree_int_cst_compare(ptr noundef %151, ptr noundef nonnull %1) #26
  %153 = icmp sgt i32 %152, 0
  %154 = select i1 %153, i64 %123, i64 %121
  %155 = select i1 %153, i64 %120, i64 %123
  %156 = getelementptr inbounds %struct.tree_exp, ptr %149, i64 1
  %157 = load ptr, ptr %156, align 8, !tbaa !16
  %158 = icmp eq ptr %157, null
  br i1 %158, label %159, label %161

159:                                              ; preds = %148
  %160 = icmp eq i32 %152, 0
  br i1 %160, label %169, label %166

161:                                              ; preds = %148
  %162 = icmp slt i32 %152, 1
  br i1 %162, label %163, label %166

163:                                              ; preds = %161
  %164 = tail call i32 @tree_int_cst_compare(ptr noundef nonnull %157, ptr noundef nonnull %1) #26
  %165 = icmp sgt i32 %164, -1
  br i1 %165, label %169, label %166

166:                                              ; preds = %163, %161, %159
  %167 = sub i64 %154, %155
  %168 = icmp ugt i64 %167, 1
  br i1 %168, label %119, label %169, !llvm.loop !244

169:                                              ; preds = %166, %163, %159, %116
  %170 = phi ptr [ %117, %116 ], [ %149, %163 ], [ %149, %159 ], [ %117, %166 ]
  %171 = load ptr, ptr @cfun, align 8, !tbaa !5
  %172 = getelementptr inbounds %struct.tree_exp, ptr %170, i64 1, i32 0, i32 1
  %173 = load ptr, ptr %172, align 8, !tbaa !16
  %174 = getelementptr inbounds %struct.tree_label_decl, ptr %173, i64 0, i32 1
  %175 = load i32, ptr %174, align 8, !tbaa !16
  %176 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %177 = getelementptr inbounds %struct.diagnostic_context, ptr %176, i64 0, i32 1, i64 4
  %178 = load i32, ptr %177, align 8, !tbaa !20
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %186

180:                                              ; preds = %169
  %181 = getelementptr inbounds %struct.diagnostic_context, ptr %176, i64 0, i32 1, i64 5
  %182 = load i32, ptr %181, align 4, !tbaa !20
  %183 = icmp ne i32 %182, 0
  %184 = icmp slt i32 %175, 0
  %185 = select i1 %183, i1 %184, i1 false
  br i1 %185, label %188, label %215

186:                                              ; preds = %169
  %187 = icmp slt i32 %175, 0
  br i1 %187, label %188, label %215

188:                                              ; preds = %186, %180
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  %189 = getelementptr inbounds %struct.function, ptr %171, i64 0, i32 1
  %190 = load ptr, ptr %189, align 8, !tbaa !23
  %191 = getelementptr inbounds %struct.control_flow_graph, ptr %190, i64 0, i32 2
  %192 = load ptr, ptr %191, align 8, !tbaa !29
  %193 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %192, i64 0, i32 2, i64 2
  %194 = load ptr, ptr %193, align 8, !tbaa !5
  tail call void @llvm.experimental.noalias.scope.decl(metadata !245)
  %195 = getelementptr inbounds %struct.basic_block_def, ptr %194, i64 0, i32 13
  %196 = load i32, ptr %195, align 8, !tbaa !58, !noalias !245
  %197 = and i32 %196, 512
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %208

199:                                              ; preds = %188
  %200 = getelementptr inbounds %struct.basic_block_def, ptr %194, i64 0, i32 7
  %201 = load ptr, ptr %200, align 8, !tbaa !16, !noalias !245
  %202 = icmp eq ptr %201, null
  br i1 %202, label %208, label %203

203:                                              ; preds = %199
  %204 = load ptr, ptr %201, align 8, !tbaa !59, !noalias !245
  %205 = icmp eq ptr %204, null
  br i1 %205, label %208, label %206

206:                                              ; preds = %203
  %207 = load ptr, ptr %204, align 8, !tbaa !42, !noalias !245
  br label %208

208:                                              ; preds = %206, %203, %199, %188
  %209 = phi ptr [ %204, %206 ], [ null, %203 ], [ null, %199 ], [ null, %188 ]
  %210 = phi ptr [ %207, %206 ], [ null, %203 ], [ null, %199 ], [ null, %188 ]
  store ptr %210, ptr %4, align 8, !tbaa !44, !alias.scope !245
  %211 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 1
  store ptr %209, ptr %211, align 8, !tbaa !46, !alias.scope !245
  %212 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 2
  store ptr %194, ptr %212, align 8, !tbaa !49, !alias.scope !245
  %213 = tail call ptr @gimple_build_label(ptr noundef nonnull %173) #26
  call void @gsi_insert_before(ptr noundef nonnull %4, ptr noundef %213, i32 noundef 0) #26
  %214 = load i32, ptr %174, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  br label %215

215:                                              ; preds = %208, %186, %180
  %216 = phi i32 [ %214, %208 ], [ %175, %186 ], [ %175, %180 ]
  %217 = getelementptr inbounds %struct.function, ptr %171, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !23
  %219 = getelementptr inbounds %struct.control_flow_graph, ptr %218, i64 0, i32 6
  %220 = load ptr, ptr %219, align 8, !tbaa !33
  %221 = icmp eq ptr %220, null
  br i1 %221, label %229, label %222

222:                                              ; preds = %215
  %223 = load i32, ptr %220, align 8, !tbaa !30
  %224 = icmp ugt i32 %223, %216
  br i1 %224, label %225, label %229

225:                                              ; preds = %222
  %226 = zext i32 %216 to i64
  %227 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %220, i64 0, i32 2, i64 %226
  %228 = load ptr, ptr %227, align 8, !tbaa !5
  br label %229

229:                                              ; preds = %225, %222, %215
  %230 = phi ptr [ %228, %225 ], [ null, %222 ], [ null, %215 ]
  %231 = call ptr @find_edge(ptr noundef %0, ptr noundef %230) #26
  %232 = icmp eq ptr %231, null
  br i1 %232, label %233, label %319

233:                                              ; preds = %229
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1926, ptr noundef nonnull @.str.2) #26
  br label %319

234:                                              ; preds = %39
  %235 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %236
  %238 = load i64, ptr %237, align 8, !tbaa !50
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %234
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %241

241:                                              ; preds = %234, %240
  %242 = getelementptr inbounds i8, ptr %22, i64 %238
  %243 = load ptr, ptr %242, align 8, !tbaa !5
  %244 = load i64, ptr %243, align 8
  %245 = and i64 %244, 65535
  %246 = icmp eq i64 %245, 30
  br i1 %246, label %318, label %247

247:                                              ; preds = %241
  %248 = load i64, ptr %1, align 8
  %249 = trunc i64 %248 to i16
  switch i16 %249, label %319 [
    i16 121, label %250
    i16 133, label %250
  ]

250:                                              ; preds = %247, %247
  %251 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %252 = load ptr, ptr %251, align 8, !tbaa !16
  %253 = load i64, ptr %252, align 8
  %254 = and i64 %253, 65535
  %255 = icmp eq i64 %254, 30
  br i1 %255, label %256, label %319

256:                                              ; preds = %250
  %257 = load ptr, ptr @cfun, align 8, !tbaa !5
  %258 = getelementptr inbounds %struct.tree_label_decl, ptr %252, i64 0, i32 1
  %259 = load i32, ptr %258, align 8, !tbaa !16
  %260 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %261 = getelementptr inbounds %struct.diagnostic_context, ptr %260, i64 0, i32 1, i64 4
  %262 = load i32, ptr %261, align 8, !tbaa !20
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %270

264:                                              ; preds = %256
  %265 = getelementptr inbounds %struct.diagnostic_context, ptr %260, i64 0, i32 1, i64 5
  %266 = load i32, ptr %265, align 4, !tbaa !20
  %267 = icmp ne i32 %266, 0
  %268 = icmp slt i32 %259, 0
  %269 = select i1 %267, i1 %268, i1 false
  br i1 %269, label %272, label %299

270:                                              ; preds = %256
  %271 = icmp slt i32 %259, 0
  br i1 %271, label %272, label %299

272:                                              ; preds = %270, %264
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %273 = getelementptr inbounds %struct.function, ptr %257, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !23
  %275 = getelementptr inbounds %struct.control_flow_graph, ptr %274, i64 0, i32 2
  %276 = load ptr, ptr %275, align 8, !tbaa !29
  %277 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %276, i64 0, i32 2, i64 2
  %278 = load ptr, ptr %277, align 8, !tbaa !5
  tail call void @llvm.experimental.noalias.scope.decl(metadata !248)
  %279 = getelementptr inbounds %struct.basic_block_def, ptr %278, i64 0, i32 13
  %280 = load i32, ptr %279, align 8, !tbaa !58, !noalias !248
  %281 = and i32 %280, 512
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %292

283:                                              ; preds = %272
  %284 = getelementptr inbounds %struct.basic_block_def, ptr %278, i64 0, i32 7
  %285 = load ptr, ptr %284, align 8, !tbaa !16, !noalias !248
  %286 = icmp eq ptr %285, null
  br i1 %286, label %292, label %287

287:                                              ; preds = %283
  %288 = load ptr, ptr %285, align 8, !tbaa !59, !noalias !248
  %289 = icmp eq ptr %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = load ptr, ptr %288, align 8, !tbaa !42, !noalias !248
  br label %292

292:                                              ; preds = %290, %287, %283, %272
  %293 = phi ptr [ %288, %290 ], [ null, %287 ], [ null, %283 ], [ null, %272 ]
  %294 = phi ptr [ %291, %290 ], [ null, %287 ], [ null, %283 ], [ null, %272 ]
  store ptr %294, ptr %3, align 8, !tbaa !44, !alias.scope !248
  %295 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  store ptr %293, ptr %295, align 8, !tbaa !46, !alias.scope !248
  %296 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  store ptr %278, ptr %296, align 8, !tbaa !49, !alias.scope !248
  %297 = tail call ptr @gimple_build_label(ptr noundef nonnull %252) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %297, i32 noundef 0) #26
  %298 = load i32, ptr %258, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %299

299:                                              ; preds = %292, %270, %264
  %300 = phi i32 [ %298, %292 ], [ %259, %270 ], [ %259, %264 ]
  %301 = getelementptr inbounds %struct.function, ptr %257, i64 0, i32 1
  %302 = load ptr, ptr %301, align 8, !tbaa !23
  %303 = getelementptr inbounds %struct.control_flow_graph, ptr %302, i64 0, i32 6
  %304 = load ptr, ptr %303, align 8, !tbaa !33
  %305 = icmp eq ptr %304, null
  br i1 %305, label %319, label %306

306:                                              ; preds = %299
  %307 = load i32, ptr %304, align 8, !tbaa !30
  %308 = icmp ugt i32 %307, %300
  br i1 %308, label %309, label %319

309:                                              ; preds = %306
  %310 = zext i32 %300 to i64
  %311 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %304, i64 0, i32 2, i64 %310
  %312 = load ptr, ptr %311, align 8, !tbaa !5
  %313 = icmp eq ptr %312, null
  br i1 %313, label %319, label %314

314:                                              ; preds = %309
  %315 = call ptr @find_edge(ptr noundef %0, ptr noundef nonnull %312) #26
  %316 = icmp eq ptr %315, null
  br i1 %316, label %317, label %319

317:                                              ; preds = %314
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1888, ptr noundef nonnull @.str.2) #26
  br label %319

318:                                              ; preds = %39, %241
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1868, ptr noundef nonnull @.str.2) #26
  br label %319

319:                                              ; preds = %317, %314, %309, %306, %299, %233, %229, %250, %247, %36, %34, %318, %55
  %320 = phi ptr [ %62, %55 ], [ null, %318 ], [ null, %34 ], [ null, %36 ], [ null, %247 ], [ null, %250 ], [ %231, %229 ], [ null, %233 ], [ %315, %314 ], [ null, %317 ], [ null, %309 ], [ null, %306 ], [ null, %299 ]
  ret ptr %320
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local zeroext i8 @is_ctrl_stmt(ptr nocapture noundef readonly %0) local_unnamed_addr #17 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i8
  switch i8 %3, label %4 [
    i8 1, label %5
    i8 5, label %5
    i8 3, label %5
    i8 9, label %5
    i8 14, label %5
  ]

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %1, %1, %1, %1, %4
  %6 = phi i8 [ 0, %4 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i8 %6
}

declare zeroext i8 @is_gimple_min_invariant(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gimple_debug_bb(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @gimple_dump_bb(ptr noundef %0, ptr noundef %2, i32 noundef 0, i32 noundef 16448) #26
  ret void
}

declare void @gimple_dump_bb(ptr noundef, ptr noundef, i32 noundef, i32 noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @gimple_debug_bb_n(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @cfun, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.function, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !23
  %5 = getelementptr inbounds %struct.control_flow_graph, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !29
  %7 = zext i32 %0 to i64
  %8 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %6, i64 0, i32 2, i64 %7
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @gimple_dump_bb(ptr noundef %9, ptr noundef %10, i32 noundef 0, i32 noundef 16448) #26
  %11 = load ptr, ptr @cfun, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.function, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !23
  %14 = getelementptr inbounds %struct.control_flow_graph, ptr %13, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !29
  %16 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %15, i64 0, i32 2, i64 %7
  %17 = load ptr, ptr %16, align 8, !tbaa !5
  ret ptr %17
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gimple_debug_cfg(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @gimple_dump_cfg(ptr noundef %2, i32 noundef %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gimple_dump_cfg(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = and i32 %1, 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 22), align 8, !tbaa !112
  %7 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %8 = tail call ptr %6(ptr noundef %7, i32 noundef 2) #26
  %9 = tail call i32 @fputc(i32 noundef 10, ptr noundef %0)
  %10 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.3, ptr noundef %8)
  %11 = load ptr, ptr @cfun, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.function, ptr %11, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !23
  %14 = getelementptr inbounds %struct.control_flow_graph, ptr %13, i64 0, i32 3
  %15 = load i32, ptr %14, align 8, !tbaa !27
  %16 = getelementptr inbounds %struct.control_flow_graph, ptr %13, i64 0, i32 4
  %17 = load i32, ptr %16, align 4, !tbaa !251
  %18 = getelementptr inbounds %struct.control_flow_graph, ptr %13, i64 0, i32 5
  %19 = load i32, ptr %18, align 8, !tbaa !28
  %20 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.4, i32 noundef %15, i32 noundef %17, i32 noundef %19)
  tail call void @brief_dump_cfg(ptr noundef %0) #26
  %21 = tail call i32 @fputc(i32 10, ptr %0)
  br label %22

22:                                               ; preds = %5, %2
  %23 = and i32 %1, 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %22
  tail call void @dump_cfg_stats(ptr noundef %0)
  br label %26

26:                                               ; preds = %25, %22
  %27 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %28 = or i32 %1, 32
  tail call void @dump_function_to_file(ptr noundef %27, ptr noundef %0, i32 noundef %28)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

declare void @brief_dump_cfg(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_cfg_stats(ptr nocapture noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 22), align 8, !tbaa !112
  %3 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %4 = tail call ptr %2(ptr noundef %3, i32 noundef 2) #26
  %5 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.10, ptr noundef %4)
  %6 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 58, i64 1, ptr %0)
  %7 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.12, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.14)
  %8 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.12, ptr noundef nonnull @.str.15, ptr noundef nonnull @.str.16)
  %9 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 58, i64 1, ptr %0)
  %10 = load ptr, ptr @cfun, align 8, !tbaa !5
  %11 = getelementptr inbounds %struct.function, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !23
  %13 = getelementptr inbounds %struct.control_flow_graph, ptr %12, i64 0, i32 3
  %14 = load i32, ptr %13, align 8, !tbaa !27
  %15 = sext i32 %14 to i64
  %16 = mul nsw i64 %15, 104
  %17 = icmp ult i64 %16, 10240
  %18 = icmp ult i64 %16, 10485760
  %19 = select i1 %18, i64 10, i64 20
  %20 = select i1 %17, i64 0, i64 %19
  %21 = lshr i64 %16, %20
  %22 = select i1 %18, i32 107, i32 77
  %23 = select i1 %17, i32 98, i32 %22
  %24 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.7, ptr noundef nonnull @.str.17, i32 noundef %14, i64 noundef %21, i32 noundef %23)
  %25 = load ptr, ptr @cfun, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.function, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !23
  %28 = load ptr, ptr %27, align 8, !tbaa !34
  %29 = getelementptr inbounds %struct.control_flow_graph, ptr %27, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !35
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %28, i64 0, i32 6
  %32 = load ptr, ptr %31, align 8, !tbaa !36
  %33 = icmp eq ptr %32, %30
  br i1 %33, label %49, label %34

34:                                               ; preds = %1, %42
  %35 = phi ptr [ %47, %42 ], [ %32, %1 ]
  %36 = phi i64 [ %45, %42 ], [ 0, %1 ]
  %37 = getelementptr inbounds %struct.basic_block_def, ptr %35, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !105
  %39 = icmp eq ptr %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %34
  %41 = load i32, ptr %38, align 8, !tbaa !106
  br label %42

42:                                               ; preds = %34, %40
  %43 = phi i32 [ %41, %40 ], [ 0, %34 ]
  %44 = zext i32 %43 to i64
  %45 = add nuw nsw i64 %36, %44
  %46 = getelementptr inbounds %struct.basic_block_def, ptr %35, i64 0, i32 6
  %47 = load ptr, ptr %46, align 8, !tbaa !36
  %48 = icmp eq ptr %47, %30
  br i1 %48, label %49, label %34, !llvm.loop !252

49:                                               ; preds = %42, %1
  %50 = phi i64 [ 0, %1 ], [ %45, %42 ]
  %51 = shl i64 %50, 6
  %52 = add i64 %51, %16
  %53 = icmp ult i64 %51, 10240
  %54 = icmp ult i64 %51, 10485760
  %55 = select i1 %54, i64 10, i64 20
  %56 = select i1 %53, i64 0, i64 %55
  %57 = lshr i64 %51, %56
  %58 = select i1 %54, i32 107, i32 77
  %59 = select i1 %53, i32 98, i32 %58
  %60 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.8, ptr noundef nonnull @.str.18, i64 noundef %50, i64 noundef %57, i32 noundef %59)
  %61 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 58, i64 1, ptr %0)
  %62 = icmp ult i64 %52, 10240
  %63 = icmp ult i64 %52, 10485760
  %64 = select i1 %63, i64 10, i64 20
  %65 = select i1 %62, i64 0, i64 %64
  %66 = lshr i64 %52, %65
  %67 = select i1 %63, i32 107, i32 77
  %68 = select i1 %62, i32 98, i32 %67
  %69 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.19, i64 noundef %66, i32 noundef %68)
  %70 = tail call i64 @fwrite(ptr nonnull @.str.11, i64 58, i64 1, ptr %0)
  %71 = tail call i32 @fputc(i32 10, ptr %0)
  %72 = load i64, ptr @cfg_stats.0, align 8, !tbaa !51
  %73 = load i64, ptr @dump_cfg_stats.max_num_merged_labels, align 8, !tbaa !50
  %74 = icmp sgt i64 %72, %73
  br i1 %74, label %75, label %76

75:                                               ; preds = %49
  store i64 %72, ptr @dump_cfg_stats.max_num_merged_labels, align 8, !tbaa !50
  br label %76

76:                                               ; preds = %75, %49
  %77 = phi i64 [ %72, %75 ], [ %73, %49 ]
  %78 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.20, i64 noundef %72, i64 noundef %77)
  %79 = tail call i32 @fputc(i32 10, ptr %0)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @dump_function_to_file(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 22), align 8, !tbaa !112
  %5 = tail call ptr %4(ptr noundef %0, i32 noundef 2) #26
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef nonnull @.str.31, ptr noundef %5)
  %7 = getelementptr inbounds %struct.tree_decl_non_common, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = icmp eq ptr %8, null
  %10 = and i32 %2, 65536
  br i1 %9, label %45, label %11

11:                                               ; preds = %3
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %13, label %27

13:                                               ; preds = %11, %23
  %14 = phi ptr [ %25, %23 ], [ %8, %11 ]
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_generic_expr(ptr noundef %1, ptr noundef %16, i32 noundef %17) #26
  %18 = tail call i32 @fputc(i32 32, ptr %1)
  %19 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_generic_expr(ptr noundef %1, ptr noundef nonnull %14, i32 noundef %19) #26
  %20 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = icmp eq ptr %21, null
  br i1 %22, label %41, label %23

23:                                               ; preds = %13
  %24 = tail call i64 @fwrite(ptr nonnull @.str.33, i64 2, i64 1, ptr %1)
  %25 = load ptr, ptr %20, align 8, !tbaa !16
  %26 = icmp eq ptr %25, null
  br i1 %26, label %41, label %13, !llvm.loop !253

27:                                               ; preds = %11, %37
  %28 = phi ptr [ %39, %37 ], [ %8, %11 ]
  %29 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_generic_expr(ptr noundef %1, ptr noundef %30, i32 noundef %31) #26
  %32 = tail call i32 @fputc(i32 32, ptr %1)
  %33 = load i32, ptr @dump_flags, align 4, !tbaa !20
  tail call void @print_generic_expr(ptr noundef %1, ptr noundef nonnull %28, i32 noundef %33) #26
  tail call void @print_node(ptr noundef %1, ptr noundef nonnull @.str.12, ptr noundef nonnull %28, i32 noundef 4) #26
  %34 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = icmp eq ptr %35, null
  br i1 %36, label %43, label %37

37:                                               ; preds = %27
  %38 = tail call i64 @fwrite(ptr nonnull @.str.33, i64 2, i64 1, ptr %1)
  %39 = load ptr, ptr %34, align 8, !tbaa !16
  %40 = icmp eq ptr %39, null
  br i1 %40, label %43, label %27, !llvm.loop !253

41:                                               ; preds = %23, %13
  %42 = tail call i64 @fwrite(ptr nonnull @.str.34, i64 2, i64 1, ptr %1)
  br label %49

43:                                               ; preds = %37, %27
  %44 = tail call i64 @fwrite(ptr nonnull @.str.34, i64 2, i64 1, ptr %1)
  br label %48

45:                                               ; preds = %3
  %46 = tail call i64 @fwrite(ptr nonnull @.str.34, i64 2, i64 1, ptr %1)
  %47 = icmp eq i32 %10, 0
  br i1 %47, label %49, label %48

48:                                               ; preds = %43, %45
  tail call void @print_node(ptr noundef %1, ptr noundef nonnull @.str.12, ptr noundef %0, i32 noundef 2) #26
  br label %49

49:                                               ; preds = %41, %48, %45
  %50 = phi i1 [ true, %41 ], [ false, %48 ], [ true, %45 ]
  %51 = getelementptr inbounds %struct.tree_function_decl, ptr %0, i64 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = icmp eq ptr %52, null
  %54 = and i32 %2, 524288
  %55 = icmp eq i32 %54, 0
  %56 = or i1 %55, %53
  br i1 %56, label %58, label %57

57:                                               ; preds = %49
  tail call void @dump_eh_tree(ptr noundef %1, ptr noundef nonnull %52) #26
  br label %58

58:                                               ; preds = %57, %49
  %59 = and i32 %2, 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %66, label %61

61:                                               ; preds = %58
  %62 = tail call zeroext i8 @gimple_has_body_p(ptr noundef nonnull %0) #26
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = or i32 %2, 2
  tail call void @dump_node(ptr noundef nonnull %0, i32 noundef %65, ptr noundef %1) #26
  br label %223

66:                                               ; preds = %61, %58
  %67 = load ptr, ptr %51, align 8, !tbaa !16
  tail call void @push_cfun(ptr noundef %67) #26
  %68 = load ptr, ptr @cfun, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %165, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.function, ptr %68, i64 0, i32 6
  %72 = load ptr, ptr %71, align 8, !tbaa !254
  %73 = icmp eq ptr %72, %0
  br i1 %73, label %74, label %101

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.function, ptr %68, i64 0, i32 9
  %76 = load ptr, ptr %75, align 8, !tbaa !255
  %77 = icmp eq ptr %76, null
  br i1 %77, label %101, label %78

78:                                               ; preds = %74
  %79 = tail call i64 @fwrite(ptr nonnull @.str.35, i64 2, i64 1, ptr %1)
  %80 = load ptr, ptr @cfun, align 8, !tbaa !5
  %81 = getelementptr inbounds %struct.function, ptr %80, i64 0, i32 9
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  %83 = icmp eq ptr %82, null
  br i1 %83, label %105, label %84

84:                                               ; preds = %78
  br i1 %50, label %85, label %93

85:                                               ; preds = %84, %85
  %86 = phi ptr [ %91, %85 ], [ %82, %84 ]
  %87 = getelementptr inbounds %struct.tree_list, ptr %86, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  tail call void @print_generic_decl(ptr noundef %1, ptr noundef %88, i32 noundef %2) #26
  %89 = tail call i32 @fputc(i32 10, ptr %1)
  %90 = getelementptr inbounds %struct.tree_common, ptr %86, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = icmp eq ptr %91, null
  br i1 %92, label %101, label %85, !llvm.loop !256

93:                                               ; preds = %84, %93
  %94 = phi ptr [ %99, %93 ], [ %82, %84 ]
  %95 = getelementptr inbounds %struct.tree_list, ptr %94, i64 0, i32 2
  %96 = load ptr, ptr %95, align 8, !tbaa !16
  tail call void @print_generic_decl(ptr noundef %1, ptr noundef %96, i32 noundef %2) #26
  tail call void @print_node(ptr noundef %1, ptr noundef nonnull @.str.12, ptr noundef %96, i32 noundef 4) #26
  %97 = tail call i32 @fputc(i32 10, ptr %1)
  %98 = getelementptr inbounds %struct.tree_common, ptr %94, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = icmp eq ptr %99, null
  br i1 %100, label %101, label %93, !llvm.loop !256

101:                                              ; preds = %93, %85, %70, %74
  %102 = phi i1 [ true, %74 ], [ true, %70 ], [ false, %85 ], [ false, %93 ]
  %103 = phi i8 [ 0, %74 ], [ 0, %70 ], [ 1, %85 ], [ 1, %93 ]
  %104 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %105

105:                                              ; preds = %101, %78
  %106 = phi ptr [ %104, %101 ], [ %80, %78 ]
  %107 = phi i1 [ %102, %101 ], [ false, %78 ]
  %108 = phi i1 [ %102, %101 ], [ true, %78 ]
  %109 = phi i8 [ %103, %101 ], [ 0, %78 ]
  %110 = icmp eq ptr %106, null
  br i1 %110, label %165, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds %struct.function, ptr %106, i64 0, i32 6
  %113 = load ptr, ptr %112, align 8, !tbaa !254
  %114 = icmp eq ptr %113, %0
  br i1 %114, label %115, label %165

115:                                              ; preds = %111
  %116 = getelementptr inbounds %struct.function, ptr %106, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !23
  %118 = icmp eq ptr %117, null
  br i1 %118, label %165, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.control_flow_graph, ptr %117, i64 0, i32 2
  %121 = load ptr, ptr %120, align 8, !tbaa !29
  %122 = icmp eq ptr %121, null
  br i1 %122, label %165, label %123

123:                                              ; preds = %119
  %124 = load ptr, ptr %117, align 8, !tbaa !34
  tail call void @check_bb_profile(ptr noundef %124, ptr noundef %1) #26
  br i1 %107, label %125, label %127

125:                                              ; preds = %123
  %126 = tail call i64 @fwrite(ptr nonnull @.str.35, i64 2, i64 1, ptr %1)
  br label %127

127:                                              ; preds = %125, %123
  %128 = load ptr, ptr @cfun, align 8, !tbaa !5
  br i1 %108, label %138, label %129

129:                                              ; preds = %127
  %130 = getelementptr inbounds %struct.function, ptr %128, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !23
  %132 = getelementptr inbounds %struct.control_flow_graph, ptr %131, i64 0, i32 3
  %133 = load i32, ptr %132, align 8, !tbaa !27
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %138, label %135

135:                                              ; preds = %129
  %136 = tail call i32 @fputc(i32 10, ptr %1)
  %137 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %138

138:                                              ; preds = %135, %129, %127
  %139 = phi ptr [ %137, %135 ], [ %128, %129 ], [ %128, %127 ]
  %140 = getelementptr inbounds %struct.function, ptr %139, i64 0, i32 1
  %141 = load ptr, ptr %140, align 8, !tbaa !23
  %142 = load ptr, ptr %141, align 8, !tbaa !34
  %143 = getelementptr inbounds %struct.basic_block_def, ptr %142, i64 0, i32 6
  %144 = load ptr, ptr %143, align 8, !tbaa !36
  %145 = getelementptr inbounds %struct.control_flow_graph, ptr %141, i64 0, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !35
  %147 = icmp eq ptr %144, %146
  br i1 %147, label %158, label %148

148:                                              ; preds = %138, %148
  %149 = phi ptr [ %151, %148 ], [ %144, %138 ]
  tail call void @gimple_dump_bb(ptr noundef %149, ptr noundef %1, i32 noundef 2, i32 noundef %2) #26
  %150 = getelementptr inbounds %struct.basic_block_def, ptr %149, i64 0, i32 6
  %151 = load ptr, ptr %150, align 8, !tbaa !36
  %152 = load ptr, ptr @cfun, align 8, !tbaa !5
  %153 = getelementptr inbounds %struct.function, ptr %152, i64 0, i32 1
  %154 = load ptr, ptr %153, align 8, !tbaa !23
  %155 = getelementptr inbounds %struct.control_flow_graph, ptr %154, i64 0, i32 1
  %156 = load ptr, ptr %155, align 8, !tbaa !35
  %157 = icmp eq ptr %151, %156
  br i1 %157, label %158, label %148, !llvm.loop !257

158:                                              ; preds = %148, %138
  %159 = tail call i64 @fwrite(ptr nonnull @.str.36, i64 2, i64 1, ptr %1)
  %160 = load ptr, ptr @cfun, align 8, !tbaa !5
  %161 = getelementptr inbounds %struct.function, ptr %160, i64 0, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !23
  %163 = getelementptr inbounds %struct.control_flow_graph, ptr %162, i64 0, i32 1
  %164 = load ptr, ptr %163, align 8, !tbaa !35
  tail call void @check_bb_profile(ptr noundef %164, ptr noundef %1) #26
  br label %221

165:                                              ; preds = %66, %119, %115, %111, %105
  %166 = phi i8 [ %109, %119 ], [ %109, %115 ], [ %109, %111 ], [ %109, %105 ], [ 0, %66 ]
  %167 = phi i1 [ %107, %119 ], [ %107, %115 ], [ %107, %111 ], [ %107, %105 ], [ true, %66 ]
  %168 = getelementptr inbounds %struct.tree_decl_non_common, ptr %0, i64 0, i32 1
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = icmp eq ptr %169, null
  br i1 %170, label %171, label %201

171:                                              ; preds = %165
  %172 = tail call ptr @gimple_body(ptr noundef nonnull %0) #26
  %173 = icmp eq ptr %172, null
  br i1 %173, label %192, label %174

174:                                              ; preds = %171
  %175 = load ptr, ptr %172, align 8, !tbaa !42
  %176 = icmp eq ptr %175, null
  br i1 %176, label %192, label %177

177:                                              ; preds = %174
  %178 = load ptr, ptr %175, align 8, !tbaa !47
  %179 = icmp eq ptr %178, null
  br i1 %179, label %192, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %struct.gimple_seq_d, ptr %172, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !61
  %183 = icmp eq ptr %182, null
  br i1 %183, label %192, label %184

184:                                              ; preds = %180
  %185 = load ptr, ptr %182, align 8, !tbaa !47
  %186 = icmp eq ptr %178, %185
  br i1 %186, label %187, label %192

187:                                              ; preds = %184
  %188 = load i32, ptr %178, align 8
  %189 = and i32 %188, 255
  %190 = icmp eq i32 %189, 10
  br i1 %190, label %191, label %192

191:                                              ; preds = %187
  tail call void @print_gimple_seq(ptr noundef %1, ptr noundef nonnull %172, i32 noundef 0, i32 noundef %2) #26
  br label %221

192:                                              ; preds = %180, %171, %174, %187, %184, %177
  br i1 %167, label %193, label %195

193:                                              ; preds = %192
  %194 = tail call i64 @fwrite(ptr nonnull @.str.35, i64 2, i64 1, ptr %1)
  br label %195

195:                                              ; preds = %193, %192
  %196 = icmp eq i8 %166, 0
  br i1 %196, label %199, label %197

197:                                              ; preds = %195
  %198 = tail call i32 @fputc(i32 10, ptr %1)
  br label %199

199:                                              ; preds = %197, %195
  tail call void @print_gimple_seq(ptr noundef %1, ptr noundef %172, i32 noundef 2, i32 noundef %2) #26
  %200 = tail call i64 @fwrite(ptr nonnull @.str.36, i64 2, i64 1, ptr %1)
  br label %221

201:                                              ; preds = %165
  %202 = load i64, ptr %169, align 8
  %203 = and i64 %202, 65535
  %204 = icmp eq i64 %203, 58
  br i1 %204, label %205, label %209

205:                                              ; preds = %201
  br i1 %167, label %212, label %206

206:                                              ; preds = %205
  %207 = getelementptr inbounds %struct.tree_exp, ptr %169, i64 1
  %208 = load ptr, ptr %207, align 8, !tbaa !16
  br label %212

209:                                              ; preds = %201
  br i1 %167, label %210, label %212

210:                                              ; preds = %209
  %211 = tail call i64 @fwrite(ptr nonnull @.str.35, i64 2, i64 1, ptr %1)
  br label %212

212:                                              ; preds = %209, %210, %205, %206
  %213 = phi ptr [ %208, %206 ], [ %169, %205 ], [ %169, %210 ], [ %169, %209 ]
  %214 = phi i32 [ 2, %206 ], [ 0, %205 ], [ 2, %210 ], [ 2, %209 ]
  %215 = icmp eq i8 %166, 0
  br i1 %215, label %218, label %216

216:                                              ; preds = %212
  %217 = tail call i32 @fputc(i32 10, ptr %1)
  br label %218

218:                                              ; preds = %216, %212
  tail call void @print_generic_stmt_indented(ptr noundef %1, ptr noundef %213, i32 noundef %2, i32 noundef %214) #26
  br i1 %167, label %221, label %219

219:                                              ; preds = %218
  %220 = tail call i64 @fwrite(ptr nonnull @.str.36, i64 2, i64 1, ptr %1)
  br label %221

221:                                              ; preds = %218, %219, %191, %199, %158
  %222 = tail call i64 @fwrite(ptr nonnull @.str.37, i64 2, i64 1, ptr %1)
  tail call void @pop_cfun() #26
  br label %223

223:                                              ; preds = %221, %64
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_cfg_stats() local_unnamed_addr #9 {
  %1 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_cfg_stats(ptr noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @is_ctrl_altering_stmt(ptr noundef %0) local_unnamed_addr #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2210, ptr noundef nonnull @.str.2) #26
  unreachable

4:                                                ; preds = %1
  %5 = load i32, ptr %0, align 8
  %6 = trunc i32 %5 to i8
  switch i8 %6, label %26 [
    i8 8, label %7
    i8 15, label %28
    i8 7, label %22
    i8 26, label %28
    i8 27, label %28
    i8 23, label %28
    i8 30, label %28
    i8 31, label %28
    i8 32, label %28
    i8 29, label %28
    i8 24, label %28
    i8 25, label %28
    i8 22, label %28
    i8 28, label %28
    i8 19, label %28
    i8 20, label %28
    i8 21, label %28
  ]

7:                                                ; preds = %4
  %8 = tail call i32 @gimple_call_flags(ptr noundef nonnull %0) #26
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 20
  %14 = load i32, ptr %13, align 8
  %15 = and i32 %14, 1048576
  %16 = and i32 %8, 8
  %17 = or i32 %15, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %28

19:                                               ; preds = %7
  %20 = and i32 %8, 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %26, label %28

22:                                               ; preds = %4
  %23 = getelementptr i8, ptr %0, i64 75
  %24 = load i8, ptr %23, align 1, !tbaa !16
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %11, %19, %4, %22
  %27 = tail call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %0) #26
  br label %28

28:                                               ; preds = %19, %11, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %4, %22, %4, %26
  %29 = phi i8 [ %27, %26 ], [ 1, %4 ], [ 1, %22 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %4 ], [ 1, %11 ], [ 1, %19 ]
  ret i8 %29
}

declare zeroext i8 @stmt_can_throw_internal(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @simple_goto_p(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 255
  %4 = icmp eq i32 %3, 3
  br i1 %4, label %5, label %19

5:                                                ; preds = %1
  %6 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %7
  %9 = load i64, ptr %8, align 8, !tbaa !50
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %12

12:                                               ; preds = %5, %11
  %13 = getelementptr inbounds i8, ptr %0, i64 %9
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i64, ptr %14, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 30
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %12, %1
  %20 = phi i8 [ 0, %1 ], [ %18, %12 ]
  ret i8 %20
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @stmt_can_make_abnormal_goto(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 255
  %4 = icmp eq i32 %3, 3
  br i1 %4, label %5, label %20

5:                                                ; preds = %1
  %6 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %7
  %9 = load i64, ptr %8, align 8, !tbaa !50
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %12

12:                                               ; preds = %5, %11
  %13 = getelementptr inbounds i8, ptr %0, i64 %9
  %14 = load ptr, ptr %13, align 8, !tbaa !5
  %15 = load i64, ptr %14, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 30
  br i1 %17, label %18, label %34

18:                                               ; preds = %12
  %19 = load i32, ptr %0, align 8
  br label %20

20:                                               ; preds = %18, %1
  %21 = phi i32 [ %19, %18 ], [ %2, %1 ]
  %22 = and i32 %21, 255
  %23 = icmp eq i32 %22, 8
  br i1 %23, label %24, label %34

24:                                               ; preds = %20
  %25 = tail call zeroext i8 @gimple_has_side_effects(ptr noundef nonnull %0) #26
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %24
  %28 = load ptr, ptr @cfun, align 8, !tbaa !5
  %29 = getelementptr inbounds %struct.function, ptr %28, i64 0, i32 20
  %30 = load i32, ptr %29, align 8
  %31 = lshr i32 %30, 20
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  br label %34

34:                                               ; preds = %20, %24, %27, %12
  %35 = phi i8 [ 1, %12 ], [ 0, %24 ], [ %33, %27 ], [ 0, %20 ]
  ret i8 %35
}

declare zeroext i8 @gimple_has_side_effects(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @stmt_ends_bb_p(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i8
  switch i8 %3, label %23 [
    i8 1, label %27
    i8 5, label %27
    i8 3, label %27
    i8 9, label %27
    i8 14, label %27
    i8 8, label %4
    i8 15, label %27
    i8 7, label %19
    i8 26, label %27
    i8 27, label %27
    i8 23, label %27
    i8 30, label %27
    i8 31, label %27
    i8 32, label %27
    i8 29, label %27
    i8 24, label %27
    i8 25, label %27
    i8 22, label %27
    i8 28, label %27
    i8 19, label %27
    i8 20, label %27
    i8 21, label %27
  ]

4:                                                ; preds = %1
  %5 = tail call i32 @gimple_call_flags(ptr noundef nonnull %0) #26
  %6 = and i32 %5, 3
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %4
  %9 = load ptr, ptr @cfun, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.function, ptr %9, i64 0, i32 20
  %11 = load i32, ptr %10, align 8
  %12 = and i32 %11, 1048576
  %13 = and i32 %5, 8
  %14 = or i32 %12, %13
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %23, label %27

16:                                               ; preds = %4
  %17 = and i32 %5, 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %27

19:                                               ; preds = %1
  %20 = getelementptr i8, ptr %0, i64 75
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %1, %19, %16, %8
  %24 = tail call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %0) #26
  %25 = icmp ne i8 %24, 0
  %26 = zext i1 %25 to i8
  br label %27

27:                                               ; preds = %23, %19, %16, %8, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %28 = phi i8 [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ %26, %23 ], [ 1, %19 ], [ 1, %8 ], [ 1, %16 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i8 %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @delete_tree_cfg_annotations() local_unnamed_addr #16 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !23
  %4 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 6
  store ptr null, ptr %4, align 8, !tbaa !33
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @first_stmt(ptr nocapture noundef readonly %0) local_unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !258
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !16, !noalias !258
  %9 = icmp eq ptr %8, null
  br i1 %9, label %26, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %8, align 8, !tbaa !59, !noalias !258
  %12 = icmp eq ptr %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %10
  %14 = load ptr, ptr %11, align 8, !tbaa !42, !noalias !258
  %15 = icmp eq ptr %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %13, %22
  %17 = phi ptr [ %24, %22 ], [ %14, %13 ]
  %18 = load ptr, ptr %17, align 8, !tbaa !47
  %19 = load i32, ptr %18, align 8
  %20 = and i32 %19, 255
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %26

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %17, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !53
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %16, !llvm.loop !87

26:                                               ; preds = %16, %22, %1, %6, %10, %13
  %27 = phi ptr [ null, %13 ], [ null, %10 ], [ null, %6 ], [ null, %1 ], [ null, %22 ], [ %18, %16 ]
  ret ptr %27
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @last_and_only_stmt(ptr nocapture noundef readonly %0) local_unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !261
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %48

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !16, !noalias !261
  %9 = icmp eq ptr %8, null
  br i1 %9, label %48, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %8, align 8, !tbaa !59, !noalias !261
  %12 = icmp eq ptr %11, null
  br i1 %12, label %48, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.gimple_seq_d, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !61, !noalias !261
  %16 = icmp eq ptr %15, null
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr %15, align 8, !tbaa !47
  %19 = load i32, ptr %18, align 8, !noalias !266
  %20 = and i32 %19, 255
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %32

22:                                               ; preds = %17, %27
  %23 = phi ptr [ %25, %27 ], [ %15, %17 ]
  %24 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %23, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !67, !noalias !266
  %26 = icmp eq ptr %25, null
  br i1 %26, label %48, label %27

27:                                               ; preds = %22
  %28 = load ptr, ptr %25, align 8, !tbaa !47
  %29 = load i32, ptr %28, align 8, !noalias !266
  %30 = and i32 %29, 255
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %22, label %32, !llvm.loop !267

32:                                               ; preds = %27, %17
  %33 = phi ptr [ %18, %17 ], [ %28, %27 ]
  %34 = phi ptr [ %15, %17 ], [ %25, %27 ]
  br label %35

35:                                               ; preds = %40, %32
  %36 = phi ptr [ %38, %40 ], [ %34, %32 ]
  %37 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %36, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !67
  %39 = icmp eq ptr %38, null
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = load ptr, ptr %38, align 8, !tbaa !47
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 255
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %35, label %45, !llvm.loop !267

45:                                               ; preds = %40
  %46 = icmp eq i32 %43, 4
  %47 = select i1 %46, ptr %33, ptr null
  br label %48

48:                                               ; preds = %22, %35, %1, %6, %10, %13, %45
  %49 = phi ptr [ %47, %45 ], [ null, %13 ], [ null, %10 ], [ null, %6 ], [ null, %1 ], [ %33, %35 ], [ null, %22 ]
  ret ptr %49
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @verify_types_in_gimple_seq(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %0), !range !268
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void (ptr, ...) @internal_error(ptr noundef nonnull @.str.21) #26
  br label %5

5:                                                ; preds = %4, %1
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef readonly %0) unnamed_addr #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %1454, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !42, !noalias !269
  %5 = icmp eq ptr %4, null
  br i1 %5, label %1454, label %6

6:                                                ; preds = %3, %1448
  %7 = phi i8 [ %1450, %1448 ], [ 0, %3 ]
  %8 = phi ptr [ %1452, %1448 ], [ %4, %3 ]
  %9 = load ptr, ptr %8, align 8, !tbaa !47
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 255
  %12 = trunc i32 %10 to i8
  switch i8 %12, label %1432 [
    i8 10, label %13
    i8 17, label %17
    i8 12, label %25
    i8 11, label %29
    i8 6, label %33
    i8 4, label %743
    i8 8, label %761
    i8 1, label %1126
    i8 3, label %1260
    i8 5, label %1289
    i8 9, label %1327
    i8 7, label %1448
    i8 16, label %1379
    i8 18, label %1448
    i8 33, label %1448
    i8 14, label %1448
    i8 15, label %1448
    i8 13, label %1448
    i8 26, label %1448
    i8 27, label %1448
    i8 23, label %1448
    i8 30, label %1448
    i8 31, label %1448
    i8 32, label %1448
    i8 29, label %1448
    i8 24, label %1448
    i8 25, label %1448
    i8 22, label %1448
    i8 28, label %1448
    i8 19, label %1448
    i8 20, label %1448
    i8 21, label %1448
    i8 2, label %1448
  ]

13:                                               ; preds = %6
  %14 = getelementptr i8, ptr %9, i64 48
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %15), !range !268
  br label %1448

17:                                               ; preds = %6
  %18 = getelementptr i8, ptr %9, i64 32
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %19), !range !268
  %21 = getelementptr i8, ptr %9, i64 40
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %22), !range !268
  %24 = or i8 %20, %23
  br label %1448

25:                                               ; preds = %6
  %26 = getelementptr i8, ptr %9, i64 40
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %27), !range !268
  br label %1448

29:                                               ; preds = %6
  %30 = getelementptr i8, ptr %9, i64 40
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  %32 = tail call fastcc zeroext i8 @verify_types_in_gimple_seq_2(ptr noundef %31), !range !268
  br label %1448

33:                                               ; preds = %6
  %34 = lshr i32 %10, 16
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %35
  %37 = load i8, ptr %36, align 1, !tbaa !16
  %38 = icmp eq i8 %37, 3
  br i1 %38, label %39, label %58

39:                                               ; preds = %33
  %40 = add nsw i32 %11, -1
  %41 = icmp ult i32 %40, 9
  tail call void @llvm.assume(i1 %41)
  %42 = zext i32 %11 to i64
  %43 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %45
  %47 = load i64, ptr %46, align 8, !tbaa !50
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %39
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %50

50:                                               ; preds = %49, %39
  %51 = getelementptr inbounds i8, ptr %9, i64 %47
  %52 = getelementptr inbounds ptr, ptr %51, i64 1
  %53 = load ptr, ptr %52, align 8, !tbaa !5
  %54 = load i64, ptr %53, align 8
  %55 = and i64 %54, 65535
  %56 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %55
  %57 = load i8, ptr %56, align 1, !tbaa !16
  br label %58

58:                                               ; preds = %50, %33
  %59 = phi i8 [ %37, %33 ], [ %57, %50 ]
  switch i8 %59, label %742 [
    i8 3, label %60
    i8 2, label %211
    i8 1, label %435
  ]

60:                                               ; preds = %58
  %61 = load i32, ptr %9, align 8
  %62 = trunc i32 %61 to i8
  switch i8 %62, label %65 [
    i8 6, label %63
    i8 1, label %63
    i8 8, label %67
  ]

63:                                               ; preds = %60, %60
  %64 = lshr i32 %61, 16
  br label %67

65:                                               ; preds = %60
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1446, ptr noundef nonnull @.str.2) #26
  %66 = load i32, ptr %9, align 8
  br label %67

67:                                               ; preds = %65, %63, %60
  %68 = phi i32 [ %61, %63 ], [ %66, %65 ], [ %61, %60 ]
  %69 = phi i32 [ %64, %63 ], [ 0, %65 ], [ 59, %60 ]
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %70
  %72 = load i8, ptr %71, align 1, !tbaa !16
  %73 = icmp eq i8 %72, 3
  br i1 %73, label %74, label %95

74:                                               ; preds = %67
  %75 = and i32 %68, 255
  %76 = add nsw i32 %75, -1
  %77 = icmp ult i32 %76, 9
  tail call void @llvm.assume(i1 %77)
  %78 = zext i32 %75 to i64
  %79 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %78
  %80 = load i32, ptr %79, align 4, !tbaa !16
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %81
  %83 = load i64, ptr %82, align 8, !tbaa !50
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %74
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %86 = load i32, ptr %9, align 8
  br label %87

87:                                               ; preds = %85, %74
  %88 = phi i32 [ %86, %85 ], [ %68, %74 ]
  %89 = getelementptr inbounds i8, ptr %9, i64 %83
  %90 = getelementptr inbounds ptr, ptr %89, i64 1
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  %92 = load i64, ptr %91, align 8
  %93 = trunc i64 %92 to i32
  %94 = and i32 %93, 65535
  br label %95

95:                                               ; preds = %87, %67
  %96 = phi i32 [ %88, %87 ], [ %68, %67 ]
  %97 = phi i32 [ %94, %87 ], [ %69, %67 ]
  %98 = and i32 %96, 255
  %99 = add nsw i32 %98, -10
  %100 = icmp ult i32 %99, -9
  br i1 %100, label %118, label %101

101:                                              ; preds = %95
  %102 = zext i32 %98 to i64
  %103 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !16
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %105
  %107 = load i64, ptr %106, align 8, !tbaa !50
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %113

109:                                              ; preds = %101
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %110 = load i32, ptr %9, align 8
  %111 = and i32 %110, 255
  %112 = add nsw i32 %111, -10
  br label %113

113:                                              ; preds = %109, %101
  %114 = phi i32 [ %112, %109 ], [ %99, %101 ]
  %115 = phi i32 [ %111, %109 ], [ %98, %101 ]
  %116 = getelementptr inbounds i8, ptr %9, i64 %107
  %117 = load ptr, ptr %116, align 8, !tbaa !5
  br label %118

118:                                              ; preds = %113, %95
  %119 = phi i32 [ %99, %95 ], [ %114, %113 ]
  %120 = phi i32 [ %98, %95 ], [ %115, %113 ]
  %121 = phi ptr [ null, %95 ], [ %117, %113 ]
  %122 = getelementptr inbounds %struct.tree_common, ptr %121, i64 0, i32 2
  %123 = load ptr, ptr %122, align 8, !tbaa !16
  %124 = icmp ult i32 %119, -9
  br i1 %124, label %138, label %125

125:                                              ; preds = %118
  %126 = zext i32 %120 to i64
  %127 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %126
  %128 = load i32, ptr %127, align 4, !tbaa !16
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %129
  %131 = load i64, ptr %130, align 8, !tbaa !50
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %134

133:                                              ; preds = %125
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %134

134:                                              ; preds = %133, %125
  %135 = getelementptr inbounds i8, ptr %9, i64 %131
  %136 = getelementptr inbounds ptr, ptr %135, i64 1
  %137 = load ptr, ptr %136, align 8, !tbaa !5
  br label %138

138:                                              ; preds = %134, %118
  %139 = phi ptr [ %137, %134 ], [ null, %118 ]
  %140 = getelementptr inbounds %struct.tree_common, ptr %139, i64 0, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !16
  %142 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %123, ptr noundef %141) #26
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %138
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.68) #26
  tail call void @debug_generic_expr(ptr noundef %123) #26
  tail call void @debug_generic_expr(ptr noundef %141) #26
  br label %1436

145:                                              ; preds = %138
  %146 = load i64, ptr %121, align 8
  %147 = trunc i64 %146 to i16
  switch i16 %147, label %150 [
    i16 42, label %148
    i16 41, label %148
    i16 45, label %148
    i16 46, label %148
    i16 118, label %148
    i16 43, label %148
    i16 44, label %148
  ]

148:                                              ; preds = %145, %145, %145, %145, %145, %145, %145
  %149 = tail call fastcc zeroext i8 @verify_types_in_gimple_reference(ptr noundef nonnull %121, i8 noundef zeroext 1)
  br label %150

150:                                              ; preds = %148, %145
  %151 = phi i8 [ %149, %148 ], [ 0, %145 ]
  %152 = trunc i32 %97 to i16
  switch i16 %152, label %1433 [
    i16 121, label %153
    i16 41, label %186
    i16 42, label %186
    i16 47, label %186
    i16 48, label %186
    i16 49, label %186
    i16 45, label %186
    i16 46, label %186
    i16 118, label %186
    i16 43, label %186
    i16 44, label %186
    i16 152, label %186
    i16 34, label %200
    i16 32, label %200
  ]

153:                                              ; preds = %150
  %154 = getelementptr inbounds %struct.tree_exp, ptr %139, i64 0, i32 3
  %155 = load ptr, ptr %154, align 8, !tbaa !16
  %156 = tail call zeroext i8 @is_gimple_addressable(ptr noundef %155) #26
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %153
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.69) #26
  br label %1436

159:                                              ; preds = %153
  %160 = getelementptr inbounds %struct.tree_common, ptr %155, i64 0, i32 2
  %161 = load ptr, ptr %160, align 8, !tbaa !16
  %162 = load ptr, ptr %140, align 8, !tbaa !16
  %163 = getelementptr inbounds %struct.tree_common, ptr %162, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !16
  %165 = tail call zeroext i8 @types_compatible_p(ptr noundef %161, ptr noundef %164) #26
  %166 = icmp eq i8 %165, 0
  br i1 %166, label %167, label %184

167:                                              ; preds = %159
  %168 = load ptr, ptr %140, align 8, !tbaa !16
  %169 = load ptr, ptr %160, align 8, !tbaa !16
  %170 = getelementptr i8, ptr %169, i64 72
  %171 = load ptr, ptr %170, align 8, !tbaa !16
  %172 = icmp eq ptr %171, null
  br i1 %172, label %184, label %173

173:                                              ; preds = %167, %177
  %174 = phi ptr [ %179, %177 ], [ %171, %167 ]
  %175 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %168, ptr noundef nonnull %174) #26
  %176 = icmp eq i8 %175, 0
  br i1 %176, label %177, label %184

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.tree_type, ptr %174, i64 0, i32 13
  %179 = load ptr, ptr %178, align 8, !tbaa !16
  %180 = icmp eq ptr %179, null
  br i1 %180, label %181, label %173, !llvm.loop !272

181:                                              ; preds = %177
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.70) #26
  %182 = load ptr, ptr %140, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %182) #26
  %183 = load ptr, ptr %160, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %183) #26
  br label %1436

184:                                              ; preds = %173, %167, %159
  %185 = tail call fastcc zeroext i8 @verify_types_in_gimple_reference(ptr noundef %155, i8 noundef zeroext 1)
  br label %1433

186:                                              ; preds = %150, %150, %150, %150, %150, %150, %150, %150, %150, %150, %150
  %187 = tail call zeroext i8 @is_gimple_reg(ptr noundef nonnull %121) #26
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %189, label %194

189:                                              ; preds = %186
  %190 = load ptr, ptr %122, align 8, !tbaa !16
  %191 = tail call zeroext i8 @is_gimple_reg_type(ptr noundef %190) #26
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %194, label %193

193:                                              ; preds = %189
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.71) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %121) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %139) #26
  br label %1436

194:                                              ; preds = %189, %186
  %195 = icmp eq i8 %151, 0
  br i1 %195, label %196, label %1436

196:                                              ; preds = %194
  %197 = tail call fastcc zeroext i8 @verify_types_in_gimple_reference(ptr noundef nonnull %139, i8 noundef zeroext 0)
  %198 = icmp ne i8 %197, 0
  %199 = zext i1 %198 to i8
  br label %1433

200:                                              ; preds = %150, %150
  %201 = tail call zeroext i8 @is_gimple_reg(ptr noundef nonnull %121) #26
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %203, label %1433

203:                                              ; preds = %200
  %204 = tail call zeroext i8 @is_gimple_reg(ptr noundef nonnull %139) #26
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %1433

206:                                              ; preds = %203
  %207 = load ptr, ptr %122, align 8, !tbaa !16
  %208 = tail call zeroext i8 @is_gimple_reg_type(ptr noundef %207) #26
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %1433, label %210

210:                                              ; preds = %206
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.71) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %121) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %139) #26
  br label %1436

211:                                              ; preds = %58
  %212 = load i32, ptr %9, align 8
  %213 = trunc i32 %212 to i8
  switch i8 %213, label %216 [
    i8 6, label %214
    i8 1, label %214
    i8 8, label %218
  ]

214:                                              ; preds = %211, %211
  %215 = lshr i32 %212, 16
  br label %218

216:                                              ; preds = %211
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1446, ptr noundef nonnull @.str.2) #26
  %217 = load i32, ptr %9, align 8
  br label %218

218:                                              ; preds = %216, %214, %211
  %219 = phi i32 [ %212, %214 ], [ %217, %216 ], [ %212, %211 ]
  %220 = phi i32 [ %215, %214 ], [ 0, %216 ], [ 59, %211 ]
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %221
  %223 = load i8, ptr %222, align 1, !tbaa !16
  %224 = icmp eq i8 %223, 3
  br i1 %224, label %225, label %246

225:                                              ; preds = %218
  %226 = and i32 %219, 255
  %227 = add nsw i32 %226, -1
  %228 = icmp ult i32 %227, 9
  tail call void @llvm.assume(i1 %228)
  %229 = zext i32 %226 to i64
  %230 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %229
  %231 = load i32, ptr %230, align 4, !tbaa !16
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %232
  %234 = load i64, ptr %233, align 8, !tbaa !50
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %238

236:                                              ; preds = %225
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %237 = load i32, ptr %9, align 8
  br label %238

238:                                              ; preds = %236, %225
  %239 = phi i32 [ %237, %236 ], [ %219, %225 ]
  %240 = getelementptr inbounds i8, ptr %9, i64 %234
  %241 = getelementptr inbounds ptr, ptr %240, i64 1
  %242 = load ptr, ptr %241, align 8, !tbaa !5
  %243 = load i64, ptr %242, align 8
  %244 = trunc i64 %243 to i32
  %245 = and i32 %244, 65535
  br label %246

246:                                              ; preds = %238, %218
  %247 = phi i32 [ %239, %238 ], [ %219, %218 ]
  %248 = phi i32 [ %245, %238 ], [ %220, %218 ]
  %249 = and i32 %247, 255
  %250 = add nsw i32 %249, -10
  %251 = icmp ult i32 %250, -9
  br i1 %251, label %269, label %252

252:                                              ; preds = %246
  %253 = zext i32 %249 to i64
  %254 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %253
  %255 = load i32, ptr %254, align 4, !tbaa !16
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %256
  %258 = load i64, ptr %257, align 8, !tbaa !50
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %264

260:                                              ; preds = %252
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %261 = load i32, ptr %9, align 8
  %262 = and i32 %261, 255
  %263 = add nsw i32 %262, -10
  br label %264

264:                                              ; preds = %260, %252
  %265 = phi i32 [ %263, %260 ], [ %250, %252 ]
  %266 = phi i32 [ %262, %260 ], [ %249, %252 ]
  %267 = getelementptr inbounds i8, ptr %9, i64 %258
  %268 = load ptr, ptr %267, align 8, !tbaa !5
  br label %269

269:                                              ; preds = %264, %246
  %270 = phi i32 [ %250, %246 ], [ %265, %264 ]
  %271 = phi i32 [ %249, %246 ], [ %266, %264 ]
  %272 = phi ptr [ null, %246 ], [ %268, %264 ]
  %273 = getelementptr inbounds %struct.tree_common, ptr %272, i64 0, i32 2
  %274 = load ptr, ptr %273, align 8, !tbaa !16
  %275 = icmp ult i32 %270, -9
  br i1 %275, label %289, label %276

276:                                              ; preds = %269
  %277 = zext i32 %271 to i64
  %278 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %277
  %279 = load i32, ptr %278, align 4, !tbaa !16
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %280
  %282 = load i64, ptr %281, align 8, !tbaa !50
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %285

284:                                              ; preds = %276
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %285

285:                                              ; preds = %284, %276
  %286 = getelementptr inbounds i8, ptr %9, i64 %282
  %287 = getelementptr inbounds ptr, ptr %286, i64 1
  %288 = load ptr, ptr %287, align 8, !tbaa !5
  br label %289

289:                                              ; preds = %285, %269
  %290 = phi ptr [ %288, %285 ], [ null, %269 ]
  %291 = getelementptr inbounds %struct.tree_common, ptr %290, i64 0, i32 2
  %292 = load ptr, ptr %291, align 8, !tbaa !16
  %293 = tail call zeroext i8 @is_gimple_reg(ptr noundef nonnull %272) #26
  %294 = icmp eq i8 %293, 0
  br i1 %294, label %295, label %303

295:                                              ; preds = %289
  %296 = load i32, ptr @optimize, align 4, !tbaa !20
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %302

298:                                              ; preds = %295
  %299 = load i64, ptr %274, align 8
  %300 = and i64 %299, 65535
  %301 = icmp eq i64 %300, 13
  br i1 %301, label %303, label %302

302:                                              ; preds = %298, %295
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.81) #26
  br label %1436

303:                                              ; preds = %298, %289
  %304 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %290) #26
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %306, label %307

306:                                              ; preds = %303
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.82) #26
  br label %1436

307:                                              ; preds = %303
  %308 = trunc i32 %248 to i16
  switch i16 %308, label %430 [
    i16 116, label %309
    i16 113, label %309
    i16 114, label %372
    i16 115, label %391
    i16 78, label %408
    i16 77, label %419
    i16 174, label %1448
    i16 175, label %1448
    i16 164, label %1448
    i16 165, label %1448
    i16 166, label %1448
    i16 176, label %1448
    i16 177, label %1448
    i16 96, label %431
    i16 79, label %431
    i16 82, label %431
    i16 90, label %431
    i16 112, label %431
    i16 117, label %431
    i16 124, label %431
  ]

309:                                              ; preds = %307, %307
  %310 = load i64, ptr %274, align 8
  %311 = trunc i64 %310 to i32
  %312 = and i32 %311, 65535
  %313 = trunc i64 %310 to i16
  switch i16 %313, label %314 [
    i16 10, label %318
    i16 12, label %318
  ]

314:                                              ; preds = %309
  %315 = load i64, ptr %292, align 8
  %316 = trunc i64 %315 to i32
  %317 = and i32 %316, 65535
  br label %335

318:                                              ; preds = %309, %309
  %319 = load i64, ptr %292, align 8
  %320 = trunc i64 %319 to i32
  %321 = and i32 %320, 65535
  %322 = add nsw i32 %321, -6
  %323 = icmp ult i32 %322, 3
  br i1 %323, label %324, label %335

324:                                              ; preds = %318
  %325 = getelementptr inbounds %struct.tree_type, ptr %274, i64 0, i32 6
  %326 = load i32, ptr %325, align 4
  %327 = and i32 %326, 1023
  %328 = getelementptr inbounds %struct.tree_type, ptr %292, i64 0, i32 6
  %329 = load i32, ptr %328, align 4
  %330 = and i32 %329, 1023
  %331 = icmp uge i32 %327, %330
  %332 = load ptr, ptr @sizetype_tab, align 16
  %333 = icmp eq ptr %292, %332
  %334 = select i1 %331, i1 true, i1 %333
  br i1 %334, label %1448, label %335

335:                                              ; preds = %324, %318, %314
  %336 = phi i32 [ %317, %314 ], [ %321, %318 ], [ %321, %324 ]
  %337 = phi i32 [ %316, %314 ], [ %320, %318 ], [ %320, %324 ]
  %338 = phi i64 [ %315, %314 ], [ %319, %318 ], [ %319, %324 ]
  %339 = trunc i64 %338 to i16
  switch i16 %339, label %354 [
    i16 10, label %340
    i16 12, label %340
  ]

340:                                              ; preds = %335, %335
  %341 = add nsw i32 %312, -6
  %342 = icmp ult i32 %341, 3
  br i1 %342, label %343, label %354

343:                                              ; preds = %340
  %344 = getelementptr inbounds %struct.tree_type, ptr %292, i64 0, i32 6
  %345 = load i32, ptr %344, align 4
  %346 = and i32 %345, 1023
  %347 = getelementptr inbounds %struct.tree_type, ptr %274, i64 0, i32 6
  %348 = load i32, ptr %347, align 4
  %349 = and i32 %348, 1023
  %350 = icmp uge i32 %346, %349
  %351 = load ptr, ptr @sizetype_tab, align 16
  %352 = icmp eq ptr %274, %351
  %353 = select i1 %350, i1 true, i1 %352
  br i1 %353, label %1448, label %354

354:                                              ; preds = %343, %340, %335
  switch i16 %313, label %361 [
    i16 5, label %355
    i16 8, label %358
  ]

355:                                              ; preds = %354
  %356 = and i64 %338, 65535
  %357 = icmp eq i64 %356, 8
  br i1 %357, label %1448, label %361

358:                                              ; preds = %354
  %359 = and i64 %338, 65535
  %360 = icmp eq i64 %359, 5
  br i1 %360, label %1448, label %361

361:                                              ; preds = %358, %355, %354
  %362 = and i32 %311, 65534
  %363 = icmp eq i32 %362, 6
  %364 = icmp eq i32 %312, 8
  %365 = or i1 %363, %364
  %366 = and i32 %337, 65534
  %367 = icmp eq i32 %366, 6
  %368 = icmp eq i32 %336, 8
  %369 = or i1 %368, %367
  %370 = xor i1 %365, %369
  br i1 %370, label %371, label %1448

371:                                              ; preds = %361
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.83) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %274) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %292) #26
  br label %1436

372:                                              ; preds = %307
  %373 = load i64, ptr %292, align 8
  %374 = trunc i64 %373 to i16
  switch i16 %374, label %390 [
    i16 10, label %375
    i16 12, label %375
  ]

375:                                              ; preds = %372, %372
  %376 = load i64, ptr %274, align 8
  %377 = trunc i64 %376 to i16
  switch i16 %377, label %390 [
    i16 10, label %378
    i16 12, label %378
  ]

378:                                              ; preds = %375, %375
  %379 = getelementptr inbounds %struct.tree_common, ptr %292, i64 0, i32 2
  %380 = load ptr, ptr %379, align 8, !tbaa !16
  %381 = load i64, ptr %380, align 8
  %382 = lshr i64 %381, 56
  %383 = trunc i64 %382 to i32
  %384 = getelementptr inbounds %struct.tree_common, ptr %274, i64 0, i32 2
  %385 = load ptr, ptr %384, align 8, !tbaa !16
  %386 = load i64, ptr %385, align 8
  %387 = lshr i64 %386, 56
  %388 = trunc i64 %387 to i32
  %389 = icmp eq i32 %383, %388
  br i1 %389, label %390, label %1448

390:                                              ; preds = %378, %375, %372
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.84) #26
  tail call void @debug_generic_expr(ptr noundef %274) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %292) #26
  br label %1436

391:                                              ; preds = %307
  %392 = load i64, ptr %274, align 8
  %393 = and i64 %392, 65535
  %394 = icmp eq i64 %393, 11
  %395 = load i64, ptr %292, align 8
  br i1 %394, label %396, label %400

396:                                              ; preds = %391
  %397 = trunc i64 %395 to i16
  %398 = add i16 %397, -6
  %399 = icmp ult i16 %398, 6
  br i1 %399, label %1438, label %400

400:                                              ; preds = %1438, %396, %391
  %401 = and i64 %395, 65535
  %402 = icmp eq i64 %401, 11
  br i1 %402, label %403, label %407

403:                                              ; preds = %400
  %404 = trunc i64 %392 to i16
  %405 = add i16 %404, -6
  %406 = icmp ult i16 %405, 6
  br i1 %406, label %1443, label %407

407:                                              ; preds = %1443, %403, %400
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.85) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %274) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %292) #26
  br label %1436

408:                                              ; preds = %307
  %409 = load i64, ptr %292, align 8
  %410 = trunc i64 %409 to i32
  %411 = and i32 %410, 65535
  %412 = add nsw i32 %411, -6
  %413 = icmp ult i32 %412, 3
  br i1 %413, label %414, label %418

414:                                              ; preds = %408
  %415 = load i64, ptr %274, align 8
  %416 = and i64 %415, 65535
  %417 = icmp eq i64 %416, 9
  br i1 %417, label %1448, label %418

418:                                              ; preds = %414, %408
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.86) #26
  tail call void @debug_generic_expr(ptr noundef %274) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %292) #26
  br label %1436

419:                                              ; preds = %307
  %420 = load i64, ptr %274, align 8
  %421 = trunc i64 %420 to i32
  %422 = and i32 %421, 65535
  %423 = add nsw i32 %422, -6
  %424 = icmp ult i32 %423, 3
  br i1 %424, label %425, label %429

425:                                              ; preds = %419
  %426 = load i64, ptr %292, align 8
  %427 = and i64 %426, 65535
  %428 = icmp eq i64 %427, 9
  br i1 %428, label %1448, label %429

429:                                              ; preds = %425, %419
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.87) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %274) #26
  tail call void @debug_generic_expr(ptr noundef %292) #26
  br label %1436

430:                                              ; preds = %307
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3206, ptr noundef nonnull @.str.2) #26
  br label %431

431:                                              ; preds = %430, %307, %307, %307, %307, %307, %307, %307
  %432 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %274, ptr noundef %292) #26
  %433 = icmp eq i8 %432, 0
  br i1 %433, label %434, label %1448

434:                                              ; preds = %431
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.88) #26
  tail call void @debug_generic_expr(ptr noundef %274) #26
  tail call void @debug_generic_expr(ptr noundef %292) #26
  br label %1436

435:                                              ; preds = %58
  %436 = load i32, ptr %9, align 8
  %437 = trunc i32 %436 to i8
  switch i8 %437, label %440 [
    i8 6, label %438
    i8 1, label %438
    i8 8, label %442
  ]

438:                                              ; preds = %435, %435
  %439 = lshr i32 %436, 16
  br label %442

440:                                              ; preds = %435
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1446, ptr noundef nonnull @.str.2) #26
  %441 = load i32, ptr %9, align 8
  br label %442

442:                                              ; preds = %440, %438, %435
  %443 = phi i32 [ %436, %438 ], [ %441, %440 ], [ %436, %435 ]
  %444 = phi i32 [ %439, %438 ], [ 0, %440 ], [ 59, %435 ]
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds [0 x i8], ptr @gimple_rhs_class_table, i64 0, i64 %445
  %447 = load i8, ptr %446, align 1, !tbaa !16
  %448 = icmp eq i8 %447, 3
  br i1 %448, label %449, label %470

449:                                              ; preds = %442
  %450 = and i32 %443, 255
  %451 = add nsw i32 %450, -1
  %452 = icmp ult i32 %451, 9
  tail call void @llvm.assume(i1 %452)
  %453 = zext i32 %450 to i64
  %454 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %453
  %455 = load i32, ptr %454, align 4, !tbaa !16
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %456
  %458 = load i64, ptr %457, align 8, !tbaa !50
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %462

460:                                              ; preds = %449
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %461 = load i32, ptr %9, align 8
  br label %462

462:                                              ; preds = %460, %449
  %463 = phi i32 [ %461, %460 ], [ %443, %449 ]
  %464 = getelementptr inbounds i8, ptr %9, i64 %458
  %465 = getelementptr inbounds ptr, ptr %464, i64 1
  %466 = load ptr, ptr %465, align 8, !tbaa !5
  %467 = load i64, ptr %466, align 8
  %468 = trunc i64 %467 to i32
  %469 = and i32 %468, 65535
  br label %470

470:                                              ; preds = %462, %442
  %471 = phi i32 [ %463, %462 ], [ %443, %442 ]
  %472 = phi i32 [ %469, %462 ], [ %444, %442 ]
  %473 = and i32 %471, 255
  %474 = add nsw i32 %473, -10
  %475 = icmp ult i32 %474, -9
  br i1 %475, label %493, label %476

476:                                              ; preds = %470
  %477 = zext i32 %473 to i64
  %478 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %477
  %479 = load i32, ptr %478, align 4, !tbaa !16
  %480 = zext i32 %479 to i64
  %481 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %480
  %482 = load i64, ptr %481, align 8, !tbaa !50
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %488

484:                                              ; preds = %476
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %485 = load i32, ptr %9, align 8
  %486 = and i32 %485, 255
  %487 = add nsw i32 %486, -10
  br label %488

488:                                              ; preds = %484, %476
  %489 = phi i32 [ %487, %484 ], [ %474, %476 ]
  %490 = phi i32 [ %486, %484 ], [ %473, %476 ]
  %491 = getelementptr inbounds i8, ptr %9, i64 %482
  %492 = load ptr, ptr %491, align 8, !tbaa !5
  br label %493

493:                                              ; preds = %488, %470
  %494 = phi i32 [ %474, %470 ], [ %489, %488 ]
  %495 = phi i32 [ %473, %470 ], [ %490, %488 ]
  %496 = phi ptr [ null, %470 ], [ %492, %488 ]
  %497 = getelementptr inbounds %struct.tree_common, ptr %496, i64 0, i32 2
  %498 = load ptr, ptr %497, align 8, !tbaa !16
  %499 = icmp ult i32 %494, -9
  br i1 %499, label %513, label %500

500:                                              ; preds = %493
  %501 = zext i32 %495 to i64
  %502 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %501
  %503 = load i32, ptr %502, align 4, !tbaa !16
  %504 = zext i32 %503 to i64
  %505 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %504
  %506 = load i64, ptr %505, align 8, !tbaa !50
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %509

508:                                              ; preds = %500
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %509

509:                                              ; preds = %508, %500
  %510 = getelementptr inbounds i8, ptr %9, i64 %506
  %511 = getelementptr inbounds ptr, ptr %510, i64 1
  %512 = load ptr, ptr %511, align 8, !tbaa !5
  br label %513

513:                                              ; preds = %509, %493
  %514 = phi ptr [ %512, %509 ], [ null, %493 ]
  %515 = getelementptr inbounds %struct.tree_common, ptr %514, i64 0, i32 2
  %516 = load ptr, ptr %515, align 8, !tbaa !16
  %517 = getelementptr i8, ptr %9, i64 12
  %518 = load i32, ptr %517, align 4, !tbaa !16
  %519 = icmp ugt i32 %518, 2
  br i1 %519, label %520, label %538

520:                                              ; preds = %513
  %521 = load i32, ptr %9, align 8
  %522 = and i32 %521, 255
  %523 = add nsw i32 %522, -10
  %524 = icmp ult i32 %523, -9
  br i1 %524, label %538, label %525

525:                                              ; preds = %520
  %526 = zext i32 %522 to i64
  %527 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %526
  %528 = load i32, ptr %527, align 4, !tbaa !16
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %529
  %531 = load i64, ptr %530, align 8, !tbaa !50
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %533, label %534

533:                                              ; preds = %525
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %534

534:                                              ; preds = %533, %525
  %535 = getelementptr inbounds i8, ptr %9, i64 %531
  %536 = getelementptr inbounds ptr, ptr %535, i64 2
  %537 = load ptr, ptr %536, align 8, !tbaa !5
  br label %538

538:                                              ; preds = %534, %520, %513
  %539 = phi ptr [ null, %513 ], [ %537, %534 ], [ null, %520 ]
  %540 = getelementptr inbounds %struct.tree_common, ptr %539, i64 0, i32 2
  %541 = load ptr, ptr %540, align 8, !tbaa !16
  %542 = tail call zeroext i8 @is_gimple_reg(ptr noundef nonnull %496) #26
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %544, label %552

544:                                              ; preds = %538
  %545 = load i32, ptr @optimize, align 4, !tbaa !20
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %551

547:                                              ; preds = %544
  %548 = load i64, ptr %498, align 8
  %549 = and i64 %548, 65535
  %550 = icmp eq i64 %549, 13
  br i1 %550, label %552, label %551

551:                                              ; preds = %547, %544
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.89) #26
  br label %1436

552:                                              ; preds = %547, %538
  %553 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %514) #26
  %554 = icmp eq i8 %553, 0
  br i1 %554, label %558, label %555

555:                                              ; preds = %552
  %556 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %539) #26
  %557 = icmp eq i8 %556, 0
  br i1 %557, label %558, label %559

558:                                              ; preds = %555, %552
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.90) #26
  br label %1436

559:                                              ; preds = %555
  %560 = trunc i32 %472 to i16
  switch i16 %560, label %734 [
    i16 123, label %563
    i16 83, label %580
    i16 84, label %580
    i16 85, label %580
    i16 86, label %580
    i16 170, label %623
    i16 171, label %623
    i16 63, label %662
    i16 64, label %561
    i16 66, label %698
    i16 91, label %712
    i16 92, label %712
    i16 93, label %713
    i16 94, label %713
    i16 95, label %713
    i16 97, label %732
    i16 98, label %732
    i16 99, label %732
    i16 100, label %732
    i16 101, label %732
    i16 102, label %732
    i16 103, label %732
    i16 104, label %732
    i16 105, label %732
    i16 106, label %732
    i16 107, label %732
    i16 108, label %732
    i16 109, label %732
    i16 110, label %732
    i16 168, label %1448
    i16 169, label %1448
    i16 172, label %1448
    i16 173, label %1448
    i16 178, label %1448
    i16 179, label %1448
    i16 180, label %1448
    i16 181, label %1448
    i16 182, label %1448
    i16 183, label %1448
    i16 184, label %1448
    i16 65, label %735
    i16 67, label %735
    i16 68, label %735
    i16 69, label %735
    i16 70, label %735
    i16 71, label %735
    i16 72, label %735
    i16 73, label %735
    i16 74, label %735
    i16 75, label %735
    i16 76, label %735
    i16 80, label %735
    i16 81, label %735
    i16 87, label %735
    i16 88, label %735
    i16 89, label %735
  ]

561:                                              ; preds = %559
  %562 = load i64, ptr %498, align 8
  br label %688

563:                                              ; preds = %559
  %564 = load i64, ptr %498, align 8
  %565 = and i64 %564, 65535
  %566 = icmp eq i64 %565, 13
  br i1 %566, label %567, label %579

567:                                              ; preds = %563
  %568 = load i64, ptr %516, align 8
  %569 = trunc i64 %568 to i32
  %570 = and i32 %569, 65534
  %571 = add nsw i32 %570, -6
  %572 = icmp ult i32 %571, 4
  br i1 %572, label %573, label %579

573:                                              ; preds = %567
  %574 = load i64, ptr %541, align 8
  %575 = trunc i64 %574 to i32
  %576 = and i32 %575, 65534
  %577 = add nsw i32 %576, -6
  %578 = icmp ult i32 %577, 4
  br i1 %578, label %1448, label %579

579:                                              ; preds = %573, %567, %563
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.91) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %498) #26
  tail call void @debug_generic_expr(ptr noundef %516) #26
  tail call void @debug_generic_expr(ptr noundef %541) #26
  br label %1436

580:                                              ; preds = %559, %559, %559, %559
  %581 = load i64, ptr %516, align 8
  %582 = trunc i64 %581 to i16
  switch i16 %582, label %622 [
    i16 6, label %591
    i16 7, label %591
    i16 8, label %591
    i16 11, label %591
    i16 14, label %583
  ]

583:                                              ; preds = %580
  %584 = getelementptr inbounds %struct.tree_common, ptr %516, i64 0, i32 2
  %585 = load ptr, ptr %584, align 8, !tbaa !16
  %586 = load i64, ptr %585, align 8
  %587 = trunc i64 %586 to i32
  %588 = and i32 %587, 65535
  %589 = add nsw i32 %588, -6
  %590 = icmp ult i32 %589, 3
  br i1 %590, label %591, label %622

591:                                              ; preds = %583, %580, %580, %580, %580
  %592 = load i64, ptr %541, align 8
  %593 = trunc i64 %592 to i32
  %594 = and i32 %593, 65535
  %595 = add nsw i32 %594, -6
  %596 = icmp ult i32 %595, 3
  br i1 %596, label %619, label %597

597:                                              ; preds = %591
  %598 = and i64 %581, 65535
  %599 = icmp eq i64 %598, 14
  br i1 %599, label %600, label %622

600:                                              ; preds = %597
  %601 = getelementptr inbounds %struct.tree_common, ptr %516, i64 0, i32 2
  %602 = load ptr, ptr %601, align 8, !tbaa !16
  %603 = load i64, ptr %602, align 8
  %604 = trunc i64 %603 to i32
  %605 = and i32 %604, 65535
  %606 = add nsw i32 %605, -6
  %607 = icmp ult i32 %606, 3
  %608 = and i64 %592, 65535
  %609 = icmp eq i64 %608, 14
  %610 = and i1 %609, %607
  br i1 %610, label %611, label %622

611:                                              ; preds = %600
  %612 = getelementptr inbounds %struct.tree_common, ptr %541, i64 0, i32 2
  %613 = load ptr, ptr %612, align 8, !tbaa !16
  %614 = load i64, ptr %613, align 8
  %615 = trunc i64 %614 to i32
  %616 = and i32 %615, 65535
  %617 = add nsw i32 %616, -6
  %618 = icmp ult i32 %617, 3
  br i1 %618, label %619, label %622

619:                                              ; preds = %611, %591
  %620 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %498, ptr noundef nonnull %516) #26
  %621 = icmp eq i8 %620, 0
  br i1 %621, label %622, label %1448

622:                                              ; preds = %619, %611, %600, %597, %583, %580
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.92) #26
  tail call void @debug_generic_expr(ptr noundef %498) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %516) #26
  tail call void @debug_generic_expr(ptr noundef %541) #26
  br label %1436

623:                                              ; preds = %559, %559
  %624 = load i64, ptr %516, align 8
  %625 = and i64 %624, 65535
  %626 = icmp eq i64 %625, 14
  br i1 %626, label %627, label %646

627:                                              ; preds = %623
  %628 = getelementptr inbounds %struct.tree_common, ptr %516, i64 0, i32 2
  %629 = load ptr, ptr %628, align 8, !tbaa !16
  %630 = load i64, ptr %629, align 8
  %631 = trunc i64 %630 to i16
  switch i16 %631, label %646 [
    i16 6, label %632
    i16 7, label %632
    i16 8, label %632
    i16 11, label %632
    i16 9, label %632
  ]

632:                                              ; preds = %627, %627, %627, %627, %627
  %633 = load i64, ptr %541, align 8
  %634 = trunc i64 %633 to i16
  switch i16 %634, label %646 [
    i16 6, label %643
    i16 7, label %643
    i16 8, label %643
    i16 14, label %635
  ]

635:                                              ; preds = %632
  %636 = getelementptr inbounds %struct.tree_common, ptr %541, i64 0, i32 2
  %637 = load ptr, ptr %636, align 8, !tbaa !16
  %638 = load i64, ptr %637, align 8
  %639 = trunc i64 %638 to i32
  %640 = and i32 %639, 65535
  %641 = add nsw i32 %640, -6
  %642 = icmp ult i32 %641, 3
  br i1 %642, label %643, label %646

643:                                              ; preds = %635, %632, %632, %632
  %644 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %498, ptr noundef nonnull %516) #26
  %645 = icmp eq i8 %644, 0
  br i1 %645, label %646, label %647

646:                                              ; preds = %643, %635, %632, %627, %623
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.93) #26
  tail call void @debug_generic_expr(ptr noundef %498) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %516) #26
  tail call void @debug_generic_expr(ptr noundef %541) #26
  br label %1436

647:                                              ; preds = %643
  %648 = load ptr, ptr %628, align 8, !tbaa !16
  %649 = load i64, ptr %648, align 8
  %650 = and i64 %649, 65535
  %651 = icmp eq i64 %650, 9
  br i1 %651, label %652, label %1448

652:                                              ; preds = %647
  %653 = load i64, ptr %539, align 8
  %654 = and i64 %653, 65535
  %655 = icmp eq i64 %654, 23
  br i1 %655, label %656, label %661

656:                                              ; preds = %652
  %657 = getelementptr inbounds %struct.tree_type, ptr %648, i64 0, i32 2
  %658 = load ptr, ptr %657, align 8, !tbaa !16
  %659 = tail call ptr @div_if_zero_remainder(i32 noundef 76, ptr noundef nonnull %539, ptr noundef %658) #26
  %660 = icmp eq ptr %659, null
  br i1 %660, label %661, label %1448

661:                                              ; preds = %656, %652
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.94) #26
  br label %1436

662:                                              ; preds = %559
  %663 = load i64, ptr %498, align 8
  %664 = and i64 %663, 65535
  %665 = icmp eq i64 %664, 14
  br i1 %665, label %666, label %688

666:                                              ; preds = %662
  %667 = getelementptr inbounds %struct.tree_common, ptr %498, i64 0, i32 2
  %668 = load ptr, ptr %667, align 8, !tbaa !16
  %669 = load i64, ptr %668, align 8
  %670 = trunc i64 %669 to i16
  switch i16 %670, label %688 [
    i16 10, label %671
    i16 12, label %671
  ]

671:                                              ; preds = %666, %666
  %672 = load i64, ptr %516, align 8
  %673 = and i64 %672, 65535
  %674 = icmp eq i64 %673, 14
  br i1 %674, label %675, label %679

675:                                              ; preds = %671
  %676 = load i64, ptr %541, align 8
  %677 = and i64 %676, 65535
  %678 = icmp eq i64 %677, 14
  br i1 %678, label %680, label %679

679:                                              ; preds = %675, %671
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.95) #26
  br label %1436

680:                                              ; preds = %675
  %681 = getelementptr inbounds %struct.tree_common, ptr %516, i64 0, i32 2
  %682 = load ptr, ptr %681, align 8, !tbaa !16
  %683 = getelementptr inbounds %struct.tree_common, ptr %541, i64 0, i32 2
  %684 = load ptr, ptr %683, align 8, !tbaa !16
  %685 = load i64, ptr %684, align 8
  %686 = trunc i64 %685 to i16
  switch i16 %686, label %698 [
    i16 10, label %687
    i16 12, label %687
  ]

687:                                              ; preds = %680, %680
  br label %698

688:                                              ; preds = %666, %662, %561
  %689 = phi i64 [ %562, %561 ], [ %663, %666 ], [ %663, %662 ]
  %690 = trunc i64 %689 to i16
  switch i16 %690, label %691 [
    i16 10, label %697
    i16 12, label %697
  ]

691:                                              ; preds = %688
  %692 = load i64, ptr %516, align 8
  %693 = trunc i64 %692 to i16
  switch i16 %693, label %694 [
    i16 10, label %697
    i16 12, label %697
  ]

694:                                              ; preds = %691
  %695 = load i64, ptr %541, align 8
  %696 = trunc i64 %695 to i16
  switch i16 %696, label %735 [
    i16 10, label %697
    i16 12, label %697
  ]

697:                                              ; preds = %694, %694, %691, %691, %688, %688
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.96) #26
  br label %1436

698:                                              ; preds = %687, %680, %559
  %699 = phi ptr [ %516, %559 ], [ %684, %687 ], [ %682, %680 ]
  %700 = phi ptr [ %498, %559 ], [ %668, %687 ], [ %668, %680 ]
  %701 = phi ptr [ %541, %559 ], [ %682, %687 ], [ %684, %680 ]
  %702 = load i64, ptr %699, align 8
  %703 = trunc i64 %702 to i16
  switch i16 %703, label %711 [
    i16 10, label %704
    i16 12, label %704
  ]

704:                                              ; preds = %698, %698
  %705 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %700, ptr noundef nonnull %699) #26
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %711, label %707

707:                                              ; preds = %704
  %708 = load ptr, ptr @sizetype_tab, align 16, !tbaa !5
  %709 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %708, ptr noundef %701) #26
  %710 = icmp eq i8 %709, 0
  br i1 %710, label %711, label %1448

711:                                              ; preds = %707, %704, %698
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.97) #26
  tail call void @debug_generic_stmt(ptr noundef %700) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %699) #26
  tail call void @debug_generic_stmt(ptr noundef %701) #26
  br label %1436

712:                                              ; preds = %559, %559
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3394, ptr noundef nonnull @.str.2) #26
  br label %713

713:                                              ; preds = %712, %559, %559, %559
  %714 = load i64, ptr %516, align 8
  %715 = trunc i64 %714 to i32
  %716 = and i32 %715, 65535
  %717 = add nsw i32 %716, -6
  %718 = icmp ult i32 %717, 3
  br i1 %718, label %719, label %731

719:                                              ; preds = %713
  %720 = load i64, ptr %541, align 8
  %721 = trunc i64 %720 to i32
  %722 = and i32 %721, 65535
  %723 = add nsw i32 %722, -6
  %724 = icmp ult i32 %723, 3
  br i1 %724, label %725, label %731

725:                                              ; preds = %719
  %726 = load i64, ptr %498, align 8
  %727 = trunc i64 %726 to i32
  %728 = and i32 %727, 65535
  %729 = add nsw i32 %728, -6
  %730 = icmp ult i32 %729, 3
  br i1 %730, label %1448, label %731

731:                                              ; preds = %725, %719, %713
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.98) #26
  tail call void @debug_generic_expr(ptr noundef %498) #26
  tail call void @debug_generic_expr(ptr noundef nonnull %516) #26
  tail call void @debug_generic_expr(ptr noundef %541) #26
  br label %1436

732:                                              ; preds = %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559
  %733 = tail call fastcc zeroext i8 @verify_gimple_comparison(ptr noundef %498, ptr noundef nonnull %514, ptr noundef nonnull %539), !range !268
  br label %1433

734:                                              ; preds = %559
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3467, ptr noundef nonnull @.str.2) #26
  br label %735

735:                                              ; preds = %734, %694, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559
  %736 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %498, ptr noundef %516) #26
  %737 = icmp eq i8 %736, 0
  br i1 %737, label %741, label %738

738:                                              ; preds = %735
  %739 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %498, ptr noundef %541) #26
  %740 = icmp eq i8 %739, 0
  br i1 %740, label %741, label %1448

741:                                              ; preds = %738, %735
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.99) #26
  tail call void @debug_generic_stmt(ptr noundef %498) #26
  tail call void @debug_generic_stmt(ptr noundef %516) #26
  tail call void @debug_generic_stmt(ptr noundef %541) #26
  br label %1436

742:                                              ; preds = %58
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3616, ptr noundef nonnull @.str.2) #26
  br label %1448

743:                                              ; preds = %6
  %744 = add nsw i32 %11, -1
  %745 = icmp ult i32 %744, 9
  tail call void @llvm.assume(i1 %745)
  %746 = zext i32 %11 to i64
  %747 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %746
  %748 = load i32, ptr %747, align 4, !tbaa !16
  %749 = zext i32 %748 to i64
  %750 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %749
  %751 = load i64, ptr %750, align 8, !tbaa !50
  %752 = icmp eq i64 %751, 0
  br i1 %752, label %753, label %754

753:                                              ; preds = %743
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %754

754:                                              ; preds = %753, %743
  %755 = getelementptr inbounds i8, ptr %9, i64 %751
  %756 = load ptr, ptr %755, align 8, !tbaa !5
  %757 = load i64, ptr %756, align 8
  %758 = and i64 %757, 65535
  %759 = icmp ne i64 %758, 30
  %760 = zext i1 %759 to i8
  br label %1433

761:                                              ; preds = %6
  %762 = add nsw i32 %11, -1
  %763 = icmp ult i32 %762, 9
  tail call void @llvm.assume(i1 %763)
  %764 = zext i32 %11 to i64
  %765 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %764
  %766 = load i32, ptr %765, align 4, !tbaa !16
  %767 = zext i32 %766 to i64
  %768 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %767
  %769 = load i64, ptr %768, align 8, !tbaa !50
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %771, label %772

771:                                              ; preds = %761
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %772

772:                                              ; preds = %771, %761
  %773 = getelementptr inbounds i8, ptr %9, i64 %769
  %774 = getelementptr inbounds ptr, ptr %773, i64 1
  %775 = load ptr, ptr %774, align 8, !tbaa !5
  %776 = load i64, ptr %775, align 8
  %777 = and i64 %776, 65535
  %778 = icmp eq i64 %777, 50
  br i1 %778, label %783, label %779

779:                                              ; preds = %772
  %780 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %775) #26
  %781 = icmp eq i8 %780, 0
  br i1 %781, label %782, label %783

782:                                              ; preds = %779
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.100) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %775) #26
  br label %1436

783:                                              ; preds = %779, %772
  %784 = getelementptr inbounds %struct.tree_common, ptr %775, i64 0, i32 2
  %785 = load ptr, ptr %784, align 8, !tbaa !16
  %786 = load i64, ptr %785, align 8
  %787 = trunc i64 %786 to i16
  switch i16 %787, label %794 [
    i16 10, label %788
    i16 12, label %788
  ]

788:                                              ; preds = %783, %783
  %789 = getelementptr inbounds %struct.tree_common, ptr %785, i64 0, i32 2
  %790 = load ptr, ptr %789, align 8, !tbaa !16
  %791 = load i64, ptr %790, align 8
  %792 = and i64 %791, 65534
  %793 = icmp eq i64 %792, 20
  br i1 %793, label %795, label %794

794:                                              ; preds = %788, %783
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.101) #26
  br label %1436

795:                                              ; preds = %788
  %796 = load i32, ptr %9, align 8
  %797 = and i32 %796, 255
  %798 = add nsw i32 %797, -10
  %799 = icmp ult i32 %798, -9
  br i1 %799, label %859, label %800

800:                                              ; preds = %795
  %801 = zext i32 %797 to i64
  %802 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !16
  %804 = zext i32 %803 to i64
  %805 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %804
  %806 = load i64, ptr %805, align 8, !tbaa !50
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %810

808:                                              ; preds = %800
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %809 = load i32, ptr %9, align 8
  br label %810

810:                                              ; preds = %808, %800
  %811 = phi i32 [ %796, %800 ], [ %809, %808 ]
  %812 = getelementptr inbounds i8, ptr %9, i64 %806
  %813 = load ptr, ptr %812, align 8, !tbaa !5
  %814 = icmp eq ptr %813, null
  br i1 %814, label %859, label %815

815:                                              ; preds = %810
  %816 = and i32 %811, 255
  %817 = add nsw i32 %816, -10
  %818 = icmp ult i32 %817, -9
  br i1 %818, label %831, label %819

819:                                              ; preds = %815
  %820 = zext i32 %816 to i64
  %821 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %820
  %822 = load i32, ptr %821, align 4, !tbaa !16
  %823 = zext i32 %822 to i64
  %824 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %823
  %825 = load i64, ptr %824, align 8, !tbaa !50
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %827, label %828

827:                                              ; preds = %819
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %828

828:                                              ; preds = %827, %819
  %829 = getelementptr inbounds i8, ptr %9, i64 %825
  %830 = load ptr, ptr %829, align 8, !tbaa !5
  br label %831

831:                                              ; preds = %828, %815
  %832 = phi ptr [ %830, %828 ], [ null, %815 ]
  %833 = tail call zeroext i8 @is_gimple_lvalue(ptr noundef %832) #26
  %834 = icmp eq i8 %833, 0
  br i1 %834, label %858, label %835

835:                                              ; preds = %831
  %836 = load i32, ptr %9, align 8
  %837 = and i32 %836, 255
  %838 = add nsw i32 %837, -10
  %839 = icmp ult i32 %838, -9
  br i1 %839, label %852, label %840

840:                                              ; preds = %835
  %841 = zext i32 %837 to i64
  %842 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %841
  %843 = load i32, ptr %842, align 4, !tbaa !16
  %844 = zext i32 %843 to i64
  %845 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %844
  %846 = load i64, ptr %845, align 8, !tbaa !50
  %847 = icmp eq i64 %846, 0
  br i1 %847, label %848, label %849

848:                                              ; preds = %840
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %849

849:                                              ; preds = %848, %840
  %850 = getelementptr inbounds i8, ptr %9, i64 %846
  %851 = load ptr, ptr %850, align 8, !tbaa !5
  br label %852

852:                                              ; preds = %849, %835
  %853 = phi ptr [ %851, %849 ], [ null, %835 ]
  %854 = tail call fastcc zeroext i8 @verify_types_in_gimple_reference(ptr noundef %853, i8 noundef zeroext 1)
  %855 = icmp eq i8 %854, 0
  br i1 %855, label %856, label %858

856:                                              ; preds = %852
  %857 = load i32, ptr %9, align 8
  br label %859

858:                                              ; preds = %852, %831
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.102) #26
  br label %1436

859:                                              ; preds = %856, %810, %795
  %860 = phi i32 [ %857, %856 ], [ %796, %795 ], [ %811, %810 ]
  %861 = and i32 %860, 255
  %862 = add nsw i32 %861, -10
  %863 = icmp ult i32 %862, -9
  br i1 %863, label %882, label %864

864:                                              ; preds = %859
  %865 = zext i32 %861 to i64
  %866 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %865
  %867 = load i32, ptr %866, align 4, !tbaa !16
  %868 = zext i32 %867 to i64
  %869 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %868
  %870 = load i64, ptr %869, align 8, !tbaa !50
  %871 = icmp eq i64 %870, 0
  br i1 %871, label %872, label %873

872:                                              ; preds = %864
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %873

873:                                              ; preds = %872, %864
  %874 = getelementptr inbounds i8, ptr %9, i64 %870
  %875 = load ptr, ptr %874, align 8, !tbaa !5
  %876 = icmp eq ptr %875, null
  br i1 %876, label %882, label %877

877:                                              ; preds = %873
  %878 = tail call i32 @gimple_call_flags(ptr noundef nonnull %9) #26
  %879 = and i32 %878, 8
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %882, label %881

881:                                              ; preds = %877
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.103) #26
  br label %1436

882:                                              ; preds = %877, %873, %859
  %883 = load ptr, ptr %784, align 8, !tbaa !16
  %884 = getelementptr inbounds %struct.tree_common, ptr %883, i64 0, i32 2
  %885 = load ptr, ptr %884, align 8, !tbaa !16
  %886 = load i32, ptr %9, align 8
  %887 = and i32 %886, 255
  %888 = add nsw i32 %887, -10
  %889 = icmp ult i32 %888, -9
  br i1 %889, label %990, label %890

890:                                              ; preds = %882
  %891 = zext i32 %887 to i64
  %892 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %891
  %893 = load i32, ptr %892, align 4, !tbaa !16
  %894 = zext i32 %893 to i64
  %895 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %894
  %896 = load i64, ptr %895, align 8, !tbaa !50
  %897 = icmp eq i64 %896, 0
  br i1 %897, label %898, label %899

898:                                              ; preds = %890
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %899

899:                                              ; preds = %898, %890
  %900 = getelementptr inbounds i8, ptr %9, i64 %896
  %901 = load ptr, ptr %900, align 8, !tbaa !5
  %902 = icmp eq ptr %901, null
  br i1 %902, label %990, label %903

903:                                              ; preds = %899
  %904 = load i32, ptr %9, align 8
  %905 = and i32 %904, 255
  %906 = add nsw i32 %905, -1
  %907 = icmp ult i32 %906, 9
  tail call void @llvm.assume(i1 %907)
  %908 = zext i32 %905 to i64
  %909 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %908
  %910 = load i32, ptr %909, align 4, !tbaa !16
  %911 = zext i32 %910 to i64
  %912 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %911
  %913 = load i64, ptr %912, align 8, !tbaa !50
  %914 = icmp eq i64 %913, 0
  br i1 %914, label %915, label %916

915:                                              ; preds = %903
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %916

916:                                              ; preds = %915, %903
  %917 = getelementptr inbounds i8, ptr %9, i64 %913
  %918 = load ptr, ptr %917, align 8, !tbaa !5
  %919 = getelementptr inbounds %struct.tree_common, ptr %918, i64 0, i32 2
  %920 = load ptr, ptr %919, align 8, !tbaa !16
  %921 = getelementptr inbounds %struct.tree_common, ptr %885, i64 0, i32 2
  %922 = load ptr, ptr %921, align 8, !tbaa !16
  %923 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %920, ptr noundef %922) #26
  %924 = icmp eq i8 %923, 0
  br i1 %924, label %925, label %990

925:                                              ; preds = %916
  %926 = load i32, ptr %9, align 8
  %927 = and i32 %926, 255
  %928 = add nsw i32 %927, -1
  %929 = icmp ult i32 %928, 9
  tail call void @llvm.assume(i1 %929)
  %930 = zext i32 %927 to i64
  %931 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %930
  %932 = load i32, ptr %931, align 4, !tbaa !16
  %933 = zext i32 %932 to i64
  %934 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %933
  %935 = load i64, ptr %934, align 8, !tbaa !50
  %936 = icmp eq i64 %935, 0
  br i1 %936, label %937, label %938

937:                                              ; preds = %925
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %938

938:                                              ; preds = %937, %925
  %939 = getelementptr inbounds i8, ptr %9, i64 %935
  %940 = load ptr, ptr %939, align 8, !tbaa !5
  %941 = getelementptr inbounds %struct.tree_common, ptr %940, i64 0, i32 2
  %942 = load ptr, ptr %941, align 8, !tbaa !16
  %943 = load i64, ptr %942, align 8
  %944 = and i64 %943, 65535
  %945 = icmp eq i64 %944, 10
  br i1 %945, label %967, label %946

946:                                              ; preds = %938
  %947 = load i32, ptr %9, align 8
  %948 = and i32 %947, 255
  %949 = add nsw i32 %948, -1
  %950 = icmp ult i32 %949, 9
  tail call void @llvm.assume(i1 %950)
  %951 = zext i32 %948 to i64
  %952 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %951
  %953 = load i32, ptr %952, align 4, !tbaa !16
  %954 = zext i32 %953 to i64
  %955 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %954
  %956 = load i64, ptr %955, align 8, !tbaa !50
  %957 = icmp eq i64 %956, 0
  br i1 %957, label %958, label %959

958:                                              ; preds = %946
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %959

959:                                              ; preds = %958, %946
  %960 = getelementptr inbounds i8, ptr %9, i64 %956
  %961 = load ptr, ptr %960, align 8, !tbaa !5
  %962 = getelementptr inbounds %struct.tree_common, ptr %961, i64 0, i32 2
  %963 = load ptr, ptr %962, align 8, !tbaa !16
  %964 = load i64, ptr %963, align 8
  %965 = and i64 %964, 65535
  %966 = icmp eq i64 %965, 12
  br i1 %966, label %967, label %971

967:                                              ; preds = %959, %938
  %968 = load ptr, ptr %921, align 8, !tbaa !16
  %969 = load i64, ptr %968, align 8
  %970 = trunc i64 %969 to i16
  switch i16 %970, label %971 [
    i16 10, label %990
    i16 12, label %990
  ]

971:                                              ; preds = %967, %959
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.104) #26
  %972 = load i32, ptr %9, align 8
  %973 = and i32 %972, 255
  %974 = add nsw i32 %973, -1
  %975 = icmp ult i32 %974, 9
  tail call void @llvm.assume(i1 %975)
  %976 = zext i32 %973 to i64
  %977 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %976
  %978 = load i32, ptr %977, align 4, !tbaa !16
  %979 = zext i32 %978 to i64
  %980 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %979
  %981 = load i64, ptr %980, align 8, !tbaa !50
  %982 = icmp eq i64 %981, 0
  br i1 %982, label %983, label %984

983:                                              ; preds = %971
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %984

984:                                              ; preds = %983, %971
  %985 = getelementptr inbounds i8, ptr %9, i64 %981
  %986 = load ptr, ptr %985, align 8, !tbaa !5
  %987 = getelementptr inbounds %struct.tree_common, ptr %986, i64 0, i32 2
  %988 = load ptr, ptr %987, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %988) #26
  %989 = load ptr, ptr %921, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %989) #26
  br label %1436

990:                                              ; preds = %967, %967, %916, %899, %882
  %991 = load i32, ptr %9, align 8
  %992 = and i32 %991, 255
  %993 = add nsw i32 %992, -10
  %994 = icmp ult i32 %993, -9
  br i1 %994, label %1054, label %995

995:                                              ; preds = %990
  %996 = zext i32 %992 to i64
  %997 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %996
  %998 = load i32, ptr %997, align 4, !tbaa !16
  %999 = zext i32 %998 to i64
  %1000 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %999
  %1001 = load i64, ptr %1000, align 8, !tbaa !50
  %1002 = icmp eq i64 %1001, 0
  br i1 %1002, label %1003, label %1005

1003:                                             ; preds = %995
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %1004 = load i32, ptr %9, align 8
  br label %1005

1005:                                             ; preds = %1003, %995
  %1006 = phi i32 [ %991, %995 ], [ %1004, %1003 ]
  %1007 = getelementptr inbounds i8, ptr %9, i64 %1001
  %1008 = getelementptr inbounds ptr, ptr %1007, i64 2
  %1009 = load ptr, ptr %1008, align 8, !tbaa !5
  %1010 = icmp eq ptr %1009, null
  br i1 %1010, label %1054, label %1011

1011:                                             ; preds = %1005
  %1012 = and i32 %1006, 255
  %1013 = add nsw i32 %1012, -10
  %1014 = icmp ult i32 %1013, -9
  br i1 %1014, label %1028, label %1015

1015:                                             ; preds = %1011
  %1016 = zext i32 %1012 to i64
  %1017 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1016
  %1018 = load i32, ptr %1017, align 4, !tbaa !16
  %1019 = zext i32 %1018 to i64
  %1020 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1019
  %1021 = load i64, ptr %1020, align 8, !tbaa !50
  %1022 = icmp eq i64 %1021, 0
  br i1 %1022, label %1023, label %1024

1023:                                             ; preds = %1015
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1024

1024:                                             ; preds = %1023, %1015
  %1025 = getelementptr inbounds i8, ptr %9, i64 %1021
  %1026 = getelementptr inbounds ptr, ptr %1025, i64 2
  %1027 = load ptr, ptr %1026, align 8, !tbaa !5
  br label %1028

1028:                                             ; preds = %1024, %1011
  %1029 = phi ptr [ %1027, %1024 ], [ null, %1011 ]
  %1030 = tail call zeroext i8 @is_gimple_val(ptr noundef %1029) #26
  %1031 = icmp eq i8 %1030, 0
  br i1 %1031, label %1034, label %1032

1032:                                             ; preds = %1028
  %1033 = load i32, ptr %9, align 8
  br label %1054

1034:                                             ; preds = %1028
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.105) #26
  %1035 = load i32, ptr %9, align 8
  %1036 = and i32 %1035, 255
  %1037 = add nsw i32 %1036, -10
  %1038 = icmp ult i32 %1037, -9
  br i1 %1038, label %1052, label %1039

1039:                                             ; preds = %1034
  %1040 = zext i32 %1036 to i64
  %1041 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1040
  %1042 = load i32, ptr %1041, align 4, !tbaa !16
  %1043 = zext i32 %1042 to i64
  %1044 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1043
  %1045 = load i64, ptr %1044, align 8, !tbaa !50
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1047, label %1048

1047:                                             ; preds = %1039
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1048

1048:                                             ; preds = %1047, %1039
  %1049 = getelementptr inbounds i8, ptr %9, i64 %1045
  %1050 = getelementptr inbounds ptr, ptr %1049, i64 2
  %1051 = load ptr, ptr %1050, align 8, !tbaa !5
  br label %1052

1052:                                             ; preds = %1034, %1048
  %1053 = phi ptr [ %1051, %1048 ], [ null, %1034 ]
  tail call void @debug_generic_stmt(ptr noundef %1053) #26
  br label %1436

1054:                                             ; preds = %1032, %1005, %990
  %1055 = phi i32 [ %1033, %1032 ], [ %991, %990 ], [ %1006, %1005 ]
  %1056 = and i32 %1055, 255
  %1057 = add nsw i32 %1056, -10
  %1058 = icmp ult i32 %1057, -9
  br i1 %1058, label %1090, label %1059

1059:                                             ; preds = %1054
  %1060 = zext i32 %1056 to i64
  %1061 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1060
  %1062 = load i32, ptr %1061, align 4, !tbaa !16
  %1063 = zext i32 %1062 to i64
  %1064 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1063
  %1065 = load i64, ptr %1064, align 8, !tbaa !50
  %1066 = icmp eq i64 %1065, 0
  br i1 %1066, label %1067, label %1068

1067:                                             ; preds = %1059
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1068

1068:                                             ; preds = %1067, %1059
  %1069 = getelementptr inbounds i8, ptr %9, i64 %1065
  %1070 = getelementptr inbounds ptr, ptr %1069, i64 2
  %1071 = load ptr, ptr %1070, align 8, !tbaa !5
  %1072 = icmp eq ptr %1071, null
  br i1 %1072, label %1090, label %1073

1073:                                             ; preds = %1068
  %1074 = load i64, ptr %775, align 8
  %1075 = and i64 %1074, 65535
  %1076 = icmp eq i64 %1075, 121
  br i1 %1076, label %1077, label %1083

1077:                                             ; preds = %1073
  %1078 = getelementptr inbounds %struct.tree_exp, ptr %775, i64 0, i32 3
  %1079 = load ptr, ptr %1078, align 8, !tbaa !16
  %1080 = load i64, ptr %1079, align 8
  %1081 = and i64 %1080, 65535
  %1082 = icmp eq i64 %1081, 29
  br i1 %1082, label %1084, label %1083

1083:                                             ; preds = %1077, %1073
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.106) #26
  br label %1436

1084:                                             ; preds = %1077
  %1085 = getelementptr inbounds %struct.tree_function_decl, ptr %1079, i64 0, i32 5
  %1086 = load i32, ptr %1085, align 8
  %1087 = and i32 %1086, 4194304
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1089, label %1090

1089:                                             ; preds = %1084
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.107) #26
  br label %1436

1090:                                             ; preds = %1084, %1068, %1054
  %1091 = getelementptr i8, ptr %9, i64 12
  %1092 = load i32, ptr %1091, align 4, !tbaa !16
  %1093 = icmp eq i32 %1092, 3
  br i1 %1093, label %1448, label %1094

1094:                                             ; preds = %1090, %1120
  %1095 = phi i64 [ %1121, %1120 ], [ 0, %1090 ]
  %1096 = add nuw nsw i64 %1095, 3
  %1097 = load i32, ptr %9, align 8
  %1098 = and i32 %1097, 255
  %1099 = add nsw i32 %1098, -10
  %1100 = icmp ult i32 %1099, -9
  br i1 %1100, label %1115, label %1101

1101:                                             ; preds = %1094
  %1102 = zext i32 %1098 to i64
  %1103 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1102
  %1104 = load i32, ptr %1103, align 4, !tbaa !16
  %1105 = zext i32 %1104 to i64
  %1106 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1105
  %1107 = load i64, ptr %1106, align 8, !tbaa !50
  %1108 = icmp eq i64 %1107, 0
  br i1 %1108, label %1109, label %1110

1109:                                             ; preds = %1101
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1110

1110:                                             ; preds = %1109, %1101
  %1111 = getelementptr inbounds i8, ptr %9, i64 %1107
  %1112 = and i64 %1096, 4294967295
  %1113 = getelementptr inbounds ptr, ptr %1111, i64 %1112
  %1114 = load ptr, ptr %1113, align 8, !tbaa !5
  br label %1115

1115:                                             ; preds = %1110, %1094
  %1116 = phi ptr [ %1114, %1110 ], [ null, %1094 ]
  %1117 = tail call zeroext i8 @is_gimple_operand(ptr noundef %1116) #26
  %1118 = icmp eq i8 %1117, 0
  br i1 %1118, label %1119, label %1120

1119:                                             ; preds = %1115
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.108) #26
  tail call void @debug_generic_expr(ptr noundef %1116) #26
  br label %1120

1120:                                             ; preds = %1119, %1115
  %1121 = add nuw nsw i64 %1095, 1
  %1122 = load i32, ptr %1091, align 4, !tbaa !16
  %1123 = add i32 %1122, -3
  %1124 = zext i32 %1123 to i64
  %1125 = icmp ult i64 %1121, %1124
  br i1 %1125, label %1094, label %1448, !llvm.loop !273

1126:                                             ; preds = %6
  %1127 = lshr i32 %10, 16
  %1128 = zext i32 %1127 to i64
  %1129 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1128
  %1130 = load i32, ptr %1129, align 4, !tbaa !16
  %1131 = icmp eq i32 %1130, 5
  br i1 %1131, label %1133, label %1132

1132:                                             ; preds = %1126
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.66) #26
  br label %1436

1133:                                             ; preds = %1126
  %1134 = add nsw i32 %11, -10
  %1135 = icmp ult i32 %1134, -9
  br i1 %1135, label %1173, label %1136

1136:                                             ; preds = %1133
  %1137 = zext i32 %11 to i64
  %1138 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1137
  %1139 = load i32, ptr %1138, align 4, !tbaa !16
  %1140 = zext i32 %1139 to i64
  %1141 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1140
  %1142 = load i64, ptr %1141, align 8, !tbaa !50
  %1143 = icmp eq i64 %1142, 0
  br i1 %1143, label %1144, label %1146

1144:                                             ; preds = %1136
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %1145 = load i32, ptr %9, align 8
  br label %1146

1146:                                             ; preds = %1136, %1144
  %1147 = phi i32 [ %10, %1136 ], [ %1145, %1144 ]
  %1148 = getelementptr inbounds i8, ptr %9, i64 %1142
  %1149 = getelementptr inbounds ptr, ptr %1148, i64 2
  %1150 = load ptr, ptr %1149, align 8, !tbaa !5
  %1151 = icmp eq ptr %1150, null
  br i1 %1151, label %1173, label %1152

1152:                                             ; preds = %1146
  %1153 = and i32 %1147, 255
  %1154 = add nsw i32 %1153, -1
  %1155 = icmp ult i32 %1154, 9
  tail call void @llvm.assume(i1 %1155)
  %1156 = zext i32 %1153 to i64
  %1157 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1156
  %1158 = load i32, ptr %1157, align 4, !tbaa !16
  %1159 = zext i32 %1158 to i64
  %1160 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1159
  %1161 = load i64, ptr %1160, align 8, !tbaa !50
  %1162 = icmp eq i64 %1161, 0
  br i1 %1162, label %1163, label %1164

1163:                                             ; preds = %1152
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1164

1164:                                             ; preds = %1163, %1152
  %1165 = getelementptr inbounds i8, ptr %9, i64 %1161
  %1166 = getelementptr inbounds ptr, ptr %1165, i64 2
  %1167 = load ptr, ptr %1166, align 8, !tbaa !5
  %1168 = load i64, ptr %1167, align 8
  %1169 = and i64 %1168, 65535
  %1170 = icmp eq i64 %1169, 30
  br i1 %1170, label %1171, label %1215

1171:                                             ; preds = %1164
  %1172 = load i32, ptr %9, align 8
  br label %1173

1173:                                             ; preds = %1171, %1133, %1146
  %1174 = phi i32 [ %1172, %1171 ], [ %10, %1133 ], [ %1147, %1146 ]
  %1175 = and i32 %1174, 255
  %1176 = add nsw i32 %1175, -10
  %1177 = icmp ult i32 %1176, -9
  br i1 %1177, label %1216, label %1178

1178:                                             ; preds = %1173
  %1179 = zext i32 %1175 to i64
  %1180 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1179
  %1181 = load i32, ptr %1180, align 4, !tbaa !16
  %1182 = zext i32 %1181 to i64
  %1183 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1182
  %1184 = load i64, ptr %1183, align 8, !tbaa !50
  %1185 = icmp eq i64 %1184, 0
  br i1 %1185, label %1186, label %1188

1186:                                             ; preds = %1178
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %1187 = load i32, ptr %9, align 8
  br label %1188

1188:                                             ; preds = %1178, %1186
  %1189 = phi i32 [ %1174, %1178 ], [ %1187, %1186 ]
  %1190 = getelementptr inbounds i8, ptr %9, i64 %1184
  %1191 = getelementptr inbounds ptr, ptr %1190, i64 3
  %1192 = load ptr, ptr %1191, align 8, !tbaa !5
  %1193 = icmp eq ptr %1192, null
  br i1 %1193, label %1216, label %1194

1194:                                             ; preds = %1188
  %1195 = and i32 %1189, 255
  %1196 = add nsw i32 %1195, -1
  %1197 = icmp ult i32 %1196, 9
  tail call void @llvm.assume(i1 %1197)
  %1198 = zext i32 %1195 to i64
  %1199 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1198
  %1200 = load i32, ptr %1199, align 4, !tbaa !16
  %1201 = zext i32 %1200 to i64
  %1202 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1201
  %1203 = load i64, ptr %1202, align 8, !tbaa !50
  %1204 = icmp eq i64 %1203, 0
  br i1 %1204, label %1205, label %1206

1205:                                             ; preds = %1194
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1206

1206:                                             ; preds = %1205, %1194
  %1207 = getelementptr inbounds i8, ptr %9, i64 %1203
  %1208 = getelementptr inbounds ptr, ptr %1207, i64 3
  %1209 = load ptr, ptr %1208, align 8, !tbaa !5
  %1210 = load i64, ptr %1209, align 8
  %1211 = and i64 %1210, 65535
  %1212 = icmp eq i64 %1211, 30
  br i1 %1212, label %1213, label %1215

1213:                                             ; preds = %1206
  %1214 = load i32, ptr %9, align 8
  br label %1216

1215:                                             ; preds = %1206, %1164
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.67) #26
  br label %1436

1216:                                             ; preds = %1213, %1173, %1188
  %1217 = phi i32 [ %1214, %1213 ], [ %1174, %1173 ], [ %1189, %1188 ]
  %1218 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !5
  %1219 = and i32 %1217, 255
  %1220 = add nsw i32 %1219, -10
  %1221 = icmp ult i32 %1220, -9
  br i1 %1221, label %1239, label %1222

1222:                                             ; preds = %1216
  %1223 = zext i32 %1219 to i64
  %1224 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1223
  %1225 = load i32, ptr %1224, align 4, !tbaa !16
  %1226 = zext i32 %1225 to i64
  %1227 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1226
  %1228 = load i64, ptr %1227, align 8, !tbaa !50
  %1229 = icmp eq i64 %1228, 0
  br i1 %1229, label %1230, label %1234

1230:                                             ; preds = %1222
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %1231 = load i32, ptr %9, align 8
  %1232 = and i32 %1231, 255
  %1233 = add nsw i32 %1232, -10
  br label %1234

1234:                                             ; preds = %1230, %1222
  %1235 = phi i32 [ %1233, %1230 ], [ %1220, %1222 ]
  %1236 = phi i32 [ %1232, %1230 ], [ %1219, %1222 ]
  %1237 = getelementptr inbounds i8, ptr %9, i64 %1228
  %1238 = load ptr, ptr %1237, align 8, !tbaa !5
  br label %1239

1239:                                             ; preds = %1216, %1234
  %1240 = phi i32 [ %1220, %1216 ], [ %1235, %1234 ]
  %1241 = phi i32 [ %1219, %1216 ], [ %1236, %1234 ]
  %1242 = phi ptr [ null, %1216 ], [ %1238, %1234 ]
  %1243 = icmp ult i32 %1240, -9
  br i1 %1243, label %1257, label %1244

1244:                                             ; preds = %1239
  %1245 = zext i32 %1241 to i64
  %1246 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1245
  %1247 = load i32, ptr %1246, align 4, !tbaa !16
  %1248 = zext i32 %1247 to i64
  %1249 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1248
  %1250 = load i64, ptr %1249, align 8, !tbaa !50
  %1251 = icmp eq i64 %1250, 0
  br i1 %1251, label %1252, label %1253

1252:                                             ; preds = %1244
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1253

1253:                                             ; preds = %1252, %1244
  %1254 = getelementptr inbounds i8, ptr %9, i64 %1250
  %1255 = getelementptr inbounds ptr, ptr %1254, i64 1
  %1256 = load ptr, ptr %1255, align 8, !tbaa !5
  br label %1257

1257:                                             ; preds = %1239, %1253
  %1258 = phi ptr [ %1256, %1253 ], [ null, %1239 ]
  %1259 = tail call fastcc zeroext i8 @verify_gimple_comparison(ptr noundef %1218, ptr noundef %1242, ptr noundef %1258), !range !268
  br label %1433

1260:                                             ; preds = %6
  %1261 = add nsw i32 %11, -10
  %1262 = icmp ult i32 %1261, -9
  br i1 %1262, label %1275, label %1263

1263:                                             ; preds = %1260
  %1264 = zext i32 %11 to i64
  %1265 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1264
  %1266 = load i32, ptr %1265, align 4, !tbaa !16
  %1267 = zext i32 %1266 to i64
  %1268 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1267
  %1269 = load i64, ptr %1268, align 8, !tbaa !50
  %1270 = icmp eq i64 %1269, 0
  br i1 %1270, label %1271, label %1272

1271:                                             ; preds = %1263
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1272

1272:                                             ; preds = %1271, %1263
  %1273 = getelementptr inbounds i8, ptr %9, i64 %1269
  %1274 = load ptr, ptr %1273, align 8, !tbaa !5
  br label %1275

1275:                                             ; preds = %1272, %1260
  %1276 = phi ptr [ %1274, %1272 ], [ null, %1260 ]
  %1277 = load i64, ptr %1276, align 8
  %1278 = and i64 %1277, 65535
  %1279 = icmp eq i64 %1278, 30
  br i1 %1279, label %1448, label %1280

1280:                                             ; preds = %1275
  %1281 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %1276) #26
  %1282 = icmp eq i8 %1281, 0
  br i1 %1282, label %1288, label %1283

1283:                                             ; preds = %1280
  %1284 = getelementptr inbounds %struct.tree_common, ptr %1276, i64 0, i32 2
  %1285 = load ptr, ptr %1284, align 8, !tbaa !16
  %1286 = load i64, ptr %1285, align 8
  %1287 = trunc i64 %1286 to i16
  switch i16 %1287, label %1288 [
    i16 10, label %1448
    i16 12, label %1448
  ]

1288:                                             ; preds = %1283, %1280
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.111) #26
  br label %1436

1289:                                             ; preds = %6
  %1290 = add nsw i32 %11, -10
  %1291 = icmp ult i32 %1290, -9
  br i1 %1291, label %1304, label %1292

1292:                                             ; preds = %1289
  %1293 = zext i32 %11 to i64
  %1294 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1293
  %1295 = load i32, ptr %1294, align 4, !tbaa !16
  %1296 = zext i32 %1295 to i64
  %1297 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1296
  %1298 = load i64, ptr %1297, align 8, !tbaa !50
  %1299 = icmp eq i64 %1298, 0
  br i1 %1299, label %1300, label %1301

1300:                                             ; preds = %1292
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1301

1301:                                             ; preds = %1300, %1292
  %1302 = getelementptr inbounds i8, ptr %9, i64 %1298
  %1303 = load ptr, ptr %1302, align 8, !tbaa !5
  br label %1304

1304:                                             ; preds = %1301, %1289
  %1305 = phi ptr [ %1303, %1301 ], [ null, %1289 ]
  %1306 = tail call zeroext i8 @is_gimple_val(ptr noundef %1305) #26
  %1307 = icmp eq i8 %1306, 0
  br i1 %1307, label %1308, label %1448

1308:                                             ; preds = %1304
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.112) #26
  %1309 = load i32, ptr %9, align 8
  %1310 = and i32 %1309, 255
  %1311 = add nsw i32 %1310, -10
  %1312 = icmp ult i32 %1311, -9
  br i1 %1312, label %1325, label %1313

1313:                                             ; preds = %1308
  %1314 = zext i32 %1310 to i64
  %1315 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1314
  %1316 = load i32, ptr %1315, align 4, !tbaa !16
  %1317 = zext i32 %1316 to i64
  %1318 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1317
  %1319 = load i64, ptr %1318, align 8, !tbaa !50
  %1320 = icmp eq i64 %1319, 0
  br i1 %1320, label %1321, label %1322

1321:                                             ; preds = %1313
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1322

1322:                                             ; preds = %1321, %1313
  %1323 = getelementptr inbounds i8, ptr %9, i64 %1319
  %1324 = load ptr, ptr %1323, align 8, !tbaa !5
  br label %1325

1325:                                             ; preds = %1322, %1308
  %1326 = phi ptr [ %1324, %1322 ], [ null, %1308 ]
  tail call void @debug_generic_stmt(ptr noundef %1326) #26
  br label %1436

1327:                                             ; preds = %6
  %1328 = add nsw i32 %11, -10
  %1329 = icmp ult i32 %1328, -9
  br i1 %1329, label %1448, label %1330

1330:                                             ; preds = %1327
  %1331 = zext i32 %11 to i64
  %1332 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %1331
  %1333 = load i32, ptr %1332, align 4, !tbaa !16
  %1334 = zext i32 %1333 to i64
  %1335 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %1334
  %1336 = load i64, ptr %1335, align 8, !tbaa !50
  %1337 = icmp eq i64 %1336, 0
  br i1 %1337, label %1338, label %1339

1338:                                             ; preds = %1330
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %1339

1339:                                             ; preds = %1338, %1330
  %1340 = getelementptr inbounds i8, ptr %9, i64 %1336
  %1341 = load ptr, ptr %1340, align 8, !tbaa !5
  %1342 = load ptr, ptr @cfun, align 8, !tbaa !5
  %1343 = getelementptr inbounds %struct.function, ptr %1342, i64 0, i32 6
  %1344 = load ptr, ptr %1343, align 8, !tbaa !254
  %1345 = getelementptr inbounds %struct.tree_common, ptr %1344, i64 0, i32 2
  %1346 = load ptr, ptr %1345, align 8, !tbaa !16
  %1347 = getelementptr inbounds %struct.tree_common, ptr %1346, i64 0, i32 2
  %1348 = load ptr, ptr %1347, align 8, !tbaa !16
  %1349 = icmp eq ptr %1341, null
  br i1 %1349, label %1448, label %1350

1350:                                             ; preds = %1339
  %1351 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %1341) #26
  %1352 = icmp eq i8 %1351, 0
  br i1 %1352, label %1353, label %1358

1353:                                             ; preds = %1350
  %1354 = load i64, ptr %1341, align 8
  %1355 = and i64 %1354, 65535
  %1356 = icmp eq i64 %1355, 36
  br i1 %1356, label %1358, label %1357

1357:                                             ; preds = %1353
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.113) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %1341) #26
  br label %1436

1358:                                             ; preds = %1353, %1350
  %1359 = getelementptr inbounds %struct.tree_common, ptr %1341, i64 0, i32 2
  %1360 = load ptr, ptr %1359, align 8, !tbaa !16
  %1361 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %1348, ptr noundef %1360) #26
  %1362 = icmp eq i8 %1361, 0
  br i1 %1362, label %1363, label %1448

1363:                                             ; preds = %1358
  %1364 = load i64, ptr %1341, align 8
  %1365 = and i64 %1364, 65535
  %1366 = icmp eq i64 %1365, 36
  br i1 %1366, label %1367, label %1377

1367:                                             ; preds = %1363
  %1368 = load ptr, ptr %1359, align 8, !tbaa !16
  %1369 = load i64, ptr %1368, align 8
  %1370 = and i64 %1369, 65535
  %1371 = icmp eq i64 %1370, 12
  br i1 %1371, label %1372, label %1377

1372:                                             ; preds = %1367
  %1373 = getelementptr inbounds %struct.tree_common, ptr %1368, i64 0, i32 2
  %1374 = load ptr, ptr %1373, align 8, !tbaa !16
  %1375 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %1348, ptr noundef %1374) #26
  %1376 = icmp eq i8 %1375, 0
  br i1 %1376, label %1377, label %1448

1377:                                             ; preds = %1372, %1367, %1363
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.114) #26
  tail call void @debug_generic_stmt(ptr noundef %1348) #26
  %1378 = load ptr, ptr %1359, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %1378) #26
  br label %1436

1379:                                             ; preds = %6
  %1380 = getelementptr i8, ptr %9, i64 40
  %1381 = load ptr, ptr %1380, align 8, !tbaa !16
  %1382 = getelementptr inbounds %struct.tree_common, ptr %1381, i64 0, i32 2
  %1383 = load ptr, ptr %1382, align 8, !tbaa !16
  %1384 = load i64, ptr %1381, align 8
  %1385 = and i64 %1384, 65535
  %1386 = icmp eq i64 %1385, 141
  br i1 %1386, label %1387, label %1393

1387:                                             ; preds = %1379
  %1388 = getelementptr i8, ptr %9, i64 36
  %1389 = load i32, ptr %1388, align 4, !tbaa !16
  %1390 = icmp eq i32 %1389, 0
  br i1 %1390, label %1448, label %1391

1391:                                             ; preds = %1387
  %1392 = getelementptr inbounds %struct.gimple_statement_phi, ptr %9, i64 0, i32 1
  br label %1394

1393:                                             ; preds = %1379
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.115) #26
  br label %1436

1394:                                             ; preds = %1427, %1391
  %1395 = phi i64 [ 0, %1391 ], [ %1428, %1427 ]
  %1396 = load i32, ptr %1392, align 8, !tbaa !16
  %1397 = zext i32 %1396 to i64
  %1398 = icmp ugt i64 %1395, %1397
  br i1 %1398, label %1399, label %1400

1399:                                             ; preds = %1394
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %1400

1400:                                             ; preds = %1399, %1394
  %1401 = getelementptr %struct.gimple_statement_phi, ptr %9, i64 0, i32 4, i64 %1395, i32 0, i32 3
  %1402 = load ptr, ptr %1401, align 8, !tbaa !274
  %1403 = load ptr, ptr %1402, align 8, !tbaa !5
  %1404 = load ptr, ptr %1380, align 8, !tbaa !16
  %1405 = tail call zeroext i8 @is_gimple_reg(ptr noundef %1404) #26
  %1406 = icmp eq i8 %1405, 0
  br i1 %1406, label %1410, label %1407

1407:                                             ; preds = %1400
  %1408 = tail call zeroext i8 @is_gimple_val(ptr noundef %1403) #26
  %1409 = icmp eq i8 %1408, 0
  br i1 %1409, label %1417, label %1410

1410:                                             ; preds = %1407, %1400
  %1411 = load ptr, ptr %1380, align 8, !tbaa !16
  %1412 = tail call zeroext i8 @is_gimple_reg(ptr noundef %1411) #26
  %1413 = icmp eq i8 %1412, 0
  br i1 %1413, label %1414, label %1418

1414:                                             ; preds = %1410
  %1415 = tail call zeroext i8 @is_gimple_addressable(ptr noundef %1403) #26
  %1416 = icmp eq i8 %1415, 0
  br i1 %1416, label %1417, label %1418

1417:                                             ; preds = %1414, %1407
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.116) #26
  tail call void @debug_generic_stmt(ptr noundef %1403) #26
  br label %1436

1418:                                             ; preds = %1414, %1410
  %1419 = getelementptr inbounds %struct.tree_common, ptr %1403, i64 0, i32 2
  %1420 = load ptr, ptr %1419, align 8, !tbaa !16
  %1421 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %1383, ptr noundef %1420) #26
  %1422 = icmp eq i8 %1421, 0
  br i1 %1422, label %1423, label %1427

1423:                                             ; preds = %1418
  %1424 = getelementptr inbounds %struct.tree_common, ptr %1403, i64 0, i32 2
  %1425 = trunc i64 %1395 to i32
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.117, i32 noundef %1425) #26
  tail call void @debug_generic_stmt(ptr noundef %1383) #26
  %1426 = load ptr, ptr %1424, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %1426) #26
  br label %1436

1427:                                             ; preds = %1418
  %1428 = add nuw nsw i64 %1395, 1
  %1429 = load i32, ptr %1388, align 4, !tbaa !16
  %1430 = zext i32 %1429 to i64
  %1431 = icmp ult i64 %1428, %1430
  br i1 %1431, label %1394, label %1448, !llvm.loop !275

1432:                                             ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3828, ptr noundef nonnull @.str.2) #26
  br label %1448

1433:                                             ; preds = %150, %184, %196, %200, %203, %206, %732, %754, %1257
  %1434 = phi i8 [ %1259, %1257 ], [ %760, %754 ], [ %185, %184 ], [ %199, %196 ], [ %151, %206 ], [ %151, %203 ], [ %151, %200 ], [ %151, %150 ], [ %733, %732 ]
  %1435 = icmp eq i8 %1434, 0
  br i1 %1435, label %1448, label %1436

1436:                                             ; preds = %1423, %1417, %1393, %1357, %1377, %1325, %1288, %782, %984, %1052, %1089, %1083, %881, %858, %794, %551, %558, %579, %622, %661, %646, %679, %697, %711, %731, %741, %302, %306, %371, %390, %407, %418, %429, %434, %194, %158, %181, %144, %193, %210, %1215, %1132, %1433
  %1437 = phi i8 [ %1434, %1433 ], [ 1, %1132 ], [ 1, %1215 ], [ 1, %210 ], [ 1, %193 ], [ 1, %144 ], [ 1, %181 ], [ 1, %158 ], [ 1, %194 ], [ 1, %434 ], [ 1, %429 ], [ 1, %418 ], [ 1, %407 ], [ 1, %390 ], [ 1, %371 ], [ 1, %306 ], [ 1, %302 ], [ 1, %741 ], [ 1, %731 ], [ 1, %711 ], [ 1, %697 ], [ 1, %679 ], [ 1, %646 ], [ 1, %661 ], [ 1, %622 ], [ 1, %579 ], [ 1, %558 ], [ 1, %551 ], [ 1, %794 ], [ 1, %858 ], [ 1, %881 ], [ 1, %1083 ], [ 1, %1089 ], [ 1, %1052 ], [ 1, %984 ], [ 1, %782 ], [ 1, %1288 ], [ 1, %1325 ], [ 1, %1377 ], [ 1, %1357 ], [ 1, %1393 ], [ 1, %1417 ], [ 1, %1423 ]
  tail call void @debug_gimple_stmt(ptr noundef %9) #26
  br label %1448

1438:                                             ; preds = %396
  %1439 = trunc i16 %398 to i8
  %1440 = lshr i8 47, %1439
  %1441 = and i8 %1440, 1
  %1442 = icmp eq i8 %1441, 0
  br i1 %1442, label %400, label %1448

1443:                                             ; preds = %403
  %1444 = trunc i16 %405 to i8
  %1445 = lshr i8 47, %1444
  %1446 = and i8 %1445, 1
  %1447 = icmp eq i8 %1446, 0
  br i1 %1447, label %407, label %1448

1448:                                             ; preds = %1427, %1120, %1443, %1438, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %6, %1433, %1436, %1432, %742, %343, %324, %358, %355, %361, %378, %414, %425, %307, %307, %307, %307, %307, %307, %307, %431, %573, %619, %656, %647, %707, %725, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %559, %738, %1090, %1283, %1283, %1275, %1304, %1339, %1372, %1358, %1327, %1387, %29, %25, %17, %13
  %1449 = phi i8 [ %32, %29 ], [ %28, %25 ], [ %24, %17 ], [ %16, %13 ], [ %1437, %1436 ], [ 0, %1433 ], [ 0, %1432 ], [ 0, %742 ], [ 0, %343 ], [ 0, %324 ], [ 0, %358 ], [ 0, %355 ], [ 0, %361 ], [ 0, %378 ], [ 0, %414 ], [ 0, %425 ], [ 0, %307 ], [ 0, %307 ], [ 0, %307 ], [ 0, %307 ], [ 0, %307 ], [ 0, %307 ], [ 0, %307 ], [ 0, %431 ], [ 0, %573 ], [ 0, %619 ], [ 0, %656 ], [ 0, %647 ], [ 0, %707 ], [ 0, %725 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %559 ], [ 0, %738 ], [ 0, %1090 ], [ 0, %1283 ], [ 0, %1283 ], [ 0, %1275 ], [ 0, %1304 ], [ 0, %1339 ], [ 0, %1372 ], [ 0, %1358 ], [ 0, %1327 ], [ 0, %1387 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %6 ], [ 0, %1438 ], [ 0, %1443 ], [ 0, %1120 ], [ 0, %1427 ]
  %1450 = or i8 %1449, %7
  %1451 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %8, i64 0, i32 2
  %1452 = load ptr, ptr %1451, align 8, !tbaa !53
  %1453 = icmp eq ptr %1452, null
  br i1 %1453, label %1454, label %6, !llvm.loop !276

1454:                                             ; preds = %1448, %1, %3
  %1455 = phi i8 [ 0, %3 ], [ 0, %1 ], [ %1450, %1448 ]
  ret i8 %1455
}

declare void @internal_error(ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_node_can_be_shared(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !16
  %6 = and i32 %5, -2
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %45, label %8

8:                                                ; preds = %1
  %9 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %0) #26
  %10 = icmp ne i8 %9, 0
  %11 = load ptr, ptr @global_trees, align 16
  %12 = freeze ptr %11
  %13 = icmp eq ptr %12, %0
  %14 = or i1 %10, %13
  br i1 %14, label %45, label %15

15:                                               ; preds = %8
  %16 = load i64, ptr %0, align 8
  %17 = trunc i64 %16 to i16
  switch i16 %17, label %18 [
    i16 141, label %45
    i16 1, label %45
    i16 139, label %45
  ]

18:                                               ; preds = %15, %35
  %19 = phi i64 [ %38, %35 ], [ %16, %15 ]
  %20 = phi ptr [ %37, %35 ], [ %0, %15 ]
  %21 = trunc i64 %19 to i32
  %22 = and i32 %21, 65535
  %23 = add nsw i32 %22, -45
  %24 = icmp ult i32 %23, 2
  br i1 %24, label %25, label %32

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %27) #26
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %25
  %31 = load i64, ptr %20, align 8
  br label %32

32:                                               ; preds = %30, %18
  %33 = phi i64 [ %31, %30 ], [ %19, %18 ]
  %34 = trunc i64 %33 to i16
  switch i16 %34, label %39 [
    i16 41, label %35
    i16 43, label %35
    i16 44, label %35
  ]

35:                                               ; preds = %32, %32, %32, %25
  %36 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = load i64, ptr %37, align 8
  br label %18, !llvm.loop !277

39:                                               ; preds = %32
  %40 = and i64 %33, 65535
  %41 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %40
  %42 = load i32, ptr %41, align 4, !tbaa !16
  %43 = icmp eq i32 %42, 3
  %44 = zext i1 %43 to i8
  br label %45

45:                                               ; preds = %15, %15, %15, %1, %39, %8
  %46 = phi i8 [ 1, %1 ], [ 1, %15 ], [ 1, %8 ], [ %44, %39 ], [ 1, %15 ], [ 1, %15 ]
  ret i8 %46
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @verify_stmts() local_unnamed_addr #9 {
  %1 = alloca %struct.walk_stmt_info, align 8
  %2 = alloca %struct.walk_stmt_info, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %2) #26
  %5 = load i8, ptr @timevar_enable, align 1, !tbaa !16
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %0
  tail call void @timevar_push_1(i32 noundef 108) #26
  br label %8

8:                                                ; preds = %7, %0
  %9 = tail call ptr @pointer_set_create() #26
  %10 = tail call ptr @pointer_set_create() #26
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %2, i8 0, i64 56, i1 false)
  %11 = getelementptr inbounds %struct.walk_stmt_info, ptr %2, i64 0, i32 1
  store ptr %9, ptr %11, align 8, !tbaa !278
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !23
  %15 = load ptr, ptr %14, align 8, !tbaa !34
  %16 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !36
  %18 = getelementptr inbounds %struct.control_flow_graph, ptr %14, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !35
  %20 = icmp eq ptr %17, %19
  br i1 %20, label %266, label %31

21:                                               ; preds = %262, %89, %95, %99, %102
  %22 = phi i8 [ %90, %102 ], [ %90, %99 ], [ %90, %95 ], [ %90, %89 ], [ %263, %262 ]
  %23 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 6
  %24 = load ptr, ptr %23, align 8, !tbaa !36
  %25 = load ptr, ptr @cfun, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.function, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !23
  %28 = getelementptr inbounds %struct.control_flow_graph, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !35
  %30 = icmp eq ptr %24, %29
  br i1 %30, label %266, label %31, !llvm.loop !280

31:                                               ; preds = %8, %21
  %32 = phi ptr [ %24, %21 ], [ %17, %8 ]
  %33 = phi i8 [ %22, %21 ], [ 0, %8 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %3, ptr noundef %32) #26
  %34 = load ptr, ptr %3, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  %35 = icmp eq ptr %34, null
  br i1 %35, label %89, label %36

36:                                               ; preds = %31, %84
  %37 = phi i8 [ %85, %84 ], [ %33, %31 ]
  %38 = phi ptr [ %87, %84 ], [ %34, %31 ]
  %39 = load ptr, ptr %38, align 8, !tbaa !47
  %40 = call i32 @pointer_set_insert(ptr noundef %10, ptr noundef %39) #26
  %41 = getelementptr i8, ptr %39, i64 16
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = icmp eq ptr %42, %32
  br i1 %43, label %45, label %44

44:                                               ; preds = %36
  call void (ptr, ...) @error(ptr noundef nonnull @.str.22) #26
  br label %45

45:                                               ; preds = %44, %36
  %46 = phi i8 [ 1, %44 ], [ %37, %36 ]
  %47 = getelementptr i8, ptr %39, i64 36
  %48 = load i32, ptr %47, align 4, !tbaa !16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %84, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.gimple_statement_phi, ptr %39, i64 0, i32 1
  br label %52

52:                                               ; preds = %50, %78
  %53 = phi i8 [ %46, %50 ], [ %79, %78 ]
  %54 = phi i64 [ 0, %50 ], [ %80, %78 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #26
  %55 = trunc i64 %54 to i32
  %56 = load i32, ptr %51, align 8, !tbaa !16
  %57 = icmp ult i32 %56, %55
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %59

59:                                               ; preds = %52, %58
  %60 = getelementptr %struct.gimple_statement_phi, ptr %39, i64 0, i32 4, i64 %54, i32 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !274
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  store ptr %62, ptr %4, align 8, !tbaa !5
  %63 = icmp eq ptr %62, null
  br i1 %63, label %64, label %65

64:                                               ; preds = %59
  call void (ptr, ...) @error(ptr noundef nonnull @.str.23) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %39) #26
  br label %78

65:                                               ; preds = %59
  %66 = load i64, ptr %62, align 8
  %67 = trunc i64 %66 to i16
  switch i16 %67, label %68 [
    i16 141, label %73
    i16 29, label %73
  ]

68:                                               ; preds = %65
  %69 = call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %62) #26
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %68
  call void (ptr, ...) @error(ptr noundef nonnull @.str.24) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %39) #26
  %72 = load ptr, ptr %4, align 8, !tbaa !5
  call void @debug_generic_expr(ptr noundef %72) #26
  br label %73

73:                                               ; preds = %65, %65, %68, %71
  %74 = phi i8 [ %53, %68 ], [ 1, %71 ], [ %53, %65 ], [ %53, %65 ]
  %75 = call ptr @walk_tree_1(ptr noundef nonnull %4, ptr noundef nonnull @verify_node_sharing, ptr noundef %9, ptr noundef null, ptr noundef null) #26
  %76 = icmp eq ptr %75, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %73
  call void (ptr, ...) @error(ptr noundef nonnull @.str.25) #26
  call void @debug_gimple_stmt(ptr noundef %39) #26
  call void @debug_generic_expr(ptr noundef nonnull %75) #26
  br label %78

78:                                               ; preds = %73, %77, %64
  %79 = phi i8 [ 1, %64 ], [ 1, %77 ], [ %74, %73 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #26
  %80 = add nuw nsw i64 %54, 1
  %81 = load i32, ptr %47, align 4, !tbaa !16
  %82 = zext i32 %81 to i64
  %83 = icmp ult i64 %80, %82
  br i1 %83, label %52, label %84, !llvm.loop !281

84:                                               ; preds = %78, %45
  %85 = phi i8 [ %46, %45 ], [ %79, %78 ]
  %86 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %38, i64 0, i32 2
  %87 = load ptr, ptr %86, align 8, !tbaa !53
  %88 = icmp eq ptr %87, null
  br i1 %88, label %89, label %36, !llvm.loop !282

89:                                               ; preds = %84, %31
  %90 = phi i8 [ %33, %31 ], [ %85, %84 ]
  %91 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 13
  %92 = load i32, ptr %91, align 8, !tbaa !58, !noalias !283
  %93 = and i32 %92, 512
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %21

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 7
  %97 = load ptr, ptr %96, align 8, !tbaa !16, !noalias !283
  %98 = icmp eq ptr %97, null
  br i1 %98, label %21, label %99

99:                                               ; preds = %95
  %100 = load ptr, ptr %97, align 8, !tbaa !59, !noalias !283
  %101 = icmp eq ptr %100, null
  br i1 %101, label %21, label %102

102:                                              ; preds = %99
  %103 = load ptr, ptr %100, align 8, !tbaa !42, !noalias !283
  %104 = icmp eq ptr %103, null
  br i1 %104, label %21, label %105

105:                                              ; preds = %102, %262
  %106 = phi i8 [ %263, %262 ], [ %90, %102 ]
  %107 = phi ptr [ %264, %262 ], [ %103, %102 ]
  %108 = load ptr, ptr %107, align 8, !tbaa !47
  %109 = load i32, ptr %108, align 8
  %110 = trunc i32 %109 to i8
  switch i8 %110, label %112 [
    i8 34, label %111
    i8 10, label %111
  ]

111:                                              ; preds = %105, %105
  call void (ptr, ...) @error(ptr noundef nonnull @.str.26) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %108) #26
  br label %112

112:                                              ; preds = %105, %111
  %113 = phi i8 [ 1, %111 ], [ %106, %105 ]
  %114 = call i32 @pointer_set_insert(ptr noundef %10, ptr noundef nonnull %108) #26
  %115 = getelementptr i8, ptr %108, i64 16
  %116 = load ptr, ptr %115, align 8, !tbaa !16
  %117 = icmp eq ptr %116, %32
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  call void (ptr, ...) @error(ptr noundef nonnull @.str.27) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %108) #26
  br label %119

119:                                              ; preds = %118, %112
  %120 = phi i8 [ 1, %118 ], [ %113, %112 ]
  %121 = load i32, ptr %108, align 8
  %122 = and i32 %121, 255
  %123 = icmp eq i32 %122, 4
  br i1 %123, label %124, label %159

124:                                              ; preds = %119
  %125 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %126
  %128 = load i64, ptr %127, align 8, !tbaa !50
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %124
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %131

131:                                              ; preds = %124, %130
  %132 = getelementptr inbounds i8, ptr %108, i64 %128
  %133 = load ptr, ptr %132, align 8, !tbaa !5
  %134 = getelementptr inbounds %struct.tree_label_decl, ptr %133, i64 0, i32 1
  %135 = load i32, ptr %134, align 8, !tbaa !16
  %136 = icmp eq i32 %135, -1
  br i1 %136, label %147, label %137

137:                                              ; preds = %131
  %138 = load ptr, ptr @cfun, align 8, !tbaa !5
  %139 = getelementptr inbounds %struct.function, ptr %138, i64 0, i32 1
  %140 = load ptr, ptr %139, align 8, !tbaa !23
  %141 = getelementptr inbounds %struct.control_flow_graph, ptr %140, i64 0, i32 6
  %142 = load ptr, ptr %141, align 8, !tbaa !33
  %143 = zext i32 %135 to i64
  %144 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %142, i64 0, i32 2, i64 %143
  %145 = load ptr, ptr %144, align 8, !tbaa !5
  %146 = icmp eq ptr %145, %32
  br i1 %146, label %148, label %147

147:                                              ; preds = %137, %131
  call void (ptr, ...) @error(ptr noundef nonnull @.str.28) #26
  br label %148

148:                                              ; preds = %147, %137
  %149 = phi i8 [ 1, %147 ], [ %120, %137 ]
  %150 = getelementptr inbounds %struct.tree_label_decl, ptr %133, i64 0, i32 2
  %151 = load i32, ptr %150, align 4, !tbaa !16
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %159, label %153

153:                                              ; preds = %148
  %154 = call ptr @get_eh_landing_pad_from_number(i32 noundef %151) #26
  %155 = getelementptr inbounds %struct.eh_landing_pad_d, ptr %154, i64 0, i32 2
  %156 = load ptr, ptr %155, align 8, !tbaa !174
  %157 = icmp eq ptr %133, %156
  br i1 %157, label %159, label %158

158:                                              ; preds = %153
  call void (ptr, ...) @error(ptr noundef nonnull @.str.29) #26
  br label %159

159:                                              ; preds = %148, %158, %153, %119
  %160 = phi i8 [ %120, %119 ], [ %149, %148 ], [ 1, %158 ], [ %149, %153 ]
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %1) #26
  %161 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %107, i64 0, i32 2
  %162 = load ptr, ptr %161, align 8, !tbaa !53
  %163 = icmp eq ptr %162, null
  %164 = load ptr, ptr %107, align 8, !tbaa !47
  %165 = load i32, ptr %164, align 8
  %166 = trunc i32 %165 to i8
  %167 = add i8 %166, -33
  %168 = icmp ult i8 %167, -14
  br i1 %168, label %169, label %255

169:                                              ; preds = %159
  %170 = and i32 %165, 255
  %171 = icmp eq i32 %170, 8
  br i1 %171, label %172, label %226

172:                                              ; preds = %169
  %173 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %174
  %176 = load i64, ptr %175, align 8, !tbaa !50
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %172
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %179

179:                                              ; preds = %178, %172
  %180 = getelementptr inbounds i8, ptr %164, i64 %176
  %181 = getelementptr inbounds ptr, ptr %180, i64 1
  %182 = load ptr, ptr %181, align 8, !tbaa !5
  %183 = call zeroext i8 @is_gimple_call_addr(ptr noundef %182) #26
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %179
  call void (ptr, ...) @error(ptr noundef nonnull @.str.118) #26
  br label %255

186:                                              ; preds = %179
  %187 = load i32, ptr %164, align 8
  %188 = and i32 %187, 255
  %189 = add nsw i32 %188, -10
  %190 = icmp ult i32 %189, -9
  br i1 %190, label %204, label %191

191:                                              ; preds = %186
  %192 = zext i32 %188 to i64
  %193 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %192
  %194 = load i32, ptr %193, align 4, !tbaa !16
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %195
  %197 = load i64, ptr %196, align 8, !tbaa !50
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %191
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %200

200:                                              ; preds = %199, %191
  %201 = getelementptr inbounds i8, ptr %164, i64 %197
  %202 = getelementptr inbounds ptr, ptr %201, i64 1
  %203 = load ptr, ptr %202, align 8, !tbaa !5
  br label %204

204:                                              ; preds = %200, %186
  %205 = phi ptr [ %203, %200 ], [ null, %186 ]
  %206 = load i64, ptr %205, align 8
  %207 = and i64 %206, 65535
  %208 = icmp eq i64 %207, 121
  br i1 %208, label %209, label %226

209:                                              ; preds = %204
  %210 = getelementptr inbounds %struct.tree_exp, ptr %205, i64 0, i32 3
  %211 = load ptr, ptr %210, align 8, !tbaa !16
  %212 = icmp eq ptr %211, null
  br i1 %212, label %226, label %213

213:                                              ; preds = %209
  %214 = load i64, ptr %211, align 8
  %215 = and i64 %214, 65535
  %216 = icmp eq i64 %215, 29
  br i1 %216, label %217, label %226

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.tree_function_decl, ptr %211, i64 0, i32 5
  %219 = load i32, ptr %218, align 8
  %220 = and i32 %219, 402653184
  %221 = icmp eq i32 %220, 268435456
  %222 = and i64 %214, 1048576
  %223 = icmp eq i64 %222, 0
  %224 = and i1 %223, %221
  br i1 %224, label %225, label %226

225:                                              ; preds = %217
  call void (ptr, ...) @error(ptr noundef nonnull @.str.119) #26
  br label %255

226:                                              ; preds = %217, %213, %209, %204, %169
  %227 = load i32, ptr %164, align 8
  %228 = and i32 %227, 255
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %255, label %230

230:                                              ; preds = %226
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %1, i8 0, i64 56, i1 false)
  %231 = load ptr, ptr %107, align 8, !tbaa !47
  %232 = call ptr @walk_gimple_op(ptr noundef %231, ptr noundef nonnull @verify_expr, ptr noundef nonnull %1) #26
  %233 = icmp eq ptr %232, null
  br i1 %233, label %238, label %234

234:                                              ; preds = %230
  call void @debug_generic_expr(ptr noundef nonnull %232) #26
  %235 = load ptr, ptr %107, align 8, !tbaa !47
  %236 = getelementptr i8, ptr %235, i64 8
  %237 = load i32, ptr %236, align 8, !tbaa !16
  call void (i32, ptr, ...) @inform(i32 noundef %237, ptr noundef nonnull @.str.120) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %164) #26
  br label %255

238:                                              ; preds = %230
  %239 = call i32 @lookup_stmt_eh_lp(ptr noundef nonnull %164) #26
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %255, label %241

241:                                              ; preds = %238
  %242 = call zeroext i8 @stmt_could_throw_p(ptr noundef nonnull %164) #26
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %244, label %247

244:                                              ; preds = %241
  %245 = load i32, ptr @cgraph_state, align 4, !tbaa !16
  %246 = icmp eq i32 %245, 2
  br i1 %246, label %255, label %253

247:                                              ; preds = %241
  %248 = icmp slt i32 %239, 1
  %249 = select i1 %248, i1 true, i1 %163
  br i1 %249, label %255, label %250

250:                                              ; preds = %247
  %251 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %164) #26
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %255, label %253

253:                                              ; preds = %250, %244
  %254 = phi ptr [ @.str.121, %244 ], [ @.str.122, %250 ]
  call void (ptr, ...) @error(ptr noundef nonnull %254) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %164) #26
  br label %255

255:                                              ; preds = %159, %185, %225, %226, %234, %238, %244, %247, %250, %253
  %256 = phi i8 [ 1, %234 ], [ 1, %253 ], [ 0, %159 ], [ 0, %226 ], [ 0, %244 ], [ 0, %250 ], [ 0, %247 ], [ 0, %238 ], [ 1, %185 ], [ 1, %225 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %1) #26
  %257 = or i8 %256, %160
  %258 = load ptr, ptr %107, align 8, !tbaa !47
  %259 = call ptr @walk_gimple_op(ptr noundef %258, ptr noundef nonnull @verify_node_sharing, ptr noundef nonnull %2) #26
  %260 = icmp eq ptr %259, null
  br i1 %260, label %262, label %261

261:                                              ; preds = %255
  call void (ptr, ...) @error(ptr noundef nonnull @.str.25) #26
  call void @debug_gimple_stmt(ptr noundef nonnull %108) #26
  call void @debug_generic_expr(ptr noundef nonnull %259) #26
  br label %262

262:                                              ; preds = %261, %255
  %263 = phi i8 [ 1, %261 ], [ %257, %255 ]
  %264 = load ptr, ptr %161, align 8, !tbaa !53
  %265 = icmp eq ptr %264, null
  br i1 %265, label %21, label %105, !llvm.loop !286

266:                                              ; preds = %21, %8
  %267 = phi i8 [ 0, %8 ], [ %22, %21 ]
  %268 = phi ptr [ %12, %8 ], [ %25, %21 ]
  store i1 false, ptr @eh_error_found, align 1
  %269 = call ptr @get_eh_throw_stmt_table(ptr noundef nonnull %268) #26
  %270 = icmp eq ptr %269, null
  br i1 %270, label %274, label %271

271:                                              ; preds = %266
  %272 = load ptr, ptr @cfun, align 8, !tbaa !5
  %273 = call ptr @get_eh_throw_stmt_table(ptr noundef %272) #26
  call void @htab_traverse(ptr noundef %273, ptr noundef nonnull @verify_eh_throw_stmt_node, ptr noundef %10) #26
  br label %274

274:                                              ; preds = %271, %266
  %275 = load i1, ptr @eh_error_found, align 1
  %276 = zext i1 %275 to i8
  %277 = or i8 %267, %276
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %280, label %279

279:                                              ; preds = %274
  call void (ptr, ...) @internal_error(ptr noundef nonnull @.str.30) #26
  br label %280

280:                                              ; preds = %279, %274
  call void @pointer_set_destroy(ptr noundef %9) #26
  call void @pointer_set_destroy(ptr noundef %10) #26
  call void @verify_histograms() #26
  %281 = load i8, ptr @timevar_enable, align 1, !tbaa !16
  %282 = icmp eq i8 %281, 0
  br i1 %282, label %284, label %283

283:                                              ; preds = %280
  call void @timevar_pop_1(i32 noundef 108) #26
  br label %284

284:                                              ; preds = %283, %280
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %2) #26
  ret void
}

declare void @timevar_push_1(i32 noundef) local_unnamed_addr #3

declare ptr @pointer_set_create() local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #18

declare void @gsi_start_phis(ptr sret(%struct.gimple_stmt_iterator) align 8, ptr noundef) local_unnamed_addr #3

declare i32 @pointer_set_insert(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @error(ptr noundef, ...) local_unnamed_addr #3

declare void @debug_gimple_stmt(ptr noundef) local_unnamed_addr #3

declare void @debug_generic_expr(ptr noundef) local_unnamed_addr #3

declare ptr @walk_tree_1(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @verify_node_sharing(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #9 {
  %4 = getelementptr inbounds %struct.walk_stmt_info, ptr %2, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !278
  %6 = load ptr, ptr %0, align 8, !tbaa !5
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = and i32 %10, -2
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %49, label %13

13:                                               ; preds = %3
  %14 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %6) #26
  %15 = icmp ne i8 %14, 0
  %16 = load ptr, ptr @global_trees, align 16
  %17 = freeze ptr %16
  %18 = icmp eq ptr %17, %6
  %19 = or i1 %15, %18
  br i1 %19, label %49, label %20

20:                                               ; preds = %13
  %21 = load i64, ptr %6, align 8
  %22 = trunc i64 %21 to i16
  switch i16 %22, label %23 [
    i16 141, label %49
    i16 1, label %49
    i16 139, label %49
  ]

23:                                               ; preds = %20, %40
  %24 = phi i64 [ %43, %40 ], [ %21, %20 ]
  %25 = phi ptr [ %42, %40 ], [ %6, %20 ]
  %26 = trunc i64 %24 to i32
  %27 = and i32 %26, 65535
  %28 = add nsw i32 %27, -45
  %29 = icmp ult i32 %28, 2
  br i1 %29, label %30, label %37

30:                                               ; preds = %23
  %31 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %32) #26
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = load i64, ptr %25, align 8
  br label %37

37:                                               ; preds = %35, %23
  %38 = phi i64 [ %36, %35 ], [ %24, %23 ]
  %39 = trunc i64 %38 to i16
  switch i16 %39, label %44 [
    i16 41, label %40
    i16 43, label %40
    i16 44, label %40
  ]

40:                                               ; preds = %37, %37, %37, %30
  %41 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = load i64, ptr %42, align 8
  br label %23, !llvm.loop !277

44:                                               ; preds = %37
  %45 = and i64 %38, 65535
  %46 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !16
  %48 = icmp eq i32 %47, 3
  br i1 %48, label %49, label %50

49:                                               ; preds = %13, %20, %20, %20, %3, %44
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %56

50:                                               ; preds = %44
  %51 = load ptr, ptr %0, align 8, !tbaa !5
  %52 = tail call i32 @pointer_set_insert(ptr noundef %5, ptr noundef %51) #26
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = load ptr, ptr %0, align 8, !tbaa !5
  br label %56

56:                                               ; preds = %50, %54, %49
  %57 = phi ptr [ null, %49 ], [ %55, %54 ], [ null, %50 ]
  ret ptr %57
}

declare ptr @get_eh_landing_pad_from_number(i32 noundef) local_unnamed_addr #3

declare ptr @walk_gimple_op(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_eh_throw_stmt_table(ptr noundef) local_unnamed_addr #3

declare void @htab_traverse(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @verify_eh_throw_stmt_node(ptr nocapture noundef readonly %0, ptr noundef %1) #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load ptr, ptr %3, align 8, !tbaa !287
  %5 = tail call i32 @pointer_set_contains(ptr noundef %1, ptr noundef %4) #26
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.146) #26
  %8 = load ptr, ptr %3, align 8, !tbaa !287
  tail call void @debug_gimple_stmt(ptr noundef %8) #26
  store i1 true, ptr @eh_error_found, align 1
  br label %9

9:                                                ; preds = %7, %2
  ret i32 1
}

declare void @pointer_set_destroy(ptr noundef) local_unnamed_addr #3

declare void @verify_histograms() local_unnamed_addr #3

declare void @timevar_pop_1(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @gimple_block_label(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  tail call void @llvm.experimental.noalias.scope.decl(metadata !289)
  %4 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %5 = load i32, ptr %4, align 8, !tbaa !58, !noalias !289
  %6 = and i32 %5, 512
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %17

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !16, !noalias !289
  %11 = icmp eq ptr %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = load ptr, ptr %10, align 8, !tbaa !59, !noalias !289
  %14 = icmp eq ptr %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = load ptr, ptr %13, align 8, !tbaa !42, !noalias !289
  br label %17

17:                                               ; preds = %1, %8, %12, %15
  %18 = phi ptr [ %13, %15 ], [ null, %12 ], [ null, %8 ], [ null, %1 ]
  %19 = phi ptr [ %16, %15 ], [ null, %12 ], [ null, %8 ], [ null, %1 ]
  store ptr %19, ptr %3, align 8, !tbaa !44, !alias.scope !289
  %20 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  store ptr %18, ptr %20, align 8, !tbaa !46, !alias.scope !289
  %21 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  store ptr %0, ptr %21, align 8, !tbaa !49, !alias.scope !289
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %2, ptr noundef nonnull align 8 dereferenceable(24) %3, i64 24, i1 false), !tbaa.struct !194
  %22 = load ptr, ptr %2, align 8, !tbaa !44
  %23 = icmp eq ptr %22, null
  br i1 %23, label %68, label %24

24:                                               ; preds = %17
  %25 = load ptr, ptr %22, align 8, !tbaa !47
  %26 = load i32, ptr %25, align 8
  %27 = and i32 %26, 255
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %29, label %68

29:                                               ; preds = %24
  %30 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %31
  %33 = load i64, ptr %32, align 8, !tbaa !50
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %36

36:                                               ; preds = %35, %29
  %37 = getelementptr inbounds i8, ptr %25, i64 %33
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.tree_decl_common, ptr %38, i64 0, i32 2
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 256
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %71, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %22, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !53
  store ptr %45, ptr %2, align 8, !tbaa !44
  %46 = icmp eq ptr %45, null
  br i1 %46, label %68, label %47

47:                                               ; preds = %43, %64
  %48 = phi ptr [ %66, %64 ], [ %45, %43 ]
  %49 = load ptr, ptr %48, align 8, !tbaa !47
  %50 = load i32, ptr %49, align 8
  %51 = and i32 %50, 255
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %53, label %68

53:                                               ; preds = %47
  br i1 %34, label %54, label %55

54:                                               ; preds = %53
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %55

55:                                               ; preds = %53, %54
  %56 = getelementptr inbounds i8, ptr %49, i64 %33
  %57 = load ptr, ptr %56, align 8, !tbaa !5
  %58 = getelementptr inbounds %struct.tree_decl_common, ptr %57, i64 0, i32 2
  %59 = load i64, ptr %58, align 8
  %60 = and i64 %59, 256
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %55
  br i1 %42, label %71, label %63

63:                                               ; preds = %62
  call void @gsi_move_before(ptr noundef nonnull %2, ptr noundef nonnull %3) #26
  br label %71

64:                                               ; preds = %55
  %65 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %48, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !53
  store ptr %66, ptr %2, align 8, !tbaa !44
  %67 = icmp eq ptr %66, null
  br i1 %67, label %68, label %47, !llvm.loop !292

68:                                               ; preds = %64, %47, %24, %43, %17
  %69 = tail call ptr @create_artificial_label(i32 noundef 0) #26
  %70 = tail call ptr @gimple_build_label(ptr noundef %69) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %70, i32 noundef 0) #26
  br label %71

71:                                               ; preds = %36, %62, %63, %68
  %72 = phi ptr [ %69, %68 ], [ %57, %63 ], [ %57, %62 ], [ %38, %36 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  ret ptr %72
}

declare void @gsi_move_before(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @create_artificial_label(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @add_phi_args_after_copy_bb(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  br label %3

3:                                                ; preds = %1, %22
  %4 = phi i32 [ 0, %1 ], [ %23, %22 ]
  %5 = load ptr, ptr %2, align 8, !tbaa !5
  %6 = icmp eq ptr %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = load i32, ptr %5, align 8, !tbaa !106
  br label %9

9:                                                ; preds = %7, %3
  %10 = phi i32 [ %8, %7 ], [ 0, %3 ]
  %11 = icmp eq i32 %10, %4
  br i1 %11, label %24, label %12

12:                                               ; preds = %9
  %13 = zext i32 %4 to i64
  %14 = getelementptr inbounds %struct.VEC_edge_base, ptr %5, i64 0, i32 2, i64 %13
  %15 = load ptr, ptr %14, align 8, !tbaa !5
  tail call fastcc void @add_phi_args_after_copy_edge(ptr noundef %15)
  %16 = load ptr, ptr %2, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = load i32, ptr %16, align 8, !tbaa !106
  %20 = icmp ult i32 %4, %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %18, %12
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %22

22:                                               ; preds = %18, %21
  %23 = add i32 %4, 1
  br label %3, !llvm.loop !294

24:                                               ; preds = %9
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @add_phi_args_after_copy_edge(ptr noundef %0) unnamed_addr #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = load ptr, ptr %0, align 8, !tbaa !295
  %5 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !109
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %6, i64 0, i32 13
  %8 = load i32, ptr %7, align 8, !tbaa !58
  %9 = and i32 %8, 512
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %12

12:                                               ; preds = %11, %1
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %6, i64 0, i32 7
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  %15 = icmp eq ptr %14, null
  br i1 %15, label %118, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.gimple_bb_info, ptr %14, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !296
  %19 = icmp eq ptr %18, null
  br i1 %19, label %118, label %20

20:                                               ; preds = %16
  %21 = load ptr, ptr %18, align 8, !tbaa !42
  %22 = icmp eq ptr %21, null
  br i1 %22, label %118, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 13
  %25 = load i32, ptr %24, align 8, !tbaa !58
  %26 = and i32 %25, 128
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = tail call ptr @get_bb_original(ptr noundef nonnull %4) #26
  br label %30

30:                                               ; preds = %23, %28
  %31 = phi ptr [ %29, %28 ], [ %4, %23 ]
  %32 = load ptr, ptr %5, align 8, !tbaa !109
  %33 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 13
  %34 = load i32, ptr %33, align 8, !tbaa !58
  %35 = and i32 %34, 128
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %30
  %38 = tail call ptr @get_bb_original(ptr noundef nonnull %32) #26
  br label %39

39:                                               ; preds = %30, %37
  %40 = phi ptr [ %38, %37 ], [ %32, %30 ]
  %41 = tail call ptr @find_edge(ptr noundef %31, ptr noundef %40) #26
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %78

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.basic_block_def, ptr %31, i64 0, i32 1
  br label %45

45:                                               ; preds = %43, %75
  %46 = phi i32 [ 0, %43 ], [ %76, %75 ]
  %47 = load ptr, ptr %44, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %45
  %50 = load i32, ptr %47, align 8, !tbaa !106
  br label %51

51:                                               ; preds = %49, %45
  %52 = phi i32 [ %50, %49 ], [ 0, %45 ]
  %53 = icmp eq i32 %52, %46
  br i1 %53, label %77, label %54

54:                                               ; preds = %51
  %55 = zext i32 %46 to i64
  %56 = getelementptr inbounds %struct.VEC_edge_base, ptr %47, i64 0, i32 2, i64 %55
  %57 = load ptr, ptr %56, align 8, !tbaa !5
  %58 = getelementptr inbounds %struct.edge_def, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %58, align 8, !tbaa !109
  %60 = getelementptr inbounds %struct.basic_block_def, ptr %59, i64 0, i32 13
  %61 = load i32, ptr %60, align 8, !tbaa !58
  %62 = and i32 %61, 128
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %70, label %64

64:                                               ; preds = %54
  %65 = tail call ptr @get_bb_original(ptr noundef nonnull %59) #26
  %66 = icmp eq ptr %65, %40
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = load ptr, ptr %44, align 8, !tbaa !5
  %69 = icmp eq ptr %68, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %54, %67
  %71 = phi ptr [ %68, %67 ], [ %47, %54 ]
  %72 = load i32, ptr %71, align 8, !tbaa !106
  %73 = icmp ult i32 %46, %72
  br i1 %73, label %75, label %74

74:                                               ; preds = %70, %67
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %75

75:                                               ; preds = %70, %74
  %76 = add i32 %46, 1
  br label %45, !llvm.loop !297

77:                                               ; preds = %51
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4962, ptr noundef nonnull @.str.2) #26
  br label %78

78:                                               ; preds = %64, %77, %39
  %79 = phi ptr [ null, %77 ], [ %41, %39 ], [ %57, %64 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %80 = getelementptr inbounds %struct.edge_def, ptr %79, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !109
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %2, ptr noundef %81) #26
  %82 = load ptr, ptr %2, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %83 = load ptr, ptr %5, align 8, !tbaa !109
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %3, ptr noundef %83) #26
  %84 = load ptr, ptr %3, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  %85 = icmp eq ptr %82, null
  br i1 %85, label %118, label %86

86:                                               ; preds = %78
  %87 = getelementptr %struct.edge_def, ptr %79, i64 0, i32 6
  br label %88

88:                                               ; preds = %86, %109
  %89 = phi ptr [ %84, %86 ], [ %116, %109 ]
  %90 = phi ptr [ %82, %86 ], [ %114, %109 ]
  %91 = load ptr, ptr %90, align 8, !tbaa !47
  %92 = load ptr, ptr %89, align 8, !tbaa !47
  %93 = load i32, ptr %87, align 4, !tbaa !298
  %94 = getelementptr inbounds %struct.gimple_statement_phi, ptr %91, i64 0, i32 1
  %95 = load i32, ptr %94, align 8, !tbaa !16
  %96 = icmp ult i32 %95, %93
  br i1 %96, label %97, label %100

97:                                               ; preds = %88
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  %98 = load i32, ptr %87, align 4, !tbaa !298
  %99 = load i32, ptr %94, align 8, !tbaa !16
  br label %100

100:                                              ; preds = %88, %97
  %101 = phi i32 [ %95, %88 ], [ %99, %97 ]
  %102 = phi i32 [ %93, %88 ], [ %98, %97 ]
  %103 = zext i32 %93 to i64
  %104 = getelementptr %struct.gimple_statement_phi, ptr %91, i64 0, i32 4, i64 %103, i32 0, i32 3
  %105 = load ptr, ptr %104, align 8, !tbaa !274
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = icmp ult i32 %101, %102
  br i1 %107, label %108, label %109

108:                                              ; preds = %100
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %109

109:                                              ; preds = %100, %108
  %110 = zext i32 %102 to i64
  %111 = getelementptr inbounds %struct.gimple_statement_phi, ptr %91, i64 0, i32 4, i64 %110, i32 2
  %112 = load i32, ptr %111, align 8, !tbaa !299
  call void @add_phi_arg(ptr noundef %92, ptr noundef %106, ptr noundef nonnull %0, i32 noundef %112) #26
  %113 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %90, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !53
  %115 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %89, i64 0, i32 2
  %116 = load ptr, ptr %115, align 8, !tbaa !53
  %117 = icmp eq ptr %114, null
  br i1 %117, label %118, label %88, !llvm.loop !301

118:                                              ; preds = %109, %78, %12, %16, %20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @add_phi_args_after_copy(ptr nocapture noundef readonly %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %86, label %5

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = and i64 %6, 3
  %8 = icmp ult i32 %1, 4
  br i1 %8, label %11, label %9

9:                                                ; preds = %5
  %10 = and i64 %6, 4294967292
  br label %28

11:                                               ; preds = %28, %5
  %12 = phi i64 [ 0, %5 ], [ %54, %28 ]
  %13 = icmp eq i64 %7, 0
  br i1 %13, label %25, label %14

14:                                               ; preds = %11, %14
  %15 = phi i64 [ %22, %14 ], [ %12, %11 ]
  %16 = phi i64 [ %23, %14 ], [ 0, %11 ]
  %17 = getelementptr inbounds ptr, ptr %0, i64 %15
  %18 = load ptr, ptr %17, align 8, !tbaa !5
  %19 = getelementptr inbounds %struct.basic_block_def, ptr %18, i64 0, i32 13
  %20 = load i32, ptr %19, align 8, !tbaa !58
  %21 = or i32 %20, 128
  store i32 %21, ptr %19, align 8, !tbaa !58
  %22 = add nuw nsw i64 %15, 1
  %23 = add i64 %16, 1
  %24 = icmp eq i64 %23, %7
  br i1 %24, label %25, label %14, !llvm.loop !302

25:                                               ; preds = %14, %11
  br i1 %4, label %86, label %26

26:                                               ; preds = %25
  %27 = zext i32 %1 to i64
  br label %57

28:                                               ; preds = %28, %9
  %29 = phi i64 [ 0, %9 ], [ %54, %28 ]
  %30 = phi i64 [ 0, %9 ], [ %55, %28 ]
  %31 = getelementptr inbounds ptr, ptr %0, i64 %29
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = getelementptr inbounds %struct.basic_block_def, ptr %32, i64 0, i32 13
  %34 = load i32, ptr %33, align 8, !tbaa !58
  %35 = or i32 %34, 128
  store i32 %35, ptr %33, align 8, !tbaa !58
  %36 = or i64 %29, 1
  %37 = getelementptr inbounds ptr, ptr %0, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %38, i64 0, i32 13
  %40 = load i32, ptr %39, align 8, !tbaa !58
  %41 = or i32 %40, 128
  store i32 %41, ptr %39, align 8, !tbaa !58
  %42 = or i64 %29, 2
  %43 = getelementptr inbounds ptr, ptr %0, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !5
  %45 = getelementptr inbounds %struct.basic_block_def, ptr %44, i64 0, i32 13
  %46 = load i32, ptr %45, align 8, !tbaa !58
  %47 = or i32 %46, 128
  store i32 %47, ptr %45, align 8, !tbaa !58
  %48 = or i64 %29, 3
  %49 = getelementptr inbounds ptr, ptr %0, i64 %48
  %50 = load ptr, ptr %49, align 8, !tbaa !5
  %51 = getelementptr inbounds %struct.basic_block_def, ptr %50, i64 0, i32 13
  %52 = load i32, ptr %51, align 8, !tbaa !58
  %53 = or i32 %52, 128
  store i32 %53, ptr %51, align 8, !tbaa !58
  %54 = add nuw nsw i64 %29, 4
  %55 = add i64 %30, 4
  %56 = icmp eq i64 %55, %10
  br i1 %56, label %11, label %28, !llvm.loop !304

57:                                               ; preds = %26, %83
  %58 = phi i64 [ 0, %26 ], [ %84, %83 ]
  %59 = getelementptr inbounds ptr, ptr %0, i64 %58
  %60 = load ptr, ptr %59, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.basic_block_def, ptr %60, i64 0, i32 1
  br label %62

62:                                               ; preds = %81, %57
  %63 = phi i32 [ 0, %57 ], [ %82, %81 ]
  %64 = load ptr, ptr %61, align 8, !tbaa !5
  %65 = icmp eq ptr %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = load i32, ptr %64, align 8, !tbaa !106
  br label %68

68:                                               ; preds = %66, %62
  %69 = phi i32 [ %67, %66 ], [ 0, %62 ]
  %70 = icmp eq i32 %69, %63
  br i1 %70, label %83, label %71

71:                                               ; preds = %68
  %72 = zext i32 %63 to i64
  %73 = getelementptr inbounds %struct.VEC_edge_base, ptr %64, i64 0, i32 2, i64 %72
  %74 = load ptr, ptr %73, align 8, !tbaa !5
  tail call fastcc void @add_phi_args_after_copy_edge(ptr noundef %74)
  %75 = load ptr, ptr %61, align 8, !tbaa !5
  %76 = icmp eq ptr %75, null
  br i1 %76, label %80, label %77

77:                                               ; preds = %71
  %78 = load i32, ptr %75, align 8, !tbaa !106
  %79 = icmp ult i32 %63, %78
  br i1 %79, label %81, label %80

80:                                               ; preds = %77, %71
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %81

81:                                               ; preds = %80, %77
  %82 = add i32 %63, 1
  br label %62, !llvm.loop !294

83:                                               ; preds = %68
  %84 = add nuw nsw i64 %58, 1
  %85 = icmp eq i64 %84, %27
  br i1 %85, label %86, label %57, !llvm.loop !305

86:                                               ; preds = %83, %3, %25
  %87 = icmp eq ptr %2, null
  br i1 %87, label %89, label %88

88:                                               ; preds = %86
  tail call fastcc void @add_phi_args_after_copy_edge(ptr noundef nonnull %2)
  br label %89

89:                                               ; preds = %88, %86
  br i1 %4, label %139, label %90

90:                                               ; preds = %89
  %91 = zext i32 %1 to i64
  %92 = and i64 %91, 3
  %93 = icmp ult i32 %1, 4
  br i1 %93, label %125, label %94

94:                                               ; preds = %90
  %95 = and i64 %91, 4294967292
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %122, %96 ]
  %98 = phi i64 [ 0, %94 ], [ %123, %96 ]
  %99 = getelementptr inbounds ptr, ptr %0, i64 %97
  %100 = load ptr, ptr %99, align 8, !tbaa !5
  %101 = getelementptr inbounds %struct.basic_block_def, ptr %100, i64 0, i32 13
  %102 = load i32, ptr %101, align 8, !tbaa !58
  %103 = and i32 %102, -129
  store i32 %103, ptr %101, align 8, !tbaa !58
  %104 = or i64 %97, 1
  %105 = getelementptr inbounds ptr, ptr %0, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = getelementptr inbounds %struct.basic_block_def, ptr %106, i64 0, i32 13
  %108 = load i32, ptr %107, align 8, !tbaa !58
  %109 = and i32 %108, -129
  store i32 %109, ptr %107, align 8, !tbaa !58
  %110 = or i64 %97, 2
  %111 = getelementptr inbounds ptr, ptr %0, i64 %110
  %112 = load ptr, ptr %111, align 8, !tbaa !5
  %113 = getelementptr inbounds %struct.basic_block_def, ptr %112, i64 0, i32 13
  %114 = load i32, ptr %113, align 8, !tbaa !58
  %115 = and i32 %114, -129
  store i32 %115, ptr %113, align 8, !tbaa !58
  %116 = or i64 %97, 3
  %117 = getelementptr inbounds ptr, ptr %0, i64 %116
  %118 = load ptr, ptr %117, align 8, !tbaa !5
  %119 = getelementptr inbounds %struct.basic_block_def, ptr %118, i64 0, i32 13
  %120 = load i32, ptr %119, align 8, !tbaa !58
  %121 = and i32 %120, -129
  store i32 %121, ptr %119, align 8, !tbaa !58
  %122 = add nuw nsw i64 %97, 4
  %123 = add i64 %98, 4
  %124 = icmp eq i64 %123, %95
  br i1 %124, label %125, label %96, !llvm.loop !306

125:                                              ; preds = %96, %90
  %126 = phi i64 [ 0, %90 ], [ %122, %96 ]
  %127 = icmp eq i64 %92, 0
  br i1 %127, label %139, label %128

128:                                              ; preds = %125, %128
  %129 = phi i64 [ %136, %128 ], [ %126, %125 ]
  %130 = phi i64 [ %137, %128 ], [ 0, %125 ]
  %131 = getelementptr inbounds ptr, ptr %0, i64 %129
  %132 = load ptr, ptr %131, align 8, !tbaa !5
  %133 = getelementptr inbounds %struct.basic_block_def, ptr %132, i64 0, i32 13
  %134 = load i32, ptr %133, align 8, !tbaa !58
  %135 = and i32 %134, -129
  store i32 %135, ptr %133, align 8, !tbaa !58
  %136 = add nuw nsw i64 %129, 1
  %137 = add i64 %130, 1
  %138 = icmp eq i64 %137, %92
  br i1 %138, label %139, label %128, !llvm.loop !307

139:                                              ; preds = %125, %128, %89
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @gimple_duplicate_sese_region(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) local_unnamed_addr #9 {
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  store ptr %1, ptr %6, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !109
  %10 = getelementptr inbounds %struct.basic_block_def, ptr %9, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !308
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #26
  %12 = tail call zeroext i8 @can_copy_bbs_p(ptr noundef %2, i32 noundef %3) #26
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %294, label %14

14:                                               ; preds = %5
  %15 = icmp eq i32 %3, 0
  br i1 %15, label %35, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.loop, ptr %11, i64 0, i32 2
  %18 = zext i32 %3 to i64
  br label %19

19:                                               ; preds = %16, %32
  %20 = phi i64 [ 0, %16 ], [ %33, %32 ]
  %21 = getelementptr inbounds ptr, ptr %2, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.basic_block_def, ptr %22, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !308
  %25 = icmp eq ptr %24, %11
  br i1 %25, label %26, label %294

26:                                               ; preds = %19
  %27 = load ptr, ptr %8, align 8, !tbaa !109
  %28 = icmp eq ptr %22, %27
  br i1 %28, label %32, label %29

29:                                               ; preds = %26
  %30 = load ptr, ptr %17, align 8, !tbaa !309
  %31 = icmp eq ptr %22, %30
  br i1 %31, label %294, label %32

32:                                               ; preds = %26, %29
  %33 = add nuw nsw i64 %20, 1
  %34 = icmp eq i64 %33, %18
  br i1 %34, label %35, label %19, !llvm.loop !310

35:                                               ; preds = %32, %14
  tail call void @set_loop_copy(ptr noundef %11, ptr noundef %11) #26
  %36 = getelementptr inbounds %struct.loop, ptr %11, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !309
  %38 = load ptr, ptr %8, align 8, !tbaa !109
  %39 = icmp eq ptr %37, %38
  br i1 %39, label %40, label %74

40:                                               ; preds = %35
  %41 = getelementptr i8, ptr %11, i64 40
  %42 = load ptr, ptr %41, align 8, !tbaa !234
  %43 = icmp eq ptr %42, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %40
  %45 = load i32, ptr %42, align 8, !tbaa !223
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %44
  %48 = add i32 %45, -1
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %42, i64 0, i32 2, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !5
  br label %52

52:                                               ; preds = %40, %44, %47
  %53 = phi ptr [ %51, %47 ], [ null, %44 ], [ null, %40 ]
  tail call void @set_loop_copy(ptr noundef nonnull %11, ptr noundef %53) #26
  %54 = getelementptr inbounds %struct.loop, ptr %11, i64 0, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !311
  %56 = load ptr, ptr %1, align 8, !tbaa !295
  %57 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %55, ptr noundef %56) #26
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %294, label %59

59:                                               ; preds = %52
  br i1 %15, label %74, label %60

60:                                               ; preds = %59
  %61 = zext i32 %3 to i64
  br label %62

62:                                               ; preds = %60, %71
  %63 = phi i64 [ 0, %60 ], [ %72, %71 ]
  %64 = getelementptr inbounds ptr, ptr %2, i64 %63
  %65 = load ptr, ptr %64, align 8, !tbaa !5
  %66 = load ptr, ptr %1, align 8, !tbaa !295
  %67 = icmp eq ptr %65, %66
  br i1 %67, label %71, label %68

68:                                               ; preds = %62
  %69 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %65, ptr noundef %66) #26
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %294

71:                                               ; preds = %62, %68
  %72 = add nuw nsw i64 %63, 1
  %73 = icmp eq i64 %72, %61
  br i1 %73, label %74, label %62, !llvm.loop !312

74:                                               ; preds = %71, %59, %35
  %75 = icmp eq ptr %4, null
  br i1 %75, label %76, label %80

76:                                               ; preds = %74
  %77 = zext i32 %3 to i64
  %78 = shl nuw nsw i64 %77, 3
  %79 = tail call ptr @xmalloc(i64 noundef %78) #26
  br label %80

80:                                               ; preds = %76, %74
  %81 = phi ptr [ %4, %74 ], [ %79, %76 ]
  %82 = load ptr, ptr @cfun, align 8, !tbaa !5
  %83 = tail call zeroext i8 @need_ssa_update_p(ptr noundef %82) #26
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %86, label %85

85:                                               ; preds = %80
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5085, ptr noundef nonnull @.str.2) #26
  br label %86

86:                                               ; preds = %80, %85
  tail call void @initialize_original_copy_tables() #26
  %87 = tail call ptr @get_dominated_by_region(i32 noundef 1, ptr noundef %2, i32 noundef %3) #26
  %88 = load ptr, ptr %8, align 8, !tbaa !109
  %89 = getelementptr inbounds %struct.basic_block_def, ptr %88, i64 0, i32 8
  %90 = load i64, ptr %89, align 8, !tbaa !313
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %86
  %93 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 9
  %94 = load i64, ptr %93, align 8, !tbaa !314
  %95 = tail call i64 @llvm.smin.i64(i64 %94, i64 %90)
  br label %110

96:                                               ; preds = %86
  %97 = getelementptr inbounds %struct.basic_block_def, ptr %88, i64 0, i32 11
  %98 = load i32, ptr %97, align 8, !tbaa !315
  %99 = load ptr, ptr %0, align 8, !tbaa !295
  %100 = getelementptr inbounds %struct.basic_block_def, ptr %99, i64 0, i32 11
  %101 = load i32, ptr %100, align 8, !tbaa !315
  %102 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 8
  %103 = load i32, ptr %102, align 4, !tbaa !316
  %104 = mul nsw i32 %103, %101
  %105 = add nsw i32 %104, 5000
  %106 = sdiv i32 %105, 10000
  %107 = icmp eq i32 %98, 0
  br i1 %107, label %110, label %108

108:                                              ; preds = %96
  %109 = tail call i32 @llvm.smin.i32(i32 %106, i32 %98)
  br label %110

110:                                              ; preds = %108, %92, %96
  %111 = phi i32 [ 0, %92 ], [ 1, %96 ], [ %98, %108 ]
  %112 = phi i32 [ 0, %92 ], [ %106, %96 ], [ %109, %108 ]
  %113 = phi i64 [ %95, %92 ], [ 0, %96 ], [ 0, %108 ]
  %114 = getelementptr inbounds %struct.basic_block_def, ptr %88, i64 0, i32 5
  %115 = load ptr, ptr %114, align 8, !tbaa !38
  %116 = icmp eq ptr %115, null
  br i1 %116, label %127, label %117

117:                                              ; preds = %110
  %118 = tail call ptr @find_edge(ptr noundef nonnull %115, ptr noundef nonnull %88) #26
  %119 = icmp eq ptr %118, null
  br i1 %119, label %127, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.edge_def, ptr %118, i64 0, i32 7
  %122 = load i32, ptr %121, align 8, !tbaa !108
  %123 = and i32 %122, 14
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %120
  %126 = load ptr, ptr %0, align 8, !tbaa !295
  br label %127

127:                                              ; preds = %110, %117, %120, %125
  %128 = phi ptr [ %126, %125 ], [ null, %110 ], [ %115, %120 ], [ %115, %117 ]
  call void @copy_bbs(ptr noundef %2, i32 noundef %3, ptr noundef %81, ptr noundef nonnull %6, i32 noundef 1, ptr noundef nonnull %7, ptr noundef %11, ptr noundef %128) #26
  br i1 %91, label %131, label %129

129:                                              ; preds = %127
  %130 = sub nsw i64 %90, %113
  call void @scale_bbs_frequencies_gcov_type(ptr noundef %2, i32 noundef %3, i64 noundef %130, i64 noundef %90) #26
  call void @scale_bbs_frequencies_gcov_type(ptr noundef %81, i32 noundef %3, i64 noundef %113, i64 noundef %90) #26
  br label %133

131:                                              ; preds = %127
  %132 = sub nsw i32 %111, %112
  call void @scale_bbs_frequencies_int(ptr noundef %2, i32 noundef %3, i32 noundef %132, i32 noundef %111) #26
  call void @scale_bbs_frequencies_int(ptr noundef %81, i32 noundef %3, i32 noundef %112, i32 noundef %111) #26
  br label %133

133:                                              ; preds = %131, %129
  br i1 %39, label %134, label %138

134:                                              ; preds = %133
  %135 = load ptr, ptr %6, align 8, !tbaa !5
  %136 = load <2 x ptr>, ptr %135, align 8, !tbaa !5
  %137 = shufflevector <2 x ptr> %136, <2 x ptr> poison, <2 x i32> <i32 1, i32 0>
  store <2 x ptr> %137, ptr %36, align 8, !tbaa !5
  br label %138

138:                                              ; preds = %134, %133
  %139 = load ptr, ptr %8, align 8, !tbaa !109
  %140 = call ptr @get_bb_copy(ptr noundef %139) #26
  %141 = call ptr @redirect_edge_and_branch(ptr noundef nonnull %0, ptr noundef %140) #26
  %142 = icmp eq ptr %141, null
  br i1 %142, label %143, label %144

143:                                              ; preds = %138
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5140, ptr noundef nonnull @.str.2) #26
  br label %144

144:                                              ; preds = %138, %143
  call void @flush_pending_stmts(ptr noundef nonnull %0) #26
  %145 = load ptr, ptr %8, align 8, !tbaa !109
  %146 = load ptr, ptr %0, align 8, !tbaa !295
  call void @set_immediate_dominator(i32 noundef 1, ptr noundef %145, ptr noundef %146) #26
  %147 = load ptr, ptr %8, align 8, !tbaa !109
  %148 = call ptr @get_bb_original(ptr noundef %147) #26
  %149 = icmp eq ptr %87, null
  br i1 %149, label %155, label %150

150:                                              ; preds = %144
  %151 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %87, i64 0, i32 1
  %152 = load i32, ptr %151, align 4, !tbaa !32
  %153 = load i32, ptr %87, align 8, !tbaa !30
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %155, label %158

155:                                              ; preds = %150, %144
  %156 = call ptr @vec_heap_p_reserve(ptr noundef %87, i32 noundef 1) #26
  %157 = load i32, ptr %156, align 8, !tbaa !30
  br label %158

158:                                              ; preds = %150, %155
  %159 = phi ptr [ %156, %155 ], [ %87, %150 ]
  %160 = phi i32 [ %157, %155 ], [ %153, %150 ]
  %161 = add i32 %160, 1
  store i32 %161, ptr %159, align 8, !tbaa !30
  %162 = zext i32 %160 to i64
  %163 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %159, i64 0, i32 2, i64 %162
  store ptr %148, ptr %163, align 8, !tbaa !5
  call void @iterate_fix_dominators(i32 noundef 1, ptr noundef nonnull %159, i8 noundef zeroext 0) #26
  call void @free(ptr noundef nonnull %159)
  br i1 %15, label %291, label %164

164:                                              ; preds = %158
  %165 = zext i32 %3 to i64
  %166 = and i64 %165, 3
  %167 = icmp ult i32 %3, 4
  br i1 %167, label %199, label %168

168:                                              ; preds = %164
  %169 = and i64 %165, 4294967292
  br label %170

170:                                              ; preds = %170, %168
  %171 = phi i64 [ 0, %168 ], [ %196, %170 ]
  %172 = phi i64 [ 0, %168 ], [ %197, %170 ]
  %173 = getelementptr inbounds ptr, ptr %81, i64 %171
  %174 = load ptr, ptr %173, align 8, !tbaa !5
  %175 = getelementptr inbounds %struct.basic_block_def, ptr %174, i64 0, i32 13
  %176 = load i32, ptr %175, align 8, !tbaa !58
  %177 = or i32 %176, 128
  store i32 %177, ptr %175, align 8, !tbaa !58
  %178 = or i64 %171, 1
  %179 = getelementptr inbounds ptr, ptr %81, i64 %178
  %180 = load ptr, ptr %179, align 8, !tbaa !5
  %181 = getelementptr inbounds %struct.basic_block_def, ptr %180, i64 0, i32 13
  %182 = load i32, ptr %181, align 8, !tbaa !58
  %183 = or i32 %182, 128
  store i32 %183, ptr %181, align 8, !tbaa !58
  %184 = or i64 %171, 2
  %185 = getelementptr inbounds ptr, ptr %81, i64 %184
  %186 = load ptr, ptr %185, align 8, !tbaa !5
  %187 = getelementptr inbounds %struct.basic_block_def, ptr %186, i64 0, i32 13
  %188 = load i32, ptr %187, align 8, !tbaa !58
  %189 = or i32 %188, 128
  store i32 %189, ptr %187, align 8, !tbaa !58
  %190 = or i64 %171, 3
  %191 = getelementptr inbounds ptr, ptr %81, i64 %190
  %192 = load ptr, ptr %191, align 8, !tbaa !5
  %193 = getelementptr inbounds %struct.basic_block_def, ptr %192, i64 0, i32 13
  %194 = load i32, ptr %193, align 8, !tbaa !58
  %195 = or i32 %194, 128
  store i32 %195, ptr %193, align 8, !tbaa !58
  %196 = add nuw nsw i64 %171, 4
  %197 = add i64 %172, 4
  %198 = icmp eq i64 %197, %169
  br i1 %198, label %199, label %170, !llvm.loop !304

199:                                              ; preds = %170, %164
  %200 = phi i64 [ 0, %164 ], [ %196, %170 ]
  %201 = icmp eq i64 %166, 0
  br i1 %201, label %213, label %202

202:                                              ; preds = %199, %202
  %203 = phi i64 [ %210, %202 ], [ %200, %199 ]
  %204 = phi i64 [ %211, %202 ], [ 0, %199 ]
  %205 = getelementptr inbounds ptr, ptr %81, i64 %203
  %206 = load ptr, ptr %205, align 8, !tbaa !5
  %207 = getelementptr inbounds %struct.basic_block_def, ptr %206, i64 0, i32 13
  %208 = load i32, ptr %207, align 8, !tbaa !58
  %209 = or i32 %208, 128
  store i32 %209, ptr %207, align 8, !tbaa !58
  %210 = add nuw nsw i64 %203, 1
  %211 = add i64 %204, 1
  %212 = icmp eq i64 %211, %166
  br i1 %212, label %213, label %202, !llvm.loop !317

213:                                              ; preds = %202, %199
  br label %214

214:                                              ; preds = %213, %240
  %215 = phi i64 [ %241, %240 ], [ 0, %213 ]
  %216 = getelementptr inbounds ptr, ptr %81, i64 %215
  %217 = load ptr, ptr %216, align 8, !tbaa !5
  %218 = getelementptr inbounds %struct.basic_block_def, ptr %217, i64 0, i32 1
  br label %219

219:                                              ; preds = %238, %214
  %220 = phi i32 [ 0, %214 ], [ %239, %238 ]
  %221 = load ptr, ptr %218, align 8, !tbaa !5
  %222 = icmp eq ptr %221, null
  br i1 %222, label %225, label %223

223:                                              ; preds = %219
  %224 = load i32, ptr %221, align 8, !tbaa !106
  br label %225

225:                                              ; preds = %223, %219
  %226 = phi i32 [ %224, %223 ], [ 0, %219 ]
  %227 = icmp eq i32 %226, %220
  br i1 %227, label %240, label %228

228:                                              ; preds = %225
  %229 = zext i32 %220 to i64
  %230 = getelementptr inbounds %struct.VEC_edge_base, ptr %221, i64 0, i32 2, i64 %229
  %231 = load ptr, ptr %230, align 8, !tbaa !5
  call fastcc void @add_phi_args_after_copy_edge(ptr noundef %231)
  %232 = load ptr, ptr %218, align 8, !tbaa !5
  %233 = icmp eq ptr %232, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %228
  %235 = load i32, ptr %232, align 8, !tbaa !106
  %236 = icmp ult i32 %220, %235
  br i1 %236, label %238, label %237

237:                                              ; preds = %234, %228
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %238

238:                                              ; preds = %237, %234
  %239 = add i32 %220, 1
  br label %219, !llvm.loop !294

240:                                              ; preds = %225
  %241 = add nuw nsw i64 %215, 1
  %242 = icmp eq i64 %241, %165
  br i1 %242, label %243, label %214, !llvm.loop !305

243:                                              ; preds = %240
  %244 = and i64 %165, 3
  %245 = icmp ult i32 %3, 4
  br i1 %245, label %277, label %246

246:                                              ; preds = %243
  %247 = and i64 %165, 4294967292
  br label %248

248:                                              ; preds = %248, %246
  %249 = phi i64 [ 0, %246 ], [ %274, %248 ]
  %250 = phi i64 [ 0, %246 ], [ %275, %248 ]
  %251 = getelementptr inbounds ptr, ptr %81, i64 %249
  %252 = load ptr, ptr %251, align 8, !tbaa !5
  %253 = getelementptr inbounds %struct.basic_block_def, ptr %252, i64 0, i32 13
  %254 = load i32, ptr %253, align 8, !tbaa !58
  %255 = and i32 %254, -129
  store i32 %255, ptr %253, align 8, !tbaa !58
  %256 = or i64 %249, 1
  %257 = getelementptr inbounds ptr, ptr %81, i64 %256
  %258 = load ptr, ptr %257, align 8, !tbaa !5
  %259 = getelementptr inbounds %struct.basic_block_def, ptr %258, i64 0, i32 13
  %260 = load i32, ptr %259, align 8, !tbaa !58
  %261 = and i32 %260, -129
  store i32 %261, ptr %259, align 8, !tbaa !58
  %262 = or i64 %249, 2
  %263 = getelementptr inbounds ptr, ptr %81, i64 %262
  %264 = load ptr, ptr %263, align 8, !tbaa !5
  %265 = getelementptr inbounds %struct.basic_block_def, ptr %264, i64 0, i32 13
  %266 = load i32, ptr %265, align 8, !tbaa !58
  %267 = and i32 %266, -129
  store i32 %267, ptr %265, align 8, !tbaa !58
  %268 = or i64 %249, 3
  %269 = getelementptr inbounds ptr, ptr %81, i64 %268
  %270 = load ptr, ptr %269, align 8, !tbaa !5
  %271 = getelementptr inbounds %struct.basic_block_def, ptr %270, i64 0, i32 13
  %272 = load i32, ptr %271, align 8, !tbaa !58
  %273 = and i32 %272, -129
  store i32 %273, ptr %271, align 8, !tbaa !58
  %274 = add nuw nsw i64 %249, 4
  %275 = add i64 %250, 4
  %276 = icmp eq i64 %275, %247
  br i1 %276, label %277, label %248, !llvm.loop !306

277:                                              ; preds = %248, %243
  %278 = phi i64 [ 0, %243 ], [ %274, %248 ]
  %279 = icmp eq i64 %244, 0
  br i1 %279, label %291, label %280

280:                                              ; preds = %277, %280
  %281 = phi i64 [ %288, %280 ], [ %278, %277 ]
  %282 = phi i64 [ %289, %280 ], [ 0, %277 ]
  %283 = getelementptr inbounds ptr, ptr %81, i64 %281
  %284 = load ptr, ptr %283, align 8, !tbaa !5
  %285 = getelementptr inbounds %struct.basic_block_def, ptr %284, i64 0, i32 13
  %286 = load i32, ptr %285, align 8, !tbaa !58
  %287 = and i32 %286, -129
  store i32 %287, ptr %285, align 8, !tbaa !58
  %288 = add nuw nsw i64 %281, 1
  %289 = add i64 %282, 1
  %290 = icmp eq i64 %289, %244
  br i1 %290, label %291, label %280, !llvm.loop !318

291:                                              ; preds = %277, %280, %158
  call void @update_ssa(i32 noundef 2048) #26
  br i1 %75, label %292, label %293

292:                                              ; preds = %291
  call void @free(ptr noundef %81)
  br label %293

293:                                              ; preds = %292, %291
  call void @free_original_copy_tables() #26
  br label %294

294:                                              ; preds = %29, %19, %68, %52, %5, %293
  %295 = phi i8 [ 1, %293 ], [ 0, %5 ], [ 0, %52 ], [ 0, %68 ], [ 0, %19 ], [ 0, %29 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #26
  ret i8 %295
}

declare zeroext i8 @can_copy_bbs_p(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @set_loop_copy(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @dominated_by_p(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @xmalloc(i64 noundef) local_unnamed_addr #3

declare zeroext i8 @need_ssa_update_p(ptr noundef) local_unnamed_addr #3

declare void @initialize_original_copy_tables() local_unnamed_addr #3

declare ptr @get_dominated_by_region(i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @copy_bbs(ptr noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @scale_bbs_frequencies_gcov_type(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare void @scale_bbs_frequencies_int(ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @redirect_edge_and_branch(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_bb_copy(ptr noundef) local_unnamed_addr #3

declare void @flush_pending_stmts(ptr noundef) #3

declare void @set_immediate_dominator(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_bb_original(ptr noundef) local_unnamed_addr #3

declare void @iterate_fix_dominators(i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @update_ssa(i32 noundef) local_unnamed_addr #3

declare void @free_original_copy_tables() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @gimple_duplicate_sese_tail(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) local_unnamed_addr #9 {
  %6 = alloca [2 x ptr], align 16
  %7 = alloca [2 x ptr], align 16
  %8 = alloca %struct.gimple_stmt_iterator, align 8
  %9 = alloca %struct.gimple_stmt_iterator, align 8
  %10 = alloca %struct.gimple_stmt_iterator, align 8
  %11 = getelementptr inbounds %struct.edge_def, ptr %1, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !109
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !308
  %15 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !109
  %17 = getelementptr inbounds %struct.basic_block_def, ptr %16, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !308
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #26
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #26
  %19 = load ptr, ptr %1, align 8, !tbaa !295
  %20 = getelementptr inbounds %struct.basic_block_def, ptr %19, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !105
  %22 = icmp eq ptr %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %5
  %24 = load i32, ptr %21, align 8, !tbaa !106
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %30, label %26

26:                                               ; preds = %5, %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5218, ptr noundef nonnull @.str.2) #26
  %27 = load ptr, ptr %1, align 8, !tbaa !295
  %28 = getelementptr inbounds %struct.basic_block_def, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !105
  br label %30

30:                                               ; preds = %23, %26
  %31 = phi ptr [ %21, %23 ], [ %29, %26 ]
  store ptr %1, ptr %6, align 16, !tbaa !5
  %32 = getelementptr inbounds %struct.VEC_edge_base, ptr %31, i64 0, i32 2, i64 0
  %33 = load ptr, ptr %32, align 8, !tbaa !5
  %34 = icmp eq ptr %33, %1
  %35 = zext i1 %34 to i64
  %36 = getelementptr inbounds %struct.VEC_edge_base, ptr %31, i64 0, i32 2, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds [2 x ptr], ptr %6, i64 0, i64 1
  store ptr %37, ptr %38, align 8, !tbaa !5
  %39 = tail call zeroext i8 @can_copy_bbs_p(ptr noundef %2, i32 noundef %3) #26
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %579, label %41

41:                                               ; preds = %30
  tail call void @initialize_original_copy_tables() #26
  tail call void @set_loop_copy(ptr noundef %18, ptr noundef %14) #26
  tail call void @duplicate_subloops(ptr noundef %18, ptr noundef %14) #26
  %42 = icmp eq ptr %4, null
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = zext i32 %3 to i64
  %45 = shl nuw nsw i64 %44, 3
  %46 = tail call ptr @xmalloc(i64 noundef %45) #26
  br label %47

47:                                               ; preds = %43, %41
  %48 = phi ptr [ %4, %41 ], [ %46, %43 ]
  %49 = load ptr, ptr @cfun, align 8, !tbaa !5
  %50 = tail call zeroext i8 @need_ssa_update_p(ptr noundef %49) #26
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %53, label %52

52:                                               ; preds = %47
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5235, ptr noundef nonnull @.str.2) #26
  br label %53

53:                                               ; preds = %47, %52
  %54 = tail call ptr @get_dominated_by_region(i32 noundef 1, ptr noundef %2, i32 noundef %3) #26
  %55 = load ptr, ptr %1, align 8, !tbaa !295
  %56 = getelementptr inbounds %struct.basic_block_def, ptr %55, i64 0, i32 8
  %57 = load i64, ptr %56, align 8, !tbaa !313
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.edge_def, ptr %1, i64 0, i32 9
  %61 = load i64, ptr %60, align 8, !tbaa !314
  %62 = tail call i64 @llvm.smin.i64(i64 %61, i64 %57)
  br label %73

63:                                               ; preds = %53
  %64 = getelementptr inbounds %struct.basic_block_def, ptr %55, i64 0, i32 11
  %65 = load i32, ptr %64, align 8, !tbaa !315
  %66 = getelementptr inbounds %struct.edge_def, ptr %1, i64 0, i32 8
  %67 = load i32, ptr %66, align 4, !tbaa !316
  %68 = mul nsw i32 %67, %65
  %69 = add nsw i32 %68, 5000
  %70 = sdiv i32 %69, 10000
  %71 = tail call i32 @llvm.umax.i32(i32 %65, i32 1)
  %72 = tail call i32 @llvm.smin.i32(i32 %70, i32 %71)
  br label %73

73:                                               ; preds = %63, %59
  %74 = phi i32 [ 0, %59 ], [ %72, %63 ]
  %75 = phi i64 [ %62, %59 ], [ 0, %63 ]
  %76 = phi i32 [ 0, %59 ], [ %71, %63 ]
  %77 = load ptr, ptr %11, align 8, !tbaa !109
  %78 = getelementptr inbounds %struct.basic_block_def, ptr %77, i64 0, i32 5
  %79 = load ptr, ptr %78, align 8, !tbaa !38
  %80 = icmp eq ptr %79, null
  br i1 %80, label %91, label %81

81:                                               ; preds = %73
  %82 = tail call ptr @find_edge(ptr noundef nonnull %79, ptr noundef nonnull %77) #26
  %83 = icmp eq ptr %82, null
  br i1 %83, label %91, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.edge_def, ptr %82, i64 0, i32 7
  %86 = load i32, ptr %85, align 8, !tbaa !108
  %87 = and i32 %86, 14
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %84
  %90 = load ptr, ptr %1, align 8, !tbaa !295
  br label %91

91:                                               ; preds = %73, %81, %84, %89
  %92 = phi ptr [ %90, %89 ], [ null, %73 ], [ %79, %84 ], [ %79, %81 ]
  call void @copy_bbs(ptr noundef %2, i32 noundef %3, ptr noundef %48, ptr noundef nonnull %6, i32 noundef 2, ptr noundef nonnull %7, ptr noundef %18, ptr noundef %92) #26
  br i1 %58, label %95, label %93

93:                                               ; preds = %91
  %94 = sub nsw i64 %57, %75
  call void @scale_bbs_frequencies_gcov_type(ptr noundef %2, i32 noundef %3, i64 noundef %94, i64 noundef %57) #26
  call void @scale_bbs_frequencies_gcov_type(ptr noundef %48, i32 noundef %3, i64 noundef %75, i64 noundef %57) #26
  br label %97

95:                                               ; preds = %91
  %96 = sub nsw i32 %76, %74
  call void @scale_bbs_frequencies_int(ptr noundef %2, i32 noundef %3, i32 noundef %96, i32 noundef %76) #26
  call void @scale_bbs_frequencies_int(ptr noundef %48, i32 noundef %3, i32 noundef %74, i32 noundef %76) #26
  br label %97

97:                                               ; preds = %95, %93
  %98 = load ptr, ptr %15, align 8, !tbaa !109
  %99 = call ptr @get_bb_copy(ptr noundef %98) #26
  %100 = load ptr, ptr %0, align 8, !tbaa !295
  %101 = getelementptr inbounds %struct.basic_block_def, ptr %100, i64 0, i32 13
  %102 = load i32, ptr %101, align 8, !tbaa !58, !noalias !66
  %103 = and i32 %102, 512
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %169

105:                                              ; preds = %97
  %106 = getelementptr inbounds %struct.basic_block_def, ptr %100, i64 0, i32 7
  %107 = load ptr, ptr %106, align 8, !tbaa !16, !noalias !66
  %108 = icmp eq ptr %107, null
  br i1 %108, label %169, label %109

109:                                              ; preds = %105
  %110 = load ptr, ptr %107, align 8, !tbaa !59, !noalias !66
  %111 = icmp eq ptr %110, null
  br i1 %111, label %169, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds %struct.gimple_seq_d, ptr %110, i64 0, i32 1
  %114 = load ptr, ptr %113, align 8, !tbaa !61, !noalias !66
  %115 = icmp eq ptr %114, null
  br i1 %115, label %169, label %116

116:                                              ; preds = %112, %127
  %117 = phi ptr [ %129, %127 ], [ %114, %112 ]
  %118 = load ptr, ptr %117, align 8, !tbaa !47
  %119 = load i32, ptr %118, align 8
  %120 = and i32 %119, 255
  %121 = icmp eq i32 %120, 2
  br i1 %121, label %127, label %122

122:                                              ; preds = %116
  %123 = load ptr, ptr %114, align 8, !tbaa !47
  %124 = load i32, ptr %123, align 8
  %125 = and i32 %124, 255
  %126 = icmp eq i32 %125, 2
  br i1 %126, label %131, label %139

127:                                              ; preds = %116
  %128 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %117, i64 0, i32 1
  %129 = load ptr, ptr %128, align 8, !tbaa !67
  %130 = icmp eq ptr %129, null
  br i1 %130, label %169, label %116, !llvm.loop !68

131:                                              ; preds = %122, %131
  %132 = phi ptr [ %134, %131 ], [ %114, %122 ]
  %133 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %132, i64 0, i32 1
  %134 = load ptr, ptr %133, align 8, !tbaa !67, !nonnull !66, !noundef !66
  %135 = load ptr, ptr %134, align 8, !tbaa !47
  %136 = load i32, ptr %135, align 8
  %137 = and i32 %136, 255
  %138 = icmp eq i32 %137, 2
  br i1 %138, label %131, label %139

139:                                              ; preds = %131, %122
  %140 = phi ptr [ %123, %122 ], [ %135, %131 ]
  %141 = load i32, ptr %140, align 8
  %142 = trunc i32 %141 to i8
  switch i8 %142, label %162 [
    i8 1, label %167
    i8 5, label %167
    i8 3, label %167
    i8 9, label %167
    i8 14, label %167
    i8 8, label %143
    i8 15, label %167
    i8 7, label %158
    i8 26, label %167
    i8 27, label %167
    i8 23, label %167
    i8 30, label %167
    i8 31, label %167
    i8 32, label %167
    i8 29, label %167
    i8 24, label %167
    i8 25, label %167
    i8 22, label %167
    i8 28, label %167
    i8 19, label %167
    i8 20, label %167
    i8 21, label %167
  ]

143:                                              ; preds = %139
  %144 = call i32 @gimple_call_flags(ptr noundef nonnull %140) #26
  %145 = and i32 %144, 3
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %155

147:                                              ; preds = %143
  %148 = load ptr, ptr @cfun, align 8, !tbaa !5
  %149 = getelementptr inbounds %struct.function, ptr %148, i64 0, i32 20
  %150 = load i32, ptr %149, align 8
  %151 = and i32 %150, 1048576
  %152 = and i32 %144, 8
  %153 = or i32 %151, %152
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %162, label %167

155:                                              ; preds = %143
  %156 = and i32 %144, 8
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %162, label %167

158:                                              ; preds = %139
  %159 = getelementptr i8, ptr %140, i64 75
  %160 = load i8, ptr %159, align 1, !tbaa !16
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %162, label %167

162:                                              ; preds = %139, %147, %155, %158
  %163 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %140) #26
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %162
  %166 = load ptr, ptr %0, align 8, !tbaa !295
  br label %169

167:                                              ; preds = %155, %147, %158, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %139, %162
  %168 = call ptr @split_edge(ptr noundef nonnull %0) #26
  br label %169

169:                                              ; preds = %127, %112, %109, %105, %97, %165, %167
  %170 = phi ptr [ %168, %167 ], [ %166, %165 ], [ %100, %97 ], [ %100, %105 ], [ %100, %109 ], [ %100, %112 ], [ %100, %127 ]
  call void @set_immediate_dominator(i32 noundef 1, ptr noundef %99, ptr noundef %170) #26
  %171 = getelementptr inbounds %struct.basic_block_def, ptr %170, i64 0, i32 13
  %172 = load i32, ptr %171, align 8, !tbaa !58, !noalias !319
  %173 = and i32 %172, 512
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %185

175:                                              ; preds = %169
  %176 = getelementptr inbounds %struct.basic_block_def, ptr %170, i64 0, i32 7
  %177 = load ptr, ptr %176, align 8, !tbaa !16, !noalias !319
  %178 = icmp eq ptr %177, null
  br i1 %178, label %185, label %179

179:                                              ; preds = %175
  %180 = load ptr, ptr %177, align 8, !tbaa !59, !noalias !319
  %181 = icmp eq ptr %180, null
  br i1 %181, label %185, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.gimple_seq_d, ptr %180, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !61, !noalias !319
  br label %185

185:                                              ; preds = %169, %175, %179, %182
  %186 = phi ptr [ %180, %182 ], [ null, %179 ], [ null, %175 ], [ null, %169 ]
  %187 = phi ptr [ %184, %182 ], [ null, %179 ], [ null, %175 ], [ null, %169 ]
  store ptr %187, ptr %8, align 8, !tbaa.struct !194
  %188 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %186, ptr %188, align 8, !tbaa.struct !195
  %189 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %170, ptr %189, align 8, !tbaa.struct !196
  %190 = load ptr, ptr %1, align 8, !tbaa !295
  %191 = getelementptr inbounds %struct.basic_block_def, ptr %190, i64 0, i32 13
  %192 = load i32, ptr %191, align 8, !tbaa !58, !noalias !322
  %193 = and i32 %192, 512
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %216

195:                                              ; preds = %185
  %196 = getelementptr inbounds %struct.basic_block_def, ptr %190, i64 0, i32 7
  %197 = load ptr, ptr %196, align 8, !tbaa !16, !noalias !322
  %198 = icmp eq ptr %197, null
  br i1 %198, label %216, label %199

199:                                              ; preds = %195
  %200 = load ptr, ptr %197, align 8, !tbaa !59, !noalias !322
  %201 = icmp eq ptr %200, null
  br i1 %201, label %216, label %202

202:                                              ; preds = %199
  %203 = getelementptr inbounds %struct.gimple_seq_d, ptr %200, i64 0, i32 1
  %204 = load ptr, ptr %203, align 8, !tbaa !61, !noalias !322
  %205 = icmp eq ptr %204, null
  br i1 %205, label %216, label %206

206:                                              ; preds = %202, %212
  %207 = phi ptr [ %214, %212 ], [ %204, %202 ]
  %208 = load ptr, ptr %207, align 8, !tbaa !47
  %209 = load i32, ptr %208, align 8
  %210 = and i32 %209, 255
  %211 = icmp eq i32 %210, 2
  br i1 %211, label %212, label %216

212:                                              ; preds = %206
  %213 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %207, i64 0, i32 1
  %214 = load ptr, ptr %213, align 8, !tbaa !67
  %215 = icmp eq ptr %214, null
  br i1 %215, label %216, label %206, !llvm.loop !68

216:                                              ; preds = %206, %212, %185, %195, %199, %202
  %217 = phi ptr [ null, %202 ], [ null, %199 ], [ null, %195 ], [ null, %185 ], [ %208, %206 ], [ null, %212 ]
  %218 = load i32, ptr %217, align 8
  %219 = and i32 %218, 255
  %220 = icmp eq i32 %219, 1
  br i1 %220, label %222, label %221

221:                                              ; preds = %216
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5291, ptr noundef nonnull @.str.2) #26
  br label %222

222:                                              ; preds = %216, %221
  %223 = call ptr @gimple_copy(ptr noundef nonnull %217) #26
  %224 = load ptr, ptr %38, align 8, !tbaa !5
  %225 = getelementptr inbounds %struct.edge_def, ptr %224, i64 0, i32 1
  %226 = load ptr, ptr %225, align 8, !tbaa !109
  %227 = getelementptr inbounds %struct.loop, ptr %18, i64 0, i32 3
  %228 = load ptr, ptr %227, align 8, !tbaa !311
  %229 = icmp eq ptr %226, %228
  %230 = load i32, ptr %223, align 8
  %231 = and i32 %230, 255
  br i1 %229, label %232, label %248

232:                                              ; preds = %222
  %233 = add nsw i32 %231, -10
  %234 = icmp ult i32 %233, -9
  br i1 %234, label %394, label %235

235:                                              ; preds = %232
  %236 = zext i32 %231 to i64
  %237 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %236
  %238 = load i32, ptr %237, align 4, !tbaa !16
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %239
  %241 = load i64, ptr %240, align 8, !tbaa !50
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %235
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %244

244:                                              ; preds = %243, %235
  %245 = getelementptr inbounds i8, ptr %223, i64 %241
  %246 = getelementptr inbounds ptr, ptr %245, i64 1
  %247 = load ptr, ptr %246, align 8, !tbaa !5
  br label %394

248:                                              ; preds = %222
  %249 = add nsw i32 %231, -1
  %250 = icmp ult i32 %249, 9
  call void @llvm.assume(i1 %250)
  %251 = zext i32 %231 to i64
  %252 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %251
  %253 = load i32, ptr %252, align 4, !tbaa !16
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %254
  %256 = load i64, ptr %255, align 8, !tbaa !50
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %261

258:                                              ; preds = %248
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %259 = load i32, ptr %223, align 8
  %260 = and i32 %259, 255
  br label %261

261:                                              ; preds = %258, %248
  %262 = phi i32 [ %260, %258 ], [ %231, %248 ]
  %263 = getelementptr inbounds i8, ptr %223, i64 %256
  %264 = getelementptr inbounds ptr, ptr %263, i64 1
  %265 = load ptr, ptr %264, align 8, !tbaa !5
  %266 = getelementptr inbounds %struct.tree_common, ptr %265, i64 0, i32 2
  %267 = load ptr, ptr %266, align 8, !tbaa !16
  %268 = add nsw i32 %262, -10
  %269 = icmp ult i32 %268, -9
  br i1 %269, label %286, label %270

270:                                              ; preds = %261
  %271 = zext i32 %262 to i64
  %272 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %271
  %273 = load i32, ptr %272, align 4, !tbaa !16
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %274
  %276 = load i64, ptr %275, align 8, !tbaa !50
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %281

278:                                              ; preds = %270
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %279 = load i32, ptr %223, align 8
  %280 = and i32 %279, 255
  br label %281

281:                                              ; preds = %278, %270
  %282 = phi i32 [ %280, %278 ], [ %262, %270 ]
  %283 = getelementptr inbounds i8, ptr %223, i64 %276
  %284 = getelementptr inbounds ptr, ptr %283, i64 1
  %285 = load ptr, ptr %284, align 8, !tbaa !5
  br label %286

286:                                              ; preds = %261, %281
  %287 = phi i32 [ %262, %261 ], [ %282, %281 ]
  %288 = phi ptr [ null, %261 ], [ %285, %281 ]
  %289 = add nsw i32 %287, -1
  %290 = icmp ult i32 %289, 9
  call void @llvm.assume(i1 %290)
  %291 = zext i32 %287 to i64
  %292 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %291
  %293 = load i32, ptr %292, align 4, !tbaa !16
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %294
  %296 = load i64, ptr %295, align 8, !tbaa !50
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %286
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %299

299:                                              ; preds = %298, %286
  %300 = getelementptr inbounds i8, ptr %223, i64 %296
  %301 = getelementptr inbounds ptr, ptr %300, i64 1
  %302 = load ptr, ptr %301, align 8, !tbaa !5
  %303 = getelementptr inbounds %struct.tree_common, ptr %302, i64 0, i32 2
  %304 = load ptr, ptr %303, align 8, !tbaa !16
  %305 = call ptr @build_int_cst(ptr noundef %304, i64 noundef 1) #26
  %306 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 64, ptr noundef %267, ptr noundef %288, ptr noundef %305) #26
  %307 = load i32, ptr %223, align 8
  %308 = and i32 %307, 255
  %309 = add nsw i32 %308, -1
  %310 = icmp ult i32 %309, 9
  call void @llvm.assume(i1 %310)
  %311 = zext i32 %308 to i64
  %312 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %311
  %313 = load i32, ptr %312, align 4, !tbaa !16
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %314
  %316 = load i64, ptr %315, align 8, !tbaa !50
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %319

318:                                              ; preds = %299
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %319

319:                                              ; preds = %318, %299
  %320 = getelementptr inbounds i8, ptr %223, i64 %316
  %321 = getelementptr inbounds ptr, ptr %320, i64 1
  %322 = load ptr, ptr %321, align 8, !tbaa !5
  %323 = load i64, ptr %322, align 8
  %324 = and i64 %323, 65535
  %325 = icmp eq i64 %324, 141
  br i1 %325, label %326, label %394

326:                                              ; preds = %319
  %327 = load i32, ptr %223, align 8
  %328 = and i32 %327, 255
  %329 = add nsw i32 %328, -1
  %330 = icmp ult i32 %329, 9
  call void @llvm.assume(i1 %330)
  %331 = zext i32 %328 to i64
  %332 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %331
  %333 = load i32, ptr %332, align 4, !tbaa !16
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %334
  %336 = load i64, ptr %335, align 8, !tbaa !50
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %339

338:                                              ; preds = %326
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %339

339:                                              ; preds = %338, %326
  %340 = getelementptr inbounds i8, ptr %223, i64 %336
  %341 = getelementptr inbounds ptr, ptr %340, i64 1
  %342 = load ptr, ptr %341, align 8, !tbaa !5
  %343 = getelementptr inbounds %struct.tree_ssa_name, ptr %342, i64 0, i32 2
  %344 = load ptr, ptr %343, align 8, !tbaa !16
  %345 = getelementptr i8, ptr %344, i64 16
  %346 = load ptr, ptr %345, align 8, !tbaa !16
  %347 = getelementptr inbounds %struct.basic_block_def, ptr %346, i64 0, i32 13
  %348 = load i32, ptr %347, align 8, !tbaa !58, !noalias !325
  %349 = and i32 %348, 512
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %358

351:                                              ; preds = %339
  %352 = getelementptr inbounds %struct.basic_block_def, ptr %346, i64 0, i32 7
  %353 = load ptr, ptr %352, align 8, !tbaa !16, !noalias !325
  %354 = icmp eq ptr %353, null
  br i1 %354, label %358, label %355

355:                                              ; preds = %351
  %356 = load ptr, ptr %353, align 8, !tbaa !59, !noalias !325
  %357 = icmp eq ptr %356, null
  br i1 %357, label %358, label %360

358:                                              ; preds = %355, %351, %339
  %359 = getelementptr inbounds i8, ptr %9, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %9, i8 0, i64 16, i1 false)
  store ptr %346, ptr %359, align 8, !tbaa.struct !196
  br label %392

360:                                              ; preds = %355
  %361 = load ptr, ptr %356, align 8, !tbaa !42, !noalias !325
  store ptr %361, ptr %9, align 8, !tbaa.struct !194
  %362 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %356, ptr %362, align 8, !tbaa.struct !195
  %363 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %346, ptr %363, align 8, !tbaa.struct !196
  %364 = getelementptr ptr, ptr %223, i64 1
  %365 = icmp eq ptr %361, null
  br i1 %365, label %392, label %366

366:                                              ; preds = %360, %387
  %367 = phi ptr [ %390, %387 ], [ %361, %360 ]
  %368 = load ptr, ptr %367, align 8, !tbaa !47
  %369 = load i32, ptr %223, align 8
  %370 = and i32 %369, 255
  %371 = add nsw i32 %370, -1
  %372 = icmp ult i32 %371, 9
  call void @llvm.assume(i1 %372)
  %373 = zext i32 %370 to i64
  %374 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %373
  %375 = load i32, ptr %374, align 4, !tbaa !16
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %376
  %378 = load i64, ptr %377, align 8, !tbaa !50
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %381

380:                                              ; preds = %366
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %381

381:                                              ; preds = %380, %366
  %382 = getelementptr i8, ptr %364, i64 %378
  %383 = load ptr, ptr %382, align 8, !tbaa !5
  %384 = getelementptr inbounds %struct.tree_ssa_name, ptr %383, i64 0, i32 2
  %385 = load ptr, ptr %384, align 8, !tbaa !16
  %386 = icmp eq ptr %368, %385
  br i1 %386, label %392, label %387

387:                                              ; preds = %381
  %388 = load ptr, ptr %9, align 8, !tbaa !44
  %389 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %388, i64 0, i32 2
  %390 = load ptr, ptr %389, align 8, !tbaa !53
  store ptr %390, ptr %9, align 8, !tbaa !44
  %391 = icmp eq ptr %390, null
  br i1 %391, label %392, label %366, !llvm.loop !328

392:                                              ; preds = %387, %381, %358, %360
  %393 = call ptr @force_gimple_operand_gsi(ptr noundef nonnull %9, ptr noundef %306, i8 noundef zeroext 1, ptr noundef null, i8 noundef zeroext 0, i32 noundef 2) #26
  br label %394

394:                                              ; preds = %244, %232, %319, %392
  %395 = phi ptr [ %393, %392 ], [ %306, %319 ], [ %247, %244 ], [ null, %232 ]
  %396 = call ptr @unshare_expr(ptr noundef %395) #26
  %397 = load i32, ptr %223, align 8
  %398 = and i32 %397, 255
  %399 = add nsw i32 %398, -10
  %400 = icmp ult i32 %399, -9
  br i1 %400, label %405, label %401

401:                                              ; preds = %394
  %402 = getelementptr i8, ptr %223, i64 12
  %403 = load i32, ptr %402, align 4, !tbaa !16
  %404 = icmp ugt i32 %403, 1
  br i1 %404, label %408, label %405

405:                                              ; preds = %401, %394
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %406 = load i32, ptr %223, align 8
  %407 = and i32 %406, 255
  br label %408

408:                                              ; preds = %405, %401
  %409 = phi i32 [ %398, %401 ], [ %407, %405 ]
  %410 = zext i32 %409 to i64
  %411 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %410
  %412 = load i32, ptr %411, align 4, !tbaa !16
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %413
  %415 = load i64, ptr %414, align 8, !tbaa !50
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %418

417:                                              ; preds = %408
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %418

418:                                              ; preds = %408, %417
  %419 = getelementptr inbounds i8, ptr %223, i64 %415
  %420 = getelementptr inbounds ptr, ptr %419, i64 1
  store ptr %396, ptr %420, align 8, !tbaa !5
  %421 = load i32, ptr %223, align 8
  %422 = and i32 %421, 255
  %423 = add nsw i32 %422, -10
  %424 = icmp ult i32 %423, -9
  br i1 %424, label %437, label %425

425:                                              ; preds = %418
  %426 = zext i32 %422 to i64
  %427 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %426
  %428 = load i32, ptr %427, align 4, !tbaa !16
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %429
  %431 = load i64, ptr %430, align 8, !tbaa !50
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %434

433:                                              ; preds = %425
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %434

434:                                              ; preds = %433, %425
  %435 = getelementptr inbounds i8, ptr %223, i64 %431
  %436 = load ptr, ptr %435, align 8, !tbaa !5
  br label %437

437:                                              ; preds = %418, %434
  %438 = phi ptr [ %436, %434 ], [ null, %418 ]
  %439 = call ptr @unshare_expr(ptr noundef %438) #26
  %440 = load i32, ptr %223, align 8
  %441 = and i32 %440, 255
  %442 = add nsw i32 %441, -10
  %443 = icmp ult i32 %442, -9
  br i1 %443, label %448, label %444

444:                                              ; preds = %437
  %445 = getelementptr i8, ptr %223, i64 12
  %446 = load i32, ptr %445, align 4, !tbaa !16
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %451

448:                                              ; preds = %444, %437
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %449 = load i32, ptr %223, align 8
  %450 = and i32 %449, 255
  br label %451

451:                                              ; preds = %448, %444
  %452 = phi i32 [ %441, %444 ], [ %450, %448 ]
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %453
  %455 = load i32, ptr %454, align 4, !tbaa !16
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %456
  %458 = load i64, ptr %457, align 8, !tbaa !50
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %461

460:                                              ; preds = %451
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %461

461:                                              ; preds = %451, %460
  %462 = getelementptr inbounds i8, ptr %223, i64 %458
  store ptr %439, ptr %462, align 8, !tbaa !5
  call void @gsi_insert_after(ptr noundef nonnull %8, ptr noundef nonnull %223, i32 noundef 0) #26
  %463 = getelementptr i8, ptr %170, i64 8
  %464 = load ptr, ptr %463, align 8, !tbaa !105
  %465 = icmp eq ptr %464, null
  br i1 %465, label %469, label %466

466:                                              ; preds = %461
  %467 = load i32, ptr %464, align 8, !tbaa !106
  %468 = icmp eq i32 %467, 1
  br i1 %468, label %471, label %469

469:                                              ; preds = %466, %461
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %470 = load ptr, ptr %463, align 8, !tbaa !105
  br label %471

471:                                              ; preds = %466, %469
  %472 = phi ptr [ %464, %466 ], [ %470, %469 ]
  %473 = getelementptr inbounds %struct.VEC_edge_base, ptr %472, i64 0, i32 2, i64 0
  %474 = load ptr, ptr %473, align 8, !tbaa !5
  %475 = load ptr, ptr %38, align 8, !tbaa !5
  %476 = getelementptr inbounds %struct.edge_def, ptr %475, i64 0, i32 7
  %477 = load i32, ptr %476, align 8, !tbaa !108
  %478 = getelementptr inbounds %struct.edge_def, ptr %474, i64 0, i32 7
  store i32 %477, ptr %478, align 8, !tbaa !108
  %479 = load ptr, ptr %6, align 16, !tbaa !5
  %480 = getelementptr inbounds %struct.edge_def, ptr %479, i64 0, i32 7
  %481 = load i32, ptr %480, align 8, !tbaa !108
  %482 = call ptr @make_edge(ptr noundef nonnull %170, ptr noundef %99, i32 noundef %481) #26
  call void @rescan_loop_exit(ptr noundef %482, i8 noundef zeroext 1, i8 noundef zeroext 0) #26
  call void @add_phi_args_after_copy(ptr noundef %48, i32 noundef %3, ptr noundef %482)
  %483 = load ptr, ptr %11, align 8, !tbaa !109
  %484 = load ptr, ptr %6, align 16, !tbaa !5
  %485 = load ptr, ptr %38, align 8, !tbaa !5
  %486 = getelementptr inbounds %struct.edge_def, ptr %485, i64 0, i32 1
  %487 = load ptr, ptr %486, align 8, !tbaa !109
  %488 = call ptr @redirect_edge_and_branch(ptr noundef %484, ptr noundef %487) #26
  %489 = getelementptr inbounds %struct.edge_def, ptr %488, i64 0, i32 2
  store ptr null, ptr %489, align 8, !tbaa !16
  %490 = icmp eq i32 %3, 0
  br i1 %490, label %566, label %491

491:                                              ; preds = %471
  %492 = zext i32 %3 to i64
  br label %493

493:                                              ; preds = %491, %563
  %494 = phi i64 [ 0, %491 ], [ %564, %563 ]
  %495 = getelementptr inbounds ptr, ptr %48, i64 %494
  %496 = load ptr, ptr %495, align 8, !tbaa !5
  %497 = call ptr @get_bb_original(ptr noundef %496) #26
  %498 = load ptr, ptr %227, align 8, !tbaa !311
  %499 = icmp eq ptr %497, %498
  br i1 %499, label %500, label %563

500:                                              ; preds = %493
  %501 = load ptr, ptr %495, align 8, !tbaa !5
  %502 = getelementptr i8, ptr %501, i64 8
  %503 = load ptr, ptr %502, align 8, !tbaa !105
  %504 = icmp eq ptr %503, null
  br i1 %504, label %508, label %505

505:                                              ; preds = %500
  %506 = load i32, ptr %503, align 8, !tbaa !106
  %507 = icmp eq i32 %506, 1
  br i1 %507, label %510, label %508

508:                                              ; preds = %505, %500
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %509 = load ptr, ptr %502, align 8, !tbaa !105
  br label %510

510:                                              ; preds = %505, %508
  %511 = phi ptr [ %503, %505 ], [ %509, %508 ]
  %512 = getelementptr inbounds %struct.VEC_edge_base, ptr %511, i64 0, i32 2, i64 0
  %513 = load ptr, ptr %512, align 8, !tbaa !5
  %514 = icmp eq ptr %513, null
  br i1 %514, label %515, label %516

515:                                              ; preds = %510
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5347, ptr noundef nonnull @.str.2) #26
  br label %516

516:                                              ; preds = %510, %515
  %517 = load ptr, ptr %495, align 8, !tbaa !5
  %518 = getelementptr i8, ptr %517, i64 8
  %519 = load ptr, ptr %518, align 8, !tbaa !105
  %520 = icmp eq ptr %519, null
  br i1 %520, label %524, label %521

521:                                              ; preds = %516
  %522 = load i32, ptr %519, align 8, !tbaa !106
  %523 = icmp eq i32 %522, 1
  br i1 %523, label %526, label %524

524:                                              ; preds = %521, %516
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %525 = load ptr, ptr %518, align 8, !tbaa !105
  br label %526

526:                                              ; preds = %521, %524
  %527 = phi ptr [ %519, %521 ], [ %525, %524 ]
  %528 = getelementptr inbounds %struct.VEC_edge_base, ptr %527, i64 0, i32 2, i64 0
  %529 = load ptr, ptr %528, align 8, !tbaa !5
  %530 = call ptr @redirect_edge_and_branch(ptr noundef %529, ptr noundef %483) #26
  %531 = getelementptr inbounds %struct.edge_def, ptr %530, i64 0, i32 2
  store ptr null, ptr %531, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %10, ptr noundef %483) #26
  %532 = load ptr, ptr %10, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #26
  %533 = icmp eq ptr %532, null
  br i1 %533, label %563, label %534

534:                                              ; preds = %526
  %535 = getelementptr i8, ptr %530, i64 44
  br label %536

536:                                              ; preds = %534, %556
  %537 = phi ptr [ %532, %534 ], [ %561, %556 ]
  %538 = load ptr, ptr %537, align 8, !tbaa !47
  %539 = load ptr, ptr %7, align 16, !tbaa !5
  %540 = getelementptr inbounds %struct.edge_def, ptr %539, i64 0, i32 6
  %541 = load i32, ptr %540, align 4, !tbaa !298
  %542 = getelementptr inbounds %struct.gimple_statement_phi, ptr %538, i64 0, i32 1
  %543 = load i32, ptr %542, align 8, !tbaa !16
  %544 = icmp ult i32 %543, %541
  br i1 %544, label %545, label %547

545:                                              ; preds = %536
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  %546 = load i32, ptr %542, align 8, !tbaa !16
  br label %547

547:                                              ; preds = %536, %545
  %548 = phi i32 [ %543, %536 ], [ %546, %545 ]
  %549 = zext i32 %541 to i64
  %550 = getelementptr %struct.gimple_statement_phi, ptr %538, i64 0, i32 4, i64 %549, i32 0, i32 3
  %551 = load ptr, ptr %550, align 8, !tbaa !274
  %552 = load ptr, ptr %551, align 8, !tbaa !5
  %553 = load i32, ptr %535, align 4, !tbaa !298
  %554 = icmp ult i32 %548, %553
  br i1 %554, label %555, label %556

555:                                              ; preds = %547
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %556

556:                                              ; preds = %547, %555
  %557 = zext i32 %553 to i64
  %558 = getelementptr inbounds %struct.gimple_statement_phi, ptr %538, i64 0, i32 4, i64 %557, i32 2
  %559 = load i32, ptr %558, align 8, !tbaa !299
  call void @add_phi_arg(ptr noundef nonnull %538, ptr noundef %552, ptr noundef nonnull %530, i32 noundef %559) #26
  %560 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %537, i64 0, i32 2
  %561 = load ptr, ptr %560, align 8, !tbaa !53
  %562 = icmp eq ptr %561, null
  br i1 %562, label %563, label %536, !llvm.loop !329

563:                                              ; preds = %556, %526, %493
  %564 = add nuw nsw i64 %494, 1
  %565 = icmp eq i64 %564, %492
  br i1 %565, label %566, label %493, !llvm.loop !330

566:                                              ; preds = %563, %471
  %567 = load ptr, ptr %7, align 16, !tbaa !5
  %568 = getelementptr inbounds [2 x ptr], ptr %7, i64 0, i64 1
  %569 = load ptr, ptr %568, align 8, !tbaa !5
  %570 = getelementptr inbounds %struct.edge_def, ptr %569, i64 0, i32 1
  %571 = load ptr, ptr %570, align 8, !tbaa !109
  %572 = call ptr @redirect_edge_and_branch(ptr noundef %567, ptr noundef %571) #26
  %573 = getelementptr inbounds %struct.edge_def, ptr %572, i64 0, i32 2
  store ptr null, ptr %573, align 8, !tbaa !16
  call void @iterate_fix_dominators(i32 noundef 1, ptr noundef %54, i8 noundef zeroext 0) #26
  %574 = icmp eq ptr %54, null
  br i1 %574, label %576, label %575

575:                                              ; preds = %566
  call void @free(ptr noundef nonnull %54)
  br label %576

576:                                              ; preds = %566, %575
  call void @update_ssa(i32 noundef 2048) #26
  br i1 %42, label %577, label %578

577:                                              ; preds = %576
  call void @free(ptr noundef %48)
  br label %578

578:                                              ; preds = %577, %576
  call void @free_original_copy_tables() #26
  br label %579

579:                                              ; preds = %30, %578
  %580 = phi i8 [ 1, %578 ], [ 0, %30 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8) #26
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #26
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #26
  ret i8 %580
}

declare void @duplicate_subloops(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @split_edge(ptr noundef) local_unnamed_addr #3

declare ptr @gimple_copy(ptr noundef) local_unnamed_addr #3

declare ptr @fold_build2_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_int_cst(ptr noundef, i64 noundef) local_unnamed_addr #3

declare ptr @force_gimple_operand_gsi(ptr noundef, ptr noundef, i8 noundef zeroext, ptr noundef, i8 noundef zeroext, i32 noundef) local_unnamed_addr #3

declare ptr @unshare_expr(ptr noundef) local_unnamed_addr #3

declare void @gsi_insert_after(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @rescan_loop_exit(ptr noundef, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #3

declare void @add_phi_arg(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @gather_blocks_in_sese_region(ptr noundef %0, ptr noundef %1, ptr nocapture noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @first_dom_son(i32 noundef 1, ptr noundef %0) #26
  %5 = icmp eq ptr %4, null
  br i1 %5, label %29, label %6

6:                                                ; preds = %3, %26
  %7 = phi ptr [ %27, %26 ], [ %4, %3 ]
  %8 = load ptr, ptr %2, align 8, !tbaa !5
  %9 = icmp eq ptr %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %8, i64 0, i32 1
  %12 = load i32, ptr %11, align 4, !tbaa !32
  %13 = load i32, ptr %8, align 8, !tbaa !30
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %10, %6
  %16 = tail call ptr @vec_heap_p_reserve(ptr noundef %8, i32 noundef 1) #26
  store ptr %16, ptr %2, align 8, !tbaa !5
  %17 = load i32, ptr %16, align 8, !tbaa !30
  br label %18

18:                                               ; preds = %10, %15
  %19 = phi i32 [ %13, %10 ], [ %17, %15 ]
  %20 = phi ptr [ %8, %10 ], [ %16, %15 ]
  %21 = add i32 %19, 1
  store i32 %21, ptr %20, align 8, !tbaa !30
  %22 = zext i32 %19 to i64
  %23 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %20, i64 0, i32 2, i64 %22
  store ptr %7, ptr %23, align 8, !tbaa !5
  %24 = icmp eq ptr %7, %1
  br i1 %24, label %26, label %25

25:                                               ; preds = %18
  tail call void @gather_blocks_in_sese_region(ptr noundef nonnull %7, ptr noundef %1, ptr noundef nonnull %2)
  br label %26

26:                                               ; preds = %18, %25
  %27 = tail call ptr @next_dom_son(i32 noundef 1, ptr noundef nonnull %7) #26
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %6, !llvm.loop !331

29:                                               ; preds = %26, %3
  ret void
}

declare ptr @first_dom_son(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @next_dom_son(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @mark_virtual_ops_in_bb(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %2, ptr noundef %0) #26
  %3 = load ptr, ptr %2, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  %4 = icmp eq ptr %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1, %5
  %6 = phi ptr [ %9, %5 ], [ %3, %1 ]
  %7 = load ptr, ptr %6, align 8, !tbaa !47
  call void @mark_virtual_ops_for_renaming(ptr noundef %7) #26
  %8 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %6, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !53
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %5, !llvm.loop !332

11:                                               ; preds = %5, %1
  %12 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %13 = load i32, ptr %12, align 8, !tbaa !58, !noalias !333
  %14 = and i32 %13, 512
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %32

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !16, !noalias !333
  %19 = icmp eq ptr %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %16
  %21 = load ptr, ptr %18, align 8, !tbaa !59, !noalias !333
  %22 = icmp eq ptr %21, null
  br i1 %22, label %32, label %23

23:                                               ; preds = %20
  %24 = load ptr, ptr %21, align 8, !tbaa !42, !noalias !333
  %25 = icmp eq ptr %24, null
  br i1 %25, label %32, label %26

26:                                               ; preds = %23, %26
  %27 = phi ptr [ %30, %26 ], [ %24, %23 ]
  %28 = load ptr, ptr %27, align 8, !tbaa !47
  call void @mark_virtual_ops_for_renaming(ptr noundef %28) #26
  %29 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %27, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !53
  %31 = icmp eq ptr %30, null
  br i1 %31, label %32, label %26, !llvm.loop !336

32:                                               ; preds = %26, %11, %16, %20, %23
  ret void
}

declare void @mark_virtual_ops_for_renaming(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @move_sese_region_to_fn(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #9 {
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  %6 = alloca %struct.gimple_stmt_iterator, align 8
  %7 = alloca %struct.walk_stmt_info, align 8
  %8 = alloca ptr, align 8
  %9 = alloca %struct.move_stmt_d, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #26
  %10 = tail call ptr @get_immediate_dominator(i32 noundef 1, ptr noundef %1) #26
  %11 = load ptr, ptr @cfun, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !308
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %9) #26
  %14 = icmp eq ptr %1, %2
  br i1 %14, label %20, label %15

15:                                               ; preds = %4
  %16 = icmp eq ptr %2, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %15
  %18 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef nonnull %2, ptr noundef nonnull %1) #26
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17, %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5967, ptr noundef nonnull @.str.2) #26
  br label %21

21:                                               ; preds = %15, %17, %20
  %22 = tail call ptr @vec_heap_p_reserve(ptr noundef null, i32 noundef 1) #26
  store ptr %22, ptr %8, align 8, !tbaa !5
  %23 = load i32, ptr %22, align 8, !tbaa !30
  %24 = add i32 %23, 1
  store i32 %24, ptr %22, align 8, !tbaa !30
  %25 = zext i32 %23 to i64
  %26 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %22, i64 0, i32 2, i64 %25
  store ptr %1, ptr %26, align 8, !tbaa !5
  call void @gather_blocks_in_sese_region(ptr noundef nonnull %1, ptr noundef %2, ptr noundef nonnull %8)
  %27 = load ptr, ptr %8, align 8
  %28 = icmp eq ptr %27, null
  %29 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %27, i64 0, i32 2
  %30 = select i1 %28, ptr null, ptr %29
  br i1 %28, label %33, label %31

31:                                               ; preds = %21
  %32 = load i32, ptr %27, align 8, !tbaa !30
  br label %33

33:                                               ; preds = %21, %31
  %34 = phi i32 [ %32, %31 ], [ 0, %21 ]
  %35 = tail call ptr @get_dominated_by_region(i32 noundef 1, ptr noundef %30, i32 noundef %34) #26
  %36 = load ptr, ptr %1, align 8, !tbaa !216
  %37 = icmp eq ptr %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = load i32, ptr %36, align 8, !tbaa !106
  br label %40

40:                                               ; preds = %33, %38
  %41 = phi i32 [ %39, %38 ], [ 0, %33 ]
  %42 = zext i32 %41 to i64
  %43 = tail call ptr @xcalloc(i64 noundef %42, i64 noundef 8) #26
  %44 = tail call ptr @xcalloc(i64 noundef %42, i64 noundef 4) #26
  %45 = shl nuw nsw i64 %42, 2
  %46 = tail call ptr @xmalloc(i64 noundef %45) #26
  %47 = load ptr, ptr %1, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %71, label %49

49:                                               ; preds = %40, %58
  %50 = phi ptr [ %69, %58 ], [ %47, %40 ]
  %51 = phi i32 [ %67, %58 ], [ 0, %40 ]
  %52 = load i32, ptr %50, align 8, !tbaa !106
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %71, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.VEC_edge_base, ptr %50, i64 0, i32 2, i64 0
  %56 = load ptr, ptr %55, align 8, !tbaa !5
  %57 = icmp eq ptr %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.edge_def, ptr %56, i64 0, i32 8
  %60 = load i32, ptr %59, align 4, !tbaa !316
  %61 = zext i32 %51 to i64
  %62 = getelementptr inbounds i32, ptr %46, i64 %61
  store i32 %60, ptr %62, align 4, !tbaa !20
  %63 = getelementptr inbounds %struct.edge_def, ptr %56, i64 0, i32 7
  %64 = load i32, ptr %63, align 8, !tbaa !108
  %65 = getelementptr inbounds i32, ptr %44, i64 %61
  store i32 %64, ptr %65, align 4, !tbaa !20
  %66 = load ptr, ptr %56, align 8, !tbaa !295
  %67 = add i32 %51, 1
  %68 = getelementptr inbounds ptr, ptr %43, i64 %61
  store ptr %66, ptr %68, align 8, !tbaa !5
  tail call void @remove_edge(ptr noundef nonnull %56) #26
  %69 = load ptr, ptr %1, align 8, !tbaa !5
  %70 = icmp eq ptr %69, null
  br i1 %70, label %71, label %49, !llvm.loop !337

71:                                               ; preds = %54, %49, %58, %40
  %72 = icmp eq ptr %2, null
  br i1 %72, label %111, label %73

73:                                               ; preds = %71
  %74 = getelementptr inbounds %struct.basic_block_def, ptr %2, i64 0, i32 1
  %75 = load ptr, ptr %74, align 8, !tbaa !105
  %76 = icmp eq ptr %75, null
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = load i32, ptr %75, align 8, !tbaa !106
  br label %79

79:                                               ; preds = %73, %77
  %80 = phi i32 [ %78, %77 ], [ 0, %73 ]
  %81 = zext i32 %80 to i64
  %82 = tail call ptr @xcalloc(i64 noundef %81, i64 noundef 8) #26
  %83 = tail call ptr @xcalloc(i64 noundef %81, i64 noundef 4) #26
  %84 = shl nuw nsw i64 %81, 2
  %85 = tail call ptr @xmalloc(i64 noundef %84) #26
  %86 = load ptr, ptr %74, align 8, !tbaa !5
  %87 = icmp eq ptr %86, null
  br i1 %87, label %111, label %88

88:                                               ; preds = %79, %97
  %89 = phi ptr [ %109, %97 ], [ %86, %79 ]
  %90 = phi i32 [ %107, %97 ], [ 0, %79 ]
  %91 = load i32, ptr %89, align 8, !tbaa !106
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %111, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.VEC_edge_base, ptr %89, i64 0, i32 2, i64 0
  %95 = load ptr, ptr %94, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %111, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.edge_def, ptr %95, i64 0, i32 8
  %99 = load i32, ptr %98, align 4, !tbaa !316
  %100 = zext i32 %90 to i64
  %101 = getelementptr inbounds i32, ptr %85, i64 %100
  store i32 %99, ptr %101, align 4, !tbaa !20
  %102 = getelementptr inbounds %struct.edge_def, ptr %95, i64 0, i32 7
  %103 = load i32, ptr %102, align 8, !tbaa !108
  %104 = getelementptr inbounds i32, ptr %83, i64 %100
  store i32 %103, ptr %104, align 4, !tbaa !20
  %105 = getelementptr inbounds %struct.edge_def, ptr %95, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !109
  %107 = add i32 %90, 1
  %108 = getelementptr inbounds ptr, ptr %82, i64 %100
  store ptr %106, ptr %108, align 8, !tbaa !5
  tail call void @remove_edge(ptr noundef nonnull %95) #26
  %109 = load ptr, ptr %74, align 8, !tbaa !5
  %110 = icmp eq ptr %109, null
  br i1 %110, label %111, label %88, !llvm.loop !338

111:                                              ; preds = %93, %88, %97, %79, %71
  %112 = phi i32 [ 0, %71 ], [ %80, %79 ], [ %80, %97 ], [ %80, %88 ], [ %80, %93 ]
  %113 = phi ptr [ null, %71 ], [ %85, %79 ], [ %85, %97 ], [ %85, %88 ], [ %85, %93 ]
  %114 = phi ptr [ null, %71 ], [ %83, %79 ], [ %83, %97 ], [ %83, %88 ], [ %83, %93 ]
  %115 = phi ptr [ null, %71 ], [ %82, %79 ], [ %82, %97 ], [ %82, %88 ], [ %82, %93 ]
  %116 = getelementptr inbounds %struct.function, ptr %0, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !23
  %118 = icmp eq ptr %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %111
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6023, ptr noundef nonnull @.str.2) #26
  br label %120

120:                                              ; preds = %111, %119
  tail call void @push_cfun(ptr noundef nonnull %0) #26
  %121 = load ptr, ptr @cfun, align 8, !tbaa !5
  tail call void @init_empty_tree_cfg_for_function(ptr noundef %121)
  %122 = load ptr, ptr %11, align 8, !tbaa !168
  %123 = icmp eq ptr %122, null
  br i1 %123, label %185, label %124

124:                                              ; preds = %120
  br i1 %28, label %176, label %125

125:                                              ; preds = %124
  %126 = load i32, ptr %27, align 8, !tbaa !30
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %176, label %128

128:                                              ; preds = %125, %170
  %129 = phi i32 [ %171, %170 ], [ %126, %125 ]
  %130 = phi i64 [ %173, %170 ], [ 0, %125 ]
  %131 = phi ptr [ %172, %170 ], [ null, %125 ]
  %132 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %27, i64 0, i32 2, i64 %130
  %133 = load ptr, ptr %132, align 8, !tbaa !5
  %134 = getelementptr inbounds %struct.basic_block_def, ptr %133, i64 0, i32 13
  %135 = load i32, ptr %134, align 8, !tbaa !58, !noalias !339
  %136 = and i32 %135, 512
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %170

138:                                              ; preds = %128
  %139 = getelementptr inbounds %struct.basic_block_def, ptr %133, i64 0, i32 7
  %140 = load ptr, ptr %139, align 8, !tbaa !16, !noalias !339
  %141 = icmp eq ptr %140, null
  br i1 %141, label %170, label %142

142:                                              ; preds = %138
  %143 = load ptr, ptr %140, align 8, !tbaa !59, !noalias !339
  %144 = icmp eq ptr %143, null
  br i1 %144, label %170, label %145

145:                                              ; preds = %142
  %146 = load ptr, ptr %143, align 8, !tbaa !42, !noalias !339
  %147 = icmp eq ptr %146, null
  br i1 %147, label %170, label %148

148:                                              ; preds = %145, %163
  %149 = phi ptr [ %164, %163 ], [ %131, %145 ]
  %150 = phi ptr [ %166, %163 ], [ %146, %145 ]
  %151 = load ptr, ptr %150, align 8, !tbaa !47
  %152 = tail call i32 @lookup_stmt_eh_lp_fn(ptr noundef nonnull %11, ptr noundef %151) #26
  %153 = tail call ptr @get_eh_region_from_lp_number_fn(ptr noundef nonnull %11, i32 noundef %152) #26
  %154 = icmp eq ptr %153, null
  br i1 %154, label %163, label %155

155:                                              ; preds = %148
  %156 = icmp eq ptr %149, null
  br i1 %156, label %163, label %157

157:                                              ; preds = %155
  %158 = icmp eq ptr %153, %149
  br i1 %158, label %163, label %159

159:                                              ; preds = %157
  %160 = tail call ptr @eh_region_outermost(ptr noundef nonnull %11, ptr noundef nonnull %153, ptr noundef nonnull %149) #26
  %161 = icmp eq ptr %160, null
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5863, ptr noundef nonnull @.str.2) #26
  br label %163

163:                                              ; preds = %162, %159, %157, %155, %148
  %164 = phi ptr [ %160, %159 ], [ null, %162 ], [ %149, %157 ], [ %149, %148 ], [ %153, %155 ]
  %165 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %150, i64 0, i32 2
  %166 = load ptr, ptr %165, align 8, !tbaa !53
  %167 = icmp eq ptr %166, null
  br i1 %167, label %168, label %148, !llvm.loop !342

168:                                              ; preds = %163
  %169 = load i32, ptr %27, align 8, !tbaa !30
  br label %170

170:                                              ; preds = %168, %128, %138, %142, %145
  %171 = phi i32 [ %129, %145 ], [ %129, %142 ], [ %129, %138 ], [ %129, %128 ], [ %169, %168 ]
  %172 = phi ptr [ %131, %145 ], [ %131, %142 ], [ %131, %138 ], [ %131, %128 ], [ %164, %168 ]
  %173 = add nuw nsw i64 %130, 1
  %174 = zext i32 %171 to i64
  %175 = icmp ult i64 %173, %174
  br i1 %175, label %128, label %177

176:                                              ; preds = %124, %125
  tail call void @init_eh_for_function() #26
  br label %185

177:                                              ; preds = %170
  tail call void @init_eh_for_function() #26
  %178 = icmp eq ptr %172, null
  br i1 %178, label %182, label %179

179:                                              ; preds = %177
  %180 = tail call ptr @htab_create(i64 noundef 17, ptr noundef nonnull @tree_map_hash, ptr noundef nonnull @tree_map_base_eq, ptr noundef nonnull @free) #26
  %181 = tail call ptr @duplicate_eh_regions(ptr noundef nonnull %11, ptr noundef nonnull %172, i32 noundef 0, ptr noundef nonnull @new_label_mapper, ptr noundef %180) #26
  br label %182

182:                                              ; preds = %177, %179
  %183 = phi ptr [ null, %177 ], [ %180, %179 ]
  %184 = phi ptr [ null, %177 ], [ %181, %179 ]
  tail call void @pop_cfun() #26
  br label %186

185:                                              ; preds = %176, %120
  tail call void @pop_cfun() #26
  br i1 %28, label %191, label %186

186:                                              ; preds = %182, %185
  %187 = phi ptr [ %184, %182 ], [ null, %185 ]
  %188 = phi ptr [ %183, %182 ], [ null, %185 ]
  %189 = load i32, ptr %27, align 8, !tbaa !30
  %190 = icmp ugt i32 %189, 1
  br i1 %190, label %194, label %191

191:                                              ; preds = %185, %186
  %192 = phi ptr [ null, %185 ], [ %187, %186 ]
  %193 = phi ptr [ null, %185 ], [ %188, %186 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6050, ptr noundef nonnull @.str.2) #26
  br label %194

194:                                              ; preds = %186, %191
  %195 = phi ptr [ %187, %186 ], [ %192, %191 ]
  %196 = phi ptr [ %188, %186 ], [ %193, %191 ]
  %197 = load ptr, ptr %116, align 8, !tbaa !23
  %198 = load ptr, ptr %197, align 8, !tbaa !34
  %199 = tail call ptr @pointer_map_create() #26
  %200 = getelementptr inbounds i8, ptr %9, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(64) %200, i8 0, i64 48, i1 false)
  store ptr %3, ptr %9, align 8, !tbaa !343
  %201 = getelementptr inbounds %struct.function, ptr %0, i64 0, i32 6
  %202 = load ptr, ptr %201, align 8, !tbaa !254
  %203 = getelementptr inbounds %struct.tree_decl_common, ptr %202, i64 0, i32 5
  %204 = load ptr, ptr %203, align 8, !tbaa !16
  %205 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 1
  store ptr %204, ptr %205, align 8, !tbaa !345
  %206 = load ptr, ptr @cfun, align 8, !tbaa !5
  %207 = getelementptr inbounds %struct.function, ptr %206, i64 0, i32 6
  %208 = load ptr, ptr %207, align 8, !tbaa !254
  %209 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 2
  store ptr %208, ptr %209, align 8, !tbaa !346
  %210 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 3
  store ptr %202, ptr %210, align 8, !tbaa !347
  %211 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 4
  store ptr %199, ptr %211, align 8, !tbaa !348
  %212 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 5
  store ptr %196, ptr %212, align 8, !tbaa !349
  %213 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 6
  store ptr %195, ptr %213, align 8, !tbaa !350
  %214 = getelementptr inbounds %struct.move_stmt_d, ptr %9, i64 0, i32 7
  store i8 1, ptr %214, align 8, !tbaa !351
  br i1 %28, label %722, label %215

215:                                              ; preds = %194
  %216 = getelementptr inbounds i8, ptr %5, i64 8
  %217 = getelementptr inbounds i8, ptr %5, i64 16
  %218 = getelementptr inbounds %struct.walk_stmt_info, ptr %7, i64 0, i32 1
  %219 = load i32, ptr %27, align 8, !tbaa !30
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %720, label %221

221:                                              ; preds = %215, %715
  %222 = phi ptr [ %225, %715 ], [ %198, %215 ]
  %223 = phi i64 [ %716, %715 ], [ 0, %215 ]
  %224 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %27, i64 0, i32 2, i64 %223
  %225 = load ptr, ptr %224, align 8, !tbaa !5
  %226 = icmp eq ptr %225, %2
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  call void @delete_from_dominance_info(i32 noundef 1, ptr noundef %225) #26
  %227 = load ptr, ptr @cfun, align 8, !tbaa !5
  %228 = getelementptr inbounds %struct.function, ptr %227, i64 0, i32 4
  %229 = load ptr, ptr %228, align 8, !tbaa !220
  %230 = icmp eq ptr %229, null
  br i1 %230, label %232, label %231

231:                                              ; preds = %221
  call void @remove_bb_from_loops(ptr noundef %225) #26
  br label %232

232:                                              ; preds = %231, %221
  %233 = call zeroext i8 @move_block_after(ptr noundef %225, ptr noundef %222) #26
  br i1 %226, label %262, label %234

234:                                              ; preds = %232
  %235 = getelementptr inbounds %struct.basic_block_def, ptr %225, i64 0, i32 1
  br label %236

236:                                              ; preds = %260, %234
  %237 = phi i32 [ 0, %234 ], [ %261, %260 ]
  %238 = load ptr, ptr %235, align 8, !tbaa !5
  %239 = icmp eq ptr %238, null
  br i1 %239, label %242, label %240

240:                                              ; preds = %236
  %241 = load i32, ptr %238, align 8, !tbaa !106
  br label %242

242:                                              ; preds = %240, %236
  %243 = phi i32 [ %241, %240 ], [ 0, %236 ]
  %244 = icmp eq i32 %243, %237
  br i1 %244, label %262, label %245

245:                                              ; preds = %242
  %246 = load ptr, ptr @cfun, align 8, !tbaa !5
  %247 = getelementptr inbounds %struct.function, ptr %246, i64 0, i32 1
  %248 = load ptr, ptr %247, align 8, !tbaa !23
  %249 = getelementptr inbounds %struct.control_flow_graph, ptr %248, i64 0, i32 4
  %250 = load i32, ptr %249, align 4, !tbaa !251
  %251 = add nsw i32 %250, -1
  store i32 %251, ptr %249, align 4, !tbaa !251
  %252 = load ptr, ptr %116, align 8, !tbaa !23
  %253 = getelementptr inbounds %struct.control_flow_graph, ptr %252, i64 0, i32 4
  %254 = load i32, ptr %253, align 4, !tbaa !251
  %255 = add nsw i32 %254, 1
  store i32 %255, ptr %253, align 4, !tbaa !251
  br i1 %239, label %259, label %256

256:                                              ; preds = %245
  %257 = load i32, ptr %238, align 8, !tbaa !106
  %258 = icmp ult i32 %237, %257
  br i1 %258, label %260, label %259

259:                                              ; preds = %256, %245
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %260

260:                                              ; preds = %259, %256
  %261 = add i32 %237, 1
  br label %236, !llvm.loop !352

262:                                              ; preds = %242, %232
  %263 = load ptr, ptr @cfun, align 8, !tbaa !5
  %264 = getelementptr inbounds %struct.function, ptr %263, i64 0, i32 1
  %265 = load ptr, ptr %264, align 8, !tbaa !23
  %266 = getelementptr inbounds %struct.control_flow_graph, ptr %265, i64 0, i32 2
  %267 = load ptr, ptr %266, align 8, !tbaa !29
  %268 = getelementptr inbounds %struct.basic_block_def, ptr %225, i64 0, i32 9
  %269 = load i32, ptr %268, align 8, !tbaa !120
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %267, i64 0, i32 2, i64 %270
  store ptr null, ptr %271, align 8, !tbaa !5
  %272 = load ptr, ptr @cfun, align 8, !tbaa !5
  %273 = getelementptr inbounds %struct.function, ptr %272, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !23
  %275 = getelementptr inbounds %struct.control_flow_graph, ptr %274, i64 0, i32 3
  %276 = load i32, ptr %275, align 8, !tbaa !27
  %277 = add nsw i32 %276, -1
  store i32 %277, ptr %275, align 8, !tbaa !27
  %278 = load ptr, ptr %116, align 8, !tbaa !23
  %279 = getelementptr inbounds %struct.control_flow_graph, ptr %278, i64 0, i32 3
  %280 = load i32, ptr %279, align 8, !tbaa !27
  %281 = add nsw i32 %280, 1
  store i32 %281, ptr %279, align 8, !tbaa !27
  %282 = getelementptr inbounds %struct.control_flow_graph, ptr %278, i64 0, i32 5
  %283 = load i32, ptr %282, align 8, !tbaa !28
  %284 = icmp slt i32 %269, %283
  br i1 %284, label %287, label %285

285:                                              ; preds = %262
  %286 = add nsw i32 %269, 1
  store i32 %286, ptr %282, align 8, !tbaa !28
  br label %287

287:                                              ; preds = %285, %262
  %288 = phi i32 [ %286, %285 ], [ %283, %262 ]
  %289 = getelementptr inbounds %struct.control_flow_graph, ptr %278, i64 0, i32 2
  %290 = load ptr, ptr %289, align 8, !tbaa !5
  %291 = icmp eq ptr %290, null
  br i1 %291, label %304, label %292

292:                                              ; preds = %287
  %293 = load i32, ptr %290, align 8, !tbaa !30
  %294 = icmp ult i32 %288, %293
  br i1 %294, label %328, label %295

295:                                              ; preds = %292
  %296 = add nsw i32 %288, 3
  %297 = sdiv i32 %296, 4
  %298 = add nsw i32 %297, %288
  %299 = sub nsw i32 %298, %293
  %300 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %290, i64 0, i32 1
  %301 = load i32, ptr %300, align 4, !tbaa !32
  %302 = sub i32 %301, %293
  %303 = icmp ult i32 %302, %299
  br i1 %303, label %309, label %315

304:                                              ; preds = %287
  %305 = add nsw i32 %288, 3
  %306 = sdiv i32 %305, 4
  %307 = add nsw i32 %306, %288
  %308 = icmp ne i32 %307, 0
  call void @llvm.assume(i1 %308)
  br label %309

309:                                              ; preds = %304, %295
  %310 = phi i32 [ %307, %304 ], [ %298, %295 ]
  %311 = phi i32 [ 0, %304 ], [ %293, %295 ]
  %312 = phi i32 [ %307, %304 ], [ %299, %295 ]
  %313 = call ptr @vec_gc_p_reserve_exact(ptr noundef %290, i32 noundef %312) #26
  store ptr %313, ptr %289, align 8, !tbaa !5
  %314 = sub nsw i32 %310, %311
  br label %315

315:                                              ; preds = %309, %295
  %316 = phi i32 [ %298, %295 ], [ %310, %309 ]
  %317 = phi i32 [ %299, %295 ], [ %314, %309 ]
  %318 = phi i32 [ %293, %295 ], [ %311, %309 ]
  %319 = phi ptr [ %290, %295 ], [ %313, %309 ]
  store i32 %316, ptr %319, align 8, !tbaa !30
  %320 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %319, i64 0, i32 2
  %321 = sext i32 %318 to i64
  %322 = getelementptr inbounds ptr, ptr %320, i64 %321
  %323 = sext i32 %317 to i64
  %324 = shl nsw i64 %323, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 8 %322, i8 0, i64 %324, i1 false)
  %325 = load ptr, ptr %289, align 8, !tbaa !29
  %326 = load i32, ptr %268, align 8, !tbaa !120
  %327 = zext i32 %326 to i64
  br label %328

328:                                              ; preds = %315, %292
  %329 = phi i64 [ %327, %315 ], [ %270, %292 ]
  %330 = phi ptr [ %325, %315 ], [ %290, %292 ]
  %331 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %330, i64 0, i32 2, i64 %329
  store ptr %225, ptr %331, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %6, ptr noundef nonnull %225) #26
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %5, ptr noundef nonnull align 8 dereferenceable(24) %6, i64 24, i1 false), !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #26
  %332 = load ptr, ptr %5, align 8, !tbaa !44
  %333 = icmp eq ptr %332, null
  br i1 %333, label %562, label %334

334:                                              ; preds = %328, %559
  %335 = phi ptr [ %560, %559 ], [ %332, %328 ]
  %336 = load ptr, ptr %335, align 8, !tbaa !47
  %337 = getelementptr %struct.gimple_statement_phi, ptr %336, i64 0, i32 3
  %338 = load ptr, ptr %337, align 8, !tbaa !5
  %339 = call zeroext i8 @is_gimple_reg(ptr noundef %338) #26
  %340 = icmp eq i8 %339, 0
  br i1 %340, label %341, label %343

341:                                              ; preds = %334
  call void @remove_phi_node(ptr noundef nonnull %5, i8 noundef zeroext 1) #26
  %342 = load ptr, ptr %5, align 8, !tbaa !44
  br label %559, !llvm.loop !353

343:                                              ; preds = %334
  %344 = load ptr, ptr %211, align 8, !tbaa !348
  %345 = load ptr, ptr %201, align 8, !tbaa !254
  %346 = getelementptr inbounds %struct.tree_ssa_name, ptr %338, i64 0, i32 1
  %347 = load ptr, ptr %346, align 8, !tbaa !16
  %348 = call zeroext i8 @is_gimple_reg(ptr noundef %338) #26
  %349 = icmp eq i8 %348, 0
  br i1 %349, label %350, label %351

350:                                              ; preds = %343
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5447, ptr noundef nonnull @.str.2) #26
  br label %351

351:                                              ; preds = %350, %343
  %352 = call ptr @pointer_map_contains(ptr noundef %344, ptr noundef nonnull %338) #26
  %353 = icmp eq ptr %352, null
  br i1 %353, label %354, label %420

354:                                              ; preds = %351
  %355 = getelementptr inbounds %struct.tree_function_decl, ptr %345, i64 0, i32 1
  %356 = load ptr, ptr %355, align 8, !tbaa !16
  %357 = getelementptr inbounds %struct.tree_decl_minimal, ptr %347, i64 0, i32 4
  %358 = load ptr, ptr %357, align 8, !tbaa !16
  %359 = icmp eq ptr %358, %345
  br i1 %359, label %392, label %360

360:                                              ; preds = %354
  %361 = call ptr @pointer_map_contains(ptr noundef %344, ptr noundef nonnull %347) #26
  %362 = icmp eq ptr %361, null
  br i1 %362, label %363, label %390

363:                                              ; preds = %360
  %364 = call ptr @pointer_map_insert(ptr noundef %344, ptr noundef nonnull %347) #26
  %365 = load i64, ptr %347, align 8
  %366 = trunc i64 %365 to i16
  switch i16 %366, label %381 [
    i16 32, label %372
    i16 34, label %372
    i16 36, label %372
    i16 141, label %367
  ]

367:                                              ; preds = %363
  %368 = getelementptr inbounds %struct.tree_ssa_name, ptr %347, i64 0, i32 1
  %369 = load ptr, ptr %368, align 8, !tbaa !16
  %370 = load i64, ptr %369, align 8
  %371 = trunc i64 %370 to i16
  switch i16 %371, label %381 [
    i16 32, label %372
    i16 34, label %372
    i16 36, label %372
  ]

372:                                              ; preds = %367, %367, %367, %363, %363, %363
  %373 = getelementptr inbounds %struct.tree_decl_minimal, ptr %347, i64 0, i32 3
  %374 = load ptr, ptr %373, align 8, !tbaa !16
  %375 = getelementptr inbounds %struct.tree_common, ptr %347, i64 0, i32 2
  %376 = load ptr, ptr %375, align 8, !tbaa !16
  %377 = call ptr @copy_var_decl(ptr noundef nonnull %347, ptr noundef %374, ptr noundef %376) #26
  %378 = getelementptr inbounds %struct.function, ptr %356, i64 0, i32 9
  %379 = load ptr, ptr %378, align 8, !tbaa !255
  %380 = call ptr @tree_cons_stat(ptr noundef null, ptr noundef %377, ptr noundef %379) #26
  store ptr %380, ptr %378, align 8, !tbaa !255
  br label %387

381:                                              ; preds = %367, %363
  %382 = and i64 %365, 65535
  %383 = icmp eq i64 %382, 33
  br i1 %383, label %385, label %384

384:                                              ; preds = %381
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5423, ptr noundef nonnull @.str.2) #26
  br label %385

385:                                              ; preds = %384, %381
  %386 = call ptr @copy_node_stat(ptr noundef nonnull %347) #26
  br label %387

387:                                              ; preds = %385, %372
  %388 = phi ptr [ %377, %372 ], [ %386, %385 ]
  %389 = getelementptr inbounds %struct.tree_decl_minimal, ptr %388, i64 0, i32 4
  store ptr %345, ptr %389, align 8, !tbaa !16
  store ptr %388, ptr %364, align 8, !tbaa !5
  br label %392

390:                                              ; preds = %360
  %391 = load ptr, ptr %361, align 8, !tbaa !5
  br label %392

392:                                              ; preds = %387, %390, %354
  %393 = phi ptr [ %347, %354 ], [ %391, %390 ], [ %388, %387 ]
  %394 = load ptr, ptr %355, align 8, !tbaa !16
  call void @push_cfun(ptr noundef %394) #26
  %395 = load ptr, ptr @cfun, align 8, !tbaa !5
  %396 = icmp eq ptr %395, null
  br i1 %396, label %409, label %397

397:                                              ; preds = %392
  %398 = getelementptr inbounds %struct.function, ptr %395, i64 0, i32 3
  %399 = load ptr, ptr %398, align 8, !tbaa !354
  %400 = icmp eq ptr %399, null
  br i1 %400, label %409, label %401

401:                                              ; preds = %397
  %402 = getelementptr inbounds %struct.gimple_df, ptr %399, i64 0, i32 10
  %403 = load i8, ptr %402, align 8
  %404 = and i8 %403, 1
  %405 = icmp eq i8 %404, 0
  br i1 %405, label %409, label %406

406:                                              ; preds = %401
  %407 = call zeroext i8 @add_referenced_var(ptr noundef %393) #26
  %408 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %409

409:                                              ; preds = %406, %401, %397, %392
  %410 = phi ptr [ null, %392 ], [ %395, %397 ], [ %408, %406 ], [ %395, %401 ]
  %411 = getelementptr inbounds %struct.tree_ssa_name, ptr %338, i64 0, i32 2
  %412 = load ptr, ptr %411, align 8, !tbaa !16
  %413 = call ptr @make_ssa_name_fn(ptr noundef %410, ptr noundef %393, ptr noundef %412) #26
  %414 = load i64, ptr %338, align 8
  %415 = and i64 %414, 4294967296
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %418, label %417

417:                                              ; preds = %409
  call void @set_default_def(ptr noundef %393, ptr noundef %413) #26
  br label %418

418:                                              ; preds = %417, %409
  call void @pop_cfun() #26
  %419 = call ptr @pointer_map_insert(ptr noundef %344, ptr noundef nonnull %338) #26
  store ptr %413, ptr %419, align 8, !tbaa !5
  br label %422

420:                                              ; preds = %351
  %421 = load ptr, ptr %352, align 8, !tbaa !5
  br label %422

422:                                              ; preds = %418, %420
  %423 = phi ptr [ %421, %420 ], [ %413, %418 ]
  store ptr %423, ptr %337, align 8, !tbaa !5
  %424 = call zeroext i8 @is_gimple_reg(ptr noundef %423) #26
  %425 = icmp eq i8 %424, 0
  br i1 %425, label %555, label %426

426:                                              ; preds = %422
  %427 = getelementptr i8, ptr %336, i64 36
  %428 = load i32, ptr %427, align 4, !tbaa !16
  %429 = icmp sgt i32 %428, 0
  br i1 %429, label %430, label %555

430:                                              ; preds = %426
  %431 = getelementptr inbounds %struct.gimple_statement_phi, ptr %336, i64 0, i32 4, i64 0
  %432 = getelementptr inbounds %struct.gimple_statement_phi, ptr %336, i64 0, i32 1
  %433 = zext i32 %428 to i64
  br label %434

434:                                              ; preds = %553, %430
  %435 = phi i64 [ %548, %553 ], [ 1, %430 ]
  %436 = phi ptr [ %554, %553 ], [ %431, %430 ]
  %437 = getelementptr i8, ptr %436, i64 24
  %438 = load ptr, ptr %437, align 8, !tbaa !274
  %439 = load ptr, ptr %438, align 8, !tbaa !5
  %440 = load i64, ptr %439, align 8
  %441 = and i64 %440, 65535
  %442 = icmp eq i64 %441, 141
  br i1 %442, label %443, label %545

443:                                              ; preds = %434
  %444 = load ptr, ptr %211, align 8, !tbaa !348
  %445 = load ptr, ptr %201, align 8, !tbaa !254
  %446 = getelementptr inbounds %struct.tree_ssa_name, ptr %439, i64 0, i32 1
  %447 = load ptr, ptr %446, align 8, !tbaa !16
  %448 = call zeroext i8 @is_gimple_reg(ptr noundef nonnull %439) #26
  %449 = icmp eq i8 %448, 0
  br i1 %449, label %450, label %451

450:                                              ; preds = %443
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5447, ptr noundef nonnull @.str.2) #26
  br label %451

451:                                              ; preds = %450, %443
  %452 = call ptr @pointer_map_contains(ptr noundef %444, ptr noundef nonnull %439) #26
  %453 = icmp eq ptr %452, null
  br i1 %453, label %454, label %520

454:                                              ; preds = %451
  %455 = getelementptr inbounds %struct.tree_function_decl, ptr %445, i64 0, i32 1
  %456 = load ptr, ptr %455, align 8, !tbaa !16
  %457 = getelementptr inbounds %struct.tree_decl_minimal, ptr %447, i64 0, i32 4
  %458 = load ptr, ptr %457, align 8, !tbaa !16
  %459 = icmp eq ptr %458, %445
  br i1 %459, label %492, label %460

460:                                              ; preds = %454
  %461 = call ptr @pointer_map_contains(ptr noundef %444, ptr noundef nonnull %447) #26
  %462 = icmp eq ptr %461, null
  br i1 %462, label %463, label %490

463:                                              ; preds = %460
  %464 = call ptr @pointer_map_insert(ptr noundef %444, ptr noundef nonnull %447) #26
  %465 = load i64, ptr %447, align 8
  %466 = trunc i64 %465 to i16
  switch i16 %466, label %481 [
    i16 32, label %472
    i16 34, label %472
    i16 36, label %472
    i16 141, label %467
  ]

467:                                              ; preds = %463
  %468 = getelementptr inbounds %struct.tree_ssa_name, ptr %447, i64 0, i32 1
  %469 = load ptr, ptr %468, align 8, !tbaa !16
  %470 = load i64, ptr %469, align 8
  %471 = trunc i64 %470 to i16
  switch i16 %471, label %481 [
    i16 32, label %472
    i16 34, label %472
    i16 36, label %472
  ]

472:                                              ; preds = %467, %467, %467, %463, %463, %463
  %473 = getelementptr inbounds %struct.tree_decl_minimal, ptr %447, i64 0, i32 3
  %474 = load ptr, ptr %473, align 8, !tbaa !16
  %475 = getelementptr inbounds %struct.tree_common, ptr %447, i64 0, i32 2
  %476 = load ptr, ptr %475, align 8, !tbaa !16
  %477 = call ptr @copy_var_decl(ptr noundef nonnull %447, ptr noundef %474, ptr noundef %476) #26
  %478 = getelementptr inbounds %struct.function, ptr %456, i64 0, i32 9
  %479 = load ptr, ptr %478, align 8, !tbaa !255
  %480 = call ptr @tree_cons_stat(ptr noundef null, ptr noundef %477, ptr noundef %479) #26
  store ptr %480, ptr %478, align 8, !tbaa !255
  br label %487

481:                                              ; preds = %467, %463
  %482 = and i64 %465, 65535
  %483 = icmp eq i64 %482, 33
  br i1 %483, label %485, label %484

484:                                              ; preds = %481
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5423, ptr noundef nonnull @.str.2) #26
  br label %485

485:                                              ; preds = %484, %481
  %486 = call ptr @copy_node_stat(ptr noundef nonnull %447) #26
  br label %487

487:                                              ; preds = %485, %472
  %488 = phi ptr [ %477, %472 ], [ %486, %485 ]
  %489 = getelementptr inbounds %struct.tree_decl_minimal, ptr %488, i64 0, i32 4
  store ptr %445, ptr %489, align 8, !tbaa !16
  store ptr %488, ptr %464, align 8, !tbaa !5
  br label %492

490:                                              ; preds = %460
  %491 = load ptr, ptr %461, align 8, !tbaa !5
  br label %492

492:                                              ; preds = %490, %487, %454
  %493 = phi ptr [ %447, %454 ], [ %491, %490 ], [ %488, %487 ]
  %494 = load ptr, ptr %455, align 8, !tbaa !16
  call void @push_cfun(ptr noundef %494) #26
  %495 = load ptr, ptr @cfun, align 8, !tbaa !5
  %496 = icmp eq ptr %495, null
  br i1 %496, label %509, label %497

497:                                              ; preds = %492
  %498 = getelementptr inbounds %struct.function, ptr %495, i64 0, i32 3
  %499 = load ptr, ptr %498, align 8, !tbaa !354
  %500 = icmp eq ptr %499, null
  br i1 %500, label %509, label %501

501:                                              ; preds = %497
  %502 = getelementptr inbounds %struct.gimple_df, ptr %499, i64 0, i32 10
  %503 = load i8, ptr %502, align 8
  %504 = and i8 %503, 1
  %505 = icmp eq i8 %504, 0
  br i1 %505, label %509, label %506

506:                                              ; preds = %501
  %507 = call zeroext i8 @add_referenced_var(ptr noundef %493) #26
  %508 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %509

509:                                              ; preds = %506, %501, %497, %492
  %510 = phi ptr [ null, %492 ], [ %495, %497 ], [ %508, %506 ], [ %495, %501 ]
  %511 = getelementptr inbounds %struct.tree_ssa_name, ptr %439, i64 0, i32 2
  %512 = load ptr, ptr %511, align 8, !tbaa !16
  %513 = call ptr @make_ssa_name_fn(ptr noundef %510, ptr noundef %493, ptr noundef %512) #26
  %514 = load i64, ptr %439, align 8
  %515 = and i64 %514, 4294967296
  %516 = icmp eq i64 %515, 0
  br i1 %516, label %518, label %517

517:                                              ; preds = %509
  call void @set_default_def(ptr noundef %493, ptr noundef %513) #26
  br label %518

518:                                              ; preds = %517, %509
  call void @pop_cfun() #26
  %519 = call ptr @pointer_map_insert(ptr noundef %444, ptr noundef nonnull %439) #26
  store ptr %513, ptr %519, align 8, !tbaa !5
  br label %522

520:                                              ; preds = %451
  %521 = load ptr, ptr %452, align 8, !tbaa !5
  br label %522

522:                                              ; preds = %520, %518
  %523 = phi ptr [ %521, %520 ], [ %513, %518 ]
  %524 = load ptr, ptr %436, align 8, !tbaa !218
  %525 = icmp eq ptr %524, null
  br i1 %525, label %531, label %526

526:                                              ; preds = %522
  %527 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %436, i64 0, i32 1
  %528 = load ptr, ptr %527, align 8, !tbaa !208
  %529 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %524, i64 0, i32 1
  store ptr %528, ptr %529, align 8, !tbaa !208
  %530 = load ptr, ptr %527, align 8, !tbaa !208
  store ptr %524, ptr %530, align 8, !tbaa !218
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %436, i8 0, i64 16, i1 false)
  br label %531

531:                                              ; preds = %526, %522
  %532 = load ptr, ptr %437, align 8, !tbaa !274
  store ptr %523, ptr %532, align 8, !tbaa !5
  %533 = icmp eq ptr %523, null
  br i1 %533, label %538, label %534

534:                                              ; preds = %531
  %535 = load i64, ptr %523, align 8
  %536 = and i64 %535, 65535
  %537 = icmp eq i64 %536, 141
  br i1 %537, label %539, label %538

538:                                              ; preds = %534, %531
  store ptr null, ptr %436, align 8, !tbaa !218
  br label %545

539:                                              ; preds = %534
  %540 = getelementptr inbounds %struct.tree_ssa_name, ptr %523, i64 0, i32 5
  store ptr %540, ptr %436, align 8, !tbaa !218
  %541 = getelementptr inbounds %struct.tree_ssa_name, ptr %523, i64 0, i32 5, i32 1
  %542 = load ptr, ptr %541, align 8, !tbaa !208
  %543 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %436, i64 0, i32 1
  store ptr %542, ptr %543, align 8, !tbaa !208
  %544 = load ptr, ptr %541, align 8, !tbaa !208
  store ptr %436, ptr %544, align 8, !tbaa !218
  store ptr %436, ptr %541, align 8, !tbaa !208
  br label %545

545:                                              ; preds = %539, %538, %434
  %546 = icmp eq i64 %435, %433
  br i1 %546, label %555, label %547

547:                                              ; preds = %545
  %548 = add nuw nsw i64 %435, 1
  %549 = load i32, ptr %432, align 8, !tbaa !16
  %550 = zext i32 %549 to i64
  %551 = icmp ugt i64 %435, %550
  br i1 %551, label %552, label %553

552:                                              ; preds = %547
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %553

553:                                              ; preds = %552, %547
  %554 = getelementptr inbounds %struct.gimple_statement_phi, ptr %336, i64 0, i32 4, i64 %435
  br label %434

555:                                              ; preds = %545, %426, %422
  %556 = load ptr, ptr %5, align 8, !tbaa !44
  %557 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %556, i64 0, i32 2
  %558 = load ptr, ptr %557, align 8, !tbaa !53
  store ptr %558, ptr %5, align 8, !tbaa !44
  br label %559

559:                                              ; preds = %555, %341
  %560 = phi ptr [ %558, %555 ], [ %342, %341 ]
  %561 = icmp eq ptr %560, null
  br i1 %561, label %562, label %334

562:                                              ; preds = %559, %328
  %563 = getelementptr inbounds %struct.basic_block_def, ptr %225, i64 0, i32 13
  %564 = load i32, ptr %563, align 8, !tbaa !58, !noalias !355
  %565 = and i32 %564, 512
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %567, label %574

567:                                              ; preds = %562
  %568 = getelementptr inbounds %struct.basic_block_def, ptr %225, i64 0, i32 7
  %569 = load ptr, ptr %568, align 8, !tbaa !16, !noalias !355
  %570 = icmp eq ptr %569, null
  br i1 %570, label %574, label %571

571:                                              ; preds = %567
  %572 = load ptr, ptr %569, align 8, !tbaa !59, !noalias !355
  %573 = icmp eq ptr %572, null
  br i1 %573, label %574, label %575

574:                                              ; preds = %571, %567, %562
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  store ptr %225, ptr %217, align 8, !tbaa.struct !196
  br label %678

575:                                              ; preds = %571
  %576 = load ptr, ptr %572, align 8, !tbaa !42, !noalias !355
  store ptr %576, ptr %5, align 8, !tbaa.struct !194
  store ptr %572, ptr %216, align 8, !tbaa.struct !195
  store ptr %225, ptr %217, align 8, !tbaa.struct !196
  %577 = icmp eq ptr %576, null
  br i1 %577, label %678, label %578

578:                                              ; preds = %575
  %579 = getelementptr inbounds %struct.control_flow_graph, ptr %278, i64 0, i32 6
  br label %580

580:                                              ; preds = %673, %578
  %581 = phi ptr [ %576, %578 ], [ %676, %673 ]
  %582 = load ptr, ptr %581, align 8, !tbaa !47
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %7) #26
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(56) %7, i8 0, i64 56, i1 false)
  store ptr %9, ptr %218, align 8, !tbaa !278
  %583 = call ptr @walk_gimple_stmt(ptr noundef nonnull %5, ptr noundef nonnull @move_stmt_r, ptr noundef nonnull @move_stmt_op, ptr noundef nonnull %7) #26
  %584 = load i32, ptr %582, align 8
  %585 = and i32 %584, 255
  %586 = icmp eq i32 %585, 4
  br i1 %586, label %587, label %660

587:                                              ; preds = %580
  %588 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %589
  %591 = load i64, ptr %590, align 8, !tbaa !50
  %592 = icmp eq i64 %591, 0
  br i1 %592, label %593, label %594

593:                                              ; preds = %587
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %594

594:                                              ; preds = %593, %587
  %595 = getelementptr inbounds i8, ptr %582, i64 %591
  %596 = load ptr, ptr %595, align 8, !tbaa !5
  %597 = getelementptr inbounds %struct.tree_label_decl, ptr %596, i64 0, i32 1
  %598 = load i32, ptr %597, align 8, !tbaa !16
  %599 = icmp sgt i32 %598, -1
  br i1 %599, label %601, label %600

600:                                              ; preds = %594
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5788, ptr noundef nonnull @.str.2) #26
  br label %601

601:                                              ; preds = %600, %594
  %602 = load ptr, ptr %579, align 8, !tbaa !5
  %603 = icmp eq ptr %602, null
  br i1 %603, label %616, label %604

604:                                              ; preds = %601
  %605 = load i32, ptr %602, align 8, !tbaa !30
  %606 = icmp ugt i32 %605, %598
  br i1 %606, label %638, label %607

607:                                              ; preds = %604
  %608 = mul nsw i32 %598, 3
  %609 = sdiv i32 %608, 2
  %610 = add nsw i32 %609, 1
  %611 = sub nsw i32 %610, %605
  %612 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %602, i64 0, i32 1
  %613 = load i32, ptr %612, align 4, !tbaa !32
  %614 = sub i32 %613, %605
  %615 = icmp ult i32 %614, %611
  br i1 %615, label %621, label %627

616:                                              ; preds = %601
  %617 = mul nsw i32 %598, 3
  %618 = sdiv i32 %617, 2
  %619 = add nsw i32 %618, 1
  %620 = icmp ne i32 %619, 0
  call void @llvm.assume(i1 %620)
  br label %621

621:                                              ; preds = %616, %607
  %622 = phi i32 [ %619, %616 ], [ %610, %607 ]
  %623 = phi i32 [ 0, %616 ], [ %605, %607 ]
  %624 = phi i32 [ %619, %616 ], [ %611, %607 ]
  %625 = call ptr @vec_gc_p_reserve_exact(ptr noundef %602, i32 noundef %624) #26
  store ptr %625, ptr %579, align 8, !tbaa !5
  %626 = sub nsw i32 %622, %623
  br label %627

627:                                              ; preds = %621, %607
  %628 = phi i32 [ %610, %607 ], [ %622, %621 ]
  %629 = phi i32 [ %611, %607 ], [ %626, %621 ]
  %630 = phi i32 [ %605, %607 ], [ %623, %621 ]
  %631 = phi ptr [ %602, %607 ], [ %625, %621 ]
  store i32 %628, ptr %631, align 8, !tbaa !30
  %632 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %631, i64 0, i32 2
  %633 = sext i32 %630 to i64
  %634 = getelementptr inbounds ptr, ptr %632, i64 %633
  %635 = sext i32 %629 to i64
  %636 = shl nsw i64 %635, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 8 %634, i8 0, i64 %636, i1 false)
  %637 = load ptr, ptr %579, align 8, !tbaa !33
  br label %638

638:                                              ; preds = %627, %604
  %639 = phi ptr [ %637, %627 ], [ %602, %604 ]
  %640 = zext i32 %598 to i64
  %641 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %639, i64 0, i32 2, i64 %640
  store ptr %225, ptr %641, align 8, !tbaa !5
  %642 = load ptr, ptr @cfun, align 8, !tbaa !5
  %643 = getelementptr inbounds %struct.function, ptr %642, i64 0, i32 1
  %644 = load ptr, ptr %643, align 8, !tbaa !23
  %645 = getelementptr inbounds %struct.control_flow_graph, ptr %644, i64 0, i32 6
  %646 = load ptr, ptr %645, align 8, !tbaa !33
  %647 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %646, i64 0, i32 2, i64 %640
  store ptr null, ptr %647, align 8, !tbaa !5
  %648 = getelementptr inbounds %struct.tree_decl_minimal, ptr %596, i64 0, i32 4
  %649 = load ptr, ptr %648, align 8, !tbaa !16
  %650 = load ptr, ptr %201, align 8, !tbaa !254
  %651 = icmp eq ptr %649, %650
  br i1 %651, label %653, label %652

652:                                              ; preds = %638
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5801, ptr noundef nonnull @.str.2) #26
  br label %653

653:                                              ; preds = %652, %638
  %654 = load ptr, ptr %116, align 8, !tbaa !23
  %655 = getelementptr inbounds %struct.control_flow_graph, ptr %654, i64 0, i32 11
  %656 = load i32, ptr %655, align 8, !tbaa !358
  %657 = icmp slt i32 %598, %656
  br i1 %657, label %660, label %658

658:                                              ; preds = %653
  %659 = add nsw i32 %598, 1
  store i32 %659, ptr %655, align 8, !tbaa !358
  br label %660

660:                                              ; preds = %658, %653, %580
  %661 = load ptr, ptr @cfun, align 8, !tbaa !5
  %662 = load ptr, ptr %213, align 8, !tbaa !350
  %663 = call zeroext i8 @maybe_duplicate_eh_stmt_fn(ptr noundef %0, ptr noundef nonnull %582, ptr noundef %661, ptr noundef nonnull %582, ptr noundef %662, i32 noundef 0) #26
  %664 = load ptr, ptr @cfun, align 8, !tbaa !5
  %665 = call zeroext i8 @remove_stmt_from_eh_lp_fn(ptr noundef %664, ptr noundef nonnull %582) #26
  %666 = load ptr, ptr @cfun, align 8, !tbaa !5
  call void @gimple_duplicate_stmt_histograms(ptr noundef %0, ptr noundef nonnull %582, ptr noundef %666, ptr noundef nonnull %582) #26
  %667 = load ptr, ptr @cfun, align 8, !tbaa !5
  call void @gimple_remove_stmt_histograms(ptr noundef %667, ptr noundef nonnull %582) #26
  call void @free_stmt_operands(ptr noundef nonnull %582) #26
  call void @push_cfun(ptr noundef %0) #26
  %668 = load i32, ptr %582, align 8
  %669 = and i32 %668, 255
  %670 = add nsw i32 %669, -10
  %671 = icmp ult i32 %670, -9
  br i1 %671, label %673, label %672

672:                                              ; preds = %660
  call void @gimple_set_modified(ptr noundef nonnull %582, i8 noundef zeroext 1) #26
  call void @update_stmt_operands(ptr noundef nonnull %582) #26
  br label %673

673:                                              ; preds = %672, %660
  call void @pop_cfun() #26
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %7) #26
  %674 = load ptr, ptr %5, align 8, !tbaa !44
  %675 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %674, i64 0, i32 2
  %676 = load ptr, ptr %675, align 8, !tbaa !53
  store ptr %676, ptr %5, align 8, !tbaa !44
  %677 = icmp eq ptr %676, null
  br i1 %677, label %678, label %580, !llvm.loop !359

678:                                              ; preds = %673, %575, %574
  %679 = getelementptr inbounds %struct.basic_block_def, ptr %225, i64 0, i32 1
  br label %680

680:                                              ; preds = %713, %678
  %681 = phi i32 [ 0, %678 ], [ %714, %713 ]
  %682 = load ptr, ptr %679, align 8, !tbaa !5
  %683 = icmp eq ptr %682, null
  br i1 %683, label %686, label %684

684:                                              ; preds = %680
  %685 = load i32, ptr %682, align 8, !tbaa !106
  br label %686

686:                                              ; preds = %684, %680
  %687 = phi i32 [ %685, %684 ], [ 0, %680 ]
  %688 = icmp eq i32 %687, %681
  br i1 %688, label %715, label %689

689:                                              ; preds = %686
  %690 = zext i32 %681 to i64
  %691 = getelementptr inbounds %struct.VEC_edge_base, ptr %682, i64 0, i32 2, i64 %690
  %692 = load ptr, ptr %691, align 8, !tbaa !5
  %693 = getelementptr inbounds %struct.edge_def, ptr %692, i64 0, i32 5
  %694 = load i32, ptr %693, align 8, !tbaa !75
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %708, label %696

696:                                              ; preds = %689
  %697 = load ptr, ptr %9, align 8, !tbaa !343
  %698 = icmp eq ptr %697, null
  br i1 %698, label %703, label %699

699:                                              ; preds = %696
  %700 = getelementptr inbounds %struct.edge_def, ptr %692, i64 0, i32 4
  %701 = load ptr, ptr %700, align 8, !tbaa !77
  %702 = icmp eq ptr %701, %697
  br i1 %702, label %703, label %708

703:                                              ; preds = %699, %696
  %704 = load ptr, ptr %205, align 8, !tbaa !345
  %705 = getelementptr inbounds %struct.edge_def, ptr %692, i64 0, i32 4
  store ptr %704, ptr %705, align 8, !tbaa !77
  %706 = load ptr, ptr %679, align 8, !tbaa !5
  %707 = icmp eq ptr %706, null
  br i1 %707, label %712, label %708

708:                                              ; preds = %703, %699, %689
  %709 = phi ptr [ %706, %703 ], [ %682, %689 ], [ %682, %699 ]
  %710 = load i32, ptr %709, align 8, !tbaa !106
  %711 = icmp ult i32 %681, %710
  br i1 %711, label %713, label %712

712:                                              ; preds = %708, %703
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %713

713:                                              ; preds = %712, %708
  %714 = add i32 %681, 1
  br label %680, !llvm.loop !360

715:                                              ; preds = %686
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  %716 = add nuw i64 %223, 1
  %717 = load i32, ptr %27, align 8, !tbaa !30
  %718 = zext i32 %717 to i64
  %719 = icmp ult i64 %716, %718
  br i1 %719, label %221, label %720

720:                                              ; preds = %715, %215
  %721 = load ptr, ptr %201, align 8, !tbaa !254
  br label %722

722:                                              ; preds = %720, %194
  %723 = phi ptr [ %202, %194 ], [ %721, %720 ]
  %724 = icmp eq ptr %3, null
  br i1 %724, label %753, label %725

725:                                              ; preds = %722
  %726 = getelementptr inbounds %struct.tree_decl_common, ptr %723, i64 0, i32 5
  %727 = load ptr, ptr %726, align 8, !tbaa !16
  %728 = getelementptr inbounds %struct.tree_block, ptr %727, i64 0, i32 5
  %729 = load ptr, ptr %728, align 8, !tbaa !16
  %730 = icmp eq ptr %729, null
  br i1 %730, label %735, label %731

731:                                              ; preds = %725
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6078, ptr noundef nonnull @.str.2) #26
  %732 = load ptr, ptr %201, align 8, !tbaa !254
  %733 = getelementptr inbounds %struct.tree_decl_common, ptr %732, i64 0, i32 5
  %734 = load ptr, ptr %733, align 8, !tbaa !16
  br label %735

735:                                              ; preds = %725, %731
  %736 = phi ptr [ %727, %725 ], [ %734, %731 ]
  %737 = getelementptr inbounds %struct.tree_block, ptr %3, i64 0, i32 5
  %738 = load ptr, ptr %737, align 8, !tbaa !16
  %739 = getelementptr inbounds %struct.tree_block, ptr %736, i64 0, i32 5
  store ptr %738, ptr %739, align 8, !tbaa !16
  %740 = load ptr, ptr %737, align 8, !tbaa !16
  %741 = icmp eq ptr %740, null
  br i1 %741, label %751, label %742

742:                                              ; preds = %735, %742
  %743 = phi ptr [ %749, %742 ], [ %740, %735 ]
  %744 = load ptr, ptr %201, align 8, !tbaa !254
  %745 = getelementptr inbounds %struct.tree_decl_common, ptr %744, i64 0, i32 5
  %746 = load ptr, ptr %745, align 8, !tbaa !16
  %747 = getelementptr inbounds %struct.tree_block, ptr %743, i64 0, i32 6
  store ptr %746, ptr %747, align 8, !tbaa !16
  %748 = getelementptr inbounds %struct.tree_common, ptr %743, i64 0, i32 1
  %749 = load ptr, ptr %748, align 8, !tbaa !16
  %750 = icmp eq ptr %749, null
  br i1 %750, label %751, label %742, !llvm.loop !361

751:                                              ; preds = %742, %735
  store ptr null, ptr %737, align 8, !tbaa !16
  %752 = load ptr, ptr %201, align 8, !tbaa !254
  br label %753

753:                                              ; preds = %751, %722
  %754 = phi ptr [ %752, %751 ], [ %723, %722 ]
  %755 = getelementptr inbounds %struct.tree_decl_common, ptr %754, i64 0, i32 5
  %756 = load ptr, ptr %755, align 8, !tbaa !16
  call fastcc void @replace_block_vars_by_duplicates(ptr noundef %756, ptr noundef %199, ptr noundef %754)
  %757 = icmp eq ptr %196, null
  br i1 %757, label %759, label %758

758:                                              ; preds = %753
  call void @htab_delete(ptr noundef nonnull %196) #26
  br label %759

759:                                              ; preds = %758, %753
  %760 = icmp eq ptr %195, null
  br i1 %760, label %762, label %761

761:                                              ; preds = %759
  call void @pointer_map_destroy(ptr noundef nonnull %195) #26
  br label %762

762:                                              ; preds = %761, %759
  call void @pointer_map_destroy(ptr noundef %199) #26
  call void @push_cfun(ptr noundef nonnull %0) #26
  %763 = load ptr, ptr @cfun, align 8, !tbaa !5
  %764 = getelementptr inbounds %struct.function, ptr %763, i64 0, i32 1
  %765 = load ptr, ptr %764, align 8, !tbaa !23
  %766 = load ptr, ptr %765, align 8, !tbaa !34
  %767 = call ptr @make_edge(ptr noundef %766, ptr noundef nonnull %1, i32 noundef 1) #26
  br i1 %72, label %775, label %768

768:                                              ; preds = %762
  %769 = load ptr, ptr @cfun, align 8, !tbaa !5
  %770 = getelementptr inbounds %struct.function, ptr %769, i64 0, i32 1
  %771 = load ptr, ptr %770, align 8, !tbaa !23
  %772 = getelementptr inbounds %struct.control_flow_graph, ptr %771, i64 0, i32 1
  %773 = load ptr, ptr %772, align 8, !tbaa !35
  %774 = call ptr @make_edge(ptr noundef nonnull %2, ptr noundef %773, i32 noundef 0) #26
  br label %775

775:                                              ; preds = %768, %762
  call void @pop_cfun() #26
  %776 = load ptr, ptr %43, align 8, !tbaa !5
  %777 = call ptr @create_empty_bb(ptr noundef %776) #26
  %778 = load ptr, ptr @cfun, align 8, !tbaa !5
  %779 = getelementptr inbounds %struct.function, ptr %778, i64 0, i32 4
  %780 = load ptr, ptr %779, align 8, !tbaa !220
  %781 = icmp eq ptr %780, null
  br i1 %781, label %783, label %782

782:                                              ; preds = %775
  call void @add_bb_to_loop(ptr noundef %777, ptr noundef %13) #26
  br label %783

783:                                              ; preds = %782, %775
  %784 = icmp eq i32 %41, 0
  br i1 %784, label %785, label %789

785:                                              ; preds = %789, %783
  %786 = icmp eq i32 %112, 0
  br i1 %786, label %813, label %787

787:                                              ; preds = %785
  %788 = zext i32 %112 to i64
  br label %801

789:                                              ; preds = %783, %789
  %790 = phi i64 [ %799, %789 ], [ 0, %783 ]
  %791 = getelementptr inbounds ptr, ptr %43, i64 %790
  %792 = load ptr, ptr %791, align 8, !tbaa !5
  %793 = getelementptr inbounds i32, ptr %44, i64 %790
  %794 = load i32, ptr %793, align 4, !tbaa !20
  %795 = call ptr @make_edge(ptr noundef %792, ptr noundef %777, i32 noundef %794) #26
  %796 = getelementptr inbounds i32, ptr %46, i64 %790
  %797 = load i32, ptr %796, align 4, !tbaa !20
  %798 = getelementptr inbounds %struct.edge_def, ptr %795, i64 0, i32 8
  store i32 %797, ptr %798, align 4, !tbaa !316
  %799 = add nuw nsw i64 %790, 1
  %800 = icmp eq i64 %799, %42
  br i1 %800, label %785, label %789, !llvm.loop !362

801:                                              ; preds = %787, %801
  %802 = phi i64 [ 0, %787 ], [ %811, %801 ]
  %803 = getelementptr inbounds ptr, ptr %115, i64 %802
  %804 = load ptr, ptr %803, align 8, !tbaa !5
  %805 = getelementptr inbounds i32, ptr %114, i64 %802
  %806 = load i32, ptr %805, align 4, !tbaa !20
  %807 = call ptr @make_edge(ptr noundef %777, ptr noundef %804, i32 noundef %806) #26
  %808 = getelementptr inbounds i32, ptr %113, i64 %802
  %809 = load i32, ptr %808, align 4, !tbaa !20
  %810 = getelementptr inbounds %struct.edge_def, ptr %807, i64 0, i32 8
  store i32 %809, ptr %810, align 4, !tbaa !316
  %811 = add nuw nsw i64 %802, 1
  %812 = icmp eq i64 %811, %788
  br i1 %812, label %813, label %801, !llvm.loop !363

813:                                              ; preds = %801, %785
  call void @set_immediate_dominator(i32 noundef 1, ptr noundef %777, ptr noundef %10) #26
  %814 = icmp eq ptr %35, null
  br i1 %814, label %827, label %815

815:                                              ; preds = %813
  %816 = load i32, ptr %35, align 8, !tbaa !30
  %817 = icmp eq i32 %816, 0
  br i1 %817, label %826, label %818

818:                                              ; preds = %815, %818
  %819 = phi i64 [ %822, %818 ], [ 0, %815 ]
  %820 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %35, i64 0, i32 2, i64 %819
  %821 = load ptr, ptr %820, align 8, !tbaa !5
  call void @set_immediate_dominator(i32 noundef 1, ptr noundef %821, ptr noundef %777) #26
  %822 = add nuw nsw i64 %819, 1
  %823 = load i32, ptr %35, align 8, !tbaa !30
  %824 = zext i32 %823 to i64
  %825 = icmp ult i64 %822, %824
  br i1 %825, label %818, label %826

826:                                              ; preds = %818, %815
  call void @free(ptr noundef nonnull %35)
  br label %827

827:                                              ; preds = %813, %826
  br i1 %72, label %829, label %828

828:                                              ; preds = %827
  call void @free(ptr noundef %113)
  call void @free(ptr noundef %114)
  call void @free(ptr noundef %115)
  br label %829

829:                                              ; preds = %828, %827
  call void @free(ptr noundef %46)
  call void @free(ptr noundef %44)
  call void @free(ptr noundef %43)
  br i1 %28, label %831, label %830

830:                                              ; preds = %829
  call void @free(ptr noundef nonnull %27)
  br label %831

831:                                              ; preds = %829, %830
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %9) #26
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #26
  ret ptr %777
}

declare ptr @get_immediate_dominator(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_edge(ptr noundef) local_unnamed_addr #3

declare void @push_cfun(ptr noundef) local_unnamed_addr #3

declare void @init_eh_for_function() local_unnamed_addr #3

declare ptr @htab_create(i64 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @tree_map_hash(ptr noundef) #3

declare i32 @tree_map_base_eq(ptr noundef, ptr noundef) #3

declare ptr @duplicate_eh_regions(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @new_label_mapper(ptr noundef %0, ptr noundef %1) #9 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 30
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5878, ptr noundef nonnull @.str.2) #26
  br label %7

7:                                                ; preds = %2, %6
  %8 = tail call ptr @xmalloc(i64 noundef 24) #26
  %9 = getelementptr inbounds %struct.tree_decl_minimal, ptr %0, i64 0, i32 2
  %10 = load i32, ptr %9, align 4, !tbaa !16
  %11 = getelementptr inbounds %struct.tree_map, ptr %8, i64 0, i32 1
  store i32 %10, ptr %11, align 8, !tbaa !364
  store ptr %0, ptr %8, align 8, !tbaa !367
  %12 = tail call ptr @create_artificial_label(i32 noundef 0) #26
  %13 = getelementptr inbounds %struct.tree_map, ptr %8, i64 0, i32 2
  store ptr %12, ptr %13, align 8, !tbaa !368
  %14 = getelementptr inbounds %struct.tree_label_decl, ptr %0, i64 0, i32 1
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.tree_label_decl, ptr %12, i64 0, i32 1
  store i32 %15, ptr %16, align 8, !tbaa !16
  %17 = load ptr, ptr %13, align 8, !tbaa !368
  %18 = getelementptr inbounds %struct.tree_label_decl, ptr %17, i64 0, i32 1
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = load ptr, ptr @cfun, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.function, ptr %20, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !23
  %23 = getelementptr inbounds %struct.control_flow_graph, ptr %22, i64 0, i32 11
  %24 = load i32, ptr %23, align 8, !tbaa !358
  %25 = icmp slt i32 %19, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %7
  %27 = add nsw i32 %19, 1
  store i32 %27, ptr %23, align 8, !tbaa !358
  br label %28

28:                                               ; preds = %26, %7
  %29 = load i32, ptr %11, align 8, !tbaa !364
  %30 = tail call ptr @htab_find_slot_with_hash(ptr noundef %1, ptr noundef nonnull %8, i32 noundef %29, i32 noundef 1) #26
  %31 = load ptr, ptr %30, align 8, !tbaa !5
  %32 = icmp eq ptr %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %28
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5889, ptr noundef nonnull @.str.2) #26
  br label %34

34:                                               ; preds = %28, %33
  store ptr %8, ptr %30, align 8, !tbaa !5
  %35 = load ptr, ptr %13, align 8, !tbaa !368
  ret ptr %35
}

declare void @pop_cfun() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @replace_block_vars_by_duplicates(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #26
  %5 = getelementptr inbounds %struct.tree_block, ptr %0, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = icmp eq ptr %6, null
  br i1 %7, label %43, label %8

8:                                                ; preds = %3, %38
  %9 = phi ptr [ %41, %38 ], [ %6, %3 ]
  %10 = phi ptr [ %40, %38 ], [ %5, %3 ]
  store ptr %9, ptr %4, align 8, !tbaa !5
  %11 = load i64, ptr %9, align 8
  %12 = and i64 %11, 65534
  %13 = icmp eq i64 %12, 32
  br i1 %13, label %14, label %38

14:                                               ; preds = %8
  call fastcc void @replace_by_duplicate_decl(ptr noundef nonnull %4, ptr noundef %1, ptr noundef %2)
  %15 = load ptr, ptr %4, align 8, !tbaa !5
  %16 = load ptr, ptr %10, align 8, !tbaa !5
  %17 = icmp eq ptr %15, %16
  br i1 %17, label %38, label %18

18:                                               ; preds = %14
  %19 = load i64, ptr %16, align 8
  %20 = and i64 %19, 65535
  %21 = icmp eq i64 %20, 32
  br i1 %21, label %22, label %33

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.tree_decl_common, ptr %16, i64 0, i32 2
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 67108864
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %22
  %28 = tail call ptr @decl_value_expr_lookup(ptr noundef nonnull %16) #26
  tail call void @decl_value_expr_insert(ptr noundef %15, ptr noundef %28) #26
  %29 = getelementptr inbounds %struct.tree_decl_common, ptr %15, i64 0, i32 2
  %30 = load i64, ptr %29, align 8
  %31 = or i64 %30, 67108864
  store i64 %31, ptr %29, align 8
  %32 = load ptr, ptr %10, align 8, !tbaa !5
  br label %33

33:                                               ; preds = %27, %22, %18
  %34 = phi ptr [ %32, %27 ], [ %16, %22 ], [ %16, %18 ]
  %35 = getelementptr inbounds %struct.tree_common, ptr %34, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 1
  store ptr %36, ptr %37, align 8, !tbaa !16
  store ptr %15, ptr %10, align 8, !tbaa !5
  br label %38

38:                                               ; preds = %8, %14, %33
  %39 = phi ptr [ %9, %8 ], [ %15, %14 ], [ %15, %33 ]
  %40 = getelementptr inbounds %struct.tree_common, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %8, !llvm.loop !369

43:                                               ; preds = %38, %3
  %44 = getelementptr inbounds %struct.tree_block, ptr %0, i64 0, i32 5
  %45 = load ptr, ptr %44, align 8, !tbaa !16
  %46 = icmp eq ptr %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %43, %47
  %48 = phi ptr [ %50, %47 ], [ %45, %43 ]
  tail call fastcc void @replace_block_vars_by_duplicates(ptr noundef nonnull %48, ptr noundef %1, ptr noundef %2)
  %49 = getelementptr inbounds %struct.tree_common, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %47, !llvm.loop !370

52:                                               ; preds = %47, %43
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #26
  ret void
}

declare void @htab_delete(ptr noundef) local_unnamed_addr #3

declare ptr @create_empty_bb(ptr noundef) local_unnamed_addr #3

declare void @add_bb_to_loop(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @print_generic_expr(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @print_node(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @dump_eh_tree(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @gimple_has_body_p(ptr noundef) local_unnamed_addr #3

declare void @dump_node(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @print_generic_decl(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @check_bb_profile(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_body(ptr noundef) local_unnamed_addr #3

declare void @print_gimple_seq(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @print_generic_stmt_indented(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_function(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call void @dump_function_to_file(ptr noundef %0, ptr noundef %3, i32 noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @print_loops_bb(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = sext i32 %2 to i64
  %6 = add nsw i64 %5, 1
  %7 = alloca i8, i64 %6, align 16
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %7, i8 32, i64 %5, i1 false)
  %8 = getelementptr inbounds i8, ptr %7, i64 %5
  store i8 0, ptr %8, align 1, !tbaa !16
  %9 = icmp sgt i32 %3, 1
  br i1 %9, label %10, label %75

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 9
  %12 = load i32, ptr %11, align 8, !tbaa !120
  %13 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.38, ptr noundef nonnull %7, i32 noundef %12)
  br label %14

14:                                               ; preds = %10, %37
  %15 = phi i32 [ %38, %37 ], [ 0, %10 ]
  %16 = load ptr, ptr %1, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = load i32, ptr %16, align 8, !tbaa !106
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 [ %19, %18 ], [ 0, %14 ]
  %22 = icmp eq i32 %21, %15
  br i1 %22, label %39, label %23

23:                                               ; preds = %20
  %24 = zext i32 %15 to i64
  %25 = getelementptr inbounds %struct.VEC_edge_base, ptr %16, i64 0, i32 2, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = load ptr, ptr %26, align 8, !tbaa !295
  %28 = getelementptr inbounds %struct.basic_block_def, ptr %27, i64 0, i32 9
  %29 = load i32, ptr %28, align 8, !tbaa !120
  %30 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.148, i32 noundef %29)
  %31 = load ptr, ptr %1, align 8, !tbaa !5
  %32 = icmp eq ptr %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %23
  %34 = load i32, ptr %31, align 8, !tbaa !106
  %35 = icmp ult i32 %15, %34
  br i1 %35, label %37, label %36

36:                                               ; preds = %33, %23
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %37

37:                                               ; preds = %36, %33
  %38 = add i32 %15, 1
  br label %14, !llvm.loop !371

39:                                               ; preds = %20
  %40 = call i64 @fwrite(ptr nonnull @.str.39, i64 12, i64 1, ptr %0)
  %41 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 1
  br label %42

42:                                               ; preds = %66, %39
  %43 = phi i32 [ 0, %39 ], [ %67, %66 ]
  %44 = load ptr, ptr %41, align 8, !tbaa !5
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = load i32, ptr %44, align 8, !tbaa !106
  br label %48

48:                                               ; preds = %46, %42
  %49 = phi i32 [ %47, %46 ], [ 0, %42 ]
  %50 = icmp eq i32 %49, %43
  br i1 %50, label %68, label %51

51:                                               ; preds = %48
  %52 = zext i32 %43 to i64
  %53 = getelementptr inbounds %struct.VEC_edge_base, ptr %44, i64 0, i32 2, i64 %52
  %54 = load ptr, ptr %53, align 8, !tbaa !5
  %55 = getelementptr inbounds %struct.edge_def, ptr %54, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !109
  %57 = getelementptr inbounds %struct.basic_block_def, ptr %56, i64 0, i32 9
  %58 = load i32, ptr %57, align 8, !tbaa !120
  %59 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.148, i32 noundef %58)
  %60 = load ptr, ptr %41, align 8, !tbaa !5
  %61 = icmp eq ptr %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %51
  %63 = load i32, ptr %60, align 8, !tbaa !106
  %64 = icmp ult i32 %43, %63
  br i1 %64, label %66, label %65

65:                                               ; preds = %62, %51
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %66

66:                                               ; preds = %65, %62
  %67 = add i32 %43, 1
  br label %42, !llvm.loop !372

68:                                               ; preds = %48
  %69 = call i64 @fwrite(ptr nonnull @.str.40, i64 3, i64 1, ptr %0)
  %70 = icmp sgt i32 %3, 2
  br i1 %70, label %71, label %75

71:                                               ; preds = %68
  %72 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.41, ptr noundef nonnull %7)
  %73 = add nsw i32 %2, 4
  call void @gimple_dump_bb(ptr noundef nonnull %1, ptr noundef %0, i32 noundef %73, i32 noundef 16448) #26
  %74 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.42, ptr noundef nonnull %7)
  br label %75

75:                                               ; preds = %4, %71, %68
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @print_loops(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !23
  %6 = load ptr, ptr %5, align 8, !tbaa !34
  %7 = icmp eq ptr %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.basic_block_def, ptr %6, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !308
  %11 = icmp eq ptr %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8, %12
  %13 = phi ptr [ %15, %12 ], [ %10, %8 ]
  tail call fastcc void @print_loop(ptr noundef %0, ptr noundef nonnull %13, i32 noundef 0, i32 noundef %1) #27
  %14 = getelementptr inbounds %struct.loop, ptr %13, i64 0, i32 9
  %15 = load ptr, ptr %14, align 8, !tbaa !233
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %12

17:                                               ; preds = %12, %8, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_loop_and_siblings(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = icmp eq ptr %1, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %4, %6
  %7 = phi ptr [ %9, %6 ], [ %1, %4 ]
  tail call fastcc void @print_loop(ptr noundef %0, ptr noundef nonnull %7, i32 noundef %2, i32 noundef %3)
  %8 = getelementptr inbounds %struct.loop, ptr %7, i64 0, i32 9
  %9 = load ptr, ptr %8, align 8, !tbaa !233
  %10 = icmp eq ptr %9, null
  br i1 %10, label %11, label %6

11:                                               ; preds = %6, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_loops(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @stderr, align 8, !tbaa !5
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !23
  %6 = load ptr, ptr %5, align 8, !tbaa !34
  %7 = icmp eq ptr %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.basic_block_def, ptr %6, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !308
  %11 = icmp eq ptr %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8, %12
  %13 = phi ptr [ %15, %12 ], [ %10, %8 ]
  tail call fastcc void @print_loop(ptr noundef %2, ptr noundef nonnull %13, i32 noundef 0, i32 noundef %0) #27
  %14 = getelementptr inbounds %struct.loop, ptr %13, i64 0, i32 9
  %15 = load ptr, ptr %14, align 8, !tbaa !233
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %12

17:                                               ; preds = %12, %1, %8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_loop(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call fastcc void @print_loop(ptr noundef %3, ptr noundef %0, i32 noundef 0, i32 noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @print_loop(ptr noundef %0, ptr noundef readonly %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = icmp eq ptr %1, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %4
  %7 = sext i32 %2 to i64
  %8 = add nsw i64 %7, 1
  %9 = alloca i8, i64 %8, align 16
  call void @llvm.memset.p0.i64(ptr nonnull align 16 %9, i8 32, i64 %7, i1 false)
  %10 = getelementptr inbounds i8, ptr %9, i64 %7
  store i8 0, ptr %10, align 1, !tbaa !16
  %11 = load i32, ptr %1, align 8, !tbaa !226
  %12 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !309
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %13, i64 0, i32 9
  %15 = load i32, ptr %14, align 8, !tbaa !120
  %16 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !311
  %18 = getelementptr inbounds %struct.basic_block_def, ptr %17, i64 0, i32 9
  %19 = load i32, ptr %18, align 8, !tbaa !120
  %20 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.149, ptr noundef nonnull %9, i32 noundef %11, i32 noundef %15, i32 noundef %19)
  %21 = call i64 @fwrite(ptr nonnull @.str.150, i64 10, i64 1, ptr %0)
  %22 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 11
  %23 = load ptr, ptr %22, align 8, !tbaa !373
  call void @print_generic_expr(ptr noundef %0, ptr noundef %23, i32 noundef 0) #26
  %24 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 14
  %25 = load i8, ptr %24, align 8, !tbaa !374
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %6
  %28 = call i64 @fwrite(ptr nonnull @.str.151, i64 16, i64 1, ptr %0)
  %29 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 12
  %30 = load i64, ptr %29, align 8
  %31 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 12, i32 1
  %32 = load i64, ptr %31, align 8
  call void @dump_double_int(ptr noundef %0, i64 %30, i64 %32, i8 noundef zeroext 1) #26
  br label %33

33:                                               ; preds = %27, %6
  %34 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 15
  %35 = load i8, ptr %34, align 1, !tbaa !375
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = call i64 @fwrite(ptr nonnull @.str.152, i64 13, i64 1, ptr %0)
  %39 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 13
  %40 = load i64, ptr %39, align 8
  %41 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 13, i32 1
  %42 = load i64, ptr %41, align 8
  call void @dump_double_int(ptr noundef %0, i64 %40, i64 %42, i8 noundef zeroext 1) #26
  br label %43

43:                                               ; preds = %37, %33
  %44 = call i64 @fwrite(ptr nonnull @.str.34, i64 2, i64 1, ptr %0)
  %45 = icmp sgt i32 %3, 0
  br i1 %45, label %46, label %79

46:                                               ; preds = %43
  %47 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.153, ptr noundef nonnull %9)
  %48 = load ptr, ptr @cfun, align 8, !tbaa !5
  %49 = getelementptr inbounds %struct.function, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !23
  %51 = load ptr, ptr %50, align 8, !tbaa !34
  %52 = getelementptr inbounds %struct.basic_block_def, ptr %51, i64 0, i32 6
  %53 = load ptr, ptr %52, align 8, !tbaa !36
  %54 = getelementptr inbounds %struct.control_flow_graph, ptr %50, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !35
  %56 = icmp eq ptr %53, %55
  br i1 %56, label %74, label %57

57:                                               ; preds = %46, %65
  %58 = phi ptr [ %66, %65 ], [ %48, %46 ]
  %59 = phi ptr [ %68, %65 ], [ %53, %46 ]
  %60 = getelementptr inbounds %struct.basic_block_def, ptr %59, i64 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !308
  %62 = icmp eq ptr %61, %1
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  call void @print_loops_bb(ptr noundef %0, ptr noundef nonnull %59, i32 noundef %2, i32 noundef %3)
  %64 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %65

65:                                               ; preds = %57, %63
  %66 = phi ptr [ %58, %57 ], [ %64, %63 ]
  %67 = getelementptr inbounds %struct.basic_block_def, ptr %59, i64 0, i32 6
  %68 = load ptr, ptr %67, align 8, !tbaa !36
  %69 = getelementptr inbounds %struct.function, ptr %66, i64 0, i32 1
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.control_flow_graph, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !35
  %73 = icmp eq ptr %68, %72
  br i1 %73, label %74, label %57, !llvm.loop !376

74:                                               ; preds = %65, %46
  %75 = getelementptr inbounds %struct.loop, ptr %1, i64 0, i32 8
  %76 = load ptr, ptr %75, align 8, !tbaa !232
  %77 = add nsw i32 %2, 2
  call fastcc void @print_loop_and_siblings(ptr noundef %0, ptr noundef %76, i32 noundef %77, i32 noundef %3)
  %78 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.154, ptr noundef nonnull %9)
  br label %79

79:                                               ; preds = %43, %74, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @debug_loop_num(i32 noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !220
  %6 = getelementptr inbounds %struct.loops, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !221
  %8 = zext i32 %0 to i64
  %9 = getelementptr inbounds %struct.VEC_loop_p_base, ptr %7, i64 0, i32 2, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !5
  %11 = load ptr, ptr @stderr, align 8, !tbaa !5
  tail call fastcc void @print_loop(ptr noundef %11, ptr noundef %10, i32 noundef 0, i32 noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @gimple_purge_dead_abnormal_call_edges(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = tail call zeroext i8 @gimple_purge_dead_eh_edges(ptr noundef %0), !range !268
  %3 = load ptr, ptr @cfun, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.function, ptr %3, i64 0, i32 20
  %5 = load i32, ptr %4, align 8
  %6 = and i32 %5, 1048576
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %115, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %10 = load i32, ptr %9, align 8, !tbaa !58, !noalias !377
  %11 = and i32 %10, 512
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %61

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %15 = load ptr, ptr %14, align 8, !tbaa !16, !noalias !377
  %16 = icmp eq ptr %15, null
  br i1 %16, label %61, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr %15, align 8, !tbaa !59, !noalias !377
  %19 = icmp eq ptr %18, null
  br i1 %19, label %61, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.gimple_seq_d, ptr %18, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !61, !noalias !377
  %23 = icmp eq ptr %22, null
  br i1 %23, label %61, label %24

24:                                               ; preds = %20, %29
  %25 = phi ptr [ %31, %29 ], [ %22, %20 ]
  %26 = load ptr, ptr %25, align 8, !tbaa !47
  %27 = load i32, ptr %26, align 8
  %28 = trunc i32 %27 to i8
  switch i8 %28, label %48 [
    i8 2, label %29
    i8 3, label %33
  ]

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %25, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !67
  %32 = icmp eq ptr %31, null
  br i1 %32, label %61, label %24, !llvm.loop !68

33:                                               ; preds = %24
  %34 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %35
  %37 = load i64, ptr %36, align 8, !tbaa !50
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %40

40:                                               ; preds = %39, %33
  %41 = getelementptr inbounds i8, ptr %26, i64 %37
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i64, ptr %42, align 8
  %44 = and i64 %43, 65535
  %45 = icmp eq i64 %44, 30
  br i1 %45, label %46, label %111

46:                                               ; preds = %40
  %47 = load i32, ptr %26, align 8
  br label %48

48:                                               ; preds = %24, %46
  %49 = phi i32 [ %47, %46 ], [ %27, %24 ]
  %50 = and i32 %49, 255
  %51 = icmp eq i32 %50, 8
  br i1 %51, label %52, label %61

52:                                               ; preds = %48
  %53 = tail call zeroext i8 @gimple_has_side_effects(ptr noundef nonnull %26) #26
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %52
  %56 = load ptr, ptr @cfun, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.function, ptr %56, i64 0, i32 20
  %58 = load i32, ptr %57, align 8
  %59 = and i32 %58, 1048576
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %111

61:                                               ; preds = %29, %48, %52, %8, %13, %17, %20, %55
  %62 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  br label %63

63:                                               ; preds = %109, %61
  %64 = phi i32 [ %110, %109 ], [ 0, %61 ]
  %65 = phi i8 [ %104, %109 ], [ %2, %61 ]
  %66 = load ptr, ptr %62, align 8, !tbaa !5
  %67 = icmp eq ptr %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %63
  %69 = load i32, ptr %66, align 8, !tbaa !106
  br label %70

70:                                               ; preds = %68, %63
  %71 = phi i32 [ %69, %68 ], [ 0, %63 ]
  %72 = icmp eq i32 %71, %64
  br i1 %72, label %111, label %73

73:                                               ; preds = %70
  %74 = zext i32 %64 to i64
  %75 = getelementptr inbounds %struct.VEC_edge_base, ptr %66, i64 0, i32 2, i64 %74
  %76 = load ptr, ptr %75, align 8, !tbaa !5
  %77 = icmp eq ptr %76, null
  br i1 %77, label %111, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %struct.edge_def, ptr %76, i64 0, i32 7
  %80 = load i32, ptr %79, align 8, !tbaa !108
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %103, label %83

83:                                               ; preds = %78
  tail call void @remove_edge(ptr noundef nonnull %76) #26
  %84 = zext i32 %64 to i64
  br label %85

85:                                               ; preds = %83, %102
  %86 = load ptr, ptr %62, align 8, !tbaa !5
  %87 = icmp eq ptr %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = load i32, ptr %86, align 8, !tbaa !106
  br label %90

90:                                               ; preds = %88, %85
  %91 = phi i32 [ %89, %88 ], [ 0, %85 ]
  %92 = icmp eq i32 %91, %64
  br i1 %92, label %111, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %struct.VEC_edge_base, ptr %86, i64 0, i32 2, i64 %84
  %95 = load ptr, ptr %94, align 8, !tbaa !5
  %96 = icmp eq ptr %95, null
  br i1 %96, label %111, label %97

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.edge_def, ptr %95, i64 0, i32 7
  %99 = load i32, ptr %98, align 8, !tbaa !108
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %103, label %102

102:                                              ; preds = %97
  tail call void @remove_edge(ptr noundef nonnull %95) #26
  br label %85, !llvm.loop !380

103:                                              ; preds = %97, %78
  %104 = phi i8 [ %65, %78 ], [ 1, %97 ]
  %105 = phi ptr [ %66, %78 ], [ %86, %97 ]
  %106 = load i32, ptr %105, align 8, !tbaa !106
  %107 = icmp ult i32 %64, %106
  br i1 %107, label %109, label %108

108:                                              ; preds = %103
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %109

109:                                              ; preds = %103, %108
  %110 = add i32 %64, 1
  br label %63, !llvm.loop !381

111:                                              ; preds = %90, %93, %70, %73, %40, %55
  %112 = phi i8 [ %2, %55 ], [ %2, %40 ], [ 1, %90 ], [ 1, %93 ], [ %65, %70 ], [ %65, %73 ]
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %115, label %114

114:                                              ; preds = %111
  tail call void @free_dominance_info(i32 noundef 1) #26
  br label %115

115:                                              ; preds = %111, %114, %1
  %116 = phi i8 [ %2, %1 ], [ %112, %114 ], [ 0, %111 ]
  ret i8 %116
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @gimple_purge_dead_eh_edges(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !382
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %30

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !16, !noalias !382
  %9 = icmp eq ptr %8, null
  br i1 %9, label %30, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %8, align 8, !tbaa !59, !noalias !382
  %12 = icmp eq ptr %11, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.gimple_seq_d, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !61, !noalias !382
  %16 = icmp eq ptr %15, null
  br i1 %16, label %30, label %17

17:                                               ; preds = %13, %23
  %18 = phi ptr [ %25, %23 ], [ %15, %13 ]
  %19 = load ptr, ptr %18, align 8, !tbaa !47
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %18, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !67
  %26 = icmp eq ptr %25, null
  br i1 %26, label %30, label %17, !llvm.loop !68

27:                                               ; preds = %17
  %28 = tail call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %19) #26
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %23, %1, %6, %10, %13, %27
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  br label %32

32:                                               ; preds = %78, %30
  %33 = phi i32 [ %79, %78 ], [ 0, %30 ]
  %34 = phi i8 [ %73, %78 ], [ 0, %30 ]
  %35 = load ptr, ptr %31, align 8, !tbaa !5
  %36 = icmp eq ptr %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %32
  %38 = load i32, ptr %35, align 8, !tbaa !106
  br label %39

39:                                               ; preds = %37, %32
  %40 = phi i32 [ %38, %37 ], [ 0, %32 ]
  %41 = icmp eq i32 %40, %33
  br i1 %41, label %80, label %42

42:                                               ; preds = %39
  %43 = zext i32 %33 to i64
  %44 = getelementptr inbounds %struct.VEC_edge_base, ptr %35, i64 0, i32 2, i64 %43
  %45 = load ptr, ptr %44, align 8, !tbaa !5
  %46 = icmp eq ptr %45, null
  br i1 %46, label %80, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.edge_def, ptr %45, i64 0, i32 7
  %49 = load i32, ptr %48, align 8, !tbaa !108
  %50 = and i32 %49, 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %72, label %52

52:                                               ; preds = %47
  tail call void @remove_edge_and_dominated_blocks(ptr noundef nonnull %45)
  %53 = zext i32 %33 to i64
  br label %54

54:                                               ; preds = %52, %71
  %55 = load ptr, ptr %31, align 8, !tbaa !5
  %56 = icmp eq ptr %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  %58 = load i32, ptr %55, align 8, !tbaa !106
  br label %59

59:                                               ; preds = %57, %54
  %60 = phi i32 [ %58, %57 ], [ 0, %54 ]
  %61 = icmp eq i32 %60, %33
  br i1 %61, label %80, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.VEC_edge_base, ptr %55, i64 0, i32 2, i64 %53
  %64 = load ptr, ptr %63, align 8, !tbaa !5
  %65 = icmp eq ptr %64, null
  br i1 %65, label %80, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.edge_def, ptr %64, i64 0, i32 7
  %68 = load i32, ptr %67, align 8, !tbaa !108
  %69 = and i32 %68, 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %66
  tail call void @remove_edge_and_dominated_blocks(ptr noundef nonnull %64)
  br label %54, !llvm.loop !385

72:                                               ; preds = %66, %47
  %73 = phi i8 [ %34, %47 ], [ 1, %66 ]
  %74 = phi ptr [ %35, %47 ], [ %55, %66 ]
  %75 = load i32, ptr %74, align 8, !tbaa !106
  %76 = icmp ult i32 %33, %75
  br i1 %76, label %78, label %77

77:                                               ; preds = %72
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %78

78:                                               ; preds = %72, %77
  %79 = add i32 %33, 1
  br label %32, !llvm.loop !386

80:                                               ; preds = %59, %62, %39, %42, %27
  %81 = phi i8 [ 0, %27 ], [ 1, %59 ], [ 1, %62 ], [ %34, %39 ], [ %34, %42 ]
  ret i8 %81
}

declare void @free_dominance_info(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @remove_edge_and_dominated_blocks(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call zeroext i8 @dom_info_available_p(i32 noundef 1) #26
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %1
  tail call void @remove_edge(ptr noundef %0) #26
  br label %335

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !109
  %8 = load ptr, ptr @cfun, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.function, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !23
  %11 = getelementptr inbounds %struct.control_flow_graph, ptr %10, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !35
  %13 = icmp eq ptr %7, %12
  br i1 %13, label %16, label %14

14:                                               ; preds = %5
  %15 = icmp eq ptr %7, null
  br label %25

16:                                               ; preds = %5
  %17 = load ptr, ptr @cfgcleanup_altered_bbs, align 8, !tbaa !5
  %18 = icmp eq ptr %17, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = load ptr, ptr %0, align 8, !tbaa !295
  %21 = getelementptr inbounds %struct.basic_block_def, ptr %20, i64 0, i32 9
  %22 = load i32, ptr %21, align 8, !tbaa !120
  %23 = tail call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %17, i32 noundef %22) #26
  br label %24

24:                                               ; preds = %19, %16
  tail call void @remove_edge(ptr noundef nonnull %0) #26
  br label %335

25:                                               ; preds = %14, %54
  %26 = phi i32 [ %55, %54 ], [ 0, %14 ]
  br i1 %15, label %27, label %28

27:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 687, ptr noundef nonnull @.str.2) #26
  br label %28

28:                                               ; preds = %27, %25
  %29 = load ptr, ptr %7, align 8, !tbaa !5
  %30 = icmp eq ptr %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %28
  %32 = load i32, ptr %29, align 8, !tbaa !106
  br label %33

33:                                               ; preds = %31, %28
  %34 = phi i32 [ %32, %31 ], [ 0, %28 ]
  %35 = icmp eq i32 %34, %26
  br i1 %35, label %56, label %36

36:                                               ; preds = %33
  %37 = zext i32 %26 to i64
  %38 = getelementptr inbounds %struct.VEC_edge_base, ptr %29, i64 0, i32 2, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !5
  %40 = icmp eq ptr %39, %0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = load ptr, ptr %39, align 8, !tbaa !295
  %43 = load ptr, ptr %6, align 8, !tbaa !109
  %44 = tail call zeroext i8 @dominated_by_p(i32 noundef 1, ptr noundef %42, ptr noundef %43) #26
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %56, label %46

46:                                               ; preds = %41
  %47 = load ptr, ptr %7, align 8, !tbaa !5
  %48 = icmp eq ptr %47, null
  br i1 %48, label %53, label %49

49:                                               ; preds = %36, %46
  %50 = phi ptr [ %47, %46 ], [ %29, %36 ]
  %51 = load i32, ptr %50, align 8, !tbaa !106
  %52 = icmp ult i32 %26, %51
  br i1 %52, label %54, label %53

53:                                               ; preds = %49, %46
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %54

54:                                               ; preds = %49, %53
  %55 = add i32 %26, 1
  br label %25, !llvm.loop !387

56:                                               ; preds = %33, %41
  %57 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #26
  %58 = tail call ptr @bitmap_obstack_alloc_stat(ptr noundef null) #26
  %59 = load ptr, ptr %6, align 8, !tbaa !109
  br i1 %35, label %65, label %60

60:                                               ; preds = %56
  %61 = tail call ptr @get_immediate_dominator(i32 noundef 1, ptr noundef %59) #26
  %62 = getelementptr inbounds %struct.basic_block_def, ptr %61, i64 0, i32 9
  %63 = load i32, ptr %62, align 8, !tbaa !120
  %64 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %58, i32 noundef %63) #26
  br label %204

65:                                               ; preds = %56
  %66 = tail call ptr @get_all_dominated_blocks(i32 noundef 1, ptr noundef %59) #26
  %67 = icmp eq ptr %66, null
  br i1 %67, label %128, label %68

68:                                               ; preds = %65
  %69 = load i32, ptr %66, align 8, !tbaa !30
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %128, label %73

71:                                               ; preds = %113
  %72 = icmp eq i32 %115, 0
  br i1 %72, label %128, label %117

73:                                               ; preds = %68, %113
  %74 = phi i32 [ %114, %113 ], [ 0, %68 ]
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %66, i64 0, i32 2, i64 %75
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  %78 = getelementptr inbounds %struct.basic_block_def, ptr %77, i64 0, i32 1
  br label %79

79:                                               ; preds = %73, %111
  %80 = phi i32 [ 0, %73 ], [ %112, %111 ]
  %81 = load ptr, ptr %78, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  %84 = load i32, ptr %81, align 8, !tbaa !106
  br label %85

85:                                               ; preds = %83, %79
  %86 = phi i32 [ %84, %83 ], [ 0, %79 ]
  %87 = icmp eq i32 %86, %80
  br i1 %87, label %113, label %88

88:                                               ; preds = %85
  %89 = zext i32 %80 to i64
  %90 = getelementptr inbounds %struct.VEC_edge_base, ptr %81, i64 0, i32 2, i64 %89
  %91 = load ptr, ptr %90, align 8, !tbaa !5
  %92 = getelementptr inbounds %struct.edge_def, ptr %91, i64 0, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !109
  %94 = load ptr, ptr @cfun, align 8, !tbaa !5
  %95 = getelementptr inbounds %struct.function, ptr %94, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !23
  %97 = getelementptr inbounds %struct.control_flow_graph, ptr %96, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !35
  %99 = icmp eq ptr %93, %98
  br i1 %99, label %106, label %100

100:                                              ; preds = %88
  %101 = getelementptr inbounds %struct.basic_block_def, ptr %93, i64 0, i32 9
  %102 = load i32, ptr %101, align 8, !tbaa !120
  %103 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %57, i32 noundef %102) #26
  %104 = load ptr, ptr %78, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %110, label %106

106:                                              ; preds = %88, %100
  %107 = phi ptr [ %104, %100 ], [ %81, %88 ]
  %108 = load i32, ptr %107, align 8, !tbaa !106
  %109 = icmp ult i32 %80, %108
  br i1 %109, label %111, label %110

110:                                              ; preds = %106, %100
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %111

111:                                              ; preds = %106, %110
  %112 = add i32 %80, 1
  br label %79, !llvm.loop !388

113:                                              ; preds = %85
  %114 = add nuw i32 %74, 1
  %115 = load i32, ptr %66, align 8, !tbaa !30
  %116 = icmp ugt i32 %115, %114
  br i1 %116, label %73, label %71

117:                                              ; preds = %71, %117
  %118 = phi i64 [ %124, %117 ], [ 0, %71 ]
  %119 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %66, i64 0, i32 2, i64 %118
  %120 = load ptr, ptr %119, align 8, !tbaa !5
  %121 = getelementptr inbounds %struct.basic_block_def, ptr %120, i64 0, i32 9
  %122 = load i32, ptr %121, align 8, !tbaa !120
  %123 = tail call zeroext i8 @bitmap_clear_bit(ptr noundef %57, i32 noundef %122) #26
  %124 = add nuw nsw i64 %118, 1
  %125 = load i32, ptr %66, align 8, !tbaa !30
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %124, %126
  br i1 %127, label %117, label %128

128:                                              ; preds = %117, %68, %65, %71
  %129 = load ptr, ptr %57, align 8, !tbaa !389
  %130 = icmp eq ptr %129, null
  %131 = select i1 %130, ptr @bitmap_zero_bits, ptr %129
  %132 = getelementptr inbounds %struct.bitmap_element_def, ptr %131, i64 0, i32 2
  %133 = load i32, ptr %132, align 8, !tbaa !391
  %134 = shl i32 %133, 7
  %135 = getelementptr inbounds %struct.bitmap_element_def, ptr %131, i64 0, i32 3
  %136 = load i64, ptr %135, align 8, !tbaa !50
  %137 = icmp eq i64 %136, 0
  %138 = zext i1 %137 to i32
  %139 = or i32 %134, %138
  br label %140

140:                                              ; preds = %187, %128
  %141 = phi i32 [ %139, %128 ], [ %203, %187 ]
  %142 = phi i64 [ %136, %128 ], [ %202, %187 ]
  %143 = phi i32 [ 0, %128 ], [ %149, %187 ]
  %144 = phi ptr [ %131, %128 ], [ %150, %187 ]
  %145 = icmp eq i64 %142, 0
  br i1 %145, label %160, label %146

146:                                              ; preds = %169, %140
  %147 = phi i32 [ %141, %140 ], [ %170, %169 ]
  %148 = phi i64 [ %142, %140 ], [ %174, %169 ]
  %149 = phi i32 [ %143, %140 ], [ %171, %169 ]
  %150 = phi ptr [ %144, %140 ], [ %166, %169 ]
  %151 = and i64 %148, 1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %187

153:                                              ; preds = %146, %153
  %154 = phi i32 [ %157, %153 ], [ %147, %146 ]
  %155 = phi i64 [ %156, %153 ], [ %148, %146 ]
  %156 = lshr i64 %155, 1
  %157 = add i32 %154, 1
  %158 = and i64 %155, 2
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %153, label %187, !llvm.loop !393

160:                                              ; preds = %140
  %161 = add i32 %141, 63
  %162 = and i32 %161, -64
  %163 = add i32 %143, 1
  br label %164

164:                                              ; preds = %183, %160
  %165 = phi i32 [ %162, %160 ], [ %186, %183 ]
  %166 = phi ptr [ %144, %160 ], [ %181, %183 ]
  %167 = phi i32 [ %163, %160 ], [ 0, %183 ]
  %168 = icmp eq i32 %167, 2
  br i1 %168, label %180, label %169

169:                                              ; preds = %164, %176
  %170 = phi i32 [ %177, %176 ], [ %165, %164 ]
  %171 = phi i32 [ %178, %176 ], [ %167, %164 ]
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %struct.bitmap_element_def, ptr %166, i64 0, i32 3, i64 %172
  %174 = load i64, ptr %173, align 8, !tbaa !50
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %146

176:                                              ; preds = %169
  %177 = add i32 %170, 64
  %178 = add i32 %171, 1
  %179 = icmp eq i32 %178, 2
  br i1 %179, label %180, label %169, !llvm.loop !394

180:                                              ; preds = %176, %164
  %181 = load ptr, ptr %166, align 8, !tbaa !395
  %182 = icmp eq ptr %181, null
  br i1 %182, label %204, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds %struct.bitmap_element_def, ptr %181, i64 0, i32 2
  %185 = load i32, ptr %184, align 8, !tbaa !391
  %186 = shl i32 %185, 7
  br label %164

187:                                              ; preds = %153, %146
  %188 = phi i32 [ %147, %146 ], [ %157, %153 ]
  %189 = phi i64 [ %148, %146 ], [ %156, %153 ]
  %190 = load ptr, ptr @cfun, align 8, !tbaa !5
  %191 = getelementptr inbounds %struct.function, ptr %190, i64 0, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !23
  %193 = getelementptr inbounds %struct.control_flow_graph, ptr %192, i64 0, i32 2
  %194 = load ptr, ptr %193, align 8, !tbaa !29
  %195 = zext i32 %188 to i64
  %196 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %194, i64 0, i32 2, i64 %195
  %197 = load ptr, ptr %196, align 8, !tbaa !5
  %198 = tail call ptr @get_immediate_dominator(i32 noundef 1, ptr noundef %197) #26
  %199 = getelementptr inbounds %struct.basic_block_def, ptr %198, i64 0, i32 9
  %200 = load i32, ptr %199, align 8, !tbaa !120
  %201 = tail call zeroext i8 @bitmap_set_bit(ptr noundef %58, i32 noundef %200) #26
  %202 = lshr i64 %189, 1
  %203 = add i32 %188, 1
  br label %140, !llvm.loop !396

204:                                              ; preds = %180, %60
  %205 = phi ptr [ null, %60 ], [ %66, %180 ]
  %206 = load ptr, ptr @cfgcleanup_altered_bbs, align 8, !tbaa !5
  %207 = icmp eq ptr %206, null
  br i1 %207, label %215, label %208

208:                                              ; preds = %204
  %209 = load ptr, ptr %0, align 8, !tbaa !295
  %210 = getelementptr inbounds %struct.basic_block_def, ptr %209, i64 0, i32 9
  %211 = load i32, ptr %210, align 8, !tbaa !120
  %212 = tail call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %206, i32 noundef %211) #26
  %213 = load ptr, ptr @cfgcleanup_altered_bbs, align 8, !tbaa !5
  %214 = tail call zeroext i8 @bitmap_ior_into(ptr noundef %213, ptr noundef %57) #26
  br label %215

215:                                              ; preds = %208, %204
  br i1 %35, label %217, label %216

216:                                              ; preds = %215
  tail call void @remove_edge(ptr noundef %0) #26
  br label %232

217:                                              ; preds = %215
  %218 = icmp eq ptr %205, null
  br i1 %218, label %232, label %219

219:                                              ; preds = %217
  %220 = load i32, ptr %205, align 8, !tbaa !30
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %232, label %222

222:                                              ; preds = %219
  %223 = zext i32 %220 to i64
  br label %224

224:                                              ; preds = %222, %224
  %225 = phi i64 [ %223, %222 ], [ %226, %224 ]
  %226 = add nsw i64 %225, -1
  %227 = and i64 %226, 4294967295
  %228 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %205, i64 0, i32 2, i64 %227
  %229 = load ptr, ptr %228, align 8, !tbaa !5
  tail call void @delete_basic_block(ptr noundef %229) #26
  %230 = and i64 %226, 4294967295
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %224, !llvm.loop !397

232:                                              ; preds = %224, %217, %219, %216
  %233 = load ptr, ptr %58, align 8, !tbaa !389
  %234 = icmp eq ptr %233, null
  %235 = select i1 %234, ptr @bitmap_zero_bits, ptr %233
  %236 = getelementptr inbounds %struct.bitmap_element_def, ptr %235, i64 0, i32 2
  %237 = load i32, ptr %236, align 8, !tbaa !391
  %238 = shl i32 %237, 7
  %239 = getelementptr inbounds %struct.bitmap_element_def, ptr %235, i64 0, i32 3
  %240 = load i64, ptr %239, align 8, !tbaa !50
  %241 = icmp eq i64 %240, 0
  %242 = zext i1 %241 to i32
  %243 = or i32 %238, %242
  br label %244

244:                                              ; preds = %325, %232
  %245 = phi ptr [ null, %232 ], [ %326, %325 ]
  %246 = phi i32 [ %243, %232 ], [ %328, %325 ]
  %247 = phi i64 [ %240, %232 ], [ %327, %325 ]
  %248 = phi i32 [ 0, %232 ], [ %254, %325 ]
  %249 = phi ptr [ %235, %232 ], [ %255, %325 ]
  %250 = icmp eq i64 %247, 0
  br i1 %250, label %265, label %251

251:                                              ; preds = %274, %244
  %252 = phi i32 [ %246, %244 ], [ %275, %274 ]
  %253 = phi i64 [ %247, %244 ], [ %279, %274 ]
  %254 = phi i32 [ %248, %244 ], [ %276, %274 ]
  %255 = phi ptr [ %249, %244 ], [ %271, %274 ]
  %256 = and i64 %253, 1
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %292

258:                                              ; preds = %251, %258
  %259 = phi i32 [ %262, %258 ], [ %252, %251 ]
  %260 = phi i64 [ %261, %258 ], [ %253, %251 ]
  %261 = lshr i64 %260, 1
  %262 = add i32 %259, 1
  %263 = and i64 %260, 2
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %258, label %292, !llvm.loop !393

265:                                              ; preds = %244
  %266 = add i32 %246, 63
  %267 = and i32 %266, -64
  %268 = add i32 %248, 1
  br label %269

269:                                              ; preds = %288, %265
  %270 = phi i32 [ %267, %265 ], [ %291, %288 ]
  %271 = phi ptr [ %249, %265 ], [ %286, %288 ]
  %272 = phi i32 [ %268, %265 ], [ 0, %288 ]
  %273 = icmp eq i32 %272, 2
  br i1 %273, label %285, label %274

274:                                              ; preds = %269, %281
  %275 = phi i32 [ %282, %281 ], [ %270, %269 ]
  %276 = phi i32 [ %283, %281 ], [ %272, %269 ]
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds %struct.bitmap_element_def, ptr %271, i64 0, i32 3, i64 %277
  %279 = load i64, ptr %278, align 8, !tbaa !50
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %251

281:                                              ; preds = %274
  %282 = add i32 %275, 64
  %283 = add i32 %276, 1
  %284 = icmp eq i32 %283, 2
  br i1 %284, label %285, label %274, !llvm.loop !394

285:                                              ; preds = %281, %269
  %286 = load ptr, ptr %271, align 8, !tbaa !395
  %287 = icmp eq ptr %286, null
  br i1 %287, label %329, label %288

288:                                              ; preds = %285
  %289 = getelementptr inbounds %struct.bitmap_element_def, ptr %286, i64 0, i32 2
  %290 = load i32, ptr %289, align 8, !tbaa !391
  %291 = shl i32 %290, 7
  br label %269

292:                                              ; preds = %258, %251
  %293 = phi i32 [ %252, %251 ], [ %262, %258 ]
  %294 = phi i64 [ %253, %251 ], [ %261, %258 ]
  %295 = load ptr, ptr @cfun, align 8, !tbaa !5
  %296 = getelementptr inbounds %struct.function, ptr %295, i64 0, i32 1
  %297 = load ptr, ptr %296, align 8, !tbaa !23
  %298 = getelementptr inbounds %struct.control_flow_graph, ptr %297, i64 0, i32 2
  %299 = load ptr, ptr %298, align 8, !tbaa !29
  %300 = zext i32 %293 to i64
  %301 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %299, i64 0, i32 2, i64 %300
  %302 = load ptr, ptr %301, align 8, !tbaa !5
  %303 = tail call ptr @first_dom_son(i32 noundef 1, ptr noundef %302) #26
  %304 = icmp eq ptr %303, null
  br i1 %304, label %325, label %305

305:                                              ; preds = %292, %317
  %306 = phi ptr [ %323, %317 ], [ %303, %292 ]
  %307 = phi ptr [ %318, %317 ], [ %245, %292 ]
  %308 = icmp eq ptr %307, null
  br i1 %308, label %314, label %309

309:                                              ; preds = %305
  %310 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %307, i64 0, i32 1
  %311 = load i32, ptr %310, align 4, !tbaa !32
  %312 = load i32, ptr %307, align 8, !tbaa !30
  %313 = icmp eq i32 %311, %312
  br i1 %313, label %314, label %317

314:                                              ; preds = %309, %305
  %315 = tail call ptr @vec_heap_p_reserve(ptr noundef %307, i32 noundef 1) #26
  %316 = load i32, ptr %315, align 8, !tbaa !30
  br label %317

317:                                              ; preds = %309, %314
  %318 = phi ptr [ %315, %314 ], [ %307, %309 ]
  %319 = phi i32 [ %316, %314 ], [ %312, %309 ]
  %320 = add i32 %319, 1
  store i32 %320, ptr %318, align 8, !tbaa !30
  %321 = zext i32 %319 to i64
  %322 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %318, i64 0, i32 2, i64 %321
  store ptr %306, ptr %322, align 8, !tbaa !5
  %323 = tail call ptr @next_dom_son(i32 noundef 1, ptr noundef nonnull %306) #26
  %324 = icmp eq ptr %323, null
  br i1 %324, label %325, label %305, !llvm.loop !398

325:                                              ; preds = %317, %292
  %326 = phi ptr [ %245, %292 ], [ %318, %317 ]
  %327 = lshr i64 %294, 1
  %328 = add i32 %293, 1
  br label %244, !llvm.loop !399

329:                                              ; preds = %285
  tail call void @iterate_fix_dominators(i32 noundef 1, ptr noundef %245, i8 noundef zeroext 1) #26
  tail call void @bitmap_obstack_free(ptr noundef %57) #26
  tail call void @bitmap_obstack_free(ptr noundef nonnull %58) #26
  %330 = icmp eq ptr %205, null
  br i1 %330, label %332, label %331

331:                                              ; preds = %329
  tail call void @free(ptr noundef nonnull %205)
  br label %332

332:                                              ; preds = %329, %331
  %333 = icmp eq ptr %245, null
  br i1 %333, label %335, label %334

334:                                              ; preds = %332
  tail call void @free(ptr noundef nonnull %245)
  br label %335

335:                                              ; preds = %334, %332, %24, %4
  ret void
}

declare zeroext i8 @dom_info_available_p(i32 noundef) local_unnamed_addr #3

declare ptr @bitmap_obstack_alloc_stat(ptr noundef) local_unnamed_addr #3

declare ptr @get_all_dominated_blocks(i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_clear_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_ior_into(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @delete_basic_block(ptr noundef) local_unnamed_addr #3

declare void @bitmap_obstack_free(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @gimple_purge_all_dead_eh_edges(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !389
  %3 = icmp eq ptr %2, null
  %4 = select i1 %3, ptr @bitmap_zero_bits, ptr %2
  %5 = getelementptr inbounds %struct.bitmap_element_def, ptr %4, i64 0, i32 2
  %6 = load i32, ptr %5, align 8, !tbaa !391
  %7 = shl i32 %6, 7
  %8 = getelementptr inbounds %struct.bitmap_element_def, ptr %4, i64 0, i32 3
  %9 = load i64, ptr %8, align 8, !tbaa !50
  %10 = icmp eq i64 %9, 0
  %11 = zext i1 %10 to i32
  %12 = or i32 %7, %11
  br label %13

13:                                               ; preds = %80, %1
  %14 = phi i64 [ %9, %1 ], [ %82, %80 ]
  %15 = phi i32 [ 0, %1 ], [ %22, %80 ]
  %16 = phi i32 [ %12, %1 ], [ %83, %80 ]
  %17 = phi ptr [ %4, %1 ], [ %24, %80 ]
  %18 = phi i8 [ 0, %1 ], [ %81, %80 ]
  %19 = icmp eq i64 %14, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %43, %13
  %21 = phi i64 [ %14, %13 ], [ %48, %43 ]
  %22 = phi i32 [ %15, %13 ], [ %44, %43 ]
  %23 = phi i32 [ %16, %13 ], [ %45, %43 ]
  %24 = phi ptr [ %17, %13 ], [ %40, %43 ]
  %25 = and i64 %21, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %61

27:                                               ; preds = %20, %27
  %28 = phi i32 [ %31, %27 ], [ %23, %20 ]
  %29 = phi i64 [ %30, %27 ], [ %21, %20 ]
  %30 = lshr i64 %29, 1
  %31 = add i32 %28, 1
  %32 = and i64 %29, 2
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %27, label %61, !llvm.loop !393

34:                                               ; preds = %13
  %35 = add i32 %16, 63
  %36 = and i32 %35, -64
  %37 = add i32 %15, 1
  br label %38

38:                                               ; preds = %57, %34
  %39 = phi i32 [ %36, %34 ], [ %60, %57 ]
  %40 = phi ptr [ %17, %34 ], [ %55, %57 ]
  %41 = phi i32 [ %37, %34 ], [ 0, %57 ]
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %54, label %43

43:                                               ; preds = %38, %50
  %44 = phi i32 [ %52, %50 ], [ %41, %38 ]
  %45 = phi i32 [ %51, %50 ], [ %39, %38 ]
  %46 = zext i32 %44 to i64
  %47 = getelementptr inbounds %struct.bitmap_element_def, ptr %40, i64 0, i32 3, i64 %46
  %48 = load i64, ptr %47, align 8, !tbaa !50
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %20

50:                                               ; preds = %43
  %51 = add i32 %45, 64
  %52 = add i32 %44, 1
  %53 = icmp eq i32 %52, 2
  br i1 %53, label %54, label %43, !llvm.loop !394

54:                                               ; preds = %50, %38
  %55 = load ptr, ptr %40, align 8, !tbaa !395
  %56 = icmp eq ptr %55, null
  br i1 %56, label %84, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.bitmap_element_def, ptr %55, i64 0, i32 2
  %59 = load i32, ptr %58, align 8, !tbaa !391
  %60 = shl i32 %59, 7
  br label %38

61:                                               ; preds = %27, %20
  %62 = phi i64 [ %21, %20 ], [ %30, %27 ]
  %63 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %64 = load ptr, ptr @cfun, align 8, !tbaa !5
  %65 = getelementptr inbounds %struct.function, ptr %64, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !23
  %67 = getelementptr inbounds %struct.control_flow_graph, ptr %66, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !29
  %69 = zext i32 %63 to i64
  %70 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %68, i64 0, i32 2, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !5
  %72 = icmp ne ptr %71, null
  %73 = icmp ne i8 %18, 0
  %74 = select i1 %72, i1 true, i1 %73
  br i1 %74, label %76, label %75

75:                                               ; preds = %61
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6844, ptr noundef nonnull @.str.2) #26
  br label %80

76:                                               ; preds = %61
  br i1 %72, label %77, label %80

77:                                               ; preds = %76
  %78 = tail call zeroext i8 @gimple_purge_dead_eh_edges(ptr noundef nonnull %71), !range !268
  %79 = or i8 %78, %18
  br label %80

80:                                               ; preds = %75, %77, %76
  %81 = phi i8 [ %79, %77 ], [ %18, %76 ], [ 0, %75 ]
  %82 = lshr i64 %62, 1
  %83 = add i32 %63, 1
  br label %13, !llvm.loop !400

84:                                               ; preds = %54
  ret i8 %18
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @gimple_verify_flow_info() #9 {
  %1 = alloca %struct.gimple_stmt_iterator, align 8
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = load ptr, ptr @cfun, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.function, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !23
  %7 = load ptr, ptr %6, align 8, !tbaa !34
  %8 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %0
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.155) #26
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !23
  br label %15

15:                                               ; preds = %11, %0
  %16 = phi ptr [ %14, %11 ], [ %6, %0 ]
  %17 = phi i32 [ 1, %11 ], [ 0, %0 ]
  %18 = getelementptr inbounds %struct.control_flow_graph, ptr %16, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !35
  %20 = getelementptr inbounds %struct.basic_block_def, ptr %19, i64 0, i32 7
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = icmp eq ptr %21, null
  br i1 %22, label %30, label %23

23:                                               ; preds = %15
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.156) #26
  %24 = load ptr, ptr @cfun, align 8, !tbaa !5
  %25 = getelementptr inbounds %struct.function, ptr %24, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !23
  %27 = getelementptr inbounds %struct.control_flow_graph, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !35
  %29 = icmp eq ptr %28, null
  br i1 %29, label %67, label %30

30:                                               ; preds = %15, %23
  %31 = phi i32 [ 1, %23 ], [ %17, %15 ]
  %32 = phi ptr [ %28, %23 ], [ %19, %15 ]
  br label %33

33:                                               ; preds = %30, %64
  %34 = phi i32 [ %66, %64 ], [ 0, %30 ]
  %35 = phi i32 [ %65, %64 ], [ %31, %30 ]
  %36 = load ptr, ptr %32, align 8, !tbaa !5
  %37 = icmp eq ptr %36, null
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = load i32, ptr %36, align 8, !tbaa !106
  br label %40

40:                                               ; preds = %38, %33
  %41 = phi i32 [ %39, %38 ], [ 0, %33 ]
  %42 = icmp eq i32 %41, %34
  br i1 %42, label %68, label %43

43:                                               ; preds = %40
  %44 = zext i32 %34 to i64
  %45 = getelementptr inbounds %struct.VEC_edge_base, ptr %36, i64 0, i32 2, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !5
  %47 = getelementptr inbounds %struct.edge_def, ptr %46, i64 0, i32 7
  %48 = load i32, ptr %47, align 8, !tbaa !108
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %57, label %51

51:                                               ; preds = %43
  %52 = load ptr, ptr %46, align 8, !tbaa !295
  %53 = getelementptr inbounds %struct.basic_block_def, ptr %52, i64 0, i32 9
  %54 = load i32, ptr %53, align 8, !tbaa !120
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.157, i32 noundef %54) #26
  %55 = load ptr, ptr %32, align 8, !tbaa !5
  %56 = icmp eq ptr %55, null
  br i1 %56, label %62, label %57

57:                                               ; preds = %43, %51
  %58 = phi i32 [ 1, %51 ], [ %35, %43 ]
  %59 = phi ptr [ %55, %51 ], [ %36, %43 ]
  %60 = load i32, ptr %59, align 8, !tbaa !106
  %61 = icmp ult i32 %34, %60
  br i1 %61, label %64, label %62

62:                                               ; preds = %57, %51
  %63 = phi i32 [ %58, %57 ], [ 1, %51 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %64

64:                                               ; preds = %57, %62
  %65 = phi i32 [ %58, %57 ], [ %63, %62 ]
  %66 = add i32 %34, 1
  br label %33, !llvm.loop !401

67:                                               ; preds = %23
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 687, ptr noundef nonnull @.str.2) #26
  br label %68

68:                                               ; preds = %40, %67
  %69 = phi i32 [ 1, %67 ], [ %35, %40 ]
  %70 = load ptr, ptr @cfun, align 8, !tbaa !5
  %71 = getelementptr inbounds %struct.function, ptr %70, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !23
  %73 = load ptr, ptr %72, align 8, !tbaa !34
  %74 = getelementptr inbounds %struct.basic_block_def, ptr %73, i64 0, i32 6
  %75 = load ptr, ptr %74, align 8, !tbaa !36
  %76 = getelementptr inbounds %struct.control_flow_graph, ptr %72, i64 0, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !35
  %78 = icmp eq ptr %75, %77
  br i1 %78, label %905, label %79

79:                                               ; preds = %68
  %80 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  %81 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  %82 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 1
  %83 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %2, i64 0, i32 2
  %84 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %1, i64 0, i32 1
  %85 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %1, i64 0, i32 2
  br label %86

86:                                               ; preds = %79, %895
  %87 = phi ptr [ %75, %79 ], [ %898, %895 ]
  %88 = phi i32 [ %69, %79 ], [ %896, %895 ]
  %89 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 13
  %90 = load i32, ptr %89, align 8, !tbaa !58, !noalias !402
  %91 = and i32 %90, 512
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %294

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 7
  %95 = load ptr, ptr %94, align 8, !tbaa !16, !noalias !402
  %96 = icmp eq ptr %95, null
  br i1 %96, label %294, label %97

97:                                               ; preds = %93
  %98 = load ptr, ptr %95, align 8, !tbaa !59, !noalias !402
  %99 = icmp eq ptr %98, null
  br i1 %99, label %294, label %100

100:                                              ; preds = %97
  %101 = load ptr, ptr %98, align 8, !tbaa !42, !noalias !402
  %102 = icmp eq ptr %101, null
  br i1 %102, label %294, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %105

105:                                              ; preds = %103, %218
  %106 = phi i32 [ %88, %103 ], [ %219, %218 ]
  %107 = phi ptr [ null, %103 ], [ %109, %218 ]
  %108 = phi ptr [ %101, %103 ], [ %221, %218 ]
  %109 = load ptr, ptr %108, align 8, !tbaa !47
  %110 = load i32, ptr %109, align 8
  %111 = and i32 %110, 255
  %112 = icmp eq i32 %111, 4
  br i1 %112, label %113, label %223

113:                                              ; preds = %105
  %114 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %115
  %117 = load i64, ptr %116, align 8, !tbaa !50
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %113
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %120

120:                                              ; preds = %113, %119
  %121 = getelementptr inbounds i8, ptr %109, i64 %117
  %122 = load ptr, ptr %121, align 8, !tbaa !5
  %123 = icmp eq ptr %107, null
  br i1 %123, label %144, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds %struct.tree_decl_common, ptr %122, i64 0, i32 2
  %126 = load i64, ptr %125, align 8
  %127 = and i64 %126, 256
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %134, label %129

129:                                              ; preds = %124
  call void (ptr, ...) @error(ptr noundef nonnull @.str.158) #26
  %130 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %130, ptr noundef nonnull %122, i32 noundef 0) #26
  %131 = load ptr, ptr @stderr, align 8, !tbaa !5
  %132 = load i32, ptr %104, align 8, !tbaa !120
  %133 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %131, ptr noundef nonnull @.str.159, i32 noundef %132) #28
  br label %134

134:                                              ; preds = %129, %124
  %135 = phi i32 [ %106, %124 ], [ 1, %129 ]
  %136 = getelementptr inbounds %struct.tree_label_decl, ptr %122, i64 0, i32 2
  %137 = load i32, ptr %136, align 4, !tbaa !16
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %134
  call void (ptr, ...) @error(ptr noundef nonnull @.str.160) #26
  %140 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %140, ptr noundef nonnull %122, i32 noundef 0) #26
  %141 = load ptr, ptr @stderr, align 8, !tbaa !5
  %142 = load i32, ptr %104, align 8, !tbaa !120
  %143 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %141, ptr noundef nonnull @.str.159, i32 noundef %142) #28
  br label %144

144:                                              ; preds = %120, %139, %134
  %145 = phi i32 [ 1, %139 ], [ %135, %134 ], [ %106, %120 ]
  %146 = load ptr, ptr @cfun, align 8, !tbaa !5
  %147 = getelementptr inbounds %struct.tree_label_decl, ptr %122, i64 0, i32 1
  %148 = load i32, ptr %147, align 8, !tbaa !16
  %149 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %150 = getelementptr inbounds %struct.diagnostic_context, ptr %149, i64 0, i32 1, i64 4
  %151 = load i32, ptr %150, align 8, !tbaa !20
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %159

153:                                              ; preds = %144
  %154 = getelementptr inbounds %struct.diagnostic_context, ptr %149, i64 0, i32 1, i64 5
  %155 = load i32, ptr %154, align 4, !tbaa !20
  %156 = icmp ne i32 %155, 0
  %157 = icmp slt i32 %148, 0
  %158 = select i1 %156, i1 %157, i1 false
  br i1 %158, label %161, label %186

159:                                              ; preds = %144
  %160 = icmp slt i32 %148, 0
  br i1 %160, label %161, label %186

161:                                              ; preds = %159, %153
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %162 = getelementptr inbounds %struct.function, ptr %146, i64 0, i32 1
  %163 = load ptr, ptr %162, align 8, !tbaa !23
  %164 = getelementptr inbounds %struct.control_flow_graph, ptr %163, i64 0, i32 2
  %165 = load ptr, ptr %164, align 8, !tbaa !29
  %166 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %165, i64 0, i32 2, i64 2
  %167 = load ptr, ptr %166, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !405)
  %168 = getelementptr inbounds %struct.basic_block_def, ptr %167, i64 0, i32 13
  %169 = load i32, ptr %168, align 8, !tbaa !58, !noalias !405
  %170 = and i32 %169, 512
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %181

172:                                              ; preds = %161
  %173 = getelementptr inbounds %struct.basic_block_def, ptr %167, i64 0, i32 7
  %174 = load ptr, ptr %173, align 8, !tbaa !16, !noalias !405
  %175 = icmp eq ptr %174, null
  br i1 %175, label %181, label %176

176:                                              ; preds = %172
  %177 = load ptr, ptr %174, align 8, !tbaa !59, !noalias !405
  %178 = icmp eq ptr %177, null
  br i1 %178, label %181, label %179

179:                                              ; preds = %176
  %180 = load ptr, ptr %177, align 8, !tbaa !42, !noalias !405
  br label %181

181:                                              ; preds = %179, %176, %172, %161
  %182 = phi ptr [ %177, %179 ], [ null, %176 ], [ null, %172 ], [ null, %161 ]
  %183 = phi ptr [ %180, %179 ], [ null, %176 ], [ null, %172 ], [ null, %161 ]
  store ptr %183, ptr %3, align 8, !tbaa !44, !alias.scope !405
  store ptr %182, ptr %80, align 8, !tbaa !46, !alias.scope !405
  store ptr %167, ptr %81, align 8, !tbaa !49, !alias.scope !405
  %184 = call ptr @gimple_build_label(ptr noundef nonnull %122) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %184, i32 noundef 0) #26
  %185 = load i32, ptr %147, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %186

186:                                              ; preds = %181, %159, %153
  %187 = phi i32 [ %185, %181 ], [ %148, %159 ], [ %148, %153 ]
  %188 = getelementptr inbounds %struct.function, ptr %146, i64 0, i32 1
  %189 = load ptr, ptr %188, align 8, !tbaa !23
  %190 = getelementptr inbounds %struct.control_flow_graph, ptr %189, i64 0, i32 6
  %191 = load ptr, ptr %190, align 8, !tbaa !33
  %192 = icmp eq ptr %191, null
  br i1 %192, label %200, label %193

193:                                              ; preds = %186
  %194 = load i32, ptr %191, align 8, !tbaa !30
  %195 = icmp ugt i32 %194, %187
  br i1 %195, label %196, label %200

196:                                              ; preds = %193
  %197 = zext i32 %187 to i64
  %198 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %191, i64 0, i32 2, i64 %197
  %199 = load ptr, ptr %198, align 8, !tbaa !5
  br label %200

200:                                              ; preds = %186, %193, %196
  %201 = phi ptr [ %199, %196 ], [ null, %193 ], [ null, %186 ]
  %202 = icmp eq ptr %201, %87
  br i1 %202, label %208, label %203

203:                                              ; preds = %200
  call void (ptr, ...) @error(ptr noundef nonnull @.str.161) #26
  %204 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %204, ptr noundef nonnull %122, i32 noundef 0) #26
  %205 = load ptr, ptr @stderr, align 8, !tbaa !5
  %206 = load i32, ptr %104, align 8, !tbaa !120
  %207 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %205, ptr noundef nonnull @.str.162, i32 noundef %206) #28
  br label %208

208:                                              ; preds = %203, %200
  %209 = phi i32 [ 1, %203 ], [ %145, %200 ]
  %210 = call ptr @decl_function_context(ptr noundef nonnull %122) #26
  %211 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %212 = icmp eq ptr %210, %211
  br i1 %212, label %218, label %213

213:                                              ; preds = %208
  call void (ptr, ...) @error(ptr noundef nonnull @.str.161) #26
  %214 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %214, ptr noundef nonnull %122, i32 noundef 0) #26
  %215 = load ptr, ptr @stderr, align 8, !tbaa !5
  %216 = load i32, ptr %104, align 8, !tbaa !120
  %217 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %215, ptr noundef nonnull @.str.163, i32 noundef %216) #28
  br label %218

218:                                              ; preds = %213, %208
  %219 = phi i32 [ %209, %208 ], [ 1, %213 ]
  %220 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %108, i64 0, i32 2
  %221 = load ptr, ptr %220, align 8, !tbaa !53
  %222 = icmp eq ptr %221, null
  br i1 %222, label %294, label %105, !llvm.loop !408

223:                                              ; preds = %105
  %224 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %225

225:                                              ; preds = %223, %289
  %226 = phi i32 [ %106, %223 ], [ %290, %289 ]
  %227 = phi i8 [ 0, %223 ], [ %262, %289 ]
  %228 = phi ptr [ %108, %223 ], [ %292, %289 ]
  %229 = load ptr, ptr %228, align 8, !tbaa !47
  %230 = icmp eq i8 %227, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %225
  %232 = load i32, ptr %224, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.164, i32 noundef %232) #26
  br label %233

233:                                              ; preds = %231, %225
  %234 = phi i32 [ 1, %231 ], [ %226, %225 ]
  %235 = load i32, ptr %229, align 8
  %236 = trunc i32 %235 to i8
  switch i8 %236, label %256 [
    i8 1, label %261
    i8 5, label %261
    i8 3, label %261
    i8 9, label %261
    i8 14, label %261
    i8 8, label %237
    i8 15, label %261
    i8 7, label %252
    i8 26, label %261
    i8 27, label %261
    i8 23, label %261
    i8 30, label %261
    i8 31, label %261
    i8 32, label %261
    i8 29, label %261
    i8 24, label %261
    i8 25, label %261
    i8 22, label %261
    i8 28, label %261
    i8 19, label %261
    i8 20, label %261
    i8 21, label %261
  ]

237:                                              ; preds = %233
  %238 = call i32 @gimple_call_flags(ptr noundef nonnull %229) #26
  %239 = and i32 %238, 3
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %249

241:                                              ; preds = %237
  %242 = load ptr, ptr @cfun, align 8, !tbaa !5
  %243 = getelementptr inbounds %struct.function, ptr %242, i64 0, i32 20
  %244 = load i32, ptr %243, align 8
  %245 = and i32 %244, 1048576
  %246 = and i32 %238, 8
  %247 = or i32 %245, %246
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %256, label %261

249:                                              ; preds = %237
  %250 = and i32 %238, 8
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %256, label %261

252:                                              ; preds = %233
  %253 = getelementptr i8, ptr %229, i64 75
  %254 = load i8, ptr %253, align 1, !tbaa !16
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %256, label %261

256:                                              ; preds = %233, %241, %249, %252
  %257 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %229) #26
  %258 = freeze i8 %257
  %259 = icmp eq i8 %258, 0
  %260 = select i1 %259, i8 %227, i8 1
  br label %261

261:                                              ; preds = %256, %249, %241, %252, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233, %233
  %262 = phi i8 [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %233 ], [ 1, %252 ], [ 1, %241 ], [ 1, %249 ], [ %260, %256 ]
  %263 = load i32, ptr %229, align 8
  %264 = and i32 %263, 255
  %265 = icmp eq i32 %264, 4
  br i1 %265, label %266, label %289

266:                                              ; preds = %261
  call void (ptr, ...) @error(ptr noundef nonnull @.str.161) #26
  %267 = load ptr, ptr @stderr, align 8, !tbaa !5
  %268 = load i32, ptr %229, align 8
  %269 = and i32 %268, 255
  %270 = add nsw i32 %269, -10
  %271 = icmp ult i32 %270, -9
  br i1 %271, label %284, label %272

272:                                              ; preds = %266
  %273 = zext i32 %269 to i64
  %274 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %273
  %275 = load i32, ptr %274, align 4, !tbaa !16
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %276
  %278 = load i64, ptr %277, align 8, !tbaa !50
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %281

280:                                              ; preds = %272
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %281

281:                                              ; preds = %280, %272
  %282 = getelementptr inbounds i8, ptr %229, i64 %278
  %283 = load ptr, ptr %282, align 8, !tbaa !5
  br label %284

284:                                              ; preds = %266, %281
  %285 = phi ptr [ %283, %281 ], [ null, %266 ]
  call void @print_generic_expr(ptr noundef %267, ptr noundef %285, i32 noundef 0) #26
  %286 = load ptr, ptr @stderr, align 8, !tbaa !5
  %287 = load i32, ptr %224, align 8, !tbaa !120
  %288 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %286, ptr noundef nonnull @.str.165, i32 noundef %287) #28
  br label %289

289:                                              ; preds = %284, %261
  %290 = phi i32 [ 1, %284 ], [ %234, %261 ]
  %291 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %228, i64 0, i32 2
  %292 = load ptr, ptr %291, align 8, !tbaa !53
  %293 = icmp eq ptr %292, null
  br i1 %293, label %294, label %225, !llvm.loop !409

294:                                              ; preds = %218, %289, %86, %93, %97, %100
  %295 = phi i32 [ %88, %100 ], [ %88, %97 ], [ %88, %93 ], [ %88, %86 ], [ %290, %289 ], [ %219, %218 ]
  %296 = load i32, ptr %89, align 8, !tbaa !58, !noalias !410
  %297 = and i32 %296, 512
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %895

299:                                              ; preds = %294
  %300 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 7
  %301 = load ptr, ptr %300, align 8, !tbaa !16, !noalias !410
  %302 = icmp eq ptr %301, null
  br i1 %302, label %895, label %303

303:                                              ; preds = %299
  %304 = load ptr, ptr %301, align 8, !tbaa !59, !noalias !410
  %305 = icmp eq ptr %304, null
  br i1 %305, label %895, label %306

306:                                              ; preds = %303
  %307 = getelementptr inbounds %struct.gimple_seq_d, ptr %304, i64 0, i32 1
  %308 = load ptr, ptr %307, align 8, !tbaa !61, !noalias !410
  %309 = icmp eq ptr %308, null
  br i1 %309, label %895, label %310

310:                                              ; preds = %306
  %311 = load ptr, ptr %308, align 8, !tbaa !47
  %312 = load i32, ptr %311, align 8
  %313 = and i32 %312, 255
  %314 = icmp eq i32 %313, 4
  br i1 %314, label %895, label %315

315:                                              ; preds = %310
  %316 = call zeroext i8 @verify_eh_edges(ptr noundef nonnull %311) #26
  %317 = zext i8 %316 to i32
  %318 = or i32 %295, %317
  %319 = load i32, ptr %311, align 8
  %320 = trunc i32 %319 to i8
  switch i8 %320, label %358 [
    i8 1, label %321
    i8 5, label %321
    i8 3, label %321
    i8 9, label %321
    i8 14, label %321
  ]

321:                                              ; preds = %315, %315, %315, %315, %315
  %322 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 1
  %323 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %324

324:                                              ; preds = %321, %353
  %325 = phi i32 [ 0, %321 ], [ %355, %353 ]
  %326 = phi i32 [ %318, %321 ], [ %354, %353 ]
  %327 = load ptr, ptr %322, align 8, !tbaa !5
  %328 = icmp eq ptr %327, null
  br i1 %328, label %331, label %329

329:                                              ; preds = %324
  %330 = load i32, ptr %327, align 8, !tbaa !106
  br label %331

331:                                              ; preds = %329, %324
  %332 = phi i32 [ %330, %329 ], [ 0, %324 ]
  %333 = icmp eq i32 %332, %325
  br i1 %333, label %356, label %334

334:                                              ; preds = %331
  %335 = zext i32 %325 to i64
  %336 = getelementptr inbounds %struct.VEC_edge_base, ptr %327, i64 0, i32 2, i64 %335
  %337 = load ptr, ptr %336, align 8, !tbaa !5
  %338 = getelementptr inbounds %struct.edge_def, ptr %337, i64 0, i32 7
  %339 = load i32, ptr %338, align 8, !tbaa !108
  %340 = and i32 %339, 1
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %346, label %342

342:                                              ; preds = %334
  %343 = load i32, ptr %323, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.166, i32 noundef %343) #26
  %344 = load ptr, ptr %322, align 8, !tbaa !5
  %345 = icmp eq ptr %344, null
  br i1 %345, label %351, label %346

346:                                              ; preds = %334, %342
  %347 = phi i32 [ 1, %342 ], [ %326, %334 ]
  %348 = phi ptr [ %344, %342 ], [ %327, %334 ]
  %349 = load i32, ptr %348, align 8, !tbaa !106
  %350 = icmp ult i32 %325, %349
  br i1 %350, label %353, label %351

351:                                              ; preds = %346, %342
  %352 = phi i32 [ %347, %346 ], [ 1, %342 ]
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %353

353:                                              ; preds = %346, %351
  %354 = phi i32 [ %347, %346 ], [ %352, %351 ]
  %355 = add i32 %325, 1
  br label %324, !llvm.loop !413

356:                                              ; preds = %331
  %357 = load i32, ptr %311, align 8
  br label %358

358:                                              ; preds = %356, %315
  %359 = phi i32 [ %319, %315 ], [ %357, %356 ]
  %360 = phi i32 [ %318, %315 ], [ %326, %356 ]
  %361 = and i32 %359, 255
  %362 = icmp eq i32 %361, 1
  br i1 %362, label %400, label %363

363:                                              ; preds = %358
  %364 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 1
  %365 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %366

366:                                              ; preds = %363, %395
  %367 = phi i32 [ 0, %363 ], [ %397, %395 ]
  %368 = phi i32 [ %360, %363 ], [ %396, %395 ]
  %369 = load ptr, ptr %364, align 8, !tbaa !5
  %370 = icmp eq ptr %369, null
  br i1 %370, label %373, label %371

371:                                              ; preds = %366
  %372 = load i32, ptr %369, align 8, !tbaa !106
  br label %373

373:                                              ; preds = %371, %366
  %374 = phi i32 [ %372, %371 ], [ 0, %366 ]
  %375 = icmp eq i32 %374, %367
  br i1 %375, label %398, label %376

376:                                              ; preds = %373
  %377 = zext i32 %367 to i64
  %378 = getelementptr inbounds %struct.VEC_edge_base, ptr %369, i64 0, i32 2, i64 %377
  %379 = load ptr, ptr %378, align 8, !tbaa !5
  %380 = getelementptr inbounds %struct.edge_def, ptr %379, i64 0, i32 7
  %381 = load i32, ptr %380, align 8, !tbaa !108
  %382 = and i32 %381, 3072
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %388, label %384

384:                                              ; preds = %376
  %385 = load i32, ptr %365, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.167, i32 noundef %385) #26
  %386 = load ptr, ptr %364, align 8, !tbaa !5
  %387 = icmp eq ptr %386, null
  br i1 %387, label %393, label %388

388:                                              ; preds = %376, %384
  %389 = phi i32 [ 1, %384 ], [ %368, %376 ]
  %390 = phi ptr [ %386, %384 ], [ %369, %376 ]
  %391 = load i32, ptr %390, align 8, !tbaa !106
  %392 = icmp ult i32 %367, %391
  br i1 %392, label %395, label %393

393:                                              ; preds = %388, %384
  %394 = phi i32 [ %389, %388 ], [ 1, %384 ]
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %395

395:                                              ; preds = %388, %393
  %396 = phi i32 [ %389, %388 ], [ %394, %393 ]
  %397 = add i32 %367, 1
  br label %366, !llvm.loop !414

398:                                              ; preds = %373
  %399 = load i32, ptr %311, align 8
  br label %400

400:                                              ; preds = %398, %358
  %401 = phi i32 [ %359, %358 ], [ %399, %398 ]
  %402 = phi i32 [ %360, %358 ], [ %368, %398 ]
  %403 = and i32 %401, 255
  %404 = add nsw i32 %403, -1
  %405 = call i32 @llvm.fshl.i32(i32 %404, i32 %404, i32 31)
  switch i32 %405, label %895 [
    i32 0, label %406
    i32 1, label %441
    i32 4, label %494
    i32 2, label %537
    i32 7, label %891
  ]

406:                                              ; preds = %400
  %407 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 1
  %408 = load ptr, ptr %407, align 8, !tbaa !105
  %409 = getelementptr inbounds %struct.VEC_edge_base, ptr %408, i64 0, i32 2, i64 0
  %410 = load ptr, ptr %409, align 8, !tbaa !5
  %411 = getelementptr inbounds %struct.edge_def, ptr %410, i64 0, i32 7
  %412 = load i32, ptr %411, align 8, !tbaa !108
  %413 = and i32 %412, 1024
  %414 = icmp eq i32 %413, 0
  %415 = getelementptr inbounds %struct.VEC_edge_base, ptr %408, i64 0, i32 2, i64 1
  %416 = load ptr, ptr %415, align 8, !tbaa !5
  %417 = select i1 %414, ptr %416, ptr %410
  %418 = select i1 %414, ptr %410, ptr %416
  %419 = icmp ne ptr %417, null
  %420 = icmp ne ptr %418, null
  %421 = select i1 %419, i1 %420, i1 false
  br i1 %421, label %422, label %438

422:                                              ; preds = %406
  %423 = getelementptr inbounds %struct.edge_def, ptr %417, i64 0, i32 7
  %424 = load i32, ptr %423, align 8, !tbaa !108
  %425 = and i32 %424, 1024
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %438, label %427

427:                                              ; preds = %422
  %428 = getelementptr inbounds %struct.edge_def, ptr %418, i64 0, i32 7
  %429 = load i32, ptr %428, align 8, !tbaa !108
  %430 = and i32 %424, 3
  %431 = icmp eq i32 %430, 0
  %432 = and i32 %429, 2051
  %433 = icmp eq i32 %432, 2048
  %434 = and i1 %431, %433
  br i1 %434, label %435, label %438

435:                                              ; preds = %427
  %436 = load i32, ptr %408, align 8, !tbaa !106
  %437 = icmp ugt i32 %436, 2
  br i1 %437, label %438, label %895

438:                                              ; preds = %435, %427, %422, %406
  %439 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  %440 = load i32, ptr %439, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.168, i32 noundef %440) #26
  br label %895

441:                                              ; preds = %400
  %442 = icmp eq i32 %403, 3
  br i1 %442, label %443, label %459

443:                                              ; preds = %441
  %444 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 3), align 4, !tbaa !16
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %445
  %447 = load i64, ptr %446, align 8, !tbaa !50
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %449, label %450

449:                                              ; preds = %443
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %450

450:                                              ; preds = %443, %449
  %451 = getelementptr inbounds i8, ptr %311, i64 %447
  %452 = load ptr, ptr %451, align 8, !tbaa !5
  %453 = load i64, ptr %452, align 8
  %454 = and i64 %453, 65535
  %455 = icmp eq i64 %454, 30
  br i1 %455, label %456, label %459

456:                                              ; preds = %450
  %457 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  %458 = load i32, ptr %457, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.169, i32 noundef %458) #26
  br label %895

459:                                              ; preds = %441, %450
  %460 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 1
  %461 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %462

462:                                              ; preds = %459, %491
  %463 = phi i32 [ 0, %459 ], [ %493, %491 ]
  %464 = phi i32 [ %402, %459 ], [ %492, %491 ]
  %465 = load ptr, ptr %460, align 8, !tbaa !5
  %466 = icmp eq ptr %465, null
  br i1 %466, label %469, label %467

467:                                              ; preds = %462
  %468 = load i32, ptr %465, align 8, !tbaa !106
  br label %469

469:                                              ; preds = %467, %462
  %470 = phi i32 [ %468, %467 ], [ 0, %462 ]
  %471 = icmp eq i32 %470, %463
  br i1 %471, label %895, label %472

472:                                              ; preds = %469
  %473 = zext i32 %463 to i64
  %474 = getelementptr inbounds %struct.VEC_edge_base, ptr %465, i64 0, i32 2, i64 %473
  %475 = load ptr, ptr %474, align 8, !tbaa !5
  %476 = getelementptr inbounds %struct.edge_def, ptr %475, i64 0, i32 7
  %477 = load i32, ptr %476, align 8, !tbaa !108
  %478 = and i32 %477, 3075
  %479 = icmp eq i32 %478, 2
  br i1 %479, label %484, label %480

480:                                              ; preds = %472
  %481 = load i32, ptr %461, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.168, i32 noundef %481) #26
  %482 = load ptr, ptr %460, align 8, !tbaa !5
  %483 = icmp eq ptr %482, null
  br i1 %483, label %489, label %484

484:                                              ; preds = %472, %480
  %485 = phi i32 [ 1, %480 ], [ %464, %472 ]
  %486 = phi ptr [ %482, %480 ], [ %465, %472 ]
  %487 = load i32, ptr %486, align 8, !tbaa !106
  %488 = icmp ult i32 %463, %487
  br i1 %488, label %491, label %489

489:                                              ; preds = %484, %480
  %490 = phi i32 [ %485, %484 ], [ 1, %480 ]
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %491

491:                                              ; preds = %484, %489
  %492 = phi i32 [ %485, %484 ], [ %490, %489 ]
  %493 = add i32 %463, 1
  br label %462, !llvm.loop !415

494:                                              ; preds = %400
  %495 = getelementptr i8, ptr %87, i64 8
  %496 = load ptr, ptr %495, align 8, !tbaa !105
  %497 = icmp eq ptr %496, null
  br i1 %497, label %508, label %498

498:                                              ; preds = %494
  %499 = load i32, ptr %496, align 8, !tbaa !106
  %500 = icmp eq i32 %499, 1
  br i1 %500, label %501, label %508

501:                                              ; preds = %498
  %502 = getelementptr inbounds %struct.VEC_edge_base, ptr %496, i64 0, i32 2, i64 0
  %503 = load ptr, ptr %502, align 8, !tbaa !5
  %504 = getelementptr inbounds %struct.edge_def, ptr %503, i64 0, i32 7
  %505 = load i32, ptr %504, align 8, !tbaa !108
  %506 = and i32 %505, 3075
  %507 = icmp eq i32 %506, 0
  br i1 %507, label %513, label %508

508:                                              ; preds = %498, %501, %494
  %509 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  %510 = load i32, ptr %509, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.168, i32 noundef %510) #26
  %511 = load ptr, ptr %495, align 8, !tbaa !105
  %512 = icmp eq ptr %511, null
  br i1 %512, label %518, label %513

513:                                              ; preds = %501, %508
  %514 = phi i32 [ 1, %508 ], [ %402, %501 ]
  %515 = phi ptr [ %511, %508 ], [ %496, %501 ]
  %516 = load i32, ptr %515, align 8, !tbaa !106
  %517 = icmp eq i32 %516, 1
  br i1 %517, label %521, label %518

518:                                              ; preds = %513, %508
  %519 = phi i32 [ %514, %513 ], [ 1, %508 ]
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %520 = load ptr, ptr %495, align 8, !tbaa !105
  br label %521

521:                                              ; preds = %513, %518
  %522 = phi i32 [ %514, %513 ], [ %519, %518 ]
  %523 = phi ptr [ %515, %513 ], [ %520, %518 ]
  %524 = getelementptr inbounds %struct.VEC_edge_base, ptr %523, i64 0, i32 2, i64 0
  %525 = load ptr, ptr %524, align 8, !tbaa !5
  %526 = getelementptr inbounds %struct.edge_def, ptr %525, i64 0, i32 1
  %527 = load ptr, ptr %526, align 8, !tbaa !109
  %528 = load ptr, ptr @cfun, align 8, !tbaa !5
  %529 = getelementptr inbounds %struct.function, ptr %528, i64 0, i32 1
  %530 = load ptr, ptr %529, align 8, !tbaa !23
  %531 = getelementptr inbounds %struct.control_flow_graph, ptr %530, i64 0, i32 1
  %532 = load ptr, ptr %531, align 8, !tbaa !35
  %533 = icmp eq ptr %527, %532
  br i1 %533, label %895, label %534

534:                                              ; preds = %521
  %535 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  %536 = load i32, ptr %535, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.170, i32 noundef %536) #26
  br label %895

537:                                              ; preds = %400
  %538 = getelementptr i8, ptr %311, i64 12
  %539 = load i32, ptr %538, align 4, !tbaa !16
  %540 = icmp ugt i32 %539, 1
  br i1 %540, label %541, label %543

541:                                              ; preds = %537
  %542 = add i32 %539, -1
  br label %546

543:                                              ; preds = %537
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %544 = add nsw i32 %539, -1
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %640, label %546

546:                                              ; preds = %541, %543
  %547 = phi i32 [ %542, %541 ], [ %544, %543 ]
  %548 = phi i32 [ %542, %541 ], [ -1, %543 ]
  %549 = zext i32 %547 to i64
  br label %550

550:                                              ; preds = %546, %637
  %551 = phi i64 [ %638, %637 ], [ 0, %546 ]
  %552 = trunc i64 %551 to i32
  %553 = load i32, ptr %538, align 4, !tbaa !16
  %554 = add i32 %552, 1
  %555 = icmp ugt i32 %553, %554
  br i1 %555, label %557, label %556

556:                                              ; preds = %550
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %557

557:                                              ; preds = %556, %550
  %558 = load i32, ptr %311, align 8
  %559 = and i32 %558, 255
  %560 = add nsw i32 %559, -1
  %561 = icmp ult i32 %560, 9
  call void @llvm.assume(i1 %561)
  %562 = zext i32 %559 to i64
  %563 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %562
  %564 = load i32, ptr %563, align 4, !tbaa !16
  %565 = zext i32 %564 to i64
  %566 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %565
  %567 = load i64, ptr %566, align 8, !tbaa !50
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %570

569:                                              ; preds = %557
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %570

570:                                              ; preds = %569, %557
  %571 = getelementptr inbounds i8, ptr %311, i64 %567
  %572 = zext i32 %554 to i64
  %573 = getelementptr inbounds ptr, ptr %571, i64 %572
  %574 = load ptr, ptr %573, align 8, !tbaa !5
  %575 = getelementptr inbounds %struct.tree_exp, ptr %574, i64 1, i32 0, i32 1
  %576 = load ptr, ptr %575, align 8, !tbaa !16
  %577 = load ptr, ptr @cfun, align 8, !tbaa !5
  %578 = getelementptr inbounds %struct.tree_label_decl, ptr %576, i64 0, i32 1
  %579 = load i32, ptr %578, align 8, !tbaa !16
  %580 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %581 = getelementptr inbounds %struct.diagnostic_context, ptr %580, i64 0, i32 1, i64 4
  %582 = load i32, ptr %581, align 8, !tbaa !20
  %583 = icmp eq i32 %582, 0
  br i1 %583, label %584, label %590

584:                                              ; preds = %570
  %585 = getelementptr inbounds %struct.diagnostic_context, ptr %580, i64 0, i32 1, i64 5
  %586 = load i32, ptr %585, align 4, !tbaa !20
  %587 = icmp ne i32 %586, 0
  %588 = icmp slt i32 %579, 0
  %589 = select i1 %587, i1 %588, i1 false
  br i1 %589, label %592, label %617

590:                                              ; preds = %570
  %591 = icmp slt i32 %579, 0
  br i1 %591, label %592, label %617

592:                                              ; preds = %590, %584
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %593 = getelementptr inbounds %struct.function, ptr %577, i64 0, i32 1
  %594 = load ptr, ptr %593, align 8, !tbaa !23
  %595 = getelementptr inbounds %struct.control_flow_graph, ptr %594, i64 0, i32 2
  %596 = load ptr, ptr %595, align 8, !tbaa !29
  %597 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %596, i64 0, i32 2, i64 2
  %598 = load ptr, ptr %597, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !416)
  %599 = getelementptr inbounds %struct.basic_block_def, ptr %598, i64 0, i32 13
  %600 = load i32, ptr %599, align 8, !tbaa !58, !noalias !416
  %601 = and i32 %600, 512
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %603, label %612

603:                                              ; preds = %592
  %604 = getelementptr inbounds %struct.basic_block_def, ptr %598, i64 0, i32 7
  %605 = load ptr, ptr %604, align 8, !tbaa !16, !noalias !416
  %606 = icmp eq ptr %605, null
  br i1 %606, label %612, label %607

607:                                              ; preds = %603
  %608 = load ptr, ptr %605, align 8, !tbaa !59, !noalias !416
  %609 = icmp eq ptr %608, null
  br i1 %609, label %612, label %610

610:                                              ; preds = %607
  %611 = load ptr, ptr %608, align 8, !tbaa !42, !noalias !416
  br label %612

612:                                              ; preds = %610, %607, %603, %592
  %613 = phi ptr [ %608, %610 ], [ null, %607 ], [ null, %603 ], [ null, %592 ]
  %614 = phi ptr [ %611, %610 ], [ null, %607 ], [ null, %603 ], [ null, %592 ]
  store ptr %614, ptr %2, align 8, !tbaa !44, !alias.scope !416
  store ptr %613, ptr %82, align 8, !tbaa !46, !alias.scope !416
  store ptr %598, ptr %83, align 8, !tbaa !49, !alias.scope !416
  %615 = call ptr @gimple_build_label(ptr noundef nonnull %576) #26
  call void @gsi_insert_before(ptr noundef nonnull %2, ptr noundef %615, i32 noundef 0) #26
  %616 = load i32, ptr %578, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  br label %617

617:                                              ; preds = %612, %590, %584
  %618 = phi i32 [ %616, %612 ], [ %579, %590 ], [ %579, %584 ]
  %619 = getelementptr inbounds %struct.function, ptr %577, i64 0, i32 1
  %620 = load ptr, ptr %619, align 8, !tbaa !23
  %621 = getelementptr inbounds %struct.control_flow_graph, ptr %620, i64 0, i32 6
  %622 = load ptr, ptr %621, align 8, !tbaa !33
  %623 = icmp eq ptr %622, null
  br i1 %623, label %631, label %624

624:                                              ; preds = %617
  %625 = load i32, ptr %622, align 8, !tbaa !30
  %626 = icmp ugt i32 %625, %618
  br i1 %626, label %627, label %631

627:                                              ; preds = %624
  %628 = zext i32 %618 to i64
  %629 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %622, i64 0, i32 2, i64 %628
  %630 = load ptr, ptr %629, align 8, !tbaa !5
  br label %631

631:                                              ; preds = %617, %624, %627
  %632 = phi ptr [ %630, %627 ], [ null, %624 ], [ null, %617 ]
  %633 = getelementptr inbounds %struct.basic_block_def, ptr %632, i64 0, i32 2
  %634 = load ptr, ptr %633, align 8, !tbaa !419
  %635 = icmp ult ptr %634, inttoptr (i64 2 to ptr)
  br i1 %635, label %637, label %636

636:                                              ; preds = %631
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4431, ptr noundef nonnull @.str.2) #26
  br label %637

637:                                              ; preds = %631, %636
  store ptr inttoptr (i64 1 to ptr), ptr %633, align 8, !tbaa !419
  %638 = add nuw nsw i64 %551, 1
  %639 = icmp eq i64 %638, %549
  br i1 %639, label %640, label %550, !llvm.loop !420

640:                                              ; preds = %637, %543
  %641 = phi i1 [ true, %543 ], [ false, %637 ]
  %642 = phi i64 [ 0, %543 ], [ %549, %637 ]
  %643 = phi i32 [ 0, %543 ], [ %548, %637 ]
  %644 = load i32, ptr %538, align 4, !tbaa !16
  %645 = icmp ugt i32 %644, 1
  br i1 %645, label %647, label %646

646:                                              ; preds = %640
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %647

647:                                              ; preds = %646, %640
  %648 = load i32, ptr %311, align 8
  %649 = and i32 %648, 255
  %650 = add nsw i32 %649, -10
  %651 = icmp ult i32 %650, -9
  br i1 %651, label %665, label %652

652:                                              ; preds = %647
  %653 = zext i32 %649 to i64
  %654 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %653
  %655 = load i32, ptr %654, align 4, !tbaa !16
  %656 = zext i32 %655 to i64
  %657 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %656
  %658 = load i64, ptr %657, align 8, !tbaa !50
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %660, label %661

660:                                              ; preds = %652
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %661

661:                                              ; preds = %660, %652
  %662 = getelementptr inbounds i8, ptr %311, i64 %658
  %663 = getelementptr inbounds ptr, ptr %662, i64 1
  %664 = load ptr, ptr %663, align 8, !tbaa !5
  br label %665

665:                                              ; preds = %647, %661
  %666 = phi ptr [ %664, %661 ], [ null, %647 ]
  %667 = icmp ugt i32 %643, 1
  br i1 %667, label %668, label %721

668:                                              ; preds = %665, %716
  %669 = phi i32 [ %718, %716 ], [ %402, %665 ]
  %670 = phi ptr [ %717, %716 ], [ %666, %665 ]
  %671 = phi i64 [ %719, %716 ], [ 1, %665 ]
  %672 = trunc i64 %671 to i32
  %673 = load i32, ptr %538, align 4, !tbaa !16
  %674 = add i32 %672, 1
  %675 = icmp ugt i32 %673, %674
  br i1 %675, label %677, label %676

676:                                              ; preds = %668
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %677

677:                                              ; preds = %676, %668
  %678 = load i32, ptr %311, align 8
  %679 = and i32 %678, 255
  %680 = add nsw i32 %679, -10
  %681 = icmp ult i32 %680, -9
  br i1 %681, label %696, label %682

682:                                              ; preds = %677
  %683 = zext i32 %679 to i64
  %684 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %683
  %685 = load i32, ptr %684, align 4, !tbaa !16
  %686 = zext i32 %685 to i64
  %687 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %686
  %688 = load i64, ptr %687, align 8, !tbaa !50
  %689 = icmp eq i64 %688, 0
  br i1 %689, label %690, label %691

690:                                              ; preds = %682
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %691

691:                                              ; preds = %690, %682
  %692 = getelementptr inbounds i8, ptr %311, i64 %688
  %693 = zext i32 %674 to i64
  %694 = getelementptr inbounds ptr, ptr %692, i64 %693
  %695 = load ptr, ptr %694, align 8, !tbaa !5
  br label %696

696:                                              ; preds = %677, %691
  %697 = phi ptr [ %695, %691 ], [ null, %677 ]
  %698 = getelementptr inbounds %struct.tree_exp, ptr %697, i64 0, i32 3
  %699 = load ptr, ptr %698, align 8, !tbaa !16
  %700 = icmp eq ptr %699, null
  br i1 %700, label %701, label %702

701:                                              ; preds = %696
  call void (ptr, ...) @error(ptr noundef nonnull @.str.171) #26
  br label %716

702:                                              ; preds = %696
  %703 = getelementptr inbounds %struct.tree_exp, ptr %670, i64 0, i32 3
  %704 = load ptr, ptr %703, align 8, !tbaa !16
  %705 = icmp eq ptr %704, null
  br i1 %705, label %716, label %706

706:                                              ; preds = %702
  %707 = call i32 @tree_int_cst_lt(ptr noundef nonnull %704, ptr noundef nonnull %699) #26
  %708 = icmp eq i32 %707, 0
  br i1 %708, label %709, label %716

709:                                              ; preds = %706
  call void (ptr, ...) @error(ptr noundef nonnull @.str.172) #26
  %710 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %710, ptr noundef nonnull %670, i32 noundef 0) #26
  %711 = load ptr, ptr @stderr, align 8, !tbaa !5
  %712 = call i64 @fwrite(ptr nonnull @.str.173, i64 17, i64 1, ptr %711) #28
  %713 = load ptr, ptr @stderr, align 8, !tbaa !5
  call void @print_generic_expr(ptr noundef %713, ptr noundef nonnull %697, i32 noundef 0) #26
  %714 = load ptr, ptr @stderr, align 8, !tbaa !5
  %715 = call i64 @fwrite(ptr nonnull @.str.174, i64 22, i64 1, ptr %714) #28
  br label %716

716:                                              ; preds = %702, %706, %709, %701
  %717 = phi ptr [ %670, %701 ], [ %697, %709 ], [ %697, %706 ], [ %697, %702 ]
  %718 = phi i32 [ 1, %701 ], [ 1, %709 ], [ %669, %706 ], [ %669, %702 ]
  %719 = add nuw nsw i64 %671, 1
  %720 = icmp eq i64 %719, %642
  br i1 %720, label %721, label %668, !llvm.loop !421

721:                                              ; preds = %716, %665
  %722 = phi i32 [ %402, %665 ], [ %718, %716 ]
  %723 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 1
  %724 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 9
  br label %725

725:                                              ; preds = %721, %768
  %726 = phi i32 [ 0, %721 ], [ %769, %768 ]
  %727 = phi i32 [ %722, %721 ], [ %761, %768 ]
  %728 = load ptr, ptr %723, align 8, !tbaa !5
  %729 = icmp eq ptr %728, null
  br i1 %729, label %732, label %730

730:                                              ; preds = %725
  %731 = load i32, ptr %728, align 8, !tbaa !106
  br label %732

732:                                              ; preds = %730, %725
  %733 = phi i32 [ %731, %730 ], [ 0, %725 ]
  %734 = icmp eq i32 %733, %726
  br i1 %734, label %735, label %736

735:                                              ; preds = %732
  br i1 %641, label %770, label %772

736:                                              ; preds = %732
  %737 = zext i32 %726 to i64
  %738 = getelementptr inbounds %struct.VEC_edge_base, ptr %728, i64 0, i32 2, i64 %737
  %739 = load ptr, ptr %738, align 8, !tbaa !5
  %740 = getelementptr inbounds %struct.edge_def, ptr %739, i64 0, i32 1
  %741 = load ptr, ptr %740, align 8, !tbaa !109
  %742 = getelementptr inbounds %struct.basic_block_def, ptr %741, i64 0, i32 2
  %743 = load ptr, ptr %742, align 8, !tbaa !419
  %744 = icmp eq ptr %743, null
  br i1 %744, label %745, label %750

745:                                              ; preds = %736
  %746 = load i32, ptr %724, align 8, !tbaa !120
  %747 = getelementptr inbounds %struct.basic_block_def, ptr %741, i64 0, i32 9
  %748 = load i32, ptr %747, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.175, i32 noundef %746, i32 noundef %748) #26
  %749 = load ptr, ptr %740, align 8, !tbaa !109
  br label %750

750:                                              ; preds = %745, %736
  %751 = phi ptr [ %741, %736 ], [ %749, %745 ]
  %752 = phi i32 [ %727, %736 ], [ 1, %745 ]
  %753 = getelementptr inbounds %struct.basic_block_def, ptr %751, i64 0, i32 2
  store ptr inttoptr (i64 2 to ptr), ptr %753, align 8, !tbaa !419
  %754 = getelementptr inbounds %struct.edge_def, ptr %739, i64 0, i32 7
  %755 = load i32, ptr %754, align 8, !tbaa !108
  %756 = and i32 %755, 3075
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %760, label %758

758:                                              ; preds = %750
  %759 = load i32, ptr %724, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.168, i32 noundef %759) #26
  br label %760

760:                                              ; preds = %758, %750
  %761 = phi i32 [ 1, %758 ], [ %752, %750 ]
  %762 = load ptr, ptr %723, align 8, !tbaa !5
  %763 = icmp eq ptr %762, null
  br i1 %763, label %767, label %764

764:                                              ; preds = %760
  %765 = load i32, ptr %762, align 8, !tbaa !106
  %766 = icmp ult i32 %726, %765
  br i1 %766, label %768, label %767

767:                                              ; preds = %764, %760
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %768

768:                                              ; preds = %764, %767
  %769 = add i32 %726, 1
  br label %725, !llvm.loop !422

770:                                              ; preds = %863, %735
  %771 = phi i32 [ %727, %735 ], [ %864, %863 ]
  br label %867

772:                                              ; preds = %735, %863
  %773 = phi i32 [ %864, %863 ], [ %727, %735 ]
  %774 = phi i64 [ %865, %863 ], [ 0, %735 ]
  %775 = trunc i64 %774 to i32
  %776 = load i32, ptr %538, align 4, !tbaa !16
  %777 = add i32 %775, 1
  %778 = icmp ugt i32 %776, %777
  br i1 %778, label %780, label %779

779:                                              ; preds = %772
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %780

780:                                              ; preds = %779, %772
  %781 = load i32, ptr %311, align 8
  %782 = and i32 %781, 255
  %783 = add nsw i32 %782, -1
  %784 = icmp ult i32 %783, 9
  call void @llvm.assume(i1 %784)
  %785 = zext i32 %782 to i64
  %786 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %785
  %787 = load i32, ptr %786, align 4, !tbaa !16
  %788 = zext i32 %787 to i64
  %789 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %788
  %790 = load i64, ptr %789, align 8, !tbaa !50
  %791 = icmp eq i64 %790, 0
  br i1 %791, label %792, label %793

792:                                              ; preds = %780
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %793

793:                                              ; preds = %792, %780
  %794 = getelementptr inbounds i8, ptr %311, i64 %790
  %795 = zext i32 %777 to i64
  %796 = getelementptr inbounds ptr, ptr %794, i64 %795
  %797 = load ptr, ptr %796, align 8, !tbaa !5
  %798 = getelementptr inbounds %struct.tree_exp, ptr %797, i64 1, i32 0, i32 1
  %799 = load ptr, ptr %798, align 8, !tbaa !16
  %800 = load ptr, ptr @cfun, align 8, !tbaa !5
  %801 = getelementptr inbounds %struct.tree_label_decl, ptr %799, i64 0, i32 1
  %802 = load i32, ptr %801, align 8, !tbaa !16
  %803 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %804 = getelementptr inbounds %struct.diagnostic_context, ptr %803, i64 0, i32 1, i64 4
  %805 = load i32, ptr %804, align 8, !tbaa !20
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %807, label %813

807:                                              ; preds = %793
  %808 = getelementptr inbounds %struct.diagnostic_context, ptr %803, i64 0, i32 1, i64 5
  %809 = load i32, ptr %808, align 4, !tbaa !20
  %810 = icmp ne i32 %809, 0
  %811 = icmp slt i32 %802, 0
  %812 = select i1 %810, i1 %811, i1 false
  br i1 %812, label %815, label %840

813:                                              ; preds = %793
  %814 = icmp slt i32 %802, 0
  br i1 %814, label %815, label %840

815:                                              ; preds = %813, %807
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %1) #26
  %816 = getelementptr inbounds %struct.function, ptr %800, i64 0, i32 1
  %817 = load ptr, ptr %816, align 8, !tbaa !23
  %818 = getelementptr inbounds %struct.control_flow_graph, ptr %817, i64 0, i32 2
  %819 = load ptr, ptr %818, align 8, !tbaa !29
  %820 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %819, i64 0, i32 2, i64 2
  %821 = load ptr, ptr %820, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !423)
  %822 = getelementptr inbounds %struct.basic_block_def, ptr %821, i64 0, i32 13
  %823 = load i32, ptr %822, align 8, !tbaa !58, !noalias !423
  %824 = and i32 %823, 512
  %825 = icmp eq i32 %824, 0
  br i1 %825, label %826, label %835

826:                                              ; preds = %815
  %827 = getelementptr inbounds %struct.basic_block_def, ptr %821, i64 0, i32 7
  %828 = load ptr, ptr %827, align 8, !tbaa !16, !noalias !423
  %829 = icmp eq ptr %828, null
  br i1 %829, label %835, label %830

830:                                              ; preds = %826
  %831 = load ptr, ptr %828, align 8, !tbaa !59, !noalias !423
  %832 = icmp eq ptr %831, null
  br i1 %832, label %835, label %833

833:                                              ; preds = %830
  %834 = load ptr, ptr %831, align 8, !tbaa !42, !noalias !423
  br label %835

835:                                              ; preds = %833, %830, %826, %815
  %836 = phi ptr [ %831, %833 ], [ null, %830 ], [ null, %826 ], [ null, %815 ]
  %837 = phi ptr [ %834, %833 ], [ null, %830 ], [ null, %826 ], [ null, %815 ]
  store ptr %837, ptr %1, align 8, !tbaa !44, !alias.scope !423
  store ptr %836, ptr %84, align 8, !tbaa !46, !alias.scope !423
  store ptr %821, ptr %85, align 8, !tbaa !49, !alias.scope !423
  %838 = call ptr @gimple_build_label(ptr noundef nonnull %799) #26
  call void @gsi_insert_before(ptr noundef nonnull %1, ptr noundef %838, i32 noundef 0) #26
  %839 = load i32, ptr %801, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %1) #26
  br label %840

840:                                              ; preds = %835, %813, %807
  %841 = phi i32 [ %839, %835 ], [ %802, %813 ], [ %802, %807 ]
  %842 = getelementptr inbounds %struct.function, ptr %800, i64 0, i32 1
  %843 = load ptr, ptr %842, align 8, !tbaa !23
  %844 = getelementptr inbounds %struct.control_flow_graph, ptr %843, i64 0, i32 6
  %845 = load ptr, ptr %844, align 8, !tbaa !33
  %846 = icmp eq ptr %845, null
  br i1 %846, label %854, label %847

847:                                              ; preds = %840
  %848 = load i32, ptr %845, align 8, !tbaa !30
  %849 = icmp ugt i32 %848, %841
  br i1 %849, label %850, label %854

850:                                              ; preds = %847
  %851 = zext i32 %841 to i64
  %852 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %845, i64 0, i32 2, i64 %851
  %853 = load ptr, ptr %852, align 8, !tbaa !5
  br label %854

854:                                              ; preds = %840, %847, %850
  %855 = phi ptr [ %853, %850 ], [ null, %847 ], [ null, %840 ]
  %856 = getelementptr inbounds %struct.basic_block_def, ptr %855, i64 0, i32 2
  %857 = load ptr, ptr %856, align 8, !tbaa !419
  %858 = icmp eq ptr %857, inttoptr (i64 2 to ptr)
  br i1 %858, label %863, label %859

859:                                              ; preds = %854
  %860 = load i32, ptr %724, align 8, !tbaa !120
  %861 = getelementptr inbounds %struct.basic_block_def, ptr %855, i64 0, i32 9
  %862 = load i32, ptr %861, align 8, !tbaa !120
  call void (ptr, ...) @error(ptr noundef nonnull @.str.176, i32 noundef %860, i32 noundef %862) #26
  br label %863

863:                                              ; preds = %859, %854
  %864 = phi i32 [ 1, %859 ], [ %773, %854 ]
  %865 = add nuw nsw i64 %774, 1
  %866 = icmp eq i64 %865, %642
  br i1 %866, label %770, label %772, !llvm.loop !426

867:                                              ; preds = %770, %889
  %868 = phi i32 [ %890, %889 ], [ 0, %770 ]
  %869 = load ptr, ptr %723, align 8, !tbaa !5
  %870 = icmp eq ptr %869, null
  br i1 %870, label %873, label %871

871:                                              ; preds = %867
  %872 = load i32, ptr %869, align 8, !tbaa !106
  br label %873

873:                                              ; preds = %871, %867
  %874 = phi i32 [ %872, %871 ], [ 0, %867 ]
  %875 = icmp eq i32 %874, %868
  br i1 %875, label %895, label %876

876:                                              ; preds = %873
  %877 = zext i32 %868 to i64
  %878 = getelementptr inbounds %struct.VEC_edge_base, ptr %869, i64 0, i32 2, i64 %877
  %879 = load ptr, ptr %878, align 8, !tbaa !5
  %880 = getelementptr inbounds %struct.edge_def, ptr %879, i64 0, i32 1
  %881 = load ptr, ptr %880, align 8, !tbaa !109
  %882 = getelementptr inbounds %struct.basic_block_def, ptr %881, i64 0, i32 2
  store ptr null, ptr %882, align 8, !tbaa !419
  %883 = load ptr, ptr %723, align 8, !tbaa !5
  %884 = icmp eq ptr %883, null
  br i1 %884, label %888, label %885

885:                                              ; preds = %876
  %886 = load i32, ptr %883, align 8, !tbaa !106
  %887 = icmp ult i32 %868, %886
  br i1 %887, label %889, label %888

888:                                              ; preds = %885, %876
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %889

889:                                              ; preds = %885, %888
  %890 = add i32 %868, 1
  br label %867, !llvm.loop !427

891:                                              ; preds = %400
  %892 = call zeroext i8 @verify_eh_dispatch_edge(ptr noundef nonnull %311) #26
  %893 = zext i8 %892 to i32
  %894 = or i32 %402, %893
  br label %895

895:                                              ; preds = %873, %469, %294, %299, %303, %435, %438, %891, %456, %534, %521, %400, %310, %306
  %896 = phi i32 [ %295, %310 ], [ %402, %400 ], [ %894, %891 ], [ %522, %521 ], [ 1, %534 ], [ 1, %456 ], [ %295, %306 ], [ 1, %438 ], [ %402, %435 ], [ %295, %303 ], [ %295, %299 ], [ %295, %294 ], [ %464, %469 ], [ %771, %873 ]
  %897 = getelementptr inbounds %struct.basic_block_def, ptr %87, i64 0, i32 6
  %898 = load ptr, ptr %897, align 8, !tbaa !36
  %899 = load ptr, ptr @cfun, align 8, !tbaa !5
  %900 = getelementptr inbounds %struct.function, ptr %899, i64 0, i32 1
  %901 = load ptr, ptr %900, align 8, !tbaa !23
  %902 = getelementptr inbounds %struct.control_flow_graph, ptr %901, i64 0, i32 1
  %903 = load ptr, ptr %902, align 8, !tbaa !35
  %904 = icmp eq ptr %898, %903
  br i1 %904, label %905, label %86, !llvm.loop !428

905:                                              ; preds = %895, %68
  %906 = phi i32 [ %69, %68 ], [ %896, %895 ]
  %907 = call i32 @dom_info_state(i32 noundef 1) #26
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %910, label %909

909:                                              ; preds = %905
  call void @verify_dominators(i32 noundef 1) #26
  br label %910

910:                                              ; preds = %909, %905
  ret i32 %906
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @create_bb(ptr noundef %0, ptr noundef readnone %1, ptr noundef %2) #9 {
  %4 = icmp eq ptr %1, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 431, ptr noundef nonnull @.str.2) #26
  br label %6

6:                                                ; preds = %3, %5
  %7 = tail call ptr @alloc_block() #26
  %8 = load ptr, ptr @cfun, align 8, !tbaa !5
  %9 = getelementptr inbounds %struct.function, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !23
  %11 = getelementptr inbounds %struct.control_flow_graph, ptr %10, i64 0, i32 5
  %12 = load i32, ptr %11, align 8, !tbaa !28
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 9
  store i32 %12, ptr %13, align 8, !tbaa !120
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 13
  store i32 1, ptr %14, align 8, !tbaa !58
  %15 = tail call ptr @ggc_alloc_cleared_stat(i64 noundef 16) #26
  %16 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 7
  store ptr %15, ptr %16, align 8, !tbaa !16
  %17 = icmp eq ptr %0, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %6
  %19 = tail call ptr @gimple_seq_alloc() #26
  br label %20

20:                                               ; preds = %6, %18
  %21 = phi ptr [ %19, %18 ], [ %0, %6 ]
  %22 = load i32, ptr %14, align 8, !tbaa !58
  %23 = and i32 %22, 512
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %20
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 248, ptr noundef nonnull @.str.2) #26
  br label %26

26:                                               ; preds = %20, %25
  %27 = load ptr, ptr %16, align 8, !tbaa !16
  store ptr %21, ptr %27, align 8, !tbaa !59
  tail call void @link_block(ptr noundef nonnull %7, ptr noundef %2) #26
  %28 = load ptr, ptr @cfun, align 8, !tbaa !5
  %29 = getelementptr inbounds %struct.function, ptr %28, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !23
  %31 = getelementptr inbounds %struct.control_flow_graph, ptr %30, i64 0, i32 5
  %32 = load i32, ptr %31, align 8, !tbaa !28
  %33 = getelementptr inbounds %struct.control_flow_graph, ptr %30, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !5, !nonnull !66, !noundef !66
  %35 = sext i32 %32 to i64
  %36 = load i32, ptr %34, align 8, !tbaa !30
  %37 = zext i32 %36 to i64
  %38 = icmp eq i64 %35, %37
  br i1 %38, label %39, label %66

39:                                               ; preds = %26
  %40 = add nsw i32 %32, 3
  %41 = sdiv i32 %40, 4
  %42 = add nsw i32 %41, %32
  %43 = sub nsw i32 %42, %36
  %44 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %34, i64 0, i32 1
  %45 = load i32, ptr %44, align 4, !tbaa !32
  %46 = sub i32 %45, %36
  %47 = icmp ult i32 %46, %43
  br i1 %47, label %48, label %51

48:                                               ; preds = %39
  %49 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef nonnull %34, i32 noundef %43) #26
  store ptr %49, ptr %33, align 8, !tbaa !5
  %50 = sub nsw i32 %42, %36
  br label %51

51:                                               ; preds = %39, %48
  %52 = phi i32 [ %43, %39 ], [ %50, %48 ]
  %53 = phi ptr [ %34, %39 ], [ %49, %48 ]
  store i32 %42, ptr %53, align 8, !tbaa !30
  %54 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %53, i64 0, i32 2
  %55 = sext i32 %36 to i64
  %56 = getelementptr inbounds ptr, ptr %54, i64 %55
  %57 = sext i32 %52 to i64
  %58 = shl nsw i64 %57, 3
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 %56, i8 0, i64 %58, i1 false)
  %59 = load ptr, ptr @cfun, align 8, !tbaa !5
  %60 = getelementptr inbounds %struct.function, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !23
  %62 = getelementptr inbounds %struct.control_flow_graph, ptr %61, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !29
  %64 = getelementptr inbounds %struct.control_flow_graph, ptr %61, i64 0, i32 5
  %65 = load i32, ptr %64, align 8, !tbaa !28
  br label %66

66:                                               ; preds = %26, %51
  %67 = phi i32 [ %32, %26 ], [ %65, %51 ]
  %68 = phi ptr [ %34, %26 ], [ %63, %51 ]
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %68, i64 0, i32 2, i64 %69
  store ptr %7, ptr %70, align 8, !tbaa !5
  %71 = load ptr, ptr @cfun, align 8, !tbaa !5
  %72 = getelementptr inbounds %struct.function, ptr %71, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !23
  %74 = getelementptr inbounds %struct.control_flow_graph, ptr %73, i64 0, i32 3
  %75 = load i32, ptr %74, align 8, !tbaa !27
  %76 = add nsw i32 %75, 1
  store i32 %76, ptr %74, align 8, !tbaa !27
  %77 = getelementptr inbounds %struct.control_flow_graph, ptr %73, i64 0, i32 5
  %78 = load i32, ptr %77, align 8, !tbaa !28
  %79 = add nsw i32 %78, 1
  store i32 %79, ptr %77, align 8, !tbaa !28
  ret ptr %7
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @gimple_redirect_edge_and_branch(ptr noundef %0, ptr noundef %1) #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  %6 = alloca %struct.gimple_stmt_iterator, align 8
  %7 = load ptr, ptr %0, align 8, !tbaa !295
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #26
  %8 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 7
  %9 = load i32, ptr %8, align 8, !tbaa !108
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %354

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !109
  %15 = icmp eq ptr %14, %1
  br i1 %15, label %354, label %16

16:                                               ; preds = %12
  %17 = and i32 %9, 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = tail call ptr @redirect_eh_edge(ptr noundef nonnull %0, ptr noundef %1) #26
  br label %354

21:                                               ; preds = %16
  %22 = load ptr, ptr @cfun, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.function, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !23
  %25 = load ptr, ptr %24, align 8, !tbaa !34
  %26 = icmp eq ptr %7, %25
  br i1 %26, label %70, label %27

27:                                               ; preds = %21
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  %28 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !105
  %30 = icmp eq ptr %29, null
  br i1 %30, label %66, label %31

31:                                               ; preds = %27
  %32 = load i32, ptr %29, align 8, !tbaa !106
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %66

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.VEC_edge_base, ptr %29, i64 0, i32 2, i64 0
  %36 = load ptr, ptr %35, align 8, !tbaa !5
  %37 = icmp eq ptr %36, %0
  %38 = zext i1 %37 to i64
  %39 = getelementptr inbounds %struct.VEC_edge_base, ptr %29, i64 0, i32 2, i64 %38
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.edge_def, ptr %40, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !109
  %43 = icmp eq ptr %42, %1
  br i1 %43, label %44, label %66

44:                                               ; preds = %34
  %45 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 13
  %46 = load i32, ptr %45, align 8, !tbaa !58, !noalias !429
  %47 = and i32 %46, 512
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %66

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 7
  %51 = load ptr, ptr %50, align 8, !tbaa !16, !noalias !429
  %52 = icmp eq ptr %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %49
  %54 = load ptr, ptr %51, align 8, !tbaa !59, !noalias !429
  %55 = icmp eq ptr %54, null
  br i1 %55, label %66, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.gimple_seq_d, ptr %54, i64 0, i32 1
  %58 = load ptr, ptr %57, align 8, !tbaa !61, !noalias !429
  store ptr %58, ptr %5, align 8, !tbaa.struct !194
  %59 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %54, ptr %59, align 8, !tbaa.struct !195
  %60 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %7, ptr %60, align 8, !tbaa.struct !196
  %61 = icmp eq ptr %58, null
  br i1 %61, label %66, label %62

62:                                               ; preds = %56
  %63 = load ptr, ptr %58, align 8, !tbaa !47
  %64 = load i32, ptr %63, align 8
  %65 = trunc i32 %64 to i8
  switch i8 %65, label %66 [
    i8 1, label %67
    i8 5, label %67
  ]

66:                                               ; preds = %34, %31, %56, %27, %62, %53, %49, %44
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  br label %70

67:                                               ; preds = %62, %62
  call void @gsi_remove(ptr noundef nonnull %5, i8 noundef zeroext 1) #26
  %68 = call ptr @ssa_redirect_edge(ptr noundef nonnull %0, ptr noundef %1) #26
  %69 = getelementptr inbounds %struct.edge_def, ptr %68, i64 0, i32 7
  store i32 1, ptr %69, align 8, !tbaa !108
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  br label %354

70:                                               ; preds = %66, %21
  %71 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 13
  %72 = load i32, ptr %71, align 8, !tbaa !58, !noalias !432
  %73 = and i32 %72, 512
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %82

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.basic_block_def, ptr %7, i64 0, i32 7
  %77 = load ptr, ptr %76, align 8, !tbaa !16, !noalias !432
  %78 = icmp eq ptr %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %75
  %80 = load ptr, ptr %77, align 8, !tbaa !59, !noalias !432
  %81 = icmp eq ptr %80, null
  br i1 %81, label %82, label %84

82:                                               ; preds = %79, %75, %70
  %83 = getelementptr inbounds i8, ptr %6, i64 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  store ptr %7, ptr %83, align 8, !tbaa.struct !196
  br label %348

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.gimple_seq_d, ptr %80, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !61, !noalias !432
  store ptr %86, ptr %6, align 8, !tbaa.struct !194
  %87 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %80, ptr %87, align 8, !tbaa.struct !195
  %88 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %7, ptr %88, align 8, !tbaa.struct !196
  %89 = icmp eq ptr %86, null
  br i1 %89, label %348, label %90

90:                                               ; preds = %84
  %91 = load ptr, ptr %86, align 8, !tbaa !47
  %92 = icmp eq ptr %91, null
  br i1 %92, label %348, label %93

93:                                               ; preds = %90
  %94 = load i32, ptr %91, align 8
  %95 = trunc i32 %94 to i8
  switch i8 %95, label %348 [
    i8 1, label %352
    i8 3, label %96
    i8 5, label %97
    i8 7, label %220
    i8 9, label %341
    i8 28, label %352
    i8 21, label %352
    i8 31, label %352
    i8 23, label %352
    i8 15, label %344
  ]

96:                                               ; preds = %93
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4670, ptr noundef nonnull @.str.2) #26
  br label %97

97:                                               ; preds = %93, %96
  %98 = tail call ptr @gimple_block_label(ptr noundef %1)
  %99 = tail call fastcc ptr @get_cases_for_edge(ptr noundef nonnull %0, ptr noundef nonnull %91)
  %100 = icmp eq ptr %99, null
  br i1 %100, label %117, label %101

101:                                              ; preds = %97
  %102 = load ptr, ptr %0, align 8, !tbaa !295
  %103 = tail call ptr @find_edge(ptr noundef %102, ptr noundef %1) #26
  br label %104

104:                                              ; preds = %101, %104
  %105 = phi ptr [ %99, %101 ], [ %108, %104 ]
  %106 = getelementptr inbounds %struct.tree_exp, ptr %105, i64 1, i32 0, i32 1
  store ptr %98, ptr %106, align 8, !tbaa !16
  %107 = getelementptr inbounds %struct.tree_common, ptr %105, i64 0, i32 1
  %108 = load ptr, ptr %107, align 8, !tbaa !16
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %104, !llvm.loop !435

110:                                              ; preds = %104
  %111 = icmp eq ptr %103, null
  br i1 %111, label %352, label %112

112:                                              ; preds = %110
  %113 = getelementptr inbounds %struct.tree_common, ptr %105, i64 0, i32 1
  %114 = tail call fastcc ptr @get_cases_for_edge(ptr noundef nonnull %103, ptr noundef nonnull %91)
  %115 = getelementptr inbounds %struct.tree_common, ptr %114, i64 0, i32 1
  %116 = load ptr, ptr %115, align 8, !tbaa !16
  store ptr %116, ptr %113, align 8, !tbaa !16
  store ptr %99, ptr %115, align 8, !tbaa !16
  br label %352

117:                                              ; preds = %97
  %118 = getelementptr i8, ptr %91, i64 12
  %119 = load i32, ptr %118, align 4, !tbaa !16
  %120 = icmp ugt i32 %119, 1
  br i1 %120, label %121, label %123

121:                                              ; preds = %117
  %122 = add i32 %119, -1
  br label %126

123:                                              ; preds = %117
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %124 = add nsw i32 %119, -1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %352, label %126

126:                                              ; preds = %121, %123
  %127 = phi i32 [ %122, %121 ], [ %124, %123 ]
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 1
  %130 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %4, i64 0, i32 2
  br label %131

131:                                              ; preds = %126, %217
  %132 = phi i64 [ 0, %126 ], [ %218, %217 ]
  %133 = trunc i64 %132 to i32
  %134 = load i32, ptr %118, align 4, !tbaa !16
  %135 = add i32 %133, 1
  %136 = icmp ugt i32 %134, %135
  br i1 %136, label %138, label %137

137:                                              ; preds = %131
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %138

138:                                              ; preds = %137, %131
  %139 = load i32, ptr %91, align 8
  %140 = and i32 %139, 255
  %141 = add nsw i32 %140, -1
  %142 = icmp ult i32 %141, 9
  call void @llvm.assume(i1 %142)
  %143 = zext i32 %140 to i64
  %144 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %143
  %145 = load i32, ptr %144, align 4, !tbaa !16
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %146
  %148 = load i64, ptr %147, align 8, !tbaa !50
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %138
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %151

151:                                              ; preds = %150, %138
  %152 = getelementptr inbounds i8, ptr %91, i64 %148
  %153 = zext i32 %135 to i64
  %154 = getelementptr inbounds ptr, ptr %152, i64 %153
  %155 = load ptr, ptr %154, align 8, !tbaa !5
  %156 = load ptr, ptr @cfun, align 8, !tbaa !5
  %157 = getelementptr inbounds %struct.tree_exp, ptr %155, i64 1, i32 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !16
  %159 = getelementptr inbounds %struct.tree_label_decl, ptr %158, i64 0, i32 1
  %160 = load i32, ptr %159, align 8, !tbaa !16
  %161 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %162 = getelementptr inbounds %struct.diagnostic_context, ptr %161, i64 0, i32 1, i64 4
  %163 = load i32, ptr %162, align 8, !tbaa !20
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %171

165:                                              ; preds = %151
  %166 = getelementptr inbounds %struct.diagnostic_context, ptr %161, i64 0, i32 1, i64 5
  %167 = load i32, ptr %166, align 4, !tbaa !20
  %168 = icmp ne i32 %167, 0
  %169 = icmp slt i32 %160, 0
  %170 = select i1 %168, i1 %169, i1 false
  br i1 %170, label %173, label %198

171:                                              ; preds = %151
  %172 = icmp slt i32 %160, 0
  br i1 %172, label %173, label %198

173:                                              ; preds = %171, %165
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  %174 = getelementptr inbounds %struct.function, ptr %156, i64 0, i32 1
  %175 = load ptr, ptr %174, align 8, !tbaa !23
  %176 = getelementptr inbounds %struct.control_flow_graph, ptr %175, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !29
  %178 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %177, i64 0, i32 2, i64 2
  %179 = load ptr, ptr %178, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !436)
  %180 = getelementptr inbounds %struct.basic_block_def, ptr %179, i64 0, i32 13
  %181 = load i32, ptr %180, align 8, !tbaa !58, !noalias !436
  %182 = and i32 %181, 512
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %193

184:                                              ; preds = %173
  %185 = getelementptr inbounds %struct.basic_block_def, ptr %179, i64 0, i32 7
  %186 = load ptr, ptr %185, align 8, !tbaa !16, !noalias !436
  %187 = icmp eq ptr %186, null
  br i1 %187, label %193, label %188

188:                                              ; preds = %184
  %189 = load ptr, ptr %186, align 8, !tbaa !59, !noalias !436
  %190 = icmp eq ptr %189, null
  br i1 %190, label %193, label %191

191:                                              ; preds = %188
  %192 = load ptr, ptr %189, align 8, !tbaa !42, !noalias !436
  br label %193

193:                                              ; preds = %191, %188, %184, %173
  %194 = phi ptr [ %189, %191 ], [ null, %188 ], [ null, %184 ], [ null, %173 ]
  %195 = phi ptr [ %192, %191 ], [ null, %188 ], [ null, %184 ], [ null, %173 ]
  store ptr %195, ptr %4, align 8, !tbaa !44, !alias.scope !436
  store ptr %194, ptr %129, align 8, !tbaa !46, !alias.scope !436
  store ptr %179, ptr %130, align 8, !tbaa !49, !alias.scope !436
  %196 = call ptr @gimple_build_label(ptr noundef nonnull %158) #26
  call void @gsi_insert_before(ptr noundef nonnull %4, ptr noundef %196, i32 noundef 0) #26
  %197 = load i32, ptr %159, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  br label %198

198:                                              ; preds = %193, %171, %165
  %199 = phi i32 [ %197, %193 ], [ %160, %171 ], [ %160, %165 ]
  %200 = getelementptr inbounds %struct.function, ptr %156, i64 0, i32 1
  %201 = load ptr, ptr %200, align 8, !tbaa !23
  %202 = getelementptr inbounds %struct.control_flow_graph, ptr %201, i64 0, i32 6
  %203 = load ptr, ptr %202, align 8, !tbaa !33
  %204 = icmp eq ptr %203, null
  br i1 %204, label %212, label %205

205:                                              ; preds = %198
  %206 = load i32, ptr %203, align 8, !tbaa !30
  %207 = icmp ugt i32 %206, %199
  br i1 %207, label %208, label %212

208:                                              ; preds = %205
  %209 = zext i32 %199 to i64
  %210 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %203, i64 0, i32 2, i64 %209
  %211 = load ptr, ptr %210, align 8, !tbaa !5
  br label %212

212:                                              ; preds = %198, %205, %208
  %213 = phi ptr [ %211, %208 ], [ null, %205 ], [ null, %198 ]
  %214 = load ptr, ptr %13, align 8, !tbaa !109
  %215 = icmp eq ptr %213, %214
  br i1 %215, label %216, label %217

216:                                              ; preds = %212
  store ptr %98, ptr %157, align 8, !tbaa !16
  br label %217

217:                                              ; preds = %216, %212
  %218 = add nuw nsw i64 %132, 1
  %219 = icmp eq i64 %218, %128
  br i1 %219, label %352, label %131, !llvm.loop !439

220:                                              ; preds = %93
  %221 = getelementptr i8, ptr %91, i64 75
  %222 = load i8, ptr %221, align 1, !tbaa !16
  %223 = zext i8 %222 to i32
  %224 = icmp eq i8 %222, 0
  br i1 %224, label %336, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.gimple_statement_asm, ptr %91, i64 0, i32 2
  %227 = getelementptr inbounds %struct.gimple_statement_asm, ptr %91, i64 0, i32 4
  %228 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  %229 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  br label %230

230:                                              ; preds = %225, %330
  %231 = phi ptr [ null, %225 ], [ %331, %330 ]
  %232 = phi i32 [ 0, %225 ], [ %332, %330 ]
  %233 = load i8, ptr %221, align 1, !tbaa !16
  %234 = zext i8 %233 to i32
  %235 = icmp ugt i32 %232, %234
  br i1 %235, label %236, label %237

236:                                              ; preds = %230
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 2710, ptr noundef nonnull @.str.2) #26
  br label %237

237:                                              ; preds = %236, %230
  %238 = load i8, ptr %226, align 8, !tbaa !16
  %239 = zext i8 %238 to i32
  %240 = add nuw nsw i32 %232, %239
  %241 = load i8, ptr %227, align 2, !tbaa !16
  %242 = zext i8 %241 to i32
  %243 = add nuw nsw i32 %240, %242
  %244 = load i32, ptr %91, align 8
  %245 = and i32 %244, 255
  %246 = add nsw i32 %245, -10
  %247 = icmp ult i32 %246, -9
  br i1 %247, label %262, label %248

248:                                              ; preds = %237
  %249 = zext i32 %245 to i64
  %250 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %249
  %251 = load i32, ptr %250, align 4, !tbaa !16
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %252
  %254 = load i64, ptr %253, align 8, !tbaa !50
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %257

256:                                              ; preds = %248
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %257

257:                                              ; preds = %256, %248
  %258 = getelementptr inbounds i8, ptr %91, i64 %254
  %259 = zext i32 %243 to i64
  %260 = getelementptr inbounds ptr, ptr %258, i64 %259
  %261 = load ptr, ptr %260, align 8, !tbaa !5
  br label %262

262:                                              ; preds = %237, %257
  %263 = phi ptr [ %261, %257 ], [ null, %237 ]
  %264 = load ptr, ptr @cfun, align 8, !tbaa !5
  %265 = getelementptr inbounds %struct.tree_list, ptr %263, i64 0, i32 2
  %266 = load ptr, ptr %265, align 8, !tbaa !16
  %267 = getelementptr inbounds %struct.tree_label_decl, ptr %266, i64 0, i32 1
  %268 = load i32, ptr %267, align 8, !tbaa !16
  %269 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %270 = getelementptr inbounds %struct.diagnostic_context, ptr %269, i64 0, i32 1, i64 4
  %271 = load i32, ptr %270, align 8, !tbaa !20
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %279

273:                                              ; preds = %262
  %274 = getelementptr inbounds %struct.diagnostic_context, ptr %269, i64 0, i32 1, i64 5
  %275 = load i32, ptr %274, align 4, !tbaa !20
  %276 = icmp ne i32 %275, 0
  %277 = icmp slt i32 %268, 0
  %278 = select i1 %276, i1 %277, i1 false
  br i1 %278, label %281, label %306

279:                                              ; preds = %262
  %280 = icmp slt i32 %268, 0
  br i1 %280, label %281, label %306

281:                                              ; preds = %279, %273
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %282 = getelementptr inbounds %struct.function, ptr %264, i64 0, i32 1
  %283 = load ptr, ptr %282, align 8, !tbaa !23
  %284 = getelementptr inbounds %struct.control_flow_graph, ptr %283, i64 0, i32 2
  %285 = load ptr, ptr %284, align 8, !tbaa !29
  %286 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %285, i64 0, i32 2, i64 2
  %287 = load ptr, ptr %286, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !440)
  %288 = getelementptr inbounds %struct.basic_block_def, ptr %287, i64 0, i32 13
  %289 = load i32, ptr %288, align 8, !tbaa !58, !noalias !440
  %290 = and i32 %289, 512
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %301

292:                                              ; preds = %281
  %293 = getelementptr inbounds %struct.basic_block_def, ptr %287, i64 0, i32 7
  %294 = load ptr, ptr %293, align 8, !tbaa !16, !noalias !440
  %295 = icmp eq ptr %294, null
  br i1 %295, label %301, label %296

296:                                              ; preds = %292
  %297 = load ptr, ptr %294, align 8, !tbaa !59, !noalias !440
  %298 = icmp eq ptr %297, null
  br i1 %298, label %301, label %299

299:                                              ; preds = %296
  %300 = load ptr, ptr %297, align 8, !tbaa !42, !noalias !440
  br label %301

301:                                              ; preds = %299, %296, %292, %281
  %302 = phi ptr [ %297, %299 ], [ null, %296 ], [ null, %292 ], [ null, %281 ]
  %303 = phi ptr [ %300, %299 ], [ null, %296 ], [ null, %292 ], [ null, %281 ]
  store ptr %303, ptr %3, align 8, !tbaa !44, !alias.scope !440
  store ptr %302, ptr %228, align 8, !tbaa !46, !alias.scope !440
  store ptr %287, ptr %229, align 8, !tbaa !49, !alias.scope !440
  %304 = call ptr @gimple_build_label(ptr noundef nonnull %266) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %304, i32 noundef 0) #26
  %305 = load i32, ptr %267, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %306

306:                                              ; preds = %301, %279, %273
  %307 = phi i32 [ %305, %301 ], [ %268, %279 ], [ %268, %273 ]
  %308 = getelementptr inbounds %struct.function, ptr %264, i64 0, i32 1
  %309 = load ptr, ptr %308, align 8, !tbaa !23
  %310 = getelementptr inbounds %struct.control_flow_graph, ptr %309, i64 0, i32 6
  %311 = load ptr, ptr %310, align 8, !tbaa !33
  %312 = icmp eq ptr %311, null
  br i1 %312, label %320, label %313

313:                                              ; preds = %306
  %314 = load i32, ptr %311, align 8, !tbaa !30
  %315 = icmp ugt i32 %314, %307
  br i1 %315, label %316, label %320

316:                                              ; preds = %313
  %317 = zext i32 %307 to i64
  %318 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %311, i64 0, i32 2, i64 %317
  %319 = load ptr, ptr %318, align 8, !tbaa !5
  br label %320

320:                                              ; preds = %306, %313, %316
  %321 = phi ptr [ %319, %316 ], [ null, %313 ], [ null, %306 ]
  %322 = load ptr, ptr %13, align 8, !tbaa !109
  %323 = icmp eq ptr %321, %322
  br i1 %323, label %324, label %330

324:                                              ; preds = %320
  %325 = icmp eq ptr %231, null
  br i1 %325, label %326, label %328

326:                                              ; preds = %324
  %327 = call ptr @gimple_block_label(ptr noundef %1)
  br label %328

328:                                              ; preds = %326, %324
  %329 = phi ptr [ %231, %324 ], [ %327, %326 ]
  store ptr %329, ptr %265, align 8, !tbaa !16
  br label %330

330:                                              ; preds = %328, %320
  %331 = phi ptr [ %329, %328 ], [ %231, %320 ]
  %332 = add nuw nsw i32 %232, 1
  %333 = icmp eq i32 %332, %223
  br i1 %333, label %334, label %230, !llvm.loop !443

334:                                              ; preds = %330
  %335 = icmp eq ptr %331, null
  br i1 %335, label %336, label %352

336:                                              ; preds = %220, %334
  %337 = load i32, ptr %8, align 8, !tbaa !108
  %338 = and i32 %337, 1
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %352

340:                                              ; preds = %336
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4735, ptr noundef nonnull @.str.2) #26
  br label %352

341:                                              ; preds = %93
  call void @gsi_remove(ptr noundef nonnull %6, i8 noundef zeroext 1) #26
  %342 = load i32, ptr %8, align 8, !tbaa !108
  %343 = or i32 %342, 1
  store i32 %343, ptr %8, align 8, !tbaa !108
  br label %352

344:                                              ; preds = %93
  %345 = and i32 %9, 1
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %352

347:                                              ; preds = %344
  tail call void @redirect_eh_dispatch_edge(ptr noundef nonnull %91, ptr noundef nonnull %0, ptr noundef %1) #26
  br label %352

348:                                              ; preds = %82, %84, %90, %93
  %349 = and i32 %9, 1
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %352

351:                                              ; preds = %348
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4759, ptr noundef nonnull @.str.2) #26
  br label %352

352:                                              ; preds = %217, %123, %340, %336, %334, %112, %110, %351, %348, %344, %347, %93, %93, %93, %93, %341, %93
  %353 = call ptr @ssa_redirect_edge(ptr noundef nonnull %0, ptr noundef %1) #26
  br label %354

354:                                              ; preds = %67, %12, %2, %352, %19
  %355 = phi ptr [ %20, %19 ], [ %353, %352 ], [ null, %2 ], [ null, %12 ], [ %68, %67 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #26
  ret ptr %355
}

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @gimple_redirect_edge_and_branch_force(ptr noundef %0, ptr noundef %1) #9 {
  %3 = tail call ptr @gimple_redirect_edge_and_branch(ptr noundef %0, ptr noundef %1)
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4789, ptr noundef nonnull @.str.2) #26
  br label %6

6:                                                ; preds = %2, %5
  ret ptr null
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define internal zeroext i8 @gimple_can_remove_branch_p(ptr nocapture noundef readonly %0) #17 {
  %2 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 7
  %3 = load i32, ptr %2, align 8, !tbaa !108
  %4 = and i32 %3, 10
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i8
  ret i8 %6
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @remove_bb(ptr noundef %0) #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %4 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %5 = icmp eq ptr %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 9
  %8 = load i32, ptr %7, align 8, !tbaa !120
  %9 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %4, ptr noundef nonnull @.str.177, i32 noundef %8)
  %10 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %11 = and i32 %10, 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %6
  %14 = load ptr, ptr @dump_file, align 8, !tbaa !5
  tail call void @dump_bb(ptr noundef nonnull %0, ptr noundef %14, i32 noundef 0) #26
  %15 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %16 = tail call i32 @fputc(i32 10, ptr %15)
  br label %17

17:                                               ; preds = %6, %13, %1
  %18 = load ptr, ptr @cfun, align 8, !tbaa !5
  %19 = getelementptr inbounds %struct.function, ptr %18, i64 0, i32 4
  %20 = load ptr, ptr %19, align 8, !tbaa !220
  %21 = icmp eq ptr %20, null
  br i1 %21, label %33, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !308
  %25 = getelementptr inbounds %struct.loop, ptr %24, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !311
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %32, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.loop, ptr %24, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !309
  %31 = icmp eq ptr %30, %0
  br i1 %31, label %32, label %33

32:                                               ; preds = %28, %22
  tail call void @free_numbers_of_iterations_estimates_loop(ptr noundef nonnull %24) #26
  br label %33

33:                                               ; preds = %28, %32, %17
  %34 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %35 = load i32, ptr %34, align 8, !tbaa !58
  %36 = and i32 %35, 512
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %210

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = icmp eq ptr %40, null
  br i1 %41, label %210, label %42

42:                                               ; preds = %38
  %43 = load ptr, ptr %40, align 8, !tbaa !59
  %44 = icmp eq ptr %43, null
  br i1 %44, label %210, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %struct.gimple_seq_d, ptr %43, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !61, !noalias !444
  store ptr %47, ptr %2, align 8, !tbaa.struct !194
  %48 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr %43, ptr %48, align 8, !tbaa.struct !195
  %49 = getelementptr inbounds i8, ptr %2, i64 16
  store ptr %0, ptr %49, align 8, !tbaa.struct !196
  %50 = icmp eq ptr %47, null
  br i1 %50, label %210, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 5
  %53 = getelementptr inbounds i8, ptr %3, i64 8
  %54 = getelementptr inbounds i8, ptr %3, i64 16
  br label %55

55:                                               ; preds = %51, %207
  %56 = phi ptr [ %47, %51 ], [ %208, %207 ]
  %57 = load ptr, ptr %56, align 8, !tbaa !47
  %58 = load i32, ptr %57, align 8
  %59 = and i32 %58, 255
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %61, label %171

61:                                               ; preds = %55
  %62 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %63
  %65 = load i64, ptr %64, align 8, !tbaa !50
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %61
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  %68 = load i32, ptr %57, align 8
  br label %69

69:                                               ; preds = %61, %67
  %70 = phi i32 [ %58, %61 ], [ %68, %67 ]
  %71 = getelementptr inbounds i8, ptr %57, i64 %65
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i64, ptr %72, align 8
  %74 = and i64 %73, 65536
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %97

76:                                               ; preds = %69
  %77 = and i32 %70, 255
  %78 = add nsw i32 %77, -1
  %79 = icmp ult i32 %78, 9
  call void @llvm.assume(i1 %79)
  %80 = zext i32 %77 to i64
  %81 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !16
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %83
  %85 = load i64, ptr %84, align 8, !tbaa !50
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %76
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %88

88:                                               ; preds = %87, %76
  %89 = getelementptr inbounds i8, ptr %57, i64 %85
  %90 = load ptr, ptr %89, align 8, !tbaa !5
  %91 = getelementptr inbounds %struct.tree_decl_common, ptr %90, i64 0, i32 2
  %92 = load i64, ptr %91, align 8
  %93 = and i64 %92, 256
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %171, label %95

95:                                               ; preds = %88
  %96 = load i32, ptr %57, align 8
  br label %97

97:                                               ; preds = %95, %69
  %98 = phi i32 [ %96, %95 ], [ %70, %69 ]
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %99 = and i32 %98, 255
  %100 = add nsw i32 %99, -1
  %101 = icmp ult i32 %100, 9
  call void @llvm.assume(i1 %101)
  %102 = zext i32 %99 to i64
  %103 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %102
  %104 = load i32, ptr %103, align 4, !tbaa !16
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %105
  %107 = load i64, ptr %106, align 8, !tbaa !50
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %97
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %110

110:                                              ; preds = %109, %97
  %111 = getelementptr inbounds i8, ptr %57, i64 %107
  %112 = load ptr, ptr %111, align 8, !tbaa !5
  %113 = getelementptr inbounds %struct.tree_decl_common, ptr %112, i64 0, i32 2
  %114 = load i64, ptr %113, align 8
  %115 = and i64 %114, 256
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %153, label %117

117:                                              ; preds = %110
  %118 = load i32, ptr %57, align 8
  %119 = and i32 %118, 255
  %120 = add nsw i32 %119, -1
  %121 = icmp ult i32 %120, 9
  call void @llvm.assume(i1 %121)
  %122 = zext i32 %119 to i64
  %123 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %122
  %124 = load i32, ptr %123, align 4, !tbaa !16
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %125
  %127 = load i64, ptr %126, align 8, !tbaa !50
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %117
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %130

130:                                              ; preds = %129, %117
  %131 = getelementptr inbounds i8, ptr %57, i64 %127
  %132 = load ptr, ptr %131, align 8, !tbaa !5
  %133 = getelementptr inbounds %struct.tree_decl_common, ptr %132, i64 0, i32 2
  %134 = load i64, ptr %133, align 8
  %135 = and i64 %134, -257
  store i64 %135, ptr %133, align 8
  %136 = load i32, ptr %57, align 8
  %137 = and i32 %136, 255
  %138 = add nsw i32 %137, -1
  %139 = icmp ult i32 %138, 9
  call void @llvm.assume(i1 %139)
  %140 = zext i32 %137 to i64
  %141 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !16
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %143
  %145 = load i64, ptr %144, align 8, !tbaa !50
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %130
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %148

148:                                              ; preds = %147, %130
  %149 = getelementptr inbounds i8, ptr %57, i64 %145
  %150 = load ptr, ptr %149, align 8, !tbaa !5
  %151 = load i64, ptr %150, align 8
  %152 = or i64 %151, 65536
  store i64 %152, ptr %150, align 8
  br label %153

153:                                              ; preds = %148, %110
  %154 = load ptr, ptr %52, align 8, !tbaa !38
  %155 = getelementptr inbounds %struct.basic_block_def, ptr %154, i64 0, i32 13
  %156 = load i32, ptr %155, align 8, !tbaa !58, !noalias !447
  %157 = and i32 %156, 512
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %168

159:                                              ; preds = %153
  %160 = getelementptr inbounds %struct.basic_block_def, ptr %154, i64 0, i32 7
  %161 = load ptr, ptr %160, align 8, !tbaa !16, !noalias !447
  %162 = icmp eq ptr %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = load ptr, ptr %161, align 8, !tbaa !59, !noalias !447
  %165 = icmp eq ptr %164, null
  br i1 %165, label %168, label %166

166:                                              ; preds = %163
  %167 = load ptr, ptr %164, align 8, !tbaa !42, !noalias !447
  br label %168

168:                                              ; preds = %153, %159, %163, %166
  %169 = phi ptr [ %164, %166 ], [ null, %163 ], [ null, %159 ], [ null, %153 ]
  %170 = phi ptr [ %167, %166 ], [ null, %163 ], [ null, %159 ], [ null, %153 ]
  store ptr %170, ptr %3, align 8, !tbaa.struct !194
  store ptr %169, ptr %53, align 8, !tbaa.struct !195
  store ptr %154, ptr %54, align 8, !tbaa.struct !196
  call void @gsi_remove(ptr noundef nonnull %2, i8 noundef zeroext 0) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef nonnull %57, i32 noundef 0) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %185

171:                                              ; preds = %88, %55
  %172 = load ptr, ptr @cfun, align 8, !tbaa !5
  %173 = icmp eq ptr %172, null
  br i1 %173, label %184, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds %struct.function, ptr %172, i64 0, i32 3
  %176 = load ptr, ptr %175, align 8, !tbaa !354
  %177 = icmp eq ptr %176, null
  br i1 %177, label %184, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds %struct.gimple_df, ptr %176, i64 0, i32 10
  %180 = load i8, ptr %179, align 8
  %181 = and i8 %180, 1
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %184, label %183

183:                                              ; preds = %178
  call void @release_defs(ptr noundef nonnull %57) #26
  br label %184

184:                                              ; preds = %171, %174, %183, %178
  call void @gsi_remove(ptr noundef nonnull %2, i8 noundef zeroext 1) #26
  br label %185

185:                                              ; preds = %184, %168
  %186 = load ptr, ptr %2, align 8, !tbaa !44
  %187 = icmp eq ptr %186, null
  br i1 %187, label %188, label %204

188:                                              ; preds = %185
  %189 = load i32, ptr %34, align 8, !tbaa !58, !noalias !450
  %190 = and i32 %189, 512
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %201

192:                                              ; preds = %188
  %193 = load ptr, ptr %39, align 8, !tbaa !16, !noalias !450
  %194 = icmp eq ptr %193, null
  br i1 %194, label %201, label %195

195:                                              ; preds = %192
  %196 = load ptr, ptr %193, align 8, !tbaa !59, !noalias !450
  %197 = icmp eq ptr %196, null
  br i1 %197, label %201, label %198

198:                                              ; preds = %195
  %199 = getelementptr inbounds %struct.gimple_seq_d, ptr %196, i64 0, i32 1
  %200 = load ptr, ptr %199, align 8, !tbaa !61, !noalias !450
  br label %201

201:                                              ; preds = %188, %192, %195, %198
  %202 = phi ptr [ %196, %198 ], [ null, %195 ], [ null, %192 ], [ null, %188 ]
  %203 = phi ptr [ %200, %198 ], [ null, %195 ], [ null, %192 ], [ null, %188 ]
  store ptr %203, ptr %2, align 8, !tbaa.struct !194
  store ptr %202, ptr %48, align 8, !tbaa.struct !195
  store ptr %0, ptr %49, align 8, !tbaa.struct !196
  br label %207

204:                                              ; preds = %185
  %205 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %186, i64 0, i32 1
  %206 = load ptr, ptr %205, align 8, !tbaa !67
  store ptr %206, ptr %2, align 8, !tbaa !44
  br label %207

207:                                              ; preds = %204, %201
  %208 = phi ptr [ %206, %204 ], [ %203, %201 ]
  %209 = icmp eq ptr %208, null
  br i1 %209, label %210, label %55, !llvm.loop !453

210:                                              ; preds = %207, %45, %33, %38, %42
  call void @remove_phi_nodes(ptr noundef %0) #26
  %211 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  %212 = load ptr, ptr %211, align 8, !tbaa !105
  %213 = icmp eq ptr %212, null
  br i1 %213, label %223, label %214

214:                                              ; preds = %210, %218
  %215 = phi ptr [ %221, %218 ], [ %212, %210 ]
  %216 = load i32, ptr %215, align 8, !tbaa !106
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %223, label %218

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.VEC_edge_base, ptr %215, i64 0, i32 2, i64 0
  %220 = load ptr, ptr %219, align 8, !tbaa !5
  call void @remove_edge(ptr noundef %220) #26
  %221 = load ptr, ptr %211, align 8, !tbaa !105
  %222 = icmp eq ptr %221, null
  br i1 %222, label %223, label %214, !llvm.loop !454

223:                                              ; preds = %214, %218, %210
  %224 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  store ptr null, ptr %224, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @gimple_split_block(ptr noundef %0, ptr noundef readonly %1) #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %4 = tail call ptr @create_empty_bb(ptr noundef %0) #26
  %5 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !105
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 1
  store ptr %6, ptr %7, align 8, !tbaa !105
  store ptr null, ptr %5, align 8, !tbaa !105
  br label %8

8:                                                ; preds = %2, %27
  %9 = phi i32 [ 0, %2 ], [ %28, %27 ]
  %10 = load ptr, ptr %7, align 8, !tbaa !5
  %11 = icmp eq ptr %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = load i32, ptr %10, align 8, !tbaa !106
  br label %14

14:                                               ; preds = %12, %8
  %15 = phi i32 [ %13, %12 ], [ 0, %8 ]
  %16 = icmp eq i32 %15, %9
  br i1 %16, label %29, label %17

17:                                               ; preds = %14
  %18 = zext i32 %9 to i64
  %19 = getelementptr inbounds %struct.VEC_edge_base, ptr %10, i64 0, i32 2, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  store ptr %4, ptr %20, align 8, !tbaa !295
  %21 = load ptr, ptr %7, align 8, !tbaa !5
  %22 = icmp eq ptr %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = load i32, ptr %21, align 8, !tbaa !106
  %25 = icmp ult i32 %9, %24
  br i1 %25, label %27, label %26

26:                                               ; preds = %23, %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %27

27:                                               ; preds = %23, %26
  %28 = add i32 %9, 1
  br label %8, !llvm.loop !455

29:                                               ; preds = %14
  %30 = icmp eq ptr %1, null
  br i1 %30, label %37, label %31

31:                                               ; preds = %29
  %32 = load i32, ptr %1, align 8
  %33 = freeze i32 %32
  %34 = and i32 %33, 255
  %35 = icmp eq i32 %34, 4
  %36 = select i1 %35, ptr null, ptr %1
  br label %37

37:                                               ; preds = %31, %29
  %38 = phi ptr [ null, %29 ], [ %36, %31 ]
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %40 = load i32, ptr %39, align 8, !tbaa !58, !noalias !456
  %41 = and i32 %40, 512
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %101

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %45 = load ptr, ptr %44, align 8, !tbaa !16, !noalias !456
  %46 = icmp eq ptr %45, null
  br i1 %46, label %101, label %47

47:                                               ; preds = %43
  %48 = load ptr, ptr %45, align 8, !tbaa !59, !noalias !456
  %49 = icmp eq ptr %48, null
  br i1 %49, label %101, label %50

50:                                               ; preds = %47
  %51 = load ptr, ptr %48, align 8, !tbaa !42, !noalias !456
  store ptr %51, ptr %3, align 8, !tbaa.struct !194
  %52 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %48, ptr %52, align 8, !tbaa.struct !195
  %53 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %0, ptr %53, align 8, !tbaa.struct !196
  %54 = icmp eq ptr %51, null
  br i1 %54, label %101, label %55

55:                                               ; preds = %50
  %56 = icmp eq ptr %38, null
  br i1 %56, label %57, label %67

57:                                               ; preds = %55, %63
  %58 = phi ptr [ %65, %63 ], [ %51, %55 ]
  %59 = load ptr, ptr %58, align 8, !tbaa !47
  %60 = load i32, ptr %59, align 8
  %61 = and i32 %60, 255
  %62 = icmp eq i32 %61, 4
  br i1 %62, label %63, label %81

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %58, i64 0, i32 2
  %65 = load ptr, ptr %64, align 8, !tbaa !53
  store ptr %65, ptr %3, align 8, !tbaa !44
  %66 = icmp eq ptr %65, null
  br i1 %66, label %101, label %57, !llvm.loop !459

67:                                               ; preds = %55, %77
  %68 = phi ptr [ %76, %77 ], [ %51, %55 ]
  %69 = load ptr, ptr %68, align 8, !tbaa !47
  %70 = load i32, ptr %69, align 8
  %71 = and i32 %70, 255
  %72 = icmp ne i32 %71, 4
  %73 = icmp eq ptr %38, %69
  %74 = and i1 %72, %73
  %75 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %68, i64 0, i32 2
  %76 = load ptr, ptr %75, align 8, !tbaa !53
  br i1 %74, label %79, label %77

77:                                               ; preds = %67
  %78 = icmp eq ptr %76, null
  br i1 %78, label %101, label %67, !llvm.loop !459

79:                                               ; preds = %67
  store ptr %76, ptr %3, align 8, !tbaa !44
  %80 = icmp eq ptr %76, null
  br i1 %80, label %101, label %81

81:                                               ; preds = %57, %79
  %82 = call ptr @gsi_split_seq_before(ptr noundef nonnull %3) #26
  %83 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 13
  %84 = load i32, ptr %83, align 8, !tbaa !58
  %85 = and i32 %84, 512
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %88, label %87

87:                                               ; preds = %81
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 248, ptr noundef nonnull @.str.2) #26
  br label %88

88:                                               ; preds = %81, %87
  %89 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 7
  %90 = load ptr, ptr %89, align 8, !tbaa !16
  store ptr %82, ptr %90, align 8, !tbaa !59
  %91 = icmp eq ptr %82, null
  br i1 %91, label %101, label %92

92:                                               ; preds = %88
  %93 = load ptr, ptr %82, align 8, !tbaa !42, !noalias !460
  %94 = icmp eq ptr %93, null
  br i1 %94, label %101, label %95

95:                                               ; preds = %92, %95
  %96 = phi ptr [ %99, %95 ], [ %93, %92 ]
  %97 = load ptr, ptr %96, align 8, !tbaa !47
  call void @gimple_set_bb(ptr noundef %97, ptr noundef %4) #26
  %98 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %96, i64 0, i32 2
  %99 = load ptr, ptr %98, align 8, !tbaa !53
  %100 = icmp eq ptr %99, null
  br i1 %100, label %101, label %95, !llvm.loop !463

101:                                              ; preds = %77, %63, %95, %37, %43, %47, %88, %50, %92, %79
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  ret ptr %4
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @gimple_move_block_after(ptr noundef %0, ptr noundef %1) #9 {
  %3 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !38
  %5 = icmp eq ptr %4, %1
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @unlink_block(ptr noundef nonnull %0) #26
  tail call void @link_block(ptr noundef nonnull %0, ptr noundef %1) #26
  br label %7

7:                                                ; preds = %2, %6
  ret i8 1
}

; Function Attrs: nounwind sspstrong uwtable
define internal zeroext i8 @gimple_can_merge_blocks_p(ptr nocapture noundef readonly %0, ptr noundef readonly %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = load ptr, ptr %3, align 8, !tbaa !105
  %5 = icmp eq ptr %4, null
  br i1 %5, label %153, label %6

6:                                                ; preds = %2
  %7 = load i32, ptr %4, align 8, !tbaa !106
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %153

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.VEC_edge_base, ptr %4, i64 0, i32 2, i64 0
  %11 = load ptr, ptr %10, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.edge_def, ptr %11, i64 0, i32 7
  %13 = load i32, ptr %12, align 8, !tbaa !108
  %14 = and i32 %13, 10
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %153

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.edge_def, ptr %11, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !109
  %19 = icmp eq ptr %18, %1
  br i1 %19, label %20, label %153

20:                                               ; preds = %16
  %21 = load ptr, ptr %1, align 8, !tbaa !216
  %22 = icmp eq ptr %21, null
  br i1 %22, label %153, label %23

23:                                               ; preds = %20
  %24 = load i32, ptr %21, align 8, !tbaa !106
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %153

26:                                               ; preds = %23
  %27 = load ptr, ptr @cfun, align 8, !tbaa !5
  %28 = getelementptr inbounds %struct.function, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !23
  %30 = getelementptr inbounds %struct.control_flow_graph, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !35
  %32 = icmp eq ptr %31, %1
  br i1 %32, label %153, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %35 = load i32, ptr %34, align 8, !tbaa !58, !noalias !464
  %36 = and i32 %35, 512
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %93

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %40 = load ptr, ptr %39, align 8, !tbaa !16, !noalias !464
  %41 = icmp eq ptr %40, null
  br i1 %41, label %93, label %42

42:                                               ; preds = %38
  %43 = load ptr, ptr %40, align 8, !tbaa !59, !noalias !464
  %44 = icmp eq ptr %43, null
  br i1 %44, label %93, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %struct.gimple_seq_d, ptr %43, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !61, !noalias !464
  %48 = icmp eq ptr %47, null
  br i1 %48, label %93, label %49

49:                                               ; preds = %45, %55
  %50 = phi ptr [ %57, %55 ], [ %47, %45 ]
  %51 = load ptr, ptr %50, align 8, !tbaa !47
  %52 = load i32, ptr %51, align 8
  %53 = and i32 %52, 255
  %54 = icmp eq i32 %53, 2
  br i1 %54, label %55, label %59

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %50, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !67
  %58 = icmp eq ptr %57, null
  br i1 %58, label %93, label %49, !llvm.loop !68

59:                                               ; preds = %49
  %60 = trunc i32 %52 to i8
  switch i8 %60, label %80 [
    i8 1, label %153
    i8 5, label %153
    i8 3, label %153
    i8 9, label %153
    i8 14, label %153
    i8 8, label %61
    i8 15, label %153
    i8 7, label %76
    i8 26, label %153
    i8 27, label %153
    i8 23, label %153
    i8 30, label %153
    i8 31, label %153
    i8 32, label %153
    i8 29, label %153
    i8 24, label %153
    i8 25, label %153
    i8 22, label %153
    i8 28, label %153
    i8 19, label %153
    i8 20, label %153
    i8 21, label %153
  ]

61:                                               ; preds = %59
  %62 = tail call i32 @gimple_call_flags(ptr noundef nonnull %51) #26
  %63 = and i32 %62, 3
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %73

65:                                               ; preds = %61
  %66 = load ptr, ptr @cfun, align 8, !tbaa !5
  %67 = getelementptr inbounds %struct.function, ptr %66, i64 0, i32 20
  %68 = load i32, ptr %67, align 8
  %69 = and i32 %68, 1048576
  %70 = and i32 %62, 8
  %71 = or i32 %69, %70
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %80, label %153

73:                                               ; preds = %61
  %74 = and i32 %62, 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %80, label %153

76:                                               ; preds = %59
  %77 = getelementptr i8, ptr %51, i64 75
  %78 = load i8, ptr %77, align 1, !tbaa !16
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %153

80:                                               ; preds = %59, %65, %73, %76
  %81 = tail call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %51) #26
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %153

83:                                               ; preds = %80
  %84 = load i32, ptr %51, align 8
  %85 = and i32 %84, 255
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %87, label %93

87:                                               ; preds = %83
  %88 = tail call fastcc ptr @gimple_label_label(ptr noundef nonnull %51)
  %89 = getelementptr inbounds %struct.tree_decl_common, ptr %88, i64 0, i32 2
  %90 = load i64, ptr %89, align 8
  %91 = and i64 %90, 256
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %153

93:                                               ; preds = %55, %33, %38, %42, %45, %87, %83
  %94 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 13
  %95 = load i32, ptr %94, align 8, !tbaa !58, !noalias !467
  %96 = and i32 %95, 512
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %132

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 7
  %100 = load ptr, ptr %99, align 8, !tbaa !16, !noalias !467
  %101 = icmp eq ptr %100, null
  br i1 %101, label %132, label %102

102:                                              ; preds = %98
  %103 = load ptr, ptr %100, align 8, !tbaa !59, !noalias !467
  %104 = icmp eq ptr %103, null
  br i1 %104, label %132, label %105

105:                                              ; preds = %102
  %106 = load ptr, ptr %103, align 8, !tbaa !42, !noalias !467
  %107 = icmp eq ptr %106, null
  br i1 %107, label %132, label %108

108:                                              ; preds = %105, %128
  %109 = phi ptr [ %130, %128 ], [ %106, %105 ]
  %110 = load ptr, ptr %109, align 8, !tbaa !47
  %111 = load i32, ptr %110, align 8
  %112 = and i32 %111, 255
  %113 = icmp eq i32 %112, 4
  br i1 %113, label %114, label %132

114:                                              ; preds = %108
  %115 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %116
  %118 = load i64, ptr %117, align 8, !tbaa !50
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %114
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %121

121:                                              ; preds = %114, %120
  %122 = getelementptr inbounds i8, ptr %110, i64 %118
  %123 = load ptr, ptr %122, align 8, !tbaa !5
  %124 = getelementptr inbounds %struct.tree_decl_common, ptr %123, i64 0, i32 2
  %125 = load i64, ptr %124, align 8
  %126 = and i64 %125, 4096
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %153, label %128

128:                                              ; preds = %121
  %129 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %109, i64 0, i32 2
  %130 = load ptr, ptr %129, align 8, !tbaa !53
  %131 = icmp eq ptr %130, null
  br i1 %131, label %132, label %108, !llvm.loop !470

132:                                              ; preds = %128, %108, %93, %98, %102, %105
  %133 = load ptr, ptr @cfun, align 8, !tbaa !5
  %134 = getelementptr inbounds %struct.function, ptr %133, i64 0, i32 4
  %135 = load ptr, ptr %134, align 8, !tbaa !220
  %136 = icmp eq ptr %135, null
  br i1 %136, label %143, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 3
  %139 = load ptr, ptr %138, align 8, !tbaa !308
  %140 = getelementptr inbounds %struct.loop, ptr %139, i64 0, i32 3
  %141 = load ptr, ptr %140, align 8, !tbaa !311
  %142 = icmp eq ptr %141, %1
  br i1 %142, label %153, label %143

143:                                              ; preds = %137, %132
  %144 = tail call fastcc ptr @phi_nodes(ptr noundef nonnull %1)
  %145 = icmp eq ptr %144, null
  br i1 %145, label %152, label %146

146:                                              ; preds = %143
  %147 = load ptr, ptr %144, align 8, !tbaa !42
  %148 = icmp eq ptr %147, null
  br i1 %148, label %152, label %149

149:                                              ; preds = %146
  %150 = tail call zeroext i8 @name_mappings_registered_p() #26
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %143, %149, %146
  br label %153

153:                                              ; preds = %121, %73, %65, %76, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %59, %20, %2, %149, %137, %87, %80, %26, %23, %16, %9, %6, %152
  %154 = phi i8 [ 1, %152 ], [ 0, %6 ], [ 0, %9 ], [ 0, %16 ], [ 0, %23 ], [ 0, %26 ], [ 0, %80 ], [ 0, %87 ], [ 0, %137 ], [ 0, %149 ], [ 0, %2 ], [ 0, %20 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %59 ], [ 0, %76 ], [ 0, %65 ], [ 0, %73 ], [ 0, %121 ]
  ret i8 %154
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_merge_blocks(ptr noundef %0, ptr noundef %1) #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = alloca %struct.gimple_stmt_iterator, align 8
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  %6 = alloca %struct.immediate_use_iterator_d, align 8
  %7 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  %8 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 13
  %9 = load i32, ptr %8, align 8, !tbaa !58
  %10 = and i32 %9, 512
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %13

13:                                               ; preds = %12, %2
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 7
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = icmp eq ptr %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.gimple_bb_info, ptr %15, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !296
  br label %20

20:                                               ; preds = %13, %17
  %21 = phi ptr [ %19, %17 ], [ null, %13 ]
  %22 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %23 = icmp eq ptr %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 9
  %26 = load i32, ptr %25, align 8, !tbaa !120
  %27 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 9
  %28 = load i32, ptr %27, align 8, !tbaa !120
  %29 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %22, ptr noundef nonnull @.str.178, i32 noundef %26, i32 noundef %28)
  br label %30

30:                                               ; preds = %24, %20
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %32 = load i32, ptr %31, align 8, !tbaa !58, !noalias !471
  %33 = and i32 %32, 512
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %45

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %37 = load ptr, ptr %36, align 8, !tbaa !16, !noalias !471
  %38 = icmp eq ptr %37, null
  br i1 %38, label %45, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr %37, align 8, !tbaa !59, !noalias !471
  %41 = icmp eq ptr %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.gimple_seq_d, ptr %40, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !61, !noalias !471
  br label %45

45:                                               ; preds = %30, %35, %39, %42
  %46 = phi ptr [ %40, %42 ], [ null, %39 ], [ null, %35 ], [ null, %30 ]
  %47 = phi ptr [ %44, %42 ], [ null, %39 ], [ null, %35 ], [ null, %30 ]
  store ptr %47, ptr %4, align 8, !tbaa.struct !194
  %48 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %46, ptr %48, align 8, !tbaa.struct !195
  %49 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %0, ptr %49, align 8, !tbaa.struct !196
  %50 = icmp eq ptr %21, null
  br i1 %50, label %60, label %51

51:                                               ; preds = %45
  %52 = load ptr, ptr %21, align 8, !tbaa !42, !noalias !474
  %53 = icmp eq ptr %52, null
  br i1 %53, label %60, label %54

54:                                               ; preds = %51
  %55 = load ptr, ptr %52, align 8, !tbaa !47, !noalias !474
  %56 = icmp eq ptr %55, null
  br i1 %56, label %63, label %57

57:                                               ; preds = %54
  %58 = getelementptr i8, ptr %55, i64 16
  %59 = load ptr, ptr %58, align 8, !tbaa !16, !noalias !474
  br label %63

60:                                               ; preds = %51, %45
  store ptr null, ptr %5, align 8, !tbaa.struct !194
  %61 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %21, ptr %61, align 8, !tbaa.struct !195
  %62 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr null, ptr %62, align 8, !tbaa.struct !196
  br label %232

63:                                               ; preds = %57, %54
  %64 = phi ptr [ null, %54 ], [ %59, %57 ]
  store ptr %52, ptr %5, align 8, !tbaa.struct !194
  %65 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %21, ptr %65, align 8, !tbaa.struct !195
  %66 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %64, ptr %66, align 8, !tbaa.struct !196
  %67 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 3
  %68 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 3
  %69 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %6, i64 0, i32 1
  %70 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %6, i64 0, i32 2
  %71 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %6, i64 0, i32 3
  %72 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %6, i64 0, i32 2, i32 1
  br label %73

73:                                               ; preds = %63, %228
  %74 = phi ptr [ %52, %63 ], [ %230, %228 ]
  %75 = load ptr, ptr %74, align 8, !tbaa !47
  %76 = getelementptr i8, ptr %75, i64 40
  %77 = load ptr, ptr %76, align 8, !tbaa !16
  %78 = getelementptr %struct.gimple_statement_phi, ptr %75, i64 0, i32 4, i64 0, i32 0, i32 3
  %79 = load ptr, ptr %78, align 8, !tbaa !274
  %80 = load ptr, ptr %79, align 8, !tbaa !5
  %81 = freeze ptr %80
  %82 = call zeroext i8 @is_gimple_reg(ptr noundef %77) #26
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %73
  %85 = call zeroext i8 @may_propagate_copy(ptr noundef %77, ptr noundef %81) #26
  %86 = icmp ne i8 %85, 0
  br label %87

87:                                               ; preds = %84, %73
  %88 = phi i1 [ true, %73 ], [ %86, %84 ]
  %89 = load ptr, ptr @cfun, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.function, ptr %89, i64 0, i32 4
  %91 = load ptr, ptr %90, align 8, !tbaa !220
  %92 = icmp eq ptr %91, null
  br i1 %92, label %109, label %93

93:                                               ; preds = %87
  %94 = load i32, ptr %91, align 8, !tbaa !477
  %95 = and i32 %94, 32
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %109, label %97

97:                                               ; preds = %93
  %98 = call zeroext i8 @is_gimple_reg(ptr noundef %77) #26
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %109, label %100

100:                                              ; preds = %97
  %101 = load i64, ptr %81, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 141
  br i1 %103, label %104, label %109

104:                                              ; preds = %100
  %105 = load ptr, ptr %67, align 8, !tbaa !308
  %106 = load ptr, ptr %68, align 8, !tbaa !308
  %107 = icmp eq ptr %105, %106
  %108 = select i1 %107, i1 %88, i1 false
  br i1 %108, label %116, label %110

109:                                              ; preds = %100, %97, %93, %87
  br i1 %88, label %116, label %110

110:                                              ; preds = %104, %109
  %111 = call zeroext i8 @is_gimple_reg(ptr noundef %77) #26
  %112 = icmp eq i8 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %110
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1596, ptr noundef nonnull @.str.2) #26
  br label %114

114:                                              ; preds = %110, %113
  %115 = call ptr @gimple_build_assign_stat(ptr noundef %77, ptr noundef %81) #26
  call void @gsi_insert_after(ptr noundef nonnull %4, ptr noundef %115, i32 noundef 0) #26
  br label %228

116:                                              ; preds = %104, %109
  %117 = call zeroext i8 @is_gimple_reg(ptr noundef %77) #26
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %227

119:                                              ; preds = %116
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %6) #26
  %120 = getelementptr inbounds %struct.tree_ssa_name, ptr %77, i64 0, i32 5
  store ptr %120, ptr %69, align 8, !tbaa !212
  %121 = getelementptr inbounds %struct.tree_ssa_name, ptr %77, i64 0, i32 5, i32 1
  %122 = load ptr, ptr %121, align 8, !tbaa !208
  store ptr %122, ptr %6, align 8, !tbaa !214
  %123 = icmp eq ptr %122, %120
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %70, i8 0, i64 40, i1 false)
  br i1 %123, label %219, label %124

124:                                              ; preds = %119
  call fastcc void @link_use_stmts_after(ptr noundef %122, ptr noundef nonnull %6)
  %125 = load ptr, ptr %6, align 8, !tbaa !214
  %126 = load ptr, ptr %69, align 8, !tbaa !212
  %127 = icmp eq ptr %125, %126
  br i1 %127, label %219, label %128

128:                                              ; preds = %124
  %129 = icmp eq ptr %81, null
  %130 = getelementptr inbounds %struct.tree_ssa_name, ptr %81, i64 0, i32 5
  %131 = getelementptr inbounds %struct.tree_ssa_name, ptr %81, i64 0, i32 5, i32 1
  br i1 %129, label %132, label %169

132:                                              ; preds = %128, %147
  %133 = phi ptr [ %149, %147 ], [ %126, %128 ]
  %134 = phi ptr [ %148, %147 ], [ %125, %128 ]
  %135 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !208
  store ptr %136, ptr %71, align 8, !tbaa !215
  %137 = icmp eq ptr %134, %70
  br i1 %137, label %140, label %151

138:                                              ; preds = %161
  %139 = load ptr, ptr %69, align 8, !tbaa !212
  br label %140

140:                                              ; preds = %138, %132
  %141 = phi ptr [ %139, %138 ], [ %133, %132 ]
  %142 = load ptr, ptr %72, align 8, !tbaa !208
  store ptr %142, ptr %6, align 8, !tbaa !214
  %143 = icmp eq ptr %142, %141
  br i1 %143, label %144, label %147

144:                                              ; preds = %140
  %145 = load ptr, ptr %70, align 8, !tbaa !218
  %146 = icmp eq ptr %145, null
  br i1 %146, label %219, label %214

147:                                              ; preds = %140
  call fastcc void @link_use_stmts_after(ptr noundef %142, ptr noundef nonnull %6)
  %148 = load ptr, ptr %6, align 8, !tbaa !214
  %149 = load ptr, ptr %69, align 8, !tbaa !212
  %150 = icmp eq ptr %148, %149
  br i1 %150, label %219, label %132, !llvm.loop !478

151:                                              ; preds = %132, %166
  %152 = phi ptr [ %164, %166 ], [ %134, %132 ]
  %153 = load ptr, ptr %152, align 8, !tbaa !218
  %154 = icmp eq ptr %153, null
  br i1 %154, label %161, label %155

155:                                              ; preds = %151
  %156 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %152, i64 0, i32 1
  %157 = load ptr, ptr %156, align 8, !tbaa !208
  %158 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %153, i64 0, i32 1
  store ptr %157, ptr %158, align 8, !tbaa !208
  %159 = load ptr, ptr %156, align 8, !tbaa !208
  store ptr %153, ptr %159, align 8, !tbaa !218
  %160 = getelementptr inbounds i8, ptr %152, i64 8
  store i64 0, ptr %160, align 8
  br label %161

161:                                              ; preds = %155, %151
  %162 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %152, i64 0, i32 3
  %163 = load ptr, ptr %162, align 8, !tbaa !274
  store ptr null, ptr %163, align 8, !tbaa !5
  store ptr null, ptr %152, align 8, !tbaa !218
  %164 = load ptr, ptr %71, align 8, !tbaa !215
  %165 = icmp eq ptr %164, %70
  br i1 %165, label %138, label %166

166:                                              ; preds = %161
  %167 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %164, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !208
  store ptr %168, ptr %71, align 8, !tbaa !215
  br label %151

169:                                              ; preds = %128, %210
  %170 = phi ptr [ %212, %210 ], [ %126, %128 ]
  %171 = phi ptr [ %211, %210 ], [ %125, %128 ]
  %172 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %171, i64 0, i32 1
  %173 = load ptr, ptr %172, align 8, !tbaa !208
  store ptr %173, ptr %71, align 8, !tbaa !215
  %174 = icmp eq ptr %171, %70
  br i1 %174, label %203, label %175

175:                                              ; preds = %169, %198
  %176 = phi ptr [ %196, %198 ], [ %171, %169 ]
  %177 = load ptr, ptr %176, align 8, !tbaa !218
  %178 = icmp eq ptr %177, null
  br i1 %178, label %184, label %179

179:                                              ; preds = %175
  %180 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %176, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !208
  %182 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %177, i64 0, i32 1
  store ptr %181, ptr %182, align 8, !tbaa !208
  %183 = load ptr, ptr %180, align 8, !tbaa !208
  store ptr %177, ptr %183, align 8, !tbaa !218
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %176, i8 0, i64 16, i1 false)
  br label %184

184:                                              ; preds = %179, %175
  %185 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %176, i64 0, i32 3
  %186 = load ptr, ptr %185, align 8, !tbaa !274
  store ptr %81, ptr %186, align 8, !tbaa !5
  %187 = load i64, ptr %81, align 8
  %188 = and i64 %187, 65535
  %189 = icmp eq i64 %188, 141
  br i1 %189, label %191, label %190

190:                                              ; preds = %184
  store ptr null, ptr %176, align 8, !tbaa !218
  br label %195

191:                                              ; preds = %184
  store ptr %130, ptr %176, align 8, !tbaa !218
  %192 = load ptr, ptr %131, align 8, !tbaa !208
  %193 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %176, i64 0, i32 1
  store ptr %192, ptr %193, align 8, !tbaa !208
  %194 = load ptr, ptr %131, align 8, !tbaa !208
  store ptr %176, ptr %194, align 8, !tbaa !218
  store ptr %176, ptr %131, align 8, !tbaa !208
  br label %195

195:                                              ; preds = %190, %191
  %196 = load ptr, ptr %71, align 8, !tbaa !215
  store ptr %196, ptr %6, align 8, !tbaa !214
  %197 = icmp eq ptr %196, %70
  br i1 %197, label %201, label %198

198:                                              ; preds = %195
  %199 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %196, i64 0, i32 1
  %200 = load ptr, ptr %199, align 8, !tbaa !208
  store ptr %200, ptr %71, align 8, !tbaa !215
  br label %175

201:                                              ; preds = %195
  %202 = load ptr, ptr %69, align 8, !tbaa !212
  br label %203

203:                                              ; preds = %201, %169
  %204 = phi ptr [ %202, %201 ], [ %170, %169 ]
  %205 = load ptr, ptr %72, align 8, !tbaa !208
  store ptr %205, ptr %6, align 8, !tbaa !214
  %206 = icmp eq ptr %205, %204
  br i1 %206, label %207, label %210

207:                                              ; preds = %203
  %208 = load ptr, ptr %70, align 8, !tbaa !218
  %209 = icmp eq ptr %208, null
  br i1 %209, label %219, label %214

210:                                              ; preds = %203
  call fastcc void @link_use_stmts_after(ptr noundef %205, ptr noundef nonnull %6)
  %211 = load ptr, ptr %6, align 8, !tbaa !214
  %212 = load ptr, ptr %69, align 8, !tbaa !212
  %213 = icmp eq ptr %211, %212
  br i1 %213, label %219, label %169, !llvm.loop !478

214:                                              ; preds = %207, %144
  %215 = phi ptr [ %145, %144 ], [ %208, %207 ]
  %216 = phi ptr [ %141, %144 ], [ %204, %207 ]
  %217 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %215, i64 0, i32 1
  store ptr %216, ptr %217, align 8, !tbaa !208
  %218 = load ptr, ptr %72, align 8, !tbaa !208
  store ptr %215, ptr %218, align 8, !tbaa !218
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %70, i8 0, i64 16, i1 false)
  br label %219

219:                                              ; preds = %210, %147, %214, %207, %144, %119, %124
  %220 = load i64, ptr %77, align 8
  %221 = and i64 %220, 4194304
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %226, label %223

223:                                              ; preds = %219
  %224 = load i64, ptr %81, align 8
  %225 = or i64 %224, 4194304
  store i64 %225, ptr %81, align 8
  br label %226

226:                                              ; preds = %223, %219
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %6) #26
  br label %228

227:                                              ; preds = %116
  call void @replace_uses_by(ptr noundef %77, ptr noundef %81)
  br label %228

228:                                              ; preds = %226, %227, %114
  %229 = phi i8 [ 0, %114 ], [ 1, %227 ], [ 1, %226 ]
  call void @remove_phi_node(ptr noundef nonnull %5, i8 noundef zeroext %229) #26
  %230 = load ptr, ptr %5, align 8, !tbaa !44
  %231 = icmp eq ptr %230, null
  br i1 %231, label %232, label %73, !llvm.loop !479

232:                                              ; preds = %228, %60
  %233 = call zeroext i8 @move_block_after(ptr noundef %1, ptr noundef %0) #26
  %234 = getelementptr i8, ptr %0, i64 8
  %235 = load ptr, ptr %234, align 8, !tbaa !105
  %236 = icmp eq ptr %235, null
  br i1 %236, label %240, label %237

237:                                              ; preds = %232
  %238 = load i32, ptr %235, align 8, !tbaa !106
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %242, label %240

240:                                              ; preds = %237, %232
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %241 = load ptr, ptr %234, align 8, !tbaa !105
  br label %242

242:                                              ; preds = %237, %240
  %243 = phi ptr [ %235, %237 ], [ %241, %240 ]
  %244 = getelementptr inbounds %struct.VEC_edge_base, ptr %243, i64 0, i32 2, i64 0
  %245 = load ptr, ptr %244, align 8, !tbaa !5
  %246 = getelementptr inbounds %struct.edge_def, ptr %245, i64 0, i32 7
  %247 = load i32, ptr %246, align 8, !tbaa !108
  %248 = and i32 %247, 1
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %251

250:                                              ; preds = %242
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1634, ptr noundef nonnull @.str.2) #26
  br label %251

251:                                              ; preds = %242, %250
  %252 = load i32, ptr %31, align 8, !tbaa !58, !noalias !66
  %253 = and i32 %252, 512
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %316

255:                                              ; preds = %251
  %256 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %257 = load ptr, ptr %256, align 8, !tbaa !16, !noalias !66
  %258 = icmp eq ptr %257, null
  br i1 %258, label %316, label %259

259:                                              ; preds = %255
  %260 = load ptr, ptr %257, align 8, !tbaa !59, !noalias !66
  %261 = icmp eq ptr %260, null
  br i1 %261, label %316, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds %struct.gimple_seq_d, ptr %260, i64 0, i32 1
  %264 = load ptr, ptr %263, align 8, !tbaa !61, !noalias !66
  %265 = icmp eq ptr %264, null
  br i1 %265, label %316, label %266

266:                                              ; preds = %262, %277
  %267 = phi ptr [ %279, %277 ], [ %264, %262 ]
  %268 = load ptr, ptr %267, align 8, !tbaa !47
  %269 = load i32, ptr %268, align 8
  %270 = and i32 %269, 255
  %271 = icmp eq i32 %270, 2
  br i1 %271, label %277, label %272

272:                                              ; preds = %266
  %273 = load ptr, ptr %264, align 8, !tbaa !47
  %274 = load i32, ptr %273, align 8
  %275 = and i32 %274, 255
  %276 = icmp eq i32 %275, 2
  br i1 %276, label %281, label %289

277:                                              ; preds = %266
  %278 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %267, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !67
  %280 = icmp eq ptr %279, null
  br i1 %280, label %316, label %266, !llvm.loop !68

281:                                              ; preds = %272, %281
  %282 = phi ptr [ %284, %281 ], [ %264, %272 ]
  %283 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %282, i64 0, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !67, !nonnull !66, !noundef !66
  %285 = load ptr, ptr %284, align 8, !tbaa !47
  %286 = load i32, ptr %285, align 8
  %287 = and i32 %286, 255
  %288 = icmp eq i32 %287, 2
  br i1 %288, label %281, label %289

289:                                              ; preds = %281, %272
  %290 = phi ptr [ %273, %272 ], [ %285, %281 ]
  %291 = load i32, ptr %290, align 8
  %292 = trunc i32 %291 to i8
  switch i8 %292, label %312 [
    i8 1, label %315
    i8 5, label %315
    i8 3, label %315
    i8 9, label %315
    i8 14, label %315
    i8 8, label %293
    i8 15, label %315
    i8 7, label %308
    i8 26, label %315
    i8 27, label %315
    i8 23, label %315
    i8 30, label %315
    i8 31, label %315
    i8 32, label %315
    i8 29, label %315
    i8 24, label %315
    i8 25, label %315
    i8 22, label %315
    i8 28, label %315
    i8 19, label %315
    i8 20, label %315
    i8 21, label %315
  ]

293:                                              ; preds = %289
  %294 = call i32 @gimple_call_flags(ptr noundef nonnull %290) #26
  %295 = and i32 %294, 3
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %297, label %305

297:                                              ; preds = %293
  %298 = load ptr, ptr @cfun, align 8, !tbaa !5
  %299 = getelementptr inbounds %struct.function, ptr %298, i64 0, i32 20
  %300 = load i32, ptr %299, align 8
  %301 = and i32 %300, 1048576
  %302 = and i32 %294, 8
  %303 = or i32 %301, %302
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %312, label %315

305:                                              ; preds = %293
  %306 = and i32 %294, 8
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %312, label %315

308:                                              ; preds = %289
  %309 = getelementptr i8, ptr %290, i64 75
  %310 = load i8, ptr %309, align 1, !tbaa !16
  %311 = icmp eq i8 %310, 0
  br i1 %311, label %312, label %315

312:                                              ; preds = %289, %297, %305, %308
  %313 = call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %290) #26
  %314 = icmp eq i8 %313, 0
  br i1 %314, label %316, label %315

315:                                              ; preds = %305, %297, %308, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %289, %312
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1635, ptr noundef nonnull @.str.2) #26
  br label %316

316:                                              ; preds = %277, %251, %255, %259, %262, %312, %315
  %317 = load i32, ptr %8, align 8, !tbaa !58, !noalias !480
  %318 = and i32 %317, 512
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %326

320:                                              ; preds = %316
  %321 = load ptr, ptr %14, align 8, !tbaa !16, !noalias !480
  %322 = icmp eq ptr %321, null
  br i1 %322, label %326, label %323

323:                                              ; preds = %320
  %324 = load ptr, ptr %321, align 8, !tbaa !59, !noalias !480
  %325 = icmp eq ptr %324, null
  br i1 %325, label %326, label %327

326:                                              ; preds = %323, %320, %316
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  store ptr %1, ptr %49, align 8, !tbaa.struct !196
  br label %384

327:                                              ; preds = %323
  %328 = load ptr, ptr %324, align 8, !tbaa !42, !noalias !480
  store ptr %328, ptr %4, align 8, !tbaa.struct !194
  store ptr %324, ptr %48, align 8, !tbaa.struct !195
  store ptr %1, ptr %49, align 8, !tbaa.struct !196
  %329 = icmp eq ptr %328, null
  br i1 %329, label %384, label %330

330:                                              ; preds = %327
  %331 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %332 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %7, i64 0, i32 1
  %333 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %7, i64 0, i32 2
  br label %334

334:                                              ; preds = %330, %381
  %335 = phi ptr [ %328, %330 ], [ %382, %381 ]
  %336 = load ptr, ptr %335, align 8, !tbaa !47
  %337 = load i32, ptr %336, align 8
  %338 = and i32 %337, 255
  %339 = icmp eq i32 %338, 4
  br i1 %339, label %340, label %375

340:                                              ; preds = %334
  %341 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 4), align 4, !tbaa !16
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %342
  %344 = load i64, ptr %343, align 8, !tbaa !50
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %346, label %347

346:                                              ; preds = %340
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %347

347:                                              ; preds = %340, %346
  %348 = getelementptr inbounds i8, ptr %336, i64 %344
  %349 = load ptr, ptr %348, align 8, !tbaa !5
  call void @gsi_remove(ptr noundef nonnull %4, i8 noundef zeroext 0) #26
  %350 = load i64, ptr %349, align 8
  %351 = and i64 %350, 65536
  %352 = icmp eq i64 %351, 0
  br i1 %352, label %368, label %353

353:                                              ; preds = %347
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #26
  call void @llvm.experimental.noalias.scope.decl(metadata !483)
  %354 = load i32, ptr %31, align 8, !tbaa !58, !noalias !483
  %355 = and i32 %354, 512
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %365

357:                                              ; preds = %353
  %358 = load ptr, ptr %331, align 8, !tbaa !16, !noalias !483
  %359 = icmp eq ptr %358, null
  br i1 %359, label %365, label %360

360:                                              ; preds = %357
  %361 = load ptr, ptr %358, align 8, !tbaa !59, !noalias !483
  %362 = icmp eq ptr %361, null
  br i1 %362, label %365, label %363

363:                                              ; preds = %360
  %364 = load ptr, ptr %361, align 8, !tbaa !42, !noalias !483
  br label %365

365:                                              ; preds = %353, %357, %360, %363
  %366 = phi ptr [ %361, %363 ], [ null, %360 ], [ null, %357 ], [ null, %353 ]
  %367 = phi ptr [ %364, %363 ], [ null, %360 ], [ null, %357 ], [ null, %353 ]
  store ptr %367, ptr %7, align 8, !tbaa !44, !alias.scope !483
  store ptr %366, ptr %332, align 8, !tbaa !46, !alias.scope !483
  store ptr %0, ptr %333, align 8, !tbaa !49, !alias.scope !483
  call void @gsi_insert_before(ptr noundef nonnull %7, ptr noundef nonnull %336, i32 noundef 0) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #26
  br label %368

368:                                              ; preds = %365, %347
  %369 = getelementptr inbounds %struct.tree_label_decl, ptr %349, i64 0, i32 2
  %370 = load i32, ptr %369, align 4, !tbaa !16
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %379, label %372

372:                                              ; preds = %368
  %373 = call ptr @get_eh_landing_pad_from_number(i32 noundef %370) #26
  %374 = getelementptr inbounds %struct.eh_landing_pad_d, ptr %373, i64 0, i32 2
  store ptr null, ptr %374, align 8, !tbaa !174
  br label %379

375:                                              ; preds = %334
  call void @gimple_set_bb(ptr noundef nonnull %336, ptr noundef %0) #26
  %376 = load ptr, ptr %4, align 8, !tbaa !44
  %377 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %376, i64 0, i32 2
  %378 = load ptr, ptr %377, align 8, !tbaa !53
  store ptr %378, ptr %4, align 8, !tbaa !44
  br label %381

379:                                              ; preds = %372, %368
  %380 = load ptr, ptr %4, align 8, !tbaa !44
  br label %381

381:                                              ; preds = %379, %375
  %382 = phi ptr [ %380, %379 ], [ %378, %375 ]
  %383 = icmp eq ptr %382, null
  br i1 %383, label %384, label %334, !llvm.loop !486

384:                                              ; preds = %381, %326, %327
  %385 = load i32, ptr %31, align 8, !tbaa !58, !noalias !487
  %386 = and i32 %385, 512
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %398

388:                                              ; preds = %384
  %389 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %390 = load ptr, ptr %389, align 8, !tbaa !16, !noalias !487
  %391 = icmp eq ptr %390, null
  br i1 %391, label %398, label %392

392:                                              ; preds = %388
  %393 = load ptr, ptr %390, align 8, !tbaa !59, !noalias !487
  %394 = icmp eq ptr %393, null
  br i1 %394, label %398, label %395

395:                                              ; preds = %392
  %396 = getelementptr inbounds %struct.gimple_seq_d, ptr %393, i64 0, i32 1
  %397 = load ptr, ptr %396, align 8, !tbaa !61, !noalias !487
  br label %398

398:                                              ; preds = %384, %388, %392, %395
  %399 = phi ptr [ %393, %395 ], [ null, %392 ], [ null, %388 ], [ null, %384 ]
  %400 = phi ptr [ %397, %395 ], [ null, %392 ], [ null, %388 ], [ null, %384 ]
  store ptr %400, ptr %3, align 8, !tbaa.struct !194
  %401 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %399, ptr %401, align 8, !tbaa.struct !195
  %402 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %0, ptr %402, align 8, !tbaa.struct !196
  %403 = load i32, ptr %8, align 8, !tbaa !58
  %404 = and i32 %403, 512
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %411

406:                                              ; preds = %398
  %407 = load ptr, ptr %14, align 8, !tbaa !16
  %408 = icmp eq ptr %407, null
  br i1 %408, label %411, label %409

409:                                              ; preds = %406
  %410 = load ptr, ptr %407, align 8, !tbaa !59
  br label %411

411:                                              ; preds = %398, %406, %409
  %412 = phi ptr [ %410, %409 ], [ null, %406 ], [ null, %398 ]
  call void @gsi_insert_seq_after(ptr noundef nonnull %3, ptr noundef %412, i32 noundef 0) #26
  %413 = load i32, ptr %8, align 8, !tbaa !58
  %414 = and i32 %413, 512
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %417, label %416

416:                                              ; preds = %411
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 248, ptr noundef nonnull @.str.2) #26
  br label %417

417:                                              ; preds = %411, %416
  %418 = load ptr, ptr %14, align 8, !tbaa !16
  store ptr null, ptr %418, align 8, !tbaa !59
  %419 = load ptr, ptr @cfgcleanup_altered_bbs, align 8, !tbaa !5
  %420 = icmp eq ptr %419, null
  br i1 %420, label %425, label %421

421:                                              ; preds = %417
  %422 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 9
  %423 = load i32, ptr %422, align 8, !tbaa !120
  %424 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %419, i32 noundef %423) #26
  br label %425

425:                                              ; preds = %421, %417
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  ret void
}

declare void @gimple_predict_edge(ptr noundef, i32 noundef, i32 noundef) #3

declare zeroext i8 @gimple_predicted_by_p(ptr noundef, i32 noundef) #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal zeroext i8 @gimple_can_duplicate_bb_p(ptr nocapture readnone %0) #19 {
  ret i8 1
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @gimple_duplicate_bb(ptr nocapture noundef readonly %0) #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %3 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %4 = load i32, ptr %3, align 8, !tbaa !58
  %5 = and i32 %4, 512
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %8

8:                                                ; preds = %7, %1
  %9 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = icmp eq ptr %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.gimple_bb_info, ptr %10, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !296
  br label %15

15:                                               ; preds = %8, %12
  %16 = phi ptr [ %14, %12 ], [ null, %8 ]
  %17 = load ptr, ptr @cfun, align 8, !tbaa !5
  %18 = getelementptr inbounds %struct.function, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !23
  %20 = getelementptr inbounds %struct.control_flow_graph, ptr %19, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !35
  %22 = getelementptr inbounds %struct.basic_block_def, ptr %21, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !38
  %24 = tail call ptr @create_empty_bb(ptr noundef %23) #26
  %25 = icmp eq ptr %16, null
  br i1 %25, label %41, label %26

26:                                               ; preds = %15
  %27 = load ptr, ptr %16, align 8, !tbaa !42, !noalias !490
  %28 = icmp eq ptr %27, null
  br i1 %28, label %41, label %29

29:                                               ; preds = %26, %29
  %30 = phi ptr [ %39, %29 ], [ %27, %26 ]
  %31 = load ptr, ptr %30, align 8, !tbaa !47
  %32 = getelementptr i8, ptr %31, i64 40
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = tail call ptr @create_phi_node(ptr noundef %33, ptr noundef %24) #26
  %35 = getelementptr i8, ptr %34, i64 40
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = tail call ptr @create_new_def_for(ptr noundef %36, ptr noundef %34, ptr noundef nonnull %35) #26
  %38 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %30, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !53
  %40 = icmp eq ptr %39, null
  br i1 %40, label %41, label %29, !llvm.loop !493

41:                                               ; preds = %29, %15, %26
  %42 = getelementptr inbounds %struct.basic_block_def, ptr %24, i64 0, i32 13
  %43 = load i32, ptr %42, align 8, !tbaa !58, !noalias !494
  %44 = and i32 %43, 512
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %55

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.basic_block_def, ptr %24, i64 0, i32 7
  %48 = load ptr, ptr %47, align 8, !tbaa !16, !noalias !494
  %49 = icmp eq ptr %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = load ptr, ptr %48, align 8, !tbaa !59, !noalias !494
  %52 = icmp eq ptr %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = load ptr, ptr %51, align 8, !tbaa !42, !noalias !494
  br label %55

55:                                               ; preds = %41, %46, %50, %53
  %56 = phi ptr [ %51, %53 ], [ null, %50 ], [ null, %46 ], [ null, %41 ]
  %57 = phi ptr [ %54, %53 ], [ null, %50 ], [ null, %46 ], [ null, %41 ]
  store ptr %57, ptr %2, align 8, !tbaa.struct !194
  %58 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr %56, ptr %58, align 8, !tbaa.struct !195
  %59 = getelementptr inbounds i8, ptr %2, i64 16
  store ptr %24, ptr %59, align 8, !tbaa.struct !196
  %60 = load i32, ptr %3, align 8, !tbaa !58, !noalias !497
  %61 = and i32 %60, 512
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %102

63:                                               ; preds = %55
  %64 = load ptr, ptr %9, align 8, !tbaa !16, !noalias !497
  %65 = icmp eq ptr %64, null
  br i1 %65, label %102, label %66

66:                                               ; preds = %63
  %67 = load ptr, ptr %64, align 8, !tbaa !59, !noalias !497
  %68 = icmp eq ptr %67, null
  br i1 %68, label %102, label %69

69:                                               ; preds = %66
  %70 = load ptr, ptr %67, align 8, !tbaa !42, !noalias !497
  %71 = icmp eq ptr %70, null
  br i1 %71, label %102, label %72

72:                                               ; preds = %69, %98
  %73 = phi ptr [ %100, %98 ], [ %70, %69 ]
  %74 = load ptr, ptr %73, align 8, !tbaa !47
  %75 = load i32, ptr %74, align 8
  %76 = and i32 %75, 255
  %77 = icmp eq i32 %76, 4
  br i1 %77, label %98, label %78

78:                                               ; preds = %72
  %79 = call ptr @gimple_copy(ptr noundef nonnull %74) #26
  call void @gsi_insert_after(ptr noundef nonnull %2, ptr noundef %79, i32 noundef 0) #26
  %80 = call zeroext i8 @maybe_duplicate_eh_stmt(ptr noundef %79, ptr noundef nonnull %74) #26
  %81 = load ptr, ptr @cfun, align 8, !tbaa !5
  call void @gimple_duplicate_stmt_histograms(ptr noundef %81, ptr noundef %79, ptr noundef %81, ptr noundef nonnull %74) #26
  %82 = load i32, ptr %79, align 8
  %83 = and i32 %82, 255
  %84 = add nsw i32 %83, -10
  %85 = icmp ult i32 %84, -9
  br i1 %85, label %98, label %86

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %79, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = icmp eq ptr %88, null
  br i1 %89, label %98, label %90

90:                                               ; preds = %86, %90
  %91 = phi ptr [ %94, %90 ], [ %88, %86 ]
  %92 = getelementptr inbounds %struct.def_optype_d, ptr %91, i64 0, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !500
  %94 = load ptr, ptr %91, align 8, !tbaa !502
  %95 = load ptr, ptr %93, align 8, !tbaa !5
  %96 = call ptr @create_new_def_for(ptr noundef %95, ptr noundef nonnull %79, ptr noundef nonnull %93) #26
  %97 = icmp eq ptr %94, null
  br i1 %97, label %98, label %90, !llvm.loop !503

98:                                               ; preds = %90, %78, %86, %72
  %99 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %73, i64 0, i32 2
  %100 = load ptr, ptr %99, align 8, !tbaa !53
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %72, !llvm.loop !504

102:                                              ; preds = %98, %55, %63, %66, %69
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  ret ptr %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @gimple_split_edge(ptr noundef %0) #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 7
  %4 = load i32, ptr %3, align 8, !tbaa !108
  %5 = and i32 %4, 2
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2468, ptr noundef nonnull @.str.2) #26
  br label %8

8:                                                ; preds = %1, %7
  %9 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !109
  %11 = getelementptr inbounds %struct.basic_block_def, ptr %10, i64 0, i32 5
  %12 = load ptr, ptr %11, align 8, !tbaa !38
  %13 = icmp eq ptr %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %8
  %15 = tail call ptr @find_edge(ptr noundef nonnull %12, ptr noundef nonnull %10) #26
  %16 = icmp eq ptr %15, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.edge_def, ptr %15, i64 0, i32 7
  %19 = load i32, ptr %18, align 8, !tbaa !108
  %20 = and i32 %19, 14
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = load ptr, ptr %0, align 8, !tbaa !295
  br label %24

24:                                               ; preds = %8, %14, %17, %22
  %25 = phi ptr [ %23, %22 ], [ null, %8 ], [ %12, %17 ], [ %12, %14 ]
  %26 = tail call ptr @create_empty_bb(ptr noundef %25) #26
  %27 = load ptr, ptr %0, align 8, !tbaa !295
  %28 = getelementptr inbounds %struct.basic_block_def, ptr %27, i64 0, i32 11
  %29 = load i32, ptr %28, align 8, !tbaa !315
  %30 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 8
  %31 = load i32, ptr %30, align 4, !tbaa !316
  %32 = mul nsw i32 %31, %29
  %33 = add nsw i32 %32, 5000
  %34 = sdiv i32 %33, 10000
  %35 = getelementptr inbounds %struct.basic_block_def, ptr %26, i64 0, i32 11
  store i32 %34, ptr %35, align 8, !tbaa !315
  %36 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 9
  %37 = load i64, ptr %36, align 8, !tbaa !314
  %38 = getelementptr inbounds %struct.basic_block_def, ptr %26, i64 0, i32 8
  store i64 %37, ptr %38, align 8, !tbaa !313
  %39 = tail call ptr @make_edge(ptr noundef %26, ptr noundef nonnull %10, i32 noundef 1) #26
  %40 = getelementptr inbounds %struct.edge_def, ptr %39, i64 0, i32 8
  store i32 10000, ptr %40, align 4, !tbaa !316
  %41 = load i64, ptr %36, align 8, !tbaa !314
  %42 = getelementptr inbounds %struct.edge_def, ptr %39, i64 0, i32 9
  store i64 %41, ptr %42, align 8, !tbaa !314
  %43 = tail call ptr @redirect_edge_and_branch(ptr noundef nonnull %0, ptr noundef %26) #26
  %44 = icmp eq ptr %43, %0
  br i1 %44, label %46, label %45

45:                                               ; preds = %24
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2482, ptr noundef nonnull @.str.2) #26
  br label %46

46:                                               ; preds = %24, %45
  %47 = tail call ptr @redirect_edge_var_map_vector(ptr noundef %43) #26
  %48 = icmp eq ptr %47, null
  br i1 %48, label %85, label %49

49:                                               ; preds = %46
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  %50 = getelementptr inbounds %struct.edge_def, ptr %39, i64 0, i32 1
  %51 = load ptr, ptr %50, align 8, !tbaa !109
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %2, ptr noundef %51) #26
  %52 = load ptr, ptr %2, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  %53 = load i32, ptr %47, align 8, !tbaa !505
  %54 = icmp eq i32 %53, 0
  %55 = icmp eq ptr %52, null
  %56 = select i1 %54, i1 true, i1 %55
  br i1 %56, label %84, label %57

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.VEC_edge_var_map_base, ptr %47, i64 0, i32 2, i64 0
  br label %59

59:                                               ; preds = %71, %57
  %60 = phi i64 [ 0, %57 ], [ %74, %71 ]
  %61 = phi ptr [ %58, %57 ], [ %81, %71 ]
  %62 = phi ptr [ %52, %57 ], [ %76, %71 ]
  %63 = load ptr, ptr %62, align 8, !tbaa !47
  %64 = load ptr, ptr %61, align 8, !tbaa !507
  %65 = getelementptr i8, ptr %61, i64 8
  %66 = load ptr, ptr %65, align 8, !tbaa !509
  %67 = getelementptr i8, ptr %63, i64 40
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = icmp eq ptr %64, %68
  br i1 %69, label %71, label %70

70:                                               ; preds = %59
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2430, ptr noundef nonnull @.str.2) #26
  br label %71

71:                                               ; preds = %70, %59
  %72 = getelementptr i8, ptr %61, i64 16
  %73 = load i32, ptr %72, align 8, !tbaa !510
  call void @add_phi_arg(ptr noundef nonnull %63, ptr noundef %66, ptr noundef %39, i32 noundef %73) #26
  %74 = add nuw nsw i64 %60, 1
  %75 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %62, i64 0, i32 2
  %76 = load ptr, ptr %75, align 8, !tbaa !53
  %77 = load i32, ptr %47, align 8, !tbaa !505
  %78 = zext i32 %77 to i64
  %79 = icmp uge i64 %74, %78
  %80 = getelementptr inbounds %struct.VEC_edge_var_map_base, ptr %47, i64 0, i32 2, i64 %74
  %81 = select i1 %79, ptr null, ptr %80
  %82 = icmp eq ptr %76, null
  %83 = select i1 %79, i1 true, i1 %82
  br i1 %83, label %84, label %59, !llvm.loop !511

84:                                               ; preds = %71, %49
  call void @redirect_edge_var_map_clear(ptr noundef %43) #26
  br label %85

85:                                               ; preds = %46, %84
  ret ptr %26
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_make_forwarder_block(ptr noundef %0) #9 {
  %2 = alloca %struct.gimple_stmt_iterator, align 8
  %3 = load ptr, ptr %0, align 8, !tbaa !295
  %4 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !109
  %6 = load ptr, ptr %5, align 8, !tbaa !216
  %7 = icmp eq ptr %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = load i32, ptr %6, align 8, !tbaa !106
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %53, label %11

11:                                               ; preds = %1, %8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %2, ptr noundef %3) #26
  %12 = load ptr, ptr %2, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2) #26
  %13 = icmp eq ptr %12, null
  br i1 %13, label %28, label %14

14:                                               ; preds = %11, %14
  %15 = phi ptr [ %26, %14 ], [ %12, %11 ]
  %16 = load ptr, ptr %15, align 8, !tbaa !47
  %17 = getelementptr i8, ptr %16, i64 40
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = call ptr @create_phi_node(ptr noundef %18, ptr noundef nonnull %5) #26
  %20 = getelementptr inbounds %struct.tree_ssa_name, ptr %18, i64 0, i32 2
  store ptr %19, ptr %20, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.tree_ssa_name, ptr %18, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = load ptr, ptr @cfun, align 8, !tbaa !5
  %24 = call ptr @make_ssa_name_fn(ptr noundef %23, ptr noundef %22, ptr noundef %16) #26
  store ptr %24, ptr %17, align 8, !tbaa !16
  call void @add_phi_arg(ptr noundef %19, ptr noundef %24, ptr noundef nonnull %0, i32 noundef 0) #26
  %25 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %15, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !53
  %27 = icmp eq ptr %26, null
  br i1 %27, label %28, label %14, !llvm.loop !512

28:                                               ; preds = %14, %11
  br label %29

29:                                               ; preds = %28, %51
  %30 = phi i32 [ %52, %51 ], [ 0, %28 ]
  %31 = load ptr, ptr %5, align 8, !tbaa !5
  %32 = icmp eq ptr %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = load i32, ptr %31, align 8, !tbaa !106
  br label %35

35:                                               ; preds = %33, %29
  %36 = phi i32 [ %34, %33 ], [ 0, %29 ]
  %37 = icmp eq i32 %36, %30
  br i1 %37, label %53, label %38

38:                                               ; preds = %35
  %39 = zext i32 %30 to i64
  %40 = getelementptr inbounds %struct.VEC_edge_base, ptr %31, i64 0, i32 2, i64 %39
  %41 = load ptr, ptr %40, align 8, !tbaa !5
  %42 = icmp eq ptr %41, %0
  br i1 %42, label %46, label %43

43:                                               ; preds = %38
  call void @flush_pending_stmts(ptr noundef %41) #26
  %44 = load ptr, ptr %5, align 8, !tbaa !5
  %45 = icmp eq ptr %44, null
  br i1 %45, label %50, label %46

46:                                               ; preds = %38, %43
  %47 = phi ptr [ %44, %43 ], [ %31, %38 ]
  %48 = load i32, ptr %47, align 8, !tbaa !106
  %49 = icmp ult i32 %30, %48
  br i1 %49, label %51, label %50

50:                                               ; preds = %46, %43
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %51

51:                                               ; preds = %46, %50
  %52 = add i32 %30, 1
  br label %29, !llvm.loop !513

53:                                               ; preds = %35, %8
  ret void
}

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: readwrite) uwtable
define internal zeroext i8 @gimple_block_ends_with_call_p(ptr nocapture noundef readonly %0) #20 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !514
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  tail call void @llvm.assume(i1 %5)
  %6 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !16, !noalias !514, !nonnull !66, !noundef !66
  %8 = load ptr, ptr %7, align 8, !tbaa !59, !noalias !514, !nonnull !66, !noundef !66
  %9 = getelementptr inbounds %struct.gimple_seq_d, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !61, !noalias !514, !nonnull !66, !noundef !66
  %11 = load ptr, ptr %10, align 8, !tbaa !47
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 255
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %23

15:                                               ; preds = %1, %15
  %16 = phi ptr [ %18, %15 ], [ %10, %1 ]
  %17 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %16, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !67, !noalias !519, !nonnull !66, !noundef !66
  %19 = load ptr, ptr %18, align 8, !tbaa !47
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %15, label %23, !llvm.loop !267

23:                                               ; preds = %15, %1
  %24 = phi i32 [ %13, %1 ], [ %21, %15 ]
  %25 = icmp eq i32 %24, 8
  %26 = zext i1 %25 to i8
  ret i8 %26
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @gimple_block_ends_with_condjump_p(ptr nocapture noundef readonly %0) #10 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58, !noalias !520
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %30

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !16, !noalias !520
  %9 = icmp eq ptr %8, null
  br i1 %9, label %30, label %10

10:                                               ; preds = %6
  %11 = load ptr, ptr %8, align 8, !tbaa !59, !noalias !520
  %12 = icmp eq ptr %11, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.gimple_seq_d, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !61, !noalias !520
  %16 = icmp eq ptr %15, null
  br i1 %16, label %30, label %17

17:                                               ; preds = %13, %23
  %18 = phi ptr [ %25, %23 ], [ %15, %13 ]
  %19 = load ptr, ptr %18, align 8, !tbaa !47
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %27

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %18, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !67
  %26 = icmp eq ptr %25, null
  br i1 %26, label %30, label %17, !llvm.loop !68

27:                                               ; preds = %17
  %28 = icmp eq i32 %21, 1
  %29 = zext i1 %28 to i8
  br label %30

30:                                               ; preds = %23, %1, %6, %10, %13, %27
  %31 = phi i8 [ %29, %27 ], [ 0, %13 ], [ 0, %10 ], [ 0, %6 ], [ 0, %1 ], [ 0, %23 ]
  ret i8 %31
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @gimple_flow_call_edges_add(ptr noundef readonly %0) #9 {
  %2 = load ptr, ptr @cfun, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.function, ptr %2, i64 0, i32 1
  %4 = load ptr, ptr %3, align 8, !tbaa !23
  %5 = getelementptr inbounds %struct.control_flow_graph, ptr %4, i64 0, i32 5
  %6 = load i32, ptr %5, align 8, !tbaa !28
  %7 = getelementptr inbounds %struct.control_flow_graph, ptr %4, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !27
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %191, label %10

10:                                               ; preds = %1
  %11 = icmp eq ptr %0, null
  %12 = getelementptr inbounds %struct.control_flow_graph, ptr %4, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !35
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %13, i64 0, i32 5
  %15 = load ptr, ptr %14, align 8, !tbaa !38
  br i1 %11, label %28, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 9
  %18 = load i32, ptr %17, align 8, !tbaa !120
  %19 = lshr i32 %18, 6
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.simple_bitmap_def, ptr %0, i64 0, i32 3, i64 %20
  %22 = load i64, ptr %21, align 8, !tbaa !50
  %23 = and i32 %18, 63
  %24 = zext i32 %23 to i64
  %25 = shl nuw i64 1, %24
  %26 = and i64 %25, %22
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %60, label %28

28:                                               ; preds = %10, %16
  %29 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 13
  %30 = load i32, ptr %29, align 8, !tbaa !58, !noalias !523
  %31 = and i32 %30, 512
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %60

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 7
  %35 = load ptr, ptr %34, align 8, !tbaa !16, !noalias !523
  %36 = icmp eq ptr %35, null
  br i1 %36, label %60, label %37

37:                                               ; preds = %33
  %38 = load ptr, ptr %35, align 8, !tbaa !59, !noalias !523
  %39 = icmp eq ptr %38, null
  br i1 %39, label %60, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.gimple_seq_d, ptr %38, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !61, !noalias !523
  %43 = icmp eq ptr %42, null
  br i1 %43, label %60, label %44

44:                                               ; preds = %40
  %45 = load ptr, ptr %42, align 8, !tbaa !47
  %46 = icmp eq ptr %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %44
  %48 = tail call fastcc zeroext i8 @need_fake_edge_p(ptr noundef nonnull %45), !range !268
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %60, label %50

50:                                               ; preds = %47
  %51 = load ptr, ptr @cfun, align 8, !tbaa !5
  %52 = getelementptr inbounds %struct.function, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !23
  %54 = getelementptr inbounds %struct.control_flow_graph, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !35
  %56 = tail call ptr @find_edge(ptr noundef nonnull %15, ptr noundef %55) #26
  %57 = icmp eq ptr %56, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %50
  %59 = tail call ptr @gimple_build_nop() #26
  tail call void @gsi_insert_on_edge(ptr noundef nonnull %56, ptr noundef %59) #26
  tail call void @gsi_commit_edge_inserts() #26
  br label %60

60:                                               ; preds = %28, %33, %37, %40, %44, %47, %58, %50, %16
  %61 = icmp sgt i32 %6, 0
  br i1 %61, label %62, label %191

62:                                               ; preds = %60
  %63 = zext i32 %6 to i64
  br label %64

64:                                               ; preds = %62, %184
  %65 = phi i64 [ 0, %62 ], [ %186, %184 ]
  %66 = phi i32 [ 0, %62 ], [ %185, %184 ]
  %67 = load ptr, ptr @cfun, align 8, !tbaa !5
  %68 = getelementptr inbounds %struct.function, ptr %67, i64 0, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !23
  %70 = getelementptr inbounds %struct.control_flow_graph, ptr %69, i64 0, i32 2
  %71 = load ptr, ptr %70, align 8, !tbaa !29
  %72 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %71, i64 0, i32 2, i64 %65
  %73 = load ptr, ptr %72, align 8, !tbaa !5
  %74 = icmp eq ptr %73, null
  br i1 %74, label %184, label %75

75:                                               ; preds = %64
  br i1 %11, label %85, label %76

76:                                               ; preds = %75
  %77 = lshr i64 %65, 6
  %78 = and i64 %77, 67108863
  %79 = getelementptr inbounds %struct.simple_bitmap_def, ptr %0, i64 0, i32 3, i64 %78
  %80 = load i64, ptr %79, align 8, !tbaa !50
  %81 = and i64 %65, 63
  %82 = shl nuw i64 1, %81
  %83 = and i64 %80, %82
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %184, label %85

85:                                               ; preds = %76, %75
  %86 = getelementptr inbounds %struct.basic_block_def, ptr %73, i64 0, i32 13
  %87 = load i32, ptr %86, align 8, !tbaa !58, !noalias !526
  %88 = and i32 %87, 512
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %184

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.basic_block_def, ptr %73, i64 0, i32 7
  %92 = load ptr, ptr %91, align 8, !tbaa !16, !noalias !526
  %93 = icmp eq ptr %92, null
  br i1 %93, label %184, label %94

94:                                               ; preds = %90
  %95 = load ptr, ptr %92, align 8, !tbaa !59, !noalias !526
  %96 = icmp eq ptr %95, null
  br i1 %96, label %184, label %97

97:                                               ; preds = %94
  %98 = getelementptr inbounds %struct.gimple_seq_d, ptr %95, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !61, !noalias !526
  %100 = icmp eq ptr %99, null
  br i1 %100, label %184, label %101

101:                                              ; preds = %97
  %102 = load ptr, ptr %99, align 8, !tbaa !47
  br label %103

103:                                              ; preds = %179, %101
  %104 = phi ptr [ %99, %101 ], [ %182, %179 ]
  %105 = phi i32 [ %66, %101 ], [ %180, %179 ]
  %106 = load ptr, ptr %104, align 8, !tbaa !47
  %107 = load i32, ptr %106, align 8
  %108 = and i32 %107, 255
  %109 = icmp eq i32 %108, 8
  br i1 %109, label %110, label %157

110:                                              ; preds = %103
  %111 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %112
  %114 = load i64, ptr %113, align 8, !tbaa !50
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %110
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %117

117:                                              ; preds = %116, %110
  %118 = getelementptr inbounds i8, ptr %106, i64 %114
  %119 = getelementptr inbounds ptr, ptr %118, i64 1
  %120 = load ptr, ptr %119, align 8, !tbaa !5
  %121 = load i64, ptr %120, align 8
  %122 = and i64 %121, 65535
  %123 = icmp eq i64 %122, 121
  br i1 %123, label %124, label %127

124:                                              ; preds = %117
  %125 = getelementptr inbounds %struct.tree_exp, ptr %120, i64 0, i32 3
  %126 = load ptr, ptr %125, align 8, !tbaa !16
  br label %127

127:                                              ; preds = %124, %117
  %128 = phi ptr [ %126, %124 ], [ null, %117 ]
  %129 = tail call i32 @gimple_call_flags(ptr noundef nonnull %106) #26
  %130 = load i32, ptr %106, align 8
  %131 = and i32 %130, 255
  %132 = icmp eq i32 %131, 8
  %133 = icmp ne ptr %128, null
  %134 = select i1 %132, i1 %133, i1 false
  br i1 %134, label %135, label %152

135:                                              ; preds = %127
  %136 = getelementptr inbounds %struct.tree_function_decl, ptr %128, i64 0, i32 5
  %137 = load i32, ptr %136, align 8
  %138 = lshr i32 %137, 11
  %139 = and i32 %138, 3
  %140 = icmp ne i32 %139, 0
  %141 = and i32 %129, 64
  %142 = icmp ne i32 %141, 0
  %143 = select i1 %140, i1 %142, i1 false
  %144 = and i32 %129, 128
  %145 = icmp eq i32 %144, 0
  %146 = select i1 %143, i1 %145, i1 false
  br i1 %146, label %147, label %152

147:                                              ; preds = %135
  %148 = icmp eq i32 %139, 3
  %149 = and i32 %137, 2047
  %150 = icmp eq i32 %149, 453
  %151 = and i1 %150, %148
  br i1 %151, label %152, label %179

152:                                              ; preds = %147, %135, %127
  %153 = phi i1 [ true, %147 ], [ true, %135 ], [ %132, %127 ]
  %154 = and i32 %129, 8
  %155 = icmp eq i32 %154, 0
  %156 = select i1 %153, i1 %155, i1 false
  br i1 %156, label %164, label %157

157:                                              ; preds = %103, %152
  %158 = phi i32 [ %130, %152 ], [ %107, %103 ]
  %159 = phi i32 [ %131, %152 ], [ %108, %103 ]
  %160 = icmp ne i32 %159, 7
  %161 = and i32 %158, 196608
  %162 = icmp eq i32 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %179, label %164

164:                                              ; preds = %152, %157
  %165 = icmp eq ptr %106, %102
  br i1 %165, label %171, label %166

166:                                              ; preds = %164
  %167 = tail call ptr @split_block(ptr noundef nonnull %73, ptr noundef nonnull %106) #26
  %168 = icmp ne ptr %167, null
  %169 = zext i1 %168 to i32
  %170 = add nsw i32 %105, %169
  br label %171

171:                                              ; preds = %166, %164
  %172 = phi i32 [ %105, %164 ], [ %170, %166 ]
  %173 = load ptr, ptr @cfun, align 8, !tbaa !5
  %174 = getelementptr inbounds %struct.function, ptr %173, i64 0, i32 1
  %175 = load ptr, ptr %174, align 8, !tbaa !23
  %176 = getelementptr inbounds %struct.control_flow_graph, ptr %175, i64 0, i32 1
  %177 = load ptr, ptr %176, align 8, !tbaa !35
  %178 = tail call ptr @make_edge(ptr noundef nonnull %73, ptr noundef %177, i32 noundef 16) #26
  br label %179

179:                                              ; preds = %147, %171, %157
  %180 = phi i32 [ %172, %171 ], [ %105, %157 ], [ %105, %147 ]
  %181 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %104, i64 0, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !67
  %183 = icmp eq ptr %182, null
  br i1 %183, label %184, label %103, !llvm.loop !529

184:                                              ; preds = %179, %85, %90, %94, %97, %76, %64
  %185 = phi i32 [ %66, %64 ], [ %66, %76 ], [ %66, %97 ], [ %66, %94 ], [ %66, %90 ], [ %66, %85 ], [ %180, %179 ]
  %186 = add nuw nsw i64 %65, 1
  %187 = icmp eq i64 %186, %63
  br i1 %187, label %188, label %64, !llvm.loop !530

188:                                              ; preds = %184
  %189 = icmp eq i32 %185, 0
  br i1 %189, label %191, label %190

190:                                              ; preds = %188
  tail call void @verify_flow_info() #26
  br label %191

191:                                              ; preds = %60, %188, %190, %1
  %192 = phi i32 [ 0, %1 ], [ %185, %190 ], [ 0, %188 ], [ 0, %60 ]
  ret i32 %192
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_execute_on_growing_pred(ptr nocapture noundef readonly %0) #9 {
  %2 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !109
  %4 = getelementptr inbounds %struct.basic_block_def, ptr %3, i64 0, i32 13
  %5 = load i32, ptr %4, align 8, !tbaa !58
  %6 = and i32 %5, 512
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %9

9:                                                ; preds = %8, %1
  %10 = getelementptr inbounds %struct.basic_block_def, ptr %3, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.gimple_bb_info, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !296
  %16 = icmp eq ptr %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr %15, align 8, !tbaa !42
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @reserve_phi_args_for_new_edge(ptr noundef nonnull %3) #26
  br label %21

21:                                               ; preds = %9, %13, %20, %17
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_execute_on_shrinking_pred(ptr noundef %0) #9 {
  %2 = getelementptr inbounds %struct.edge_def, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !109
  %4 = getelementptr inbounds %struct.basic_block_def, ptr %3, i64 0, i32 13
  %5 = load i32, ptr %4, align 8, !tbaa !58
  %6 = and i32 %5, 512
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %9

9:                                                ; preds = %8, %1
  %10 = getelementptr inbounds %struct.basic_block_def, ptr %3, i64 0, i32 7
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.gimple_bb_info, ptr %11, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !296
  %16 = icmp eq ptr %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = load ptr, ptr %15, align 8, !tbaa !42
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @remove_phi_args(ptr noundef nonnull %0) #26
  br label %21

21:                                               ; preds = %9, %13, %20, %17
  ret void
}

declare zeroext i8 @gimple_duplicate_loop_to_header_edge(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef) #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_lv_add_condition_to_bb(ptr nocapture readnone %0, ptr nocapture readnone %1, ptr noundef %2, ptr noundef %3) #9 {
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  %6 = tail call ptr @gimple_build_cond_from_tree(ptr noundef %3, ptr noundef null, ptr noundef null) #26
  %7 = getelementptr inbounds %struct.basic_block_def, ptr %2, i64 0, i32 13
  %8 = load i32, ptr %7, align 8, !tbaa !58, !noalias !531
  %9 = and i32 %8, 512
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %21

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.basic_block_def, ptr %2, i64 0, i32 7
  %13 = load ptr, ptr %12, align 8, !tbaa !16, !noalias !531
  %14 = icmp eq ptr %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = load ptr, ptr %13, align 8, !tbaa !59, !noalias !531
  %17 = icmp eq ptr %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.gimple_seq_d, ptr %16, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !61, !noalias !531
  br label %21

21:                                               ; preds = %4, %11, %15, %18
  %22 = phi ptr [ %16, %18 ], [ null, %15 ], [ null, %11 ], [ null, %4 ]
  %23 = phi ptr [ %20, %18 ], [ null, %15 ], [ null, %11 ], [ null, %4 ]
  store ptr %23, ptr %5, align 8, !tbaa.struct !194
  %24 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %22, ptr %24, align 8, !tbaa.struct !195
  %25 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %2, ptr %25, align 8, !tbaa.struct !196
  call void @gsi_insert_after(ptr noundef nonnull %5, ptr noundef %6, i32 noundef 0) #26
  %26 = getelementptr i8, ptr %2, i64 8
  %27 = load ptr, ptr %26, align 8, !tbaa !105
  %28 = icmp eq ptr %27, null
  br i1 %28, label %32, label %29

29:                                               ; preds = %21
  %30 = load i32, ptr %27, align 8, !tbaa !106
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %34, label %32

32:                                               ; preds = %29, %21
  call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 645, ptr noundef nonnull @.str.2) #26
  %33 = load ptr, ptr %26, align 8, !tbaa !105
  br label %34

34:                                               ; preds = %29, %32
  %35 = phi ptr [ %27, %29 ], [ %33, %32 ]
  %36 = getelementptr inbounds %struct.VEC_edge_base, ptr %35, i64 0, i32 2, i64 0
  %37 = load ptr, ptr %36, align 8, !tbaa !5
  %38 = getelementptr inbounds %struct.edge_def, ptr %37, i64 0, i32 7
  %39 = load i32, ptr %38, align 8, !tbaa !108
  %40 = and i32 %39, -2050
  %41 = or i32 %40, 2048
  store i32 %41, ptr %38, align 8, !tbaa !108
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @gimple_lv_adjust_loop_header_phi(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) #9 {
  %5 = alloca %struct.gimple_stmt_iterator, align 8
  %6 = alloca %struct.gimple_stmt_iterator, align 8
  %7 = tail call ptr @find_edge(ptr noundef %2, ptr noundef %1) #26
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6897, ptr noundef nonnull @.str.2) #26
  br label %10

10:                                               ; preds = %4, %9
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %5, ptr noundef %1) #26
  %11 = load ptr, ptr %5, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #26
  call void @gsi_start_phis(ptr nonnull sret(%struct.gimple_stmt_iterator) align 8 %6, ptr noundef %0) #26
  %12 = load ptr, ptr %6, align 8, !tbaa.struct !194
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #26
  %13 = icmp eq ptr %11, null
  %14 = icmp eq ptr %12, null
  %15 = select i1 %13, i1 true, i1 %14
  br i1 %15, label %50, label %16

16:                                               ; preds = %10
  %17 = getelementptr %struct.edge_def, ptr %7, i64 0, i32 6
  br label %18

18:                                               ; preds = %16, %39
  %19 = phi ptr [ %11, %16 ], [ %44, %39 ]
  %20 = phi ptr [ %12, %16 ], [ %46, %39 ]
  %21 = load ptr, ptr %20, align 8, !tbaa !47
  %22 = load ptr, ptr %19, align 8, !tbaa !47
  %23 = load i32, ptr %17, align 4, !tbaa !298
  %24 = getelementptr inbounds %struct.gimple_statement_phi, ptr %22, i64 0, i32 1
  %25 = load i32, ptr %24, align 8, !tbaa !16
  %26 = icmp ult i32 %25, %23
  br i1 %26, label %27, label %30

27:                                               ; preds = %18
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  %28 = load i32, ptr %17, align 4, !tbaa !298
  %29 = load i32, ptr %24, align 8, !tbaa !16
  br label %30

30:                                               ; preds = %18, %27
  %31 = phi i32 [ %25, %18 ], [ %29, %27 ]
  %32 = phi i32 [ %23, %18 ], [ %28, %27 ]
  %33 = zext i32 %23 to i64
  %34 = getelementptr %struct.gimple_statement_phi, ptr %22, i64 0, i32 4, i64 %33, i32 0, i32 3
  %35 = load ptr, ptr %34, align 8, !tbaa !274
  %36 = load ptr, ptr %35, align 8, !tbaa !5
  %37 = icmp ult i32 %31, %32
  br i1 %37, label %38, label %39

38:                                               ; preds = %30
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %39

39:                                               ; preds = %30, %38
  %40 = zext i32 %32 to i64
  %41 = getelementptr inbounds %struct.gimple_statement_phi, ptr %22, i64 0, i32 4, i64 %40, i32 2
  %42 = load i32, ptr %41, align 8, !tbaa !299
  call void @add_phi_arg(ptr noundef %21, ptr noundef %36, ptr noundef %3, i32 noundef %42) #26
  %43 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %19, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !53
  %45 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %20, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !53
  %47 = icmp eq ptr %44, null
  %48 = icmp eq ptr %46, null
  %49 = select i1 %47, i1 true, i1 %48
  br i1 %49, label %50, label %18, !llvm.loop !534

50:                                               ; preds = %39, %10
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @extract_true_false_edges_from_block(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2) #16 {
  %4 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !105
  %6 = getelementptr inbounds %struct.VEC_edge_base, ptr %5, i64 0, i32 2, i64 0
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.edge_def, ptr %7, i64 0, i32 7
  %9 = load i32, ptr %8, align 8, !tbaa !108
  %10 = and i32 %9, 1024
  %11 = icmp eq i32 %10, 0
  %12 = select i1 %11, ptr %2, ptr %1
  %13 = select i1 %11, ptr %1, ptr %2
  store ptr %7, ptr %12, align 8, !tbaa !5
  %14 = load ptr, ptr %4, align 8, !tbaa !105
  %15 = getelementptr inbounds %struct.VEC_edge_base, ptr %14, i64 0, i32 2, i64 1
  %16 = load ptr, ptr %15, align 8, !tbaa !5
  store ptr %16, ptr %13, align 8, !tbaa !5
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @split_critical_edges() #9 {
  %1 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  %2 = icmp eq ptr %1, null
  br i1 %2, label %4, label %3

3:                                                ; preds = %0
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 849, ptr noundef nonnull @.str.2) #26
  br label %4

4:                                                ; preds = %0, %3
  %5 = tail call ptr @pointer_map_create() #26
  store ptr %5, ptr @edge_to_cases, align 8, !tbaa !5
  %6 = load ptr, ptr @cfun, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.function, ptr %6, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !23
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = icmp eq ptr %9, null
  br i1 %10, label %156, label %11

11:                                               ; preds = %4, %150
  %12 = phi ptr [ %152, %150 ], [ %9, %4 ]
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 1
  br label %14

14:                                               ; preds = %11, %148
  %15 = phi i32 [ 0, %11 ], [ %149, %148 ]
  %16 = load ptr, ptr %13, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = load i32, ptr %16, align 8, !tbaa !106
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 [ %19, %18 ], [ 0, %14 ]
  %22 = icmp eq i32 %21, %15
  br i1 %22, label %150, label %23

23:                                               ; preds = %20
  %24 = zext i32 %15 to i64
  %25 = getelementptr inbounds %struct.VEC_edge_base, ptr %16, i64 0, i32 2, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !5
  %27 = load ptr, ptr %26, align 8, !tbaa !295
  %28 = getelementptr inbounds %struct.basic_block_def, ptr %27, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !105
  %30 = icmp eq ptr %29, null
  br i1 %30, label %47, label %31

31:                                               ; preds = %23
  %32 = load i32, ptr %29, align 8, !tbaa !106
  %33 = icmp ugt i32 %32, 1
  br i1 %33, label %34, label %47

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.edge_def, ptr %26, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !109
  %37 = load ptr, ptr %36, align 8, !tbaa !216
  %38 = icmp eq ptr %37, null
  br i1 %38, label %47, label %39

39:                                               ; preds = %34
  %40 = load i32, ptr %37, align 8, !tbaa !106
  %41 = icmp ugt i32 %40, 1
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.edge_def, ptr %26, i64 0, i32 7
  %44 = load i32, ptr %43, align 8, !tbaa !108
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %139, label %47

47:                                               ; preds = %34, %23, %42, %39, %31
  %48 = getelementptr inbounds %struct.edge_def, ptr %26, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !109
  %50 = load ptr, ptr %49, align 8, !tbaa !216
  %51 = icmp eq ptr %50, null
  br i1 %51, label %80, label %52

52:                                               ; preds = %47
  %53 = load i32, ptr %50, align 8, !tbaa !106
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %80

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.basic_block_def, ptr %49, i64 0, i32 13
  %57 = load i32, ptr %56, align 8, !tbaa !58
  %58 = and i32 %57, 512
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %55
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %61

61:                                               ; preds = %60, %55
  %62 = getelementptr inbounds %struct.basic_block_def, ptr %49, i64 0, i32 7
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = icmp eq ptr %63, null
  br i1 %64, label %72, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.gimple_bb_info, ptr %63, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !296
  %68 = icmp eq ptr %67, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %65
  %70 = load ptr, ptr %67, align 8, !tbaa !42
  %71 = icmp eq ptr %70, null
  br i1 %71, label %72, label %80

72:                                               ; preds = %61, %65, %69
  %73 = load ptr, ptr %48, align 8, !tbaa !109
  %74 = load ptr, ptr @cfun, align 8, !tbaa !5
  %75 = getelementptr inbounds %struct.function, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !23
  %77 = getelementptr inbounds %struct.control_flow_graph, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !35
  %79 = icmp eq ptr %73, %78
  br i1 %79, label %80, label %141

80:                                               ; preds = %47, %72, %69, %52
  %81 = load ptr, ptr %26, align 8, !tbaa !295
  %82 = load ptr, ptr @cfun, align 8, !tbaa !5
  %83 = getelementptr inbounds %struct.function, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !tbaa !23
  %85 = load ptr, ptr %84, align 8, !tbaa !34
  %86 = icmp eq ptr %81, %85
  br i1 %86, label %141, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.edge_def, ptr %26, i64 0, i32 7
  %89 = load i32, ptr %88, align 8, !tbaa !108
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %141

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.basic_block_def, ptr %81, i64 0, i32 13
  %94 = load i32, ptr %93, align 8, !tbaa !58, !noalias !535
  %95 = and i32 %94, 512
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %141

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.basic_block_def, ptr %81, i64 0, i32 7
  %99 = load ptr, ptr %98, align 8, !tbaa !16, !noalias !535
  %100 = icmp eq ptr %99, null
  br i1 %100, label %141, label %101

101:                                              ; preds = %97
  %102 = load ptr, ptr %99, align 8, !tbaa !59, !noalias !535
  %103 = icmp eq ptr %102, null
  br i1 %103, label %141, label %104

104:                                              ; preds = %101
  %105 = getelementptr inbounds %struct.gimple_seq_d, ptr %102, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !61, !noalias !535
  %107 = icmp eq ptr %106, null
  br i1 %107, label %141, label %108

108:                                              ; preds = %104
  %109 = load ptr, ptr %106, align 8, !tbaa !47
  %110 = load i32, ptr %109, align 8
  %111 = trunc i32 %110 to i8
  switch i8 %111, label %131 [
    i8 1, label %134
    i8 5, label %134
    i8 3, label %134
    i8 9, label %134
    i8 14, label %134
    i8 8, label %112
    i8 15, label %134
    i8 7, label %127
    i8 26, label %134
    i8 27, label %134
    i8 23, label %134
    i8 30, label %134
    i8 31, label %134
    i8 32, label %134
    i8 29, label %134
    i8 24, label %134
    i8 25, label %134
    i8 22, label %134
    i8 28, label %134
    i8 19, label %134
    i8 20, label %134
    i8 21, label %134
  ]

112:                                              ; preds = %108
  %113 = tail call i32 @gimple_call_flags(ptr noundef nonnull %109) #26
  %114 = and i32 %113, 3
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %124

116:                                              ; preds = %112
  %117 = load ptr, ptr @cfun, align 8, !tbaa !5
  %118 = getelementptr inbounds %struct.function, ptr %117, i64 0, i32 20
  %119 = load i32, ptr %118, align 8
  %120 = and i32 %119, 1048576
  %121 = and i32 %113, 8
  %122 = or i32 %120, %121
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %131, label %134

124:                                              ; preds = %112
  %125 = and i32 %113, 8
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %131, label %134

127:                                              ; preds = %108
  %128 = getelementptr i8, ptr %109, i64 75
  %129 = load i8, ptr %128, align 1, !tbaa !16
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %108, %116, %124, %127
  %132 = tail call zeroext i8 @stmt_can_throw_internal(ptr noundef nonnull %109) #26
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %141, label %134

134:                                              ; preds = %124, %116, %127, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %108, %131
  %135 = load ptr, ptr %106, align 8, !tbaa !47
  %136 = load i32, ptr %135, align 8
  %137 = and i32 %136, 255
  %138 = icmp eq i32 %137, 9
  br i1 %138, label %141, label %139

139:                                              ; preds = %134, %42
  %140 = tail call ptr @split_edge(ptr noundef nonnull %26) #26
  br label %141

141:                                              ; preds = %139, %92, %97, %101, %72, %80, %87, %134, %131, %104
  %142 = load ptr, ptr %13, align 8, !tbaa !5
  %143 = icmp eq ptr %142, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %141
  %145 = load i32, ptr %142, align 8, !tbaa !106
  %146 = icmp ult i32 %15, %145
  br i1 %146, label %148, label %147

147:                                              ; preds = %144, %141
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  br label %148

148:                                              ; preds = %144, %147
  %149 = add i32 %15, 1
  br label %14, !llvm.loop !538

150:                                              ; preds = %20
  %151 = getelementptr inbounds %struct.basic_block_def, ptr %12, i64 0, i32 6
  %152 = load ptr, ptr %151, align 8, !tbaa !5
  %153 = icmp eq ptr %152, null
  br i1 %153, label %154, label %11, !llvm.loop !539

154:                                              ; preds = %150
  %155 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  br label %156

156:                                              ; preds = %154, %4
  %157 = phi ptr [ %155, %154 ], [ %5, %4 ]
  tail call void @pointer_map_traverse(ptr noundef %157, ptr noundef nonnull @edge_to_cases_cleanup, ptr noundef null) #26
  %158 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  tail call void @pointer_map_destroy(ptr noundef %158) #26
  store ptr null, ptr @edge_to_cases, align 8, !tbaa !5
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @gimplify_build3(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) local_unnamed_addr #9 {
  %7 = load ptr, ptr %0, align 8, !tbaa !44
  %8 = load ptr, ptr %7, align 8, !tbaa !47
  %9 = getelementptr i8, ptr %8, i64 8
  %10 = load i32, ptr %9, align 8, !tbaa !16
  %11 = tail call ptr @fold_build3_stat_loc(i32 noundef %10, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #26
  %12 = tail call ptr @tree_strip_nop_conversions(ptr noundef %11) #26
  %13 = tail call ptr @force_gimple_operand_gsi(ptr noundef nonnull %0, ptr noundef %12, i8 noundef zeroext 1, ptr noundef null, i8 noundef zeroext 1, i32 noundef 1) #26
  ret ptr %13
}

declare ptr @fold_build3_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @tree_strip_nop_conversions(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @gimplify_build2(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #9 {
  %6 = load ptr, ptr %0, align 8, !tbaa !44
  %7 = load ptr, ptr %6, align 8, !tbaa !47
  %8 = getelementptr i8, ptr %7, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = tail call ptr @fold_build2_stat_loc(i32 noundef %9, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #26
  %11 = tail call ptr @tree_strip_nop_conversions(ptr noundef %10) #26
  %12 = tail call ptr @force_gimple_operand_gsi(ptr noundef nonnull %0, ptr noundef %11, i8 noundef zeroext 1, ptr noundef null, i8 noundef zeroext 1, i32 noundef 1) #26
  ret ptr %12
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @gimplify_build1(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #9 {
  %5 = load ptr, ptr %0, align 8, !tbaa !44
  %6 = load ptr, ptr %5, align 8, !tbaa !47
  %7 = getelementptr i8, ptr %6, i64 8
  %8 = load i32, ptr %7, align 8, !tbaa !16
  %9 = tail call ptr @fold_build1_stat_loc(i32 noundef %8, i32 noundef %1, ptr noundef %2, ptr noundef %3) #26
  %10 = tail call ptr @tree_strip_nop_conversions(ptr noundef %9) #26
  %11 = tail call ptr @force_gimple_operand_gsi(ptr noundef nonnull %0, ptr noundef %10, i8 noundef zeroext 1, ptr noundef null, i8 noundef zeroext 1, i32 noundef 1) #26
  ret ptr %11
}

declare ptr @fold_build1_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @execute_warn_function_return() #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 6
  %3 = load ptr, ptr %2, align 8, !tbaa !254
  %4 = load i64, ptr %3, align 8
  %5 = and i64 %4, 524288
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %66, label %7

7:                                                ; preds = %0
  %8 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !23
  %10 = getelementptr inbounds %struct.control_flow_graph, ptr %9, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !35
  %12 = load ptr, ptr %11, align 8, !tbaa !5
  %13 = icmp eq ptr %12, null
  br i1 %13, label %66, label %14

14:                                               ; preds = %7
  %15 = load i32, ptr %12, align 8, !tbaa !106
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %66, label %17

17:                                               ; preds = %14, %56
  %18 = phi ptr [ %57, %56 ], [ %12, %14 ]
  %19 = phi i32 [ %58, %56 ], [ 0, %14 ]
  %20 = icmp eq ptr %18, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = load i32, ptr %18, align 8, !tbaa !106
  br label %23

23:                                               ; preds = %21, %17
  %24 = phi i32 [ %22, %21 ], [ 0, %17 ]
  %25 = icmp eq i32 %24, %19
  br i1 %25, label %59, label %26

26:                                               ; preds = %23
  %27 = zext i32 %19 to i64
  %28 = getelementptr inbounds %struct.VEC_edge_base, ptr %18, i64 0, i32 2, i64 %27
  %29 = load ptr, ptr %28, align 8, !tbaa !5
  %30 = load ptr, ptr %29, align 8, !tbaa !295
  %31 = getelementptr inbounds %struct.basic_block_def, ptr %30, i64 0, i32 13
  %32 = load i32, ptr %31, align 8, !tbaa !58, !noalias !540
  %33 = and i32 %32, 512
  %34 = icmp eq i32 %33, 0
  tail call void @llvm.assume(i1 %34)
  %35 = getelementptr inbounds %struct.basic_block_def, ptr %30, i64 0, i32 7
  %36 = load ptr, ptr %35, align 8, !tbaa !16, !noalias !540, !nonnull !66, !noundef !66
  %37 = load ptr, ptr %36, align 8, !tbaa !59, !noalias !540, !nonnull !66, !noundef !66
  %38 = getelementptr inbounds %struct.gimple_seq_d, ptr %37, i64 0, i32 1
  br label %39

39:                                               ; preds = %39, %26
  %40 = phi ptr [ %44, %39 ], [ %38, %26 ]
  %41 = load ptr, ptr %40, align 8, !tbaa !5, !nonnull !66, !noundef !66
  %42 = load ptr, ptr %41, align 8, !tbaa !47
  %43 = load i32, ptr %42, align 8
  %44 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %41, i64 0, i32 1
  %45 = trunc i32 %43 to i8
  switch i8 %45, label %50 [
    i8 2, label %39
    i8 9, label %46
  ]

46:                                               ; preds = %39
  %47 = getelementptr i8, ptr %42, i64 8
  %48 = load i32, ptr %47, align 8, !tbaa !16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %39, %46
  br i1 %20, label %54, label %51

51:                                               ; preds = %50
  %52 = load i32, ptr %18, align 8, !tbaa !106
  %53 = icmp ult i32 %19, %52
  br i1 %53, label %56, label %54

54:                                               ; preds = %51, %50
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  %55 = load ptr, ptr %11, align 8, !tbaa !5
  br label %56

56:                                               ; preds = %51, %54
  %57 = phi ptr [ %18, %51 ], [ %55, %54 ]
  %58 = add i32 %19, 1
  br label %17, !llvm.loop !543

59:                                               ; preds = %23
  %60 = load ptr, ptr @cfun, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.function, ptr %60, i64 0, i32 16
  %62 = load i32, ptr %61, align 4, !tbaa !544
  br label %63

63:                                               ; preds = %46, %59
  %64 = phi i32 [ %62, %59 ], [ %48, %46 ]
  %65 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %64, i32 noundef 0, ptr noundef nonnull @.str.179) #26
  br label %176

66:                                               ; preds = %7, %14, %0
  %67 = load i32, ptr @warn_return_type, align 4, !tbaa !20
  %68 = icmp ne i32 %67, 0
  %69 = and i64 %4, 8388608
  %70 = icmp eq i64 %69, 0
  %71 = and i1 %70, %68
  br i1 %71, label %72, label %176

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !23
  %75 = getelementptr inbounds %struct.control_flow_graph, ptr %74, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !35
  %77 = load ptr, ptr %76, align 8, !tbaa !5
  %78 = icmp eq ptr %77, null
  br i1 %78, label %176, label %79

79:                                               ; preds = %72
  %80 = load i32, ptr %77, align 8, !tbaa !106
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %176, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !16
  %85 = getelementptr inbounds %struct.tree_common, ptr %84, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = load i64, ptr %86, align 8
  %88 = and i64 %87, 65535
  %89 = icmp eq i64 %88, 19
  br i1 %89, label %176, label %90

90:                                               ; preds = %82, %173
  %91 = phi ptr [ %174, %173 ], [ %77, %82 ]
  %92 = phi i32 [ %175, %173 ], [ 0, %82 ]
  %93 = icmp eq ptr %91, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = load i32, ptr %91, align 8, !tbaa !106
  br label %96

96:                                               ; preds = %94, %90
  %97 = phi i32 [ %95, %94 ], [ 0, %90 ]
  %98 = icmp eq i32 %97, %92
  br i1 %98, label %176, label %99

99:                                               ; preds = %96
  %100 = zext i32 %92 to i64
  %101 = getelementptr inbounds %struct.VEC_edge_base, ptr %91, i64 0, i32 2, i64 %100
  %102 = load ptr, ptr %101, align 8, !tbaa !5
  %103 = load ptr, ptr %102, align 8, !tbaa !295
  %104 = getelementptr inbounds %struct.basic_block_def, ptr %103, i64 0, i32 13
  %105 = load i32, ptr %104, align 8, !tbaa !58, !noalias !545
  %106 = and i32 %105, 512
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %129

108:                                              ; preds = %99
  %109 = getelementptr inbounds %struct.basic_block_def, ptr %103, i64 0, i32 7
  %110 = load ptr, ptr %109, align 8, !tbaa !16, !noalias !545
  %111 = icmp eq ptr %110, null
  br i1 %111, label %129, label %112

112:                                              ; preds = %108
  %113 = load ptr, ptr %110, align 8, !tbaa !59, !noalias !545
  %114 = icmp eq ptr %113, null
  br i1 %114, label %129, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %struct.gimple_seq_d, ptr %113, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !61, !noalias !545
  %118 = icmp eq ptr %117, null
  br i1 %118, label %129, label %119

119:                                              ; preds = %115, %125
  %120 = phi ptr [ %127, %125 ], [ %117, %115 ]
  %121 = load ptr, ptr %120, align 8, !tbaa !47
  %122 = load i32, ptr %121, align 8
  %123 = and i32 %122, 255
  %124 = icmp eq i32 %123, 2
  br i1 %124, label %125, label %129

125:                                              ; preds = %119
  %126 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %120, i64 0, i32 1
  %127 = load ptr, ptr %126, align 8, !tbaa !67
  %128 = icmp eq ptr %127, null
  br i1 %128, label %129, label %119, !llvm.loop !68

129:                                              ; preds = %119, %125, %99, %108, %112, %115
  %130 = phi ptr [ null, %115 ], [ null, %112 ], [ null, %108 ], [ null, %99 ], [ %121, %119 ], [ null, %125 ]
  %131 = load i32, ptr %130, align 8
  %132 = and i32 %131, 255
  %133 = icmp eq i32 %132, 9
  br i1 %133, label %134, label %165

134:                                              ; preds = %129
  %135 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 9), align 4, !tbaa !16
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %136
  %138 = load i64, ptr %137, align 8, !tbaa !50
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %134
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %141

141:                                              ; preds = %134, %140
  %142 = getelementptr inbounds i8, ptr %130, i64 %138
  %143 = load ptr, ptr %142, align 8, !tbaa !5
  %144 = icmp eq ptr %143, null
  br i1 %144, label %145, label %165

145:                                              ; preds = %141
  %146 = load i32, ptr %130, align 8
  %147 = and i32 %146, 256
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %165

149:                                              ; preds = %145
  %150 = getelementptr i8, ptr %130, i64 8
  %151 = load i32, ptr %150, align 8, !tbaa !16
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %157

153:                                              ; preds = %149
  %154 = load ptr, ptr @cfun, align 8, !tbaa !5
  %155 = getelementptr inbounds %struct.function, ptr %154, i64 0, i32 16
  %156 = load i32, ptr %155, align 4, !tbaa !544
  br label %157

157:                                              ; preds = %149, %153
  %158 = phi i32 [ %156, %153 ], [ %151, %149 ]
  %159 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %158, i32 noundef 172, ptr noundef nonnull @.str.180) #26
  %160 = load ptr, ptr @cfun, align 8, !tbaa !5
  %161 = getelementptr inbounds %struct.function, ptr %160, i64 0, i32 6
  %162 = load ptr, ptr %161, align 8, !tbaa !254
  %163 = load i64, ptr %162, align 8
  %164 = or i64 %163, 8388608
  store i64 %164, ptr %162, align 8
  br label %176

165:                                              ; preds = %129, %141, %145
  %166 = load ptr, ptr %76, align 8, !tbaa !5
  %167 = icmp eq ptr %166, null
  br i1 %167, label %171, label %168

168:                                              ; preds = %165
  %169 = load i32, ptr %166, align 8, !tbaa !106
  %170 = icmp ult i32 %92, %169
  br i1 %170, label %173, label %171

171:                                              ; preds = %168, %165
  tail call void @fancy_abort(ptr noundef nonnull @.str.147, i32 noundef 738, ptr noundef nonnull @.str.2) #26
  %172 = load ptr, ptr %76, align 8, !tbaa !5
  br label %173

173:                                              ; preds = %168, %171
  %174 = phi ptr [ %166, %168 ], [ %172, %171 ]
  %175 = add i32 %92, 1
  br label %90, !llvm.loop !548

176:                                              ; preds = %96, %72, %157, %66, %79, %82, %63
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @execute_warn_function_noreturn() #9 {
  %1 = load i32, ptr @warn_missing_noreturn, align 4, !tbaa !20
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %31, label %3

3:                                                ; preds = %0
  %4 = load ptr, ptr @cfun, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.function, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !254
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 524288
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.function, ptr %4, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !23
  %13 = getelementptr inbounds %struct.control_flow_graph, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !35
  %15 = load ptr, ptr %14, align 8, !tbaa !216
  %16 = icmp eq ptr %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %10
  %18 = load i32, ptr %15, align 8, !tbaa !106
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %31

20:                                               ; preds = %10, %17
  %21 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 12), align 8, !tbaa !549
  %22 = tail call zeroext i8 %21(ptr noundef nonnull %6) #26
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %20
  %25 = load ptr, ptr @cfun, align 8, !tbaa !5
  %26 = getelementptr inbounds %struct.function, ptr %25, i64 0, i32 6
  %27 = load ptr, ptr %26, align 8, !tbaa !254
  %28 = getelementptr inbounds %struct.tree_decl_minimal, ptr %27, i64 0, i32 1
  %29 = load i32, ptr %28, align 8, !tbaa !16
  %30 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %29, i32 noundef 133, ptr noundef nonnull @.str.181) #26
  br label %31

31:                                               ; preds = %24, %20, %17, %3, %0
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @gate_warn_unused_result() #21 {
  %1 = load i8, ptr @flag_warn_unused_result, align 1, !tbaa !16
  ret i8 %1
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @run_warn_unused_result() #9 {
  %1 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %2 = tail call ptr @gimple_body(ptr noundef %1) #26
  tail call fastcc void @do_warn_unused_result(ptr noundef %2)
  ret i32 0
}

declare ptr @vec_gc_p_reserve_exact(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @gimple_set_body(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @dump_scope_blocks(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @gimple_register_cfg_hooks() local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define internal i32 @locus_map_hash(ptr nocapture noundef readonly %0) #17 {
  %2 = load i32, ptr %0, align 4, !tbaa !550
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define internal i32 @locus_map_eq(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #17 {
  %3 = load i32, ptr %0, align 4, !tbaa !550
  %4 = load i32, ptr %1, align 4, !tbaa !550
  %5 = icmp eq i32 %3, %4
  %6 = zext i1 %5 to i32
  ret i32 %6
}

declare ptr @dump_begin(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @dump_end(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gsi_split_seq_before(ptr noundef) local_unnamed_addr #3

declare ptr @create_basic_block(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_set_bb(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_reg_type(ptr noundef) local_unnamed_addr #3

declare ptr @gimple_get_lhs(ptr noundef) local_unnamed_addr #3

declare ptr @create_tmp_var(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_build_assign_stat(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_set_lhs(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_build_goto(ptr noundef) local_unnamed_addr #3

declare void @make_eh_edges(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @make_eh_dispatch_edges(ptr noundef) local_unnamed_addr #3

declare ptr @new_omp_region(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @assign_discriminator(i32 noundef %0, ptr nocapture noundef %1) unnamed_addr #9 {
  %3 = alloca %struct.locus_discrim_map, align 4
  %4 = alloca %struct.expanded_location, align 8
  %5 = alloca %struct.expanded_location, align 8
  %6 = alloca %struct.expanded_location, align 8
  %7 = alloca %struct.expanded_location, align 8
  %8 = icmp eq i32 %0, 0
  br i1 %8, label %132, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 12
  %11 = load i32, ptr %10, align 4, !tbaa !552
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %132

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 13
  %15 = load i32, ptr %14, align 8, !tbaa !58, !noalias !66
  %16 = and i32 %15, 512
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %132

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.basic_block_def, ptr %1, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !16, !noalias !66
  %21 = icmp eq ptr %20, null
  br i1 %21, label %132, label %22

22:                                               ; preds = %18
  %23 = load ptr, ptr %20, align 8, !tbaa !59, !noalias !66
  %24 = icmp eq ptr %23, null
  br i1 %24, label %132, label %25

25:                                               ; preds = %22
  %26 = load ptr, ptr %23, align 8, !tbaa !42, !noalias !553
  %27 = icmp eq ptr %26, null
  br i1 %27, label %43, label %28

28:                                               ; preds = %25, %34
  %29 = phi ptr [ %36, %34 ], [ %26, %25 ]
  %30 = load ptr, ptr %29, align 8, !tbaa !47
  %31 = load i32, ptr %30, align 8
  %32 = and i32 %31, 255
  %33 = icmp eq i32 %32, 4
  br i1 %33, label %34, label %38

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %29, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !53
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %28, !llvm.loop !556

38:                                               ; preds = %34, %28
  %39 = phi ptr [ null, %34 ], [ %30, %28 ]
  br i1 %21, label %59, label %40

40:                                               ; preds = %38
  %41 = load ptr, ptr %20, align 8, !tbaa !59, !noalias !557
  %42 = icmp eq ptr %41, null
  br i1 %42, label %59, label %43

43:                                               ; preds = %25, %40
  %44 = phi ptr [ %39, %40 ], [ null, %25 ]
  %45 = phi ptr [ %41, %40 ], [ %23, %25 ]
  %46 = getelementptr inbounds %struct.gimple_seq_d, ptr %45, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !61, !noalias !557
  %48 = icmp eq ptr %47, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %43, %55
  %50 = phi ptr [ %57, %55 ], [ %47, %43 ]
  %51 = load ptr, ptr %50, align 8, !tbaa !47
  %52 = load i32, ptr %51, align 8
  %53 = and i32 %52, 255
  %54 = icmp eq i32 %53, 2
  br i1 %54, label %55, label %59

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %50, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !67
  %58 = icmp eq ptr %57, null
  br i1 %58, label %59, label %49, !llvm.loop !68

59:                                               ; preds = %49, %55, %38, %40, %43
  %60 = phi ptr [ %44, %43 ], [ %39, %40 ], [ %39, %38 ], [ %44, %55 ], [ %44, %49 ]
  %61 = phi ptr [ null, %43 ], [ null, %40 ], [ null, %38 ], [ %51, %49 ], [ null, %55 ]
  %62 = icmp eq ptr %60, null
  br i1 %62, label %84, label %63

63:                                               ; preds = %59
  %64 = getelementptr i8, ptr %60, i64 8
  %65 = load i32, ptr %64, align 8, !tbaa !16
  %66 = icmp eq i32 %65, %0
  br i1 %66, label %107, label %67

67:                                               ; preds = %63
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %6) #26
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %6, i32 noundef %0) #26
  %68 = load ptr, ptr %6, align 8, !tbaa.struct !560
  %69 = getelementptr inbounds i8, ptr %6, i64 8
  %70 = load i32, ptr %69, align 8, !tbaa.struct !561
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %6) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %7) #26
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %7, i32 noundef %65) #26
  %71 = load ptr, ptr %7, align 8, !tbaa.struct !560
  %72 = getelementptr inbounds i8, ptr %7, i64 8
  %73 = load i32, ptr %72, align 8, !tbaa.struct !561
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %7) #26
  %74 = icmp eq i32 %70, %73
  br i1 %74, label %75, label %84

75:                                               ; preds = %67
  %76 = icmp eq ptr %68, %71
  br i1 %76, label %107, label %77

77:                                               ; preds = %75
  %78 = icmp ne ptr %68, null
  %79 = icmp ne ptr %71, null
  %80 = select i1 %78, i1 %79, i1 false
  br i1 %80, label %81, label %84

81:                                               ; preds = %77
  %82 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %68, ptr noundef nonnull dereferenceable(1) %71)
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %107, label %84

84:                                               ; preds = %77, %67, %81, %59
  %85 = icmp eq ptr %61, null
  br i1 %85, label %132, label %86

86:                                               ; preds = %84
  %87 = getelementptr i8, ptr %61, i64 8
  %88 = load i32, ptr %87, align 8, !tbaa !16
  %89 = icmp eq i32 %88, %0
  br i1 %89, label %107, label %90

90:                                               ; preds = %86
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %4, i32 noundef %0) #26
  %91 = load ptr, ptr %4, align 8, !tbaa.struct !560
  %92 = getelementptr inbounds i8, ptr %4, i64 8
  %93 = load i32, ptr %92, align 8, !tbaa.struct !561
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %5) #26
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %5, i32 noundef %88) #26
  %94 = load ptr, ptr %5, align 8, !tbaa.struct !560
  %95 = getelementptr inbounds i8, ptr %5, i64 8
  %96 = load i32, ptr %95, align 8, !tbaa.struct !561
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %5) #26
  %97 = icmp eq i32 %93, %96
  br i1 %97, label %98, label %132

98:                                               ; preds = %90
  %99 = icmp eq ptr %91, %94
  br i1 %99, label %107, label %100

100:                                              ; preds = %98
  %101 = icmp ne ptr %91, null
  %102 = icmp ne ptr %94, null
  %103 = select i1 %101, i1 %102, i1 false
  br i1 %103, label %104, label %132

104:                                              ; preds = %100
  %105 = call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %91, ptr noundef nonnull dereferenceable(1) %94)
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %132

107:                                              ; preds = %98, %86, %75, %63, %104, %81
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #26
  store i32 %0, ptr %3, align 4, !tbaa !550
  %108 = getelementptr inbounds %struct.locus_discrim_map, ptr %3, i64 0, i32 1
  store i32 0, ptr %108, align 4, !tbaa !562
  %109 = load ptr, ptr @discriminator_per_locus, align 8, !tbaa !5
  %110 = call ptr @htab_find_slot_with_hash(ptr noundef %109, ptr noundef nonnull %3, i32 noundef %0, i32 noundef 1) #26
  %111 = icmp eq ptr %110, null
  br i1 %111, label %112, label %113

112:                                              ; preds = %107
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 724, ptr noundef nonnull @.str.2) #26
  br label %113

113:                                              ; preds = %112, %107
  %114 = load ptr, ptr %110, align 8, !tbaa !5
  %115 = icmp eq ptr %114, null
  br i1 %115, label %120, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds %struct.locus_discrim_map, ptr %114, i64 0, i32 1
  %118 = load i32, ptr %117, align 4, !tbaa !562
  %119 = add nsw i32 %118, 1
  br label %128

120:                                              ; preds = %113
  %121 = call ptr @xmalloc(i64 noundef 8) #26
  store ptr %121, ptr %110, align 8, !tbaa !5
  %122 = icmp eq ptr %121, null
  br i1 %122, label %123, label %125

123:                                              ; preds = %120
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 728, ptr noundef nonnull @.str.2) #26
  %124 = load ptr, ptr %110, align 8, !tbaa !5
  br label %125

125:                                              ; preds = %123, %120
  %126 = phi ptr [ %121, %120 ], [ %124, %123 ]
  store i32 %0, ptr %126, align 4, !tbaa !550
  %127 = getelementptr inbounds %struct.locus_discrim_map, ptr %126, i64 0, i32 1
  store i32 0, ptr %127, align 4, !tbaa !562
  br label %128

128:                                              ; preds = %116, %125
  %129 = phi i32 [ 1, %125 ], [ %119, %116 ]
  %130 = phi ptr [ %126, %125 ], [ %114, %116 ]
  %131 = getelementptr inbounds %struct.locus_discrim_map, ptr %130, i64 0, i32 1
  store i32 %129, ptr %131, align 4, !tbaa !562
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #26
  store i32 %129, ptr %10, align 4, !tbaa !552
  br label %132

132:                                              ; preds = %22, %18, %100, %90, %13, %84, %104, %128, %2, %9
  ret void
}

declare void @free_omp_regions() local_unnamed_addr #3

declare void @expand_location(ptr sret(%struct.expanded_location) align 8, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #22

declare ptr @htab_find_slot_with_hash(ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @link_use_stmts_after(ptr noundef %0, ptr noundef %1) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8, !tbaa !274
  %7 = load ptr, ptr %6, align 8, !tbaa !5
  %8 = tail call zeroext i8 @is_gimple_reg(ptr noundef %7) #26
  %9 = icmp eq i8 %8, 0
  %10 = load i32, ptr %4, align 8
  %11 = and i32 %10, 255
  %12 = icmp eq i32 %11, 16
  br i1 %12, label %13, label %64

13:                                               ; preds = %2
  %14 = getelementptr i8, ptr %4, i64 40
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = tail call zeroext i8 @is_gimple_reg(ptr noundef %15) #26
  %17 = icmp eq i8 %16, 0
  %18 = xor i1 %9, %17
  br i1 %18, label %152, label %19

19:                                               ; preds = %13
  %20 = getelementptr i8, ptr %4, i64 36
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %23, label %152

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 4, i64 0
  %25 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 1
  br label %26

26:                                               ; preds = %61, %23
  %27 = phi ptr [ %24, %23 ], [ %63, %61 ]
  %28 = phi ptr [ %0, %23 ], [ %54, %61 ]
  %29 = phi i32 [ 1, %23 ], [ %57, %61 ]
  %30 = getelementptr i8, ptr %27, i64 24
  %31 = load ptr, ptr %30, align 8, !tbaa !274
  %32 = load ptr, ptr %31, align 8, !tbaa !5
  %33 = icmp ne ptr %32, %7
  %34 = icmp eq ptr %27, %0
  %35 = or i1 %33, %34
  br i1 %35, label %53, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %28, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !208
  %39 = icmp eq ptr %38, %27
  br i1 %39, label %53, label %40

40:                                               ; preds = %36
  %41 = load ptr, ptr %27, align 8, !tbaa !218
  %42 = icmp eq ptr %41, null
  br i1 %42, label %49, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %27, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !208
  %46 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %41, i64 0, i32 1
  store ptr %45, ptr %46, align 8, !tbaa !208
  %47 = load ptr, ptr %44, align 8, !tbaa !208
  store ptr %41, ptr %47, align 8, !tbaa !218
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %27, i8 0, i64 16, i1 false)
  %48 = load ptr, ptr %37, align 8, !tbaa !208
  br label %49

49:                                               ; preds = %43, %40
  %50 = phi ptr [ %38, %40 ], [ %48, %43 ]
  store ptr %28, ptr %27, align 8, !tbaa !218
  %51 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %27, i64 0, i32 1
  store ptr %50, ptr %51, align 8, !tbaa !208
  %52 = load ptr, ptr %37, align 8, !tbaa !208
  store ptr %27, ptr %52, align 8, !tbaa !218
  store ptr %27, ptr %37, align 8, !tbaa !208
  br label %53

53:                                               ; preds = %26, %36, %49
  %54 = phi ptr [ %28, %26 ], [ %27, %49 ], [ %27, %36 ]
  %55 = icmp slt i32 %29, %21
  br i1 %55, label %56, label %152

56:                                               ; preds = %53
  %57 = add nuw nsw i32 %29, 1
  %58 = load i32, ptr %25, align 8, !tbaa !16
  %59 = icmp ult i32 %58, %29
  br i1 %59, label %60, label %61

60:                                               ; preds = %56
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3103, ptr noundef nonnull @.str.2) #26
  br label %61

61:                                               ; preds = %56, %60
  %62 = zext i32 %29 to i64
  %63 = getelementptr inbounds %struct.gimple_statement_phi, ptr %4, i64 0, i32 4, i64 %62
  br label %26

64:                                               ; preds = %2
  br i1 %9, label %116, label %65

65:                                               ; preds = %64
  %66 = add nsw i32 %11, -10
  %67 = icmp ult i32 %66, -9
  br i1 %67, label %152, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %4, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = icmp eq ptr %70, null
  br i1 %71, label %152, label %72

72:                                               ; preds = %68
  %73 = and i32 %10, 254
  %74 = add nsw i32 %73, -10
  %75 = icmp ult i32 %74, -4
  br i1 %75, label %83, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %4, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = icmp eq ptr %78, null
  br i1 %79, label %83, label %80

80:                                               ; preds = %76
  %81 = load ptr, ptr %70, align 8, !tbaa !563
  %82 = icmp eq ptr %81, null
  br i1 %82, label %152, label %83

83:                                               ; preds = %72, %76, %80
  %84 = phi ptr [ %70, %72 ], [ %70, %76 ], [ %81, %80 ]
  br label %85

85:                                               ; preds = %83, %113
  %86 = phi ptr [ %89, %113 ], [ %84, %83 ]
  %87 = phi ptr [ %114, %113 ], [ %0, %83 ]
  %88 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1
  %89 = load ptr, ptr %86, align 8, !tbaa !563
  %90 = getelementptr %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 3
  %91 = load ptr, ptr %90, align 8, !tbaa !274
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  %93 = icmp ne ptr %92, %7
  %94 = icmp eq ptr %88, %0
  %95 = or i1 %93, %94
  br i1 %95, label %113, label %96

96:                                               ; preds = %85
  %97 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %87, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !208
  %99 = icmp eq ptr %98, %88
  br i1 %99, label %113, label %100

100:                                              ; preds = %96
  %101 = load ptr, ptr %88, align 8, !tbaa !218
  %102 = icmp eq ptr %101, null
  br i1 %102, label %109, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 1
  %105 = load ptr, ptr %104, align 8, !tbaa !208
  %106 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %101, i64 0, i32 1
  store ptr %105, ptr %106, align 8, !tbaa !208
  %107 = load ptr, ptr %104, align 8, !tbaa !208
  store ptr %101, ptr %107, align 8, !tbaa !218
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %88, i8 0, i64 16, i1 false)
  %108 = load ptr, ptr %97, align 8, !tbaa !208
  br label %109

109:                                              ; preds = %103, %100
  %110 = phi ptr [ %98, %100 ], [ %108, %103 ]
  store ptr %87, ptr %88, align 8, !tbaa !218
  %111 = getelementptr inbounds %struct.use_optype_d, ptr %86, i64 0, i32 1, i32 1
  store ptr %110, ptr %111, align 8, !tbaa !208
  %112 = load ptr, ptr %97, align 8, !tbaa !208
  store ptr %88, ptr %112, align 8, !tbaa !218
  store ptr %88, ptr %97, align 8, !tbaa !208
  br label %113

113:                                              ; preds = %109, %96, %85
  %114 = phi ptr [ %87, %85 ], [ %88, %109 ], [ %88, %96 ]
  %115 = icmp eq ptr %89, null
  br i1 %115, label %152, label %85, !llvm.loop !565

116:                                              ; preds = %64
  %117 = and i32 %10, 254
  %118 = add nsw i32 %117, -10
  %119 = icmp ult i32 %118, -4
  br i1 %119, label %152, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.gimple_statement_with_ops_base, ptr %4, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !16
  %123 = icmp eq ptr %122, null
  br i1 %123, label %152, label %124

124:                                              ; preds = %120
  %125 = getelementptr %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 3
  %126 = load ptr, ptr %125, align 8, !tbaa !274
  %127 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, ptr %4, i64 0, i32 2
  %128 = icmp eq ptr %126, %127
  %129 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1
  br i1 %128, label %130, label %152

130:                                              ; preds = %124
  %131 = load ptr, ptr %127, align 8, !tbaa !5
  %132 = icmp ne ptr %131, %7
  %133 = icmp eq ptr %129, %0
  %134 = select i1 %132, i1 true, i1 %133
  br i1 %134, label %152, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !208
  %138 = icmp eq ptr %137, %129
  br i1 %138, label %152, label %139

139:                                              ; preds = %135
  %140 = load ptr, ptr %129, align 8, !tbaa !218
  %141 = icmp eq ptr %140, null
  br i1 %141, label %148, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !208
  %145 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %140, i64 0, i32 1
  store ptr %144, ptr %145, align 8, !tbaa !208
  %146 = load ptr, ptr %143, align 8, !tbaa !208
  store ptr %140, ptr %146, align 8, !tbaa !218
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %129, i8 0, i64 16, i1 false)
  %147 = load ptr, ptr %136, align 8, !tbaa !208
  br label %148

148:                                              ; preds = %142, %139
  %149 = phi ptr [ %137, %139 ], [ %147, %142 ]
  store ptr %0, ptr %129, align 8, !tbaa !218
  %150 = getelementptr inbounds %struct.use_optype_d, ptr %122, i64 0, i32 1, i32 1
  store ptr %149, ptr %150, align 8, !tbaa !208
  %151 = load ptr, ptr %136, align 8, !tbaa !208
  store ptr %129, ptr %151, align 8, !tbaa !218
  store ptr %129, ptr %136, align 8, !tbaa !208
  br label %152

152:                                              ; preds = %113, %53, %68, %65, %80, %19, %13, %124, %120, %116, %148, %135, %130
  %153 = phi ptr [ %0, %130 ], [ %129, %148 ], [ %129, %135 ], [ %0, %116 ], [ %0, %120 ], [ %0, %124 ], [ %0, %13 ], [ %0, %19 ], [ %0, %80 ], [ %0, %65 ], [ %0, %68 ], [ %54, %53 ], [ %114, %113 ]
  %154 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !218
  %156 = icmp eq ptr %155, null
  br i1 %156, label %163, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  %159 = load ptr, ptr %158, align 8, !tbaa !208
  %160 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %155, i64 0, i32 1
  store ptr %159, ptr %160, align 8, !tbaa !208
  %161 = load ptr, ptr %158, align 8, !tbaa !208
  store ptr %155, ptr %161, align 8, !tbaa !218
  %162 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  store i64 0, ptr %162, align 8
  br label %163

163:                                              ; preds = %157, %152
  store ptr %153, ptr %154, align 8, !tbaa !218
  %164 = getelementptr inbounds %struct.ssa_use_operand_d, ptr %153, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !208
  %166 = getelementptr inbounds %struct.immediate_use_iterator_d, ptr %1, i64 0, i32 2, i32 1
  store ptr %165, ptr %166, align 8, !tbaa !208
  %167 = load ptr, ptr %164, align 8, !tbaa !208
  store ptr %154, ptr %167, align 8, !tbaa !218
  store ptr %154, ptr %164, align 8, !tbaa !208
  ret void
}

declare void @gimple_set_modified(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @update_stmt_operands(ptr noundef) local_unnamed_addr #3

declare ptr @vec_heap_o_reserve_exact(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare ptr @find_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_compare(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @verify_gimple_comparison(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = tail call zeroext i8 @is_gimple_val(ptr noundef %1) #26
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %2) #26
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %10, %3
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.109) #26
  br label %59

14:                                               ; preds = %10
  %15 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %5, ptr noundef %7) #26
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %52

17:                                               ; preds = %14
  %18 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %7, ptr noundef %5) #26
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %52

20:                                               ; preds = %17
  %21 = load i64, ptr %5, align 8
  %22 = trunc i64 %21 to i16
  switch i16 %22, label %58 [
    i16 10, label %23
    i16 12, label %23
  ]

23:                                               ; preds = %20, %20
  %24 = load i64, ptr %7, align 8
  %25 = trunc i64 %24 to i16
  switch i16 %25, label %58 [
    i16 10, label %26
    i16 12, label %26
  ]

26:                                               ; preds = %23, %23
  %27 = and i64 %21, 65535
  %28 = icmp eq i64 %27, 14
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = tail call i32 @vector_type_mode(ptr noundef nonnull %5) #26
  %31 = load i64, ptr %7, align 8
  br label %37

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 6
  %34 = load i32, ptr %33, align 4
  %35 = lshr i32 %34, 16
  %36 = and i32 %35, 255
  br label %37

37:                                               ; preds = %32, %29
  %38 = phi i64 [ %31, %29 ], [ %24, %32 ]
  %39 = phi i32 [ %30, %29 ], [ %36, %32 ]
  %40 = and i64 %38, 65535
  %41 = icmp eq i64 %40, 14
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = tail call i32 @vector_type_mode(ptr noundef nonnull %7) #26
  br label %49

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 6
  %46 = load i32, ptr %45, align 4
  %47 = lshr i32 %46, 16
  %48 = and i32 %47, 255
  br label %49

49:                                               ; preds = %44, %42
  %50 = phi i32 [ %43, %42 ], [ %48, %44 ]
  %51 = icmp eq i32 %39, %50
  br i1 %51, label %52, label %58

52:                                               ; preds = %49, %17, %14
  %53 = load i64, ptr %0, align 8
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 65535
  %56 = add nsw i32 %55, -6
  %57 = icmp ult i32 %56, 3
  br i1 %57, label %59, label %58

58:                                               ; preds = %52, %23, %20, %49
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.110) #26
  tail call void @debug_generic_expr(ptr noundef %0) #26
  tail call void @debug_generic_expr(ptr noundef %5) #26
  tail call void @debug_generic_expr(ptr noundef %7) #26
  br label %59

59:                                               ; preds = %52, %58, %13
  %60 = phi i8 [ 1, %58 ], [ 1, %13 ], [ 0, %52 ]
  ret i8 %60
}

declare zeroext i8 @useless_type_conversion_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @verify_types_in_gimple_reference(ptr noundef %0, i8 noundef zeroext %1) unnamed_addr #9 {
  %3 = icmp eq i8 %1, 0
  br label %4

4:                                                ; preds = %133, %2
  %5 = phi ptr [ %0, %2 ], [ %10, %133 ]
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %146 [
    i16 42, label %8
    i16 41, label %8
    i16 45, label %8
    i16 46, label %8
    i16 118, label %8
    i16 43, label %8
    i16 44, label %8
  ]

8:                                                ; preds = %4, %4, %4, %4, %4, %4, %4
  %9 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = trunc i64 %6 to i32
  %12 = and i32 %11, 65535
  %13 = add nsw i32 %12, -45
  %14 = icmp ult i32 %13, 2
  br i1 %14, label %15, label %35

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = tail call zeroext i8 @is_gimple_val(ptr noundef %17) #26
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1, i32 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = icmp eq ptr %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %22) #26
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %24, %20
  %28 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1, i32 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = icmp eq ptr %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %29) #26
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31, %24, %15
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.72) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %5) #26
  br label %180

35:                                               ; preds = %8, %27, %31
  %36 = load i64, ptr %5, align 8
  %37 = and i64 %36, 65535
  %38 = icmp eq i64 %37, 45
  br i1 %38, label %39, label %57

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = getelementptr inbounds %struct.tree_common, ptr %43, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !16
  %46 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %41, ptr noundef %45) #26
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %39
  %49 = load i64, ptr %5, align 8
  br label %57

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %52 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.73) #26
  %53 = load ptr, ptr %51, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %53) #26
  %54 = load ptr, ptr %52, align 8, !tbaa !16
  %55 = getelementptr inbounds %struct.tree_common, ptr %54, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %56) #26
  br label %180

57:                                               ; preds = %48, %35
  %58 = phi i64 [ %49, %48 ], [ %36, %35 ]
  %59 = and i64 %58, 65535
  %60 = icmp eq i64 %59, 46
  br i1 %60, label %61, label %83

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = getelementptr inbounds %struct.tree_common, ptr %63, i64 0, i32 2
  %65 = load ptr, ptr %64, align 8, !tbaa !16
  %66 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !16
  %68 = getelementptr inbounds %struct.tree_common, ptr %67, i64 0, i32 2
  %69 = load ptr, ptr %68, align 8, !tbaa !16
  %70 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %65, ptr noundef %69) #26
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %61
  %73 = load i64, ptr %5, align 8
  br label %83

74:                                               ; preds = %61
  %75 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %76 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.74) #26
  %77 = load ptr, ptr %75, align 8, !tbaa !16
  %78 = getelementptr inbounds %struct.tree_common, ptr %77, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %79) #26
  %80 = load ptr, ptr %76, align 8, !tbaa !16
  %81 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %82) #26
  br label %180

83:                                               ; preds = %72, %57
  %84 = phi i64 [ %73, %72 ], [ %58, %57 ]
  %85 = trunc i64 %84 to i32
  %86 = and i32 %85, 65535
  %87 = add nsw i32 %86, -43
  %88 = icmp ult i32 %87, 2
  br i1 %88, label %89, label %107

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  %94 = getelementptr inbounds %struct.tree_common, ptr %93, i64 0, i32 2
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  %96 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %91, ptr noundef %95) #26
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %89
  %99 = load i64, ptr %5, align 8
  br label %107

100:                                              ; preds = %89
  %101 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %102 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.75) #26
  %103 = load ptr, ptr %101, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %103) #26
  %104 = load ptr, ptr %102, align 8, !tbaa !16
  %105 = getelementptr inbounds %struct.tree_common, ptr %104, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %106) #26
  br label %180

107:                                              ; preds = %98, %83
  %108 = phi i64 [ %99, %98 ], [ %84, %83 ]
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 41
  br i1 %110, label %111, label %129

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = getelementptr inbounds %struct.tree_common, ptr %115, i64 0, i32 2
  %117 = load ptr, ptr %116, align 8, !tbaa !16
  %118 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %113, ptr noundef %117) #26
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %111
  %121 = load i64, ptr %5, align 8
  br label %129

122:                                              ; preds = %111
  %123 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %124 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.76) #26
  %125 = load ptr, ptr %123, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %125) #26
  %126 = load ptr, ptr %124, align 8, !tbaa !16
  %127 = getelementptr inbounds %struct.tree_common, ptr %126, i64 0, i32 2
  %128 = load ptr, ptr %127, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %128) #26
  br label %180

129:                                              ; preds = %120, %107
  %130 = phi i64 [ %121, %120 ], [ %108, %107 ]
  %131 = and i64 %130, 65535
  %132 = icmp eq i64 %131, 118
  br i1 %132, label %134, label %133

133:                                              ; preds = %129, %143, %143, %143, %143, %143, %143, %143
  br label %4

134:                                              ; preds = %129
  br i1 %3, label %143, label %135

135:                                              ; preds = %134
  %136 = load i64, ptr %10, align 8
  %137 = and i64 %136, 65535
  %138 = icmp eq i64 %137, 141
  br i1 %138, label %142, label %139

139:                                              ; preds = %135
  %140 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %10) #26
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %143, label %142

142:                                              ; preds = %139, %135
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.77) #26
  tail call void @debug_generic_stmt(ptr noundef nonnull %5) #26
  br label %180

143:                                              ; preds = %139, %134
  %144 = load i64, ptr %10, align 8
  %145 = trunc i64 %144 to i16
  switch i16 %145, label %180 [
    i16 42, label %133
    i16 41, label %133
    i16 45, label %133
    i16 46, label %133
    i16 118, label %133
    i16 43, label %133
    i16 44, label %133
  ]

146:                                              ; preds = %4
  br i1 %3, label %147, label %150

147:                                              ; preds = %146
  %148 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %5) #26
  %149 = icmp eq i8 %148, 0
  br i1 %149, label %150, label %180

150:                                              ; preds = %147, %146
  %151 = tail call zeroext i8 @is_gimple_id(ptr noundef nonnull %5) #26
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %153, label %180

153:                                              ; preds = %150
  %154 = load i64, ptr %5, align 8
  %155 = trunc i64 %154 to i16
  switch i16 %155, label %156 [
    i16 47, label %157
    i16 48, label %157
    i16 49, label %157
    i16 152, label %157
  ]

156:                                              ; preds = %153
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.78) #26
  br label %180

157:                                              ; preds = %153, %153, %153, %153
  %158 = and i64 %154, 65535
  %159 = icmp eq i64 %158, 152
  br i1 %159, label %180, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %162 = load ptr, ptr %161, align 8, !tbaa !16
  %163 = tail call zeroext i8 @is_gimple_val(ptr noundef %162) #26
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %165, label %166

165:                                              ; preds = %160
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.79) #26
  tail call void @debug_generic_stmt(ptr noundef %162) #26
  br label %180

166:                                              ; preds = %160
  %167 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %168 = load ptr, ptr %167, align 8, !tbaa !16
  %169 = getelementptr inbounds %struct.tree_common, ptr %162, i64 0, i32 2
  %170 = load ptr, ptr %169, align 8, !tbaa !16
  %171 = getelementptr inbounds %struct.tree_common, ptr %170, i64 0, i32 2
  %172 = load ptr, ptr %171, align 8, !tbaa !16
  %173 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %168, ptr noundef %172) #26
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %180

175:                                              ; preds = %166
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.80) #26
  %176 = load ptr, ptr %167, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %176) #26
  %177 = load ptr, ptr %169, align 8, !tbaa !16
  %178 = getelementptr inbounds %struct.tree_common, ptr %177, i64 0, i32 2
  %179 = load ptr, ptr %178, align 8, !tbaa !16
  tail call void @debug_generic_stmt(ptr noundef %179) #26
  br label %180

180:                                              ; preds = %143, %34, %50, %74, %100, %122, %142, %175, %166, %165, %157, %156, %150, %147
  %181 = phi i8 [ 0, %147 ], [ 1, %175 ], [ 1, %165 ], [ 1, %156 ], [ 0, %150 ], [ 0, %157 ], [ 0, %166 ], [ 1, %34 ], [ 1, %50 ], [ 1, %74 ], [ 1, %100 ], [ 1, %122 ], [ 1, %142 ], [ 0, %143 ]
  ret i8 %181
}

declare zeroext i8 @is_gimple_addressable(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @types_compatible_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @debug_generic_stmt(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_val(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_id(ptr noundef) local_unnamed_addr #3

declare ptr @div_if_zero_remainder(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_lvalue(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @gimple_call_arg(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #2 {
  %3 = add i32 %1, 3
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 255
  %6 = add nsw i32 %5, -10
  %7 = icmp ult i32 %6, -9
  br i1 %7, label %22, label %8

8:                                                ; preds = %2
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %12
  %14 = load i64, ptr %13, align 8, !tbaa !50
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %17

17:                                               ; preds = %16, %8
  %18 = getelementptr inbounds i8, ptr %0, i64 %14
  %19 = zext i32 %3 to i64
  %20 = getelementptr inbounds ptr, ptr %18, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !5
  br label %22

22:                                               ; preds = %2, %17
  %23 = phi ptr [ %21, %17 ], [ null, %2 ]
  ret ptr %23
}

declare zeroext i8 @is_gimple_operand(ptr noundef) local_unnamed_addr #3

declare i32 @vector_type_mode(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_call_addr(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @verify_expr(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture readnone %2) #9 {
  %4 = load ptr, ptr %0, align 8, !tbaa !5
  %5 = load i64, ptr %4, align 8
  %6 = and i64 %5, 65535
  %7 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %6
  %8 = load i32, ptr %7, align 4, !tbaa !16
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  store i32 0, ptr %1, align 4, !tbaa !20
  %11 = load i64, ptr %4, align 8
  br label %12

12:                                               ; preds = %10, %3
  %13 = phi i64 [ %11, %10 ], [ %5, %3 ]
  %14 = trunc i64 %13 to i16
  switch i16 %14, label %263 [
    i16 141, label %16
    i16 47, label %21
    i16 148, label %30
    i16 53, label %38
    i16 121, label %40
    i16 56, label %72
    i16 117, label %87
    i16 116, label %88
    i16 113, label %88
    i16 77, label %88
    i16 78, label %88
    i16 79, label %88
    i16 82, label %88
    i16 90, label %88
    i16 96, label %88
    i16 43, label %15
    i16 44, label %15
    i16 41, label %15
    i16 45, label %15
    i16 46, label %15
    i16 42, label %15
    i16 118, label %15
    i16 63, label %202
    i16 64, label %202
    i16 66, label %222
    i16 97, label %239
    i16 98, label %239
    i16 99, label %239
    i16 100, label %239
    i16 101, label %239
    i16 102, label %239
    i16 103, label %239
    i16 104, label %239
    i16 105, label %239
    i16 106, label %239
    i16 107, label %239
    i16 108, label %239
    i16 109, label %239
    i16 110, label %239
    i16 65, label %239
    i16 67, label %239
    i16 68, label %239
    i16 69, label %239
    i16 70, label %239
    i16 71, label %239
    i16 72, label %239
    i16 73, label %239
    i16 74, label %239
    i16 75, label %239
    i16 76, label %239
    i16 80, label %239
    i16 81, label %239
    i16 83, label %239
    i16 84, label %239
    i16 85, label %239
    i16 86, label %239
    i16 87, label %239
    i16 88, label %239
    i16 89, label %239
    i16 51, label %253
  ]

15:                                               ; preds = %12, %12, %12, %12, %12, %12, %12
  br label %95

16:                                               ; preds = %12
  %17 = and i64 %13, 33554432
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %263, label %19

19:                                               ; preds = %16
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.123) #26
  %20 = load ptr, ptr %0, align 8, !tbaa !5
  br label %263

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = tail call zeroext i8 @is_gimple_reg(ptr noundef %23) #26
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %263

26:                                               ; preds = %21
  %27 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef %23) #26
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %263

29:                                               ; preds = %26
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.124) #26
  br label %263

30:                                               ; preds = %12
  %31 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = tail call ptr @fold(ptr noundef %32) #26
  %34 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !5
  %35 = icmp eq ptr %33, %34
  br i1 %35, label %36, label %263

36:                                               ; preds = %30
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.125) #26
  %37 = load ptr, ptr %0, align 8, !tbaa !5
  br label %263

38:                                               ; preds = %12
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.126) #26
  %39 = load ptr, ptr %0, align 8, !tbaa !5
  br label %263

40:                                               ; preds = %12
  %41 = tail call zeroext i8 @is_gimple_address(ptr noundef nonnull %4) #26
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2544, ptr noundef nonnull @.str.2) #26
  br label %44

44:                                               ; preds = %40, %43
  %45 = load i64, ptr %4, align 8
  tail call void @recompute_tree_invariant_for_addr_expr(ptr noundef nonnull %4) #26
  %46 = load i64, ptr %4, align 8
  %47 = xor i64 %46, %45
  %48 = and i64 %47, 131072
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %44
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.127) #26
  br label %263

51:                                               ; preds = %44
  %52 = and i64 %47, 65536
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %51
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.128) #26
  br label %263

55:                                               ; preds = %51, %61
  %56 = phi ptr [ %58, %61 ], [ %4, %51 ]
  %57 = getelementptr inbounds %struct.tree_exp, ptr %56, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !16
  %59 = load i64, ptr %58, align 8
  %60 = trunc i64 %59 to i16
  switch i16 %60, label %263 [
    i16 42, label %61
    i16 41, label %61
    i16 45, label %61
    i16 46, label %61
    i16 118, label %61
    i16 43, label %61
    i16 44, label %61
    i16 32, label %62
    i16 34, label %62
    i16 36, label %62
  ]

61:                                               ; preds = %55, %55, %55, %55, %55, %55, %55
  br label %55

62:                                               ; preds = %55, %55, %55
  %63 = and i64 %59, 262144
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.129) #26
  br label %263

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.tree_decl_common, ptr %58, i64 0, i32 2
  %68 = load i64, ptr %67, align 8
  %69 = and i64 %68, 134217728
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %263, label %71

71:                                               ; preds = %66
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.130) #26
  br label %263

72:                                               ; preds = %12
  %73 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = getelementptr inbounds %struct.tree_common, ptr %74, i64 0, i32 2
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = load i64, ptr %76, align 8
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 65535
  %80 = add nsw i32 %79, -6
  %81 = icmp ult i32 %80, 3
  br i1 %81, label %83, label %82

82:                                               ; preds = %72
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.131) #26
  br label %263

83:                                               ; preds = %72
  %84 = tail call zeroext i8 @is_gimple_condexpr(ptr noundef nonnull %74) #26
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %263

86:                                               ; preds = %83
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.132) #26
  br label %263

87:                                               ; preds = %12
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2605, ptr noundef nonnull @.str.2) #26
  br label %88

88:                                               ; preds = %87, %12, %12, %12, %12, %12, %12, %12, %12
  %89 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %90 = load ptr, ptr %89, align 8, !tbaa !16
  %91 = tail call zeroext i8 @is_gimple_val(ptr noundef %90) #26
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %263

93:                                               ; preds = %88
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.133) #26
  %94 = load ptr, ptr %89, align 8, !tbaa !16
  br label %263

95:                                               ; preds = %15, %190
  %96 = phi i64 [ %193, %190 ], [ %13, %15 ]
  %97 = phi ptr [ %192, %190 ], [ %4, %15 ]
  %98 = trunc i64 %96 to i16
  switch i16 %98, label %194 [
    i16 42, label %99
    i16 41, label %99
    i16 45, label %99
    i16 46, label %99
    i16 118, label %99
    i16 43, label %99
    i16 44, label %99
  ]

99:                                               ; preds = %95, %95, %95, %95, %95, %95, %95
  %100 = and i64 %96, 65535
  %101 = icmp eq i64 %100, 41
  br i1 %101, label %102, label %112

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 1
  %104 = load ptr, ptr %103, align 8, !tbaa !16
  %105 = icmp eq ptr %104, null
  br i1 %105, label %112, label %106

106:                                              ; preds = %102
  %107 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %104) #26
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %190

109:                                              ; preds = %106
  %110 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 1
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.134) #26
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  br label %263

112:                                              ; preds = %102, %99
  switch i16 %98, label %190 [
    i16 45, label %113
    i16 46, label %113
    i16 42, label %141
  ]

113:                                              ; preds = %112, %112
  %114 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = tail call zeroext i8 @is_gimple_val(ptr noundef %115) #26
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %121

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.135) #26
  %120 = load ptr, ptr %119, align 8, !tbaa !16
  br label %263

121:                                              ; preds = %113
  %122 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 1
  %123 = load ptr, ptr %122, align 8, !tbaa !16
  %124 = icmp eq ptr %123, null
  br i1 %124, label %131, label %125

125:                                              ; preds = %121
  %126 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %123) #26
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 1
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.136) #26
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  br label %263

131:                                              ; preds = %125, %121
  %132 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !16
  %134 = icmp eq ptr %133, null
  br i1 %134, label %190, label %135

135:                                              ; preds = %131
  %136 = tail call zeroext i8 @is_gimple_val(ptr noundef nonnull %133) #26
  %137 = icmp eq i8 %136, 0
  br i1 %137, label %138, label %190

138:                                              ; preds = %135
  %139 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 2
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.137) #26
  %140 = load ptr, ptr %139, align 8, !tbaa !16
  br label %263

141:                                              ; preds = %112
  %142 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1
  %143 = load ptr, ptr %142, align 8, !tbaa !16
  %144 = tail call i32 @host_integerp(ptr noundef %143, i32 noundef 1) #26
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %151, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 1, i32 0, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !16
  %149 = tail call i32 @host_integerp(ptr noundef %148, i32 noundef 1) #26
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %146, %141
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.138) #26
  br label %263

152:                                              ; preds = %146
  %153 = getelementptr inbounds %struct.tree_common, ptr %97, i64 0, i32 2
  %154 = load ptr, ptr %153, align 8, !tbaa !16
  %155 = load i64, ptr %154, align 8
  %156 = trunc i64 %155 to i32
  %157 = and i32 %156, 65535
  %158 = add nsw i32 %157, -6
  %159 = icmp ult i32 %158, 3
  br i1 %159, label %160, label %170

160:                                              ; preds = %152
  %161 = getelementptr inbounds %struct.tree_type, ptr %154, i64 0, i32 6
  %162 = load i32, ptr %161, align 4
  %163 = and i32 %162, 1023
  %164 = zext i32 %163 to i64
  %165 = load ptr, ptr %142, align 8, !tbaa !16
  %166 = getelementptr inbounds %struct.tree_int_cst, ptr %165, i64 0, i32 1
  %167 = load i64, ptr %166, align 8, !tbaa !16
  %168 = icmp eq i64 %167, %164
  br i1 %168, label %170, label %169

169:                                              ; preds = %160
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.139) #26
  br label %263

170:                                              ; preds = %152, %160
  %171 = trunc i64 %155 to i16
  switch i16 %171, label %174 [
    i16 6, label %190
    i16 7, label %190
    i16 8, label %190
    i16 14, label %172
  ]

172:                                              ; preds = %170
  %173 = tail call i32 @vector_type_mode(ptr noundef nonnull %154) #26
  br label %179

174:                                              ; preds = %170
  %175 = getelementptr inbounds %struct.tree_type, ptr %154, i64 0, i32 6
  %176 = load i32, ptr %175, align 4
  %177 = lshr i32 %176, 16
  %178 = and i32 %177, 255
  br label %179

179:                                              ; preds = %174, %172
  %180 = phi i32 [ %173, %172 ], [ %178, %174 ]
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [87 x i16], ptr @mode_precision, i64 0, i64 %181
  %183 = load i16, ptr %182, align 2, !tbaa !566
  %184 = zext i16 %183 to i64
  %185 = load ptr, ptr %142, align 8, !tbaa !16
  %186 = getelementptr inbounds %struct.tree_int_cst, ptr %185, i64 0, i32 1
  %187 = load i64, ptr %186, align 8, !tbaa !16
  %188 = icmp eq i64 %187, %184
  br i1 %188, label %190, label %189

189:                                              ; preds = %179
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.140) #26
  br label %263

190:                                              ; preds = %170, %170, %170, %112, %135, %131, %179, %106
  %191 = getelementptr inbounds %struct.tree_exp, ptr %97, i64 0, i32 3
  %192 = load ptr, ptr %191, align 8, !tbaa !16
  %193 = load i64, ptr %192, align 8
  br label %95, !llvm.loop !567

194:                                              ; preds = %95
  %195 = tail call zeroext i8 @is_gimple_min_invariant(ptr noundef nonnull %97) #26
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %197, label %201

197:                                              ; preds = %194
  %198 = tail call zeroext i8 @is_gimple_lvalue(ptr noundef nonnull %97) #26
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.141) #26
  br label %263

201:                                              ; preds = %197, %194
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %263

202:                                              ; preds = %12, %12
  %203 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %204 = load ptr, ptr %203, align 8, !tbaa !16
  %205 = load i64, ptr %204, align 8
  %206 = trunc i64 %205 to i16
  switch i16 %206, label %208 [
    i16 10, label %207
    i16 12, label %207
  ]

207:                                              ; preds = %202, %202
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.142) #26
  br label %263

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %210 = load ptr, ptr %209, align 8, !tbaa !16
  %211 = tail call zeroext i8 @is_gimple_val(ptr noundef %210) #26
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %213, label %215

213:                                              ; preds = %208
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.143) #26
  %214 = load ptr, ptr %209, align 8, !tbaa !16
  br label %263

215:                                              ; preds = %208
  %216 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %217 = load ptr, ptr %216, align 8, !tbaa !16
  %218 = tail call zeroext i8 @is_gimple_val(ptr noundef %217) #26
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %220, label %263

220:                                              ; preds = %215
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.143) #26
  %221 = load ptr, ptr %216, align 8, !tbaa !16
  br label %263

222:                                              ; preds = %12
  %223 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %224 = load ptr, ptr %223, align 8, !tbaa !16
  %225 = getelementptr inbounds %struct.tree_common, ptr %224, i64 0, i32 2
  %226 = load ptr, ptr %225, align 8, !tbaa !16
  %227 = load i64, ptr %226, align 8
  %228 = trunc i64 %227 to i16
  switch i16 %228, label %229 [
    i16 10, label %230
    i16 12, label %230
  ]

229:                                              ; preds = %222
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.144) #26
  br label %263

230:                                              ; preds = %222, %222
  %231 = load ptr, ptr @sizetype_tab, align 16, !tbaa !5
  %232 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %233 = load ptr, ptr %232, align 8, !tbaa !16
  %234 = getelementptr inbounds %struct.tree_common, ptr %233, i64 0, i32 2
  %235 = load ptr, ptr %234, align 8, !tbaa !16
  %236 = tail call zeroext i8 @useless_type_conversion_p(ptr noundef %231, ptr noundef %235) #26
  %237 = icmp eq i8 %236, 0
  br i1 %237, label %238, label %239

238:                                              ; preds = %230
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.145) #26
  br label %263

239:                                              ; preds = %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %12, %230
  %240 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %241 = load ptr, ptr %240, align 8, !tbaa !16
  %242 = tail call zeroext i8 @is_gimple_val(ptr noundef %241) #26
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %244, label %246

244:                                              ; preds = %239
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.143) #26
  %245 = load ptr, ptr %240, align 8, !tbaa !16
  br label %263

246:                                              ; preds = %239
  %247 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %248 = load ptr, ptr %247, align 8, !tbaa !16
  %249 = tail call zeroext i8 @is_gimple_val(ptr noundef %248) #26
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %251, label %263

251:                                              ; preds = %246
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.143) #26
  %252 = load ptr, ptr %247, align 8, !tbaa !16
  br label %263

253:                                              ; preds = %12
  %254 = and i64 %13, 131072
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %263, label %256

256:                                              ; preds = %253
  %257 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %258 = load ptr, ptr %257, align 8, !tbaa !16
  %259 = load i64, ptr %258, align 8
  %260 = and i64 %259, 65535
  %261 = icmp eq i64 %260, 14
  br i1 %261, label %262, label %263

262:                                              ; preds = %256
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %263

263:                                              ; preds = %55, %65, %71, %54, %50, %201, %16, %26, %21, %30, %83, %88, %215, %246, %262, %256, %253, %12, %66, %251, %244, %238, %229, %220, %213, %207, %200, %189, %169, %151, %138, %128, %118, %109, %93, %86, %82, %38, %36, %29, %19
  %264 = phi ptr [ %252, %251 ], [ %245, %244 ], [ %4, %238 ], [ %4, %229 ], [ %4, %207 ], [ %221, %220 ], [ %214, %213 ], [ %111, %109 ], [ %140, %138 ], [ %130, %128 ], [ %120, %118 ], [ %97, %169 ], [ %97, %189 ], [ %97, %151 ], [ %97, %200 ], [ %94, %93 ], [ %74, %86 ], [ %74, %82 ], [ %39, %38 ], [ %37, %36 ], [ %23, %29 ], [ %20, %19 ], [ null, %66 ], [ null, %12 ], [ null, %253 ], [ null, %256 ], [ null, %262 ], [ null, %246 ], [ null, %215 ], [ null, %88 ], [ null, %83 ], [ null, %30 ], [ null, %21 ], [ null, %26 ], [ null, %16 ], [ null, %201 ], [ %58, %65 ], [ %58, %71 ], [ %4, %54 ], [ %4, %50 ], [ null, %55 ]
  ret ptr %264
}

declare void @inform(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare i32 @lookup_stmt_eh_lp(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @stmt_could_throw_p(ptr noundef) local_unnamed_addr #3

declare ptr @fold(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_address(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @is_gimple_condexpr(ptr noundef) local_unnamed_addr #3

declare i32 @host_integerp(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @pointer_set_contains(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc ptr @phi_nodes(ptr nocapture noundef readonly %0) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 13
  %3 = load i32, ptr %2, align 8, !tbaa !58
  %4 = and i32 %3, 512
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.65, i32 noundef 510, ptr noundef nonnull @.str.2) #26
  br label %7

7:                                                ; preds = %1, %6
  %8 = getelementptr inbounds %struct.basic_block_def, ptr %0, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = icmp eq ptr %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.gimple_bb_info, ptr %9, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !296
  br label %14

14:                                               ; preds = %7, %11
  %15 = phi ptr [ %13, %11 ], [ null, %7 ]
  ret ptr %15
}

declare ptr @vec_heap_p_reserve(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @lookup_stmt_eh_lp_fn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_eh_region_from_lp_number_fn(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @eh_region_outermost(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @delete_from_dominance_info(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_bb_from_loops(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @move_block_after(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_phi_node(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @replace_ssa_name(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #26
  %5 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  store ptr %6, ptr %4, align 8, !tbaa !5
  %7 = tail call zeroext i8 @is_gimple_reg(ptr noundef %0) #26
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5447, ptr noundef nonnull @.str.2) #26
  br label %10

10:                                               ; preds = %3, %9
  %11 = tail call ptr @pointer_map_contains(ptr noundef %1, ptr noundef nonnull %0) #26
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %43

13:                                               ; preds = %10
  call fastcc void @replace_by_duplicate_decl(ptr noundef nonnull %4, ptr noundef %1, ptr noundef %2)
  %14 = getelementptr inbounds %struct.tree_function_decl, ptr %2, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  tail call void @push_cfun(ptr noundef %15) #26
  %16 = load ptr, ptr @cfun, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %31, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.function, ptr %16, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !354
  %21 = icmp eq ptr %20, null
  br i1 %21, label %31, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.gimple_df, ptr %20, i64 0, i32 10
  %24 = load i8, ptr %23, align 8
  %25 = and i8 %24, 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %22
  %28 = load ptr, ptr %4, align 8, !tbaa !5
  %29 = tail call zeroext i8 @add_referenced_var(ptr noundef %28) #26
  %30 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %31

31:                                               ; preds = %13, %18, %27, %22
  %32 = phi ptr [ null, %13 ], [ %16, %18 ], [ %30, %27 ], [ %16, %22 ]
  %33 = load ptr, ptr %4, align 8, !tbaa !5
  %34 = getelementptr inbounds %struct.tree_ssa_name, ptr %0, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = tail call ptr @make_ssa_name_fn(ptr noundef %32, ptr noundef %33, ptr noundef %35) #26
  %37 = load i64, ptr %0, align 8
  %38 = and i64 %37, 4294967296
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %31
  tail call void @set_default_def(ptr noundef %33, ptr noundef %36) #26
  br label %41

41:                                               ; preds = %40, %31
  tail call void @pop_cfun() #26
  %42 = tail call ptr @pointer_map_insert(ptr noundef %1, ptr noundef nonnull %0) #26
  store ptr %36, ptr %42, align 8, !tbaa !5
  br label %45

43:                                               ; preds = %10
  %44 = load ptr, ptr %11, align 8, !tbaa !5
  br label %45

45:                                               ; preds = %43, %41
  %46 = phi ptr [ %44, %43 ], [ %36, %41 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #26
  ret ptr %46
}

declare ptr @walk_gimple_stmt(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @move_stmt_r(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr noundef %2) #9 {
  %4 = getelementptr inbounds %struct.walk_stmt_info, ptr %2, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !278
  %6 = load ptr, ptr %0, align 8, !tbaa !44
  %7 = load ptr, ptr %6, align 8, !tbaa !47
  %8 = load ptr, ptr %5, align 8, !tbaa !343
  %9 = icmp eq ptr %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = getelementptr i8, ptr %7, i64 24
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = icmp eq ptr %12, %8
  %14 = icmp eq ptr %12, null
  %15 = or i1 %13, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %10, %3
  %17 = getelementptr inbounds %struct.move_stmt_d, ptr %5, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !345
  %19 = getelementptr inbounds %struct.gimple_statement_base, ptr %7, i64 0, i32 5
  store ptr %18, ptr %19, align 8, !tbaa !16
  br label %20

20:                                               ; preds = %10, %16
  %21 = load i32, ptr %7, align 8
  %22 = and i32 %21, 255
  %23 = trunc i32 %21 to i8
  switch i8 %23, label %134 [
    i8 8, label %24
    i8 14, label %114
    i8 15, label %124
    i8 28, label %143
    i8 21, label %143
  ]

24:                                               ; preds = %20
  %25 = add nsw i32 %22, -10
  %26 = icmp ult i32 %25, -9
  br i1 %26, label %40, label %27

27:                                               ; preds = %24
  %28 = zext i32 %22 to i64
  %29 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !16
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %31
  %33 = load i64, ptr %32, align 8, !tbaa !50
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %27
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %36

36:                                               ; preds = %35, %27
  %37 = getelementptr inbounds i8, ptr %7, i64 %33
  %38 = getelementptr inbounds ptr, ptr %37, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !5
  br label %40

40:                                               ; preds = %36, %24
  %41 = phi ptr [ %39, %36 ], [ null, %24 ]
  %42 = load i64, ptr %41, align 8
  %43 = and i64 %42, 65535
  %44 = icmp eq i64 %43, 121
  br i1 %44, label %45, label %143

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.tree_exp, ptr %41, i64 0, i32 3
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  %48 = icmp eq ptr %47, null
  br i1 %48, label %143, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.tree_function_decl, ptr %47, i64 0, i32 5
  %51 = load i32, ptr %50, align 8
  %52 = and i32 %51, 6144
  %53 = icmp eq i32 %52, 6144
  br i1 %53, label %54, label %143

54:                                               ; preds = %49
  %55 = and i32 %51, 2047
  switch i32 %55, label %143 [
    i32 554, label %56
    i32 552, label %59
    i32 553, label %59
  ]

56:                                               ; preds = %54
  %57 = tail call fastcc ptr @gimple_call_arg(ptr noundef nonnull %7, i32 noundef 1)
  %58 = tail call fastcc ptr @move_stmt_eh_region_tree_nr(ptr noundef %57, ptr noundef nonnull %5)
  tail call fastcc void @gimple_call_set_arg(ptr noundef nonnull %7, i32 noundef 1, ptr noundef %58)
  br label %59

59:                                               ; preds = %54, %54, %56
  %60 = load i32, ptr %7, align 8
  %61 = and i32 %60, 255
  %62 = add nsw i32 %61, -10
  %63 = icmp ult i32 %62, -9
  br i1 %63, label %77, label %64

64:                                               ; preds = %59
  %65 = zext i32 %61 to i64
  %66 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %65
  %67 = load i32, ptr %66, align 4, !tbaa !16
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %68
  %70 = load i64, ptr %69, align 8, !tbaa !50
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %64
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %73

73:                                               ; preds = %72, %64
  %74 = getelementptr inbounds i8, ptr %7, i64 %70
  %75 = getelementptr inbounds ptr, ptr %74, i64 3
  %76 = load ptr, ptr %75, align 8, !tbaa !5
  br label %77

77:                                               ; preds = %59, %73
  %78 = phi ptr [ %76, %73 ], [ null, %59 ]
  %79 = tail call i64 @tree_low_cst(ptr noundef %78, i32 noundef 0) #26
  %80 = trunc i64 %79 to i32
  %81 = tail call ptr @get_eh_region_from_number(i32 noundef %80) #26
  %82 = getelementptr inbounds %struct.move_stmt_d, ptr %5, i64 0, i32 6
  %83 = load ptr, ptr %82, align 8, !tbaa !350
  %84 = tail call ptr @pointer_map_contains(ptr noundef %83, ptr noundef %81) #26
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = getelementptr inbounds %struct.eh_region_d, ptr %85, i64 0, i32 3
  %87 = load i32, ptr %86, align 8, !tbaa !568
  %88 = sext i32 %87 to i64
  %89 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef %88) #26
  %90 = load i32, ptr %7, align 8
  %91 = and i32 %90, 255
  %92 = add nsw i32 %91, -10
  %93 = icmp ult i32 %92, -9
  br i1 %93, label %98, label %94

94:                                               ; preds = %77
  %95 = getelementptr i8, ptr %7, i64 12
  %96 = load i32, ptr %95, align 4, !tbaa !16
  %97 = icmp ugt i32 %96, 3
  br i1 %97, label %101, label %98

98:                                               ; preds = %94, %77
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %99 = load i32, ptr %7, align 8
  %100 = and i32 %99, 255
  br label %101

101:                                              ; preds = %98, %94
  %102 = phi i32 [ %91, %94 ], [ %100, %98 ]
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %103
  %105 = load i32, ptr %104, align 4, !tbaa !16
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %106
  %108 = load i64, ptr %107, align 8, !tbaa !50
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %101
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %111

111:                                              ; preds = %101, %110
  %112 = getelementptr inbounds i8, ptr %7, i64 %108
  %113 = getelementptr inbounds ptr, ptr %112, i64 3
  store ptr %89, ptr %113, align 8, !tbaa !5
  br label %143

114:                                              ; preds = %20
  %115 = getelementptr i8, ptr %7, i64 32
  %116 = load i32, ptr %115, align 8, !tbaa !16
  %117 = tail call ptr @get_eh_region_from_number(i32 noundef %116) #26
  %118 = getelementptr inbounds %struct.move_stmt_d, ptr %5, i64 0, i32 6
  %119 = load ptr, ptr %118, align 8, !tbaa !350
  %120 = tail call ptr @pointer_map_contains(ptr noundef %119, ptr noundef %117) #26
  %121 = load ptr, ptr %120, align 8, !tbaa !5
  %122 = getelementptr inbounds %struct.eh_region_d, ptr %121, i64 0, i32 3
  %123 = load i32, ptr %122, align 8, !tbaa !568
  store i32 %123, ptr %115, align 8, !tbaa !16
  br label %143

124:                                              ; preds = %20
  %125 = getelementptr i8, ptr %7, i64 32
  %126 = load i32, ptr %125, align 8, !tbaa !16
  %127 = tail call ptr @get_eh_region_from_number(i32 noundef %126) #26
  %128 = getelementptr inbounds %struct.move_stmt_d, ptr %5, i64 0, i32 6
  %129 = load ptr, ptr %128, align 8, !tbaa !350
  %130 = tail call ptr @pointer_map_contains(ptr noundef %129, ptr noundef %127) #26
  %131 = load ptr, ptr %130, align 8, !tbaa !5
  %132 = getelementptr inbounds %struct.eh_region_d, ptr %131, i64 0, i32 3
  %133 = load i32, ptr %132, align 8, !tbaa !568
  store i32 %133, ptr %125, align 8, !tbaa !16
  br label %143

134:                                              ; preds = %20
  %135 = add i8 %23, -33
  %136 = icmp ult i8 %135, -14
  br i1 %136, label %143, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds %struct.move_stmt_d, ptr %5, i64 0, i32 7
  %139 = load i8, ptr %138, align 8, !tbaa !351
  store i8 0, ptr %138, align 8, !tbaa !351
  store i8 1, ptr %1, align 1, !tbaa !16
  %140 = getelementptr i8, ptr %7, i64 32
  %141 = load ptr, ptr %140, align 8, !tbaa !16
  %142 = tail call ptr @walk_gimple_seq(ptr noundef %141, ptr noundef nonnull @move_stmt_r, ptr noundef nonnull @move_stmt_op, ptr noundef nonnull %2) #26
  store i8 %139, ptr %138, align 8, !tbaa !351
  br label %143

143:                                              ; preds = %40, %45, %49, %54, %111, %134, %137, %20, %20, %124, %114
  ret ptr null
}

; Function Attrs: nounwind sspstrong uwtable
define internal noalias ptr @move_stmt_op(ptr nocapture noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef readonly %2) #9 {
  %4 = alloca %struct.tree_map, align 8
  %5 = getelementptr inbounds %struct.walk_stmt_info, ptr %2, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !278
  %7 = load ptr, ptr %0, align 8, !tbaa !5
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %8, 65535
  %10 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %9
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = add i32 %11, -4
  %13 = icmp ult i32 %12, 7
  br i1 %13, label %14, label %19

14:                                               ; preds = %3
  %15 = tail call ptr @tree_block(ptr noundef nonnull %7) #26
  %16 = load ptr, ptr %15, align 8, !tbaa !5
  %17 = icmp eq ptr %16, null
  br i1 %17, label %103, label %18

18:                                               ; preds = %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5498, ptr noundef nonnull @.str.2) #26
  br label %103

19:                                               ; preds = %3
  %20 = icmp eq i32 %11, 3
  %21 = icmp eq i64 %9, 141
  %22 = or i1 %20, %21
  br i1 %22, label %23, label %100

23:                                               ; preds = %19
  %24 = trunc i64 %8 to i16
  switch i16 %24, label %50 [
    i16 141, label %25
    i16 30, label %31
  ]

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 4
  %27 = load ptr, ptr %26, align 8, !tbaa !348
  %28 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !347
  %30 = tail call fastcc ptr @replace_ssa_name(ptr noundef nonnull %7, ptr noundef %27, ptr noundef %29)
  store ptr %30, ptr %0, align 8, !tbaa !5
  br label %99

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 5
  %33 = load ptr, ptr %32, align 8, !tbaa !349
  %34 = icmp eq ptr %33, null
  br i1 %34, label %45, label %35

35:                                               ; preds = %31
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #26
  store ptr %7, ptr %4, align 8, !tbaa !367
  %36 = getelementptr inbounds %struct.tree_decl_minimal, ptr %7, i64 0, i32 2
  %37 = load i32, ptr %36, align 4, !tbaa !16
  %38 = call ptr @htab_find_with_hash(ptr noundef nonnull %33, ptr noundef nonnull %4, i32 noundef %37) #26
  %39 = icmp eq ptr %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.tree_map, ptr %38, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !368
  store ptr %42, ptr %0, align 8, !tbaa !5
  br label %43

43:                                               ; preds = %40, %35
  %44 = phi ptr [ %42, %40 ], [ %7, %35 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #26
  br label %45

45:                                               ; preds = %43, %31
  %46 = phi ptr [ %44, %43 ], [ %7, %31 ]
  %47 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !347
  %49 = getelementptr inbounds %struct.tree_decl_minimal, ptr %46, i64 0, i32 4
  store ptr %48, ptr %49, align 8, !tbaa !16
  br label %99

50:                                               ; preds = %23
  %51 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 7
  %52 = load i8, ptr %51, align 8, !tbaa !351
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %99, label %54

54:                                               ; preds = %50
  %55 = and i64 %8, 67174399
  %56 = icmp eq i64 %55, 32
  br i1 %56, label %57, label %64

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.tree_decl_common, ptr %7, i64 0, i32 2
  %59 = load i64, ptr %58, align 8
  %60 = and i64 %59, 33554432
  %61 = icmp eq i64 %60, 0
  %62 = icmp eq i64 %9, 33
  %63 = or i1 %62, %61
  br i1 %63, label %66, label %72

64:                                               ; preds = %54
  %65 = icmp eq i64 %9, 33
  br i1 %65, label %66, label %72

66:                                               ; preds = %64, %57
  %67 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 4
  %68 = load ptr, ptr %67, align 8, !tbaa !348
  %69 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 3
  %70 = load ptr, ptr %69, align 8, !tbaa !347
  tail call fastcc void @replace_by_duplicate_decl(ptr noundef nonnull %0, ptr noundef %68, ptr noundef %70)
  %71 = load i64, ptr %7, align 8
  br label %72

72:                                               ; preds = %57, %66, %64
  %73 = phi i64 [ %8, %57 ], [ %71, %66 ], [ %8, %64 ]
  %74 = trunc i64 %73 to i16
  switch i16 %74, label %99 [
    i16 32, label %80
    i16 34, label %80
    i16 36, label %80
    i16 141, label %75
  ]

75:                                               ; preds = %72
  %76 = getelementptr inbounds %struct.tree_ssa_name, ptr %7, i64 0, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !16
  %78 = load i64, ptr %77, align 8
  %79 = trunc i64 %78 to i16
  switch i16 %79, label %99 [
    i16 32, label %80
    i16 34, label %80
    i16 36, label %80
  ]

80:                                               ; preds = %75, %75, %75, %72, %72, %72
  %81 = load ptr, ptr @cfun, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.function, ptr %81, i64 0, i32 3
  %85 = load ptr, ptr %84, align 8, !tbaa !354
  %86 = icmp eq ptr %85, null
  br i1 %86, label %99, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.gimple_df, ptr %85, i64 0, i32 10
  %89 = load i8, ptr %88, align 8
  %90 = and i8 %89, 1
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %99, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.move_stmt_d, ptr %6, i64 0, i32 3
  %94 = load ptr, ptr %93, align 8, !tbaa !347
  %95 = getelementptr inbounds %struct.tree_function_decl, ptr %94, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !16
  tail call void @push_cfun(ptr noundef %96) #26
  %97 = load ptr, ptr %0, align 8, !tbaa !5
  %98 = tail call zeroext i8 @add_referenced_var(ptr noundef %97) #26
  tail call void @pop_cfun() #26
  br label %99

99:                                               ; preds = %80, %83, %75, %72, %45, %87, %92, %50, %25
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %103

100:                                              ; preds = %19
  %101 = icmp eq i32 %11, 2
  br i1 %101, label %102, label %103

102:                                              ; preds = %100
  store i32 0, ptr %1, align 4, !tbaa !20
  br label %103

103:                                              ; preds = %18, %14, %99, %102, %100
  ret ptr null
}

declare zeroext i8 @maybe_duplicate_eh_stmt_fn(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @remove_stmt_from_eh_lp_fn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_duplicate_stmt_histograms(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gimple_remove_stmt_histograms(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @free_stmt_operands(ptr noundef) local_unnamed_addr #3

declare ptr @pointer_map_contains(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @replace_by_duplicate_decl(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = load ptr, ptr %0, align 8, !tbaa !5
  %5 = getelementptr inbounds %struct.tree_function_decl, ptr %2, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.tree_decl_minimal, ptr %4, i64 0, i32 4
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = icmp eq ptr %8, %2
  br i1 %9, label %44, label %10

10:                                               ; preds = %3
  %11 = tail call ptr @pointer_map_contains(ptr noundef %1, ptr noundef nonnull %4) #26
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %40

13:                                               ; preds = %10
  %14 = tail call ptr @pointer_map_insert(ptr noundef %1, ptr noundef nonnull %4) #26
  %15 = load i64, ptr %4, align 8
  %16 = trunc i64 %15 to i16
  switch i16 %16, label %31 [
    i16 32, label %22
    i16 34, label %22
    i16 36, label %22
    i16 141, label %17
  ]

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.tree_ssa_name, ptr %4, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = load i64, ptr %19, align 8
  %21 = trunc i64 %20 to i16
  switch i16 %21, label %31 [
    i16 32, label %22
    i16 34, label %22
    i16 36, label %22
  ]

22:                                               ; preds = %17, %17, %17, %13, %13, %13
  %23 = getelementptr inbounds %struct.tree_decl_minimal, ptr %4, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call ptr @copy_var_decl(ptr noundef nonnull %4, ptr noundef %24, ptr noundef %26) #26
  %28 = getelementptr inbounds %struct.function, ptr %6, i64 0, i32 9
  %29 = load ptr, ptr %28, align 8, !tbaa !255
  %30 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %27, ptr noundef %29) #26
  store ptr %30, ptr %28, align 8, !tbaa !255
  br label %37

31:                                               ; preds = %17, %13
  %32 = and i64 %15, 65535
  %33 = icmp eq i64 %32, 33
  br i1 %33, label %35, label %34

34:                                               ; preds = %31
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5423, ptr noundef nonnull @.str.2) #26
  br label %35

35:                                               ; preds = %31, %34
  %36 = tail call ptr @copy_node_stat(ptr noundef nonnull %4) #26
  br label %37

37:                                               ; preds = %35, %22
  %38 = phi ptr [ %27, %22 ], [ %36, %35 ]
  %39 = getelementptr inbounds %struct.tree_decl_minimal, ptr %38, i64 0, i32 4
  store ptr %2, ptr %39, align 8, !tbaa !16
  store ptr %38, ptr %14, align 8, !tbaa !5
  br label %42

40:                                               ; preds = %10
  %41 = load ptr, ptr %11, align 8, !tbaa !5
  br label %42

42:                                               ; preds = %40, %37
  %43 = phi ptr [ %41, %40 ], [ %38, %37 ]
  store ptr %43, ptr %0, align 8, !tbaa !5
  br label %44

44:                                               ; preds = %3, %42
  ret void
}

declare zeroext i8 @add_referenced_var(ptr noundef) local_unnamed_addr #3

declare void @set_default_def(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @pointer_map_insert(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @copy_var_decl(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @tree_cons_stat(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @copy_node_stat(ptr noundef) local_unnamed_addr #3

declare ptr @make_ssa_name_fn(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @move_stmt_eh_region_tree_nr(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = tail call i64 @tree_low_cst(ptr noundef %0, i32 noundef 0) #26
  %4 = trunc i64 %3 to i32
  %5 = tail call ptr @get_eh_region_from_number(i32 noundef %4) #26
  %6 = getelementptr inbounds %struct.move_stmt_d, ptr %1, i64 0, i32 6
  %7 = load ptr, ptr %6, align 8, !tbaa !350
  %8 = tail call ptr @pointer_map_contains(ptr noundef %7, ptr noundef %5) #26
  %9 = load ptr, ptr %8, align 8, !tbaa !5
  %10 = getelementptr inbounds %struct.eh_region_d, ptr %9, i64 0, i32 3
  %11 = load i32, ptr %10, align 8, !tbaa !568
  %12 = sext i32 %11 to i64
  %13 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef %12) #26
  ret ptr %13
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define internal fastcc void @gimple_call_set_arg(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2) unnamed_addr #2 {
  %4 = add nuw nsw i32 %1, 3
  %5 = load i32, ptr %0, align 8
  %6 = and i32 %5, 255
  %7 = add nsw i32 %6, -10
  %8 = icmp ult i32 %7, -9
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = getelementptr i8, ptr %0, i64 12
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = icmp ugt i32 %11, %4
  br i1 %12, label %16, label %13

13:                                               ; preds = %9, %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1665, ptr noundef nonnull @.str.2) #26
  %14 = load i32, ptr %0, align 8
  %15 = and i32 %14, 255
  br label %16

16:                                               ; preds = %13, %9
  %17 = phi i32 [ %6, %9 ], [ %15, %13 ]
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %18
  %20 = load i32, ptr %19, align 4, !tbaa !16
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %21
  %23 = load i64, ptr %22, align 8, !tbaa !50
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %16
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %26

26:                                               ; preds = %16, %25
  %27 = getelementptr inbounds i8, ptr %0, i64 %23
  %28 = zext i32 %4 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  store ptr %2, ptr %29, align 8, !tbaa !5
  ret void
}

declare ptr @walk_gimple_seq(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i64 @tree_low_cst(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @get_eh_region_from_number(i32 noundef) local_unnamed_addr #3

declare ptr @tree_block(ptr noundef) local_unnamed_addr #3

declare ptr @htab_find_with_hash(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @decl_value_expr_insert(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @decl_value_expr_lookup(ptr noundef) local_unnamed_addr #3

declare void @dump_double_int(ptr noundef, i64, i64, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @decl_function_context(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @verify_eh_edges(ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_lt(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @verify_eh_dispatch_edge(ptr noundef) local_unnamed_addr #3

declare i32 @dom_info_state(i32 noundef) local_unnamed_addr #3

declare void @verify_dominators(i32 noundef) local_unnamed_addr #3

declare ptr @alloc_block() local_unnamed_addr #3

declare ptr @ggc_alloc_cleared_stat(i64 noundef) local_unnamed_addr #3

declare ptr @gimple_seq_alloc() local_unnamed_addr #3

declare void @link_block(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @redirect_eh_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @get_cases_for_edge(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = alloca %struct.gimple_stmt_iterator, align 8
  %4 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  %5 = icmp eq ptr %4, null
  br i1 %5, label %123, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @pointer_map_contains(ptr noundef nonnull %4, ptr noundef %0) #26
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %120

9:                                                ; preds = %6
  %10 = getelementptr i8, ptr %1, i64 12
  %11 = load i32, ptr %10, align 4, !tbaa !16
  %12 = icmp ugt i32 %11, 1
  br i1 %12, label %13, label %15

13:                                               ; preds = %9
  %14 = add i32 %11, -1
  br label %18

15:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3162, ptr noundef nonnull @.str.2) #26
  %16 = add nsw i32 %11, -1
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %117, label %18

18:                                               ; preds = %13, %15
  %19 = phi i32 [ %14, %13 ], [ %16, %15 ]
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 1
  %22 = getelementptr inbounds %struct.gimple_stmt_iterator, ptr %3, i64 0, i32 2
  br label %23

23:                                               ; preds = %18, %107
  %24 = phi i64 [ 0, %18 ], [ %115, %107 ]
  %25 = trunc i64 %24 to i32
  %26 = load i32, ptr %10, align 4, !tbaa !16
  %27 = add i32 %25, 1
  %28 = icmp ugt i32 %26, %27
  br i1 %28, label %30, label %29

29:                                               ; preds = %23
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 3215, ptr noundef nonnull @.str.2) #26
  br label %30

30:                                               ; preds = %29, %23
  %31 = load i32, ptr %1, align 8
  %32 = and i32 %31, 255
  %33 = add nsw i32 %32, -10
  %34 = icmp ult i32 %33, -9
  br i1 %34, label %49, label %35

35:                                               ; preds = %30
  %36 = zext i32 %32 to i64
  %37 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !16
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %39
  %41 = load i64, ptr %40, align 8, !tbaa !50
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %35
  call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %44

44:                                               ; preds = %43, %35
  %45 = getelementptr inbounds i8, ptr %1, i64 %41
  %46 = zext i32 %27 to i64
  %47 = getelementptr inbounds ptr, ptr %45, i64 %46
  %48 = load ptr, ptr %47, align 8, !tbaa !5
  br label %49

49:                                               ; preds = %30, %44
  %50 = phi ptr [ %48, %44 ], [ null, %30 ]
  %51 = getelementptr inbounds %struct.tree_exp, ptr %50, i64 1, i32 0, i32 1
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = load ptr, ptr @cfun, align 8, !tbaa !5
  %54 = getelementptr inbounds %struct.tree_label_decl, ptr %52, i64 0, i32 1
  %55 = load i32, ptr %54, align 8, !tbaa !16
  %56 = load ptr, ptr @global_dc, align 8, !tbaa !5
  %57 = getelementptr inbounds %struct.diagnostic_context, ptr %56, i64 0, i32 1, i64 4
  %58 = load i32, ptr %57, align 8, !tbaa !20
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %66

60:                                               ; preds = %49
  %61 = getelementptr inbounds %struct.diagnostic_context, ptr %56, i64 0, i32 1, i64 5
  %62 = load i32, ptr %61, align 4, !tbaa !20
  %63 = icmp ne i32 %62, 0
  %64 = icmp slt i32 %55, 0
  %65 = select i1 %63, i1 %64, i1 false
  br i1 %65, label %68, label %93

66:                                               ; preds = %49
  %67 = icmp slt i32 %55, 0
  br i1 %67, label %68, label %93

68:                                               ; preds = %66, %60
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #26
  %69 = getelementptr inbounds %struct.function, ptr %53, i64 0, i32 1
  %70 = load ptr, ptr %69, align 8, !tbaa !23
  %71 = getelementptr inbounds %struct.control_flow_graph, ptr %70, i64 0, i32 2
  %72 = load ptr, ptr %71, align 8, !tbaa !29
  %73 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %72, i64 0, i32 2, i64 2
  %74 = load ptr, ptr %73, align 8, !tbaa !5
  call void @llvm.experimental.noalias.scope.decl(metadata !569)
  %75 = getelementptr inbounds %struct.basic_block_def, ptr %74, i64 0, i32 13
  %76 = load i32, ptr %75, align 8, !tbaa !58, !noalias !569
  %77 = and i32 %76, 512
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %88

79:                                               ; preds = %68
  %80 = getelementptr inbounds %struct.basic_block_def, ptr %74, i64 0, i32 7
  %81 = load ptr, ptr %80, align 8, !tbaa !16, !noalias !569
  %82 = icmp eq ptr %81, null
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = load ptr, ptr %81, align 8, !tbaa !59, !noalias !569
  %85 = icmp eq ptr %84, null
  br i1 %85, label %88, label %86

86:                                               ; preds = %83
  %87 = load ptr, ptr %84, align 8, !tbaa !42, !noalias !569
  br label %88

88:                                               ; preds = %86, %83, %79, %68
  %89 = phi ptr [ %84, %86 ], [ null, %83 ], [ null, %79 ], [ null, %68 ]
  %90 = phi ptr [ %87, %86 ], [ null, %83 ], [ null, %79 ], [ null, %68 ]
  store ptr %90, ptr %3, align 8, !tbaa !44, !alias.scope !569
  store ptr %89, ptr %21, align 8, !tbaa !46, !alias.scope !569
  store ptr %74, ptr %22, align 8, !tbaa !49, !alias.scope !569
  %91 = call ptr @gimple_build_label(ptr noundef nonnull %52) #26
  call void @gsi_insert_before(ptr noundef nonnull %3, ptr noundef %91, i32 noundef 0) #26
  %92 = load i32, ptr %54, align 8, !tbaa !16
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #26
  br label %93

93:                                               ; preds = %88, %66, %60
  %94 = phi i32 [ %92, %88 ], [ %55, %66 ], [ %55, %60 ]
  %95 = getelementptr inbounds %struct.function, ptr %53, i64 0, i32 1
  %96 = load ptr, ptr %95, align 8, !tbaa !23
  %97 = getelementptr inbounds %struct.control_flow_graph, ptr %96, i64 0, i32 6
  %98 = load ptr, ptr %97, align 8, !tbaa !33
  %99 = icmp eq ptr %98, null
  br i1 %99, label %107, label %100

100:                                              ; preds = %93
  %101 = load i32, ptr %98, align 8, !tbaa !30
  %102 = icmp ugt i32 %101, %94
  br i1 %102, label %103, label %107

103:                                              ; preds = %100
  %104 = zext i32 %94 to i64
  %105 = getelementptr inbounds %struct.VEC_basic_block_base, ptr %98, i64 0, i32 2, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  br label %107

107:                                              ; preds = %93, %100, %103
  %108 = phi ptr [ %106, %103 ], [ null, %100 ], [ null, %93 ]
  %109 = load ptr, ptr %0, align 8, !tbaa !295
  %110 = call ptr @find_edge(ptr noundef %109, ptr noundef %108) #26
  %111 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  %112 = call ptr @pointer_map_insert(ptr noundef %111, ptr noundef %110) #26
  %113 = load ptr, ptr %112, align 8, !tbaa !5
  %114 = getelementptr inbounds %struct.tree_common, ptr %50, i64 0, i32 1
  store ptr %113, ptr %114, align 8, !tbaa !16
  store ptr %50, ptr %112, align 8, !tbaa !5
  %115 = add nuw nsw i64 %24, 1
  %116 = icmp eq i64 %115, %20
  br i1 %116, label %117, label %23, !llvm.loop !572

117:                                              ; preds = %107, %15
  %118 = load ptr, ptr @edge_to_cases, align 8, !tbaa !5
  %119 = call ptr @pointer_map_contains(ptr noundef %118, ptr noundef %0) #26
  br label %120

120:                                              ; preds = %6, %117
  %121 = phi ptr [ %119, %117 ], [ %7, %6 ]
  %122 = load ptr, ptr %121, align 8, !tbaa !5
  br label %123

123:                                              ; preds = %120, %2
  %124 = phi ptr [ null, %2 ], [ %122, %120 ]
  ret ptr %124
}

declare void @redirect_eh_dispatch_edge(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @ssa_redirect_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @dump_bb(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @free_numbers_of_iterations_estimates_loop(ptr noundef) local_unnamed_addr #3

declare void @release_defs(ptr noundef) local_unnamed_addr #3

declare void @remove_phi_nodes(ptr noundef) local_unnamed_addr #3

declare void @unlink_block(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @name_mappings_registered_p() local_unnamed_addr #3

declare zeroext i8 @may_propagate_copy(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @gsi_insert_seq_after(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @create_phi_node(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @create_new_def_for(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @maybe_duplicate_eh_stmt(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @redirect_edge_var_map_vector(ptr noundef) local_unnamed_addr #3

declare void @redirect_edge_var_map_clear(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @need_fake_edge_p(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 255
  %4 = icmp eq i32 %3, 8
  br i1 %4, label %5, label %52

5:                                                ; preds = %1
  %6 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @gss_for_code_, i64 0, i64 8), align 4, !tbaa !16
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %7
  %9 = load i64, ptr %8, align 8, !tbaa !50
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %12

12:                                               ; preds = %5, %11
  %13 = getelementptr inbounds i8, ptr %0, i64 %9
  %14 = getelementptr inbounds ptr, ptr %13, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !5
  %16 = load i64, ptr %15, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 121
  br i1 %18, label %19, label %22

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.tree_exp, ptr %15, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  br label %22

22:                                               ; preds = %19, %12
  %23 = phi ptr [ %21, %19 ], [ null, %12 ]
  %24 = tail call i32 @gimple_call_flags(ptr noundef nonnull %0) #26
  %25 = load i32, ptr %0, align 8
  %26 = and i32 %25, 255
  %27 = icmp eq i32 %26, 8
  %28 = icmp ne ptr %23, null
  %29 = select i1 %27, i1 %28, i1 false
  br i1 %29, label %30, label %47

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.tree_function_decl, ptr %23, i64 0, i32 5
  %32 = load i32, ptr %31, align 8
  %33 = lshr i32 %32, 11
  %34 = and i32 %33, 3
  %35 = icmp ne i32 %34, 0
  %36 = and i32 %24, 64
  %37 = icmp ne i32 %36, 0
  %38 = select i1 %35, i1 %37, i1 false
  %39 = and i32 %24, 128
  %40 = icmp eq i32 %39, 0
  %41 = select i1 %38, i1 %40, i1 false
  br i1 %41, label %42, label %47

42:                                               ; preds = %30
  %43 = icmp eq i32 %34, 3
  %44 = and i32 %32, 2047
  %45 = icmp eq i32 %44, 453
  %46 = and i1 %45, %43
  br i1 %46, label %47, label %60

47:                                               ; preds = %42, %30, %22
  %48 = phi i1 [ true, %42 ], [ true, %30 ], [ %27, %22 ]
  %49 = and i32 %24, 8
  %50 = icmp eq i32 %49, 0
  %51 = select i1 %48, i1 %50, i1 false
  br i1 %51, label %60, label %52

52:                                               ; preds = %1, %47
  %53 = phi i32 [ %25, %47 ], [ %2, %1 ]
  %54 = phi i32 [ %26, %47 ], [ %3, %1 ]
  %55 = icmp eq i32 %54, 7
  %56 = and i32 %53, 196608
  %57 = icmp ne i32 %56, 0
  %58 = and i1 %55, %57
  %59 = zext i1 %58 to i8
  br label %60

60:                                               ; preds = %52, %47, %42
  %61 = phi i8 [ 0, %42 ], [ 1, %47 ], [ %59, %52 ]
  ret i8 %61
}

declare void @gsi_insert_on_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gimple_build_nop() local_unnamed_addr #3

declare void @gsi_commit_edge_inserts() local_unnamed_addr #3

declare ptr @split_block(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @verify_flow_info() local_unnamed_addr #3

declare void @reserve_phi_args_for_new_edge(ptr noundef) local_unnamed_addr #3

declare void @remove_phi_args(ptr noundef) local_unnamed_addr #3

declare ptr @gimple_build_cond_from_tree(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @warning_at(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @do_warn_unused_result(ptr noundef readonly %0) unnamed_addr #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %109, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr %0, align 8, !tbaa !42, !noalias !573
  %5 = icmp eq ptr %4, null
  br i1 %5, label %109, label %6

6:                                                ; preds = %3, %105
  %7 = phi ptr [ %107, %105 ], [ %4, %3 ]
  %8 = load ptr, ptr %7, align 8, !tbaa !47
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 255
  %11 = trunc i32 %9 to i8
  switch i8 %11, label %105 [
    i8 10, label %12
    i8 17, label %15
    i8 11, label %20
    i8 12, label %23
    i8 8, label %26
  ]

12:                                               ; preds = %6
  %13 = getelementptr i8, ptr %8, i64 48
  %14 = load ptr, ptr %13, align 8, !tbaa !16
  tail call fastcc void @do_warn_unused_result(ptr noundef %14)
  br label %105

15:                                               ; preds = %6
  %16 = getelementptr i8, ptr %8, i64 32
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  tail call fastcc void @do_warn_unused_result(ptr noundef %17)
  %18 = getelementptr i8, ptr %8, i64 40
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  tail call fastcc void @do_warn_unused_result(ptr noundef %19)
  br label %105

20:                                               ; preds = %6
  %21 = getelementptr i8, ptr %8, i64 40
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  tail call fastcc void @do_warn_unused_result(ptr noundef %22)
  br label %105

23:                                               ; preds = %6
  %24 = getelementptr i8, ptr %8, i64 40
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  tail call fastcc void @do_warn_unused_result(ptr noundef %25)
  br label %105

26:                                               ; preds = %6
  %27 = add nsw i32 %10, -10
  %28 = icmp ult i32 %27, -9
  br i1 %28, label %46, label %29

29:                                               ; preds = %26
  %30 = zext i32 %10 to i64
  %31 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %33
  %35 = load i64, ptr %34, align 8, !tbaa !50
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %29
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %38

38:                                               ; preds = %29, %37
  %39 = getelementptr inbounds i8, ptr %8, i64 %35
  %40 = load ptr, ptr %39, align 8, !tbaa !5
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %105

42:                                               ; preds = %38
  %43 = load i32, ptr %8, align 8
  %44 = and i32 %43, 255
  %45 = add nsw i32 %44, -10
  br label %46

46:                                               ; preds = %42, %26
  %47 = phi i32 [ %45, %42 ], [ %27, %26 ]
  %48 = phi i32 [ %44, %42 ], [ %10, %26 ]
  %49 = icmp ult i32 %47, -9
  br i1 %49, label %63, label %50

50:                                               ; preds = %46
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %54
  %56 = load i64, ptr %55, align 8, !tbaa !50
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %50
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %59

59:                                               ; preds = %58, %50
  %60 = getelementptr inbounds i8, ptr %8, i64 %56
  %61 = getelementptr inbounds ptr, ptr %60, i64 1
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  br label %63

63:                                               ; preds = %59, %46
  %64 = phi ptr [ %62, %59 ], [ null, %46 ]
  %65 = load i64, ptr %64, align 8
  %66 = and i64 %65, 65535
  %67 = icmp eq i64 %66, 121
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.tree_exp, ptr %64, i64 0, i32 3
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  br label %71

71:                                               ; preds = %63, %68
  %72 = phi ptr [ %70, %68 ], [ null, %63 ]
  %73 = load i32, ptr %8, align 8
  %74 = and i32 %73, 255
  %75 = add nsw i32 %74, -1
  %76 = icmp ult i32 %75, 9
  tail call void @llvm.assume(i1 %76)
  %77 = zext i32 %74 to i64
  %78 = getelementptr inbounds [0 x i32], ptr @gss_for_code_, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [0 x i64], ptr @gimple_ops_offset_, i64 0, i64 %80
  %82 = load i64, ptr %81, align 8, !tbaa !50
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %71
  tail call void @fancy_abort(ptr noundef nonnull @.str.64, i32 noundef 1622, ptr noundef nonnull @.str.2) #26
  br label %85

85:                                               ; preds = %84, %71
  %86 = getelementptr inbounds i8, ptr %8, i64 %82
  %87 = getelementptr inbounds ptr, ptr %86, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !5
  %89 = getelementptr inbounds %struct.tree_common, ptr %88, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !16
  %91 = getelementptr inbounds %struct.tree_common, ptr %90, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !16
  %93 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 4
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  %95 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.182, ptr noundef %94) #26
  %96 = icmp eq ptr %95, null
  br i1 %96, label %105, label %97

97:                                               ; preds = %85
  %98 = getelementptr i8, ptr %8, i64 8
  %99 = load i32, ptr %98, align 8, !tbaa !16
  %100 = icmp eq ptr %72, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %97
  %102 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %99, i32 noundef 227, ptr noundef nonnull @.str.183, ptr noundef nonnull %72) #26
  br label %105

103:                                              ; preds = %97
  %104 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %99, i32 noundef 227, ptr noundef nonnull @.str.184) #26
  br label %105

105:                                              ; preds = %101, %103, %6, %85, %38, %23, %20, %15, %12
  %106 = getelementptr inbounds %struct.gimple_seq_node_d, ptr %7, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !53
  %108 = icmp eq ptr %107, null
  br i1 %108, label %109, label %6, !llvm.loop !576

109:                                              ; preds = %105, %1, %3
  ret void
}

declare ptr @lookup_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #23

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #24

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #25

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #25

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.experimental.noalias.scope.decl(metadata) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #25

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #25

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #13 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { nofree norecurse nosync nounwind sspstrong memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #18 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #19 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #20 = { nofree nosync nounwind sspstrong memory(read, inaccessiblemem: readwrite) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #21 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #22 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #23 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #24 = { nofree nounwind }
attributes #25 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #26 = { nounwind }
attributes #27 = { "function-inline-cost-multiplier"="2" }
attributes #28 = { cold }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !6, i64 8}
!10 = !{!"_IO_FILE", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !11, i64 112, !11, i64 116, !12, i64 120, !13, i64 128, !7, i64 130, !7, i64 131, !6, i64 136, !12, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !12, i64 184, !11, i64 192, !7, i64 196}
!11 = !{!"int", !7, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = !{!10, !6, i64 16}
!15 = !{!"branch_weights", i32 2000, i32 1}
!16 = !{!7, !7, i64 0}
!17 = !{!10, !6, i64 40}
!18 = !{!10, !6, i64 48}
!19 = !{!10, !11, i64 0}
!20 = !{!11, !11, i64 0}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.mustprogress"}
!23 = !{!24, !6, i64 8}
!24 = !{!"function", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !6, i64 128, !11, i64 136, !11, i64 137, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139}
!25 = !{!26, !7, i64 48}
!26 = !{!"control_flow_graph", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !6, i64 40, !7, i64 48, !7, i64 52, !7, i64 60, !11, i64 68, !11, i64 72}
!27 = !{!26, !11, i64 24}
!28 = !{!26, !11, i64 32}
!29 = !{!26, !6, i64 16}
!30 = !{!31, !11, i64 0}
!31 = !{!"VEC_basic_block_base", !11, i64 0, !11, i64 4, !7, i64 8}
!32 = !{!31, !11, i64 4}
!33 = !{!26, !6, i64 40}
!34 = !{!26, !6, i64 0}
!35 = !{!26, !6, i64 8}
!36 = !{!37, !6, i64 56}
!37 = !{!"basic_block_def", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !7, i64 32, !6, i64 48, !6, i64 56, !7, i64 64, !12, i64 72, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96}
!38 = !{!37, !6, i64 48}
!39 = !{!40}
!40 = distinct !{!40, !41, !"gsi_start: argument 0"}
!41 = distinct !{!41, !"gsi_start"}
!42 = !{!43, !6, i64 0}
!43 = !{!"gimple_seq_d", !6, i64 0, !6, i64 8, !6, i64 16}
!44 = !{!45, !6, i64 0}
!45 = !{!"", !6, i64 0, !6, i64 8, !6, i64 16}
!46 = !{!45, !6, i64 8}
!47 = !{!48, !6, i64 0}
!48 = !{!"gimple_seq_node_d", !6, i64 0, !6, i64 8, !6, i64 16}
!49 = !{!45, !6, i64 16}
!50 = !{!12, !12, i64 0}
!51 = !{!52, !12, i64 0}
!52 = !{!"cfg_stats_d", !12, i64 0}
!53 = !{!48, !6, i64 16}
!54 = distinct !{!54, !22}
!55 = !{!56}
!56 = distinct !{!56, !57, !"gsi_last_bb: argument 0"}
!57 = distinct !{!57, !"gsi_last_bb"}
!58 = !{!37, !11, i64 96}
!59 = !{!60, !6, i64 0}
!60 = !{!"gimple_bb_info", !6, i64 0, !6, i64 8}
!61 = !{!43, !6, i64 8}
!62 = !{!63}
!63 = distinct !{!63, !64, !"gsi_start_bb: argument 0"}
!64 = distinct !{!64, !"gsi_start_bb"}
!65 = distinct !{!65, !22}
!66 = !{}
!67 = !{!48, !6, i64 8}
!68 = distinct !{!68, !22}
!69 = !{!70}
!70 = distinct !{!70, !71, !"gsi_last_bb: argument 0"}
!71 = distinct !{!71, !"gsi_last_bb"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"gsi_start_bb: argument 0"}
!74 = distinct !{!74, !"gsi_start_bb"}
!75 = !{!76, !11, i64 40}
!76 = !{!"edge_def", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24, !6, i64 32, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !12, i64 56}
!77 = !{!76, !6, i64 32}
!78 = !{!79}
!79 = distinct !{!79, !80, !"gsi_start_bb: argument 0"}
!80 = distinct !{!80, !"gsi_start_bb"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"gsi_start_bb: argument 0"}
!83 = distinct !{!83, !"gsi_start_bb"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"gsi_start_bb: argument 0"}
!86 = distinct !{!86, !"gsi_start_bb"}
!87 = distinct !{!87, !22}
!88 = !{!89}
!89 = distinct !{!89, !90, !"gsi_start_bb: argument 0"}
!90 = distinct !{!90, !"gsi_start_bb"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"gsi_start_bb: argument 0"}
!93 = distinct !{!93, !"gsi_start_bb"}
!94 = distinct !{!94, !22}
!95 = !{!96}
!96 = distinct !{!96, !97, !"gsi_start_bb: argument 0"}
!97 = distinct !{!97, !"gsi_start_bb"}
!98 = distinct !{!98, !22}
!99 = !{!100, !6, i64 32}
!100 = !{!"omp_region", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !7, i64 56, !7, i64 60, !7, i64 64}
!101 = !{!100, !7, i64 56}
!102 = !{!100, !6, i64 0}
!103 = !{!100, !6, i64 40}
!104 = !{!100, !6, i64 24}
!105 = !{!37, !6, i64 8}
!106 = !{!107, !11, i64 0}
!107 = !{!"VEC_edge_base", !11, i64 0, !11, i64 4, !7, i64 8}
!108 = !{!76, !11, i64 48}
!109 = !{!76, !6, i64 8}
!110 = distinct !{!110, !22}
!111 = distinct !{!111, !22}
!112 = !{!113, !6, i64 176}
!113 = !{!"lang_hooks", !6, i64 0, !12, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !6, i64 184, !6, i64 192, !6, i64 200, !6, i64 208, !6, i64 216, !6, i64 224, !6, i64 232, !114, i64 240, !115, i64 248, !116, i64 256, !117, i64 272, !118, i64 432, !119, i64 560, !6, i64 584, !6, i64 592, !6, i64 600, !6, i64 608, !6, i64 616, !6, i64 624, !6, i64 632, !6, i64 640, !6, i64 648, !6, i64 656, !6, i64 664, !7, i64 672}
!114 = !{!"lang_hooks_for_tree_inlining", !6, i64 0}
!115 = !{!"lang_hooks_for_callgraph", !6, i64 0}
!116 = !{!"lang_hooks_for_tree_dump", !6, i64 0, !6, i64 8}
!117 = !{!"lang_hooks_for_decls", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !6, i64 120, !6, i64 128, !6, i64 136, !6, i64 144, !6, i64 152}
!118 = !{!"lang_hooks_for_types", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !6, i64 112, !7, i64 120}
!119 = !{!"lang_hooks_for_lto", !6, i64 0, !6, i64 8, !6, i64 16}
!120 = !{!37, !11, i64 80}
!121 = distinct !{!121, !22}
!122 = !{!123}
!123 = distinct !{!123, !124, !"gsi_start_bb: argument 0"}
!124 = distinct !{!124, !"gsi_start_bb"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"gsi_last_bb: argument 0"}
!127 = distinct !{!127, !"gsi_last_bb"}
!128 = !{!129, !11, i64 8}
!129 = !{!"", !6, i64 0, !11, i64 8, !11, i64 12, !7, i64 16}
!130 = distinct !{!130, !22}
!131 = distinct !{!131, !22}
!132 = !{!133}
!133 = distinct !{!133, !134, !"gsi_last_bb: argument 0"}
!134 = distinct !{!134, !"gsi_last_bb"}
!135 = distinct !{!135, !22}
!136 = !{!137}
!137 = distinct !{!137, !138, !"gsi_last_bb: argument 0"}
!138 = distinct !{!138, !"gsi_last_bb"}
!139 = distinct !{!139, !22}
!140 = !{!141}
!141 = distinct !{!141, !142, !"gsi_start_bb: argument 0"}
!142 = distinct !{!142, !"gsi_start_bb"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"gsi_start_bb: argument 0"}
!145 = distinct !{!145, !"gsi_start_bb"}
!146 = distinct !{!146, !22}
!147 = distinct !{!147, !22}
!148 = !{!149}
!149 = distinct !{!149, !150, !"gsi_start_bb: argument 0"}
!150 = distinct !{!150, !"gsi_start_bb"}
!151 = !{!152, !6, i64 0}
!152 = !{!"label_record", !6, i64 0, !7, i64 8}
!153 = distinct !{!153, !22}
!154 = distinct !{!154, !22}
!155 = !{!156}
!156 = distinct !{!156, !157, !"gsi_last_bb: argument 0"}
!157 = distinct !{!157, !"gsi_last_bb"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"gsi_start_bb: argument 0"}
!160 = distinct !{!160, !"gsi_start_bb"}
!161 = !{!152, !7, i64 8}
!162 = distinct !{!162, !22}
!163 = !{!164}
!164 = distinct !{!164, !165, !"gsi_start_bb: argument 0"}
!165 = distinct !{!165, !"gsi_start_bb"}
!166 = distinct !{!166, !22}
!167 = distinct !{!167, !22}
!168 = !{!24, !6, i64 0}
!169 = !{!170, !6, i64 16}
!170 = !{!"eh_status", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !7, i64 40}
!171 = !{!172, !11, i64 0}
!172 = !{!"VEC_eh_landing_pad_base", !11, i64 0, !11, i64 4, !7, i64 8}
!173 = distinct !{!173, !22}
!174 = !{!175, !6, i64 16}
!175 = !{!"eh_landing_pad_d", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !11, i64 32}
!176 = !{!175, !11, i64 32}
!177 = !{!170, !6, i64 0}
!178 = !{!179, !7, i64 28}
!179 = !{!"eh_region_d", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !7, i64 28, !7, i64 32, !6, i64 56, !6, i64 64, !6, i64 72, !7, i64 80}
!180 = !{!181, !6, i64 32}
!181 = !{!"eh_catch_d", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32}
!182 = !{!183}
!183 = distinct !{!183, !184, !"gsi_start_bb: argument 0"}
!184 = distinct !{!184, !"gsi_start_bb"}
!185 = distinct !{!185, !22}
!186 = !{!179, !6, i64 8}
!187 = !{!179, !6, i64 16}
!188 = !{!179, !6, i64 0}
!189 = distinct !{!189, !22}
!190 = distinct !{!190, !22}
!191 = !{!192}
!192 = distinct !{!192, !193, !"gsi_start_bb: argument 0"}
!193 = distinct !{!193, !"gsi_start_bb"}
!194 = !{i64 0, i64 8, !5, i64 8, i64 8, !5, i64 16, i64 8, !5}
!195 = !{i64 0, i64 8, !5, i64 8, i64 8, !5}
!196 = !{i64 0, i64 8, !5}
!197 = distinct !{!197, !22}
!198 = !{!199}
!199 = distinct !{!199, !200, !"gsi_start_bb: argument 0"}
!200 = distinct !{!200, !"gsi_start_bb"}
!201 = !{!202}
!202 = distinct !{!202, !203, !"gsi_last_bb: argument 0"}
!203 = distinct !{!203, !"gsi_last_bb"}
!204 = distinct !{!204, !22}
!205 = distinct !{!205, !22}
!206 = distinct !{!206, !22}
!207 = distinct !{!207, !22}
!208 = !{!209, !6, i64 8}
!209 = !{!"ssa_use_operand_d", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24}
!210 = distinct !{!210, !22}
!211 = distinct !{!211, !22}
!212 = !{!213, !6, i64 8}
!213 = !{!"immediate_use_iterator_d", !6, i64 0, !6, i64 8, !209, i64 16, !6, i64 48}
!214 = !{!213, !6, i64 0}
!215 = !{!213, !6, i64 48}
!216 = !{!37, !6, i64 0}
!217 = distinct !{!217, !22}
!218 = !{!209, !6, i64 0}
!219 = distinct !{!219, !22}
!220 = !{!24, !6, i64 32}
!221 = !{!222, !6, i64 8}
!222 = !{!"loops", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!223 = !{!224, !11, i64 0}
!224 = !{!"VEC_loop_p_base", !11, i64 0, !11, i64 4, !7, i64 8}
!225 = !{!222, !6, i64 24}
!226 = !{!227, !11, i64 0}
!227 = !{!"loop", !11, i64 0, !11, i64 4, !6, i64 8, !6, i64 16, !228, i64 24, !11, i64 32, !11, i64 36, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !229, i64 80, !229, i64 96, !7, i64 112, !7, i64 113, !7, i64 116, !6, i64 120, !6, i64 128, !7, i64 136, !6, i64 144}
!228 = !{!"lpt_decision", !7, i64 0, !11, i64 4}
!229 = !{!"", !12, i64 0, !12, i64 8}
!230 = !{!231, !11, i64 0}
!231 = !{!"VEC_int_base", !11, i64 0, !11, i64 4, !7, i64 8}
!232 = !{!227, !6, i64 48}
!233 = !{!227, !6, i64 56}
!234 = !{!227, !6, i64 40}
!235 = distinct !{!235, !22}
!236 = distinct !{!236, !22}
!237 = distinct !{!237, !22}
!238 = !{!239}
!239 = distinct !{!239, !240, !"gsi_last_bb: argument 0"}
!240 = distinct !{!240, !"gsi_last_bb"}
!241 = !{!242}
!242 = distinct !{!242, !243, !"gsi_last_bb: argument 0"}
!243 = distinct !{!243, !"gsi_last_bb"}
!244 = distinct !{!244, !22}
!245 = !{!246}
!246 = distinct !{!246, !247, !"gsi_start_bb: argument 0"}
!247 = distinct !{!247, !"gsi_start_bb"}
!248 = !{!249}
!249 = distinct !{!249, !250, !"gsi_start_bb: argument 0"}
!250 = distinct !{!250, !"gsi_start_bb"}
!251 = !{!26, !11, i64 28}
!252 = distinct !{!252, !22}
!253 = distinct !{!253, !22}
!254 = !{!24, !6, i64 48}
!255 = !{!24, !6, i64 72}
!256 = distinct !{!256, !22}
!257 = distinct !{!257, !22}
!258 = !{!259}
!259 = distinct !{!259, !260, !"gsi_start_bb: argument 0"}
!260 = distinct !{!260, !"gsi_start_bb"}
!261 = !{!262, !264}
!262 = distinct !{!262, !263, !"gsi_last_bb: argument 0"}
!263 = distinct !{!263, !"gsi_last_bb"}
!264 = distinct !{!264, !265, !"gsi_last_nondebug_bb: argument 0"}
!265 = distinct !{!265, !"gsi_last_nondebug_bb"}
!266 = !{!264}
!267 = distinct !{!267, !22}
!268 = !{i8 0, i8 2}
!269 = !{!270}
!270 = distinct !{!270, !271, !"gsi_start: argument 0"}
!271 = distinct !{!271, !"gsi_start"}
!272 = distinct !{!272, !22}
!273 = distinct !{!273, !22}
!274 = !{!209, !6, i64 24}
!275 = distinct !{!275, !22}
!276 = distinct !{!276, !22}
!277 = distinct !{!277, !22}
!278 = !{!279, !6, i64 24}
!279 = !{!"walk_stmt_info", !45, i64 0, !6, i64 24, !6, i64 32, !7, i64 40, !7, i64 41, !7, i64 42, !7, i64 43, !6, i64 48}
!280 = distinct !{!280, !22}
!281 = distinct !{!281, !22}
!282 = distinct !{!282, !22}
!283 = !{!284}
!284 = distinct !{!284, !285, !"gsi_start_bb: argument 0"}
!285 = distinct !{!285, !"gsi_start_bb"}
!286 = distinct !{!286, !22}
!287 = !{!288, !6, i64 0}
!288 = !{!"throw_stmt_node", !6, i64 0, !11, i64 8}
!289 = !{!290}
!290 = distinct !{!290, !291, !"gsi_start_bb: argument 0"}
!291 = distinct !{!291, !"gsi_start_bb"}
!292 = distinct !{!292, !22, !293}
!293 = !{!"llvm.loop.peeled.count", i32 1}
!294 = distinct !{!294, !22}
!295 = !{!76, !6, i64 0}
!296 = !{!60, !6, i64 8}
!297 = distinct !{!297, !22}
!298 = !{!76, !11, i64 44}
!299 = !{!300, !11, i64 40}
!300 = !{!"phi_arg_d", !209, i64 0, !6, i64 32, !11, i64 40}
!301 = distinct !{!301, !22}
!302 = distinct !{!302, !303}
!303 = !{!"llvm.loop.unroll.disable"}
!304 = distinct !{!304, !22}
!305 = distinct !{!305, !22}
!306 = distinct !{!306, !22}
!307 = distinct !{!307, !303}
!308 = !{!37, !6, i64 24}
!309 = !{!227, !6, i64 8}
!310 = distinct !{!310, !22}
!311 = !{!227, !6, i64 16}
!312 = distinct !{!312, !22}
!313 = !{!37, !12, i64 72}
!314 = !{!76, !12, i64 56}
!315 = !{!37, !11, i64 88}
!316 = !{!76, !11, i64 52}
!317 = distinct !{!317, !303}
!318 = distinct !{!318, !303}
!319 = !{!320}
!320 = distinct !{!320, !321, !"gsi_last_bb: argument 0"}
!321 = distinct !{!321, !"gsi_last_bb"}
!322 = !{!323}
!323 = distinct !{!323, !324, !"gsi_last_bb: argument 0"}
!324 = distinct !{!324, !"gsi_last_bb"}
!325 = !{!326}
!326 = distinct !{!326, !327, !"gsi_start_bb: argument 0"}
!327 = distinct !{!327, !"gsi_start_bb"}
!328 = distinct !{!328, !22}
!329 = distinct !{!329, !22}
!330 = distinct !{!330, !22}
!331 = distinct !{!331, !22}
!332 = distinct !{!332, !22}
!333 = !{!334}
!334 = distinct !{!334, !335, !"gsi_start_bb: argument 0"}
!335 = distinct !{!335, !"gsi_start_bb"}
!336 = distinct !{!336, !22}
!337 = distinct !{!337, !22}
!338 = distinct !{!338, !22}
!339 = !{!340}
!340 = distinct !{!340, !341, !"gsi_start_bb: argument 0"}
!341 = distinct !{!341, !"gsi_start_bb"}
!342 = distinct !{!342, !22}
!343 = !{!344, !6, i64 0}
!344 = !{!"move_stmt_d", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !7, i64 56}
!345 = !{!344, !6, i64 8}
!346 = !{!344, !6, i64 16}
!347 = !{!344, !6, i64 24}
!348 = !{!344, !6, i64 32}
!349 = !{!344, !6, i64 40}
!350 = !{!344, !6, i64 48}
!351 = !{!344, !7, i64 56}
!352 = distinct !{!352, !22}
!353 = distinct !{!353, !22}
!354 = !{!24, !6, i64 24}
!355 = !{!356}
!356 = distinct !{!356, !357, !"gsi_start_bb: argument 0"}
!357 = distinct !{!357, !"gsi_start_bb"}
!358 = !{!26, !11, i64 72}
!359 = distinct !{!359, !22}
!360 = distinct !{!360, !22}
!361 = distinct !{!361, !22}
!362 = distinct !{!362, !22}
!363 = distinct !{!363, !22}
!364 = !{!365, !11, i64 8}
!365 = !{!"tree_map", !366, i64 0, !11, i64 8, !6, i64 16}
!366 = !{!"tree_map_base", !6, i64 0}
!367 = !{!365, !6, i64 0}
!368 = !{!365, !6, i64 16}
!369 = distinct !{!369, !22}
!370 = distinct !{!370, !22}
!371 = distinct !{!371, !22}
!372 = distinct !{!372, !22}
!373 = !{!227, !6, i64 72}
!374 = !{!227, !7, i64 112}
!375 = !{!227, !7, i64 113}
!376 = distinct !{!376, !22}
!377 = !{!378}
!378 = distinct !{!378, !379, !"gsi_last_bb: argument 0"}
!379 = distinct !{!379, !"gsi_last_bb"}
!380 = distinct !{!380, !22, !293}
!381 = distinct !{!381, !22}
!382 = !{!383}
!383 = distinct !{!383, !384, !"gsi_last_bb: argument 0"}
!384 = distinct !{!384, !"gsi_last_bb"}
!385 = distinct !{!385, !22, !293}
!386 = distinct !{!386, !22}
!387 = distinct !{!387, !22}
!388 = distinct !{!388, !22}
!389 = !{!390, !6, i64 0}
!390 = !{!"bitmap_head_def", !6, i64 0, !6, i64 8, !11, i64 16, !6, i64 24}
!391 = !{!392, !11, i64 16}
!392 = !{!"bitmap_element_def", !6, i64 0, !6, i64 8, !11, i64 16, !7, i64 24}
!393 = distinct !{!393, !22}
!394 = distinct !{!394, !22}
!395 = !{!392, !6, i64 0}
!396 = distinct !{!396, !22}
!397 = distinct !{!397, !22}
!398 = distinct !{!398, !22}
!399 = distinct !{!399, !22}
!400 = distinct !{!400, !22}
!401 = distinct !{!401, !22}
!402 = !{!403}
!403 = distinct !{!403, !404, !"gsi_start_bb: argument 0"}
!404 = distinct !{!404, !"gsi_start_bb"}
!405 = !{!406}
!406 = distinct !{!406, !407, !"gsi_start_bb: argument 0"}
!407 = distinct !{!407, !"gsi_start_bb"}
!408 = distinct !{!408, !22}
!409 = distinct !{!409, !22}
!410 = !{!411}
!411 = distinct !{!411, !412, !"gsi_last_bb: argument 0"}
!412 = distinct !{!412, !"gsi_last_bb"}
!413 = distinct !{!413, !22}
!414 = distinct !{!414, !22}
!415 = distinct !{!415, !22}
!416 = !{!417}
!417 = distinct !{!417, !418, !"gsi_start_bb: argument 0"}
!418 = distinct !{!418, !"gsi_start_bb"}
!419 = !{!37, !6, i64 16}
!420 = distinct !{!420, !22}
!421 = distinct !{!421, !22}
!422 = distinct !{!422, !22}
!423 = !{!424}
!424 = distinct !{!424, !425, !"gsi_start_bb: argument 0"}
!425 = distinct !{!425, !"gsi_start_bb"}
!426 = distinct !{!426, !22}
!427 = distinct !{!427, !22}
!428 = distinct !{!428, !22}
!429 = !{!430}
!430 = distinct !{!430, !431, !"gsi_last_bb: argument 0"}
!431 = distinct !{!431, !"gsi_last_bb"}
!432 = !{!433}
!433 = distinct !{!433, !434, !"gsi_last_bb: argument 0"}
!434 = distinct !{!434, !"gsi_last_bb"}
!435 = distinct !{!435, !22}
!436 = !{!437}
!437 = distinct !{!437, !438, !"gsi_start_bb: argument 0"}
!438 = distinct !{!438, !"gsi_start_bb"}
!439 = distinct !{!439, !22}
!440 = !{!441}
!441 = distinct !{!441, !442, !"gsi_start_bb: argument 0"}
!442 = distinct !{!442, !"gsi_start_bb"}
!443 = distinct !{!443, !22}
!444 = !{!445}
!445 = distinct !{!445, !446, !"gsi_last_bb: argument 0"}
!446 = distinct !{!446, !"gsi_last_bb"}
!447 = !{!448}
!448 = distinct !{!448, !449, !"gsi_start_bb: argument 0"}
!449 = distinct !{!449, !"gsi_start_bb"}
!450 = !{!451}
!451 = distinct !{!451, !452, !"gsi_last_bb: argument 0"}
!452 = distinct !{!452, !"gsi_last_bb"}
!453 = distinct !{!453, !22}
!454 = distinct !{!454, !22}
!455 = distinct !{!455, !22}
!456 = !{!457}
!457 = distinct !{!457, !458, !"gsi_start_bb: argument 0"}
!458 = distinct !{!458, !"gsi_start_bb"}
!459 = distinct !{!459, !22}
!460 = !{!461}
!461 = distinct !{!461, !462, !"gsi_start: argument 0"}
!462 = distinct !{!462, !"gsi_start"}
!463 = distinct !{!463, !22}
!464 = !{!465}
!465 = distinct !{!465, !466, !"gsi_last_bb: argument 0"}
!466 = distinct !{!466, !"gsi_last_bb"}
!467 = !{!468}
!468 = distinct !{!468, !469, !"gsi_start_bb: argument 0"}
!469 = distinct !{!469, !"gsi_start_bb"}
!470 = distinct !{!470, !22}
!471 = !{!472}
!472 = distinct !{!472, !473, !"gsi_last_bb: argument 0"}
!473 = distinct !{!473, !"gsi_last_bb"}
!474 = !{!475}
!475 = distinct !{!475, !476, !"gsi_start: argument 0"}
!476 = distinct !{!476, !"gsi_start"}
!477 = !{!222, !11, i64 0}
!478 = distinct !{!478, !22}
!479 = distinct !{!479, !22}
!480 = !{!481}
!481 = distinct !{!481, !482, !"gsi_start_bb: argument 0"}
!482 = distinct !{!482, !"gsi_start_bb"}
!483 = !{!484}
!484 = distinct !{!484, !485, !"gsi_start_bb: argument 0"}
!485 = distinct !{!485, !"gsi_start_bb"}
!486 = distinct !{!486, !22}
!487 = !{!488}
!488 = distinct !{!488, !489, !"gsi_last_bb: argument 0"}
!489 = distinct !{!489, !"gsi_last_bb"}
!490 = !{!491}
!491 = distinct !{!491, !492, !"gsi_start: argument 0"}
!492 = distinct !{!492, !"gsi_start"}
!493 = distinct !{!493, !22}
!494 = !{!495}
!495 = distinct !{!495, !496, !"gsi_start_bb: argument 0"}
!496 = distinct !{!496, !"gsi_start_bb"}
!497 = !{!498}
!498 = distinct !{!498, !499, !"gsi_start_bb: argument 0"}
!499 = distinct !{!499, !"gsi_start_bb"}
!500 = !{!501, !6, i64 8}
!501 = !{!"def_optype_d", !6, i64 0, !6, i64 8}
!502 = !{!501, !6, i64 0}
!503 = distinct !{!503, !22}
!504 = distinct !{!504, !22}
!505 = !{!506, !11, i64 0}
!506 = !{!"VEC_edge_var_map_base", !11, i64 0, !11, i64 4, !7, i64 8}
!507 = !{!508, !6, i64 0}
!508 = !{!"_edge_var_map", !6, i64 0, !6, i64 8, !11, i64 16}
!509 = !{!508, !6, i64 8}
!510 = !{!508, !11, i64 16}
!511 = distinct !{!511, !22}
!512 = distinct !{!512, !22}
!513 = distinct !{!513, !22}
!514 = !{!515, !517}
!515 = distinct !{!515, !516, !"gsi_last_bb: argument 0"}
!516 = distinct !{!516, !"gsi_last_bb"}
!517 = distinct !{!517, !518, !"gsi_last_nondebug_bb: argument 0"}
!518 = distinct !{!518, !"gsi_last_nondebug_bb"}
!519 = !{!517}
!520 = !{!521}
!521 = distinct !{!521, !522, !"gsi_last_bb: argument 0"}
!522 = distinct !{!522, !"gsi_last_bb"}
!523 = !{!524}
!524 = distinct !{!524, !525, !"gsi_last_bb: argument 0"}
!525 = distinct !{!525, !"gsi_last_bb"}
!526 = !{!527}
!527 = distinct !{!527, !528, !"gsi_last_bb: argument 0"}
!528 = distinct !{!528, !"gsi_last_bb"}
!529 = distinct !{!529, !22}
!530 = distinct !{!530, !22}
!531 = !{!532}
!532 = distinct !{!532, !533, !"gsi_last_bb: argument 0"}
!533 = distinct !{!533, !"gsi_last_bb"}
!534 = distinct !{!534, !22}
!535 = !{!536}
!536 = distinct !{!536, !537, !"gsi_last_bb: argument 0"}
!537 = distinct !{!537, !"gsi_last_bb"}
!538 = distinct !{!538, !22}
!539 = distinct !{!539, !22}
!540 = !{!541}
!541 = distinct !{!541, !542, !"gsi_last_bb: argument 0"}
!542 = distinct !{!542, !"gsi_last_bb"}
!543 = distinct !{!543, !22}
!544 = !{!24, !11, i64 116}
!545 = !{!546}
!546 = distinct !{!546, !547, !"gsi_last_bb: argument 0"}
!547 = distinct !{!547, !"gsi_last_bb"}
!548 = distinct !{!548, !22}
!549 = !{!113, !6, i64 96}
!550 = !{!551, !11, i64 0}
!551 = !{!"locus_discrim_map", !11, i64 0, !11, i64 4}
!552 = !{!37, !11, i64 92}
!553 = !{!554}
!554 = distinct !{!554, !555, !"gsi_start_bb: argument 0"}
!555 = distinct !{!555, !"gsi_start_bb"}
!556 = distinct !{!556, !22}
!557 = !{!558}
!558 = distinct !{!558, !559, !"gsi_last_bb: argument 0"}
!559 = distinct !{!559, !"gsi_last_bb"}
!560 = !{i64 0, i64 8, !5, i64 8, i64 4, !20, i64 12, i64 4, !20, i64 16, i64 1, !16}
!561 = !{i64 0, i64 4, !20, i64 4, i64 4, !20, i64 8, i64 1, !16}
!562 = !{!551, !11, i64 4}
!563 = !{!564, !6, i64 0}
!564 = !{!"use_optype_d", !6, i64 0, !209, i64 8}
!565 = distinct !{!565, !22}
!566 = !{!13, !13, i64 0}
!567 = distinct !{!567, !22}
!568 = !{!179, !11, i64 24}
!569 = !{!570}
!570 = distinct !{!570, !571, !"gsi_start_bb: argument 0"}
!571 = distinct !{!571, !"gsi_start_bb"}
!572 = distinct !{!572, !22}
!573 = !{!574}
!574 = distinct !{!574, !575, !"gsi_start: argument 0"}
!575 = distinct !{!575, !"gsi_start"}
!576 = distinct !{!576, !22}
