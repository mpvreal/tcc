; ModuleID = 'combine.c'
source_filename = "combine.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, i32 }
%struct.rtl_hooks = type { ptr, ptr, ptr, ptr, ptr }
%struct.undobuf = type { ptr, ptr, ptr }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, ptr, ptr, ptr }
%struct.emit_status = type { i32, i32, ptr, ptr, ptr, i32, i32, i32, i32, ptr }
%struct.varasm_status = type { ptr, i32 }
%struct.incoming_args = type { i32, i32, i32, ptr, %struct.ix86_args, ptr }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { ptr, ptr, ptr, ptr, ptr }
%struct.rtl_eh = type { ptr, ptr, ptr, ptr, ptr, ptr, [2 x ptr] }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], ptr, i64 }
%union.rtunion_def = type { ptr }
%struct.VEC_reg_stat_type_base = type { i32, i32, [1 x %struct.reg_stat_struct] }
%struct.reg_stat_struct = type { ptr, ptr, ptr, i32, i32, i64, i8, i8, i8, i8, i64, i32, i8 }
%struct.function = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i32 }
%struct.basic_block_def = type { ptr, ptr, ptr, ptr, [2 x ptr], ptr, ptr, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%union.basic_block_il_dependent = type { ptr }
%struct.control_flow_graph = type { ptr, ptr, ptr, i32, i32, i32, ptr, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.rtl_bb_info = type { ptr, ptr, ptr, ptr, i32 }
%struct.df = type { [8 x ptr], [8 x ptr], ptr, %struct.df_ref_info, %struct.df_ref_info, ptr, ptr, ptr, i32, i32, ptr, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, i32, i8, i8, i8 }
%struct.df_ref_info = type { ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.df_insn_info = type { ptr, ptr, ptr, ptr, ptr, i32 }
%struct.df_base_ref = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.VEC_edge_base = type { i32, i32, [1 x ptr] }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, ptr, ptr }
%struct.cgraph_local_info = type { ptr, %struct.inline_summary, i8 }
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%union.tree_type_symtab = type { ptr }
%struct.dataflow = type { ptr, ptr, i32, ptr, ptr, ptr, i32, i8, i8, i8 }
%struct.df_lr_bb_info = type { ptr, ptr, ptr, ptr }
%struct.rtvec_def = type { i32, [1 x ptr] }
%struct.likely_spilled_retval_info = type { i32, i32, i32 }
%struct.regstat_n_sets_and_refs_t = type { i32, i32 }
%struct.undo = type { ptr, i32, %union.anon, %union.anon.0 }
%union.anon = type { ptr }
%union.anon.0 = type { ptr }
%struct.param_info = type { ptr, i32, i8, i32, i32, ptr }
%struct.mem_attrs = type { ptr, ptr, ptr, i32, i32, i8 }
%struct.edge_def = type { ptr, ptr, %union.edge_def_insns, ptr, ptr, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { ptr }
%struct.real_format = type { ptr, ptr, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }

@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@nonzero_sign_valid = internal unnamed_addr global i1 false, align 4
@mode_size = external local_unnamed_addr global [87 x i8], align 16
@.str = private unnamed_addr constant [99 x i8] c";; Combiner statistics: %d attempts, %d substitutions (%d requiring new space),\0A;; %d successes.\0A\0A\00", align 1
@combine_attempts = internal unnamed_addr global i32 0, align 4
@combine_merges = internal unnamed_addr global i32 0, align 4
@combine_extras = internal unnamed_addr global i32 0, align 4
@combine_successes = internal unnamed_addr global i32 0, align 4
@.str.1 = private unnamed_addr constant [95 x i8] c"\0A;; Combiner totals: %d attempts, %d substitutions (%d requiring new space),\0A;; %d successes.\0A\00", align 1
@total_attempts = internal unnamed_addr global i32 0, align 4
@total_merges = internal unnamed_addr global i32 0, align 4
@total_extras = internal unnamed_addr global i32 0, align 4
@total_successes = internal unnamed_addr global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"combine\00", align 1
@pass_combine = dso_local local_unnamed_addr global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, ptr @.str.2, ptr @gate_handle_combine, ptr @rest_of_handle_combine, ptr null, ptr null, i32 0, i32 140, i32 512, i32 0, i32 0, i32 0, i32 132099 } }, align 8
@optimize = external local_unnamed_addr global i32, align 4
@timevar_enable = external local_unnamed_addr global i8, align 1
@rtl_hooks = external local_unnamed_addr global %struct.rtl_hooks, align 8
@combine_rtl_hooks = internal unnamed_addr constant %struct.rtl_hooks { ptr @gen_lowpart_for_combine, ptr @gen_lowpart_for_combine, ptr @reg_nonzero_bits_for_combine, ptr @reg_num_sign_bit_copies_for_combine, ptr @reg_truncated_to_mode }, align 8
@reg_stat = internal unnamed_addr global ptr null, align 8
@max_uid_known = internal unnamed_addr global i32 0, align 4
@uid_log_links = internal unnamed_addr global ptr null, align 8
@uid_insn_cost = internal unnamed_addr global ptr null, align 8
@nonzero_bits_mode = internal unnamed_addr global i32 0, align 4
@label_tick_ebb_start = internal unnamed_addr global i32 0, align 4
@label_tick = internal unnamed_addr global i32 0, align 4
@cfun = external local_unnamed_addr global ptr, align 8
@this_basic_block = internal unnamed_addr global ptr null, align 8
@optimize_this_for_speed_p = internal unnamed_addr global i8 0, align 1
@last_call_luid = internal unnamed_addr global i32 0, align 4
@mem_last_set = internal unnamed_addr global i32 0, align 4
@df = external local_unnamed_addr global ptr, align 8
@subst_low_luid = internal unnamed_addr global i32 0, align 4
@subst_insn = internal unnamed_addr global ptr null, align 8
@dump_file = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [18 x i8] c"insn_cost %d: %d\0A\00", align 1
@mode_class = external local_unnamed_addr constant [87 x i8], align 16
@i2mod = internal unnamed_addr global ptr null, align 8
@i2mod_old_rhs = internal unnamed_addr global ptr null, align 8
@i2mod_new_rhs = internal unnamed_addr global ptr null, align 8
@undobuf = internal global %struct.undobuf zeroinitializer, align 8
@general_rtl_hooks = external local_unnamed_addr constant %struct.rtl_hooks, align 8
@rtx_class = external local_unnamed_addr constant [139 x i32], align 16
@const_int_rtx = external local_unnamed_addr global [129 x ptr], align 16
@mode_mask_array = external local_unnamed_addr constant [87 x i64], align 16
@regstat_n_sets_and_refs = external local_unnamed_addr global ptr, align 8
@rtx_format = external local_unnamed_addr constant [139 x ptr], align 16
@rtx_length = external local_unnamed_addr constant [139 x i8], align 16
@hard_regno_nregs = external local_unnamed_addr global [53 x [87 x i8]], align 16
@current_function_decl = external local_unnamed_addr global ptr, align 8
@compiler_params = external local_unnamed_addr global ptr, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c"combine.c\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@reload_completed = external local_unnamed_addr global i32, align 4
@x_rtl = external local_unnamed_addr global %struct.rtl_data, align 8
@fixed_regs = external local_unnamed_addr global [53 x i8], align 16
@regs_invalidated_by_call = external local_unnamed_addr global i64, align 8
@newpat_used_regs = internal unnamed_addr global i64 0, align 8
@dump_flags = external local_unnamed_addr global i32, align 4
@.str.7 = private unnamed_addr constant [23 x i8] c"\0ATrying %d, %d -> %d:\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"\0ATrying %d -> %d:\0A\00", align 1
@added_links_insn = internal unnamed_addr global ptr null, align 8
@regno_reg_rtx = external local_unnamed_addr global ptr, align 8
@flag_expensive_optimizations = external local_unnamed_addr global i32, align 4
@global_rtl = external local_unnamed_addr global [11 x ptr], align 16
@n_occurrences = internal unnamed_addr global i32 0, align 4
@flag_unsafe_math_optimizations = external local_unnamed_addr global i32, align 4
@word_mode = external local_unnamed_addr global i32, align 4
@flag_var_tracking_assignments = external local_unnamed_addr global i32, align 4
@.str.9 = private unnamed_addr constant [22 x i8] c"modifying other_insn \00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"modifying insn i1 \00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"modifying insn i2 \00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"modifying insn i3 \00", align 1
@regclass_map = external local_unnamed_addr constant [53 x i32], align 16
@global_regs = external local_unnamed_addr global [53 x i8], align 16
@.str.13 = private unnamed_addr constant [3 x i8] c"ie\00", align 1
@const_true_rtx = external local_unnamed_addr global ptr, align 8
@flag_associative_math = external local_unnamed_addr global i32, align 4
@class_narrowest_mode = external local_unnamed_addr constant [18 x i8], align 16
@mode_wider = external local_unnamed_addr constant [87 x i8], align 16
@mode_nunits = external local_unnamed_addr constant [87 x i8], align 16
@real_format_for_mode = external local_unnamed_addr global [7 x ptr], align 16
@mode_inner = external local_unnamed_addr constant [87 x i8], align 16
@flag_finite_math_only = external local_unnamed_addr global i32, align 4
@const_tiny_rtx = external local_unnamed_addr global [3 x [87 x ptr]], align 16
@.str.14 = private unnamed_addr constant [35 x i8] c"Failed to match this instruction:\0A\00", align 1
@.str.15 = private unnamed_addr constant [40 x i8] c"Successfully matched this instruction:\0A\00", align 1
@reg_dead_regno = internal unnamed_addr global i32 0, align 4
@reg_dead_endregno = internal unnamed_addr global i32 0, align 4
@reg_dead_flag = internal unnamed_addr global i32 0, align 4
@target_flags = external local_unnamed_addr global i32, align 4
@.str.16 = private unnamed_addr constant [46 x i8] c"rejecting combination of insns %d, %d and %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [34 x i8] c"original costs %d + %d + %d = %d\0A\00", align 1
@.str.18 = private unnamed_addr constant [42 x i8] c"rejecting combination of insns %d and %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"original costs %d + %d = %d\0A\00", align 1
@.str.20 = private unnamed_addr constant [32 x i8] c"replacement costs %d + %d = %d\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"replacement cost %d\0A\00", align 1
@flag_non_call_exceptions = external local_unnamed_addr global i32, align 4
@reg_raw_mode = external local_unnamed_addr global [53 x i32], align 16
@.str.22 = private unnamed_addr constant [23 x i8] c"deleting noop move %d\0A\00", align 1
@switch.table.cant_combine_insn_p = private unnamed_addr constant [17 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1], align 4
@switch.table.simplify_comparison = private unnamed_addr constant [6 x i32] [i32 80, i32 81, i32 81, i32 80, i32 81, i32 80], align 4

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !5
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #25
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #25
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !14
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !15

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #25
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !9
  %11 = load i8, ptr %3, align 1, !tbaa !16
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #25
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #25
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !15

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #25
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !17
  store i8 %12, ptr %4, align 1, !tbaa !16
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #25
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !19
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #25
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #25
  %6 = load ptr, ptr %5, align 8, !tbaa !5
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !20
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #25
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #25
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #25
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #25
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !21

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @extended_count(ptr noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = load i1, ptr @nonzero_sign_valid, align 4
  br i1 %4, label %5, label %22

5:                                                ; preds = %3
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %5
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %8
  %10 = load i8, ptr %9, align 1, !tbaa !16
  %11 = icmp ult i8 %10, 9
  br i1 %11, label %12, label %22

12:                                               ; preds = %7
  %13 = zext i8 %10 to i32
  %14 = shl nuw nsw i32 %13, 3
  %15 = tail call i64 @nonzero_bits(ptr noundef %0, i32 noundef %1) #25
  %16 = tail call i32 @floor_log2(i64 noundef %15) #25
  %17 = xor i32 %16, -1
  %18 = add i32 %14, %17
  br label %22

19:                                               ; preds = %5
  %20 = tail call i32 @num_sign_bit_copies(ptr noundef %0, i32 noundef %1) #25
  %21 = add i32 %20, -1
  br label %22

22:                                               ; preds = %19, %7, %12, %3
  %23 = phi i32 [ 0, %3 ], [ %21, %19 ], [ %18, %12 ], [ 0, %7 ]
  ret i32 %23
}

declare i32 @floor_log2(i64 noundef) local_unnamed_addr #3

declare i64 @nonzero_bits(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @num_sign_bit_copies(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @remove_death(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call ptr @find_regno_note(ptr noundef %1, i32 noundef 1, i32 noundef %0) #25
  %4 = icmp eq ptr %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void @remove_note(ptr noundef %1, ptr noundef nonnull %3) #25
  br label %6

6:                                                ; preds = %5, %2
  ret ptr %3
}

declare ptr @find_regno_note(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @remove_note(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @dump_combine_stats(ptr nocapture noundef %0) local_unnamed_addr #10 {
  %2 = load i32, ptr @combine_attempts, align 4, !tbaa !20
  %3 = load i32, ptr @combine_merges, align 4, !tbaa !20
  %4 = load i32, ptr @combine_extras, align 4, !tbaa !20
  %5 = load i32, ptr @combine_successes, align 4, !tbaa !20
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @dump_combine_total_stats(ptr nocapture noundef %0) local_unnamed_addr #10 {
  %2 = load i32, ptr @total_attempts, align 4, !tbaa !20
  %3 = load i32, ptr @total_merges, align 4, !tbaa !20
  %4 = load i32, ptr @total_extras, align 4, !tbaa !20
  %5 = load i32, ptr @total_successes, align 4, !tbaa !20
  %6 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef nonnull @.str.1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal zeroext i8 @gate_handle_combine() #11 {
  %1 = load i32, ptr @optimize, align 4, !tbaa !20
  %2 = icmp sgt i32 %1, 0
  %3 = zext i1 %2 to i8
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @rest_of_handle_combine() #9 {
  %1 = alloca ptr, align 8
  %2 = alloca i32, align 4
  %3 = tail call i32 @df_set_flags(i32 noundef 33) #25
  tail call void @df_note_add_problem() #25
  tail call void @df_analyze() #25
  tail call void @regstat_init_n_sets_and_refs() #25
  %4 = tail call ptr @get_insns() #25
  %5 = tail call i32 @max_reg_num() #25
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #25
  store i32 0, ptr %2, align 4, !tbaa !20
  %6 = icmp eq ptr %4, null
  br i1 %6, label %689, label %7

7:                                                ; preds = %0, %13
  %8 = phi ptr [ %15, %13 ], [ %4, %0 ]
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = add nsw i32 %10, -7
  %12 = icmp ult i32 %11, 4
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1, i32 0, i32 0, i64 2
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = icmp eq ptr %15, null
  br i1 %16, label %689, label %7, !llvm.loop !23

17:                                               ; preds = %7
  store i32 0, ptr @combine_attempts, align 4, !tbaa !20
  store i32 0, ptr @combine_merges, align 4, !tbaa !20
  store i32 0, ptr @combine_extras, align 4, !tbaa !20
  store i32 0, ptr @combine_successes, align 4, !tbaa !20
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) @rtl_hooks, ptr noundef nonnull align 8 dereferenceable(40) @combine_rtl_hooks, i64 40, i1 false), !tbaa.struct !24
  %18 = load ptr, ptr @reg_stat, align 8
  %19 = icmp eq ptr %18, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %17
  %21 = load i32, ptr %18, align 8, !tbaa !25
  %22 = sub nsw i32 %5, %21
  %23 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %18, i64 0, i32 1
  %24 = load i32, ptr %23, align 4, !tbaa !27
  %25 = sub i32 %24, %21
  %26 = icmp ult i32 %25, %22
  br i1 %26, label %29, label %34

27:                                               ; preds = %17
  %28 = icmp ne i32 %5, 0
  tail call void @llvm.assume(i1 %28)
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ 0, %27 ], [ %21, %20 ]
  %31 = phi i32 [ %5, %27 ], [ %22, %20 ]
  %32 = tail call ptr @vec_heap_o_reserve_exact(ptr noundef %18, i32 noundef %31, i64 noundef 8, i64 noundef 64) #25
  store ptr %32, ptr @reg_stat, align 8, !tbaa !5
  %33 = sub nsw i32 %5, %30
  br label %34

34:                                               ; preds = %29, %20
  %35 = phi i32 [ %22, %20 ], [ %33, %29 ]
  %36 = phi i32 [ %21, %20 ], [ %30, %29 ]
  %37 = phi ptr [ %18, %20 ], [ %32, %29 ]
  store i32 %5, ptr %37, align 8, !tbaa !25
  %38 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %37, i64 0, i32 2
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds %struct.reg_stat_struct, ptr %38, i64 %39
  %41 = sext i32 %35 to i64
  %42 = shl nsw i64 %41, 6
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 %40, i8 0, i64 %42, i1 false)
  tail call void @init_recog_no_volatile() #25
  %43 = tail call i32 @get_max_uid() #25
  store i32 %43, ptr @max_uid_known, align 4, !tbaa !20
  %44 = add nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = tail call ptr @xcalloc(i64 noundef %45, i64 noundef 8) #25
  store ptr %46, ptr @uid_log_links, align 8, !tbaa !5
  %47 = load i32, ptr @max_uid_known, align 4, !tbaa !20
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = tail call ptr @xcalloc(i64 noundef %49, i64 noundef 4) #25
  store ptr %50, ptr @uid_insn_cost, align 8, !tbaa !5
  %51 = tail call i32 @mode_for_size(i32 noundef 64, i32 noundef 2, i32 noundef 0) #25
  store i32 %51, ptr @nonzero_bits_mode, align 4, !tbaa !16
  store i1 false, ptr @nonzero_sign_valid, align 4
  store i32 1, ptr @label_tick_ebb_start, align 4, !tbaa !20
  store i32 1, ptr @label_tick, align 4, !tbaa !20
  tail call fastcc void @setup_incoming_promotions(ptr noundef nonnull %8)
  %52 = load ptr, ptr @cfun, align 8, !tbaa !5
  %53 = getelementptr inbounds %struct.function, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !28
  %55 = load ptr, ptr %54, align 8, !tbaa !30
  %56 = tail call i32 @max_reg_num() #25
  %57 = sext i32 %56 to i64
  %58 = tail call ptr @xcalloc(i64 noundef %57, i64 noundef 8) #25
  %59 = load ptr, ptr @cfun, align 8, !tbaa !5
  %60 = getelementptr inbounds %struct.function, ptr %59, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !28
  %62 = load ptr, ptr %61, align 8, !tbaa !30
  %63 = getelementptr inbounds %struct.basic_block_def, ptr %62, i64 0, i32 6
  %64 = load ptr, ptr %63, align 8, !tbaa !32
  %65 = getelementptr inbounds %struct.control_flow_graph, ptr %61, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !34
  %67 = icmp eq ptr %64, %66
  br i1 %67, label %222, label %68

68:                                               ; preds = %34, %213
  %69 = phi ptr [ %214, %213 ], [ %59, %34 ]
  %70 = phi ptr [ %216, %213 ], [ %64, %34 ]
  %71 = getelementptr inbounds %struct.basic_block_def, ptr %70, i64 0, i32 7
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = getelementptr inbounds %struct.rtl_bb_info, ptr %72, i64 0, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = icmp eq ptr %74, null
  br i1 %75, label %213, label %76

76:                                               ; preds = %68, %207
  %77 = phi ptr [ %209, %207 ], [ %74, %68 ]
  %78 = load ptr, ptr %71, align 8, !tbaa !16
  %79 = load ptr, ptr %78, align 8, !tbaa !35
  %80 = getelementptr inbounds %struct.rtx_def, ptr %79, i64 0, i32 1, i32 0, i32 0, i64 1
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = icmp eq ptr %77, %81
  br i1 %82, label %211, label %83

83:                                               ; preds = %76
  %84 = load i32, ptr %77, align 8
  %85 = and i32 %84, 65535
  %86 = add nsw i32 %85, -11
  %87 = icmp ult i32 %86, -3
  br i1 %87, label %207, label %88

88:                                               ; preds = %83
  %89 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.rtx_def, ptr %77, i64 0, i32 1
  %91 = load i32, ptr %90, align 8, !tbaa !16
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds ptr, ptr %89, i64 %92
  %94 = load ptr, ptr %93, align 8, !tbaa !5
  %95 = icmp eq ptr %94, null
  br i1 %95, label %99, label %96

96:                                               ; preds = %88
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 928, ptr noundef nonnull @.str.5) #25
  %97 = load i32, ptr %90, align 8, !tbaa !16
  %98 = sext i32 %97 to i64
  br label %99

99:                                               ; preds = %96, %88
  %100 = phi i64 [ %92, %88 ], [ %98, %96 ]
  %101 = load ptr, ptr @df, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.df, ptr %101, i64 0, i32 10
  %103 = load ptr, ptr %102, align 8, !tbaa !37
  %104 = getelementptr inbounds ptr, ptr %103, i64 %100
  %105 = load ptr, ptr %104, align 8, !tbaa !5
  %106 = getelementptr inbounds %struct.df_insn_info, ptr %105, i64 0, i32 1
  %107 = load ptr, ptr %106, align 8, !tbaa !40
  %108 = load ptr, ptr %107, align 8, !tbaa !5
  %109 = icmp eq ptr %108, null
  br i1 %109, label %186, label %110

110:                                              ; preds = %99, %174
  %111 = phi ptr [ %176, %174 ], [ %108, %99 ]
  %112 = phi ptr [ %175, %174 ], [ %107, %99 ]
  %113 = getelementptr inbounds %struct.df_base_ref, ptr %111, i64 0, i32 6
  %114 = load i32, ptr %113, align 8, !tbaa !16
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds ptr, ptr %58, i64 %115
  %117 = load ptr, ptr %116, align 8, !tbaa !5
  %118 = icmp eq ptr %117, null
  br i1 %118, label %174, label %119

119:                                              ; preds = %110
  %120 = load i32, ptr %111, align 8
  %121 = icmp sgt i32 %120, -1
  br i1 %121, label %122, label %174

122:                                              ; preds = %119
  switch i32 %114, label %139 [
    i32 20, label %123
    i32 6, label %129
    i32 16, label %135
  ]

123:                                              ; preds = %122
  %124 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %125 = icmp eq i32 %124, 0
  %126 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %127 = icmp ne i8 %126, 0
  %128 = select i1 %125, i1 true, i1 %127
  br i1 %128, label %174, label %139

129:                                              ; preds = %122
  %130 = load i32, ptr @reload_completed, align 4, !tbaa !20
  %131 = icmp eq i32 %130, 0
  %132 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %133 = icmp ne i8 %132, 0
  %134 = select i1 %131, i1 true, i1 %133
  br i1 %134, label %174, label %139

135:                                              ; preds = %122
  %136 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %115
  %137 = load i8, ptr %136, align 1, !tbaa !16
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %174

139:                                              ; preds = %135, %129, %123, %122
  %140 = getelementptr inbounds %struct.rtx_def, ptr %117, i64 0, i32 1
  %141 = getelementptr inbounds %struct.rtx_def, ptr %117, i64 0, i32 1, i32 0, i32 1
  %142 = load ptr, ptr %141, align 8, !tbaa !16
  %143 = icmp eq ptr %142, %70
  br i1 %143, label %144, label %173

144:                                              ; preds = %139
  %145 = icmp sgt i32 %114, 52
  br i1 %145, label %151, label %146

146:                                              ; preds = %144
  %147 = getelementptr inbounds %struct.rtx_def, ptr %117, i64 1
  %148 = load ptr, ptr %147, align 8, !tbaa !16
  %149 = tail call i32 @asm_noperands(ptr noundef %148) #25
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %151, label %173

151:                                              ; preds = %146, %144
  %152 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %153 = load i32, ptr %140, align 8, !tbaa !16
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds ptr, ptr %152, i64 %154
  %156 = load ptr, ptr %155, align 8, !tbaa !16
  %157 = icmp eq ptr %156, null
  br i1 %157, label %167, label %162

158:                                              ; preds = %162
  %159 = getelementptr inbounds %struct.rtx_def, ptr %163, i64 0, i32 1, i32 0, i32 0, i64 1
  %160 = load ptr, ptr %159, align 8, !tbaa !16
  %161 = icmp eq ptr %160, null
  br i1 %161, label %167, label %162, !llvm.loop !42

162:                                              ; preds = %151, %158
  %163 = phi ptr [ %160, %158 ], [ %156, %151 ]
  %164 = getelementptr inbounds %struct.rtx_def, ptr %163, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !16
  %166 = icmp eq ptr %77, %165
  br i1 %166, label %173, label %158

167:                                              ; preds = %158, %151
  %168 = tail call ptr @alloc_INSN_LIST(ptr noundef nonnull %77, ptr noundef %156) #25
  %169 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %170 = load i32, ptr %140, align 8, !tbaa !16
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds ptr, ptr %169, i64 %171
  store ptr %168, ptr %172, align 8, !tbaa !5
  br label %173

173:                                              ; preds = %162, %167, %146, %139
  store ptr null, ptr %116, align 8, !tbaa !5
  br label %174

174:                                              ; preds = %173, %135, %129, %123, %119, %110
  %175 = getelementptr inbounds ptr, ptr %112, i64 1
  %176 = load ptr, ptr %175, align 8, !tbaa !5
  %177 = icmp eq ptr %176, null
  br i1 %177, label %178, label %110, !llvm.loop !43

178:                                              ; preds = %174
  %179 = load ptr, ptr @df, align 8, !tbaa !5
  %180 = getelementptr inbounds %struct.df, ptr %179, i64 0, i32 10
  %181 = load ptr, ptr %180, align 8, !tbaa !37
  %182 = load i32, ptr %90, align 8, !tbaa !16
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds ptr, ptr %181, i64 %183
  %185 = load ptr, ptr %184, align 8, !tbaa !5
  br label %186

186:                                              ; preds = %178, %99
  %187 = phi ptr [ %185, %178 ], [ %105, %99 ]
  %188 = getelementptr inbounds %struct.df_insn_info, ptr %187, i64 0, i32 2
  %189 = load ptr, ptr %188, align 8, !tbaa !44
  %190 = load ptr, ptr %189, align 8, !tbaa !5
  %191 = icmp eq ptr %190, null
  br i1 %191, label %207, label %192

192:                                              ; preds = %186, %203
  %193 = phi ptr [ %205, %203 ], [ %190, %186 ]
  %194 = phi ptr [ %204, %203 ], [ %189, %186 ]
  %195 = load i32, ptr %193, align 8
  %196 = and i32 %195, 536870912
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %203

198:                                              ; preds = %192
  %199 = getelementptr inbounds %struct.df_base_ref, ptr %193, i64 0, i32 6
  %200 = load i32, ptr %199, align 8, !tbaa !16
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds ptr, ptr %58, i64 %201
  store ptr %77, ptr %202, align 8, !tbaa !5
  br label %203

203:                                              ; preds = %198, %192
  %204 = getelementptr inbounds ptr, ptr %194, i64 1
  %205 = load ptr, ptr %204, align 8, !tbaa !5
  %206 = icmp eq ptr %205, null
  br i1 %206, label %207, label %192, !llvm.loop !45

207:                                              ; preds = %203, %186, %83
  %208 = getelementptr inbounds %struct.rtx_def, ptr %77, i64 0, i32 1, i32 0, i32 0, i64 1
  %209 = load ptr, ptr %208, align 8, !tbaa !16
  %210 = icmp eq ptr %209, null
  br i1 %210, label %211, label %76, !llvm.loop !46

211:                                              ; preds = %207, %76
  %212 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %213

213:                                              ; preds = %211, %68
  %214 = phi ptr [ %212, %211 ], [ %69, %68 ]
  %215 = getelementptr inbounds %struct.basic_block_def, ptr %70, i64 0, i32 6
  %216 = load ptr, ptr %215, align 8, !tbaa !32
  %217 = getelementptr inbounds %struct.function, ptr %214, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !28
  %219 = getelementptr inbounds %struct.control_flow_graph, ptr %218, i64 0, i32 1
  %220 = load ptr, ptr %219, align 8, !tbaa !34
  %221 = icmp eq ptr %216, %220
  br i1 %221, label %222, label %68, !llvm.loop !47

222:                                              ; preds = %213, %34
  tail call void @free(ptr noundef %58)
  %223 = load ptr, ptr @cfun, align 8, !tbaa !5
  %224 = getelementptr inbounds %struct.function, ptr %223, i64 0, i32 1
  %225 = load ptr, ptr %224, align 8, !tbaa !28
  %226 = load ptr, ptr %225, align 8, !tbaa !5
  %227 = getelementptr inbounds %struct.basic_block_def, ptr %226, i64 0, i32 6
  %228 = load ptr, ptr %227, align 8, !tbaa !32
  store ptr %228, ptr @this_basic_block, align 8, !tbaa !5
  %229 = getelementptr inbounds %struct.control_flow_graph, ptr %225, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !34
  %231 = icmp eq ptr %228, %230
  br i1 %231, label %324, label %232

232:                                              ; preds = %222, %314
  %233 = phi ptr [ %317, %314 ], [ %228, %222 ]
  %234 = phi ptr [ %238, %314 ], [ %55, %222 ]
  %235 = tail call zeroext i8 @optimize_bb_for_speed_p(ptr noundef %233) #25
  store i8 %235, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  store i32 0, ptr @last_call_luid, align 4, !tbaa !20
  store i32 -1, ptr @mem_last_set, align 4, !tbaa !20
  %236 = load i32, ptr @label_tick, align 4, !tbaa !20
  %237 = add nsw i32 %236, 1
  store i32 %237, ptr @label_tick, align 4, !tbaa !20
  %238 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %239 = load ptr, ptr %238, align 8, !tbaa !48
  %240 = icmp eq ptr %239, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %232
  %242 = load i32, ptr %239, align 8, !tbaa !49
  %243 = icmp eq i32 %242, 1
  br i1 %243, label %244, label %249

244:                                              ; preds = %241
  %245 = getelementptr inbounds %struct.VEC_edge_base, ptr %239, i64 0, i32 2
  %246 = load ptr, ptr %245, align 8, !tbaa !5
  %247 = load ptr, ptr %246, align 8, !tbaa !51
  %248 = icmp eq ptr %247, %234
  br i1 %248, label %250, label %249

249:                                              ; preds = %244, %241, %232
  store i32 %237, ptr @label_tick_ebb_start, align 4, !tbaa !20
  br label %250

250:                                              ; preds = %249, %244
  %251 = getelementptr inbounds %struct.basic_block_def, ptr %238, i64 0, i32 7
  %252 = load ptr, ptr %251, align 8, !tbaa !16
  %253 = load ptr, ptr %252, align 8, !tbaa !16
  %254 = icmp eq ptr %253, null
  br i1 %254, label %314, label %255

255:                                              ; preds = %250, %308
  %256 = phi ptr [ %310, %308 ], [ %253, %250 ]
  %257 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %258 = getelementptr inbounds %struct.basic_block_def, ptr %257, i64 0, i32 7
  %259 = load ptr, ptr %258, align 8, !tbaa !16
  %260 = getelementptr inbounds %struct.rtl_bb_info, ptr %259, i64 0, i32 1
  %261 = load ptr, ptr %260, align 8, !tbaa !53
  %262 = getelementptr inbounds %struct.rtx_def, ptr %261, i64 0, i32 1, i32 0, i32 0, i64 2
  %263 = load ptr, ptr %262, align 8, !tbaa !16
  %264 = icmp eq ptr %256, %263
  br i1 %264, label %314, label %265

265:                                              ; preds = %255
  %266 = load i32, ptr %256, align 8
  %267 = and i32 %266, 65535
  %268 = add nsw i32 %267, -7
  %269 = icmp ult i32 %268, 4
  br i1 %269, label %270, label %308

270:                                              ; preds = %265
  %271 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1
  %272 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1, i32 0, i32 1
  %273 = load ptr, ptr %272, align 8, !tbaa !16
  %274 = icmp eq ptr %273, null
  br i1 %274, label %308, label %275

275:                                              ; preds = %270
  %276 = load ptr, ptr @df, align 8, !tbaa !5
  %277 = getelementptr inbounds %struct.df, ptr %276, i64 0, i32 10
  %278 = load ptr, ptr %277, align 8, !tbaa !37
  %279 = load i32, ptr %271, align 8, !tbaa !16
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds ptr, ptr %278, i64 %280
  %282 = load ptr, ptr %281, align 8, !tbaa !5
  %283 = getelementptr inbounds %struct.df_insn_info, ptr %282, i64 0, i32 5
  %284 = load i32, ptr %283, align 8, !tbaa !54
  store i32 %284, ptr @subst_low_luid, align 4, !tbaa !20
  store ptr %256, ptr @subst_insn, align 8, !tbaa !5
  %285 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 1
  %286 = load ptr, ptr %285, align 8, !tbaa !16
  tail call void @note_stores(ptr noundef %286, ptr noundef nonnull @set_nonzero_bits_and_sign_copies, ptr noundef nonnull %256) #25
  tail call fastcc void @record_dead_and_set_regs(ptr noundef nonnull %256)
  %287 = load i32, ptr %256, align 8
  %288 = and i32 %287, 65535
  %289 = icmp eq i32 %288, 8
  br i1 %289, label %290, label %298

290:                                              ; preds = %275
  %291 = load ptr, ptr %285, align 8, !tbaa !16
  %292 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %293 = tail call i32 @insn_rtx_cost(ptr noundef %291, i8 noundef zeroext %292) #25
  %294 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  %295 = load i32, ptr %271, align 8, !tbaa !16
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i32, ptr %294, i64 %296
  store i32 %293, ptr %297, align 4, !tbaa !20
  br label %298

298:                                              ; preds = %290, %275
  %299 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %300 = icmp eq ptr %299, null
  br i1 %300, label %308, label %301

301:                                              ; preds = %298
  %302 = load i32, ptr %271, align 8, !tbaa !16
  %303 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  %304 = sext i32 %302 to i64
  %305 = getelementptr inbounds i32, ptr %303, i64 %304
  %306 = load i32, ptr %305, align 4, !tbaa !20
  %307 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %299, ptr noundef nonnull @.str.3, i32 noundef %302, i32 noundef %306)
  br label %308

308:                                              ; preds = %301, %298, %270, %265
  %309 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1, i32 0, i32 0, i64 2
  %310 = load ptr, ptr %309, align 8, !tbaa !16
  %311 = icmp eq ptr %310, null
  br i1 %311, label %312, label %255, !llvm.loop !55

312:                                              ; preds = %308
  %313 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  br label %314

314:                                              ; preds = %255, %312, %250
  %315 = phi ptr [ %238, %250 ], [ %313, %312 ], [ %257, %255 ]
  %316 = getelementptr inbounds %struct.basic_block_def, ptr %315, i64 0, i32 6
  %317 = load ptr, ptr %316, align 8, !tbaa !32
  store ptr %317, ptr @this_basic_block, align 8, !tbaa !5
  %318 = load ptr, ptr @cfun, align 8, !tbaa !5
  %319 = getelementptr inbounds %struct.function, ptr %318, i64 0, i32 1
  %320 = load ptr, ptr %319, align 8, !tbaa !28
  %321 = getelementptr inbounds %struct.control_flow_graph, ptr %320, i64 0, i32 1
  %322 = load ptr, ptr %321, align 8, !tbaa !34
  %323 = icmp eq ptr %317, %322
  br i1 %323, label %324, label %232, !llvm.loop !56

324:                                              ; preds = %314, %222
  store i1 true, ptr @nonzero_sign_valid, align 4
  store i32 1, ptr @label_tick_ebb_start, align 4, !tbaa !20
  store i32 1, ptr @label_tick, align 4, !tbaa !20
  %325 = load ptr, ptr @reg_stat, align 8
  %326 = icmp eq ptr %325, null
  br i1 %326, label %367, label %327

327:                                              ; preds = %324
  %328 = load i32, ptr %325, align 8, !tbaa !25
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %367, label %330

330:                                              ; preds = %327
  %331 = zext i32 %328 to i64
  %332 = and i64 %331, 7
  %333 = icmp ult i32 %328, 8
  br i1 %333, label %357, label %334

334:                                              ; preds = %330
  %335 = and i64 %331, 4294967288
  br label %336

336:                                              ; preds = %336, %334
  %337 = phi i64 [ 0, %334 ], [ %354, %336 ]
  %338 = phi i64 [ 0, %334 ], [ %355, %336 ]
  %339 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %337
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %339, i8 0, i64 43, i1 false)
  %340 = or i64 %337, 1
  %341 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %340
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %341, i8 0, i64 43, i1 false)
  %342 = or i64 %337, 2
  %343 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %342
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %343, i8 0, i64 43, i1 false)
  %344 = or i64 %337, 3
  %345 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %344
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %345, i8 0, i64 43, i1 false)
  %346 = or i64 %337, 4
  %347 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %346
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %347, i8 0, i64 43, i1 false)
  %348 = or i64 %337, 5
  %349 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %348
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %349, i8 0, i64 43, i1 false)
  %350 = or i64 %337, 6
  %351 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %350
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %351, i8 0, i64 43, i1 false)
  %352 = or i64 %337, 7
  %353 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %352
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %353, i8 0, i64 43, i1 false)
  %354 = add nuw nsw i64 %337, 8
  %355 = add i64 %338, 8
  %356 = icmp eq i64 %355, %335
  br i1 %356, label %357, label %336

357:                                              ; preds = %336, %330
  %358 = phi i64 [ 0, %330 ], [ %354, %336 ]
  %359 = icmp eq i64 %332, 0
  br i1 %359, label %367, label %360

360:                                              ; preds = %357, %360
  %361 = phi i64 [ %364, %360 ], [ %358, %357 ]
  %362 = phi i64 [ %365, %360 ], [ 0, %357 ]
  %363 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %325, i64 0, i32 2, i64 %361
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(43) %363, i8 0, i64 43, i1 false)
  %364 = add nuw nsw i64 %361, 1
  %365 = add i64 %362, 1
  %366 = icmp eq i64 %365, %332
  br i1 %366, label %367, label %360, !llvm.loop !57

367:                                              ; preds = %357, %360, %327, %324
  tail call fastcc void @setup_incoming_promotions(ptr noundef nonnull %8)
  %368 = load ptr, ptr @cfun, align 8, !tbaa !5
  %369 = getelementptr inbounds %struct.function, ptr %368, i64 0, i32 1
  %370 = load ptr, ptr %369, align 8, !tbaa !28
  %371 = load ptr, ptr %370, align 8, !tbaa !30
  %372 = getelementptr inbounds %struct.basic_block_def, ptr %371, i64 0, i32 6
  %373 = load ptr, ptr %372, align 8, !tbaa !32
  store ptr %373, ptr @this_basic_block, align 8, !tbaa !5
  %374 = getelementptr inbounds %struct.control_flow_graph, ptr %370, i64 0, i32 1
  %375 = load ptr, ptr %374, align 8, !tbaa !34
  %376 = icmp eq ptr %373, %375
  br i1 %376, label %594, label %387

377:                                              ; preds = %582, %405
  %378 = phi ptr [ %406, %405 ], [ %584, %582 ]
  %379 = getelementptr inbounds %struct.basic_block_def, ptr %378, i64 0, i32 6
  %380 = load ptr, ptr %379, align 8, !tbaa !32
  store ptr %380, ptr @this_basic_block, align 8, !tbaa !5
  %381 = load ptr, ptr @cfun, align 8, !tbaa !5
  %382 = getelementptr inbounds %struct.function, ptr %381, i64 0, i32 1
  %383 = load ptr, ptr %382, align 8, !tbaa !28
  %384 = getelementptr inbounds %struct.control_flow_graph, ptr %383, i64 0, i32 1
  %385 = load ptr, ptr %384, align 8, !tbaa !34
  %386 = icmp eq ptr %380, %385
  br i1 %386, label %592, label %387, !llvm.loop !59

387:                                              ; preds = %367, %377
  %388 = phi ptr [ %380, %377 ], [ %373, %367 ]
  %389 = phi ptr [ %393, %377 ], [ %371, %367 ]
  %390 = call zeroext i8 @optimize_bb_for_speed_p(ptr noundef %388) #25
  store i8 %390, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  store i32 0, ptr @last_call_luid, align 4, !tbaa !20
  store i32 -1, ptr @mem_last_set, align 4, !tbaa !20
  %391 = load i32, ptr @label_tick, align 4, !tbaa !20
  %392 = add nsw i32 %391, 1
  store i32 %392, ptr @label_tick, align 4, !tbaa !20
  %393 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %394 = load ptr, ptr %393, align 8, !tbaa !48
  %395 = icmp eq ptr %394, null
  br i1 %395, label %404, label %396

396:                                              ; preds = %387
  %397 = load i32, ptr %394, align 8, !tbaa !49
  %398 = icmp eq i32 %397, 1
  br i1 %398, label %399, label %404

399:                                              ; preds = %396
  %400 = getelementptr inbounds %struct.VEC_edge_base, ptr %394, i64 0, i32 2
  %401 = load ptr, ptr %400, align 8, !tbaa !5
  %402 = load ptr, ptr %401, align 8, !tbaa !51
  %403 = icmp eq ptr %402, %389
  br i1 %403, label %405, label %404

404:                                              ; preds = %399, %396, %387
  store i32 %392, ptr @label_tick_ebb_start, align 4, !tbaa !20
  br label %405

405:                                              ; preds = %404, %399
  call void @rtl_profile_for_bb(ptr noundef nonnull %393) #25
  %406 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %407 = getelementptr inbounds %struct.basic_block_def, ptr %406, i64 0, i32 7
  %408 = load ptr, ptr %407, align 8, !tbaa !16
  %409 = load ptr, ptr %408, align 8, !tbaa !35
  %410 = getelementptr inbounds %struct.rtl_bb_info, ptr %408, i64 0, i32 1
  %411 = load ptr, ptr %410, align 8, !tbaa !53
  %412 = getelementptr inbounds %struct.rtx_def, ptr %411, i64 0, i32 1, i32 0, i32 0, i64 2
  %413 = load ptr, ptr %412, align 8, !tbaa !16
  %414 = icmp eq ptr %409, %413
  br i1 %414, label %377, label %415

415:                                              ; preds = %405, %582
  %416 = phi ptr [ %583, %582 ], [ %409, %405 ]
  %417 = load i32, ptr %416, align 8
  %418 = and i32 %417, 65535
  %419 = add nsw i32 %418, -11
  %420 = icmp ult i32 %419, -3
  br i1 %420, label %579, label %421

421:                                              ; preds = %415
  %422 = getelementptr inbounds %struct.rtx_def, ptr %416, i64 0, i32 1
  %423 = getelementptr inbounds %struct.rtx_def, ptr %416, i64 1
  %424 = load ptr, ptr %423, align 8, !tbaa !16
  call fastcc void @check_promoted_subreg(ptr noundef nonnull %416, ptr noundef %424)
  call void @note_uses(ptr noundef nonnull %423, ptr noundef nonnull @record_truncated_values, ptr noundef null) #25
  %425 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %426 = load i32, ptr %422, align 8, !tbaa !16
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds ptr, ptr %425, i64 %427
  %429 = load ptr, ptr %428, align 8, !tbaa !16
  %430 = icmp eq ptr %429, null
  br i1 %430, label %574, label %435

431:                                              ; preds = %435
  %432 = getelementptr inbounds %struct.rtx_def, ptr %436, i64 0, i32 1, i32 0, i32 0, i64 1
  %433 = load ptr, ptr %432, align 8, !tbaa !16
  %434 = icmp eq ptr %433, null
  br i1 %434, label %441, label %435, !llvm.loop !60

435:                                              ; preds = %421, %431
  %436 = phi ptr [ %433, %431 ], [ %429, %421 ]
  %437 = getelementptr inbounds %struct.rtx_def, ptr %436, i64 0, i32 1
  %438 = load ptr, ptr %437, align 8, !tbaa !16
  %439 = call fastcc ptr @try_combine(ptr noundef nonnull %416, ptr noundef %438, ptr noundef null, ptr noundef nonnull %2)
  %440 = icmp eq ptr %439, null
  br i1 %440, label %431, label %582

441:                                              ; preds = %431
  %442 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %443 = load i32, ptr %422, align 8, !tbaa !16
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds ptr, ptr %442, i64 %444
  %446 = load ptr, ptr %445, align 8, !tbaa !16
  %447 = icmp eq ptr %446, null
  br i1 %447, label %574, label %448

448:                                              ; preds = %441, %473
  %449 = phi ptr [ %475, %473 ], [ %446, %441 ]
  %450 = getelementptr inbounds %struct.rtx_def, ptr %449, i64 0, i32 1
  %451 = load ptr, ptr %450, align 8, !tbaa !16
  %452 = load i32, ptr %451, align 8
  %453 = and i32 %452, 65535
  %454 = icmp eq i32 %453, 13
  br i1 %454, label %473, label %455

455:                                              ; preds = %448
  %456 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %457 = getelementptr inbounds %struct.rtx_def, ptr %451, i64 0, i32 1
  %458 = load i32, ptr %457, align 8, !tbaa !16
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds ptr, ptr %456, i64 %459
  %461 = load ptr, ptr %460, align 8, !tbaa !16
  %462 = icmp eq ptr %461, null
  br i1 %462, label %473, label %467

463:                                              ; preds = %467
  %464 = getelementptr inbounds %struct.rtx_def, ptr %468, i64 0, i32 1, i32 0, i32 0, i64 1
  %465 = load ptr, ptr %464, align 8, !tbaa !16
  %466 = icmp eq ptr %465, null
  br i1 %466, label %473, label %467, !llvm.loop !61

467:                                              ; preds = %455, %463
  %468 = phi ptr [ %465, %463 ], [ %461, %455 ]
  %469 = getelementptr inbounds %struct.rtx_def, ptr %468, i64 0, i32 1
  %470 = load ptr, ptr %469, align 8, !tbaa !16
  %471 = call fastcc ptr @try_combine(ptr noundef nonnull %416, ptr noundef nonnull %451, ptr noundef %470, ptr noundef nonnull %2)
  %472 = icmp eq ptr %471, null
  br i1 %472, label %463, label %582

473:                                              ; preds = %463, %455, %448
  %474 = getelementptr inbounds %struct.rtx_def, ptr %449, i64 0, i32 1, i32 0, i32 0, i64 1
  %475 = load ptr, ptr %474, align 8, !tbaa !16
  %476 = icmp eq ptr %475, null
  br i1 %476, label %477, label %448, !llvm.loop !62

477:                                              ; preds = %473
  %478 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %479 = load i32, ptr %422, align 8, !tbaa !16
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds ptr, ptr %478, i64 %480
  %482 = load ptr, ptr %481, align 8, !tbaa !16
  %483 = icmp eq ptr %482, null
  br i1 %483, label %574, label %487

484:                                              ; preds = %493
  %485 = load ptr, ptr %490, align 8, !tbaa !16
  %486 = icmp eq ptr %485, null
  br i1 %486, label %504, label %487, !llvm.loop !63

487:                                              ; preds = %477, %484
  %488 = phi ptr [ %485, %484 ], [ %482, %477 ]
  %489 = getelementptr inbounds %struct.rtx_def, ptr %488, i64 0, i32 1
  %490 = getelementptr inbounds %struct.rtx_def, ptr %488, i64 0, i32 1, i32 0, i32 0, i64 1
  %491 = load ptr, ptr %490, align 8, !tbaa !16
  %492 = icmp eq ptr %491, null
  br i1 %492, label %504, label %497

493:                                              ; preds = %497
  %494 = getelementptr inbounds %struct.rtx_def, ptr %498, i64 0, i32 1, i32 0, i32 0, i64 1
  %495 = load ptr, ptr %494, align 8, !tbaa !16
  %496 = icmp eq ptr %495, null
  br i1 %496, label %484, label %497, !llvm.loop !64

497:                                              ; preds = %487, %493
  %498 = phi ptr [ %495, %493 ], [ %491, %487 ]
  %499 = load ptr, ptr %489, align 8, !tbaa !16
  %500 = getelementptr inbounds %struct.rtx_def, ptr %498, i64 0, i32 1
  %501 = load ptr, ptr %500, align 8, !tbaa !16
  %502 = call fastcc ptr @try_combine(ptr noundef nonnull %416, ptr noundef %499, ptr noundef %501, ptr noundef nonnull %2)
  %503 = icmp eq ptr %502, null
  br i1 %503, label %493, label %582

504:                                              ; preds = %487, %484
  %505 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %506 = load i32, ptr %422, align 8, !tbaa !16
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds ptr, ptr %505, i64 %507
  %509 = load ptr, ptr %508, align 8, !tbaa !16
  %510 = icmp eq ptr %509, null
  br i1 %510, label %574, label %511

511:                                              ; preds = %504, %570
  %512 = phi ptr [ %572, %570 ], [ %509, %504 ]
  %513 = getelementptr inbounds %struct.rtx_def, ptr %512, i64 0, i32 1
  %514 = load ptr, ptr %513, align 8, !tbaa !16
  %515 = load i32, ptr %514, align 8
  %516 = and i32 %515, 65535
  %517 = add nsw i32 %516, -7
  %518 = icmp ult i32 %517, 4
  br i1 %518, label %519, label %570

519:                                              ; preds = %511
  %520 = getelementptr inbounds %struct.rtx_def, ptr %514, i64 1
  %521 = load ptr, ptr %520, align 8, !tbaa !16
  %522 = load i32, ptr %521, align 8
  %523 = and i32 %522, 65535
  %524 = icmp eq i32 %523, 23
  br i1 %524, label %528, label %525

525:                                              ; preds = %519
  %526 = call ptr @single_set_2(ptr noundef nonnull %514, ptr noundef nonnull %521) #25
  %527 = icmp eq ptr %526, null
  br i1 %527, label %570, label %528

528:                                              ; preds = %525, %519
  %529 = phi ptr [ %526, %525 ], [ %521, %519 ]
  %530 = call ptr @find_reg_equal_equiv_note(ptr noundef nonnull %514) #25
  %531 = icmp eq ptr %530, null
  br i1 %531, label %570, label %532

532:                                              ; preds = %528
  %533 = getelementptr inbounds %struct.rtx_def, ptr %530, i64 0, i32 1
  %534 = load ptr, ptr %533, align 8, !tbaa !16
  %535 = load i32, ptr %534, align 8
  %536 = and i32 %535, 65535
  %537 = icmp eq i32 %536, 3
  br i1 %537, label %570, label %538

538:                                              ; preds = %532
  %539 = getelementptr inbounds %struct.rtx_def, ptr %529, i64 0, i32 1, i32 0, i32 0, i64 1
  %540 = load ptr, ptr %539, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1)
  store ptr %534, ptr %1, align 8, !tbaa !5
  %541 = call i32 @for_each_rtx(ptr noundef nonnull %1, ptr noundef nonnull @unmentioned_reg_p_1, ptr noundef %540) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1)
  %542 = and i32 %541, 255
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %544, label %570

544:                                              ; preds = %538
  %545 = getelementptr inbounds %struct.rtx_def, ptr %529, i64 0, i32 1
  %546 = load i32, ptr %534, align 8
  %547 = lshr i32 %546, 16
  %548 = and i32 %547, 255
  %549 = icmp eq i32 %548, 0
  %550 = load ptr, ptr %545, align 8, !tbaa !16
  %551 = load i32, ptr %550, align 8
  %552 = lshr i32 %551, 16
  %553 = and i32 %552, 255
  br i1 %549, label %554, label %560

554:                                              ; preds = %544
  %555 = zext i32 %553 to i64
  %556 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %555
  %557 = load i8, ptr %556, align 1, !tbaa !16
  %558 = and i8 %557, -2
  %559 = icmp eq i8 %558, 2
  br i1 %559, label %562, label %570

560:                                              ; preds = %544
  %561 = icmp eq i32 %553, %548
  br i1 %561, label %562, label %570

562:                                              ; preds = %560, %554
  %563 = load ptr, ptr %539, align 8, !tbaa !16
  store ptr %534, ptr %539, align 8, !tbaa !16
  store ptr %514, ptr @i2mod, align 8, !tbaa !5
  %564 = call ptr @copy_rtx(ptr noundef %563) #25
  store ptr %564, ptr @i2mod_old_rhs, align 8, !tbaa !5
  %565 = call ptr @copy_rtx(ptr noundef nonnull %534) #25
  store ptr %565, ptr @i2mod_new_rhs, align 8, !tbaa !5
  %566 = load ptr, ptr @i2mod, align 8, !tbaa !5
  %567 = call fastcc ptr @try_combine(ptr noundef nonnull %416, ptr noundef %566, ptr noundef null, ptr noundef nonnull %2)
  store ptr null, ptr @i2mod, align 8, !tbaa !5
  %568 = icmp eq ptr %567, null
  br i1 %568, label %569, label %582

569:                                              ; preds = %562
  store ptr %563, ptr %539, align 8, !tbaa !16
  br label %570

570:                                              ; preds = %569, %560, %554, %538, %532, %528, %525, %511
  %571 = getelementptr inbounds %struct.rtx_def, ptr %512, i64 0, i32 1, i32 0, i32 0, i64 1
  %572 = load ptr, ptr %571, align 8, !tbaa !16
  %573 = icmp eq ptr %572, null
  br i1 %573, label %574, label %511, !llvm.loop !65

574:                                              ; preds = %570, %504, %477, %441, %421
  %575 = load i32, ptr %416, align 8
  %576 = and i32 %575, 65535
  %577 = icmp eq i32 %576, 13
  br i1 %577, label %579, label %578

578:                                              ; preds = %574
  call fastcc void @record_dead_and_set_regs(ptr noundef nonnull %416)
  br label %579

579:                                              ; preds = %578, %574, %415
  %580 = getelementptr inbounds %struct.rtx_def, ptr %416, i64 0, i32 1, i32 0, i32 0, i64 2
  %581 = load ptr, ptr %580, align 8, !tbaa !16
  br label %582

582:                                              ; preds = %435, %562, %467, %497, %579
  %583 = phi ptr [ %581, %579 ], [ %502, %497 ], [ %471, %467 ], [ %567, %562 ], [ %439, %435 ]
  %584 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %585 = getelementptr inbounds %struct.basic_block_def, ptr %584, i64 0, i32 7
  %586 = load ptr, ptr %585, align 8, !tbaa !16
  %587 = getelementptr inbounds %struct.rtl_bb_info, ptr %586, i64 0, i32 1
  %588 = load ptr, ptr %587, align 8, !tbaa !53
  %589 = getelementptr inbounds %struct.rtx_def, ptr %588, i64 0, i32 1, i32 0, i32 0, i64 2
  %590 = load ptr, ptr %589, align 8, !tbaa !16
  %591 = icmp eq ptr %583, %590
  br i1 %591, label %377, label %415, !llvm.loop !66

592:                                              ; preds = %377
  %593 = load i32, ptr %2, align 4, !tbaa !20
  br label %594

594:                                              ; preds = %592, %367
  %595 = phi i32 [ %593, %592 ], [ 0, %367 ]
  call void @default_rtl_profile() #25
  %596 = call ptr @get_insns() #25
  %597 = icmp eq ptr %596, null
  br i1 %597, label %614, label %598

598:                                              ; preds = %594, %610
  %599 = phi ptr [ %612, %610 ], [ %596, %594 ]
  %600 = load i32, ptr %599, align 8
  %601 = and i32 %600, 65535
  %602 = add nsw i32 %601, -7
  %603 = icmp ult i32 %602, 4
  br i1 %603, label %604, label %610

604:                                              ; preds = %598
  %605 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %606 = getelementptr inbounds %struct.rtx_def, ptr %599, i64 0, i32 1
  %607 = load i32, ptr %606, align 8, !tbaa !16
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds ptr, ptr %605, i64 %608
  call void @free_INSN_LIST_list(ptr noundef %609) #25
  br label %610

610:                                              ; preds = %604, %598
  %611 = getelementptr inbounds %struct.rtx_def, ptr %599, i64 0, i32 1, i32 0, i32 0, i64 2
  %612 = load ptr, ptr %611, align 8, !tbaa !16
  %613 = icmp eq ptr %612, null
  br i1 %613, label %614, label %598, !llvm.loop !67

614:                                              ; preds = %610, %594
  call void @clear_bb_flags() #25
  %615 = call zeroext i8 @purge_all_dead_edges() #25
  %616 = zext i8 %615 to i32
  %617 = or i32 %595, %616
  %618 = load ptr, ptr @cfun, align 8, !tbaa !5
  %619 = getelementptr inbounds %struct.function, ptr %618, i64 0, i32 1
  %620 = load ptr, ptr %619, align 8, !tbaa !28
  %621 = load ptr, ptr %620, align 8, !tbaa !30
  %622 = getelementptr inbounds %struct.basic_block_def, ptr %621, i64 0, i32 6
  %623 = load ptr, ptr %622, align 8, !tbaa !32
  %624 = getelementptr inbounds %struct.control_flow_graph, ptr %620, i64 0, i32 1
  %625 = load ptr, ptr %624, align 8, !tbaa !34
  %626 = icmp eq ptr %623, %625
  br i1 %626, label %676, label %638

627:                                              ; preds = %669
  %628 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %629

629:                                              ; preds = %638, %627
  %630 = phi ptr [ %628, %627 ], [ %639, %638 ]
  %631 = getelementptr inbounds %struct.basic_block_def, ptr %640, i64 0, i32 6
  %632 = load ptr, ptr %631, align 8, !tbaa !32
  %633 = getelementptr inbounds %struct.function, ptr %630, i64 0, i32 1
  %634 = load ptr, ptr %633, align 8, !tbaa !28
  %635 = getelementptr inbounds %struct.control_flow_graph, ptr %634, i64 0, i32 1
  %636 = load ptr, ptr %635, align 8, !tbaa !34
  %637 = icmp eq ptr %632, %636
  br i1 %637, label %676, label %638, !llvm.loop !68

638:                                              ; preds = %614, %629
  %639 = phi ptr [ %630, %629 ], [ %618, %614 ]
  %640 = phi ptr [ %632, %629 ], [ %623, %614 ]
  %641 = getelementptr inbounds %struct.basic_block_def, ptr %640, i64 0, i32 7
  %642 = load ptr, ptr %641, align 8, !tbaa !16
  %643 = load ptr, ptr %642, align 8, !tbaa !35
  %644 = getelementptr inbounds %struct.rtl_bb_info, ptr %642, i64 0, i32 1
  %645 = load ptr, ptr %644, align 8, !tbaa !53
  %646 = getelementptr inbounds %struct.rtx_def, ptr %645, i64 0, i32 1, i32 0, i32 0, i64 2
  %647 = load ptr, ptr %646, align 8, !tbaa !16
  %648 = icmp eq ptr %643, %647
  br i1 %648, label %629, label %649

649:                                              ; preds = %638, %669
  %650 = phi ptr [ %653, %669 ], [ %643, %638 ]
  %651 = getelementptr inbounds %struct.rtx_def, ptr %650, i64 0, i32 1
  %652 = getelementptr inbounds %struct.rtx_def, ptr %650, i64 0, i32 1, i32 0, i32 0, i64 2
  %653 = load ptr, ptr %652, align 8, !tbaa !16
  %654 = load i32, ptr %650, align 8
  %655 = and i32 %654, 65535
  %656 = add nsw i32 %655, -7
  %657 = icmp ult i32 %656, 4
  br i1 %657, label %658, label %669

658:                                              ; preds = %649
  %659 = call i32 @noop_move_p(ptr noundef nonnull %650) #25
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %669, label %661

661:                                              ; preds = %658
  %662 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %663 = icmp eq ptr %662, null
  br i1 %663, label %667, label %664

664:                                              ; preds = %661
  %665 = load i32, ptr %651, align 8, !tbaa !16
  %666 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %662, ptr noundef nonnull @.str.22, i32 noundef %665)
  br label %667

667:                                              ; preds = %664, %661
  %668 = call ptr @delete_insn_and_edges(ptr noundef nonnull %650) #25
  br label %669

669:                                              ; preds = %667, %658, %649
  %670 = load ptr, ptr %641, align 8, !tbaa !16
  %671 = getelementptr inbounds %struct.rtl_bb_info, ptr %670, i64 0, i32 1
  %672 = load ptr, ptr %671, align 8, !tbaa !53
  %673 = getelementptr inbounds %struct.rtx_def, ptr %672, i64 0, i32 1, i32 0, i32 0, i64 2
  %674 = load ptr, ptr %673, align 8, !tbaa !16
  %675 = icmp eq ptr %653, %674
  br i1 %675, label %627, label %649, !llvm.loop !69

676:                                              ; preds = %629, %614
  %677 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  call void @free(ptr noundef %677)
  %678 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  call void @free(ptr noundef %678)
  %679 = load ptr, ptr @reg_stat, align 8, !tbaa !5
  %680 = icmp eq ptr %679, null
  br i1 %680, label %682, label %681

681:                                              ; preds = %676
  call void @free(ptr noundef nonnull %679)
  br label %682

682:                                              ; preds = %681, %676
  store ptr null, ptr @reg_stat, align 8, !tbaa !5
  %683 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %684 = icmp eq ptr %683, null
  br i1 %684, label %690, label %685

685:                                              ; preds = %682, %685
  %686 = phi ptr [ %687, %685 ], [ %683, %682 ]
  %687 = load ptr, ptr %686, align 8, !tbaa !72
  call void @free(ptr noundef nonnull %686)
  %688 = icmp eq ptr %687, null
  br i1 %688, label %690, label %685, !llvm.loop !74

689:                                              ; preds = %13, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #25
  br label %714

690:                                              ; preds = %685, %682
  store ptr null, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %691 = load i32, ptr @combine_attempts, align 4, !tbaa !20
  %692 = load i32, ptr @total_attempts, align 4, !tbaa !20
  %693 = add nsw i32 %692, %691
  store i32 %693, ptr @total_attempts, align 4, !tbaa !20
  %694 = load i32, ptr @combine_merges, align 4, !tbaa !20
  %695 = load i32, ptr @total_merges, align 4, !tbaa !20
  %696 = add nsw i32 %695, %694
  store i32 %696, ptr @total_merges, align 4, !tbaa !20
  %697 = load i32, ptr @combine_extras, align 4, !tbaa !20
  %698 = load i32, ptr @total_extras, align 4, !tbaa !20
  %699 = add nsw i32 %698, %697
  store i32 %699, ptr @total_extras, align 4, !tbaa !20
  %700 = load i32, ptr @combine_successes, align 4, !tbaa !20
  %701 = load i32, ptr @total_successes, align 4, !tbaa !20
  %702 = add nsw i32 %701, %700
  store i32 %702, ptr @total_successes, align 4, !tbaa !20
  store i1 false, ptr @nonzero_sign_valid, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) @rtl_hooks, ptr noundef nonnull align 8 dereferenceable(40) @general_rtl_hooks, i64 40, i1 false), !tbaa.struct !24
  call void @init_recog() #25
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #25
  %703 = icmp eq i32 %617, 0
  br i1 %703, label %714, label %704

704:                                              ; preds = %690
  %705 = load i8, ptr @timevar_enable, align 1, !tbaa !16
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %708, label %707

707:                                              ; preds = %704
  call void @timevar_push_1(i32 noundef 119) #25
  br label %708

708:                                              ; preds = %707, %704
  %709 = call ptr @get_insns() #25
  call void @rebuild_jump_labels(ptr noundef %709) #25
  %710 = call zeroext i8 @cleanup_cfg(i32 noundef 0) #25
  %711 = load i8, ptr @timevar_enable, align 1, !tbaa !16
  %712 = icmp eq i8 %711, 0
  br i1 %712, label %714, label %713

713:                                              ; preds = %708
  call void @timevar_pop_1(i32 noundef 119) #25
  br label %714

714:                                              ; preds = %689, %708, %713, %690
  call void @regstat_free_n_sets_and_refs() #25
  ret i32 0
}

declare i32 @df_set_flags(i32 noundef) local_unnamed_addr #3

declare void @df_note_add_problem() local_unnamed_addr #3

declare void @df_analyze() local_unnamed_addr #3

declare void @regstat_init_n_sets_and_refs() local_unnamed_addr #3

declare ptr @get_insns() local_unnamed_addr #3

declare i32 @max_reg_num() local_unnamed_addr #3

declare void @timevar_push_1(i32 noundef) local_unnamed_addr #3

declare void @rebuild_jump_labels(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @cleanup_cfg(i32 noundef) local_unnamed_addr #3

declare void @timevar_pop_1(i32 noundef) local_unnamed_addr #3

declare void @regstat_free_n_sets_and_refs() local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #12

declare void @init_recog_no_volatile() local_unnamed_addr #3

declare i32 @get_max_uid() local_unnamed_addr #3

declare ptr @xcalloc(i64 noundef, i64 noundef) local_unnamed_addr #3

declare i32 @mode_for_size(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @setup_incoming_promotions(ptr noundef %0) unnamed_addr #9 {
  %2 = alloca i32, align 4
  %3 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %4 = getelementptr inbounds %struct.tree_decl_non_common, ptr %3, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = icmp eq ptr %5, null
  br i1 %6, label %92, label %7

7:                                                ; preds = %1, %88
  %8 = phi ptr [ %90, %88 ], [ %5, %1 ]
  %9 = getelementptr inbounds %struct.tree_parm_decl, ptr %8, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %2) #25
  %11 = load i32, ptr %10, align 8
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 37
  br i1 %13, label %14, label %88

14:                                               ; preds = %7
  %15 = load ptr, ptr @current_function_decl, align 8, !tbaa !5
  %16 = call ptr @cgraph_local_info(ptr noundef %15) #25
  %17 = getelementptr inbounds %struct.cgraph_local_info, ptr %16, i64 0, i32 2
  %18 = load i8, ptr %17, align 8
  %19 = and i8 %18, 1
  %20 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = load i64, ptr %21, align 8
  %23 = and i64 %22, 65535
  %24 = icmp eq i64 %23, 14
  br i1 %24, label %25, label %29

25:                                               ; preds = %14
  %26 = call i32 @vector_type_mode(ptr noundef nonnull %21) #25
  %27 = load ptr, ptr %20, align 8, !tbaa !16
  %28 = load i64, ptr %27, align 8
  br label %34

29:                                               ; preds = %14
  %30 = getelementptr inbounds %struct.tree_type, ptr %21, i64 0, i32 6
  %31 = load i32, ptr %30, align 4
  %32 = lshr i32 %31, 16
  %33 = and i32 %32, 255
  br label %34

34:                                               ; preds = %29, %25
  %35 = phi i64 [ %28, %25 ], [ %22, %29 ]
  %36 = phi i32 [ %26, %25 ], [ %33, %29 ]
  %37 = getelementptr inbounds %struct.tree_decl_common, ptr %8, i64 0, i32 5
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = load i64, ptr %38, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 14
  br i1 %41, label %42, label %46

42:                                               ; preds = %34
  %43 = call i32 @vector_type_mode(ptr noundef nonnull %38) #25
  %44 = load ptr, ptr %37, align 8, !tbaa !16
  %45 = load i64, ptr %44, align 8
  br label %51

46:                                               ; preds = %34
  %47 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 6
  %48 = load i32, ptr %47, align 4
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 255
  br label %51

51:                                               ; preds = %46, %42
  %52 = phi i64 [ %45, %42 ], [ %39, %46 ]
  %53 = phi ptr [ %44, %42 ], [ %38, %46 ]
  %54 = phi i32 [ %43, %42 ], [ %50, %46 ]
  %55 = trunc i64 %52 to i32
  %56 = lshr i32 %55, 21
  %57 = and i32 %56, 1
  store i32 %57, ptr %2, align 4, !tbaa !20
  %58 = load ptr, ptr @cfun, align 8, !tbaa !5
  %59 = getelementptr inbounds %struct.function, ptr %58, i64 0, i32 6
  %60 = load ptr, ptr %59, align 8, !tbaa !75
  %61 = getelementptr inbounds %struct.tree_common, ptr %60, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !16
  %63 = call i32 @promote_function_mode(ptr noundef nonnull %53, i32 noundef %54, ptr noundef nonnull %2, ptr noundef %62, i32 noundef 0) #25
  %64 = icmp eq i32 %36, %63
  br i1 %64, label %88, label %65

65:                                               ; preds = %51
  %66 = load i32, ptr %10, align 8
  %67 = lshr i32 %66, 16
  %68 = and i32 %67, 255
  %69 = icmp eq i32 %63, %68
  br i1 %69, label %70, label %88

70:                                               ; preds = %65
  %71 = icmp eq i32 %36, %54
  br i1 %71, label %81, label %72

72:                                               ; preds = %70
  %73 = icmp eq i8 %19, 0
  br i1 %73, label %88, label %74

74:                                               ; preds = %72
  %75 = and i64 %35, 2097152
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %74
  store i32 1, ptr %2, align 4, !tbaa !20
  br label %81

78:                                               ; preds = %74
  %79 = load i32, ptr %2, align 4, !tbaa !20
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %88

81:                                               ; preds = %78, %77, %70
  %82 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %83 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %36, ptr noundef %82) #25
  %84 = load i32, ptr %2, align 4, !tbaa !20
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 98, i32 99
  %87 = call ptr @gen_rtx_fmt_e_stat(i32 noundef %86, i32 noundef %63, ptr noundef %83) #25
  call fastcc void @record_value_for_reg(ptr noundef nonnull %10, ptr noundef %0, ptr noundef %87)
  br label %88

88:                                               ; preds = %78, %72, %65, %51, %7, %81
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %2) #25
  %89 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !16
  %91 = icmp eq ptr %90, null
  br i1 %91, label %92, label %7, !llvm.loop !76

92:                                               ; preds = %88, %1
  ret void
}

declare zeroext i8 @optimize_bb_for_speed_p(ptr noundef) local_unnamed_addr #3

declare void @note_stores(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @set_nonzero_bits_and_sign_copies(ptr noundef %0, ptr noundef %1, ptr noundef readonly %2) #9 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %172

7:                                                ; preds = %3
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = icmp ugt i32 %9, 52
  br i1 %10, label %11, label %172

11:                                               ; preds = %7
  %12 = load ptr, ptr @cfun, align 8, !tbaa !5
  %13 = getelementptr inbounds %struct.function, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !28
  %15 = load ptr, ptr %14, align 8, !tbaa !30
  %16 = getelementptr inbounds %struct.basic_block_def, ptr %15, i64 0, i32 6
  %17 = load ptr, ptr %16, align 8, !tbaa !32
  %18 = getelementptr inbounds %struct.basic_block_def, ptr %17, i64 0, i32 9
  %19 = load i32, ptr %18, align 8, !tbaa !77
  %20 = load ptr, ptr @df, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.df, ptr %20, i64 0, i32 1, i64 1
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = getelementptr inbounds %struct.dataflow, ptr %22, i64 0, i32 2
  %24 = load i32, ptr %23, align 8, !tbaa !78
  %25 = icmp ugt i32 %24, %19
  tail call void @llvm.assume(i1 %25)
  %26 = getelementptr inbounds %struct.dataflow, ptr %22, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !80
  %28 = zext i32 %19 to i64
  %29 = getelementptr inbounds ptr, ptr %27, i64 %28
  %30 = load ptr, ptr %29, align 8, !tbaa !5
  %31 = getelementptr inbounds %struct.df_lr_bb_info, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !81
  %33 = tail call i32 @bitmap_bit_p(ptr noundef %32, i32 noundef %9) #25
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %172

35:                                               ; preds = %11
  %36 = load i32, ptr %0, align 8
  %37 = lshr i32 %36, 16
  %38 = and i32 %37, 255
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %39
  %41 = load i8, ptr %40, align 1, !tbaa !16
  %42 = icmp ult i8 %41, 9
  br i1 %42, label %43, label %172

43:                                               ; preds = %35
  %44 = load ptr, ptr @reg_stat, align 8
  %45 = load i32, ptr %8, align 8, !tbaa !16
  %46 = zext i32 %45 to i64
  %47 = icmp eq ptr %1, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = load i32, ptr %1, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 25
  br i1 %51, label %52, label %57

52:                                               ; preds = %48, %43
  %53 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %39
  %54 = load i64, ptr %53, align 8, !tbaa !83
  %55 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 10
  store i64 %54, ptr %55, align 8, !tbaa !84
  %56 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 9
  store i8 1, ptr %56, align 1, !tbaa !86
  br label %172

57:                                               ; preds = %48
  %58 = icmp eq ptr %2, null
  br i1 %58, label %103, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %61 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %62 = load ptr, ptr %61, align 8, !tbaa !16
  %63 = tail call i32 @reg_referenced_p(ptr noundef nonnull %0, ptr noundef %62) #25
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %103, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !16
  %68 = getelementptr inbounds %struct.basic_block_def, ptr %67, i64 0, i32 9
  %69 = load i32, ptr %68, align 8, !tbaa !77
  %70 = load ptr, ptr @df, align 8, !tbaa !5
  %71 = getelementptr inbounds %struct.df, ptr %70, i64 0, i32 1, i64 1
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = getelementptr inbounds %struct.dataflow, ptr %72, i64 0, i32 2
  %74 = load i32, ptr %73, align 8, !tbaa !78
  %75 = icmp ugt i32 %74, %69
  tail call void @llvm.assume(i1 %75)
  %76 = getelementptr inbounds %struct.dataflow, ptr %72, i64 0, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !80
  %78 = zext i32 %69 to i64
  %79 = getelementptr inbounds ptr, ptr %77, i64 %78
  %80 = load ptr, ptr %79, align 8, !tbaa !5
  %81 = getelementptr inbounds %struct.df_lr_bb_info, ptr %80, i64 0, i32 2
  %82 = load ptr, ptr %81, align 8, !tbaa !81
  %83 = load i32, ptr %8, align 8, !tbaa !16
  %84 = tail call i32 @bitmap_bit_p(ptr noundef %82, i32 noundef %83) #25
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %103

86:                                               ; preds = %65
  %87 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %88 = load i32, ptr %60, align 8, !tbaa !16
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds ptr, ptr %87, i64 %89
  %91 = load ptr, ptr %90, align 8, !tbaa !16
  %92 = icmp eq ptr %91, null
  br i1 %92, label %163, label %97

93:                                               ; preds = %97
  %94 = getelementptr inbounds %struct.rtx_def, ptr %98, i64 0, i32 1, i32 0, i32 0, i64 1
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  %96 = icmp eq ptr %95, null
  br i1 %96, label %163, label %97, !llvm.loop !87

97:                                               ; preds = %86, %93
  %98 = phi ptr [ %95, %93 ], [ %91, %86 ]
  %99 = getelementptr inbounds %struct.rtx_def, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = tail call i32 @dead_or_set_p(ptr noundef %100, ptr noundef nonnull %0) #25
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %93, label %103

103:                                              ; preds = %97, %65, %59, %57
  %104 = tail call fastcc ptr @expand_field_assignment(ptr noundef nonnull %1)
  %105 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !16
  %107 = icmp eq ptr %106, %0
  br i1 %107, label %129, label %108

108:                                              ; preds = %103
  %109 = load i32, ptr %106, align 8
  %110 = and i32 %109, 65535
  %111 = icmp eq i32 %110, 39
  br i1 %111, label %112, label %154

112:                                              ; preds = %108
  %113 = lshr i32 %109, 16
  %114 = and i32 %113, 255
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !16
  %118 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %119 = load ptr, ptr %118, align 8, !tbaa !16
  %120 = load i32, ptr %119, align 8
  %121 = lshr i32 %120, 16
  %122 = and i32 %121, 255
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %123
  %125 = load i8, ptr %124, align 1, !tbaa !16
  %126 = icmp ugt i8 %117, %125
  %127 = icmp eq ptr %119, %0
  %128 = and i1 %127, %126
  br i1 %128, label %129, label %154

129:                                              ; preds = %112, %103
  %130 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1, i32 0, i32 0, i64 1
  %131 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 10
  %132 = load i64, ptr %131, align 8, !tbaa !84
  %133 = icmp eq i64 %132, -1
  br i1 %133, label %140, label %134

134:                                              ; preds = %129
  %135 = load ptr, ptr %130, align 8, !tbaa !16
  %136 = load i32, ptr @nonzero_bits_mode, align 4, !tbaa !16
  %137 = tail call i64 @nonzero_bits(ptr noundef %135, i32 noundef %136) #25
  %138 = load i64, ptr %131, align 8, !tbaa !84
  %139 = or i64 %138, %137
  store i64 %139, ptr %131, align 8, !tbaa !84
  br label %140

140:                                              ; preds = %134, %129
  %141 = load ptr, ptr %130, align 8, !tbaa !16
  %142 = load i32, ptr %0, align 8
  %143 = lshr i32 %142, 16
  %144 = and i32 %143, 255
  %145 = tail call i32 @num_sign_bit_copies(ptr noundef %141, i32 noundef %144) #25
  %146 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 9
  %147 = load i8, ptr %146, align 1, !tbaa !86
  %148 = icmp eq i8 %147, 0
  %149 = zext i8 %147 to i32
  %150 = icmp ult i32 %145, %149
  %151 = select i1 %148, i1 true, i1 %150
  br i1 %151, label %152, label %172

152:                                              ; preds = %140
  %153 = trunc i32 %145 to i8
  store i8 %153, ptr %146, align 1, !tbaa !86
  br label %172

154:                                              ; preds = %112, %108
  %155 = load i32, ptr %0, align 8
  %156 = lshr i32 %155, 16
  %157 = and i32 %156, 255
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %158
  %160 = load i64, ptr %159, align 8, !tbaa !83
  %161 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 10
  store i64 %160, ptr %161, align 8, !tbaa !84
  %162 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 9
  store i8 1, ptr %162, align 1, !tbaa !86
  br label %172

163:                                              ; preds = %93, %86
  %164 = load i32, ptr %0, align 8
  %165 = lshr i32 %164, 16
  %166 = and i32 %165, 255
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %167
  %169 = load i64, ptr %168, align 8, !tbaa !83
  %170 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 10
  store i64 %169, ptr %170, align 8, !tbaa !84
  %171 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %44, i64 0, i32 2, i64 %46, i32 9
  store i8 1, ptr %171, align 1, !tbaa !86
  br label %172

172:                                              ; preds = %163, %52, %3, %7, %11, %35, %154, %140, %152
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @record_dead_and_set_regs(ptr noundef %0) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %3 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %4 = load ptr, ptr %3, align 8, !tbaa !16
  %5 = icmp eq ptr %4, null
  br i1 %5, label %73, label %6

6:                                                ; preds = %1, %69
  %7 = phi ptr [ %71, %69 ], [ %4, %1 ]
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 16711680
  switch i32 %9, label %69 [
    i32 65536, label %10
    i32 131072, label %66
  ]

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 37
  br i1 %15, label %16, label %69

16:                                               ; preds = %10
  %17 = getelementptr i8, ptr %12, i64 8
  %18 = load i32, ptr %17, align 8, !tbaa !16
  %19 = icmp ult i32 %18, 53
  br i1 %19, label %20, label %28

20:                                               ; preds = %16
  %21 = lshr i32 %13, 16
  %22 = and i32 %21, 255
  %23 = zext i32 %18 to i64
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %23, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !16
  %27 = zext i8 %26 to i32
  br label %28

28:                                               ; preds = %16, %20
  %29 = phi i32 [ %27, %20 ], [ 1, %16 ]
  %30 = add i32 %29, %18
  %31 = icmp ult i32 %18, %30
  br i1 %31, label %32, label %69

32:                                               ; preds = %28
  %33 = zext i32 %18 to i64
  %34 = zext i32 %30 to i64
  %35 = sub nsw i64 %34, %33
  %36 = xor i64 %33, -1
  %37 = add nsw i64 %36, %34
  %38 = and i64 %35, 3
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %32
  %41 = load ptr, ptr @reg_stat, align 8
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ %33, %40 ], [ %46, %42 ]
  %44 = phi i64 [ 0, %40 ], [ %47, %42 ]
  %45 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %43
  store ptr %0, ptr %45, align 8, !tbaa !88
  %46 = add nuw nsw i64 %43, 1
  %47 = add i64 %44, 1
  %48 = icmp eq i64 %47, %38
  br i1 %48, label %49, label %42, !llvm.loop !89

49:                                               ; preds = %42, %32
  %50 = phi i64 [ %33, %32 ], [ %46, %42 ]
  %51 = icmp ult i64 %37, 3
  br i1 %51, label %69, label %52

52:                                               ; preds = %49
  %53 = load ptr, ptr @reg_stat, align 8
  %54 = load ptr, ptr @reg_stat, align 8
  br label %55

55:                                               ; preds = %55, %52
  %56 = phi i64 [ %50, %52 ], [ %64, %55 ]
  %57 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %53, i64 0, i32 2, i64 %56
  store ptr %0, ptr %57, align 8, !tbaa !88
  %58 = add nuw nsw i64 %56, 1
  %59 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %53, i64 0, i32 2, i64 %58
  store ptr %0, ptr %59, align 8, !tbaa !88
  %60 = add nuw nsw i64 %56, 2
  %61 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %54, i64 0, i32 2, i64 %60
  store ptr %0, ptr %61, align 8, !tbaa !88
  %62 = add nuw nsw i64 %56, 3
  %63 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %54, i64 0, i32 2, i64 %62
  store ptr %0, ptr %63, align 8, !tbaa !88
  %64 = add nuw nsw i64 %56, 4
  %65 = icmp eq i64 %64, %34
  br i1 %65, label %69, label %55, !llvm.loop !90

66:                                               ; preds = %6
  %67 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  tail call fastcc void @record_value_for_reg(ptr noundef %68, ptr noundef %0, ptr noundef null)
  br label %69

69:                                               ; preds = %49, %55, %28, %6, %10, %66
  %70 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = icmp eq ptr %71, null
  br i1 %72, label %73, label %6, !llvm.loop !91

73:                                               ; preds = %69, %1
  %74 = load i32, ptr %0, align 8
  %75 = and i32 %74, 65535
  %76 = icmp eq i32 %75, 10
  br i1 %76, label %77, label %112

77:                                               ; preds = %73
  %78 = load i64, ptr @regs_invalidated_by_call, align 8, !tbaa !83
  %79 = load ptr, ptr @reg_stat, align 8
  br label %80

80:                                               ; preds = %77, %96
  %81 = phi i64 [ %78, %77 ], [ %97, %96 ]
  %82 = phi i64 [ 0, %77 ], [ %98, %96 ]
  %83 = shl nuw nsw i64 1, %82
  %84 = and i64 %81, %83
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82
  %88 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 8
  store i8 1, ptr %88, align 2, !tbaa !92
  %89 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 1
  store ptr %0, ptr %89, align 8, !tbaa !93
  %90 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 2
  store ptr null, ptr %90, align 8, !tbaa !94
  %91 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 7
  store i8 0, ptr %91, align 1
  %92 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 5
  store i64 0, ptr %92, align 8, !tbaa !95
  %93 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 6
  store i8 0, ptr %93, align 8, !tbaa !96
  store ptr null, ptr %87, align 8, !tbaa !88
  %94 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %79, i64 0, i32 2, i64 %82, i32 12
  store i8 0, ptr %94, align 4
  %95 = load i64, ptr @regs_invalidated_by_call, align 8, !tbaa !83
  br label %96

96:                                               ; preds = %80, %86
  %97 = phi i64 [ %81, %80 ], [ %95, %86 ]
  %98 = add nuw nsw i64 %82, 1
  %99 = icmp eq i64 %98, 53
  br i1 %99, label %100, label %80, !llvm.loop !97

100:                                              ; preds = %96
  %101 = load ptr, ptr @df, align 8, !tbaa !5
  %102 = getelementptr inbounds %struct.df, ptr %101, i64 0, i32 10
  %103 = load ptr, ptr %102, align 8, !tbaa !37
  %104 = load i32, ptr %2, align 8, !tbaa !16
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds ptr, ptr %103, i64 %105
  %107 = load ptr, ptr %106, align 8, !tbaa !5
  %108 = getelementptr inbounds %struct.df_insn_info, ptr %107, i64 0, i32 5
  %109 = load i32, ptr %108, align 8, !tbaa !54
  store i32 %109, ptr @mem_last_set, align 4, !tbaa !20
  store i32 %109, ptr @last_call_luid, align 4, !tbaa !20
  %110 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  tail call void @note_stores(ptr noundef %111, ptr noundef nonnull @record_dead_and_set_regs_1, ptr noundef null) #25
  br label %115

112:                                              ; preds = %73
  %113 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %114 = load ptr, ptr %113, align 8, !tbaa !16
  tail call void @note_stores(ptr noundef %114, ptr noundef nonnull @record_dead_and_set_regs_1, ptr noundef nonnull %0) #25
  br label %115

115:                                              ; preds = %112, %100
  ret void
}

declare i32 @insn_rtx_cost(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @rtl_profile_for_bb(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @check_promoted_subreg(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = load i32, ptr %1, align 8
  %4 = and i32 %3, 65535
  %5 = and i32 %3, 268500991
  %6 = icmp eq i32 %5, 268435495
  br i1 %6, label %7, label %103

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 37
  br i1 %12, label %13, label %103

13:                                               ; preds = %7
  %14 = lshr i32 %3, 16
  %15 = and i32 %14, 255
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = icmp ugt i8 %18, 8
  br i1 %19, label %146, label %20

20:                                               ; preds = %13
  %21 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %23 = load i32, ptr %22, align 8, !tbaa !16
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds ptr, ptr %21, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = icmp eq ptr %26, null
  br i1 %27, label %146, label %28

28:                                               ; preds = %20
  %29 = getelementptr i8, ptr %9, i64 8
  %30 = load i32, ptr %29, align 8, !tbaa !16
  %31 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %16
  br label %32

32:                                               ; preds = %98, %28
  %33 = phi ptr [ %26, %28 ], [ %101, %98 ]
  %34 = phi i32 [ %30, %28 ], [ %99, %98 ]
  %35 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = load i32, ptr %36, align 8
  %38 = and i32 %37, 65535
  %39 = add nsw i32 %38, -7
  %40 = icmp ult i32 %39, 4
  br i1 %40, label %41, label %67

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.rtx_def, ptr %36, i64 1
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = load i32, ptr %43, align 8
  %45 = and i32 %44, 65535
  %46 = icmp eq i32 %45, 23
  br i1 %46, label %50, label %47

47:                                               ; preds = %41
  %48 = tail call ptr @single_set_2(ptr noundef nonnull %36, ptr noundef nonnull %43) #25
  %49 = icmp eq ptr %48, null
  br i1 %49, label %67, label %50

50:                                               ; preds = %47, %41
  %51 = phi ptr [ %48, %47 ], [ %43, %41 ]
  %52 = getelementptr inbounds %struct.rtx_def, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !16
  %54 = load i32, ptr %53, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 37
  br i1 %56, label %57, label %67

57:                                               ; preds = %50
  %58 = getelementptr i8, ptr %53, i64 8
  %59 = load i32, ptr %58, align 8, !tbaa !16
  %60 = icmp eq i32 %59, %34
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = load ptr, ptr %8, align 8, !tbaa !16
  %63 = load i32, ptr %62, align 8
  %64 = xor i32 %63, %54
  %65 = and i32 %64, 16711680
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %61, %57, %50, %47, %32
  %68 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %98, !llvm.loop !98

69:                                               ; preds = %61
  %70 = load ptr, ptr @reg_stat, align 8
  %71 = zext i32 %34 to i64
  %72 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %70, i64 0, i32 2, i64 %71, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !93
  %74 = icmp eq ptr %73, %36
  br i1 %74, label %75, label %84

75:                                               ; preds = %69
  %76 = load i32, ptr %1, align 8
  %77 = and i32 %76, 201326592
  %78 = icmp eq i32 %77, 67108864
  br i1 %78, label %79, label %84

79:                                               ; preds = %75
  %80 = load i64, ptr %31, align 8, !tbaa !83
  %81 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %70, i64 0, i32 2, i64 %71, i32 5
  %82 = load i64, ptr %81, align 8, !tbaa !95
  %83 = and i64 %82, %80
  store i64 %83, ptr %81, align 8, !tbaa !95
  br label %84

84:                                               ; preds = %79, %75, %69
  %85 = getelementptr inbounds %struct.rtx_def, ptr %51, i64 0, i32 1, i32 0, i32 0, i64 1
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = load i32, ptr %86, align 8
  %88 = and i32 %87, 65535
  %89 = icmp eq i32 %88, 37
  br i1 %89, label %90, label %146

90:                                               ; preds = %84
  %91 = getelementptr i8, ptr %86, i64 8
  %92 = load i32, ptr %91, align 8, !tbaa !16
  %93 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %94 = getelementptr inbounds %struct.rtx_def, ptr %36, i64 0, i32 1
  %95 = load i32, ptr %94, align 8, !tbaa !16
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds ptr, ptr %93, i64 %96
  br label %98

98:                                               ; preds = %90, %67
  %99 = phi i32 [ %34, %67 ], [ %92, %90 ]
  %100 = phi ptr [ %68, %67 ], [ %97, %90 ]
  %101 = load ptr, ptr %100, align 8, !tbaa !16
  %102 = icmp eq ptr %101, null
  br i1 %102, label %146, label %32

103:                                              ; preds = %7, %2
  %104 = zext i32 %4 to i64
  %105 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %104
  %106 = load ptr, ptr %105, align 8, !tbaa !5
  %107 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %104
  %108 = load i8, ptr %107, align 1, !tbaa !16
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %146, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  br label %112

112:                                              ; preds = %110, %137
  %113 = phi i64 [ 0, %110 ], [ %138, %137 ]
  %114 = getelementptr inbounds i8, ptr %106, i64 %113
  %115 = load i8, ptr %114, align 1, !tbaa !16
  %116 = sext i8 %115 to i32
  switch i32 %116, label %137 [
    i32 101, label %117
    i32 86, label %120
    i32 69, label %120
  ]

117:                                              ; preds = %112
  %118 = getelementptr inbounds [1 x %union.rtunion_def], ptr %111, i64 0, i64 %113
  %119 = load ptr, ptr %118, align 8, !tbaa !16
  tail call fastcc void @check_promoted_subreg(ptr noundef %0, ptr noundef %119)
  br label %137

120:                                              ; preds = %112, %112
  %121 = getelementptr inbounds [1 x %union.rtunion_def], ptr %111, i64 0, i64 %113
  %122 = load ptr, ptr %121, align 8, !tbaa !16
  %123 = icmp eq ptr %122, null
  br i1 %123, label %137, label %124

124:                                              ; preds = %120
  %125 = load i32, ptr %122, align 8, !tbaa !99
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %137

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %132, %127 ], [ 0, %124 ]
  %129 = phi ptr [ %133, %127 ], [ %122, %124 ]
  %130 = getelementptr inbounds %struct.rtvec_def, ptr %129, i64 0, i32 1, i64 %128
  %131 = load ptr, ptr %130, align 8, !tbaa !5
  tail call fastcc void @check_promoted_subreg(ptr noundef %0, ptr noundef %131)
  %132 = add nuw nsw i64 %128, 1
  %133 = load ptr, ptr %121, align 8, !tbaa !16
  %134 = load i32, ptr %133, align 8, !tbaa !99
  %135 = sext i32 %134 to i64
  %136 = icmp slt i64 %132, %135
  br i1 %136, label %127, label %137, !llvm.loop !101

137:                                              ; preds = %127, %124, %117, %112, %120
  %138 = add nuw nsw i64 %113, 1
  %139 = load i32, ptr %1, align 8
  %140 = and i32 %139, 65535
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %141
  %143 = load i8, ptr %142, align 1, !tbaa !16
  %144 = zext i8 %143 to i64
  %145 = icmp ult i64 %138, %144
  br i1 %145, label %112, label %146, !llvm.loop !102

146:                                              ; preds = %137, %98, %84, %103, %20, %13
  ret void
}

declare void @note_uses(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @record_truncated_values(ptr noundef %0, ptr nocapture readnone %1) #9 {
  %3 = tail call i32 @for_each_rtx(ptr noundef %0, ptr noundef nonnull @record_truncated_value, ptr noundef null) #25
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @try_combine(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3) unnamed_addr #9 {
  %5 = alloca %struct.likely_spilled_retval_info, align 4
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  %16 = alloca ptr, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #25
  store ptr null, ptr %7, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #25
  store ptr null, ptr %8, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #25
  store ptr null, ptr %9, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #25
  store ptr null, ptr %10, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #25
  store ptr null, ptr %11, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #25
  store ptr null, ptr %12, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #25
  store ptr null, ptr %15, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #25
  %20 = tail call fastcc i32 @cant_combine_insn_p(ptr noundef %0), !range !103
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %2737

22:                                               ; preds = %4
  %23 = tail call fastcc i32 @cant_combine_insn_p(ptr noundef %1), !range !103
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %2737

25:                                               ; preds = %22
  %26 = icmp eq ptr %2, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %25
  %28 = tail call fastcc i32 @cant_combine_insn_p(ptr noundef nonnull %2), !range !103
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %2737

30:                                               ; preds = %27, %25
  %31 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %32 = getelementptr inbounds %struct.basic_block_def, ptr %31, i64 0, i32 7
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = getelementptr inbounds %struct.rtl_bb_info, ptr %33, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !53
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #25
  %36 = load i32, ptr %35, align 8
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 8
  br i1 %38, label %39, label %112

39:                                               ; preds = %30
  %40 = getelementptr inbounds %struct.rtx_def, ptr %35, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = icmp ne i32 %43, 24
  %45 = icmp eq ptr %35, %0
  %46 = or i1 %45, %44
  br i1 %46, label %112, label %47

47:                                               ; preds = %39
  %48 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = load i32, ptr %49, align 8
  %51 = and i32 %50, 65535
  %52 = icmp eq i32 %51, 37
  br i1 %52, label %53, label %112

53:                                               ; preds = %47
  %54 = getelementptr i8, ptr %49, i64 8
  %55 = load i32, ptr %54, align 8, !tbaa !16
  %56 = tail call zeroext i8 @ix86_function_value_regno_p(i32 noundef %55) #25
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %112, label %58

58:                                               ; preds = %53
  %59 = load i32, ptr %54, align 8, !tbaa !16
  %60 = zext i32 %59 to i64
  %61 = load i32, ptr %49, align 8
  %62 = lshr i32 %61, 16
  %63 = and i32 %62, 255
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %60, i64 %64
  %66 = load i8, ptr %65, align 1, !tbaa !16
  %67 = zext i8 %66 to i32
  %68 = icmp eq i8 %66, 1
  br i1 %68, label %112, label %69

69:                                               ; preds = %58
  %70 = add nsw i32 %67, -1
  %71 = shl i32 2, %70
  %72 = add i32 %71, -1
  store i32 %59, ptr %5, align 4, !tbaa !104
  %73 = getelementptr inbounds %struct.likely_spilled_retval_info, ptr %5, i64 0, i32 1
  store i32 %67, ptr %73, align 4, !tbaa !106
  %74 = getelementptr inbounds %struct.likely_spilled_retval_info, ptr %5, i64 0, i32 2
  store i32 %72, ptr %74, align 4, !tbaa !107
  %75 = getelementptr inbounds %struct.rtx_def, ptr %35, i64 0, i32 1, i32 0, i32 0, i64 1
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = icmp eq ptr %76, %0
  br i1 %77, label %78, label %80

78:                                               ; preds = %91, %69
  %79 = phi i32 [ %72, %69 ], [ %92, %91 ]
  br label %98

80:                                               ; preds = %69, %91
  %81 = phi i32 [ %92, %91 ], [ %72, %69 ]
  %82 = phi ptr [ %94, %91 ], [ %76, %69 ]
  %83 = load i32, ptr %82, align 8
  %84 = and i32 %83, 65535
  %85 = add nsw i32 %84, -7
  %86 = icmp ult i32 %85, 4
  br i1 %86, label %87, label %91

87:                                               ; preds = %80
  %88 = getelementptr inbounds %struct.rtx_def, ptr %82, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !16
  call void @note_stores(ptr noundef %89, ptr noundef nonnull @likely_spilled_retval_1, ptr noundef nonnull %5) #25
  %90 = load i32, ptr %74, align 4, !tbaa !107
  br label %91

91:                                               ; preds = %87, %80
  %92 = phi i32 [ %81, %80 ], [ %90, %87 ]
  %93 = getelementptr inbounds %struct.rtx_def, ptr %82, i64 0, i32 1, i32 0, i32 0, i64 1
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  %95 = icmp ne i32 %92, 0
  %96 = icmp ne ptr %94, %0
  %97 = select i1 %95, i1 %96, i1 false
  br i1 %97, label %80, label %78, !llvm.loop !108

98:                                               ; preds = %109, %78
  %99 = phi i32 [ %100, %109 ], [ %67, %78 ]
  %100 = add i32 %99, -1
  %101 = shl nuw i32 1, %100
  %102 = and i32 %101, %79
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %98
  %105 = add i32 %100, %59
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %106
  %108 = load i32, ptr %107, align 4, !tbaa !16
  switch i32 %108, label %109 [
    i32 1, label %111
    i32 2, label %111
    i32 3, label %111
    i32 4, label %111
    i32 7, label %111
    i32 5, label %111
    i32 6, label %111
    i32 17, label %111
    i32 14, label %111
    i32 15, label %111
  ]

109:                                              ; preds = %104, %98
  %110 = icmp eq i32 %100, 0
  br i1 %110, label %112, label %98, !llvm.loop !109

111:                                              ; preds = %104, %104, %104, %104, %104, %104, %104, %104, %104, %104
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #25
  br label %2737

112:                                              ; preds = %109, %39, %30, %53, %47, %58
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #25
  %113 = load i32, ptr @combine_attempts, align 4, !tbaa !20
  %114 = add nsw i32 %113, 1
  store i32 %114, ptr @combine_attempts, align 4, !tbaa !20
  store ptr null, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  store i64 0, ptr @newpat_used_regs, align 8, !tbaa !83
  %115 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %116 = icmp eq ptr %115, null
  br i1 %116, label %136, label %117

117:                                              ; preds = %112
  %118 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %119 = and i32 %118, 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %136, label %121

121:                                              ; preds = %117
  br i1 %26, label %130, label %122

122:                                              ; preds = %121
  %123 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %124 = load i32, ptr %123, align 8, !tbaa !16
  %125 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %126 = load i32, ptr %125, align 8, !tbaa !16
  %127 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %128 = load i32, ptr %127, align 8, !tbaa !16
  %129 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %115, ptr noundef nonnull @.str.7, i32 noundef %124, i32 noundef %126, i32 noundef %128)
  br label %138

130:                                              ; preds = %121
  %131 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %132 = load i32, ptr %131, align 8, !tbaa !16
  %133 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %134 = load i32, ptr %133, align 8, !tbaa !16
  %135 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %115, ptr noundef nonnull @.str.8, i32 noundef %132, i32 noundef %134)
  br label %137

136:                                              ; preds = %117, %112
  br i1 %26, label %137, label %138

137:                                              ; preds = %136, %130
  store ptr null, ptr @added_links_insn, align 8, !tbaa !5
  br label %160

138:                                              ; preds = %136, %122
  %139 = load ptr, ptr @df, align 8, !tbaa !5
  %140 = getelementptr inbounds %struct.df, ptr %139, i64 0, i32 10
  %141 = load ptr, ptr %140, align 8, !tbaa !37
  %142 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %143 = load i32, ptr %142, align 8, !tbaa !16
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds ptr, ptr %141, i64 %144
  %146 = load ptr, ptr %145, align 8, !tbaa !5
  %147 = getelementptr inbounds %struct.df_insn_info, ptr %146, i64 0, i32 5
  %148 = load i32, ptr %147, align 8, !tbaa !54
  %149 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %150 = load i32, ptr %149, align 8, !tbaa !16
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds ptr, ptr %141, i64 %151
  %153 = load ptr, ptr %152, align 8, !tbaa !5
  %154 = getelementptr inbounds %struct.df_insn_info, ptr %153, i64 0, i32 5
  %155 = load i32, ptr %154, align 8, !tbaa !54
  %156 = icmp sgt i32 %148, %155
  %157 = select i1 %156, ptr %1, ptr %2
  %158 = select i1 %156, ptr %2, ptr %1
  store ptr null, ptr @added_links_insn, align 8, !tbaa !5
  %159 = icmp eq ptr %157, null
  br i1 %159, label %160, label %595

160:                                              ; preds = %137, %138
  %161 = phi ptr [ %1, %137 ], [ %158, %138 ]
  %162 = load i32, ptr %0, align 8
  %163 = and i32 %162, 65535
  %164 = icmp eq i32 %163, 8
  br i1 %164, label %165, label %289

165:                                              ; preds = %160
  %166 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %167 = load ptr, ptr %166, align 8, !tbaa !16
  %168 = load i32, ptr %167, align 8
  %169 = and i32 %168, 65535
  %170 = icmp eq i32 %169, 23
  br i1 %170, label %171, label %289

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.rtx_def, ptr %167, i64 0, i32 1, i32 0, i32 0, i64 1
  %173 = load ptr, ptr %172, align 8, !tbaa !16
  %174 = load i32, ptr %173, align 8
  %175 = and i32 %174, 65535
  %176 = icmp eq i32 %175, 37
  br i1 %176, label %177, label %289

177:                                              ; preds = %171
  %178 = getelementptr i8, ptr %173, i64 8
  %179 = load i32, ptr %178, align 8, !tbaa !16
  %180 = icmp ugt i32 %179, 52
  br i1 %180, label %181, label %289

181:                                              ; preds = %177
  %182 = call ptr @find_reg_note(ptr noundef nonnull %0, i32 noundef 1, ptr noundef nonnull %173) #25
  %183 = icmp eq ptr %182, null
  br i1 %183, label %289, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 0, i32 1
  %186 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 1
  %187 = load ptr, ptr %186, align 8, !tbaa !16
  %188 = load i32, ptr %187, align 8
  %189 = and i32 %188, 65535
  %190 = icmp eq i32 %189, 15
  br i1 %190, label %191, label %289

191:                                              ; preds = %184
  %192 = load ptr, ptr %166, align 8, !tbaa !16
  %193 = getelementptr inbounds %struct.rtx_def, ptr %192, i64 0, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !16
  %195 = call i32 @side_effects_p(ptr noundef %194) #25
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %289

197:                                              ; preds = %191
  %198 = load ptr, ptr %166, align 8, !tbaa !16
  %199 = getelementptr inbounds %struct.rtx_def, ptr %198, i64 0, i32 1
  %200 = load ptr, ptr %199, align 8, !tbaa !16
  %201 = load i32, ptr %200, align 8
  %202 = trunc i32 %201 to i16
  switch i16 %202, label %203 [
    i16 120, label %289
    i16 40, label %289
  ]

203:                                              ; preds = %197
  %204 = getelementptr inbounds %struct.rtx_def, ptr %198, i64 0, i32 1, i32 0, i32 0, i64 1
  %205 = load ptr, ptr %204, align 8, !tbaa !16
  %206 = call i32 @reg_overlap_mentioned_p(ptr noundef %205, ptr noundef nonnull %200) #25
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %289

208:                                              ; preds = %203
  %209 = call ptr @next_active_insn(ptr noundef nonnull %161) #25
  %210 = icmp eq ptr %209, %0
  br i1 %210, label %211, label %289

211:                                              ; preds = %208
  %212 = load ptr, ptr %186, align 8, !tbaa !16
  %213 = getelementptr inbounds %struct.rtx_def, ptr %212, i64 0, i32 1
  %214 = load ptr, ptr %213, align 8, !tbaa !16
  %215 = load i32, ptr %214, align 8, !tbaa !99
  %216 = icmp sgt i32 %215, 0
  br i1 %216, label %217, label %289

217:                                              ; preds = %211, %235
  %218 = phi i32 [ %236, %235 ], [ %215, %211 ]
  %219 = phi ptr [ %237, %235 ], [ %214, %211 ]
  %220 = phi i64 [ %238, %235 ], [ 0, %211 ]
  %221 = getelementptr inbounds %struct.rtvec_def, ptr %219, i64 0, i32 1, i64 %220
  %222 = load ptr, ptr %221, align 8, !tbaa !5
  %223 = load i32, ptr %222, align 8
  %224 = trunc i32 %223 to i16
  switch i16 %224, label %235 [
    i16 23, label %225
    i16 25, label %225
  ]

225:                                              ; preds = %217, %217
  %226 = load ptr, ptr %166, align 8, !tbaa !16
  %227 = getelementptr inbounds %struct.rtx_def, ptr %226, i64 0, i32 1
  %228 = load ptr, ptr %227, align 8, !tbaa !16
  %229 = getelementptr inbounds %struct.rtx_def, ptr %222, i64 0, i32 1
  %230 = load ptr, ptr %229, align 8, !tbaa !16
  %231 = call i32 @reg_overlap_mentioned_p(ptr noundef %228, ptr noundef %230) #25
  %232 = icmp eq i32 %231, 0
  %233 = load ptr, ptr %213, align 8, !tbaa !16
  %234 = load i32, ptr %233, align 8, !tbaa !99
  br i1 %232, label %235, label %241

235:                                              ; preds = %225, %217
  %236 = phi i32 [ %218, %217 ], [ %234, %225 ]
  %237 = phi ptr [ %219, %217 ], [ %233, %225 ]
  %238 = add nuw nsw i64 %220, 1
  %239 = sext i32 %236 to i64
  %240 = icmp slt i64 %238, %239
  br i1 %240, label %217, label %241, !llvm.loop !111

241:                                              ; preds = %235, %225
  %242 = phi i32 [ %234, %225 ], [ %236, %235 ]
  %243 = phi ptr [ %233, %225 ], [ %237, %235 ]
  %244 = phi i64 [ %220, %225 ], [ %238, %235 ]
  %245 = trunc i64 %244 to i32
  %246 = icmp eq i32 %242, %245
  %247 = icmp sgt i32 %242, 0
  %248 = and i1 %246, %247
  br i1 %248, label %249, label %289

249:                                              ; preds = %241
  %250 = zext i32 %242 to i64
  br label %251

251:                                              ; preds = %249, %264
  %252 = phi i64 [ 0, %249 ], [ %265, %264 ]
  %253 = getelementptr inbounds %struct.rtvec_def, ptr %243, i64 0, i32 1, i64 %252
  %254 = load ptr, ptr %253, align 8, !tbaa !5
  %255 = load i32, ptr %254, align 8
  %256 = trunc i32 %255 to i16
  switch i16 %256, label %264 [
    i16 23, label %257
    i16 25, label %257
  ]

257:                                              ; preds = %251, %251
  %258 = getelementptr inbounds %struct.rtx_def, ptr %254, i64 0, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !16
  %260 = load ptr, ptr %166, align 8, !tbaa !16
  %261 = getelementptr inbounds %struct.rtx_def, ptr %260, i64 0, i32 1, i32 0, i32 0, i64 1
  %262 = load ptr, ptr %261, align 8, !tbaa !16
  %263 = icmp eq ptr %259, %262
  br i1 %263, label %267, label %264

264:                                              ; preds = %251, %257
  %265 = add nuw nsw i64 %252, 1
  %266 = icmp eq i64 %265, %250
  br i1 %266, label %289, label %251, !llvm.loop !112

267:                                              ; preds = %257
  %268 = load i32, ptr @combine_merges, align 4, !tbaa !20
  %269 = add nsw i32 %268, 1
  store i32 %269, ptr @combine_merges, align 4, !tbaa !20
  store ptr %0, ptr @subst_insn, align 8, !tbaa !5
  %270 = load ptr, ptr @df, align 8, !tbaa !5
  %271 = getelementptr inbounds %struct.df, ptr %270, i64 0, i32 10
  %272 = load ptr, ptr %271, align 8, !tbaa !37
  %273 = load i32, ptr %185, align 8, !tbaa !16
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds ptr, ptr %272, i64 %274
  %276 = load ptr, ptr %275, align 8, !tbaa !5
  %277 = getelementptr inbounds %struct.df_insn_info, ptr %276, i64 0, i32 5
  %278 = load i32, ptr %277, align 8, !tbaa !54
  store i32 %278, ptr @subst_low_luid, align 4, !tbaa !20
  %279 = getelementptr inbounds %struct.rtx_def, ptr %260, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !16
  store ptr %280, ptr %10, align 8, !tbaa !5
  store ptr %259, ptr %9, align 8, !tbaa !5
  %281 = call i32 @dead_or_set_p(ptr noundef %161, ptr noundef %259) #25
  %282 = load ptr, ptr %213, align 8, !tbaa !16
  %283 = getelementptr inbounds %struct.rtvec_def, ptr %282, i64 0, i32 1, i64 %252
  %284 = load ptr, ptr %283, align 8, !tbaa !5
  %285 = getelementptr inbounds %struct.rtx_def, ptr %284, i64 0, i32 1
  %286 = load ptr, ptr %166, align 8, !tbaa !16
  %287 = getelementptr inbounds %struct.rtx_def, ptr %286, i64 0, i32 1
  %288 = load ptr, ptr %287, align 8, !tbaa !16
  call fastcc void @do_SUBST(ptr noundef nonnull %285, ptr noundef %288)
  store ptr %212, ptr %6, align 8, !tbaa !5
  br label %939

289:                                              ; preds = %264, %211, %241, %160, %165, %171, %177, %181, %184, %197, %197, %208, %203, %191
  %290 = load i32, ptr %161, align 8
  %291 = and i32 %290, 65535
  %292 = add nsw i32 %291, -7
  %293 = icmp ult i32 %292, 4
  br i1 %293, label %294, label %495

294:                                              ; preds = %289
  %295 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 1
  %296 = load ptr, ptr %295, align 8, !tbaa !16
  %297 = load i32, ptr %296, align 8
  %298 = and i32 %297, 65535
  %299 = icmp eq i32 %298, 23
  br i1 %299, label %303, label %300

300:                                              ; preds = %294
  %301 = call ptr @single_set_2(ptr noundef nonnull %161, ptr noundef nonnull %296) #25
  %302 = icmp eq ptr %301, null
  br i1 %302, label %495, label %303

303:                                              ; preds = %294, %300
  %304 = phi ptr [ %301, %300 ], [ %296, %294 ]
  %305 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1
  %306 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1, i32 0, i32 0, i64 1
  %307 = load ptr, ptr %306, align 8, !tbaa !16
  %308 = load i32, ptr %307, align 8
  %309 = trunc i32 %308 to i16
  switch i16 %309, label %495 [
    i16 30, label %310
    i16 32, label %310
  ]

310:                                              ; preds = %303, %303
  %311 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %312 = load ptr, ptr %311, align 8, !tbaa !16
  %313 = load i32, ptr %312, align 8
  %314 = and i32 %313, 65535
  %315 = icmp eq i32 %314, 23
  br i1 %315, label %316, label %495

316:                                              ; preds = %310
  %317 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1, i32 0, i32 0, i64 1
  %318 = load ptr, ptr %317, align 8, !tbaa !16
  %319 = load i32, ptr %318, align 8
  %320 = trunc i32 %319 to i16
  switch i16 %320, label %495 [
    i16 30, label %321
    i16 32, label %321
  ]

321:                                              ; preds = %316, %316
  %322 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1
  %323 = load ptr, ptr %322, align 8, !tbaa !16
  %324 = load ptr, ptr %305, align 8, !tbaa !16
  %325 = call fastcc zeroext i8 @reg_subword_p(ptr noundef %323, ptr noundef %324), !range !113
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %495, label %327

327:                                              ; preds = %321
  %328 = load i32, ptr %323, align 8
  %329 = trunc i32 %328 to i16
  switch i16 %329, label %347 [
    i16 120, label %330
    i16 40, label %343
  ]

330:                                              ; preds = %327
  %331 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1
  %332 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1, i32 0, i32 0, i64 1
  %333 = load ptr, ptr %332, align 8, !tbaa !16
  %334 = load i32, ptr %333, align 8
  %335 = and i32 %334, 65535
  %336 = icmp eq i32 %335, 30
  br i1 %336, label %337, label %495

337:                                              ; preds = %330
  %338 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1, i32 0, i32 0, i64 2
  %339 = load ptr, ptr %338, align 8, !tbaa !16
  %340 = load i32, ptr %339, align 8
  %341 = and i32 %340, 65535
  %342 = icmp eq i32 %341, 30
  br i1 %342, label %357, label %495

343:                                              ; preds = %327
  %344 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1
  %345 = load ptr, ptr %344, align 8, !tbaa !16
  %346 = load i32, ptr %345, align 8
  br label %347

347:                                              ; preds = %343, %327
  %348 = phi i32 [ %346, %343 ], [ %328, %327 ]
  %349 = phi ptr [ %345, %343 ], [ %323, %327 ]
  %350 = lshr i32 %348, 16
  %351 = and i32 %350, 255
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %352
  %354 = load i8, ptr %353, align 1, !tbaa !16
  %355 = zext i8 %354 to i32
  %356 = shl nuw nsw i32 %355, 3
  br label %366

357:                                              ; preds = %337
  %358 = getelementptr inbounds %struct.rtx_def, ptr %333, i64 0, i32 1
  %359 = load i64, ptr %358, align 8, !tbaa !16
  %360 = trunc i64 %359 to i32
  %361 = getelementptr inbounds %struct.rtx_def, ptr %339, i64 0, i32 1
  %362 = load i64, ptr %361, align 8, !tbaa !16
  %363 = trunc i64 %362 to i32
  %364 = load ptr, ptr %331, align 8, !tbaa !16
  %365 = icmp sgt i32 %363, -1
  br i1 %365, label %366, label %495

366:                                              ; preds = %347, %357
  %367 = phi ptr [ %349, %347 ], [ %364, %357 ]
  %368 = phi i32 [ 0, %347 ], [ %363, %357 ]
  %369 = phi i32 [ %356, %347 ], [ %360, %357 ]
  %370 = call i32 @subreg_lowpart_p(ptr noundef %367) #25
  %371 = icmp eq i32 %370, 0
  %372 = load ptr, ptr %305, align 8, !tbaa !16
  %373 = load i32, ptr %372, align 8
  %374 = lshr i32 %373, 16
  %375 = and i32 %374, 255
  %376 = zext i32 %375 to i64
  br i1 %371, label %377, label %394

377:                                              ; preds = %366
  %378 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %376
  %379 = load i8, ptr %378, align 1, !tbaa !16
  %380 = zext i8 %379 to i32
  %381 = shl nuw nsw i32 %380, 3
  %382 = load i32, ptr %367, align 8
  %383 = lshr i32 %382, 16
  %384 = and i32 %383, 255
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %385
  %387 = load i8, ptr %386, align 1, !tbaa !16
  %388 = zext i8 %387 to i32
  %389 = shl nuw nsw i32 %388, 4
  %390 = icmp eq i32 %381, %389
  br i1 %390, label %391, label %495

391:                                              ; preds = %377
  %392 = shl nuw nsw i32 %388, 3
  %393 = add nuw nsw i32 %392, %368
  br label %394

394:                                              ; preds = %366, %391
  %395 = phi i32 [ %393, %391 ], [ %368, %366 ]
  %396 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %376
  %397 = load i8, ptr %396, align 1, !tbaa !16
  %398 = icmp ult i8 %397, 17
  br i1 %398, label %399, label %495

399:                                              ; preds = %394
  %400 = load ptr, ptr %311, align 8, !tbaa !16
  %401 = getelementptr inbounds %struct.rtx_def, ptr %400, i64 0, i32 1, i32 0, i32 0, i64 1
  %402 = load ptr, ptr %401, align 8, !tbaa !16
  %403 = load ptr, ptr %306, align 8, !tbaa !16
  %404 = load i32, ptr %403, align 8
  %405 = and i32 %404, 65535
  %406 = icmp eq i32 %405, 30
  %407 = getelementptr inbounds %struct.rtx_def, ptr %403, i64 0, i32 1
  %408 = load i64, ptr %407, align 8, !tbaa !16
  br i1 %406, label %409, label %411

409:                                              ; preds = %399
  %410 = ashr i64 %408, 63
  br label %414

411:                                              ; preds = %399
  %412 = getelementptr inbounds %struct.rtx_def, ptr %403, i64 0, i32 1, i32 0, i32 0, i64 1
  %413 = load i64, ptr %412, align 8, !tbaa !16
  br label %414

414:                                              ; preds = %411, %409
  %415 = phi i64 [ %410, %409 ], [ %413, %411 ]
  %416 = load i32, ptr %402, align 8
  %417 = and i32 %416, 65535
  %418 = icmp eq i32 %417, 30
  %419 = getelementptr inbounds %struct.rtx_def, ptr %402, i64 0, i32 1
  %420 = load i64, ptr %419, align 8, !tbaa !16
  br i1 %418, label %421, label %423

421:                                              ; preds = %414
  %422 = ashr i64 %420, 63
  br label %426

423:                                              ; preds = %414
  %424 = getelementptr inbounds %struct.rtx_def, ptr %402, i64 0, i32 1, i32 0, i32 0, i64 1
  %425 = load i64, ptr %424, align 8, !tbaa !16
  br label %426

426:                                              ; preds = %423, %421
  %427 = phi i64 [ %422, %421 ], [ %425, %423 ]
  %428 = icmp slt i32 %369, 64
  br i1 %428, label %429, label %433

429:                                              ; preds = %426
  %430 = zext i32 %369 to i64
  %431 = shl nsw i64 -1, %430
  %432 = xor i64 %431, -1
  br label %440

433:                                              ; preds = %426
  %434 = icmp ult i32 %369, 128
  br i1 %434, label %435, label %440

435:                                              ; preds = %433
  %436 = add nsw i32 %369, -64
  %437 = zext i32 %436 to i64
  %438 = shl nsw i64 -1, %437
  %439 = xor i64 %438, -1
  br label %440

440:                                              ; preds = %433, %435, %429
  %441 = phi i64 [ %432, %429 ], [ -1, %435 ], [ -1, %433 ]
  %442 = phi i64 [ 0, %429 ], [ %439, %435 ], [ -1, %433 ]
  %443 = and i64 %441, %420
  %444 = and i64 %442, %427
  %445 = icmp ugt i32 %395, 63
  br i1 %445, label %446, label %451

446:                                              ; preds = %440
  %447 = add nsw i32 %395, -64
  %448 = zext i32 %447 to i64
  %449 = shl i64 %441, %448
  %450 = shl i64 %443, %448
  br label %465

451:                                              ; preds = %440
  %452 = icmp eq i32 %395, 0
  br i1 %452, label %465, label %453

453:                                              ; preds = %451
  %454 = zext i32 %395 to i64
  %455 = shl i64 %442, %454
  %456 = sub nuw nsw i32 64, %395
  %457 = zext i32 %456 to i64
  %458 = lshr i64 %441, %457
  %459 = or i64 %455, %458
  %460 = shl i64 %441, %454
  %461 = shl i64 %444, %454
  %462 = lshr i64 %443, %457
  %463 = or i64 %461, %462
  %464 = shl i64 %443, %454
  br label %465

465:                                              ; preds = %446, %453, %451
  %466 = phi i64 [ 0, %446 ], [ %464, %453 ], [ %443, %451 ]
  %467 = phi i64 [ 0, %446 ], [ %460, %453 ], [ %441, %451 ]
  %468 = phi i64 [ %450, %446 ], [ %463, %453 ], [ %444, %451 ]
  %469 = phi i64 [ %449, %446 ], [ %459, %453 ], [ %442, %451 ]
  %470 = xor i64 %467, -1
  %471 = and i64 %408, %470
  %472 = or i64 %471, %466
  %473 = xor i64 %469, -1
  %474 = and i64 %415, %473
  %475 = or i64 %474, %468
  %476 = load i32, ptr @combine_merges, align 4, !tbaa !20
  %477 = add nsw i32 %476, 1
  store i32 %477, ptr @combine_merges, align 4, !tbaa !20
  store ptr %0, ptr @subst_insn, align 8, !tbaa !5
  %478 = load ptr, ptr @df, align 8, !tbaa !5
  %479 = getelementptr inbounds %struct.df, ptr %478, i64 0, i32 10
  %480 = load ptr, ptr %479, align 8, !tbaa !37
  %481 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 0, i32 1
  %482 = load i32, ptr %481, align 8, !tbaa !16
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds ptr, ptr %480, i64 %483
  %485 = load ptr, ptr %484, align 8, !tbaa !5
  %486 = getelementptr inbounds %struct.df_insn_info, ptr %485, i64 0, i32 5
  %487 = load i32, ptr %486, align 8, !tbaa !54
  store i32 %487, ptr @subst_low_luid, align 4, !tbaa !20
  store ptr %372, ptr %9, align 8, !tbaa !5
  %488 = call i32 @dead_or_set_p(ptr noundef nonnull %161, ptr noundef nonnull %372) #25
  %489 = load ptr, ptr %305, align 8, !tbaa !16
  %490 = load i32, ptr %489, align 8
  %491 = lshr i32 %490, 16
  %492 = and i32 %491, 255
  %493 = call ptr @immed_double_const(i64 noundef %472, i64 noundef %475, i32 noundef %492) #25
  call fastcc void @do_SUBST(ptr noundef nonnull %306, ptr noundef %493)
  %494 = load ptr, ptr %295, align 8, !tbaa !16
  store ptr %494, ptr %6, align 8, !tbaa !5
  br label %939

495:                                              ; preds = %330, %337, %377, %357, %394, %289, %321, %310, %300, %303, %316
  %496 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 0, i32 1
  %497 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 1
  %498 = load ptr, ptr %497, align 8, !tbaa !16
  %499 = load i32, ptr %498, align 8
  %500 = and i32 %499, 65535
  %501 = icmp eq i32 %500, 15
  br i1 %501, label %502, label %595

502:                                              ; preds = %495
  %503 = getelementptr inbounds %struct.rtx_def, ptr %498, i64 0, i32 1
  %504 = load ptr, ptr %503, align 8, !tbaa !16
  %505 = load i32, ptr %504, align 8, !tbaa !99
  %506 = icmp sgt i32 %505, 1
  br i1 %506, label %507, label %595

507:                                              ; preds = %502
  %508 = getelementptr inbounds %struct.rtvec_def, ptr %504, i64 0, i32 1
  %509 = load ptr, ptr %508, align 8, !tbaa !5
  %510 = load i32, ptr %509, align 8
  %511 = and i32 %510, 65535
  %512 = icmp eq i32 %511, 23
  br i1 %512, label %513, label %595

513:                                              ; preds = %507
  %514 = getelementptr inbounds %struct.rtx_def, ptr %509, i64 0, i32 1
  %515 = load ptr, ptr %514, align 8, !tbaa !16
  %516 = load i32, ptr %515, align 8
  %517 = lshr i32 %516, 16
  %518 = and i32 %517, 255
  %519 = zext i32 %518 to i64
  %520 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %519
  %521 = load i8, ptr %520, align 1, !tbaa !16
  %522 = icmp eq i8 %521, 1
  br i1 %522, label %523, label %595

523:                                              ; preds = %513
  %524 = getelementptr inbounds %struct.rtx_def, ptr %509, i64 0, i32 1, i32 0, i32 0, i64 1
  %525 = load ptr, ptr %524, align 8, !tbaa !16
  %526 = load i32, ptr %525, align 8
  %527 = and i32 %526, 65535
  %528 = icmp eq i32 %527, 48
  br i1 %528, label %529, label %595

529:                                              ; preds = %523
  %530 = getelementptr inbounds %struct.rtx_def, ptr %525, i64 0, i32 1
  %531 = getelementptr inbounds %struct.rtx_def, ptr %525, i64 0, i32 1, i32 0, i32 0, i64 1
  %532 = load ptr, ptr %531, align 8, !tbaa !16
  %533 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %534 = icmp eq ptr %532, %533
  br i1 %534, label %535, label %595

535:                                              ; preds = %529
  %536 = getelementptr inbounds %struct.rtvec_def, ptr %504, i64 1
  %537 = load ptr, ptr %536, align 8, !tbaa !5
  %538 = load i32, ptr %537, align 8
  %539 = and i32 %538, 65535
  %540 = icmp eq i32 %539, 23
  br i1 %540, label %541, label %595

541:                                              ; preds = %535
  %542 = getelementptr inbounds %struct.rtx_def, ptr %537, i64 0, i32 1
  %543 = load ptr, ptr %542, align 8, !tbaa !16
  %544 = load i32, ptr %543, align 8
  %545 = and i32 %544, 65535
  %546 = icmp eq i32 %545, 37
  br i1 %546, label %547, label %595

547:                                              ; preds = %541
  %548 = load ptr, ptr %530, align 8, !tbaa !16
  %549 = getelementptr inbounds %struct.rtx_def, ptr %537, i64 0, i32 1, i32 0, i32 0, i64 1
  %550 = load ptr, ptr %549, align 8, !tbaa !16
  %551 = call i32 @rtx_equal_p(ptr noundef %548, ptr noundef %550) #25
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %595, label %553

553:                                              ; preds = %547
  %554 = load ptr, ptr %497, align 8, !tbaa !16
  %555 = getelementptr inbounds %struct.rtx_def, ptr %554, i64 0, i32 1
  %556 = load ptr, ptr %555, align 8, !tbaa !16
  %557 = load i32, ptr %556, align 8, !tbaa !99
  %558 = zext i32 %557 to i64
  br label %559

559:                                              ; preds = %564, %553
  %560 = phi i64 [ %561, %564 ], [ %558, %553 ]
  %561 = add nsw i64 %560, -1
  %562 = trunc i64 %560 to i32
  %563 = icmp sgt i32 %562, 2
  br i1 %563, label %564, label %570

564:                                              ; preds = %559
  %565 = getelementptr inbounds %struct.rtvec_def, ptr %556, i64 0, i32 1, i64 %561
  %566 = load ptr, ptr %565, align 8, !tbaa !5
  %567 = load i32, ptr %566, align 8
  %568 = and i32 %567, 65535
  %569 = icmp eq i32 %568, 25
  br i1 %569, label %559, label %595, !llvm.loop !114

570:                                              ; preds = %559
  %571 = and i64 %561, 4294967295
  %572 = icmp eq i64 %571, 1
  br i1 %572, label %573, label %595

573:                                              ; preds = %570
  %574 = load i32, ptr %496, align 8, !tbaa !16
  %575 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 0, i32 1, i32 0, i32 1
  %576 = load ptr, ptr %575, align 8, !tbaa !16
  %577 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 0, i32 1, i32 0, i32 2
  %578 = load i32, ptr %577, align 8, !tbaa !16
  %579 = getelementptr inbounds %struct.rtvec_def, ptr %556, i64 1
  %580 = load ptr, ptr %579, align 8, !tbaa !5
  %581 = call ptr @gen_rtx_fmt_iuuBieie_stat(i32 noundef 8, i32 noundef 0, i32 noundef %574, ptr noundef null, ptr noundef nonnull %161, ptr noundef %576, i32 noundef %578, ptr noundef %580, i32 noundef -1, ptr noundef null) #25
  %582 = load ptr, ptr %497, align 8, !tbaa !16
  %583 = getelementptr inbounds %struct.rtx_def, ptr %582, i64 0, i32 1
  %584 = load ptr, ptr %583, align 8, !tbaa !16
  %585 = getelementptr inbounds %struct.rtvec_def, ptr %584, i64 0, i32 1
  %586 = load ptr, ptr %585, align 8, !tbaa !5
  call fastcc void @do_SUBST(ptr noundef nonnull %497, ptr noundef %586)
  %587 = load ptr, ptr %497, align 8, !tbaa !16
  %588 = getelementptr inbounds %struct.rtx_def, ptr %587, i64 0, i32 1, i32 0, i32 0, i64 1
  %589 = load ptr, ptr %588, align 8, !tbaa !16
  %590 = getelementptr inbounds %struct.rtx_def, ptr %589, i64 0, i32 1
  %591 = getelementptr inbounds %struct.rtx_def, ptr %581, i64 1
  %592 = load ptr, ptr %591, align 8, !tbaa !16
  %593 = getelementptr inbounds %struct.rtx_def, ptr %592, i64 0, i32 1
  %594 = load ptr, ptr %593, align 8, !tbaa !16
  call fastcc void @do_SUBST(ptr noundef nonnull %590, ptr noundef %594)
  br label %595

595:                                              ; preds = %564, %138, %570, %573, %547, %541, %535, %529, %523, %513, %507, %502, %495
  %596 = phi ptr [ %161, %573 ], [ %161, %570 ], [ %161, %547 ], [ %161, %541 ], [ %161, %535 ], [ %161, %529 ], [ %161, %523 ], [ %161, %513 ], [ %161, %507 ], [ %161, %502 ], [ %161, %495 ], [ %158, %138 ], [ %161, %564 ]
  %597 = phi ptr [ %581, %573 ], [ null, %570 ], [ null, %547 ], [ null, %541 ], [ null, %535 ], [ null, %529 ], [ null, %523 ], [ null, %513 ], [ null, %507 ], [ null, %502 ], [ null, %495 ], [ %157, %138 ], [ null, %564 ]
  %598 = call fastcc i32 @can_combine_p(ptr noundef %596, ptr noundef %0, ptr noundef null, ptr noundef nonnull %9, ptr noundef nonnull %10)
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %610, label %600

600:                                              ; preds = %595
  %601 = icmp eq ptr %597, null
  br i1 %601, label %602, label %607

602:                                              ; preds = %600
  %603 = load ptr, ptr %9, align 8, !tbaa !5
  %604 = load ptr, ptr %10, align 8, !tbaa !5
  %605 = call i32 @reg_overlap_mentioned_p(ptr noundef %603, ptr noundef %604) #25
  %606 = call i32 @dead_or_set_p(ptr noundef %596, ptr noundef %603) #25
  br label %626

607:                                              ; preds = %600
  %608 = call fastcc i32 @can_combine_p(ptr noundef nonnull %597, ptr noundef %0, ptr noundef %596, ptr noundef nonnull %11, ptr noundef nonnull %12)
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %611

610:                                              ; preds = %607, %595
  call fastcc void @undo_all()
  br label %2737

611:                                              ; preds = %607
  %612 = load ptr, ptr %9, align 8, !tbaa !5
  %613 = load ptr, ptr %10, align 8, !tbaa !5
  %614 = call i32 @reg_overlap_mentioned_p(ptr noundef %612, ptr noundef %613) #25
  %615 = load ptr, ptr %11, align 8, !tbaa !5
  %616 = load ptr, ptr %12, align 8, !tbaa !5
  %617 = call i32 @reg_overlap_mentioned_p(ptr noundef %615, ptr noundef %616) #25
  %618 = icmp ne i32 %617, 0
  %619 = call i32 @reg_overlap_mentioned_p(ptr noundef %612, ptr noundef %616) #25
  %620 = icmp ne i32 %619, 0
  %621 = call i32 @dead_or_set_p(ptr noundef %596, ptr noundef %612) #25
  %622 = call i32 @dead_or_set_p(ptr noundef nonnull %597, ptr noundef %615) #25
  %623 = icmp ne i32 %622, 0
  %624 = call i32 @reg_overlap_mentioned_p(ptr noundef %615, ptr noundef %613) #25
  %625 = icmp eq i32 %624, 0
  br label %626

626:                                              ; preds = %602, %611
  %627 = phi ptr [ %616, %611 ], [ null, %602 ]
  %628 = phi ptr [ %613, %611 ], [ %604, %602 ]
  %629 = phi ptr [ %615, %611 ], [ null, %602 ]
  %630 = phi ptr [ %612, %611 ], [ %603, %602 ]
  %631 = phi i1 [ %623, %611 ], [ false, %602 ]
  %632 = phi i1 [ %618, %611 ], [ false, %602 ]
  %633 = phi i32 [ %614, %611 ], [ %605, %602 ]
  %634 = phi i1 [ %620, %611 ], [ false, %602 ]
  %635 = phi i32 [ %621, %611 ], [ %606, %602 ]
  %636 = phi i1 [ %625, %611 ], [ false, %602 ]
  %637 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %638 = select i1 %634, i1 %636, i1 false
  %639 = zext i1 %638 to i32
  %640 = call fastcc i32 @combinable_i3pat(ptr noundef %0, ptr noundef nonnull %637, ptr noundef %630, ptr noundef %629, i32 noundef %639, ptr noundef nonnull %8), !range !103
  %641 = icmp eq i32 %640, 0
  br i1 %641, label %642, label %643

642:                                              ; preds = %626
  call fastcc void @undo_all()
  br label %2737

643:                                              ; preds = %626
  %644 = load i32, ptr %628, align 8
  %645 = and i32 %644, 65535
  %646 = icmp eq i32 %645, 52
  br i1 %646, label %663, label %647

647:                                              ; preds = %643
  br i1 %601, label %652, label %648

648:                                              ; preds = %647
  %649 = load i32, ptr %627, align 8
  %650 = and i32 %649, 65535
  %651 = icmp eq i32 %650, 52
  br i1 %651, label %663, label %652

652:                                              ; preds = %648, %647
  %653 = load ptr, ptr %637, align 8, !tbaa !16
  %654 = load i32, ptr %653, align 8
  %655 = and i32 %654, 65535
  %656 = icmp eq i32 %655, 23
  br i1 %656, label %657, label %664

657:                                              ; preds = %652
  %658 = getelementptr inbounds %struct.rtx_def, ptr %653, i64 0, i32 1, i32 0, i32 0, i64 1
  %659 = load ptr, ptr %658, align 8, !tbaa !16
  %660 = load i32, ptr %659, align 8
  %661 = and i32 %660, 65535
  %662 = icmp eq i32 %661, 52
  br i1 %662, label %663, label %664

663:                                              ; preds = %657, %648, %643
  br label %664

664:                                              ; preds = %663, %657, %652
  %665 = phi i1 [ true, %663 ], [ false, %657 ], [ false, %652 ]
  %666 = phi i32 [ 1, %663 ], [ 0, %657 ], [ 0, %652 ]
  %667 = call i32 @dead_or_set_p(ptr noundef %0, ptr noundef %630) #25
  %668 = icmp eq i32 %667, 0
  %669 = zext i1 %668 to i32
  br i1 %601, label %683, label %670

670:                                              ; preds = %664
  %671 = call i32 @dead_or_set_p(ptr noundef %0, ptr noundef %629) #25
  br i1 %636, label %680, label %672

672:                                              ; preds = %670
  %673 = icmp eq i32 %671, 0
  br i1 %673, label %674, label %677

674:                                              ; preds = %672
  %675 = call i32 @dead_or_set_p(ptr noundef %596, ptr noundef %629) #25
  %676 = icmp ne i32 %675, 0
  br label %677

677:                                              ; preds = %674, %672
  %678 = phi i1 [ true, %672 ], [ %676, %674 ]
  %679 = zext i1 %678 to i32
  br label %680

680:                                              ; preds = %670, %677
  %681 = phi i32 [ %679, %677 ], [ %671, %670 ]
  %682 = icmp eq i32 %681, 0
  br label %683

683:                                              ; preds = %680, %664
  %684 = phi i1 [ false, %664 ], [ %682, %680 ]
  %685 = zext i1 %684 to i32
  br i1 %668, label %686, label %697

686:                                              ; preds = %683
  %687 = getelementptr inbounds %struct.rtx_def, ptr %596, i64 1
  %688 = load ptr, ptr %687, align 8, !tbaa !16
  %689 = load i32, ptr %688, align 8
  %690 = and i32 %689, 65535
  %691 = icmp eq i32 %690, 15
  br i1 %691, label %692, label %695

692:                                              ; preds = %686
  %693 = call ptr @copy_rtx(ptr noundef nonnull %628) #25
  %694 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %630, ptr noundef %693) #25
  br label %697

695:                                              ; preds = %686
  %696 = call ptr @copy_rtx(ptr noundef nonnull %688) #25
  br label %697

697:                                              ; preds = %692, %695, %683
  %698 = phi ptr [ %694, %692 ], [ %696, %695 ], [ null, %683 ]
  br i1 %684, label %699, label %710

699:                                              ; preds = %697
  %700 = getelementptr inbounds %struct.rtx_def, ptr %597, i64 1
  %701 = load ptr, ptr %700, align 8, !tbaa !16
  %702 = load i32, ptr %701, align 8
  %703 = and i32 %702, 65535
  %704 = icmp eq i32 %703, 15
  br i1 %704, label %705, label %708

705:                                              ; preds = %699
  %706 = call ptr @copy_rtx(ptr noundef %627) #25
  %707 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %629, ptr noundef %706) #25
  br label %710

708:                                              ; preds = %699
  %709 = call ptr @copy_rtx(ptr noundef nonnull %701) #25
  br label %710

710:                                              ; preds = %705, %708, %697
  %711 = phi ptr [ %707, %705 ], [ %709, %708 ], [ null, %697 ]
  %712 = load i32, ptr @combine_merges, align 4, !tbaa !20
  %713 = add nsw i32 %712, 1
  store i32 %713, ptr @combine_merges, align 4, !tbaa !20
  %714 = call i32 @max_reg_num() #25
  store ptr %0, ptr @subst_insn, align 8, !tbaa !5
  %715 = select i1 %601, i1 %668, i1 false
  br i1 %715, label %716, label %793

716:                                              ; preds = %710
  %717 = load ptr, ptr %637, align 8, !tbaa !16
  %718 = load i32, ptr %717, align 8
  %719 = and i32 %718, 65535
  %720 = icmp eq i32 %719, 23
  br i1 %720, label %721, label %793

721:                                              ; preds = %716
  %722 = getelementptr inbounds %struct.rtx_def, ptr %717, i64 0, i32 1, i32 0, i32 0, i64 1
  %723 = load ptr, ptr %722, align 8, !tbaa !16
  %724 = load i32, ptr %723, align 8
  %725 = and i32 %724, 65535
  %726 = icmp eq i32 %725, 48
  br i1 %726, label %727, label %793

727:                                              ; preds = %721
  %728 = getelementptr inbounds %struct.rtx_def, ptr %723, i64 0, i32 1, i32 0, i32 0, i64 1
  %729 = load ptr, ptr %728, align 8, !tbaa !16
  %730 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %731 = icmp eq ptr %729, %730
  br i1 %731, label %732, label %793

732:                                              ; preds = %727
  %733 = getelementptr inbounds %struct.rtx_def, ptr %723, i64 0, i32 1
  %734 = load ptr, ptr %733, align 8, !tbaa !16
  %735 = call i32 @rtx_equal_p(ptr noundef %734, ptr noundef %630) #25
  %736 = icmp eq i32 %735, 0
  br i1 %736, label %793, label %737

737:                                              ; preds = %732
  %738 = load ptr, ptr %637, align 8, !tbaa !16
  store ptr %738, ptr %6, align 8, !tbaa !5
  %739 = getelementptr inbounds %struct.rtx_def, ptr %738, i64 0, i32 1, i32 0, i32 0, i64 1
  %740 = load ptr, ptr %739, align 8, !tbaa !16
  %741 = getelementptr inbounds %struct.rtx_def, ptr %740, i64 0, i32 1
  call fastcc void @do_SUBST(ptr noundef nonnull %741, ptr noundef nonnull %628)
  %742 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %743 = icmp eq ptr %742, null
  br i1 %743, label %744, label %859

744:                                              ; preds = %737
  %745 = load ptr, ptr %6, align 8, !tbaa !5
  %746 = getelementptr inbounds %struct.rtx_def, ptr %745, i64 0, i32 1
  %747 = load ptr, ptr %746, align 8, !tbaa !16
  %748 = call fastcc ptr @find_single_use(ptr noundef %747, ptr noundef nonnull %0, ptr noundef nonnull getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2))
  %749 = icmp eq ptr %748, null
  br i1 %749, label %859, label %750

750:                                              ; preds = %744
  %751 = load ptr, ptr %748, align 8, !tbaa !5
  %752 = load i32, ptr %751, align 8
  %753 = and i32 %752, 65535
  %754 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %755 = call i32 @ix86_cc_mode(i32 noundef %753, ptr noundef nonnull %628, ptr noundef %754) #25
  %756 = load ptr, ptr %6, align 8, !tbaa !5
  %757 = getelementptr inbounds %struct.rtx_def, ptr %756, i64 0, i32 1
  %758 = load ptr, ptr %757, align 8, !tbaa !16
  %759 = load i32, ptr %758, align 8
  %760 = lshr i32 %759, 16
  %761 = and i32 %760, 255
  %762 = icmp eq i32 %755, %761
  br i1 %762, label %859, label %763

763:                                              ; preds = %750
  %764 = call fastcc zeroext i8 @can_change_dest_mode(ptr noundef nonnull %758, i32 noundef %669, i32 noundef %755), !range !113
  %765 = icmp eq i8 %764, 0
  br i1 %765, label %792, label %766

766:                                              ; preds = %763
  %767 = load ptr, ptr %6, align 8, !tbaa !5
  %768 = getelementptr inbounds %struct.rtx_def, ptr %767, i64 0, i32 1
  %769 = load ptr, ptr %768, align 8, !tbaa !16
  %770 = getelementptr i8, ptr %769, i64 8
  %771 = load i32, ptr %770, align 8, !tbaa !16
  %772 = icmp ult i32 %771, 53
  br i1 %772, label %773, label %775

773:                                              ; preds = %766
  %774 = call ptr @gen_rtx_REG(i32 noundef %755, i32 noundef %771) #25
  br label %782

775:                                              ; preds = %766
  %776 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %777 = zext i32 %771 to i64
  %778 = getelementptr inbounds ptr, ptr %776, i64 %777
  call fastcc void @do_SUBST_MODE(ptr noundef nonnull %778, i32 noundef %755)
  %779 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %780 = getelementptr inbounds ptr, ptr %779, i64 %777
  %781 = load ptr, ptr %780, align 8, !tbaa !5
  br label %782

782:                                              ; preds = %775, %773
  %783 = phi ptr [ %774, %773 ], [ %781, %775 ]
  %784 = load ptr, ptr %6, align 8, !tbaa !5
  %785 = getelementptr inbounds %struct.rtx_def, ptr %784, i64 0, i32 1
  call fastcc void @do_SUBST(ptr noundef nonnull %785, ptr noundef %783)
  %786 = load ptr, ptr %748, align 8, !tbaa !5
  %787 = getelementptr inbounds %struct.rtx_def, ptr %786, i64 0, i32 1
  call fastcc void @do_SUBST(ptr noundef nonnull %787, ptr noundef %783)
  %788 = load ptr, ptr %6, align 8, !tbaa !5
  %789 = getelementptr inbounds %struct.rtx_def, ptr %788, i64 0, i32 1, i32 0, i32 0, i64 1
  %790 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %791 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %755, ptr noundef nonnull %628, ptr noundef %790) #25
  call fastcc void @do_SUBST(ptr noundef nonnull %789, ptr noundef %791)
  br label %859

792:                                              ; preds = %763
  store ptr null, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  br label %859

793:                                              ; preds = %732, %727, %721, %716, %710
  %794 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !20
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %820, label %796

796:                                              ; preds = %793
  %797 = load ptr, ptr @df, align 8, !tbaa !5
  %798 = getelementptr inbounds %struct.df, ptr %797, i64 0, i32 10
  %799 = load ptr, ptr %798, align 8, !tbaa !37
  br i1 %601, label %810, label %800

800:                                              ; preds = %796
  %801 = getelementptr inbounds %struct.rtx_def, ptr %597, i64 0, i32 1
  %802 = load i32, ptr %801, align 8, !tbaa !16
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds ptr, ptr %799, i64 %803
  %805 = load ptr, ptr %804, align 8, !tbaa !5
  %806 = getelementptr inbounds %struct.df_insn_info, ptr %805, i64 0, i32 5
  %807 = load i32, ptr %806, align 8, !tbaa !54
  store i32 %807, ptr @subst_low_luid, align 4, !tbaa !20
  %808 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %809 = call fastcc ptr @subst(ptr noundef %627, ptr noundef %808, ptr noundef %808, i32 noundef 0, i32 noundef 0)
  store ptr %809, ptr %12, align 8, !tbaa !5
  br label %820

810:                                              ; preds = %796
  %811 = getelementptr inbounds %struct.rtx_def, ptr %596, i64 0, i32 1
  %812 = load i32, ptr %811, align 8, !tbaa !16
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds ptr, ptr %799, i64 %813
  %815 = load ptr, ptr %814, align 8, !tbaa !5
  %816 = getelementptr inbounds %struct.df_insn_info, ptr %815, i64 0, i32 5
  %817 = load i32, ptr %816, align 8, !tbaa !54
  store i32 %817, ptr @subst_low_luid, align 4, !tbaa !20
  %818 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %819 = call fastcc ptr @subst(ptr noundef nonnull %628, ptr noundef %818, ptr noundef %818, i32 noundef 0, i32 noundef 0)
  store ptr %819, ptr %10, align 8, !tbaa !5
  br label %820

820:                                              ; preds = %793, %810, %800
  %821 = phi ptr [ %627, %793 ], [ %627, %810 ], [ %809, %800 ]
  %822 = phi ptr [ %628, %793 ], [ %819, %810 ], [ %628, %800 ]
  store i32 0, ptr @n_occurrences, align 4, !tbaa !20
  %823 = load ptr, ptr @df, align 8, !tbaa !5
  %824 = getelementptr inbounds %struct.df, ptr %823, i64 0, i32 10
  %825 = load ptr, ptr %824, align 8, !tbaa !37
  %826 = getelementptr inbounds %struct.rtx_def, ptr %596, i64 0, i32 1
  %827 = load i32, ptr %826, align 8, !tbaa !16
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds ptr, ptr %825, i64 %828
  %830 = load ptr, ptr %829, align 8, !tbaa !5
  %831 = getelementptr inbounds %struct.df_insn_info, ptr %830, i64 0, i32 5
  %832 = load i32, ptr %831, align 8, !tbaa !54
  store i32 %832, ptr @subst_low_luid, align 4, !tbaa !20
  %833 = load ptr, ptr %637, align 8, !tbaa !16
  %834 = xor i1 %636, true
  %835 = select i1 %834, i1 %632, i1 false
  %836 = zext i1 %835 to i32
  %837 = call fastcc ptr @subst(ptr noundef %833, ptr noundef %630, ptr noundef %822, i32 noundef 0, i32 noundef %836)
  store ptr %837, ptr %6, align 8, !tbaa !5
  br i1 %601, label %859, label %838

838:                                              ; preds = %820
  %839 = load i32, ptr %837, align 8
  %840 = and i32 %839, 65535
  %841 = icmp eq i32 %840, 25
  br i1 %841, label %859, label %842

842:                                              ; preds = %838
  %843 = call fastcc i32 @combinable_i3pat(ptr noundef null, ptr noundef nonnull %6, ptr noundef %629, ptr noundef null, i32 noundef 0, ptr noundef null), !range !103
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %845, label %846

845:                                              ; preds = %842
  call fastcc void @undo_all()
  br label %2737

846:                                              ; preds = %842
  store i32 0, ptr @n_occurrences, align 4, !tbaa !20
  %847 = load ptr, ptr @df, align 8, !tbaa !5
  %848 = getelementptr inbounds %struct.df, ptr %847, i64 0, i32 10
  %849 = load ptr, ptr %848, align 8, !tbaa !37
  %850 = getelementptr inbounds %struct.rtx_def, ptr %597, i64 0, i32 1
  %851 = load i32, ptr %850, align 8, !tbaa !16
  %852 = sext i32 %851 to i64
  %853 = getelementptr inbounds ptr, ptr %849, i64 %852
  %854 = load ptr, ptr %853, align 8, !tbaa !5
  %855 = getelementptr inbounds %struct.df_insn_info, ptr %854, i64 0, i32 5
  %856 = load i32, ptr %855, align 8, !tbaa !54
  store i32 %856, ptr @subst_low_luid, align 4, !tbaa !20
  %857 = load ptr, ptr %6, align 8, !tbaa !5
  %858 = call fastcc ptr @subst(ptr noundef %857, ptr noundef %629, ptr noundef %821, i32 noundef 0, i32 noundef 0)
  store ptr %858, ptr %6, align 8, !tbaa !5
  br label %859

859:                                              ; preds = %782, %792, %750, %744, %737, %846, %838, %820
  %860 = phi ptr [ %821, %846 ], [ %821, %838 ], [ %821, %820 ], [ %627, %737 ], [ %627, %744 ], [ %627, %750 ], [ %627, %792 ], [ %627, %782 ]
  %861 = phi i32 [ 1, %846 ], [ 1, %838 ], [ 1, %820 ], [ 0, %737 ], [ 0, %744 ], [ 0, %750 ], [ 0, %792 ], [ 0, %782 ]
  %862 = phi i32 [ 1, %846 ], [ 0, %838 ], [ 0, %820 ], [ 0, %737 ], [ 0, %744 ], [ 0, %750 ], [ 0, %792 ], [ 0, %782 ]
  %863 = call i32 @max_reg_num() #25
  %864 = icmp eq i32 %863, %714
  br i1 %864, label %865, label %876

865:                                              ; preds = %859
  %866 = load ptr, ptr %6, align 8, !tbaa !5
  %867 = load i32, ptr %866, align 8
  %868 = trunc i32 %867 to i16
  switch i16 %868, label %877 [
    i16 25, label %876
    i16 23, label %869
  ]

869:                                              ; preds = %865
  %870 = getelementptr inbounds %struct.rtx_def, ptr %866, i64 0, i32 1, i32 0, i32 0, i64 1
  %871 = load ptr, ptr %870, align 8, !tbaa !16
  %872 = load i32, ptr %871, align 8
  %873 = and i32 %872, 65535
  %874 = icmp ne i32 %873, 52
  %875 = or i1 %665, %874
  br i1 %875, label %877, label %876

876:                                              ; preds = %865, %869, %859
  call fastcc void @undo_all()
  br label %2737

877:                                              ; preds = %865, %869
  %878 = select i1 %684, i1 true, i1 %668
  br i1 %878, label %879, label %955

879:                                              ; preds = %877
  %880 = load i32, ptr @combine_extras, align 4, !tbaa !20
  %881 = add nsw i32 %880, 1
  store i32 %881, ptr @combine_extras, align 4, !tbaa !20
  %882 = load i32, ptr %866, align 8
  %883 = and i32 %882, 65535
  %884 = icmp eq i32 %883, 15
  br i1 %884, label %885, label %900

885:                                              ; preds = %879
  %886 = getelementptr inbounds %struct.rtx_def, ptr %866, i64 0, i32 1
  %887 = load ptr, ptr %886, align 8, !tbaa !16
  %888 = load i32, ptr %887, align 8, !tbaa !99
  %889 = add nuw nsw i32 %685, %669
  %890 = add i32 %889, %888
  %891 = call ptr @rtvec_alloc(i32 noundef %890) #25
  %892 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %891) #25
  %893 = getelementptr inbounds %struct.rtx_def, ptr %892, i64 0, i32 1
  %894 = load ptr, ptr %893, align 8, !tbaa !16
  %895 = getelementptr inbounds %struct.rtvec_def, ptr %894, i64 0, i32 1
  %896 = getelementptr inbounds %struct.rtvec_def, ptr %887, i64 0, i32 1
  %897 = load i32, ptr %887, align 8, !tbaa !99
  %898 = sext i32 %897 to i64
  %899 = shl nsw i64 %898, 3
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 8 %895, ptr nonnull align 8 %896, i64 %899, i1 false)
  br label %908

900:                                              ; preds = %879
  %901 = select i1 %684, i32 2, i32 1
  %902 = add nuw nsw i32 %901, %669
  %903 = call ptr @rtvec_alloc(i32 noundef %902) #25
  %904 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %903) #25
  %905 = getelementptr inbounds %struct.rtx_def, ptr %904, i64 0, i32 1
  %906 = load ptr, ptr %905, align 8, !tbaa !16
  %907 = getelementptr inbounds %struct.rtvec_def, ptr %906, i64 0, i32 1
  store ptr %866, ptr %907, align 8, !tbaa !5
  br label %908

908:                                              ; preds = %900, %885
  %909 = phi ptr [ %892, %885 ], [ %904, %900 ]
  %910 = phi i32 [ %890, %885 ], [ %902, %900 ]
  store ptr %909, ptr %6, align 8
  br i1 %684, label %911, label %917

911:                                              ; preds = %908
  %912 = getelementptr inbounds %struct.rtx_def, ptr %909, i64 0, i32 1
  %913 = load ptr, ptr %912, align 8, !tbaa !16
  %914 = add nsw i32 %910, -1
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds %struct.rtvec_def, ptr %913, i64 0, i32 1, i64 %915
  store ptr %711, ptr %916, align 8, !tbaa !5
  br label %917

917:                                              ; preds = %911, %908
  %918 = phi i32 [ %914, %911 ], [ %910, %908 ]
  br i1 %668, label %921, label %919

919:                                              ; preds = %917
  %920 = load ptr, ptr %6, align 8, !tbaa !5
  br label %955

921:                                              ; preds = %917
  br i1 %601, label %922, label %930

922:                                              ; preds = %921
  %923 = load ptr, ptr %6, align 8, !tbaa !5
  %924 = getelementptr inbounds %struct.rtx_def, ptr %923, i64 0, i32 1
  %925 = load ptr, ptr %924, align 8, !tbaa !16
  %926 = add nsw i32 %918, -1
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds %struct.rtvec_def, ptr %925, i64 0, i32 1, i64 %927
  store ptr %698, ptr %928, align 8, !tbaa !5
  %929 = load ptr, ptr %6, align 8, !tbaa !5
  br label %939

930:                                              ; preds = %921
  %931 = call fastcc ptr @subst(ptr noundef %698, ptr noundef %629, ptr noundef %860, i32 noundef 0, i32 noundef 0)
  %932 = load ptr, ptr %6, align 8, !tbaa !5
  %933 = getelementptr inbounds %struct.rtx_def, ptr %932, i64 0, i32 1
  %934 = load ptr, ptr %933, align 8, !tbaa !16
  %935 = add nsw i32 %918, -1
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds %struct.rtvec_def, ptr %934, i64 0, i32 1, i64 %936
  store ptr %931, ptr %937, align 8, !tbaa !5
  %938 = load ptr, ptr %6, align 8, !tbaa !5
  call fastcc void @mark_used_regs_combine(ptr noundef %938)
  br label %957

939:                                              ; preds = %465, %922, %267
  %940 = phi ptr [ %259, %267 ], [ %630, %922 ], [ %372, %465 ]
  %941 = phi ptr [ %212, %267 ], [ %929, %922 ], [ %494, %465 ]
  %942 = phi ptr [ %161, %267 ], [ %596, %922 ], [ %161, %465 ]
  %943 = phi i32 [ 0, %267 ], [ 0, %922 ], [ 1, %465 ]
  %944 = phi i32 [ 0, %267 ], [ %666, %922 ], [ 0, %465 ]
  %945 = phi i32 [ 1, %267 ], [ 0, %922 ], [ 0, %465 ]
  %946 = phi i1 [ false, %267 ], [ %631, %922 ], [ false, %465 ]
  %947 = phi i32 [ %281, %267 ], [ %635, %922 ], [ %488, %465 ]
  %948 = phi i1 [ false, %267 ], [ %634, %922 ], [ false, %465 ]
  %949 = phi i1 [ false, %267 ], [ %632, %922 ], [ false, %465 ]
  %950 = phi i32 [ 0, %267 ], [ %633, %922 ], [ 0, %465 ]
  %951 = phi i32 [ 0, %267 ], [ 1, %922 ], [ 0, %465 ]
  %952 = phi i32 [ 0, %267 ], [ %685, %922 ], [ 0, %465 ]
  %953 = phi i32 [ 0, %267 ], [ %862, %922 ], [ 0, %465 ]
  %954 = phi i32 [ 0, %267 ], [ %861, %922 ], [ 0, %465 ]
  call fastcc void @mark_used_regs_combine(ptr noundef %941)
  br label %1031

955:                                              ; preds = %919, %877
  %956 = phi ptr [ %920, %919 ], [ %866, %877 ]
  call fastcc void @mark_used_regs_combine(ptr noundef %956)
  br i1 %601, label %1031, label %957

957:                                              ; preds = %930, %955
  %958 = phi i32 [ 1, %930 ], [ %669, %955 ]
  %959 = load ptr, ptr %6, align 8, !tbaa !5
  %960 = load i32, ptr %959, align 8
  %961 = and i32 %960, 65535
  %962 = icmp eq i32 %961, 15
  br i1 %962, label %963, label %1031

963:                                              ; preds = %957
  %964 = getelementptr inbounds %struct.rtx_def, ptr %959, i64 0, i32 1
  %965 = load ptr, ptr %964, align 8, !tbaa !16
  %966 = load i32, ptr %965, align 8, !tbaa !99
  %967 = add nsw i32 %966, -1
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds %struct.rtvec_def, ptr %965, i64 0, i32 1, i64 %968
  %970 = load ptr, ptr %969, align 8, !tbaa !5
  %971 = load i32, ptr %970, align 8
  %972 = and i32 %971, 65535
  %973 = icmp eq i32 %972, 25
  br i1 %973, label %974, label %1031

974:                                              ; preds = %963
  %975 = call ptr @rtvec_alloc(i32 noundef %966) #25
  %976 = icmp sgt i32 %966, 0
  br i1 %976, label %977, label %1031

977:                                              ; preds = %974
  %978 = zext i32 %966 to i64
  %979 = and i64 %978, 3
  %980 = icmp ult i32 %966, 4
  br i1 %980, label %1016, label %981

981:                                              ; preds = %977
  %982 = and i64 %978, 4294967292
  br label %983

983:                                              ; preds = %983, %981
  %984 = phi i64 [ 0, %981 ], [ %1013, %983 ]
  %985 = phi i64 [ 0, %981 ], [ %1014, %983 ]
  %986 = load ptr, ptr %6, align 8, !tbaa !5
  %987 = getelementptr inbounds %struct.rtx_def, ptr %986, i64 0, i32 1
  %988 = load ptr, ptr %987, align 8, !tbaa !16
  %989 = getelementptr inbounds %struct.rtvec_def, ptr %988, i64 0, i32 1, i64 %984
  %990 = load ptr, ptr %989, align 8, !tbaa !5
  %991 = getelementptr inbounds %struct.rtvec_def, ptr %975, i64 0, i32 1, i64 %984
  store ptr %990, ptr %991, align 8, !tbaa !5
  %992 = or i64 %984, 1
  %993 = load ptr, ptr %6, align 8, !tbaa !5
  %994 = getelementptr inbounds %struct.rtx_def, ptr %993, i64 0, i32 1
  %995 = load ptr, ptr %994, align 8, !tbaa !16
  %996 = getelementptr inbounds %struct.rtvec_def, ptr %995, i64 0, i32 1, i64 %992
  %997 = load ptr, ptr %996, align 8, !tbaa !5
  %998 = getelementptr inbounds %struct.rtvec_def, ptr %975, i64 0, i32 1, i64 %992
  store ptr %997, ptr %998, align 8, !tbaa !5
  %999 = or i64 %984, 2
  %1000 = load ptr, ptr %6, align 8, !tbaa !5
  %1001 = getelementptr inbounds %struct.rtx_def, ptr %1000, i64 0, i32 1
  %1002 = load ptr, ptr %1001, align 8, !tbaa !16
  %1003 = getelementptr inbounds %struct.rtvec_def, ptr %1002, i64 0, i32 1, i64 %999
  %1004 = load ptr, ptr %1003, align 8, !tbaa !5
  %1005 = getelementptr inbounds %struct.rtvec_def, ptr %975, i64 0, i32 1, i64 %999
  store ptr %1004, ptr %1005, align 8, !tbaa !5
  %1006 = or i64 %984, 3
  %1007 = load ptr, ptr %6, align 8, !tbaa !5
  %1008 = getelementptr inbounds %struct.rtx_def, ptr %1007, i64 0, i32 1
  %1009 = load ptr, ptr %1008, align 8, !tbaa !16
  %1010 = getelementptr inbounds %struct.rtvec_def, ptr %1009, i64 0, i32 1, i64 %1006
  %1011 = load ptr, ptr %1010, align 8, !tbaa !5
  %1012 = getelementptr inbounds %struct.rtvec_def, ptr %975, i64 0, i32 1, i64 %1006
  store ptr %1011, ptr %1012, align 8, !tbaa !5
  %1013 = add nuw nsw i64 %984, 4
  %1014 = add i64 %985, 4
  %1015 = icmp eq i64 %1014, %982
  br i1 %1015, label %1016, label %983, !llvm.loop !115

1016:                                             ; preds = %983, %977
  %1017 = phi i64 [ 0, %977 ], [ %1013, %983 ]
  %1018 = icmp eq i64 %979, 0
  br i1 %1018, label %1031, label %1019

1019:                                             ; preds = %1016, %1019
  %1020 = phi i64 [ %1028, %1019 ], [ %1017, %1016 ]
  %1021 = phi i64 [ %1029, %1019 ], [ 0, %1016 ]
  %1022 = load ptr, ptr %6, align 8, !tbaa !5
  %1023 = getelementptr inbounds %struct.rtx_def, ptr %1022, i64 0, i32 1
  %1024 = load ptr, ptr %1023, align 8, !tbaa !16
  %1025 = getelementptr inbounds %struct.rtvec_def, ptr %1024, i64 0, i32 1, i64 %1020
  %1026 = load ptr, ptr %1025, align 8, !tbaa !5
  %1027 = getelementptr inbounds %struct.rtvec_def, ptr %975, i64 0, i32 1, i64 %1020
  store ptr %1026, ptr %1027, align 8, !tbaa !5
  %1028 = add nuw nsw i64 %1020, 1
  %1029 = add i64 %1021, 1
  %1030 = icmp eq i64 %1029, %979
  br i1 %1030, label %1031, label %1019, !llvm.loop !116

1031:                                             ; preds = %1016, %1019, %974, %939, %963, %957, %955
  %1032 = phi ptr [ %630, %963 ], [ %630, %957 ], [ %630, %955 ], [ %940, %939 ], [ %630, %974 ], [ %630, %1019 ], [ %630, %1016 ]
  %1033 = phi i1 [ true, %963 ], [ true, %957 ], [ false, %955 ], [ false, %939 ], [ true, %974 ], [ true, %1019 ], [ true, %1016 ]
  %1034 = phi ptr [ %597, %963 ], [ %597, %957 ], [ null, %955 ], [ null, %939 ], [ %597, %974 ], [ %597, %1019 ], [ %597, %1016 ]
  %1035 = phi i32 [ %861, %963 ], [ %861, %957 ], [ %861, %955 ], [ %954, %939 ], [ %861, %974 ], [ %861, %1019 ], [ %861, %1016 ]
  %1036 = phi i32 [ %862, %963 ], [ %862, %957 ], [ %862, %955 ], [ %953, %939 ], [ %862, %974 ], [ %862, %1019 ], [ %862, %1016 ]
  %1037 = phi i32 [ %685, %963 ], [ %685, %957 ], [ %685, %955 ], [ %952, %939 ], [ %685, %974 ], [ %685, %1019 ], [ %685, %1016 ]
  %1038 = phi i32 [ %958, %963 ], [ %958, %957 ], [ %669, %955 ], [ %951, %939 ], [ %958, %974 ], [ %958, %1019 ], [ %958, %1016 ]
  %1039 = phi i32 [ %633, %963 ], [ %633, %957 ], [ %633, %955 ], [ %950, %939 ], [ %633, %974 ], [ %633, %1019 ], [ %633, %1016 ]
  %1040 = phi i1 [ %632, %963 ], [ %632, %957 ], [ %632, %955 ], [ %949, %939 ], [ %632, %974 ], [ %632, %1019 ], [ %632, %1016 ]
  %1041 = phi i1 [ %634, %963 ], [ %634, %957 ], [ %634, %955 ], [ %948, %939 ], [ %634, %974 ], [ %634, %1019 ], [ %634, %1016 ]
  %1042 = phi i32 [ %635, %963 ], [ %635, %957 ], [ %635, %955 ], [ %947, %939 ], [ %635, %974 ], [ %635, %1019 ], [ %635, %1016 ]
  %1043 = phi i1 [ %631, %963 ], [ %631, %957 ], [ %631, %955 ], [ %946, %939 ], [ %631, %974 ], [ %631, %1019 ], [ %631, %1016 ]
  %1044 = phi i32 [ 0, %963 ], [ 0, %957 ], [ 0, %955 ], [ %945, %939 ], [ 0, %974 ], [ 0, %1019 ], [ 0, %1016 ]
  %1045 = phi i32 [ %666, %963 ], [ %666, %957 ], [ %666, %955 ], [ %944, %939 ], [ %666, %974 ], [ %666, %1019 ], [ %666, %1016 ]
  %1046 = phi i32 [ 0, %963 ], [ 0, %957 ], [ 0, %955 ], [ %943, %939 ], [ 0, %974 ], [ 0, %1019 ], [ 0, %1016 ]
  %1047 = phi ptr [ %596, %963 ], [ %596, %957 ], [ %596, %955 ], [ %942, %939 ], [ %596, %974 ], [ %596, %1019 ], [ %596, %1016 ]
  %1048 = phi ptr [ null, %963 ], [ null, %957 ], [ null, %955 ], [ null, %939 ], [ %975, %974 ], [ %975, %1019 ], [ %975, %1016 ]
  %1049 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  %1050 = icmp slt i32 %1049, 0
  br i1 %1050, label %1051, label %1903

1051:                                             ; preds = %1031
  %1052 = icmp ne i32 %1038, 0
  %1053 = icmp eq ptr %1034, null
  %1054 = and i1 %1053, %1052
  br i1 %1054, label %1153, label %1055

1055:                                             ; preds = %1051
  %1056 = load ptr, ptr %6, align 8, !tbaa !5
  %1057 = load i32, ptr %1056, align 8
  %1058 = and i32 %1057, 65535
  %1059 = icmp eq i32 %1058, 15
  br i1 %1059, label %1060, label %1153

1060:                                             ; preds = %1055
  %1061 = getelementptr inbounds %struct.rtx_def, ptr %1056, i64 0, i32 1
  %1062 = load ptr, ptr %1061, align 8, !tbaa !16
  %1063 = load i32, ptr %1062, align 8, !tbaa !99
  %1064 = icmp eq i32 %1063, 2
  br i1 %1064, label %1065, label %1153

1065:                                             ; preds = %1060
  %1066 = getelementptr inbounds %struct.rtvec_def, ptr %1062, i64 0, i32 1
  %1067 = load ptr, ptr %1066, align 8, !tbaa !5
  %1068 = load i32, ptr %1067, align 8
  %1069 = and i32 %1068, 65535
  %1070 = icmp eq i32 %1069, 23
  br i1 %1070, label %1071, label %1153

1071:                                             ; preds = %1065
  %1072 = getelementptr inbounds %struct.rtvec_def, ptr %1062, i64 1
  %1073 = load ptr, ptr %1072, align 8, !tbaa !5
  %1074 = load i32, ptr %1073, align 8
  %1075 = and i32 %1074, 65535
  %1076 = icmp eq i32 %1075, 23
  br i1 %1076, label %1077, label %1153

1077:                                             ; preds = %1071
  %1078 = call i32 @asm_noperands(ptr noundef nonnull %1056) #25
  %1079 = icmp slt i32 %1078, 0
  br i1 %1079, label %1080, label %1153

1080:                                             ; preds = %1077
  %1081 = load ptr, ptr %6, align 8, !tbaa !5
  %1082 = getelementptr inbounds %struct.rtx_def, ptr %1081, i64 0, i32 1
  %1083 = load ptr, ptr %1082, align 8, !tbaa !16
  %1084 = getelementptr inbounds %struct.rtvec_def, ptr %1083, i64 0, i32 1
  %1085 = load ptr, ptr %1084, align 8, !tbaa !5
  %1086 = getelementptr inbounds %struct.rtvec_def, ptr %1083, i64 1
  %1087 = load ptr, ptr %1086, align 8, !tbaa !5
  %1088 = getelementptr inbounds %struct.rtx_def, ptr %1087, i64 0, i32 1
  %1089 = load ptr, ptr %1088, align 8, !tbaa !16
  %1090 = load i32, ptr %1089, align 8
  %1091 = and i32 %1090, 65535
  %1092 = icmp eq i32 %1091, 37
  br i1 %1092, label %1093, label %1099

1093:                                             ; preds = %1080
  %1094 = call ptr @find_reg_note(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %1089) #25
  %1095 = icmp eq ptr %1094, null
  br i1 %1095, label %1096, label %1109

1096:                                             ; preds = %1093
  %1097 = load ptr, ptr %1088, align 8, !tbaa !16
  %1098 = load i32, ptr %1097, align 8
  br label %1099

1099:                                             ; preds = %1096, %1080
  %1100 = phi i32 [ %1098, %1096 ], [ %1090, %1080 ]
  %1101 = phi ptr [ %1097, %1096 ], [ %1089, %1080 ]
  %1102 = and i32 %1100, 65535
  %1103 = icmp eq i32 %1102, 39
  br i1 %1103, label %1104, label %1119

1104:                                             ; preds = %1099
  %1105 = getelementptr inbounds %struct.rtx_def, ptr %1101, i64 0, i32 1
  %1106 = load ptr, ptr %1105, align 8, !tbaa !16
  %1107 = call ptr @find_reg_note(ptr noundef %0, i32 noundef 6, ptr noundef %1106) #25
  %1108 = icmp eq ptr %1107, null
  br i1 %1108, label %1119, label %1109

1109:                                             ; preds = %1104, %1093
  %1110 = call zeroext i8 @insn_nothrow_p(ptr noundef %0) #25
  %1111 = icmp eq i8 %1110, 0
  br i1 %1111, label %1119, label %1112

1112:                                             ; preds = %1109
  %1113 = getelementptr inbounds %struct.rtx_def, ptr %1087, i64 0, i32 1, i32 0, i32 0, i64 1
  %1114 = load ptr, ptr %1113, align 8, !tbaa !16
  %1115 = call i32 @side_effects_p(ptr noundef %1114) #25
  %1116 = icmp eq i32 %1115, 0
  br i1 %1116, label %1117, label %1119

1117:                                             ; preds = %1112
  store ptr %1085, ptr %6, align 8, !tbaa !5
  %1118 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  br label %1153

1119:                                             ; preds = %1112, %1109, %1104, %1099
  %1120 = getelementptr inbounds %struct.rtx_def, ptr %1085, i64 0, i32 1
  %1121 = load ptr, ptr %1120, align 8, !tbaa !16
  %1122 = load i32, ptr %1121, align 8
  %1123 = and i32 %1122, 65535
  %1124 = icmp eq i32 %1123, 37
  br i1 %1124, label %1125, label %1131

1125:                                             ; preds = %1119
  %1126 = call ptr @find_reg_note(ptr noundef %0, i32 noundef 6, ptr noundef nonnull %1121) #25
  %1127 = icmp eq ptr %1126, null
  br i1 %1127, label %1128, label %1141

1128:                                             ; preds = %1125
  %1129 = load ptr, ptr %1120, align 8, !tbaa !16
  %1130 = load i32, ptr %1129, align 8
  br label %1131

1131:                                             ; preds = %1128, %1119
  %1132 = phi i32 [ %1130, %1128 ], [ %1122, %1119 ]
  %1133 = phi ptr [ %1129, %1128 ], [ %1121, %1119 ]
  %1134 = and i32 %1132, 65535
  %1135 = icmp eq i32 %1134, 39
  br i1 %1135, label %1136, label %1153

1136:                                             ; preds = %1131
  %1137 = getelementptr inbounds %struct.rtx_def, ptr %1133, i64 0, i32 1
  %1138 = load ptr, ptr %1137, align 8, !tbaa !16
  %1139 = call ptr @find_reg_note(ptr noundef %0, i32 noundef 6, ptr noundef %1138) #25
  %1140 = icmp eq ptr %1139, null
  br i1 %1140, label %1153, label %1141

1141:                                             ; preds = %1136, %1125
  %1142 = call zeroext i8 @insn_nothrow_p(ptr noundef %0) #25
  %1143 = icmp eq i8 %1142, 0
  br i1 %1143, label %1153, label %1144

1144:                                             ; preds = %1141
  %1145 = getelementptr inbounds %struct.rtx_def, ptr %1085, i64 0, i32 1, i32 0, i32 0, i64 1
  %1146 = load ptr, ptr %1145, align 8, !tbaa !16
  %1147 = call i32 @side_effects_p(ptr noundef %1146) #25
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1149, label %1153

1149:                                             ; preds = %1144
  store ptr %1087, ptr %6, align 8, !tbaa !5
  %1150 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  %1151 = icmp sgt i32 %1150, -1
  %1152 = select i1 %1151, i32 1, i32 %1046
  br label %1153

1153:                                             ; preds = %1149, %1117, %1144, %1141, %1136, %1131, %1051, %1077, %1071, %1065, %1060, %1055
  %1154 = phi i32 [ %1046, %1051 ], [ %1046, %1077 ], [ %1046, %1071 ], [ %1046, %1065 ], [ %1046, %1060 ], [ %1046, %1055 ], [ %1046, %1144 ], [ %1046, %1141 ], [ %1046, %1136 ], [ %1046, %1131 ], [ %1046, %1117 ], [ %1152, %1149 ]
  %1155 = phi i32 [ %1049, %1051 ], [ %1049, %1077 ], [ %1049, %1071 ], [ %1049, %1065 ], [ %1049, %1060 ], [ %1049, %1055 ], [ %1049, %1144 ], [ %1049, %1141 ], [ %1049, %1136 ], [ %1049, %1131 ], [ %1118, %1117 ], [ %1150, %1149 ]
  %1156 = icmp slt i32 %1155, 0
  %1157 = select i1 %1033, i1 %1156, i1 false
  br i1 %1157, label %1158, label %1885

1158:                                             ; preds = %1153
  %1159 = load ptr, ptr %6, align 8, !tbaa !5
  %1160 = load i32, ptr %1159, align 8
  %1161 = and i32 %1160, 65535
  %1162 = icmp eq i32 %1161, 23
  br i1 %1162, label %1163, label %1614

1163:                                             ; preds = %1158
  %1164 = call i32 @asm_noperands(ptr noundef nonnull %1159) #25
  %1165 = icmp slt i32 %1164, 0
  %1166 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1165, label %1167, label %1614

1167:                                             ; preds = %1163
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #25
  %1168 = call fastcc ptr @combine_split_insns(ptr noundef %1166, ptr noundef %0)
  store ptr %1168, ptr %17, align 8, !tbaa !5
  %1169 = icmp eq ptr %1168, null
  br i1 %1169, label %1170, label %1249

1170:                                             ; preds = %1167
  %1171 = load ptr, ptr %6, align 8, !tbaa !5
  %1172 = call i32 @reg_overlap_mentioned_p(ptr noundef %1032, ptr noundef %1171) #25
  %1173 = icmp eq i32 %1172, 0
  br i1 %1173, label %1174, label %1237

1174:                                             ; preds = %1170
  %1175 = load ptr, ptr %6, align 8, !tbaa !5
  %1176 = getelementptr inbounds %struct.rtx_def, ptr %1175, i64 0, i32 1
  %1177 = load ptr, ptr %1176, align 8, !tbaa !16
  %1178 = load i32, ptr %1177, align 8
  %1179 = lshr i32 %1178, 16
  %1180 = and i32 %1179, 255
  %1181 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %1032) #25
  %1182 = call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %1175, ptr noundef %1181) #25
  %1183 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %1182) #25
  %1184 = call fastcc ptr @combine_split_insns(ptr noundef %1183, ptr noundef %0)
  store ptr %1184, ptr %17, align 8, !tbaa !5
  %1185 = icmp eq ptr %1184, null
  br i1 %1185, label %1186, label %1233

1186:                                             ; preds = %1174
  %1187 = load i32, ptr %1032, align 8
  %1188 = lshr i32 %1187, 16
  %1189 = and i32 %1188, 255
  %1190 = icmp ne i32 %1180, %1189
  %1191 = icmp ne i32 %1180, 0
  %1192 = and i1 %1191, %1190
  br i1 %1192, label %1193, label %1233

1193:                                             ; preds = %1186
  %1194 = call fastcc zeroext i8 @can_change_dest_mode(ptr noundef nonnull %1032, i32 noundef %1038, i32 noundef %1180), !range !113
  %1195 = icmp eq i8 %1194, 0
  br i1 %1195, label %1233, label %1196

1196:                                             ; preds = %1193
  %1197 = load i32, ptr %1032, align 8
  %1198 = lshr i32 %1197, 16
  %1199 = and i32 %1198, 255
  %1200 = getelementptr i8, ptr %1032, i64 8
  %1201 = load i32, ptr %1200, align 8, !tbaa !16
  %1202 = icmp ult i32 %1201, 53
  br i1 %1202, label %1203, label %1205

1203:                                             ; preds = %1196
  %1204 = call ptr @gen_rtx_REG(i32 noundef %1180, i32 noundef %1201) #25
  br label %1214

1205:                                             ; preds = %1196
  %1206 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %1207 = zext i32 %1201 to i64
  %1208 = getelementptr inbounds ptr, ptr %1206, i64 %1207
  call fastcc void @do_SUBST_MODE(ptr noundef nonnull %1208, i32 noundef %1180)
  %1209 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %1210 = load i32, ptr %1200, align 8, !tbaa !16
  %1211 = zext i32 %1210 to i64
  %1212 = getelementptr inbounds ptr, ptr %1209, i64 %1211
  %1213 = load ptr, ptr %1212, align 8, !tbaa !5
  br label %1214

1214:                                             ; preds = %1205, %1203
  %1215 = phi ptr [ %1204, %1203 ], [ %1213, %1205 ]
  %1216 = load ptr, ptr %6, align 8, !tbaa !5
  %1217 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %1215) #25
  %1218 = call ptr (i32, ...) @gen_rtvec(i32 noundef 2, ptr noundef %1216, ptr noundef %1217) #25
  %1219 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %1218) #25
  %1220 = call fastcc ptr @combine_split_insns(ptr noundef %1219, ptr noundef %0)
  store ptr %1220, ptr %17, align 8, !tbaa !5
  %1221 = icmp eq ptr %1220, null
  br i1 %1221, label %1222, label %1233

1222:                                             ; preds = %1214
  %1223 = load i32, ptr %1200, align 8, !tbaa !16
  %1224 = icmp ugt i32 %1223, 52
  br i1 %1224, label %1225, label %1233

1225:                                             ; preds = %1222
  %1226 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %1227 = zext i32 %1223 to i64
  %1228 = getelementptr inbounds ptr, ptr %1226, i64 %1227
  %1229 = load ptr, ptr %1228, align 8, !tbaa !5
  call void @adjust_reg_mode(ptr noundef %1229, i32 noundef %1199) #25
  %1230 = load ptr, ptr @undobuf, align 8, !tbaa !117
  %1231 = load ptr, ptr %1230, align 8, !tbaa !72
  store ptr %1231, ptr @undobuf, align 8, !tbaa !117
  %1232 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  store ptr %1232, ptr %1230, align 8, !tbaa !72
  store ptr %1230, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %1233

1233:                                             ; preds = %1214, %1222, %1225, %1193, %1186, %1174
  %1234 = phi ptr [ %1220, %1214 ], [ null, %1222 ], [ null, %1225 ], [ null, %1193 ], [ null, %1186 ], [ %1184, %1174 ]
  %1235 = icmp ne ptr %1234, null
  %1236 = zext i1 %1235 to i8
  br label %1237

1237:                                             ; preds = %1233, %1170
  %1238 = phi ptr [ null, %1170 ], [ %1234, %1233 ]
  %1239 = phi i8 [ 0, %1170 ], [ %1236, %1233 ]
  %1240 = icmp eq ptr %1238, null
  %1241 = icmp ne ptr %1048, null
  %1242 = select i1 %1240, i1 %1241, i1 false
  br i1 %1242, label %1243, label %1246

1243:                                             ; preds = %1237
  %1244 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef nonnull %1048) #25
  %1245 = call fastcc ptr @combine_split_insns(ptr noundef %1244, ptr noundef %0)
  store ptr %1245, ptr %17, align 8, !tbaa !5
  br label %1246

1246:                                             ; preds = %1243, %1237
  %1247 = phi ptr [ %1245, %1243 ], [ %1238, %1237 ]
  %1248 = icmp eq ptr %1247, null
  br i1 %1248, label %1371, label %1249

1249:                                             ; preds = %1167, %1246
  %1250 = phi ptr [ %1247, %1246 ], [ %1168, %1167 ]
  %1251 = phi i8 [ %1239, %1246 ], [ 0, %1167 ]
  %1252 = getelementptr inbounds %struct.rtx_def, ptr %1250, i64 0, i32 1, i32 0, i32 0, i64 2
  %1253 = load ptr, ptr %1252, align 8, !tbaa !16
  %1254 = icmp eq ptr %1253, null
  br i1 %1254, label %1255, label %1262

1255:                                             ; preds = %1249
  %1256 = getelementptr inbounds %struct.rtx_def, ptr %1250, i64 1
  %1257 = load ptr, ptr %1256, align 8, !tbaa !16
  store ptr %1257, ptr %17, align 8, !tbaa !5
  %1258 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %17, ptr noundef %0, ptr noundef nonnull %13)
  %1259 = icmp sgt i32 %1258, -1
  br i1 %1259, label %1260, label %1371

1260:                                             ; preds = %1255
  %1261 = load ptr, ptr %17, align 8, !tbaa !5
  store ptr %1261, ptr %6, align 8, !tbaa !5
  br label %1609

1262:                                             ; preds = %1249
  %1263 = getelementptr inbounds %struct.rtx_def, ptr %1253, i64 0, i32 1, i32 0, i32 0, i64 2
  %1264 = load ptr, ptr %1263, align 8, !tbaa !16
  %1265 = icmp eq ptr %1264, null
  br i1 %1265, label %1266, label %1371

1266:                                             ; preds = %1262
  %1267 = call ptr @next_real_insn(ptr noundef %1047) #25
  %1268 = icmp eq ptr %1267, %0
  br i1 %1268, label %1284, label %1269

1269:                                             ; preds = %1266
  %1270 = getelementptr inbounds %struct.rtx_def, ptr %1250, i64 1
  %1271 = load ptr, ptr %1270, align 8, !tbaa !16
  %1272 = load ptr, ptr @df, align 8, !tbaa !5
  %1273 = getelementptr inbounds %struct.df, ptr %1272, i64 0, i32 10
  %1274 = load ptr, ptr %1273, align 8, !tbaa !37
  %1275 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1
  %1276 = load i32, ptr %1275, align 8, !tbaa !16
  %1277 = sext i32 %1276 to i64
  %1278 = getelementptr inbounds ptr, ptr %1274, i64 %1277
  %1279 = load ptr, ptr %1278, align 8, !tbaa !5
  %1280 = getelementptr inbounds %struct.df_insn_info, ptr %1279, i64 0, i32 5
  %1281 = load i32, ptr %1280, align 8, !tbaa !54
  %1282 = call fastcc i32 @use_crosses_set_p(ptr noundef %1271, i32 noundef %1281)
  %1283 = icmp eq i32 %1282, 0
  br i1 %1283, label %1284, label %1371

1284:                                             ; preds = %1269, %1266
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #25
  %1285 = load ptr, ptr %1252, align 8, !tbaa !16
  %1286 = getelementptr inbounds %struct.rtx_def, ptr %1285, i64 1
  %1287 = load ptr, ptr %1286, align 8, !tbaa !16
  store ptr %1287, ptr %18, align 8, !tbaa !5
  %1288 = getelementptr inbounds %struct.rtx_def, ptr %1250, i64 1
  %1289 = load ptr, ptr %1288, align 8, !tbaa !16
  store ptr %1289, ptr %7, align 8, !tbaa !5
  %1290 = load i32, ptr %1285, align 8
  %1291 = and i32 %1290, 65535
  %1292 = add nsw i32 %1291, -7
  %1293 = icmp ult i32 %1292, 4
  br i1 %1293, label %1294, label %1300

1294:                                             ; preds = %1284
  %1295 = load i32, ptr %1287, align 8
  %1296 = and i32 %1295, 65535
  %1297 = icmp eq i32 %1296, 23
  br i1 %1297, label %1300, label %1298

1298:                                             ; preds = %1294
  %1299 = call ptr @single_set_2(ptr noundef nonnull %1285, ptr noundef nonnull %1287) #25
  br label %1300

1300:                                             ; preds = %1284, %1294, %1298
  %1301 = phi ptr [ %1299, %1298 ], [ null, %1284 ], [ %1287, %1294 ]
  %1302 = load i32, ptr %1250, align 8
  %1303 = and i32 %1302, 65535
  %1304 = add nsw i32 %1303, -7
  %1305 = icmp ult i32 %1304, 4
  br i1 %1305, label %1306, label %1313

1306:                                             ; preds = %1300
  %1307 = load ptr, ptr %1288, align 8, !tbaa !16
  %1308 = load i32, ptr %1307, align 8
  %1309 = and i32 %1308, 65535
  %1310 = icmp eq i32 %1309, 23
  br i1 %1310, label %1313, label %1311

1311:                                             ; preds = %1306
  %1312 = call ptr @single_set_2(ptr noundef nonnull %1250, ptr noundef nonnull %1307) #25
  br label %1313

1313:                                             ; preds = %1300, %1306, %1311
  %1314 = phi ptr [ %1312, %1311 ], [ null, %1300 ], [ %1307, %1306 ]
  %1315 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %7, ptr noundef %1047, ptr noundef nonnull %14)
  %1316 = icmp sgt i32 %1315, -1
  %1317 = icmp ne ptr %1314, null
  %1318 = select i1 %1316, i1 %1317, i1 false
  %1319 = icmp ne ptr %1301, null
  %1320 = select i1 %1318, i1 %1319, i1 false
  br i1 %1320, label %1321, label %1368

1321:                                             ; preds = %1313
  %1322 = call ptr @next_real_insn(ptr noundef %1047) #25
  %1323 = icmp eq ptr %1322, %0
  br i1 %1323, label %1329, label %1324

1324:                                             ; preds = %1321
  %1325 = getelementptr inbounds %struct.rtx_def, ptr %1314, i64 0, i32 1
  %1326 = load ptr, ptr %1325, align 8, !tbaa !16
  %1327 = call i32 @reg_used_between_p(ptr noundef %1326, ptr noundef %1047, ptr noundef %0) #25
  %1328 = icmp eq i32 %1327, 0
  br i1 %1328, label %1329, label %1368

1329:                                             ; preds = %1321, %1324
  %1330 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %18, ptr noundef %0, ptr noundef nonnull %13)
  %1331 = icmp sgt i32 %1330, -1
  br i1 %1331, label %1332, label %1368

1332:                                             ; preds = %1329
  %1333 = load ptr, ptr %18, align 8, !tbaa !5
  store ptr %1333, ptr %6, align 8, !tbaa !5
  %1334 = getelementptr inbounds %struct.rtx_def, ptr %1314, i64 0, i32 1
  %1335 = load ptr, ptr %1334, align 8, !tbaa !16
  br label %1336

1336:                                             ; preds = %1342, %1332
  %1337 = phi ptr [ %1301, %1332 ], [ %1339, %1342 ]
  %1338 = getelementptr inbounds %struct.rtx_def, ptr %1337, i64 0, i32 1
  %1339 = load ptr, ptr %1338, align 8, !tbaa !16
  %1340 = load i32, ptr %1339, align 8
  %1341 = trunc i32 %1340 to i16
  switch i16 %1341, label %1343 [
    i16 120, label %1342
    i16 40, label %1342
    i16 39, label %1342
  ]

1342:                                             ; preds = %1336, %1336, %1336
  br label %1336, !llvm.loop !118

1343:                                             ; preds = %1336, %1347
  %1344 = phi ptr [ %1349, %1347 ], [ %1335, %1336 ]
  %1345 = load i32, ptr %1344, align 8
  %1346 = trunc i32 %1345 to i16
  switch i16 %1346, label %1350 [
    i16 120, label %1347
    i16 40, label %1347
    i16 39, label %1347
  ]

1347:                                             ; preds = %1343, %1343, %1343
  %1348 = getelementptr inbounds %struct.rtx_def, ptr %1344, i64 0, i32 1
  %1349 = load ptr, ptr %1348, align 8, !tbaa !16
  br label %1343, !llvm.loop !119

1350:                                             ; preds = %1343
  %1351 = and i32 %1340, 65535
  %1352 = and i32 %1345, 65535
  %1353 = icmp eq i32 %1351, 37
  %1354 = icmp eq i32 %1352, 37
  %1355 = and i1 %1353, %1354
  br i1 %1355, label %1356, label %1370

1356:                                             ; preds = %1350
  %1357 = getelementptr i8, ptr %1339, i64 8
  %1358 = load i32, ptr %1357, align 8, !tbaa !16
  %1359 = getelementptr i8, ptr %1344, i64 8
  %1360 = load i32, ptr %1359, align 8, !tbaa !16
  %1361 = icmp eq i32 %1358, %1360
  br i1 %1361, label %1362, label %1370

1362:                                             ; preds = %1356
  %1363 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %1364 = zext i32 %1358 to i64
  %1365 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %1363, i64 %1364
  %1366 = load i32, ptr %1365, align 4, !tbaa !120
  %1367 = add nsw i32 %1366, 1
  store i32 %1367, ptr %1365, align 4, !tbaa !120
  br label %1370

1368:                                             ; preds = %1329, %1324, %1313
  %1369 = phi i32 [ %1330, %1329 ], [ %1155, %1324 ], [ %1155, %1313 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #25
  br label %1371

1370:                                             ; preds = %1362, %1356, %1350
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #25
  br label %1609

1371:                                             ; preds = %1246, %1262, %1269, %1255, %1368
  %1372 = phi i8 [ %1251, %1368 ], [ %1251, %1262 ], [ %1251, %1269 ], [ %1251, %1255 ], [ %1239, %1246 ]
  %1373 = phi i32 [ %1369, %1368 ], [ %1155, %1262 ], [ %1155, %1269 ], [ %1258, %1255 ], [ %1155, %1246 ]
  %1374 = phi i32 [ %1315, %1368 ], [ 0, %1262 ], [ 0, %1269 ], [ 0, %1255 ], [ 0, %1246 ]
  %1375 = call fastcc ptr @find_split_point(ptr noundef nonnull %6, ptr noundef %0)
  %1376 = icmp eq ptr %1375, null
  br i1 %1376, label %1609, label %1377

1377:                                             ; preds = %1371
  %1378 = load ptr, ptr %1375, align 8, !tbaa !5
  %1379 = load i32, ptr %1378, align 8
  %1380 = lshr i32 %1379, 16
  %1381 = and i32 %1380, 255
  %1382 = load i32, ptr %1032, align 8
  %1383 = lshr i32 %1382, 16
  %1384 = and i32 %1383, 255
  %1385 = icmp eq i32 %1381, %1384
  %1386 = icmp eq i32 %1381, 0
  %1387 = or i1 %1386, %1385
  br i1 %1387, label %1391, label %1388

1388:                                             ; preds = %1377
  %1389 = call fastcc zeroext i8 @can_change_dest_mode(ptr noundef nonnull %1032, i32 noundef %1038, i32 noundef %1381), !range !113
  %1390 = icmp eq i8 %1389, 0
  br i1 %1390, label %1609, label %1391

1391:                                             ; preds = %1388, %1377
  %1392 = call ptr @next_real_insn(ptr noundef %1047) #25
  %1393 = icmp eq ptr %1392, %0
  br i1 %1393, label %1408, label %1394

1394:                                             ; preds = %1391
  %1395 = load ptr, ptr %1375, align 8, !tbaa !5
  %1396 = load ptr, ptr @df, align 8, !tbaa !5
  %1397 = getelementptr inbounds %struct.df, ptr %1396, i64 0, i32 10
  %1398 = load ptr, ptr %1397, align 8, !tbaa !37
  %1399 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1
  %1400 = load i32, ptr %1399, align 8, !tbaa !16
  %1401 = sext i32 %1400 to i64
  %1402 = getelementptr inbounds ptr, ptr %1398, i64 %1401
  %1403 = load ptr, ptr %1402, align 8, !tbaa !5
  %1404 = getelementptr inbounds %struct.df_insn_info, ptr %1403, i64 0, i32 5
  %1405 = load i32, ptr %1404, align 8, !tbaa !54
  %1406 = call fastcc i32 @use_crosses_set_p(ptr noundef %1395, i32 noundef %1405)
  %1407 = icmp eq i32 %1406, 0
  br i1 %1407, label %1408, label %1609

1408:                                             ; preds = %1394, %1391
  %1409 = load ptr, ptr %6, align 8, !tbaa !5
  %1410 = call i32 @reg_referenced_p(ptr noundef nonnull %1032, ptr noundef %1409) #25
  %1411 = icmp eq i32 %1410, 0
  br i1 %1411, label %1412, label %1609

1412:                                             ; preds = %1408
  %1413 = load ptr, ptr %1375, align 8, !tbaa !5
  %1414 = load i32, ptr %1413, align 8
  %1415 = and i32 %1414, 65535
  %1416 = lshr i32 %1414, 16
  %1417 = and i32 %1416, 255
  store ptr null, ptr %7, align 8, !tbaa !5
  %1418 = load i32, ptr %1032, align 8
  %1419 = lshr i32 %1418, 16
  %1420 = and i32 %1419, 255
  %1421 = icmp ne i32 %1420, %1417
  %1422 = icmp ne i32 %1417, 0
  %1423 = and i1 %1422, %1421
  br i1 %1423, label %1424, label %1439

1424:                                             ; preds = %1412
  %1425 = getelementptr i8, ptr %1032, i64 8
  %1426 = load i32, ptr %1425, align 8, !tbaa !16
  %1427 = icmp ult i32 %1426, 53
  br i1 %1427, label %1428, label %1430

1428:                                             ; preds = %1424
  %1429 = call ptr @gen_rtx_REG(i32 noundef %1417, i32 noundef %1426) #25
  br label %1439

1430:                                             ; preds = %1424
  %1431 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %1432 = zext i32 %1426 to i64
  %1433 = getelementptr inbounds ptr, ptr %1431, i64 %1432
  call fastcc void @do_SUBST_MODE(ptr noundef nonnull %1433, i32 noundef %1417)
  %1434 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %1435 = load i32, ptr %1425, align 8, !tbaa !16
  %1436 = zext i32 %1435 to i64
  %1437 = getelementptr inbounds ptr, ptr %1434, i64 %1436
  %1438 = load ptr, ptr %1437, align 8, !tbaa !5
  br label %1439

1439:                                             ; preds = %1428, %1430, %1412
  %1440 = phi ptr [ %1429, %1428 ], [ %1438, %1430 ], [ %1032, %1412 ]
  %1441 = icmp eq i32 %1415, 52
  br i1 %1441, label %1442, label %1466

1442:                                             ; preds = %1439
  %1443 = load ptr, ptr %1375, align 8, !tbaa !5
  %1444 = getelementptr inbounds %struct.rtx_def, ptr %1443, i64 0, i32 1, i32 0, i32 0, i64 1
  %1445 = load ptr, ptr %1444, align 8, !tbaa !16
  %1446 = load i32, ptr %1445, align 8
  %1447 = and i32 %1446, 65535
  %1448 = icmp eq i32 %1447, 30
  br i1 %1448, label %1449, label %1478

1449:                                             ; preds = %1442
  %1450 = getelementptr inbounds %struct.rtx_def, ptr %1445, i64 0, i32 1
  %1451 = load i64, ptr %1450, align 8, !tbaa !16
  %1452 = icmp sgt i64 %1451, 0
  br i1 %1452, label %1453, label %1478

1453:                                             ; preds = %1449
  %1454 = call i32 @exact_log2(i64 noundef %1451) #25
  %1455 = icmp sgt i32 %1454, -1
  br i1 %1455, label %1456, label %1478

1456:                                             ; preds = %1453
  %1457 = load ptr, ptr %1375, align 8, !tbaa !5
  %1458 = getelementptr inbounds %struct.rtx_def, ptr %1457, i64 0, i32 1
  %1459 = load ptr, ptr %1458, align 8, !tbaa !16
  %1460 = zext i32 %1454 to i64
  %1461 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %1460) #25
  %1462 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef %1417, ptr noundef %1459, ptr noundef %1461) #25
  call fastcc void @do_SUBST(ptr noundef nonnull %1375, ptr noundef %1462)
  %1463 = load ptr, ptr %1375, align 8, !tbaa !5
  %1464 = load i32, ptr %1463, align 8
  %1465 = and i32 %1464, 65535
  br label %1466

1466:                                             ; preds = %1456, %1439
  %1467 = phi i32 [ %1465, %1456 ], [ %1415, %1439 ]
  %1468 = icmp eq i32 %1467, 39
  br i1 %1468, label %1469, label %1478

1469:                                             ; preds = %1466
  %1470 = load ptr, ptr %1375, align 8, !tbaa !5
  %1471 = getelementptr inbounds %struct.rtx_def, ptr %1470, i64 0, i32 1
  %1472 = load ptr, ptr %1471, align 8, !tbaa !16
  %1473 = load i32, ptr %1472, align 8
  %1474 = and i32 %1473, 65535
  %1475 = icmp eq i32 %1474, 43
  br i1 %1475, label %1476, label %1478

1476:                                             ; preds = %1469
  %1477 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef %1417, ptr noundef nonnull %1472) #25
  call fastcc void @do_SUBST(ptr noundef nonnull %1375, ptr noundef %1477)
  br label %1478

1478:                                             ; preds = %1442, %1449, %1453, %1476, %1469, %1466
  %1479 = phi i32 [ 39, %1476 ], [ 39, %1469 ], [ %1467, %1466 ], [ 52, %1453 ], [ 52, %1449 ], [ 52, %1442 ]
  %1480 = load ptr, ptr %6, align 8, !tbaa !5
  %1481 = getelementptr inbounds %struct.rtx_def, ptr %1480, i64 0, i32 1, i32 0, i32 0, i64 1
  %1482 = load ptr, ptr %1481, align 8, !tbaa !16
  %1483 = load i32, ptr %1482, align 8
  %1484 = and i32 %1483, 65535
  %1485 = zext i32 %1484 to i64
  %1486 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %1485
  %1487 = load i32, ptr %1486, align 4, !tbaa !16
  %1488 = icmp ult i32 %1487, 4
  br i1 %1488, label %1489, label %1566

1489:                                             ; preds = %1478
  %1490 = lshr i32 %1483, 16
  %1491 = and i32 %1490, 255
  %1492 = icmp eq i32 %1417, %1491
  br i1 %1492, label %1493, label %1566

1493:                                             ; preds = %1489
  %1494 = call i32 @side_effects_p(ptr noundef nonnull %1482) #25
  %1495 = icmp eq i32 %1494, 0
  br i1 %1495, label %1496, label %1566

1496:                                             ; preds = %1493
  %1497 = load ptr, ptr %6, align 8, !tbaa !5
  %1498 = getelementptr inbounds %struct.rtx_def, ptr %1497, i64 0, i32 1, i32 0, i32 0, i64 1
  %1499 = load ptr, ptr %1498, align 8, !tbaa !16
  %1500 = load i32, ptr %1499, align 8
  %1501 = lshr i32 %1500, 16
  %1502 = and i32 %1501, 255
  %1503 = and i32 %1500, 65535
  %1504 = getelementptr inbounds %struct.rtx_def, ptr %1499, i64 0, i32 1
  %1505 = load ptr, ptr %1504, align 8, !tbaa !16
  %1506 = getelementptr inbounds %struct.rtx_def, ptr %1499, i64 0, i32 1, i32 0, i32 0, i64 1
  %1507 = load ptr, ptr %1506, align 8, !tbaa !16
  %1508 = call i32 @rtx_equal_p(ptr noundef %1505, ptr noundef %1507) #25
  %1509 = icmp eq i32 %1508, 0
  br i1 %1509, label %1512, label %1510

1510:                                             ; preds = %1496
  %1511 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1440, ptr noundef %1505) #25
  store ptr %1511, ptr %7, align 8, !tbaa !5
  call fastcc void @do_SUBST(ptr noundef nonnull %1504, ptr noundef %1440)
  br label %1569

1512:                                             ; preds = %1496
  %1513 = trunc i32 %1500 to i16
  switch i16 %1513, label %1566 [
    i16 52, label %1514
    i16 49, label %1514
  ]

1514:                                             ; preds = %1512, %1512
  %1515 = load i32, ptr %1505, align 8
  %1516 = and i32 %1515, 65535
  %1517 = icmp eq i32 %1516, %1503
  br i1 %1517, label %1518, label %1566

1518:                                             ; preds = %1514
  %1519 = getelementptr inbounds %struct.rtx_def, ptr %1505, i64 0, i32 1
  %1520 = load ptr, ptr %1519, align 8, !tbaa !16
  %1521 = load i32, ptr %1520, align 8
  %1522 = and i32 %1521, 65535
  %1523 = icmp eq i32 %1522, %1503
  br i1 %1523, label %1524, label %1566

1524:                                             ; preds = %1518
  %1525 = zext i32 %1502 to i64
  %1526 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1525
  %1527 = load i8, ptr %1526, align 1, !tbaa !16
  switch i8 %1527, label %1528 [
    i8 2, label %1536
    i8 3, label %1536
    i8 10, label %1536
    i8 12, label %1536
    i8 8, label %1533
    i8 9, label %1533
    i8 11, label %1533
  ]

1528:                                             ; preds = %1524
  %1529 = icmp eq i8 %1527, 17
  %1530 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %1531 = icmp ne i32 %1530, 0
  %1532 = select i1 %1529, i1 %1531, i1 false
  br i1 %1532, label %1536, label %1566

1533:                                             ; preds = %1524, %1524, %1524
  %1534 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !20
  %1535 = icmp eq i32 %1534, 0
  br i1 %1535, label %1566, label %1536

1536:                                             ; preds = %1524, %1524, %1524, %1524, %1528, %1533
  %1537 = getelementptr inbounds %struct.rtx_def, ptr %1520, i64 0, i32 1
  %1538 = load ptr, ptr %1537, align 8, !tbaa !16
  %1539 = getelementptr inbounds %struct.rtx_def, ptr %1520, i64 0, i32 1, i32 0, i32 0, i64 1
  %1540 = load ptr, ptr %1539, align 8, !tbaa !16
  %1541 = getelementptr inbounds %struct.rtx_def, ptr %1505, i64 0, i32 1, i32 0, i32 0, i64 1
  %1542 = load ptr, ptr %1541, align 8, !tbaa !16
  %1543 = call i32 @rtx_equal_p(ptr noundef %1538, ptr noundef %1542) #25
  %1544 = icmp eq i32 %1543, 0
  br i1 %1544, label %1548, label %1545

1545:                                             ; preds = %1536
  %1546 = call i32 @rtx_equal_p(ptr noundef %1540, ptr noundef %1507) #25
  %1547 = icmp eq i32 %1546, 0
  br i1 %1547, label %1548, label %1554

1548:                                             ; preds = %1545, %1536
  %1549 = call i32 @rtx_equal_p(ptr noundef %1538, ptr noundef %1507) #25
  %1550 = icmp eq i32 %1549, 0
  br i1 %1550, label %1557, label %1551

1551:                                             ; preds = %1548
  %1552 = call i32 @rtx_equal_p(ptr noundef %1540, ptr noundef %1542) #25
  %1553 = icmp eq i32 %1552, 0
  br i1 %1553, label %1557, label %1554

1554:                                             ; preds = %1551, %1545
  %1555 = load ptr, ptr %1519, align 8, !tbaa !16
  %1556 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1440, ptr noundef %1555) #25
  store ptr %1556, ptr %7, align 8, !tbaa !5
  call fastcc void @do_SUBST(ptr noundef nonnull %1504, ptr noundef %1440)
  br label %1569

1557:                                             ; preds = %1551, %1548
  %1558 = call i32 @rtx_equal_p(ptr noundef %1538, ptr noundef %1540) #25
  %1559 = icmp eq i32 %1558, 0
  br i1 %1559, label %1566, label %1560

1560:                                             ; preds = %1557
  %1561 = call i32 @rtx_equal_p(ptr noundef %1542, ptr noundef %1507) #25
  %1562 = icmp eq i32 %1561, 0
  br i1 %1562, label %1566, label %1563

1563:                                             ; preds = %1560
  %1564 = call ptr @simplify_gen_binary(i32 noundef %1503, i32 noundef %1502, ptr noundef %1538, ptr noundef %1542) #25
  %1565 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1440, ptr noundef %1564) #25
  store ptr %1565, ptr %7, align 8, !tbaa !5
  call fastcc void @do_SUBST(ptr noundef nonnull %1504, ptr noundef %1440)
  br label %1569

1566:                                             ; preds = %1493, %1489, %1478, %1533, %1528, %1518, %1514, %1512, %1560, %1557
  %1567 = load ptr, ptr %1375, align 8, !tbaa !5
  %1568 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %1440, ptr noundef %1567) #25
  store ptr %1568, ptr %7, align 8, !tbaa !5
  br label %1569

1569:                                             ; preds = %1554, %1563, %1510, %1566
  %1570 = phi ptr [ %1506, %1554 ], [ %1506, %1563 ], [ %1506, %1510 ], [ %1375, %1566 ]
  call fastcc void @do_SUBST(ptr noundef nonnull %1570, ptr noundef %1440)
  %1571 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %7, ptr noundef %1047, ptr noundef nonnull %14)
  %1572 = load ptr, ptr %7, align 8, !tbaa !5
  %1573 = load i32, ptr %1572, align 8
  %1574 = and i32 %1573, 65535
  %1575 = icmp eq i32 %1574, 15
  br i1 %1575, label %1576, label %1601

1576:                                             ; preds = %1569
  %1577 = getelementptr inbounds %struct.rtx_def, ptr %1572, i64 0, i32 1
  %1578 = load ptr, ptr %1577, align 8, !tbaa !16
  %1579 = load i32, ptr %1578, align 8, !tbaa !99
  %1580 = icmp sgt i32 %1579, 0
  br i1 %1580, label %1581, label %1601

1581:                                             ; preds = %1576
  %1582 = zext i32 %1579 to i64
  br label %1583

1583:                                             ; preds = %1581, %1599
  %1584 = phi i64 [ %1582, %1581 ], [ %1585, %1599 ]
  %1585 = add nsw i64 %1584, -1
  %1586 = load ptr, ptr %1577, align 8, !tbaa !16
  %1587 = and i64 %1585, 4294967295
  %1588 = getelementptr inbounds %struct.rtvec_def, ptr %1586, i64 0, i32 1, i64 %1587
  %1589 = load ptr, ptr %1588, align 8, !tbaa !5
  %1590 = load i32, ptr %1589, align 8
  %1591 = and i32 %1590, 65535
  %1592 = icmp eq i32 %1591, 25
  br i1 %1592, label %1593, label %1599

1593:                                             ; preds = %1583
  %1594 = getelementptr inbounds %struct.rtx_def, ptr %1589, i64 0, i32 1
  %1595 = load ptr, ptr %1594, align 8, !tbaa !16
  %1596 = load ptr, ptr %6, align 8, !tbaa !5
  %1597 = call i32 @reg_overlap_mentioned_p(ptr noundef %1595, ptr noundef %1596) #25
  %1598 = icmp eq i32 %1597, 0
  br i1 %1598, label %1599, label %1613

1599:                                             ; preds = %1593, %1583
  %1600 = icmp ugt i64 %1584, 1
  br i1 %1600, label %1583, label %1601, !llvm.loop !122

1601:                                             ; preds = %1599, %1576, %1569
  %1602 = icmp sgt i32 %1571, -1
  br i1 %1602, label %1603, label %1609

1603:                                             ; preds = %1601
  %1604 = icmp ne i32 %1479, 52
  %1605 = icmp ne i32 %1045, 0
  %1606 = or i1 %1605, %1604
  br i1 %1606, label %1607, label %1609

1607:                                             ; preds = %1603
  %1608 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  br label %1609

1609:                                             ; preds = %1370, %1260, %1408, %1394, %1388, %1371, %1603, %1607, %1601
  %1610 = phi i8 [ %1251, %1260 ], [ %1251, %1370 ], [ %1372, %1371 ], [ %1372, %1388 ], [ %1372, %1394 ], [ %1372, %1408 ], [ 1, %1603 ], [ 1, %1607 ], [ 1, %1601 ]
  %1611 = phi i32 [ 0, %1260 ], [ %1315, %1370 ], [ %1374, %1371 ], [ %1374, %1388 ], [ %1374, %1394 ], [ %1374, %1408 ], [ %1571, %1603 ], [ %1571, %1607 ], [ %1571, %1601 ]
  %1612 = phi i32 [ %1258, %1260 ], [ %1330, %1370 ], [ %1373, %1371 ], [ %1373, %1388 ], [ %1373, %1394 ], [ %1373, %1408 ], [ %1373, %1603 ], [ %1608, %1607 ], [ %1373, %1601 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #25
  br label %1885

1613:                                             ; preds = %1593
  call fastcc void @undo_all()
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #25
  br label %2737

1614:                                             ; preds = %1158, %1163
  %1615 = phi ptr [ %1159, %1158 ], [ %1166, %1163 ]
  %1616 = call i32 @asm_noperands(ptr noundef %1615) #25
  %1617 = icmp slt i32 %1616, 0
  %1618 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1617, label %1619, label %1778

1619:                                             ; preds = %1614
  %1620 = load i32, ptr %1618, align 8
  %1621 = and i32 %1620, 65535
  %1622 = icmp eq i32 %1621, 15
  br i1 %1622, label %1623, label %1778

1623:                                             ; preds = %1619
  %1624 = getelementptr inbounds %struct.rtx_def, ptr %1618, i64 0, i32 1
  %1625 = load ptr, ptr %1624, align 8, !tbaa !16
  %1626 = load i32, ptr %1625, align 8, !tbaa !99
  %1627 = icmp eq i32 %1626, 2
  br i1 %1627, label %1628, label %1778

1628:                                             ; preds = %1623
  %1629 = getelementptr inbounds %struct.rtvec_def, ptr %1625, i64 0, i32 1
  %1630 = load ptr, ptr %1629, align 8, !tbaa !5
  %1631 = load i32, ptr %1630, align 8
  %1632 = and i32 %1631, 65535
  %1633 = icmp eq i32 %1632, 23
  br i1 %1633, label %1634, label %1778

1634:                                             ; preds = %1628
  %1635 = getelementptr inbounds %struct.rtx_def, ptr %1630, i64 0, i32 1, i32 0, i32 0, i64 1
  %1636 = load ptr, ptr %1635, align 8, !tbaa !16
  %1637 = load i32, ptr %1636, align 8
  %1638 = and i32 %1637, 65535
  %1639 = icmp eq i32 %1638, 98
  br i1 %1639, label %1640, label %1778

1640:                                             ; preds = %1634
  %1641 = getelementptr inbounds %struct.rtx_def, ptr %1630, i64 0, i32 1
  %1642 = load ptr, ptr %1641, align 8, !tbaa !16
  %1643 = load i32, ptr %1642, align 8
  %1644 = xor i32 %1643, %1637
  %1645 = and i32 %1644, 16711680
  %1646 = icmp eq i32 %1645, 0
  br i1 %1646, label %1647, label %1778

1647:                                             ; preds = %1640
  %1648 = getelementptr inbounds %struct.rtvec_def, ptr %1625, i64 1
  %1649 = load ptr, ptr %1648, align 8, !tbaa !5
  %1650 = load i32, ptr %1649, align 8
  %1651 = and i32 %1650, 65535
  %1652 = icmp eq i32 %1651, 23
  br i1 %1652, label %1653, label %1778

1653:                                             ; preds = %1647
  %1654 = getelementptr inbounds %struct.rtx_def, ptr %1649, i64 0, i32 1, i32 0, i32 0, i64 1
  %1655 = load ptr, ptr %1654, align 8, !tbaa !16
  %1656 = getelementptr inbounds %struct.rtx_def, ptr %1636, i64 0, i32 1
  %1657 = load ptr, ptr %1656, align 8, !tbaa !16
  %1658 = call i32 @rtx_equal_p(ptr noundef %1655, ptr noundef %1657) #25
  %1659 = icmp eq i32 %1658, 0
  %1660 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1659, label %1778, label %1661

1661:                                             ; preds = %1653
  %1662 = getelementptr inbounds %struct.rtx_def, ptr %1660, i64 0, i32 1
  %1663 = load ptr, ptr %1662, align 8, !tbaa !16
  %1664 = getelementptr inbounds %struct.rtvec_def, ptr %1663, i64 1
  %1665 = load ptr, ptr %1664, align 8, !tbaa !5
  %1666 = getelementptr inbounds %struct.rtx_def, ptr %1665, i64 0, i32 1, i32 0, i32 0, i64 1
  %1667 = load ptr, ptr %1666, align 8, !tbaa !16
  %1668 = load ptr, ptr @df, align 8, !tbaa !5
  %1669 = getelementptr inbounds %struct.df, ptr %1668, i64 0, i32 10
  %1670 = load ptr, ptr %1669, align 8, !tbaa !37
  %1671 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1
  %1672 = load i32, ptr %1671, align 8, !tbaa !16
  %1673 = sext i32 %1672 to i64
  %1674 = getelementptr inbounds ptr, ptr %1670, i64 %1673
  %1675 = load ptr, ptr %1674, align 8, !tbaa !5
  %1676 = getelementptr inbounds %struct.df_insn_info, ptr %1675, i64 0, i32 5
  %1677 = load i32, ptr %1676, align 8, !tbaa !54
  %1678 = call fastcc i32 @use_crosses_set_p(ptr noundef %1667, i32 noundef %1677)
  %1679 = icmp eq i32 %1678, 0
  %1680 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1679, label %1681, label %1778

1681:                                             ; preds = %1661
  %1682 = getelementptr inbounds %struct.rtx_def, ptr %1680, i64 0, i32 1
  %1683 = load ptr, ptr %1682, align 8, !tbaa !16
  %1684 = getelementptr inbounds %struct.rtvec_def, ptr %1683, i64 1
  %1685 = load ptr, ptr %1684, align 8, !tbaa !5
  %1686 = getelementptr inbounds %struct.rtx_def, ptr %1685, i64 0, i32 1
  %1687 = load ptr, ptr %1686, align 8, !tbaa !16
  %1688 = load i32, ptr %1687, align 8
  %1689 = trunc i32 %1688 to i16
  switch i16 %1689, label %1738 [
    i16 120, label %1778
    i16 40, label %1778
    i16 37, label %1690
    i16 39, label %1711
  ]

1690:                                             ; preds = %1681
  %1691 = load ptr, ptr @reg_stat, align 8
  %1692 = getelementptr i8, ptr %1687, i64 8
  %1693 = load i32, ptr %1692, align 8, !tbaa !16
  %1694 = zext i32 %1693 to i64
  %1695 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %1691, i64 0, i32 2, i64 %1694, i32 10
  %1696 = load i64, ptr %1695, align 8, !tbaa !84
  %1697 = icmp eq i64 %1696, 0
  br i1 %1697, label %1738, label %1698

1698:                                             ; preds = %1690
  %1699 = lshr i32 %1688, 16
  %1700 = and i32 %1699, 255
  %1701 = zext i32 %1700 to i64
  %1702 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1701
  %1703 = load i8, ptr %1702, align 1, !tbaa !16
  %1704 = icmp ult i8 %1703, 4
  br i1 %1704, label %1705, label %1738

1705:                                             ; preds = %1698
  %1706 = load i32, ptr @word_mode, align 4, !tbaa !16
  %1707 = zext i32 %1706 to i64
  %1708 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1707
  %1709 = load i64, ptr %1708, align 8, !tbaa !83
  %1710 = icmp eq i64 %1696, %1709
  br i1 %1710, label %1738, label %1778

1711:                                             ; preds = %1681
  %1712 = getelementptr inbounds %struct.rtx_def, ptr %1687, i64 0, i32 1
  %1713 = load ptr, ptr %1712, align 8, !tbaa !16
  %1714 = load i32, ptr %1713, align 8
  %1715 = and i32 %1714, 65535
  %1716 = icmp eq i32 %1715, 37
  br i1 %1716, label %1717, label %1738

1717:                                             ; preds = %1711
  %1718 = load ptr, ptr @reg_stat, align 8
  %1719 = getelementptr i8, ptr %1713, i64 8
  %1720 = load i32, ptr %1719, align 8, !tbaa !16
  %1721 = zext i32 %1720 to i64
  %1722 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %1718, i64 0, i32 2, i64 %1721, i32 10
  %1723 = load i64, ptr %1722, align 8, !tbaa !84
  %1724 = icmp eq i64 %1723, 0
  br i1 %1724, label %1738, label %1725

1725:                                             ; preds = %1717
  %1726 = lshr i32 %1714, 16
  %1727 = and i32 %1726, 255
  %1728 = zext i32 %1727 to i64
  %1729 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1728
  %1730 = load i8, ptr %1729, align 1, !tbaa !16
  %1731 = icmp ult i8 %1730, 4
  br i1 %1731, label %1732, label %1738

1732:                                             ; preds = %1725
  %1733 = load i32, ptr @word_mode, align 4, !tbaa !16
  %1734 = zext i32 %1733 to i64
  %1735 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1734
  %1736 = load i64, ptr %1735, align 8, !tbaa !83
  %1737 = icmp eq i64 %1723, %1736
  br i1 %1737, label %1738, label %1778

1738:                                             ; preds = %1681, %1705, %1690, %1698, %1725, %1717, %1711, %1732
  %1739 = getelementptr inbounds %struct.rtx_def, ptr %1685, i64 0, i32 1, i32 0, i32 0, i64 1
  %1740 = load ptr, ptr %1739, align 8, !tbaa !16
  %1741 = call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %1687, ptr noundef %1740) #25
  %1742 = icmp eq i32 %1741, 0
  %1743 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1742, label %1744, label %1778

1744:                                             ; preds = %1738
  %1745 = getelementptr inbounds %struct.rtx_def, ptr %1743, i64 0, i32 1
  %1746 = load ptr, ptr %1745, align 8, !tbaa !16
  %1747 = getelementptr inbounds %struct.rtvec_def, ptr %1746, i64 0, i32 1
  %1748 = load ptr, ptr %1747, align 8, !tbaa !5
  %1749 = getelementptr inbounds %struct.rtx_def, ptr %1748, i64 0, i32 1
  %1750 = load ptr, ptr %1749, align 8, !tbaa !16
  %1751 = call ptr @find_reg_note(ptr noundef %0, i32 noundef 6, ptr noundef %1750) #25
  %1752 = icmp eq ptr %1751, null
  %1753 = load ptr, ptr %6, align 8, !tbaa !5
  br i1 %1752, label %1754, label %1778

1754:                                             ; preds = %1744
  %1755 = getelementptr inbounds %struct.rtx_def, ptr %1753, i64 0, i32 1
  %1756 = load ptr, ptr %1755, align 8, !tbaa !16
  %1757 = getelementptr inbounds %struct.rtvec_def, ptr %1756, i64 0, i32 1
  %1758 = load ptr, ptr %1757, align 8, !tbaa !5
  store ptr %1758, ptr %7, align 8, !tbaa !5
  %1759 = getelementptr inbounds %struct.rtx_def, ptr %1758, i64 0, i32 1
  %1760 = load ptr, ptr %1759, align 8, !tbaa !16
  %1761 = getelementptr inbounds %struct.rtvec_def, ptr %1756, i64 1
  %1762 = load ptr, ptr %1761, align 8, !tbaa !5
  store ptr %1762, ptr %6, align 8, !tbaa !5
  %1763 = getelementptr inbounds %struct.rtx_def, ptr %1762, i64 0, i32 1, i32 0, i32 0, i64 1
  %1764 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1765 = load ptr, ptr %1763, align 8, !tbaa !16
  %1766 = load i32, ptr %1765, align 8
  %1767 = lshr i32 %1766, 16
  %1768 = and i32 %1767, 255
  %1769 = call ptr %1764(i32 noundef %1768, ptr noundef %1760) #25
  call fastcc void @do_SUBST(ptr noundef nonnull %1763, ptr noundef %1769)
  %1770 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %7, ptr noundef nonnull %1047, ptr noundef nonnull %14)
  %1771 = icmp sgt i32 %1770, -1
  br i1 %1771, label %1772, label %1774

1772:                                             ; preds = %1754
  %1773 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  br label %1774

1774:                                             ; preds = %1772, %1754
  %1775 = phi i32 [ %1773, %1772 ], [ %1155, %1754 ]
  %1776 = icmp sgt i32 %1775, -1
  %1777 = zext i1 %1776 to i32
  br label %1885

1778:                                             ; preds = %1681, %1681, %1614, %1619, %1623, %1628, %1634, %1640, %1647, %1653, %1661, %1705, %1732, %1738, %1744
  %1779 = phi ptr [ %1680, %1681 ], [ %1680, %1681 ], [ %1618, %1614 ], [ %1618, %1619 ], [ %1618, %1623 ], [ %1618, %1628 ], [ %1618, %1634 ], [ %1618, %1640 ], [ %1618, %1647 ], [ %1660, %1653 ], [ %1680, %1661 ], [ %1680, %1705 ], [ %1680, %1732 ], [ %1743, %1738 ], [ %1753, %1744 ]
  %1780 = call i32 @asm_noperands(ptr noundef %1779) #25
  %1781 = icmp slt i32 %1780, 0
  br i1 %1781, label %1782, label %1891

1782:                                             ; preds = %1778
  %1783 = load ptr, ptr %6, align 8, !tbaa !5
  %1784 = load i32, ptr %1783, align 8
  %1785 = and i32 %1784, 65535
  %1786 = icmp eq i32 %1785, 15
  br i1 %1786, label %1787, label %1891

1787:                                             ; preds = %1782
  %1788 = getelementptr inbounds %struct.rtx_def, ptr %1783, i64 0, i32 1
  %1789 = load ptr, ptr %1788, align 8, !tbaa !16
  %1790 = load i32, ptr %1789, align 8, !tbaa !99
  %1791 = icmp eq i32 %1790, 2
  br i1 %1791, label %1792, label %1891

1792:                                             ; preds = %1787
  %1793 = getelementptr inbounds %struct.rtvec_def, ptr %1789, i64 0, i32 1
  %1794 = load ptr, ptr %1793, align 8, !tbaa !5
  %1795 = load i32, ptr %1794, align 8
  %1796 = and i32 %1795, 65535
  %1797 = icmp eq i32 %1796, 23
  br i1 %1797, label %1798, label %1891

1798:                                             ; preds = %1792
  %1799 = getelementptr inbounds %struct.rtx_def, ptr %1794, i64 0, i32 1
  %1800 = load ptr, ptr %1799, align 8, !tbaa !16
  %1801 = load i32, ptr %1800, align 8
  %1802 = trunc i32 %1801 to i16
  switch i16 %1802, label %1803 [
    i16 120, label %1891
    i16 40, label %1891
  ]

1803:                                             ; preds = %1798
  %1804 = getelementptr inbounds %struct.rtvec_def, ptr %1789, i64 1
  %1805 = load ptr, ptr %1804, align 8, !tbaa !5
  %1806 = load i32, ptr %1805, align 8
  %1807 = and i32 %1806, 65535
  %1808 = icmp eq i32 %1807, 23
  br i1 %1808, label %1809, label %1891

1809:                                             ; preds = %1803
  %1810 = getelementptr inbounds %struct.rtx_def, ptr %1805, i64 0, i32 1
  %1811 = load ptr, ptr %1810, align 8, !tbaa !16
  %1812 = load i32, ptr %1811, align 8
  %1813 = trunc i32 %1812 to i16
  switch i16 %1813, label %1814 [
    i16 120, label %1891
    i16 40, label %1891
  ]

1814:                                             ; preds = %1809
  %1815 = getelementptr inbounds %struct.rtx_def, ptr %1805, i64 0, i32 1, i32 0, i32 0, i64 1
  %1816 = load ptr, ptr %1815, align 8, !tbaa !16
  %1817 = load ptr, ptr @df, align 8, !tbaa !5
  %1818 = getelementptr inbounds %struct.df, ptr %1817, i64 0, i32 10
  %1819 = load ptr, ptr %1818, align 8, !tbaa !37
  %1820 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1
  %1821 = load i32, ptr %1820, align 8, !tbaa !16
  %1822 = sext i32 %1821 to i64
  %1823 = getelementptr inbounds ptr, ptr %1819, i64 %1822
  %1824 = load ptr, ptr %1823, align 8, !tbaa !5
  %1825 = getelementptr inbounds %struct.df_insn_info, ptr %1824, i64 0, i32 5
  %1826 = load i32, ptr %1825, align 8, !tbaa !54
  %1827 = call fastcc i32 @use_crosses_set_p(ptr noundef %1816, i32 noundef %1826)
  %1828 = icmp eq i32 %1827, 0
  br i1 %1828, label %1829, label %1891

1829:                                             ; preds = %1814
  %1830 = load ptr, ptr %6, align 8, !tbaa !5
  %1831 = getelementptr inbounds %struct.rtx_def, ptr %1830, i64 0, i32 1
  %1832 = load ptr, ptr %1831, align 8, !tbaa !16
  %1833 = getelementptr inbounds %struct.rtvec_def, ptr %1832, i64 0, i32 1
  %1834 = getelementptr inbounds %struct.rtvec_def, ptr %1832, i64 1
  %1835 = load ptr, ptr %1834, align 8, !tbaa !5
  %1836 = getelementptr inbounds %struct.rtx_def, ptr %1835, i64 0, i32 1
  %1837 = load ptr, ptr %1836, align 8, !tbaa !16
  %1838 = load ptr, ptr %1833, align 8, !tbaa !5
  %1839 = call i32 @reg_referenced_p(ptr noundef %1837, ptr noundef %1838) #25
  %1840 = icmp eq i32 %1839, 0
  br i1 %1840, label %1841, label %1891

1841:                                             ; preds = %1829
  %1842 = load ptr, ptr %6, align 8, !tbaa !5
  %1843 = getelementptr inbounds %struct.rtx_def, ptr %1842, i64 0, i32 1
  %1844 = load ptr, ptr %1843, align 8, !tbaa !16
  %1845 = getelementptr inbounds %struct.rtvec_def, ptr %1844, i64 0, i32 1
  %1846 = load ptr, ptr %1845, align 8, !tbaa !5
  %1847 = getelementptr inbounds %struct.rtx_def, ptr %1846, i64 0, i32 1
  %1848 = load ptr, ptr %1847, align 8, !tbaa !16
  %1849 = getelementptr inbounds %struct.rtvec_def, ptr %1844, i64 1
  %1850 = load ptr, ptr %1849, align 8, !tbaa !5
  %1851 = call i32 @reg_referenced_p(ptr noundef %1848, ptr noundef %1850) #25
  %1852 = icmp eq i32 %1851, 0
  br i1 %1852, label %1853, label %1891

1853:                                             ; preds = %1841
  %1854 = load ptr, ptr %6, align 8, !tbaa !5
  %1855 = getelementptr inbounds %struct.rtx_def, ptr %1854, i64 0, i32 1
  %1856 = load ptr, ptr %1855, align 8, !tbaa !16
  %1857 = getelementptr inbounds %struct.rtvec_def, ptr %1856, i64 0, i32 1
  %1858 = load ptr, ptr %1857, align 8, !tbaa !5
  %1859 = getelementptr inbounds %struct.rtx_def, ptr %1858, i64 0, i32 1, i32 0, i32 0, i64 1
  %1860 = load ptr, ptr %1859, align 8, !tbaa !16
  %1861 = call fastcc i32 @contains_muldiv(ptr noundef %1860), !range !103
  %1862 = icmp eq i32 %1861, 0
  br i1 %1862, label %1873, label %1863

1863:                                             ; preds = %1853
  %1864 = load ptr, ptr %6, align 8, !tbaa !5
  %1865 = getelementptr inbounds %struct.rtx_def, ptr %1864, i64 0, i32 1
  %1866 = load ptr, ptr %1865, align 8, !tbaa !16
  %1867 = getelementptr inbounds %struct.rtvec_def, ptr %1866, i64 1
  %1868 = load ptr, ptr %1867, align 8, !tbaa !5
  %1869 = getelementptr inbounds %struct.rtx_def, ptr %1868, i64 0, i32 1, i32 0, i32 0, i64 1
  %1870 = load ptr, ptr %1869, align 8, !tbaa !16
  %1871 = call fastcc i32 @contains_muldiv(ptr noundef %1870), !range !103
  %1872 = icmp eq i32 %1871, 0
  br i1 %1872, label %1873, label %1891

1873:                                             ; preds = %1863, %1853
  %1874 = load ptr, ptr %6, align 8, !tbaa !5
  %1875 = getelementptr inbounds %struct.rtx_def, ptr %1874, i64 0, i32 1
  %1876 = load ptr, ptr %1875, align 8, !tbaa !16
  %1877 = getelementptr inbounds %struct.rtvec_def, ptr %1876, i64 1
  %1878 = load ptr, ptr %1877, align 8, !tbaa !5
  store ptr %1878, ptr %7, align 8, !tbaa !5
  %1879 = getelementptr inbounds %struct.rtvec_def, ptr %1876, i64 0, i32 1
  %1880 = load ptr, ptr %1879, align 8, !tbaa !5
  store ptr %1880, ptr %6, align 8, !tbaa !5
  %1881 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %7, ptr noundef nonnull %1047, ptr noundef nonnull %14)
  %1882 = icmp sgt i32 %1881, -1
  br i1 %1882, label %1883, label %1891

1883:                                             ; preds = %1873
  %1884 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %6, ptr noundef %0, ptr noundef nonnull %13)
  br label %1885

1885:                                             ; preds = %1609, %1153, %1774, %1883
  %1886 = phi i32 [ 0, %1883 ], [ %1777, %1774 ], [ 0, %1153 ], [ 0, %1609 ]
  %1887 = phi i8 [ 0, %1883 ], [ 0, %1774 ], [ 0, %1153 ], [ %1610, %1609 ]
  %1888 = phi i32 [ %1881, %1883 ], [ %1770, %1774 ], [ 0, %1153 ], [ %1611, %1609 ]
  %1889 = phi i32 [ %1884, %1883 ], [ %1775, %1774 ], [ %1155, %1153 ], [ %1612, %1609 ]
  %1890 = icmp slt i32 %1889, 0
  br i1 %1890, label %1891, label %1903

1891:                                             ; preds = %1778, %1782, %1787, %1792, %1798, %1798, %1803, %1809, %1809, %1873, %1863, %1841, %1829, %1814, %1885
  %1892 = phi i32 [ %1889, %1885 ], [ %1155, %1814 ], [ %1155, %1829 ], [ %1155, %1841 ], [ %1155, %1863 ], [ %1155, %1873 ], [ %1155, %1809 ], [ %1155, %1809 ], [ %1155, %1803 ], [ %1155, %1798 ], [ %1155, %1798 ], [ %1155, %1792 ], [ %1155, %1787 ], [ %1155, %1782 ], [ %1155, %1778 ]
  %1893 = phi i32 [ %1888, %1885 ], [ 0, %1814 ], [ 0, %1829 ], [ 0, %1841 ], [ 0, %1863 ], [ %1881, %1873 ], [ 0, %1809 ], [ 0, %1809 ], [ 0, %1803 ], [ 0, %1798 ], [ 0, %1798 ], [ 0, %1792 ], [ 0, %1787 ], [ 0, %1782 ], [ 0, %1778 ]
  %1894 = phi i8 [ %1887, %1885 ], [ 0, %1814 ], [ 0, %1829 ], [ 0, %1841 ], [ 0, %1863 ], [ 0, %1873 ], [ 0, %1809 ], [ 0, %1809 ], [ 0, %1803 ], [ 0, %1798 ], [ 0, %1798 ], [ 0, %1792 ], [ 0, %1787 ], [ 0, %1782 ], [ 0, %1778 ]
  %1895 = phi i32 [ %1886, %1885 ], [ 0, %1814 ], [ 0, %1829 ], [ 0, %1841 ], [ 0, %1863 ], [ 0, %1873 ], [ 0, %1809 ], [ 0, %1809 ], [ 0, %1803 ], [ 0, %1798 ], [ 0, %1798 ], [ 0, %1792 ], [ 0, %1787 ], [ 0, %1782 ], [ 0, %1778 ]
  %1896 = load ptr, ptr %6, align 8, !tbaa !5
  %1897 = call i32 @check_asm_operands(ptr noundef %1896) #25
  %1898 = icmp eq i32 %1897, 0
  %1899 = or i32 %1037, %1038
  %1900 = icmp ne i32 %1899, 0
  %1901 = select i1 %1898, i1 true, i1 %1900
  br i1 %1901, label %1902, label %1903

1902:                                             ; preds = %1891
  call fastcc void @undo_all()
  br label %2737

1903:                                             ; preds = %1031, %1891, %1885
  %1904 = phi i32 [ %1892, %1891 ], [ %1889, %1885 ], [ %1049, %1031 ]
  %1905 = phi i32 [ %1893, %1891 ], [ %1888, %1885 ], [ 0, %1031 ]
  %1906 = phi i8 [ %1894, %1891 ], [ %1887, %1885 ], [ 0, %1031 ]
  %1907 = phi i32 [ %1895, %1891 ], [ %1886, %1885 ], [ 0, %1031 ]
  %1908 = phi i32 [ %1154, %1891 ], [ %1154, %1885 ], [ %1046, %1031 ]
  %1909 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %1910 = icmp eq ptr %1909, null
  br i1 %1910, label %1911, label %1913

1911:                                             ; preds = %1903
  %1912 = load ptr, ptr %15, align 8, !tbaa !5
  br label %1923

1913:                                             ; preds = %1903
  store i64 0, ptr @newpat_used_regs, align 8, !tbaa !83
  %1914 = getelementptr inbounds %struct.rtx_def, ptr %1909, i64 1
  %1915 = load ptr, ptr %1914, align 8, !tbaa !16
  store ptr %1915, ptr %15, align 8, !tbaa !5
  %1916 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %15, ptr noundef nonnull %1909, ptr noundef nonnull %16)
  %1917 = icmp slt i32 %1916, 0
  %1918 = load ptr, ptr %15, align 8, !tbaa !5
  br i1 %1917, label %1919, label %1923

1919:                                             ; preds = %1913
  %1920 = call i32 @check_asm_operands(ptr noundef %1918) #25
  %1921 = icmp eq i32 %1920, 0
  br i1 %1921, label %1922, label %1923

1922:                                             ; preds = %1919
  call fastcc void @undo_all()
  br label %2737

1923:                                             ; preds = %1911, %1913, %1919
  %1924 = phi ptr [ %1918, %1919 ], [ %1918, %1913 ], [ %1912, %1911 ]
  %1925 = phi i32 [ %1916, %1919 ], [ %1916, %1913 ], [ 0, %1911 ]
  %1926 = load ptr, ptr %6, align 8, !tbaa !5
  %1927 = load ptr, ptr %7, align 8, !tbaa !5
  %1928 = call fastcc zeroext i8 @combine_validate_cost(ptr noundef %1034, ptr noundef %1047, ptr noundef %0, ptr noundef %1926, ptr noundef %1927, ptr noundef %1924), !range !113
  %1929 = icmp eq i8 %1928, 0
  br i1 %1929, label %1930, label %1931

1930:                                             ; preds = %1923
  call fastcc void @undo_all()
  br label %2737

1931:                                             ; preds = %1923
  %1932 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %1933 = icmp eq i32 %1932, 0
  br i1 %1933, label %1980, label %1934

1934:                                             ; preds = %1931
  %1935 = load ptr, ptr @undobuf, align 8, !tbaa !5
  %1936 = icmp eq ptr %1935, null
  br i1 %1936, label %1980, label %1937

1937:                                             ; preds = %1934
  %1938 = load ptr, ptr %9, align 8
  %1939 = load ptr, ptr %10, align 8
  %1940 = getelementptr i8, ptr %1047, i64 24
  br label %1941

1941:                                             ; preds = %1937, %1976
  %1942 = phi ptr [ %1935, %1937 ], [ %1978, %1976 ]
  %1943 = phi i8 [ %1906, %1937 ], [ %1977, %1976 ]
  %1944 = getelementptr inbounds %struct.undo, ptr %1942, i64 0, i32 1
  %1945 = load i32, ptr %1944, align 8, !tbaa !125
  %1946 = icmp eq i32 %1945, 2
  br i1 %1946, label %1947, label %1976

1947:                                             ; preds = %1941
  %1948 = getelementptr inbounds %struct.undo, ptr %1942, i64 0, i32 3
  %1949 = load ptr, ptr %1948, align 8, !tbaa !16
  %1950 = load ptr, ptr %1949, align 8, !tbaa !5
  %1951 = load i32, ptr %1950, align 8
  %1952 = lshr i32 %1951, 16
  %1953 = and i32 %1952, 255
  %1954 = getelementptr inbounds %struct.undo, ptr %1942, i64 0, i32 2
  %1955 = load i32, ptr %1954, align 8, !tbaa !16
  call void @adjust_reg_mode(ptr noundef nonnull %1950, i32 noundef %1955) #25
  %1956 = icmp eq ptr %1950, %1938
  %1957 = icmp ne i8 %1943, 0
  %1958 = select i1 %1956, i1 %1957, i1 false
  br i1 %1958, label %1959, label %1961

1959:                                             ; preds = %1947
  %1960 = load ptr, ptr %1940, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %1960, ptr noundef %0, ptr noundef nonnull %1938, ptr noundef %1939, i8 noundef zeroext 0)
  call void @adjust_reg_mode(ptr noundef nonnull %1938, i32 noundef %1953) #25
  br label %1976

1961:                                             ; preds = %1947
  %1962 = getelementptr i8, ptr %1950, i64 8
  %1963 = load i32, ptr %1962, align 8, !tbaa !16
  %1964 = call ptr @gen_raw_REG(i32 noundef %1955, i32 noundef %1963) #25
  br i1 %1956, label %1969, label %1965

1965:                                             ; preds = %1961
  %1966 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %1967 = icmp eq ptr %1966, null
  br i1 %1967, label %1968, label %1969

1968:                                             ; preds = %1965
  call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 3638, ptr noundef nonnull @.str.5) #25
  br label %1969

1969:                                             ; preds = %1961, %1968, %1965
  %1970 = phi ptr [ %0, %1965 ], [ %0, %1968 ], [ %1047, %1961 ]
  %1971 = phi ptr [ %1966, %1965 ], [ null, %1968 ], [ %0, %1961 ]
  %1972 = getelementptr i8, ptr %1970, i64 24
  %1973 = load ptr, ptr %1972, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %1973, ptr noundef %1971, ptr noundef nonnull %1950, ptr noundef %1964, i8 noundef zeroext 0)
  call void @adjust_reg_mode(ptr noundef nonnull %1950, i32 noundef %1953) #25
  %1974 = call ptr @lowpart_subreg(i32 noundef %1955, ptr noundef nonnull %1950, i32 noundef %1953) #25
  %1975 = load ptr, ptr %1972, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %1975, ptr noundef %1971, ptr noundef %1964, ptr noundef %1974, i8 noundef zeroext 0)
  br label %1976

1976:                                             ; preds = %1959, %1969, %1941
  %1977 = phi i8 [ %1943, %1941 ], [ 0, %1959 ], [ %1943, %1969 ]
  %1978 = load ptr, ptr %1942, align 8, !tbaa !5
  %1979 = icmp eq ptr %1978, null
  br i1 %1979, label %1980, label %1941, !llvm.loop !126

1980:                                             ; preds = %1976, %1934, %1931
  %1981 = phi i8 [ %1906, %1931 ], [ %1906, %1934 ], [ %1977, %1976 ]
  %1982 = icmp eq i32 %1908, 0
  br i1 %1982, label %1986, label %1983

1983:                                             ; preds = %1980
  %1984 = load ptr, ptr %6, align 8, !tbaa !5
  %1985 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  store ptr %1984, ptr %1985, align 8, !tbaa !16
  call fastcc void @adjust_for_new_dest(ptr noundef %0)
  br label %1986

1986:                                             ; preds = %1983, %1980
  %1987 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %1988 = icmp eq ptr %1987, null
  br i1 %1988, label %2018, label %1989

1989:                                             ; preds = %1986
  %1990 = getelementptr inbounds %struct.rtx_def, ptr %1987, i64 1
  store ptr %1924, ptr %1990, align 8, !tbaa !16
  %1991 = getelementptr inbounds %struct.rtx_def, ptr %1987, i64 1, i32 1, i32 0, i32 0, i64 1
  %1992 = load ptr, ptr %1991, align 8, !tbaa !16
  %1993 = icmp eq ptr %1992, null
  br i1 %1993, label %2015, label %1994

1994:                                             ; preds = %1989, %2011
  %1995 = phi ptr [ %1997, %2011 ], [ %1992, %1989 ]
  %1996 = getelementptr inbounds %struct.rtx_def, ptr %1995, i64 0, i32 1, i32 0, i32 0, i64 1
  %1997 = load ptr, ptr %1996, align 8, !tbaa !16
  %1998 = load i32, ptr %1995, align 8
  %1999 = and i32 %1998, 16711680
  %2000 = icmp eq i32 %1999, 393216
  br i1 %2000, label %2001, label %2011

2001:                                             ; preds = %1994
  %2002 = getelementptr inbounds %struct.rtx_def, ptr %1995, i64 0, i32 1
  %2003 = load ptr, ptr %2002, align 8, !tbaa !16
  %2004 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2005 = getelementptr inbounds %struct.rtx_def, ptr %2004, i64 1
  %2006 = load ptr, ptr %2005, align 8, !tbaa !16
  %2007 = call i32 @reg_set_p(ptr noundef %2003, ptr noundef %2006) #25
  %2008 = icmp eq i32 %2007, 0
  br i1 %2008, label %2009, label %2011

2009:                                             ; preds = %2001
  %2010 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  call void @remove_note(ptr noundef %2010, ptr noundef nonnull %1995) #25
  br label %2011

2011:                                             ; preds = %1994, %2001, %2009
  %2012 = icmp eq ptr %1997, null
  br i1 %2012, label %2013, label %1994, !llvm.loop !127

2013:                                             ; preds = %2011
  %2014 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  br label %2015

2015:                                             ; preds = %2013, %1989
  %2016 = phi ptr [ %2014, %2013 ], [ %1987, %1989 ]
  %2017 = load ptr, ptr %16, align 8, !tbaa !5
  call fastcc void @distribute_notes(ptr noundef %2017, ptr noundef %2016, ptr noundef %2016, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %2018

2018:                                             ; preds = %2015, %1986
  %2019 = icmp eq i32 %1907, 0
  br i1 %2019, label %2094, label %2020

2020:                                             ; preds = %2018
  %2021 = load ptr, ptr %6, align 8, !tbaa !5
  %2022 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  store ptr %2021, ptr %2022, align 8, !tbaa !16
  call fastcc void @adjust_for_new_dest(ptr noundef %0)
  %2023 = load i32, ptr %1927, align 8
  %2024 = and i32 %2023, 65535
  %2025 = icmp eq i32 %2024, 15
  br i1 %2025, label %2026, label %2031

2026:                                             ; preds = %2020
  %2027 = getelementptr inbounds %struct.rtx_def, ptr %1927, i64 0, i32 1
  %2028 = load ptr, ptr %2027, align 8, !tbaa !16
  %2029 = getelementptr inbounds %struct.rtvec_def, ptr %2028, i64 0, i32 1
  %2030 = load ptr, ptr %2029, align 8, !tbaa !5
  br label %2031

2031:                                             ; preds = %2020, %2026
  %2032 = phi ptr [ %2030, %2026 ], [ %1927, %2020 ]
  %2033 = getelementptr inbounds %struct.rtx_def, ptr %2032, i64 0, i32 1
  %2034 = load ptr, ptr %2033, align 8, !tbaa !16
  %2035 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %2036 = load ptr, ptr %2035, align 8, !tbaa !16
  %2037 = icmp eq ptr %2036, null
  br i1 %2037, label %2038, label %2039

2038:                                             ; preds = %2031
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #25
  store ptr null, ptr %19, align 8, !tbaa !5
  br label %2096

2039:                                             ; preds = %2031
  %2040 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %2041 = load ptr, ptr @cfun, align 8, !tbaa !5
  br label %2042

2042:                                             ; preds = %2039, %2088
  %2043 = phi ptr [ %2089, %2088 ], [ %2041, %2039 ]
  %2044 = phi ptr [ %2090, %2088 ], [ %2040, %2039 ]
  %2045 = phi ptr [ %2092, %2088 ], [ %2036, %2039 ]
  %2046 = getelementptr inbounds %struct.basic_block_def, ptr %2044, i64 0, i32 6
  %2047 = load ptr, ptr %2046, align 8, !tbaa !32
  %2048 = getelementptr inbounds %struct.function, ptr %2043, i64 0, i32 1
  %2049 = load ptr, ptr %2048, align 8, !tbaa !28
  %2050 = getelementptr inbounds %struct.control_flow_graph, ptr %2049, i64 0, i32 1
  %2051 = load ptr, ptr %2050, align 8, !tbaa !34
  %2052 = icmp eq ptr %2047, %2051
  br i1 %2052, label %2058, label %2053

2053:                                             ; preds = %2042
  %2054 = getelementptr inbounds %struct.basic_block_def, ptr %2047, i64 0, i32 7
  %2055 = load ptr, ptr %2054, align 8, !tbaa !16
  %2056 = load ptr, ptr %2055, align 8, !tbaa !35
  %2057 = icmp eq ptr %2045, %2056
  br i1 %2057, label %2094, label %2058

2058:                                             ; preds = %2042, %2053
  %2059 = load i32, ptr %2045, align 8
  %2060 = and i32 %2059, 65535
  %2061 = add nsw i32 %2060, -7
  %2062 = icmp ult i32 %2061, 4
  br i1 %2062, label %2063, label %2088

2063:                                             ; preds = %2058
  %2064 = getelementptr inbounds %struct.rtx_def, ptr %2045, i64 1
  %2065 = load ptr, ptr %2064, align 8, !tbaa !16
  %2066 = call i32 @reg_referenced_p(ptr noundef %2034, ptr noundef %2065) #25
  %2067 = icmp eq i32 %2066, 0
  %2068 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %2069 = load ptr, ptr @cfun, align 8, !tbaa !5
  br i1 %2067, label %2088, label %2070

2070:                                             ; preds = %2063
  %2071 = getelementptr inbounds %struct.rtx_def, ptr %2045, i64 0, i32 1
  %2072 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2073 = load i32, ptr %2071, align 8, !tbaa !16
  %2074 = sext i32 %2073 to i64
  %2075 = getelementptr inbounds ptr, ptr %2072, i64 %2074
  %2076 = load ptr, ptr %2075, align 8, !tbaa !16
  %2077 = icmp eq ptr %2076, null
  br i1 %2077, label %2094, label %2078

2078:                                             ; preds = %2070, %2084
  %2079 = phi ptr [ %2086, %2084 ], [ %2076, %2070 ]
  %2080 = getelementptr inbounds %struct.rtx_def, ptr %2079, i64 0, i32 1
  %2081 = load ptr, ptr %2080, align 8, !tbaa !16
  %2082 = icmp eq ptr %2081, %0
  br i1 %2082, label %2083, label %2084

2083:                                             ; preds = %2078
  store ptr %1034, ptr %2080, align 8, !tbaa !16
  br label %2084

2084:                                             ; preds = %2078, %2083
  %2085 = getelementptr inbounds %struct.rtx_def, ptr %2079, i64 0, i32 1, i32 0, i32 0, i64 1
  %2086 = load ptr, ptr %2085, align 8, !tbaa !16
  %2087 = icmp eq ptr %2086, null
  br i1 %2087, label %2094, label %2078, !llvm.loop !128

2088:                                             ; preds = %2058, %2063
  %2089 = phi ptr [ %2043, %2058 ], [ %2069, %2063 ]
  %2090 = phi ptr [ %2044, %2058 ], [ %2068, %2063 ]
  %2091 = getelementptr inbounds %struct.rtx_def, ptr %2045, i64 0, i32 1, i32 0, i32 0, i64 2
  %2092 = load ptr, ptr %2091, align 8, !tbaa !16
  %2093 = icmp eq ptr %2092, null
  br i1 %2093, label %2094, label %2042, !llvm.loop !129

2094:                                             ; preds = %2088, %2053, %2084, %2070, %2018
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %19) #25
  store ptr null, ptr %19, align 8, !tbaa !5
  %2095 = icmp eq ptr %1927, null
  br i1 %2095, label %2102, label %2096

2096:                                             ; preds = %2038, %2094
  %2097 = load ptr, ptr %9, align 8
  %2098 = call i32 @reg_set_p(ptr noundef %2097, ptr noundef nonnull %1927) #25
  %2099 = icmp ne i32 %2098, 0
  %2100 = icmp ne i32 %1039, 0
  %2101 = select i1 %2099, i1 true, i1 %2100
  br i1 %2101, label %2120, label %2111

2102:                                             ; preds = %2094
  %2103 = icmp eq i32 %1039, 0
  br i1 %2103, label %2104, label %2117

2104:                                             ; preds = %2102
  %2105 = icmp eq i32 %1042, 0
  %2106 = select i1 %1041, i1 true, i1 %2105
  %2107 = load ptr, ptr %9, align 8
  %2108 = select i1 %2106, ptr null, ptr %2107
  %2109 = icmp eq ptr %1034, null
  %2110 = select i1 %2109, i1 true, i1 %1040
  br i1 %2110, label %2136, label %2129

2111:                                             ; preds = %2096
  %2112 = icmp eq i32 %1042, 0
  %2113 = select i1 %1041, i1 true, i1 %2112
  %2114 = select i1 %2113, ptr null, ptr %2097
  %2115 = icmp eq ptr %1034, null
  %2116 = select i1 %2115, i1 true, i1 %1040
  br i1 %2116, label %2136, label %2123

2117:                                             ; preds = %2102
  %2118 = icmp eq ptr %1034, null
  %2119 = select i1 %2118, i1 true, i1 %1040
  br i1 %2119, label %2136, label %2129

2120:                                             ; preds = %2096
  %2121 = icmp eq ptr %1034, null
  %2122 = select i1 %2121, i1 true, i1 %1040
  br i1 %2122, label %2136, label %2123

2123:                                             ; preds = %2111, %2120
  %2124 = phi ptr [ null, %2120 ], [ %2114, %2111 ]
  %2125 = load ptr, ptr %11, align 8, !tbaa !5
  %2126 = call i32 @reg_set_p(ptr noundef %2125, ptr noundef nonnull %1927) #25
  %2127 = icmp eq i32 %2126, 0
  %2128 = select i1 %2127, i1 %1043, i1 false
  br i1 %2128, label %2133, label %2136

2129:                                             ; preds = %2104, %2117
  %2130 = phi ptr [ null, %2117 ], [ %2108, %2104 ]
  br i1 %1043, label %2131, label %2136

2131:                                             ; preds = %2129
  %2132 = load ptr, ptr %11, align 8, !tbaa !5
  br label %2133

2133:                                             ; preds = %2131, %2123
  %2134 = phi ptr [ %2125, %2123 ], [ %2132, %2131 ]
  %2135 = phi ptr [ %2124, %2123 ], [ %2130, %2131 ]
  br label %2136

2136:                                             ; preds = %2111, %2117, %2120, %2104, %2123, %2129, %2133
  %2137 = phi ptr [ %2135, %2133 ], [ %2130, %2129 ], [ %2124, %2123 ], [ %2108, %2104 ], [ null, %2120 ], [ null, %2117 ], [ %2114, %2111 ]
  %2138 = phi ptr [ %2134, %2133 ], [ null, %2129 ], [ null, %2123 ], [ null, %2104 ], [ null, %2120 ], [ null, %2117 ], [ null, %2111 ]
  %2139 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %2140 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %2141 = load ptr, ptr %2140, align 8, !tbaa !16
  %2142 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2143 = load i32, ptr %2139, align 8, !tbaa !16
  %2144 = sext i32 %2143 to i64
  %2145 = getelementptr inbounds ptr, ptr %2142, i64 %2144
  %2146 = load ptr, ptr %2145, align 8, !tbaa !5
  %2147 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1
  %2148 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 1, i32 1, i32 0, i32 0, i64 1
  %2149 = load ptr, ptr %2148, align 8, !tbaa !16
  %2150 = load i32, ptr %2147, align 8, !tbaa !16
  %2151 = sext i32 %2150 to i64
  %2152 = getelementptr inbounds ptr, ptr %2142, i64 %2151
  %2153 = load ptr, ptr %2152, align 8, !tbaa !5
  br i1 %1033, label %2154, label %2162

2154:                                             ; preds = %2136
  %2155 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 0, i32 1
  %2156 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 1, i32 1, i32 0, i32 0, i64 1
  %2157 = load ptr, ptr %2156, align 8, !tbaa !16
  %2158 = load i32, ptr %2155, align 8, !tbaa !16
  %2159 = sext i32 %2158 to i64
  %2160 = getelementptr inbounds ptr, ptr %2142, i64 %2159
  %2161 = load ptr, ptr %2160, align 8, !tbaa !5
  br label %2162

2162:                                             ; preds = %2154, %2136
  %2163 = phi ptr [ %2157, %2154 ], [ null, %2136 ]
  %2164 = phi ptr [ %2161, %2154 ], [ null, %2136 ]
  call void @reset_used_flags(ptr noundef %2141) #25
  call void @reset_used_flags(ptr noundef %2149) #25
  call void @reset_used_flags(ptr noundef %2163) #25
  %2165 = load ptr, ptr %6, align 8, !tbaa !5
  call void @reset_used_flags(ptr noundef %2165) #25
  call void @reset_used_flags(ptr noundef %1927) #25
  %2166 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2167 = icmp eq ptr %2166, null
  br i1 %2167, label %2171, label %2168

2168:                                             ; preds = %2162
  %2169 = getelementptr inbounds %struct.rtx_def, ptr %2166, i64 1
  %2170 = load ptr, ptr %2169, align 8, !tbaa !16
  call void @reset_used_flags(ptr noundef %2170) #25
  br label %2171

2171:                                             ; preds = %2168, %2162
  %2172 = call ptr @copy_rtx_if_shared(ptr noundef %2141) #25
  %2173 = call ptr @copy_rtx_if_shared(ptr noundef %2149) #25
  %2174 = call ptr @copy_rtx_if_shared(ptr noundef %2163) #25
  %2175 = load ptr, ptr %6, align 8, !tbaa !5
  %2176 = call ptr @copy_rtx_if_shared(ptr noundef %2175) #25
  store ptr %2176, ptr %6, align 8, !tbaa !5
  %2177 = call ptr @copy_rtx_if_shared(ptr noundef %1927) #25
  store ptr %2177, ptr %7, align 8, !tbaa !5
  %2178 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2179 = icmp eq ptr %2178, null
  br i1 %2179, label %2183, label %2180

2180:                                             ; preds = %2171
  %2181 = getelementptr inbounds %struct.rtx_def, ptr %2178, i64 1
  %2182 = load ptr, ptr %2181, align 8, !tbaa !16
  call void @reset_used_flags(ptr noundef %2182) #25
  br label %2183

2183:                                             ; preds = %2180, %2171
  %2184 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1
  store i32 %1904, ptr %2184, align 8, !tbaa !16
  %2185 = load ptr, ptr %6, align 8, !tbaa !5
  %2186 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  store ptr %2185, ptr %2186, align 8, !tbaa !16
  %2187 = load i32, ptr %0, align 8
  %2188 = and i32 %2187, 65535
  %2189 = icmp eq i32 %2188, 10
  br i1 %2189, label %2190, label %2208

2190:                                             ; preds = %2183
  %2191 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 2
  %2192 = load ptr, ptr %2191, align 8, !tbaa !16
  %2193 = icmp eq ptr %2192, null
  br i1 %2193, label %2208, label %2194

2194:                                             ; preds = %2190
  call void @reset_used_flags(ptr noundef nonnull %2192) #25
  %2195 = call ptr @copy_rtx(ptr noundef nonnull %2192) #25
  %2196 = icmp eq i32 %1035, 0
  br i1 %2196, label %2201, label %2197

2197:                                             ; preds = %2194
  %2198 = load ptr, ptr %9, align 8, !tbaa !5
  %2199 = load ptr, ptr %10, align 8, !tbaa !5
  %2200 = call ptr @replace_rtx(ptr noundef %2195, ptr noundef %2198, ptr noundef %2199) #25
  br label %2201

2201:                                             ; preds = %2197, %2194
  %2202 = icmp eq i32 %1036, 0
  br i1 %2202, label %2207, label %2203

2203:                                             ; preds = %2201
  %2204 = load ptr, ptr %11, align 8, !tbaa !5
  %2205 = load ptr, ptr %12, align 8, !tbaa !5
  %2206 = call ptr @replace_rtx(ptr noundef %2195, ptr noundef %2204, ptr noundef %2205) #25
  br label %2207

2207:                                             ; preds = %2203, %2201
  store ptr %2195, ptr %2191, align 8, !tbaa !16
  br label %2208

2208:                                             ; preds = %2207, %2190, %2183
  %2209 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2210 = icmp eq ptr %2209, null
  br i1 %2210, label %2213, label %2211

2211:                                             ; preds = %2208
  %2212 = getelementptr inbounds %struct.rtx_def, ptr %2209, i64 1, i32 1
  store i32 %1925, ptr %2212, align 8, !tbaa !16
  br label %2213

2213:                                             ; preds = %2211, %2208
  %2214 = icmp eq i32 %1044, 0
  br i1 %2214, label %2309, label %2215

2215:                                             ; preds = %2213
  %2216 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 1
  %2217 = load ptr, ptr %2216, align 8, !tbaa !16
  %2218 = getelementptr inbounds %struct.rtx_def, ptr %2217, i64 0, i32 1
  %2219 = load ptr, ptr %2218, align 8, !tbaa !16
  %2220 = load i32, ptr %2219, align 8, !tbaa !99
  %2221 = icmp sgt i32 %2220, 0
  br i1 %2221, label %2222, label %2300

2222:                                             ; preds = %2215
  %2223 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 0, i32 1, i32 0, i32 0, i64 2
  br label %2224

2224:                                             ; preds = %2222, %2292
  %2225 = phi i64 [ 0, %2222 ], [ %2293, %2292 ]
  %2226 = phi ptr [ %2219, %2222 ], [ %2296, %2292 ]
  %2227 = getelementptr inbounds %struct.rtvec_def, ptr %2226, i64 0, i32 1, i64 %2225
  %2228 = load ptr, ptr %2227, align 8, !tbaa !5
  %2229 = load i32, ptr %2228, align 8
  %2230 = trunc i32 %2229 to i16
  switch i16 %2230, label %2292 [
    i16 23, label %2231
    i16 25, label %2231
  ]

2231:                                             ; preds = %2224, %2224
  %2232 = getelementptr inbounds %struct.rtx_def, ptr %2228, i64 0, i32 1
  %2233 = load ptr, ptr %2232, align 8, !tbaa !16
  %2234 = load i32, ptr %2233, align 8
  %2235 = and i32 %2234, 65535
  %2236 = icmp ne i32 %2235, 37
  %2237 = load ptr, ptr %9, align 8
  %2238 = icmp eq ptr %2233, %2237
  %2239 = select i1 %2236, i1 true, i1 %2238
  br i1 %2239, label %2292, label %2240

2240:                                             ; preds = %2231
  %2241 = call ptr @find_reg_note(ptr noundef nonnull %1047, i32 noundef 6, ptr noundef nonnull %2233) #25
  %2242 = icmp eq ptr %2241, null
  br i1 %2242, label %2243, label %2292

2243:                                             ; preds = %2240
  %2244 = load ptr, ptr %2223, align 8, !tbaa !16
  %2245 = icmp eq ptr %2244, null
  br i1 %2245, label %2292, label %2246

2246:                                             ; preds = %2243
  %2247 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %2248 = getelementptr inbounds %struct.basic_block_def, ptr %2247, i64 0, i32 6
  %2249 = load ptr, ptr @cfun, align 8, !tbaa !5
  %2250 = getelementptr inbounds %struct.function, ptr %2249, i64 0, i32 1
  %2251 = getelementptr inbounds %struct.basic_block_def, ptr %2247, i64 0, i32 7
  %2252 = load ptr, ptr @uid_log_links, align 8
  br label %2253

2253:                                             ; preds = %2246, %2288
  %2254 = phi ptr [ %2244, %2246 ], [ %2290, %2288 ]
  %2255 = load ptr, ptr %2248, align 8, !tbaa !32
  %2256 = load ptr, ptr %2250, align 8, !tbaa !28
  %2257 = getelementptr inbounds %struct.control_flow_graph, ptr %2256, i64 0, i32 1
  %2258 = load ptr, ptr %2257, align 8, !tbaa !34
  %2259 = icmp eq ptr %2255, %2258
  br i1 %2259, label %2264, label %2260

2260:                                             ; preds = %2253
  %2261 = load ptr, ptr %2251, align 8, !tbaa !16
  %2262 = load ptr, ptr %2261, align 8, !tbaa !35
  %2263 = icmp eq ptr %2262, %2254
  br i1 %2263, label %2292, label %2264

2264:                                             ; preds = %2253, %2260
  %2265 = icmp eq ptr %2254, %0
  br i1 %2265, label %2288, label %2266

2266:                                             ; preds = %2264
  %2267 = load i32, ptr %2254, align 8
  %2268 = and i32 %2267, 65535
  %2269 = add nsw i32 %2268, -7
  %2270 = icmp ult i32 %2269, 4
  br i1 %2270, label %2271, label %2288

2271:                                             ; preds = %2266
  %2272 = getelementptr inbounds %struct.rtx_def, ptr %2254, i64 0, i32 1
  %2273 = load i32, ptr %2272, align 8, !tbaa !16
  %2274 = sext i32 %2273 to i64
  %2275 = getelementptr inbounds ptr, ptr %2252, i64 %2274
  %2276 = load ptr, ptr %2275, align 8, !tbaa !16
  %2277 = icmp eq ptr %2276, null
  br i1 %2277, label %2288, label %2278

2278:                                             ; preds = %2271, %2284
  %2279 = phi ptr [ %2286, %2284 ], [ %2276, %2271 ]
  %2280 = getelementptr inbounds %struct.rtx_def, ptr %2279, i64 0, i32 1
  %2281 = load ptr, ptr %2280, align 8, !tbaa !16
  %2282 = icmp eq ptr %2281, %1047
  br i1 %2282, label %2283, label %2284

2283:                                             ; preds = %2278
  store ptr %0, ptr %2280, align 8, !tbaa !16
  br label %2284

2284:                                             ; preds = %2278, %2283
  %2285 = getelementptr inbounds %struct.rtx_def, ptr %2279, i64 0, i32 1, i32 0, i32 0, i64 1
  %2286 = load ptr, ptr %2285, align 8, !tbaa !16
  %2287 = icmp eq ptr %2286, null
  br i1 %2287, label %2288, label %2278, !llvm.loop !130

2288:                                             ; preds = %2284, %2271, %2266, %2264
  %2289 = getelementptr inbounds %struct.rtx_def, ptr %2254, i64 0, i32 1, i32 0, i32 0, i64 2
  %2290 = load ptr, ptr %2289, align 8, !tbaa !16
  %2291 = icmp eq ptr %2290, null
  br i1 %2291, label %2292, label %2253, !llvm.loop !131

2292:                                             ; preds = %2260, %2288, %2243, %2224, %2231, %2240
  %2293 = add nuw nsw i64 %2225, 1
  %2294 = load ptr, ptr %2216, align 8, !tbaa !16
  %2295 = getelementptr inbounds %struct.rtx_def, ptr %2294, i64 0, i32 1
  %2296 = load ptr, ptr %2295, align 8, !tbaa !16
  %2297 = load i32, ptr %2296, align 8, !tbaa !99
  %2298 = sext i32 %2297 to i64
  %2299 = icmp slt i64 %2293, %2298
  br i1 %2299, label %2224, label %2300, !llvm.loop !132

2300:                                             ; preds = %2292, %2215
  %2301 = icmp eq ptr %2172, null
  br i1 %2301, label %2309, label %2302

2302:                                             ; preds = %2300, %2302
  %2303 = phi ptr [ %2305, %2302 ], [ %2172, %2300 ]
  %2304 = getelementptr inbounds %struct.rtx_def, ptr %2303, i64 0, i32 1, i32 0, i32 0, i64 1
  %2305 = load ptr, ptr %2304, align 8, !tbaa !16
  %2306 = icmp eq ptr %2305, null
  br i1 %2306, label %2307, label %2302, !llvm.loop !133

2307:                                             ; preds = %2302
  %2308 = getelementptr inbounds %struct.rtx_def, ptr %2303, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %2173, ptr %2308, align 8, !tbaa !16
  br label %2309

2309:                                             ; preds = %2307, %2300, %2213
  %2310 = phi ptr [ %2172, %2213 ], [ %2172, %2307 ], [ %2173, %2300 ]
  %2311 = phi ptr [ %2173, %2213 ], [ null, %2307 ], [ null, %2300 ]
  %2312 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2313 = load i32, ptr %2139, align 8, !tbaa !16
  %2314 = sext i32 %2313 to i64
  %2315 = getelementptr inbounds ptr, ptr %2312, i64 %2314
  store ptr null, ptr %2315, align 8, !tbaa !5
  store ptr null, ptr %2140, align 8, !tbaa !16
  %2316 = load i32, ptr %2147, align 8, !tbaa !16
  %2317 = sext i32 %2316 to i64
  %2318 = getelementptr inbounds ptr, ptr %2312, i64 %2317
  store ptr null, ptr %2318, align 8, !tbaa !5
  store ptr null, ptr %2148, align 8, !tbaa !16
  %2319 = icmp eq ptr %2177, null
  %2320 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %2321 = icmp ne i32 %2320, 0
  br i1 %2319, label %2330, label %2322

2322:                                             ; preds = %2309
  %2323 = icmp ne i8 %1981, 0
  %2324 = select i1 %2321, i1 %2323, i1 false
  br i1 %2324, label %2325, label %2340

2325:                                             ; preds = %2322
  %2326 = load ptr, ptr %9, align 8, !tbaa !5
  %2327 = load ptr, ptr %10, align 8, !tbaa !5
  %2328 = getelementptr i8, ptr %1047, i64 24
  %2329 = load ptr, ptr %2328, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %2329, ptr noundef nonnull %0, ptr noundef %2326, ptr noundef %2327, i8 noundef zeroext 0)
  br label %2340

2330:                                             ; preds = %2309
  %2331 = load ptr, ptr %10, align 8
  %2332 = icmp ne ptr %2331, null
  %2333 = select i1 %2321, i1 %2332, i1 false
  br i1 %2333, label %2334, label %2339

2334:                                             ; preds = %2330
  %2335 = load ptr, ptr %9, align 8, !tbaa !5
  %2336 = trunc i32 %1044 to i8
  %2337 = getelementptr i8, ptr %1047, i64 24
  %2338 = load ptr, ptr %2337, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %2338, ptr noundef nonnull %0, ptr noundef %2335, ptr noundef nonnull %2331, i8 noundef zeroext %2336)
  br label %2339

2339:                                             ; preds = %2330, %2334
  call void @set_insn_deleted(ptr noundef nonnull %1047) #25
  br i1 %1033, label %2343, label %2379

2340:                                             ; preds = %2322, %2325
  %2341 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 1, i32 1
  store i32 %1905, ptr %2341, align 8, !tbaa !16
  %2342 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 1
  store ptr %2177, ptr %2342, align 8, !tbaa !16
  br i1 %1033, label %2343, label %2358

2343:                                             ; preds = %2340, %2339
  %2344 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2345 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 0, i32 1
  %2346 = load i32, ptr %2345, align 8, !tbaa !16
  %2347 = sext i32 %2346 to i64
  %2348 = getelementptr inbounds ptr, ptr %2344, i64 %2347
  store ptr null, ptr %2348, align 8, !tbaa !5
  %2349 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 1, i32 1, i32 0, i32 0, i64 1
  store ptr null, ptr %2349, align 8, !tbaa !16
  %2350 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !20
  %2351 = icmp eq i32 %2350, 0
  br i1 %2351, label %2357, label %2352

2352:                                             ; preds = %2343
  %2353 = load ptr, ptr %11, align 8, !tbaa !5
  %2354 = load ptr, ptr %12, align 8, !tbaa !5
  %2355 = getelementptr i8, ptr %1034, i64 24
  %2356 = load ptr, ptr %2355, align 8, !tbaa !16
  call fastcc void @propagate_for_debug(ptr %2356, ptr noundef nonnull %0, ptr noundef %2353, ptr noundef %2354, i8 noundef zeroext 0)
  br label %2357

2357:                                             ; preds = %2343, %2352
  call void @set_insn_deleted(ptr noundef nonnull %1034) #25
  br i1 %2319, label %2379, label %2358

2358:                                             ; preds = %2340, %2357
  %2359 = load ptr, ptr @df, align 8, !tbaa !5
  %2360 = getelementptr inbounds %struct.df, ptr %2359, i64 0, i32 10
  %2361 = load ptr, ptr %2360, align 8, !tbaa !37
  %2362 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 0, i32 1
  %2363 = load i32, ptr %2362, align 8, !tbaa !16
  %2364 = sext i32 %2363 to i64
  %2365 = getelementptr inbounds ptr, ptr %2361, i64 %2364
  %2366 = load ptr, ptr %2365, align 8, !tbaa !5
  %2367 = getelementptr inbounds %struct.df_insn_info, ptr %2366, i64 0, i32 5
  %2368 = load i32, ptr %2367, align 8, !tbaa !54
  call fastcc void @move_deaths(ptr noundef nonnull %2177, ptr noundef null, i32 noundef %2368, ptr noundef nonnull %1047, ptr noundef nonnull %19)
  %2369 = load ptr, ptr %6, align 8, !tbaa !5
  %2370 = load ptr, ptr @df, align 8, !tbaa !5
  %2371 = getelementptr inbounds %struct.df, ptr %2370, i64 0, i32 10
  %2372 = load ptr, ptr %2371, align 8, !tbaa !37
  %2373 = load i32, ptr %2362, align 8, !tbaa !16
  %2374 = sext i32 %2373 to i64
  %2375 = getelementptr inbounds ptr, ptr %2372, i64 %2374
  %2376 = load ptr, ptr %2375, align 8, !tbaa !5
  %2377 = getelementptr inbounds %struct.df_insn_info, ptr %2376, i64 0, i32 5
  %2378 = load i32, ptr %2377, align 8, !tbaa !54
  call fastcc void @move_deaths(ptr noundef %2369, ptr noundef nonnull %2177, i32 noundef %2378, ptr noundef nonnull %0, ptr noundef nonnull %19)
  br label %2391

2379:                                             ; preds = %2339, %2357
  %2380 = phi ptr [ %2345, %2357 ], [ %2147, %2339 ]
  %2381 = load ptr, ptr @df, align 8, !tbaa !5
  %2382 = getelementptr inbounds %struct.df, ptr %2381, i64 0, i32 10
  %2383 = load ptr, ptr %2382, align 8, !tbaa !37
  %2384 = load i32, ptr %2380, align 8, !tbaa !16
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds ptr, ptr %2383, i64 %2385
  %2387 = load ptr, ptr %6, align 8, !tbaa !5
  %2388 = load ptr, ptr %2386, align 8, !tbaa !5
  %2389 = getelementptr inbounds %struct.df_insn_info, ptr %2388, i64 0, i32 5
  %2390 = load i32, ptr %2389, align 8, !tbaa !54
  call fastcc void @move_deaths(ptr noundef %2387, ptr noundef null, i32 noundef %2390, ptr noundef nonnull %0, ptr noundef nonnull %19)
  br label %2391

2391:                                             ; preds = %2379, %2358
  %2392 = phi i1 [ true, %2379 ], [ false, %2358 ]
  %2393 = icmp eq ptr %2310, null
  br i1 %2393, label %2396, label %2394

2394:                                             ; preds = %2391
  %2395 = select i1 %2392, ptr null, ptr %1047
  call fastcc void @distribute_notes(ptr noundef nonnull %2310, ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef %2395, ptr noundef %2137, ptr noundef %2138)
  br label %2396

2396:                                             ; preds = %2394, %2391
  %2397 = icmp eq ptr %2311, null
  br i1 %2397, label %2400, label %2398

2398:                                             ; preds = %2396
  %2399 = select i1 %2392, ptr null, ptr %1047
  call fastcc void @distribute_notes(ptr noundef nonnull %2311, ptr noundef nonnull %1047, ptr noundef nonnull %0, ptr noundef %2399, ptr noundef %2137, ptr noundef %2138)
  br label %2400

2400:                                             ; preds = %2398, %2396
  %2401 = icmp eq ptr %2174, null
  br i1 %2401, label %2404, label %2402

2402:                                             ; preds = %2400
  %2403 = select i1 %2392, ptr null, ptr %1047
  call fastcc void @distribute_notes(ptr noundef nonnull %2174, ptr noundef %1034, ptr noundef nonnull %0, ptr noundef %2403, ptr noundef %2137, ptr noundef %2138)
  br label %2404

2404:                                             ; preds = %2402, %2400
  %2405 = load ptr, ptr %19, align 8, !tbaa !5
  %2406 = icmp eq ptr %2405, null
  br i1 %2406, label %2409, label %2407

2407:                                             ; preds = %2404
  %2408 = select i1 %2319, ptr null, ptr %1047
  call fastcc void @distribute_notes(ptr noundef nonnull %2405, ptr noundef null, ptr noundef nonnull %0, ptr noundef %2408, ptr noundef %2137, ptr noundef %2138)
  br label %2409

2409:                                             ; preds = %2407, %2404
  %2410 = icmp ne ptr %2177, null
  %2411 = load ptr, ptr %14, align 8
  %2412 = icmp ne ptr %2411, null
  %2413 = select i1 %2410, i1 %2412, i1 false
  br i1 %2413, label %2414, label %2415

2414:                                             ; preds = %2409
  call fastcc void @distribute_notes(ptr noundef nonnull %2411, ptr noundef nonnull %1047, ptr noundef nonnull %1047, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %2415

2415:                                             ; preds = %2414, %2409
  %2416 = load ptr, ptr %13, align 8, !tbaa !5
  %2417 = icmp eq ptr %2416, null
  br i1 %2417, label %2419, label %2418

2418:                                             ; preds = %2415
  call fastcc void @distribute_notes(ptr noundef nonnull %2416, ptr noundef nonnull %0, ptr noundef nonnull %0, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %2419

2419:                                             ; preds = %2418, %2415
  %2420 = load ptr, ptr %8, align 8, !tbaa !5
  %2421 = icmp eq ptr %2420, null
  br i1 %2421, label %2431, label %2422

2422:                                             ; preds = %2419
  br i1 %2319, label %2427, label %2423

2423:                                             ; preds = %2422
  %2424 = call i32 @reg_set_p(ptr noundef nonnull %2420, ptr noundef nonnull %2177) #25
  %2425 = icmp eq i32 %2424, 0
  %2426 = load ptr, ptr %8, align 8, !tbaa !5
  br i1 %2425, label %2427, label %2433

2427:                                             ; preds = %2423, %2422
  %2428 = phi ptr [ %2426, %2423 ], [ %2420, %2422 ]
  %2429 = phi ptr [ %1047, %2423 ], [ null, %2422 ]
  %2430 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2428, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2430, ptr noundef null, ptr noundef nonnull %0, ptr noundef %2429, ptr noundef %2137, ptr noundef %2138)
  br label %2431

2431:                                             ; preds = %2427, %2419
  %2432 = icmp eq i32 %1039, 0
  br i1 %2432, label %2450, label %2438

2433:                                             ; preds = %2423
  %2434 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2426, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2434, ptr noundef null, ptr noundef nonnull %1047, ptr noundef null, ptr noundef %2137, ptr noundef %2138)
  %2435 = icmp eq i32 %1039, 0
  br i1 %2435, label %2450, label %2436

2436:                                             ; preds = %2433
  %2437 = load ptr, ptr %9, align 8, !tbaa !5
  br label %2440

2438:                                             ; preds = %2431
  %2439 = load ptr, ptr %9, align 8, !tbaa !5
  br i1 %2319, label %2446, label %2440

2440:                                             ; preds = %2436, %2438
  %2441 = phi ptr [ %2437, %2436 ], [ %2439, %2438 ]
  %2442 = call i32 @reg_set_p(ptr noundef %2441, ptr noundef nonnull %2177) #25
  %2443 = icmp eq i32 %2442, 0
  br i1 %2443, label %2446, label %2444

2444:                                             ; preds = %2440
  %2445 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2441, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2445, ptr noundef null, ptr noundef nonnull %1047, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %2450

2446:                                             ; preds = %2440, %2438
  %2447 = phi ptr [ %2441, %2440 ], [ %2439, %2438 ]
  %2448 = phi ptr [ %1047, %2440 ], [ null, %2438 ]
  %2449 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2447, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2449, ptr noundef null, ptr noundef nonnull %0, ptr noundef %2448, ptr noundef null, ptr noundef null)
  br label %2450

2450:                                             ; preds = %2433, %2444, %2446, %2431
  %2451 = phi i1 [ true, %2433 ], [ false, %2444 ], [ false, %2446 ], [ true, %2431 ]
  br i1 %1040, label %2452, label %2462

2452:                                             ; preds = %2450
  %2453 = load ptr, ptr %11, align 8, !tbaa !5
  br i1 %2319, label %2459, label %2454

2454:                                             ; preds = %2452
  %2455 = call i32 @reg_set_p(ptr noundef %2453, ptr noundef nonnull %2177) #25
  %2456 = icmp eq i32 %2455, 0
  br i1 %2456, label %2459, label %2457

2457:                                             ; preds = %2454
  %2458 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2453, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2458, ptr noundef null, ptr noundef nonnull %1047, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %2462

2459:                                             ; preds = %2454, %2452
  %2460 = phi ptr [ %1047, %2454 ], [ null, %2452 ]
  %2461 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %2453, ptr noundef null) #25
  call fastcc void @distribute_notes(ptr noundef %2461, ptr noundef null, ptr noundef nonnull %0, ptr noundef %2460, ptr noundef null, ptr noundef null)
  br label %2462

2462:                                             ; preds = %2457, %2459, %2450
  call fastcc void @distribute_links(ptr noundef %2146)
  call fastcc void @distribute_links(ptr noundef %2153)
  call fastcc void @distribute_links(ptr noundef %2164)
  %2463 = load ptr, ptr %9, align 8, !tbaa !5
  %2464 = load i32, ptr %2463, align 8
  %2465 = and i32 %2464, 65535
  %2466 = icmp eq i32 %2465, 37
  br i1 %2466, label %2467, label %2527

2467:                                             ; preds = %2462
  %2468 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2469 = load i32, ptr %2139, align 8, !tbaa !16
  %2470 = sext i32 %2469 to i64
  %2471 = getelementptr inbounds ptr, ptr %2468, i64 %2470
  %2472 = load ptr, ptr %2471, align 8, !tbaa !16
  %2473 = icmp eq ptr %2472, null
  br i1 %2473, label %2509, label %2474

2474:                                             ; preds = %2467, %2503
  %2475 = phi ptr [ %2507, %2503 ], [ %2472, %2467 ]
  %2476 = phi ptr [ %2505, %2503 ], [ null, %2467 ]
  %2477 = phi ptr [ %2504, %2503 ], [ null, %2467 ]
  %2478 = getelementptr inbounds %struct.rtx_def, ptr %2475, i64 0, i32 1
  %2479 = load ptr, ptr %2478, align 8, !tbaa !16
  %2480 = load i32, ptr %2479, align 8
  %2481 = and i32 %2480, 65535
  %2482 = add nsw i32 %2481, -7
  %2483 = icmp ult i32 %2482, 4
  br i1 %2483, label %2484, label %2503

2484:                                             ; preds = %2474
  %2485 = getelementptr inbounds %struct.rtx_def, ptr %2479, i64 1
  %2486 = load ptr, ptr %2485, align 8, !tbaa !16
  %2487 = load i32, ptr %2486, align 8
  %2488 = and i32 %2487, 65535
  %2489 = icmp eq i32 %2488, 23
  br i1 %2489, label %2493, label %2490

2490:                                             ; preds = %2484
  %2491 = call ptr @single_set_2(ptr noundef nonnull %2479, ptr noundef nonnull %2486) #25
  %2492 = icmp eq ptr %2491, null
  br i1 %2492, label %2503, label %2493

2493:                                             ; preds = %2484, %2490
  %2494 = phi ptr [ %2491, %2490 ], [ %2486, %2484 ]
  %2495 = getelementptr inbounds %struct.rtx_def, ptr %2494, i64 0, i32 1
  %2496 = load ptr, ptr %2495, align 8, !tbaa !16
  %2497 = call i32 @rtx_equal_p(ptr noundef nonnull %2463, ptr noundef %2496) #25
  %2498 = icmp eq i32 %2497, 0
  br i1 %2498, label %2503, label %2499

2499:                                             ; preds = %2493
  %2500 = load ptr, ptr %2478, align 8, !tbaa !16
  %2501 = getelementptr inbounds %struct.rtx_def, ptr %2494, i64 0, i32 1, i32 0, i32 0, i64 1
  %2502 = load ptr, ptr %2501, align 8, !tbaa !16
  br label %2503

2503:                                             ; preds = %2474, %2490, %2493, %2499
  %2504 = phi ptr [ %2500, %2499 ], [ %2477, %2493 ], [ %2477, %2490 ], [ %2477, %2474 ]
  %2505 = phi ptr [ %2502, %2499 ], [ %2476, %2493 ], [ %2476, %2490 ], [ %2476, %2474 ]
  %2506 = getelementptr inbounds %struct.rtx_def, ptr %2475, i64 0, i32 1, i32 0, i32 0, i64 1
  %2507 = load ptr, ptr %2506, align 8, !tbaa !16
  %2508 = icmp eq ptr %2507, null
  br i1 %2508, label %2509, label %2474, !llvm.loop !134

2509:                                             ; preds = %2503, %2467
  %2510 = phi ptr [ null, %2467 ], [ %2504, %2503 ]
  %2511 = phi ptr [ null, %2467 ], [ %2505, %2503 ]
  call fastcc void @record_value_for_reg(ptr noundef nonnull %2463, ptr noundef %2510, ptr noundef %2511)
  %2512 = icmp eq i32 %1038, 0
  br i1 %2512, label %2513, label %2527

2513:                                             ; preds = %2509
  br i1 %2319, label %2518, label %2514

2514:                                             ; preds = %2513
  %2515 = call i32 @reg_mentioned_p(ptr noundef nonnull %2463, ptr noundef nonnull %2177) #25
  %2516 = or i32 %2515, %1039
  %2517 = icmp eq i32 %2516, 0
  br i1 %2517, label %2519, label %2527

2518:                                             ; preds = %2513
  br i1 %2451, label %2519, label %2527

2519:                                             ; preds = %2514, %2518
  %2520 = getelementptr i8, ptr %2463, i64 8
  %2521 = load i32, ptr %2520, align 8, !tbaa !16
  %2522 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %2523 = zext i32 %2521 to i64
  %2524 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %2522, i64 %2523
  %2525 = load i32, ptr %2524, align 4, !tbaa !120
  %2526 = add nsw i32 %2525, -1
  store i32 %2526, ptr %2524, align 4, !tbaa !120
  br label %2527

2527:                                             ; preds = %2509, %2514, %2518, %2519, %2462
  br i1 %1033, label %2528, label %2588

2528:                                             ; preds = %2527
  %2529 = load ptr, ptr %11, align 8, !tbaa !5
  %2530 = load i32, ptr %2529, align 8
  %2531 = and i32 %2530, 65535
  %2532 = icmp eq i32 %2531, 37
  br i1 %2532, label %2533, label %2588

2533:                                             ; preds = %2528
  %2534 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %2535 = load i32, ptr %2139, align 8, !tbaa !16
  %2536 = sext i32 %2535 to i64
  %2537 = getelementptr inbounds ptr, ptr %2534, i64 %2536
  %2538 = load ptr, ptr %2537, align 8, !tbaa !16
  %2539 = icmp eq ptr %2538, null
  br i1 %2539, label %2575, label %2540

2540:                                             ; preds = %2533, %2569
  %2541 = phi ptr [ %2573, %2569 ], [ %2538, %2533 ]
  %2542 = phi ptr [ %2571, %2569 ], [ null, %2533 ]
  %2543 = phi ptr [ %2570, %2569 ], [ null, %2533 ]
  %2544 = getelementptr inbounds %struct.rtx_def, ptr %2541, i64 0, i32 1
  %2545 = load ptr, ptr %2544, align 8, !tbaa !16
  %2546 = load i32, ptr %2545, align 8
  %2547 = and i32 %2546, 65535
  %2548 = add nsw i32 %2547, -7
  %2549 = icmp ult i32 %2548, 4
  br i1 %2549, label %2550, label %2569

2550:                                             ; preds = %2540
  %2551 = getelementptr inbounds %struct.rtx_def, ptr %2545, i64 1
  %2552 = load ptr, ptr %2551, align 8, !tbaa !16
  %2553 = load i32, ptr %2552, align 8
  %2554 = and i32 %2553, 65535
  %2555 = icmp eq i32 %2554, 23
  br i1 %2555, label %2559, label %2556

2556:                                             ; preds = %2550
  %2557 = call ptr @single_set_2(ptr noundef nonnull %2545, ptr noundef nonnull %2552) #25
  %2558 = icmp eq ptr %2557, null
  br i1 %2558, label %2569, label %2559

2559:                                             ; preds = %2550, %2556
  %2560 = phi ptr [ %2557, %2556 ], [ %2552, %2550 ]
  %2561 = getelementptr inbounds %struct.rtx_def, ptr %2560, i64 0, i32 1
  %2562 = load ptr, ptr %2561, align 8, !tbaa !16
  %2563 = call i32 @rtx_equal_p(ptr noundef nonnull %2529, ptr noundef %2562) #25
  %2564 = icmp eq i32 %2563, 0
  br i1 %2564, label %2569, label %2565

2565:                                             ; preds = %2559
  %2566 = load ptr, ptr %2544, align 8, !tbaa !16
  %2567 = getelementptr inbounds %struct.rtx_def, ptr %2560, i64 0, i32 1, i32 0, i32 0, i64 1
  %2568 = load ptr, ptr %2567, align 8, !tbaa !16
  br label %2569

2569:                                             ; preds = %2540, %2556, %2559, %2565
  %2570 = phi ptr [ %2566, %2565 ], [ %2543, %2559 ], [ %2543, %2556 ], [ %2543, %2540 ]
  %2571 = phi ptr [ %2568, %2565 ], [ %2542, %2559 ], [ %2542, %2556 ], [ %2542, %2540 ]
  %2572 = getelementptr inbounds %struct.rtx_def, ptr %2541, i64 0, i32 1, i32 0, i32 0, i64 1
  %2573 = load ptr, ptr %2572, align 8, !tbaa !16
  %2574 = icmp eq ptr %2573, null
  br i1 %2574, label %2575, label %2540, !llvm.loop !135

2575:                                             ; preds = %2569, %2533
  %2576 = phi ptr [ null, %2533 ], [ %2570, %2569 ]
  %2577 = phi ptr [ null, %2533 ], [ %2571, %2569 ]
  call fastcc void @record_value_for_reg(ptr noundef nonnull %2529, ptr noundef %2576, ptr noundef %2577)
  %2578 = icmp ne i32 %1037, 0
  %2579 = select i1 %2578, i1 true, i1 %1040
  br i1 %2579, label %2588, label %2580

2580:                                             ; preds = %2575
  %2581 = getelementptr i8, ptr %2529, i64 8
  %2582 = load i32, ptr %2581, align 8, !tbaa !16
  %2583 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %2584 = zext i32 %2582 to i64
  %2585 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %2583, i64 %2584
  %2586 = load i32, ptr %2585, align 4, !tbaa !120
  %2587 = add nsw i32 %2586, -1
  store i32 %2587, ptr %2585, align 4, !tbaa !120
  br label %2588

2588:                                             ; preds = %2575, %2580, %2528, %2527
  br i1 %2319, label %2590, label %2589

2589:                                             ; preds = %2588
  call void @note_stores(ptr noundef nonnull %2177, ptr noundef nonnull @set_nonzero_bits_and_sign_copies, ptr noundef null) #25
  br label %2590

2590:                                             ; preds = %2589, %2588
  %2591 = load ptr, ptr %6, align 8, !tbaa !5
  call void @note_stores(ptr noundef %2591, ptr noundef nonnull @set_nonzero_bits_and_sign_copies, ptr noundef null) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %19) #25
  %2592 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2593 = icmp eq ptr %2592, null
  br i1 %2593, label %2605, label %2594

2594:                                             ; preds = %2590
  %2595 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %2596 = icmp eq ptr %2595, null
  br i1 %2596, label %2602, label %2597

2597:                                             ; preds = %2594
  %2598 = call i64 @fwrite(ptr nonnull @.str.9, i64 21, i64 1, ptr nonnull %2595)
  %2599 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %2600 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  call void @dump_insn_slim(ptr noundef %2599, ptr noundef %2600) #25
  %2601 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  br label %2602

2602:                                             ; preds = %2597, %2594
  %2603 = phi ptr [ %2601, %2597 ], [ %2592, %2594 ]
  %2604 = call zeroext i8 @df_insn_rescan(ptr noundef %2603) #25
  br label %2605

2605:                                             ; preds = %2602, %2590
  br i1 %1033, label %2606, label %2622

2606:                                             ; preds = %2605
  %2607 = load i32, ptr %1034, align 8
  %2608 = and i32 %2607, 65535
  %2609 = icmp eq i32 %2608, 13
  br i1 %2609, label %2610, label %2614

2610:                                             ; preds = %2606
  %2611 = getelementptr inbounds %struct.rtx_def, ptr %1034, i64 1
  %2612 = load i32, ptr %2611, align 8, !tbaa !16
  %2613 = icmp eq i32 %2612, 0
  br i1 %2613, label %2622, label %2614

2614:                                             ; preds = %2610, %2606
  %2615 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %2616 = icmp eq ptr %2615, null
  br i1 %2616, label %2620, label %2617

2617:                                             ; preds = %2614
  %2618 = call i64 @fwrite(ptr nonnull @.str.10, i64 18, i64 1, ptr nonnull %2615)
  %2619 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_insn_slim(ptr noundef %2619, ptr noundef nonnull %1034) #25
  br label %2620

2620:                                             ; preds = %2617, %2614
  %2621 = call zeroext i8 @df_insn_rescan(ptr noundef nonnull %1034) #25
  br label %2622

2622:                                             ; preds = %2620, %2610, %2605
  %2623 = icmp eq ptr %1047, null
  br i1 %2623, label %2640, label %2624

2624:                                             ; preds = %2622
  %2625 = load i32, ptr %1047, align 8
  %2626 = and i32 %2625, 65535
  %2627 = icmp eq i32 %2626, 13
  br i1 %2627, label %2628, label %2632

2628:                                             ; preds = %2624
  %2629 = getelementptr inbounds %struct.rtx_def, ptr %1047, i64 1
  %2630 = load i32, ptr %2629, align 8, !tbaa !16
  %2631 = icmp eq i32 %2630, 0
  br i1 %2631, label %2640, label %2632

2632:                                             ; preds = %2628, %2624
  %2633 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %2634 = icmp eq ptr %2633, null
  br i1 %2634, label %2638, label %2635

2635:                                             ; preds = %2632
  %2636 = call i64 @fwrite(ptr nonnull @.str.11, i64 18, i64 1, ptr nonnull %2633)
  %2637 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_insn_slim(ptr noundef %2637, ptr noundef nonnull %1047) #25
  br label %2638

2638:                                             ; preds = %2635, %2632
  %2639 = call zeroext i8 @df_insn_rescan(ptr noundef nonnull %1047) #25
  br label %2640

2640:                                             ; preds = %2638, %2628, %2622
  %2641 = icmp eq ptr %0, null
  br i1 %2641, label %2657, label %2642

2642:                                             ; preds = %2640
  %2643 = load i32, ptr %0, align 8
  %2644 = and i32 %2643, 65535
  %2645 = icmp eq i32 %2644, 13
  br i1 %2645, label %2646, label %2649

2646:                                             ; preds = %2642
  %2647 = load i32, ptr %2186, align 8, !tbaa !16
  %2648 = icmp eq i32 %2647, 0
  br i1 %2648, label %2657, label %2649

2649:                                             ; preds = %2646, %2642
  %2650 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %2651 = icmp eq ptr %2650, null
  br i1 %2651, label %2655, label %2652

2652:                                             ; preds = %2649
  %2653 = call i64 @fwrite(ptr nonnull @.str.12, i64 18, i64 1, ptr nonnull %2650)
  %2654 = load ptr, ptr @dump_file, align 8, !tbaa !5
  call void @dump_insn_slim(ptr noundef %2654, ptr noundef nonnull %0) #25
  br label %2655

2655:                                             ; preds = %2652, %2649
  %2656 = call zeroext i8 @df_insn_rescan(ptr noundef nonnull %0) #25
  br label %2657

2657:                                             ; preds = %2655, %2646, %2640
  %2658 = call i32 @returnjump_p(ptr noundef %0) #25
  %2659 = icmp eq i32 %2658, 0
  br i1 %2659, label %2660, label %2663

2660:                                             ; preds = %2657
  %2661 = call i32 @any_uncondjump_p(ptr noundef %0) #25
  %2662 = icmp eq i32 %2661, 0
  br i1 %2662, label %2665, label %2663

2663:                                             ; preds = %2660, %2657
  store i32 1, ptr %3, align 4, !tbaa !20
  %2664 = load ptr, ptr %2186, align 8, !tbaa !16
  call void @mark_jump_label(ptr noundef %2664, ptr noundef %0, i32 noundef 0) #25
  call fastcc void @update_cfg_for_uncondjump(ptr noundef %0)
  br label %2665

2665:                                             ; preds = %2663, %2660
  %2666 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2667 = icmp eq ptr %2666, null
  br i1 %2667, label %2677, label %2668

2668:                                             ; preds = %2665
  %2669 = call i32 @returnjump_p(ptr noundef nonnull %2666) #25
  %2670 = icmp eq i32 %2669, 0
  br i1 %2670, label %2671, label %2675

2671:                                             ; preds = %2668
  %2672 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %2673 = call i32 @any_uncondjump_p(ptr noundef %2672) #25
  %2674 = icmp eq i32 %2673, 0
  br i1 %2674, label %2677, label %2675

2675:                                             ; preds = %2671, %2668
  store i32 1, ptr %3, align 4, !tbaa !20
  %2676 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  call fastcc void @update_cfg_for_uncondjump(ptr noundef %2676)
  br label %2677

2677:                                             ; preds = %2675, %2671, %2665
  %2678 = load ptr, ptr %6, align 8, !tbaa !5
  %2679 = load i32, ptr %2678, align 8
  %2680 = and i32 %2679, 65535
  %2681 = icmp eq i32 %2680, 23
  br i1 %2681, label %2682, label %2692

2682:                                             ; preds = %2677
  %2683 = getelementptr inbounds %struct.rtx_def, ptr %2678, i64 0, i32 1, i32 0, i32 0, i64 1
  %2684 = load ptr, ptr %2683, align 8, !tbaa !16
  %2685 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %2686 = icmp eq ptr %2684, %2685
  br i1 %2686, label %2687, label %2692

2687:                                             ; preds = %2682
  %2688 = getelementptr inbounds %struct.rtx_def, ptr %2678, i64 0, i32 1
  %2689 = load ptr, ptr %2688, align 8, !tbaa !16
  %2690 = icmp eq ptr %2689, %2684
  br i1 %2690, label %2691, label %2692

2691:                                             ; preds = %2687
  store i32 1, ptr %3, align 4, !tbaa !20
  call fastcc void @update_cfg_for_uncondjump(ptr noundef %0)
  br label %2692

2692:                                             ; preds = %2691, %2687, %2682, %2677
  %2693 = load i32, ptr @combine_successes, align 4, !tbaa !20
  %2694 = add nsw i32 %2693, 1
  store i32 %2694, ptr @combine_successes, align 4, !tbaa !20
  %2695 = load ptr, ptr @undobuf, align 8, !tbaa !117
  %2696 = icmp eq ptr %2695, null
  br i1 %2696, label %2705, label %2697

2697:                                             ; preds = %2692
  %2698 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %2699

2699:                                             ; preds = %2699, %2697
  %2700 = phi ptr [ %2702, %2699 ], [ %2695, %2697 ]
  %2701 = phi ptr [ %2700, %2699 ], [ %2698, %2697 ]
  %2702 = load ptr, ptr %2700, align 8, !tbaa !72
  store ptr %2701, ptr %2700, align 8, !tbaa !72
  %2703 = icmp eq ptr %2702, null
  br i1 %2703, label %2704, label %2699, !llvm.loop !136

2704:                                             ; preds = %2699
  store ptr %2700, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %2705

2705:                                             ; preds = %2692, %2704
  store ptr null, ptr @undobuf, align 8, !tbaa !117
  %2706 = load ptr, ptr @added_links_insn, align 8, !tbaa !5
  %2707 = icmp eq ptr %2706, null
  br i1 %2707, label %2735, label %2708

2708:                                             ; preds = %2705
  %2709 = load ptr, ptr @df, align 8, !tbaa !5
  %2710 = getelementptr inbounds %struct.df, ptr %2709, i64 0, i32 10
  %2711 = load ptr, ptr %2710, align 8, !tbaa !37
  %2712 = getelementptr inbounds %struct.rtx_def, ptr %2706, i64 0, i32 1
  %2713 = load i32, ptr %2712, align 8, !tbaa !16
  %2714 = sext i32 %2713 to i64
  %2715 = getelementptr inbounds ptr, ptr %2711, i64 %2714
  %2716 = load ptr, ptr %2715, align 8, !tbaa !5
  %2717 = getelementptr inbounds %struct.df_insn_info, ptr %2716, i64 0, i32 5
  %2718 = load i32, ptr %2717, align 8, !tbaa !54
  br i1 %2319, label %2727, label %2719

2719:                                             ; preds = %2708
  %2720 = load i32, ptr %2147, align 8, !tbaa !16
  %2721 = sext i32 %2720 to i64
  %2722 = getelementptr inbounds ptr, ptr %2711, i64 %2721
  %2723 = load ptr, ptr %2722, align 8, !tbaa !5
  %2724 = getelementptr inbounds %struct.df_insn_info, ptr %2723, i64 0, i32 5
  %2725 = load i32, ptr %2724, align 8, !tbaa !54
  %2726 = icmp slt i32 %2718, %2725
  br i1 %2726, label %2727, label %2735

2727:                                             ; preds = %2708, %2719
  %2728 = load i32, ptr %2139, align 8, !tbaa !16
  %2729 = sext i32 %2728 to i64
  %2730 = getelementptr inbounds ptr, ptr %2711, i64 %2729
  %2731 = load ptr, ptr %2730, align 8, !tbaa !5
  %2732 = getelementptr inbounds %struct.df_insn_info, ptr %2731, i64 0, i32 5
  %2733 = load i32, ptr %2732, align 8, !tbaa !54
  %2734 = icmp slt i32 %2718, %2733
  br i1 %2734, label %2737, label %2735

2735:                                             ; preds = %2727, %2719, %2705
  %2736 = select i1 %2319, ptr %0, ptr %1047
  br label %2737

2737:                                             ; preds = %1613, %111, %2727, %4, %22, %27, %2735, %1930, %1922, %1902, %876, %845, %642, %610
  %2738 = phi ptr [ null, %1902 ], [ %2736, %2735 ], [ null, %1930 ], [ null, %1922 ], [ null, %1613 ], [ null, %876 ], [ null, %845 ], [ null, %642 ], [ null, %610 ], [ null, %111 ], [ null, %27 ], [ null, %22 ], [ null, %4 ], [ %2706, %2727 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  ret ptr %2738
}

declare ptr @single_set_2(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @find_reg_equal_equiv_note(ptr noundef) local_unnamed_addr #3

declare ptr @copy_rtx(ptr noundef) local_unnamed_addr #3

declare void @default_rtl_profile() local_unnamed_addr #3

declare void @clear_bb_flags() local_unnamed_addr #3

declare zeroext i8 @purge_all_dead_edges() local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #13

declare void @init_recog() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @gen_lowpart_for_combine(i32 noundef %0, ptr noundef %1) #9 {
  %3 = load i32, ptr %1, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = zext i32 %0 to i64
  %7 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !16
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i32 %5, %0
  br i1 %12, label %92, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %0, 16
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = trunc i32 %3 to i16
  switch i16 %16, label %17 [
    i16 35, label %92
    i16 45, label %92
    i16 44, label %92
  ]

17:                                               ; preds = %15, %13
  %18 = icmp ugt i8 %8, 4
  br i1 %18, label %19, label %25

19:                                               ; preds = %17
  %20 = icmp eq i32 %5, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = trunc i32 %3 to i16
  switch i16 %22, label %23 [
    i16 30, label %25
    i16 32, label %25
  ]

23:                                               ; preds = %21, %19
  %24 = icmp eq i8 %11, %8
  br i1 %24, label %25, label %89

25:                                               ; preds = %21, %21, %23, %17
  %26 = and i32 %3, 65535
  %27 = icmp eq i32 %26, 39
  br i1 %27, label %28, label %42

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = load i32, ptr %30, align 8
  %32 = and i32 %31, 65535
  %33 = icmp eq i32 %32, 43
  br i1 %33, label %34, label %42

34:                                               ; preds = %28
  %35 = lshr i32 %31, 16
  %36 = and i32 %35, 255
  %37 = icmp eq i32 %36, %0
  br i1 %37, label %92, label %38

38:                                               ; preds = %34
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %39
  %41 = load i8, ptr %40, align 1, !tbaa !16
  br label %42

42:                                               ; preds = %38, %28, %25
  %43 = phi i8 [ %41, %38 ], [ %11, %28 ], [ %11, %25 ]
  %44 = phi i32 [ %36, %38 ], [ %5, %28 ], [ %5, %25 ]
  %45 = phi ptr [ %30, %38 ], [ %1, %28 ], [ %1, %25 ]
  %46 = tail call ptr @gen_lowpart_common(i32 noundef %0, ptr noundef nonnull %45) #25
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %92

48:                                               ; preds = %42
  %49 = load i32, ptr %45, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 43
  br i1 %51, label %52, label %66

52:                                               ; preds = %48
  %53 = and i32 %49, 134217728
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %89

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.rtx_def, ptr %45, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = tail call i32 @mode_dependent_address_p(ptr noundef %57) #25
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %89

60:                                               ; preds = %55
  %61 = icmp ult i8 %43, %8
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = tail call ptr @gen_rtx_SUBREG(i32 noundef %0, ptr noundef nonnull %45, i32 noundef 0) #25
  br label %92

64:                                               ; preds = %60
  %65 = tail call ptr @adjust_address_1(ptr noundef nonnull %45, i32 noundef %0, i64 noundef 0, i32 noundef 0, i32 noundef 1) #25
  br label %92

66:                                               ; preds = %48
  %67 = zext i32 %50 to i64
  %68 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %67
  %69 = load i32, ptr %68, align 4, !tbaa !16
  %70 = icmp ult i32 %69, 2
  br i1 %70, label %71, label %77

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.rtx_def, ptr %45, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = getelementptr inbounds %struct.rtx_def, ptr %45, i64 0, i32 1, i32 0, i32 0, i64 1
  %75 = load ptr, ptr %74, align 8, !tbaa !16
  %76 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %50, i32 noundef %0, ptr noundef %73, ptr noundef %75) #25
  br label %92

77:                                               ; preds = %66
  %78 = tail call i32 @subreg_lowpart_offset(i32 noundef %0, i32 noundef %44) #25
  %79 = icmp eq i32 %44, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %77
  %81 = tail call i32 @int_mode_for_mode(i32 noundef %0) #25
  %82 = tail call ptr @gen_lowpart_common(i32 noundef %81, ptr noundef nonnull %45) #25
  %83 = icmp eq ptr %82, null
  br i1 %83, label %89, label %84

84:                                               ; preds = %80, %77
  %85 = phi i32 [ %81, %80 ], [ %44, %77 ]
  %86 = phi ptr [ %82, %80 ], [ %45, %77 ]
  %87 = tail call ptr @simplify_gen_subreg(i32 noundef %0, ptr noundef nonnull %86, i32 noundef %85, i32 noundef %78) #25
  %88 = icmp eq ptr %87, null
  br i1 %88, label %89, label %92

89:                                               ; preds = %84, %80, %52, %55, %23
  %90 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %91 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %0, ptr noundef %90) #25
  br label %92

92:                                               ; preds = %84, %62, %64, %42, %34, %15, %15, %15, %2, %89, %71
  %93 = phi ptr [ %91, %89 ], [ %76, %71 ], [ %1, %2 ], [ %1, %15 ], [ %1, %15 ], [ %1, %15 ], [ %30, %34 ], [ %46, %42 ], [ %63, %62 ], [ %65, %64 ], [ %87, %84 ]
  ret ptr %93
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @reg_nonzero_bits_for_combine(ptr noundef %0, i32 noundef %1, ptr nocapture readnone %2, i32 %3, i64 %4, ptr nocapture noundef %5) #9 {
  %7 = load ptr, ptr @reg_stat, align 8
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !94
  %13 = icmp eq ptr %12, null
  br i1 %13, label %89, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 7
  %16 = load i8, ptr %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, %1
  br i1 %18, label %29, label %19

19:                                               ; preds = %14
  %20 = zext i8 %16 to i64
  %21 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !16
  %23 = icmp eq i8 %22, 2
  br i1 %23, label %24, label %89

24:                                               ; preds = %19
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %25
  %27 = load i8, ptr %26, align 1, !tbaa !16
  %28 = icmp eq i8 %27, 2
  br i1 %28, label %29, label %89

29:                                               ; preds = %24, %14
  %30 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 4
  %31 = load i32, ptr %30, align 4, !tbaa !137
  %32 = load i32, ptr @label_tick_ebb_start, align 4, !tbaa !20
  %33 = icmp sge i32 %31, %32
  %34 = load i32, ptr @label_tick, align 4
  %35 = icmp slt i32 %31, %34
  %36 = select i1 %33, i1 %35, i1 false
  br i1 %36, label %86, label %37

37:                                               ; preds = %29
  %38 = icmp eq i32 %31, %34
  br i1 %38, label %39, label %54

39:                                               ; preds = %37
  %40 = load ptr, ptr @df, align 8, !tbaa !5
  %41 = getelementptr inbounds %struct.df, ptr %40, i64 0, i32 10
  %42 = load ptr, ptr %41, align 8, !tbaa !37
  %43 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !93
  %45 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1
  %46 = load i32, ptr %45, align 8, !tbaa !16
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds ptr, ptr %42, i64 %47
  %49 = load ptr, ptr %48, align 8, !tbaa !5
  %50 = getelementptr inbounds %struct.df_insn_info, ptr %49, i64 0, i32 5
  %51 = load i32, ptr %50, align 8, !tbaa !54
  %52 = load i32, ptr @subst_low_luid, align 4, !tbaa !20
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %86, label %54

54:                                               ; preds = %39, %37
  %55 = icmp ugt i32 %9, 52
  br i1 %55, label %56, label %89

56:                                               ; preds = %54
  %57 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %58 = sext i32 %9 to i64
  %59 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %57, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !120
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %89

62:                                               ; preds = %56
  %63 = load ptr, ptr @cfun, align 8, !tbaa !5
  %64 = getelementptr inbounds %struct.function, ptr %63, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !28
  %66 = load ptr, ptr %65, align 8, !tbaa !30
  %67 = getelementptr inbounds %struct.basic_block_def, ptr %66, i64 0, i32 6
  %68 = load ptr, ptr %67, align 8, !tbaa !32
  %69 = getelementptr inbounds %struct.basic_block_def, ptr %68, i64 0, i32 9
  %70 = load i32, ptr %69, align 8, !tbaa !77
  %71 = load ptr, ptr @df, align 8, !tbaa !5
  %72 = getelementptr inbounds %struct.df, ptr %71, i64 0, i32 1, i64 1
  %73 = load ptr, ptr %72, align 8, !tbaa !5
  %74 = getelementptr inbounds %struct.dataflow, ptr %73, i64 0, i32 2
  %75 = load i32, ptr %74, align 8, !tbaa !78
  %76 = icmp ugt i32 %75, %70
  tail call void @llvm.assume(i1 %76)
  %77 = getelementptr inbounds %struct.dataflow, ptr %73, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !80
  %79 = zext i32 %70 to i64
  %80 = getelementptr inbounds ptr, ptr %78, i64 %79
  %81 = load ptr, ptr %80, align 8, !tbaa !5
  %82 = getelementptr inbounds %struct.df_lr_bb_info, ptr %81, i64 0, i32 2
  %83 = load ptr, ptr %82, align 8, !tbaa !81
  %84 = tail call i32 @bitmap_bit_p(ptr noundef %83, i32 noundef %9) #25
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %29, %62, %39
  %87 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 5
  %88 = load i64, ptr %87, align 8, !tbaa !95
  br label %116

89:                                               ; preds = %62, %56, %54, %24, %19, %6
  %90 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %0)
  %91 = icmp eq ptr %90, null
  br i1 %91, label %92, label %120

92:                                               ; preds = %89
  %93 = load i1, ptr @nonzero_sign_valid, align 4
  br i1 %93, label %94, label %120

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 10
  %96 = load i64, ptr %95, align 8, !tbaa !84
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %120, label %98

98:                                               ; preds = %94
  %99 = load i32, ptr %0, align 8
  %100 = lshr i32 %99, 16
  %101 = and i32 %100, 255
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %102
  %104 = load i8, ptr %103, align 1, !tbaa !16
  %105 = zext i32 %1 to i64
  %106 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %105
  %107 = load i8, ptr %106, align 1, !tbaa !16
  %108 = icmp ult i8 %104, %107
  br i1 %108, label %109, label %116

109:                                              ; preds = %98
  %110 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %105
  %111 = load i64, ptr %110, align 8, !tbaa !83
  %112 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %102
  %113 = load i64, ptr %112, align 8, !tbaa !83
  %114 = xor i64 %113, %111
  %115 = or i64 %114, %96
  br label %116

116:                                              ; preds = %98, %109, %86
  %117 = phi i64 [ %88, %86 ], [ %115, %109 ], [ %96, %98 ]
  %118 = load i64, ptr %5, align 8, !tbaa !83
  %119 = and i64 %118, %117
  store i64 %119, ptr %5, align 8, !tbaa !83
  br label %120

120:                                              ; preds = %116, %94, %92, %89
  %121 = phi ptr [ %90, %89 ], [ null, %92 ], [ null, %94 ], [ null, %116 ]
  ret ptr %121
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @reg_num_sign_bit_copies_for_combine(ptr noundef %0, i32 noundef %1, ptr nocapture readnone %2, i32 %3, i32 %4, ptr nocapture noundef writeonly %5) #9 {
  %7 = load ptr, ptr @reg_stat, align 8
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !94
  %13 = icmp eq ptr %12, null
  br i1 %13, label %80, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 7
  %16 = load i8, ptr %15, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, %1
  br i1 %18, label %19, label %80

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 4
  %21 = load i32, ptr %20, align 4, !tbaa !137
  %22 = load i32, ptr @label_tick_ebb_start, align 4, !tbaa !20
  %23 = icmp sge i32 %21, %22
  %24 = load i32, ptr @label_tick, align 4
  %25 = icmp slt i32 %21, %24
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %76, label %27

27:                                               ; preds = %19
  %28 = icmp eq i32 %21, %24
  br i1 %28, label %29, label %44

29:                                               ; preds = %27
  %30 = load ptr, ptr @df, align 8, !tbaa !5
  %31 = getelementptr inbounds %struct.df, ptr %30, i64 0, i32 10
  %32 = load ptr, ptr %31, align 8, !tbaa !37
  %33 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !93
  %35 = getelementptr inbounds %struct.rtx_def, ptr %34, i64 0, i32 1
  %36 = load i32, ptr %35, align 8, !tbaa !16
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds ptr, ptr %32, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !5
  %40 = getelementptr inbounds %struct.df_insn_info, ptr %39, i64 0, i32 5
  %41 = load i32, ptr %40, align 8, !tbaa !54
  %42 = load i32, ptr @subst_low_luid, align 4, !tbaa !20
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %76, label %44

44:                                               ; preds = %29, %27
  %45 = icmp ugt i32 %9, 52
  br i1 %45, label %46, label %80

46:                                               ; preds = %44
  %47 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %48 = sext i32 %9 to i64
  %49 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %47, i64 %48
  %50 = load i32, ptr %49, align 4, !tbaa !120
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %80

52:                                               ; preds = %46
  %53 = load ptr, ptr @cfun, align 8, !tbaa !5
  %54 = getelementptr inbounds %struct.function, ptr %53, i64 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !28
  %56 = load ptr, ptr %55, align 8, !tbaa !30
  %57 = getelementptr inbounds %struct.basic_block_def, ptr %56, i64 0, i32 6
  %58 = load ptr, ptr %57, align 8, !tbaa !32
  %59 = getelementptr inbounds %struct.basic_block_def, ptr %58, i64 0, i32 9
  %60 = load i32, ptr %59, align 8, !tbaa !77
  %61 = load ptr, ptr @df, align 8, !tbaa !5
  %62 = getelementptr inbounds %struct.df, ptr %61, i64 0, i32 1, i64 1
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  %64 = getelementptr inbounds %struct.dataflow, ptr %63, i64 0, i32 2
  %65 = load i32, ptr %64, align 8, !tbaa !78
  %66 = icmp ugt i32 %65, %60
  tail call void @llvm.assume(i1 %66)
  %67 = getelementptr inbounds %struct.dataflow, ptr %63, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !80
  %69 = zext i32 %60 to i64
  %70 = getelementptr inbounds ptr, ptr %68, i64 %69
  %71 = load ptr, ptr %70, align 8, !tbaa !5
  %72 = getelementptr inbounds %struct.df_lr_bb_info, ptr %71, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !81
  %74 = tail call i32 @bitmap_bit_p(ptr noundef %73, i32 noundef %9) #25
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %19, %52, %29
  %77 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 6
  %78 = load i8, ptr %77, align 8, !tbaa !96
  %79 = sext i8 %78 to i32
  br label %101

80:                                               ; preds = %52, %46, %44, %14, %6
  %81 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %0)
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %103

83:                                               ; preds = %80
  %84 = load i1, ptr @nonzero_sign_valid, align 4
  br i1 %84, label %85, label %103

85:                                               ; preds = %83
  %86 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %7, i64 0, i32 2, i64 %10, i32 9
  %87 = load i8, ptr %86, align 1, !tbaa !86
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %103, label %89

89:                                               ; preds = %85
  %90 = zext i8 %87 to i32
  %91 = load i32, ptr %0, align 8
  %92 = lshr i32 %91, 16
  %93 = and i32 %92, 255
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %94
  %96 = load i8, ptr %95, align 1, !tbaa !16
  %97 = zext i32 %1 to i64
  %98 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %97
  %99 = load i8, ptr %98, align 1, !tbaa !16
  %100 = icmp eq i8 %96, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %89, %76
  %102 = phi i32 [ %79, %76 ], [ %90, %89 ]
  store i32 %102, ptr %5, align 4, !tbaa !20
  br label %103

103:                                              ; preds = %101, %83, %85, %89, %80
  %104 = phi ptr [ %81, %80 ], [ null, %89 ], [ null, %85 ], [ null, %83 ], [ null, %101 ]
  ret ptr %104
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal zeroext i8 @reg_truncated_to_mode(i32 %0, ptr nocapture noundef readonly %1) #14 {
  %3 = load ptr, ptr @reg_stat, align 8
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load i32, ptr %4, align 8, !tbaa !16
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %3, i64 0, i32 2, i64 %6, i32 12
  %8 = load i8, ptr %7, align 4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %3, i64 0, i32 2, i64 %6, i32 11
  %12 = load i32, ptr %11, align 8, !tbaa !138
  %13 = load i32, ptr @label_tick_ebb_start, align 4, !tbaa !20
  %14 = icmp sge i32 %12, %13
  %15 = zext i1 %14 to i8
  br label %16

16:                                               ; preds = %10, %2
  %17 = phi i8 [ 0, %2 ], [ %15, %10 ]
  ret i8 %17
}

declare ptr @gen_lowpart_common(i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @mode_dependent_address_p(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_SUBREG(i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @adjust_address_1(ptr noundef, i32 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_ee_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @subreg_lowpart_offset(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @int_mode_for_mode(i32 noundef) local_unnamed_addr #3

declare ptr @simplify_gen_subreg(i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_e_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @bitmap_bit_p(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @get_last_value(ptr noundef %0) unnamed_addr #9 {
  %2 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #25
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = icmp eq i32 %4, 39
  br i1 %5, label %6, label %34

6:                                                ; preds = %1
  %7 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %0) #25
  %8 = icmp eq i32 %7, 0
  %9 = load i32, ptr %0, align 8
  br i1 %8, label %34, label %10

10:                                               ; preds = %6
  %11 = lshr i32 %9, 16
  %12 = and i32 %11, 255
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %13
  %15 = load i8, ptr %14, align 1, !tbaa !16
  %16 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = load i32, ptr %17, align 8
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 255
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !16
  %24 = icmp ugt i8 %15, %23
  br i1 %24, label %34, label %25

25:                                               ; preds = %10
  %26 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %17)
  %27 = icmp eq ptr %26, null
  %28 = load i32, ptr %0, align 8
  br i1 %27, label %34, label %29

29:                                               ; preds = %25
  %30 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %31 = lshr i32 %28, 16
  %32 = and i32 %31, 255
  %33 = tail call ptr %30(i32 noundef %32, ptr noundef nonnull %26) #25
  br label %123

34:                                               ; preds = %25, %10, %6, %1
  %35 = phi i32 [ %28, %25 ], [ %9, %10 ], [ %9, %6 ], [ %3, %1 ]
  %36 = and i32 %35, 65535
  %37 = icmp eq i32 %36, 37
  br i1 %37, label %38, label %123

38:                                               ; preds = %34
  %39 = getelementptr i8, ptr %0, i64 8
  %40 = load i32, ptr %39, align 8, !tbaa !16
  %41 = load ptr, ptr @reg_stat, align 8
  %42 = zext i32 %40 to i64
  %43 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !94
  store ptr %44, ptr %2, align 8, !tbaa !5
  %45 = icmp eq ptr %44, null
  br i1 %45, label %123, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 4
  %48 = load i32, ptr %47, align 4, !tbaa !137
  %49 = load i32, ptr @label_tick_ebb_start, align 4, !tbaa !20
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %85

51:                                               ; preds = %46
  %52 = icmp ult i32 %40, 53
  br i1 %52, label %123, label %53

53:                                               ; preds = %51
  %54 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %55 = sext i32 %40 to i64
  %56 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %54, i64 %55
  %57 = load i32, ptr %56, align 4, !tbaa !120
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %123

59:                                               ; preds = %53
  %60 = load ptr, ptr @cfun, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.function, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %61, align 8, !tbaa !28
  %63 = load ptr, ptr %62, align 8, !tbaa !30
  %64 = getelementptr inbounds %struct.basic_block_def, ptr %63, i64 0, i32 6
  %65 = load ptr, ptr %64, align 8, !tbaa !32
  %66 = getelementptr inbounds %struct.basic_block_def, ptr %65, i64 0, i32 9
  %67 = load i32, ptr %66, align 8, !tbaa !77
  %68 = load ptr, ptr @df, align 8, !tbaa !5
  %69 = getelementptr inbounds %struct.df, ptr %68, i64 0, i32 1, i64 1
  %70 = load ptr, ptr %69, align 8, !tbaa !5
  %71 = getelementptr inbounds %struct.dataflow, ptr %70, i64 0, i32 2
  %72 = load i32, ptr %71, align 8, !tbaa !78
  %73 = icmp ugt i32 %72, %67
  tail call void @llvm.assume(i1 %73)
  %74 = getelementptr inbounds %struct.dataflow, ptr %70, i64 0, i32 1
  %75 = load ptr, ptr %74, align 8, !tbaa !80
  %76 = zext i32 %67 to i64
  %77 = getelementptr inbounds ptr, ptr %75, i64 %76
  %78 = load ptr, ptr %77, align 8, !tbaa !5
  %79 = getelementptr inbounds %struct.df_lr_bb_info, ptr %78, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !81
  %81 = tail call i32 @bitmap_bit_p(ptr noundef %80, i32 noundef %40) #25
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %123

83:                                               ; preds = %59
  %84 = load i32, ptr %47, align 4, !tbaa !137
  br label %85

85:                                               ; preds = %83, %46
  %86 = phi i32 [ %84, %83 ], [ %48, %46 ]
  %87 = load i32, ptr @label_tick, align 4, !tbaa !20
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %92, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !93
  br label %107

92:                                               ; preds = %85
  %93 = load ptr, ptr @df, align 8, !tbaa !5
  %94 = getelementptr inbounds %struct.df, ptr %93, i64 0, i32 10
  %95 = load ptr, ptr %94, align 8, !tbaa !37
  %96 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 1
  %97 = load ptr, ptr %96, align 8, !tbaa !93
  %98 = getelementptr inbounds %struct.rtx_def, ptr %97, i64 0, i32 1
  %99 = load i32, ptr %98, align 8, !tbaa !16
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds ptr, ptr %95, i64 %100
  %102 = load ptr, ptr %101, align 8, !tbaa !5
  %103 = getelementptr inbounds %struct.df_insn_info, ptr %102, i64 0, i32 5
  %104 = load i32, ptr %103, align 8, !tbaa !54
  %105 = load i32, ptr @subst_low_luid, align 4, !tbaa !20
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %123

107:                                              ; preds = %89, %92
  %108 = phi ptr [ %91, %89 ], [ %97, %92 ]
  %109 = call fastcc i32 @get_last_value_validate(ptr noundef nonnull %2, ptr noundef %108, i32 noundef %86, i32 noundef 0)
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %113, label %111

111:                                              ; preds = %107
  %112 = load ptr, ptr %2, align 8, !tbaa !5
  br label %123

113:                                              ; preds = %107
  %114 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 1
  %115 = load ptr, ptr %2, align 8, !tbaa !5
  %116 = tail call ptr @copy_rtx(ptr noundef %115) #25
  store ptr %116, ptr %2, align 8, !tbaa !5
  %117 = load ptr, ptr %114, align 8, !tbaa !93
  %118 = load i32, ptr %47, align 4, !tbaa !137
  %119 = call fastcc i32 @get_last_value_validate(ptr noundef nonnull %2, ptr noundef %117, i32 noundef %118, i32 noundef 1)
  %120 = icmp eq i32 %119, 0
  %121 = load ptr, ptr %2, align 8
  %122 = select i1 %120, ptr null, ptr %121
  br label %123

123:                                              ; preds = %113, %92, %38, %51, %53, %59, %34, %111, %29
  %124 = phi ptr [ %33, %29 ], [ %112, %111 ], [ null, %34 ], [ null, %59 ], [ null, %53 ], [ null, %51 ], [ null, %38 ], [ null, %92 ], [ %122, %113 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #25
  ret ptr %124
}

declare i32 @subreg_lowpart_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @get_last_value_validate(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  br label %6

6:                                                ; preds = %187, %4
  %7 = phi ptr [ %0, %4 ], [ %190, %187 ]
  %8 = load ptr, ptr %7, align 8, !tbaa !5
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %11
  %13 = load ptr, ptr %12, align 8, !tbaa !5
  %14 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %11
  %15 = load i8, ptr %14, align 1, !tbaa !16
  %16 = trunc i32 %9 to i16
  switch i16 %16, label %126 [
    i16 37, label %17
    i16 43, label %106
  ]

17:                                               ; preds = %6
  %18 = getelementptr i8, ptr %8, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = freeze i32 %19
  %21 = icmp ult i32 %20, 53
  br i1 %21, label %22, label %30

22:                                               ; preds = %17
  %23 = lshr i32 %9, 16
  %24 = and i32 %23, 255
  %25 = zext i32 %20 to i64
  %26 = zext i32 %24 to i64
  %27 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %25, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !16
  %29 = zext i8 %28 to i32
  br label %30

30:                                               ; preds = %17, %22
  %31 = phi i32 [ %29, %22 ], [ 1, %17 ]
  %32 = add i32 %31, %20
  %33 = icmp ult i32 %20, %32
  br i1 %33, label %34, label %216

34:                                               ; preds = %30
  %35 = icmp ugt i32 %20, 52
  %36 = sext i32 %20 to i64
  br i1 %35, label %37, label %86

37:                                               ; preds = %34
  %38 = zext i32 %20 to i64
  %39 = load ptr, ptr @reg_stat, align 8
  br label %40

40:                                               ; preds = %37, %81
  %41 = phi ptr [ %39, %37 ], [ %82, %81 ]
  %42 = phi i64 [ %38, %37 ], [ %83, %81 ]
  %43 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 8
  %44 = load i8, ptr %43, align 2, !tbaa !92
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %98

46:                                               ; preds = %40
  %47 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %48 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %47, i64 %36
  %49 = load i32, ptr %48, align 4, !tbaa !120
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %76

51:                                               ; preds = %46
  %52 = load ptr, ptr @cfun, align 8, !tbaa !5
  %53 = getelementptr inbounds %struct.function, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !28
  %55 = load ptr, ptr %54, align 8, !tbaa !30
  %56 = getelementptr inbounds %struct.basic_block_def, ptr %55, i64 0, i32 6
  %57 = load ptr, ptr %56, align 8, !tbaa !32
  %58 = getelementptr inbounds %struct.basic_block_def, ptr %57, i64 0, i32 9
  %59 = load i32, ptr %58, align 8, !tbaa !77
  %60 = load ptr, ptr @df, align 8, !tbaa !5
  %61 = getelementptr inbounds %struct.df, ptr %60, i64 0, i32 1, i64 1
  %62 = load ptr, ptr %61, align 8, !tbaa !5
  %63 = getelementptr inbounds %struct.dataflow, ptr %62, i64 0, i32 2
  %64 = load i32, ptr %63, align 8, !tbaa !78
  %65 = icmp ugt i32 %64, %59
  tail call void @llvm.assume(i1 %65)
  %66 = getelementptr inbounds %struct.dataflow, ptr %62, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !80
  %68 = zext i32 %59 to i64
  %69 = getelementptr inbounds ptr, ptr %67, i64 %68
  %70 = load ptr, ptr %69, align 8, !tbaa !5
  %71 = getelementptr inbounds %struct.df_lr_bb_info, ptr %70, i64 0, i32 2
  %72 = load ptr, ptr %71, align 8, !tbaa !81
  %73 = tail call i32 @bitmap_bit_p(ptr noundef %72, i32 noundef %20) #25
  %74 = icmp eq i32 %73, 0
  %75 = load ptr, ptr @reg_stat, align 8
  br i1 %74, label %81, label %76

76:                                               ; preds = %51, %46
  %77 = phi ptr [ %75, %51 ], [ %41, %46 ]
  %78 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %41, i64 0, i32 2, i64 %42, i32 4
  %79 = load i32, ptr %78, align 4, !tbaa !137
  %80 = icmp sgt i32 %79, %2
  br i1 %80, label %98, label %81

81:                                               ; preds = %76, %51
  %82 = phi ptr [ %77, %76 ], [ %75, %51 ]
  %83 = add nuw nsw i64 %42, 1
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %32, %84
  br i1 %85, label %216, label %40, !llvm.loop !139

86:                                               ; preds = %34
  %87 = load ptr, ptr @reg_stat, align 8
  %88 = zext i32 %20 to i64
  br label %89

89:                                               ; preds = %86, %102
  %90 = phi i64 [ %88, %86 ], [ %103, %102 ]
  %91 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %90, i32 8
  %92 = load i8, ptr %91, align 2, !tbaa !92
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %98

94:                                               ; preds = %89
  %95 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %90, i32 4
  %96 = load i32, ptr %95, align 4, !tbaa !137
  %97 = icmp sgt i32 %96, %2
  br i1 %97, label %98, label %102

98:                                               ; preds = %89, %94, %40, %76
  %99 = icmp eq i32 %3, 0
  br i1 %99, label %216, label %100

100:                                              ; preds = %98
  %101 = load i32, ptr %8, align 8
  br label %210

102:                                              ; preds = %94
  %103 = add nuw nsw i64 %90, 1
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %32, %104
  br i1 %105, label %216, label %89, !llvm.loop !139

106:                                              ; preds = %6
  %107 = and i32 %9, 67108864
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %126

109:                                              ; preds = %106
  %110 = load i32, ptr @label_tick, align 4, !tbaa !20
  %111 = icmp eq i32 %110, %2
  br i1 %111, label %112, label %124

112:                                              ; preds = %109
  %113 = load ptr, ptr @df, align 8, !tbaa !5
  %114 = getelementptr inbounds %struct.df, ptr %113, i64 0, i32 10
  %115 = load ptr, ptr %114, align 8, !tbaa !37
  %116 = load i32, ptr %5, align 8, !tbaa !16
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds ptr, ptr %115, i64 %117
  %119 = load ptr, ptr %118, align 8, !tbaa !5
  %120 = getelementptr inbounds %struct.df_insn_info, ptr %119, i64 0, i32 5
  %121 = load i32, ptr %120, align 8, !tbaa !54
  %122 = load i32, ptr @mem_last_set, align 4, !tbaa !20
  %123 = icmp sgt i32 %121, %122
  br i1 %123, label %126, label %124

124:                                              ; preds = %112, %109
  %125 = icmp eq i32 %3, 0
  br i1 %125, label %216, label %210

126:                                              ; preds = %6, %106, %112
  %127 = icmp eq i8 %15, 0
  br i1 %127, label %216, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %130 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1, i32 0, i32 0, i64 1
  %131 = zext i8 %15 to i64
  br label %132

132:                                              ; preds = %128, %207
  %133 = phi i64 [ 0, %128 ], [ %208, %207 ]
  %134 = getelementptr inbounds i8, ptr %13, i64 %133
  %135 = load i8, ptr %134, align 1, !tbaa !16
  switch i8 %135, label %207 [
    i8 101, label %141
    i8 69, label %136
  ]

136:                                              ; preds = %132
  %137 = getelementptr inbounds [1 x %union.rtunion_def], ptr %129, i64 0, i64 %133
  %138 = load ptr, ptr %137, align 8, !tbaa !16
  %139 = load i32, ptr %138, align 8, !tbaa !99
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %201, label %207

141:                                              ; preds = %132
  %142 = icmp eq i64 %133, 1
  br i1 %142, label %143, label %191

143:                                              ; preds = %141
  %144 = load i32, ptr %8, align 8
  %145 = and i32 %144, 65535
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %146
  %148 = load i32, ptr %147, align 4, !tbaa !16
  %149 = and i32 %148, -2
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %151, label %191

151:                                              ; preds = %143
  %152 = load ptr, ptr %129, align 8, !tbaa !16
  %153 = load ptr, ptr %130, align 8, !tbaa !16
  %154 = icmp eq ptr %152, %153
  br i1 %154, label %216, label %155

155:                                              ; preds = %151
  %156 = load i32, ptr %152, align 8
  %157 = and i32 %156, 65535
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %158
  %160 = load i32, ptr %159, align 4, !tbaa !16
  %161 = and i32 %160, -2
  %162 = icmp eq i32 %161, 2
  br i1 %162, label %163, label %171

163:                                              ; preds = %155
  %164 = getelementptr inbounds %struct.rtx_def, ptr %152, i64 0, i32 1
  %165 = load ptr, ptr %164, align 8, !tbaa !16
  %166 = icmp eq ptr %153, %165
  br i1 %166, label %216, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.rtx_def, ptr %152, i64 0, i32 1, i32 0, i32 0, i64 1
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = icmp eq ptr %153, %169
  br i1 %170, label %216, label %171

171:                                              ; preds = %167, %155
  %172 = load i32, ptr %153, align 8
  %173 = and i32 %172, 65535
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %174
  %176 = load i32, ptr %175, align 4, !tbaa !16
  %177 = and i32 %176, -2
  %178 = icmp eq i32 %177, 2
  br i1 %178, label %179, label %191

179:                                              ; preds = %171
  %180 = getelementptr inbounds %struct.rtx_def, ptr %153, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !16
  %182 = icmp eq ptr %152, %181
  br i1 %182, label %187, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.rtx_def, ptr %153, i64 0, i32 1, i32 0, i32 0, i64 1
  %185 = load ptr, ptr %184, align 8, !tbaa !16
  %186 = icmp eq ptr %152, %185
  br i1 %186, label %187, label %191

187:                                              ; preds = %183, %179
  %188 = getelementptr inbounds %struct.rtx_def, ptr %153, i64 0, i32 1
  %189 = zext i1 %182 to i64
  %190 = getelementptr inbounds [1 x %union.rtunion_def], ptr %188, i64 0, i64 %189
  br label %6

191:                                              ; preds = %183, %171, %143, %141
  %192 = getelementptr inbounds [1 x %union.rtunion_def], ptr %129, i64 0, i64 %133
  %193 = tail call fastcc i32 @get_last_value_validate(ptr noundef nonnull %192, ptr noundef %1, i32 noundef %2, i32 noundef %3)
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %216, label %207

195:                                              ; preds = %201
  %196 = add nuw nsw i64 %202, 1
  %197 = load ptr, ptr %137, align 8, !tbaa !16
  %198 = load i32, ptr %197, align 8, !tbaa !99
  %199 = sext i32 %198 to i64
  %200 = icmp slt i64 %196, %199
  br i1 %200, label %201, label %207, !llvm.loop !140

201:                                              ; preds = %136, %195
  %202 = phi i64 [ %196, %195 ], [ 0, %136 ]
  %203 = phi ptr [ %197, %195 ], [ %138, %136 ]
  %204 = getelementptr inbounds %struct.rtvec_def, ptr %203, i64 0, i32 1, i64 %202
  %205 = tail call fastcc i32 @get_last_value_validate(ptr noundef nonnull %204, ptr noundef %1, i32 noundef %2, i32 noundef %3)
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %216, label %195

207:                                              ; preds = %195, %136, %132, %191
  %208 = add nuw nsw i64 %133, 1
  %209 = icmp eq i64 %208, %131
  br i1 %209, label %216, label %132, !llvm.loop !141

210:                                              ; preds = %124, %100
  %211 = phi i32 [ %101, %100 ], [ %9, %124 ]
  %212 = lshr i32 %211, 16
  %213 = and i32 %212, 255
  %214 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %215 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %213, ptr noundef %214) #25
  store ptr %215, ptr %7, align 8, !tbaa !5
  br label %216

216:                                              ; preds = %126, %191, %207, %151, %167, %163, %201, %102, %81, %210, %30, %98, %124
  %217 = phi i32 [ 0, %124 ], [ 0, %98 ], [ 1, %30 ], [ %3, %210 ], [ 1, %81 ], [ 1, %102 ], [ 0, %201 ], [ 0, %191 ], [ 1, %207 ], [ 1, %151 ], [ 1, %167 ], [ 1, %163 ], [ 1, %126 ]
  ret i32 %217
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #15

declare ptr @vec_heap_o_reserve_exact(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare ptr @cgraph_local_info(ptr noundef) local_unnamed_addr #3

declare i32 @vector_type_mode(ptr noundef) local_unnamed_addr #3

declare i32 @promote_function_mode(ptr noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @record_value_for_reg(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  store ptr %2, ptr %4, align 8, !tbaa !5
  %5 = getelementptr i8, ptr %0, i64 8
  %6 = load i32, ptr %5, align 8, !tbaa !16
  %7 = icmp ult i32 %6, 53
  br i1 %7, label %8, label %17

8:                                                ; preds = %3
  %9 = load i32, ptr %0, align 8
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  %12 = zext i32 %6 to i64
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %12, i64 %13
  %15 = load i8, ptr %14, align 1, !tbaa !16
  %16 = zext i8 %15 to i32
  br label %17

17:                                               ; preds = %3, %8
  %18 = phi i32 [ %16, %8 ], [ 1, %3 ]
  %19 = add i32 %18, %6
  %20 = icmp ne ptr %2, null
  %21 = icmp ne ptr %1, null
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %78

23:                                               ; preds = %17
  %24 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %0, ptr noundef nonnull %2) #25
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %78, label %26

26:                                               ; preds = %23
  %27 = load ptr, ptr @df, align 8, !tbaa !5
  %28 = getelementptr inbounds %struct.df, ptr %27, i64 0, i32 10
  %29 = load ptr, ptr %28, align 8, !tbaa !37
  %30 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds ptr, ptr %29, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !5
  %35 = getelementptr inbounds %struct.df_insn_info, ptr %34, i64 0, i32 5
  %36 = load i32, ptr %35, align 8, !tbaa !54
  store i32 %36, ptr @subst_low_luid, align 4, !tbaa !20
  %37 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %0)
  %38 = icmp eq ptr %37, null
  br i1 %38, label %78, label %39

39:                                               ; preds = %26
  %40 = load i32, ptr %37, align 8
  %41 = and i32 %40, 65535
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !16
  %45 = and i32 %44, -2
  %46 = icmp eq i32 %45, 2
  br i1 %46, label %47, label %59

47:                                               ; preds = %39
  %48 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = load i32, ptr %49, align 8
  %51 = and i32 %50, 65535
  %52 = icmp eq i32 %51, 25
  br i1 %52, label %53, label %59

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1, i32 0, i32 0, i64 1
  %55 = load ptr, ptr %54, align 8, !tbaa !16
  %56 = load i32, ptr %55, align 8
  %57 = and i32 %56, 65535
  %58 = icmp eq i32 %57, 25
  br i1 %58, label %74, label %59

59:                                               ; preds = %53, %47, %39
  %60 = tail call i32 @count_occurrences(ptr noundef nonnull %2, ptr noundef nonnull %0, i32 noundef 1) #25
  %61 = icmp sgt i32 %60, 1
  br i1 %61, label %62, label %74

62:                                               ; preds = %59
  %63 = tail call fastcc i32 @count_rtxs(ptr noundef nonnull %37)
  %64 = load ptr, ptr @compiler_params, align 8, !tbaa !5
  %65 = getelementptr inbounds %struct.param_info, ptr %64, i64 89, i32 1
  %66 = load i32, ptr %65, align 8, !tbaa !142
  %67 = icmp sgt i32 %63, %66
  br i1 %67, label %68, label %74

68:                                               ; preds = %62
  %69 = load i32, ptr %37, align 8
  %70 = lshr i32 %69, 16
  %71 = and i32 %70, 255
  %72 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %73 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %71, ptr noundef %72) #25
  br label %74

74:                                               ; preds = %53, %59, %68, %62
  %75 = phi ptr [ %73, %68 ], [ %37, %62 ], [ %37, %59 ], [ %49, %53 ]
  %76 = tail call ptr @copy_rtx(ptr noundef nonnull %2) #25
  %77 = tail call ptr @replace_rtx(ptr noundef %76, ptr noundef nonnull %0, ptr noundef %75) #25
  store ptr %77, ptr %4, align 8, !tbaa !5
  br label %78

78:                                               ; preds = %26, %74, %23, %17
  %79 = phi ptr [ %2, %26 ], [ %77, %74 ], [ %2, %23 ], [ %2, %17 ]
  %80 = icmp ult i32 %6, %19
  br i1 %80, label %81, label %109

81:                                               ; preds = %78
  %82 = zext i32 %6 to i64
  %83 = zext i32 %19 to i64
  br i1 %21, label %86, label %84

84:                                               ; preds = %81
  %85 = load ptr, ptr @reg_stat, align 8
  br label %99

86:                                               ; preds = %81
  %87 = load ptr, ptr @reg_stat, align 8
  br label %88

88:                                               ; preds = %86, %88
  %89 = phi i64 [ %97, %88 ], [ %82, %86 ]
  %90 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89
  %91 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 1
  store ptr %1, ptr %91, align 8, !tbaa !93
  %92 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 2
  store ptr null, ptr %92, align 8, !tbaa !94
  %93 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 7
  store i8 0, ptr %93, align 1
  %94 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 5
  store i64 0, ptr %94, align 8, !tbaa !95
  %95 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 6
  store i8 0, ptr %95, align 8, !tbaa !96
  store ptr null, ptr %90, align 8, !tbaa !88
  %96 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %87, i64 0, i32 2, i64 %89, i32 12
  store i8 0, ptr %96, align 4
  %97 = add nuw nsw i64 %89, 1
  %98 = icmp eq i64 %97, %83
  br i1 %98, label %109, label %88, !llvm.loop !144

99:                                               ; preds = %84, %99
  %100 = phi i64 [ %107, %99 ], [ %82, %84 ]
  %101 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100
  %102 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100, i32 2
  store ptr null, ptr %102, align 8, !tbaa !94
  %103 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100, i32 7
  store i8 0, ptr %103, align 1
  %104 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100, i32 5
  store i64 0, ptr %104, align 8, !tbaa !95
  %105 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100, i32 6
  store i8 0, ptr %105, align 8, !tbaa !96
  store ptr null, ptr %101, align 8, !tbaa !88
  %106 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %85, i64 0, i32 2, i64 %100, i32 12
  store i8 0, ptr %106, align 4
  %107 = add nuw nsw i64 %100, 1
  %108 = icmp eq i64 %107, %83
  br i1 %108, label %109, label %99, !llvm.loop !144

109:                                              ; preds = %99, %88, %78
  %110 = icmp eq ptr %79, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %109
  tail call fastcc void @update_table_tick(ptr noundef nonnull %79)
  br label %112

112:                                              ; preds = %111, %109
  br i1 %80, label %115, label %113

113:                                              ; preds = %112
  %114 = zext i32 %6 to i64
  br label %209

115:                                              ; preds = %112
  %116 = load i32, ptr @label_tick, align 4, !tbaa !20
  %117 = load i32, ptr @label_tick_ebb_start, align 4
  %118 = zext i32 %6 to i64
  %119 = zext i32 %19 to i64
  br i1 %21, label %136, label %120

120:                                              ; preds = %115
  %121 = sub nsw i64 %119, %118
  %122 = xor i64 %118, -1
  %123 = and i64 %121, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %130, label %125

125:                                              ; preds = %120
  %126 = load ptr, ptr @reg_stat, align 8
  %127 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %126, i64 0, i32 2, i64 %118, i32 4
  store i32 %116, ptr %127, align 4, !tbaa !137
  %128 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %126, i64 0, i32 2, i64 %118, i32 8
  store i8 1, ptr %128, align 2, !tbaa !92
  %129 = add nuw nsw i64 %118, 1
  br label %130

130:                                              ; preds = %125, %120
  %131 = phi i64 [ %118, %120 ], [ %129, %125 ]
  %132 = sub nsw i64 0, %119
  %133 = icmp eq i64 %122, %132
  br i1 %133, label %209, label %134

134:                                              ; preds = %130
  %135 = load ptr, ptr @reg_stat, align 8
  br label %200

136:                                              ; preds = %115
  br i1 %110, label %158, label %137

137:                                              ; preds = %136
  %138 = sub nsw i64 %119, %118
  %139 = xor i64 %118, -1
  %140 = and i64 %138, 1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %151, label %142

142:                                              ; preds = %137
  %143 = load ptr, ptr @reg_stat, align 8
  %144 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %143, i64 0, i32 2, i64 %118, i32 4
  store i32 %116, ptr %144, align 4, !tbaa !137
  %145 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %143, i64 0, i32 2, i64 %118, i32 3
  %146 = load i32, ptr %145, align 8, !tbaa !145
  %147 = icmp sge i32 %146, %117
  %148 = zext i1 %147 to i8
  %149 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %143, i64 0, i32 2, i64 %118, i32 8
  store i8 %148, ptr %149, align 2
  %150 = add nuw nsw i64 %118, 1
  br label %151

151:                                              ; preds = %142, %137
  %152 = phi i64 [ %118, %137 ], [ %150, %142 ]
  %153 = sub nsw i64 0, %119
  %154 = icmp eq i64 %139, %153
  br i1 %154, label %209, label %155

155:                                              ; preds = %151
  %156 = load ptr, ptr @reg_stat, align 8
  %157 = load ptr, ptr @reg_stat, align 8
  br label %183

158:                                              ; preds = %136
  %159 = sub nsw i64 %119, %118
  %160 = xor i64 %118, -1
  %161 = and i64 %159, 1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %168, label %163

163:                                              ; preds = %158
  %164 = load ptr, ptr @reg_stat, align 8
  %165 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %164, i64 0, i32 2, i64 %118, i32 4
  store i32 %116, ptr %165, align 4, !tbaa !137
  %166 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %164, i64 0, i32 2, i64 %118, i32 8
  store i8 0, ptr %166, align 2, !tbaa !92
  %167 = add nuw nsw i64 %118, 1
  br label %168

168:                                              ; preds = %163, %158
  %169 = phi i64 [ %118, %158 ], [ %167, %163 ]
  %170 = sub nsw i64 0, %119
  %171 = icmp eq i64 %160, %170
  br i1 %171, label %209, label %172

172:                                              ; preds = %168
  %173 = load ptr, ptr @reg_stat, align 8
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ %169, %172 ], [ %181, %174 ]
  %176 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %173, i64 0, i32 2, i64 %175, i32 4
  store i32 %116, ptr %176, align 4, !tbaa !137
  %177 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %173, i64 0, i32 2, i64 %175, i32 8
  store i8 0, ptr %177, align 2, !tbaa !92
  %178 = add nuw nsw i64 %175, 1
  %179 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %173, i64 0, i32 2, i64 %178, i32 4
  store i32 %116, ptr %179, align 4, !tbaa !137
  %180 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %173, i64 0, i32 2, i64 %178, i32 8
  store i8 0, ptr %180, align 2, !tbaa !92
  %181 = add nuw nsw i64 %175, 2
  %182 = icmp eq i64 %181, %119
  br i1 %182, label %209, label %174, !llvm.loop !146

183:                                              ; preds = %183, %155
  %184 = phi i64 [ %152, %155 ], [ %198, %183 ]
  %185 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %156, i64 0, i32 2, i64 %184, i32 4
  store i32 %116, ptr %185, align 4, !tbaa !137
  %186 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %156, i64 0, i32 2, i64 %184, i32 3
  %187 = load i32, ptr %186, align 8, !tbaa !145
  %188 = icmp sge i32 %187, %117
  %189 = zext i1 %188 to i8
  %190 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %156, i64 0, i32 2, i64 %184, i32 8
  store i8 %189, ptr %190, align 2
  %191 = add nuw nsw i64 %184, 1
  %192 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %157, i64 0, i32 2, i64 %191, i32 4
  store i32 %116, ptr %192, align 4, !tbaa !137
  %193 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %157, i64 0, i32 2, i64 %191, i32 3
  %194 = load i32, ptr %193, align 8, !tbaa !145
  %195 = icmp sge i32 %194, %117
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %157, i64 0, i32 2, i64 %191, i32 8
  store i8 %196, ptr %197, align 2
  %198 = add nuw nsw i64 %184, 2
  %199 = icmp eq i64 %198, %119
  br i1 %199, label %209, label %183, !llvm.loop !146

200:                                              ; preds = %200, %134
  %201 = phi i64 [ %131, %134 ], [ %207, %200 ]
  %202 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %201, i32 4
  store i32 %116, ptr %202, align 4, !tbaa !137
  %203 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %201, i32 8
  store i8 1, ptr %203, align 2, !tbaa !92
  %204 = add nuw nsw i64 %201, 1
  %205 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %204, i32 4
  store i32 %116, ptr %205, align 4, !tbaa !137
  %206 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %204, i32 8
  store i8 1, ptr %206, align 2, !tbaa !92
  %207 = add nuw nsw i64 %201, 2
  %208 = icmp eq i64 %207, %119
  br i1 %208, label %209, label %200, !llvm.loop !146

209:                                              ; preds = %130, %200, %151, %183, %168, %174, %113
  %210 = phi i64 [ %114, %113 ], [ %118, %174 ], [ %118, %168 ], [ %118, %183 ], [ %118, %151 ], [ %118, %200 ], [ %118, %130 ]
  %211 = load ptr, ptr @reg_stat, align 8
  br i1 %110, label %212, label %214

212:                                              ; preds = %209
  %213 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 2
  store ptr null, ptr %213, align 8, !tbaa !94
  br label %268

214:                                              ; preds = %209
  %215 = load i32, ptr @label_tick, align 4, !tbaa !20
  %216 = call fastcc i32 @get_last_value_validate(ptr noundef nonnull %4, ptr noundef %1, i32 noundef %215, i32 noundef 0)
  %217 = icmp eq i32 %216, 0
  %218 = load ptr, ptr %4, align 8, !tbaa !5
  br i1 %217, label %219, label %228

219:                                              ; preds = %214
  %220 = tail call ptr @copy_rtx(ptr noundef %218) #25
  store ptr %220, ptr %4, align 8, !tbaa !5
  %221 = load i32, ptr @label_tick, align 4, !tbaa !20
  %222 = call fastcc i32 @get_last_value_validate(ptr noundef nonnull %4, ptr noundef %1, i32 noundef %221, i32 noundef 1)
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %226, label %224

224:                                              ; preds = %219
  %225 = load ptr, ptr %4, align 8, !tbaa !5
  br label %228

226:                                              ; preds = %219
  %227 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 2
  store ptr null, ptr %227, align 8, !tbaa !94
  br label %268

228:                                              ; preds = %224, %214
  %229 = phi ptr [ %225, %224 ], [ %218, %214 ]
  %230 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 2
  store ptr %229, ptr %230, align 8, !tbaa !94
  %231 = icmp eq ptr %229, null
  br i1 %231, label %268, label %232

232:                                              ; preds = %228
  %233 = load i32, ptr %0, align 8
  %234 = lshr i32 %233, 16
  %235 = and i32 %234, 255
  %236 = load ptr, ptr @df, align 8, !tbaa !5
  %237 = getelementptr inbounds %struct.df, ptr %236, i64 0, i32 10
  %238 = load ptr, ptr %237, align 8, !tbaa !37
  %239 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %240 = load i32, ptr %239, align 8, !tbaa !16
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds ptr, ptr %238, i64 %241
  %243 = load ptr, ptr %242, align 8, !tbaa !5
  %244 = getelementptr inbounds %struct.df_insn_info, ptr %243, i64 0, i32 5
  %245 = load i32, ptr %244, align 8, !tbaa !54
  store i32 %245, ptr @subst_low_luid, align 4, !tbaa !20
  %246 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 7
  %247 = trunc i32 %234 to i8
  store i8 %247, ptr %246, align 1
  %248 = zext i32 %235 to i64
  %249 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %248
  %250 = load i8, ptr %249, align 1, !tbaa !16
  %251 = icmp eq i8 %250, 2
  br i1 %251, label %252, label %258

252:                                              ; preds = %232
  %253 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %248
  %254 = load i8, ptr %253, align 1, !tbaa !16
  %255 = icmp ult i8 %254, 9
  %256 = load i32, ptr @nonzero_bits_mode, align 4
  %257 = select i1 %255, i32 %256, i32 %235
  br label %258

258:                                              ; preds = %252, %232
  %259 = phi i32 [ %235, %232 ], [ %257, %252 ]
  %260 = tail call i64 @nonzero_bits(ptr noundef nonnull %229, i32 noundef %259) #25
  %261 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 5
  store i64 %260, ptr %261, align 8, !tbaa !95
  %262 = load i32, ptr %0, align 8
  %263 = lshr i32 %262, 16
  %264 = and i32 %263, 255
  %265 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %229, i32 noundef %264) #25
  %266 = trunc i32 %265 to i8
  %267 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %211, i64 0, i32 2, i64 %210, i32 6
  store i8 %266, ptr %267, align 8, !tbaa !96
  br label %268

268:                                              ; preds = %212, %226, %258, %228
  ret void
}

declare i32 @reg_overlap_mentioned_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @count_occurrences(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc i32 @count_rtxs(ptr noundef readonly %0) unnamed_addr #16 {
  br label %2

2:                                                ; preds = %73, %1
  %3 = phi i32 [ 0, %1 ], [ %77, %73 ]
  %4 = phi ptr [ %0, %1 ], [ %74, %73 ]
  br label %5

5:                                                ; preds = %48, %2
  %6 = phi i32 [ 0, %2 ], [ %51, %48 ]
  %7 = phi ptr [ %4, %2 ], [ %49, %48 ]
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 65535
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !16
  switch i32 %12, label %78 [
    i32 50, label %13
    i32 99, label %13
  ]

13:                                               ; preds = %5, %5
  %14 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = icmp eq ptr %15, %17
  br i1 %18, label %21, label %27

19:                                               ; preds = %21, %117
  %20 = phi i32 [ %120, %117 ], [ %26, %21 ]
  ret i32 %20

21:                                               ; preds = %13
  %22 = tail call fastcc i32 @count_rtxs(ptr noundef %15)
  %23 = shl nsw i32 %22, 1
  %24 = add i32 %6, 1
  %25 = add i32 %24, %23
  %26 = add i32 %25, %3
  br label %19

27:                                               ; preds = %13
  %28 = load i32, ptr %17, align 8
  %29 = and i32 %28, 65535
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  switch i32 %32, label %52 [
    i32 50, label %33
    i32 99, label %33
  ]

33:                                               ; preds = %27, %27
  %34 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = icmp eq ptr %15, %35
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 0, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = icmp eq ptr %15, %39
  br i1 %40, label %41, label %52

41:                                               ; preds = %37, %33
  %42 = tail call fastcc i32 @count_rtxs(ptr noundef %15)
  %43 = shl nsw i32 %42, 1
  %44 = icmp eq ptr %35, %7
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 0, i64 1
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  br label %48

48:                                               ; preds = %41, %45
  %49 = phi ptr [ %47, %45 ], [ %35, %41 ]
  %50 = add i32 %6, 2
  %51 = add i32 %50, %43
  br label %5

52:                                               ; preds = %27, %37
  %53 = load i32, ptr %15, align 8
  %54 = and i32 %53, 65535
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %55
  %57 = load i32, ptr %56, align 4, !tbaa !16
  switch i32 %57, label %78 [
    i32 50, label %58
    i32 99, label %58
  ]

58:                                               ; preds = %52, %52
  %59 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = icmp eq ptr %17, %60
  br i1 %61, label %66, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 0, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = icmp eq ptr %17, %64
  br i1 %65, label %66, label %78

66:                                               ; preds = %62, %58
  %67 = tail call fastcc i32 @count_rtxs(ptr noundef nonnull %17)
  %68 = shl nsw i32 %67, 1
  %69 = icmp eq ptr %60, %7
  br i1 %69, label %70, label %73

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 0, i64 1
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  br label %73

73:                                               ; preds = %66, %70
  %74 = phi ptr [ %72, %70 ], [ %60, %66 ]
  %75 = add i32 %6, 2
  %76 = add i32 %75, %68
  %77 = add i32 %76, %3
  br label %2

78:                                               ; preds = %5, %52, %62
  %79 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %10
  %80 = load ptr, ptr %79, align 8, !tbaa !5
  %81 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %10
  %82 = load i8, ptr %81, align 1, !tbaa !16
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %117, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %86 = zext i8 %82 to i64
  br label %87

87:                                               ; preds = %84, %114
  %88 = phi i64 [ %86, %84 ], [ %90, %114 ]
  %89 = phi i32 [ 1, %84 ], [ %115, %114 ]
  %90 = add nsw i64 %88, -1
  %91 = getelementptr inbounds i8, ptr %80, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !16
  switch i8 %92, label %114 [
    i8 101, label %100
    i8 69, label %93
  ]

93:                                               ; preds = %87
  %94 = getelementptr inbounds [1 x %union.rtunion_def], ptr %85, i64 0, i64 %90
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  %96 = load i32, ptr %95, align 8, !tbaa !99
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %114

98:                                               ; preds = %93
  %99 = zext i32 %96 to i64
  br label %105

100:                                              ; preds = %87
  %101 = getelementptr inbounds [1 x %union.rtunion_def], ptr %85, i64 0, i64 %90
  %102 = load ptr, ptr %101, align 8, !tbaa !16
  %103 = tail call fastcc i32 @count_rtxs(ptr noundef %102)
  %104 = add nsw i32 %103, %89
  br label %114

105:                                              ; preds = %98, %105
  %106 = phi i64 [ 0, %98 ], [ %112, %105 ]
  %107 = phi i32 [ %89, %98 ], [ %111, %105 ]
  %108 = getelementptr inbounds %struct.rtvec_def, ptr %95, i64 0, i32 1, i64 %106
  %109 = load ptr, ptr %108, align 8, !tbaa !5
  %110 = tail call fastcc i32 @count_rtxs(ptr noundef %109)
  %111 = add nsw i32 %110, %107
  %112 = add nuw nsw i64 %106, 1
  %113 = icmp eq i64 %112, %99
  br i1 %113, label %114, label %105, !llvm.loop !147

114:                                              ; preds = %105, %93, %87, %100
  %115 = phi i32 [ %104, %100 ], [ %89, %87 ], [ %89, %93 ], [ %111, %105 ]
  %116 = icmp sgt i64 %88, 1
  br i1 %116, label %87, label %117, !llvm.loop !148

117:                                              ; preds = %114, %78
  %118 = phi i32 [ 1, %78 ], [ %115, %114 ]
  %119 = add nsw i32 %118, %6
  %120 = add i32 %119, %3
  br label %19
}

declare ptr @replace_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @update_table_tick(ptr nocapture noundef readonly %0) unnamed_addr #17 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = icmp eq i32 %3, 37
  br i1 %4, label %5, label %58

5:                                                ; preds = %127, %1
  %6 = phi ptr [ %0, %1 ], [ %131, %127 ]
  %7 = phi i32 [ %2, %1 ], [ %132, %127 ]
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = icmp ult i32 %9, 53
  br i1 %10, label %11, label %19

11:                                               ; preds = %5
  %12 = lshr i32 %7, 16
  %13 = and i32 %12, 255
  %14 = zext i32 %9 to i64
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %14, i64 %15
  %17 = load i8, ptr %16, align 1, !tbaa !16
  %18 = zext i8 %17 to i32
  br label %19

19:                                               ; preds = %5, %11
  %20 = phi i32 [ %18, %11 ], [ 1, %5 ]
  %21 = add i32 %20, %9
  %22 = icmp ult i32 %9, %21
  br i1 %22, label %23, label %150

23:                                               ; preds = %19
  %24 = load i32, ptr @label_tick, align 4, !tbaa !20
  %25 = zext i32 %9 to i64
  %26 = zext i32 %21 to i64
  %27 = sub nsw i64 %26, %25
  %28 = xor i64 %25, -1
  %29 = add nsw i64 %28, %26
  %30 = and i64 %27, 3
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %41, label %32

32:                                               ; preds = %23
  %33 = load ptr, ptr @reg_stat, align 8
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ %25, %32 ], [ %38, %34 ]
  %36 = phi i64 [ 0, %32 ], [ %39, %34 ]
  %37 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %33, i64 0, i32 2, i64 %35, i32 3
  store i32 %24, ptr %37, align 8, !tbaa !145
  %38 = add nuw nsw i64 %35, 1
  %39 = add i64 %36, 1
  %40 = icmp eq i64 %39, %30
  br i1 %40, label %41, label %34, !llvm.loop !149

41:                                               ; preds = %34, %23
  %42 = phi i64 [ %25, %23 ], [ %38, %34 ]
  %43 = icmp ult i64 %29, 3
  br i1 %43, label %150, label %44

44:                                               ; preds = %41
  %45 = load ptr, ptr @reg_stat, align 8
  %46 = load ptr, ptr @reg_stat, align 8
  br label %47

47:                                               ; preds = %47, %44
  %48 = phi i64 [ %42, %44 ], [ %56, %47 ]
  %49 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %45, i64 0, i32 2, i64 %48, i32 3
  store i32 %24, ptr %49, align 8, !tbaa !145
  %50 = add nuw nsw i64 %48, 1
  %51 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %45, i64 0, i32 2, i64 %50, i32 3
  store i32 %24, ptr %51, align 8, !tbaa !145
  %52 = add nuw nsw i64 %48, 2
  %53 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %46, i64 0, i32 2, i64 %52, i32 3
  store i32 %24, ptr %53, align 8, !tbaa !145
  %54 = add nuw nsw i64 %48, 3
  %55 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %46, i64 0, i32 2, i64 %54, i32 3
  store i32 %24, ptr %55, align 8, !tbaa !145
  %56 = add nuw nsw i64 %48, 4
  %57 = icmp eq i64 %56, %26
  br i1 %57, label %150, label %47, !llvm.loop !150

58:                                               ; preds = %1, %127
  %59 = phi i32 [ %133, %127 ], [ %3, %1 ]
  %60 = phi ptr [ %131, %127 ], [ %0, %1 ]
  %61 = zext i32 %59 to i64
  %62 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %61
  %63 = load ptr, ptr %62, align 8, !tbaa !5
  %64 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %61
  %65 = load i8, ptr %64, align 1, !tbaa !16
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %150, label %67

67:                                               ; preds = %58
  %68 = getelementptr inbounds %struct.rtx_def, ptr %60, i64 0, i32 1
  %69 = getelementptr inbounds %struct.rtx_def, ptr %60, i64 0, i32 1, i32 0, i32 0, i64 1
  %70 = zext i8 %65 to i64
  br label %71

71:                                               ; preds = %67, %148
  %72 = phi i64 [ %70, %67 ], [ %73, %148 ]
  %73 = add nsw i64 %72, -1
  %74 = getelementptr inbounds i8, ptr %63, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !16
  switch i8 %75, label %148 [
    i8 101, label %81
    i8 69, label %76
  ]

76:                                               ; preds = %71
  %77 = getelementptr inbounds [1 x %union.rtunion_def], ptr %68, i64 0, i64 %73
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = load i32, ptr %78, align 8, !tbaa !99
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %138, label %148

81:                                               ; preds = %71
  %82 = icmp eq i64 %73, 0
  br i1 %82, label %83, label %135

83:                                               ; preds = %81
  %84 = load i32, ptr %60, align 8
  %85 = and i32 %84, 65535
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = and i32 %88, -2
  %90 = icmp eq i32 %89, 2
  br i1 %90, label %91, label %135

91:                                               ; preds = %83
  %92 = load ptr, ptr %68, align 8, !tbaa !16
  %93 = load ptr, ptr %69, align 8, !tbaa !16
  %94 = icmp eq ptr %92, %93
  br i1 %94, label %150, label %95

95:                                               ; preds = %91
  %96 = load i32, ptr %93, align 8
  %97 = and i32 %96, 65535
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = and i32 %100, -2
  %102 = icmp eq i32 %101, 2
  br i1 %102, label %103, label %111

103:                                              ; preds = %95
  %104 = getelementptr inbounds %struct.rtx_def, ptr %93, i64 0, i32 1
  %105 = load ptr, ptr %104, align 8, !tbaa !16
  %106 = icmp eq ptr %92, %105
  br i1 %106, label %150, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.rtx_def, ptr %93, i64 0, i32 1, i32 0, i32 0, i64 1
  %109 = load ptr, ptr %108, align 8, !tbaa !16
  %110 = icmp eq ptr %92, %109
  br i1 %110, label %150, label %111

111:                                              ; preds = %107, %95
  %112 = load i32, ptr %92, align 8
  %113 = and i32 %112, 65535
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !16
  %117 = and i32 %116, -2
  %118 = icmp eq i32 %117, 2
  br i1 %118, label %119, label %135

119:                                              ; preds = %111
  %120 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1
  %121 = load ptr, ptr %120, align 8, !tbaa !16
  %122 = icmp eq ptr %93, %121
  br i1 %122, label %127, label %123

123:                                              ; preds = %119
  %124 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1, i32 0, i32 0, i64 1
  %125 = load ptr, ptr %124, align 8, !tbaa !16
  %126 = icmp eq ptr %93, %125
  br i1 %126, label %127, label %135

127:                                              ; preds = %123, %119
  %128 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1
  %129 = zext i1 %122 to i64
  %130 = getelementptr inbounds [1 x %union.rtunion_def], ptr %128, i64 0, i64 %129
  %131 = load ptr, ptr %130, align 8, !tbaa !16
  %132 = load i32, ptr %131, align 8
  %133 = and i32 %132, 65535
  %134 = icmp eq i32 %133, 37
  br i1 %134, label %5, label %58

135:                                              ; preds = %123, %111, %83, %81
  %136 = getelementptr inbounds [1 x %union.rtunion_def], ptr %68, i64 0, i64 %73
  %137 = load ptr, ptr %136, align 8, !tbaa !16
  tail call fastcc void @update_table_tick(ptr noundef %137)
  br label %148

138:                                              ; preds = %76, %138
  %139 = phi i64 [ %143, %138 ], [ 0, %76 ]
  %140 = phi ptr [ %144, %138 ], [ %78, %76 ]
  %141 = getelementptr inbounds %struct.rtvec_def, ptr %140, i64 0, i32 1, i64 %139
  %142 = load ptr, ptr %141, align 8, !tbaa !5
  tail call fastcc void @update_table_tick(ptr noundef %142)
  %143 = add nuw nsw i64 %139, 1
  %144 = load ptr, ptr %77, align 8, !tbaa !16
  %145 = load i32, ptr %144, align 8, !tbaa !99
  %146 = sext i32 %145 to i64
  %147 = icmp slt i64 %143, %146
  br i1 %147, label %138, label %148, !llvm.loop !151

148:                                              ; preds = %138, %76, %71, %135
  %149 = icmp sgt i64 %72, 1
  br i1 %149, label %71, label %150, !llvm.loop !152

150:                                              ; preds = %58, %148, %91, %107, %103, %41, %47, %19
  ret void
}

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @asm_noperands(ptr noundef) local_unnamed_addr #3

declare ptr @alloc_INSN_LIST(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @reg_referenced_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @dead_or_set_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @expand_field_assignment(ptr noundef readonly %0) unnamed_addr #9 {
  br label %2

2:                                                ; preds = %90, %1
  %3 = phi ptr [ %0, %1 ], [ %91, %90 ]
  %4 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = load i32, ptr %5, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %59 [
    i16 40, label %8
    i16 120, label %27
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = load i32, ptr %10, align 8
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 39
  br i1 %13, label %14, label %150

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = lshr i32 %11, 16
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 3
  %24 = tail call i32 @subreg_lsb(ptr noundef nonnull %10) #25
  %25 = zext i32 %24 to i64
  %26 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %25) #25
  br label %92

27:                                               ; preds = %2
  %28 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1, i32 0, i32 0, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = load i32, ptr %29, align 8
  %31 = and i32 %30, 65535
  %32 = icmp eq i32 %31, 30
  br i1 %32, label %33, label %150

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !16
  %36 = getelementptr inbounds %struct.rtx_def, ptr %29, i64 0, i32 1
  %37 = load i64, ptr %36, align 8, !tbaa !16
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1, i32 0, i32 0, i64 2
  %40 = load ptr, ptr %39, align 8, !tbaa !16
  %41 = load i32, ptr %40, align 8
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %42, 30
  br i1 %43, label %44, label %92

44:                                               ; preds = %33
  %45 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  %46 = load i64, ptr %45, align 8, !tbaa !16
  %47 = shl i64 %37, 32
  %48 = ashr exact i64 %47, 32
  %49 = add nsw i64 %46, %48
  %50 = load i32, ptr %35, align 8
  %51 = lshr i32 %50, 16
  %52 = and i32 %51, 255
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %53
  %55 = load i8, ptr %54, align 1, !tbaa !16
  %56 = zext i8 %55 to i64
  %57 = shl nuw nsw i64 %56, 3
  %58 = icmp sgt i64 %49, %57
  br i1 %58, label %150, label %92

59:                                               ; preds = %2
  %60 = and i32 %6, 65535
  %61 = icmp eq i32 %60, 39
  %62 = load i1, ptr @nonzero_sign_valid, align 4
  %63 = select i1 %61, i1 %62, i1 false
  br i1 %63, label %64, label %150

64:                                               ; preds = %59
  %65 = lshr i32 %6, 16
  %66 = and i32 %65, 255
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %67
  %69 = load i8, ptr %68, align 1, !tbaa !16
  %70 = zext i8 %69 to i32
  %71 = add nuw nsw i32 %70, 3
  %72 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = load i32, ptr %73, align 8
  %75 = lshr i32 %74, 16
  %76 = and i32 %75, 255
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %77
  %79 = load i8, ptr %78, align 1, !tbaa !16
  %80 = zext i8 %79 to i32
  %81 = add nuw nsw i32 %80, 3
  %82 = xor i32 %81, %71
  %83 = icmp ult i32 %82, 4
  br i1 %83, label %84, label %150

84:                                               ; preds = %64
  %85 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %86 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  %87 = load ptr, ptr %86, align 8, !tbaa !16
  %88 = tail call ptr %85(i32 noundef %76, ptr noundef %87) #25
  %89 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %73, ptr noundef %88) #25
  br label %90

90:                                               ; preds = %84, %133
  %91 = phi ptr [ %149, %133 ], [ %89, %84 ]
  br label %2

92:                                               ; preds = %44, %33, %14
  %93 = phi i32 [ %23, %14 ], [ %38, %44 ], [ %38, %33 ]
  %94 = phi ptr [ %26, %14 ], [ %40, %44 ], [ %40, %33 ]
  %95 = phi ptr [ %16, %14 ], [ %35, %44 ], [ %35, %33 ]
  %96 = load i32, ptr %95, align 8
  %97 = and i32 %96, 65535
  %98 = icmp eq i32 %97, 39
  br i1 %98, label %99, label %111

99:                                               ; preds = %92, %105
  %100 = phi ptr [ %107, %105 ], [ %95, %92 ]
  %101 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %100) #25
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = load i32, ptr %100, align 8
  br label %111

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.rtx_def, ptr %100, i64 0, i32 1
  %107 = load ptr, ptr %106, align 8, !tbaa !16
  %108 = load i32, ptr %107, align 8
  %109 = and i32 %108, 65535
  %110 = icmp eq i32 %109, 39
  br i1 %110, label %99, label %111, !llvm.loop !153

111:                                              ; preds = %105, %103, %92
  %112 = phi i32 [ %96, %92 ], [ %104, %103 ], [ %108, %105 ]
  %113 = phi ptr [ %95, %92 ], [ %100, %103 ], [ %107, %105 ]
  %114 = lshr i32 %112, 16
  %115 = and i32 %114, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %116
  %118 = load i8, ptr %117, align 1, !tbaa !16
  switch i8 %118, label %150 [
    i8 2, label %129
    i8 3, label %129
    i8 8, label %119
    i8 9, label %119
    i8 11, label %119
    i8 17, label %119
  ]

119:                                              ; preds = %111, %111, %111, %111
  %120 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %116
  %121 = load i8, ptr %120, align 1, !tbaa !16
  %122 = zext i8 %121 to i32
  %123 = shl nuw nsw i32 %122, 3
  %124 = tail call i32 @mode_for_size(i32 noundef %123, i32 noundef 2, i32 noundef 0) #25
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %150, label %126

126:                                              ; preds = %119
  %127 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %128 = tail call ptr %127(i32 noundef %124, ptr noundef nonnull %113) #25
  br label %129

129:                                              ; preds = %126, %111, %111
  %130 = phi ptr [ %113, %111 ], [ %128, %126 ], [ %113, %111 ]
  %131 = phi i32 [ %115, %111 ], [ %124, %126 ], [ %115, %111 ]
  %132 = icmp sgt i32 %93, 63
  br i1 %132, label %150, label %133

133:                                              ; preds = %129
  %134 = zext i32 %93 to i64
  %135 = shl nsw i64 -1, %134
  %136 = xor i64 %135, -1
  %137 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %136) #25
  %138 = tail call ptr @simplify_gen_binary(i32 noundef 65, i32 noundef %131, ptr noundef %137, ptr noundef %94) #25
  %139 = tail call ptr @simplify_gen_unary(i32 noundef 64, i32 noundef %131, ptr noundef %138, i32 noundef %131) #25
  %140 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %131, ptr noundef %139, ptr noundef %130) #25
  %141 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %142 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  %143 = load ptr, ptr %142, align 8, !tbaa !16
  %144 = tail call ptr %141(i32 noundef %131, ptr noundef %143) #25
  %145 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %131, ptr noundef %144, ptr noundef %137) #25
  %146 = tail call ptr @simplify_gen_binary(i32 noundef 65, i32 noundef %131, ptr noundef %145, ptr noundef %94) #25
  %147 = tail call ptr @copy_rtx(ptr noundef %130) #25
  %148 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %131, ptr noundef %140, ptr noundef %146) #25
  %149 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %147, ptr noundef %148) #25
  br label %90

150:                                              ; preds = %119, %111, %8, %27, %129, %59, %64, %44
  ret ptr %3
}

declare ptr @gen_rtx_CONST_INT(i32 noundef, i64 noundef) local_unnamed_addr #3

declare i32 @subreg_lsb(ptr noundef) local_unnamed_addr #3

declare ptr @simplify_gen_binary(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @simplify_gen_unary(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @record_dead_and_set_regs_1(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) #9 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 39
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi ptr [ %9, %7 ], [ %0, %3 ]
  %12 = icmp eq ptr %2, null
  %13 = load i32, ptr %11, align 8
  br i1 %12, label %14, label %76

14:                                               ; preds = %10
  %15 = and i32 %13, 65535
  %16 = icmp eq i32 %15, 37
  br i1 %16, label %17, label %192

17:                                               ; preds = %14
  %18 = getelementptr i8, ptr %11, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = icmp ult i32 %19, 53
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = lshr i32 %13, 16
  %23 = and i32 %22, 255
  %24 = zext i32 %19 to i64
  %25 = zext i32 %23 to i64
  %26 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %24, i64 %25
  %27 = load i8, ptr %26, align 1, !tbaa !16
  %28 = zext i8 %27 to i32
  br label %29

29:                                               ; preds = %21, %17
  %30 = phi i32 [ %28, %21 ], [ 1, %17 ]
  %31 = add i32 %30, %19
  %32 = icmp ult i32 %19, %31
  %33 = zext i32 %19 to i64
  br i1 %32, label %34, label %73

34:                                               ; preds = %29
  %35 = zext i32 %31 to i64
  %36 = load ptr, ptr @reg_stat, align 8
  br label %37

37:                                               ; preds = %37, %34
  %38 = phi i64 [ %45, %37 ], [ %33, %34 ]
  %39 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38
  %40 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38, i32 2
  store ptr null, ptr %40, align 8, !tbaa !94
  %41 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38, i32 7
  store i8 0, ptr %41, align 1
  %42 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38, i32 5
  store i64 0, ptr %42, align 8, !tbaa !95
  %43 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38, i32 6
  store i8 0, ptr %43, align 8, !tbaa !96
  store ptr null, ptr %39, align 8, !tbaa !88
  %44 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %36, i64 0, i32 2, i64 %38, i32 12
  store i8 0, ptr %44, align 4
  %45 = add nuw nsw i64 %38, 1
  %46 = icmp eq i64 %45, %35
  br i1 %46, label %47, label %37, !llvm.loop !144

47:                                               ; preds = %37
  %48 = load i32, ptr @label_tick, align 4, !tbaa !20
  %49 = sub nsw i64 %35, %33
  %50 = xor i64 %33, -1
  %51 = and i64 %49, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %47
  %54 = load ptr, ptr @reg_stat, align 8
  %55 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %54, i64 0, i32 2, i64 %33, i32 4
  store i32 %48, ptr %55, align 4, !tbaa !137
  %56 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %54, i64 0, i32 2, i64 %33, i32 8
  store i8 1, ptr %56, align 2, !tbaa !92
  %57 = add nuw nsw i64 %33, 1
  br label %58

58:                                               ; preds = %53, %47
  %59 = phi i64 [ %33, %47 ], [ %57, %53 ]
  %60 = sub nsw i64 0, %35
  %61 = icmp eq i64 %50, %60
  br i1 %61, label %73, label %62

62:                                               ; preds = %58
  %63 = load ptr, ptr @reg_stat, align 8
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ %59, %62 ], [ %71, %64 ]
  %66 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %63, i64 0, i32 2, i64 %65, i32 4
  store i32 %48, ptr %66, align 4, !tbaa !137
  %67 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %63, i64 0, i32 2, i64 %65, i32 8
  store i8 1, ptr %67, align 2, !tbaa !92
  %68 = add nuw nsw i64 %65, 1
  %69 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %63, i64 0, i32 2, i64 %68, i32 4
  store i32 %48, ptr %69, align 4, !tbaa !137
  %70 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %63, i64 0, i32 2, i64 %68, i32 8
  store i8 1, ptr %70, align 2, !tbaa !92
  %71 = add nuw nsw i64 %65, 2
  %72 = icmp eq i64 %71, %35
  br i1 %72, label %73, label %64, !llvm.loop !146

73:                                               ; preds = %58, %64, %29
  %74 = load ptr, ptr @reg_stat, align 8
  %75 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %74, i64 0, i32 2, i64 %33, i32 2
  store ptr null, ptr %75, align 8, !tbaa !94
  br label %192

76:                                               ; preds = %10
  %77 = trunc i32 %13 to i16
  switch i16 %77, label %192 [
    i16 37, label %78
    i16 43, label %176
  ]

78:                                               ; preds = %76
  %79 = load i32, ptr %1, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 23
  br i1 %81, label %82, label %115

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !tbaa !16
  %85 = icmp eq ptr %11, %84
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  tail call fastcc void @record_value_for_reg(ptr noundef nonnull %11, ptr noundef nonnull %2, ptr noundef %88)
  br label %192

89:                                               ; preds = %82
  %90 = load i32, ptr %84, align 8
  %91 = and i32 %90, 65535
  %92 = icmp eq i32 %91, 39
  br i1 %92, label %93, label %115

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.rtx_def, ptr %84, i64 0, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  %96 = icmp eq ptr %95, %11
  br i1 %96, label %97, label %115

97:                                               ; preds = %93
  %98 = lshr i32 %13, 16
  %99 = and i32 %98, 255
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %100
  %102 = load i8, ptr %101, align 1, !tbaa !16
  %103 = icmp ult i8 %102, 5
  br i1 %103, label %104, label %115

104:                                              ; preds = %97
  %105 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %84) #25
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %104
  %108 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %109 = load i32, ptr %11, align 8
  %110 = lshr i32 %109, 16
  %111 = and i32 %110, 255
  %112 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = tail call ptr %108(i32 noundef %111, ptr noundef %113) #25
  tail call fastcc void @record_value_for_reg(ptr noundef nonnull %11, ptr noundef nonnull %2, ptr noundef %114)
  br label %192

115:                                              ; preds = %78, %104, %97, %93, %89
  %116 = getelementptr i8, ptr %11, i64 8
  %117 = load i32, ptr %116, align 8, !tbaa !16
  %118 = icmp ult i32 %117, 53
  br i1 %118, label %119, label %128

119:                                              ; preds = %115
  %120 = load i32, ptr %11, align 8
  %121 = lshr i32 %120, 16
  %122 = and i32 %121, 255
  %123 = zext i32 %117 to i64
  %124 = zext i32 %122 to i64
  %125 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %123, i64 %124
  %126 = load i8, ptr %125, align 1, !tbaa !16
  %127 = zext i8 %126 to i32
  br label %128

128:                                              ; preds = %119, %115
  %129 = phi i32 [ %127, %119 ], [ 1, %115 ]
  %130 = add i32 %129, %117
  %131 = icmp ult i32 %117, %130
  %132 = zext i32 %117 to i64
  br i1 %131, label %133, label %173

133:                                              ; preds = %128
  %134 = zext i32 %130 to i64
  %135 = load ptr, ptr @reg_stat, align 8
  br label %136

136:                                              ; preds = %133, %136
  %137 = phi i64 [ %145, %136 ], [ %132, %133 ]
  %138 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137
  %139 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 1
  store ptr %2, ptr %139, align 8, !tbaa !93
  %140 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 2
  store ptr null, ptr %140, align 8, !tbaa !94
  %141 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 7
  store i8 0, ptr %141, align 1
  %142 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 5
  store i64 0, ptr %142, align 8, !tbaa !95
  %143 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 6
  store i8 0, ptr %143, align 8, !tbaa !96
  store ptr null, ptr %138, align 8, !tbaa !88
  %144 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %135, i64 0, i32 2, i64 %137, i32 12
  store i8 0, ptr %144, align 4
  %145 = add nuw nsw i64 %137, 1
  %146 = icmp eq i64 %145, %134
  br i1 %146, label %147, label %136, !llvm.loop !144

147:                                              ; preds = %136
  %148 = load i32, ptr @label_tick, align 4, !tbaa !20
  %149 = sub nsw i64 %134, %132
  %150 = xor i64 %132, -1
  %151 = and i64 %149, 1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %147
  %154 = load ptr, ptr @reg_stat, align 8
  %155 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %154, i64 0, i32 2, i64 %132, i32 4
  store i32 %148, ptr %155, align 4, !tbaa !137
  %156 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %154, i64 0, i32 2, i64 %132, i32 8
  store i8 0, ptr %156, align 2, !tbaa !92
  %157 = add nuw nsw i64 %132, 1
  br label %158

158:                                              ; preds = %153, %147
  %159 = phi i64 [ %132, %147 ], [ %157, %153 ]
  %160 = sub nsw i64 0, %134
  %161 = icmp eq i64 %150, %160
  br i1 %161, label %173, label %162

162:                                              ; preds = %158
  %163 = load ptr, ptr @reg_stat, align 8
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i64 [ %159, %162 ], [ %171, %164 ]
  %166 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %163, i64 0, i32 2, i64 %165, i32 4
  store i32 %148, ptr %166, align 4, !tbaa !137
  %167 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %163, i64 0, i32 2, i64 %165, i32 8
  store i8 0, ptr %167, align 2, !tbaa !92
  %168 = add nuw nsw i64 %165, 1
  %169 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %163, i64 0, i32 2, i64 %168, i32 4
  store i32 %148, ptr %169, align 4, !tbaa !137
  %170 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %163, i64 0, i32 2, i64 %168, i32 8
  store i8 0, ptr %170, align 2, !tbaa !92
  %171 = add nuw nsw i64 %165, 2
  %172 = icmp eq i64 %171, %134
  br i1 %172, label %173, label %164, !llvm.loop !146

173:                                              ; preds = %158, %164, %128
  %174 = load ptr, ptr @reg_stat, align 8
  %175 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %174, i64 0, i32 2, i64 %132, i32 2
  store ptr null, ptr %175, align 8, !tbaa !94
  br label %192

176:                                              ; preds = %76
  %177 = lshr i32 %13, 16
  %178 = and i32 %177, 255
  %179 = tail call i32 @push_operand(ptr noundef nonnull %11, i32 noundef %178) #25
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %192

181:                                              ; preds = %176
  %182 = load ptr, ptr @df, align 8, !tbaa !5
  %183 = getelementptr inbounds %struct.df, ptr %182, i64 0, i32 10
  %184 = load ptr, ptr %183, align 8, !tbaa !37
  %185 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %186 = load i32, ptr %185, align 8, !tbaa !16
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds ptr, ptr %184, i64 %187
  %189 = load ptr, ptr %188, align 8, !tbaa !5
  %190 = getelementptr inbounds %struct.df_insn_info, ptr %189, i64 0, i32 5
  %191 = load i32, ptr %190, align 8, !tbaa !54
  store i32 %191, ptr @mem_last_set, align 4, !tbaa !20
  br label %192

192:                                              ; preds = %107, %173, %86, %181, %176, %76, %14, %73
  ret void
}

declare i32 @push_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @for_each_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal i32 @record_truncated_value(ptr nocapture noundef readonly %0, ptr nocapture readnone %1) #18 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = trunc i32 %4 to i16
  switch i16 %5, label %42 [
    i16 39, label %6
    i16 37, label %13
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 37
  %12 = sext i1 %11 to i32
  br label %42

13:                                               ; preds = %2
  %14 = getelementptr i8, ptr %3, i64 8
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = icmp ult i32 %15, 53
  br i1 %16, label %17, label %42

17:                                               ; preds = %13
  %18 = lshr i32 %4, 16
  %19 = and i32 %18, 255
  %20 = load ptr, ptr @reg_stat, align 8
  %21 = zext i32 %15 to i64
  %22 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %20, i64 0, i32 2, i64 %21, i32 12
  %23 = load i8, ptr %22, align 4
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %20, i64 0, i32 2, i64 %21, i32 11
  %27 = load i32, ptr %26, align 8, !tbaa !138
  %28 = load i32, ptr @label_tick_ebb_start, align 4, !tbaa !20
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %38, label %30

30:                                               ; preds = %25
  %31 = zext i32 %19 to i64
  %32 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !16
  %34 = zext i8 %23 to i64
  %35 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %34
  %36 = load i8, ptr %35, align 1, !tbaa !16
  %37 = icmp ult i8 %33, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %30, %25, %17
  %39 = trunc i32 %18 to i8
  store i8 %39, ptr %22, align 4
  %40 = load i32, ptr @label_tick, align 4, !tbaa !20
  %41 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %20, i64 0, i32 2, i64 %21, i32 11
  store i32 %40, ptr %41, align 8, !tbaa !138
  br label %42

42:                                               ; preds = %6, %2, %30, %38, %13
  %43 = phi i32 [ 0, %13 ], [ -1, %38 ], [ -1, %30 ], [ %12, %6 ], [ 0, %2 ]
  ret i32 %43
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @cant_combine_insn_p(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = add nsw i32 %3, -7
  %5 = icmp ult i32 %4, 4
  br i1 %5, label %6, label %80

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 23
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %8) #25
  %14 = icmp eq ptr %13, null
  br i1 %14, label %80, label %15

15:                                               ; preds = %6, %12
  %16 = phi ptr [ %13, %12 ], [ %8, %6 ]
  %17 = getelementptr inbounds %struct.rtx_def, ptr %16, i64 0, i32 1
  %18 = getelementptr inbounds %struct.rtx_def, ptr %16, i64 0, i32 1, i32 0, i32 0, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  %20 = load ptr, ptr %17, align 8, !tbaa !16
  %21 = load i32, ptr %19, align 8
  %22 = and i32 %21, 65535
  %23 = icmp eq i32 %22, 39
  br i1 %23, label %24, label %27

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  br label %27

27:                                               ; preds = %24, %15
  %28 = phi ptr [ %26, %24 ], [ %19, %15 ]
  %29 = load i32, ptr %20, align 8
  %30 = and i32 %29, 65535
  %31 = icmp eq i32 %30, 39
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi ptr [ %34, %32 ], [ %20, %27 ]
  %37 = load i32, ptr %28, align 8
  %38 = and i32 %37, 65535
  %39 = icmp eq i32 %38, 37
  br i1 %39, label %40, label %80

40:                                               ; preds = %35
  %41 = load i32, ptr %36, align 8
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %42, 37
  br i1 %43, label %44, label %80

44:                                               ; preds = %40
  %45 = getelementptr i8, ptr %28, i64 8
  %46 = load i32, ptr %45, align 8, !tbaa !16
  %47 = icmp ult i32 %46, 53
  br i1 %47, label %48, label %58

48:                                               ; preds = %44
  %49 = zext i32 %46 to i64
  %50 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !16
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %48
  %54 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %49
  %55 = load i32, ptr %54, align 4, !tbaa !16
  %56 = add i32 %55, -1
  %57 = icmp ult i32 %56, 17
  br i1 %57, label %72, label %58

58:                                               ; preds = %72, %53, %48, %44
  %59 = getelementptr i8, ptr %36, i64 8
  %60 = load i32, ptr %59, align 8, !tbaa !16
  %61 = icmp ult i32 %60, 53
  br i1 %61, label %62, label %80

62:                                               ; preds = %58
  %63 = zext i32 %60 to i64
  %64 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %63
  %65 = load i8, ptr %64, align 1, !tbaa !16
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %67, label %80

67:                                               ; preds = %62
  %68 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %63
  %69 = load i32, ptr %68, align 4, !tbaa !16
  %70 = add i32 %69, -1
  %71 = icmp ult i32 %70, 17
  br i1 %71, label %76, label %80

72:                                               ; preds = %53
  %73 = lshr i32 90239, %56
  %74 = and i32 %73, 1
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %58, label %80

76:                                               ; preds = %67
  %77 = sext i32 %70 to i64
  %78 = getelementptr inbounds [17 x i32], ptr @switch.table.cant_combine_insn_p, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4
  br label %80

80:                                               ; preds = %72, %35, %40, %58, %62, %67, %76, %1, %12
  %81 = phi i32 [ 1, %1 ], [ 0, %12 ], [ %79, %76 ], [ 0, %67 ], [ 0, %62 ], [ 0, %58 ], [ 0, %40 ], [ 0, %35 ], [ 1, %72 ]
  ret i32 %81
}

declare ptr @find_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @side_effects_p(ptr noundef) local_unnamed_addr #3

declare ptr @next_active_insn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @do_SUBST(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = icmp eq ptr %3, %1
  br i1 %4, label %59, label %5

5:                                                ; preds = %2
  %6 = load i32, ptr %3, align 8
  %7 = lshr i32 %6, 16
  %8 = and i32 %7, 255
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 2
  br i1 %12, label %13, label %46

13:                                               ; preds = %5
  %14 = load i32, ptr %1, align 8
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 30
  br i1 %16, label %17, label %46

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !16
  %20 = tail call i64 @trunc_int_for_mode(i64 noundef %19, i32 noundef %8) #25
  %21 = icmp eq i64 %19, %20
  br i1 %21, label %23, label %22

22:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 681, ptr noundef nonnull @.str.5) #25
  br label %23

23:                                               ; preds = %17, %22
  %24 = load i32, ptr %3, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 39
  br i1 %26, label %27, label %35

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = load i32, ptr %29, align 8
  %31 = and i32 %30, 65535
  %32 = icmp eq i32 %31, 30
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 690, ptr noundef nonnull @.str.5) #25
  %34 = load i32, ptr %3, align 8
  br label %35

35:                                               ; preds = %23, %27, %33
  %36 = phi i32 [ %24, %23 ], [ %24, %27 ], [ %34, %33 ]
  %37 = and i32 %36, 65535
  %38 = icmp eq i32 %37, 99
  br i1 %38, label %39, label %46

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = icmp eq i32 %43, 30
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 692, ptr noundef nonnull @.str.5) #25
  br label %46

46:                                               ; preds = %45, %39, %35, %13, %5
  %47 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %48 = icmp eq ptr %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = load ptr, ptr %47, align 8, !tbaa !72
  store ptr %50, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %53

51:                                               ; preds = %46
  %52 = tail call ptr @xmalloc(i64 noundef 32) #25
  br label %53

53:                                               ; preds = %51, %49
  %54 = phi ptr [ %47, %49 ], [ %52, %51 ]
  %55 = getelementptr inbounds %struct.undo, ptr %54, i64 0, i32 1
  store i32 0, ptr %55, align 8, !tbaa !125
  %56 = getelementptr inbounds %struct.undo, ptr %54, i64 0, i32 3
  store ptr %0, ptr %56, align 8, !tbaa !16
  %57 = getelementptr inbounds %struct.undo, ptr %54, i64 0, i32 2
  store ptr %3, ptr %57, align 8, !tbaa !16
  store ptr %1, ptr %0, align 8, !tbaa !5
  %58 = load ptr, ptr @undobuf, align 8, !tbaa !117
  store ptr %58, ptr %54, align 8, !tbaa !72
  store ptr %54, ptr @undobuf, align 8, !tbaa !117
  br label %59

59:                                               ; preds = %2, %53
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal fastcc zeroext i8 @reg_subword_p(ptr nocapture noundef readonly %0, ptr noundef readonly %1) unnamed_addr #14 {
  %3 = load i32, ptr %1, align 8
  %4 = and i32 %3, 65535
  %5 = icmp eq i32 %4, 37
  br i1 %5, label %6, label %37

6:                                                ; preds = %2
  %7 = lshr i32 %3, 16
  %8 = and i32 %7, 255
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9
  %11 = load i8, ptr %10, align 1, !tbaa !16
  %12 = icmp eq i8 %11, 2
  br i1 %12, label %13, label %37

13:                                               ; preds = %6
  %14 = load i32, ptr %0, align 8
  %15 = trunc i32 %14 to i16
  switch i16 %15, label %20 [
    i16 40, label %16
    i16 120, label %16
  ]

16:                                               ; preds = %13, %13
  %17 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %18, align 8
  br label %20

20:                                               ; preds = %13, %16
  %21 = phi i32 [ %19, %16 ], [ %14, %13 ]
  %22 = phi ptr [ %18, %16 ], [ %0, %13 ]
  %23 = and i32 %21, 65535
  %24 = icmp eq i32 %23, 39
  br i1 %24, label %25, label %37

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = icmp eq ptr %27, %1
  br i1 %28, label %29, label %37

29:                                               ; preds = %25
  %30 = lshr i32 %21, 16
  %31 = and i32 %30, 255
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !16
  %35 = icmp eq i8 %34, 2
  %36 = zext i1 %35 to i8
  br label %37

37:                                               ; preds = %20, %25, %29, %2, %6
  %38 = phi i8 [ 0, %6 ], [ 0, %2 ], [ 0, %25 ], [ 0, %20 ], [ %36, %29 ]
  ret i8 %38
}

declare ptr @immed_double_const(i64 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @rtx_equal_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_iuuBieie_stat(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @can_combine_p(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) unnamed_addr #9 {
  %6 = icmp eq ptr %2, null
  %7 = tail call ptr @next_active_insn(ptr noundef %0) #25
  br i1 %6, label %13, label %8

8:                                                ; preds = %5
  %9 = icmp eq ptr %7, %2
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = tail call ptr @next_active_insn(ptr noundef nonnull %2) #25
  %12 = icmp eq ptr %11, %1
  br label %15

13:                                               ; preds = %5
  %14 = icmp eq ptr %7, %1
  br label %15

15:                                               ; preds = %8, %10, %13
  %16 = phi i1 [ false, %8 ], [ %12, %10 ], [ true, %13 ]
  %17 = phi i1 [ false, %8 ], [ %12, %10 ], [ %14, %13 ]
  %18 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %19 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = load i32, ptr %20, align 8
  %22 = trunc i32 %21 to i16
  switch i16 %22, label %384 [
    i16 23, label %147
    i16 15, label %23
  ]

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = getelementptr inbounds %struct.rtvec_def, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !5
  %28 = load i32, ptr %27, align 8
  %29 = and i32 %28, 65535
  %30 = icmp eq i32 %29, 23
  br i1 %30, label %31, label %384

31:                                               ; preds = %23
  %32 = load i32, ptr %25, align 8, !tbaa !99
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %384

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %36 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %37

37:                                               ; preds = %34, %130
  %38 = phi i64 [ 0, %34 ], [ %132, %130 ]
  %39 = phi ptr [ %25, %34 ], [ %135, %130 ]
  %40 = phi ptr [ null, %34 ], [ %131, %130 ]
  %41 = getelementptr inbounds %struct.rtvec_def, ptr %39, i64 0, i32 1, i64 %38
  %42 = load ptr, ptr %41, align 8, !tbaa !5
  %43 = load i32, ptr %42, align 8
  %44 = trunc i32 %43 to i16
  switch i16 %44, label %384 [
    i16 24, label %45
    i16 25, label %130
    i16 23, label %117
  ]

45:                                               ; preds = %37
  %46 = getelementptr inbounds %struct.rtx_def, ptr %42, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !16
  %48 = load i32, ptr %47, align 8
  %49 = and i32 %48, 65535
  %50 = icmp eq i32 %49, 37
  br i1 %50, label %51, label %130

51:                                               ; preds = %45
  %52 = load ptr, ptr %35, align 8, !tbaa !16
  %53 = load i32, ptr %52, align 8
  %54 = and i32 %53, 65535
  %55 = icmp eq i32 %54, 15
  br i1 %55, label %56, label %130

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.rtx_def, ptr %52, i64 0, i32 1
  %58 = load ptr, ptr %57, align 8, !tbaa !16
  %59 = load i32, ptr %58, align 8, !tbaa !99
  %60 = getelementptr i8, ptr %47, i64 8
  %61 = load i32, ptr %60, align 8, !tbaa !16
  %62 = freeze i32 %61
  %63 = icmp ugt i32 %62, 52
  %64 = sext i32 %59 to i64
  br i1 %63, label %65, label %91

65:                                               ; preds = %56, %89
  %66 = phi i64 [ %67, %89 ], [ %64, %56 ]
  %67 = add nsw i64 %66, -1
  %68 = load ptr, ptr %57, align 8, !tbaa !16
  %69 = getelementptr inbounds %struct.rtvec_def, ptr %68, i64 0, i32 1, i64 %67
  %70 = load ptr, ptr %69, align 8, !tbaa !5
  %71 = load i32, ptr %70, align 8
  %72 = and i32 %71, 65535
  %73 = icmp eq i32 %72, 24
  br i1 %73, label %74, label %89

74:                                               ; preds = %65
  %75 = getelementptr inbounds %struct.rtx_def, ptr %70, i64 0, i32 1
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = load i32, ptr %76, align 8
  %78 = and i32 %77, 65535
  %79 = icmp eq i32 %78, 37
  br i1 %79, label %80, label %89

80:                                               ; preds = %74
  %81 = getelementptr i8, ptr %76, i64 8
  %82 = load i32, ptr %81, align 8, !tbaa !16
  %83 = icmp eq i32 %82, %62
  br i1 %83, label %84, label %384

84:                                               ; preds = %80
  %85 = load ptr, ptr %46, align 8, !tbaa !16
  %86 = load ptr, ptr %36, align 8, !tbaa !16
  %87 = tail call i32 @reg_set_between_p(ptr noundef %85, ptr noundef %86, ptr noundef %1) #25
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %384

89:                                               ; preds = %84, %74, %65
  %90 = icmp sgt i64 %66, 1
  br i1 %90, label %65, label %130, !llvm.loop !154

91:                                               ; preds = %56, %115
  %92 = phi i64 [ %93, %115 ], [ %64, %56 ]
  %93 = add nsw i64 %92, -1
  %94 = load ptr, ptr %57, align 8, !tbaa !16
  %95 = getelementptr inbounds %struct.rtvec_def, ptr %94, i64 0, i32 1, i64 %93
  %96 = load ptr, ptr %95, align 8, !tbaa !5
  %97 = load i32, ptr %96, align 8
  %98 = and i32 %97, 65535
  %99 = icmp eq i32 %98, 24
  br i1 %99, label %100, label %115

100:                                              ; preds = %91
  %101 = getelementptr inbounds %struct.rtx_def, ptr %96, i64 0, i32 1
  %102 = load ptr, ptr %101, align 8, !tbaa !16
  %103 = load i32, ptr %102, align 8
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, 37
  br i1 %105, label %106, label %115

106:                                              ; preds = %100
  %107 = getelementptr i8, ptr %102, i64 8
  %108 = load i32, ptr %107, align 8, !tbaa !16
  %109 = icmp eq i32 %108, %62
  br i1 %109, label %110, label %115

110:                                              ; preds = %106
  %111 = load ptr, ptr %46, align 8, !tbaa !16
  %112 = load ptr, ptr %36, align 8, !tbaa !16
  %113 = tail call i32 @reg_set_between_p(ptr noundef %111, ptr noundef %112, ptr noundef %1) #25
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %384

115:                                              ; preds = %106, %110, %100, %91
  %116 = icmp sgt i64 %92, 1
  br i1 %116, label %91, label %130, !llvm.loop !154

117:                                              ; preds = %37
  %118 = getelementptr inbounds %struct.rtx_def, ptr %42, i64 0, i32 1
  %119 = load ptr, ptr %118, align 8, !tbaa !16
  %120 = tail call ptr @find_reg_note(ptr noundef nonnull %0, i32 noundef 6, ptr noundef %119) #25
  %121 = icmp eq ptr %120, null
  br i1 %121, label %128, label %122

122:                                              ; preds = %117
  %123 = tail call zeroext i8 @insn_nothrow_p(ptr noundef nonnull %0) #25
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %122
  %126 = tail call i32 @side_effects_p(ptr noundef nonnull %42) #25
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %130, label %128

128:                                              ; preds = %125, %122, %117
  %129 = icmp eq ptr %40, null
  br i1 %129, label %130, label %384

130:                                              ; preds = %115, %89, %128, %125, %45, %51, %37
  %131 = phi ptr [ %40, %125 ], [ %40, %37 ], [ %40, %51 ], [ %40, %45 ], [ %42, %128 ], [ %40, %89 ], [ %40, %115 ]
  %132 = add nuw nsw i64 %38, 1
  %133 = load ptr, ptr %19, align 8, !tbaa !16
  %134 = getelementptr inbounds %struct.rtx_def, ptr %133, i64 0, i32 1
  %135 = load ptr, ptr %134, align 8, !tbaa !16
  %136 = load i32, ptr %135, align 8, !tbaa !99
  %137 = sext i32 %136 to i64
  %138 = icmp slt i64 %132, %137
  br i1 %138, label %37, label %139, !llvm.loop !155

139:                                              ; preds = %130
  %140 = icmp eq ptr %131, null
  br i1 %140, label %384, label %141

141:                                              ; preds = %139
  %142 = getelementptr inbounds %struct.rtx_def, ptr %131, i64 0, i32 1, i32 0, i32 0, i64 1
  %143 = load ptr, ptr %142, align 8, !tbaa !16
  %144 = load i32, ptr %143, align 8
  %145 = and i32 %144, 65535
  %146 = icmp eq i32 %145, 17
  br i1 %146, label %384, label %147

147:                                              ; preds = %141, %15
  %148 = phi ptr [ %131, %141 ], [ %20, %15 ]
  %149 = tail call fastcc ptr @expand_field_assignment(ptr noundef nonnull %148)
  %150 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %151 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1, i32 0, i32 0, i64 1
  %152 = load ptr, ptr %151, align 8, !tbaa !16
  %153 = load ptr, ptr %150, align 8, !tbaa !16
  %154 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16, !tbaa !5
  %155 = icmp eq ptr %153, %154
  br i1 %155, label %384, label %156

156:                                              ; preds = %147
  %157 = tail call i32 @rtx_equal_p(ptr noundef %152, ptr noundef %153) #25
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %162, label %159

159:                                              ; preds = %156
  %160 = tail call ptr @find_reg_note(ptr noundef nonnull %0, i32 noundef 4, ptr noundef null) #25
  %161 = icmp eq ptr %160, null
  br i1 %161, label %162, label %384

162:                                              ; preds = %159, %156
  %163 = load i32, ptr %152, align 8
  %164 = trunc i32 %163 to i16
  switch i16 %164, label %165 [
    i16 17, label %384
    i16 26, label %384
  ]

165:                                              ; preds = %162
  %166 = load i32, ptr %1, align 8
  %167 = and i32 %166, 65535
  %168 = icmp eq i32 %167, 10
  br i1 %168, label %169, label %185

169:                                              ; preds = %165
  %170 = tail call i32 @find_reg_fusage(ptr noundef nonnull %1, i32 noundef 24, ptr noundef %153) #25
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %384

172:                                              ; preds = %169
  %173 = load i32, ptr %153, align 8
  %174 = and i32 %173, 65535
  %175 = icmp eq i32 %174, 37
  br i1 %175, label %176, label %185

176:                                              ; preds = %172
  %177 = getelementptr i8, ptr %153, i64 8
  %178 = load i32, ptr %177, align 8, !tbaa !16
  %179 = icmp ult i32 %178, 53
  br i1 %179, label %180, label %185

180:                                              ; preds = %176
  %181 = zext i32 %178 to i64
  %182 = getelementptr inbounds [53 x i8], ptr @global_regs, i64 0, i64 %181
  %183 = load i8, ptr %182, align 1, !tbaa !16
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %384

185:                                              ; preds = %180, %176, %172, %165
  %186 = load i32, ptr %1, align 8
  %187 = and i32 %186, 65535
  %188 = icmp eq i32 %187, 9
  br i1 %188, label %189, label %192

189:                                              ; preds = %185
  %190 = tail call ptr @find_reg_note(ptr noundef nonnull %1, i32 noundef 28, ptr noundef null) #25
  %191 = icmp eq ptr %190, null
  br i1 %191, label %192, label %384

192:                                              ; preds = %189, %185
  br i1 %16, label %196, label %193

193:                                              ; preds = %192
  %194 = tail call i32 @reg_used_between_p(ptr noundef %153, ptr noundef nonnull %2, ptr noundef nonnull %1) #25
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %384

196:                                              ; preds = %193, %192
  br i1 %17, label %223, label %197

197:                                              ; preds = %196
  %198 = load i32, ptr %152, align 8
  %199 = and i32 %198, 65535
  %200 = icmp eq i32 %199, 43
  br i1 %200, label %201, label %204

201:                                              ; preds = %197
  %202 = tail call ptr @find_reg_note(ptr noundef nonnull %0, i32 noundef 3, ptr noundef nonnull %152) #25
  %203 = icmp eq ptr %202, null
  br i1 %203, label %204, label %216

204:                                              ; preds = %201, %197
  %205 = load ptr, ptr @df, align 8, !tbaa !5
  %206 = getelementptr inbounds %struct.df, ptr %205, i64 0, i32 10
  %207 = load ptr, ptr %206, align 8, !tbaa !37
  %208 = load i32, ptr %18, align 8, !tbaa !16
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds ptr, ptr %207, i64 %209
  %211 = load ptr, ptr %210, align 8, !tbaa !5
  %212 = getelementptr inbounds %struct.df_insn_info, ptr %211, i64 0, i32 5
  %213 = load i32, ptr %212, align 8, !tbaa !54
  %214 = tail call fastcc i32 @use_crosses_set_p(ptr noundef nonnull %152, i32 noundef %213)
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %384

216:                                              ; preds = %204, %201
  %217 = load i32, ptr %152, align 8
  %218 = and i32 %217, 65535
  %219 = and i32 %217, 134283263
  %220 = icmp eq i32 %219, 134217745
  %221 = icmp eq i32 %218, 19
  %222 = or i1 %220, %221
  br i1 %222, label %384, label %223

223:                                              ; preds = %216, %196
  %224 = load ptr, ptr @df, align 8, !tbaa !5
  %225 = getelementptr inbounds %struct.df, ptr %224, i64 0, i32 10
  %226 = load ptr, ptr %225, align 8, !tbaa !37
  %227 = load i32, ptr %18, align 8, !tbaa !16
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds ptr, ptr %226, i64 %228
  %230 = load ptr, ptr %229, align 8, !tbaa !5
  %231 = getelementptr inbounds %struct.df_insn_info, ptr %230, i64 0, i32 5
  %232 = load i32, ptr %231, align 8, !tbaa !54
  %233 = load i32, ptr @last_call_luid, align 4, !tbaa !20
  %234 = icmp slt i32 %232, %233
  br i1 %234, label %235, label %242

235:                                              ; preds = %223
  %236 = load i32, ptr %152, align 8
  %237 = and i32 %236, 65535
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %238
  %240 = load i32, ptr %239, align 4, !tbaa !16
  %241 = icmp eq i32 %240, 9
  br i1 %241, label %242, label %384

242:                                              ; preds = %235, %223
  %243 = load i32, ptr %153, align 8
  %244 = trunc i32 %243 to i16
  switch i16 %244, label %384 [
    i16 37, label %245
    i16 46, label %268
  ]

245:                                              ; preds = %242
  %246 = load i32, ptr %152, align 8
  %247 = and i32 %246, 65535
  %248 = icmp eq i32 %247, 37
  br i1 %248, label %249, label %268

249:                                              ; preds = %245
  %250 = getelementptr i8, ptr %153, i64 8
  %251 = load i32, ptr %250, align 8, !tbaa !16
  %252 = icmp ult i32 %251, 53
  br i1 %252, label %253, label %258

253:                                              ; preds = %249
  %254 = lshr i32 %243, 16
  %255 = and i32 %254, 255
  %256 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %251, i32 noundef %255) #25
  %257 = icmp eq i8 %256, 0
  br i1 %257, label %384, label %258

258:                                              ; preds = %253, %249
  %259 = getelementptr i8, ptr %152, i64 8
  %260 = load i32, ptr %259, align 8, !tbaa !16
  %261 = icmp ult i32 %260, 53
  br i1 %261, label %262, label %268

262:                                              ; preds = %258
  %263 = load i32, ptr %152, align 8
  %264 = lshr i32 %263, 16
  %265 = and i32 %264, 255
  %266 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %260, i32 noundef %265) #25
  %267 = icmp eq i8 %266, 0
  br i1 %267, label %384, label %268

268:                                              ; preds = %242, %245, %258, %262
  %269 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %270 = load ptr, ptr %269, align 8, !tbaa !16
  %271 = load i32, ptr %270, align 8
  %272 = and i32 %271, 65535
  %273 = icmp eq i32 %272, 15
  br i1 %273, label %274, label %316

274:                                              ; preds = %268
  %275 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !16
  %277 = load i32, ptr %276, align 8, !tbaa !99
  %278 = icmp sgt i32 %277, 0
  br i1 %278, label %279, label %316

279:                                              ; preds = %274
  %280 = zext i32 %277 to i64
  br label %281

281:                                              ; preds = %279, %314
  %282 = phi i64 [ %280, %279 ], [ %283, %314 ]
  %283 = add nsw i64 %282, -1
  %284 = load ptr, ptr %269, align 8, !tbaa !16
  %285 = getelementptr inbounds %struct.rtx_def, ptr %284, i64 0, i32 1
  %286 = load ptr, ptr %285, align 8, !tbaa !16
  %287 = and i64 %283, 4294967295
  %288 = getelementptr inbounds %struct.rtvec_def, ptr %286, i64 0, i32 1, i64 %287
  %289 = load ptr, ptr %288, align 8, !tbaa !5
  %290 = load i32, ptr %289, align 8
  %291 = and i32 %290, 65535
  %292 = icmp eq i32 %291, 25
  br i1 %292, label %293, label %314

293:                                              ; preds = %281
  %294 = getelementptr inbounds %struct.rtx_def, ptr %289, i64 0, i32 1
  %295 = load ptr, ptr %294, align 8, !tbaa !16
  %296 = tail call i32 @rtx_equal_p(ptr noundef %295, ptr noundef nonnull %153) #25
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %384

298:                                              ; preds = %293
  %299 = load i32, ptr %295, align 8
  %300 = and i32 %299, 65535
  %301 = icmp eq i32 %300, 37
  br i1 %301, label %302, label %311

302:                                              ; preds = %298
  %303 = getelementptr i8, ptr %295, i64 8
  %304 = load i32, ptr %303, align 8, !tbaa !16
  %305 = icmp ugt i32 %304, 52
  br i1 %305, label %311, label %306

306:                                              ; preds = %302
  %307 = zext i32 %304 to i64
  %308 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %307
  %309 = load i8, ptr %308, align 1, !tbaa !16
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %311, label %314

311:                                              ; preds = %306, %302, %298
  %312 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %295, ptr noundef nonnull %152) #25
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %384

314:                                              ; preds = %306, %311, %281
  %315 = icmp ugt i64 %282, 1
  br i1 %315, label %281, label %316, !llvm.loop !156

316:                                              ; preds = %314, %274, %268
  %317 = load i32, ptr %152, align 8
  %318 = and i32 %317, 65535
  %319 = icmp eq i32 %318, 17
  br i1 %319, label %323, label %320

320:                                              ; preds = %316
  %321 = tail call i32 @volatile_refs_p(ptr noundef nonnull %152) #25
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %350, label %323

323:                                              ; preds = %320, %316
  br i1 %6, label %329, label %324

324:                                              ; preds = %323
  %325 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %326 = load ptr, ptr %325, align 8, !tbaa !16
  %327 = tail call i32 @volatile_refs_p(ptr noundef %326) #25
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %384

329:                                              ; preds = %324, %323
  %330 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %331 = load ptr, ptr %330, align 8, !tbaa !16
  %332 = icmp eq ptr %331, %1
  br i1 %332, label %350, label %333

333:                                              ; preds = %329, %346
  %334 = phi ptr [ %348, %346 ], [ %331, %329 ]
  %335 = load i32, ptr %334, align 8
  %336 = and i32 %335, 65535
  %337 = add nsw i32 %336, -11
  %338 = icmp ult i32 %337, -4
  %339 = icmp eq ptr %334, %2
  %340 = or i1 %339, %338
  br i1 %340, label %346, label %341

341:                                              ; preds = %333
  %342 = getelementptr inbounds %struct.rtx_def, ptr %334, i64 1
  %343 = load ptr, ptr %342, align 8, !tbaa !16
  %344 = tail call i32 @volatile_refs_p(ptr noundef %343) #25
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %384

346:                                              ; preds = %333, %341
  %347 = getelementptr inbounds %struct.rtx_def, ptr %334, i64 0, i32 1, i32 0, i32 0, i64 2
  %348 = load ptr, ptr %347, align 8, !tbaa !16
  %349 = icmp eq ptr %348, %1
  br i1 %349, label %350, label %333, !llvm.loop !157

350:                                              ; preds = %346, %329, %320
  %351 = load i32, ptr %152, align 8
  %352 = and i32 %351, 65535
  %353 = icmp eq i32 %352, 17
  br i1 %353, label %354, label %362

354:                                              ; preds = %350
  %355 = load i32, ptr %153, align 8
  %356 = and i32 %355, 65535
  %357 = icmp eq i32 %356, 37
  br i1 %357, label %358, label %362

358:                                              ; preds = %354
  %359 = getelementptr i8, ptr %153, i64 8
  %360 = load i32, ptr %359, align 8, !tbaa !16
  %361 = icmp ult i32 %360, 53
  br i1 %361, label %384, label %362

362:                                              ; preds = %358, %354, %350
  %363 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %364 = load ptr, ptr %363, align 8, !tbaa !16
  %365 = icmp eq ptr %364, %1
  br i1 %365, label %383, label %366

366:                                              ; preds = %362, %379
  %367 = phi ptr [ %381, %379 ], [ %364, %362 ]
  %368 = load i32, ptr %367, align 8
  %369 = and i32 %368, 65535
  %370 = add nsw i32 %369, -11
  %371 = icmp ult i32 %370, -4
  %372 = icmp eq ptr %367, %2
  %373 = or i1 %372, %371
  br i1 %373, label %379, label %374

374:                                              ; preds = %366
  %375 = getelementptr inbounds %struct.rtx_def, ptr %367, i64 1
  %376 = load ptr, ptr %375, align 8, !tbaa !16
  %377 = tail call i32 @volatile_insn_p(ptr noundef %376) #25
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %384

379:                                              ; preds = %366, %374
  %380 = getelementptr inbounds %struct.rtx_def, ptr %367, i64 0, i32 1, i32 0, i32 0, i64 2
  %381 = load ptr, ptr %380, align 8, !tbaa !16
  %382 = icmp eq ptr %381, %1
  br i1 %382, label %383, label %366, !llvm.loop !158

383:                                              ; preds = %379, %362
  store ptr %153, ptr %3, align 8, !tbaa !5
  store ptr %152, ptr %4, align 8, !tbaa !5
  br label %384

384:                                              ; preds = %37, %128, %110, %84, %80, %293, %311, %341, %374, %31, %358, %324, %242, %253, %262, %147, %159, %169, %180, %189, %193, %204, %235, %162, %162, %216, %23, %15, %139, %141, %383
  %385 = phi i32 [ 1, %383 ], [ 0, %141 ], [ 0, %139 ], [ 0, %15 ], [ 0, %23 ], [ 0, %216 ], [ 0, %162 ], [ 0, %162 ], [ 0, %235 ], [ 0, %204 ], [ 0, %193 ], [ 0, %189 ], [ 0, %180 ], [ 0, %169 ], [ 0, %159 ], [ 0, %147 ], [ 0, %262 ], [ 0, %253 ], [ 0, %242 ], [ 0, %324 ], [ 0, %358 ], [ 0, %31 ], [ 0, %374 ], [ 0, %341 ], [ 0, %311 ], [ 0, %293 ], [ 0, %80 ], [ 0, %84 ], [ 0, %110 ], [ 0, %128 ], [ 0, %37 ]
  ret i32 %385
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @undo_all() unnamed_addr #9 {
  %1 = load ptr, ptr @undobuf, align 8, !tbaa !117
  %2 = icmp eq ptr %1, null
  br i1 %2, label %28, label %3

3:                                                ; preds = %0, %25
  %4 = phi ptr [ %5, %25 ], [ %1, %0 ]
  %5 = load ptr, ptr %4, align 8, !tbaa !72
  %6 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !125
  switch i32 %7, label %24 [
    i32 0, label %8
    i32 1, label %13
    i32 2, label %18
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  store ptr %10, ptr %12, align 8, !tbaa !5
  br label %25

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 2
  %15 = load i32, ptr %14, align 8, !tbaa !16
  %16 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  store i32 %15, ptr %17, align 4, !tbaa !20
  br label %25

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 3
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = load ptr, ptr %20, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.undo, ptr %4, i64 0, i32 2
  %23 = load i32, ptr %22, align 8, !tbaa !16
  tail call void @adjust_reg_mode(ptr noundef %21, i32 noundef %23) #25
  br label %25

24:                                               ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 4112, ptr noundef nonnull @.str.5) #25
  br label %25

25:                                               ; preds = %24, %18, %13, %8
  %26 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  store ptr %26, ptr %4, align 8, !tbaa !72
  store ptr %4, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %27 = icmp eq ptr %5, null
  br i1 %27, label %28, label %3, !llvm.loop !159

28:                                               ; preds = %25, %0
  store ptr null, ptr @undobuf, align 8, !tbaa !117
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @combinable_i3pat(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, ptr noundef %5) unnamed_addr #9 {
  %7 = load ptr, ptr %1, align 8, !tbaa !5
  %8 = load i32, ptr %7, align 8
  %9 = trunc i32 %8 to i16
  switch i16 %9, label %121 [
    i16 23, label %15
    i16 15, label %10
  ]

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8, !tbaa !99
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %115, label %121

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !16
  br label %20

20:                                               ; preds = %24, %15
  %21 = phi ptr [ %17, %15 ], [ %26, %24 ]
  %22 = load i32, ptr %21, align 8
  %23 = trunc i32 %22 to i16
  switch i16 %23, label %27 [
    i16 40, label %24
    i16 39, label %24
    i16 120, label %24
  ]

24:                                               ; preds = %20, %20, %20
  %25 = getelementptr inbounds %struct.rtx_def, ptr %21, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  br label %20, !llvm.loop !160

27:                                               ; preds = %20
  %28 = icmp eq ptr %21, %17
  br i1 %28, label %48, label %29

29:                                               ; preds = %27
  %30 = and i32 %22, 65535
  %31 = icmp eq i32 %30, 43
  br i1 %31, label %32, label %40

32:                                               ; preds = %29
  %33 = tail call i32 @rtx_equal_p(ptr noundef %2, ptr noundef nonnull %21) #25
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %32
  %36 = icmp eq ptr %3, null
  br i1 %36, label %48, label %37

37:                                               ; preds = %35
  %38 = tail call i32 @rtx_equal_p(ptr noundef nonnull %3, ptr noundef nonnull %21) #25
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37, %32, %29
  %41 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %2, ptr noundef nonnull %21) #25
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %121

43:                                               ; preds = %40
  %44 = icmp eq ptr %3, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %43
  %46 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %3, ptr noundef nonnull %21) #25
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %121

48:                                               ; preds = %45, %43, %37, %35, %27
  %49 = load i32, ptr %21, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 37
  br i1 %51, label %52, label %61

52:                                               ; preds = %48
  %53 = getelementptr i8, ptr %21, i64 8
  %54 = load i32, ptr %53, align 8, !tbaa !16
  %55 = icmp ult i32 %54, 53
  br i1 %55, label %56, label %61

56:                                               ; preds = %52
  %57 = lshr i32 %49, 16
  %58 = and i32 %57, 255
  %59 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %54, i32 noundef %58) #25
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %121, label %61

61:                                               ; preds = %56, %52, %48
  %62 = icmp eq i32 %4, 0
  br i1 %62, label %66, label %63

63:                                               ; preds = %61
  %64 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %3, ptr noundef %19) #25
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %121

66:                                               ; preds = %63, %61
  %67 = load i32, ptr %17, align 8
  %68 = and i32 %67, 65535
  %69 = icmp eq i32 %68, 39
  br i1 %69, label %70, label %87

70:                                               ; preds = %66
  %71 = lshr i32 %67, 16
  %72 = and i32 %71, 255
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !16
  %76 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %77 = load ptr, ptr %76, align 8, !tbaa !16
  %78 = load i32, ptr %77, align 8
  %79 = lshr i32 %78, 16
  %80 = and i32 %79, 255
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %81
  %83 = load i8, ptr %82, align 1, !tbaa !16
  %84 = icmp ult i8 %75, %83
  %85 = select i1 %84, i32 %67, i32 %78
  %86 = select i1 %84, ptr %17, ptr %77
  br label %87

87:                                               ; preds = %70, %66
  %88 = phi i32 [ %67, %66 ], [ %85, %70 ]
  %89 = phi ptr [ %17, %66 ], [ %86, %70 ]
  %90 = icmp ne ptr %5, null
  %91 = and i32 %88, 65535
  %92 = icmp eq i32 %91, 37
  %93 = select i1 %90, i1 %92, i1 false
  br i1 %93, label %94, label %121

94:                                               ; preds = %87
  %95 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %96 = load ptr, ptr %95, align 8, !tbaa !16
  %97 = tail call i32 @reg_referenced_p(ptr noundef nonnull %89, ptr noundef %96) #25
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %121, label %99

99:                                               ; preds = %94
  %100 = getelementptr i8, ptr %89, i64 8
  %101 = load i32, ptr %100, align 8, !tbaa !16
  switch i32 %101, label %105 [
    i32 20, label %121
    i32 6, label %121
    i32 16, label %102
    i32 7, label %121
  ]

102:                                              ; preds = %99
  %103 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 16), align 16, !tbaa !16
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %105, label %121

105:                                              ; preds = %99, %102
  %106 = load ptr, ptr %5, align 8, !tbaa !5
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %121

108:                                              ; preds = %105
  store ptr %89, ptr %5, align 8, !tbaa !5
  br label %121

109:                                              ; preds = %115
  %110 = add nuw nsw i64 %116, 1
  %111 = load ptr, ptr %11, align 8, !tbaa !16
  %112 = load i32, ptr %111, align 8, !tbaa !99
  %113 = sext i32 %112 to i64
  %114 = icmp slt i64 %110, %113
  br i1 %114, label %115, label %121, !llvm.loop !161

115:                                              ; preds = %10, %109
  %116 = phi i64 [ %110, %109 ], [ 0, %10 ]
  %117 = phi ptr [ %111, %109 ], [ %12, %10 ]
  %118 = getelementptr inbounds %struct.rtvec_def, ptr %117, i64 0, i32 1, i64 %116
  %119 = tail call fastcc i32 @combinable_i3pat(ptr noundef %0, ptr noundef nonnull %118, ptr noundef %2, ptr noundef %3, i32 noundef %4, ptr noundef %5), !range !103
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %109

121:                                              ; preds = %115, %109, %10, %99, %99, %99, %87, %94, %102, %108, %6, %63, %56, %45, %40, %105
  %122 = phi i32 [ 0, %105 ], [ 0, %40 ], [ 0, %45 ], [ 0, %56 ], [ 0, %63 ], [ 1, %6 ], [ 1, %108 ], [ 1, %102 ], [ 1, %99 ], [ 1, %94 ], [ 1, %87 ], [ 1, %99 ], [ 1, %99 ], [ 1, %10 ], [ 0, %115 ], [ 1, %109 ]
  ret i32 %122
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @find_single_use(ptr noundef %0, ptr noundef readonly %1, ptr noundef writeonly %2) unnamed_addr #9 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %52

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !16
  %10 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 2
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = icmp eq ptr %11, null
  br i1 %12, label %52, label %13

13:                                               ; preds = %7, %48
  %14 = phi ptr [ %50, %48 ], [ %11, %7 ]
  %15 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1
  %16 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1, i32 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !16
  %18 = icmp eq ptr %17, %9
  br i1 %18, label %19, label %52

19:                                               ; preds = %13
  %20 = load i32, ptr %14, align 8
  %21 = and i32 %20, 65535
  %22 = add nsw i32 %21, -7
  %23 = icmp ult i32 %22, 4
  br i1 %23, label %24, label %48

24:                                               ; preds = %19
  %25 = tail call i32 @dead_or_set_p(ptr noundef nonnull %14, ptr noundef nonnull %0) #25
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %24
  %28 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %29 = load i32, ptr %15, align 8, !tbaa !16
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %28, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = icmp eq ptr %32, null
  br i1 %33, label %48, label %38

34:                                               ; preds = %38
  %35 = getelementptr inbounds %struct.rtx_def, ptr %39, i64 0, i32 1, i32 0, i32 0, i64 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = icmp eq ptr %36, null
  br i1 %37, label %48, label %38, !llvm.loop !162

38:                                               ; preds = %27, %34
  %39 = phi ptr [ %36, %34 ], [ %32, %27 ]
  %40 = getelementptr inbounds %struct.rtx_def, ptr %39, i64 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !16
  %42 = icmp eq ptr %41, %1
  br i1 %42, label %43, label %34

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 1
  %45 = tail call fastcc ptr @find_single_use_1(ptr noundef nonnull %0, ptr noundef nonnull %44)
  %46 = icmp eq ptr %2, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  store ptr %14, ptr %2, align 8, !tbaa !5
  br label %52

48:                                               ; preds = %34, %27, %19, %24
  %49 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1, i32 0, i32 0, i64 2
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %13, !llvm.loop !163

52:                                               ; preds = %48, %13, %7, %43, %47, %3
  %53 = phi ptr [ null, %3 ], [ %45, %47 ], [ %45, %43 ], [ null, %7 ], [ null, %13 ], [ null, %48 ]
  ret ptr %53
}

declare i32 @ix86_cc_mode(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @can_change_dest_mode(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %37

7:                                                ; preds = %3
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = icmp ult i32 %9, 53
  br i1 %10, label %11, label %26

11:                                               ; preds = %7
  %12 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %9, i32 noundef %2) #25
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %37, label %14

14:                                               ; preds = %11
  %15 = zext i32 %9 to i64
  %16 = load i32, ptr %0, align 8
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = zext i32 %2 to i64
  %23 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !16
  %25 = icmp uge i8 %21, %24
  br label %37

26:                                               ; preds = %7
  %27 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !5
  %28 = sext i32 %9 to i64
  %29 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %27, i64 %28
  %30 = load i32, ptr %29, align 4, !tbaa !120
  %31 = icmp ne i32 %30, 1
  %32 = icmp ne i32 %1, 0
  %33 = or i1 %32, %31
  br i1 %33, label %37, label %34

34:                                               ; preds = %26
  %35 = and i32 %4, 134217728
  %36 = icmp eq i32 %35, 0
  br label %37

37:                                               ; preds = %26, %34, %11, %14, %3
  %38 = phi i1 [ false, %3 ], [ false, %11 ], [ %25, %14 ], [ false, %26 ], [ %36, %34 ]
  %39 = zext i1 %38 to i8
  ret i8 %39
}

declare ptr @gen_rtx_REG(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @do_SUBST_MODE(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = load i32, ptr %3, align 8
  %5 = lshr i32 %4, 16
  %6 = and i32 %5, 255
  %7 = icmp eq i32 %6, %1
  br i1 %7, label %22, label %8

8:                                                ; preds = %2
  %9 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %10 = icmp eq ptr %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  %12 = load ptr, ptr %9, align 8, !tbaa !72
  store ptr %12, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %15

13:                                               ; preds = %8
  %14 = tail call ptr @xmalloc(i64 noundef 32) #25
  br label %15

15:                                               ; preds = %13, %11
  %16 = phi ptr [ %9, %11 ], [ %14, %13 ]
  %17 = getelementptr inbounds %struct.undo, ptr %16, i64 0, i32 1
  store i32 2, ptr %17, align 8, !tbaa !125
  %18 = getelementptr inbounds %struct.undo, ptr %16, i64 0, i32 3
  store ptr %0, ptr %18, align 8, !tbaa !16
  %19 = getelementptr inbounds %struct.undo, ptr %16, i64 0, i32 2
  store i32 %6, ptr %19, align 8, !tbaa !16
  %20 = load ptr, ptr %0, align 8, !tbaa !5
  tail call void @adjust_reg_mode(ptr noundef %20, i32 noundef %1) #25
  %21 = load ptr, ptr @undobuf, align 8, !tbaa !117
  store ptr %21, ptr %16, align 8, !tbaa !72
  store ptr %16, ptr @undobuf, align 8, !tbaa !117
  br label %22

22:                                               ; preds = %2, %15
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @subst(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4) unnamed_addr #9 {
  %6 = load i32, ptr %0, align 8
  %7 = and i32 %6, 65535
  %8 = icmp ne i32 %3, 0
  br i1 %8, label %46, label %9

9:                                                ; preds = %5
  %10 = icmp eq ptr %0, %1
  br i1 %10, label %27, label %11

11:                                               ; preds = %9
  %12 = icmp eq i32 %7, 37
  br i1 %12, label %13, label %46

13:                                               ; preds = %11
  %14 = load i32, ptr %1, align 8
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 37
  br i1 %16, label %17, label %48

17:                                               ; preds = %13
  %18 = getelementptr i8, ptr %0, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = getelementptr i8, ptr %1, i64 8
  %21 = load i32, ptr %20, align 8, !tbaa !16
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %35

23:                                               ; preds = %17
  %24 = xor i32 %14, %6
  %25 = and i32 %24, 16711680
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %23, %9
  %28 = load i32, ptr @n_occurrences, align 4, !tbaa !20
  %29 = add nsw i32 %28, 1
  store i32 %29, ptr @n_occurrences, align 4, !tbaa !20
  %30 = icmp ne i32 %4, 0
  %31 = icmp sgt i32 %28, 0
  %32 = select i1 %30, i1 %31, i1 false
  br i1 %32, label %33, label %473

33:                                               ; preds = %27
  %34 = tail call ptr @copy_rtx(ptr noundef %2) #25
  br label %473

35:                                               ; preds = %17, %23
  %36 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %0, ptr noundef nonnull %1) #25
  %37 = icmp eq i32 %36, 0
  %38 = load i32, ptr %0, align 8
  br i1 %37, label %39, label %41

39:                                               ; preds = %35
  %40 = and i32 %38, 65535
  br label %48

41:                                               ; preds = %35
  %42 = lshr i32 %38, 16
  %43 = and i32 %42, 255
  %44 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %45 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %43, ptr noundef %44) #25
  br label %473

46:                                               ; preds = %11, %5
  %47 = trunc i32 %6 to i16
  switch i16 %47, label %48 [
    i16 122, label %56
    i16 43, label %56
  ]

48:                                               ; preds = %13, %39, %46
  %49 = phi i32 [ %40, %39 ], [ %7, %46 ], [ 37, %13 ]
  %50 = phi i32 [ %38, %39 ], [ %6, %46 ], [ %6, %13 ]
  %51 = zext i32 %49 to i64
  %52 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %51
  %53 = load i32, ptr %52, align 4, !tbaa !16
  %54 = and i32 %53, -2
  %55 = icmp eq i32 %54, 8
  br i1 %55, label %473, label %56

56:                                               ; preds = %46, %46, %48
  %57 = phi i32 [ %6, %46 ], [ %6, %46 ], [ %50, %48 ]
  %58 = icmp eq ptr %0, %2
  br i1 %58, label %473, label %59

59:                                               ; preds = %56
  %60 = and i32 %57, 65535
  %61 = icmp eq i32 %60, 37
  br i1 %61, label %62, label %76

62:                                               ; preds = %59
  %63 = load i32, ptr %2, align 8
  %64 = and i32 %63, 65535
  %65 = icmp eq i32 %64, 37
  br i1 %65, label %66, label %76

66:                                               ; preds = %62
  %67 = getelementptr i8, ptr %0, i64 8
  %68 = load i32, ptr %67, align 8, !tbaa !16
  %69 = getelementptr i8, ptr %2, i64 8
  %70 = load i32, ptr %69, align 8, !tbaa !16
  %71 = icmp eq i32 %68, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %66
  %73 = xor i32 %63, %57
  %74 = and i32 %73, 16711680
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %473, label %76

76:                                               ; preds = %72, %66, %62, %59
  %77 = icmp eq i32 %7, 15
  br i1 %77, label %78, label %141

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %80 = load ptr, ptr %79, align 8, !tbaa !16
  %81 = getelementptr inbounds %struct.rtvec_def, ptr %80, i64 0, i32 1
  %82 = load ptr, ptr %81, align 8, !tbaa !5
  %83 = load i32, ptr %82, align 8
  %84 = and i32 %83, 65535
  %85 = icmp eq i32 %84, 23
  br i1 %85, label %86, label %138

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.rtx_def, ptr %82, i64 0, i32 1, i32 0, i32 0, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !16
  %89 = load i32, ptr %88, align 8
  %90 = and i32 %89, 65535
  %91 = icmp eq i32 %90, 17
  br i1 %91, label %92, label %138

92:                                               ; preds = %86
  %93 = tail call fastcc ptr @subst(ptr noundef nonnull %82, ptr noundef %1, ptr noundef %2, i32 noundef 0, i32 noundef %4)
  %94 = load i32, ptr %93, align 8
  %95 = and i32 %94, 65535
  %96 = icmp eq i32 %95, 25
  br i1 %96, label %97, label %102

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.rtx_def, ptr %93, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %101 = icmp eq ptr %99, %100
  br i1 %101, label %473, label %102

102:                                              ; preds = %97, %92
  %103 = load ptr, ptr %79, align 8, !tbaa !16
  %104 = getelementptr inbounds %struct.rtvec_def, ptr %103, i64 0, i32 1
  tail call fastcc void @do_SUBST(ptr noundef nonnull %104, ptr noundef nonnull %93)
  %105 = load ptr, ptr %79, align 8, !tbaa !16
  %106 = load i32, ptr %105, align 8, !tbaa !99
  %107 = icmp sgt i32 %106, 1
  br i1 %107, label %108, label %431

108:                                              ; preds = %102
  %109 = zext i32 %106 to i64
  br label %110

110:                                              ; preds = %108, %136
  %111 = phi i64 [ %109, %108 ], [ %112, %136 ]
  %112 = add nsw i64 %111, -1
  %113 = load ptr, ptr %79, align 8, !tbaa !16
  %114 = and i64 %112, 4294967295
  %115 = getelementptr inbounds %struct.rtvec_def, ptr %113, i64 0, i32 1, i64 %114
  %116 = load ptr, ptr %115, align 8, !tbaa !5
  %117 = getelementptr inbounds %struct.rtx_def, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = load i32, ptr %118, align 8
  %120 = trunc i32 %119 to i16
  switch i16 %120, label %121 [
    i16 37, label %136
    i16 46, label %136
    i16 36, label %136
  ]

121:                                              ; preds = %110
  %122 = tail call fastcc ptr @subst(ptr noundef nonnull %118, ptr noundef %1, ptr noundef %2, i32 noundef 0, i32 noundef %4)
  %123 = load i32, ptr %122, align 8
  %124 = and i32 %123, 65535
  %125 = icmp eq i32 %124, 25
  br i1 %125, label %126, label %131

126:                                              ; preds = %121
  %127 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1
  %128 = load ptr, ptr %127, align 8, !tbaa !16
  %129 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %130 = icmp eq ptr %128, %129
  br i1 %130, label %473, label %131

131:                                              ; preds = %126, %121
  %132 = load ptr, ptr %79, align 8, !tbaa !16
  %133 = getelementptr inbounds %struct.rtvec_def, ptr %132, i64 0, i32 1, i64 %114
  %134 = load ptr, ptr %133, align 8, !tbaa !5
  %135 = getelementptr inbounds %struct.rtx_def, ptr %134, i64 0, i32 1
  tail call fastcc void @do_SUBST(ptr noundef nonnull %135, ptr noundef nonnull %122)
  br label %136

136:                                              ; preds = %131, %110, %110, %110
  %137 = icmp ugt i64 %111, 2
  br i1 %137, label %110, label %431, !llvm.loop !164

138:                                              ; preds = %86, %78
  %139 = load i8, ptr getelementptr inbounds ([139 x i8], ptr @rtx_length, i64 0, i64 15), align 1, !tbaa !16
  %140 = load ptr, ptr getelementptr inbounds ([139 x ptr], ptr @rtx_format, i64 0, i64 15), align 8, !tbaa !5
  br label %154

141:                                              ; preds = %76
  %142 = zext i32 %7 to i64
  %143 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %142
  %144 = load i8, ptr %143, align 1, !tbaa !16
  %145 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %142
  %146 = load ptr, ptr %145, align 8, !tbaa !5
  %147 = icmp eq i32 %7, 23
  br i1 %147, label %148, label %154

148:                                              ; preds = %141
  %149 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !16
  %151 = load i32, ptr %150, align 8
  %152 = trunc i32 %151 to i16
  switch i16 %152, label %154 [
    i16 37, label %153
    i16 46, label %153
    i16 36, label %153
  ]

153:                                              ; preds = %148, %148, %148
  br label %154

154:                                              ; preds = %138, %148, %153, %141
  %155 = phi i1 [ true, %153 ], [ false, %141 ], [ true, %148 ], [ false, %138 ]
  %156 = phi i8 [ %144, %153 ], [ %144, %141 ], [ %144, %148 ], [ %139, %138 ]
  %157 = phi ptr [ @.str.13, %153 ], [ %146, %141 ], [ %146, %148 ], [ %140, %138 ]
  %158 = load i8, ptr %157, align 1, !tbaa !16
  %159 = icmp eq i8 %158, 101
  br i1 %159, label %160, label %166

160:                                              ; preds = %154
  %161 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %162 = load ptr, ptr %161, align 8, !tbaa !16
  %163 = load i32, ptr %162, align 8
  %164 = lshr i32 %163, 16
  %165 = and i32 %164, 255
  br label %166

166:                                              ; preds = %160, %154
  %167 = phi i32 [ %165, %160 ], [ 0, %154 ]
  %168 = icmp eq i8 %156, 0
  br i1 %168, label %431, label %169

169:                                              ; preds = %166
  %170 = trunc i32 %6 to i16
  %171 = icmp eq i32 %7, 40
  %172 = getelementptr i8, ptr %1, i64 8
  %173 = getelementptr %struct.rtx_def, ptr %2, i64 0, i32 1
  %174 = icmp eq i32 %7, 39
  %175 = icmp ne i32 %4, 0
  %176 = icmp eq i32 %4, 0
  %177 = zext i8 %156 to i64
  br label %178

178:                                              ; preds = %169, %427
  %179 = phi i64 [ 0, %169 ], [ %429, %427 ]
  %180 = phi ptr [ %0, %169 ], [ %428, %427 ]
  %181 = getelementptr inbounds i8, ptr %157, i64 %179
  %182 = load i8, ptr %181, align 1, !tbaa !16
  switch i8 %182, label %427 [
    i8 69, label %183
    i8 101, label %283
  ]

183:                                              ; preds = %178
  %184 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1
  %185 = getelementptr inbounds [1 x %union.rtunion_def], ptr %184, i64 0, i64 %179
  %186 = load ptr, ptr %185, align 8, !tbaa !16
  %187 = load i32, ptr %186, align 8, !tbaa !99
  %188 = icmp slt i32 %187, 1
  br i1 %188, label %427, label %189

189:                                              ; preds = %183
  %190 = add nsw i32 %187, -1
  %191 = zext i32 %190 to i64
  br i1 %176, label %192, label %234

192:                                              ; preds = %189, %228
  %193 = phi i64 [ %232, %228 ], [ %191, %189 ]
  %194 = load ptr, ptr %185, align 8, !tbaa !16
  %195 = getelementptr inbounds %struct.rtvec_def, ptr %194, i64 0, i32 1, i64 %193
  %196 = load ptr, ptr %195, align 8, !tbaa !5
  %197 = icmp eq ptr %196, %1
  br i1 %197, label %225, label %198

198:                                              ; preds = %192
  %199 = load i32, ptr %196, align 8
  %200 = and i32 %199, 65535
  %201 = icmp eq i32 %200, 37
  br i1 %201, label %202, label %215

202:                                              ; preds = %198
  %203 = load i32, ptr %1, align 8
  %204 = and i32 %203, 65535
  %205 = icmp eq i32 %204, 37
  br i1 %205, label %206, label %215

206:                                              ; preds = %202
  %207 = getelementptr i8, ptr %196, i64 8
  %208 = load i32, ptr %207, align 8, !tbaa !16
  %209 = load i32, ptr %172, align 8, !tbaa !16
  %210 = icmp eq i32 %208, %209
  br i1 %210, label %211, label %215

211:                                              ; preds = %206
  %212 = xor i32 %203, %199
  %213 = and i32 %212, 16711680
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %225, label %215

215:                                              ; preds = %211, %206, %202, %198
  %216 = tail call fastcc ptr @subst(ptr noundef nonnull %196, ptr noundef %1, ptr noundef %2, i32 noundef 0, i32 noundef 0)
  %217 = load i32, ptr %216, align 8
  %218 = and i32 %217, 65535
  %219 = icmp eq i32 %218, 25
  br i1 %219, label %220, label %228

220:                                              ; preds = %215
  %221 = getelementptr inbounds %struct.rtx_def, ptr %216, i64 0, i32 1
  %222 = load ptr, ptr %221, align 8, !tbaa !16
  %223 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %224 = icmp eq ptr %222, %223
  br i1 %224, label %473, label %228

225:                                              ; preds = %211, %192
  %226 = load i32, ptr @n_occurrences, align 4, !tbaa !20
  %227 = add nsw i32 %226, 1
  store i32 %227, ptr @n_occurrences, align 4, !tbaa !20
  br label %228

228:                                              ; preds = %225, %220, %215
  %229 = phi ptr [ %2, %225 ], [ %216, %220 ], [ %216, %215 ]
  %230 = load ptr, ptr %185, align 8, !tbaa !16
  %231 = getelementptr inbounds %struct.rtvec_def, ptr %230, i64 0, i32 1, i64 %193
  tail call fastcc void @do_SUBST(ptr noundef nonnull %231, ptr noundef %229)
  %232 = add nsw i64 %193, -1
  %233 = icmp slt i64 %193, 1
  br i1 %233, label %427, label %192, !llvm.loop !165

234:                                              ; preds = %189, %277
  %235 = phi i64 [ %281, %277 ], [ %191, %189 ]
  %236 = load ptr, ptr %185, align 8, !tbaa !16
  %237 = getelementptr inbounds %struct.rtvec_def, ptr %236, i64 0, i32 1, i64 %235
  %238 = load ptr, ptr %237, align 8, !tbaa !5
  %239 = icmp eq ptr %238, %1
  br i1 %239, label %257, label %240

240:                                              ; preds = %234
  %241 = load i32, ptr %238, align 8
  %242 = and i32 %241, 65535
  %243 = icmp eq i32 %242, 37
  br i1 %243, label %244, label %267

244:                                              ; preds = %240
  %245 = load i32, ptr %1, align 8
  %246 = and i32 %245, 65535
  %247 = icmp eq i32 %246, 37
  br i1 %247, label %248, label %267

248:                                              ; preds = %244
  %249 = getelementptr i8, ptr %238, i64 8
  %250 = load i32, ptr %249, align 8, !tbaa !16
  %251 = load i32, ptr %172, align 8, !tbaa !16
  %252 = icmp eq i32 %250, %251
  br i1 %252, label %253, label %267

253:                                              ; preds = %248
  %254 = xor i32 %245, %241
  %255 = and i32 %254, 16711680
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %267

257:                                              ; preds = %253, %234
  %258 = load i32, ptr @n_occurrences, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %263, label %260

260:                                              ; preds = %257
  %261 = tail call ptr @copy_rtx(ptr noundef %2) #25
  %262 = load i32, ptr @n_occurrences, align 4, !tbaa !20
  br label %263

263:                                              ; preds = %257, %260
  %264 = phi i32 [ %262, %260 ], [ 0, %257 ]
  %265 = phi ptr [ %261, %260 ], [ %2, %257 ]
  %266 = add nsw i32 %264, 1
  store i32 %266, ptr @n_occurrences, align 4, !tbaa !20
  br label %277

267:                                              ; preds = %253, %248, %244, %240
  %268 = tail call fastcc ptr @subst(ptr noundef nonnull %238, ptr noundef %1, ptr noundef %2, i32 noundef 0, i32 noundef %4)
  %269 = load i32, ptr %268, align 8
  %270 = and i32 %269, 65535
  %271 = icmp eq i32 %270, 25
  br i1 %271, label %272, label %277

272:                                              ; preds = %267
  %273 = getelementptr inbounds %struct.rtx_def, ptr %268, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !16
  %275 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %276 = icmp eq ptr %274, %275
  br i1 %276, label %473, label %277

277:                                              ; preds = %267, %272, %263
  %278 = phi ptr [ %265, %263 ], [ %268, %272 ], [ %268, %267 ]
  %279 = load ptr, ptr %185, align 8, !tbaa !16
  %280 = getelementptr inbounds %struct.rtvec_def, ptr %279, i64 0, i32 1, i64 %235
  tail call fastcc void @do_SUBST(ptr noundef nonnull %280, ptr noundef %278)
  %281 = add nsw i64 %235, -1
  %282 = icmp slt i64 %235, 1
  br i1 %282, label %427, label %234, !llvm.loop !165

283:                                              ; preds = %178
  %284 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1
  %285 = getelementptr inbounds [1 x %union.rtunion_def], ptr %284, i64 0, i64 %179
  %286 = load ptr, ptr %285, align 8, !tbaa !16
  %287 = icmp eq i64 %179, 0
  %288 = and i1 %8, %287
  br i1 %288, label %289, label %295

289:                                              ; preds = %283
  switch i16 %170, label %295 [
    i16 120, label %290
    i16 39, label %290
    i16 40, label %382
  ]

290:                                              ; preds = %289, %289
  %291 = load i32, ptr %286, align 8
  %292 = and i32 %291, 65535
  %293 = icmp eq i32 %292, 37
  %294 = select i1 %293, i1 true, i1 %171
  br i1 %294, label %382, label %295

295:                                              ; preds = %289, %290, %283
  %296 = icmp eq ptr %286, %1
  br i1 %296, label %314, label %297

297:                                              ; preds = %295
  %298 = load i32, ptr %286, align 8
  %299 = and i32 %298, 65535
  %300 = icmp eq i32 %299, 37
  br i1 %300, label %301, label %374

301:                                              ; preds = %297
  %302 = load i32, ptr %1, align 8
  %303 = and i32 %302, 65535
  %304 = icmp eq i32 %303, 37
  br i1 %304, label %305, label %374

305:                                              ; preds = %301
  %306 = getelementptr i8, ptr %286, i64 8
  %307 = load i32, ptr %306, align 8, !tbaa !16
  %308 = load i32, ptr %172, align 8, !tbaa !16
  %309 = icmp eq i32 %307, %308
  br i1 %309, label %310, label %374

310:                                              ; preds = %305
  %311 = xor i32 %302, %298
  %312 = and i32 %311, 16711680
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %374

314:                                              ; preds = %310, %295
  %315 = load i32, ptr %2, align 8
  %316 = and i32 %315, 65535
  %317 = icmp eq i32 %316, 39
  br i1 %317, label %318, label %341

318:                                              ; preds = %314
  %319 = lshr i32 %315, 16
  %320 = and i32 %319, 255
  %321 = load ptr, ptr %173, align 8, !tbaa !16
  %322 = load i32, ptr %321, align 8
  %323 = lshr i32 %322, 16
  %324 = and i32 %323, 255
  %325 = tail call zeroext i8 @ix86_modes_tieable_p(i32 noundef %320, i32 noundef %324) #25
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %327, label %341

327:                                              ; preds = %318
  br i1 %174, label %328, label %338

328:                                              ; preds = %327
  %329 = load i32, ptr %180, align 8
  %330 = lshr i32 %329, 16
  %331 = and i32 %330, 255
  %332 = load ptr, ptr %173, align 8, !tbaa !16
  %333 = load i32, ptr %332, align 8
  %334 = lshr i32 %333, 16
  %335 = and i32 %334, 255
  %336 = tail call zeroext i8 @ix86_modes_tieable_p(i32 noundef %331, i32 noundef %335) #25
  %337 = icmp eq i8 %336, 0
  br i1 %337, label %338, label %342

338:                                              ; preds = %328, %327
  %339 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %340 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %339) #25
  br label %473

341:                                              ; preds = %318, %314
  br i1 %174, label %342, label %363

342:                                              ; preds = %328, %341
  %343 = load i32, ptr %2, align 8
  %344 = and i32 %343, 65535
  %345 = icmp eq i32 %344, 37
  br i1 %345, label %346, label %363

346:                                              ; preds = %342
  %347 = load i32, ptr %173, align 8, !tbaa !16
  %348 = icmp ult i32 %347, 53
  br i1 %348, label %349, label %363

349:                                              ; preds = %346
  %350 = lshr i32 %343, 16
  %351 = and i32 %350, 255
  %352 = load i32, ptr %180, align 8
  %353 = lshr i32 %352, 16
  %354 = and i32 %353, 255
  %355 = zext i32 %347 to i64
  %356 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %355
  %357 = load i32, ptr %356, align 4, !tbaa !16
  %358 = tail call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %351, i32 noundef %354, i32 noundef %357) #25
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %363, label %360

360:                                              ; preds = %349
  %361 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %362 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %361) #25
  br label %473

363:                                              ; preds = %349, %346, %342, %341
  %364 = load i32, ptr @n_occurrences, align 4
  %365 = icmp ne i32 %364, 0
  %366 = select i1 %175, i1 %365, i1 false
  br i1 %366, label %367, label %370

367:                                              ; preds = %363
  %368 = tail call ptr @copy_rtx(ptr noundef nonnull %2) #25
  %369 = load i32, ptr @n_occurrences, align 4, !tbaa !20
  br label %370

370:                                              ; preds = %363, %367
  %371 = phi i32 [ %369, %367 ], [ %364, %363 ]
  %372 = phi ptr [ %368, %367 ], [ %2, %363 ]
  %373 = add nsw i32 %371, 1
  store i32 %373, ptr @n_occurrences, align 4, !tbaa !20
  br label %382

374:                                              ; preds = %310, %305, %301, %297
  br i1 %8, label %375, label %376

375:                                              ; preds = %374
  switch i16 %170, label %378 [
    i16 120, label %377
    i16 40, label %377
    i16 39, label %377
    i16 23, label %377
  ]

376:                                              ; preds = %374
  br i1 %155, label %377, label %378

377:                                              ; preds = %375, %375, %375, %375, %376
  br label %378

378:                                              ; preds = %375, %377, %376
  %379 = phi i1 [ false, %376 ], [ %287, %377 ], [ false, %375 ]
  %380 = zext i1 %379 to i32
  %381 = tail call fastcc ptr @subst(ptr noundef nonnull %286, ptr noundef %1, ptr noundef %2, i32 noundef %380, i32 noundef %4)
  br label %382

382:                                              ; preds = %289, %370, %378, %290
  %383 = phi ptr [ %286, %290 ], [ %372, %370 ], [ %381, %378 ], [ %286, %289 ]
  %384 = load i32, ptr %383, align 8
  %385 = and i32 %384, 65535
  %386 = icmp eq i32 %385, 25
  br i1 %386, label %387, label %392

387:                                              ; preds = %382
  %388 = getelementptr inbounds %struct.rtx_def, ptr %383, i64 0, i32 1
  %389 = load ptr, ptr %388, align 8, !tbaa !16
  %390 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %391 = icmp eq ptr %389, %390
  br i1 %391, label %473, label %426

392:                                              ; preds = %382
  %393 = load i32, ptr %180, align 8
  %394 = and i32 %393, 65535
  %395 = icmp eq i32 %394, 39
  br i1 %395, label %396, label %412

396:                                              ; preds = %392
  %397 = trunc i32 %384 to i16
  switch i16 %397, label %426 [
    i16 30, label %398
    i16 32, label %398
  ]

398:                                              ; preds = %396, %396
  %399 = lshr i32 %393, 16
  %400 = and i32 %399, 255
  %401 = load ptr, ptr %284, align 8, !tbaa !16
  %402 = load i32, ptr %401, align 8
  %403 = lshr i32 %402, 16
  %404 = and i32 %403, 255
  %405 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1, i32 0, i32 0, i64 1
  %406 = load i32, ptr %405, align 8, !tbaa !16
  %407 = tail call ptr @simplify_subreg(i32 noundef %400, ptr noundef nonnull %383, i32 noundef %404, i32 noundef %406) #25
  %408 = icmp eq ptr %407, null
  br i1 %408, label %409, label %427

409:                                              ; preds = %398
  %410 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %411 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %400, ptr noundef %410) #25
  br label %427

412:                                              ; preds = %392
  %413 = icmp eq i32 %385, 30
  %414 = icmp eq i32 %394, 99
  %415 = and i1 %413, %414
  br i1 %415, label %416, label %426

416:                                              ; preds = %412
  %417 = lshr i32 %393, 16
  %418 = and i32 %417, 255
  %419 = load ptr, ptr %284, align 8, !tbaa !16
  %420 = load i32, ptr %419, align 8
  %421 = lshr i32 %420, 16
  %422 = and i32 %421, 255
  %423 = tail call ptr @simplify_unary_operation(i32 noundef 99, i32 noundef %418, ptr noundef nonnull %383, i32 noundef %422) #25
  %424 = icmp eq ptr %423, null
  br i1 %424, label %425, label %427

425:                                              ; preds = %416
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 4807, ptr noundef nonnull @.str.5) #25
  br label %427

426:                                              ; preds = %396, %387, %412
  tail call fastcc void @do_SUBST(ptr noundef nonnull %285, ptr noundef nonnull %383)
  br label %427

427:                                              ; preds = %277, %228, %183, %398, %409, %178, %425, %416, %426
  %428 = phi ptr [ %423, %416 ], [ null, %425 ], [ %180, %426 ], [ %180, %178 ], [ %407, %398 ], [ %411, %409 ], [ %180, %183 ], [ %180, %228 ], [ %180, %277 ]
  %429 = add nuw nsw i64 %179, 1
  %430 = icmp eq i64 %429, %177
  br i1 %430, label %431, label %178, !llvm.loop !166

431:                                              ; preds = %427, %136, %166, %102
  %432 = phi i32 [ 0, %102 ], [ %167, %166 ], [ 0, %136 ], [ %167, %427 ]
  %433 = phi ptr [ %0, %102 ], [ %0, %166 ], [ %0, %136 ], [ %428, %427 ]
  %434 = load i32, ptr %433, align 8
  %435 = and i32 %434, 65535
  %436 = icmp eq i32 %435, 101
  br i1 %436, label %437, label %446

437:                                              ; preds = %431
  %438 = getelementptr inbounds %struct.rtx_def, ptr %433, i64 0, i32 1
  %439 = load ptr, ptr %438, align 8, !tbaa !16
  %440 = load i32, ptr %439, align 8
  %441 = and i32 %440, 67174399
  %442 = icmp eq i32 %441, 67108907
  br i1 %442, label %443, label %446

443:                                              ; preds = %437
  %444 = tail call ptr @avoid_constant_pool_reference(ptr noundef nonnull %433) #25
  %445 = icmp eq ptr %433, %444
  br i1 %445, label %446, label %473

446:                                              ; preds = %443, %437, %431
  %447 = trunc i32 %6 to i16
  switch i16 %447, label %466 [
    i16 37, label %468
    i16 30, label %468
    i16 25, label %468
  ]

448:                                              ; preds = %468
  %449 = trunc i32 %470 to i16
  switch i16 %449, label %450 [
    i16 37, label %473
    i16 30, label %473
    i16 25, label %473
  ]

450:                                              ; preds = %448
  %451 = tail call fastcc ptr @combine_simplify_rtx(ptr noundef nonnull %469, i32 noundef 0, i32 noundef %3)
  %452 = load i32, ptr %451, align 8
  %453 = and i32 %452, 65535
  %454 = icmp eq i32 %453, %471
  br i1 %454, label %473, label %455

455:                                              ; preds = %450
  %456 = trunc i32 %452 to i16
  switch i16 %456, label %457 [
    i16 37, label %473
    i16 30, label %473
    i16 25, label %473
  ]

457:                                              ; preds = %455
  %458 = tail call fastcc ptr @combine_simplify_rtx(ptr noundef nonnull %451, i32 noundef 0, i32 noundef %3)
  %459 = load i32, ptr %458, align 8
  %460 = and i32 %459, 65535
  %461 = icmp eq i32 %460, %453
  br i1 %461, label %473, label %462

462:                                              ; preds = %457
  %463 = trunc i32 %459 to i16
  switch i16 %463, label %464 [
    i16 37, label %473
    i16 30, label %473
    i16 25, label %473
  ]

464:                                              ; preds = %462
  %465 = tail call fastcc ptr @combine_simplify_rtx(ptr noundef nonnull %458, i32 noundef 0, i32 noundef %3)
  br label %473

466:                                              ; preds = %446
  %467 = tail call fastcc ptr @combine_simplify_rtx(ptr noundef nonnull %433, i32 noundef %432, i32 noundef %3)
  br label %468

468:                                              ; preds = %446, %446, %446, %466
  %469 = phi ptr [ %467, %466 ], [ %433, %446 ], [ %433, %446 ], [ %433, %446 ]
  %470 = load i32, ptr %469, align 8
  %471 = and i32 %470, 65535
  %472 = icmp eq i32 %471, %7
  br i1 %472, label %473, label %448

473:                                              ; preds = %387, %272, %220, %126, %464, %462, %462, %462, %455, %455, %455, %448, %448, %448, %468, %450, %457, %97, %56, %72, %48, %33, %27, %443, %360, %338, %41
  %474 = phi ptr [ %45, %41 ], [ %433, %443 ], [ %362, %360 ], [ %340, %338 ], [ %34, %33 ], [ %2, %27 ], [ %0, %48 ], [ %2, %72 ], [ %0, %56 ], [ %93, %97 ], [ %469, %468 ], [ %451, %450 ], [ %458, %457 ], [ %465, %464 ], [ %469, %448 ], [ %469, %448 ], [ %469, %448 ], [ %451, %455 ], [ %451, %455 ], [ %451, %455 ], [ %458, %462 ], [ %458, %462 ], [ %458, %462 ], [ %122, %126 ], [ %216, %220 ], [ %268, %272 ], [ %383, %387 ]
  ret ptr %474
}

declare ptr @gen_rtx_fmt_E_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @rtvec_alloc(i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal fastcc void @mark_used_regs_combine(ptr nocapture noundef readonly %0) unnamed_addr #19 {
  br label %2

2:                                                ; preds = %14, %1
  %3 = phi ptr [ %0, %1 ], [ %16, %14 ]
  %4 = load i32, ptr %3, align 8
  %5 = trunc i32 %4 to i16
  switch i16 %5, label %151 [
    i16 44, label %189
    i16 45, label %189
    i16 30, label %189
    i16 35, label %189
    i16 32, label %189
    i16 33, label %189
    i16 36, label %189
    i16 20, label %189
    i16 21, label %189
    i16 16, label %189
    i16 25, label %6
    i16 37, label %17
    i16 23, label %139
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 43
  br i1 %11, label %12, label %189

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  br label %14

14:                                               ; preds = %12, %149
  %15 = phi ptr [ %13, %12 ], [ %150, %149 ]
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  br label %2

17:                                               ; preds = %2
  %18 = getelementptr i8, ptr %3, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !16
  %20 = icmp ugt i32 %19, 52
  %21 = and i32 %19, -2
  %22 = icmp eq i32 %21, 6
  %23 = or i1 %20, %22
  br i1 %23, label %189, label %24

24:                                               ; preds = %17
  switch i32 %19, label %80 [
    i32 16, label %25
    i32 20, label %189
  ]

25:                                               ; preds = %24
  %26 = load i8, ptr getelementptr inbounds ([53 x i8], ptr @fixed_regs, i64 0, i64 16), align 16, !tbaa !16
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %189

28:                                               ; preds = %25
  %29 = lshr i32 %4, 16
  %30 = and i32 %29, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 16, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !16
  %34 = load i64, ptr @newpat_used_regs, align 8, !tbaa !83
  %35 = tail call i8 @llvm.umax.i8(i8 %33, i8 1)
  %36 = zext i8 %35 to i64
  %37 = add nuw nsw i64 %36, 15
  %38 = icmp ult i8 %35, 8
  br i1 %38, label %70, label %39

39:                                               ; preds = %28
  %40 = and i64 %36, 248
  %41 = add nuw nsw i64 %40, 16
  %42 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %34, i64 0
  br label %43

43:                                               ; preds = %43, %39
  %44 = phi i64 [ 0, %39 ], [ %61, %43 ]
  %45 = phi <2 x i64> [ <i64 16, i64 17>, %39 ], [ %62, %43 ]
  %46 = phi <2 x i64> [ %42, %39 ], [ %57, %43 ]
  %47 = phi <2 x i64> [ zeroinitializer, %39 ], [ %58, %43 ]
  %48 = phi <2 x i64> [ zeroinitializer, %39 ], [ %59, %43 ]
  %49 = phi <2 x i64> [ zeroinitializer, %39 ], [ %60, %43 ]
  %50 = add <2 x i64> %45, <i64 2, i64 2>
  %51 = add <2 x i64> %45, <i64 4, i64 4>
  %52 = add <2 x i64> %45, <i64 6, i64 6>
  %53 = shl nuw <2 x i64> <i64 1, i64 1>, %45
  %54 = shl nuw <2 x i64> <i64 1, i64 1>, %50
  %55 = shl nuw <2 x i64> <i64 1, i64 1>, %51
  %56 = shl nuw <2 x i64> <i64 1, i64 1>, %52
  %57 = or <2 x i64> %53, %46
  %58 = or <2 x i64> %54, %47
  %59 = or <2 x i64> %55, %48
  %60 = or <2 x i64> %56, %49
  %61 = add nuw i64 %44, 8
  %62 = add <2 x i64> %45, <i64 8, i64 8>
  %63 = icmp eq i64 %61, %40
  br i1 %63, label %64, label %43, !llvm.loop !167

64:                                               ; preds = %43
  %65 = or <2 x i64> %58, %57
  %66 = or <2 x i64> %59, %65
  %67 = or <2 x i64> %60, %66
  %68 = tail call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %67)
  %69 = icmp eq i64 %40, %36
  br i1 %69, label %187, label %70

70:                                               ; preds = %28, %64
  %71 = phi i64 [ 16, %28 ], [ %41, %64 ]
  %72 = phi i64 [ %34, %28 ], [ %68, %64 ]
  br label %73

73:                                               ; preds = %70, %73
  %74 = phi i64 [ %78, %73 ], [ %71, %70 ]
  %75 = phi i64 [ %77, %73 ], [ %72, %70 ]
  %76 = shl nuw i64 1, %74
  %77 = or i64 %76, %75
  %78 = add nuw nsw i64 %74, 1
  %79 = icmp eq i64 %74, %37
  br i1 %79, label %187, label %73, !llvm.loop !170

80:                                               ; preds = %24
  %81 = lshr i32 %4, 16
  %82 = and i32 %81, 255
  %83 = zext i32 %19 to i64
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %83, i64 %84
  %86 = load i8, ptr %85, align 1, !tbaa !16
  %87 = zext i8 %86 to i32
  %88 = add nuw nsw i32 %19, %87
  %89 = load i64, ptr @newpat_used_regs, align 8, !tbaa !83
  %90 = zext i32 %88 to i64
  %91 = add nuw nsw i64 %83, 1
  %92 = tail call i64 @llvm.umax.i64(i64 %90, i64 %91)
  %93 = sub nsw i64 %92, %83
  %94 = icmp ult i64 %93, 8
  br i1 %94, label %129, label %95

95:                                               ; preds = %80
  %96 = and i64 %93, -8
  %97 = add nsw i64 %96, %83
  %98 = insertelement <2 x i64> poison, i64 %83, i64 0
  %99 = shufflevector <2 x i64> %98, <2 x i64> poison, <2 x i32> zeroinitializer
  %100 = add nuw nsw <2 x i64> %99, <i64 0, i64 1>
  %101 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %89, i64 0
  br label %102

102:                                              ; preds = %102, %95
  %103 = phi i64 [ 0, %95 ], [ %120, %102 ]
  %104 = phi <2 x i64> [ %100, %95 ], [ %121, %102 ]
  %105 = phi <2 x i64> [ %101, %95 ], [ %116, %102 ]
  %106 = phi <2 x i64> [ zeroinitializer, %95 ], [ %117, %102 ]
  %107 = phi <2 x i64> [ zeroinitializer, %95 ], [ %118, %102 ]
  %108 = phi <2 x i64> [ zeroinitializer, %95 ], [ %119, %102 ]
  %109 = add <2 x i64> %104, <i64 2, i64 2>
  %110 = add <2 x i64> %104, <i64 4, i64 4>
  %111 = add <2 x i64> %104, <i64 6, i64 6>
  %112 = shl nuw <2 x i64> <i64 1, i64 1>, %104
  %113 = shl nuw <2 x i64> <i64 1, i64 1>, %109
  %114 = shl nuw <2 x i64> <i64 1, i64 1>, %110
  %115 = shl nuw <2 x i64> <i64 1, i64 1>, %111
  %116 = or <2 x i64> %112, %105
  %117 = or <2 x i64> %113, %106
  %118 = or <2 x i64> %114, %107
  %119 = or <2 x i64> %115, %108
  %120 = add nuw i64 %103, 8
  %121 = add <2 x i64> %104, <i64 8, i64 8>
  %122 = icmp eq i64 %120, %96
  br i1 %122, label %123, label %102, !llvm.loop !171

123:                                              ; preds = %102
  %124 = or <2 x i64> %117, %116
  %125 = or <2 x i64> %118, %124
  %126 = or <2 x i64> %119, %125
  %127 = tail call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %126)
  %128 = icmp eq i64 %93, %96
  br i1 %128, label %187, label %129

129:                                              ; preds = %80, %123
  %130 = phi i64 [ %83, %80 ], [ %97, %123 ]
  %131 = phi i64 [ %89, %80 ], [ %127, %123 ]
  br label %132

132:                                              ; preds = %129, %132
  %133 = phi i64 [ %137, %132 ], [ %130, %129 ]
  %134 = phi i64 [ %136, %132 ], [ %131, %129 ]
  %135 = shl nuw i64 1, %133
  %136 = or i64 %135, %134
  %137 = add nuw nsw i64 %133, 1
  %138 = icmp ult i64 %137, %90
  br i1 %138, label %132, label %187, !llvm.loop !172

139:                                              ; preds = %2, %145
  %140 = phi ptr [ %142, %145 ], [ %3, %2 ]
  %141 = getelementptr inbounds %struct.rtx_def, ptr %140, i64 0, i32 1
  %142 = load ptr, ptr %141, align 8, !tbaa !16
  %143 = load i32, ptr %142, align 8
  %144 = trunc i32 %143 to i16
  switch i16 %144, label %149 [
    i16 39, label %145
    i16 120, label %145
    i16 40, label %145
    i16 43, label %146
  ]

145:                                              ; preds = %139, %139, %139
  br label %139, !llvm.loop !173

146:                                              ; preds = %139
  %147 = getelementptr inbounds %struct.rtx_def, ptr %142, i64 0, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !16
  tail call fastcc void @mark_used_regs_combine(ptr noundef %148)
  br label %149

149:                                              ; preds = %139, %146
  %150 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %14

151:                                              ; preds = %2
  %152 = and i32 %4, 65535
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %153
  %155 = load ptr, ptr %154, align 8, !tbaa !5
  %156 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %153
  %157 = load i8, ptr %156, align 1, !tbaa !16
  %158 = icmp eq i8 %157, 0
  br i1 %158, label %189, label %159

159:                                              ; preds = %151
  %160 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %161 = zext i8 %157 to i64
  br label %162

162:                                              ; preds = %159, %185
  %163 = phi i64 [ %161, %159 ], [ %164, %185 ]
  %164 = add nsw i64 %163, -1
  %165 = getelementptr inbounds i8, ptr %155, i64 %164
  %166 = load i8, ptr %165, align 1, !tbaa !16
  switch i8 %166, label %185 [
    i8 101, label %172
    i8 69, label %167
  ]

167:                                              ; preds = %162
  %168 = getelementptr inbounds [1 x %union.rtunion_def], ptr %160, i64 0, i64 %164
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = load i32, ptr %169, align 8, !tbaa !99
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %175, label %185

172:                                              ; preds = %162
  %173 = getelementptr inbounds [1 x %union.rtunion_def], ptr %160, i64 0, i64 %164
  %174 = load ptr, ptr %173, align 8, !tbaa !16
  tail call fastcc void @mark_used_regs_combine(ptr noundef %174)
  br label %185

175:                                              ; preds = %167, %175
  %176 = phi i64 [ %180, %175 ], [ 0, %167 ]
  %177 = phi ptr [ %181, %175 ], [ %169, %167 ]
  %178 = getelementptr inbounds %struct.rtvec_def, ptr %177, i64 0, i32 1, i64 %176
  %179 = load ptr, ptr %178, align 8, !tbaa !5
  tail call fastcc void @mark_used_regs_combine(ptr noundef %179)
  %180 = add nuw nsw i64 %176, 1
  %181 = load ptr, ptr %168, align 8, !tbaa !16
  %182 = load i32, ptr %181, align 8, !tbaa !99
  %183 = sext i32 %182 to i64
  %184 = icmp slt i64 %180, %183
  br i1 %184, label %175, label %185, !llvm.loop !174

185:                                              ; preds = %175, %167, %162, %172
  %186 = icmp sgt i64 %163, 1
  br i1 %186, label %162, label %189, !llvm.loop !175

187:                                              ; preds = %73, %132, %64, %123
  %188 = phi i64 [ %127, %123 ], [ %68, %64 ], [ %136, %132 ], [ %77, %73 ]
  store i64 %188, ptr @newpat_used_regs, align 8, !tbaa !83
  br label %189

189:                                              ; preds = %6, %2, %2, %2, %2, %2, %2, %2, %2, %2, %2, %185, %187, %151, %17, %25, %24
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @recog_for_combine(ptr nocapture noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2) unnamed_addr #9 {
  %4 = alloca i32, align 4
  %5 = load ptr, ptr %0, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #25
  store i32 0, ptr %4, align 4, !tbaa !20
  %6 = load i32, ptr %5, align 8
  %7 = and i32 %6, 65535
  %8 = icmp eq i32 %7, 15
  br i1 %8, label %9, label %32

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8, !tbaa !99
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %32

14:                                               ; preds = %9
  %15 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %16 = zext i32 %12 to i64
  br label %17

17:                                               ; preds = %14, %30
  %18 = phi i64 [ %16, %14 ], [ %19, %30 ]
  %19 = add nsw i64 %18, -1
  %20 = and i64 %19, 4294967295
  %21 = getelementptr inbounds %struct.rtvec_def, ptr %11, i64 0, i32 1, i64 %20
  %22 = load ptr, ptr %21, align 8, !tbaa !5
  %23 = load i32, ptr %22, align 8
  %24 = and i32 %23, 65535
  %25 = icmp eq i32 %24, 25
  br i1 %25, label %26, label %30

26:                                               ; preds = %17
  %27 = getelementptr inbounds %struct.rtx_def, ptr %22, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = icmp eq ptr %28, %15
  br i1 %29, label %319, label %30

30:                                               ; preds = %17, %26
  %31 = icmp ugt i64 %18, 1
  br i1 %31, label %17, label %32, !llvm.loop !176

32:                                               ; preds = %30, %9, %3
  %33 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1, i32 1, i32 0, i32 0, i64 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  store ptr %5, ptr %33, align 8, !tbaa !16
  store ptr null, ptr %35, align 8, !tbaa !16
  %37 = call i32 @recog(ptr noundef nonnull %5, ptr noundef %1, ptr noundef nonnull %4) #25
  %38 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %39 = icmp eq ptr %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %32
  %41 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %42 = and i32 %41, 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %53, label %44

44:                                               ; preds = %40
  %45 = icmp slt i32 %37, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = call i64 @fwrite(ptr nonnull @.str.14, i64 34, i64 1, ptr nonnull %38)
  br label %50

48:                                               ; preds = %44
  %49 = call i64 @fwrite(ptr nonnull @.str.15, i64 39, i64 1, ptr nonnull %38)
  br label %50

50:                                               ; preds = %48, %46
  %51 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %52 = call i32 @print_rtl_single(ptr noundef %51, ptr noundef nonnull %5) #25
  br label %53

53:                                               ; preds = %50, %40, %32
  %54 = icmp slt i32 %37, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %53
  store ptr %34, ptr %33, align 8, !tbaa !16
  store ptr %36, ptr %35, align 8, !tbaa !16
  br label %155

56:                                               ; preds = %53
  %57 = call i32 @check_asm_operands(ptr noundef nonnull %5) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %143

59:                                               ; preds = %56
  %60 = load i32, ptr %5, align 8
  %61 = and i32 %60, 65535
  %62 = icmp eq i32 %61, 15
  br i1 %62, label %63, label %143

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !16
  %66 = load i32, ptr %65, align 8, !tbaa !20
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %101

68:                                               ; preds = %63, %92
  %69 = phi i32 [ %93, %92 ], [ %66, %63 ]
  %70 = phi ptr [ %94, %92 ], [ %65, %63 ]
  %71 = phi i32 [ %95, %92 ], [ %66, %63 ]
  %72 = phi ptr [ %96, %92 ], [ %65, %63 ]
  %73 = phi i64 [ %98, %92 ], [ 0, %63 ]
  %74 = phi i32 [ %97, %92 ], [ 0, %63 ]
  %75 = getelementptr inbounds %struct.rtvec_def, ptr %72, i64 0, i32 1, i64 %73
  %76 = load ptr, ptr %75, align 8, !tbaa !5
  %77 = load i32, ptr %76, align 8
  %78 = and i32 %77, 65535
  %79 = icmp eq i32 %78, 25
  br i1 %79, label %92, label %80

80:                                               ; preds = %68
  %81 = zext i32 %74 to i64
  %82 = icmp eq i64 %73, %81
  br i1 %82, label %88, label %83

83:                                               ; preds = %80
  %84 = sext i32 %74 to i64
  %85 = getelementptr inbounds %struct.rtvec_def, ptr %72, i64 0, i32 1, i64 %84
  call fastcc void @do_SUBST(ptr noundef nonnull %85, ptr noundef nonnull %76)
  %86 = load ptr, ptr %64, align 8, !tbaa !16
  %87 = load i32, ptr %86, align 8, !tbaa !20
  br label %88

88:                                               ; preds = %83, %80
  %89 = phi i32 [ %87, %83 ], [ %69, %80 ]
  %90 = phi ptr [ %86, %83 ], [ %70, %80 ]
  %91 = add nsw i32 %74, 1
  br label %92

92:                                               ; preds = %68, %88
  %93 = phi i32 [ %89, %88 ], [ %69, %68 ]
  %94 = phi ptr [ %90, %88 ], [ %70, %68 ]
  %95 = phi i32 [ %89, %88 ], [ %71, %68 ]
  %96 = phi ptr [ %90, %88 ], [ %72, %68 ]
  %97 = phi i32 [ %91, %88 ], [ %74, %68 ]
  %98 = add nuw nsw i64 %73, 1
  %99 = sext i32 %95 to i64
  %100 = icmp slt i64 %98, %99
  br i1 %100, label %68, label %101, !llvm.loop !177

101:                                              ; preds = %92, %63
  %102 = phi i32 [ 0, %63 ], [ %97, %92 ]
  %103 = phi ptr [ %65, %63 ], [ %96, %92 ]
  %104 = phi i32 [ %66, %63 ], [ %95, %92 ]
  %105 = icmp eq i32 %104, %102
  br i1 %105, label %119, label %106

106:                                              ; preds = %101
  %107 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %108 = icmp eq ptr %107, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %106
  %110 = load ptr, ptr %107, align 8, !tbaa !72
  store ptr %110, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %113

111:                                              ; preds = %106
  %112 = call ptr @xmalloc(i64 noundef 32) #25
  br label %113

113:                                              ; preds = %111, %109
  %114 = phi ptr [ %107, %109 ], [ %112, %111 ]
  %115 = getelementptr inbounds %struct.undo, ptr %114, i64 0, i32 1
  store i32 1, ptr %115, align 8, !tbaa !125
  %116 = getelementptr inbounds %struct.undo, ptr %114, i64 0, i32 3
  store ptr %103, ptr %116, align 8, !tbaa !16
  %117 = getelementptr inbounds %struct.undo, ptr %114, i64 0, i32 2
  store i32 %104, ptr %117, align 8, !tbaa !16
  store i32 %102, ptr %103, align 4, !tbaa !20
  %118 = load ptr, ptr @undobuf, align 8, !tbaa !117
  store ptr %118, ptr %114, align 8, !tbaa !72
  store ptr %114, ptr @undobuf, align 8, !tbaa !117
  br label %119

119:                                              ; preds = %101, %113
  %120 = icmp eq i32 %102, 1
  br i1 %120, label %121, label %125

121:                                              ; preds = %119
  %122 = load ptr, ptr %64, align 8, !tbaa !16
  %123 = getelementptr inbounds %struct.rtvec_def, ptr %122, i64 0, i32 1
  %124 = load ptr, ptr %123, align 8, !tbaa !5
  br label %125

125:                                              ; preds = %121, %119
  %126 = phi ptr [ %124, %121 ], [ %5, %119 ]
  store ptr %126, ptr %33, align 8, !tbaa !16
  %127 = call i32 @recog(ptr noundef %126, ptr noundef %1, ptr noundef nonnull %4) #25
  %128 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %129 = icmp eq ptr %128, null
  br i1 %129, label %144, label %130

130:                                              ; preds = %125
  %131 = load i32, ptr @dump_flags, align 4, !tbaa !20
  %132 = and i32 %131, 8
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %130
  %135 = icmp slt i32 %127, 0
  br i1 %135, label %136, label %138

136:                                              ; preds = %134
  %137 = call i64 @fwrite(ptr nonnull @.str.14, i64 34, i64 1, ptr nonnull %128)
  br label %140

138:                                              ; preds = %134
  %139 = call i64 @fwrite(ptr nonnull @.str.15, i64 39, i64 1, ptr nonnull %128)
  br label %140

140:                                              ; preds = %138, %136
  %141 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %142 = call i32 @print_rtl_single(ptr noundef %141, ptr noundef %126) #25
  br label %144

143:                                              ; preds = %56, %59
  store ptr %34, ptr %33, align 8, !tbaa !16
  store ptr %36, ptr %35, align 8, !tbaa !16
  br label %146

144:                                              ; preds = %125, %130, %140
  store ptr %34, ptr %33, align 8, !tbaa !16
  store ptr %36, ptr %35, align 8, !tbaa !16
  %145 = icmp slt i32 %127, 0
  br i1 %145, label %146, label %155

146:                                              ; preds = %143, %144
  %147 = phi ptr [ %5, %143 ], [ %126, %144 ]
  %148 = phi i32 [ %37, %143 ], [ %127, %144 ]
  %149 = load i32, ptr %147, align 8
  %150 = and i32 %149, 65535
  %151 = icmp eq i32 %150, 23
  br i1 %151, label %152, label %155

152:                                              ; preds = %146
  %153 = call i32 @set_noop_p(ptr noundef nonnull %147) #25
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %315

155:                                              ; preds = %55, %152, %146, %144
  %156 = phi ptr [ %5, %55 ], [ %126, %144 ], [ %147, %146 ], [ %147, %152 ]
  %157 = phi i32 [ %37, %55 ], [ %127, %144 ], [ %148, %146 ], [ %148, %152 ]
  %158 = load i32, ptr %4, align 4, !tbaa !20
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %315, label %160

160:                                              ; preds = %155
  %161 = load i32, ptr %156, align 8
  %162 = and i32 %161, 65535
  %163 = icmp eq i32 %162, 15
  br i1 %163, label %164, label %169

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.rtx_def, ptr %156, i64 0, i32 1
  %166 = load ptr, ptr %165, align 8, !tbaa !16
  %167 = load i32, ptr %166, align 8, !tbaa !99
  %168 = add nsw i32 %167, %158
  br label %171

169:                                              ; preds = %160
  %170 = add nsw i32 %158, 1
  br label %171

171:                                              ; preds = %169, %164
  %172 = phi i32 [ %168, %164 ], [ %170, %169 ]
  %173 = call ptr @rtvec_alloc(i32 noundef %172) #25
  %174 = call ptr @gen_rtx_fmt_E_stat(i32 noundef 15, i32 noundef 0, ptr noundef %173) #25
  %175 = load i32, ptr %156, align 8
  %176 = and i32 %175, 65535
  %177 = icmp eq i32 %176, 15
  br i1 %177, label %178, label %197

178:                                              ; preds = %171
  %179 = getelementptr inbounds %struct.rtx_def, ptr %156, i64 0, i32 1
  %180 = load ptr, ptr %179, align 8, !tbaa !16
  %181 = load i32, ptr %180, align 8, !tbaa !99
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %201

183:                                              ; preds = %178
  %184 = getelementptr inbounds %struct.rtx_def, ptr %174, i64 0, i32 1
  br label %185

185:                                              ; preds = %183, %185
  %186 = phi i64 [ 0, %183 ], [ %192, %185 ]
  %187 = phi ptr [ %180, %183 ], [ %193, %185 ]
  %188 = getelementptr inbounds %struct.rtvec_def, ptr %187, i64 0, i32 1, i64 %186
  %189 = load ptr, ptr %188, align 8, !tbaa !5
  %190 = load ptr, ptr %184, align 8, !tbaa !16
  %191 = getelementptr inbounds %struct.rtvec_def, ptr %190, i64 0, i32 1, i64 %186
  store ptr %189, ptr %191, align 8, !tbaa !5
  %192 = add nuw nsw i64 %186, 1
  %193 = load ptr, ptr %179, align 8, !tbaa !16
  %194 = load i32, ptr %193, align 8, !tbaa !99
  %195 = sext i32 %194 to i64
  %196 = icmp slt i64 %192, %195
  br i1 %196, label %185, label %201, !llvm.loop !178

197:                                              ; preds = %171
  %198 = getelementptr inbounds %struct.rtx_def, ptr %174, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !16
  %200 = getelementptr inbounds %struct.rtvec_def, ptr %199, i64 0, i32 1
  store ptr %156, ptr %200, align 8, !tbaa !5
  br label %201

201:                                              ; preds = %185, %178, %197
  call void @add_clobbers(ptr noundef %174, i32 noundef %157) #25
  %202 = getelementptr inbounds %struct.rtx_def, ptr %174, i64 0, i32 1
  %203 = load i32, ptr %4, align 4, !tbaa !20
  %204 = icmp sgt i32 %203, 0
  br i1 %204, label %205, label %315

205:                                              ; preds = %201
  %206 = load ptr, ptr %202, align 8, !tbaa !16
  %207 = load i32, ptr %206, align 8, !tbaa !99
  %208 = sub i32 %207, %203
  %209 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 1
  %210 = sext i32 %208 to i64
  br label %211

211:                                              ; preds = %205, %308
  %212 = phi i64 [ %210, %205 ], [ %311, %308 ]
  %213 = phi ptr [ %206, %205 ], [ %309, %308 ]
  %214 = phi ptr [ null, %205 ], [ %310, %308 ]
  %215 = getelementptr inbounds %struct.rtvec_def, ptr %213, i64 0, i32 1, i64 %212
  %216 = load ptr, ptr %215, align 8, !tbaa !5
  %217 = getelementptr inbounds %struct.rtx_def, ptr %216, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !16
  %219 = load i32, ptr %218, align 8
  %220 = and i32 %219, 65535
  %221 = icmp eq i32 %220, 37
  br i1 %221, label %222, label %290

222:                                              ; preds = %211
  %223 = getelementptr i8, ptr %218, i64 8
  %224 = load i32, ptr %223, align 8, !tbaa !16
  store i32 %224, ptr @reg_dead_regno, align 4, !tbaa !20
  %225 = icmp ult i32 %224, 53
  br i1 %225, label %228, label %226

226:                                              ; preds = %222
  %227 = add i32 %224, 1
  store i32 %227, ptr @reg_dead_endregno, align 4, !tbaa !20
  store i32 0, ptr @reg_dead_flag, align 4, !tbaa !20
  br label %253

228:                                              ; preds = %222
  %229 = lshr i32 %219, 16
  %230 = and i32 %229, 255
  %231 = zext i32 %224 to i64
  %232 = zext i32 %230 to i64
  %233 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %231, i64 %232
  %234 = load i8, ptr %233, align 1, !tbaa !16
  %235 = zext i8 %234 to i32
  %236 = add nuw nsw i32 %224, %235
  store i32 %236, ptr @reg_dead_endregno, align 4, !tbaa !20
  store i32 0, ptr @reg_dead_flag, align 4, !tbaa !20
  %237 = icmp eq i8 %234, 0
  br i1 %237, label %253, label %238

238:                                              ; preds = %228
  %239 = load i64, ptr @newpat_used_regs, align 8
  %240 = zext i32 %236 to i64
  br label %241

241:                                              ; preds = %250, %238
  %242 = phi i64 [ %231, %238 ], [ %251, %250 ]
  %243 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %242
  %244 = load i8, ptr %243, align 1, !tbaa !16
  %245 = icmp eq i8 %244, 0
  br i1 %245, label %246, label %250

246:                                              ; preds = %241
  %247 = shl nuw i64 1, %242
  %248 = and i64 %247, %239
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %250, label %319

250:                                              ; preds = %246, %241
  %251 = add nuw nsw i64 %242, 1
  %252 = icmp ult i64 %251, %240
  br i1 %252, label %241, label %253, !llvm.loop !179

253:                                              ; preds = %250, %228, %226
  %254 = load ptr, ptr %209, align 8, !tbaa !16
  %255 = getelementptr inbounds %struct.basic_block_def, ptr %254, i64 0, i32 7
  br label %256

256:                                              ; preds = %274, %253
  %257 = phi ptr [ %1, %253 ], [ %276, %274 ]
  %258 = load i32, ptr %257, align 8
  %259 = and i32 %258, 65535
  %260 = add nsw i32 %259, -7
  %261 = icmp ult i32 %260, 4
  br i1 %261, label %262, label %270

262:                                              ; preds = %256
  %263 = getelementptr inbounds %struct.rtx_def, ptr %257, i64 1
  %264 = load ptr, ptr %263, align 8, !tbaa !16
  call void @note_stores(ptr noundef %264, ptr noundef nonnull @reg_dead_at_p_1, ptr noundef null) #25
  %265 = load i32, ptr @reg_dead_flag, align 4, !tbaa !20
  switch i32 %265, label %319 [
    i32 0, label %266
    i32 1, label %290
  ]

266:                                              ; preds = %262
  %267 = load i32, ptr @reg_dead_regno, align 4, !tbaa !20
  %268 = call ptr @find_regno_note(ptr noundef nonnull %257, i32 noundef 1, i32 noundef %267) #25
  %269 = icmp eq ptr %268, null
  br i1 %269, label %270, label %290

270:                                              ; preds = %266, %256
  %271 = load ptr, ptr %255, align 8, !tbaa !16
  %272 = load ptr, ptr %271, align 8, !tbaa !35
  %273 = icmp eq ptr %257, %272
  br i1 %273, label %277, label %274

274:                                              ; preds = %270
  %275 = getelementptr inbounds %struct.rtx_def, ptr %257, i64 0, i32 1, i32 0, i32 0, i64 1
  %276 = load ptr, ptr %275, align 8, !tbaa !16
  br label %256

277:                                              ; preds = %270
  %278 = load i32, ptr @reg_dead_regno, align 4, !tbaa !20
  %279 = load i32, ptr @reg_dead_endregno, align 4, !tbaa !20
  %280 = icmp ult i32 %278, %279
  br i1 %280, label %285, label %290

281:                                              ; preds = %285
  %282 = add nuw i32 %286, 1
  %283 = load i32, ptr @reg_dead_endregno, align 4, !tbaa !20
  %284 = icmp ult i32 %282, %283
  br i1 %284, label %285, label %290, !llvm.loop !180

285:                                              ; preds = %277, %281
  %286 = phi i32 [ %282, %281 ], [ %278, %277 ]
  %287 = call ptr @df_get_live_in(ptr noundef %254) #25
  %288 = call i32 @bitmap_bit_p(ptr noundef %287, i32 noundef %286) #25
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %281, label %319

290:                                              ; preds = %262, %266, %281, %277, %211
  %291 = load ptr, ptr %202, align 8, !tbaa !16
  %292 = getelementptr inbounds %struct.rtvec_def, ptr %291, i64 0, i32 1, i64 %212
  %293 = load ptr, ptr %292, align 8, !tbaa !5
  %294 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1
  %295 = load ptr, ptr %294, align 8, !tbaa !16
  %296 = load i32, ptr %295, align 8
  %297 = trunc i32 %296 to i16
  switch i16 %297, label %298 [
    i16 38, label %308
    i16 37, label %304
  ]

298:                                              ; preds = %290
  call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 10199, ptr noundef nonnull @.str.5) #25
  %299 = load ptr, ptr %202, align 8, !tbaa !16
  %300 = getelementptr inbounds %struct.rtvec_def, ptr %299, i64 0, i32 1, i64 %212
  %301 = load ptr, ptr %300, align 8, !tbaa !5
  %302 = getelementptr inbounds %struct.rtx_def, ptr %301, i64 0, i32 1
  %303 = load ptr, ptr %302, align 8, !tbaa !16
  br label %304

304:                                              ; preds = %290, %298
  %305 = phi ptr [ %295, %290 ], [ %303, %298 ]
  %306 = call ptr @alloc_reg_note(i32 noundef 6, ptr noundef %305, ptr noundef %214) #25
  %307 = load ptr, ptr %202, align 8, !tbaa !16
  br label %308

308:                                              ; preds = %290, %304
  %309 = phi ptr [ %307, %304 ], [ %291, %290 ]
  %310 = phi ptr [ %306, %304 ], [ %214, %290 ]
  %311 = add nsw i64 %212, 1
  %312 = load i32, ptr %309, align 8, !tbaa !99
  %313 = sext i32 %312 to i64
  %314 = icmp slt i64 %311, %313
  br i1 %314, label %211, label %315, !llvm.loop !181

315:                                              ; preds = %308, %152, %201, %155
  %316 = phi i32 [ %157, %155 ], [ %157, %201 ], [ 2147483647, %152 ], [ %157, %308 ]
  %317 = phi ptr [ null, %155 ], [ null, %201 ], [ null, %152 ], [ %310, %308 ]
  %318 = phi ptr [ %156, %155 ], [ %174, %201 ], [ %147, %152 ], [ %174, %308 ]
  store ptr %318, ptr %0, align 8, !tbaa !5
  store ptr %317, ptr %2, align 8, !tbaa !5
  br label %319

319:                                              ; preds = %26, %246, %262, %285, %315
  %320 = phi i32 [ %316, %315 ], [ -1, %285 ], [ -1, %262 ], [ -1, %246 ], [ -1, %26 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #25
  ret i32 %320
}

declare zeroext i8 @insn_nothrow_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @combine_split_insns(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = tail call ptr @split_insns(ptr noundef %0, ptr noundef %1) #25
  %4 = tail call i32 @max_reg_num() #25
  %5 = load ptr, ptr @reg_stat, align 8
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = icmp eq i32 %4, 0
  br i1 %8, label %32, label %18

9:                                                ; preds = %2
  %10 = load i32, ptr %5, align 8, !tbaa !25
  %11 = icmp ugt i32 %4, %10
  br i1 %11, label %12, label %32

12:                                               ; preds = %9
  %13 = sub nsw i32 %4, %10
  %14 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %5, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !27
  %16 = sub i32 %15, %10
  %17 = icmp ult i32 %16, %13
  br i1 %17, label %18, label %23

18:                                               ; preds = %7, %12
  %19 = phi i32 [ %10, %12 ], [ 0, %7 ]
  %20 = phi i32 [ %13, %12 ], [ %4, %7 ]
  %21 = tail call ptr @vec_heap_o_reserve_exact(ptr noundef %5, i32 noundef %20, i64 noundef 8, i64 noundef 64) #25
  store ptr %21, ptr @reg_stat, align 8, !tbaa !5
  %22 = sub nsw i32 %4, %19
  br label %23

23:                                               ; preds = %12, %18
  %24 = phi i32 [ %13, %12 ], [ %22, %18 ]
  %25 = phi i32 [ %10, %12 ], [ %19, %18 ]
  %26 = phi ptr [ %5, %12 ], [ %21, %18 ]
  store i32 %4, ptr %26, align 8, !tbaa !25
  %27 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %26, i64 0, i32 2
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds %struct.reg_stat_struct, ptr %27, i64 %28
  %30 = sext i32 %24 to i64
  %31 = shl nsw i64 %30, 6
  tail call void @llvm.memset.p0.i64(ptr nonnull align 8 %29, i8 0, i64 %31, i1 false)
  br label %32

32:                                               ; preds = %9, %23, %7
  ret ptr %3
}

declare ptr @gen_rtvec(i32 noundef, ...) local_unnamed_addr #3

declare void @adjust_reg_mode(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @next_real_insn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @use_crosses_set_p(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = trunc i32 %3 to i16
  switch i16 %5, label %64 [
    i16 37, label %6
    i16 43, label %61
  ]

6:                                                ; preds = %2
  %7 = getelementptr i8, ptr %0, i64 8
  %8 = load i32, ptr %7, align 8, !tbaa !16
  %9 = icmp ult i32 %8, 53
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = add i32 %8, 1
  br label %29

12:                                               ; preds = %6
  %13 = lshr i32 %3, 16
  %14 = and i32 %13, 255
  %15 = zext i32 %8 to i64
  %16 = zext i32 %14 to i64
  %17 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !16
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %8, %19
  %21 = icmp eq i32 %8, 7
  br i1 %21, label %22, label %29

22:                                               ; preds = %12
  %23 = load i32, ptr @target_flags, align 4, !tbaa !20
  %24 = and i32 %23, 8196
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = tail call i32 @ix86_cfun_abi() #25
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %102

29:                                               ; preds = %10, %26, %22, %12
  %30 = phi i32 [ %11, %10 ], [ %20, %26 ], [ %20, %22 ], [ %20, %12 ]
  %31 = icmp ult i32 %8, %30
  br i1 %31, label %32, label %102

32:                                               ; preds = %29
  %33 = load ptr, ptr @reg_stat, align 8
  %34 = load i32, ptr @label_tick, align 4
  %35 = load ptr, ptr @df, align 8
  %36 = getelementptr inbounds %struct.df, ptr %35, i64 0, i32 10
  %37 = zext i32 %8 to i64
  br label %38

38:                                               ; preds = %32, %57
  %39 = phi i64 [ %37, %32 ], [ %58, %57 ]
  %40 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %33, i64 0, i32 2, i64 %39, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !93
  %42 = icmp eq ptr %41, null
  br i1 %42, label %57, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %33, i64 0, i32 2, i64 %39, i32 4
  %45 = load i32, ptr %44, align 4, !tbaa !137
  %46 = icmp eq i32 %45, %34
  br i1 %46, label %47, label %57

47:                                               ; preds = %43
  %48 = load ptr, ptr %36, align 8, !tbaa !37
  %49 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %50 = load i32, ptr %49, align 8, !tbaa !16
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds ptr, ptr %48, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !5
  %54 = getelementptr inbounds %struct.df_insn_info, ptr %53, i64 0, i32 5
  %55 = load i32, ptr %54, align 8, !tbaa !54
  %56 = icmp sgt i32 %55, %1
  br i1 %56, label %102, label %57

57:                                               ; preds = %47, %43, %38
  %58 = add nuw nsw i64 %39, 1
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %30, %59
  br i1 %60, label %102, label %38, !llvm.loop !182

61:                                               ; preds = %2
  %62 = load i32, ptr @mem_last_set, align 4, !tbaa !20
  %63 = icmp sgt i32 %62, %1
  br i1 %63, label %102, label %64

64:                                               ; preds = %2, %61
  %65 = zext i32 %4 to i64
  %66 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %65
  %67 = load ptr, ptr %66, align 8, !tbaa !5
  %68 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %65
  %69 = load i8, ptr %68, align 1, !tbaa !16
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %102, label %71

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %73 = zext i8 %69 to i64
  br label %74

74:                                               ; preds = %71, %100
  %75 = phi i64 [ %73, %71 ], [ %76, %100 ]
  %76 = add nsw i64 %75, -1
  %77 = getelementptr inbounds i8, ptr %67, i64 %76
  %78 = load i8, ptr %77, align 1, !tbaa !16
  switch i8 %78, label %100 [
    i8 69, label %79
    i8 101, label %95
  ]

79:                                               ; preds = %74
  %80 = getelementptr inbounds [1 x %union.rtunion_def], ptr %72, i64 0, i64 %76
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = load i32, ptr %81, align 8, !tbaa !99
  %83 = zext i32 %82 to i64
  br label %84

84:                                               ; preds = %88, %79
  %85 = phi i64 [ %89, %88 ], [ %83, %79 ]
  %86 = trunc i64 %85 to i32
  %87 = icmp slt i32 %86, 1
  br i1 %87, label %100, label %88

88:                                               ; preds = %84
  %89 = add nsw i64 %85, -1
  %90 = load ptr, ptr %80, align 8, !tbaa !16
  %91 = getelementptr inbounds %struct.rtvec_def, ptr %90, i64 0, i32 1, i64 %89
  %92 = load ptr, ptr %91, align 8, !tbaa !5
  %93 = tail call fastcc i32 @use_crosses_set_p(ptr noundef %92, i32 noundef %1)
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %84, label %102, !llvm.loop !183

95:                                               ; preds = %74
  %96 = getelementptr inbounds [1 x %union.rtunion_def], ptr %72, i64 0, i64 %76
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = tail call fastcc i32 @use_crosses_set_p(ptr noundef %97, i32 noundef %1)
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %102

100:                                              ; preds = %84, %74, %95
  %101 = icmp sgt i64 %75, 1
  br i1 %101, label %74, label %102, !llvm.loop !184

102:                                              ; preds = %57, %47, %95, %100, %88, %29, %64, %61, %26
  %103 = phi i32 [ 1, %26 ], [ 1, %61 ], [ 0, %64 ], [ 0, %29 ], [ 1, %88 ], [ 1, %95 ], [ 0, %100 ], [ 0, %57 ], [ 1, %47 ]
  ret i32 %103
}

declare i32 @reg_used_between_p(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @find_split_point(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  br label %3

3:                                                ; preds = %10, %2
  %4 = phi ptr [ %11, %10 ], [ %0, %2 ]
  br label %5

5:                                                ; preds = %347, %3
  %6 = load ptr, ptr %4, align 8, !tbaa !5
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = trunc i32 %7 to i16
  switch i16 %9, label %530 [
    i16 39, label %10
    i16 43, label %16
    i16 23, label %199
    i16 61, label %501
    i16 62, label %501
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 43
  br i1 %15, label %552, label %3

16:                                               ; preds = %5
  %17 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %18, align 8
  %20 = and i32 %19, 65535
  %21 = icmp eq i32 %20, 49
  br i1 %21, label %22, label %157

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.rtx_def, ptr %18, i64 0, i32 1, i32 0, i32 0, i64 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = load i32, ptr %24, align 8
  %26 = and i32 %25, 65535
  %27 = icmp eq i32 %26, 30
  br i1 %27, label %28, label %157

28:                                               ; preds = %22
  %29 = lshr i32 %7, 16
  %30 = and i32 %29, 255
  %31 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = icmp eq ptr %32, null
  br i1 %33, label %37, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.mem_attrs, ptr %32, i64 0, i32 5
  %36 = load i8, ptr %35, align 8, !tbaa !185
  br label %37

37:                                               ; preds = %28, %34
  %38 = phi i8 [ %36, %34 ], [ 0, %28 ]
  %39 = tail call i32 @memory_address_addr_space_p(i32 noundef %30, ptr noundef nonnull %18, i8 noundef zeroext %38) #25
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %157

41:                                               ; preds = %37
  %42 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %43 = getelementptr inbounds ptr, ptr %42, i64 53
  %44 = load ptr, ptr %43, align 8, !tbaa !5
  %45 = load ptr, ptr %17, align 8, !tbaa !16
  %46 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %44, ptr noundef %45) #25
  %47 = load ptr, ptr @subst_insn, align 8, !tbaa !5
  %48 = tail call fastcc ptr @combine_split_insns(ptr noundef %46, ptr noundef %47)
  %49 = icmp eq ptr %48, null
  br i1 %49, label %134, label %50

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.rtx_def, ptr %48, i64 0, i32 1, i32 0, i32 0, i64 2
  %52 = load ptr, ptr %51, align 8, !tbaa !16
  %53 = icmp eq ptr %52, null
  br i1 %53, label %134, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.rtx_def, ptr %52, i64 0, i32 1, i32 0, i32 0, i64 2
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %134

58:                                               ; preds = %54
  %59 = load i32, ptr %48, align 8
  %60 = and i32 %59, 65535
  %61 = icmp eq i32 %60, 8
  br i1 %61, label %62, label %134

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.rtx_def, ptr %48, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = load i32, ptr %64, align 8
  %66 = and i32 %65, 65535
  %67 = icmp eq i32 %66, 23
  br i1 %67, label %68, label %134

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.rtx_def, ptr %64, i64 0, i32 1
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = icmp eq ptr %70, %44
  br i1 %71, label %72, label %134

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.rtx_def, ptr %64, i64 0, i32 1, i32 0, i32 0, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = tail call i32 @reg_mentioned_p(ptr noundef %44, ptr noundef %74) #25
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %134

77:                                               ; preds = %72
  %78 = load ptr, ptr %51, align 8, !tbaa !16
  %79 = load i32, ptr %78, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 8
  br i1 %81, label %82, label %134

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 1
  %84 = load ptr, ptr %83, align 8, !tbaa !16
  %85 = load i32, ptr %84, align 8
  %86 = and i32 %85, 65535
  %87 = icmp eq i32 %86, 23
  br i1 %87, label %88, label %134

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.rtx_def, ptr %84, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !16
  %91 = icmp eq ptr %90, %44
  br i1 %91, label %92, label %134

92:                                               ; preds = %88
  %93 = load i32, ptr %6, align 8
  %94 = lshr i32 %93, 16
  %95 = and i32 %94, 255
  %96 = getelementptr inbounds %struct.rtx_def, ptr %84, i64 0, i32 1, i32 0, i32 0, i64 1
  %97 = load ptr, ptr %96, align 8, !tbaa !16
  %98 = load ptr, ptr %31, align 8, !tbaa !16
  %99 = icmp eq ptr %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.mem_attrs, ptr %98, i64 0, i32 5
  %102 = load i8, ptr %101, align 8, !tbaa !185
  br label %103

103:                                              ; preds = %92, %100
  %104 = phi i8 [ %102, %100 ], [ 0, %92 ]
  %105 = tail call i32 @memory_address_addr_space_p(i32 noundef %95, ptr noundef %97, i8 noundef zeroext %104) #25
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %134, label %107

107:                                              ; preds = %103
  %108 = load ptr, ptr %63, align 8, !tbaa !16
  %109 = getelementptr inbounds %struct.rtx_def, ptr %108, i64 0, i32 1, i32 0, i32 0, i64 1
  %110 = load ptr, ptr %109, align 8, !tbaa !16
  %111 = load ptr, ptr %51, align 8, !tbaa !16
  %112 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 1
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1, i32 0, i32 0, i64 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = tail call ptr @replace_rtx(ptr noundef %115, ptr noundef %44, ptr noundef %110) #25
  %117 = getelementptr inbounds %struct.rtx_def, ptr %116, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = icmp eq ptr %118, %110
  br i1 %119, label %132, label %120

120:                                              ; preds = %107
  %121 = load i32, ptr %118, align 8
  %122 = and i32 %121, 65535
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %123
  %125 = load ptr, ptr %124, align 8, !tbaa !5
  %126 = load i8, ptr %125, align 1, !tbaa !16
  %127 = icmp eq i8 %126, 101
  br i1 %127, label %128, label %157

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.rtx_def, ptr %118, i64 0, i32 1
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  %131 = icmp eq ptr %130, %110
  br i1 %131, label %132, label %157

132:                                              ; preds = %128, %107
  %133 = phi ptr [ %117, %107 ], [ %129, %128 ]
  tail call fastcc void @do_SUBST(ptr noundef nonnull %17, ptr noundef nonnull %116)
  br label %552

134:                                              ; preds = %103, %88, %82, %77, %72, %68, %62, %58, %54, %50, %41
  %135 = load ptr, ptr %17, align 8, !tbaa !16
  %136 = getelementptr inbounds %struct.rtx_def, ptr %135, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !16
  %138 = load i32, ptr %137, align 8
  %139 = and i32 %138, 65535
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !16
  %143 = and i32 %142, -2
  %144 = icmp eq i32 %143, 8
  br i1 %144, label %157, label %145

145:                                              ; preds = %134
  %146 = icmp eq i32 %139, 39
  br i1 %146, label %147, label %552

147:                                              ; preds = %145
  %148 = getelementptr inbounds %struct.rtx_def, ptr %137, i64 0, i32 1
  %149 = load ptr, ptr %148, align 8, !tbaa !16
  %150 = load i32, ptr %149, align 8
  %151 = and i32 %150, 65535
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %152
  %154 = load i32, ptr %153, align 4, !tbaa !16
  %155 = and i32 %154, -2
  %156 = icmp eq i32 %155, 8
  br i1 %156, label %157, label %552

157:                                              ; preds = %128, %120, %147, %134, %37, %22, %16
  %158 = load ptr, ptr %17, align 8, !tbaa !16
  %159 = load i32, ptr %158, align 8
  %160 = and i32 %159, 65535
  %161 = icmp eq i32 %160, 49
  br i1 %161, label %162, label %530

162:                                              ; preds = %157
  %163 = load i32, ptr %6, align 8
  %164 = lshr i32 %163, 16
  %165 = and i32 %164, 255
  %166 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %167 = load ptr, ptr %166, align 8, !tbaa !16
  %168 = icmp eq ptr %167, null
  br i1 %168, label %172, label %169

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.mem_attrs, ptr %167, i64 0, i32 5
  %171 = load i8, ptr %170, align 8, !tbaa !185
  br label %172

172:                                              ; preds = %162, %169
  %173 = phi i8 [ %171, %169 ], [ 0, %162 ]
  %174 = tail call i32 @memory_address_addr_space_p(i32 noundef %165, ptr noundef nonnull %158, i8 noundef zeroext %173) #25
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %530

176:                                              ; preds = %172
  %177 = load ptr, ptr %17, align 8, !tbaa !16
  %178 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1
  %179 = load ptr, ptr %178, align 8, !tbaa !16
  %180 = load i32, ptr %179, align 8
  %181 = and i32 %180, 65535
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %182
  %184 = load i32, ptr %183, align 4, !tbaa !16
  %185 = and i32 %184, -2
  %186 = icmp eq i32 %185, 8
  br i1 %186, label %530, label %187

187:                                              ; preds = %176
  %188 = icmp eq i32 %181, 39
  br i1 %188, label %189, label %552

189:                                              ; preds = %187
  %190 = getelementptr inbounds %struct.rtx_def, ptr %179, i64 0, i32 1
  %191 = load ptr, ptr %190, align 8, !tbaa !16
  %192 = load i32, ptr %191, align 8
  %193 = and i32 %192, 65535
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %194
  %196 = load i32, ptr %195, align 4, !tbaa !16
  %197 = and i32 %196, -2
  %198 = icmp eq i32 %197, 8
  br i1 %198, label %530, label %552

199:                                              ; preds = %5
  %200 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %201 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %202 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %201, ptr noundef %1)
  %203 = icmp eq ptr %202, null
  %204 = icmp eq ptr %202, %201
  %205 = or i1 %203, %204
  br i1 %205, label %206, label %552

206:                                              ; preds = %199
  %207 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %200, ptr noundef %1)
  %208 = icmp eq ptr %207, null
  %209 = icmp eq ptr %207, %200
  %210 = select i1 %208, i1 true, i1 %209
  br i1 %210, label %211, label %552

211:                                              ; preds = %206
  %212 = load ptr, ptr %200, align 8, !tbaa !16
  %213 = load i32, ptr %212, align 8
  %214 = and i32 %213, 65535
  %215 = icmp eq i32 %214, 120
  br i1 %215, label %216, label %292

216:                                              ; preds = %211
  %217 = getelementptr inbounds %struct.rtx_def, ptr %212, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !16
  %219 = load i32, ptr %218, align 8
  %220 = lshr i32 %219, 16
  %221 = and i32 %220, 255
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %222
  %224 = load i8, ptr %223, align 1, !tbaa !16
  %225 = zext i8 %224 to i64
  %226 = shl nuw nsw i64 %225, 3
  %227 = icmp ult i8 %224, 9
  br i1 %227, label %228, label %292

228:                                              ; preds = %216
  %229 = getelementptr inbounds %struct.rtx_def, ptr %212, i64 0, i32 1, i32 0, i32 0, i64 1
  %230 = load ptr, ptr %229, align 8, !tbaa !16
  %231 = load i32, ptr %230, align 8
  %232 = and i32 %231, 65535
  %233 = icmp eq i32 %232, 30
  br i1 %233, label %234, label %292

234:                                              ; preds = %228
  %235 = getelementptr inbounds %struct.rtx_def, ptr %212, i64 0, i32 1, i32 0, i32 0, i64 2
  %236 = load ptr, ptr %235, align 8, !tbaa !16
  %237 = load i32, ptr %236, align 8
  %238 = and i32 %237, 65535
  %239 = icmp eq i32 %238, 30
  br i1 %239, label %240, label %292

240:                                              ; preds = %234
  %241 = load ptr, ptr %201, align 8, !tbaa !16
  %242 = load i32, ptr %241, align 8
  %243 = and i32 %242, 65535
  %244 = icmp eq i32 %243, 30
  br i1 %244, label %245, label %292

245:                                              ; preds = %240
  %246 = getelementptr inbounds %struct.rtx_def, ptr %230, i64 0, i32 1
  %247 = load i64, ptr %246, align 8, !tbaa !16
  %248 = getelementptr inbounds %struct.rtx_def, ptr %236, i64 0, i32 1
  %249 = load i64, ptr %248, align 8, !tbaa !16
  %250 = add nsw i64 %249, %247
  %251 = icmp sgt i64 %250, %226
  br i1 %251, label %292, label %252

252:                                              ; preds = %245
  %253 = tail call i32 @side_effects_p(ptr noundef nonnull %218) #25
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %292

255:                                              ; preds = %252
  %256 = load ptr, ptr %200, align 8, !tbaa !16
  %257 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1
  %258 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1, i32 0, i32 0, i64 2
  %259 = load ptr, ptr %258, align 8, !tbaa !16
  %260 = getelementptr inbounds %struct.rtx_def, ptr %259, i64 0, i32 1
  %261 = load i64, ptr %260, align 8, !tbaa !16
  %262 = getelementptr inbounds %struct.rtx_def, ptr %256, i64 0, i32 1, i32 0, i32 0, i64 1
  %263 = load ptr, ptr %262, align 8, !tbaa !16
  %264 = getelementptr inbounds %struct.rtx_def, ptr %263, i64 0, i32 1
  %265 = load i64, ptr %264, align 8, !tbaa !16
  %266 = load ptr, ptr %201, align 8, !tbaa !16
  %267 = getelementptr inbounds %struct.rtx_def, ptr %266, i64 0, i32 1
  %268 = load i64, ptr %267, align 8, !tbaa !16
  %269 = load ptr, ptr %257, align 8, !tbaa !16
  %270 = load i32, ptr %269, align 8
  %271 = lshr i32 %270, 16
  %272 = and i32 %271, 255
  %273 = shl nsw i64 -1, %265
  %274 = xor i64 %273, -1
  %275 = shl i64 %268, %261
  %276 = tail call ptr @gen_int_mode(i64 noundef %275, i32 noundef %272) #25
  %277 = icmp eq i64 %268, %274
  br i1 %277, label %278, label %280

278:                                              ; preds = %255
  %279 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %272, ptr noundef nonnull %269, ptr noundef %276) #25
  br label %286

280:                                              ; preds = %255
  %281 = shl i64 %274, %261
  %282 = xor i64 %281, -1
  %283 = tail call ptr @gen_int_mode(i64 noundef %282, i32 noundef %272) #25
  %284 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %272, ptr noundef nonnull %269, ptr noundef %283) #25
  %285 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %272, ptr noundef %284, ptr noundef %276) #25
  br label %286

286:                                              ; preds = %280, %278
  %287 = phi ptr [ %285, %280 ], [ %279, %278 ]
  tail call fastcc void @do_SUBST(ptr noundef nonnull %201, ptr noundef %287)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %200, ptr noundef nonnull %269)
  %288 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %201, ptr noundef %1)
  %289 = icmp eq ptr %288, null
  %290 = icmp eq ptr %288, %201
  %291 = or i1 %289, %290
  br i1 %291, label %292, label %552

292:                                              ; preds = %286, %252, %245, %240, %234, %228, %216, %211
  %293 = load ptr, ptr %201, align 8, !tbaa !16
  %294 = load i32, ptr %293, align 8
  %295 = trunc i32 %294 to i16
  switch i16 %295, label %452 [
    i16 61, label %296
    i16 120, label %370
    i16 98, label %348
    i16 119, label %370
  ]

296:                                              ; preds = %292
  %297 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1, i32 0, i32 0, i64 1
  %298 = load ptr, ptr %297, align 8, !tbaa !16
  %299 = load i32, ptr %298, align 8
  %300 = and i32 %299, 65535
  %301 = icmp eq i32 %300, 30
  br i1 %301, label %302, label %452

302:                                              ; preds = %296
  %303 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1
  %304 = load ptr, ptr %303, align 8, !tbaa !16
  %305 = load i32, ptr %304, align 8
  %306 = and i32 %305, 65535
  %307 = icmp eq i32 %306, 37
  br i1 %307, label %308, label %452

308:                                              ; preds = %302
  %309 = getelementptr inbounds %struct.rtx_def, ptr %298, i64 0, i32 1
  %310 = load i64, ptr %309, align 8, !tbaa !16
  %311 = tail call i32 @exact_log2(i64 noundef %310) #25
  %312 = sext i32 %311 to i64
  %313 = icmp sgt i32 %311, 6
  br i1 %313, label %314, label %452

314:                                              ; preds = %308
  %315 = load ptr, ptr %200, align 8, !tbaa !16
  %316 = load i32, ptr %315, align 8
  %317 = and i32 %316, 65535
  %318 = icmp eq i32 %317, 37
  br i1 %318, label %319, label %452

319:                                              ; preds = %314
  %320 = tail call fastcc ptr @find_single_use(ptr noundef nonnull %315, ptr noundef %1, ptr noundef null)
  %321 = icmp eq ptr %320, null
  br i1 %321, label %452, label %322

322:                                              ; preds = %319
  %323 = load ptr, ptr %320, align 8, !tbaa !5
  %324 = load i32, ptr %323, align 8
  %325 = and i32 %324, 65534
  %326 = icmp eq i32 %325, 80
  br i1 %326, label %327, label %452

327:                                              ; preds = %322
  %328 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1
  %329 = load ptr, ptr %328, align 8, !tbaa !16
  %330 = load ptr, ptr %200, align 8, !tbaa !16
  %331 = icmp eq ptr %329, %330
  br i1 %331, label %332, label %452

332:                                              ; preds = %327
  %333 = getelementptr inbounds %struct.rtx_def, ptr %323, i64 0, i32 1, i32 0, i32 0, i64 1
  %334 = load ptr, ptr %333, align 8, !tbaa !16
  %335 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %336 = icmp eq ptr %334, %335
  br i1 %336, label %337, label %452

337:                                              ; preds = %332
  %338 = load i32, ptr %329, align 8
  %339 = lshr i32 %338, 16
  %340 = and i32 %339, 255
  %341 = load ptr, ptr %201, align 8, !tbaa !16
  %342 = getelementptr inbounds %struct.rtx_def, ptr %341, i64 0, i32 1
  %343 = load ptr, ptr %342, align 8, !tbaa !16
  %344 = tail call fastcc ptr @make_extraction(i32 noundef %340, ptr noundef %343, i64 noundef %312, ptr noundef null, i64 noundef 1, i32 noundef 1, i32 noundef 0, i32 noundef 0)
  %345 = icmp eq ptr %344, null
  br i1 %345, label %452, label %346

346:                                              ; preds = %337
  tail call fastcc void @do_SUBST(ptr noundef nonnull %201, ptr noundef nonnull %344)
  br label %347

347:                                              ; preds = %346, %513
  br label %5

348:                                              ; preds = %292
  %349 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1
  %350 = load ptr, ptr %349, align 8, !tbaa !16
  %351 = load i32, ptr %350, align 8
  %352 = lshr i32 %351, 16
  %353 = and i32 %352, 255
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %354
  %356 = load i8, ptr %355, align 1, !tbaa !16
  %357 = icmp eq i8 %356, 3
  br i1 %357, label %452, label %358

358:                                              ; preds = %348
  %359 = lshr i32 %294, 16
  %360 = and i32 %359, 255
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %361
  %363 = load i8, ptr %362, align 1, !tbaa !16
  %364 = icmp eq i8 %363, 3
  br i1 %364, label %452, label %365

365:                                              ; preds = %358
  %366 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %354
  %367 = load i8, ptr %366, align 1, !tbaa !16
  %368 = zext i8 %367 to i64
  %369 = shl nuw nsw i64 %368, 3
  br label %392

370:                                              ; preds = %292, %292
  %371 = and i32 %294, 65535
  %372 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1
  %373 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1, i32 0, i32 0, i64 1
  %374 = load ptr, ptr %373, align 8, !tbaa !16
  %375 = load i32, ptr %374, align 8
  %376 = and i32 %375, 65535
  %377 = icmp eq i32 %376, 30
  br i1 %377, label %378, label %452

378:                                              ; preds = %370
  %379 = getelementptr inbounds %struct.rtx_def, ptr %293, i64 0, i32 1, i32 0, i32 0, i64 2
  %380 = load ptr, ptr %379, align 8, !tbaa !16
  %381 = load i32, ptr %380, align 8
  %382 = and i32 %381, 65535
  %383 = icmp eq i32 %382, 30
  br i1 %383, label %384, label %452

384:                                              ; preds = %378
  %385 = load ptr, ptr %372, align 8, !tbaa !16
  %386 = getelementptr inbounds %struct.rtx_def, ptr %374, i64 0, i32 1
  %387 = load i64, ptr %386, align 8, !tbaa !16
  %388 = getelementptr inbounds %struct.rtx_def, ptr %380, i64 0, i32 1
  %389 = load i64, ptr %388, align 8, !tbaa !16
  %390 = icmp eq i32 %371, 120
  %391 = zext i1 %390 to i32
  br label %392

392:                                              ; preds = %384, %365
  %393 = phi ptr [ %350, %365 ], [ %385, %384 ]
  %394 = phi i32 [ 0, %365 ], [ %391, %384 ]
  %395 = phi i64 [ 0, %365 ], [ %389, %384 ]
  %396 = phi i64 [ %369, %365 ], [ %387, %384 ]
  %397 = icmp ne i64 %396, 0
  %398 = icmp sgt i64 %395, -1
  %399 = select i1 %397, i1 %398, i1 false
  br i1 %399, label %400, label %452

400:                                              ; preds = %392
  %401 = add i64 %396, %395
  %402 = load i32, ptr %393, align 8
  %403 = lshr i32 %402, 16
  %404 = and i32 %403, 255
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %405
  %407 = load i8, ptr %406, align 1, !tbaa !16
  %408 = zext i8 %407 to i64
  %409 = shl nuw nsw i64 %408, 3
  %410 = icmp ugt i64 %401, %409
  br i1 %410, label %452, label %411

411:                                              ; preds = %400
  %412 = lshr i32 %294, 16
  %413 = and i32 %412, 255
  %414 = icmp ne i32 %394, 0
  %415 = icmp ult i64 %396, 9
  %416 = and i1 %414, %415
  br i1 %416, label %417, label %430

417:                                              ; preds = %411
  %418 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %419 = tail call ptr %418(i32 noundef %413, ptr noundef nonnull %393) #25
  %420 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %395) #25
  %421 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 68, i32 noundef %413, ptr noundef %419, ptr noundef %420) #25
  %422 = shl nsw i64 -1, %396
  %423 = xor i64 %422, -1
  %424 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %423) #25
  %425 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %413, ptr noundef %421, ptr noundef %424) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %201, ptr noundef %425)
  %426 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %201, ptr noundef %1)
  %427 = icmp eq ptr %426, null
  %428 = icmp eq ptr %426, %201
  %429 = or i1 %427, %428
  br i1 %429, label %452, label %552

430:                                              ; preds = %411
  %431 = select i1 %414, i32 68, i32 67
  %432 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %433 = tail call ptr %432(i32 noundef %413, ptr noundef nonnull %393) #25
  %434 = zext i32 %413 to i64
  %435 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %434
  %436 = load i8, ptr %435, align 1, !tbaa !16
  %437 = zext i8 %436 to i64
  %438 = shl nuw nsw i64 %437, 3
  %439 = sub i64 %438, %401
  %440 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %439) #25
  %441 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef %413, ptr noundef %433, ptr noundef %440) #25
  %442 = load i8, ptr %435, align 1, !tbaa !16
  %443 = zext i8 %442 to i64
  %444 = shl nuw nsw i64 %443, 3
  %445 = sub i64 %444, %396
  %446 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %445) #25
  %447 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %431, i32 noundef %413, ptr noundef %441, ptr noundef %446) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %201, ptr noundef %447)
  %448 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %201, ptr noundef %1)
  %449 = icmp eq ptr %448, null
  %450 = icmp eq ptr %448, %201
  %451 = or i1 %449, %450
  br i1 %451, label %452, label %552

452:                                              ; preds = %337, %322, %296, %302, %308, %314, %319, %327, %332, %292, %370, %378, %358, %348, %430, %417, %400, %392
  %453 = load ptr, ptr %201, align 8, !tbaa !16
  %454 = load i32, ptr %453, align 8
  %455 = and i32 %454, 65535
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %456
  %458 = load i32, ptr %457, align 4, !tbaa !16
  %459 = icmp ult i32 %458, 4
  br i1 %459, label %460, label %491

460:                                              ; preds = %452
  %461 = getelementptr inbounds %struct.rtx_def, ptr %453, i64 0, i32 1, i32 0, i32 0, i64 1
  %462 = load ptr, ptr %461, align 8, !tbaa !16
  %463 = load i32, ptr %462, align 8
  %464 = and i32 %463, 65535
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %465
  %467 = load i32, ptr %466, align 4, !tbaa !16
  %468 = icmp eq i32 %467, 9
  br i1 %468, label %469, label %493

469:                                              ; preds = %460
  %470 = getelementptr inbounds %struct.rtx_def, ptr %453, i64 0, i32 1
  %471 = load ptr, ptr %470, align 8, !tbaa !16
  %472 = load i32, ptr %471, align 8
  %473 = and i32 %472, 65535
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %474
  %476 = load i32, ptr %475, align 4, !tbaa !16
  %477 = and i32 %476, -2
  %478 = icmp eq i32 %477, 8
  br i1 %478, label %552, label %479

479:                                              ; preds = %469
  %480 = icmp eq i32 %473, 39
  br i1 %480, label %481, label %493

481:                                              ; preds = %479
  %482 = getelementptr inbounds %struct.rtx_def, ptr %471, i64 0, i32 1
  %483 = load ptr, ptr %482, align 8, !tbaa !16
  %484 = load i32, ptr %483, align 8
  %485 = and i32 %484, 65535
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %486
  %488 = load i32, ptr %487, align 4, !tbaa !16
  %489 = and i32 %488, -2
  %490 = icmp eq i32 %489, 8
  br i1 %490, label %552, label %493

491:                                              ; preds = %452
  %492 = icmp eq i32 %458, 4
  br i1 %492, label %493, label %552

493:                                              ; preds = %460, %479, %481, %491
  %494 = getelementptr inbounds %struct.rtx_def, ptr %453, i64 0, i32 1
  %495 = load ptr, ptr %494, align 8, !tbaa !16
  %496 = tail call i32 @register_operand(ptr noundef %495, i32 noundef 0) #25
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %552

498:                                              ; preds = %493
  %499 = load ptr, ptr %201, align 8, !tbaa !16
  %500 = getelementptr inbounds %struct.rtx_def, ptr %499, i64 0, i32 1
  br label %552

501:                                              ; preds = %5, %5
  %502 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %503 = load ptr, ptr %502, align 8, !tbaa !16
  %504 = load i32, ptr %503, align 8
  %505 = and i32 %504, 65535
  %506 = icmp eq i32 %505, 64
  %507 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %508 = load ptr, ptr %507, align 8, !tbaa !16
  %509 = load i32, ptr %508, align 8
  %510 = and i32 %509, 65535
  %511 = icmp eq i32 %510, 64
  %512 = select i1 %506, i1 %511, i1 false
  br i1 %512, label %513, label %524

513:                                              ; preds = %501
  %514 = lshr i32 %7, 16
  %515 = and i32 %514, 255
  %516 = icmp eq i32 %8, 62
  %517 = select i1 %516, i32 61, i32 62
  %518 = getelementptr inbounds %struct.rtx_def, ptr %503, i64 0, i32 1
  %519 = load ptr, ptr %518, align 8, !tbaa !16
  %520 = getelementptr inbounds %struct.rtx_def, ptr %508, i64 0, i32 1
  %521 = load ptr, ptr %520, align 8, !tbaa !16
  %522 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %517, i32 noundef %515, ptr noundef %519, ptr noundef %521) #25
  %523 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 64, i32 noundef %515, ptr noundef %522) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %4, ptr noundef %523)
  br label %347

524:                                              ; preds = %501
  %525 = and i32 %509, 65535
  %526 = icmp eq i32 %525, 64
  br i1 %526, label %527, label %530

527:                                              ; preds = %524
  %528 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %529 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call fastcc void @do_SUBST(ptr noundef nonnull %528, ptr noundef nonnull %508)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %529, ptr noundef nonnull %503)
  br label %530

530:                                              ; preds = %5, %524, %527, %157, %172, %176, %189
  %531 = zext i32 %8 to i64
  %532 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %531
  %533 = load i32, ptr %532, align 4, !tbaa !16
  switch i32 %533, label %552 [
    i32 11, label %534
    i32 10, label %534
    i32 2, label %538
    i32 3, label %538
    i32 0, label %538
    i32 1, label %538
    i32 4, label %542
  ]

534:                                              ; preds = %530, %530
  %535 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 2
  %536 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %535, ptr noundef %1)
  %537 = icmp eq ptr %536, null
  br i1 %537, label %538, label %552

538:                                              ; preds = %534, %530, %530, %530, %530
  %539 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %540 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %539, ptr noundef %1)
  %541 = icmp eq ptr %540, null
  br i1 %541, label %542, label %552

542:                                              ; preds = %538, %530
  %543 = load i32, ptr %6, align 8
  %544 = and i32 %543, 65535
  %545 = icmp eq i32 %544, 61
  br i1 %545, label %554, label %546

546:                                              ; preds = %542
  %547 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %548 = load ptr, ptr %547, align 8, !tbaa !16
  %549 = load i32, ptr %548, align 8
  %550 = and i32 %549, 65535
  %551 = icmp eq i32 %550, 61
  br i1 %551, label %552, label %554

552:                                              ; preds = %430, %417, %145, %147, %469, %481, %187, %189, %132, %491, %530, %546, %538, %534, %493, %498, %286, %206, %199, %10, %554
  %553 = phi ptr [ %558, %554 ], [ %500, %498 ], [ null, %491 ], [ null, %493 ], [ %536, %534 ], [ %540, %538 ], [ %547, %546 ], [ null, %530 ], [ %133, %132 ], [ %178, %189 ], [ %178, %187 ], [ %461, %481 ], [ %461, %469 ], [ %136, %147 ], [ %136, %145 ], [ %448, %430 ], [ %426, %417 ], [ %202, %199 ], [ %207, %206 ], [ %288, %286 ], [ %4, %10 ]
  ret ptr %553

554:                                              ; preds = %546, %542
  %555 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %556 = tail call fastcc ptr @find_split_point(ptr noundef nonnull %555, ptr noundef %1)
  %557 = icmp eq ptr %556, null
  %558 = select i1 %557, ptr %4, ptr %556
  br label %552
}

declare i32 @exact_log2(i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @contains_muldiv(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  br label %2

2:                                                ; preds = %30, %1
  %3 = phi ptr [ %0, %1 ], [ %32, %30 ]
  %4 = load i32, ptr %3, align 8
  %5 = trunc i32 %4 to i16
  switch i16 %5, label %17 [
    i16 58, label %37
    i16 55, label %37
    i16 60, label %37
    i16 59, label %37
    i16 52, label %6
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 30
  br i1 %11, label %12, label %37

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !16
  %15 = tail call i32 @exact_log2(i64 noundef %14) #25
  %16 = lshr i32 %15, 31
  br label %37

17:                                               ; preds = %2
  %18 = and i32 %4, 65535
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !16
  %22 = icmp ult i32 %21, 4
  br i1 %22, label %23, label %33

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = tail call fastcc i32 @contains_muldiv(ptr noundef %25), !range !103
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %37

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %30

30:                                               ; preds = %28, %35
  %31 = phi ptr [ %29, %28 ], [ %36, %35 ]
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  br label %2

33:                                               ; preds = %17
  %34 = icmp eq i32 %21, 4
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  br label %30

37:                                               ; preds = %33, %23, %2, %2, %2, %2, %6, %12
  %38 = phi i32 [ 1, %6 ], [ %16, %12 ], [ 0, %33 ], [ 1, %23 ], [ 1, %2 ], [ 1, %2 ], [ 1, %2 ], [ 1, %2 ]
  ret i32 %38
}

declare i32 @check_asm_operands(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @combine_validate_cost(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #9 {
  %7 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, ptr %7, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !20
  %13 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !16
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, ptr %7, i64 %15
  %17 = load i32, ptr %16, align 4, !tbaa !20
  %18 = icmp eq ptr %0, null
  br i1 %18, label %33, label %19

19:                                               ; preds = %6
  %20 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !16
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %7, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !20
  %25 = icmp sgt i32 %24, 0
  %26 = icmp sgt i32 %12, 0
  %27 = select i1 %25, i1 %26, i1 false
  %28 = icmp sgt i32 %17, 0
  %29 = select i1 %27, i1 %28, i1 false
  %30 = add i32 %17, %12
  %31 = add i32 %30, %24
  %32 = select i1 %29, i32 %31, i32 0
  br label %39

33:                                               ; preds = %6
  %34 = icmp sgt i32 %12, 0
  %35 = icmp sgt i32 %17, 0
  %36 = select i1 %34, i1 %35, i1 false
  %37 = add nsw i32 %17, %12
  %38 = select i1 %36, i32 %37, i32 0
  br label %39

39:                                               ; preds = %33, %19
  %40 = phi i32 [ %32, %19 ], [ %38, %33 ]
  %41 = phi i32 [ %24, %19 ], [ 0, %33 ]
  %42 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %43 = tail call i32 @insn_rtx_cost(ptr noundef %3, i8 noundef zeroext %42) #25
  %44 = icmp eq ptr %4, null
  br i1 %44, label %53, label %45

45:                                               ; preds = %39
  %46 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %47 = tail call i32 @insn_rtx_cost(ptr noundef nonnull %4, i8 noundef zeroext %46) #25
  %48 = icmp sgt i32 %47, 0
  %49 = icmp sgt i32 %43, 0
  %50 = select i1 %48, i1 %49, i1 false
  %51 = add nsw i32 %47, %43
  %52 = select i1 %50, i32 %51, i32 0
  br label %53

53:                                               ; preds = %39, %45
  %54 = phi i32 [ %47, %45 ], [ 0, %39 ]
  %55 = phi i32 [ %52, %45 ], [ %43, %39 ]
  %56 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %57 = icmp eq ptr %56, null
  br i1 %57, label %74, label %58

58:                                               ; preds = %53
  %59 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  %60 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1
  %61 = load i32, ptr %60, align 8, !tbaa !16
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, ptr %59, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !20
  %65 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %66 = tail call i32 @insn_rtx_cost(ptr noundef %5, i8 noundef zeroext %65) #25
  %67 = icmp sgt i32 %64, 0
  %68 = icmp sgt i32 %66, 0
  %69 = select i1 %67, i1 %68, i1 false
  %70 = add nsw i32 %64, %40
  %71 = select i1 %69, i32 %70, i32 0
  %72 = select i1 %69, i32 %66, i32 0
  %73 = add nsw i32 %72, %55
  br label %74

74:                                               ; preds = %58, %53
  %75 = phi i32 [ %71, %58 ], [ %40, %53 ]
  %76 = phi i32 [ %73, %58 ], [ %55, %53 ]
  %77 = icmp sgt i32 %75, 0
  %78 = icmp sgt i32 %76, %75
  %79 = select i1 %77, i1 %78, i1 false
  br i1 %79, label %80, label %104

80:                                               ; preds = %74
  %81 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %82 = icmp eq ptr %81, null
  br i1 %82, label %117, label %83

83:                                               ; preds = %80
  br i1 %18, label %92, label %84

84:                                               ; preds = %83
  %85 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %86 = load i32, ptr %85, align 8, !tbaa !16
  %87 = load i32, ptr %8, align 8, !tbaa !16
  %88 = load i32, ptr %13, align 8, !tbaa !16
  %89 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %81, ptr noundef nonnull @.str.16, i32 noundef %86, i32 noundef %87, i32 noundef %88)
  %90 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %91 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %90, ptr noundef nonnull @.str.17, i32 noundef %41, i32 noundef %12, i32 noundef %17, i32 noundef %75)
  br label %98

92:                                               ; preds = %83
  %93 = load i32, ptr %8, align 8, !tbaa !16
  %94 = load i32, ptr %13, align 8, !tbaa !16
  %95 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %81, ptr noundef nonnull @.str.18, i32 noundef %93, i32 noundef %94)
  %96 = load ptr, ptr @dump_file, align 8, !tbaa !5
  %97 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %96, ptr noundef nonnull @.str.19, i32 noundef %12, i32 noundef %17, i32 noundef %75)
  br label %98

98:                                               ; preds = %92, %84
  %99 = load ptr, ptr @dump_file, align 8, !tbaa !5
  br i1 %44, label %102, label %100

100:                                              ; preds = %98
  %101 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef nonnull @.str.20, i32 noundef %54, i32 noundef %43, i32 noundef %76)
  br label %117

102:                                              ; preds = %98
  %103 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef nonnull @.str.21, i32 noundef %76)
  br label %117

104:                                              ; preds = %74
  %105 = load ptr, ptr @uid_insn_cost, align 8, !tbaa !5
  %106 = load i32, ptr %8, align 8, !tbaa !16
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, ptr %105, i64 %107
  store i32 %54, ptr %108, align 4, !tbaa !20
  %109 = load i32, ptr %13, align 8, !tbaa !16
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, ptr %105, i64 %110
  store i32 %43, ptr %111, align 4, !tbaa !20
  br i1 %18, label %117, label %112

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %114 = load i32, ptr %113, align 8, !tbaa !16
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i32, ptr %105, i64 %115
  store i32 0, ptr %116, align 4, !tbaa !20
  br label %117

117:                                              ; preds = %104, %112, %80, %102, %100
  %118 = phi i8 [ 0, %100 ], [ 0, %102 ], [ 0, %80 ], [ 1, %112 ], [ 1, %104 ]
  ret i8 %118
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @propagate_for_debug(ptr %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i8 noundef zeroext %4) unnamed_addr #9 {
  %6 = icmp eq i8 %4, 0
  %7 = select i1 %6, ptr null, ptr %1
  br label %8

8:                                                ; preds = %38, %5
  %9 = phi ptr [ %0, %5 ], [ %18, %38 ]
  %10 = phi ptr [ %7, %5 ], [ %39, %38 ]
  br label %11

11:                                               ; preds = %16, %8
  %12 = phi ptr [ %9, %8 ], [ %18, %16 ]
  br label %13

13:                                               ; preds = %11, %22
  %14 = phi ptr [ %18, %22 ], [ %12, %11 ]
  %15 = icmp eq ptr %14, %1
  br i1 %15, label %42, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1, i32 0, i32 0, i64 2
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %14, align 8
  %20 = and i32 %19, 65535
  %21 = icmp eq i32 %20, 7
  br i1 %21, label %22, label %11, !llvm.loop !187

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 1
  %24 = load ptr, ptr %23, align 8, !tbaa !16
  %25 = getelementptr inbounds %struct.rtx_def, ptr %24, i64 0, i32 1, i32 0, i32 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !16
  %27 = tail call ptr @simplify_replace_rtx(ptr noundef %26, ptr noundef %2, ptr noundef %3) #25
  %28 = load ptr, ptr %23, align 8, !tbaa !16
  %29 = getelementptr inbounds %struct.rtx_def, ptr %28, i64 0, i32 1, i32 0, i32 0, i64 1
  %30 = load ptr, ptr %29, align 8, !tbaa !16
  %31 = icmp eq ptr %27, %30
  br i1 %31, label %13, label %32, !llvm.loop !187

32:                                               ; preds = %22
  %33 = getelementptr inbounds %struct.rtx_def, ptr %28, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %27, ptr %33, align 8, !tbaa !16
  %34 = icmp eq ptr %10, null
  br i1 %34, label %40, label %35

35:                                               ; preds = %32
  tail call void @remove_insn(ptr noundef nonnull %14) #25
  %36 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %36, i8 0, i64 16, i1 false)
  %37 = tail call ptr @emit_debug_insn_after(ptr noundef nonnull %14, ptr noundef nonnull %10) #25
  br label %38

38:                                               ; preds = %35, %40
  %39 = phi ptr [ null, %40 ], [ %37, %35 ]
  br label %8, !llvm.loop !187

40:                                               ; preds = %32
  %41 = tail call zeroext i8 @df_insn_rescan(ptr noundef nonnull %14) #25
  br label %38

42:                                               ; preds = %13
  ret void
}

declare ptr @gen_raw_REG(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @lowpart_subreg(i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @adjust_for_new_dest(ptr noundef %0) unnamed_addr #9 {
  tail call void @remove_reg_equal_equiv_notes(ptr noundef %0) #25
  %2 = tail call ptr @gen_rtx_fmt_ue_stat(i32 noundef 4, i32 noundef 0, ptr noundef %0, ptr noundef null) #25
  tail call fastcc void @distribute_links(ptr noundef %2)
  %3 = tail call zeroext i8 @df_insn_rescan(ptr noundef %0) #25
  ret void
}

declare i32 @reg_set_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @distribute_notes(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #9 {
  %7 = icmp eq ptr %0, null
  br i1 %7, label %590, label %8

8:                                                ; preds = %6
  %9 = icmp ne ptr %1, null
  %10 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %11 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %12 = icmp eq ptr %1, %2
  br label %13

13:                                               ; preds = %8, %587
  %14 = phi ptr [ %3, %8 ], [ %588, %587 ]
  %15 = phi ptr [ %0, %8 ], [ %18, %587 ]
  %16 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1
  %17 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 0, i32 1, i32 0, i32 0, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load i32, ptr %15, align 8
  %20 = lshr i32 %19, 16
  %21 = trunc i32 %20 to i8
  switch i8 %21, label %563 [
    i8 13, label %566
    i8 16, label %566
    i8 14, label %587
    i8 28, label %22
    i8 25, label %32
    i8 27, label %55
    i8 30, label %55
    i8 6, label %65
    i8 4, label %106
    i8 3, label %106
    i8 15, label %106
    i8 2, label %117
    i8 9, label %135
    i8 10, label %135
    i8 5, label %587
    i8 1, label %236
  ]

22:                                               ; preds = %13
  %23 = load i32, ptr %2, align 8
  %24 = and i32 %23, 65535
  %25 = icmp eq i32 %24, 9
  br i1 %25, label %573, label %26

26:                                               ; preds = %22
  %27 = icmp eq ptr %14, null
  br i1 %27, label %564, label %28

28:                                               ; preds = %26
  %29 = load i32, ptr %14, align 8
  %30 = and i32 %29, 65535
  %31 = icmp eq i32 %30, 9
  br i1 %31, label %573, label %564

32:                                               ; preds = %13
  %33 = load i32, ptr %2, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 10
  br i1 %35, label %573, label %36

36:                                               ; preds = %32
  %37 = icmp eq ptr %14, null
  br i1 %37, label %42, label %38

38:                                               ; preds = %36
  %39 = load i32, ptr %14, align 8
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 10
  br i1 %41, label %573, label %42

42:                                               ; preds = %38, %36
  %43 = load i32, ptr @flag_non_call_exceptions, align 4, !tbaa !20
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 12762, ptr noundef nonnull @.str.5) #25
  br label %46

46:                                               ; preds = %42, %45
  %47 = tail call i32 @may_trap_p(ptr noundef nonnull %2) #25
  %48 = icmp ne i32 %47, 0
  %49 = or i1 %37, %48
  %50 = select i1 %48, ptr %2, ptr null
  %51 = select i1 %48, ptr %14, ptr null
  br i1 %49, label %566, label %52

52:                                               ; preds = %46
  %53 = tail call i32 @may_trap_p(ptr noundef nonnull %14) #25
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %587, label %573

55:                                               ; preds = %13, %13
  %56 = load i32, ptr %2, align 8
  %57 = and i32 %56, 65535
  %58 = icmp eq i32 %57, 10
  br i1 %58, label %573, label %59

59:                                               ; preds = %55
  %60 = icmp eq ptr %14, null
  br i1 %60, label %564, label %61

61:                                               ; preds = %59
  %62 = load i32, ptr %14, align 8
  %63 = and i32 %62, 65535
  %64 = icmp eq i32 %63, 10
  br i1 %64, label %573, label %564

65:                                               ; preds = %13
  %66 = load ptr, ptr %16, align 8, !tbaa !16
  %67 = load ptr, ptr %10, align 8, !tbaa !16
  %68 = tail call i32 @reg_set_p(ptr noundef %66, ptr noundef %67) #25
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %84, label %70

70:                                               ; preds = %65
  br i1 %12, label %71, label %587

71:                                               ; preds = %70
  %72 = load ptr, ptr %16, align 8, !tbaa !16
  %73 = load i32, ptr %72, align 8
  %74 = and i32 %73, 65535
  %75 = icmp eq i32 %74, 37
  br i1 %75, label %76, label %81

76:                                               ; preds = %71
  %77 = getelementptr i8, ptr %72, i64 8
  %78 = load i32, ptr %77, align 8, !tbaa !16
  %79 = tail call ptr @find_regno_note(ptr noundef nonnull %1, i32 noundef 6, i32 noundef %78) #25
  %80 = icmp eq ptr %79, null
  br i1 %80, label %573, label %587

81:                                               ; preds = %71
  %82 = tail call ptr @find_reg_note(ptr noundef nonnull %1, i32 noundef 6, ptr noundef nonnull %72) #25
  %83 = icmp eq ptr %82, null
  br i1 %83, label %573, label %587

84:                                               ; preds = %65
  %85 = load ptr, ptr %16, align 8, !tbaa !16
  %86 = load ptr, ptr %10, align 8, !tbaa !16
  %87 = tail call i32 @reg_referenced_p(ptr noundef %85, ptr noundef %86) #25
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %587, label %89

89:                                               ; preds = %84
  %90 = load ptr, ptr %16, align 8, !tbaa !16
  %91 = load i32, ptr %90, align 8
  %92 = and i32 %91, 65535
  %93 = icmp eq i32 %92, 37
  br i1 %93, label %94, label %99

94:                                               ; preds = %89
  %95 = getelementptr i8, ptr %90, i64 8
  %96 = load i32, ptr %95, align 8, !tbaa !16
  %97 = tail call ptr @find_regno_note(ptr noundef nonnull %2, i32 noundef 1, i32 noundef %96) #25
  %98 = icmp eq ptr %97, null
  br i1 %98, label %102, label %587

99:                                               ; preds = %89
  %100 = tail call ptr @find_reg_note(ptr noundef nonnull %2, i32 noundef 1, ptr noundef nonnull %90) #25
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %587

102:                                              ; preds = %99, %94
  %103 = load i32, ptr %15, align 8
  %104 = and i32 %103, -16711681
  %105 = or i32 %104, 65536
  store i32 %105, ptr %15, align 8
  br label %573

106:                                              ; preds = %13, %13, %13
  br i1 %12, label %107, label %587

107:                                              ; preds = %106
  %108 = load ptr, ptr %16, align 8, !tbaa !16
  %109 = icmp eq ptr %108, null
  br i1 %109, label %566, label %110

110:                                              ; preds = %107
  %111 = load i32, ptr %108, align 8
  %112 = and i32 %111, 65535
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %113
  %115 = load i32, ptr %114, align 4, !tbaa !16
  %116 = icmp eq i32 %115, 9
  br i1 %116, label %566, label %587

117:                                              ; preds = %13
  %118 = load ptr, ptr %16, align 8, !tbaa !16
  %119 = load ptr, ptr %10, align 8, !tbaa !16
  %120 = tail call i32 @reg_mentioned_p(ptr noundef %118, ptr noundef %119) #25
  %121 = icmp eq i32 %120, 0
  %122 = select i1 %121, ptr null, ptr %2
  %123 = icmp eq ptr %14, null
  br i1 %123, label %566, label %124

124:                                              ; preds = %117
  %125 = load ptr, ptr %16, align 8, !tbaa !16
  %126 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 1
  %127 = load ptr, ptr %126, align 8, !tbaa !16
  %128 = tail call i32 @reg_mentioned_p(ptr noundef %125, ptr noundef %127) #25
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %566, label %130

130:                                              ; preds = %124
  %131 = icmp eq ptr %122, null
  %132 = select i1 %131, ptr %14, ptr %2
  %133 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 1, i32 1, i32 0, i32 0, i64 1
  %134 = load ptr, ptr %133, align 8, !tbaa !16
  store ptr %134, ptr %17, align 8, !tbaa !16
  store ptr %15, ptr %133, align 8, !tbaa !16
  br i1 %131, label %587, label %581

135:                                              ; preds = %13, %13
  %136 = load ptr, ptr %16, align 8, !tbaa !16
  %137 = load ptr, ptr %10, align 8, !tbaa !16
  %138 = tail call i32 @reg_mentioned_p(ptr noundef %136, ptr noundef %137) #25
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %154

140:                                              ; preds = %135
  %141 = tail call ptr @find_reg_note(ptr noundef nonnull %2, i32 noundef 4, ptr noundef null) #25
  %142 = icmp eq ptr %141, null
  br i1 %142, label %155, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %struct.rtx_def, ptr %141, i64 0, i32 1
  %145 = load ptr, ptr %144, align 8, !tbaa !16
  %146 = load i32, ptr %145, align 8
  %147 = and i32 %146, 65535
  %148 = icmp eq i32 %147, 44
  br i1 %148, label %149, label %155

149:                                              ; preds = %143
  %150 = getelementptr inbounds %struct.rtx_def, ptr %145, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = load ptr, ptr %16, align 8, !tbaa !16
  %153 = icmp eq ptr %151, %152
  br i1 %153, label %154, label %155

154:                                              ; preds = %149, %135
  br label %155

155:                                              ; preds = %154, %149, %143, %140
  %156 = phi ptr [ %2, %154 ], [ null, %149 ], [ null, %143 ], [ null, %140 ]
  %157 = icmp eq ptr %14, null
  br i1 %157, label %182, label %158

158:                                              ; preds = %155
  %159 = load ptr, ptr %16, align 8, !tbaa !16
  %160 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 1
  %161 = load ptr, ptr %160, align 8, !tbaa !16
  %162 = tail call i32 @reg_mentioned_p(ptr noundef %159, ptr noundef %161) #25
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %178

164:                                              ; preds = %158
  %165 = tail call ptr @find_reg_note(ptr noundef nonnull %14, i32 noundef 4, ptr noundef null) #25
  %166 = icmp eq ptr %165, null
  br i1 %166, label %182, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds %struct.rtx_def, ptr %165, i64 0, i32 1
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = load i32, ptr %169, align 8
  %171 = and i32 %170, 65535
  %172 = icmp eq i32 %171, 44
  br i1 %172, label %173, label %182

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.rtx_def, ptr %169, i64 0, i32 1
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  %176 = load ptr, ptr %16, align 8, !tbaa !16
  %177 = icmp eq ptr %175, %176
  br i1 %177, label %178, label %182

178:                                              ; preds = %173, %158
  %179 = icmp eq ptr %156, null
  %180 = select i1 %179, ptr %14, ptr %156
  %181 = select i1 %179, ptr null, ptr %14
  br label %184

182:                                              ; preds = %173, %167, %164, %155
  %183 = icmp eq ptr %156, null
  br i1 %183, label %587, label %184

184:                                              ; preds = %178, %182
  %185 = phi ptr [ %156, %182 ], [ %180, %178 ]
  %186 = phi ptr [ null, %182 ], [ %181, %178 ]
  %187 = load i32, ptr %185, align 8
  %188 = and i32 %187, 65535
  %189 = icmp eq i32 %188, 9
  br i1 %189, label %190, label %210

190:                                              ; preds = %184
  %191 = load i32, ptr %15, align 8
  %192 = and i32 %191, 16711680
  %193 = icmp eq i32 %192, 589824
  br i1 %193, label %194, label %210

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct.rtx_def, ptr %185, i64 1, i32 1, i32 0, i32 0, i64 2
  %196 = load ptr, ptr %195, align 8, !tbaa !16
  %197 = icmp eq ptr %196, null
  %198 = load ptr, ptr %16, align 8, !tbaa !16
  br i1 %197, label %201, label %199

199:                                              ; preds = %194
  %200 = icmp eq ptr %196, %198
  br i1 %200, label %202, label %210

201:                                              ; preds = %194
  store ptr %198, ptr %195, align 8, !tbaa !16
  br label %210

202:                                              ; preds = %199
  %203 = load i32, ptr %196, align 8
  %204 = and i32 %203, 65535
  %205 = icmp eq i32 %204, 12
  br i1 %205, label %206, label %210

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.rtx_def, ptr %196, i64 0, i32 1, i32 0, i32 2
  %208 = load i32, ptr %207, align 8, !tbaa !16
  %209 = add nsw i32 %208, -1
  store i32 %209, ptr %207, align 8, !tbaa !16
  br label %210

210:                                              ; preds = %201, %206, %202, %199, %190, %184
  %211 = icmp eq ptr %186, null
  br i1 %211, label %573, label %212

212:                                              ; preds = %210
  %213 = load i32, ptr %186, align 8
  %214 = and i32 %213, 65535
  %215 = icmp eq i32 %214, 9
  br i1 %215, label %216, label %578

216:                                              ; preds = %212
  %217 = load i32, ptr %15, align 8
  %218 = and i32 %217, 16711680
  %219 = icmp eq i32 %218, 589824
  br i1 %219, label %220, label %578

220:                                              ; preds = %216
  %221 = getelementptr inbounds %struct.rtx_def, ptr %186, i64 1, i32 1, i32 0, i32 0, i64 2
  %222 = load ptr, ptr %221, align 8, !tbaa !16
  %223 = icmp eq ptr %222, null
  %224 = load ptr, ptr %16, align 8, !tbaa !16
  br i1 %223, label %227, label %225

225:                                              ; preds = %220
  %226 = icmp eq ptr %222, %224
  br i1 %226, label %228, label %578

227:                                              ; preds = %220
  store ptr %224, ptr %221, align 8, !tbaa !16
  br label %573

228:                                              ; preds = %225
  %229 = load i32, ptr %222, align 8
  %230 = and i32 %229, 65535
  %231 = icmp eq i32 %230, 12
  br i1 %231, label %232, label %573

232:                                              ; preds = %228
  %233 = getelementptr inbounds %struct.rtx_def, ptr %222, i64 0, i32 1, i32 0, i32 2
  %234 = load i32, ptr %233, align 8, !tbaa !16
  %235 = add nsw i32 %234, -1
  store i32 %235, ptr %233, align 8, !tbaa !16
  br label %573

236:                                              ; preds = %13
  %237 = load ptr, ptr @i2mod, align 8
  %238 = icmp eq ptr %237, %1
  %239 = select i1 %9, i1 %238, i1 false
  br i1 %239, label %240, label %245

240:                                              ; preds = %236
  %241 = load ptr, ptr %16, align 8, !tbaa !16
  %242 = load ptr, ptr @i2mod_new_rhs, align 8, !tbaa !5
  %243 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %241, ptr noundef %242) #25
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %294, label %246

245:                                              ; preds = %236
  br i1 %9, label %246, label %254

246:                                              ; preds = %240, %245
  %247 = load i32, ptr %1, align 8
  %248 = and i32 %247, 65535
  %249 = icmp eq i32 %248, 10
  br i1 %249, label %250, label %254

250:                                              ; preds = %246
  %251 = load ptr, ptr %16, align 8, !tbaa !16
  %252 = tail call i32 @find_reg_fusage(ptr noundef nonnull %1, i32 noundef 24, ptr noundef %251) #25
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %443

254:                                              ; preds = %250, %246, %245
  %255 = load ptr, ptr %16, align 8, !tbaa !16
  %256 = load ptr, ptr %10, align 8, !tbaa !16
  %257 = tail call i32 @reg_referenced_p(ptr noundef %255, ptr noundef %256) #25
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %443

259:                                              ; preds = %254
  %260 = icmp eq ptr %14, null
  br i1 %260, label %278, label %261

261:                                              ; preds = %259, %269
  %262 = phi ptr [ %264, %269 ], [ %14, %259 ]
  %263 = getelementptr inbounds %struct.rtx_def, ptr %262, i64 0, i32 1, i32 0, i32 0, i64 2
  %264 = load ptr, ptr %263, align 8, !tbaa !16
  %265 = icmp eq ptr %264, null
  br i1 %265, label %270, label %266

266:                                              ; preds = %261
  %267 = load i32, ptr %264, align 8
  %268 = trunc i32 %267 to i16
  switch i16 %268, label %270 [
    i16 13, label %269
    i16 7, label %269
  ]

269:                                              ; preds = %266, %266
  br label %261

270:                                              ; preds = %261, %266
  %271 = icmp eq ptr %264, %2
  br i1 %271, label %272, label %278

272:                                              ; preds = %270
  %273 = load ptr, ptr %16, align 8, !tbaa !16
  %274 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 1
  %275 = load ptr, ptr %274, align 8, !tbaa !16
  %276 = tail call i32 @reg_referenced_p(ptr noundef %273, ptr noundef %275) #25
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %443

278:                                              ; preds = %272, %270, %259
  %279 = load ptr, ptr %16, align 8, !tbaa !16
  %280 = tail call i32 @rtx_equal_p(ptr noundef %279, ptr noundef %4) #25
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %290, label %282

282:                                              ; preds = %278
  %283 = load ptr, ptr @i2mod, align 8, !tbaa !5
  %284 = icmp eq ptr %283, null
  br i1 %284, label %587, label %285

285:                                              ; preds = %282
  %286 = load ptr, ptr %16, align 8, !tbaa !16
  %287 = load ptr, ptr @i2mod_old_rhs, align 8, !tbaa !5
  %288 = tail call i32 @reg_overlap_mentioned_p(ptr noundef %286, ptr noundef %287) #25
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %587, label %290

290:                                              ; preds = %285, %278
  %291 = load ptr, ptr %16, align 8, !tbaa !16
  %292 = tail call i32 @rtx_equal_p(ptr noundef %291, ptr noundef %5) #25
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %587

294:                                              ; preds = %240, %290
  %295 = phi ptr [ %1, %240 ], [ %2, %290 ]
  %296 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %297 = getelementptr inbounds %struct.basic_block_def, ptr %296, i64 0, i32 7
  br label %298

298:                                              ; preds = %438, %294
  %299 = phi ptr [ %304, %438 ], [ %295, %294 ]
  %300 = phi ptr [ %439, %438 ], [ %14, %294 ]
  br label %301

301:                                              ; preds = %298, %309
  %302 = phi ptr [ %304, %309 ], [ %299, %298 ]
  %303 = getelementptr inbounds %struct.rtx_def, ptr %302, i64 0, i32 1, i32 0, i32 0, i64 1
  %304 = load ptr, ptr %303, align 8, !tbaa !16
  %305 = load i32, ptr %304, align 8
  %306 = and i32 %305, 65535
  %307 = add nsw i32 %306, -11
  %308 = icmp ult i32 %307, -3
  br i1 %308, label %309, label %313

309:                                              ; preds = %301
  %310 = load ptr, ptr %297, align 8, !tbaa !16
  %311 = load ptr, ptr %310, align 8, !tbaa !35
  %312 = icmp eq ptr %304, %311
  br i1 %312, label %587, label %301, !llvm.loop !188

313:                                              ; preds = %301
  %314 = load ptr, ptr %16, align 8, !tbaa !16
  %315 = getelementptr i8, ptr %314, i64 8
  %316 = load i32, ptr %315, align 8, !tbaa !16
  %317 = icmp ugt i32 %316, 52
  br i1 %317, label %323, label %318

318:                                              ; preds = %313
  %319 = zext i32 %316 to i64
  %320 = getelementptr inbounds [53 x i8], ptr @global_regs, i64 0, i64 %319
  %321 = load i8, ptr %320, align 1, !tbaa !16
  %322 = icmp eq i8 %321, 0
  br i1 %322, label %323, label %382

323:                                              ; preds = %318, %313
  %324 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1
  %325 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 1
  %326 = load ptr, ptr %325, align 8, !tbaa !16
  %327 = tail call i32 @reg_set_p(ptr noundef nonnull %314, ptr noundef %326) #25
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %331

329:                                              ; preds = %323
  %330 = load ptr, ptr %16, align 8, !tbaa !16
  br label %382

331:                                              ; preds = %323
  %332 = load i32, ptr %304, align 8
  %333 = and i32 %332, 65535
  %334 = add nsw i32 %333, -7
  %335 = icmp ult i32 %334, 4
  br i1 %335, label %336, label %373

336:                                              ; preds = %331
  %337 = load ptr, ptr %325, align 8, !tbaa !16
  %338 = load i32, ptr %337, align 8
  %339 = and i32 %338, 65535
  %340 = icmp eq i32 %339, 23
  br i1 %340, label %344, label %341

341:                                              ; preds = %336
  %342 = tail call ptr @single_set_2(ptr noundef nonnull %304, ptr noundef nonnull %337) #25
  %343 = icmp eq ptr %342, null
  br i1 %343, label %373, label %344

344:                                              ; preds = %336, %341
  %345 = phi ptr [ %342, %341 ], [ %337, %336 ]
  br label %346

346:                                              ; preds = %352, %344
  %347 = phi ptr [ %345, %344 ], [ %349, %352 ]
  %348 = getelementptr inbounds %struct.rtx_def, ptr %347, i64 0, i32 1
  %349 = load ptr, ptr %348, align 8, !tbaa !16
  %350 = load i32, ptr %349, align 8
  %351 = trunc i32 %350 to i16
  switch i16 %351, label %353 [
    i16 40, label %352
    i16 39, label %352
    i16 120, label %352
  ]

352:                                              ; preds = %346, %346, %346
  br label %346, !llvm.loop !189

353:                                              ; preds = %346
  %354 = getelementptr inbounds %struct.rtx_def, ptr %345, i64 0, i32 1, i32 0, i32 0, i64 1
  %355 = load ptr, ptr %354, align 8, !tbaa !16
  %356 = tail call i32 @side_effects_p(ptr noundef %355) #25
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %373

358:                                              ; preds = %353
  %359 = load ptr, ptr %16, align 8, !tbaa !16
  %360 = tail call i32 @rtx_equal_p(ptr noundef %359, ptr noundef nonnull %349) #25
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %373, label %362

362:                                              ; preds = %358
  %363 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 1, i32 1, i32 0, i32 0, i64 1
  %364 = load ptr, ptr %363, align 8, !tbaa !16
  %365 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  store ptr %365, ptr %325, align 8, !tbaa !16
  store ptr null, ptr %363, align 8, !tbaa !16
  tail call fastcc void @distribute_notes(ptr noundef %364, ptr noundef nonnull %304, ptr noundef nonnull %304, ptr noundef null, ptr noundef null, ptr noundef null)
  %366 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %367 = load i32, ptr %324, align 8, !tbaa !16
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds ptr, ptr %366, i64 %368
  %370 = load ptr, ptr %369, align 8, !tbaa !5
  tail call fastcc void @distribute_links(ptr noundef %370)
  tail call void @set_insn_deleted(ptr noundef nonnull %304) #25
  %371 = icmp eq ptr %304, %300
  %372 = select i1 %371, ptr null, ptr %300
  br label %438

373:                                              ; preds = %331, %341, %353, %358
  %374 = load i32, ptr %15, align 8
  %375 = and i32 %374, -16711681
  %376 = or i32 %375, 393216
  store i32 %376, ptr %15, align 8
  %377 = load ptr, ptr %16, align 8, !tbaa !16
  %378 = getelementptr i8, ptr %377, i64 8
  %379 = load i32, ptr %378, align 8, !tbaa !16
  %380 = tail call ptr @find_regno_note(ptr noundef nonnull %304, i32 noundef 6, i32 noundef %379) #25
  %381 = icmp eq ptr %380, null
  br i1 %381, label %443, label %587

382:                                              ; preds = %329, %318
  %383 = phi ptr [ %330, %329 ], [ %314, %318 ]
  %384 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 1
  %385 = load ptr, ptr %384, align 8, !tbaa !16
  %386 = tail call i32 @reg_referenced_p(ptr noundef %383, ptr noundef %385) #25
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %388, label %396

388:                                              ; preds = %382
  %389 = load i32, ptr %304, align 8
  %390 = and i32 %389, 65535
  %391 = icmp eq i32 %390, 10
  br i1 %391, label %392, label %438

392:                                              ; preds = %388
  %393 = load ptr, ptr %16, align 8, !tbaa !16
  %394 = tail call i32 @find_reg_fusage(ptr noundef nonnull %304, i32 noundef 24, ptr noundef %393) #25
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %438, label %396

396:                                              ; preds = %392, %382
  %397 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1
  %398 = icmp eq ptr %300, null
  br i1 %398, label %443, label %399

399:                                              ; preds = %396
  %400 = load ptr, ptr @df, align 8, !tbaa !5
  %401 = getelementptr inbounds %struct.df, ptr %400, i64 0, i32 10
  %402 = load ptr, ptr %401, align 8, !tbaa !37
  %403 = load i32, ptr %397, align 8, !tbaa !16
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds ptr, ptr %402, i64 %404
  %406 = load ptr, ptr %405, align 8, !tbaa !5
  %407 = getelementptr inbounds %struct.df_insn_info, ptr %406, i64 0, i32 5
  %408 = load i32, ptr %407, align 8, !tbaa !54
  %409 = getelementptr inbounds %struct.rtx_def, ptr %300, i64 0, i32 1
  %410 = load i32, ptr %409, align 8, !tbaa !16
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds ptr, ptr %402, i64 %411
  %413 = load ptr, ptr %412, align 8, !tbaa !5
  %414 = getelementptr inbounds %struct.df_insn_info, ptr %413, i64 0, i32 5
  %415 = load i32, ptr %414, align 8, !tbaa !54
  %416 = icmp sgt i32 %408, %415
  %417 = and i1 %9, %416
  br i1 %417, label %418, label %443

418:                                              ; preds = %399
  %419 = load i32, ptr %11, align 8, !tbaa !16
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds ptr, ptr %402, i64 %420
  %422 = load ptr, ptr %421, align 8, !tbaa !5
  %423 = getelementptr inbounds %struct.df_insn_info, ptr %422, i64 0, i32 5
  %424 = load i32, ptr %423, align 8, !tbaa !54
  %425 = icmp sgt i32 %424, %415
  br i1 %425, label %426, label %443

426:                                              ; preds = %418
  %427 = load ptr, ptr %16, align 8, !tbaa !16
  %428 = getelementptr inbounds %struct.rtx_def, ptr %300, i64 1
  %429 = load ptr, ptr %428, align 8, !tbaa !16
  %430 = tail call i32 @reg_referenced_p(ptr noundef %427, ptr noundef %429) #25
  %431 = icmp eq i32 %430, 0
  br i1 %431, label %443, label %432

432:                                              ; preds = %426
  %433 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %434 = load i32, ptr %397, align 8, !tbaa !16
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds ptr, ptr %433, i64 %435
  %437 = load ptr, ptr %436, align 8, !tbaa !5
  store ptr null, ptr %436, align 8, !tbaa !5
  tail call fastcc void @distribute_links(ptr noundef %437)
  br label %443

438:                                              ; preds = %362, %388, %392
  %439 = phi ptr [ %300, %392 ], [ %300, %388 ], [ %372, %362 ]
  %440 = load ptr, ptr %297, align 8, !tbaa !16
  %441 = load ptr, ptr %440, align 8, !tbaa !35
  %442 = icmp eq ptr %304, %441
  br i1 %442, label %587, label %298, !llvm.loop !188

443:                                              ; preds = %373, %272, %254, %250, %396, %399, %418, %426, %432
  %444 = phi ptr [ null, %396 ], [ %300, %399 ], [ %300, %418 ], [ %300, %426 ], [ %300, %432 ], [ %14, %250 ], [ %14, %254 ], [ %14, %272 ], [ %300, %373 ]
  %445 = phi ptr [ %304, %396 ], [ %304, %399 ], [ %304, %418 ], [ %304, %426 ], [ %304, %432 ], [ %1, %250 ], [ %2, %254 ], [ %14, %272 ], [ %304, %373 ]
  %446 = load i32, ptr %15, align 8
  %447 = and i32 %446, 16711680
  %448 = icmp eq i32 %447, 65536
  br i1 %448, label %449, label %573

449:                                              ; preds = %443
  %450 = load ptr, ptr %16, align 8, !tbaa !16
  %451 = getelementptr i8, ptr %450, i64 8
  %452 = load i32, ptr %451, align 8, !tbaa !16
  %453 = load ptr, ptr @reg_stat, align 8
  %454 = zext i32 %452 to i64
  %455 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %453, i64 0, i32 2, i64 %454
  %456 = tail call i32 @dead_or_set_p(ptr noundef nonnull %445, ptr noundef %450) #25
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %464

458:                                              ; preds = %449
  %459 = load ptr, ptr %16, align 8, !tbaa !16
  %460 = getelementptr inbounds %struct.rtx_def, ptr %445, i64 1
  %461 = load ptr, ptr %460, align 8, !tbaa !16
  %462 = tail call fastcc i32 @reg_bitfield_target_p(ptr noundef %459, ptr noundef %461), !range !103
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %468, label %464

464:                                              ; preds = %458, %449
  %465 = load ptr, ptr %455, align 8, !tbaa !88
  %466 = icmp eq ptr %465, %445
  br i1 %466, label %587, label %467

467:                                              ; preds = %464
  store ptr null, ptr %455, align 8, !tbaa !88
  br label %587

468:                                              ; preds = %458
  store ptr %445, ptr %455, align 8, !tbaa !88
  %469 = icmp ult i32 %452, 53
  br i1 %469, label %470, label %573

470:                                              ; preds = %468
  %471 = load ptr, ptr %16, align 8, !tbaa !16
  %472 = load i32, ptr %471, align 8
  %473 = lshr i32 %472, 16
  %474 = and i32 %473, 255
  %475 = zext i32 %474 to i64
  %476 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %454, i64 %475
  %477 = load i8, ptr %476, align 1, !tbaa !16
  %478 = icmp ugt i8 %477, 1
  br i1 %478, label %479, label %573

479:                                              ; preds = %470
  %480 = getelementptr i8, ptr %471, i64 8
  %481 = load i32, ptr %480, align 8, !tbaa !16
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %482, i64 %475
  %484 = load i8, ptr %483, align 1, !tbaa !16
  %485 = zext i8 %484 to i32
  %486 = add i32 %481, %485
  %487 = icmp ult i32 %452, %486
  br i1 %487, label %488, label %573

488:                                              ; preds = %479, %502
  %489 = phi i32 [ %491, %502 ], [ %452, %479 ]
  %490 = phi i32 [ %503, %502 ], [ 1, %479 ]
  %491 = add nuw i32 %489, 1
  %492 = load ptr, ptr %460, align 8, !tbaa !16
  %493 = tail call i32 @refers_to_regno_p(i32 noundef %489, i32 noundef %491, ptr noundef %492, ptr noundef null) #25
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %495, label %498

495:                                              ; preds = %488
  %496 = tail call i32 @find_regno_fusage(ptr noundef nonnull %445, i32 noundef 24, i32 noundef %489) #25
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %501, label %498

498:                                              ; preds = %495, %488
  %499 = tail call i32 @dead_or_set_regno_p(ptr noundef nonnull %445, i32 noundef %489) #25
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %502, label %501

501:                                              ; preds = %498, %495
  br label %502

502:                                              ; preds = %498, %501
  %503 = phi i32 [ 0, %501 ], [ %490, %498 ]
  %504 = icmp eq i32 %491, %486
  br i1 %504, label %505, label %488, !llvm.loop !190

505:                                              ; preds = %502
  %506 = icmp eq i32 %503, 0
  br i1 %506, label %507, label %573

507:                                              ; preds = %505
  br i1 %487, label %508, label %587

508:                                              ; preds = %507, %554
  %509 = phi i32 [ %561, %554 ], [ %452, %507 ]
  %510 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %511 = zext i32 %509 to i64
  %512 = getelementptr inbounds ptr, ptr %510, i64 %511
  %513 = load ptr, ptr %512, align 8, !tbaa !5
  %514 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %515 = tail call i32 @dead_or_set_p(ptr noundef nonnull %445, ptr noundef %513) #25
  %516 = icmp eq i32 %515, 0
  %517 = load ptr, ptr %460, align 8, !tbaa !16
  br i1 %516, label %518, label %523

518:                                              ; preds = %508
  %519 = tail call fastcc i32 @reg_bitfield_target_p(ptr noundef %513, ptr noundef %517), !range !103
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %521, label %523

521:                                              ; preds = %518
  %522 = tail call ptr @alloc_reg_note(i32 noundef 1, ptr noundef %513, ptr noundef null) #25
  tail call fastcc void @distribute_notes(ptr noundef %522, ptr noundef nonnull %445, ptr noundef nonnull %445, ptr noundef null, ptr noundef null, ptr noundef null)
  br label %554

523:                                              ; preds = %518, %508
  %524 = add nuw i32 %509, 1
  %525 = tail call i32 @refers_to_regno_p(i32 noundef %509, i32 noundef %524, ptr noundef %517, ptr noundef null) #25
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %554

527:                                              ; preds = %523
  %528 = tail call i32 @find_regno_fusage(ptr noundef nonnull %445, i32 noundef 24, i32 noundef %509) #25
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %554

530:                                              ; preds = %527
  %531 = getelementptr inbounds %struct.basic_block_def, ptr %514, i64 0, i32 7
  br label %532

532:                                              ; preds = %552, %530
  %533 = phi ptr [ %445, %530 ], [ %535, %552 ]
  %534 = getelementptr inbounds %struct.rtx_def, ptr %533, i64 0, i32 1, i32 0, i32 0, i64 1
  %535 = load ptr, ptr %534, align 8, !tbaa !16
  %536 = load i32, ptr %535, align 8
  %537 = and i32 %536, 65535
  %538 = add nsw i32 %537, -11
  %539 = icmp ult i32 %538, -3
  br i1 %539, label %540, label %544

540:                                              ; preds = %532
  %541 = load ptr, ptr %531, align 8, !tbaa !16
  %542 = load ptr, ptr %541, align 8, !tbaa !35
  %543 = icmp eq ptr %535, %542
  br i1 %543, label %554, label %552

544:                                              ; preds = %532
  %545 = tail call i32 @dead_or_set_p(ptr noundef nonnull %535, ptr noundef %513) #25
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %553

547:                                              ; preds = %544
  %548 = getelementptr inbounds %struct.rtx_def, ptr %535, i64 1
  %549 = load ptr, ptr %548, align 8, !tbaa !16
  %550 = tail call fastcc i32 @reg_bitfield_target_p(ptr noundef %513, ptr noundef %549), !range !103
  %551 = icmp eq i32 %550, 0
  br i1 %551, label %552, label %553

552:                                              ; preds = %547, %540
  br label %532

553:                                              ; preds = %547, %544
  tail call void @add_reg_note(ptr noundef nonnull %535, i32 noundef 6, ptr noundef %513) #25
  br label %554

554:                                              ; preds = %540, %523, %527, %553, %521
  %555 = getelementptr inbounds [53 x i32], ptr @reg_raw_mode, i64 0, i64 %511
  %556 = load i32, ptr %555, align 4, !tbaa !16
  %557 = zext i32 %556 to i64
  %558 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %511, i64 %557
  %559 = load i8, ptr %558, align 1, !tbaa !16
  %560 = zext i8 %559 to i32
  %561 = add i32 %509, %560
  %562 = icmp ult i32 %561, %486
  br i1 %562, label %508, label %587, !llvm.loop !191

563:                                              ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 13204, ptr noundef nonnull @.str.5) #25
  br label %587

564:                                              ; preds = %59, %61, %26, %28
  %565 = phi i32 [ 12749, %28 ], [ 12749, %26 ], [ 12781, %61 ], [ 12781, %59 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef %565, ptr noundef nonnull @.str.5) #25
  br label %566

566:                                              ; preds = %564, %107, %110, %13, %13, %46, %117, %124
  %567 = phi ptr [ %122, %124 ], [ %122, %117 ], [ %50, %46 ], [ %2, %13 ], [ %2, %13 ], [ %1, %110 ], [ %1, %107 ], [ %14, %564 ]
  %568 = phi ptr [ %14, %124 ], [ null, %117 ], [ %51, %46 ], [ %14, %13 ], [ %14, %13 ], [ %14, %110 ], [ %14, %107 ], [ %14, %564 ]
  %569 = icmp eq ptr %567, null
  br i1 %569, label %587, label %570

570:                                              ; preds = %566
  %571 = getelementptr inbounds %struct.rtx_def, ptr %567, i64 1, i32 1, i32 0, i32 0, i64 1
  %572 = load ptr, ptr %571, align 8, !tbaa !16
  store ptr %572, ptr %17, align 8, !tbaa !16
  store ptr %15, ptr %571, align 8, !tbaa !16
  br label %587

573:                                              ; preds = %479, %468, %470, %505, %227, %232, %228, %61, %55, %52, %38, %32, %28, %22, %102, %210, %443, %81, %76
  %574 = phi ptr [ %445, %443 ], [ %185, %210 ], [ %2, %102 ], [ %2, %22 ], [ %14, %28 ], [ %2, %32 ], [ %14, %38 ], [ %14, %52 ], [ %2, %55 ], [ %14, %61 ], [ %185, %228 ], [ %185, %232 ], [ %185, %227 ], [ %445, %470 ], [ %445, %468 ], [ %445, %505 ], [ %1, %81 ], [ %1, %76 ], [ %445, %479 ]
  %575 = phi ptr [ %444, %443 ], [ %14, %210 ], [ %14, %102 ], [ %14, %22 ], [ %14, %28 ], [ %14, %32 ], [ %14, %38 ], [ %14, %52 ], [ %14, %55 ], [ %14, %61 ], [ %14, %228 ], [ %14, %232 ], [ %14, %227 ], [ %444, %470 ], [ %444, %468 ], [ %444, %505 ], [ %14, %81 ], [ %14, %76 ], [ %444, %479 ]
  %576 = getelementptr inbounds %struct.rtx_def, ptr %574, i64 1, i32 1, i32 0, i32 0, i64 1
  %577 = load ptr, ptr %576, align 8, !tbaa !16
  store ptr %577, ptr %17, align 8, !tbaa !16
  store ptr %15, ptr %576, align 8, !tbaa !16
  br label %587

578:                                              ; preds = %212, %216, %225
  %579 = getelementptr inbounds %struct.rtx_def, ptr %185, i64 1, i32 1, i32 0, i32 0, i64 1
  %580 = load ptr, ptr %579, align 8, !tbaa !16
  store ptr %580, ptr %17, align 8, !tbaa !16
  store ptr %15, ptr %579, align 8, !tbaa !16
  br label %581

581:                                              ; preds = %578, %130
  %582 = phi ptr [ %186, %578 ], [ %14, %130 ]
  %583 = load i32, ptr %15, align 8
  %584 = lshr i32 %583, 16
  %585 = and i32 %584, 255
  %586 = load ptr, ptr %16, align 8, !tbaa !16
  tail call void @add_reg_note(ptr noundef nonnull %582, i32 noundef %585, ptr noundef %586) #25
  br label %587

587:                                              ; preds = %309, %438, %554, %507, %52, %464, %467, %373, %182, %13, %13, %84, %99, %94, %81, %76, %70, %106, %110, %282, %285, %290, %563, %566, %573, %570, %581, %130
  %588 = phi ptr [ %14, %581 ], [ %14, %130 ], [ %568, %570 ], [ %575, %573 ], [ %568, %566 ], [ %14, %13 ], [ %14, %13 ], [ %14, %84 ], [ %14, %99 ], [ %14, %94 ], [ %14, %81 ], [ %14, %76 ], [ %14, %70 ], [ %14, %106 ], [ %14, %110 ], [ %14, %282 ], [ %14, %285 ], [ %14, %290 ], [ %14, %563 ], [ %14, %182 ], [ %300, %373 ], [ %444, %467 ], [ %444, %464 ], [ %14, %52 ], [ %444, %507 ], [ %444, %554 ], [ %300, %309 ], [ %439, %438 ]
  %589 = icmp eq ptr %18, null
  br i1 %589, label %590, label %13, !llvm.loop !192

590:                                              ; preds = %587, %6
  ret void
}

declare void @reset_used_flags(ptr noundef) local_unnamed_addr #3

declare ptr @copy_rtx_if_shared(ptr noundef) local_unnamed_addr #3

declare void @set_insn_deleted(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @move_deaths(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #9 {
  %6 = alloca ptr, align 8
  br label %7

7:                                                ; preds = %222, %5
  %8 = phi ptr [ %0, %5 ], [ %223, %222 ]
  %9 = load i32, ptr %8, align 8
  %10 = trunc i32 %9 to i16
  switch i16 %10, label %232 [
    i16 37, label %11
    i16 23, label %195
    i16 25, label %268
  ]

11:                                               ; preds = %7
  %12 = getelementptr i8, ptr %8, i64 8
  %13 = load i32, ptr %12, align 8, !tbaa !16
  %14 = load ptr, ptr @reg_stat, align 8
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds %struct.VEC_reg_stat_type_base, ptr %14, i64 0, i32 2, i64 %15
  %17 = load ptr, ptr %16, align 8, !tbaa !88
  %18 = icmp eq ptr %1, null
  br i1 %18, label %27, label %19

19:                                               ; preds = %11
  %20 = tail call i32 @reg_set_p(ptr noundef nonnull %8, ptr noundef nonnull %1) #25
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @reg_referenced_p(ptr noundef nonnull %8, ptr noundef nonnull %1) #25
  %24 = icmp eq i32 %23, 0
  %25 = icmp eq ptr %17, null
  %26 = select i1 %24, i1 true, i1 %25
  br i1 %26, label %268, label %29

27:                                               ; preds = %19, %11
  %28 = icmp eq ptr %17, null
  br i1 %28, label %268, label %29

29:                                               ; preds = %22, %27
  %30 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !16
  %32 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %33 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1, i32 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = icmp eq ptr %31, %34
  br i1 %35, label %36, label %268

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %38 = load ptr, ptr @df, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.df, ptr %38, i64 0, i32 10
  %40 = load ptr, ptr %39, align 8, !tbaa !37
  %41 = load i32, ptr %37, align 8, !tbaa !16
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds ptr, ptr %40, i64 %42
  %44 = load ptr, ptr %43, align 8, !tbaa !5
  %45 = getelementptr inbounds %struct.df_insn_info, ptr %44, i64 0, i32 5
  %46 = load i32, ptr %45, align 8, !tbaa !54
  %47 = icmp slt i32 %46, %2
  br i1 %47, label %268, label %48

48:                                               ; preds = %36
  %49 = load i32, ptr %32, align 8, !tbaa !16
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds ptr, ptr %40, i64 %50
  %52 = load ptr, ptr %51, align 8, !tbaa !5
  %53 = getelementptr inbounds %struct.df_insn_info, ptr %52, i64 0, i32 5
  %54 = load i32, ptr %53, align 8, !tbaa !54
  %55 = icmp slt i32 %46, %54
  br i1 %55, label %56, label %268

56:                                               ; preds = %48
  %57 = tail call ptr @remove_death(i32 noundef %13, ptr noundef nonnull %17)
  %58 = icmp ne ptr %57, null
  %59 = icmp ult i32 %13, 53
  %60 = and i1 %59, %58
  br i1 %60, label %61, label %107

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = load i32, ptr %63, align 8
  %65 = lshr i32 %64, 16
  %66 = and i32 %65, 255
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %67
  %69 = load i8, ptr %68, align 1, !tbaa !16
  %70 = load i32, ptr %8, align 8
  %71 = lshr i32 %70, 16
  %72 = and i32 %71, 255
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !16
  %76 = icmp ugt i8 %69, %75
  br i1 %76, label %77, label %120

77:                                               ; preds = %61
  %78 = getelementptr i8, ptr %63, i64 8
  %79 = load i32, ptr %78, align 8, !tbaa !16
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %80, i64 %67
  %82 = load i8, ptr %81, align 1, !tbaa !16
  %83 = zext i8 %82 to i32
  %84 = add i32 %79, %83
  %85 = icmp ult i32 %79, %84
  br i1 %85, label %86, label %176

86:                                               ; preds = %77
  %87 = load i32, ptr %12, align 8, !tbaa !16
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %88, i64 %73
  %90 = load i8, ptr %89, align 1, !tbaa !16
  %91 = zext i8 %90 to i32
  %92 = add i32 %87, %91
  %93 = zext i32 %92 to i64
  br label %94

94:                                               ; preds = %86, %103
  %95 = phi i64 [ %80, %86 ], [ %104, %103 ]
  %96 = icmp uge i64 %95, %15
  %97 = icmp ult i64 %95, %93
  %98 = select i1 %96, i1 %97, i1 false
  br i1 %98, label %103, label %99

99:                                               ; preds = %94
  %100 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %101 = getelementptr inbounds ptr, ptr %100, i64 %95
  %102 = load ptr, ptr %101, align 8, !tbaa !5
  tail call void @add_reg_note(ptr noundef nonnull %17, i32 noundef 1, ptr noundef %102) #25
  br label %103

103:                                              ; preds = %94, %99
  %104 = add nuw nsw i64 %95, 1
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %84, %105
  br i1 %106, label %175, label %94, !llvm.loop !193

107:                                              ; preds = %56
  %108 = icmp eq ptr %57, null
  br i1 %108, label %131, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !16
  %112 = load i32, ptr %111, align 8
  %113 = load i32, ptr %8, align 8
  %114 = lshr i32 %112, 16
  %115 = and i32 %114, 255
  %116 = zext i32 %115 to i64
  %117 = lshr i32 %113, 16
  %118 = and i32 %117, 255
  %119 = zext i32 %118 to i64
  br label %120

120:                                              ; preds = %109, %61
  %121 = phi i64 [ %119, %109 ], [ %73, %61 ]
  %122 = phi i64 [ %116, %109 ], [ %67, %61 ]
  %123 = phi i32 [ %113, %109 ], [ %70, %61 ]
  %124 = phi i32 [ %112, %109 ], [ %64, %61 ]
  %125 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %122
  %126 = load i8, ptr %125, align 1, !tbaa !16
  %127 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %121
  %128 = load i8, ptr %127, align 1, !tbaa !16
  %129 = icmp ult i8 %126, %128
  %130 = and i1 %59, %129
  br i1 %130, label %137, label %181

131:                                              ; preds = %107
  br i1 %59, label %132, label %190

132:                                              ; preds = %131
  %133 = load i32, ptr %8, align 8
  %134 = lshr i32 %133, 16
  %135 = and i32 %134, 255
  %136 = zext i32 %135 to i64
  br label %137

137:                                              ; preds = %132, %120
  %138 = phi i64 [ %136, %132 ], [ %121, %120 ]
  %139 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %138
  %140 = load i8, ptr %139, align 1, !tbaa !16
  %141 = icmp ugt i8 %140, 1
  br i1 %141, label %142, label %175

142:                                              ; preds = %137
  %143 = load i32, ptr %12, align 8, !tbaa !16
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %144, i64 %138
  %146 = load i8, ptr %145, align 1, !tbaa !16
  %147 = zext i8 %146 to i32
  %148 = add i32 %143, %147
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #25
  store ptr null, ptr %6, align 8, !tbaa !5
  br i1 %58, label %149, label %159

149:                                              ; preds = %142
  %150 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !16
  %152 = load i32, ptr %151, align 8
  %153 = lshr i32 %152, 16
  %154 = and i32 %153, 255
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %155
  %157 = load i8, ptr %156, align 1, !tbaa !16
  %158 = zext i8 %157 to i32
  br label %159

159:                                              ; preds = %142, %149
  %160 = phi i32 [ %158, %149 ], [ 1, %142 ]
  %161 = add nuw nsw i32 %160, %13
  %162 = icmp ult i32 %161, %148
  br i1 %162, label %163, label %174

163:                                              ; preds = %159
  %164 = zext i32 %160 to i64
  %165 = add nuw nsw i64 %164, %15
  %166 = zext i32 %148 to i64
  br label %167

167:                                              ; preds = %163, %167
  %168 = phi i64 [ %165, %163 ], [ %172, %167 ]
  %169 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %170 = getelementptr inbounds ptr, ptr %169, i64 %168
  %171 = load ptr, ptr %170, align 8, !tbaa !5
  call fastcc void @move_deaths(ptr noundef %171, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef nonnull %6)
  %172 = add nuw nsw i64 %168, 1
  %173 = icmp ult i64 %172, %166
  br i1 %173, label %167, label %174, !llvm.loop !194

174:                                              ; preds = %167, %159
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  br label %175

175:                                              ; preds = %103, %137, %174
  br i1 %58, label %176, label %190

176:                                              ; preds = %77, %175
  %177 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %178 = load ptr, ptr %177, align 8, !tbaa !16
  %179 = load i32, ptr %178, align 8
  %180 = load i32, ptr %8, align 8
  br label %181

181:                                              ; preds = %176, %120
  %182 = phi i32 [ %180, %176 ], [ %123, %120 ]
  %183 = phi i32 [ %179, %176 ], [ %124, %120 ]
  %184 = xor i32 %182, %183
  %185 = and i32 %184, 16711680
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %190

187:                                              ; preds = %181
  %188 = load ptr, ptr %4, align 8, !tbaa !5
  %189 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %188, ptr %189, align 8, !tbaa !16
  br label %193

190:                                              ; preds = %131, %181, %175
  %191 = load ptr, ptr %4, align 8, !tbaa !5
  %192 = call ptr @alloc_reg_note(i32 noundef 1, ptr noundef nonnull %8, ptr noundef %191) #25
  br label %193

193:                                              ; preds = %190, %187
  %194 = phi ptr [ %192, %190 ], [ %57, %187 ]
  store ptr %194, ptr %4, align 8, !tbaa !5
  br label %268

195:                                              ; preds = %7
  %196 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !16
  %198 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1, i32 0, i32 0, i64 1
  %199 = load ptr, ptr %198, align 8, !tbaa !16
  tail call fastcc void @move_deaths(ptr noundef %199, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  %200 = load i32, ptr %197, align 8
  %201 = trunc i32 %200 to i16
  switch i16 %201, label %224 [
    i16 120, label %222
    i16 40, label %222
    i16 39, label %202
  ]

202:                                              ; preds = %195
  %203 = lshr i32 %200, 16
  %204 = and i32 %203, 255
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %205
  %207 = load i8, ptr %206, align 1, !tbaa !16
  %208 = zext i8 %207 to i32
  %209 = add nuw nsw i32 %208, 3
  %210 = getelementptr inbounds %struct.rtx_def, ptr %197, i64 0, i32 1
  %211 = load ptr, ptr %210, align 8, !tbaa !16
  %212 = load i32, ptr %211, align 8
  %213 = lshr i32 %212, 16
  %214 = and i32 %213, 255
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %215
  %217 = load i8, ptr %216, align 1, !tbaa !16
  %218 = zext i8 %217 to i32
  %219 = add nuw nsw i32 %218, 3
  %220 = xor i32 %219, %209
  %221 = icmp ult i32 %220, 4
  br i1 %221, label %222, label %224

222:                                              ; preds = %202, %195, %195, %229
  %223 = phi ptr [ %231, %229 ], [ %197, %195 ], [ %197, %195 ], [ %197, %202 ]
  br label %7

224:                                              ; preds = %202, %195
  %225 = phi i32 [ %200, %195 ], [ %212, %202 ]
  %226 = phi ptr [ %197, %195 ], [ %211, %202 ]
  %227 = and i32 %225, 65535
  %228 = icmp eq i32 %227, 43
  br i1 %228, label %229, label %268

229:                                              ; preds = %224
  %230 = getelementptr inbounds %struct.rtx_def, ptr %226, i64 0, i32 1
  %231 = load ptr, ptr %230, align 8, !tbaa !16
  br label %222

232:                                              ; preds = %7
  %233 = and i32 %9, 65535
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %234
  %236 = load i8, ptr %235, align 1, !tbaa !16
  %237 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %234
  %238 = load ptr, ptr %237, align 8, !tbaa !5
  %239 = icmp eq i8 %236, 0
  br i1 %239, label %268, label %240

240:                                              ; preds = %232
  %241 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %242 = zext i8 %236 to i64
  br label %243

243:                                              ; preds = %240, %265
  %244 = phi i64 [ 0, %240 ], [ %266, %265 ]
  %245 = getelementptr inbounds i8, ptr %238, i64 %244
  %246 = load i8, ptr %245, align 1, !tbaa !16
  switch i8 %246, label %265 [
    i8 69, label %247
    i8 101, label %262
  ]

247:                                              ; preds = %243
  %248 = getelementptr inbounds [1 x %union.rtunion_def], ptr %241, i64 0, i64 %244
  %249 = load ptr, ptr %248, align 8, !tbaa !16
  %250 = load i32, ptr %249, align 8, !tbaa !99
  %251 = icmp sgt i32 %250, 0
  br i1 %251, label %252, label %265

252:                                              ; preds = %247
  %253 = zext i32 %250 to i64
  br label %254

254:                                              ; preds = %252, %254
  %255 = phi i64 [ %253, %252 ], [ %256, %254 ]
  %256 = add nsw i64 %255, -1
  %257 = load ptr, ptr %248, align 8, !tbaa !16
  %258 = and i64 %256, 4294967295
  %259 = getelementptr inbounds %struct.rtvec_def, ptr %257, i64 0, i32 1, i64 %258
  %260 = load ptr, ptr %259, align 8, !tbaa !5
  tail call fastcc void @move_deaths(ptr noundef %260, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  %261 = icmp ugt i64 %255, 1
  br i1 %261, label %254, label %265, !llvm.loop !195

262:                                              ; preds = %243
  %263 = getelementptr inbounds [1 x %union.rtunion_def], ptr %241, i64 0, i64 %244
  %264 = load ptr, ptr %263, align 8, !tbaa !16
  tail call fastcc void @move_deaths(ptr noundef %264, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  br label %265

265:                                              ; preds = %254, %247, %243, %262
  %266 = add nuw nsw i64 %244, 1
  %267 = icmp eq i64 %266, %242
  br i1 %267, label %268, label %243, !llvm.loop !196

268:                                              ; preds = %7, %224, %265, %232, %22, %193, %48, %36, %29, %27
  ret void
}

declare ptr @alloc_reg_note(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @distribute_links(ptr noundef %0) unnamed_addr #9 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %134, label %3

3:                                                ; preds = %1, %132
  %4 = phi ptr [ %7, %132 ], [ %0, %1 ]
  %5 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1
  %6 = getelementptr inbounds %struct.rtx_def, ptr %4, i64 0, i32 1, i32 0, i32 0, i64 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = load ptr, ptr %5, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = add nsw i32 %10, -7
  %12 = icmp ult i32 %11, 4
  br i1 %12, label %13, label %132

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = load i32, ptr %15, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 23
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = tail call ptr @single_set_2(ptr noundef nonnull %8, ptr noundef nonnull %15) #25
  %21 = icmp eq ptr %20, null
  br i1 %21, label %132, label %22

22:                                               ; preds = %13, %19
  %23 = phi ptr [ %15, %13 ], [ %20, %19 ]
  br label %24

24:                                               ; preds = %30, %22
  %25 = phi ptr [ %23, %22 ], [ %27, %30 ]
  %26 = getelementptr inbounds %struct.rtx_def, ptr %25, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = load i32, ptr %27, align 8
  %29 = trunc i32 %28 to i16
  switch i16 %29, label %31 [
    i16 39, label %30
    i16 120, label %30
    i16 40, label %30
  ]

30:                                               ; preds = %24, %24, %24
  br label %24, !llvm.loop !197

31:                                               ; preds = %24
  %32 = load ptr, ptr %5, align 8, !tbaa !16
  %33 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1, i32 0, i32 0, i64 2
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = icmp eq ptr %34, null
  br i1 %35, label %132, label %36

36:                                               ; preds = %31, %84
  %37 = phi ptr [ %86, %84 ], [ %34, %31 ]
  %38 = load ptr, ptr @this_basic_block, align 8, !tbaa !5
  %39 = getelementptr inbounds %struct.basic_block_def, ptr %38, i64 0, i32 6
  %40 = load ptr, ptr %39, align 8, !tbaa !32
  %41 = load ptr, ptr @cfun, align 8, !tbaa !5
  %42 = getelementptr inbounds %struct.function, ptr %41, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !28
  %44 = getelementptr inbounds %struct.control_flow_graph, ptr %43, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !34
  %46 = icmp eq ptr %40, %45
  br i1 %46, label %52, label %47

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.basic_block_def, ptr %40, i64 0, i32 7
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = load ptr, ptr %49, align 8, !tbaa !35
  %51 = icmp eq ptr %50, %37
  br i1 %51, label %132, label %52

52:                                               ; preds = %36, %47
  %53 = load i32, ptr %37, align 8
  %54 = trunc i32 %53 to i16
  switch i16 %54, label %67 [
    i16 7, label %84
    i16 8, label %55
    i16 9, label %55
    i16 10, label %55
  ]

55:                                               ; preds = %52, %52, %52
  %56 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %27, ptr noundef %57) #25
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %55
  %61 = load i32, ptr %37, align 8
  br label %67

62:                                               ; preds = %55
  %63 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = tail call i32 @reg_referenced_p(ptr noundef nonnull %27, ptr noundef %64) #25
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %132, label %88

67:                                               ; preds = %60, %52
  %68 = phi i32 [ %61, %60 ], [ %53, %52 ]
  %69 = and i32 %68, 65535
  %70 = icmp eq i32 %69, 10
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = tail call i32 @find_reg_fusage(ptr noundef nonnull %37, i32 noundef 24, ptr noundef nonnull %27) #25
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %88

74:                                               ; preds = %71
  %75 = load i32, ptr %37, align 8
  %76 = and i32 %75, 65535
  br label %77

77:                                               ; preds = %74, %67
  %78 = phi i32 [ %76, %74 ], [ %69, %67 ]
  %79 = add nsw i32 %78, -7
  %80 = icmp ult i32 %79, 4
  br i1 %80, label %81, label %84

81:                                               ; preds = %77
  %82 = tail call i32 @reg_set_p(ptr noundef nonnull %27, ptr noundef nonnull %37) #25
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %132

84:                                               ; preds = %77, %52, %81
  %85 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1, i32 0, i32 0, i64 2
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = icmp eq ptr %86, null
  br i1 %87, label %132, label %36, !llvm.loop !198

88:                                               ; preds = %71, %62
  %89 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %90 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1
  %91 = load i32, ptr %90, align 8, !tbaa !16
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds ptr, ptr %89, i64 %92
  %94 = load ptr, ptr %93, align 8, !tbaa !16
  %95 = icmp eq ptr %94, null
  br i1 %95, label %107, label %96

96:                                               ; preds = %88
  %97 = load ptr, ptr %5, align 8, !tbaa !16
  br label %102

98:                                               ; preds = %102
  %99 = getelementptr inbounds %struct.rtx_def, ptr %103, i64 0, i32 1, i32 0, i32 0, i64 1
  %100 = load ptr, ptr %99, align 8, !tbaa !16
  %101 = icmp eq ptr %100, null
  br i1 %101, label %107, label %102, !llvm.loop !199

102:                                              ; preds = %96, %98
  %103 = phi ptr [ %94, %96 ], [ %100, %98 ]
  %104 = getelementptr inbounds %struct.rtx_def, ptr %103, i64 0, i32 1
  %105 = load ptr, ptr %104, align 8, !tbaa !16
  %106 = icmp eq ptr %105, %97
  br i1 %106, label %132, label %98

107:                                              ; preds = %98, %88
  store ptr %94, ptr %6, align 8, !tbaa !16
  %108 = load i32, ptr %90, align 8, !tbaa !16
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds ptr, ptr %89, i64 %109
  store ptr %4, ptr %110, align 8, !tbaa !5
  %111 = load ptr, ptr @added_links_insn, align 8, !tbaa !5
  %112 = icmp eq ptr %111, null
  br i1 %112, label %131, label %113

113:                                              ; preds = %107
  %114 = load ptr, ptr @df, align 8, !tbaa !5
  %115 = getelementptr inbounds %struct.df, ptr %114, i64 0, i32 10
  %116 = load ptr, ptr %115, align 8, !tbaa !37
  %117 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %118 = load i32, ptr %117, align 8, !tbaa !16
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds ptr, ptr %116, i64 %119
  %121 = load ptr, ptr %120, align 8, !tbaa !5
  %122 = getelementptr inbounds %struct.df_insn_info, ptr %121, i64 0, i32 5
  %123 = load i32, ptr %122, align 8, !tbaa !54
  %124 = load i32, ptr %90, align 8, !tbaa !16
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds ptr, ptr %116, i64 %125
  %127 = load ptr, ptr %126, align 8, !tbaa !5
  %128 = getelementptr inbounds %struct.df_insn_info, ptr %127, i64 0, i32 5
  %129 = load i32, ptr %128, align 8, !tbaa !54
  %130 = icmp sgt i32 %123, %129
  br i1 %130, label %131, label %132

131:                                              ; preds = %113, %107
  store ptr %37, ptr @added_links_insn, align 8, !tbaa !5
  br label %132

132:                                              ; preds = %81, %47, %84, %102, %31, %3, %62, %113, %131, %19
  %133 = icmp eq ptr %7, null
  br i1 %133, label %134, label %3, !llvm.loop !200

134:                                              ; preds = %132, %1
  ret void
}

declare i32 @reg_mentioned_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @dump_insn_slim(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @df_insn_rescan(ptr noundef) local_unnamed_addr #3

declare i32 @returnjump_p(ptr noundef) local_unnamed_addr #3

declare i32 @any_uncondjump_p(ptr noundef) local_unnamed_addr #3

declare void @mark_jump_label(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @update_cfg_for_uncondjump(ptr noundef %0) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !16
  %4 = getelementptr inbounds %struct.basic_block_def, ptr %3, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = getelementptr inbounds %struct.rtl_bb_info, ptr %5, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !53
  %8 = icmp eq ptr %7, %0
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = tail call zeroext i8 @purge_dead_edges(ptr noundef nonnull %3) #25
  %11 = tail call ptr @delete_insn(ptr noundef nonnull %0) #25
  %12 = getelementptr %struct.basic_block_def, ptr %3, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !201
  %14 = icmp eq ptr %13, null
  br i1 %14, label %27, label %15

15:                                               ; preds = %9
  %16 = load i32, ptr %13, align 8, !tbaa !49
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %27

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.VEC_edge_base, ptr %13, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !5
  %21 = getelementptr inbounds %struct.edge_def, ptr %20, i64 0, i32 7
  %22 = load i32, ptr %21, align 8, !tbaa !202
  %23 = getelementptr inbounds %struct.edge_def, ptr %20, i64 0, i32 7
  %24 = or i32 %22, 1
  store i32 %24, ptr %23, align 8, !tbaa !202
  br label %27

25:                                               ; preds = %1
  %26 = tail call ptr @delete_insn(ptr noundef nonnull %0) #25
  br label %27

27:                                               ; preds = %9, %25, %18, %15
  ret void
}

declare zeroext i8 @ix86_function_value_regno_p(i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal void @likely_spilled_retval_1(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef %2) #20 {
  %4 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %5 = load ptr, ptr %4, align 8, !tbaa !16
  %6 = load i32, ptr %5, align 8
  %7 = and i32 %6, 65535
  %8 = icmp eq i32 %7, 37
  br i1 %8, label %9, label %42

9:                                                ; preds = %3
  %10 = getelementptr i8, ptr %0, i64 8
  %11 = load i32, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %2, align 4, !tbaa !104
  %13 = getelementptr inbounds %struct.likely_spilled_retval_info, ptr %2, i64 0, i32 1
  %14 = load i32, ptr %13, align 4, !tbaa !106
  %15 = add i32 %14, %12
  %16 = icmp ult i32 %11, %15
  br i1 %16, label %17, label %42

17:                                               ; preds = %9
  %18 = zext i32 %11 to i64
  %19 = load i32, ptr %0, align 8
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %18, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !16
  %25 = zext i8 %24 to i32
  %26 = add i32 %11, %25
  %27 = icmp ugt i32 %26, %12
  br i1 %27, label %28, label %42

28:                                               ; preds = %17
  %29 = add nsw i32 %25, -1
  %30 = shl i32 2, %29
  %31 = add i32 %30, -1
  %32 = icmp ult i32 %11, %12
  %33 = sub i32 %12, %11
  %34 = lshr i32 %31, %33
  %35 = sub i32 %11, %12
  %36 = shl i32 %31, %35
  %37 = select i1 %32, i32 %34, i32 %36
  %38 = xor i32 %37, -1
  %39 = getelementptr inbounds %struct.likely_spilled_retval_info, ptr %2, i64 0, i32 2
  %40 = load i32, ptr %39, align 4, !tbaa !107
  %41 = and i32 %40, %38
  store i32 %41, ptr %39, align 4, !tbaa !107
  br label %42

42:                                               ; preds = %17, %9, %3, %28
  ret void
}

declare i64 @trunc_int_for_mode(i64 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @xmalloc(i64 noundef) local_unnamed_addr #3

declare i32 @reg_set_between_p(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @find_reg_fusage(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @volatile_refs_p(ptr noundef) local_unnamed_addr #3

declare i32 @volatile_insn_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @find_single_use_1(ptr noundef readonly %0, ptr noundef readonly %1) unnamed_addr #16 {
  br label %3

3:                                                ; preds = %38, %2
  %4 = phi ptr [ %1, %2 ], [ %39, %38 ]
  %5 = load ptr, ptr %4, align 8, !tbaa !5
  %6 = load i32, ptr %5, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %42 [
    i16 30, label %125
    i16 35, label %125
    i16 44, label %125
    i16 45, label %125
    i16 32, label %125
    i16 33, label %125
    i16 25, label %125
    i16 23, label %8
    i16 43, label %40
    i16 39, label %40
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = load i32, ptr %10, align 8
  %12 = trunc i32 %11 to i16
  switch i16 %12, label %42 [
    i16 46, label %36
    i16 36, label %36
    i16 37, label %36
    i16 39, label %13
  ]

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.rtx_def, ptr %10, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !16
  %16 = load i32, ptr %15, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 37
  br i1 %18, label %19, label %42

19:                                               ; preds = %13
  %20 = lshr i32 %16, 16
  %21 = and i32 %20, 255
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !16
  %25 = zext i8 %24 to i32
  %26 = add nuw nsw i32 %25, 3
  %27 = lshr i32 %11, 16
  %28 = and i32 %27, 255
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %29
  %31 = load i8, ptr %30, align 1, !tbaa !16
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %32, 3
  %34 = xor i32 %33, %26
  %35 = icmp ult i32 %34, 4
  br i1 %35, label %36, label %42

36:                                               ; preds = %8, %8, %8, %19
  %37 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %38

38:                                               ; preds = %36, %40
  %39 = phi ptr [ %37, %36 ], [ %41, %40 ]
  br label %3

40:                                               ; preds = %3, %3
  %41 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  br label %38

42:                                               ; preds = %8, %3, %13, %19
  %43 = and i32 %6, 65535
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %44
  %46 = load ptr, ptr %45, align 8, !tbaa !5
  %47 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %44
  %48 = load i8, ptr %47, align 1, !tbaa !16
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %125, label %50

50:                                               ; preds = %42
  %51 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %52 = getelementptr i8, ptr %0, i64 8
  %53 = zext i8 %48 to i64
  br label %54

54:                                               ; preds = %50, %122
  %55 = phi i64 [ %53, %50 ], [ %57, %122 ]
  %56 = phi ptr [ null, %50 ], [ %123, %122 ]
  %57 = add nsw i64 %55, -1
  %58 = getelementptr inbounds i8, ptr %46, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !16
  switch i8 %59, label %122 [
    i8 101, label %60
    i8 69, label %84
  ]

60:                                               ; preds = %54
  %61 = getelementptr inbounds [1 x %union.rtunion_def], ptr %51, i64 0, i64 %57
  %62 = load ptr, ptr %61, align 8, !tbaa !16
  %63 = icmp eq ptr %62, %0
  br i1 %63, label %79, label %64

64:                                               ; preds = %60
  %65 = load i32, ptr %0, align 8
  %66 = and i32 %65, 65535
  %67 = icmp eq i32 %66, 37
  br i1 %67, label %68, label %77

68:                                               ; preds = %64
  %69 = load i32, ptr %62, align 8
  %70 = and i32 %69, 65535
  %71 = icmp eq i32 %70, 37
  br i1 %71, label %72, label %77

72:                                               ; preds = %68
  %73 = load i32, ptr %52, align 8, !tbaa !16
  %74 = getelementptr i8, ptr %62, i64 8
  %75 = load i32, ptr %74, align 8, !tbaa !16
  %76 = icmp eq i32 %73, %75
  br i1 %76, label %79, label %77

77:                                               ; preds = %72, %68, %64
  %78 = tail call fastcc ptr @find_single_use_1(ptr noundef nonnull %0, ptr noundef nonnull %61)
  br label %79

79:                                               ; preds = %60, %72, %77
  %80 = phi ptr [ %78, %77 ], [ %4, %72 ], [ %4, %60 ]
  %81 = icmp eq ptr %56, null
  br i1 %81, label %122, label %82

82:                                               ; preds = %79
  %83 = icmp eq ptr %80, null
  br i1 %83, label %122, label %125

84:                                               ; preds = %54
  %85 = getelementptr inbounds [1 x %union.rtunion_def], ptr %51, i64 0, i64 %57
  %86 = load ptr, ptr %85, align 8, !tbaa !16
  %87 = load i32, ptr %86, align 8, !tbaa !99
  %88 = icmp slt i32 %87, 1
  br i1 %88, label %122, label %89

89:                                               ; preds = %84
  %90 = zext i32 %87 to i64
  br label %91

91:                                               ; preds = %89, %119
  %92 = phi i64 [ %90, %89 ], [ %94, %119 ]
  %93 = phi ptr [ %56, %89 ], [ %120, %119 ]
  %94 = add nsw i64 %92, -1
  %95 = and i64 %94, 4294967295
  %96 = getelementptr inbounds %struct.rtvec_def, ptr %86, i64 0, i32 1, i64 %95
  %97 = load ptr, ptr %96, align 8, !tbaa !5
  %98 = icmp eq ptr %97, %0
  br i1 %98, label %114, label %99

99:                                               ; preds = %91
  %100 = load i32, ptr %0, align 8
  %101 = and i32 %100, 65535
  %102 = icmp eq i32 %101, 37
  br i1 %102, label %103, label %112

103:                                              ; preds = %99
  %104 = load i32, ptr %97, align 8
  %105 = and i32 %104, 65535
  %106 = icmp eq i32 %105, 37
  br i1 %106, label %107, label %112

107:                                              ; preds = %103
  %108 = getelementptr i8, ptr %97, i64 8
  %109 = load i32, ptr %108, align 8, !tbaa !16
  %110 = load i32, ptr %52, align 8, !tbaa !16
  %111 = icmp eq i32 %109, %110
  br i1 %111, label %114, label %112

112:                                              ; preds = %107, %103, %99
  %113 = tail call fastcc ptr @find_single_use_1(ptr noundef nonnull %0, ptr noundef nonnull %96)
  br label %114

114:                                              ; preds = %91, %107, %112
  %115 = phi ptr [ %113, %112 ], [ %4, %107 ], [ %4, %91 ]
  %116 = icmp eq ptr %93, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %114
  %118 = icmp eq ptr %115, null
  br i1 %118, label %119, label %125

119:                                              ; preds = %114, %117
  %120 = phi ptr [ %93, %117 ], [ %115, %114 ]
  %121 = icmp ult i64 %92, 2
  br i1 %121, label %122, label %91, !llvm.loop !203

122:                                              ; preds = %119, %84, %54, %79, %82
  %123 = phi ptr [ %56, %82 ], [ %80, %79 ], [ %56, %54 ], [ %56, %84 ], [ %120, %119 ]
  %124 = icmp sgt i64 %55, 1
  br i1 %124, label %54, label %125, !llvm.loop !204

125:                                              ; preds = %3, %3, %3, %3, %3, %3, %3, %82, %122, %117, %42
  %126 = phi ptr [ null, %42 ], [ null, %117 ], [ null, %82 ], [ %123, %122 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ]
  ret ptr %126
}

declare zeroext i8 @ix86_modes_tieable_p(i32 noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @ix86_cannot_change_mode_class(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @simplify_subreg(i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @simplify_unary_operation(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @avoid_constant_pool_reference(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @combine_simplify_rtx(ptr noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = load i32, ptr %0, align 8
  %11 = and i32 %10, 65535
  %12 = lshr i32 %10, 16
  %13 = and i32 %12, 255
  %14 = zext i32 %11 to i64
  %15 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %14
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = icmp eq i32 %16, 3
  br i1 %17, label %18, label %28

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = tail call zeroext i8 @swap_commutative_operands_p(ptr noundef %20, ptr noundef %22) #25
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %18
  %26 = load ptr, ptr %19, align 8, !tbaa !16
  %27 = load ptr, ptr %21, align 8, !tbaa !16
  tail call fastcc void @do_SUBST(ptr noundef nonnull %19, ptr noundef %27)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %21, ptr noundef %26)
  br label %28

28:                                               ; preds = %25, %18, %3
  %29 = load i32, ptr %0, align 8
  %30 = and i32 %29, 65535
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %31
  %33 = load i32, ptr %32, align 4, !tbaa !16
  %34 = icmp ult i32 %33, 4
  br i1 %34, label %35, label %79

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !16
  %38 = load i32, ptr %37, align 8
  %39 = and i32 %38, 65535
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %40
  %42 = load i32, ptr %41, align 4, !tbaa !16
  %43 = and i32 %42, -2
  %44 = icmp eq i32 %43, 8
  br i1 %44, label %57, label %45

45:                                               ; preds = %35
  %46 = icmp eq i32 %39, 39
  br i1 %46, label %47, label %103

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.rtx_def, ptr %37, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = load i32, ptr %49, align 8
  %51 = and i32 %50, 65535
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  %55 = and i32 %54, -2
  %56 = icmp eq i32 %55, 8
  br i1 %56, label %57, label %103

57:                                               ; preds = %47, %35
  %58 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %59 = load ptr, ptr %58, align 8, !tbaa !16
  %60 = load i32, ptr %59, align 8
  %61 = and i32 %60, 65535
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %62
  %64 = load i32, ptr %63, align 4, !tbaa !16
  %65 = and i32 %64, -2
  %66 = icmp eq i32 %65, 8
  br i1 %66, label %238, label %67

67:                                               ; preds = %57
  %68 = icmp eq i32 %61, 39
  br i1 %68, label %69, label %103

69:                                               ; preds = %67
  %70 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = load i32, ptr %71, align 8
  %73 = and i32 %72, 65535
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %74
  %76 = load i32, ptr %75, align 4, !tbaa !16
  %77 = and i32 %76, -2
  %78 = icmp eq i32 %77, 8
  br i1 %78, label %238, label %103

79:                                               ; preds = %28
  %80 = icmp eq i32 %33, 4
  br i1 %80, label %81, label %238

81:                                               ; preds = %79
  %82 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %83 = load ptr, ptr %82, align 8, !tbaa !16
  %84 = load i32, ptr %83, align 8
  %85 = and i32 %84, 65535
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !16
  %89 = and i32 %88, -2
  %90 = icmp eq i32 %89, 8
  br i1 %90, label %238, label %91

91:                                               ; preds = %81
  %92 = icmp eq i32 %85, 39
  br i1 %92, label %93, label %103

93:                                               ; preds = %91
  %94 = getelementptr inbounds %struct.rtx_def, ptr %83, i64 0, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  %96 = load i32, ptr %95, align 8
  %97 = and i32 %96, 65535
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !16
  %101 = and i32 %100, -2
  %102 = icmp eq i32 %101, 8
  br i1 %102, label %238, label %103

103:                                              ; preds = %93, %91, %69, %67, %47, %45
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #25
  %104 = call fastcc ptr @if_then_else_cond(ptr noundef nonnull %0, ptr noundef nonnull %5, ptr noundef nonnull %6)
  store ptr %104, ptr %4, align 8, !tbaa !5
  %105 = icmp eq ptr %104, null
  br i1 %105, label %231, label %106

106:                                              ; preds = %103
  %107 = load i32, ptr %0, align 8
  %108 = and i32 %107, 65535
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !16
  %112 = icmp ult i32 %111, 2
  br i1 %112, label %113, label %129

113:                                              ; preds = %106
  %114 = load ptr, ptr %5, align 8, !tbaa !5
  %115 = load i32, ptr %114, align 8
  %116 = and i32 %115, 65535
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %117
  %119 = load i32, ptr %118, align 4, !tbaa !16
  %120 = icmp ult i32 %119, 2
  br i1 %120, label %231, label %121

121:                                              ; preds = %113
  %122 = load ptr, ptr %6, align 8, !tbaa !5
  %123 = load i32, ptr %122, align 8
  %124 = and i32 %123, 65535
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %125
  %127 = load i32, ptr %126, align 4, !tbaa !16
  %128 = icmp ult i32 %127, 2
  br i1 %128, label %231, label %129

129:                                              ; preds = %121, %106
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #25
  %130 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %130, ptr %7, align 8, !tbaa !5
  %131 = call fastcc i32 @simplify_comparison(i32 noundef 80, ptr noundef nonnull %4, ptr noundef nonnull %7)
  %132 = icmp eq i32 %131, 80
  br i1 %132, label %133, label %141

133:                                              ; preds = %129
  %134 = load ptr, ptr %4, align 8, !tbaa !5
  %135 = load i32, ptr %134, align 8
  %136 = and i32 %135, 65535
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !16
  %140 = icmp ult i32 %139, 2
  br i1 %140, label %236, label %141

141:                                              ; preds = %133, %129
  %142 = load ptr, ptr %5, align 8, !tbaa !5
  %143 = tail call ptr @copy_rtx(ptr noundef %142) #25
  %144 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %145 = tail call fastcc ptr @subst(ptr noundef %143, ptr noundef %144, ptr noundef %144, i32 noundef 0, i32 noundef 0)
  %146 = load ptr, ptr %6, align 8, !tbaa !5
  %147 = tail call ptr @copy_rtx(ptr noundef %146) #25
  %148 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %149 = tail call fastcc ptr @subst(ptr noundef %147, ptr noundef %148, ptr noundef %148, i32 noundef 0, i32 noundef 0)
  %150 = tail call i32 @general_operand(ptr noundef %145, i32 noundef 0) #25
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %226, label %152

152:                                              ; preds = %141
  %153 = tail call i32 @general_operand(ptr noundef %149, i32 noundef 0) #25
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %226, label %155

155:                                              ; preds = %152
  %156 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  %157 = icmp eq ptr %145, %156
  %158 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %159 = icmp eq ptr %149, %158
  %160 = select i1 %157, i1 %159, i1 false
  br i1 %160, label %161, label %165

161:                                              ; preds = %155
  %162 = load ptr, ptr %4, align 8, !tbaa !5
  %163 = load ptr, ptr %7, align 8, !tbaa !5
  %164 = tail call ptr @simplify_gen_relational(i32 noundef %131, i32 noundef %13, i32 noundef 0, ptr noundef %162, ptr noundef %163) #25
  br label %214

165:                                              ; preds = %155
  %166 = icmp eq ptr %145, %158
  %167 = icmp eq ptr %149, %156
  %168 = select i1 %166, i1 %167, i1 false
  br i1 %168, label %169, label %176

169:                                              ; preds = %165
  %170 = load ptr, ptr %4, align 8, !tbaa !5
  %171 = load ptr, ptr %7, align 8, !tbaa !5
  %172 = tail call i32 @reversed_comparison_code_parts(i32 noundef %131, ptr noundef %170, ptr noundef %171, ptr noundef null) #25
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %176, label %174

174:                                              ; preds = %169
  %175 = tail call ptr @simplify_gen_relational(i32 noundef %172, i32 noundef %13, i32 noundef 0, ptr noundef %170, ptr noundef %171) #25
  br label %214

176:                                              ; preds = %169, %165
  %177 = load i32, ptr %145, align 8
  %178 = and i32 %177, 65535
  %179 = icmp eq i32 %178, 30
  br i1 %179, label %180, label %192

180:                                              ; preds = %176
  %181 = getelementptr inbounds %struct.rtx_def, ptr %145, i64 0, i32 1
  %182 = load i64, ptr %181, align 8, !tbaa !16
  %183 = icmp eq i64 %182, -1
  %184 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %185 = icmp eq ptr %149, %184
  %186 = select i1 %183, i1 %185, i1 false
  br i1 %186, label %187, label %192

187:                                              ; preds = %180
  %188 = load ptr, ptr %4, align 8, !tbaa !5
  %189 = load ptr, ptr %7, align 8, !tbaa !5
  %190 = tail call ptr @simplify_gen_relational(i32 noundef %131, i32 noundef %13, i32 noundef 0, ptr noundef %188, ptr noundef %189) #25
  %191 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %13, ptr noundef %190, i32 noundef %13) #25
  br label %214

192:                                              ; preds = %180, %176
  %193 = load i32, ptr %149, align 8
  %194 = and i32 %193, 65535
  %195 = icmp eq i32 %194, 30
  br i1 %195, label %199, label %196

196:                                              ; preds = %192
  %197 = load ptr, ptr %4, align 8, !tbaa !5
  %198 = load ptr, ptr %7, align 8, !tbaa !5
  br label %221

199:                                              ; preds = %192
  %200 = getelementptr inbounds %struct.rtx_def, ptr %149, i64 0, i32 1
  %201 = load i64, ptr %200, align 8, !tbaa !16
  %202 = icmp eq i64 %201, -1
  %203 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %204 = icmp eq ptr %145, %203
  %205 = select i1 %202, i1 %204, i1 false
  %206 = load ptr, ptr %4, align 8, !tbaa !5
  %207 = load ptr, ptr %7, align 8, !tbaa !5
  br i1 %205, label %208, label %221

208:                                              ; preds = %199
  %209 = tail call i32 @reversed_comparison_code_parts(i32 noundef %131, ptr noundef %206, ptr noundef %207, ptr noundef null) #25
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %221, label %211

211:                                              ; preds = %208
  %212 = tail call ptr @simplify_gen_relational(i32 noundef %209, i32 noundef %13, i32 noundef 0, ptr noundef %206, ptr noundef %207) #25
  %213 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %13, ptr noundef %212, i32 noundef %13) #25
  br label %214

214:                                              ; preds = %161, %187, %211, %174
  %215 = phi ptr [ %164, %161 ], [ %175, %174 ], [ %191, %187 ], [ %213, %211 ]
  %216 = load i32, ptr %215, align 8
  %217 = and i32 %216, 65535
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %218
  %220 = load i32, ptr %219, align 4, !tbaa !16
  br label %226

221:                                              ; preds = %196, %199, %208
  %222 = phi ptr [ %198, %196 ], [ %207, %199 ], [ %207, %208 ]
  %223 = phi ptr [ %197, %196 ], [ %206, %199 ], [ %206, %208 ]
  %224 = tail call ptr @simplify_gen_relational(i32 noundef %131, i32 noundef %13, i32 noundef 0, ptr noundef %223, ptr noundef %222) #25
  %225 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef 47, i32 noundef %13, ptr noundef %224, ptr noundef nonnull %145, ptr noundef nonnull %149) #25
  br label %236

226:                                              ; preds = %214, %152, %141
  %227 = phi i32 [ %220, %214 ], [ %16, %152 ], [ %16, %141 ]
  %228 = phi i32 [ %217, %214 ], [ %11, %152 ], [ %11, %141 ]
  %229 = phi i32 [ 0, %214 ], [ %1, %152 ], [ %1, %141 ]
  %230 = phi ptr [ %215, %214 ], [ %0, %152 ], [ %0, %141 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #25
  br label %231

231:                                              ; preds = %226, %121, %113, %103
  %232 = phi i32 [ %227, %226 ], [ %16, %121 ], [ %16, %113 ], [ %16, %103 ]
  %233 = phi i32 [ %228, %226 ], [ %11, %121 ], [ %11, %113 ], [ %11, %103 ]
  %234 = phi i32 [ %229, %226 ], [ %1, %121 ], [ %1, %113 ], [ %1, %103 ]
  %235 = phi ptr [ %230, %226 ], [ %0, %121 ], [ %0, %113 ], [ %0, %103 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #25
  br label %238

236:                                              ; preds = %133, %221
  %237 = phi ptr [ %225, %221 ], [ %0, %133 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #25
  br label %1088

238:                                              ; preds = %57, %69, %231, %93, %81, %79
  %239 = phi i32 [ %16, %57 ], [ %16, %69 ], [ %232, %231 ], [ %16, %93 ], [ %16, %81 ], [ %16, %79 ]
  %240 = phi i32 [ %11, %57 ], [ %11, %69 ], [ %233, %231 ], [ %11, %93 ], [ %11, %81 ], [ %11, %79 ]
  %241 = phi i32 [ %1, %57 ], [ %1, %69 ], [ %234, %231 ], [ %1, %93 ], [ %1, %81 ], [ %1, %79 ]
  %242 = phi ptr [ %0, %57 ], [ %0, %69 ], [ %235, %231 ], [ %0, %93 ], [ %0, %81 ], [ %0, %79 ]
  switch i32 %239, label %295 [
    i32 4, label %243
    i32 0, label %254
    i32 1, label %254
    i32 3, label %272
    i32 2, label %272
    i32 11, label %278
    i32 10, label %278
  ]

243:                                              ; preds = %238
  %244 = icmp eq i32 %241, 0
  %245 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1
  %246 = load ptr, ptr %245, align 8, !tbaa !16
  br i1 %244, label %247, label %251

247:                                              ; preds = %243
  %248 = load i32, ptr %246, align 8
  %249 = lshr i32 %248, 16
  %250 = and i32 %249, 255
  br label %251

251:                                              ; preds = %243, %247
  %252 = phi i32 [ %250, %247 ], [ %241, %243 ]
  %253 = tail call ptr @simplify_unary_operation(i32 noundef %240, i32 noundef %13, ptr noundef %246, i32 noundef %252) #25
  br label %286

254:                                              ; preds = %238, %238
  %255 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1
  %256 = load ptr, ptr %255, align 8, !tbaa !16
  %257 = load i32, ptr %256, align 8
  %258 = lshr i32 %257, 16
  %259 = and i32 %258, 255
  %260 = icmp eq i32 %259, 0
  %261 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1, i32 0, i32 0, i64 1
  %262 = load ptr, ptr %261, align 8, !tbaa !16
  br i1 %260, label %263, label %269

263:                                              ; preds = %254
  %264 = load i32, ptr %262, align 8
  %265 = lshr i32 %264, 16
  %266 = and i32 %265, 255
  %267 = icmp eq i32 %266, 0
  %268 = select i1 %267, i32 %241, i32 %266
  br label %269

269:                                              ; preds = %254, %263
  %270 = phi i32 [ %268, %263 ], [ %259, %254 ]
  %271 = tail call ptr @simplify_relational_operation(i32 noundef %240, i32 noundef %13, i32 noundef %270, ptr noundef nonnull %256, ptr noundef %262) #25
  br label %286

272:                                              ; preds = %238, %238
  %273 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !16
  %275 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1, i32 0, i32 0, i64 1
  %276 = load ptr, ptr %275, align 8, !tbaa !16
  %277 = tail call ptr @simplify_binary_operation(i32 noundef %240, i32 noundef %13, ptr noundef %274, ptr noundef %276) #25
  br label %286

278:                                              ; preds = %238, %238
  %279 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1
  %280 = load ptr, ptr %279, align 8, !tbaa !16
  %281 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1, i32 0, i32 0, i64 1
  %282 = load ptr, ptr %281, align 8, !tbaa !16
  %283 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1, i32 0, i32 0, i64 2
  %284 = load ptr, ptr %283, align 8, !tbaa !16
  %285 = tail call ptr @simplify_ternary_operation(i32 noundef %240, i32 noundef %13, i32 noundef %241, ptr noundef %280, ptr noundef %282, ptr noundef %284) #25
  br label %286

286:                                              ; preds = %278, %272, %269, %251
  %287 = phi ptr [ %285, %278 ], [ %277, %272 ], [ %271, %269 ], [ %253, %251 ]
  %288 = phi i32 [ %241, %278 ], [ %241, %272 ], [ %241, %269 ], [ %252, %251 ]
  %289 = icmp eq ptr %287, null
  br i1 %289, label %295, label %290

290:                                              ; preds = %286
  %291 = load i32, ptr %287, align 8
  %292 = and i32 %291, 65535
  %293 = lshr i32 %291, 16
  %294 = and i32 %293, 255
  br label %295

295:                                              ; preds = %238, %290, %286
  %296 = phi i32 [ %294, %290 ], [ %13, %286 ], [ %13, %238 ]
  %297 = phi i32 [ %292, %290 ], [ %240, %286 ], [ %240, %238 ]
  %298 = phi i32 [ 0, %290 ], [ %288, %286 ], [ %241, %238 ]
  %299 = phi ptr [ %287, %290 ], [ %242, %286 ], [ %242, %238 ]
  switch i32 %297, label %304 [
    i32 63, label %300
    i32 62, label %300
    i32 61, label %300
    i32 50, label %300
    i32 49, label %300
  ]

300:                                              ; preds = %295, %295, %295, %295, %295
  %301 = tail call fastcc ptr @apply_distributive_law(ptr noundef nonnull %299)
  %302 = load i32, ptr %301, align 8
  %303 = and i32 %302, 65535
  br label %304

304:                                              ; preds = %295, %300
  %305 = phi i32 [ %303, %300 ], [ %297, %295 ]
  %306 = phi i32 [ 0, %300 ], [ %298, %295 ]
  %307 = phi ptr [ %301, %300 ], [ %299, %295 ]
  %308 = icmp eq i32 %305, 50
  %309 = icmp eq i32 %305, 55
  switch i32 %305, label %378 [
    i32 73, label %310
    i32 72, label %310
    i32 71, label %310
    i32 70, label %310
    i32 63, label %310
    i32 62, label %310
    i32 61, label %310
    i32 55, label %310
    i32 52, label %310
    i32 50, label %310
    i32 49, label %310
  ]

310:                                              ; preds = %304, %304, %304, %304, %304, %304, %304, %304, %304, %304, %304
  %311 = zext i32 %296 to i64
  %312 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %311
  %313 = load i8, ptr %312, align 1, !tbaa !16
  switch i8 %313, label %314 [
    i8 2, label %318
    i8 3, label %318
    i8 10, label %318
  ]

314:                                              ; preds = %310
  %315 = icmp eq i8 %313, 12
  %316 = icmp ne i32 %305, 55
  %317 = and i1 %316, %315
  br i1 %317, label %323, label %319

318:                                              ; preds = %310, %310, %310
  br i1 %309, label %319, label %323

319:                                              ; preds = %318, %314
  %320 = load i32, ptr @flag_associative_math, align 4, !tbaa !20
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %378, label %322

322:                                              ; preds = %319
  switch i8 %313, label %378 [
    i8 8, label %323
    i8 9, label %323
    i8 11, label %323
    i8 17, label %323
  ]

323:                                              ; preds = %322, %322, %322, %322, %314, %318
  %324 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %325 = load ptr, ptr %324, align 8, !tbaa !16
  %326 = load i32, ptr %325, align 8
  %327 = and i32 %326, 65535
  %328 = icmp eq i32 %327, %305
  br i1 %328, label %329, label %378

329:                                              ; preds = %323
  %330 = getelementptr inbounds %struct.rtx_def, ptr %325, i64 0, i32 1
  %331 = load ptr, ptr %330, align 8, !tbaa !16
  %332 = getelementptr inbounds %struct.rtx_def, ptr %325, i64 0, i32 1, i32 0, i32 0, i64 1
  %333 = load ptr, ptr %332, align 8, !tbaa !16
  %334 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %335 = load ptr, ptr %334, align 8, !tbaa !16
  %336 = load i32, ptr %333, align 8
  %337 = and i32 %336, 65535
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %338
  %340 = load i32, ptr %339, align 4, !tbaa !16
  %341 = icmp eq i32 %340, 9
  br i1 %341, label %342, label %351

342:                                              ; preds = %329
  %343 = load i32, ptr %307, align 8
  %344 = and i32 %343, 65535
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %345
  %347 = load i32, ptr %346, align 4, !tbaa !16
  %348 = icmp eq i32 %347, 3
  %349 = select i1 %348, ptr %335, ptr %333
  %350 = select i1 %348, ptr %333, ptr %335
  br label %351

351:                                              ; preds = %342, %329
  %352 = phi ptr [ %333, %329 ], [ %349, %342 ]
  %353 = phi ptr [ %335, %329 ], [ %350, %342 ]
  %354 = select i1 %309, i32 52, i32 %305
  %355 = select i1 %308, i32 49, i32 %354
  %356 = tail call ptr @simplify_binary_operation(i32 noundef %355, i32 noundef %296, ptr noundef %352, ptr noundef %353) #25
  %357 = icmp eq ptr %356, null
  br i1 %357, label %358, label %374

358:                                              ; preds = %351
  %359 = load i32, ptr %307, align 8
  %360 = and i32 %359, 65535
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %361
  %363 = load i32, ptr %362, align 4, !tbaa !16
  %364 = icmp eq i32 %363, 3
  br i1 %364, label %365, label %378

365:                                              ; preds = %358
  %366 = load ptr, ptr %324, align 8, !tbaa !16
  %367 = getelementptr inbounds %struct.rtx_def, ptr %366, i64 0, i32 1
  %368 = getelementptr inbounds %struct.rtx_def, ptr %366, i64 0, i32 1, i32 0, i32 0, i64 1
  %369 = load ptr, ptr %368, align 8, !tbaa !16
  %370 = load ptr, ptr %367, align 8, !tbaa !16
  %371 = load ptr, ptr %334, align 8, !tbaa !16
  %372 = tail call ptr @simplify_binary_operation(i32 noundef %305, i32 noundef %296, ptr noundef %370, ptr noundef %371) #25
  %373 = icmp eq ptr %372, null
  br i1 %373, label %378, label %374

374:                                              ; preds = %351, %365
  %375 = phi ptr [ %372, %365 ], [ %356, %351 ]
  %376 = phi ptr [ %369, %365 ], [ %331, %351 ]
  %377 = tail call ptr @simplify_gen_binary(i32 noundef %305, i32 noundef %296, ptr noundef %376, ptr noundef nonnull %375) #25
  br label %1088

378:                                              ; preds = %358, %365, %322, %304, %323, %319
  switch i32 %305, label %1087 [
    i32 43, label %379
    i32 39, label %383
    i32 51, label %445
    i32 100, label %510
    i32 35, label %560
    i32 49, label %569
    i32 50, label %713
    i32 52, label %748
    i32 59, label %786
    i32 81, label %806
    i32 80, label %806
    i32 83, label %806
    i32 87, label %806
    i32 82, label %806
    i32 86, label %806
    i32 85, label %806
    i32 89, label %806
    i32 84, label %806
    i32 88, label %806
    i32 92, label %806
    i32 97, label %806
    i32 94, label %806
    i32 93, label %806
    i32 96, label %806
    i32 95, label %806
    i32 90, label %806
    i32 91, label %806
    i32 47, label %980
    i32 120, label %982
    i32 119, label %982
    i32 99, label %982
    i32 98, label %982
    i32 23, label %986
    i32 61, label %988
    i32 62, label %988
    i32 65, label %1065
    i32 68, label %1065
    i32 67, label %1065
    i32 66, label %1065
    i32 69, label %1065
  ]

379:                                              ; preds = %378
  %380 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %381 = load ptr, ptr %380, align 8, !tbaa !16
  %382 = tail call fastcc ptr @make_compound_operation(ptr noundef %381, i32 noundef 43)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %380, ptr noundef %382)
  br label %1087

383:                                              ; preds = %378
  %384 = icmp eq i32 %306, 0
  %385 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %386 = load ptr, ptr %385, align 8, !tbaa !16
  %387 = load i32, ptr %386, align 8
  %388 = lshr i32 %387, 16
  %389 = and i32 %388, 255
  %390 = select i1 %384, i32 %389, i32 %306
  %391 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %392 = and i32 %387, 65535
  %393 = zext i32 %392 to i64
  %394 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %393
  %395 = load i32, ptr %394, align 4, !tbaa !16
  %396 = icmp eq i32 %395, 9
  br i1 %396, label %397, label %415

397:                                              ; preds = %383
  %398 = tail call i32 @subreg_lowpart_offset(i32 noundef %296, i32 noundef %390) #25
  %399 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %400 = load i32, ptr %399, align 8, !tbaa !16
  %401 = icmp eq i32 %398, %400
  %402 = load ptr, ptr %391, align 8, !tbaa !16
  br i1 %401, label %403, label %415

403:                                              ; preds = %397
  %404 = load i32, ptr %402, align 8
  %405 = and i32 %404, 16711680
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %407, label %411

407:                                              ; preds = %403
  %408 = tail call ptr @gen_lowpart_common(i32 noundef %296, ptr noundef nonnull %402) #25
  %409 = icmp eq ptr %408, null
  %410 = load ptr, ptr %391, align 8, !tbaa !16
  br i1 %409, label %415, label %411

411:                                              ; preds = %407, %403
  %412 = phi ptr [ %402, %403 ], [ %410, %407 ]
  %413 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %414 = tail call ptr %413(i32 noundef %296, ptr noundef %412) #25
  br label %1088

415:                                              ; preds = %407, %397, %383
  %416 = phi ptr [ %410, %407 ], [ %402, %397 ], [ %386, %383 ]
  %417 = load i32, ptr %416, align 8
  %418 = lshr i32 %417, 16
  %419 = and i32 %418, 255
  %420 = zext i32 %419 to i64
  %421 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %420
  %422 = load i8, ptr %421, align 1, !tbaa !16
  %423 = icmp eq i8 %422, 1
  br i1 %423, label %1087, label %424

424:                                              ; preds = %415
  %425 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %426 = load i32, ptr %425, align 8, !tbaa !16
  %427 = tail call ptr @simplify_subreg(i32 noundef %296, ptr noundef nonnull %416, i32 noundef %390, i32 noundef %426) #25
  %428 = icmp eq ptr %427, null
  br i1 %428, label %429, label %1088

429:                                              ; preds = %424
  %430 = load ptr, ptr %391, align 8, !tbaa !16
  %431 = load i32, ptr %430, align 8
  %432 = and i32 %431, 65535
  %433 = icmp eq i32 %432, 43
  br i1 %433, label %434, label %1087

434:                                              ; preds = %429
  %435 = and i32 %431, 134217728
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %442

437:                                              ; preds = %434
  %438 = getelementptr inbounds %struct.rtx_def, ptr %430, i64 0, i32 1
  %439 = load ptr, ptr %438, align 8, !tbaa !16
  %440 = tail call i32 @mode_dependent_address_p(ptr noundef %439) #25
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %1087, label %442

442:                                              ; preds = %437, %434
  %443 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %444 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %296, ptr noundef %443) #25
  br label %1088

445:                                              ; preds = %378
  %446 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %447 = load ptr, ptr %446, align 8, !tbaa !16
  %448 = tail call fastcc ptr @expand_compound_operation(ptr noundef %447)
  %449 = load i32, ptr %448, align 8
  %450 = trunc i32 %449 to i16
  switch i16 %450, label %479 [
    i16 67, label %451
    i16 37, label %1087
    i16 39, label %473
  ]

451:                                              ; preds = %445
  %452 = getelementptr inbounds %struct.rtx_def, ptr %448, i64 0, i32 1
  %453 = getelementptr inbounds %struct.rtx_def, ptr %448, i64 0, i32 1, i32 0, i32 0, i64 1
  %454 = load ptr, ptr %453, align 8, !tbaa !16
  %455 = load i32, ptr %454, align 8
  %456 = and i32 %455, 65535
  %457 = icmp eq i32 %456, 30
  br i1 %457, label %458, label %479

458:                                              ; preds = %451
  %459 = getelementptr inbounds %struct.rtx_def, ptr %454, i64 0, i32 1
  %460 = load i64, ptr %459, align 8, !tbaa !16
  %461 = zext i32 %296 to i64
  %462 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %461
  %463 = load i8, ptr %462, align 1, !tbaa !16
  %464 = zext i8 %463 to i32
  %465 = shl nuw nsw i32 %464, 3
  %466 = add nsw i32 %465, -1
  %467 = sext i32 %466 to i64
  %468 = icmp eq i64 %460, %467
  br i1 %468, label %469, label %479

469:                                              ; preds = %458
  %470 = load ptr, ptr %452, align 8, !tbaa !16
  %471 = trunc i64 %460 to i32
  %472 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %296, ptr noundef %470, i32 noundef %471)
  br label %1088

473:                                              ; preds = %445
  %474 = getelementptr inbounds %struct.rtx_def, ptr %448, i64 0, i32 1
  %475 = load ptr, ptr %474, align 8, !tbaa !16
  %476 = load i32, ptr %475, align 8
  %477 = and i32 %476, 65535
  %478 = icmp eq i32 %477, 37
  br i1 %478, label %1087, label %479

479:                                              ; preds = %445, %451, %458, %473
  %480 = tail call i64 @nonzero_bits(ptr noundef nonnull %448, i32 noundef %296) #25
  %481 = tail call i32 @exact_log2(i64 noundef %480) #25
  %482 = icmp sgt i32 %481, -1
  br i1 %482, label %483, label %1087

483:                                              ; preds = %479
  %484 = zext i32 %296 to i64
  %485 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %484
  %486 = load i8, ptr %485, align 1, !tbaa !16
  %487 = zext i8 %486 to i32
  %488 = shl nuw nsw i32 %487, 3
  %489 = xor i32 %481, -1
  %490 = add nsw i32 %488, %489
  %491 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %296, ptr noundef nonnull %448, i32 noundef %490)
  %492 = load i8, ptr %485, align 1, !tbaa !16
  %493 = zext i8 %492 to i32
  %494 = shl nuw nsw i32 %493, 3
  %495 = add nsw i32 %494, %489
  %496 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 67, i32 noundef %296, ptr noundef %491, i32 noundef %495)
  %497 = load i32, ptr %496, align 8
  %498 = and i32 %497, 65535
  %499 = icmp eq i32 %498, 67
  br i1 %499, label %500, label %1088

500:                                              ; preds = %483
  %501 = getelementptr inbounds %struct.rtx_def, ptr %496, i64 0, i32 1
  %502 = load ptr, ptr %501, align 8, !tbaa !16
  %503 = load i32, ptr %502, align 8
  %504 = and i32 %503, 65535
  %505 = icmp eq i32 %504, 65
  br i1 %505, label %506, label %1088

506:                                              ; preds = %500
  %507 = getelementptr inbounds %struct.rtx_def, ptr %502, i64 0, i32 1
  %508 = load ptr, ptr %507, align 8, !tbaa !16
  %509 = icmp eq ptr %508, %448
  br i1 %509, label %1087, label %1088

510:                                              ; preds = %378
  %511 = zext i32 %296 to i64
  %512 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %511
  %513 = load i8, ptr %512, align 1, !tbaa !16
  %514 = icmp eq i8 %513, 3
  br i1 %514, label %1087, label %515

515:                                              ; preds = %510
  %516 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %511
  %517 = load i8, ptr %516, align 1, !tbaa !16
  %518 = icmp ult i8 %517, 9
  br i1 %518, label %519, label %528

519:                                              ; preds = %515
  %520 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %521 = load ptr, ptr %520, align 8, !tbaa !16
  %522 = load i32, ptr %521, align 8
  %523 = lshr i32 %522, 16
  %524 = and i32 %523, 255
  %525 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %511
  %526 = load i64, ptr %525, align 8, !tbaa !83
  %527 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %521, i32 noundef %524, i64 noundef %526, i32 noundef 0)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %520, ptr noundef %527)
  br label %528

528:                                              ; preds = %519, %515
  %529 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %530 = load ptr, ptr %529, align 8, !tbaa !16
  %531 = load i32, ptr %530, align 8
  %532 = and i32 %531, 65535
  %533 = icmp eq i32 %532, 30
  br i1 %533, label %534, label %538

534:                                              ; preds = %528
  %535 = getelementptr inbounds %struct.rtx_def, ptr %530, i64 0, i32 1
  %536 = load i64, ptr %535, align 8, !tbaa !16
  %537 = tail call ptr @gen_int_mode(i64 noundef %536, i32 noundef %296) #25
  br label %1088

538:                                              ; preds = %528
  %539 = load i8, ptr %516, align 1, !tbaa !16
  %540 = icmp ult i8 %539, 9
  br i1 %540, label %541, label %1087

541:                                              ; preds = %538
  %542 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %511
  %543 = load i64, ptr %542, align 8, !tbaa !83
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %544, 0
  br i1 %545, label %1087, label %546

546:                                              ; preds = %541
  %547 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %530)
  %548 = icmp eq ptr %547, null
  br i1 %548, label %1087, label %549

549:                                              ; preds = %546
  %550 = load i32, ptr %547, align 8
  %551 = and i32 %550, 65535
  %552 = zext i32 %551 to i64
  %553 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %552
  %554 = load i32, ptr %553, align 4, !tbaa !16
  %555 = icmp ult i32 %554, 2
  br i1 %555, label %556, label %1087

556:                                              ; preds = %549
  %557 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %558 = load ptr, ptr %529, align 8, !tbaa !16
  %559 = tail call ptr %557(i32 noundef %296, ptr noundef %558) #25
  br label %1088

560:                                              ; preds = %378
  %561 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %562 = load ptr, ptr %561, align 8, !tbaa !16
  %563 = load i32, ptr %562, align 8
  %564 = and i32 %563, 65535
  %565 = icmp eq i32 %564, 35
  br i1 %565, label %566, label %1087

566:                                              ; preds = %560
  %567 = getelementptr inbounds %struct.rtx_def, ptr %562, i64 0, i32 1
  %568 = load ptr, ptr %567, align 8, !tbaa !16
  tail call fastcc void @do_SUBST(ptr noundef nonnull %561, ptr noundef %568)
  br label %1087

569:                                              ; preds = %378
  %570 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %571 = load ptr, ptr %570, align 8, !tbaa !16
  %572 = load i32, ptr %571, align 8
  %573 = and i32 %572, 65535
  %574 = icmp eq i32 %573, 63
  br i1 %574, label %575, label %657

575:                                              ; preds = %569
  %576 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %577 = load ptr, ptr %576, align 8, !tbaa !16
  %578 = load i32, ptr %577, align 8
  %579 = and i32 %578, 65535
  %580 = icmp eq i32 %579, 30
  br i1 %580, label %581, label %657

581:                                              ; preds = %575
  %582 = getelementptr inbounds %struct.rtx_def, ptr %571, i64 0, i32 1, i32 0, i32 0, i64 1
  %583 = load ptr, ptr %582, align 8, !tbaa !16
  %584 = load i32, ptr %583, align 8
  %585 = and i32 %584, 65535
  %586 = icmp eq i32 %585, 30
  br i1 %586, label %587, label %657

587:                                              ; preds = %581
  %588 = getelementptr inbounds %struct.rtx_def, ptr %577, i64 0, i32 1
  %589 = load i64, ptr %588, align 8, !tbaa !16
  %590 = getelementptr inbounds %struct.rtx_def, ptr %583, i64 0, i32 1
  %591 = load i64, ptr %590, align 8, !tbaa !16
  %592 = sub nsw i64 0, %591
  %593 = icmp eq i64 %589, %592
  br i1 %593, label %594, label %657

594:                                              ; preds = %587
  %595 = tail call i32 @exact_log2(i64 noundef %591) #25
  %596 = icmp sgt i32 %595, -1
  br i1 %596, label %603, label %597

597:                                              ; preds = %594
  %598 = load ptr, ptr %576, align 8, !tbaa !16
  %599 = getelementptr inbounds %struct.rtx_def, ptr %598, i64 0, i32 1
  %600 = load i64, ptr %599, align 8, !tbaa !16
  %601 = tail call i32 @exact_log2(i64 noundef %600) #25
  %602 = icmp sgt i32 %601, -1
  br i1 %602, label %603, label %657

603:                                              ; preds = %597, %594
  %604 = phi i32 [ %595, %594 ], [ %601, %597 ]
  %605 = zext i32 %296 to i64
  %606 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %605
  %607 = load i8, ptr %606, align 1, !tbaa !16
  %608 = icmp ult i8 %607, 9
  br i1 %608, label %609, label %657

609:                                              ; preds = %603
  %610 = load ptr, ptr %570, align 8, !tbaa !16
  %611 = getelementptr inbounds %struct.rtx_def, ptr %610, i64 0, i32 1
  %612 = load ptr, ptr %611, align 8, !tbaa !16
  %613 = load i32, ptr %612, align 8
  %614 = trunc i32 %613 to i16
  switch i16 %614, label %657 [
    i16 61, label %615
    i16 99, label %632
  ]

615:                                              ; preds = %609
  %616 = getelementptr inbounds %struct.rtx_def, ptr %612, i64 0, i32 1, i32 0, i32 0, i64 1
  %617 = load ptr, ptr %616, align 8, !tbaa !16
  %618 = load i32, ptr %617, align 8
  %619 = and i32 %618, 65535
  %620 = icmp eq i32 %619, 30
  br i1 %620, label %621, label %657

621:                                              ; preds = %615
  %622 = getelementptr inbounds %struct.rtx_def, ptr %617, i64 0, i32 1
  %623 = load i64, ptr %622, align 8, !tbaa !16
  %624 = add nuw nsw i32 %604, 1
  %625 = zext i32 %624 to i64
  %626 = shl nsw i64 -1, %625
  %627 = xor i64 %626, -1
  %628 = icmp eq i64 %623, %627
  br i1 %628, label %629, label %657

629:                                              ; preds = %621
  %630 = getelementptr inbounds %struct.rtx_def, ptr %612, i64 0, i32 1
  %631 = load ptr, ptr %630, align 8, !tbaa !16
  br label %645

632:                                              ; preds = %609
  %633 = getelementptr inbounds %struct.rtx_def, ptr %612, i64 0, i32 1
  %634 = load ptr, ptr %633, align 8, !tbaa !16
  %635 = load i32, ptr %634, align 8
  %636 = lshr i32 %635, 16
  %637 = and i32 %636, 255
  %638 = zext i32 %637 to i64
  %639 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %638
  %640 = load i8, ptr %639, align 1, !tbaa !16
  %641 = zext i8 %640 to i32
  %642 = shl nuw nsw i32 %641, 3
  %643 = add nuw i32 %604, 1
  %644 = icmp eq i32 %642, %643
  br i1 %644, label %645, label %657

645:                                              ; preds = %629, %632
  %646 = phi i32 [ %624, %629 ], [ %643, %632 ]
  %647 = phi ptr [ %631, %629 ], [ %634, %632 ]
  %648 = zext i8 %607 to i32
  %649 = shl nuw nsw i32 %648, 3
  %650 = sub nsw i32 %649, %646
  %651 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %296, ptr noundef %647, i32 noundef %650)
  %652 = load i8, ptr %606, align 1, !tbaa !16
  %653 = zext i8 %652 to i32
  %654 = shl nuw nsw i32 %653, 3
  %655 = sub nsw i32 %654, %646
  %656 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 67, i32 noundef %296, ptr noundef %651, i32 noundef %655)
  br label %1088

657:                                              ; preds = %609, %615, %621, %632, %603, %597, %587, %581, %575, %569
  %658 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %659 = load ptr, ptr %658, align 8, !tbaa !16
  %660 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %661 = icmp eq ptr %659, %660
  br i1 %661, label %662, label %691

662:                                              ; preds = %657
  %663 = load ptr, ptr %570, align 8, !tbaa !16
  %664 = load i32, ptr %663, align 8
  %665 = trunc i32 %664 to i16
  switch i16 %665, label %672 [
    i16 37, label %691
    i16 39, label %666
  ]

666:                                              ; preds = %662
  %667 = getelementptr inbounds %struct.rtx_def, ptr %663, i64 0, i32 1
  %668 = load ptr, ptr %667, align 8, !tbaa !16
  %669 = load i32, ptr %668, align 8
  %670 = and i32 %669, 65535
  %671 = icmp eq i32 %670, 37
  br i1 %671, label %691, label %672

672:                                              ; preds = %662, %666
  %673 = tail call i64 @nonzero_bits(ptr noundef nonnull %663, i32 noundef %296) #25
  %674 = icmp eq i64 %673, 1
  br i1 %674, label %675, label %691

675:                                              ; preds = %672
  %676 = load ptr, ptr %570, align 8, !tbaa !16
  %677 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %678 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 63, i32 noundef %296, ptr noundef %676, ptr noundef %677) #25
  %679 = zext i32 %296 to i64
  %680 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %679
  %681 = load i8, ptr %680, align 1, !tbaa !16
  %682 = zext i8 %681 to i32
  %683 = shl nuw nsw i32 %682, 3
  %684 = add nsw i32 %683, -1
  %685 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %296, ptr noundef %678, i32 noundef %684)
  %686 = load i8, ptr %680, align 1, !tbaa !16
  %687 = zext i8 %686 to i32
  %688 = shl nuw nsw i32 %687, 3
  %689 = add nsw i32 %688, -1
  %690 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 67, i32 noundef %296, ptr noundef %685, i32 noundef %689)
  br label %1088

691:                                              ; preds = %662, %672, %666, %657
  %692 = zext i32 %296 to i64
  %693 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %692
  %694 = load i8, ptr %693, align 1, !tbaa !16
  %695 = icmp ult i8 %694, 9
  br i1 %695, label %696, label %1087

696:                                              ; preds = %691
  %697 = load ptr, ptr %570, align 8, !tbaa !16
  %698 = tail call i64 @nonzero_bits(ptr noundef %697, i32 noundef %296) #25
  %699 = load ptr, ptr %658, align 8, !tbaa !16
  %700 = tail call i64 @nonzero_bits(ptr noundef %699, i32 noundef %296) #25
  %701 = and i64 %700, %698
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %703, label %1087

703:                                              ; preds = %696
  %704 = load ptr, ptr %570, align 8, !tbaa !16
  %705 = load ptr, ptr %658, align 8, !tbaa !16
  %706 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %296, ptr noundef %704, ptr noundef %705) #25
  %707 = tail call fastcc ptr @combine_simplify_rtx(ptr noundef %706, i32 noundef %296, i32 noundef %2)
  %708 = load i32, ptr %707, align 8
  %709 = and i32 %708, 65535
  %710 = icmp eq i32 %709, 25
  %711 = icmp eq ptr %707, %706
  %712 = or i1 %711, %710
  br i1 %712, label %1087, label %1088

713:                                              ; preds = %378
  %714 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %715 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %716 = load ptr, ptr %715, align 8, !tbaa !16
  %717 = load i32, ptr %716, align 8
  %718 = and i32 %717, 65535
  %719 = icmp eq i32 %718, 61
  br i1 %719, label %720, label %1087

720:                                              ; preds = %713
  %721 = getelementptr inbounds %struct.rtx_def, ptr %716, i64 0, i32 1, i32 0, i32 0, i64 1
  %722 = load ptr, ptr %721, align 8, !tbaa !16
  %723 = load i32, ptr %722, align 8
  %724 = and i32 %723, 65535
  %725 = icmp eq i32 %724, 30
  br i1 %725, label %726, label %1087

726:                                              ; preds = %720
  %727 = getelementptr inbounds %struct.rtx_def, ptr %722, i64 0, i32 1
  %728 = load i64, ptr %727, align 8, !tbaa !16
  %729 = sub nsw i64 0, %728
  %730 = tail call i32 @exact_log2(i64 noundef %729) #25
  %731 = icmp sgt i32 %730, -1
  br i1 %731, label %732, label %1087

732:                                              ; preds = %726
  %733 = load ptr, ptr %715, align 8, !tbaa !16
  %734 = getelementptr inbounds %struct.rtx_def, ptr %733, i64 0, i32 1
  %735 = load ptr, ptr %734, align 8, !tbaa !16
  %736 = load ptr, ptr %714, align 8, !tbaa !16
  %737 = tail call i32 @rtx_equal_p(ptr noundef %735, ptr noundef %736) #25
  %738 = icmp eq i32 %737, 0
  br i1 %738, label %1087, label %739

739:                                              ; preds = %732
  %740 = load ptr, ptr %714, align 8, !tbaa !16
  %741 = load ptr, ptr %715, align 8, !tbaa !16
  %742 = getelementptr inbounds %struct.rtx_def, ptr %741, i64 0, i32 1, i32 0, i32 0, i64 1
  %743 = load ptr, ptr %742, align 8, !tbaa !16
  %744 = getelementptr inbounds %struct.rtx_def, ptr %743, i64 0, i32 1
  %745 = load i64, ptr %744, align 8, !tbaa !16
  %746 = xor i64 %745, -1
  %747 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %296, ptr noundef %740, i64 noundef %746)
  br label %1088

748:                                              ; preds = %378
  %749 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %750 = load ptr, ptr %749, align 8, !tbaa !16
  %751 = load i32, ptr %750, align 8
  %752 = and i32 %751, 65535
  %753 = icmp eq i32 %752, 49
  br i1 %753, label %754, label %757

754:                                              ; preds = %748
  %755 = tail call fastcc ptr @distribute_and_simplify_rtx(ptr noundef nonnull %307, i32 noundef 0)
  %756 = icmp eq ptr %755, null
  br i1 %756, label %757, label %1088

757:                                              ; preds = %754, %748
  %758 = zext i32 %296 to i64
  %759 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %758
  %760 = load i8, ptr %759, align 1, !tbaa !16
  switch i8 %760, label %761 [
    i8 8, label %766
    i8 9, label %766
    i8 11, label %766
  ]

761:                                              ; preds = %757
  %762 = icmp eq i8 %760, 17
  %763 = load i32, ptr @flag_associative_math, align 4
  %764 = icmp ne i32 %763, 0
  %765 = select i1 %762, i1 %764, i1 false
  br i1 %765, label %769, label %1087

766:                                              ; preds = %757, %757, %757
  %767 = load i32, ptr @flag_associative_math, align 4, !tbaa !20
  %768 = icmp eq i32 %767, 0
  br i1 %768, label %1087, label %769

769:                                              ; preds = %761, %766
  %770 = load ptr, ptr %749, align 8, !tbaa !16
  %771 = load i32, ptr %770, align 8
  %772 = and i32 %771, 65535
  %773 = icmp eq i32 %772, 55
  br i1 %773, label %774, label %1087

774:                                              ; preds = %769
  %775 = getelementptr inbounds %struct.rtx_def, ptr %770, i64 0, i32 1
  %776 = load ptr, ptr %775, align 8, !tbaa !16
  %777 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %778 = load ptr, ptr %777, align 8, !tbaa !16
  %779 = tail call ptr @simplify_binary_operation(i32 noundef 52, i32 noundef %296, ptr noundef %776, ptr noundef %778) #25
  %780 = icmp eq ptr %779, null
  br i1 %780, label %1087, label %781

781:                                              ; preds = %774
  %782 = load ptr, ptr %749, align 8, !tbaa !16
  %783 = getelementptr inbounds %struct.rtx_def, ptr %782, i64 0, i32 1, i32 0, i32 0, i64 1
  %784 = load ptr, ptr %783, align 8, !tbaa !16
  %785 = tail call ptr @simplify_gen_binary(i32 noundef 55, i32 noundef %296, ptr noundef nonnull %779, ptr noundef %784) #25
  br label %1088

786:                                              ; preds = %378
  %787 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %788 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %789 = load ptr, ptr %788, align 8, !tbaa !16
  %790 = load i32, ptr %789, align 8
  %791 = and i32 %790, 65535
  %792 = icmp eq i32 %791, 30
  br i1 %792, label %793, label %1087

793:                                              ; preds = %786
  %794 = getelementptr inbounds %struct.rtx_def, ptr %789, i64 0, i32 1
  %795 = load i64, ptr %794, align 8, !tbaa !16
  %796 = tail call i32 @exact_log2(i64 noundef %795) #25
  %797 = icmp sgt i32 %796, -1
  br i1 %797, label %798, label %1087

798:                                              ; preds = %793
  %799 = load ptr, ptr %787, align 8, !tbaa !16
  %800 = load i32, ptr %799, align 8
  %801 = and i32 %800, 65535
  %802 = add nsw i32 %801, -65
  %803 = icmp ult i32 %802, 5
  br i1 %803, label %804, label %1087

804:                                              ; preds = %798
  %805 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %296, ptr noundef nonnull %799, i32 noundef %796)
  br label %1088

806:                                              ; preds = %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378, %378
  %807 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %808 = load ptr, ptr %807, align 8, !tbaa !16
  %809 = load i32, ptr %808, align 8
  %810 = and i32 %809, 65535
  %811 = icmp eq i32 %810, 48
  br i1 %811, label %822, label %812

812:                                              ; preds = %806
  %813 = lshr i32 %809, 16
  %814 = and i32 %813, 255
  %815 = zext i32 %814 to i64
  %816 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %815
  %817 = load i8, ptr %816, align 1, !tbaa !16
  %818 = icmp eq i8 %817, 1
  br i1 %818, label %1087, label %819

819:                                              ; preds = %812
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #25
  store ptr %808, ptr %8, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #25
  %820 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %821 = load ptr, ptr %820, align 8, !tbaa !16
  store ptr %821, ptr %9, align 8, !tbaa !5
  br label %828

822:                                              ; preds = %806
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #25
  %823 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %824 = getelementptr inbounds %struct.rtx_def, ptr %808, i64 0, i32 1, i32 0, i32 0, i64 1
  %825 = load ptr, ptr %824, align 8, !tbaa !16
  store ptr %825, ptr %9, align 8, !tbaa !5
  %826 = getelementptr inbounds %struct.rtx_def, ptr %808, i64 0, i32 1
  %827 = load ptr, ptr %826, align 8, !tbaa !16
  store ptr %827, ptr %8, align 8, !tbaa !5
  br label %828

828:                                              ; preds = %819, %822
  %829 = phi ptr [ %823, %822 ], [ %820, %819 ]
  %830 = call fastcc i32 @simplify_comparison(i32 noundef %305, ptr noundef nonnull %8, ptr noundef nonnull %9)
  switch i32 %830, label %970 [
    i32 80, label %831
    i32 81, label %876
  ]

831:                                              ; preds = %828
  %832 = zext i32 %296 to i64
  %833 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %832
  %834 = load i8, ptr %833, align 1, !tbaa !16
  %835 = icmp eq i8 %834, 2
  br i1 %835, label %836, label %970

836:                                              ; preds = %831
  %837 = load ptr, ptr %9, align 8, !tbaa !5
  %838 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %839 = icmp eq ptr %837, %838
  br i1 %839, label %840, label %855

840:                                              ; preds = %836
  %841 = load ptr, ptr %8, align 8, !tbaa !5
  %842 = load i32, ptr %841, align 8
  %843 = lshr i32 %842, 16
  %844 = and i32 %843, 255
  %845 = icmp eq i32 %296, %844
  br i1 %845, label %846, label %858

846:                                              ; preds = %840
  %847 = tail call i64 @nonzero_bits(ptr noundef nonnull %841, i32 noundef %296) #25
  %848 = icmp eq i64 %847, 1
  br i1 %848, label %851, label %849

849:                                              ; preds = %846
  %850 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %855

851:                                              ; preds = %846
  %852 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %853 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %841)
  %854 = tail call ptr %852(i32 noundef %296, ptr noundef %853) #25
  br label %976

855:                                              ; preds = %849, %836
  %856 = phi ptr [ %850, %849 ], [ %838, %836 ]
  %857 = icmp eq ptr %837, %856
  br i1 %857, label %858, label %923

858:                                              ; preds = %840, %855
  %859 = load ptr, ptr %8, align 8, !tbaa !5
  %860 = load i32, ptr %859, align 8
  %861 = lshr i32 %860, 16
  %862 = and i32 %861, 255
  %863 = icmp eq i32 %296, %862
  br i1 %863, label %864, label %923

864:                                              ; preds = %858
  %865 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %859, i32 noundef %296) #25
  %866 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %832
  %867 = load i8, ptr %866, align 1, !tbaa !16
  %868 = zext i8 %867 to i32
  %869 = shl nuw nsw i32 %868, 3
  %870 = icmp eq i32 %865, %869
  br i1 %870, label %871, label %923

871:                                              ; preds = %864
  %872 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %859)
  %873 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %874 = tail call ptr %873(i32 noundef %296, ptr noundef %872) #25
  %875 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %296, ptr noundef %874, i32 noundef %296) #25
  br label %976

876:                                              ; preds = %828
  %877 = zext i32 %296 to i64
  %878 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %877
  %879 = load i8, ptr %878, align 1, !tbaa !16
  %880 = icmp eq i8 %879, 2
  br i1 %880, label %881, label %970

881:                                              ; preds = %876
  %882 = load ptr, ptr %9, align 8, !tbaa !5
  %883 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %884 = icmp eq ptr %882, %883
  br i1 %884, label %885, label %902

885:                                              ; preds = %881
  %886 = load ptr, ptr %8, align 8, !tbaa !5
  %887 = load i32, ptr %886, align 8
  %888 = lshr i32 %887, 16
  %889 = and i32 %888, 255
  %890 = icmp eq i32 %296, %889
  br i1 %890, label %891, label %905

891:                                              ; preds = %885
  %892 = tail call i64 @nonzero_bits(ptr noundef nonnull %886, i32 noundef %296) #25
  %893 = icmp eq i64 %892, 1
  br i1 %893, label %896, label %894

894:                                              ; preds = %891
  %895 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %902

896:                                              ; preds = %891
  %897 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %886)
  %898 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %899 = tail call ptr %898(i32 noundef %296, ptr noundef %897) #25
  %900 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %901 = tail call ptr @simplify_gen_binary(i32 noundef 63, i32 noundef %296, ptr noundef %899, ptr noundef %900) #25
  br label %976

902:                                              ; preds = %894, %881
  %903 = phi ptr [ %895, %894 ], [ %883, %881 ]
  %904 = icmp eq ptr %882, %903
  br i1 %904, label %905, label %970

905:                                              ; preds = %885, %902
  %906 = load ptr, ptr %8, align 8, !tbaa !5
  %907 = load i32, ptr %906, align 8
  %908 = lshr i32 %907, 16
  %909 = and i32 %908, 255
  %910 = icmp eq i32 %296, %909
  br i1 %910, label %911, label %970

911:                                              ; preds = %905
  %912 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %906, i32 noundef %296) #25
  %913 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %877
  %914 = load i8, ptr %913, align 1, !tbaa !16
  %915 = zext i8 %914 to i32
  %916 = shl nuw nsw i32 %915, 3
  %917 = icmp eq i32 %912, %916
  br i1 %917, label %918, label %970

918:                                              ; preds = %911
  %919 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %906)
  %920 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %921 = tail call ptr %920(i32 noundef %296, ptr noundef %919) #25
  %922 = tail call ptr @plus_constant(ptr noundef %921, i64 noundef 1) #25
  br label %976

923:                                              ; preds = %855, %858, %864
  %924 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %832
  %925 = load i8, ptr %924, align 1, !tbaa !16
  %926 = icmp ult i8 %925, 9
  br i1 %926, label %927, label %970

927:                                              ; preds = %923
  %928 = zext i8 %925 to i64
  %929 = shl nuw nsw i64 %928, 3
  %930 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %832
  %931 = load i64, ptr %930, align 8, !tbaa !83
  %932 = and i64 %931, 1
  %933 = add nuw nsw i64 %929, 4294967295
  %934 = and i64 %933, 4294967295
  %935 = shl nuw i64 1, %934
  %936 = icmp eq i64 %932, %935
  br i1 %936, label %937, label %970

937:                                              ; preds = %927
  %938 = load ptr, ptr %9, align 8, !tbaa !5
  %939 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %940 = icmp eq ptr %938, %939
  br i1 %940, label %941, label %970

941:                                              ; preds = %937
  %942 = load ptr, ptr %8, align 8, !tbaa !5
  %943 = load i32, ptr %942, align 8
  %944 = lshr i32 %943, 16
  %945 = and i32 %944, 255
  %946 = icmp eq i32 %296, %945
  br i1 %946, label %947, label %970

947:                                              ; preds = %941
  %948 = tail call i64 @nonzero_bits(ptr noundef nonnull %942, i32 noundef %296) #25
  %949 = tail call i32 @exact_log2(i64 noundef %948) #25
  %950 = icmp sgt i32 %949, -1
  br i1 %950, label %951, label %970

951:                                              ; preds = %947
  %952 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %942)
  %953 = load i8, ptr %924, align 1, !tbaa !16
  %954 = zext i8 %953 to i32
  %955 = shl nuw nsw i32 %954, 3
  %956 = xor i32 %949, -1
  %957 = add nsw i32 %955, %956
  %958 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %296, ptr noundef %952, i32 noundef %957)
  %959 = load i32, ptr %958, align 8
  %960 = and i32 %959, 65535
  %961 = icmp eq i32 %960, 61
  br i1 %961, label %962, label %976

962:                                              ; preds = %951
  %963 = getelementptr inbounds %struct.rtx_def, ptr %958, i64 0, i32 1, i32 0, i32 0, i64 1
  %964 = load ptr, ptr %963, align 8, !tbaa !16
  %965 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  %966 = icmp eq ptr %964, %965
  br i1 %966, label %967, label %976

967:                                              ; preds = %962
  %968 = getelementptr inbounds %struct.rtx_def, ptr %958, i64 0, i32 1
  %969 = load ptr, ptr %968, align 8, !tbaa !16
  br label %976

970:                                              ; preds = %831, %828, %911, %905, %902, %876, %947, %941, %937, %927, %923
  %971 = icmp eq i32 %830, %305
  %972 = load ptr, ptr %8, align 8, !tbaa !5
  br i1 %971, label %978, label %973

973:                                              ; preds = %970
  %974 = load ptr, ptr %9, align 8, !tbaa !5
  %975 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %830, i32 noundef %296, ptr noundef %972, ptr noundef %974) #25
  br label %976

976:                                              ; preds = %851, %871, %896, %918, %967, %973, %962, %951
  %977 = phi ptr [ %958, %951 ], [ %958, %962 ], [ %975, %973 ], [ %969, %967 ], [ %922, %918 ], [ %901, %896 ], [ %875, %871 ], [ %854, %851 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #25
  br label %1088

978:                                              ; preds = %970
  tail call fastcc void @do_SUBST(ptr noundef nonnull %807, ptr noundef %972)
  %979 = load ptr, ptr %9, align 8, !tbaa !5
  tail call fastcc void @do_SUBST(ptr noundef nonnull %829, ptr noundef %979)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #25
  br label %1087

980:                                              ; preds = %378
  %981 = tail call fastcc ptr @simplify_if_then_else(ptr noundef nonnull %307)
  br label %1088

982:                                              ; preds = %378, %378, %378, %378
  %983 = icmp eq i32 %2, 0
  br i1 %983, label %984, label %1088

984:                                              ; preds = %982
  %985 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %307)
  br label %1088

986:                                              ; preds = %378
  %987 = tail call fastcc ptr @simplify_set(ptr noundef nonnull %307)
  br label %1088

988:                                              ; preds = %378, %378
  %989 = load i32, ptr %307, align 8
  %990 = lshr i32 %989, 16
  %991 = and i32 %990, 255
  %992 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %993 = load ptr, ptr %992, align 8, !tbaa !16
  %994 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %995 = load ptr, ptr %994, align 8, !tbaa !16
  %996 = trunc i32 %989 to i16
  switch i16 %996, label %1062 [
    i16 61, label %997
    i16 62, label %1048
  ]

997:                                              ; preds = %988
  %998 = load i32, ptr %995, align 8
  %999 = and i32 %998, 65535
  %1000 = icmp eq i32 %999, 30
  br i1 %1000, label %1001, label %1031

1001:                                             ; preds = %997
  %1002 = zext i32 %991 to i64
  %1003 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1002
  %1004 = load i8, ptr %1003, align 1, !tbaa !16
  %1005 = icmp ult i8 %1004, 9
  %1006 = getelementptr inbounds %struct.rtx_def, ptr %995, i64 0, i32 1
  %1007 = load i64, ptr %1006, align 8, !tbaa !16
  %1008 = icmp sgt i64 %1007, 0
  %1009 = select i1 %1005, i1 true, i1 %1008
  br i1 %1009, label %1010, label %1031

1010:                                             ; preds = %1001
  %1011 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %991, ptr noundef %993, i64 noundef %1007) #26
  %1012 = icmp eq ptr %1011, null
  br i1 %1012, label %1013, label %1021

1013:                                             ; preds = %1010
  %1014 = load i32, ptr %307, align 8
  %1015 = lshr i32 %1014, 16
  %1016 = and i32 %1015, 255
  %1017 = icmp eq i32 %1016, %991
  br i1 %1017, label %1021, label %1018

1018:                                             ; preds = %1013
  %1019 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1020 = tail call ptr %1019(i32 noundef %991, ptr noundef nonnull %307) #25
  br label %1021

1021:                                             ; preds = %1018, %1013, %1010
  %1022 = phi ptr [ %1011, %1010 ], [ %1020, %1018 ], [ %307, %1013 ]
  %1023 = load i32, ptr %1022, align 8
  %1024 = and i32 %1023, 65535
  %1025 = icmp eq i32 %1024, 61
  br i1 %1025, label %1026, label %1088

1026:                                             ; preds = %1021
  %1027 = getelementptr inbounds %struct.rtx_def, ptr %1022, i64 0, i32 1
  %1028 = load ptr, ptr %1027, align 8, !tbaa !16
  %1029 = getelementptr inbounds %struct.rtx_def, ptr %1022, i64 0, i32 1, i32 0, i32 0, i64 1
  %1030 = load ptr, ptr %1029, align 8, !tbaa !16
  br label %1031

1031:                                             ; preds = %1026, %1001, %997
  %1032 = phi ptr [ %1030, %1026 ], [ %995, %997 ], [ %995, %1001 ]
  %1033 = phi ptr [ %1028, %1026 ], [ %993, %997 ], [ %993, %1001 ]
  %1034 = phi ptr [ %1022, %1026 ], [ %307, %997 ], [ %307, %1001 ]
  %1035 = load i32, ptr %1033, align 8
  %1036 = and i32 %1035, 65534
  %1037 = icmp eq i32 %1036, 62
  br i1 %1037, label %1038, label %1041

1038:                                             ; preds = %1031
  %1039 = tail call fastcc ptr @distribute_and_simplify_rtx(ptr noundef nonnull %1034, i32 noundef 0)
  %1040 = icmp eq ptr %1039, null
  br i1 %1040, label %1041, label %1088

1041:                                             ; preds = %1038, %1031
  %1042 = load i32, ptr %1032, align 8
  %1043 = and i32 %1042, 65534
  %1044 = icmp eq i32 %1043, 62
  br i1 %1044, label %1045, label %1063

1045:                                             ; preds = %1041
  %1046 = tail call fastcc ptr @distribute_and_simplify_rtx(ptr noundef nonnull %1034, i32 noundef 1)
  %1047 = icmp eq ptr %1046, null
  br i1 %1047, label %1063, label %1088

1048:                                             ; preds = %988
  %1049 = load i32, ptr %993, align 8
  %1050 = and i32 %1049, 65535
  %1051 = icmp eq i32 %1050, 61
  br i1 %1051, label %1052, label %1055

1052:                                             ; preds = %1048
  %1053 = tail call fastcc ptr @distribute_and_simplify_rtx(ptr noundef nonnull %307, i32 noundef 0)
  %1054 = icmp eq ptr %1053, null
  br i1 %1054, label %1055, label %1088

1055:                                             ; preds = %1052, %1048
  %1056 = load i32, ptr %995, align 8
  %1057 = and i32 %1056, 65535
  %1058 = icmp eq i32 %1057, 61
  br i1 %1058, label %1059, label %1063

1059:                                             ; preds = %1055
  %1060 = tail call fastcc ptr @distribute_and_simplify_rtx(ptr noundef nonnull %307, i32 noundef 1)
  %1061 = icmp eq ptr %1060, null
  br i1 %1061, label %1063, label %1088

1062:                                             ; preds = %988
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 6265, ptr noundef nonnull @.str.5) #25
  br label %1063

1063:                                             ; preds = %1062, %1059, %1055, %1045, %1041
  %1064 = phi ptr [ %307, %1062 ], [ %307, %1059 ], [ %307, %1055 ], [ %1034, %1045 ], [ %1034, %1041 ]
  br label %1088

1065:                                             ; preds = %378, %378, %378, %378, %378
  %1066 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1, i32 0, i32 0, i64 1
  %1067 = load ptr, ptr %1066, align 8, !tbaa !16
  %1068 = load i32, ptr %1067, align 8
  %1069 = and i32 %1068, 65535
  %1070 = icmp eq i32 %1069, 30
  br i1 %1070, label %1071, label %1087

1071:                                             ; preds = %1065
  %1072 = getelementptr inbounds %struct.rtx_def, ptr %307, i64 0, i32 1
  %1073 = load ptr, ptr %1072, align 8, !tbaa !16
  %1074 = getelementptr inbounds %struct.rtx_def, ptr %1067, i64 0, i32 1
  %1075 = load i64, ptr %1074, align 8, !tbaa !16
  %1076 = trunc i64 %1075 to i32
  %1077 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef %305, i32 noundef %296, ptr noundef %1073, i32 noundef %1076) #26
  %1078 = icmp eq ptr %1077, null
  br i1 %1078, label %1079, label %1088

1079:                                             ; preds = %1071
  %1080 = load i32, ptr %307, align 8
  %1081 = lshr i32 %1080, 16
  %1082 = and i32 %1081, 255
  %1083 = icmp eq i32 %1082, %296
  br i1 %1083, label %1088, label %1084

1084:                                             ; preds = %1079
  %1085 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1086 = tail call ptr %1085(i32 noundef %296, ptr noundef nonnull %307) #25
  br label %1088

1087:                                             ; preds = %445, %774, %978, %798, %378, %1065, %812, %786, %793, %761, %766, %769, %713, %720, %726, %732, %691, %696, %703, %560, %566, %538, %541, %546, %549, %510, %473, %479, %506, %429, %437, %415, %379
  br label %1088

1088:                                             ; preds = %483, %500, %1084, %1079, %1071, %1063, %1059, %1052, %1045, %1038, %1021, %976, %781, %374, %236, %982, %424, %506, %703, %754, %1087, %986, %984, %980, %804, %739, %675, %645, %556, %534, %469, %442, %411
  %1089 = phi ptr [ %307, %1087 ], [ %987, %986 ], [ %985, %984 ], [ %981, %980 ], [ %805, %804 ], [ %785, %781 ], [ %755, %754 ], [ %747, %739 ], [ %656, %645 ], [ %707, %703 ], [ %690, %675 ], [ %537, %534 ], [ %559, %556 ], [ %472, %469 ], [ %496, %506 ], [ %414, %411 ], [ %444, %442 ], [ %427, %424 ], [ %377, %374 ], [ %237, %236 ], [ %307, %982 ], [ %977, %976 ], [ %1064, %1063 ], [ %1060, %1059 ], [ %1053, %1052 ], [ %1046, %1045 ], [ %1039, %1038 ], [ %1022, %1021 ], [ %1077, %1071 ], [ %1086, %1084 ], [ %307, %1079 ], [ %496, %500 ], [ %496, %483 ]
  ret ptr %1089
}

declare zeroext i8 @swap_commutative_operands_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @if_then_else_cond(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2) unnamed_addr #9 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca ptr, align 8
  %8 = load i32, ptr %0, align 8
  %9 = freeze i32 %8
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  %12 = and i32 %9, 65535
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #25
  %13 = icmp eq i32 %12, 80
  %14 = and i32 %9, 65534
  %15 = icmp eq i32 %14, 80
  br i1 %15, label %16, label %29

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !16
  %19 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %20 = icmp eq ptr %18, %19
  br i1 %20, label %21, label %29

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %23 = load ptr, ptr @const_true_rtx, align 8
  %24 = select i1 %13, ptr %23, ptr %18
  store ptr %24, ptr %1, align 8, !tbaa !5
  %25 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %26 = load ptr, ptr @const_true_rtx, align 8
  %27 = select i1 %13, ptr %25, ptr %26
  store ptr %27, ptr %2, align 8, !tbaa !5
  %28 = load ptr, ptr %22, align 8, !tbaa !16
  br label %383

29:                                               ; preds = %3, %16
  %30 = zext i32 %12 to i64
  %31 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %30
  %32 = load i32, ptr %31, align 4, !tbaa !16
  %33 = icmp eq i32 %32, 4
  br i1 %33, label %34, label %52

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = call fastcc ptr @if_then_else_cond(ptr noundef %36, ptr noundef nonnull %4, ptr noundef nonnull %6)
  %38 = icmp eq ptr %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %34
  %40 = load ptr, ptr %4, align 8, !tbaa !5
  %41 = load ptr, ptr %35, align 8, !tbaa !16
  %42 = load i32, ptr %41, align 8
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  %45 = tail call ptr @simplify_gen_unary(i32 noundef %12, i32 noundef %11, ptr noundef %40, i32 noundef %44) #25
  store ptr %45, ptr %1, align 8, !tbaa !5
  %46 = load ptr, ptr %6, align 8, !tbaa !5
  %47 = load ptr, ptr %35, align 8, !tbaa !16
  %48 = load i32, ptr %47, align 8
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 255
  %51 = tail call ptr @simplify_gen_unary(i32 noundef %12, i32 noundef %11, ptr noundef %46, i32 noundef %50) #25
  store ptr %51, ptr %2, align 8, !tbaa !5
  br label %383

52:                                               ; preds = %34, %29
  %53 = icmp eq i32 %12, 48
  br i1 %53, label %382, label %54

54:                                               ; preds = %52
  %55 = load i32, ptr %0, align 8
  %56 = and i32 %55, 65535
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %57
  %59 = load i32, ptr %58, align 4, !tbaa !16
  %60 = icmp ult i32 %59, 4
  br i1 %60, label %61, label %266

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %63 = load ptr, ptr %62, align 8, !tbaa !16
  %64 = call fastcc ptr @if_then_else_cond(ptr noundef %63, ptr noundef nonnull %4, ptr noundef nonnull %6)
  %65 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !16
  %67 = call fastcc ptr @if_then_else_cond(ptr noundef %66, ptr noundef nonnull %5, ptr noundef nonnull %7)
  %68 = icmp ne ptr %64, null
  %69 = icmp ne ptr %67, null
  %70 = select i1 %68, i1 true, i1 %69
  br i1 %70, label %71, label %108

71:                                               ; preds = %61
  %72 = select i1 %68, i1 %69, i1 false
  br i1 %72, label %73, label %76

73:                                               ; preds = %71
  %74 = tail call i32 @rtx_equal_p(ptr noundef nonnull %64, ptr noundef nonnull %67) #25
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %108, label %86

76:                                               ; preds = %71
  %77 = icmp eq ptr %64, null
  br i1 %77, label %78, label %81

78:                                               ; preds = %76
  %79 = load ptr, ptr %4, align 8, !tbaa !5
  %80 = tail call ptr @copy_rtx(ptr noundef %79) #25
  store ptr %80, ptr %4, align 8, !tbaa !5
  br label %86

81:                                               ; preds = %76
  %82 = icmp eq ptr %67, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  %84 = load ptr, ptr %5, align 8, !tbaa !5
  %85 = tail call ptr @copy_rtx(ptr noundef %84) #25
  store ptr %85, ptr %5, align 8, !tbaa !5
  br label %86

86:                                               ; preds = %73, %81, %83, %78
  %87 = load i32, ptr %0, align 8
  %88 = and i32 %87, 65535
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %89
  %91 = load i32, ptr %90, align 4, !tbaa !16
  %92 = icmp ult i32 %91, 2
  %93 = load ptr, ptr %4, align 8, !tbaa !5
  %94 = load ptr, ptr %5, align 8, !tbaa !5
  br i1 %92, label %95, label %100

95:                                               ; preds = %86
  %96 = tail call ptr @simplify_gen_relational(i32 noundef %12, i32 noundef %11, i32 noundef 0, ptr noundef %93, ptr noundef %94) #25
  store ptr %96, ptr %1, align 8, !tbaa !5
  %97 = load ptr, ptr %6, align 8, !tbaa !5
  %98 = load ptr, ptr %7, align 8, !tbaa !5
  %99 = tail call ptr @simplify_gen_relational(i32 noundef %12, i32 noundef %11, i32 noundef 0, ptr noundef %97, ptr noundef %98) #25
  br label %105

100:                                              ; preds = %86
  %101 = tail call ptr @simplify_gen_binary(i32 noundef %12, i32 noundef %11, ptr noundef %93, ptr noundef %94) #25
  store ptr %101, ptr %1, align 8, !tbaa !5
  %102 = load ptr, ptr %6, align 8, !tbaa !5
  %103 = load ptr, ptr %7, align 8, !tbaa !5
  %104 = tail call ptr @simplify_gen_binary(i32 noundef %12, i32 noundef %11, ptr noundef %102, ptr noundef %103) #25
  br label %105

105:                                              ; preds = %100, %95
  %106 = phi ptr [ %104, %100 ], [ %99, %95 ]
  store ptr %106, ptr %2, align 8, !tbaa !5
  %107 = select i1 %68, ptr %64, ptr %67
  br label %383

108:                                              ; preds = %61, %73
  %109 = icmp eq i32 %14, 62
  %110 = icmp eq i32 %12, 50
  br i1 %109, label %113, label %111

111:                                              ; preds = %108
  %112 = trunc i32 %9 to i16
  switch i16 %112, label %382 [
    i16 73, label %113
    i16 50, label %113
    i16 49, label %113
    i16 72, label %196
    i16 61, label %196
    i16 52, label %196
  ]

113:                                              ; preds = %111, %111, %111, %108
  %114 = load ptr, ptr %62, align 8, !tbaa !16
  %115 = load i32, ptr %114, align 8
  %116 = and i32 %115, 65535
  %117 = icmp eq i32 %116, 52
  br i1 %117, label %118, label %194

118:                                              ; preds = %113
  %119 = load ptr, ptr %65, align 8, !tbaa !16
  %120 = load i32, ptr %119, align 8
  %121 = and i32 %120, 65535
  %122 = icmp eq i32 %121, 52
  br i1 %122, label %123, label %194

123:                                              ; preds = %118
  %124 = getelementptr inbounds %struct.rtx_def, ptr %114, i64 0, i32 1
  %125 = getelementptr inbounds %struct.rtx_def, ptr %114, i64 0, i32 1, i32 0, i32 0, i64 1
  %126 = load ptr, ptr %125, align 8, !tbaa !16
  %127 = getelementptr inbounds %struct.rtx_def, ptr %119, i64 0, i32 1
  %128 = getelementptr inbounds %struct.rtx_def, ptr %119, i64 0, i32 1, i32 0, i32 0, i64 1
  %129 = load ptr, ptr %128, align 8, !tbaa !16
  %130 = load ptr, ptr %124, align 8, !tbaa !16
  %131 = load ptr, ptr %127, align 8, !tbaa !16
  %132 = load i32, ptr %130, align 8
  %133 = and i32 %132, 65535
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %134
  %136 = load i32, ptr %135, align 4, !tbaa !16
  %137 = icmp ult i32 %136, 2
  br i1 %137, label %138, label %194

138:                                              ; preds = %123
  %139 = load i32, ptr %131, align 8
  %140 = and i32 %139, 65535
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %141
  %143 = load i32, ptr %142, align 4, !tbaa !16
  %144 = icmp ult i32 %143, 2
  br i1 %144, label %145, label %194

145:                                              ; preds = %138
  %146 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %131, ptr noundef null) #25
  %147 = icmp eq i32 %133, %146
  br i1 %147, label %148, label %162

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.rtx_def, ptr %130, i64 0, i32 1
  %150 = load ptr, ptr %149, align 8, !tbaa !16
  %151 = getelementptr inbounds %struct.rtx_def, ptr %131, i64 0, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !16
  %153 = tail call i32 @rtx_equal_p(ptr noundef %150, ptr noundef %152) #25
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %162, label %155

155:                                              ; preds = %148
  %156 = getelementptr inbounds %struct.rtx_def, ptr %130, i64 0, i32 1, i32 0, i32 0, i64 1
  %157 = load ptr, ptr %156, align 8, !tbaa !16
  %158 = getelementptr inbounds %struct.rtx_def, ptr %131, i64 0, i32 1, i32 0, i32 0, i64 1
  %159 = load ptr, ptr %158, align 8, !tbaa !16
  %160 = tail call i32 @rtx_equal_p(ptr noundef %157, ptr noundef %159) #25
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %182

162:                                              ; preds = %155, %148, %145
  %163 = load i32, ptr %130, align 8
  %164 = and i32 %163, 65535
  %165 = tail call i32 @swap_condition(i32 noundef %164) #25
  %166 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %131, ptr noundef null) #25
  %167 = icmp eq i32 %165, %166
  br i1 %167, label %168, label %194

168:                                              ; preds = %162
  %169 = getelementptr inbounds %struct.rtx_def, ptr %130, i64 0, i32 1
  %170 = load ptr, ptr %169, align 8, !tbaa !16
  %171 = getelementptr inbounds %struct.rtx_def, ptr %131, i64 0, i32 1, i32 0, i32 0, i64 1
  %172 = load ptr, ptr %171, align 8, !tbaa !16
  %173 = tail call i32 @rtx_equal_p(ptr noundef %170, ptr noundef %172) #25
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %168
  %176 = getelementptr inbounds %struct.rtx_def, ptr %131, i64 0, i32 1
  %177 = getelementptr inbounds %struct.rtx_def, ptr %130, i64 0, i32 1, i32 0, i32 0, i64 1
  %178 = load ptr, ptr %177, align 8, !tbaa !16
  %179 = load ptr, ptr %176, align 8, !tbaa !16
  %180 = tail call i32 @rtx_equal_p(ptr noundef %178, ptr noundef %179) #25
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %194, label %182

182:                                              ; preds = %175, %155
  %183 = tail call i32 @side_effects_p(ptr noundef nonnull %0) #25
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %194

185:                                              ; preds = %182
  %186 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  %187 = tail call ptr @simplify_gen_binary(i32 noundef 52, i32 noundef %11, ptr noundef %126, ptr noundef %186) #25
  store ptr %187, ptr %1, align 8, !tbaa !5
  br i1 %110, label %188, label %190

188:                                              ; preds = %185
  %189 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %11, ptr noundef %129, i32 noundef %11) #25
  br label %190

190:                                              ; preds = %185, %188
  %191 = phi ptr [ %189, %188 ], [ %129, %185 ]
  %192 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  %193 = tail call ptr @simplify_gen_binary(i32 noundef 52, i32 noundef %11, ptr noundef %191, ptr noundef %192) #25
  store ptr %193, ptr %2, align 8, !tbaa !5
  br label %383

194:                                              ; preds = %182, %175, %168, %162, %138, %123, %118, %113
  %195 = trunc i32 %9 to i16
  switch i16 %195, label %382 [
    i16 72, label %196
    i16 61, label %196
    i16 52, label %196
  ]

196:                                              ; preds = %111, %111, %111, %194, %194, %194
  %197 = load ptr, ptr %62, align 8, !tbaa !16
  %198 = load i32, ptr %197, align 8
  %199 = and i32 %198, 65535
  %200 = icmp eq i32 %199, 52
  br i1 %200, label %201, label %382

201:                                              ; preds = %196
  %202 = load ptr, ptr %65, align 8, !tbaa !16
  %203 = load i32, ptr %202, align 8
  %204 = and i32 %203, 65535
  %205 = icmp eq i32 %204, 52
  br i1 %205, label %206, label %382

206:                                              ; preds = %201
  %207 = getelementptr inbounds %struct.rtx_def, ptr %197, i64 0, i32 1
  %208 = load ptr, ptr %207, align 8, !tbaa !16
  %209 = getelementptr inbounds %struct.rtx_def, ptr %202, i64 0, i32 1
  %210 = load ptr, ptr %209, align 8, !tbaa !16
  %211 = load i32, ptr %208, align 8
  %212 = and i32 %211, 65535
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %213
  %215 = load i32, ptr %214, align 4, !tbaa !16
  %216 = icmp ult i32 %215, 2
  br i1 %216, label %217, label %382

217:                                              ; preds = %206
  %218 = load i32, ptr %210, align 8
  %219 = and i32 %218, 65535
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %220
  %222 = load i32, ptr %221, align 4, !tbaa !16
  %223 = icmp ult i32 %222, 2
  br i1 %223, label %224, label %382

224:                                              ; preds = %217
  %225 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %210, ptr noundef null) #25
  %226 = icmp eq i32 %212, %225
  br i1 %226, label %227, label %241

227:                                              ; preds = %224
  %228 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !16
  %230 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %231 = load ptr, ptr %230, align 8, !tbaa !16
  %232 = tail call i32 @rtx_equal_p(ptr noundef %229, ptr noundef %231) #25
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %241, label %234

234:                                              ; preds = %227
  %235 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1, i32 0, i32 0, i64 1
  %236 = load ptr, ptr %235, align 8, !tbaa !16
  %237 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %238 = load ptr, ptr %237, align 8, !tbaa !16
  %239 = tail call i32 @rtx_equal_p(ptr noundef %236, ptr noundef %238) #25
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %261

241:                                              ; preds = %234, %227, %224
  %242 = load i32, ptr %208, align 8
  %243 = and i32 %242, 65535
  %244 = tail call i32 @swap_condition(i32 noundef %243) #25
  %245 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %210, ptr noundef null) #25
  %246 = icmp eq i32 %244, %245
  br i1 %246, label %247, label %382

247:                                              ; preds = %241
  %248 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1
  %249 = load ptr, ptr %248, align 8, !tbaa !16
  %250 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %251 = load ptr, ptr %250, align 8, !tbaa !16
  %252 = tail call i32 @rtx_equal_p(ptr noundef %249, ptr noundef %251) #25
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %382, label %254

254:                                              ; preds = %247
  %255 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %256 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1, i32 0, i32 0, i64 1
  %257 = load ptr, ptr %256, align 8, !tbaa !16
  %258 = load ptr, ptr %255, align 8, !tbaa !16
  %259 = tail call i32 @rtx_equal_p(ptr noundef %257, ptr noundef %258) #25
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %382, label %261

261:                                              ; preds = %254, %234
  %262 = tail call i32 @side_effects_p(ptr noundef nonnull %0) #25
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %382

264:                                              ; preds = %261
  %265 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %265, ptr %2, align 8, !tbaa !5
  store ptr %265, ptr %1, align 8, !tbaa !5
  br label %383

266:                                              ; preds = %54
  %267 = trunc i32 %9 to i16
  switch i16 %267, label %324 [
    i16 47, label %268
    i16 39, label %295
  ]

268:                                              ; preds = %266
  %269 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %270 = load ptr, ptr %269, align 8, !tbaa !16
  %271 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %272 = load ptr, ptr %271, align 8, !tbaa !16
  store ptr %272, ptr %1, align 8, !tbaa !5
  %273 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %274 = load ptr, ptr %273, align 8, !tbaa !16
  store ptr %274, ptr %2, align 8, !tbaa !5
  %275 = load i32, ptr %270, align 8
  %276 = trunc i32 %275 to i16
  switch i16 %276, label %383 [
    i16 80, label %277
    i16 81, label %285
  ]

277:                                              ; preds = %268
  %278 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 0, i32 1, i32 0, i32 0, i64 1
  %279 = load ptr, ptr %278, align 8, !tbaa !16
  %280 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %281 = icmp eq ptr %279, %280
  br i1 %281, label %282, label %383

282:                                              ; preds = %277
  %283 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 0, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !16
  br label %383

285:                                              ; preds = %268
  %286 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 0, i32 1, i32 0, i32 0, i64 1
  %287 = load ptr, ptr %286, align 8, !tbaa !16
  %288 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %289 = icmp eq ptr %287, %288
  br i1 %289, label %290, label %383

290:                                              ; preds = %285
  %291 = getelementptr inbounds %struct.rtx_def, ptr %270, i64 0, i32 1
  %292 = load ptr, ptr %273, align 8, !tbaa !16
  store ptr %292, ptr %1, align 8, !tbaa !5
  %293 = load ptr, ptr %271, align 8, !tbaa !16
  store ptr %293, ptr %2, align 8, !tbaa !5
  %294 = load ptr, ptr %291, align 8, !tbaa !16
  br label %383

295:                                              ; preds = %266
  %296 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %297 = load ptr, ptr %296, align 8, !tbaa !16
  %298 = call fastcc ptr @if_then_else_cond(ptr noundef %297, ptr noundef nonnull %4, ptr noundef nonnull %6)
  %299 = icmp eq ptr %298, null
  br i1 %299, label %300, label %304

300:                                              ; preds = %295
  %301 = load i32, ptr %0, align 8
  %302 = and i32 %301, 65535
  %303 = zext i32 %302 to i64
  br label %324

304:                                              ; preds = %295
  %305 = load ptr, ptr %4, align 8, !tbaa !5
  %306 = load ptr, ptr %296, align 8, !tbaa !16
  %307 = load i32, ptr %306, align 8
  %308 = lshr i32 %307, 16
  %309 = and i32 %308, 255
  %310 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %311 = load i32, ptr %310, align 8, !tbaa !16
  %312 = tail call ptr @simplify_gen_subreg(i32 noundef %11, ptr noundef %305, i32 noundef %309, i32 noundef %311) #25
  %313 = load ptr, ptr %6, align 8, !tbaa !5
  %314 = load ptr, ptr %296, align 8, !tbaa !16
  %315 = load i32, ptr %314, align 8
  %316 = lshr i32 %315, 16
  %317 = and i32 %316, 255
  %318 = load i32, ptr %310, align 8, !tbaa !16
  %319 = tail call ptr @simplify_gen_subreg(i32 noundef %11, ptr noundef %313, i32 noundef %317, i32 noundef %318) #25
  %320 = icmp ne ptr %312, null
  %321 = icmp ne ptr %319, null
  %322 = select i1 %320, i1 %321, i1 false
  br i1 %322, label %323, label %382

323:                                              ; preds = %304
  store ptr %312, ptr %1, align 8, !tbaa !5
  store ptr %319, ptr %2, align 8, !tbaa !5
  br label %383

324:                                              ; preds = %300, %266
  %325 = phi i64 [ %303, %300 ], [ %57, %266 ]
  %326 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %325
  %327 = load i32, ptr %326, align 4, !tbaa !16
  %328 = icmp eq i32 %327, 9
  br i1 %328, label %382, label %329

329:                                              ; preds = %324
  %330 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %0)
  %331 = icmp eq ptr %330, null
  br i1 %331, label %339, label %332

332:                                              ; preds = %329
  %333 = load i32, ptr %330, align 8
  %334 = and i32 %333, 65535
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %335
  %337 = load i32, ptr %336, align 4, !tbaa !16
  %338 = icmp eq i32 %337, 9
  br i1 %338, label %382, label %339

339:                                              ; preds = %332, %329
  %340 = icmp eq i32 %11, 13
  br i1 %340, label %341, label %344

341:                                              ; preds = %339
  %342 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 1) #25
  store ptr %342, ptr %1, align 8, !tbaa !5
  %343 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %343, ptr %2, align 8, !tbaa !5
  br label %383

344:                                              ; preds = %339
  %345 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %346 = icmp eq ptr %345, %0
  %347 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %348 = icmp eq ptr %347, %0
  %349 = select i1 %346, i1 true, i1 %348
  br i1 %349, label %362, label %350

350:                                              ; preds = %344
  %351 = icmp eq i32 %11, 0
  br i1 %351, label %365, label %352

352:                                              ; preds = %350
  %353 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %0, i32 noundef %11) #25
  %354 = zext i32 %11 to i64
  %355 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %354
  %356 = load i8, ptr %355, align 1, !tbaa !16
  %357 = zext i8 %356 to i32
  %358 = shl nuw nsw i32 %357, 3
  %359 = icmp eq i32 %353, %358
  br i1 %359, label %360, label %365

360:                                              ; preds = %352
  %361 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  br label %362

362:                                              ; preds = %360, %344
  %363 = phi ptr [ %361, %360 ], [ %345, %344 ]
  store ptr %363, ptr %1, align 8, !tbaa !5
  %364 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %364, ptr %2, align 8, !tbaa !5
  br label %383

365:                                              ; preds = %350, %352
  %366 = phi i64 [ %354, %352 ], [ 0, %350 ]
  %367 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %366
  %368 = load i8, ptr %367, align 1, !tbaa !16
  %369 = and i8 %368, -2
  %370 = icmp eq i8 %369, 2
  br i1 %370, label %371, label %382

371:                                              ; preds = %365
  %372 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %366
  %373 = load i8, ptr %372, align 1, !tbaa !16
  %374 = icmp ult i8 %373, 9
  br i1 %374, label %375, label %382

375:                                              ; preds = %371
  %376 = tail call i64 @nonzero_bits(ptr noundef nonnull %0, i32 noundef %11) #25
  %377 = tail call i32 @exact_log2(i64 noundef %376) #25
  %378 = icmp sgt i32 %377, -1
  br i1 %378, label %379, label %382

379:                                              ; preds = %375
  %380 = tail call ptr @gen_int_mode(i64 noundef %376, i32 noundef %11) #25
  store ptr %380, ptr %1, align 8, !tbaa !5
  %381 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  store ptr %381, ptr %2, align 8, !tbaa !5
  br label %383

382:                                              ; preds = %365, %111, %194, %206, %217, %241, %247, %254, %261, %201, %196, %304, %371, %375, %324, %332, %52
  store ptr %0, ptr %2, align 8, !tbaa !5
  store ptr %0, ptr %1, align 8, !tbaa !5
  br label %383

383:                                              ; preds = %268, %277, %285, %190, %382, %379, %362, %341, %323, %290, %282, %264, %105, %39, %21
  %384 = phi ptr [ %28, %21 ], [ %37, %39 ], [ null, %382 ], [ %107, %105 ], [ %208, %264 ], [ %284, %282 ], [ %294, %290 ], [ %298, %323 ], [ %0, %341 ], [ %0, %362 ], [ %0, %379 ], [ %130, %190 ], [ %270, %285 ], [ %270, %277 ], [ %270, %268 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #25
  ret ptr %384
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @simplify_comparison(i32 noundef %0, ptr nocapture noundef %1, ptr nocapture noundef %2) unnamed_addr #9 {
  %4 = load ptr, ptr %1, align 8, !tbaa !5
  %5 = load ptr, ptr %2, align 8, !tbaa !5
  br label %6

6:                                                ; preds = %293, %3
  %7 = phi ptr [ %5, %3 ], [ %294, %293 ]
  %8 = phi ptr [ %4, %3 ], [ %295, %293 ]
  %9 = phi i32 [ %0, %3 ], [ %296, %293 ]
  %10 = add i32 %9, -90
  %11 = icmp ult i32 %10, -4
  %12 = and i32 %9, -2
  %13 = icmp eq i32 %12, 80
  %14 = icmp ne i32 %9, 83
  %15 = add i32 %9, -86
  %16 = icmp ult i32 %15, 4
  %17 = add i32 %9, -82
  %18 = icmp ult i32 %17, 4
  br label %19

19:                                               ; preds = %6, %172
  %20 = phi ptr [ %174, %172 ], [ %7, %6 ]
  %21 = phi ptr [ %173, %172 ], [ %8, %6 ]
  %22 = load i32, ptr %21, align 8
  %23 = and i32 %22, 65535
  %24 = icmp eq i32 %23, 67
  %25 = select i1 %11, i1 %24, i1 false
  br i1 %25, label %26, label %104

26:                                               ; preds = %19
  %27 = load i32, ptr %20, align 8
  %28 = and i32 %27, 65535
  %29 = icmp eq i32 %28, 67
  br i1 %29, label %30, label %104

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.rtx_def, ptr %21, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = load i32, ptr %32, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 65
  br i1 %35, label %36, label %104

36:                                               ; preds = %30
  %37 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = load i32, ptr %38, align 8
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 65
  br i1 %41, label %42, label %104

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !16
  %45 = load i32, ptr %44, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 39
  br i1 %47, label %48, label %104

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.rtx_def, ptr %38, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = load i32, ptr %50, align 8
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 39
  br i1 %53, label %54, label %104

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  %57 = load i32, ptr %56, align 8
  %58 = lshr i32 %57, 16
  %59 = and i32 %58, 255
  %60 = getelementptr inbounds %struct.rtx_def, ptr %50, i64 0, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !16
  %62 = load i32, ptr %61, align 8
  %63 = lshr i32 %62, 16
  %64 = and i32 %63, 255
  %65 = icmp eq i32 %59, %64
  br i1 %65, label %66, label %104

66:                                               ; preds = %54
  %67 = getelementptr inbounds %struct.rtx_def, ptr %21, i64 0, i32 1, i32 0, i32 0, i64 1
  %68 = load ptr, ptr %67, align 8, !tbaa !16
  %69 = load i32, ptr %68, align 8
  %70 = and i32 %69, 65535
  %71 = icmp eq i32 %70, 30
  br i1 %71, label %72, label %104

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.rtx_def, ptr %20, i64 0, i32 1, i32 0, i32 0, i64 1
  %74 = load ptr, ptr %73, align 8, !tbaa !16
  %75 = icmp eq ptr %68, %74
  br i1 %75, label %76, label %104

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.rtx_def, ptr %32, i64 0, i32 1, i32 0, i32 0, i64 1
  %78 = load ptr, ptr %77, align 8, !tbaa !16
  %79 = icmp eq ptr %68, %78
  br i1 %79, label %80, label %104

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.rtx_def, ptr %38, i64 0, i32 1, i32 0, i32 0, i64 1
  %82 = load ptr, ptr %81, align 8, !tbaa !16
  %83 = icmp eq ptr %68, %82
  br i1 %83, label %84, label %104

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.rtx_def, ptr %68, i64 0, i32 1
  %86 = load i64, ptr %85, align 8, !tbaa !16
  %87 = lshr i32 %22, 16
  %88 = and i32 %87, 255
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %89
  %91 = load i8, ptr %90, align 1, !tbaa !16
  %92 = zext i8 %91 to i32
  %93 = zext i32 %59 to i64
  %94 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %93
  %95 = load i8, ptr %94, align 1, !tbaa !16
  %96 = zext i8 %95 to i32
  %97 = sub nsw i32 %92, %96
  %98 = shl nsw i32 %97, 3
  %99 = sext i32 %98 to i64
  %100 = icmp eq i64 %86, %99
  %101 = select i1 %100, ptr %61, ptr %20
  %102 = select i1 %100, i32 %57, i32 %22
  %103 = select i1 %100, ptr %56, ptr %21
  br label %104

104:                                              ; preds = %19, %84, %80, %76, %72, %66, %54, %48, %42, %36, %30, %26
  %105 = phi i32 [ %22, %80 ], [ %22, %76 ], [ %22, %72 ], [ %22, %66 ], [ %22, %54 ], [ %22, %48 ], [ %22, %42 ], [ %22, %36 ], [ %22, %30 ], [ %22, %26 ], [ %102, %84 ], [ %22, %19 ]
  %106 = phi ptr [ %20, %80 ], [ %20, %76 ], [ %20, %72 ], [ %20, %66 ], [ %20, %54 ], [ %20, %48 ], [ %20, %42 ], [ %20, %36 ], [ %20, %30 ], [ %20, %26 ], [ %101, %84 ], [ %20, %19 ]
  %107 = phi ptr [ %21, %80 ], [ %21, %76 ], [ %21, %72 ], [ %21, %66 ], [ %21, %54 ], [ %21, %48 ], [ %21, %42 ], [ %21, %36 ], [ %21, %30 ], [ %21, %26 ], [ %103, %84 ], [ %21, %19 ]
  %108 = freeze i32 %105
  %109 = and i32 %108, 65535
  %110 = load i32, ptr %106, align 8
  %111 = and i32 %110, 65535
  %112 = icmp eq i32 %109, %111
  br i1 %112, label %113, label %175

113:                                              ; preds = %104
  %114 = lshr i32 %108, 16
  %115 = and i32 %114, 255
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %116
  %118 = load i8, ptr %117, align 1, !tbaa !16
  %119 = icmp ult i8 %118, 9
  br i1 %119, label %120, label %175

120:                                              ; preds = %113
  %121 = icmp eq i32 %109, 66
  %122 = and i1 %13, %121
  br i1 %122, label %133, label %123

123:                                              ; preds = %120
  %124 = icmp eq i32 %109, 68
  br i1 %124, label %128, label %125

125:                                              ; preds = %123
  %126 = icmp eq i32 %109, 65
  %127 = and i1 %14, %126
  br i1 %127, label %129, label %130

128:                                              ; preds = %123
  br i1 %18, label %297, label %133

129:                                              ; preds = %125
  switch i32 %9, label %133 [
    i32 85, label %297
    i32 84, label %297
    i32 82, label %297
  ]

130:                                              ; preds = %125
  %131 = icmp ne i32 %109, 67
  %132 = or i1 %16, %131
  br i1 %132, label %175, label %133

133:                                              ; preds = %128, %130, %129, %120
  %134 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  %135 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1, i32 0, i32 0, i64 1
  %136 = load ptr, ptr %135, align 8, !tbaa !16
  %137 = load i32, ptr %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 30
  br i1 %139, label %140, label %175

140:                                              ; preds = %133
  %141 = getelementptr inbounds %struct.rtx_def, ptr %136, i64 0, i32 1
  %142 = load i64, ptr %141, align 8, !tbaa !16
  %143 = icmp ult i64 %142, 64
  br i1 %143, label %144, label %175

144:                                              ; preds = %140
  %145 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %146 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1, i32 0, i32 0, i64 1
  %147 = load ptr, ptr %146, align 8, !tbaa !16
  %148 = icmp eq ptr %136, %147
  br i1 %148, label %149, label %175

149:                                              ; preds = %144
  %150 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %116
  %151 = load i64, ptr %150, align 8, !tbaa !83
  %152 = trunc i32 %108 to i16
  switch i16 %152, label %160 [
    i16 68, label %153
    i16 67, label %153
    i16 65, label %156
  ]

153:                                              ; preds = %149, %149
  %154 = shl nsw i64 -1, %142
  %155 = and i64 %151, %154
  br label %160

156:                                              ; preds = %149
  %157 = shl i64 %151, %142
  %158 = and i64 %157, %151
  %159 = lshr i64 %158, %142
  br label %160

160:                                              ; preds = %149, %156, %153
  %161 = phi i64 [ %155, %153 ], [ %159, %156 ], [ %151, %149 ]
  %162 = load ptr, ptr %134, align 8, !tbaa !16
  %163 = tail call i64 @nonzero_bits(ptr noundef %162, i32 noundef %115) #25
  %164 = xor i64 %161, -1
  %165 = and i64 %163, %164
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %297

167:                                              ; preds = %160
  %168 = load ptr, ptr %145, align 8, !tbaa !16
  %169 = tail call i64 @nonzero_bits(ptr noundef %168, i32 noundef %115) #25
  %170 = and i64 %169, %164
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %297

172:                                              ; preds = %167
  %173 = load ptr, ptr %134, align 8, !tbaa !16
  %174 = load ptr, ptr %145, align 8, !tbaa !16
  br label %19

175:                                              ; preds = %130, %144, %140, %133, %113, %104
  %176 = trunc i32 %108 to i16
  switch i16 %176, label %297 [
    i16 61, label %177
    i16 64, label %280
    i16 51, label %282
  ]

177:                                              ; preds = %175
  %178 = icmp eq i32 %111, 61
  br i1 %178, label %179, label %297

179:                                              ; preds = %177
  %180 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  %181 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1, i32 0, i32 0, i64 1
  %182 = load ptr, ptr %181, align 8, !tbaa !16
  %183 = load i32, ptr %182, align 8
  %184 = and i32 %183, 65535
  %185 = icmp eq i32 %184, 30
  br i1 %185, label %186, label %297

186:                                              ; preds = %179
  %187 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1, i32 0, i32 0, i64 1
  %188 = load ptr, ptr %187, align 8, !tbaa !16
  %189 = load i32, ptr %188, align 8
  %190 = and i32 %189, 65535
  %191 = icmp eq i32 %190, 30
  br i1 %191, label %192, label %297

192:                                              ; preds = %186
  %193 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %194 = load ptr, ptr %180, align 8, !tbaa !16
  %195 = load ptr, ptr %193, align 8, !tbaa !16
  %196 = getelementptr inbounds %struct.rtx_def, ptr %182, i64 0, i32 1
  %197 = load i64, ptr %196, align 8, !tbaa !16
  %198 = getelementptr inbounds %struct.rtx_def, ptr %188, i64 0, i32 1
  %199 = load i64, ptr %198, align 8, !tbaa !16
  %200 = load i32, ptr %194, align 8
  %201 = and i32 %200, 65535
  %202 = icmp eq i32 %201, 39
  br i1 %202, label %203, label %249

203:                                              ; preds = %192
  %204 = load i32, ptr %195, align 8
  %205 = and i32 %204, 65535
  %206 = icmp eq i32 %205, 39
  br i1 %206, label %207, label %249

207:                                              ; preds = %203
  %208 = lshr i32 %200, 16
  %209 = and i32 %208, 255
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %210
  %212 = load i8, ptr %211, align 1, !tbaa !16
  %213 = getelementptr inbounds %struct.rtx_def, ptr %194, i64 0, i32 1
  %214 = load ptr, ptr %213, align 8, !tbaa !16
  %215 = load i32, ptr %214, align 8
  %216 = lshr i32 %215, 16
  %217 = and i32 %216, 255
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %218
  %220 = load i8, ptr %219, align 1, !tbaa !16
  %221 = icmp ugt i8 %212, %220
  br i1 %221, label %222, label %249

222:                                              ; preds = %207
  %223 = getelementptr inbounds %struct.rtx_def, ptr %195, i64 0, i32 1
  %224 = load ptr, ptr %223, align 8, !tbaa !16
  %225 = load i32, ptr %224, align 8
  %226 = lshr i32 %225, 16
  %227 = and i32 %226, 255
  %228 = icmp eq i32 %217, %227
  %229 = icmp ult i8 %220, 9
  %230 = and i1 %229, %228
  br i1 %230, label %231, label %249

231:                                              ; preds = %222
  %232 = xor i64 %197, -1
  %233 = tail call i64 @nonzero_bits(ptr noundef nonnull %214, i32 noundef %217) #25
  %234 = and i64 %233, %232
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %249

236:                                              ; preds = %231
  %237 = xor i64 %199, -1
  %238 = load ptr, ptr %223, align 8, !tbaa !16
  %239 = load i32, ptr %238, align 8
  %240 = lshr i32 %239, 16
  %241 = and i32 %240, 255
  %242 = tail call i64 @nonzero_bits(ptr noundef nonnull %238, i32 noundef %241) #25
  %243 = and i64 %242, %237
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %249

245:                                              ; preds = %236
  %246 = load ptr, ptr %213, align 8, !tbaa !16
  %247 = load ptr, ptr %223, align 8, !tbaa !16
  %248 = tail call i32 @unsigned_condition(i32 noundef %9) #25
  br label %293

249:                                              ; preds = %236, %231, %222, %207, %203, %192
  %250 = icmp eq i64 %197, %199
  br i1 %250, label %251, label %297

251:                                              ; preds = %249
  %252 = load i32, ptr %107, align 8
  %253 = lshr i32 %252, 16
  %254 = and i32 %253, 255
  %255 = zext i32 %254 to i64
  %256 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %255
  %257 = load i8, ptr %256, align 1, !tbaa !16
  %258 = zext i8 %257 to i64
  %259 = getelementptr inbounds [18 x i8], ptr @class_narrowest_mode, i64 0, i64 %258
  %260 = trunc i32 %253 to i8
  %261 = load i8, ptr %259, align 1, !tbaa !16
  %262 = icmp eq i8 %261, %260
  br i1 %262, label %297, label %263

263:                                              ; preds = %251, %276
  %264 = phi i8 [ %278, %276 ], [ %261, %251 ]
  %265 = zext i8 %264 to i64
  %266 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %265
  %267 = load i64, ptr %266, align 8, !tbaa !83
  %268 = icmp eq i64 %197, %267
  br i1 %268, label %269, label %276

269:                                              ; preds = %263
  %270 = zext i8 %264 to i32
  %271 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %272 = tail call ptr %271(i32 noundef %270, ptr noundef nonnull %194) #25
  %273 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %274 = tail call ptr %273(i32 noundef %270, ptr noundef %195) #25
  %275 = tail call i32 @unsigned_condition(i32 noundef %9) #25
  br label %293

276:                                              ; preds = %263
  %277 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %265
  %278 = load i8, ptr %277, align 1, !tbaa !16
  %279 = icmp eq i8 %278, %260
  br i1 %279, label %297, label %263, !llvm.loop !205

280:                                              ; preds = %175
  %281 = icmp eq i32 %111, 64
  br i1 %281, label %287, label %297

282:                                              ; preds = %175
  %283 = icmp eq i32 %111, 51
  %284 = and i32 %9, -2
  %285 = icmp eq i32 %284, 80
  %286 = and i1 %285, %283
  br i1 %286, label %287, label %297

287:                                              ; preds = %282, %280
  %288 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !16
  %290 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %291 = load ptr, ptr %290, align 8, !tbaa !16
  %292 = tail call i32 @swap_condition(i32 noundef %9) #25
  br label %293

293:                                              ; preds = %287, %245, %269
  %294 = phi ptr [ %274, %269 ], [ %247, %245 ], [ %291, %287 ]
  %295 = phi ptr [ %272, %269 ], [ %246, %245 ], [ %289, %287 ]
  %296 = phi i32 [ %275, %269 ], [ %248, %245 ], [ %292, %287 ]
  br label %6

297:                                              ; preds = %128, %129, %129, %129, %160, %167, %175, %177, %179, %186, %280, %249, %282, %251, %276
  %298 = tail call zeroext i8 @swap_commutative_operands_p(ptr noundef nonnull %107, ptr noundef nonnull %106) #25
  %299 = icmp eq i8 %298, 0
  br i1 %299, label %302, label %300

300:                                              ; preds = %297
  %301 = tail call i32 @swap_condition(i32 noundef %9) #25
  br label %302

302:                                              ; preds = %300, %297
  %303 = phi ptr [ %107, %300 ], [ %106, %297 ]
  %304 = phi ptr [ %106, %300 ], [ %107, %297 ]
  %305 = phi i32 [ %301, %300 ], [ %9, %297 ]
  %306 = load i32, ptr %303, align 8
  %307 = and i32 %306, 65535
  %308 = icmp eq i32 %307, 30
  br i1 %308, label %309, label %1508

309:                                              ; preds = %302, %1501
  %310 = phi i32 [ %1504, %1501 ], [ %305, %302 ]
  %311 = phi ptr [ %1503, %1501 ], [ %304, %302 ]
  %312 = phi ptr [ %1502, %1501 ], [ %303, %302 ]
  %313 = load i32, ptr %311, align 8
  %314 = lshr i32 %313, 16
  %315 = and i32 %314, 255
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %316
  %318 = load i8, ptr %317, align 1, !tbaa !16
  %319 = zext i8 %318 to i32
  %320 = shl nuw nsw i32 %319, 3
  %321 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %316
  %322 = load i64, ptr %321, align 8, !tbaa !83
  %323 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %316
  %324 = load i8, ptr %323, align 1, !tbaa !16
  %325 = icmp eq i8 %324, 2
  br i1 %325, label %339, label %326

326:                                              ; preds = %309
  %327 = icmp eq i32 %315, 0
  br i1 %327, label %328, label %1508

328:                                              ; preds = %326
  %329 = and i32 %313, 65535
  %330 = icmp eq i32 %329, 48
  br i1 %330, label %336, label %331

331:                                              ; preds = %328
  %332 = zext i32 %329 to i64
  %333 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %332
  %334 = load i32, ptr %333, align 4, !tbaa !16
  %335 = icmp ult i32 %334, 2
  br i1 %335, label %336, label %1508

336:                                              ; preds = %331, %328
  %337 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1
  %338 = load i64, ptr %337, align 8, !tbaa !16
  br label %345

339:                                              ; preds = %309
  %340 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1
  %341 = load i64, ptr %340, align 8, !tbaa !16
  %342 = icmp eq i32 %315, 0
  br i1 %342, label %345, label %343

343:                                              ; preds = %339
  %344 = tail call i64 @trunc_int_for_mode(i64 noundef %341, i32 noundef %315) #25
  br label %345

345:                                              ; preds = %336, %343, %339
  %346 = phi i64 [ %344, %343 ], [ %341, %339 ], [ %338, %336 ]
  %347 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %346) #25
  %348 = icmp eq i64 %346, 0
  br i1 %348, label %386, label %349

349:                                              ; preds = %345
  %350 = and i32 %310, -2
  %351 = icmp eq i32 %350, 80
  %352 = icmp eq i32 %310, 82
  %353 = add i32 %310, -85
  %354 = icmp ult i32 %353, 2
  %355 = or i1 %351, %354
  %356 = icmp eq i32 %310, 89
  %357 = or i1 %356, %355
  %358 = or i1 %352, %357
  %359 = icmp ult i8 %318, 9
  %360 = select i1 %358, i1 %359, i1 false
  br i1 %360, label %361, label %369

361:                                              ; preds = %349
  %362 = tail call i32 @exact_log2(i64 noundef %346) #25
  %363 = icmp sgt i32 %362, -1
  br i1 %363, label %364, label %369

364:                                              ; preds = %361
  %365 = tail call i64 @nonzero_bits(ptr noundef nonnull %311, i32 noundef %315) #25
  %366 = icmp eq i64 %365, %346
  br i1 %366, label %367, label %369

367:                                              ; preds = %364
  %368 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  switch i32 %310, label %512 [
    i32 86, label %385
    i32 82, label %385
    i32 81, label %385
  ]

369:                                              ; preds = %349, %364, %361
  %370 = icmp eq i64 %346, -1
  br i1 %370, label %371, label %386

371:                                              ; preds = %369
  switch i32 %310, label %386 [
    i32 89, label %372
    i32 86, label %372
    i32 84, label %372
    i32 83, label %372
    i32 81, label %372
    i32 80, label %372
  ]

372:                                              ; preds = %371, %371, %371, %371, %371, %371
  %373 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %311, i32 noundef %315) #25
  %374 = icmp eq i32 %373, %320
  br i1 %374, label %375, label %386

375:                                              ; preds = %372
  %376 = add i32 %310, -81
  %377 = icmp ult i32 %376, 6
  br i1 %377, label %378, label %382

378:                                              ; preds = %375
  %379 = sext i32 %376 to i64
  %380 = getelementptr inbounds [6 x i32], ptr @switch.table.simplify_comparison, i64 0, i64 %379
  %381 = load i32, ptr %380, align 4
  br label %382

382:                                              ; preds = %378, %375
  %383 = phi i32 [ 81, %375 ], [ %381, %378 ]
  %384 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %386

385:                                              ; preds = %367, %367, %367
  br label %512

386:                                              ; preds = %345, %371, %382, %372, %369
  %387 = phi i64 [ 0, %382 ], [ -1, %372 ], [ -1, %371 ], [ %346, %369 ], [ 0, %345 ]
  %388 = phi ptr [ %384, %382 ], [ %347, %372 ], [ %347, %371 ], [ %347, %369 ], [ %347, %345 ]
  %389 = phi i32 [ %383, %382 ], [ %310, %372 ], [ %310, %371 ], [ %310, %369 ], [ %310, %345 ]
  switch i32 %389, label %508 [
    i32 85, label %390
    i32 84, label %395
    i32 82, label %411
    i32 83, label %416
    i32 89, label %432
    i32 88, label %444
    i32 86, label %456
    i32 87, label %468
  ]

390:                                              ; preds = %386
  %391 = icmp sgt i64 %387, 0
  br i1 %391, label %392, label %499

392:                                              ; preds = %390
  %393 = add nsw i64 %387, -1
  %394 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %393) #25
  br label %397

395:                                              ; preds = %386
  %396 = icmp slt i64 %387, 0
  br i1 %396, label %493, label %397

397:                                              ; preds = %392, %395
  %398 = phi ptr [ %394, %392 ], [ %388, %395 ]
  %399 = phi i64 [ %393, %392 ], [ %387, %395 ]
  %400 = icmp eq i64 %399, 0
  %401 = icmp ult i8 %318, 9
  %402 = select i1 %400, i1 %401, i1 false
  br i1 %402, label %403, label %480

403:                                              ; preds = %397
  %404 = tail call i64 @nonzero_bits(ptr noundef nonnull %311, i32 noundef %315) #25
  %405 = add nsw i32 %320, -1
  %406 = zext i32 %405 to i64
  %407 = shl nuw i64 1, %406
  %408 = and i64 %404, %407
  %409 = icmp eq i64 %408, 0
  %410 = select i1 %409, i32 81, i32 84
  br label %480

411:                                              ; preds = %386
  %412 = icmp sgt i64 %387, 0
  br i1 %412, label %413, label %499

413:                                              ; preds = %411
  %414 = add nsw i64 %387, -1
  %415 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %414) #25
  br label %418

416:                                              ; preds = %386
  %417 = icmp slt i64 %387, 0
  br i1 %417, label %493, label %418

418:                                              ; preds = %413, %416
  %419 = phi ptr [ %415, %413 ], [ %388, %416 ]
  %420 = phi i64 [ %414, %413 ], [ %387, %416 ]
  %421 = icmp eq i64 %420, 0
  %422 = icmp ult i8 %318, 9
  %423 = select i1 %421, i1 %422, i1 false
  br i1 %423, label %424, label %480

424:                                              ; preds = %418
  %425 = tail call i64 @nonzero_bits(ptr noundef nonnull %311, i32 noundef %315) #25
  %426 = add nsw i32 %320, -1
  %427 = zext i32 %426 to i64
  %428 = shl nuw i64 1, %427
  %429 = and i64 %425, %428
  %430 = icmp eq i64 %429, 0
  %431 = select i1 %430, i32 80, i32 83
  br label %480

432:                                              ; preds = %386
  %433 = icmp sgt i64 %387, 0
  br i1 %433, label %434, label %437

434:                                              ; preds = %432
  %435 = add nsw i64 %387, -1
  %436 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %435) #25
  br label %444

437:                                              ; preds = %432
  %438 = icmp ult i8 %318, 9
  br i1 %438, label %439, label %480

439:                                              ; preds = %437
  %440 = add nsw i32 %320, -1
  %441 = zext i32 %440 to i64
  %442 = shl nuw i64 1, %441
  %443 = icmp eq i64 %387, %442
  br i1 %443, label %486, label %480

444:                                              ; preds = %386, %434
  %445 = phi i64 [ %387, %386 ], [ %435, %434 ]
  %446 = phi ptr [ %388, %386 ], [ %436, %434 ]
  %447 = icmp eq i64 %445, 0
  br i1 %447, label %480, label %448

448:                                              ; preds = %444
  %449 = icmp ult i8 %318, 9
  br i1 %449, label %450, label %480

450:                                              ; preds = %448
  %451 = add nsw i32 %320, -1
  %452 = zext i32 %451 to i64
  %453 = shl nsw i64 -1, %452
  %454 = xor i64 %453, -1
  %455 = icmp eq i64 %445, %454
  br i1 %455, label %486, label %480

456:                                              ; preds = %386
  %457 = icmp sgt i64 %387, 1
  br i1 %457, label %458, label %461

458:                                              ; preds = %456
  %459 = add nsw i64 %387, -1
  %460 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %459) #25
  br label %470

461:                                              ; preds = %456
  %462 = icmp ult i8 %318, 9
  br i1 %462, label %463, label %480

463:                                              ; preds = %461
  %464 = add nsw i32 %320, -1
  %465 = zext i32 %464 to i64
  %466 = shl nuw i64 1, %465
  %467 = icmp eq i64 %387, %466
  br i1 %467, label %486, label %480

468:                                              ; preds = %386
  %469 = icmp eq i64 %387, 0
  br i1 %469, label %480, label %470

470:                                              ; preds = %458, %468
  %471 = phi ptr [ %460, %458 ], [ %388, %468 ]
  %472 = phi i64 [ %459, %458 ], [ %387, %468 ]
  %473 = icmp ult i8 %318, 9
  br i1 %473, label %474, label %480

474:                                              ; preds = %470
  %475 = add nsw i32 %320, -1
  %476 = zext i32 %475 to i64
  %477 = shl nsw i64 -1, %476
  %478 = xor i64 %477, -1
  %479 = icmp eq i64 %472, %478
  br i1 %479, label %486, label %480

480:                                              ; preds = %424, %403, %474, %470, %463, %461, %450, %448, %439, %437, %418, %397, %444, %468
  %481 = phi i64 [ 0, %468 ], [ 0, %444 ], [ %399, %397 ], [ %420, %418 ], [ %387, %437 ], [ %387, %439 ], [ %445, %448 ], [ %445, %450 ], [ %387, %461 ], [ %387, %463 ], [ %472, %470 ], [ %472, %474 ], [ 0, %403 ], [ 0, %424 ]
  %482 = phi ptr [ %388, %468 ], [ %446, %444 ], [ %398, %397 ], [ %419, %418 ], [ %388, %437 ], [ %388, %439 ], [ %446, %448 ], [ %446, %450 ], [ %388, %461 ], [ %388, %463 ], [ %471, %470 ], [ %471, %474 ], [ %398, %403 ], [ %419, %424 ]
  %483 = phi i32 [ 80, %468 ], [ 81, %444 ], [ 84, %397 ], [ 83, %418 ], [ 89, %437 ], [ 89, %439 ], [ 88, %448 ], [ 88, %450 ], [ 86, %461 ], [ 86, %463 ], [ 87, %470 ], [ 87, %474 ], [ %410, %403 ], [ %431, %424 ]
  %484 = and i32 %483, 94
  %485 = icmp eq i32 %484, 80
  br label %512

486:                                              ; preds = %474, %463, %450, %439
  %487 = phi i1 [ false, %439 ], [ false, %450 ], [ true, %463 ], [ true, %474 ]
  %488 = phi i1 [ true, %439 ], [ true, %450 ], [ false, %463 ], [ false, %474 ]
  %489 = phi i32 [ 82, %439 ], [ 82, %450 ], [ 85, %463 ], [ 85, %474 ]
  %490 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %491 = and i32 %489, 86
  %492 = icmp eq i32 %491, 80
  br label %522

493:                                              ; preds = %416, %395
  %494 = phi i1 [ true, %395 ], [ false, %416 ]
  %495 = phi i1 [ false, %395 ], [ true, %416 ]
  %496 = phi i32 [ 85, %395 ], [ 82, %416 ]
  %497 = add nsw i64 %387, 1
  %498 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %497) #25
  br label %499

499:                                              ; preds = %493, %411, %390
  %500 = phi i64 [ %387, %390 ], [ %387, %411 ], [ %497, %493 ]
  %501 = phi ptr [ %388, %390 ], [ %388, %411 ], [ %498, %493 ]
  %502 = phi i1 [ true, %390 ], [ false, %411 ], [ %494, %493 ]
  %503 = phi i1 [ false, %390 ], [ true, %411 ], [ %495, %493 ]
  %504 = phi i32 [ 85, %390 ], [ 82, %411 ], [ %496, %493 ]
  %505 = and i32 %504, 86
  %506 = icmp eq i32 %505, 80
  %507 = icmp eq i64 %500, 0
  br i1 %507, label %522, label %537

508:                                              ; preds = %386
  %509 = and i32 %389, -2
  %510 = icmp eq i32 %509, 80
  %511 = icmp eq i32 %389, 82
  br label %512

512:                                              ; preds = %385, %367, %508, %480
  %513 = phi i1 [ false, %480 ], [ %511, %508 ], [ false, %367 ], [ false, %385 ]
  %514 = phi i1 [ %485, %480 ], [ %510, %508 ], [ true, %367 ], [ true, %385 ]
  %515 = phi i32 [ %483, %480 ], [ %389, %508 ], [ 81, %367 ], [ 80, %385 ]
  %516 = phi ptr [ %482, %480 ], [ %388, %508 ], [ %368, %367 ], [ %368, %385 ]
  %517 = phi i64 [ %481, %480 ], [ %387, %508 ], [ 0, %367 ], [ 0, %385 ]
  %518 = icmp eq i32 %515, 81
  %519 = icmp eq i32 %515, 80
  %520 = add i32 %515, -86
  %521 = icmp ult i32 %520, 4
  br label %537

522:                                              ; preds = %486, %499
  %523 = phi i1 [ %492, %486 ], [ %506, %499 ]
  %524 = phi i32 [ %489, %486 ], [ %504, %499 ]
  %525 = phi i1 [ %488, %486 ], [ %503, %499 ]
  %526 = phi i1 [ %487, %486 ], [ %502, %499 ]
  %527 = phi ptr [ %490, %486 ], [ %501, %499 ]
  %528 = load i8, ptr %317, align 1, !tbaa !16
  %529 = icmp ult i8 %528, 9
  br i1 %529, label %530, label %537

530:                                              ; preds = %522
  %531 = zext i8 %528 to i64
  %532 = shl nuw nsw i64 %531, 3
  %533 = add nuw nsw i64 %532, 4294967295
  %534 = and i64 %533, 4294967295
  %535 = shl nuw i64 1, %534
  %536 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %311, i32 noundef %315, i64 noundef %535, i32 noundef 0)
  br label %537

537:                                              ; preds = %512, %530, %522, %499
  %538 = phi i1 [ false, %530 ], [ false, %522 ], [ false, %499 ], [ %521, %512 ]
  %539 = phi i1 [ true, %530 ], [ true, %522 ], [ false, %499 ], [ false, %512 ]
  %540 = phi i64 [ 0, %530 ], [ 0, %522 ], [ %500, %499 ], [ %517, %512 ]
  %541 = phi ptr [ %527, %530 ], [ %527, %522 ], [ %501, %499 ], [ %516, %512 ]
  %542 = phi i32 [ %524, %530 ], [ %524, %522 ], [ %504, %499 ], [ %515, %512 ]
  %543 = phi i1 [ false, %530 ], [ false, %522 ], [ false, %499 ], [ %518, %512 ]
  %544 = phi i1 [ false, %530 ], [ false, %522 ], [ false, %499 ], [ %519, %512 ]
  %545 = phi i1 [ %523, %530 ], [ %523, %522 ], [ %506, %499 ], [ %514, %512 ]
  %546 = phi i1 [ %526, %530 ], [ %526, %522 ], [ %502, %499 ], [ false, %512 ]
  %547 = phi i1 [ %525, %530 ], [ %525, %522 ], [ %503, %499 ], [ %513, %512 ]
  %548 = phi ptr [ %536, %530 ], [ %311, %522 ], [ %311, %499 ], [ %311, %512 ]
  %549 = load i32, ptr %548, align 8
  %550 = trunc i32 %549 to i16
  switch i16 %550, label %1508 [
    i16 120, label %557
    i16 119, label %582
    i16 64, label %585
    i16 51, label %597
    i16 66, label %634
    i16 111, label %685
    i16 98, label %691
    i16 39, label %720
    i16 99, label %551
    i16 49, label %830
    i16 50, label %857
    i16 63, label %899
    i16 81, label %908
    i16 80, label %908
    i16 92, label %908
    i16 97, label %908
    i16 85, label %908
    i16 89, label %908
    i16 96, label %908
    i16 84, label %908
    i16 88, label %908
    i16 95, label %908
    i16 83, label %908
    i16 87, label %908
    i16 94, label %908
    i16 82, label %908
    i16 86, label %908
    i16 93, label %908
    i16 90, label %908
    i16 91, label %908
    i16 62, label %939
    i16 61, label %961
    i16 65, label %1203
    i16 67, label %1306
    i16 68, label %1433
  ]

551:                                              ; preds = %537
  %552 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %553 = load ptr, ptr %552, align 8, !tbaa !16
  %554 = load i32, ptr %553, align 8
  %555 = lshr i32 %554, 16
  %556 = and i32 %555, 255
  br label %806

557:                                              ; preds = %537
  %558 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %559 = load ptr, ptr %558, align 8, !tbaa !16
  %560 = load i32, ptr %559, align 8
  %561 = and i32 %560, 65535
  %562 = icmp eq i32 %561, 30
  br i1 %562, label %563, label %582

563:                                              ; preds = %557
  %564 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %565 = load ptr, ptr %564, align 8, !tbaa !16
  %566 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %567 = icmp eq ptr %565, %566
  %568 = icmp eq i64 %540, 0
  %569 = and i1 %568, %567
  %570 = and i1 %545, %569
  br i1 %570, label %571, label %582

571:                                              ; preds = %563
  %572 = getelementptr inbounds %struct.rtx_def, ptr %559, i64 0, i32 1
  %573 = load i64, ptr %572, align 8, !tbaa !16
  %574 = tail call i32 @exact_log2(i64 noundef %573) #25
  %575 = icmp sgt i32 %574, -1
  br i1 %575, label %576, label %582

576:                                              ; preds = %571
  %577 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 2
  %578 = load ptr, ptr %577, align 8, !tbaa !16
  %579 = zext i32 %574 to i64
  %580 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %579) #25
  %581 = tail call i32 @reverse_condition(i32 noundef %542) #25
  br label %1501, !llvm.loop !206

582:                                              ; preds = %557, %563, %571, %537
  %583 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %548)
  %584 = icmp eq ptr %583, %548
  br i1 %584, label %1508, label %1501, !llvm.loop !206

585:                                              ; preds = %537
  br i1 %545, label %586, label %592

586:                                              ; preds = %585
  %587 = tail call ptr @simplify_unary_operation(i32 noundef 64, i32 noundef %315, ptr noundef %541, i32 noundef %315) #25
  %588 = icmp eq ptr %587, null
  br i1 %588, label %592, label %589

589:                                              ; preds = %586
  %590 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %591 = load ptr, ptr %590, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

592:                                              ; preds = %586, %585
  br i1 %539, label %593, label %1508

593:                                              ; preds = %592
  %594 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %595 = load ptr, ptr %594, align 8, !tbaa !16
  %596 = select i1 %547, i32 85, i32 82
  br label %1501, !llvm.loop !206

597:                                              ; preds = %537
  br i1 %545, label %598, label %604

598:                                              ; preds = %597
  %599 = tail call ptr @simplify_unary_operation(i32 noundef 51, i32 noundef %315, ptr noundef %541, i32 noundef %315) #25
  %600 = icmp eq ptr %599, null
  br i1 %600, label %604, label %601

601:                                              ; preds = %598
  %602 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %603 = load ptr, ptr %602, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

604:                                              ; preds = %598, %597
  %605 = icmp eq i64 %540, 0
  br i1 %605, label %606, label %1508

606:                                              ; preds = %604
  br i1 %539, label %607, label %627

607:                                              ; preds = %606
  %608 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %609 = load ptr, ptr %608, align 8, !tbaa !16
  %610 = load i32, ptr %609, align 8
  %611 = and i32 %610, 65535
  %612 = icmp eq i32 %611, 111
  br i1 %612, label %624, label %613

613:                                              ; preds = %607
  %614 = icmp ult i8 %318, 9
  br i1 %614, label %615, label %627

615:                                              ; preds = %613
  %616 = tail call i64 @nonzero_bits(ptr noundef nonnull %609, i32 noundef %315) #25
  %617 = add nsw i32 %320, -1
  %618 = zext i32 %617 to i64
  %619 = shl nuw i64 1, %618
  %620 = and i64 %616, %619
  %621 = icmp eq i64 %620, 0
  br i1 %621, label %622, label %627

622:                                              ; preds = %615
  %623 = load ptr, ptr %608, align 8, !tbaa !16
  br label %624

624:                                              ; preds = %622, %607
  %625 = phi ptr [ %623, %622 ], [ %609, %607 ]
  %626 = select i1 %546, i32 80, i32 81
  br label %1501, !llvm.loop !206

627:                                              ; preds = %615, %613, %606
  %628 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %548, i32 noundef %315) #25
  %629 = icmp ugt i32 %628, 1
  br i1 %629, label %630, label %1508

630:                                              ; preds = %627
  %631 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %632 = load ptr, ptr %631, align 8, !tbaa !16
  %633 = tail call i32 @swap_condition(i32 noundef %542) #25
  br label %1501, !llvm.loop !206

634:                                              ; preds = %537
  br i1 %545, label %635, label %647

635:                                              ; preds = %634
  %636 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %637 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %638 = load ptr, ptr %637, align 8, !tbaa !16
  %639 = load i32, ptr %638, align 8
  %640 = and i32 %639, 65535
  %641 = icmp eq i32 %640, 30
  br i1 %641, label %642, label %647

642:                                              ; preds = %635
  %643 = tail call ptr @simplify_binary_operation(i32 noundef 69, i32 noundef %315, ptr noundef %541, ptr noundef nonnull %638) #25
  %644 = icmp eq ptr %643, null
  br i1 %644, label %647, label %645

645:                                              ; preds = %642
  %646 = load ptr, ptr %636, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

647:                                              ; preds = %642, %635, %634
  %648 = icmp eq i64 %540, 0
  %649 = and i1 %539, %648
  br i1 %649, label %650, label %685

650:                                              ; preds = %647
  %651 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %652 = load ptr, ptr %651, align 8, !tbaa !16
  %653 = load i32, ptr %652, align 8
  %654 = and i32 %653, 65535
  %655 = icmp eq i32 %654, 30
  %656 = icmp ult i8 %318, 9
  %657 = select i1 %655, i1 %656, i1 false
  br i1 %657, label %658, label %685

658:                                              ; preds = %650
  %659 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %660 = load ptr, ptr %659, align 8, !tbaa !16
  %661 = add nsw i32 %320, -1
  %662 = zext i32 %661 to i64
  %663 = getelementptr inbounds %struct.rtx_def, ptr %652, i64 0, i32 1
  %664 = load i64, ptr %663, align 8, !tbaa !16
  %665 = sub nsw i64 %662, %664
  %666 = shl nuw i64 1, %665
  %667 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %315, ptr noundef %660, i64 noundef %666) #26
  %668 = icmp eq ptr %667, null
  br i1 %668, label %669, label %682

669:                                              ; preds = %658
  %670 = load i32, ptr %660, align 8
  %671 = lshr i32 %670, 16
  %672 = and i32 %671, 255
  %673 = tail call ptr @gen_int_mode(i64 noundef %666, i32 noundef %315) #25
  %674 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %672, ptr noundef nonnull %660, ptr noundef %673) #25
  %675 = load i32, ptr %674, align 8
  %676 = lshr i32 %675, 16
  %677 = and i32 %676, 255
  %678 = icmp eq i32 %677, %315
  br i1 %678, label %682, label %679

679:                                              ; preds = %669
  %680 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %681 = tail call ptr %680(i32 noundef %315, ptr noundef nonnull %674) #25
  br label %682

682:                                              ; preds = %658, %669, %679
  %683 = phi ptr [ %667, %658 ], [ %681, %679 ], [ %674, %669 ]
  %684 = select i1 %546, i32 80, i32 81
  br label %1501, !llvm.loop !206

685:                                              ; preds = %647, %650, %537
  %686 = icmp eq i64 %540, 0
  %687 = and i1 %686, %545
  br i1 %687, label %688, label %1508

688:                                              ; preds = %685
  %689 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %690 = load ptr, ptr %689, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

691:                                              ; preds = %537
  %692 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %693 = load ptr, ptr %692, align 8, !tbaa !16
  %694 = load i32, ptr %693, align 8
  %695 = lshr i32 %694, 16
  %696 = and i32 %695, 255
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %1508, label %698

698:                                              ; preds = %691
  %699 = zext i32 %696 to i64
  %700 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %699
  %701 = load i8, ptr %700, align 1, !tbaa !16
  %702 = icmp ne i8 %701, 2
  %703 = or i1 %538, %702
  br i1 %703, label %1508, label %704

704:                                              ; preds = %698
  %705 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %699
  %706 = load i8, ptr %705, align 1, !tbaa !16
  %707 = icmp ult i8 %706, 9
  br i1 %707, label %708, label %1508

708:                                              ; preds = %704
  %709 = zext i8 %706 to i64
  %710 = shl nuw nsw i64 %709, 3
  %711 = add nuw nsw i64 %710, 4294967295
  %712 = and i64 %711, 4294967295
  %713 = lshr i64 %540, %712
  %714 = icmp eq i64 %713, 0
  br i1 %714, label %715, label %1508

715:                                              ; preds = %708
  %716 = tail call i32 @have_insn_for(i32 noundef 48, i32 noundef %696) #25
  %717 = icmp eq i32 %716, 0
  br i1 %717, label %1508, label %718

718:                                              ; preds = %715
  %719 = load ptr, ptr %692, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

720:                                              ; preds = %537
  %721 = icmp ult i8 %318, 9
  br i1 %721, label %722, label %791

722:                                              ; preds = %720
  %723 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %548) #25
  %724 = icmp eq i32 %723, 0
  br i1 %724, label %791, label %725

725:                                              ; preds = %722
  %726 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %727 = load ptr, ptr %726, align 8, !tbaa !16
  %728 = load i32, ptr %727, align 8
  %729 = lshr i32 %728, 16
  %730 = and i32 %729, 255
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %731
  %733 = load i8, ptr %732, align 1, !tbaa !16
  %734 = zext i8 %733 to i32
  %735 = shl nuw nsw i32 %734, 3
  %736 = icmp ugt i32 %735, %320
  %737 = and i32 %728, 65535
  %738 = icmp eq i32 %737, 49
  %739 = and i1 %738, %736
  br i1 %739, label %740, label %791

740:                                              ; preds = %725
  %741 = getelementptr inbounds %struct.rtx_def, ptr %727, i64 0, i32 1, i32 0, i32 0, i64 1
  %742 = load ptr, ptr %741, align 8, !tbaa !16
  %743 = load i32, ptr %742, align 8
  %744 = and i32 %743, 65535
  %745 = icmp eq i32 %744, 30
  br i1 %745, label %746, label %791

746:                                              ; preds = %740
  %747 = getelementptr inbounds %struct.rtx_def, ptr %727, i64 0, i32 1
  %748 = load ptr, ptr %747, align 8, !tbaa !16
  %749 = getelementptr inbounds %struct.rtx_def, ptr %742, i64 0, i32 1
  %750 = load i64, ptr %749, align 8, !tbaa !16
  %751 = sub nsw i64 0, %750
  %752 = icmp slt i64 %750, 0
  br i1 %752, label %753, label %776

753:                                              ; preds = %746
  %754 = add nsw i32 %320, -1
  %755 = zext i32 %754 to i64
  %756 = lshr i64 %751, %755
  %757 = icmp eq i64 %756, 0
  %758 = or i1 %538, %545
  %759 = and i1 %758, %757
  br i1 %759, label %760, label %776

760:                                              ; preds = %753
  %761 = tail call i64 @nonzero_bits(ptr noundef %748, i32 noundef %730) #25
  %762 = xor i64 %322, -1
  %763 = and i64 %761, %762
  %764 = icmp eq i64 %763, 0
  %765 = icmp sgt i64 %540, -1
  %766 = and i1 %765, %764
  br i1 %766, label %789, label %767

767:                                              ; preds = %760
  %768 = tail call i32 @num_sign_bit_copies(ptr noundef %748, i32 noundef %730) #25
  %769 = load i8, ptr %732, align 1, !tbaa !16
  %770 = zext i8 %769 to i32
  %771 = sub nsw i32 %770, %319
  %772 = shl nsw i32 %771, 3
  %773 = icmp ugt i32 %768, %772
  %774 = icmp slt i64 %540, 0
  %775 = and i1 %774, %773
  br i1 %775, label %789, label %776

776:                                              ; preds = %767, %753, %746
  %777 = add nsw i32 %320, -2
  %778 = zext i32 %777 to i64
  %779 = lshr i64 %751, %778
  %780 = icmp eq i64 %779, 0
  br i1 %780, label %781, label %791

781:                                              ; preds = %776
  %782 = tail call i32 @num_sign_bit_copies(ptr noundef %748, i32 noundef %730) #25
  %783 = load i8, ptr %732, align 1, !tbaa !16
  %784 = zext i8 %783 to i32
  %785 = sub nsw i32 %784, %319
  %786 = shl nsw i32 %785, 3
  %787 = or i32 %786, 1
  %788 = icmp ugt i32 %782, %787
  br i1 %788, label %789, label %791

789:                                              ; preds = %781, %760, %767
  %790 = load ptr, ptr %726, align 8, !tbaa !16
  br label %1501

791:                                              ; preds = %776, %781, %740, %725, %722, %720
  %792 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %548) #25
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %1508, label %794

794:                                              ; preds = %791
  %795 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %796 = load ptr, ptr %795, align 8, !tbaa !16
  %797 = load i32, ptr %796, align 8
  %798 = lshr i32 %797, 16
  %799 = and i32 %798, 255
  %800 = zext i32 %799 to i64
  %801 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %800
  %802 = load i8, ptr %801, align 1, !tbaa !16
  %803 = zext i8 %802 to i32
  %804 = shl nuw nsw i32 %803, 3
  %805 = icmp ult i32 %804, %320
  br i1 %805, label %806, label %1508

806:                                              ; preds = %551, %794
  %807 = phi i32 [ %556, %551 ], [ %799, %794 ]
  %808 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %809 = icmp eq i32 %807, 0
  br i1 %809, label %1508, label %810

810:                                              ; preds = %806
  %811 = zext i32 %807 to i64
  %812 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %811
  %813 = load i8, ptr %812, align 1, !tbaa !16
  %814 = icmp eq i8 %813, 2
  %815 = or i1 %538, %545
  %816 = and i1 %815, %814
  br i1 %816, label %817, label %1508

817:                                              ; preds = %810
  %818 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %811
  %819 = load i8, ptr %818, align 1, !tbaa !16
  %820 = icmp ult i8 %819, 9
  br i1 %820, label %821, label %1508

821:                                              ; preds = %817
  %822 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %811
  %823 = load i64, ptr %822, align 8, !tbaa !83
  %824 = icmp ult i64 %540, %823
  br i1 %824, label %825, label %1508

825:                                              ; preds = %821
  %826 = tail call i32 @have_insn_for(i32 noundef 48, i32 noundef %807) #25
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %1508, label %828

828:                                              ; preds = %825
  %829 = load ptr, ptr %808, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

830:                                              ; preds = %537
  br i1 %545, label %831, label %839

831:                                              ; preds = %830
  %832 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %833 = load ptr, ptr %832, align 8, !tbaa !16
  %834 = tail call ptr @simplify_binary_operation(i32 noundef 50, i32 noundef %315, ptr noundef %541, ptr noundef %833) #25
  %835 = icmp eq ptr %834, null
  br i1 %835, label %839, label %836

836:                                              ; preds = %831
  %837 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %838 = load ptr, ptr %837, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

839:                                              ; preds = %831, %830
  %840 = icmp eq i64 %540, 0
  br i1 %840, label %841, label %1508

841:                                              ; preds = %839
  %842 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %843 = load ptr, ptr %842, align 8, !tbaa !16
  %844 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %845 = icmp eq ptr %843, %844
  br i1 %845, label %846, label %1508

846:                                              ; preds = %841
  %847 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %848 = load ptr, ptr %847, align 8, !tbaa !16
  %849 = load i32, ptr %848, align 8
  %850 = and i32 %849, 65535
  %851 = icmp eq i32 %850, 111
  %852 = and i1 %539, %851
  br i1 %852, label %853, label %1508

853:                                              ; preds = %846
  %854 = getelementptr inbounds %struct.rtx_def, ptr %848, i64 0, i32 1
  %855 = load ptr, ptr %854, align 8, !tbaa !16
  %856 = select i1 %546, i32 81, i32 80
  br label %1501, !llvm.loop !206

857:                                              ; preds = %537
  br i1 %545, label %858, label %870

858:                                              ; preds = %857
  %859 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %860 = load ptr, ptr %859, align 8, !tbaa !16
  %861 = tail call ptr @simplify_binary_operation(i32 noundef 49, i32 noundef %315, ptr noundef %860, ptr noundef %541) #25
  %862 = icmp eq ptr %861, null
  %863 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %864 = load ptr, ptr %863, align 8, !tbaa !16
  br i1 %862, label %865, label %1501, !llvm.loop !206

865:                                              ; preds = %858
  %866 = tail call ptr @simplify_binary_operation(i32 noundef 50, i32 noundef %315, ptr noundef %864, ptr noundef %541) #25
  %867 = icmp eq ptr %866, null
  br i1 %867, label %870, label %868

868:                                              ; preds = %865
  %869 = load ptr, ptr %859, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

870:                                              ; preds = %857, %865
  br i1 %539, label %871, label %1508

871:                                              ; preds = %870
  %872 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %873 = load ptr, ptr %872, align 8, !tbaa !16
  %874 = load i32, ptr %873, align 8
  %875 = and i32 %874, 65535
  %876 = icmp eq i32 %875, 67
  br i1 %876, label %877, label %1508

877:                                              ; preds = %871
  %878 = getelementptr inbounds %struct.rtx_def, ptr %873, i64 0, i32 1
  %879 = getelementptr inbounds %struct.rtx_def, ptr %873, i64 0, i32 1, i32 0, i32 0, i64 1
  %880 = load ptr, ptr %879, align 8, !tbaa !16
  %881 = load i32, ptr %880, align 8
  %882 = and i32 %881, 65535
  %883 = icmp eq i32 %882, 30
  br i1 %883, label %884, label %1508

884:                                              ; preds = %877
  %885 = getelementptr inbounds %struct.rtx_def, ptr %880, i64 0, i32 1
  %886 = load i64, ptr %885, align 8, !tbaa !16
  %887 = add nsw i32 %320, -1
  %888 = zext i32 %887 to i64
  %889 = icmp eq i64 %886, %888
  br i1 %889, label %890, label %1508

890:                                              ; preds = %884
  %891 = load ptr, ptr %878, align 8, !tbaa !16
  %892 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %893 = load ptr, ptr %892, align 8, !tbaa !16
  %894 = tail call i32 @rtx_equal_p(ptr noundef %891, ptr noundef %893) #25
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %1508, label %896

896:                                              ; preds = %890
  %897 = load ptr, ptr %892, align 8, !tbaa !16
  %898 = select i1 %547, i32 84, i32 83
  br label %1501, !llvm.loop !206

899:                                              ; preds = %537
  br i1 %545, label %900, label %1508

900:                                              ; preds = %899
  %901 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %902 = load ptr, ptr %901, align 8, !tbaa !16
  %903 = tail call ptr @simplify_binary_operation(i32 noundef 63, i32 noundef %315, ptr noundef %902, ptr noundef %541) #25
  %904 = icmp eq ptr %903, null
  br i1 %904, label %1508, label %905

905:                                              ; preds = %900
  %906 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %907 = load ptr, ptr %906, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

908:                                              ; preds = %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537, %537
  %909 = icmp eq i64 %540, 0
  br i1 %909, label %910, label %1508

910:                                              ; preds = %908
  %911 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %912 = load ptr, ptr %911, align 8, !tbaa !16
  %913 = load i32, ptr %912, align 8
  %914 = lshr i32 %913, 16
  %915 = and i32 %914, 255
  %916 = zext i32 %915 to i64
  %917 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %916
  %918 = load i8, ptr %917, align 1, !tbaa !16
  %919 = icmp eq i8 %918, 1
  br i1 %919, label %1508, label %920

920:                                              ; preds = %910
  %921 = and i32 %913, 65535
  %922 = icmp eq i32 %921, 48
  br i1 %922, label %923, label %926

923:                                              ; preds = %920
  %924 = getelementptr inbounds %struct.rtx_def, ptr %912, i64 0, i32 1
  %925 = load ptr, ptr %924, align 8, !tbaa !16
  br label %926

926:                                              ; preds = %920, %923
  %927 = phi ptr [ %912, %923 ], [ %548, %920 ]
  %928 = phi ptr [ %925, %923 ], [ %912, %920 ]
  %929 = getelementptr inbounds %struct.rtx_def, ptr %927, i64 0, i32 1, i32 0, i32 0, i64 1
  %930 = load ptr, ptr %929, align 8, !tbaa !16
  br i1 %545, label %931, label %1508

931:                                              ; preds = %926
  switch i32 %542, label %934 [
    i32 85, label %932
    i32 80, label %932
  ]

932:                                              ; preds = %931, %931
  %933 = and i32 %549, 65535
  br label %936

934:                                              ; preds = %931
  %935 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %548, ptr noundef null) #25
  br label %936

936:                                              ; preds = %934, %932
  %937 = phi i32 [ %933, %932 ], [ %935, %934 ]
  %938 = icmp eq i32 %937, 0
  br i1 %938, label %1508, label %1501

939:                                              ; preds = %537
  br i1 %539, label %940, label %1508

940:                                              ; preds = %939
  %941 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %942 = load ptr, ptr %941, align 8, !tbaa !16
  %943 = load i32, ptr %942, align 8
  %944 = and i32 %943, 65535
  %945 = icmp eq i32 %944, 49
  br i1 %945, label %946, label %1508

946:                                              ; preds = %940
  %947 = getelementptr inbounds %struct.rtx_def, ptr %942, i64 0, i32 1, i32 0, i32 0, i64 1
  %948 = load ptr, ptr %947, align 8, !tbaa !16
  %949 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %950 = icmp eq ptr %948, %949
  br i1 %950, label %951, label %1508

951:                                              ; preds = %946
  %952 = getelementptr inbounds %struct.rtx_def, ptr %942, i64 0, i32 1
  %953 = load ptr, ptr %952, align 8, !tbaa !16
  %954 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %955 = load ptr, ptr %954, align 8, !tbaa !16
  %956 = tail call i32 @rtx_equal_p(ptr noundef %953, ptr noundef %955) #25
  %957 = icmp eq i32 %956, 0
  br i1 %957, label %1508, label %958

958:                                              ; preds = %951
  %959 = load ptr, ptr %954, align 8, !tbaa !16
  %960 = select i1 %547, i32 83, i32 84
  br label %1501, !llvm.loop !206

961:                                              ; preds = %537
  %962 = icmp eq i64 %540, 0
  %963 = and i1 %962, %545
  br i1 %963, label %964, label %1045

964:                                              ; preds = %961
  %965 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %966 = load ptr, ptr %965, align 8, !tbaa !16
  %967 = load i32, ptr %966, align 8
  %968 = and i32 %967, 65535
  %969 = icmp eq i32 %968, 65
  br i1 %969, label %970, label %996

970:                                              ; preds = %964
  %971 = getelementptr inbounds %struct.rtx_def, ptr %966, i64 0, i32 1
  %972 = load ptr, ptr %971, align 8, !tbaa !16
  %973 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %974 = icmp eq ptr %972, %973
  br i1 %974, label %975, label %996

975:                                              ; preds = %970
  %976 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %977 = load ptr, ptr %976, align 8, !tbaa !16
  %978 = getelementptr inbounds %struct.rtx_def, ptr %966, i64 0, i32 1, i32 0, i32 0, i64 1
  %979 = load ptr, ptr %978, align 8, !tbaa !16
  %980 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 68, i32 noundef %315, ptr noundef %977, ptr noundef %979) #25
  %981 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %315, ptr noundef %980, i64 noundef 1) #26
  %982 = icmp eq ptr %981, null
  br i1 %982, label %983, label %1501, !llvm.loop !206

983:                                              ; preds = %975
  %984 = load i32, ptr %980, align 8
  %985 = lshr i32 %984, 16
  %986 = and i32 %985, 255
  %987 = tail call ptr @gen_int_mode(i64 noundef 1, i32 noundef %315) #25
  %988 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %986, ptr noundef nonnull %980, ptr noundef %987) #25
  %989 = load i32, ptr %988, align 8
  %990 = lshr i32 %989, 16
  %991 = and i32 %990, 255
  %992 = icmp eq i32 %991, %315
  br i1 %992, label %1501, label %993, !llvm.loop !206

993:                                              ; preds = %983
  %994 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %995 = tail call ptr %994(i32 noundef %315, ptr noundef nonnull %988) #25
  br label %1501, !llvm.loop !206

996:                                              ; preds = %970, %964
  %997 = icmp ult i8 %318, 9
  br i1 %997, label %998, label %1066

998:                                              ; preds = %996
  %999 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1000 = load ptr, ptr %999, align 8, !tbaa !16
  %1001 = load i32, ptr %1000, align 8
  %1002 = and i32 %1001, 65535
  %1003 = icmp eq i32 %1002, 30
  %1004 = icmp eq i32 %968, 68
  %1005 = and i1 %1003, %1004
  br i1 %1005, label %1006, label %1047

1006:                                             ; preds = %998
  %1007 = getelementptr inbounds %struct.rtx_def, ptr %966, i64 0, i32 1
  %1008 = getelementptr inbounds %struct.rtx_def, ptr %966, i64 0, i32 1, i32 0, i32 0, i64 1
  %1009 = load ptr, ptr %1008, align 8, !tbaa !16
  %1010 = load i32, ptr %1009, align 8
  %1011 = and i32 %1010, 65535
  %1012 = icmp eq i32 %1011, 30
  br i1 %1012, label %1013, label %1047

1013:                                             ; preds = %1006
  %1014 = getelementptr inbounds %struct.rtx_def, ptr %1009, i64 0, i32 1
  %1015 = load i64, ptr %1014, align 8, !tbaa !16
  %1016 = icmp ult i64 %1015, 64
  br i1 %1016, label %1017, label %1047

1017:                                             ; preds = %1013
  %1018 = getelementptr inbounds %struct.rtx_def, ptr %1000, i64 0, i32 1
  %1019 = load i64, ptr %1018, align 8, !tbaa !16
  %1020 = and i64 %1019, %322
  %1021 = shl i64 %1020, %1015
  %1022 = icmp ult i64 %1021, 2
  br i1 %1022, label %1023, label %1047

1023:                                             ; preds = %1017
  %1024 = load ptr, ptr %1007, align 8, !tbaa !16
  %1025 = load i32, ptr %1024, align 8
  %1026 = and i32 %1025, 65535
  %1027 = zext i32 %1026 to i64
  %1028 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %1027
  %1029 = load i32, ptr %1028, align 4, !tbaa !16
  %1030 = icmp ult i32 %1029, 2
  br i1 %1030, label %1501, label %1031, !llvm.loop !206

1031:                                             ; preds = %1023
  %1032 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %1024)
  %1033 = icmp eq ptr %1032, null
  br i1 %1033, label %1047, label %1034

1034:                                             ; preds = %1031
  %1035 = load i32, ptr %1032, align 8
  %1036 = and i32 %1035, 65535
  %1037 = zext i32 %1036 to i64
  %1038 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %1037
  %1039 = load i32, ptr %1038, align 4, !tbaa !16
  %1040 = icmp ult i32 %1039, 2
  br i1 %1040, label %1041, label %1047

1041:                                             ; preds = %1034
  %1042 = load ptr, ptr %965, align 8, !tbaa !16
  %1043 = getelementptr inbounds %struct.rtx_def, ptr %1042, i64 0, i32 1
  %1044 = load ptr, ptr %1043, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

1045:                                             ; preds = %961
  %1046 = icmp ult i8 %318, 9
  br label %1066

1047:                                             ; preds = %1017, %1031, %1034, %1013, %1006, %998
  %1048 = phi i64 [ %322, %998 ], [ %322, %1006 ], [ %322, %1013 ], [ %1021, %1017 ], [ %1021, %1031 ], [ %1021, %1034 ]
  %1049 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1050 = load ptr, ptr %1049, align 8, !tbaa !16
  %1051 = load i32, ptr %1050, align 8
  %1052 = and i32 %1051, 65535
  %1053 = icmp eq i32 %1052, 30
  %1054 = and i1 %997, %1053
  br i1 %1054, label %1055, label %1066

1055:                                             ; preds = %1047
  %1056 = getelementptr inbounds %struct.rtx_def, ptr %1050, i64 0, i32 1
  %1057 = load i64, ptr %1056, align 8, !tbaa !16
  %1058 = and i64 %1057, %322
  %1059 = add nsw i32 %320, -1
  %1060 = zext i32 %1059 to i64
  %1061 = shl nuw i64 1, %1060
  %1062 = icmp eq i64 %1058, %1061
  br i1 %1062, label %1063, label %1066

1063:                                             ; preds = %1055
  %1064 = load ptr, ptr %965, align 8, !tbaa !16
  %1065 = select i1 %543, i32 82, i32 85
  br label %1501, !llvm.loop !206

1066:                                             ; preds = %996, %1045, %1055, %1047
  %1067 = phi i64 [ %1048, %1055 ], [ %1048, %1047 ], [ %322, %1045 ], [ %322, %996 ]
  %1068 = phi i1 [ true, %1055 ], [ true, %1047 ], [ %1046, %1045 ], [ false, %996 ]
  %1069 = or i1 %538, %545
  br i1 %1069, label %1070, label %1095

1070:                                             ; preds = %1066
  %1071 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1072 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1073 = load ptr, ptr %1072, align 8, !tbaa !16
  %1074 = load i32, ptr %1073, align 8
  %1075 = and i32 %1074, 65535
  %1076 = icmp eq i32 %1075, 30
  br i1 %1076, label %1077, label %1095

1077:                                             ; preds = %1070
  %1078 = getelementptr inbounds %struct.rtx_def, ptr %1073, i64 0, i32 1
  %1079 = load i64, ptr %1078, align 8, !tbaa !16
  %1080 = and i64 %1079, %322
  %1081 = add i64 %1080, 1
  %1082 = tail call i32 @exact_log2(i64 noundef %1081) #25
  %1083 = icmp sgt i32 %1082, -1
  %1084 = zext i32 %1082 to i64
  %1085 = ashr i64 %540, %1084
  %1086 = icmp eq i64 %1085, 0
  %1087 = select i1 %1083, i1 %1086, i1 false
  br i1 %1087, label %1088, label %1095

1088:                                             ; preds = %1077
  %1089 = tail call i32 @mode_for_size(i32 noundef %1082, i32 noundef 2, i32 noundef 1) #25
  %1090 = icmp eq i32 %1089, 1
  br i1 %1090, label %1095, label %1091

1091:                                             ; preds = %1088
  %1092 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1093 = load ptr, ptr %1071, align 8, !tbaa !16
  %1094 = tail call ptr %1092(i32 noundef %1089, ptr noundef %1093) #25
  br label %1501, !llvm.loop !206

1095:                                             ; preds = %1066, %1088, %1077, %1070
  %1096 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1097 = load ptr, ptr %1096, align 8, !tbaa !16
  %1098 = load i32, ptr %1097, align 8
  %1099 = and i32 %1098, 65535
  %1100 = icmp eq i32 %1099, 39
  br i1 %1100, label %1101, label %1155

1101:                                             ; preds = %1095
  %1102 = getelementptr inbounds %struct.rtx_def, ptr %1097, i64 0, i32 1
  %1103 = load ptr, ptr %1102, align 8, !tbaa !16
  %1104 = load i32, ptr %1103, align 8
  %1105 = lshr i32 %1104, 16
  %1106 = and i32 %1105, 255
  %1107 = zext i32 %1106 to i64
  %1108 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1107
  %1109 = load i8, ptr %1108, align 1, !tbaa !16
  %1110 = and i8 %1109, -2
  %1111 = icmp eq i8 %1110, 2
  br i1 %1111, label %1112, label %1155

1112:                                             ; preds = %1101
  %1113 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1107
  %1114 = load i8, ptr %1113, align 1, !tbaa !16
  %1115 = zext i8 %1114 to i32
  %1116 = shl nuw nsw i32 %1115, 3
  %1117 = icmp ugt i32 %320, %1116
  br i1 %1117, label %1155, label %1118

1118:                                             ; preds = %1112
  %1119 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %1097) #25
  %1120 = icmp eq i32 %1119, 0
  br i1 %1120, label %1155, label %1121

1121:                                             ; preds = %1118
  %1122 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1123 = load ptr, ptr %1122, align 8, !tbaa !16
  %1124 = load i32, ptr %1123, align 8
  %1125 = and i32 %1124, 65535
  %1126 = icmp eq i32 %1125, 30
  %1127 = select i1 %1126, i1 %1068, i1 false
  br i1 %1127, label %1128, label %1155

1128:                                             ; preds = %1121
  %1129 = load i8, ptr %1113, align 1, !tbaa !16
  %1130 = icmp ult i8 %1129, 9
  br i1 %1130, label %1131, label %1155

1131:                                             ; preds = %1128
  %1132 = getelementptr inbounds %struct.rtx_def, ptr %1123, i64 0, i32 1
  %1133 = load i64, ptr %1132, align 8, !tbaa !16
  %1134 = xor i64 %1067, -1
  %1135 = and i64 %1133, %1134
  %1136 = icmp eq i64 %1135, 0
  br i1 %1136, label %1137, label %1155

1137:                                             ; preds = %1131
  %1138 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1107
  %1139 = load i64, ptr %1138, align 8, !tbaa !83
  %1140 = xor i64 %1139, -1
  %1141 = and i64 %1133, %1140
  %1142 = icmp ne i64 %1141, 0
  %1143 = icmp eq i64 %1133, %1067
  %1144 = select i1 %1142, i1 true, i1 %1143
  %1145 = icmp eq i64 %1133, %1139
  %1146 = or i1 %1145, %1144
  br i1 %1146, label %1155, label %1147

1147:                                             ; preds = %1137
  %1148 = load ptr, ptr %1096, align 8, !tbaa !16
  %1149 = getelementptr inbounds %struct.rtx_def, ptr %1148, i64 0, i32 1
  %1150 = load ptr, ptr %1149, align 8, !tbaa !16
  %1151 = tail call ptr @gen_int_mode(i64 noundef %1133, i32 noundef %1106) #25
  %1152 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %1106, ptr noundef %1150, ptr noundef %1151) #25
  %1153 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1154 = tail call ptr %1153(i32 noundef %315, ptr noundef %1152) #25
  br label %1501

1155:                                             ; preds = %1112, %1118, %1121, %1128, %1131, %1137, %1101, %1095
  br i1 %963, label %1156, label %1508

1156:                                             ; preds = %1155
  %1157 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1158 = load ptr, ptr %1157, align 8, !tbaa !16
  %1159 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %1160 = icmp eq ptr %1158, %1159
  br i1 %1160, label %1161, label %1508

1161:                                             ; preds = %1156
  %1162 = load ptr, ptr %1096, align 8, !tbaa !16
  %1163 = load i32, ptr %1162, align 8
  %1164 = trunc i32 %1163 to i16
  switch i16 %1164, label %1508 [
    i16 64, label %1165
    i16 68, label %1170
  ]

1165:                                             ; preds = %1161
  %1166 = getelementptr inbounds %struct.rtx_def, ptr %1162, i64 0, i32 1
  %1167 = load ptr, ptr %1166, align 8, !tbaa !16
  %1168 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %315, ptr noundef %1167, i64 noundef 1)
  %1169 = select i1 %544, i32 81, i32 80
  br label %1501, !llvm.loop !206

1170:                                             ; preds = %1161
  %1171 = getelementptr inbounds %struct.rtx_def, ptr %1162, i64 0, i32 1
  %1172 = load ptr, ptr %1171, align 8, !tbaa !16
  %1173 = getelementptr inbounds %struct.rtx_def, ptr %1162, i64 0, i32 1, i32 0, i32 0, i64 1
  %1174 = load ptr, ptr %1173, align 8, !tbaa !16
  %1175 = load i32, ptr %1172, align 8
  %1176 = trunc i32 %1175 to i16
  switch i16 %1176, label %1508 [
    i16 64, label %1197
    i16 63, label %1177
  ]

1177:                                             ; preds = %1170
  %1178 = getelementptr inbounds %struct.rtx_def, ptr %1172, i64 0, i32 1, i32 0, i32 0, i64 1
  %1179 = load ptr, ptr %1178, align 8, !tbaa !16
  %1180 = load i32, ptr %1179, align 8
  %1181 = and i32 %1180, 65535
  %1182 = icmp eq i32 %1181, 30
  br i1 %1182, label %1183, label %1508

1183:                                             ; preds = %1177
  %1184 = load i32, ptr %1174, align 8
  %1185 = and i32 %1184, 65535
  %1186 = icmp eq i32 %1185, 30
  br i1 %1186, label %1187, label %1508

1187:                                             ; preds = %1183
  %1188 = load i8, ptr %317, align 1, !tbaa !16
  %1189 = icmp ult i8 %1188, 9
  br i1 %1189, label %1190, label %1508

1190:                                             ; preds = %1187
  %1191 = getelementptr inbounds %struct.rtx_def, ptr %1179, i64 0, i32 1
  %1192 = load i64, ptr %1191, align 8, !tbaa !16
  %1193 = getelementptr inbounds %struct.rtx_def, ptr %1174, i64 0, i32 1
  %1194 = load i64, ptr %1193, align 8, !tbaa !16
  %1195 = shl nuw i64 1, %1194
  %1196 = icmp eq i64 %1192, %1195
  br i1 %1196, label %1197, label %1508

1197:                                             ; preds = %1190, %1170
  %1198 = getelementptr inbounds %struct.rtx_def, ptr %1172, i64 0, i32 1
  %1199 = load ptr, ptr %1198, align 8, !tbaa !16
  %1200 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 68, i32 noundef %315, ptr noundef %1199, ptr noundef %1174) #25
  %1201 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %315, ptr noundef %1200, i64 noundef 1)
  %1202 = select i1 %544, i32 81, i32 80
  br label %1501

1203:                                             ; preds = %537
  %1204 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1205 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1206 = load ptr, ptr %1205, align 8, !tbaa !16
  %1207 = load i32, ptr %1206, align 8
  %1208 = and i32 %1207, 65535
  %1209 = icmp eq i32 %1208, 30
  br i1 %1209, label %1210, label %1242

1210:                                             ; preds = %1203
  %1211 = getelementptr inbounds %struct.rtx_def, ptr %1206, i64 0, i32 1
  %1212 = load i64, ptr %1211, align 8, !tbaa !16
  %1213 = icmp sgt i64 %1212, -1
  br i1 %1213, label %1214, label %1242

1214:                                             ; preds = %1210
  %1215 = xor i1 %545, true
  %1216 = zext i1 %1215 to i64
  %1217 = add nuw nsw i64 %1212, %1216
  %1218 = icmp ult i64 %1217, 64
  br i1 %1218, label %1219, label %1242

1219:                                             ; preds = %1214
  %1220 = shl nsw i64 -1, %1212
  %1221 = xor i64 %1220, -1
  %1222 = and i64 %540, %1221
  %1223 = icmp eq i64 %1222, 0
  %1224 = icmp ult i8 %318, 9
  %1225 = select i1 %1223, i1 %1224, i1 false
  br i1 %1225, label %1226, label %1242

1226:                                             ; preds = %1219
  %1227 = load ptr, ptr %1204, align 8, !tbaa !16
  %1228 = tail call i64 @nonzero_bits(ptr noundef %1227, i32 noundef %315) #25
  %1229 = load ptr, ptr %1205, align 8, !tbaa !16
  %1230 = getelementptr inbounds %struct.rtx_def, ptr %1229, i64 0, i32 1
  %1231 = load i64, ptr %1230, align 8, !tbaa !16
  %1232 = add nsw i64 %1231, %1216
  %1233 = lshr i64 %322, %1232
  %1234 = xor i64 %1233, -1
  %1235 = and i64 %1228, %1234
  %1236 = icmp eq i64 %1235, 0
  br i1 %1236, label %1237, label %1242

1237:                                             ; preds = %1226
  %1238 = and i64 %540, %322
  %1239 = lshr i64 %1238, %1231
  %1240 = tail call ptr @gen_int_mode(i64 noundef %1239, i32 noundef %315) #25
  %1241 = load ptr, ptr %1204, align 8, !tbaa !16
  br label %1501

1242:                                             ; preds = %1226, %1219, %1214, %1210, %1203
  %1243 = phi ptr [ %1229, %1226 ], [ %1206, %1219 ], [ %1206, %1214 ], [ %1206, %1210 ], [ %1206, %1203 ]
  br i1 %539, label %1244, label %1276

1244:                                             ; preds = %1242
  %1245 = load i32, ptr %1243, align 8
  %1246 = and i32 %1245, 65535
  %1247 = icmp eq i32 %1246, 30
  %1248 = icmp ult i8 %318, 9
  %1249 = select i1 %1247, i1 %1248, i1 false
  br i1 %1249, label %1250, label %1276

1250:                                             ; preds = %1244
  %1251 = load ptr, ptr %1204, align 8, !tbaa !16
  %1252 = add nsw i32 %320, -1
  %1253 = zext i32 %1252 to i64
  %1254 = getelementptr inbounds %struct.rtx_def, ptr %1243, i64 0, i32 1
  %1255 = load i64, ptr %1254, align 8, !tbaa !16
  %1256 = sub nsw i64 %1253, %1255
  %1257 = shl nuw i64 1, %1256
  %1258 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %315, ptr noundef %1251, i64 noundef %1257) #26
  %1259 = icmp eq ptr %1258, null
  br i1 %1259, label %1260, label %1273

1260:                                             ; preds = %1250
  %1261 = load i32, ptr %1251, align 8
  %1262 = lshr i32 %1261, 16
  %1263 = and i32 %1262, 255
  %1264 = tail call ptr @gen_int_mode(i64 noundef %1257, i32 noundef %315) #25
  %1265 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %1263, ptr noundef nonnull %1251, ptr noundef %1264) #25
  %1266 = load i32, ptr %1265, align 8
  %1267 = lshr i32 %1266, 16
  %1268 = and i32 %1267, 255
  %1269 = icmp eq i32 %1268, %315
  br i1 %1269, label %1273, label %1270

1270:                                             ; preds = %1260
  %1271 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1272 = tail call ptr %1271(i32 noundef %315, ptr noundef nonnull %1265) #25
  br label %1273

1273:                                             ; preds = %1250, %1260, %1270
  %1274 = phi ptr [ %1258, %1250 ], [ %1272, %1270 ], [ %1265, %1260 ]
  %1275 = select i1 %546, i32 80, i32 81
  br label %1501, !llvm.loop !206

1276:                                             ; preds = %1244, %1242
  %1277 = icmp eq i64 %540, 0
  %1278 = and i1 %1277, %545
  br i1 %1278, label %1279, label %1508

1279:                                             ; preds = %1276
  %1280 = load i32, ptr %1243, align 8
  %1281 = and i32 %1280, 65535
  %1282 = icmp eq i32 %1281, 30
  br i1 %1282, label %1283, label %1508

1283:                                             ; preds = %1279
  %1284 = getelementptr inbounds %struct.rtx_def, ptr %1243, i64 0, i32 1
  %1285 = load i64, ptr %1284, align 8, !tbaa !16
  %1286 = add nsw i32 %320, -1
  %1287 = zext i32 %1286 to i64
  %1288 = icmp eq i64 %1285, %1287
  br i1 %1288, label %1289, label %1508

1289:                                             ; preds = %1283
  %1290 = load ptr, ptr %1204, align 8, !tbaa !16
  %1291 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %315, ptr noundef %1290, i64 noundef 1) #26
  %1292 = icmp eq ptr %1291, null
  br i1 %1292, label %1293, label %1501, !llvm.loop !206

1293:                                             ; preds = %1289
  %1294 = load i32, ptr %1290, align 8
  %1295 = lshr i32 %1294, 16
  %1296 = and i32 %1295, 255
  %1297 = tail call ptr @gen_int_mode(i64 noundef 1, i32 noundef %315) #25
  %1298 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %1296, ptr noundef nonnull %1290, ptr noundef %1297) #25
  %1299 = load i32, ptr %1298, align 8
  %1300 = lshr i32 %1299, 16
  %1301 = and i32 %1300, 255
  %1302 = icmp eq i32 %1301, %315
  br i1 %1302, label %1501, label %1303, !llvm.loop !206

1303:                                             ; preds = %1293
  %1304 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1305 = tail call ptr %1304(i32 noundef %315, ptr noundef nonnull %1298) #25
  br label %1501, !llvm.loop !206

1306:                                             ; preds = %537
  %1307 = icmp eq i64 %540, 0
  %1308 = and i1 %1307, %545
  br i1 %1308, label %1309, label %1338

1309:                                             ; preds = %1306
  %1310 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1311 = load ptr, ptr %1310, align 8, !tbaa !16
  %1312 = load i32, ptr %1311, align 8
  %1313 = and i32 %1312, 65535
  %1314 = icmp eq i32 %1313, 30
  br i1 %1314, label %1315, label %1338

1315:                                             ; preds = %1309
  %1316 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1317 = load ptr, ptr %1316, align 8, !tbaa !16
  %1318 = getelementptr inbounds %struct.rtx_def, ptr %1311, i64 0, i32 1
  %1319 = load i64, ptr %1318, align 8, !tbaa !16
  %1320 = trunc i64 %1319 to i32
  %1321 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef 68, i32 noundef %315, ptr noundef %1317, i32 noundef %1320) #26
  %1322 = icmp eq ptr %1321, null
  br i1 %1322, label %1323, label %1501, !llvm.loop !206

1323:                                             ; preds = %1315
  %1324 = load i32, ptr %1317, align 8
  %1325 = lshr i32 %1324, 16
  %1326 = and i32 %1325, 255
  %1327 = shl i64 %1319, 32
  %1328 = ashr exact i64 %1327, 32
  %1329 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %1328) #25
  %1330 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %1326, ptr noundef nonnull %1317, ptr noundef %1329) #25
  %1331 = load i32, ptr %1330, align 8
  %1332 = lshr i32 %1331, 16
  %1333 = and i32 %1332, 255
  %1334 = icmp eq i32 %1333, %315
  br i1 %1334, label %1501, label %1335, !llvm.loop !206

1335:                                             ; preds = %1323
  %1336 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1337 = tail call ptr %1336(i32 noundef %315, ptr noundef nonnull %1330) #25
  br label %1501, !llvm.loop !206

1338:                                             ; preds = %1309, %1306
  br i1 %538, label %1433, label %1339

1339:                                             ; preds = %1338
  %1340 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1341 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1342 = load ptr, ptr %1341, align 8, !tbaa !16
  %1343 = load i32, ptr %1342, align 8
  %1344 = and i32 %1343, 65535
  %1345 = icmp eq i32 %1344, 30
  br i1 %1345, label %1346, label %1376

1346:                                             ; preds = %1339
  %1347 = load ptr, ptr %1340, align 8, !tbaa !16
  %1348 = load i32, ptr %1347, align 8
  %1349 = and i32 %1348, 65535
  %1350 = icmp eq i32 %1349, 65
  br i1 %1350, label %1351, label %1376

1351:                                             ; preds = %1346
  %1352 = getelementptr inbounds %struct.rtx_def, ptr %1347, i64 0, i32 1, i32 0, i32 0, i64 1
  %1353 = load ptr, ptr %1352, align 8, !tbaa !16
  %1354 = icmp eq ptr %1342, %1353
  br i1 %1354, label %1355, label %1376

1355:                                             ; preds = %1351
  %1356 = getelementptr inbounds %struct.rtx_def, ptr %1342, i64 0, i32 1
  %1357 = load i64, ptr %1356, align 8, !tbaa !16
  %1358 = trunc i64 %1357 to i32
  %1359 = sub i32 %320, %1358
  %1360 = tail call i32 @mode_for_size(i32 noundef %1359, i32 noundef 2, i32 noundef 1) #25
  %1361 = icmp eq i32 %1360, 1
  br i1 %1361, label %1376, label %1362

1362:                                             ; preds = %1355
  %1363 = zext i32 %1360 to i64
  %1364 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1363
  %1365 = load i64, ptr %1364, align 8, !tbaa !83
  %1366 = lshr i64 %1365, 1
  %1367 = add i64 %540, 1
  %1368 = add i64 %1367, %1366
  %1369 = icmp ugt i64 %1368, %1365
  br i1 %1369, label %1376, label %1370

1370:                                             ; preds = %1362
  %1371 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1372 = load ptr, ptr %1340, align 8, !tbaa !16
  %1373 = getelementptr inbounds %struct.rtx_def, ptr %1372, i64 0, i32 1
  %1374 = load ptr, ptr %1373, align 8, !tbaa !16
  %1375 = tail call ptr %1371(i32 noundef %1360, ptr noundef %1374) #25
  br label %1501, !llvm.loop !206

1376:                                             ; preds = %1339, %1346, %1351, %1355, %1362
  %1377 = load ptr, ptr %1341, align 8, !tbaa !16
  %1378 = load i32, ptr %1377, align 8
  %1379 = and i32 %1378, 65535
  %1380 = icmp eq i32 %1379, 30
  br i1 %1380, label %1381, label %1433

1381:                                             ; preds = %1376
  %1382 = load ptr, ptr %1340, align 8, !tbaa !16
  %1383 = load i32, ptr %1382, align 8
  %1384 = and i32 %1383, 65535
  %1385 = icmp eq i32 %1384, 49
  br i1 %1385, label %1386, label %1433

1386:                                             ; preds = %1381
  %1387 = getelementptr inbounds %struct.rtx_def, ptr %1382, i64 0, i32 1, i32 0, i32 0, i64 1
  %1388 = load ptr, ptr %1387, align 8, !tbaa !16
  %1389 = load i32, ptr %1388, align 8
  %1390 = and i32 %1389, 65535
  %1391 = icmp eq i32 %1390, 30
  br i1 %1391, label %1392, label %1433

1392:                                             ; preds = %1386
  %1393 = getelementptr inbounds %struct.rtx_def, ptr %1382, i64 0, i32 1
  %1394 = load ptr, ptr %1393, align 8, !tbaa !16
  %1395 = load i32, ptr %1394, align 8
  %1396 = and i32 %1395, 65535
  %1397 = icmp eq i32 %1396, 65
  br i1 %1397, label %1398, label %1433

1398:                                             ; preds = %1392
  %1399 = getelementptr inbounds %struct.rtx_def, ptr %1394, i64 0, i32 1, i32 0, i32 0, i64 1
  %1400 = load ptr, ptr %1399, align 8, !tbaa !16
  %1401 = icmp eq ptr %1377, %1400
  br i1 %1401, label %1402, label %1433

1402:                                             ; preds = %1398
  %1403 = getelementptr inbounds %struct.rtx_def, ptr %1377, i64 0, i32 1
  %1404 = load i64, ptr %1403, align 8, !tbaa !16
  %1405 = trunc i64 %1404 to i32
  %1406 = sub i32 %320, %1405
  %1407 = tail call i32 @mode_for_size(i32 noundef %1406, i32 noundef 2, i32 noundef 1) #25
  %1408 = icmp eq i32 %1407, 1
  br i1 %1408, label %1433, label %1409

1409:                                             ; preds = %1402
  %1410 = zext i32 %1407 to i64
  %1411 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1410
  %1412 = load i64, ptr %1411, align 8, !tbaa !83
  %1413 = lshr i64 %1412, 1
  %1414 = add i64 %540, 1
  %1415 = add i64 %1414, %1413
  %1416 = icmp ugt i64 %1415, %1412
  br i1 %1416, label %1433, label %1417

1417:                                             ; preds = %1409
  %1418 = load ptr, ptr %1340, align 8, !tbaa !16
  %1419 = getelementptr inbounds %struct.rtx_def, ptr %1418, i64 0, i32 1
  %1420 = load ptr, ptr %1419, align 8, !tbaa !16
  %1421 = getelementptr inbounds %struct.rtx_def, ptr %1420, i64 0, i32 1
  %1422 = load ptr, ptr %1421, align 8, !tbaa !16
  %1423 = getelementptr inbounds %struct.rtx_def, ptr %1418, i64 0, i32 1, i32 0, i32 0, i64 1
  %1424 = load ptr, ptr %1423, align 8, !tbaa !16
  %1425 = load i32, ptr %548, align 8
  %1426 = lshr i32 %1425, 16
  %1427 = and i32 %1426, 255
  %1428 = load ptr, ptr %1341, align 8, !tbaa !16
  %1429 = tail call ptr @simplify_gen_binary(i32 noundef 67, i32 noundef %1427, ptr noundef %1424, ptr noundef %1428) #25
  %1430 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1431 = tail call ptr %1430(i32 noundef %1407, ptr noundef %1422) #25
  %1432 = tail call ptr @simplify_gen_binary(i32 noundef 49, i32 noundef %1407, ptr noundef %1431, ptr noundef %1429) #25
  br label %1501

1433:                                             ; preds = %1338, %1376, %1381, %1386, %1392, %1398, %1402, %1409, %537
  %1434 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1
  %1435 = getelementptr inbounds %struct.rtx_def, ptr %548, i64 0, i32 1, i32 0, i32 0, i64 1
  %1436 = load ptr, ptr %1435, align 8, !tbaa !16
  %1437 = load i32, ptr %1436, align 8
  %1438 = and i32 %1437, 65535
  %1439 = icmp eq i32 %1438, 30
  br i1 %1439, label %1440, label %1481

1440:                                             ; preds = %1433
  %1441 = getelementptr inbounds %struct.rtx_def, ptr %1436, i64 0, i32 1
  %1442 = load i64, ptr %1441, align 8, !tbaa !16
  %1443 = icmp sgt i64 %1442, -1
  br i1 %1443, label %1444, label %1481

1444:                                             ; preds = %1440
  %1445 = icmp ult i64 %1442, 64
  %1446 = icmp ult i8 %318, 9
  %1447 = select i1 %1445, i1 %1446, i1 false
  br i1 %1447, label %1448, label %1481

1448:                                             ; preds = %1444
  %1449 = load ptr, ptr %1434, align 8, !tbaa !16
  %1450 = tail call i64 @nonzero_bits(ptr noundef %1449, i32 noundef %315) #25
  %1451 = load ptr, ptr %1435, align 8, !tbaa !16
  %1452 = getelementptr inbounds %struct.rtx_def, ptr %1451, i64 0, i32 1
  %1453 = load i64, ptr %1452, align 8, !tbaa !16
  %1454 = shl nsw i64 -1, %1453
  %1455 = xor i64 %1454, -1
  %1456 = and i64 %1450, %1455
  %1457 = icmp eq i64 %1456, 0
  br i1 %1457, label %1458, label %1481

1458:                                             ; preds = %1448
  %1459 = load i32, ptr %548, align 8
  %1460 = and i32 %1459, 65535
  %1461 = icmp eq i32 %1460, 68
  %1462 = lshr i64 %322, %1453
  br i1 %1461, label %1463, label %1465

1463:                                             ; preds = %1458
  %1464 = icmp ugt i64 %540, %1462
  br i1 %1464, label %1508, label %1470

1465:                                             ; preds = %1458
  %1466 = lshr i64 %1462, 1
  %1467 = add i64 %540, 1
  %1468 = add i64 %1467, %1466
  %1469 = icmp ugt i64 %1468, %1462
  br i1 %1469, label %1481, label %1475

1470:                                             ; preds = %1463
  %1471 = tail call i32 @unsigned_condition(i32 noundef %542) #25
  %1472 = load ptr, ptr %1435, align 8, !tbaa !16
  %1473 = getelementptr inbounds %struct.rtx_def, ptr %1472, i64 0, i32 1
  %1474 = load i64, ptr %1473, align 8, !tbaa !16
  br label %1475

1475:                                             ; preds = %1465, %1470
  %1476 = phi i64 [ %1474, %1470 ], [ %1453, %1465 ]
  %1477 = phi i32 [ %1471, %1470 ], [ %542, %1465 ]
  %1478 = shl i64 %540, %1476
  %1479 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %1478) #25
  %1480 = load ptr, ptr %1434, align 8, !tbaa !16
  br label %1501, !llvm.loop !206

1481:                                             ; preds = %1465, %1448, %1444, %1440, %1433
  %1482 = phi ptr [ %1451, %1465 ], [ %1451, %1448 ], [ %1436, %1444 ], [ %1436, %1440 ], [ %1436, %1433 ]
  %1483 = icmp eq i64 %540, 0
  %1484 = or i1 %539, %545
  %1485 = and i1 %1483, %1484
  br i1 %1485, label %1486, label %1508

1486:                                             ; preds = %1481
  %1487 = load i32, ptr %1482, align 8
  %1488 = and i32 %1487, 65535
  %1489 = icmp eq i32 %1488, 30
  br i1 %1489, label %1490, label %1508

1490:                                             ; preds = %1486
  %1491 = getelementptr inbounds %struct.rtx_def, ptr %1482, i64 0, i32 1
  %1492 = load i64, ptr %1491, align 8, !tbaa !16
  %1493 = add nsw i32 %320, -1
  %1494 = zext i32 %1493 to i64
  %1495 = icmp eq i64 %1492, %1494
  br i1 %1495, label %1496, label %1508

1496:                                             ; preds = %1490
  %1497 = load ptr, ptr %1434, align 8, !tbaa !16
  %1498 = icmp eq i32 %542, 83
  %1499 = or i1 %1498, %544
  %1500 = select i1 %1499, i32 85, i32 82
  br label %1501, !llvm.loop !206

1501:                                             ; preds = %858, %1023, %1041, %1335, %1323, %1315, %1303, %1293, %1289, %1197, %1147, %993, %983, %975, %789, %582, %936, %1496, %1475, %1417, %1370, %1273, %1237, %1165, %1091, %1063, %958, %905, %896, %868, %853, %836, %828, %718, %688, %682, %645, %630, %624, %601, %593, %589, %576
  %1502 = phi ptr [ %1479, %1475 ], [ %541, %1496 ], [ %541, %1417 ], [ %541, %1370 ], [ %1240, %1237 ], [ %541, %1273 ], [ %541, %1063 ], [ %541, %1091 ], [ %541, %1165 ], [ %541, %1197 ], [ %541, %1147 ], [ %541, %958 ], [ %930, %936 ], [ %903, %905 ], [ %866, %868 ], [ %541, %896 ], [ %834, %836 ], [ %541, %853 ], [ %541, %828 ], [ %541, %789 ], [ %541, %718 ], [ %541, %688 ], [ %643, %645 ], [ %541, %682 ], [ %599, %601 ], [ %541, %624 ], [ %541, %630 ], [ %587, %589 ], [ %541, %593 ], [ %580, %576 ], [ %541, %582 ], [ %541, %975 ], [ %541, %983 ], [ %541, %993 ], [ %541, %1289 ], [ %541, %1293 ], [ %541, %1303 ], [ %541, %1315 ], [ %541, %1323 ], [ %541, %1335 ], [ %541, %1041 ], [ %541, %1023 ], [ %861, %858 ]
  %1503 = phi ptr [ %1480, %1475 ], [ %1497, %1496 ], [ %1432, %1417 ], [ %1375, %1370 ], [ %1241, %1237 ], [ %1274, %1273 ], [ %1064, %1063 ], [ %1094, %1091 ], [ %1168, %1165 ], [ %1201, %1197 ], [ %1154, %1147 ], [ %959, %958 ], [ %928, %936 ], [ %907, %905 ], [ %869, %868 ], [ %897, %896 ], [ %838, %836 ], [ %855, %853 ], [ %829, %828 ], [ %790, %789 ], [ %719, %718 ], [ %690, %688 ], [ %646, %645 ], [ %683, %682 ], [ %603, %601 ], [ %625, %624 ], [ %632, %630 ], [ %591, %589 ], [ %595, %593 ], [ %578, %576 ], [ %583, %582 ], [ %981, %975 ], [ %988, %983 ], [ %995, %993 ], [ %1291, %1289 ], [ %1298, %1293 ], [ %1305, %1303 ], [ %1321, %1315 ], [ %1330, %1323 ], [ %1337, %1335 ], [ %1044, %1041 ], [ %1024, %1023 ], [ %864, %858 ]
  %1504 = phi i32 [ %1477, %1475 ], [ %1500, %1496 ], [ %542, %1417 ], [ %542, %1370 ], [ %542, %1237 ], [ %1275, %1273 ], [ %1065, %1063 ], [ %542, %1091 ], [ %1169, %1165 ], [ %1202, %1197 ], [ %542, %1147 ], [ %960, %958 ], [ %937, %936 ], [ %542, %905 ], [ %542, %868 ], [ %898, %896 ], [ %542, %836 ], [ %856, %853 ], [ %542, %828 ], [ %542, %789 ], [ %542, %718 ], [ %542, %688 ], [ %542, %645 ], [ %684, %682 ], [ %542, %601 ], [ %626, %624 ], [ %633, %630 ], [ %542, %589 ], [ %596, %593 ], [ %581, %576 ], [ %542, %582 ], [ %542, %975 ], [ %542, %983 ], [ %542, %993 ], [ %542, %1289 ], [ %542, %1293 ], [ %542, %1303 ], [ %542, %1315 ], [ %542, %1323 ], [ %542, %1335 ], [ %542, %1041 ], [ %542, %1023 ], [ %542, %858 ]
  %1505 = load i32, ptr %1502, align 8
  %1506 = and i32 %1505, 65535
  %1507 = icmp eq i32 %1506, 30
  br i1 %1507, label %309, label %1508

1508:                                             ; preds = %1501, %331, %326, %1463, %1177, %1183, %1187, %1190, %1170, %1156, %926, %1155, %537, %1481, %1486, %1490, %1276, %1279, %1283, %939, %940, %946, %951, %936, %908, %910, %899, %900, %870, %871, %877, %884, %890, %839, %841, %846, %806, %810, %817, %821, %825, %791, %794, %691, %698, %704, %708, %715, %685, %627, %604, %592, %582, %1161, %302
  %1509 = phi ptr [ %303, %302 ], [ %541, %582 ], [ %541, %592 ], [ %541, %604 ], [ %541, %627 ], [ %541, %685 ], [ %541, %715 ], [ %541, %708 ], [ %541, %704 ], [ %541, %698 ], [ %541, %691 ], [ %541, %794 ], [ %541, %791 ], [ %541, %825 ], [ %541, %821 ], [ %541, %817 ], [ %541, %810 ], [ %541, %806 ], [ %541, %846 ], [ %541, %841 ], [ %541, %839 ], [ %541, %890 ], [ %541, %884 ], [ %541, %877 ], [ %541, %871 ], [ %541, %870 ], [ %541, %900 ], [ %541, %899 ], [ %541, %910 ], [ %541, %908 ], [ %541, %936 ], [ %541, %951 ], [ %541, %946 ], [ %541, %940 ], [ %541, %939 ], [ %541, %1283 ], [ %541, %1279 ], [ %541, %1276 ], [ %541, %1490 ], [ %541, %1486 ], [ %541, %1481 ], [ %541, %537 ], [ %541, %1155 ], [ %541, %926 ], [ %541, %1156 ], [ %541, %1170 ], [ %541, %1190 ], [ %541, %1187 ], [ %541, %1183 ], [ %541, %1177 ], [ %541, %1463 ], [ %312, %326 ], [ %312, %331 ], [ %1502, %1501 ], [ %541, %1161 ]
  %1510 = phi ptr [ %304, %302 ], [ %548, %582 ], [ %548, %592 ], [ %548, %604 ], [ %548, %627 ], [ %548, %685 ], [ %548, %715 ], [ %548, %708 ], [ %548, %704 ], [ %548, %698 ], [ %548, %691 ], [ %548, %794 ], [ %548, %791 ], [ %548, %825 ], [ %548, %821 ], [ %548, %817 ], [ %548, %810 ], [ %548, %806 ], [ %548, %846 ], [ %548, %841 ], [ %548, %839 ], [ %548, %890 ], [ %548, %884 ], [ %548, %877 ], [ %548, %871 ], [ %548, %870 ], [ %548, %900 ], [ %548, %899 ], [ %548, %910 ], [ %548, %908 ], [ %548, %936 ], [ %548, %951 ], [ %548, %946 ], [ %548, %940 ], [ %548, %939 ], [ %548, %1283 ], [ %548, %1279 ], [ %548, %1276 ], [ %548, %1490 ], [ %548, %1486 ], [ %548, %1481 ], [ %548, %537 ], [ %548, %1155 ], [ %548, %926 ], [ %548, %1156 ], [ %548, %1170 ], [ %548, %1190 ], [ %548, %1187 ], [ %548, %1183 ], [ %548, %1177 ], [ %548, %1463 ], [ %311, %326 ], [ %311, %331 ], [ %1503, %1501 ], [ %548, %1161 ]
  %1511 = phi i32 [ %305, %302 ], [ %542, %582 ], [ %542, %592 ], [ %542, %604 ], [ %542, %627 ], [ %542, %685 ], [ %542, %715 ], [ %542, %708 ], [ %542, %704 ], [ %542, %698 ], [ %542, %691 ], [ %542, %794 ], [ %542, %791 ], [ %542, %825 ], [ %542, %821 ], [ %542, %817 ], [ %542, %810 ], [ %542, %806 ], [ %542, %846 ], [ %542, %841 ], [ %542, %839 ], [ %542, %890 ], [ %542, %884 ], [ %542, %877 ], [ %542, %871 ], [ %542, %870 ], [ %542, %900 ], [ %542, %899 ], [ %542, %910 ], [ %542, %908 ], [ %542, %936 ], [ %542, %951 ], [ %542, %946 ], [ %542, %940 ], [ %542, %939 ], [ %542, %1283 ], [ %542, %1279 ], [ %542, %1276 ], [ %542, %1490 ], [ %542, %1486 ], [ %542, %1481 ], [ %542, %537 ], [ %542, %1155 ], [ %542, %926 ], [ %542, %1156 ], [ %542, %1170 ], [ %542, %1190 ], [ %542, %1187 ], [ %542, %1183 ], [ %542, %1177 ], [ %542, %1463 ], [ %310, %326 ], [ %310, %331 ], [ %1504, %1501 ], [ %542, %1161 ]
  %1512 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %1513 = icmp eq ptr %1509, %1512
  %1514 = select i1 %1513, i32 48, i32 23
  %1515 = tail call fastcc ptr @make_compound_operation(ptr noundef %1510, i32 noundef %1514)
  %1516 = tail call fastcc ptr @make_compound_operation(ptr noundef %1509, i32 noundef 23)
  %1517 = load i32, ptr %1515, align 8
  %1518 = and i32 %1517, 65535
  %1519 = icmp eq i32 %1518, 39
  br i1 %1519, label %1520, label %1592

1520:                                             ; preds = %1508
  %1521 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %1515) #25
  %1522 = icmp eq i32 %1521, 0
  br i1 %1522, label %1592, label %1523

1523:                                             ; preds = %1520
  %1524 = load i32, ptr %1515, align 8
  %1525 = lshr i32 %1524, 16
  %1526 = and i32 %1525, 255
  %1527 = zext i32 %1526 to i64
  %1528 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1527
  %1529 = load i8, ptr %1528, align 1, !tbaa !16
  %1530 = icmp eq i8 %1529, 2
  br i1 %1530, label %1531, label %1592

1531:                                             ; preds = %1523
  %1532 = getelementptr inbounds %struct.rtx_def, ptr %1515, i64 0, i32 1
  %1533 = load ptr, ptr %1532, align 8, !tbaa !16
  %1534 = load i32, ptr %1533, align 8
  %1535 = lshr i32 %1534, 16
  %1536 = and i32 %1535, 255
  %1537 = zext i32 %1536 to i64
  %1538 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1537
  %1539 = load i8, ptr %1538, align 1, !tbaa !16
  %1540 = icmp eq i8 %1539, 2
  %1541 = and i32 %1511, -2
  %1542 = icmp eq i32 %1541, 80
  %1543 = select i1 %1540, i1 %1542, i1 false
  br i1 %1543, label %1544, label %1592

1544:                                             ; preds = %1531
  %1545 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1527
  %1546 = load i8, ptr %1545, align 1, !tbaa !16
  %1547 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1537
  %1548 = load i8, ptr %1547, align 1, !tbaa !16
  %1549 = icmp ugt i8 %1546, %1548
  br i1 %1549, label %1550, label %1556

1550:                                             ; preds = %1544
  %1551 = and i32 %1534, 65535
  %1552 = icmp eq i32 %1551, 37
  br i1 %1552, label %1553, label %1592

1553:                                             ; preds = %1550
  %1554 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1555 = tail call ptr %1554(i32 noundef %1536, ptr noundef %1516) #25
  br label %1592

1556:                                             ; preds = %1544
  %1557 = icmp ult i8 %1548, 9
  br i1 %1557, label %1558, label %1592

1558:                                             ; preds = %1556
  %1559 = tail call i64 @nonzero_bits(ptr noundef nonnull %1533, i32 noundef %1536) #25
  %1560 = load i32, ptr %1515, align 8
  %1561 = lshr i32 %1560, 16
  %1562 = and i32 %1561, 255
  %1563 = zext i32 %1562 to i64
  %1564 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1563
  %1565 = load i64, ptr %1564, align 8, !tbaa !83
  %1566 = xor i64 %1565, -1
  %1567 = and i64 %1559, %1566
  %1568 = icmp eq i64 %1567, 0
  br i1 %1568, label %1569, label %1592

1569:                                             ; preds = %1558
  %1570 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1571 = load ptr, ptr %1532, align 8, !tbaa !16
  %1572 = load i32, ptr %1571, align 8
  %1573 = lshr i32 %1572, 16
  %1574 = and i32 %1573, 255
  %1575 = tail call ptr %1570(i32 noundef %1574, ptr noundef %1516) #25
  %1576 = load ptr, ptr %1532, align 8, !tbaa !16
  %1577 = load i32, ptr %1576, align 8
  %1578 = lshr i32 %1577, 16
  %1579 = and i32 %1578, 255
  %1580 = tail call i64 @nonzero_bits(ptr noundef %1575, i32 noundef %1579) #25
  %1581 = load i32, ptr %1515, align 8
  %1582 = lshr i32 %1581, 16
  %1583 = and i32 %1582, 255
  %1584 = zext i32 %1583 to i64
  %1585 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1584
  %1586 = load i64, ptr %1585, align 8, !tbaa !83
  %1587 = xor i64 %1586, -1
  %1588 = and i64 %1580, %1587
  %1589 = icmp eq i64 %1588, 0
  br i1 %1589, label %1590, label %1592

1590:                                             ; preds = %1569
  %1591 = load ptr, ptr %1532, align 8, !tbaa !16
  br label %1592

1592:                                             ; preds = %1553, %1550, %1569, %1590, %1558, %1556, %1531, %1523, %1520, %1508
  %1593 = phi ptr [ %1555, %1553 ], [ %1516, %1550 ], [ %1575, %1590 ], [ %1516, %1569 ], [ %1516, %1558 ], [ %1516, %1556 ], [ %1516, %1531 ], [ %1516, %1523 ], [ %1516, %1520 ], [ %1516, %1508 ]
  %1594 = phi ptr [ %1533, %1553 ], [ %1515, %1550 ], [ %1591, %1590 ], [ %1515, %1569 ], [ %1515, %1558 ], [ %1515, %1556 ], [ %1515, %1531 ], [ %1515, %1523 ], [ %1515, %1520 ], [ %1515, %1508 ]
  %1595 = load i32, ptr %1594, align 8
  %1596 = lshr i32 %1595, 16
  %1597 = and i32 %1596, 255
  %1598 = icmp eq i32 %1597, 0
  br i1 %1598, label %1711, label %1599

1599:                                             ; preds = %1592
  %1600 = zext i32 %1597 to i64
  %1601 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1600
  %1602 = load i8, ptr %1601, align 1, !tbaa !16
  %1603 = icmp eq i8 %1602, 2
  br i1 %1603, label %1604, label %1711

1604:                                             ; preds = %1599
  %1605 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1600
  %1606 = load i8, ptr %1605, align 1, !tbaa !16
  %1607 = icmp ult i8 %1606, 4
  br i1 %1607, label %1608, label %1711

1608:                                             ; preds = %1604
  %1609 = tail call i32 @have_insn_for(i32 noundef 48, i32 noundef %1597) #25
  %1610 = icmp eq i32 %1609, 0
  br i1 %1610, label %1611, label %1711

1611:                                             ; preds = %1608
  %1612 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %1600
  %1613 = load i8, ptr %1612, align 1, !tbaa !16
  %1614 = icmp eq i8 %1613, 0
  br i1 %1614, label %1711, label %1615

1615:                                             ; preds = %1611
  %1616 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %1600
  br label %1617

1617:                                             ; preds = %1615, %1706
  %1618 = phi i8 [ %1613, %1615 ], [ %1709, %1706 ]
  %1619 = phi ptr [ %1594, %1615 ], [ %1707, %1706 ]
  %1620 = zext i8 %1618 to i32
  %1621 = zext i8 %1618 to i64
  %1622 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1621
  %1623 = load i8, ptr %1622, align 1, !tbaa !16
  %1624 = icmp ult i8 %1623, 9
  br i1 %1624, label %1625, label %1711

1625:                                             ; preds = %1617
  %1626 = tail call i32 @have_insn_for(i32 noundef 48, i32 noundef %1620) #25
  %1627 = icmp eq i32 %1626, 0
  br i1 %1627, label %1706, label %1628

1628:                                             ; preds = %1625
  %1629 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %1630 = icmp eq ptr %1593, %1629
  br i1 %1630, label %1631, label %1648

1631:                                             ; preds = %1628
  switch i32 %1511, label %1663 [
    i32 85, label %1632
    i32 82, label %1632
    i32 89, label %1649
    i32 88, label %1649
    i32 87, label %1649
    i32 86, label %1649
    i32 81, label %1649
    i32 80, label %1649
  ]

1632:                                             ; preds = %1631, %1631
  %1633 = load i8, ptr %1605, align 1, !tbaa !16
  %1634 = icmp ult i8 %1633, 9
  br i1 %1634, label %1635, label %1648

1635:                                             ; preds = %1632
  %1636 = icmp eq i32 %1511, 85
  %1637 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1638 = tail call ptr %1637(i32 noundef %1620, ptr noundef %1619) #25
  %1639 = load i8, ptr %1605, align 1, !tbaa !16
  %1640 = zext i8 %1639 to i64
  %1641 = shl nuw nsw i64 %1640, 3
  %1642 = add nuw nsw i64 %1641, 4294967295
  %1643 = and i64 %1642, 4294967295
  %1644 = shl nuw i64 1, %1643
  %1645 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %1644) #25
  %1646 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %1620, ptr noundef %1638, ptr noundef %1645) #25
  %1647 = select i1 %1636, i32 80, i32 81
  br label %1711

1648:                                             ; preds = %1632, %1628
  switch i32 %1511, label %1663 [
    i32 89, label %1649
    i32 88, label %1649
    i32 87, label %1649
    i32 86, label %1649
    i32 81, label %1649
    i32 80, label %1649
  ]

1649:                                             ; preds = %1631, %1631, %1631, %1631, %1631, %1631, %1648, %1648, %1648, %1648, %1648, %1648
  %1650 = tail call i64 @nonzero_bits(ptr noundef %1619, i32 noundef %1620) #25
  %1651 = load i64, ptr %1616, align 8, !tbaa !83
  %1652 = xor i64 %1651, -1
  %1653 = and i64 %1650, %1652
  %1654 = icmp eq i64 %1653, 0
  br i1 %1654, label %1655, label %1663

1655:                                             ; preds = %1649
  %1656 = load i32, ptr %1593, align 8
  %1657 = and i32 %1656, 65535
  %1658 = icmp eq i32 %1657, 30
  br i1 %1658, label %1681, label %1659

1659:                                             ; preds = %1655
  %1660 = tail call i64 @nonzero_bits(ptr noundef nonnull %1593, i32 noundef %1620) #25
  %1661 = and i64 %1660, %1652
  %1662 = icmp eq i64 %1661, 0
  br i1 %1662, label %1681, label %1663

1663:                                             ; preds = %1631, %1648, %1649, %1659
  %1664 = tail call i32 @num_sign_bit_copies(ptr noundef %1619, i32 noundef %1620) #25
  %1665 = load i8, ptr %1622, align 1, !tbaa !16
  %1666 = zext i8 %1665 to i32
  %1667 = load i8, ptr %1605, align 1, !tbaa !16
  %1668 = zext i8 %1667 to i32
  %1669 = sub nsw i32 %1666, %1668
  %1670 = shl nsw i32 %1669, 3
  %1671 = icmp ugt i32 %1664, %1670
  br i1 %1671, label %1672, label %1706

1672:                                             ; preds = %1663
  %1673 = tail call i32 @num_sign_bit_copies(ptr noundef %1593, i32 noundef %1620) #25
  %1674 = load i8, ptr %1622, align 1, !tbaa !16
  %1675 = zext i8 %1674 to i32
  %1676 = load i8, ptr %1605, align 1, !tbaa !16
  %1677 = zext i8 %1676 to i32
  %1678 = sub nsw i32 %1675, %1677
  %1679 = shl nsw i32 %1678, 3
  %1680 = icmp ugt i32 %1673, %1679
  br i1 %1680, label %1681, label %1706

1681:                                             ; preds = %1655, %1672, %1659
  %1682 = phi i1 [ false, %1672 ], [ true, %1659 ], [ true, %1655 ]
  %1683 = load i32, ptr %1619, align 8
  %1684 = and i32 %1683, 65535
  %1685 = icmp eq i32 %1684, 61
  br i1 %1685, label %1686, label %1699

1686:                                             ; preds = %1681
  %1687 = tail call i32 @have_insn_for(i32 noundef 61, i32 noundef %1597) #25
  %1688 = icmp eq i32 %1687, 0
  br i1 %1688, label %1689, label %1699

1689:                                             ; preds = %1686
  %1690 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1691 = getelementptr inbounds %struct.rtx_def, ptr %1619, i64 0, i32 1
  %1692 = load ptr, ptr %1691, align 8, !tbaa !16
  %1693 = tail call ptr %1690(i32 noundef %1620, ptr noundef %1692) #25
  %1694 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %1695 = getelementptr inbounds %struct.rtx_def, ptr %1619, i64 0, i32 1, i32 0, i32 0, i64 1
  %1696 = load ptr, ptr %1695, align 8, !tbaa !16
  %1697 = tail call ptr %1694(i32 noundef %1620, ptr noundef %1696) #25
  %1698 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %1620, ptr noundef %1693, ptr noundef %1697) #25
  br label %1706

1699:                                             ; preds = %1686, %1681
  br i1 %1682, label %1700, label %1703

1700:                                             ; preds = %1699
  %1701 = tail call ptr @simplify_gen_unary(i32 noundef 99, i32 noundef %1620, ptr noundef nonnull %1619, i32 noundef %1597) #25
  %1702 = tail call ptr @simplify_gen_unary(i32 noundef 99, i32 noundef %1620, ptr noundef %1593, i32 noundef %1597) #25
  br label %1711

1703:                                             ; preds = %1699
  %1704 = tail call ptr @simplify_gen_unary(i32 noundef 98, i32 noundef %1620, ptr noundef nonnull %1619, i32 noundef %1597) #25
  %1705 = tail call ptr @simplify_gen_unary(i32 noundef 98, i32 noundef %1620, ptr noundef %1593, i32 noundef %1597) #25
  br label %1711

1706:                                             ; preds = %1663, %1672, %1689, %1625
  %1707 = phi ptr [ %1619, %1625 ], [ %1619, %1663 ], [ %1619, %1672 ], [ %1698, %1689 ]
  %1708 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %1621
  %1709 = load i8, ptr %1708, align 1, !tbaa !16
  %1710 = icmp eq i8 %1709, 0
  br i1 %1710, label %1711, label %1617, !llvm.loop !207

1711:                                             ; preds = %1706, %1617, %1611, %1635, %1703, %1700, %1608, %1604, %1599, %1592
  %1712 = phi ptr [ %1593, %1608 ], [ %1593, %1604 ], [ %1593, %1599 ], [ %1593, %1592 ], [ %1593, %1635 ], [ %1702, %1700 ], [ %1705, %1703 ], [ %1593, %1611 ], [ %1593, %1617 ], [ %1593, %1706 ]
  %1713 = phi ptr [ %1594, %1608 ], [ %1594, %1604 ], [ %1594, %1599 ], [ %1594, %1592 ], [ %1646, %1635 ], [ %1701, %1700 ], [ %1704, %1703 ], [ %1594, %1611 ], [ %1707, %1706 ], [ %1619, %1617 ]
  %1714 = phi i32 [ %1511, %1608 ], [ %1511, %1604 ], [ %1511, %1599 ], [ %1511, %1592 ], [ %1647, %1635 ], [ %1511, %1700 ], [ %1511, %1703 ], [ %1511, %1611 ], [ %1511, %1617 ], [ %1511, %1706 ]
  store ptr %1713, ptr %1, align 8, !tbaa !5
  store ptr %1712, ptr %2, align 8, !tbaa !5
  ret i32 %1714
}

declare i32 @general_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @simplify_gen_relational(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @reversed_comparison_code_parts(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_eee_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @simplify_relational_operation(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @simplify_binary_operation(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @simplify_ternary_operation(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @apply_distributive_law(ptr noundef readonly %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = lshr i32 %2, 16
  %5 = and i32 %4, 255
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !16
  switch i8 %8, label %9 [
    i8 8, label %14
    i8 9, label %14
    i8 11, label %14
  ]

9:                                                ; preds = %1
  %10 = icmp ne i8 %8, 17
  %11 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %12 = icmp ne i32 %11, 0
  %13 = select i1 %10, i1 true, i1 %12
  br i1 %13, label %17, label %190

14:                                               ; preds = %1, %1, %1
  %15 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !20
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %190, label %17

17:                                               ; preds = %14, %9
  %18 = trunc i32 %2 to i16
  switch i16 %18, label %190 [
    i16 63, label %19
    i16 62, label %19
    i16 61, label %19
    i16 50, label %19
    i16 49, label %19
  ]

19:                                               ; preds = %17, %17, %17, %17, %17
  %20 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %23 = load ptr, ptr %22, align 8, !tbaa !16
  %24 = load i32, ptr %21, align 8
  %25 = and i32 %24, 65535
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !16
  %29 = and i32 %28, -2
  %30 = icmp eq i32 %29, 8
  br i1 %30, label %190, label %31

31:                                               ; preds = %19
  %32 = load i32, ptr %23, align 8
  %33 = and i32 %32, 65535
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !16
  %37 = and i32 %36, -2
  %38 = icmp eq i32 %37, 8
  br i1 %38, label %190, label %39

39:                                               ; preds = %31
  %40 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %21)
  %41 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %23)
  %42 = load i32, ptr %40, align 8
  %43 = and i32 %42, 65535
  %44 = load i32, ptr %41, align 8
  %45 = and i32 %44, 65535
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %47, label %190

47:                                               ; preds = %39
  %48 = trunc i32 %42 to i16
  switch i16 %48, label %190 [
    i16 68, label %49
    i16 67, label %49
    i16 61, label %49
    i16 62, label %49
    i16 52, label %52
    i16 65, label %108
    i16 39, label %55
  ]

49:                                               ; preds = %47, %47, %47, %47
  %50 = add nsw i32 %3, -49
  %51 = icmp ult i32 %50, 2
  br i1 %51, label %190, label %108

52:                                               ; preds = %47
  %53 = add nsw i32 %3, -51
  %54 = icmp ult i32 %53, -2
  br i1 %54, label %190, label %108

55:                                               ; preds = %47
  %56 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = load i32, ptr %57, align 8
  %59 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !16
  %61 = load i32, ptr %60, align 8
  %62 = xor i32 %61, %58
  %63 = and i32 %62, 16711680
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %190

65:                                               ; preds = %55
  %66 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1, i32 0, i32 0, i64 1
  %67 = load i32, ptr %66, align 8, !tbaa !16
  %68 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  %69 = load i32, ptr %68, align 8, !tbaa !16
  %70 = icmp eq i32 %67, %69
  br i1 %70, label %71, label %190

71:                                               ; preds = %65
  %72 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %40) #25
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %190, label %74

74:                                               ; preds = %71
  %75 = load i32, ptr %40, align 8
  %76 = lshr i32 %75, 16
  %77 = and i32 %76, 255
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %78
  %80 = load i8, ptr %79, align 1, !tbaa !16
  %81 = load ptr, ptr %56, align 8, !tbaa !16
  %82 = load i32, ptr %81, align 8
  %83 = lshr i32 %82, 16
  %84 = and i32 %83, 255
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %85
  %87 = load i8, ptr %86, align 1, !tbaa !16
  %88 = icmp eq i8 %80, %87
  br i1 %88, label %89, label %190

89:                                               ; preds = %74
  %90 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %78
  %91 = load i8, ptr %90, align 1, !tbaa !16
  %92 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %85
  %93 = load i8, ptr %92, align 1, !tbaa !16
  %94 = icmp ugt i8 %91, %93
  %95 = add i8 %80, -12
  %96 = icmp ult i8 %95, 6
  %97 = or i1 %96, %94
  %98 = icmp ugt i8 %93, 4
  %99 = or i1 %98, %97
  br i1 %99, label %190, label %100

100:                                              ; preds = %89
  %101 = load ptr, ptr %59, align 8, !tbaa !16
  %102 = tail call ptr @simplify_gen_binary(i32 noundef %3, i32 noundef %84, ptr noundef nonnull %81, ptr noundef %101) #25
  %103 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %104 = load i32, ptr %0, align 8
  %105 = lshr i32 %104, 16
  %106 = and i32 %105, 255
  %107 = tail call ptr %103(i32 noundef %106, ptr noundef %102) #25
  br label %190

108:                                              ; preds = %52, %49, %47
  %109 = zext i32 %43 to i64
  %110 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %109
  %111 = load i32, ptr %110, align 4, !tbaa !16
  %112 = icmp eq i32 %111, 3
  br i1 %112, label %113, label %127

113:                                              ; preds = %108
  %114 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  %115 = load ptr, ptr %114, align 8, !tbaa !16
  %116 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !16
  %118 = tail call i32 @rtx_equal_p(ptr noundef %115, ptr noundef %117) #25
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %124

120:                                              ; preds = %113
  %121 = load i32, ptr %40, align 8
  %122 = and i32 %121, 65535
  %123 = zext i32 %122 to i64
  br label %127

124:                                              ; preds = %113
  %125 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1, i32 0, i32 0, i64 1
  %126 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %171

127:                                              ; preds = %120, %108
  %128 = phi i64 [ %123, %120 ], [ %109, %108 ]
  %129 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !16
  %131 = icmp eq i32 %130, 3
  br i1 %131, label %132, label %146

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  %134 = load ptr, ptr %133, align 8, !tbaa !16
  %135 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  %136 = load ptr, ptr %135, align 8, !tbaa !16
  %137 = tail call i32 @rtx_equal_p(ptr noundef %134, ptr noundef %136) #25
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %143

139:                                              ; preds = %132
  %140 = load i32, ptr %40, align 8
  %141 = and i32 %140, 65535
  %142 = zext i32 %141 to i64
  br label %146

143:                                              ; preds = %132
  %144 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %145 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %171

146:                                              ; preds = %139, %127
  %147 = phi i64 [ %142, %139 ], [ %128, %127 ]
  %148 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %147
  %149 = load i32, ptr %148, align 4, !tbaa !16
  %150 = icmp eq i32 %149, 3
  br i1 %150, label %151, label %161

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1, i32 0, i32 0, i64 1
  %153 = load ptr, ptr %152, align 8, !tbaa !16
  %154 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %155 = load ptr, ptr %154, align 8, !tbaa !16
  %156 = tail call i32 @rtx_equal_p(ptr noundef %153, ptr noundef %155) #25
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %161, label %158

158:                                              ; preds = %151
  %159 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  %160 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %171

161:                                              ; preds = %151, %146
  %162 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1, i32 0, i32 0, i64 1
  %163 = load ptr, ptr %162, align 8, !tbaa !16
  %164 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1, i32 0, i32 0, i64 1
  %165 = load ptr, ptr %164, align 8, !tbaa !16
  %166 = tail call i32 @rtx_equal_p(ptr noundef %163, ptr noundef %165) #25
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %190, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.rtx_def, ptr %41, i64 0, i32 1
  %170 = getelementptr inbounds %struct.rtx_def, ptr %40, i64 0, i32 1
  br label %171

171:                                              ; preds = %143, %168, %158, %124
  %172 = phi ptr [ %125, %124 ], [ %145, %143 ], [ %159, %158 ], [ %170, %168 ]
  %173 = phi ptr [ %126, %124 ], [ %144, %143 ], [ %160, %158 ], [ %169, %168 ]
  %174 = phi ptr [ %114, %124 ], [ %133, %143 ], [ %152, %158 ], [ %162, %168 ]
  %175 = load ptr, ptr %174, align 8, !tbaa !16
  %176 = load ptr, ptr %173, align 8, !tbaa !16
  %177 = load ptr, ptr %172, align 8, !tbaa !16
  %178 = load i32, ptr %0, align 8
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  %181 = tail call ptr @simplify_gen_binary(i32 noundef %3, i32 noundef %180, ptr noundef %177, ptr noundef %176) #25
  %182 = icmp eq i32 %3, 63
  %183 = icmp eq i32 %43, 62
  %184 = and i1 %182, %183
  br i1 %184, label %185, label %192

185:                                              ; preds = %171
  %186 = load i32, ptr %0, align 8
  %187 = lshr i32 %186, 16
  %188 = and i32 %187, 255
  %189 = tail call ptr @simplify_gen_unary(i32 noundef 64, i32 noundef %188, ptr noundef %175, i32 noundef %188) #25
  br label %192

190:                                              ; preds = %161, %47, %55, %65, %71, %74, %89, %52, %49, %39, %19, %31, %17, %14, %9, %100, %192
  %191 = phi ptr [ %199, %192 ], [ %107, %100 ], [ %0, %9 ], [ %0, %14 ], [ %0, %17 ], [ %0, %31 ], [ %0, %19 ], [ %0, %39 ], [ %0, %49 ], [ %0, %52 ], [ %0, %89 ], [ %0, %74 ], [ %0, %71 ], [ %0, %65 ], [ %0, %55 ], [ %0, %47 ], [ %0, %161 ]
  ret ptr %191

192:                                              ; preds = %185, %171
  %193 = phi i32 [ 61, %185 ], [ %43, %171 ]
  %194 = phi ptr [ %189, %185 ], [ %175, %171 ]
  %195 = load i32, ptr %0, align 8
  %196 = lshr i32 %195, 16
  %197 = and i32 %196, 255
  %198 = tail call fastcc ptr @apply_distributive_law(ptr noundef %181)
  %199 = tail call ptr @simplify_gen_binary(i32 noundef %193, i32 noundef %197, ptr noundef %198, ptr noundef %194) #25
  br label %190
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @make_compound_operation(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = lshr i32 %3, 16
  %6 = and i32 %5, 255
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %7
  %9 = load i8, ptr %8, align 1, !tbaa !16
  %10 = zext i8 %9 to i32
  %11 = shl nuw nsw i32 %10, 3
  %12 = trunc i32 %3 to i16
  switch i16 %12, label %13 [
    i16 50, label %26
    i16 49, label %26
    i16 43, label %26
    i16 48, label %18
  ]

13:                                               ; preds = %2
  %14 = zext i32 %4 to i64
  %15 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %14
  %16 = load i32, ptr %15, align 4, !tbaa !16
  %17 = icmp ult i32 %16, 2
  br i1 %17, label %18, label %23

18:                                               ; preds = %2, %13
  %19 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %20 = load ptr, ptr %19, align 8, !tbaa !16
  %21 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %22 = icmp eq ptr %20, %21
  br i1 %22, label %26, label %23

23:                                               ; preds = %18, %13
  %24 = icmp eq i32 %1, 48
  %25 = select i1 %24, i32 23, i32 %1
  br label %26

26:                                               ; preds = %2, %2, %2, %23, %18
  %27 = phi i32 [ 43, %2 ], [ %25, %23 ], [ 48, %18 ], [ 43, %2 ], [ 43, %2 ]
  switch i16 %12, label %437 [
    i16 65, label %28
    i16 61, label %50
    i16 68, label %275
    i16 67, label %298
    i16 39, label %381
  ]

28:                                               ; preds = %26
  %29 = icmp eq i32 %1, 43
  br i1 %29, label %30, label %437

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %32 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %33 = load ptr, ptr %32, align 8, !tbaa !16
  %34 = load i32, ptr %33, align 8
  %35 = and i32 %34, 65535
  %36 = icmp eq i32 %35, 30
  br i1 %36, label %37, label %437

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1
  %39 = load i64, ptr %38, align 8, !tbaa !16
  %40 = icmp ult i64 %39, 64
  br i1 %40, label %41, label %437

41:                                               ; preds = %37
  %42 = load ptr, ptr %31, align 8, !tbaa !16
  %43 = tail call fastcc ptr @make_compound_operation(ptr noundef %42, i32 noundef %27)
  %44 = load ptr, ptr %32, align 8, !tbaa !16
  %45 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1
  %46 = load i64, ptr %45, align 8, !tbaa !16
  %47 = shl nuw i64 1, %46
  %48 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %47) #25
  %49 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef %6, ptr noundef %43, ptr noundef %48) #25
  br label %429

50:                                               ; preds = %26
  %51 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %52 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %53 = load ptr, ptr %52, align 8, !tbaa !16
  %54 = load i32, ptr %53, align 8
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, 30
  br i1 %56, label %57, label %437

57:                                               ; preds = %50
  %58 = load ptr, ptr %51, align 8, !tbaa !16
  %59 = load i32, ptr %58, align 8
  %60 = and i32 %59, 65535
  %61 = icmp eq i32 %60, 68
  br i1 %61, label %62, label %82

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.rtx_def, ptr %53, i64 0, i32 1
  %64 = load i64, ptr %63, align 8, !tbaa !16
  %65 = add nsw i64 %64, 1
  %66 = tail call i32 @exact_log2(i64 noundef %65) #25
  %67 = icmp sgt i32 %66, -1
  %68 = load ptr, ptr %51, align 8, !tbaa !16
  br i1 %67, label %71, label %69

69:                                               ; preds = %62
  %70 = load i32, ptr %68, align 8
  br label %82

71:                                               ; preds = %62
  %72 = getelementptr inbounds %struct.rtx_def, ptr %68, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !16
  %74 = tail call fastcc ptr @make_compound_operation(ptr noundef %73, i32 noundef %27)
  %75 = load ptr, ptr %51, align 8, !tbaa !16
  %76 = getelementptr inbounds %struct.rtx_def, ptr %75, i64 0, i32 1, i32 0, i32 0, i64 1
  %77 = load ptr, ptr %76, align 8, !tbaa !16
  %78 = zext i32 %66 to i64
  %79 = icmp eq i32 %1, 48
  %80 = zext i1 %79 to i32
  %81 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %74, i64 noundef 0, ptr noundef %77, i64 noundef %78, i32 noundef 1, i32 noundef 0, i32 noundef %80)
  br label %429

82:                                               ; preds = %69, %57
  %83 = phi i32 [ %70, %69 ], [ %59, %57 ]
  %84 = phi ptr [ %68, %69 ], [ %58, %57 ]
  %85 = and i32 %83, 65535
  %86 = icmp eq i32 %85, 39
  br i1 %86, label %87, label %123

87:                                               ; preds = %82
  %88 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %84) #25
  %89 = icmp eq i32 %88, 0
  %90 = load ptr, ptr %51, align 8, !tbaa !16
  br i1 %89, label %123, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.rtx_def, ptr %90, i64 0, i32 1
  %93 = load ptr, ptr %92, align 8, !tbaa !16
  %94 = load i32, ptr %93, align 8
  %95 = and i32 %94, 65535
  %96 = icmp eq i32 %95, 68
  br i1 %96, label %97, label %123

97:                                               ; preds = %91
  %98 = load ptr, ptr %52, align 8, !tbaa !16
  %99 = getelementptr inbounds %struct.rtx_def, ptr %98, i64 0, i32 1
  %100 = load i64, ptr %99, align 8, !tbaa !16
  %101 = add nsw i64 %100, 1
  %102 = tail call i32 @exact_log2(i64 noundef %101) #25
  %103 = icmp sgt i32 %102, -1
  %104 = load ptr, ptr %51, align 8, !tbaa !16
  br i1 %103, label %105, label %123

105:                                              ; preds = %97
  %106 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1
  %107 = load ptr, ptr %106, align 8, !tbaa !16
  %108 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 0, i32 1
  %109 = load ptr, ptr %108, align 8, !tbaa !16
  %110 = tail call fastcc ptr @make_compound_operation(ptr noundef %109, i32 noundef %27)
  %111 = load ptr, ptr %51, align 8, !tbaa !16
  %112 = getelementptr inbounds %struct.rtx_def, ptr %111, i64 0, i32 1
  %113 = load ptr, ptr %112, align 8, !tbaa !16
  %114 = load i32, ptr %113, align 8
  %115 = lshr i32 %114, 16
  %116 = and i32 %115, 255
  %117 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1, i32 0, i32 0, i64 1
  %118 = load ptr, ptr %117, align 8, !tbaa !16
  %119 = zext i32 %102 to i64
  %120 = icmp eq i32 %1, 48
  %121 = zext i1 %120 to i32
  %122 = tail call fastcc ptr @make_extraction(i32 noundef %116, ptr noundef %110, i64 noundef 0, ptr noundef %118, i64 noundef %119, i32 noundef 1, i32 noundef 0, i32 noundef %121)
  br label %429

123:                                              ; preds = %97, %91, %87, %82
  %124 = phi ptr [ %104, %97 ], [ %90, %91 ], [ %90, %87 ], [ %84, %82 ]
  %125 = load i32, ptr %124, align 8
  %126 = and i32 %125, 65534
  %127 = icmp eq i32 %126, 62
  br i1 %127, label %128, label %162

128:                                              ; preds = %123
  %129 = getelementptr inbounds %struct.rtx_def, ptr %124, i64 0, i32 1
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  %131 = load i32, ptr %130, align 8
  %132 = and i32 %131, 65535
  %133 = icmp eq i32 %132, 68
  br i1 %133, label %134, label %162

134:                                              ; preds = %128
  %135 = getelementptr inbounds %struct.rtx_def, ptr %124, i64 0, i32 1, i32 0, i32 0, i64 1
  %136 = load ptr, ptr %135, align 8, !tbaa !16
  %137 = load i32, ptr %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 68
  br i1 %139, label %140, label %162

140:                                              ; preds = %134
  %141 = load ptr, ptr %52, align 8, !tbaa !16
  %142 = getelementptr inbounds %struct.rtx_def, ptr %141, i64 0, i32 1
  %143 = load i64, ptr %142, align 8, !tbaa !16
  %144 = add nsw i64 %143, 1
  %145 = tail call i32 @exact_log2(i64 noundef %144) #25
  %146 = icmp sgt i32 %145, -1
  %147 = load ptr, ptr %51, align 8, !tbaa !16
  %148 = load i32, ptr %147, align 8
  br i1 %146, label %149, label %162

149:                                              ; preds = %140
  %150 = and i32 %148, 65535
  %151 = getelementptr inbounds %struct.rtx_def, ptr %147, i64 0, i32 1
  %152 = load ptr, ptr %151, align 8, !tbaa !16
  %153 = load ptr, ptr %52, align 8, !tbaa !16
  %154 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %6, ptr noundef %152, ptr noundef %153) #25
  %155 = load ptr, ptr %51, align 8, !tbaa !16
  %156 = getelementptr inbounds %struct.rtx_def, ptr %155, i64 0, i32 1, i32 0, i32 0, i64 1
  %157 = load ptr, ptr %156, align 8, !tbaa !16
  %158 = load ptr, ptr %52, align 8, !tbaa !16
  %159 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %6, ptr noundef %157, ptr noundef %158) #25
  %160 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %150, i32 noundef %6, ptr noundef %154, ptr noundef %159) #25
  %161 = tail call fastcc ptr @make_compound_operation(ptr noundef %160, i32 noundef %1)
  br label %429

162:                                              ; preds = %140, %123, %134, %128
  %163 = phi i32 [ %125, %123 ], [ %125, %134 ], [ %125, %128 ], [ %148, %140 ]
  %164 = phi ptr [ %124, %123 ], [ %124, %134 ], [ %124, %128 ], [ %147, %140 ]
  %165 = and i32 %163, 65535
  %166 = icmp eq i32 %165, 66
  br i1 %166, label %167, label %204

167:                                              ; preds = %162
  %168 = getelementptr inbounds %struct.rtx_def, ptr %164, i64 0, i32 1, i32 0, i32 0, i64 1
  %169 = load ptr, ptr %168, align 8, !tbaa !16
  %170 = load i32, ptr %169, align 8
  %171 = and i32 %170, 65535
  %172 = icmp eq i32 %171, 30
  br i1 %172, label %173, label %204

173:                                              ; preds = %167
  %174 = load ptr, ptr %52, align 8, !tbaa !16
  %175 = getelementptr inbounds %struct.rtx_def, ptr %174, i64 0, i32 1
  %176 = load i64, ptr %175, align 8, !tbaa !16
  %177 = add nsw i64 %176, 1
  %178 = tail call i32 @exact_log2(i64 noundef %177) #25
  %179 = icmp sgt i32 %178, -1
  %180 = load ptr, ptr %51, align 8, !tbaa !16
  br i1 %179, label %181, label %204

181:                                              ; preds = %173
  %182 = zext i32 %178 to i64
  %183 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1, i32 0, i32 0, i64 1
  %184 = load ptr, ptr %183, align 8, !tbaa !16
  %185 = getelementptr inbounds %struct.rtx_def, ptr %184, i64 0, i32 1
  %186 = load i64, ptr %185, align 8, !tbaa !16
  %187 = icmp slt i64 %186, %182
  br i1 %187, label %204, label %188

188:                                              ; preds = %181
  %189 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1
  %190 = load ptr, ptr %189, align 8, !tbaa !16
  %191 = tail call fastcc ptr @make_compound_operation(ptr noundef %190, i32 noundef %27)
  %192 = load i8, ptr %8, align 1, !tbaa !16
  %193 = zext i8 %192 to i64
  %194 = shl nuw nsw i64 %193, 3
  %195 = load ptr, ptr %51, align 8, !tbaa !16
  %196 = getelementptr inbounds %struct.rtx_def, ptr %195, i64 0, i32 1, i32 0, i32 0, i64 1
  %197 = load ptr, ptr %196, align 8, !tbaa !16
  %198 = getelementptr inbounds %struct.rtx_def, ptr %197, i64 0, i32 1
  %199 = load i64, ptr %198, align 8, !tbaa !16
  %200 = sub nsw i64 %194, %199
  %201 = icmp eq i32 %1, 48
  %202 = zext i1 %201 to i32
  %203 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %191, i64 noundef %200, ptr noundef null, i64 noundef %182, i32 noundef 1, i32 noundef 0, i32 noundef %202)
  br label %429

204:                                              ; preds = %181, %173, %167, %162
  %205 = phi ptr [ %180, %181 ], [ %180, %173 ], [ %164, %167 ], [ %164, %162 ]
  %206 = load i32, ptr %205, align 8
  %207 = and i32 %206, 65535
  %208 = icmp eq i32 %207, 68
  br i1 %208, label %209, label %248

209:                                              ; preds = %204
  %210 = tail call i32 @have_insn_for(i32 noundef 68, i32 noundef %6) #25
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %248

212:                                              ; preds = %209
  %213 = tail call i32 @have_insn_for(i32 noundef 67, i32 noundef %6) #25
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %248, label %215

215:                                              ; preds = %212
  %216 = load ptr, ptr %51, align 8, !tbaa !16
  %217 = getelementptr inbounds %struct.rtx_def, ptr %216, i64 0, i32 1
  %218 = getelementptr inbounds %struct.rtx_def, ptr %216, i64 0, i32 1, i32 0, i32 0, i64 1
  %219 = load ptr, ptr %218, align 8, !tbaa !16
  %220 = load i32, ptr %219, align 8
  %221 = and i32 %220, 65535
  %222 = icmp eq i32 %221, 30
  br i1 %222, label %223, label %248

223:                                              ; preds = %215
  %224 = getelementptr inbounds %struct.rtx_def, ptr %219, i64 0, i32 1
  %225 = load i64, ptr %224, align 8, !tbaa !16
  %226 = icmp sgt i64 %225, -1
  br i1 %226, label %227, label %248

227:                                              ; preds = %223
  %228 = icmp ult i64 %225, 64
  %229 = icmp ult i8 %9, 9
  %230 = select i1 %228, i1 %229, i1 false
  br i1 %230, label %231, label %248

231:                                              ; preds = %227
  %232 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %7
  %233 = load i64, ptr %232, align 8, !tbaa !83
  %234 = lshr i64 %233, %225
  %235 = load ptr, ptr %52, align 8, !tbaa !16
  %236 = getelementptr inbounds %struct.rtx_def, ptr %235, i64 0, i32 1
  %237 = load i64, ptr %236, align 8, !tbaa !16
  %238 = xor i64 %234, -1
  %239 = and i64 %237, %238
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %437

241:                                              ; preds = %231
  %242 = load ptr, ptr %217, align 8, !tbaa !16
  %243 = tail call fastcc ptr @make_compound_operation(ptr noundef %242, i32 noundef %27)
  %244 = load ptr, ptr %51, align 8, !tbaa !16
  %245 = getelementptr inbounds %struct.rtx_def, ptr %244, i64 0, i32 1, i32 0, i32 0, i64 1
  %246 = load ptr, ptr %245, align 8, !tbaa !16
  %247 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 67, i32 noundef %6, ptr noundef %243, ptr noundef %246) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %51, ptr noundef %247)
  br label %437

248:                                              ; preds = %227, %223, %215, %212, %209, %204
  %249 = load ptr, ptr %52, align 8, !tbaa !16
  %250 = getelementptr inbounds %struct.rtx_def, ptr %249, i64 0, i32 1
  %251 = load i64, ptr %250, align 8, !tbaa !16
  %252 = add nsw i64 %251, 1
  %253 = tail call i32 @exact_log2(i64 noundef %252) #25
  %254 = icmp sgt i32 %253, -1
  br i1 %254, label %255, label %262

255:                                              ; preds = %248
  %256 = load ptr, ptr %51, align 8, !tbaa !16
  %257 = tail call fastcc ptr @make_compound_operation(ptr noundef %256, i32 noundef %27)
  %258 = zext i32 %253 to i64
  %259 = icmp eq i32 %1, 48
  %260 = zext i1 %259 to i32
  %261 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %257, i64 noundef 0, ptr noundef null, i64 noundef %258, i32 noundef 1, i32 noundef 0, i32 noundef %260)
  br label %429

262:                                              ; preds = %248
  %263 = icmp eq i32 %1, 48
  br i1 %263, label %264, label %437

264:                                              ; preds = %262
  %265 = load ptr, ptr %52, align 8, !tbaa !16
  %266 = getelementptr inbounds %struct.rtx_def, ptr %265, i64 0, i32 1
  %267 = load i64, ptr %266, align 8, !tbaa !16
  %268 = tail call i32 @exact_log2(i64 noundef %267) #25
  %269 = icmp sgt i32 %268, -1
  br i1 %269, label %270, label %437

270:                                              ; preds = %264
  %271 = load ptr, ptr %51, align 8, !tbaa !16
  %272 = tail call fastcc ptr @make_compound_operation(ptr noundef %271, i32 noundef %27)
  %273 = zext i32 %268 to i64
  %274 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %272, i64 noundef %273, ptr noundef null, i64 noundef 1, i32 noundef 1, i32 noundef 0, i32 noundef 1)
  br label %429

275:                                              ; preds = %26
  %276 = tail call i32 @have_insn_for(i32 noundef 67, i32 noundef %6) #25
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %298, label %278

278:                                              ; preds = %275
  %279 = tail call i32 @have_insn_for(i32 noundef 68, i32 noundef %6) #25
  %280 = icmp eq i32 %279, 0
  %281 = icmp ult i8 %9, 9
  %282 = select i1 %280, i1 %281, i1 false
  br i1 %282, label %283, label %298

283:                                              ; preds = %278
  %284 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %285 = load ptr, ptr %284, align 8, !tbaa !16
  %286 = tail call i64 @nonzero_bits(ptr noundef %285, i32 noundef %6) #25
  %287 = add nsw i32 %11, -1
  %288 = shl nuw i32 1, %287
  %289 = sext i32 %288 to i64
  %290 = and i64 %286, %289
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %298

292:                                              ; preds = %283
  %293 = load ptr, ptr %284, align 8, !tbaa !16
  %294 = tail call fastcc ptr @make_compound_operation(ptr noundef %293, i32 noundef %27)
  %295 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %296 = load ptr, ptr %295, align 8, !tbaa !16
  %297 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 67, i32 noundef %6, ptr noundef %294, ptr noundef %296) #25
  br label %429

298:                                              ; preds = %275, %278, %283, %26
  %299 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %300 = load ptr, ptr %299, align 8, !tbaa !16
  %301 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %302 = load ptr, ptr %301, align 8, !tbaa !16
  %303 = load i32, ptr %302, align 8
  %304 = and i32 %303, 65535
  %305 = icmp ne i32 %304, 30
  %306 = load i32, ptr %300, align 8
  %307 = and i32 %306, 65535
  %308 = icmp ne i32 %307, 65
  %309 = select i1 %305, i1 true, i1 %308
  br i1 %309, label %340, label %310

310:                                              ; preds = %298
  %311 = getelementptr inbounds %struct.rtx_def, ptr %300, i64 0, i32 1
  %312 = getelementptr inbounds %struct.rtx_def, ptr %300, i64 0, i32 1, i32 0, i32 0, i64 1
  %313 = load ptr, ptr %312, align 8, !tbaa !16
  %314 = load i32, ptr %313, align 8
  %315 = and i32 %314, 65535
  %316 = icmp eq i32 %315, 30
  br i1 %316, label %317, label %340

317:                                              ; preds = %310
  %318 = getelementptr inbounds %struct.rtx_def, ptr %302, i64 0, i32 1
  %319 = load i64, ptr %318, align 8, !tbaa !16
  %320 = getelementptr inbounds %struct.rtx_def, ptr %313, i64 0, i32 1
  %321 = load i64, ptr %320, align 8, !tbaa !16
  %322 = icmp slt i64 %319, %321
  br i1 %322, label %340, label %323

323:                                              ; preds = %317
  %324 = zext i32 %11 to i64
  %325 = icmp slt i64 %319, %324
  br i1 %325, label %326, label %340

326:                                              ; preds = %323
  %327 = load ptr, ptr %311, align 8, !tbaa !16
  %328 = tail call fastcc ptr @make_compound_operation(ptr noundef %327, i32 noundef %27)
  %329 = load i64, ptr %318, align 8, !tbaa !16
  %330 = load ptr, ptr %312, align 8, !tbaa !16
  %331 = getelementptr inbounds %struct.rtx_def, ptr %330, i64 0, i32 1
  %332 = load i64, ptr %331, align 8, !tbaa !16
  %333 = sub nsw i64 %329, %332
  %334 = sub nsw i64 %324, %329
  %335 = icmp eq i32 %4, 68
  %336 = zext i1 %335 to i32
  %337 = icmp eq i32 %1, 48
  %338 = zext i1 %337 to i32
  %339 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %328, i64 noundef %333, ptr noundef null, i64 noundef %334, i32 noundef %336, i32 noundef 0, i32 noundef %338)
  br label %429

340:                                              ; preds = %298, %323, %317, %310
  %341 = phi i32 [ 65, %323 ], [ 65, %317 ], [ 65, %310 ], [ %307, %298 ]
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %342
  %344 = load i32, ptr %343, align 4, !tbaa !16
  %345 = and i32 %344, -2
  %346 = icmp eq i32 %345, 8
  br i1 %346, label %437, label %347

347:                                              ; preds = %340
  %348 = icmp eq i32 %341, 39
  br i1 %348, label %349, label %360

349:                                              ; preds = %347
  %350 = getelementptr inbounds %struct.rtx_def, ptr %300, i64 0, i32 1
  %351 = load ptr, ptr %350, align 8, !tbaa !16
  %352 = load i32, ptr %351, align 8
  %353 = and i32 %352, 65535
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %354
  %356 = load i32, ptr %355, align 4, !tbaa !16
  %357 = and i32 %356, -2
  %358 = icmp eq i32 %357, 8
  %359 = or i1 %305, %358
  br i1 %359, label %437, label %361

360:                                              ; preds = %347
  br i1 %305, label %437, label %361

361:                                              ; preds = %349, %360
  %362 = getelementptr inbounds %struct.rtx_def, ptr %302, i64 0, i32 1
  %363 = load i64, ptr %362, align 8, !tbaa !16
  %364 = icmp slt i64 %363, 64
  br i1 %364, label %365, label %437

365:                                              ; preds = %361
  %366 = zext i32 %11 to i64
  %367 = icmp slt i64 %363, %366
  br i1 %367, label %368, label %437

368:                                              ; preds = %365
  %369 = trunc i64 %363 to i32
  %370 = tail call fastcc ptr @extract_left_shift(ptr noundef nonnull %300, i32 noundef %369)
  %371 = icmp eq ptr %370, null
  br i1 %371, label %437, label %372

372:                                              ; preds = %368
  %373 = tail call fastcc ptr @make_compound_operation(ptr noundef nonnull %370, i32 noundef %27)
  %374 = load i64, ptr %362, align 8, !tbaa !16
  %375 = sub nsw i64 %366, %374
  %376 = icmp eq i32 %4, 68
  %377 = zext i1 %376 to i32
  %378 = icmp eq i32 %1, 48
  %379 = zext i1 %378 to i32
  %380 = tail call fastcc ptr @make_extraction(i32 noundef %6, ptr noundef %373, i64 noundef 0, ptr noundef null, i64 noundef %375, i32 noundef %377, i32 noundef 0, i32 noundef %379)
  br label %429

381:                                              ; preds = %26
  %382 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %383 = load ptr, ptr %382, align 8, !tbaa !16
  %384 = tail call fastcc ptr @make_compound_operation(ptr noundef %383, i32 noundef %1)
  %385 = load ptr, ptr %382, align 8, !tbaa !16
  %386 = load i32, ptr %385, align 8
  %387 = lshr i32 %386, 16
  %388 = and i32 %387, 255
  %389 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %390 = load i32, ptr %389, align 8, !tbaa !16
  %391 = tail call ptr @simplify_subreg(i32 noundef %6, ptr noundef %384, i32 noundef %388, i32 noundef %390) #25
  %392 = icmp eq ptr %391, null
  %393 = select i1 %392, ptr %384, ptr %391
  %394 = load i32, ptr %393, align 8
  %395 = load ptr, ptr %382, align 8, !tbaa !16
  %396 = load i32, ptr %395, align 8
  %397 = xor i32 %396, %394
  %398 = and i32 %397, 65535
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %428, label %400

400:                                              ; preds = %381
  %401 = load i8, ptr %8, align 1, !tbaa !16
  %402 = lshr i32 %396, 16
  %403 = and i32 %402, 255
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %404
  %406 = load i8, ptr %405, align 1, !tbaa !16
  %407 = icmp ult i8 %401, %406
  br i1 %407, label %408, label %428

408:                                              ; preds = %400
  %409 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %0) #25
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %428, label %411

411:                                              ; preds = %408
  %412 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %393, i32 noundef %6, i64 noundef -1, i32 noundef 0)
  %413 = load i32, ptr %412, align 8
  %414 = and i32 %413, 65535
  %415 = icmp eq i32 %414, 39
  br i1 %415, label %418, label %416

416:                                              ; preds = %411
  %417 = tail call fastcc ptr @make_compound_operation(ptr noundef nonnull %412, i32 noundef %1)
  br label %418

418:                                              ; preds = %416, %411
  %419 = phi ptr [ %417, %416 ], [ %412, %411 ]
  %420 = tail call i32 @rtx_equal_p(ptr noundef %419, ptr noundef nonnull %0) #25
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %553, label %422

422:                                              ; preds = %418
  %423 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %424 = load i32, ptr %0, align 8
  %425 = lshr i32 %424, 16
  %426 = and i32 %425, 255
  %427 = tail call ptr %423(i32 noundef %426, ptr noundef nonnull %393) #25
  br label %553

428:                                              ; preds = %381, %400, %408
  br i1 %392, label %437, label %553

429:                                              ; preds = %372, %71, %149, %270, %255, %188, %105, %41, %326, %292
  %430 = phi ptr [ %339, %326 ], [ %380, %372 ], [ %297, %292 ], [ %81, %71 ], [ %122, %105 ], [ %161, %149 ], [ %203, %188 ], [ %261, %255 ], [ %274, %270 ], [ %49, %41 ]
  %431 = icmp eq ptr %430, null
  br i1 %431, label %437, label %432

432:                                              ; preds = %429
  %433 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %434 = tail call ptr %433(i32 noundef %6, ptr noundef nonnull %430) #25
  %435 = load i32, ptr %434, align 8
  %436 = and i32 %435, 65535
  br label %437

437:                                              ; preds = %349, %231, %241, %28, %30, %37, %50, %262, %264, %360, %361, %365, %368, %340, %428, %26, %432, %429
  %438 = phi i32 [ %436, %432 ], [ %4, %429 ], [ %4, %26 ], [ %4, %428 ], [ %4, %340 ], [ %4, %349 ], [ %4, %368 ], [ %4, %365 ], [ %4, %361 ], [ %4, %360 ], [ %4, %264 ], [ %4, %262 ], [ %4, %50 ], [ %4, %37 ], [ %4, %30 ], [ %4, %28 ], [ %4, %241 ], [ %4, %231 ]
  %439 = phi ptr [ %434, %432 ], [ %0, %429 ], [ %0, %26 ], [ %0, %428 ], [ %0, %340 ], [ %0, %349 ], [ %0, %368 ], [ %0, %365 ], [ %0, %361 ], [ %0, %360 ], [ %0, %264 ], [ %0, %262 ], [ %0, %50 ], [ %0, %37 ], [ %0, %30 ], [ %0, %28 ], [ %0, %241 ], [ %0, %231 ]
  %440 = zext i32 %438 to i64
  %441 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %440
  %442 = load ptr, ptr %441, align 8, !tbaa !5
  %443 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %440
  %444 = load i8, ptr %443, align 1, !tbaa !16
  %445 = icmp eq i8 %444, 0
  br i1 %445, label %536, label %446

446:                                              ; preds = %437
  %447 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1
  %448 = zext i8 %444 to i64
  br label %449

449:                                              ; preds = %446, %533
  %450 = phi i64 [ 0, %446 ], [ %534, %533 ]
  %451 = getelementptr inbounds i8, ptr %442, i64 %450
  %452 = load i8, ptr %451, align 1, !tbaa !16
  switch i8 %452, label %533 [
    i8 101, label %458
    i8 69, label %453
  ]

453:                                              ; preds = %449
  %454 = getelementptr inbounds [1 x %union.rtunion_def], ptr %447, i64 0, i64 %450
  %455 = load ptr, ptr %454, align 8, !tbaa !16
  %456 = load i32, ptr %455, align 8, !tbaa !99
  %457 = icmp sgt i32 %456, 0
  br i1 %457, label %462, label %533

458:                                              ; preds = %449
  %459 = getelementptr inbounds [1 x %union.rtunion_def], ptr %447, i64 0, i64 %450
  %460 = load ptr, ptr %459, align 8, !tbaa !16
  %461 = tail call fastcc ptr @make_compound_operation(ptr noundef %460, i32 noundef %27)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %459, ptr noundef %461)
  br label %533

462:                                              ; preds = %453, %527
  %463 = phi i64 [ %529, %527 ], [ 0, %453 ]
  %464 = phi ptr [ %528, %527 ], [ %455, %453 ]
  %465 = getelementptr inbounds %struct.rtvec_def, ptr %464, i64 0, i32 1, i64 %463
  %466 = load ptr, ptr %465, align 8, !tbaa !5
  %467 = tail call fastcc ptr @make_compound_operation(ptr noundef %466, i32 noundef %27)
  %468 = load ptr, ptr %454, align 8, !tbaa !16
  %469 = getelementptr inbounds %struct.rtvec_def, ptr %468, i64 0, i32 1, i64 %463
  %470 = load ptr, ptr %469, align 8, !tbaa !5
  %471 = icmp eq ptr %470, %467
  br i1 %471, label %527, label %472

472:                                              ; preds = %462
  %473 = load i32, ptr %470, align 8
  %474 = lshr i32 %473, 16
  %475 = and i32 %474, 255
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %476
  %478 = load i8, ptr %477, align 1, !tbaa !16
  %479 = icmp eq i8 %478, 2
  br i1 %479, label %480, label %513

480:                                              ; preds = %472
  %481 = load i32, ptr %467, align 8
  %482 = and i32 %481, 65535
  %483 = icmp eq i32 %482, 30
  br i1 %483, label %484, label %513

484:                                              ; preds = %480
  %485 = getelementptr inbounds %struct.rtx_def, ptr %467, i64 0, i32 1
  %486 = load i64, ptr %485, align 8, !tbaa !16
  %487 = tail call i64 @trunc_int_for_mode(i64 noundef %486, i32 noundef %475) #25
  %488 = icmp eq i64 %486, %487
  br i1 %488, label %490, label %489

489:                                              ; preds = %484
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 681, ptr noundef nonnull @.str.5) #25
  br label %490

490:                                              ; preds = %489, %484
  %491 = load i32, ptr %470, align 8
  %492 = and i32 %491, 65535
  %493 = icmp eq i32 %492, 39
  br i1 %493, label %494, label %502

494:                                              ; preds = %490
  %495 = getelementptr inbounds %struct.rtx_def, ptr %470, i64 0, i32 1
  %496 = load ptr, ptr %495, align 8, !tbaa !16
  %497 = load i32, ptr %496, align 8
  %498 = and i32 %497, 65535
  %499 = icmp eq i32 %498, 30
  br i1 %499, label %500, label %502

500:                                              ; preds = %494
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 690, ptr noundef nonnull @.str.5) #25
  %501 = load i32, ptr %470, align 8
  br label %502

502:                                              ; preds = %500, %494, %490
  %503 = phi i32 [ %491, %490 ], [ %491, %494 ], [ %501, %500 ]
  %504 = and i32 %503, 65535
  %505 = icmp eq i32 %504, 99
  br i1 %505, label %506, label %513

506:                                              ; preds = %502
  %507 = getelementptr inbounds %struct.rtx_def, ptr %470, i64 0, i32 1
  %508 = load ptr, ptr %507, align 8, !tbaa !16
  %509 = load i32, ptr %508, align 8
  %510 = and i32 %509, 65535
  %511 = icmp eq i32 %510, 30
  br i1 %511, label %512, label %513

512:                                              ; preds = %506
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 692, ptr noundef nonnull @.str.5) #25
  br label %513

513:                                              ; preds = %512, %506, %502, %480, %472
  %514 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  %515 = icmp eq ptr %514, null
  br i1 %515, label %518, label %516

516:                                              ; preds = %513
  %517 = load ptr, ptr %514, align 8, !tbaa !72
  store ptr %517, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 1), align 8, !tbaa !70
  br label %520

518:                                              ; preds = %513
  %519 = tail call ptr @xmalloc(i64 noundef 32) #25
  br label %520

520:                                              ; preds = %518, %516
  %521 = phi ptr [ %514, %516 ], [ %519, %518 ]
  %522 = getelementptr inbounds %struct.undo, ptr %521, i64 0, i32 1
  store i32 0, ptr %522, align 8, !tbaa !125
  %523 = getelementptr inbounds %struct.undo, ptr %521, i64 0, i32 3
  store ptr %469, ptr %523, align 8, !tbaa !16
  %524 = getelementptr inbounds %struct.undo, ptr %521, i64 0, i32 2
  store ptr %470, ptr %524, align 8, !tbaa !16
  store ptr %467, ptr %469, align 8, !tbaa !5
  %525 = load ptr, ptr @undobuf, align 8, !tbaa !117
  store ptr %525, ptr %521, align 8, !tbaa !72
  store ptr %521, ptr @undobuf, align 8, !tbaa !117
  %526 = load ptr, ptr %454, align 8, !tbaa !16
  br label %527

527:                                              ; preds = %462, %520
  %528 = phi ptr [ %468, %462 ], [ %526, %520 ]
  %529 = add nuw nsw i64 %463, 1
  %530 = load i32, ptr %528, align 8, !tbaa !99
  %531 = sext i32 %530 to i64
  %532 = icmp slt i64 %529, %531
  br i1 %532, label %462, label %533, !llvm.loop !208

533:                                              ; preds = %527, %453, %449, %458
  %534 = add nuw nsw i64 %450, 1
  %535 = icmp eq i64 %534, %448
  br i1 %535, label %536, label %449, !llvm.loop !209

536:                                              ; preds = %533, %437
  %537 = load i32, ptr %439, align 8
  %538 = and i32 %537, 65535
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %539
  %541 = load i32, ptr %540, align 4, !tbaa !16
  %542 = icmp eq i32 %541, 3
  br i1 %542, label %543, label %553

543:                                              ; preds = %536
  %544 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1
  %545 = load ptr, ptr %544, align 8, !tbaa !16
  %546 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1, i32 0, i32 0, i64 1
  %547 = load ptr, ptr %546, align 8, !tbaa !16
  %548 = tail call zeroext i8 @swap_commutative_operands_p(ptr noundef %545, ptr noundef %547) #25
  %549 = icmp eq i8 %548, 0
  br i1 %549, label %553, label %550

550:                                              ; preds = %543
  %551 = load ptr, ptr %544, align 8, !tbaa !16
  %552 = load ptr, ptr %546, align 8, !tbaa !16
  tail call fastcc void @do_SUBST(ptr noundef nonnull %544, ptr noundef %552)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %546, ptr noundef %551)
  br label %553

553:                                              ; preds = %422, %418, %536, %543, %550, %428
  %554 = phi ptr [ %391, %428 ], [ %439, %550 ], [ %439, %543 ], [ %439, %536 ], [ %419, %418 ], [ %427, %422 ]
  ret ptr %554
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @expand_compound_operation(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %314 [
    i16 99, label %4
    i16 98, label %5
    i16 120, label %28
    i16 119, label %29
  ]

4:                                                ; preds = %1
  br label %5

5:                                                ; preds = %1, %4
  %6 = phi i32 [ 0, %1 ], [ 1, %4 ]
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load i32, ptr %8, align 8
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, 30
  br i1 %11, label %314, label %12

12:                                               ; preds = %5
  %13 = lshr i32 %9, 16
  %14 = and i32 %13, 255
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %15
  %17 = load i8, ptr %16, align 1, !tbaa !16
  %18 = icmp ugt i8 %17, 4
  br i1 %18, label %314, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %15
  %21 = load i8, ptr %20, align 1, !tbaa !16
  %22 = and i8 %21, -2
  %23 = icmp ne i8 %22, 2
  %24 = zext i8 %17 to i64
  %25 = shl nuw nsw i64 %24, 3
  %26 = icmp eq i8 %17, 0
  %27 = or i1 %26, %23
  br i1 %27, label %314, label %69

28:                                               ; preds = %1
  br label %29

29:                                               ; preds = %1, %28
  %30 = phi i32 [ 0, %1 ], [ 1, %28 ]
  %31 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = load i32, ptr %32, align 8
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 25
  br i1 %35, label %314, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = load i32, ptr %38, align 8
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 30
  br i1 %41, label %42, label %314

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %44 = load ptr, ptr %43, align 8, !tbaa !16
  %45 = load i32, ptr %44, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 30
  br i1 %47, label %48, label %314

48:                                               ; preds = %42
  %49 = lshr i32 %33, 16
  %50 = and i32 %49, 255
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %314, label %52

52:                                               ; preds = %48
  %53 = zext i32 %50 to i64
  %54 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %53
  %55 = load i8, ptr %54, align 1, !tbaa !16
  %56 = and i8 %55, -2
  %57 = icmp eq i8 %56, 2
  br i1 %57, label %58, label %314

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.rtx_def, ptr %38, i64 0, i32 1
  %60 = load i64, ptr %59, align 8, !tbaa !16
  %61 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1
  %62 = load i64, ptr %61, align 8, !tbaa !16
  %63 = add i64 %62, %60
  %64 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %53
  %65 = load i8, ptr %64, align 1, !tbaa !16
  %66 = zext i8 %65 to i64
  %67 = shl nuw nsw i64 %66, 3
  %68 = icmp ugt i64 %63, %67
  br i1 %68, label %314, label %69

69:                                               ; preds = %19, %58
  %70 = phi i32 [ %33, %58 ], [ %9, %19 ]
  %71 = phi ptr [ %32, %58 ], [ %8, %19 ]
  %72 = phi i32 [ %30, %58 ], [ %6, %19 ]
  %73 = phi i64 [ %60, %58 ], [ %25, %19 ]
  %74 = phi i64 [ %62, %58 ], [ 0, %19 ]
  %75 = and i32 %2, 65535
  %76 = icmp eq i32 %75, 98
  br i1 %76, label %77, label %118

77:                                               ; preds = %69
  %78 = lshr i32 %2, 16
  %79 = and i32 %78, 255
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !16
  %83 = icmp ult i8 %82, 9
  br i1 %83, label %84, label %118

84:                                               ; preds = %77
  %85 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %86 = lshr i32 %70, 16
  %87 = and i32 %86, 255
  %88 = tail call i64 @nonzero_bits(ptr noundef nonnull %71, i32 noundef %87) #25
  %89 = load ptr, ptr %85, align 8, !tbaa !16
  %90 = load i32, ptr %89, align 8
  %91 = lshr i32 %90, 16
  %92 = and i32 %91, 255
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %93
  %95 = load i64, ptr %94, align 8, !tbaa !83
  %96 = lshr i64 %95, 1
  %97 = xor i64 %96, -1
  %98 = and i64 %88, %97
  %99 = icmp eq i64 %98, 0
  %100 = load i32, ptr %0, align 8
  br i1 %99, label %101, label %118

101:                                              ; preds = %84
  %102 = lshr i32 %100, 16
  %103 = and i32 %102, 255
  %104 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef %103, ptr noundef nonnull %89) #25
  %105 = tail call fastcc ptr @expand_compound_operation(ptr noundef %104)
  %106 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %107 = tail call i32 @rtx_cost(ptr noundef nonnull %0, i32 noundef 23, i8 noundef zeroext %106) #25
  %108 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %109 = tail call i32 @rtx_cost(ptr noundef %105, i32 noundef 23, i8 noundef zeroext %108) #25
  %110 = icmp sgt i32 %107, %109
  br i1 %110, label %314, label %111

111:                                              ; preds = %101
  %112 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %113 = tail call i32 @rtx_cost(ptr noundef nonnull %0, i32 noundef 23, i8 noundef zeroext %112) #25
  %114 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %115 = tail call i32 @rtx_cost(ptr noundef %104, i32 noundef 23, i8 noundef zeroext %114) #25
  %116 = icmp sgt i32 %113, %115
  %117 = select i1 %116, ptr %104, ptr %0
  br label %314

118:                                              ; preds = %84, %77, %69
  %119 = phi i32 [ %90, %84 ], [ %70, %77 ], [ %70, %69 ]
  %120 = phi ptr [ %89, %84 ], [ %71, %77 ], [ %71, %69 ]
  %121 = phi i32 [ %100, %84 ], [ %2, %77 ], [ %2, %69 ]
  %122 = and i32 %121, 65535
  %123 = icmp eq i32 %122, 99
  br i1 %123, label %124, label %265

124:                                              ; preds = %118
  %125 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %126 = and i32 %119, 65535
  %127 = icmp eq i32 %126, 100
  br i1 %127, label %128, label %157

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.rtx_def, ptr %120, i64 0, i32 1
  %130 = load ptr, ptr %129, align 8, !tbaa !16
  %131 = load i32, ptr %130, align 8
  %132 = lshr i32 %131, 16
  %133 = and i32 %132, 255
  %134 = lshr i32 %121, 16
  %135 = and i32 %134, 255
  %136 = icmp eq i32 %133, %135
  br i1 %136, label %137, label %157

137:                                              ; preds = %128
  %138 = zext i32 %133 to i64
  %139 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %138
  %140 = load i8, ptr %139, align 1, !tbaa !16
  %141 = icmp ult i8 %140, 9
  br i1 %141, label %142, label %157

142:                                              ; preds = %137
  %143 = tail call i64 @nonzero_bits(ptr noundef nonnull %130, i32 noundef %133) #25
  %144 = load ptr, ptr %125, align 8, !tbaa !16
  %145 = load i32, ptr %144, align 8
  %146 = lshr i32 %145, 16
  %147 = and i32 %146, 255
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %148
  %150 = load i64, ptr %149, align 8, !tbaa !83
  %151 = xor i64 %150, -1
  %152 = and i64 %143, %151
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %157

154:                                              ; preds = %142
  %155 = getelementptr inbounds %struct.rtx_def, ptr %144, i64 0, i32 1
  %156 = load ptr, ptr %155, align 8, !tbaa !16
  br label %314

157:                                              ; preds = %142, %137, %128, %124
  %158 = phi i32 [ %145, %142 ], [ %119, %137 ], [ %119, %128 ], [ %119, %124 ]
  %159 = phi ptr [ %144, %142 ], [ %120, %137 ], [ %120, %128 ], [ %120, %124 ]
  %160 = and i32 %158, 65535
  %161 = icmp eq i32 %160, 39
  br i1 %161, label %162, label %201

162:                                              ; preds = %157
  %163 = getelementptr inbounds %struct.rtx_def, ptr %159, i64 0, i32 1
  %164 = load ptr, ptr %163, align 8, !tbaa !16
  %165 = load i32, ptr %164, align 8
  %166 = load i32, ptr %0, align 8
  %167 = xor i32 %166, %165
  %168 = and i32 %167, 16711680
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %201

170:                                              ; preds = %162
  %171 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %159) #25
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %170
  %174 = load ptr, ptr %125, align 8, !tbaa !16
  br label %201

175:                                              ; preds = %170
  %176 = load i32, ptr %0, align 8
  %177 = lshr i32 %176, 16
  %178 = and i32 %177, 255
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %179
  %181 = load i8, ptr %180, align 1, !tbaa !16
  %182 = icmp ult i8 %181, 9
  %183 = load ptr, ptr %125, align 8, !tbaa !16
  br i1 %182, label %184, label %201

184:                                              ; preds = %175
  %185 = getelementptr inbounds %struct.rtx_def, ptr %183, i64 0, i32 1
  %186 = load ptr, ptr %185, align 8, !tbaa !16
  %187 = tail call i64 @nonzero_bits(ptr noundef %186, i32 noundef %178) #25
  %188 = load ptr, ptr %125, align 8, !tbaa !16
  %189 = load i32, ptr %188, align 8
  %190 = lshr i32 %189, 16
  %191 = and i32 %190, 255
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %192
  %194 = load i64, ptr %193, align 8, !tbaa !83
  %195 = xor i64 %194, -1
  %196 = and i64 %187, %195
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %198, label %201

198:                                              ; preds = %184
  %199 = getelementptr inbounds %struct.rtx_def, ptr %188, i64 0, i32 1
  %200 = load ptr, ptr %199, align 8, !tbaa !16
  br label %314

201:                                              ; preds = %173, %184, %175, %162, %157
  %202 = phi ptr [ %174, %173 ], [ %188, %184 ], [ %183, %175 ], [ %159, %162 ], [ %159, %157 ]
  %203 = load i32, ptr %202, align 8
  %204 = trunc i32 %203 to i16
  switch i16 %204, label %265 [
    i16 100, label %205
    i16 39, label %231
  ]

205:                                              ; preds = %201
  %206 = getelementptr inbounds %struct.rtx_def, ptr %202, i64 0, i32 1
  %207 = load ptr, ptr %206, align 8, !tbaa !16
  %208 = load i32, ptr %207, align 8
  %209 = load i32, ptr %0, align 8
  %210 = xor i32 %209, %208
  %211 = and i32 %210, 16711680
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %265

213:                                              ; preds = %205
  %214 = and i32 %208, 65535
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %215
  %217 = load i32, ptr %216, align 4, !tbaa !16
  %218 = icmp ult i32 %217, 2
  br i1 %218, label %219, label %265

219:                                              ; preds = %213
  %220 = lshr i32 %203, 16
  %221 = and i32 %220, 255
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %222
  %224 = load i8, ptr %223, align 1, !tbaa !16
  %225 = icmp ult i8 %224, 9
  br i1 %225, label %226, label %265

226:                                              ; preds = %219
  %227 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %222
  %228 = load i64, ptr %227, align 8, !tbaa !83
  %229 = and i64 %228, 1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %265, label %314

231:                                              ; preds = %201
  %232 = getelementptr inbounds %struct.rtx_def, ptr %202, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !16
  %234 = load i32, ptr %233, align 8
  %235 = load i32, ptr %0, align 8
  %236 = xor i32 %235, %234
  %237 = and i32 %236, 16711680
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %265

239:                                              ; preds = %231
  %240 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %202) #25
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %265, label %242

242:                                              ; preds = %239
  %243 = load ptr, ptr %125, align 8, !tbaa !16
  %244 = getelementptr inbounds %struct.rtx_def, ptr %243, i64 0, i32 1
  %245 = load ptr, ptr %244, align 8, !tbaa !16
  %246 = load i32, ptr %245, align 8
  %247 = and i32 %246, 65535
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %248
  %250 = load i32, ptr %249, align 4, !tbaa !16
  %251 = icmp ult i32 %250, 2
  br i1 %251, label %252, label %265

252:                                              ; preds = %242
  %253 = load i32, ptr %243, align 8
  %254 = lshr i32 %253, 16
  %255 = and i32 %254, 255
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %256
  %258 = load i8, ptr %257, align 1, !tbaa !16
  %259 = icmp ult i8 %258, 9
  br i1 %259, label %260, label %265

260:                                              ; preds = %252
  %261 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %256
  %262 = load i64, ptr %261, align 8, !tbaa !83
  %263 = and i64 %262, 1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %314

265:                                              ; preds = %201, %205, %213, %219, %226, %231, %239, %242, %252, %260, %118
  %266 = load i32, ptr %0, align 8
  %267 = lshr i32 %266, 16
  %268 = and i32 %267, 255
  %269 = zext i32 %268 to i64
  %270 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %269
  %271 = load i8, ptr %270, align 1, !tbaa !16
  %272 = zext i8 %271 to i64
  %273 = shl nuw nsw i64 %272, 3
  %274 = add i64 %273, %73
  %275 = icmp ult i64 %274, %74
  br i1 %275, label %296, label %276

276:                                              ; preds = %265
  %277 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %278 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %279 = load ptr, ptr %278, align 8, !tbaa !16
  %280 = tail call ptr %277(i32 noundef %268, ptr noundef %279) #25
  %281 = icmp eq ptr %280, null
  br i1 %281, label %314, label %282

282:                                              ; preds = %276
  %283 = load i32, ptr %280, align 8
  %284 = and i32 %283, 65535
  %285 = icmp eq i32 %284, 25
  br i1 %285, label %314, label %286

286:                                              ; preds = %282
  %287 = add i64 %74, %73
  %288 = sub i64 %273, %287
  %289 = trunc i64 %288 to i32
  %290 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %268, ptr noundef nonnull %280, i32 noundef %289)
  %291 = icmp eq i32 %72, 0
  %292 = select i1 %291, i32 67, i32 68
  %293 = sub i64 %273, %73
  %294 = trunc i64 %293 to i32
  %295 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef %292, i32 noundef %268, ptr noundef %290, i32 noundef %294)
  br label %308

296:                                              ; preds = %265
  %297 = icmp ne i32 %72, 0
  %298 = icmp ult i64 %73, 64
  %299 = and i1 %297, %298
  br i1 %299, label %300, label %314

300:                                              ; preds = %296
  %301 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %302 = load ptr, ptr %301, align 8, !tbaa !16
  %303 = trunc i64 %74 to i32
  %304 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %268, ptr noundef %302, i32 noundef %303)
  %305 = shl nsw i64 -1, %73
  %306 = xor i64 %305, -1
  %307 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %268, ptr noundef %304, i64 noundef %306)
  br label %308

308:                                              ; preds = %286, %300
  %309 = phi ptr [ %295, %286 ], [ %307, %300 ]
  %310 = load i32, ptr %309, align 8
  %311 = and i32 %310, 65535
  %312 = icmp eq i32 %311, 25
  %313 = select i1 %312, ptr %0, ptr %309
  br label %314

314:                                              ; preds = %276, %282, %52, %19, %308, %296, %260, %226, %101, %111, %1, %58, %36, %42, %48, %29, %12, %5, %198, %154
  %315 = phi ptr [ %156, %154 ], [ %200, %198 ], [ %0, %5 ], [ %0, %12 ], [ %0, %19 ], [ %32, %29 ], [ %0, %48 ], [ %0, %42 ], [ %0, %36 ], [ %0, %52 ], [ %0, %58 ], [ %0, %1 ], [ %105, %101 ], [ %117, %111 ], [ %207, %226 ], [ %245, %260 ], [ %0, %296 ], [ %313, %308 ], [ %0, %282 ], [ %0, %276 ]
  ret ptr %315
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_shift_const(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, i32 noundef %4) unnamed_addr #9 {
  %6 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef %1, i32 noundef %2, ptr noundef %3, i32 noundef %4)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %26

8:                                                ; preds = %5
  %9 = icmp eq ptr %0, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %8
  %11 = load i32, ptr %3, align 8
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  %14 = sext i32 %4 to i64
  %15 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %14) #25
  %16 = tail call ptr @simplify_gen_binary(i32 noundef %1, i32 noundef %13, ptr noundef nonnull %3, ptr noundef %15) #25
  br label %17

17:                                               ; preds = %10, %8
  %18 = phi ptr [ %0, %8 ], [ %16, %10 ]
  %19 = load i32, ptr %18, align 8
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, %2
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %25 = tail call ptr %24(i32 noundef %2, ptr noundef nonnull %18) #25
  br label %26

26:                                               ; preds = %17, %23, %5
  %27 = phi ptr [ %6, %5 ], [ %25, %23 ], [ %18, %17 ]
  ret ptr %27
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @force_to_mode(ptr noundef %0, i32 noundef %1, i64 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5
  %7 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %5
  br label %8

8:                                                ; preds = %131, %4
  %9 = phi ptr [ %0, %4 ], [ %132, %131 ]
  %10 = phi i64 [ %2, %4 ], [ %133, %131 ]
  %11 = phi i32 [ %3, %4 ], [ %134, %131 ]
  %12 = load i32, ptr %9, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %11, 0
  %15 = trunc i32 %12 to i16
  br i1 %14, label %16, label %18

16:                                               ; preds = %8
  switch i16 %15, label %17 [
    i16 64, label %18
    i16 63, label %18
    i16 51, label %18
  ]

17:                                               ; preds = %16
  br label %18

18:                                               ; preds = %8, %16, %16, %16, %17
  %19 = phi i32 [ 1, %16 ], [ 1, %16 ], [ 1, %16 ], [ 0, %17 ], [ 1, %8 ]
  switch i16 %15, label %20 [
    i16 26, label %883
    i16 25, label %883
    i16 17, label %883
  ]

20:                                               ; preds = %18
  %21 = load i8, ptr %6, align 1, !tbaa !16
  %22 = lshr i32 %12, 16
  %23 = and i32 %22, 255
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !16
  %27 = icmp eq i8 %21, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %20
  %29 = tail call i32 @have_insn_for(i32 noundef %13, i32 noundef %1) #25
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load i32, ptr %9, align 8
  %33 = lshr i32 %32, 16
  %34 = and i32 %33, 255
  br label %35

35:                                               ; preds = %20, %31, %28
  %36 = phi i32 [ %1, %28 ], [ %34, %31 ], [ %23, %20 ]
  %37 = add nsw i32 %13, -67
  %38 = icmp ult i32 %37, 2
  br i1 %38, label %39, label %49

39:                                               ; preds = %35
  %40 = load i8, ptr %7, align 1, !tbaa !16
  %41 = load i32, ptr %9, align 8
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %44
  %46 = load i8, ptr %45, align 1, !tbaa !16
  %47 = icmp ult i8 %40, %46
  %48 = select i1 %47, i32 %43, i32 %36
  br label %49

49:                                               ; preds = %39, %35
  %50 = phi i32 [ %36, %35 ], [ %48, %39 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  %53 = zext i32 %50 to i64
  %54 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %53
  %55 = load i64, ptr %54, align 8, !tbaa !83
  %56 = and i64 %55, %10
  br label %57

57:                                               ; preds = %52, %49
  %58 = phi i64 [ %56, %52 ], [ %10, %49 ]
  %59 = icmp sgt i64 %58, -1
  br i1 %59, label %60, label %66

60:                                               ; preds = %57
  %61 = tail call i32 @floor_log2(i64 noundef %58) #25
  %62 = add nsw i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = shl nsw i64 -1, %63
  %65 = xor i64 %64, -1
  br label %66

66:                                               ; preds = %57, %60
  %67 = phi i64 [ %65, %60 ], [ -1, %57 ]
  %68 = tail call i64 @nonzero_bits(ptr noundef nonnull %9, i32 noundef %1) #25
  %69 = and i64 %68, %58
  %70 = icmp eq i64 %69, 0
  %71 = select i1 %14, i1 %70, i1 false
  br i1 %71, label %72, label %77

72:                                               ; preds = %66
  %73 = tail call i32 @side_effects_p(ptr noundef nonnull %9) #25
  %74 = icmp eq i32 %73, 0
  %75 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %76 = select i1 %74, ptr %75, ptr %9
  br label %77

77:                                               ; preds = %72, %66
  %78 = phi ptr [ %9, %66 ], [ %76, %72 ]
  %79 = load i32, ptr %78, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 30
  br i1 %81, label %82, label %93

82:                                               ; preds = %77
  %83 = and i8 %21, -2
  %84 = icmp eq i8 %83, 2
  %85 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %86 = load i64, ptr %85, align 8, !tbaa !16
  %87 = and i64 %86, %58
  br i1 %84, label %88, label %90

88:                                               ; preds = %82
  %89 = tail call ptr @gen_int_mode(i64 noundef %87, i32 noundef %1) #25
  br label %883

90:                                               ; preds = %82
  %91 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %87) #25
  %92 = tail call ptr @gen_lowpart_common(i32 noundef %1, ptr noundef %91) #25
  br label %883

93:                                               ; preds = %77
  %94 = lshr i32 %79, 16
  %95 = and i32 %94, 255
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %96
  %98 = load i8, ptr %97, align 1, !tbaa !16
  %99 = load i8, ptr %7, align 1, !tbaa !16
  %100 = icmp ult i8 %98, %99
  br i1 %100, label %101, label %110

101:                                              ; preds = %93
  %102 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %96
  %103 = load i64, ptr %102, align 8, !tbaa !83
  %104 = xor i64 %58, -1
  %105 = and i64 %103, %104
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %101
  %108 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %109 = tail call ptr %108(i32 noundef %1, ptr noundef nonnull %78) #25
  br label %883

110:                                              ; preds = %101, %93
  %111 = icmp eq i32 %80, 39
  br i1 %111, label %112, label %144

112:                                              ; preds = %110
  %113 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %78) #25
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %144, label %115

115:                                              ; preds = %112
  %116 = load i32, ptr %78, align 8
  %117 = lshr i32 %116, 16
  %118 = and i32 %117, 255
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %119
  %121 = load i8, ptr %120, align 1, !tbaa !16
  %122 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %123 = load ptr, ptr %122, align 8, !tbaa !16
  %124 = load i32, ptr %123, align 8
  %125 = lshr i32 %124, 16
  %126 = and i32 %125, 255
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !16
  %130 = icmp ult i8 %121, %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %115, %135, %165, %297, %313, %320, %370, %623, %735, %770, %809, %863, %160, %657, %667
  %132 = phi ptr [ %167, %165 ], [ %300, %297 ], [ %316, %313 ], [ %323, %320 ], [ %396, %370 ], [ %625, %623 ], [ %737, %735 ], [ %772, %770 ], [ %825, %809 ], [ %864, %863 ], [ %161, %160 ], [ %660, %657 ], [ %679, %667 ], [ %123, %135 ], [ %123, %115 ]
  %133 = phi i64 [ %58, %165 ], [ %274, %297 ], [ %58, %313 ], [ %58, %320 ], [ %58, %370 ], [ %58, %623 ], [ %58, %735 ], [ 1, %770 ], [ %58, %809 ], [ %58, %863 ], [ %58, %160 ], [ %58, %657 ], [ %58, %667 ], [ %58, %135 ], [ %58, %115 ]
  %134 = phi i32 [ %19, %165 ], [ %19, %297 ], [ %19, %313 ], [ %19, %320 ], [ %19, %370 ], [ %19, %623 ], [ %19, %735 ], [ %11, %770 ], [ %19, %809 ], [ %19, %863 ], [ %19, %160 ], [ %19, %657 ], [ %19, %667 ], [ %19, %135 ], [ %19, %115 ]
  br label %8

135:                                              ; preds = %115
  %136 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %119
  %137 = load i64, ptr %136, align 8, !tbaa !83
  %138 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %127
  %139 = load i64, ptr %138, align 8, !tbaa !83
  %140 = xor i64 %139, -1
  %141 = and i64 %137, %140
  %142 = and i64 %141, %58
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %131, label %144

144:                                              ; preds = %135, %112, %110
  %145 = and i8 %21, -2
  %146 = icmp eq i8 %145, 2
  br i1 %146, label %147, label %156

147:                                              ; preds = %144
  %148 = load i32, ptr %78, align 8
  %149 = lshr i32 %148, 16
  %150 = and i32 %149, 255
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %151
  %153 = load i8, ptr %152, align 1, !tbaa !16
  %154 = and i8 %153, -2
  %155 = icmp eq i8 %154, 2
  br i1 %155, label %159, label %156

156:                                              ; preds = %147, %144
  %157 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %158 = tail call ptr %157(i32 noundef %1, ptr noundef nonnull %78) #25
  br label %883

159:                                              ; preds = %147
  switch i16 %15, label %879 [
    i16 47, label %865
    i16 98, label %160
    i16 99, label %160
    i16 120, label %160
    i16 119, label %160
    i16 100, label %165
    i16 61, label %168
    i16 49, label %258
    i16 52, label %397
    i16 50, label %301
    i16 62, label %324
    i16 63, label %324
    i16 65, label %436
    i16 68, label %501
    i16 67, label %612
    i16 66, label %738
    i16 69, label %738
    i16 51, label %768
    i16 64, label %773
    i16 80, label %841
  ]

160:                                              ; preds = %159, %159, %159, %159
  %161 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %78)
  %162 = load i32, ptr %161, align 8
  %163 = and i32 %162, 65535
  %164 = icmp eq i32 %163, %13
  br i1 %164, label %879, label %131

165:                                              ; preds = %159
  %166 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %167 = load ptr, ptr %166, align 8, !tbaa !16
  br label %131

168:                                              ; preds = %159
  %169 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %170 = load ptr, ptr %169, align 8, !tbaa !16
  %171 = load i32, ptr %170, align 8
  %172 = and i32 %171, 65535
  %173 = icmp eq i32 %172, 30
  br i1 %173, label %174, label %397

174:                                              ; preds = %168
  %175 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %176 = load ptr, ptr %175, align 8, !tbaa !16
  %177 = getelementptr inbounds %struct.rtx_def, ptr %170, i64 0, i32 1
  %178 = load i64, ptr %177, align 8, !tbaa !16
  %179 = and i64 %178, %58
  %180 = tail call fastcc ptr @simplify_and_const_int(ptr noundef nonnull %78, i32 noundef %50, ptr noundef %176, i64 noundef %179)
  %181 = load i32, ptr %180, align 8
  %182 = and i32 %181, 65535
  %183 = icmp eq i32 %182, 61
  br i1 %183, label %184, label %204

184:                                              ; preds = %174
  %185 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1
  %186 = getelementptr inbounds %struct.rtx_def, ptr %180, i64 0, i32 1, i32 0, i32 0, i64 1
  %187 = load ptr, ptr %186, align 8, !tbaa !16
  %188 = load i32, ptr %187, align 8
  %189 = and i32 %188, 65535
  %190 = icmp eq i32 %189, 30
  br i1 %190, label %191, label %204

191:                                              ; preds = %184
  %192 = getelementptr inbounds %struct.rtx_def, ptr %187, i64 0, i32 1
  %193 = load i64, ptr %192, align 8, !tbaa !16
  %194 = lshr i32 %181, 16
  %195 = and i32 %194, 255
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %196
  %198 = load i64, ptr %197, align 8, !tbaa !83
  %199 = and i64 %198, %193
  %200 = icmp eq i64 %199, %58
  br i1 %200, label %201, label %204

201:                                              ; preds = %191
  %202 = load ptr, ptr %185, align 8, !tbaa !16
  %203 = load i32, ptr %202, align 8
  br label %204

204:                                              ; preds = %201, %191, %184, %174
  %205 = phi i32 [ %203, %201 ], [ %181, %191 ], [ %181, %184 ], [ %181, %174 ]
  %206 = phi ptr [ %202, %201 ], [ %180, %191 ], [ %180, %184 ], [ %180, %174 ]
  %207 = and i32 %205, 65535
  %208 = icmp eq i32 %207, 61
  br i1 %208, label %209, label %879

209:                                              ; preds = %204
  %210 = getelementptr inbounds %struct.rtx_def, ptr %206, i64 0, i32 1
  %211 = getelementptr inbounds %struct.rtx_def, ptr %206, i64 0, i32 1, i32 0, i32 0, i64 1
  %212 = load ptr, ptr %211, align 8, !tbaa !16
  %213 = load i32, ptr %212, align 8
  %214 = and i32 %213, 65535
  %215 = icmp eq i32 %214, 30
  br i1 %215, label %216, label %879

216:                                              ; preds = %209
  %217 = lshr i32 %205, 16
  %218 = and i32 %217, 255
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %219
  %221 = load i64, ptr %220, align 8, !tbaa !83
  %222 = icmp eq i64 %221, %58
  br i1 %222, label %879, label %223

223:                                              ; preds = %216
  %224 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %219
  %225 = load i8, ptr %224, align 1, !tbaa !16
  %226 = zext i8 %225 to i32
  %227 = shl nuw nsw i32 %226, 3
  %228 = icmp ult i8 %225, 9
  br i1 %228, label %229, label %879

229:                                              ; preds = %223
  %230 = getelementptr inbounds %struct.rtx_def, ptr %212, i64 0, i32 1
  %231 = load i64, ptr %230, align 8, !tbaa !16
  %232 = xor i64 %58, -1
  %233 = and i64 %221, %232
  %234 = or i64 %231, %233
  %235 = and i8 %225, -9
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %247, label %237

237:                                              ; preds = %229
  %238 = add nsw i32 %227, -1
  %239 = zext i32 %238 to i64
  %240 = shl nuw nsw i64 1, %239
  %241 = and i64 %234, %240
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %247, label %243

243:                                              ; preds = %237
  %244 = zext i32 %227 to i64
  %245 = shl nsw i64 -1, %244
  %246 = or i64 %234, %245
  br label %247

247:                                              ; preds = %243, %237, %229
  %248 = phi i64 [ %246, %243 ], [ %234, %237 ], [ %234, %229 ]
  %249 = load ptr, ptr %210, align 8, !tbaa !16
  %250 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %248) #25
  %251 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %218, ptr noundef %249, ptr noundef %250) #25
  %252 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %253 = tail call i32 @rtx_cost(ptr noundef %251, i32 noundef 23, i8 noundef zeroext %252) #25
  %254 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %255 = tail call i32 @rtx_cost(ptr noundef nonnull %206, i32 noundef 23, i8 noundef zeroext %254) #25
  %256 = icmp slt i32 %253, %255
  %257 = select i1 %256, ptr %251, ptr %206
  br label %879

258:                                              ; preds = %159
  %259 = load i8, ptr %7, align 1, !tbaa !16
  %260 = zext i8 %259 to i32
  %261 = shl nuw nsw i32 %260, 3
  %262 = icmp ult i8 %259, 8
  br i1 %262, label %263, label %273

263:                                              ; preds = %258
  %264 = add nsw i32 %261, -1
  %265 = zext i32 %264 to i64
  %266 = shl nuw i64 1, %265
  %267 = and i64 %266, %58
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %273, label %269

269:                                              ; preds = %263
  %270 = zext i32 %261 to i64
  %271 = shl nsw i64 -1, %270
  %272 = or i64 %271, %58
  br label %273

273:                                              ; preds = %269, %263, %258
  %274 = phi i64 [ %272, %269 ], [ %58, %263 ], [ %58, %258 ]
  %275 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %276 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %277 = load ptr, ptr %276, align 8, !tbaa !16
  %278 = load i32, ptr %277, align 8
  %279 = and i32 %278, 65535
  %280 = icmp eq i32 %279, 30
  br i1 %280, label %281, label %397

281:                                              ; preds = %273
  %282 = sub i64 0, %274
  %283 = tail call i32 @exact_log2(i64 noundef %282) #25
  %284 = icmp sgt i32 %283, -1
  br i1 %284, label %285, label %397

285:                                              ; preds = %281
  %286 = load ptr, ptr %275, align 8, !tbaa !16
  %287 = tail call i64 @nonzero_bits(ptr noundef %286, i32 noundef %1) #25
  %288 = xor i64 %274, -1
  %289 = and i64 %287, %288
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %397

291:                                              ; preds = %285
  %292 = load ptr, ptr %276, align 8, !tbaa !16
  %293 = getelementptr inbounds %struct.rtx_def, ptr %292, i64 0, i32 1
  %294 = load i64, ptr %293, align 8, !tbaa !16
  %295 = and i64 %294, %288
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %397, label %297

297:                                              ; preds = %291
  %298 = load ptr, ptr %275, align 8, !tbaa !16
  %299 = and i64 %294, %274
  %300 = tail call ptr @plus_constant(ptr noundef %298, i64 noundef %299) #25
  br label %131

301:                                              ; preds = %159
  %302 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %303 = load ptr, ptr %302, align 8, !tbaa !16
  %304 = load i32, ptr %303, align 8
  %305 = and i32 %304, 65535
  %306 = icmp eq i32 %305, 30
  br i1 %306, label %307, label %397

307:                                              ; preds = %301
  %308 = getelementptr inbounds %struct.rtx_def, ptr %303, i64 0, i32 1
  %309 = load i64, ptr %308, align 8, !tbaa !16
  %310 = sub nsw i64 0, %309
  %311 = and i64 %309, %310
  %312 = icmp ugt i64 %311, %58
  br i1 %312, label %313, label %317

313:                                              ; preds = %307
  %314 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %315 = load ptr, ptr %314, align 8, !tbaa !16
  %316 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %150, ptr noundef %315, i32 noundef %150) #25
  br label %131

317:                                              ; preds = %307
  %318 = or i64 %309, %67
  %319 = icmp eq i64 %318, %309
  br i1 %319, label %320, label %397

320:                                              ; preds = %317
  %321 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %322 = load ptr, ptr %321, align 8, !tbaa !16
  %323 = tail call ptr @simplify_gen_unary(i32 noundef 64, i32 noundef %150, ptr noundef %322, i32 noundef %150) #25
  br label %131

324:                                              ; preds = %159, %159
  %325 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !16
  %327 = load i32, ptr %326, align 8
  %328 = and i32 %327, 65535
  %329 = icmp eq i32 %328, 68
  br i1 %329, label %330, label %397

330:                                              ; preds = %324
  %331 = getelementptr inbounds %struct.rtx_def, ptr %326, i64 0, i32 1, i32 0, i32 0, i64 1
  %332 = load ptr, ptr %331, align 8, !tbaa !16
  %333 = load i32, ptr %332, align 8
  %334 = and i32 %333, 65535
  %335 = icmp eq i32 %334, 30
  br i1 %335, label %336, label %397

336:                                              ; preds = %330
  %337 = getelementptr inbounds %struct.rtx_def, ptr %332, i64 0, i32 1
  %338 = load i64, ptr %337, align 8, !tbaa !16
  %339 = icmp ult i64 %338, 64
  br i1 %339, label %340, label %397

340:                                              ; preds = %336
  %341 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %342 = load ptr, ptr %341, align 8, !tbaa !16
  %343 = load i32, ptr %342, align 8
  %344 = and i32 %343, 65535
  %345 = icmp eq i32 %344, 30
  br i1 %345, label %346, label %397

346:                                              ; preds = %340
  %347 = getelementptr inbounds %struct.rtx_def, ptr %342, i64 0, i32 1
  %348 = load i64, ptr %347, align 8, !tbaa !16
  %349 = tail call i32 @floor_log2(i64 noundef %348) #25
  %350 = sext i32 %349 to i64
  %351 = add nsw i64 %338, %350
  %352 = load i32, ptr %78, align 8
  %353 = lshr i32 %352, 16
  %354 = and i32 %353, 255
  %355 = zext i32 %354 to i64
  %356 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %355
  %357 = load i8, ptr %356, align 1, !tbaa !16
  %358 = zext i8 %357 to i64
  %359 = shl nuw nsw i64 %358, 3
  %360 = icmp slt i64 %351, %359
  br i1 %360, label %361, label %397

361:                                              ; preds = %346
  %362 = load ptr, ptr %341, align 8, !tbaa !16
  %363 = getelementptr inbounds %struct.rtx_def, ptr %362, i64 0, i32 1
  %364 = load i64, ptr %363, align 8, !tbaa !16
  %365 = load ptr, ptr %325, align 8, !tbaa !16
  %366 = tail call i64 @nonzero_bits(ptr noundef %365, i32 noundef %354) #25
  %367 = xor i64 %366, -1
  %368 = and i64 %364, %367
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %397

370:                                              ; preds = %361
  %371 = load ptr, ptr %341, align 8, !tbaa !16
  %372 = getelementptr inbounds %struct.rtx_def, ptr %371, i64 0, i32 1
  %373 = load i64, ptr %372, align 8, !tbaa !16
  %374 = and i64 %373, %58
  %375 = load ptr, ptr %325, align 8, !tbaa !16
  %376 = getelementptr inbounds %struct.rtx_def, ptr %375, i64 0, i32 1, i32 0, i32 0, i64 1
  %377 = load ptr, ptr %376, align 8, !tbaa !16
  %378 = getelementptr inbounds %struct.rtx_def, ptr %377, i64 0, i32 1
  %379 = load i64, ptr %378, align 8, !tbaa !16
  %380 = shl i64 %374, %379
  %381 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %380) #25
  %382 = load i32, ptr %78, align 8
  %383 = and i32 %382, 65535
  %384 = lshr i32 %382, 16
  %385 = and i32 %384, 255
  %386 = load ptr, ptr %325, align 8, !tbaa !16
  %387 = getelementptr inbounds %struct.rtx_def, ptr %386, i64 0, i32 1
  %388 = load ptr, ptr %387, align 8, !tbaa !16
  %389 = tail call ptr @simplify_gen_binary(i32 noundef %383, i32 noundef %385, ptr noundef %388, ptr noundef %381) #25
  %390 = load i32, ptr %78, align 8
  %391 = lshr i32 %390, 16
  %392 = and i32 %391, 255
  %393 = load ptr, ptr %325, align 8, !tbaa !16
  %394 = getelementptr inbounds %struct.rtx_def, ptr %393, i64 0, i32 1, i32 0, i32 0, i64 1
  %395 = load ptr, ptr %394, align 8, !tbaa !16
  %396 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %392, ptr noundef %389, ptr noundef %395) #25
  br label %131

397:                                              ; preds = %273, %281, %285, %291, %301, %317, %159, %324, %330, %336, %340, %346, %361, %168
  %398 = phi i64 [ %58, %168 ], [ %58, %361 ], [ %58, %346 ], [ %58, %340 ], [ %58, %336 ], [ %58, %330 ], [ %58, %324 ], [ %67, %159 ], [ %67, %317 ], [ %67, %301 ], [ %67, %291 ], [ %67, %285 ], [ %67, %281 ], [ %67, %273 ]
  %399 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %400 = load ptr, ptr %399, align 8, !tbaa !16
  %401 = tail call fastcc ptr @force_to_mode(ptr noundef %400, i32 noundef %1, i64 noundef %398, i32 noundef %19)
  %402 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %403 = load ptr, ptr %402, align 8, !tbaa !16
  %404 = tail call fastcc ptr @force_to_mode(ptr noundef %403, i32 noundef %1, i64 noundef %398, i32 noundef %19)
  %405 = load i32, ptr %401, align 8
  %406 = and i32 %405, 65535
  %407 = icmp eq i32 %406, 100
  br i1 %407, label %408, label %417

408:                                              ; preds = %397
  %409 = load i32, ptr %404, align 8
  %410 = and i32 %409, 65535
  %411 = icmp eq i32 %410, 100
  br i1 %411, label %412, label %417

412:                                              ; preds = %408
  %413 = getelementptr inbounds %struct.rtx_def, ptr %401, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !16
  %415 = getelementptr inbounds %struct.rtx_def, ptr %404, i64 0, i32 1
  %416 = load ptr, ptr %415, align 8, !tbaa !16
  br label %417

417:                                              ; preds = %412, %408, %397
  %418 = phi ptr [ %414, %412 ], [ %401, %408 ], [ %401, %397 ]
  %419 = phi ptr [ %416, %412 ], [ %404, %408 ], [ %404, %397 ]
  %420 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %421 = tail call ptr %420(i32 noundef %50, ptr noundef %418) #25
  %422 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %423 = tail call ptr %422(i32 noundef %50, ptr noundef %419) #25
  %424 = load i32, ptr %78, align 8
  %425 = lshr i32 %424, 16
  %426 = and i32 %425, 255
  %427 = icmp eq i32 %50, %426
  br i1 %427, label %428, label %434

428:                                              ; preds = %417
  %429 = load ptr, ptr %399, align 8, !tbaa !16
  %430 = icmp eq ptr %421, %429
  br i1 %430, label %431, label %434

431:                                              ; preds = %428
  %432 = load ptr, ptr %402, align 8, !tbaa !16
  %433 = icmp eq ptr %423, %432
  br i1 %433, label %879, label %434

434:                                              ; preds = %431, %428, %417
  %435 = tail call ptr @simplify_gen_binary(i32 noundef %13, i32 noundef %50, ptr noundef %421, ptr noundef %423) #25
  br label %879

436:                                              ; preds = %159
  %437 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %438 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %439 = load ptr, ptr %438, align 8, !tbaa !16
  %440 = load i32, ptr %439, align 8
  %441 = and i32 %440, 65535
  %442 = icmp eq i32 %441, 30
  br i1 %442, label %443, label %452

443:                                              ; preds = %436
  %444 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1
  %445 = load i64, ptr %444, align 8, !tbaa !16
  %446 = icmp sgt i64 %445, -1
  br i1 %446, label %447, label %452

447:                                              ; preds = %443
  %448 = load i8, ptr %7, align 1, !tbaa !16
  %449 = zext i8 %448 to i64
  %450 = shl nuw nsw i64 %449, 3
  %451 = icmp ult i64 %445, %450
  br i1 %451, label %465, label %452

452:                                              ; preds = %447, %443, %436
  %453 = lshr i32 %440, 16
  %454 = and i32 %453, 255
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %879, label %456

456:                                              ; preds = %452
  %457 = tail call i64 @nonzero_bits(ptr noundef nonnull %439, i32 noundef %454) #25
  %458 = load i8, ptr %7, align 1, !tbaa !16
  %459 = zext i8 %458 to i64
  %460 = shl nuw nsw i64 %459, 3
  %461 = icmp ult i64 %457, %460
  br i1 %461, label %462, label %879

462:                                              ; preds = %456
  %463 = load ptr, ptr %438, align 8, !tbaa !16
  %464 = load i32, ptr %463, align 8
  br label %465

465:                                              ; preds = %462, %447
  %466 = phi i32 [ %464, %462 ], [ %440, %447 ]
  %467 = phi ptr [ %463, %462 ], [ %439, %447 ]
  %468 = and i32 %466, 65535
  %469 = icmp eq i32 %468, 30
  br i1 %469, label %470, label %485

470:                                              ; preds = %465
  %471 = getelementptr inbounds %struct.rtx_def, ptr %467, i64 0, i32 1
  %472 = load i64, ptr %471, align 8, !tbaa !16
  %473 = icmp sgt i64 %472, -1
  br i1 %473, label %474, label %485

474:                                              ; preds = %470
  %475 = zext i32 %50 to i64
  %476 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %475
  %477 = load i8, ptr %476, align 1, !tbaa !16
  %478 = zext i8 %477 to i64
  %479 = shl nuw nsw i64 %478, 3
  %480 = icmp ult i64 %472, %479
  %481 = icmp ult i8 %477, 9
  %482 = and i1 %481, %480
  %483 = lshr i64 %58, %472
  %484 = select i1 %482, i64 %483, i64 %67
  br label %485

485:                                              ; preds = %474, %465, %470
  %486 = phi i64 [ %67, %470 ], [ %67, %465 ], [ %484, %474 ]
  %487 = load ptr, ptr %437, align 8, !tbaa !16
  %488 = tail call fastcc ptr @force_to_mode(ptr noundef %487, i32 noundef %50, i64 noundef %486, i32 noundef %19)
  %489 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %490 = tail call ptr %489(i32 noundef %50, ptr noundef %488) #25
  %491 = load i32, ptr %78, align 8
  %492 = lshr i32 %491, 16
  %493 = and i32 %492, 255
  %494 = icmp eq i32 %50, %493
  br i1 %494, label %495, label %498

495:                                              ; preds = %485
  %496 = load ptr, ptr %437, align 8, !tbaa !16
  %497 = icmp eq ptr %490, %496
  br i1 %497, label %879, label %498

498:                                              ; preds = %495, %485
  %499 = load ptr, ptr %438, align 8, !tbaa !16
  %500 = tail call ptr @simplify_gen_binary(i32 noundef %13, i32 noundef %50, ptr noundef %490, ptr noundef %499) #25
  br label %879

501:                                              ; preds = %159
  %502 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %503 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %504 = load ptr, ptr %503, align 8, !tbaa !16
  %505 = load i32, ptr %504, align 8
  %506 = and i32 %505, 65535
  %507 = icmp eq i32 %506, 30
  br i1 %507, label %508, label %538

508:                                              ; preds = %501
  %509 = getelementptr inbounds %struct.rtx_def, ptr %504, i64 0, i32 1
  %510 = load i64, ptr %509, align 8, !tbaa !16
  %511 = icmp slt i64 %510, 64
  br i1 %511, label %512, label %538

512:                                              ; preds = %508
  %513 = zext i32 %50 to i64
  %514 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %513
  %515 = load i8, ptr %514, align 1, !tbaa !16
  %516 = icmp ult i8 %515, 9
  br i1 %516, label %517, label %538

517:                                              ; preds = %512
  %518 = load ptr, ptr %502, align 8, !tbaa !16
  %519 = shl i64 %58, %510
  %520 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %151
  %521 = load i64, ptr %520, align 8, !tbaa !83
  %522 = xor i64 %521, -1
  %523 = and i64 %519, %522
  %524 = icmp eq i64 %523, 0
  %525 = select i1 %524, i32 %50, i32 %150
  %526 = tail call fastcc ptr @force_to_mode(ptr noundef %518, i32 noundef %525, i64 noundef %519, i32 noundef %19)
  %527 = load i32, ptr %78, align 8
  %528 = lshr i32 %527, 16
  %529 = and i32 %528, 255
  %530 = icmp eq i32 %529, %525
  br i1 %530, label %531, label %534

531:                                              ; preds = %517
  %532 = load ptr, ptr %502, align 8, !tbaa !16
  %533 = icmp eq ptr %526, %532
  br i1 %533, label %538, label %534

534:                                              ; preds = %531, %517
  %535 = load ptr, ptr %503, align 8, !tbaa !16
  %536 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %525, ptr noundef %526, ptr noundef %535) #25
  %537 = load i32, ptr %536, align 8
  br label %538

538:                                              ; preds = %531, %534, %512, %508, %501
  %539 = phi i32 [ %148, %512 ], [ %148, %508 ], [ %148, %501 ], [ %537, %534 ], [ %527, %531 ]
  %540 = phi ptr [ %78, %512 ], [ %78, %508 ], [ %78, %501 ], [ %536, %534 ], [ %78, %531 ]
  %541 = and i32 %539, 65535
  %542 = icmp eq i32 %541, 68
  br i1 %542, label %543, label %695

543:                                              ; preds = %538
  %544 = getelementptr inbounds %struct.rtx_def, ptr %540, i64 0, i32 1
  %545 = getelementptr inbounds %struct.rtx_def, ptr %540, i64 0, i32 1, i32 0, i32 0, i64 1
  %546 = load ptr, ptr %545, align 8, !tbaa !16
  %547 = load i32, ptr %546, align 8
  %548 = and i32 %547, 65535
  %549 = icmp eq i32 %548, 30
  br i1 %549, label %550, label %695

550:                                              ; preds = %543
  %551 = getelementptr inbounds %struct.rtx_def, ptr %546, i64 0, i32 1
  %552 = load i64, ptr %551, align 8, !tbaa !16
  %553 = load ptr, ptr %544, align 8, !tbaa !16
  %554 = load i32, ptr %553, align 8
  %555 = lshr i32 %554, 16
  %556 = and i32 %555, 255
  %557 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %553, i32 noundef %556) #25
  %558 = zext i32 %557 to i64
  %559 = add nsw i64 %552, %558
  %560 = load i32, ptr %540, align 8
  %561 = lshr i32 %560, 16
  %562 = and i32 %561, 255
  %563 = zext i32 %562 to i64
  %564 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %563
  %565 = load i8, ptr %564, align 1, !tbaa !16
  %566 = zext i8 %565 to i64
  %567 = shl nuw nsw i64 %566, 3
  %568 = icmp slt i64 %559, %567
  br i1 %568, label %695, label %569

569:                                              ; preds = %550
  %570 = add i64 %58, 1
  %571 = tail call i32 @exact_log2(i64 noundef %570) #25
  %572 = icmp sgt i32 %571, -1
  br i1 %572, label %573, label %695

573:                                              ; preds = %569
  %574 = load ptr, ptr %545, align 8, !tbaa !16
  %575 = getelementptr inbounds %struct.rtx_def, ptr %574, i64 0, i32 1
  %576 = load i64, ptr %575, align 8, !tbaa !16
  %577 = tail call i32 @exact_log2(i64 noundef %570) #25
  %578 = sext i32 %577 to i64
  %579 = add nsw i64 %576, %578
  %580 = load i32, ptr %540, align 8
  %581 = lshr i32 %580, 16
  %582 = and i32 %581, 255
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %583
  %585 = load i8, ptr %584, align 1, !tbaa !16
  %586 = zext i8 %585 to i64
  %587 = shl nuw nsw i64 %586, 3
  %588 = icmp sgt i64 %579, %587
  br i1 %588, label %695, label %589

589:                                              ; preds = %573
  %590 = load ptr, ptr %544, align 8, !tbaa !16
  %591 = load i32, ptr %590, align 8
  %592 = lshr i32 %591, 16
  %593 = and i32 %592, 255
  %594 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %590, i32 noundef %593) #25
  %595 = tail call i32 @exact_log2(i64 noundef %570) #25
  %596 = icmp slt i32 %594, %595
  br i1 %596, label %695, label %597

597:                                              ; preds = %589
  %598 = load i32, ptr %540, align 8
  %599 = lshr i32 %598, 16
  %600 = and i32 %599, 255
  %601 = load ptr, ptr %544, align 8, !tbaa !16
  %602 = zext i32 %600 to i64
  %603 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %602
  %604 = load i8, ptr %603, align 1, !tbaa !16
  %605 = zext i8 %604 to i32
  %606 = shl nuw nsw i32 %605, 3
  %607 = tail call i32 @exact_log2(i64 noundef %570) #25
  %608 = sub nsw i32 %606, %607
  %609 = sext i32 %608 to i64
  %610 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %609) #25
  %611 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %600, ptr noundef %601, ptr noundef %610) #25
  br label %695

612:                                              ; preds = %159
  %613 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %151
  %614 = load i8, ptr %613, align 1, !tbaa !16
  %615 = icmp ult i8 %614, 9
  br i1 %615, label %616, label %626

616:                                              ; preds = %612
  %617 = zext i8 %614 to i64
  %618 = shl nuw nsw i64 %617, 3
  %619 = add nuw nsw i64 %618, 4294967295
  %620 = and i64 %619, 4294967295
  %621 = shl nuw i64 1, %620
  %622 = icmp eq i64 %58, %621
  br i1 %622, label %623, label %626

623:                                              ; preds = %616
  %624 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %625 = load ptr, ptr %624, align 8, !tbaa !16
  br label %131

626:                                              ; preds = %616, %612
  %627 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %628 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %629 = load ptr, ptr %628, align 8, !tbaa !16
  %630 = load i32, ptr %629, align 8
  %631 = and i32 %630, 65535
  %632 = icmp eq i32 %631, 30
  br i1 %632, label %633, label %683

633:                                              ; preds = %626
  %634 = getelementptr inbounds %struct.rtx_def, ptr %629, i64 0, i32 1
  %635 = load i64, ptr %634, align 8, !tbaa !16
  %636 = icmp ult i64 %635, 64
  br i1 %636, label %637, label %683

637:                                              ; preds = %633
  %638 = icmp ugt i8 %614, 8
  br i1 %638, label %639, label %648

639:                                              ; preds = %637
  %640 = zext i8 %614 to i64
  %641 = shl nuw nsw i64 %640, 3
  %642 = sub nuw nsw i64 %641, %635
  %643 = icmp ult i64 %642, 64
  br i1 %643, label %644, label %652

644:                                              ; preds = %639
  %645 = sub nsw i64 %635, %641
  %646 = add nsw i64 %645, 64
  %647 = lshr i64 -1, %646
  br label %652

648:                                              ; preds = %637
  %649 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %151
  %650 = load i64, ptr %649, align 8, !tbaa !83
  %651 = lshr i64 %650, %635
  br label %652

652:                                              ; preds = %639, %644, %648
  %653 = phi i64 [ %647, %644 ], [ -1, %639 ], [ %651, %648 ]
  %654 = xor i64 %653, -1
  %655 = and i64 %58, %654
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %657, label %664

657:                                              ; preds = %652
  %658 = load ptr, ptr %627, align 8, !tbaa !16
  %659 = trunc i64 %635 to i32
  %660 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %150, ptr noundef %658, i32 noundef %659)
  %661 = load i32, ptr %660, align 8
  %662 = and i32 %661, 65535
  %663 = icmp eq i32 %662, 67
  br i1 %663, label %683, label %131

664:                                              ; preds = %652
  %665 = tail call i32 @exact_log2(i64 noundef %58) #25
  %666 = icmp sgt i32 %665, -1
  br i1 %666, label %667, label %683

667:                                              ; preds = %664
  %668 = load i32, ptr %78, align 8
  %669 = lshr i32 %668, 16
  %670 = and i32 %669, 255
  %671 = load ptr, ptr %627, align 8, !tbaa !16
  %672 = zext i32 %670 to i64
  %673 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %672
  %674 = load i8, ptr %673, align 1, !tbaa !16
  %675 = zext i8 %674 to i32
  %676 = shl nuw nsw i32 %675, 3
  %677 = xor i32 %665, -1
  %678 = add nsw i32 %676, %677
  %679 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %670, ptr noundef %671, i32 noundef %678)
  %680 = load i32, ptr %679, align 8
  %681 = and i32 %680, 65535
  %682 = icmp eq i32 %681, 67
  br i1 %682, label %683, label %131

683:                                              ; preds = %657, %667, %664, %633, %626
  %684 = phi ptr [ %78, %633 ], [ %78, %626 ], [ %78, %664 ], [ %679, %667 ], [ %660, %657 ]
  %685 = icmp eq i64 %58, 1
  br i1 %685, label %686, label %695

686:                                              ; preds = %683
  %687 = load i32, ptr %684, align 8
  %688 = lshr i32 %687, 16
  %689 = and i32 %688, 255
  %690 = getelementptr inbounds %struct.rtx_def, ptr %684, i64 0, i32 1
  %691 = load ptr, ptr %690, align 8, !tbaa !16
  %692 = getelementptr inbounds %struct.rtx_def, ptr %684, i64 0, i32 1, i32 0, i32 0, i64 1
  %693 = load ptr, ptr %692, align 8, !tbaa !16
  %694 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %689, ptr noundef %691, ptr noundef %693) #25
  br label %695

695:                                              ; preds = %683, %686, %538, %543, %550, %569, %573, %589, %597
  %696 = phi ptr [ %694, %686 ], [ %684, %683 ], [ %611, %597 ], [ %540, %589 ], [ %540, %573 ], [ %540, %569 ], [ %540, %550 ], [ %540, %543 ], [ %540, %538 ]
  %697 = load i32, ptr %696, align 8
  %698 = and i32 %697, 65535
  %699 = add nsw i32 %698, -67
  %700 = icmp ult i32 %699, 2
  br i1 %700, label %701, label %879

701:                                              ; preds = %695
  %702 = getelementptr inbounds %struct.rtx_def, ptr %696, i64 0, i32 1
  %703 = getelementptr inbounds %struct.rtx_def, ptr %696, i64 0, i32 1, i32 0, i32 0, i64 1
  %704 = load ptr, ptr %703, align 8, !tbaa !16
  %705 = load i32, ptr %704, align 8
  %706 = and i32 %705, 65535
  %707 = icmp eq i32 %706, 30
  br i1 %707, label %708, label %879

708:                                              ; preds = %701
  %709 = getelementptr inbounds %struct.rtx_def, ptr %704, i64 0, i32 1
  %710 = load i64, ptr %709, align 8, !tbaa !16
  %711 = icmp sgt i64 %710, -1
  br i1 %711, label %712, label %879

712:                                              ; preds = %708
  %713 = lshr i32 %697, 16
  %714 = and i32 %713, 255
  %715 = zext i32 %714 to i64
  %716 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %715
  %717 = load i8, ptr %716, align 1, !tbaa !16
  %718 = zext i8 %717 to i32
  %719 = shl nuw nsw i32 %718, 3
  %720 = tail call i32 @floor_log2(i64 noundef %58) #25
  %721 = xor i32 %720, -1
  %722 = add i32 %719, %721
  %723 = sext i32 %722 to i64
  %724 = icmp sgt i64 %710, %723
  br i1 %724, label %879, label %725

725:                                              ; preds = %712
  %726 = load ptr, ptr %702, align 8, !tbaa !16
  %727 = load i32, ptr %726, align 8
  %728 = and i32 %727, 65535
  %729 = icmp eq i32 %728, 65
  br i1 %729, label %730, label %879

730:                                              ; preds = %725
  %731 = getelementptr inbounds %struct.rtx_def, ptr %726, i64 0, i32 1, i32 0, i32 0, i64 1
  %732 = load ptr, ptr %731, align 8, !tbaa !16
  %733 = load ptr, ptr %703, align 8, !tbaa !16
  %734 = icmp eq ptr %732, %733
  br i1 %734, label %735, label %879

735:                                              ; preds = %730
  %736 = getelementptr inbounds %struct.rtx_def, ptr %726, i64 0, i32 1
  %737 = load ptr, ptr %736, align 8, !tbaa !16
  br label %131

738:                                              ; preds = %159, %159
  %739 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %740 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %741 = load ptr, ptr %740, align 8, !tbaa !16
  %742 = load i32, ptr %741, align 8
  %743 = and i32 %742, 65535
  %744 = icmp eq i32 %743, 30
  br i1 %744, label %745, label %879

745:                                              ; preds = %738
  %746 = getelementptr inbounds %struct.rtx_def, ptr %741, i64 0, i32 1
  %747 = load i64, ptr %746, align 8, !tbaa !16
  %748 = icmp sgt i64 %747, -1
  br i1 %748, label %749, label %879

749:                                              ; preds = %745
  %750 = icmp eq i32 %13, 66
  %751 = select i1 %750, i32 69, i32 66
  %752 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %58) #25
  %753 = load ptr, ptr %740, align 8, !tbaa !16
  %754 = tail call ptr @simplify_binary_operation(i32 noundef %751, i32 noundef %150, ptr noundef %752, ptr noundef %753) #25
  %755 = icmp eq ptr %754, null
  br i1 %755, label %879, label %756

756:                                              ; preds = %749
  %757 = load i32, ptr %754, align 8
  %758 = and i32 %757, 65535
  %759 = icmp eq i32 %758, 30
  br i1 %759, label %760, label %879

760:                                              ; preds = %756
  %761 = load ptr, ptr %739, align 8, !tbaa !16
  %762 = load i32, ptr %78, align 8
  %763 = lshr i32 %762, 16
  %764 = and i32 %763, 255
  %765 = getelementptr inbounds %struct.rtx_def, ptr %754, i64 0, i32 1
  %766 = load i64, ptr %765, align 8, !tbaa !16
  %767 = tail call fastcc ptr @force_to_mode(ptr noundef %761, i32 noundef %764, i64 noundef %766, i32 noundef %19)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %739, ptr noundef %767)
  br label %879

768:                                              ; preds = %159
  %769 = icmp eq i64 %58, 1
  br i1 %769, label %770, label %826

770:                                              ; preds = %768
  %771 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %772 = load ptr, ptr %771, align 8, !tbaa !16
  br label %131

773:                                              ; preds = %159
  %774 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %775 = load ptr, ptr %774, align 8, !tbaa !16
  %776 = load i32, ptr %775, align 8
  %777 = and i32 %776, 65535
  %778 = icmp eq i32 %777, 68
  br i1 %778, label %779, label %826

779:                                              ; preds = %773
  %780 = getelementptr inbounds %struct.rtx_def, ptr %775, i64 0, i32 1, i32 0, i32 0, i64 1
  %781 = load ptr, ptr %780, align 8, !tbaa !16
  %782 = load i32, ptr %781, align 8
  %783 = and i32 %782, 65535
  %784 = icmp eq i32 %783, 30
  br i1 %784, label %785, label %826

785:                                              ; preds = %779
  %786 = getelementptr inbounds %struct.rtx_def, ptr %781, i64 0, i32 1
  %787 = load i64, ptr %786, align 8, !tbaa !16
  %788 = icmp sgt i64 %787, -1
  br i1 %788, label %789, label %826

789:                                              ; preds = %785
  %790 = tail call i32 @floor_log2(i64 noundef %58) #25
  %791 = sext i32 %790 to i64
  %792 = add nsw i64 %787, %791
  %793 = load i32, ptr %78, align 8
  %794 = lshr i32 %793, 16
  %795 = and i32 %794, 255
  %796 = zext i32 %795 to i64
  %797 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %796
  %798 = load i8, ptr %797, align 1, !tbaa !16
  %799 = zext i8 %798 to i64
  %800 = shl nuw nsw i64 %799, 3
  %801 = icmp slt i64 %792, %800
  br i1 %801, label %802, label %826

802:                                              ; preds = %789
  %803 = load ptr, ptr %774, align 8, !tbaa !16
  %804 = getelementptr inbounds %struct.rtx_def, ptr %803, i64 0, i32 1, i32 0, i32 0, i64 1
  %805 = load ptr, ptr %804, align 8, !tbaa !16
  %806 = getelementptr inbounds %struct.rtx_def, ptr %805, i64 0, i32 1
  %807 = load i64, ptr %806, align 8, !tbaa !16
  %808 = icmp slt i64 %807, 64
  br i1 %808, label %809, label %826

809:                                              ; preds = %802
  %810 = shl i64 %58, %807
  %811 = tail call ptr @gen_int_mode(i64 noundef %810, i32 noundef %795) #25
  %812 = load i32, ptr %78, align 8
  %813 = lshr i32 %812, 16
  %814 = and i32 %813, 255
  %815 = load ptr, ptr %774, align 8, !tbaa !16
  %816 = getelementptr inbounds %struct.rtx_def, ptr %815, i64 0, i32 1
  %817 = load ptr, ptr %816, align 8, !tbaa !16
  %818 = tail call ptr @simplify_gen_binary(i32 noundef 63, i32 noundef %814, ptr noundef %817, ptr noundef %811) #25
  %819 = load i32, ptr %78, align 8
  %820 = lshr i32 %819, 16
  %821 = and i32 %820, 255
  %822 = load ptr, ptr %774, align 8, !tbaa !16
  %823 = getelementptr inbounds %struct.rtx_def, ptr %822, i64 0, i32 1, i32 0, i32 0, i64 1
  %824 = load ptr, ptr %823, align 8, !tbaa !16
  %825 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %821, ptr noundef %818, ptr noundef %824) #25
  br label %131

826:                                              ; preds = %773, %779, %785, %789, %802, %768
  %827 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %828 = load ptr, ptr %827, align 8, !tbaa !16
  %829 = tail call fastcc ptr @force_to_mode(ptr noundef %828, i32 noundef %1, i64 noundef %67, i32 noundef %19)
  %830 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %831 = tail call ptr %830(i32 noundef %50, ptr noundef %829) #25
  %832 = load i32, ptr %78, align 8
  %833 = lshr i32 %832, 16
  %834 = and i32 %833, 255
  %835 = icmp eq i32 %50, %834
  br i1 %835, label %836, label %839

836:                                              ; preds = %826
  %837 = load ptr, ptr %827, align 8, !tbaa !16
  %838 = icmp eq ptr %831, %837
  br i1 %838, label %879, label %839

839:                                              ; preds = %836, %826
  %840 = tail call ptr @simplify_gen_unary(i32 noundef %13, i32 noundef %50, ptr noundef %831, i32 noundef %50) #25
  br label %879

841:                                              ; preds = %159
  %842 = icmp ult i64 %58, 2
  br i1 %842, label %843, label %879

843:                                              ; preds = %841
  %844 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1
  %845 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %846 = load ptr, ptr %845, align 8, !tbaa !16
  %847 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %848 = icmp eq ptr %846, %847
  br i1 %848, label %849, label %879

849:                                              ; preds = %843
  %850 = load ptr, ptr %844, align 8, !tbaa !16
  %851 = load i32, ptr %850, align 8
  %852 = lshr i32 %851, 16
  %853 = and i32 %852, 255
  %854 = icmp eq i32 %853, %1
  br i1 %854, label %855, label %879

855:                                              ; preds = %849
  %856 = tail call i64 @nonzero_bits(ptr noundef nonnull %850, i32 noundef %1) #25
  %857 = tail call i32 @exact_log2(i64 noundef %856) #25
  %858 = icmp sgt i32 %857, -1
  br i1 %858, label %859, label %879

859:                                              ; preds = %855
  %860 = load ptr, ptr %844, align 8, !tbaa !16
  %861 = tail call i64 @nonzero_bits(ptr noundef %860, i32 noundef %1) #25
  %862 = icmp eq i64 %861, 1
  br i1 %862, label %863, label %879

863:                                              ; preds = %859
  %864 = load ptr, ptr %844, align 8, !tbaa !16
  br label %131

865:                                              ; preds = %159
  %866 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 1
  %867 = load ptr, ptr %866, align 8, !tbaa !16
  %868 = tail call fastcc ptr @force_to_mode(ptr noundef %867, i32 noundef %1, i64 noundef %58, i32 noundef %19)
  %869 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %870 = tail call ptr %869(i32 noundef %150, ptr noundef %868) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %866, ptr noundef %870)
  %871 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 2
  %872 = load i32, ptr %78, align 8
  %873 = lshr i32 %872, 16
  %874 = and i32 %873, 255
  %875 = load ptr, ptr %871, align 8, !tbaa !16
  %876 = tail call fastcc ptr @force_to_mode(ptr noundef %875, i32 noundef %1, i64 noundef %58, i32 noundef %19)
  %877 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %878 = tail call ptr %877(i32 noundef %874, ptr noundef %876) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %871, ptr noundef %878)
  br label %879

879:                                              ; preds = %695, %159, %841, %843, %849, %855, %859, %701, %708, %712, %725, %730, %160, %836, %839, %738, %745, %760, %756, %749, %495, %498, %452, %456, %431, %434, %204, %209, %216, %223, %247, %865
  %880 = phi ptr [ %78, %865 ], [ %840, %839 ], [ %78, %836 ], [ %78, %760 ], [ %78, %756 ], [ %78, %749 ], [ %78, %745 ], [ %78, %738 ], [ %500, %498 ], [ %78, %495 ], [ %78, %456 ], [ %78, %452 ], [ %435, %434 ], [ %78, %431 ], [ %257, %247 ], [ %206, %223 ], [ %206, %216 ], [ %206, %209 ], [ %206, %204 ], [ %696, %695 ], [ %161, %160 ], [ %696, %701 ], [ %696, %708 ], [ %696, %712 ], [ %696, %725 ], [ %696, %730 ], [ %78, %841 ], [ %78, %843 ], [ %78, %849 ], [ %78, %855 ], [ %78, %859 ], [ %78, %159 ]
  %881 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %882 = tail call ptr %881(i32 noundef %1, ptr noundef %880) #25
  br label %883

883:                                              ; preds = %18, %18, %18, %879, %156, %107, %90, %88
  %884 = phi ptr [ %89, %88 ], [ %92, %90 ], [ %109, %107 ], [ %882, %879 ], [ %158, %156 ], [ %9, %18 ], [ %9, %18 ], [ %9, %18 ]
  ret ptr %884
}

declare ptr @gen_int_mode(i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_and_const_int(ptr noundef %0, i32 noundef %1, ptr noundef %2, i64 noundef %3) unnamed_addr #9 {
  %5 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %1, ptr noundef %2, i64 noundef %3)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %24

7:                                                ; preds = %4
  %8 = icmp eq ptr %0, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %7
  %10 = load i32, ptr %2, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  %13 = tail call ptr @gen_int_mode(i64 noundef %3, i32 noundef %1) #25
  %14 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %12, ptr noundef nonnull %2, ptr noundef %13) #25
  br label %15

15:                                               ; preds = %9, %7
  %16 = phi ptr [ %0, %7 ], [ %14, %9 ]
  %17 = load i32, ptr %16, align 8
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  %20 = icmp eq i32 %19, %1
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %23 = tail call ptr %22(i32 noundef %1, ptr noundef nonnull %16) #25
  br label %24

24:                                               ; preds = %15, %21, %4
  %25 = phi ptr [ %5, %4 ], [ %23, %21 ], [ %16, %15 ]
  ret ptr %25
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @distribute_and_simplify_rtx(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = lshr i32 %3, 16
  %5 = and i32 %4, 255
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !16
  switch i8 %8, label %9 [
    i8 8, label %14
    i8 9, label %14
    i8 11, label %14
  ]

9:                                                ; preds = %2
  %10 = icmp ne i8 %8, 17
  %11 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %12 = icmp ne i32 %11, 0
  %13 = select i1 %10, i1 true, i1 %12
  br i1 %13, label %17, label %73

14:                                               ; preds = %2, %2, %2
  %15 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !20
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %73, label %17

17:                                               ; preds = %14, %9
  %18 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %19 = zext i32 %1 to i64
  %20 = getelementptr inbounds [1 x %union.rtunion_def], ptr %18, i64 0, i64 %19
  %21 = load ptr, ptr %20, align 8, !tbaa !16
  %22 = load i32, ptr %21, align 8
  %23 = and i32 %22, 65535
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %24
  %26 = load i32, ptr %25, align 4, !tbaa !16
  %27 = and i32 %26, -2
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %73

29:                                               ; preds = %17
  %30 = and i32 %3, 65535
  %31 = icmp eq i32 %1, 0
  %32 = zext i1 %31 to i64
  %33 = getelementptr inbounds [1 x %union.rtunion_def], ptr %18, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = getelementptr inbounds %struct.rtx_def, ptr %21, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !16
  %37 = getelementptr inbounds %struct.rtx_def, ptr %21, i64 0, i32 1, i32 0, i32 0, i64 1
  %38 = load ptr, ptr %37, align 8, !tbaa !16
  %39 = icmp eq i32 %30, 61
  %40 = icmp eq i32 %23, 63
  %41 = and i1 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %29
  %43 = load i32, ptr %34, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 64
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.rtx_def, ptr %34, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  br label %49

49:                                               ; preds = %46, %42, %29
  %50 = phi ptr [ %48, %46 ], [ %34, %42 ], [ %34, %29 ]
  %51 = phi i32 [ 62, %46 ], [ 61, %42 ], [ %30, %29 ]
  br i1 %31, label %52, label %55

52:                                               ; preds = %49
  %53 = tail call ptr @simplify_gen_binary(i32 noundef %51, i32 noundef %5, ptr noundef %36, ptr noundef %50) #25
  %54 = tail call ptr @simplify_gen_binary(i32 noundef %51, i32 noundef %5, ptr noundef %38, ptr noundef %50) #25
  br label %58

55:                                               ; preds = %49
  %56 = tail call ptr @simplify_gen_binary(i32 noundef %51, i32 noundef %5, ptr noundef %50, ptr noundef %36) #25
  %57 = tail call ptr @simplify_gen_binary(i32 noundef %51, i32 noundef %5, ptr noundef %50, ptr noundef %38) #25
  br label %58

58:                                               ; preds = %55, %52
  %59 = phi ptr [ %53, %52 ], [ %56, %55 ]
  %60 = phi ptr [ %54, %52 ], [ %57, %55 ]
  %61 = tail call ptr @simplify_gen_binary(i32 noundef %23, i32 noundef %5, ptr noundef %59, ptr noundef %60) #25
  %62 = tail call fastcc ptr @apply_distributive_law(ptr noundef %61)
  %63 = load i32, ptr %62, align 8
  %64 = and i32 %63, 65535
  %65 = icmp eq i32 %64, %51
  br i1 %65, label %72, label %66

66:                                               ; preds = %58
  %67 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %68 = tail call i32 @rtx_cost(ptr noundef nonnull %62, i32 noundef 23, i8 noundef zeroext %67) #25
  %69 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %70 = tail call i32 @rtx_cost(ptr noundef nonnull %0, i32 noundef 23, i8 noundef zeroext %69) #25
  %71 = icmp slt i32 %68, %70
  br i1 %71, label %73, label %72

72:                                               ; preds = %66, %58
  br label %73

73:                                               ; preds = %66, %17, %14, %9, %72
  %74 = phi ptr [ null, %72 ], [ null, %9 ], [ null, %14 ], [ null, %17 ], [ %62, %66 ]
  ret ptr %74
}

declare ptr @plus_constant(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_if_then_else(ptr noundef %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = lshr i32 %2, 16
  %4 = and i32 %3, 255
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !16
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = load i32, ptr %6, align 8
  %12 = and i32 %11, 65535
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %13
  %15 = load i32, ptr %14, align 4, !tbaa !16
  %16 = icmp ult i32 %15, 2
  %17 = load ptr, ptr @const_true_rtx, align 8
  %18 = icmp eq ptr %8, %17
  %19 = select i1 %16, i1 %18, i1 false
  %20 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %21 = icmp eq ptr %10, %20
  %22 = select i1 %19, i1 %21, i1 false
  br i1 %22, label %23, label %29

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %27 = load ptr, ptr %26, align 8, !tbaa !16
  %28 = tail call ptr @simplify_gen_relational(i32 noundef %12, i32 noundef %4, i32 noundef 0, ptr noundef %25, ptr noundef %27) #25
  br label %702

29:                                               ; preds = %1
  %30 = icmp eq ptr %8, %20
  %31 = select i1 %16, i1 %30, i1 false
  %32 = icmp eq ptr %10, %17
  %33 = select i1 %31, i1 %32, i1 false
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = tail call ptr @reversed_comparison(ptr noundef nonnull %6, i32 noundef %4) #25
  %36 = icmp eq ptr %35, null
  br i1 %36, label %38, label %702

37:                                               ; preds = %29
  br i1 %16, label %38, label %205

38:                                               ; preds = %34, %37
  %39 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %6, ptr noundef null) #25
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %123, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = load i32, ptr %43, align 8
  %45 = and i32 %44, 65535
  %46 = icmp eq i32 %45, 37
  br i1 %46, label %47, label %123

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1, i32 0, i32 0, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = icmp eq i32 %39, 81
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  br label %52

52:                                               ; preds = %51, %47
  %53 = phi i32 [ 80, %51 ], [ %39, %47 ]
  %54 = phi i32 [ 81, %51 ], [ %12, %47 ]
  %55 = phi ptr [ %8, %51 ], [ %10, %47 ]
  %56 = phi ptr [ %10, %51 ], [ %8, %47 ]
  %57 = icmp eq i32 %54, 81
  %58 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %59 = icmp eq ptr %49, %58
  %60 = select i1 %57, i1 %59, i1 false
  br i1 %60, label %61, label %75

61:                                               ; preds = %52
  %62 = lshr i32 %44, 16
  %63 = and i32 %62, 255
  %64 = tail call i64 @nonzero_bits(ptr noundef nonnull %43, i32 noundef %63) #25
  %65 = tail call i32 @exact_log2(i64 noundef %64) #25
  %66 = icmp sgt i32 %65, -1
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  %68 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  br label %75

69:                                               ; preds = %61
  %70 = load i32, ptr %43, align 8
  %71 = lshr i32 %70, 16
  %72 = and i32 %71, 255
  %73 = tail call i64 @trunc_int_for_mode(i64 noundef %64, i32 noundef %72) #25
  %74 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %73) #25
  br label %96

75:                                               ; preds = %67, %52
  %76 = phi ptr [ %68, %67 ], [ %58, %52 ]
  %77 = icmp eq ptr %49, %76
  %78 = select i1 %57, i1 %77, i1 false
  br i1 %78, label %79, label %96

79:                                               ; preds = %75
  %80 = load i32, ptr %43, align 8
  %81 = lshr i32 %80, 16
  %82 = and i32 %81, 255
  %83 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %43, i32 noundef %82) #25
  %84 = load i32, ptr %43, align 8
  %85 = lshr i32 %84, 16
  %86 = and i32 %85, 255
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %87
  %89 = load i8, ptr %88, align 1, !tbaa !16
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 3
  %92 = icmp eq i32 %83, %91
  %93 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8
  %94 = select i1 %92, i32 81, i32 %53
  %95 = select i1 %92, ptr %93, ptr %49
  br label %96

96:                                               ; preds = %79, %75, %69
  %97 = phi i32 [ 81, %69 ], [ %53, %75 ], [ %94, %79 ]
  %98 = phi ptr [ %74, %69 ], [ %49, %75 ], [ %95, %79 ]
  %99 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %43, ptr noundef %56) #25
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %106, label %101

101:                                              ; preds = %96
  %102 = tail call ptr @copy_rtx(ptr noundef %56) #25
  %103 = tail call fastcc ptr @known_cond(ptr noundef %102, i32 noundef %54, ptr noundef nonnull %43, ptr noundef %49)
  %104 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %105 = tail call fastcc ptr @subst(ptr noundef %103, ptr noundef %104, ptr noundef %104, i32 noundef 0, i32 noundef 0)
  br label %106

106:                                              ; preds = %101, %96
  %107 = phi ptr [ %105, %101 ], [ %56, %96 ]
  %108 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %43, ptr noundef %55) #25
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %115, label %110

110:                                              ; preds = %106
  %111 = tail call ptr @copy_rtx(ptr noundef %55) #25
  %112 = tail call fastcc ptr @known_cond(ptr noundef %111, i32 noundef %97, ptr noundef nonnull %43, ptr noundef %98)
  %113 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %114 = tail call fastcc ptr @subst(ptr noundef %112, ptr noundef %113, ptr noundef %113, i32 noundef 0, i32 noundef 0)
  br label %115

115:                                              ; preds = %110, %106
  %116 = phi ptr [ %114, %110 ], [ %55, %106 ]
  %117 = select i1 %50, ptr %116, ptr %107
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %117)
  %118 = select i1 %50, ptr %107, ptr %116
  tail call fastcc void @do_SUBST(ptr noundef nonnull %9, ptr noundef %118)
  %119 = load ptr, ptr %7, align 8, !tbaa !16
  %120 = load ptr, ptr %9, align 8, !tbaa !16
  %121 = load i32, ptr %6, align 8
  %122 = and i32 %121, 65535
  br label %123

123:                                              ; preds = %115, %41, %38
  %124 = phi i32 [ %12, %38 ], [ %12, %41 ], [ %122, %115 ]
  %125 = phi ptr [ %10, %38 ], [ %10, %41 ], [ %120, %115 ]
  %126 = phi ptr [ %8, %38 ], [ %8, %41 ], [ %119, %115 ]
  %127 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %6, ptr noundef null) #25
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %205, label %129

129:                                              ; preds = %123
  %130 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %131 = icmp eq ptr %126, %130
  br i1 %131, label %192, label %132

132:                                              ; preds = %129
  %133 = load i32, ptr %126, align 8
  %134 = and i32 %133, 65535
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %135
  %137 = load i32, ptr %136, align 4, !tbaa !16
  %138 = icmp eq i32 %137, 9
  br i1 %138, label %139, label %148

139:                                              ; preds = %132
  %140 = load i32, ptr %125, align 8
  %141 = and i32 %140, 65535
  %142 = icmp ne i32 %141, 30
  %143 = icmp ne ptr %125, %130
  %144 = select i1 %142, i1 %143, i1 false
  %145 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %146 = icmp eq ptr %126, %145
  %147 = select i1 %144, i1 true, i1 %146
  br i1 %147, label %192, label %157

148:                                              ; preds = %132
  %149 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %150 = icmp eq ptr %126, %149
  br i1 %150, label %192, label %151

151:                                              ; preds = %148
  %152 = and i32 %137, -2
  %153 = icmp eq i32 %152, 8
  br i1 %153, label %154, label %164

154:                                              ; preds = %151
  %155 = load i32, ptr %125, align 8
  %156 = and i32 %155, 65535
  br label %157

157:                                              ; preds = %154, %139
  %158 = phi i32 [ %156, %154 ], [ %141, %139 ]
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %159
  %161 = load i32, ptr %160, align 4, !tbaa !16
  %162 = and i32 %161, -2
  %163 = icmp eq i32 %162, 8
  br i1 %163, label %164, label %192

164:                                              ; preds = %157, %151
  %165 = icmp eq i32 %134, 39
  br i1 %165, label %166, label %184

166:                                              ; preds = %164
  %167 = getelementptr inbounds %struct.rtx_def, ptr %126, i64 0, i32 1
  %168 = load ptr, ptr %167, align 8, !tbaa !16
  %169 = load i32, ptr %168, align 8
  %170 = and i32 %169, 65535
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %171
  %173 = load i32, ptr %172, align 4, !tbaa !16
  %174 = and i32 %173, -2
  %175 = icmp eq i32 %174, 8
  br i1 %175, label %176, label %184

176:                                              ; preds = %166
  %177 = load i32, ptr %125, align 8
  %178 = and i32 %177, 65535
  %179 = zext i32 %178 to i64
  %180 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %179
  %181 = load i32, ptr %180, align 4, !tbaa !16
  %182 = and i32 %181, -2
  %183 = icmp eq i32 %182, 8
  br i1 %183, label %184, label %192

184:                                              ; preds = %176, %166, %164
  %185 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %126, ptr noundef %125) #25
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %192

187:                                              ; preds = %184
  %188 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %189 = load ptr, ptr %188, align 8, !tbaa !16
  %190 = tail call i32 @rtx_equal_p(ptr noundef %125, ptr noundef %189) #25
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %205, label %192

192:                                              ; preds = %139, %187, %184, %176, %157, %148, %129
  %193 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %6, ptr noundef null) #25
  %194 = load i32, ptr %6, align 8
  %195 = lshr i32 %194, 16
  %196 = and i32 %195, 255
  %197 = tail call ptr @reversed_comparison(ptr noundef nonnull %6, i32 noundef %196) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %5, ptr noundef %197)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %125)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %9, ptr noundef %126)
  %198 = load ptr, ptr %5, align 8, !tbaa !16
  %199 = load i32, ptr %198, align 8
  %200 = and i32 %199, 65535
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %201
  %203 = load i32, ptr %202, align 4, !tbaa !16
  %204 = icmp ult i32 %203, 2
  br label %205

205:                                              ; preds = %37, %192, %187, %123
  %206 = phi i1 [ %204, %192 ], [ true, %187 ], [ true, %123 ], [ false, %37 ]
  %207 = phi i32 [ %200, %192 ], [ %124, %187 ], [ %124, %123 ], [ %12, %37 ]
  %208 = phi ptr [ %126, %192 ], [ %125, %187 ], [ %125, %123 ], [ %10, %37 ]
  %209 = phi ptr [ %125, %192 ], [ %126, %187 ], [ %126, %123 ], [ %8, %37 ]
  %210 = phi ptr [ %198, %192 ], [ %6, %187 ], [ %6, %123 ], [ %6, %37 ]
  %211 = tail call i32 @rtx_equal_p(ptr noundef %209, ptr noundef %208) #25
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %216, label %213

213:                                              ; preds = %205
  %214 = tail call i32 @side_effects_p(ptr noundef nonnull %210) #25
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %702, label %216

216:                                              ; preds = %213, %205
  switch i32 %207, label %289 [
    i32 81, label %217
    i32 80, label %253
  ]

217:                                              ; preds = %216
  %218 = tail call i32 @side_effects_p(ptr noundef nonnull %210) #25
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %289

220:                                              ; preds = %217
  %221 = zext i32 %4 to i64
  %222 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %221
  %223 = load i8, ptr %222, align 1, !tbaa !16
  switch i8 %223, label %243 [
    i8 8, label %224
    i8 9, label %224
    i8 11, label %224
    i8 17, label %224
  ]

224:                                              ; preds = %220, %220, %220, %220
  %225 = and i8 %223, -2
  %226 = icmp eq i8 %225, 8
  br i1 %226, label %231, label %227

227:                                              ; preds = %224
  %228 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %221
  %229 = load i8, ptr %228, align 1, !tbaa !16
  %230 = zext i8 %229 to i32
  br label %231

231:                                              ; preds = %227, %224
  %232 = phi i32 [ %4, %224 ], [ %230, %227 ]
  %233 = add nsw i32 %232, -38
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %234
  %236 = load ptr, ptr %235, align 8, !tbaa !5
  %237 = getelementptr inbounds %struct.real_format, ptr %236, i64 0, i32 11
  %238 = load i8, ptr %237, align 2, !tbaa !210
  %239 = icmp eq i8 %238, 0
  %240 = load i32, ptr @flag_finite_math_only, align 4
  %241 = icmp ne i32 %240, 0
  %242 = select i1 %239, i1 true, i1 %241
  br i1 %242, label %243, label %289

243:                                              ; preds = %220, %231
  %244 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %245 = load ptr, ptr %244, align 8, !tbaa !16
  %246 = tail call i32 @rtx_equal_p(ptr noundef %245, ptr noundef %208) #25
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %289, label %248

248:                                              ; preds = %243
  %249 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %250 = load ptr, ptr %249, align 8, !tbaa !16
  %251 = tail call i32 @rtx_equal_p(ptr noundef %250, ptr noundef %209) #25
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %289, label %702

253:                                              ; preds = %216
  %254 = tail call i32 @side_effects_p(ptr noundef nonnull %210) #25
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %289

256:                                              ; preds = %253
  %257 = zext i32 %4 to i64
  %258 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %257
  %259 = load i8, ptr %258, align 1, !tbaa !16
  switch i8 %259, label %279 [
    i8 8, label %260
    i8 9, label %260
    i8 11, label %260
    i8 17, label %260
  ]

260:                                              ; preds = %256, %256, %256, %256
  %261 = and i8 %259, -2
  %262 = icmp eq i8 %261, 8
  br i1 %262, label %267, label %263

263:                                              ; preds = %260
  %264 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %257
  %265 = load i8, ptr %264, align 1, !tbaa !16
  %266 = zext i8 %265 to i32
  br label %267

267:                                              ; preds = %263, %260
  %268 = phi i32 [ %4, %260 ], [ %266, %263 ]
  %269 = add nsw i32 %268, -38
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %270
  %272 = load ptr, ptr %271, align 8, !tbaa !5
  %273 = getelementptr inbounds %struct.real_format, ptr %272, i64 0, i32 11
  %274 = load i8, ptr %273, align 2, !tbaa !210
  %275 = icmp eq i8 %274, 0
  %276 = load i32, ptr @flag_finite_math_only, align 4
  %277 = icmp ne i32 %276, 0
  %278 = select i1 %275, i1 true, i1 %277
  br i1 %278, label %279, label %289

279:                                              ; preds = %256, %267
  %280 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %281 = load ptr, ptr %280, align 8, !tbaa !16
  %282 = tail call i32 @rtx_equal_p(ptr noundef %281, ptr noundef %209) #25
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %289, label %284

284:                                              ; preds = %279
  %285 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %286 = load ptr, ptr %285, align 8, !tbaa !16
  %287 = tail call i32 @rtx_equal_p(ptr noundef %286, ptr noundef %208) #25
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %702

289:                                              ; preds = %216, %217, %243, %248, %231, %253, %279, %284, %267
  %290 = phi i1 [ true, %253 ], [ true, %279 ], [ true, %284 ], [ true, %267 ], [ false, %231 ], [ false, %248 ], [ false, %243 ], [ false, %217 ], [ false, %216 ]
  %291 = zext i32 %4 to i64
  %292 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %291
  %293 = load i8, ptr %292, align 1, !tbaa !16
  %294 = icmp eq i8 %293, 2
  %295 = select i1 %294, i1 %206, i1 false
  br i1 %295, label %296, label %324

296:                                              ; preds = %289
  %297 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %298 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %299 = load ptr, ptr %298, align 8, !tbaa !16
  %300 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %301 = icmp eq ptr %299, %300
  br i1 %301, label %302, label %325

302:                                              ; preds = %296
  %303 = load i32, ptr %208, align 8
  %304 = and i32 %303, 65535
  %305 = icmp eq i32 %304, 51
  br i1 %305, label %306, label %325

306:                                              ; preds = %302
  %307 = getelementptr inbounds %struct.rtx_def, ptr %208, i64 0, i32 1
  %308 = load ptr, ptr %307, align 8, !tbaa !16
  %309 = tail call i32 @rtx_equal_p(ptr noundef %209, ptr noundef %308) #25
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %325, label %311

311:                                              ; preds = %306
  %312 = load ptr, ptr %297, align 8, !tbaa !16
  %313 = tail call i32 @rtx_equal_p(ptr noundef %209, ptr noundef %312) #25
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %325, label %315

315:                                              ; preds = %311
  %316 = tail call i32 @side_effects_p(ptr noundef %209) #25
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %325

318:                                              ; preds = %315
  switch i32 %207, label %325 [
    i32 83, label %319
    i32 82, label %319
    i32 85, label %321
    i32 84, label %321
  ]

319:                                              ; preds = %318, %318
  %320 = tail call ptr @simplify_gen_unary(i32 noundef 111, i32 noundef %4, ptr noundef %209, i32 noundef %4) #25
  br label %702

321:                                              ; preds = %318, %318
  %322 = tail call ptr @simplify_gen_unary(i32 noundef 111, i32 noundef %4, ptr noundef %209, i32 noundef %4) #25
  %323 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %4, ptr noundef %322, i32 noundef %4) #25
  br label %702

324:                                              ; preds = %289
  switch i8 %293, label %325 [
    i8 8, label %332
    i8 9, label %332
    i8 11, label %332
  ]

325:                                              ; preds = %296, %302, %306, %311, %315, %318, %324
  %326 = icmp eq i8 %293, 17
  %327 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %328 = icmp eq i32 %327, 0
  %329 = select i1 %326, i1 %328, i1 false
  %330 = xor i1 %206, true
  %331 = select i1 %329, i1 true, i1 %330
  br i1 %331, label %358, label %336

332:                                              ; preds = %324, %324, %324
  %333 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !20
  %334 = icmp ne i32 %333, 0
  %335 = select i1 %334, i1 %206, i1 false
  br i1 %335, label %336, label %628

336:                                              ; preds = %325, %332
  %337 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %338 = load ptr, ptr %337, align 8, !tbaa !16
  %339 = tail call i32 @rtx_equal_p(ptr noundef %338, ptr noundef %209) #25
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %358, label %341

341:                                              ; preds = %336
  %342 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %343 = load ptr, ptr %342, align 8, !tbaa !16
  %344 = tail call i32 @rtx_equal_p(ptr noundef %343, ptr noundef %208) #25
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %358, label %346

346:                                              ; preds = %341
  %347 = tail call i32 @side_effects_p(ptr noundef nonnull %210) #25
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %358

349:                                              ; preds = %346
  switch i32 %207, label %358 [
    i32 82, label %350
    i32 83, label %350
    i32 84, label %352
    i32 85, label %352
    i32 86, label %354
    i32 87, label %354
    i32 88, label %356
    i32 89, label %356
  ]

350:                                              ; preds = %349, %349
  %351 = tail call ptr @simplify_gen_binary(i32 noundef 71, i32 noundef %4, ptr noundef %209, ptr noundef %208) #25
  br label %702

352:                                              ; preds = %349, %349
  %353 = tail call ptr @simplify_gen_binary(i32 noundef 70, i32 noundef %4, ptr noundef %209, ptr noundef %208) #25
  br label %702

354:                                              ; preds = %349, %349
  %355 = tail call ptr @simplify_gen_binary(i32 noundef 73, i32 noundef %4, ptr noundef %209, ptr noundef %208) #25
  br label %702

356:                                              ; preds = %349, %349
  %357 = tail call ptr @simplify_gen_binary(i32 noundef 72, i32 noundef %4, ptr noundef %209, ptr noundef %208) #25
  br label %702

358:                                              ; preds = %325, %349, %346, %341, %336
  %359 = and i1 %206, %294
  br i1 %359, label %360, label %628

360:                                              ; preds = %358
  %361 = tail call i32 @side_effects_p(ptr noundef nonnull %0) #25
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %628

363:                                              ; preds = %360
  %364 = tail call fastcc ptr @make_compound_operation(ptr noundef %209, i32 noundef 23)
  %365 = tail call fastcc ptr @make_compound_operation(ptr noundef %208, i32 noundef 23)
  %366 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %367 = load ptr, ptr %366, align 8, !tbaa !16
  %368 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %369 = load ptr, ptr %368, align 8, !tbaa !16
  %370 = load i32, ptr %364, align 8
  %371 = trunc i32 %370 to i16
  switch i16 %371, label %382 [
    i16 49, label %372
    i16 50, label %372
    i16 62, label %372
    i16 63, label %372
    i16 65, label %372
    i16 68, label %372
    i16 67, label %372
  ]

372:                                              ; preds = %363, %363, %363, %363, %363, %363, %363
  %373 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  %374 = load ptr, ptr %373, align 8, !tbaa !16
  %375 = tail call i32 @rtx_equal_p(ptr noundef %374, ptr noundef %365) #25
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %377, label %380

377:                                              ; preds = %372
  %378 = load i32, ptr %364, align 8
  %379 = trunc i32 %378 to i16
  br label %382

380:                                              ; preds = %372
  %381 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %602

382:                                              ; preds = %377, %363
  %383 = phi i16 [ %379, %377 ], [ %371, %363 ]
  %384 = phi i32 [ %378, %377 ], [ %370, %363 ]
  switch i16 %383, label %394 [
    i16 49, label %385
    i16 62, label %385
    i16 63, label %385
  ]

385:                                              ; preds = %382, %382, %382
  %386 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1, i32 0, i32 0, i64 1
  %387 = load ptr, ptr %386, align 8, !tbaa !16
  %388 = tail call i32 @rtx_equal_p(ptr noundef %387, ptr noundef %365) #25
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %392

390:                                              ; preds = %385
  %391 = load i32, ptr %364, align 8
  br label %394

392:                                              ; preds = %385
  %393 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  br label %602

394:                                              ; preds = %390, %382
  %395 = phi i32 [ %391, %390 ], [ %384, %382 ]
  %396 = and i32 %395, 65535
  %397 = icmp eq i32 %396, 98
  br i1 %397, label %398, label %446

398:                                              ; preds = %394
  %399 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  %400 = load ptr, ptr %399, align 8, !tbaa !16
  %401 = load i32, ptr %400, align 8
  %402 = trunc i32 %401 to i16
  switch i16 %402, label %446 [
    i16 49, label %403
    i16 50, label %403
    i16 62, label %403
    i16 63, label %403
    i16 65, label %403
    i16 68, label %403
    i16 67, label %403
  ]

403:                                              ; preds = %398, %398, %398, %398, %398, %398, %398
  %404 = getelementptr inbounds %struct.rtx_def, ptr %400, i64 0, i32 1
  %405 = load ptr, ptr %404, align 8, !tbaa !16
  %406 = load i32, ptr %405, align 8
  %407 = and i32 %406, 65535
  %408 = icmp eq i32 %407, 39
  br i1 %408, label %409, label %446

409:                                              ; preds = %403
  %410 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %405) #25
  %411 = icmp eq i32 %410, 0
  br i1 %411, label %446, label %412

412:                                              ; preds = %409
  %413 = load ptr, ptr %399, align 8, !tbaa !16
  %414 = getelementptr inbounds %struct.rtx_def, ptr %413, i64 0, i32 1
  %415 = load ptr, ptr %414, align 8, !tbaa !16
  %416 = getelementptr inbounds %struct.rtx_def, ptr %415, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !16
  %418 = tail call i32 @rtx_equal_p(ptr noundef %417, ptr noundef %365) #25
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %446, label %420

420:                                              ; preds = %412
  %421 = load i32, ptr %365, align 8
  %422 = lshr i32 %421, 16
  %423 = and i32 %422, 255
  %424 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %365, i32 noundef %423) #25
  %425 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %291
  %426 = load i8, ptr %425, align 1, !tbaa !16
  %427 = zext i8 %426 to i32
  %428 = load ptr, ptr %399, align 8, !tbaa !16
  %429 = getelementptr inbounds %struct.rtx_def, ptr %428, i64 0, i32 1
  %430 = load ptr, ptr %429, align 8, !tbaa !16
  %431 = load i32, ptr %430, align 8
  %432 = lshr i32 %431, 16
  %433 = and i32 %432, 255
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %434
  %436 = load i8, ptr %435, align 1, !tbaa !16
  %437 = zext i8 %436 to i32
  %438 = sub nsw i32 %427, %437
  %439 = shl nsw i32 %438, 3
  %440 = icmp ugt i32 %424, %439
  br i1 %440, label %441, label %446

441:                                              ; preds = %420
  %442 = getelementptr inbounds %struct.rtx_def, ptr %428, i64 0, i32 1, i32 0, i32 0, i64 1
  %443 = load i32, ptr %428, align 8
  %444 = lshr i32 %443, 16
  %445 = and i32 %444, 255
  br label %606

446:                                              ; preds = %398, %420, %412, %409, %403, %394
  %447 = load i32, ptr %364, align 8
  %448 = and i32 %447, 65535
  %449 = icmp eq i32 %448, 98
  br i1 %449, label %450, label %498

450:                                              ; preds = %446
  %451 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  %452 = load ptr, ptr %451, align 8, !tbaa !16
  %453 = load i32, ptr %452, align 8
  %454 = trunc i32 %453 to i16
  switch i16 %454, label %498 [
    i16 49, label %455
    i16 62, label %455
    i16 63, label %455
  ]

455:                                              ; preds = %450, %450, %450
  %456 = getelementptr inbounds %struct.rtx_def, ptr %452, i64 0, i32 1, i32 0, i32 0, i64 1
  %457 = load ptr, ptr %456, align 8, !tbaa !16
  %458 = load i32, ptr %457, align 8
  %459 = and i32 %458, 65535
  %460 = icmp eq i32 %459, 39
  br i1 %460, label %461, label %498

461:                                              ; preds = %455
  %462 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %457) #25
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %498, label %464

464:                                              ; preds = %461
  %465 = load ptr, ptr %451, align 8, !tbaa !16
  %466 = getelementptr inbounds %struct.rtx_def, ptr %465, i64 0, i32 1, i32 0, i32 0, i64 1
  %467 = load ptr, ptr %466, align 8, !tbaa !16
  %468 = getelementptr inbounds %struct.rtx_def, ptr %467, i64 0, i32 1
  %469 = load ptr, ptr %468, align 8, !tbaa !16
  %470 = tail call i32 @rtx_equal_p(ptr noundef %469, ptr noundef %365) #25
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %498, label %472

472:                                              ; preds = %464
  %473 = load i32, ptr %365, align 8
  %474 = lshr i32 %473, 16
  %475 = and i32 %474, 255
  %476 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %365, i32 noundef %475) #25
  %477 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %291
  %478 = load i8, ptr %477, align 1, !tbaa !16
  %479 = zext i8 %478 to i32
  %480 = load ptr, ptr %451, align 8, !tbaa !16
  %481 = getelementptr inbounds %struct.rtx_def, ptr %480, i64 0, i32 1, i32 0, i32 0, i64 1
  %482 = load ptr, ptr %481, align 8, !tbaa !16
  %483 = load i32, ptr %482, align 8
  %484 = lshr i32 %483, 16
  %485 = and i32 %484, 255
  %486 = zext i32 %485 to i64
  %487 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %486
  %488 = load i8, ptr %487, align 1, !tbaa !16
  %489 = zext i8 %488 to i32
  %490 = sub nsw i32 %479, %489
  %491 = shl nsw i32 %490, 3
  %492 = icmp ugt i32 %476, %491
  br i1 %492, label %493, label %498

493:                                              ; preds = %472
  %494 = getelementptr inbounds %struct.rtx_def, ptr %480, i64 0, i32 1
  %495 = load i32, ptr %480, align 8
  %496 = lshr i32 %495, 16
  %497 = and i32 %496, 255
  br label %606

498:                                              ; preds = %450, %472, %464, %461, %455, %446
  %499 = load i32, ptr %364, align 8
  %500 = and i32 %499, 65535
  %501 = icmp eq i32 %500, 99
  br i1 %501, label %502, label %550

502:                                              ; preds = %498
  %503 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  %504 = load ptr, ptr %503, align 8, !tbaa !16
  %505 = load i32, ptr %504, align 8
  %506 = trunc i32 %505 to i16
  switch i16 %506, label %550 [
    i16 49, label %507
    i16 50, label %507
    i16 62, label %507
    i16 63, label %507
    i16 65, label %507
    i16 68, label %507
    i16 67, label %507
  ]

507:                                              ; preds = %502, %502, %502, %502, %502, %502, %502
  %508 = getelementptr inbounds %struct.rtx_def, ptr %504, i64 0, i32 1
  %509 = load ptr, ptr %508, align 8, !tbaa !16
  %510 = load i32, ptr %509, align 8
  %511 = and i32 %510, 65535
  %512 = icmp eq i32 %511, 39
  br i1 %512, label %513, label %550

513:                                              ; preds = %507
  %514 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %291
  %515 = load i8, ptr %514, align 1, !tbaa !16
  %516 = icmp ult i8 %515, 9
  br i1 %516, label %517, label %550

517:                                              ; preds = %513
  %518 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %509) #25
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %550, label %520

520:                                              ; preds = %517
  %521 = load ptr, ptr %503, align 8, !tbaa !16
  %522 = getelementptr inbounds %struct.rtx_def, ptr %521, i64 0, i32 1
  %523 = load ptr, ptr %522, align 8, !tbaa !16
  %524 = getelementptr inbounds %struct.rtx_def, ptr %523, i64 0, i32 1
  %525 = load ptr, ptr %524, align 8, !tbaa !16
  %526 = tail call i32 @rtx_equal_p(ptr noundef %525, ptr noundef %365) #25
  %527 = icmp eq i32 %526, 0
  br i1 %527, label %550, label %528

528:                                              ; preds = %520
  %529 = load i32, ptr %365, align 8
  %530 = lshr i32 %529, 16
  %531 = and i32 %530, 255
  %532 = tail call i64 @nonzero_bits(ptr noundef nonnull %365, i32 noundef %531) #25
  %533 = load ptr, ptr %503, align 8, !tbaa !16
  %534 = getelementptr inbounds %struct.rtx_def, ptr %533, i64 0, i32 1
  %535 = load ptr, ptr %534, align 8, !tbaa !16
  %536 = load i32, ptr %535, align 8
  %537 = lshr i32 %536, 16
  %538 = and i32 %537, 255
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %539
  %541 = load i64, ptr %540, align 8, !tbaa !83
  %542 = xor i64 %541, -1
  %543 = and i64 %532, %542
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %550

545:                                              ; preds = %528
  %546 = getelementptr inbounds %struct.rtx_def, ptr %533, i64 0, i32 1, i32 0, i32 0, i64 1
  %547 = load i32, ptr %533, align 8
  %548 = lshr i32 %547, 16
  %549 = and i32 %548, 255
  br label %606

550:                                              ; preds = %502, %528, %520, %517, %513, %507, %498
  %551 = load i32, ptr %364, align 8
  %552 = and i32 %551, 65535
  %553 = icmp eq i32 %552, 99
  br i1 %553, label %554, label %627

554:                                              ; preds = %550
  %555 = getelementptr inbounds %struct.rtx_def, ptr %364, i64 0, i32 1
  %556 = load ptr, ptr %555, align 8, !tbaa !16
  %557 = load i32, ptr %556, align 8
  %558 = trunc i32 %557 to i16
  switch i16 %558, label %627 [
    i16 49, label %559
    i16 62, label %559
    i16 63, label %559
  ]

559:                                              ; preds = %554, %554, %554
  %560 = getelementptr inbounds %struct.rtx_def, ptr %556, i64 0, i32 1, i32 0, i32 0, i64 1
  %561 = load ptr, ptr %560, align 8, !tbaa !16
  %562 = load i32, ptr %561, align 8
  %563 = and i32 %562, 65535
  %564 = icmp eq i32 %563, 39
  br i1 %564, label %565, label %627

565:                                              ; preds = %559
  %566 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %291
  %567 = load i8, ptr %566, align 1, !tbaa !16
  %568 = icmp ult i8 %567, 9
  br i1 %568, label %569, label %627

569:                                              ; preds = %565
  %570 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %561) #25
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %627, label %572

572:                                              ; preds = %569
  %573 = load ptr, ptr %555, align 8, !tbaa !16
  %574 = getelementptr inbounds %struct.rtx_def, ptr %573, i64 0, i32 1, i32 0, i32 0, i64 1
  %575 = load ptr, ptr %574, align 8, !tbaa !16
  %576 = getelementptr inbounds %struct.rtx_def, ptr %575, i64 0, i32 1
  %577 = load ptr, ptr %576, align 8, !tbaa !16
  %578 = tail call i32 @rtx_equal_p(ptr noundef %577, ptr noundef %365) #25
  %579 = icmp eq i32 %578, 0
  br i1 %579, label %627, label %580

580:                                              ; preds = %572
  %581 = load i32, ptr %365, align 8
  %582 = lshr i32 %581, 16
  %583 = and i32 %582, 255
  %584 = tail call i64 @nonzero_bits(ptr noundef nonnull %365, i32 noundef %583) #25
  %585 = load ptr, ptr %555, align 8, !tbaa !16
  %586 = getelementptr inbounds %struct.rtx_def, ptr %585, i64 0, i32 1, i32 0, i32 0, i64 1
  %587 = load ptr, ptr %586, align 8, !tbaa !16
  %588 = load i32, ptr %587, align 8
  %589 = lshr i32 %588, 16
  %590 = and i32 %589, 255
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %591
  %593 = load i64, ptr %592, align 8, !tbaa !83
  %594 = xor i64 %593, -1
  %595 = and i64 %584, %594
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %597, label %627

597:                                              ; preds = %580
  %598 = getelementptr inbounds %struct.rtx_def, ptr %585, i64 0, i32 1
  %599 = load i32, ptr %585, align 8
  %600 = lshr i32 %599, 16
  %601 = and i32 %600, 255
  br label %606

602:                                              ; preds = %392, %380
  %603 = phi ptr [ %381, %380 ], [ %393, %392 ]
  %604 = load i32, ptr %364, align 8
  %605 = icmp eq ptr %365, null
  br i1 %605, label %627, label %606

606:                                              ; preds = %597, %545, %493, %441, %602
  %607 = phi ptr [ %603, %602 ], [ %598, %597 ], [ %546, %545 ], [ %494, %493 ], [ %442, %441 ]
  %608 = phi i32 [ %4, %602 ], [ %601, %597 ], [ %549, %545 ], [ %497, %493 ], [ %445, %441 ]
  %609 = phi i32 [ 0, %602 ], [ 99, %597 ], [ 99, %545 ], [ 98, %493 ], [ 98, %441 ]
  %610 = phi i1 [ true, %602 ], [ false, %597 ], [ false, %545 ], [ false, %493 ], [ false, %441 ]
  %611 = phi i32 [ %604, %602 ], [ %599, %597 ], [ %547, %545 ], [ %495, %493 ], [ %443, %441 ]
  %612 = and i32 %611, 65535
  %613 = load ptr, ptr %607, align 8, !tbaa !16
  %614 = tail call ptr @simplify_gen_relational(i32 noundef %207, i32 noundef %608, i32 noundef 0, ptr noundef %367, ptr noundef %369) #25
  %615 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %616 = tail call fastcc ptr @subst(ptr noundef %614, ptr noundef %615, ptr noundef %615, i32 noundef 0, i32 noundef 0)
  %617 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  %618 = tail call ptr @simplify_gen_binary(i32 noundef 52, i32 noundef %608, ptr noundef %613, ptr noundef %617) #25
  %619 = tail call ptr @simplify_gen_binary(i32 noundef 52, i32 noundef %608, ptr noundef %616, ptr noundef %618) #25
  %620 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  %621 = tail call fastcc ptr @subst(ptr noundef %619, ptr noundef %620, ptr noundef %620, i32 noundef 0, i32 noundef 0)
  %622 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %623 = tail call ptr %622(i32 noundef %608, ptr noundef nonnull %365) #25
  %624 = tail call ptr @simplify_gen_binary(i32 noundef %612, i32 noundef %608, ptr noundef %623, ptr noundef %621) #25
  br i1 %610, label %702, label %625

625:                                              ; preds = %606
  %626 = tail call ptr @simplify_gen_unary(i32 noundef %609, i32 noundef %4, ptr noundef %624, i32 noundef %608) #25
  br label %702

627:                                              ; preds = %602, %580, %572, %569, %565, %559, %550, %554
  br i1 %290, label %629, label %702

628:                                              ; preds = %332, %358, %360
  br i1 %290, label %629, label %702

629:                                              ; preds = %627, %628
  %630 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1
  %631 = getelementptr inbounds %struct.rtx_def, ptr %210, i64 0, i32 1, i32 0, i32 0, i64 1
  %632 = load ptr, ptr %631, align 8, !tbaa !16
  %633 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %634 = icmp eq ptr %632, %633
  %635 = icmp eq ptr %208, %633
  %636 = and i1 %634, %635
  br i1 %636, label %637, label %670

637:                                              ; preds = %629
  %638 = load i32, ptr %209, align 8
  %639 = and i32 %638, 65535
  %640 = icmp eq i32 %639, 30
  br i1 %640, label %641, label %670

641:                                              ; preds = %637
  %642 = load ptr, ptr %630, align 8, !tbaa !16
  %643 = tail call i64 @nonzero_bits(ptr noundef %642, i32 noundef %4) #25
  %644 = icmp eq i64 %643, 1
  br i1 %644, label %645, label %650

645:                                              ; preds = %641
  %646 = getelementptr inbounds %struct.rtx_def, ptr %209, i64 0, i32 1
  %647 = load i64, ptr %646, align 8, !tbaa !16
  %648 = tail call i32 @exact_log2(i64 noundef %647) #25
  %649 = icmp sgt i32 %648, -1
  br i1 %649, label %664, label %650

650:                                              ; preds = %645, %641
  %651 = load ptr, ptr %630, align 8, !tbaa !16
  %652 = tail call i32 @num_sign_bit_copies(ptr noundef %651, i32 noundef %4) #25
  %653 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %291
  %654 = load i8, ptr %653, align 1, !tbaa !16
  %655 = zext i8 %654 to i32
  %656 = shl nuw nsw i32 %655, 3
  %657 = icmp eq i32 %652, %656
  br i1 %657, label %658, label %670

658:                                              ; preds = %650
  %659 = getelementptr inbounds %struct.rtx_def, ptr %209, i64 0, i32 1
  %660 = load i64, ptr %659, align 8, !tbaa !16
  %661 = sub nsw i64 0, %660
  %662 = tail call i32 @exact_log2(i64 noundef %661) #25
  %663 = icmp sgt i32 %662, -1
  br i1 %663, label %664, label %670

664:                                              ; preds = %658, %645
  %665 = phi i32 [ %648, %645 ], [ %662, %658 ]
  %666 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %667 = load ptr, ptr %630, align 8, !tbaa !16
  %668 = tail call ptr %666(i32 noundef %4, ptr noundef %667) #25
  %669 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %4, ptr noundef %668, i32 noundef %665)
  br label %702

670:                                              ; preds = %658, %650, %637, %629
  br i1 %290, label %671, label %702

671:                                              ; preds = %670
  %672 = load ptr, ptr %631, align 8, !tbaa !16
  %673 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %674 = icmp eq ptr %672, %673
  %675 = icmp eq ptr %208, %673
  %676 = and i1 %674, %675
  br i1 %676, label %677, label %702

677:                                              ; preds = %671
  %678 = load i32, ptr %209, align 8
  %679 = and i32 %678, 65535
  %680 = icmp eq i32 %679, 30
  br i1 %680, label %681, label %702

681:                                              ; preds = %677
  %682 = load ptr, ptr %630, align 8, !tbaa !16
  %683 = load i32, ptr %682, align 8
  %684 = lshr i32 %683, 16
  %685 = and i32 %684, 255
  %686 = icmp eq i32 %685, %4
  br i1 %686, label %687, label %702

687:                                              ; preds = %681
  %688 = getelementptr inbounds %struct.rtx_def, ptr %209, i64 0, i32 1
  %689 = load i64, ptr %688, align 8, !tbaa !16
  %690 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %291
  %691 = load i64, ptr %690, align 8, !tbaa !83
  %692 = and i64 %691, %689
  %693 = tail call i64 @nonzero_bits(ptr noundef nonnull %682, i32 noundef %4) #25
  %694 = icmp eq i64 %692, %693
  br i1 %694, label %695, label %702

695:                                              ; preds = %687
  %696 = load i64, ptr %688, align 8, !tbaa !16
  %697 = and i64 %696, %691
  %698 = tail call i32 @exact_log2(i64 noundef %697) #25
  %699 = icmp sgt i32 %698, -1
  br i1 %699, label %700, label %702

700:                                              ; preds = %695
  %701 = load ptr, ptr %630, align 8, !tbaa !16
  br label %702

702:                                              ; preds = %625, %606, %627, %670, %671, %677, %681, %687, %695, %628, %284, %248, %213, %34, %700, %664, %356, %354, %352, %350, %321, %319, %23
  %703 = phi ptr [ %28, %23 ], [ %669, %664 ], [ %701, %700 ], [ %0, %627 ], [ %357, %356 ], [ %355, %354 ], [ %353, %352 ], [ %351, %350 ], [ %323, %321 ], [ %320, %319 ], [ %35, %34 ], [ %209, %213 ], [ %208, %248 ], [ %209, %284 ], [ %0, %628 ], [ %0, %695 ], [ %0, %687 ], [ %0, %681 ], [ %0, %677 ], [ %0, %671 ], [ %0, %670 ], [ %626, %625 ], [ %624, %606 ]
  ret ptr %703
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_set(ptr noundef %0) unnamed_addr #9 {
  %2 = alloca ptr, align 8
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !16
  %9 = load ptr, ptr %6, align 8, !tbaa !16
  %10 = load i32, ptr %8, align 8
  %11 = lshr i32 %10, 16
  %12 = and i32 %11, 255
  %13 = icmp eq i32 %12, 0
  %14 = load i32, ptr %9, align 8
  %15 = lshr i32 %14, 16
  %16 = and i32 %15, 255
  %17 = select i1 %13, i32 %16, i32 %12
  %18 = and i32 %14, 65535
  %19 = icmp eq i32 %18, 36
  %20 = and i32 %10, 65535
  %21 = icmp eq i32 %20, 27
  %22 = and i1 %21, %19
  br i1 %22, label %866, label %23

23:                                               ; preds = %1
  %24 = zext i32 %17 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !16
  switch i8 %26, label %34 [
    i8 2, label %27
    i8 1, label %41
  ]

27:                                               ; preds = %23
  %28 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %24
  %29 = load i8, ptr %28, align 1, !tbaa !16
  %30 = icmp ult i8 %29, 9
  br i1 %30, label %31, label %34

31:                                               ; preds = %27
  %32 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %8, i32 noundef %17, i64 noundef -1, i32 noundef 0)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %32)
  %33 = load i32, ptr %32, align 8
  br label %34

34:                                               ; preds = %23, %27, %31
  %35 = phi i32 [ %10, %27 ], [ %33, %31 ], [ %10, %23 ]
  %36 = phi ptr [ %8, %27 ], [ %32, %31 ], [ %8, %23 ]
  %37 = and i32 %35, 65535
  %38 = icmp eq i32 %37, 48
  br i1 %38, label %39, label %299

39:                                               ; preds = %34
  %40 = load i32, ptr %9, align 8
  br label %41

41:                                               ; preds = %39, %23
  %42 = phi i32 [ %40, %39 ], [ %14, %23 ]
  %43 = phi ptr [ %36, %39 ], [ %8, %23 ]
  %44 = load ptr, ptr @subst_insn, align 8, !tbaa !5
  %45 = and i32 %42, 65535
  %46 = icmp eq i32 %45, 37
  br i1 %46, label %47, label %299

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1, i32 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !16
  %50 = getelementptr inbounds %struct.rtx_def, ptr %44, i64 0, i32 1, i32 0, i32 0, i64 2
  %51 = load ptr, ptr %50, align 8, !tbaa !16
  %52 = icmp eq ptr %51, null
  br i1 %52, label %299, label %53

53:                                               ; preds = %47, %83
  %54 = phi ptr [ %85, %83 ], [ %51, %47 ]
  %55 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1
  %56 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = icmp eq ptr %57, %49
  br i1 %58, label %59, label %299

59:                                               ; preds = %53
  %60 = load i32, ptr %54, align 8
  %61 = and i32 %60, 65535
  %62 = add nsw i32 %61, -7
  %63 = icmp ult i32 %62, 4
  br i1 %63, label %64, label %83

64:                                               ; preds = %59
  %65 = tail call i32 @dead_or_set_p(ptr noundef nonnull %54, ptr noundef nonnull %9) #25
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %83, label %67

67:                                               ; preds = %64
  %68 = load ptr, ptr @uid_log_links, align 8, !tbaa !5
  %69 = load i32, ptr %55, align 8, !tbaa !16
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds ptr, ptr %68, i64 %70
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = icmp eq ptr %72, null
  br i1 %73, label %83, label %78

74:                                               ; preds = %78
  %75 = getelementptr inbounds %struct.rtx_def, ptr %79, i64 0, i32 1, i32 0, i32 0, i64 1
  %76 = load ptr, ptr %75, align 8, !tbaa !16
  %77 = icmp eq ptr %76, null
  br i1 %77, label %83, label %78, !llvm.loop !162

78:                                               ; preds = %67, %74
  %79 = phi ptr [ %76, %74 ], [ %72, %67 ]
  %80 = getelementptr inbounds %struct.rtx_def, ptr %79, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !16
  %82 = icmp eq ptr %81, %44
  br i1 %82, label %87, label %74

83:                                               ; preds = %74, %67, %64, %59
  %84 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 0, i64 2
  %85 = load ptr, ptr %84, align 8, !tbaa !16
  %86 = icmp eq ptr %85, null
  br i1 %86, label %299, label %53, !llvm.loop !163

87:                                               ; preds = %78
  %88 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 1
  %89 = tail call fastcc ptr @find_single_use_1(ptr noundef nonnull %9, ptr noundef nonnull %88)
  %90 = icmp eq ptr %89, null
  br i1 %90, label %299, label %91

91:                                               ; preds = %87
  %92 = load ptr, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  %93 = icmp eq ptr %92, null
  %94 = icmp eq ptr %54, %92
  %95 = or i1 %93, %94
  br i1 %95, label %96, label %299

96:                                               ; preds = %91
  %97 = load ptr, ptr %89, align 8, !tbaa !5
  %98 = load i32, ptr %97, align 8
  %99 = and i32 %98, 65535
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %100
  %102 = load i32, ptr %101, align 4, !tbaa !16
  %103 = icmp ult i32 %102, 2
  br i1 %103, label %104, label %299

104:                                              ; preds = %96
  %105 = getelementptr inbounds %struct.rtx_def, ptr %97, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !16
  %107 = tail call i32 @rtx_equal_p(ptr noundef %106, ptr noundef nonnull %9) #25
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %299, label %109

109:                                              ; preds = %104
  %110 = load ptr, ptr %89, align 8, !tbaa !5
  %111 = load i32, ptr %110, align 8
  %112 = and i32 %111, 65535
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #25
  %113 = load i32, ptr %9, align 8
  %114 = lshr i32 %113, 16
  %115 = and i32 %114, 255
  %116 = load i32, ptr %43, align 8
  %117 = and i32 %116, 65535
  %118 = icmp eq i32 %117, 48
  br i1 %118, label %119, label %123

119:                                              ; preds = %109
  %120 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1
  %121 = load ptr, ptr %120, align 8, !tbaa !16
  %122 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %128

123:                                              ; preds = %109
  %124 = lshr i32 %116, 16
  %125 = and i32 %124, 255
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [87 x ptr], ptr @const_tiny_rtx, i64 0, i64 %126
  br label %128

128:                                              ; preds = %123, %119
  %129 = phi ptr [ %121, %119 ], [ %43, %123 ]
  %130 = phi ptr [ %122, %119 ], [ %127, %123 ]
  store ptr %129, ptr %2, align 8
  %131 = load ptr, ptr %130, align 8, !tbaa !16
  store ptr %131, ptr %3, align 8, !tbaa !5
  %132 = tail call ptr @simplify_relational_operation(i32 noundef %112, i32 noundef %115, i32 noundef 0, ptr noundef %129, ptr noundef %131) #25
  %133 = icmp eq ptr %132, null
  br i1 %133, label %157, label %134

134:                                              ; preds = %128
  %135 = load i32, ptr %132, align 8
  %136 = and i32 %135, 65535
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %137
  %139 = load i32, ptr %138, align 4, !tbaa !16
  %140 = icmp eq i32 %139, 9
  br i1 %140, label %146, label %141

141:                                              ; preds = %134
  %142 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %143 = load ptr, ptr %142, align 8, !tbaa !16
  store ptr %143, ptr %2, align 8, !tbaa !5
  %144 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %145 = load ptr, ptr %144, align 8, !tbaa !16
  store ptr %145, ptr %3, align 8, !tbaa !5
  br label %157

146:                                              ; preds = %134
  %147 = load ptr, ptr %88, align 8, !tbaa !16
  store ptr %54, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  tail call fastcc void @do_SUBST(ptr noundef nonnull %89, ptr noundef nonnull %132)
  %148 = load i32, ptr %147, align 8
  %149 = and i32 %148, 65535
  %150 = icmp eq i32 %149, 23
  br i1 %150, label %151, label %296

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.rtx_def, ptr %147, i64 0, i32 1, i32 0, i32 0, i64 1
  %153 = load ptr, ptr %152, align 8, !tbaa !16
  %154 = tail call ptr @simplify_rtx(ptr noundef %153) #25
  %155 = icmp eq ptr %154, null
  br i1 %155, label %296, label %156

156:                                              ; preds = %151
  tail call fastcc void @do_SUBST(ptr noundef nonnull %152, ptr noundef nonnull %154)
  br label %296

157:                                              ; preds = %128, %141
  %158 = phi i32 [ %136, %141 ], [ %112, %128 ]
  %159 = call fastcc i32 @simplify_comparison(i32 noundef %158, ptr noundef nonnull %2, ptr noundef nonnull %3)
  %160 = load ptr, ptr %2, align 8, !tbaa !5
  %161 = load i32, ptr %160, align 8
  %162 = lshr i32 %161, 16
  %163 = and i32 %162, 255
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %164
  %166 = load i8, ptr %165, align 1, !tbaa !16
  %167 = icmp eq i8 %166, 1
  br i1 %167, label %171, label %168

168:                                              ; preds = %157
  %169 = load ptr, ptr %3, align 8, !tbaa !5
  %170 = tail call i32 @ix86_cc_mode(i32 noundef %159, ptr noundef nonnull %160, ptr noundef %169) #25
  br label %171

171:                                              ; preds = %157, %168
  %172 = phi i32 [ %170, %168 ], [ %163, %157 ]
  %173 = load i32, ptr %9, align 8
  %174 = lshr i32 %173, 16
  %175 = and i32 %174, 255
  %176 = icmp eq i32 %172, %175
  br i1 %176, label %197, label %177

177:                                              ; preds = %171
  %178 = tail call fastcc zeroext i8 @can_change_dest_mode(ptr noundef nonnull %9, i32 noundef 0, i32 noundef %172), !range !113
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %197, label %180

180:                                              ; preds = %177
  %181 = getelementptr i8, ptr %9, i64 8
  %182 = load i32, ptr %181, align 8, !tbaa !16
  %183 = icmp ult i32 %182, 53
  br i1 %183, label %184, label %186

184:                                              ; preds = %180
  %185 = tail call ptr @gen_rtx_REG(i32 noundef %172, i32 noundef %182) #25
  br label %193

186:                                              ; preds = %180
  %187 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %188 = zext i32 %182 to i64
  %189 = getelementptr inbounds ptr, ptr %187, i64 %188
  tail call fastcc void @do_SUBST_MODE(ptr noundef nonnull %189, i32 noundef %172)
  %190 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !5
  %191 = getelementptr inbounds ptr, ptr %190, i64 %188
  %192 = load ptr, ptr %191, align 8, !tbaa !5
  br label %193

193:                                              ; preds = %186, %184
  %194 = phi ptr [ %185, %184 ], [ %192, %186 ]
  tail call fastcc void @do_SUBST(ptr noundef nonnull %6, ptr noundef %194)
  %195 = load ptr, ptr %89, align 8, !tbaa !5
  %196 = getelementptr inbounds %struct.rtx_def, ptr %195, i64 0, i32 1
  tail call fastcc void @do_SUBST(ptr noundef nonnull %196, ptr noundef %194)
  br label %197

197:                                              ; preds = %177, %193, %171
  %198 = phi i1 [ true, %193 ], [ false, %177 ], [ false, %171 ]
  %199 = phi i1 [ false, %193 ], [ true, %177 ], [ true, %171 ]
  %200 = phi i32 [ 1, %193 ], [ 0, %177 ], [ 0, %171 ]
  %201 = phi ptr [ %194, %193 ], [ %9, %177 ], [ %9, %171 ]
  %202 = icmp eq i32 %159, %112
  br i1 %202, label %252, label %203

203:                                              ; preds = %197
  %204 = load ptr, ptr %89, align 8, !tbaa !5
  %205 = load i32, ptr %204, align 8
  %206 = lshr i32 %205, 16
  %207 = and i32 %206, 255
  %208 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %209 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %159, i32 noundef %207, ptr noundef %201, ptr noundef %208) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %89, ptr noundef %209)
  %210 = icmp eq i32 %112, 80
  %211 = icmp eq i32 %159, 81
  %212 = select i1 %210, i1 %211, i1 false
  br i1 %212, label %218, label %213

213:                                              ; preds = %203
  %214 = icmp ne i32 %112, 81
  %215 = icmp ne i32 %159, 80
  %216 = select i1 %214, i1 true, i1 %215
  %217 = or i1 %216, %198
  br i1 %217, label %256, label %219

218:                                              ; preds = %203
  br i1 %199, label %219, label %256

219:                                              ; preds = %213, %218
  %220 = load ptr, ptr %3, align 8, !tbaa !5
  %221 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %222 = icmp eq ptr %220, %221
  br i1 %222, label %223, label %256

223:                                              ; preds = %219
  %224 = load i32, ptr %160, align 8
  %225 = lshr i32 %224, 16
  %226 = and i32 %225, 255
  %227 = zext i32 %226 to i64
  %228 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %227
  %229 = load i8, ptr %228, align 1, !tbaa !16
  %230 = icmp ult i8 %229, 9
  br i1 %230, label %231, label %256

231:                                              ; preds = %223
  %232 = tail call i64 @nonzero_bits(ptr noundef nonnull %160, i32 noundef %226) #25
  %233 = tail call i32 @exact_log2(i64 noundef %232) #25
  %234 = icmp sgt i32 %233, -1
  br i1 %234, label %235, label %256

235:                                              ; preds = %231
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #25
  %236 = load ptr, ptr %88, align 8, !tbaa !16
  store ptr %236, ptr %4, align 8, !tbaa !5
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #25
  %237 = call fastcc i32 @recog_for_combine(ptr noundef nonnull %4, ptr noundef nonnull %54, ptr noundef nonnull %5)
  %238 = icmp slt i32 %237, 0
  br i1 %238, label %239, label %249

239:                                              ; preds = %235
  %240 = load ptr, ptr %4, align 8, !tbaa !5
  %241 = tail call i32 @check_asm_operands(ptr noundef %240) #25
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %249

243:                                              ; preds = %239
  store ptr %204, ptr %89, align 8, !tbaa !5
  %244 = load i32, ptr %160, align 8
  %245 = lshr i32 %244, 16
  %246 = and i32 %245, 255
  %247 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %232) #25
  %248 = tail call ptr @simplify_gen_binary(i32 noundef 63, i32 noundef %246, ptr noundef nonnull %160, ptr noundef %247) #25
  store ptr %248, ptr %2, align 8, !tbaa !5
  br label %249

249:                                              ; preds = %243, %239, %235
  %250 = phi ptr [ %160, %239 ], [ %248, %243 ], [ %160, %235 ]
  %251 = phi i32 [ 1, %239 ], [ 0, %243 ], [ 1, %235 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #25
  br label %252

252:                                              ; preds = %249, %197
  %253 = phi ptr [ %160, %197 ], [ %250, %249 ]
  %254 = phi i32 [ %200, %197 ], [ %251, %249 ]
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %258, label %256

256:                                              ; preds = %213, %219, %223, %231, %218, %252
  %257 = phi ptr [ %160, %213 ], [ %160, %219 ], [ %160, %223 ], [ %160, %231 ], [ %160, %218 ], [ %253, %252 ]
  store ptr %54, ptr getelementptr inbounds (%struct.undobuf, ptr @undobuf, i64 0, i32 2), align 8, !tbaa !110
  br label %258

258:                                              ; preds = %256, %252
  %259 = phi ptr [ %257, %256 ], [ %253, %252 ]
  %260 = load i32, ptr %43, align 8
  %261 = and i32 %260, 65535
  %262 = icmp eq i32 %261, 48
  br i1 %262, label %265, label %263

263:                                              ; preds = %258
  %264 = load ptr, ptr %3, align 8, !tbaa !5
  br label %270

265:                                              ; preds = %258
  %266 = lshr i32 %260, 16
  %267 = and i32 %266, 255
  %268 = icmp eq i32 %267, %172
  %269 = load ptr, ptr %3, align 8, !tbaa !5
  br i1 %268, label %273, label %270

270:                                              ; preds = %263, %265
  %271 = phi ptr [ %264, %263 ], [ %269, %265 ]
  %272 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %172, ptr noundef %259, ptr noundef %271) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %272)
  br label %292

273:                                              ; preds = %265
  %274 = load i32, ptr %259, align 8
  %275 = lshr i32 %274, 16
  %276 = and i32 %275, 255
  %277 = icmp eq i32 %276, %172
  %278 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %279 = icmp eq ptr %269, %278
  %280 = select i1 %277, i1 %279, i1 false
  br i1 %280, label %281, label %282

281:                                              ; preds = %273
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef nonnull %259)
  br label %292

282:                                              ; preds = %273
  %283 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1
  %284 = load ptr, ptr %283, align 8, !tbaa !16
  %285 = icmp eq ptr %284, %259
  br i1 %285, label %286, label %290

286:                                              ; preds = %282
  %287 = getelementptr inbounds %struct.rtx_def, ptr %43, i64 0, i32 1, i32 0, i32 0, i64 1
  %288 = load ptr, ptr %287, align 8, !tbaa !16
  %289 = icmp eq ptr %288, %269
  br i1 %289, label %294, label %290

290:                                              ; preds = %286, %282
  %291 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 48, i32 noundef %172, ptr noundef nonnull %259, ptr noundef %269) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %291)
  br label %292

292:                                              ; preds = %270, %290, %281
  %293 = load ptr, ptr %7, align 8, !tbaa !16
  br label %294

294:                                              ; preds = %292, %286
  %295 = phi ptr [ %43, %286 ], [ %293, %292 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #25
  br label %302

296:                                              ; preds = %146, %156, %151
  %297 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  tail call fastcc void @do_SUBST(ptr noundef nonnull %6, ptr noundef %297)
  %298 = load ptr, ptr @global_rtl, align 16, !tbaa !5
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %298)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #25
  br label %866

299:                                              ; preds = %83, %53, %47, %41, %91, %34, %104, %96, %87
  %300 = phi ptr [ %43, %91 ], [ %36, %34 ], [ %43, %104 ], [ %43, %96 ], [ %43, %87 ], [ %43, %41 ], [ %43, %47 ], [ %43, %53 ], [ %43, %83 ]
  %301 = tail call fastcc ptr @make_compound_operation(ptr noundef %300, i32 noundef 23)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %301)
  br label %302

302:                                              ; preds = %294, %299
  %303 = phi ptr [ %9, %299 ], [ %201, %294 ]
  %304 = phi ptr [ %301, %299 ], [ %295, %294 ]
  %305 = load i32, ptr %304, align 8
  %306 = and i32 %305, 65535
  %307 = icmp eq i32 %306, 39
  br i1 %307, label %308, label %376

308:                                              ; preds = %302
  %309 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %304) #25
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %376, label %311

311:                                              ; preds = %308
  %312 = getelementptr inbounds %struct.rtx_def, ptr %304, i64 0, i32 1
  %313 = load ptr, ptr %312, align 8, !tbaa !16
  %314 = load i32, ptr %313, align 8
  %315 = and i32 %314, 65535
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %316
  %318 = load i32, ptr %317, align 4, !tbaa !16
  %319 = and i32 %318, -2
  %320 = icmp eq i32 %319, 8
  br i1 %320, label %376, label %321

321:                                              ; preds = %311
  %322 = load i32, ptr %304, align 8
  %323 = lshr i32 %322, 16
  %324 = and i32 %323, 255
  %325 = zext i32 %324 to i64
  %326 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %325
  %327 = load i8, ptr %326, align 1, !tbaa !16
  %328 = zext i8 %327 to i32
  %329 = add nuw nsw i32 %328, 3
  %330 = lshr i32 %314, 16
  %331 = and i32 %330, 255
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %332
  %334 = load i8, ptr %333, align 1, !tbaa !16
  %335 = zext i8 %334 to i32
  %336 = add nuw nsw i32 %335, 3
  %337 = xor i32 %336, %329
  %338 = icmp ult i32 %337, 4
  %339 = icmp ult i8 %327, %334
  %340 = and i1 %339, %338
  br i1 %340, label %341, label %376

341:                                              ; preds = %321
  %342 = load i32, ptr %303, align 8
  %343 = and i32 %342, 65535
  %344 = icmp eq i32 %343, 37
  br i1 %344, label %345, label %357

345:                                              ; preds = %341
  %346 = getelementptr i8, ptr %303, i64 8
  %347 = load i32, ptr %346, align 8, !tbaa !16
  %348 = icmp ult i32 %347, 53
  br i1 %348, label %349, label %357

349:                                              ; preds = %345
  %350 = zext i32 %347 to i64
  %351 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %350
  %352 = load i32, ptr %351, align 4, !tbaa !16
  %353 = tail call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %331, i32 noundef %324, i32 noundef %352) #25
  %354 = icmp eq i8 %353, 0
  br i1 %354, label %355, label %376

355:                                              ; preds = %349
  %356 = load i32, ptr %303, align 8
  br label %357

357:                                              ; preds = %355, %345, %341
  %358 = phi i32 [ %356, %355 ], [ %342, %345 ], [ %342, %341 ]
  %359 = trunc i32 %358 to i16
  switch i16 %359, label %376 [
    i16 37, label %366
    i16 39, label %360
  ]

360:                                              ; preds = %357
  %361 = getelementptr inbounds %struct.rtx_def, ptr %303, i64 0, i32 1
  %362 = load ptr, ptr %361, align 8, !tbaa !16
  %363 = load i32, ptr %362, align 8
  %364 = and i32 %363, 65535
  %365 = icmp eq i32 %364, 37
  br i1 %365, label %366, label %376

366:                                              ; preds = %357, %360
  %367 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %368 = load ptr, ptr %312, align 8, !tbaa !16
  %369 = load i32, ptr %368, align 8
  %370 = lshr i32 %369, 16
  %371 = and i32 %370, 255
  %372 = tail call ptr %367(i32 noundef %371, ptr noundef nonnull %303) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %6, ptr noundef %372)
  %373 = load ptr, ptr %312, align 8, !tbaa !16
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %373)
  %374 = load ptr, ptr %7, align 8, !tbaa !16
  %375 = load ptr, ptr %6, align 8, !tbaa !16
  br label %376

376:                                              ; preds = %357, %366, %360, %349, %321, %311, %308, %302
  %377 = phi ptr [ %303, %311 ], [ %303, %349 ], [ %375, %366 ], [ %303, %360 ], [ %303, %321 ], [ %303, %308 ], [ %303, %302 ], [ %303, %357 ]
  %378 = phi ptr [ %304, %311 ], [ %304, %349 ], [ %374, %366 ], [ %304, %360 ], [ %304, %321 ], [ %304, %308 ], [ %304, %302 ], [ %304, %357 ]
  %379 = load i32, ptr %377, align 8
  %380 = and i32 %379, 65535
  %381 = icmp eq i32 %380, 36
  br i1 %381, label %529, label %382

382:                                              ; preds = %376
  %383 = load i32, ptr %378, align 8
  %384 = and i32 %383, 65535
  %385 = icmp eq i32 %384, 47
  br i1 %385, label %386, label %529

386:                                              ; preds = %382
  %387 = lshr i32 %383, 16
  %388 = and i32 %387, 255
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %389
  %391 = load i8, ptr %390, align 1, !tbaa !16
  %392 = icmp eq i8 %391, 2
  br i1 %392, label %393, label %529

393:                                              ; preds = %386
  %394 = getelementptr inbounds %struct.rtx_def, ptr %378, i64 0, i32 1
  %395 = load ptr, ptr %394, align 8, !tbaa !16
  %396 = load i32, ptr %395, align 8
  %397 = and i32 %396, 65534
  %398 = icmp eq i32 %397, 80
  br i1 %398, label %399, label %529

399:                                              ; preds = %393
  %400 = getelementptr inbounds %struct.rtx_def, ptr %395, i64 0, i32 1, i32 0, i32 0, i64 1
  %401 = load ptr, ptr %400, align 8, !tbaa !16
  %402 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %403 = icmp eq ptr %401, %402
  br i1 %403, label %404, label %529

404:                                              ; preds = %399
  %405 = getelementptr inbounds %struct.rtx_def, ptr %395, i64 0, i32 1
  %406 = load ptr, ptr %405, align 8, !tbaa !16
  %407 = load i32, ptr %406, align 8
  %408 = lshr i32 %407, 16
  %409 = and i32 %408, 255
  %410 = icmp eq i32 %388, %409
  br i1 %410, label %411, label %529

411:                                              ; preds = %404
  %412 = tail call i32 @can_conditionally_move_p(i32 noundef %388) #25
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %414, label %529

414:                                              ; preds = %411
  %415 = load ptr, ptr %394, align 8, !tbaa !16
  %416 = getelementptr inbounds %struct.rtx_def, ptr %415, i64 0, i32 1
  %417 = load ptr, ptr %416, align 8, !tbaa !16
  %418 = load i32, ptr %417, align 8
  %419 = lshr i32 %418, 16
  %420 = and i32 %419, 255
  %421 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %417, i32 noundef %420) #25
  %422 = load ptr, ptr %394, align 8, !tbaa !16
  %423 = getelementptr inbounds %struct.rtx_def, ptr %422, i64 0, i32 1
  %424 = load ptr, ptr %423, align 8, !tbaa !16
  %425 = load i32, ptr %424, align 8
  %426 = lshr i32 %425, 16
  %427 = and i32 %426, 255
  %428 = zext i32 %427 to i64
  %429 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %428
  %430 = load i8, ptr %429, align 1, !tbaa !16
  %431 = zext i8 %430 to i32
  %432 = shl nuw nsw i32 %431, 3
  %433 = icmp eq i32 %421, %432
  br i1 %433, label %434, label %529

434:                                              ; preds = %414
  %435 = tail call i32 @side_effects_p(ptr noundef nonnull %378) #25
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %529

437:                                              ; preds = %434
  %438 = load ptr, ptr %394, align 8, !tbaa !16
  %439 = load i32, ptr %438, align 8
  %440 = and i32 %439, 65535
  %441 = icmp eq i32 %440, 80
  %442 = getelementptr inbounds %struct.rtx_def, ptr %378, i64 0, i32 1, i32 0, i32 0, i64 1
  %443 = getelementptr inbounds %struct.rtx_def, ptr %378, i64 0, i32 1, i32 0, i32 0, i64 2
  %444 = select i1 %441, ptr %442, ptr %443
  %445 = load ptr, ptr %444, align 8, !tbaa !16
  %446 = select i1 %441, ptr %443, ptr %442
  %447 = load ptr, ptr %446, align 8, !tbaa !16
  %448 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %449 = load i32, ptr %445, align 8
  %450 = and i32 %449, 65535
  %451 = icmp eq i32 %450, 62
  br i1 %451, label %452, label %463

452:                                              ; preds = %437
  %453 = getelementptr inbounds %struct.rtx_def, ptr %445, i64 0, i32 1
  %454 = load ptr, ptr %453, align 8, !tbaa !16
  %455 = tail call i32 @rtx_equal_p(ptr noundef %454, ptr noundef %447) #25
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %457, label %459

457:                                              ; preds = %452
  %458 = load i32, ptr %445, align 8
  br label %463

459:                                              ; preds = %452
  %460 = getelementptr inbounds %struct.rtx_def, ptr %445, i64 0, i32 1, i32 0, i32 0, i64 1
  %461 = load ptr, ptr %460, align 8, !tbaa !16
  %462 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %504

463:                                              ; preds = %457, %437
  %464 = phi i32 [ %458, %457 ], [ %449, %437 ]
  %465 = and i32 %464, 65535
  %466 = icmp eq i32 %465, 62
  br i1 %466, label %467, label %476

467:                                              ; preds = %463
  %468 = getelementptr inbounds %struct.rtx_def, ptr %445, i64 0, i32 1, i32 0, i32 0, i64 1
  %469 = load ptr, ptr %468, align 8, !tbaa !16
  %470 = tail call i32 @rtx_equal_p(ptr noundef %469, ptr noundef %447) #25
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %476, label %472

472:                                              ; preds = %467
  %473 = getelementptr inbounds %struct.rtx_def, ptr %445, i64 0, i32 1
  %474 = load ptr, ptr %473, align 8, !tbaa !16
  %475 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %504

476:                                              ; preds = %467, %463
  %477 = load i32, ptr %447, align 8
  %478 = and i32 %477, 65535
  %479 = icmp eq i32 %478, 62
  br i1 %479, label %480, label %491

480:                                              ; preds = %476
  %481 = getelementptr inbounds %struct.rtx_def, ptr %447, i64 0, i32 1
  %482 = load ptr, ptr %481, align 8, !tbaa !16
  %483 = tail call i32 @rtx_equal_p(ptr noundef %482, ptr noundef nonnull %445) #25
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %487

485:                                              ; preds = %480
  %486 = load i32, ptr %447, align 8
  br label %491

487:                                              ; preds = %480
  %488 = getelementptr inbounds %struct.rtx_def, ptr %447, i64 0, i32 1, i32 0, i32 0, i64 1
  %489 = load ptr, ptr %488, align 8, !tbaa !16
  %490 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %504

491:                                              ; preds = %485, %476
  %492 = phi i32 [ %486, %485 ], [ %477, %476 ]
  %493 = and i32 %492, 65535
  %494 = icmp eq i32 %493, 62
  br i1 %494, label %495, label %504

495:                                              ; preds = %491
  %496 = getelementptr inbounds %struct.rtx_def, ptr %447, i64 0, i32 1, i32 0, i32 0, i64 1
  %497 = load ptr, ptr %496, align 8, !tbaa !16
  %498 = tail call i32 @rtx_equal_p(ptr noundef %497, ptr noundef nonnull %445) #25
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %504, label %500

500:                                              ; preds = %495
  %501 = getelementptr inbounds %struct.rtx_def, ptr %447, i64 0, i32 1
  %502 = load ptr, ptr %501, align 8, !tbaa !16
  %503 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %504

504:                                              ; preds = %472, %491, %495, %500, %487, %459
  %505 = phi ptr [ %461, %459 ], [ %474, %472 ], [ %490, %487 ], [ %503, %500 ], [ %445, %495 ], [ %445, %491 ]
  %506 = phi ptr [ %462, %459 ], [ %475, %472 ], [ %489, %487 ], [ %502, %500 ], [ %447, %495 ], [ %447, %491 ]
  %507 = phi ptr [ %447, %459 ], [ %447, %472 ], [ %445, %487 ], [ %445, %500 ], [ %448, %495 ], [ %448, %491 ]
  %508 = load i32, ptr %378, align 8
  %509 = lshr i32 %508, 16
  %510 = and i32 %509, 255
  %511 = load ptr, ptr %394, align 8, !tbaa !16
  %512 = getelementptr inbounds %struct.rtx_def, ptr %511, i64 0, i32 1
  %513 = load ptr, ptr %512, align 8, !tbaa !16
  %514 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %510, ptr noundef %513, ptr noundef %505) #25
  %515 = load i32, ptr %378, align 8
  %516 = lshr i32 %515, 16
  %517 = and i32 %516, 255
  %518 = load ptr, ptr %394, align 8, !tbaa !16
  %519 = getelementptr inbounds %struct.rtx_def, ptr %518, i64 0, i32 1
  %520 = load ptr, ptr %519, align 8, !tbaa !16
  %521 = tail call ptr @simplify_gen_unary(i32 noundef 64, i32 noundef %517, ptr noundef %520, i32 noundef %517) #25
  %522 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %517, ptr noundef %521, ptr noundef %506) #25
  %523 = load i32, ptr %378, align 8
  %524 = lshr i32 %523, 16
  %525 = and i32 %524, 255
  %526 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %525, ptr noundef %507, ptr noundef %514) #25
  %527 = tail call ptr @simplify_gen_binary(i32 noundef 62, i32 noundef %525, ptr noundef %526, ptr noundef %522) #25
  tail call fastcc void @do_SUBST(ptr noundef nonnull %7, ptr noundef %527)
  %528 = load ptr, ptr %7, align 8, !tbaa !16
  br label %529

529:                                              ; preds = %393, %504, %434, %414, %411, %404, %399, %386, %382, %376
  %530 = phi ptr [ %378, %411 ], [ %378, %434 ], [ %528, %504 ], [ %378, %414 ], [ %378, %404 ], [ %378, %399 ], [ %378, %386 ], [ %378, %382 ], [ %378, %376 ], [ %378, %393 ]
  %531 = load i32, ptr %530, align 8
  %532 = and i32 %531, 65535
  %533 = icmp eq i32 %532, 25
  br i1 %533, label %534, label %539

534:                                              ; preds = %529
  %535 = getelementptr inbounds %struct.rtx_def, ptr %530, i64 0, i32 1
  %536 = load ptr, ptr %535, align 8, !tbaa !16
  %537 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %538 = icmp eq ptr %536, %537
  br i1 %538, label %866, label %539

539:                                              ; preds = %534, %529
  %540 = load i32, ptr %377, align 8
  %541 = and i32 %540, 65535
  %542 = icmp eq i32 %541, 25
  br i1 %542, label %543, label %548

543:                                              ; preds = %539
  %544 = getelementptr inbounds %struct.rtx_def, ptr %377, i64 0, i32 1
  %545 = load ptr, ptr %544, align 8, !tbaa !16
  %546 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %547 = icmp eq ptr %545, %546
  br i1 %547, label %866, label %548

548:                                              ; preds = %543, %539
  %549 = load ptr, ptr %6, align 8, !tbaa !16
  %550 = load ptr, ptr %7, align 8, !tbaa !16
  %551 = load i32, ptr %550, align 8
  %552 = and i32 %551, 65535
  %553 = icmp eq i32 %552, 61
  br i1 %553, label %554, label %586

554:                                              ; preds = %548
  %555 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %556 = load ptr, ptr %555, align 8, !tbaa !16
  %557 = load i32, ptr %556, align 8
  %558 = and i32 %557, 65535
  %559 = icmp eq i32 %558, 66
  br i1 %559, label %560, label %586

560:                                              ; preds = %554
  %561 = getelementptr inbounds %struct.rtx_def, ptr %556, i64 0, i32 1
  %562 = load ptr, ptr %561, align 8, !tbaa !16
  %563 = load i32, ptr %562, align 8
  %564 = and i32 %563, 65535
  %565 = icmp eq i32 %564, 30
  br i1 %565, label %566, label %586

566:                                              ; preds = %560
  %567 = getelementptr inbounds %struct.rtx_def, ptr %562, i64 0, i32 1
  %568 = load i64, ptr %567, align 8, !tbaa !16
  %569 = icmp eq i64 %568, -2
  br i1 %569, label %570, label %586

570:                                              ; preds = %566
  %571 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1, i32 0, i32 0, i64 1
  %572 = load ptr, ptr %571, align 8, !tbaa !16
  %573 = tail call fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %549, ptr noundef %572), !range !103
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %575, label %577

575:                                              ; preds = %570
  %576 = load i32, ptr %550, align 8
  br label %586

577:                                              ; preds = %570
  %578 = load ptr, ptr %555, align 8, !tbaa !16
  %579 = getelementptr inbounds %struct.rtx_def, ptr %578, i64 0, i32 1, i32 0, i32 0, i64 1
  %580 = load ptr, ptr %579, align 8, !tbaa !16
  %581 = tail call fastcc ptr @make_extraction(i32 noundef 0, ptr noundef %549, i64 noundef 0, ptr noundef %580, i64 noundef 1, i32 noundef 1, i32 noundef 1, i32 noundef 0)
  %582 = icmp eq ptr %581, null
  br i1 %582, label %866, label %583

583:                                              ; preds = %577
  %584 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %585 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %581, ptr noundef %584) #25
  br label %866

586:                                              ; preds = %575, %566, %560, %554, %548
  %587 = phi i32 [ %576, %575 ], [ %551, %566 ], [ %551, %560 ], [ %551, %554 ], [ %551, %548 ]
  %588 = and i32 %587, 65535
  %589 = icmp eq i32 %588, 61
  br i1 %589, label %590, label %645

590:                                              ; preds = %586
  %591 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %592 = load ptr, ptr %591, align 8, !tbaa !16
  %593 = load i32, ptr %592, align 8
  %594 = and i32 %593, 65535
  %595 = icmp eq i32 %594, 39
  br i1 %595, label %596, label %645

596:                                              ; preds = %590
  %597 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %592) #25
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %645, label %599

599:                                              ; preds = %596
  %600 = load ptr, ptr %591, align 8, !tbaa !16
  %601 = load i32, ptr %600, align 8
  %602 = lshr i32 %601, 16
  %603 = and i32 %602, 255
  %604 = zext i32 %603 to i64
  %605 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %604
  %606 = load i8, ptr %605, align 1, !tbaa !16
  %607 = getelementptr inbounds %struct.rtx_def, ptr %600, i64 0, i32 1
  %608 = load ptr, ptr %607, align 8, !tbaa !16
  %609 = load i32, ptr %608, align 8
  %610 = lshr i32 %609, 16
  %611 = and i32 %610, 255
  %612 = zext i32 %611 to i64
  %613 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %612
  %614 = load i8, ptr %613, align 1, !tbaa !16
  %615 = icmp ult i8 %606, %614
  %616 = and i32 %609, 65535
  %617 = icmp eq i32 %616, 66
  %618 = and i1 %615, %617
  br i1 %618, label %619, label %645

619:                                              ; preds = %599
  %620 = getelementptr inbounds %struct.rtx_def, ptr %608, i64 0, i32 1
  %621 = load ptr, ptr %620, align 8, !tbaa !16
  %622 = load i32, ptr %621, align 8
  %623 = and i32 %622, 65535
  %624 = icmp eq i32 %623, 30
  br i1 %624, label %625, label %645

625:                                              ; preds = %619
  %626 = getelementptr inbounds %struct.rtx_def, ptr %621, i64 0, i32 1
  %627 = load i64, ptr %626, align 8, !tbaa !16
  %628 = icmp eq i64 %627, -2
  br i1 %628, label %629, label %645

629:                                              ; preds = %625
  %630 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1, i32 0, i32 0, i64 1
  %631 = load ptr, ptr %630, align 8, !tbaa !16
  %632 = tail call fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %549, ptr noundef %631), !range !103
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %645, label %634

634:                                              ; preds = %629
  %635 = load ptr, ptr %591, align 8, !tbaa !16
  %636 = getelementptr inbounds %struct.rtx_def, ptr %635, i64 0, i32 1
  %637 = load ptr, ptr %636, align 8, !tbaa !16
  %638 = getelementptr inbounds %struct.rtx_def, ptr %637, i64 0, i32 1, i32 0, i32 0, i64 1
  %639 = load ptr, ptr %638, align 8, !tbaa !16
  %640 = tail call fastcc ptr @make_extraction(i32 noundef 0, ptr noundef %549, i64 noundef 0, ptr noundef %639, i64 noundef 1, i32 noundef 1, i32 noundef 1, i32 noundef 0)
  %641 = icmp eq ptr %640, null
  br i1 %641, label %866, label %642

642:                                              ; preds = %634
  %643 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %644 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %640, ptr noundef %643) #25
  br label %866

645:                                              ; preds = %629, %625, %619, %599, %596, %590, %586
  %646 = load i32, ptr %550, align 8
  %647 = and i32 %646, 65535
  %648 = icmp eq i32 %647, 62
  br i1 %648, label %649, label %674

649:                                              ; preds = %645
  %650 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %651 = load ptr, ptr %650, align 8, !tbaa !16
  %652 = load i32, ptr %651, align 8
  %653 = and i32 %652, 65535
  %654 = icmp eq i32 %653, 65
  br i1 %654, label %655, label %674

655:                                              ; preds = %649
  %656 = getelementptr inbounds %struct.rtx_def, ptr %651, i64 0, i32 1
  %657 = load ptr, ptr %656, align 8, !tbaa !16
  %658 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %659 = icmp eq ptr %657, %658
  br i1 %659, label %660, label %674

660:                                              ; preds = %655
  %661 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1, i32 0, i32 0, i64 1
  %662 = load ptr, ptr %661, align 8, !tbaa !16
  %663 = tail call fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %549, ptr noundef %662), !range !103
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %674, label %665

665:                                              ; preds = %660
  %666 = load ptr, ptr %650, align 8, !tbaa !16
  %667 = getelementptr inbounds %struct.rtx_def, ptr %666, i64 0, i32 1, i32 0, i32 0, i64 1
  %668 = load ptr, ptr %667, align 8, !tbaa !16
  %669 = tail call fastcc ptr @make_extraction(i32 noundef 0, ptr noundef %549, i64 noundef 0, ptr noundef %668, i64 noundef 1, i32 noundef 1, i32 noundef 1, i32 noundef 0)
  %670 = icmp eq ptr %669, null
  br i1 %670, label %866, label %671

671:                                              ; preds = %665
  %672 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 65), align 8, !tbaa !5
  %673 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %669, ptr noundef %672) #25
  br label %866

674:                                              ; preds = %660, %655, %649, %645
  %675 = load i32, ptr %549, align 8
  %676 = and i32 %675, 65535
  %677 = icmp eq i32 %676, 120
  br i1 %677, label %680, label %678

678:                                              ; preds = %674
  %679 = load i32, ptr %550, align 8
  br label %720

680:                                              ; preds = %674
  %681 = getelementptr inbounds %struct.rtx_def, ptr %549, i64 0, i32 1, i32 0, i32 0, i64 1
  %682 = load ptr, ptr %681, align 8, !tbaa !16
  %683 = load i32, ptr %682, align 8
  %684 = and i32 %683, 65535
  %685 = icmp eq i32 %684, 30
  %686 = load i32, ptr %550, align 8
  %687 = and i32 %686, 65535
  %688 = icmp eq i32 %687, 61
  %689 = select i1 %685, i1 %688, i1 false
  br i1 %689, label %690, label %720

690:                                              ; preds = %680
  %691 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %692 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1, i32 0, i32 0, i64 1
  %693 = load ptr, ptr %692, align 8, !tbaa !16
  %694 = load i32, ptr %693, align 8
  %695 = and i32 %694, 65535
  %696 = icmp eq i32 %695, 30
  br i1 %696, label %697, label %720

697:                                              ; preds = %690
  %698 = getelementptr inbounds %struct.rtx_def, ptr %682, i64 0, i32 1
  %699 = load i64, ptr %698, align 8, !tbaa !16
  %700 = getelementptr inbounds %struct.rtx_def, ptr %693, i64 0, i32 1
  %701 = load i64, ptr %700, align 8, !tbaa !16
  %702 = icmp sgt i64 %699, 63
  %703 = shl nsw i64 -1, %699
  %704 = xor i64 %703, -1
  %705 = select i1 %702, i64 -1, i64 %704
  %706 = and i64 %705, %701
  %707 = icmp eq i64 %706, %705
  br i1 %707, label %708, label %711

708:                                              ; preds = %697
  %709 = load ptr, ptr %691, align 8, !tbaa !16
  %710 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %549, ptr noundef %709) #25
  br label %866

711:                                              ; preds = %697
  %712 = icmp eq i64 %706, %701
  br i1 %712, label %720, label %713

713:                                              ; preds = %711
  %714 = lshr i32 %686, 16
  %715 = and i32 %714, 255
  %716 = load ptr, ptr %691, align 8, !tbaa !16
  %717 = tail call ptr @gen_int_mode(i64 noundef %706, i32 noundef %715) #25
  %718 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 61, i32 noundef %715, ptr noundef %716, ptr noundef %717) #25
  %719 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %549, ptr noundef %718) #25
  br label %866

720:                                              ; preds = %711, %690, %680, %678
  %721 = phi i32 [ %679, %678 ], [ %686, %711 ], [ %686, %690 ], [ %686, %680 ]
  %722 = and i32 %721, 65534
  %723 = icmp eq i32 %722, 62
  br i1 %723, label %724, label %866

724:                                              ; preds = %720
  %725 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1
  %726 = load ptr, ptr %725, align 8, !tbaa !16
  %727 = tail call fastcc ptr @expand_compound_operation(ptr noundef %726)
  %728 = getelementptr inbounds %struct.rtx_def, ptr %550, i64 0, i32 1, i32 0, i32 0, i64 1
  %729 = load ptr, ptr %728, align 8, !tbaa !16
  %730 = tail call fastcc ptr @expand_compound_operation(ptr noundef %729)
  %731 = load i32, ptr %727, align 8
  %732 = and i32 %731, 65535
  %733 = icmp eq i32 %732, 61
  br i1 %733, label %734, label %745

734:                                              ; preds = %724
  %735 = getelementptr inbounds %struct.rtx_def, ptr %727, i64 0, i32 1, i32 0, i32 0, i64 1
  %736 = load ptr, ptr %735, align 8, !tbaa !16
  %737 = load i32, ptr %736, align 8
  %738 = and i32 %737, 65535
  %739 = icmp eq i32 %738, 30
  br i1 %739, label %740, label %745

740:                                              ; preds = %734
  %741 = getelementptr inbounds %struct.rtx_def, ptr %727, i64 0, i32 1
  %742 = load ptr, ptr %741, align 8, !tbaa !16
  %743 = tail call fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %742, ptr noundef nonnull %549), !range !103
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %760

745:                                              ; preds = %740, %734, %724
  %746 = load i32, ptr %730, align 8
  %747 = and i32 %746, 65535
  %748 = icmp eq i32 %747, 61
  br i1 %748, label %749, label %866

749:                                              ; preds = %745
  %750 = getelementptr inbounds %struct.rtx_def, ptr %730, i64 0, i32 1, i32 0, i32 0, i64 1
  %751 = load ptr, ptr %750, align 8, !tbaa !16
  %752 = load i32, ptr %751, align 8
  %753 = and i32 %752, 65535
  %754 = icmp eq i32 %753, 30
  br i1 %754, label %755, label %866

755:                                              ; preds = %749
  %756 = getelementptr inbounds %struct.rtx_def, ptr %730, i64 0, i32 1
  %757 = load ptr, ptr %756, align 8, !tbaa !16
  %758 = tail call fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %757, ptr noundef nonnull %549), !range !103
  %759 = icmp eq i32 %758, 0
  br i1 %759, label %866, label %760

760:                                              ; preds = %755, %740
  %761 = phi ptr [ %735, %740 ], [ %750, %755 ]
  %762 = phi ptr [ %730, %740 ], [ %727, %755 ]
  %763 = load ptr, ptr %761, align 8, !tbaa !16
  %764 = getelementptr inbounds %struct.rtx_def, ptr %763, i64 0, i32 1
  %765 = load i64, ptr %764, align 8, !tbaa !16
  %766 = xor i64 %765, -1
  %767 = load i32, ptr %549, align 8
  %768 = lshr i32 %767, 16
  %769 = and i32 %768, 255
  %770 = zext i32 %769 to i64
  %771 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %770
  %772 = load i64, ptr %771, align 8, !tbaa !83
  %773 = and i64 %772, %766
  %774 = sub i64 0, %773
  %775 = and i64 %773, %774
  %776 = tail call i32 @exact_log2(i64 noundef %775) #25
  %777 = icmp sgt i32 %776, -1
  br i1 %777, label %778, label %866

778:                                              ; preds = %760
  %779 = zext i32 %776 to i64
  %780 = lshr i64 %773, %779
  %781 = add i64 %780, 1
  %782 = tail call i32 @exact_log2(i64 noundef %781) #25
  %783 = freeze i32 %782
  %784 = icmp slt i32 %783, 1
  br i1 %784, label %866, label %785

785:                                              ; preds = %778
  %786 = zext i32 %783 to i64
  %787 = add nuw nsw i64 %786, %779
  %788 = load i32, ptr %549, align 8
  %789 = lshr i32 %788, 16
  %790 = and i32 %789, 255
  %791 = zext i32 %790 to i64
  %792 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %791
  %793 = load i8, ptr %792, align 1, !tbaa !16
  %794 = zext i8 %793 to i64
  %795 = shl nuw nsw i64 %794, 3
  %796 = icmp ugt i64 %787, %795
  %797 = icmp ugt i8 %793, 8
  %798 = or i1 %797, %796
  br i1 %798, label %866, label %799

799:                                              ; preds = %785
  %800 = tail call i64 @nonzero_bits(ptr noundef %762, i32 noundef %790) #25
  %801 = and i64 %800, %765
  %802 = icmp eq i64 %801, 0
  br i1 %802, label %803, label %866

803:                                              ; preds = %799
  %804 = tail call fastcc ptr @make_extraction(i32 noundef 0, ptr noundef nonnull %549, i64 noundef %779, ptr noundef null, i64 noundef %786, i32 noundef 1, i32 noundef 1, i32 noundef 0)
  %805 = icmp eq ptr %804, null
  br i1 %805, label %866, label %806

806:                                              ; preds = %803
  %807 = load i32, ptr %804, align 8
  %808 = and i32 %807, 65535
  %809 = icmp eq i32 %808, 40
  br i1 %809, label %810, label %814

810:                                              ; preds = %806
  %811 = getelementptr inbounds %struct.rtx_def, ptr %804, i64 0, i32 1
  %812 = load ptr, ptr %811, align 8, !tbaa !16
  %813 = load i32, ptr %812, align 8
  br label %814

814:                                              ; preds = %810, %806
  %815 = phi i32 [ %813, %810 ], [ %807, %806 ]
  %816 = lshr i32 %815, 16
  %817 = and i32 %816, 255
  %818 = load i32, ptr %550, align 8
  %819 = lshr i32 %818, 16
  %820 = and i32 %819, 255
  %821 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 68, i32 noundef %820, ptr noundef %762, i32 noundef %776)
  %822 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %821, ptr noundef nonnull %549)
  %823 = zext i32 %817 to i64
  %824 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %823
  %825 = load i8, ptr %824, align 1, !tbaa !16
  %826 = icmp ugt i8 %825, 7
  %827 = shl nsw i64 -1, %786
  %828 = xor i64 %827, -1
  %829 = select i1 %826, i64 -1, i64 %828
  %830 = tail call fastcc ptr @force_to_mode(ptr noundef %822, i32 noundef %817, i64 noundef %829, i32 noundef 0)
  %831 = load i32, ptr %804, align 8
  %832 = and i32 %831, 65535
  %833 = icmp eq i32 %832, 120
  br i1 %833, label %834, label %863

834:                                              ; preds = %814
  %835 = getelementptr inbounds %struct.rtx_def, ptr %804, i64 0, i32 1, i32 0, i32 0, i64 1
  %836 = load ptr, ptr %835, align 8, !tbaa !16
  %837 = load i32, ptr %836, align 8
  %838 = and i32 %837, 65535
  %839 = icmp eq i32 %838, 30
  br i1 %839, label %840, label %863

840:                                              ; preds = %834
  %841 = getelementptr inbounds %struct.rtx_def, ptr %836, i64 0, i32 1
  %842 = load i64, ptr %841, align 8, !tbaa !16
  %843 = icmp slt i64 %842, 64
  br i1 %843, label %844, label %863

844:                                              ; preds = %840
  %845 = load i32, ptr %830, align 8
  %846 = and i32 %845, 65535
  %847 = icmp eq i32 %846, 61
  br i1 %847, label %848, label %863

848:                                              ; preds = %844
  %849 = getelementptr inbounds %struct.rtx_def, ptr %830, i64 0, i32 1
  %850 = getelementptr inbounds %struct.rtx_def, ptr %830, i64 0, i32 1, i32 0, i32 0, i64 1
  %851 = load ptr, ptr %850, align 8, !tbaa !16
  %852 = load i32, ptr %851, align 8
  %853 = and i32 %852, 65535
  %854 = icmp eq i32 %853, 30
  br i1 %854, label %855, label %863

855:                                              ; preds = %848
  %856 = getelementptr inbounds %struct.rtx_def, ptr %851, i64 0, i32 1
  %857 = load i64, ptr %856, align 8, !tbaa !16
  %858 = shl nsw i64 -1, %842
  %859 = xor i64 %858, -1
  %860 = icmp eq i64 %857, %859
  br i1 %860, label %861, label %863

861:                                              ; preds = %855
  %862 = load ptr, ptr %849, align 8, !tbaa !16
  br label %863

863:                                              ; preds = %861, %855, %848, %844, %840, %834, %814
  %864 = phi ptr [ %862, %861 ], [ %830, %855 ], [ %830, %848 ], [ %830, %844 ], [ %830, %840 ], [ %830, %834 ], [ %830, %814 ]
  %865 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %804, ptr noundef %864) #25
  br label %866

866:                                              ; preds = %1, %863, %803, %799, %785, %778, %760, %755, %749, %745, %720, %713, %708, %671, %665, %642, %634, %583, %577, %296, %543, %534
  %867 = phi ptr [ %0, %296 ], [ %530, %534 ], [ %377, %543 ], [ %585, %583 ], [ %644, %642 ], [ %673, %671 ], [ %865, %863 ], [ %0, %577 ], [ %0, %634 ], [ %0, %665 ], [ %0, %720 ], [ %0, %755 ], [ %0, %749 ], [ %0, %745 ], [ %0, %799 ], [ %0, %785 ], [ %0, %803 ], [ %719, %713 ], [ %710, %708 ], [ %0, %760 ], [ %0, %778 ], [ %8, %1 ]
  ret ptr %867
}

declare i32 @reversed_comparison_code(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @swap_condition(i32 noundef) local_unnamed_addr #3

declare i32 @unsigned_condition(i32 noundef) local_unnamed_addr #3

declare i32 @reverse_condition(i32 noundef) local_unnamed_addr #3

declare i32 @have_insn_for(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @make_extraction(i32 noundef %0, ptr noundef %1, i64 noundef %2, ptr noundef %3, i64 noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7) unnamed_addr #9 {
  %9 = load i32, ptr %1, align 8
  %10 = lshr i32 %9, 16
  %11 = and i32 %10, 255
  %12 = load i32, ptr @word_mode, align 4, !tbaa !16
  %13 = trunc i64 %4 to i32
  %14 = tail call i32 @mode_for_size(i32 noundef %13, i32 noundef 2, i32 noundef 1) #25
  %15 = load i32, ptr %1, align 8
  %16 = and i32 %15, 65535
  %17 = icmp eq i32 %16, 39
  br i1 %17, label %18, label %32

18:                                               ; preds = %8
  %19 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %1) #25
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = load i32, ptr %1, align 8
  br label %32

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = load i32, ptr %25, align 8
  %27 = and i32 %26, 65535
  %28 = icmp eq i32 %27, 43
  %29 = lshr i32 %26, 16
  %30 = and i32 %29, 255
  %31 = select i1 %28, i32 %30, i32 %11
  br label %61

32:                                               ; preds = %21, %8
  %33 = phi i32 [ %22, %21 ], [ %15, %8 ]
  %34 = and i32 %33, 65535
  %35 = icmp eq i32 %34, 65
  br i1 %35, label %36, label %61

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %38 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %39 = load ptr, ptr %38, align 8, !tbaa !16
  %40 = load i32, ptr %39, align 8
  %41 = and i32 %40, 65535
  %42 = icmp eq i32 %41, 30
  %43 = icmp eq ptr %3, null
  %44 = and i1 %43, %42
  %45 = icmp eq i64 %2, 0
  %46 = and i1 %45, %44
  br i1 %46, label %47, label %61

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.rtx_def, ptr %39, i64 0, i32 1
  %49 = load i64, ptr %48, align 8, !tbaa !16
  %50 = icmp ult i64 %49, %4
  br i1 %50, label %51, label %73

51:                                               ; preds = %47
  %52 = load ptr, ptr %37, align 8, !tbaa !16
  %53 = sub i64 %4, %49
  %54 = tail call fastcc ptr @make_extraction(i32 noundef %0, ptr noundef %52, i64 noundef 0, ptr noundef null, i64 noundef %53, i32 noundef %5, i32 noundef %6, i32 noundef %7)
  %55 = icmp eq ptr %54, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = load i32, ptr %1, align 8
  br label %73

58:                                               ; preds = %51
  %59 = load ptr, ptr %38, align 8, !tbaa !16
  %60 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 65, i32 noundef %0, ptr noundef nonnull %54, ptr noundef %59) #25
  br label %480

61:                                               ; preds = %32, %36, %23
  %62 = phi i32 [ %26, %23 ], [ %33, %36 ], [ %33, %32 ]
  %63 = phi i32 [ %31, %23 ], [ %11, %36 ], [ %11, %32 ]
  %64 = phi ptr [ %25, %23 ], [ %1, %36 ], [ %1, %32 ]
  %65 = icmp eq ptr %3, null
  br i1 %65, label %73, label %66

66:                                               ; preds = %61
  %67 = load i32, ptr %3, align 8
  %68 = and i32 %67, 65535
  %69 = icmp eq i32 %68, 30
  br i1 %69, label %70, label %73

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %72 = load i64, ptr %71, align 8, !tbaa !16
  br label %73

73:                                               ; preds = %47, %56, %70, %66, %61
  %74 = phi i1 [ true, %70 ], [ true, %66 ], [ false, %61 ], [ false, %56 ], [ false, %47 ]
  %75 = phi i32 [ %62, %70 ], [ %62, %66 ], [ %62, %61 ], [ %57, %56 ], [ %33, %47 ]
  %76 = phi ptr [ %64, %70 ], [ %64, %66 ], [ %64, %61 ], [ %1, %56 ], [ %1, %47 ]
  %77 = phi i32 [ %63, %70 ], [ %63, %66 ], [ %63, %61 ], [ %11, %56 ], [ %11, %47 ]
  %78 = phi ptr [ null, %70 ], [ %3, %66 ], [ null, %61 ], [ null, %56 ], [ null, %47 ]
  %79 = phi i64 [ %72, %70 ], [ %2, %66 ], [ %2, %61 ], [ 0, %56 ], [ 0, %47 ]
  %80 = lshr i32 %75, 16
  %81 = and i32 %80, 255
  %82 = icmp eq i32 %14, 1
  br i1 %82, label %205, label %83

83:                                               ; preds = %73
  %84 = icmp eq ptr %78, null
  %85 = and i64 %79, 31
  %86 = icmp eq i64 %85, 0
  %87 = select i1 %84, i1 %86, i1 false
  br i1 %87, label %88, label %99

88:                                               ; preds = %83
  %89 = and i32 %75, 65535
  %90 = icmp eq i32 %89, 43
  br i1 %90, label %99, label %91

91:                                               ; preds = %88
  %92 = icmp eq i32 %6, 0
  br i1 %92, label %126, label %93

93:                                               ; preds = %91
  %94 = icmp eq i32 %89, 37
  br i1 %94, label %95, label %99

95:                                               ; preds = %93
  %96 = tail call i32 @have_insn_for(i32 noundef 40, i32 noundef %14) #25
  %97 = icmp eq i32 %96, 0
  %98 = load i32, ptr %76, align 8
  br i1 %97, label %99, label %126

99:                                               ; preds = %95, %93, %88, %83
  %100 = phi i32 [ %75, %93 ], [ %75, %88 ], [ %75, %83 ], [ %98, %95 ]
  %101 = and i32 %100, 65535
  %102 = icmp eq i32 %101, 43
  %103 = and i1 %84, %102
  %104 = and i64 %79, 7
  %105 = icmp eq i64 %104, 0
  %106 = select i1 %103, i1 %105, i1 false
  br i1 %106, label %107, label %205

107:                                              ; preds = %99
  %108 = zext i32 %81 to i64
  %109 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %108
  %110 = load i8, ptr %109, align 1, !tbaa !16
  %111 = zext i32 %14 to i64
  %112 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %111
  %113 = load i8, ptr %112, align 1, !tbaa !16
  %114 = icmp ult i8 %110, %113
  br i1 %114, label %205, label %115

115:                                              ; preds = %107
  %116 = icmp eq i32 %81, %14
  br i1 %116, label %126, label %117

117:                                              ; preds = %115
  %118 = getelementptr inbounds %struct.rtx_def, ptr %76, i64 0, i32 1
  %119 = load ptr, ptr %118, align 8, !tbaa !16
  %120 = tail call i32 @mode_dependent_address_p(ptr noundef %119) #25
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %205

122:                                              ; preds = %117
  %123 = load i32, ptr %76, align 8
  %124 = and i32 %123, 134217728
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %205

126:                                              ; preds = %122, %115, %95, %91
  %127 = phi i32 [ %123, %122 ], [ %100, %115 ], [ %98, %95 ], [ %75, %91 ]
  %128 = trunc i32 %127 to i16
  switch i16 %128, label %149 [
    i16 43, label %129
    i16 37, label %132
  ]

129:                                              ; preds = %126
  %130 = sdiv i64 %79, 8
  %131 = tail call ptr @adjust_address_1(ptr noundef nonnull %76, i32 noundef %14, i64 noundef %130, i32 noundef 0, i32 noundef 1) #25
  br label %155

132:                                              ; preds = %126
  %133 = icmp eq i32 %14, %81
  br i1 %133, label %155, label %134

134:                                              ; preds = %132
  %135 = icmp ne i64 %79, 0
  %136 = icmp ne i32 %6, 0
  %137 = or i1 %136, %135
  br i1 %137, label %138, label %146

138:                                              ; preds = %134
  %139 = sdiv i64 %79, 32
  %140 = trunc i64 %139 to i32
  %141 = shl i32 %140, 2
  %142 = tail call zeroext i8 @validate_subreg(i32 noundef %14, i32 noundef %81, ptr noundef nonnull %76, i32 noundef %141) #25
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %480, label %144

144:                                              ; preds = %138
  %145 = tail call ptr @gen_rtx_SUBREG(i32 noundef %14, ptr noundef nonnull %76, i32 noundef %141) #25
  br label %155

146:                                              ; preds = %134
  %147 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %148 = tail call ptr %147(i32 noundef %14, ptr noundef nonnull %76) #25
  br label %166

149:                                              ; preds = %126
  %150 = icmp ugt i64 %4, 63
  %151 = shl nsw i64 -1, %4
  %152 = xor i64 %151, -1
  %153 = select i1 %150, i64 -1, i64 %152
  %154 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %76, i32 noundef %14, i64 noundef %153, i32 noundef 0)
  br label %155

155:                                              ; preds = %144, %132, %149, %129
  %156 = phi ptr [ %131, %129 ], [ %145, %144 ], [ %154, %149 ], [ %76, %132 ]
  %157 = icmp eq i32 %6, 0
  br i1 %157, label %166, label %158

158:                                              ; preds = %155
  %159 = load i32, ptr %156, align 8
  %160 = trunc i32 %159 to i16
  switch i16 %160, label %161 [
    i16 43, label %480
    i16 39, label %164
  ]

161:                                              ; preds = %158
  %162 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %163 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef %14, ptr noundef %162) #25
  br label %480

164:                                              ; preds = %158
  %165 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 40, i32 noundef 0, ptr noundef nonnull %156) #25
  br label %480

166:                                              ; preds = %146, %155
  %167 = phi ptr [ %148, %146 ], [ %156, %155 ]
  %168 = icmp eq i32 %14, %0
  br i1 %168, label %480, label %169

169:                                              ; preds = %166
  %170 = load i32, ptr %167, align 8
  %171 = trunc i32 %170 to i16
  switch i16 %171, label %176 [
    i16 30, label %172
    i16 32, label %172
  ]

172:                                              ; preds = %169, %169
  %173 = icmp eq i32 %5, 0
  %174 = select i1 %173, i32 98, i32 99
  %175 = tail call ptr @simplify_unary_operation(i32 noundef %174, i32 noundef %0, ptr noundef nonnull %167, i32 noundef %14) #25
  br label %480

176:                                              ; preds = %169
  %177 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !20
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %201, label %179

179:                                              ; preds = %176
  %180 = zext i32 %14 to i64
  %181 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %180
  %182 = load i8, ptr %181, align 1, !tbaa !16
  %183 = icmp ult i8 %182, 9
  br i1 %183, label %184, label %201

184:                                              ; preds = %179
  %185 = tail call i64 @nonzero_bits(ptr noundef nonnull %167, i32 noundef %14) #25
  %186 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %180
  %187 = load i64, ptr %186, align 8, !tbaa !83
  %188 = lshr i64 %187, 1
  %189 = xor i64 %188, -1
  %190 = and i64 %185, %189
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %201

192:                                              ; preds = %184
  %193 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef %0, ptr noundef nonnull %167) #25
  %194 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 98, i32 noundef %0, ptr noundef nonnull %167) #25
  %195 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %196 = tail call i32 @rtx_cost(ptr noundef %193, i32 noundef 23, i8 noundef zeroext %195) #25
  %197 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %198 = tail call i32 @rtx_cost(ptr noundef %194, i32 noundef 23, i8 noundef zeroext %197) #25
  %199 = icmp sgt i32 %196, %198
  %200 = select i1 %199, ptr %194, ptr %193
  br label %480

201:                                              ; preds = %184, %179, %176
  %202 = icmp eq i32 %5, 0
  %203 = select i1 %202, i32 98, i32 99
  %204 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %203, i32 noundef %0, ptr noundef nonnull %167) #25
  br label %480

205:                                              ; preds = %122, %117, %107, %99, %73
  %206 = icmp ne ptr %78, null
  %207 = icmp ne i64 %79, 0
  %208 = select i1 %206, i1 true, i1 %207
  %209 = icmp eq i32 %6, 0
  %210 = or i32 %7, %6
  %211 = icmp ne i32 %210, 0
  %212 = or i1 %211, %208
  %213 = icmp eq i32 %5, 0
  %214 = or i1 %213, %212
  br i1 %214, label %215, label %480

215:                                              ; preds = %205
  %216 = load i32, ptr %76, align 8
  %217 = and i32 %216, 65535
  %218 = icmp eq i32 %217, 43
  br i1 %218, label %219, label %230

219:                                              ; preds = %215
  br i1 %206, label %228, label %220

220:                                              ; preds = %219
  %221 = add i64 %79, %4
  %222 = zext i32 %77 to i64
  %223 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %222
  %224 = load i8, ptr %223, align 1, !tbaa !16
  %225 = zext i8 %224 to i64
  %226 = shl nuw nsw i64 %225, 3
  %227 = icmp ugt i64 %221, %226
  br i1 %227, label %480, label %230

228:                                              ; preds = %219
  %229 = icmp eq i64 %4, 1
  br i1 %229, label %230, label %480

230:                                              ; preds = %220, %228, %215
  br i1 %209, label %238, label %231

231:                                              ; preds = %230
  %232 = tail call i32 @mode_for_extraction(i32 noundef 0, i32 noundef -1) #25
  %233 = icmp eq i32 %232, 87
  br i1 %233, label %246, label %234

234:                                              ; preds = %231
  %235 = tail call i32 @mode_for_extraction(i32 noundef 0, i32 noundef 0) #25
  %236 = tail call i32 @mode_for_extraction(i32 noundef 0, i32 noundef 2) #25
  %237 = tail call i32 @mode_for_extraction(i32 noundef 0, i32 noundef 3) #25
  br label %246

238:                                              ; preds = %230
  br i1 %213, label %246, label %239

239:                                              ; preds = %238
  %240 = tail call i32 @mode_for_extraction(i32 noundef 2, i32 noundef -1) #25
  %241 = icmp eq i32 %240, 87
  br i1 %241, label %246, label %242

242:                                              ; preds = %239
  %243 = tail call i32 @mode_for_extraction(i32 noundef 2, i32 noundef 1) #25
  %244 = tail call i32 @mode_for_extraction(i32 noundef 2, i32 noundef 3) #25
  %245 = tail call i32 @mode_for_extraction(i32 noundef 2, i32 noundef 0) #25
  br label %246

246:                                              ; preds = %231, %234, %242, %239, %238
  %247 = phi i32 [ %245, %242 ], [ %12, %239 ], [ %12, %238 ], [ %12, %231 ], [ %237, %234 ]
  %248 = phi i32 [ %244, %242 ], [ %12, %239 ], [ %12, %238 ], [ %12, %231 ], [ %236, %234 ]
  %249 = phi i32 [ %243, %242 ], [ %12, %239 ], [ %12, %238 ], [ %12, %231 ], [ %235, %234 ]
  %250 = or i32 %6, %5
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %259

252:                                              ; preds = %246
  %253 = tail call i32 @mode_for_extraction(i32 noundef 1, i32 noundef -1) #25
  %254 = icmp eq i32 %253, 87
  br i1 %254, label %259, label %255

255:                                              ; preds = %252
  %256 = tail call i32 @mode_for_extraction(i32 noundef 1, i32 noundef 1) #25
  %257 = tail call i32 @mode_for_extraction(i32 noundef 1, i32 noundef 3) #25
  %258 = tail call i32 @mode_for_extraction(i32 noundef 1, i32 noundef 0) #25
  br label %259

259:                                              ; preds = %255, %252, %246
  %260 = phi i32 [ %247, %246 ], [ %258, %255 ], [ %247, %252 ]
  %261 = phi i32 [ %248, %246 ], [ %257, %255 ], [ %248, %252 ]
  %262 = phi i32 [ %249, %246 ], [ %256, %255 ], [ %249, %252 ]
  %263 = icmp eq i32 %0, 0
  br i1 %263, label %273, label %264

264:                                              ; preds = %259
  %265 = zext i32 %260 to i64
  %266 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %265
  %267 = load i8, ptr %266, align 1, !tbaa !16
  %268 = zext i32 %0 to i64
  %269 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %268
  %270 = load i8, ptr %269, align 1, !tbaa !16
  %271 = icmp ult i8 %267, %270
  %272 = select i1 %271, i32 %0, i32 %260
  br label %273

273:                                              ; preds = %264, %259
  %274 = phi i32 [ %260, %259 ], [ %272, %264 ]
  br i1 %206, label %275, label %289

275:                                              ; preds = %273
  %276 = load i32, ptr %78, align 8
  %277 = lshr i32 %276, 16
  %278 = and i32 %277, 255
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %289, label %280

280:                                              ; preds = %275
  %281 = zext i32 %261 to i64
  %282 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %281
  %283 = load i8, ptr %282, align 1, !tbaa !16
  %284 = zext i32 %278 to i64
  %285 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %284
  %286 = load i8, ptr %285, align 1, !tbaa !16
  %287 = icmp ult i8 %283, %286
  %288 = select i1 %287, i32 %278, i32 %261
  br label %289

289:                                              ; preds = %280, %275, %273
  %290 = phi i32 [ %261, %275 ], [ %261, %273 ], [ %288, %280 ]
  %291 = load i32, ptr %76, align 8
  %292 = and i32 %291, 65535
  %293 = icmp eq i32 %292, 43
  br i1 %293, label %294, label %335

294:                                              ; preds = %289
  %295 = tail call i32 @smallest_mode_for_size(i32 noundef %13, i32 noundef 2) #25
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %296
  %298 = load i8, ptr %297, align 1, !tbaa !16
  %299 = zext i8 %298 to i64
  %300 = shl nuw nsw i64 %299, 3
  %301 = srem i64 %79, %300
  %302 = add i64 %301, %4
  %303 = icmp ugt i64 %302, %300
  br i1 %303, label %304, label %321

304:                                              ; preds = %294, %310
  %305 = phi i64 [ %311, %310 ], [ %296, %294 ]
  %306 = getelementptr inbounds [87 x i8], ptr @mode_wider, i64 0, i64 %305
  %307 = load i8, ptr %306, align 1, !tbaa !16
  %308 = icmp eq i8 %307, 0
  br i1 %308, label %309, label %310

309:                                              ; preds = %304
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 6895, ptr noundef nonnull @.str.5) #25
  br label %310

310:                                              ; preds = %304, %309
  %311 = zext i8 %307 to i64
  %312 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %311
  %313 = load i8, ptr %312, align 1, !tbaa !16
  %314 = zext i8 %313 to i64
  %315 = shl nuw nsw i64 %314, 3
  %316 = srem i64 %79, %315
  %317 = add i64 %316, %4
  %318 = icmp ugt i64 %317, %315
  br i1 %318, label %304, label %319, !llvm.loop !212

319:                                              ; preds = %310
  %320 = zext i8 %307 to i32
  br label %321

321:                                              ; preds = %319, %294
  %322 = phi i32 [ %295, %294 ], [ %320, %319 ]
  %323 = icmp eq i32 %81, %322
  br i1 %323, label %341, label %324

324:                                              ; preds = %321
  %325 = getelementptr inbounds %struct.rtx_def, ptr %76, i64 0, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !16
  %327 = tail call i32 @mode_dependent_address_p(ptr noundef %326) #25
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %334

329:                                              ; preds = %324
  %330 = load i32, ptr %76, align 8
  %331 = and i32 %330, 134217728
  %332 = icmp ne i32 %331, 0
  %333 = or i1 %206, %332
  br i1 %333, label %334, label %335

334:                                              ; preds = %329, %324
  br label %335

335:                                              ; preds = %289, %334, %329
  %336 = phi i32 [ %274, %334 ], [ %322, %329 ], [ %262, %289 ]
  %337 = icmp eq i32 %336, 0
  %338 = icmp eq i32 %81, %336
  %339 = or i1 %206, %338
  %340 = select i1 %337, i1 true, i1 %339
  br i1 %340, label %341, label %344

341:                                              ; preds = %321, %335
  %342 = phi i32 [ %336, %335 ], [ %81, %321 ]
  %343 = load i32, ptr %76, align 8
  br label %375

344:                                              ; preds = %335
  %345 = zext i32 %336 to i64
  %346 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %345
  %347 = load i8, ptr %346, align 1, !tbaa !16
  %348 = zext i32 %77 to i64
  %349 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %348
  %350 = load i8, ptr %349, align 1, !tbaa !16
  %351 = icmp ult i8 %347, %350
  %352 = load i32, ptr %76, align 8
  %353 = and i32 %352, 65535
  %354 = icmp eq i32 %353, 43
  %355 = select i1 %351, i1 %354, i1 false
  br i1 %355, label %356, label %375

356:                                              ; preds = %344
  %357 = getelementptr inbounds %struct.rtx_def, ptr %76, i64 0, i32 1
  %358 = load ptr, ptr %357, align 8, !tbaa !16
  %359 = tail call i32 @mode_dependent_address_p(ptr noundef %358) #25
  %360 = icmp eq i32 %359, 0
  %361 = load i32, ptr %76, align 8
  %362 = and i32 %361, 134217728
  %363 = icmp eq i32 %362, 0
  %364 = select i1 %360, i1 %363, i1 false
  br i1 %364, label %365, label %375

365:                                              ; preds = %356
  %366 = load i8, ptr %346, align 1, !tbaa !16
  %367 = zext i8 %366 to i64
  %368 = shl nuw nsw i64 %367, 3
  %369 = sdiv i64 %79, %368
  %370 = srem i64 %79, %368
  %371 = shl nuw nsw i64 %367, 32
  %372 = mul i64 %371, %369
  %373 = ashr exact i64 %372, 32
  %374 = tail call ptr @adjust_address_1(ptr noundef nonnull %76, i32 noundef %336, i64 noundef %373, i32 noundef 0, i32 noundef 1) #25
  br label %458

375:                                              ; preds = %341, %356, %344
  %376 = phi i32 [ %342, %341 ], [ %336, %356 ], [ %336, %344 ]
  %377 = phi i32 [ %343, %341 ], [ %361, %356 ], [ %352, %344 ]
  %378 = and i32 %377, 65535
  %379 = icmp eq i32 %378, 43
  br i1 %379, label %408, label %380

380:                                              ; preds = %375
  %381 = lshr i32 %377, 16
  %382 = and i32 %381, 255
  %383 = icmp eq i32 %382, %376
  br i1 %383, label %395, label %384

384:                                              ; preds = %380
  br i1 %206, label %480, label %385

385:                                              ; preds = %384
  %386 = add i64 %79, %4
  %387 = zext i32 %376 to i64
  %388 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %387
  %389 = load i8, ptr %388, align 1, !tbaa !16
  %390 = zext i8 %389 to i64
  %391 = shl nuw nsw i64 %390, 3
  %392 = icmp ugt i64 %386, %391
  %393 = icmp slt i64 %79, 0
  %394 = or i1 %393, %392
  br i1 %394, label %480, label %399

395:                                              ; preds = %380
  %396 = icmp slt i64 %79, 0
  br i1 %396, label %480, label %397

397:                                              ; preds = %395
  %398 = add i64 %79, %4
  br label %399

399:                                              ; preds = %397, %385
  %400 = phi i64 [ %398, %397 ], [ %386, %385 ]
  %401 = icmp ugt i64 %400, 63
  %402 = select i1 %206, i1 true, i1 %401
  %403 = shl nsw i64 -1, %4
  %404 = xor i64 %403, -1
  %405 = shl i64 %404, %79
  %406 = select i1 %402, i64 -1, i64 %405
  %407 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %76, i32 noundef %376, i64 noundef %406, i32 noundef 0)
  br label %408

408:                                              ; preds = %375, %399
  %409 = phi ptr [ %76, %375 ], [ %407, %399 ]
  br i1 %206, label %410, label %458

410:                                              ; preds = %408
  %411 = zext i32 %290 to i64
  %412 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %411
  %413 = load i8, ptr %412, align 1, !tbaa !16
  %414 = load i32, ptr %78, align 8
  %415 = lshr i32 %414, 16
  %416 = and i32 %415, 255
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %417
  %419 = load i8, ptr %418, align 1, !tbaa !16
  %420 = icmp ugt i8 %413, %419
  br i1 %420, label %421, label %453

421:                                              ; preds = %410
  %422 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 99, i32 noundef %290, ptr noundef nonnull %78) #25
  %423 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !20
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %458, label %425

425:                                              ; preds = %421
  %426 = load i32, ptr %78, align 8
  %427 = lshr i32 %426, 16
  %428 = and i32 %427, 255
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %429
  %431 = load i8, ptr %430, align 1, !tbaa !16
  %432 = icmp ult i8 %431, 9
  br i1 %432, label %433, label %458

433:                                              ; preds = %425
  %434 = tail call i64 @nonzero_bits(ptr noundef nonnull %78, i32 noundef %428) #25
  %435 = load i32, ptr %78, align 8
  %436 = lshr i32 %435, 16
  %437 = and i32 %436, 255
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %438
  %440 = load i64, ptr %439, align 8, !tbaa !83
  %441 = lshr i64 %440, 1
  %442 = xor i64 %441, -1
  %443 = and i64 %434, %442
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %458

445:                                              ; preds = %433
  %446 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 98, i32 noundef %290, ptr noundef nonnull %78) #25
  %447 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %448 = tail call i32 @rtx_cost(ptr noundef %446, i32 noundef 23, i8 noundef zeroext %447) #25
  %449 = load i8, ptr @optimize_this_for_speed_p, align 1, !tbaa !16
  %450 = tail call i32 @rtx_cost(ptr noundef %422, i32 noundef 23, i8 noundef zeroext %449) #25
  %451 = icmp slt i32 %448, %450
  %452 = select i1 %451, ptr %446, ptr %422
  br label %458

453:                                              ; preds = %410
  %454 = icmp ult i8 %413, %419
  br i1 %454, label %455, label %471

455:                                              ; preds = %453
  %456 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %457 = tail call ptr %456(i32 noundef %290, ptr noundef nonnull %78) #25
  br label %458

458:                                              ; preds = %365, %408, %421, %425, %433, %445, %455
  %459 = phi ptr [ %409, %455 ], [ %409, %445 ], [ %409, %433 ], [ %409, %425 ], [ %409, %421 ], [ %409, %408 ], [ %374, %365 ]
  %460 = phi i64 [ %79, %455 ], [ %79, %445 ], [ %79, %433 ], [ %79, %425 ], [ %79, %421 ], [ %79, %408 ], [ %370, %365 ]
  %461 = phi ptr [ %457, %455 ], [ %452, %445 ], [ %422, %433 ], [ %422, %425 ], [ %422, %421 ], [ null, %408 ], [ null, %365 ]
  %462 = icmp eq ptr %461, null
  %463 = and i1 %74, %462
  br i1 %463, label %464, label %468

464:                                              ; preds = %458
  %465 = getelementptr inbounds %struct.rtx_def, ptr %3, i64 0, i32 1
  %466 = load i64, ptr %465, align 8, !tbaa !16
  %467 = icmp eq i64 %466, %460
  br i1 %467, label %471, label %469

468:                                              ; preds = %458
  br i1 %462, label %469, label %471

469:                                              ; preds = %464, %468
  %470 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %460) #25
  br label %471

471:                                              ; preds = %453, %464, %468, %469
  %472 = phi ptr [ %459, %469 ], [ %459, %468 ], [ %459, %464 ], [ %409, %453 ]
  %473 = phi ptr [ %470, %469 ], [ %461, %468 ], [ %3, %464 ], [ %78, %453 ]
  %474 = select i1 %213, i32 119, i32 120
  %475 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %4) #25
  %476 = tail call ptr @gen_rtx_fmt_eee_stat(i32 noundef %474, i32 noundef %274, ptr noundef %472, ptr noundef %475, ptr noundef %473) #25
  br i1 %209, label %477, label %480

477:                                              ; preds = %471
  %478 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %479 = tail call ptr %478(i32 noundef %0, ptr noundef %476) #25
  br label %480

480:                                              ; preds = %138, %471, %477, %395, %384, %385, %220, %228, %205, %166, %164, %161, %158, %201, %192, %172, %58
  %481 = phi ptr [ %175, %172 ], [ %200, %192 ], [ %204, %201 ], [ %60, %58 ], [ %163, %161 ], [ %165, %164 ], [ %156, %158 ], [ %167, %166 ], [ null, %205 ], [ null, %228 ], [ null, %220 ], [ null, %385 ], [ null, %384 ], [ null, %395 ], [ %476, %471 ], [ %479, %477 ], [ null, %138 ]
  ret ptr %481
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @extract_left_shift(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = lshr i32 %3, 16
  %6 = and i32 %5, 255
  %7 = trunc i32 %3 to i16
  switch i16 %7, label %73 [
    i16 65, label %8
    i16 51, label %40
    i16 64, label %40
    i16 49, label %47
    i16 62, label %47
    i16 63, label %47
    i16 61, label %47
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !16
  %12 = load i32, ptr %11, align 8
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 30
  br i1 %14, label %15, label %73

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !16
  %18 = sext i32 %1 to i64
  %19 = icmp slt i64 %17, %18
  br i1 %19, label %73, label %20

20:                                               ; preds = %15
  %21 = load ptr, ptr %9, align 8, !tbaa !16
  %22 = trunc i64 %17 to i32
  %23 = sub i32 %22, %1
  %24 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef 65, i32 noundef %6, ptr noundef %21, i32 noundef %23) #26
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %73

26:                                               ; preds = %20
  %27 = load i32, ptr %21, align 8
  %28 = lshr i32 %27, 16
  %29 = and i32 %28, 255
  %30 = sext i32 %23 to i64
  %31 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %30) #25
  %32 = tail call ptr @simplify_gen_binary(i32 noundef 65, i32 noundef %29, ptr noundef nonnull %21, ptr noundef %31) #25
  %33 = load i32, ptr %32, align 8
  %34 = lshr i32 %33, 16
  %35 = and i32 %34, 255
  %36 = icmp eq i32 %35, %6
  br i1 %36, label %73, label %37

37:                                               ; preds = %26
  %38 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %39 = tail call ptr %38(i32 noundef %6, ptr noundef nonnull %32) #25
  br label %73

40:                                               ; preds = %2, %2
  %41 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !16
  %43 = tail call fastcc ptr @extract_left_shift(ptr noundef %42, i32 noundef %1)
  %44 = icmp eq ptr %43, null
  br i1 %44, label %73, label %45

45:                                               ; preds = %40
  %46 = tail call ptr @simplify_gen_unary(i32 noundef %4, i32 noundef %6, ptr noundef nonnull %43, i32 noundef %6) #25
  br label %73

47:                                               ; preds = %2, %2, %2, %2
  %48 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %49 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = load i32, ptr %50, align 8
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 30
  br i1 %53, label %54, label %73

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.rtx_def, ptr %50, i64 0, i32 1
  %56 = load i64, ptr %55, align 8, !tbaa !16
  %57 = zext i32 %1 to i64
  %58 = shl nsw i64 -1, %57
  %59 = xor i64 %58, -1
  %60 = and i64 %56, %59
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %73

62:                                               ; preds = %54
  %63 = load ptr, ptr %48, align 8, !tbaa !16
  %64 = tail call fastcc ptr @extract_left_shift(ptr noundef %63, i32 noundef %1)
  %65 = icmp eq ptr %64, null
  br i1 %65, label %73, label %66

66:                                               ; preds = %62
  %67 = load ptr, ptr %49, align 8, !tbaa !16
  %68 = getelementptr inbounds %struct.rtx_def, ptr %67, i64 0, i32 1
  %69 = load i64, ptr %68, align 8, !tbaa !16
  %70 = ashr i64 %69, %57
  %71 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %70) #25
  %72 = tail call ptr @simplify_gen_binary(i32 noundef %4, i32 noundef %6, ptr noundef nonnull %64, ptr noundef %71) #25
  br label %73

73:                                               ; preds = %37, %26, %20, %15, %8, %40, %62, %54, %47, %2, %66, %45
  %74 = phi ptr [ %72, %66 ], [ %46, %45 ], [ null, %2 ], [ null, %47 ], [ null, %54 ], [ null, %62 ], [ null, %40 ], [ null, %8 ], [ null, %15 ], [ %24, %20 ], [ %39, %37 ], [ %32, %26 ]
  ret ptr %74
}

declare zeroext i8 @validate_subreg(i32 noundef, i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @rtx_cost(ptr noundef, i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

declare i32 @mode_for_extraction(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @smallest_mode_for_size(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_shift_const_1(i32 noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %8
  %10 = load i8, ptr %9, align 1, !tbaa !16
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %11, 3
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #25
  store i32 0, ptr %5, align 4, !tbaa !16
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #25
  store i64 0, ptr %6, align 8, !tbaa !83
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #25
  store i32 0, ptr %7, align 4, !tbaa !20
  %13 = icmp sgt i32 %3, -1
  %14 = shl nuw nsw i32 %11, 3
  %15 = icmp ugt i32 %14, %3
  %16 = select i1 %13, i1 %15, i1 false
  br i1 %16, label %17, label %920

17:                                               ; preds = %4
  %18 = icmp eq i32 %3, 0
  br i1 %18, label %824, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8
  %21 = getelementptr inbounds [87 x i8], ptr @mode_nunits, i64 0, i64 %8
  br label %22

22:                                               ; preds = %19, %166
  %23 = phi i32 [ %0, %19 ], [ %170, %166 ]
  %24 = phi ptr [ %2, %19 ], [ %169, %166 ]
  %25 = phi i32 [ %3, %19 ], [ %168, %166 ]
  %26 = phi i32 [ %1, %19 ], [ %167, %166 ]
  %27 = load i32, ptr %24, align 8
  %28 = and i32 %27, 65535
  %29 = icmp eq i32 %28, 25
  br i1 %29, label %920, label %30

30:                                               ; preds = %22
  %31 = icmp eq i32 %23, 69
  br i1 %31, label %32, label %48

32:                                               ; preds = %30
  %33 = load i8, ptr %9, align 1, !tbaa !16
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 3
  %36 = load i8, ptr %20, align 1, !tbaa !16
  %37 = add i8 %36, -12
  %38 = icmp ult i8 %37, 6
  br i1 %38, label %39, label %45

39:                                               ; preds = %32
  %40 = load i8, ptr %21, align 1, !tbaa !16
  %41 = trunc i32 %35 to i16
  %42 = zext i8 %40 to i16
  %43 = udiv i16 %41, %42
  %44 = zext i16 %43 to i32
  br label %45

45:                                               ; preds = %32, %39
  %46 = phi i32 [ %44, %39 ], [ %35, %32 ]
  %47 = sub i32 %46, %25
  br label %48

48:                                               ; preds = %45, %30
  %49 = phi i32 [ %47, %45 ], [ %25, %30 ]
  %50 = phi i32 [ 66, %45 ], [ %23, %30 ]
  %51 = load i32, ptr %5, align 4, !tbaa !16
  %52 = load i64, ptr %6, align 8, !tbaa !83
  %53 = tail call fastcc i32 @try_widen_shift_mode(i32 noundef %50, ptr noundef nonnull %24, i32 noundef %49, i32 noundef %1, i32 noundef %26, i32 noundef %51, i64 noundef %52)
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !16
  %57 = zext i8 %56 to i32
  %58 = shl nuw nsw i32 %57, 3
  %59 = add nsw i32 %58, -1
  %60 = icmp slt i32 %49, %58
  br i1 %60, label %66, label %61

61:                                               ; preds = %48
  switch i32 %50, label %64 [
    i32 67, label %70
    i32 66, label %62
  ]

62:                                               ; preds = %61
  %63 = urem i32 %49, %58
  br label %66

64:                                               ; preds = %61
  %65 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %824

66:                                               ; preds = %62, %48
  %67 = phi i32 [ %63, %62 ], [ %49, %48 ]
  %68 = load i32, ptr %7, align 4, !tbaa !20
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %73, label %817

70:                                               ; preds = %61
  %71 = load i32, ptr %7, align 4, !tbaa !20
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %74, label %817

73:                                               ; preds = %66
  switch i32 %50, label %128 [
    i32 67, label %74
    i32 68, label %101
    i32 65, label %110
  ]

74:                                               ; preds = %73, %70
  %75 = phi i32 [ %67, %73 ], [ %59, %70 ]
  %76 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %24, i32 noundef %53) #25
  %77 = load i8, ptr %55, align 1, !tbaa !16
  %78 = zext i8 %77 to i32
  %79 = shl nuw nsw i32 %78, 3
  %80 = icmp eq i32 %76, %79
  br i1 %80, label %817, label %81

81:                                               ; preds = %74
  %82 = tail call i32 @num_sign_bit_copies(ptr noundef nonnull %24, i32 noundef %53) #25
  %83 = add i32 %82, %75
  %84 = load i8, ptr %55, align 1, !tbaa !16
  %85 = zext i8 %84 to i32
  %86 = shl nuw nsw i32 %85, 3
  %87 = icmp ult i32 %83, %86
  %88 = add nsw i32 %86, -1
  %89 = select i1 %87, i32 %75, i32 %88
  %90 = icmp ult i8 %84, 9
  br i1 %90, label %91, label %128

91:                                               ; preds = %81
  %92 = tail call i64 @nonzero_bits(ptr noundef nonnull %24, i32 noundef %53) #25
  %93 = load i8, ptr %55, align 1, !tbaa !16
  %94 = zext i8 %93 to i64
  %95 = shl nuw nsw i64 %94, 3
  %96 = add nuw nsw i64 %95, 4294967295
  %97 = and i64 %96, 4294967295
  %98 = shl nuw i64 1, %97
  %99 = and i64 %98, %92
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %128

101:                                              ; preds = %73, %91
  %102 = phi i8 [ %93, %91 ], [ %56, %73 ]
  %103 = phi i32 [ %89, %91 ], [ %67, %73 ]
  %104 = icmp ult i8 %102, 9
  br i1 %104, label %105, label %128

105:                                              ; preds = %101
  %106 = tail call i64 @nonzero_bits(ptr noundef nonnull %24, i32 noundef %53) #25
  %107 = zext i32 %103 to i64
  %108 = lshr i64 %106, %107
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %120, label %128

110:                                              ; preds = %73
  %111 = icmp ult i8 %56, 9
  br i1 %111, label %112, label %128

112:                                              ; preds = %110
  %113 = tail call i64 @nonzero_bits(ptr noundef nonnull %24, i32 noundef %53) #25
  %114 = zext i32 %67 to i64
  %115 = shl i64 %113, %114
  %116 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %54
  %117 = load i64, ptr %116, align 8, !tbaa !83
  %118 = and i64 %115, %117
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %128

120:                                              ; preds = %112, %105
  %121 = phi i1 [ false, %112 ], [ true, %105 ]
  %122 = phi i32 [ 65, %112 ], [ 68, %105 ]
  %123 = phi i32 [ %67, %112 ], [ %103, %105 ]
  %124 = tail call i32 @side_effects_p(ptr noundef nonnull %24) #25
  %125 = icmp eq i32 %124, 0
  %126 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %127 = select i1 %125, ptr %126, ptr %24
  br label %128

128:                                              ; preds = %73, %91, %81, %101, %105, %120, %112, %110
  %129 = phi i1 [ false, %112 ], [ false, %110 ], [ %121, %120 ], [ true, %101 ], [ true, %105 ], [ false, %81 ], [ false, %91 ], [ false, %73 ]
  %130 = phi i32 [ 65, %112 ], [ 65, %110 ], [ %122, %120 ], [ 68, %101 ], [ 68, %105 ], [ 67, %81 ], [ 67, %91 ], [ %50, %73 ]
  %131 = phi i32 [ %67, %112 ], [ %67, %110 ], [ %123, %120 ], [ %103, %101 ], [ %103, %105 ], [ %89, %81 ], [ %89, %91 ], [ %67, %73 ]
  %132 = phi ptr [ %24, %112 ], [ %24, %110 ], [ %127, %120 ], [ %24, %101 ], [ %24, %105 ], [ %24, %81 ], [ %24, %91 ], [ %24, %73 ]
  %133 = load i32, ptr %132, align 8
  %134 = trunc i32 %133 to i16
  switch i16 %134, label %817 [
    i16 98, label %135
    i16 99, label %135
    i16 119, label %135
    i16 120, label %135
    i16 43, label %138
    i16 39, label %172
    i16 52, label %202
    i16 59, label %226
    i16 67, label %250
    i16 68, label %269
    i16 65, label %269
    i16 66, label %269
    i16 64, label %423
    i16 62, label %436
    i16 61, label %436
    i16 63, label %436
    i16 100, label %774
    i16 51, label %586
    i16 49, label %610
    i16 50, label %724
  ]

135:                                              ; preds = %128, %128, %128, %128
  %136 = tail call fastcc ptr @expand_compound_operation(ptr noundef nonnull %132)
  %137 = icmp eq ptr %136, %132
  br i1 %137, label %817, label %166

138:                                              ; preds = %128
  %139 = icmp eq i32 %130, 67
  %140 = add i32 %130, -67
  %141 = icmp ult i32 %140, 2
  br i1 %141, label %142, label %817

142:                                              ; preds = %138
  %143 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !16
  %145 = tail call i32 @mode_dependent_address_p(ptr noundef %144) #25
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %817

147:                                              ; preds = %142
  %148 = load i32, ptr %132, align 8
  %149 = and i32 %148, 134217728
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %817

151:                                              ; preds = %147
  %152 = zext i32 %26 to i64
  %153 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %152
  %154 = load i8, ptr %153, align 1, !tbaa !16
  %155 = zext i8 %154 to i32
  %156 = shl nuw nsw i32 %155, 3
  %157 = sub nsw i32 %156, %131
  %158 = tail call i32 @mode_for_size(i32 noundef %157, i32 noundef 2, i32 noundef 1) #25
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %817, label %160

160:                                              ; preds = %151
  %161 = sdiv i32 %131, 8
  %162 = sext i32 %161 to i64
  %163 = tail call ptr @adjust_address_1(ptr noundef nonnull %132, i32 noundef %158, i64 noundef %162, i32 noundef 0, i32 noundef 1) #25
  %164 = select i1 %139, i32 98, i32 99
  %165 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %164, i32 noundef %26, ptr noundef %163) #25
  br label %817

166:                                              ; preds = %314, %333, %350, %403, %196, %214, %238, %266, %429, %520, %607, %652, %669, %694, %722, %135
  %167 = phi i32 [ %26, %652 ], [ %26, %669 ], [ %26, %694 ], [ %26, %722 ], [ %26, %607 ], [ %26, %520 ], [ %26, %429 ], [ %26, %266 ], [ %26, %238 ], [ %26, %214 ], [ %201, %196 ], [ %26, %135 ], [ %26, %403 ], [ %26, %350 ], [ %26, %333 ], [ %26, %314 ]
  %168 = phi i32 [ %131, %652 ], [ %131, %669 ], [ %131, %694 ], [ %131, %722 ], [ %131, %607 ], [ %131, %520 ], [ %131, %429 ], [ %131, %266 ], [ %131, %238 ], [ %131, %214 ], [ %131, %196 ], [ %131, %135 ], [ %404, %403 ], [ %351, %350 ], [ %337, %333 ], [ %306, %314 ]
  %169 = phi ptr [ %653, %652 ], [ %670, %669 ], [ %695, %694 ], [ %723, %722 ], [ %609, %607 ], [ %521, %520 ], [ %435, %429 ], [ %268, %266 ], [ %249, %238 ], [ %225, %214 ], [ %177, %196 ], [ %136, %135 ], [ %406, %403 ], [ %352, %350 ], [ %334, %333 ], [ %322, %314 ]
  %170 = phi i32 [ %130, %652 ], [ %130, %669 ], [ 65, %694 ], [ 68, %722 ], [ 65, %607 ], [ %130, %520 ], [ %130, %429 ], [ 68, %266 ], [ %130, %238 ], [ %130, %214 ], [ %130, %196 ], [ %130, %135 ], [ %405, %403 ], [ %130, %350 ], [ %338, %333 ], [ 67, %314 ]
  %171 = icmp eq i32 %168, 0
  br i1 %171, label %817, label %22, !llvm.loop !213

172:                                              ; preds = %128
  %173 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %132) #25
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %817, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %177 = load ptr, ptr %176, align 8, !tbaa !16
  %178 = load i32, ptr %177, align 8
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %181
  %183 = load i8, ptr %182, align 1, !tbaa !16
  %184 = load i32, ptr %132, align 8
  %185 = lshr i32 %184, 16
  %186 = and i32 %185, 255
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %187
  %189 = load i8, ptr %188, align 1, !tbaa !16
  %190 = icmp ugt i8 %183, %189
  br i1 %190, label %191, label %817

191:                                              ; preds = %175
  %192 = zext i8 %183 to i32
  %193 = add nuw nsw i32 %192, 3
  %194 = xor i32 %193, %12
  %195 = icmp ult i32 %194, 4
  br i1 %195, label %196, label %817

196:                                              ; preds = %191
  %197 = zext i32 %26 to i64
  %198 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %197
  %199 = load i8, ptr %198, align 1, !tbaa !16
  %200 = icmp ugt i8 %183, %199
  %201 = select i1 %200, i32 %180, i32 %26
  br label %166

202:                                              ; preds = %128
  %203 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %204 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %205 = load ptr, ptr %204, align 8, !tbaa !16
  %206 = load i32, ptr %205, align 8
  %207 = and i32 %206, 65535
  %208 = icmp eq i32 %207, 30
  br i1 %208, label %209, label %817

209:                                              ; preds = %202
  %210 = getelementptr inbounds %struct.rtx_def, ptr %205, i64 0, i32 1
  %211 = load i64, ptr %210, align 8, !tbaa !16
  %212 = tail call i32 @exact_log2(i64 noundef %211) #25
  %213 = icmp sgt i32 %212, -1
  br i1 %213, label %214, label %817

214:                                              ; preds = %209
  %215 = load i32, ptr %132, align 8
  %216 = lshr i32 %215, 16
  %217 = and i32 %216, 255
  %218 = load ptr, ptr %203, align 8, !tbaa !16
  %219 = load ptr, ptr %204, align 8, !tbaa !16
  %220 = getelementptr inbounds %struct.rtx_def, ptr %219, i64 0, i32 1
  %221 = load i64, ptr %220, align 8, !tbaa !16
  %222 = tail call i32 @exact_log2(i64 noundef %221) #25
  %223 = sext i32 %222 to i64
  %224 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %223) #25
  %225 = tail call ptr @simplify_gen_binary(i32 noundef 65, i32 noundef %217, ptr noundef %218, ptr noundef %224) #25
  br label %166

226:                                              ; preds = %128
  %227 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %228 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %229 = load ptr, ptr %228, align 8, !tbaa !16
  %230 = load i32, ptr %229, align 8
  %231 = and i32 %230, 65535
  %232 = icmp eq i32 %231, 30
  br i1 %232, label %233, label %817

233:                                              ; preds = %226
  %234 = getelementptr inbounds %struct.rtx_def, ptr %229, i64 0, i32 1
  %235 = load i64, ptr %234, align 8, !tbaa !16
  %236 = tail call i32 @exact_log2(i64 noundef %235) #25
  %237 = icmp sgt i32 %236, -1
  br i1 %237, label %238, label %817

238:                                              ; preds = %233
  %239 = load i32, ptr %132, align 8
  %240 = lshr i32 %239, 16
  %241 = and i32 %240, 255
  %242 = load ptr, ptr %227, align 8, !tbaa !16
  %243 = load ptr, ptr %228, align 8, !tbaa !16
  %244 = getelementptr inbounds %struct.rtx_def, ptr %243, i64 0, i32 1
  %245 = load i64, ptr %244, align 8, !tbaa !16
  %246 = tail call i32 @exact_log2(i64 noundef %245) #25
  %247 = sext i32 %246 to i64
  %248 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %247) #25
  %249 = tail call ptr @simplify_gen_binary(i32 noundef 68, i32 noundef %241, ptr noundef %242, ptr noundef %248) #25
  br label %166

250:                                              ; preds = %128
  br i1 %129, label %251, label %269

251:                                              ; preds = %250
  %252 = load i8, ptr %9, align 1, !tbaa !16
  %253 = zext i8 %252 to i32
  %254 = shl nuw nsw i32 %253, 3
  %255 = add nsw i32 %254, -1
  %256 = icmp eq i32 %131, %255
  br i1 %256, label %257, label %269

257:                                              ; preds = %251
  %258 = lshr i32 %133, 16
  %259 = and i32 %258, 255
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %260
  %262 = load i8, ptr %261, align 1, !tbaa !16
  %263 = zext i8 %262 to i32
  %264 = shl nuw nsw i32 %263, 3
  %265 = icmp ult i32 %254, %264
  br i1 %265, label %269, label %266

266:                                              ; preds = %257
  %267 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !16
  br label %166

269:                                              ; preds = %250, %251, %257, %128, %128, %128
  %270 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %271 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %272 = load ptr, ptr %271, align 8, !tbaa !16
  %273 = load i32, ptr %272, align 8
  %274 = and i32 %273, 65535
  %275 = icmp eq i32 %274, 30
  br i1 %275, label %276, label %407

276:                                              ; preds = %269
  %277 = getelementptr inbounds %struct.rtx_def, ptr %272, i64 0, i32 1
  %278 = load i64, ptr %277, align 8, !tbaa !16
  %279 = icmp sgt i64 %278, -1
  br i1 %279, label %280, label %407

280:                                              ; preds = %276
  %281 = lshr i32 %133, 16
  %282 = and i32 %281, 255
  %283 = zext i32 %282 to i64
  %284 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %283
  %285 = load i8, ptr %284, align 1, !tbaa !16
  %286 = zext i8 %285 to i16
  %287 = shl nuw nsw i16 %286, 3
  %288 = zext i16 %287 to i64
  %289 = icmp ult i64 %278, %288
  br i1 %289, label %290, label %407

290:                                              ; preds = %280
  %291 = load i8, ptr %9, align 1, !tbaa !16
  %292 = zext i8 %291 to i32
  %293 = shl nuw nsw i32 %292, 3
  %294 = icmp ult i8 %291, 9
  br i1 %294, label %295, label %407

295:                                              ; preds = %290
  %296 = zext i32 %26 to i64
  %297 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %296
  %298 = load i8, ptr %297, align 1, !tbaa !16
  %299 = icmp ult i8 %298, 9
  br i1 %299, label %300, label %407

300:                                              ; preds = %295
  %301 = load i8, ptr %20, align 1, !tbaa !16
  %302 = add i8 %301, -12
  %303 = icmp ult i8 %302, 6
  br i1 %303, label %407, label %304

304:                                              ; preds = %300
  %305 = and i32 %133, 65535
  %306 = trunc i64 %278 to i32
  %307 = icmp eq i32 %130, 65
  %308 = icmp eq i32 %305, 67
  %309 = and i1 %307, %308
  br i1 %309, label %310, label %323

310:                                              ; preds = %304
  %311 = zext i16 %287 to i32
  %312 = sub nsw i32 %293, %311
  %313 = icmp eq i32 %131, %312
  br i1 %313, label %314, label %357

314:                                              ; preds = %310
  %315 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %296
  %316 = load i64, ptr %315, align 8, !tbaa !83
  %317 = and i64 %278, 4294967295
  %318 = shl nsw i64 -1, %317
  %319 = and i64 %316, %318
  %320 = load ptr, ptr %270, align 8, !tbaa !16
  %321 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %1, ptr noundef %320, i64 noundef %319)
  %322 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %1, ptr noundef %321, i32 noundef %131)
  br label %166, !llvm.loop !213

323:                                              ; preds = %304
  %324 = icmp eq i32 %130, 67
  %325 = icmp eq i32 %305, 65
  %326 = icmp eq i32 %282, %53
  %327 = and i1 %325, %326
  %328 = and i1 %324, %327
  br i1 %328, label %329, label %339

329:                                              ; preds = %323
  %330 = load ptr, ptr %270, align 8, !tbaa !16
  %331 = tail call i32 @num_sign_bit_copies(ptr noundef %330, i32 noundef %53) #25
  %332 = icmp ugt i32 %331, %306
  br i1 %332, label %333, label %339

333:                                              ; preds = %329
  %334 = load ptr, ptr %270, align 8, !tbaa !16
  %335 = sub i32 %131, %306
  %336 = icmp slt i32 %335, 0
  %337 = tail call i32 @llvm.abs.i32(i32 %335, i1 true)
  %338 = select i1 %336, i32 65, i32 67
  br label %166, !llvm.loop !213

339:                                              ; preds = %329, %323
  %340 = phi i1 [ true, %329 ], [ %324, %323 ]
  %341 = icmp eq i32 %130, %305
  br i1 %341, label %342, label %353

342:                                              ; preds = %339
  %343 = load i32, ptr %132, align 8
  %344 = lshr i32 %343, 16
  %345 = and i32 %344, 255
  %346 = icmp ne i32 %345, %1
  %347 = add i32 %130, -66
  %348 = icmp ult i32 %347, 3
  %349 = and i1 %348, %346
  br i1 %349, label %817, label %350

350:                                              ; preds = %342
  %351 = add i32 %131, %306
  %352 = load ptr, ptr %270, align 8, !tbaa !16
  br label %166, !llvm.loop !213

353:                                              ; preds = %339
  br i1 %340, label %817, label %354

354:                                              ; preds = %353
  %355 = icmp eq i32 %130, 66
  %356 = and i1 %355, %308
  br i1 %356, label %817, label %357

357:                                              ; preds = %310, %354
  %358 = phi i1 [ %355, %354 ], [ false, %310 ]
  %359 = load i8, ptr %297, align 1, !tbaa !16
  %360 = icmp ugt i8 %359, 8
  br i1 %360, label %817, label %361

361:                                              ; preds = %357
  %362 = load i32, ptr %132, align 8
  %363 = lshr i32 %362, 16
  %364 = and i32 %363, 255
  %365 = icmp eq i32 %364, %1
  br i1 %365, label %370, label %366

366:                                              ; preds = %361
  %367 = add nsw i32 %305, -66
  %368 = icmp ult i32 %367, 3
  %369 = or i1 %358, %368
  br i1 %369, label %817, label %370

370:                                              ; preds = %366, %361
  %371 = tail call i64 @nonzero_bits(ptr noundef nonnull %132, i32 noundef %364) #25
  %372 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %371) #25
  %373 = sext i32 %131 to i64
  %374 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %373) #25
  %375 = tail call ptr @simplify_const_binary_operation(i32 noundef %130, i32 noundef %1, ptr noundef %372, ptr noundef %374) #25
  %376 = icmp eq ptr %375, null
  br i1 %376, label %817, label %377

377:                                              ; preds = %370
  %378 = load i32, ptr %375, align 8
  %379 = and i32 %378, 65535
  %380 = icmp eq i32 %379, 30
  br i1 %380, label %381, label %817

381:                                              ; preds = %377
  %382 = getelementptr inbounds %struct.rtx_def, ptr %375, i64 0, i32 1
  %383 = load i64, ptr %382, align 8, !tbaa !16
  %384 = call fastcc i32 @merge_outer_ops(ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef 61, i64 noundef %383, i32 noundef %1, ptr noundef nonnull %7), !range !103
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %817, label %386

386:                                              ; preds = %381
  %387 = add nsw i32 %305, -69
  %388 = icmp ult i32 %387, -2
  %389 = xor i1 %129, %388
  %390 = sub i32 0, %306
  %391 = select i1 %389, i32 %306, i32 %390
  %392 = add i32 %391, %131
  %393 = icmp sgt i32 %392, 0
  br i1 %393, label %394, label %399

394:                                              ; preds = %386
  %395 = icmp eq i32 %305, 66
  %396 = and i1 %307, %395
  %397 = and i1 %129, %308
  %398 = or i1 %396, %397
  br i1 %398, label %403, label %399

399:                                              ; preds = %394, %386
  %400 = icmp slt i32 %392, 0
  %401 = tail call i32 @llvm.abs.i32(i32 %392, i1 true)
  %402 = select i1 %400, i32 %305, i32 %130
  br label %403

403:                                              ; preds = %399, %394
  %404 = phi i32 [ %392, %394 ], [ %401, %399 ]
  %405 = phi i32 [ %305, %394 ], [ %402, %399 ]
  %406 = load ptr, ptr %270, align 8, !tbaa !16
  br label %166, !llvm.loop !213

407:                                              ; preds = %300, %295, %290, %280, %276, %269
  %408 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %409 = and i32 %133, 65535
  %410 = icmp eq i32 %409, %130
  br i1 %410, label %411, label %817

411:                                              ; preds = %407
  %412 = load ptr, ptr %270, align 8, !tbaa !16
  %413 = load i32, ptr %412, align 8
  %414 = and i32 %413, 65535
  %415 = icmp ne i32 %414, 30
  %416 = or i1 %275, %415
  br i1 %416, label %817, label %417

417:                                              ; preds = %411
  %418 = sext i32 %131 to i64
  %419 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %418) #25
  %420 = tail call ptr @simplify_const_binary_operation(i32 noundef %130, i32 noundef %26, ptr noundef nonnull %412, ptr noundef %419) #25
  %421 = load ptr, ptr %408, align 8, !tbaa !16
  %422 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %130, i32 noundef %26, ptr noundef %420, ptr noundef %421) #25
  br label %817

423:                                              ; preds = %128
  %424 = zext i32 %26 to i64
  %425 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %424
  %426 = load i8, ptr %425, align 1, !tbaa !16
  %427 = add i8 %426, -12
  %428 = icmp ult i8 %427, 6
  br i1 %428, label %817, label %429

429:                                              ; preds = %423
  %430 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %431 = load ptr, ptr %430, align 8, !tbaa !16
  %432 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %424
  %433 = load i64, ptr %432, align 8, !tbaa !83
  %434 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %433) #25
  %435 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 63, i32 noundef %26, ptr noundef %431, ptr noundef %434) #25
  br label %166

436:                                              ; preds = %128, %128, %128
  %437 = and i32 %133, 65535
  %438 = icmp eq i32 %437, 62
  br i1 %438, label %439, label %484

439:                                              ; preds = %436
  %440 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %441 = load ptr, ptr %440, align 8, !tbaa !16
  %442 = load i32, ptr %441, align 8
  %443 = and i32 %442, 65535
  %444 = icmp eq i32 %443, 49
  br i1 %444, label %445, label %484

445:                                              ; preds = %439
  %446 = getelementptr inbounds %struct.rtx_def, ptr %441, i64 0, i32 1
  %447 = getelementptr inbounds %struct.rtx_def, ptr %441, i64 0, i32 1, i32 0, i32 0, i64 1
  %448 = load ptr, ptr %447, align 8, !tbaa !16
  %449 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %450 = icmp eq ptr %448, %449
  %451 = add i32 %130, -67
  %452 = icmp ult i32 %451, 2
  %453 = and i1 %450, %452
  br i1 %453, label %454, label %484

454:                                              ; preds = %445
  %455 = lshr i32 %133, 16
  %456 = and i32 %455, 255
  %457 = zext i32 %456 to i64
  %458 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %457
  %459 = load i8, ptr %458, align 1, !tbaa !16
  %460 = zext i8 %459 to i32
  %461 = shl nuw nsw i32 %460, 3
  %462 = add nsw i32 %461, -1
  %463 = icmp eq i32 %131, %462
  br i1 %463, label %464, label %484

464:                                              ; preds = %454
  %465 = load ptr, ptr %446, align 8, !tbaa !16
  %466 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %467 = load ptr, ptr %466, align 8, !tbaa !16
  %468 = tail call i32 @rtx_equal_p(ptr noundef %465, ptr noundef %467) #25
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %484, label %470

470:                                              ; preds = %464
  %471 = icmp eq i32 %130, 67
  %472 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %473 = load i32, ptr %132, align 8
  %474 = lshr i32 %473, 16
  %475 = and i32 %474, 255
  %476 = load ptr, ptr %472, align 8, !tbaa !16
  %477 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %478 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 84, i32 noundef %475, ptr noundef %476, ptr noundef %477) #25
  br i1 %471, label %479, label %817

479:                                              ; preds = %470
  %480 = load i32, ptr %478, align 8
  %481 = lshr i32 %480, 16
  %482 = and i32 %481, 255
  %483 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 51, i32 noundef %482, ptr noundef nonnull %478) #25
  br label %817

484:                                              ; preds = %464, %454, %445, %439, %436
  %485 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %486 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %487 = load ptr, ptr %486, align 8, !tbaa !16
  %488 = load i32, ptr %487, align 8
  %489 = and i32 %488, 65535
  %490 = icmp eq i32 %489, 30
  br i1 %490, label %491, label %522

491:                                              ; preds = %484
  %492 = icmp eq i32 %130, 67
  br i1 %492, label %493, label %503

493:                                              ; preds = %491
  %494 = load i32, ptr %132, align 8
  %495 = and i32 %494, 65535
  %496 = icmp eq i32 %495, 63
  br i1 %496, label %497, label %503

497:                                              ; preds = %493
  %498 = getelementptr inbounds %struct.rtx_def, ptr %487, i64 0, i32 1
  %499 = load i64, ptr %498, align 8, !tbaa !16
  %500 = tail call i64 @trunc_int_for_mode(i64 noundef %499, i32 noundef %53) #25
  %501 = icmp slt i64 %500, 0
  %502 = load ptr, ptr %486, align 8, !tbaa !16
  br i1 %501, label %527, label %503

503:                                              ; preds = %497, %493, %491
  %504 = phi ptr [ %502, %497 ], [ %487, %493 ], [ %487, %491 ]
  %505 = sext i32 %131 to i64
  %506 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %505) #25
  %507 = tail call ptr @simplify_const_binary_operation(i32 noundef %130, i32 noundef %1, ptr noundef %504, ptr noundef %506) #25
  %508 = icmp eq ptr %507, null
  br i1 %508, label %522, label %509

509:                                              ; preds = %503
  %510 = load i32, ptr %507, align 8
  %511 = and i32 %510, 65535
  %512 = icmp eq i32 %511, 30
  br i1 %512, label %513, label %522

513:                                              ; preds = %509
  %514 = load i32, ptr %132, align 8
  %515 = and i32 %514, 65535
  %516 = getelementptr inbounds %struct.rtx_def, ptr %507, i64 0, i32 1
  %517 = load i64, ptr %516, align 8, !tbaa !16
  %518 = call fastcc i32 @merge_outer_ops(ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef %515, i64 noundef %517, i32 noundef %1, ptr noundef nonnull %7), !range !103
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %522, label %520

520:                                              ; preds = %513
  %521 = load ptr, ptr %485, align 8, !tbaa !16
  br label %166

522:                                              ; preds = %513, %509, %503, %484
  %523 = load ptr, ptr %486, align 8, !tbaa !16
  %524 = load i32, ptr %523, align 8
  %525 = and i32 %524, 65535
  %526 = icmp eq i32 %525, 30
  br i1 %526, label %531, label %817

527:                                              ; preds = %497
  %528 = load i32, ptr %502, align 8
  %529 = and i32 %528, 65535
  %530 = icmp eq i32 %529, 30
  br i1 %530, label %533, label %817

531:                                              ; preds = %522
  %532 = icmp eq i32 %130, 67
  br i1 %532, label %533, label %543

533:                                              ; preds = %527, %531
  %534 = phi ptr [ %523, %531 ], [ %502, %527 ]
  %535 = load i32, ptr %132, align 8
  %536 = and i32 %535, 65535
  %537 = icmp eq i32 %536, 63
  br i1 %537, label %538, label %543

538:                                              ; preds = %533
  %539 = getelementptr inbounds %struct.rtx_def, ptr %534, i64 0, i32 1
  %540 = load i64, ptr %539, align 8, !tbaa !16
  %541 = tail call i64 @trunc_int_for_mode(i64 noundef %540, i32 noundef %53) #25
  %542 = icmp slt i64 %541, 0
  br i1 %542, label %817, label %543

543:                                              ; preds = %538, %533, %531
  %544 = load ptr, ptr %485, align 8, !tbaa !16
  %545 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef %130, i32 noundef %53, ptr noundef %544, i32 noundef %131)
  %546 = icmp eq ptr %545, null
  br i1 %546, label %547, label %561

547:                                              ; preds = %543
  %548 = load i32, ptr %544, align 8
  %549 = lshr i32 %548, 16
  %550 = and i32 %549, 255
  %551 = sext i32 %131 to i64
  %552 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %551) #25
  %553 = tail call ptr @simplify_gen_binary(i32 noundef %130, i32 noundef %550, ptr noundef nonnull %544, ptr noundef %552) #25
  %554 = load i32, ptr %553, align 8
  %555 = lshr i32 %554, 16
  %556 = and i32 %555, 255
  %557 = icmp eq i32 %556, %53
  br i1 %557, label %561, label %558

558:                                              ; preds = %547
  %559 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %560 = tail call ptr %559(i32 noundef %53, ptr noundef nonnull %553) #25
  br label %561

561:                                              ; preds = %543, %547, %558
  %562 = phi ptr [ %545, %543 ], [ %560, %558 ], [ %553, %547 ]
  %563 = load ptr, ptr %486, align 8, !tbaa !16
  %564 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef %130, i32 noundef %53, ptr noundef %563, i32 noundef %131)
  %565 = icmp eq ptr %564, null
  br i1 %565, label %566, label %580

566:                                              ; preds = %561
  %567 = load i32, ptr %563, align 8
  %568 = lshr i32 %567, 16
  %569 = and i32 %568, 255
  %570 = sext i32 %131 to i64
  %571 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %570) #25
  %572 = tail call ptr @simplify_gen_binary(i32 noundef %130, i32 noundef %569, ptr noundef nonnull %563, ptr noundef %571) #25
  %573 = load i32, ptr %572, align 8
  %574 = lshr i32 %573, 16
  %575 = and i32 %574, 255
  %576 = icmp eq i32 %575, %53
  br i1 %576, label %580, label %577

577:                                              ; preds = %566
  %578 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %579 = tail call ptr %578(i32 noundef %53, ptr noundef nonnull %572) #25
  br label %580

580:                                              ; preds = %561, %566, %577
  %581 = phi ptr [ %564, %561 ], [ %579, %577 ], [ %572, %566 ]
  %582 = load i32, ptr %132, align 8
  %583 = and i32 %582, 65535
  %584 = tail call ptr @simplify_gen_binary(i32 noundef %583, i32 noundef %53, ptr noundef %562, ptr noundef %581) #25
  %585 = tail call fastcc ptr @apply_distributive_law(ptr noundef %584)
  br label %817

586:                                              ; preds = %128
  br i1 %129, label %587, label %601

587:                                              ; preds = %586
  %588 = load i8, ptr %9, align 1, !tbaa !16
  %589 = zext i8 %588 to i32
  %590 = shl nuw nsw i32 %589, 3
  %591 = add nsw i32 %590, -1
  %592 = icmp eq i32 %131, %591
  br i1 %592, label %593, label %601

593:                                              ; preds = %587
  %594 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %595 = load ptr, ptr %594, align 8, !tbaa !16
  %596 = tail call i64 @nonzero_bits(ptr noundef %595, i32 noundef %1) #25
  %597 = icmp eq i64 %596, 1
  br i1 %597, label %598, label %601

598:                                              ; preds = %593
  %599 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %600 = load ptr, ptr %599, align 8, !tbaa !16
  br label %817

601:                                              ; preds = %593, %587, %586
  %602 = icmp eq i32 %130, 65
  br i1 %602, label %603, label %817

603:                                              ; preds = %601
  switch i32 %51, label %817 [
    i32 23, label %607
    i32 0, label %605
    i32 51, label %604
  ]

604:                                              ; preds = %603
  br label %605

605:                                              ; preds = %603, %604
  %606 = phi i32 [ 51, %603 ], [ 0, %604 ]
  store i32 %606, ptr %5, align 4, !tbaa !16
  br label %607

607:                                              ; preds = %605, %603
  %608 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %609 = load ptr, ptr %608, align 8, !tbaa !16
  br label %166

610:                                              ; preds = %128
  br i1 %129, label %611, label %632

611:                                              ; preds = %610
  %612 = load i8, ptr %9, align 1, !tbaa !16
  %613 = zext i8 %612 to i32
  %614 = shl nuw nsw i32 %613, 3
  %615 = add nsw i32 %614, -1
  %616 = icmp eq i32 %131, %615
  br i1 %616, label %617, label %632

617:                                              ; preds = %611
  %618 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %619 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %620 = load ptr, ptr %619, align 8, !tbaa !16
  %621 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  %622 = icmp eq ptr %620, %621
  br i1 %622, label %623, label %632

623:                                              ; preds = %617
  %624 = load ptr, ptr %618, align 8, !tbaa !16
  %625 = tail call i64 @nonzero_bits(ptr noundef %624, i32 noundef %1) #25
  %626 = icmp eq i64 %625, 1
  br i1 %626, label %627, label %632

627:                                              ; preds = %623
  %628 = call fastcc i32 @merge_outer_ops(ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef 63, i64 noundef 1, i32 noundef %1, ptr noundef nonnull %7), !range !103
  %629 = icmp eq i32 %628, 0
  br i1 %629, label %632, label %630

630:                                              ; preds = %627
  %631 = load ptr, ptr %618, align 8, !tbaa !16
  br label %817

632:                                              ; preds = %627, %623, %617, %611, %610
  %633 = add i32 %130, -67
  %634 = icmp ult i32 %633, 2
  %635 = icmp slt i32 %131, 64
  %636 = select i1 %634, i1 %635, i1 false
  br i1 %636, label %637, label %671

637:                                              ; preds = %632
  %638 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %639 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !16
  %641 = tail call i64 @nonzero_bits(ptr noundef %640, i32 noundef %1) #25
  %642 = zext i32 %131 to i64
  %643 = lshr i64 %641, %642
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %645, label %654

645:                                              ; preds = %637
  %646 = load ptr, ptr %639, align 8, !tbaa !16
  %647 = tail call i64 @nonzero_bits(ptr noundef %646, i32 noundef %1) #25
  %648 = load ptr, ptr %638, align 8, !tbaa !16
  %649 = tail call i64 @nonzero_bits(ptr noundef %648, i32 noundef %1) #25
  %650 = and i64 %649, %647
  %651 = icmp eq i64 %650, 0
  br i1 %651, label %652, label %654

652:                                              ; preds = %645
  %653 = load ptr, ptr %638, align 8, !tbaa !16
  br label %166

654:                                              ; preds = %637, %645
  %655 = load i8, ptr %9, align 1, !tbaa !16
  %656 = icmp ult i8 %655, 9
  br i1 %656, label %657, label %696

657:                                              ; preds = %654
  %658 = load ptr, ptr %638, align 8, !tbaa !16
  %659 = tail call i64 @nonzero_bits(ptr noundef %658, i32 noundef %1) #25
  %660 = lshr i64 %659, %642
  %661 = icmp eq i64 %660, 0
  br i1 %661, label %662, label %696

662:                                              ; preds = %657
  %663 = load ptr, ptr %638, align 8, !tbaa !16
  %664 = tail call i64 @nonzero_bits(ptr noundef %663, i32 noundef %1) #25
  %665 = load ptr, ptr %639, align 8, !tbaa !16
  %666 = tail call i64 @nonzero_bits(ptr noundef %665, i32 noundef %1) #25
  %667 = and i64 %666, %664
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %696

669:                                              ; preds = %662
  %670 = load ptr, ptr %639, align 8, !tbaa !16
  br label %166

671:                                              ; preds = %632
  %672 = icmp eq i32 %130, 65
  br i1 %672, label %673, label %696

673:                                              ; preds = %671
  %674 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %675 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %676 = load ptr, ptr %675, align 8, !tbaa !16
  %677 = load i32, ptr %676, align 8
  %678 = and i32 %677, 65535
  %679 = icmp eq i32 %678, 30
  br i1 %679, label %680, label %696

680:                                              ; preds = %673
  %681 = sext i32 %131 to i64
  %682 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %681) #25
  %683 = tail call ptr @simplify_const_binary_operation(i32 noundef 65, i32 noundef %1, ptr noundef nonnull %676, ptr noundef %682) #25
  %684 = icmp eq ptr %683, null
  br i1 %684, label %696, label %685

685:                                              ; preds = %680
  %686 = load i32, ptr %683, align 8
  %687 = and i32 %686, 65535
  %688 = icmp eq i32 %687, 30
  br i1 %688, label %689, label %696

689:                                              ; preds = %685
  %690 = getelementptr inbounds %struct.rtx_def, ptr %683, i64 0, i32 1
  %691 = load i64, ptr %690, align 8, !tbaa !16
  %692 = call fastcc i32 @merge_outer_ops(ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef 49, i64 noundef %691, i32 noundef %1, ptr noundef nonnull %7), !range !103
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %696, label %694

694:                                              ; preds = %689
  %695 = load ptr, ptr %674, align 8, !tbaa !16
  br label %166

696:                                              ; preds = %662, %657, %654, %689, %685, %680, %673, %671
  br i1 %129, label %697, label %817

697:                                              ; preds = %696
  %698 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %699 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %700 = load ptr, ptr %699, align 8, !tbaa !16
  %701 = load i32, ptr %700, align 8
  %702 = and i32 %701, 65535
  %703 = icmp eq i32 %702, 30
  br i1 %703, label %704, label %817

704:                                              ; preds = %697
  %705 = tail call zeroext i8 @mode_signbit_p(i32 noundef %1, ptr noundef nonnull %700) #25
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %817, label %707

707:                                              ; preds = %704
  %708 = load ptr, ptr %699, align 8, !tbaa !16
  %709 = sext i32 %131 to i64
  %710 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %709) #25
  %711 = tail call ptr @simplify_const_binary_operation(i32 noundef 68, i32 noundef %1, ptr noundef %708, ptr noundef %710) #25
  %712 = icmp eq ptr %711, null
  br i1 %712, label %817, label %713

713:                                              ; preds = %707
  %714 = load i32, ptr %711, align 8
  %715 = and i32 %714, 65535
  %716 = icmp eq i32 %715, 30
  br i1 %716, label %717, label %817

717:                                              ; preds = %713
  %718 = getelementptr inbounds %struct.rtx_def, ptr %711, i64 0, i32 1
  %719 = load i64, ptr %718, align 8, !tbaa !16
  %720 = call fastcc i32 @merge_outer_ops(ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef 63, i64 noundef %719, i32 noundef %1, ptr noundef nonnull %7), !range !103
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %817, label %722

722:                                              ; preds = %717
  %723 = load ptr, ptr %698, align 8, !tbaa !16
  br label %166

724:                                              ; preds = %128
  %725 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %726 = load ptr, ptr %725, align 8, !tbaa !16
  %727 = load i32, ptr %726, align 8
  %728 = and i32 %727, 65535
  %729 = icmp eq i32 %728, 67
  br i1 %729, label %730, label %817

730:                                              ; preds = %724
  %731 = lshr i32 %133, 16
  %732 = and i32 %731, 255
  %733 = zext i32 %732 to i64
  %734 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %733
  %735 = load i8, ptr %734, align 1, !tbaa !16
  %736 = zext i8 %735 to i32
  %737 = shl nuw nsw i32 %736, 3
  %738 = add nsw i32 %737, -1
  %739 = icmp eq i32 %131, %738
  br i1 %739, label %740, label %817

740:                                              ; preds = %730
  %741 = icmp eq i32 %130, 67
  %742 = add i32 %130, -67
  %743 = icmp ult i32 %742, 2
  br i1 %743, label %744, label %817

744:                                              ; preds = %740
  %745 = getelementptr inbounds %struct.rtx_def, ptr %726, i64 0, i32 1
  %746 = getelementptr inbounds %struct.rtx_def, ptr %726, i64 0, i32 1, i32 0, i32 0, i64 1
  %747 = load ptr, ptr %746, align 8, !tbaa !16
  %748 = load i32, ptr %747, align 8
  %749 = and i32 %748, 65535
  %750 = icmp eq i32 %749, 30
  br i1 %750, label %751, label %817

751:                                              ; preds = %744
  %752 = getelementptr inbounds %struct.rtx_def, ptr %747, i64 0, i32 1
  %753 = load i64, ptr %752, align 8, !tbaa !16
  %754 = sext i32 %131 to i64
  %755 = icmp eq i64 %753, %754
  br i1 %755, label %756, label %817

756:                                              ; preds = %751
  %757 = load ptr, ptr %745, align 8, !tbaa !16
  %758 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1, i32 0, i32 0, i64 1
  %759 = load ptr, ptr %758, align 8, !tbaa !16
  %760 = tail call i32 @rtx_equal_p(ptr noundef %757, ptr noundef %759) #25
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %817, label %762

762:                                              ; preds = %756
  %763 = load i32, ptr %132, align 8
  %764 = lshr i32 %763, 16
  %765 = and i32 %764, 255
  %766 = load ptr, ptr %758, align 8, !tbaa !16
  %767 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %768 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 83, i32 noundef %765, ptr noundef %766, ptr noundef %767) #25
  br i1 %741, label %769, label %817

769:                                              ; preds = %762
  %770 = load i32, ptr %768, align 8
  %771 = lshr i32 %770, 16
  %772 = and i32 %771, 255
  %773 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 51, i32 noundef %772, ptr noundef nonnull %768) #25
  br label %817

774:                                              ; preds = %128
  br i1 %129, label %775, label %817

775:                                              ; preds = %774
  %776 = getelementptr inbounds %struct.rtx_def, ptr %132, i64 0, i32 1
  %777 = load ptr, ptr %776, align 8, !tbaa !16
  %778 = load i32, ptr %777, align 8
  %779 = and i32 %778, 65535
  %780 = icmp eq i32 %779, 68
  br i1 %780, label %781, label %817

781:                                              ; preds = %775
  %782 = getelementptr inbounds %struct.rtx_def, ptr %777, i64 0, i32 1
  %783 = getelementptr inbounds %struct.rtx_def, ptr %777, i64 0, i32 1, i32 0, i32 0, i64 1
  %784 = load ptr, ptr %783, align 8, !tbaa !16
  %785 = load i32, ptr %784, align 8
  %786 = and i32 %785, 65535
  %787 = icmp eq i32 %786, 30
  br i1 %787, label %788, label %817

788:                                              ; preds = %781
  %789 = getelementptr inbounds %struct.rtx_def, ptr %784, i64 0, i32 1
  %790 = load i64, ptr %789, align 8, !tbaa !16
  %791 = lshr i32 %778, 16
  %792 = and i32 %791, 255
  %793 = zext i32 %792 to i64
  %794 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %793
  %795 = load i8, ptr %794, align 1, !tbaa !16
  %796 = zext i8 %795 to i32
  %797 = lshr i32 %133, 16
  %798 = and i32 %797, 255
  %799 = zext i32 %798 to i64
  %800 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %799
  %801 = load i8, ptr %800, align 1, !tbaa !16
  %802 = zext i8 %801 to i32
  %803 = sub nsw i32 %796, %802
  %804 = shl nsw i32 %803, 3
  %805 = sext i32 %804 to i64
  %806 = icmp slt i64 %790, %805
  br i1 %806, label %817, label %807

807:                                              ; preds = %788
  %808 = load ptr, ptr %782, align 8, !tbaa !16
  %809 = sext i32 %131 to i64
  %810 = add nsw i64 %790, %809
  %811 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %810) #25
  %812 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 68, i32 noundef %792, ptr noundef %808, ptr noundef %811) #25
  %813 = load i32, ptr %132, align 8
  %814 = lshr i32 %813, 16
  %815 = and i32 %814, 255
  %816 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 100, i32 noundef %815, ptr noundef %812) #25
  br label %817

817:                                              ; preds = %603, %370, %377, %381, %353, %357, %366, %354, %342, %70, %423, %74, %135, %191, %175, %172, %209, %202, %233, %226, %601, %717, %713, %707, %704, %697, %696, %128, %66, %166, %762, %769, %470, %479, %160, %417, %580, %807, %598, %630, %411, %527, %138, %151, %147, %142, %407, %538, %522, %740, %756, %751, %744, %730, %724, %788, %781, %775, %774
  %818 = phi i32 [ %26, %411 ], [ %26, %527 ], [ %26, %138 ], [ %26, %151 ], [ %26, %147 ], [ %26, %142 ], [ %26, %407 ], [ %26, %538 ], [ %26, %522 ], [ %26, %740 ], [ %26, %756 ], [ %26, %751 ], [ %26, %744 ], [ %26, %730 ], [ %26, %724 ], [ %26, %788 ], [ %26, %781 ], [ %26, %775 ], [ %26, %774 ], [ %26, %630 ], [ %26, %598 ], [ %26, %807 ], [ %26, %580 ], [ %26, %417 ], [ %26, %160 ], [ %26, %479 ], [ %26, %470 ], [ %26, %769 ], [ %26, %762 ], [ %167, %166 ], [ %26, %66 ], [ %26, %128 ], [ %26, %696 ], [ %26, %697 ], [ %26, %704 ], [ %26, %707 ], [ %26, %713 ], [ %26, %717 ], [ %26, %601 ], [ %26, %226 ], [ %26, %233 ], [ %26, %202 ], [ %26, %209 ], [ %26, %172 ], [ %26, %175 ], [ %26, %191 ], [ %26, %135 ], [ %26, %74 ], [ %26, %423 ], [ %26, %70 ], [ %26, %342 ], [ %26, %354 ], [ %26, %366 ], [ %26, %357 ], [ %26, %353 ], [ %26, %381 ], [ %26, %377 ], [ %26, %370 ], [ %26, %603 ]
  %819 = phi i32 [ %131, %411 ], [ %131, %527 ], [ %131, %138 ], [ %131, %151 ], [ %131, %147 ], [ %131, %142 ], [ %131, %407 ], [ %131, %538 ], [ %131, %522 ], [ %131, %740 ], [ %131, %756 ], [ %131, %751 ], [ %131, %744 ], [ %131, %730 ], [ %131, %724 ], [ %131, %788 ], [ %131, %781 ], [ %131, %775 ], [ %131, %774 ], [ 0, %630 ], [ 0, %598 ], [ 0, %807 ], [ 0, %580 ], [ 0, %417 ], [ 0, %160 ], [ 0, %479 ], [ 0, %470 ], [ 0, %769 ], [ 0, %762 ], [ 0, %166 ], [ %67, %66 ], [ %131, %128 ], [ %131, %696 ], [ %131, %697 ], [ %131, %704 ], [ %131, %707 ], [ %131, %713 ], [ %131, %717 ], [ %131, %601 ], [ %131, %226 ], [ %131, %233 ], [ %131, %202 ], [ %131, %209 ], [ %131, %172 ], [ %131, %175 ], [ %131, %191 ], [ %131, %135 ], [ 0, %74 ], [ %131, %423 ], [ %59, %70 ], [ %131, %342 ], [ %131, %354 ], [ %131, %366 ], [ %131, %357 ], [ %131, %353 ], [ %131, %381 ], [ %131, %377 ], [ %131, %370 ], [ %131, %603 ]
  %820 = phi ptr [ %132, %411 ], [ %132, %527 ], [ %132, %138 ], [ %132, %151 ], [ %132, %147 ], [ %132, %142 ], [ %132, %407 ], [ %132, %538 ], [ %132, %522 ], [ %132, %740 ], [ %132, %756 ], [ %132, %751 ], [ %132, %744 ], [ %132, %730 ], [ %132, %724 ], [ %132, %788 ], [ %132, %781 ], [ %132, %775 ], [ %132, %774 ], [ %631, %630 ], [ %600, %598 ], [ %816, %807 ], [ %585, %580 ], [ %422, %417 ], [ %165, %160 ], [ %483, %479 ], [ %478, %470 ], [ %773, %769 ], [ %768, %762 ], [ %169, %166 ], [ %24, %66 ], [ %132, %128 ], [ %132, %696 ], [ %132, %697 ], [ %132, %704 ], [ %132, %707 ], [ %132, %713 ], [ %132, %717 ], [ %132, %601 ], [ %132, %226 ], [ %132, %233 ], [ %132, %202 ], [ %132, %209 ], [ %132, %172 ], [ %132, %175 ], [ %132, %191 ], [ %132, %135 ], [ %24, %74 ], [ %132, %423 ], [ %24, %70 ], [ %132, %342 ], [ %132, %354 ], [ %132, %366 ], [ %132, %357 ], [ %132, %353 ], [ %132, %381 ], [ %132, %377 ], [ %132, %370 ], [ %132, %603 ]
  %821 = phi i32 [ %130, %411 ], [ 67, %527 ], [ %130, %138 ], [ %130, %151 ], [ %130, %147 ], [ %130, %142 ], [ %130, %407 ], [ 67, %538 ], [ %130, %522 ], [ %130, %740 ], [ %130, %756 ], [ %130, %751 ], [ %130, %744 ], [ %130, %730 ], [ %130, %724 ], [ 68, %788 ], [ 68, %781 ], [ 68, %775 ], [ %130, %774 ], [ 68, %630 ], [ 68, %598 ], [ 68, %807 ], [ %130, %580 ], [ %130, %417 ], [ %130, %160 ], [ 67, %479 ], [ 68, %470 ], [ 67, %769 ], [ 68, %762 ], [ %170, %166 ], [ %50, %66 ], [ %130, %128 ], [ %130, %696 ], [ 68, %697 ], [ 68, %704 ], [ 68, %707 ], [ 68, %713 ], [ 68, %717 ], [ %130, %601 ], [ %130, %226 ], [ %130, %233 ], [ %130, %202 ], [ %130, %209 ], [ %130, %172 ], [ %130, %175 ], [ %130, %191 ], [ %130, %135 ], [ 67, %74 ], [ %130, %423 ], [ 67, %70 ], [ %130, %342 ], [ 66, %354 ], [ %130, %366 ], [ %130, %357 ], [ %130, %353 ], [ %130, %381 ], [ %130, %377 ], [ %130, %370 ], [ 65, %603 ]
  %822 = load i32, ptr %5, align 4, !tbaa !16
  %823 = load i64, ptr %6, align 8, !tbaa !83
  br label %824

824:                                              ; preds = %817, %17, %64
  %825 = phi i64 [ %52, %64 ], [ 0, %17 ], [ %823, %817 ]
  %826 = phi i32 [ %51, %64 ], [ 0, %17 ], [ %822, %817 ]
  %827 = phi i32 [ %26, %64 ], [ %1, %17 ], [ %818, %817 ]
  %828 = phi i32 [ 0, %64 ], [ 0, %17 ], [ %819, %817 ]
  %829 = phi ptr [ %65, %64 ], [ %2, %17 ], [ %820, %817 ]
  %830 = phi i32 [ %50, %64 ], [ %0, %17 ], [ %821, %817 ]
  %831 = tail call fastcc i32 @try_widen_shift_mode(i32 noundef %830, ptr noundef %829, i32 noundef %828, i32 noundef %1, i32 noundef %827, i32 noundef %826, i64 noundef %825)
  %832 = icmp eq i32 %826, 0
  %833 = icmp eq i32 %830, %0
  %834 = icmp eq i32 %828, %3
  %835 = and i1 %833, %834
  %836 = icmp eq ptr %829, %2
  %837 = and i1 %835, %836
  %838 = and i1 %837, %832
  br i1 %838, label %839, label %844

839:                                              ; preds = %824
  %840 = load i32, ptr %2, align 8
  %841 = lshr i32 %840, 16
  %842 = and i32 %841, 255
  %843 = icmp eq i32 %831, %842
  br i1 %843, label %920, label %844

844:                                              ; preds = %839, %824
  %845 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %846 = tail call ptr %845(i32 noundef %831, ptr noundef %829) #25
  %847 = icmp eq ptr %846, null
  br i1 %847, label %920, label %848

848:                                              ; preds = %844
  %849 = load i32, ptr %846, align 8
  %850 = and i32 %849, 65535
  %851 = icmp eq i32 %850, 25
  br i1 %851, label %920, label %852

852:                                              ; preds = %848
  br i1 %832, label %856, label %853

853:                                              ; preds = %852
  %854 = tail call fastcc ptr @simplify_shift_const_1(i32 noundef %830, i32 noundef %831, ptr noundef nonnull %846, i32 noundef %828)
  %855 = icmp eq ptr %854, null
  br i1 %855, label %856, label %860

856:                                              ; preds = %852, %853
  %857 = sext i32 %828 to i64
  %858 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %857) #25
  %859 = tail call ptr @simplify_gen_binary(i32 noundef %830, i32 noundef %831, ptr noundef nonnull %846, ptr noundef %858) #25
  br label %860

860:                                              ; preds = %856, %853
  %861 = phi ptr [ %859, %856 ], [ %854, %853 ]
  %862 = icmp ne i32 %0, 68
  %863 = icmp eq i32 %831, %1
  %864 = select i1 %862, i1 true, i1 %863
  br i1 %864, label %885, label %865

865:                                              ; preds = %860
  %866 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %8
  %867 = load i64, ptr %866, align 8, !tbaa !83
  %868 = zext i32 %3 to i64
  %869 = lshr i64 %867, %868
  %870 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %831, ptr noundef %861, i64 noundef %869)
  %871 = icmp eq ptr %870, null
  br i1 %871, label %872, label %885

872:                                              ; preds = %865
  %873 = load i32, ptr %861, align 8
  %874 = lshr i32 %873, 16
  %875 = and i32 %874, 255
  %876 = tail call ptr @gen_int_mode(i64 noundef %869, i32 noundef %831) #25
  %877 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %875, ptr noundef nonnull %861, ptr noundef %876) #25
  %878 = load i32, ptr %877, align 8
  %879 = lshr i32 %878, 16
  %880 = and i32 %879, 255
  %881 = icmp eq i32 %880, %831
  br i1 %881, label %885, label %882

882:                                              ; preds = %872
  %883 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %884 = tail call ptr %883(i32 noundef %831, ptr noundef nonnull %877) #25
  br label %885

885:                                              ; preds = %882, %872, %865, %860
  %886 = phi ptr [ %861, %860 ], [ %870, %865 ], [ %884, %882 ], [ %877, %872 ]
  %887 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %888 = tail call ptr %887(i32 noundef %1, ptr noundef %886) #25
  %889 = load i32, ptr %7, align 4, !tbaa !20
  %890 = icmp eq i32 %889, 0
  br i1 %890, label %893, label %891

891:                                              ; preds = %885
  %892 = tail call ptr @simplify_gen_unary(i32 noundef 64, i32 noundef %1, ptr noundef %888, i32 noundef %1) #25
  br label %893

893:                                              ; preds = %891, %885
  %894 = phi ptr [ %892, %891 ], [ %888, %885 ]
  br i1 %832, label %920, label %895

895:                                              ; preds = %893
  %896 = sext i32 %826 to i64
  %897 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %896
  %898 = load i32, ptr %897, align 4, !tbaa !16
  %899 = icmp eq i32 %898, 4
  br i1 %899, label %905, label %900

900:                                              ; preds = %895
  %901 = load i8, ptr %9, align 1, !tbaa !16
  %902 = icmp ult i8 %901, 8
  br i1 %902, label %903, label %905

903:                                              ; preds = %900
  %904 = tail call i64 @trunc_int_for_mode(i64 noundef %825, i32 noundef %1) #25
  br label %905

905:                                              ; preds = %903, %900, %895
  %906 = phi i64 [ %904, %903 ], [ %825, %900 ], [ %825, %895 ]
  switch i32 %826, label %914 [
    i32 61, label %907
    i32 23, label %909
  ]

907:                                              ; preds = %905
  %908 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %1, ptr noundef %894, i64 noundef %906)
  br label %920

909:                                              ; preds = %905
  %910 = tail call i32 @side_effects_p(ptr noundef %894) #25
  %911 = icmp eq i32 %910, 0
  br i1 %911, label %912, label %920

912:                                              ; preds = %909
  %913 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %906) #25
  br label %920

914:                                              ; preds = %905
  br i1 %899, label %915, label %917

915:                                              ; preds = %914
  %916 = tail call ptr @simplify_gen_unary(i32 noundef %826, i32 noundef %1, ptr noundef %894, i32 noundef %1) #25
  br label %920

917:                                              ; preds = %914
  %918 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %906) #25
  %919 = tail call ptr @simplify_gen_binary(i32 noundef %826, i32 noundef %1, ptr noundef %894, ptr noundef %918) #25
  br label %920

920:                                              ; preds = %22, %893, %912, %909, %917, %915, %907, %844, %848, %839, %4
  %921 = phi ptr [ null, %4 ], [ null, %839 ], [ null, %848 ], [ null, %844 ], [ %908, %907 ], [ %894, %909 ], [ %913, %912 ], [ %916, %915 ], [ %919, %917 ], [ %894, %893 ], [ null, %22 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #25
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #25
  ret ptr %921
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @try_widen_shift_mode(i32 noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i64 noundef %6) unnamed_addr #9 {
  %8 = icmp eq i32 %3, %4
  br i1 %8, label %52, label %9

9:                                                ; preds = %7
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !16
  %13 = zext i32 %3 to i64
  %14 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %13
  %15 = load i8, ptr %14, align 1, !tbaa !16
  %16 = icmp ugt i8 %12, %15
  br i1 %16, label %18, label %17

17:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 9287, ptr noundef nonnull @.str.5) #25
  br label %18

18:                                               ; preds = %9, %17
  switch i32 %0, label %52 [
    i32 67, label %19
    i32 68, label %29
    i32 66, label %50
    i32 69, label %51
  ]

19:                                               ; preds = %18
  %20 = tail call i32 @num_sign_bit_copies(ptr noundef %1, i32 noundef %4) #25
  %21 = load i8, ptr %11, align 1, !tbaa !16
  %22 = zext i8 %21 to i32
  %23 = load i8, ptr %14, align 1, !tbaa !16
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %22, %24
  %26 = shl nsw i32 %25, 3
  %27 = icmp ugt i32 %20, %26
  %28 = select i1 %27, i32 %4, i32 %3
  br label %52

29:                                               ; preds = %18
  %30 = load i8, ptr %11, align 1, !tbaa !16
  %31 = icmp ult i8 %30, 9
  br i1 %31, label %32, label %39

32:                                               ; preds = %29
  %33 = tail call i64 @nonzero_bits(ptr noundef %1, i32 noundef %4) #25
  %34 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %13
  %35 = load i64, ptr %34, align 8, !tbaa !83
  %36 = xor i64 %35, -1
  %37 = and i64 %33, %36
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %52, label %39

39:                                               ; preds = %32, %29
  %40 = icmp eq i32 %5, 61
  br i1 %40, label %41, label %50

41:                                               ; preds = %39
  %42 = tail call i32 @low_bitmask_len(i32 noundef %3, i64 noundef %6) #25
  %43 = icmp sgt i32 %42, -1
  br i1 %43, label %44, label %50

44:                                               ; preds = %41
  %45 = load i8, ptr %14, align 1, !tbaa !16
  %46 = zext i8 %45 to i32
  %47 = shl nuw nsw i32 %46, 3
  %48 = sub nsw i32 %47, %42
  %49 = icmp slt i32 %48, %2
  br i1 %49, label %50, label %52

50:                                               ; preds = %44, %41, %39, %18
  br label %52

51:                                               ; preds = %18
  tail call void @fancy_abort(ptr noundef nonnull @.str.4, i32 noundef 9323, ptr noundef nonnull @.str.5) #25
  br label %52

52:                                               ; preds = %44, %51, %18, %32, %19, %7, %50
  %53 = phi i32 [ %3, %50 ], [ %3, %7 ], [ %28, %19 ], [ %4, %32 ], [ %4, %18 ], [ %4, %51 ], [ %4, %44 ]
  ret i32 %53
}

declare ptr @simplify_const_binary_operation(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @merge_outer_ops(ptr nocapture noundef %0, ptr nocapture noundef %1, i32 noundef %2, i64 noundef %3, i32 noundef %4, ptr nocapture noundef writeonly %5) unnamed_addr #9 {
  %7 = load i32, ptr %0, align 4, !tbaa !16
  %8 = load i64, ptr %1, align 8, !tbaa !83
  %9 = zext i32 %4 to i64
  %10 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %9
  %11 = load i64, ptr %10, align 8, !tbaa !83
  %12 = and i64 %11, %8
  %13 = icmp eq i32 %7, 61
  %14 = select i1 %13, i64 %12, i64 %11
  %15 = and i64 %14, %3
  %16 = icmp eq i32 %2, 0
  %17 = icmp eq i32 %7, 23
  %18 = or i1 %16, %17
  br i1 %18, label %68, label %19

19:                                               ; preds = %6
  %20 = icmp eq i32 %7, 0
  br i1 %20, label %53, label %21

21:                                               ; preds = %19
  %22 = icmp eq i32 %7, %2
  br i1 %22, label %23, label %33

23:                                               ; preds = %21
  switch i32 %2, label %53 [
    i32 61, label %24
    i32 62, label %26
    i32 63, label %28
    i32 49, label %30
    i32 51, label %32
  ]

24:                                               ; preds = %23
  %25 = and i64 %12, %3
  br label %53

26:                                               ; preds = %23
  %27 = or i64 %15, %12
  br label %53

28:                                               ; preds = %23
  %29 = xor i64 %15, %12
  br label %53

30:                                               ; preds = %23
  %31 = add nsw i64 %15, %12
  br label %53

32:                                               ; preds = %23
  br label %53

33:                                               ; preds = %21
  %34 = and i32 %7, -3
  %35 = icmp ne i32 %34, 49
  %36 = and i32 %2, -3
  %37 = icmp ne i32 %36, 49
  %38 = and i1 %37, %35
  %39 = icmp eq i64 %12, %15
  %40 = select i1 %38, i1 %39, i1 false
  br i1 %40, label %41, label %68

41:                                               ; preds = %33
  switch i32 %7, label %53 [
    i32 62, label %42
    i32 63, label %45
    i32 61, label %50
  ]

42:                                               ; preds = %41
  %43 = icmp eq i32 %2, 61
  %44 = select i1 %43, i32 23, i32 62
  br label %53

45:                                               ; preds = %41
  %46 = icmp eq i32 %2, 61
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  store i32 1, ptr %5, align 4, !tbaa !20
  br label %53

48:                                               ; preds = %45
  %49 = xor i64 %12, -1
  br label %53

50:                                               ; preds = %41
  %51 = icmp eq i32 %2, 62
  br i1 %51, label %53, label %52

52:                                               ; preds = %50
  store i32 1, ptr %5, align 4, !tbaa !20
  br label %53

53:                                               ; preds = %42, %50, %19, %48, %47, %52, %41, %24, %26, %28, %30, %32, %23
  %54 = phi i32 [ %2, %23 ], [ 0, %32 ], [ 49, %30 ], [ 63, %28 ], [ 62, %26 ], [ 61, %24 ], [ %7, %41 ], [ 61, %52 ], [ 61, %47 ], [ 61, %48 ], [ %2, %19 ], [ %44, %42 ], [ 23, %50 ]
  %55 = phi i64 [ %12, %23 ], [ %12, %32 ], [ %31, %30 ], [ %29, %28 ], [ %27, %26 ], [ %25, %24 ], [ %12, %41 ], [ %12, %52 ], [ %12, %47 ], [ %49, %48 ], [ %15, %19 ], [ %12, %42 ], [ %12, %50 ]
  %56 = and i64 %55, %11
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %53
  switch i32 %54, label %65 [
    i32 63, label %64
    i32 62, label %64
    i32 49, label %64
    i32 61, label %59
  ]

59:                                               ; preds = %58
  store i32 23, ptr %0, align 4, !tbaa !16
  br label %66

60:                                               ; preds = %53
  %61 = icmp eq i32 %54, 61
  %62 = icmp eq i64 %56, %11
  %63 = and i1 %62, %61
  br i1 %63, label %64, label %65

64:                                               ; preds = %58, %58, %58, %60
  store i32 0, ptr %0, align 4, !tbaa !16
  br label %68

65:                                               ; preds = %58, %60
  store i32 %54, ptr %0, align 4, !tbaa !16
  switch i32 %54, label %66 [
    i32 51, label %68
    i32 0, label %68
  ]

66:                                               ; preds = %59, %65
  %67 = tail call i64 @trunc_int_for_mode(i64 noundef %56, i32 noundef %4) #25
  store i64 %67, ptr %1, align 8, !tbaa !83
  br label %68

68:                                               ; preds = %64, %66, %65, %65, %33, %6
  %69 = phi i32 [ 1, %6 ], [ 0, %33 ], [ 1, %65 ], [ 1, %65 ], [ 1, %66 ], [ 1, %64 ]
  ret i32 %69
}

declare zeroext i8 @mode_signbit_p(i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @low_bitmask_len(i32 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @simplify_and_const_int_1(i32 noundef %0, ptr noundef %1, i64 noundef %2) unnamed_addr #9 {
  %4 = load i32, ptr %1, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 25
  br i1 %6, label %125, label %7

7:                                                ; preds = %3
  %8 = tail call fastcc ptr @force_to_mode(ptr noundef nonnull %1, i32 noundef %0, i64 noundef %2, i32 noundef 0)
  %9 = load i32, ptr %8, align 8
  %10 = trunc i32 %9 to i16
  switch i16 %10, label %16 [
    i16 25, label %125
    i16 30, label %11
  ]

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %13 = load i64, ptr %12, align 8, !tbaa !16
  %14 = and i64 %13, %2
  %15 = tail call ptr @gen_int_mode(i64 noundef %14, i32 noundef %0) #25
  br label %125

16:                                               ; preds = %7
  %17 = tail call i64 @nonzero_bits(ptr noundef nonnull %8, i32 noundef %0) #25
  %18 = zext i32 %0 to i64
  %19 = getelementptr inbounds [87 x i64], ptr @mode_mask_array, i64 0, i64 %18
  %20 = load i64, ptr %19, align 8, !tbaa !83
  %21 = and i64 %20, %17
  %22 = and i64 %21, %2
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  br label %125

26:                                               ; preds = %16
  %27 = load i32, ptr %8, align 8
  %28 = and i32 %27, 65535
  %29 = icmp eq i32 %28, 51
  br i1 %29, label %30, label %41

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %32 = load ptr, ptr %31, align 8, !tbaa !16
  %33 = tail call i64 @nonzero_bits(ptr noundef %32, i32 noundef %0) #25
  %34 = icmp eq i64 %33, 1
  br i1 %34, label %35, label %41

35:                                               ; preds = %30
  %36 = tail call i32 @exact_log2(i64 noundef %22) #25
  %37 = icmp sgt i32 %36, -1
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = load ptr, ptr %31, align 8, !tbaa !16
  %40 = tail call fastcc ptr @simplify_shift_const(ptr noundef null, i32 noundef 65, i32 noundef %0, ptr noundef %39, i32 noundef %36)
  br label %125

41:                                               ; preds = %35, %30, %26
  %42 = load i32, ptr %8, align 8
  %43 = and i32 %42, 65535
  %44 = trunc i32 %42 to i16
  switch i16 %44, label %108 [
    i16 62, label %45
    i16 63, label %45
    i16 49, label %93
  ]

45:                                               ; preds = %41, %41
  %46 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %47 = lshr i32 %42, 16
  %48 = and i32 %47, 255
  %49 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !16
  %51 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %48, ptr noundef %50, i64 noundef %22)
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %66

53:                                               ; preds = %45
  %54 = load i32, ptr %50, align 8
  %55 = lshr i32 %54, 16
  %56 = and i32 %55, 255
  %57 = tail call ptr @gen_int_mode(i64 noundef %22, i32 noundef %48) #25
  %58 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %56, ptr noundef nonnull %50, ptr noundef %57) #25
  %59 = load i32, ptr %58, align 8
  %60 = lshr i32 %59, 16
  %61 = and i32 %60, 255
  %62 = icmp eq i32 %61, %48
  br i1 %62, label %66, label %63

63:                                               ; preds = %53
  %64 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %65 = tail call ptr %64(i32 noundef %48, ptr noundef nonnull %58) #25
  br label %66

66:                                               ; preds = %45, %53, %63
  %67 = phi ptr [ %51, %45 ], [ %65, %63 ], [ %58, %53 ]
  %68 = load i32, ptr %8, align 8
  %69 = lshr i32 %68, 16
  %70 = and i32 %69, 255
  %71 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1, i32 0, i32 0, i64 1
  %72 = load ptr, ptr %71, align 8, !tbaa !16
  %73 = tail call fastcc ptr @simplify_and_const_int_1(i32 noundef %70, ptr noundef %72, i64 noundef %22)
  %74 = icmp eq ptr %73, null
  br i1 %74, label %75, label %88

75:                                               ; preds = %66
  %76 = load i32, ptr %72, align 8
  %77 = lshr i32 %76, 16
  %78 = and i32 %77, 255
  %79 = tail call ptr @gen_int_mode(i64 noundef %22, i32 noundef %70) #25
  %80 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %78, ptr noundef nonnull %72, ptr noundef %79) #25
  %81 = load i32, ptr %80, align 8
  %82 = lshr i32 %81, 16
  %83 = and i32 %82, 255
  %84 = icmp eq i32 %83, %70
  br i1 %84, label %88, label %85

85:                                               ; preds = %75
  %86 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %87 = tail call ptr %86(i32 noundef %70, ptr noundef nonnull %80) #25
  br label %88

88:                                               ; preds = %66, %75, %85
  %89 = phi ptr [ %73, %66 ], [ %87, %85 ], [ %80, %75 ]
  %90 = tail call ptr @simplify_gen_binary(i32 noundef %43, i32 noundef %48, ptr noundef %67, ptr noundef %89) #25
  %91 = tail call fastcc ptr @apply_distributive_law(ptr noundef %90)
  %92 = tail call ptr %46(i32 noundef %0, ptr noundef %91) #25
  br label %125

93:                                               ; preds = %41
  %94 = add i64 %22, 1
  %95 = tail call i32 @exact_log2(i64 noundef %94) #25
  %96 = icmp sgt i32 %95, -1
  br i1 %96, label %97, label %108

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !16
  %100 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %0, ptr noundef %99, i64 noundef %22)
  %101 = getelementptr inbounds %struct.rtx_def, ptr %8, i64 0, i32 1, i32 0, i32 0, i64 1
  %102 = load ptr, ptr %101, align 8, !tbaa !16
  %103 = tail call fastcc ptr @simplify_and_const_int(ptr noundef null, i32 noundef %0, ptr noundef %102, i64 noundef %22)
  %104 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !5
  %105 = icmp eq ptr %100, %104
  br i1 %105, label %125, label %106

106:                                              ; preds = %97
  %107 = icmp eq ptr %103, %104
  br i1 %107, label %125, label %108

108:                                              ; preds = %41, %106, %93
  %109 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %110 = tail call ptr %109(i32 noundef %0, ptr noundef nonnull %8) #25
  %111 = icmp eq ptr %110, null
  br i1 %111, label %125, label %112

112:                                              ; preds = %108
  %113 = load i32, ptr %110, align 8
  %114 = and i32 %113, 65535
  %115 = icmp eq i32 %114, 25
  br i1 %115, label %125, label %116

116:                                              ; preds = %112
  %117 = icmp eq i64 %22, %21
  br i1 %117, label %125, label %118

118:                                              ; preds = %116
  %119 = icmp eq ptr %110, %1
  %120 = icmp eq i64 %22, %2
  %121 = and i1 %120, %119
  br i1 %121, label %125, label %122

122:                                              ; preds = %118
  %123 = tail call ptr @gen_int_mode(i64 noundef %22, i32 noundef %0) #25
  %124 = tail call ptr @simplify_gen_binary(i32 noundef 61, i32 noundef %0, ptr noundef nonnull %110, ptr noundef %123) #25
  br label %125

125:                                              ; preds = %97, %118, %116, %108, %112, %7, %3, %106, %122, %88, %38, %24, %11
  %126 = phi ptr [ %15, %11 ], [ %25, %24 ], [ %40, %38 ], [ %92, %88 ], [ %124, %122 ], [ %100, %106 ], [ null, %3 ], [ %8, %7 ], [ null, %112 ], [ null, %108 ], [ %110, %116 ], [ null, %118 ], [ %103, %97 ]
  ret ptr %126
}

declare ptr @reversed_comparison(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @known_cond(ptr noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #9 {
  %5 = load i32, ptr %0, align 8
  %6 = and i32 %5, 65535
  %7 = tail call i32 @side_effects_p(ptr noundef nonnull %0) #25
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %198

9:                                                ; preds = %4
  switch i32 %1, label %30 [
    i32 81, label %10
    i32 92, label %27
  ]

10:                                               ; preds = %9
  %11 = tail call i32 @rtx_equal_p(ptr noundef nonnull %0, ptr noundef %2) #25
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %10
  %14 = load i32, ptr %0, align 8
  %15 = lshr i32 %14, 16
  %16 = and i32 %15, 255
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !16
  switch i8 %19, label %20 [
    i8 8, label %30
    i8 9, label %30
    i8 11, label %30
    i8 17, label %30
  ]

20:                                               ; preds = %13
  %21 = load i32, ptr %3, align 8
  %22 = lshr i32 %21, 16
  %23 = and i32 %22, 255
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !16
  switch i8 %26, label %198 [
    i8 8, label %30
    i8 9, label %30
    i8 11, label %30
    i8 17, label %30
  ]

27:                                               ; preds = %9
  %28 = tail call i32 @rtx_equal_p(ptr noundef nonnull %0, ptr noundef %2) #25
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %198

30:                                               ; preds = %10, %13, %13, %13, %13, %20, %20, %20, %20, %9, %27
  %31 = icmp eq i32 %6, 111
  br i1 %31, label %32, label %49

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !16
  %35 = tail call i32 @rtx_equal_p(ptr noundef %34, ptr noundef %2) #25
  %36 = icmp ne i32 %35, 0
  %37 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %38 = icmp eq ptr %37, %3
  %39 = select i1 %36, i1 %38, i1 false
  br i1 %39, label %40, label %49

40:                                               ; preds = %32
  switch i32 %1, label %158 [
    i32 82, label %41
    i32 83, label %41
    i32 81, label %41
    i32 85, label %43
    i32 84, label %43
  ]

41:                                               ; preds = %40, %40, %40
  %42 = load ptr, ptr %33, align 8, !tbaa !16
  br label %198

43:                                               ; preds = %40, %40
  %44 = load ptr, ptr %33, align 8, !tbaa !16
  %45 = load i32, ptr %44, align 8
  %46 = lshr i32 %45, 16
  %47 = and i32 %46, 255
  %48 = tail call ptr @simplify_gen_unary(i32 noundef 51, i32 noundef %47, ptr noundef nonnull %44, i32 noundef %47) #25
  br label %198

49:                                               ; preds = %32, %30
  %50 = load i32, ptr %0, align 8
  %51 = and i32 %50, 65535
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !16
  switch i32 %54, label %122 [
    i32 3, label %55
    i32 1, label %55
    i32 0, label %55
  ]

55:                                               ; preds = %49, %49, %49
  %56 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !16
  %58 = tail call i32 @rtx_equal_p(ptr noundef %57, ptr noundef %3) #25
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %62, label %60

60:                                               ; preds = %55
  %61 = tail call i32 @swap_condition(i32 noundef %1) #25
  br label %62

62:                                               ; preds = %60, %55
  %63 = phi ptr [ %2, %60 ], [ %3, %55 ]
  %64 = phi ptr [ %3, %60 ], [ %2, %55 ]
  %65 = phi i32 [ %61, %60 ], [ %1, %55 ]
  %66 = load ptr, ptr %56, align 8, !tbaa !16
  %67 = tail call i32 @rtx_equal_p(ptr noundef %66, ptr noundef %64) #25
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %158, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %71 = load ptr, ptr %70, align 8, !tbaa !16
  %72 = tail call i32 @rtx_equal_p(ptr noundef %71, ptr noundef %63) #25
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %158, label %74

74:                                               ; preds = %69
  %75 = load i32, ptr %0, align 8
  %76 = and i32 %75, 65535
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !16
  %80 = icmp ult i32 %79, 2
  br i1 %80, label %81, label %94

81:                                               ; preds = %74
  %82 = tail call i32 @comparison_dominates_p(i32 noundef %65, i32 noundef %6) #25
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %81
  %85 = load ptr, ptr @const_true_rtx, align 8, !tbaa !5
  br label %198

86:                                               ; preds = %81
  %87 = tail call i32 @reversed_comparison_code(ptr noundef nonnull %0, ptr noundef null) #25
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %198, label %89

89:                                               ; preds = %86
  %90 = tail call i32 @comparison_dominates_p(i32 noundef %65, i32 noundef %87) #25
  %91 = icmp eq i32 %90, 0
  %92 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16
  %93 = select i1 %91, ptr %0, ptr %92
  br label %198

94:                                               ; preds = %74
  %95 = and i32 %5, 65534
  %96 = icmp eq i32 %95, 72
  %97 = trunc i32 %95 to i16
  switch i16 %97, label %158 [
    i16 72, label %98
    i16 70, label %98
  ]

98:                                               ; preds = %94, %94
  %99 = icmp ne i32 %6, 73
  %100 = icmp ne i32 %6, 71
  %101 = and i1 %100, %99
  %102 = freeze i1 %101
  %103 = and i32 %65, -2
  %104 = icmp eq i32 %103, 80
  %105 = select i1 %102, i1 true, i1 %104
  br i1 %105, label %108, label %106

106:                                              ; preds = %98
  %107 = tail call i32 @reverse_condition(i32 noundef %65) #25
  br label %108

108:                                              ; preds = %98, %106
  %109 = phi i32 [ %107, %106 ], [ %65, %98 ]
  switch i32 %109, label %158 [
    i32 82, label %110
    i32 83, label %110
    i32 84, label %113
    i32 85, label %113
    i32 86, label %116
    i32 87, label %116
    i32 88, label %119
    i32 89, label %119
  ]

110:                                              ; preds = %108, %108
  br i1 %96, label %198, label %111

111:                                              ; preds = %110
  %112 = load ptr, ptr %70, align 8, !tbaa !16
  br label %198

113:                                              ; preds = %108, %108
  br i1 %96, label %198, label %114

114:                                              ; preds = %113
  %115 = load ptr, ptr %56, align 8, !tbaa !16
  br label %198

116:                                              ; preds = %108, %108
  br i1 %96, label %117, label %198

117:                                              ; preds = %116
  %118 = load ptr, ptr %70, align 8, !tbaa !16
  br label %198

119:                                              ; preds = %108, %108
  br i1 %96, label %120, label %198

120:                                              ; preds = %119
  %121 = load ptr, ptr %56, align 8, !tbaa !16
  br label %198

122:                                              ; preds = %49
  %123 = trunc i32 %5 to i16
  switch i16 %123, label %158 [
    i16 39, label %124
    i16 99, label %142
  ]

124:                                              ; preds = %122
  %125 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %126 = load ptr, ptr %125, align 8, !tbaa !16
  %127 = load i32, ptr %126, align 8
  %128 = tail call fastcc ptr @known_cond(ptr noundef nonnull %126, i32 noundef %1, ptr noundef %2, ptr noundef %3)
  %129 = load ptr, ptr %125, align 8, !tbaa !16
  %130 = icmp eq ptr %129, %128
  br i1 %130, label %198, label %131

131:                                              ; preds = %124
  %132 = lshr i32 %127, 16
  %133 = and i32 %132, 255
  %134 = load i32, ptr %0, align 8
  %135 = lshr i32 %134, 16
  %136 = and i32 %135, 255
  %137 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %138 = load i32, ptr %137, align 8, !tbaa !16
  %139 = tail call ptr @simplify_subreg(i32 noundef %136, ptr noundef %128, i32 noundef %133, i32 noundef %138) #25
  %140 = icmp eq ptr %139, null
  br i1 %140, label %141, label %198

141:                                              ; preds = %131
  tail call fastcc void @do_SUBST(ptr noundef nonnull %125, ptr noundef %128)
  br label %198

142:                                              ; preds = %122
  %143 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !16
  %145 = load i32, ptr %144, align 8
  %146 = tail call fastcc ptr @known_cond(ptr noundef nonnull %144, i32 noundef %1, ptr noundef %2, ptr noundef %3)
  %147 = load ptr, ptr %143, align 8, !tbaa !16
  %148 = icmp eq ptr %147, %146
  br i1 %148, label %198, label %149

149:                                              ; preds = %142
  %150 = lshr i32 %145, 16
  %151 = and i32 %150, 255
  %152 = load i32, ptr %0, align 8
  %153 = lshr i32 %152, 16
  %154 = and i32 %153, 255
  %155 = tail call ptr @simplify_unary_operation(i32 noundef 99, i32 noundef %154, ptr noundef %146, i32 noundef %151) #25
  %156 = icmp eq ptr %155, null
  br i1 %156, label %157, label %198

157:                                              ; preds = %149
  tail call fastcc void @do_SUBST(ptr noundef nonnull %143, ptr noundef %146)
  br label %198

158:                                              ; preds = %94, %108, %122, %69, %62, %40
  %159 = phi ptr [ %3, %40 ], [ %63, %94 ], [ %63, %69 ], [ %63, %62 ], [ %3, %122 ], [ %63, %108 ]
  %160 = phi ptr [ %2, %40 ], [ %64, %94 ], [ %64, %69 ], [ %64, %62 ], [ %2, %122 ], [ %64, %108 ]
  %161 = phi i32 [ %1, %40 ], [ %65, %94 ], [ %65, %69 ], [ %65, %62 ], [ %1, %122 ], [ %109, %108 ]
  %162 = zext i32 %6 to i64
  %163 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %162
  %164 = load ptr, ptr %163, align 8, !tbaa !5
  %165 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %162
  %166 = load i8, ptr %165, align 1, !tbaa !16
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %198, label %168

168:                                              ; preds = %158
  %169 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %170 = zext i8 %166 to i64
  br label %171

171:                                              ; preds = %168, %196
  %172 = phi i64 [ %170, %168 ], [ %173, %196 ]
  %173 = add nsw i64 %172, -1
  %174 = getelementptr inbounds i8, ptr %164, i64 %173
  %175 = load i8, ptr %174, align 1, !tbaa !16
  switch i8 %175, label %196 [
    i8 101, label %176
    i8 69, label %180
  ]

176:                                              ; preds = %171
  %177 = getelementptr inbounds [1 x %union.rtunion_def], ptr %169, i64 0, i64 %173
  %178 = load ptr, ptr %177, align 8, !tbaa !16
  %179 = tail call fastcc ptr @known_cond(ptr noundef %178, i32 noundef %161, ptr noundef %160, ptr noundef %159)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %177, ptr noundef %179)
  br label %196

180:                                              ; preds = %171
  %181 = getelementptr inbounds [1 x %union.rtunion_def], ptr %169, i64 0, i64 %173
  %182 = load ptr, ptr %181, align 8, !tbaa !16
  %183 = load i32, ptr %182, align 8, !tbaa !99
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %196

185:                                              ; preds = %180
  %186 = zext i32 %183 to i64
  br label %187

187:                                              ; preds = %185, %187
  %188 = phi i64 [ %186, %185 ], [ %189, %187 ]
  %189 = add nsw i64 %188, -1
  %190 = load ptr, ptr %181, align 8, !tbaa !16
  %191 = and i64 %189, 4294967295
  %192 = getelementptr inbounds %struct.rtvec_def, ptr %190, i64 0, i32 1, i64 %191
  %193 = load ptr, ptr %192, align 8, !tbaa !5
  %194 = tail call fastcc ptr @known_cond(ptr noundef %193, i32 noundef %161, ptr noundef %160, ptr noundef %159)
  tail call fastcc void @do_SUBST(ptr noundef nonnull %192, ptr noundef %194)
  %195 = icmp ugt i64 %188, 1
  br i1 %195, label %187, label %196, !llvm.loop !214

196:                                              ; preds = %187, %180, %171, %176
  %197 = icmp sgt i64 %172, 1
  br i1 %197, label %171, label %198, !llvm.loop !215

198:                                              ; preds = %196, %158, %120, %119, %117, %116, %114, %113, %111, %110, %89, %149, %157, %142, %131, %141, %124, %86, %27, %20, %4, %84, %43, %41
  %199 = phi ptr [ %48, %43 ], [ %42, %41 ], [ %85, %84 ], [ %0, %4 ], [ %3, %20 ], [ %3, %27 ], [ %0, %86 ], [ %139, %131 ], [ %0, %141 ], [ %0, %124 ], [ %155, %149 ], [ %0, %157 ], [ %0, %142 ], [ %93, %89 ], [ %0, %119 ], [ %121, %120 ], [ %0, %116 ], [ %118, %117 ], [ %0, %113 ], [ %115, %114 ], [ %0, %110 ], [ %112, %111 ], [ %0, %158 ], [ %0, %196 ]
  ret ptr %199
}

declare i32 @comparison_dominates_p(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @simplify_rtx(ptr noundef) local_unnamed_addr #3

declare i32 @can_conditionally_move_p(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @rtx_equal_for_field_assignment_p(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = icmp eq ptr %0, %1
  br i1 %3, label %60, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @rtx_equal_p(ptr noundef %0, ptr noundef %1) #25
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %60

7:                                                ; preds = %4
  %8 = icmp eq ptr %0, null
  %9 = icmp eq ptr %1, null
  %10 = or i1 %8, %9
  br i1 %10, label %60, label %11

11:                                               ; preds = %7
  %12 = load i32, ptr %0, align 8
  %13 = load i32, ptr %1, align 8
  %14 = xor i32 %13, %12
  %15 = and i32 %14, 16711680
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %60

17:                                               ; preds = %11
  %18 = and i32 %12, 65535
  %19 = icmp eq i32 %18, 43
  %20 = and i32 %13, 65535
  %21 = icmp eq i32 %20, 39
  %22 = and i1 %19, %21
  br i1 %22, label %23, label %38

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = load i32, ptr %25, align 8
  %27 = and i32 %26, 65535
  %28 = icmp eq i32 %27, 43
  br i1 %28, label %29, label %38

29:                                               ; preds = %23
  %30 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %31 = lshr i32 %26, 16
  %32 = and i32 %31, 255
  %33 = tail call ptr %30(i32 noundef %32, ptr noundef nonnull %0) #25
  %34 = tail call i32 @rtx_equal_p(ptr noundef nonnull %25, ptr noundef %33) #25
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %60

36:                                               ; preds = %29
  %37 = load i32, ptr %1, align 8
  br label %38

38:                                               ; preds = %36, %23, %17
  %39 = phi i32 [ %37, %36 ], [ %13, %23 ], [ %13, %17 ]
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 43
  br i1 %41, label %42, label %59

42:                                               ; preds = %38
  %43 = load i32, ptr %0, align 8
  %44 = and i32 %43, 65535
  %45 = icmp eq i32 %44, 39
  br i1 %45, label %46, label %59

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  %49 = load i32, ptr %48, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 43
  br i1 %51, label %52, label %59

52:                                               ; preds = %46
  %53 = load ptr, ptr @rtl_hooks, align 8, !tbaa !123
  %54 = lshr i32 %49, 16
  %55 = and i32 %54, 255
  %56 = tail call ptr %53(i32 noundef %55, ptr noundef nonnull %1) #25
  %57 = tail call i32 @rtx_equal_p(ptr noundef nonnull %48, ptr noundef %56) #25
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %52, %46, %42, %38
  br label %60

60:                                               ; preds = %52, %29, %7, %11, %2, %4, %59
  %61 = phi i32 [ 0, %59 ], [ 1, %4 ], [ 1, %2 ], [ 0, %11 ], [ 0, %7 ], [ 1, %29 ], [ 1, %52 ]
  ret i32 %61
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @canon_reg_for_combine(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !16
  switch i32 %7, label %103 [
    i32 4, label %8
    i32 2, label %23
    i32 3, label %23
    i32 0, label %41
    i32 1, label %41
    i32 10, label %62
    i32 11, label %62
    i32 8, label %91
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !16
  %11 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %10, ptr noundef %1)
  %12 = load ptr, ptr %9, align 8, !tbaa !16
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %176, label %14

14:                                               ; preds = %8
  %15 = load i32, ptr %0, align 8
  %16 = and i32 %15, 65535
  %17 = lshr i32 %15, 16
  %18 = and i32 %17, 255
  %19 = load i32, ptr %1, align 8
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = tail call ptr @simplify_gen_unary(i32 noundef %16, i32 noundef %18, ptr noundef %11, i32 noundef %21) #25
  br label %178

23:                                               ; preds = %2, %2
  %24 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !16
  %26 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %25, ptr noundef %1)
  %27 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %28 = load ptr, ptr %27, align 8, !tbaa !16
  %29 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %28, ptr noundef %1)
  %30 = load ptr, ptr %24, align 8, !tbaa !16
  %31 = icmp eq ptr %26, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %23
  %33 = load ptr, ptr %27, align 8, !tbaa !16
  %34 = icmp eq ptr %29, %33
  br i1 %34, label %176, label %35

35:                                               ; preds = %32, %23
  %36 = load i32, ptr %0, align 8
  %37 = and i32 %36, 65535
  %38 = lshr i32 %36, 16
  %39 = and i32 %38, 255
  %40 = tail call ptr @simplify_gen_binary(i32 noundef %37, i32 noundef %39, ptr noundef %26, ptr noundef %29) #25
  br label %178

41:                                               ; preds = %2, %2
  %42 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !16
  %44 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %43, ptr noundef %1)
  %45 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !16
  %47 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %46, ptr noundef %1)
  %48 = load ptr, ptr %42, align 8, !tbaa !16
  %49 = icmp eq ptr %44, %48
  br i1 %49, label %50, label %53

50:                                               ; preds = %41
  %51 = load ptr, ptr %45, align 8, !tbaa !16
  %52 = icmp eq ptr %47, %51
  br i1 %52, label %176, label %53

53:                                               ; preds = %50, %41
  %54 = load i32, ptr %0, align 8
  %55 = and i32 %54, 65535
  %56 = lshr i32 %54, 16
  %57 = and i32 %56, 255
  %58 = load i32, ptr %44, align 8
  %59 = lshr i32 %58, 16
  %60 = and i32 %59, 255
  %61 = tail call ptr @simplify_gen_relational(i32 noundef %55, i32 noundef %57, i32 noundef %60, ptr noundef nonnull %44, ptr noundef %47) #25
  br label %178

62:                                               ; preds = %2, %2
  %63 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !16
  %65 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %64, ptr noundef %1)
  %66 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %67 = load ptr, ptr %66, align 8, !tbaa !16
  %68 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %67, ptr noundef %1)
  %69 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %70 = load ptr, ptr %69, align 8, !tbaa !16
  %71 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %70, ptr noundef %1)
  %72 = load ptr, ptr %63, align 8, !tbaa !16
  %73 = icmp eq ptr %65, %72
  br i1 %73, label %74, label %82

74:                                               ; preds = %62
  %75 = load ptr, ptr %66, align 8, !tbaa !16
  %76 = icmp eq ptr %68, %75
  br i1 %76, label %77, label %82

77:                                               ; preds = %74
  %78 = load ptr, ptr %69, align 8, !tbaa !16
  %79 = icmp eq ptr %71, %78
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = load i32, ptr %0, align 8
  br label %91

82:                                               ; preds = %77, %74, %62
  %83 = load i32, ptr %0, align 8
  %84 = and i32 %83, 65535
  %85 = lshr i32 %83, 16
  %86 = and i32 %85, 255
  %87 = load i32, ptr %65, align 8
  %88 = lshr i32 %87, 16
  %89 = and i32 %88, 255
  %90 = tail call ptr @simplify_gen_ternary(i32 noundef %84, i32 noundef %86, i32 noundef %89, ptr noundef nonnull %65, ptr noundef %68, ptr noundef %71) #25
  br label %178

91:                                               ; preds = %80, %2
  %92 = phi i32 [ %81, %80 ], [ %3, %2 ]
  %93 = and i32 %92, 65535
  %94 = icmp eq i32 %93, 37
  br i1 %94, label %95, label %103

95:                                               ; preds = %91
  %96 = tail call fastcc ptr @get_last_value(ptr noundef %1)
  %97 = tail call i32 @rtx_equal_p(ptr noundef %96, ptr noundef nonnull %0) #25
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %178

99:                                               ; preds = %95
  %100 = tail call fastcc ptr @get_last_value(ptr noundef nonnull %0)
  %101 = tail call i32 @rtx_equal_p(ptr noundef %1, ptr noundef %100) #25
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %176, label %178

103:                                              ; preds = %91, %2
  %104 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %5
  %105 = load ptr, ptr %104, align 8, !tbaa !5
  %106 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %5
  %107 = load i8, ptr %106, align 1, !tbaa !16
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %176, label %109

109:                                              ; preds = %103
  %110 = zext i8 %107 to i64
  br label %111

111:                                              ; preds = %109, %172
  %112 = phi i64 [ %110, %109 ], [ %115, %172 ]
  %113 = phi ptr [ %0, %109 ], [ %174, %172 ]
  %114 = phi i8 [ 0, %109 ], [ %173, %172 ]
  %115 = add nsw i64 %112, -1
  %116 = getelementptr inbounds i8, ptr %105, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !16
  switch i8 %117, label %172 [
    i8 101, label %124
    i8 69, label %118
  ]

118:                                              ; preds = %111
  %119 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1
  %120 = getelementptr inbounds [1 x %union.rtunion_def], ptr %119, i64 0, i64 %115
  %121 = load ptr, ptr %120, align 8, !tbaa !16
  %122 = load i32, ptr %121, align 8, !tbaa !99
  %123 = icmp sgt i32 %122, 0
  br i1 %123, label %139, label %172

124:                                              ; preds = %111
  %125 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1
  %126 = getelementptr inbounds [1 x %union.rtunion_def], ptr %125, i64 0, i64 %115
  %127 = load ptr, ptr %126, align 8, !tbaa !16
  %128 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %127, ptr noundef %1)
  %129 = load ptr, ptr %126, align 8, !tbaa !16
  %130 = icmp eq ptr %128, %129
  br i1 %130, label %172, label %131

131:                                              ; preds = %124
  %132 = icmp eq i8 %114, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %131
  %134 = tail call ptr @copy_rtx(ptr noundef nonnull %113) #25
  br label %135

135:                                              ; preds = %133, %131
  %136 = phi ptr [ %113, %131 ], [ %134, %133 ]
  %137 = getelementptr inbounds %struct.rtx_def, ptr %136, i64 0, i32 1
  %138 = getelementptr inbounds [1 x %union.rtunion_def], ptr %137, i64 0, i64 %115
  store ptr %128, ptr %138, align 8, !tbaa !16
  br label %172

139:                                              ; preds = %118, %162
  %140 = phi i64 [ %165, %162 ], [ 0, %118 ]
  %141 = phi ptr [ %168, %162 ], [ %121, %118 ]
  %142 = phi ptr [ %167, %162 ], [ %120, %118 ]
  %143 = phi ptr [ %164, %162 ], [ %113, %118 ]
  %144 = phi i8 [ %163, %162 ], [ %114, %118 ]
  %145 = getelementptr inbounds %struct.rtvec_def, ptr %141, i64 0, i32 1, i64 %140
  %146 = load ptr, ptr %145, align 8, !tbaa !5
  %147 = tail call fastcc ptr @canon_reg_for_combine(ptr noundef %146, ptr noundef %1)
  %148 = load ptr, ptr %142, align 8, !tbaa !16
  %149 = getelementptr inbounds %struct.rtvec_def, ptr %148, i64 0, i32 1, i64 %140
  %150 = load ptr, ptr %149, align 8, !tbaa !5
  %151 = icmp eq ptr %147, %150
  br i1 %151, label %162, label %152

152:                                              ; preds = %139
  %153 = icmp eq i8 %144, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %152
  %155 = tail call ptr @copy_rtx(ptr noundef nonnull %143) #25
  br label %156

156:                                              ; preds = %154, %152
  %157 = phi ptr [ %143, %152 ], [ %155, %154 ]
  %158 = getelementptr inbounds %struct.rtx_def, ptr %157, i64 0, i32 1
  %159 = getelementptr inbounds [1 x %union.rtunion_def], ptr %158, i64 0, i64 %115
  %160 = load ptr, ptr %159, align 8, !tbaa !16
  %161 = getelementptr inbounds %struct.rtvec_def, ptr %160, i64 0, i32 1, i64 %140
  store ptr %147, ptr %161, align 8, !tbaa !5
  br label %162

162:                                              ; preds = %156, %139
  %163 = phi i8 [ 1, %156 ], [ %144, %139 ]
  %164 = phi ptr [ %157, %156 ], [ %143, %139 ]
  %165 = add nuw nsw i64 %140, 1
  %166 = getelementptr inbounds %struct.rtx_def, ptr %164, i64 0, i32 1
  %167 = getelementptr inbounds [1 x %union.rtunion_def], ptr %166, i64 0, i64 %115
  %168 = load ptr, ptr %167, align 8, !tbaa !16
  %169 = load i32, ptr %168, align 8, !tbaa !99
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %165, %170
  br i1 %171, label %139, label %172, !llvm.loop !216

172:                                              ; preds = %162, %118, %111, %124, %135
  %173 = phi i8 [ 1, %135 ], [ %114, %124 ], [ %114, %111 ], [ %114, %118 ], [ %163, %162 ]
  %174 = phi ptr [ %136, %135 ], [ %113, %124 ], [ %113, %111 ], [ %113, %118 ], [ %164, %162 ]
  %175 = icmp sgt i64 %112, 1
  br i1 %175, label %111, label %176, !llvm.loop !217

176:                                              ; preds = %172, %103, %99, %50, %32, %8
  %177 = phi ptr [ %0, %99 ], [ %0, %50 ], [ %0, %32 ], [ %0, %8 ], [ %0, %103 ], [ %174, %172 ]
  br label %178

178:                                              ; preds = %95, %99, %176, %82, %53, %35, %14
  %179 = phi ptr [ %177, %176 ], [ %90, %82 ], [ %61, %53 ], [ %40, %35 ], [ %22, %14 ], [ %1, %99 ], [ %1, %95 ]
  ret ptr %179
}

declare ptr @simplify_gen_ternary(i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @recog(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @print_rtl_single(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @set_noop_p(ptr noundef) local_unnamed_addr #3

declare void @add_clobbers(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable
define internal void @reg_dead_at_p_1(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #21 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %32

7:                                                ; preds = %3
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !16
  %10 = icmp ult i32 %9, 53
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = lshr i32 %4, 16
  %13 = and i32 %12, 255
  %14 = zext i32 %9 to i64
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %14, i64 %15
  %17 = load i8, ptr %16, align 1, !tbaa !16
  %18 = zext i8 %17 to i32
  br label %19

19:                                               ; preds = %7, %11
  %20 = phi i32 [ %18, %11 ], [ 1, %7 ]
  %21 = add i32 %20, %9
  %22 = load i32, ptr @reg_dead_endregno, align 4, !tbaa !20
  %23 = icmp ugt i32 %22, %9
  %24 = load i32, ptr @reg_dead_regno, align 4
  %25 = icmp ult i32 %24, %21
  %26 = select i1 %23, i1 %25, i1 false
  br i1 %26, label %27, label %32

27:                                               ; preds = %19
  %28 = load i32, ptr %1, align 8
  %29 = and i32 %28, 65535
  %30 = icmp eq i32 %29, 25
  %31 = select i1 %30, i32 1, i32 -1
  store i32 %31, ptr @reg_dead_flag, align 4, !tbaa !20
  br label %32

32:                                               ; preds = %19, %27, %3
  ret void
}

declare ptr @df_get_live_in(ptr noundef) local_unnamed_addr #3

declare ptr @split_insns(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @ix86_cfun_abi() local_unnamed_addr #3

declare i32 @memory_address_addr_space_p(i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare i32 @register_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @simplify_replace_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_insn(ptr noundef) local_unnamed_addr #3

declare ptr @emit_debug_insn_after(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @remove_reg_equal_equiv_notes(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_ue_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @may_trap_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc i32 @reg_bitfield_target_p(ptr noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #16 {
  %3 = load i32, ptr %1, align 8
  %4 = trunc i32 %3 to i16
  switch i16 %4, label %78 [
    i16 23, label %5
    i16 15, label %63
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %7 = load ptr, ptr %6, align 8, !tbaa !16
  %8 = load i32, ptr %7, align 8
  %9 = trunc i32 %8 to i16
  switch i16 %9, label %60 [
    i16 120, label %13
    i16 40, label %10
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !16
  br label %13

13:                                               ; preds = %5, %10
  %14 = phi ptr [ %12, %10 ], [ %7, %5 ]
  %15 = getelementptr inbounds %struct.rtx_def, ptr %14, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !16
  %17 = load i32, ptr %16, align 8
  %18 = and i32 %17, 65535
  %19 = icmp eq i32 %18, 39
  br i1 %19, label %20, label %24

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.rtx_def, ptr %16, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !16
  %23 = load i32, ptr %22, align 8
  br label %24

24:                                               ; preds = %20, %13
  %25 = phi i32 [ %23, %20 ], [ %17, %13 ]
  %26 = phi ptr [ %22, %20 ], [ %16, %13 ]
  %27 = and i32 %25, 65535
  %28 = icmp eq i32 %27, 37
  br i1 %28, label %29, label %60

29:                                               ; preds = %24
  %30 = getelementptr i8, ptr %26, i64 8
  %31 = load i32, ptr %30, align 8, !tbaa !16
  %32 = getelementptr i8, ptr %0, i64 8
  %33 = load i32, ptr %32, align 8, !tbaa !16
  %34 = icmp ugt i32 %31, 52
  %35 = icmp ugt i32 %33, 52
  %36 = select i1 %34, i1 true, i1 %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %29
  %38 = icmp eq ptr %26, %0
  br label %60

39:                                               ; preds = %29
  %40 = lshr i32 %25, 16
  %41 = and i32 %40, 255
  %42 = zext i32 %31 to i64
  %43 = zext i32 %41 to i64
  %44 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %42, i64 %43
  %45 = load i8, ptr %44, align 1, !tbaa !16
  %46 = zext i8 %45 to i32
  %47 = add nuw nsw i32 %31, %46
  %48 = load i32, ptr %0, align 8
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 255
  %51 = zext i32 %33 to i64
  %52 = zext i32 %50 to i64
  %53 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %51, i64 %52
  %54 = load i8, ptr %53, align 1, !tbaa !16
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %33, %55
  %57 = icmp ugt i32 %56, %31
  %58 = icmp ult i32 %33, %47
  %59 = select i1 %57, i1 %58, i1 false
  br label %60

60:                                               ; preds = %24, %5, %39, %37
  %61 = phi i1 [ %38, %37 ], [ %59, %39 ], [ false, %5 ], [ false, %24 ]
  %62 = zext i1 %61 to i32
  br label %78

63:                                               ; preds = %2
  %64 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !16
  %66 = load i32, ptr %65, align 8, !tbaa !99
  %67 = zext i32 %66 to i64
  br label %68

68:                                               ; preds = %72, %63
  %69 = phi i64 [ %73, %72 ], [ %67, %63 ]
  %70 = trunc i64 %69 to i32
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %78

72:                                               ; preds = %68
  %73 = add nsw i64 %69, -1
  %74 = getelementptr inbounds %struct.rtvec_def, ptr %65, i64 0, i32 1, i64 %73
  %75 = load ptr, ptr %74, align 8, !tbaa !5
  %76 = tail call fastcc i32 @reg_bitfield_target_p(ptr noundef %0, ptr noundef %75), !range !103
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %68, label %78, !llvm.loop !218

78:                                               ; preds = %68, %72, %2, %60
  %79 = phi i32 [ %62, %60 ], [ 0, %2 ], [ 0, %68 ], [ 1, %72 ]
  ret i32 %79
}

declare i32 @refers_to_regno_p(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @find_regno_fusage(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @dead_or_set_regno_p(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @add_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @purge_dead_edges(ptr noundef) local_unnamed_addr #3

declare ptr @delete_insn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @unmentioned_reg_p_1(ptr nocapture noundef readonly %0, ptr noundef %1) #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !5
  %4 = icmp eq ptr %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %2
  %6 = load i32, ptr %3, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %11 [
    i16 37, label %8
    i16 43, label %8
  ]

8:                                                ; preds = %5, %5
  %9 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %3, ptr noundef %1) #25
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %5, %8, %2
  br label %12

12:                                               ; preds = %8, %11
  %13 = phi i32 [ 0, %11 ], [ 1, %8 ]
  ret i32 %13
}

declare void @free_INSN_LIST_list(ptr noundef) local_unnamed_addr #3

declare i32 @noop_move_p(ptr noundef) local_unnamed_addr #3

declare ptr @delete_insn_and_edges(ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #22

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #24

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.umax.i8(i8, i8) #24

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v2i64(<2 x i64>) #24

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #24

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #13 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #16 = { nofree nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #18 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #19 = { nofree nosync nounwind sspstrong memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #20 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #21 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #22 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #23 = { nofree nounwind }
attributes #24 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #25 = { nounwind }
attributes #26 = { "function-inline-cost-multiplier"="2" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !6, i64 8}
!10 = !{!"_IO_FILE", !11, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !6, i64 104, !11, i64 112, !11, i64 116, !12, i64 120, !13, i64 128, !7, i64 130, !7, i64 131, !6, i64 136, !12, i64 144, !6, i64 152, !6, i64 160, !6, i64 168, !6, i64 176, !12, i64 184, !11, i64 192, !7, i64 196}
!11 = !{!"int", !7, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!"short", !7, i64 0}
!14 = !{!10, !6, i64 16}
!15 = !{!"branch_weights", i32 2000, i32 1}
!16 = !{!7, !7, i64 0}
!17 = !{!10, !6, i64 40}
!18 = !{!10, !6, i64 48}
!19 = !{!10, !11, i64 0}
!20 = !{!11, !11, i64 0}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.mustprogress"}
!23 = distinct !{!23, !22}
!24 = !{i64 0, i64 8, !5, i64 8, i64 8, !5, i64 16, i64 8, !5, i64 24, i64 8, !5, i64 32, i64 8, !5}
!25 = !{!26, !11, i64 0}
!26 = !{!"VEC_reg_stat_type_base", !11, i64 0, !11, i64 4, !7, i64 8}
!27 = !{!26, !11, i64 4}
!28 = !{!29, !6, i64 8}
!29 = !{!"function", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !6, i64 48, !6, i64 56, !6, i64 64, !6, i64 72, !6, i64 80, !6, i64 88, !6, i64 96, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !6, i64 128, !11, i64 136, !11, i64 137, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 138, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139, !11, i64 139}
!30 = !{!31, !6, i64 0}
!31 = !{!"control_flow_graph", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !6, i64 40, !7, i64 48, !7, i64 52, !7, i64 60, !11, i64 68, !11, i64 72}
!32 = !{!33, !6, i64 56}
!33 = !{!"basic_block_def", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !7, i64 32, !6, i64 48, !6, i64 56, !7, i64 64, !12, i64 72, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96}
!34 = !{!31, !6, i64 8}
!35 = !{!36, !6, i64 0}
!36 = !{!"rtl_bb_info", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !11, i64 32}
!37 = !{!38, !6, i64 248}
!38 = !{!"df", !7, i64 0, !7, i64 64, !6, i64 128, !39, i64 136, !39, i64 176, !6, i64 216, !6, i64 224, !6, i64 232, !11, i64 240, !11, i64 244, !6, i64 248, !11, i64 256, !11, i64 260, !6, i64 264, !6, i64 272, !6, i64 280, !6, i64 288, !6, i64 296, !6, i64 304, !6, i64 312, !6, i64 320, !6, i64 328, !6, i64 336, !11, i64 344, !11, i64 348, !6, i64 352, !11, i64 360, !11, i64 364, !7, i64 365, !7, i64 366}
!39 = !{!"df_ref_info", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !11, i64 32, !7, i64 36}
!40 = !{!41, !6, i64 8}
!41 = !{!"df_insn_info", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32, !11, i64 40}
!42 = distinct !{!42, !22}
!43 = distinct !{!43, !22}
!44 = !{!41, !6, i64 16}
!45 = distinct !{!45, !22}
!46 = distinct !{!46, !22}
!47 = distinct !{!47, !22}
!48 = !{!33, !6, i64 0}
!49 = !{!50, !11, i64 0}
!50 = !{!"VEC_edge_base", !11, i64 0, !11, i64 4, !7, i64 8}
!51 = !{!52, !6, i64 0}
!52 = !{!"edge_def", !6, i64 0, !6, i64 8, !7, i64 16, !6, i64 24, !6, i64 32, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !12, i64 56}
!53 = !{!36, !6, i64 8}
!54 = !{!41, !11, i64 40}
!55 = distinct !{!55, !22}
!56 = distinct !{!56, !22}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = distinct !{!59, !22}
!60 = distinct !{!60, !22}
!61 = distinct !{!61, !22}
!62 = distinct !{!62, !22}
!63 = distinct !{!63, !22}
!64 = distinct !{!64, !22}
!65 = distinct !{!65, !22}
!66 = distinct !{!66, !22}
!67 = distinct !{!67, !22}
!68 = distinct !{!68, !22}
!69 = distinct !{!69, !22}
!70 = !{!71, !6, i64 8}
!71 = !{!"undobuf", !6, i64 0, !6, i64 8, !6, i64 16}
!72 = !{!73, !6, i64 0}
!73 = !{!"undo", !6, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!74 = distinct !{!74, !22}
!75 = !{!29, !6, i64 48}
!76 = distinct !{!76, !22}
!77 = !{!33, !11, i64 80}
!78 = !{!79, !11, i64 16}
!79 = !{!"dataflow", !6, i64 0, !6, i64 8, !11, i64 16, !6, i64 24, !6, i64 32, !6, i64 40, !11, i64 48, !7, i64 52, !7, i64 53, !7, i64 54}
!80 = !{!79, !6, i64 8}
!81 = !{!82, !6, i64 16}
!82 = !{!"df_lr_bb_info", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24}
!83 = !{!12, !12, i64 0}
!84 = !{!85, !12, i64 48}
!85 = !{!"reg_stat_struct", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !12, i64 32, !7, i64 40, !11, i64 41, !7, i64 42, !7, i64 43, !12, i64 48, !11, i64 56, !11, i64 60}
!86 = !{!85, !7, i64 43}
!87 = distinct !{!87, !22}
!88 = !{!85, !6, i64 0}
!89 = distinct !{!89, !58}
!90 = distinct !{!90, !22}
!91 = distinct !{!91, !22}
!92 = !{!85, !7, i64 42}
!93 = !{!85, !6, i64 8}
!94 = !{!85, !6, i64 16}
!95 = !{!85, !12, i64 32}
!96 = !{!85, !7, i64 40}
!97 = distinct !{!97, !22}
!98 = distinct !{!98, !22}
!99 = !{!100, !11, i64 0}
!100 = !{!"rtvec_def", !11, i64 0, !7, i64 8}
!101 = distinct !{!101, !22}
!102 = distinct !{!102, !22}
!103 = !{i32 0, i32 2}
!104 = !{!105, !11, i64 0}
!105 = !{!"likely_spilled_retval_info", !11, i64 0, !11, i64 4, !11, i64 8}
!106 = !{!105, !11, i64 4}
!107 = !{!105, !11, i64 8}
!108 = distinct !{!108, !22}
!109 = distinct !{!109, !22}
!110 = !{!71, !6, i64 16}
!111 = distinct !{!111, !22}
!112 = distinct !{!112, !22}
!113 = !{i8 0, i8 2}
!114 = distinct !{!114, !22}
!115 = distinct !{!115, !22}
!116 = distinct !{!116, !58}
!117 = !{!71, !6, i64 0}
!118 = distinct !{!118, !22}
!119 = distinct !{!119, !22}
!120 = !{!121, !11, i64 0}
!121 = !{!"regstat_n_sets_and_refs_t", !11, i64 0, !11, i64 4}
!122 = distinct !{!122, !22}
!123 = !{!124, !6, i64 0}
!124 = !{!"rtl_hooks", !6, i64 0, !6, i64 8, !6, i64 16, !6, i64 24, !6, i64 32}
!125 = !{!73, !7, i64 8}
!126 = distinct !{!126, !22}
!127 = distinct !{!127, !22}
!128 = distinct !{!128, !22}
!129 = distinct !{!129, !22}
!130 = distinct !{!130, !22}
!131 = distinct !{!131, !22}
!132 = distinct !{!132, !22}
!133 = distinct !{!133, !22}
!134 = distinct !{!134, !22}
!135 = distinct !{!135, !22}
!136 = distinct !{!136, !22}
!137 = !{!85, !11, i64 28}
!138 = !{!85, !11, i64 56}
!139 = distinct !{!139, !22}
!140 = distinct !{!140, !22}
!141 = distinct !{!141, !22}
!142 = !{!143, !11, i64 8}
!143 = !{!"param_info", !6, i64 0, !11, i64 8, !7, i64 12, !11, i64 16, !11, i64 20, !6, i64 24}
!144 = distinct !{!144, !22}
!145 = !{!85, !11, i64 24}
!146 = distinct !{!146, !22}
!147 = distinct !{!147, !22}
!148 = distinct !{!148, !22}
!149 = distinct !{!149, !58}
!150 = distinct !{!150, !22}
!151 = distinct !{!151, !22}
!152 = distinct !{!152, !22}
!153 = distinct !{!153, !22}
!154 = distinct !{!154, !22}
!155 = distinct !{!155, !22}
!156 = distinct !{!156, !22}
!157 = distinct !{!157, !22}
!158 = distinct !{!158, !22}
!159 = distinct !{!159, !22}
!160 = distinct !{!160, !22}
!161 = distinct !{!161, !22}
!162 = distinct !{!162, !22}
!163 = distinct !{!163, !22}
!164 = distinct !{!164, !22}
!165 = distinct !{!165, !22}
!166 = distinct !{!166, !22}
!167 = distinct !{!167, !22, !168, !169}
!168 = !{!"llvm.loop.isvectorized", i32 1}
!169 = !{!"llvm.loop.unroll.runtime.disable"}
!170 = distinct !{!170, !22, !169, !168}
!171 = distinct !{!171, !22, !168, !169}
!172 = distinct !{!172, !22, !169, !168}
!173 = distinct !{!173, !22}
!174 = distinct !{!174, !22}
!175 = distinct !{!175, !22}
!176 = distinct !{!176, !22}
!177 = distinct !{!177, !22}
!178 = distinct !{!178, !22}
!179 = distinct !{!179, !22}
!180 = distinct !{!180, !22}
!181 = distinct !{!181, !22}
!182 = distinct !{!182, !22}
!183 = distinct !{!183, !22}
!184 = distinct !{!184, !22}
!185 = !{!186, !7, i64 32}
!186 = !{!"mem_attrs", !6, i64 0, !6, i64 8, !6, i64 16, !11, i64 24, !11, i64 28, !7, i64 32}
!187 = distinct !{!187, !22}
!188 = distinct !{!188, !22}
!189 = distinct !{!189, !22}
!190 = distinct !{!190, !22}
!191 = distinct !{!191, !22}
!192 = distinct !{!192, !22}
!193 = distinct !{!193, !22}
!194 = distinct !{!194, !22}
!195 = distinct !{!195, !22}
!196 = distinct !{!196, !22}
!197 = distinct !{!197, !22}
!198 = distinct !{!198, !22}
!199 = distinct !{!199, !22}
!200 = distinct !{!200, !22}
!201 = !{!33, !6, i64 8}
!202 = !{!52, !11, i64 48}
!203 = distinct !{!203, !22}
!204 = distinct !{!204, !22}
!205 = distinct !{!205, !22}
!206 = distinct !{!206, !22}
!207 = distinct !{!207, !22}
!208 = distinct !{!208, !22}
!209 = distinct !{!209, !22}
!210 = !{!211, !7, i64 46}
!211 = !{!"real_format", !6, i64 0, !6, i64 8, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !7, i64 44, !7, i64 45, !7, i64 46, !7, i64 47, !7, i64 48, !7, i64 49, !7, i64 50, !7, i64 51}
!212 = distinct !{!212, !22}
!213 = distinct !{!213, !22}
!214 = distinct !{!214, !22}
!215 = distinct !{!215, !22}
!216 = distinct !{!216, !22}
!217 = distinct !{!217, !22}
!218 = distinct !{!218, !22}
