; ModuleID = 'magick/colorspace.c'
source_filename = "magick/colorspace.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._PrimaryInfo = type { double, double, double }
%struct._MagickPixelPacket = type { i32, i32, i32, double, i64, float, float, float, float, float }
%struct._Image = type { i32, i32, i32, i64, i32, i32, i32, i64, i64, i64, i64, ptr, %struct._PixelPacket, %struct._PixelPacket, %struct._PixelPacket, double, %struct._ChromaticityInfo, i32, ptr, i32, ptr, ptr, ptr, i64, double, double, %struct._RectangleInfo, %struct._RectangleInfo, %struct._RectangleInfo, double, double, double, i32, i32, i32, i32, i32, i32, ptr, i64, i64, i64, i64, i64, i64, %struct._ErrorInfo, %struct._TimerInfo, ptr, ptr, ptr, ptr, ptr, ptr, [4096 x i8], [4096 x i8], [4096 x i8], i64, i64, %struct._ExceptionInfo, i32, i64, ptr, %struct._ProfileInfo, %struct._ProfileInfo, ptr, i64, i64, ptr, ptr, ptr, i32, i32, %struct._PixelPacket, ptr, %struct._RectangleInfo, ptr, ptr, i32, i32, i64, i32, i64, i64, i32, i64 }
%struct._ChromaticityInfo = type { %struct._PrimaryInfo, %struct._PrimaryInfo, %struct._PrimaryInfo, %struct._PrimaryInfo }
%struct._ErrorInfo = type { double, double, double }
%struct._TimerInfo = type { %struct._Timer, %struct._Timer, i32, i64 }
%struct._Timer = type { double, double, double }
%struct._ExceptionInfo = type { i32, i32, ptr, ptr, ptr, i32, ptr, i64 }
%struct._ProfileInfo = type { ptr, i64, ptr, i64 }
%struct._PixelPacket = type { i16, i16, i16, i16 }
%struct._RectangleInfo = type { i64, i64, i64, i64 }
%struct._TransformPacket = type { float, float, float }

@.str = private unnamed_addr constant [20 x i8] c"magick/colorspace.c\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"gamma\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"film-gamma\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"reference-black\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"reference-white\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"MemoryAllocationFailed\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"`%s'\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"RGBTransform/Image\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"icc\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"icm\00", align 1
@TransformRGBImage.YCCMap = internal unnamed_addr constant [1389 x float] [float 0.000000e+00, float 0x3F4797CC40000000, float 0x3F579BFE00000000, float 0x3F61B3F200000000, float 0x3F679BFE00000000, float 0x3F6D81F100000000, float 0x3F71B4FE80000000, float 0x3F74A7F800000000, float 0x3F779BFE00000000, float 0x3F7A8EF780000000, float 0x3F7D82FD80000000, float 0x3F803AFB80000000, float 0x3F81B4FE80000000, float 0x3F832E7B40000000, float 0x3F84A7F800000000, float 0x3F8621FB00000000, float 0x3F879B77C0000000, float 0x3F89157AC0000000, float 0x3F8A8EF780000000, float 0x3F8C08FA80000000, float 0x3F8D827740000000, float 0x3F8EFC7A40000000, float 0x3F903AFB80000000, float 0x3F90F7FD00000000, float 0x3F91B4BB60000000, float 0x3F9271BCE0000000, float 0x3F932E7B40000000, float 0x3F93EB39A0000000, float 0x3F94A83B20000000, float 0x3F9564F980000000, float 0x3F9621FB00000000, float 0x3F96DEB960000000, float 0x3F979BBAE0000000, float 0x3F98587940000000, float 0x3F99157AC0000000, float 0x3F99D23920000000, float 0x3F9A8F3AA0000000, float 0x3F9B4BF900000000, float 0x3F9C08FA80000000, float 0x3F9CC5B8E0000000, float 0x3F9D827740000000, float 0x3F9E3F78C0000000, float 0x3F9EFC3720000000, float 0x3F9FB938A0000000, float 0x3FA03AFB80000000, float 0x3FA0997C40000000, float 0x3FA0F7DB60000000, float 0x3FA1565C20000000, float 0x3FA1B4BB60000000, float 0x3FA2133C20000000, float 0x3FA2719B40000000, float 0x3FA2D01C00000000, float 0x3FA32E7B40000000, float 0x3FA38CDA60000000, float 0x3FA3EB5B20000000, float 0x3FA449BA60000000, float 0x3FA4A83B20000000, float 0x3FA5069A40000000, float 0x3FA5651B00000000, float 0x3FA5C37A40000000, float 0x3FA621FB00000000, float 0x3FA6805A20000000, float 0x3FA6DEDAE0000000, float 0x3FA73D3A20000000, float 0x3FA79BBAE0000000, float 0x3FA7FA1A00000000, float 0x3FA8587940000000, float 0x3FA8B6FA00000000, float 0x3FA9155920000000, float 0x3FA973D9E0000000, float 0x3FA9D23920000000, float 0x3FAA30B9E0000000, float 0x3FAA8F1900000000, float 0x3FAAED99C0000000, float 0x3FAB4BF900000000, float 0x3FABAA79C0000000, float 0x3FAC08D8E0000000, float 0x3FAC6759A0000000, float 0x3FACC5B8E0000000, float 0x3FAD241800000000, float 0x3FAD8298C0000000, float 0x3FADE0F800000000, float 0x3FAE3F78C0000000, float 0x3FAE9DD7E0000000, float 0x3FAEFC58A0000000, float 0x3FAF5AB7E0000000, float 0x3FAFB938A0000000, float 0x3FB00BCBE0000000, float 0x3FB03B0C40000000, float 0x3FB06A3BE0000000, float 0x3FB0997C40000000, float 0x3FB0C8ABE0000000, float 0x3FB0F7DB60000000, float 0x3FB1271BC0000000, float 0x3FB1564B60000000, float 0x3FB1858BC0000000, float 0x3FB1B4BB60000000, float 0x3FB1E3FBC0000000, float 0x3FB2132B60000000, float 0x3FB2426BC0000000, float 0x3FB2719B40000000, float 0x3FB2A0DBA0000000, float 0x3FB2D00B40000000, float 0x3FB2FF3AE0000000, float 0x3FB32E7B40000000, float 0x3FB35DAAE0000000, float 0x3FB38CEB40000000, float 0x3FB3BC1AC0000000, float 0x3FB3EB5B20000000, float 0x3FB41A8AC0000000, float 0x3FB449CB20000000, float 0x3FB478FAC0000000, float 0x3FB4A83B20000000, float 0x3FB4D76AC0000000, float 0x3FB506AB20000000, float 0x3FB535DAA0000000, float 0x3FB5650A40000000, float 0x3FB5944AA0000000, float 0x3FB5C37A40000000, float 0x3FB5F2BAA0000000, float 0x3FB621EA40000000, float 0x3FB6512AA0000000, float 0x3FB6805A20000000, float 0x3FB6AF9A80000000, float 0x3FB6DECA20000000, float 0x3FB70E0A80000000, float 0x3FB73D3A20000000, float 0x3FB76C7A80000000, float 0x3FB79BAA20000000, float 0x3FB7CAD9A0000000, float 0x3FB7FA1A00000000, float 0x3FB82949A0000000, float 0x3FB8588A00000000, float 0x3FB887B9A0000000, float 0x3FB8B6FA00000000, float 0x3FB8E629A0000000, float 0x3FB9156A00000000, float 0x3FB9449980000000, float 0x3FB973D9E0000000, float 0x3FB9A30980000000, float 0x3FB9D249E0000000, float 0x3FBA017980000000, float 0x3FBA30A920000000, float 0x3FBA5FE980000000, float 0x3FBA8F1900000000, float 0x3FBABE5960000000, float 0x3FBAED8900000000, float 0x3FBB1CC960000000, float 0x3FBB4BF900000000, float 0x3FBB7B3960000000, float 0x3FBBAA6900000000, float 0x3FBBD9A960000000, float 0x3FBC08D8E0000000, float 0x3FBC381940000000, float 0x3FBC6748E0000000, float 0x3FBC967880000000, float 0x3FBCC5B8E0000000, float 0x3FBCF4E880000000, float 0x3FBD2428E0000000, float 0x3FBD535860000000, float 0x3FBD8298C0000000, float 0x3FBDB1C860000000, float 0x3FBDE108C0000000, float 0x3FBE103860000000, float 0x3FBE3F78C0000000, float 0x3FBE6EA860000000, float 0x3FBE9DE8C0000000, float 0x3FBECD1840000000, float 0x3FBEFC47E0000000, float 0x3FBF2B8840000000, float 0x3FBF5AB7E0000000, float 0x3FBF89F840000000, float 0x3FBFB927E0000000, float 0x3FBFE86840000000, float 0x3FC00BCBE0000000, float 0x3FC0236C20000000, float 0x3FC03B03E0000000, float 0x3FC052A420000000, float 0x3FC06A3BE0000000, float 0x3FC081DC00000000, float 0x3FC09973E0000000, float 0x3FC0B10BA0000000, float 0x3FC0C8ABE0000000, float 0x3FC0E043A0000000, float 0x3FC0F7E3E0000000, float 0x3FC10F7BA0000000, float 0x3FC1271BC0000000, float 0x3FC13EB3A0000000, float 0x3FC15653C0000000, float 0x3FC16DEBA0000000, float 0x3FC1858BC0000000, float 0x3FC19D23A0000000, float 0x3FC1B4C3C0000000, float 0x3FC1CC5B80000000, float 0x3FC1E3F360000000, float 0x3FC1FB9380000000, float 0x3FC2132B60000000, float 0x3FC22ACB80000000, float 0x3FC2426360000000, float 0x3FC25A0380000000, float 0x3FC2719B40000000, float 0x3FC2893B80000000, float 0x3FC2A0D340000000, float 0x3FC2B87380000000, float 0x3FC2D00B40000000, float 0x3FC2E7AB80000000, float 0x3FC2FF4340000000, float 0x3FC316DB00000000, float 0x3FC32E7B40000000, float 0x3FC3461300000000, float 0x3FC35DB340000000, float 0x3FC3754B00000000, float 0x3FC38CEB40000000, float 0x3FC3A48300000000, float 0x3FC3BC2340000000, float 0x3FC3D3BB00000000, float 0x3FC3EB5B20000000, float 0x3FC402F300000000, float 0x3FC41A9320000000, float 0x3FC4322B00000000, float 0x3FC449C2C0000000, float 0x3FC4616300000000, float 0x3FC478FAC0000000, float 0x3FC4909AE0000000, float 0x3FC4A832C0000000, float 0x3FC4BFD2E0000000, float 0x3FC4D76AC0000000, float 0x3FC4EF0AE0000000, float 0x3FC506A2C0000000, float 0x3FC51E42E0000000, float 0x3FC535DAA0000000, float 0x3FC54D7AE0000000, float 0x3FC56512A0000000, float 0x3FC57CAA80000000, float 0x3FC5944AA0000000, float 0x3FC5ABE280000000, float 0x3FC5C382A0000000, float 0x3FC5DB1A60000000, float 0x3FC5F2BAA0000000, float 0x3FC60A5260000000, float 0x3FC621F2A0000000, float 0x3FC6398A60000000, float 0x3FC6512AA0000000, float 0x3FC668C260000000, float 0x3FC68062A0000000, float 0x3FC697FA60000000, float 0x3FC6AF9220000000, float 0x3FC6C73260000000, float 0x3FC6DECA20000000, float 0x3FC6F66A60000000, float 0x3FC70E0220000000, float 0x3FC725A260000000, float 0x3FC73D3A20000000, float 0x3FC754DA40000000, float 0x3FC76C7220000000, float 0x3FC7841240000000, float 0x3FC79BAA20000000, float 0x3FC7B34A40000000, float 0x3FC7CAE220000000, float 0x3FC7E279E0000000, float 0x3FC7FA1A00000000, float 0x3FC811B1E0000000, float 0x3FC8295200000000, float 0x3FC840E9E0000000, float 0x3FC8588A00000000, float 0x3FC87021E0000000, float 0x3FC887C200000000, float 0x3FC89F59C0000000, float 0x3FC8B6FA00000000, float 0x3FC8CE91C0000000, float 0x3FC8E629A0000000, float 0x3FC8FDC9C0000000, float 0x3FC91561A0000000, float 0x3FC92D01C0000000, float 0x3FC9449980000000, float 0x3FC95C39C0000000, float 0x3FC973D180000000, float 0x3FC98B71C0000000, float 0x3FC9A30980000000, float 0x3FC9BAA9C0000000, float 0x3FC9D24180000000, float 0x3FC9E9E1C0000000, float 0x3FCA017980000000, float 0x3FCA191140000000, float 0x3FCA30B180000000, float 0x3FCA484940000000, float 0x3FCA5FE980000000, float 0x3FCA778140000000, float 0x3FCA8F2180000000, float 0x3FCAA6B940000000, float 0x3FCABE5960000000, float 0x3FCAD5F140000000, float 0x3FCAED9160000000, float 0x3FCB052940000000, float 0x3FCB1CC960000000, float 0x3FCB346140000000, float 0x3FCB4BF900000000, float 0x3FCB639920000000, float 0x3FCB7B3100000000, float 0x3FCB92D120000000, float 0x3FCBAA6900000000, float 0x3FCBC20920000000, float 0x3FCBD9A100000000, float 0x3FCBF14120000000, float 0x3FCC08D8E0000000, float 0x3FCC207920000000, float 0x3FCC3810E0000000, float 0x3FCC4FB120000000, float 0x3FCC6748E0000000, float 0x3FCC7EE0C0000000, float 0x3FCC9680E0000000, float 0x3FCCAE18A0000000, float 0x3FCCC5B8E0000000, float 0x3FCCDD50A0000000, float 0x3FCCF4F0E0000000, float 0x3FCD0C88A0000000, float 0x3FCD2428E0000000, float 0x3FCD3BC0A0000000, float 0x3FCD5360E0000000, float 0x3FCD6AF8A0000000, float 0x3FCD8298C0000000, float 0x3FCD9A30A0000000, float 0x3FCDB1C860000000, float 0x3FCDC968A0000000, float 0x3FCDE10060000000, float 0x3FCDF8A0A0000000, float 0x3FCE103860000000, float 0x3FCE27D880000000, float 0x3FCE3F7060000000, float 0x3FCE571080000000, float 0x3FCE6EA860000000, float 0x3FCE864880000000, float 0x3FCE9DE060000000, float 0x3FCEB58080000000, float 0x3FCECD1840000000, float 0x3FCEE4B020000000, float 0x3FCEFC5040000000, float 0x3FCF13E820000000, float 0x3FCF2B8840000000, float 0x3FCF432020000000, float 0x3FCF5AC040000000, float 0x3FCF725800000000, float 0x3FCF89F840000000, float 0x3FCFA19000000000, float 0x3FCFB93040000000, float 0x3FCFD0C800000000, float 0x3FCFE86840000000, float 2.500000e-01, float 0x3FD00BCBE0000000, float 0x3FD0179C00000000, float 0x3FD02367E0000000, float 0x3FD02F3800000000, float 0x3FD03B03E0000000, float 0x3FD046D400000000, float 0x3FD0529FE0000000, float 0x3FD05E7000000000, float 0x3FD06A3BE0000000, float 0x3FD0760C00000000, float 0x3FD081D7E0000000, float 0x3FD08DA800000000, float 0x3FD09973E0000000, float 0x3FD0A53FC0000000, float 0x3FD0B10FE0000000, float 0x3FD0BCDBC0000000, float 0x3FD0C8ABE0000000, float 0x3FD0D477C0000000, float 0x3FD0E047E0000000, float 0x3FD0EC13C0000000, float 0x3FD0F7E3E0000000, float 0x3FD103AFC0000000, float 0x3FD10F7FC0000000, float 0x3FD11B4BC0000000, float 0x3FD1271BC0000000, float 0x3FD132E7C0000000, float 0x3FD13EB3A0000000, float 0x3FD14A83C0000000, float 0x3FD1564FA0000000, float 0x3FD1621FA0000000, float 0x3FD16DEBA0000000, float 0x3FD179BBA0000000, float 0x3FD18587A0000000, float 0x3FD19157A0000000, float 0x3FD19D23A0000000, float 0x3FD1A8F3A0000000, float 0x3FD1B4BF80000000, float 0x3FD1C08FA0000000, float 0x3FD1CC5B80000000, float 0x3FD1D82780000000, float 0x3FD1E3F780000000, float 0x3FD1EFC380000000, float 0x3FD1FB9380000000, float 0x3FD2075F60000000, float 0x3FD2132F80000000, float 0x3FD21EFB60000000, float 0x3FD22ACB80000000, float 0x3FD2369760000000, float 0x3FD2426780000000, float 0x3FD24E3360000000, float 0x3FD25A0380000000, float 0x3FD265CF60000000, float 0x3FD2719B40000000, float 0x3FD27D6B60000000, float 0x3FD2893740000000, float 0x3FD2950760000000, float 0x3FD2A0D340000000, float 0x3FD2ACA360000000, float 0x3FD2B86F40000000, float 0x3FD2C43F60000000, float 0x3FD2D00B40000000, float 0x3FD2DBDB60000000, float 0x3FD2E7A740000000, float 0x3FD2F37320000000, float 0x3FD2FF4340000000, float 0x3FD30B0F20000000, float 0x3FD316DF40000000, float 0x3FD322AB20000000, float 0x3FD32E7B40000000, float 0x3FD33A4720000000, float 0x3FD3461740000000, float 0x3FD351E320000000, float 0x3FD35DB340000000, float 0x3FD3697F20000000, float 0x3FD3754F40000000, float 0x3FD3811B20000000, float 0x3FD38CEB40000000, float 0x3FD398B720000000, float 0x3FD3A48300000000, float 0x3FD3B05320000000, float 0x3FD3BC1F00000000, float 0x3FD3C7EF20000000, float 0x3FD3D3BB00000000, float 0x3FD3DF8B20000000, float 0x3FD3EB5700000000, float 0x3FD3F72720000000, float 0x3FD402F300000000, float 0x3FD40EC320000000, float 0x3FD41A8F00000000, float 0x3FD4265F00000000, float 0x3FD4322B00000000, float 0x3FD43DF6E0000000, float 0x3FD449C700000000, float 0x3FD45592E0000000, float 0x3FD4616300000000, float 0x3FD46D2EE0000000, float 0x3FD478FEE0000000, float 0x3FD484CAE0000000, float 0x3FD4909AE0000000, float 0x3FD49C66E0000000, float 0x3FD4A836E0000000, float 0x3FD4B402E0000000, float 0x3FD4BFCEC0000000, float 0x3FD4CB9EC0000000, float 0x3FD4D76AC0000000, float 0x3FD4E33AC0000000, float 0x3FD4EF06C0000000, float 0x3FD4FAD6C0000000, float 0x3FD506A2C0000000, float 0x3FD51272C0000000, float 0x3FD51E3EA0000000, float 0x3FD52A0EC0000000, float 0x3FD535DAA0000000, float 0x3FD541AAC0000000, float 0x3FD54D76A0000000, float 0x3FD55942A0000000, float 0x3FD56512A0000000, float 0x3FD570DE80000000, float 0x3FD57CAEA0000000, float 0x3FD5887A80000000, float 0x3FD5944AA0000000, float 0x3FD5A01680000000, float 0x3FD5ABE6A0000000, float 0x3FD5B7B280000000, float 0x3FD5C382A0000000, float 0x3FD5CF4E80000000, float 0x3FD5DB1EA0000000, float 0x3FD5E6EA80000000, float 0x3FD5F2B660000000, float 0x3FD5FE8680000000, float 0x3FD60A5260000000, float 0x3FD6162280000000, float 0x3FD621EE60000000, float 0x3FD62DBE80000000, float 0x3FD6398A60000000, float 0x3FD6455A80000000, float 0x3FD6512660000000, float 0x3FD65CF680000000, float 0x3FD668C260000000, float 0x3FD6749280000000, float 0x3FD6805E60000000, float 0x3FD68C2A40000000, float 0x3FD697FA60000000, float 0x3FD6A3C640000000, float 0x3FD6AF9660000000, float 0x3FD6BB6240000000, float 0x3FD6C73260000000, float 0x3FD6D2FE40000000, float 0x3FD6DECE60000000, float 0x3FD6EA9A40000000, float 0x3FD6F66A60000000, float 0x3FD7023640000000, float 0x3FD70E0660000000, float 0x3FD719D240000000, float 0x3FD7259E20000000, float 0x3FD7316E40000000, float 0x3FD73D3A20000000, float 0x3FD7490A40000000, float 0x3FD754D620000000, float 0x3FD760A640000000, float 0x3FD76C7220000000, float 0x3FD7784240000000, float 0x3FD7840E20000000, float 0x3FD78FDE20000000, float 0x3FD79BAA20000000, float 0x3FD7A77A20000000, float 0x3FD7B34620000000, float 0x3FD7BF1200000000, float 0x3FD7CAE220000000, float 0x3FD7D6AE00000000, float 0x3FD7E27E00000000, float 0x3FD7EE4A00000000, float 0x3FD7FA1A00000000, float 0x3FD805E600000000, float 0x3FD811B600000000, float 0x3FD81D8200000000, float 0x3FD8295200000000, float 0x3FD8351DE0000000, float 0x3FD840EE00000000, float 0x3FD84CB9E0000000, float 0x3FD85885E0000000, float 0x3FD86455E0000000, float 0x3FD87021E0000000, float 0x3FD87BF1E0000000, float 0x3FD887BDC0000000, float 0x3FD8938DE0000000, float 0x3FD89F59C0000000, float 0x3FD8AB29E0000000, float 0x3FD8B6F5C0000000, float 0x3FD8C2C5E0000000, float 0x3FD8CE91C0000000, float 0x3FD8DA61E0000000, float 0x3FD8E62DC0000000, float 0x3FD8F1F9A0000000, float 0x3FD8FDC9C0000000, float 0x3FD90995A0000000, float 0x3FD91565C0000000, float 0x3FD92131A0000000, float 0x3FD92D01C0000000, float 0x3FD938CDA0000000, float 0x3FD9449DC0000000, float 0x3FD95069A0000000, float 0x3FD95C39C0000000, float 0x3FD96805A0000000, float 0x3FD973D5C0000000, float 0x3FD97FA1A0000000, float 0x3FD98B6D80000000, float 0x3FD9973DA0000000, float 0x3FD9A30980000000, float 0x3FD9AED9A0000000, float 0x3FD9BAA580000000, float 0x3FD9C675A0000000, float 0x3FD9D24180000000, float 0x3FD9DE11A0000000, float 0x3FD9E9DD80000000, float 0x3FD9F5ADA0000000, float 0x3FDA017980000000, float 0x3FDA0D49A0000000, float 0x3FDA191580000000, float 0x3FDA24E160000000, float 0x3FDA30B180000000, float 0x3FDA3C7D60000000, float 0x3FDA484D80000000, float 0x3FDA541960000000, float 0x3FDA5FE980000000, float 0x3FDA6BB560000000, float 0x3FDA778580000000, float 0x3FDA835160000000, float 0x3FDA8F2180000000, float 0x3FDA9AED60000000, float 0x3FDAA6BD60000000, float 0x3FDAB28960000000, float 0x3FDABE5540000000, float 0x3FDACA2560000000, float 0x3FDAD5F140000000, float 0x3FDAE1C160000000, float 0x3FDAED8D40000000, float 0x3FDAF95D40000000, float 0x3FDB052940000000, float 0x3FDB10F940000000, float 0x3FDB1CC540000000, float 0x3FDB289540000000, float 0x3FDB346140000000, float 0x3FDB403140000000, float 0x3FDB4BFD20000000, float 0x3FDB57C920000000, float 0x3FDB639920000000, float 0x3FDB6F6520000000, float 0x3FDB7B3520000000, float 0x3FDB870120000000, float 0x3FDB92D120000000, float 0x3FDB9E9D00000000, float 0x3FDBAA6D20000000, float 0x3FDBB63900000000, float 0x3FDBC20920000000, float 0x3FDBCDD500000000, float 0x3FDBD9A100000000, float 0x3FDBE57100000000, float 0x3FDBF13CE0000000, float 0x3FDBFD0D00000000, float 0x3FDC08D8E0000000, float 0x3FDC14A900000000, float 0x3FDC2074E0000000, float 0x3FDC2C4500000000, float 0x3FDC3810E0000000, float 0x3FDC43E100000000, float 0x3FDC4FACE0000000, float 0x3FDC5B7D00000000, float 0x3FDC6748E0000000, float 0x3FDC7314C0000000, float 0x3FDC7EE4E0000000, float 0x3FDC8AB0C0000000, float 0x3FDC9680E0000000, float 0x3FDCA24CC0000000, float 0x3FDCAE1CE0000000, float 0x3FDCB9E8C0000000, float 0x3FDCC5B8E0000000, float 0x3FDCD184C0000000, float 0x3FDCDD54E0000000, float 0x3FDCE920C0000000, float 0x3FDCF4F0E0000000, float 0x3FDD00BCC0000000, float 0x3FDD0C8CE0000000, float 0x3FDD1858C0000000, float 0x3FDD2424A0000000, float 0x3FDD2FF4C0000000, float 0x3FDD3BC0A0000000, float 0x3FDD4790C0000000, float 0x3FDD535CA0000000, float 0x3FDD5F2CC0000000, float 0x3FDD6AF8A0000000, float 0x3FDD76C8C0000000, float 0x3FDD8294A0000000, float 0x3FDD8E64C0000000, float 0x3FDD9A30A0000000, float 0x3FDDA5FC80000000, float 0x3FDDB1CCA0000000, float 0x3FDDBD9880000000, float 0x3FDDC968A0000000, float 0x3FDDD53480000000, float 0x3FDDE104A0000000, float 0x3FDDECD080000000, float 0x3FDDF8A0A0000000, float 0x3FDE046C80000000, float 0x3FDE103C80000000, float 0x3FDE1C0880000000, float 0x3FDE27D880000000, float 0x3FDE33A480000000, float 0x3FDE3F7060000000, float 0x3FDE4B4080000000, float 0x3FDE570C60000000, float 0x3FDE62DC60000000, float 0x3FDE6EA860000000, float 0x3FDE7A7860000000, float 0x3FDE864460000000, float 0x3FDE921460000000, float 0x3FDE9DE060000000, float 0x3FDEA9B060000000, float 0x3FDEB57C40000000, float 0x3FDEC14C60000000, float 0x3FDECD1840000000, float 0x3FDED8E440000000, float 0x3FDEE4B440000000, float 0x3FDEF08040000000, float 0x3FDEFC5040000000, float 0x3FDF081C20000000, float 0x3FDF13EC40000000, float 0x3FDF1FB820000000, float 0x3FDF2B8840000000, float 0x3FDF375420000000, float 0x3FDF432440000000, float 0x3FDF4EF020000000, float 0x3FDF5AC040000000, float 0x3FDF668C20000000, float 0x3FDF725800000000, float 0x3FDF7E2820000000, float 0x3FDF89F400000000, float 0x3FDF95C420000000, float 0x3FDFA19000000000, float 0x3FDFAD6020000000, float 0x3FDFB92C00000000, float 0x3FDFC4FC20000000, float 0x3FDFD0C800000000, float 0x3FDFDC9820000000, float 0x3FDFE86400000000, float 0x3FDFF43420000000, float 5.000000e-01, float 0x3FE005E600000000, float 0x3FE00BCE00000000, float 0x3FE011B400000000, float 0x3FE0179C00000000, float 0x3FE01D8200000000, float 0x3FE0236A00000000, float 0x3FE0295000000000, float 0x3FE02F3800000000, float 0x3FE0351DE0000000, float 0x3FE03B0600000000, float 0x3FE040EBE0000000, float 0x3FE046D400000000, float 0x3FE04CB9E0000000, float 0x3FE0529FE0000000, float 0x3FE05887E0000000, float 0x3FE05E6DE0000000, float 0x3FE06455E0000000, float 0x3FE06A3BE0000000, float 0x3FE07023E0000000, float 0x3FE07609E0000000, float 0x3FE07BF1E0000000, float 0x3FE081D7E0000000, float 0x3FE087BFE0000000, float 0x3FE08DA5E0000000, float 0x3FE0938DE0000000, float 0x3FE09973E0000000, float 0x3FE09F59C0000000, float 0x3FE0A541E0000000, float 0x3FE0AB27C0000000, float 0x3FE0B10FE0000000, float 0x3FE0B6F5C0000000, float 0x3FE0BCDDE0000000, float 0x3FE0C2C3C0000000, float 0x3FE0C8ABE0000000, float 0x3FE0CE91C0000000, float 0x3FE0D479E0000000, float 0x3FE0DA5FC0000000, float 0x3FE0E047E0000000, float 0x3FE0E62DC0000000, float 0x3FE0EC13C0000000, float 0x3FE0F1FBC0000000, float 0x3FE0F7E1C0000000, float 0x3FE0FDC9C0000000, float 0x3FE103AFC0000000, float 0x3FE10997C0000000, float 0x3FE10F7DC0000000, float 0x3FE11565C0000000, float 0x3FE11B4BC0000000, float 0x3FE12133C0000000, float 0x3FE12719C0000000, float 0x3FE12D01C0000000, float 0x3FE132E7C0000000, float 0x3FE138CDA0000000, float 0x3FE13EB5C0000000, float 0x3FE1449BA0000000, float 0x3FE14A83C0000000, float 0x3FE15069A0000000, float 0x3FE15651C0000000, float 0x3FE15C37A0000000, float 0x3FE1621FA0000000, float 0x3FE16805A0000000, float 0x3FE16DEDA0000000, float 0x3FE173D3A0000000, float 0x3FE179B9A0000000, float 0x3FE17FA1A0000000, float 0x3FE18587A0000000, float 0x3FE18B6FA0000000, float 0x3FE19155A0000000, float 0x3FE1973DA0000000, float 0x3FE19D23A0000000, float 0x3FE1A30BA0000000, float 0x3FE1A8F1A0000000, float 0x3FE1AED9A0000000, float 0x3FE1B4BF80000000, float 0x3FE1BAA7A0000000, float 0x3FE1C08D80000000, float 0x3FE1C675A0000000, float 0x3FE1CC5B80000000, float 0x3FE1D24180000000, float 0x3FE1D82980000000, float 0x3FE1DE0F80000000, float 0x3FE1E3F780000000, float 0x3FE1E9DD80000000, float 0x3FE1EFC580000000, float 0x3FE1F5AB80000000, float 0x3FE1FB9380000000, float 0x3FE2017980000000, float 0x3FE2076180000000, float 0x3FE20D4780000000, float 0x3FE2132F80000000, float 0x3FE2191580000000, float 0x3FE21EFB60000000, float 0x3FE224E380000000, float 0x3FE22AC960000000, float 0x3FE230B180000000, float 0x3FE2369760000000, float 0x3FE23C7F80000000, float 0x3FE2426560000000, float 0x3FE2484D80000000, float 0x3FE24E3360000000, float 0x3FE2541B80000000, float 0x3FE25A0160000000, float 0x3FE25FE760000000, float 0x3FE265CF60000000, float 0x3FE26BB560000000, float 0x3FE2719D60000000, float 0x3FE2778360000000, float 0x3FE27D6B60000000, float 0x3FE2835160000000, float 0x3FE2893960000000, float 0x3FE28F1F60000000, float 0x3FE2950760000000, float 0x3FE29AED60000000, float 0x3FE2A0D560000000, float 0x3FE2A6BB60000000, float 0x3FE2ACA140000000, float 0x3FE2B28960000000, float 0x3FE2B86F40000000, float 0x3FE2BE5760000000, float 0x3FE2C43D40000000, float 0x3FE2CA2560000000, float 0x3FE2D00B40000000, float 0x3FE2D5F360000000, float 0x3FE2DBD940000000, float 0x3FE2E1C160000000, float 0x3FE2E7A740000000, float 0x3FE2ED8F40000000, float 0x3FE2F37540000000, float 0x3FE2F95B40000000, float 0x3FE2FF4340000000, float 0x3FE3052940000000, float 0x3FE30B1140000000, float 0x3FE310F740000000, float 0x3FE316DF40000000, float 0x3FE31CC540000000, float 0x3FE322AD40000000, float 0x3FE3289340000000, float 0x3FE32E7B40000000, float 0x3FE3346140000000, float 0x3FE33A4940000000, float 0x3FE3402F20000000, float 0x3FE3461520000000, float 0x3FE34BFD20000000, float 0x3FE351E320000000, float 0x3FE357CB20000000, float 0x3FE35DB120000000, float 0x3FE3639920000000, float 0x3FE3697F20000000, float 0x3FE36F6720000000, float 0x3FE3754D20000000, float 0x3FE37B3520000000, float 0x3FE3811B20000000, float 0x3FE3870320000000, float 0x3FE38CE920000000, float 0x3FE392CF00000000, float 0x3FE398B720000000, float 0x3FE39E9D00000000, float 0x3FE3A48520000000, float 0x3FE3AA6B00000000, float 0x3FE3B05320000000, float 0x3FE3B63900000000, float 0x3FE3BC2120000000, float 0x3FE3C20700000000, float 0x3FE3C7EF20000000, float 0x3FE3CDD500000000, float 0x3FE3D3BD20000000, float 0x3FE3D9A300000000, float 0x3FE3DF8900000000, float 0x3FE3E57100000000, float 0x3FE3EB5700000000, float 0x3FE3F13F00000000, float 0x3FE3F72500000000, float 0x3FE3FD0D00000000, float 0x3FE402F300000000, float 0x3FE408DB00000000, float 0x3FE40EC100000000, float 0x3FE414A900000000, float 0x3FE41A8F00000000, float 0x3FE4207700000000, float 0x3FE4265D00000000, float 0x3FE42C42E0000000, float 0x3FE4322B00000000, float 0x3FE43810E0000000, float 0x3FE43DF900000000, float 0x3FE443DEE0000000, float 0x3FE449C700000000, float 0x3FE44FACE0000000, float 0x3FE4559500000000, float 0x3FE45B7AE0000000, float 0x3FE4616300000000, float 0x3FE46748E0000000, float 0x3FE46D3100000000, float 0x3FE47316E0000000, float 0x3FE478FCE0000000, float 0x3FE47EE4E0000000, float 0x3FE484CAE0000000, float 0x3FE48AB2E0000000, float 0x3FE49098E0000000, float 0x3FE49680E0000000, float 0x3FE49C66E0000000, float 0x3FE4A24EE0000000, float 0x3FE4A834E0000000, float 0x3FE4AE1CE0000000, float 0x3FE4B402E0000000, float 0x3FE4B9EAE0000000, float 0x3FE4BFD0E0000000, float 0x3FE4C5B6C0000000, float 0x3FE4CB9EC0000000, float 0x3FE4D184C0000000, float 0x3FE4D76CC0000000, float 0x3FE4DD52C0000000, float 0x3FE4E33AC0000000, float 0x3FE4E920C0000000, float 0x3FE4EF08C0000000, float 0x3FE4F4EEC0000000, float 0x3FE4FAD6C0000000, float 0x3FE500BCC0000000, float 0x3FE506A4C0000000, float 0x3FE50C8AC0000000, float 0x3FE51270C0000000, float 0x3FE51858C0000000, float 0x3FE51E3EA0000000, float 0x3FE52426C0000000, float 0x3FE52A0CA0000000, float 0x3FE52FF4C0000000, float 0x3FE535DAA0000000, float 0x3FE53BC2C0000000, float 0x3FE541A8A0000000, float 0x3FE54790C0000000, float 0x3FE54D76A0000000, float 0x3FE5535EC0000000, float 0x3FE55944A0000000, float 0x3FE55F2AA0000000, float 0x3FE56512A0000000, float 0x3FE56AF8A0000000, float 0x3FE570E0A0000000, float 0x3FE576C6A0000000, float 0x3FE57CAEA0000000, float 0x3FE58294A0000000, float 0x3FE5887CA0000000, float 0x3FE58E62A0000000, float 0x3FE5944AA0000000, float 0x3FE59A30A0000000, float 0x3FE5A018A0000000, float 0x3FE5A5FEA0000000, float 0x3FE5ABE480000000, float 0x3FE5B1CCA0000000, float 0x3FE5B7B280000000, float 0x3FE5BD9AA0000000, float 0x3FE5C38080000000, float 0x3FE5C968A0000000, float 0x3FE5CF4E80000000, float 0x3FE5D536A0000000, float 0x3FE5DB1C80000000, float 0x3FE5E104A0000000, float 0x3FE5E6EA80000000, float 0x3FE5ECD080000000, float 0x3FE5F2B880000000, float 0x3FE5F89E80000000, float 0x3FE5FE8680000000, float 0x3FE6046C80000000, float 0x3FE60A5480000000, float 0x3FE6103A80000000, float 0x3FE6162280000000, float 0x3FE61C0880000000, float 0x3FE621F080000000, float 0x3FE627D680000000, float 0x3FE62DBE80000000, float 0x3FE633A480000000, float 0x3FE6398A60000000, float 0x3FE63F7280000000, float 0x3FE6455860000000, float 0x3FE64B4080000000, float 0x3FE6512660000000, float 0x3FE6570E60000000, float 0x3FE65CF460000000, float 0x3FE662DC60000000, float 0x3FE668C260000000, float 0x3FE66EAA60000000, float 0x3FE6749060000000, float 0x3FE67A7860000000, float 0x3FE6805E60000000, float 0x3FE6864660000000, float 0x3FE68C2C60000000, float 0x3FE6921260000000, float 0x3FE697FA60000000, float 0x3FE69DE060000000, float 0x3FE6A3C860000000, float 0x3FE6A9AE40000000, float 0x3FE6AF9660000000, float 0x3FE6B57C40000000, float 0x3FE6BB6460000000, float 0x3FE6C14A40000000, float 0x3FE6C73260000000, float 0x3FE6CD1840000000, float 0x3FE6D2FE40000000, float 0x3FE6D8E640000000, float 0x3FE6DECC40000000, float 0x3FE6E4B440000000, float 0x3FE6EA9A40000000, float 0x3FE6F08240000000, float 0x3FE6F66840000000, float 0x3FE6FC5040000000, float 0x3FE7023640000000, float 0x3FE7081E40000000, float 0x3FE70E0440000000, float 0x3FE713EC40000000, float 0x3FE719D240000000, float 0x3FE71FB820000000, float 0x3FE725A040000000, float 0x3FE72B8620000000, float 0x3FE7316E40000000, float 0x3FE7375420000000, float 0x3FE73D3C40000000, float 0x3FE7432220000000, float 0x3FE7490A40000000, float 0x3FE74EF020000000, float 0x3FE754D840000000, float 0x3FE75ABE20000000, float 0x3FE760A640000000, float 0x3FE7668C20000000, float 0x3FE76C7220000000, float 0x3FE7725A20000000, float 0x3FE7784020000000, float 0x3FE77E2820000000, float 0x3FE7840E20000000, float 0x3FE789F620000000, float 0x3FE78FDC20000000, float 0x3FE795C420000000, float 0x3FE79BAA20000000, float 0x3FE7A19220000000, float 0x3FE7A77820000000, float 0x3FE7AD6020000000, float 0x3FE7B34620000000, float 0x3FE7B92C00000000, float 0x3FE7BF1420000000, float 0x3FE7C4FA00000000, float 0x3FE7CAE220000000, float 0x3FE7D0C800000000, float 0x3FE7D6B000000000, float 0x3FE7DC9600000000, float 0x3FE7E27E00000000, float 0x3FE7E86400000000, float 0x3FE7EE4C00000000, float 0x3FE7F43200000000, float 0x3FE7FA1A00000000, float 7.500000e-01, float 0x3FE805E600000000, float 0x3FE80BCE00000000, float 0x3FE811B400000000, float 0x3FE8179C00000000, float 0x3FE81D8200000000, float 0x3FE8236A00000000, float 0x3FE8295000000000, float 0x3FE82F3800000000, float 0x3FE8351DE0000000, float 0x3FE83B0600000000, float 0x3FE840EBE0000000, float 0x3FE846D400000000, float 0x3FE84CB9E0000000, float 0x3FE8529FE0000000, float 0x3FE85887E0000000, float 0x3FE85E6DE0000000, float 0x3FE86455E0000000, float 0x3FE86A3BE0000000, float 0x3FE87023E0000000, float 0x3FE87609E0000000, float 0x3FE87BF1E0000000, float 0x3FE881D7E0000000, float 0x3FE887BFE0000000, float 0x3FE88DA5E0000000, float 0x3FE8938DE0000000, float 0x3FE89973E0000000, float 0x3FE89F59C0000000, float 0x3FE8A541E0000000, float 0x3FE8AB27C0000000, float 0x3FE8B10FE0000000, float 0x3FE8B6F5C0000000, float 0x3FE8BCDDE0000000, float 0x3FE8C2C3C0000000, float 0x3FE8C8ABE0000000, float 0x3FE8CE91C0000000, float 0x3FE8D479E0000000, float 0x3FE8DA5FC0000000, float 0x3FE8E047E0000000, float 0x3FE8E62DC0000000, float 0x3FE8EC13C0000000, float 0x3FE8F1FBC0000000, float 0x3FE8F7E1C0000000, float 0x3FE8FDC9C0000000, float 0x3FE903AFC0000000, float 0x3FE90997C0000000, float 0x3FE90F7DC0000000, float 0x3FE91565C0000000, float 0x3FE91B4BC0000000, float 0x3FE92133C0000000, float 0x3FE92719C0000000, float 0x3FE92D01C0000000, float 0x3FE932E7C0000000, float 0x3FE938CDA0000000, float 0x3FE93EB5C0000000, float 0x3FE9449BA0000000, float 0x3FE94A83C0000000, float 0x3FE95069A0000000, float 0x3FE95651C0000000, float 0x3FE95C37A0000000, float 0x3FE9621FA0000000, float 0x3FE96805A0000000, float 0x3FE96DEDA0000000, float 0x3FE973D3A0000000, float 0x3FE979B9A0000000, float 0x3FE97FA1A0000000, float 0x3FE98587A0000000, float 0x3FE98B6FA0000000, float 0x3FE99155A0000000, float 0x3FE9973DA0000000, float 0x3FE99D23A0000000, float 0x3FE9A30BA0000000, float 0x3FE9A8F1A0000000, float 0x3FE9AED9A0000000, float 0x3FE9B4BF80000000, float 0x3FE9BAA7A0000000, float 0x3FE9C08D80000000, float 0x3FE9C675A0000000, float 0x3FE9CC5B80000000, float 0x3FE9D24180000000, float 0x3FE9D82980000000, float 0x3FE9DE0F80000000, float 0x3FE9E3F780000000, float 0x3FE9E9DD80000000, float 0x3FE9EFC580000000, float 0x3FE9F5AB80000000, float 0x3FE9FB9380000000, float 0x3FEA017980000000, float 0x3FEA076180000000, float 0x3FEA0D4780000000, float 0x3FEA132F80000000, float 0x3FEA191580000000, float 0x3FEA1EFB60000000, float 0x3FEA24E380000000, float 0x3FEA2AC960000000, float 0x3FEA30B180000000, float 0x3FEA369760000000, float 0x3FEA3C7F80000000, float 0x3FEA426560000000, float 0x3FEA484D80000000, float 0x3FEA4E3360000000, float 0x3FEA541B80000000, float 0x3FEA5A0160000000, float 0x3FEA5FE760000000, float 0x3FEA65CF60000000, float 0x3FEA6BB560000000, float 0x3FEA719D60000000, float 0x3FEA778360000000, float 0x3FEA7D6B60000000, float 0x3FEA835160000000, float 0x3FEA893960000000, float 0x3FEA8F1F60000000, float 0x3FEA950760000000, float 0x3FEA9AED60000000, float 0x3FEAA0D560000000, float 0x3FEAA6BB60000000, float 0x3FEAACA140000000, float 0x3FEAB28960000000, float 0x3FEAB86F40000000, float 0x3FEABE5760000000, float 0x3FEAC43D40000000, float 0x3FEACA2560000000, float 0x3FEAD00B40000000, float 0x3FEAD5F360000000, float 0x3FEADBD940000000, float 0x3FEAE1C160000000, float 0x3FEAE7A740000000, float 0x3FEAED8F40000000, float 0x3FEAF37540000000, float 0x3FEAF95B40000000, float 0x3FEAFF4340000000, float 0x3FEB052940000000, float 0x3FEB0B1140000000, float 0x3FEB10F740000000, float 0x3FEB16DF40000000, float 0x3FEB1CC540000000, float 0x3FEB22AD40000000, float 0x3FEB289340000000, float 0x3FEB2E7B40000000, float 0x3FEB346140000000, float 0x3FEB3A4940000000, float 0x3FEB402F20000000, float 0x3FEB461520000000, float 0x3FEB4BFD20000000, float 0x3FEB51E320000000, float 0x3FEB57CB20000000, float 0x3FEB5DB120000000, float 0x3FEB639920000000, float 0x3FEB697F20000000, float 0x3FEB6F6720000000, float 0x3FEB754D20000000, float 0x3FEB7B3520000000, float 0x3FEB811B20000000, float 0x3FEB870320000000, float 0x3FEB8CE920000000, float 0x3FEB92CF00000000, float 0x3FEB98B720000000, float 0x3FEB9E9D00000000, float 0x3FEBA48520000000, float 0x3FEBAA6B00000000, float 0x3FEBB05320000000, float 0x3FEBB63900000000, float 0x3FEBBC2120000000, float 0x3FEBC20700000000, float 0x3FEBC7EF20000000, float 0x3FEBCDD500000000, float 0x3FEBD3BD20000000, float 0x3FEBD9A300000000, float 0x3FEBDF8900000000, float 0x3FEBE57100000000, float 0x3FEBEB5700000000, float 0x3FEBF13F00000000, float 0x3FEBF72500000000, float 0x3FEBFD0D00000000, float 0x3FEC02F300000000, float 0x3FEC08DB00000000, float 0x3FEC0EC100000000, float 0x3FEC14A900000000, float 0x3FEC1A8F00000000, float 0x3FEC207700000000, float 0x3FEC265D00000000, float 0x3FEC2C42E0000000, float 0x3FEC322B00000000, float 0x3FEC3810E0000000, float 0x3FEC3DF900000000, float 0x3FEC43DEE0000000, float 0x3FEC49C700000000, float 0x3FEC4FACE0000000, float 0x3FEC559500000000, float 0x3FEC5B7AE0000000, float 0x3FEC616300000000, float 0x3FEC6748E0000000, float 0x3FEC6D3100000000, float 0x3FEC7316E0000000, float 0x3FEC78FCE0000000, float 0x3FEC7EE4E0000000, float 0x3FEC84CAE0000000, float 0x3FEC8AB2E0000000, float 0x3FEC9098E0000000, float 0x3FEC9680E0000000, float 0x3FEC9C66E0000000, float 0x3FECA24EE0000000, float 0x3FECA834E0000000, float 0x3FECAE1CE0000000, float 0x3FECB402E0000000, float 0x3FECB9EAE0000000, float 0x3FECBFD0E0000000, float 0x3FECC5B6C0000000, float 0x3FECCB9EC0000000, float 0x3FECD184C0000000, float 0x3FECD76CC0000000, float 0x3FECDD52C0000000, float 0x3FECE33AC0000000, float 0x3FECE920C0000000, float 0x3FECEF08C0000000, float 0x3FECF4EEC0000000, float 0x3FECFAD6C0000000, float 0x3FED00BCC0000000, float 0x3FED06A4C0000000, float 0x3FED0C8AC0000000, float 0x3FED1270C0000000, float 0x3FED1858C0000000, float 0x3FED1E3EA0000000, float 0x3FED2426C0000000, float 0x3FED2A0CA0000000, float 0x3FED2FF4C0000000, float 0x3FED35DAA0000000, float 0x3FED3BC2C0000000, float 0x3FED41A8A0000000, float 0x3FED4790C0000000, float 0x3FED4D76A0000000, float 0x3FED535EC0000000, float 0x3FED5944A0000000, float 0x3FED5F2AA0000000, float 0x3FED6512A0000000, float 0x3FED6AF8A0000000, float 0x3FED70E0A0000000, float 0x3FED76C6A0000000, float 0x3FED7CAEA0000000, float 0x3FED8294A0000000, float 0x3FED887CA0000000, float 0x3FED8E62A0000000, float 0x3FED944AA0000000, float 0x3FED9A30A0000000, float 0x3FEDA018A0000000, float 0x3FEDA5FEA0000000, float 0x3FEDABE480000000, float 0x3FEDB1CCA0000000, float 0x3FEDB7B280000000, float 0x3FEDBD9AA0000000, float 0x3FEDC38080000000, float 0x3FEDC968A0000000, float 0x3FEDCF4E80000000, float 0x3FEDD536A0000000, float 0x3FEDDB1C80000000, float 0x3FEDE104A0000000, float 0x3FEDE6EA80000000, float 0x3FEDECD080000000, float 0x3FEDF2B880000000, float 0x3FEDF89E80000000, float 0x3FEDFE8680000000, float 0x3FEE046C80000000, float 0x3FEE0A5480000000, float 0x3FEE103A80000000, float 0x3FEE162280000000, float 0x3FEE1C0880000000, float 0x3FEE21F080000000, float 0x3FEE27D680000000, float 0x3FEE2DBE80000000, float 0x3FEE33A480000000, float 0x3FEE398A60000000, float 0x3FEE3F7280000000, float 0x3FEE455860000000, float 0x3FEE4B4080000000, float 0x3FEE512660000000, float 0x3FEE570E60000000, float 0x3FEE5CF460000000, float 0x3FEE62DC60000000, float 0x3FEE68C260000000, float 0x3FEE6EAA60000000, float 0x3FEE749060000000, float 0x3FEE7A7860000000, float 0x3FEE805E60000000, float 0x3FEE864660000000, float 0x3FEE8C2C60000000, float 0x3FEE921260000000, float 0x3FEE97FA60000000, float 0x3FEE9DE060000000, float 0x3FEEA3C860000000, float 0x3FEEA9AE40000000, float 0x3FEEAF9660000000, float 0x3FEEB57C40000000, float 0x3FEEBB6460000000, float 0x3FEEC14A40000000, float 0x3FEEC73260000000, float 0x3FEECD1840000000, float 0x3FEED2FE40000000, float 0x3FEED8E640000000, float 0x3FEEDECC40000000, float 0x3FEEE4B440000000, float 0x3FEEEA9A40000000, float 0x3FEEF08240000000, float 0x3FEEF66840000000, float 0x3FEEFC5040000000, float 0x3FEF023640000000, float 0x3FEF081E40000000, float 0x3FEF0E0440000000, float 0x3FEF13EC40000000, float 0x3FEF19D240000000, float 0x3FEF1FB820000000, float 0x3FEF25A040000000, float 0x3FEF2B8620000000, float 0x3FEF316E40000000, float 0x3FEF375420000000, float 0x3FEF3D3C40000000, float 0x3FEF432220000000, float 0x3FEF490A40000000, float 0x3FEF4EF020000000, float 0x3FEF54D840000000, float 0x3FEF5ABE20000000, float 0x3FEF60A640000000, float 0x3FEF668C20000000, float 0x3FEF6C7220000000, float 0x3FEF725A20000000, float 0x3FEF784020000000, float 0x3FEF7E2820000000, float 0x3FEF840E20000000, float 0x3FEF89F620000000, float 0x3FEF8FDC20000000, float 0x3FEF95C420000000, float 0x3FEF9BAA20000000, float 0x3FEFA19220000000, float 0x3FEFA77820000000, float 0x3FEFAD6020000000, float 0x3FEFB34620000000, float 0x3FEFB92C00000000, float 0x3FEFBF1420000000, float 0x3FEFC4FA00000000, float 0x3FEFCAE220000000, float 0x3FEFD0C800000000, float 0x3FEFD6B000000000, float 0x3FEFDC9600000000, float 0x3FEFE27E00000000, float 0x3FEFE86400000000, float 0x3FEFEE4C00000000, float 0x3FEFF43200000000, float 0x3FEFFA1A00000000, float 1.000000e+00], align 16
@.str.12 = private unnamed_addr constant [16 x i8] c"Transform/Image\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @RGBTransformImage(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca [4096 x i8], align 16
  %4 = alloca %struct._PrimaryInfo, align 8
  %5 = alloca %struct._MagickPixelPacket, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #8
  %9 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %10 = load i32, ptr %9, align 8, !tbaa !5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %14 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 233, ptr noundef nonnull @.str.2, ptr noundef nonnull %13) #8
  br label %15

15:                                               ; preds = %12, %2
  %16 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  switch i32 %1, label %1062 [
    i32 12, label %17
    i32 2, label %217
    i32 22, label %291
    i32 24, label %291
    i32 32, label %291
    i32 14, label %291
    i32 30, label %291
    i32 15, label %291
    i32 31, label %291
    i32 16, label %291
    i32 5, label %291
    i32 25, label %291
    i32 27, label %291
    i32 28, label %291
    i32 26, label %291
    i32 23, label %291
    i32 6, label %291
    i32 7, label %291
    i32 33, label %291
    i32 9, label %291
    i32 10, label %291
    i32 11, label %291
    i32 21, label %779
    i32 1, label %957
    i32 29, label %957
  ]

17:                                               ; preds = %15
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %5) #8
  %18 = load i32, ptr %0, align 8, !tbaa !24
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %26

20:                                               ; preds = %17
  %21 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %215, label %23

23:                                               ; preds = %20
  %24 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %215, label %26

26:                                               ; preds = %23, %17
  %27 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %28 = load i32, ptr %27, align 4, !tbaa !25
  %29 = icmp eq i32 %28, 12
  br i1 %29, label %41, label %30

30:                                               ; preds = %26
  store i32 12, ptr %27, align 4, !tbaa !25
  %31 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %31, align 8, !tbaa !26
  %32 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %32, align 8, !tbaa !27
  %33 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %34 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %33, i32 noundef 0, i64 noundef 96) #8
  %35 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %36 = load i32, ptr %35, align 8, !tbaa !28
  store i32 2, ptr %31, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %33, align 8, !tbaa !29
  %37 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %37, align 8, !tbaa !29
  %38 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %38, align 8, !tbaa !29
  %39 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  store i32 %36, ptr %35, align 8, !tbaa !28
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %215, label %41

41:                                               ; preds = %26, %30
  call void @GetMagickPixelPacket(ptr noundef nonnull %0, ptr noundef nonnull %5) #8
  %42 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  %43 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %44 = load i64, ptr %43, align 8, !tbaa !30
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %46, label %204

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  %48 = getelementptr inbounds i8, ptr %5, i64 4
  br label %49

49:                                               ; preds = %46, %199
  %50 = phi i32 [ 1, %46 ], [ %200, %199 ]
  %51 = phi i64 [ 0, %46 ], [ %201, %199 ]
  %52 = icmp eq i32 %50, 0
  br i1 %52, label %199, label %53

53:                                               ; preds = %49
  %54 = load i64, ptr %47, align 8, !tbaa !31
  %55 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %42, i64 noundef 0, i64 noundef %51, i64 noundef %54, i64 noundef 1, ptr noundef nonnull %16) #9
  %56 = icmp eq ptr %55, null
  br i1 %56, label %199, label %57

57:                                               ; preds = %53
  %58 = call ptr @GetCacheViewAuthenticIndexQueue(ptr noundef %42) #8
  %59 = load i64, ptr %47, align 8, !tbaa !31
  %60 = icmp sgt i64 %59, 0
  br i1 %60, label %61, label %195

61:                                               ; preds = %57
  %62 = load i32, ptr %48, align 4, !tbaa.struct !32
  %63 = icmp ne ptr %58, null
  %64 = icmp eq ptr %58, null
  br label %65

65:                                               ; preds = %61, %190
  %66 = phi i64 [ 0, %61 ], [ %192, %190 ]
  %67 = phi ptr [ %55, %61 ], [ %191, %190 ]
  %68 = phi i32 [ %62, %61 ], [ %139, %190 ]
  %69 = getelementptr inbounds i16, ptr %58, i64 %66
  %70 = getelementptr inbounds %struct._PixelPacket, ptr %67, i64 0, i32 2
  %71 = getelementptr inbounds %struct._PixelPacket, ptr %67, i64 0, i32 1
  %72 = load <2 x i16>, ptr %71, align 2, !tbaa !37
  %73 = uitofp <2 x i16> %72 to <2 x float>
  %74 = load i16, ptr %67, align 2, !tbaa !38
  %75 = uitofp i16 %74 to float
  %76 = getelementptr inbounds %struct._PixelPacket, ptr %67, i64 0, i32 3
  %77 = load i16, ptr %76, align 2, !tbaa !39
  %78 = uitofp i16 %77 to float
  %79 = icmp eq i32 %68, 13
  br i1 %79, label %87, label %80

80:                                               ; preds = %65
  %81 = uitofp <2 x i16> %72 to <2 x double>
  %82 = fmul fast <2 x double> %81, <double 0x3EF0001000100010, double 0x3EF0001000100010>
  %83 = fptrunc <2 x double> %82 to <2 x float>
  %84 = uitofp i16 %74 to double
  %85 = fmul fast double %84, 0x3EF0001000100010
  %86 = fptrunc double %85 to float
  br label %95

87:                                               ; preds = %65
  %88 = extractelement <2 x float> %73, i64 1
  %89 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %88) #9
  %90 = extractelement <2 x float> %73, i64 0
  %91 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %90) #9
  %92 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %75) #9
  %93 = insertelement <2 x float> poison, float %91, i64 0
  %94 = insertelement <2 x float> %93, float %89, i64 1
  br label %95

95:                                               ; preds = %87, %80
  %96 = phi float [ %86, %80 ], [ %92, %87 ]
  %97 = phi <2 x float> [ %83, %80 ], [ %94, %87 ]
  %98 = extractelement <2 x float> %97, i64 1
  %99 = call fast float @llvm.fabs.f32(float %98)
  %100 = fpext float %99 to double
  %101 = fcmp fast olt double %100, 1.000000e-15
  %102 = extractelement <2 x float> %97, i64 0
  %103 = call fast float @llvm.fabs.f32(float %102)
  %104 = fpext float %103 to double
  %105 = fcmp fast olt double %104, 1.000000e-15
  %106 = select i1 %101, i1 %105, i1 false
  br i1 %106, label %107, label %111

107:                                              ; preds = %95
  %108 = call fast float @llvm.fabs.f32(float %96)
  %109 = fpext float %108 to double
  %110 = fcmp fast olt double %109, 1.000000e-15
  br i1 %110, label %137, label %111

111:                                              ; preds = %107, %95
  %112 = fsub fast <2 x float> <float 1.000000e+00, float 1.000000e+00>, %97
  %113 = fsub fast float 1.000000e+00, %96
  %114 = extractelement <2 x float> %112, i64 0
  %115 = extractelement <2 x float> %112, i64 1
  %116 = fcmp fast olt float %114, %115
  %117 = select i1 %116, float %114, float %115
  %118 = fcmp fast olt float %113, %117
  %119 = select i1 %118, float %113, float %117
  %120 = fpext float %119 to double
  %121 = fsub fast double 1.000000e+00, %120
  %122 = insertelement <2 x float> poison, float %119, i64 0
  %123 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> zeroinitializer
  %124 = fsub fast <2 x float> %112, %123
  %125 = fpext <2 x float> %124 to <2 x double>
  %126 = insertelement <2 x double> poison, double %121, i64 0
  %127 = shufflevector <2 x double> %126, <2 x double> poison, <2 x i32> zeroinitializer
  %128 = fdiv fast <2 x double> %125, %127
  %129 = fptrunc <2 x double> %128 to <2 x float>
  %130 = fsub fast float %113, %119
  %131 = fpext float %130 to double
  %132 = fdiv fast double %131, %121
  %133 = fptrunc double %132 to float
  %134 = fmul fast <2 x float> %129, <float 6.553500e+04, float 6.553500e+04>
  %135 = fmul fast float %133, 6.553500e+04
  %136 = fmul fast float %119, 6.553500e+04
  br label %137

137:                                              ; preds = %107, %111
  %138 = phi float [ %75, %107 ], [ %135, %111 ]
  %139 = phi i32 [ %68, %107 ], [ 12, %111 ]
  %140 = phi float [ 6.553500e+04, %107 ], [ %136, %111 ]
  %141 = phi <2 x float> [ %73, %107 ], [ %134, %111 ]
  %142 = extractelement <2 x float> %141, i64 1
  %143 = fcmp fast ugt float %142, 0.000000e+00
  br i1 %143, label %144, label %149

144:                                              ; preds = %137
  %145 = fcmp fast ult float %142, 6.553500e+04
  br i1 %145, label %146, label %149

146:                                              ; preds = %144
  %147 = fadd fast float %142, 5.000000e-01
  %148 = fptoui float %147 to i16
  br label %149

149:                                              ; preds = %146, %144, %137
  %150 = phi i16 [ %148, %146 ], [ 0, %137 ], [ -1, %144 ]
  store i16 %150, ptr %70, align 2, !tbaa !40
  %151 = extractelement <2 x float> %141, i64 0
  %152 = fcmp fast ugt float %151, 0.000000e+00
  br i1 %152, label %153, label %158

153:                                              ; preds = %149
  %154 = fcmp fast ult float %151, 6.553500e+04
  br i1 %154, label %155, label %158

155:                                              ; preds = %153
  %156 = fadd fast float %151, 5.000000e-01
  %157 = fptoui float %156 to i16
  br label %158

158:                                              ; preds = %155, %153, %149
  %159 = phi i16 [ %157, %155 ], [ 0, %149 ], [ -1, %153 ]
  store i16 %159, ptr %71, align 2, !tbaa !41
  %160 = fcmp fast ugt float %138, 0.000000e+00
  br i1 %160, label %161, label %166

161:                                              ; preds = %158
  %162 = fcmp fast ult float %138, 6.553500e+04
  br i1 %162, label %163, label %166

163:                                              ; preds = %161
  %164 = fadd fast float %138, 5.000000e-01
  %165 = fptoui float %164 to i16
  br label %166

166:                                              ; preds = %163, %161, %158
  %167 = phi i16 [ %165, %163 ], [ 0, %158 ], [ -1, %161 ]
  store i16 %167, ptr %67, align 2, !tbaa !38
  switch i16 %77, label %168 [
    i16 0, label %172
    i16 -1, label %171
  ]

168:                                              ; preds = %166
  %169 = fadd fast float %78, 5.000000e-01
  %170 = fptoui float %169 to i16
  br label %172

171:                                              ; preds = %166
  br label %172

172:                                              ; preds = %166, %171, %168
  %173 = phi i16 [ %170, %168 ], [ %77, %166 ], [ -1, %171 ]
  store i16 %173, ptr %76, align 2, !tbaa !39
  %174 = load i32, ptr %27, align 4, !tbaa !25
  %175 = icmp eq i32 %174, 12
  br i1 %175, label %180, label %176

176:                                              ; preds = %172
  %177 = load i32, ptr %0, align 8, !tbaa !24
  %178 = icmp eq i32 %177, 2
  %179 = and i1 %63, %178
  br i1 %179, label %181, label %190

180:                                              ; preds = %172
  br i1 %64, label %190, label %181

181:                                              ; preds = %180, %176
  %182 = fcmp fast ugt float %140, 0.000000e+00
  br i1 %182, label %183, label %188

183:                                              ; preds = %181
  %184 = fcmp fast ult float %140, 6.553500e+04
  br i1 %184, label %185, label %188

185:                                              ; preds = %183
  %186 = fadd fast float %140, 5.000000e-01
  %187 = fptoui float %186 to i16
  br label %188

188:                                              ; preds = %185, %183, %181
  %189 = phi i16 [ %187, %185 ], [ 0, %181 ], [ -1, %183 ]
  store i16 %189, ptr %69, align 2, !tbaa !37
  br label %190

190:                                              ; preds = %176, %180, %188
  %191 = getelementptr inbounds %struct._PixelPacket, ptr %67, i64 1
  %192 = add nuw nsw i64 %66, 1
  %193 = load i64, ptr %47, align 8, !tbaa !31
  %194 = icmp slt i64 %192, %193
  br i1 %194, label %65, label %195, !llvm.loop !42

195:                                              ; preds = %190, %57
  %196 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %42, ptr noundef nonnull %16) #9
  %197 = icmp ne i32 %196, 0
  %198 = zext i1 %197 to i32
  br label %199

199:                                              ; preds = %53, %49, %195
  %200 = phi i32 [ %198, %195 ], [ 0, %49 ], [ 0, %53 ]
  %201 = add nuw nsw i64 %51, 1
  %202 = load i64, ptr %43, align 8, !tbaa !30
  %203 = icmp slt i64 %201, %202
  br i1 %203, label %49, label %204, !llvm.loop !44

204:                                              ; preds = %199, %41
  %205 = phi i32 [ 1, %41 ], [ %200, %199 ]
  %206 = call ptr @DestroyCacheView(ptr noundef %42) #8
  %207 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 6
  %208 = load i32, ptr %207, align 8, !tbaa !45
  %209 = icmp eq i32 %208, 0
  %210 = select i1 %209, i32 8, i32 9
  %211 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  store i32 %210, ptr %211, align 8, !tbaa !28
  %212 = call i32 @SetImageColorspace(ptr noundef nonnull %0, i32 noundef 12)
  %213 = icmp eq i32 %212, 0
  %214 = select i1 %213, i32 0, i32 %205
  br label %215

215:                                              ; preds = %204, %30, %23, %20
  %216 = phi i32 [ 0, %20 ], [ 0, %23 ], [ 0, %30 ], [ %214, %204 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %5) #8
  br label %1953

217:                                              ; preds = %15
  %218 = load i32, ptr %0, align 8, !tbaa !24
  %219 = icmp eq i32 %218, 2
  br i1 %219, label %220, label %226

220:                                              ; preds = %217
  %221 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %1953, label %223

223:                                              ; preds = %220
  %224 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %1953, label %226

226:                                              ; preds = %223, %217
  %227 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  %228 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %229 = load i64, ptr %228, align 8, !tbaa !30
  %230 = icmp sgt i64 %229, 0
  br i1 %230, label %231, label %271

231:                                              ; preds = %226
  %232 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %233

233:                                              ; preds = %231, %266
  %234 = phi i32 [ 1, %231 ], [ %267, %266 ]
  %235 = phi i64 [ 0, %231 ], [ %268, %266 ]
  %236 = icmp eq i32 %234, 0
  br i1 %236, label %266, label %237

237:                                              ; preds = %233
  %238 = load i64, ptr %232, align 8, !tbaa !31
  %239 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %227, i64 noundef 0, i64 noundef %235, i64 noundef %238, i64 noundef 1, ptr noundef nonnull %16) #9
  %240 = icmp eq ptr %239, null
  br i1 %240, label %266, label %241

241:                                              ; preds = %237
  %242 = load i64, ptr %232, align 8, !tbaa !31
  %243 = icmp sgt i64 %242, 0
  br i1 %243, label %244, label %262

244:                                              ; preds = %241, %254
  %245 = phi i64 [ %259, %254 ], [ 0, %241 ]
  %246 = phi ptr [ %258, %254 ], [ %239, %241 ]
  %247 = tail call fast nofpclass(nan inf) float @GetPixelIntensity(ptr noundef nonnull %0, ptr noundef nonnull %246) #9
  %248 = fcmp fast ugt float %247, 0.000000e+00
  br i1 %248, label %249, label %254

249:                                              ; preds = %244
  %250 = fcmp fast ult float %247, 6.553500e+04
  br i1 %250, label %251, label %254

251:                                              ; preds = %249
  %252 = fadd fast float %247, 5.000000e-01
  %253 = fptoui float %252 to i16
  br label %254

254:                                              ; preds = %244, %249, %251
  %255 = phi i16 [ %253, %251 ], [ 0, %244 ], [ -1, %249 ]
  store i16 %255, ptr %246, align 2, !tbaa !38
  %256 = getelementptr inbounds %struct._PixelPacket, ptr %246, i64 0, i32 1
  store i16 %255, ptr %256, align 2, !tbaa !41
  %257 = getelementptr inbounds %struct._PixelPacket, ptr %246, i64 0, i32 2
  store i16 %255, ptr %257, align 2, !tbaa !40
  %258 = getelementptr inbounds %struct._PixelPacket, ptr %246, i64 1
  %259 = add nuw nsw i64 %245, 1
  %260 = load i64, ptr %232, align 8, !tbaa !31
  %261 = icmp slt i64 %259, %260
  br i1 %261, label %244, label %262, !llvm.loop !46

262:                                              ; preds = %254, %241
  %263 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %227, ptr noundef nonnull %16) #9
  %264 = icmp ne i32 %263, 0
  %265 = zext i1 %264 to i32
  br label %266

266:                                              ; preds = %237, %233, %262
  %267 = phi i32 [ %265, %262 ], [ 0, %233 ], [ 0, %237 ]
  %268 = add nuw nsw i64 %235, 1
  %269 = load i64, ptr %228, align 8, !tbaa !30
  %270 = icmp slt i64 %268, %269
  br i1 %270, label %233, label %271, !llvm.loop !47

271:                                              ; preds = %266, %226
  %272 = phi i32 [ 1, %226 ], [ %267, %266 ]
  %273 = tail call ptr @DestroyCacheView(ptr noundef %227) #8
  %274 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %275 = load i32, ptr %274, align 4, !tbaa !25
  %276 = icmp eq i32 %275, 2
  br i1 %276, label %289, label %277

277:                                              ; preds = %271
  store i32 2, ptr %274, align 4, !tbaa !25
  %278 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %278, align 8, !tbaa !26
  %279 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %279, align 8, !tbaa !27
  %280 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %281 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %280, i32 noundef 0, i64 noundef 96) #8
  %282 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %283 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  %284 = load i32, ptr %283, align 8, !tbaa !48
  switch i32 %284, label %286 [
    i32 5, label %285
    i32 7, label %285
  ]

285:                                              ; preds = %277, %277
  store double 1.000000e+00, ptr %279, align 8, !tbaa !27
  br label %286

286:                                              ; preds = %277, %285
  %287 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  store i32 2, ptr %282, align 8, !tbaa !28
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %1953, label %289

289:                                              ; preds = %271, %286
  %290 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  store i32 2, ptr %290, align 8, !tbaa !28
  br label %1953

291:                                              ; preds = %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15, %15
  %292 = load i32, ptr %0, align 8, !tbaa !24
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %294, label %300

294:                                              ; preds = %291
  %295 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %1953, label %297

297:                                              ; preds = %294
  %298 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %1953, label %300

300:                                              ; preds = %297, %291
  %301 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  %302 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %303 = load i64, ptr %302, align 8, !tbaa !30
  %304 = icmp sgt i64 %303, 0
  br i1 %304, label %305, label %752

305:                                              ; preds = %300
  %306 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %307

307:                                              ; preds = %305, %747
  %308 = phi i32 [ 1, %305 ], [ %748, %747 ]
  %309 = phi i64 [ 0, %305 ], [ %749, %747 ]
  %310 = icmp eq i32 %308, 0
  br i1 %310, label %747, label %311

311:                                              ; preds = %307
  %312 = load i64, ptr %306, align 8, !tbaa !31
  %313 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %301, i64 noundef 0, i64 noundef %309, i64 noundef %312, i64 noundef 1, ptr noundef nonnull %16) #9
  %314 = icmp eq ptr %313, null
  br i1 %314, label %747, label %315

315:                                              ; preds = %311
  %316 = load i64, ptr %306, align 8, !tbaa !31
  %317 = icmp sgt i64 %316, 0
  br i1 %317, label %318, label %743

318:                                              ; preds = %315, %737
  %319 = phi i64 [ %740, %737 ], [ 0, %315 ]
  %320 = phi ptr [ %739, %737 ], [ %313, %315 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #8
  %321 = getelementptr inbounds %struct._PixelPacket, ptr %320, i64 0, i32 2
  %322 = load i16, ptr %321, align 2, !tbaa !40
  switch i16 %322, label %323 [
    i16 0, label %328
    i16 -1, label %327
  ]

323:                                              ; preds = %318
  %324 = uitofp i16 %322 to float
  %325 = fadd fast float %324, 5.000000e-01
  %326 = fptoui float %325 to i16
  br label %328

327:                                              ; preds = %318
  br label %328

328:                                              ; preds = %318, %327, %323
  %329 = phi i16 [ %326, %323 ], [ %322, %318 ], [ -1, %327 ]
  %330 = getelementptr inbounds %struct._PixelPacket, ptr %320, i64 0, i32 1
  %331 = load i16, ptr %330, align 2, !tbaa !41
  switch i16 %331, label %332 [
    i16 0, label %337
    i16 -1, label %336
  ]

332:                                              ; preds = %328
  %333 = uitofp i16 %331 to float
  %334 = fadd fast float %333, 5.000000e-01
  %335 = fptoui float %334 to i16
  br label %337

336:                                              ; preds = %328
  br label %337

337:                                              ; preds = %328, %336, %332
  %338 = phi i16 [ %335, %332 ], [ %331, %328 ], [ -1, %336 ]
  %339 = load i16, ptr %320, align 2, !tbaa !38
  switch i16 %339, label %340 [
    i16 0, label %345
    i16 -1, label %344
  ]

340:                                              ; preds = %337
  %341 = uitofp i16 %339 to float
  %342 = fadd fast float %341, 5.000000e-01
  %343 = fptoui float %342 to i16
  br label %345

344:                                              ; preds = %337
  br label %345

345:                                              ; preds = %337, %344, %340
  %346 = phi i16 [ %343, %340 ], [ %339, %337 ], [ -1, %344 ]
  switch i32 %1, label %698 [
    i32 22, label %347
    i32 24, label %357
    i32 32, label %358
    i32 14, label %359
    i32 30, label %360
    i32 15, label %361
    i32 31, label %362
    i32 16, label %363
    i32 5, label %364
    i32 25, label %423
    i32 27, label %423
    i32 28, label %424
    i32 26, label %425
    i32 23, label %470
    i32 6, label %533
    i32 7, label %558
    i32 33, label %586
    i32 9, label %614
    i32 10, label %642
    i32 11, label %670
  ]

347:                                              ; preds = %345
  %348 = xor i16 %329, -1
  %349 = uitofp i16 %348 to double
  %350 = fmul fast double %349, 0x3EF0001000100010
  store double %350, ptr %6, align 8, !tbaa !29
  %351 = xor i16 %338, -1
  %352 = uitofp i16 %351 to double
  %353 = fmul fast double %352, 0x3EF0001000100010
  store double %353, ptr %7, align 8, !tbaa !29
  %354 = xor i16 %346, -1
  %355 = uitofp i16 %354 to double
  %356 = fmul fast double %355, 0x3EF0001000100010
  store double %356, ptr %8, align 8, !tbaa !29
  br label %705

357:                                              ; preds = %345
  call void @ConvertRGBToHCL(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

358:                                              ; preds = %345
  call void @ConvertRGBToHCLp(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

359:                                              ; preds = %345
  call void @ConvertRGBToHSB(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

360:                                              ; preds = %345
  call void @ConvertRGBToHSI(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

361:                                              ; preds = %345
  call void @ConvertRGBToHSL(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

362:                                              ; preds = %345
  call void @ConvertRGBToHSV(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

363:                                              ; preds = %345
  call void @ConvertRGBToHWB(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

364:                                              ; preds = %345
  %365 = uitofp i16 %329 to float
  %366 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %365) #9
  %367 = fpext float %366 to double
  %368 = uitofp i16 %338 to float
  %369 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %368) #9
  %370 = fpext float %369 to double
  %371 = uitofp i16 %346 to float
  %372 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %371) #9
  %373 = fpext float %372 to double
  %374 = fmul fast double %367, 0x3EDA64CADCB329BF
  %375 = fmul fast double %370, 0x3ED6E2BC7FEAAF31
  %376 = fadd fast double %375, %374
  %377 = fmul fast double %373, 0x3EC71A792B4F4BDB
  %378 = fadd fast double %376, %377
  %379 = fmul fast double %367, 0x3ECB3621C488AF5C
  %380 = fmul fast double %370, 0x3EE6E2C3B7F2F7BE
  %381 = fadd fast double %380, %379
  %382 = fmul fast double %373, 0x3EB27BCDD83B6B0C
  %383 = fadd fast double %381, %382
  %384 = fmul fast double %367, 0x3E93C2B9F87D786A
  %385 = fmul fast double %370, 0x3EBE82F3F389DFDC
  %386 = fadd fast double %385, %384
  %387 = fmul fast double %373, 0x3EEE6A975D0397A1
  %388 = fadd fast double %386, %387
  %389 = fmul fast double %378, 0x3FF0D582A86B8380
  %390 = fcmp fast ogt double %389, 0x3F822354D28F7CD6
  br i1 %390, label %391, label %393

391:                                              ; preds = %364
  %392 = call fast double @llvm.pow.f64(double %389, double 0x3FD5555555555555)
  br label %396

393:                                              ; preds = %364
  %394 = fmul fast double %378, 0x402062CA24877768
  %395 = fadd fast double %394, 0x3FC1A7B9611A7B96
  br label %396

396:                                              ; preds = %393, %391
  %397 = phi double [ %392, %391 ], [ %395, %393 ]
  %398 = fcmp fast ogt double %383, 0x3F822354D28F7CD6
  br i1 %398, label %399, label %401

399:                                              ; preds = %396
  %400 = call fast double @llvm.pow.f64(double %383, double 0x3FD5555555555555)
  br label %404

401:                                              ; preds = %396
  %402 = fmul fast double %383, 0x401F25ED097B425F
  %403 = fadd fast double %402, 0x3FC1A7B9611A7B96
  br label %404

404:                                              ; preds = %401, %399
  %405 = phi double [ %400, %399 ], [ %403, %401 ]
  %406 = fmul fast double %388, 0x3FED643287D74679
  %407 = fcmp fast ogt double %406, 0x3F822354D28F7CD6
  br i1 %407, label %408, label %410

408:                                              ; preds = %404
  %409 = call fast double @llvm.pow.f64(double %406, double 0x3FD5555555555555)
  br label %413

410:                                              ; preds = %404
  %411 = fmul fast double %388, 0x401C9BE684D13F8F
  %412 = fadd fast double %411, 0x3FC1A7B9611A7B96
  br label %413

413:                                              ; preds = %408, %410
  %414 = phi double [ %409, %408 ], [ %412, %410 ]
  %415 = fmul fast double %405, 1.160000e+00
  %416 = fadd fast double %415, -1.600000e-01
  store double %416, ptr %6, align 8, !tbaa !29
  %417 = fsub fast double %397, %405
  %418 = fmul fast double %417, 0x3FFF5F5F5F5F5F5F
  %419 = fadd fast double %418, 5.000000e-01
  store double %419, ptr %7, align 8, !tbaa !29
  %420 = fsub fast double %405, %414
  %421 = fmul fast double %420, 0x3FE9191919191919
  %422 = fadd fast double %421, 5.000000e-01
  store double %422, ptr %8, align 8, !tbaa !29
  br label %705

423:                                              ; preds = %345, %345
  call void @ConvertRGBToLCHab(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

424:                                              ; preds = %345
  call void @ConvertRGBToLCHuv(i16 noundef zeroext %329, i16 noundef zeroext %338, i16 noundef zeroext %346, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8) #8
  br label %705

425:                                              ; preds = %345
  %426 = uitofp i16 %329 to float
  %427 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %426) #9
  %428 = uitofp i16 %338 to float
  %429 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %428) #9
  %430 = uitofp i16 %346 to float
  %431 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %430) #9
  %432 = fpext float %431 to double
  %433 = insertelement <2 x float> poison, float %427, i64 0
  %434 = insertelement <2 x float> %433, float %429, i64 1
  %435 = fpext <2 x float> %434 to <2 x double>
  %436 = extractelement <2 x double> %435, i64 0
  %437 = fmul fast double %436, 0x3EDA64CADCB329BF
  %438 = shufflevector <2 x double> %435, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %439 = insertelement <2 x double> %438, double %432, i64 1
  %440 = fmul fast <2 x double> %439, <double 0x3ED6E2BC7FEAAF31, double 0x3EC71A792B4F4BDB>
  %441 = extractelement <2 x double> %440, i64 0
  %442 = fadd fast double %441, %437
  %443 = extractelement <2 x double> %440, i64 1
  %444 = fadd fast double %442, %443
  %445 = fmul fast <2 x double> %438, <double 0x3EE6E2C3B7F2F7BE, double 0x3E93C2B9F87D786A>
  %446 = fmul fast <2 x double> %435, <double 0x3ECB3621C488AF5C, double 0x3EBE82F3F389DFDC>
  %447 = fadd fast <2 x double> %446, %445
  %448 = insertelement <2 x double> poison, double %432, i64 0
  %449 = shufflevector <2 x double> %448, <2 x double> poison, <2 x i32> zeroinitializer
  %450 = fmul fast <2 x double> %449, <double 0x3EB27BCDD83B6B0C, double 0x3EEE6A975D0397A1>
  %451 = fadd fast <2 x double> %447, %450
  %452 = fmul fast double %444, 7.328000e-01
  %453 = fmul fast <2 x double> %451, <double 4.296000e-01, double -1.624000e-01>
  %454 = extractelement <2 x double> %453, i64 0
  %455 = fadd fast double %454, %452
  %456 = extractelement <2 x double> %453, i64 1
  %457 = fadd fast double %455, %456
  store double %457, ptr %6, align 8, !tbaa !29
  %458 = fmul fast double %444, -7.036000e-01
  %459 = fmul fast <2 x double> %451, <double 1.697500e+00, double 6.100000e-03>
  %460 = extractelement <2 x double> %459, i64 0
  %461 = fadd fast double %460, %458
  %462 = extractelement <2 x double> %459, i64 1
  %463 = fadd fast double %461, %462
  store double %463, ptr %7, align 8, !tbaa !29
  %464 = fmul fast double %444, 3.000000e-03
  %465 = fmul fast <2 x double> %451, <double 1.360000e-02, double 9.834000e-01>
  %466 = extractelement <2 x double> %465, i64 0
  %467 = fadd fast double %466, %464
  %468 = extractelement <2 x double> %465, i64 1
  %469 = fadd fast double %467, %468
  store double %469, ptr %8, align 8, !tbaa !29
  br label %705

470:                                              ; preds = %345
  %471 = uitofp i16 %329 to float
  %472 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %471) #9
  %473 = uitofp i16 %338 to float
  %474 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %473) #9
  %475 = fpext float %474 to double
  %476 = uitofp i16 %346 to float
  %477 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %476) #9
  %478 = insertelement <2 x float> poison, float %477, i64 0
  %479 = insertelement <2 x float> %478, float %472, i64 1
  %480 = fpext <2 x float> %479 to <2 x double>
  %481 = fmul fast double %475, 0x3EE6E2C3B7F2F7BE
  %482 = fmul fast <2 x double> %480, <double 0x3EB27BCDD83B6B0C, double 0x3ECB3621C488AF5C>
  %483 = extractelement <2 x double> %482, i64 1
  %484 = fadd fast double %481, %483
  %485 = extractelement <2 x double> %482, i64 0
  %486 = fadd fast double %484, %485
  %487 = fcmp fast ogt double %486, 0x3F822354D28F7CD6
  br i1 %487, label %488, label %492

488:                                              ; preds = %470
  %489 = call fast double @llvm.pow.f64(double %486, double 0x3FD5555555555555)
  %490 = fmul fast double %489, 1.160000e+02
  %491 = fadd fast double %490, -1.600000e+01
  br label %494

492:                                              ; preds = %470
  %493 = fmul fast double %486, 0x408C3A5ED097B426
  br label %494

494:                                              ; preds = %488, %492
  %495 = phi double [ %493, %492 ], [ %491, %488 ]
  %496 = fmul fast double %475, 0x3EBE82F3F389DFDC
  %497 = fmul fast <2 x double> %480, <double 0x3EC71A792B4F4BDB, double 0x3E93C2B9F87D786A>
  %498 = shufflevector <2 x double> %480, <2 x double> poison, <2 x i32> <i32 poison, i32 0>
  %499 = insertelement <2 x double> %498, double %486, i64 0
  %500 = fmul fast <2 x double> %499, <double 1.500000e+01, double 0x3EEE6A975D0397A1>
  %501 = insertelement <2 x double> %480, double %475, i64 0
  %502 = fmul fast <2 x double> %501, <double 0x3ED6E2BC7FEAAF31, double 0x3EDA64CADCB329BF>
  %503 = shufflevector <2 x double> %502, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %504 = fadd fast <2 x double> %502, %503
  %505 = insertelement <2 x double> %504, double %496, i64 1
  %506 = fadd fast <2 x double> %505, %497
  %507 = fadd fast <2 x double> %500, %506
  %508 = extractelement <2 x double> %507, i64 1
  %509 = fmul fast double %508, 3.000000e+00
  %510 = extractelement <2 x double> %507, i64 0
  %511 = fadd fast double %510, %509
  %512 = fcmp fast olt double %511, 0.000000e+00
  %513 = select fast i1 %512, double -1.000000e+00, double 1.000000e+00
  %514 = fmul fast double %513, %511
  %515 = fcmp fast ult double %514, 1.000000e-15
  %516 = fdiv fast double 1.000000e+00, %511
  %517 = fmul fast double %513, 0x430C6BF52633FFFF
  %518 = select i1 %515, double %517, double %516
  %519 = extractelement <2 x double> %506, i64 0
  %520 = fmul fast double %519, 5.200000e+01
  %521 = fmul fast double %520, %518
  %522 = fadd fast double %521, 0xC0049346B7D0679E
  %523 = fmul fast double %495, %522
  %524 = fmul fast double %486, 1.170000e+02
  %525 = fmul fast double %524, %518
  %526 = fadd fast double %525, 0xC0185A9245C1018D
  %527 = fmul fast double %495, %526
  %528 = fmul fast double %495, 1.000000e-02
  store double %528, ptr %6, align 8, !tbaa !29
  %529 = fmul fast double %523, 0x3F6724287F46DEBC
  %530 = fadd fast double %529, 0x3FD839DA653E312D
  store double %530, ptr %7, align 8, !tbaa !29
  %531 = fmul fast double %527, 0x3F6F44659E4A4271
  %532 = fadd fast double %531, 0x3FE1196792909C56
  store double %532, ptr %8, align 8, !tbaa !29
  br label %705

533:                                              ; preds = %345
  %534 = uitofp i16 %329 to float
  %535 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %534) #9
  %536 = fpext float %535 to double
  %537 = uitofp i16 %338 to float
  %538 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %537) #9
  %539 = fpext float %538 to double
  %540 = uitofp i16 %346 to float
  %541 = call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %540) #9
  %542 = fpext float %541 to double
  %543 = fmul fast double %536, 0x3EDA64CADCB329BF
  %544 = fmul fast double %539, 0x3ED6E2BC7FEAAF31
  %545 = fadd fast double %544, %543
  %546 = fmul fast double %542, 0x3EC71A792B4F4BDB
  %547 = fadd fast double %545, %546
  store double %547, ptr %6, align 8, !tbaa !29
  %548 = fmul fast double %536, 0x3ECB3621C488AF5C
  %549 = fmul fast double %539, 0x3EE6E2C3B7F2F7BE
  %550 = fadd fast double %549, %548
  %551 = fmul fast double %542, 0x3EB27BCDD83B6B0C
  %552 = fadd fast double %550, %551
  store double %552, ptr %7, align 8, !tbaa !29
  %553 = fmul fast double %536, 0x3E93C2B9F87D786A
  %554 = fmul fast double %539, 0x3EBE82F3F389DFDC
  %555 = fadd fast double %554, %553
  %556 = fmul fast double %542, 0x3EEE6A975D0397A1
  %557 = fadd fast double %555, %556
  store double %557, ptr %8, align 8, !tbaa !29
  br label %705

558:                                              ; preds = %345
  %559 = uitofp i16 %329 to double
  %560 = fmul fast double %559, 2.988390e-01
  %561 = insertelement <2 x i16> poison, i16 %338, i64 0
  %562 = insertelement <2 x i16> %561, i16 %346, i64 1
  %563 = uitofp <2 x i16> %562 to <2 x double>
  %564 = fmul fast <2 x double> %563, <double 5.868110e-01, double 1.143500e-01>
  %565 = extractelement <2 x double> %564, i64 0
  %566 = fadd fast double %565, %560
  %567 = extractelement <2 x double> %564, i64 1
  %568 = fadd fast double %566, %567
  %569 = fmul fast double %568, 0x3EF0001000100010
  store double %569, ptr %6, align 8, !tbaa !29
  %570 = fmul fast double %559, 0xBFC5992A08114679
  %571 = fmul fast <2 x double> %563, <double -3.312640e-01, double 5.000000e-01>
  %572 = extractelement <2 x double> %571, i64 0
  %573 = fadd fast double %572, %570
  %574 = extractelement <2 x double> %571, i64 1
  %575 = fadd fast double %573, %574
  %576 = fmul fast double %575, 0x3EF0001000100010
  %577 = fadd fast double %576, 5.000000e-01
  store double %577, ptr %7, align 8, !tbaa !29
  %578 = fmul fast double %559, 5.000000e-01
  %579 = fmul fast <2 x double> %563, <double -4.186880e-01, double -8.131200e-02>
  %580 = extractelement <2 x double> %579, i64 0
  %581 = fadd fast double %580, %578
  %582 = extractelement <2 x double> %579, i64 1
  %583 = fadd fast double %581, %582
  %584 = fmul fast double %583, 0x3EF0001000100010
  %585 = fadd fast double %584, 5.000000e-01
  store double %585, ptr %8, align 8, !tbaa !29
  br label %705

586:                                              ; preds = %345
  %587 = uitofp i16 %329 to double
  %588 = fmul fast double %587, 2.988390e-01
  %589 = insertelement <2 x i16> poison, i16 %338, i64 0
  %590 = insertelement <2 x i16> %589, i16 %346, i64 1
  %591 = uitofp <2 x i16> %590 to <2 x double>
  %592 = fmul fast <2 x double> %591, <double 5.868110e-01, double 1.143500e-01>
  %593 = extractelement <2 x double> %592, i64 0
  %594 = fadd fast double %593, %588
  %595 = extractelement <2 x double> %592, i64 1
  %596 = fadd fast double %594, %595
  %597 = fmul fast double %596, 0x3EF0001000100010
  store double %597, ptr %6, align 8, !tbaa !29
  %598 = fmul fast double %587, -4.500000e-01
  %599 = fmul fast <2 x double> %591, <double -8.830000e-01, double 1.333000e+00>
  %600 = extractelement <2 x double> %599, i64 0
  %601 = fadd fast double %600, %598
  %602 = extractelement <2 x double> %599, i64 1
  %603 = fadd fast double %601, %602
  %604 = fmul fast double %603, 0x3EF0001000100010
  %605 = fadd fast double %604, 5.000000e-01
  store double %605, ptr %7, align 8, !tbaa !29
  %606 = fmul fast double %587, -1.333000e+00
  %607 = fmul fast <2 x double> %591, <double 1.116000e+00, double 2.170000e-01>
  %608 = extractelement <2 x double> %607, i64 0
  %609 = fadd fast double %608, %606
  %610 = extractelement <2 x double> %607, i64 1
  %611 = fadd fast double %609, %610
  %612 = fmul fast double %611, 0x3EF0001000100010
  %613 = fadd fast double %612, 5.000000e-01
  store double %613, ptr %8, align 8, !tbaa !29
  br label %705

614:                                              ; preds = %345
  %615 = uitofp i16 %329 to double
  %616 = fmul fast double %615, 2.988390e-01
  %617 = insertelement <2 x i16> poison, i16 %338, i64 0
  %618 = insertelement <2 x i16> %617, i16 %346, i64 1
  %619 = uitofp <2 x i16> %618 to <2 x double>
  %620 = fmul fast <2 x double> %619, <double 5.868110e-01, double 1.143500e-01>
  %621 = extractelement <2 x double> %620, i64 0
  %622 = fadd fast double %621, %616
  %623 = extractelement <2 x double> %620, i64 1
  %624 = fadd fast double %622, %623
  %625 = fmul fast double %624, 0x3EF0001000100010
  store double %625, ptr %6, align 8, !tbaa !29
  %626 = fmul fast double %615, 5.957160e-01
  %627 = fmul fast <2 x double> %619, <double -2.744530e-01, double -3.212630e-01>
  %628 = extractelement <2 x double> %627, i64 0
  %629 = fadd fast double %628, %626
  %630 = extractelement <2 x double> %627, i64 1
  %631 = fadd fast double %629, %630
  %632 = fmul fast double %631, 0x3EF0001000100010
  %633 = fadd fast double %632, 5.000000e-01
  store double %633, ptr %7, align 8, !tbaa !29
  %634 = fmul fast double %615, 2.114560e-01
  %635 = fmul fast <2 x double> %619, <double -5.225910e-01, double 3.111350e-01>
  %636 = extractelement <2 x double> %635, i64 0
  %637 = fadd fast double %636, %634
  %638 = extractelement <2 x double> %635, i64 1
  %639 = fadd fast double %637, %638
  %640 = fmul fast double %639, 0x3EF0001000100010
  %641 = fadd fast double %640, 5.000000e-01
  store double %641, ptr %8, align 8, !tbaa !29
  br label %705

642:                                              ; preds = %345
  %643 = uitofp i16 %329 to double
  %644 = fmul fast double %643, 2.988390e-01
  %645 = insertelement <2 x i16> poison, i16 %338, i64 0
  %646 = insertelement <2 x i16> %645, i16 %346, i64 1
  %647 = uitofp <2 x i16> %646 to <2 x double>
  %648 = fmul fast <2 x double> %647, <double 5.868110e-01, double 1.143500e-01>
  %649 = extractelement <2 x double> %648, i64 0
  %650 = fadd fast double %649, %644
  %651 = extractelement <2 x double> %648, i64 1
  %652 = fadd fast double %650, %651
  %653 = fmul fast double %652, 0x3EF0001000100010
  store double %653, ptr %6, align 8, !tbaa !29
  %654 = fmul fast double %643, 0xBFC5992A08114679
  %655 = fmul fast <2 x double> %647, <double -3.312640e-01, double 5.000000e-01>
  %656 = extractelement <2 x double> %655, i64 0
  %657 = fadd fast double %656, %654
  %658 = extractelement <2 x double> %655, i64 1
  %659 = fadd fast double %657, %658
  %660 = fmul fast double %659, 0x3EF0001000100010
  %661 = fadd fast double %660, 5.000000e-01
  store double %661, ptr %7, align 8, !tbaa !29
  %662 = fmul fast double %643, 5.000000e-01
  %663 = fmul fast <2 x double> %647, <double -4.186880e-01, double -8.131200e-02>
  %664 = extractelement <2 x double> %663, i64 0
  %665 = fadd fast double %664, %662
  %666 = extractelement <2 x double> %663, i64 1
  %667 = fadd fast double %665, %666
  %668 = fmul fast double %667, 0x3EF0001000100010
  %669 = fadd fast double %668, 5.000000e-01
  store double %669, ptr %8, align 8, !tbaa !29
  br label %705

670:                                              ; preds = %345
  %671 = uitofp i16 %329 to double
  %672 = fmul fast double %671, 2.988390e-01
  %673 = insertelement <2 x i16> poison, i16 %338, i64 0
  %674 = insertelement <2 x i16> %673, i16 %346, i64 1
  %675 = uitofp <2 x i16> %674 to <2 x double>
  %676 = fmul fast <2 x double> %675, <double 5.868110e-01, double 1.143500e-01>
  %677 = extractelement <2 x double> %676, i64 0
  %678 = fadd fast double %677, %672
  %679 = extractelement <2 x double> %676, i64 1
  %680 = fadd fast double %678, %679
  %681 = fmul fast double %680, 0x3EF0001000100010
  store double %681, ptr %6, align 8, !tbaa !29
  %682 = fmul fast double %671, -1.470000e-01
  %683 = fmul fast <2 x double> %675, <double -2.890000e-01, double 4.360000e-01>
  %684 = extractelement <2 x double> %683, i64 0
  %685 = fadd fast double %684, %682
  %686 = extractelement <2 x double> %683, i64 1
  %687 = fadd fast double %685, %686
  %688 = fmul fast double %687, 0x3EF0001000100010
  %689 = fadd fast double %688, 5.000000e-01
  store double %689, ptr %7, align 8, !tbaa !29
  %690 = fmul fast double %671, 0x3FE3AE147AE147AE
  %691 = fmul fast <2 x double> %675, <double -5.150000e-01, double -1.000000e-01>
  %692 = extractelement <2 x double> %691, i64 0
  %693 = fadd fast double %692, %690
  %694 = extractelement <2 x double> %691, i64 1
  %695 = fadd fast double %693, %694
  %696 = fmul fast double %695, 0x3EF0001000100010
  %697 = fadd fast double %696, 5.000000e-01
  store double %697, ptr %8, align 8, !tbaa !29
  br label %705

698:                                              ; preds = %345
  %699 = uitofp i16 %329 to double
  %700 = fmul fast double %699, 0x3EF0001000100010
  store double %700, ptr %6, align 8, !tbaa !29
  %701 = uitofp i16 %338 to double
  %702 = fmul fast double %701, 0x3EF0001000100010
  store double %702, ptr %7, align 8, !tbaa !29
  %703 = uitofp i16 %346 to double
  %704 = fmul fast double %703, 0x3EF0001000100010
  store double %704, ptr %8, align 8, !tbaa !29
  br label %705

705:                                              ; preds = %698, %670, %642, %614, %586, %558, %533, %494, %425, %424, %423, %413, %363, %362, %361, %360, %359, %358, %357, %347
  %706 = load double, ptr %6, align 8, !tbaa !29
  %707 = fmul fast double %706, 6.553500e+04
  %708 = fptrunc double %707 to float
  %709 = fcmp fast ugt float %708, 0.000000e+00
  br i1 %709, label %710, label %715

710:                                              ; preds = %705
  %711 = fcmp fast ult float %708, 6.553500e+04
  br i1 %711, label %712, label %715

712:                                              ; preds = %710
  %713 = fadd fast float %708, 5.000000e-01
  %714 = fptoui float %713 to i16
  br label %715

715:                                              ; preds = %705, %710, %712
  %716 = phi i16 [ %714, %712 ], [ 0, %705 ], [ -1, %710 ]
  store i16 %716, ptr %321, align 2, !tbaa !40
  %717 = load double, ptr %7, align 8, !tbaa !29
  %718 = fmul fast double %717, 6.553500e+04
  %719 = fptrunc double %718 to float
  %720 = fcmp fast ugt float %719, 0.000000e+00
  br i1 %720, label %721, label %726

721:                                              ; preds = %715
  %722 = fcmp fast ult float %719, 6.553500e+04
  br i1 %722, label %723, label %726

723:                                              ; preds = %721
  %724 = fadd fast float %719, 5.000000e-01
  %725 = fptoui float %724 to i16
  br label %726

726:                                              ; preds = %715, %721, %723
  %727 = phi i16 [ %725, %723 ], [ 0, %715 ], [ -1, %721 ]
  store i16 %727, ptr %330, align 2, !tbaa !41
  %728 = load double, ptr %8, align 8, !tbaa !29
  %729 = fmul fast double %728, 6.553500e+04
  %730 = fptrunc double %729 to float
  %731 = fcmp fast ugt float %730, 0.000000e+00
  br i1 %731, label %732, label %737

732:                                              ; preds = %726
  %733 = fcmp fast ult float %730, 6.553500e+04
  br i1 %733, label %734, label %737

734:                                              ; preds = %732
  %735 = fadd fast float %730, 5.000000e-01
  %736 = fptoui float %735 to i16
  br label %737

737:                                              ; preds = %726, %732, %734
  %738 = phi i16 [ %736, %734 ], [ 0, %726 ], [ -1, %732 ]
  store i16 %738, ptr %320, align 2, !tbaa !38
  %739 = getelementptr inbounds %struct._PixelPacket, ptr %320, i64 1
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #8
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #8
  %740 = add nuw nsw i64 %319, 1
  %741 = load i64, ptr %306, align 8, !tbaa !31
  %742 = icmp slt i64 %740, %741
  br i1 %742, label %318, label %743, !llvm.loop !49

743:                                              ; preds = %737, %315
  %744 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %301, ptr noundef nonnull %16) #9
  %745 = icmp ne i32 %744, 0
  %746 = zext i1 %745 to i32
  br label %747

747:                                              ; preds = %311, %307, %743
  %748 = phi i32 [ %746, %743 ], [ 0, %307 ], [ 0, %311 ]
  %749 = add nuw nsw i64 %309, 1
  %750 = load i64, ptr %302, align 8, !tbaa !30
  %751 = icmp slt i64 %749, %750
  br i1 %751, label %307, label %752, !llvm.loop !50

752:                                              ; preds = %747, %300
  %753 = phi i32 [ 1, %300 ], [ %748, %747 ]
  %754 = call ptr @DestroyCacheView(ptr noundef %301) #8
  %755 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %756 = load i32, ptr %755, align 4, !tbaa !25
  %757 = icmp eq i32 %756, %1
  br i1 %757, label %1953, label %758

758:                                              ; preds = %752
  store i32 %1, ptr %755, align 4, !tbaa !25
  %759 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %759, align 8, !tbaa !26
  %760 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %760, align 8, !tbaa !27
  %761 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %762 = call ptr @ResetMagickMemory(ptr noundef nonnull %761, i32 noundef 0, i64 noundef 96) #8
  %763 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %764 = load i32, ptr %763, align 8, !tbaa !28
  switch i32 %1, label %770 [
    i32 19, label %765
    i32 17, label %765
    i32 2, label %765
    i32 29, label %769
    i32 6, label %769
    i32 1, label %769
  ]

765:                                              ; preds = %758, %758, %758
  %766 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  %767 = load i32, ptr %766, align 8, !tbaa !48
  switch i32 %767, label %773 [
    i32 5, label %768
    i32 7, label %768
  ]

768:                                              ; preds = %765, %765
  store double 1.000000e+00, ptr %760, align 8, !tbaa !27
  br label %773

769:                                              ; preds = %758, %758, %758
  store double 1.000000e+00, ptr %760, align 8, !tbaa !27
  br label %773

770:                                              ; preds = %758
  store i32 2, ptr %759, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %761, align 8, !tbaa !29
  %771 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %771, align 8, !tbaa !29
  %772 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %772, align 8, !tbaa !29
  br label %773

773:                                              ; preds = %765, %768, %769, %770
  %774 = phi i32 [ %764, %769 ], [ %764, %770 ], [ 2, %765 ], [ 2, %768 ]
  %775 = call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  store i32 %774, ptr %763, align 8, !tbaa !28
  %776 = freeze i32 %775
  %777 = icmp eq i32 %776, 0
  %778 = select i1 %777, i32 0, i32 %753
  br label %1953

779:                                              ; preds = %15
  %780 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.3) #8
  %781 = icmp eq ptr %780, null
  br i1 %781, label %792, label %782

782:                                              ; preds = %779
  %783 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %780, ptr noundef null) #8
  %784 = fcmp fast olt double %783, 0.000000e+00
  %785 = select fast i1 %784, double -1.000000e+00, double 1.000000e+00
  %786 = fmul fast double %785, %783
  %787 = fcmp fast ult double %786, 1.000000e-15
  %788 = fdiv fast double 1.000000e+00, %783
  %789 = fmul fast double %785, 0x430C6BF52633FFFF
  %790 = select i1 %787, double %789, double %788
  %791 = fmul fast double %790, 1.700000e+00
  br label %792

792:                                              ; preds = %782, %779
  %793 = phi double [ %791, %782 ], [ 1.000000e+00, %779 ]
  %794 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.4) #8
  %795 = icmp eq ptr %794, null
  br i1 %795, label %798, label %796

796:                                              ; preds = %792
  %797 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %794, ptr noundef null) #8
  br label %798

798:                                              ; preds = %796, %792
  %799 = phi double [ %797, %796 ], [ 6.000000e-01, %792 ]
  %800 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.5) #8
  %801 = icmp eq ptr %800, null
  br i1 %801, label %804, label %802

802:                                              ; preds = %798
  %803 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %800, ptr noundef null) #8
  br label %804

804:                                              ; preds = %802, %798
  %805 = phi double [ %803, %802 ], [ 9.500000e+01, %798 ]
  %806 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.6) #8
  %807 = icmp eq ptr %806, null
  br i1 %807, label %810, label %808

808:                                              ; preds = %804
  %809 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %806, ptr noundef null) #8
  br label %810

810:                                              ; preds = %808, %804
  %811 = phi double [ %809, %808 ], [ 6.850000e+02, %804 ]
  %812 = tail call dereferenceable_or_null(131072) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 2) #10
  %813 = icmp eq ptr %812, null
  br i1 %813, label %814, label %817

814:                                              ; preds = %810
  %815 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %816 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %16, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 602, i32 noundef 400, ptr noundef nonnull @.str.7, ptr noundef nonnull @.str.8, ptr noundef nonnull %815) #8
  br label %1953

817:                                              ; preds = %810
  %818 = fmul fast double %793, 0x3F7B369690DEDC9D
  %819 = fsub fast double %805, %811
  %820 = fmul fast double %818, %819
  %821 = fdiv fast double %820, %799
  %822 = tail call fast double @llvm.exp2.f64(double %821)
  %823 = fmul fast double %822, 0x3EF0001000100010
  %824 = fsub fast double 0x3EF0001000100010, %823
  %825 = insertelement <16 x double> poison, double %824, i64 0
  %826 = shufflevector <16 x double> %825, <16 x double> poison, <16 x i32> zeroinitializer
  %827 = insertelement <16 x double> poison, double %822, i64 0
  %828 = shufflevector <16 x double> %827, <16 x double> poison, <16 x i32> zeroinitializer
  %829 = insertelement <16 x double> poison, double %799, i64 0
  %830 = shufflevector <16 x double> %829, <16 x double> poison, <16 x i32> zeroinitializer
  %831 = insertelement <16 x double> poison, double %793, i64 0
  %832 = shufflevector <16 x double> %831, <16 x double> poison, <16 x i32> zeroinitializer
  %833 = insertelement <16 x double> poison, double %811, i64 0
  %834 = shufflevector <16 x double> %833, <16 x double> poison, <16 x i32> zeroinitializer
  %835 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %832
  br label %836

836:                                              ; preds = %836, %817
  %837 = phi i64 [ 0, %817 ], [ %857, %836 ]
  %838 = phi <16 x i64> [ <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>, %817 ], [ %858, %836 ]
  %839 = sitofp <16 x i64> %838 to <16 x double>
  %840 = fmul fast <16 x double> %826, %839
  %841 = fadd fast <16 x double> %840, %828
  %842 = tail call fast <16 x double> @llvm.log10.v16f64(<16 x double> %841)
  %843 = fmul fast <16 x double> %842, %830
  %844 = fmul fast <16 x double> %843, <double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02, double 5.000000e+02>
  %845 = fmul fast <16 x double> %844, %835
  %846 = fadd fast <16 x double> %845, %834
  %847 = fmul fast <16 x double> %846, <double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000, double 0x404FFFE000000000>
  %848 = fptrunc <16 x double> %847 to <16 x float>
  %849 = fpext <16 x float> %848 to <16 x double>
  %850 = fcmp fast ugt <16 x float> %848, zeroinitializer
  %851 = fcmp fast oge <16 x float> %848, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %852 = fadd fast <16 x double> %849, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %853 = fptoui <16 x double> %852 to <16 x i16>
  %854 = select <16 x i1> %851, <16 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i16> %853
  %855 = select <16 x i1> %850, <16 x i16> %854, <16 x i16> zeroinitializer
  %856 = getelementptr inbounds i16, ptr %812, i64 %837
  store <16 x i16> %855, ptr %856, align 2, !tbaa !37
  %857 = add nuw i64 %837, 16
  %858 = add <16 x i64> %838, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %859 = icmp eq i64 %857, 65536
  br i1 %859, label %860, label %836, !llvm.loop !51

860:                                              ; preds = %836
  %861 = tail call ptr @AcquireAuthenticCacheView(ptr noundef %0, ptr noundef nonnull %16) #8
  %862 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %863 = load i64, ptr %862, align 8, !tbaa !30
  %864 = icmp sgt i64 %863, 0
  br i1 %864, label %865, label %937

865:                                              ; preds = %860
  %866 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %867

867:                                              ; preds = %865, %932
  %868 = phi i32 [ 1, %865 ], [ %933, %932 ]
  %869 = phi i64 [ 0, %865 ], [ %934, %932 ]
  %870 = icmp eq i32 %868, 0
  br i1 %870, label %932, label %871

871:                                              ; preds = %867
  %872 = load i64, ptr %866, align 8, !tbaa !31
  %873 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %861, i64 noundef 0, i64 noundef %869, i64 noundef %872, i64 noundef 1, ptr noundef nonnull %16) #9
  %874 = icmp eq ptr %873, null
  br i1 %874, label %932, label %875

875:                                              ; preds = %871
  %876 = load i64, ptr %866, align 8, !tbaa !31
  %877 = icmp eq i64 %876, 0
  br i1 %877, label %928, label %878

878:                                              ; preds = %875, %914
  %879 = phi i64 [ %926, %914 ], [ %876, %875 ]
  %880 = phi ptr [ %925, %914 ], [ %873, %875 ]
  %881 = getelementptr inbounds %struct._PixelPacket, ptr %880, i64 0, i32 2
  %882 = load i16, ptr %881, align 2, !tbaa !40
  %883 = uitofp i16 %882 to float
  %884 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %883) #9
  %885 = fcmp fast ugt float %884, 0.000000e+00
  br i1 %885, label %886, label %891

886:                                              ; preds = %878
  %887 = fcmp fast ult float %884, 6.553500e+04
  br i1 %887, label %888, label %891

888:                                              ; preds = %886
  %889 = fadd fast float %884, 5.000000e-01
  %890 = fptoui float %889 to i16
  br label %891

891:                                              ; preds = %878, %886, %888
  %892 = phi i16 [ %890, %888 ], [ 0, %878 ], [ -1, %886 ]
  %893 = getelementptr inbounds %struct._PixelPacket, ptr %880, i64 0, i32 1
  %894 = load i16, ptr %893, align 2, !tbaa !41
  %895 = uitofp i16 %894 to float
  %896 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %895) #9
  %897 = fcmp fast ugt float %896, 0.000000e+00
  br i1 %897, label %898, label %903

898:                                              ; preds = %891
  %899 = fcmp fast ult float %896, 6.553500e+04
  br i1 %899, label %900, label %903

900:                                              ; preds = %898
  %901 = fadd fast float %896, 5.000000e-01
  %902 = fptoui float %901 to i16
  br label %903

903:                                              ; preds = %891, %898, %900
  %904 = phi i16 [ %902, %900 ], [ 0, %891 ], [ -1, %898 ]
  %905 = load i16, ptr %880, align 2, !tbaa !38
  %906 = uitofp i16 %905 to float
  %907 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %906) #9
  %908 = fcmp fast ugt float %907, 0.000000e+00
  br i1 %908, label %909, label %914

909:                                              ; preds = %903
  %910 = fcmp fast ult float %907, 6.553500e+04
  br i1 %910, label %911, label %914

911:                                              ; preds = %909
  %912 = fadd fast float %907, 5.000000e-01
  %913 = fptoui float %912 to i16
  br label %914

914:                                              ; preds = %903, %909, %911
  %915 = phi i16 [ %913, %911 ], [ 0, %903 ], [ -1, %909 ]
  %916 = zext i16 %892 to i64
  %917 = getelementptr inbounds i16, ptr %812, i64 %916
  %918 = load i16, ptr %917, align 2, !tbaa !37
  store i16 %918, ptr %881, align 2, !tbaa !40
  %919 = zext i16 %904 to i64
  %920 = getelementptr inbounds i16, ptr %812, i64 %919
  %921 = load i16, ptr %920, align 2, !tbaa !37
  store i16 %921, ptr %893, align 2, !tbaa !41
  %922 = zext i16 %915 to i64
  %923 = getelementptr inbounds i16, ptr %812, i64 %922
  %924 = load i16, ptr %923, align 2, !tbaa !37
  store i16 %924, ptr %880, align 2, !tbaa !38
  %925 = getelementptr inbounds %struct._PixelPacket, ptr %880, i64 1
  %926 = add nsw i64 %879, -1
  %927 = icmp eq i64 %926, 0
  br i1 %927, label %928, label %878, !llvm.loop !54

928:                                              ; preds = %914, %875
  %929 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %861, ptr noundef nonnull %16) #9
  %930 = icmp ne i32 %929, 0
  %931 = zext i1 %930 to i32
  br label %932

932:                                              ; preds = %871, %867, %928
  %933 = phi i32 [ %931, %928 ], [ 0, %867 ], [ 0, %871 ]
  %934 = add nuw nsw i64 %869, 1
  %935 = load i64, ptr %862, align 8, !tbaa !30
  %936 = icmp slt i64 %934, %935
  br i1 %936, label %867, label %937, !llvm.loop !55

937:                                              ; preds = %932, %860
  %938 = phi i32 [ 1, %860 ], [ %933, %932 ]
  %939 = tail call ptr @DestroyCacheView(ptr noundef %861) #8
  %940 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %812) #8
  %941 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %942 = load i32, ptr %941, align 4, !tbaa !25
  %943 = icmp eq i32 %942, 21
  br i1 %943, label %1953, label %944

944:                                              ; preds = %937
  store i32 21, ptr %941, align 4, !tbaa !25
  %945 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %945, align 8, !tbaa !26
  %946 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %946, align 8, !tbaa !27
  %947 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %948 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %947, i32 noundef 0, i64 noundef 96) #8
  %949 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %950 = load i32, ptr %949, align 8, !tbaa !28
  store i32 2, ptr %945, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %947, align 8, !tbaa !29
  %951 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %951, align 8, !tbaa !29
  %952 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %952, align 8, !tbaa !29
  %953 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  store i32 %950, ptr %949, align 8, !tbaa !28
  %954 = freeze i32 %953
  %955 = icmp eq i32 %954, 0
  %956 = select i1 %955, i32 0, i32 %938
  br label %1953

957:                                              ; preds = %15, %15
  %958 = load i32, ptr %0, align 8, !tbaa !24
  %959 = icmp eq i32 %958, 2
  br i1 %959, label %960, label %966

960:                                              ; preds = %957
  %961 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %962 = icmp eq i32 %961, 0
  br i1 %962, label %1953, label %963

963:                                              ; preds = %960
  %964 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %965 = icmp eq i32 %964, 0
  br i1 %965, label %1953, label %966

966:                                              ; preds = %963, %957
  %967 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  %968 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %969 = load i64, ptr %968, align 8, !tbaa !30
  %970 = icmp sgt i64 %969, 0
  br i1 %970, label %971, label %1035

971:                                              ; preds = %966
  %972 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %973

973:                                              ; preds = %971, %1030
  %974 = phi i32 [ 1, %971 ], [ %1031, %1030 ]
  %975 = phi i64 [ 0, %971 ], [ %1032, %1030 ]
  %976 = icmp eq i32 %974, 0
  br i1 %976, label %1030, label %977

977:                                              ; preds = %973
  %978 = load i64, ptr %972, align 8, !tbaa !31
  %979 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %967, i64 noundef 0, i64 noundef %975, i64 noundef %978, i64 noundef 1, ptr noundef nonnull %16) #9
  %980 = icmp eq ptr %979, null
  br i1 %980, label %1030, label %981

981:                                              ; preds = %977
  %982 = load i64, ptr %972, align 8, !tbaa !31
  %983 = icmp sgt i64 %982, 0
  br i1 %983, label %984, label %1026

984:                                              ; preds = %981, %1020
  %985 = phi ptr [ %1022, %1020 ], [ %979, %981 ]
  %986 = phi i64 [ %1023, %1020 ], [ 0, %981 ]
  %987 = getelementptr inbounds %struct._PixelPacket, ptr %985, i64 0, i32 2
  %988 = load i16, ptr %987, align 2, !tbaa !40
  %989 = uitofp i16 %988 to float
  %990 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %989) #9
  %991 = fcmp fast ugt float %990, 0.000000e+00
  br i1 %991, label %992, label %997

992:                                              ; preds = %984
  %993 = fcmp fast ult float %990, 6.553500e+04
  br i1 %993, label %994, label %997

994:                                              ; preds = %992
  %995 = fadd fast float %990, 5.000000e-01
  %996 = fptoui float %995 to i16
  br label %997

997:                                              ; preds = %984, %992, %994
  %998 = phi i16 [ %996, %994 ], [ 0, %984 ], [ -1, %992 ]
  %999 = getelementptr inbounds %struct._PixelPacket, ptr %985, i64 0, i32 1
  %1000 = load i16, ptr %999, align 2, !tbaa !41
  %1001 = uitofp i16 %1000 to float
  %1002 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %1001) #9
  %1003 = fcmp fast ugt float %1002, 0.000000e+00
  br i1 %1003, label %1004, label %1009

1004:                                             ; preds = %997
  %1005 = fcmp fast ult float %1002, 6.553500e+04
  br i1 %1005, label %1006, label %1009

1006:                                             ; preds = %1004
  %1007 = fadd fast float %1002, 5.000000e-01
  %1008 = fptoui float %1007 to i16
  br label %1009

1009:                                             ; preds = %997, %1004, %1006
  %1010 = phi i16 [ %1008, %1006 ], [ 0, %997 ], [ -1, %1004 ]
  %1011 = load i16, ptr %985, align 2, !tbaa !38
  %1012 = uitofp i16 %1011 to float
  %1013 = tail call fast nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf) %1012) #9
  %1014 = fcmp fast ugt float %1013, 0.000000e+00
  br i1 %1014, label %1015, label %1020

1015:                                             ; preds = %1009
  %1016 = fcmp fast ult float %1013, 6.553500e+04
  br i1 %1016, label %1017, label %1020

1017:                                             ; preds = %1015
  %1018 = fadd fast float %1013, 5.000000e-01
  %1019 = fptoui float %1018 to i16
  br label %1020

1020:                                             ; preds = %1009, %1015, %1017
  %1021 = phi i16 [ %1019, %1017 ], [ 0, %1009 ], [ -1, %1015 ]
  store i16 %998, ptr %987, align 2, !tbaa !40
  store i16 %1010, ptr %999, align 2, !tbaa !41
  store i16 %1021, ptr %985, align 2, !tbaa !38
  %1022 = getelementptr inbounds %struct._PixelPacket, ptr %985, i64 1
  %1023 = add nuw nsw i64 %986, 1
  %1024 = load i64, ptr %972, align 8, !tbaa !31
  %1025 = icmp slt i64 %1023, %1024
  br i1 %1025, label %984, label %1026, !llvm.loop !56

1026:                                             ; preds = %1020, %981
  %1027 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %967, ptr noundef nonnull %16) #9
  %1028 = icmp ne i32 %1027, 0
  %1029 = zext i1 %1028 to i32
  br label %1030

1030:                                             ; preds = %977, %973, %1026
  %1031 = phi i32 [ %1029, %1026 ], [ 0, %973 ], [ 0, %977 ]
  %1032 = add nuw nsw i64 %975, 1
  %1033 = load i64, ptr %968, align 8, !tbaa !30
  %1034 = icmp slt i64 %1032, %1033
  br i1 %1034, label %973, label %1035, !llvm.loop !57

1035:                                             ; preds = %1030, %966
  %1036 = phi i32 [ 1, %966 ], [ %1031, %1030 ]
  %1037 = tail call ptr @DestroyCacheView(ptr noundef %967) #8
  %1038 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %1039 = load i32, ptr %1038, align 4, !tbaa !25
  %1040 = icmp eq i32 %1039, %1
  br i1 %1040, label %1953, label %1041

1041:                                             ; preds = %1035
  store i32 %1, ptr %1038, align 4, !tbaa !25
  %1042 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %1042, align 8, !tbaa !26
  %1043 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %1043, align 8, !tbaa !27
  %1044 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %1045 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %1044, i32 noundef 0, i64 noundef 96) #8
  %1046 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %1047 = load i32, ptr %1046, align 8, !tbaa !28
  switch i32 %1, label %1053 [
    i32 19, label %1048
    i32 17, label %1048
    i32 2, label %1048
    i32 29, label %1052
    i32 6, label %1052
    i32 1, label %1052
  ]

1048:                                             ; preds = %1041, %1041, %1041
  %1049 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  %1050 = load i32, ptr %1049, align 8, !tbaa !48
  switch i32 %1050, label %1056 [
    i32 5, label %1051
    i32 7, label %1051
  ]

1051:                                             ; preds = %1048, %1048
  store double 1.000000e+00, ptr %1043, align 8, !tbaa !27
  br label %1056

1052:                                             ; preds = %1041, %1041, %1041
  store double 1.000000e+00, ptr %1043, align 8, !tbaa !27
  br label %1056

1053:                                             ; preds = %1041
  store i32 2, ptr %1042, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %1044, align 8, !tbaa !29
  %1054 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %1054, align 8, !tbaa !29
  %1055 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %1055, align 8, !tbaa !29
  br label %1056

1056:                                             ; preds = %1048, %1051, %1052, %1053
  %1057 = phi i32 [ %1047, %1052 ], [ %1047, %1053 ], [ 2, %1048 ], [ 2, %1051 ]
  %1058 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  store i32 %1057, ptr %1046, align 8, !tbaa !28
  %1059 = freeze i32 %1058
  %1060 = icmp eq i32 %1059, 0
  %1061 = select i1 %1060, i32 0, i32 %1036
  br label %1953

1062:                                             ; preds = %15
  %1063 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1064 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1065 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1066 = icmp eq ptr %1063, null
  %1067 = icmp eq ptr %1064, null
  %1068 = select i1 %1066, i1 true, i1 %1067
  %1069 = icmp eq ptr %1065, null
  %1070 = select i1 %1068, i1 true, i1 %1069
  br i1 %1070, label %1071, label %1074

1071:                                             ; preds = %1062
  %1072 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %1073 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %16, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 747, i32 noundef 400, ptr noundef nonnull @.str.7, ptr noundef nonnull @.str.8, ptr noundef nonnull %1072) #8
  br label %1953

1074:                                             ; preds = %1062
  %1075 = call ptr @ResetMagickMemory(ptr noundef nonnull %4, i32 noundef 0, i64 noundef 24) #8
  switch i32 %1, label %1676 [
    i32 4, label %1076
    i32 17, label %1179
    i32 18, label %1199
    i32 19, label %1310
    i32 20, label %1330
    i32 8, label %1441
  ]

1076:                                             ; preds = %1074
  %1077 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %1077, align 8, !tbaa !29
  %1078 = getelementptr i8, ptr %1063, i64 786424
  %1079 = getelementptr i8, ptr %1064, i64 786424
  %1080 = getelementptr i8, ptr %1065, i64 786424
  %1081 = getelementptr i8, ptr %1063, i64 4
  %1082 = getelementptr i8, ptr %1063, i64 786428
  %1083 = getelementptr i8, ptr %1064, i64 4
  %1084 = getelementptr i8, ptr %1064, i64 786428
  %1085 = getelementptr i8, ptr %1065, i64 4
  %1086 = getelementptr i8, ptr %1065, i64 786428
  %1087 = getelementptr i8, ptr %1063, i64 8
  %1088 = getelementptr i8, ptr %1063, i64 786432
  %1089 = getelementptr i8, ptr %1064, i64 8
  %1090 = getelementptr i8, ptr %1064, i64 786432
  %1091 = getelementptr i8, ptr %1065, i64 8
  %1092 = getelementptr i8, ptr %1065, i64 786432
  %1093 = icmp ult ptr %1063, %1079
  %1094 = icmp ult ptr %1064, %1078
  %1095 = and i1 %1093, %1094
  %1096 = icmp ult ptr %1063, %1080
  %1097 = icmp ult ptr %1065, %1078
  %1098 = and i1 %1096, %1097
  %1099 = or i1 %1095, %1098
  %1100 = icmp ult ptr %1064, %1080
  %1101 = icmp ult ptr %1065, %1079
  %1102 = and i1 %1100, %1101
  %1103 = or i1 %1099, %1102
  %1104 = icmp ult ptr %1081, %1084
  %1105 = icmp ult ptr %1083, %1082
  %1106 = and i1 %1104, %1105
  %1107 = or i1 %1103, %1106
  %1108 = icmp ult ptr %1081, %1086
  %1109 = icmp ult ptr %1085, %1082
  %1110 = and i1 %1108, %1109
  %1111 = or i1 %1107, %1110
  %1112 = icmp ult ptr %1083, %1086
  %1113 = icmp ult ptr %1085, %1084
  %1114 = and i1 %1112, %1113
  %1115 = or i1 %1111, %1114
  %1116 = icmp ult ptr %1087, %1090
  %1117 = icmp ult ptr %1089, %1088
  %1118 = and i1 %1116, %1117
  %1119 = or i1 %1115, %1118
  %1120 = icmp ult ptr %1087, %1092
  %1121 = icmp ult ptr %1091, %1088
  %1122 = and i1 %1120, %1121
  %1123 = or i1 %1119, %1122
  %1124 = icmp ult ptr %1089, %1092
  %1125 = icmp ult ptr %1091, %1090
  %1126 = and i1 %1124, %1125
  %1127 = or i1 %1123, %1126
  br i1 %1127, label %1156, label %1128

1128:                                             ; preds = %1076, %1128
  %1129 = phi i64 [ %1153, %1128 ], [ 0, %1076 ]
  %1130 = phi <4 x i64> [ %1154, %1128 ], [ <i64 0, i64 1, i64 2, i64 3>, %1076 ]
  %1131 = sitofp <4 x i64> %1130 to <4 x double>
  %1132 = fmul fast <4 x double> %1131, <double 3.333300e-01, double 3.333300e-01, double 3.333300e-01, double 3.333300e-01>
  %1133 = fptrunc <4 x double> %1132 to <4 x float>
  %1134 = fmul fast <4 x double> %1131, <double 3.333400e-01, double 3.333400e-01, double 3.333400e-01, double 3.333400e-01>
  %1135 = fptrunc <4 x double> %1134 to <4 x float>
  %1136 = fmul fast <4 x double> %1131, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %1137 = fptrunc <4 x double> %1136 to <4 x float>
  %1138 = fmul fast <4 x double> %1131, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %1139 = fptrunc <4 x double> %1138 to <4 x float>
  %1140 = fmul fast <4 x double> %1131, <double -2.500000e-01, double -2.500000e-01, double -2.500000e-01, double -2.500000e-01>
  %1141 = fptrunc <4 x double> %1140 to <4 x float>
  %1142 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1129
  %1143 = shufflevector <4 x float> %1133, <4 x float> %1137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1144 = shufflevector <4 x float> %1141, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1145 = shufflevector <8 x float> %1143, <8 x float> %1144, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1145, ptr %1142, align 4, !tbaa !35
  %1146 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1129
  %1147 = shufflevector <4 x float> %1135, <4 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1148 = shufflevector <4 x float> %1137, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1149 = shufflevector <8 x float> %1147, <8 x float> %1148, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1149, ptr %1146, align 4, !tbaa !35
  %1150 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1129
  %1151 = shufflevector <4 x float> %1133, <4 x float> %1139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1152 = shufflevector <8 x float> %1151, <8 x float> %1144, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1152, ptr %1150, align 4, !tbaa !35
  %1153 = add nuw i64 %1129, 4
  %1154 = add <4 x i64> %1130, <i64 4, i64 4, i64 4, i64 4>
  %1155 = icmp eq i64 %1153, 65536
  br i1 %1155, label %1690, label %1128, !llvm.loop !58

1156:                                             ; preds = %1076, %1156
  %1157 = phi i64 [ %1177, %1156 ], [ 0, %1076 ]
  %1158 = sitofp i64 %1157 to double
  %1159 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1157
  %1160 = fmul fast double %1158, 3.333400e-01
  %1161 = fptrunc double %1160 to float
  %1162 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1157
  %1163 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1157
  %1164 = insertelement <2 x double> poison, double %1158, i64 0
  %1165 = shufflevector <2 x double> %1164, <2 x double> poison, <2 x i32> zeroinitializer
  %1166 = fmul fast <2 x double> %1165, <double 3.333300e-01, double 5.000000e-01>
  %1167 = fptrunc <2 x double> %1166 to <2 x float>
  store <2 x float> %1167, ptr %1159, align 4, !tbaa !35
  store float %1161, ptr %1162, align 4, !tbaa !59
  %1168 = extractelement <2 x float> %1167, i64 0
  store float %1168, ptr %1163, align 4, !tbaa !59
  %1169 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1157, i32 1
  store float 0.000000e+00, ptr %1169, align 4, !tbaa !61
  %1170 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1157, i32 1
  %1171 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1157, i32 2
  %1172 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1157, i32 2
  %1173 = extractelement <2 x float> %1167, i64 1
  %1174 = fmul fast <2 x double> %1165, <double -5.000000e-01, double -2.500000e-01>
  %1175 = fptrunc <2 x double> %1174 to <2 x float>
  %1176 = extractelement <2 x float> %1175, i64 1
  store float %1176, ptr %1171, align 4, !tbaa !62
  store float %1173, ptr %1172, align 4, !tbaa !62
  store <2 x float> %1175, ptr %1170, align 4, !tbaa !35
  %1177 = add nuw nsw i64 %1157, 1
  %1178 = icmp eq i64 %1177, 65536
  br i1 %1178, label %1690, label %1156, !llvm.loop !63

1179:                                             ; preds = %1074, %1179
  %1180 = phi i64 [ %1197, %1179 ], [ 0, %1074 ]
  %1181 = sitofp i64 %1180 to double
  %1182 = fmul fast double %1181, 2.988390e-01
  %1183 = fptrunc double %1182 to float
  %1184 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1180
  store float %1183, ptr %1184, align 4, !tbaa !59
  %1185 = fmul fast double %1181, 5.868110e-01
  %1186 = fptrunc double %1185 to float
  %1187 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1180
  store float %1186, ptr %1187, align 4, !tbaa !59
  %1188 = fmul fast double %1181, 1.143500e-01
  %1189 = fptrunc double %1188 to float
  %1190 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1180
  store float %1189, ptr %1190, align 4, !tbaa !59
  %1191 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1180, i32 1
  store float %1183, ptr %1191, align 4, !tbaa !61
  %1192 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1180, i32 1
  store float %1186, ptr %1192, align 4, !tbaa !61
  %1193 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1180, i32 1
  store float %1189, ptr %1193, align 4, !tbaa !61
  %1194 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1180, i32 2
  store float %1183, ptr %1194, align 4, !tbaa !62
  %1195 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1180, i32 2
  store float %1186, ptr %1195, align 4, !tbaa !62
  %1196 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1180, i32 2
  store float %1189, ptr %1196, align 4, !tbaa !62
  %1197 = add nuw nsw i64 %1180, 1
  %1198 = icmp eq i64 %1197, 65536
  br i1 %1198, label %1690, label %1179, !llvm.loop !64

1199:                                             ; preds = %1074
  %1200 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %1200, align 8, !tbaa !29
  %1201 = getelementptr i8, ptr %1063, i64 786424
  %1202 = getelementptr i8, ptr %1064, i64 786424
  %1203 = getelementptr i8, ptr %1065, i64 786424
  %1204 = getelementptr i8, ptr %1063, i64 4
  %1205 = getelementptr i8, ptr %1063, i64 786428
  %1206 = getelementptr i8, ptr %1064, i64 4
  %1207 = getelementptr i8, ptr %1064, i64 786428
  %1208 = getelementptr i8, ptr %1065, i64 4
  %1209 = getelementptr i8, ptr %1065, i64 786428
  %1210 = getelementptr i8, ptr %1063, i64 8
  %1211 = getelementptr i8, ptr %1063, i64 786432
  %1212 = getelementptr i8, ptr %1064, i64 8
  %1213 = getelementptr i8, ptr %1064, i64 786432
  %1214 = getelementptr i8, ptr %1065, i64 8
  %1215 = getelementptr i8, ptr %1065, i64 786432
  %1216 = icmp ult ptr %1063, %1202
  %1217 = icmp ult ptr %1064, %1201
  %1218 = and i1 %1216, %1217
  %1219 = icmp ult ptr %1063, %1203
  %1220 = icmp ult ptr %1065, %1201
  %1221 = and i1 %1219, %1220
  %1222 = or i1 %1218, %1221
  %1223 = icmp ult ptr %1064, %1203
  %1224 = icmp ult ptr %1065, %1202
  %1225 = and i1 %1223, %1224
  %1226 = or i1 %1222, %1225
  %1227 = icmp ult ptr %1204, %1207
  %1228 = icmp ult ptr %1206, %1205
  %1229 = and i1 %1227, %1228
  %1230 = or i1 %1226, %1229
  %1231 = icmp ult ptr %1204, %1209
  %1232 = icmp ult ptr %1208, %1205
  %1233 = and i1 %1231, %1232
  %1234 = or i1 %1230, %1233
  %1235 = icmp ult ptr %1206, %1209
  %1236 = icmp ult ptr %1208, %1207
  %1237 = and i1 %1235, %1236
  %1238 = or i1 %1234, %1237
  %1239 = icmp ult ptr %1210, %1213
  %1240 = icmp ult ptr %1212, %1211
  %1241 = and i1 %1239, %1240
  %1242 = or i1 %1238, %1241
  %1243 = icmp ult ptr %1210, %1215
  %1244 = icmp ult ptr %1214, %1211
  %1245 = and i1 %1243, %1244
  %1246 = or i1 %1242, %1245
  %1247 = icmp ult ptr %1212, %1215
  %1248 = icmp ult ptr %1214, %1213
  %1249 = and i1 %1247, %1248
  %1250 = or i1 %1246, %1249
  br i1 %1250, label %1286, label %1251

1251:                                             ; preds = %1199, %1251
  %1252 = phi i64 [ %1283, %1251 ], [ 0, %1199 ]
  %1253 = phi <4 x i64> [ %1284, %1251 ], [ <i64 0, i64 1, i64 2, i64 3>, %1199 ]
  %1254 = sitofp <4 x i64> %1253 to <4 x double>
  %1255 = fmul fast <4 x double> %1254, <double 2.988390e-01, double 2.988390e-01, double 2.988390e-01, double 2.988390e-01>
  %1256 = fptrunc <4 x double> %1255 to <4 x float>
  %1257 = fmul fast <4 x double> %1254, <double 5.868110e-01, double 5.868110e-01, double 5.868110e-01, double 5.868110e-01>
  %1258 = fptrunc <4 x double> %1257 to <4 x float>
  %1259 = fmul fast <4 x double> %1254, <double 1.143500e-01, double 1.143500e-01, double 1.143500e-01, double 1.143500e-01>
  %1260 = fptrunc <4 x double> %1259 to <4 x float>
  %1261 = fmul fast <4 x double> %1254, <double 0xBFC5992A08114679, double 0xBFC5992A08114679, double 0xBFC5992A08114679, double 0xBFC5992A08114679>
  %1262 = fptrunc <4 x double> %1261 to <4 x float>
  %1263 = fmul fast <4 x double> %1254, <double -3.312640e-01, double -3.312640e-01, double -3.312640e-01, double -3.312640e-01>
  %1264 = fptrunc <4 x double> %1263 to <4 x float>
  %1265 = fmul fast <4 x double> %1254, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %1266 = fptrunc <4 x double> %1265 to <4 x float>
  %1267 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1252
  %1268 = shufflevector <4 x float> %1256, <4 x float> %1262, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1269 = shufflevector <4 x float> %1266, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1270 = shufflevector <8 x float> %1268, <8 x float> %1269, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1270, ptr %1267, align 4, !tbaa !35
  %1271 = fmul fast <4 x double> %1254, <double -4.186880e-01, double -4.186880e-01, double -4.186880e-01, double -4.186880e-01>
  %1272 = fptrunc <4 x double> %1271 to <4 x float>
  %1273 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1252
  %1274 = shufflevector <4 x float> %1258, <4 x float> %1264, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1275 = shufflevector <4 x float> %1272, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1276 = shufflevector <8 x float> %1274, <8 x float> %1275, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1276, ptr %1273, align 4, !tbaa !35
  %1277 = fmul fast <4 x double> %1254, <double -8.131200e-02, double -8.131200e-02, double -8.131200e-02, double -8.131200e-02>
  %1278 = fptrunc <4 x double> %1277 to <4 x float>
  %1279 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1252
  %1280 = shufflevector <4 x float> %1260, <4 x float> %1266, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1281 = shufflevector <4 x float> %1278, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1282 = shufflevector <8 x float> %1280, <8 x float> %1281, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1282, ptr %1279, align 4, !tbaa !35
  %1283 = add nuw i64 %1252, 4
  %1284 = add <4 x i64> %1253, <i64 4, i64 4, i64 4, i64 4>
  %1285 = icmp eq i64 %1283, 65536
  br i1 %1285, label %1690, label %1251, !llvm.loop !65

1286:                                             ; preds = %1199, %1286
  %1287 = phi i64 [ %1308, %1286 ], [ 0, %1199 ]
  %1288 = sitofp i64 %1287 to double
  %1289 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1287
  %1290 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1287
  %1291 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1287
  %1292 = insertelement <2 x double> poison, double %1288, i64 0
  %1293 = shufflevector <2 x double> %1292, <2 x double> poison, <2 x i32> zeroinitializer
  %1294 = fmul fast <2 x double> %1293, <double 2.988390e-01, double 0xBFC5992A08114679>
  %1295 = fptrunc <2 x double> %1294 to <2 x float>
  store <2 x float> %1295, ptr %1289, align 4, !tbaa !35
  %1296 = fmul fast <2 x double> %1293, <double 5.868110e-01, double -3.312640e-01>
  %1297 = fptrunc <2 x double> %1296 to <2 x float>
  store <2 x float> %1297, ptr %1290, align 4, !tbaa !35
  %1298 = fmul fast <2 x double> %1293, <double 1.143500e-01, double 5.000000e-01>
  %1299 = fptrunc <2 x double> %1298 to <2 x float>
  store <2 x float> %1299, ptr %1291, align 4, !tbaa !35
  %1300 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1287, i32 2
  %1301 = extractelement <2 x float> %1299, i64 1
  store float %1301, ptr %1300, align 4, !tbaa !62
  %1302 = fmul fast double %1288, -4.186880e-01
  %1303 = fptrunc double %1302 to float
  %1304 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1287, i32 2
  store float %1303, ptr %1304, align 4, !tbaa !62
  %1305 = fmul fast double %1288, -8.131200e-02
  %1306 = fptrunc double %1305 to float
  %1307 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1287, i32 2
  store float %1306, ptr %1307, align 4, !tbaa !62
  %1308 = add nuw nsw i64 %1287, 1
  %1309 = icmp eq i64 %1308, 65536
  br i1 %1309, label %1690, label %1286, !llvm.loop !66

1310:                                             ; preds = %1074, %1310
  %1311 = phi i64 [ %1328, %1310 ], [ 0, %1074 ]
  %1312 = sitofp i64 %1311 to double
  %1313 = fmul fast double %1312, 2.126560e-01
  %1314 = fptrunc double %1313 to float
  %1315 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1311
  store float %1314, ptr %1315, align 4, !tbaa !59
  %1316 = fmul fast double %1312, 0x3FE6E29307AF20EA
  %1317 = fptrunc double %1316 to float
  %1318 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1311
  store float %1317, ptr %1318, align 4, !tbaa !59
  %1319 = fmul fast double %1312, 7.218600e-02
  %1320 = fptrunc double %1319 to float
  %1321 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1311
  store float %1320, ptr %1321, align 4, !tbaa !59
  %1322 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1311, i32 1
  store float %1314, ptr %1322, align 4, !tbaa !61
  %1323 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1311, i32 1
  store float %1317, ptr %1323, align 4, !tbaa !61
  %1324 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1311, i32 1
  store float %1320, ptr %1324, align 4, !tbaa !61
  %1325 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1311, i32 2
  store float %1314, ptr %1325, align 4, !tbaa !62
  %1326 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1311, i32 2
  store float %1317, ptr %1326, align 4, !tbaa !62
  %1327 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1311, i32 2
  store float %1320, ptr %1327, align 4, !tbaa !62
  %1328 = add nuw nsw i64 %1311, 1
  %1329 = icmp eq i64 %1328, 65536
  br i1 %1329, label %1690, label %1310, !llvm.loop !67

1330:                                             ; preds = %1074
  %1331 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  store <2 x double> <double 3.276800e+04, double 3.276800e+04>, ptr %1331, align 8, !tbaa !29
  %1332 = getelementptr i8, ptr %1063, i64 786424
  %1333 = getelementptr i8, ptr %1064, i64 786424
  %1334 = getelementptr i8, ptr %1065, i64 786424
  %1335 = getelementptr i8, ptr %1063, i64 4
  %1336 = getelementptr i8, ptr %1063, i64 786428
  %1337 = getelementptr i8, ptr %1064, i64 4
  %1338 = getelementptr i8, ptr %1064, i64 786428
  %1339 = getelementptr i8, ptr %1065, i64 4
  %1340 = getelementptr i8, ptr %1065, i64 786428
  %1341 = getelementptr i8, ptr %1063, i64 8
  %1342 = getelementptr i8, ptr %1063, i64 786432
  %1343 = getelementptr i8, ptr %1064, i64 8
  %1344 = getelementptr i8, ptr %1064, i64 786432
  %1345 = getelementptr i8, ptr %1065, i64 8
  %1346 = getelementptr i8, ptr %1065, i64 786432
  %1347 = icmp ult ptr %1063, %1333
  %1348 = icmp ult ptr %1064, %1332
  %1349 = and i1 %1347, %1348
  %1350 = icmp ult ptr %1063, %1334
  %1351 = icmp ult ptr %1065, %1332
  %1352 = and i1 %1350, %1351
  %1353 = or i1 %1349, %1352
  %1354 = icmp ult ptr %1064, %1334
  %1355 = icmp ult ptr %1065, %1333
  %1356 = and i1 %1354, %1355
  %1357 = or i1 %1353, %1356
  %1358 = icmp ult ptr %1335, %1338
  %1359 = icmp ult ptr %1337, %1336
  %1360 = and i1 %1358, %1359
  %1361 = or i1 %1357, %1360
  %1362 = icmp ult ptr %1335, %1340
  %1363 = icmp ult ptr %1339, %1336
  %1364 = and i1 %1362, %1363
  %1365 = or i1 %1361, %1364
  %1366 = icmp ult ptr %1337, %1340
  %1367 = icmp ult ptr %1339, %1338
  %1368 = and i1 %1366, %1367
  %1369 = or i1 %1365, %1368
  %1370 = icmp ult ptr %1341, %1344
  %1371 = icmp ult ptr %1343, %1342
  %1372 = and i1 %1370, %1371
  %1373 = or i1 %1369, %1372
  %1374 = icmp ult ptr %1341, %1346
  %1375 = icmp ult ptr %1345, %1342
  %1376 = and i1 %1374, %1375
  %1377 = or i1 %1373, %1376
  %1378 = icmp ult ptr %1343, %1346
  %1379 = icmp ult ptr %1345, %1344
  %1380 = and i1 %1378, %1379
  %1381 = or i1 %1377, %1380
  br i1 %1381, label %1417, label %1382

1382:                                             ; preds = %1330, %1382
  %1383 = phi i64 [ %1414, %1382 ], [ 0, %1330 ]
  %1384 = phi <4 x i64> [ %1415, %1382 ], [ <i64 0, i64 1, i64 2, i64 3>, %1330 ]
  %1385 = sitofp <4 x i64> %1384 to <4 x double>
  %1386 = fmul fast <4 x double> %1385, <double 2.126560e-01, double 2.126560e-01, double 2.126560e-01, double 2.126560e-01>
  %1387 = fptrunc <4 x double> %1386 to <4 x float>
  %1388 = fmul fast <4 x double> %1385, <double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA, double 0x3FE6E29307AF20EA>
  %1389 = fptrunc <4 x double> %1388 to <4 x float>
  %1390 = fmul fast <4 x double> %1385, <double 7.218600e-02, double 7.218600e-02, double 7.218600e-02, double 7.218600e-02>
  %1391 = fptrunc <4 x double> %1390 to <4 x float>
  %1392 = fmul fast <4 x double> %1385, <double -1.145720e-01, double -1.145720e-01, double -1.145720e-01, double -1.145720e-01>
  %1393 = fptrunc <4 x double> %1392 to <4 x float>
  %1394 = fmul fast <4 x double> %1385, <double -3.854280e-01, double -3.854280e-01, double -3.854280e-01, double -3.854280e-01>
  %1395 = fptrunc <4 x double> %1394 to <4 x float>
  %1396 = fmul fast <4 x double> %1385, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %1397 = fptrunc <4 x double> %1396 to <4 x float>
  %1398 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1383
  %1399 = shufflevector <4 x float> %1387, <4 x float> %1393, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1400 = shufflevector <4 x float> %1397, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1401 = shufflevector <8 x float> %1399, <8 x float> %1400, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1401, ptr %1398, align 4, !tbaa !35
  %1402 = fmul fast <4 x double> %1385, <double -4.541530e-01, double -4.541530e-01, double -4.541530e-01, double -4.541530e-01>
  %1403 = fptrunc <4 x double> %1402 to <4 x float>
  %1404 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1383
  %1405 = shufflevector <4 x float> %1389, <4 x float> %1395, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1406 = shufflevector <4 x float> %1403, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1407 = shufflevector <8 x float> %1405, <8 x float> %1406, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1407, ptr %1404, align 4, !tbaa !35
  %1408 = fmul fast <4 x double> %1385, <double -4.584700e-02, double -4.584700e-02, double -4.584700e-02, double -4.584700e-02>
  %1409 = fptrunc <4 x double> %1408 to <4 x float>
  %1410 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1383
  %1411 = shufflevector <4 x float> %1391, <4 x float> %1397, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1412 = shufflevector <4 x float> %1409, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1413 = shufflevector <8 x float> %1411, <8 x float> %1412, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1413, ptr %1410, align 4, !tbaa !35
  %1414 = add nuw i64 %1383, 4
  %1415 = add <4 x i64> %1384, <i64 4, i64 4, i64 4, i64 4>
  %1416 = icmp eq i64 %1414, 65536
  br i1 %1416, label %1690, label %1382, !llvm.loop !68

1417:                                             ; preds = %1330, %1417
  %1418 = phi i64 [ %1439, %1417 ], [ 0, %1330 ]
  %1419 = sitofp i64 %1418 to double
  %1420 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1418
  %1421 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1418
  %1422 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1418
  %1423 = insertelement <2 x double> poison, double %1419, i64 0
  %1424 = shufflevector <2 x double> %1423, <2 x double> poison, <2 x i32> zeroinitializer
  %1425 = fmul fast <2 x double> %1424, <double 2.126560e-01, double -1.145720e-01>
  %1426 = fptrunc <2 x double> %1425 to <2 x float>
  store <2 x float> %1426, ptr %1420, align 4, !tbaa !35
  %1427 = fmul fast <2 x double> %1424, <double 0x3FE6E29307AF20EA, double -3.854280e-01>
  %1428 = fptrunc <2 x double> %1427 to <2 x float>
  store <2 x float> %1428, ptr %1421, align 4, !tbaa !35
  %1429 = fmul fast <2 x double> %1424, <double 7.218600e-02, double 5.000000e-01>
  %1430 = fptrunc <2 x double> %1429 to <2 x float>
  store <2 x float> %1430, ptr %1422, align 4, !tbaa !35
  %1431 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1418, i32 2
  %1432 = extractelement <2 x float> %1430, i64 1
  store float %1432, ptr %1431, align 4, !tbaa !62
  %1433 = fmul fast double %1419, -4.541530e-01
  %1434 = fptrunc double %1433 to float
  %1435 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1418, i32 2
  store float %1434, ptr %1435, align 4, !tbaa !62
  %1436 = fmul fast double %1419, -4.584700e-02
  %1437 = fptrunc double %1436 to float
  %1438 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1418, i32 2
  store float %1437, ptr %1438, align 4, !tbaa !62
  %1439 = add nuw nsw i64 %1418, 1
  %1440 = icmp eq i64 %1439, 65536
  br i1 %1440, label %1690, label %1417, !llvm.loop !69

1441:                                             ; preds = %1074
  %1442 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  store <2 x double> <double 4.009200e+04, double 3.520900e+04>, ptr %1442, align 8, !tbaa !29
  %1443 = getelementptr i8, ptr %1063, i64 14152
  %1444 = getelementptr i8, ptr %1064, i64 14152
  %1445 = getelementptr i8, ptr %1065, i64 14152
  %1446 = getelementptr i8, ptr %1063, i64 4
  %1447 = getelementptr i8, ptr %1063, i64 14156
  %1448 = getelementptr i8, ptr %1064, i64 4
  %1449 = getelementptr i8, ptr %1064, i64 14156
  %1450 = getelementptr i8, ptr %1065, i64 4
  %1451 = getelementptr i8, ptr %1065, i64 14156
  %1452 = getelementptr i8, ptr %1063, i64 8
  %1453 = getelementptr i8, ptr %1063, i64 14160
  %1454 = getelementptr i8, ptr %1064, i64 8
  %1455 = getelementptr i8, ptr %1064, i64 14160
  %1456 = getelementptr i8, ptr %1065, i64 8
  %1457 = getelementptr i8, ptr %1065, i64 14160
  %1458 = icmp ult ptr %1063, %1444
  %1459 = icmp ult ptr %1064, %1443
  %1460 = and i1 %1458, %1459
  %1461 = icmp ult ptr %1063, %1445
  %1462 = icmp ult ptr %1065, %1443
  %1463 = and i1 %1461, %1462
  %1464 = or i1 %1460, %1463
  %1465 = icmp ult ptr %1064, %1445
  %1466 = icmp ult ptr %1065, %1444
  %1467 = and i1 %1465, %1466
  %1468 = or i1 %1464, %1467
  %1469 = icmp ult ptr %1446, %1449
  %1470 = icmp ult ptr %1448, %1447
  %1471 = and i1 %1469, %1470
  %1472 = or i1 %1468, %1471
  %1473 = icmp ult ptr %1446, %1451
  %1474 = icmp ult ptr %1450, %1447
  %1475 = and i1 %1473, %1474
  %1476 = or i1 %1472, %1475
  %1477 = icmp ult ptr %1448, %1451
  %1478 = icmp ult ptr %1450, %1449
  %1479 = and i1 %1477, %1478
  %1480 = or i1 %1476, %1479
  %1481 = icmp ult ptr %1452, %1455
  %1482 = icmp ult ptr %1454, %1453
  %1483 = and i1 %1481, %1482
  %1484 = or i1 %1480, %1483
  %1485 = icmp ult ptr %1452, %1457
  %1486 = icmp ult ptr %1456, %1453
  %1487 = and i1 %1485, %1486
  %1488 = or i1 %1484, %1487
  %1489 = icmp ult ptr %1454, %1457
  %1490 = icmp ult ptr %1456, %1455
  %1491 = and i1 %1489, %1490
  %1492 = or i1 %1488, %1491
  br i1 %1492, label %1530, label %1493

1493:                                             ; preds = %1441, %1493
  %1494 = phi i64 [ %1527, %1493 ], [ 0, %1441 ]
  %1495 = phi <4 x i64> [ %1528, %1493 ], [ <i64 0, i64 1, i64 2, i64 3>, %1441 ]
  %1496 = sitofp <4 x i64> %1495 to <4 x double>
  %1497 = fmul fast <4 x double> %1496, <double 0x3F703A791220C84F, double 0x3F703A791220C84F, double 0x3F703A791220C84F, double 0x3F703A791220C84F>
  %1498 = fptrunc <4 x double> %1497 to <4 x float>
  %1499 = fmul fast <4 x double> %1496, <double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977, double 0x3F7FDC1B10C0C977>
  %1500 = fptrunc <4 x double> %1499 to <4 x float>
  %1501 = fmul fast <4 x double> %1496, <double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B, double 0x3F58BFEB287D572B>
  %1502 = fptrunc <4 x double> %1501 to <4 x float>
  %1503 = fmul fast <4 x double> %1496, <double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493, double 0xBF63E0FD926A0493>
  %1504 = fptrunc <4 x double> %1503 to <4 x float>
  %1505 = fmul fast <4 x double> %1496, <double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE, double 0xBF7383615CC71ABE>
  %1506 = fptrunc <4 x double> %1505 to <4 x float>
  %1507 = fmul fast <4 x double> %1496, <double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07, double 0x3F7D73E025FC1D07>
  %1508 = fptrunc <4 x double> %1507 to <4 x float>
  %1509 = fmul fast <4 x double> %1496, <double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B, double 0x3F7C5FC1981C824B>
  %1510 = fptrunc <4 x double> %1509 to <4 x float>
  %1511 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1494
  %1512 = shufflevector <4 x float> %1498, <4 x float> %1504, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1513 = shufflevector <4 x float> %1510, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1514 = shufflevector <8 x float> %1512, <8 x float> %1513, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1514, ptr %1511, align 4, !tbaa !35
  %1515 = fmul fast <4 x double> %1496, <double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933, double 0xBF77C27D39FCD933>
  %1516 = fptrunc <4 x double> %1515 to <4 x float>
  %1517 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1494
  %1518 = shufflevector <4 x float> %1500, <4 x float> %1506, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1519 = shufflevector <4 x float> %1516, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1520 = shufflevector <8 x float> %1518, <8 x float> %1519, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1520, ptr %1517, align 4, !tbaa !35
  %1521 = fmul fast <4 x double> %1496, <double 0xBF527511787EA45E, double 0xBF527511787EA45E, double 0xBF527511787EA45E, double 0xBF527511787EA45E>
  %1522 = fptrunc <4 x double> %1521 to <4 x float>
  %1523 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1494
  %1524 = shufflevector <4 x float> %1502, <4 x float> %1508, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1525 = shufflevector <4 x float> %1522, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1526 = shufflevector <8 x float> %1524, <8 x float> %1525, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1526, ptr %1523, align 4, !tbaa !35
  %1527 = add nuw i64 %1494, 4
  %1528 = add <4 x i64> %1495, <i64 4, i64 4, i64 4, i64 4>
  %1529 = icmp eq i64 %1527, 1180
  br i1 %1529, label %1555, label %1493, !llvm.loop !70

1530:                                             ; preds = %1441, %1530
  %1531 = phi i64 [ %1553, %1530 ], [ 0, %1441 ]
  %1532 = sitofp i64 %1531 to double
  %1533 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1531
  %1534 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1531
  %1535 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1531
  %1536 = insertelement <2 x double> poison, double %1532, i64 0
  %1537 = shufflevector <2 x double> %1536, <2 x double> poison, <2 x i32> zeroinitializer
  %1538 = fmul fast <2 x double> %1537, <double 0x3F703A791220C84F, double 0xBF63E0FD926A0493>
  %1539 = fptrunc <2 x double> %1538 to <2 x float>
  store <2 x float> %1539, ptr %1533, align 4, !tbaa !35
  %1540 = fmul fast <2 x double> %1537, <double 0x3F7FDC1B10C0C977, double 0xBF7383615CC71ABE>
  %1541 = fptrunc <2 x double> %1540 to <2 x float>
  store <2 x float> %1541, ptr %1534, align 4, !tbaa !35
  %1542 = fmul fast <2 x double> %1537, <double 0x3F58BFEB287D572B, double 0x3F7D73E025FC1D07>
  %1543 = fptrunc <2 x double> %1542 to <2 x float>
  store <2 x float> %1543, ptr %1535, align 4, !tbaa !35
  %1544 = fmul fast double %1532, 0x3F7C5FC1981C824B
  %1545 = fptrunc double %1544 to float
  %1546 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1531, i32 2
  store float %1545, ptr %1546, align 4, !tbaa !62
  %1547 = fmul fast double %1532, 0xBF77C27D39FCD933
  %1548 = fptrunc double %1547 to float
  %1549 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1531, i32 2
  store float %1548, ptr %1549, align 4, !tbaa !62
  %1550 = fmul fast double %1532, 0xBF527511787EA45E
  %1551 = fptrunc double %1550 to float
  %1552 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1531, i32 2
  store float %1551, ptr %1552, align 4, !tbaa !62
  %1553 = add nuw nsw i64 %1531, 1
  %1554 = icmp eq i64 %1553, 1180
  br i1 %1554, label %1555, label %1530, !llvm.loop !71

1555:                                             ; preds = %1493, %1530
  %1556 = getelementptr i8, ptr %1063, i64 14160
  %1557 = getelementptr i8, ptr %1063, i64 786424
  %1558 = getelementptr i8, ptr %1064, i64 14160
  %1559 = getelementptr i8, ptr %1064, i64 786424
  %1560 = getelementptr i8, ptr %1065, i64 14160
  %1561 = getelementptr i8, ptr %1065, i64 786424
  %1562 = getelementptr i8, ptr %1063, i64 14164
  %1563 = getelementptr i8, ptr %1063, i64 786428
  %1564 = getelementptr i8, ptr %1064, i64 14164
  %1565 = getelementptr i8, ptr %1064, i64 786428
  %1566 = getelementptr i8, ptr %1065, i64 14164
  %1567 = getelementptr i8, ptr %1065, i64 786428
  %1568 = getelementptr i8, ptr %1063, i64 14168
  %1569 = getelementptr i8, ptr %1063, i64 786432
  %1570 = getelementptr i8, ptr %1064, i64 14168
  %1571 = getelementptr i8, ptr %1064, i64 786432
  %1572 = getelementptr i8, ptr %1065, i64 14168
  %1573 = getelementptr i8, ptr %1065, i64 786432
  %1574 = icmp ult ptr %1556, %1559
  %1575 = icmp ult ptr %1558, %1557
  %1576 = and i1 %1574, %1575
  %1577 = icmp ult ptr %1556, %1561
  %1578 = icmp ult ptr %1560, %1557
  %1579 = and i1 %1577, %1578
  %1580 = or i1 %1576, %1579
  %1581 = icmp ult ptr %1558, %1561
  %1582 = icmp ult ptr %1560, %1559
  %1583 = and i1 %1581, %1582
  %1584 = or i1 %1580, %1583
  %1585 = icmp ult ptr %1562, %1565
  %1586 = icmp ult ptr %1564, %1563
  %1587 = and i1 %1585, %1586
  %1588 = or i1 %1584, %1587
  %1589 = icmp ult ptr %1562, %1567
  %1590 = icmp ult ptr %1566, %1563
  %1591 = and i1 %1589, %1590
  %1592 = or i1 %1588, %1591
  %1593 = icmp ult ptr %1564, %1567
  %1594 = icmp ult ptr %1566, %1565
  %1595 = and i1 %1593, %1594
  %1596 = or i1 %1592, %1595
  %1597 = icmp ult ptr %1568, %1571
  %1598 = icmp ult ptr %1570, %1569
  %1599 = and i1 %1597, %1598
  %1600 = or i1 %1596, %1599
  %1601 = icmp ult ptr %1568, %1573
  %1602 = icmp ult ptr %1572, %1569
  %1603 = and i1 %1601, %1602
  %1604 = or i1 %1600, %1603
  %1605 = icmp ult ptr %1570, %1573
  %1606 = icmp ult ptr %1572, %1571
  %1607 = and i1 %1605, %1606
  %1608 = or i1 %1604, %1607
  br i1 %1608, label %1649, label %1609

1609:                                             ; preds = %1555, %1609
  %1610 = phi i64 [ %1646, %1609 ], [ 0, %1555 ]
  %1611 = phi <4 x i64> [ %1647, %1609 ], [ <i64 1180, i64 1181, i64 1182, i64 1183>, %1555 ]
  %1612 = add i64 %1610, 1180
  %1613 = sitofp <4 x i64> %1611 to <4 x double>
  %1614 = fmul fast <4 x double> %1613, <double 1.099000e+00, double 1.099000e+00, double 1.099000e+00, double 1.099000e+00>
  %1615 = fadd fast <4 x double> %1614, <double -9.900000e-02, double -9.900000e-02, double -9.900000e-02, double -9.900000e-02>
  %1616 = fmul fast <4 x double> %1615, <double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5, double 0x3FCC2CA06A2394A5>
  %1617 = fptrunc <4 x double> %1616 to <4 x float>
  %1618 = fmul fast <4 x double> %1615, <double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438, double 0x3FDBA7F3F0520438>
  %1619 = fptrunc <4 x double> %1618 to <4 x float>
  %1620 = fmul fast <4 x double> %1615, <double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655, double 0x3FB57BEDE87B0655>
  %1621 = fptrunc <4 x double> %1620 to <4 x float>
  %1622 = fmul fast <4 x double> %1615, <double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787, double 0xBFC14186C7FC0787>
  %1623 = fptrunc <4 x double> %1622 to <4 x float>
  %1624 = fmul fast <4 x double> %1615, <double 0xBFD0F0448417801C, double 0xBFD0F0448417801C, double 0xBFD0F0448417801C, double 0xBFD0F0448417801C>
  %1625 = fptrunc <4 x double> %1624 to <4 x float>
  %1626 = fmul fast <4 x double> %1615, <double 0x3FD99107E81583DF, double 0x3FD99107E81583DF, double 0x3FD99107E81583DF, double 0x3FD99107E81583DF>
  %1627 = fptrunc <4 x double> %1626 to <4 x float>
  %1628 = fmul fast <4 x double> %1615, <double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9, double 0x3FD8A1580CEE14A9>
  %1629 = fptrunc <4 x double> %1628 to <4 x float>
  %1630 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1612
  %1631 = shufflevector <4 x float> %1617, <4 x float> %1623, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1632 = shufflevector <4 x float> %1629, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1633 = shufflevector <8 x float> %1631, <8 x float> %1632, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1633, ptr %1630, align 4, !tbaa !35
  %1634 = fmul fast <4 x double> %1615, <double 0xBFD49FF042562736, double 0xBFD49FF042562736, double 0xBFD49FF042562736, double 0xBFD49FF042562736>
  %1635 = fptrunc <4 x double> %1634 to <4 x float>
  %1636 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1612
  %1637 = shufflevector <4 x float> %1619, <4 x float> %1625, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1638 = shufflevector <4 x float> %1635, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1639 = shufflevector <8 x float> %1637, <8 x float> %1638, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1639, ptr %1636, align 4, !tbaa !35
  %1640 = fmul fast <4 x double> %1615, <double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB, double 0xBFB0059F2A5FB5CB>
  %1641 = fptrunc <4 x double> %1640 to <4 x float>
  %1642 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1612
  %1643 = shufflevector <4 x float> %1621, <4 x float> %1627, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1644 = shufflevector <4 x float> %1641, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1645 = shufflevector <8 x float> %1643, <8 x float> %1644, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1645, ptr %1642, align 4, !tbaa !35
  %1646 = add nuw i64 %1610, 4
  %1647 = add <4 x i64> %1611, <i64 4, i64 4, i64 4, i64 4>
  %1648 = icmp eq i64 %1646, 64356
  br i1 %1648, label %1690, label %1609, !llvm.loop !72

1649:                                             ; preds = %1555, %1649
  %1650 = phi i64 [ %1674, %1649 ], [ 1180, %1555 ]
  %1651 = sitofp i64 %1650 to double
  %1652 = fmul fast double %1651, 1.099000e+00
  %1653 = fadd fast double %1652, -9.900000e-02
  %1654 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1650
  %1655 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1650
  %1656 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1650
  %1657 = insertelement <2 x double> poison, double %1653, i64 0
  %1658 = shufflevector <2 x double> %1657, <2 x double> poison, <2 x i32> zeroinitializer
  %1659 = fmul fast <2 x double> %1658, <double 0x3FCC2CA06A2394A5, double 0xBFC14186C7FC0787>
  %1660 = fptrunc <2 x double> %1659 to <2 x float>
  store <2 x float> %1660, ptr %1654, align 4, !tbaa !35
  %1661 = fmul fast <2 x double> %1658, <double 0x3FDBA7F3F0520438, double 0xBFD0F0448417801C>
  %1662 = fptrunc <2 x double> %1661 to <2 x float>
  store <2 x float> %1662, ptr %1655, align 4, !tbaa !35
  %1663 = fmul fast <2 x double> %1658, <double 0x3FB57BEDE87B0655, double 0x3FD99107E81583DF>
  %1664 = fptrunc <2 x double> %1663 to <2 x float>
  store <2 x float> %1664, ptr %1656, align 4, !tbaa !35
  %1665 = fmul fast double %1653, 0x3FD8A1580CEE14A9
  %1666 = fptrunc double %1665 to float
  %1667 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1650, i32 2
  store float %1666, ptr %1667, align 4, !tbaa !62
  %1668 = fmul fast double %1653, 0xBFD49FF042562736
  %1669 = fptrunc double %1668 to float
  %1670 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1650, i32 2
  store float %1669, ptr %1670, align 4, !tbaa !62
  %1671 = fmul fast double %1653, 0xBFB0059F2A5FB5CB
  %1672 = fptrunc double %1671 to float
  %1673 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1650, i32 2
  store float %1672, ptr %1673, align 4, !tbaa !62
  %1674 = add nuw nsw i64 %1650, 1
  %1675 = icmp eq i64 %1674, 65536
  br i1 %1675, label %1690, label %1649, !llvm.loop !73

1676:                                             ; preds = %1074, %1676
  %1677 = phi i64 [ %1688, %1676 ], [ 0, %1074 ]
  %1678 = sitofp i64 %1677 to double
  %1679 = fptrunc double %1678 to float
  %1680 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1677
  store float %1679, ptr %1680, align 4, !tbaa !59
  %1681 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1677
  store float 0.000000e+00, ptr %1681, align 4, !tbaa !59
  %1682 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1677
  store float 0.000000e+00, ptr %1682, align 4, !tbaa !59
  %1683 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1677, i32 1
  %1684 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1677, i32 1
  %1685 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1677, i32 1
  store <2 x float> zeroinitializer, ptr %1683, align 4, !tbaa !35
  store float %1679, ptr %1684, align 4, !tbaa !61
  store float 0.000000e+00, ptr %1685, align 4, !tbaa !61
  %1686 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1677, i32 2
  store float 0.000000e+00, ptr %1686, align 4, !tbaa !62
  %1687 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1677, i32 2
  store float %1679, ptr %1687, align 4, !tbaa !62
  %1688 = add nuw nsw i64 %1677, 1
  %1689 = icmp eq i64 %1688, 65536
  br i1 %1689, label %1690, label %1676, !llvm.loop !74

1690:                                             ; preds = %1609, %1649, %1382, %1417, %1310, %1251, %1286, %1179, %1128, %1156, %1676
  %1691 = load i32, ptr %0, align 8, !tbaa !24
  %1692 = icmp eq i32 %1691, 2
  br i1 %1692, label %1693, label %1705

1693:                                             ; preds = %1690
  %1694 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 10
  %1695 = load i64, ptr %1694, align 8, !tbaa !75
  %1696 = icmp sgt i64 %1695, 0
  br i1 %1696, label %1697, label %1943

1697:                                             ; preds = %1693
  %1698 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 11
  %1699 = load ptr, ptr %1698, align 8, !tbaa !76
  %1700 = load double, ptr %4, align 8, !tbaa !77
  %1701 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  %1702 = load double, ptr %1701, align 8, !tbaa !78
  %1703 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 2
  %1704 = load double, ptr %1703, align 8, !tbaa !79
  br label %1849

1705:                                             ; preds = %1690
  %1706 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %16) #8
  %1707 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %1708 = load i64, ptr %1707, align 8, !tbaa !30
  %1709 = icmp sgt i64 %1708, 0
  br i1 %1709, label %1710, label %1846

1710:                                             ; preds = %1705
  %1711 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  %1712 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 1
  %1713 = getelementptr inbounds %struct._PrimaryInfo, ptr %4, i64 0, i32 2
  %1714 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 47
  %1715 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %1716 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 48
  br label %1717

1717:                                             ; preds = %1710, %1840
  %1718 = phi i32 [ 1, %1710 ], [ %1842, %1840 ]
  %1719 = phi i64 [ 0, %1710 ], [ %1841, %1840 ]
  %1720 = phi i64 [ 0, %1710 ], [ %1843, %1840 ]
  %1721 = icmp eq i32 %1718, 0
  br i1 %1721, label %1840, label %1722

1722:                                             ; preds = %1717
  %1723 = load i64, ptr %1711, align 8, !tbaa !31
  %1724 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %1706, i64 noundef 0, i64 noundef %1720, i64 noundef %1723, i64 noundef 1, ptr noundef nonnull %16) #9
  %1725 = icmp eq ptr %1724, null
  br i1 %1725, label %1840, label %1726

1726:                                             ; preds = %1722
  %1727 = load i64, ptr %1711, align 8, !tbaa !31
  %1728 = icmp sgt i64 %1727, 0
  br i1 %1728, label %1729, label %1825

1729:                                             ; preds = %1726
  %1730 = load double, ptr %4, align 8, !tbaa !77
  %1731 = fptrunc double %1730 to float
  %1732 = load double, ptr %1712, align 8, !tbaa !78
  %1733 = fptrunc double %1732 to float
  %1734 = load double, ptr %1713, align 8, !tbaa !79
  %1735 = fptrunc double %1734 to float
  br label %1736

1736:                                             ; preds = %1729, %1820
  %1737 = phi ptr [ %1724, %1729 ], [ %1822, %1820 ]
  %1738 = phi i64 [ 0, %1729 ], [ %1823, %1820 ]
  %1739 = getelementptr inbounds %struct._PixelPacket, ptr %1737, i64 0, i32 2
  %1740 = load i16, ptr %1739, align 2, !tbaa !40
  switch i16 %1740, label %1741 [
    i16 0, label %1746
    i16 -1, label %1745
  ]

1741:                                             ; preds = %1736
  %1742 = uitofp i16 %1740 to float
  %1743 = fadd fast float %1742, 5.000000e-01
  %1744 = fptoui float %1743 to i16
  br label %1746

1745:                                             ; preds = %1736
  br label %1746

1746:                                             ; preds = %1736, %1745, %1741
  %1747 = phi i16 [ %1744, %1741 ], [ %1740, %1736 ], [ -1, %1745 ]
  %1748 = zext i16 %1747 to i64
  %1749 = getelementptr inbounds %struct._PixelPacket, ptr %1737, i64 0, i32 1
  %1750 = load i16, ptr %1749, align 2, !tbaa !41
  switch i16 %1750, label %1751 [
    i16 0, label %1756
    i16 -1, label %1755
  ]

1751:                                             ; preds = %1746
  %1752 = uitofp i16 %1750 to float
  %1753 = fadd fast float %1752, 5.000000e-01
  %1754 = fptoui float %1753 to i16
  br label %1756

1755:                                             ; preds = %1746
  br label %1756

1756:                                             ; preds = %1746, %1755, %1751
  %1757 = phi i16 [ %1754, %1751 ], [ %1750, %1746 ], [ -1, %1755 ]
  %1758 = zext i16 %1757 to i64
  %1759 = load i16, ptr %1737, align 2, !tbaa !38
  switch i16 %1759, label %1760 [
    i16 0, label %1765
    i16 -1, label %1764
  ]

1760:                                             ; preds = %1756
  %1761 = uitofp i16 %1759 to float
  %1762 = fadd fast float %1761, 5.000000e-01
  %1763 = fptoui float %1762 to i16
  br label %1765

1764:                                             ; preds = %1756
  br label %1765

1765:                                             ; preds = %1756, %1764, %1760
  %1766 = phi i16 [ %1763, %1760 ], [ %1759, %1756 ], [ -1, %1764 ]
  %1767 = zext i16 %1766 to i64
  %1768 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1748
  %1769 = load float, ptr %1768, align 4, !tbaa !59
  %1770 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1758
  %1771 = load float, ptr %1770, align 4, !tbaa !59
  %1772 = fadd fast float %1771, %1769
  %1773 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1767
  %1774 = load float, ptr %1773, align 4, !tbaa !59
  %1775 = fadd fast float %1772, %1774
  %1776 = fadd fast float %1775, %1731
  %1777 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1748, i32 1
  %1778 = load float, ptr %1777, align 4, !tbaa !61
  %1779 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1758, i32 1
  %1780 = load float, ptr %1779, align 4, !tbaa !61
  %1781 = fadd fast float %1780, %1778
  %1782 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1767, i32 1
  %1783 = load float, ptr %1782, align 4, !tbaa !61
  %1784 = fadd fast float %1781, %1783
  %1785 = fadd fast float %1784, %1733
  %1786 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1748, i32 2
  %1787 = load float, ptr %1786, align 4, !tbaa !62
  %1788 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1758, i32 2
  %1789 = load float, ptr %1788, align 4, !tbaa !62
  %1790 = fadd fast float %1789, %1787
  %1791 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1767, i32 2
  %1792 = load float, ptr %1791, align 4, !tbaa !62
  %1793 = fadd fast float %1790, %1792
  %1794 = fadd fast float %1793, %1735
  %1795 = fpext float %1776 to double
  %1796 = fcmp fast ugt float %1776, 0.000000e+00
  br i1 %1796, label %1797, label %1802

1797:                                             ; preds = %1765
  %1798 = fcmp fast ult float %1776, 6.553500e+04
  br i1 %1798, label %1799, label %1802

1799:                                             ; preds = %1797
  %1800 = fadd fast double %1795, 5.000000e-01
  %1801 = fptoui double %1800 to i16
  br label %1802

1802:                                             ; preds = %1765, %1797, %1799
  %1803 = phi i16 [ %1801, %1799 ], [ 0, %1765 ], [ -1, %1797 ]
  store i16 %1803, ptr %1739, align 2, !tbaa !40
  %1804 = fpext float %1785 to double
  %1805 = fcmp fast ugt float %1785, 0.000000e+00
  br i1 %1805, label %1806, label %1811

1806:                                             ; preds = %1802
  %1807 = fcmp fast ult float %1785, 6.553500e+04
  br i1 %1807, label %1808, label %1811

1808:                                             ; preds = %1806
  %1809 = fadd fast double %1804, 5.000000e-01
  %1810 = fptoui double %1809 to i16
  br label %1811

1811:                                             ; preds = %1802, %1806, %1808
  %1812 = phi i16 [ %1810, %1808 ], [ 0, %1802 ], [ -1, %1806 ]
  store i16 %1812, ptr %1749, align 2, !tbaa !41
  %1813 = fpext float %1794 to double
  %1814 = fcmp fast ugt float %1794, 0.000000e+00
  br i1 %1814, label %1815, label %1820

1815:                                             ; preds = %1811
  %1816 = fcmp fast ult float %1794, 6.553500e+04
  br i1 %1816, label %1817, label %1820

1817:                                             ; preds = %1815
  %1818 = fadd fast double %1813, 5.000000e-01
  %1819 = fptoui double %1818 to i16
  br label %1820

1820:                                             ; preds = %1811, %1815, %1817
  %1821 = phi i16 [ %1819, %1817 ], [ 0, %1811 ], [ -1, %1815 ]
  store i16 %1821, ptr %1737, align 2, !tbaa !38
  %1822 = getelementptr inbounds %struct._PixelPacket, ptr %1737, i64 1
  %1823 = add nuw nsw i64 %1738, 1
  %1824 = icmp eq i64 %1823, %1727
  br i1 %1824, label %1825, label %1736, !llvm.loop !80

1825:                                             ; preds = %1820, %1726
  %1826 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %1706, ptr noundef nonnull %16) #9
  %1827 = icmp ne i32 %1826, 0
  %1828 = zext i1 %1827 to i32
  %1829 = load ptr, ptr %1714, align 8, !tbaa !81
  %1830 = icmp eq ptr %1829, null
  br i1 %1830, label %1840, label %1831

1831:                                             ; preds = %1825
  %1832 = add nsw i64 %1719, 1
  %1833 = load i64, ptr %1707, align 8, !tbaa !30
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %3) #8
  %1834 = call i64 (ptr, i64, ptr, ...) @FormatLocaleString(ptr noundef nonnull %3, i64 noundef 4096, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.9, ptr noundef nonnull %1715) #8
  %1835 = load ptr, ptr %1714, align 8, !tbaa !81
  %1836 = load ptr, ptr %1716, align 8, !tbaa !82
  %1837 = call i32 %1835(ptr noundef nonnull %3, i64 noundef %1719, i64 noundef %1833, ptr noundef %1836) #8
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %3) #8
  %1838 = icmp eq i32 %1837, 0
  %1839 = select i1 %1838, i32 0, i32 %1828
  br label %1840

1840:                                             ; preds = %1825, %1831, %1722, %1717
  %1841 = phi i64 [ %1719, %1717 ], [ %1719, %1722 ], [ %1832, %1831 ], [ %1719, %1825 ]
  %1842 = phi i32 [ 0, %1717 ], [ 0, %1722 ], [ %1839, %1831 ], [ %1828, %1825 ]
  %1843 = add nuw nsw i64 %1720, 1
  %1844 = load i64, ptr %1707, align 8, !tbaa !30
  %1845 = icmp slt i64 %1843, %1844
  br i1 %1845, label %1717, label %1846, !llvm.loop !83

1846:                                             ; preds = %1840, %1705
  %1847 = phi i32 [ 1, %1705 ], [ %1842, %1840 ]
  %1848 = call ptr @DestroyCacheView(ptr noundef %1706) #8
  br label %1945

1849:                                             ; preds = %1697, %1939
  %1850 = phi i64 [ 0, %1697 ], [ %1941, %1939 ]
  %1851 = getelementptr inbounds %struct._PixelPacket, ptr %1699, i64 %1850, i32 2
  %1852 = load i16, ptr %1851, align 2, !tbaa !40
  switch i16 %1852, label %1853 [
    i16 0, label %1858
    i16 -1, label %1857
  ]

1853:                                             ; preds = %1849
  %1854 = uitofp i16 %1852 to float
  %1855 = fadd fast float %1854, 5.000000e-01
  %1856 = fptoui float %1855 to i16
  br label %1858

1857:                                             ; preds = %1849
  br label %1858

1858:                                             ; preds = %1849, %1857, %1853
  %1859 = phi i16 [ %1856, %1853 ], [ %1852, %1849 ], [ -1, %1857 ]
  %1860 = zext i16 %1859 to i64
  %1861 = getelementptr inbounds %struct._PixelPacket, ptr %1699, i64 %1850, i32 1
  %1862 = load i16, ptr %1861, align 2, !tbaa !41
  switch i16 %1862, label %1863 [
    i16 0, label %1868
    i16 -1, label %1867
  ]

1863:                                             ; preds = %1858
  %1864 = uitofp i16 %1862 to float
  %1865 = fadd fast float %1864, 5.000000e-01
  %1866 = fptoui float %1865 to i16
  br label %1868

1867:                                             ; preds = %1858
  br label %1868

1868:                                             ; preds = %1858, %1867, %1863
  %1869 = phi i16 [ %1866, %1863 ], [ %1862, %1858 ], [ -1, %1867 ]
  %1870 = zext i16 %1869 to i64
  %1871 = getelementptr inbounds %struct._PixelPacket, ptr %1699, i64 %1850
  %1872 = load i16, ptr %1871, align 2, !tbaa !38
  switch i16 %1872, label %1873 [
    i16 0, label %1878
    i16 -1, label %1877
  ]

1873:                                             ; preds = %1868
  %1874 = uitofp i16 %1872 to float
  %1875 = fadd fast float %1874, 5.000000e-01
  %1876 = fptoui float %1875 to i16
  br label %1878

1877:                                             ; preds = %1868
  br label %1878

1878:                                             ; preds = %1868, %1877, %1873
  %1879 = phi i16 [ %1876, %1873 ], [ %1872, %1868 ], [ -1, %1877 ]
  %1880 = zext i16 %1879 to i64
  %1881 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1860
  %1882 = load float, ptr %1881, align 4, !tbaa !59
  %1883 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1870
  %1884 = load float, ptr %1883, align 4, !tbaa !59
  %1885 = fadd fast float %1884, %1882
  %1886 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1880
  %1887 = load float, ptr %1886, align 4, !tbaa !59
  %1888 = fadd fast float %1885, %1887
  %1889 = fpext float %1888 to double
  %1890 = fadd fast double %1700, %1889
  %1891 = fptrunc double %1890 to float
  %1892 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1860, i32 1
  %1893 = load float, ptr %1892, align 4, !tbaa !61
  %1894 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1870, i32 1
  %1895 = load float, ptr %1894, align 4, !tbaa !61
  %1896 = fadd fast float %1895, %1893
  %1897 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1880, i32 1
  %1898 = load float, ptr %1897, align 4, !tbaa !61
  %1899 = fadd fast float %1896, %1898
  %1900 = fpext float %1899 to double
  %1901 = fadd fast double %1702, %1900
  %1902 = fptrunc double %1901 to float
  %1903 = getelementptr inbounds %struct._TransformPacket, ptr %1063, i64 %1860, i32 2
  %1904 = load float, ptr %1903, align 4, !tbaa !62
  %1905 = getelementptr inbounds %struct._TransformPacket, ptr %1064, i64 %1870, i32 2
  %1906 = load float, ptr %1905, align 4, !tbaa !62
  %1907 = fadd fast float %1906, %1904
  %1908 = getelementptr inbounds %struct._TransformPacket, ptr %1065, i64 %1880, i32 2
  %1909 = load float, ptr %1908, align 4, !tbaa !62
  %1910 = fadd fast float %1907, %1909
  %1911 = fpext float %1910 to double
  %1912 = fadd fast double %1704, %1911
  %1913 = fptrunc double %1912 to float
  %1914 = fpext float %1891 to double
  %1915 = fcmp fast ugt float %1891, 0.000000e+00
  br i1 %1915, label %1916, label %1921

1916:                                             ; preds = %1878
  %1917 = fcmp fast ult float %1891, 6.553500e+04
  br i1 %1917, label %1918, label %1921

1918:                                             ; preds = %1916
  %1919 = fadd fast double %1914, 5.000000e-01
  %1920 = fptoui double %1919 to i16
  br label %1921

1921:                                             ; preds = %1878, %1916, %1918
  %1922 = phi i16 [ %1920, %1918 ], [ 0, %1878 ], [ -1, %1916 ]
  store i16 %1922, ptr %1851, align 2, !tbaa !40
  %1923 = fpext float %1902 to double
  %1924 = fcmp fast ugt float %1902, 0.000000e+00
  br i1 %1924, label %1925, label %1930

1925:                                             ; preds = %1921
  %1926 = fcmp fast ult float %1902, 6.553500e+04
  br i1 %1926, label %1927, label %1930

1927:                                             ; preds = %1925
  %1928 = fadd fast double %1923, 5.000000e-01
  %1929 = fptoui double %1928 to i16
  br label %1930

1930:                                             ; preds = %1921, %1925, %1927
  %1931 = phi i16 [ %1929, %1927 ], [ 0, %1921 ], [ -1, %1925 ]
  store i16 %1931, ptr %1861, align 2, !tbaa !41
  %1932 = fpext float %1913 to double
  %1933 = fcmp fast ugt float %1913, 0.000000e+00
  br i1 %1933, label %1934, label %1939

1934:                                             ; preds = %1930
  %1935 = fcmp fast ult float %1913, 6.553500e+04
  br i1 %1935, label %1936, label %1939

1936:                                             ; preds = %1934
  %1937 = fadd fast double %1932, 5.000000e-01
  %1938 = fptoui double %1937 to i16
  br label %1939

1939:                                             ; preds = %1930, %1934, %1936
  %1940 = phi i16 [ %1938, %1936 ], [ 0, %1930 ], [ -1, %1934 ]
  store i16 %1940, ptr %1871, align 2, !tbaa !38
  %1941 = add nuw nsw i64 %1850, 1
  %1942 = icmp eq i64 %1941, %1695
  br i1 %1942, label %1943, label %1849, !llvm.loop !84

1943:                                             ; preds = %1939, %1693
  %1944 = call i32 @SyncImage(ptr noundef nonnull %0) #8
  br label %1945

1945:                                             ; preds = %1943, %1846
  %1946 = phi i32 [ 1, %1943 ], [ %1847, %1846 ]
  %1947 = call ptr @RelinquishMagickMemory(ptr noundef %1065) #8
  %1948 = call ptr @RelinquishMagickMemory(ptr noundef %1064) #8
  %1949 = call ptr @RelinquishMagickMemory(ptr noundef %1063) #8
  %1950 = call i32 @SetImageColorspace(ptr noundef nonnull %0, i32 noundef %1)
  %1951 = icmp eq i32 %1950, 0
  %1952 = select i1 %1951, i32 0, i32 %1946
  br label %1953

1953:                                             ; preds = %1056, %944, %773, %1035, %937, %752, %1945, %1071, %963, %960, %814, %297, %294, %286, %223, %220, %289, %215
  %1954 = phi i32 [ %272, %289 ], [ %216, %215 ], [ 0, %220 ], [ 0, %223 ], [ 0, %286 ], [ 0, %294 ], [ 0, %297 ], [ 0, %814 ], [ 0, %960 ], [ 0, %963 ], [ 0, %1071 ], [ %1952, %1945 ], [ %753, %752 ], [ %938, %937 ], [ %1036, %1035 ], [ %778, %773 ], [ %956, %944 ], [ %1061, %1056 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #8
  ret i32 %1954
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

declare i32 @LogMagickEvent(i32 noundef, ptr noundef, ptr noundef, i64 noundef, ptr noundef, ...) local_unnamed_addr #2

declare i32 @SyncImage(ptr noundef) local_unnamed_addr #2

declare i32 @SetImageStorageClass(ptr noundef, i32 noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @SetImageColorspace(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %4 = load i32, ptr %3, align 4, !tbaa !25
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  store i32 %1, ptr %3, align 4, !tbaa !25
  %7 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %7, align 8, !tbaa !26
  %8 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %8, align 8, !tbaa !27
  %9 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %10 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %9, i32 noundef 0, i64 noundef 96) #8
  %11 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %12 = load i32, ptr %11, align 8, !tbaa !28
  switch i32 %1, label %18 [
    i32 19, label %13
    i32 17, label %13
    i32 2, label %13
    i32 29, label %17
    i32 6, label %17
    i32 1, label %17
  ]

13:                                               ; preds = %6, %6, %6
  %14 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  %15 = load i32, ptr %14, align 8, !tbaa !48
  switch i32 %15, label %21 [
    i32 5, label %16
    i32 7, label %16
  ]

16:                                               ; preds = %13, %13
  store double 1.000000e+00, ptr %8, align 8, !tbaa !27
  br label %21

17:                                               ; preds = %6, %6, %6
  store double 1.000000e+00, ptr %8, align 8, !tbaa !27
  br label %21

18:                                               ; preds = %6
  store i32 2, ptr %7, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %9, align 8, !tbaa !29
  %19 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %19, align 8, !tbaa !29
  %20 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %20, align 8, !tbaa !29
  br label %21

21:                                               ; preds = %16, %13, %17, %18
  %22 = phi i32 [ %12, %17 ], [ %12, %18 ], [ 2, %13 ], [ 2, %16 ]
  %23 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  %24 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %23) #8
  store i32 %22, ptr %11, align 8, !tbaa !28
  br label %25

25:                                               ; preds = %2, %21
  %26 = phi i32 [ %24, %21 ], [ 1, %2 ]
  ret i32 %26
}

declare void @GetMagickPixelPacket(ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @AcquireAuthenticCacheView(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: hot
declare ptr @GetCacheViewAuthenticPixels(ptr noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @GetCacheViewAuthenticIndexQueue(ptr noundef) local_unnamed_addr #2

; Function Attrs: hot
declare i32 @SyncCacheViewAuthenticPixels(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

declare ptr @DestroyCacheView(ptr noundef) local_unnamed_addr #2

; Function Attrs: hot
declare nofpclass(nan inf) float @GetPixelIntensity(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @ConvertRGBToHCL(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHCLp(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSB(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSI(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSL(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHSV(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToHWB(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToLCHab(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertRGBToLCHuv(i16 noundef zeroext, i16 noundef zeroext, i16 noundef zeroext, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare ptr @GetImageProperty(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: allocsize(0,1)
declare ptr @AcquireQuantumMemory(i64 noundef, i64 noundef) local_unnamed_addr #4

declare i32 @ThrowMagickException(ptr noundef, ptr noundef, ptr noundef, i64 noundef, i32 noundef, ptr noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.pow.f64(double, double) #5

; Function Attrs: hot
declare nofpclass(nan inf) float @DecodePixelGamma(float noundef nofpclass(nan inf)) local_unnamed_addr #3

declare ptr @RelinquishMagickMemory(ptr noundef) local_unnamed_addr #2

declare ptr @ResetMagickMemory(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #2

declare hidden i32 @SyncImagePixelCache(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @TransformImageColorspace(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %4 = load i32, ptr %3, align 8, !tbaa !5
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %8 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 1191, ptr noundef nonnull @.str.2, ptr noundef nonnull %7) #8
  br label %9

9:                                                ; preds = %6, %2
  %10 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %11 = load i32, ptr %10, align 4, !tbaa !25
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9
  %14 = icmp eq i32 %11, 19
  %15 = icmp eq i32 %1, 13
  %16 = and i1 %15, %14
  br i1 %16, label %54, label %17

17:                                               ; preds = %13
  %18 = icmp eq i32 %11, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  %21 = load double, ptr %20, align 8, !tbaa !27
  %22 = fcmp fast une double %21, 1.000000e+00
  %23 = and i1 %15, %22
  br i1 %23, label %54, label %26

24:                                               ; preds = %17
  %25 = icmp eq i32 %1, 0
  br i1 %25, label %28, label %41

26:                                               ; preds = %19
  %27 = icmp eq i32 %1, 0
  br i1 %27, label %30, label %41

28:                                               ; preds = %24
  %29 = icmp eq i32 %11, 0
  br i1 %29, label %54, label %30

30:                                               ; preds = %26, %28
  store i32 0, ptr %10, align 4, !tbaa !25
  %31 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %31, align 8, !tbaa !26
  %32 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %32, align 8, !tbaa !27
  %33 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %34 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %33, i32 noundef 0, i64 noundef 96) #8
  %35 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %36 = load i32, ptr %35, align 8, !tbaa !28
  store i32 2, ptr %31, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %33, align 8, !tbaa !29
  %37 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %37, align 8, !tbaa !29
  %38 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %38, align 8, !tbaa !29
  %39 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  %40 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %39) #8
  store i32 %36, ptr %35, align 8, !tbaa !28
  br label %54

41:                                               ; preds = %26, %24
  %42 = tail call i32 @DeleteImageProfile(ptr noundef nonnull %0, ptr noundef nonnull @.str.10) #8
  %43 = tail call i32 @DeleteImageProfile(ptr noundef nonnull %0, ptr noundef nonnull @.str.11) #8
  switch i32 %1, label %47 [
    i32 13, label %44
    i32 3, label %44
  ]

44:                                               ; preds = %41, %41
  %45 = load i32, ptr %10, align 4, !tbaa !25
  %46 = tail call i32 @TransformRGBImage(ptr noundef nonnull %0, i32 noundef %45), !range !85
  br label %54

47:                                               ; preds = %41
  %48 = load i32, ptr %10, align 4, !tbaa !25
  switch i32 %48, label %49 [
    i32 13, label %52
    i32 3, label %52
  ]

49:                                               ; preds = %47
  %50 = tail call i32 @TransformRGBImage(ptr noundef nonnull %0, i32 noundef %48), !range !85
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %47, %47, %49
  %53 = tail call i32 @RGBTransformImage(ptr noundef nonnull %0, i32 noundef %1), !range !85
  br label %54

54:                                               ; preds = %30, %28, %49, %19, %13, %9, %52, %44
  %55 = phi i32 [ %46, %44 ], [ %53, %52 ], [ 1, %9 ], [ 1, %13 ], [ 1, %19 ], [ 0, %49 ], [ %40, %30 ], [ 1, %28 ]
  ret i32 %55
}

declare i32 @DeleteImageProfile(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @TransformRGBImage(ptr noundef %0, i32 noundef %1) local_unnamed_addr #0 {
  %3 = alloca [4096 x i8], align 16
  %4 = alloca %struct._MagickPixelPacket, align 8
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 59
  %9 = load i32, ptr %8, align 8, !tbaa !5
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %13 = tail call i32 (i32, ptr, ptr, i64, ptr, ...) @LogMagickEvent(i32 noundef 1, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 1640, ptr noundef nonnull @.str.2, ptr noundef nonnull %12) #8
  br label %14

14:                                               ; preds = %11, %2
  %15 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 58
  switch i32 %1, label %1315 [
    i32 12, label %16
    i32 2, label %167
    i32 17, label %167
    i32 19, label %167
    i32 22, label %263
    i32 24, label %263
    i32 32, label %263
    i32 14, label %263
    i32 30, label %263
    i32 15, label %263
    i32 31, label %263
    i32 16, label %263
    i32 5, label %263
    i32 25, label %263
    i32 27, label %263
    i32 28, label %263
    i32 26, label %263
    i32 23, label %263
    i32 6, label %263
    i32 7, label %263
    i32 33, label %263
    i32 9, label %263
    i32 10, label %263
    i32 11, label %263
    i32 21, label %937
    i32 1, label %1219
    i32 29, label %1219
  ]

16:                                               ; preds = %14
  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %4) #8
  %17 = load i32, ptr %0, align 8, !tbaa !24
  %18 = icmp eq i32 %17, 2
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %165, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %165, label %25

25:                                               ; preds = %22, %16
  call void @GetMagickPixelPacket(ptr noundef nonnull %0, ptr noundef nonnull %4) #8
  %26 = call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %27 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %28 = load i64, ptr %27, align 8, !tbaa !30
  %29 = icmp sgt i64 %28, 0
  br i1 %29, label %30, label %146

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  %32 = getelementptr inbounds i8, ptr %4, i64 48
  %33 = getelementptr i8, ptr %0, i64 4
  br label %34

34:                                               ; preds = %30, %141
  %35 = phi i32 [ 1, %30 ], [ %142, %141 ]
  %36 = phi i64 [ 0, %30 ], [ %143, %141 ]
  %37 = icmp eq i32 %35, 0
  br i1 %37, label %141, label %38

38:                                               ; preds = %34
  %39 = load i64, ptr %31, align 8, !tbaa !31
  %40 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %26, i64 noundef 0, i64 noundef %36, i64 noundef %39, i64 noundef 1, ptr noundef nonnull %15) #9
  %41 = icmp eq ptr %40, null
  br i1 %41, label %141, label %42

42:                                               ; preds = %38
  %43 = call ptr @GetCacheViewAuthenticIndexQueue(ptr noundef %26) #8
  %44 = load i64, ptr %31, align 8, !tbaa !31
  %45 = icmp sgt i64 %44, 0
  br i1 %45, label %46, label %137

46:                                               ; preds = %42
  %47 = load float, ptr %32, align 8, !tbaa.struct !86
  %48 = load i32, ptr %33, align 4, !tbaa !25
  %49 = icmp eq i32 %48, 12
  %50 = icmp ne ptr %43, null
  %51 = and i1 %50, %49
  %52 = icmp eq ptr %43, null
  br label %53

53:                                               ; preds = %46, %133
  %54 = phi i64 [ 0, %46 ], [ %135, %133 ]
  %55 = phi ptr [ %40, %46 ], [ %134, %133 ]
  %56 = phi float [ %47, %46 ], [ %70, %133 ]
  %57 = getelementptr inbounds i16, ptr %43, i64 %54
  %58 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 2
  %59 = load i16, ptr %58, align 2, !tbaa !40
  %60 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 1
  %61 = load i16, ptr %60, align 2, !tbaa !41
  %62 = load i16, ptr %55, align 2, !tbaa !38
  %63 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 0, i32 3
  %64 = load i16, ptr %63, align 2, !tbaa !39
  %65 = uitofp i16 %64 to float
  br i1 %51, label %66, label %69

66:                                               ; preds = %53
  %67 = load i16, ptr %57, align 2, !tbaa !37
  %68 = uitofp i16 %67 to float
  br label %69

69:                                               ; preds = %53, %66
  %70 = phi float [ %68, %66 ], [ %56, %53 ]
  %71 = uitofp i16 %59 to double
  %72 = fsub fast float 6.553500e+04, %70
  %73 = fpext float %72 to double
  %74 = fpext float %70 to double
  %75 = fmul fast double %71, 0x3EF0001000100010
  %76 = fmul fast double %75, %73
  %77 = fsub fast double 6.553500e+04, %74
  %78 = fsub fast double %77, %76
  %79 = fptrunc double %78 to float
  %80 = uitofp i16 %61 to double
  %81 = fmul fast double %73, 0xBEF0001000100010
  %82 = fmul fast double %81, %80
  %83 = fadd fast double %82, %77
  %84 = fptrunc double %83 to float
  %85 = uitofp i16 %62 to double
  %86 = fmul fast double %81, %85
  %87 = fadd fast double %86, %77
  %88 = fptrunc double %87 to float
  %89 = fcmp fast ugt float %79, 0.000000e+00
  br i1 %89, label %90, label %95

90:                                               ; preds = %69
  %91 = fcmp fast ult float %79, 6.553500e+04
  br i1 %91, label %92, label %95

92:                                               ; preds = %90
  %93 = fadd fast float %79, 5.000000e-01
  %94 = fptoui float %93 to i16
  br label %95

95:                                               ; preds = %92, %90, %69
  %96 = phi i16 [ %94, %92 ], [ 0, %69 ], [ -1, %90 ]
  store i16 %96, ptr %58, align 2, !tbaa !40
  %97 = fcmp fast ugt float %84, 0.000000e+00
  br i1 %97, label %98, label %103

98:                                               ; preds = %95
  %99 = fcmp fast ult float %84, 6.553500e+04
  br i1 %99, label %100, label %103

100:                                              ; preds = %98
  %101 = fadd fast float %84, 5.000000e-01
  %102 = fptoui float %101 to i16
  br label %103

103:                                              ; preds = %100, %98, %95
  %104 = phi i16 [ %102, %100 ], [ 0, %95 ], [ -1, %98 ]
  store i16 %104, ptr %60, align 2, !tbaa !41
  %105 = fcmp fast ugt float %88, 0.000000e+00
  br i1 %105, label %106, label %111

106:                                              ; preds = %103
  %107 = fcmp fast ult float %88, 6.553500e+04
  br i1 %107, label %108, label %111

108:                                              ; preds = %106
  %109 = fadd fast float %88, 5.000000e-01
  %110 = fptoui float %109 to i16
  br label %111

111:                                              ; preds = %108, %106, %103
  %112 = phi i16 [ %110, %108 ], [ 0, %103 ], [ -1, %106 ]
  store i16 %112, ptr %55, align 2, !tbaa !38
  switch i16 %64, label %113 [
    i16 0, label %117
    i16 -1, label %116
  ]

113:                                              ; preds = %111
  %114 = fadd fast float %65, 5.000000e-01
  %115 = fptoui float %114 to i16
  br label %117

116:                                              ; preds = %111
  br label %117

117:                                              ; preds = %111, %116, %113
  %118 = phi i16 [ %115, %113 ], [ %64, %111 ], [ -1, %116 ]
  store i16 %118, ptr %63, align 2, !tbaa !39
  br i1 %49, label %123, label %119

119:                                              ; preds = %117
  %120 = load i32, ptr %0, align 8, !tbaa !24
  %121 = icmp eq i32 %120, 2
  %122 = and i1 %50, %121
  br i1 %122, label %124, label %133

123:                                              ; preds = %117
  br i1 %52, label %133, label %124

124:                                              ; preds = %123, %119
  %125 = fcmp fast ugt float %70, 0.000000e+00
  br i1 %125, label %126, label %131

126:                                              ; preds = %124
  %127 = fcmp fast ult float %70, 6.553500e+04
  br i1 %127, label %128, label %131

128:                                              ; preds = %126
  %129 = fadd fast float %70, 5.000000e-01
  %130 = fptoui float %129 to i16
  br label %131

131:                                              ; preds = %128, %126, %124
  %132 = phi i16 [ %130, %128 ], [ 0, %124 ], [ -1, %126 ]
  store i16 %132, ptr %57, align 2, !tbaa !37
  br label %133

133:                                              ; preds = %119, %123, %131
  %134 = getelementptr inbounds %struct._PixelPacket, ptr %55, i64 1
  %135 = add nuw nsw i64 %54, 1
  %136 = icmp eq i64 %135, %44
  br i1 %136, label %137, label %53, !llvm.loop !87

137:                                              ; preds = %133, %42
  %138 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %26, ptr noundef nonnull %15) #9
  %139 = icmp ne i32 %138, 0
  %140 = zext i1 %139 to i32
  br label %141

141:                                              ; preds = %38, %34, %137
  %142 = phi i32 [ %140, %137 ], [ 0, %34 ], [ 0, %38 ]
  %143 = add nuw nsw i64 %36, 1
  %144 = load i64, ptr %27, align 8, !tbaa !30
  %145 = icmp slt i64 %143, %144
  br i1 %145, label %34, label %146, !llvm.loop !88

146:                                              ; preds = %141, %25
  %147 = phi i32 [ 1, %25 ], [ %142, %141 ]
  %148 = call ptr @DestroyCacheView(ptr noundef %26) #8
  %149 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %150 = load i32, ptr %149, align 4, !tbaa !25
  %151 = icmp eq i32 %150, 13
  br i1 %151, label %165, label %152

152:                                              ; preds = %146
  store i32 13, ptr %149, align 4, !tbaa !25
  %153 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %153, align 8, !tbaa !26
  %154 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %154, align 8, !tbaa !27
  %155 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %156 = call ptr @ResetMagickMemory(ptr noundef nonnull %155, i32 noundef 0, i64 noundef 96) #8
  %157 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %158 = load i32, ptr %157, align 8, !tbaa !28
  store i32 2, ptr %153, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %155, align 8, !tbaa !29
  %159 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %159, align 8, !tbaa !29
  %160 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %160, align 8, !tbaa !29
  %161 = call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  store i32 %158, ptr %157, align 8, !tbaa !28
  %162 = freeze i32 %161
  %163 = icmp eq i32 %162, 0
  %164 = select i1 %163, i32 0, i32 %147
  br label %165

165:                                              ; preds = %152, %146, %22, %19
  %166 = phi i32 [ 0, %19 ], [ 0, %22 ], [ %147, %146 ], [ %164, %152 ]
  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %4) #8
  br label %2137

167:                                              ; preds = %14, %14, %14
  %168 = load i32, ptr %0, align 8, !tbaa !24
  %169 = icmp eq i32 %168, 2
  br i1 %169, label %170, label %176

170:                                              ; preds = %167
  %171 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %2137, label %173

173:                                              ; preds = %170
  %174 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %2137, label %176

176:                                              ; preds = %173, %167
  %177 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %178 = load i32, ptr %177, align 4, !tbaa !25
  %179 = icmp eq i32 %178, 13
  br i1 %179, label %191, label %180

180:                                              ; preds = %176
  store i32 13, ptr %177, align 4, !tbaa !25
  %181 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %181, align 8, !tbaa !26
  %182 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %182, align 8, !tbaa !27
  %183 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %184 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %183, i32 noundef 0, i64 noundef 96) #8
  %185 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %186 = load i32, ptr %185, align 8, !tbaa !28
  store i32 2, ptr %181, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %183, align 8, !tbaa !29
  %187 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %187, align 8, !tbaa !29
  %188 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %188, align 8, !tbaa !29
  %189 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  store i32 %186, ptr %185, align 8, !tbaa !28
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %2137, label %191

191:                                              ; preds = %176, %180
  %192 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %193 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %194 = load i64, ptr %193, align 8, !tbaa !30
  %195 = icmp sgt i64 %194, 0
  br i1 %195, label %196, label %245

196:                                              ; preds = %191
  %197 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  %198 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 83
  br label %199

199:                                              ; preds = %196, %240
  %200 = phi i32 [ 1, %196 ], [ %241, %240 ]
  %201 = phi i64 [ 0, %196 ], [ %242, %240 ]
  %202 = icmp eq i32 %200, 0
  br i1 %202, label %240, label %203

203:                                              ; preds = %199
  %204 = load i64, ptr %197, align 8, !tbaa !31
  %205 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %192, i64 noundef 0, i64 noundef %201, i64 noundef %204, i64 noundef 1, ptr noundef nonnull %15) #9
  %206 = icmp eq ptr %205, null
  br i1 %206, label %240, label %207

207:                                              ; preds = %203
  %208 = load i64, ptr %197, align 8, !tbaa !31
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %236, label %210

210:                                              ; preds = %207, %231
  %211 = phi i64 [ %234, %231 ], [ %208, %207 ]
  %212 = phi ptr [ %233, %231 ], [ %205, %207 ]
  %213 = getelementptr inbounds %struct._PixelPacket, ptr %212, i64 0, i32 2
  %214 = load i16, ptr %213, align 2, !tbaa !40
  %215 = uitofp i16 %214 to float
  %216 = load i32, ptr %198, align 8, !tbaa !48
  switch i32 %216, label %219 [
    i32 5, label %217
    i32 7, label %217
  ]

217:                                              ; preds = %210, %210
  %218 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %215) #9
  br label %219

219:                                              ; preds = %210, %217
  %220 = phi float [ %218, %217 ], [ %215, %210 ]
  %221 = fcmp fast ugt float %220, 0.000000e+00
  br i1 %221, label %222, label %228

222:                                              ; preds = %219
  %223 = fcmp fast ult float %220, 6.553500e+04
  %224 = fadd fast float %220, 5.000000e-01
  %225 = fptoui float %224 to i16
  %226 = select i1 %223, i16 %225, i16 -1
  store i16 %226, ptr %213, align 2, !tbaa !40
  %227 = getelementptr inbounds %struct._PixelPacket, ptr %212, i64 0, i32 1
  store i16 %226, ptr %227, align 2, !tbaa !41
  br i1 %223, label %230, label %231

228:                                              ; preds = %219
  store i16 0, ptr %213, align 2, !tbaa !40
  %229 = getelementptr inbounds %struct._PixelPacket, ptr %212, i64 0, i32 1
  store i16 0, ptr %229, align 2, !tbaa !41
  br label %231

230:                                              ; preds = %222
  br label %231

231:                                              ; preds = %228, %222, %230
  %232 = phi i16 [ %225, %230 ], [ 0, %228 ], [ -1, %222 ]
  store i16 %232, ptr %212, align 2, !tbaa !38
  %233 = getelementptr inbounds %struct._PixelPacket, ptr %212, i64 1
  %234 = add nsw i64 %211, -1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %210, !llvm.loop !89

236:                                              ; preds = %231, %207
  %237 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %192, ptr noundef nonnull %15) #9
  %238 = icmp ne i32 %237, 0
  %239 = zext i1 %238 to i32
  br label %240

240:                                              ; preds = %203, %199, %236
  %241 = phi i32 [ %239, %236 ], [ 0, %199 ], [ 0, %203 ]
  %242 = add nuw nsw i64 %201, 1
  %243 = load i64, ptr %193, align 8, !tbaa !30
  %244 = icmp slt i64 %242, %243
  br i1 %244, label %199, label %245, !llvm.loop !90

245:                                              ; preds = %240, %191
  %246 = phi i32 [ 1, %191 ], [ %241, %240 ]
  %247 = tail call ptr @DestroyCacheView(ptr noundef %192) #8
  %248 = load i32, ptr %177, align 4, !tbaa !25
  %249 = icmp eq i32 %248, 13
  br i1 %249, label %2137, label %250

250:                                              ; preds = %245
  store i32 13, ptr %177, align 4, !tbaa !25
  %251 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %251, align 8, !tbaa !26
  %252 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %252, align 8, !tbaa !27
  %253 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %254 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %253, i32 noundef 0, i64 noundef 96) #8
  %255 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %256 = load i32, ptr %255, align 8, !tbaa !28
  store i32 2, ptr %251, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %253, align 8, !tbaa !29
  %257 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %257, align 8, !tbaa !29
  %258 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %258, align 8, !tbaa !29
  %259 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  store i32 %256, ptr %255, align 8, !tbaa !28
  %260 = freeze i32 %259
  %261 = icmp eq i32 %260, 0
  %262 = select i1 %261, i32 0, i32 %246
  br label %2137

263:                                              ; preds = %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14
  %264 = load i32, ptr %0, align 8, !tbaa !24
  %265 = icmp eq i32 %264, 2
  br i1 %265, label %266, label %272

266:                                              ; preds = %263
  %267 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %2137, label %269

269:                                              ; preds = %266
  %270 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %2137, label %272

272:                                              ; preds = %269, %263
  %273 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %274 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %275 = load i64, ptr %274, align 8, !tbaa !30
  %276 = icmp sgt i64 %275, 0
  br i1 %276, label %277, label %918

277:                                              ; preds = %272
  %278 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %279

279:                                              ; preds = %277, %913
  %280 = phi i32 [ 1, %277 ], [ %914, %913 ]
  %281 = phi i64 [ 0, %277 ], [ %915, %913 ]
  %282 = icmp eq i32 %280, 0
  br i1 %282, label %913, label %283

283:                                              ; preds = %279
  %284 = load i64, ptr %278, align 8, !tbaa !31
  %285 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %273, i64 noundef 0, i64 noundef %281, i64 noundef %284, i64 noundef 1, ptr noundef nonnull %15) #9
  %286 = icmp eq ptr %285, null
  br i1 %286, label %913, label %287

287:                                              ; preds = %283
  %288 = load i64, ptr %278, align 8, !tbaa !31
  %289 = icmp sgt i64 %288, 0
  br i1 %289, label %290, label %909

290:                                              ; preds = %287, %903
  %291 = phi i64 [ %906, %903 ], [ 0, %287 ]
  %292 = phi ptr [ %905, %903 ], [ %285, %287 ]
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %5) #8
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %6) #8
  call void @llvm.lifetime.start.p0(i64 2, ptr nonnull %7) #8
  %293 = getelementptr inbounds %struct._PixelPacket, ptr %292, i64 0, i32 2
  %294 = getelementptr inbounds %struct._PixelPacket, ptr %292, i64 0, i32 1
  %295 = load <2 x i16>, ptr %294, align 2, !tbaa !37
  %296 = uitofp <2 x i16> %295 to <2 x double>
  %297 = extractelement <2 x double> %296, i64 1
  %298 = fmul fast double %297, 0x3EF0001000100010
  %299 = load i16, ptr %292, align 2, !tbaa !38
  %300 = uitofp i16 %299 to double
  %301 = insertelement <2 x double> %296, double %300, i64 1
  %302 = fmul fast <2 x double> %301, <double 0x3EF0001000100010, double 0x3EF0001000100010>
  switch i32 %1, label %875 [
    i32 22, label %303
    i32 24, label %335
    i32 32, label %338
    i32 14, label %341
    i32 30, label %344
    i32 15, label %347
    i32 31, label %350
    i32 16, label %353
    i32 5, label %356
    i32 25, label %428
    i32 27, label %428
    i32 28, label %431
    i32 26, label %434
    i32 23, label %505
    i32 6, label %583
    i32 7, label %634
    i32 33, label %684
    i32 9, label %731
    i32 10, label %778
    i32 11, label %828
  ]

303:                                              ; preds = %290
  %304 = fsub fast double 6.553500e+04, %297
  %305 = fptrunc double %304 to float
  %306 = fcmp fast ugt float %305, 0.000000e+00
  br i1 %306, label %307, label %312

307:                                              ; preds = %303
  %308 = fcmp fast ult float %305, 6.553500e+04
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = fadd fast float %305, 5.000000e-01
  %311 = fptoui float %310 to i16
  br label %312

312:                                              ; preds = %309, %307, %303
  %313 = phi i16 [ %311, %309 ], [ 0, %303 ], [ -1, %307 ]
  store i16 %313, ptr %7, align 2, !tbaa !37
  %314 = extractelement <2 x double> %296, i64 0
  %315 = fsub fast double 6.553500e+04, %314
  %316 = fptrunc double %315 to float
  %317 = fcmp fast ugt float %316, 0.000000e+00
  br i1 %317, label %318, label %323

318:                                              ; preds = %312
  %319 = fcmp fast ult float %316, 6.553500e+04
  br i1 %319, label %320, label %323

320:                                              ; preds = %318
  %321 = fadd fast float %316, 5.000000e-01
  %322 = fptoui float %321 to i16
  br label %323

323:                                              ; preds = %320, %318, %312
  %324 = phi i16 [ %322, %320 ], [ 0, %312 ], [ -1, %318 ]
  store i16 %324, ptr %6, align 2, !tbaa !37
  %325 = fsub fast double 6.553500e+04, %300
  %326 = fptrunc double %325 to float
  %327 = fcmp fast ugt float %326, 0.000000e+00
  br i1 %327, label %328, label %333

328:                                              ; preds = %323
  %329 = fcmp fast ult float %326, 6.553500e+04
  br i1 %329, label %330, label %333

330:                                              ; preds = %328
  %331 = fadd fast float %326, 5.000000e-01
  %332 = fptoui float %331 to i16
  br label %333

333:                                              ; preds = %323, %328, %330
  %334 = phi i16 [ %332, %330 ], [ 0, %323 ], [ -1, %328 ]
  store i16 %334, ptr %5, align 2, !tbaa !37
  br label %878

335:                                              ; preds = %290
  %336 = extractelement <2 x double> %302, i64 0
  %337 = extractelement <2 x double> %302, i64 1
  call void @ConvertHCLToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %336, double noundef nofpclass(nan inf) %337, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

338:                                              ; preds = %290
  %339 = extractelement <2 x double> %302, i64 0
  %340 = extractelement <2 x double> %302, i64 1
  call void @ConvertHCLpToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %339, double noundef nofpclass(nan inf) %340, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

341:                                              ; preds = %290
  %342 = extractelement <2 x double> %302, i64 0
  %343 = extractelement <2 x double> %302, i64 1
  call void @ConvertHSBToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %342, double noundef nofpclass(nan inf) %343, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

344:                                              ; preds = %290
  %345 = extractelement <2 x double> %302, i64 0
  %346 = extractelement <2 x double> %302, i64 1
  call void @ConvertHSIToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %345, double noundef nofpclass(nan inf) %346, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

347:                                              ; preds = %290
  %348 = extractelement <2 x double> %302, i64 0
  %349 = extractelement <2 x double> %302, i64 1
  call void @ConvertHSLToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %348, double noundef nofpclass(nan inf) %349, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

350:                                              ; preds = %290
  %351 = extractelement <2 x double> %302, i64 0
  %352 = extractelement <2 x double> %302, i64 1
  call void @ConvertHSVToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %351, double noundef nofpclass(nan inf) %352, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

353:                                              ; preds = %290
  %354 = extractelement <2 x double> %302, i64 0
  %355 = extractelement <2 x double> %302, i64 1
  call void @ConvertHWBToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %354, double noundef nofpclass(nan inf) %355, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

356:                                              ; preds = %290
  %357 = fmul fast <2 x double> %296, <double 0x3EE051FBD71A8F6D, double 0x3EEB962D3DE69F01>
  %358 = fmul fast double %297, 0x3EBC5750E051135F
  %359 = shufflevector <2 x double> %357, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %360 = insertelement <2 x double> %359, double %300, i64 1
  %361 = fadd fast <2 x double> %360, <double 0x3FC1A7B9611A7B96, double poison>
  %362 = fmul fast <2 x double> %360, <double poison, double 0xBEF4667ACCE13348>
  %363 = shufflevector <2 x double> %361, <2 x double> %362, <2 x i32> <i32 0, i32 3>
  %364 = fadd fast <2 x double> %357, <double -2.550000e-01, double 0x3FE8D054BEAD054C>
  %365 = fadd fast <2 x double> %364, %363
  %366 = fmul fast <2 x double> %363, %363
  %367 = fmul fast <2 x double> %366, %363
  %368 = extractelement <2 x double> %367, i64 0
  %369 = fcmp fast ogt double %368, 0x3F822354D28F7CD6
  %370 = select i1 %369, double %368, double %358
  %371 = fmul fast <2 x double> %365, %365
  %372 = fmul fast <2 x double> %371, %365
  %373 = fcmp fast ogt <2 x double> %372, <double 0x3F822354D28F7CD6, double 0x3F822354D28F7CD6>
  %374 = fmul fast <2 x double> %365, <double 0x3FC07004DED20922, double 0x3FC07004DED20922>
  %375 = fadd fast <2 x double> %374, <double 0xBF922354D28F7CD6, double 0xBF922354D28F7CD6>
  %376 = select <2 x i1> %373, <2 x double> %372, <2 x double> %375
  %377 = fmul fast double %370, -1.537200e+00
  %378 = fmul fast <2 x double> %376, <double 0x4008A3F00E4040AA, double 0xBFE15F0CB7F7BD36>
  %379 = extractelement <2 x double> %378, i64 0
  %380 = fadd fast double %379, %377
  %381 = extractelement <2 x double> %378, i64 1
  %382 = fadd fast double %380, %381
  %383 = extractelement <2 x double> %376, i64 0
  %384 = fmul fast double %383, 0xBFED77FC9AC09726
  %385 = fmul fast double %370, 1.875800e+00
  %386 = fadd fast double %384, %385
  %387 = extractelement <2 x double> %376, i64 1
  %388 = fmul fast double %387, 0x3FA72243AA575F96
  %389 = fadd fast double %386, %388
  %390 = fmul fast double %383, 0x3FAB1B01066701A9
  %391 = fmul fast double %370, -2.040000e-01
  %392 = fadd fast double %390, %391
  %393 = fmul fast double %387, 0x3FF269BADE85286B
  %394 = fadd fast double %392, %393
  %395 = fmul fast double %382, 6.553500e+04
  %396 = fptrunc double %395 to float
  %397 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %396) #9
  %398 = fcmp fast ugt float %397, 0.000000e+00
  br i1 %398, label %399, label %404

399:                                              ; preds = %356
  %400 = fcmp fast ult float %397, 6.553500e+04
  br i1 %400, label %401, label %404

401:                                              ; preds = %399
  %402 = fadd fast float %397, 5.000000e-01
  %403 = fptoui float %402 to i16
  br label %404

404:                                              ; preds = %401, %399, %356
  %405 = phi i16 [ %403, %401 ], [ 0, %356 ], [ -1, %399 ]
  store i16 %405, ptr %7, align 2, !tbaa !37
  %406 = fmul fast double %389, 6.553500e+04
  %407 = fptrunc double %406 to float
  %408 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %407) #9
  %409 = fcmp fast ugt float %408, 0.000000e+00
  br i1 %409, label %410, label %415

410:                                              ; preds = %404
  %411 = fcmp fast ult float %408, 6.553500e+04
  br i1 %411, label %412, label %415

412:                                              ; preds = %410
  %413 = fadd fast float %408, 5.000000e-01
  %414 = fptoui float %413 to i16
  br label %415

415:                                              ; preds = %412, %410, %404
  %416 = phi i16 [ %414, %412 ], [ 0, %404 ], [ -1, %410 ]
  store i16 %416, ptr %6, align 2, !tbaa !37
  %417 = fmul fast double %394, 6.553500e+04
  %418 = fptrunc double %417 to float
  %419 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %418) #9
  %420 = fcmp fast ugt float %419, 0.000000e+00
  br i1 %420, label %421, label %426

421:                                              ; preds = %415
  %422 = fcmp fast ult float %419, 6.553500e+04
  br i1 %422, label %423, label %426

423:                                              ; preds = %421
  %424 = fadd fast float %419, 5.000000e-01
  %425 = fptoui float %424 to i16
  br label %426

426:                                              ; preds = %415, %421, %423
  %427 = phi i16 [ %425, %423 ], [ 0, %415 ], [ -1, %421 ]
  store i16 %427, ptr %5, align 2, !tbaa !37
  br label %878

428:                                              ; preds = %290, %290
  %429 = extractelement <2 x double> %302, i64 0
  %430 = extractelement <2 x double> %302, i64 1
  call void @ConvertLCHabToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %429, double noundef nofpclass(nan inf) %430, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

431:                                              ; preds = %290
  %432 = extractelement <2 x double> %302, i64 0
  %433 = extractelement <2 x double> %302, i64 1
  call void @ConvertLCHuvToRGB(double noundef nofpclass(nan inf) %298, double noundef nofpclass(nan inf) %432, double noundef nofpclass(nan inf) %433, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %5) #8
  br label %878

434:                                              ; preds = %290
  %435 = extractelement <2 x double> %296, i64 0
  %436 = fmul fast double %435, 0x3ED1D90F3602C793
  %437 = shufflevector <2 x double> %296, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %438 = insertelement <2 x double> %437, double %300, i64 1
  %439 = fmul fast <2 x double> %438, <double 0x3EF189CAAB7859F1, double 0x3EC7644910C2C01A>
  %440 = extractelement <2 x double> %439, i64 0
  %441 = fsub fast double %440, %436
  %442 = extractelement <2 x double> %439, i64 1
  %443 = fadd fast double %441, %442
  %444 = insertelement <2 x double> poison, double %300, i64 0
  %445 = shufflevector <2 x double> %444, <2 x double> poison, <2 x i32> zeroinitializer
  %446 = fmul fast <2 x double> %445, <double 0x3EB27512E22716A2, double 0x3EF03ED657FCAA0B>
  %447 = fmul fast double %443, 3.240600e+00
  %448 = fmul fast <2 x double> %296, <double 0x3EDE4E7C4F50EBE2, double 0xBE83B7B77D1421F7>
  %449 = fmul fast <2 x double> %296, <double 0x3E7756E8F281B278, double 0x3EDD147EF8654EB5>
  %450 = shufflevector <2 x double> %449, <2 x double> poison, <2 x i32> <i32 1, i32 0>
  %451 = fadd fast <2 x double> %448, %450
  %452 = fsub fast <2 x double> %448, %450
  %453 = shufflevector <2 x double> %451, <2 x double> %452, <2 x i32> <i32 0, i32 3>
  %454 = fadd fast <2 x double> %453, %446
  %455 = fmul fast <2 x double> %454, <double -1.537200e+00, double -4.986000e-01>
  %456 = extractelement <2 x double> %455, i64 0
  %457 = fadd fast double %456, %447
  %458 = extractelement <2 x double> %455, i64 1
  %459 = fadd fast double %457, %458
  %460 = fmul fast double %443, 0xBFEF013A92A30553
  %461 = extractelement <2 x double> %454, i64 0
  %462 = fmul fast double %461, 1.875800e+00
  %463 = fadd fast double %462, %460
  %464 = extractelement <2 x double> %454, i64 1
  %465 = fmul fast double %464, 4.150000e-02
  %466 = fadd fast double %463, %465
  %467 = fmul fast double %443, 5.570000e-02
  %468 = fmul fast double %461, -2.040000e-01
  %469 = fadd fast double %468, %467
  %470 = fmul fast double %464, 1.057000e+00
  %471 = fadd fast double %469, %470
  %472 = fmul fast double %459, 6.553500e+04
  %473 = fptrunc double %472 to float
  %474 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %473) #9
  %475 = fcmp fast ugt float %474, 0.000000e+00
  br i1 %475, label %476, label %481

476:                                              ; preds = %434
  %477 = fcmp fast ult float %474, 6.553500e+04
  br i1 %477, label %478, label %481

478:                                              ; preds = %476
  %479 = fadd fast float %474, 5.000000e-01
  %480 = fptoui float %479 to i16
  br label %481

481:                                              ; preds = %478, %476, %434
  %482 = phi i16 [ %480, %478 ], [ 0, %434 ], [ -1, %476 ]
  store i16 %482, ptr %7, align 2, !tbaa !37
  %483 = fmul fast double %466, 6.553500e+04
  %484 = fptrunc double %483 to float
  %485 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %484) #9
  %486 = fcmp fast ugt float %485, 0.000000e+00
  br i1 %486, label %487, label %492

487:                                              ; preds = %481
  %488 = fcmp fast ult float %485, 6.553500e+04
  br i1 %488, label %489, label %492

489:                                              ; preds = %487
  %490 = fadd fast float %485, 5.000000e-01
  %491 = fptoui float %490 to i16
  br label %492

492:                                              ; preds = %489, %487, %481
  %493 = phi i16 [ %491, %489 ], [ 0, %481 ], [ -1, %487 ]
  store i16 %493, ptr %6, align 2, !tbaa !37
  %494 = fmul fast double %471, 6.553500e+04
  %495 = fptrunc double %494 to float
  %496 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %495) #9
  %497 = fcmp fast ugt float %496, 0.000000e+00
  br i1 %497, label %498, label %503

498:                                              ; preds = %492
  %499 = fcmp fast ult float %496, 6.553500e+04
  br i1 %499, label %500, label %503

500:                                              ; preds = %498
  %501 = fadd fast float %496, 5.000000e-01
  %502 = fptoui float %501 to i16
  br label %503

503:                                              ; preds = %492, %498, %500
  %504 = phi i16 [ %502, %500 ], [ 0, %492 ], [ -1, %498 ]
  store i16 %504, ptr %5, align 2, !tbaa !37
  br label %878

505:                                              ; preds = %290
  %506 = fmul fast double %297, 0x3F59001900190019
  %507 = extractelement <2 x double> %296, i64 0
  %508 = fmul fast double %507, 0x3F76201620162016
  %509 = fmul fast double %300, 0x3F70601060106010
  %510 = fcmp fast ogt double %506, 8.000000e+00
  br i1 %510, label %511, label %515

511:                                              ; preds = %505
  %512 = fmul fast double %297, 0x3EEB962D3DE69F01
  %513 = fadd fast double %512, 0x3FC1A7B9611A7B96
  %514 = call fast double @llvm.powi.f64.i32(double %513, i32 3)
  br label %517

515:                                              ; preds = %505
  %516 = fmul fast double %297, 0x3EBC5750E051135F
  br label %517

517:                                              ; preds = %515, %511
  %518 = phi double [ %516, %515 ], [ %514, %511 ]
  %519 = fmul fast double %297, 0x3FAE781E781E781E
  %520 = fmul fast double %297, 0x3F8306D54D54168A
  %521 = fadd fast double %520, -1.400000e+02
  %522 = fadd fast double %521, %509
  %523 = fmul fast double %519, %518
  %524 = fmul fast double %297, 0x3F70131F52BA23AD
  %525 = fadd fast double %524, -1.340000e+02
  %526 = fadd fast double %525, %508
  %527 = fmul fast double %297, 0x3F9B15706AC5C01B
  %528 = fdiv fast double %527, %526
  %529 = fadd fast double %528, 0xBFD5555555555555
  %530 = fmul fast double %522, %528
  %531 = fdiv fast double %523, %530
  %532 = fmul fast double %531, %529
  %533 = fmul fast double %518, 5.000000e+00
  %534 = fsub fast double %532, %533
  %535 = fmul fast double %531, 3.240600e+00
  %536 = fmul fast double %518, -1.537200e+00
  %537 = fmul fast double %534, -4.986000e-01
  %538 = fadd fast double %535, %536
  %539 = fadd fast double %538, %537
  %540 = fmul fast double %531, 0xBFEF013A92A30553
  %541 = fmul fast double %518, 1.875800e+00
  %542 = fadd fast double %540, %541
  %543 = fmul fast double %534, 4.150000e-02
  %544 = fadd fast double %542, %543
  %545 = fmul fast double %531, 5.570000e-02
  %546 = fmul fast double %518, -2.040000e-01
  %547 = fadd fast double %545, %546
  %548 = fmul fast double %534, 1.057000e+00
  %549 = fadd fast double %547, %548
  %550 = fmul fast double %539, 6.553500e+04
  %551 = fptrunc double %550 to float
  %552 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %551) #9
  %553 = fcmp fast ugt float %552, 0.000000e+00
  br i1 %553, label %554, label %559

554:                                              ; preds = %517
  %555 = fcmp fast ult float %552, 6.553500e+04
  br i1 %555, label %556, label %559

556:                                              ; preds = %554
  %557 = fadd fast float %552, 5.000000e-01
  %558 = fptoui float %557 to i16
  br label %559

559:                                              ; preds = %556, %554, %517
  %560 = phi i16 [ %558, %556 ], [ 0, %517 ], [ -1, %554 ]
  store i16 %560, ptr %7, align 2, !tbaa !37
  %561 = fmul fast double %544, 6.553500e+04
  %562 = fptrunc double %561 to float
  %563 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %562) #9
  %564 = fcmp fast ugt float %563, 0.000000e+00
  br i1 %564, label %565, label %570

565:                                              ; preds = %559
  %566 = fcmp fast ult float %563, 6.553500e+04
  br i1 %566, label %567, label %570

567:                                              ; preds = %565
  %568 = fadd fast float %563, 5.000000e-01
  %569 = fptoui float %568 to i16
  br label %570

570:                                              ; preds = %567, %565, %559
  %571 = phi i16 [ %569, %567 ], [ 0, %559 ], [ -1, %565 ]
  store i16 %571, ptr %6, align 2, !tbaa !37
  %572 = fmul fast double %549, 6.553500e+04
  %573 = fptrunc double %572 to float
  %574 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %573) #9
  %575 = fcmp fast ugt float %574, 0.000000e+00
  br i1 %575, label %576, label %581

576:                                              ; preds = %570
  %577 = fcmp fast ult float %574, 6.553500e+04
  br i1 %577, label %578, label %581

578:                                              ; preds = %576
  %579 = fadd fast float %574, 5.000000e-01
  %580 = fptoui float %579 to i16
  br label %581

581:                                              ; preds = %570, %576, %578
  %582 = phi i16 [ %580, %578 ], [ 0, %570 ], [ -1, %576 ]
  store i16 %582, ptr %5, align 2, !tbaa !37
  br label %878

583:                                              ; preds = %290
  %584 = fmul fast <2 x double> %296, <double 0xBEF898779F6E33B4, double 0x3F09ECD99E34F574>
  %585 = fmul fast double %300, 0xBEDFE92FE2A229E7
  %586 = shufflevector <2 x double> %584, <2 x double> poison, <2 x i32> <i32 1, i32 poison>
  %587 = fadd fast <2 x double> %584, %586
  %588 = extractelement <2 x double> %587, i64 0
  %589 = fadd fast double %588, %585
  %590 = fmul fast double %297, 0xBEEF015993FC9950
  %591 = extractelement <2 x double> %296, i64 0
  %592 = fmul fast double %591, 0x3EFE0364DFC2434A
  %593 = fadd fast double %592, %590
  %594 = fmul fast double %300, 0x3EA53F922D239597
  %595 = fadd fast double %593, %594
  %596 = fmul fast double %297, 0x3EAC84D26198A0AD
  %597 = fmul fast double %591, 0xBECA1CC624F74BE0
  %598 = fadd fast double %597, %596
  %599 = fmul fast double %300, 0x3EF0E989BE87B23E
  %600 = fadd fast double %598, %599
  %601 = fmul fast double %589, 6.553500e+04
  %602 = fptrunc double %601 to float
  %603 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %602) #9
  %604 = fcmp fast ugt float %603, 0.000000e+00
  br i1 %604, label %605, label %610

605:                                              ; preds = %583
  %606 = fcmp fast ult float %603, 6.553500e+04
  br i1 %606, label %607, label %610

607:                                              ; preds = %605
  %608 = fadd fast float %603, 5.000000e-01
  %609 = fptoui float %608 to i16
  br label %610

610:                                              ; preds = %607, %605, %583
  %611 = phi i16 [ %609, %607 ], [ 0, %583 ], [ -1, %605 ]
  store i16 %611, ptr %7, align 2, !tbaa !37
  %612 = fmul fast double %595, 6.553500e+04
  %613 = fptrunc double %612 to float
  %614 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %613) #9
  %615 = fcmp fast ugt float %614, 0.000000e+00
  br i1 %615, label %616, label %621

616:                                              ; preds = %610
  %617 = fcmp fast ult float %614, 6.553500e+04
  br i1 %617, label %618, label %621

618:                                              ; preds = %616
  %619 = fadd fast float %614, 5.000000e-01
  %620 = fptoui float %619 to i16
  br label %621

621:                                              ; preds = %618, %616, %610
  %622 = phi i16 [ %620, %618 ], [ 0, %610 ], [ -1, %616 ]
  store i16 %622, ptr %6, align 2, !tbaa !37
  %623 = fmul fast double %600, 6.553500e+04
  %624 = fptrunc double %623 to float
  %625 = call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %624) #9
  %626 = fcmp fast ugt float %625, 0.000000e+00
  br i1 %626, label %627, label %632

627:                                              ; preds = %621
  %628 = fcmp fast ult float %625, 6.553500e+04
  br i1 %628, label %629, label %632

629:                                              ; preds = %627
  %630 = fadd fast float %625, 5.000000e-01
  %631 = fptoui float %630 to i16
  br label %632

632:                                              ; preds = %621, %627, %629
  %633 = phi i16 [ %631, %629 ], [ 0, %621 ], [ -1, %627 ]
  store i16 %633, ptr %5, align 2, !tbaa !37
  br label %878

634:                                              ; preds = %290
  %635 = fmul fast double %297, 0x3EF00010000FF10D
  %636 = fadd fast <2 x double> %302, <double -5.000000e-01, double -5.000000e-01>
  %637 = fmul fast <2 x double> %636, <double 0xBEB4731C556195D4, double 0x3FF66E971EE48997>
  %638 = extractelement <2 x double> %637, i64 0
  %639 = fadd fast double %638, %635
  %640 = extractelement <2 x double> %637, i64 1
  %641 = fadd fast double %639, %640
  %642 = fmul fast double %641, 6.553500e+04
  %643 = fptrunc double %642 to float
  %644 = fcmp fast ugt float %643, 0.000000e+00
  br i1 %644, label %645, label %650

645:                                              ; preds = %634
  %646 = fcmp fast ult float %643, 6.553500e+04
  br i1 %646, label %647, label %650

647:                                              ; preds = %645
  %648 = fadd fast float %643, 5.000000e-01
  %649 = fptoui float %648 to i16
  br label %650

650:                                              ; preds = %647, %645, %634
  %651 = phi i16 [ %649, %647 ], [ 0, %634 ], [ -1, %645 ]
  store i16 %651, ptr %7, align 2, !tbaa !37
  %652 = fmul fast double %297, 0x3EF0000FBF65922F
  %653 = fmul fast <2 x double> %636, <double 0xBFD60651A6C6C2D3, double 0xBFE6DA34C675944B>
  %654 = extractelement <2 x double> %653, i64 0
  %655 = fadd fast double %654, %652
  %656 = extractelement <2 x double> %653, i64 1
  %657 = fadd fast double %655, %656
  %658 = fmul fast double %657, 6.553500e+04
  %659 = fptrunc double %658 to float
  %660 = fcmp fast ugt float %659, 0.000000e+00
  br i1 %660, label %661, label %666

661:                                              ; preds = %650
  %662 = fcmp fast ult float %659, 6.553500e+04
  br i1 %662, label %663, label %666

663:                                              ; preds = %661
  %664 = fadd fast float %659, 5.000000e-01
  %665 = fptoui float %664 to i16
  br label %666

666:                                              ; preds = %663, %661, %650
  %667 = phi i16 [ %665, %663 ], [ 0, %650 ], [ -1, %661 ]
  store i16 %667, ptr %6, align 2, !tbaa !37
  %668 = fmul fast double %297, 0x3EF000114D08F16B
  %669 = fmul fast <2 x double> %636, <double 0x3FFC5A1CBDC4A56B, double 0x3EC1FF14448BA0A3>
  %670 = extractelement <2 x double> %669, i64 0
  %671 = fadd fast double %670, %668
  %672 = extractelement <2 x double> %669, i64 1
  %673 = fadd fast double %671, %672
  %674 = fmul fast double %673, 6.553500e+04
  %675 = fptrunc double %674 to float
  %676 = fcmp fast ugt float %675, 0.000000e+00
  br i1 %676, label %677, label %682

677:                                              ; preds = %666
  %678 = fcmp fast ult float %675, 6.553500e+04
  br i1 %678, label %679, label %682

679:                                              ; preds = %677
  %680 = fadd fast float %675, 5.000000e-01
  %681 = fptoui float %680 to i16
  br label %682

682:                                              ; preds = %666, %677, %679
  %683 = phi i16 [ %681, %679 ], [ 0, %666 ], [ -1, %677 ]
  store i16 %683, ptr %5, align 2, !tbaa !37
  br label %878

684:                                              ; preds = %290
  %685 = fadd fast <2 x double> %302, <double -5.000000e-01, double -5.000000e-01>
  %686 = fmul fast <2 x double> %685, <double 0x3F183265C4C3E002, double 0xBFE0D446B9A7DF8C>
  %687 = extractelement <2 x double> %686, i64 0
  %688 = fadd fast double %687, %298
  %689 = extractelement <2 x double> %686, i64 1
  %690 = fadd fast double %688, %689
  %691 = fmul fast double %690, 6.553500e+04
  %692 = fptrunc double %691 to float
  %693 = fcmp fast ugt float %692, 0.000000e+00
  br i1 %693, label %694, label %699

694:                                              ; preds = %684
  %695 = fcmp fast ult float %692, 6.553500e+04
  br i1 %695, label %696, label %699

696:                                              ; preds = %694
  %697 = fadd fast float %692, 5.000000e-01
  %698 = fptoui float %697 to i16
  br label %699

699:                                              ; preds = %696, %694, %684
  %700 = phi i16 [ %698, %696 ], [ 0, %684 ], [ -1, %694 ]
  store i16 %700, ptr %7, align 2, !tbaa !37
  %701 = fmul fast <2 x double> %685, <double 0xBFC0876D44C944CC, double 0x3FD1254339516890>
  %702 = extractelement <2 x double> %701, i64 0
  %703 = fadd fast double %702, %298
  %704 = extractelement <2 x double> %701, i64 1
  %705 = fadd fast double %703, %704
  %706 = fmul fast double %705, 6.553500e+04
  %707 = fptrunc double %706 to float
  %708 = fcmp fast ugt float %707, 0.000000e+00
  br i1 %708, label %709, label %714

709:                                              ; preds = %699
  %710 = fcmp fast ult float %707, 6.553500e+04
  br i1 %710, label %711, label %714

711:                                              ; preds = %709
  %712 = fadd fast float %707, 5.000000e-01
  %713 = fptoui float %712 to i16
  br label %714

714:                                              ; preds = %711, %709, %699
  %715 = phi i16 [ %713, %711 ], [ 0, %699 ], [ -1, %709 ]
  store i16 %715, ptr %6, align 2, !tbaa !37
  %716 = fmul fast <2 x double> %685, <double 0x3FE5450D051E42A1, double 0xBF14C3315641A00B>
  %717 = extractelement <2 x double> %716, i64 0
  %718 = fadd fast double %717, %298
  %719 = extractelement <2 x double> %716, i64 1
  %720 = fadd fast double %718, %719
  %721 = fmul fast double %720, 6.553500e+04
  %722 = fptrunc double %721 to float
  %723 = fcmp fast ugt float %722, 0.000000e+00
  br i1 %723, label %724, label %729

724:                                              ; preds = %714
  %725 = fcmp fast ult float %722, 6.553500e+04
  br i1 %725, label %726, label %729

726:                                              ; preds = %724
  %727 = fadd fast float %722, 5.000000e-01
  %728 = fptoui float %727 to i16
  br label %729

729:                                              ; preds = %714, %724, %726
  %730 = phi i16 [ %728, %726 ], [ 0, %714 ], [ -1, %724 ]
  store i16 %730, ptr %5, align 2, !tbaa !37
  br label %878

731:                                              ; preds = %290
  %732 = fadd fast <2 x double> %302, <double -5.000000e-01, double -5.000000e-01>
  %733 = fmul fast <2 x double> %732, <double 0x3FEE99F97B356C3F, double 0x3FE3DF6E98D78B83>
  %734 = extractelement <2 x double> %733, i64 0
  %735 = fadd fast double %734, %298
  %736 = extractelement <2 x double> %733, i64 1
  %737 = fadd fast double %735, %736
  %738 = fmul fast double %737, 6.553500e+04
  %739 = fptrunc double %738 to float
  %740 = fcmp fast ugt float %739, 0.000000e+00
  br i1 %740, label %741, label %746

741:                                              ; preds = %731
  %742 = fcmp fast ult float %739, 6.553500e+04
  br i1 %742, label %743, label %746

743:                                              ; preds = %741
  %744 = fadd fast float %739, 5.000000e-01
  %745 = fptoui float %744 to i16
  br label %746

746:                                              ; preds = %743, %741, %731
  %747 = phi i16 [ %745, %743 ], [ 0, %731 ], [ -1, %741 ]
  store i16 %747, ptr %7, align 2, !tbaa !37
  %748 = fmul fast <2 x double> %732, <double 0xBFD16A72CF45E123, double 0xBFE4B757836DCD63>
  %749 = extractelement <2 x double> %748, i64 0
  %750 = fadd fast double %749, %298
  %751 = extractelement <2 x double> %748, i64 1
  %752 = fadd fast double %750, %751
  %753 = fmul fast double %752, 6.553500e+04
  %754 = fptrunc double %753 to float
  %755 = fcmp fast ugt float %754, 0.000000e+00
  br i1 %755, label %756, label %761

756:                                              ; preds = %746
  %757 = fcmp fast ult float %754, 6.553500e+04
  br i1 %757, label %758, label %761

758:                                              ; preds = %756
  %759 = fadd fast float %754, 5.000000e-01
  %760 = fptoui float %759 to i16
  br label %761

761:                                              ; preds = %758, %756, %746
  %762 = phi i16 [ %760, %758 ], [ 0, %746 ], [ -1, %756 ]
  store i16 %762, ptr %6, align 2, !tbaa !37
  %763 = fmul fast <2 x double> %732, <double 0xBFF1B63A1D7EA179, double 0x3FFB461A6063F4C4>
  %764 = extractelement <2 x double> %763, i64 0
  %765 = fadd fast double %764, %298
  %766 = extractelement <2 x double> %763, i64 1
  %767 = fadd fast double %765, %766
  %768 = fmul fast double %767, 6.553500e+04
  %769 = fptrunc double %768 to float
  %770 = fcmp fast ugt float %769, 0.000000e+00
  br i1 %770, label %771, label %776

771:                                              ; preds = %761
  %772 = fcmp fast ult float %769, 6.553500e+04
  br i1 %772, label %773, label %776

773:                                              ; preds = %771
  %774 = fadd fast float %769, 5.000000e-01
  %775 = fptoui float %774 to i16
  br label %776

776:                                              ; preds = %761, %771, %773
  %777 = phi i16 [ %775, %773 ], [ 0, %761 ], [ -1, %771 ]
  store i16 %777, ptr %5, align 2, !tbaa !37
  br label %878

778:                                              ; preds = %290
  %779 = fmul fast double %297, 0x3EF00010000FF10D
  %780 = fadd fast <2 x double> %302, <double -5.000000e-01, double -5.000000e-01>
  %781 = fmul fast <2 x double> %780, <double 0xBEB4731C556195D4, double 0x3FF66E971EE48997>
  %782 = extractelement <2 x double> %781, i64 0
  %783 = fadd fast double %782, %779
  %784 = extractelement <2 x double> %781, i64 1
  %785 = fadd fast double %783, %784
  %786 = fmul fast double %785, 6.553500e+04
  %787 = fptrunc double %786 to float
  %788 = fcmp fast ugt float %787, 0.000000e+00
  br i1 %788, label %789, label %794

789:                                              ; preds = %778
  %790 = fcmp fast ult float %787, 6.553500e+04
  br i1 %790, label %791, label %794

791:                                              ; preds = %789
  %792 = fadd fast float %787, 5.000000e-01
  %793 = fptoui float %792 to i16
  br label %794

794:                                              ; preds = %791, %789, %778
  %795 = phi i16 [ %793, %791 ], [ 0, %778 ], [ -1, %789 ]
  store i16 %795, ptr %7, align 2, !tbaa !37
  %796 = fmul fast double %297, 0x3EF0000FBF65922F
  %797 = fmul fast <2 x double> %780, <double 0xBFD60651A6C6C2D3, double 0xBFE6DA34C675944B>
  %798 = extractelement <2 x double> %797, i64 0
  %799 = fadd fast double %798, %796
  %800 = extractelement <2 x double> %797, i64 1
  %801 = fadd fast double %799, %800
  %802 = fmul fast double %801, 6.553500e+04
  %803 = fptrunc double %802 to float
  %804 = fcmp fast ugt float %803, 0.000000e+00
  br i1 %804, label %805, label %810

805:                                              ; preds = %794
  %806 = fcmp fast ult float %803, 6.553500e+04
  br i1 %806, label %807, label %810

807:                                              ; preds = %805
  %808 = fadd fast float %803, 5.000000e-01
  %809 = fptoui float %808 to i16
  br label %810

810:                                              ; preds = %807, %805, %794
  %811 = phi i16 [ %809, %807 ], [ 0, %794 ], [ -1, %805 ]
  store i16 %811, ptr %6, align 2, !tbaa !37
  %812 = fmul fast double %297, 0x3EF000114D08F16B
  %813 = fmul fast <2 x double> %780, <double 0x3FFC5A1CBDC4A56B, double 0x3EC1FF14448BA0A3>
  %814 = extractelement <2 x double> %813, i64 0
  %815 = fadd fast double %814, %812
  %816 = extractelement <2 x double> %813, i64 1
  %817 = fadd fast double %815, %816
  %818 = fmul fast double %817, 6.553500e+04
  %819 = fptrunc double %818 to float
  %820 = fcmp fast ugt float %819, 0.000000e+00
  br i1 %820, label %821, label %826

821:                                              ; preds = %810
  %822 = fcmp fast ult float %819, 6.553500e+04
  br i1 %822, label %823, label %826

823:                                              ; preds = %821
  %824 = fadd fast float %819, 5.000000e-01
  %825 = fptoui float %824 to i16
  br label %826

826:                                              ; preds = %810, %821, %823
  %827 = phi i16 [ %825, %823 ], [ 0, %810 ], [ -1, %821 ]
  store i16 %827, ptr %5, align 2, !tbaa !37
  br label %878

828:                                              ; preds = %290
  %829 = fadd fast <2 x double> %302, <double -5.000000e-01, double -5.000000e-01>
  %830 = fmul fast <2 x double> %829, <double 0xBF04AFD6A052C652, double 0x3FF23CBC40211957>
  %831 = extractelement <2 x double> %830, i64 0
  %832 = fadd fast double %831, %298
  %833 = extractelement <2 x double> %830, i64 1
  %834 = fadd fast double %832, %833
  %835 = fmul fast double %834, 6.553500e+04
  %836 = fptrunc double %835 to float
  %837 = fcmp fast ugt float %836, 0.000000e+00
  br i1 %837, label %838, label %843

838:                                              ; preds = %828
  %839 = fcmp fast ult float %836, 6.553500e+04
  br i1 %839, label %840, label %843

840:                                              ; preds = %838
  %841 = fadd fast float %836, 5.000000e-01
  %842 = fptoui float %841 to i16
  br label %843

843:                                              ; preds = %840, %838, %828
  %844 = phi i16 [ %842, %840 ], [ 0, %828 ], [ -1, %838 ]
  store i16 %844, ptr %7, align 2, !tbaa !37
  %845 = fmul fast <2 x double> %829, <double 0xBFD9414AFD6A052C, double 0xBFE2937565E20109>
  %846 = extractelement <2 x double> %845, i64 0
  %847 = fadd fast double %846, %298
  %848 = extractelement <2 x double> %845, i64 1
  %849 = fadd fast double %847, %848
  %850 = fmul fast double %849, 6.553500e+04
  %851 = fptrunc double %850 to float
  %852 = fcmp fast ugt float %851, 0.000000e+00
  br i1 %852, label %853, label %858

853:                                              ; preds = %843
  %854 = fcmp fast ult float %851, 6.553500e+04
  br i1 %854, label %855, label %858

855:                                              ; preds = %853
  %856 = fadd fast float %851, 5.000000e-01
  %857 = fptoui float %856 to i16
  br label %858

858:                                              ; preds = %855, %853, %843
  %859 = phi i16 [ %857, %855 ], [ 0, %843 ], [ -1, %853 ]
  store i16 %859, ptr %6, align 2, !tbaa !37
  %860 = fmul fast <2 x double> %829, <double 0x400041890CEDE624, double 0xBF3F8C274E17C966>
  %861 = extractelement <2 x double> %860, i64 0
  %862 = fadd fast double %861, %298
  %863 = extractelement <2 x double> %860, i64 1
  %864 = fadd fast double %862, %863
  %865 = fmul fast double %864, 6.553500e+04
  %866 = fptrunc double %865 to float
  %867 = fcmp fast ugt float %866, 0.000000e+00
  br i1 %867, label %868, label %873

868:                                              ; preds = %858
  %869 = fcmp fast ult float %866, 6.553500e+04
  br i1 %869, label %870, label %873

870:                                              ; preds = %868
  %871 = fadd fast float %866, 5.000000e-01
  %872 = fptoui float %871 to i16
  br label %873

873:                                              ; preds = %858, %868, %870
  %874 = phi i16 [ %872, %870 ], [ 0, %858 ], [ -1, %868 ]
  store i16 %874, ptr %5, align 2, !tbaa !37
  br label %878

875:                                              ; preds = %290
  %876 = extractelement <2 x i16> %295, i64 0
  store i16 %876, ptr %6, align 2, !tbaa !37
  store i16 %299, ptr %5, align 2, !tbaa !37
  %877 = extractelement <2 x i16> %295, i64 1
  br label %880

878:                                              ; preds = %333, %335, %338, %341, %344, %347, %350, %353, %426, %428, %431, %503, %581, %632, %682, %729, %776, %826, %873
  %879 = load i16, ptr %7, align 2, !tbaa !37
  br label %880

880:                                              ; preds = %878, %875
  %881 = phi i16 [ %879, %878 ], [ %877, %875 ]
  switch i16 %881, label %882 [
    i16 0, label %887
    i16 -1, label %886
  ]

882:                                              ; preds = %880
  %883 = uitofp i16 %881 to float
  %884 = fadd fast float %883, 5.000000e-01
  %885 = fptoui float %884 to i16
  br label %887

886:                                              ; preds = %880
  br label %887

887:                                              ; preds = %880, %886, %882
  %888 = phi i16 [ %885, %882 ], [ %881, %880 ], [ -1, %886 ]
  store i16 %888, ptr %293, align 2, !tbaa !40
  %889 = load i16, ptr %6, align 2, !tbaa !37
  switch i16 %889, label %890 [
    i16 0, label %895
    i16 -1, label %894
  ]

890:                                              ; preds = %887
  %891 = uitofp i16 %889 to float
  %892 = fadd fast float %891, 5.000000e-01
  %893 = fptoui float %892 to i16
  br label %895

894:                                              ; preds = %887
  br label %895

895:                                              ; preds = %887, %894, %890
  %896 = phi i16 [ %893, %890 ], [ %889, %887 ], [ -1, %894 ]
  store i16 %896, ptr %294, align 2, !tbaa !41
  %897 = load i16, ptr %5, align 2, !tbaa !37
  switch i16 %897, label %898 [
    i16 0, label %903
    i16 -1, label %902
  ]

898:                                              ; preds = %895
  %899 = uitofp i16 %897 to float
  %900 = fadd fast float %899, 5.000000e-01
  %901 = fptoui float %900 to i16
  br label %903

902:                                              ; preds = %895
  br label %903

903:                                              ; preds = %895, %902, %898
  %904 = phi i16 [ %901, %898 ], [ %897, %895 ], [ -1, %902 ]
  store i16 %904, ptr %292, align 2, !tbaa !38
  %905 = getelementptr inbounds %struct._PixelPacket, ptr %292, i64 1
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %7) #8
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %6) #8
  call void @llvm.lifetime.end.p0(i64 2, ptr nonnull %5) #8
  %906 = add nuw nsw i64 %291, 1
  %907 = load i64, ptr %278, align 8, !tbaa !31
  %908 = icmp slt i64 %906, %907
  br i1 %908, label %290, label %909, !llvm.loop !91

909:                                              ; preds = %903, %287
  %910 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %273, ptr noundef nonnull %15) #9
  %911 = icmp ne i32 %910, 0
  %912 = zext i1 %911 to i32
  br label %913

913:                                              ; preds = %283, %279, %909
  %914 = phi i32 [ %912, %909 ], [ 0, %279 ], [ 0, %283 ]
  %915 = add nuw nsw i64 %281, 1
  %916 = load i64, ptr %274, align 8, !tbaa !30
  %917 = icmp slt i64 %915, %916
  br i1 %917, label %279, label %918, !llvm.loop !92

918:                                              ; preds = %913, %272
  %919 = phi i32 [ 1, %272 ], [ %914, %913 ]
  %920 = call ptr @DestroyCacheView(ptr noundef %273) #8
  %921 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %922 = load i32, ptr %921, align 4, !tbaa !25
  %923 = icmp eq i32 %922, 13
  br i1 %923, label %2137, label %924

924:                                              ; preds = %918
  store i32 13, ptr %921, align 4, !tbaa !25
  %925 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %925, align 8, !tbaa !26
  %926 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %926, align 8, !tbaa !27
  %927 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %928 = call ptr @ResetMagickMemory(ptr noundef nonnull %927, i32 noundef 0, i64 noundef 96) #8
  %929 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %930 = load i32, ptr %929, align 8, !tbaa !28
  store i32 2, ptr %925, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %927, align 8, !tbaa !29
  %931 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %931, align 8, !tbaa !29
  %932 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %932, align 8, !tbaa !29
  %933 = call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  store i32 %930, ptr %929, align 8, !tbaa !28
  %934 = freeze i32 %933
  %935 = icmp eq i32 %934, 0
  %936 = select i1 %935, i32 0, i32 %919
  br label %2137

937:                                              ; preds = %14
  %938 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.3) #8
  %939 = icmp eq ptr %938, null
  br i1 %939, label %950, label %940

940:                                              ; preds = %937
  %941 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %938, ptr noundef null) #8
  %942 = fcmp fast olt double %941, 0.000000e+00
  %943 = select fast i1 %942, double -1.000000e+00, double 1.000000e+00
  %944 = fmul fast double %943, %941
  %945 = fcmp fast ult double %944, 1.000000e-15
  %946 = fdiv fast double 1.000000e+00, %941
  %947 = fmul fast double %943, 0x430C6BF52633FFFF
  %948 = select i1 %945, double %947, double %946
  %949 = fmul fast double %948, 0x3F87219994BD6EB8
  br label %950

950:                                              ; preds = %940, %937
  %951 = phi double [ %949, %940 ], [ 0x3F7B369690DEDC9C, %937 ]
  %952 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.4) #8
  %953 = icmp eq ptr %952, null
  br i1 %953, label %956, label %954

954:                                              ; preds = %950
  %955 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %952, ptr noundef null) #8
  br label %956

956:                                              ; preds = %954, %950
  %957 = phi double [ %955, %954 ], [ 6.000000e-01, %950 ]
  %958 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.5) #8
  %959 = icmp eq ptr %958, null
  br i1 %959, label %962, label %960

960:                                              ; preds = %956
  %961 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %958, ptr noundef null) #8
  br label %962

962:                                              ; preds = %960, %956
  %963 = phi double [ %961, %960 ], [ 9.500000e+01, %956 ]
  %964 = tail call ptr @GetImageProperty(ptr noundef nonnull %0, ptr noundef nonnull @.str.6) #8
  %965 = icmp eq ptr %964, null
  br i1 %965, label %968, label %966

966:                                              ; preds = %962
  %967 = tail call fast nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef nonnull %964, ptr noundef null) #8
  br label %968

968:                                              ; preds = %966, %962
  %969 = phi double [ %967, %966 ], [ 6.850000e+02, %962 ]
  %970 = tail call dereferenceable_or_null(131072) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 2) #10
  %971 = icmp eq ptr %970, null
  br i1 %971, label %972, label %975

972:                                              ; preds = %968
  %973 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %974 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %15, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 2006, i32 noundef 400, ptr noundef nonnull @.str.7, ptr noundef nonnull @.str.8, ptr noundef nonnull %973) #8
  br label %2137

975:                                              ; preds = %968
  %976 = fsub fast double %963, %969
  %977 = fmul fast double %951, %976
  %978 = fdiv fast double %977, %957
  %979 = tail call fast double @llvm.exp2.f64(double %978)
  %980 = fmul fast double %963, 0x404FFFE000000000
  %981 = fptosi double %980 to i64
  %982 = icmp slt i64 %981, 0
  br i1 %982, label %987, label %983

983:                                              ; preds = %975
  %984 = shl nuw i64 %981, 1
  %985 = add i64 %984, 2
  tail call void @llvm.memset.p0.i64(ptr nonnull align 2 %970, i8 0, i64 %985, i1 false), !tbaa !37
  %986 = add nuw i64 %981, 1
  br label %987

987:                                              ; preds = %983, %975
  %988 = phi i64 [ 0, %975 ], [ %986, %983 ]
  %989 = fmul fast double %969, 0x404FFFE000000000
  %990 = fptosi double %989 to i64
  %991 = icmp slt i64 %988, %990
  br i1 %991, label %992, label %1096

992:                                              ; preds = %987
  %993 = fsub fast double 1.000000e+00, %979
  %994 = sub i64 %990, %988
  %995 = icmp ult i64 %994, 8
  br i1 %995, label %1092, label %996

996:                                              ; preds = %992
  %997 = icmp ult i64 %994, 16
  br i1 %997, label %1046, label %998

998:                                              ; preds = %996
  %999 = and i64 %994, -16
  %1000 = insertelement <16 x i64> poison, i64 %988, i64 0
  %1001 = shufflevector <16 x i64> %1000, <16 x i64> poison, <16 x i32> zeroinitializer
  %1002 = add <16 x i64> %1001, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %1003 = insertelement <16 x double> poison, double %969, i64 0
  %1004 = shufflevector <16 x double> %1003, <16 x double> poison, <16 x i32> zeroinitializer
  %1005 = insertelement <16 x double> poison, double %951, i64 0
  %1006 = shufflevector <16 x double> %1005, <16 x double> poison, <16 x i32> zeroinitializer
  %1007 = insertelement <16 x double> poison, double %957, i64 0
  %1008 = shufflevector <16 x double> %1007, <16 x double> poison, <16 x i32> zeroinitializer
  %1009 = insertelement <16 x double> poison, double %979, i64 0
  %1010 = shufflevector <16 x double> %1009, <16 x double> poison, <16 x i32> zeroinitializer
  %1011 = insertelement <16 x double> poison, double %993, i64 0
  %1012 = shufflevector <16 x double> %1011, <16 x double> poison, <16 x i32> zeroinitializer
  %1013 = add i64 %988, %999
  %1014 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %1008
  %1015 = fdiv fast <16 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %1012
  br label %1016

1016:                                             ; preds = %1016, %998
  %1017 = phi i64 [ 0, %998 ], [ %1037, %1016 ]
  %1018 = phi <16 x i64> [ %1002, %998 ], [ %1038, %1016 ]
  %1019 = add i64 %988, %1017
  %1020 = sitofp <16 x i64> %1018 to <16 x double>
  %1021 = fmul fast <16 x double> %1020, <double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010>
  %1022 = fsub fast <16 x double> %1021, %1004
  %1023 = fmul fast <16 x double> %1006, %1022
  %1024 = fmul fast <16 x double> %1023, %1014
  %1025 = tail call fast <16 x double> @llvm.exp2.v16f64(<16 x double> %1024)
  %1026 = fsub fast <16 x double> %1025, %1010
  %1027 = fmul fast <16 x double> %1026, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %1028 = fmul fast <16 x double> %1027, %1015
  %1029 = fptrunc <16 x double> %1028 to <16 x float>
  %1030 = fcmp fast ugt <16 x float> %1029, zeroinitializer
  %1031 = fcmp fast oge <16 x float> %1029, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %1032 = fadd fast <16 x float> %1029, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1033 = fptoui <16 x float> %1032 to <16 x i16>
  %1034 = select <16 x i1> %1031, <16 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <16 x i16> %1033
  %1035 = select <16 x i1> %1030, <16 x i16> %1034, <16 x i16> zeroinitializer
  %1036 = getelementptr inbounds i16, ptr %970, i64 %1019
  store <16 x i16> %1035, ptr %1036, align 2, !tbaa !37
  %1037 = add nuw i64 %1017, 16
  %1038 = add <16 x i64> %1018, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %1039 = icmp eq i64 %1037, %999
  br i1 %1039, label %1040, label %1016, !llvm.loop !93

1040:                                             ; preds = %1016
  %1041 = icmp eq i64 %994, %999
  br i1 %1041, label %1096, label %1042

1042:                                             ; preds = %1040
  %1043 = add i64 %988, %999
  %1044 = and i64 %994, 8
  %1045 = icmp eq i64 %1044, 0
  br i1 %1045, label %1092, label %1046

1046:                                             ; preds = %996, %1042
  %1047 = phi i64 [ %1013, %1042 ], [ %988, %996 ]
  %1048 = phi i64 [ %999, %1042 ], [ 0, %996 ]
  %1049 = and i64 %994, -8
  %1050 = add i64 %988, %1049
  %1051 = insertelement <8 x i64> poison, i64 %1047, i64 0
  %1052 = shufflevector <8 x i64> %1051, <8 x i64> poison, <8 x i32> zeroinitializer
  %1053 = add <8 x i64> %1052, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %1054 = insertelement <8 x double> poison, double %969, i64 0
  %1055 = shufflevector <8 x double> %1054, <8 x double> poison, <8 x i32> zeroinitializer
  %1056 = insertelement <8 x double> poison, double %951, i64 0
  %1057 = shufflevector <8 x double> %1056, <8 x double> poison, <8 x i32> zeroinitializer
  %1058 = insertelement <8 x double> poison, double %957, i64 0
  %1059 = shufflevector <8 x double> %1058, <8 x double> poison, <8 x i32> zeroinitializer
  %1060 = insertelement <8 x double> poison, double %979, i64 0
  %1061 = shufflevector <8 x double> %1060, <8 x double> poison, <8 x i32> zeroinitializer
  %1062 = insertelement <8 x double> poison, double %993, i64 0
  %1063 = shufflevector <8 x double> %1062, <8 x double> poison, <8 x i32> zeroinitializer
  %1064 = fdiv fast <8 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %1059
  %1065 = fdiv fast <8 x double> <double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00, double 1.000000e+00>, %1063
  br label %1066

1066:                                             ; preds = %1066, %1046
  %1067 = phi i64 [ %1048, %1046 ], [ %1087, %1066 ]
  %1068 = phi <8 x i64> [ %1053, %1046 ], [ %1088, %1066 ]
  %1069 = add i64 %988, %1067
  %1070 = sitofp <8 x i64> %1068 to <8 x double>
  %1071 = fmul fast <8 x double> %1070, <double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010, double 0x3F90001000100010>
  %1072 = fsub fast <8 x double> %1071, %1055
  %1073 = fmul fast <8 x double> %1057, %1072
  %1074 = fmul fast <8 x double> %1073, %1064
  %1075 = tail call fast <8 x double> @llvm.exp2.v8f64(<8 x double> %1074)
  %1076 = fsub fast <8 x double> %1075, %1061
  %1077 = fmul fast <8 x double> %1076, <double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04, double 6.553500e+04>
  %1078 = fmul fast <8 x double> %1077, %1065
  %1079 = fptrunc <8 x double> %1078 to <8 x float>
  %1080 = fcmp fast ugt <8 x float> %1079, zeroinitializer
  %1081 = fcmp fast oge <8 x float> %1079, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %1082 = fadd fast <8 x float> %1079, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1083 = fptoui <8 x float> %1082 to <8 x i16>
  %1084 = select <8 x i1> %1081, <8 x i16> <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>, <8 x i16> %1083
  %1085 = select <8 x i1> %1080, <8 x i16> %1084, <8 x i16> zeroinitializer
  %1086 = getelementptr inbounds i16, ptr %970, i64 %1069
  store <8 x i16> %1085, ptr %1086, align 2, !tbaa !37
  %1087 = add nuw i64 %1067, 8
  %1088 = add <8 x i64> %1068, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %1089 = icmp eq i64 %1087, %1049
  br i1 %1089, label %1090, label %1066, !llvm.loop !94

1090:                                             ; preds = %1066
  %1091 = icmp eq i64 %994, %1049
  br i1 %1091, label %1096, label %1092

1092:                                             ; preds = %992, %1042, %1090
  %1093 = phi i64 [ %988, %992 ], [ %1043, %1042 ], [ %1050, %1090 ]
  %1094 = fdiv fast double 1.000000e+00, %957
  %1095 = fdiv fast double 1.000000e+00, %993
  br label %1103

1096:                                             ; preds = %1121, %1040, %1090, %987
  %1097 = phi i64 [ %988, %987 ], [ %990, %1090 ], [ %990, %1040 ], [ %990, %1121 ]
  %1098 = icmp ult i64 %1097, 65536
  br i1 %1098, label %1099, label %1126

1099:                                             ; preds = %1096
  %1100 = shl nuw nsw i64 %1097, 1
  %1101 = getelementptr i8, ptr %970, i64 %1100
  %1102 = sub nuw nsw i64 131072, %1100
  tail call void @llvm.memset.p0.i64(ptr align 2 %1101, i8 -1, i64 %1102, i1 false), !tbaa !37
  br label %1126

1103:                                             ; preds = %1092, %1121
  %1104 = phi i64 [ %1124, %1121 ], [ %1093, %1092 ]
  %1105 = sitofp i64 %1104 to double
  %1106 = fmul fast double %1105, 0x3F90001000100010
  %1107 = fsub fast double %1106, %969
  %1108 = fmul fast double %951, %1107
  %1109 = fmul fast double %1108, %1094
  %1110 = tail call fast double @llvm.exp2.f64(double %1109)
  %1111 = fsub fast double %1110, %979
  %1112 = fmul fast double %1111, 6.553500e+04
  %1113 = fmul fast double %1112, %1095
  %1114 = fptrunc double %1113 to float
  %1115 = fcmp fast ugt float %1114, 0.000000e+00
  br i1 %1115, label %1116, label %1121

1116:                                             ; preds = %1103
  %1117 = fcmp fast ult float %1114, 6.553500e+04
  br i1 %1117, label %1118, label %1121

1118:                                             ; preds = %1116
  %1119 = fadd fast float %1114, 5.000000e-01
  %1120 = fptoui float %1119 to i16
  br label %1121

1121:                                             ; preds = %1103, %1116, %1118
  %1122 = phi i16 [ %1120, %1118 ], [ 0, %1103 ], [ -1, %1116 ]
  %1123 = getelementptr inbounds i16, ptr %970, i64 %1104
  store i16 %1122, ptr %1123, align 2, !tbaa !37
  %1124 = add nuw nsw i64 %1104, 1
  %1125 = icmp eq i64 %1124, %990
  br i1 %1125, label %1096, label %1103, !llvm.loop !95

1126:                                             ; preds = %1099, %1096
  %1127 = load i32, ptr %0, align 8, !tbaa !24
  %1128 = icmp eq i32 %1127, 2
  br i1 %1128, label %1129, label %1135

1129:                                             ; preds = %1126
  %1130 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %1131 = icmp eq i32 %1130, 0
  br i1 %1131, label %2137, label %1132

1132:                                             ; preds = %1129
  %1133 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %1134 = icmp eq i32 %1133, 0
  br i1 %1134, label %2137, label %1135

1135:                                             ; preds = %1132, %1126
  %1136 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %1137 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %1138 = load i64, ptr %1137, align 8, !tbaa !30
  %1139 = icmp sgt i64 %1138, 0
  br i1 %1139, label %1140, label %1212

1140:                                             ; preds = %1135
  %1141 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %1142

1142:                                             ; preds = %1140, %1207
  %1143 = phi i32 [ 1, %1140 ], [ %1208, %1207 ]
  %1144 = phi i64 [ 0, %1140 ], [ %1209, %1207 ]
  %1145 = icmp eq i32 %1143, 0
  br i1 %1145, label %1207, label %1146

1146:                                             ; preds = %1142
  %1147 = load i64, ptr %1141, align 8, !tbaa !31
  %1148 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %1136, i64 noundef 0, i64 noundef %1144, i64 noundef %1147, i64 noundef 1, ptr noundef nonnull %15) #9
  %1149 = icmp eq ptr %1148, null
  br i1 %1149, label %1207, label %1150

1150:                                             ; preds = %1146
  %1151 = load i64, ptr %1141, align 8, !tbaa !31
  %1152 = icmp eq i64 %1151, 0
  br i1 %1152, label %1203, label %1153

1153:                                             ; preds = %1150, %1198
  %1154 = phi ptr [ %1200, %1198 ], [ %1148, %1150 ]
  %1155 = phi i64 [ %1201, %1198 ], [ %1151, %1150 ]
  %1156 = getelementptr inbounds %struct._PixelPacket, ptr %1154, i64 0, i32 2
  %1157 = load i16, ptr %1156, align 2, !tbaa !40
  %1158 = zext i16 %1157 to i64
  %1159 = getelementptr inbounds i16, ptr %970, i64 %1158
  %1160 = load i16, ptr %1159, align 2, !tbaa !37
  %1161 = uitofp i16 %1160 to float
  %1162 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1161) #9
  %1163 = fcmp fast ugt float %1162, 0.000000e+00
  br i1 %1163, label %1164, label %1169

1164:                                             ; preds = %1153
  %1165 = fcmp fast ult float %1162, 6.553500e+04
  br i1 %1165, label %1166, label %1169

1166:                                             ; preds = %1164
  %1167 = fadd fast float %1162, 5.000000e-01
  %1168 = fptoui float %1167 to i16
  br label %1169

1169:                                             ; preds = %1153, %1164, %1166
  %1170 = phi i16 [ %1168, %1166 ], [ 0, %1153 ], [ -1, %1164 ]
  %1171 = getelementptr inbounds %struct._PixelPacket, ptr %1154, i64 0, i32 1
  %1172 = load i16, ptr %1171, align 2, !tbaa !41
  %1173 = zext i16 %1172 to i64
  %1174 = getelementptr inbounds i16, ptr %970, i64 %1173
  %1175 = load i16, ptr %1174, align 2, !tbaa !37
  %1176 = uitofp i16 %1175 to float
  %1177 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1176) #9
  %1178 = fcmp fast ugt float %1177, 0.000000e+00
  br i1 %1178, label %1179, label %1184

1179:                                             ; preds = %1169
  %1180 = fcmp fast ult float %1177, 6.553500e+04
  br i1 %1180, label %1181, label %1184

1181:                                             ; preds = %1179
  %1182 = fadd fast float %1177, 5.000000e-01
  %1183 = fptoui float %1182 to i16
  br label %1184

1184:                                             ; preds = %1169, %1179, %1181
  %1185 = phi i16 [ %1183, %1181 ], [ 0, %1169 ], [ -1, %1179 ]
  %1186 = load i16, ptr %1154, align 2, !tbaa !38
  %1187 = zext i16 %1186 to i64
  %1188 = getelementptr inbounds i16, ptr %970, i64 %1187
  %1189 = load i16, ptr %1188, align 2, !tbaa !37
  %1190 = uitofp i16 %1189 to float
  %1191 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1190) #9
  %1192 = fcmp fast ugt float %1191, 0.000000e+00
  br i1 %1192, label %1193, label %1198

1193:                                             ; preds = %1184
  %1194 = fcmp fast ult float %1191, 6.553500e+04
  br i1 %1194, label %1195, label %1198

1195:                                             ; preds = %1193
  %1196 = fadd fast float %1191, 5.000000e-01
  %1197 = fptoui float %1196 to i16
  br label %1198

1198:                                             ; preds = %1184, %1193, %1195
  %1199 = phi i16 [ %1197, %1195 ], [ 0, %1184 ], [ -1, %1193 ]
  store i16 %1170, ptr %1156, align 2, !tbaa !40
  store i16 %1185, ptr %1171, align 2, !tbaa !41
  store i16 %1199, ptr %1154, align 2, !tbaa !38
  %1200 = getelementptr inbounds %struct._PixelPacket, ptr %1154, i64 1
  %1201 = add nsw i64 %1155, -1
  %1202 = icmp eq i64 %1201, 0
  br i1 %1202, label %1203, label %1153, !llvm.loop !96

1203:                                             ; preds = %1198, %1150
  %1204 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %1136, ptr noundef nonnull %15) #9
  %1205 = icmp ne i32 %1204, 0
  %1206 = zext i1 %1205 to i32
  br label %1207

1207:                                             ; preds = %1146, %1142, %1203
  %1208 = phi i32 [ %1206, %1203 ], [ 0, %1142 ], [ 0, %1146 ]
  %1209 = add nuw nsw i64 %1144, 1
  %1210 = load i64, ptr %1137, align 8, !tbaa !30
  %1211 = icmp slt i64 %1209, %1210
  br i1 %1211, label %1142, label %1212, !llvm.loop !97

1212:                                             ; preds = %1207, %1135
  %1213 = phi i32 [ 1, %1135 ], [ %1208, %1207 ]
  %1214 = tail call ptr @DestroyCacheView(ptr noundef %1136) #8
  %1215 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %970) #8
  %1216 = tail call i32 @SetImageColorspace(ptr noundef nonnull %0, i32 noundef 13)
  %1217 = icmp eq i32 %1216, 0
  %1218 = select i1 %1217, i32 0, i32 %1213
  br label %2137

1219:                                             ; preds = %14, %14
  %1220 = load i32, ptr %0, align 8, !tbaa !24
  %1221 = icmp eq i32 %1220, 2
  br i1 %1221, label %1222, label %1228

1222:                                             ; preds = %1219
  %1223 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  %1224 = icmp eq i32 %1223, 0
  br i1 %1224, label %2137, label %1225

1225:                                             ; preds = %1222
  %1226 = tail call i32 @SetImageStorageClass(ptr noundef nonnull %0, i32 noundef 1) #8
  %1227 = icmp eq i32 %1226, 0
  br i1 %1227, label %2137, label %1228

1228:                                             ; preds = %1225, %1219
  %1229 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %1230 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %1231 = load i64, ptr %1230, align 8, !tbaa !30
  %1232 = icmp sgt i64 %1231, 0
  br i1 %1232, label %1233, label %1296

1233:                                             ; preds = %1228
  %1234 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  br label %1235

1235:                                             ; preds = %1233, %1291
  %1236 = phi i32 [ 1, %1233 ], [ %1292, %1291 ]
  %1237 = phi i64 [ 0, %1233 ], [ %1293, %1291 ]
  %1238 = icmp eq i32 %1236, 0
  br i1 %1238, label %1291, label %1239

1239:                                             ; preds = %1235
  %1240 = load i64, ptr %1234, align 8, !tbaa !31
  %1241 = tail call ptr @GetCacheViewAuthenticPixels(ptr noundef %1229, i64 noundef 0, i64 noundef %1237, i64 noundef %1240, i64 noundef 1, ptr noundef nonnull %15) #9
  %1242 = icmp eq ptr %1241, null
  br i1 %1242, label %1291, label %1243

1243:                                             ; preds = %1239
  %1244 = load i64, ptr %1234, align 8, !tbaa !31
  %1245 = icmp eq i64 %1244, 0
  br i1 %1245, label %1287, label %1246

1246:                                             ; preds = %1243, %1282
  %1247 = phi ptr [ %1284, %1282 ], [ %1241, %1243 ]
  %1248 = phi i64 [ %1285, %1282 ], [ %1244, %1243 ]
  %1249 = getelementptr inbounds %struct._PixelPacket, ptr %1247, i64 0, i32 2
  %1250 = load i16, ptr %1249, align 2, !tbaa !40
  %1251 = uitofp i16 %1250 to float
  %1252 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1251) #9
  %1253 = fcmp fast ugt float %1252, 0.000000e+00
  br i1 %1253, label %1254, label %1259

1254:                                             ; preds = %1246
  %1255 = fcmp fast ult float %1252, 6.553500e+04
  br i1 %1255, label %1256, label %1259

1256:                                             ; preds = %1254
  %1257 = fadd fast float %1252, 5.000000e-01
  %1258 = fptoui float %1257 to i16
  br label %1259

1259:                                             ; preds = %1246, %1254, %1256
  %1260 = phi i16 [ %1258, %1256 ], [ 0, %1246 ], [ -1, %1254 ]
  %1261 = getelementptr inbounds %struct._PixelPacket, ptr %1247, i64 0, i32 1
  %1262 = load i16, ptr %1261, align 2, !tbaa !41
  %1263 = uitofp i16 %1262 to float
  %1264 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1263) #9
  %1265 = fcmp fast ugt float %1264, 0.000000e+00
  br i1 %1265, label %1266, label %1271

1266:                                             ; preds = %1259
  %1267 = fcmp fast ult float %1264, 6.553500e+04
  br i1 %1267, label %1268, label %1271

1268:                                             ; preds = %1266
  %1269 = fadd fast float %1264, 5.000000e-01
  %1270 = fptoui float %1269 to i16
  br label %1271

1271:                                             ; preds = %1259, %1266, %1268
  %1272 = phi i16 [ %1270, %1268 ], [ 0, %1259 ], [ -1, %1266 ]
  %1273 = load i16, ptr %1247, align 2, !tbaa !38
  %1274 = uitofp i16 %1273 to float
  %1275 = tail call fast nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf) %1274) #9
  %1276 = fcmp fast ugt float %1275, 0.000000e+00
  br i1 %1276, label %1277, label %1282

1277:                                             ; preds = %1271
  %1278 = fcmp fast ult float %1275, 6.553500e+04
  br i1 %1278, label %1279, label %1282

1279:                                             ; preds = %1277
  %1280 = fadd fast float %1275, 5.000000e-01
  %1281 = fptoui float %1280 to i16
  br label %1282

1282:                                             ; preds = %1271, %1277, %1279
  %1283 = phi i16 [ %1281, %1279 ], [ 0, %1271 ], [ -1, %1277 ]
  store i16 %1260, ptr %1249, align 2, !tbaa !40
  store i16 %1272, ptr %1261, align 2, !tbaa !41
  store i16 %1283, ptr %1247, align 2, !tbaa !38
  %1284 = getelementptr inbounds %struct._PixelPacket, ptr %1247, i64 1
  %1285 = add nsw i64 %1248, -1
  %1286 = icmp eq i64 %1285, 0
  br i1 %1286, label %1287, label %1246, !llvm.loop !98

1287:                                             ; preds = %1282, %1243
  %1288 = tail call i32 @SyncCacheViewAuthenticPixels(ptr noundef %1229, ptr noundef nonnull %15) #9
  %1289 = icmp ne i32 %1288, 0
  %1290 = zext i1 %1289 to i32
  br label %1291

1291:                                             ; preds = %1239, %1235, %1287
  %1292 = phi i32 [ %1290, %1287 ], [ 0, %1235 ], [ 0, %1239 ]
  %1293 = add nuw nsw i64 %1237, 1
  %1294 = load i64, ptr %1230, align 8, !tbaa !30
  %1295 = icmp slt i64 %1293, %1294
  br i1 %1295, label %1235, label %1296, !llvm.loop !99

1296:                                             ; preds = %1291, %1228
  %1297 = phi i32 [ 1, %1228 ], [ %1292, %1291 ]
  %1298 = tail call ptr @DestroyCacheView(ptr noundef %1229) #8
  %1299 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 1
  %1300 = load i32, ptr %1299, align 4, !tbaa !25
  %1301 = icmp eq i32 %1300, 13
  br i1 %1301, label %2137, label %1302

1302:                                             ; preds = %1296
  store i32 13, ptr %1299, align 4, !tbaa !25
  %1303 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 17
  store i32 0, ptr %1303, align 8, !tbaa !26
  %1304 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 15
  store double 0x3FDD1745D1745D17, ptr %1304, align 8, !tbaa !27
  %1305 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16
  %1306 = tail call ptr @ResetMagickMemory(ptr noundef nonnull %1305, i32 noundef 0, i64 noundef 96) #8
  %1307 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 77
  %1308 = load i32, ptr %1307, align 8, !tbaa !28
  store i32 2, ptr %1303, align 8, !tbaa !26
  store <4 x double> <double 6.400000e-01, double 3.300000e-01, double 3.000000e-02, double 3.000000e-01>, ptr %1305, align 8, !tbaa !29
  %1309 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 1, i32 1
  store <4 x double> <double 6.000000e-01, double 1.000000e-01, double 1.500000e-01, double 6.000000e-02>, ptr %1309, align 8, !tbaa !29
  %1310 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 16, i32 2, i32 2
  store <4 x double> <double 7.900000e-01, double 3.127000e-01, double 3.290000e-01, double 3.583000e-01>, ptr %1310, align 8, !tbaa !29
  %1311 = tail call i32 @SyncImagePixelCache(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  store i32 %1308, ptr %1307, align 8, !tbaa !28
  %1312 = freeze i32 %1311
  %1313 = icmp eq i32 %1312, 0
  %1314 = select i1 %1313, i32 0, i32 %1297
  br label %2137

1315:                                             ; preds = %14
  %1316 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1317 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1318 = tail call dereferenceable_or_null(786432) ptr @AcquireQuantumMemory(i64 noundef 65536, i64 noundef 12) #10
  %1319 = icmp eq ptr %1316, null
  %1320 = icmp eq ptr %1317, null
  %1321 = select i1 %1319, i1 true, i1 %1320
  %1322 = icmp eq ptr %1318, null
  %1323 = select i1 %1321, i1 true, i1 %1322
  br i1 %1323, label %1324, label %1336

1324:                                             ; preds = %1315
  br i1 %1322, label %1327, label %1325

1325:                                             ; preds = %1324
  %1326 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %1318) #8
  br label %1327

1327:                                             ; preds = %1325, %1324
  br i1 %1320, label %1330, label %1328

1328:                                             ; preds = %1327
  %1329 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %1317) #8
  br label %1330

1330:                                             ; preds = %1328, %1327
  br i1 %1319, label %1333, label %1331

1331:                                             ; preds = %1330
  %1332 = tail call ptr @RelinquishMagickMemory(ptr noundef nonnull %1316) #8
  br label %1333

1333:                                             ; preds = %1330, %1331
  %1334 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %1335 = tail call i32 (ptr, ptr, ptr, i64, i32, ptr, ptr, ...) @ThrowMagickException(ptr noundef nonnull %15, ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i64 noundef 2164, i32 noundef 400, ptr noundef nonnull @.str.7, ptr noundef nonnull @.str.8, ptr noundef nonnull %1334) #8
  br label %2137

1336:                                             ; preds = %1315
  %1337 = add i32 %1, -4
  %1338 = tail call i32 @llvm.fshl.i32(i32 %1, i32 %1337, i32 31)
  switch i32 %1338, label %1774 [
    i32 0, label %1590
    i32 7, label %1500
    i32 8, label %1420
    i32 2, label %1339
  ]

1339:                                             ; preds = %1336
  %1340 = getelementptr i8, ptr %1316, i64 786424
  %1341 = getelementptr i8, ptr %1317, i64 786424
  %1342 = getelementptr i8, ptr %1318, i64 786424
  %1343 = getelementptr i8, ptr %1316, i64 4
  %1344 = getelementptr i8, ptr %1316, i64 786428
  %1345 = getelementptr i8, ptr %1317, i64 4
  %1346 = getelementptr i8, ptr %1317, i64 786428
  %1347 = getelementptr i8, ptr %1318, i64 4
  %1348 = getelementptr i8, ptr %1318, i64 786428
  %1349 = getelementptr i8, ptr %1316, i64 8
  %1350 = getelementptr i8, ptr %1316, i64 786432
  %1351 = getelementptr i8, ptr %1317, i64 8
  %1352 = getelementptr i8, ptr %1317, i64 786432
  %1353 = getelementptr i8, ptr %1318, i64 8
  %1354 = getelementptr i8, ptr %1318, i64 786432
  %1355 = icmp ult ptr %1316, %1341
  %1356 = icmp ult ptr %1317, %1340
  %1357 = and i1 %1355, %1356
  %1358 = icmp ult ptr %1316, %1342
  %1359 = icmp ult ptr %1318, %1340
  %1360 = and i1 %1358, %1359
  %1361 = or i1 %1357, %1360
  %1362 = icmp ult ptr %1317, %1342
  %1363 = icmp ult ptr %1318, %1341
  %1364 = and i1 %1362, %1363
  %1365 = or i1 %1361, %1364
  %1366 = icmp ult ptr %1343, %1346
  %1367 = icmp ult ptr %1345, %1344
  %1368 = and i1 %1366, %1367
  %1369 = or i1 %1365, %1368
  %1370 = icmp ult ptr %1343, %1348
  %1371 = icmp ult ptr %1347, %1344
  %1372 = and i1 %1370, %1371
  %1373 = or i1 %1369, %1372
  %1374 = icmp ult ptr %1345, %1348
  %1375 = icmp ult ptr %1347, %1346
  %1376 = and i1 %1374, %1375
  %1377 = or i1 %1373, %1376
  %1378 = icmp ult ptr %1349, %1352
  %1379 = icmp ult ptr %1351, %1350
  %1380 = and i1 %1378, %1379
  %1381 = or i1 %1377, %1380
  %1382 = icmp ult ptr %1349, %1354
  %1383 = icmp ult ptr %1353, %1350
  %1384 = and i1 %1382, %1383
  %1385 = or i1 %1381, %1384
  %1386 = icmp ult ptr %1351, %1354
  %1387 = icmp ult ptr %1353, %1352
  %1388 = and i1 %1386, %1387
  %1389 = or i1 %1385, %1388
  br i1 %1389, label %1749, label %1390

1390:                                             ; preds = %1339, %1390
  %1391 = phi i64 [ %1417, %1390 ], [ 0, %1339 ]
  %1392 = phi <4 x i64> [ %1418, %1390 ], [ <i64 0, i64 1, i64 2, i64 3>, %1339 ]
  %1393 = sitofp <4 x i64> %1392 to <4 x double>
  %1394 = fmul fast <4 x double> %1393, <double 1.358400e+00, double 1.358400e+00, double 1.358400e+00, double 1.358400e+00>
  %1395 = fptrunc <4 x double> %1394 to <4 x float>
  %1396 = fadd fast <4 x double> %1393, <double -3.520900e+04, double -3.520900e+04, double -3.520900e+04, double -3.520900e+04>
  %1397 = fmul fast <4 x double> %1396, <double 1.821500e+00, double 1.821500e+00, double 1.821500e+00, double 1.821500e+00>
  %1398 = fptrunc <4 x double> %1397 to <4 x float>
  %1399 = fadd fast <4 x double> %1393, <double -4.009200e+04, double -4.009200e+04, double -4.009200e+04, double -4.009200e+04>
  %1400 = fmul fast <4 x double> %1399, <double 0xBFDB899616575A5A, double 0xBFDB899616575A5A, double 0xBFDB899616575A5A, double 0xBFDB899616575A5A>
  %1401 = fptrunc <4 x double> %1400 to <4 x float>
  %1402 = fmul fast <4 x double> %1396, <double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03, double 0xBFEDAB28D8665E03>
  %1403 = fptrunc <4 x double> %1402 to <4 x float>
  %1404 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1391
  %1405 = shufflevector <4 x float> %1395, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %1406 = shufflevector <4 x float> %1395, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1407 = shufflevector <8 x float> %1405, <8 x float> %1406, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1407, ptr %1404, align 4, !tbaa !35
  %1408 = fmul fast <4 x double> %1399, <double 2.217900e+00, double 2.217900e+00, double 2.217900e+00, double 2.217900e+00>
  %1409 = fptrunc <4 x double> %1408 to <4 x float>
  %1410 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1391
  %1411 = shufflevector <4 x float> zeroinitializer, <4 x float> %1401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1412 = shufflevector <4 x float> %1409, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1413 = shufflevector <8 x float> %1411, <8 x float> %1412, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1413, ptr %1410, align 4, !tbaa !35
  %1414 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1391
  %1415 = shufflevector <4 x float> %1398, <4 x float> %1403, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1416 = shufflevector <8 x float> %1415, <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float poison, float poison, float poison, float poison>, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1416, ptr %1414, align 4, !tbaa !35
  %1417 = add nuw i64 %1391, 4
  %1418 = add <4 x i64> %1392, <i64 4, i64 4, i64 4, i64 4>
  %1419 = icmp eq i64 %1417, 65536
  br i1 %1419, label %1788, label %1390, !llvm.loop !100

1420:                                             ; preds = %1336
  %1421 = getelementptr i8, ptr %1316, i64 786424
  %1422 = getelementptr i8, ptr %1317, i64 786424
  %1423 = getelementptr i8, ptr %1318, i64 786424
  %1424 = getelementptr i8, ptr %1316, i64 4
  %1425 = getelementptr i8, ptr %1316, i64 786428
  %1426 = getelementptr i8, ptr %1317, i64 4
  %1427 = getelementptr i8, ptr %1317, i64 786428
  %1428 = getelementptr i8, ptr %1318, i64 4
  %1429 = getelementptr i8, ptr %1318, i64 786428
  %1430 = getelementptr i8, ptr %1316, i64 8
  %1431 = getelementptr i8, ptr %1316, i64 786432
  %1432 = getelementptr i8, ptr %1317, i64 8
  %1433 = getelementptr i8, ptr %1317, i64 786432
  %1434 = getelementptr i8, ptr %1318, i64 8
  %1435 = getelementptr i8, ptr %1318, i64 786432
  %1436 = icmp ult ptr %1316, %1422
  %1437 = icmp ult ptr %1317, %1421
  %1438 = and i1 %1436, %1437
  %1439 = icmp ult ptr %1316, %1423
  %1440 = icmp ult ptr %1318, %1421
  %1441 = and i1 %1439, %1440
  %1442 = or i1 %1438, %1441
  %1443 = icmp ult ptr %1317, %1423
  %1444 = icmp ult ptr %1318, %1422
  %1445 = and i1 %1443, %1444
  %1446 = or i1 %1442, %1445
  %1447 = icmp ult ptr %1424, %1427
  %1448 = icmp ult ptr %1426, %1425
  %1449 = and i1 %1447, %1448
  %1450 = or i1 %1446, %1449
  %1451 = icmp ult ptr %1424, %1429
  %1452 = icmp ult ptr %1428, %1425
  %1453 = and i1 %1451, %1452
  %1454 = or i1 %1450, %1453
  %1455 = icmp ult ptr %1426, %1429
  %1456 = icmp ult ptr %1428, %1427
  %1457 = and i1 %1455, %1456
  %1458 = or i1 %1454, %1457
  %1459 = icmp ult ptr %1430, %1433
  %1460 = icmp ult ptr %1432, %1431
  %1461 = and i1 %1459, %1460
  %1462 = or i1 %1458, %1461
  %1463 = icmp ult ptr %1430, %1435
  %1464 = icmp ult ptr %1434, %1431
  %1465 = and i1 %1463, %1464
  %1466 = or i1 %1462, %1465
  %1467 = icmp ult ptr %1432, %1435
  %1468 = icmp ult ptr %1434, %1433
  %1469 = and i1 %1467, %1468
  %1470 = or i1 %1466, %1469
  br i1 %1470, label %1725, label %1471

1471:                                             ; preds = %1420, %1471
  %1472 = phi i64 [ %1497, %1471 ], [ 0, %1420 ]
  %1473 = phi <4 x i64> [ %1498, %1471 ], [ <i64 0, i64 1, i64 2, i64 3>, %1420 ]
  %1474 = sitofp <4 x i64> %1473 to <4 x double>
  %1475 = fptrunc <4 x double> %1474 to <4 x float>
  %1476 = fmul fast <4 x double> %1474, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %1477 = fadd fast <4 x double> %1476, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %1478 = fmul fast <4 x double> %1477, <double 7.874000e-01, double 7.874000e-01, double 7.874000e-01, double 7.874000e-01>
  %1479 = fptrunc <4 x double> %1478 to <4 x float>
  %1480 = fmul fast <4 x double> %1477, <double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176, double 0xBFB7FA3B9AE0C176>
  %1481 = fptrunc <4 x double> %1480 to <4 x float>
  %1482 = fmul fast <4 x double> %1477, <double -2.340620e-01, double -2.340620e-01, double -2.340620e-01, double -2.340620e-01>
  %1483 = fptrunc <4 x double> %1482 to <4 x float>
  %1484 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1472
  %1485 = shufflevector <4 x float> %1475, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %1486 = shufflevector <4 x float> %1475, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1487 = shufflevector <8 x float> %1485, <8 x float> %1486, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1487, ptr %1484, align 4, !tbaa !35
  %1488 = fmul fast <4 x double> %1477, <double 0x3FEDB089A0275254, double 0x3FEDB089A0275254, double 0x3FEDB089A0275254, double 0x3FEDB089A0275254>
  %1489 = fptrunc <4 x double> %1488 to <4 x float>
  %1490 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1472
  %1491 = shufflevector <4 x float> zeroinitializer, <4 x float> %1481, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1492 = shufflevector <4 x float> %1489, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1493 = shufflevector <8 x float> %1491, <8 x float> %1492, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1493, ptr %1490, align 4, !tbaa !35
  %1494 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1472
  %1495 = shufflevector <4 x float> %1479, <4 x float> %1483, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1496 = shufflevector <8 x float> %1495, <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float poison, float poison, float poison, float poison>, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1496, ptr %1494, align 4, !tbaa !35
  %1497 = add nuw i64 %1472, 4
  %1498 = add <4 x i64> %1473, <i64 4, i64 4, i64 4, i64 4>
  %1499 = icmp eq i64 %1497, 65536
  br i1 %1499, label %1788, label %1471, !llvm.loop !101

1500:                                             ; preds = %1336
  %1501 = getelementptr i8, ptr %1316, i64 786424
  %1502 = getelementptr i8, ptr %1317, i64 786424
  %1503 = getelementptr i8, ptr %1318, i64 786424
  %1504 = getelementptr i8, ptr %1316, i64 4
  %1505 = getelementptr i8, ptr %1316, i64 786428
  %1506 = getelementptr i8, ptr %1317, i64 4
  %1507 = getelementptr i8, ptr %1317, i64 786428
  %1508 = getelementptr i8, ptr %1318, i64 4
  %1509 = getelementptr i8, ptr %1318, i64 786428
  %1510 = getelementptr i8, ptr %1316, i64 8
  %1511 = getelementptr i8, ptr %1316, i64 786432
  %1512 = getelementptr i8, ptr %1317, i64 8
  %1513 = getelementptr i8, ptr %1317, i64 786432
  %1514 = getelementptr i8, ptr %1318, i64 8
  %1515 = getelementptr i8, ptr %1318, i64 786432
  %1516 = icmp ult ptr %1316, %1502
  %1517 = icmp ult ptr %1317, %1501
  %1518 = and i1 %1516, %1517
  %1519 = icmp ult ptr %1316, %1503
  %1520 = icmp ult ptr %1318, %1501
  %1521 = and i1 %1519, %1520
  %1522 = or i1 %1518, %1521
  %1523 = icmp ult ptr %1317, %1503
  %1524 = icmp ult ptr %1318, %1502
  %1525 = and i1 %1523, %1524
  %1526 = or i1 %1522, %1525
  %1527 = icmp ult ptr %1504, %1507
  %1528 = icmp ult ptr %1506, %1505
  %1529 = and i1 %1527, %1528
  %1530 = or i1 %1526, %1529
  %1531 = icmp ult ptr %1504, %1509
  %1532 = icmp ult ptr %1508, %1505
  %1533 = and i1 %1531, %1532
  %1534 = or i1 %1530, %1533
  %1535 = icmp ult ptr %1506, %1509
  %1536 = icmp ult ptr %1508, %1507
  %1537 = and i1 %1535, %1536
  %1538 = or i1 %1534, %1537
  %1539 = icmp ult ptr %1510, %1513
  %1540 = icmp ult ptr %1512, %1511
  %1541 = and i1 %1539, %1540
  %1542 = or i1 %1538, %1541
  %1543 = icmp ult ptr %1510, %1515
  %1544 = icmp ult ptr %1514, %1511
  %1545 = and i1 %1543, %1544
  %1546 = or i1 %1542, %1545
  %1547 = icmp ult ptr %1512, %1515
  %1548 = icmp ult ptr %1514, %1513
  %1549 = and i1 %1547, %1548
  %1550 = or i1 %1546, %1549
  br i1 %1550, label %1696, label %1551

1551:                                             ; preds = %1500, %1551
  %1552 = phi i64 [ %1587, %1551 ], [ 0, %1500 ]
  %1553 = phi <4 x i64> [ %1588, %1551 ], [ <i64 0, i64 1, i64 2, i64 3>, %1500 ]
  %1554 = sitofp <4 x i64> %1553 to <4 x double>
  %1555 = fmul fast <4 x double> %1554, <double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFFFFFFE1FB>
  %1556 = fptrunc <4 x double> %1555 to <4 x float>
  %1557 = fmul fast <4 x double> %1554, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %1558 = fadd fast <4 x double> %1557, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %1559 = fmul fast <4 x double> %1558, <double 0xBEA4731C556195D4, double 0xBEA4731C556195D4, double 0xBEA4731C556195D4, double 0xBEA4731C556195D4>
  %1560 = fptrunc <4 x double> %1559 to <4 x float>
  %1561 = fmul fast <4 x double> %1558, <double 0x3FE66E971EE48997, double 0x3FE66E971EE48997, double 0x3FE66E971EE48997, double 0x3FE66E971EE48997>
  %1562 = fptrunc <4 x double> %1561 to <4 x float>
  %1563 = fmul fast <4 x double> %1554, <double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592, double 0x3FEFFFFF7EABA592>
  %1564 = fptrunc <4 x double> %1563 to <4 x float>
  %1565 = fmul fast <4 x double> %1558, <double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3, double 0xBFC60651A6C6C2D3>
  %1566 = fptrunc <4 x double> %1565 to <4 x float>
  %1567 = fmul fast <4 x double> %1558, <double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B, double 0xBFD6DA34C675944B>
  %1568 = fptrunc <4 x double> %1567 to <4 x float>
  %1569 = fmul fast <4 x double> %1554, <double 0x3FF000014CF7A462, double 0x3FF000014CF7A462, double 0x3FF000014CF7A462, double 0x3FF000014CF7A462>
  %1570 = fptrunc <4 x double> %1569 to <4 x float>
  %1571 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1552
  %1572 = shufflevector <4 x float> %1556, <4 x float> %1564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1573 = shufflevector <4 x float> %1570, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1574 = shufflevector <8 x float> %1572, <8 x float> %1573, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1574, ptr %1571, align 4, !tbaa !35
  %1575 = fmul fast <4 x double> %1558, <double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B, double 0x3FEC5A1CBDC4A56B>
  %1576 = fptrunc <4 x double> %1575 to <4 x float>
  %1577 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1552
  %1578 = shufflevector <4 x float> %1560, <4 x float> %1566, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1579 = shufflevector <4 x float> %1576, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1580 = shufflevector <8 x float> %1578, <8 x float> %1579, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1580, ptr %1577, align 4, !tbaa !35
  %1581 = fmul fast <4 x double> %1558, <double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3, double 0x3EB1FF14448BA0A3>
  %1582 = fptrunc <4 x double> %1581 to <4 x float>
  %1583 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1552
  %1584 = shufflevector <4 x float> %1562, <4 x float> %1568, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1585 = shufflevector <4 x float> %1582, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1586 = shufflevector <8 x float> %1584, <8 x float> %1585, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1586, ptr %1583, align 4, !tbaa !35
  %1587 = add nuw i64 %1552, 4
  %1588 = add <4 x i64> %1553, <i64 4, i64 4, i64 4, i64 4>
  %1589 = icmp eq i64 %1587, 65536
  br i1 %1589, label %1788, label %1551, !llvm.loop !102

1590:                                             ; preds = %1336
  %1591 = getelementptr i8, ptr %1316, i64 786424
  %1592 = getelementptr i8, ptr %1317, i64 786424
  %1593 = getelementptr i8, ptr %1318, i64 786424
  %1594 = getelementptr i8, ptr %1316, i64 4
  %1595 = getelementptr i8, ptr %1316, i64 786428
  %1596 = getelementptr i8, ptr %1317, i64 4
  %1597 = getelementptr i8, ptr %1317, i64 786428
  %1598 = getelementptr i8, ptr %1318, i64 4
  %1599 = getelementptr i8, ptr %1318, i64 786428
  %1600 = getelementptr i8, ptr %1316, i64 8
  %1601 = getelementptr i8, ptr %1316, i64 786432
  %1602 = getelementptr i8, ptr %1317, i64 8
  %1603 = getelementptr i8, ptr %1317, i64 786432
  %1604 = getelementptr i8, ptr %1318, i64 8
  %1605 = getelementptr i8, ptr %1318, i64 786432
  %1606 = icmp ult ptr %1316, %1592
  %1607 = icmp ult ptr %1317, %1591
  %1608 = and i1 %1606, %1607
  %1609 = icmp ult ptr %1316, %1593
  %1610 = icmp ult ptr %1318, %1591
  %1611 = and i1 %1609, %1610
  %1612 = or i1 %1608, %1611
  %1613 = icmp ult ptr %1317, %1593
  %1614 = icmp ult ptr %1318, %1592
  %1615 = and i1 %1613, %1614
  %1616 = or i1 %1612, %1615
  %1617 = icmp ult ptr %1594, %1597
  %1618 = icmp ult ptr %1596, %1595
  %1619 = and i1 %1617, %1618
  %1620 = or i1 %1616, %1619
  %1621 = icmp ult ptr %1594, %1599
  %1622 = icmp ult ptr %1598, %1595
  %1623 = and i1 %1621, %1622
  %1624 = or i1 %1620, %1623
  %1625 = icmp ult ptr %1596, %1599
  %1626 = icmp ult ptr %1598, %1597
  %1627 = and i1 %1625, %1626
  %1628 = or i1 %1624, %1627
  %1629 = icmp ult ptr %1600, %1603
  %1630 = icmp ult ptr %1602, %1601
  %1631 = and i1 %1629, %1630
  %1632 = or i1 %1628, %1631
  %1633 = icmp ult ptr %1600, %1605
  %1634 = icmp ult ptr %1604, %1601
  %1635 = and i1 %1633, %1634
  %1636 = or i1 %1632, %1635
  %1637 = icmp ult ptr %1602, %1605
  %1638 = icmp ult ptr %1604, %1603
  %1639 = and i1 %1637, %1638
  %1640 = or i1 %1636, %1639
  br i1 %1640, label %1671, label %1641

1641:                                             ; preds = %1590, %1641
  %1642 = phi i64 [ %1668, %1641 ], [ 0, %1590 ]
  %1643 = phi <4 x i64> [ %1669, %1641 ], [ <i64 0, i64 1, i64 2, i64 3>, %1590 ]
  %1644 = sitofp <4 x i64> %1643 to <4 x double>
  %1645 = fptrunc <4 x double> %1644 to <4 x float>
  %1646 = fmul fast <4 x double> %1644, <double 2.000000e+00, double 2.000000e+00, double 2.000000e+00, double 2.000000e+00>
  %1647 = fadd fast <4 x double> %1646, <double -6.553500e+04, double -6.553500e+04, double -6.553500e+04, double -6.553500e+04>
  %1648 = fmul fast <4 x double> %1647, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %1649 = fptrunc <4 x double> %1648 to <4 x float>
  %1650 = fmul fast <4 x double> %1647, <double -3.333400e-01, double -3.333400e-01, double -3.333400e-01, double -3.333400e-01>
  %1651 = fptrunc <4 x double> %1650 to <4 x float>
  %1652 = fmul fast <4 x double> %1647, <double 6.666650e-01, double 6.666650e-01, double 6.666650e-01, double 6.666650e-01>
  %1653 = fptrunc <4 x double> %1652 to <4 x float>
  %1654 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1642
  %1655 = shufflevector <4 x float> %1645, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>
  %1656 = shufflevector <4 x float> %1645, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1657 = shufflevector <8 x float> %1655, <8 x float> %1656, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1657, ptr %1654, align 4, !tbaa !35
  %1658 = fmul fast <4 x double> %1647, <double -5.000000e-01, double -5.000000e-01, double -5.000000e-01, double -5.000000e-01>
  %1659 = fptrunc <4 x double> %1658 to <4 x float>
  %1660 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1642
  %1661 = shufflevector <4 x float> %1649, <4 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1662 = shufflevector <4 x float> %1659, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1663 = shufflevector <8 x float> %1661, <8 x float> %1662, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1663, ptr %1660, align 4, !tbaa !35
  %1664 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1642
  %1665 = shufflevector <4 x float> %1651, <4 x float> %1653, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1666 = shufflevector <4 x float> %1651, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
  %1667 = shufflevector <8 x float> %1665, <8 x float> %1666, <12 x i32> <i32 0, i32 4, i32 8, i32 1, i32 5, i32 9, i32 2, i32 6, i32 10, i32 3, i32 7, i32 11>
  store <12 x float> %1667, ptr %1664, align 4, !tbaa !35
  %1668 = add nuw i64 %1642, 4
  %1669 = add <4 x i64> %1643, <i64 4, i64 4, i64 4, i64 4>
  %1670 = icmp eq i64 %1668, 65536
  br i1 %1670, label %1788, label %1641, !llvm.loop !103

1671:                                             ; preds = %1590, %1671
  %1672 = phi i64 [ %1694, %1671 ], [ 0, %1590 ]
  %1673 = sitofp i64 %1672 to double
  %1674 = fptrunc double %1673 to float
  %1675 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1672
  store float %1674, ptr %1675, align 4, !tbaa !59
  %1676 = fmul fast double %1673, 2.000000e+00
  %1677 = fadd fast double %1676, -6.553500e+04
  %1678 = fmul fast double %1677, 5.000000e-01
  %1679 = fptrunc double %1678 to float
  %1680 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1672
  store float %1679, ptr %1680, align 4, !tbaa !59
  %1681 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1672
  %1682 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1672, i32 1
  store float %1674, ptr %1682, align 4, !tbaa !61
  %1683 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1672, i32 1
  store float 0.000000e+00, ptr %1683, align 4, !tbaa !61
  %1684 = insertelement <2 x double> poison, double %1677, i64 0
  %1685 = shufflevector <2 x double> %1684, <2 x double> poison, <2 x i32> zeroinitializer
  %1686 = fmul fast <2 x double> %1685, <double -3.333400e-01, double 6.666650e-01>
  %1687 = fptrunc <2 x double> %1686 to <2 x float>
  store <2 x float> %1687, ptr %1681, align 4, !tbaa !35
  %1688 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1672, i32 2
  store float %1674, ptr %1688, align 4, !tbaa !62
  %1689 = fmul fast double %1677, -5.000000e-01
  %1690 = fptrunc double %1689 to float
  %1691 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1672, i32 2
  store float %1690, ptr %1691, align 4, !tbaa !62
  %1692 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1672, i32 2
  %1693 = extractelement <2 x float> %1687, i64 0
  store float %1693, ptr %1692, align 4, !tbaa !62
  %1694 = add nuw nsw i64 %1672, 1
  %1695 = icmp eq i64 %1694, 65536
  br i1 %1695, label %1788, label %1671, !llvm.loop !104

1696:                                             ; preds = %1500, %1696
  %1697 = phi i64 [ %1723, %1696 ], [ 0, %1500 ]
  %1698 = sitofp i64 %1697 to double
  %1699 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1697
  %1700 = fmul fast double %1698, 2.000000e+00
  %1701 = fadd fast double %1700, -6.553500e+04
  %1702 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1697
  %1703 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1697
  %1704 = insertelement <2 x double> poison, double %1698, i64 0
  %1705 = shufflevector <2 x double> %1704, <2 x double> poison, <2 x i32> zeroinitializer
  %1706 = fmul fast <2 x double> %1705, <double 0x3FEFFFFFFFFFE1FB, double 0x3FEFFFFF7EABA592>
  %1707 = fptrunc <2 x double> %1706 to <2 x float>
  store <2 x float> %1707, ptr %1699, align 4, !tbaa !35
  %1708 = insertelement <2 x double> poison, double %1701, i64 0
  %1709 = shufflevector <2 x double> %1708, <2 x double> poison, <2 x i32> zeroinitializer
  %1710 = fmul fast <2 x double> %1709, <double 0xBEA4731C556195D4, double 0xBFC60651A6C6C2D3>
  %1711 = fptrunc <2 x double> %1710 to <2 x float>
  store <2 x float> %1711, ptr %1702, align 4, !tbaa !35
  %1712 = fmul fast <2 x double> %1709, <double 0x3FE66E971EE48997, double 0xBFD6DA34C675944B>
  %1713 = fptrunc <2 x double> %1712 to <2 x float>
  store <2 x float> %1713, ptr %1703, align 4, !tbaa !35
  %1714 = fmul fast double %1698, 0x3FF000014CF7A462
  %1715 = fptrunc double %1714 to float
  %1716 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1697, i32 2
  store float %1715, ptr %1716, align 4, !tbaa !62
  %1717 = fmul fast double %1701, 0x3FEC5A1CBDC4A56B
  %1718 = fptrunc double %1717 to float
  %1719 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1697, i32 2
  store float %1718, ptr %1719, align 4, !tbaa !62
  %1720 = fmul fast double %1701, 0x3EB1FF14448BA0A3
  %1721 = fptrunc double %1720 to float
  %1722 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1697, i32 2
  store float %1721, ptr %1722, align 4, !tbaa !62
  %1723 = add nuw nsw i64 %1697, 1
  %1724 = icmp eq i64 %1723, 65536
  br i1 %1724, label %1788, label %1696, !llvm.loop !105

1725:                                             ; preds = %1420, %1725
  %1726 = phi i64 [ %1747, %1725 ], [ 0, %1420 ]
  %1727 = sitofp i64 %1726 to double
  %1728 = fptrunc double %1727 to float
  %1729 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1726
  store float %1728, ptr %1729, align 4, !tbaa !59
  %1730 = fmul fast double %1727, 2.000000e+00
  %1731 = fadd fast double %1730, -6.553500e+04
  %1732 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1726
  store float 0.000000e+00, ptr %1732, align 4, !tbaa !59
  %1733 = fmul fast double %1731, 7.874000e-01
  %1734 = fptrunc double %1733 to float
  %1735 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1726
  store float %1734, ptr %1735, align 4, !tbaa !59
  %1736 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1726, i32 1
  store float %1728, ptr %1736, align 4, !tbaa !61
  %1737 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1726, i32 1
  %1738 = fmul fast double %1731, -2.340620e-01
  %1739 = fptrunc double %1738 to float
  %1740 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1726, i32 1
  %1741 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1726, i32 2
  store float %1728, ptr %1741, align 4, !tbaa !62
  %1742 = insertelement <2 x double> poison, double %1731, i64 0
  %1743 = shufflevector <2 x double> %1742, <2 x double> poison, <2 x i32> zeroinitializer
  %1744 = fmul fast <2 x double> %1743, <double 0xBFB7FA3B9AE0C176, double 0x3FEDB089A0275254>
  %1745 = fptrunc <2 x double> %1744 to <2 x float>
  store <2 x float> %1745, ptr %1737, align 4, !tbaa !35
  store float %1739, ptr %1740, align 4, !tbaa !61
  %1746 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1726, i32 2
  store float 0.000000e+00, ptr %1746, align 4, !tbaa !62
  %1747 = add nuw nsw i64 %1726, 1
  %1748 = icmp eq i64 %1747, 65536
  br i1 %1748, label %1788, label %1725, !llvm.loop !106

1749:                                             ; preds = %1339, %1749
  %1750 = phi i64 [ %1772, %1749 ], [ 0, %1339 ]
  %1751 = sitofp i64 %1750 to double
  %1752 = fmul fast double %1751, 1.358400e+00
  %1753 = fptrunc double %1752 to float
  %1754 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1750
  store float %1753, ptr %1754, align 4, !tbaa !59
  %1755 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1750
  store float 0.000000e+00, ptr %1755, align 4, !tbaa !59
  %1756 = fadd fast double %1751, -3.520900e+04
  %1757 = fmul fast double %1756, 1.821500e+00
  %1758 = fptrunc double %1757 to float
  %1759 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1750
  store float %1758, ptr %1759, align 4, !tbaa !59
  %1760 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1750, i32 1
  store float %1753, ptr %1760, align 4, !tbaa !61
  %1761 = fadd fast double %1751, -4.009200e+04
  %1762 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1750, i32 1
  %1763 = fmul fast double %1756, 0xBFEDAB28D8665E03
  %1764 = fptrunc double %1763 to float
  %1765 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1750, i32 1
  %1766 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1750, i32 2
  store float %1753, ptr %1766, align 4, !tbaa !62
  %1767 = insertelement <2 x double> poison, double %1761, i64 0
  %1768 = shufflevector <2 x double> %1767, <2 x double> poison, <2 x i32> zeroinitializer
  %1769 = fmul fast <2 x double> %1768, <double 0xBFDB899616575A5A, double 2.217900e+00>
  %1770 = fptrunc <2 x double> %1769 to <2 x float>
  store <2 x float> %1770, ptr %1762, align 4, !tbaa !35
  store float %1764, ptr %1765, align 4, !tbaa !61
  %1771 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1750, i32 2
  store float 0.000000e+00, ptr %1771, align 4, !tbaa !62
  %1772 = add nuw nsw i64 %1750, 1
  %1773 = icmp eq i64 %1772, 65536
  br i1 %1773, label %1788, label %1749, !llvm.loop !107

1774:                                             ; preds = %1336, %1774
  %1775 = phi i64 [ %1786, %1774 ], [ 0, %1336 ]
  %1776 = sitofp i64 %1775 to double
  %1777 = fptrunc double %1776 to float
  %1778 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1775
  store float %1777, ptr %1778, align 4, !tbaa !59
  %1779 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1775
  store float 0.000000e+00, ptr %1779, align 4, !tbaa !59
  %1780 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1775
  store float 0.000000e+00, ptr %1780, align 4, !tbaa !59
  %1781 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1775, i32 1
  %1782 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1775, i32 1
  %1783 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1775, i32 1
  store <2 x float> zeroinitializer, ptr %1781, align 4, !tbaa !35
  store float %1777, ptr %1782, align 4, !tbaa !61
  store float 0.000000e+00, ptr %1783, align 4, !tbaa !61
  %1784 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1775, i32 2
  store float 0.000000e+00, ptr %1784, align 4, !tbaa !62
  %1785 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1775, i32 2
  store float %1777, ptr %1785, align 4, !tbaa !62
  %1786 = add nuw nsw i64 %1775, 1
  %1787 = icmp eq i64 %1786, 65536
  br i1 %1787, label %1788, label %1774, !llvm.loop !108

1788:                                             ; preds = %1390, %1749, %1471, %1725, %1551, %1696, %1641, %1671, %1774
  %1789 = load i32, ptr %0, align 8, !tbaa !24
  %1790 = icmp eq i32 %1789, 2
  br i1 %1790, label %1791, label %1799

1791:                                             ; preds = %1788
  %1792 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 10
  %1793 = load i64, ptr %1792, align 8, !tbaa !75
  %1794 = icmp sgt i64 %1793, 0
  br i1 %1794, label %1795, label %2128

1795:                                             ; preds = %1791
  %1796 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 11
  %1797 = load ptr, ptr %1796, align 8, !tbaa !76
  %1798 = icmp eq i32 %1, 8
  br label %1987

1799:                                             ; preds = %1788
  %1800 = tail call ptr @AcquireAuthenticCacheView(ptr noundef nonnull %0, ptr noundef nonnull %15) #8
  %1801 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 8
  %1802 = load i64, ptr %1801, align 8, !tbaa !30
  %1803 = icmp sgt i64 %1802, 0
  br i1 %1803, label %1804, label %1985

1804:                                             ; preds = %1799
  %1805 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 7
  %1806 = icmp eq i32 %1, 8
  %1807 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 47
  %1808 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 53
  %1809 = getelementptr inbounds %struct._Image, ptr %0, i64 0, i32 48
  br label %1810

1810:                                             ; preds = %1804, %1979
  %1811 = phi i32 [ 1, %1804 ], [ %1981, %1979 ]
  %1812 = phi i64 [ 0, %1804 ], [ %1980, %1979 ]
  %1813 = phi i64 [ 0, %1804 ], [ %1982, %1979 ]
  %1814 = icmp eq i32 %1811, 0
  br i1 %1814, label %1979, label %1815

1815:                                             ; preds = %1810
  %1816 = load i64, ptr %1805, align 8, !tbaa !31
  %1817 = call ptr @GetCacheViewAuthenticPixels(ptr noundef %1800, i64 noundef 0, i64 noundef %1813, i64 noundef %1816, i64 noundef 1, ptr noundef nonnull %15) #9
  %1818 = icmp eq ptr %1817, null
  br i1 %1818, label %1979, label %1819

1819:                                             ; preds = %1815
  %1820 = load i64, ptr %1805, align 8, !tbaa !31
  %1821 = icmp sgt i64 %1820, 0
  br i1 %1821, label %1822, label %1964

1822:                                             ; preds = %1819, %1959
  %1823 = phi ptr [ %1961, %1959 ], [ %1817, %1819 ]
  %1824 = phi i64 [ %1962, %1959 ], [ 0, %1819 ]
  %1825 = getelementptr inbounds %struct._PixelPacket, ptr %1823, i64 0, i32 2
  %1826 = load i16, ptr %1825, align 2, !tbaa !40
  %1827 = zext i16 %1826 to i64
  %1828 = getelementptr inbounds %struct._PixelPacket, ptr %1823, i64 0, i32 1
  %1829 = load i16, ptr %1828, align 2, !tbaa !41
  %1830 = zext i16 %1829 to i64
  %1831 = load i16, ptr %1823, align 2, !tbaa !38
  %1832 = zext i16 %1831 to i64
  %1833 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1827
  %1834 = load float, ptr %1833, align 4, !tbaa !59
  %1835 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1830
  %1836 = load float, ptr %1835, align 4, !tbaa !59
  %1837 = fadd fast float %1836, %1834
  %1838 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1832
  %1839 = load float, ptr %1838, align 4, !tbaa !59
  %1840 = fadd fast float %1837, %1839
  %1841 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1827, i32 1
  %1842 = load float, ptr %1841, align 4, !tbaa !61
  %1843 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1830, i32 1
  %1844 = load float, ptr %1843, align 4, !tbaa !61
  %1845 = fadd fast float %1844, %1842
  %1846 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1832, i32 1
  %1847 = load float, ptr %1846, align 4, !tbaa !61
  %1848 = fadd fast float %1845, %1847
  %1849 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1827, i32 2
  %1850 = load float, ptr %1849, align 4, !tbaa !62
  %1851 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1830, i32 2
  %1852 = load float, ptr %1851, align 4, !tbaa !62
  %1853 = fadd fast float %1852, %1850
  %1854 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1832, i32 2
  %1855 = load float, ptr %1854, align 4, !tbaa !62
  %1856 = fadd fast float %1853, %1855
  %1857 = fpext float %1840 to double
  br i1 %1806, label %1858, label %1903

1858:                                             ; preds = %1822
  %1859 = fmul fast double %1857, 0x3F90001000100010
  %1860 = fptrunc double %1859 to float
  %1861 = fpext float %1860 to double
  %1862 = fcmp fast ugt float %1860, 0.000000e+00
  br i1 %1862, label %1863, label %1868

1863:                                             ; preds = %1858
  %1864 = fcmp fast ult float %1860, 1.388000e+03
  br i1 %1864, label %1865, label %1868

1865:                                             ; preds = %1863
  %1866 = fadd fast double %1861, 5.000000e-01
  %1867 = fptosi double %1866 to i64
  br label %1868

1868:                                             ; preds = %1858, %1863, %1865
  %1869 = phi i64 [ %1867, %1865 ], [ 0, %1858 ], [ 1388, %1863 ]
  %1870 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %1869
  %1871 = load float, ptr %1870, align 4, !tbaa !35
  %1872 = fmul fast float %1871, 6.553500e+04
  %1873 = fpext float %1848 to double
  %1874 = fmul fast double %1873, 0x3F90001000100010
  %1875 = fptrunc double %1874 to float
  %1876 = fpext float %1875 to double
  %1877 = fcmp fast ugt float %1875, 0.000000e+00
  br i1 %1877, label %1878, label %1883

1878:                                             ; preds = %1868
  %1879 = fcmp fast ult float %1875, 1.388000e+03
  br i1 %1879, label %1880, label %1883

1880:                                             ; preds = %1878
  %1881 = fadd fast double %1876, 5.000000e-01
  %1882 = fptosi double %1881 to i64
  br label %1883

1883:                                             ; preds = %1868, %1878, %1880
  %1884 = phi i64 [ %1882, %1880 ], [ 0, %1868 ], [ 1388, %1878 ]
  %1885 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %1884
  %1886 = load float, ptr %1885, align 4, !tbaa !35
  %1887 = fmul fast float %1886, 6.553500e+04
  %1888 = fpext float %1856 to double
  %1889 = fmul fast double %1888, 0x3F90001000100010
  %1890 = fptrunc double %1889 to float
  %1891 = fpext float %1890 to double
  %1892 = fcmp fast ugt float %1890, 0.000000e+00
  br i1 %1892, label %1893, label %1898

1893:                                             ; preds = %1883
  %1894 = fcmp fast ult float %1890, 1.388000e+03
  br i1 %1894, label %1895, label %1898

1895:                                             ; preds = %1893
  %1896 = fadd fast double %1891, 5.000000e-01
  %1897 = fptosi double %1896 to i64
  br label %1898

1898:                                             ; preds = %1883, %1893, %1895
  %1899 = phi i64 [ %1897, %1895 ], [ 0, %1883 ], [ 1388, %1893 ]
  %1900 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %1899
  %1901 = load float, ptr %1900, align 4, !tbaa !35
  %1902 = fmul fast float %1901, 6.553500e+04
  br label %1933

1903:                                             ; preds = %1822
  %1904 = fcmp fast ugt float %1840, 0.000000e+00
  br i1 %1904, label %1905, label %1910

1905:                                             ; preds = %1903
  %1906 = fcmp fast ult float %1840, 6.553500e+04
  br i1 %1906, label %1907, label %1910

1907:                                             ; preds = %1905
  %1908 = fadd fast double %1857, 5.000000e-01
  %1909 = fptoui double %1908 to i16
  br label %1910

1910:                                             ; preds = %1903, %1905, %1907
  %1911 = phi i16 [ %1909, %1907 ], [ 0, %1903 ], [ -1, %1905 ]
  %1912 = uitofp i16 %1911 to float
  %1913 = fpext float %1848 to double
  %1914 = fcmp fast ugt float %1848, 0.000000e+00
  br i1 %1914, label %1915, label %1920

1915:                                             ; preds = %1910
  %1916 = fcmp fast ult float %1848, 6.553500e+04
  br i1 %1916, label %1917, label %1920

1917:                                             ; preds = %1915
  %1918 = fadd fast double %1913, 5.000000e-01
  %1919 = fptoui double %1918 to i16
  br label %1920

1920:                                             ; preds = %1910, %1915, %1917
  %1921 = phi i16 [ %1919, %1917 ], [ 0, %1910 ], [ -1, %1915 ]
  %1922 = uitofp i16 %1921 to float
  %1923 = fpext float %1856 to double
  %1924 = fcmp fast ugt float %1856, 0.000000e+00
  br i1 %1924, label %1925, label %1930

1925:                                             ; preds = %1920
  %1926 = fcmp fast ult float %1856, 6.553500e+04
  br i1 %1926, label %1927, label %1930

1927:                                             ; preds = %1925
  %1928 = fadd fast double %1923, 5.000000e-01
  %1929 = fptoui double %1928 to i16
  br label %1930

1930:                                             ; preds = %1920, %1925, %1927
  %1931 = phi i16 [ %1929, %1927 ], [ 0, %1920 ], [ -1, %1925 ]
  %1932 = uitofp i16 %1931 to float
  br label %1933

1933:                                             ; preds = %1930, %1898
  %1934 = phi float [ %1902, %1898 ], [ %1932, %1930 ]
  %1935 = phi float [ %1887, %1898 ], [ %1922, %1930 ]
  %1936 = phi float [ %1872, %1898 ], [ %1912, %1930 ]
  %1937 = fcmp fast ugt float %1936, 0.000000e+00
  br i1 %1937, label %1938, label %1943

1938:                                             ; preds = %1933
  %1939 = fcmp fast ult float %1936, 6.553500e+04
  br i1 %1939, label %1940, label %1943

1940:                                             ; preds = %1938
  %1941 = fadd fast float %1936, 5.000000e-01
  %1942 = fptoui float %1941 to i16
  br label %1943

1943:                                             ; preds = %1933, %1938, %1940
  %1944 = phi i16 [ %1942, %1940 ], [ 0, %1933 ], [ -1, %1938 ]
  store i16 %1944, ptr %1825, align 2, !tbaa !40
  %1945 = fcmp fast ugt float %1935, 0.000000e+00
  br i1 %1945, label %1946, label %1951

1946:                                             ; preds = %1943
  %1947 = fcmp fast ult float %1935, 6.553500e+04
  br i1 %1947, label %1948, label %1951

1948:                                             ; preds = %1946
  %1949 = fadd fast float %1935, 5.000000e-01
  %1950 = fptoui float %1949 to i16
  br label %1951

1951:                                             ; preds = %1943, %1946, %1948
  %1952 = phi i16 [ %1950, %1948 ], [ 0, %1943 ], [ -1, %1946 ]
  store i16 %1952, ptr %1828, align 2, !tbaa !41
  %1953 = fcmp fast ugt float %1934, 0.000000e+00
  br i1 %1953, label %1954, label %1959

1954:                                             ; preds = %1951
  %1955 = fcmp fast ult float %1934, 6.553500e+04
  br i1 %1955, label %1956, label %1959

1956:                                             ; preds = %1954
  %1957 = fadd fast float %1934, 5.000000e-01
  %1958 = fptoui float %1957 to i16
  br label %1959

1959:                                             ; preds = %1951, %1954, %1956
  %1960 = phi i16 [ %1958, %1956 ], [ 0, %1951 ], [ -1, %1954 ]
  store i16 %1960, ptr %1823, align 2, !tbaa !38
  %1961 = getelementptr inbounds %struct._PixelPacket, ptr %1823, i64 1
  %1962 = add nuw nsw i64 %1824, 1
  %1963 = icmp eq i64 %1962, %1820
  br i1 %1963, label %1964, label %1822, !llvm.loop !109

1964:                                             ; preds = %1959, %1819
  %1965 = call i32 @SyncCacheViewAuthenticPixels(ptr noundef %1800, ptr noundef nonnull %15) #9
  %1966 = icmp ne i32 %1965, 0
  %1967 = zext i1 %1966 to i32
  %1968 = load ptr, ptr %1807, align 8, !tbaa !81
  %1969 = icmp eq ptr %1968, null
  br i1 %1969, label %1979, label %1970

1970:                                             ; preds = %1964
  %1971 = add nsw i64 %1812, 1
  %1972 = load i64, ptr %1801, align 8, !tbaa !30
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %3) #8
  %1973 = call i64 (ptr, i64, ptr, ...) @FormatLocaleString(ptr noundef nonnull %3, i64 noundef 4096, ptr noundef nonnull @.str.13, ptr noundef nonnull @.str.12, ptr noundef nonnull %1808) #8
  %1974 = load ptr, ptr %1807, align 8, !tbaa !81
  %1975 = load ptr, ptr %1809, align 8, !tbaa !82
  %1976 = call i32 %1974(ptr noundef nonnull %3, i64 noundef %1812, i64 noundef %1972, ptr noundef %1975) #8
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %3) #8
  %1977 = icmp eq i32 %1976, 0
  %1978 = select i1 %1977, i32 0, i32 %1967
  br label %1979

1979:                                             ; preds = %1964, %1970, %1815, %1810
  %1980 = phi i64 [ %1812, %1810 ], [ %1812, %1815 ], [ %1971, %1970 ], [ %1812, %1964 ]
  %1981 = phi i32 [ 0, %1810 ], [ 0, %1815 ], [ %1978, %1970 ], [ %1967, %1964 ]
  %1982 = add nuw nsw i64 %1813, 1
  %1983 = load i64, ptr %1801, align 8, !tbaa !30
  %1984 = icmp slt i64 %1982, %1983
  br i1 %1984, label %1810, label %1985, !llvm.loop !110

1985:                                             ; preds = %1979, %1799
  %1986 = call ptr @DestroyCacheView(ptr noundef %1800) #8
  br label %2130

1987:                                             ; preds = %1795, %2124
  %1988 = phi i64 [ 0, %1795 ], [ %2126, %2124 ]
  %1989 = getelementptr inbounds %struct._PixelPacket, ptr %1797, i64 %1988, i32 2
  %1990 = load i16, ptr %1989, align 2, !tbaa !40
  %1991 = zext i16 %1990 to i64
  %1992 = getelementptr inbounds %struct._PixelPacket, ptr %1797, i64 %1988, i32 1
  %1993 = load i16, ptr %1992, align 2, !tbaa !41
  %1994 = zext i16 %1993 to i64
  %1995 = getelementptr inbounds %struct._PixelPacket, ptr %1797, i64 %1988
  %1996 = load i16, ptr %1995, align 2, !tbaa !38
  %1997 = zext i16 %1996 to i64
  %1998 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1991
  %1999 = load float, ptr %1998, align 4, !tbaa !59
  %2000 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1994
  %2001 = load float, ptr %2000, align 4, !tbaa !59
  %2002 = fadd fast float %2001, %1999
  %2003 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1997
  %2004 = load float, ptr %2003, align 4, !tbaa !59
  %2005 = fadd fast float %2002, %2004
  %2006 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1991, i32 1
  %2007 = load float, ptr %2006, align 4, !tbaa !61
  %2008 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1994, i32 1
  %2009 = load float, ptr %2008, align 4, !tbaa !61
  %2010 = fadd fast float %2009, %2007
  %2011 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1997, i32 1
  %2012 = load float, ptr %2011, align 4, !tbaa !61
  %2013 = fadd fast float %2010, %2012
  %2014 = getelementptr inbounds %struct._TransformPacket, ptr %1316, i64 %1991, i32 2
  %2015 = load float, ptr %2014, align 4, !tbaa !62
  %2016 = getelementptr inbounds %struct._TransformPacket, ptr %1317, i64 %1994, i32 2
  %2017 = load float, ptr %2016, align 4, !tbaa !62
  %2018 = fadd fast float %2017, %2015
  %2019 = getelementptr inbounds %struct._TransformPacket, ptr %1318, i64 %1997, i32 2
  %2020 = load float, ptr %2019, align 4, !tbaa !62
  %2021 = fadd fast float %2018, %2020
  %2022 = fpext float %2005 to double
  br i1 %1798, label %2023, label %2068

2023:                                             ; preds = %1987
  %2024 = fmul fast double %2022, 0x3F90001000100010
  %2025 = fptrunc double %2024 to float
  %2026 = fpext float %2025 to double
  %2027 = fcmp fast ugt float %2025, 0.000000e+00
  br i1 %2027, label %2028, label %2033

2028:                                             ; preds = %2023
  %2029 = fcmp fast ult float %2025, 1.388000e+03
  br i1 %2029, label %2030, label %2033

2030:                                             ; preds = %2028
  %2031 = fadd fast double %2026, 5.000000e-01
  %2032 = fptosi double %2031 to i64
  br label %2033

2033:                                             ; preds = %2023, %2028, %2030
  %2034 = phi i64 [ %2032, %2030 ], [ 0, %2023 ], [ 1388, %2028 ]
  %2035 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %2034
  %2036 = load float, ptr %2035, align 4, !tbaa !35
  %2037 = fmul fast float %2036, 6.553500e+04
  %2038 = fpext float %2013 to double
  %2039 = fmul fast double %2038, 0x3F90001000100010
  %2040 = fptrunc double %2039 to float
  %2041 = fpext float %2040 to double
  %2042 = fcmp fast ugt float %2040, 0.000000e+00
  br i1 %2042, label %2043, label %2048

2043:                                             ; preds = %2033
  %2044 = fcmp fast ult float %2040, 1.388000e+03
  br i1 %2044, label %2045, label %2048

2045:                                             ; preds = %2043
  %2046 = fadd fast double %2041, 5.000000e-01
  %2047 = fptosi double %2046 to i64
  br label %2048

2048:                                             ; preds = %2033, %2043, %2045
  %2049 = phi i64 [ %2047, %2045 ], [ 0, %2033 ], [ 1388, %2043 ]
  %2050 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %2049
  %2051 = load float, ptr %2050, align 4, !tbaa !35
  %2052 = fmul fast float %2051, 6.553500e+04
  %2053 = fpext float %2021 to double
  %2054 = fmul fast double %2053, 0x3F90001000100010
  %2055 = fptrunc double %2054 to float
  %2056 = fpext float %2055 to double
  %2057 = fcmp fast ugt float %2055, 0.000000e+00
  br i1 %2057, label %2058, label %2063

2058:                                             ; preds = %2048
  %2059 = fcmp fast ult float %2055, 1.388000e+03
  br i1 %2059, label %2060, label %2063

2060:                                             ; preds = %2058
  %2061 = fadd fast double %2056, 5.000000e-01
  %2062 = fptosi double %2061 to i64
  br label %2063

2063:                                             ; preds = %2048, %2058, %2060
  %2064 = phi i64 [ %2062, %2060 ], [ 0, %2048 ], [ 1388, %2058 ]
  %2065 = getelementptr inbounds [1389 x float], ptr @TransformRGBImage.YCCMap, i64 0, i64 %2064
  %2066 = load float, ptr %2065, align 4, !tbaa !35
  %2067 = fmul fast float %2066, 6.553500e+04
  br label %2098

2068:                                             ; preds = %1987
  %2069 = fcmp fast ugt float %2005, 0.000000e+00
  br i1 %2069, label %2070, label %2075

2070:                                             ; preds = %2068
  %2071 = fcmp fast ult float %2005, 6.553500e+04
  br i1 %2071, label %2072, label %2075

2072:                                             ; preds = %2070
  %2073 = fadd fast double %2022, 5.000000e-01
  %2074 = fptoui double %2073 to i16
  br label %2075

2075:                                             ; preds = %2068, %2070, %2072
  %2076 = phi i16 [ %2074, %2072 ], [ 0, %2068 ], [ -1, %2070 ]
  %2077 = uitofp i16 %2076 to float
  %2078 = fpext float %2013 to double
  %2079 = fcmp fast ugt float %2013, 0.000000e+00
  br i1 %2079, label %2080, label %2085

2080:                                             ; preds = %2075
  %2081 = fcmp fast ult float %2013, 6.553500e+04
  br i1 %2081, label %2082, label %2085

2082:                                             ; preds = %2080
  %2083 = fadd fast double %2078, 5.000000e-01
  %2084 = fptoui double %2083 to i16
  br label %2085

2085:                                             ; preds = %2075, %2080, %2082
  %2086 = phi i16 [ %2084, %2082 ], [ 0, %2075 ], [ -1, %2080 ]
  %2087 = uitofp i16 %2086 to float
  %2088 = fpext float %2021 to double
  %2089 = fcmp fast ugt float %2021, 0.000000e+00
  br i1 %2089, label %2090, label %2095

2090:                                             ; preds = %2085
  %2091 = fcmp fast ult float %2021, 6.553500e+04
  br i1 %2091, label %2092, label %2095

2092:                                             ; preds = %2090
  %2093 = fadd fast double %2088, 5.000000e-01
  %2094 = fptoui double %2093 to i16
  br label %2095

2095:                                             ; preds = %2085, %2090, %2092
  %2096 = phi i16 [ %2094, %2092 ], [ 0, %2085 ], [ -1, %2090 ]
  %2097 = uitofp i16 %2096 to float
  br label %2098

2098:                                             ; preds = %2095, %2063
  %2099 = phi float [ %2067, %2063 ], [ %2097, %2095 ]
  %2100 = phi float [ %2052, %2063 ], [ %2087, %2095 ]
  %2101 = phi float [ %2037, %2063 ], [ %2077, %2095 ]
  %2102 = fcmp fast ugt float %2101, 0.000000e+00
  br i1 %2102, label %2103, label %2108

2103:                                             ; preds = %2098
  %2104 = fcmp fast ult float %2101, 6.553500e+04
  br i1 %2104, label %2105, label %2108

2105:                                             ; preds = %2103
  %2106 = fadd fast float %2101, 5.000000e-01
  %2107 = fptoui float %2106 to i16
  br label %2108

2108:                                             ; preds = %2098, %2103, %2105
  %2109 = phi i16 [ %2107, %2105 ], [ 0, %2098 ], [ -1, %2103 ]
  store i16 %2109, ptr %1989, align 2, !tbaa !40
  %2110 = fcmp fast ugt float %2100, 0.000000e+00
  br i1 %2110, label %2111, label %2116

2111:                                             ; preds = %2108
  %2112 = fcmp fast ult float %2100, 6.553500e+04
  br i1 %2112, label %2113, label %2116

2113:                                             ; preds = %2111
  %2114 = fadd fast float %2100, 5.000000e-01
  %2115 = fptoui float %2114 to i16
  br label %2116

2116:                                             ; preds = %2108, %2111, %2113
  %2117 = phi i16 [ %2115, %2113 ], [ 0, %2108 ], [ -1, %2111 ]
  store i16 %2117, ptr %1992, align 2, !tbaa !41
  %2118 = fcmp fast ugt float %2099, 0.000000e+00
  br i1 %2118, label %2119, label %2124

2119:                                             ; preds = %2116
  %2120 = fcmp fast ult float %2099, 6.553500e+04
  br i1 %2120, label %2121, label %2124

2121:                                             ; preds = %2119
  %2122 = fadd fast float %2099, 5.000000e-01
  %2123 = fptoui float %2122 to i16
  br label %2124

2124:                                             ; preds = %2116, %2119, %2121
  %2125 = phi i16 [ %2123, %2121 ], [ 0, %2116 ], [ -1, %2119 ]
  store i16 %2125, ptr %1995, align 2, !tbaa !38
  %2126 = add nuw nsw i64 %1988, 1
  %2127 = icmp eq i64 %2126, %1793
  br i1 %2127, label %2128, label %1987, !llvm.loop !111

2128:                                             ; preds = %2124, %1791
  %2129 = tail call i32 @SyncImage(ptr noundef nonnull %0) #8
  br label %2130

2130:                                             ; preds = %2128, %1985
  %2131 = call ptr @RelinquishMagickMemory(ptr noundef %1318) #8
  %2132 = call ptr @RelinquishMagickMemory(ptr noundef %1317) #8
  %2133 = call ptr @RelinquishMagickMemory(ptr noundef %1316) #8
  %2134 = call i32 @SetImageColorspace(ptr noundef nonnull %0, i32 noundef 13)
  %2135 = icmp ne i32 %2134, 0
  %2136 = zext i1 %2135 to i32
  br label %2137

2137:                                             ; preds = %1302, %924, %250, %1296, %918, %245, %2130, %1333, %1225, %1222, %972, %1129, %1132, %1212, %269, %266, %180, %173, %170, %165
  %2138 = phi i32 [ %166, %165 ], [ 0, %170 ], [ 0, %173 ], [ 0, %180 ], [ 0, %266 ], [ 0, %269 ], [ 0, %972 ], [ 0, %1129 ], [ 0, %1132 ], [ %1218, %1212 ], [ 0, %1222 ], [ 0, %1225 ], [ 0, %1333 ], [ %2136, %2130 ], [ %246, %245 ], [ %919, %918 ], [ %1297, %1296 ], [ %262, %250 ], [ %936, %924 ], [ %1314, %1302 ]
  ret i32 %2138
}

; Function Attrs: hot
declare nofpclass(nan inf) float @EncodePixelGamma(float noundef nofpclass(nan inf)) local_unnamed_addr #3

declare void @ConvertHCLToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHCLpToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSBToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSIToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSLToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHSVToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertHWBToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertLCHabToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare void @ConvertLCHuvToRGB(double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), double noundef nofpclass(nan inf), ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #2

declare nofpclass(nan inf) double @InterpretLocaleValue(ptr noundef, ptr noundef) local_unnamed_addr #2

declare i64 @FormatLocaleString(ptr noundef, i64 noundef, ptr noundef, ...) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.exp2.f64(double) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.powi.f64.i32(double, i32) #6

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <16 x double> @llvm.log10.v16f64(<16 x double>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <16 x double> @llvm.exp2.v16f64(<16 x double>) #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x double> @llvm.exp2.v8f64(<8 x double>) #6

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { hot "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { allocsize(0,1) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #8 = { nounwind }
attributes #9 = { hot nounwind }
attributes #10 = { nounwind allocsize(0,1) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !7, i64 12976}
!6 = !{!"_Image", !7, i64 0, !7, i64 4, !7, i64 8, !9, i64 16, !7, i64 24, !7, i64 28, !7, i64 32, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !10, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !13, i64 104, !14, i64 112, !7, i64 208, !10, i64 216, !7, i64 224, !10, i64 232, !10, i64 240, !10, i64 248, !9, i64 256, !13, i64 264, !13, i64 272, !16, i64 280, !16, i64 312, !16, i64 344, !13, i64 376, !13, i64 384, !13, i64 392, !7, i64 400, !7, i64 404, !7, i64 408, !7, i64 412, !7, i64 416, !7, i64 420, !10, i64 424, !9, i64 432, !9, i64 440, !9, i64 448, !9, i64 456, !9, i64 464, !9, i64 472, !17, i64 480, !18, i64 504, !10, i64 568, !10, i64 576, !10, i64 584, !10, i64 592, !10, i64 600, !10, i64 608, !7, i64 616, !7, i64 4712, !7, i64 8808, !9, i64 12904, !9, i64 12912, !20, i64 12920, !7, i64 12976, !9, i64 12984, !10, i64 12992, !22, i64 13000, !22, i64 13032, !10, i64 13064, !9, i64 13072, !9, i64 13080, !10, i64 13088, !10, i64 13096, !10, i64 13104, !7, i64 13112, !7, i64 13116, !11, i64 13120, !10, i64 13128, !16, i64 13136, !10, i64 13168, !10, i64 13176, !7, i64 13184, !7, i64 13188, !23, i64 13192, !7, i64 13200, !9, i64 13208, !9, i64 13216, !7, i64 13224, !9, i64 13232}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!"long", !7, i64 0}
!10 = !{!"any pointer", !7, i64 0}
!11 = !{!"_PixelPacket", !12, i64 0, !12, i64 2, !12, i64 4, !12, i64 6}
!12 = !{!"short", !7, i64 0}
!13 = !{!"double", !7, i64 0}
!14 = !{!"_ChromaticityInfo", !15, i64 0, !15, i64 24, !15, i64 48, !15, i64 72}
!15 = !{!"_PrimaryInfo", !13, i64 0, !13, i64 8, !13, i64 16}
!16 = !{!"_RectangleInfo", !9, i64 0, !9, i64 8, !9, i64 16, !9, i64 24}
!17 = !{!"_ErrorInfo", !13, i64 0, !13, i64 8, !13, i64 16}
!18 = !{!"_TimerInfo", !19, i64 0, !19, i64 24, !7, i64 48, !9, i64 56}
!19 = !{!"_Timer", !13, i64 0, !13, i64 8, !13, i64 16}
!20 = !{!"_ExceptionInfo", !7, i64 0, !21, i64 4, !10, i64 8, !10, i64 16, !10, i64 24, !7, i64 32, !10, i64 40, !9, i64 48}
!21 = !{!"int", !7, i64 0}
!22 = !{!"_ProfileInfo", !10, i64 0, !9, i64 8, !10, i64 16, !9, i64 24}
!23 = !{!"long long", !7, i64 0}
!24 = !{!6, !7, i64 0}
!25 = !{!6, !7, i64 4}
!26 = !{!6, !7, i64 208}
!27 = !{!6, !13, i64 104}
!28 = !{!6, !7, i64 13184}
!29 = !{!13, !13, i64 0}
!30 = !{!6, !9, i64 48}
!31 = !{!6, !9, i64 40}
!32 = !{i64 0, i64 4, !33, i64 4, i64 4, !33, i64 12, i64 8, !29, i64 20, i64 8, !34, i64 28, i64 4, !35, i64 32, i64 4, !35, i64 36, i64 4, !35, i64 40, i64 4, !35, i64 44, i64 4, !35}
!33 = !{!7, !7, i64 0}
!34 = !{!9, !9, i64 0}
!35 = !{!36, !36, i64 0}
!36 = !{!"float", !7, i64 0}
!37 = !{!12, !12, i64 0}
!38 = !{!11, !12, i64 0}
!39 = !{!11, !12, i64 6}
!40 = !{!11, !12, i64 4}
!41 = !{!11, !12, i64 2}
!42 = distinct !{!42, !43}
!43 = !{!"llvm.loop.mustprogress"}
!44 = distinct !{!44, !43}
!45 = !{!6, !7, i64 32}
!46 = distinct !{!46, !43}
!47 = distinct !{!47, !43}
!48 = !{!6, !7, i64 13224}
!49 = distinct !{!49, !43}
!50 = distinct !{!50, !43}
!51 = distinct !{!51, !43, !52, !53}
!52 = !{!"llvm.loop.isvectorized", i32 1}
!53 = !{!"llvm.loop.unroll.runtime.disable"}
!54 = distinct !{!54, !43}
!55 = distinct !{!55, !43}
!56 = distinct !{!56, !43}
!57 = distinct !{!57, !43}
!58 = distinct !{!58, !43, !52, !53}
!59 = !{!60, !36, i64 0}
!60 = !{!"_TransformPacket", !36, i64 0, !36, i64 4, !36, i64 8}
!61 = !{!60, !36, i64 4}
!62 = !{!60, !36, i64 8}
!63 = distinct !{!63, !43, !52}
!64 = distinct !{!64, !43}
!65 = distinct !{!65, !43, !52, !53}
!66 = distinct !{!66, !43, !52}
!67 = distinct !{!67, !43}
!68 = distinct !{!68, !43, !52, !53}
!69 = distinct !{!69, !43, !52}
!70 = distinct !{!70, !43, !52, !53}
!71 = distinct !{!71, !43, !52}
!72 = distinct !{!72, !43, !52, !53}
!73 = distinct !{!73, !43, !52}
!74 = distinct !{!74, !43}
!75 = !{!6, !9, i64 64}
!76 = !{!6, !10, i64 72}
!77 = !{!15, !13, i64 0}
!78 = !{!15, !13, i64 8}
!79 = !{!15, !13, i64 16}
!80 = distinct !{!80, !43}
!81 = !{!6, !10, i64 568}
!82 = !{!6, !10, i64 576}
!83 = distinct !{!83, !43}
!84 = distinct !{!84, !43}
!85 = !{i32 0, i32 2}
!86 = !{i64 0, i64 4, !35}
!87 = distinct !{!87, !43}
!88 = distinct !{!88, !43}
!89 = distinct !{!89, !43}
!90 = distinct !{!90, !43}
!91 = distinct !{!91, !43}
!92 = distinct !{!92, !43}
!93 = distinct !{!93, !43, !52, !53}
!94 = distinct !{!94, !43, !52, !53}
!95 = distinct !{!95, !43, !53, !52}
!96 = distinct !{!96, !43}
!97 = distinct !{!97, !43}
!98 = distinct !{!98, !43}
!99 = distinct !{!99, !43}
!100 = distinct !{!100, !43, !52, !53}
!101 = distinct !{!101, !43, !52, !53}
!102 = distinct !{!102, !43, !52, !53}
!103 = distinct !{!103, !43, !52, !53}
!104 = distinct !{!104, !43, !52}
!105 = distinct !{!105, !43, !52}
!106 = distinct !{!106, !43, !52}
!107 = distinct !{!107, !43, !52}
!108 = distinct !{!108, !43}
!109 = distinct !{!109, !43}
!110 = distinct !{!110, !43}
!111 = distinct !{!111, !43}
