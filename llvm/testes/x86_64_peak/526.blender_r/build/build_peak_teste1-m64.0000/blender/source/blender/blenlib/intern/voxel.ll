; ModuleID = 'blender/source/blender/blenlib/intern/voxel.c'
source_filename = "blender/source/blender/blenlib/intern/voxel.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local nofpclass(nan inf) float @BLI_voxel_sample_nearest(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #0 {
  %4 = load float, ptr %2, align 4, !tbaa !5
  %5 = load i32, ptr %1, align 4, !tbaa !9
  %6 = sitofp i32 %5 to float
  %7 = fmul fast float %4, %6
  %8 = fptosi float %7 to i32
  %9 = getelementptr inbounds float, ptr %2, i64 1
  %10 = load float, ptr %9, align 4, !tbaa !5
  %11 = getelementptr inbounds i32, ptr %1, i64 1
  %12 = load i32, ptr %11, align 4, !tbaa !9
  %13 = sitofp i32 %12 to float
  %14 = fmul fast float %10, %13
  %15 = fptosi float %14 to i32
  %16 = getelementptr inbounds float, ptr %2, i64 2
  %17 = load float, ptr %16, align 4, !tbaa !5
  %18 = getelementptr inbounds i32, ptr %1, i64 2
  %19 = load i32, ptr %18, align 4, !tbaa !9
  %20 = sitofp i32 %19 to float
  %21 = fmul fast float %17, %20
  %22 = fptosi float %21 to i32
  %23 = icmp slt i32 %8, 0
  %24 = icmp sgt i32 %5, %8
  %25 = add nsw i32 %5, -1
  %26 = select i1 %24, i32 %8, i32 %25
  %27 = select i1 %23, i32 0, i32 %26
  %28 = icmp slt i32 %15, 0
  %29 = icmp sgt i32 %12, %15
  %30 = add nsw i32 %12, -1
  %31 = select i1 %29, i32 %15, i32 %30
  %32 = select i1 %28, i32 0, i32 %31
  %33 = icmp slt i32 %22, 0
  %34 = icmp sgt i32 %19, %22
  %35 = add nsw i32 %19, -1
  %36 = select i1 %34, i32 %22, i32 %35
  %37 = select i1 %33, i32 0, i32 %36
  %38 = mul nsw i32 %37, %12
  %39 = add i32 %38, %32
  %40 = mul i32 %39, %5
  %41 = add nsw i32 %40, %27
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, ptr %0, i64 %42
  %44 = load float, ptr %43, align 4, !tbaa !5
  ret float %44
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local nofpclass(nan inf) float @BLI_voxel_sample_trilinear(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #1 {
  %4 = icmp eq ptr %0, null
  br i1 %4, label %134, label %5

5:                                                ; preds = %3
  %6 = load float, ptr %2, align 4, !tbaa !5
  %7 = load i32, ptr %1, align 4, !tbaa !9
  %8 = sitofp i32 %7 to float
  %9 = fmul fast float %6, %8
  %10 = fadd fast float %9, -5.000000e-01
  %11 = getelementptr inbounds float, ptr %2, i64 1
  %12 = getelementptr inbounds i32, ptr %1, i64 1
  %13 = fptosi float %10 to i32
  %14 = fcmp fast ult float %10, 0.000000e+00
  %15 = sitofp i32 %13 to float
  %16 = fcmp fast une float %10, %15
  %17 = select i1 %14, i1 %16, i1 false
  %18 = sext i1 %17 to i32
  %19 = add nsw i32 %18, %13
  %20 = add nsw i32 %7, -1
  %21 = icmp slt i32 %19, 0
  %22 = tail call i32 @llvm.smin.i32(i32 %19, i32 %20)
  %23 = select i1 %21, i32 0, i32 %22
  %24 = add nsw i32 %19, 1
  %25 = icmp slt i32 %19, -1
  %26 = tail call i32 @llvm.smin.i32(i32 %24, i32 %20)
  %27 = select i1 %25, i32 0, i32 %26
  %28 = load <2 x float>, ptr %11, align 4, !tbaa !5
  %29 = load <2 x i32>, ptr %12, align 4, !tbaa !9
  %30 = sitofp <2 x i32> %29 to <2 x float>
  %31 = fmul fast <2 x float> %28, %30
  %32 = fadd fast <2 x float> %31, <float -5.000000e-01, float -5.000000e-01>
  %33 = fptosi <2 x float> %32 to <2 x i32>
  %34 = fcmp fast ult <2 x float> %32, zeroinitializer
  %35 = sitofp <2 x i32> %33 to <2 x float>
  %36 = fcmp fast une <2 x float> %32, %35
  %37 = select <2 x i1> %34, <2 x i1> %36, <2 x i1> zeroinitializer
  %38 = sext <2 x i1> %37 to <2 x i32>
  %39 = add nsw <2 x i32> %38, %33
  %40 = shufflevector <2 x i32> %39, <2 x i32> poison, <4 x i32> <i32 1, i32 1, i32 0, i32 0>
  %41 = extractelement <2 x i32> %29, i64 0
  %42 = add nsw i32 %41, -1
  %43 = extractelement <2 x i32> %39, i64 0
  %44 = tail call i32 @llvm.smin.i32(i32 %43, i32 %42)
  %45 = icmp slt <4 x i32> %40, <i32 -1, i32 0, i32 -1, i32 0>
  %46 = extractelement <4 x i1> %45, i64 3
  %47 = select i1 %46, i32 0, i32 %44
  %48 = mul nsw i32 %47, %7
  %49 = add nsw i32 %43, 1
  %50 = tail call i32 @llvm.smin.i32(i32 %49, i32 %42)
  %51 = extractelement <4 x i1> %45, i64 2
  %52 = select i1 %51, i32 0, i32 %50
  %53 = mul nsw i32 %52, %7
  %54 = mul nsw i32 %41, %7
  %55 = extractelement <2 x i32> %29, i64 1
  %56 = add nsw i32 %55, -1
  %57 = extractelement <2 x i32> %39, i64 1
  %58 = tail call i32 @llvm.smin.i32(i32 %57, i32 %56)
  %59 = extractelement <4 x i1> %45, i64 1
  %60 = select i1 %59, i32 0, i32 %58
  %61 = mul nsw i32 %60, %54
  %62 = add nsw i32 %57, 1
  %63 = tail call i32 @llvm.smin.i32(i32 %62, i32 %56)
  %64 = extractelement <4 x i1> %45, i64 0
  %65 = select i1 %64, i32 0, i32 %63
  %66 = mul nsw i32 %65, %54
  %67 = sitofp i32 %19 to float
  %68 = fsub fast float %10, %67
  %69 = sitofp i32 %43 to float
  %70 = extractelement <2 x float> %32, i64 0
  %71 = fsub fast float %70, %69
  %72 = sitofp i32 %57 to float
  %73 = extractelement <2 x float> %32, i64 1
  %74 = fsub fast float %73, %72
  %75 = fsub fast float 1.000000e+00, %68
  %76 = fsub fast float 1.000000e+00, %71
  %77 = add nsw i32 %48, %23
  %78 = add nsw i32 %61, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, ptr %0, i64 %79
  %81 = load float, ptr %80, align 4, !tbaa !5
  %82 = fmul fast float %75, %81
  %83 = add nsw i32 %48, %27
  %84 = add nsw i32 %61, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, ptr %0, i64 %85
  %87 = load float, ptr %86, align 4, !tbaa !5
  %88 = fmul fast float %68, %87
  %89 = fadd fast float %82, %88
  %90 = fmul fast float %76, %89
  %91 = add nsw i32 %53, %23
  %92 = add nsw i32 %91, %61
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, ptr %0, i64 %93
  %95 = load float, ptr %94, align 4, !tbaa !5
  %96 = fmul fast float %75, %95
  %97 = add nsw i32 %53, %27
  %98 = add nsw i32 %97, %61
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, ptr %0, i64 %99
  %101 = load float, ptr %100, align 4, !tbaa !5
  %102 = fmul fast float %68, %101
  %103 = fadd fast float %96, %102
  %104 = fmul fast float %103, %71
  %105 = fadd fast float %90, %104
  %106 = add nsw i32 %66, %77
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, ptr %0, i64 %107
  %109 = load float, ptr %108, align 4, !tbaa !5
  %110 = fmul fast float %75, %109
  %111 = add nsw i32 %66, %83
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, ptr %0, i64 %112
  %114 = load float, ptr %113, align 4, !tbaa !5
  %115 = fmul fast float %68, %114
  %116 = fadd fast float %110, %115
  %117 = fmul fast float %76, %116
  %118 = add nsw i32 %66, %91
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, ptr %0, i64 %119
  %121 = load float, ptr %120, align 4, !tbaa !5
  %122 = fmul fast float %75, %121
  %123 = add nsw i32 %66, %97
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds float, ptr %0, i64 %124
  %126 = load float, ptr %125, align 4, !tbaa !5
  %127 = fmul fast float %126, %68
  %128 = fadd fast float %122, %127
  %129 = fmul fast float %128, %71
  %130 = fadd fast float %117, %129
  %131 = fsub fast float %130, %105
  %132 = fmul fast float %131, %74
  %133 = fadd fast float %132, %105
  br label %134

134:                                              ; preds = %3, %5
  %135 = phi float [ %133, %5 ], [ 0.000000e+00, %3 ]
  ret float %135
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local nofpclass(nan inf) float @BLI_voxel_sample_triquadratic(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #1 {
  %4 = icmp eq ptr %0, null
  br i1 %4, label %295, label %5

5:                                                ; preds = %3
  %6 = load float, ptr %2, align 4, !tbaa !5
  %7 = load i32, ptr %1, align 4, !tbaa !9
  %8 = sitofp i32 %7 to float
  %9 = fmul fast float %6, %8
  %10 = getelementptr inbounds float, ptr %2, i64 1
  %11 = getelementptr inbounds i32, ptr %1, i64 1
  %12 = fptosi float %9 to i32
  %13 = fcmp fast ult float %9, 0.000000e+00
  %14 = sitofp i32 %12 to float
  %15 = fcmp fast une float %9, %14
  %16 = select i1 %13, i1 %15, i1 false
  %17 = sext i1 %16 to i32
  %18 = add nsw i32 %17, %12
  %19 = add nsw i32 %18, -1
  %20 = add nsw i32 %7, -1
  %21 = tail call i32 @llvm.smin.i32(i32 %19, i32 %20)
  %22 = icmp sgt i32 %18, 0
  %23 = select i1 %22, i32 %21, i32 0
  %24 = icmp slt i32 %18, 0
  %25 = tail call i32 @llvm.smin.i32(i32 %18, i32 %20)
  %26 = select i1 %24, i32 0, i32 %25
  %27 = add nsw i32 %18, 1
  %28 = icmp slt i32 %18, -1
  %29 = tail call i32 @llvm.smin.i32(i32 %27, i32 %20)
  %30 = select i1 %28, i32 0, i32 %29
  %31 = sitofp i32 %18 to float
  %32 = fsub fast float %9, %31
  %33 = fmul fast float %32, 5.000000e-01
  %34 = fadd fast float %33, -1.000000e+00
  %35 = fmul fast float %34, %32
  %36 = fadd fast float %35, 5.000000e-01
  %37 = fsub fast float 1.000000e+00, %32
  %38 = fmul fast float %37, %32
  %39 = fadd fast float %38, 5.000000e-01
  %40 = fmul fast float %33, %32
  %41 = load <2 x float>, ptr %10, align 4, !tbaa !5
  %42 = load <2 x i32>, ptr %11, align 4, !tbaa !9
  %43 = sitofp <2 x i32> %42 to <2 x float>
  %44 = fmul fast <2 x float> %41, %43
  %45 = fptosi <2 x float> %44 to <2 x i32>
  %46 = fcmp fast ult <2 x float> %44, zeroinitializer
  %47 = sitofp <2 x i32> %45 to <2 x float>
  %48 = fcmp fast une <2 x float> %44, %47
  %49 = select <2 x i1> %46, <2 x i1> %48, <2 x i1> zeroinitializer
  %50 = sext <2 x i1> %49 to <2 x i32>
  %51 = add nsw <2 x i32> %50, %45
  %52 = extractelement <2 x i32> %51, i64 0
  %53 = add nsw i32 %52, -1
  %54 = extractelement <2 x i32> %42, i64 0
  %55 = add nsw i32 %54, -1
  %56 = tail call i32 @llvm.smin.i32(i32 %53, i32 %55)
  %57 = icmp sgt i32 %52, 0
  %58 = select i1 %57, i32 %56, i32 0
  %59 = mul nsw i32 %58, %7
  %60 = icmp slt i32 %52, 0
  %61 = tail call i32 @llvm.smin.i32(i32 %52, i32 %55)
  %62 = select i1 %60, i32 0, i32 %61
  %63 = mul nsw i32 %62, %7
  %64 = add nsw i32 %52, 1
  %65 = icmp slt i32 %52, -1
  %66 = tail call i32 @llvm.smin.i32(i32 %64, i32 %55)
  %67 = select i1 %65, i32 0, i32 %66
  %68 = mul nsw i32 %67, %7
  %69 = mul nsw i32 %54, %7
  %70 = extractelement <2 x i32> %51, i64 1
  %71 = add nsw i32 %70, -1
  %72 = extractelement <2 x i32> %42, i64 1
  %73 = add nsw i32 %72, -1
  %74 = tail call i32 @llvm.smin.i32(i32 %71, i32 %73)
  %75 = icmp sgt i32 %70, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = mul nsw i32 %76, %69
  %78 = icmp slt i32 %70, 0
  %79 = tail call i32 @llvm.smin.i32(i32 %70, i32 %73)
  %80 = select i1 %78, i32 0, i32 %79
  %81 = mul nsw i32 %80, %69
  %82 = add nsw i32 %70, 1
  %83 = icmp slt i32 %70, -1
  %84 = tail call i32 @llvm.smin.i32(i32 %82, i32 %73)
  %85 = select i1 %83, i32 0, i32 %84
  %86 = mul nsw i32 %85, %69
  %87 = sitofp <2 x i32> %51 to <2 x float>
  %88 = fsub fast <2 x float> %44, %87
  %89 = extractelement <2 x float> %88, i64 0
  %90 = fmul fast float %89, 5.000000e-01
  %91 = fadd fast float %90, -1.000000e+00
  %92 = fmul fast float %91, %89
  %93 = fsub fast float 1.000000e+00, %89
  %94 = fmul fast float %93, %89
  %95 = fadd fast float %94, 5.000000e-01
  %96 = insertelement <2 x float> <float poison, float 5.000000e-01>, float %90, i64 0
  %97 = fmul fast <2 x float> %88, %96
  %98 = extractelement <2 x float> %88, i64 1
  %99 = fsub fast float 1.000000e+00, %98
  %100 = fmul fast float %99, %98
  %101 = fadd fast float %100, 5.000000e-01
  %102 = add nsw i32 %59, %23
  %103 = add nsw i32 %77, %102
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, ptr %0, i64 %104
  %106 = load float, ptr %105, align 4, !tbaa !5
  %107 = fmul fast float %36, %106
  %108 = add nsw i32 %59, %26
  %109 = add nsw i32 %77, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float, ptr %0, i64 %110
  %112 = load float, ptr %111, align 4, !tbaa !5
  %113 = fmul fast float %39, %112
  %114 = add nsw i32 %59, %30
  %115 = add nsw i32 %77, %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, ptr %0, i64 %116
  %118 = load float, ptr %117, align 4, !tbaa !5
  %119 = fmul fast float %40, %118
  %120 = fadd fast float %113, %119
  %121 = fadd fast float %120, %107
  %122 = add nsw i32 %63, %23
  %123 = add nsw i32 %77, %122
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds float, ptr %0, i64 %124
  %126 = load float, ptr %125, align 4, !tbaa !5
  %127 = fmul fast float %36, %126
  %128 = add nsw i32 %63, %26
  %129 = add nsw i32 %77, %128
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds float, ptr %0, i64 %130
  %132 = load float, ptr %131, align 4, !tbaa !5
  %133 = fmul fast float %39, %132
  %134 = add nsw i32 %63, %30
  %135 = add nsw i32 %77, %134
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, ptr %0, i64 %136
  %138 = load float, ptr %137, align 4, !tbaa !5
  %139 = fmul fast float %40, %138
  %140 = fadd fast float %133, %139
  %141 = fadd fast float %140, %127
  %142 = fmul fast float %141, %95
  %143 = insertelement <2 x float> %97, float %92, i64 0
  %144 = fadd fast <2 x float> %143, <float 5.000000e-01, float -1.000000e+00>
  %145 = insertelement <2 x float> %88, float %121, i64 0
  %146 = fmul fast <2 x float> %144, %145
  %147 = insertelement <2 x float> <float poison, float 5.000000e-01>, float %142, i64 0
  %148 = fadd fast <2 x float> %146, %147
  %149 = add nsw i32 %68, %23
  %150 = add nsw i32 %77, %149
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, ptr %0, i64 %151
  %153 = load float, ptr %152, align 4, !tbaa !5
  %154 = fmul fast float %36, %153
  %155 = add nsw i32 %68, %26
  %156 = add nsw i32 %77, %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, ptr %0, i64 %157
  %159 = load float, ptr %158, align 4, !tbaa !5
  %160 = fmul fast float %39, %159
  %161 = add nsw i32 %68, %30
  %162 = add nsw i32 %77, %161
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, ptr %0, i64 %163
  %165 = load float, ptr %164, align 4, !tbaa !5
  %166 = fmul fast float %165, %40
  %167 = fadd fast float %166, %160
  %168 = fadd fast float %167, %154
  %169 = extractelement <2 x float> %97, i64 0
  %170 = fmul fast float %168, %169
  %171 = extractelement <2 x float> %148, i64 0
  %172 = fadd fast float %171, %170
  %173 = extractelement <2 x float> %148, i64 1
  %174 = fmul fast float %172, %173
  %175 = add nsw i32 %102, %81
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, ptr %0, i64 %176
  %178 = load float, ptr %177, align 4, !tbaa !5
  %179 = fmul fast float %36, %178
  %180 = add nsw i32 %108, %81
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float, ptr %0, i64 %181
  %183 = load float, ptr %182, align 4, !tbaa !5
  %184 = fmul fast float %183, %39
  %185 = fadd fast float %184, %179
  %186 = add nsw i32 %114, %81
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds float, ptr %0, i64 %187
  %189 = load float, ptr %188, align 4, !tbaa !5
  %190 = fmul fast float %189, %40
  %191 = fadd fast float %185, %190
  %192 = extractelement <2 x float> %144, i64 0
  %193 = fmul fast float %191, %192
  %194 = add nsw i32 %81, %122
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, ptr %0, i64 %195
  %197 = load float, ptr %196, align 4, !tbaa !5
  %198 = fmul fast float %197, %36
  %199 = add nsw i32 %81, %128
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, ptr %0, i64 %200
  %202 = load float, ptr %201, align 4, !tbaa !5
  %203 = fmul fast float %202, %39
  %204 = fadd fast float %203, %198
  %205 = add nsw i32 %81, %134
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds float, ptr %0, i64 %206
  %208 = load float, ptr %207, align 4, !tbaa !5
  %209 = fmul fast float %208, %40
  %210 = fadd fast float %204, %209
  %211 = fmul fast float %210, %95
  %212 = fadd fast float %211, %193
  %213 = add nsw i32 %149, %81
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds float, ptr %0, i64 %214
  %216 = load float, ptr %215, align 4, !tbaa !5
  %217 = fmul fast float %216, %36
  %218 = add nsw i32 %155, %81
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds float, ptr %0, i64 %219
  %221 = load float, ptr %220, align 4, !tbaa !5
  %222 = fmul fast float %221, %39
  %223 = fadd fast float %222, %217
  %224 = add nsw i32 %161, %81
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds float, ptr %0, i64 %225
  %227 = load float, ptr %226, align 4, !tbaa !5
  %228 = fmul fast float %227, %40
  %229 = fadd fast float %223, %228
  %230 = fmul fast float %229, %169
  %231 = fadd fast float %212, %230
  %232 = fmul fast float %231, %101
  %233 = fadd fast float %232, %174
  %234 = add nsw i32 %86, %102
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds float, ptr %0, i64 %235
  %237 = load float, ptr %236, align 4, !tbaa !5
  %238 = fmul fast float %237, %36
  %239 = add nsw i32 %86, %108
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds float, ptr %0, i64 %240
  %242 = load float, ptr %241, align 4, !tbaa !5
  %243 = fmul fast float %242, %39
  %244 = fadd fast float %243, %238
  %245 = add nsw i32 %86, %114
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds float, ptr %0, i64 %246
  %248 = load float, ptr %247, align 4, !tbaa !5
  %249 = fmul fast float %248, %40
  %250 = fadd fast float %244, %249
  %251 = fmul fast float %250, %192
  %252 = add nsw i32 %86, %122
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds float, ptr %0, i64 %253
  %255 = load float, ptr %254, align 4, !tbaa !5
  %256 = fmul fast float %255, %36
  %257 = add nsw i32 %86, %128
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds float, ptr %0, i64 %258
  %260 = load float, ptr %259, align 4, !tbaa !5
  %261 = fmul fast float %260, %39
  %262 = fadd fast float %261, %256
  %263 = add nsw i32 %86, %134
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds float, ptr %0, i64 %264
  %266 = load float, ptr %265, align 4, !tbaa !5
  %267 = fmul fast float %266, %40
  %268 = fadd fast float %262, %267
  %269 = fmul fast float %268, %95
  %270 = fadd fast float %269, %251
  %271 = add nsw i32 %86, %149
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds float, ptr %0, i64 %272
  %274 = load float, ptr %273, align 4, !tbaa !5
  %275 = fmul fast float %274, %36
  %276 = add nsw i32 %86, %155
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds float, ptr %0, i64 %277
  %279 = load float, ptr %278, align 4, !tbaa !5
  %280 = fmul fast float %279, %39
  %281 = fadd fast float %280, %275
  %282 = add nsw i32 %86, %161
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds float, ptr %0, i64 %283
  %285 = load float, ptr %284, align 4, !tbaa !5
  %286 = fmul fast float %285, %40
  %287 = fadd fast float %281, %286
  %288 = insertelement <2 x float> %88, float %287, i64 0
  %289 = fmul fast <2 x float> %97, %288
  %290 = extractelement <2 x float> %289, i64 0
  %291 = fadd fast float %270, %290
  %292 = extractelement <2 x float> %289, i64 1
  %293 = fmul fast float %292, %291
  %294 = fadd fast float %233, %293
  br label %295

295:                                              ; preds = %3, %5
  %296 = phi float [ %294, %5 ], [ 0.000000e+00, %3 ]
  ret float %296
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local nofpclass(nan inf) float @BLI_voxel_sample_tricubic(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) local_unnamed_addr #1 {
  %5 = icmp eq ptr %0, null
  br i1 %5, label %618, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds float, ptr %2, i64 2
  %8 = load float, ptr %7, align 4, !tbaa !5
  %9 = getelementptr inbounds i32, ptr %1, i64 2
  %10 = load i32, ptr %9, align 4, !tbaa !9
  %11 = sitofp i32 %10 to float
  %12 = fmul fast float %8, %11
  %13 = fadd fast float %12, -5.000000e-01
  %14 = fptosi float %13 to i32
  %15 = fcmp fast ult float %13, 0.000000e+00
  %16 = sitofp i32 %14 to float
  %17 = fcmp fast une float %13, %16
  %18 = select i1 %15, i1 %17, i1 false
  %19 = sext i1 %18 to i32
  %20 = add nsw i32 %19, %14
  %21 = add nsw i32 %20, -1
  %22 = add nsw i32 %10, -1
  %23 = tail call i32 @llvm.smin.i32(i32 %21, i32 %22)
  %24 = icmp sgt i32 %20, 0
  %25 = select i1 %24, i32 %23, i32 0
  %26 = icmp slt i32 %20, 0
  %27 = tail call i32 @llvm.smin.i32(i32 %20, i32 %22)
  %28 = select i1 %26, i32 0, i32 %27
  %29 = add nsw i32 %20, 1
  %30 = icmp slt i32 %20, -1
  %31 = tail call i32 @llvm.smin.i32(i32 %29, i32 %22)
  %32 = select i1 %30, i32 0, i32 %31
  %33 = add nsw i32 %20, 2
  %34 = icmp slt i32 %20, -2
  %35 = tail call i32 @llvm.smin.i32(i32 %33, i32 %22)
  %36 = select i1 %34, i32 0, i32 %35
  %37 = load <2 x float>, ptr %2, align 4, !tbaa !5
  %38 = load <2 x i32>, ptr %1, align 4, !tbaa !9
  %39 = sitofp <2 x i32> %38 to <2 x float>
  %40 = fmul fast <2 x float> %37, %39
  %41 = fadd fast <2 x float> %40, <float -5.000000e-01, float -5.000000e-01>
  %42 = fptosi <2 x float> %41 to <2 x i32>
  %43 = fcmp fast ult <2 x float> %41, zeroinitializer
  %44 = sitofp <2 x i32> %42 to <2 x float>
  %45 = fcmp fast une <2 x float> %41, %44
  %46 = select <2 x i1> %43, <2 x i1> %45, <2 x i1> zeroinitializer
  %47 = sext <2 x i1> %46 to <2 x i32>
  %48 = add nsw <2 x i32> %47, %42
  %49 = extractelement <2 x i32> %48, i64 0
  %50 = add nsw i32 %49, -1
  %51 = extractelement <2 x i32> %38, i64 0
  %52 = add nsw i32 %51, -1
  %53 = tail call i32 @llvm.smin.i32(i32 %50, i32 %52)
  %54 = icmp sgt i32 %49, 0
  %55 = select i1 %54, i32 %53, i32 0
  %56 = icmp slt i32 %49, 0
  %57 = tail call i32 @llvm.smin.i32(i32 %49, i32 %52)
  %58 = select i1 %56, i32 0, i32 %57
  %59 = add nsw i32 %49, 1
  %60 = icmp slt i32 %49, -1
  %61 = tail call i32 @llvm.smin.i32(i32 %59, i32 %52)
  %62 = select i1 %60, i32 0, i32 %61
  %63 = add nsw i32 %49, 2
  %64 = icmp slt i32 %49, -2
  %65 = tail call i32 @llvm.smin.i32(i32 %63, i32 %52)
  %66 = select i1 %64, i32 0, i32 %65
  %67 = extractelement <2 x i32> %48, i64 1
  %68 = add nsw i32 %67, -1
  %69 = extractelement <2 x i32> %38, i64 1
  %70 = add nsw i32 %69, -1
  %71 = tail call i32 @llvm.smin.i32(i32 %68, i32 %70)
  %72 = icmp sgt i32 %67, 0
  %73 = select i1 %72, i32 %71, i32 0
  %74 = mul nsw i32 %73, %51
  %75 = icmp slt i32 %67, 0
  %76 = tail call i32 @llvm.smin.i32(i32 %67, i32 %70)
  %77 = select i1 %75, i32 0, i32 %76
  %78 = mul nsw i32 %77, %51
  %79 = add nsw i32 %67, 1
  %80 = icmp slt i32 %67, -1
  %81 = tail call i32 @llvm.smin.i32(i32 %79, i32 %70)
  %82 = select i1 %80, i32 0, i32 %81
  %83 = mul nsw i32 %82, %51
  %84 = add nsw i32 %67, 2
  %85 = icmp slt i32 %67, -2
  %86 = tail call i32 @llvm.smin.i32(i32 %84, i32 %70)
  %87 = select i1 %85, i32 0, i32 %86
  %88 = mul nsw i32 %87, %51
  %89 = mul nsw i32 %69, %51
  %90 = mul nsw i32 %25, %89
  %91 = mul nsw i32 %28, %89
  %92 = mul nsw i32 %32, %89
  %93 = mul nsw i32 %36, %89
  %94 = sitofp <2 x i32> %48 to <2 x float>
  %95 = fsub fast <2 x float> %41, %94
  %96 = sitofp i32 %20 to float
  %97 = fsub fast float %13, %96
  %98 = icmp eq i32 %3, 0
  br i1 %98, label %164, label %99

99:                                               ; preds = %6
  %100 = extractelement <2 x float> %95, i64 0
  %101 = fmul fast <2 x float> %95, %95
  %102 = extractelement <2 x float> %101, i64 0
  %103 = extractelement <2 x float> %95, i64 1
  %104 = fmul fast float %103, %103
  %105 = fmul fast float %97, %97
  %106 = shufflevector <2 x float> %95, <2 x float> %101, <2 x i32> <i32 0, i32 2>
  %107 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %108 = insertelement <2 x float> %107, float %104, i64 1
  %109 = fmul fast float %100, 0x3FC5555560000000
  %110 = fsub fast float 5.000000e-01, %109
  %111 = insertelement <2 x float> <float poison, float 5.000000e-01>, float %110, i64 0
  %112 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> zeroinitializer
  %113 = fmul fast <2 x float> %111, %112
  %114 = extractelement <2 x float> %113, i64 1
  %115 = fsub fast float 5.000000e-01, %114
  %116 = fmul fast float %115, %100
  %117 = fadd fast float %116, 5.000000e-01
  %118 = fadd fast <2 x float> %113, <float -5.000000e-01, float -1.000000e+00>
  %119 = fmul fast float %117, %100
  %120 = fmul fast float %103, 0x3FC5555560000000
  %121 = fsub fast float 5.000000e-01, %120
  %122 = fmul fast <2 x float> %118, %106
  %123 = fadd fast <2 x float> %122, <float 0x3FC5555560000000, float 0x3FE5555560000000>
  %124 = insertelement <2 x float> <float poison, float 5.000000e-01>, float %121, i64 0
  %125 = fmul fast <2 x float> %124, %107
  %126 = fadd fast <2 x float> %125, <float -5.000000e-01, float -1.000000e+00>
  %127 = fmul fast <2 x float> %126, %108
  %128 = fadd fast <2 x float> %127, <float 0x3FC5555560000000, float 0x3FE5555560000000>
  %129 = extractelement <2 x float> %125, i64 1
  %130 = fsub fast float 5.000000e-01, %129
  %131 = fmul fast float %130, %103
  %132 = fadd fast float %131, 5.000000e-01
  %133 = fmul fast float %132, %103
  %134 = insertelement <4 x float> poison, float %109, i64 0
  %135 = insertelement <4 x float> %134, float %119, i64 1
  %136 = insertelement <4 x float> %135, float %120, i64 2
  %137 = insertelement <4 x float> %136, float %133, i64 3
  %138 = insertelement <4 x float> <float poison, float 0x3FC5555560000000, float poison, float 0x3FC5555560000000>, float %102, i64 0
  %139 = insertelement <4 x float> %138, float %104, i64 2
  %140 = fmul fast <4 x float> %137, %139
  %141 = fadd fast <4 x float> %137, %139
  %142 = shufflevector <4 x float> %140, <4 x float> %141, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %143 = fmul fast float %97, 0x3FC5555560000000
  %144 = fsub fast float 5.000000e-01, %143
  %145 = insertelement <2 x float> <float poison, float 5.000000e-01>, float %144, i64 0
  %146 = insertelement <2 x float> poison, float %97, i64 0
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer
  %148 = fmul fast <2 x float> %145, %147
  %149 = extractelement <2 x float> %148, i64 1
  %150 = fsub fast float 5.000000e-01, %149
  %151 = fmul fast float %150, %97
  %152 = fadd fast float %151, 5.000000e-01
  %153 = fadd fast <2 x float> %148, <float -5.000000e-01, float -1.000000e+00>
  %154 = insertelement <2 x float> %147, float %105, i64 1
  %155 = fmul fast <2 x float> %153, %154
  %156 = fmul fast float %152, %97
  %157 = shufflevector <2 x float> %155, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %158 = insertelement <4 x float> %157, float %156, i64 2
  %159 = insertelement <4 x float> %158, float %143, i64 3
  %160 = insertelement <4 x float> <float 0x3FC5555560000000, float 0x3FE5555560000000, float 0x3FC5555560000000, float poison>, float %105, i64 3
  %161 = fadd fast <4 x float> %159, %160
  %162 = fmul fast <4 x float> %159, %160
  %163 = shufflevector <4 x float> %161, <4 x float> %162, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  br label %232

164:                                              ; preds = %6
  %165 = shufflevector <2 x float> %95, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %166 = extractelement <2 x float> %95, i64 0
  %167 = fmul fast float %166, 1.500000e+00
  %168 = fadd fast float %167, -2.500000e+00
  %169 = fmul fast <2 x float> %95, %95
  %170 = shufflevector <2 x float> %169, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %171 = extractelement <2 x float> %169, i64 0
  %172 = fmul fast float %168, %171
  %173 = shufflevector <4 x float> <float poison, float 1.000000e+00, float poison, float poison>, <4 x float> %165, <2 x i32> <i32 4, i32 1>
  %174 = fsub fast float 2.000000e+00, %167
  %175 = extractelement <2 x float> %95, i64 1
  %176 = fmul fast float %175, 1.500000e+00
  %177 = fadd fast float %176, -2.500000e+00
  %178 = fsub fast float 2.000000e+00, %176
  %179 = insertelement <4 x float> <float 5.000000e-01, float poison, float 5.000000e-01, float poison>, float %174, i64 1
  %180 = insertelement <4 x float> %179, float %178, i64 3
  %181 = fmul fast <4 x float> %180, %165
  %182 = extractelement <4 x float> %181, i64 0
  %183 = fsub fast float 1.000000e+00, %182
  %184 = fmul fast float %183, %166
  %185 = fadd fast float %184, -5.000000e-01
  %186 = insertelement <2 x float> poison, float %185, i64 0
  %187 = insertelement <2 x float> %186, float %172, i64 1
  %188 = fmul fast <2 x float> %187, %173
  %189 = fadd fast <2 x float> %187, %173
  %190 = shufflevector <2 x float> %188, <2 x float> %189, <2 x i32> <i32 0, i32 3>
  %191 = fadd fast <4 x float> %181, <float -5.000000e-01, float 5.000000e-01, float -5.000000e-01, float 5.000000e-01>
  %192 = extractelement <4 x float> %181, i64 2
  %193 = fsub fast float 1.000000e+00, %192
  %194 = fmul fast float %97, 1.500000e+00
  %195 = fadd fast float %194, -2.500000e+00
  %196 = fsub fast float 2.000000e+00, %194
  %197 = insertelement <2 x float> %95, float %193, i64 0
  %198 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %199 = fmul fast <2 x float> %197, %198
  %200 = insertelement <2 x float> <float -5.000000e-01, float poison>, float %177, i64 1
  %201 = fadd fast <2 x float> %199, %200
  %202 = fmul fast <2 x float> %199, %200
  %203 = shufflevector <2 x float> %201, <2 x float> %202, <2 x i32> <i32 0, i32 3>
  %204 = shufflevector <2 x float> %95, <2 x float> <float poison, float 1.000000e+00>, <2 x i32> <i32 1, i32 3>
  %205 = fmul fast <2 x float> %203, %204
  %206 = fadd fast <2 x float> %203, %204
  %207 = shufflevector <2 x float> %205, <2 x float> %206, <2 x i32> <i32 0, i32 3>
  %208 = shufflevector <2 x float> %199, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 1, i32 poison>
  %209 = shufflevector <2 x float> %95, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
  %210 = shufflevector <4 x float> %208, <4 x float> %209, <4 x i32> <i32 poison, i32 4, i32 2, i32 5>
  %211 = shufflevector <4 x float> %170, <4 x float> %210, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %212 = fmul fast <4 x float> %191, %211
  %213 = fmul fast float %97, 5.000000e-01
  %214 = fsub fast float 1.000000e+00, %213
  %215 = fmul fast float %214, %97
  %216 = fmul fast float %97, %97
  %217 = fmul fast float %196, %97
  %218 = insertelement <4 x float> poison, float %215, i64 0
  %219 = insertelement <4 x float> %218, float %216, i64 1
  %220 = insertelement <4 x float> %219, float %217, i64 2
  %221 = insertelement <4 x float> %220, float %213, i64 3
  %222 = insertelement <4 x float> <float -5.000000e-01, float poison, float 5.000000e-01, float -5.000000e-01>, float %195, i64 1
  %223 = fadd fast <4 x float> %221, %222
  %224 = fmul fast <4 x float> %221, %222
  %225 = shufflevector <4 x float> %223, <4 x float> %224, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  %226 = insertelement <4 x float> <float poison, float 1.000000e+00, float poison, float poison>, float %97, i64 0
  %227 = insertelement <4 x float> %226, float %216, i64 3
  %228 = shufflevector <4 x float> %227, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>
  %229 = fmul fast <4 x float> %225, %228
  %230 = fadd fast <4 x float> %225, %228
  %231 = shufflevector <4 x float> %229, <4 x float> %230, <4 x i32> <i32 0, i32 5, i32 2, i32 3>
  br label %232

232:                                              ; preds = %164, %99
  %233 = phi <2 x float> [ %123, %99 ], [ %190, %164 ]
  %234 = phi <2 x float> [ %128, %99 ], [ %207, %164 ]
  %235 = phi <4 x float> [ %163, %99 ], [ %231, %164 ]
  %236 = phi <4 x float> [ %142, %99 ], [ %212, %164 ]
  %237 = shufflevector <2 x float> %234, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %238 = shufflevector <2 x float> %233, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %239 = add nsw i32 %74, %55
  %240 = add nsw i32 %90, %239
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds float, ptr %0, i64 %241
  %243 = load float, ptr %242, align 4, !tbaa !5
  %244 = add nsw i32 %74, %58
  %245 = add nsw i32 %90, %244
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds float, ptr %0, i64 %246
  %248 = load float, ptr %247, align 4, !tbaa !5
  %249 = add nsw i32 %74, %62
  %250 = add nsw i32 %90, %249
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds float, ptr %0, i64 %251
  %253 = load float, ptr %252, align 4, !tbaa !5
  %254 = add nsw i32 %74, %66
  %255 = add nsw i32 %90, %254
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds float, ptr %0, i64 %256
  %258 = load float, ptr %257, align 4, !tbaa !5
  %259 = add nsw i32 %78, %55
  %260 = add nsw i32 %90, %259
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds float, ptr %0, i64 %261
  %263 = load float, ptr %262, align 4, !tbaa !5
  %264 = add nsw i32 %78, %58
  %265 = add nsw i32 %90, %264
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds float, ptr %0, i64 %266
  %268 = load float, ptr %267, align 4, !tbaa !5
  %269 = add nsw i32 %78, %62
  %270 = add nsw i32 %90, %269
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds float, ptr %0, i64 %271
  %273 = load float, ptr %272, align 4, !tbaa !5
  %274 = add nsw i32 %78, %66
  %275 = add nsw i32 %90, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds float, ptr %0, i64 %276
  %278 = load float, ptr %277, align 4, !tbaa !5
  %279 = add nsw i32 %83, %55
  %280 = add nsw i32 %90, %279
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds float, ptr %0, i64 %281
  %283 = load float, ptr %282, align 4, !tbaa !5
  %284 = add nsw i32 %83, %58
  %285 = add nsw i32 %90, %284
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds float, ptr %0, i64 %286
  %288 = load float, ptr %287, align 4, !tbaa !5
  %289 = add nsw i32 %83, %62
  %290 = add nsw i32 %90, %289
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds float, ptr %0, i64 %291
  %293 = load float, ptr %292, align 4, !tbaa !5
  %294 = add nsw i32 %83, %66
  %295 = add nsw i32 %90, %294
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds float, ptr %0, i64 %296
  %298 = load float, ptr %297, align 4, !tbaa !5
  %299 = add nsw i32 %88, %55
  %300 = add nsw i32 %90, %299
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds float, ptr %0, i64 %301
  %303 = load float, ptr %302, align 4, !tbaa !5
  %304 = add nsw i32 %88, %58
  %305 = add nsw i32 %90, %304
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds float, ptr %0, i64 %306
  %308 = load float, ptr %307, align 4, !tbaa !5
  %309 = add nsw i32 %88, %62
  %310 = add nsw i32 %90, %309
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds float, ptr %0, i64 %311
  %313 = load float, ptr %312, align 4, !tbaa !5
  %314 = add nsw i32 %88, %66
  %315 = add nsw i32 %90, %314
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds float, ptr %0, i64 %316
  %318 = load float, ptr %317, align 4, !tbaa !5
  %319 = add nsw i32 %239, %91
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds float, ptr %0, i64 %320
  %322 = load float, ptr %321, align 4, !tbaa !5
  %323 = add nsw i32 %244, %91
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds float, ptr %0, i64 %324
  %326 = load float, ptr %325, align 4, !tbaa !5
  %327 = add nsw i32 %249, %91
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds float, ptr %0, i64 %328
  %330 = load float, ptr %329, align 4, !tbaa !5
  %331 = add nsw i32 %254, %91
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds float, ptr %0, i64 %332
  %334 = load float, ptr %333, align 4, !tbaa !5
  %335 = add nsw i32 %91, %259
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds float, ptr %0, i64 %336
  %338 = load float, ptr %337, align 4, !tbaa !5
  %339 = add nsw i32 %91, %264
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds float, ptr %0, i64 %340
  %342 = load float, ptr %341, align 4, !tbaa !5
  %343 = add nsw i32 %91, %269
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds float, ptr %0, i64 %344
  %346 = load float, ptr %345, align 4, !tbaa !5
  %347 = add nsw i32 %91, %274
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds float, ptr %0, i64 %348
  %350 = load float, ptr %349, align 4, !tbaa !5
  %351 = add nsw i32 %279, %91
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds float, ptr %0, i64 %352
  %354 = load float, ptr %353, align 4, !tbaa !5
  %355 = add nsw i32 %284, %91
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds float, ptr %0, i64 %356
  %358 = load float, ptr %357, align 4, !tbaa !5
  %359 = add nsw i32 %289, %91
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds float, ptr %0, i64 %360
  %362 = load float, ptr %361, align 4, !tbaa !5
  %363 = add nsw i32 %294, %91
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds float, ptr %0, i64 %364
  %366 = load float, ptr %365, align 4, !tbaa !5
  %367 = add nsw i32 %299, %91
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds float, ptr %0, i64 %368
  %370 = load float, ptr %369, align 4, !tbaa !5
  %371 = add nsw i32 %304, %91
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds float, ptr %0, i64 %372
  %374 = load float, ptr %373, align 4, !tbaa !5
  %375 = add nsw i32 %309, %91
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds float, ptr %0, i64 %376
  %378 = load float, ptr %377, align 4, !tbaa !5
  %379 = add nsw i32 %314, %91
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds float, ptr %0, i64 %380
  %382 = load float, ptr %381, align 4, !tbaa !5
  %383 = add nsw i32 %92, %239
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds float, ptr %0, i64 %384
  %386 = load float, ptr %385, align 4, !tbaa !5
  %387 = add nsw i32 %92, %244
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds float, ptr %0, i64 %388
  %390 = load float, ptr %389, align 4, !tbaa !5
  %391 = add nsw i32 %92, %249
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds float, ptr %0, i64 %392
  %394 = load float, ptr %393, align 4, !tbaa !5
  %395 = add nsw i32 %92, %254
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds float, ptr %0, i64 %396
  %398 = load float, ptr %397, align 4, !tbaa !5
  %399 = add nsw i32 %92, %259
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds float, ptr %0, i64 %400
  %402 = load float, ptr %401, align 4, !tbaa !5
  %403 = add nsw i32 %92, %264
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds float, ptr %0, i64 %404
  %406 = load float, ptr %405, align 4, !tbaa !5
  %407 = add nsw i32 %92, %269
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds float, ptr %0, i64 %408
  %410 = load float, ptr %409, align 4, !tbaa !5
  %411 = add nsw i32 %92, %274
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds float, ptr %0, i64 %412
  %414 = load float, ptr %413, align 4, !tbaa !5
  %415 = add nsw i32 %92, %279
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds float, ptr %0, i64 %416
  %418 = load float, ptr %417, align 4, !tbaa !5
  %419 = add nsw i32 %92, %284
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds float, ptr %0, i64 %420
  %422 = load float, ptr %421, align 4, !tbaa !5
  %423 = add nsw i32 %92, %289
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds float, ptr %0, i64 %424
  %426 = load float, ptr %425, align 4, !tbaa !5
  %427 = add nsw i32 %92, %294
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds float, ptr %0, i64 %428
  %430 = load float, ptr %429, align 4, !tbaa !5
  %431 = add nsw i32 %92, %299
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds float, ptr %0, i64 %432
  %434 = load float, ptr %433, align 4, !tbaa !5
  %435 = add nsw i32 %92, %304
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds float, ptr %0, i64 %436
  %438 = load float, ptr %437, align 4, !tbaa !5
  %439 = add nsw i32 %92, %309
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds float, ptr %0, i64 %440
  %442 = load float, ptr %441, align 4, !tbaa !5
  %443 = add nsw i32 %92, %314
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds float, ptr %0, i64 %444
  %446 = load float, ptr %445, align 4, !tbaa !5
  %447 = add nsw i32 %93, %239
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds float, ptr %0, i64 %448
  %450 = load float, ptr %449, align 4, !tbaa !5
  %451 = add nsw i32 %93, %244
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds float, ptr %0, i64 %452
  %454 = load float, ptr %453, align 4, !tbaa !5
  %455 = add nsw i32 %93, %249
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds float, ptr %0, i64 %456
  %458 = load float, ptr %457, align 4, !tbaa !5
  %459 = add nsw i32 %93, %254
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds float, ptr %0, i64 %460
  %462 = load float, ptr %461, align 4, !tbaa !5
  %463 = add nsw i32 %93, %259
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds float, ptr %0, i64 %464
  %466 = load float, ptr %465, align 4, !tbaa !5
  %467 = add nsw i32 %93, %264
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds float, ptr %0, i64 %468
  %470 = load float, ptr %469, align 4, !tbaa !5
  %471 = add nsw i32 %93, %269
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds float, ptr %0, i64 %472
  %474 = load float, ptr %473, align 4, !tbaa !5
  %475 = add nsw i32 %93, %274
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds float, ptr %0, i64 %476
  %478 = load float, ptr %477, align 4, !tbaa !5
  %479 = add nsw i32 %93, %279
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds float, ptr %0, i64 %480
  %482 = load float, ptr %481, align 4, !tbaa !5
  %483 = add nsw i32 %93, %284
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds float, ptr %0, i64 %484
  %486 = load float, ptr %485, align 4, !tbaa !5
  %487 = add nsw i32 %93, %289
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds float, ptr %0, i64 %488
  %490 = load float, ptr %489, align 4, !tbaa !5
  %491 = add nsw i32 %93, %294
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds float, ptr %0, i64 %492
  %494 = load float, ptr %493, align 4, !tbaa !5
  %495 = add nsw i32 %93, %299
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds float, ptr %0, i64 %496
  %498 = load float, ptr %497, align 4, !tbaa !5
  %499 = add nsw i32 %93, %304
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds float, ptr %0, i64 %500
  %502 = load float, ptr %501, align 4, !tbaa !5
  %503 = add nsw i32 %93, %309
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds float, ptr %0, i64 %504
  %506 = load float, ptr %505, align 4, !tbaa !5
  %507 = add nsw i32 %93, %314
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds float, ptr %0, i64 %508
  %510 = load float, ptr %509, align 4, !tbaa !5
  %511 = insertelement <4 x float> poison, float %268, i64 0
  %512 = insertelement <4 x float> %511, float %322, i64 1
  %513 = insertelement <4 x float> %512, float %406, i64 2
  %514 = insertelement <4 x float> %513, float %450, i64 3
  %515 = shufflevector <2 x float> %233, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %516 = fmul fast <4 x float> %514, %515
  %517 = insertelement <4 x float> poison, float %263, i64 0
  %518 = insertelement <4 x float> %517, float %326, i64 1
  %519 = insertelement <4 x float> %518, float %402, i64 2
  %520 = insertelement <4 x float> %519, float %454, i64 3
  %521 = fmul fast <4 x float> %520, %238
  %522 = fadd fast <4 x float> %521, %516
  %523 = insertelement <4 x float> poison, float %273, i64 0
  %524 = insertelement <4 x float> %523, float %330, i64 1
  %525 = insertelement <4 x float> %524, float %410, i64 2
  %526 = insertelement <4 x float> %525, float %458, i64 3
  %527 = shufflevector <4 x float> %236, <4 x float> poison, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %528 = fmul fast <4 x float> %526, %527
  %529 = fadd fast <4 x float> %522, %528
  %530 = insertelement <4 x float> poison, float %278, i64 0
  %531 = insertelement <4 x float> %530, float %334, i64 1
  %532 = insertelement <4 x float> %531, float %414, i64 2
  %533 = insertelement <4 x float> %532, float %462, i64 3
  %534 = shufflevector <4 x float> %236, <4 x float> poison, <4 x i32> zeroinitializer
  %535 = fmul fast <4 x float> %533, %534
  %536 = fadd fast <4 x float> %529, %535
  %537 = shufflevector <2 x float> %234, <2 x float> poison, <4 x i32> <i32 1, i32 0, i32 1, i32 0>
  %538 = fmul fast <4 x float> %536, %537
  %539 = insertelement <4 x float> poison, float %248, i64 0
  %540 = insertelement <4 x float> %539, float %338, i64 1
  %541 = insertelement <4 x float> %540, float %390, i64 2
  %542 = insertelement <4 x float> %541, float %466, i64 3
  %543 = fmul fast <4 x float> %542, %515
  %544 = insertelement <4 x float> poison, float %243, i64 0
  %545 = insertelement <4 x float> %544, float %342, i64 1
  %546 = insertelement <4 x float> %545, float %386, i64 2
  %547 = insertelement <4 x float> %546, float %470, i64 3
  %548 = fmul fast <4 x float> %547, %238
  %549 = fadd fast <4 x float> %548, %543
  %550 = insertelement <4 x float> poison, float %253, i64 0
  %551 = insertelement <4 x float> %550, float %346, i64 1
  %552 = insertelement <4 x float> %551, float %394, i64 2
  %553 = insertelement <4 x float> %552, float %474, i64 3
  %554 = fmul fast <4 x float> %553, %527
  %555 = fadd fast <4 x float> %549, %554
  %556 = insertelement <4 x float> poison, float %258, i64 0
  %557 = insertelement <4 x float> %556, float %350, i64 1
  %558 = insertelement <4 x float> %557, float %398, i64 2
  %559 = insertelement <4 x float> %558, float %478, i64 3
  %560 = fmul fast <4 x float> %559, %534
  %561 = fadd fast <4 x float> %555, %560
  %562 = fmul fast <4 x float> %561, %237
  %563 = fadd fast <4 x float> %562, %538
  %564 = insertelement <4 x float> poison, float %288, i64 0
  %565 = insertelement <4 x float> %564, float %354, i64 1
  %566 = insertelement <4 x float> %565, float %422, i64 2
  %567 = insertelement <4 x float> %566, float %482, i64 3
  %568 = fmul fast <4 x float> %567, %515
  %569 = insertelement <4 x float> poison, float %283, i64 0
  %570 = insertelement <4 x float> %569, float %358, i64 1
  %571 = insertelement <4 x float> %570, float %418, i64 2
  %572 = insertelement <4 x float> %571, float %486, i64 3
  %573 = fmul fast <4 x float> %572, %238
  %574 = fadd fast <4 x float> %573, %568
  %575 = insertelement <4 x float> poison, float %293, i64 0
  %576 = insertelement <4 x float> %575, float %362, i64 1
  %577 = insertelement <4 x float> %576, float %426, i64 2
  %578 = insertelement <4 x float> %577, float %490, i64 3
  %579 = fmul fast <4 x float> %578, %527
  %580 = fadd fast <4 x float> %574, %579
  %581 = insertelement <4 x float> poison, float %298, i64 0
  %582 = insertelement <4 x float> %581, float %366, i64 1
  %583 = insertelement <4 x float> %582, float %430, i64 2
  %584 = insertelement <4 x float> %583, float %494, i64 3
  %585 = fmul fast <4 x float> %584, %534
  %586 = fadd fast <4 x float> %580, %585
  %587 = shufflevector <4 x float> %236, <4 x float> poison, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %588 = fmul fast <4 x float> %586, %587
  %589 = fadd fast <4 x float> %563, %588
  %590 = insertelement <4 x float> poison, float %308, i64 0
  %591 = insertelement <4 x float> %590, float %370, i64 1
  %592 = insertelement <4 x float> %591, float %438, i64 2
  %593 = insertelement <4 x float> %592, float %498, i64 3
  %594 = fmul fast <4 x float> %593, %515
  %595 = insertelement <4 x float> poison, float %303, i64 0
  %596 = insertelement <4 x float> %595, float %374, i64 1
  %597 = insertelement <4 x float> %596, float %434, i64 2
  %598 = insertelement <4 x float> %597, float %502, i64 3
  %599 = fmul fast <4 x float> %598, %238
  %600 = fadd fast <4 x float> %599, %594
  %601 = insertelement <4 x float> poison, float %313, i64 0
  %602 = insertelement <4 x float> %601, float %378, i64 1
  %603 = insertelement <4 x float> %602, float %442, i64 2
  %604 = insertelement <4 x float> %603, float %506, i64 3
  %605 = fmul fast <4 x float> %604, %527
  %606 = fadd fast <4 x float> %600, %605
  %607 = insertelement <4 x float> poison, float %318, i64 0
  %608 = insertelement <4 x float> %607, float %382, i64 1
  %609 = insertelement <4 x float> %608, float %446, i64 2
  %610 = insertelement <4 x float> %609, float %510, i64 3
  %611 = fmul fast <4 x float> %610, %534
  %612 = fadd fast <4 x float> %606, %611
  %613 = shufflevector <4 x float> %236, <4 x float> poison, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %614 = fmul fast <4 x float> %612, %613
  %615 = fadd fast <4 x float> %589, %614
  %616 = fmul fast <4 x float> %615, %235
  %617 = tail call fast float @llvm.vector.reduce.fadd.v4f32(float -0.000000e+00, <4 x float> %616)
  br label %618

618:                                              ; preds = %4, %232
  %619 = phi float [ %617, %232 ], [ 0.000000e+00, %4 ]
  ret float %619
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.vector.reduce.fadd.v4f32(float, <4 x float>) #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !10, i64 0}
!10 = !{!"int", !7, i64 0}
