; ModuleID = 'blender/source/blender/blenlib/intern/noise.c'
source_filename = "blender/source/blender/blenlib/intern/noise.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@hash = dso_local local_unnamed_addr constant [512 x i8] c"\A2\A0\19;\F8\EB\AA\EE\F3\1Cg(\1D\ED\00\DE\95.\DC?:\825Ml\BA6\D0\F6\0Cy2\D1Y\F4\08\8Bc\89/\B8\B4\97\83\F2\8F\18\C7Q\14e\87H B\A8\80\B5@\13\B2\22~W\BC\7Fk\9D\86L\C8\DB|\D5%NZUtP\CD\B3z\BB\C3\CB\B6\E2\E4\EC\FD\98\0B\96\D3\9E\\\A1d\F1\81a\E1\C4$rI\8C\90K\8448\ABx\CA\1F\01\D7\93\11\C1X\A91\F9Dm\BF3\9C_\09\94\A3\85\06\C6\9A\1E{F\150'+\1Bq<[\D6ob\ACO\C2\C0\0E\B1#\A7\DFG\B0wi\05\E9\E6\E7vs\0F\FEn\9BV\EF\12\A57\FC\AE\D9\03\8E\DD\10\B9\CE\C9\8D\DA*\BDh\17\9F\BE\D4\0A\CC\D2\E8C=p\B7\02}\99\D8\0D`\8A\04,>\92\E5\AFS\07\E0)\A6\C5\E3\F5\F7JA&j\16^R-!\AD\F0\91\FF\EAT\FAf\1AE9\CFu\A4\88\FB]\A2\A0\19;\F8\EB\AA\EE\F3\1Cg(\1D\ED\00\DE\95.\DC?:\825Ml\BA6\D0\F6\0Cy2\D1Y\F4\08\8Bc\89/\B8\B4\97\83\F2\8F\18\C7Q\14e\87H B\A8\80\B5@\13\B2\22~W\BC\7Fk\9D\86L\C8\DB|\D5%NZUtP\CD\B3z\BB\C3\CB\B6\E2\E4\EC\FD\98\0B\96\D3\9E\\\A1d\F1\81a\E1\C4$rI\8C\90K\8448\ABx\CA\1F\01\D7\93\11\C1X\A91\F9Dm\BF3\9C_\09\94\A3\85\06\C6\9A\1E{F\150'+\1Bq<[\D6ob\ACO\C2\C0\0E\B1#\A7\DFG\B0wi\05\E9\E6\E7vs\0F\FEn\9BV\EF\12\A57\FC\AE\D9\03\8E\DD\10\B9\CE\C9\8D\DA*\BDh\17\9F\BE\D4\0A\CC\D2\E8C=p\B7\02}\99\D8\0D`\8A\04,>\92\E5\AFS\07\E0)\A6\C5\E3\F5\F7JA&j\16^R-!\AD\F0\91\FF\EAT\FAf\1AE9\CFu\A4\88\FB]", align 16
@hashvectf = dso_local local_unnamed_addr constant [768 x float] [float 0x3FD59F01C0000000, float 0x3FE6E6FF80000000, float 0xBFE38EFFE0000000, float 0xBFEE358080000000, float 0xBFD4E6FF80000000, float 0xBFA75C0760000000, float 0xBFB9DFFC60000000, float 0xBFDAA70080000000, float 0xBFECE97F20000000, float 0x3FE993C040000000, float 0x3FDF9F7F80000000, float 0xBFD5E27E00000000, float 0xBFEB594080000000, float 0x3FE093C040000000, float 0x3FA1600F40000000, float 0x3FDB357E60000000, float 0xBFDC05FF20000000, float 0xBFE958FF80000000, float 0xBFD6F90100000000, float 0x3FE31B0040000000, float 0x3FE6F4C0A0000000, float 0xBFEF8880E0000000, float 0x3FC285FD00000000, float 0x3FB6DBF8C0000000, float 0xBFE341BFC0000000, float 0xBFD595FEE0000000, float 0xBFE72A3F00000000, float 0xBFDCCB8180000000, float 0x3FE3064020000000, float 0x3FE5530060000000, float 0x3FCAAA0020000000, float 0xBFBB9FFD60000000, float 0x3FEF1B3F20000000, float 0x3FE268FF40000000, float 0x3FAEF00680000000, float 0x3FEA19BF60000000, float 0x3FD2C67E00000000, float 0xBFEC05C040000000, float 0xBFD88A7E80000000, float 0x3FD2CCFF20000000, float 0x3FDDCEFEE0000000, float 0x3FEAB5BF60000000, float 0xBFEB127F60000000, float 0xBFCDDFFC60000000, float 0xBFDEAD81A0000000, float 0xBFBDA5FC80000000, float 0x3FC24F00E0000000, float 0xBFEF73FFA0000000, float 0x3FCA32FCA0000000, float 0xBFEE5E80C0000000, float 0xBFCEA8FC00000000, float 0x3FEE4B7F60000000, float 0xBFD0E48200000000, float 0x3FC797FE80000000, float 0xBFCE280280000000, float 0x3FE25CC000000000, float 0x3FE9193F60000000, float 0x3FCA130160000000, float 0xBFD7D2FE40000000, float 0xBFECF9BFE0000000, float 0x3FE8394100000000, float 0xBFE4D53F00000000, float 0x3FAC500500000000, float 0x3FDFDC0120000000, float 0x3FEA11FF80000000, float 0xBFD307FEE0000000, float 0xBFC4C100E0000000, float 0x3FB061FA00000000, float 0xBFEF827FA0000000, float 0xBFD5127F60000000, float 0x3FEAB33FC0000000, float 0x3FDC487FC0000000, float 0x3FE685C040000000, float 0xBFE0DD80E0000000, float 0xBFDE7A80C0000000, float 0x3FEE9B0040000000, float 0x3FD107FEE0000000, float 0x3FBEA9F7C0000000, float 0x3FDEBA7FC0000000, float 0x3FDEE6FF80000000, float 0x3FE76F0060000000, float 0xBFC7D90180000000, float 0x3FEEC23FA0000000, float -2.031250e-01, float 0xBFE7F37FC0000000, float 0xBFE5057F40000000, float 0xBFB723FEE0000000, float 0xBFB5C5F7C0000000, float 0xBFC52702A0000000, float 0x3FEF710020000000, float 0xBFE89F7F80000000, float 0x3FE41A0060000000, float 0xBFBD7FF9C0000000, float 0x3FD8857F40000000, float 0x3FE13480A0000000, float 0x3FE808BFC0000000, float 0x3FE3BA40E0000000, float 0xBFE5644100000000, float 0xBFDA9E7FC0000000, float 0xBFD0A37F00000000, float 0xBFE4290040000000, float 0x3FE76A7F00000000, float 0x3FE2453F40000000, float 0xBFB68405C0000000, float 0x3FEA1E7FC0000000, float 0xBFDD5000C0000000, float 0x3F97CFE580000000, float 0x3FEC6F8060000000, float 0xBFC91C0020000000, float 0x3FEF400100000000, float 0xBFB699FA20000000, float 0xBFD0E37DE0000000, float 0xBFE656FFC0000000, float 0xBFE54BFF40000000, float 0x3FDBFA00E0000000, float 0xBFEC8D8020000000, float 0xBFBCE00080000000, float 0xBFE3E4C0E0000000, float 0xBFCD7EFE00000000, float 0x3FE7F440A0000000, float 0x3FCDC00100000000, float 0x3FECD180A0000000, float 0xBFD7810200000000, float 0x3FCC73FFA0000000, float 0xBFE97A00E0000000, float 0x3FE201FFC0000000, float 0xBFE54BC060000000, float 0xBFE79ABF40000000, float 0x3FBD2007E0000000, float 0x3FE571BF00000000, float 0x3FE68DBF00000000, float 0x3FCDC60020000000, float 0x3FECA8BF40000000, float 0x3FDB810200000000, float 0xBFBD5A07C0000000, float 0xBFBD95FEE0000000, float 0xBFDE59FF40000000, float 0x3FEBED80A0000000, float 0x3FE3E5FFA0000000, float 0x3FE3540040000000, float 0xBFDFE681A0000000, float 0xBFEAA17F40000000, float 0x3F8A1FD160000000, float 0x3FE1BC7F80000000, float 0xBFE67ABFC0000000, float 0x3FE69780C0000000, float 0xBFB6F40600000000, float 0xBFE62500E0000000, float 0x3FE4C70000000000, float 0x3FD42F7F40000000, float 0xBFC6870120000000, float 0xBFEF4BC060000000, float 0x3FBCA3F8A0000000, float 0x3FB8D1FA40000000, float 0xBFA95BFF00000000, float 0x3FEFCF00E0000000, float 0x3FE4543F20000000, float 0xBFE369FF00000000, float 0xBFDE93FF20000000, float 0xBFD0B88000000000, float 0xBFE3700040000000, float 0xBFE80140E0000000, float 0x3FEF76FF40000000, float 0x3FC52D01C0000000, float 0x3FB371FBC0000000, float 0xBFD3187E80000000, float 0x3FD9DC7F00000000, float 0xBFEBAB4100000000, float 0xBFE4700040000000, float 0x3FE03F4020000000, float 0x3FE2804100000000, float 0x3FD8D87F80000000, float 0x3FDA5F80A0000000, float 0x3FEA603F80000000, float 0x3FE1CC4040000000, float 0xBFCABB01C0000000, float 0x3FE9BD4060000000, float 0x3FE8E8FF40000000, float 0x3FE1FC00A0000000, float 0x3FD1E37DE0000000, float 0xBFE3BAFFC0000000, float 0x3FE9057F40000000, float 0xBFB76DFC60000000, float 0x3FC91FFF80000000, float 0x3FAA240320000000, float 0x3FEF558000000000, float 0xBFBF080300000000, float 0x3FCA83FD60000000, float 0xBFEF1040C0000000, float 0xBFC6320100000000, float 0xBFD89F7F80000000, float 0x3FED027FA0000000, float 0x3FC4ABFFC0000000, float 0xBFE724BFE0000000, float 0xBFE57C00A0000000, float 0x3FC6D8FD60000000, float 0xBF79806F20000000, float 0xBFEF7C00A0000000, float 0xBFC0220360000000, float 0x3FC4390420000000, float 0x3FEF56C0E0000000, float 0x3FEA934040000000, float 0xBF99680E00000000, float 0x3FE1CE8100000000, float 0xBFE0530060000000, float 0xBFE89F40A0000000, float 0x3FD89780C0000000, float 0x3FEA0E4100000000, float 0x3FC99D0200000000, float 0xBFE16FBF40000000, float 0xBFBCD002E0000000, float 0xBFD92C01E0000000, float 0xBFED32BFE0000000, float 0x3FE1FB00C0000000, float 0x3FC37C02A0000000, float 0xBFEA047F60000000, float 0x3FC97603A0000000, float 0xBFD04A01A0000000, float 0xBFEE48C0C0000000, float 0xBFDA60FE40000000, float 0x3FE61C8000000000, float 0xBFE3007FE0000000, float 0xBFDA107FA0000000, float 0x3FD4C50040000000, float 0x3FEB513F80000000, float 0xBFE6160100000000, float 0x3FD76E7E60000000, float 0xBFE3F8C000000000, float 0xBFDB6A0120000000, float 0x3FEB0340A0000000, float 0xBFD4A07F60000000, float 0xBFCB2BFDC0000000, float 0xBFD30AFE60000000, float 0xBFEDC8C0C0000000, float 0xBFD179FEC0000000, float 0x3FE083FF60000000, float 0x3FE9FA3FC0000000, float 0x3FEDB4BF80000000, float 0x3FD7C8FFC0000000, float 0x3F7DA059A0000000, float 0x3FE92580C0000000, float 0xBFDEAB8200000000, float 0xBFD90281C0000000, float 0xBFE68E8000000000, float 0x3FAE2BF120000000, float 0x3FE69E40C0000000, float 0x3FC62CFD80000000, float 0x3FCA0F0200000000, float 0x3FEED58000000000, float 0x3FDB058140000000, float 0xBFECF00040000000, float 0xBFAFFBEFE0000000, float 0xBFD7408100000000, float 0xBFC75B0360000000, float 0x3FED3C4080000000, float 0x3FD041FEA0000000, float 0xBFE1AC7FC0000000, float 0xBFE967FF60000000, float 0xBFD27D8060000000, float 0xBFE880FFE0000000, float 0xBFE262BF20000000, float 0x3FADDBFCE0000000, float 0x3FD2A600C0000000, float 0x3FEE8DBF00000000, float 0x3FEE46BF00000000, float 0xBFD37381E0000000, float 0x3FBC7BFE80000000, float 0xBFB4020820000000, float 0x3FDC657FC0000000, float 0xBFEC9140A0000000, float 0x3FC74EFCC0000000, float 0x3FEC9ABF40000000, float 0x3FDA357E60000000, float 0xBFE5C50040000000, float 0xBFCB4E0120000000, float 0x3FE66FBF40000000, float 0x3FAFFBEFE0000000, float 0x3FEB2600C0000000, float 0xBFE0D20080000000, float 0xBFE7523F60000000, float 0xBFE48A00A0000000, float 0x3FCE81FDA0000000, float 0xBFEC304040000000, float 0x3FDB5EFEA0000000, float 0x3FC9F00260000000, float 0xBFE10A3F80000000, float 0xBFCB65FD80000000, float 0x3FEA343FA0000000, float 0x3FEE5E00E0000000, float 0xBFD3867F00000000, float 0x3FB461FA00000000, float 0x3FED9D40E0000000, float 0x3FD7FA7EC0000000, float 0x3FAC940BC0000000, float 0x3FEA450040000000, float 0x3FE21880A0000000, float 0x3FB4400760000000, float 0x3FD09081C0000000, float 0x3FB98BF800000000, float 0xBFEEBE4040000000, float 0xBFD2DB0140000000, float 0x3FED22FF00000000, float 0x3FD28EFFE0000000, float 0x3FC18CFC00000000, float 0x3FD47B80A0000000, float 0xBFEDFF3F00000000, float 0xBFED117F80000000, float 0x3FD6190080000000, float 0xBFCE2C01E0000000, float 0xBFEDF57F80000000, float 0x3FC1C2FC60000000, float 0x3FD4A80060000000, float 0x3FD775FF60000000, float 0x3FEDA14060000000, float 0xBFB733FC80000000, float 0x3FD3CB8180000000, float 0xBFE5FA80C0000000, float 0xBFE50BBF60000000, float 0x3FE56F3F60000000, float 0x3F99081C20000000, float 0x3FE7BEFF20000000, float 0xBFED603F80000000, float 0xBFAE440F20000000, float 0xBFD9177EA0000000, float 0x3FD7647FE0000000, float 0x3FDD93FF20000000, float 0xBFE9DA7F40000000, float 0x3FB557FFA0000000, float 0x3FEFE28020000000, float 0xBF8E4FFCA0000000, float 0x3FE300C100000000, float 0x3FD0337EC0000000, float 0xBFE8700040000000, float 0x3FEF3300E0000000, float 0xBFC52DFD60000000, float 0x3FC2FB00C0000000, float 0x3FED684060000000, float 0x3FC1930380000000, float 0x3FD7A67E80000000, float 0x3FD2E07E60000000, float 0x3FE63D4060000000, float 0x3FE4FBBFA0000000, float 0x3FEE2DC0A0000000, float 0x3FC388FCA0000000, float 0xBFD2E681A0000000, float 0x3FE2CF80E0000000, float 0xBFE324BFE0000000, float 0x3FE16C80C0000000, float 0x3FCA15FCC0000000, float 0x3FE5B400C0000000, float 0x3FE69780C0000000, float 0xBFDEA500E0000000, float 0xBFE5270080000000, float 0x3FE27C3F80000000, float 0x3FE7027FA0000000, float 0xBFC5BC01A0000000, float 0xBFE58FFFC0000000, float 0xBFC0EB0320000000, float 0xBFEEE3FFE0000000, float 0x3FCCCCFF20000000, float 0xBFEF6B80E0000000, float 0xBFC29003E0000000, float 0x3FBF3A0400000000, float 0x3FE86E3F80000000, float 0x3FE28D3F20000000, float 0x3FD2360060000000, float 0xBFEC94FF00000000, float 0x3FB465F960000000, float 0x3FDC517E80000000, float 0xBFE976FF40000000, float 0xBFE0C300A0000000, float 0x3FD3717E00000000, float 0x3FE784C060000000, float 0x3FE5B28100000000, float 0xBF7E7FB260000000, float 0x3FC3D90180000000, float 0x3FEF8F7FC0000000, float 0xBFACC404A0000000, float 0x3FD0837F80000000, float 0x3FE249C0A0000000, float 0xBFE8ED00C0000000, float 0xBFE5CF3FE0000000, float 0xBFE6777F20000000, float 0xBFCA620260000000, float 0xBFEECFBFC0000000, float 0xBFC6ADFF80000000, float 0x3FCA0FFDA0000000, float 0xBFDE2480E0000000, float 0xBFE07BBFA0000000, float 0x3FE6EA4000000000, float 0xBFE7B0C020000000, float 0x3FE2487FC0000000, float 0x3FD6A97E20000000, float 0xBFE1EC80C0000000, float 0xBFEA6640A0000000, float 0xBFB3320540000000, float 0xBFE0408100000000, float 0x3FE81A3F40000000, float 0x3FDAC00100000000, float 0xBFE0198060000000, float 0x3FA38800E0000000, float 0x3FEBA07F60000000, float 0x3FE30240C0000000, float 0x3FE58DBF00000000, float 0xBFDC24FEC0000000, float 0xBFBEAFFF40000000, float 0xBF76A05580000000, float 0xBFEFC48060000000, float 0x3FB92806A0000000, float 0xBFCB5D0320000000, float 0x3FEF19BF60000000, float 0xBFE3B33FC0000000, float 0x3FE49B3F20000000, float 0x3FDD1101C0000000, float 0x3FECB300E0000000, float 0xBFDC3A81E0000000, float 0x3FA0780FE0000000, float 0xBFE1C2BFA0000000, float 0x3FE8064020000000, float 0xBFD6EAFEE0000000, float 0x3FD9857F40000000, float 0x3FD3800220000000, float 0x3FEBAD7FA0000000, float 0xBFE7227F20000000, float 0x3FD36E0080000000, float 0x3FE3DB7F20000000, float 0xBFE456C0E0000000, float 0xBFE3E6FF80000000, float 0xBFDD448060000000, float 0xBFD2C47E40000000, float 0x3FB28405C0000000, float 0x3FEE8140E0000000, float 0xBFDF76FF40000000, float 0x3FE5273F80000000, float 0xBFE222FF00000000, float 0xBFD377FF20000000, float 0xBFE24E8100000000, float 0xBFE85FBF80000000, float 0x3FED0EFFE0000000, float 0xBFD9887EC0000000, float 0x3FC041FEA0000000, float 0xBFE0C180E0000000, float 0xBFE19700C0000000, float 0xBFE4D3BF20000000, float 0xBFEDDA7F40000000, float 0xBFC9950340000000, float 0x3FD3298020000000, float 0x3FB973FB80000000, float 0x3FC207FEE0000000, float 0x3FEF84FF40000000, float 0xBF94D013A0000000, float 0xBFEFFE0040000000, float 0xBF62FF4BA0000000, float 0x3FEE7C3F80000000, float 0x3FD1F97EE0000000, float 0xBFBDBC01A0000000, float 0xBFEF19BF60000000, float 0x3FB5240740000000, float 0x3FCC3400C0000000, float 0x3FE5183FA0000000, float 0x3FE691C080000000, float 0xBFD0AE8180000000, float 0x3FE7754080000000, float 0xBFC677FF20000000, float 0x3FE5067F00000000, float 0xBFE1C43F60000000, float 0x3FDB7CFE60000000, float 0xBFE6CA40A0000000, float 0x3FD9A07F60000000, float 0xBFECC13FE0000000, float 0x3FC6F501A0000000, float 0x3FE8074000000000, float 0xBFC935FC40000000, float 0x3FE42BC0E0000000, float 0x3FE9243FE0000000, float 0xBFE2380020000000, float 0x3FCEF3FDA0000000, float 0xBFAE280280000000, float 0xBFDDB3FEA0000000, float 0x3FEC47FFE0000000, float 0x3FC096FEC0000000, float 0xBFEE3EFF20000000, float 0x3FD32D01C0000000, float 0xBFD6E681A0000000, float 0x3FED0B8060000000, float 0x3FCC0FFDA0000000, float 0xBFEAF2C0E0000000, float 0xBFDC1A7E40000000, float 0xBFD406FF00000000, float 0xBFD41001E0000000, float 0x3FEB04C060000000, float 0x3FDBCE8100000000, float 0xBFCEE00080000000, float 0x3FAB43FA20000000, float 0x3FEF01FFC0000000, float 0x3FB059FB20000000, float 0x3FEA5840A0000000, float 0x3FE20C0060000000, float 0x3FDE7B80A0000000, float 0x3FEB96BFC0000000, float 0xBFC6150120000000, float 0x3FE3DEBFA0000000, float 0xBFD3147F20000000, float 0x3FE7328100000000, float 0x3FD026FE80000000, float 0xBFE7FABFC0000000, float 0xBFE39680E0000000, float 0xBFE27B3FA0000000, float 0x3FD8BD7F60000000, float 0x3FE701FFC0000000, float 0xBFDA0181E0000000, float 0xBFE79D7FE0000000, float 0x3FE13CFF60000000, float 0x3FA827FA20000000, float 0x3FE1CD4020000000, float 0x3FEA8C0060000000, float 0xBFE9B0FF20000000, float 0x3FE2CC7F40000000, float 0x3FB9E603E0000000, float 0xBFE6A5BFA0000000, float 0xBFE6973FC0000000, float 0x3F9B0FF100000000, float 0x3FD7FE7E20000000, float 0x3FE5E7FF60000000, float 0x3FE400C100000000, float 0x3FDE377E20000000, float 0x3FCAAD03E0000000, float 0xBFEB687F40000000, float 0xBFE67F8020000000, float 0xBFE2983FA0000000, float 0xBFDA3A81E0000000, float 0xBFDAB380C0000000, float 0xBFE78FFFC0000000, float 0x3FE10B3F60000000, float 0xBFDCAA0020000000, float 0xBFC9F6FD20000000, float 0xBFEBDD0100000000, float 0x3FB6420700000000, float 0xBFEFB17F00000000, float 0x3FBB69FD00000000, float 0x3FC782FD80000000, float 0x3F92C7FBA0000000, float 0xBFEF72FFE0000000, float 0x3FE1F0BF20000000, float 0xBFDB728200000000, float 0x3FE6AA3F00000000, float 0x3FD2FD7E40000000, float 0xBFEE7B80A0000000, float 0xBFB13404E0000000, float 0x3FC1610280000000, float 0x3FEFB04040000000, float 0x3F9EF80560000000, float 0xBFB19C0660000000, float 0x3FE4F37FC0000000, float 0x3FE8160100000000, float 0x3FE8674080000000, float 0xBFE1A80060000000, float 0x3FD59AFE20000000, float 0xBFEA3A40E0000000, float 0xBFDA177EA0000000, float 0x3FD9C200C0000000, float 0xBFE74A7F80000000, float 0xBFE19F7F80000000, float 0xBFDA2580C0000000, float 0xBFEB628020000000, float 0xBFDEB88000000000, float 0x3FC8ADFF80000000, float 0x3FE62E7F60000000, float 0xBFB44C05A0000000, float 0x3FE6EC3FC0000000, float 0x3FCCEDFE80000000, float 0x3FE4CDC020000000, float 0xBFE736BF40000000, float 0x3FCF93FF20000000, float 0x3FEE81FFC0000000, float 0xBFC636FC20000000, float 0xBFEF0D8020000000, float 0xBFCE9EFD80000000, float 0xBFA09BF9C0000000, float 0x3FC174FF80000000, float 0xBFD93C81A0000000, float 0x3FED147F20000000, float 0x3FEA05FF20000000, float 0x3FE1DC8100000000, float 0x3FC50A02C0000000, float 0x3FD9E37DE0000000, float 0x3FE191C080000000, float 0xBFE766FF80000000, float 0xBFD855FFE0000000, float 0xBFE2227F20000000, float 0x3FE7633F00000000, float 0x3F96B01000000000, float 0x3FEDD8FF80000000, float 0x3FD705FF20000000, float 0x3F80E02220000000, float 0x3FEFE3C100000000, float 0xBFB5120180000000, float 0x3FEE9CC100000000, float 0xBFB0B9FDC0000000, float 0xBFD2288060000000, float 0xBFE7CB4080000000, float 0x3F80CFE160000000, float 0x3FE564FFC0000000, float 0xBFEB81C0C0000000, float 0xBFE04F3FE0000000, float 0x3FA2500D60000000, float 0xBFEB458040000000, float 0x3FD7468020000000, float 0xBFD81001E0000000, float 0xBFC9D9FD40000000, float 0xBFEF10C0A0000000, float 0xBFC087FCC0000000, float 0x3FD41001E0000000, float 0x3FEE5080C0000000, float 0x3FB0C1FC80000000, float 0xBFD041FEA0000000, float 0xBFE0E77F60000000, float 0x3FE9ECBFC0000000, float 0x3FE4190080000000, float 0x3FE33C4080000000, float 0x3FDF9F7F80000000, float 0xBFDFA40100000000, float 0x3FEBC9C0A0000000, float 0x3FA36BF440000000, float 0x3FD1A40100000000, float 0xBFB62003A0000000, float 0x3FEEA27F20000000, float 0xBFC955FFE0000000, float 0x3FDE0281C0000000, float 0xBFEB8B3F60000000, float 0x3FECA8BF40000000, float 0x3FD98F81E0000000, float 0x3FC91001E0000000, float 0x3FE1F20000000000, float 0x3FEA667FA0000000, float 0xBFB1B80240000000, float 0x3FD377FF20000000, float 0xBFEB2EFF60000000, float 0x3FDB95FEE0000000, float 0x3FB8AC0840000000, float 0x3FEDF1BF00000000, float 0x3FD5B3FEA0000000, float 0xBFAA53FC00000000, float 0x3FDA2C7FC0000000, float 0xBFED278080000000, float 0x3FD525FEA0000000, float 0x3FEE2BC0E0000000, float 0xBFA5B402E0000000, float 0xBFDCF37FC0000000, float 0xBFE92A3F00000000, float 0x3FDAEA8120000000, float 0x3FC1310120000000, float 0xBFEDDF00A0000000, float 0xBFD5478000000000, float 0x3FE9A93F20000000, float 0xBFE2227F20000000, float 0xBFC82EFD40000000, float 0xBFEF9D40E0000000, float 0xBFBB2207A0000000, float 0x3FBCCDFAC0000000, float 0xBFCF3E0380000000, float 0x3FEC8D3F20000000, float 0xBFD84E7EE0000000, float 0xBFED74C0A0000000, float 0x3FCD52FC20000000, float 0xBFD43F8120000000, float 0x3FE8ECBFC0000000, float 0x3FD4DC7F00000000, float 0x3FE12480E0000000, float 0xBFED363F60000000, float 0x3FC7B4FE80000000, float 0xBFD7480200000000, float 0xBFC7A70080000000, float 0x3FE21780C0000000, float 0xBFE9B90000000000, float 0xBF92E7F700000000, float 0x3FBE99FA20000000, float 0x3FEFC38080000000, float 0xBFD09780C0000000, float 0xBFEDF08040000000, float 0x3FCEA8FC00000000, float 0xBFEA5BFF00000000, float 0xBFDCBE7F20000000, float 0xBFD623FEE0000000, float 0xBFDBB7FE00000000, float 0x3FE51ABF40000000, float 0x3FE3A8BF40000000, float 0xBFEA540040000000, float 0x3FD83EFF20000000, float 0xBFDB1D8200000000, float 0x3FE5FD8060000000, float 0xBFE5983FA0000000, float 0xBFD1357E60000000, float 0xBFCF8FFFC0000000, float 0xBFE9A07F60000000, float 0x3FE1767F40000000, float 0xBFE7558000000000, float 0xBFCA98FE60000000, float 0x3FE4DD0100000000, float 0x3FE4E9C020000000, float 0xBFE388BFC0000000, float 0xBFDCA20140000000, float 0x3FDF867F00000000, float 0xBF97E80380000000, float 0x3FEBD67FE0000000, float 0x3FE37D3F60000000, float 0x3F829FE000000000, float 0xBFE960BF60000000, float 0x3FEECCC040000000, float 0xBFD1598180000000, float 0xBF821FF2E0000000, float 0x3FD1048160000000, float 0xBF741FA760000000, float 0x3FEED8C080000000, float 0x3FE4D6FFC0000000, float 0x3FE1B73F40000000, float 0xBFE09B3F20000000, float 0x3FD1F47FA0000000, float 0xBFEAFB00C0000000, float 0x3FDD59FF40000000, float 0xBFC6700040000000, float 0xBFEF767F40000000, float 0x3FA9800A80000000, float 0x3FA217F420000000, float 0xBFEF5B7F20000000, float 0x3FC91800A0000000, float 0xBFEF7440A0000000, float 0x3FC5080300000000, float 0xBFB50E0220000000, float 0x3FCDEAFEE0000000, float 0xBFEF1CC100000000, float 0xBF74801F80000000, float 0xBFE7E97F20000000, float 0xBFE38FFFC0000000, float 0x3FD0AB0000000000, float 0x3FE4A8BF40000000, float 0x3FE2F7FF20000000, float 0x3FDECEFEE0000000, float 0x3FBE21FB00000000, float 0xBFEE628020000000, float 0xBFD29A8040000000, float 0xBFE11EC0C0000000, float 0xBFE95740C0000000, float 0xBFD2D60200000000, float 0xBFE411C080000000, float 0xBFCB72FFE0000000, float 0x3FE7F57F80000000, float 0xBFA8900C60000000, float 0xBFEA0800E0000000, float 0xBFE28C0060000000, float 0xBFC677FF20000000, float 0x3FDE8B7E40000000, float 0xBFEB8D3F20000000, float 0x3FE7A24040000000, float 0xBFDA8301A0000000, float 0xBFE104C060000000, float 0x3FE2007FE0000000, float 0xBFE687BFE0000000, float 0x3FDBBB01C0000000, float 0xBFE8288060000000, float 0x3FE4BC7F80000000, float 0xBFB9C00100000000, float 0x3FBD5E0720000000, float 0x3FA6CBFB20000000, float 0xBFEFC180E0000000, float 0x3FEEE97F20000000, float 0x3FCF57FFA0000000, float 0xBFB5300580000000], align 16
@hashpntf = internal unnamed_addr constant [768 x float] [float 0x3FE12E4D20000000, float 0x3F956ABDE0000000, float 0x3FE00BD660000000, float 0x3FCBB03E20000000, float 0x3FE08B8F20000000, float 0x3FEA51A440000000, float 0x3FEEE3DC40000000, float 0x3FD825E560000000, float 0x3FE5B86F40000000, float 0x3FE7D35000000000, float 0x3FB904E620000000, float 0x3FD95DE9C0000000, float 0x3FCFA450A0000000, float 0x3FE0AB3020000000, float 0x3FE3A0F0A0000000, float 0x3FE1591460000000, float 0x3FC2CAC4C0000000, float 0x3FD059EE80000000, float 0x3FE9F2A180000000, float 0x3FE46FBF40000000, float 0x3FEF623D00000000, float 0x3FD2B54E20000000, float 0x3FD6E89EC0000000, float 0x3FBD482380000000, float 0x3FEB906680000000, float 0x3FE425F640000000, float 0x3FE71EF740000000, float 0x3FE6D9EE80000000, float 0x3FA8DB6A20000000, float 0x3FB35EFA60000000, float 0x3FE213D320000000, float 0x3FC4BD44A0000000, float 0x3FABE2F7C0000000, float 0x3FDA59EA60000000, float 0x3FC4153360000000, float 0x3FEC67AFA0000000, float 0x3FE32E05C0000000, float 0x3FB301FB80000000, float 0x3FC5CBA300000000, float 0x3FCCE6FB40000000, float 0x3FD9296F60000000, float 0x3FD3494920000000, float 0x3FAD67FD40000000, float 0x3FD2CE6C00000000, float 0x3FDC55EF20000000, float 0x3FC3334400000000, float 0x3FD984D340000000, float 0x3FC7A06200000000, float 0x3FED495180000000, float 0x3FE4310560000000, float 0x3FEF2B55E0000000, float 0x3FBE02A780000000, float 0x3FE974E660000000, float 0x3FE86C7220000000, float 0x3FC45985A0000000, float 0x3FE3B80020000000, float 0x3FD00D8440000000, float 0x3FED025E20000000, float 0x3FD447A9E0000000, float 0x3FE5A378A0000000, float 0x3FCE0B4E20000000, float 0x3FE55D93C0000000, float 0x3FE959E840000000, float 0x3FD183D360000000, float 0x3FBE8E92E0000000, float 0x3FC97D1FE0000000, float 0x3FEB6A37A0000000, float 0x3FEA8383A0000000, float 0x3FECD2AE80000000, float 0x3FE6973960000000, float 0x3FE4597B40000000, float 0x3FEFA96F60000000, float 0x3F9BEA4EC0000000, float 0x3FD224FA80000000, float 0x3FBD097C80000000, float 0x3FD8D6E040000000, float 0x3FECCE3DE0000000, float 0x3FE4685FE0000000, float 0x3FDC155500000000, float 0x3FE6E54B40000000, float 0x3FA65ECC40000000, float 0x3FC9F01B80000000, float 0x3FD8367A00000000, float 0x3FDCD22000000000, float 0x3FDE327EE0000000, float 0x3FC2EB3560000000, float 0x3FED055100000000, float 0x3FE0C61100000000, float 0x3FE91E9080000000, float 0x3FAA5BFAE0000000, float 0x3FEC967AA0000000, float 0x3FE319C380000000, float 0x3FD1A40100000000, float 0x3FD90E0EC0000000, float 0x3FEB078FA0000000, float 0x3FBA6234A0000000, float 0x3FD077F6C0000000, float 0x3FE6AB2180000000, float 0x3FE0218380000000, float 0x3FC989C5E0000000, float 0x3FE5217F40000000, float 0x3FD8118C20000000, float 0x3FA3E81460000000, float 0x3FE1005A20000000, float 0x3FCBA9B060000000, float 0x3FC1C00100000000, float 0x3FED0C2E80000000, float 0x3FE9DB1640000000, float 0x3FE51B4BC0000000, float 0x3FED49D7C0000000, float 0x3FDCBDA520000000, float 0x3FE4116EC0000000, float 0x3FDEBB2780000000, float 0x3FD8615A80000000, float 0x3F934B9460000000, float 0x3FCB1C8640000000, float 0x3FE23AFDA0000000, float 0x3FB5113840000000, float 0x3FE6104920000000, float 0x3FE25681E0000000, float 0x3FE300E4A0000000, float 0x3FCBA88260000000, float 0x3FD7E1D640000000, float 0x3FBBAD8E40000000, float 0x3FE30EA7C0000000, float 0x3F964A59C0000000, float 0x3FD856C940000000, float 0x3FEE570A40000000, float 0x3FD82E6A80000000, float 0x3FD475F2C0000000, float 0x3FD42D0A20000000, float 0x3FEF213800000000, float 0x3FE95A46A0000000, float 0x3FDC815E40000000, float 0x3FEB0CE2E0000000, float 0x3FD7D1E540000000, float 0x3FB89D1700000000, float 0x3FE60F9B20000000, float 0x3FDB2220C0000000, float 0x3FAC816F00000000, float 0x3FBE3150E0000000, float 0x3FD5056C60000000, float 0x3FE362C780000000, float 0x3FE4377180000000, float 0x3FD7D1A220000000, float 0x3FCB5B4680000000, float 0x3FA0BE0DE0000000, float 0x3FDC9FDBE0000000, float 0x3FDC33CA40000000, float 0x3FE74FC620000000, float 0x3FD330CAA0000000, float 0x3FC3054AC0000000, float 0x3FE4C65840000000, float 0x3FDFE57960000000, float 0x3FA98F3EC0000000, float 0x3FDFC04C80000000, float 0x3FE36DB500000000, float 0x3FE200C740000000, float 0x3FEFB01860000000, float 0x3FE7AB4960000000, float 0x3FBBCF5F40000000, float 0x3FEF4D0DC0000000, float 0x3FCADB2F60000000, float 0x3FD08A3720000000, float 0x3FEC085D40000000, float 0x3FD3CAEA80000000, float 0x3FE338B6A0000000, float 0x3FE6D5C960000000, float 0x3FE2768380000000, float 0x3FE4865D80000000, float 0x3FEB536500000000, float 0x3F9DDF86E0000000, float 0x3FDAC254A0000000, float 0x3FE29C68E0000000, float 0x3F8130DFA0000000, float 0x3FE2E07E60000000, float 0x3FE52B9D40000000, float 0x3FEF56A380000000, float 0x3FD1A57640000000, float 0x3FBC71A3C0000000, float 0x3FDC30B180000000, float 0x3FBEEF4E00000000, float 0x3FE0B0F6A0000000, float 0x3FE4BEF060000000, float 0x3FD2367A00000000, float 0x3FCA2D16C0000000, float 0x3FC39EE020000000, float 0x3FEA517620000000, float 0x3FD34013E0000000, float 0x3FD3733220000000, float 0x3FD7578600000000, float 0x3FCAC1C1E0000000, float 0x3FED56AE00000000, float 0x3FECCECEA0000000, float 0x3FE338CFC0000000, float 0x3FEC7AE580000000, float 0x3FE29CF560000000, float 0x3FDB980700000000, float 0x3FE6940580000000, float 0x3FE1A3D700000000, float 0x3FDAB15B60000000, float 0x3FD9D70600000000, float 0x3FE64AF920000000, float 0x3FD2BACF80000000, float 0x3FED29F5A0000000, float 0x3FE61C0880000000, float 0x3FD4B7CBC0000000, float 0x3FA2D3E920000000, float 0x3FD0931020000000, float 0x3FD18D8EC0000000, float 0x3FCCCF4A60000000, float 0x3FE4207B40000000, float 0x3FD68155E0000000, float 0x3FB0AE31E0000000, float 0x3FB4912980000000, float 0x3FDDE7C4A0000000, float 0x3FC0B8E8E0000000, float 0x3FD8B2D0A0000000, float 0x3FED6B0740000000, float 0x3FD03E9A60000000, float 0x3FEEEACEA0000000, float 0x3F91DB8780000000, float 0x3FD92085C0000000, float 0x3FDEA48740000000, float 0x3FEF4D4AA0000000, float 0x3FB29BE0A0000000, float 0x3FEF6C9E20000000, float 0x3FB915AD20000000, float 0x3FE768B7E0000000, float 0x3FD9ADCD20000000, float 0x3FBB89B520000000, float 0x3FD65FA220000000, float 0x3FDEA9EF60000000, float 0x3FE66B4C80000000, float 0x3FDED50220000000, float 0x3FE93ACF80000000, float 0x3FE69EA140000000, float 0x3FBEBDF4C0000000, float 0x3FE2019080000000, float 0x3FEF6AE180000000, float 0x3F5409A240000000, float 0x3FC8976360000000, float 0x3FDCE614A0000000, float 0x3FC627E0E0000000, float 0x3FBBE4CD80000000, float 0x3FE1964620000000, float 0x3FE2D002E0000000, float 0x3FE50A84C0000000, float 0x3FD95E0B40000000, float 0x3FC0050380000000, float 0x3FE5535000000000, float 0x3FD8B15300000000, float 0x3FEC826240000000, float 0x3FDBF35E40000000, float 0x3FC0660A20000000, float 0x3FD7A77E60000000, float 0x3FE84A83C0000000, float 0x3FA6DFE760000000, float 0x3FECF3BA80000000, float 0x3FB68A9360000000, float 0x3FE3E071C0000000, float 0x3F74AC29C0000000, float 0x3FDCF2FDC0000000, float 0x3FC4BD76E0000000, float 0x3FDFA19860000000, float 0x3FE0BF4660000000, float 0x3FE7BD1020000000, float 0x3FE659B3E0000000, float 0x3FDCF2BEC0000000, float 0x3FE20815E0000000, float 0x3FEA3B9AE0000000, float 0x3FDF7F8CA0000000, float 0x3F713E8140000000, float 0x3FE4B584C0000000, float 0x3FE1A5AEE0000000, float 0x3FD73B4F60000000, float 0x3FC6C6A3C0000000, float 0x3FEA1233E0000000, float 0x3FE7498E60000000, float 0x3FEBBF7F00000000, float 0x3FEFE8B5C0000000, float 0x3FBBAFA720000000, float 0x3FB5F223A0000000, float 0x3FE9790760000000, float 0x3FE5484B60000000, float 0x3FD73293E0000000, float 0x3FD4AE1040000000, float 0x3FA66234A0000000, float 0x3FA5AFD120000000, float 0x3FD42973A0000000, float 0x3FD50D9520000000, float 0x3FEBDDF660000000, float 0x3FE5DCA8E0000000, float 0x3FDDF26F20000000, float 0x3FE07A0300000000, float 0x3FE9EB4840000000, float 0x3FE4392C00000000, float 0x3FC699E0E0000000, float 0x3FD771C980000000, float 0x3FEB384980000000, float 0x3FE02D81A0000000, float 0x3FE7FC5260000000, float 0x3FE806CCA0000000, float 0x3FD9B5AEA0000000, float 0x3FDECC3E40000000, float 0x3FDC0EA180000000, float 0x3FE0485A00000000, float 0x3FEBC66B20000000, float 0x3FE4F253E0000000, float 0x3FADCCEA20000000, float 0x3FE2206420000000, float 0x3FB5892680000000, float 0x3FE18DA1A0000000, float 0x3FECE2D620000000, float 0x3FE8F23EE0000000, float 0x3FE1FC6100000000, float 0x3FA89E3440000000, float 0x3FEB9E96C0000000, float 0x3FB44C5980000000, float 0x3FE6D579A0000000, float 0x3FE9126640000000, float 0x3FD0FA1E40000000, float 0x3FE581C0C0000000, float 0x3FE92E9AC0000000, float 0x3FC24F65A0000000, float 0x3FB610F0E0000000, float 0x3FEC093FA0000000, float 0x3FDA2845A0000000, float 0x3FCD5A1880000000, float 0x3FE428EB40000000, float 0x3FCA73FFA0000000, float 0x3FCA891180000000, float 0x3FE6B8F7A0000000, float 0x3FD5DE7A80000000, float 0x3FD0F47740000000, float 0x3F9D701DA0000000, float 0x3FE4229620000000, float 0x3FDE175080000000, float 0x3FE73D4280000000, float 0x3FC007F660000000, float 0x3FD5020820000000, float 0x3FE969FAE0000000, float 0x3FE7B90EA0000000, float 0x3FDF5A7080000000, float 0x3FC83E20C0000000, float 0x3FE7305DA0000000, float 0x3FB7C46D80000000, float 0x3FA461D860000000, float 0x3FEB862700000000, float 0x3FCFB4AAA0000000, float 0x3FE4F878C0000000, float 0x3FEEDA1440000000, float 0x3FE5856A40000000, float 0x3FA6CB9660000000, float 0x3FE6192000000000, float 0x3FEACAA760000000, float 0x3FE4356960000000, float 0x3FEE84FD20000000, float 0x3FD68F1900000000, float 0x3FD27F66E0000000, float 0x3FA17C5F00000000, float 0x3FEB484B60000000, float 0x3FB9344800000000, float 0x3FE974F940000000, float 0x3FDCF088A0000000, float 0x3FEA6FE500000000, float 0x3FC7EF6300000000, float 0x3FEA436120000000, float 0x3FDC2E5580000000, float 0x3FED822580000000, float 0x3FE68C0480000000, float 0x3FED4B4280000000, float 0x3FE79F3200000000, float 0x3FE7788340000000, float 0x3FC8CE5F80000000, float 0x3FEDBC1CE0000000, float 0x3FC4A86D80000000, float 0x3FD4631300000000, float 0x3FEC70A5E0000000, float 0x3FDB94FAC0000000, float 0x3FE7B4EFC0000000, float 0x3FC8C60CC0000000, float 0x3FEBE97F20000000, float 0x3FE204B3C0000000, float 0x3FD1930380000000, float 0x3FD6426FE0000000, float 0x3FE5515060000000, float 0x3FDCCA0800000000, float 0x3FE9A1B7E0000000, float 0x3FE2D6DA00000000, float 0x3FAAC68AA0000000, float 0x3FE6DF5280000000, float 0x3FDAEB7020000000, float 0x3FE2401A40000000, float 0x3FAD773180000000, float 0x3FCAFE60C0000000, float 0x3FDA116660000000, float 0x3FE5360D00000000, float 0x3FED948980000000, float 0x3FECABB020000000, float 0x3FE8CE6C00000000, float 0x3FE6090D60000000, float 0x3F9A569B20000000, float 0x3FD3528AE0000000, float 0x3FE95336E0000000, float 0x3FE004EE80000000, float 0x3FEA9F9CE0000000, float 0x3FEA832540000000, float 0x3FE48C06A0000000, float 0x3FDFA08C00000000, float 0x3FE0D40240000000, float 0x3FDC913E80000000, float 0x3FDC29FE00000000, float 0x3FE86B6E00000000, float 0x3FE42BE480000000, float 0x3FCCAA2A00000000, float 0x3FD55D13E0000000, float 0x3FECFE38E0000000, float 0x3FDFE43EE0000000, float 0x3FCEE23280000000, float 0x3FDB5E7420000000, float 0x3FE8B9D1C0000000, float 0x3FC95AC040000000, float 0x3FCCD93820000000, float 0x3FE01FE640000000, float 0x3FDBF13CE0000000, float 0x3F90E629A0000000, float 0x3FE9B81D80000000, float 0x3FC84DEC20000000, float 0x3FD2A14CE0000000, float 0x3FDFF17BE0000000, float 0x3FC366BE80000000, float 0x3FB43B6020000000, float 0x3FECF2A180000000, float 0x3FE6AC51A0000000, float 0x3FD18793E0000000, float 0x3FB1425F20000000, float 0x3FD44BC280000000, float 0x3FEDF7CCC0000000, float 0x3FE6EDA880000000, float 0x3FE1672DA0000000, float 0x3FEE13BC00000000, float 0x3FEA734B60000000, float 0x3FE6E20460000000, float 0x3FC3D29560000000, float 0x3FE8013AA0000000, float 0x3FEB10DC00000000, float 0x3FE4BD4D00000000, float 0x3FE1CF5F40000000, float 0x3FE4A1D960000000, float 0x3FC2082060000000, float 0x3FE992C6A0000000, float 0x3FE4417220000000, float 0x3FDC6E82A0000000, float 0x3FDE34E340000000, float 0x3FDBE5F300000000, float 0x3FD706D940000000, float 0x3FCBADC900000000, float 0x3F7F43C7E0000000, float 0x3FD5954640000000, float 0x3FEB739D20000000, float 0x3FD855F780000000, float 0x3FB7AF31C0000000, float 0x3FE9996100000000, float 0x3FED6872C0000000, float 0x3FD2FEBD00000000, float 0x3FB8D44560000000, float 0x3FEB5AC680000000, float 0x3FC52ACFC0000000, float 0x3FE230F280000000, float 0x3FCBC1E7A0000000, float 0x3F94F2AE00000000, float 0x3FEABC81A0000000, float 0x3FE1379DA0000000, float 0x3FEFFDE2E0000000, float 0x3FE3D8E440000000, float 0x3FCF3D2100000000, float 0x3FAEEC9E20000000, float 0x3FD4AC2580000000, float 0x3FD2DF3740000000, float 0x3FEFA50F80000000, float 0x3FD8A28340000000, float 0x3FE78A7C60000000, float 0x3FE8BFEC20000000, float 0x3FE197C3E0000000, float 0x3FD2BE9420000000, float 0x3FE523B9A0000000, float 0x3FE2FE0260000000, float 0x3FE3E032E0000000, float 0x3FC66F36E0000000, float 0x3FE5D3EB40000000, float 0x3FE96C7CA0000000, float 0x3FEBC84520000000, float 0x3FE43A92A0000000, float 0x3FE9D9AFA0000000, float 0x3FE04F1A20000000, float 0x3FDED9A960000000, float 0x3F5D29DC80000000, float 0x3FD0958540000000, float 0x3FD6E98140000000, float 0x3FD1EFD440000000, float 0x3FC8B3BB80000000, float 0x3FD2955F80000000, float 0x3FCAA361A0000000, float 0x3FED5D3FE0000000, float 0x3FBD4AC2A0000000, float 0x3FED9D9F40000000, float 0x3FEF6540C0000000, float 0x3FD05B4240000000, float 0x3FEF3211C0000000, float 0x3F91073140000000, float 0x3FE1AEE420000000, float 0x3FE26C7860000000, float 0x3FE39D8400000000, float 0x3FE3B5FC40000000, float 0x3FE9B736C0000000, float 0x3FE8B6F5C0000000, float 0x3FB6F98740000000, float 0x3FEAD78C40000000, float 0x3FE44E2B00000000, float 0x3FBD1C0880000000, float 0x3FE82FC6A0000000, float 0x3FE27B9BE0000000, float 0x3FE55C11E0000000, float 0x3FE0F46660000000, float 0x3FD4D79D00000000, float 0x3FEA29C120000000, float 0x3FD4427840000000, float 0x3FD57229E0000000, float 0x3FE7987A40000000, float 0x3FD0B36BE0000000, float 0x3FE7961A20000000, float 0x3FA95D4E80000000, float 0x3FE7898D40000000, float 0x3FEFA4FEC0000000, float 0x3FD324B760000000, float 0x3FC2E7AB80000000, float 0x3FDAB49160000000, float 0x3FEE1B1FA0000000, float 0x3FE0C5EB40000000, float 0x3FEB747940000000, float 0x3FC6945FA0000000, float 0x3FCF56C0E0000000, float 0x3FDF16ACE0000000, float 0x3FA113A500000000, float 0x3FD1F0BF20000000, float 0x3FE805A2E0000000, float 0x3FE82F9660000000, float 0x3FED931CA0000000, float 0x3FB8909280000000, float 0x3FEECCD540000000, float 0x3FD1A32B20000000, float 0x3FC63C4B00000000, float 0x3FEE2ABAC0000000, float 0x3FE69D7560000000, float 0x3FB4163780000000, float 0x3FE2747520000000, float 0x3FE9BFD500000000, float 0x3FE1E55E20000000, float 0x3FECD1CE20000000, float 0x3FE4B37000000000, float 0x3FDBA7B4E0000000, float 0x3FEDB13BE0000000, float 0x3FD8879C40000000, float 0x3FD1473CE0000000, float 0x3FBD3F1840000000, float 0x3FE2654F80000000, float 0x3FC34A3C60000000, float 0x3FCEF51AC0000000, float 0x3FD176B7E0000000, float 0x3FC997F620000000, float 0x3FB46876E0000000, float 0x3FEBCB4AE0000000, float 0x3FEECF8720000000, float 0x3FE9407CC0000000, float 0x3FD47B4A20000000, float 0x3FECFA4C60000000, float 0x3FCE106AC0000000, float 0x3FEFB93040000000, float 0x3FAFB30F80000000, float 0x3FE77401C0000000, float 0x3FE92695A0000000, float 0x3FEBF86A00000000, float 0x3FB1AC4720000000, float 0x3FE5138360000000, float 0x3FD3D56B00000000, float 0x3F983E8580000000, float 0x3FE954CFE0000000, float 0x3FE8781A60000000, float 0x3FE5293080000000, float 0x3FD4740C40000000, float 0x3FEA8C7E20000000, float 0x3FBDF9AD00000000, float 0x3FECE66440000000, float 0x3FEF6D58C0000000, float 0x3FC4B05320000000, float 0x3FC8C71920000000, float 0x3FE5742560000000, float 0x3FEB6FBD20000000, float 0x3F6ECD4AA0000000, float 0x3FE2528F20000000, float 0x3FCC6FCDE0000000, float 0x3FBD5336E0000000, float 0x3FDAE336A0000000, float 0x3FE0F911C0000000, float 0x3FDE1FA760000000, float 0x3FE0D11E00000000, float 0x3FE874FD60000000, float 0x3FA4C8FFC0000000, float 0x3FDC5E9E20000000, float 0x3FE0093540000000, float 0x3FEA1DFDA0000000, float 0x3FDAB7C780000000, float 0x3FD5424E60000000, float 0x3FDCA4E7A0000000, float 0x3FE3AABAC0000000, float 0x3FE1E557E0000000, float 0x3FE9C4FA00000000, float 0x3FCCF8C640000000, float 0x3FC3D92B80000000, float 0x3FE6DE3FC0000000, float 0x3FC49930C0000000, float 0x3FE851EDA0000000, float 0x3FDD056C60000000, float 0x3FB807CC80000000, float 0x3FD9FD6940000000, float 0x3FD0F27FE0000000, float 0x3FE70D4560000000, float 0x3FE7C9D5A0000000, float 0x3FD7E3A3A0000000, float 0x3FD9CC5B80000000, float 0x3FED2E7920000000, float 0x3FECB64380000000, float 0x3FC2D22420000000, float 0x3FE818E100000000, float 0x3FE083D580000000, float 0x3FE7A7FE40000000, float 0x3FC666FD60000000, float 0x3FA76EE740000000, float 0x3FE78C2400000000, float 0x3FE9A47EC0000000, float 0x3FEDAFC8C0000000, float 0x3FCED855A0000000, float 0x3FE2F09960000000, float 0x3FED7FA3C0000000, float 0x3FE14DAF40000000, float 0x3FC315B580000000, float 0x3FDB14EC20000000, float 0x3FE9D1EDA0000000, float 0x3FD969C660000000, float 0x3FAF487FC0000000, float 0x3FE9F8DF80000000, float 0x3FA6FD0080000000, float 0x3FDD7FA1A0000000, float 0x3FEEC22AC0000000, float 0x3FEA4EA080000000, float 0x3FEF16B980000000, float 0x3FEBC371E0000000, float 0x3FE8C15D20000000, float 0x3FCD01C0C0000000, float 0x3FE5F60E00000000, float 0x3FEDA9C120000000, float 0x3FDA57DE00000000, float 0x3FD124D4C0000000, float 0x3FB4F9D2C0000000, float 0x3FCCF1A1A0000000, float 0x3FD2EC28C0000000, float 0x3FD7F95920000000, float 0x3FE1104D60000000, float 0x3FCE72B880000000, float 0x3FE56D99C0000000, float 0x3FE32BB020000000, float 0x3FE06B28E0000000, float 0x3FEC1E7740000000, float 0x3FC9CD4660000000, float 0x3FE714DB60000000, float 0x3FDFAEB3E0000000, float 0x3FB46B26C0000000, float 0x3FEEE922E0000000, float 0x3FCDD5E4A0000000, float 0x3FAAE0C180000000, float 0x3FE6DF3740000000, float 0x3FEC6937E0000000, float 0x3FD3C22240000000, float 0x3FEF21DFC0000000, float 0x3FE72593A0000000, float 0x3FDCFF6900000000, float 0x3FED435F00000000, float 0x3FE687AF20000000, float 0x3FEA57A360000000, float 0x3FEAB66D80000000, float 0x3FED028C40000000, float 0x3FED6D5D00000000, float 0x3FB9C0FCC0000000, float 0x3FD3AF20E0000000, float 0x3FECDCFEE0000000, float 0x3FDE021D20000000, float 0x3FD0FBEBA0000000, float 0x3FEC5375C0000000, float 0x3FE5E24DE0000000, float 0x3FEBCBC280000000, float 0x3FB4BE8360000000, float 0x3FDDE09FE0000000, float 0x3FC97BAEC0000000, float 0x3FE53AE040000000, float 0x3FE9FDE0E0000000, float 0x3FD3ECF200000000, float 0x3FEA4896E0000000, float 0x3FD6D2FE40000000, float 0x3FECBCDBC0000000, float 0x3FC49478C0000000, float 0x3FCC7C2860000000, float 0x3FE6E05EE0000000, float 0x3FDF60DCC0000000, float 0x3FEF846C80000000, float 0x3FEE74C6E0000000, float 0x3FEED9E200000000, float 0x3FE48995A0000000, float 0x3FEA1858C0000000, float 0x3FEB4994A0000000, float 0x3FEB961C40000000, float 0x3FAA2AD3E0000000, float 0x3FDC2B3CC0000000, float 0x3FD4AF6C60000000, float 0x3FE08CAA40000000, float 0x3FE203F700000000, float 0x3FBD83F920000000, float 0x3FE7C78000000000, float 0x3FEF4B1240000000, float 0x3FD59B2C40000000, float 0x3FDC3454A0000000, float 0x3FE125EBC0000000, float 0x3FEEB3A040000000, float 0x3FD67DC7A0000000, float 0x3FE68A2020000000, float 0x3F862BF120000000, float 0x3FC0C9EAA0000000, float 0x3FE2777080000000, float 0x3FD65F6340000000, float 0x3FE8CBEA40000000, float 0x3FDB403DE0000000, float 0x3FB29C4540000000, float 0x3FE0000220000000, float 0x3FD11BCDC0000000, float 0x3FED1BE2C0000000, float 0x3FCA63F9A0000000, float 0x3FCCAB9B20000000, float 0x3FEE019F40000000, float 0x3FD4B2F660000000, float 0x3FBE148BA0000000, float 0x3FDF6134C0000000, float 0x3FDE5C1C60000000, float 0x3FE6140360000000, float 0x3FC59702E0000000, float 0x3FE70576C0000000, float 0x3FC82ECAE0000000, float 0x3FD5265280000000, float 0x3FD0FA3BA0000000, float 0x3FDC8FB440000000, float 0x3FC601E680000000, float 0x3FC68B86C0000000, float 0x3FDE601BC0000000, float 0x3FC1F17BE0000000, float 0x3FBD3F39E0000000, float 0x3FECF61CC0000000, float 0x3FE6D805E0000000, float 0x3FE1C4B2C0000000, float 0x3FEE7151E0000000], align 16
@p = internal unnamed_addr constant [514 x i8] c"\A2\A0\19;\F8\EB\AA\EE\F3\1Cg(\1D\ED\00\DE\95.\DC?:\825Ml\BA6\D0\F6\0Cy2\D1Y\F4\08\8Bc\89/\B8\B4\97\83\F2\8F\18\C7Q\14e\87H B\A8\80\B5@\13\B2\22~W\BC\7Fk\9D\86L\C8\DB|\D5%NZUtP\CD\B3z\BB\C3\CB\B6\E2\E4\EC\FD\98\0B\96\D3\9E\\\A1d\F1\81a\E1\C4$rI\8C\90K\8448\ABx\CA\1F\01\D7\93\11\C1X\A91\F9Dm\BF3\9C_\09\94\A3\85\06\C6\9A\1E{F\150'+\1Bq<[\D6ob\ACO\C2\C0\0E\B1#\A7\DFG\B0wi\05\E9\E6\E7vs\0F\FEn\9BV\EF\12\A57\FC\AE\D9\03\8E\DD\10\B9\CE\C9\8D\DA*\BDh\17\9F\BE\D4\0A\CC\D2\E8C=p\B7\02}\99\D8\0D`\8A\04,>\92\E5\AFS\07\E0)\A6\C5\E3\F5\F7JA&j\16^R-!\AD\F0\91\FF\EAT\FAf\1AE9\CFu\A4\88\FB]\A2\A0\19;\F8\EB\AA\EE\F3\1Cg(\1D\ED\00\DE\95.\DC?:\825Ml\BA6\D0\F6\0Cy2\D1Y\F4\08\8Bc\89/\B8\B4\97\83\F2\8F\18\C7Q\14e\87H B\A8\80\B5@\13\B2\22~W\BC\7Fk\9D\86L\C8\DB|\D5%NZUtP\CD\B3z\BB\C3\CB\B6\E2\E4\EC\FD\98\0B\96\D3\9E\\\A1d\F1\81a\E1\C4$rI\8C\90K\8448\ABx\CA\1F\01\D7\93\11\C1X\A91\F9Dm\BF3\9C_\09\94\A3\85\06\C6\9A\1E{F\150'+\1Bq<[\D6ob\ACO\C2\C0\0E\B1#\A7\DFG\B0wi\05\E9\E6\E7vs\0F\FEn\9BV\EF\12\A57\FC\AE\D9\03\8E\DD\10\B9\CE\C9\8D\DA*\BDh\17\9F\BE\D4\0A\CC\D2\E8C=p\B7\02}\99\D8\0D`\8A\04,>\92\E5\AFS\07\E0)\A6\C5\E3\F5\F7JA&j\16^R-!\AD\F0\91\FF\EAT\FAf\1AE9\CFu\A4\88\FB]\A2\A0", align 16
@g = internal unnamed_addr constant [514 x [3 x float]] [[3 x float] [float 0x3FD59F01C0000000, float 0x3FE6E6FF80000000, float 0xBFE38EFFE0000000], [3 x float] [float 0xBFEE358080000000, float 0xBFD4E6FF80000000, float 0xBFA75C0760000000], [3 x float] [float 0xBFB9DFFC60000000, float 0xBFDAA70080000000, float 0xBFECE97F20000000], [3 x float] [float 0x3FE993C040000000, float 0x3FDF9F7F80000000, float 0xBFD5E27E00000000], [3 x float] [float 0xBFEB594080000000, float 0x3FE093C040000000, float 0x3FA1600F40000000], [3 x float] [float 0x3FDB357E60000000, float 0xBFDC05FF20000000, float 0xBFE958FF80000000], [3 x float] [float 0xBFD6F90100000000, float 0x3FE31B0040000000, float 0x3FE6F4C0A0000000], [3 x float] [float 0xBFEF8880E0000000, float 0x3FC285FD00000000, float 0x3FB6DBF8C0000000], [3 x float] [float 0xBFE341BFC0000000, float 0xBFD595FEE0000000, float 0xBFE72A3F00000000], [3 x float] [float 0xBFDCCB8180000000, float 0x3FE3064020000000, float 0x3FE5530060000000], [3 x float] [float 0x3FCAAA0020000000, float 0xBFBB9FFD60000000, float 0x3FEF1B3F20000000], [3 x float] [float 0x3FE268FF40000000, float 0x3FAEF00680000000, float 0x3FEA19BF60000000], [3 x float] [float 0x3FD2C67E00000000, float 0xBFEC05C040000000, float 0xBFD88A7E80000000], [3 x float] [float 0x3FD2CCFF20000000, float 0x3FDDCEFEE0000000, float 0x3FEAB5BF60000000], [3 x float] [float 0xBFEB127F60000000, float 0xBFCDDFFC60000000, float 0xBFDEAD81A0000000], [3 x float] [float 0xBFBDA5FC80000000, float 0x3FC24F00E0000000, float 0xBFEF73FFA0000000], [3 x float] [float 0x3FCA32FCA0000000, float 0xBFEE5E80C0000000, float 0xBFCEA8FC00000000], [3 x float] [float 0x3FEE4B7F60000000, float 0xBFD0E48200000000, float 0x3FC797FE80000000], [3 x float] [float 0xBFCE280280000000, float 0x3FE25CC000000000, float 0x3FE9193F60000000], [3 x float] [float 0x3FCA130160000000, float 0xBFD7D2FE40000000, float 0xBFECF9BFE0000000], [3 x float] [float 0x3FE8394100000000, float 0xBFE4D53F00000000, float 0x3FAC500500000000], [3 x float] [float 0x3FDFDC0120000000, float 0x3FEA11FF80000000, float 0xBFD307FEE0000000], [3 x float] [float 0xBFC4C100E0000000, float 0x3FB061FA00000000, float 0xBFEF827FA0000000], [3 x float] [float 0xBFD5127F60000000, float 0x3FEAB33FC0000000, float 0x3FDC487FC0000000], [3 x float] [float 0x3FE685C040000000, float 0xBFE0DD80E0000000, float 0xBFDE7A80C0000000], [3 x float] [float 0x3FEE9B0040000000, float 0x3FD107FEE0000000, float 0x3FBEA9F7C0000000], [3 x float] [float 0x3FDEBA7FC0000000, float 0x3FDEE6FF80000000, float 0x3FE76F0060000000], [3 x float] [float 0xBFC7D90180000000, float 0x3FEEC23FA0000000, float -2.031250e-01], [3 x float] [float 0xBFE7F37FC0000000, float 0xBFE5057F40000000, float 0xBFB723FEE0000000], [3 x float] [float 0xBFB5C5F7C0000000, float 0xBFC52702A0000000, float 0x3FEF710020000000], [3 x float] [float 0xBFE89F7F80000000, float 0x3FE41A0060000000, float 0xBFBD7FF9C0000000], [3 x float] [float 0x3FD8857F40000000, float 0x3FE13480A0000000, float 0x3FE808BFC0000000], [3 x float] [float 0x3FE3BA40E0000000, float 0xBFE5644100000000, float 0xBFDA9E7FC0000000], [3 x float] [float 0xBFD0A37F00000000, float 0xBFE4290040000000, float 0x3FE76A7F00000000], [3 x float] [float 0x3FE2453F40000000, float 0xBFB68405C0000000, float 0x3FEA1E7FC0000000], [3 x float] [float 0xBFDD5000C0000000, float 0x3F97CFE580000000, float 0x3FEC6F8060000000], [3 x float] [float 0xBFC91C0020000000, float 0x3FEF400100000000, float 0xBFB699FA20000000], [3 x float] [float 0xBFD0E37DE0000000, float 0xBFE656FFC0000000, float 0xBFE54BFF40000000], [3 x float] [float 0x3FDBFA00E0000000, float 0xBFEC8D8020000000, float 0xBFBCE00080000000], [3 x float] [float 0xBFE3E4C0E0000000, float 0xBFCD7EFE00000000, float 0x3FE7F440A0000000], [3 x float] [float 0x3FCDC00100000000, float 0x3FECD180A0000000, float 0xBFD7810200000000], [3 x float] [float 0x3FCC73FFA0000000, float 0xBFE97A00E0000000, float 0x3FE201FFC0000000], [3 x float] [float 0xBFE54BC060000000, float 0xBFE79ABF40000000, float 0x3FBD2007E0000000], [3 x float] [float 0x3FE571BF00000000, float 0x3FE68DBF00000000, float 0x3FCDC60020000000], [3 x float] [float 0x3FECA8BF40000000, float 0x3FDB810200000000, float 0xBFBD5A07C0000000], [3 x float] [float 0xBFBD95FEE0000000, float 0xBFDE59FF40000000, float 0x3FEBED80A0000000], [3 x float] [float 0x3FE3E5FFA0000000, float 0x3FE3540040000000, float 0xBFDFE681A0000000], [3 x float] [float 0xBFEAA17F40000000, float 0x3F8A1FD160000000, float 0x3FE1BC7F80000000], [3 x float] [float 0xBFE67ABFC0000000, float 0x3FE69780C0000000, float 0xBFB6F40600000000], [3 x float] [float 0xBFE62500E0000000, float 0x3FE4C70000000000, float 0x3FD42F7F40000000], [3 x float] [float 0xBFC6870120000000, float 0xBFEF4BC060000000, float 0x3FBCA3F8A0000000], [3 x float] [float 0x3FB8D1FA40000000, float 0xBFA95BFF00000000, float 0x3FEFCF00E0000000], [3 x float] [float 0x3FE4543F20000000, float 0xBFE369FF00000000, float 0xBFDE93FF20000000], [3 x float] [float 0xBFD0B88000000000, float 0xBFE3700040000000, float 0xBFE80140E0000000], [3 x float] [float 0x3FEF76FF40000000, float 0x3FC52D01C0000000, float 0x3FB371FBC0000000], [3 x float] [float 0xBFD3187E80000000, float 0x3FD9DC7F00000000, float 0xBFEBAB4100000000], [3 x float] [float 0xBFE4700040000000, float 0x3FE03F4020000000, float 0x3FE2804100000000], [3 x float] [float 0x3FD8D87F80000000, float 0x3FDA5F80A0000000, float 0x3FEA603F80000000], [3 x float] [float 0x3FE1CC4040000000, float 0xBFCABB01C0000000, float 0x3FE9BD4060000000], [3 x float] [float 0x3FE8E8FF40000000, float 0x3FE1FC00A0000000, float 0x3FD1E37DE0000000], [3 x float] [float 0xBFE3BAFFC0000000, float 0x3FE9057F40000000, float 0xBFB76DFC60000000], [3 x float] [float 0x3FC91FFF80000000, float 0x3FAA240320000000, float 0x3FEF558000000000], [3 x float] [float 0xBFBF080300000000, float 0x3FCA83FD60000000, float 0xBFEF1040C0000000], [3 x float] [float 0xBFC6320100000000, float 0xBFD89F7F80000000, float 0x3FED027FA0000000], [3 x float] [float 0x3FC4ABFFC0000000, float 0xBFE724BFE0000000, float 0xBFE57C00A0000000], [3 x float] [float 0x3FC6D8FD60000000, float 0xBF79806F20000000, float 0xBFEF7C00A0000000], [3 x float] [float 0xBFC0220360000000, float 0x3FC4390420000000, float 0x3FEF56C0E0000000], [3 x float] [float 0x3FEA934040000000, float 0xBF99680E00000000, float 0x3FE1CE8100000000], [3 x float] [float 0xBFE0530060000000, float 0xBFE89F40A0000000, float 0x3FD89780C0000000], [3 x float] [float 0x3FEA0E4100000000, float 0x3FC99D0200000000, float 0xBFE16FBF40000000], [3 x float] [float 0xBFBCD002E0000000, float 0xBFD92C01E0000000, float 0xBFED32BFE0000000], [3 x float] [float 0x3FE1FB00C0000000, float 0x3FC37C02A0000000, float 0xBFEA047F60000000], [3 x float] [float 0x3FC97603A0000000, float 0xBFD04A01A0000000, float 0xBFEE48C0C0000000], [3 x float] [float 0xBFDA60FE40000000, float 0x3FE61C8000000000, float 0xBFE3007FE0000000], [3 x float] [float 0xBFDA107FA0000000, float 0x3FD4C50040000000, float 0x3FEB513F80000000], [3 x float] [float 0xBFE6160100000000, float 0x3FD76E7E60000000, float 0xBFE3F8C000000000], [3 x float] [float 0xBFDB6A0120000000, float 0x3FEB0340A0000000, float 0xBFD4A07F60000000], [3 x float] [float 0xBFCB2BFDC0000000, float 0xBFD30AFE60000000, float 0xBFEDC8C0C0000000], [3 x float] [float 0xBFD179FEC0000000, float 0x3FE083FF60000000, float 0x3FE9FA3FC0000000], [3 x float] [float 0x3FEDB4BF80000000, float 0x3FD7C8FFC0000000, float 0x3F7DA059A0000000], [3 x float] [float 0x3FE92580C0000000, float 0xBFDEAB8200000000, float 0xBFD90281C0000000], [3 x float] [float 0xBFE68E8000000000, float 0x3FAE2BF120000000, float 0x3FE69E40C0000000], [3 x float] [float 0x3FC62CFD80000000, float 0x3FCA0F0200000000, float 0x3FEED58000000000], [3 x float] [float 0x3FDB058140000000, float 0xBFECF00040000000, float 0xBFAFFBEFE0000000], [3 x float] [float 0xBFD7408100000000, float 0xBFC75B0360000000, float 0x3FED3C4080000000], [3 x float] [float 0x3FD041FEA0000000, float 0xBFE1AC7FC0000000, float 0xBFE967FF60000000], [3 x float] [float 0xBFD27D8060000000, float 0xBFE880FFE0000000, float 0xBFE262BF20000000], [3 x float] [float 0x3FADDBFCE0000000, float 0x3FD2A600C0000000, float 0x3FEE8DBF00000000], [3 x float] [float 0x3FEE46BF00000000, float 0xBFD37381E0000000, float 0x3FBC7BFE80000000], [3 x float] [float 0xBFB4020820000000, float 0x3FDC657FC0000000, float 0xBFEC9140A0000000], [3 x float] [float 0x3FC74EFCC0000000, float 0x3FEC9ABF40000000, float 0x3FDA357E60000000], [3 x float] [float 0xBFE5C50040000000, float 0xBFCB4E0120000000, float 0x3FE66FBF40000000], [3 x float] [float 0x3FAFFBEFE0000000, float 0x3FEB2600C0000000, float 0xBFE0D20080000000], [3 x float] [float 0xBFE7523F60000000, float 0xBFE48A00A0000000, float 0x3FCE81FDA0000000], [3 x float] [float 0xBFEC304040000000, float 0x3FDB5EFEA0000000, float 0x3FC9F00260000000], [3 x float] [float 0xBFE10A3F80000000, float 0xBFCB65FD80000000, float 0x3FEA343FA0000000], [3 x float] [float 0x3FEE5E00E0000000, float 0xBFD3867F00000000, float 0x3FB461FA00000000], [3 x float] [float 0x3FED9D40E0000000, float 0x3FD7FA7EC0000000, float 0x3FAC940BC0000000], [3 x float] [float 0x3FEA450040000000, float 0x3FE21880A0000000, float 0x3FB4400760000000], [3 x float] [float 0x3FD09081C0000000, float 0x3FB98BF800000000, float 0xBFEEBE4040000000], [3 x float] [float 0xBFD2DB0140000000, float 0x3FED22FF00000000, float 0x3FD28EFFE0000000], [3 x float] [float 0x3FC18CFC00000000, float 0x3FD47B80A0000000, float 0xBFEDFF3F00000000], [3 x float] [float 0xBFED117F80000000, float 0x3FD6190080000000, float 0xBFCE2C01E0000000], [3 x float] [float 0xBFEDF57F80000000, float 0x3FC1C2FC60000000, float 0x3FD4A80060000000], [3 x float] [float 0x3FD775FF60000000, float 0x3FEDA14060000000, float 0xBFB733FC80000000], [3 x float] [float 0x3FD3CB8180000000, float 0xBFE5FA80C0000000, float 0xBFE50BBF60000000], [3 x float] [float 0x3FE56F3F60000000, float 0x3F99081C20000000, float 0x3FE7BEFF20000000], [3 x float] [float 0xBFED603F80000000, float 0xBFAE440F20000000, float 0xBFD9177EA0000000], [3 x float] [float 0x3FD7647FE0000000, float 0x3FDD93FF20000000, float 0xBFE9DA7F40000000], [3 x float] [float 0x3FB557FFA0000000, float 0x3FEFE28020000000, float 0xBF8E4FFCA0000000], [3 x float] [float 0x3FE300C100000000, float 0x3FD0337EC0000000, float 0xBFE8700040000000], [3 x float] [float 0x3FEF3300E0000000, float 0xBFC52DFD60000000, float 0x3FC2FB00C0000000], [3 x float] [float 0x3FED684060000000, float 0x3FC1930380000000, float 0x3FD7A67E80000000], [3 x float] [float 0x3FD2E07E60000000, float 0x3FE63D4060000000, float 0x3FE4FBBFA0000000], [3 x float] [float 0x3FEE2DC0A0000000, float 0x3FC388FCA0000000, float 0xBFD2E681A0000000], [3 x float] [float 0x3FE2CF80E0000000, float 0xBFE324BFE0000000, float 0x3FE16C80C0000000], [3 x float] [float 0x3FCA15FCC0000000, float 0x3FE5B400C0000000, float 0x3FE69780C0000000], [3 x float] [float 0xBFDEA500E0000000, float 0xBFE5270080000000, float 0x3FE27C3F80000000], [3 x float] [float 0x3FE7027FA0000000, float 0xBFC5BC01A0000000, float 0xBFE58FFFC0000000], [3 x float] [float 0xBFC0EB0320000000, float 0xBFEEE3FFE0000000, float 0x3FCCCCFF20000000], [3 x float] [float 0xBFEF6B80E0000000, float 0xBFC29003E0000000, float 0x3FBF3A0400000000], [3 x float] [float 0x3FE86E3F80000000, float 0x3FE28D3F20000000, float 0x3FD2360060000000], [3 x float] [float 0xBFEC94FF00000000, float 0x3FB465F960000000, float 0x3FDC517E80000000], [3 x float] [float 0xBFE976FF40000000, float 0xBFE0C300A0000000, float 0x3FD3717E00000000], [3 x float] [float 0x3FE784C060000000, float 0x3FE5B28100000000, float 0xBF7E7FB260000000], [3 x float] [float 0x3FC3D90180000000, float 0x3FEF8F7FC0000000, float 0xBFACC404A0000000], [3 x float] [float 0x3FD0837F80000000, float 0x3FE249C0A0000000, float 0xBFE8ED00C0000000], [3 x float] [float 0xBFE5CF3FE0000000, float 0xBFE6777F20000000, float 0xBFCA620260000000], [3 x float] [float 0xBFEECFBFC0000000, float 0xBFC6ADFF80000000, float 0x3FCA0FFDA0000000], [3 x float] [float 0xBFDE2480E0000000, float 0xBFE07BBFA0000000, float 0x3FE6EA4000000000], [3 x float] [float 0xBFE7B0C020000000, float 0x3FE2487FC0000000, float 0x3FD6A97E20000000], [3 x float] [float 0xBFE1EC80C0000000, float 0xBFEA6640A0000000, float 0xBFB3320540000000], [3 x float] [float 0xBFE0408100000000, float 0x3FE81A3F40000000, float 0x3FDAC00100000000], [3 x float] [float 0xBFE0198060000000, float 0x3FA38800E0000000, float 0x3FEBA07F60000000], [3 x float] [float 0x3FE30240C0000000, float 0x3FE58DBF00000000, float 0xBFDC24FEC0000000], [3 x float] [float 0xBFBEAFFF40000000, float 0xBF76A05580000000, float 0xBFEFC48060000000], [3 x float] [float 0x3FB92806A0000000, float 0xBFCB5D0320000000, float 0x3FEF19BF60000000], [3 x float] [float 0xBFE3B33FC0000000, float 0x3FE49B3F20000000, float 0x3FDD1101C0000000], [3 x float] [float 0x3FECB300E0000000, float 0xBFDC3A81E0000000, float 0x3FA0780FE0000000], [3 x float] [float 0xBFE1C2BFA0000000, float 0x3FE8064020000000, float 0xBFD6EAFEE0000000], [3 x float] [float 0x3FD9857F40000000, float 0x3FD3800220000000, float 0x3FEBAD7FA0000000], [3 x float] [float 0xBFE7227F20000000, float 0x3FD36E0080000000, float 0x3FE3DB7F20000000], [3 x float] [float 0xBFE456C0E0000000, float 0xBFE3E6FF80000000, float 0xBFDD448060000000], [3 x float] [float 0xBFD2C47E40000000, float 0x3FB28405C0000000, float 0x3FEE8140E0000000], [3 x float] [float 0xBFDF76FF40000000, float 0x3FE5273F80000000, float 0xBFE222FF00000000], [3 x float] [float 0xBFD377FF20000000, float 0xBFE24E8100000000, float 0xBFE85FBF80000000], [3 x float] [float 0x3FED0EFFE0000000, float 0xBFD9887EC0000000, float 0x3FC041FEA0000000], [3 x float] [float 0xBFE0C180E0000000, float 0xBFE19700C0000000, float 0xBFE4D3BF20000000], [3 x float] [float 0xBFEDDA7F40000000, float 0xBFC9950340000000, float 0x3FD3298020000000], [3 x float] [float 0x3FB973FB80000000, float 0x3FC207FEE0000000, float 0x3FEF84FF40000000], [3 x float] [float 0xBF94D013A0000000, float 0xBFEFFE0040000000, float 0xBF62FF4BA0000000], [3 x float] [float 0x3FEE7C3F80000000, float 0x3FD1F97EE0000000, float 0xBFBDBC01A0000000], [3 x float] [float 0xBFEF19BF60000000, float 0x3FB5240740000000, float 0x3FCC3400C0000000], [3 x float] [float 0x3FE5183FA0000000, float 0x3FE691C080000000, float 0xBFD0AE8180000000], [3 x float] [float 0x3FE7754080000000, float 0xBFC677FF20000000, float 0x3FE5067F00000000], [3 x float] [float 0xBFE1C43F60000000, float 0x3FDB7CFE60000000, float 0xBFE6CA40A0000000], [3 x float] [float 0x3FD9A07F60000000, float 0xBFECC13FE0000000, float 0x3FC6F501A0000000], [3 x float] [float 0x3FE8074000000000, float 0xBFC935FC40000000, float 0x3FE42BC0E0000000], [3 x float] [float 0x3FE9243FE0000000, float 0xBFE2380020000000, float 0x3FCEF3FDA0000000], [3 x float] [float 0xBFAE280280000000, float 0xBFDDB3FEA0000000, float 0x3FEC47FFE0000000], [3 x float] [float 0x3FC096FEC0000000, float 0xBFEE3EFF20000000, float 0x3FD32D01C0000000], [3 x float] [float 0xBFD6E681A0000000, float 0x3FED0B8060000000, float 0x3FCC0FFDA0000000], [3 x float] [float 0xBFEAF2C0E0000000, float 0xBFDC1A7E40000000, float 0xBFD406FF00000000], [3 x float] [float 0xBFD41001E0000000, float 0x3FEB04C060000000, float 0x3FDBCE8100000000], [3 x float] [float 0xBFCEE00080000000, float 0x3FAB43FA20000000, float 0x3FEF01FFC0000000], [3 x float] [float 0x3FB059FB20000000, float 0x3FEA5840A0000000, float 0x3FE20C0060000000], [3 x float] [float 0x3FDE7B80A0000000, float 0x3FEB96BFC0000000, float 0xBFC6150120000000], [3 x float] [float 0x3FE3DEBFA0000000, float 0xBFD3147F20000000, float 0x3FE7328100000000], [3 x float] [float 0x3FD026FE80000000, float 0xBFE7FABFC0000000, float 0xBFE39680E0000000], [3 x float] [float 0xBFE27B3FA0000000, float 0x3FD8BD7F60000000, float 0x3FE701FFC0000000], [3 x float] [float 0xBFDA0181E0000000, float 0xBFE79D7FE0000000, float 0x3FE13CFF60000000], [3 x float] [float 0x3FA827FA20000000, float 0x3FE1CD4020000000, float 0x3FEA8C0060000000], [3 x float] [float 0xBFE9B0FF20000000, float 0x3FE2CC7F40000000, float 0x3FB9E603E0000000], [3 x float] [float 0xBFE6A5BFA0000000, float 0xBFE6973FC0000000, float 0x3F9B0FF100000000], [3 x float] [float 0x3FD7FE7E20000000, float 0x3FE5E7FF60000000, float 0x3FE400C100000000], [3 x float] [float 0x3FDE377E20000000, float 0x3FCAAD03E0000000, float 0xBFEB687F40000000], [3 x float] [float 0xBFE67F8020000000, float 0xBFE2983FA0000000, float 0xBFDA3A81E0000000], [3 x float] [float 0xBFDAB380C0000000, float 0xBFE78FFFC0000000, float 0x3FE10B3F60000000], [3 x float] [float 0xBFDCAA0020000000, float 0xBFC9F6FD20000000, float 0xBFEBDD0100000000], [3 x float] [float 0x3FB6420700000000, float 0xBFEFB17F00000000, float 0x3FBB69FD00000000], [3 x float] [float 0x3FC782FD80000000, float 0x3F92C7FBA0000000, float 0xBFEF72FFE0000000], [3 x float] [float 0x3FE1F0BF20000000, float 0xBFDB728200000000, float 0x3FE6AA3F00000000], [3 x float] [float 0x3FD2FD7E40000000, float 0xBFEE7B80A0000000, float 0xBFB13404E0000000], [3 x float] [float 0x3FC1610280000000, float 0x3FEFB04040000000, float 0x3F9EF80560000000], [3 x float] [float 0xBFB19C0660000000, float 0x3FE4F37FC0000000, float 0x3FE8160100000000], [3 x float] [float 0x3FE8674080000000, float 0xBFE1A80060000000, float 0x3FD59AFE20000000], [3 x float] [float 0xBFEA3A40E0000000, float 0xBFDA177EA0000000, float 0x3FD9C200C0000000], [3 x float] [float 0xBFE74A7F80000000, float 0xBFE19F7F80000000, float 0xBFDA2580C0000000], [3 x float] [float 0xBFEB628020000000, float 0xBFDEB88000000000, float 0x3FC8ADFF80000000], [3 x float] [float 0x3FE62E7F60000000, float 0xBFB44C05A0000000, float 0x3FE6EC3FC0000000], [3 x float] [float 0x3FCCEDFE80000000, float 0x3FE4CDC020000000, float 0xBFE736BF40000000], [3 x float] [float 0x3FCF93FF20000000, float 0x3FEE81FFC0000000, float 0xBFC636FC20000000], [3 x float] [float 0xBFEF0D8020000000, float 0xBFCE9EFD80000000, float 0xBFA09BF9C0000000], [3 x float] [float 0x3FC174FF80000000, float 0xBFD93C81A0000000, float 0x3FED147F20000000], [3 x float] [float 0x3FEA05FF20000000, float 0x3FE1DC8100000000, float 0x3FC50A02C0000000], [3 x float] [float 0x3FD9E37DE0000000, float 0x3FE191C080000000, float 0xBFE766FF80000000], [3 x float] [float 0xBFD855FFE0000000, float 0xBFE2227F20000000, float 0x3FE7633F00000000], [3 x float] [float 0x3F96B01000000000, float 0x3FEDD8FF80000000, float 0x3FD705FF20000000], [3 x float] [float 0x3F80E02220000000, float 0x3FEFE3C100000000, float 0xBFB5120180000000], [3 x float] [float 0x3FEE9CC100000000, float 0xBFB0B9FDC0000000, float 0xBFD2288060000000], [3 x float] [float 0xBFE7CB4080000000, float 0x3F80CFE160000000, float 0x3FE564FFC0000000], [3 x float] [float 0xBFEB81C0C0000000, float 0xBFE04F3FE0000000, float 0x3FA2500D60000000], [3 x float] [float 0xBFEB458040000000, float 0x3FD7468020000000, float 0xBFD81001E0000000], [3 x float] [float 0xBFC9D9FD40000000, float 0xBFEF10C0A0000000, float 0xBFC087FCC0000000], [3 x float] [float 0x3FD41001E0000000, float 0x3FEE5080C0000000, float 0x3FB0C1FC80000000], [3 x float] [float 0xBFD041FEA0000000, float 0xBFE0E77F60000000, float 0x3FE9ECBFC0000000], [3 x float] [float 0x3FE4190080000000, float 0x3FE33C4080000000, float 0x3FDF9F7F80000000], [3 x float] [float 0xBFDFA40100000000, float 0x3FEBC9C0A0000000, float 0x3FA36BF440000000], [3 x float] [float 0x3FD1A40100000000, float 0xBFB62003A0000000, float 0x3FEEA27F20000000], [3 x float] [float 0xBFC955FFE0000000, float 0x3FDE0281C0000000, float 0xBFEB8B3F60000000], [3 x float] [float 0x3FECA8BF40000000, float 0x3FD98F81E0000000, float 0x3FC91001E0000000], [3 x float] [float 0x3FE1F20000000000, float 0x3FEA667FA0000000, float 0xBFB1B80240000000], [3 x float] [float 0x3FD377FF20000000, float 0xBFEB2EFF60000000, float 0x3FDB95FEE0000000], [3 x float] [float 0x3FB8AC0840000000, float 0x3FEDF1BF00000000, float 0x3FD5B3FEA0000000], [3 x float] [float 0xBFAA53FC00000000, float 0x3FDA2C7FC0000000, float 0xBFED278080000000], [3 x float] [float 0x3FD525FEA0000000, float 0x3FEE2BC0E0000000, float 0xBFA5B402E0000000], [3 x float] [float 0xBFDCF37FC0000000, float 0xBFE92A3F00000000, float 0x3FDAEA8120000000], [3 x float] [float 0x3FC1310120000000, float 0xBFEDDF00A0000000, float 0xBFD5478000000000], [3 x float] [float 0x3FE9A93F20000000, float 0xBFE2227F20000000, float 0xBFC82EFD40000000], [3 x float] [float 0xBFEF9D40E0000000, float 0xBFBB2207A0000000, float 0x3FBCCDFAC0000000], [3 x float] [float 0xBFCF3E0380000000, float 0x3FEC8D3F20000000, float 0xBFD84E7EE0000000], [3 x float] [float 0xBFED74C0A0000000, float 0x3FCD52FC20000000, float 0xBFD43F8120000000], [3 x float] [float 0x3FE8ECBFC0000000, float 0x3FD4DC7F00000000, float 0x3FE12480E0000000], [3 x float] [float 0xBFED363F60000000, float 0x3FC7B4FE80000000, float 0xBFD7480200000000], [3 x float] [float 0xBFC7A70080000000, float 0x3FE21780C0000000, float 0xBFE9B90000000000], [3 x float] [float 0xBF92E7F700000000, float 0x3FBE99FA20000000, float 0x3FEFC38080000000], [3 x float] [float 0xBFD09780C0000000, float 0xBFEDF08040000000, float 0x3FCEA8FC00000000], [3 x float] [float 0xBFEA5BFF00000000, float 0xBFDCBE7F20000000, float 0xBFD623FEE0000000], [3 x float] [float 0xBFDBB7FE00000000, float 0x3FE51ABF40000000, float 0x3FE3A8BF40000000], [3 x float] [float 0xBFEA540040000000, float 0x3FD83EFF20000000, float 0xBFDB1D8200000000], [3 x float] [float 0x3FE5FD8060000000, float 0xBFE5983FA0000000, float 0xBFD1357E60000000], [3 x float] [float 0xBFCF8FFFC0000000, float 0xBFE9A07F60000000, float 0x3FE1767F40000000], [3 x float] [float 0xBFE7558000000000, float 0xBFCA98FE60000000, float 0x3FE4DD0100000000], [3 x float] [float 0x3FE4E9C020000000, float 0xBFE388BFC0000000, float 0xBFDCA20140000000], [3 x float] [float 0x3FDF867F00000000, float 0xBF97E80380000000, float 0x3FEBD67FE0000000], [3 x float] [float 0x3FE37D3F60000000, float 0x3F829FE000000000, float 0xBFE960BF60000000], [3 x float] [float 0x3FEECCC040000000, float 0xBFD1598180000000, float 0xBF821FF2E0000000], [3 x float] [float 0x3FD1048160000000, float 0xBF741FA760000000, float 0x3FEED8C080000000], [3 x float] [float 0x3FE4D6FFC0000000, float 0x3FE1B73F40000000, float 0xBFE09B3F20000000], [3 x float] [float 0x3FD1F47FA0000000, float 0xBFEAFB00C0000000, float 0x3FDD59FF40000000], [3 x float] [float 0xBFC6700040000000, float 0xBFEF767F40000000, float 0x3FA9800A80000000], [3 x float] [float 0x3FA217F420000000, float 0xBFEF5B7F20000000, float 0x3FC91800A0000000], [3 x float] [float 0xBFEF7440A0000000, float 0x3FC5080300000000, float 0xBFB50E0220000000], [3 x float] [float 0x3FCDEAFEE0000000, float 0xBFEF1CC100000000, float 0xBF74801F80000000], [3 x float] [float 0xBFE7E97F20000000, float 0xBFE38FFFC0000000, float 0x3FD0AB0000000000], [3 x float] [float 0x3FE4A8BF40000000, float 0x3FE2F7FF20000000, float 0x3FDECEFEE0000000], [3 x float] [float 0x3FBE21FB00000000, float 0xBFEE628020000000, float 0xBFD29A8040000000], [3 x float] [float 0xBFE11EC0C0000000, float 0xBFE95740C0000000, float 0xBFD2D60200000000], [3 x float] [float 0xBFE411C080000000, float 0xBFCB72FFE0000000, float 0x3FE7F57F80000000], [3 x float] [float 0xBFA8900C60000000, float 0xBFEA0800E0000000, float 0xBFE28C0060000000], [3 x float] [float 0xBFC677FF20000000, float 0x3FDE8B7E40000000, float 0xBFEB8D3F20000000], [3 x float] [float 0x3FE7A24040000000, float 0xBFDA8301A0000000, float 0xBFE104C060000000], [3 x float] [float 0x3FE2007FE0000000, float 0xBFE687BFE0000000, float 0x3FDBBB01C0000000], [3 x float] [float 0xBFE8288060000000, float 0x3FE4BC7F80000000, float 0xBFB9C00100000000], [3 x float] [float 0x3FBD5E0720000000, float 0x3FA6CBFB20000000, float 0xBFEFC180E0000000], [3 x float] [float 0x3FEEE97F20000000, float 0x3FCF57FFA0000000, float 0xBFB5300580000000], [3 x float] [float 0x3FD59F01C0000000, float 0x3FE6E6FF80000000, float 0xBFE38EFFE0000000], [3 x float] [float 0xBFEE358080000000, float 0xBFD4E6FF80000000, float 0xBFA75C0760000000], [3 x float] [float 0xBFB9DFFC60000000, float 0xBFDAA70080000000, float 0xBFECE97F20000000], [3 x float] [float 0x3FE993C040000000, float 0x3FDF9F7F80000000, float 0xBFD5E27E00000000], [3 x float] [float 0xBFEB594080000000, float 0x3FE093C040000000, float 0x3FA1600F40000000], [3 x float] [float 0x3FDB357E60000000, float 0xBFDC05FF20000000, float 0xBFE958FF80000000], [3 x float] [float 0xBFD6F90100000000, float 0x3FE31B0040000000, float 0x3FE6F4C0A0000000], [3 x float] [float 0xBFEF8880E0000000, float 0x3FC285FD00000000, float 0x3FB6DBF8C0000000], [3 x float] [float 0xBFE341BFC0000000, float 0xBFD595FEE0000000, float 0xBFE72A3F00000000], [3 x float] [float 0xBFDCCB8180000000, float 0x3FE3064020000000, float 0x3FE5530060000000], [3 x float] [float 0x3FCAAA0020000000, float 0xBFBB9FFD60000000, float 0x3FEF1B3F20000000], [3 x float] [float 0x3FE268FF40000000, float 0x3FAEF00680000000, float 0x3FEA19BF60000000], [3 x float] [float 0x3FD2C67E00000000, float 0xBFEC05C040000000, float 0xBFD88A7E80000000], [3 x float] [float 0x3FD2CCFF20000000, float 0x3FDDCEFEE0000000, float 0x3FEAB5BF60000000], [3 x float] [float 0xBFEB127F60000000, float 0xBFCDDFFC60000000, float 0xBFDEAD81A0000000], [3 x float] [float 0xBFBDA5FC80000000, float 0x3FC24F00E0000000, float 0xBFEF73FFA0000000], [3 x float] [float 0x3FCA32FCA0000000, float 0xBFEE5E80C0000000, float 0xBFCEA8FC00000000], [3 x float] [float 0x3FEE4B7F60000000, float 0xBFD0E48200000000, float 0x3FC797FE80000000], [3 x float] [float 0xBFCE280280000000, float 0x3FE25CC000000000, float 0x3FE9193F60000000], [3 x float] [float 0x3FCA130160000000, float 0xBFD7D2FE40000000, float 0xBFECF9BFE0000000], [3 x float] [float 0x3FE8394100000000, float 0xBFE4D53F00000000, float 0x3FAC500500000000], [3 x float] [float 0x3FDFDC0120000000, float 0x3FEA11FF80000000, float 0xBFD307FEE0000000], [3 x float] [float 0xBFC4C100E0000000, float 0x3FB061FA00000000, float 0xBFEF827FA0000000], [3 x float] [float 0xBFD5127F60000000, float 0x3FEAB33FC0000000, float 0x3FDC487FC0000000], [3 x float] [float 0x3FE685C040000000, float 0xBFE0DD80E0000000, float 0xBFDE7A80C0000000], [3 x float] [float 0x3FEE9B0040000000, float 0x3FD107FEE0000000, float 0x3FBEA9F7C0000000], [3 x float] [float 0x3FDEBA7FC0000000, float 0x3FDEE6FF80000000, float 0x3FE76F0060000000], [3 x float] [float 0xBFC7D90180000000, float 0x3FEEC23FA0000000, float -2.031250e-01], [3 x float] [float 0xBFE7F37FC0000000, float 0xBFE5057F40000000, float 0xBFB723FEE0000000], [3 x float] [float 0xBFB5C5F7C0000000, float 0xBFC52702A0000000, float 0x3FEF710020000000], [3 x float] [float 0xBFE89F7F80000000, float 0x3FE41A0060000000, float 0xBFBD7FF9C0000000], [3 x float] [float 0x3FD8857F40000000, float 0x3FE13480A0000000, float 0x3FE808BFC0000000], [3 x float] [float 0x3FE3BA40E0000000, float 0xBFE5644100000000, float 0xBFDA9E7FC0000000], [3 x float] [float 0xBFD0A37F00000000, float 0xBFE4290040000000, float 0x3FE76A7F00000000], [3 x float] [float 0x3FE2453F40000000, float 0xBFB68405C0000000, float 0x3FEA1E7FC0000000], [3 x float] [float 0xBFDD5000C0000000, float 0x3F97CFE580000000, float 0x3FEC6F8060000000], [3 x float] [float 0xBFC91C0020000000, float 0x3FEF400100000000, float 0xBFB699FA20000000], [3 x float] [float 0xBFD0E37DE0000000, float 0xBFE656FFC0000000, float 0xBFE54BFF40000000], [3 x float] [float 0x3FDBFA00E0000000, float 0xBFEC8D8020000000, float 0xBFBCE00080000000], [3 x float] [float 0xBFE3E4C0E0000000, float 0xBFCD7EFE00000000, float 0x3FE7F440A0000000], [3 x float] [float 0x3FCDC00100000000, float 0x3FECD180A0000000, float 0xBFD7810200000000], [3 x float] [float 0x3FCC73FFA0000000, float 0xBFE97A00E0000000, float 0x3FE201FFC0000000], [3 x float] [float 0xBFE54BC060000000, float 0xBFE79ABF40000000, float 0x3FBD2007E0000000], [3 x float] [float 0x3FE571BF00000000, float 0x3FE68DBF00000000, float 0x3FCDC60020000000], [3 x float] [float 0x3FECA8BF40000000, float 0x3FDB810200000000, float 0xBFBD5A07C0000000], [3 x float] [float 0xBFBD95FEE0000000, float 0xBFDE59FF40000000, float 0x3FEBED80A0000000], [3 x float] [float 0x3FE3E5FFA0000000, float 0x3FE3540040000000, float 0xBFDFE681A0000000], [3 x float] [float 0xBFEAA17F40000000, float 0x3F8A1FD160000000, float 0x3FE1BC7F80000000], [3 x float] [float 0xBFE67ABFC0000000, float 0x3FE69780C0000000, float 0xBFB6F40600000000], [3 x float] [float 0xBFE62500E0000000, float 0x3FE4C70000000000, float 0x3FD42F7F40000000], [3 x float] [float 0xBFC6870120000000, float 0xBFEF4BC060000000, float 0x3FBCA3F8A0000000], [3 x float] [float 0x3FB8D1FA40000000, float 0xBFA95BFF00000000, float 0x3FEFCF00E0000000], [3 x float] [float 0x3FE4543F20000000, float 0xBFE369FF00000000, float 0xBFDE93FF20000000], [3 x float] [float 0xBFD0B88000000000, float 0xBFE3700040000000, float 0xBFE80140E0000000], [3 x float] [float 0x3FEF76FF40000000, float 0x3FC52D01C0000000, float 0x3FB371FBC0000000], [3 x float] [float 0xBFD3187E80000000, float 0x3FD9DC7F00000000, float 0xBFEBAB4100000000], [3 x float] [float 0xBFE4700040000000, float 0x3FE03F4020000000, float 0x3FE2804100000000], [3 x float] [float 0x3FD8D87F80000000, float 0x3FDA5F80A0000000, float 0x3FEA603F80000000], [3 x float] [float 0x3FE1CC4040000000, float 0xBFCABB01C0000000, float 0x3FE9BD4060000000], [3 x float] [float 0x3FE8E8FF40000000, float 0x3FE1FC00A0000000, float 0x3FD1E37DE0000000], [3 x float] [float 0xBFE3BAFFC0000000, float 0x3FE9057F40000000, float 0xBFB76DFC60000000], [3 x float] [float 0x3FC91FFF80000000, float 0x3FAA240320000000, float 0x3FEF558000000000], [3 x float] [float 0xBFBF080300000000, float 0x3FCA83FD60000000, float 0xBFEF1040C0000000], [3 x float] [float 0xBFC6320100000000, float 0xBFD89F7F80000000, float 0x3FED027FA0000000], [3 x float] [float 0x3FC4ABFFC0000000, float 0xBFE724BFE0000000, float 0xBFE57C00A0000000], [3 x float] [float 0x3FC6D8FD60000000, float 0xBF79806F20000000, float 0xBFEF7C00A0000000], [3 x float] [float 0xBFC0220360000000, float 0x3FC4390420000000, float 0x3FEF56C0E0000000], [3 x float] [float 0x3FEA934040000000, float 0xBF99680E00000000, float 0x3FE1CE8100000000], [3 x float] [float 0xBFE0530060000000, float 0xBFE89F40A0000000, float 0x3FD89780C0000000], [3 x float] [float 0x3FEA0E4100000000, float 0x3FC99D0200000000, float 0xBFE16FBF40000000], [3 x float] [float 0xBFBCD002E0000000, float 0xBFD92C01E0000000, float 0xBFED32BFE0000000], [3 x float] [float 0x3FE1FB00C0000000, float 0x3FC37C02A0000000, float 0xBFEA047F60000000], [3 x float] [float 0x3FC97603A0000000, float 0xBFD04A01A0000000, float 0xBFEE48C0C0000000], [3 x float] [float 0xBFDA60FE40000000, float 0x3FE61C8000000000, float 0xBFE3007FE0000000], [3 x float] [float 0xBFDA107FA0000000, float 0x3FD4C50040000000, float 0x3FEB513F80000000], [3 x float] [float 0xBFE6160100000000, float 0x3FD76E7E60000000, float 0xBFE3F8C000000000], [3 x float] [float 0xBFDB6A0120000000, float 0x3FEB0340A0000000, float 0xBFD4A07F60000000], [3 x float] [float 0xBFCB2BFDC0000000, float 0xBFD30AFE60000000, float 0xBFEDC8C0C0000000], [3 x float] [float 0xBFD179FEC0000000, float 0x3FE083FF60000000, float 0x3FE9FA3FC0000000], [3 x float] [float 0x3FEDB4BF80000000, float 0x3FD7C8FFC0000000, float 0x3F7DA059A0000000], [3 x float] [float 0x3FE92580C0000000, float 0xBFDEAB8200000000, float 0xBFD90281C0000000], [3 x float] [float 0xBFE68E8000000000, float 0x3FAE2BF120000000, float 0x3FE69E40C0000000], [3 x float] [float 0x3FC62CFD80000000, float 0x3FCA0F0200000000, float 0x3FEED58000000000], [3 x float] [float 0x3FDB058140000000, float 0xBFECF00040000000, float 0xBFAFFBEFE0000000], [3 x float] [float 0xBFD7408100000000, float 0xBFC75B0360000000, float 0x3FED3C4080000000], [3 x float] [float 0x3FD041FEA0000000, float 0xBFE1AC7FC0000000, float 0xBFE967FF60000000], [3 x float] [float 0xBFD27D8060000000, float 0xBFE880FFE0000000, float 0xBFE262BF20000000], [3 x float] [float 0x3FADDBFCE0000000, float 0x3FD2A600C0000000, float 0x3FEE8DBF00000000], [3 x float] [float 0x3FEE46BF00000000, float 0xBFD37381E0000000, float 0x3FBC7BFE80000000], [3 x float] [float 0xBFB4020820000000, float 0x3FDC657FC0000000, float 0xBFEC9140A0000000], [3 x float] [float 0x3FC74EFCC0000000, float 0x3FEC9ABF40000000, float 0x3FDA357E60000000], [3 x float] [float 0xBFE5C50040000000, float 0xBFCB4E0120000000, float 0x3FE66FBF40000000], [3 x float] [float 0x3FAFFBEFE0000000, float 0x3FEB2600C0000000, float 0xBFE0D20080000000], [3 x float] [float 0xBFE7523F60000000, float 0xBFE48A00A0000000, float 0x3FCE81FDA0000000], [3 x float] [float 0xBFEC304040000000, float 0x3FDB5EFEA0000000, float 0x3FC9F00260000000], [3 x float] [float 0xBFE10A3F80000000, float 0xBFCB65FD80000000, float 0x3FEA343FA0000000], [3 x float] [float 0x3FEE5E00E0000000, float 0xBFD3867F00000000, float 0x3FB461FA00000000], [3 x float] [float 0x3FED9D40E0000000, float 0x3FD7FA7EC0000000, float 0x3FAC940BC0000000], [3 x float] [float 0x3FEA450040000000, float 0x3FE21880A0000000, float 0x3FB4400760000000], [3 x float] [float 0x3FD09081C0000000, float 0x3FB98BF800000000, float 0xBFEEBE4040000000], [3 x float] [float 0xBFD2DB0140000000, float 0x3FED22FF00000000, float 0x3FD28EFFE0000000], [3 x float] [float 0x3FC18CFC00000000, float 0x3FD47B80A0000000, float 0xBFEDFF3F00000000], [3 x float] [float 0xBFED117F80000000, float 0x3FD6190080000000, float 0xBFCE2C01E0000000], [3 x float] [float 0xBFEDF57F80000000, float 0x3FC1C2FC60000000, float 0x3FD4A80060000000], [3 x float] [float 0x3FD775FF60000000, float 0x3FEDA14060000000, float 0xBFB733FC80000000], [3 x float] [float 0x3FD3CB8180000000, float 0xBFE5FA80C0000000, float 0xBFE50BBF60000000], [3 x float] [float 0x3FE56F3F60000000, float 0x3F99081C20000000, float 0x3FE7BEFF20000000], [3 x float] [float 0xBFED603F80000000, float 0xBFAE440F20000000, float 0xBFD9177EA0000000], [3 x float] [float 0x3FD7647FE0000000, float 0x3FDD93FF20000000, float 0xBFE9DA7F40000000], [3 x float] [float 0x3FB557FFA0000000, float 0x3FEFE28020000000, float 0xBF8E4FFCA0000000], [3 x float] [float 0x3FE300C100000000, float 0x3FD0337EC0000000, float 0xBFE8700040000000], [3 x float] [float 0x3FEF3300E0000000, float 0xBFC52DFD60000000, float 0x3FC2FB00C0000000], [3 x float] [float 0x3FED684060000000, float 0x3FC1930380000000, float 0x3FD7A67E80000000], [3 x float] [float 0x3FD2E07E60000000, float 0x3FE63D4060000000, float 0x3FE4FBBFA0000000], [3 x float] [float 0x3FEE2DC0A0000000, float 0x3FC388FCA0000000, float 0xBFD2E681A0000000], [3 x float] [float 0x3FE2CF80E0000000, float 0xBFE324BFE0000000, float 0x3FE16C80C0000000], [3 x float] [float 0x3FCA15FCC0000000, float 0x3FE5B400C0000000, float 0x3FE69780C0000000], [3 x float] [float 0xBFDEA500E0000000, float 0xBFE5270080000000, float 0x3FE27C3F80000000], [3 x float] [float 0x3FE7027FA0000000, float 0xBFC5BC01A0000000, float 0xBFE58FFFC0000000], [3 x float] [float 0xBFC0EB0320000000, float 0xBFEEE3FFE0000000, float 0x3FCCCCFF20000000], [3 x float] [float 0xBFEF6B80E0000000, float 0xBFC29003E0000000, float 0x3FBF3A0400000000], [3 x float] [float 0x3FE86E3F80000000, float 0x3FE28D3F20000000, float 0x3FD2360060000000], [3 x float] [float 0xBFEC94FF00000000, float 0x3FB465F960000000, float 0x3FDC517E80000000], [3 x float] [float 0xBFE976FF40000000, float 0xBFE0C300A0000000, float 0x3FD3717E00000000], [3 x float] [float 0x3FE784C060000000, float 0x3FE5B28100000000, float 0xBF7E7FB260000000], [3 x float] [float 0x3FC3D90180000000, float 0x3FEF8F7FC0000000, float 0xBFACC404A0000000], [3 x float] [float 0x3FD0837F80000000, float 0x3FE249C0A0000000, float 0xBFE8ED00C0000000], [3 x float] [float 0xBFE5CF3FE0000000, float 0xBFE6777F20000000, float 0xBFCA620260000000], [3 x float] [float 0xBFEECFBFC0000000, float 0xBFC6ADFF80000000, float 0x3FCA0FFDA0000000], [3 x float] [float 0xBFDE2480E0000000, float 0xBFE07BBFA0000000, float 0x3FE6EA4000000000], [3 x float] [float 0xBFE7B0C020000000, float 0x3FE2487FC0000000, float 0x3FD6A97E20000000], [3 x float] [float 0xBFE1EC80C0000000, float 0xBFEA6640A0000000, float 0xBFB3320540000000], [3 x float] [float 0xBFE0408100000000, float 0x3FE81A3F40000000, float 0x3FDAC00100000000], [3 x float] [float 0xBFE0198060000000, float 0x3FA38800E0000000, float 0x3FEBA07F60000000], [3 x float] [float 0x3FE30240C0000000, float 0x3FE58DBF00000000, float 0xBFDC24FEC0000000], [3 x float] [float 0xBFBEAFFF40000000, float 0xBF76A05580000000, float 0xBFEFC48060000000], [3 x float] [float 0x3FB92806A0000000, float 0xBFCB5D0320000000, float 0x3FEF19BF60000000], [3 x float] [float 0xBFE3B33FC0000000, float 0x3FE49B3F20000000, float 0x3FDD1101C0000000], [3 x float] [float 0x3FECB300E0000000, float 0xBFDC3A81E0000000, float 0x3FA0780FE0000000], [3 x float] [float 0xBFE1C2BFA0000000, float 0x3FE8064020000000, float 0xBFD6EAFEE0000000], [3 x float] [float 0x3FD9857F40000000, float 0x3FD3800220000000, float 0x3FEBAD7FA0000000], [3 x float] [float 0xBFE7227F20000000, float 0x3FD36E0080000000, float 0x3FE3DB7F20000000], [3 x float] [float 0xBFE456C0E0000000, float 0xBFE3E6FF80000000, float 0xBFDD448060000000], [3 x float] [float 0xBFD2C47E40000000, float 0x3FB28405C0000000, float 0x3FEE8140E0000000], [3 x float] [float 0xBFDF76FF40000000, float 0x3FE5273F80000000, float 0xBFE222FF00000000], [3 x float] [float 0xBFD377FF20000000, float 0xBFE24E8100000000, float 0xBFE85FBF80000000], [3 x float] [float 0x3FED0EFFE0000000, float 0xBFD9887EC0000000, float 0x3FC041FEA0000000], [3 x float] [float 0xBFE0C180E0000000, float 0xBFE19700C0000000, float 0xBFE4D3BF20000000], [3 x float] [float 0xBFEDDA7F40000000, float 0xBFC9950340000000, float 0x3FD3298020000000], [3 x float] [float 0x3FB973FB80000000, float 0x3FC207FEE0000000, float 0x3FEF84FF40000000], [3 x float] [float 0xBF94D013A0000000, float 0xBFEFFE0040000000, float 0xBF62FF4BA0000000], [3 x float] [float 0x3FEE7C3F80000000, float 0x3FD1F97EE0000000, float 0xBFBDBC01A0000000], [3 x float] [float 0xBFEF19BF60000000, float 0x3FB5240740000000, float 0x3FCC3400C0000000], [3 x float] [float 0x3FE5183FA0000000, float 0x3FE691C080000000, float 0xBFD0AE8180000000], [3 x float] [float 0x3FE7754080000000, float 0xBFC677FF20000000, float 0x3FE5067F00000000], [3 x float] [float 0xBFE1C43F60000000, float 0x3FDB7CFE60000000, float 0xBFE6CA40A0000000], [3 x float] [float 0x3FD9A07F60000000, float 0xBFECC13FE0000000, float 0x3FC6F501A0000000], [3 x float] [float 0x3FE8074000000000, float 0xBFC935FC40000000, float 0x3FE42BC0E0000000], [3 x float] [float 0x3FE9243FE0000000, float 0xBFE2380020000000, float 0x3FCEF3FDA0000000], [3 x float] [float 0xBFAE280280000000, float 0xBFDDB3FEA0000000, float 0x3FEC47FFE0000000], [3 x float] [float 0x3FC096FEC0000000, float 0xBFEE3EFF20000000, float 0x3FD32D01C0000000], [3 x float] [float 0xBFD6E681A0000000, float 0x3FED0B8060000000, float 0x3FCC0FFDA0000000], [3 x float] [float 0xBFEAF2C0E0000000, float 0xBFDC1A7E40000000, float 0xBFD406FF00000000], [3 x float] [float 0xBFD41001E0000000, float 0x3FEB04C060000000, float 0x3FDBCE8100000000], [3 x float] [float 0xBFCEE00080000000, float 0x3FAB43FA20000000, float 0x3FEF01FFC0000000], [3 x float] [float 0x3FB059FB20000000, float 0x3FEA5840A0000000, float 0x3FE20C0060000000], [3 x float] [float 0x3FDE7B80A0000000, float 0x3FEB96BFC0000000, float 0xBFC6150120000000], [3 x float] [float 0x3FE3DEBFA0000000, float 0xBFD3147F20000000, float 0x3FE7328100000000], [3 x float] [float 0x3FD026FE80000000, float 0xBFE7FABFC0000000, float 0xBFE39680E0000000], [3 x float] [float 0xBFE27B3FA0000000, float 0x3FD8BD7F60000000, float 0x3FE701FFC0000000], [3 x float] [float 0xBFDA0181E0000000, float 0xBFE79D7FE0000000, float 0x3FE13CFF60000000], [3 x float] [float 0x3FA827FA20000000, float 0x3FE1CD4020000000, float 0x3FEA8C0060000000], [3 x float] [float 0xBFE9B0FF20000000, float 0x3FE2CC7F40000000, float 0x3FB9E603E0000000], [3 x float] [float 0xBFE6A5BFA0000000, float 0xBFE6973FC0000000, float 0x3F9B0FF100000000], [3 x float] [float 0x3FD7FE7E20000000, float 0x3FE5E7FF60000000, float 0x3FE400C100000000], [3 x float] [float 0x3FDE377E20000000, float 0x3FCAAD03E0000000, float 0xBFEB687F40000000], [3 x float] [float 0xBFE67F8020000000, float 0xBFE2983FA0000000, float 0xBFDA3A81E0000000], [3 x float] [float 0xBFDAB380C0000000, float 0xBFE78FFFC0000000, float 0x3FE10B3F60000000], [3 x float] [float 0xBFDCAA0020000000, float 0xBFC9F6FD20000000, float 0xBFEBDD0100000000], [3 x float] [float 0x3FB6420700000000, float 0xBFEFB17F00000000, float 0x3FBB69FD00000000], [3 x float] [float 0x3FC782FD80000000, float 0x3F92C7FBA0000000, float 0xBFEF72FFE0000000], [3 x float] [float 0x3FE1F0BF20000000, float 0xBFDB728200000000, float 0x3FE6AA3F00000000], [3 x float] [float 0x3FD2FD7E40000000, float 0xBFEE7B80A0000000, float 0xBFB13404E0000000], [3 x float] [float 0x3FC1610280000000, float 0x3FEFB04040000000, float 0x3F9EF80560000000], [3 x float] [float 0xBFB19C0660000000, float 0x3FE4F37FC0000000, float 0x3FE8160100000000], [3 x float] [float 0x3FE8674080000000, float 0xBFE1A80060000000, float 0x3FD59AFE20000000], [3 x float] [float 0xBFEA3A40E0000000, float 0xBFDA177EA0000000, float 0x3FD9C200C0000000], [3 x float] [float 0xBFE74A7F80000000, float 0xBFE19F7F80000000, float 0xBFDA2580C0000000], [3 x float] [float 0xBFEB628020000000, float 0xBFDEB88000000000, float 0x3FC8ADFF80000000], [3 x float] [float 0x3FE62E7F60000000, float 0xBFB44C05A0000000, float 0x3FE6EC3FC0000000], [3 x float] [float 0x3FCCEDFE80000000, float 0x3FE4CDC020000000, float 0xBFE736BF40000000], [3 x float] [float 0x3FCF93FF20000000, float 0x3FEE81FFC0000000, float 0xBFC636FC20000000], [3 x float] [float 0xBFEF0D8020000000, float 0xBFCE9EFD80000000, float 0xBFA09BF9C0000000], [3 x float] [float 0x3FC174FF80000000, float 0xBFD93C81A0000000, float 0x3FED147F20000000], [3 x float] [float 0x3FEA05FF20000000, float 0x3FE1DC8100000000, float 0x3FC50A02C0000000], [3 x float] [float 0x3FD9E37DE0000000, float 0x3FE191C080000000, float 0xBFE766FF80000000], [3 x float] [float 0xBFD855FFE0000000, float 0xBFE2227F20000000, float 0x3FE7633F00000000], [3 x float] [float 0x3F96B01000000000, float 0x3FEDD8FF80000000, float 0x3FD705FF20000000], [3 x float] [float 0x3F80E02220000000, float 0x3FEFE3C100000000, float 0xBFB5120180000000], [3 x float] [float 0x3FEE9CC100000000, float 0xBFB0B9FDC0000000, float 0xBFD2288060000000], [3 x float] [float 0xBFE7CB4080000000, float 0x3F80CFE160000000, float 0x3FE564FFC0000000], [3 x float] [float 0xBFEB81C0C0000000, float 0xBFE04F3FE0000000, float 0x3FA2500D60000000], [3 x float] [float 0xBFEB458040000000, float 0x3FD7468020000000, float 0xBFD81001E0000000], [3 x float] [float 0xBFC9D9FD40000000, float 0xBFEF10C0A0000000, float 0xBFC087FCC0000000], [3 x float] [float 0x3FD41001E0000000, float 0x3FEE5080C0000000, float 0x3FB0C1FC80000000], [3 x float] [float 0xBFD041FEA0000000, float 0xBFE0E77F60000000, float 0x3FE9ECBFC0000000], [3 x float] [float 0x3FE4190080000000, float 0x3FE33C4080000000, float 0x3FDF9F7F80000000], [3 x float] [float 0xBFDFA40100000000, float 0x3FEBC9C0A0000000, float 0x3FA36BF440000000], [3 x float] [float 0x3FD1A40100000000, float 0xBFB62003A0000000, float 0x3FEEA27F20000000], [3 x float] [float 0xBFC955FFE0000000, float 0x3FDE0281C0000000, float 0xBFEB8B3F60000000], [3 x float] [float 0x3FECA8BF40000000, float 0x3FD98F81E0000000, float 0x3FC91001E0000000], [3 x float] [float 0x3FE1F20000000000, float 0x3FEA667FA0000000, float 0xBFB1B80240000000], [3 x float] [float 0x3FD377FF20000000, float 0xBFEB2EFF60000000, float 0x3FDB95FEE0000000], [3 x float] [float 0x3FB8AC0840000000, float 0x3FEDF1BF00000000, float 0x3FD5B3FEA0000000], [3 x float] [float 0xBFAA53FC00000000, float 0x3FDA2C7FC0000000, float 0xBFED278080000000], [3 x float] [float 0x3FD525FEA0000000, float 0x3FEE2BC0E0000000, float 0xBFA5B402E0000000], [3 x float] [float 0xBFDCF37FC0000000, float 0xBFE92A3F00000000, float 0x3FDAEA8120000000], [3 x float] [float 0x3FC1310120000000, float 0xBFEDDF00A0000000, float 0xBFD5478000000000], [3 x float] [float 0x3FE9A93F20000000, float 0xBFE2227F20000000, float 0xBFC82EFD40000000], [3 x float] [float 0xBFEF9D40E0000000, float 0xBFBB2207A0000000, float 0x3FBCCDFAC0000000], [3 x float] [float 0xBFCF3E0380000000, float 0x3FEC8D3F20000000, float 0xBFD84E7EE0000000], [3 x float] [float 0xBFED74C0A0000000, float 0x3FCD52FC20000000, float 0xBFD43F8120000000], [3 x float] [float 0x3FE8ECBFC0000000, float 0x3FD4DC7F00000000, float 0x3FE12480E0000000], [3 x float] [float 0xBFED363F60000000, float 0x3FC7B4FE80000000, float 0xBFD7480200000000], [3 x float] [float 0xBFC7A70080000000, float 0x3FE21780C0000000, float 0xBFE9B90000000000], [3 x float] [float 0xBF92E7F700000000, float 0x3FBE99FA20000000, float 0x3FEFC38080000000], [3 x float] [float 0xBFD09780C0000000, float 0xBFEDF08040000000, float 0x3FCEA8FC00000000], [3 x float] [float 0xBFEA5BFF00000000, float 0xBFDCBE7F20000000, float 0xBFD623FEE0000000], [3 x float] [float 0xBFDBB7FE00000000, float 0x3FE51ABF40000000, float 0x3FE3A8BF40000000], [3 x float] [float 0xBFEA540040000000, float 0x3FD83EFF20000000, float 0xBFDB1D8200000000], [3 x float] [float 0x3FE5FD8060000000, float 0xBFE5983FA0000000, float 0xBFD1357E60000000], [3 x float] [float 0xBFCF8FFFC0000000, float 0xBFE9A07F60000000, float 0x3FE1767F40000000], [3 x float] [float 0xBFE7558000000000, float 0xBFCA98FE60000000, float 0x3FE4DD0100000000], [3 x float] [float 0x3FE4E9C020000000, float 0xBFE388BFC0000000, float 0xBFDCA20140000000], [3 x float] [float 0x3FDF867F00000000, float 0xBF97E80380000000, float 0x3FEBD67FE0000000], [3 x float] [float 0x3FE37D3F60000000, float 0x3F829FE000000000, float 0xBFE960BF60000000], [3 x float] [float 0x3FEECCC040000000, float 0xBFD1598180000000, float 0xBF821FF2E0000000], [3 x float] [float 0x3FD1048160000000, float 0xBF741FA760000000, float 0x3FEED8C080000000], [3 x float] [float 0x3FE4D6FFC0000000, float 0x3FE1B73F40000000, float 0xBFE09B3F20000000], [3 x float] [float 0x3FD1F47FA0000000, float 0xBFEAFB00C0000000, float 0x3FDD59FF40000000], [3 x float] [float 0xBFC6700040000000, float 0xBFEF767F40000000, float 0x3FA9800A80000000], [3 x float] [float 0x3FA217F420000000, float 0xBFEF5B7F20000000, float 0x3FC91800A0000000], [3 x float] [float 0xBFEF7440A0000000, float 0x3FC5080300000000, float 0xBFB50E0220000000], [3 x float] [float 0x3FCDEAFEE0000000, float 0xBFEF1CC100000000, float 0xBF74801F80000000], [3 x float] [float 0xBFE7E97F20000000, float 0xBFE38FFFC0000000, float 0x3FD0AB0000000000], [3 x float] [float 0x3FE4A8BF40000000, float 0x3FE2F7FF20000000, float 0x3FDECEFEE0000000], [3 x float] [float 0x3FBE21FB00000000, float 0xBFEE628020000000, float 0xBFD29A8040000000], [3 x float] [float 0xBFE11EC0C0000000, float 0xBFE95740C0000000, float 0xBFD2D60200000000], [3 x float] [float 0xBFE411C080000000, float 0xBFCB72FFE0000000, float 0x3FE7F57F80000000], [3 x float] [float 0xBFA8900C60000000, float 0xBFEA0800E0000000, float 0xBFE28C0060000000], [3 x float] [float 0xBFC677FF20000000, float 0x3FDE8B7E40000000, float 0xBFEB8D3F20000000], [3 x float] [float 0x3FE7A24040000000, float 0xBFDA8301A0000000, float 0xBFE104C060000000], [3 x float] [float 0x3FE2007FE0000000, float 0xBFE687BFE0000000, float 0x3FDBBB01C0000000], [3 x float] [float 0xBFE8288060000000, float 0x3FE4BC7F80000000, float 0xBFB9C00100000000], [3 x float] [float 0x3FBD5E0720000000, float 0x3FA6CBFB20000000, float 0xBFEFC180E0000000], [3 x float] [float 0x3FEEE97F20000000, float 0x3FCF57FFA0000000, float 0xBFB5300580000000], [3 x float] [float 0x3FD59F01C0000000, float 0x3FE6E6FF80000000, float 0xBFE38EFFE0000000], [3 x float] [float 0xBFEE358080000000, float 0xBFD4E6FF80000000, float 0xBFA75C0760000000]], align 16
@switch.table.voronoi = private unnamed_addr constant [6 x ptr] [ptr @dist_Squared, ptr @dist_Manhattan, ptr @dist_Chebychev, ptr @dist_MinkovskyH, ptr @dist_Minkovsky4, ptr @dist_Minkovsky], align 8
@switch.table.mg_VLNoise.1 = private unnamed_addr constant [14 x ptr] [ptr @orgPerlinNoise, ptr @newPerlin, ptr @voronoi_F1S, ptr @voronoi_F2S, ptr @voronoi_F3S, ptr @voronoi_F4S, ptr @voronoi_F1F2S, ptr @voronoi_CrS, ptr @orgBlenderNoiseS, ptr @orgBlenderNoiseS, ptr @orgBlenderNoiseS, ptr @orgBlenderNoiseS, ptr @orgBlenderNoiseS, ptr @cellNoise], align 8

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local nofpclass(nan inf) float @BLI_hnoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3) local_unnamed_addr #0 {
  %5 = fcmp fast oeq float %0, 0.000000e+00
  br i1 %5, label %14, label %6

6:                                                ; preds = %4
  %7 = fadd fast float %1, 1.000000e+00
  %8 = fdiv fast float %7, %0
  %9 = fadd fast float %2, 1.000000e+00
  %10 = fdiv fast float %9, %0
  %11 = fadd fast float %3, 1.000000e+00
  %12 = fdiv fast float %11, %0
  %13 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %8, float noundef nofpclass(nan inf) %10, float noundef nofpclass(nan inf) %12)
  br label %14

14:                                               ; preds = %4, %6
  %15 = phi float [ %13, %6 ], [ 0.000000e+00, %4 ]
  ret float %15
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = tail call fast float @llvm.floor.f32(float %0)
  %5 = tail call fast float @llvm.floor.f32(float %1)
  %6 = tail call fast float @llvm.floor.f32(float %2)
  %7 = fsub fast float %0, %4
  %8 = fsub fast float %1, %5
  %9 = fsub fast float %2, %6
  %10 = fptosi float %4 to i32
  %11 = fptosi float %5 to i32
  %12 = fptosi float %6 to i32
  %13 = fadd fast float %7, -1.000000e+00
  %14 = fadd fast float %8, -1.000000e+00
  %15 = fadd fast float %9, -1.000000e+00
  %16 = fmul fast float %9, %9
  %17 = fmul fast float %15, %15
  %18 = fmul fast float %16, 3.000000e+00
  %19 = fsub fast float 1.000000e+00, %18
  %20 = fmul fast float %9, 2.000000e+00
  %21 = fmul fast float %20, %16
  %22 = fadd fast float %19, %21
  %23 = fmul fast float %15, 2.000000e+00
  %24 = fsub fast float -3.000000e+00, %23
  %25 = fmul fast float %17, %24
  %26 = fadd fast float %25, 1.000000e+00
  %27 = and i32 %10, 255
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !5
  %31 = zext i8 %30 to i32
  %32 = and i32 %11, 255
  %33 = add nuw nsw i32 %32, %31
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %34
  %36 = load i8, ptr %35, align 1, !tbaa !5
  %37 = zext i8 %36 to i32
  %38 = add nsw i32 %10, 1
  %39 = and i32 %38, 255
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %40
  %42 = load i8, ptr %41, align 1, !tbaa !5
  %43 = zext i8 %42 to i32
  %44 = add nuw nsw i32 %32, %43
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %45
  %47 = load i8, ptr %46, align 1, !tbaa !5
  %48 = zext i8 %47 to i32
  %49 = add nsw i32 %11, 1
  %50 = and i32 %49, 255
  %51 = add nuw nsw i32 %50, %31
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %52
  %54 = load i8, ptr %53, align 1, !tbaa !5
  %55 = zext i8 %54 to i32
  %56 = add nuw nsw i32 %50, %43
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !5
  %60 = zext i8 %59 to i32
  %61 = and i32 %12, 255
  %62 = add nsw i32 %12, 1
  %63 = and i32 %62, 255
  %64 = add nuw nsw i32 %61, %37
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %65
  %67 = load i8, ptr %66, align 1, !tbaa !5
  %68 = zext i8 %67 to i64
  %69 = mul nuw nsw i64 %68, 3
  %70 = getelementptr inbounds float, ptr @hashvectf, i64 %69
  %71 = load float, ptr %70, align 4, !tbaa !8
  %72 = getelementptr inbounds float, ptr %70, i64 1
  %73 = load float, ptr %72, align 4, !tbaa !8
  %74 = getelementptr inbounds float, ptr %70, i64 2
  %75 = load float, ptr %74, align 4, !tbaa !8
  %76 = add nuw nsw i32 %63, %37
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %77
  %79 = load i8, ptr %78, align 1, !tbaa !5
  %80 = zext i8 %79 to i64
  %81 = mul nuw nsw i64 %80, 3
  %82 = getelementptr inbounds float, ptr @hashvectf, i64 %81
  %83 = load float, ptr %82, align 4, !tbaa !8
  %84 = getelementptr inbounds float, ptr %82, i64 1
  %85 = load float, ptr %84, align 4, !tbaa !8
  %86 = getelementptr inbounds float, ptr %82, i64 2
  %87 = load float, ptr %86, align 4, !tbaa !8
  %88 = add nuw nsw i32 %61, %55
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %89
  %91 = load i8, ptr %90, align 1, !tbaa !5
  %92 = zext i8 %91 to i64
  %93 = mul nuw nsw i64 %92, 3
  %94 = getelementptr inbounds float, ptr @hashvectf, i64 %93
  %95 = load float, ptr %94, align 4, !tbaa !8
  %96 = getelementptr inbounds float, ptr %94, i64 1
  %97 = load float, ptr %96, align 4, !tbaa !8
  %98 = getelementptr inbounds float, ptr %94, i64 2
  %99 = load float, ptr %98, align 4, !tbaa !8
  %100 = add nuw nsw i32 %63, %55
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %101
  %103 = load i8, ptr %102, align 1, !tbaa !5
  %104 = zext i8 %103 to i64
  %105 = mul nuw nsw i64 %104, 3
  %106 = getelementptr inbounds float, ptr @hashvectf, i64 %105
  %107 = load float, ptr %106, align 4, !tbaa !8
  %108 = getelementptr inbounds float, ptr %106, i64 1
  %109 = load float, ptr %108, align 4, !tbaa !8
  %110 = getelementptr inbounds float, ptr %106, i64 2
  %111 = load float, ptr %110, align 4, !tbaa !8
  %112 = add nuw nsw i32 %61, %48
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %113
  %115 = load i8, ptr %114, align 1, !tbaa !5
  %116 = zext i8 %115 to i64
  %117 = mul nuw nsw i64 %116, 3
  %118 = getelementptr inbounds float, ptr @hashvectf, i64 %117
  %119 = load float, ptr %118, align 4, !tbaa !8
  %120 = getelementptr inbounds float, ptr %118, i64 1
  %121 = load float, ptr %120, align 4, !tbaa !8
  %122 = getelementptr inbounds float, ptr %118, i64 2
  %123 = load float, ptr %122, align 4, !tbaa !8
  %124 = add nuw nsw i32 %63, %48
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %125
  %127 = load i8, ptr %126, align 1, !tbaa !5
  %128 = zext i8 %127 to i64
  %129 = mul nuw nsw i64 %128, 3
  %130 = getelementptr inbounds float, ptr @hashvectf, i64 %129
  %131 = load float, ptr %130, align 4, !tbaa !8
  %132 = getelementptr inbounds float, ptr %130, i64 1
  %133 = load float, ptr %132, align 4, !tbaa !8
  %134 = getelementptr inbounds float, ptr %130, i64 2
  %135 = load float, ptr %134, align 4, !tbaa !8
  %136 = add nuw nsw i32 %61, %60
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %137
  %139 = load i8, ptr %138, align 1, !tbaa !5
  %140 = zext i8 %139 to i64
  %141 = mul nuw nsw i64 %140, 3
  %142 = getelementptr inbounds float, ptr @hashvectf, i64 %141
  %143 = load float, ptr %142, align 4, !tbaa !8
  %144 = getelementptr inbounds float, ptr %142, i64 1
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = getelementptr inbounds float, ptr %142, i64 2
  %147 = load float, ptr %146, align 4, !tbaa !8
  %148 = add nuw nsw i32 %63, %60
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %149
  %151 = load i8, ptr %150, align 1, !tbaa !5
  %152 = zext i8 %151 to i64
  %153 = mul nuw nsw i64 %152, 3
  %154 = getelementptr inbounds float, ptr @hashvectf, i64 %153
  %155 = load float, ptr %154, align 4, !tbaa !8
  %156 = getelementptr inbounds float, ptr %154, i64 1
  %157 = load float, ptr %156, align 4, !tbaa !8
  %158 = getelementptr inbounds float, ptr %154, i64 2
  %159 = load float, ptr %158, align 4, !tbaa !8
  %160 = insertelement <2 x float> poison, float %7, i64 0
  %161 = insertelement <2 x float> %160, float %13, i64 1
  %162 = fmul fast <2 x float> %161, %161
  %163 = insertelement <2 x float> poison, float %8, i64 0
  %164 = insertelement <2 x float> %163, float %14, i64 1
  %165 = fmul fast <2 x float> %164, %164
  %166 = fmul fast <2 x float> %162, <float 3.000000e+00, float 3.000000e+00>
  %167 = fmul fast <2 x float> %161, <float 2.000000e+00, float -2.000000e+00>
  %168 = fmul fast <2 x float> %167, %162
  %169 = fsub fast <2 x float> <float 1.000000e+00, float 1.000000e+00>, %166
  %170 = fadd fast <2 x float> %169, %168
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %172 = fmul fast <2 x float> %165, <float 3.000000e+00, float 3.000000e+00>
  %173 = fmul fast <2 x float> %164, <float 2.000000e+00, float -2.000000e+00>
  %174 = fmul fast <2 x float> %173, %165
  %175 = fsub fast <2 x float> <float 1.000000e+00, float 1.000000e+00>, %172
  %176 = fadd fast <2 x float> %175, %174
  %177 = shufflevector <2 x float> %176, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %178 = fmul fast <4 x float> %177, %171
  %179 = insertelement <4 x float> poison, float %71, i64 0
  %180 = insertelement <4 x float> %179, float %95, i64 1
  %181 = insertelement <4 x float> %180, float %121, i64 2
  %182 = insertelement <4 x float> %181, float %143, i64 3
  %183 = insertelement <4 x float> poison, float %7, i64 0
  %184 = insertelement <4 x float> %183, float %8, i64 2
  %185 = insertelement <4 x float> %184, float %13, i64 3
  %186 = shufflevector <4 x float> %185, <4 x float> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 3>
  %187 = fmul fast <4 x float> %182, %186
  %188 = insertelement <4 x float> poison, float %73, i64 0
  %189 = insertelement <4 x float> %188, float %97, i64 1
  %190 = insertelement <4 x float> %189, float %119, i64 2
  %191 = insertelement <4 x float> %190, float %145, i64 3
  %192 = insertelement <4 x float> poison, float %8, i64 0
  %193 = insertelement <4 x float> %192, float %14, i64 1
  %194 = insertelement <4 x float> %193, float %13, i64 2
  %195 = shufflevector <4 x float> %194, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %196 = fmul fast <4 x float> %191, %195
  %197 = fadd fast <4 x float> %196, %187
  %198 = insertelement <4 x float> poison, float %75, i64 0
  %199 = insertelement <4 x float> %198, float %99, i64 1
  %200 = insertelement <4 x float> %199, float %123, i64 2
  %201 = insertelement <4 x float> %200, float %147, i64 3
  %202 = insertelement <4 x float> poison, float %9, i64 0
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <4 x i32> zeroinitializer
  %204 = fmul fast <4 x float> %201, %203
  %205 = fadd fast <4 x float> %197, %204
  %206 = fmul fast <4 x float> %205, %178
  %207 = insertelement <4 x float> poison, float %83, i64 0
  %208 = insertelement <4 x float> %207, float %107, i64 1
  %209 = insertelement <4 x float> %208, float %133, i64 2
  %210 = insertelement <4 x float> %209, float %155, i64 3
  %211 = shufflevector <2 x float> %160, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %212 = insertelement <4 x float> %211, float %7, i64 1
  %213 = insertelement <4 x float> %212, float %8, i64 2
  %214 = insertelement <4 x float> %213, float %13, i64 3
  %215 = fmul fast <4 x float> %210, %214
  %216 = insertelement <4 x float> poison, float %85, i64 0
  %217 = insertelement <4 x float> %216, float %109, i64 1
  %218 = insertelement <4 x float> %217, float %131, i64 2
  %219 = insertelement <4 x float> %218, float %157, i64 3
  %220 = shufflevector <2 x float> %163, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %221 = insertelement <4 x float> %220, float %14, i64 1
  %222 = insertelement <4 x float> %221, float %13, i64 2
  %223 = shufflevector <4 x float> %222, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 1>
  %224 = fmul fast <4 x float> %219, %223
  %225 = fadd fast <4 x float> %224, %215
  %226 = insertelement <4 x float> poison, float %87, i64 0
  %227 = insertelement <4 x float> %226, float %111, i64 1
  %228 = insertelement <4 x float> %227, float %135, i64 2
  %229 = insertelement <4 x float> %228, float %159, i64 3
  %230 = insertelement <4 x float> poison, float %15, i64 0
  %231 = shufflevector <4 x float> %230, <4 x float> poison, <4 x i32> zeroinitializer
  %232 = fmul fast <4 x float> %229, %231
  %233 = fadd fast <4 x float> %225, %232
  %234 = fmul fast <4 x float> %233, %178
  %235 = tail call fast float @llvm.vector.reduce.fadd.v4f32(float -0.000000e+00, <4 x float> %234)
  %236 = fmul fast float %235, %26
  %237 = tail call fast float @llvm.vector.reduce.fadd.v4f32(float -0.000000e+00, <4 x float> %206)
  %238 = fmul fast float %237, %22
  %239 = fadd fast float %238, 5.000000e-01
  %240 = fadd fast float %239, %236
  %241 = fcmp fast olt float %240, 0.000000e+00
  br i1 %241, label %245, label %242

242:                                              ; preds = %3
  %243 = fcmp fast ogt float %240, 1.000000e+00
  br i1 %243, label %244, label %245

244:                                              ; preds = %242
  br label %245

245:                                              ; preds = %3, %242, %244
  %246 = phi float [ 1.000000e+00, %244 ], [ %240, %242 ], [ 0.000000e+00, %3 ]
  ret float %246
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define dso_local nofpclass(nan inf) float @BLI_turbulence(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, i32 noundef %4) local_unnamed_addr #1 {
  %6 = fcmp fast oeq float %0, 0.000000e+00
  br i1 %6, label %15, label %7

7:                                                ; preds = %5
  %8 = fadd fast float %1, 1.000000e+00
  %9 = fdiv fast float %8, %0
  %10 = fadd fast float %2, 1.000000e+00
  %11 = fdiv fast float %10, %0
  %12 = fadd fast float %3, 1.000000e+00
  %13 = fdiv fast float %12, %0
  %14 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %9, float noundef nofpclass(nan inf) %11, float noundef nofpclass(nan inf) %13)
  br label %15

15:                                               ; preds = %5, %7
  %16 = phi float [ %14, %7 ], [ 0.000000e+00, %5 ]
  %17 = icmp sgt i32 %4, 0
  br i1 %17, label %18, label %42

18:                                               ; preds = %15
  %19 = fadd fast float %1, 1.000000e+00
  %20 = fadd fast float %2, 1.000000e+00
  %21 = fadd fast float %3, 1.000000e+00
  br label %22

22:                                               ; preds = %18, %34
  %23 = phi float [ 1.000000e+00, %18 ], [ %38, %34 ]
  %24 = phi float [ 5.000000e-01, %18 ], [ %39, %34 ]
  %25 = phi float [ %16, %18 ], [ %37, %34 ]
  %26 = phi i32 [ %4, %18 ], [ %40, %34 ]
  %27 = fmul fast float %24, %0
  %28 = fcmp fast oeq float %27, 0.000000e+00
  br i1 %28, label %34, label %29

29:                                               ; preds = %22
  %30 = fdiv fast float %19, %27
  %31 = fdiv fast float %20, %27
  %32 = fdiv fast float %21, %27
  %33 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %30, float noundef nofpclass(nan inf) %31, float noundef nofpclass(nan inf) %32)
  br label %34

34:                                               ; preds = %22, %29
  %35 = phi float [ %33, %29 ], [ 0.000000e+00, %22 ]
  %36 = fmul fast float %35, %24
  %37 = fadd fast float %36, %25
  %38 = fadd fast float %23, %24
  %39 = fmul fast float %24, 5.000000e-01
  %40 = add nsw i32 %26, -1
  %41 = icmp sgt i32 %26, 1
  br i1 %41, label %22, label %42, !llvm.loop !10

42:                                               ; preds = %34, %15
  %43 = phi float [ %16, %15 ], [ %37, %34 ]
  %44 = phi float [ 1.000000e+00, %15 ], [ %38, %34 ]
  %45 = fdiv fast float %43, %44
  ret float %45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #2

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define dso_local nofpclass(nan inf) float @BLI_turbulence1(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, i32 noundef %4) local_unnamed_addr #1 {
  %6 = fcmp fast oeq float %0, 0.000000e+00
  br i1 %6, label %17, label %7

7:                                                ; preds = %5
  %8 = fadd fast float %1, 1.000000e+00
  %9 = fdiv fast float %8, %0
  %10 = fadd fast float %2, 1.000000e+00
  %11 = fdiv fast float %10, %0
  %12 = fadd fast float %3, 1.000000e+00
  %13 = fdiv fast float %12, %0
  %14 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %9, float noundef nofpclass(nan inf) %11, float noundef nofpclass(nan inf) %13)
  %15 = fmul fast float %14, 2.000000e+00
  %16 = fadd fast float %15, -1.000000e+00
  br label %17

17:                                               ; preds = %5, %7
  %18 = phi float [ %16, %7 ], [ -1.000000e+00, %5 ]
  %19 = tail call fast float @llvm.fabs.f32(float %18)
  %20 = icmp sgt i32 %4, 0
  br i1 %20, label %21, label %48

21:                                               ; preds = %17
  %22 = fadd fast float %1, 1.000000e+00
  %23 = fadd fast float %2, 1.000000e+00
  %24 = fadd fast float %3, 1.000000e+00
  br label %25

25:                                               ; preds = %21, %37
  %26 = phi float [ 1.000000e+00, %21 ], [ %44, %37 ]
  %27 = phi float [ 5.000000e-01, %21 ], [ %45, %37 ]
  %28 = phi float [ %19, %21 ], [ %43, %37 ]
  %29 = phi i32 [ %4, %21 ], [ %46, %37 ]
  %30 = fmul fast float %27, %0
  %31 = fcmp fast oeq float %30, 0.000000e+00
  br i1 %31, label %37, label %32

32:                                               ; preds = %25
  %33 = fdiv fast float %22, %30
  %34 = fdiv fast float %23, %30
  %35 = fdiv fast float %24, %30
  %36 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %33, float noundef nofpclass(nan inf) %34, float noundef nofpclass(nan inf) %35)
  br label %37

37:                                               ; preds = %25, %32
  %38 = phi float [ %36, %32 ], [ 0.000000e+00, %25 ]
  %39 = fmul fast float %38, 2.000000e+00
  %40 = fadd fast float %39, -1.000000e+00
  %41 = fmul fast float %40, %27
  %42 = tail call fast float @llvm.fabs.f32(float %41)
  %43 = fadd fast float %42, %28
  %44 = fadd fast float %26, %27
  %45 = fmul fast float %27, 5.000000e-01
  %46 = add nsw i32 %29, -1
  %47 = icmp sgt i32 %29, 1
  br i1 %47, label %25, label %48, !llvm.loop !12

48:                                               ; preds = %37, %17
  %49 = phi float [ %19, %17 ], [ %43, %37 ]
  %50 = phi float [ 1.000000e+00, %17 ], [ %44, %37 ]
  %51 = fdiv fast float %49, %50
  ret float %51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #3

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local nofpclass(nan inf) float @BLI_hnoisep(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3) local_unnamed_addr #0 {
  %5 = alloca [3 x float], align 8
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #9
  %6 = insertelement <2 x float> poison, float %1, i64 0
  %7 = insertelement <2 x float> %6, float %2, i64 1
  %8 = insertelement <2 x float> poison, float %0, i64 0
  %9 = shufflevector <2 x float> %8, <2 x float> poison, <2 x i32> zeroinitializer
  %10 = fdiv fast <2 x float> %7, %9
  store <2 x float> %10, ptr %5, align 8, !tbaa !8
  %11 = fdiv fast float %3, %0
  %12 = getelementptr inbounds [3 x float], ptr %5, i64 0, i64 2
  store float %11, ptr %12, align 8, !tbaa !8
  %13 = call fast fastcc nofpclass(nan inf) float @noise3_perlin(ptr noundef nonnull %5)
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #9
  ret float %13
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define internal fastcc nofpclass(nan inf) float @noise3_perlin(ptr nocapture noundef readonly %0) unnamed_addr #4 {
  %2 = load float, ptr %0, align 4, !tbaa !8
  %3 = fadd fast float %2, 1.000000e+04
  %4 = fptosi float %3 to i32
  %5 = and i32 %4, 255
  %6 = add i32 %4, 1
  %7 = and i32 %6, 255
  %8 = tail call fast float @llvm.floor.f32(float %3)
  %9 = fsub fast float %3, %8
  %10 = fadd fast float %9, -1.000000e+00
  %11 = getelementptr inbounds float, ptr %0, i64 1
  %12 = zext i32 %5 to i64
  %13 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !5
  %15 = zext i8 %14 to i32
  %16 = zext i32 %7 to i64
  %17 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !5
  %19 = zext i8 %18 to i32
  %20 = fmul fast float %9, %9
  %21 = fmul fast float %9, 2.000000e+00
  %22 = fsub fast float 3.000000e+00, %21
  %23 = fmul fast float %20, %22
  %24 = load <2 x float>, ptr %11, align 4, !tbaa !8
  %25 = fadd fast <2 x float> %24, <float 1.000000e+04, float 1.000000e+04>
  %26 = extractelement <2 x float> %25, i64 0
  %27 = fptosi float %26 to i32
  %28 = and i32 %27, 255
  %29 = add i32 %27, 1
  %30 = and i32 %29, 255
  %31 = tail call fast <2 x float> @llvm.floor.v2f32(<2 x float> %25)
  %32 = fsub fast <2 x float> %25, %31
  %33 = extractelement <2 x float> %25, i64 1
  %34 = fptosi float %33 to i32
  %35 = and i32 %34, 255
  %36 = add i32 %34, 1
  %37 = and i32 %36, 255
  %38 = add nuw nsw i32 %28, %15
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %39
  %41 = load i8, ptr %40, align 1, !tbaa !5
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %28, %19
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %44
  %46 = load i8, ptr %45, align 1, !tbaa !5
  %47 = zext i8 %46 to i32
  %48 = add nuw nsw i32 %30, %15
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !5
  %52 = zext i8 %51 to i32
  %53 = add nuw nsw i32 %30, %19
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [514 x i8], ptr @p, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !5
  %57 = zext i8 %56 to i32
  %58 = extractelement <2 x float> %32, i64 0
  %59 = fmul fast <2 x float> %32, %32
  %60 = extractelement <2 x float> %59, i64 0
  %61 = fmul fast float %58, 2.000000e+00
  %62 = fsub fast float 3.000000e+00, %61
  %63 = fmul fast float %60, %62
  %64 = extractelement <2 x float> %32, i64 1
  %65 = fmul fast float %64, %64
  %66 = fmul fast float %64, 2.000000e+00
  %67 = fsub fast float 3.000000e+00, %66
  %68 = fmul fast float %65, %67
  %69 = add nuw nsw i32 %35, %42
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %70
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fmul fast float %72, %9
  %74 = getelementptr inbounds float, ptr %71, i64 1
  %75 = load <2 x float>, ptr %74, align 4, !tbaa !8
  %76 = fmul fast <2 x float> %75, %32
  %77 = extractelement <2 x float> %76, i64 0
  %78 = fadd fast float %77, %73
  %79 = extractelement <2 x float> %76, i64 1
  %80 = fadd fast float %78, %79
  %81 = add nuw nsw i32 %35, %47
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %82
  %84 = load float, ptr %83, align 4, !tbaa !8
  %85 = fmul fast float %84, %10
  %86 = getelementptr inbounds float, ptr %83, i64 1
  %87 = load <2 x float>, ptr %86, align 4, !tbaa !8
  %88 = fmul fast <2 x float> %87, %32
  %89 = fsub fast float %85, %80
  %90 = extractelement <2 x float> %88, i64 0
  %91 = fadd fast float %89, %90
  %92 = extractelement <2 x float> %88, i64 1
  %93 = fadd fast float %91, %92
  %94 = fmul fast float %93, %23
  %95 = fadd fast float %94, %80
  %96 = add nuw nsw i32 %35, %52
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %97
  %99 = load float, ptr %98, align 4, !tbaa !8
  %100 = fmul fast float %99, %9
  %101 = getelementptr inbounds float, ptr %98, i64 1
  %102 = load float, ptr %101, align 4, !tbaa !8
  %103 = getelementptr inbounds float, ptr %98, i64 2
  %104 = load float, ptr %103, align 4, !tbaa !8
  %105 = fmul fast float %104, %64
  %106 = add nuw nsw i32 %35, %57
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %107
  %109 = load float, ptr %108, align 4, !tbaa !8
  %110 = fmul fast float %109, %10
  %111 = getelementptr inbounds float, ptr %108, i64 1
  %112 = load float, ptr %111, align 4, !tbaa !8
  %113 = getelementptr inbounds float, ptr %108, i64 2
  %114 = load float, ptr %113, align 4, !tbaa !8
  %115 = fmul fast float %114, %64
  %116 = add nuw nsw i32 %37, %42
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %117
  %119 = load float, ptr %118, align 4, !tbaa !8
  %120 = fmul fast float %119, %9
  %121 = getelementptr inbounds float, ptr %118, i64 1
  %122 = load float, ptr %121, align 4, !tbaa !8
  %123 = fmul fast float %122, %58
  %124 = fadd fast float %123, %120
  %125 = getelementptr inbounds float, ptr %118, i64 2
  %126 = load float, ptr %125, align 4, !tbaa !8
  %127 = add nuw nsw i32 %37, %47
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %128
  %130 = load float, ptr %129, align 4, !tbaa !8
  %131 = fmul fast float %130, %10
  %132 = getelementptr inbounds float, ptr %129, i64 1
  %133 = load float, ptr %132, align 4, !tbaa !8
  %134 = fmul fast float %133, %58
  %135 = getelementptr inbounds float, ptr %129, i64 2
  %136 = load float, ptr %135, align 4, !tbaa !8
  %137 = add nuw nsw i32 %37, %52
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %138
  %140 = load float, ptr %139, align 4, !tbaa !8
  %141 = fmul fast float %140, %9
  %142 = getelementptr inbounds float, ptr %139, i64 1
  %143 = fadd fast <2 x float> %32, <float -1.000000e+00, float -1.000000e+00>
  %144 = extractelement <2 x float> %143, i64 0
  %145 = fmul fast float %102, %144
  %146 = fadd fast float %145, %100
  %147 = fadd fast float %146, %105
  %148 = fmul fast float %112, %144
  %149 = fsub fast float %110, %147
  %150 = fadd fast float %149, %148
  %151 = fadd fast float %150, %115
  %152 = fmul fast float %151, %23
  %153 = fsub fast float %147, %95
  %154 = fadd fast float %153, %152
  %155 = fmul fast float %154, %63
  %156 = fadd fast float %155, %95
  %157 = extractelement <2 x float> %143, i64 1
  %158 = fmul fast float %126, %157
  %159 = fadd fast float %124, %158
  %160 = fmul fast float %136, %157
  %161 = fsub fast float %131, %159
  %162 = fadd fast float %161, %134
  %163 = fadd fast float %162, %160
  %164 = fmul fast float %163, %23
  %165 = fadd fast float %164, %159
  %166 = load <2 x float>, ptr %142, align 4, !tbaa !8
  %167 = fmul fast <2 x float> %166, %143
  %168 = extractelement <2 x float> %167, i64 0
  %169 = fadd fast float %168, %141
  %170 = extractelement <2 x float> %167, i64 1
  %171 = fadd fast float %169, %170
  %172 = add nuw nsw i32 %37, %57
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [514 x [3 x float]], ptr @g, i64 0, i64 %173
  %175 = load float, ptr %174, align 4, !tbaa !8
  %176 = fmul fast float %175, %10
  %177 = getelementptr inbounds float, ptr %174, i64 1
  %178 = load <2 x float>, ptr %177, align 4, !tbaa !8
  %179 = fmul fast <2 x float> %178, %143
  %180 = fsub fast float %176, %171
  %181 = extractelement <2 x float> %179, i64 0
  %182 = fadd fast float %180, %181
  %183 = extractelement <2 x float> %179, i64 1
  %184 = fadd fast float %182, %183
  %185 = fmul fast float %184, %23
  %186 = fsub fast float %171, %165
  %187 = fadd fast float %186, %185
  %188 = fmul fast float %187, %63
  %189 = fsub fast float %165, %156
  %190 = fadd fast float %189, %188
  %191 = fmul fast float %68, %190
  %192 = fadd fast float %191, %156
  %193 = fmul fast float %192, 1.500000e+00
  ret float %193
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @voronoi(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, ptr nocapture noundef %3, ptr nocapture noundef %4, float noundef nofpclass(nan inf) %5, i32 noundef %6) local_unnamed_addr #5 {
  %8 = add i32 %6, -1
  %9 = icmp ult i32 %8, 6
  br i1 %9, label %10, label %14

10:                                               ; preds = %7
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds [6 x ptr], ptr @switch.table.voronoi, i64 0, i64 %11
  %13 = load ptr, ptr %12, align 8
  br label %14

14:                                               ; preds = %7, %10
  %15 = phi ptr [ %13, %10 ], [ @dist_Real, %7 ]
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = getelementptr inbounds float, ptr %3, i64 3
  %23 = getelementptr inbounds float, ptr %3, i64 2
  %24 = getelementptr inbounds float, ptr %3, i64 1
  store <4 x float> <float 1.000000e+10, float 1.000000e+10, float 1.000000e+10, float 1.000000e+10>, ptr %3, align 4, !tbaa !8
  %25 = add nsw i32 %17, -1
  %26 = add nsw i32 %19, -1
  %27 = add nsw i32 %21, -1
  %28 = getelementptr inbounds float, ptr %4, i64 9
  %29 = getelementptr inbounds float, ptr %4, i64 10
  %30 = getelementptr inbounds float, ptr %4, i64 11
  %31 = getelementptr inbounds float, ptr %4, i64 6
  %32 = getelementptr inbounds float, ptr %4, i64 7
  %33 = getelementptr inbounds float, ptr %4, i64 8
  %34 = getelementptr inbounds float, ptr %4, i64 3
  %35 = getelementptr inbounds float, ptr %4, i64 4
  %36 = getelementptr inbounds float, ptr %4, i64 5
  %37 = getelementptr inbounds float, ptr %4, i64 1
  %38 = getelementptr inbounds float, ptr %4, i64 2
  br label %39

39:                                               ; preds = %14, %110
  %40 = phi i32 [ %25, %14 ], [ %111, %110 ]
  %41 = trunc i32 %40 to i8
  %42 = sitofp i32 %40 to float
  br label %43

43:                                               ; preds = %39, %107
  %44 = phi i32 [ %26, %39 ], [ %108, %107 ]
  %45 = trunc i32 %44 to i8
  %46 = sitofp i32 %44 to float
  br label %47

47:                                               ; preds = %43, %104
  %48 = phi i32 [ %27, %43 ], [ %105, %104 ]
  %49 = and i32 %48, 255
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %50
  %52 = load i8, ptr %51, align 1, !tbaa !5
  %53 = add i8 %52, %45
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !5
  %57 = add i8 %56, %41
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = zext i8 %60 to i64
  %62 = mul nuw nsw i64 %61, 3
  %63 = getelementptr inbounds float, ptr @hashpntf, i64 %62
  %64 = load float, ptr %63, align 4, !tbaa !8
  %65 = fadd fast float %64, %42
  %66 = fsub fast float %0, %65
  %67 = getelementptr inbounds float, ptr %63, i64 1
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %46
  %70 = fsub fast float %1, %69
  %71 = getelementptr inbounds float, ptr %63, i64 2
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = sitofp i32 %48 to float
  %74 = fadd fast float %72, %73
  %75 = fsub fast float %2, %74
  %76 = tail call fast nofpclass(nan inf) float %15(float noundef nofpclass(nan inf) %66, float noundef nofpclass(nan inf) %70, float noundef nofpclass(nan inf) %75, float noundef nofpclass(nan inf) %5) #9
  %77 = load float, ptr %3, align 4, !tbaa !8
  %78 = fcmp fast olt float %76, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %47
  %80 = load <2 x float>, ptr %24, align 4, !tbaa !8
  store <2 x float> %80, ptr %23, align 4, !tbaa !8
  store float %77, ptr %24, align 4, !tbaa !8
  store float %76, ptr %3, align 4, !tbaa !8
  %81 = load float, ptr %33, align 4, !tbaa !8
  store float %81, ptr %30, align 4, !tbaa !8
  %82 = load <8 x float>, ptr %4, align 4, !tbaa !8
  store <8 x float> %82, ptr %34, align 4, !tbaa !8
  br label %100

83:                                               ; preds = %47
  %84 = load <2 x float>, ptr %24, align 4, !tbaa !8
  %85 = extractelement <2 x float> %84, i64 0
  %86 = fcmp fast olt float %76, %85
  br i1 %86, label %87, label %90

87:                                               ; preds = %83
  store <2 x float> %84, ptr %23, align 4, !tbaa !8
  store float %76, ptr %24, align 4, !tbaa !8
  %88 = load <2 x float>, ptr %32, align 4, !tbaa !8
  store <2 x float> %88, ptr %29, align 4, !tbaa !8
  %89 = load <4 x float>, ptr %34, align 4, !tbaa !8
  store <4 x float> %89, ptr %31, align 4, !tbaa !8
  br label %100

90:                                               ; preds = %83
  %91 = extractelement <2 x float> %84, i64 1
  %92 = fcmp fast olt float %76, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %90
  store float %91, ptr %22, align 4, !tbaa !8
  store float %76, ptr %23, align 4, !tbaa !8
  %94 = load <2 x float>, ptr %31, align 4, !tbaa !8
  store <2 x float> %94, ptr %28, align 4, !tbaa !8
  %95 = load float, ptr %33, align 4, !tbaa !8
  store float %95, ptr %30, align 4, !tbaa !8
  br label %100

96:                                               ; preds = %90
  %97 = load float, ptr %22, align 4, !tbaa !8
  %98 = fcmp fast olt float %76, %97
  br i1 %98, label %99, label %104

99:                                               ; preds = %96
  store float %76, ptr %22, align 4, !tbaa !8
  br label %100

100:                                              ; preds = %79, %93, %99, %87
  %101 = phi ptr [ %34, %87 ], [ %28, %99 ], [ %31, %93 ], [ %4, %79 ]
  %102 = phi ptr [ %35, %87 ], [ %29, %99 ], [ %32, %93 ], [ %37, %79 ]
  %103 = phi ptr [ %36, %87 ], [ %30, %99 ], [ %33, %93 ], [ %38, %79 ]
  store float %65, ptr %101, align 4, !tbaa !8
  store float %69, ptr %102, align 4, !tbaa !8
  store float %74, ptr %103, align 4, !tbaa !8
  br label %104

104:                                              ; preds = %100, %96
  %105 = add nsw i32 %48, 1
  %106 = icmp sgt i32 %48, %21
  br i1 %106, label %107, label %47, !llvm.loop !13

107:                                              ; preds = %104
  %108 = add nsw i32 %44, 1
  %109 = icmp sgt i32 %44, %19
  br i1 %109, label %110, label %43, !llvm.loop !14

110:                                              ; preds = %107
  %111 = add nsw i32 %40, 1
  %112 = icmp sgt i32 %40, %17
  br i1 %112, label %113, label %39, !llvm.loop !15

113:                                              ; preds = %110
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Squared(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #6 {
  %5 = fmul fast float %0, %0
  %6 = fmul fast float %1, %1
  %7 = fadd fast float %6, %5
  %8 = fmul fast float %2, %2
  %9 = fadd fast float %7, %8
  ret float %9
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Manhattan(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = tail call fast float @llvm.fabs.f32(float %0)
  %6 = tail call fast float @llvm.fabs.f32(float %1)
  %7 = fadd fast float %6, %5
  %8 = tail call fast float @llvm.fabs.f32(float %2)
  %9 = fadd fast float %7, %8
  ret float %9
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Chebychev(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = tail call fast float @llvm.fabs.f32(float %0)
  %6 = tail call fast float @llvm.fabs.f32(float %1)
  %7 = tail call fast float @llvm.fabs.f32(float %2)
  %8 = tail call fast float @llvm.maxnum.f32(float %5, float %6)
  %9 = tail call fast float @llvm.maxnum.f32(float %7, float %8)
  ret float %9
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_MinkovskyH(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = insertelement <2 x float> poison, float %1, i64 0
  %6 = insertelement <2 x float> %5, float %0, i64 1
  %7 = tail call fast <2 x float> @llvm.fabs.v2f32(<2 x float> %6)
  %8 = tail call fast <2 x float> @llvm.sqrt.v2f32(<2 x float> %7)
  %9 = shufflevector <2 x float> %8, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %10 = fadd fast <2 x float> %8, %9
  %11 = extractelement <2 x float> %10, i64 0
  %12 = tail call fast float @llvm.fabs.f32(float %2)
  %13 = tail call fast float @llvm.sqrt.f32(float %12)
  %14 = fadd fast float %11, %13
  %15 = fmul fast float %14, %14
  ret float %15
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Minkovsky4(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = fmul fast float %0, %0
  %6 = fmul fast float %1, %1
  %7 = fmul fast float %2, %2
  %8 = fmul fast float %5, %5
  %9 = fmul fast float %6, %6
  %10 = fadd fast float %9, %8
  %11 = fmul fast float %7, %7
  %12 = fadd fast float %10, %11
  %13 = tail call fast float @llvm.sqrt.f32(float %12)
  %14 = tail call fast float @llvm.sqrt.f32(float %13)
  ret float %14
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Minkovsky(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = tail call fast float @llvm.fabs.f32(float %0)
  %6 = tail call fast float @llvm.pow.f32(float %5, float %3)
  %7 = tail call fast float @llvm.fabs.f32(float %1)
  %8 = tail call fast float @llvm.pow.f32(float %7, float %3)
  %9 = fadd fast float %6, %8
  %10 = tail call fast float @llvm.fabs.f32(float %2)
  %11 = tail call fast float @llvm.pow.f32(float %10, float %3)
  %12 = fadd fast float %9, %11
  %13 = fdiv fast float 1.000000e+00, %3
  %14 = tail call fast float @llvm.pow.f32(float %12, float %13)
  ret float %14
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @dist_Real(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float nofpclass(nan inf) %3) unnamed_addr #0 {
  %5 = fmul fast float %0, %0
  %6 = fmul fast float %1, %1
  %7 = fadd fast float %6, %5
  %8 = fmul fast float %2, %2
  %9 = fadd fast float %7, %8
  %10 = tail call fast float @llvm.sqrt.f32(float %9)
  ret float %10
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define dso_local nofpclass(nan inf) float @cellNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) local_unnamed_addr #0 {
  %4 = tail call fast float @llvm.floor.f32(float %0)
  %5 = fptosi float %4 to i32
  %6 = tail call fast float @llvm.floor.f32(float %1)
  %7 = fptosi float %6 to i32
  %8 = tail call fast float @llvm.floor.f32(float %2)
  %9 = fptosi float %8 to i32
  %10 = mul nsw i32 %7, 1301
  %11 = add nsw i32 %10, %5
  %12 = mul nsw i32 %9, 314159
  %13 = add nsw i32 %11, %12
  %14 = shl i32 %13, 13
  %15 = xor i32 %14, %13
  %16 = mul i32 %15, 15731
  %17 = mul i32 %16, %15
  %18 = add i32 %17, 789221
  %19 = mul i32 %18, %15
  %20 = add i32 %19, 1376312589
  %21 = uitofp i32 %20 to float
  %22 = fmul fast float %21, 0x3E00000000000000
  %23 = fadd fast float %22, -1.000000e+00
  ret float %23
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @cellNoiseU(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = tail call fast float @llvm.floor.f32(float %0)
  %5 = fptosi float %4 to i32
  %6 = tail call fast float @llvm.floor.f32(float %1)
  %7 = fptosi float %6 to i32
  %8 = tail call fast float @llvm.floor.f32(float %2)
  %9 = fptosi float %8 to i32
  %10 = mul nsw i32 %7, 1301
  %11 = add nsw i32 %10, %5
  %12 = mul nsw i32 %9, 314159
  %13 = add nsw i32 %11, %12
  %14 = shl i32 %13, 13
  %15 = xor i32 %14, %13
  %16 = mul i32 %15, 15731
  %17 = mul i32 %16, %15
  %18 = add i32 %17, 789221
  %19 = mul i32 %18, %15
  %20 = add i32 %19, 1376312589
  %21 = uitofp i32 %20 to float
  %22 = fmul fast float %21, 0x3DF0000000000000
  ret float %22
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @cellNoiseV(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #7 {
  %5 = tail call fast float @llvm.floor.f32(float %0)
  %6 = fptosi float %5 to i32
  %7 = tail call fast float @llvm.floor.f32(float %1)
  %8 = fptosi float %7 to i32
  %9 = tail call fast float @llvm.floor.f32(float %2)
  %10 = fptosi float %9 to i32
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !5
  %15 = trunc i32 %8 to i8
  %16 = add i8 %14, %15
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %17
  %19 = load i8, ptr %18, align 1, !tbaa !5
  %20 = trunc i32 %6 to i8
  %21 = add i8 %19, %20
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !5
  %25 = zext i8 %24 to i64
  %26 = mul nuw nsw i64 %25, 3
  %27 = getelementptr inbounds float, ptr @hashpntf, i64 %26
  %28 = load <2 x float>, ptr %27, align 4, !tbaa !8
  store <2 x float> %28, ptr %3, align 4, !tbaa !8
  %29 = getelementptr inbounds float, ptr %27, i64 2
  %30 = load float, ptr %29, align 4, !tbaa !8
  %31 = getelementptr inbounds float, ptr %3, i64 2
  store float %30, ptr %31, align 4, !tbaa !8
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @BLI_gNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #5 {
  switch i32 %5, label %15 [
    i32 1, label %19
    i32 2, label %7
    i32 3, label %8
    i32 4, label %9
    i32 5, label %10
    i32 6, label %11
    i32 7, label %12
    i32 8, label %13
    i32 14, label %14
  ]

7:                                                ; preds = %6
  br label %19

8:                                                ; preds = %6
  br label %19

9:                                                ; preds = %6
  br label %19

10:                                               ; preds = %6
  br label %19

11:                                               ; preds = %6
  br label %19

12:                                               ; preds = %6
  br label %19

13:                                               ; preds = %6
  br label %19

14:                                               ; preds = %6
  br label %19

15:                                               ; preds = %6
  %16 = fadd fast float %1, 1.000000e+00
  %17 = fadd fast float %2, 1.000000e+00
  %18 = fadd fast float %3, 1.000000e+00
  br label %19

19:                                               ; preds = %6, %15, %14, %13, %12, %11, %10, %9, %8, %7
  %20 = phi float [ %16, %15 ], [ %1, %14 ], [ %1, %13 ], [ %1, %12 ], [ %1, %11 ], [ %1, %10 ], [ %1, %9 ], [ %1, %8 ], [ %1, %7 ], [ %1, %6 ]
  %21 = phi float [ %17, %15 ], [ %2, %14 ], [ %2, %13 ], [ %2, %12 ], [ %2, %11 ], [ %2, %10 ], [ %2, %9 ], [ %2, %8 ], [ %2, %7 ], [ %2, %6 ]
  %22 = phi float [ %18, %15 ], [ %3, %14 ], [ %3, %13 ], [ %3, %12 ], [ %3, %11 ], [ %3, %10 ], [ %3, %9 ], [ %3, %8 ], [ %3, %7 ], [ %3, %6 ]
  %23 = phi ptr [ @orgBlenderNoise, %15 ], [ @cellNoiseU, %14 ], [ @voronoi_Cr, %13 ], [ @voronoi_F1F2, %12 ], [ @voronoi_F4, %11 ], [ @voronoi_F3, %10 ], [ @voronoi_F2, %9 ], [ @voronoi_F1, %8 ], [ @newPerlinU, %7 ], [ @orgPerlinNoiseU, %6 ]
  %24 = fcmp fast une float %0, 0.000000e+00
  %25 = fdiv fast float 1.000000e+00, %0
  %26 = select i1 %24, float %25, float 1.000000e+00
  %27 = fmul fast float %20, %26
  %28 = fmul fast float %21, %26
  %29 = fmul fast float %22, %26
  %30 = icmp eq i32 %4, 0
  %31 = tail call fast nofpclass(nan inf) float %23(float noundef nofpclass(nan inf) %27, float noundef nofpclass(nan inf) %28, float noundef nofpclass(nan inf) %29) #9
  %32 = fmul fast float %31, 2.000000e+00
  %33 = fadd fast float %32, -1.000000e+00
  %34 = tail call fast float @llvm.fabs.f32(float %33)
  %35 = select i1 %30, float %31, float %34
  ret float %35
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @orgPerlinNoiseU(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #9
  store float %0, ptr %4, align 4, !tbaa !8
  %5 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 1
  store float %1, ptr %5, align 4, !tbaa !8
  %6 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 2
  store float %2, ptr %6, align 4, !tbaa !8
  %7 = call fast fastcc nofpclass(nan inf) float @noise3_perlin(ptr noundef nonnull %4)
  %8 = fmul fast float %7, 5.000000e-01
  %9 = fadd fast float %8, 5.000000e-01
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #9
  ret float %9
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @newPerlinU(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = tail call fast nofpclass(nan inf) float @newPerlin(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2)
  %5 = fmul fast float %4, 5.000000e-01
  %6 = fadd fast float %5, 5.000000e-01
  ret float %6
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F1(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %263
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F2(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %262
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F3(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %261
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F4(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %260
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F1F2(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fsub fast float %262, %263
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %270
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_Cr(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = tail call fast nofpclass(nan inf) float @voronoi_F1F2(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2)
  %5 = fmul fast float %4, 1.000000e+01
  %6 = fcmp fast ogt float %5, 1.000000e+00
  %7 = select i1 %6, float 1.000000e+00, float %5
  ret float %7
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @BLI_gTurbulence(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) local_unnamed_addr #5 {
  switch i32 %6, label %16 [
    i32 1, label %20
    i32 2, label %8
    i32 3, label %9
    i32 4, label %10
    i32 5, label %11
    i32 6, label %12
    i32 7, label %13
    i32 8, label %14
    i32 14, label %15
  ]

8:                                                ; preds = %7
  br label %20

9:                                                ; preds = %7
  br label %20

10:                                               ; preds = %7
  br label %20

11:                                               ; preds = %7
  br label %20

12:                                               ; preds = %7
  br label %20

13:                                               ; preds = %7
  br label %20

14:                                               ; preds = %7
  br label %20

15:                                               ; preds = %7
  br label %20

16:                                               ; preds = %7
  %17 = fadd fast float %1, 1.000000e+00
  %18 = fadd fast float %2, 1.000000e+00
  %19 = fadd fast float %3, 1.000000e+00
  br label %20

20:                                               ; preds = %7, %16, %15, %14, %13, %12, %11, %10, %9, %8
  %21 = phi float [ %19, %16 ], [ %3, %15 ], [ %3, %14 ], [ %3, %13 ], [ %3, %12 ], [ %3, %11 ], [ %3, %10 ], [ %3, %9 ], [ %3, %8 ], [ %3, %7 ]
  %22 = phi float [ %18, %16 ], [ %2, %15 ], [ %2, %14 ], [ %2, %13 ], [ %2, %12 ], [ %2, %11 ], [ %2, %10 ], [ %2, %9 ], [ %2, %8 ], [ %2, %7 ]
  %23 = phi float [ %17, %16 ], [ %1, %15 ], [ %1, %14 ], [ %1, %13 ], [ %1, %12 ], [ %1, %11 ], [ %1, %10 ], [ %1, %9 ], [ %1, %8 ], [ %1, %7 ]
  %24 = phi ptr [ @orgBlenderNoise, %16 ], [ @cellNoiseU, %15 ], [ @voronoi_Cr, %14 ], [ @voronoi_F1F2, %13 ], [ @voronoi_F4, %12 ], [ @voronoi_F3, %11 ], [ @voronoi_F2, %10 ], [ @voronoi_F1, %9 ], [ @newPerlinU, %8 ], [ @orgPerlinNoiseU, %7 ]
  %25 = fcmp fast une float %0, 0.000000e+00
  %26 = fdiv fast float 1.000000e+00, %0
  %27 = select i1 %25, float %26, float 1.000000e+00
  %28 = fmul fast float %21, %27
  %29 = fmul fast float %22, %27
  %30 = fmul fast float %23, %27
  %31 = icmp slt i32 %4, 0
  br i1 %31, label %67, label %32

32:                                               ; preds = %20
  %33 = icmp eq i32 %5, 0
  br i1 %33, label %34, label %49

34:                                               ; preds = %32, %34
  %35 = phi i32 [ %45, %34 ], [ 0, %32 ]
  %36 = phi float [ %47, %34 ], [ 1.000000e+00, %32 ]
  %37 = phi float [ %46, %34 ], [ 1.000000e+00, %32 ]
  %38 = phi float [ %44, %34 ], [ 0.000000e+00, %32 ]
  %39 = fmul fast float %30, %36
  %40 = fmul fast float %29, %36
  %41 = fmul fast float %28, %36
  %42 = tail call fast nofpclass(nan inf) float %24(float noundef nofpclass(nan inf) %39, float noundef nofpclass(nan inf) %40, float noundef nofpclass(nan inf) %41) #9
  %43 = fmul fast float %42, %37
  %44 = fadd fast float %43, %38
  %45 = add nuw i32 %35, 1
  %46 = fmul fast float %37, 5.000000e-01
  %47 = fmul fast float %36, 2.000000e+00
  %48 = icmp eq i32 %35, %4
  br i1 %48, label %67, label %34, !llvm.loop !16

49:                                               ; preds = %32, %49
  %50 = phi i32 [ %63, %49 ], [ 0, %32 ]
  %51 = phi float [ %65, %49 ], [ 1.000000e+00, %32 ]
  %52 = phi float [ %64, %49 ], [ 1.000000e+00, %32 ]
  %53 = phi float [ %62, %49 ], [ 0.000000e+00, %32 ]
  %54 = fmul fast float %30, %51
  %55 = fmul fast float %29, %51
  %56 = fmul fast float %28, %51
  %57 = tail call fast nofpclass(nan inf) float %24(float noundef nofpclass(nan inf) %54, float noundef nofpclass(nan inf) %55, float noundef nofpclass(nan inf) %56) #9
  %58 = fmul fast float %57, 2.000000e+00
  %59 = fadd fast float %58, -1.000000e+00
  %60 = tail call fast float @llvm.fabs.f32(float %59)
  %61 = fmul fast float %60, %52
  %62 = fadd fast float %61, %53
  %63 = add nuw i32 %50, 1
  %64 = fmul fast float %52, 5.000000e-01
  %65 = fmul fast float %51, 2.000000e+00
  %66 = icmp eq i32 %50, %4
  br i1 %66, label %67, label %49, !llvm.loop !16

67:                                               ; preds = %49, %34, %20
  %68 = phi float [ 0.000000e+00, %20 ], [ %44, %34 ], [ %62, %49 ]
  %69 = add i32 %4, 1
  %70 = shl nuw i32 1, %4
  %71 = sitofp i32 %70 to float
  %72 = shl nsw i32 -1, %69
  %73 = xor i32 %72, -1
  %74 = sitofp i32 %73 to float
  %75 = fmul fast float %68, %71
  %76 = fdiv fast float %75, %74
  ret float %76
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_fBm(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, float noundef nofpclass(nan inf) %4, float noundef nofpclass(nan inf) %5, i32 noundef %6) local_unnamed_addr #5 {
  %8 = fneg fast float %3
  %9 = tail call fast float @llvm.pow.f32(float %4, float %8)
  %10 = add i32 %6, -1
  %11 = icmp ult i32 %10, 14
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  %13 = sext i32 %10 to i64
  %14 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %13
  %15 = load ptr, ptr %14, align 8
  br label %16

16:                                               ; preds = %7, %12
  %17 = phi ptr [ %15, %12 ], [ @orgBlenderNoiseS, %7 ]
  %18 = fptosi float %5 to i32
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %36

20:                                               ; preds = %16, %20
  %21 = phi i32 [ %34, %20 ], [ 0, %16 ]
  %22 = phi float [ %31, %20 ], [ %0, %16 ]
  %23 = phi float [ %30, %20 ], [ 1.000000e+00, %16 ]
  %24 = phi float [ %29, %20 ], [ 0.000000e+00, %16 ]
  %25 = phi float [ %32, %20 ], [ %1, %16 ]
  %26 = phi float [ %33, %20 ], [ %2, %16 ]
  %27 = tail call fast nofpclass(nan inf) float %17(float noundef nofpclass(nan inf) %22, float noundef nofpclass(nan inf) %25, float noundef nofpclass(nan inf) %26) #9
  %28 = fmul fast float %27, %23
  %29 = fadd fast float %28, %24
  %30 = fmul fast float %23, %9
  %31 = fmul fast float %22, %4
  %32 = fmul fast float %25, %4
  %33 = fmul fast float %26, %4
  %34 = add nuw nsw i32 %21, 1
  %35 = icmp eq i32 %34, %18
  br i1 %35, label %36, label %20, !llvm.loop !17

36:                                               ; preds = %20, %16
  %37 = phi float [ %2, %16 ], [ %33, %20 ]
  %38 = phi float [ %1, %16 ], [ %32, %20 ]
  %39 = phi float [ 0.000000e+00, %16 ], [ %29, %20 ]
  %40 = phi float [ 1.000000e+00, %16 ], [ %30, %20 ]
  %41 = phi float [ %0, %16 ], [ %31, %20 ]
  %42 = tail call fast float @llvm.floor.f32(float %5)
  %43 = fsub fast float %5, %42
  %44 = fcmp fast une float %43, 0.000000e+00
  br i1 %44, label %45, label %50

45:                                               ; preds = %36
  %46 = tail call fast nofpclass(nan inf) float %17(float noundef nofpclass(nan inf) %41, float noundef nofpclass(nan inf) %38, float noundef nofpclass(nan inf) %37) #9
  %47 = fmul fast float %40, %43
  %48 = fmul fast float %47, %46
  %49 = fadd fast float %48, %39
  br label %50

50:                                               ; preds = %45, %36
  %51 = phi float [ %49, %45 ], [ %39, %36 ]
  ret float %51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.pow.f32(float, float) #3

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @orgPerlinNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #9
  store float %0, ptr %4, align 4, !tbaa !8
  %5 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 1
  store float %1, ptr %5, align 4, !tbaa !8
  %6 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 2
  store float %2, ptr %6, align 4, !tbaa !8
  %7 = call fast fastcc nofpclass(nan inf) float @noise3_perlin(ptr noundef nonnull %4)
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #9
  ret float %7
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @newPerlin(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = tail call fast float @llvm.floor.f32(float %0)
  %5 = tail call fast float @llvm.floor.f32(float %1)
  %6 = tail call fast float @llvm.floor.f32(float %2)
  %7 = fptosi float %4 to i32
  %8 = and i32 %7, 255
  %9 = fptosi float %5 to i32
  %10 = and i32 %9, 255
  %11 = fptosi float %6 to i32
  %12 = and i32 %11, 255
  %13 = fsub fast float %0, %4
  %14 = fsub fast float %1, %5
  %15 = fsub fast float %2, %6
  %16 = fmul fast float %13, %13
  %17 = fmul fast float %16, %13
  %18 = fmul fast float %13, 6.000000e+00
  %19 = fadd fast float %18, -1.500000e+01
  %20 = fmul fast float %19, %13
  %21 = fadd fast float %20, 1.000000e+01
  %22 = fmul fast float %17, %21
  %23 = fmul fast float %14, %14
  %24 = fmul fast float %23, %14
  %25 = fmul fast float %14, 6.000000e+00
  %26 = fadd fast float %25, -1.500000e+01
  %27 = fmul fast float %26, %14
  %28 = fadd fast float %27, 1.000000e+01
  %29 = fmul fast float %24, %28
  %30 = fmul fast float %15, %15
  %31 = fmul fast float %30, %15
  %32 = fmul fast float %15, 6.000000e+00
  %33 = fadd fast float %32, -1.500000e+01
  %34 = fmul fast float %33, %15
  %35 = fadd fast float %34, 1.000000e+01
  %36 = fmul fast float %31, %35
  %37 = zext i32 %8 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = zext i8 %39 to i32
  %41 = add nuw nsw i32 %10, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !5
  %45 = zext i8 %44 to i32
  %46 = add nuw nsw i32 %12, %45
  %47 = add nuw nsw i32 %41, 1
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !5
  %51 = zext i8 %50 to i32
  %52 = add nuw nsw i32 %12, %51
  %53 = add nuw nsw i32 %8, 1
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %54
  %56 = load i8, ptr %55, align 1, !tbaa !5
  %57 = zext i8 %56 to i32
  %58 = add nuw nsw i32 %10, %57
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %59
  %61 = load i8, ptr %60, align 1, !tbaa !5
  %62 = zext i8 %61 to i32
  %63 = add nuw nsw i32 %12, %62
  %64 = add nuw nsw i32 %58, 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %65
  %67 = load i8, ptr %66, align 1, !tbaa !5
  %68 = zext i8 %67 to i32
  %69 = add nuw nsw i32 %12, %68
  %70 = zext i32 %46 to i64
  %71 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %70
  %72 = load i8, ptr %71, align 1, !tbaa !5
  %73 = zext i32 %63 to i64
  %74 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !5
  %76 = fadd fast float %13, -1.000000e+00
  %77 = insertelement <2 x i8> poison, i8 %75, i64 0
  %78 = insertelement <2 x i8> %77, i8 %72, i64 1
  %79 = zext <2 x i8> %78 to <2 x i32>
  %80 = and <2 x i32> %79, <i32 15, i32 15>
  %81 = icmp ult <2 x i32> %80, <i32 4, i32 4>
  %82 = and <2 x i32> %79, <i32 13, i32 13>
  %83 = icmp eq <2 x i32> %82, <i32 12, i32 12>
  %84 = insertelement <2 x float> poison, float %76, i64 0
  %85 = insertelement <2 x float> %84, float %13, i64 1
  %86 = insertelement <2 x float> poison, float %15, i64 0
  %87 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> zeroinitializer
  %88 = select <2 x i1> %83, <2 x float> %85, <2 x float> %87
  %89 = insertelement <2 x float> poison, float %14, i64 0
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> zeroinitializer
  %91 = select <2 x i1> %81, <2 x float> %90, <2 x float> %88
  %92 = icmp ult <2 x i32> %80, <i32 8, i32 8>
  %93 = select <2 x i1> %92, <2 x float> %85, <2 x float> %90
  %94 = and <2 x i32> %79, <i32 1, i32 1>
  %95 = icmp eq <2 x i32> %94, zeroinitializer
  %96 = fneg fast <2 x float> %93
  %97 = select <2 x i1> %95, <2 x float> %93, <2 x float> %96
  %98 = and <2 x i32> %79, <i32 2, i32 2>
  %99 = icmp eq <2 x i32> %98, zeroinitializer
  %100 = fneg fast <2 x float> %91
  %101 = select <2 x i1> %99, <2 x float> %91, <2 x float> %100
  %102 = fadd fast <2 x float> %101, %97
  %103 = extractelement <2 x float> %102, i64 0
  %104 = extractelement <2 x float> %102, i64 1
  %105 = fsub fast float %103, %104
  %106 = fmul fast float %105, %22
  %107 = fadd fast float %106, %104
  %108 = zext i32 %52 to i64
  %109 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %108
  %110 = load i8, ptr %109, align 1, !tbaa !5
  %111 = fadd fast float %14, -1.000000e+00
  %112 = zext i32 %69 to i64
  %113 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %112
  %114 = load i8, ptr %113, align 1, !tbaa !5
  %115 = insertelement <2 x i8> poison, i8 %110, i64 0
  %116 = insertelement <2 x i8> %115, i8 %114, i64 1
  %117 = zext <2 x i8> %116 to <2 x i32>
  %118 = and <2 x i32> %117, <i32 15, i32 15>
  %119 = icmp ult <2 x i32> %118, <i32 4, i32 4>
  %120 = and <2 x i32> %117, <i32 13, i32 13>
  %121 = icmp eq <2 x i32> %120, <i32 12, i32 12>
  %122 = insertelement <2 x float> poison, float %13, i64 0
  %123 = insertelement <2 x float> %122, float %76, i64 1
  %124 = select <2 x i1> %121, <2 x float> %123, <2 x float> %87
  %125 = insertelement <2 x float> poison, float %111, i64 0
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> zeroinitializer
  %127 = select <2 x i1> %119, <2 x float> %126, <2 x float> %124
  %128 = icmp ult <2 x i32> %118, <i32 8, i32 8>
  %129 = select <2 x i1> %128, <2 x float> %123, <2 x float> %126
  %130 = and <2 x i32> %117, <i32 1, i32 1>
  %131 = icmp eq <2 x i32> %130, zeroinitializer
  %132 = fneg fast <2 x float> %129
  %133 = select <2 x i1> %131, <2 x float> %129, <2 x float> %132
  %134 = and <2 x i32> %117, <i32 2, i32 2>
  %135 = icmp eq <2 x i32> %134, zeroinitializer
  %136 = fneg fast <2 x float> %127
  %137 = select <2 x i1> %135, <2 x float> %127, <2 x float> %136
  %138 = fadd fast <2 x float> %137, %133
  %139 = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> <i32 poison, i32 0>
  %140 = insertelement <2 x float> %139, float %107, i64 0
  %141 = fsub fast <2 x float> %138, %140
  %142 = extractelement <2 x float> %141, i64 1
  %143 = fmul fast float %142, %22
  %144 = extractelement <2 x float> %141, i64 0
  %145 = fadd fast float %144, %143
  %146 = fmul fast float %145, %29
  %147 = fadd fast float %146, %107
  %148 = add nuw nsw i32 %46, 1
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %149
  %151 = load i8, ptr %150, align 1, !tbaa !5
  %152 = fadd fast float %15, -1.000000e+00
  %153 = add nuw nsw i32 %63, 1
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %154
  %156 = load i8, ptr %155, align 1, !tbaa !5
  %157 = insertelement <2 x i8> poison, i8 %156, i64 0
  %158 = insertelement <2 x i8> %157, i8 %151, i64 1
  %159 = zext <2 x i8> %158 to <2 x i32>
  %160 = and <2 x i32> %159, <i32 15, i32 15>
  %161 = icmp ult <2 x i32> %160, <i32 4, i32 4>
  %162 = and <2 x i32> %159, <i32 13, i32 13>
  %163 = icmp eq <2 x i32> %162, <i32 12, i32 12>
  %164 = insertelement <2 x float> poison, float %152, i64 0
  %165 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> zeroinitializer
  %166 = select <2 x i1> %163, <2 x float> %85, <2 x float> %165
  %167 = select <2 x i1> %161, <2 x float> %90, <2 x float> %166
  %168 = icmp ult <2 x i32> %160, <i32 8, i32 8>
  %169 = select <2 x i1> %168, <2 x float> %85, <2 x float> %90
  %170 = and <2 x i32> %159, <i32 1, i32 1>
  %171 = icmp eq <2 x i32> %170, zeroinitializer
  %172 = fneg fast <2 x float> %169
  %173 = select <2 x i1> %171, <2 x float> %169, <2 x float> %172
  %174 = and <2 x i32> %159, <i32 2, i32 2>
  %175 = icmp eq <2 x i32> %174, zeroinitializer
  %176 = fneg fast <2 x float> %167
  %177 = select <2 x i1> %175, <2 x float> %167, <2 x float> %176
  %178 = fadd fast <2 x float> %177, %173
  %179 = extractelement <2 x float> %178, i64 0
  %180 = extractelement <2 x float> %178, i64 1
  %181 = fsub fast float %179, %180
  %182 = fmul fast float %181, %22
  %183 = fadd fast float %182, %180
  %184 = add nuw nsw i32 %52, 1
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %185
  %187 = load i8, ptr %186, align 1, !tbaa !5
  %188 = add nuw nsw i32 %69, 1
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %189
  %191 = load i8, ptr %190, align 1, !tbaa !5
  %192 = insertelement <2 x i8> poison, i8 %187, i64 0
  %193 = insertelement <2 x i8> %192, i8 %191, i64 1
  %194 = zext <2 x i8> %193 to <2 x i32>
  %195 = and <2 x i32> %194, <i32 15, i32 15>
  %196 = icmp ult <2 x i32> %195, <i32 4, i32 4>
  %197 = and <2 x i32> %194, <i32 13, i32 13>
  %198 = icmp eq <2 x i32> %197, <i32 12, i32 12>
  %199 = select <2 x i1> %198, <2 x float> %123, <2 x float> %165
  %200 = select <2 x i1> %196, <2 x float> %126, <2 x float> %199
  %201 = icmp ult <2 x i32> %195, <i32 8, i32 8>
  %202 = select <2 x i1> %201, <2 x float> %123, <2 x float> %126
  %203 = and <2 x i32> %194, <i32 1, i32 1>
  %204 = icmp eq <2 x i32> %203, zeroinitializer
  %205 = fneg fast <2 x float> %202
  %206 = select <2 x i1> %204, <2 x float> %202, <2 x float> %205
  %207 = and <2 x i32> %194, <i32 2, i32 2>
  %208 = icmp eq <2 x i32> %207, zeroinitializer
  %209 = fneg fast <2 x float> %200
  %210 = select <2 x i1> %208, <2 x float> %200, <2 x float> %209
  %211 = fadd fast <2 x float> %210, %206
  %212 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> <i32 poison, i32 0>
  %213 = insertelement <2 x float> %212, float %183, i64 0
  %214 = fsub fast <2 x float> %211, %213
  %215 = extractelement <2 x float> %214, i64 1
  %216 = fmul fast float %215, %22
  %217 = extractelement <2 x float> %214, i64 0
  %218 = fadd fast float %217, %216
  %219 = fmul fast float %218, %29
  %220 = fsub fast float %183, %147
  %221 = fadd fast float %220, %219
  %222 = fmul fast float %36, %221
  %223 = fadd fast float %222, %147
  ret float %223
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F1S(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fmul fast float %263, 2.000000e+00
  %271 = fadd fast float %270, -1.000000e+00
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %271
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F2S(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fmul fast float %262, 2.000000e+00
  %271 = fadd fast float %270, -1.000000e+00
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %271
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F3S(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fmul fast float %261, 2.000000e+00
  %271 = fadd fast float %270, -1.000000e+00
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %271
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F4S(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fmul fast float %260, 2.000000e+00
  %271 = fadd fast float %270, -1.000000e+00
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %271
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_F1F2S(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = alloca float, align 16
  %5 = alloca float, align 4
  %6 = alloca float, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 16
  %9 = alloca float, align 4
  %10 = alloca float, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 16
  %13 = alloca float, align 4
  %14 = alloca float, align 8
  %15 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15)
  %16 = tail call fast float @llvm.floor.f32(float %0)
  %17 = fptosi float %16 to i32
  %18 = tail call fast float @llvm.floor.f32(float %1)
  %19 = fptosi float %18 to i32
  %20 = tail call fast float @llvm.floor.f32(float %2)
  %21 = fptosi float %20 to i32
  %22 = add nsw i32 %17, -1
  %23 = add nsw i32 %19, -1
  %24 = add nsw i32 %21, -1
  %25 = and i32 %24, 255
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %26
  %28 = load i8, ptr %27, align 1, !tbaa !5
  %29 = sitofp i32 %24 to float
  %30 = and i32 %21, 255
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !5
  %34 = sitofp i32 %21 to float
  %35 = add nsw i32 %21, 1
  %36 = and i32 %35, 255
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !5
  %40 = sitofp i32 %35 to float
  br label %41

41:                                               ; preds = %266, %3
  %42 = phi float [ 1.000000e+10, %3 ], [ %260, %266 ]
  %43 = phi float [ 1.000000e+10, %3 ], [ %261, %266 ]
  %44 = phi float [ 1.000000e+10, %3 ], [ %262, %266 ]
  %45 = phi float [ 1.000000e+10, %3 ], [ %263, %266 ]
  %46 = phi i32 [ %22, %3 ], [ %267, %266 ]
  %47 = trunc i32 %46 to i8
  %48 = sitofp i32 %46 to float
  br label %49

49:                                               ; preds = %259, %41
  %50 = phi float [ %42, %41 ], [ %260, %259 ]
  %51 = phi float [ %43, %41 ], [ %261, %259 ]
  %52 = phi float [ %44, %41 ], [ %262, %259 ]
  %53 = phi float [ %45, %41 ], [ %263, %259 ]
  %54 = phi i32 [ %23, %41 ], [ %264, %259 ]
  %55 = trunc i32 %54 to i8
  %56 = sitofp i32 %54 to float
  %57 = add i8 %28, %55
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !5
  %61 = add i8 %60, %47
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !5
  %65 = zext i8 %64 to i64
  %66 = mul nuw nsw i64 %65, 3
  %67 = getelementptr inbounds float, ptr @hashpntf, i64 %66
  %68 = load float, ptr %67, align 4, !tbaa !8
  %69 = fadd fast float %68, %48
  %70 = fsub fast float %0, %69
  %71 = getelementptr inbounds float, ptr %67, i64 1
  %72 = load float, ptr %71, align 4, !tbaa !8
  %73 = fadd fast float %72, %56
  %74 = fsub fast float %1, %73
  %75 = getelementptr inbounds float, ptr %67, i64 2
  %76 = load float, ptr %75, align 4, !tbaa !8
  %77 = fadd fast float %76, %29
  %78 = fsub fast float %2, %77
  %79 = fmul fast float %70, %70
  %80 = fmul fast float %74, %74
  %81 = fadd fast float %80, %79
  %82 = fmul fast float %78, %78
  %83 = fadd fast float %81, %82
  %84 = tail call fast float @llvm.sqrt.f32(float %83)
  %85 = fcmp fast olt float %84, %53
  br i1 %85, label %86, label %96

86:                                               ; preds = %49
  %87 = load float, ptr %10, align 8, !tbaa !8
  store float %87, ptr %13, align 4, !tbaa !8
  %88 = load float, ptr %11, align 4, !tbaa !8
  store float %88, ptr %14, align 8, !tbaa !8
  %89 = load float, ptr %12, align 16, !tbaa !8
  store float %89, ptr %15, align 4, !tbaa !8
  %90 = load float, ptr %7, align 4, !tbaa !8
  store float %90, ptr %10, align 8, !tbaa !8
  %91 = load float, ptr %8, align 16, !tbaa !8
  store float %91, ptr %11, align 4, !tbaa !8
  %92 = load float, ptr %9, align 4, !tbaa !8
  store float %92, ptr %12, align 16, !tbaa !8
  %93 = load float, ptr %4, align 16, !tbaa !8
  store float %93, ptr %7, align 4, !tbaa !8
  %94 = load float, ptr %5, align 4, !tbaa !8
  store float %94, ptr %8, align 16, !tbaa !8
  %95 = load float, ptr %6, align 8, !tbaa !8
  store float %95, ptr %9, align 4, !tbaa !8
  br label %113

96:                                               ; preds = %49
  %97 = fcmp fast olt float %84, %52
  br i1 %97, label %98, label %105

98:                                               ; preds = %96
  %99 = load float, ptr %10, align 8, !tbaa !8
  store float %99, ptr %13, align 4, !tbaa !8
  %100 = load float, ptr %11, align 4, !tbaa !8
  store float %100, ptr %14, align 8, !tbaa !8
  %101 = load float, ptr %12, align 16, !tbaa !8
  store float %101, ptr %15, align 4, !tbaa !8
  %102 = load float, ptr %7, align 4, !tbaa !8
  store float %102, ptr %10, align 8, !tbaa !8
  %103 = load float, ptr %8, align 16, !tbaa !8
  store float %103, ptr %11, align 4, !tbaa !8
  %104 = load float, ptr %9, align 4, !tbaa !8
  store float %104, ptr %12, align 16, !tbaa !8
  br label %113

105:                                              ; preds = %96
  %106 = fcmp fast olt float %84, %51
  br i1 %106, label %107, label %111

107:                                              ; preds = %105
  %108 = load float, ptr %10, align 8, !tbaa !8
  store float %108, ptr %13, align 4, !tbaa !8
  %109 = load float, ptr %11, align 4, !tbaa !8
  store float %109, ptr %14, align 8, !tbaa !8
  %110 = load float, ptr %12, align 16, !tbaa !8
  store float %110, ptr %15, align 4, !tbaa !8
  br label %113

111:                                              ; preds = %105
  %112 = fcmp fast olt float %84, %50
  br i1 %112, label %113, label %121

113:                                              ; preds = %111, %107, %98, %86
  %114 = phi float [ %51, %86 ], [ %51, %98 ], [ %51, %107 ], [ %84, %111 ]
  %115 = phi float [ %52, %86 ], [ %52, %98 ], [ %84, %107 ], [ %51, %111 ]
  %116 = phi float [ %53, %86 ], [ %84, %98 ], [ %52, %107 ], [ %52, %111 ]
  %117 = phi float [ %84, %86 ], [ %53, %98 ], [ %53, %107 ], [ %53, %111 ]
  %118 = phi ptr [ %4, %86 ], [ %7, %98 ], [ %10, %107 ], [ %13, %111 ]
  %119 = phi ptr [ %5, %86 ], [ %8, %98 ], [ %11, %107 ], [ %14, %111 ]
  %120 = phi ptr [ %6, %86 ], [ %9, %98 ], [ %12, %107 ], [ %15, %111 ]
  store float %69, ptr %118, align 4, !tbaa !8
  store float %73, ptr %119, align 4, !tbaa !8
  store float %77, ptr %120, align 4, !tbaa !8
  br label %121

121:                                              ; preds = %111, %113
  %122 = phi float [ %114, %113 ], [ %50, %111 ]
  %123 = phi float [ %115, %113 ], [ %51, %111 ]
  %124 = phi float [ %116, %113 ], [ %52, %111 ]
  %125 = phi float [ %117, %113 ], [ %53, %111 ]
  %126 = add i8 %33, %55
  %127 = zext i8 %126 to i64
  %128 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %127
  %129 = load i8, ptr %128, align 1, !tbaa !5
  %130 = add i8 %129, %47
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %131
  %133 = load i8, ptr %132, align 1, !tbaa !5
  %134 = zext i8 %133 to i64
  %135 = mul nuw nsw i64 %134, 3
  %136 = getelementptr inbounds float, ptr @hashpntf, i64 %135
  %137 = load float, ptr %136, align 4, !tbaa !8
  %138 = fadd fast float %137, %48
  %139 = fsub fast float %0, %138
  %140 = getelementptr inbounds float, ptr %136, i64 1
  %141 = load float, ptr %140, align 4, !tbaa !8
  %142 = fadd fast float %141, %56
  %143 = fsub fast float %1, %142
  %144 = getelementptr inbounds float, ptr %136, i64 2
  %145 = load float, ptr %144, align 4, !tbaa !8
  %146 = fadd fast float %145, %34
  %147 = fsub fast float %2, %146
  %148 = fmul fast float %139, %139
  %149 = fmul fast float %143, %143
  %150 = fadd fast float %149, %148
  %151 = fmul fast float %147, %147
  %152 = fadd fast float %150, %151
  %153 = tail call fast float @llvm.sqrt.f32(float %152)
  %154 = fcmp fast olt float %153, %125
  br i1 %154, label %172, label %155

155:                                              ; preds = %121
  %156 = fcmp fast olt float %153, %124
  br i1 %156, label %165, label %157

157:                                              ; preds = %155
  %158 = fcmp fast olt float %153, %123
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fcmp fast olt float %153, %122
  br i1 %160, label %182, label %190

161:                                              ; preds = %157
  %162 = load float, ptr %10, align 8, !tbaa !8
  store float %162, ptr %13, align 4, !tbaa !8
  %163 = load float, ptr %11, align 4, !tbaa !8
  store float %163, ptr %14, align 8, !tbaa !8
  %164 = load float, ptr %12, align 16, !tbaa !8
  store float %164, ptr %15, align 4, !tbaa !8
  br label %182

165:                                              ; preds = %155
  %166 = load float, ptr %10, align 8, !tbaa !8
  store float %166, ptr %13, align 4, !tbaa !8
  %167 = load float, ptr %11, align 4, !tbaa !8
  store float %167, ptr %14, align 8, !tbaa !8
  %168 = load float, ptr %12, align 16, !tbaa !8
  store float %168, ptr %15, align 4, !tbaa !8
  %169 = load float, ptr %7, align 4, !tbaa !8
  store float %169, ptr %10, align 8, !tbaa !8
  %170 = load float, ptr %8, align 16, !tbaa !8
  store float %170, ptr %11, align 4, !tbaa !8
  %171 = load float, ptr %9, align 4, !tbaa !8
  store float %171, ptr %12, align 16, !tbaa !8
  br label %182

172:                                              ; preds = %121
  %173 = load float, ptr %10, align 8, !tbaa !8
  store float %173, ptr %13, align 4, !tbaa !8
  %174 = load float, ptr %11, align 4, !tbaa !8
  store float %174, ptr %14, align 8, !tbaa !8
  %175 = load float, ptr %12, align 16, !tbaa !8
  store float %175, ptr %15, align 4, !tbaa !8
  %176 = load float, ptr %7, align 4, !tbaa !8
  store float %176, ptr %10, align 8, !tbaa !8
  %177 = load float, ptr %8, align 16, !tbaa !8
  store float %177, ptr %11, align 4, !tbaa !8
  %178 = load float, ptr %9, align 4, !tbaa !8
  store float %178, ptr %12, align 16, !tbaa !8
  %179 = load float, ptr %4, align 16, !tbaa !8
  store float %179, ptr %7, align 4, !tbaa !8
  %180 = load float, ptr %5, align 4, !tbaa !8
  store float %180, ptr %8, align 16, !tbaa !8
  %181 = load float, ptr %6, align 8, !tbaa !8
  store float %181, ptr %9, align 4, !tbaa !8
  br label %182

182:                                              ; preds = %172, %165, %161, %159
  %183 = phi float [ %123, %172 ], [ %123, %165 ], [ %123, %161 ], [ %153, %159 ]
  %184 = phi float [ %124, %172 ], [ %124, %165 ], [ %153, %161 ], [ %123, %159 ]
  %185 = phi float [ %125, %172 ], [ %153, %165 ], [ %124, %161 ], [ %124, %159 ]
  %186 = phi float [ %153, %172 ], [ %125, %165 ], [ %125, %161 ], [ %125, %159 ]
  %187 = phi ptr [ %4, %172 ], [ %7, %165 ], [ %10, %161 ], [ %13, %159 ]
  %188 = phi ptr [ %5, %172 ], [ %8, %165 ], [ %11, %161 ], [ %14, %159 ]
  %189 = phi ptr [ %6, %172 ], [ %9, %165 ], [ %12, %161 ], [ %15, %159 ]
  store float %138, ptr %187, align 4, !tbaa !8
  store float %142, ptr %188, align 4, !tbaa !8
  store float %146, ptr %189, align 4, !tbaa !8
  br label %190

190:                                              ; preds = %182, %159
  %191 = phi float [ %183, %182 ], [ %122, %159 ]
  %192 = phi float [ %184, %182 ], [ %123, %159 ]
  %193 = phi float [ %185, %182 ], [ %124, %159 ]
  %194 = phi float [ %186, %182 ], [ %125, %159 ]
  %195 = add i8 %39, %55
  %196 = zext i8 %195 to i64
  %197 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %196
  %198 = load i8, ptr %197, align 1, !tbaa !5
  %199 = add i8 %198, %47
  %200 = zext i8 %199 to i64
  %201 = getelementptr inbounds [512 x i8], ptr @hash, i64 0, i64 %200
  %202 = load i8, ptr %201, align 1, !tbaa !5
  %203 = zext i8 %202 to i64
  %204 = mul nuw nsw i64 %203, 3
  %205 = getelementptr inbounds float, ptr @hashpntf, i64 %204
  %206 = load float, ptr %205, align 4, !tbaa !8
  %207 = fadd fast float %206, %48
  %208 = fsub fast float %0, %207
  %209 = getelementptr inbounds float, ptr %205, i64 1
  %210 = load float, ptr %209, align 4, !tbaa !8
  %211 = fadd fast float %210, %56
  %212 = fsub fast float %1, %211
  %213 = getelementptr inbounds float, ptr %205, i64 2
  %214 = load float, ptr %213, align 4, !tbaa !8
  %215 = fadd fast float %214, %40
  %216 = fsub fast float %2, %215
  %217 = fmul fast float %208, %208
  %218 = fmul fast float %212, %212
  %219 = fadd fast float %218, %217
  %220 = fmul fast float %216, %216
  %221 = fadd fast float %219, %220
  %222 = tail call fast float @llvm.sqrt.f32(float %221)
  %223 = fcmp fast olt float %222, %194
  br i1 %223, label %241, label %224

224:                                              ; preds = %190
  %225 = fcmp fast olt float %222, %193
  br i1 %225, label %234, label %226

226:                                              ; preds = %224
  %227 = fcmp fast olt float %222, %192
  br i1 %227, label %230, label %228

228:                                              ; preds = %226
  %229 = fcmp fast olt float %222, %191
  br i1 %229, label %251, label %259

230:                                              ; preds = %226
  %231 = load float, ptr %10, align 8, !tbaa !8
  store float %231, ptr %13, align 4, !tbaa !8
  %232 = load float, ptr %11, align 4, !tbaa !8
  store float %232, ptr %14, align 8, !tbaa !8
  %233 = load float, ptr %12, align 16, !tbaa !8
  store float %233, ptr %15, align 4, !tbaa !8
  br label %251

234:                                              ; preds = %224
  %235 = load float, ptr %10, align 8, !tbaa !8
  store float %235, ptr %13, align 4, !tbaa !8
  %236 = load float, ptr %11, align 4, !tbaa !8
  store float %236, ptr %14, align 8, !tbaa !8
  %237 = load float, ptr %12, align 16, !tbaa !8
  store float %237, ptr %15, align 4, !tbaa !8
  %238 = load float, ptr %7, align 4, !tbaa !8
  store float %238, ptr %10, align 8, !tbaa !8
  %239 = load float, ptr %8, align 16, !tbaa !8
  store float %239, ptr %11, align 4, !tbaa !8
  %240 = load float, ptr %9, align 4, !tbaa !8
  store float %240, ptr %12, align 16, !tbaa !8
  br label %251

241:                                              ; preds = %190
  %242 = load float, ptr %10, align 8, !tbaa !8
  store float %242, ptr %13, align 4, !tbaa !8
  %243 = load float, ptr %11, align 4, !tbaa !8
  store float %243, ptr %14, align 8, !tbaa !8
  %244 = load float, ptr %12, align 16, !tbaa !8
  store float %244, ptr %15, align 4, !tbaa !8
  %245 = load float, ptr %7, align 4, !tbaa !8
  store float %245, ptr %10, align 8, !tbaa !8
  %246 = load float, ptr %8, align 16, !tbaa !8
  store float %246, ptr %11, align 4, !tbaa !8
  %247 = load float, ptr %9, align 4, !tbaa !8
  store float %247, ptr %12, align 16, !tbaa !8
  %248 = load float, ptr %4, align 16, !tbaa !8
  store float %248, ptr %7, align 4, !tbaa !8
  %249 = load float, ptr %5, align 4, !tbaa !8
  store float %249, ptr %8, align 16, !tbaa !8
  %250 = load float, ptr %6, align 8, !tbaa !8
  store float %250, ptr %9, align 4, !tbaa !8
  br label %251

251:                                              ; preds = %241, %234, %230, %228
  %252 = phi float [ %192, %241 ], [ %192, %234 ], [ %192, %230 ], [ %222, %228 ]
  %253 = phi float [ %193, %241 ], [ %193, %234 ], [ %222, %230 ], [ %192, %228 ]
  %254 = phi float [ %194, %241 ], [ %222, %234 ], [ %193, %230 ], [ %193, %228 ]
  %255 = phi float [ %222, %241 ], [ %194, %234 ], [ %194, %230 ], [ %194, %228 ]
  %256 = phi ptr [ %4, %241 ], [ %7, %234 ], [ %10, %230 ], [ %13, %228 ]
  %257 = phi ptr [ %5, %241 ], [ %8, %234 ], [ %11, %230 ], [ %14, %228 ]
  %258 = phi ptr [ %6, %241 ], [ %9, %234 ], [ %12, %230 ], [ %15, %228 ]
  store float %207, ptr %256, align 4, !tbaa !8
  store float %211, ptr %257, align 4, !tbaa !8
  store float %215, ptr %258, align 4, !tbaa !8
  br label %259

259:                                              ; preds = %228, %251
  %260 = phi float [ %252, %251 ], [ %191, %228 ]
  %261 = phi float [ %253, %251 ], [ %192, %228 ]
  %262 = phi float [ %254, %251 ], [ %193, %228 ]
  %263 = phi float [ %255, %251 ], [ %194, %228 ]
  %264 = add nsw i32 %54, 1
  %265 = icmp sgt i32 %54, %19
  br i1 %265, label %266, label %49, !llvm.loop !14

266:                                              ; preds = %259
  %267 = add nsw i32 %46, 1
  %268 = icmp sgt i32 %46, %17
  br i1 %268, label %269, label %41, !llvm.loop !15

269:                                              ; preds = %266
  %270 = fsub fast float %262, %263
  %271 = fmul fast float %270, 2.000000e+00
  %272 = fadd fast float %271, -1.000000e+00
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15)
  ret float %272
}

; Function Attrs: nofree nosync nounwind sspstrong memory(none) uwtable
define internal nofpclass(nan inf) float @voronoi_CrS(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #1 {
  %4 = tail call fast nofpclass(nan inf) float @voronoi_F1F2(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2)
  %5 = fmul fast float %4, 1.000000e+01
  %6 = fcmp fast ogt float %5, 1.000000e+00
  %7 = fmul fast float %4, 2.000000e+01
  %8 = fadd fast float %7, -1.000000e+00
  %9 = select i1 %6, float 1.000000e+00, float %8
  ret float %9
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable
define internal nofpclass(nan inf) float @orgBlenderNoiseS(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) unnamed_addr #0 {
  %4 = tail call fast nofpclass(nan inf) float @orgBlenderNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2)
  %5 = fmul fast float %4, 2.000000e+00
  %6 = fadd fast float %5, -1.000000e+00
  ret float %6
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_MultiFractal(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, float noundef nofpclass(nan inf) %4, float noundef nofpclass(nan inf) %5, i32 noundef %6) local_unnamed_addr #5 {
  %8 = fneg fast float %3
  %9 = tail call fast float @llvm.pow.f32(float %4, float %8)
  %10 = add i32 %6, -1
  %11 = icmp ult i32 %10, 14
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  %13 = sext i32 %10 to i64
  %14 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %13
  %15 = load ptr, ptr %14, align 8
  br label %16

16:                                               ; preds = %7, %12
  %17 = phi ptr [ %15, %12 ], [ @orgBlenderNoiseS, %7 ]
  %18 = fptosi float %5 to i32
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %37

20:                                               ; preds = %16, %20
  %21 = phi i32 [ %35, %20 ], [ 0, %16 ]
  %22 = phi float [ %32, %20 ], [ %0, %16 ]
  %23 = phi float [ %31, %20 ], [ 1.000000e+00, %16 ]
  %24 = phi float [ %30, %20 ], [ 1.000000e+00, %16 ]
  %25 = phi float [ %33, %20 ], [ %1, %16 ]
  %26 = phi float [ %34, %20 ], [ %2, %16 ]
  %27 = tail call fast nofpclass(nan inf) float %17(float noundef nofpclass(nan inf) %22, float noundef nofpclass(nan inf) %25, float noundef nofpclass(nan inf) %26) #9
  %28 = fmul fast float %27, %23
  %29 = fadd fast float %28, 1.000000e+00
  %30 = fmul fast float %29, %24
  %31 = fmul fast float %23, %9
  %32 = fmul fast float %22, %4
  %33 = fmul fast float %25, %4
  %34 = fmul fast float %26, %4
  %35 = add nuw nsw i32 %21, 1
  %36 = icmp eq i32 %35, %18
  br i1 %36, label %37, label %20, !llvm.loop !18

37:                                               ; preds = %20, %16
  %38 = phi float [ %2, %16 ], [ %34, %20 ]
  %39 = phi float [ %1, %16 ], [ %33, %20 ]
  %40 = phi float [ 1.000000e+00, %16 ], [ %30, %20 ]
  %41 = phi float [ 1.000000e+00, %16 ], [ %31, %20 ]
  %42 = phi float [ %0, %16 ], [ %32, %20 ]
  %43 = tail call fast float @llvm.floor.f32(float %5)
  %44 = fsub fast float %5, %43
  %45 = fcmp fast une float %44, 0.000000e+00
  br i1 %45, label %46, label %52

46:                                               ; preds = %37
  %47 = tail call fast nofpclass(nan inf) float %17(float noundef nofpclass(nan inf) %42, float noundef nofpclass(nan inf) %39, float noundef nofpclass(nan inf) %38) #9
  %48 = fmul fast float %41, %44
  %49 = fmul fast float %48, %47
  %50 = fadd fast float %49, 1.000000e+00
  %51 = fmul fast float %50, %40
  br label %52

52:                                               ; preds = %46, %37
  %53 = phi float [ %51, %46 ], [ %40, %37 ]
  ret float %53
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_HeteroTerrain(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, float noundef nofpclass(nan inf) %4, float noundef nofpclass(nan inf) %5, float noundef nofpclass(nan inf) %6, i32 noundef %7) local_unnamed_addr #5 {
  %9 = fneg fast float %3
  %10 = tail call fast float @llvm.pow.f32(float %4, float %9)
  %11 = add i32 %7, -1
  %12 = icmp ult i32 %11, 14
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = sext i32 %11 to i64
  %15 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %14
  %16 = load ptr, ptr %15, align 8
  br label %17

17:                                               ; preds = %8, %13
  %18 = phi ptr [ %16, %13 ], [ @orgBlenderNoiseS, %8 ]
  %19 = tail call fast nofpclass(nan inf) float %18(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) #9
  %20 = fadd fast float %19, %6
  %21 = fptosi float %5 to i32
  %22 = fmul fast float %0, %4
  %23 = fmul fast float %1, %4
  %24 = fmul fast float %2, %4
  %25 = icmp sgt i32 %21, 1
  br i1 %25, label %26, label %44

26:                                               ; preds = %17, %26
  %27 = phi float [ %42, %26 ], [ %24, %17 ]
  %28 = phi float [ %41, %26 ], [ %23, %17 ]
  %29 = phi float [ %40, %26 ], [ %22, %17 ]
  %30 = phi float [ %38, %26 ], [ %10, %17 ]
  %31 = phi i32 [ %39, %26 ], [ 1, %17 ]
  %32 = phi float [ %37, %26 ], [ %20, %17 ]
  %33 = tail call fast nofpclass(nan inf) float %18(float noundef nofpclass(nan inf) %29, float noundef nofpclass(nan inf) %28, float noundef nofpclass(nan inf) %27) #9
  %34 = fadd fast float %33, %6
  %35 = fmul fast float %30, %32
  %36 = fmul fast float %35, %34
  %37 = fadd fast float %36, %32
  %38 = fmul fast float %30, %10
  %39 = add nuw nsw i32 %31, 1
  %40 = fmul fast float %29, %4
  %41 = fmul fast float %28, %4
  %42 = fmul fast float %27, %4
  %43 = icmp eq i32 %39, %21
  br i1 %43, label %44, label %26, !llvm.loop !19

44:                                               ; preds = %26, %17
  %45 = phi float [ %20, %17 ], [ %37, %26 ]
  %46 = phi float [ %10, %17 ], [ %38, %26 ]
  %47 = phi float [ %22, %17 ], [ %40, %26 ]
  %48 = phi float [ %23, %17 ], [ %41, %26 ]
  %49 = phi float [ %24, %17 ], [ %42, %26 ]
  %50 = tail call fast float @llvm.floor.f32(float %5)
  %51 = fsub fast float %5, %50
  %52 = fcmp fast une float %51, 0.000000e+00
  br i1 %52, label %53, label %60

53:                                               ; preds = %44
  %54 = tail call fast nofpclass(nan inf) float %18(float noundef nofpclass(nan inf) %47, float noundef nofpclass(nan inf) %48, float noundef nofpclass(nan inf) %49) #9
  %55 = fadd fast float %54, %6
  %56 = fmul fast float %46, %45
  %57 = fmul fast float %56, %51
  %58 = fmul fast float %57, %55
  %59 = fadd fast float %58, %45
  br label %60

60:                                               ; preds = %53, %44
  %61 = phi float [ %59, %53 ], [ %45, %44 ]
  ret float %61
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_HybridMultiFractal(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, float noundef nofpclass(nan inf) %4, float noundef nofpclass(nan inf) %5, float noundef nofpclass(nan inf) %6, float noundef nofpclass(nan inf) %7, i32 noundef %8) local_unnamed_addr #5 {
  %10 = fneg fast float %3
  %11 = tail call fast float @llvm.pow.f32(float %4, float %10)
  %12 = add i32 %8, -1
  %13 = icmp ult i32 %12, 14
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %15
  %17 = load ptr, ptr %16, align 8
  br label %18

18:                                               ; preds = %9, %14
  %19 = phi ptr [ %17, %14 ], [ @orgBlenderNoiseS, %9 ]
  %20 = tail call fast nofpclass(nan inf) float %19(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) #9
  %21 = fadd fast float %20, %6
  %22 = fmul fast float %21, %7
  %23 = fptosi float %5 to i32
  %24 = fmul fast float %0, %4
  %25 = fmul fast float %1, %4
  %26 = fmul fast float %2, %4
  %27 = fcmp fast ogt float %22, 0x3F50624DE0000000
  %28 = icmp sgt i32 %23, 1
  %29 = select i1 %27, i1 %28, i1 false
  br i1 %29, label %30, label %54

30:                                               ; preds = %18, %30
  %31 = phi float [ %50, %30 ], [ %26, %18 ]
  %32 = phi float [ %49, %30 ], [ %25, %18 ]
  %33 = phi float [ %48, %30 ], [ %24, %18 ]
  %34 = phi float [ %43, %30 ], [ %11, %18 ]
  %35 = phi i32 [ %47, %30 ], [ 1, %18 ]
  %36 = phi float [ %46, %30 ], [ %22, %18 ]
  %37 = phi float [ %45, %30 ], [ %21, %18 ]
  %38 = fcmp fast ogt float %36, 1.000000e+00
  %39 = select i1 %38, float 1.000000e+00, float %36
  %40 = tail call fast nofpclass(nan inf) float %19(float noundef nofpclass(nan inf) %33, float noundef nofpclass(nan inf) %32, float noundef nofpclass(nan inf) %31) #9
  %41 = fadd fast float %40, %6
  %42 = fmul fast float %41, %34
  %43 = fmul fast float %34, %11
  %44 = fmul fast float %42, %39
  %45 = fadd fast float %44, %37
  %46 = fmul fast float %44, %7
  %47 = add nuw nsw i32 %35, 1
  %48 = fmul fast float %33, %4
  %49 = fmul fast float %32, %4
  %50 = fmul fast float %31, %4
  %51 = fcmp fast ogt float %46, 0x3F50624DE0000000
  %52 = icmp slt i32 %47, %23
  %53 = select i1 %51, i1 %52, i1 false
  br i1 %53, label %30, label %54, !llvm.loop !20

54:                                               ; preds = %30, %18
  %55 = phi float [ %21, %18 ], [ %45, %30 ]
  %56 = phi float [ %11, %18 ], [ %43, %30 ]
  %57 = phi float [ %24, %18 ], [ %48, %30 ]
  %58 = phi float [ %25, %18 ], [ %49, %30 ]
  %59 = phi float [ %26, %18 ], [ %50, %30 ]
  %60 = tail call fast float @llvm.floor.f32(float %5)
  %61 = fsub fast float %5, %60
  %62 = fcmp fast une float %61, 0.000000e+00
  br i1 %62, label %63, label %69

63:                                               ; preds = %54
  %64 = tail call fast nofpclass(nan inf) float %19(float noundef nofpclass(nan inf) %57, float noundef nofpclass(nan inf) %58, float noundef nofpclass(nan inf) %59) #9
  %65 = fadd fast float %64, %6
  %66 = fmul fast float %56, %61
  %67 = fmul fast float %66, %65
  %68 = fadd fast float %67, %55
  br label %69

69:                                               ; preds = %63, %54
  %70 = phi float [ %68, %63 ], [ %55, %54 ]
  ret float %70
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_RidgedMultiFractal(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, float noundef nofpclass(nan inf) %4, float noundef nofpclass(nan inf) %5, float noundef nofpclass(nan inf) %6, float noundef nofpclass(nan inf) %7, i32 noundef %8) local_unnamed_addr #5 {
  %10 = fneg fast float %3
  %11 = tail call fast float @llvm.pow.f32(float %4, float %10)
  %12 = add i32 %8, -1
  %13 = icmp ult i32 %12, 14
  br i1 %13, label %14, label %18

14:                                               ; preds = %9
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %15
  %17 = load ptr, ptr %16, align 8
  br label %18

18:                                               ; preds = %9, %14
  %19 = phi ptr [ %17, %14 ], [ @orgBlenderNoiseS, %9 ]
  %20 = tail call fast nofpclass(nan inf) float %19(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) #9
  %21 = tail call fast float @llvm.fabs.f32(float %20)
  %22 = fsub fast float %6, %21
  %23 = fmul fast float %22, %22
  %24 = fptosi float %5 to i32
  %25 = icmp sgt i32 %24, 1
  br i1 %25, label %26, label %54

26:                                               ; preds = %18, %42
  %27 = phi float [ %51, %42 ], [ %11, %18 ]
  %28 = phi float [ %34, %42 ], [ %0, %18 ]
  %29 = phi i32 [ %52, %42 ], [ 1, %18 ]
  %30 = phi float [ %48, %42 ], [ %23, %18 ]
  %31 = phi float [ %50, %42 ], [ %23, %18 ]
  %32 = phi float [ %35, %42 ], [ %1, %18 ]
  %33 = phi float [ %36, %42 ], [ %2, %18 ]
  %34 = fmul fast float %28, %4
  %35 = fmul fast float %32, %4
  %36 = fmul fast float %33, %4
  %37 = fmul fast float %30, %7
  %38 = fcmp fast ogt float %37, 1.000000e+00
  br i1 %38, label %42, label %39

39:                                               ; preds = %26
  %40 = fcmp fast olt float %37, 0.000000e+00
  br i1 %40, label %41, label %42

41:                                               ; preds = %39
  br label %42

42:                                               ; preds = %26, %39, %41
  %43 = phi float [ 0.000000e+00, %41 ], [ %37, %39 ], [ 1.000000e+00, %26 ]
  %44 = tail call fast nofpclass(nan inf) float %19(float noundef nofpclass(nan inf) %34, float noundef nofpclass(nan inf) %35, float noundef nofpclass(nan inf) %36) #9
  %45 = tail call fast float @llvm.fabs.f32(float %44)
  %46 = fsub fast float %6, %45
  %47 = fmul fast float %46, %46
  %48 = fmul fast float %47, %43
  %49 = fmul fast float %48, %27
  %50 = fadd fast float %49, %31
  %51 = fmul fast float %27, %11
  %52 = add nuw nsw i32 %29, 1
  %53 = icmp eq i32 %52, %24
  br i1 %53, label %54, label %26, !llvm.loop !21

54:                                               ; preds = %42, %18
  %55 = phi float [ %23, %18 ], [ %50, %42 ]
  ret float %55
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local nofpclass(nan inf) float @mg_VLNoise(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2, float noundef nofpclass(nan inf) %3, i32 noundef %4, i32 noundef %5) local_unnamed_addr #5 {
  %7 = add i32 %4, -1
  %8 = icmp ult i32 %7, 14
  br i1 %8, label %9, label %13

9:                                                ; preds = %6
  %10 = sext i32 %7 to i64
  %11 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %10
  %12 = load ptr, ptr %11, align 8
  br label %13

13:                                               ; preds = %6, %9
  %14 = phi ptr [ %12, %9 ], [ @orgBlenderNoiseS, %6 ]
  %15 = add i32 %5, -1
  %16 = icmp ult i32 %15, 14
  br i1 %16, label %17, label %21

17:                                               ; preds = %13
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds [14 x ptr], ptr @switch.table.mg_VLNoise.1, i64 0, i64 %18
  %20 = load ptr, ptr %19, align 8
  br label %21

21:                                               ; preds = %13, %17
  %22 = phi ptr [ %20, %17 ], [ @orgBlenderNoiseS, %13 ]
  %23 = fadd fast float %0, 1.350000e+01
  %24 = fadd fast float %1, 1.350000e+01
  %25 = fadd fast float %2, 1.350000e+01
  %26 = tail call fast nofpclass(nan inf) float %14(float noundef nofpclass(nan inf) %23, float noundef nofpclass(nan inf) %24, float noundef nofpclass(nan inf) %25) #9
  %27 = fmul fast float %26, %3
  %28 = tail call fast nofpclass(nan inf) float %14(float noundef nofpclass(nan inf) %0, float noundef nofpclass(nan inf) %1, float noundef nofpclass(nan inf) %2) #9
  %29 = fmul fast float %28, %3
  %30 = fadd fast float %0, -1.350000e+01
  %31 = fadd fast float %1, -1.350000e+01
  %32 = fadd fast float %2, -1.350000e+01
  %33 = tail call fast nofpclass(nan inf) float %14(float noundef nofpclass(nan inf) %30, float noundef nofpclass(nan inf) %31, float noundef nofpclass(nan inf) %32) #9
  %34 = fmul fast float %33, %3
  %35 = fadd fast float %27, %0
  %36 = fadd fast float %29, %1
  %37 = fadd fast float %34, %2
  %38 = tail call fast nofpclass(nan inf) float %22(float noundef nofpclass(nan inf) %35, float noundef nofpclass(nan inf) %36, float noundef nofpclass(nan inf) %37) #9
  ret float %38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.vector.reduce.fadd.v4f32(float, <4 x float>) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.floor.v2f32(<2 x float>) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #8

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>) #8

attributes #0 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nosync nounwind sspstrong memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"float", !6, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11}
!17 = distinct !{!17, !11}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
