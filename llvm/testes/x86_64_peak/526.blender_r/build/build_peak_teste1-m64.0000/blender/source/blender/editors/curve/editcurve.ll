; ModuleID = 'blender/source/blender/editors/curve/editcurve.c'
source_filename = "blender/source/blender/editors/curve/editcurve.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.EnumPropertyItem = type { i32, ptr, i32, ptr, ptr }
%struct.Global = type { ptr, [1024 x i8], [1024 x i8], i8, i8, i8, %struct.ListBase, i8, i8, i8, i16, i16, i16, i8, i16, i32, i32, i8, i32, i32, [200 x i8] }
%struct.ListBase = type { ptr, ptr }
%struct.Object = type { %struct.ID, ptr, ptr, i16, i16, i32, i32, i32, [64 x i8], ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.bAnimVizSettings, ptr, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, i32, i32, ptr, ptr, i32, i32, [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [3 x float], [4 x float], [4 x float], [3 x float], [3 x float], float, float, [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i8, i8, i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, i16, i16, i16, i8, i8, i16, i8, i8, float, float, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, float, i16, i16, [4 x float], i32, i32, ptr, i8, i8, i16, [3 x float], %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, ptr, ptr, ptr, i8, i8, i16, float, ptr, ptr, ptr, ptr, i64, i64, i32, i32, %struct.ListBase, %struct.ListBase, ptr, ptr, ptr, [2 x float], ptr, %struct.ListBase, ptr }
%struct.ID = type { ptr, ptr, ptr, ptr, [66 x i8], i16, i32, i32, i32, ptr }
%struct.bAnimVizSettings = type { i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, i32, i32, i32, i32 }
%struct.Curve = type { %struct.ID, ptr, ptr, %struct.ListBase, ptr, ptr, ptr, ptr, ptr, ptr, ptr, [3 x float], [3 x float], [3 x float], i16, i16, i16, i16, float, float, i32, i16, i16, i32, float, float, float, i16, i16, i16, i16, i32, i32, [4 x i8], i16, i8, i8, float, float, float, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, ptr, ptr, [64 x i8], ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, %struct.CharInfo, float, float, float, i8, i8, [2 x i8] }
%struct.CharInfo = type { i16, i16, i8, i8, i16 }
%struct.Nurb = type { ptr, ptr, i16, i16, i16, i16, i32, i32, [2 x i16], i16, i16, i16, i16, i16, i16, ptr, ptr, ptr, ptr, i16, i16, i32 }
%struct.BezTriple = type { [3 x [3 x float]], float, float, float, i8, i8, i8, i8, i8, i8, i8, i8, float, float, float, [4 x i8] }
%struct.BPoint = type { [4 x float], float, float, i16, i16, float, float }
%struct.EditNurb = type { %struct.ListBase, ptr, i32, [4 x i8] }
%struct.AnimData = type { ptr, ptr, ptr, %struct.ListBase, ptr, %struct.ListBase, %struct.ListBase, i32, i32, i16, i16, float }
%struct.bAction = type { %struct.ID, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, i32, i32, i32, i32 }
%struct.CVKeyIndex = type { ptr, i32, i32, i32, i32, i8, ptr }
%struct.FCurve = type { ptr, ptr, ptr, ptr, %struct.ListBase, ptr, ptr, i32, float, i16, i16, i32, ptr, i32, [3 x float], float, float }
%struct.Main = type { ptr, ptr, [1024 x i8], i16, i16, i16, i16, i64, [16 x i8], i16, ptr, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, %struct.ListBase, [256 x i8], ptr, ptr }
%struct.ModifierData = type { ptr, ptr, i32, i32, i32, i32, [64 x i8], ptr, ptr }
%struct.HookModifierData = type { %struct.ModifierData, ptr, [64 x i8], [4 x [4 x float]], [3 x float], float, ptr, i32, float, [64 x i8] }
%struct.Key = type { %struct.ID, ptr, ptr, [32 x i8], i32, i32, %struct.ListBase, ptr, ptr, i16, i16, i16, i16, float, i32 }
%struct.KeyBlock = type { ptr, ptr, float, float, i16, i16, i16, i16, i32, i32, ptr, [64 x i8], [64 x i8], float, float }
%struct.wmOperatorType = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.ListBase, ptr, ptr, ptr, %struct.ExtensionRNA, i16 }
%struct.ExtensionRNA = type { ptr, ptr, ptr, ptr }
%struct.Base = type { ptr, ptr, i32, i32, i32, i16, i16, ptr }
%struct.wmOperator = type { ptr, ptr, [64 x i8], ptr, ptr, ptr, ptr, ptr, ptr, %struct.ListBase, ptr, ptr, i16, [3 x i16] }
%struct.NurbSort = type { ptr, ptr, ptr, [3 x float] }
%struct.anon.0 = type { ptr, ptr, ptr, float, i32, i32, [2 x float] }
%struct.ViewContext = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, [2 x i32] }
%struct.RegionView3D = type { [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [4 x [4 x float]], [6 x [4 x float]], [6 x [4 x float]], ptr, ptr, ptr, ptr, ptr, ptr, ptr, [4 x [4 x float]], [4 x float], float, float, float, float, [3 x float], float, i8, i8, i8, i8, i8, [3 x i8], [2 x float], i16, i16, [4 x float], i16, i16, float, [3 x float], float, [3 x float] }
%struct.Scene = type { %struct.ID, ptr, ptr, ptr, ptr, %struct.ListBase, ptr, ptr, [3 x float], [3 x float], [3 x float], [3 x float], i32, i32, i32, i16, i8, [1 x i8], ptr, ptr, ptr, ptr, %struct.RenderData, %struct.AudioData, %struct.ListBase, %struct.ListBase, ptr, ptr, ptr, ptr, ptr, ptr, i16, i16, i32, %struct.ListBase, %struct.GameFraming, %struct.GameData, %struct.UnitSettings, ptr, %struct.PhysicsSettings, ptr, i64, i64, %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings, %struct.ColorManagedColorspaceSettings, ptr }
%struct.RenderData = type { %struct.ImageFormatData, ptr, ptr, %struct.QuicktimeCodecSettings, %struct.FFMpegCodecData, i32, i32, i32, float, i32, i32, i32, i32, i16, i16, float, float, float, float, float, i16, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i32, i32, i16, i16, i32, i32, i16, i16, i16, i16, i16, i8, i8, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16, %struct.rctf, %struct.rctf, %struct.rcti, %struct.ListBase, i16, i16, float, float, float, float, i32, float, float, float, float, i16, i16, i16, i16, i16, i16, float, float, i16, i16, float, float, [1024 x i8], i32, i16, i16, [768 x i8], [4 x float], [4 x float], i8, i8, i8, [5 x i8], i32, i16, i16, float, float, i16, i16, float, i16, i16, i32, i16, i16, i16, i16, float, float, ptr, i32, float, [32 x i8], %struct.BakeData, i32, i32 }
%struct.ImageFormatData = type { i8, i8, i8, i8, i8, i8, i8, i8, i16, i16, float, i8, i8, [6 x i8], %struct.ColorManagedViewSettings, %struct.ColorManagedDisplaySettings }
%struct.QuicktimeCodecSettings = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i32, i32, i32 }
%struct.FFMpegCodecData = type { i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.rctf = type { float, float, float, float }
%struct.rcti = type { i32, i32, i32, i32 }
%struct.BakeData = type { %struct.ImageFormatData, [1024 x i8], i16, i16, i16, i16, float, float, [3 x i8], i8, i8, [3 x i8], [64 x i8] }
%struct.AudioData = type { i32, float, float, float, i32, i16, i16, float, float }
%struct.GameFraming = type { [3 x float], i8, i8, i8, i8 }
%struct.GameData = type { %struct.GameFraming, i16, i16, i16, i16, i16, i16, i16, i16, i16, [3 x i16], %struct.GameDome, i16, i16, float, %struct.RecastData, float, float, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, float, float, float, float, float }
%struct.GameDome = type { i16, i16, i16, i16, float, float, ptr }
%struct.RecastData = type { float, float, float, float, float, float, float, float, float, float, i32, float, float, i16, i16 }
%struct.UnitSettings = type { float, i8, i8, i16 }
%struct.PhysicsSettings = type { [3 x float], i32, i32, i32 }
%struct.ColorManagedViewSettings = type { i32, i32, [64 x i8], [64 x i8], float, float, ptr, ptr }
%struct.ColorManagedDisplaySettings = type { [64 x i8] }
%struct.ColorManagedColorspaceSettings = type { [64 x i8] }
%struct.ToolSettings = type { ptr, ptr, ptr, ptr, float, float, float, i16, i16, i8, i8, i8, i8, float, i16, i8, [5 x i8], %struct.ImagePaintSettings, %struct.ParticleEditSettings, float, float, i16, i16, i8, [1 x i8], i16, float, float, float, float, float, float, float, float, float, float, i16, i8, i8, [3 x i8], i8, ptr, i8, i8, i8, i8, i8, [8 x i8], [8 x i8], i8, i8, i8, i8, i8, i16, i16, i16, i16, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i16, i16, i32, float, float, %struct.UnifiedPaintSettings, %struct.MeshStatVis }
%struct.ImagePaintSettings = type { %struct.Paint, i16, i16, i16, i16, [2 x i16], i32, ptr, ptr, ptr, ptr, [3 x float], float }
%struct.Paint = type { ptr, ptr, ptr, [4 x i8], i32, i32, i32 }
%struct.ParticleEditSettings = type { i16, i16, i16, i16, [7 x %struct.ParticleBrushData], ptr, float, float, i32, i32, i32, i32, ptr, ptr }
%struct.ParticleBrushData = type { i16, i16, i16, i16, i32, float }
%struct.UnifiedPaintSettings = type { i32, float, float, float, [3 x float], [3 x float], i32, [2 x float], float, i32, i32, i8, [7 x i8], float, [2 x float], i32, float, [2 x float], [2 x float], i32, ptr, float, i32 }
%struct.MeshStatVis = type { i8, [2 x i8], i8, float, float, float, float, i8, [3 x i8], float, float, float, float }
%struct.wmEvent = type { ptr, ptr, i16, i16, i32, i32, [2 x i32], [6 x i8], i8, i8, i16, i16, i32, i32, double, i32, i32, i16, i16, i16, i16, i16, i16, ptr, ptr, i16, i16, i32, ptr }
%struct.CollectionPointerLink = type { ptr, ptr, %struct.PointerRNA }
%struct.PointerRNA = type { %struct.anon, ptr, ptr }
%struct.anon = type { ptr }
%struct.UndoCurve = type { %struct.ListBase, i32, ptr, %struct.ListBase, %struct.ListBase, i32 }
%struct.anon.1 = type { ptr, ptr, ptr, float, i32, i32, [2 x float] }

@.str = private unnamed_addr constant [14 x i8] c"knotu %d: %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"knotv %d: %f\0A\00", align 1
@MEM_callocN = external local_unnamed_addr global ptr, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"editnurb\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Separate\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"CURVE_OT_separate\00", align 1
@.str.5 = private unnamed_addr constant [76 x i8] c"Separate selected points from connected unselected points into a new object\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"Split\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"CURVE_OT_split\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"Split off selected points from connected unselected points\00", align 1
@MEM_mallocN = external local_unnamed_addr global ptr, align 8
@.str.9 = private unnamed_addr constant [13 x i8] c"extrudeNurb1\00", align 1
@MEM_freeN = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [17 x i8] c"Switch Direction\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"Switch direction of selected splines\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"CURVE_OT_switch_direction\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"Set Goal Weight\00", align 1
@.str.14 = private unnamed_addr constant [45 x i8] c"Set softbody goal weight for selected points\00", align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"CURVE_OT_spline_weight_set\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"Weight\00", align 1
@.str.18 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"Set Curve Radius\00", align 1
@.str.20 = private unnamed_addr constant [54 x i8] c"Set per-point radius which is used for bevel tapering\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"CURVE_OT_radius_set\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"radius\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"Radius\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Smooth\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"Flatten angles of selected points\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"CURVE_OT_smooth\00", align 1
@.str.27 = private unnamed_addr constant [20 x i8] c"Smooth Curve Weight\00", align 1
@.str.28 = private unnamed_addr constant [38 x i8] c"Interpolate weight of selected points\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c"CURVE_OT_smooth_weight\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"Smooth Curve Radius\00", align 1
@.str.31 = private unnamed_addr constant [37 x i8] c"Interpolate radii of selected points\00", align 1
@.str.32 = private unnamed_addr constant [23 x i8] c"CURVE_OT_smooth_radius\00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c"Smooth Curve Tilt\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"Interpolate tilt of selected points\00", align 1
@.str.35 = private unnamed_addr constant [21 x i8] c"CURVE_OT_smooth_tilt\00", align 1
@.str.36 = private unnamed_addr constant [17 x i8] c"(De)select First\00", align 1
@.str.37 = private unnamed_addr constant [25 x i8] c"CURVE_OT_de_select_first\00", align 1
@.str.38 = private unnamed_addr constant [47 x i8] c"(De)select first of visible part of each NURBS\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"(De)select Last\00", align 1
@.str.40 = private unnamed_addr constant [24 x i8] c"CURVE_OT_de_select_last\00", align 1
@.str.41 = private unnamed_addr constant [46 x i8] c"(De)select last of visible part of each NURBS\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"(De)select All\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c"CURVE_OT_select_all\00", align 1
@.str.44 = private unnamed_addr constant [30 x i8] c"(De)select all control points\00", align 1
@.str.45 = private unnamed_addr constant [14 x i8] c"Hide Selected\00", align 1
@.str.46 = private unnamed_addr constant [14 x i8] c"CURVE_OT_hide\00", align 1
@.str.47 = private unnamed_addr constant [33 x i8] c"Hide (un)selected control points\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"unselected\00", align 1
@.str.49 = private unnamed_addr constant [11 x i8] c"Unselected\00", align 1
@.str.50 = private unnamed_addr constant [37 x i8] c"Hide unselected rather than selected\00", align 1
@.str.51 = private unnamed_addr constant [14 x i8] c"Reveal Hidden\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"CURVE_OT_reveal\00", align 1
@.str.53 = private unnamed_addr constant [33 x i8] c"Show again hidden control points\00", align 1
@.str.54 = private unnamed_addr constant [10 x i8] c"Subdivide\00", align 1
@.str.55 = private unnamed_addr constant [28 x i8] c"Subdivide selected segments\00", align 1
@.str.56 = private unnamed_addr constant [19 x i8] c"CURVE_OT_subdivide\00", align 1
@.str.57 = private unnamed_addr constant [12 x i8] c"number_cuts\00", align 1
@.str.58 = private unnamed_addr constant [15 x i8] c"Number of cuts\00", align 1
@CURVE_OT_spline_type_set.type_items = internal global [4 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 0, ptr @.str.59, i32 0, ptr @.str.60, ptr @.str.18 }, %struct.EnumPropertyItem { i32 1, ptr @.str.61, i32 0, ptr @.str.62, ptr @.str.18 }, %struct.EnumPropertyItem { i32 4, ptr @.str.63, i32 0, ptr @.str.63, ptr @.str.18 }, %struct.EnumPropertyItem zeroinitializer], align 16
@.str.59 = private unnamed_addr constant [5 x i8] c"POLY\00", align 1
@.str.60 = private unnamed_addr constant [5 x i8] c"Poly\00", align 1
@.str.61 = private unnamed_addr constant [7 x i8] c"BEZIER\00", align 1
@.str.62 = private unnamed_addr constant [7 x i8] c"Bezier\00", align 1
@.str.63 = private unnamed_addr constant [6 x i8] c"NURBS\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"Set Spline Type\00", align 1
@.str.65 = private unnamed_addr constant [26 x i8] c"Set type of active spline\00", align 1
@.str.66 = private unnamed_addr constant [25 x i8] c"CURVE_OT_spline_type_set\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"Type\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"Spline type\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"use_handles\00", align 1
@.str.71 = private unnamed_addr constant [8 x i8] c"Handles\00", align 1
@.str.72 = private unnamed_addr constant [56 x i8] c"Use handles when converting bezier curves into polygons\00", align 1
@CURVE_OT_handle_type_set.editcurve_handle_type_items = internal global [6 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 1, ptr @.str.73, i32 0, ptr @.str.74, ptr @.str.18 }, %struct.EnumPropertyItem { i32 2, ptr @.str.75, i32 0, ptr @.str.76, ptr @.str.18 }, %struct.EnumPropertyItem { i32 5, ptr @.str.77, i32 0, ptr @.str.78, ptr @.str.18 }, %struct.EnumPropertyItem { i32 6, ptr @.str.79, i32 0, ptr @.str.80, ptr @.str.18 }, %struct.EnumPropertyItem { i32 3, ptr @.str.81, i32 0, ptr @.str.82, ptr @.str.18 }, %struct.EnumPropertyItem zeroinitializer], align 16
@.str.73 = private unnamed_addr constant [10 x i8] c"AUTOMATIC\00", align 1
@.str.74 = private unnamed_addr constant [10 x i8] c"Automatic\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"VECTOR\00", align 1
@.str.76 = private unnamed_addr constant [7 x i8] c"Vector\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"ALIGNED\00", align 1
@.str.78 = private unnamed_addr constant [8 x i8] c"Aligned\00", align 1
@.str.79 = private unnamed_addr constant [11 x i8] c"FREE_ALIGN\00", align 1
@.str.80 = private unnamed_addr constant [5 x i8] c"Free\00", align 1
@.str.81 = private unnamed_addr constant [18 x i8] c"TOGGLE_FREE_ALIGN\00", align 1
@.str.82 = private unnamed_addr constant [18 x i8] c"Toggle Free/Align\00", align 1
@.str.83 = private unnamed_addr constant [16 x i8] c"Set Handle Type\00", align 1
@.str.84 = private unnamed_addr constant [48 x i8] c"Set type of handles for selected control points\00", align 1
@.str.85 = private unnamed_addr constant [25 x i8] c"CURVE_OT_handle_type_set\00", align 1
@.str.86 = private unnamed_addr constant [15 x i8] c"Recalc Normals\00", align 1
@.str.87 = private unnamed_addr constant [46 x i8] c"Recalculate the direction of selected handles\00", align 1
@.str.88 = private unnamed_addr constant [33 x i8] c"CURVE_OT_normals_make_consistent\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c"calc_length\00", align 1
@.str.90 = private unnamed_addr constant [7 x i8] c"Length\00", align 1
@.str.91 = private unnamed_addr constant [26 x i8] c"Recalculate handle length\00", align 1
@.str.92 = private unnamed_addr constant [13 x i8] c"Make Segment\00", align 1
@.str.93 = private unnamed_addr constant [22 x i8] c"CURVE_OT_make_segment\00", align 1
@.str.94 = private unnamed_addr constant [39 x i8] c"Join two curves by their selected ends\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"Spin\00", align 1
@.str.96 = private unnamed_addr constant [14 x i8] c"CURVE_OT_spin\00", align 1
@.str.97 = private unnamed_addr constant [71 x i8] c"Extrude selected boundary row around pivot point and current view axis\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c"Center\00", align 1
@.str.100 = private unnamed_addr constant [28 x i8] c"Center in global view space\00", align 1
@.str.101 = private unnamed_addr constant [5 x i8] c"axis\00", align 1
@.str.102 = private unnamed_addr constant [5 x i8] c"Axis\00", align 1
@.str.103 = private unnamed_addr constant [26 x i8] c"Axis in global view space\00", align 1
@.str.104 = private unnamed_addr constant [11 x i8] c"Add Vertex\00", align 1
@.str.105 = private unnamed_addr constant [20 x i8] c"CURVE_OT_vertex_add\00", align 1
@.str.106 = private unnamed_addr constant [72 x i8] c"Add a new control point (linked to only selected end-curve one, if any)\00", align 1
@.str.107 = private unnamed_addr constant [9 x i8] c"location\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"Location\00", align 1
@.str.109 = private unnamed_addr constant [30 x i8] c"Location to add new vertex at\00", align 1
@.str.110 = private unnamed_addr constant [8 x i8] c"Extrude\00", align 1
@.str.111 = private unnamed_addr constant [34 x i8] c"Extrude selected control point(s)\00", align 1
@.str.112 = private unnamed_addr constant [17 x i8] c"CURVE_OT_extrude\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@transform_mode_types = external global [0 x %struct.EnumPropertyItem], align 8
@.str.114 = private unnamed_addr constant [5 x i8] c"Mode\00", align 1
@CURVE_OT_cyclic_toggle.direction_items = internal global [3 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 0, ptr @.str.115, i32 0, ptr @.str.116, ptr @.str.18 }, %struct.EnumPropertyItem { i32 1, ptr @.str.117, i32 0, ptr @.str.118, ptr @.str.18 }, %struct.EnumPropertyItem zeroinitializer], align 16
@.str.115 = private unnamed_addr constant [9 x i8] c"CYCLIC_U\00", align 1
@.str.116 = private unnamed_addr constant [9 x i8] c"Cyclic U\00", align 1
@.str.117 = private unnamed_addr constant [9 x i8] c"CYCLIC_V\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Cyclic V\00", align 1
@.str.119 = private unnamed_addr constant [14 x i8] c"Toggle Cyclic\00", align 1
@.str.120 = private unnamed_addr constant [38 x i8] c"Make active spline closed/opened loop\00", align 1
@.str.121 = private unnamed_addr constant [23 x i8] c"CURVE_OT_cyclic_toggle\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"direction\00", align 1
@.str.123 = private unnamed_addr constant [10 x i8] c"Direction\00", align 1
@.str.124 = private unnamed_addr constant [36 x i8] c"Direction to make surface cyclic in\00", align 1
@.str.125 = private unnamed_addr constant [18 x i8] c"Select Linked All\00", align 1
@.str.126 = private unnamed_addr constant [23 x i8] c"CURVE_OT_select_linked\00", align 1
@.str.127 = private unnamed_addr constant [47 x i8] c"Select all control points linked to active one\00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"Select Linked\00", align 1
@.str.129 = private unnamed_addr constant [28 x i8] c"CURVE_OT_select_linked_pick\00", align 1
@.str.130 = private unnamed_addr constant [58 x i8] c"Select all control points linked to already selected ones\00", align 1
@.str.131 = private unnamed_addr constant [9 x i8] c"deselect\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"Deselect\00", align 1
@.str.133 = private unnamed_addr constant [58 x i8] c"Deselect linked control points rather than selecting them\00", align 1
@.str.134 = private unnamed_addr constant [25 x i8] c"Select Control Point Row\00", align 1
@.str.135 = private unnamed_addr constant [20 x i8] c"CURVE_OT_select_row\00", align 1
@.str.136 = private unnamed_addr constant [52 x i8] c"Select a row of control points including active one\00", align 1
@.str.137 = private unnamed_addr constant [12 x i8] c"Select Next\00", align 1
@.str.138 = private unnamed_addr constant [21 x i8] c"CURVE_OT_select_next\00", align 1
@.str.139 = private unnamed_addr constant [71 x i8] c"Select control points following already selected ones along the curves\00", align 1
@.str.140 = private unnamed_addr constant [16 x i8] c"Select Previous\00", align 1
@.str.141 = private unnamed_addr constant [25 x i8] c"CURVE_OT_select_previous\00", align 1
@.str.142 = private unnamed_addr constant [71 x i8] c"Select control points preceding already selected ones along the curves\00", align 1
@.str.143 = private unnamed_addr constant [12 x i8] c"Select More\00", align 1
@.str.144 = private unnamed_addr constant [21 x i8] c"CURVE_OT_select_more\00", align 1
@.str.145 = private unnamed_addr constant [63 x i8] c"Select control points directly linked to already selected ones\00", align 1
@.str.146 = private unnamed_addr constant [12 x i8] c"Select Less\00", align 1
@.str.147 = private unnamed_addr constant [21 x i8] c"CURVE_OT_select_less\00", align 1
@.str.148 = private unnamed_addr constant [58 x i8] c"Reduce current selection by deselecting boundary elements\00", align 1
@.str.149 = private unnamed_addr constant [14 x i8] c"Select Random\00", align 1
@.str.150 = private unnamed_addr constant [23 x i8] c"CURVE_OT_select_random\00", align 1
@.str.151 = private unnamed_addr constant [36 x i8] c"Randomly select some control points\00", align 1
@.str.152 = private unnamed_addr constant [8 x i8] c"percent\00", align 1
@.str.153 = private unnamed_addr constant [8 x i8] c"Percent\00", align 1
@.str.154 = private unnamed_addr constant [42 x i8] c"Percentage of elements to select randomly\00", align 1
@.str.155 = private unnamed_addr constant [17 x i8] c"Checker Deselect\00", align 1
@.str.156 = private unnamed_addr constant [28 x i8] c"Deselect every other vertex\00", align 1
@.str.157 = private unnamed_addr constant [20 x i8] c"CURVE_OT_select_nth\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"nth\00", align 1
@.str.159 = private unnamed_addr constant [14 x i8] c"Nth Selection\00", align 1
@.str.160 = private unnamed_addr constant [16 x i8] c"Duplicate Curve\00", align 1
@.str.161 = private unnamed_addr constant [34 x i8] c"Duplicate selected control points\00", align 1
@.str.162 = private unnamed_addr constant [19 x i8] c"CURVE_OT_duplicate\00", align 1
@.str.163 = private unnamed_addr constant [7 x i8] c"Delete\00", align 1
@.str.164 = private unnamed_addr constant [43 x i8] c"Delete selected control points or segments\00", align 1
@.str.165 = private unnamed_addr constant [16 x i8] c"CURVE_OT_delete\00", align 1
@curve_delete_type_items = internal global [3 x %struct.EnumPropertyItem] [%struct.EnumPropertyItem { i32 0, ptr @.str.226, i32 0, ptr @.str.227, ptr @.str.18 }, %struct.EnumPropertyItem { i32 1, ptr @.str.228, i32 0, ptr @.str.229, ptr @.str.18 }, %struct.EnumPropertyItem zeroinitializer], align 16
@.str.166 = private unnamed_addr constant [25 x i8] c"Which elements to delete\00", align 1
@.str.167 = private unnamed_addr constant [13 x i8] c"Shade Smooth\00", align 1
@.str.168 = private unnamed_addr constant [22 x i8] c"CURVE_OT_shade_smooth\00", align 1
@.str.169 = private unnamed_addr constant [22 x i8] c"Set shading to smooth\00", align 1
@.str.170 = private unnamed_addr constant [11 x i8] c"Shade Flat\00", align 1
@.str.171 = private unnamed_addr constant [20 x i8] c"CURVE_OT_shade_flat\00", align 1
@.str.172 = private unnamed_addr constant [20 x i8] c"Set shading to flat\00", align 1
@.str.173 = private unnamed_addr constant [38 x i8] c"Active object is not a selected curve\00", align 1
@.str.174 = private unnamed_addr constant [11 x i8] c"Clear Tilt\00", align 1
@.str.175 = private unnamed_addr constant [20 x i8] c"CURVE_OT_tilt_clear\00", align 1
@.str.176 = private unnamed_addr constant [42 x i8] c"Clear the tilt of selected control points\00", align 1
@.str.177 = private unnamed_addr constant [20 x i8] c"Match Texture Space\00", align 1
@.str.178 = private unnamed_addr constant [29 x i8] c"CURVE_OT_match_texture_space\00", align 1
@.str.179 = private unnamed_addr constant [45 x i8] c"Match texture space to object's bounding box\00", align 1
@.str.180 = private unnamed_addr constant [30 x i8] c"splines[%d].bezier_points[%d]\00", align 1
@.str.181 = private unnamed_addr constant [15 x i8] c"%s.handle_left\00", align 1
@.str.182 = private unnamed_addr constant [16 x i8] c"%s.handle_right\00", align 1
@.str.183 = private unnamed_addr constant [23 x i8] c"splines[%d].points[%d]\00", align 1
@.str.184 = private unnamed_addr constant [8 x i8] c"splines\00", align 1
@.str.185 = private unnamed_addr constant [15 x i8] c".bezier_points\00", align 1
@.str.186 = private unnamed_addr constant [8 x i8] c".points\00", align 1
@.str.187 = private unnamed_addr constant [12 x i8] c"splines[%d]\00", align 1
@.str.188 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@G = external local_unnamed_addr global %struct.Global, align 8
@.str.189 = private unnamed_addr constant [27 x i8] c"curve old to new index map\00", align 1
@.str.190 = private unnamed_addr constant [14 x i8] c"currkey->data\00", align 1
@.str.191 = private unnamed_addr constant [18 x i8] c"editNurb keyIndex\00", align 1
@.str.192 = private unnamed_addr constant [16 x i8] c"init_cvKeyIndex\00", align 1
@.str.193 = private unnamed_addr constant [41 x i8] c"Cannot separate a curve with vertex keys\00", align 1
@.str.194 = private unnamed_addr constant [34 x i8] c"Cannot separate current selection\00", align 1
@.str.195 = private unnamed_addr constant [14 x i8] c"adduplicateN3\00", align 1
@.str.197 = private unnamed_addr constant [31 x i8] c"Cannot split current selection\00", align 1
@MEM_dupallocN = external local_unnamed_addr global ptr, align 8
@.str.198 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@.str.199 = private unnamed_addr constant [11 x i8] c"subdivNurb\00", align 1
@.str.200 = private unnamed_addr constant [12 x i8] c"subdivNurb2\00", align 1
@.str.201 = private unnamed_addr constant [14 x i8] c"subivideNurb3\00", align 1
@.str.202 = private unnamed_addr constant [15 x i8] c"subdivideNurb4\00", align 1
@.str.203 = private unnamed_addr constant [20 x i8] c"Not yet implemented\00", align 1
@.str.204 = private unnamed_addr constant [23 x i8] c"No conversion possible\00", align 1
@.str.205 = private unnamed_addr constant [12 x i8] c"addsegmentN\00", align 1
@.str.206 = private unnamed_addr constant [13 x i8] c"addsegmentN2\00", align 1
@.str.207 = private unnamed_addr constant [20 x i8] c"Cannot make segment\00", align 1
@nsortbase = internal global %struct.ListBase zeroinitializer, align 8
@.str.208 = private unnamed_addr constant [28 x i8] c"Too few selections to merge\00", align 1
@.str.209 = private unnamed_addr constant [26 x i8] c"Resolution does not match\00", align 1
@.str.210 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.211 = private unnamed_addr constant [8 x i8] c"mergeBP\00", align 1
@.str.212 = private unnamed_addr constant [13 x i8] c"switchdirect\00", align 1
@.str.213 = private unnamed_addr constant [12 x i8] c"Cannot spin\00", align 1
@__const.spin_invoke.axis = private unnamed_addr constant [3 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4
@.str.214 = private unnamed_addr constant [13 x i8] c"addvert_Nurb\00", align 1
@.str.215 = private unnamed_addr constant [19 x i8] c"addvert_Nurb newnu\00", align 1
@.str.216 = private unnamed_addr constant [14 x i8] c"addvert_Nurb5\00", align 1
@.str.217 = private unnamed_addr constant [14 x i8] c"addvert_Nurb4\00", align 1
@.str.218 = private unnamed_addr constant [14 x i8] c"addvert_Nurb3\00", align 1
@select_row_exec.last = internal unnamed_addr global ptr null, align 8
@select_row_exec.direction = internal unnamed_addr global i32 0, align 4
@.str.219 = private unnamed_addr constant [11 x i8] c"selectlist\00", align 1
@.str.220 = private unnamed_addr constant [33 x i8] c"Surface has not got active point\00", align 1
@.str.221 = private unnamed_addr constant [31 x i8] c"Curve has not got active point\00", align 1
@.str.222 = private unnamed_addr constant [35 x i8] c"Cannot duplicate current selection\00", align 1
@.str.223 = private unnamed_addr constant [11 x i8] c"deleteNurb\00", align 1
@.str.224 = private unnamed_addr constant [8 x i8] c"delNurb\00", align 1
@.str.225 = private unnamed_addr constant [9 x i8] c"delNurb2\00", align 1
@.str.226 = private unnamed_addr constant [5 x i8] c"VERT\00", align 1
@.str.227 = private unnamed_addr constant [9 x i8] c"Vertices\00", align 1
@.str.228 = private unnamed_addr constant [8 x i8] c"SEGMENT\00", align 1
@.str.229 = private unnamed_addr constant [9 x i8] c"Segments\00", align 1
@.str.230 = private unnamed_addr constant [18 x i8] c"dupli_keyIndex gh\00", align 1
@.str.231 = private unnamed_addr constant [25 x i8] c"dupli_keyIndexHash index\00", align 1
@.str.232 = private unnamed_addr constant [10 x i8] c"undoCurve\00", align 1
@str = private unnamed_addr constant [21 x i8] c"Can't duplicate Nurb\00", align 1

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @object_editcurve_get(ptr noundef readonly %0) local_unnamed_addr #0 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %5 = load i16, ptr %4, align 8, !tbaa !5
  %6 = and i16 %5, -2
  %7 = icmp eq i16 %6, 2
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  br label %13

13:                                               ; preds = %3, %1, %8
  %14 = phi ptr [ %12, %8 ], [ null, %3 ], [ null, %1 ]
  ret ptr %14
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local i32 @isNurbsel(ptr nocapture noundef readonly %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 2
  %3 = load i16, ptr %2, align 8, !tbaa !21
  %4 = icmp eq i16 %3, 1
  %5 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 6
  %6 = load i32, ptr %5, align 8, !tbaa !23
  br i1 %4, label %7, label %33

7:                                                ; preds = %1
  %8 = icmp eq i32 %6, 0
  br i1 %8, label %52, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 18
  %11 = load ptr, ptr %10, align 8, !tbaa !24
  br label %15

12:                                               ; preds = %28
  %13 = getelementptr inbounds %struct.BezTriple, ptr %17, i64 1
  %14 = icmp eq i32 %18, 0
  br i1 %14, label %52, label %15, !llvm.loop !25

15:                                               ; preds = %9, %12
  %16 = phi i32 [ %18, %12 ], [ %6, %9 ]
  %17 = phi ptr [ %13, %12 ], [ %11, %9 ]
  %18 = add nsw i32 %16, -1
  %19 = getelementptr inbounds %struct.BezTriple, ptr %17, i64 0, i32 7
  %20 = load i8, ptr %19, align 1, !tbaa !27
  %21 = and i8 %20, 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %52

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.BezTriple, ptr %17, i64 0, i32 8
  %25 = load i8, ptr %24, align 4, !tbaa !29
  %26 = and i8 %25, 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %52

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.BezTriple, ptr %17, i64 0, i32 9
  %30 = load i8, ptr %29, align 1, !tbaa !30
  %31 = and i8 %30, 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %12, label %52

33:                                               ; preds = %1
  %34 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 7
  %35 = load i32, ptr %34, align 4, !tbaa !31
  %36 = mul nsw i32 %35, %6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %52, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 17
  %40 = load ptr, ptr %39, align 8, !tbaa !32
  br label %45

41:                                               ; preds = %45
  %42 = add nsw i32 %46, -1
  %43 = getelementptr inbounds %struct.BPoint, ptr %47, i64 1
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %52, label %45, !llvm.loop !33

45:                                               ; preds = %38, %41
  %46 = phi i32 [ %42, %41 ], [ %36, %38 ]
  %47 = phi ptr [ %43, %41 ], [ %40, %38 ]
  %48 = getelementptr inbounds %struct.BPoint, ptr %47, i64 0, i32 3
  %49 = load i16, ptr %48, align 4, !tbaa !34
  %50 = and i16 %49, 1
  %51 = icmp eq i16 %50, 0
  br i1 %51, label %41, label %52

52:                                               ; preds = %45, %41, %28, %23, %15, %12, %33, %7
  %53 = phi i32 [ 0, %7 ], [ 0, %33 ], [ 1, %28 ], [ 1, %23 ], [ 1, %15 ], [ 0, %12 ], [ 1, %45 ], [ 0, %41 ]
  ret i32 %53
}

; Function Attrs: nofree nounwind sspstrong uwtable
define dso_local void @printknots(ptr noundef readonly %0) local_unnamed_addr #3 {
  %2 = icmp ne ptr %0, null
  tail call void @llvm.assume(i1 %2)
  %3 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %4 = load i16, ptr %3, align 8, !tbaa !5
  %5 = and i16 %4, -2
  %6 = icmp eq i16 %5, 2
  tail call void @llvm.assume(i1 %6)
  %7 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = getelementptr inbounds %struct.Curve, ptr %8, i64 0, i32 4
  %10 = load ptr, ptr %9, align 8, !tbaa !18
  %11 = load ptr, ptr %10, align 8, !tbaa !36
  %12 = icmp eq ptr %11, null
  br i1 %12, label %130, label %13

13:                                               ; preds = %1, %127
  %14 = phi ptr [ %128, %127 ], [ %11, %1 ]
  %15 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 2
  %16 = load i16, ptr %15, align 8, !tbaa !21
  %17 = icmp eq i16 %16, 1
  %18 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 6
  %19 = load i32, ptr %18, align 8, !tbaa !23
  br i1 %17, label %20, label %46

20:                                               ; preds = %13
  %21 = icmp eq i32 %19, 0
  br i1 %21, label %127, label %22

22:                                               ; preds = %20
  %23 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 18
  %24 = load ptr, ptr %23, align 8, !tbaa !24
  br label %28

25:                                               ; preds = %41
  %26 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 1
  %27 = icmp eq i32 %31, 0
  br i1 %27, label %127, label %28, !llvm.loop !25

28:                                               ; preds = %25, %22
  %29 = phi i32 [ %31, %25 ], [ %19, %22 ]
  %30 = phi ptr [ %26, %25 ], [ %24, %22 ]
  %31 = add nsw i32 %29, -1
  %32 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 7
  %33 = load i8, ptr %32, align 1, !tbaa !27
  %34 = and i8 %33, 1
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %65

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 8
  %38 = load i8, ptr %37, align 4, !tbaa !29
  %39 = and i8 %38, 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %65

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 9
  %43 = load i8, ptr %42, align 1, !tbaa !30
  %44 = and i8 %43, 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %25, label %65

46:                                               ; preds = %13
  %47 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 7
  %48 = load i32, ptr %47, align 4, !tbaa !31
  %49 = mul nsw i32 %48, %19
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %127, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 17
  %53 = load ptr, ptr %52, align 8, !tbaa !32
  br label %58

54:                                               ; preds = %58
  %55 = add nsw i32 %59, -1
  %56 = getelementptr inbounds %struct.BPoint, ptr %60, i64 1
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %127, label %58, !llvm.loop !33

58:                                               ; preds = %54, %51
  %59 = phi i32 [ %55, %54 ], [ %49, %51 ]
  %60 = phi ptr [ %56, %54 ], [ %53, %51 ]
  %61 = getelementptr inbounds %struct.BPoint, ptr %60, i64 0, i32 3
  %62 = load i16, ptr %61, align 4, !tbaa !34
  %63 = and i16 %62, 1
  %64 = icmp eq i16 %63, 0
  br i1 %64, label %54, label %65

65:                                               ; preds = %58, %41, %36, %28
  %66 = icmp eq i16 %16, 4
  br i1 %66, label %67, label %127

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 15
  %69 = load ptr, ptr %68, align 8, !tbaa !37
  %70 = icmp eq ptr %69, null
  br i1 %70, label %96, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 11
  %73 = load i16, ptr %72, align 8, !tbaa !38
  %74 = sext i16 %73 to i32
  %75 = add nsw i32 %19, %74
  %76 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 13
  %77 = load i16, ptr %76, align 4, !tbaa !39
  %78 = and i16 %77, 1
  %79 = icmp eq i16 %78, 0
  %80 = add nsw i32 %74, -1
  %81 = select i1 %79, i32 0, i32 %80
  %82 = add nsw i32 %75, %81
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %96

84:                                               ; preds = %71
  %85 = zext i32 %82 to i64
  br label %86

86:                                               ; preds = %84, %86
  %87 = phi i64 [ 0, %84 ], [ %94, %86 ]
  %88 = load ptr, ptr %68, align 8, !tbaa !37
  %89 = getelementptr inbounds float, ptr %88, i64 %87
  %90 = load float, ptr %89, align 4, !tbaa !40
  %91 = fpext float %90 to double
  %92 = trunc i64 %87 to i32
  %93 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str, i32 noundef %92, double noundef nofpclass(nan inf) %91)
  %94 = add nuw nsw i64 %87, 1
  %95 = icmp eq i64 %94, %85
  br i1 %95, label %96, label %86, !llvm.loop !41

96:                                               ; preds = %86, %71, %67
  %97 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 16
  %98 = load ptr, ptr %97, align 8, !tbaa !42
  %99 = icmp eq ptr %98, null
  br i1 %99, label %127, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 12
  %102 = load i16, ptr %101, align 2, !tbaa !43
  %103 = sext i16 %102 to i32
  %104 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 7
  %105 = load i32, ptr %104, align 4, !tbaa !31
  %106 = add nsw i32 %105, %103
  %107 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 14
  %108 = load i16, ptr %107, align 2, !tbaa !44
  %109 = and i16 %108, 1
  %110 = icmp eq i16 %109, 0
  %111 = add nsw i32 %103, -1
  %112 = select i1 %110, i32 0, i32 %111
  %113 = add nsw i32 %106, %112
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %100
  %116 = zext i32 %113 to i64
  br label %117

117:                                              ; preds = %115, %117
  %118 = phi i64 [ 0, %115 ], [ %125, %117 ]
  %119 = load ptr, ptr %97, align 8, !tbaa !42
  %120 = getelementptr inbounds float, ptr %119, i64 %118
  %121 = load float, ptr %120, align 4, !tbaa !40
  %122 = fpext float %121 to double
  %123 = trunc i64 %118 to i32
  %124 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %123, double noundef nofpclass(nan inf) %122)
  %125 = add nuw nsw i64 %118, 1
  %126 = icmp eq i64 %125, %116
  br i1 %126, label %127, label %117, !llvm.loop !45

127:                                              ; preds = %54, %25, %117, %100, %46, %20, %65, %96
  %128 = load ptr, ptr %14, align 8, !tbaa !36
  %129 = icmp eq ptr %128, null
  br i1 %129, label %130, label %13, !llvm.loop !46

130:                                              ; preds = %127, %1
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #4

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @ED_curve_updateAnimPaths(ptr noundef %0) local_unnamed_addr #5 {
  %2 = tail call ptr @BKE_animdata_from_id(ptr noundef %0) #20
  %3 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct.EditNurb, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !47
  %7 = icmp eq ptr %6, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %1
  %9 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %0) #20
  %10 = icmp eq ptr %9, null
  br i1 %10, label %25, label %11

11:                                               ; preds = %8
  %12 = load ptr, ptr %9, align 8, !tbaa !49
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.AnimData, ptr %9, i64 0, i32 5
  %16 = load ptr, ptr %15, align 8, !tbaa !51
  %17 = icmp eq ptr %16, null
  br i1 %17, label %25, label %18

18:                                               ; preds = %11, %14
  %19 = load ptr, ptr %2, align 8, !tbaa !49
  %20 = icmp eq ptr %19, null
  br i1 %20, label %23, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.bAction, ptr %19, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %0, ptr noundef nonnull %22)
  br label %23

23:                                               ; preds = %21, %18
  %24 = getelementptr inbounds %struct.AnimData, ptr %2, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %0, ptr noundef nonnull %24)
  br label %25

25:                                               ; preds = %8, %14, %1, %23
  %26 = phi i32 [ 1, %23 ], [ 0, %1 ], [ 0, %14 ], [ 0, %8 ]
  ret i32 %26
}

declare ptr @BKE_animdata_from_id(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @curve_rename_fcurves(ptr noundef %0, ptr noundef %1) unnamed_addr #5 {
  %3 = alloca [64 x i8], align 16
  %4 = alloca [64 x i8], align 16
  %5 = alloca %struct.ListBase, align 8
  %6 = alloca [64 x i8], align 16
  %7 = alloca [64 x i8], align 16
  %8 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 4
  %9 = load ptr, ptr %8, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %4) #20
  %10 = tail call ptr @BKE_animdata_from_id(ptr noundef %0) #20
  %11 = freeze ptr %10
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %5) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  %12 = load ptr, ptr %9, align 8, !tbaa !36
  %13 = icmp eq ptr %12, null
  br i1 %13, label %238, label %14

14:                                               ; preds = %2
  %15 = getelementptr i8, ptr %9, i64 16
  %16 = getelementptr inbounds %struct.AnimData, ptr %11, i64 0, i32 5
  br label %17

17:                                               ; preds = %14, %234
  %18 = phi ptr [ %12, %14 ], [ %236, %234 ]
  %19 = phi i32 [ 0, %14 ], [ %235, %234 ]
  %20 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 18
  %21 = load ptr, ptr %20, align 8, !tbaa !24
  %22 = icmp eq ptr %21, null
  %23 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 6
  %24 = load i32, ptr %23, align 8, !tbaa !23
  br i1 %22, label %169, label %25

25:                                               ; preds = %17
  %26 = icmp eq i32 %24, 0
  br i1 %26, label %234, label %27

27:                                               ; preds = %25, %165
  %28 = phi i32 [ %31, %165 ], [ %24, %25 ]
  %29 = phi ptr [ %166, %165 ], [ %21, %25 ]
  %30 = phi i32 [ %167, %165 ], [ 0, %25 ]
  %31 = add nsw i32 %28, -1
  %32 = load ptr, ptr %15, align 8, !tbaa !47
  %33 = call ptr @BLI_ghash_lookup(ptr noundef %32, ptr noundef nonnull %29) #20
  %34 = icmp eq ptr %33, null
  br i1 %34, label %165, label %35

35:                                               ; preds = %27
  %36 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %3, i64 noundef 64, ptr noundef nonnull @.str.180, i32 noundef %19, i32 noundef %30) #20
  %37 = getelementptr inbounds %struct.CVKeyIndex, ptr %33, i64 0, i32 2
  %38 = load i32, ptr %37, align 4, !tbaa !52
  %39 = getelementptr inbounds %struct.CVKeyIndex, ptr %33, i64 0, i32 3
  %40 = load i32, ptr %39, align 8, !tbaa !54
  %41 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %4, i64 noundef 64, ptr noundef nonnull @.str.180, i32 noundef %38, i32 noundef %40) #20
  %42 = getelementptr inbounds %struct.CVKeyIndex, ptr %33, i64 0, i32 5
  %43 = load i8, ptr %42, align 8, !tbaa !55
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %126, label %45

45:                                               ; preds = %35
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %6) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %7) #20
  %46 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %7, i64 noundef 64, ptr noundef nonnull @.str.181, ptr noundef nonnull %4) #20
  %47 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %6, i64 noundef 64, ptr noundef nonnull @.str.182, ptr noundef nonnull %3) #20
  %48 = load ptr, ptr %1, align 8, !tbaa !56
  %49 = icmp eq ptr %48, null
  br i1 %49, label %85, label %50

50:                                               ; preds = %45
  %51 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #21
  %52 = shl i64 %51, 32
  %53 = ashr exact i64 %52, 32
  br label %54

54:                                               ; preds = %83, %50
  %55 = phi ptr [ %48, %50 ], [ %56, %83 ]
  %56 = load ptr, ptr %55, align 8, !tbaa !57
  %57 = getelementptr inbounds %struct.FCurve, ptr %55, i64 0, i32 12
  %58 = load ptr, ptr %57, align 8, !tbaa !59
  %59 = call i32 @strncmp(ptr noundef %58, ptr noundef nonnull %7, i64 noundef %53) #21
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %83

61:                                               ; preds = %54
  %62 = getelementptr inbounds i8, ptr %58, i64 %53
  %63 = call ptr @copy_fcurve(ptr noundef nonnull %55) #20
  %64 = getelementptr inbounds %struct.FCurve, ptr %63, i64 0, i32 12
  %65 = load ptr, ptr %64, align 8, !tbaa !59
  %66 = call ptr (ptr, ...) @BLI_sprintfN(ptr noundef nonnull @.str.188, ptr noundef nonnull %6, ptr noundef %62) #20
  store ptr %66, ptr %64, align 8, !tbaa !59
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef %63) #20
  %67 = getelementptr inbounds %struct.FCurve, ptr %55, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !60
  %69 = icmp eq ptr %68, null
  %70 = load ptr, ptr %11, align 8, !tbaa !49
  br i1 %69, label %74, label %71

71:                                               ; preds = %61
  call void @action_groups_remove_channel(ptr noundef %70, ptr noundef nonnull %55) #20
  %72 = load ptr, ptr %11, align 8, !tbaa !49
  %73 = load ptr, ptr %67, align 8, !tbaa !60
  call void @action_groups_add_channel(ptr noundef %72, ptr noundef %73, ptr noundef nonnull %63) #20
  br label %81

74:                                               ; preds = %61
  %75 = icmp ne ptr %70, null
  %76 = getelementptr inbounds %struct.bAction, ptr %70, i64 0, i32 1
  %77 = icmp eq ptr %76, %1
  %78 = select i1 %75, i1 %77, i1 false
  br i1 %78, label %79, label %80

79:                                               ; preds = %74
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %55) #20
  br label %81

80:                                               ; preds = %74
  call void @BLI_remlink(ptr noundef nonnull %16, ptr noundef nonnull %55) #20
  br label %81

81:                                               ; preds = %80, %79, %71
  call void @free_fcurve(ptr noundef nonnull %55) #20
  %82 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %82(ptr noundef %65) #20
  br label %83

83:                                               ; preds = %81, %54
  %84 = icmp eq ptr %56, null
  br i1 %84, label %85, label %54, !llvm.loop !61

85:                                               ; preds = %83, %45
  %86 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %7, i64 noundef 64, ptr noundef nonnull @.str.182, ptr noundef nonnull %4) #20
  %87 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %6, i64 noundef 64, ptr noundef nonnull @.str.181, ptr noundef nonnull %3) #20
  %88 = load ptr, ptr %1, align 8, !tbaa !56
  %89 = icmp eq ptr %88, null
  br i1 %89, label %125, label %90

90:                                               ; preds = %85
  %91 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %7) #21
  %92 = shl i64 %91, 32
  %93 = ashr exact i64 %92, 32
  br label %94

94:                                               ; preds = %123, %90
  %95 = phi ptr [ %88, %90 ], [ %96, %123 ]
  %96 = load ptr, ptr %95, align 8, !tbaa !57
  %97 = getelementptr inbounds %struct.FCurve, ptr %95, i64 0, i32 12
  %98 = load ptr, ptr %97, align 8, !tbaa !59
  %99 = call i32 @strncmp(ptr noundef %98, ptr noundef nonnull %7, i64 noundef %93) #21
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %123

101:                                              ; preds = %94
  %102 = getelementptr inbounds i8, ptr %98, i64 %93
  %103 = call ptr @copy_fcurve(ptr noundef nonnull %95) #20
  %104 = getelementptr inbounds %struct.FCurve, ptr %103, i64 0, i32 12
  %105 = load ptr, ptr %104, align 8, !tbaa !59
  %106 = call ptr (ptr, ...) @BLI_sprintfN(ptr noundef nonnull @.str.188, ptr noundef nonnull %6, ptr noundef %102) #20
  store ptr %106, ptr %104, align 8, !tbaa !59
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef %103) #20
  %107 = getelementptr inbounds %struct.FCurve, ptr %95, i64 0, i32 2
  %108 = load ptr, ptr %107, align 8, !tbaa !60
  %109 = icmp eq ptr %108, null
  %110 = load ptr, ptr %11, align 8, !tbaa !49
  br i1 %109, label %114, label %111

111:                                              ; preds = %101
  call void @action_groups_remove_channel(ptr noundef %110, ptr noundef nonnull %95) #20
  %112 = load ptr, ptr %11, align 8, !tbaa !49
  %113 = load ptr, ptr %107, align 8, !tbaa !60
  call void @action_groups_add_channel(ptr noundef %112, ptr noundef %113, ptr noundef nonnull %103) #20
  br label %121

114:                                              ; preds = %101
  %115 = icmp ne ptr %110, null
  %116 = getelementptr inbounds %struct.bAction, ptr %110, i64 0, i32 1
  %117 = icmp eq ptr %116, %1
  %118 = select i1 %115, i1 %117, i1 false
  br i1 %118, label %119, label %120

119:                                              ; preds = %114
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %95) #20
  br label %121

120:                                              ; preds = %114
  call void @BLI_remlink(ptr noundef nonnull %16, ptr noundef nonnull %95) #20
  br label %121

121:                                              ; preds = %120, %119, %111
  call void @free_fcurve(ptr noundef nonnull %95) #20
  %122 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %122(ptr noundef %105) #20
  br label %123

123:                                              ; preds = %121, %94
  %124 = icmp eq ptr %96, null
  br i1 %124, label %125, label %94, !llvm.loop !61

125:                                              ; preds = %123, %85
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %6) #20
  br label %126

126:                                              ; preds = %125, %35
  %127 = load ptr, ptr %1, align 8, !tbaa !56
  %128 = icmp eq ptr %127, null
  br i1 %128, label %164, label %129

129:                                              ; preds = %126
  %130 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4) #21
  %131 = shl i64 %130, 32
  %132 = ashr exact i64 %131, 32
  br label %133

133:                                              ; preds = %162, %129
  %134 = phi ptr [ %127, %129 ], [ %135, %162 ]
  %135 = load ptr, ptr %134, align 8, !tbaa !57
  %136 = getelementptr inbounds %struct.FCurve, ptr %134, i64 0, i32 12
  %137 = load ptr, ptr %136, align 8, !tbaa !59
  %138 = call i32 @strncmp(ptr noundef %137, ptr noundef nonnull %4, i64 noundef %132) #21
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %162

140:                                              ; preds = %133
  %141 = getelementptr inbounds i8, ptr %137, i64 %132
  %142 = call ptr @copy_fcurve(ptr noundef nonnull %134) #20
  %143 = getelementptr inbounds %struct.FCurve, ptr %142, i64 0, i32 12
  %144 = load ptr, ptr %143, align 8, !tbaa !59
  %145 = call ptr (ptr, ...) @BLI_sprintfN(ptr noundef nonnull @.str.188, ptr noundef nonnull %3, ptr noundef %141) #20
  store ptr %145, ptr %143, align 8, !tbaa !59
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef %142) #20
  %146 = getelementptr inbounds %struct.FCurve, ptr %134, i64 0, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !60
  %148 = icmp eq ptr %147, null
  %149 = load ptr, ptr %11, align 8, !tbaa !49
  br i1 %148, label %153, label %150

150:                                              ; preds = %140
  call void @action_groups_remove_channel(ptr noundef %149, ptr noundef nonnull %134) #20
  %151 = load ptr, ptr %11, align 8, !tbaa !49
  %152 = load ptr, ptr %146, align 8, !tbaa !60
  call void @action_groups_add_channel(ptr noundef %151, ptr noundef %152, ptr noundef nonnull %142) #20
  br label %160

153:                                              ; preds = %140
  %154 = icmp ne ptr %149, null
  %155 = getelementptr inbounds %struct.bAction, ptr %149, i64 0, i32 1
  %156 = icmp eq ptr %155, %1
  %157 = select i1 %154, i1 %156, i1 false
  br i1 %157, label %158, label %159

158:                                              ; preds = %153
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %134) #20
  br label %160

159:                                              ; preds = %153
  call void @BLI_remlink(ptr noundef nonnull %16, ptr noundef nonnull %134) #20
  br label %160

160:                                              ; preds = %159, %158, %150
  call void @free_fcurve(ptr noundef nonnull %134) #20
  %161 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %161(ptr noundef %144) #20
  br label %162

162:                                              ; preds = %160, %133
  %163 = icmp eq ptr %135, null
  br i1 %163, label %164, label %133, !llvm.loop !61

164:                                              ; preds = %162, %126
  store i32 %19, ptr %37, align 4, !tbaa !52
  store i32 %30, ptr %39, align 8, !tbaa !54
  br label %165

165:                                              ; preds = %164, %27
  %166 = getelementptr inbounds %struct.BezTriple, ptr %29, i64 1
  %167 = add nuw nsw i32 %30, 1
  %168 = icmp eq i32 %31, 0
  br i1 %168, label %234, label %27, !llvm.loop !62

169:                                              ; preds = %17
  %170 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 7
  %171 = load i32, ptr %170, align 4, !tbaa !31
  %172 = mul nsw i32 %171, %24
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %234, label %174

174:                                              ; preds = %169
  %175 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 17
  %176 = load ptr, ptr %175, align 8, !tbaa !32
  br label %177

177:                                              ; preds = %174, %230
  %178 = phi i32 [ %181, %230 ], [ %172, %174 ]
  %179 = phi ptr [ %231, %230 ], [ %176, %174 ]
  %180 = phi i32 [ %232, %230 ], [ 0, %174 ]
  %181 = add nsw i32 %178, -1
  %182 = load ptr, ptr %15, align 8, !tbaa !47
  %183 = call ptr @BLI_ghash_lookup(ptr noundef %182, ptr noundef %179) #20
  %184 = icmp eq ptr %183, null
  br i1 %184, label %230, label %185

185:                                              ; preds = %177
  %186 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %3, i64 noundef 64, ptr noundef nonnull @.str.183, i32 noundef %19, i32 noundef %180) #20
  %187 = getelementptr inbounds %struct.CVKeyIndex, ptr %183, i64 0, i32 2
  %188 = load i32, ptr %187, align 4, !tbaa !52
  %189 = getelementptr inbounds %struct.CVKeyIndex, ptr %183, i64 0, i32 3
  %190 = load i32, ptr %189, align 8, !tbaa !54
  %191 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %4, i64 noundef 64, ptr noundef nonnull @.str.183, i32 noundef %188, i32 noundef %190) #20
  %192 = load ptr, ptr %1, align 8, !tbaa !56
  %193 = icmp eq ptr %192, null
  br i1 %193, label %229, label %194

194:                                              ; preds = %185
  %195 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4) #21
  %196 = shl i64 %195, 32
  %197 = ashr exact i64 %196, 32
  br label %198

198:                                              ; preds = %227, %194
  %199 = phi ptr [ %192, %194 ], [ %200, %227 ]
  %200 = load ptr, ptr %199, align 8, !tbaa !57
  %201 = getelementptr inbounds %struct.FCurve, ptr %199, i64 0, i32 12
  %202 = load ptr, ptr %201, align 8, !tbaa !59
  %203 = call i32 @strncmp(ptr noundef %202, ptr noundef nonnull %4, i64 noundef %197) #21
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %227

205:                                              ; preds = %198
  %206 = getelementptr inbounds i8, ptr %202, i64 %197
  %207 = call ptr @copy_fcurve(ptr noundef nonnull %199) #20
  %208 = getelementptr inbounds %struct.FCurve, ptr %207, i64 0, i32 12
  %209 = load ptr, ptr %208, align 8, !tbaa !59
  %210 = call ptr (ptr, ...) @BLI_sprintfN(ptr noundef nonnull @.str.188, ptr noundef nonnull %3, ptr noundef %206) #20
  store ptr %210, ptr %208, align 8, !tbaa !59
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef %207) #20
  %211 = getelementptr inbounds %struct.FCurve, ptr %199, i64 0, i32 2
  %212 = load ptr, ptr %211, align 8, !tbaa !60
  %213 = icmp eq ptr %212, null
  %214 = load ptr, ptr %11, align 8, !tbaa !49
  br i1 %213, label %218, label %215

215:                                              ; preds = %205
  call void @action_groups_remove_channel(ptr noundef %214, ptr noundef nonnull %199) #20
  %216 = load ptr, ptr %11, align 8, !tbaa !49
  %217 = load ptr, ptr %211, align 8, !tbaa !60
  call void @action_groups_add_channel(ptr noundef %216, ptr noundef %217, ptr noundef nonnull %207) #20
  br label %225

218:                                              ; preds = %205
  %219 = icmp ne ptr %214, null
  %220 = getelementptr inbounds %struct.bAction, ptr %214, i64 0, i32 1
  %221 = icmp eq ptr %220, %1
  %222 = select i1 %219, i1 %221, i1 false
  br i1 %222, label %223, label %224

223:                                              ; preds = %218
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %199) #20
  br label %225

224:                                              ; preds = %218
  call void @BLI_remlink(ptr noundef nonnull %16, ptr noundef nonnull %199) #20
  br label %225

225:                                              ; preds = %224, %223, %215
  call void @free_fcurve(ptr noundef nonnull %199) #20
  %226 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %226(ptr noundef %209) #20
  br label %227

227:                                              ; preds = %225, %198
  %228 = icmp eq ptr %200, null
  br i1 %228, label %229, label %198, !llvm.loop !61

229:                                              ; preds = %227, %185
  store i32 %19, ptr %187, align 4, !tbaa !52
  store i32 %180, ptr %189, align 8, !tbaa !54
  br label %230

230:                                              ; preds = %229, %177
  %231 = getelementptr inbounds %struct.BPoint, ptr %179, i64 1
  %232 = add nuw nsw i32 %180, 1
  %233 = icmp eq i32 %181, 0
  br i1 %233, label %234, label %177, !llvm.loop !63

234:                                              ; preds = %165, %230, %25, %169
  %235 = add nuw nsw i32 %19, 1
  %236 = load ptr, ptr %18, align 8, !tbaa !36
  %237 = icmp eq ptr %236, null
  br i1 %237, label %238, label %17, !llvm.loop !64

238:                                              ; preds = %234, %2
  %239 = load ptr, ptr %1, align 8, !tbaa !56
  %240 = icmp eq ptr %239, null
  br i1 %240, label %244, label %241

241:                                              ; preds = %238
  %242 = getelementptr inbounds %struct.AnimData, ptr %11, i64 0, i32 5
  %243 = icmp eq ptr %242, %1
  br label %250

244:                                              ; preds = %271, %238
  %245 = load ptr, ptr %9, align 8, !tbaa !36
  %246 = icmp eq ptr %245, null
  br i1 %246, label %340, label %247

247:                                              ; preds = %244
  %248 = getelementptr i8, ptr %9, i64 16
  %249 = getelementptr inbounds %struct.AnimData, ptr %11, i64 0, i32 5
  br label %273

250:                                              ; preds = %241, %271
  %251 = phi ptr [ %239, %241 ], [ %252, %271 ]
  %252 = load ptr, ptr %251, align 8, !tbaa !57
  %253 = getelementptr inbounds %struct.FCurve, ptr %251, i64 0, i32 12
  %254 = load ptr, ptr %253, align 8, !tbaa !59
  %255 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %254, ptr noundef nonnull dereferenceable(8) @.str.184, i64 noundef 7) #21
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %271

257:                                              ; preds = %250
  %258 = call ptr @strchr(ptr noundef nonnull dereferenceable(1) %254, i32 noundef 46) #21
  %259 = icmp eq ptr %258, null
  br i1 %259, label %271, label %260

260:                                              ; preds = %257
  %261 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %258, ptr noundef nonnull dereferenceable(15) @.str.185, i64 noundef 14) #21
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %266, label %263

263:                                              ; preds = %260
  %264 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %258, ptr noundef nonnull dereferenceable(8) @.str.186, i64 noundef 7) #21
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %271

266:                                              ; preds = %263, %260
  br i1 %243, label %267, label %268

267:                                              ; preds = %266
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %251) #20
  br label %270

268:                                              ; preds = %266
  %269 = load ptr, ptr %11, align 8, !tbaa !49
  call void @action_groups_remove_channel(ptr noundef %269, ptr noundef nonnull %251) #20
  br label %270

270:                                              ; preds = %267, %268
  call void @free_fcurve(ptr noundef nonnull %251) #20
  br label %271

271:                                              ; preds = %257, %263, %270, %250
  %272 = icmp eq ptr %252, null
  br i1 %272, label %244, label %250, !llvm.loop !65

273:                                              ; preds = %247, %336
  %274 = phi ptr [ %245, %247 ], [ %338, %336 ]
  %275 = phi i32 [ 0, %247 ], [ %337, %336 ]
  %276 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 6
  %277 = load i32, ptr %276, align 8, !tbaa !23
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %336, label %279

279:                                              ; preds = %273
  %280 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 18
  %281 = load ptr, ptr %280, align 8, !tbaa !24
  %282 = icmp eq ptr %281, null
  br i1 %282, label %286, label %283

283:                                              ; preds = %279
  %284 = load ptr, ptr %248, align 8, !tbaa !47
  %285 = call ptr @BLI_ghash_lookup(ptr noundef %284, ptr noundef nonnull %281) #20
  br label %291

286:                                              ; preds = %279
  %287 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 17
  %288 = load ptr, ptr %287, align 8, !tbaa !32
  %289 = load ptr, ptr %248, align 8, !tbaa !47
  %290 = call ptr @BLI_ghash_lookup(ptr noundef %289, ptr noundef %288) #20
  br label %291

291:                                              ; preds = %283, %286
  %292 = phi ptr [ %285, %283 ], [ %290, %286 ]
  %293 = icmp eq ptr %292, null
  br i1 %293, label %336, label %294

294:                                              ; preds = %291
  %295 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %3, i64 noundef 64, ptr noundef nonnull @.str.187, i32 noundef %275) #20
  %296 = getelementptr inbounds %struct.CVKeyIndex, ptr %292, i64 0, i32 2
  %297 = load i32, ptr %296, align 4, !tbaa !52
  %298 = call i64 (ptr, i64, ptr, ...) @BLI_snprintf(ptr noundef nonnull %4, i64 noundef 64, ptr noundef nonnull @.str.187, i32 noundef %297) #20
  %299 = load ptr, ptr %1, align 8, !tbaa !56
  %300 = icmp eq ptr %299, null
  br i1 %300, label %336, label %301

301:                                              ; preds = %294
  %302 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %4) #21
  %303 = shl i64 %302, 32
  %304 = ashr exact i64 %303, 32
  br label %305

305:                                              ; preds = %334, %301
  %306 = phi ptr [ %299, %301 ], [ %307, %334 ]
  %307 = load ptr, ptr %306, align 8, !tbaa !57
  %308 = getelementptr inbounds %struct.FCurve, ptr %306, i64 0, i32 12
  %309 = load ptr, ptr %308, align 8, !tbaa !59
  %310 = call i32 @strncmp(ptr noundef %309, ptr noundef nonnull %4, i64 noundef %304) #21
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %312, label %334

312:                                              ; preds = %305
  %313 = getelementptr inbounds i8, ptr %309, i64 %304
  %314 = call ptr @copy_fcurve(ptr noundef nonnull %306) #20
  %315 = getelementptr inbounds %struct.FCurve, ptr %314, i64 0, i32 12
  %316 = load ptr, ptr %315, align 8, !tbaa !59
  %317 = call ptr (ptr, ...) @BLI_sprintfN(ptr noundef nonnull @.str.188, ptr noundef nonnull %3, ptr noundef %313) #20
  store ptr %317, ptr %315, align 8, !tbaa !59
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef %314) #20
  %318 = getelementptr inbounds %struct.FCurve, ptr %306, i64 0, i32 2
  %319 = load ptr, ptr %318, align 8, !tbaa !60
  %320 = icmp eq ptr %319, null
  %321 = load ptr, ptr %11, align 8, !tbaa !49
  br i1 %320, label %325, label %322

322:                                              ; preds = %312
  call void @action_groups_remove_channel(ptr noundef %321, ptr noundef nonnull %306) #20
  %323 = load ptr, ptr %11, align 8, !tbaa !49
  %324 = load ptr, ptr %318, align 8, !tbaa !60
  call void @action_groups_add_channel(ptr noundef %323, ptr noundef %324, ptr noundef nonnull %314) #20
  br label %332

325:                                              ; preds = %312
  %326 = icmp ne ptr %321, null
  %327 = getelementptr inbounds %struct.bAction, ptr %321, i64 0, i32 1
  %328 = icmp eq ptr %327, %1
  %329 = select i1 %326, i1 %328, i1 false
  br i1 %329, label %330, label %331

330:                                              ; preds = %325
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %306) #20
  br label %332

331:                                              ; preds = %325
  call void @BLI_remlink(ptr noundef nonnull %249, ptr noundef nonnull %306) #20
  br label %332

332:                                              ; preds = %331, %330, %322
  call void @free_fcurve(ptr noundef nonnull %306) #20
  %333 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %333(ptr noundef %316) #20
  br label %334

334:                                              ; preds = %332, %305
  %335 = icmp eq ptr %307, null
  br i1 %335, label %336, label %305, !llvm.loop !61

336:                                              ; preds = %334, %273, %294, %291
  %337 = add nuw nsw i32 %275, 1
  %338 = load ptr, ptr %274, align 8, !tbaa !36
  %339 = icmp eq ptr %338, null
  br i1 %339, label %340, label %273, !llvm.loop !66

340:                                              ; preds = %336, %244
  %341 = load ptr, ptr %1, align 8, !tbaa !56
  %342 = icmp eq ptr %341, null
  br i1 %342, label %369, label %343

343:                                              ; preds = %340
  %344 = getelementptr %struct.AnimData, ptr %11, i64 0, i32 5
  %345 = icmp eq ptr %344, %1
  br i1 %345, label %346, label %357

346:                                              ; preds = %343, %355
  %347 = phi ptr [ %348, %355 ], [ %341, %343 ]
  %348 = load ptr, ptr %347, align 8, !tbaa !57
  %349 = getelementptr inbounds %struct.FCurve, ptr %347, i64 0, i32 12
  %350 = load ptr, ptr %349, align 8, !tbaa !59
  %351 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %350, ptr noundef nonnull dereferenceable(8) @.str.184, i64 noundef 7) #21
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %354, label %353

353:                                              ; preds = %346
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef nonnull %347) #20
  br label %355

354:                                              ; preds = %346
  call void @BLI_remlink(ptr noundef nonnull %1, ptr noundef nonnull %347) #20
  call void @free_fcurve(ptr noundef nonnull %347) #20
  br label %355

355:                                              ; preds = %354, %353
  %356 = icmp eq ptr %348, null
  br i1 %356, label %369, label %346, !llvm.loop !67

357:                                              ; preds = %343, %367
  %358 = phi ptr [ %359, %367 ], [ %341, %343 ]
  %359 = load ptr, ptr %358, align 8, !tbaa !57
  %360 = getelementptr inbounds %struct.FCurve, ptr %358, i64 0, i32 12
  %361 = load ptr, ptr %360, align 8, !tbaa !59
  %362 = call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %361, ptr noundef nonnull dereferenceable(8) @.str.184, i64 noundef 7) #21
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %364, label %366

364:                                              ; preds = %357
  %365 = load ptr, ptr %11, align 8, !tbaa !49
  call void @action_groups_remove_channel(ptr noundef %365, ptr noundef nonnull %358) #20
  call void @free_fcurve(ptr noundef nonnull %358) #20
  br label %367

366:                                              ; preds = %357
  call void @BLI_addtail(ptr noundef nonnull %5, ptr noundef nonnull %358) #20
  br label %367

367:                                              ; preds = %364, %366
  %368 = icmp eq ptr %359, null
  br i1 %368, label %369, label %357, !llvm.loop !67

369:                                              ; preds = %367, %355, %340
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1, ptr noundef nonnull align 8 dereferenceable(16) %5, i64 16, i1 false), !tbaa.struct !68
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @load_editNurb(ptr noundef readonly %0) local_unnamed_addr #5 {
  %2 = alloca %struct.BezTriple, align 4
  %3 = alloca %struct.BezTriple, align 4
  %4 = alloca %struct.BezTriple, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.ListBase, align 8
  %7 = alloca %struct.ListBase, align 8
  %8 = icmp eq ptr %0, null
  br i1 %8, label %956, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %11 = load i16, ptr %10, align 8, !tbaa !5
  %12 = and i16 %11, -2
  %13 = icmp eq i16 %12, 2
  br i1 %13, label %14, label %956

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.Curve, ptr %16, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !18
  %19 = getelementptr %struct.Object, ptr %0, i64 0, i32 19
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #20
  %20 = getelementptr inbounds %struct.Curve, ptr %16, i64 0, i32 3
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %7, ptr noundef nonnull align 8 dereferenceable(16) %20, i64 16, i1 false), !tbaa.struct !68
  %21 = getelementptr inbounds %struct.Curve, ptr %16, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #20
  %23 = getelementptr inbounds %struct.EditNurb, ptr %22, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !47
  %25 = icmp eq ptr %24, null
  br i1 %25, label %151, label %26

26:                                               ; preds = %14
  %27 = load ptr, ptr @G, align 8, !tbaa !69
  %28 = getelementptr inbounds %struct.Main, ptr %27, i64 0, i32 13
  %29 = load ptr, ptr %28, align 8, !tbaa !36
  %30 = icmp eq ptr %29, null
  br i1 %30, label %151, label %31

31:                                               ; preds = %26, %143
  %32 = phi ptr [ %145, %143 ], [ %29, %26 ]
  %33 = phi ptr [ %144, %143 ], [ null, %26 ]
  %34 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 9
  %35 = load ptr, ptr %34, align 8, !tbaa !71
  %36 = icmp eq ptr %35, null
  br i1 %36, label %83, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.Object, ptr %35, i64 0, i32 19
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = icmp eq ptr %39, %16
  br i1 %40, label %41, label %83

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 4
  %43 = load i16, ptr %42, align 2, !tbaa !72
  %44 = add i16 %43, -5
  %45 = icmp ult i16 %44, 2
  br i1 %45, label %46, label %83

46:                                               ; preds = %41
  %47 = icmp eq ptr %33, null
  br i1 %47, label %48, label %51

48:                                               ; preds = %46
  %49 = load ptr, ptr %19, align 8, !tbaa !17
  %50 = call fastcc ptr @initialize_index_map(ptr %49, ptr noundef nonnull %5)
  br label %51

51:                                               ; preds = %48, %46
  %52 = phi ptr [ %50, %48 ], [ %33, %46 ]
  %53 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 5
  %54 = load i32, ptr %53, align 4, !tbaa !73
  %55 = load i32, ptr %5, align 4, !tbaa !74
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %63

57:                                               ; preds = %51
  %58 = sext i32 %54 to i64
  %59 = getelementptr inbounds i32, ptr %52, i64 %58
  %60 = load i32, ptr %59, align 4, !tbaa !74
  %61 = icmp eq i32 %60, -1
  br i1 %61, label %63, label %62

62:                                               ; preds = %57
  store i32 %60, ptr %53, align 4, !tbaa !73
  br label %63

63:                                               ; preds = %62, %57, %51
  %64 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 6
  %65 = load i32, ptr %64, align 8, !tbaa !75
  %66 = icmp slt i32 %65, %55
  br i1 %66, label %67, label %73

67:                                               ; preds = %63
  %68 = sext i32 %65 to i64
  %69 = getelementptr inbounds i32, ptr %52, i64 %68
  %70 = load i32, ptr %69, align 4, !tbaa !74
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %73, label %72

72:                                               ; preds = %67
  store i32 %70, ptr %64, align 8, !tbaa !75
  br label %73

73:                                               ; preds = %72, %67, %63
  %74 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 7
  %75 = load i32, ptr %74, align 4, !tbaa !76
  %76 = icmp slt i32 %75, %55
  br i1 %76, label %77, label %83

77:                                               ; preds = %73
  %78 = sext i32 %75 to i64
  %79 = getelementptr inbounds i32, ptr %52, i64 %78
  %80 = load i32, ptr %79, align 4, !tbaa !74
  %81 = icmp eq i32 %80, -1
  br i1 %81, label %83, label %82

82:                                               ; preds = %77
  store i32 %80, ptr %74, align 4, !tbaa !76
  br label %83

83:                                               ; preds = %82, %77, %73, %41, %37, %31
  %84 = phi ptr [ %52, %82 ], [ %52, %77 ], [ %52, %73 ], [ %33, %37 ], [ %33, %31 ], [ %33, %41 ]
  %85 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 19
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = icmp eq ptr %86, %16
  br i1 %87, label %88, label %143

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.Object, ptr %32, i64 0, i32 26
  %90 = load ptr, ptr %89, align 8, !tbaa !36
  %91 = icmp eq ptr %90, null
  br i1 %91, label %143, label %92

92:                                               ; preds = %88, %139
  %93 = phi ptr [ %141, %139 ], [ %90, %88 ]
  %94 = phi ptr [ %140, %139 ], [ %84, %88 ]
  %95 = getelementptr inbounds %struct.ModifierData, ptr %93, i64 0, i32 2
  %96 = load i32, ptr %95, align 8, !tbaa !77
  %97 = icmp eq i32 %96, 9
  br i1 %97, label %98, label %139

98:                                               ; preds = %92
  %99 = icmp eq ptr %94, null
  br i1 %99, label %100, label %103

100:                                              ; preds = %98
  %101 = load ptr, ptr %19, align 8, !tbaa !17
  %102 = call fastcc ptr @initialize_index_map(ptr %101, ptr noundef nonnull %5)
  br label %103

103:                                              ; preds = %100, %98
  %104 = phi ptr [ %102, %100 ], [ %94, %98 ]
  %105 = getelementptr inbounds %struct.HookModifierData, ptr %93, i64 0, i32 7
  %106 = load i32, ptr %105, align 8, !tbaa !79
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %108, label %137

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.HookModifierData, ptr %93, i64 0, i32 6
  %110 = load ptr, ptr %109, align 8, !tbaa !81
  %111 = load i32, ptr %5, align 4, !tbaa !74
  br label %112

112:                                              ; preds = %131, %108
  %113 = phi i32 [ %106, %108 ], [ %132, %131 ]
  %114 = phi i64 [ 0, %108 ], [ %134, %131 ]
  %115 = phi i32 [ 0, %108 ], [ %133, %131 ]
  %116 = getelementptr inbounds i32, ptr %110, i64 %114
  %117 = load i32, ptr %116, align 4, !tbaa !74
  %118 = icmp slt i32 %117, %111
  br i1 %118, label %119, label %129

119:                                              ; preds = %112
  %120 = sext i32 %117 to i64
  %121 = getelementptr inbounds i32, ptr %104, i64 %120
  %122 = load i32, ptr %121, align 4, !tbaa !74
  %123 = icmp eq i32 %122, -1
  br i1 %123, label %131, label %124

124:                                              ; preds = %119
  %125 = add nsw i32 %115, 1
  %126 = sext i32 %115 to i64
  %127 = getelementptr inbounds i32, ptr %110, i64 %126
  store i32 %122, ptr %127, align 4, !tbaa !74
  %128 = load i32, ptr %105, align 8, !tbaa !79
  br label %131

129:                                              ; preds = %112
  %130 = add nsw i32 %115, 1
  br label %131

131:                                              ; preds = %129, %124, %119
  %132 = phi i32 [ %128, %124 ], [ %113, %119 ], [ %113, %129 ]
  %133 = phi i32 [ %125, %124 ], [ %115, %119 ], [ %130, %129 ]
  %134 = add nuw nsw i64 %114, 1
  %135 = sext i32 %132 to i64
  %136 = icmp slt i64 %134, %135
  br i1 %136, label %112, label %137, !llvm.loop !82

137:                                              ; preds = %131, %103
  %138 = phi i32 [ 0, %103 ], [ %133, %131 ]
  store i32 %138, ptr %105, align 8, !tbaa !79
  br label %139

139:                                              ; preds = %137, %92
  %140 = phi ptr [ %104, %137 ], [ %94, %92 ]
  %141 = load ptr, ptr %93, align 8, !tbaa !36
  %142 = icmp eq ptr %141, null
  br i1 %142, label %143, label %92, !llvm.loop !83

143:                                              ; preds = %139, %88, %83
  %144 = phi ptr [ %84, %83 ], [ %84, %88 ], [ %140, %139 ]
  %145 = load ptr, ptr %32, align 8, !tbaa !36
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %31, !llvm.loop !84

147:                                              ; preds = %143
  %148 = icmp eq ptr %144, null
  br i1 %148, label %151, label %149

149:                                              ; preds = %147
  %150 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %150(ptr noundef nonnull %144) #20
  br label %151

151:                                              ; preds = %14, %26, %147, %149
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #20
  %152 = load ptr, ptr %18, align 8, !tbaa !36
  %153 = icmp eq ptr %152, null
  br i1 %153, label %165, label %154

154:                                              ; preds = %151, %162
  %155 = phi ptr [ %163, %162 ], [ %152, %151 ]
  %156 = call ptr @BKE_nurb_duplicate(ptr noundef nonnull %155) #20
  call void @BLI_addtail(ptr noundef nonnull %6, ptr noundef %156) #20
  %157 = getelementptr inbounds %struct.Nurb, ptr %155, i64 0, i32 2
  %158 = load i16, ptr %157, align 8, !tbaa !21
  %159 = icmp eq i16 %158, 4
  br i1 %159, label %160, label %162

160:                                              ; preds = %154
  %161 = call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %155) #20
  br label %162

162:                                              ; preds = %154, %160
  %163 = load ptr, ptr %155, align 8, !tbaa !36
  %164 = icmp eq ptr %163, null
  br i1 %164, label %165, label %154, !llvm.loop !85

165:                                              ; preds = %162, %151
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %20, ptr noundef nonnull align 8 dereferenceable(16) %6, i64 16, i1 false), !tbaa.struct !68
  %166 = load ptr, ptr %19, align 8, !tbaa !17
  %167 = getelementptr inbounds %struct.Curve, ptr %166, i64 0, i32 9
  %168 = load ptr, ptr %167, align 8, !tbaa !86
  %169 = icmp eq ptr %168, null
  br i1 %169, label %930, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds %struct.Curve, ptr %166, i64 0, i32 4
  %172 = load ptr, ptr %171, align 8, !tbaa !18
  %173 = getelementptr inbounds %struct.Key, ptr %168, i64 0, i32 6
  %174 = getelementptr inbounds %struct.EditNurb, ptr %172, i64 0, i32 2
  %175 = load i32, ptr %174, align 8, !tbaa !87
  %176 = add nsw i32 %175, -1
  %177 = call ptr @BLI_findlink(ptr noundef nonnull %173, i32 noundef %176) #20
  %178 = call i32 @BKE_nurbList_verts_count(ptr noundef %172) #20
  %179 = load ptr, ptr %167, align 8, !tbaa !86
  %180 = getelementptr inbounds %struct.Key, ptr %179, i64 0, i32 9
  %181 = load i16, ptr %180, align 8, !tbaa !88
  %182 = icmp eq i16 %181, 1
  br i1 %182, label %183, label %377

183:                                              ; preds = %170
  %184 = getelementptr inbounds %struct.Key, ptr %179, i64 0, i32 6
  br label %185

185:                                              ; preds = %189, %183
  %186 = phi ptr [ %184, %183 ], [ %187, %189 ]
  %187 = load ptr, ptr %186, align 8, !tbaa !36
  %188 = icmp eq ptr %187, null
  br i1 %188, label %377, label %189

189:                                              ; preds = %185
  %190 = load i32, ptr %174, align 8, !tbaa !87
  %191 = add nsw i32 %190, -1
  %192 = getelementptr inbounds %struct.KeyBlock, ptr %187, i64 0, i32 6
  %193 = load i16, ptr %192, align 4, !tbaa !90
  %194 = sext i16 %193 to i32
  %195 = icmp eq i32 %191, %194
  br i1 %195, label %196, label %185, !llvm.loop !92

196:                                              ; preds = %189
  %197 = load ptr, ptr %172, align 8, !tbaa !36
  %198 = icmp eq ptr %197, null
  br i1 %198, label %222, label %199

199:                                              ; preds = %196, %214
  %200 = phi ptr [ %217, %214 ], [ %197, %196 ]
  %201 = phi i32 [ %216, %214 ], [ 0, %196 ]
  %202 = getelementptr inbounds %struct.Nurb, ptr %200, i64 0, i32 18
  %203 = load ptr, ptr %202, align 8, !tbaa !24
  %204 = icmp eq ptr %203, null
  %205 = getelementptr inbounds %struct.Nurb, ptr %200, i64 0, i32 6
  %206 = load i32, ptr %205, align 8, !tbaa !23
  br i1 %204, label %209, label %207

207:                                              ; preds = %199
  %208 = shl nsw i32 %206, 2
  br label %214

209:                                              ; preds = %199
  %210 = shl nsw i32 %206, 1
  %211 = getelementptr inbounds %struct.Nurb, ptr %200, i64 0, i32 7
  %212 = load i32, ptr %211, align 4, !tbaa !31
  %213 = mul nsw i32 %210, %212
  br label %214

214:                                              ; preds = %209, %207
  %215 = phi i32 [ %208, %207 ], [ %213, %209 ]
  %216 = add nsw i32 %215, %201
  %217 = load ptr, ptr %200, align 8, !tbaa !36
  %218 = icmp eq ptr %217, null
  br i1 %218, label %219, label %199, !llvm.loop !93

219:                                              ; preds = %214
  %220 = sext i32 %216 to i64
  %221 = mul nsw i64 %220, 12
  br label %222

222:                                              ; preds = %219, %196
  %223 = phi i64 [ 0, %196 ], [ %221, %219 ]
  %224 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %225 = call ptr %224(i64 noundef %223, ptr noundef nonnull @.str.190) #20
  %226 = load ptr, ptr %172, align 8, !tbaa !36
  %227 = icmp eq ptr %226, null
  br i1 %227, label %377, label %228

228:                                              ; preds = %222
  %229 = getelementptr i8, ptr %172, i64 16
  br label %230

230:                                              ; preds = %373, %228
  %231 = phi ptr [ %226, %228 ], [ %375, %373 ]
  %232 = phi i32 [ 0, %228 ], [ %374, %373 ]
  %233 = getelementptr inbounds %struct.Nurb, ptr %231, i64 0, i32 18
  %234 = load ptr, ptr %233, align 8, !tbaa !24
  %235 = icmp eq ptr %234, null
  %236 = getelementptr inbounds %struct.Nurb, ptr %231, i64 0, i32 6
  %237 = load i32, ptr %236, align 8, !tbaa !23
  br i1 %235, label %323, label %238

238:                                              ; preds = %230
  %239 = icmp eq i32 %237, 0
  br i1 %239, label %373, label %240

240:                                              ; preds = %238, %319
  %241 = phi i32 [ %244, %319 ], [ %237, %238 ]
  %242 = phi i32 [ %320, %319 ], [ %232, %238 ]
  %243 = phi ptr [ %321, %319 ], [ %234, %238 ]
  %244 = add nsw i32 %241, -1
  %245 = load ptr, ptr %229, align 8, !tbaa !47
  %246 = call ptr @BLI_ghash_lookup(ptr noundef %245, ptr noundef nonnull %243) #20
  %247 = icmp eq ptr %246, null
  br i1 %247, label %317, label %248

248:                                              ; preds = %240
  %249 = load ptr, ptr %246, align 8, !tbaa !94
  %250 = icmp eq ptr %249, null
  br i1 %250, label %317, label %251

251:                                              ; preds = %248
  %252 = sext i32 %242 to i64
  %253 = getelementptr inbounds [3 x float], ptr %225, i64 %252
  %254 = load float, ptr %243, align 4, !tbaa !40
  %255 = load float, ptr %249, align 4, !tbaa !40
  %256 = fsub fast float %254, %255
  store float %256, ptr %253, align 4, !tbaa !40
  %257 = getelementptr inbounds float, ptr %243, i64 1
  %258 = load float, ptr %257, align 4, !tbaa !40
  %259 = getelementptr inbounds float, ptr %249, i64 1
  %260 = load float, ptr %259, align 4, !tbaa !40
  %261 = fsub fast float %258, %260
  %262 = getelementptr inbounds float, ptr %253, i64 1
  store float %261, ptr %262, align 4, !tbaa !40
  %263 = getelementptr inbounds float, ptr %243, i64 2
  %264 = load float, ptr %263, align 4, !tbaa !40
  %265 = getelementptr inbounds float, ptr %249, i64 2
  %266 = load float, ptr %265, align 4, !tbaa !40
  %267 = fsub fast float %264, %266
  %268 = getelementptr inbounds float, ptr %253, i64 2
  store float %267, ptr %268, align 4, !tbaa !40
  %269 = add nsw i64 %252, 1
  %270 = getelementptr inbounds [3 x float], ptr %225, i64 %269
  %271 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 1
  %272 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 1
  %273 = load float, ptr %271, align 4, !tbaa !40
  %274 = load float, ptr %272, align 4, !tbaa !40
  %275 = fsub fast float %273, %274
  store float %275, ptr %270, align 4, !tbaa !40
  %276 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 1, i64 1
  %277 = load float, ptr %276, align 4, !tbaa !40
  %278 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 1, i64 1
  %279 = load float, ptr %278, align 4, !tbaa !40
  %280 = fsub fast float %277, %279
  %281 = getelementptr inbounds float, ptr %270, i64 1
  store float %280, ptr %281, align 4, !tbaa !40
  %282 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 1, i64 2
  %283 = load float, ptr %282, align 4, !tbaa !40
  %284 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 1, i64 2
  %285 = load float, ptr %284, align 4, !tbaa !40
  %286 = fsub fast float %283, %285
  %287 = getelementptr inbounds float, ptr %270, i64 2
  store float %286, ptr %287, align 4, !tbaa !40
  %288 = add nsw i64 %252, 2
  %289 = getelementptr inbounds [3 x float], ptr %225, i64 %288
  %290 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 2
  %291 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 2
  %292 = load float, ptr %290, align 4, !tbaa !40
  %293 = load float, ptr %291, align 4, !tbaa !40
  %294 = fsub fast float %292, %293
  store float %294, ptr %289, align 4, !tbaa !40
  %295 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 2, i64 1
  %296 = load float, ptr %295, align 4, !tbaa !40
  %297 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 2, i64 1
  %298 = load float, ptr %297, align 4, !tbaa !40
  %299 = fsub fast float %296, %298
  %300 = getelementptr inbounds float, ptr %289, i64 1
  store float %299, ptr %300, align 4, !tbaa !40
  %301 = getelementptr inbounds [3 x [3 x float]], ptr %243, i64 0, i64 2, i64 2
  %302 = load float, ptr %301, align 4, !tbaa !40
  %303 = getelementptr inbounds [3 x [3 x float]], ptr %249, i64 0, i64 2, i64 2
  %304 = load float, ptr %303, align 4, !tbaa !40
  %305 = fsub fast float %302, %304
  %306 = getelementptr inbounds float, ptr %289, i64 2
  store float %305, ptr %306, align 4, !tbaa !40
  %307 = add i32 %242, 3
  %308 = trunc i64 %288 to i32
  %309 = getelementptr inbounds %struct.BezTriple, ptr %243, i64 0, i32 1
  %310 = load float, ptr %309, align 4, !tbaa !95
  %311 = getelementptr inbounds %struct.BezTriple, ptr %249, i64 0, i32 1
  %312 = load float, ptr %311, align 4, !tbaa !95
  %313 = fsub fast float %310, %312
  %314 = add nsw i32 %308, 2
  %315 = sext i32 %307 to i64
  %316 = getelementptr inbounds [3 x float], ptr %225, i64 %315
  store float %313, ptr %316, align 4, !tbaa !40
  br label %319

317:                                              ; preds = %248, %240
  %318 = add nsw i32 %242, 4
  br label %319

319:                                              ; preds = %317, %251
  %320 = phi i32 [ %314, %251 ], [ %318, %317 ]
  %321 = getelementptr inbounds %struct.BezTriple, ptr %243, i64 1
  %322 = icmp eq i32 %244, 0
  br i1 %322, label %373, label %240, !llvm.loop !96

323:                                              ; preds = %230
  %324 = getelementptr inbounds %struct.Nurb, ptr %231, i64 0, i32 7
  %325 = load i32, ptr %324, align 4, !tbaa !31
  %326 = mul nsw i32 %325, %237
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %373, label %328

328:                                              ; preds = %323
  %329 = getelementptr inbounds %struct.Nurb, ptr %231, i64 0, i32 17
  %330 = load ptr, ptr %329, align 8, !tbaa !32
  %331 = sext i32 %232 to i64
  br label %332

332:                                              ; preds = %367, %328
  %333 = phi i64 [ %331, %328 ], [ %368, %367 ]
  %334 = phi i32 [ %326, %328 ], [ %336, %367 ]
  %335 = phi ptr [ %330, %328 ], [ %369, %367 ]
  %336 = add nsw i32 %334, -1
  %337 = load ptr, ptr %229, align 8, !tbaa !47
  %338 = call ptr @BLI_ghash_lookup(ptr noundef %337, ptr noundef %335) #20
  %339 = icmp eq ptr %338, null
  br i1 %339, label %367, label %340

340:                                              ; preds = %332
  %341 = load ptr, ptr %338, align 8, !tbaa !94
  %342 = icmp eq ptr %341, null
  br i1 %342, label %367, label %343

343:                                              ; preds = %340
  %344 = getelementptr inbounds [3 x float], ptr %225, i64 %333
  %345 = load float, ptr %335, align 4, !tbaa !40
  %346 = load float, ptr %341, align 4, !tbaa !40
  %347 = fsub fast float %345, %346
  store float %347, ptr %344, align 4, !tbaa !40
  %348 = getelementptr inbounds float, ptr %335, i64 1
  %349 = load float, ptr %348, align 4, !tbaa !40
  %350 = getelementptr inbounds float, ptr %341, i64 1
  %351 = load float, ptr %350, align 4, !tbaa !40
  %352 = fsub fast float %349, %351
  %353 = getelementptr inbounds float, ptr %344, i64 1
  store float %352, ptr %353, align 4, !tbaa !40
  %354 = getelementptr inbounds float, ptr %335, i64 2
  %355 = load float, ptr %354, align 4, !tbaa !40
  %356 = getelementptr inbounds float, ptr %341, i64 2
  %357 = load float, ptr %356, align 4, !tbaa !40
  %358 = fsub fast float %355, %357
  %359 = getelementptr inbounds float, ptr %344, i64 2
  store float %358, ptr %359, align 4, !tbaa !40
  %360 = getelementptr inbounds %struct.BPoint, ptr %335, i64 0, i32 1
  %361 = load float, ptr %360, align 4, !tbaa !97
  %362 = getelementptr inbounds %struct.BPoint, ptr %341, i64 0, i32 1
  %363 = load float, ptr %362, align 4, !tbaa !97
  %364 = fsub fast float %361, %363
  %365 = add nsw i64 %333, 1
  %366 = getelementptr inbounds [3 x float], ptr %225, i64 %365
  store float %364, ptr %366, align 4, !tbaa !40
  br label %367

367:                                              ; preds = %343, %340, %332
  %368 = add nsw i64 %333, 2
  %369 = getelementptr inbounds %struct.BPoint, ptr %335, i64 1
  %370 = icmp eq i32 %336, 0
  br i1 %370, label %371, label %332, !llvm.loop !98

371:                                              ; preds = %367
  %372 = trunc i64 %368 to i32
  br label %373

373:                                              ; preds = %319, %371, %323, %238
  %374 = phi i32 [ %232, %323 ], [ %232, %238 ], [ %372, %371 ], [ %320, %319 ]
  %375 = load ptr, ptr %231, align 8, !tbaa !36
  %376 = icmp eq ptr %375, null
  br i1 %376, label %377, label %230, !llvm.loop !99

377:                                              ; preds = %185, %373, %222, %170
  %378 = phi ptr [ null, %170 ], [ %225, %222 ], [ %225, %373 ], [ null, %185 ]
  %379 = load ptr, ptr %167, align 8, !tbaa !86
  %380 = getelementptr inbounds %struct.Key, ptr %379, i64 0, i32 6
  %381 = load ptr, ptr %380, align 8, !tbaa !36
  %382 = icmp eq ptr %381, null
  br i1 %382, label %926, label %383

383:                                              ; preds = %377
  %384 = icmp eq ptr %378, null
  %385 = getelementptr i8, ptr %172, i64 16
  %386 = getelementptr inbounds %struct.BezTriple, ptr %2, i64 0, i32 1
  %387 = getelementptr inbounds %struct.BezTriple, ptr %4, i64 0, i32 1
  %388 = getelementptr inbounds %struct.BezTriple, ptr %3, i64 0, i32 1
  br label %389

389:                                              ; preds = %923, %383
  %390 = phi ptr [ %381, %383 ], [ %924, %923 ]
  %391 = icmp eq ptr %390, %177
  %392 = select i1 %384, i1 true, i1 %391
  br i1 %392, label %400, label %393

393:                                              ; preds = %389
  %394 = load i32, ptr %174, align 8, !tbaa !87
  %395 = add nsw i32 %394, -1
  %396 = getelementptr inbounds %struct.KeyBlock, ptr %390, i64 0, i32 6
  %397 = load i16, ptr %396, align 4, !tbaa !90
  %398 = sext i16 %397 to i32
  %399 = icmp eq i32 %395, %398
  br label %400

400:                                              ; preds = %393, %389
  %401 = phi i1 [ false, %389 ], [ %399, %393 ]
  %402 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %403 = load ptr, ptr %167, align 8, !tbaa !86
  %404 = getelementptr inbounds %struct.Key, ptr %403, i64 0, i32 4
  %405 = load i32, ptr %404, align 8, !tbaa !100
  %406 = mul nsw i32 %405, %178
  %407 = sext i32 %406 to i64
  %408 = call ptr %402(i64 noundef %407, ptr noundef nonnull @.str.190) #20
  %409 = getelementptr inbounds %struct.KeyBlock, ptr %390, i64 0, i32 10
  %410 = load ptr, ptr %409, align 8, !tbaa !101
  %411 = load ptr, ptr %172, align 8, !tbaa !36
  %412 = icmp eq ptr %411, null
  br i1 %412, label %831, label %413

413:                                              ; preds = %400
  br i1 %391, label %414, label %590

414:                                              ; preds = %413, %535
  %415 = phi ptr [ %537, %535 ], [ %411, %413 ]
  %416 = phi ptr [ %536, %535 ], [ %408, %413 ]
  %417 = load ptr, ptr %167, align 8, !tbaa !86
  %418 = getelementptr inbounds %struct.Key, ptr %417, i64 0, i32 2
  %419 = load ptr, ptr %418, align 8, !tbaa !102
  %420 = icmp ne ptr %177, %419
  %421 = freeze i1 %420
  %422 = getelementptr inbounds %struct.Nurb, ptr %415, i64 0, i32 18
  %423 = load ptr, ptr %422, align 8, !tbaa !24
  %424 = icmp eq ptr %423, null
  %425 = getelementptr inbounds %struct.Nurb, ptr %415, i64 0, i32 6
  %426 = load i32, ptr %425, align 8, !tbaa !23
  br i1 %424, label %495, label %427

427:                                              ; preds = %414
  %428 = icmp eq i32 %426, 0
  br i1 %428, label %535, label %429

429:                                              ; preds = %427, %487
  %430 = phi i32 [ %433, %487 ], [ %426, %427 ]
  %431 = phi ptr [ %492, %487 ], [ %416, %427 ]
  %432 = phi ptr [ %493, %487 ], [ %423, %427 ]
  %433 = add nsw i32 %430, -1
  %434 = load ptr, ptr %385, align 8, !tbaa !47
  %435 = call ptr @BLI_ghash_lookup(ptr noundef %434, ptr noundef nonnull %432) #20
  %436 = icmp eq ptr %435, null
  br i1 %436, label %539, label %437

437:                                              ; preds = %429
  %438 = load ptr, ptr %435, align 8, !tbaa !94
  %439 = icmp ne ptr %438, null
  %440 = select i1 %421, i1 %439, i1 false
  br i1 %440, label %441, label %539

441:                                              ; preds = %437
  %442 = load float, ptr %432, align 4, !tbaa !40
  store float %442, ptr %431, align 4, !tbaa !40
  %443 = getelementptr inbounds float, ptr %432, i64 1
  %444 = load float, ptr %443, align 4, !tbaa !40
  %445 = getelementptr inbounds float, ptr %431, i64 1
  store float %444, ptr %445, align 4, !tbaa !40
  %446 = getelementptr inbounds float, ptr %432, i64 2
  %447 = load float, ptr %446, align 4, !tbaa !40
  %448 = getelementptr inbounds float, ptr %431, i64 2
  store float %447, ptr %448, align 4, !tbaa !40
  %449 = load float, ptr %438, align 4, !tbaa !40
  store float %449, ptr %432, align 4, !tbaa !40
  %450 = getelementptr inbounds float, ptr %438, i64 1
  %451 = load float, ptr %450, align 4, !tbaa !40
  store float %451, ptr %443, align 4, !tbaa !40
  %452 = getelementptr inbounds float, ptr %438, i64 2
  %453 = load float, ptr %452, align 4, !tbaa !40
  store float %453, ptr %446, align 4, !tbaa !40
  %454 = getelementptr inbounds float, ptr %431, i64 3
  %455 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1
  %456 = load float, ptr %455, align 4, !tbaa !40
  store float %456, ptr %454, align 4, !tbaa !40
  %457 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1, i64 1
  %458 = load float, ptr %457, align 4, !tbaa !40
  %459 = getelementptr inbounds float, ptr %431, i64 4
  store float %458, ptr %459, align 4, !tbaa !40
  %460 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1, i64 2
  %461 = load float, ptr %460, align 4, !tbaa !40
  %462 = getelementptr inbounds float, ptr %431, i64 5
  store float %461, ptr %462, align 4, !tbaa !40
  %463 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 1
  %464 = load float, ptr %463, align 4, !tbaa !40
  store float %464, ptr %455, align 4, !tbaa !40
  %465 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 1, i64 1
  %466 = load float, ptr %465, align 4, !tbaa !40
  store float %466, ptr %457, align 4, !tbaa !40
  %467 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 1, i64 2
  %468 = load float, ptr %467, align 4, !tbaa !40
  store float %468, ptr %460, align 4, !tbaa !40
  %469 = getelementptr inbounds float, ptr %431, i64 6
  %470 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2
  %471 = load float, ptr %470, align 4, !tbaa !40
  store float %471, ptr %469, align 4, !tbaa !40
  %472 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2, i64 1
  %473 = load float, ptr %472, align 4, !tbaa !40
  %474 = getelementptr inbounds float, ptr %431, i64 7
  store float %473, ptr %474, align 4, !tbaa !40
  %475 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2, i64 2
  %476 = load float, ptr %475, align 4, !tbaa !40
  %477 = getelementptr inbounds float, ptr %431, i64 8
  store float %476, ptr %477, align 4, !tbaa !40
  %478 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 2
  %479 = load float, ptr %478, align 4, !tbaa !40
  store float %479, ptr %470, align 4, !tbaa !40
  %480 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 2, i64 1
  %481 = load float, ptr %480, align 4, !tbaa !40
  store float %481, ptr %472, align 4, !tbaa !40
  %482 = getelementptr inbounds [3 x [3 x float]], ptr %438, i64 0, i64 2, i64 2
  %483 = load float, ptr %482, align 4, !tbaa !40
  store float %483, ptr %475, align 4, !tbaa !40
  %484 = getelementptr inbounds float, ptr %431, i64 9
  %485 = getelementptr inbounds %struct.BezTriple, ptr %432, i64 0, i32 1
  %486 = load float, ptr %485, align 4, !tbaa !95
  store float %486, ptr %484, align 4, !tbaa !40
  br label %487

487:                                              ; preds = %539, %441
  %488 = phi ptr [ %432, %539 ], [ %438, %441 ]
  %489 = phi ptr [ %565, %539 ], [ %485, %441 ]
  %490 = getelementptr inbounds %struct.BezTriple, ptr %488, i64 0, i32 1
  %491 = load float, ptr %490, align 4, !tbaa !95
  store float %491, ptr %489, align 4, !tbaa !40
  %492 = getelementptr inbounds float, ptr %431, i64 12
  %493 = getelementptr inbounds %struct.BezTriple, ptr %432, i64 1
  %494 = icmp eq i32 %433, 0
  br i1 %494, label %535, label %429, !llvm.loop !103

495:                                              ; preds = %414
  %496 = getelementptr inbounds %struct.Nurb, ptr %415, i64 0, i32 7
  %497 = load i32, ptr %496, align 4, !tbaa !31
  %498 = mul nsw i32 %497, %426
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %535, label %566

500:                                              ; preds = %566, %530
  %501 = phi i32 [ %533, %530 ], [ %567, %566 ]
  %502 = phi ptr [ %531, %530 ], [ %416, %566 ]
  %503 = phi ptr [ %532, %530 ], [ %569, %566 ]
  %504 = load ptr, ptr %385, align 8, !tbaa !47
  %505 = call ptr @BLI_ghash_lookup(ptr noundef %504, ptr noundef %503) #20
  %506 = icmp eq ptr %505, null
  br i1 %506, label %509, label %507

507:                                              ; preds = %500
  %508 = load ptr, ptr %505, align 8, !tbaa !94
  br label %509

509:                                              ; preds = %507, %500
  %510 = phi ptr [ %508, %507 ], [ null, %500 ]
  %511 = load float, ptr %503, align 4, !tbaa !40
  store float %511, ptr %502, align 4, !tbaa !40
  %512 = getelementptr inbounds float, ptr %503, i64 1
  %513 = load float, ptr %512, align 4, !tbaa !40
  %514 = getelementptr inbounds float, ptr %502, i64 1
  store float %513, ptr %514, align 4, !tbaa !40
  %515 = getelementptr inbounds float, ptr %503, i64 2
  %516 = load float, ptr %515, align 4, !tbaa !40
  %517 = getelementptr inbounds float, ptr %502, i64 2
  store float %516, ptr %517, align 4, !tbaa !40
  %518 = getelementptr inbounds %struct.BPoint, ptr %503, i64 0, i32 1
  %519 = load float, ptr %518, align 4, !tbaa !97
  %520 = getelementptr inbounds float, ptr %502, i64 3
  store float %519, ptr %520, align 4, !tbaa !40
  %521 = icmp eq ptr %510, null
  br i1 %521, label %530, label %522

522:                                              ; preds = %509
  %523 = load float, ptr %510, align 4, !tbaa !40
  store float %523, ptr %503, align 4, !tbaa !40
  %524 = getelementptr inbounds float, ptr %510, i64 1
  %525 = load float, ptr %524, align 4, !tbaa !40
  store float %525, ptr %512, align 4, !tbaa !40
  %526 = getelementptr inbounds float, ptr %510, i64 2
  %527 = load float, ptr %526, align 4, !tbaa !40
  store float %527, ptr %515, align 4, !tbaa !40
  %528 = getelementptr inbounds %struct.BPoint, ptr %510, i64 0, i32 1
  %529 = load float, ptr %528, align 4, !tbaa !97
  store float %529, ptr %518, align 4, !tbaa !97
  br label %530

530:                                              ; preds = %522, %509
  %531 = getelementptr inbounds float, ptr %502, i64 4
  %532 = getelementptr inbounds %struct.BPoint, ptr %503, i64 1
  %533 = add nsw i32 %501, -1
  %534 = icmp eq i32 %501, 0
  br i1 %534, label %535, label %500, !llvm.loop !104

535:                                              ; preds = %487, %570, %530, %495, %427
  %536 = phi ptr [ %416, %495 ], [ %416, %427 ], [ %531, %530 ], [ %586, %570 ], [ %492, %487 ]
  %537 = load ptr, ptr %415, align 8, !tbaa !36
  %538 = icmp eq ptr %537, null
  br i1 %538, label %831, label %414, !llvm.loop !105

539:                                              ; preds = %437, %429
  %540 = load float, ptr %432, align 4, !tbaa !40
  store float %540, ptr %431, align 4, !tbaa !40
  %541 = getelementptr inbounds float, ptr %432, i64 1
  %542 = load float, ptr %541, align 4, !tbaa !40
  %543 = getelementptr inbounds float, ptr %431, i64 1
  store float %542, ptr %543, align 4, !tbaa !40
  %544 = getelementptr inbounds float, ptr %432, i64 2
  %545 = load float, ptr %544, align 4, !tbaa !40
  %546 = getelementptr inbounds float, ptr %431, i64 2
  store float %545, ptr %546, align 4, !tbaa !40
  %547 = getelementptr inbounds float, ptr %431, i64 3
  %548 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1
  %549 = load float, ptr %548, align 4, !tbaa !40
  store float %549, ptr %547, align 4, !tbaa !40
  %550 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1, i64 1
  %551 = load float, ptr %550, align 4, !tbaa !40
  %552 = getelementptr inbounds float, ptr %431, i64 4
  store float %551, ptr %552, align 4, !tbaa !40
  %553 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 1, i64 2
  %554 = load float, ptr %553, align 4, !tbaa !40
  %555 = getelementptr inbounds float, ptr %431, i64 5
  store float %554, ptr %555, align 4, !tbaa !40
  %556 = getelementptr inbounds float, ptr %431, i64 6
  %557 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2
  %558 = load float, ptr %557, align 4, !tbaa !40
  store float %558, ptr %556, align 4, !tbaa !40
  %559 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2, i64 1
  %560 = load float, ptr %559, align 4, !tbaa !40
  %561 = getelementptr inbounds float, ptr %431, i64 7
  store float %560, ptr %561, align 4, !tbaa !40
  %562 = getelementptr inbounds [3 x [3 x float]], ptr %432, i64 0, i64 2, i64 2
  %563 = load float, ptr %562, align 4, !tbaa !40
  %564 = getelementptr inbounds float, ptr %431, i64 8
  store float %563, ptr %564, align 4, !tbaa !40
  %565 = getelementptr inbounds float, ptr %431, i64 9
  br label %487

566:                                              ; preds = %495
  %567 = add nsw i32 %498, -1
  %568 = getelementptr inbounds %struct.Nurb, ptr %415, i64 0, i32 17
  %569 = load ptr, ptr %568, align 8, !tbaa !32
  br i1 %421, label %500, label %570

570:                                              ; preds = %566, %570
  %571 = phi i32 [ %588, %570 ], [ %567, %566 ]
  %572 = phi ptr [ %586, %570 ], [ %416, %566 ]
  %573 = phi ptr [ %587, %570 ], [ %569, %566 ]
  %574 = load ptr, ptr %385, align 8, !tbaa !47
  %575 = call ptr @BLI_ghash_lookup(ptr noundef %574, ptr noundef %573) #20
  %576 = load float, ptr %573, align 4, !tbaa !40
  store float %576, ptr %572, align 4, !tbaa !40
  %577 = getelementptr inbounds float, ptr %573, i64 1
  %578 = load float, ptr %577, align 4, !tbaa !40
  %579 = getelementptr inbounds float, ptr %572, i64 1
  store float %578, ptr %579, align 4, !tbaa !40
  %580 = getelementptr inbounds float, ptr %573, i64 2
  %581 = load float, ptr %580, align 4, !tbaa !40
  %582 = getelementptr inbounds float, ptr %572, i64 2
  store float %581, ptr %582, align 4, !tbaa !40
  %583 = getelementptr inbounds %struct.BPoint, ptr %573, i64 0, i32 1
  %584 = load float, ptr %583, align 4, !tbaa !97
  %585 = getelementptr inbounds float, ptr %572, i64 3
  store float %584, ptr %585, align 4, !tbaa !40
  %586 = getelementptr inbounds float, ptr %572, i64 4
  %587 = getelementptr inbounds %struct.BPoint, ptr %573, i64 1
  %588 = add nsw i32 %571, -1
  %589 = icmp eq i32 %571, 0
  br i1 %589, label %535, label %570, !llvm.loop !104

590:                                              ; preds = %413
  %591 = icmp eq ptr %410, null
  br i1 %591, label %831, label %592

592:                                              ; preds = %590, %826
  %593 = phi ptr [ %829, %826 ], [ %411, %590 ]
  %594 = phi ptr [ %828, %826 ], [ %408, %590 ]
  %595 = phi i32 [ %827, %826 ], [ 0, %590 ]
  %596 = getelementptr inbounds %struct.Nurb, ptr %593, i64 0, i32 18
  %597 = load ptr, ptr %596, align 8, !tbaa !24
  %598 = icmp eq ptr %597, null
  %599 = getelementptr inbounds %struct.Nurb, ptr %593, i64 0, i32 6
  %600 = load i32, ptr %599, align 8, !tbaa !23
  br i1 %598, label %759, label %601

601:                                              ; preds = %592
  %602 = icmp eq i32 %600, 0
  br i1 %602, label %826, label %603

603:                                              ; preds = %601, %754
  %604 = phi i32 [ %608, %754 ], [ %600, %601 ]
  %605 = phi ptr [ %756, %754 ], [ %594, %601 ]
  %606 = phi i32 [ %755, %754 ], [ %595, %601 ]
  %607 = phi ptr [ %757, %754 ], [ %597, %601 ]
  %608 = add nsw i32 %604, -1
  %609 = load ptr, ptr %385, align 8, !tbaa !47
  %610 = call ptr @BLI_ghash_lookup(ptr noundef %609, ptr noundef nonnull %607) #20
  %611 = icmp eq ptr %610, null
  br i1 %611, label %616, label %612

612:                                              ; preds = %603
  %613 = getelementptr inbounds %struct.CVKeyIndex, ptr %610, i64 0, i32 1
  %614 = load i32, ptr %613, align 8, !tbaa !106
  %615 = icmp sgt i32 %614, -1
  br i1 %615, label %646, label %616

616:                                              ; preds = %612, %603
  %617 = load float, ptr %607, align 4, !tbaa !40
  store float %617, ptr %605, align 4, !tbaa !40
  %618 = getelementptr inbounds float, ptr %607, i64 1
  %619 = load float, ptr %618, align 4, !tbaa !40
  %620 = getelementptr inbounds float, ptr %605, i64 1
  store float %619, ptr %620, align 4, !tbaa !40
  %621 = getelementptr inbounds float, ptr %607, i64 2
  %622 = load float, ptr %621, align 4, !tbaa !40
  %623 = getelementptr inbounds float, ptr %605, i64 2
  store float %622, ptr %623, align 4, !tbaa !40
  %624 = getelementptr inbounds float, ptr %605, i64 3
  %625 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 1
  %626 = load float, ptr %625, align 4, !tbaa !40
  store float %626, ptr %624, align 4, !tbaa !40
  %627 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 1, i64 1
  %628 = load float, ptr %627, align 4, !tbaa !40
  %629 = getelementptr inbounds float, ptr %605, i64 4
  store float %628, ptr %629, align 4, !tbaa !40
  %630 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 1, i64 2
  %631 = load float, ptr %630, align 4, !tbaa !40
  %632 = getelementptr inbounds float, ptr %605, i64 5
  store float %631, ptr %632, align 4, !tbaa !40
  %633 = getelementptr inbounds float, ptr %605, i64 6
  %634 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 2
  %635 = load float, ptr %634, align 4, !tbaa !40
  store float %635, ptr %633, align 4, !tbaa !40
  %636 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 2, i64 1
  %637 = load float, ptr %636, align 4, !tbaa !40
  %638 = getelementptr inbounds float, ptr %605, i64 7
  store float %637, ptr %638, align 4, !tbaa !40
  %639 = getelementptr inbounds [3 x [3 x float]], ptr %607, i64 0, i64 2, i64 2
  %640 = load float, ptr %639, align 4, !tbaa !40
  %641 = getelementptr inbounds float, ptr %605, i64 8
  store float %640, ptr %641, align 4, !tbaa !40
  %642 = getelementptr inbounds float, ptr %605, i64 9
  %643 = add i32 %606, 3
  %644 = getelementptr inbounds %struct.BezTriple, ptr %607, i64 0, i32 1
  %645 = load float, ptr %644, align 4, !tbaa !95
  store float %645, ptr %642, align 4, !tbaa !40
  br label %754

646:                                              ; preds = %612
  %647 = zext i32 %614 to i64
  %648 = getelementptr inbounds float, ptr %410, i64 %647
  br i1 %401, label %679, label %649

649:                                              ; preds = %646
  %650 = load float, ptr %648, align 4, !tbaa !40
  store float %650, ptr %605, align 4, !tbaa !40
  %651 = getelementptr inbounds float, ptr %648, i64 1
  %652 = load float, ptr %651, align 4, !tbaa !40
  %653 = getelementptr inbounds float, ptr %605, i64 1
  store float %652, ptr %653, align 4, !tbaa !40
  %654 = getelementptr inbounds float, ptr %648, i64 2
  %655 = load float, ptr %654, align 4, !tbaa !40
  %656 = getelementptr inbounds float, ptr %605, i64 2
  store float %655, ptr %656, align 4, !tbaa !40
  %657 = getelementptr inbounds float, ptr %605, i64 3
  %658 = getelementptr inbounds float, ptr %648, i64 3
  %659 = load float, ptr %658, align 4, !tbaa !40
  store float %659, ptr %657, align 4, !tbaa !40
  %660 = getelementptr inbounds float, ptr %648, i64 4
  %661 = load float, ptr %660, align 4, !tbaa !40
  %662 = getelementptr inbounds float, ptr %605, i64 4
  store float %661, ptr %662, align 4, !tbaa !40
  %663 = getelementptr inbounds float, ptr %648, i64 5
  %664 = load float, ptr %663, align 4, !tbaa !40
  %665 = getelementptr inbounds float, ptr %605, i64 5
  store float %664, ptr %665, align 4, !tbaa !40
  %666 = getelementptr inbounds float, ptr %605, i64 6
  %667 = getelementptr inbounds float, ptr %648, i64 6
  %668 = load float, ptr %667, align 4, !tbaa !40
  store float %668, ptr %666, align 4, !tbaa !40
  %669 = getelementptr inbounds float, ptr %648, i64 7
  %670 = load float, ptr %669, align 4, !tbaa !40
  %671 = getelementptr inbounds float, ptr %605, i64 7
  store float %670, ptr %671, align 4, !tbaa !40
  %672 = getelementptr inbounds float, ptr %648, i64 8
  %673 = load float, ptr %672, align 4, !tbaa !40
  %674 = getelementptr inbounds float, ptr %605, i64 8
  store float %673, ptr %674, align 4, !tbaa !40
  %675 = add i32 %606, 3
  %676 = getelementptr inbounds float, ptr %648, i64 9
  %677 = getelementptr inbounds float, ptr %605, i64 9
  %678 = load float, ptr %676, align 4, !tbaa !40
  store float %678, ptr %677, align 4, !tbaa !40
  br label %754

679:                                              ; preds = %646
  %680 = sext i32 %606 to i64
  %681 = load float, ptr %648, align 4, !tbaa !40
  store float %681, ptr %605, align 4, !tbaa !40
  %682 = getelementptr inbounds float, ptr %648, i64 1
  %683 = load float, ptr %682, align 4, !tbaa !40
  %684 = getelementptr inbounds float, ptr %605, i64 1
  store float %683, ptr %684, align 4, !tbaa !40
  %685 = getelementptr inbounds float, ptr %648, i64 2
  %686 = load float, ptr %685, align 4, !tbaa !40
  %687 = getelementptr inbounds float, ptr %605, i64 2
  store float %686, ptr %687, align 4, !tbaa !40
  %688 = getelementptr inbounds [3 x float], ptr %378, i64 %680
  %689 = load float, ptr %688, align 4, !tbaa !40
  %690 = fadd fast float %689, %681
  store float %690, ptr %605, align 4, !tbaa !40
  %691 = getelementptr inbounds float, ptr %688, i64 1
  %692 = load float, ptr %691, align 4, !tbaa !40
  %693 = fadd fast float %692, %683
  store float %693, ptr %684, align 4, !tbaa !40
  %694 = getelementptr inbounds float, ptr %688, i64 2
  %695 = load float, ptr %694, align 4, !tbaa !40
  %696 = fadd fast float %695, %686
  store float %696, ptr %687, align 4, !tbaa !40
  %697 = getelementptr inbounds float, ptr %605, i64 3
  %698 = getelementptr inbounds float, ptr %648, i64 3
  %699 = add nsw i64 %680, 1
  %700 = load float, ptr %698, align 4, !tbaa !40
  store float %700, ptr %697, align 4, !tbaa !40
  %701 = getelementptr inbounds float, ptr %648, i64 4
  %702 = load float, ptr %701, align 4, !tbaa !40
  %703 = getelementptr inbounds float, ptr %605, i64 4
  store float %702, ptr %703, align 4, !tbaa !40
  %704 = getelementptr inbounds float, ptr %648, i64 5
  %705 = load float, ptr %704, align 4, !tbaa !40
  %706 = getelementptr inbounds float, ptr %605, i64 5
  store float %705, ptr %706, align 4, !tbaa !40
  %707 = getelementptr inbounds [3 x float], ptr %378, i64 %699
  %708 = load float, ptr %707, align 4, !tbaa !40
  %709 = fadd fast float %708, %700
  store float %709, ptr %697, align 4, !tbaa !40
  %710 = getelementptr inbounds float, ptr %707, i64 1
  %711 = load float, ptr %710, align 4, !tbaa !40
  %712 = fadd fast float %711, %702
  store float %712, ptr %703, align 4, !tbaa !40
  %713 = getelementptr inbounds float, ptr %707, i64 2
  %714 = load float, ptr %713, align 4, !tbaa !40
  %715 = fadd fast float %714, %705
  store float %715, ptr %706, align 4, !tbaa !40
  %716 = getelementptr inbounds float, ptr %605, i64 6
  %717 = getelementptr inbounds float, ptr %648, i64 6
  %718 = add nsw i64 %680, 2
  %719 = load float, ptr %717, align 4, !tbaa !40
  store float %719, ptr %716, align 4, !tbaa !40
  %720 = getelementptr inbounds float, ptr %648, i64 7
  %721 = load float, ptr %720, align 4, !tbaa !40
  %722 = getelementptr inbounds float, ptr %605, i64 7
  store float %721, ptr %722, align 4, !tbaa !40
  %723 = getelementptr inbounds float, ptr %648, i64 8
  %724 = load float, ptr %723, align 4, !tbaa !40
  %725 = getelementptr inbounds float, ptr %605, i64 8
  store float %724, ptr %725, align 4, !tbaa !40
  %726 = getelementptr inbounds [3 x float], ptr %378, i64 %718
  %727 = load float, ptr %726, align 4, !tbaa !40
  %728 = fadd fast float %727, %719
  store float %728, ptr %716, align 4, !tbaa !40
  %729 = getelementptr inbounds float, ptr %726, i64 1
  %730 = load float, ptr %729, align 4, !tbaa !40
  %731 = fadd fast float %730, %721
  store float %731, ptr %722, align 4, !tbaa !40
  %732 = getelementptr inbounds float, ptr %726, i64 2
  %733 = load float, ptr %732, align 4, !tbaa !40
  %734 = fadd fast float %733, %724
  store float %734, ptr %725, align 4, !tbaa !40
  %735 = add i32 %606, 3
  %736 = getelementptr inbounds float, ptr %648, i64 9
  %737 = getelementptr inbounds float, ptr %605, i64 9
  %738 = load float, ptr %736, align 4, !tbaa !40
  store float %738, ptr %737, align 4, !tbaa !40
  %739 = sext i32 %735 to i64
  %740 = getelementptr inbounds [3 x float], ptr %378, i64 %739
  %741 = load float, ptr %740, align 4, !tbaa !40
  %742 = fadd fast float %741, %738
  store float %742, ptr %737, align 4, !tbaa !40
  %743 = getelementptr inbounds float, ptr %740, i64 1
  %744 = load float, ptr %743, align 4, !tbaa !40
  %745 = getelementptr inbounds float, ptr %605, i64 10
  %746 = load float, ptr %745, align 4, !tbaa !40
  %747 = fadd fast float %746, %744
  store float %747, ptr %745, align 4, !tbaa !40
  %748 = getelementptr inbounds float, ptr %740, i64 2
  %749 = load float, ptr %748, align 4, !tbaa !40
  %750 = getelementptr inbounds float, ptr %605, i64 11
  %751 = load float, ptr %750, align 4, !tbaa !40
  %752 = fadd fast float %751, %749
  store float %752, ptr %750, align 4, !tbaa !40
  %753 = add i32 %606, 4
  br label %754

754:                                              ; preds = %679, %649, %616
  %755 = phi i32 [ %643, %616 ], [ %753, %679 ], [ %675, %649 ]
  %756 = getelementptr inbounds float, ptr %605, i64 12
  %757 = getelementptr inbounds %struct.BezTriple, ptr %607, i64 1
  %758 = icmp eq i32 %608, 0
  br i1 %758, label %826, label %603, !llvm.loop !107

759:                                              ; preds = %592
  %760 = getelementptr inbounds %struct.Nurb, ptr %593, i64 0, i32 7
  %761 = load i32, ptr %760, align 4, !tbaa !31
  %762 = mul nsw i32 %761, %600
  %763 = icmp eq i32 %762, 0
  br i1 %763, label %826, label %764

764:                                              ; preds = %759
  %765 = getelementptr inbounds %struct.Nurb, ptr %593, i64 0, i32 17
  %766 = load ptr, ptr %765, align 8, !tbaa !32
  %767 = sext i32 %595 to i64
  br label %768

768:                                              ; preds = %819, %764
  %769 = phi i64 [ %767, %764 ], [ %822, %819 ]
  %770 = phi i32 [ %762, %764 ], [ %773, %819 ]
  %771 = phi ptr [ %594, %764 ], [ %820, %819 ]
  %772 = phi ptr [ %766, %764 ], [ %821, %819 ]
  %773 = add nsw i32 %770, -1
  %774 = load ptr, ptr %385, align 8, !tbaa !47
  %775 = call ptr @BLI_ghash_lookup(ptr noundef %774, ptr noundef %772) #20
  %776 = icmp eq ptr %775, null
  br i1 %776, label %808, label %777

777:                                              ; preds = %768
  %778 = getelementptr inbounds %struct.CVKeyIndex, ptr %775, i64 0, i32 1
  %779 = load i32, ptr %778, align 8, !tbaa !106
  %780 = icmp sgt i32 %779, -1
  br i1 %780, label %781, label %808

781:                                              ; preds = %777
  %782 = zext i32 %779 to i64
  %783 = getelementptr inbounds float, ptr %410, i64 %782
  %784 = load float, ptr %783, align 4, !tbaa !40
  store float %784, ptr %771, align 4, !tbaa !40
  %785 = getelementptr inbounds float, ptr %783, i64 1
  %786 = load float, ptr %785, align 4, !tbaa !40
  %787 = getelementptr inbounds float, ptr %771, i64 1
  store float %786, ptr %787, align 4, !tbaa !40
  %788 = getelementptr inbounds float, ptr %783, i64 2
  %789 = load float, ptr %788, align 4, !tbaa !40
  %790 = getelementptr inbounds float, ptr %771, i64 2
  store float %789, ptr %790, align 4, !tbaa !40
  %791 = getelementptr inbounds float, ptr %783, i64 3
  %792 = load float, ptr %791, align 4, !tbaa !40
  %793 = getelementptr inbounds float, ptr %771, i64 3
  store float %792, ptr %793, align 4, !tbaa !40
  br i1 %401, label %794, label %819

794:                                              ; preds = %781
  %795 = getelementptr inbounds [3 x float], ptr %378, i64 %769
  %796 = load float, ptr %795, align 4, !tbaa !40
  %797 = fadd fast float %796, %784
  store float %797, ptr %771, align 4, !tbaa !40
  %798 = getelementptr inbounds float, ptr %795, i64 1
  %799 = load float, ptr %798, align 4, !tbaa !40
  %800 = fadd fast float %799, %786
  store float %800, ptr %787, align 4, !tbaa !40
  %801 = getelementptr inbounds float, ptr %795, i64 2
  %802 = load float, ptr %801, align 4, !tbaa !40
  %803 = fadd fast float %802, %789
  store float %803, ptr %790, align 4, !tbaa !40
  %804 = add nsw i64 %769, 1
  %805 = getelementptr inbounds [3 x float], ptr %378, i64 %804
  %806 = load float, ptr %805, align 4, !tbaa !40
  %807 = fadd fast float %806, %792
  store float %807, ptr %793, align 4, !tbaa !40
  br label %819

808:                                              ; preds = %777, %768
  %809 = load float, ptr %772, align 4, !tbaa !40
  store float %809, ptr %771, align 4, !tbaa !40
  %810 = getelementptr inbounds float, ptr %772, i64 1
  %811 = load float, ptr %810, align 4, !tbaa !40
  %812 = getelementptr inbounds float, ptr %771, i64 1
  store float %811, ptr %812, align 4, !tbaa !40
  %813 = getelementptr inbounds float, ptr %772, i64 2
  %814 = load float, ptr %813, align 4, !tbaa !40
  %815 = getelementptr inbounds float, ptr %771, i64 2
  store float %814, ptr %815, align 4, !tbaa !40
  %816 = getelementptr inbounds %struct.BPoint, ptr %772, i64 0, i32 1
  %817 = load float, ptr %816, align 4, !tbaa !97
  %818 = getelementptr inbounds float, ptr %771, i64 3
  store float %817, ptr %818, align 4, !tbaa !40
  br label %819

819:                                              ; preds = %808, %794, %781
  %820 = getelementptr inbounds float, ptr %771, i64 4
  %821 = getelementptr inbounds %struct.BPoint, ptr %772, i64 1
  %822 = add nsw i64 %769, 2
  %823 = icmp eq i32 %773, 0
  br i1 %823, label %824, label %768, !llvm.loop !108

824:                                              ; preds = %819
  %825 = trunc i64 %822 to i32
  br label %826

826:                                              ; preds = %754, %824, %759, %601
  %827 = phi i32 [ %595, %759 ], [ %595, %601 ], [ %825, %824 ], [ %755, %754 ]
  %828 = phi ptr [ %594, %759 ], [ %594, %601 ], [ %820, %824 ], [ %756, %754 ]
  %829 = load ptr, ptr %593, align 8, !tbaa !36
  %830 = icmp eq ptr %829, null
  br i1 %830, label %831, label %592, !llvm.loop !105

831:                                              ; preds = %826, %535, %590, %400
  br i1 %401, label %832, label %917

832:                                              ; preds = %831
  %833 = load ptr, ptr %172, align 8, !tbaa !36
  %834 = icmp eq ptr %833, null
  br i1 %834, label %917, label %835

835:                                              ; preds = %832, %913
  %836 = phi ptr [ %915, %913 ], [ %833, %832 ]
  %837 = phi ptr [ %914, %913 ], [ %408, %832 ]
  %838 = getelementptr inbounds %struct.Nurb, ptr %836, i64 0, i32 18
  %839 = load ptr, ptr %838, align 8, !tbaa !24
  %840 = icmp eq ptr %839, null
  br i1 %840, label %904, label %841

841:                                              ; preds = %835
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %2) #20
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 72, ptr nonnull %4) #20
  %842 = getelementptr inbounds %struct.Nurb, ptr %836, i64 0, i32 6
  %843 = load i32, ptr %842, align 8, !tbaa !23
  %844 = getelementptr inbounds %struct.Nurb, ptr %836, i64 0, i32 13
  %845 = load i16, ptr %844, align 4, !tbaa !39
  %846 = and i16 %845, 1
  %847 = icmp eq i16 %846, 0
  br i1 %847, label %855, label %848

848:                                              ; preds = %841
  %849 = add nsw i32 %843, -1
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds %struct.BezTriple, ptr %839, i64 %850
  %852 = mul nsw i32 %849, 12
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds float, ptr %837, i64 %853
  br label %855

855:                                              ; preds = %848, %841
  %856 = phi ptr [ %851, %848 ], [ null, %841 ]
  %857 = phi ptr [ %854, %848 ], [ null, %841 ]
  %858 = icmp eq i32 %843, 0
  br i1 %858, label %902, label %859

859:                                              ; preds = %855
  %860 = getelementptr inbounds float, ptr %837, i64 12
  %861 = getelementptr inbounds %struct.BezTriple, ptr %839, i64 1
  br label %862

862:                                              ; preds = %896, %859
  %863 = phi i32 [ %870, %896 ], [ %843, %859 ]
  %864 = phi ptr [ %898, %896 ], [ %860, %859 ]
  %865 = phi ptr [ %869, %896 ], [ %857, %859 ]
  %866 = phi ptr [ %897, %896 ], [ %861, %859 ]
  %867 = phi ptr [ %868, %896 ], [ %856, %859 ]
  %868 = phi ptr [ %899, %896 ], [ %839, %859 ]
  %869 = phi ptr [ %900, %896 ], [ %837, %859 ]
  %870 = add nsw i32 %863, -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %2, ptr noundef nonnull align 4 dereferenceable(72) %868, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %2, ptr noundef nonnull align 4 dereferenceable(36) %869, i64 36, i1 false)
  %871 = getelementptr inbounds float, ptr %869, i64 9
  %872 = load float, ptr %871, align 4, !tbaa !40
  store float %872, ptr %386, align 4, !tbaa !95
  %873 = icmp eq ptr %866, null
  br i1 %873, label %877, label %874

874:                                              ; preds = %862
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %4, ptr noundef nonnull align 4 dereferenceable(72) %866, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %4, ptr noundef nonnull align 4 dereferenceable(36) %864, i64 36, i1 false)
  %875 = getelementptr inbounds float, ptr %864, i64 9
  %876 = load float, ptr %875, align 4, !tbaa !40
  store float %876, ptr %387, align 4, !tbaa !95
  br label %877

877:                                              ; preds = %874, %862
  %878 = icmp eq ptr %867, null
  br i1 %878, label %882, label %879

879:                                              ; preds = %877
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %3, ptr noundef nonnull align 4 dereferenceable(72) %867, i64 72, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %3, ptr noundef nonnull align 4 dereferenceable(36) %865, i64 36, i1 false)
  %880 = getelementptr inbounds float, ptr %865, i64 9
  %881 = load float, ptr %880, align 4, !tbaa !40
  store float %881, ptr %388, align 4, !tbaa !95
  br label %882

882:                                              ; preds = %879, %877
  %883 = phi ptr [ %3, %879 ], [ null, %877 ]
  %884 = select i1 %873, ptr null, ptr %4
  call void @BKE_nurb_handle_calc(ptr noundef nonnull %2, ptr noundef %883, ptr noundef %884, i8 noundef zeroext 0) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %869, ptr noundef nonnull align 4 dereferenceable(36) %2, i64 36, i1 false)
  %885 = load float, ptr %386, align 4, !tbaa !95
  store float %885, ptr %871, align 4, !tbaa !40
  %886 = icmp eq i32 %870, 1
  br i1 %886, label %887, label %893

887:                                              ; preds = %882
  %888 = load i16, ptr %844, align 4, !tbaa !39
  %889 = and i16 %888, 1
  %890 = icmp eq i16 %889, 0
  br i1 %890, label %896, label %891

891:                                              ; preds = %887
  %892 = load ptr, ptr %838, align 8, !tbaa !24
  br label %896

893:                                              ; preds = %882
  %894 = getelementptr inbounds %struct.BezTriple, ptr %866, i64 1
  %895 = getelementptr inbounds float, ptr %864, i64 12
  br label %896

896:                                              ; preds = %893, %891, %887
  %897 = phi ptr [ %892, %891 ], [ %894, %893 ], [ null, %887 ]
  %898 = phi ptr [ %837, %891 ], [ %895, %893 ], [ null, %887 ]
  %899 = getelementptr inbounds %struct.BezTriple, ptr %868, i64 1
  %900 = getelementptr inbounds float, ptr %869, i64 12
  %901 = icmp eq i32 %870, 0
  br i1 %901, label %902, label %862, !llvm.loop !109

902:                                              ; preds = %896, %855
  %903 = phi ptr [ %837, %855 ], [ %900, %896 ]
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %3) #20
  call void @llvm.lifetime.end.p0(i64 72, ptr nonnull %2) #20
  br label %913

904:                                              ; preds = %835
  %905 = getelementptr inbounds %struct.Nurb, ptr %836, i64 0, i32 6
  %906 = load i32, ptr %905, align 8, !tbaa !23
  %907 = getelementptr inbounds %struct.Nurb, ptr %836, i64 0, i32 7
  %908 = load i32, ptr %907, align 4, !tbaa !31
  %909 = shl i32 %906, 2
  %910 = mul i32 %909, %908
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds float, ptr %837, i64 %911
  br label %913

913:                                              ; preds = %904, %902
  %914 = phi ptr [ %903, %902 ], [ %912, %904 ]
  %915 = load ptr, ptr %836, align 8, !tbaa !36
  %916 = icmp eq ptr %915, null
  br i1 %916, label %917, label %835, !llvm.loop !110

917:                                              ; preds = %913, %832, %831
  %918 = getelementptr inbounds %struct.KeyBlock, ptr %390, i64 0, i32 8
  store i32 %178, ptr %918, align 8, !tbaa !111
  %919 = load ptr, ptr %409, align 8, !tbaa !101
  %920 = icmp eq ptr %919, null
  br i1 %920, label %923, label %921

921:                                              ; preds = %917
  %922 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %922(ptr noundef nonnull %919) #20
  br label %923

923:                                              ; preds = %921, %917
  store ptr %408, ptr %409, align 8, !tbaa !101
  %924 = load ptr, ptr %390, align 8, !tbaa !36
  %925 = icmp eq ptr %924, null
  br i1 %925, label %926, label %389, !llvm.loop !112

926:                                              ; preds = %923, %377
  %927 = icmp eq ptr %378, null
  br i1 %927, label %930, label %928

928:                                              ; preds = %926
  %929 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %929(ptr noundef nonnull %378) #20
  br label %930

930:                                              ; preds = %165, %926, %928
  %931 = load ptr, ptr %19, align 8, !tbaa !17
  %932 = call ptr @BKE_animdata_from_id(ptr noundef %931) #20
  %933 = getelementptr inbounds %struct.Curve, ptr %931, i64 0, i32 4
  %934 = load ptr, ptr %933, align 8, !tbaa !18
  %935 = getelementptr inbounds %struct.EditNurb, ptr %934, i64 0, i32 1
  %936 = load ptr, ptr %935, align 8, !tbaa !47
  %937 = icmp eq ptr %936, null
  br i1 %937, label %955, label %938

938:                                              ; preds = %930
  %939 = call ptr @BKE_animdata_from_id(ptr noundef nonnull %931) #20
  %940 = icmp eq ptr %939, null
  br i1 %940, label %955, label %941

941:                                              ; preds = %938
  %942 = load ptr, ptr %939, align 8, !tbaa !49
  %943 = icmp eq ptr %942, null
  br i1 %943, label %944, label %948

944:                                              ; preds = %941
  %945 = getelementptr inbounds %struct.AnimData, ptr %939, i64 0, i32 5
  %946 = load ptr, ptr %945, align 8, !tbaa !51
  %947 = icmp eq ptr %946, null
  br i1 %947, label %955, label %948

948:                                              ; preds = %944, %941
  %949 = load ptr, ptr %932, align 8, !tbaa !49
  %950 = icmp eq ptr %949, null
  br i1 %950, label %953, label %951

951:                                              ; preds = %948
  %952 = getelementptr inbounds %struct.bAction, ptr %949, i64 0, i32 1
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %931, ptr noundef nonnull %952)
  br label %953

953:                                              ; preds = %951, %948
  %954 = getelementptr inbounds %struct.AnimData, ptr %932, i64 0, i32 5
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %931, ptr noundef nonnull %954)
  br label %955

955:                                              ; preds = %930, %938, %944, %953
  call void @BKE_nurbList_free(ptr noundef nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #20
  br label %956

956:                                              ; preds = %9, %1, %955
  ret void
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #8

declare ptr @BKE_nurb_duplicate(ptr noundef) local_unnamed_addr #6

declare void @BLI_addtail(ptr noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef) local_unnamed_addr #6

declare void @BKE_nurbList_free(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @make_editNurb(ptr noundef %0) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = getelementptr inbounds %struct.Curve, ptr %3, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !18
  %6 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %125

10:                                               ; preds = %1
  %11 = tail call ptr @BKE_keyblock_from_object(ptr noundef nonnull %0) #20
  %12 = icmp eq ptr %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  tail call void @undo_editmode_clear() #20
  %14 = getelementptr inbounds %struct.Curve, ptr %3, i64 0, i32 3
  tail call void @BKE_key_convert_to_curve(ptr noundef nonnull %11, ptr noundef nonnull %3, ptr noundef nonnull %14) #20
  br label %15

15:                                               ; preds = %13, %10
  %16 = icmp eq ptr %5, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  tail call void @BKE_nurbList_free(ptr noundef nonnull %5) #20
  tail call void @BKE_curve_editNurb_keyIndex_free(ptr noundef nonnull %5) #20
  %18 = getelementptr inbounds %struct.EditNurb, ptr %5, i64 0, i32 1
  store ptr null, ptr %18, align 8, !tbaa !47
  br label %22

19:                                               ; preds = %15
  %20 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %21 = tail call ptr %20(i64 noundef 32, ptr noundef nonnull @.str.2) #20
  store ptr %21, ptr %4, align 8, !tbaa !18
  br label %22

22:                                               ; preds = %19, %17
  %23 = phi ptr [ %5, %17 ], [ %21, %19 ]
  %24 = getelementptr inbounds %struct.Curve, ptr %3, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !36
  %26 = icmp eq ptr %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %22, %27
  %28 = phi ptr [ %30, %27 ], [ %25, %22 ]
  %29 = tail call ptr @BKE_nurb_duplicate(ptr noundef nonnull %28) #20
  tail call void @BKE_nurb_test2D(ptr noundef %29) #20
  tail call void @BLI_addtail(ptr noundef %23, ptr noundef %29) #20
  %30 = load ptr, ptr %28, align 8, !tbaa !36
  %31 = icmp eq ptr %30, null
  br i1 %31, label %32, label %27, !llvm.loop !113

32:                                               ; preds = %27, %22
  br i1 %12, label %38, label %33

33:                                               ; preds = %32
  %34 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 115
  %35 = load i16, ptr %34, align 2, !tbaa !114
  %36 = sext i16 %35 to i32
  %37 = getelementptr inbounds %struct.EditNurb, ptr %23, i64 0, i32 2
  store i32 %36, ptr %37, align 8, !tbaa !87
  br label %38

38:                                               ; preds = %33, %32
  %39 = getelementptr inbounds %struct.EditNurb, ptr %23, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !47
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %125

42:                                               ; preds = %38
  %43 = load ptr, ptr %24, align 8, !tbaa !56
  %44 = load ptr, ptr %23, align 8, !tbaa !115
  %45 = tail call ptr @BLI_ghash_ptr_new(ptr noundef nonnull @.str.191) #20
  %46 = icmp eq ptr %43, null
  br i1 %46, label %124, label %47

47:                                               ; preds = %42, %117
  %48 = phi i32 [ %119, %117 ], [ 0, %42 ]
  %49 = phi i32 [ %122, %117 ], [ 0, %42 ]
  %50 = phi i32 [ %118, %117 ], [ 0, %42 ]
  %51 = phi ptr [ %120, %117 ], [ %44, %42 ]
  %52 = phi ptr [ %121, %117 ], [ %43, %42 ]
  %53 = getelementptr inbounds %struct.Nurb, ptr %52, i64 0, i32 18
  %54 = load ptr, ptr %53, align 8, !tbaa !24
  %55 = icmp eq ptr %54, null
  %56 = getelementptr inbounds %struct.Nurb, ptr %52, i64 0, i32 6
  %57 = load i32, ptr %56, align 8, !tbaa !23
  br i1 %55, label %85, label %58

58:                                               ; preds = %47
  %59 = icmp eq i32 %57, 0
  br i1 %59, label %117, label %60

60:                                               ; preds = %58
  %61 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 18
  %62 = load ptr, ptr %61, align 8, !tbaa !24
  br label %63

63:                                               ; preds = %63, %60
  %64 = phi i32 [ %80, %63 ], [ %48, %60 ]
  %65 = phi i32 [ %83, %63 ], [ 0, %60 ]
  %66 = phi i32 [ %79, %63 ], [ %50, %60 ]
  %67 = phi i32 [ %70, %63 ], [ %57, %60 ]
  %68 = phi ptr [ %82, %63 ], [ %54, %60 ]
  %69 = phi ptr [ %81, %63 ], [ %62, %60 ]
  %70 = add nsw i32 %67, -1
  %71 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %72 = tail call ptr %71(i64 noundef 40, ptr noundef nonnull @.str.192) #20
  store ptr %68, ptr %72, align 8, !tbaa !94
  %73 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 1
  store i32 %66, ptr %73, align 8, !tbaa !106
  %74 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 2
  store i32 %49, ptr %74, align 4, !tbaa !52
  %75 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 3
  store i32 %65, ptr %75, align 8, !tbaa !54
  %76 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 4
  store i32 %64, ptr %76, align 4, !tbaa !116
  %77 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 5
  store i8 0, ptr %77, align 8, !tbaa !55
  %78 = getelementptr inbounds %struct.CVKeyIndex, ptr %72, i64 0, i32 6
  store ptr %52, ptr %78, align 8, !tbaa !117
  tail call void @BLI_ghash_insert(ptr noundef %45, ptr noundef %69, ptr noundef nonnull %72) #20
  %79 = add nsw i32 %66, 12
  %80 = add nsw i32 %64, 3
  %81 = getelementptr inbounds %struct.BezTriple, ptr %69, i64 1
  %82 = getelementptr inbounds %struct.BezTriple, ptr %68, i64 1
  %83 = add nuw nsw i32 %65, 1
  %84 = icmp eq i32 %70, 0
  br i1 %84, label %117, label %63, !llvm.loop !118

85:                                               ; preds = %47
  %86 = getelementptr inbounds %struct.Nurb, ptr %52, i64 0, i32 7
  %87 = load i32, ptr %86, align 4, !tbaa !31
  %88 = mul nsw i32 %87, %57
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %117, label %90

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.Nurb, ptr %52, i64 0, i32 17
  %92 = load ptr, ptr %91, align 8, !tbaa !32
  %93 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 17
  %94 = load ptr, ptr %93, align 8, !tbaa !32
  br label %95

95:                                               ; preds = %95, %90
  %96 = phi i32 [ %115, %95 ], [ %48, %90 ]
  %97 = phi i32 [ %114, %95 ], [ 0, %90 ]
  %98 = phi i32 [ %111, %95 ], [ %50, %90 ]
  %99 = phi i32 [ %102, %95 ], [ %88, %90 ]
  %100 = phi ptr [ %113, %95 ], [ %92, %90 ]
  %101 = phi ptr [ %112, %95 ], [ %94, %90 ]
  %102 = add nsw i32 %99, -1
  %103 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %104 = tail call ptr %103(i64 noundef 40, ptr noundef nonnull @.str.192) #20
  store ptr %100, ptr %104, align 8, !tbaa !94
  %105 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 1
  store i32 %98, ptr %105, align 8, !tbaa !106
  %106 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 2
  store i32 %49, ptr %106, align 4, !tbaa !52
  %107 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 3
  store i32 %97, ptr %107, align 8, !tbaa !54
  %108 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 4
  store i32 %96, ptr %108, align 4, !tbaa !116
  %109 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 5
  store i8 0, ptr %109, align 8, !tbaa !55
  %110 = getelementptr inbounds %struct.CVKeyIndex, ptr %104, i64 0, i32 6
  store ptr %52, ptr %110, align 8, !tbaa !117
  tail call void @BLI_ghash_insert(ptr noundef %45, ptr noundef %101, ptr noundef nonnull %104) #20
  %111 = add nsw i32 %98, 4
  %112 = getelementptr inbounds %struct.BPoint, ptr %101, i64 1
  %113 = getelementptr inbounds %struct.BPoint, ptr %100, i64 1
  %114 = add nuw nsw i32 %97, 1
  %115 = add nsw i32 %96, 1
  %116 = icmp eq i32 %102, 0
  br i1 %116, label %117, label %95, !llvm.loop !119

117:                                              ; preds = %63, %95, %85, %58
  %118 = phi i32 [ %50, %85 ], [ %50, %58 ], [ %111, %95 ], [ %79, %63 ]
  %119 = phi i32 [ %48, %85 ], [ %48, %58 ], [ %115, %95 ], [ %80, %63 ]
  %120 = load ptr, ptr %51, align 8, !tbaa !120
  %121 = load ptr, ptr %52, align 8, !tbaa !120
  %122 = add nuw nsw i32 %49, 1
  %123 = icmp eq ptr %121, null
  br i1 %123, label %124, label %47, !llvm.loop !121

124:                                              ; preds = %117, %42
  store ptr %45, ptr %39, align 8, !tbaa !47
  br label %125

125:                                              ; preds = %124, %38, %1
  ret void
}

declare ptr @BKE_keyblock_from_object(ptr noundef) local_unnamed_addr #6

declare void @undo_editmode_clear() local_unnamed_addr #6

declare void @BKE_key_convert_to_curve(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BKE_curve_editNurb_keyIndex_free(ptr noundef) local_unnamed_addr #6

declare void @BKE_nurb_test2D(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @free_editNurb(ptr nocapture noundef readonly %0) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  tail call void @BKE_curve_editNurb_free(ptr noundef %3) #20
  ret void
}

declare void @BKE_curve_editNurb_free(ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @ED_curve_deselect_all(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !36
  %3 = icmp eq ptr %2, null
  br i1 %3, label %104, label %4

4:                                                ; preds = %1, %101
  %5 = phi ptr [ %102, %101 ], [ %2, %1 ]
  %6 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 18
  %7 = load ptr, ptr %6, align 8, !tbaa !24
  %8 = icmp eq ptr %7, null
  br i1 %8, label %42, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 6
  %11 = load i32, ptr %10, align 8, !tbaa !23
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %101

13:                                               ; preds = %9
  %14 = and i32 %11, 1
  %15 = icmp eq i32 %11, 1
  br i1 %15, label %88, label %16

16:                                               ; preds = %13
  %17 = and i32 %11, -2
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi ptr [ %7, %16 ], [ %39, %18 ]
  %20 = phi i32 [ 0, %16 ], [ %40, %18 ]
  %21 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 0, i32 7
  %22 = load i8, ptr %21, align 1, !tbaa !27
  %23 = and i8 %22, -2
  store i8 %23, ptr %21, align 1, !tbaa !27
  %24 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 0, i32 8
  %25 = load i8, ptr %24, align 4, !tbaa !29
  %26 = and i8 %25, -2
  store i8 %26, ptr %24, align 4, !tbaa !29
  %27 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 0, i32 9
  %28 = load i8, ptr %27, align 1, !tbaa !30
  %29 = and i8 %28, -2
  store i8 %29, ptr %27, align 1, !tbaa !30
  %30 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 1, i32 7
  %31 = load i8, ptr %30, align 1, !tbaa !27
  %32 = and i8 %31, -2
  store i8 %32, ptr %30, align 1, !tbaa !27
  %33 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 1, i32 8
  %34 = load i8, ptr %33, align 4, !tbaa !29
  %35 = and i8 %34, -2
  store i8 %35, ptr %33, align 4, !tbaa !29
  %36 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 1, i32 9
  %37 = load i8, ptr %36, align 1, !tbaa !30
  %38 = and i8 %37, -2
  store i8 %38, ptr %36, align 1, !tbaa !30
  %39 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 2
  %40 = add i32 %20, 2
  %41 = icmp eq i32 %40, %17
  br i1 %41, label %88, label %18, !llvm.loop !122

42:                                               ; preds = %4
  %43 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 17
  %44 = load ptr, ptr %43, align 8, !tbaa !32
  %45 = icmp eq ptr %44, null
  br i1 %45, label %101, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 6
  %48 = load i32, ptr %47, align 8, !tbaa !23
  %49 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 7
  %50 = load i32, ptr %49, align 4, !tbaa !31
  %51 = mul nsw i32 %50, %48
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %101

53:                                               ; preds = %46
  %54 = and i32 %51, 3
  %55 = icmp ult i32 %51, 4
  br i1 %55, label %76, label %56

56:                                               ; preds = %53
  %57 = and i32 %51, -4
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi ptr [ %44, %56 ], [ %73, %58 ]
  %60 = phi i32 [ 0, %56 ], [ %74, %58 ]
  %61 = getelementptr inbounds %struct.BPoint, ptr %59, i64 0, i32 3
  %62 = load i16, ptr %61, align 4, !tbaa !34
  %63 = and i16 %62, -2
  store i16 %63, ptr %61, align 4, !tbaa !34
  %64 = getelementptr inbounds %struct.BPoint, ptr %59, i64 1, i32 3
  %65 = load i16, ptr %64, align 4, !tbaa !34
  %66 = and i16 %65, -2
  store i16 %66, ptr %64, align 4, !tbaa !34
  %67 = getelementptr inbounds %struct.BPoint, ptr %59, i64 2, i32 3
  %68 = load i16, ptr %67, align 4, !tbaa !34
  %69 = and i16 %68, -2
  store i16 %69, ptr %67, align 4, !tbaa !34
  %70 = getelementptr inbounds %struct.BPoint, ptr %59, i64 3, i32 3
  %71 = load i16, ptr %70, align 4, !tbaa !34
  %72 = and i16 %71, -2
  store i16 %72, ptr %70, align 4, !tbaa !34
  %73 = getelementptr inbounds %struct.BPoint, ptr %59, i64 4
  %74 = add i32 %60, 4
  %75 = icmp eq i32 %74, %57
  br i1 %75, label %76, label %58, !llvm.loop !123

76:                                               ; preds = %58, %53
  %77 = phi ptr [ %44, %53 ], [ %73, %58 ]
  %78 = icmp eq i32 %54, 0
  br i1 %78, label %101, label %79

79:                                               ; preds = %76, %79
  %80 = phi ptr [ %85, %79 ], [ %77, %76 ]
  %81 = phi i32 [ %86, %79 ], [ 0, %76 ]
  %82 = getelementptr inbounds %struct.BPoint, ptr %80, i64 0, i32 3
  %83 = load i16, ptr %82, align 4, !tbaa !34
  %84 = and i16 %83, -2
  store i16 %84, ptr %82, align 4, !tbaa !34
  %85 = getelementptr inbounds %struct.BPoint, ptr %80, i64 1
  %86 = add i32 %81, 1
  %87 = icmp eq i32 %86, %54
  br i1 %87, label %101, label %79, !llvm.loop !124

88:                                               ; preds = %18, %13
  %89 = phi ptr [ %7, %13 ], [ %39, %18 ]
  %90 = icmp eq i32 %14, 0
  br i1 %90, label %101, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds %struct.BezTriple, ptr %89, i64 0, i32 7
  %93 = load i8, ptr %92, align 1, !tbaa !27
  %94 = and i8 %93, -2
  store i8 %94, ptr %92, align 1, !tbaa !27
  %95 = getelementptr inbounds %struct.BezTriple, ptr %89, i64 0, i32 8
  %96 = load i8, ptr %95, align 4, !tbaa !29
  %97 = and i8 %96, -2
  store i8 %97, ptr %95, align 4, !tbaa !29
  %98 = getelementptr inbounds %struct.BezTriple, ptr %89, i64 0, i32 9
  %99 = load i8, ptr %98, align 1, !tbaa !30
  %100 = and i8 %99, -2
  store i8 %100, ptr %98, align 1, !tbaa !30
  br label %101

101:                                              ; preds = %91, %88, %76, %79, %9, %46, %42
  %102 = load ptr, ptr %5, align 8, !tbaa !36
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %4, !llvm.loop !126

104:                                              ; preds = %101, %1
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @ED_curve_select_all(ptr nocapture noundef readonly %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr %0, align 8, !tbaa !36
  %3 = icmp eq ptr %2, null
  br i1 %3, label %85, label %4

4:                                                ; preds = %1, %82
  %5 = phi ptr [ %83, %82 ], [ %2, %1 ]
  %6 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 18
  %7 = load ptr, ptr %6, align 8, !tbaa !24
  %8 = icmp eq ptr %7, null
  br i1 %8, label %33, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 6
  %11 = load i32, ptr %10, align 8, !tbaa !23
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %82

13:                                               ; preds = %9, %29
  %14 = phi ptr [ %31, %29 ], [ %7, %9 ]
  %15 = phi i32 [ %30, %29 ], [ 0, %9 ]
  %16 = getelementptr inbounds %struct.BezTriple, ptr %14, i64 0, i32 10
  %17 = load i8, ptr %16, align 2, !tbaa !127
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %29

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.BezTriple, ptr %14, i64 0, i32 7
  %21 = load i8, ptr %20, align 1, !tbaa !27
  %22 = or i8 %21, 1
  store i8 %22, ptr %20, align 1, !tbaa !27
  %23 = getelementptr inbounds %struct.BezTriple, ptr %14, i64 0, i32 8
  %24 = load i8, ptr %23, align 4, !tbaa !29
  %25 = or i8 %24, 1
  store i8 %25, ptr %23, align 4, !tbaa !29
  %26 = getelementptr inbounds %struct.BezTriple, ptr %14, i64 0, i32 9
  %27 = load i8, ptr %26, align 1, !tbaa !30
  %28 = or i8 %27, 1
  store i8 %28, ptr %26, align 1, !tbaa !30
  br label %29

29:                                               ; preds = %13, %19
  %30 = add nuw nsw i32 %15, 1
  %31 = getelementptr inbounds %struct.BezTriple, ptr %14, i64 1
  %32 = icmp eq i32 %30, %11
  br i1 %32, label %82, label %13, !llvm.loop !128

33:                                               ; preds = %4
  %34 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 17
  %35 = load ptr, ptr %34, align 8, !tbaa !32
  %36 = icmp eq ptr %35, null
  br i1 %36, label %82, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 6
  %39 = load i32, ptr %38, align 8, !tbaa !23
  %40 = getelementptr inbounds %struct.Nurb, ptr %5, i64 0, i32 7
  %41 = load i32, ptr %40, align 4, !tbaa !31
  %42 = mul nsw i32 %41, %39
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %82

44:                                               ; preds = %37
  %45 = and i32 %42, 1
  %46 = icmp eq i32 %42, 1
  br i1 %46, label %71, label %47

47:                                               ; preds = %44
  %48 = and i32 %42, -2
  br label %49

49:                                               ; preds = %67, %47
  %50 = phi ptr [ %35, %47 ], [ %68, %67 ]
  %51 = phi i32 [ 0, %47 ], [ %69, %67 ]
  %52 = getelementptr inbounds %struct.BPoint, ptr %50, i64 0, i32 4
  %53 = load i16, ptr %52, align 2, !tbaa !129
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.BPoint, ptr %50, i64 0, i32 3
  %57 = load i16, ptr %56, align 4, !tbaa !34
  %58 = or i16 %57, 1
  store i16 %58, ptr %56, align 4, !tbaa !34
  br label %59

59:                                               ; preds = %49, %55
  %60 = getelementptr inbounds %struct.BPoint, ptr %50, i64 1, i32 4
  %61 = load i16, ptr %60, align 2, !tbaa !129
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.BPoint, ptr %50, i64 1, i32 3
  %65 = load i16, ptr %64, align 4, !tbaa !34
  %66 = or i16 %65, 1
  store i16 %66, ptr %64, align 4, !tbaa !34
  br label %67

67:                                               ; preds = %63, %59
  %68 = getelementptr inbounds %struct.BPoint, ptr %50, i64 2
  %69 = add i32 %51, 2
  %70 = icmp eq i32 %69, %48
  br i1 %70, label %71, label %49, !llvm.loop !130

71:                                               ; preds = %67, %44
  %72 = phi ptr [ %35, %44 ], [ %68, %67 ]
  %73 = icmp eq i32 %45, 0
  br i1 %73, label %82, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.BPoint, ptr %72, i64 0, i32 4
  %76 = load i16, ptr %75, align 2, !tbaa !129
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.BPoint, ptr %72, i64 0, i32 3
  %80 = load i16, ptr %79, align 4, !tbaa !34
  %81 = or i16 %80, 1
  store i16 %81, ptr %79, align 4, !tbaa !34
  br label %82

82:                                               ; preds = %29, %71, %78, %74, %9, %37, %33
  %83 = load ptr, ptr %5, align 8, !tbaa !36
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %4, !llvm.loop !131

85:                                               ; preds = %82, %1
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @ED_curve_select_swap(ptr nocapture noundef readonly %0, i8 noundef zeroext %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %0, align 8, !tbaa !36
  %4 = icmp eq ptr %3, null
  br i1 %4, label %412, label %5

5:                                                ; preds = %2
  %6 = icmp eq i8 %1, 0
  br i1 %6, label %7, label %200

7:                                                ; preds = %5, %177
  %8 = phi ptr [ %178, %177 ], [ %3, %5 ]
  %9 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 2
  %10 = load i16, ptr %9, align 8, !tbaa !21
  %11 = icmp eq i16 %10, 1
  %12 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 6
  %13 = load i32, ptr %12, align 8, !tbaa !23
  br i1 %11, label %172, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 7
  %16 = load i32, ptr %15, align 4, !tbaa !31
  %17 = mul nsw i32 %16, %13
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %177, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 17
  %21 = load ptr, ptr %20, align 8, !tbaa !32
  %22 = zext i32 %17 to i64
  %23 = icmp ult i32 %17, 8
  br i1 %23, label %147, label %24

24:                                               ; preds = %19
  %25 = and i64 %22, 4294967288
  %26 = trunc i64 %25 to i32
  %27 = sub i32 %17, %26
  %28 = mul nuw nsw i64 %25, 36
  %29 = getelementptr i8, ptr %21, i64 %28
  br label %30

30:                                               ; preds = %142, %24
  %31 = phi i64 [ 0, %24 ], [ %143, %142 ]
  %32 = mul i64 %31, 36
  %33 = getelementptr i8, ptr %21, i64 %32
  %34 = mul i64 %31, 36
  %35 = add i64 %34, 36
  %36 = getelementptr i8, ptr %21, i64 %35
  %37 = mul i64 %31, 36
  %38 = add i64 %37, 72
  %39 = getelementptr i8, ptr %21, i64 %38
  %40 = mul i64 %31, 36
  %41 = add i64 %40, 108
  %42 = getelementptr i8, ptr %21, i64 %41
  %43 = mul i64 %31, 36
  %44 = add i64 %43, 144
  %45 = getelementptr i8, ptr %21, i64 %44
  %46 = mul i64 %31, 36
  %47 = add i64 %46, 180
  %48 = getelementptr i8, ptr %21, i64 %47
  %49 = mul i64 %31, 36
  %50 = add i64 %49, 216
  %51 = getelementptr i8, ptr %21, i64 %50
  %52 = mul i64 %31, 36
  %53 = add i64 %52, 252
  %54 = getelementptr i8, ptr %21, i64 %53
  %55 = getelementptr inbounds %struct.BPoint, ptr %33, i64 0, i32 3
  %56 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %57 = getelementptr inbounds %struct.BPoint, ptr %39, i64 0, i32 3
  %58 = getelementptr inbounds %struct.BPoint, ptr %42, i64 0, i32 3
  %59 = getelementptr inbounds %struct.BPoint, ptr %45, i64 0, i32 3
  %60 = getelementptr inbounds %struct.BPoint, ptr %48, i64 0, i32 3
  %61 = getelementptr inbounds %struct.BPoint, ptr %51, i64 0, i32 3
  %62 = getelementptr inbounds %struct.BPoint, ptr %54, i64 0, i32 3
  %63 = load i16, ptr %55, align 4, !tbaa !34
  %64 = load i16, ptr %56, align 4, !tbaa !34
  %65 = load i16, ptr %57, align 4, !tbaa !34
  %66 = load i16, ptr %58, align 4, !tbaa !34
  %67 = load i16, ptr %59, align 4, !tbaa !34
  %68 = load i16, ptr %60, align 4, !tbaa !34
  %69 = load i16, ptr %61, align 4, !tbaa !34
  %70 = load i16, ptr %62, align 4, !tbaa !34
  %71 = insertelement <8 x i16> poison, i16 %63, i64 0
  %72 = insertelement <8 x i16> %71, i16 %64, i64 1
  %73 = insertelement <8 x i16> %72, i16 %65, i64 2
  %74 = insertelement <8 x i16> %73, i16 %66, i64 3
  %75 = insertelement <8 x i16> %74, i16 %67, i64 4
  %76 = insertelement <8 x i16> %75, i16 %68, i64 5
  %77 = insertelement <8 x i16> %76, i16 %69, i64 6
  %78 = insertelement <8 x i16> %77, i16 %70, i64 7
  %79 = and <8 x i16> %78, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %80 = icmp eq <8 x i16> %79, zeroinitializer
  %81 = getelementptr inbounds %struct.BPoint, ptr %33, i64 0, i32 4
  %82 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 4
  %83 = getelementptr inbounds %struct.BPoint, ptr %39, i64 0, i32 4
  %84 = getelementptr inbounds %struct.BPoint, ptr %42, i64 0, i32 4
  %85 = getelementptr inbounds %struct.BPoint, ptr %45, i64 0, i32 4
  %86 = getelementptr inbounds %struct.BPoint, ptr %48, i64 0, i32 4
  %87 = getelementptr inbounds %struct.BPoint, ptr %51, i64 0, i32 4
  %88 = getelementptr inbounds %struct.BPoint, ptr %54, i64 0, i32 4
  %89 = load i16, ptr %81, align 2, !tbaa !129
  %90 = load i16, ptr %82, align 2, !tbaa !129
  %91 = load i16, ptr %83, align 2, !tbaa !129
  %92 = load i16, ptr %84, align 2, !tbaa !129
  %93 = load i16, ptr %85, align 2, !tbaa !129
  %94 = load i16, ptr %86, align 2, !tbaa !129
  %95 = load i16, ptr %87, align 2, !tbaa !129
  %96 = load i16, ptr %88, align 2, !tbaa !129
  %97 = insertelement <8 x i16> poison, i16 %89, i64 0
  %98 = insertelement <8 x i16> %97, i16 %90, i64 1
  %99 = insertelement <8 x i16> %98, i16 %91, i64 2
  %100 = insertelement <8 x i16> %99, i16 %92, i64 3
  %101 = insertelement <8 x i16> %100, i16 %93, i64 4
  %102 = insertelement <8 x i16> %101, i16 %94, i64 5
  %103 = insertelement <8 x i16> %102, i16 %95, i64 6
  %104 = insertelement <8 x i16> %103, i16 %96, i64 7
  %105 = icmp eq <8 x i16> %104, zeroinitializer
  %106 = and <8 x i16> %78, <i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2>
  %107 = xor <8 x i1> %105, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %108 = select <8 x i1> %80, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %107
  %109 = zext <8 x i1> %108 to <8 x i16>
  %110 = or <8 x i16> %106, %109
  %111 = extractelement <8 x i1> %105, i64 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %30
  %113 = extractelement <8 x i16> %110, i64 0
  store i16 %113, ptr %55, align 4, !tbaa !34
  br label %114

114:                                              ; preds = %112, %30
  %115 = extractelement <8 x i1> %105, i64 1
  br i1 %115, label %116, label %118

116:                                              ; preds = %114
  %117 = extractelement <8 x i16> %110, i64 1
  store i16 %117, ptr %56, align 4, !tbaa !34
  br label %118

118:                                              ; preds = %116, %114
  %119 = extractelement <8 x i1> %105, i64 2
  br i1 %119, label %120, label %122

120:                                              ; preds = %118
  %121 = extractelement <8 x i16> %110, i64 2
  store i16 %121, ptr %57, align 4, !tbaa !34
  br label %122

122:                                              ; preds = %120, %118
  %123 = extractelement <8 x i1> %105, i64 3
  br i1 %123, label %124, label %126

124:                                              ; preds = %122
  %125 = extractelement <8 x i16> %110, i64 3
  store i16 %125, ptr %58, align 4, !tbaa !34
  br label %126

126:                                              ; preds = %124, %122
  %127 = extractelement <8 x i1> %105, i64 4
  br i1 %127, label %128, label %130

128:                                              ; preds = %126
  %129 = extractelement <8 x i16> %110, i64 4
  store i16 %129, ptr %59, align 4, !tbaa !34
  br label %130

130:                                              ; preds = %128, %126
  %131 = extractelement <8 x i1> %105, i64 5
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = extractelement <8 x i16> %110, i64 5
  store i16 %133, ptr %60, align 4, !tbaa !34
  br label %134

134:                                              ; preds = %132, %130
  %135 = extractelement <8 x i1> %105, i64 6
  br i1 %135, label %136, label %138

136:                                              ; preds = %134
  %137 = extractelement <8 x i16> %110, i64 6
  store i16 %137, ptr %61, align 4, !tbaa !34
  br label %138

138:                                              ; preds = %136, %134
  %139 = extractelement <8 x i1> %105, i64 7
  br i1 %139, label %140, label %142

140:                                              ; preds = %138
  %141 = extractelement <8 x i16> %110, i64 7
  store i16 %141, ptr %62, align 4, !tbaa !34
  br label %142

142:                                              ; preds = %140, %138
  %143 = add nuw i64 %31, 8
  %144 = icmp eq i64 %143, %25
  br i1 %144, label %145, label %30, !llvm.loop !132

145:                                              ; preds = %142
  %146 = icmp eq i64 %25, %22
  br i1 %146, label %177, label %147

147:                                              ; preds = %19, %145
  %148 = phi i32 [ %17, %19 ], [ %27, %145 ]
  %149 = phi ptr [ %21, %19 ], [ %29, %145 ]
  br label %150

150:                                              ; preds = %147, %169
  %151 = phi i32 [ %153, %169 ], [ %148, %147 ]
  %152 = phi ptr [ %170, %169 ], [ %149, %147 ]
  %153 = add nsw i32 %151, -1
  %154 = getelementptr inbounds %struct.BPoint, ptr %152, i64 0, i32 3
  %155 = load i16, ptr %154, align 4, !tbaa !34
  %156 = and i16 %155, 1
  %157 = icmp eq i16 %156, 0
  %158 = getelementptr inbounds %struct.BPoint, ptr %152, i64 0, i32 4
  %159 = load i16, ptr %158, align 2, !tbaa !129
  %160 = icmp eq i16 %159, 0
  br i1 %157, label %164, label %161

161:                                              ; preds = %150
  br i1 %160, label %162, label %169

162:                                              ; preds = %161
  %163 = and i16 %155, -2
  br label %167

164:                                              ; preds = %150
  br i1 %160, label %165, label %169

165:                                              ; preds = %164
  %166 = or i16 %155, 1
  br label %167

167:                                              ; preds = %165, %162
  %168 = phi i16 [ %166, %165 ], [ %163, %162 ]
  store i16 %168, ptr %154, align 4, !tbaa !34
  br label %169

169:                                              ; preds = %167, %164, %161
  %170 = getelementptr inbounds %struct.BPoint, ptr %152, i64 1
  %171 = icmp eq i32 %153, 0
  br i1 %171, label %177, label %150, !llvm.loop !135

172:                                              ; preds = %7
  %173 = icmp eq i32 %13, 0
  br i1 %173, label %177, label %174

174:                                              ; preds = %172
  %175 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 18
  %176 = load ptr, ptr %175, align 8, !tbaa !24
  br label %180

177:                                              ; preds = %169, %197, %145, %14, %172
  %178 = load ptr, ptr %8, align 8, !tbaa !36
  %179 = icmp eq ptr %178, null
  br i1 %179, label %412, label %7, !llvm.loop !136

180:                                              ; preds = %174, %197
  %181 = phi i32 [ %183, %197 ], [ %13, %174 ]
  %182 = phi ptr [ %198, %197 ], [ %176, %174 ]
  %183 = add nsw i32 %181, -1
  %184 = getelementptr inbounds %struct.BezTriple, ptr %182, i64 0, i32 10
  %185 = load i8, ptr %184, align 2, !tbaa !127
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %187, label %197

187:                                              ; preds = %180
  %188 = getelementptr inbounds %struct.BezTriple, ptr %182, i64 0, i32 8
  %189 = load i8, ptr %188, align 4, !tbaa !29
  %190 = xor i8 %189, 1
  store i8 %190, ptr %188, align 4, !tbaa !29
  %191 = getelementptr inbounds %struct.BezTriple, ptr %182, i64 0, i32 7
  %192 = load i8, ptr %191, align 1, !tbaa !27
  %193 = xor i8 %192, 1
  store i8 %193, ptr %191, align 1, !tbaa !27
  %194 = getelementptr inbounds %struct.BezTriple, ptr %182, i64 0, i32 9
  %195 = load i8, ptr %194, align 1, !tbaa !30
  %196 = xor i8 %195, 1
  store i8 %196, ptr %194, align 1, !tbaa !30
  br label %197

197:                                              ; preds = %187, %180
  %198 = getelementptr inbounds %struct.BezTriple, ptr %182, i64 1
  %199 = icmp eq i32 %183, 0
  br i1 %199, label %177, label %180, !llvm.loop !137

200:                                              ; preds = %5, %409
  %201 = phi ptr [ %410, %409 ], [ %3, %5 ]
  %202 = getelementptr inbounds %struct.Nurb, ptr %201, i64 0, i32 2
  %203 = load i16, ptr %202, align 8, !tbaa !21
  %204 = icmp eq i16 %203, 1
  %205 = getelementptr inbounds %struct.Nurb, ptr %201, i64 0, i32 6
  %206 = load i32, ptr %205, align 8, !tbaa !23
  br i1 %204, label %207, label %251

207:                                              ; preds = %200
  %208 = icmp eq i32 %206, 0
  br i1 %208, label %409, label %209

209:                                              ; preds = %207
  %210 = getelementptr inbounds %struct.Nurb, ptr %201, i64 0, i32 18
  %211 = load ptr, ptr %210, align 8, !tbaa !24
  %212 = and i32 %206, 1
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %225, label %214

214:                                              ; preds = %209
  %215 = add nsw i32 %206, -1
  %216 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 0, i32 10
  %217 = load i8, ptr %216, align 2, !tbaa !127
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %219, label %223

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 0, i32 8
  %221 = load i8, ptr %220, align 4, !tbaa !29
  %222 = xor i8 %221, 1
  store i8 %222, ptr %220, align 4, !tbaa !29
  br label %223

223:                                              ; preds = %219, %214
  %224 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 1
  br label %225

225:                                              ; preds = %223, %209
  %226 = phi i32 [ %206, %209 ], [ %215, %223 ]
  %227 = phi ptr [ %211, %209 ], [ %224, %223 ]
  %228 = icmp eq i32 %206, 1
  br i1 %228, label %409, label %229

229:                                              ; preds = %225, %248
  %230 = phi i32 [ %240, %248 ], [ %226, %225 ]
  %231 = phi ptr [ %249, %248 ], [ %227, %225 ]
  %232 = getelementptr inbounds %struct.BezTriple, ptr %231, i64 0, i32 10
  %233 = load i8, ptr %232, align 2, !tbaa !127
  %234 = icmp eq i8 %233, 0
  br i1 %234, label %235, label %239

235:                                              ; preds = %229
  %236 = getelementptr inbounds %struct.BezTriple, ptr %231, i64 0, i32 8
  %237 = load i8, ptr %236, align 4, !tbaa !29
  %238 = xor i8 %237, 1
  store i8 %238, ptr %236, align 4, !tbaa !29
  br label %239

239:                                              ; preds = %235, %229
  %240 = add nsw i32 %230, -2
  %241 = getelementptr inbounds %struct.BezTriple, ptr %231, i64 1, i32 10
  %242 = load i8, ptr %241, align 2, !tbaa !127
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %244, label %248

244:                                              ; preds = %239
  %245 = getelementptr inbounds %struct.BezTriple, ptr %231, i64 1, i32 8
  %246 = load i8, ptr %245, align 4, !tbaa !29
  %247 = xor i8 %246, 1
  store i8 %247, ptr %245, align 4, !tbaa !29
  br label %248

248:                                              ; preds = %244, %239
  %249 = getelementptr inbounds %struct.BezTriple, ptr %231, i64 2
  %250 = icmp eq i32 %240, 0
  br i1 %250, label %409, label %229, !llvm.loop !137

251:                                              ; preds = %200
  %252 = getelementptr inbounds %struct.Nurb, ptr %201, i64 0, i32 7
  %253 = load i32, ptr %252, align 4, !tbaa !31
  %254 = mul nsw i32 %253, %206
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %409, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %struct.Nurb, ptr %201, i64 0, i32 17
  %258 = load ptr, ptr %257, align 8, !tbaa !32
  %259 = zext i32 %254 to i64
  %260 = icmp ult i32 %254, 8
  br i1 %260, label %384, label %261

261:                                              ; preds = %256
  %262 = and i64 %259, 4294967288
  %263 = trunc i64 %262 to i32
  %264 = sub i32 %254, %263
  %265 = mul nuw nsw i64 %262, 36
  %266 = getelementptr i8, ptr %258, i64 %265
  br label %267

267:                                              ; preds = %379, %261
  %268 = phi i64 [ 0, %261 ], [ %380, %379 ]
  %269 = mul i64 %268, 36
  %270 = getelementptr i8, ptr %258, i64 %269
  %271 = mul i64 %268, 36
  %272 = add i64 %271, 36
  %273 = getelementptr i8, ptr %258, i64 %272
  %274 = mul i64 %268, 36
  %275 = add i64 %274, 72
  %276 = getelementptr i8, ptr %258, i64 %275
  %277 = mul i64 %268, 36
  %278 = add i64 %277, 108
  %279 = getelementptr i8, ptr %258, i64 %278
  %280 = mul i64 %268, 36
  %281 = add i64 %280, 144
  %282 = getelementptr i8, ptr %258, i64 %281
  %283 = mul i64 %268, 36
  %284 = add i64 %283, 180
  %285 = getelementptr i8, ptr %258, i64 %284
  %286 = mul i64 %268, 36
  %287 = add i64 %286, 216
  %288 = getelementptr i8, ptr %258, i64 %287
  %289 = mul i64 %268, 36
  %290 = add i64 %289, 252
  %291 = getelementptr i8, ptr %258, i64 %290
  %292 = getelementptr inbounds %struct.BPoint, ptr %270, i64 0, i32 3
  %293 = getelementptr inbounds %struct.BPoint, ptr %273, i64 0, i32 3
  %294 = getelementptr inbounds %struct.BPoint, ptr %276, i64 0, i32 3
  %295 = getelementptr inbounds %struct.BPoint, ptr %279, i64 0, i32 3
  %296 = getelementptr inbounds %struct.BPoint, ptr %282, i64 0, i32 3
  %297 = getelementptr inbounds %struct.BPoint, ptr %285, i64 0, i32 3
  %298 = getelementptr inbounds %struct.BPoint, ptr %288, i64 0, i32 3
  %299 = getelementptr inbounds %struct.BPoint, ptr %291, i64 0, i32 3
  %300 = load i16, ptr %292, align 4, !tbaa !34
  %301 = load i16, ptr %293, align 4, !tbaa !34
  %302 = load i16, ptr %294, align 4, !tbaa !34
  %303 = load i16, ptr %295, align 4, !tbaa !34
  %304 = load i16, ptr %296, align 4, !tbaa !34
  %305 = load i16, ptr %297, align 4, !tbaa !34
  %306 = load i16, ptr %298, align 4, !tbaa !34
  %307 = load i16, ptr %299, align 4, !tbaa !34
  %308 = insertelement <8 x i16> poison, i16 %300, i64 0
  %309 = insertelement <8 x i16> %308, i16 %301, i64 1
  %310 = insertelement <8 x i16> %309, i16 %302, i64 2
  %311 = insertelement <8 x i16> %310, i16 %303, i64 3
  %312 = insertelement <8 x i16> %311, i16 %304, i64 4
  %313 = insertelement <8 x i16> %312, i16 %305, i64 5
  %314 = insertelement <8 x i16> %313, i16 %306, i64 6
  %315 = insertelement <8 x i16> %314, i16 %307, i64 7
  %316 = and <8 x i16> %315, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %317 = icmp eq <8 x i16> %316, zeroinitializer
  %318 = getelementptr inbounds %struct.BPoint, ptr %270, i64 0, i32 4
  %319 = getelementptr inbounds %struct.BPoint, ptr %273, i64 0, i32 4
  %320 = getelementptr inbounds %struct.BPoint, ptr %276, i64 0, i32 4
  %321 = getelementptr inbounds %struct.BPoint, ptr %279, i64 0, i32 4
  %322 = getelementptr inbounds %struct.BPoint, ptr %282, i64 0, i32 4
  %323 = getelementptr inbounds %struct.BPoint, ptr %285, i64 0, i32 4
  %324 = getelementptr inbounds %struct.BPoint, ptr %288, i64 0, i32 4
  %325 = getelementptr inbounds %struct.BPoint, ptr %291, i64 0, i32 4
  %326 = load i16, ptr %318, align 2, !tbaa !129
  %327 = load i16, ptr %319, align 2, !tbaa !129
  %328 = load i16, ptr %320, align 2, !tbaa !129
  %329 = load i16, ptr %321, align 2, !tbaa !129
  %330 = load i16, ptr %322, align 2, !tbaa !129
  %331 = load i16, ptr %323, align 2, !tbaa !129
  %332 = load i16, ptr %324, align 2, !tbaa !129
  %333 = load i16, ptr %325, align 2, !tbaa !129
  %334 = insertelement <8 x i16> poison, i16 %326, i64 0
  %335 = insertelement <8 x i16> %334, i16 %327, i64 1
  %336 = insertelement <8 x i16> %335, i16 %328, i64 2
  %337 = insertelement <8 x i16> %336, i16 %329, i64 3
  %338 = insertelement <8 x i16> %337, i16 %330, i64 4
  %339 = insertelement <8 x i16> %338, i16 %331, i64 5
  %340 = insertelement <8 x i16> %339, i16 %332, i64 6
  %341 = insertelement <8 x i16> %340, i16 %333, i64 7
  %342 = icmp eq <8 x i16> %341, zeroinitializer
  %343 = and <8 x i16> %315, <i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2, i16 -2>
  %344 = xor <8 x i1> %342, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %345 = select <8 x i1> %317, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>, <8 x i1> %344
  %346 = zext <8 x i1> %345 to <8 x i16>
  %347 = or <8 x i16> %343, %346
  %348 = extractelement <8 x i1> %342, i64 0
  br i1 %348, label %349, label %351

349:                                              ; preds = %267
  %350 = extractelement <8 x i16> %347, i64 0
  store i16 %350, ptr %292, align 4, !tbaa !34
  br label %351

351:                                              ; preds = %349, %267
  %352 = extractelement <8 x i1> %342, i64 1
  br i1 %352, label %353, label %355

353:                                              ; preds = %351
  %354 = extractelement <8 x i16> %347, i64 1
  store i16 %354, ptr %293, align 4, !tbaa !34
  br label %355

355:                                              ; preds = %353, %351
  %356 = extractelement <8 x i1> %342, i64 2
  br i1 %356, label %357, label %359

357:                                              ; preds = %355
  %358 = extractelement <8 x i16> %347, i64 2
  store i16 %358, ptr %294, align 4, !tbaa !34
  br label %359

359:                                              ; preds = %357, %355
  %360 = extractelement <8 x i1> %342, i64 3
  br i1 %360, label %361, label %363

361:                                              ; preds = %359
  %362 = extractelement <8 x i16> %347, i64 3
  store i16 %362, ptr %295, align 4, !tbaa !34
  br label %363

363:                                              ; preds = %361, %359
  %364 = extractelement <8 x i1> %342, i64 4
  br i1 %364, label %365, label %367

365:                                              ; preds = %363
  %366 = extractelement <8 x i16> %347, i64 4
  store i16 %366, ptr %296, align 4, !tbaa !34
  br label %367

367:                                              ; preds = %365, %363
  %368 = extractelement <8 x i1> %342, i64 5
  br i1 %368, label %369, label %371

369:                                              ; preds = %367
  %370 = extractelement <8 x i16> %347, i64 5
  store i16 %370, ptr %297, align 4, !tbaa !34
  br label %371

371:                                              ; preds = %369, %367
  %372 = extractelement <8 x i1> %342, i64 6
  br i1 %372, label %373, label %375

373:                                              ; preds = %371
  %374 = extractelement <8 x i16> %347, i64 6
  store i16 %374, ptr %298, align 4, !tbaa !34
  br label %375

375:                                              ; preds = %373, %371
  %376 = extractelement <8 x i1> %342, i64 7
  br i1 %376, label %377, label %379

377:                                              ; preds = %375
  %378 = extractelement <8 x i16> %347, i64 7
  store i16 %378, ptr %299, align 4, !tbaa !34
  br label %379

379:                                              ; preds = %377, %375
  %380 = add nuw i64 %268, 8
  %381 = icmp eq i64 %380, %262
  br i1 %381, label %382, label %267, !llvm.loop !138

382:                                              ; preds = %379
  %383 = icmp eq i64 %262, %259
  br i1 %383, label %409, label %384

384:                                              ; preds = %256, %382
  %385 = phi i32 [ %254, %256 ], [ %264, %382 ]
  %386 = phi ptr [ %258, %256 ], [ %266, %382 ]
  br label %387

387:                                              ; preds = %384, %406
  %388 = phi i32 [ %390, %406 ], [ %385, %384 ]
  %389 = phi ptr [ %407, %406 ], [ %386, %384 ]
  %390 = add nsw i32 %388, -1
  %391 = getelementptr inbounds %struct.BPoint, ptr %389, i64 0, i32 3
  %392 = load i16, ptr %391, align 4, !tbaa !34
  %393 = and i16 %392, 1
  %394 = icmp eq i16 %393, 0
  %395 = getelementptr inbounds %struct.BPoint, ptr %389, i64 0, i32 4
  %396 = load i16, ptr %395, align 2, !tbaa !129
  %397 = icmp eq i16 %396, 0
  br i1 %394, label %401, label %398

398:                                              ; preds = %387
  br i1 %397, label %399, label %406

399:                                              ; preds = %398
  %400 = and i16 %392, -2
  br label %404

401:                                              ; preds = %387
  br i1 %397, label %402, label %406

402:                                              ; preds = %401
  %403 = or i16 %392, 1
  br label %404

404:                                              ; preds = %402, %399
  %405 = phi i16 [ %403, %402 ], [ %400, %399 ]
  store i16 %405, ptr %391, align 4, !tbaa !34
  br label %406

406:                                              ; preds = %398, %401, %404
  %407 = getelementptr inbounds %struct.BPoint, ptr %389, i64 1
  %408 = icmp eq i32 %390, 0
  br i1 %408, label %409, label %387, !llvm.loop !139

409:                                              ; preds = %406, %225, %248, %382, %251, %207
  %410 = load ptr, ptr %201, align 8, !tbaa !36
  %411 = icmp eq ptr %410, null
  br i1 %411, label %412, label %200, !llvm.loop !136

412:                                              ; preds = %409, %177, %2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_separate(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.3, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.4, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.5, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @separate_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @separate_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = tail call ptr @CTX_data_main(ptr noundef %0) #20
  %5 = tail call ptr @CTX_data_scene(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  %6 = tail call ptr @CTX_data_active_base(ptr noundef %0) #20
  %7 = getelementptr inbounds %struct.Base, ptr %6, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !148
  %9 = getelementptr %struct.Object, ptr %8, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !86
  %13 = icmp eq ptr %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %16 = load ptr, ptr %15, align 8, !tbaa !150
  tail call void @BKE_report(ptr noundef %16, i32 noundef 32, ptr noundef nonnull @.str.193) #20
  br label %38

17:                                               ; preds = %2
  tail call void @WM_cursor_wait(i8 noundef zeroext 1) #20
  call fastcc void @adduplicateflagNurb(ptr noundef nonnull %8, ptr noundef nonnull %3, i8 noundef zeroext 1)
  %18 = load ptr, ptr %3, align 8, !tbaa !56
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  call void @WM_cursor_wait(i8 noundef zeroext 0) #20
  %21 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %22 = load ptr, ptr %21, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %22, i32 noundef 32, ptr noundef nonnull @.str.194) #20
  br label %38

23:                                               ; preds = %17
  %24 = call ptr @ED_object_add_duplicate(ptr noundef %4, ptr noundef %5, ptr noundef nonnull %6, i32 noundef 0) #20
  call void @DAG_relations_tag_update(ptr noundef %4) #20
  %25 = getelementptr inbounds %struct.Base, ptr %24, i64 0, i32 7
  %26 = load ptr, ptr %25, align 8, !tbaa !148
  %27 = call ptr @BKE_curve_copy(ptr noundef nonnull %10) #20
  %28 = getelementptr inbounds %struct.Object, ptr %26, i64 0, i32 19
  store ptr %27, ptr %28, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.Curve, ptr %27, i64 0, i32 4
  store ptr null, ptr %29, align 8, !tbaa !18
  %30 = getelementptr inbounds %struct.ID, ptr %10, i64 0, i32 6
  %31 = load i32, ptr %30, align 4, !tbaa !152
  %32 = add nsw i32 %31, -1
  store i32 %32, ptr %30, align 4, !tbaa !152
  call void @make_editNurb(ptr noundef %26)
  %33 = load ptr, ptr %29, align 8, !tbaa !18
  call void @BKE_nurbList_free(ptr noundef %33) #20
  call void @BKE_curve_editNurb_keyIndex_free(ptr noundef %33) #20
  %34 = getelementptr inbounds %struct.EditNurb, ptr %33, i64 0, i32 1
  store ptr null, ptr %34, align 8, !tbaa !47
  call void @BLI_movelisttolist(ptr noundef %33, ptr noundef nonnull %3) #20
  call void @load_editNurb(ptr noundef %26)
  %35 = load ptr, ptr %28, align 8, !tbaa !17
  call void @BKE_curve_editNurb_free(ptr noundef %35) #20
  %36 = load ptr, ptr %9, align 8, !tbaa !17
  call fastcc void @curve_delete_segments(ptr %36, i8 noundef zeroext 1)
  call void @DAG_id_tag_update(ptr noundef nonnull %8, i16 noundef signext 2) #20
  call void @DAG_id_tag_update(ptr noundef %26, i16 noundef signext 2) #20
  %37 = load ptr, ptr %9, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %37) #20
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85393408, ptr noundef %26) #20
  call void @WM_cursor_wait(i8 noundef zeroext 0) #20
  br label %38

38:                                               ; preds = %23, %20, %14
  %39 = phi i32 [ 2, %14 ], [ 2, %20 ], [ 4, %23 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  ret i32 %39
}

declare i32 @ED_operator_editsurfcurve(ptr noundef) #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_split(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.6, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.7, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.8, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_split_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_split_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %5 = icmp eq ptr %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 3
  %8 = load i16, ptr %7, align 8, !tbaa !5
  %9 = and i16 %8, -2
  %10 = icmp eq i16 %9, 2
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 19
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !18
  br label %16

16:                                               ; preds = %2, %6, %11
  %17 = phi ptr [ %15, %11 ], [ null, %6 ], [ null, %2 ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  call fastcc void @adduplicateflagNurb(ptr noundef %4, ptr noundef nonnull %3, i8 noundef zeroext 1)
  %18 = load ptr, ptr %3, align 8, !tbaa !56
  %19 = icmp eq ptr %18, null
  br i1 %19, label %50, label %20

20:                                               ; preds = %16
  %21 = getelementptr i8, ptr %4, i64 296
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  call fastcc void @curve_delete_segments(ptr %22, i8 noundef zeroext 1)
  call void @BLI_movelisttolist(ptr noundef %17, ptr noundef nonnull %3) #20
  %23 = load ptr, ptr %21, align 8, !tbaa !17
  %24 = call ptr @BKE_animdata_from_id(ptr noundef %23) #20
  %25 = getelementptr inbounds %struct.Curve, ptr %23, i64 0, i32 4
  %26 = load ptr, ptr %25, align 8, !tbaa !18
  %27 = getelementptr inbounds %struct.EditNurb, ptr %26, i64 0, i32 1
  %28 = load ptr, ptr %27, align 8, !tbaa !47
  %29 = icmp eq ptr %28, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %20
  %31 = call ptr @BKE_animdata_from_id(ptr noundef nonnull %23) #20
  %32 = icmp eq ptr %31, null
  br i1 %32, label %47, label %33

33:                                               ; preds = %30
  %34 = load ptr, ptr %31, align 8, !tbaa !49
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %40

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.AnimData, ptr %31, i64 0, i32 5
  %38 = load ptr, ptr %37, align 8, !tbaa !51
  %39 = icmp eq ptr %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %36, %33
  %41 = load ptr, ptr %24, align 8, !tbaa !49
  %42 = icmp eq ptr %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.bAction, ptr %41, i64 0, i32 1
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %23, ptr noundef nonnull %44)
  br label %45

45:                                               ; preds = %43, %40
  %46 = getelementptr inbounds %struct.AnimData, ptr %24, i64 0, i32 5
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %23, ptr noundef nonnull %46)
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %4) #20
  br label %47

47:                                               ; preds = %30, %36, %20, %45
  %48 = load ptr, ptr %21, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %48) #20
  %49 = load ptr, ptr %21, align 8, !tbaa !17
  call void @DAG_id_tag_update(ptr noundef %49, i16 noundef signext 0) #20
  br label %53

50:                                               ; preds = %16
  %51 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %52 = load ptr, ptr %51, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %52, i32 noundef 32, ptr noundef nonnull @.str.197) #20
  br label %53

53:                                               ; preds = %47, %50
  %54 = phi i32 [ 4, %47 ], [ 2, %50 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  ret i32 %54
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ed_editnurb_translate_flag(ptr nocapture noundef readonly %0, i16 noundef signext %1, ptr nocapture noundef readonly %2) local_unnamed_addr #5 {
  %4 = load ptr, ptr %0, align 8, !tbaa !36
  %5 = icmp eq ptr %4, null
  br i1 %5, label %118, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds float, ptr %2, i64 1
  %8 = getelementptr inbounds float, ptr %2, i64 2
  %9 = zext i16 %1 to i32
  br label %10

10:                                               ; preds = %6, %115
  %11 = phi ptr [ %4, %6 ], [ %116, %115 ]
  %12 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 2
  %13 = load i16, ptr %12, align 8, !tbaa !21
  %14 = icmp eq i16 %13, 1
  %15 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 6
  %16 = load i32, ptr %15, align 8, !tbaa !23
  br i1 %14, label %17, label %84

17:                                               ; preds = %10
  %18 = icmp eq i32 %16, 0
  br i1 %18, label %115, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 18
  %21 = load ptr, ptr %20, align 8, !tbaa !24
  br label %22

22:                                               ; preds = %19, %81
  %23 = phi i32 [ %25, %81 ], [ %16, %19 ]
  %24 = phi ptr [ %82, %81 ], [ %21, %19 ]
  %25 = add nsw i32 %23, -1
  %26 = getelementptr inbounds %struct.BezTriple, ptr %24, i64 0, i32 7
  %27 = load i8, ptr %26, align 1, !tbaa !27
  %28 = zext i8 %27 to i32
  %29 = and i32 %28, %9
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %22
  %32 = load float, ptr %2, align 4, !tbaa !40
  %33 = load float, ptr %24, align 4, !tbaa !40
  %34 = fadd fast float %33, %32
  store float %34, ptr %24, align 4, !tbaa !40
  %35 = load float, ptr %7, align 4, !tbaa !40
  %36 = getelementptr inbounds float, ptr %24, i64 1
  %37 = load float, ptr %36, align 4, !tbaa !40
  %38 = fadd fast float %37, %35
  store float %38, ptr %36, align 4, !tbaa !40
  %39 = load float, ptr %8, align 4, !tbaa !40
  %40 = getelementptr inbounds float, ptr %24, i64 2
  %41 = load float, ptr %40, align 4, !tbaa !40
  %42 = fadd fast float %41, %39
  store float %42, ptr %40, align 4, !tbaa !40
  br label %43

43:                                               ; preds = %31, %22
  %44 = getelementptr inbounds %struct.BezTriple, ptr %24, i64 0, i32 8
  %45 = load i8, ptr %44, align 4, !tbaa !29
  %46 = zext i8 %45 to i32
  %47 = and i32 %46, %9
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 1
  %51 = load float, ptr %2, align 4, !tbaa !40
  %52 = load float, ptr %50, align 4, !tbaa !40
  %53 = fadd fast float %52, %51
  store float %53, ptr %50, align 4, !tbaa !40
  %54 = load float, ptr %7, align 4, !tbaa !40
  %55 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 1, i64 1
  %56 = load float, ptr %55, align 4, !tbaa !40
  %57 = fadd fast float %56, %54
  store float %57, ptr %55, align 4, !tbaa !40
  %58 = load float, ptr %8, align 4, !tbaa !40
  %59 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 1, i64 2
  %60 = load float, ptr %59, align 4, !tbaa !40
  %61 = fadd fast float %60, %58
  store float %61, ptr %59, align 4, !tbaa !40
  br label %62

62:                                               ; preds = %49, %43
  %63 = getelementptr inbounds %struct.BezTriple, ptr %24, i64 0, i32 9
  %64 = load i8, ptr %63, align 1, !tbaa !30
  %65 = zext i8 %64 to i32
  %66 = and i32 %65, %9
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %81, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 2
  %70 = load float, ptr %2, align 4, !tbaa !40
  %71 = load float, ptr %69, align 4, !tbaa !40
  %72 = fadd fast float %71, %70
  store float %72, ptr %69, align 4, !tbaa !40
  %73 = load float, ptr %7, align 4, !tbaa !40
  %74 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 2, i64 1
  %75 = load float, ptr %74, align 4, !tbaa !40
  %76 = fadd fast float %75, %73
  store float %76, ptr %74, align 4, !tbaa !40
  %77 = load float, ptr %8, align 4, !tbaa !40
  %78 = getelementptr inbounds [3 x [3 x float]], ptr %24, i64 0, i64 2, i64 2
  %79 = load float, ptr %78, align 4, !tbaa !40
  %80 = fadd fast float %79, %77
  store float %80, ptr %78, align 4, !tbaa !40
  br label %81

81:                                               ; preds = %68, %62
  %82 = getelementptr inbounds %struct.BezTriple, ptr %24, i64 1
  %83 = icmp eq i32 %25, 0
  br i1 %83, label %115, label %22, !llvm.loop !153

84:                                               ; preds = %10
  %85 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 7
  %86 = load i32, ptr %85, align 4, !tbaa !31
  %87 = mul nsw i32 %86, %16
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %115, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 17
  %91 = load ptr, ptr %90, align 8, !tbaa !32
  br label %92

92:                                               ; preds = %89, %112
  %93 = phi i32 [ %95, %112 ], [ %87, %89 ]
  %94 = phi ptr [ %113, %112 ], [ %91, %89 ]
  %95 = add nsw i32 %93, -1
  %96 = getelementptr inbounds %struct.BPoint, ptr %94, i64 0, i32 3
  %97 = load i16, ptr %96, align 4, !tbaa !34
  %98 = and i16 %97, %1
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %112, label %100

100:                                              ; preds = %92
  %101 = load float, ptr %2, align 4, !tbaa !40
  %102 = load float, ptr %94, align 4, !tbaa !40
  %103 = fadd fast float %102, %101
  store float %103, ptr %94, align 4, !tbaa !40
  %104 = load float, ptr %7, align 4, !tbaa !40
  %105 = getelementptr inbounds float, ptr %94, i64 1
  %106 = load float, ptr %105, align 4, !tbaa !40
  %107 = fadd fast float %106, %104
  store float %107, ptr %105, align 4, !tbaa !40
  %108 = load float, ptr %8, align 4, !tbaa !40
  %109 = getelementptr inbounds float, ptr %94, i64 2
  %110 = load float, ptr %109, align 4, !tbaa !40
  %111 = fadd fast float %110, %108
  store float %111, ptr %109, align 4, !tbaa !40
  br label %112

112:                                              ; preds = %100, %92
  %113 = getelementptr inbounds %struct.BPoint, ptr %94, i64 1
  %114 = icmp eq i32 %95, 0
  br i1 %114, label %115, label %92, !llvm.loop !154

115:                                              ; preds = %112, %81, %84, %17
  tail call void @BKE_nurb_test2D(ptr noundef nonnull %11) #20
  %116 = load ptr, ptr %11, align 8, !tbaa !36
  %117 = icmp eq ptr %116, null
  br i1 %117, label %118, label %10, !llvm.loop !155

118:                                              ; preds = %115, %3
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ed_editnurb_extrude_flag(ptr nocapture noundef readonly %0, i16 noundef signext %1) local_unnamed_addr #5 {
  %3 = load ptr, ptr %0, align 8, !tbaa !36
  %4 = icmp eq ptr %3, null
  br i1 %4, label %767, label %5

5:                                                ; preds = %2
  %6 = xor i16 %1, -1
  %7 = getelementptr %struct.EditNurb, ptr %0, i64 0, i32 1
  %8 = insertelement <8 x i16> poison, i16 %1, i64 0
  %9 = shufflevector <8 x i16> %8, <8 x i16> poison, <8 x i32> zeroinitializer
  %10 = insertelement <8 x i16> poison, i16 %1, i64 0
  %11 = shufflevector <8 x i16> %10, <8 x i16> poison, <8 x i32> zeroinitializer
  %12 = insertelement <8 x i16> poison, i16 %1, i64 0
  %13 = shufflevector <8 x i16> %12, <8 x i16> poison, <8 x i32> zeroinitializer
  %14 = insertelement <8 x i16> poison, i16 %1, i64 0
  %15 = shufflevector <8 x i16> %14, <8 x i16> poison, <8 x i32> zeroinitializer
  br label %16

16:                                               ; preds = %5, %763
  %17 = phi ptr [ %3, %5 ], [ %765, %763 ]
  %18 = phi i8 [ 0, %5 ], [ %764, %763 ]
  %19 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 7
  %20 = load i32, ptr %19, align 4, !tbaa !31
  %21 = icmp eq i32 %20, 1
  %22 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 17
  br i1 %21, label %23, label %137

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 6
  %25 = load i32, ptr %24, align 8, !tbaa !23
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %40, label %27

27:                                               ; preds = %23
  %28 = load ptr, ptr %22, align 8, !tbaa !32
  br label %29

29:                                               ; preds = %27, %36
  %30 = phi i32 [ %38, %36 ], [ %25, %27 ]
  %31 = phi ptr [ %37, %36 ], [ %28, %27 ]
  %32 = getelementptr inbounds %struct.BPoint, ptr %31, i64 0, i32 3
  %33 = load i16, ptr %32, align 4, !tbaa !34
  %34 = and i16 %33, %1
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %763, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.BPoint, ptr %31, i64 1
  %38 = add nsw i32 %30, -1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %29, !llvm.loop !156

40:                                               ; preds = %36, %23
  %41 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %42 = shl nsw i32 %25, 1
  %43 = sext i32 %42 to i64
  %44 = mul nsw i64 %43, 36
  %45 = tail call ptr %41(i64 noundef %44, ptr noundef nonnull @.str.9) #20
  %46 = load ptr, ptr %22, align 8, !tbaa !32
  %47 = load i32, ptr %24, align 8, !tbaa !23
  %48 = sext i32 %47 to i64
  %49 = mul nsw i64 %48, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %45, ptr align 4 %46, i64 %49, i1 false)
  %50 = load ptr, ptr %7, align 8, !tbaa !47
  %51 = icmp ne ptr %50, null
  %52 = icmp sgt i32 %47, 0
  %53 = and i1 %52, %51
  br i1 %53, label %54, label %68

54:                                               ; preds = %40, %63
  %55 = phi ptr [ %65, %63 ], [ %46, %40 ]
  %56 = phi i32 [ %66, %63 ], [ 0, %40 ]
  %57 = phi ptr [ %64, %63 ], [ %45, %40 ]
  %58 = load ptr, ptr %7, align 8, !tbaa !47
  %59 = tail call ptr @BLI_ghash_popkey(ptr noundef %58, ptr noundef %55, ptr noundef null) #20
  %60 = icmp eq ptr %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %54
  %62 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %62, ptr noundef %57, ptr noundef nonnull %59) #20
  br label %63

63:                                               ; preds = %61, %54
  %64 = getelementptr inbounds i8, ptr %57, i64 36
  %65 = getelementptr inbounds i8, ptr %55, i64 36
  %66 = add nuw nsw i32 %56, 1
  %67 = icmp eq i32 %66, %47
  br i1 %67, label %68, label %54, !llvm.loop !157

68:                                               ; preds = %63, %40
  %69 = load i32, ptr %24, align 8, !tbaa !23
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.BPoint, ptr %45, i64 %70
  %72 = load ptr, ptr %22, align 8, !tbaa !32
  %73 = mul nsw i64 %70, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %71, ptr align 4 %72, i64 %73, i1 false)
  %74 = load ptr, ptr %7, align 8, !tbaa !47
  %75 = icmp ne ptr %74, null
  %76 = icmp sgt i32 %69, 0
  %77 = and i1 %76, %75
  br i1 %77, label %78, label %92

78:                                               ; preds = %68, %87
  %79 = phi ptr [ %89, %87 ], [ %72, %68 ]
  %80 = phi i32 [ %90, %87 ], [ 0, %68 ]
  %81 = phi ptr [ %88, %87 ], [ %71, %68 ]
  %82 = load ptr, ptr %7, align 8, !tbaa !47
  %83 = tail call ptr @BLI_ghash_popkey(ptr noundef %82, ptr noundef %79, ptr noundef null) #20
  %84 = icmp eq ptr %83, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %78
  %86 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %86, ptr noundef %81, ptr noundef nonnull %83) #20
  br label %87

87:                                               ; preds = %85, %78
  %88 = getelementptr inbounds i8, ptr %81, i64 36
  %89 = getelementptr inbounds i8, ptr %79, i64 36
  %90 = add nuw nsw i32 %80, 1
  %91 = icmp eq i32 %90, %69
  br i1 %91, label %92, label %78, !llvm.loop !157

92:                                               ; preds = %87, %68
  %93 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %94 = load ptr, ptr %22, align 8, !tbaa !32
  tail call void %93(ptr noundef %94) #20
  store ptr %45, ptr %22, align 8, !tbaa !32
  %95 = load i32, ptr %24, align 8, !tbaa !23
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %135, label %97

97:                                               ; preds = %92
  %98 = and i32 %95, 1
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %110, label %100

100:                                              ; preds = %97
  %101 = add nsw i32 %95, -1
  %102 = getelementptr inbounds %struct.BPoint, ptr %45, i64 %70, i32 3
  %103 = load i16, ptr %102, align 4, !tbaa !34
  %104 = or i16 %103, %1
  store i16 %104, ptr %102, align 4, !tbaa !34
  %105 = getelementptr inbounds %struct.BPoint, ptr %45, i64 0, i32 3
  %106 = load i16, ptr %105, align 4, !tbaa !34
  %107 = and i16 %106, %6
  store i16 %107, ptr %105, align 4, !tbaa !34
  %108 = getelementptr inbounds %struct.BPoint, ptr %71, i64 1
  %109 = getelementptr inbounds %struct.BPoint, ptr %45, i64 1
  br label %110

110:                                              ; preds = %100, %97
  %111 = phi i32 [ %95, %97 ], [ %101, %100 ]
  %112 = phi ptr [ %45, %97 ], [ %109, %100 ]
  %113 = phi ptr [ %71, %97 ], [ %108, %100 ]
  %114 = icmp eq i32 %95, 1
  br i1 %114, label %135, label %115

115:                                              ; preds = %110, %115
  %116 = phi i32 [ %125, %115 ], [ %111, %110 ]
  %117 = phi ptr [ %133, %115 ], [ %112, %110 ]
  %118 = phi ptr [ %132, %115 ], [ %113, %110 ]
  %119 = getelementptr inbounds %struct.BPoint, ptr %118, i64 0, i32 3
  %120 = load i16, ptr %119, align 4, !tbaa !34
  %121 = or i16 %120, %1
  store i16 %121, ptr %119, align 4, !tbaa !34
  %122 = getelementptr inbounds %struct.BPoint, ptr %117, i64 0, i32 3
  %123 = load i16, ptr %122, align 4, !tbaa !34
  %124 = and i16 %123, %6
  store i16 %124, ptr %122, align 4, !tbaa !34
  %125 = add nsw i32 %116, -2
  %126 = getelementptr inbounds %struct.BPoint, ptr %118, i64 1, i32 3
  %127 = load i16, ptr %126, align 4, !tbaa !34
  %128 = or i16 %127, %1
  store i16 %128, ptr %126, align 4, !tbaa !34
  %129 = getelementptr inbounds %struct.BPoint, ptr %117, i64 1, i32 3
  %130 = load i16, ptr %129, align 4, !tbaa !34
  %131 = and i16 %130, %6
  store i16 %131, ptr %129, align 4, !tbaa !34
  %132 = getelementptr inbounds %struct.BPoint, ptr %118, i64 2
  %133 = getelementptr inbounds %struct.BPoint, ptr %117, i64 2
  %134 = icmp eq i32 %125, 0
  br i1 %134, label %135, label %115, !llvm.loop !158

135:                                              ; preds = %110, %115, %92
  store i32 2, ptr %19, align 4, !tbaa !31
  %136 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 12
  store i16 2, ptr %136, align 2, !tbaa !43
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %17) #20
  br label %763

137:                                              ; preds = %16
  %138 = load ptr, ptr %22, align 8, !tbaa !32
  %139 = icmp sgt i32 %20, 0
  %140 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 6
  %141 = load i32, ptr %140, align 8, !tbaa !23
  %142 = icmp sgt i32 %141, 0
  br i1 %139, label %143, label %386

143:                                              ; preds = %137
  %144 = icmp eq i32 %141, 0
  %145 = zext i32 %141 to i64
  %146 = icmp ult i32 %141, 32
  %147 = and i64 %145, 4294967264
  %148 = trunc i64 %147 to i32
  %149 = mul nuw nsw i64 %147, 36
  %150 = icmp eq i64 %147, %145
  br label %151

151:                                              ; preds = %419, %143
  %152 = phi i32 [ %420, %419 ], [ -1, %143 ]
  %153 = phi i32 [ %422, %419 ], [ -1, %143 ]
  %154 = phi i32 [ %423, %419 ], [ 0, %143 ]
  %155 = phi ptr [ %421, %419 ], [ %138, %143 ]
  br label %156

156:                                              ; preds = %151, %425
  %157 = phi i32 [ %426, %425 ], [ %154, %151 ]
  br i1 %142, label %158, label %413

158:                                              ; preds = %156
  br i1 %146, label %381, label %159

159:                                              ; preds = %158
  %160 = getelementptr i8, ptr %155, i64 %149
  %161 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %162 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %163 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %164 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %165 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %166 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %167 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %168 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %169 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %170 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %171 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %172 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %173 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %174 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %175 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %176 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %177 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %178 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %179 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %180 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %181 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %182 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %183 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %184 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %185 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %186 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %187 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %188 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %189 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %190 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %191 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  %192 = getelementptr %struct.BPoint, ptr %155, i64 0, i32 3
  br label %193

193:                                              ; preds = %193, %159
  %194 = phi i64 [ 0, %159 ], [ %374, %193 ]
  %195 = phi <8 x i32> [ zeroinitializer, %159 ], [ %370, %193 ]
  %196 = phi <8 x i32> [ zeroinitializer, %159 ], [ %371, %193 ]
  %197 = phi <8 x i32> [ zeroinitializer, %159 ], [ %372, %193 ]
  %198 = phi <8 x i32> [ zeroinitializer, %159 ], [ %373, %193 ]
  %199 = mul i64 %194, 36
  %200 = mul i64 %194, 36
  %201 = or i64 %200, 36
  %202 = mul i64 %194, 36
  %203 = or i64 %202, 72
  %204 = mul i64 %194, 36
  %205 = or i64 %204, 108
  %206 = mul i64 %194, 36
  %207 = add i64 %206, 144
  %208 = mul i64 %194, 36
  %209 = add i64 %208, 180
  %210 = mul i64 %194, 36
  %211 = add i64 %210, 216
  %212 = mul i64 %194, 36
  %213 = add i64 %212, 252
  %214 = mul i64 %194, 36
  %215 = add i64 %214, 288
  %216 = mul i64 %194, 36
  %217 = add i64 %216, 324
  %218 = mul i64 %194, 36
  %219 = add i64 %218, 360
  %220 = mul i64 %194, 36
  %221 = add i64 %220, 396
  %222 = mul i64 %194, 36
  %223 = add i64 %222, 432
  %224 = mul i64 %194, 36
  %225 = add i64 %224, 468
  %226 = mul i64 %194, 36
  %227 = add i64 %226, 504
  %228 = mul i64 %194, 36
  %229 = add i64 %228, 540
  %230 = mul i64 %194, 36
  %231 = add i64 %230, 576
  %232 = mul i64 %194, 36
  %233 = add i64 %232, 612
  %234 = mul i64 %194, 36
  %235 = add i64 %234, 648
  %236 = mul i64 %194, 36
  %237 = add i64 %236, 684
  %238 = mul i64 %194, 36
  %239 = add i64 %238, 720
  %240 = mul i64 %194, 36
  %241 = add i64 %240, 756
  %242 = mul i64 %194, 36
  %243 = add i64 %242, 792
  %244 = mul i64 %194, 36
  %245 = add i64 %244, 828
  %246 = mul i64 %194, 36
  %247 = add i64 %246, 864
  %248 = mul i64 %194, 36
  %249 = add i64 %248, 900
  %250 = mul i64 %194, 36
  %251 = add i64 %250, 936
  %252 = mul i64 %194, 36
  %253 = add i64 %252, 972
  %254 = mul i64 %194, 36
  %255 = add i64 %254, 1008
  %256 = mul i64 %194, 36
  %257 = add i64 %256, 1044
  %258 = mul i64 %194, 36
  %259 = add i64 %258, 1080
  %260 = mul i64 %194, 36
  %261 = add i64 %260, 1116
  %262 = getelementptr i8, ptr %161, i64 %199
  %263 = getelementptr i8, ptr %162, i64 %201
  %264 = getelementptr i8, ptr %163, i64 %203
  %265 = getelementptr i8, ptr %164, i64 %205
  %266 = getelementptr i8, ptr %165, i64 %207
  %267 = getelementptr i8, ptr %166, i64 %209
  %268 = getelementptr i8, ptr %167, i64 %211
  %269 = getelementptr i8, ptr %168, i64 %213
  %270 = getelementptr i8, ptr %169, i64 %215
  %271 = getelementptr i8, ptr %170, i64 %217
  %272 = getelementptr i8, ptr %171, i64 %219
  %273 = getelementptr i8, ptr %172, i64 %221
  %274 = getelementptr i8, ptr %173, i64 %223
  %275 = getelementptr i8, ptr %174, i64 %225
  %276 = getelementptr i8, ptr %175, i64 %227
  %277 = getelementptr i8, ptr %176, i64 %229
  %278 = getelementptr i8, ptr %177, i64 %231
  %279 = getelementptr i8, ptr %178, i64 %233
  %280 = getelementptr i8, ptr %179, i64 %235
  %281 = getelementptr i8, ptr %180, i64 %237
  %282 = getelementptr i8, ptr %181, i64 %239
  %283 = getelementptr i8, ptr %182, i64 %241
  %284 = getelementptr i8, ptr %183, i64 %243
  %285 = getelementptr i8, ptr %184, i64 %245
  %286 = getelementptr i8, ptr %185, i64 %247
  %287 = getelementptr i8, ptr %186, i64 %249
  %288 = getelementptr i8, ptr %187, i64 %251
  %289 = getelementptr i8, ptr %188, i64 %253
  %290 = getelementptr i8, ptr %189, i64 %255
  %291 = getelementptr i8, ptr %190, i64 %257
  %292 = getelementptr i8, ptr %191, i64 %259
  %293 = getelementptr i8, ptr %192, i64 %261
  %294 = load i16, ptr %262, align 4, !tbaa !34
  %295 = load i16, ptr %263, align 4, !tbaa !34
  %296 = load i16, ptr %264, align 4, !tbaa !34
  %297 = load i16, ptr %265, align 4, !tbaa !34
  %298 = load i16, ptr %266, align 4, !tbaa !34
  %299 = load i16, ptr %267, align 4, !tbaa !34
  %300 = load i16, ptr %268, align 4, !tbaa !34
  %301 = load i16, ptr %269, align 4, !tbaa !34
  %302 = insertelement <8 x i16> poison, i16 %294, i64 0
  %303 = insertelement <8 x i16> %302, i16 %295, i64 1
  %304 = insertelement <8 x i16> %303, i16 %296, i64 2
  %305 = insertelement <8 x i16> %304, i16 %297, i64 3
  %306 = insertelement <8 x i16> %305, i16 %298, i64 4
  %307 = insertelement <8 x i16> %306, i16 %299, i64 5
  %308 = insertelement <8 x i16> %307, i16 %300, i64 6
  %309 = insertelement <8 x i16> %308, i16 %301, i64 7
  %310 = load i16, ptr %270, align 4, !tbaa !34
  %311 = load i16, ptr %271, align 4, !tbaa !34
  %312 = load i16, ptr %272, align 4, !tbaa !34
  %313 = load i16, ptr %273, align 4, !tbaa !34
  %314 = load i16, ptr %274, align 4, !tbaa !34
  %315 = load i16, ptr %275, align 4, !tbaa !34
  %316 = load i16, ptr %276, align 4, !tbaa !34
  %317 = load i16, ptr %277, align 4, !tbaa !34
  %318 = insertelement <8 x i16> poison, i16 %310, i64 0
  %319 = insertelement <8 x i16> %318, i16 %311, i64 1
  %320 = insertelement <8 x i16> %319, i16 %312, i64 2
  %321 = insertelement <8 x i16> %320, i16 %313, i64 3
  %322 = insertelement <8 x i16> %321, i16 %314, i64 4
  %323 = insertelement <8 x i16> %322, i16 %315, i64 5
  %324 = insertelement <8 x i16> %323, i16 %316, i64 6
  %325 = insertelement <8 x i16> %324, i16 %317, i64 7
  %326 = load i16, ptr %278, align 4, !tbaa !34
  %327 = load i16, ptr %279, align 4, !tbaa !34
  %328 = load i16, ptr %280, align 4, !tbaa !34
  %329 = load i16, ptr %281, align 4, !tbaa !34
  %330 = load i16, ptr %282, align 4, !tbaa !34
  %331 = load i16, ptr %283, align 4, !tbaa !34
  %332 = load i16, ptr %284, align 4, !tbaa !34
  %333 = load i16, ptr %285, align 4, !tbaa !34
  %334 = insertelement <8 x i16> poison, i16 %326, i64 0
  %335 = insertelement <8 x i16> %334, i16 %327, i64 1
  %336 = insertelement <8 x i16> %335, i16 %328, i64 2
  %337 = insertelement <8 x i16> %336, i16 %329, i64 3
  %338 = insertelement <8 x i16> %337, i16 %330, i64 4
  %339 = insertelement <8 x i16> %338, i16 %331, i64 5
  %340 = insertelement <8 x i16> %339, i16 %332, i64 6
  %341 = insertelement <8 x i16> %340, i16 %333, i64 7
  %342 = load i16, ptr %286, align 4, !tbaa !34
  %343 = load i16, ptr %287, align 4, !tbaa !34
  %344 = load i16, ptr %288, align 4, !tbaa !34
  %345 = load i16, ptr %289, align 4, !tbaa !34
  %346 = load i16, ptr %290, align 4, !tbaa !34
  %347 = load i16, ptr %291, align 4, !tbaa !34
  %348 = load i16, ptr %292, align 4, !tbaa !34
  %349 = load i16, ptr %293, align 4, !tbaa !34
  %350 = insertelement <8 x i16> poison, i16 %342, i64 0
  %351 = insertelement <8 x i16> %350, i16 %343, i64 1
  %352 = insertelement <8 x i16> %351, i16 %344, i64 2
  %353 = insertelement <8 x i16> %352, i16 %345, i64 3
  %354 = insertelement <8 x i16> %353, i16 %346, i64 4
  %355 = insertelement <8 x i16> %354, i16 %347, i64 5
  %356 = insertelement <8 x i16> %355, i16 %348, i64 6
  %357 = insertelement <8 x i16> %356, i16 %349, i64 7
  %358 = and <8 x i16> %309, %9
  %359 = and <8 x i16> %325, %11
  %360 = and <8 x i16> %341, %13
  %361 = and <8 x i16> %357, %15
  %362 = icmp ne <8 x i16> %358, zeroinitializer
  %363 = icmp ne <8 x i16> %359, zeroinitializer
  %364 = icmp ne <8 x i16> %360, zeroinitializer
  %365 = icmp ne <8 x i16> %361, zeroinitializer
  %366 = zext <8 x i1> %362 to <8 x i32>
  %367 = zext <8 x i1> %363 to <8 x i32>
  %368 = zext <8 x i1> %364 to <8 x i32>
  %369 = zext <8 x i1> %365 to <8 x i32>
  %370 = add <8 x i32> %195, %366
  %371 = add <8 x i32> %196, %367
  %372 = add <8 x i32> %197, %368
  %373 = add <8 x i32> %198, %369
  %374 = add nuw i64 %194, 32
  %375 = icmp eq i64 %374, %147
  br i1 %375, label %376, label %193, !llvm.loop !159

376:                                              ; preds = %193
  %377 = add <8 x i32> %371, %370
  %378 = add <8 x i32> %372, %377
  %379 = add <8 x i32> %373, %378
  %380 = tail call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> %379)
  br i1 %150, label %409, label %381

381:                                              ; preds = %158, %376
  %382 = phi i32 [ 0, %158 ], [ %380, %376 ]
  %383 = phi i32 [ 0, %158 ], [ %148, %376 ]
  %384 = phi ptr [ %155, %158 ], [ %160, %376 ]
  br label %396

385:                                              ; preds = %419
  br i1 %142, label %387, label %480

386:                                              ; preds = %137
  br i1 %142, label %387, label %763

387:                                              ; preds = %385, %386
  %388 = phi i32 [ -1, %386 ], [ %420, %385 ]
  %389 = icmp eq i32 %20, 0
  %390 = sext i32 %141 to i64
  %391 = and i32 %20, 1
  %392 = icmp eq i32 %20, 1
  %393 = and i32 %20, -2
  %394 = icmp eq i32 %391, 0
  %395 = sext i32 %141 to i64
  br label %428

396:                                              ; preds = %381, %396
  %397 = phi i32 [ %405, %396 ], [ %382, %381 ]
  %398 = phi i32 [ %406, %396 ], [ %383, %381 ]
  %399 = phi ptr [ %407, %396 ], [ %384, %381 ]
  %400 = getelementptr inbounds %struct.BPoint, ptr %399, i64 0, i32 3
  %401 = load i16, ptr %400, align 4, !tbaa !34
  %402 = and i16 %401, %1
  %403 = icmp ne i16 %402, 0
  %404 = zext i1 %403 to i32
  %405 = add nuw nsw i32 %397, %404
  %406 = add nuw nsw i32 %398, 1
  %407 = getelementptr inbounds %struct.BPoint, ptr %399, i64 1
  %408 = icmp eq i32 %406, %141
  br i1 %408, label %409, label %396, !llvm.loop !160

409:                                              ; preds = %396, %376
  %410 = phi i32 [ %380, %376 ], [ %405, %396 ]
  %411 = phi ptr [ %160, %376 ], [ %407, %396 ]
  %412 = icmp eq i32 %410, %141
  br i1 %412, label %414, label %417

413:                                              ; preds = %156
  br i1 %144, label %414, label %425

414:                                              ; preds = %413, %409
  %415 = phi ptr [ %411, %409 ], [ %155, %413 ]
  %416 = icmp eq i32 %153, -1
  br i1 %416, label %419, label %763

417:                                              ; preds = %409
  %418 = icmp ugt i32 %410, 1
  br i1 %418, label %763, label %419

419:                                              ; preds = %414, %417
  %420 = phi i32 [ %152, %417 ], [ %157, %414 ]
  %421 = phi ptr [ %411, %417 ], [ %415, %414 ]
  %422 = phi i32 [ %153, %417 ], [ %157, %414 ]
  %423 = add nuw nsw i32 %157, 1
  %424 = icmp eq i32 %423, %20
  br i1 %424, label %385, label %151, !llvm.loop !161

425:                                              ; preds = %413
  %426 = add nuw nsw i32 %157, 1
  %427 = icmp eq i32 %426, %20
  br i1 %427, label %480, label %156, !llvm.loop !161

428:                                              ; preds = %387, %474
  %429 = phi i32 [ %475, %474 ], [ -1, %387 ]
  %430 = phi i64 [ %476, %474 ], [ 0, %387 ]
  br i1 %139, label %431, label %467

431:                                              ; preds = %428
  %432 = getelementptr inbounds %struct.BPoint, ptr %138, i64 %430
  br i1 %392, label %453, label %433

433:                                              ; preds = %431, %433
  %434 = phi i32 [ %449, %433 ], [ 0, %431 ]
  %435 = phi ptr [ %450, %433 ], [ %432, %431 ]
  %436 = phi i32 [ %451, %433 ], [ 0, %431 ]
  %437 = getelementptr inbounds %struct.BPoint, ptr %435, i64 0, i32 3
  %438 = load i16, ptr %437, align 4, !tbaa !34
  %439 = and i16 %438, %1
  %440 = icmp ne i16 %439, 0
  %441 = zext i1 %440 to i32
  %442 = add nuw nsw i32 %434, %441
  %443 = getelementptr inbounds %struct.BPoint, ptr %435, i64 %390
  %444 = getelementptr inbounds %struct.BPoint, ptr %435, i64 %390, i32 3
  %445 = load i16, ptr %444, align 4, !tbaa !34
  %446 = and i16 %445, %1
  %447 = icmp ne i16 %446, 0
  %448 = zext i1 %447 to i32
  %449 = add nuw nsw i32 %442, %448
  %450 = getelementptr inbounds %struct.BPoint, ptr %443, i64 %390
  %451 = add i32 %436, 2
  %452 = icmp eq i32 %451, %393
  br i1 %452, label %453, label %433, !llvm.loop !162

453:                                              ; preds = %433, %431
  %454 = phi i32 [ undef, %431 ], [ %449, %433 ]
  %455 = phi i32 [ 0, %431 ], [ %449, %433 ]
  %456 = phi ptr [ %432, %431 ], [ %450, %433 ]
  br i1 %394, label %464, label %457

457:                                              ; preds = %453
  %458 = getelementptr inbounds %struct.BPoint, ptr %456, i64 0, i32 3
  %459 = load i16, ptr %458, align 4, !tbaa !34
  %460 = and i16 %459, %1
  %461 = icmp ne i16 %460, 0
  %462 = zext i1 %461 to i32
  %463 = add nuw nsw i32 %455, %462
  br label %464

464:                                              ; preds = %453, %457
  %465 = phi i32 [ %454, %453 ], [ %463, %457 ]
  %466 = icmp eq i32 %465, %20
  br i1 %466, label %468, label %472

467:                                              ; preds = %428
  br i1 %389, label %468, label %474

468:                                              ; preds = %467, %464
  %469 = icmp eq i32 %429, -1
  br i1 %469, label %470, label %763

470:                                              ; preds = %468
  %471 = trunc i64 %430 to i32
  br label %474

472:                                              ; preds = %464
  %473 = icmp ugt i32 %465, 1
  br i1 %473, label %763, label %474

474:                                              ; preds = %472, %470, %467
  %475 = phi i32 [ %471, %470 ], [ %429, %472 ], [ %429, %467 ]
  %476 = add nuw nsw i64 %430, 1
  %477 = icmp slt i64 %476, %395
  br i1 %477, label %428, label %478, !llvm.loop !163

478:                                              ; preds = %474
  %479 = icmp eq i32 %388, -1
  br i1 %479, label %484, label %486

480:                                              ; preds = %425, %385
  %481 = phi i32 [ %420, %385 ], [ %152, %425 ]
  %482 = phi i32 [ %422, %385 ], [ %153, %425 ]
  %483 = icmp eq i32 %482, -1
  br i1 %483, label %763, label %486

484:                                              ; preds = %478
  %485 = icmp sgt i32 %475, -1
  br i1 %485, label %493, label %763

486:                                              ; preds = %480, %478
  %487 = phi i32 [ %481, %480 ], [ %388, %478 ]
  %488 = phi i32 [ %482, %480 ], [ %388, %478 ]
  %489 = phi i32 [ -1, %480 ], [ %475, %478 ]
  %490 = icmp eq i32 %489, -1
  %491 = icmp sgt i32 %488, -1
  %492 = and i1 %491, %490
  br i1 %492, label %493, label %763

493:                                              ; preds = %486, %484
  %494 = phi i32 [ -1, %484 ], [ %487, %486 ]
  %495 = phi i32 [ %475, %484 ], [ -1, %486 ]
  %496 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 6
  %497 = mul nsw i32 %141, %20
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %535, label %499

499:                                              ; preds = %493
  %500 = and i32 %497, 3
  %501 = icmp eq i32 %500, 0
  br i1 %501, label %513, label %502

502:                                              ; preds = %499, %502
  %503 = phi i32 [ %506, %502 ], [ %497, %499 ]
  %504 = phi ptr [ %510, %502 ], [ %138, %499 ]
  %505 = phi i32 [ %511, %502 ], [ 0, %499 ]
  %506 = add nsw i32 %503, -1
  %507 = getelementptr inbounds %struct.BPoint, ptr %504, i64 0, i32 3
  %508 = load i16, ptr %507, align 4, !tbaa !34
  %509 = and i16 %508, %6
  store i16 %509, ptr %507, align 4, !tbaa !34
  %510 = getelementptr inbounds %struct.BPoint, ptr %504, i64 1
  %511 = add i32 %505, 1
  %512 = icmp eq i32 %511, %500
  br i1 %512, label %513, label %502, !llvm.loop !164

513:                                              ; preds = %502, %499
  %514 = phi i32 [ %497, %499 ], [ %506, %502 ]
  %515 = phi ptr [ %138, %499 ], [ %510, %502 ]
  %516 = icmp ult i32 %497, 4
  br i1 %516, label %535, label %517

517:                                              ; preds = %513, %517
  %518 = phi i32 [ %529, %517 ], [ %514, %513 ]
  %519 = phi ptr [ %533, %517 ], [ %515, %513 ]
  %520 = getelementptr inbounds %struct.BPoint, ptr %519, i64 0, i32 3
  %521 = load i16, ptr %520, align 4, !tbaa !34
  %522 = and i16 %521, %6
  store i16 %522, ptr %520, align 4, !tbaa !34
  %523 = getelementptr inbounds %struct.BPoint, ptr %519, i64 1, i32 3
  %524 = load i16, ptr %523, align 4, !tbaa !34
  %525 = and i16 %524, %6
  store i16 %525, ptr %523, align 4, !tbaa !34
  %526 = getelementptr inbounds %struct.BPoint, ptr %519, i64 2, i32 3
  %527 = load i16, ptr %526, align 4, !tbaa !34
  %528 = and i16 %527, %6
  store i16 %528, ptr %526, align 4, !tbaa !34
  %529 = add nsw i32 %518, -4
  %530 = getelementptr inbounds %struct.BPoint, ptr %519, i64 3, i32 3
  %531 = load i16, ptr %530, align 4, !tbaa !34
  %532 = and i16 %531, %6
  store i16 %532, ptr %530, align 4, !tbaa !34
  %533 = getelementptr inbounds %struct.BPoint, ptr %519, i64 4
  %534 = icmp eq i32 %529, 0
  br i1 %534, label %535, label %517, !llvm.loop !165

535:                                              ; preds = %513, %517, %493
  %536 = icmp eq i32 %494, 0
  %537 = add nsw i32 %20, -1
  %538 = icmp eq i32 %494, %537
  %539 = select i1 %536, i1 true, i1 %538
  br i1 %539, label %540, label %691

540:                                              ; preds = %535
  %541 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %542 = add nsw i32 %20, 1
  %543 = mul nsw i32 %141, %542
  %544 = sext i32 %543 to i64
  %545 = mul nsw i64 %544, 36
  %546 = tail call ptr %541(i64 noundef %545, ptr noundef nonnull @.str.9) #20
  %547 = load i32, ptr %19, align 4, !tbaa !31
  %548 = load i32, ptr %496, align 8, !tbaa !23
  %549 = mul nsw i32 %548, %547
  br i1 %536, label %550, label %597

550:                                              ; preds = %540
  %551 = sext i32 %548 to i64
  %552 = getelementptr inbounds %struct.BPoint, ptr %546, i64 %551
  %553 = load ptr, ptr %22, align 8, !tbaa !32
  %554 = sext i32 %549 to i64
  %555 = mul nsw i64 %554, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %552, ptr align 4 %553, i64 %555, i1 false)
  %556 = load ptr, ptr %7, align 8, !tbaa !47
  %557 = icmp ne ptr %556, null
  %558 = icmp sgt i32 %549, 0
  %559 = and i1 %558, %557
  br i1 %559, label %560, label %574

560:                                              ; preds = %550, %569
  %561 = phi ptr [ %571, %569 ], [ %553, %550 ]
  %562 = phi i32 [ %572, %569 ], [ 0, %550 ]
  %563 = phi ptr [ %570, %569 ], [ %552, %550 ]
  %564 = load ptr, ptr %7, align 8, !tbaa !47
  %565 = tail call ptr @BLI_ghash_popkey(ptr noundef %564, ptr noundef %561, ptr noundef null) #20
  %566 = icmp eq ptr %565, null
  br i1 %566, label %569, label %567

567:                                              ; preds = %560
  %568 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %568, ptr noundef %563, ptr noundef nonnull %565) #20
  br label %569

569:                                              ; preds = %567, %560
  %570 = getelementptr inbounds i8, ptr %563, i64 36
  %571 = getelementptr inbounds i8, ptr %561, i64 36
  %572 = add nuw nsw i32 %562, 1
  %573 = icmp eq i32 %572, %549
  br i1 %573, label %574, label %560, !llvm.loop !157

574:                                              ; preds = %569, %550
  %575 = load ptr, ptr %22, align 8, !tbaa !32
  %576 = load i32, ptr %496, align 8, !tbaa !23
  %577 = sext i32 %576 to i64
  %578 = mul nsw i64 %577, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %546, ptr align 4 %575, i64 %578, i1 false)
  %579 = load ptr, ptr %7, align 8, !tbaa !47
  %580 = icmp ne ptr %579, null
  %581 = icmp sgt i32 %576, 0
  %582 = and i1 %581, %580
  br i1 %582, label %583, label %646

583:                                              ; preds = %574, %592
  %584 = phi ptr [ %594, %592 ], [ %575, %574 ]
  %585 = phi i32 [ %595, %592 ], [ 0, %574 ]
  %586 = phi ptr [ %593, %592 ], [ %546, %574 ]
  %587 = load ptr, ptr %7, align 8, !tbaa !47
  %588 = tail call ptr @BLI_ghash_popkey(ptr noundef %587, ptr noundef %584, ptr noundef null) #20
  %589 = icmp eq ptr %588, null
  br i1 %589, label %592, label %590

590:                                              ; preds = %583
  %591 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %591, ptr noundef %586, ptr noundef nonnull %588) #20
  br label %592

592:                                              ; preds = %590, %583
  %593 = getelementptr inbounds i8, ptr %586, i64 36
  %594 = getelementptr inbounds i8, ptr %584, i64 36
  %595 = add nuw nsw i32 %585, 1
  %596 = icmp eq i32 %595, %576
  br i1 %596, label %646, label %583, !llvm.loop !157

597:                                              ; preds = %540
  %598 = load ptr, ptr %22, align 8, !tbaa !32
  %599 = sext i32 %549 to i64
  %600 = mul nsw i64 %599, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %546, ptr align 4 %598, i64 %600, i1 false)
  %601 = load ptr, ptr %7, align 8, !tbaa !47
  %602 = icmp ne ptr %601, null
  %603 = icmp sgt i32 %549, 0
  %604 = and i1 %603, %602
  br i1 %604, label %605, label %619

605:                                              ; preds = %597, %614
  %606 = phi ptr [ %616, %614 ], [ %598, %597 ]
  %607 = phi i32 [ %617, %614 ], [ 0, %597 ]
  %608 = phi ptr [ %615, %614 ], [ %546, %597 ]
  %609 = load ptr, ptr %7, align 8, !tbaa !47
  %610 = tail call ptr @BLI_ghash_popkey(ptr noundef %609, ptr noundef %606, ptr noundef null) #20
  %611 = icmp eq ptr %610, null
  br i1 %611, label %614, label %612

612:                                              ; preds = %605
  %613 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %613, ptr noundef %608, ptr noundef nonnull %610) #20
  br label %614

614:                                              ; preds = %612, %605
  %615 = getelementptr inbounds i8, ptr %608, i64 36
  %616 = getelementptr inbounds i8, ptr %606, i64 36
  %617 = add nuw nsw i32 %607, 1
  %618 = icmp eq i32 %617, %549
  br i1 %618, label %619, label %605, !llvm.loop !157

619:                                              ; preds = %614, %597
  %620 = getelementptr inbounds %struct.BPoint, ptr %546, i64 %599
  %621 = load ptr, ptr %22, align 8, !tbaa !32
  %622 = load i32, ptr %496, align 8, !tbaa !23
  %623 = sub nsw i32 %549, %622
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds %struct.BPoint, ptr %621, i64 %624
  %626 = sext i32 %622 to i64
  %627 = mul nsw i64 %626, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %620, ptr align 4 %625, i64 %627, i1 false)
  %628 = load ptr, ptr %7, align 8, !tbaa !47
  %629 = icmp ne ptr %628, null
  %630 = icmp sgt i32 %622, 0
  %631 = and i1 %630, %629
  br i1 %631, label %632, label %646

632:                                              ; preds = %619, %641
  %633 = phi ptr [ %643, %641 ], [ %625, %619 ]
  %634 = phi i32 [ %644, %641 ], [ 0, %619 ]
  %635 = phi ptr [ %642, %641 ], [ %620, %619 ]
  %636 = load ptr, ptr %7, align 8, !tbaa !47
  %637 = tail call ptr @BLI_ghash_popkey(ptr noundef %636, ptr noundef %633, ptr noundef null) #20
  %638 = icmp eq ptr %637, null
  br i1 %638, label %641, label %639

639:                                              ; preds = %632
  %640 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %640, ptr noundef %635, ptr noundef nonnull %637) #20
  br label %641

641:                                              ; preds = %639, %632
  %642 = getelementptr inbounds i8, ptr %635, i64 36
  %643 = getelementptr inbounds i8, ptr %633, i64 36
  %644 = add nuw nsw i32 %634, 1
  %645 = icmp eq i32 %644, %622
  br i1 %645, label %646, label %632, !llvm.loop !157

646:                                              ; preds = %641, %592, %619, %574
  %647 = phi ptr [ %546, %574 ], [ %620, %619 ], [ %546, %592 ], [ %620, %641 ]
  %648 = load i32, ptr %496, align 8, !tbaa !23
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %686, label %650

650:                                              ; preds = %646
  %651 = and i32 %648, 3
  %652 = icmp eq i32 %651, 0
  br i1 %652, label %664, label %653

653:                                              ; preds = %650, %653
  %654 = phi i32 [ %657, %653 ], [ %648, %650 ]
  %655 = phi ptr [ %661, %653 ], [ %647, %650 ]
  %656 = phi i32 [ %662, %653 ], [ 0, %650 ]
  %657 = add nsw i32 %654, -1
  %658 = getelementptr inbounds %struct.BPoint, ptr %655, i64 0, i32 3
  %659 = load i16, ptr %658, align 4, !tbaa !34
  %660 = or i16 %659, %1
  store i16 %660, ptr %658, align 4, !tbaa !34
  %661 = getelementptr inbounds %struct.BPoint, ptr %655, i64 1
  %662 = add i32 %656, 1
  %663 = icmp eq i32 %662, %651
  br i1 %663, label %664, label %653, !llvm.loop !166

664:                                              ; preds = %653, %650
  %665 = phi i32 [ %648, %650 ], [ %657, %653 ]
  %666 = phi ptr [ %647, %650 ], [ %661, %653 ]
  %667 = icmp ult i32 %648, 4
  br i1 %667, label %686, label %668

668:                                              ; preds = %664, %668
  %669 = phi i32 [ %680, %668 ], [ %665, %664 ]
  %670 = phi ptr [ %684, %668 ], [ %666, %664 ]
  %671 = getelementptr inbounds %struct.BPoint, ptr %670, i64 0, i32 3
  %672 = load i16, ptr %671, align 4, !tbaa !34
  %673 = or i16 %672, %1
  store i16 %673, ptr %671, align 4, !tbaa !34
  %674 = getelementptr inbounds %struct.BPoint, ptr %670, i64 1, i32 3
  %675 = load i16, ptr %674, align 4, !tbaa !34
  %676 = or i16 %675, %1
  store i16 %676, ptr %674, align 4, !tbaa !34
  %677 = getelementptr inbounds %struct.BPoint, ptr %670, i64 2, i32 3
  %678 = load i16, ptr %677, align 4, !tbaa !34
  %679 = or i16 %678, %1
  store i16 %679, ptr %677, align 4, !tbaa !34
  %680 = add nsw i32 %669, -4
  %681 = getelementptr inbounds %struct.BPoint, ptr %670, i64 3, i32 3
  %682 = load i16, ptr %681, align 4, !tbaa !34
  %683 = or i16 %682, %1
  store i16 %683, ptr %681, align 4, !tbaa !34
  %684 = getelementptr inbounds %struct.BPoint, ptr %670, i64 4
  %685 = icmp eq i32 %680, 0
  br i1 %685, label %686, label %668, !llvm.loop !167

686:                                              ; preds = %664, %668, %646
  %687 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %688 = load ptr, ptr %22, align 8, !tbaa !32
  tail call void %687(ptr noundef %688) #20
  store ptr %546, ptr %22, align 8, !tbaa !32
  %689 = load i32, ptr %19, align 4, !tbaa !31
  %690 = add nsw i32 %689, 1
  store i32 %690, ptr %19, align 4, !tbaa !31
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %17) #20
  br label %763

691:                                              ; preds = %535
  %692 = icmp eq i32 %495, 0
  %693 = add nsw i32 %141, -1
  %694 = icmp eq i32 %495, %693
  %695 = select i1 %692, i1 true, i1 %694
  br i1 %695, label %696, label %763

696:                                              ; preds = %691
  %697 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %698 = add nsw i32 %141, 1
  %699 = mul nsw i32 %698, %20
  %700 = sext i32 %699 to i64
  %701 = mul nsw i64 %700, 36
  %702 = tail call ptr %697(i64 noundef %701, ptr noundef nonnull @.str.9) #20
  %703 = load ptr, ptr %22, align 8, !tbaa !32
  %704 = load i32, ptr %19, align 4, !tbaa !31
  %705 = icmp sgt i32 %704, 0
  br i1 %705, label %706, label %758

706:                                              ; preds = %696, %751
  %707 = phi i32 [ %753, %751 ], [ 0, %696 ]
  %708 = phi ptr [ %752, %751 ], [ %702, %696 ]
  %709 = phi ptr [ %741, %751 ], [ %703, %696 ]
  br i1 %692, label %710, label %715

710:                                              ; preds = %706
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %708, ptr noundef nonnull align 4 dereferenceable(36) %709, i64 36, i1 false), !tbaa.struct !168
  %711 = getelementptr inbounds %struct.BPoint, ptr %708, i64 0, i32 3
  %712 = load i16, ptr %711, align 4, !tbaa !34
  %713 = or i16 %712, %1
  store i16 %713, ptr %711, align 4, !tbaa !34
  %714 = getelementptr inbounds %struct.BPoint, ptr %708, i64 1
  br label %715

715:                                              ; preds = %710, %706
  %716 = phi ptr [ %714, %710 ], [ %708, %706 ]
  %717 = load i32, ptr %496, align 8, !tbaa !23
  %718 = sext i32 %717 to i64
  %719 = mul nsw i64 %718, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %716, ptr align 4 %709, i64 %719, i1 false)
  %720 = load ptr, ptr %7, align 8, !tbaa !47
  %721 = icmp ne ptr %720, null
  %722 = icmp sgt i32 %717, 0
  %723 = and i1 %722, %721
  br i1 %723, label %724, label %738

724:                                              ; preds = %715, %733
  %725 = phi ptr [ %735, %733 ], [ %709, %715 ]
  %726 = phi i32 [ %736, %733 ], [ 0, %715 ]
  %727 = phi ptr [ %734, %733 ], [ %716, %715 ]
  %728 = load ptr, ptr %7, align 8, !tbaa !47
  %729 = tail call ptr @BLI_ghash_popkey(ptr noundef %728, ptr noundef %725, ptr noundef null) #20
  %730 = icmp eq ptr %729, null
  br i1 %730, label %733, label %731

731:                                              ; preds = %724
  %732 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %732, ptr noundef %727, ptr noundef nonnull %729) #20
  br label %733

733:                                              ; preds = %731, %724
  %734 = getelementptr inbounds i8, ptr %727, i64 36
  %735 = getelementptr inbounds i8, ptr %725, i64 36
  %736 = add nuw nsw i32 %726, 1
  %737 = icmp eq i32 %736, %717
  br i1 %737, label %738, label %724, !llvm.loop !157

738:                                              ; preds = %733, %715
  %739 = load i32, ptr %496, align 8, !tbaa !23
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds %struct.BPoint, ptr %709, i64 %740
  %742 = getelementptr inbounds %struct.BPoint, ptr %716, i64 %740
  %743 = add nsw i32 %739, -1
  %744 = icmp eq i32 %495, %743
  br i1 %744, label %745, label %751

745:                                              ; preds = %738
  %746 = getelementptr inbounds %struct.BPoint, ptr %741, i64 -1
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %742, ptr noundef nonnull align 4 dereferenceable(36) %746, i64 36, i1 false), !tbaa.struct !168
  %747 = getelementptr inbounds %struct.BPoint, ptr %716, i64 %740, i32 3
  %748 = load i16, ptr %747, align 4, !tbaa !34
  %749 = or i16 %748, %1
  store i16 %749, ptr %747, align 4, !tbaa !34
  %750 = getelementptr inbounds %struct.BPoint, ptr %742, i64 1
  br label %751

751:                                              ; preds = %738, %745
  %752 = phi ptr [ %750, %745 ], [ %742, %738 ]
  %753 = add nuw nsw i32 %707, 1
  %754 = load i32, ptr %19, align 4, !tbaa !31
  %755 = icmp slt i32 %753, %754
  br i1 %755, label %706, label %756, !llvm.loop !171

756:                                              ; preds = %751
  %757 = load ptr, ptr %22, align 8, !tbaa !32
  br label %758

758:                                              ; preds = %756, %696
  %759 = phi ptr [ %757, %756 ], [ %703, %696 ]
  %760 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %760(ptr noundef %759) #20
  store ptr %702, ptr %22, align 8, !tbaa !32
  %761 = load i32, ptr %496, align 8, !tbaa !23
  %762 = add nsw i32 %761, 1
  store i32 %762, ptr %496, align 8, !tbaa !23
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %17) #20
  br label %763

763:                                              ; preds = %417, %414, %472, %468, %29, %691, %386, %484, %486, %480, %758, %686, %135
  %764 = phi i8 [ 1, %135 ], [ 1, %686 ], [ 1, %758 ], [ %18, %480 ], [ %18, %486 ], [ %18, %484 ], [ %18, %386 ], [ %18, %691 ], [ %18, %29 ], [ %18, %468 ], [ %18, %472 ], [ %18, %414 ], [ %18, %417 ]
  %765 = load ptr, ptr %17, align 8, !tbaa !36
  %766 = icmp eq ptr %765, null
  br i1 %766, label %767, label %16, !llvm.loop !172

767:                                              ; preds = %763, %2
  %768 = phi i8 [ 0, %2 ], [ %764, %763 ]
  ret i8 %768
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ED_curve_bpcpy(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #5 {
  %5 = sext i32 %3 to i64
  %6 = mul nsw i64 %5, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 4 %2, i64 %6, i1 false)
  %7 = getelementptr %struct.EditNurb, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !47
  %9 = icmp ne ptr %8, null
  %10 = icmp sgt i32 %3, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %26

12:                                               ; preds = %4, %21
  %13 = phi ptr [ %23, %21 ], [ %2, %4 ]
  %14 = phi i32 [ %24, %21 ], [ 0, %4 ]
  %15 = phi ptr [ %22, %21 ], [ %1, %4 ]
  %16 = load ptr, ptr %7, align 8, !tbaa !47
  %17 = tail call ptr @BLI_ghash_popkey(ptr noundef %16, ptr noundef %13, ptr noundef null) #20
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %20, ptr noundef %15, ptr noundef nonnull %17) #20
  br label %21

21:                                               ; preds = %19, %12
  %22 = getelementptr inbounds i8, ptr %15, i64 36
  %23 = getelementptr inbounds i8, ptr %13, i64 36
  %24 = add nuw nsw i32 %14, 1
  %25 = icmp eq i32 %24, %3
  br i1 %25, label %26, label %12, !llvm.loop !157

26:                                               ; preds = %21, %4
  ret void
}

declare void @BKE_nurb_knot_calc_v(ptr noundef) local_unnamed_addr #6

declare void @BKE_nurb_knot_calc_u(ptr noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_switch_direction(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.10, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.11, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.12, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @switch_direction_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @switch_direction_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !18
  %8 = load ptr, ptr %7, align 8, !tbaa !36
  %9 = icmp eq ptr %8, null
  br i1 %9, label %82, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 31
  %12 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 32
  br label %13

13:                                               ; preds = %10, %76
  %14 = phi ptr [ %8, %10 ], [ %78, %76 ]
  %15 = phi i32 [ 0, %10 ], [ %77, %76 ]
  %16 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 2
  %17 = load i16, ptr %16, align 8, !tbaa !21
  %18 = icmp eq i16 %17, 1
  %19 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 6
  %20 = load i32, ptr %19, align 8, !tbaa !23
  br i1 %18, label %21, label %47

21:                                               ; preds = %13
  %22 = icmp eq i32 %20, 0
  br i1 %22, label %76, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 18
  %25 = load ptr, ptr %24, align 8, !tbaa !24
  br label %29

26:                                               ; preds = %42
  %27 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 1
  %28 = icmp eq i32 %32, 0
  br i1 %28, label %76, label %29, !llvm.loop !25

29:                                               ; preds = %26, %23
  %30 = phi i32 [ %32, %26 ], [ %20, %23 ]
  %31 = phi ptr [ %27, %26 ], [ %25, %23 ]
  %32 = add nsw i32 %30, -1
  %33 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 0, i32 7
  %34 = load i8, ptr %33, align 1, !tbaa !27
  %35 = and i8 %34, 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %66

37:                                               ; preds = %29
  %38 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 0, i32 8
  %39 = load i8, ptr %38, align 4, !tbaa !29
  %40 = and i8 %39, 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %66

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 0, i32 9
  %44 = load i8, ptr %43, align 1, !tbaa !30
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %26, label %66

47:                                               ; preds = %13
  %48 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 7
  %49 = load i32, ptr %48, align 4, !tbaa !31
  %50 = mul nsw i32 %49, %20
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %76, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.Nurb, ptr %14, i64 0, i32 17
  %54 = load ptr, ptr %53, align 8, !tbaa !32
  br label %59

55:                                               ; preds = %59
  %56 = add nsw i32 %60, -1
  %57 = getelementptr inbounds %struct.BPoint, ptr %61, i64 1
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %76, label %59, !llvm.loop !33

59:                                               ; preds = %55, %52
  %60 = phi i32 [ %56, %55 ], [ %50, %52 ]
  %61 = phi ptr [ %57, %55 ], [ %54, %52 ]
  %62 = getelementptr inbounds %struct.BPoint, ptr %61, i64 0, i32 3
  %63 = load i16, ptr %62, align 4, !tbaa !34
  %64 = and i16 %63, 1
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %55, label %66

66:                                               ; preds = %59, %42, %37, %29
  tail call void @BKE_nurb_direction_switch(ptr noundef nonnull %14) #20
  tail call fastcc void @keyData_switchDirectionNurb(ptr noundef %5, ptr noundef nonnull %14)
  %67 = load i32, ptr %11, align 4, !tbaa !173
  %68 = icmp eq i32 %15, %67
  br i1 %68, label %69, label %76

69:                                               ; preds = %66
  %70 = load i32, ptr %12, align 8, !tbaa !174
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %76, label %72

72:                                               ; preds = %69
  %73 = load i32, ptr %19, align 8, !tbaa !23
  %74 = xor i32 %70, -1
  %75 = add i32 %73, %74
  store i32 %75, ptr %12, align 8, !tbaa !174
  br label %76

76:                                               ; preds = %55, %26, %47, %21, %72, %69, %66
  %77 = add nuw nsw i32 %15, 1
  %78 = load ptr, ptr %14, align 8, !tbaa !36
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %13, !llvm.loop !175

80:                                               ; preds = %76
  %81 = load ptr, ptr %4, align 8, !tbaa !17
  br label %82

82:                                               ; preds = %80, %2
  %83 = phi ptr [ %81, %80 ], [ %5, %2 ]
  %84 = tail call ptr @BKE_animdata_from_id(ptr noundef %83) #20
  %85 = getelementptr inbounds %struct.Curve, ptr %83, i64 0, i32 4
  %86 = load ptr, ptr %85, align 8, !tbaa !18
  %87 = getelementptr inbounds %struct.EditNurb, ptr %86, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !47
  %89 = icmp eq ptr %88, null
  br i1 %89, label %107, label %90

90:                                               ; preds = %82
  %91 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %83) #20
  %92 = icmp eq ptr %91, null
  br i1 %92, label %107, label %93

93:                                               ; preds = %90
  %94 = load ptr, ptr %91, align 8, !tbaa !49
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %100

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.AnimData, ptr %91, i64 0, i32 5
  %98 = load ptr, ptr %97, align 8, !tbaa !51
  %99 = icmp eq ptr %98, null
  br i1 %99, label %107, label %100

100:                                              ; preds = %96, %93
  %101 = load ptr, ptr %84, align 8, !tbaa !49
  %102 = icmp eq ptr %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.bAction, ptr %101, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %83, ptr noundef nonnull %104)
  br label %105

105:                                              ; preds = %103, %100
  %106 = getelementptr inbounds %struct.AnimData, ptr %84, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %83, ptr noundef nonnull %106)
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %3) #20
  br label %107

107:                                              ; preds = %90, %96, %82, %105
  %108 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %108, i16 noundef signext 0) #20
  %109 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %109) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_spline_weight_set(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.13, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.14, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.15, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @set_goal_weight_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @WM_operator_props_popup, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_float_factor(ptr noundef %9, ptr noundef nonnull @.str.16, float noundef nofpclass(nan inf) 1.000000e+00, float noundef nofpclass(nan inf) 0.000000e+00, float noundef nofpclass(nan inf) 1.000000e+00, ptr noundef nonnull @.str.17, ptr noundef nonnull @.str.18, float noundef nofpclass(nan inf) 0.000000e+00, float noundef nofpclass(nan inf) 1.000000e+00) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @set_goal_weight_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call fast nofpclass(nan inf) float @RNA_float_get(ptr noundef %18, ptr noundef nonnull @.str.16) #20
  %20 = load ptr, ptr %16, align 8, !tbaa !36
  %21 = icmp eq ptr %20, null
  br i1 %21, label %115, label %22

22:                                               ; preds = %15, %112
  %23 = phi ptr [ %113, %112 ], [ %20, %15 ]
  %24 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 18
  %25 = load ptr, ptr %24, align 8, !tbaa !24
  %26 = icmp eq ptr %25, null
  br i1 %26, label %56, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %29 = load i32, ptr %28, align 8, !tbaa !23
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %112

31:                                               ; preds = %27
  %32 = and i32 %29, 1
  %33 = icmp eq i32 %29, 1
  br i1 %33, label %102, label %34

34:                                               ; preds = %31
  %35 = and i32 %29, -2
  br label %36

36:                                               ; preds = %52, %34
  %37 = phi ptr [ %25, %34 ], [ %53, %52 ]
  %38 = phi i32 [ 0, %34 ], [ %54, %52 ]
  %39 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 8
  %40 = load i8, ptr %39, align 4, !tbaa !29
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 2
  store float %19, ptr %44, align 4, !tbaa !179
  br label %45

45:                                               ; preds = %36, %43
  %46 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 1, i32 8
  %47 = load i8, ptr %46, align 4, !tbaa !29
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 1, i32 2
  store float %19, ptr %51, align 4, !tbaa !179
  br label %52

52:                                               ; preds = %50, %45
  %53 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 2
  %54 = add i32 %38, 2
  %55 = icmp eq i32 %54, %35
  br i1 %55, label %102, label %36, !llvm.loop !180

56:                                               ; preds = %22
  %57 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %58 = load ptr, ptr %57, align 8, !tbaa !32
  %59 = icmp eq ptr %58, null
  br i1 %59, label %112, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %62 = load i32, ptr %61, align 8, !tbaa !23
  %63 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 7
  %64 = load i32, ptr %63, align 4, !tbaa !31
  %65 = mul nsw i32 %64, %62
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %112

67:                                               ; preds = %60
  %68 = and i32 %65, 1
  %69 = icmp eq i32 %65, 1
  br i1 %69, label %92, label %70

70:                                               ; preds = %67
  %71 = and i32 %65, -2
  br label %72

72:                                               ; preds = %88, %70
  %73 = phi ptr [ %58, %70 ], [ %89, %88 ]
  %74 = phi i32 [ 0, %70 ], [ %90, %88 ]
  %75 = getelementptr inbounds %struct.BPoint, ptr %73, i64 0, i32 3
  %76 = load i16, ptr %75, align 4, !tbaa !34
  %77 = and i16 %76, 1
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.BPoint, ptr %73, i64 0, i32 2
  store float %19, ptr %80, align 4, !tbaa !181
  br label %81

81:                                               ; preds = %72, %79
  %82 = getelementptr inbounds %struct.BPoint, ptr %73, i64 1, i32 3
  %83 = load i16, ptr %82, align 4, !tbaa !34
  %84 = and i16 %83, 1
  %85 = icmp eq i16 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.BPoint, ptr %73, i64 1, i32 2
  store float %19, ptr %87, align 4, !tbaa !181
  br label %88

88:                                               ; preds = %86, %81
  %89 = getelementptr inbounds %struct.BPoint, ptr %73, i64 2
  %90 = add i32 %74, 2
  %91 = icmp eq i32 %90, %71
  br i1 %91, label %92, label %72, !llvm.loop !182

92:                                               ; preds = %88, %67
  %93 = phi ptr [ %58, %67 ], [ %89, %88 ]
  %94 = icmp eq i32 %68, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.BPoint, ptr %93, i64 0, i32 3
  %97 = load i16, ptr %96, align 4, !tbaa !34
  %98 = and i16 %97, 1
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %112, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.BPoint, ptr %93, i64 0, i32 2
  store float %19, ptr %101, align 4, !tbaa !181
  br label %112

102:                                              ; preds = %52, %31
  %103 = phi ptr [ %25, %31 ], [ %53, %52 ]
  %104 = icmp eq i32 %32, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %struct.BezTriple, ptr %103, i64 0, i32 8
  %107 = load i8, ptr %106, align 4, !tbaa !29
  %108 = and i8 %107, 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.BezTriple, ptr %103, i64 0, i32 2
  store float %19, ptr %111, align 4, !tbaa !179
  br label %112

112:                                              ; preds = %102, %110, %105, %92, %100, %95, %27, %60, %56
  %113 = load ptr, ptr %23, align 8, !tbaa !36
  %114 = icmp eq ptr %113, null
  br i1 %114, label %115, label %22, !llvm.loop !183

115:                                              ; preds = %112, %15
  %116 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %117, i16 noundef signext 0) #20
  %118 = load ptr, ptr %116, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %118) #20
  ret i32 4
}

declare i32 @WM_operator_props_popup(ptr noundef, ptr noundef, ptr noundef) #6

declare ptr @RNA_def_float_factor(ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf)) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_radius_set(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.19, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.20, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.21, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @set_radius_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @WM_operator_props_popup, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_float(ptr noundef %9, ptr noundef nonnull @.str.22, float noundef nofpclass(nan inf) 1.000000e+00, float noundef nofpclass(nan inf) 0.000000e+00, float noundef nofpclass(nan inf) 0x47EFFFFFE0000000, ptr noundef nonnull @.str.23, ptr noundef nonnull @.str.18, float noundef nofpclass(nan inf) 0x3F1A36E2E0000000, float noundef nofpclass(nan inf) 1.000000e+01) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @set_radius_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call fast nofpclass(nan inf) float @RNA_float_get(ptr noundef %18, ptr noundef nonnull @.str.22) #20
  %20 = load ptr, ptr %16, align 8, !tbaa !36
  %21 = icmp eq ptr %20, null
  br i1 %21, label %115, label %22

22:                                               ; preds = %15, %112
  %23 = phi ptr [ %113, %112 ], [ %20, %15 ]
  %24 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 18
  %25 = load ptr, ptr %24, align 8, !tbaa !24
  %26 = icmp eq ptr %25, null
  br i1 %26, label %56, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %29 = load i32, ptr %28, align 8, !tbaa !23
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %112

31:                                               ; preds = %27
  %32 = and i32 %29, 1
  %33 = icmp eq i32 %29, 1
  br i1 %33, label %102, label %34

34:                                               ; preds = %31
  %35 = and i32 %29, -2
  br label %36

36:                                               ; preds = %52, %34
  %37 = phi ptr [ %25, %34 ], [ %53, %52 ]
  %38 = phi i32 [ 0, %34 ], [ %54, %52 ]
  %39 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 8
  %40 = load i8, ptr %39, align 4, !tbaa !29
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 3
  store float %19, ptr %44, align 4, !tbaa !184
  br label %45

45:                                               ; preds = %36, %43
  %46 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 1, i32 8
  %47 = load i8, ptr %46, align 4, !tbaa !29
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 1, i32 3
  store float %19, ptr %51, align 4, !tbaa !184
  br label %52

52:                                               ; preds = %50, %45
  %53 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 2
  %54 = add i32 %38, 2
  %55 = icmp eq i32 %54, %35
  br i1 %55, label %102, label %36, !llvm.loop !185

56:                                               ; preds = %22
  %57 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %58 = load ptr, ptr %57, align 8, !tbaa !32
  %59 = icmp eq ptr %58, null
  br i1 %59, label %112, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %62 = load i32, ptr %61, align 8, !tbaa !23
  %63 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 7
  %64 = load i32, ptr %63, align 4, !tbaa !31
  %65 = mul nsw i32 %64, %62
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %112

67:                                               ; preds = %60
  %68 = and i32 %65, 1
  %69 = icmp eq i32 %65, 1
  br i1 %69, label %92, label %70

70:                                               ; preds = %67
  %71 = and i32 %65, -2
  br label %72

72:                                               ; preds = %88, %70
  %73 = phi ptr [ %58, %70 ], [ %89, %88 ]
  %74 = phi i32 [ 0, %70 ], [ %90, %88 ]
  %75 = getelementptr inbounds %struct.BPoint, ptr %73, i64 0, i32 3
  %76 = load i16, ptr %75, align 4, !tbaa !34
  %77 = and i16 %76, 1
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.BPoint, ptr %73, i64 0, i32 5
  store float %19, ptr %80, align 4, !tbaa !186
  br label %81

81:                                               ; preds = %72, %79
  %82 = getelementptr inbounds %struct.BPoint, ptr %73, i64 1, i32 3
  %83 = load i16, ptr %82, align 4, !tbaa !34
  %84 = and i16 %83, 1
  %85 = icmp eq i16 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.BPoint, ptr %73, i64 1, i32 5
  store float %19, ptr %87, align 4, !tbaa !186
  br label %88

88:                                               ; preds = %86, %81
  %89 = getelementptr inbounds %struct.BPoint, ptr %73, i64 2
  %90 = add i32 %74, 2
  %91 = icmp eq i32 %90, %71
  br i1 %91, label %92, label %72, !llvm.loop !187

92:                                               ; preds = %88, %67
  %93 = phi ptr [ %58, %67 ], [ %89, %88 ]
  %94 = icmp eq i32 %68, 0
  br i1 %94, label %112, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.BPoint, ptr %93, i64 0, i32 3
  %97 = load i16, ptr %96, align 4, !tbaa !34
  %98 = and i16 %97, 1
  %99 = icmp eq i16 %98, 0
  br i1 %99, label %112, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.BPoint, ptr %93, i64 0, i32 5
  store float %19, ptr %101, align 4, !tbaa !186
  br label %112

102:                                              ; preds = %52, %31
  %103 = phi ptr [ %25, %31 ], [ %53, %52 ]
  %104 = icmp eq i32 %32, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %struct.BezTriple, ptr %103, i64 0, i32 8
  %107 = load i8, ptr %106, align 4, !tbaa !29
  %108 = and i8 %107, 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.BezTriple, ptr %103, i64 0, i32 3
  store float %19, ptr %111, align 4, !tbaa !184
  br label %112

112:                                              ; preds = %102, %110, %105, %92, %100, %95, %27, %60, %56
  %113 = load ptr, ptr %23, align 8, !tbaa !36
  %114 = icmp eq ptr %113, null
  br i1 %114, label %115, label %22, !llvm.loop !188

115:                                              ; preds = %112, %15
  %116 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %117) #20
  %118 = load ptr, ptr %116, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %118, i16 noundef signext 0) #20
  ret i32 4
}

declare ptr @RNA_def_float(ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf)) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_smooth(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.24, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.25, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.26, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @smooth_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @smooth_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp ne ptr %3, null
  tail call void @llvm.assume(i1 %4)
  %5 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %6 = load i16, ptr %5, align 8, !tbaa !5
  %7 = and i16 %6, -2
  %8 = icmp eq i16 %7, 2
  tail call void @llvm.assume(i1 %8)
  %9 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  %13 = load ptr, ptr %12, align 8, !tbaa !36
  %14 = icmp eq ptr %13, null
  br i1 %14, label %204, label %15

15:                                               ; preds = %2, %199
  %16 = phi ptr [ %200, %199 ], [ %13, %2 ]
  %17 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 18
  %18 = load ptr, ptr %17, align 8, !tbaa !24
  %19 = icmp eq ptr %18, null
  br i1 %19, label %122, label %20

20:                                               ; preds = %15
  %21 = load ptr, ptr @MEM_dupallocN, align 8, !tbaa !36
  %22 = tail call ptr %21(ptr noundef nonnull %18) #20
  %23 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 13
  %24 = load i16, ptr %23, align 4, !tbaa !39
  %25 = and i16 %24, 1
  %26 = icmp eq i16 %25, 0
  %27 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 6
  %28 = load i32, ptr %27, align 8, !tbaa !23
  %29 = sext i1 %26 to i32
  %30 = add nsw i32 %28, %29
  %31 = zext i1 %26 to i32
  %32 = icmp sgt i32 %30, %31
  br i1 %32, label %35, label %33

33:                                               ; preds = %20
  %34 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %34(ptr noundef %22) #20
  br label %199

35:                                               ; preds = %20
  %36 = load ptr, ptr %17, align 8, !tbaa !24
  %37 = zext i1 %26 to i64
  %38 = zext i32 %30 to i64
  br label %39

39:                                               ; preds = %35, %114
  %40 = phi i64 [ %37, %35 ], [ %115, %114 ]
  %41 = phi i8 [ 0, %35 ], [ %116, %114 ]
  %42 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %40, i32 8
  %43 = load i8, ptr %42, align 4, !tbaa !29
  %44 = and i8 %43, 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %39
  %47 = add nuw nsw i64 %40, 1
  br label %114

48:                                               ; preds = %39
  %49 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %40
  %50 = trunc i64 %40 to i32
  %51 = add i32 %50, -1
  %52 = srem i32 %51, %28
  %53 = add nsw i32 %52, %28
  %54 = srem i32 %53, %28
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.BezTriple, ptr %22, i64 %55
  %57 = add nuw nsw i64 %40, 1
  %58 = trunc i64 %57 to i32
  %59 = srem i32 %58, %28
  %60 = add nsw i32 %59, %28
  %61 = srem i32 %60, %28
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.BezTriple, ptr %22, i64 %62
  %64 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 1, i64 0
  %65 = load float, ptr %64, align 4, !tbaa !40
  %66 = getelementptr inbounds [3 x [3 x float]], ptr %56, i64 0, i64 1, i64 0
  %67 = load float, ptr %66, align 4, !tbaa !40
  %68 = getelementptr inbounds [3 x [3 x float]], ptr %63, i64 0, i64 1, i64 0
  %69 = load float, ptr %68, align 4, !tbaa !40
  %70 = fadd fast float %69, %67
  %71 = fmul fast float %65, 0x3FEAAAAAA0000000
  %72 = fmul fast float %70, 0x3FB5555560000000
  %73 = fadd fast float %72, %71
  %74 = fsub fast float %73, %65
  store float %73, ptr %64, align 4, !tbaa !40
  %75 = load float, ptr %49, align 4, !tbaa !40
  %76 = fadd fast float %74, %75
  store float %76, ptr %49, align 4, !tbaa !40
  %77 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 2, i64 0
  %78 = load float, ptr %77, align 4, !tbaa !40
  %79 = fadd fast float %78, %74
  store float %79, ptr %77, align 4, !tbaa !40
  %80 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 1, i64 1
  %81 = load float, ptr %80, align 4, !tbaa !40
  %82 = getelementptr inbounds [3 x [3 x float]], ptr %56, i64 0, i64 1, i64 1
  %83 = load float, ptr %82, align 4, !tbaa !40
  %84 = getelementptr inbounds [3 x [3 x float]], ptr %63, i64 0, i64 1, i64 1
  %85 = load float, ptr %84, align 4, !tbaa !40
  %86 = fadd fast float %85, %83
  %87 = fmul fast float %81, 0x3FEAAAAAA0000000
  %88 = fmul fast float %86, 0x3FB5555560000000
  %89 = fadd fast float %88, %87
  %90 = fsub fast float %89, %81
  store float %89, ptr %80, align 4, !tbaa !40
  %91 = getelementptr inbounds [3 x float], ptr %49, i64 0, i64 1
  %92 = load float, ptr %91, align 4, !tbaa !40
  %93 = fadd fast float %90, %92
  store float %93, ptr %91, align 4, !tbaa !40
  %94 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 2, i64 1
  %95 = load float, ptr %94, align 4, !tbaa !40
  %96 = fadd fast float %95, %90
  store float %96, ptr %94, align 4, !tbaa !40
  %97 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 1, i64 2
  %98 = load float, ptr %97, align 4, !tbaa !40
  %99 = getelementptr inbounds [3 x [3 x float]], ptr %56, i64 0, i64 1, i64 2
  %100 = load float, ptr %99, align 4, !tbaa !40
  %101 = getelementptr inbounds [3 x [3 x float]], ptr %63, i64 0, i64 1, i64 2
  %102 = load float, ptr %101, align 4, !tbaa !40
  %103 = fadd fast float %102, %100
  %104 = fmul fast float %98, 0x3FEAAAAAA0000000
  %105 = fmul fast float %103, 0x3FB5555560000000
  %106 = fadd fast float %105, %104
  %107 = fsub fast float %106, %98
  store float %106, ptr %97, align 4, !tbaa !40
  %108 = getelementptr inbounds [3 x float], ptr %49, i64 0, i64 2
  %109 = load float, ptr %108, align 4, !tbaa !40
  %110 = fadd fast float %107, %109
  store float %110, ptr %108, align 4, !tbaa !40
  %111 = getelementptr inbounds [3 x [3 x float]], ptr %49, i64 0, i64 2, i64 2
  %112 = load float, ptr %111, align 4, !tbaa !40
  %113 = fadd fast float %112, %107
  store float %113, ptr %111, align 4, !tbaa !40
  br label %114

114:                                              ; preds = %46, %48
  %115 = phi i64 [ %47, %46 ], [ %57, %48 ]
  %116 = phi i8 [ %41, %46 ], [ 1, %48 ]
  %117 = icmp eq i64 %115, %38
  br i1 %117, label %118, label %39, !llvm.loop !189

118:                                              ; preds = %114
  %119 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %119(ptr noundef %22) #20
  %120 = icmp eq i8 %116, 0
  br i1 %120, label %199, label %121

121:                                              ; preds = %118
  tail call void @BKE_nurb_handles_calc(ptr noundef nonnull %16) #20
  br label %199

122:                                              ; preds = %15
  %123 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 17
  %124 = load ptr, ptr %123, align 8, !tbaa !32
  %125 = icmp eq ptr %124, null
  br i1 %125, label %199, label %126

126:                                              ; preds = %122
  %127 = load ptr, ptr @MEM_dupallocN, align 8, !tbaa !36
  %128 = tail call ptr %127(ptr noundef nonnull %124) #20
  %129 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 13
  %130 = load i16, ptr %129, align 4, !tbaa !39
  %131 = and i16 %130, 1
  %132 = icmp eq i16 %131, 0
  %133 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 6
  %134 = load i32, ptr %133, align 8, !tbaa !23
  %135 = sext i1 %132 to i32
  %136 = add nsw i32 %134, %135
  %137 = zext i1 %132 to i32
  %138 = icmp sgt i32 %136, %137
  br i1 %138, label %139, label %197

139:                                              ; preds = %126
  %140 = load ptr, ptr %123, align 8, !tbaa !32
  %141 = zext i1 %132 to i64
  %142 = zext i32 %136 to i64
  br label %143

143:                                              ; preds = %139, %194
  %144 = phi i64 [ %141, %139 ], [ %195, %194 ]
  %145 = getelementptr inbounds %struct.BPoint, ptr %140, i64 %144, i32 3
  %146 = load i16, ptr %145, align 4, !tbaa !34
  %147 = and i16 %146, 1
  %148 = icmp eq i16 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %143
  %150 = add nuw nsw i64 %144, 1
  br label %194

151:                                              ; preds = %143
  %152 = getelementptr inbounds %struct.BPoint, ptr %140, i64 %144
  %153 = trunc i64 %144 to i32
  %154 = add i32 %153, -1
  %155 = srem i32 %154, %134
  %156 = add nsw i32 %155, %134
  %157 = srem i32 %156, %134
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.BPoint, ptr %128, i64 %158
  %160 = add nuw nsw i64 %144, 1
  %161 = trunc i64 %160 to i32
  %162 = srem i32 %161, %134
  %163 = add nsw i32 %162, %134
  %164 = srem i32 %163, %134
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds %struct.BPoint, ptr %128, i64 %165
  %167 = load float, ptr %152, align 4, !tbaa !40
  %168 = load float, ptr %159, align 4, !tbaa !40
  %169 = load float, ptr %166, align 4, !tbaa !40
  %170 = fadd fast float %169, %168
  %171 = fmul fast float %167, 0x3FEAAAAAA0000000
  %172 = fmul fast float %170, 0x3FB5555560000000
  %173 = fadd fast float %172, %171
  store float %173, ptr %152, align 4, !tbaa !40
  %174 = getelementptr inbounds [4 x float], ptr %152, i64 0, i64 1
  %175 = load float, ptr %174, align 4, !tbaa !40
  %176 = getelementptr inbounds [4 x float], ptr %159, i64 0, i64 1
  %177 = load float, ptr %176, align 4, !tbaa !40
  %178 = getelementptr inbounds [4 x float], ptr %166, i64 0, i64 1
  %179 = load float, ptr %178, align 4, !tbaa !40
  %180 = fadd fast float %179, %177
  %181 = fmul fast float %175, 0x3FEAAAAAA0000000
  %182 = fmul fast float %180, 0x3FB5555560000000
  %183 = fadd fast float %182, %181
  store float %183, ptr %174, align 4, !tbaa !40
  %184 = getelementptr inbounds [4 x float], ptr %152, i64 0, i64 2
  %185 = load float, ptr %184, align 4, !tbaa !40
  %186 = getelementptr inbounds [4 x float], ptr %159, i64 0, i64 2
  %187 = load float, ptr %186, align 4, !tbaa !40
  %188 = getelementptr inbounds [4 x float], ptr %166, i64 0, i64 2
  %189 = load float, ptr %188, align 4, !tbaa !40
  %190 = fadd fast float %189, %187
  %191 = fmul fast float %185, 0x3FEAAAAAA0000000
  %192 = fmul fast float %190, 0x3FB5555560000000
  %193 = fadd fast float %192, %191
  store float %193, ptr %184, align 4, !tbaa !40
  br label %194

194:                                              ; preds = %149, %151
  %195 = phi i64 [ %150, %149 ], [ %160, %151 ]
  %196 = icmp eq i64 %195, %142
  br i1 %196, label %197, label %143, !llvm.loop !190

197:                                              ; preds = %194, %126
  %198 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %198(ptr noundef %128) #20
  br label %199

199:                                              ; preds = %33, %118, %121, %197, %122
  %200 = load ptr, ptr %16, align 8, !tbaa !36
  %201 = icmp eq ptr %200, null
  br i1 %201, label %202, label %15, !llvm.loop !191

202:                                              ; preds = %199
  %203 = load ptr, ptr %9, align 8, !tbaa !17
  br label %204

204:                                              ; preds = %202, %2
  %205 = phi ptr [ %203, %202 ], [ %10, %2 ]
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %205) #20
  %206 = load ptr, ptr %9, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %206, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_smooth_weight(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.27, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.28, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.29, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_smooth_weight_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_smooth_weight_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  tail call fastcc void @curve_smooth_value(ptr noundef %16, i32 noundef 40, i32 noundef 20)
  %17 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %18) #20
  %19 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %19, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_smooth_radius(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.30, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.31, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.32, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_smooth_radius_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_smooth_radius_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  tail call fastcc void @curve_smooth_value(ptr noundef %16, i32 noundef 44, i32 noundef 28)
  %17 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %18) #20
  %19 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %19, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_smooth_tilt(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.33, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.34, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.35, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_smooth_tilt_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_smooth_tilt_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  tail call fastcc void @curve_smooth_value(ptr noundef %16, i32 noundef 36, i32 noundef 16)
  %17 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %18) #20
  %19 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %19, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: nofree nosync nounwind sspstrong uwtable
define dso_local void @selectend_nurb(ptr noundef readonly %0, i32 noundef %1, i8 noundef zeroext %2, i8 noundef zeroext %3) local_unnamed_addr #11 {
  %5 = icmp eq ptr %0, null
  br i1 %5, label %110, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %8 = load i16, ptr %7, align 8, !tbaa !5
  %9 = and i16 %8, -2
  %10 = icmp eq i16 %9, 2
  tail call void @llvm.assume(i1 %10)
  %11 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  %15 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 32
  store i32 -1, ptr %15, align 8, !tbaa !174
  %16 = load ptr, ptr %14, align 8, !tbaa !36
  %17 = icmp eq ptr %16, null
  br i1 %17, label %110, label %18

18:                                               ; preds = %6
  %19 = icmp eq i32 %1, 0
  %20 = icmp eq i8 %2, 0
  %21 = icmp eq i8 %3, 1
  br label %22

22:                                               ; preds = %18, %107
  %23 = phi ptr [ %16, %18 ], [ %108, %107 ]
  %24 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 2
  %25 = load i16, ptr %24, align 8, !tbaa !21
  %26 = icmp eq i16 %25, 1
  %27 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %28 = load i32, ptr %27, align 8, !tbaa !23
  br i1 %26, label %29, label %80

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 18
  %31 = load ptr, ptr %30, align 8, !tbaa !24
  %32 = add nsw i32 %28, -1
  %33 = select i1 %19, i32 %32, i32 0
  %34 = sext i32 %33 to i64
  %35 = icmp eq i32 %28, 0
  br i1 %35, label %107, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 10
  br i1 %20, label %38, label %55

38:                                               ; preds = %36
  %39 = load i8, ptr %37, align 2, !tbaa !127
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %107

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 7
  %43 = load i8, ptr %42, align 1, !tbaa !27
  %44 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 8
  %45 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 9
  %46 = load <2 x i8>, ptr %44, align 4, !tbaa !169
  %47 = or i8 %43, 1
  %48 = or <2 x i8> %46, <i8 1, i8 1>
  %49 = and i8 %43, -2
  %50 = and <2 x i8> %46, <i8 -2, i8 -2>
  %51 = select i1 %21, i8 %47, i8 %49
  %52 = select i1 %21, <2 x i8> %48, <2 x i8> %50
  store i8 %51, ptr %42, align 1
  %53 = extractelement <2 x i8> %52, i64 0
  store i8 %53, ptr %44, align 4
  %54 = extractelement <2 x i8> %52, i64 1
  store i8 %54, ptr %45, align 1, !tbaa !30
  br label %107

55:                                               ; preds = %36
  %56 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 8
  %57 = load i8, ptr %56, align 4, !tbaa !29
  %58 = and i8 %57, 1
  %59 = icmp eq i8 %58, 0
  %60 = load i8, ptr %37, align 2, !tbaa !127
  %61 = icmp eq i8 %60, 0
  br i1 %59, label %62, label %71

62:                                               ; preds = %55
  br i1 %61, label %63, label %107

63:                                               ; preds = %62
  %64 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 7
  %65 = load i8, ptr %64, align 1, !tbaa !27
  %66 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 9
  %67 = or i8 %65, 1
  store i8 %67, ptr %64, align 1, !tbaa !27
  %68 = or i8 %57, 1
  store i8 %68, ptr %56, align 4, !tbaa !29
  %69 = load i8, ptr %66, align 1, !tbaa !30
  %70 = or i8 %69, 1
  store i8 %70, ptr %66, align 1, !tbaa !30
  br label %107

71:                                               ; preds = %55
  br i1 %61, label %72, label %107

72:                                               ; preds = %71
  %73 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 7
  %74 = load i8, ptr %73, align 1, !tbaa !27
  %75 = getelementptr inbounds %struct.BezTriple, ptr %31, i64 %34, i32 9
  %76 = and i8 %74, -2
  store i8 %76, ptr %73, align 1, !tbaa !27
  %77 = and i8 %57, -2
  store i8 %77, ptr %56, align 4, !tbaa !29
  %78 = load i8, ptr %75, align 1, !tbaa !30
  %79 = and i8 %78, -2
  store i8 %79, ptr %75, align 1, !tbaa !30
  br label %107

80:                                               ; preds = %22
  %81 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 7
  %82 = load i32, ptr %81, align 4, !tbaa !31
  %83 = mul nsw i32 %82, %28
  %84 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %85 = load ptr, ptr %84, align 8, !tbaa !32
  %86 = add nsw i32 %83, -1
  %87 = select i1 %19, i32 %86, i32 0
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.BPoint, ptr %85, i64 %88, i32 4
  br label %90

90:                                               ; preds = %93, %80
  %91 = phi i32 [ %83, %80 ], [ %94, %93 ]
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %107, label %93

93:                                               ; preds = %90
  %94 = add nsw i32 %91, -1
  %95 = load i16, ptr %89, align 2, !tbaa !129
  %96 = icmp eq i16 %95, 0
  br i1 %96, label %97, label %90, !llvm.loop !192

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.BPoint, ptr %85, i64 %88, i32 3
  %99 = load i16, ptr %98, align 4, !tbaa !34
  br i1 %20, label %102, label %100

100:                                              ; preds = %97
  %101 = xor i16 %99, 1
  store i16 %101, ptr %98, align 4, !tbaa !34
  br label %107

102:                                              ; preds = %97
  br i1 %21, label %103, label %105

103:                                              ; preds = %102
  %104 = or i16 %99, 1
  store i16 %104, ptr %98, align 4, !tbaa !34
  br label %107

105:                                              ; preds = %102
  %106 = and i16 %99, -2
  store i16 %106, ptr %98, align 4, !tbaa !34
  br label %107

107:                                              ; preds = %90, %71, %62, %38, %29, %41, %63, %72, %100, %103, %105
  %108 = load ptr, ptr %23, align 8, !tbaa !36
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %22, !llvm.loop !193

110:                                              ; preds = %107, %6, %4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_de_select_first(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.36, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.37, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.38, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @de_select_first_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @de_select_first_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = load ptr, ptr inttoptr (i64 296 to ptr), align 8, !tbaa !17
  br label %77

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %9 = load i16, ptr %8, align 8, !tbaa !5
  %10 = and i16 %9, -2
  %11 = icmp eq i16 %10, 2
  tail call void @llvm.assume(i1 %11)
  %12 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !18
  %16 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 32
  store i32 -1, ptr %16, align 8, !tbaa !174
  %17 = load ptr, ptr %15, align 8, !tbaa !36
  %18 = icmp eq ptr %17, null
  br i1 %18, label %77, label %19

19:                                               ; preds = %7, %74
  %20 = phi ptr [ %75, %74 ], [ %17, %7 ]
  %21 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 2
  %22 = load i16, ptr %21, align 8, !tbaa !21
  %23 = icmp eq i16 %22, 1
  %24 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 6
  %25 = load i32, ptr %24, align 8, !tbaa !23
  br i1 %23, label %26, label %56

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 18
  %28 = load ptr, ptr %27, align 8, !tbaa !24
  %29 = icmp eq i32 %25, 0
  br i1 %29, label %74, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 10
  %32 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 8
  %33 = load i8, ptr %32, align 4, !tbaa !29
  %34 = and i8 %33, 1
  %35 = icmp eq i8 %34, 0
  %36 = load i8, ptr %31, align 2, !tbaa !127
  %37 = icmp eq i8 %36, 0
  br i1 %35, label %38, label %47

38:                                               ; preds = %30
  br i1 %37, label %39, label %74

39:                                               ; preds = %38
  %40 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 7
  %41 = load i8, ptr %40, align 1, !tbaa !27
  %42 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 9
  %43 = or i8 %41, 1
  store i8 %43, ptr %40, align 1, !tbaa !27
  %44 = or i8 %33, 1
  store i8 %44, ptr %32, align 4, !tbaa !29
  %45 = load i8, ptr %42, align 1, !tbaa !30
  %46 = or i8 %45, 1
  store i8 %46, ptr %42, align 1, !tbaa !30
  br label %74

47:                                               ; preds = %30
  br i1 %37, label %48, label %74

48:                                               ; preds = %47
  %49 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 7
  %50 = load i8, ptr %49, align 1, !tbaa !27
  %51 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 9
  %52 = and i8 %50, -2
  store i8 %52, ptr %49, align 1, !tbaa !27
  %53 = and i8 %33, -2
  store i8 %53, ptr %32, align 4, !tbaa !29
  %54 = load i8, ptr %51, align 1, !tbaa !30
  %55 = and i8 %54, -2
  store i8 %55, ptr %51, align 1, !tbaa !30
  br label %74

56:                                               ; preds = %19
  %57 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 7
  %58 = load i32, ptr %57, align 4, !tbaa !31
  %59 = mul nsw i32 %58, %25
  %60 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 17
  %61 = load ptr, ptr %60, align 8, !tbaa !32
  %62 = getelementptr inbounds %struct.BPoint, ptr %61, i64 0, i32 4
  br label %63

63:                                               ; preds = %66, %56
  %64 = phi i32 [ %59, %56 ], [ %67, %66 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %63
  %67 = add nsw i32 %64, -1
  %68 = load i16, ptr %62, align 2, !tbaa !129
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %70, label %63, !llvm.loop !192

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.BPoint, ptr %61, i64 0, i32 3
  %72 = load i16, ptr %71, align 4, !tbaa !34
  %73 = xor i16 %72, 1
  store i16 %73, ptr %71, align 4, !tbaa !34
  br label %74

74:                                               ; preds = %63, %70, %48, %47, %39, %38, %26
  %75 = load ptr, ptr %20, align 8, !tbaa !36
  %76 = icmp eq ptr %75, null
  br i1 %76, label %77, label %19, !llvm.loop !193

77:                                               ; preds = %74, %5, %7
  %78 = phi ptr [ %6, %5 ], [ %13, %7 ], [ %13, %74 ]
  %79 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %78) #20
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %80) #20
  ret i32 4
}

declare i32 @ED_operator_editcurve(ptr noundef) #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_de_select_last(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.39, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.40, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.41, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @de_select_last_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @de_select_last_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  tail call void @selectend_nurb(ptr noundef %3, i32 noundef 0, i8 noundef zeroext 1, i8 noundef zeroext 0)
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %5) #20
  %6 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %6) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_select_all(ptr noundef %0) local_unnamed_addr #5 {
  store ptr @.str.42, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.43, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.44, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @de_select_all_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  tail call void @WM_operator_properties_select_all(ptr noundef nonnull %0) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @de_select_all_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi ptr [ %12, %10 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %16 = load ptr, ptr %15, align 8, !tbaa !178
  %17 = tail call i32 @RNA_enum_get(ptr noundef %16, ptr noundef nonnull @.str.198) #20
  switch i32 %17, label %282 [
    i32 0, label %18
    i32 1, label %84
    i32 2, label %170
    i32 3, label %275
  ]

18:                                               ; preds = %13
  %19 = load ptr, ptr %14, align 8, !tbaa !36
  %20 = icmp eq ptr %19, null
  br i1 %20, label %84, label %21

21:                                               ; preds = %18, %81
  %22 = phi ptr [ %82, %81 ], [ %19, %18 ]
  %23 = getelementptr inbounds %struct.Nurb, ptr %22, i64 0, i32 2
  %24 = load i16, ptr %23, align 8, !tbaa !21
  %25 = icmp eq i16 %24, 1
  %26 = getelementptr inbounds %struct.Nurb, ptr %22, i64 0, i32 6
  %27 = load i32, ptr %26, align 8, !tbaa !23
  br i1 %25, label %28, label %58

28:                                               ; preds = %21
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %81, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.Nurb, ptr %22, i64 0, i32 18
  %32 = load ptr, ptr %31, align 8, !tbaa !24
  br label %33

33:                                               ; preds = %55, %30
  %34 = phi i32 [ %36, %55 ], [ %27, %30 ]
  %35 = phi ptr [ %56, %55 ], [ %32, %30 ]
  %36 = add nsw i32 %34, -1
  %37 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 10
  %38 = load i8, ptr %37, align 2, !tbaa !127
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %42 = load i8, ptr %41, align 1, !tbaa !27
  %43 = and i8 %42, 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %170

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 8
  %47 = load i8, ptr %46, align 4, !tbaa !29
  %48 = and i8 %47, 1
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %170

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %52 = load i8, ptr %51, align 1, !tbaa !30
  %53 = and i8 %52, 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %170

55:                                               ; preds = %50, %33
  %56 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 1
  %57 = icmp eq i32 %36, 0
  br i1 %57, label %81, label %33, !llvm.loop !194

58:                                               ; preds = %21
  %59 = getelementptr inbounds %struct.Nurb, ptr %22, i64 0, i32 7
  %60 = load i32, ptr %59, align 4, !tbaa !31
  %61 = mul nsw i32 %60, %27
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %81, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.Nurb, ptr %22, i64 0, i32 17
  %65 = load ptr, ptr %64, align 8, !tbaa !32
  br label %66

66:                                               ; preds = %78, %63
  %67 = phi i32 [ %69, %78 ], [ %61, %63 ]
  %68 = phi ptr [ %79, %78 ], [ %65, %63 ]
  %69 = add nsw i32 %67, -1
  %70 = getelementptr inbounds %struct.BPoint, ptr %68, i64 0, i32 4
  %71 = load i16, ptr %70, align 2, !tbaa !129
  %72 = icmp eq i16 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.BPoint, ptr %68, i64 0, i32 3
  %75 = load i16, ptr %74, align 4, !tbaa !34
  %76 = and i16 %75, 1
  %77 = icmp eq i16 %76, 0
  br i1 %77, label %78, label %170

78:                                               ; preds = %73, %66
  %79 = getelementptr inbounds %struct.BPoint, ptr %68, i64 1
  %80 = icmp eq i32 %69, 0
  br i1 %80, label %81, label %66, !llvm.loop !195

81:                                               ; preds = %78, %55, %58, %28
  %82 = load ptr, ptr %22, align 8, !tbaa !36
  %83 = icmp eq ptr %82, null
  br i1 %83, label %84, label %21, !llvm.loop !196

84:                                               ; preds = %81, %13, %18
  %85 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %86 = load ptr, ptr %85, align 8, !tbaa !18
  %87 = load ptr, ptr %86, align 8, !tbaa !36
  %88 = icmp eq ptr %87, null
  br i1 %88, label %282, label %89

89:                                               ; preds = %84, %167
  %90 = phi ptr [ %168, %167 ], [ %87, %84 ]
  %91 = getelementptr inbounds %struct.Nurb, ptr %90, i64 0, i32 18
  %92 = load ptr, ptr %91, align 8, !tbaa !24
  %93 = icmp eq ptr %92, null
  br i1 %93, label %118, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds %struct.Nurb, ptr %90, i64 0, i32 6
  %96 = load i32, ptr %95, align 8, !tbaa !23
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %167

98:                                               ; preds = %94, %114
  %99 = phi ptr [ %116, %114 ], [ %92, %94 ]
  %100 = phi i32 [ %115, %114 ], [ 0, %94 ]
  %101 = getelementptr inbounds %struct.BezTriple, ptr %99, i64 0, i32 10
  %102 = load i8, ptr %101, align 2, !tbaa !127
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %98
  %105 = getelementptr inbounds %struct.BezTriple, ptr %99, i64 0, i32 7
  %106 = load i8, ptr %105, align 1, !tbaa !27
  %107 = or i8 %106, 1
  store i8 %107, ptr %105, align 1, !tbaa !27
  %108 = getelementptr inbounds %struct.BezTriple, ptr %99, i64 0, i32 8
  %109 = load i8, ptr %108, align 4, !tbaa !29
  %110 = or i8 %109, 1
  store i8 %110, ptr %108, align 4, !tbaa !29
  %111 = getelementptr inbounds %struct.BezTriple, ptr %99, i64 0, i32 9
  %112 = load i8, ptr %111, align 1, !tbaa !30
  %113 = or i8 %112, 1
  store i8 %113, ptr %111, align 1, !tbaa !30
  br label %114

114:                                              ; preds = %104, %98
  %115 = add nuw nsw i32 %100, 1
  %116 = getelementptr inbounds %struct.BezTriple, ptr %99, i64 1
  %117 = icmp eq i32 %115, %96
  br i1 %117, label %167, label %98, !llvm.loop !128

118:                                              ; preds = %89
  %119 = getelementptr inbounds %struct.Nurb, ptr %90, i64 0, i32 17
  %120 = load ptr, ptr %119, align 8, !tbaa !32
  %121 = icmp eq ptr %120, null
  br i1 %121, label %167, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.Nurb, ptr %90, i64 0, i32 6
  %124 = load i32, ptr %123, align 8, !tbaa !23
  %125 = getelementptr inbounds %struct.Nurb, ptr %90, i64 0, i32 7
  %126 = load i32, ptr %125, align 4, !tbaa !31
  %127 = mul nsw i32 %126, %124
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %167

129:                                              ; preds = %122
  %130 = and i32 %127, 1
  %131 = icmp eq i32 %127, 1
  br i1 %131, label %156, label %132

132:                                              ; preds = %129
  %133 = and i32 %127, -2
  br label %134

134:                                              ; preds = %152, %132
  %135 = phi ptr [ %120, %132 ], [ %153, %152 ]
  %136 = phi i32 [ 0, %132 ], [ %154, %152 ]
  %137 = getelementptr inbounds %struct.BPoint, ptr %135, i64 0, i32 4
  %138 = load i16, ptr %137, align 2, !tbaa !129
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %134
  %141 = getelementptr inbounds %struct.BPoint, ptr %135, i64 0, i32 3
  %142 = load i16, ptr %141, align 4, !tbaa !34
  %143 = or i16 %142, 1
  store i16 %143, ptr %141, align 4, !tbaa !34
  br label %144

144:                                              ; preds = %140, %134
  %145 = getelementptr inbounds %struct.BPoint, ptr %135, i64 1, i32 4
  %146 = load i16, ptr %145, align 2, !tbaa !129
  %147 = icmp eq i16 %146, 0
  br i1 %147, label %148, label %152

148:                                              ; preds = %144
  %149 = getelementptr inbounds %struct.BPoint, ptr %135, i64 1, i32 3
  %150 = load i16, ptr %149, align 4, !tbaa !34
  %151 = or i16 %150, 1
  store i16 %151, ptr %149, align 4, !tbaa !34
  br label %152

152:                                              ; preds = %148, %144
  %153 = getelementptr inbounds %struct.BPoint, ptr %135, i64 2
  %154 = add i32 %136, 2
  %155 = icmp eq i32 %154, %133
  br i1 %155, label %156, label %134, !llvm.loop !130

156:                                              ; preds = %152, %129
  %157 = phi ptr [ %120, %129 ], [ %153, %152 ]
  %158 = icmp eq i32 %130, 0
  br i1 %158, label %167, label %159

159:                                              ; preds = %156
  %160 = getelementptr inbounds %struct.BPoint, ptr %157, i64 0, i32 4
  %161 = load i16, ptr %160, align 2, !tbaa !129
  %162 = icmp eq i16 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %159
  %164 = getelementptr inbounds %struct.BPoint, ptr %157, i64 0, i32 3
  %165 = load i16, ptr %164, align 4, !tbaa !34
  %166 = or i16 %165, 1
  store i16 %166, ptr %164, align 4, !tbaa !34
  br label %167

167:                                              ; preds = %114, %156, %163, %159, %122, %118, %94
  %168 = load ptr, ptr %90, align 8, !tbaa !36
  %169 = icmp eq ptr %168, null
  br i1 %169, label %282, label %89, !llvm.loop !131

170:                                              ; preds = %73, %50, %45, %40, %13
  %171 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %172 = load ptr, ptr %171, align 8, !tbaa !18
  %173 = load ptr, ptr %172, align 8, !tbaa !36
  %174 = icmp eq ptr %173, null
  br i1 %174, label %282, label %175

175:                                              ; preds = %170, %272
  %176 = phi ptr [ %273, %272 ], [ %173, %170 ]
  %177 = getelementptr inbounds %struct.Nurb, ptr %176, i64 0, i32 18
  %178 = load ptr, ptr %177, align 8, !tbaa !24
  %179 = icmp eq ptr %178, null
  br i1 %179, label %213, label %180

180:                                              ; preds = %175
  %181 = getelementptr inbounds %struct.Nurb, ptr %176, i64 0, i32 6
  %182 = load i32, ptr %181, align 8, !tbaa !23
  %183 = icmp sgt i32 %182, 0
  br i1 %183, label %184, label %272

184:                                              ; preds = %180
  %185 = and i32 %182, 1
  %186 = icmp eq i32 %182, 1
  br i1 %186, label %259, label %187

187:                                              ; preds = %184
  %188 = and i32 %182, -2
  br label %189

189:                                              ; preds = %189, %187
  %190 = phi ptr [ %178, %187 ], [ %210, %189 ]
  %191 = phi i32 [ 0, %187 ], [ %211, %189 ]
  %192 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 0, i32 7
  %193 = load i8, ptr %192, align 1, !tbaa !27
  %194 = and i8 %193, -2
  store i8 %194, ptr %192, align 1, !tbaa !27
  %195 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 0, i32 8
  %196 = load i8, ptr %195, align 4, !tbaa !29
  %197 = and i8 %196, -2
  store i8 %197, ptr %195, align 4, !tbaa !29
  %198 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 0, i32 9
  %199 = load i8, ptr %198, align 1, !tbaa !30
  %200 = and i8 %199, -2
  store i8 %200, ptr %198, align 1, !tbaa !30
  %201 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 1, i32 7
  %202 = load i8, ptr %201, align 1, !tbaa !27
  %203 = and i8 %202, -2
  store i8 %203, ptr %201, align 1, !tbaa !27
  %204 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 1, i32 8
  %205 = load i8, ptr %204, align 4, !tbaa !29
  %206 = and i8 %205, -2
  store i8 %206, ptr %204, align 4, !tbaa !29
  %207 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 1, i32 9
  %208 = load i8, ptr %207, align 1, !tbaa !30
  %209 = and i8 %208, -2
  store i8 %209, ptr %207, align 1, !tbaa !30
  %210 = getelementptr inbounds %struct.BezTriple, ptr %190, i64 2
  %211 = add i32 %191, 2
  %212 = icmp eq i32 %211, %188
  br i1 %212, label %259, label %189, !llvm.loop !122

213:                                              ; preds = %175
  %214 = getelementptr inbounds %struct.Nurb, ptr %176, i64 0, i32 17
  %215 = load ptr, ptr %214, align 8, !tbaa !32
  %216 = icmp eq ptr %215, null
  br i1 %216, label %272, label %217

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.Nurb, ptr %176, i64 0, i32 6
  %219 = load i32, ptr %218, align 8, !tbaa !23
  %220 = getelementptr inbounds %struct.Nurb, ptr %176, i64 0, i32 7
  %221 = load i32, ptr %220, align 4, !tbaa !31
  %222 = mul nsw i32 %221, %219
  %223 = icmp sgt i32 %222, 0
  br i1 %223, label %224, label %272

224:                                              ; preds = %217
  %225 = and i32 %222, 3
  %226 = icmp ult i32 %222, 4
  br i1 %226, label %247, label %227

227:                                              ; preds = %224
  %228 = and i32 %222, -4
  br label %229

229:                                              ; preds = %229, %227
  %230 = phi ptr [ %215, %227 ], [ %244, %229 ]
  %231 = phi i32 [ 0, %227 ], [ %245, %229 ]
  %232 = getelementptr inbounds %struct.BPoint, ptr %230, i64 0, i32 3
  %233 = load i16, ptr %232, align 4, !tbaa !34
  %234 = and i16 %233, -2
  store i16 %234, ptr %232, align 4, !tbaa !34
  %235 = getelementptr inbounds %struct.BPoint, ptr %230, i64 1, i32 3
  %236 = load i16, ptr %235, align 4, !tbaa !34
  %237 = and i16 %236, -2
  store i16 %237, ptr %235, align 4, !tbaa !34
  %238 = getelementptr inbounds %struct.BPoint, ptr %230, i64 2, i32 3
  %239 = load i16, ptr %238, align 4, !tbaa !34
  %240 = and i16 %239, -2
  store i16 %240, ptr %238, align 4, !tbaa !34
  %241 = getelementptr inbounds %struct.BPoint, ptr %230, i64 3, i32 3
  %242 = load i16, ptr %241, align 4, !tbaa !34
  %243 = and i16 %242, -2
  store i16 %243, ptr %241, align 4, !tbaa !34
  %244 = getelementptr inbounds %struct.BPoint, ptr %230, i64 4
  %245 = add i32 %231, 4
  %246 = icmp eq i32 %245, %228
  br i1 %246, label %247, label %229, !llvm.loop !123

247:                                              ; preds = %229, %224
  %248 = phi ptr [ %215, %224 ], [ %244, %229 ]
  %249 = icmp eq i32 %225, 0
  br i1 %249, label %272, label %250

250:                                              ; preds = %247, %250
  %251 = phi ptr [ %256, %250 ], [ %248, %247 ]
  %252 = phi i32 [ %257, %250 ], [ 0, %247 ]
  %253 = getelementptr inbounds %struct.BPoint, ptr %251, i64 0, i32 3
  %254 = load i16, ptr %253, align 4, !tbaa !34
  %255 = and i16 %254, -2
  store i16 %255, ptr %253, align 4, !tbaa !34
  %256 = getelementptr inbounds %struct.BPoint, ptr %251, i64 1
  %257 = add i32 %252, 1
  %258 = icmp eq i32 %257, %225
  br i1 %258, label %272, label %250, !llvm.loop !197

259:                                              ; preds = %189, %184
  %260 = phi ptr [ %178, %184 ], [ %210, %189 ]
  %261 = icmp eq i32 %185, 0
  br i1 %261, label %272, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds %struct.BezTriple, ptr %260, i64 0, i32 7
  %264 = load i8, ptr %263, align 1, !tbaa !27
  %265 = and i8 %264, -2
  store i8 %265, ptr %263, align 1, !tbaa !27
  %266 = getelementptr inbounds %struct.BezTriple, ptr %260, i64 0, i32 8
  %267 = load i8, ptr %266, align 4, !tbaa !29
  %268 = and i8 %267, -2
  store i8 %268, ptr %266, align 4, !tbaa !29
  %269 = getelementptr inbounds %struct.BezTriple, ptr %260, i64 0, i32 9
  %270 = load i8, ptr %269, align 1, !tbaa !30
  %271 = and i8 %270, -2
  store i8 %271, ptr %269, align 1, !tbaa !30
  br label %272

272:                                              ; preds = %262, %259, %247, %250, %217, %213, %180
  %273 = load ptr, ptr %176, align 8, !tbaa !36
  %274 = icmp eq ptr %273, null
  br i1 %274, label %282, label %175, !llvm.loop !126

275:                                              ; preds = %13
  %276 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %277 = load ptr, ptr %276, align 8, !tbaa !18
  %278 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 16
  %279 = load i16, ptr %278, align 8, !tbaa !198
  %280 = trunc i16 %279 to i8
  %281 = and i8 %280, 1
  tail call void @ED_curve_select_swap(ptr noundef %277, i8 noundef zeroext %281)
  br label %282

282:                                              ; preds = %272, %167, %13, %170, %84, %275
  %283 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %283) #20
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %5) #20
  ret i32 4
}

declare void @WM_operator_properties_select_all(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_hide(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.45, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.46, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.47, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @hide_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_boolean(ptr noundef %8, ptr noundef nonnull @.str.48, i32 noundef 0, ptr noundef nonnull @.str.49, ptr noundef nonnull @.str.50) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @hide_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi ptr [ %12, %10 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %16 = load ptr, ptr %15, align 8, !tbaa !178
  %17 = tail call i32 @RNA_boolean_get(ptr noundef %16, ptr noundef nonnull @.str.48) #20
  %18 = load ptr, ptr %14, align 8, !tbaa !36
  %19 = icmp eq ptr %18, null
  br i1 %19, label %185, label %20

20:                                               ; preds = %13
  %21 = and i32 %17, 255
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 16
  br label %24

24:                                               ; preds = %20, %182
  %25 = phi ptr [ %18, %20 ], [ %183, %182 ]
  %26 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 2
  %27 = load i16, ptr %26, align 8, !tbaa !21
  %28 = icmp eq i16 %27, 1
  %29 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 6
  %30 = load i32, ptr %29, align 8, !tbaa !23
  br i1 %28, label %31, label %126

31:                                               ; preds = %24
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %123, label %33

33:                                               ; preds = %31
  %34 = add nsw i32 %30, -1
  %35 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 18
  %36 = load ptr, ptr %35, align 8, !tbaa !24
  %37 = load i16, ptr %23, align 8, !tbaa !198
  %38 = and i16 %37, 1
  %39 = icmp eq i16 %38, 0
  br i1 %22, label %40, label %79

40:                                               ; preds = %33, %70
  %41 = phi i32 [ %77, %70 ], [ %34, %33 ]
  %42 = phi i32 [ %75, %70 ], [ 0, %33 ]
  %43 = phi ptr [ %76, %70 ], [ %36, %33 ]
  %44 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 8
  %45 = load i8, ptr %44, align 4, !tbaa !29
  %46 = and i8 %45, 1
  %47 = icmp eq i8 %46, 0
  br i1 %39, label %49, label %48

48:                                               ; preds = %40
  br i1 %47, label %70, label %60

49:                                               ; preds = %40
  br i1 %47, label %50, label %60

50:                                               ; preds = %49
  %51 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 7
  %52 = load i8, ptr %51, align 1, !tbaa !27
  %53 = and i8 %52, 1
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 9
  %57 = load i8, ptr %56, align 1, !tbaa !30
  %58 = and i8 %57, 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %55, %50, %49, %48
  %61 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 10
  %62 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 7
  %63 = load i8, ptr %62, align 1, !tbaa !27
  %64 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 8
  %65 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 9
  %66 = and i8 %63, -2
  store i8 %66, ptr %62, align 1, !tbaa !27
  %67 = and i8 %45, -2
  store i8 %67, ptr %64, align 4, !tbaa !29
  %68 = load i8, ptr %65, align 1, !tbaa !30
  %69 = and i8 %68, -2
  store i8 %69, ptr %65, align 1, !tbaa !30
  store i8 1, ptr %61, align 2, !tbaa !127
  br label %70

70:                                               ; preds = %60, %55, %48
  %71 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 0, i32 10
  %72 = load i8, ptr %71, align 2, !tbaa !127
  %73 = icmp ne i8 %72, 0
  %74 = zext i1 %73 to i32
  %75 = add nuw nsw i32 %42, %74
  %76 = getelementptr inbounds %struct.BezTriple, ptr %43, i64 1
  %77 = add nsw i32 %41, -1
  %78 = icmp eq i32 %41, 0
  br i1 %78, label %123, label %40, !llvm.loop !199

79:                                               ; preds = %33, %114
  %80 = phi i32 [ %121, %114 ], [ %34, %33 ]
  %81 = phi i32 [ %119, %114 ], [ 0, %33 ]
  %82 = phi ptr [ %120, %114 ], [ %36, %33 ]
  %83 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 8
  %84 = load i8, ptr %83, align 4, !tbaa !29
  %85 = and i8 %84, 1
  %86 = icmp eq i8 %85, 0
  br i1 %39, label %93, label %87

87:                                               ; preds = %79
  br i1 %86, label %88, label %114

88:                                               ; preds = %87
  %89 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 7
  %90 = load i8, ptr %89, align 1, !tbaa !27
  %91 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 9
  %92 = load i8, ptr %91, align 1, !tbaa !30
  br label %104

93:                                               ; preds = %79
  br i1 %86, label %94, label %114

94:                                               ; preds = %93
  %95 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 7
  %96 = load i8, ptr %95, align 1, !tbaa !27
  %97 = and i8 %96, 1
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %114

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 9
  %101 = load i8, ptr %100, align 1, !tbaa !30
  %102 = and i8 %101, 1
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %88, %99
  %105 = phi i8 [ %92, %88 ], [ %101, %99 ]
  %106 = phi i8 [ %90, %88 ], [ %96, %99 ]
  %107 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 10
  %108 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 7
  %109 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 8
  %110 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 9
  %111 = and i8 %106, -2
  store i8 %111, ptr %108, align 1, !tbaa !27
  %112 = and i8 %84, -2
  store i8 %112, ptr %109, align 4, !tbaa !29
  %113 = and i8 %105, -2
  store i8 %113, ptr %110, align 1, !tbaa !30
  store i8 1, ptr %107, align 2, !tbaa !127
  br label %114

114:                                              ; preds = %87, %93, %94, %99, %104
  %115 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 0, i32 10
  %116 = load i8, ptr %115, align 2, !tbaa !127
  %117 = icmp ne i8 %116, 0
  %118 = zext i1 %117 to i32
  %119 = add nuw nsw i32 %81, %118
  %120 = getelementptr inbounds %struct.BezTriple, ptr %82, i64 1
  %121 = add nsw i32 %80, -1
  %122 = icmp eq i32 %80, 0
  br i1 %122, label %123, label %79, !llvm.loop !199

123:                                              ; preds = %114, %70, %31
  %124 = phi i32 [ 0, %31 ], [ %75, %70 ], [ %119, %114 ]
  %125 = icmp eq i32 %124, %30
  br i1 %125, label %180, label %182

126:                                              ; preds = %24
  %127 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %128 = load i32, ptr %127, align 4, !tbaa !31
  %129 = mul nsw i32 %128, %30
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %177, label %131

131:                                              ; preds = %126
  %132 = add nsw i32 %129, -1
  %133 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %134 = load ptr, ptr %133, align 8, !tbaa !32
  br i1 %22, label %135, label %156

135:                                              ; preds = %131, %148
  %136 = phi i32 [ %154, %148 ], [ %132, %131 ]
  %137 = phi i32 [ %152, %148 ], [ 0, %131 ]
  %138 = phi ptr [ %153, %148 ], [ %134, %131 ]
  %139 = getelementptr inbounds %struct.BPoint, ptr %138, i64 0, i32 3
  %140 = load i16, ptr %139, align 4, !tbaa !34
  %141 = and i16 %140, 1
  %142 = icmp eq i16 %141, 0
  %143 = getelementptr inbounds %struct.BPoint, ptr %138, i64 0, i32 4
  br i1 %142, label %144, label %146

144:                                              ; preds = %135
  %145 = load i16, ptr %143, align 2, !tbaa !129
  br label %148

146:                                              ; preds = %135
  %147 = and i16 %140, -2
  store i16 %147, ptr %139, align 4, !tbaa !34
  store i16 1, ptr %143, align 2, !tbaa !129
  br label %148

148:                                              ; preds = %144, %146
  %149 = phi i16 [ %145, %144 ], [ 1, %146 ]
  %150 = icmp ne i16 %149, 0
  %151 = zext i1 %150 to i32
  %152 = add nuw nsw i32 %137, %151
  %153 = getelementptr inbounds %struct.BPoint, ptr %138, i64 1
  %154 = add nsw i32 %136, -1
  %155 = icmp eq i32 %136, 0
  br i1 %155, label %177, label %135, !llvm.loop !200

156:                                              ; preds = %131, %169
  %157 = phi i32 [ %175, %169 ], [ %132, %131 ]
  %158 = phi i32 [ %173, %169 ], [ 0, %131 ]
  %159 = phi ptr [ %174, %169 ], [ %134, %131 ]
  %160 = getelementptr inbounds %struct.BPoint, ptr %159, i64 0, i32 3
  %161 = load i16, ptr %160, align 4, !tbaa !34
  %162 = and i16 %161, 1
  %163 = icmp eq i16 %162, 0
  %164 = getelementptr inbounds %struct.BPoint, ptr %159, i64 0, i32 4
  br i1 %163, label %167, label %165

165:                                              ; preds = %156
  %166 = load i16, ptr %164, align 2, !tbaa !129
  br label %169

167:                                              ; preds = %156
  %168 = and i16 %161, -2
  store i16 %168, ptr %160, align 4, !tbaa !34
  store i16 1, ptr %164, align 2, !tbaa !129
  br label %169

169:                                              ; preds = %165, %167
  %170 = phi i16 [ %166, %165 ], [ 1, %167 ]
  %171 = icmp ne i16 %170, 0
  %172 = zext i1 %171 to i32
  %173 = add nuw nsw i32 %158, %172
  %174 = getelementptr inbounds %struct.BPoint, ptr %159, i64 1
  %175 = add nsw i32 %157, -1
  %176 = icmp eq i32 %157, 0
  br i1 %176, label %177, label %156, !llvm.loop !200

177:                                              ; preds = %169, %148, %126
  %178 = phi i32 [ 0, %126 ], [ %152, %148 ], [ %173, %169 ]
  %179 = icmp eq i32 %178, %129
  br i1 %179, label %180, label %182

180:                                              ; preds = %177, %123
  %181 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 4
  store i16 1, ptr %181, align 4, !tbaa !201
  br label %182

182:                                              ; preds = %180, %123, %177
  %183 = load ptr, ptr %25, align 8, !tbaa !36
  %184 = icmp eq ptr %183, null
  br i1 %184, label %185, label %24, !llvm.loop !202

185:                                              ; preds = %182, %13
  %186 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %186, i16 noundef signext 0) #20
  %187 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %187) #20
  %188 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %188) #20
  ret i32 4
}

declare ptr @RNA_def_boolean(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_reveal(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.51, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.52, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.53, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @reveal_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @reveal_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp ne ptr %3, null
  tail call void @llvm.assume(i1 %4)
  %5 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %6 = load i16, ptr %5, align 8, !tbaa !5
  %7 = and i16 %6, -2
  %8 = icmp eq i16 %7, 2
  tail call void @llvm.assume(i1 %8)
  %9 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  %13 = load ptr, ptr %12, align 8, !tbaa !36
  %14 = icmp eq ptr %13, null
  br i1 %14, label %98, label %15

15:                                               ; preds = %2, %95
  %16 = phi ptr [ %96, %95 ], [ %13, %2 ]
  %17 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 4
  store i16 0, ptr %17, align 4, !tbaa !201
  %18 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 2
  %19 = load i16, ptr %18, align 8, !tbaa !21
  %20 = icmp eq i16 %19, 1
  %21 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 6
  %22 = load i32, ptr %21, align 8, !tbaa !23
  br i1 %20, label %23, label %48

23:                                               ; preds = %15
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %95, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 18
  %27 = load ptr, ptr %26, align 8, !tbaa !24
  br label %28

28:                                               ; preds = %25, %45
  %29 = phi i32 [ %31, %45 ], [ %22, %25 ]
  %30 = phi ptr [ %46, %45 ], [ %27, %25 ]
  %31 = add nsw i32 %29, -1
  %32 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 10
  %33 = load i8, ptr %32, align 2, !tbaa !127
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %45, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 7
  %37 = load i8, ptr %36, align 1, !tbaa !27
  %38 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 8
  %39 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 0, i32 9
  %40 = or i8 %37, 1
  store i8 %40, ptr %36, align 1, !tbaa !27
  %41 = load i8, ptr %38, align 4, !tbaa !29
  %42 = or i8 %41, 1
  store i8 %42, ptr %38, align 4, !tbaa !29
  %43 = load i8, ptr %39, align 1, !tbaa !30
  %44 = or i8 %43, 1
  store i8 %44, ptr %39, align 1, !tbaa !30
  store i8 0, ptr %32, align 2, !tbaa !127
  br label %45

45:                                               ; preds = %35, %28
  %46 = getelementptr inbounds %struct.BezTriple, ptr %30, i64 1
  %47 = icmp eq i32 %31, 0
  br i1 %47, label %95, label %28, !llvm.loop !203

48:                                               ; preds = %15
  %49 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 7
  %50 = load i32, ptr %49, align 4, !tbaa !31
  %51 = mul nsw i32 %50, %22
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %95, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.Nurb, ptr %16, i64 0, i32 17
  %55 = load ptr, ptr %54, align 8, !tbaa !32
  %56 = and i32 %51, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %53
  %59 = add nsw i32 %51, -1
  %60 = getelementptr inbounds %struct.BPoint, ptr %55, i64 0, i32 4
  %61 = load i16, ptr %60, align 2, !tbaa !129
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.BPoint, ptr %55, i64 0, i32 3
  %65 = load i16, ptr %64, align 4, !tbaa !34
  %66 = or i16 %65, 1
  store i16 %66, ptr %64, align 4, !tbaa !34
  store i16 0, ptr %60, align 2, !tbaa !129
  br label %67

67:                                               ; preds = %63, %58
  %68 = getelementptr inbounds %struct.BPoint, ptr %55, i64 1
  br label %69

69:                                               ; preds = %67, %53
  %70 = phi i32 [ %51, %53 ], [ %59, %67 ]
  %71 = phi ptr [ %55, %53 ], [ %68, %67 ]
  %72 = icmp eq i32 %51, 1
  br i1 %72, label %95, label %73

73:                                               ; preds = %69, %92
  %74 = phi i32 [ %84, %92 ], [ %70, %69 ]
  %75 = phi ptr [ %93, %92 ], [ %71, %69 ]
  %76 = getelementptr inbounds %struct.BPoint, ptr %75, i64 0, i32 4
  %77 = load i16, ptr %76, align 2, !tbaa !129
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.BPoint, ptr %75, i64 0, i32 3
  %81 = load i16, ptr %80, align 4, !tbaa !34
  %82 = or i16 %81, 1
  store i16 %82, ptr %80, align 4, !tbaa !34
  store i16 0, ptr %76, align 2, !tbaa !129
  br label %83

83:                                               ; preds = %79, %73
  %84 = add nsw i32 %74, -2
  %85 = getelementptr inbounds %struct.BPoint, ptr %75, i64 1, i32 4
  %86 = load i16, ptr %85, align 2, !tbaa !129
  %87 = icmp eq i16 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.BPoint, ptr %75, i64 1, i32 3
  %90 = load i16, ptr %89, align 4, !tbaa !34
  %91 = or i16 %90, 1
  store i16 %91, ptr %89, align 4, !tbaa !34
  store i16 0, ptr %85, align 2, !tbaa !129
  br label %92

92:                                               ; preds = %88, %83
  %93 = getelementptr inbounds %struct.BPoint, ptr %75, i64 2
  %94 = icmp eq i32 %84, 0
  br i1 %94, label %95, label %73, !llvm.loop !204

95:                                               ; preds = %69, %92, %45, %48, %23
  %96 = load ptr, ptr %16, align 8, !tbaa !36
  %97 = icmp eq ptr %96, null
  br i1 %97, label %98, label %15, !llvm.loop !205

98:                                               ; preds = %95, %2
  tail call void @DAG_id_tag_update(ptr noundef %10, i16 noundef signext 0) #20
  %99 = load ptr, ptr %9, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %99) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_subdivide(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.54, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.55, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.56, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @subdivide_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_int(ptr noundef %8, ptr noundef nonnull @.str.57, i32 noundef 1, i32 noundef 1, i32 noundef 2147483647, ptr noundef nonnull @.str.58, ptr noundef nonnull @.str.18, i32 noundef 1, i32 noundef 10) #20
  tail call void @RNA_def_property_flag(ptr noundef %9, i32 noundef 268435456) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @subdivide_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca [15 x float], align 16
  %4 = alloca [3 x [3 x float]], align 16
  %5 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %6 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !178
  %8 = tail call i32 @RNA_int_get(ptr noundef %7, ptr noundef nonnull @.str.57) #20
  %9 = getelementptr i8, ptr %5, i64 296
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 60, ptr nonnull %3) #20
  %13 = load ptr, ptr %12, align 8, !tbaa !36
  %14 = icmp eq ptr %13, null
  br i1 %14, label %967, label %15

15:                                               ; preds = %2
  %16 = getelementptr %struct.EditNurb, ptr %12, i64 0, i32 1
  %17 = icmp slt i32 %8, 1
  %18 = add nsw i32 %8, 1
  %19 = sitofp i32 %18 to float
  %20 = icmp sgt i32 %8, 0
  %21 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 16
  %22 = getelementptr inbounds [3 x [3 x float]], ptr %4, i64 0, i64 1
  %23 = getelementptr inbounds [3 x [3 x float]], ptr %4, i64 0, i64 2
  %24 = getelementptr inbounds float, ptr %3, i64 3
  %25 = getelementptr inbounds float, ptr %3, i64 6
  %26 = getelementptr inbounds float, ptr %3, i64 9
  %27 = getelementptr inbounds float, ptr %3, i64 12
  %28 = getelementptr inbounds float, ptr %3, i64 1
  %29 = getelementptr inbounds float, ptr %3, i64 2
  %30 = getelementptr inbounds float, ptr %3, i64 10
  %31 = getelementptr inbounds float, ptr %3, i64 11
  %32 = getelementptr inbounds float, ptr %3, i64 13
  %33 = getelementptr inbounds float, ptr %3, i64 14
  %34 = add i32 %8, -1
  %35 = getelementptr inbounds float, ptr %3, i64 7
  %36 = getelementptr inbounds float, ptr %3, i64 8
  %37 = zext i32 %34 to i64
  %38 = mul nsw i64 %37, -36
  %39 = add nsw i64 %38, -36
  %40 = insertelement <8 x i32> poison, i32 %8, i64 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> poison, <8 x i32> zeroinitializer
  %42 = fdiv fast float 1.000000e+00, %19
  %43 = insertelement <8 x i32> poison, i32 %8, i64 0
  %44 = shufflevector <8 x i32> %43, <8 x i32> poison, <8 x i32> zeroinitializer
  %45 = fdiv fast float 1.000000e+00, %19
  %46 = fdiv fast float 1.000000e+00, %19
  %47 = fdiv fast float 1.000000e+00, %19
  %48 = fdiv fast float 1.000000e+00, %19
  br label %49

49:                                               ; preds = %964, %15
  %50 = phi ptr [ %13, %15 ], [ %965, %964 ]
  %51 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 2
  %52 = load i16, ptr %51, align 8, !tbaa !21
  %53 = icmp eq i16 %52, 1
  br i1 %53, label %54, label %248

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 6
  %56 = load i32, ptr %55, align 8, !tbaa !23
  %57 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 18
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %964, label %59

59:                                               ; preds = %54
  %60 = load ptr, ptr %57, align 8, !tbaa !24
  br label %61

61:                                               ; preds = %110, %59
  %62 = phi i32 [ %65, %110 ], [ %56, %59 ]
  %63 = phi ptr [ %112, %110 ], [ %60, %59 ]
  %64 = phi i32 [ %111, %110 ], [ 0, %59 ]
  %65 = add nsw i32 %62, -1
  %66 = call ptr @BKE_nurb_bezt_get_next(ptr noundef nonnull %50, ptr noundef %63) #20
  %67 = icmp eq ptr %66, null
  br i1 %67, label %114, label %68

68:                                               ; preds = %61
  %69 = load i16, ptr %21, align 8, !tbaa !198
  %70 = and i16 %69, 1
  %71 = icmp eq i16 %70, 0
  %72 = getelementptr inbounds %struct.BezTriple, ptr %63, i64 0, i32 8
  %73 = load i8, ptr %72, align 4, !tbaa !29
  %74 = and i8 %73, 1
  %75 = icmp eq i8 %74, 0
  br i1 %71, label %77, label %76

76:                                               ; preds = %68
  br i1 %75, label %110, label %88

77:                                               ; preds = %68
  br i1 %75, label %78, label %93

78:                                               ; preds = %77
  %79 = getelementptr inbounds %struct.BezTriple, ptr %63, i64 0, i32 7
  %80 = load i8, ptr %79, align 1, !tbaa !27
  %81 = and i8 %80, 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %93

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.BezTriple, ptr %63, i64 0, i32 9
  %85 = load i8, ptr %84, align 1, !tbaa !30
  %86 = and i8 %85, 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %110, label %93

88:                                               ; preds = %76
  %89 = getelementptr inbounds %struct.BezTriple, ptr %66, i64 0, i32 8
  %90 = load i8, ptr %89, align 4, !tbaa !29
  %91 = and i8 %90, 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %110, label %108

93:                                               ; preds = %83, %78, %77
  %94 = getelementptr inbounds %struct.BezTriple, ptr %66, i64 0, i32 8
  %95 = load i8, ptr %94, align 4, !tbaa !29
  %96 = and i8 %95, 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %108

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.BezTriple, ptr %66, i64 0, i32 7
  %100 = load i8, ptr %99, align 1, !tbaa !27
  %101 = and i8 %100, 1
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %108

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.BezTriple, ptr %66, i64 0, i32 9
  %105 = load i8, ptr %104, align 1, !tbaa !30
  %106 = and i8 %105, 1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %110, label %108

108:                                              ; preds = %103, %98, %93, %88
  %109 = add nsw i32 %64, %8
  br label %110

110:                                              ; preds = %108, %103, %88, %83, %76
  %111 = phi i32 [ %109, %108 ], [ %64, %88 ], [ %64, %103 ], [ %64, %76 ], [ %64, %83 ]
  %112 = getelementptr inbounds %struct.BezTriple, ptr %63, i64 1
  %113 = icmp eq i32 %65, 0
  br i1 %113, label %114, label %61, !llvm.loop !206

114:                                              ; preds = %110, %61
  %115 = phi i32 [ %111, %110 ], [ %64, %61 ]
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %964, label %117

117:                                              ; preds = %114
  %118 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %119 = load i32, ptr %55, align 8, !tbaa !23
  %120 = add nsw i32 %119, %115
  %121 = sext i32 %120 to i64
  %122 = mul nsw i64 %121, 72
  %123 = call ptr %118(i64 noundef %122, ptr noundef nonnull @.str.199) #20
  %124 = load i32, ptr %55, align 8, !tbaa !23
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %243, label %126

126:                                              ; preds = %117
  %127 = load ptr, ptr %57, align 8, !tbaa !24
  %128 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 13
  br label %129

129:                                              ; preds = %239, %126
  %130 = phi i32 [ %124, %126 ], [ %133, %239 ]
  %131 = phi ptr [ %127, %126 ], [ %241, %239 ]
  %132 = phi ptr [ %123, %126 ], [ %240, %239 ]
  %133 = add nsw i32 %130, -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %132, ptr noundef nonnull align 4 dereferenceable(72) %131, i64 72, i1 false)
  %134 = load ptr, ptr %16, align 8, !tbaa !47
  %135 = icmp eq ptr %134, null
  br i1 %135, label %141, label %136

136:                                              ; preds = %129
  %137 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %134, ptr noundef nonnull %131, ptr noundef null) #20
  %138 = icmp eq ptr %137, null
  br i1 %138, label %141, label %139

139:                                              ; preds = %136
  %140 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %140, ptr noundef nonnull %132, ptr noundef nonnull %137) #20
  br label %141

141:                                              ; preds = %139, %136, %129
  %142 = getelementptr inbounds %struct.BezTriple, ptr %132, i64 1
  %143 = call ptr @BKE_nurb_bezt_get_next(ptr noundef nonnull %50, ptr noundef nonnull %131) #20
  %144 = icmp eq ptr %143, null
  br i1 %144, label %243, label %145

145:                                              ; preds = %141
  %146 = load i16, ptr %21, align 8, !tbaa !198
  %147 = and i16 %146, 1
  %148 = icmp eq i16 %147, 0
  %149 = getelementptr inbounds %struct.BezTriple, ptr %131, i64 0, i32 8
  %150 = load i8, ptr %149, align 4, !tbaa !29
  %151 = and i8 %150, 1
  %152 = icmp eq i8 %151, 0
  br i1 %148, label %154, label %153

153:                                              ; preds = %145
  br i1 %152, label %239, label %165

154:                                              ; preds = %145
  br i1 %152, label %155, label %170

155:                                              ; preds = %154
  %156 = getelementptr inbounds %struct.BezTriple, ptr %131, i64 0, i32 7
  %157 = load i8, ptr %156, align 1, !tbaa !27
  %158 = and i8 %157, 1
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %170

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.BezTriple, ptr %131, i64 0, i32 9
  %162 = load i8, ptr %161, align 1, !tbaa !30
  %163 = and i8 %162, 1
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %239, label %170

165:                                              ; preds = %153
  %166 = getelementptr inbounds %struct.BezTriple, ptr %143, i64 0, i32 8
  %167 = load i8, ptr %166, align 4, !tbaa !29
  %168 = and i8 %167, 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %239, label %185

170:                                              ; preds = %160, %155, %154
  %171 = getelementptr inbounds %struct.BezTriple, ptr %143, i64 0, i32 8
  %172 = load i8, ptr %171, align 4, !tbaa !29
  %173 = and i8 %172, 1
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %185

175:                                              ; preds = %170
  %176 = getelementptr inbounds %struct.BezTriple, ptr %143, i64 0, i32 7
  %177 = load i8, ptr %176, align 1, !tbaa !27
  %178 = and i8 %177, 1
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %180, label %185

180:                                              ; preds = %175
  %181 = getelementptr inbounds %struct.BezTriple, ptr %143, i64 0, i32 9
  %182 = load i8, ptr %181, align 1, !tbaa !30
  %183 = and i8 %182, 1
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %239, label %185

185:                                              ; preds = %180, %175, %170, %165
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %4) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(36) %4, ptr noundef nonnull align 4 dereferenceable(36) %131, i64 36, i1 false)
  br i1 %20, label %186, label %237

186:                                              ; preds = %185
  %187 = getelementptr inbounds [3 x [3 x float]], ptr %143, i64 0, i64 1
  %188 = icmp eq i32 %133, 0
  %189 = getelementptr inbounds %struct.BezTriple, ptr %131, i64 0, i32 2
  %190 = getelementptr inbounds %struct.BezTriple, ptr %143, i64 0, i32 2
  br label %191

191:                                              ; preds = %222, %186
  %192 = phi i32 [ 0, %186 ], [ %235, %222 ]
  %193 = phi ptr [ %142, %186 ], [ %234, %222 ]
  %194 = sub i32 %18, %192
  %195 = sitofp i32 %194 to float
  %196 = fdiv fast float 1.000000e+00, %195
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %193, ptr noundef nonnull align 4 dereferenceable(72) %143, i64 72, i1 false)
  call void @interp_v3_v3v3(ptr noundef nonnull %3, ptr noundef nonnull %22, ptr noundef nonnull %23, float noundef nofpclass(nan inf) %196) #20
  call void @interp_v3_v3v3(ptr noundef nonnull %24, ptr noundef nonnull %23, ptr noundef nonnull %143, float noundef nofpclass(nan inf) %196) #20
  call void @interp_v3_v3v3(ptr noundef nonnull %25, ptr noundef nonnull %143, ptr noundef nonnull %187, float noundef nofpclass(nan inf) %196) #20
  call void @interp_v3_v3v3(ptr noundef nonnull %26, ptr noundef nonnull %3, ptr noundef nonnull %24, float noundef nofpclass(nan inf) %196) #20
  call void @interp_v3_v3v3(ptr noundef nonnull %27, ptr noundef nonnull %24, ptr noundef nonnull %25, float noundef nofpclass(nan inf) %196) #20
  %197 = getelementptr %struct.BezTriple, ptr %193, i64 -1, i32 0, i64 2
  %198 = load float, ptr %3, align 16, !tbaa !40
  store float %198, ptr %197, align 4, !tbaa !40
  %199 = load float, ptr %28, align 4, !tbaa !40
  %200 = getelementptr %struct.BezTriple, ptr %193, i64 -1, i32 0, i64 2, i64 1
  store float %199, ptr %200, align 4, !tbaa !40
  %201 = load float, ptr %29, align 8, !tbaa !40
  %202 = getelementptr %struct.BezTriple, ptr %193, i64 -1, i32 0, i64 2, i64 2
  store float %201, ptr %202, align 4, !tbaa !40
  %203 = load float, ptr %26, align 4, !tbaa !40
  store float %203, ptr %193, align 4, !tbaa !40
  %204 = load float, ptr %30, align 8, !tbaa !40
  %205 = getelementptr inbounds float, ptr %193, i64 1
  store float %204, ptr %205, align 4, !tbaa !40
  %206 = load float, ptr %31, align 4, !tbaa !40
  %207 = getelementptr inbounds float, ptr %193, i64 2
  store float %206, ptr %207, align 4, !tbaa !40
  %208 = getelementptr inbounds [3 x [3 x float]], ptr %193, i64 0, i64 1
  call void @interp_v3_v3v3(ptr noundef nonnull %208, ptr noundef nonnull %26, ptr noundef nonnull %27, float noundef nofpclass(nan inf) %196) #20
  %209 = getelementptr inbounds [3 x [3 x float]], ptr %193, i64 0, i64 2
  %210 = load float, ptr %27, align 16, !tbaa !40
  store float %210, ptr %209, align 4, !tbaa !40
  %211 = load float, ptr %32, align 4, !tbaa !40
  %212 = getelementptr inbounds [3 x [3 x float]], ptr %193, i64 0, i64 2, i64 1
  store float %211, ptr %212, align 4, !tbaa !40
  %213 = load float, ptr %33, align 8, !tbaa !40
  %214 = getelementptr inbounds [3 x [3 x float]], ptr %193, i64 0, i64 2, i64 2
  store float %213, ptr %214, align 4, !tbaa !40
  %215 = icmp eq i32 %192, %34
  %216 = and i1 %188, %215
  br i1 %216, label %217, label %221

217:                                              ; preds = %191
  %218 = load i16, ptr %128, align 4, !tbaa !39
  %219 = and i16 %218, 1
  %220 = icmp eq i16 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %217, %191
  br label %222

222:                                              ; preds = %221, %217
  %223 = phi ptr [ %143, %221 ], [ %123, %217 ]
  %224 = getelementptr inbounds float, ptr %223, i64 2
  %225 = getelementptr inbounds float, ptr %223, i64 1
  %226 = load float, ptr %25, align 8, !tbaa !40
  store float %226, ptr %223, align 4, !tbaa !40
  %227 = load float, ptr %35, align 4, !tbaa !40
  store float %227, ptr %225, align 4, !tbaa !40
  %228 = load float, ptr %36, align 16, !tbaa !40
  store float %228, ptr %224, align 4, !tbaa !40
  %229 = getelementptr inbounds %struct.BezTriple, ptr %193, i64 0, i32 2
  %230 = load <2 x float>, ptr %189, align 4, !tbaa !40
  %231 = load <2 x float>, ptr %190, align 4, !tbaa !40
  %232 = fadd fast <2 x float> %231, %230
  %233 = fmul fast <2 x float> %232, <float 5.000000e-01, float 5.000000e-01>
  store <2 x float> %233, ptr %229, align 4, !tbaa !40
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(36) %4, ptr noundef nonnull align 4 dereferenceable(36) %193, i64 36, i1 false)
  %234 = getelementptr inbounds %struct.BezTriple, ptr %193, i64 1
  %235 = add nuw nsw i32 %192, 1
  %236 = icmp eq i32 %235, %8
  br i1 %236, label %237, label %191, !llvm.loop !207

237:                                              ; preds = %222, %185
  %238 = phi ptr [ %142, %185 ], [ %234, %222 ]
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %4) #20
  br label %239

239:                                              ; preds = %237, %180, %165, %160, %153
  %240 = phi ptr [ %238, %237 ], [ %142, %165 ], [ %142, %180 ], [ %142, %153 ], [ %142, %160 ]
  %241 = getelementptr inbounds %struct.BezTriple, ptr %131, i64 1
  %242 = icmp eq i32 %133, 0
  br i1 %242, label %243, label %129, !llvm.loop !208

243:                                              ; preds = %239, %141, %117
  %244 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %245 = load ptr, ptr %57, align 8, !tbaa !24
  call void %244(ptr noundef %245) #20
  store ptr %123, ptr %57, align 8, !tbaa !24
  %246 = load i32, ptr %55, align 8, !tbaa !23
  %247 = add nsw i32 %246, %115
  store i32 %247, ptr %55, align 8, !tbaa !23
  call void @BKE_nurb_handles_calc(ptr noundef nonnull %50) #20
  br label %964

248:                                              ; preds = %49
  %249 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 7
  %250 = load i32, ptr %249, align 4, !tbaa !31
  %251 = icmp eq i32 %250, 1
  br i1 %251, label %252, label %345

252:                                              ; preds = %248
  %253 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 6
  %254 = load i32, ptr %253, align 8, !tbaa !23
  %255 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 17
  %256 = icmp eq i32 %254, 0
  br i1 %256, label %964, label %257

257:                                              ; preds = %252
  %258 = load ptr, ptr %255, align 8, !tbaa !32
  br label %259

259:                                              ; preds = %278, %257
  %260 = phi i32 [ %263, %278 ], [ %254, %257 ]
  %261 = phi ptr [ %280, %278 ], [ %258, %257 ]
  %262 = phi i32 [ %279, %278 ], [ 0, %257 ]
  %263 = add nsw i32 %260, -1
  %264 = call ptr @BKE_nurb_bpoint_get_next(ptr noundef nonnull %50, ptr noundef %261) #20
  %265 = icmp eq ptr %264, null
  br i1 %265, label %282, label %266

266:                                              ; preds = %259
  %267 = getelementptr inbounds %struct.BPoint, ptr %261, i64 0, i32 3
  %268 = load i16, ptr %267, align 4, !tbaa !34
  %269 = and i16 %268, 1
  %270 = icmp eq i16 %269, 0
  br i1 %270, label %278, label %271

271:                                              ; preds = %266
  %272 = getelementptr inbounds %struct.BPoint, ptr %264, i64 0, i32 3
  %273 = load i16, ptr %272, align 4, !tbaa !34
  %274 = and i16 %273, 1
  %275 = icmp eq i16 %274, 0
  %276 = select i1 %275, i32 0, i32 %8
  %277 = add nsw i32 %276, %262
  br label %278

278:                                              ; preds = %271, %266
  %279 = phi i32 [ %262, %266 ], [ %277, %271 ]
  %280 = getelementptr inbounds %struct.BPoint, ptr %261, i64 1
  %281 = icmp eq i32 %263, 0
  br i1 %281, label %282, label %259, !llvm.loop !209

282:                                              ; preds = %278, %259
  %283 = phi i32 [ %279, %278 ], [ %262, %259 ]
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %964, label %285

285:                                              ; preds = %282
  %286 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %287 = load i32, ptr %253, align 8, !tbaa !23
  %288 = add nsw i32 %287, %283
  %289 = sext i32 %288 to i64
  %290 = mul nsw i64 %289, 36
  %291 = call ptr %286(i64 noundef %290, ptr noundef nonnull @.str.200) #20
  %292 = load i32, ptr %253, align 8, !tbaa !23
  %293 = load ptr, ptr %255, align 8, !tbaa !32
  %294 = icmp eq i32 %292, 0
  br i1 %294, label %336, label %295

295:                                              ; preds = %285, %330
  %296 = phi i32 [ %299, %330 ], [ %292, %285 ]
  %297 = phi ptr [ %332, %330 ], [ %293, %285 ]
  %298 = phi ptr [ %331, %330 ], [ %291, %285 ]
  %299 = add nsw i32 %296, -1
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %298, ptr noundef nonnull align 4 dereferenceable(36) %297, i64 36, i1 false)
  %300 = load ptr, ptr %16, align 8, !tbaa !47
  %301 = icmp eq ptr %300, null
  br i1 %301, label %307, label %302

302:                                              ; preds = %295
  %303 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %300, ptr noundef nonnull %297, ptr noundef null) #20
  %304 = icmp eq ptr %303, null
  br i1 %304, label %307, label %305

305:                                              ; preds = %302
  %306 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %306, ptr noundef nonnull %298, ptr noundef nonnull %303) #20
  br label %307

307:                                              ; preds = %305, %302, %295
  %308 = getelementptr inbounds %struct.BPoint, ptr %298, i64 1
  %309 = call ptr @BKE_nurb_bpoint_get_next(ptr noundef nonnull %50, ptr noundef nonnull %297) #20
  %310 = icmp eq ptr %309, null
  br i1 %310, label %334, label %311

311:                                              ; preds = %307
  %312 = getelementptr inbounds %struct.BPoint, ptr %297, i64 0, i32 3
  %313 = load i16, ptr %312, align 4, !tbaa !34
  %314 = and i16 %313, 1
  %315 = icmp eq i16 %314, 0
  br i1 %315, label %330, label %316

316:                                              ; preds = %311
  %317 = getelementptr inbounds %struct.BPoint, ptr %309, i64 0, i32 3
  %318 = load i16, ptr %317, align 4, !tbaa !34
  %319 = and i16 %318, 1
  %320 = icmp eq i16 %319, 0
  %321 = or i1 %17, %320
  br i1 %321, label %330, label %322

322:                                              ; preds = %316, %322
  %323 = phi i32 [ %325, %322 ], [ 0, %316 ]
  %324 = phi ptr [ %328, %322 ], [ %308, %316 ]
  %325 = add nuw nsw i32 %323, 1
  %326 = sitofp i32 %325 to float
  %327 = fmul fast float %326, %48
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %324, ptr noundef nonnull align 4 dereferenceable(36) %309, i64 36, i1 false)
  call void @interp_v4_v4v4(ptr noundef nonnull %324, ptr noundef %297, ptr noundef nonnull %309, float noundef nofpclass(nan inf) %327) #20
  %328 = getelementptr inbounds %struct.BPoint, ptr %324, i64 1
  %329 = icmp eq i32 %325, %8
  br i1 %329, label %330, label %322, !llvm.loop !210

330:                                              ; preds = %322, %316, %311
  %331 = phi ptr [ %308, %316 ], [ %308, %311 ], [ %328, %322 ]
  %332 = getelementptr inbounds %struct.BPoint, ptr %297, i64 1
  %333 = icmp eq i32 %299, 0
  br i1 %333, label %334, label %295, !llvm.loop !211

334:                                              ; preds = %330, %307
  %335 = load ptr, ptr %255, align 8, !tbaa !32
  br label %336

336:                                              ; preds = %334, %285
  %337 = phi ptr [ %335, %334 ], [ %293, %285 ]
  %338 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %338(ptr noundef %337) #20
  store ptr %291, ptr %255, align 8, !tbaa !32
  %339 = load i32, ptr %253, align 8, !tbaa !23
  %340 = add nsw i32 %339, %283
  store i32 %340, ptr %253, align 8, !tbaa !23
  %341 = load i16, ptr %51, align 8, !tbaa !21
  %342 = and i16 %341, 4
  %343 = icmp eq i16 %342, 0
  br i1 %343, label %964, label %344

344:                                              ; preds = %336
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %50) #20
  br label %964

345:                                              ; preds = %248
  %346 = icmp eq i16 %52, 4
  br i1 %346, label %347, label %964

347:                                              ; preds = %345
  %348 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %349 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 6
  %350 = load i32, ptr %349, align 8, !tbaa !23
  %351 = sext i32 %350 to i64
  %352 = shl nsw i64 %351, 2
  %353 = call ptr %348(i64 noundef %352, ptr noundef nonnull @.str.201) #20
  %354 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %355 = load i32, ptr %249, align 4, !tbaa !31
  %356 = sext i32 %355 to i64
  %357 = shl nsw i64 %356, 2
  %358 = call ptr %354(i64 noundef %357, ptr noundef nonnull @.str.201) #20
  %359 = getelementptr inbounds %struct.Nurb, ptr %50, i64 0, i32 17
  %360 = load <2 x i32>, ptr %349, align 8, !tbaa !74
  %361 = extractelement <2 x i32> %360, i64 1
  %362 = icmp sgt i32 %361, 0
  br i1 %362, label %363, label %413

363:                                              ; preds = %347
  %364 = load ptr, ptr %359, align 8, !tbaa !32
  %365 = extractelement <2 x i32> %360, i64 0
  br label %366

366:                                              ; preds = %404, %363
  %367 = phi i32 [ %365, %363 ], [ %405, %404 ]
  %368 = phi i64 [ 0, %363 ], [ %409, %404 ]
  %369 = phi ptr [ %364, %363 ], [ %407, %404 ]
  %370 = phi i32 [ 0, %363 ], [ %406, %404 ]
  %371 = phi <2 x i32> [ %360, %363 ], [ %408, %404 ]
  %372 = icmp sgt i32 %367, 0
  br i1 %372, label %373, label %404

373:                                              ; preds = %366
  %374 = getelementptr inbounds i32, ptr %358, i64 %368
  %375 = extractelement <2 x i32> %371, i64 0
  br label %376

376:                                              ; preds = %393, %373
  %377 = phi i32 [ %375, %373 ], [ %394, %393 ]
  %378 = phi i64 [ 0, %373 ], [ %397, %393 ]
  %379 = phi ptr [ %369, %373 ], [ %396, %393 ]
  %380 = phi i32 [ %370, %373 ], [ %395, %393 ]
  %381 = getelementptr inbounds %struct.BPoint, ptr %379, i64 0, i32 3
  %382 = load i16, ptr %381, align 4, !tbaa !34
  %383 = and i16 %382, 1
  %384 = icmp eq i16 %383, 0
  br i1 %384, label %393, label %385

385:                                              ; preds = %376
  %386 = getelementptr inbounds i32, ptr %353, i64 %378
  %387 = load i32, ptr %386, align 4, !tbaa !74
  %388 = add nsw i32 %387, 1
  store i32 %388, ptr %386, align 4, !tbaa !74
  %389 = load i32, ptr %374, align 4, !tbaa !74
  %390 = add nsw i32 %389, 1
  store i32 %390, ptr %374, align 4, !tbaa !74
  %391 = add nsw i32 %380, 1
  %392 = load i32, ptr %349, align 8, !tbaa !23
  br label %393

393:                                              ; preds = %385, %376
  %394 = phi i32 [ %392, %385 ], [ %377, %376 ]
  %395 = phi i32 [ %391, %385 ], [ %380, %376 ]
  %396 = getelementptr inbounds %struct.BPoint, ptr %379, i64 1
  %397 = add nuw nsw i64 %378, 1
  %398 = sext i32 %394 to i64
  %399 = icmp slt i64 %397, %398
  br i1 %399, label %376, label %400, !llvm.loop !212

400:                                              ; preds = %393
  %401 = load i32, ptr %249, align 4, !tbaa !31
  %402 = insertelement <2 x i32> poison, i32 %394, i64 0
  %403 = insertelement <2 x i32> %402, i32 %401, i64 1
  br label %404

404:                                              ; preds = %400, %366
  %405 = phi i32 [ %367, %366 ], [ %394, %400 ]
  %406 = phi i32 [ %370, %366 ], [ %395, %400 ]
  %407 = phi ptr [ %369, %366 ], [ %396, %400 ]
  %408 = phi <2 x i32> [ %371, %366 ], [ %403, %400 ]
  %409 = add nuw nsw i64 %368, 1
  %410 = extractelement <2 x i32> %408, i64 1
  %411 = sext i32 %410 to i64
  %412 = icmp slt i64 %409, %411
  br i1 %412, label %366, label %413, !llvm.loop !213

413:                                              ; preds = %404, %347
  %414 = phi i32 [ 0, %347 ], [ %406, %404 ]
  %415 = phi <2 x i32> [ %360, %347 ], [ %408, %404 ]
  %416 = extractelement <2 x i32> %415, i64 0
  %417 = extractelement <2 x i32> %415, i64 1
  %418 = mul nsw i32 %417, %416
  %419 = icmp eq i32 %414, %418
  br i1 %419, label %483, label %420

420:                                              ; preds = %413
  %421 = icmp sgt i32 %417, 1
  br i1 %421, label %422, label %666

422:                                              ; preds = %420
  %423 = add nsw i32 %417, -1
  %424 = zext i32 %423 to i64
  %425 = icmp ult i32 %417, 33
  br i1 %425, label %480, label %426

426:                                              ; preds = %422
  %427 = and i64 %424, 4294967264
  %428 = shufflevector <2 x i32> %415, <2 x i32> poison, <8 x i32> zeroinitializer
  br label %429

429:                                              ; preds = %429, %426
  %430 = phi i64 [ 0, %426 ], [ %472, %429 ]
  %431 = phi <8 x i32> [ zeroinitializer, %426 ], [ %462, %429 ]
  %432 = phi <8 x i32> [ zeroinitializer, %426 ], [ %465, %429 ]
  %433 = phi <8 x i32> [ zeroinitializer, %426 ], [ %468, %429 ]
  %434 = phi <8 x i32> [ zeroinitializer, %426 ], [ %471, %429 ]
  %435 = getelementptr inbounds i32, ptr %358, i64 %430
  %436 = load <8 x i32>, ptr %435, align 4, !tbaa !74
  %437 = getelementptr inbounds i32, ptr %435, i64 8
  %438 = load <8 x i32>, ptr %437, align 4, !tbaa !74
  %439 = getelementptr inbounds i32, ptr %435, i64 16
  %440 = load <8 x i32>, ptr %439, align 4, !tbaa !74
  %441 = getelementptr inbounds i32, ptr %435, i64 24
  %442 = load <8 x i32>, ptr %441, align 4, !tbaa !74
  %443 = icmp eq <8 x i32> %436, %428
  %444 = icmp eq <8 x i32> %438, %428
  %445 = icmp eq <8 x i32> %440, %428
  %446 = icmp eq <8 x i32> %442, %428
  %447 = or i64 %430, 1
  %448 = getelementptr i32, ptr %358, i64 %447
  %449 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %448, i32 4, <8 x i1> %443, <8 x i32> poison), !tbaa !74
  %450 = getelementptr i32, ptr %448, i64 8
  %451 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %450, i32 4, <8 x i1> %444, <8 x i32> poison), !tbaa !74
  %452 = getelementptr i32, ptr %448, i64 16
  %453 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %452, i32 4, <8 x i1> %445, <8 x i32> poison), !tbaa !74
  %454 = getelementptr i32, ptr %448, i64 24
  %455 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %454, i32 4, <8 x i1> %446, <8 x i32> poison), !tbaa !74
  %456 = icmp eq <8 x i32> %449, %428
  %457 = icmp eq <8 x i32> %451, %428
  %458 = icmp eq <8 x i32> %453, %428
  %459 = icmp eq <8 x i32> %455, %428
  %460 = select <8 x i1> %443, <8 x i1> %456, <8 x i1> zeroinitializer
  %461 = select <8 x i1> %460, <8 x i32> %41, <8 x i32> zeroinitializer
  %462 = add <8 x i32> %431, %461
  %463 = select <8 x i1> %444, <8 x i1> %457, <8 x i1> zeroinitializer
  %464 = select <8 x i1> %463, <8 x i32> %41, <8 x i32> zeroinitializer
  %465 = add <8 x i32> %432, %464
  %466 = select <8 x i1> %445, <8 x i1> %458, <8 x i1> zeroinitializer
  %467 = select <8 x i1> %466, <8 x i32> %41, <8 x i32> zeroinitializer
  %468 = add <8 x i32> %433, %467
  %469 = select <8 x i1> %446, <8 x i1> %459, <8 x i1> zeroinitializer
  %470 = select <8 x i1> %469, <8 x i32> %41, <8 x i32> zeroinitializer
  %471 = add <8 x i32> %434, %470
  %472 = add nuw i64 %430, 32
  %473 = icmp eq i64 %472, %427
  br i1 %473, label %474, label %429, !llvm.loop !214

474:                                              ; preds = %429
  %475 = add <8 x i32> %465, %462
  %476 = add <8 x i32> %468, %475
  %477 = add <8 x i32> %471, %476
  %478 = call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> %477)
  %479 = icmp eq i64 %427, %424
  br i1 %479, label %663, label %480

480:                                              ; preds = %422, %474
  %481 = phi i64 [ 0, %422 ], [ %427, %474 ]
  %482 = phi i32 [ 0, %422 ], [ %478, %474 ]
  br label %647

483:                                              ; preds = %413
  %484 = add nsw i32 %416, -1
  %485 = mul nsw i32 %484, %8
  %486 = add nsw i32 %485, %416
  %487 = mul nsw i32 %416, %18
  %488 = sub nsw i32 %487, %8
  %489 = mul nsw i32 %417, %18
  %490 = sub nsw i32 %489, %8
  %491 = mul nsw i32 %490, %488
  %492 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %493 = sext i32 %491 to i64
  %494 = mul nsw i64 %493, 36
  %495 = call ptr %492(i64 noundef %494, ptr noundef nonnull @.str.202) #20
  %496 = load i32, ptr %249, align 4, !tbaa !31
  %497 = icmp sgt i32 %496, 0
  br i1 %497, label %498, label %638

498:                                              ; preds = %483
  %499 = load ptr, ptr %359, align 8, !tbaa !32
  %500 = mul nsw i32 %486, %8
  %501 = sext i32 %500 to i64
  %502 = load i32, ptr %349, align 8, !tbaa !23
  br label %503

503:                                              ; preds = %559, %498
  %504 = phi i32 [ %502, %498 ], [ %560, %559 ]
  %505 = phi ptr [ %499, %498 ], [ %562, %559 ]
  %506 = phi i32 [ 0, %498 ], [ %564, %559 ]
  %507 = phi ptr [ %495, %498 ], [ %563, %559 ]
  %508 = icmp sgt i32 %504, 0
  br i1 %508, label %509, label %559

509:                                              ; preds = %503
  br i1 %20, label %510, label %542

510:                                              ; preds = %509, %529
  %511 = phi ptr [ %523, %529 ], [ %505, %509 ]
  %512 = phi i32 [ %532, %529 ], [ 0, %509 ]
  %513 = phi ptr [ %531, %529 ], [ %507, %509 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %513, ptr noundef nonnull align 4 dereferenceable(36) %511, i64 36, i1 false), !tbaa.struct !168
  %514 = load ptr, ptr %16, align 8, !tbaa !47
  %515 = icmp eq ptr %514, null
  br i1 %515, label %521, label %516

516:                                              ; preds = %510
  %517 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %514, ptr noundef nonnull %511, ptr noundef null) #20
  %518 = icmp eq ptr %517, null
  br i1 %518, label %521, label %519

519:                                              ; preds = %516
  %520 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %520, ptr noundef nonnull %513, ptr noundef nonnull %517) #20
  br label %521

521:                                              ; preds = %519, %516, %510
  %522 = getelementptr inbounds %struct.BPoint, ptr %513, i64 1
  %523 = getelementptr inbounds %struct.BPoint, ptr %511, i64 1
  %524 = load i32, ptr %349, align 8, !tbaa !23
  %525 = add nsw i32 %524, -1
  %526 = icmp slt i32 %512, %525
  br i1 %526, label %534, label %529

527:                                              ; preds = %534
  %528 = load i32, ptr %349, align 8, !tbaa !23
  br label %529

529:                                              ; preds = %527, %521
  %530 = phi i32 [ %524, %521 ], [ %528, %527 ]
  %531 = phi ptr [ %522, %521 ], [ %540, %527 ]
  %532 = add nuw nsw i32 %512, 1
  %533 = icmp slt i32 %532, %530
  br i1 %533, label %510, label %559, !llvm.loop !215

534:                                              ; preds = %521, %534
  %535 = phi i32 [ %537, %534 ], [ 0, %521 ]
  %536 = phi ptr [ %540, %534 ], [ %522, %521 ]
  %537 = add nuw nsw i32 %535, 1
  %538 = sitofp i32 %537 to float
  %539 = fmul fast float %538, %46
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %536, ptr noundef nonnull align 4 dereferenceable(36) %523, i64 36, i1 false), !tbaa.struct !168
  call void @interp_v4_v4v4(ptr noundef nonnull %536, ptr noundef nonnull %511, ptr noundef nonnull %523, float noundef nofpclass(nan inf) %539) #20
  %540 = getelementptr inbounds %struct.BPoint, ptr %536, i64 1
  %541 = icmp eq i32 %537, %8
  br i1 %541, label %527, label %534, !llvm.loop !216

542:                                              ; preds = %509, %553
  %543 = phi ptr [ %555, %553 ], [ %505, %509 ]
  %544 = phi i32 [ %556, %553 ], [ 0, %509 ]
  %545 = phi ptr [ %554, %553 ], [ %507, %509 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %545, ptr noundef nonnull align 4 dereferenceable(36) %543, i64 36, i1 false), !tbaa.struct !168
  %546 = load ptr, ptr %16, align 8, !tbaa !47
  %547 = icmp eq ptr %546, null
  br i1 %547, label %553, label %548

548:                                              ; preds = %542
  %549 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %546, ptr noundef nonnull %543, ptr noundef null) #20
  %550 = icmp eq ptr %549, null
  br i1 %550, label %553, label %551

551:                                              ; preds = %548
  %552 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %552, ptr noundef nonnull %545, ptr noundef nonnull %549) #20
  br label %553

553:                                              ; preds = %551, %548, %542
  %554 = getelementptr inbounds %struct.BPoint, ptr %545, i64 1
  %555 = getelementptr inbounds %struct.BPoint, ptr %543, i64 1
  %556 = add nuw nsw i32 %544, 1
  %557 = load i32, ptr %349, align 8, !tbaa !23
  %558 = icmp slt i32 %556, %557
  br i1 %558, label %542, label %559, !llvm.loop !215

559:                                              ; preds = %553, %529, %503
  %560 = phi i32 [ %504, %503 ], [ %530, %529 ], [ %557, %553 ]
  %561 = phi ptr [ %507, %503 ], [ %531, %529 ], [ %554, %553 ]
  %562 = phi ptr [ %505, %503 ], [ %523, %529 ], [ %555, %553 ]
  %563 = getelementptr inbounds %struct.BPoint, ptr %561, i64 %501
  %564 = add nuw nsw i32 %506, 1
  %565 = load i32, ptr %249, align 4, !tbaa !31
  %566 = icmp slt i32 %564, %565
  br i1 %566, label %503, label %567, !llvm.loop !217

567:                                              ; preds = %559
  %568 = icmp sgt i32 %565, 1
  br i1 %568, label %569, label %638

569:                                              ; preds = %567
  %570 = mul nsw i32 %560, %18
  %571 = sub nsw i32 %570, %8
  %572 = mul nsw i32 %571, %18
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds %struct.BPoint, ptr %495, i64 %573
  %575 = sext i32 %571 to i64
  %576 = getelementptr inbounds %struct.BPoint, ptr %495, i64 %575
  %577 = sext i32 %486 to i64
  br label %578

578:                                              ; preds = %626, %569
  %579 = phi i32 [ %565, %569 ], [ %627, %626 ]
  %580 = phi i32 [ %560, %569 ], [ %628, %626 ]
  %581 = phi i32 [ %560, %569 ], [ %629, %626 ]
  %582 = phi ptr [ %574, %569 ], [ %633, %626 ]
  %583 = phi i32 [ 1, %569 ], [ %636, %626 ]
  %584 = phi ptr [ %576, %569 ], [ %634, %626 ]
  %585 = phi ptr [ %495, %569 ], [ %635, %626 ]
  %586 = mul nsw i32 %581, %18
  %587 = icmp sgt i32 %586, %8
  br i1 %587, label %588, label %626

588:                                              ; preds = %578
  br i1 %20, label %589, label %611

589:                                              ; preds = %588, %602
  %590 = phi ptr [ %603, %602 ], [ %582, %588 ]
  %591 = phi i32 [ %606, %602 ], [ 0, %588 ]
  %592 = phi ptr [ %605, %602 ], [ %584, %588 ]
  %593 = phi ptr [ %604, %602 ], [ %585, %588 ]
  br label %594

594:                                              ; preds = %594, %589
  %595 = phi ptr [ %592, %589 ], [ %600, %594 ]
  %596 = phi i32 [ 0, %589 ], [ %597, %594 ]
  %597 = add nuw nsw i32 %596, 1
  %598 = sitofp i32 %597 to float
  %599 = fmul fast float %598, %47
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %595, ptr noundef nonnull align 4 dereferenceable(36) %590, i64 36, i1 false), !tbaa.struct !168
  call void @interp_v4_v4v4(ptr noundef %595, ptr noundef %593, ptr noundef %590, float noundef nofpclass(nan inf) %599) #20
  %600 = getelementptr inbounds %struct.BPoint, ptr %595, i64 %577
  %601 = icmp eq i32 %597, %8
  br i1 %601, label %602, label %594, !llvm.loop !218

602:                                              ; preds = %594
  %603 = getelementptr inbounds %struct.BPoint, ptr %590, i64 1
  %604 = getelementptr inbounds %struct.BPoint, ptr %593, i64 1
  %605 = getelementptr inbounds %struct.BPoint, ptr %592, i64 1
  %606 = add nuw nsw i32 %591, 1
  %607 = load i32, ptr %349, align 8, !tbaa !23
  %608 = mul nsw i32 %607, %18
  %609 = sub nsw i32 %608, %8
  %610 = icmp slt i32 %606, %609
  br i1 %610, label %589, label %624, !llvm.loop !219

611:                                              ; preds = %588
  %612 = mul nsw i32 %580, %18
  %613 = sub nsw i32 %612, %8
  %614 = call i32 @llvm.smax.i32(i32 %613, i32 1)
  %615 = add nsw i32 %614, -1
  %616 = zext i32 %615 to i64
  %617 = mul nuw nsw i64 %616, 36
  %618 = getelementptr i8, ptr %585, i64 36
  %619 = getelementptr i8, ptr %584, i64 36
  %620 = getelementptr i8, ptr %582, i64 36
  %621 = getelementptr i8, ptr %620, i64 %617
  %622 = getelementptr i8, ptr %618, i64 %617
  %623 = getelementptr i8, ptr %619, i64 %617
  br label %626

624:                                              ; preds = %602
  %625 = load i32, ptr %249, align 4, !tbaa !31
  br label %626

626:                                              ; preds = %624, %611, %578
  %627 = phi i32 [ %579, %578 ], [ %625, %624 ], [ %579, %611 ]
  %628 = phi i32 [ %580, %578 ], [ %607, %624 ], [ %580, %611 ]
  %629 = phi i32 [ %581, %578 ], [ %607, %624 ], [ %580, %611 ]
  %630 = phi ptr [ %585, %578 ], [ %604, %624 ], [ %622, %611 ]
  %631 = phi ptr [ %584, %578 ], [ %605, %624 ], [ %623, %611 ]
  %632 = phi ptr [ %582, %578 ], [ %603, %624 ], [ %621, %611 ]
  %633 = getelementptr inbounds %struct.BPoint, ptr %632, i64 %501
  %634 = getelementptr inbounds %struct.BPoint, ptr %631, i64 %501
  %635 = getelementptr inbounds %struct.BPoint, ptr %630, i64 %501
  %636 = add nuw nsw i32 %583, 1
  %637 = icmp slt i32 %636, %627
  br i1 %637, label %578, label %638, !llvm.loop !220

638:                                              ; preds = %626, %567, %483
  %639 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %640 = load ptr, ptr %359, align 8, !tbaa !32
  call void %639(ptr noundef %640) #20
  store ptr %495, ptr %359, align 8, !tbaa !32
  %641 = load i32, ptr %349, align 8, !tbaa !23
  %642 = mul nsw i32 %641, %18
  %643 = sub nsw i32 %642, %8
  store i32 %643, ptr %349, align 8, !tbaa !23
  %644 = load i32, ptr %249, align 4, !tbaa !31
  %645 = mul nsw i32 %644, %18
  %646 = sub nsw i32 %645, %8
  store i32 %646, ptr %249, align 4, !tbaa !31
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %50) #20
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %50) #20
  br label %961

647:                                              ; preds = %480, %660
  %648 = phi i64 [ %653, %660 ], [ %481, %480 ]
  %649 = phi i32 [ %661, %660 ], [ %482, %480 ]
  %650 = getelementptr inbounds i32, ptr %358, i64 %648
  %651 = load i32, ptr %650, align 4, !tbaa !74
  %652 = icmp eq i32 %651, %416
  %653 = add nuw nsw i64 %648, 1
  br i1 %652, label %654, label %660

654:                                              ; preds = %647
  %655 = getelementptr inbounds i32, ptr %358, i64 %653
  %656 = load i32, ptr %655, align 4, !tbaa !74
  %657 = icmp eq i32 %656, %416
  %658 = select i1 %657, i32 %8, i32 0
  %659 = add nsw i32 %658, %649
  br label %660

660:                                              ; preds = %654, %647
  %661 = phi i32 [ %659, %654 ], [ %649, %647 ]
  %662 = icmp eq i64 %653, %424
  br i1 %662, label %663, label %647, !llvm.loop !221

663:                                              ; preds = %660, %474
  %664 = phi i32 [ %478, %474 ], [ %661, %660 ]
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %666, label %729

666:                                              ; preds = %663, %420
  %667 = icmp sgt i32 %416, 1
  br i1 %667, label %668, label %961

668:                                              ; preds = %666
  %669 = add nsw i32 %416, -1
  %670 = zext i32 %669 to i64
  %671 = icmp ult i32 %416, 33
  br i1 %671, label %726, label %672

672:                                              ; preds = %668
  %673 = and i64 %670, 4294967264
  %674 = shufflevector <2 x i32> %415, <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  br label %675

675:                                              ; preds = %675, %672
  %676 = phi i64 [ 0, %672 ], [ %718, %675 ]
  %677 = phi <8 x i32> [ zeroinitializer, %672 ], [ %708, %675 ]
  %678 = phi <8 x i32> [ zeroinitializer, %672 ], [ %711, %675 ]
  %679 = phi <8 x i32> [ zeroinitializer, %672 ], [ %714, %675 ]
  %680 = phi <8 x i32> [ zeroinitializer, %672 ], [ %717, %675 ]
  %681 = getelementptr inbounds i32, ptr %353, i64 %676
  %682 = load <8 x i32>, ptr %681, align 4, !tbaa !74
  %683 = getelementptr inbounds i32, ptr %681, i64 8
  %684 = load <8 x i32>, ptr %683, align 4, !tbaa !74
  %685 = getelementptr inbounds i32, ptr %681, i64 16
  %686 = load <8 x i32>, ptr %685, align 4, !tbaa !74
  %687 = getelementptr inbounds i32, ptr %681, i64 24
  %688 = load <8 x i32>, ptr %687, align 4, !tbaa !74
  %689 = icmp eq <8 x i32> %682, %674
  %690 = icmp eq <8 x i32> %684, %674
  %691 = icmp eq <8 x i32> %686, %674
  %692 = icmp eq <8 x i32> %688, %674
  %693 = or i64 %676, 1
  %694 = getelementptr i32, ptr %353, i64 %693
  %695 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %694, i32 4, <8 x i1> %689, <8 x i32> poison), !tbaa !74
  %696 = getelementptr i32, ptr %694, i64 8
  %697 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %696, i32 4, <8 x i1> %690, <8 x i32> poison), !tbaa !74
  %698 = getelementptr i32, ptr %694, i64 16
  %699 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %698, i32 4, <8 x i1> %691, <8 x i32> poison), !tbaa !74
  %700 = getelementptr i32, ptr %694, i64 24
  %701 = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr %700, i32 4, <8 x i1> %692, <8 x i32> poison), !tbaa !74
  %702 = icmp eq <8 x i32> %695, %674
  %703 = icmp eq <8 x i32> %697, %674
  %704 = icmp eq <8 x i32> %699, %674
  %705 = icmp eq <8 x i32> %701, %674
  %706 = select <8 x i1> %689, <8 x i1> %702, <8 x i1> zeroinitializer
  %707 = select <8 x i1> %706, <8 x i32> %44, <8 x i32> zeroinitializer
  %708 = add <8 x i32> %677, %707
  %709 = select <8 x i1> %690, <8 x i1> %703, <8 x i1> zeroinitializer
  %710 = select <8 x i1> %709, <8 x i32> %44, <8 x i32> zeroinitializer
  %711 = add <8 x i32> %678, %710
  %712 = select <8 x i1> %691, <8 x i1> %704, <8 x i1> zeroinitializer
  %713 = select <8 x i1> %712, <8 x i32> %44, <8 x i32> zeroinitializer
  %714 = add <8 x i32> %679, %713
  %715 = select <8 x i1> %692, <8 x i1> %705, <8 x i1> zeroinitializer
  %716 = select <8 x i1> %715, <8 x i32> %44, <8 x i32> zeroinitializer
  %717 = add <8 x i32> %680, %716
  %718 = add nuw i64 %676, 32
  %719 = icmp eq i64 %718, %673
  br i1 %719, label %720, label %675, !llvm.loop !222

720:                                              ; preds = %675
  %721 = add <8 x i32> %711, %708
  %722 = add <8 x i32> %714, %721
  %723 = add <8 x i32> %717, %722
  %724 = call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> %723)
  %725 = icmp eq i64 %673, %670
  br i1 %725, label %864, label %726

726:                                              ; preds = %668, %720
  %727 = phi i64 [ 0, %668 ], [ %673, %720 ]
  %728 = phi i32 [ 0, %668 ], [ %724, %720 ]
  br label %848

729:                                              ; preds = %663
  %730 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %731 = add nsw i32 %664, %417
  %732 = mul nsw i32 %731, %416
  %733 = sext i32 %732 to i64
  %734 = mul nsw i64 %733, 36
  %735 = call ptr %730(i64 noundef %734, ptr noundef nonnull @.str.202) #20
  %736 = load ptr, ptr %359, align 8, !tbaa !32
  %737 = load i32, ptr %249, align 4, !tbaa !31
  %738 = icmp sgt i32 %737, 0
  br i1 %738, label %739, label %843

739:                                              ; preds = %729
  %740 = load i32, ptr %349, align 8, !tbaa !23
  br label %741

741:                                              ; preds = %831, %739
  %742 = phi i32 [ %737, %739 ], [ %832, %831 ]
  %743 = phi i32 [ %740, %739 ], [ %833, %831 ]
  %744 = phi i32 [ %740, %739 ], [ %834, %831 ]
  %745 = phi i32 [ %740, %739 ], [ %835, %831 ]
  %746 = phi i64 [ 0, %739 ], [ %838, %831 ]
  %747 = phi ptr [ %736, %739 ], [ %837, %831 ]
  %748 = phi ptr [ %735, %739 ], [ %836, %831 ]
  %749 = icmp sgt i32 %745, 0
  br i1 %749, label %750, label %769

750:                                              ; preds = %741, %761
  %751 = phi ptr [ %763, %761 ], [ %747, %741 ]
  %752 = phi i32 [ %764, %761 ], [ 0, %741 ]
  %753 = phi ptr [ %762, %761 ], [ %748, %741 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %753, ptr noundef nonnull align 4 dereferenceable(36) %751, i64 36, i1 false), !tbaa.struct !168
  %754 = load ptr, ptr %16, align 8, !tbaa !47
  %755 = icmp eq ptr %754, null
  br i1 %755, label %761, label %756

756:                                              ; preds = %750
  %757 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %754, ptr noundef nonnull %751, ptr noundef null) #20
  %758 = icmp eq ptr %757, null
  br i1 %758, label %761, label %759

759:                                              ; preds = %756
  %760 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %760, ptr noundef nonnull %753, ptr noundef nonnull %757) #20
  br label %761

761:                                              ; preds = %759, %756, %750
  %762 = getelementptr inbounds %struct.BPoint, ptr %753, i64 1
  %763 = getelementptr inbounds %struct.BPoint, ptr %751, i64 1
  %764 = add nuw nsw i32 %752, 1
  %765 = load i32, ptr %349, align 8, !tbaa !23
  %766 = icmp slt i32 %764, %765
  br i1 %766, label %750, label %767, !llvm.loop !223

767:                                              ; preds = %761
  %768 = load i32, ptr %249, align 4, !tbaa !31
  br label %769

769:                                              ; preds = %767, %741
  %770 = phi i32 [ %742, %741 ], [ %768, %767 ]
  %771 = phi i32 [ %743, %741 ], [ %765, %767 ]
  %772 = phi i32 [ %744, %741 ], [ %765, %767 ]
  %773 = phi i32 [ %745, %741 ], [ %765, %767 ]
  %774 = phi ptr [ %748, %741 ], [ %762, %767 ]
  %775 = phi ptr [ %747, %741 ], [ %763, %767 ]
  %776 = add nsw i32 %770, -1
  %777 = sext i32 %776 to i64
  %778 = icmp slt i64 %746, %777
  br i1 %778, label %779, label %831

779:                                              ; preds = %769
  %780 = getelementptr inbounds i32, ptr %358, i64 %746
  %781 = load i32, ptr %780, align 4, !tbaa !74
  %782 = icmp eq i32 %781, %773
  br i1 %782, label %783, label %831

783:                                              ; preds = %779
  %784 = add nuw nsw i64 %746, 1
  %785 = getelementptr inbounds i32, ptr %358, i64 %784
  %786 = load i32, ptr %785, align 4, !tbaa !74
  %787 = icmp ne i32 %786, %773
  %788 = or i1 %17, %787
  br i1 %788, label %831, label %789

789:                                              ; preds = %783
  %790 = icmp sgt i32 %773, 0
  br i1 %790, label %795, label %791

791:                                              ; preds = %789
  %792 = sext i32 %772 to i64
  %793 = mul i64 %39, %792
  %794 = getelementptr i8, ptr %775, i64 %793
  br label %831

795:                                              ; preds = %789, %822
  %796 = phi i32 [ %824, %822 ], [ %771, %789 ]
  %797 = phi i32 [ %800, %822 ], [ 0, %789 ]
  %798 = phi ptr [ %827, %822 ], [ %775, %789 ]
  %799 = phi ptr [ %825, %822 ], [ %774, %789 ]
  %800 = add nuw nsw i32 %797, 1
  %801 = sitofp i32 %800 to float
  %802 = fmul fast float %801, %42
  %803 = sext i32 %796 to i64
  %804 = sub nsw i64 0, %803
  %805 = icmp sgt i32 %796, 0
  br i1 %805, label %806, label %822

806:                                              ; preds = %795
  %807 = getelementptr inbounds %struct.BPoint, ptr %798, i64 %804
  br label %808

808:                                              ; preds = %808, %806
  %809 = phi ptr [ %815, %808 ], [ %798, %806 ]
  %810 = phi i32 [ %816, %808 ], [ 0, %806 ]
  %811 = phi ptr [ %813, %808 ], [ %799, %806 ]
  %812 = phi ptr [ %814, %808 ], [ %807, %806 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %811, ptr noundef nonnull align 4 dereferenceable(36) %812, i64 36, i1 false), !tbaa.struct !168
  call void @interp_v4_v4v4(ptr noundef %811, ptr noundef %812, ptr noundef %809, float noundef nofpclass(nan inf) %802) #20
  %813 = getelementptr inbounds %struct.BPoint, ptr %811, i64 1
  %814 = getelementptr inbounds %struct.BPoint, ptr %812, i64 1
  %815 = getelementptr inbounds %struct.BPoint, ptr %809, i64 1
  %816 = add nuw nsw i32 %810, 1
  %817 = load i32, ptr %349, align 8, !tbaa !23
  %818 = icmp slt i32 %816, %817
  br i1 %818, label %808, label %819, !llvm.loop !224

819:                                              ; preds = %808
  %820 = sext i32 %817 to i64
  %821 = sub nsw i64 0, %820
  br label %822

822:                                              ; preds = %819, %795
  %823 = phi i64 [ %821, %819 ], [ %804, %795 ]
  %824 = phi i32 [ %817, %819 ], [ %796, %795 ]
  %825 = phi ptr [ %813, %819 ], [ %799, %795 ]
  %826 = phi ptr [ %815, %819 ], [ %798, %795 ]
  %827 = getelementptr inbounds %struct.BPoint, ptr %826, i64 %823
  %828 = icmp eq i32 %800, %8
  br i1 %828, label %829, label %795, !llvm.loop !225

829:                                              ; preds = %822
  %830 = load i32, ptr %249, align 4, !tbaa !31
  br label %831

831:                                              ; preds = %829, %791, %783, %779, %769
  %832 = phi i32 [ %770, %783 ], [ %770, %779 ], [ %770, %769 ], [ %830, %829 ], [ %770, %791 ]
  %833 = phi i32 [ %771, %783 ], [ %771, %779 ], [ %771, %769 ], [ %824, %829 ], [ %771, %791 ]
  %834 = phi i32 [ %772, %783 ], [ %772, %779 ], [ %772, %769 ], [ %824, %829 ], [ %772, %791 ]
  %835 = phi i32 [ %773, %783 ], [ %773, %779 ], [ %773, %769 ], [ %824, %829 ], [ %772, %791 ]
  %836 = phi ptr [ %774, %783 ], [ %774, %779 ], [ %774, %769 ], [ %825, %829 ], [ %774, %791 ]
  %837 = phi ptr [ %775, %783 ], [ %775, %779 ], [ %775, %769 ], [ %827, %829 ], [ %794, %791 ]
  %838 = add nuw nsw i64 %746, 1
  %839 = sext i32 %832 to i64
  %840 = icmp slt i64 %838, %839
  br i1 %840, label %741, label %841, !llvm.loop !227

841:                                              ; preds = %831
  %842 = load ptr, ptr %359, align 8, !tbaa !32
  br label %843

843:                                              ; preds = %841, %729
  %844 = phi ptr [ %842, %841 ], [ %736, %729 ]
  %845 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %845(ptr noundef %844) #20
  store ptr %735, ptr %359, align 8, !tbaa !32
  %846 = load i32, ptr %249, align 4, !tbaa !31
  %847 = add nsw i32 %846, %664
  store i32 %847, ptr %249, align 4, !tbaa !31
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %50) #20
  br label %961

848:                                              ; preds = %726, %861
  %849 = phi i64 [ %854, %861 ], [ %727, %726 ]
  %850 = phi i32 [ %862, %861 ], [ %728, %726 ]
  %851 = getelementptr inbounds i32, ptr %353, i64 %849
  %852 = load i32, ptr %851, align 4, !tbaa !74
  %853 = icmp eq i32 %852, %417
  %854 = add nuw nsw i64 %849, 1
  br i1 %853, label %855, label %861

855:                                              ; preds = %848
  %856 = getelementptr inbounds i32, ptr %353, i64 %854
  %857 = load i32, ptr %856, align 4, !tbaa !74
  %858 = icmp eq i32 %857, %417
  %859 = select i1 %858, i32 %8, i32 0
  %860 = add nsw i32 %859, %850
  br label %861

861:                                              ; preds = %855, %848
  %862 = phi i32 [ %860, %855 ], [ %850, %848 ]
  %863 = icmp eq i64 %854, %670
  br i1 %863, label %864, label %848, !llvm.loop !228

864:                                              ; preds = %861, %720
  %865 = phi i32 [ %724, %720 ], [ %862, %861 ]
  %866 = icmp eq i32 %865, 0
  br i1 %866, label %961, label %867

867:                                              ; preds = %864
  %868 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %869 = add nsw i32 %865, %416
  %870 = mul nsw i32 %869, %417
  %871 = sext i32 %870 to i64
  %872 = mul nsw i64 %871, 36
  %873 = call ptr %868(i64 noundef %872, ptr noundef nonnull @.str.202) #20
  %874 = load ptr, ptr %359, align 8, !tbaa !32
  %875 = load i32, ptr %249, align 4, !tbaa !31
  %876 = icmp sgt i32 %875, 0
  br i1 %876, label %877, label %956

877:                                              ; preds = %867
  %878 = load i32, ptr %349, align 8, !tbaa !23
  br label %879

879:                                              ; preds = %947, %877
  %880 = phi i32 [ %948, %947 ], [ %878, %877 ]
  %881 = phi ptr [ %950, %947 ], [ %874, %877 ]
  %882 = phi i32 [ %951, %947 ], [ 0, %877 ]
  %883 = phi ptr [ %949, %947 ], [ %873, %877 ]
  %884 = icmp sgt i32 %880, 0
  br i1 %884, label %885, label %947

885:                                              ; preds = %879
  br i1 %20, label %886, label %930

886:                                              ; preds = %885, %916
  %887 = phi i64 [ %919, %916 ], [ 0, %885 ]
  %888 = phi ptr [ %899, %916 ], [ %881, %885 ]
  %889 = phi ptr [ %918, %916 ], [ %883, %885 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %889, ptr noundef nonnull align 4 dereferenceable(36) %888, i64 36, i1 false), !tbaa.struct !168
  %890 = load ptr, ptr %16, align 8, !tbaa !47
  %891 = icmp eq ptr %890, null
  br i1 %891, label %897, label %892

892:                                              ; preds = %886
  %893 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %890, ptr noundef nonnull %888, ptr noundef null) #20
  %894 = icmp eq ptr %893, null
  br i1 %894, label %897, label %895

895:                                              ; preds = %892
  %896 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %896, ptr noundef nonnull %889, ptr noundef nonnull %893) #20
  br label %897

897:                                              ; preds = %895, %892, %886
  %898 = getelementptr inbounds %struct.BPoint, ptr %889, i64 1
  %899 = getelementptr inbounds %struct.BPoint, ptr %888, i64 1
  %900 = load i32, ptr %349, align 8, !tbaa !23
  %901 = add nsw i32 %900, -1
  %902 = sext i32 %901 to i64
  %903 = icmp slt i64 %887, %902
  br i1 %903, label %904, label %916

904:                                              ; preds = %897
  %905 = getelementptr inbounds i32, ptr %353, i64 %887
  %906 = load i32, ptr %905, align 4, !tbaa !74
  %907 = load i32, ptr %249, align 4, !tbaa !31
  %908 = icmp eq i32 %906, %907
  br i1 %908, label %909, label %916

909:                                              ; preds = %904
  %910 = add nuw nsw i64 %887, 1
  %911 = getelementptr inbounds i32, ptr %353, i64 %910
  %912 = load i32, ptr %911, align 4, !tbaa !74
  %913 = icmp eq i32 %912, %906
  br i1 %913, label %922, label %916

914:                                              ; preds = %922
  %915 = load i32, ptr %349, align 8, !tbaa !23
  br label %916

916:                                              ; preds = %914, %909, %904, %897
  %917 = phi i32 [ %900, %909 ], [ %900, %904 ], [ %900, %897 ], [ %915, %914 ]
  %918 = phi ptr [ %898, %909 ], [ %898, %904 ], [ %898, %897 ], [ %928, %914 ]
  %919 = add nuw nsw i64 %887, 1
  %920 = sext i32 %917 to i64
  %921 = icmp slt i64 %919, %920
  br i1 %921, label %886, label %947, !llvm.loop !229

922:                                              ; preds = %909, %922
  %923 = phi i32 [ %925, %922 ], [ 0, %909 ]
  %924 = phi ptr [ %928, %922 ], [ %898, %909 ]
  %925 = add nuw nsw i32 %923, 1
  %926 = sitofp i32 %925 to float
  %927 = fmul fast float %926, %45
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %924, ptr noundef nonnull align 4 dereferenceable(36) %888, i64 36, i1 false), !tbaa.struct !168
  call void @interp_v4_v4v4(ptr noundef nonnull %924, ptr noundef nonnull %888, ptr noundef nonnull %899, float noundef nofpclass(nan inf) %927) #20
  %928 = getelementptr inbounds %struct.BPoint, ptr %924, i64 1
  %929 = icmp eq i32 %925, %8
  br i1 %929, label %914, label %922, !llvm.loop !230

930:                                              ; preds = %885, %941
  %931 = phi ptr [ %943, %941 ], [ %881, %885 ]
  %932 = phi i32 [ %944, %941 ], [ 0, %885 ]
  %933 = phi ptr [ %942, %941 ], [ %883, %885 ]
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %933, ptr noundef nonnull align 4 dereferenceable(36) %931, i64 36, i1 false), !tbaa.struct !168
  %934 = load ptr, ptr %16, align 8, !tbaa !47
  %935 = icmp eq ptr %934, null
  br i1 %935, label %941, label %936

936:                                              ; preds = %930
  %937 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %934, ptr noundef nonnull %931, ptr noundef null) #20
  %938 = icmp eq ptr %937, null
  br i1 %938, label %941, label %939

939:                                              ; preds = %936
  %940 = load ptr, ptr %16, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %940, ptr noundef nonnull %933, ptr noundef nonnull %937) #20
  br label %941

941:                                              ; preds = %939, %936, %930
  %942 = getelementptr inbounds %struct.BPoint, ptr %933, i64 1
  %943 = getelementptr inbounds %struct.BPoint, ptr %931, i64 1
  %944 = add nuw nsw i32 %932, 1
  %945 = load i32, ptr %349, align 8, !tbaa !23
  %946 = icmp slt i32 %944, %945
  br i1 %946, label %930, label %947, !llvm.loop !229

947:                                              ; preds = %941, %916, %879
  %948 = phi i32 [ %880, %879 ], [ %917, %916 ], [ %945, %941 ]
  %949 = phi ptr [ %883, %879 ], [ %918, %916 ], [ %942, %941 ]
  %950 = phi ptr [ %881, %879 ], [ %899, %916 ], [ %943, %941 ]
  %951 = add nuw nsw i32 %882, 1
  %952 = load i32, ptr %249, align 4, !tbaa !31
  %953 = icmp slt i32 %951, %952
  br i1 %953, label %879, label %954, !llvm.loop !231

954:                                              ; preds = %947
  %955 = load ptr, ptr %359, align 8, !tbaa !32
  br label %956

956:                                              ; preds = %954, %867
  %957 = phi ptr [ %955, %954 ], [ %874, %867 ]
  %958 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %958(ptr noundef %957) #20
  store ptr %873, ptr %359, align 8, !tbaa !32
  %959 = load i32, ptr %349, align 8, !tbaa !23
  %960 = add nsw i32 %959, %865
  store i32 %960, ptr %349, align 8, !tbaa !23
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %50) #20
  br label %961

961:                                              ; preds = %956, %864, %843, %666, %638
  %962 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %962(ptr noundef %353) #20
  %963 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %963(ptr noundef %358) #20
  br label %964

964:                                              ; preds = %961, %345, %344, %336, %282, %252, %243, %114, %54
  %965 = load ptr, ptr %50, align 8, !tbaa !36
  %966 = icmp eq ptr %965, null
  br i1 %966, label %967, label %49, !llvm.loop !232

967:                                              ; preds = %964, %2
  call void @llvm.lifetime.end.p0(i64 60, ptr nonnull %3) #20
  %968 = load ptr, ptr %9, align 8, !tbaa !17
  %969 = call ptr @BKE_animdata_from_id(ptr noundef %968) #20
  %970 = getelementptr inbounds %struct.Curve, ptr %968, i64 0, i32 4
  %971 = load ptr, ptr %970, align 8, !tbaa !18
  %972 = getelementptr inbounds %struct.EditNurb, ptr %971, i64 0, i32 1
  %973 = load ptr, ptr %972, align 8, !tbaa !47
  %974 = icmp eq ptr %973, null
  br i1 %974, label %992, label %975

975:                                              ; preds = %967
  %976 = call ptr @BKE_animdata_from_id(ptr noundef nonnull %968) #20
  %977 = icmp eq ptr %976, null
  br i1 %977, label %992, label %978

978:                                              ; preds = %975
  %979 = load ptr, ptr %976, align 8, !tbaa !49
  %980 = icmp eq ptr %979, null
  br i1 %980, label %981, label %985

981:                                              ; preds = %978
  %982 = getelementptr inbounds %struct.AnimData, ptr %976, i64 0, i32 5
  %983 = load ptr, ptr %982, align 8, !tbaa !51
  %984 = icmp eq ptr %983, null
  br i1 %984, label %992, label %985

985:                                              ; preds = %981, %978
  %986 = load ptr, ptr %969, align 8, !tbaa !49
  %987 = icmp eq ptr %986, null
  br i1 %987, label %990, label %988

988:                                              ; preds = %985
  %989 = getelementptr inbounds %struct.bAction, ptr %986, i64 0, i32 1
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %968, ptr noundef nonnull %989)
  br label %990

990:                                              ; preds = %988, %985
  %991 = getelementptr inbounds %struct.AnimData, ptr %969, i64 0, i32 5
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %968, ptr noundef nonnull %991)
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %5) #20
  br label %992

992:                                              ; preds = %975, %981, %967, %990
  %993 = load ptr, ptr %9, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %993) #20
  %994 = load ptr, ptr %9, align 8, !tbaa !17
  call void @DAG_id_tag_update(ptr noundef %994, i16 noundef signext 0) #20
  ret i32 4
}

declare ptr @RNA_def_int(ptr noundef, ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #6

declare void @RNA_def_property_flag(ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_spline_type_set(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.64, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.65, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.66, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @set_spline_type_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @WM_menu_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_enum(ptr noundef %9, ptr noundef nonnull @.str.67, ptr noundef nonnull @CURVE_OT_spline_type_set.type_items, i32 noundef 0, ptr noundef nonnull @.str.68, ptr noundef nonnull @.str.69) #20
  %11 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 13
  store ptr %10, ptr %11, align 8, !tbaa !233
  %12 = load ptr, ptr %8, align 8, !tbaa !177
  %13 = tail call ptr @RNA_def_boolean(ptr noundef %12, ptr noundef nonnull @.str.70, i32 noundef 0, ptr noundef nonnull @.str.71, ptr noundef nonnull @.str.72) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @set_spline_type_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call i32 @RNA_boolean_get(ptr noundef %18, ptr noundef nonnull @.str.70) #20
  %20 = trunc i32 %19 to i8
  %21 = load ptr, ptr %17, align 8, !tbaa !178
  %22 = tail call i32 @RNA_enum_get(ptr noundef %21, ptr noundef nonnull @.str.67) #20
  %23 = and i32 %22, -2
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %31, label %25

25:                                               ; preds = %15
  %26 = load ptr, ptr %16, align 8, !tbaa !36
  %27 = icmp eq ptr %26, null
  br i1 %27, label %137, label %28

28:                                               ; preds = %25
  %29 = trunc i32 %22 to i16
  %30 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  br label %34

31:                                               ; preds = %15
  %32 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %33 = load ptr, ptr %32, align 8, !tbaa !150
  tail call void @BKE_report(ptr noundef %33, i32 noundef 32, ptr noundef nonnull @.str.203) #20
  br label %137

34:                                               ; preds = %28, %97
  %35 = phi ptr [ %26, %28 ], [ %100, %97 ]
  %36 = phi i8 [ 0, %28 ], [ %99, %97 ]
  %37 = phi i8 [ 0, %28 ], [ %98, %97 ]
  %38 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 2
  %39 = load i16, ptr %38, align 8, !tbaa !21
  %40 = icmp eq i16 %39, 1
  %41 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 6
  %42 = load i32, ptr %41, align 8, !tbaa !23
  br i1 %40, label %43, label %69

43:                                               ; preds = %34
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %97, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 18
  %47 = load ptr, ptr %46, align 8, !tbaa !24
  br label %51

48:                                               ; preds = %64
  %49 = getelementptr inbounds %struct.BezTriple, ptr %53, i64 1
  %50 = icmp eq i32 %54, 0
  br i1 %50, label %97, label %51, !llvm.loop !25

51:                                               ; preds = %48, %45
  %52 = phi i32 [ %54, %48 ], [ %42, %45 ]
  %53 = phi ptr [ %49, %48 ], [ %47, %45 ]
  %54 = add nsw i32 %52, -1
  %55 = getelementptr inbounds %struct.BezTriple, ptr %53, i64 0, i32 7
  %56 = load i8, ptr %55, align 1, !tbaa !27
  %57 = and i8 %56, 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %88

59:                                               ; preds = %51
  %60 = getelementptr inbounds %struct.BezTriple, ptr %53, i64 0, i32 8
  %61 = load i8, ptr %60, align 4, !tbaa !29
  %62 = and i8 %61, 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %88

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.BezTriple, ptr %53, i64 0, i32 9
  %66 = load i8, ptr %65, align 1, !tbaa !30
  %67 = and i8 %66, 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %48, label %88

69:                                               ; preds = %34
  %70 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 7
  %71 = load i32, ptr %70, align 4, !tbaa !31
  %72 = mul nsw i32 %71, %42
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %97, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 17
  %76 = load ptr, ptr %75, align 8, !tbaa !32
  br label %81

77:                                               ; preds = %81
  %78 = add nsw i32 %82, -1
  %79 = getelementptr inbounds %struct.BPoint, ptr %83, i64 1
  %80 = icmp eq i32 %78, 0
  br i1 %80, label %97, label %81, !llvm.loop !33

81:                                               ; preds = %77, %74
  %82 = phi i32 [ %78, %77 ], [ %72, %74 ]
  %83 = phi ptr [ %79, %77 ], [ %76, %74 ]
  %84 = getelementptr inbounds %struct.BPoint, ptr %83, i64 0, i32 3
  %85 = load i16, ptr %84, align 4, !tbaa !34
  %86 = and i16 %85, 1
  %87 = icmp eq i16 %86, 0
  br i1 %87, label %77, label %88

88:                                               ; preds = %81, %64, %59, %51
  %89 = tail call zeroext i8 @BKE_nurb_type_convert(ptr noundef nonnull %35, i16 noundef signext %29, i8 noundef zeroext %20) #20
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %88
  %92 = load i32, ptr %41, align 8, !tbaa !23
  %93 = icmp eq i32 %42, %92
  %94 = select i1 %93, i8 %37, i8 1
  br label %97

95:                                               ; preds = %88
  %96 = load ptr, ptr %30, align 8, !tbaa !150
  tail call void @BKE_report(ptr noundef %96, i32 noundef 32, ptr noundef nonnull @.str.204) #20
  br label %97

97:                                               ; preds = %77, %48, %69, %43, %91, %95
  %98 = phi i8 [ %37, %95 ], [ %94, %91 ], [ %37, %43 ], [ %37, %69 ], [ %37, %48 ], [ %37, %77 ]
  %99 = phi i8 [ %36, %95 ], [ 1, %91 ], [ %36, %43 ], [ %36, %69 ], [ %36, %48 ], [ %36, %77 ]
  %100 = load ptr, ptr %35, align 8, !tbaa !36
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %34, !llvm.loop !234

102:                                              ; preds = %97
  %103 = icmp eq i8 %99, 0
  br i1 %103, label %137, label %104

104:                                              ; preds = %102
  %105 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = tail call ptr @BKE_animdata_from_id(ptr noundef %106) #20
  %108 = getelementptr inbounds %struct.Curve, ptr %106, i64 0, i32 4
  %109 = load ptr, ptr %108, align 8, !tbaa !18
  %110 = getelementptr inbounds %struct.EditNurb, ptr %109, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !47
  %112 = icmp eq ptr %111, null
  br i1 %112, label %130, label %113

113:                                              ; preds = %104
  %114 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %106) #20
  %115 = icmp eq ptr %114, null
  br i1 %115, label %130, label %116

116:                                              ; preds = %113
  %117 = load ptr, ptr %114, align 8, !tbaa !49
  %118 = icmp eq ptr %117, null
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct.AnimData, ptr %114, i64 0, i32 5
  %121 = load ptr, ptr %120, align 8, !tbaa !51
  %122 = icmp eq ptr %121, null
  br i1 %122, label %130, label %123

123:                                              ; preds = %119, %116
  %124 = load ptr, ptr %107, align 8, !tbaa !49
  %125 = icmp eq ptr %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %struct.bAction, ptr %124, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %106, ptr noundef nonnull %127)
  br label %128

128:                                              ; preds = %126, %123
  %129 = getelementptr inbounds %struct.AnimData, ptr %107, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %106, ptr noundef nonnull %129)
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %3) #20
  br label %130

130:                                              ; preds = %113, %119, %104, %128
  %131 = load ptr, ptr %105, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %131, i16 noundef signext 0) #20
  %132 = load ptr, ptr %105, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %132) #20
  %133 = icmp eq i8 %98, 0
  br i1 %133, label %137, label %134

134:                                              ; preds = %130
  %135 = load ptr, ptr %105, align 8, !tbaa !17
  %136 = getelementptr inbounds %struct.Curve, ptr %135, i64 0, i32 32
  store i32 -1, ptr %136, align 8, !tbaa !174
  br label %137

137:                                              ; preds = %25, %102, %130, %134, %31
  %138 = phi i32 [ 2, %31 ], [ 4, %134 ], [ 4, %130 ], [ 2, %102 ], [ 2, %25 ]
  ret i32 %138
}

declare i32 @WM_menu_invoke(ptr noundef, ptr noundef, ptr noundef) #6

declare ptr @RNA_def_enum(ptr noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_handle_type_set(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.83, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.84, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.85, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @WM_menu_invoke, ptr %4, align 8, !tbaa !176
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @set_handle_type_exec, ptr %5, align 8, !tbaa !145
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_enum(ptr noundef %9, ptr noundef nonnull @.str.67, ptr noundef nonnull @CURVE_OT_handle_type_set.editcurve_handle_type_items, i32 noundef 1, ptr noundef nonnull @.str.68, ptr noundef nonnull @.str.69) #20
  %11 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 13
  store ptr %10, ptr %11, align 8, !tbaa !233
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @set_handle_type_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call i32 @RNA_enum_get(ptr noundef %18, ptr noundef nonnull @.str.67) #20
  %20 = trunc i32 %19 to i8
  tail call void @BKE_nurbList_handles_set(ptr noundef %16, i8 noundef zeroext %20) #20
  %21 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %22) #20
  %23 = load ptr, ptr %21, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %23, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_normals_make_consistent(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.86, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.87, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.88, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_normals_make_consistent_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_boolean(ptr noundef %8, ptr noundef nonnull @.str.89, i32 noundef 0, ptr noundef nonnull @.str.90, ptr noundef nonnull @.str.91) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_normals_make_consistent_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call i32 @RNA_boolean_get(ptr noundef %18, ptr noundef nonnull @.str.89) #20
  %20 = trunc i32 %19 to i8
  tail call void @BKE_nurbList_handles_recalculate(ptr noundef %16, i8 noundef zeroext %20, i8 noundef zeroext 1) #20
  %21 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %22) #20
  %23 = load ptr, ptr %21, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %23, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_make_segment(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.92, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.93, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.94, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @make_segment_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @make_segment_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %5 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 19
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 3
  %8 = load i16, ptr %7, align 8, !tbaa !5
  %9 = and i16 %8, -2
  %10 = icmp eq i16 %9, 2
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.Curve, ptr %6, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !18
  br label %14

14:                                               ; preds = %2, %11
  %15 = phi ptr [ %13, %11 ], [ null, %2 ]
  %16 = icmp eq i16 %8, 3
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = load ptr, ptr %15, align 8, !tbaa !56
  %19 = icmp eq ptr %18, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.Curve, ptr %6, i64 0, i32 16
  br label %24

22:                                               ; preds = %774, %14, %17
  %23 = getelementptr inbounds %struct.Curve, ptr %6, i64 0, i32 16
  br label %1463

24:                                               ; preds = %20, %774
  %25 = phi ptr [ %18, %20 ], [ %775, %774 ]
  %26 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 2
  %27 = load i16, ptr %26, align 8, !tbaa !21
  %28 = icmp eq i16 %27, 1
  %29 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 6
  %30 = load i32, ptr %29, align 8, !tbaa !23
  br i1 %28, label %31, label %57

31:                                               ; preds = %24
  %32 = icmp eq i32 %30, 0
  br i1 %32, label %774, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 18
  %35 = load ptr, ptr %34, align 8, !tbaa !24
  br label %39

36:                                               ; preds = %52
  %37 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 1
  %38 = icmp eq i32 %42, 0
  br i1 %38, label %774, label %39, !llvm.loop !25

39:                                               ; preds = %36, %33
  %40 = phi i32 [ %42, %36 ], [ %30, %33 ]
  %41 = phi ptr [ %37, %36 ], [ %35, %33 ]
  %42 = add nsw i32 %40, -1
  %43 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 7
  %44 = load i8, ptr %43, align 1, !tbaa !27
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %76

47:                                               ; preds = %39
  %48 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 8
  %49 = load i8, ptr %48, align 4, !tbaa !29
  %50 = and i8 %49, 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %76

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 9
  %54 = load i8, ptr %53, align 1, !tbaa !30
  %55 = and i8 %54, 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %36, label %76

57:                                               ; preds = %24
  %58 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = mul nsw i32 %59, %30
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %774, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %64 = load ptr, ptr %63, align 8, !tbaa !32
  br label %69

65:                                               ; preds = %69
  %66 = add nsw i32 %70, -1
  %67 = getelementptr inbounds %struct.BPoint, ptr %71, i64 1
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %774, label %69, !llvm.loop !33

69:                                               ; preds = %65, %62
  %70 = phi i32 [ %66, %65 ], [ %60, %62 ]
  %71 = phi ptr [ %67, %65 ], [ %64, %62 ]
  %72 = getelementptr inbounds %struct.BPoint, ptr %71, i64 0, i32 3
  %73 = load i16, ptr %72, align 4, !tbaa !34
  %74 = and i16 %73, 1
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %65, label %76

76:                                               ; preds = %69, %52, %47, %39
  %77 = icmp sgt i32 %30, 1
  br i1 %77, label %78, label %82

78:                                               ; preds = %76
  %79 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %80 = load i32, ptr %79, align 4, !tbaa !31
  %81 = icmp sgt i32 %80, 1
  br i1 %81, label %777, label %82

82:                                               ; preds = %78, %76
  br i1 %28, label %83, label %263

83:                                               ; preds = %82
  %84 = icmp eq i32 %30, 0
  br i1 %84, label %774, label %85

85:                                               ; preds = %83
  %86 = add nsw i32 %30, -1
  %87 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 18
  %88 = load ptr, ptr %87, align 8, !tbaa !24
  %89 = load i16, ptr %21, align 8, !tbaa !198
  %90 = and i16 %89, 1
  %91 = icmp eq i16 %90, 0
  br i1 %91, label %226, label %92

92:                                               ; preds = %85
  %93 = zext i32 %30 to i64
  %94 = icmp ult i32 %30, 16
  br i1 %94, label %222, label %95

95:                                               ; preds = %92
  %96 = and i64 %93, 4294967280
  %97 = trunc i64 %96 to i32
  %98 = sub i32 %86, %97
  %99 = mul nuw nsw i64 %96, 72
  %100 = getelementptr i8, ptr %88, i64 %99
  %101 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %102 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %103 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %104 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %105 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %106 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %107 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %108 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %109 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %110 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %111 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %112 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %113 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %114 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %115 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  %116 = getelementptr %struct.BezTriple, ptr %88, i64 0, i32 8
  br label %117

117:                                              ; preds = %117, %95
  %118 = phi i64 [ 0, %95 ], [ %214, %117 ]
  %119 = phi <4 x i32> [ zeroinitializer, %95 ], [ %210, %117 ]
  %120 = phi <4 x i32> [ zeroinitializer, %95 ], [ %211, %117 ]
  %121 = phi <4 x i32> [ zeroinitializer, %95 ], [ %212, %117 ]
  %122 = phi <4 x i32> [ zeroinitializer, %95 ], [ %213, %117 ]
  %123 = mul i64 %118, 72
  %124 = mul i64 %118, 72
  %125 = or i64 %124, 72
  %126 = mul i64 %118, 72
  %127 = add i64 %126, 144
  %128 = mul i64 %118, 72
  %129 = add i64 %128, 216
  %130 = mul i64 %118, 72
  %131 = add i64 %130, 288
  %132 = mul i64 %118, 72
  %133 = add i64 %132, 360
  %134 = mul i64 %118, 72
  %135 = add i64 %134, 432
  %136 = mul i64 %118, 72
  %137 = add i64 %136, 504
  %138 = mul i64 %118, 72
  %139 = add i64 %138, 576
  %140 = mul i64 %118, 72
  %141 = add i64 %140, 648
  %142 = mul i64 %118, 72
  %143 = add i64 %142, 720
  %144 = mul i64 %118, 72
  %145 = add i64 %144, 792
  %146 = mul i64 %118, 72
  %147 = add i64 %146, 864
  %148 = mul i64 %118, 72
  %149 = add i64 %148, 936
  %150 = mul i64 %118, 72
  %151 = add i64 %150, 1008
  %152 = mul i64 %118, 72
  %153 = add i64 %152, 1080
  %154 = getelementptr i8, ptr %101, i64 %123
  %155 = getelementptr i8, ptr %102, i64 %125
  %156 = getelementptr i8, ptr %103, i64 %127
  %157 = getelementptr i8, ptr %104, i64 %129
  %158 = getelementptr i8, ptr %105, i64 %131
  %159 = getelementptr i8, ptr %106, i64 %133
  %160 = getelementptr i8, ptr %107, i64 %135
  %161 = getelementptr i8, ptr %108, i64 %137
  %162 = getelementptr i8, ptr %109, i64 %139
  %163 = getelementptr i8, ptr %110, i64 %141
  %164 = getelementptr i8, ptr %111, i64 %143
  %165 = getelementptr i8, ptr %112, i64 %145
  %166 = getelementptr i8, ptr %113, i64 %147
  %167 = getelementptr i8, ptr %114, i64 %149
  %168 = getelementptr i8, ptr %115, i64 %151
  %169 = getelementptr i8, ptr %116, i64 %153
  %170 = load i8, ptr %154, align 4, !tbaa !29
  %171 = load i8, ptr %155, align 4, !tbaa !29
  %172 = load i8, ptr %156, align 4, !tbaa !29
  %173 = load i8, ptr %157, align 4, !tbaa !29
  %174 = insertelement <4 x i8> poison, i8 %170, i64 0
  %175 = insertelement <4 x i8> %174, i8 %171, i64 1
  %176 = insertelement <4 x i8> %175, i8 %172, i64 2
  %177 = insertelement <4 x i8> %176, i8 %173, i64 3
  %178 = load i8, ptr %158, align 4, !tbaa !29
  %179 = load i8, ptr %159, align 4, !tbaa !29
  %180 = load i8, ptr %160, align 4, !tbaa !29
  %181 = load i8, ptr %161, align 4, !tbaa !29
  %182 = insertelement <4 x i8> poison, i8 %178, i64 0
  %183 = insertelement <4 x i8> %182, i8 %179, i64 1
  %184 = insertelement <4 x i8> %183, i8 %180, i64 2
  %185 = insertelement <4 x i8> %184, i8 %181, i64 3
  %186 = load i8, ptr %162, align 4, !tbaa !29
  %187 = load i8, ptr %163, align 4, !tbaa !29
  %188 = load i8, ptr %164, align 4, !tbaa !29
  %189 = load i8, ptr %165, align 4, !tbaa !29
  %190 = insertelement <4 x i8> poison, i8 %186, i64 0
  %191 = insertelement <4 x i8> %190, i8 %187, i64 1
  %192 = insertelement <4 x i8> %191, i8 %188, i64 2
  %193 = insertelement <4 x i8> %192, i8 %189, i64 3
  %194 = load i8, ptr %166, align 4, !tbaa !29
  %195 = load i8, ptr %167, align 4, !tbaa !29
  %196 = load i8, ptr %168, align 4, !tbaa !29
  %197 = load i8, ptr %169, align 4, !tbaa !29
  %198 = insertelement <4 x i8> poison, i8 %194, i64 0
  %199 = insertelement <4 x i8> %198, i8 %195, i64 1
  %200 = insertelement <4 x i8> %199, i8 %196, i64 2
  %201 = insertelement <4 x i8> %200, i8 %197, i64 3
  %202 = and <4 x i8> %177, <i8 1, i8 1, i8 1, i8 1>
  %203 = and <4 x i8> %185, <i8 1, i8 1, i8 1, i8 1>
  %204 = and <4 x i8> %193, <i8 1, i8 1, i8 1, i8 1>
  %205 = and <4 x i8> %201, <i8 1, i8 1, i8 1, i8 1>
  %206 = zext <4 x i8> %202 to <4 x i32>
  %207 = zext <4 x i8> %203 to <4 x i32>
  %208 = zext <4 x i8> %204 to <4 x i32>
  %209 = zext <4 x i8> %205 to <4 x i32>
  %210 = add <4 x i32> %119, %206
  %211 = add <4 x i32> %120, %207
  %212 = add <4 x i32> %121, %208
  %213 = add <4 x i32> %122, %209
  %214 = add nuw i64 %118, 16
  %215 = icmp eq i64 %214, %96
  br i1 %215, label %216, label %117, !llvm.loop !235

216:                                              ; preds = %117
  %217 = add <4 x i32> %211, %210
  %218 = add <4 x i32> %212, %217
  %219 = add <4 x i32> %213, %218
  %220 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %219)
  %221 = icmp eq i64 %96, %93
  br i1 %221, label %416, label %222

222:                                              ; preds = %92, %216
  %223 = phi i32 [ %86, %92 ], [ %98, %216 ]
  %224 = phi i32 [ 0, %92 ], [ %220, %216 ]
  %225 = phi ptr [ %88, %92 ], [ %100, %216 ]
  br label %251

226:                                              ; preds = %85, %246
  %227 = phi i32 [ %249, %246 ], [ %86, %85 ]
  %228 = phi i32 [ %247, %246 ], [ 0, %85 ]
  %229 = phi ptr [ %248, %246 ], [ %88, %85 ]
  %230 = getelementptr inbounds %struct.BezTriple, ptr %229, i64 0, i32 8
  %231 = load i8, ptr %230, align 4, !tbaa !29
  %232 = and i8 %231, 1
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %234, label %244

234:                                              ; preds = %226
  %235 = getelementptr inbounds %struct.BezTriple, ptr %229, i64 0, i32 7
  %236 = load i8, ptr %235, align 1, !tbaa !27
  %237 = and i8 %236, 1
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %239, label %244

239:                                              ; preds = %234
  %240 = getelementptr inbounds %struct.BezTriple, ptr %229, i64 0, i32 9
  %241 = load i8, ptr %240, align 1, !tbaa !30
  %242 = and i8 %241, 1
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %246, label %244

244:                                              ; preds = %239, %234, %226
  %245 = add nsw i32 %228, 1
  br label %246

246:                                              ; preds = %244, %239
  %247 = phi i32 [ %245, %244 ], [ %228, %239 ]
  %248 = getelementptr inbounds %struct.BezTriple, ptr %229, i64 1
  %249 = add nsw i32 %227, -1
  %250 = icmp eq i32 %227, 0
  br i1 %250, label %416, label %226, !llvm.loop !236

251:                                              ; preds = %222, %251
  %252 = phi i32 [ %261, %251 ], [ %223, %222 ]
  %253 = phi i32 [ %259, %251 ], [ %224, %222 ]
  %254 = phi ptr [ %260, %251 ], [ %225, %222 ]
  %255 = getelementptr inbounds %struct.BezTriple, ptr %254, i64 0, i32 8
  %256 = load i8, ptr %255, align 4, !tbaa !29
  %257 = and i8 %256, 1
  %258 = zext i8 %257 to i32
  %259 = add nuw nsw i32 %253, %258
  %260 = getelementptr inbounds %struct.BezTriple, ptr %254, i64 1
  %261 = add nsw i32 %252, -1
  %262 = icmp eq i32 %252, 0
  br i1 %262, label %416, label %251, !llvm.loop !237

263:                                              ; preds = %82
  %264 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %265 = load i32, ptr %264, align 4, !tbaa !31
  %266 = mul nsw i32 %265, %30
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %774, label %268

268:                                              ; preds = %263
  %269 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %270 = load ptr, ptr %269, align 8, !tbaa !32
  %271 = zext i32 %266 to i64
  %272 = icmp ult i32 %266, 16
  br i1 %272, label %400, label %273

273:                                              ; preds = %268
  %274 = and i64 %271, 4294967280
  %275 = trunc i64 %274 to i32
  %276 = sub i32 %266, %275
  %277 = mul nuw nsw i64 %274, 36
  %278 = getelementptr i8, ptr %270, i64 %277
  %279 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %280 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %281 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %282 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %283 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %284 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %285 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %286 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %287 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %288 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %289 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %290 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %291 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %292 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %293 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  %294 = getelementptr %struct.BPoint, ptr %270, i64 0, i32 3
  br label %295

295:                                              ; preds = %295, %273
  %296 = phi i64 [ 0, %273 ], [ %392, %295 ]
  %297 = phi <4 x i32> [ zeroinitializer, %273 ], [ %388, %295 ]
  %298 = phi <4 x i32> [ zeroinitializer, %273 ], [ %389, %295 ]
  %299 = phi <4 x i32> [ zeroinitializer, %273 ], [ %390, %295 ]
  %300 = phi <4 x i32> [ zeroinitializer, %273 ], [ %391, %295 ]
  %301 = mul i64 %296, 36
  %302 = mul i64 %296, 36
  %303 = or i64 %302, 36
  %304 = mul i64 %296, 36
  %305 = add i64 %304, 72
  %306 = mul i64 %296, 36
  %307 = add i64 %306, 108
  %308 = mul i64 %296, 36
  %309 = add i64 %308, 144
  %310 = mul i64 %296, 36
  %311 = add i64 %310, 180
  %312 = mul i64 %296, 36
  %313 = add i64 %312, 216
  %314 = mul i64 %296, 36
  %315 = add i64 %314, 252
  %316 = mul i64 %296, 36
  %317 = add i64 %316, 288
  %318 = mul i64 %296, 36
  %319 = add i64 %318, 324
  %320 = mul i64 %296, 36
  %321 = add i64 %320, 360
  %322 = mul i64 %296, 36
  %323 = add i64 %322, 396
  %324 = mul i64 %296, 36
  %325 = add i64 %324, 432
  %326 = mul i64 %296, 36
  %327 = add i64 %326, 468
  %328 = mul i64 %296, 36
  %329 = add i64 %328, 504
  %330 = mul i64 %296, 36
  %331 = add i64 %330, 540
  %332 = getelementptr i8, ptr %279, i64 %301
  %333 = getelementptr i8, ptr %280, i64 %303
  %334 = getelementptr i8, ptr %281, i64 %305
  %335 = getelementptr i8, ptr %282, i64 %307
  %336 = getelementptr i8, ptr %283, i64 %309
  %337 = getelementptr i8, ptr %284, i64 %311
  %338 = getelementptr i8, ptr %285, i64 %313
  %339 = getelementptr i8, ptr %286, i64 %315
  %340 = getelementptr i8, ptr %287, i64 %317
  %341 = getelementptr i8, ptr %288, i64 %319
  %342 = getelementptr i8, ptr %289, i64 %321
  %343 = getelementptr i8, ptr %290, i64 %323
  %344 = getelementptr i8, ptr %291, i64 %325
  %345 = getelementptr i8, ptr %292, i64 %327
  %346 = getelementptr i8, ptr %293, i64 %329
  %347 = getelementptr i8, ptr %294, i64 %331
  %348 = load i16, ptr %332, align 4, !tbaa !34
  %349 = load i16, ptr %333, align 4, !tbaa !34
  %350 = load i16, ptr %334, align 4, !tbaa !34
  %351 = load i16, ptr %335, align 4, !tbaa !34
  %352 = insertelement <4 x i16> poison, i16 %348, i64 0
  %353 = insertelement <4 x i16> %352, i16 %349, i64 1
  %354 = insertelement <4 x i16> %353, i16 %350, i64 2
  %355 = insertelement <4 x i16> %354, i16 %351, i64 3
  %356 = load i16, ptr %336, align 4, !tbaa !34
  %357 = load i16, ptr %337, align 4, !tbaa !34
  %358 = load i16, ptr %338, align 4, !tbaa !34
  %359 = load i16, ptr %339, align 4, !tbaa !34
  %360 = insertelement <4 x i16> poison, i16 %356, i64 0
  %361 = insertelement <4 x i16> %360, i16 %357, i64 1
  %362 = insertelement <4 x i16> %361, i16 %358, i64 2
  %363 = insertelement <4 x i16> %362, i16 %359, i64 3
  %364 = load i16, ptr %340, align 4, !tbaa !34
  %365 = load i16, ptr %341, align 4, !tbaa !34
  %366 = load i16, ptr %342, align 4, !tbaa !34
  %367 = load i16, ptr %343, align 4, !tbaa !34
  %368 = insertelement <4 x i16> poison, i16 %364, i64 0
  %369 = insertelement <4 x i16> %368, i16 %365, i64 1
  %370 = insertelement <4 x i16> %369, i16 %366, i64 2
  %371 = insertelement <4 x i16> %370, i16 %367, i64 3
  %372 = load i16, ptr %344, align 4, !tbaa !34
  %373 = load i16, ptr %345, align 4, !tbaa !34
  %374 = load i16, ptr %346, align 4, !tbaa !34
  %375 = load i16, ptr %347, align 4, !tbaa !34
  %376 = insertelement <4 x i16> poison, i16 %372, i64 0
  %377 = insertelement <4 x i16> %376, i16 %373, i64 1
  %378 = insertelement <4 x i16> %377, i16 %374, i64 2
  %379 = insertelement <4 x i16> %378, i16 %375, i64 3
  %380 = and <4 x i16> %355, <i16 1, i16 1, i16 1, i16 1>
  %381 = and <4 x i16> %363, <i16 1, i16 1, i16 1, i16 1>
  %382 = and <4 x i16> %371, <i16 1, i16 1, i16 1, i16 1>
  %383 = and <4 x i16> %379, <i16 1, i16 1, i16 1, i16 1>
  %384 = zext <4 x i16> %380 to <4 x i32>
  %385 = zext <4 x i16> %381 to <4 x i32>
  %386 = zext <4 x i16> %382 to <4 x i32>
  %387 = zext <4 x i16> %383 to <4 x i32>
  %388 = add <4 x i32> %297, %384
  %389 = add <4 x i32> %298, %385
  %390 = add <4 x i32> %299, %386
  %391 = add <4 x i32> %300, %387
  %392 = add nuw i64 %296, 16
  %393 = icmp eq i64 %392, %274
  br i1 %393, label %394, label %295, !llvm.loop !238

394:                                              ; preds = %295
  %395 = add <4 x i32> %389, %388
  %396 = add <4 x i32> %390, %395
  %397 = add <4 x i32> %391, %396
  %398 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %397)
  %399 = icmp eq i64 %274, %271
  br i1 %399, label %416, label %400

400:                                              ; preds = %268, %394
  %401 = phi i32 [ 0, %268 ], [ %398, %394 ]
  %402 = phi i32 [ %266, %268 ], [ %276, %394 ]
  %403 = phi ptr [ %270, %268 ], [ %278, %394 ]
  br label %404

404:                                              ; preds = %400, %404
  %405 = phi i32 [ %413, %404 ], [ %401, %400 ]
  %406 = phi i32 [ %408, %404 ], [ %402, %400 ]
  %407 = phi ptr [ %414, %404 ], [ %403, %400 ]
  %408 = add nsw i32 %406, -1
  %409 = getelementptr inbounds %struct.BPoint, ptr %407, i64 0, i32 3
  %410 = load i16, ptr %409, align 4, !tbaa !34
  %411 = and i16 %410, 1
  %412 = zext i16 %411 to i32
  %413 = add nuw nsw i32 %405, %412
  %414 = getelementptr inbounds %struct.BPoint, ptr %407, i64 1
  %415 = icmp eq i32 %408, 0
  br i1 %415, label %416, label %404, !llvm.loop !239

416:                                              ; preds = %404, %251, %246, %394, %216
  %417 = phi i32 [ %220, %216 ], [ %398, %394 ], [ %247, %246 ], [ %259, %251 ], [ %413, %404 ]
  %418 = icmp sgt i32 %417, 1
  br i1 %418, label %777, label %419

419:                                              ; preds = %416
  br i1 %28, label %420, label %600

420:                                              ; preds = %419
  %421 = icmp eq i32 %30, 0
  br i1 %421, label %774, label %422

422:                                              ; preds = %420
  %423 = add nsw i32 %30, -1
  %424 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 18
  %425 = load ptr, ptr %424, align 8, !tbaa !24
  %426 = load i16, ptr %21, align 8, !tbaa !198
  %427 = and i16 %426, 1
  %428 = icmp eq i16 %427, 0
  br i1 %428, label %563, label %429

429:                                              ; preds = %422
  %430 = zext i32 %30 to i64
  %431 = icmp ult i32 %30, 16
  br i1 %431, label %559, label %432

432:                                              ; preds = %429
  %433 = and i64 %430, 4294967280
  %434 = trunc i64 %433 to i32
  %435 = sub i32 %423, %434
  %436 = mul nuw nsw i64 %433, 72
  %437 = getelementptr i8, ptr %425, i64 %436
  %438 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %439 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %440 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %441 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %442 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %443 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %444 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %445 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %446 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %447 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %448 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %449 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %450 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %451 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %452 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  %453 = getelementptr %struct.BezTriple, ptr %425, i64 0, i32 8
  br label %454

454:                                              ; preds = %454, %432
  %455 = phi i64 [ 0, %432 ], [ %551, %454 ]
  %456 = phi <4 x i32> [ zeroinitializer, %432 ], [ %547, %454 ]
  %457 = phi <4 x i32> [ zeroinitializer, %432 ], [ %548, %454 ]
  %458 = phi <4 x i32> [ zeroinitializer, %432 ], [ %549, %454 ]
  %459 = phi <4 x i32> [ zeroinitializer, %432 ], [ %550, %454 ]
  %460 = mul i64 %455, 72
  %461 = mul i64 %455, 72
  %462 = or i64 %461, 72
  %463 = mul i64 %455, 72
  %464 = add i64 %463, 144
  %465 = mul i64 %455, 72
  %466 = add i64 %465, 216
  %467 = mul i64 %455, 72
  %468 = add i64 %467, 288
  %469 = mul i64 %455, 72
  %470 = add i64 %469, 360
  %471 = mul i64 %455, 72
  %472 = add i64 %471, 432
  %473 = mul i64 %455, 72
  %474 = add i64 %473, 504
  %475 = mul i64 %455, 72
  %476 = add i64 %475, 576
  %477 = mul i64 %455, 72
  %478 = add i64 %477, 648
  %479 = mul i64 %455, 72
  %480 = add i64 %479, 720
  %481 = mul i64 %455, 72
  %482 = add i64 %481, 792
  %483 = mul i64 %455, 72
  %484 = add i64 %483, 864
  %485 = mul i64 %455, 72
  %486 = add i64 %485, 936
  %487 = mul i64 %455, 72
  %488 = add i64 %487, 1008
  %489 = mul i64 %455, 72
  %490 = add i64 %489, 1080
  %491 = getelementptr i8, ptr %438, i64 %460
  %492 = getelementptr i8, ptr %439, i64 %462
  %493 = getelementptr i8, ptr %440, i64 %464
  %494 = getelementptr i8, ptr %441, i64 %466
  %495 = getelementptr i8, ptr %442, i64 %468
  %496 = getelementptr i8, ptr %443, i64 %470
  %497 = getelementptr i8, ptr %444, i64 %472
  %498 = getelementptr i8, ptr %445, i64 %474
  %499 = getelementptr i8, ptr %446, i64 %476
  %500 = getelementptr i8, ptr %447, i64 %478
  %501 = getelementptr i8, ptr %448, i64 %480
  %502 = getelementptr i8, ptr %449, i64 %482
  %503 = getelementptr i8, ptr %450, i64 %484
  %504 = getelementptr i8, ptr %451, i64 %486
  %505 = getelementptr i8, ptr %452, i64 %488
  %506 = getelementptr i8, ptr %453, i64 %490
  %507 = load i8, ptr %491, align 4, !tbaa !29
  %508 = load i8, ptr %492, align 4, !tbaa !29
  %509 = load i8, ptr %493, align 4, !tbaa !29
  %510 = load i8, ptr %494, align 4, !tbaa !29
  %511 = insertelement <4 x i8> poison, i8 %507, i64 0
  %512 = insertelement <4 x i8> %511, i8 %508, i64 1
  %513 = insertelement <4 x i8> %512, i8 %509, i64 2
  %514 = insertelement <4 x i8> %513, i8 %510, i64 3
  %515 = load i8, ptr %495, align 4, !tbaa !29
  %516 = load i8, ptr %496, align 4, !tbaa !29
  %517 = load i8, ptr %497, align 4, !tbaa !29
  %518 = load i8, ptr %498, align 4, !tbaa !29
  %519 = insertelement <4 x i8> poison, i8 %515, i64 0
  %520 = insertelement <4 x i8> %519, i8 %516, i64 1
  %521 = insertelement <4 x i8> %520, i8 %517, i64 2
  %522 = insertelement <4 x i8> %521, i8 %518, i64 3
  %523 = load i8, ptr %499, align 4, !tbaa !29
  %524 = load i8, ptr %500, align 4, !tbaa !29
  %525 = load i8, ptr %501, align 4, !tbaa !29
  %526 = load i8, ptr %502, align 4, !tbaa !29
  %527 = insertelement <4 x i8> poison, i8 %523, i64 0
  %528 = insertelement <4 x i8> %527, i8 %524, i64 1
  %529 = insertelement <4 x i8> %528, i8 %525, i64 2
  %530 = insertelement <4 x i8> %529, i8 %526, i64 3
  %531 = load i8, ptr %503, align 4, !tbaa !29
  %532 = load i8, ptr %504, align 4, !tbaa !29
  %533 = load i8, ptr %505, align 4, !tbaa !29
  %534 = load i8, ptr %506, align 4, !tbaa !29
  %535 = insertelement <4 x i8> poison, i8 %531, i64 0
  %536 = insertelement <4 x i8> %535, i8 %532, i64 1
  %537 = insertelement <4 x i8> %536, i8 %533, i64 2
  %538 = insertelement <4 x i8> %537, i8 %534, i64 3
  %539 = and <4 x i8> %514, <i8 1, i8 1, i8 1, i8 1>
  %540 = and <4 x i8> %522, <i8 1, i8 1, i8 1, i8 1>
  %541 = and <4 x i8> %530, <i8 1, i8 1, i8 1, i8 1>
  %542 = and <4 x i8> %538, <i8 1, i8 1, i8 1, i8 1>
  %543 = zext <4 x i8> %539 to <4 x i32>
  %544 = zext <4 x i8> %540 to <4 x i32>
  %545 = zext <4 x i8> %541 to <4 x i32>
  %546 = zext <4 x i8> %542 to <4 x i32>
  %547 = add <4 x i32> %456, %543
  %548 = add <4 x i32> %457, %544
  %549 = add <4 x i32> %458, %545
  %550 = add <4 x i32> %459, %546
  %551 = add nuw i64 %455, 16
  %552 = icmp eq i64 %551, %433
  br i1 %552, label %553, label %454, !llvm.loop !240

553:                                              ; preds = %454
  %554 = add <4 x i32> %548, %547
  %555 = add <4 x i32> %549, %554
  %556 = add <4 x i32> %550, %555
  %557 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %556)
  %558 = icmp eq i64 %433, %430
  br i1 %558, label %753, label %559

559:                                              ; preds = %429, %553
  %560 = phi i32 [ %423, %429 ], [ %435, %553 ]
  %561 = phi i32 [ 0, %429 ], [ %557, %553 ]
  %562 = phi ptr [ %425, %429 ], [ %437, %553 ]
  br label %588

563:                                              ; preds = %422, %583
  %564 = phi i32 [ %586, %583 ], [ %423, %422 ]
  %565 = phi i32 [ %584, %583 ], [ 0, %422 ]
  %566 = phi ptr [ %585, %583 ], [ %425, %422 ]
  %567 = getelementptr inbounds %struct.BezTriple, ptr %566, i64 0, i32 8
  %568 = load i8, ptr %567, align 4, !tbaa !29
  %569 = and i8 %568, 1
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %571, label %581

571:                                              ; preds = %563
  %572 = getelementptr inbounds %struct.BezTriple, ptr %566, i64 0, i32 7
  %573 = load i8, ptr %572, align 1, !tbaa !27
  %574 = and i8 %573, 1
  %575 = icmp eq i8 %574, 0
  br i1 %575, label %576, label %581

576:                                              ; preds = %571
  %577 = getelementptr inbounds %struct.BezTriple, ptr %566, i64 0, i32 9
  %578 = load i8, ptr %577, align 1, !tbaa !30
  %579 = and i8 %578, 1
  %580 = icmp eq i8 %579, 0
  br i1 %580, label %583, label %581

581:                                              ; preds = %576, %571, %563
  %582 = add nsw i32 %565, 1
  br label %583

583:                                              ; preds = %581, %576
  %584 = phi i32 [ %582, %581 ], [ %565, %576 ]
  %585 = getelementptr inbounds %struct.BezTriple, ptr %566, i64 1
  %586 = add nsw i32 %564, -1
  %587 = icmp eq i32 %564, 0
  br i1 %587, label %753, label %563, !llvm.loop !236

588:                                              ; preds = %559, %588
  %589 = phi i32 [ %598, %588 ], [ %560, %559 ]
  %590 = phi i32 [ %596, %588 ], [ %561, %559 ]
  %591 = phi ptr [ %597, %588 ], [ %562, %559 ]
  %592 = getelementptr inbounds %struct.BezTriple, ptr %591, i64 0, i32 8
  %593 = load i8, ptr %592, align 4, !tbaa !29
  %594 = and i8 %593, 1
  %595 = zext i8 %594 to i32
  %596 = add nuw nsw i32 %590, %595
  %597 = getelementptr inbounds %struct.BezTriple, ptr %591, i64 1
  %598 = add nsw i32 %589, -1
  %599 = icmp eq i32 %589, 0
  br i1 %599, label %753, label %588, !llvm.loop !241

600:                                              ; preds = %419
  %601 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %602 = load i32, ptr %601, align 4, !tbaa !31
  %603 = mul nsw i32 %602, %30
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %774, label %605

605:                                              ; preds = %600
  %606 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %607 = load ptr, ptr %606, align 8, !tbaa !32
  %608 = zext i32 %603 to i64
  %609 = icmp ult i32 %603, 16
  br i1 %609, label %737, label %610

610:                                              ; preds = %605
  %611 = and i64 %608, 4294967280
  %612 = trunc i64 %611 to i32
  %613 = sub i32 %603, %612
  %614 = mul nuw nsw i64 %611, 36
  %615 = getelementptr i8, ptr %607, i64 %614
  %616 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %617 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %618 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %619 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %620 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %621 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %622 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %623 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %624 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %625 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %626 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %627 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %628 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %629 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %630 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  %631 = getelementptr %struct.BPoint, ptr %607, i64 0, i32 3
  br label %632

632:                                              ; preds = %632, %610
  %633 = phi i64 [ 0, %610 ], [ %729, %632 ]
  %634 = phi <4 x i32> [ zeroinitializer, %610 ], [ %725, %632 ]
  %635 = phi <4 x i32> [ zeroinitializer, %610 ], [ %726, %632 ]
  %636 = phi <4 x i32> [ zeroinitializer, %610 ], [ %727, %632 ]
  %637 = phi <4 x i32> [ zeroinitializer, %610 ], [ %728, %632 ]
  %638 = mul i64 %633, 36
  %639 = mul i64 %633, 36
  %640 = or i64 %639, 36
  %641 = mul i64 %633, 36
  %642 = add i64 %641, 72
  %643 = mul i64 %633, 36
  %644 = add i64 %643, 108
  %645 = mul i64 %633, 36
  %646 = add i64 %645, 144
  %647 = mul i64 %633, 36
  %648 = add i64 %647, 180
  %649 = mul i64 %633, 36
  %650 = add i64 %649, 216
  %651 = mul i64 %633, 36
  %652 = add i64 %651, 252
  %653 = mul i64 %633, 36
  %654 = add i64 %653, 288
  %655 = mul i64 %633, 36
  %656 = add i64 %655, 324
  %657 = mul i64 %633, 36
  %658 = add i64 %657, 360
  %659 = mul i64 %633, 36
  %660 = add i64 %659, 396
  %661 = mul i64 %633, 36
  %662 = add i64 %661, 432
  %663 = mul i64 %633, 36
  %664 = add i64 %663, 468
  %665 = mul i64 %633, 36
  %666 = add i64 %665, 504
  %667 = mul i64 %633, 36
  %668 = add i64 %667, 540
  %669 = getelementptr i8, ptr %616, i64 %638
  %670 = getelementptr i8, ptr %617, i64 %640
  %671 = getelementptr i8, ptr %618, i64 %642
  %672 = getelementptr i8, ptr %619, i64 %644
  %673 = getelementptr i8, ptr %620, i64 %646
  %674 = getelementptr i8, ptr %621, i64 %648
  %675 = getelementptr i8, ptr %622, i64 %650
  %676 = getelementptr i8, ptr %623, i64 %652
  %677 = getelementptr i8, ptr %624, i64 %654
  %678 = getelementptr i8, ptr %625, i64 %656
  %679 = getelementptr i8, ptr %626, i64 %658
  %680 = getelementptr i8, ptr %627, i64 %660
  %681 = getelementptr i8, ptr %628, i64 %662
  %682 = getelementptr i8, ptr %629, i64 %664
  %683 = getelementptr i8, ptr %630, i64 %666
  %684 = getelementptr i8, ptr %631, i64 %668
  %685 = load i16, ptr %669, align 4, !tbaa !34
  %686 = load i16, ptr %670, align 4, !tbaa !34
  %687 = load i16, ptr %671, align 4, !tbaa !34
  %688 = load i16, ptr %672, align 4, !tbaa !34
  %689 = insertelement <4 x i16> poison, i16 %685, i64 0
  %690 = insertelement <4 x i16> %689, i16 %686, i64 1
  %691 = insertelement <4 x i16> %690, i16 %687, i64 2
  %692 = insertelement <4 x i16> %691, i16 %688, i64 3
  %693 = load i16, ptr %673, align 4, !tbaa !34
  %694 = load i16, ptr %674, align 4, !tbaa !34
  %695 = load i16, ptr %675, align 4, !tbaa !34
  %696 = load i16, ptr %676, align 4, !tbaa !34
  %697 = insertelement <4 x i16> poison, i16 %693, i64 0
  %698 = insertelement <4 x i16> %697, i16 %694, i64 1
  %699 = insertelement <4 x i16> %698, i16 %695, i64 2
  %700 = insertelement <4 x i16> %699, i16 %696, i64 3
  %701 = load i16, ptr %677, align 4, !tbaa !34
  %702 = load i16, ptr %678, align 4, !tbaa !34
  %703 = load i16, ptr %679, align 4, !tbaa !34
  %704 = load i16, ptr %680, align 4, !tbaa !34
  %705 = insertelement <4 x i16> poison, i16 %701, i64 0
  %706 = insertelement <4 x i16> %705, i16 %702, i64 1
  %707 = insertelement <4 x i16> %706, i16 %703, i64 2
  %708 = insertelement <4 x i16> %707, i16 %704, i64 3
  %709 = load i16, ptr %681, align 4, !tbaa !34
  %710 = load i16, ptr %682, align 4, !tbaa !34
  %711 = load i16, ptr %683, align 4, !tbaa !34
  %712 = load i16, ptr %684, align 4, !tbaa !34
  %713 = insertelement <4 x i16> poison, i16 %709, i64 0
  %714 = insertelement <4 x i16> %713, i16 %710, i64 1
  %715 = insertelement <4 x i16> %714, i16 %711, i64 2
  %716 = insertelement <4 x i16> %715, i16 %712, i64 3
  %717 = and <4 x i16> %692, <i16 1, i16 1, i16 1, i16 1>
  %718 = and <4 x i16> %700, <i16 1, i16 1, i16 1, i16 1>
  %719 = and <4 x i16> %708, <i16 1, i16 1, i16 1, i16 1>
  %720 = and <4 x i16> %716, <i16 1, i16 1, i16 1, i16 1>
  %721 = zext <4 x i16> %717 to <4 x i32>
  %722 = zext <4 x i16> %718 to <4 x i32>
  %723 = zext <4 x i16> %719 to <4 x i32>
  %724 = zext <4 x i16> %720 to <4 x i32>
  %725 = add <4 x i32> %634, %721
  %726 = add <4 x i32> %635, %722
  %727 = add <4 x i32> %636, %723
  %728 = add <4 x i32> %637, %724
  %729 = add nuw i64 %633, 16
  %730 = icmp eq i64 %729, %611
  br i1 %730, label %731, label %632, !llvm.loop !242

731:                                              ; preds = %632
  %732 = add <4 x i32> %726, %725
  %733 = add <4 x i32> %727, %732
  %734 = add <4 x i32> %728, %733
  %735 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %734)
  %736 = icmp eq i64 %611, %608
  br i1 %736, label %753, label %737

737:                                              ; preds = %605, %731
  %738 = phi i32 [ 0, %605 ], [ %735, %731 ]
  %739 = phi i32 [ %603, %605 ], [ %613, %731 ]
  %740 = phi ptr [ %607, %605 ], [ %615, %731 ]
  br label %741

741:                                              ; preds = %737, %741
  %742 = phi i32 [ %750, %741 ], [ %738, %737 ]
  %743 = phi i32 [ %745, %741 ], [ %739, %737 ]
  %744 = phi ptr [ %751, %741 ], [ %740, %737 ]
  %745 = add nsw i32 %743, -1
  %746 = getelementptr inbounds %struct.BPoint, ptr %744, i64 0, i32 3
  %747 = load i16, ptr %746, align 4, !tbaa !34
  %748 = and i16 %747, 1
  %749 = zext i16 %748 to i32
  %750 = add nuw nsw i32 %742, %749
  %751 = getelementptr inbounds %struct.BPoint, ptr %744, i64 1
  %752 = icmp eq i32 %745, 0
  br i1 %752, label %753, label %741, !llvm.loop !243

753:                                              ; preds = %741, %588, %583, %731, %553
  %754 = phi i32 [ %557, %553 ], [ %735, %731 ], [ %584, %583 ], [ %596, %588 ], [ %750, %741 ]
  %755 = icmp eq i32 %754, 1
  br i1 %755, label %756, label %774

756:                                              ; preds = %753
  %757 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %758 = load i32, ptr %757, align 4, !tbaa !31
  %759 = icmp eq i32 %758, 1
  br i1 %759, label %760, label %774

760:                                              ; preds = %756
  %761 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %762 = load ptr, ptr %761, align 8, !tbaa !32
  %763 = getelementptr inbounds %struct.BPoint, ptr %762, i64 0, i32 3
  %764 = load i16, ptr %763, align 4, !tbaa !34
  %765 = and i16 %764, 1
  %766 = icmp eq i16 %765, 0
  br i1 %766, label %767, label %774

767:                                              ; preds = %760
  %768 = add nsw i32 %30, -1
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds %struct.BPoint, ptr %762, i64 %769, i32 3
  %771 = load i16, ptr %770, align 4, !tbaa !34
  %772 = and i16 %771, 1
  %773 = icmp eq i16 %772, 0
  br i1 %773, label %777, label %774

774:                                              ; preds = %65, %36, %263, %83, %600, %420, %57, %31, %753, %767, %760, %756
  %775 = load ptr, ptr %25, align 8, !tbaa !120
  %776 = icmp eq ptr %775, null
  br i1 %776, label %22, label %24, !llvm.loop !244

777:                                              ; preds = %78, %416, %767
  %778 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %779 = getelementptr inbounds %struct.Object, ptr %778, i64 0, i32 19
  %780 = load ptr, ptr %779, align 8, !tbaa !17
  %781 = getelementptr inbounds %struct.Object, ptr %778, i64 0, i32 3
  %782 = load i16, ptr %781, align 8, !tbaa !5
  %783 = and i16 %782, -2
  %784 = icmp eq i16 %783, 2
  br i1 %784, label %785, label %788

785:                                              ; preds = %777
  %786 = getelementptr inbounds %struct.Curve, ptr %780, i64 0, i32 4
  %787 = load ptr, ptr %786, align 8, !tbaa !18
  br label %788

788:                                              ; preds = %785, %777
  %789 = phi ptr [ %787, %785 ], [ null, %777 ]
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  %790 = load ptr, ptr %789, align 8, !tbaa !36
  %791 = icmp eq ptr %790, null
  br i1 %791, label %931, label %792

792:                                              ; preds = %788, %926
  %793 = phi ptr [ %927, %926 ], [ %790, %788 ]
  %794 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 2
  %795 = load i16, ptr %794, align 8, !tbaa !21
  %796 = icmp eq i16 %795, 1
  %797 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 6
  %798 = load i32, ptr %797, align 8, !tbaa !23
  br i1 %796, label %799, label %825

799:                                              ; preds = %792
  %800 = icmp eq i32 %798, 0
  br i1 %800, label %926, label %801

801:                                              ; preds = %799
  %802 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 18
  %803 = load ptr, ptr %802, align 8, !tbaa !24
  br label %807

804:                                              ; preds = %820
  %805 = getelementptr inbounds %struct.BezTriple, ptr %809, i64 1
  %806 = icmp eq i32 %810, 0
  br i1 %806, label %926, label %807, !llvm.loop !25

807:                                              ; preds = %804, %801
  %808 = phi i32 [ %810, %804 ], [ %798, %801 ]
  %809 = phi ptr [ %805, %804 ], [ %803, %801 ]
  %810 = add nsw i32 %808, -1
  %811 = getelementptr inbounds %struct.BezTriple, ptr %809, i64 0, i32 7
  %812 = load i8, ptr %811, align 1, !tbaa !27
  %813 = and i8 %812, 1
  %814 = icmp eq i8 %813, 0
  br i1 %814, label %815, label %844

815:                                              ; preds = %807
  %816 = getelementptr inbounds %struct.BezTriple, ptr %809, i64 0, i32 8
  %817 = load i8, ptr %816, align 4, !tbaa !29
  %818 = and i8 %817, 1
  %819 = icmp eq i8 %818, 0
  br i1 %819, label %820, label %844

820:                                              ; preds = %815
  %821 = getelementptr inbounds %struct.BezTriple, ptr %809, i64 0, i32 9
  %822 = load i8, ptr %821, align 1, !tbaa !30
  %823 = and i8 %822, 1
  %824 = icmp eq i8 %823, 0
  br i1 %824, label %804, label %844

825:                                              ; preds = %792
  %826 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 7
  %827 = load i32, ptr %826, align 4, !tbaa !31
  %828 = mul nsw i32 %827, %798
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %926, label %830

830:                                              ; preds = %825
  %831 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 17
  %832 = load ptr, ptr %831, align 8, !tbaa !32
  br label %837

833:                                              ; preds = %837
  %834 = add nsw i32 %838, -1
  %835 = getelementptr inbounds %struct.BPoint, ptr %839, i64 1
  %836 = icmp eq i32 %834, 0
  br i1 %836, label %926, label %837, !llvm.loop !33

837:                                              ; preds = %833, %830
  %838 = phi i32 [ %834, %833 ], [ %828, %830 ]
  %839 = phi ptr [ %835, %833 ], [ %832, %830 ]
  %840 = getelementptr inbounds %struct.BPoint, ptr %839, i64 0, i32 3
  %841 = load i16, ptr %840, align 4, !tbaa !34
  %842 = and i16 %841, 1
  %843 = icmp eq i16 %842, 0
  br i1 %843, label %833, label %844

844:                                              ; preds = %837, %820, %815, %807
  %845 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %846 = call ptr %845(i64 noundef 40, ptr noundef nonnull @.str.210) #20
  call void @BLI_addhead(ptr noundef nonnull %3, ptr noundef %846) #20
  %847 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 2
  store ptr %793, ptr %847, align 8, !tbaa !245
  %848 = load i32, ptr %797, align 8, !tbaa !23
  %849 = icmp eq i32 %848, 0
  %850 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 3, i64 2
  br i1 %849, label %851, label %855

851:                                              ; preds = %844
  %852 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 3
  %853 = load <2 x float>, ptr %852, align 4, !tbaa !40
  %854 = load float, ptr %850, align 4, !tbaa !40
  br label %916

855:                                              ; preds = %844
  %856 = getelementptr inbounds %struct.Nurb, ptr %793, i64 0, i32 17
  %857 = load ptr, ptr %856, align 8, !tbaa !32
  %858 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 3
  %859 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 3, i64 1
  %860 = load float, ptr %858, align 4, !tbaa !40
  %861 = load float, ptr %859, align 4, !tbaa !40
  %862 = load float, ptr %850, align 4, !tbaa !40
  %863 = and i32 %848, 1
  %864 = icmp eq i32 %863, 0
  br i1 %864, label %878, label %865

865:                                              ; preds = %855
  %866 = add nsw i32 %848, -1
  %867 = load float, ptr %857, align 4, !tbaa !40
  %868 = getelementptr inbounds float, ptr %857, i64 1
  %869 = fadd fast float %867, %860
  store float %869, ptr %858, align 4, !tbaa !40
  %870 = load float, ptr %868, align 4, !tbaa !40
  %871 = fadd fast float %870, %861
  store float %871, ptr %859, align 4, !tbaa !40
  %872 = getelementptr inbounds float, ptr %857, i64 2
  %873 = load float, ptr %872, align 4, !tbaa !40
  %874 = fadd fast float %873, %862
  store float %874, ptr %850, align 4, !tbaa !40
  %875 = getelementptr inbounds %struct.BPoint, ptr %857, i64 1
  %876 = insertelement <2 x float> poison, float %869, i64 0
  %877 = insertelement <2 x float> %876, float %871, i64 1
  br label %878

878:                                              ; preds = %865, %855
  %879 = phi float [ undef, %855 ], [ %874, %865 ]
  %880 = phi <2 x float> [ undef, %855 ], [ %877, %865 ]
  %881 = phi float [ %862, %855 ], [ %874, %865 ]
  %882 = phi float [ %861, %855 ], [ %871, %865 ]
  %883 = phi float [ %860, %855 ], [ %869, %865 ]
  %884 = phi i32 [ %848, %855 ], [ %866, %865 ]
  %885 = phi ptr [ %857, %855 ], [ %875, %865 ]
  %886 = icmp eq i32 %848, 1
  br i1 %886, label %916, label %887

887:                                              ; preds = %878, %887
  %888 = phi float [ %910, %887 ], [ %881, %878 ]
  %889 = phi float [ %907, %887 ], [ %882, %878 ]
  %890 = phi float [ %905, %887 ], [ %883, %878 ]
  %891 = phi i32 [ %902, %887 ], [ %884, %878 ]
  %892 = phi ptr [ %911, %887 ], [ %885, %878 ]
  %893 = load float, ptr %892, align 4, !tbaa !40
  %894 = getelementptr inbounds float, ptr %892, i64 1
  %895 = fadd fast float %893, %890
  store float %895, ptr %858, align 4, !tbaa !40
  %896 = load float, ptr %894, align 4, !tbaa !40
  %897 = fadd fast float %896, %889
  store float %897, ptr %859, align 4, !tbaa !40
  %898 = getelementptr inbounds float, ptr %892, i64 2
  %899 = load float, ptr %898, align 4, !tbaa !40
  %900 = fadd fast float %899, %888
  store float %900, ptr %850, align 4, !tbaa !40
  %901 = getelementptr inbounds %struct.BPoint, ptr %892, i64 1
  %902 = add nsw i32 %891, -2
  %903 = load float, ptr %901, align 4, !tbaa !40
  %904 = getelementptr inbounds %struct.BPoint, ptr %892, i64 1, i32 0, i64 1
  %905 = fadd fast float %903, %895
  store float %905, ptr %858, align 4, !tbaa !40
  %906 = load float, ptr %904, align 4, !tbaa !40
  %907 = fadd fast float %906, %897
  store float %907, ptr %859, align 4, !tbaa !40
  %908 = getelementptr inbounds %struct.BPoint, ptr %892, i64 1, i32 0, i64 2
  %909 = load float, ptr %908, align 4, !tbaa !40
  %910 = fadd fast float %909, %900
  store float %910, ptr %850, align 4, !tbaa !40
  %911 = getelementptr inbounds %struct.BPoint, ptr %892, i64 2
  %912 = icmp eq i32 %902, 0
  br i1 %912, label %913, label %887, !llvm.loop !247

913:                                              ; preds = %887
  %914 = insertelement <2 x float> poison, float %905, i64 0
  %915 = insertelement <2 x float> %914, float %907, i64 1
  br label %916

916:                                              ; preds = %913, %878, %851
  %917 = phi float [ %854, %851 ], [ %879, %878 ], [ %910, %913 ]
  %918 = phi <2 x float> [ %853, %851 ], [ %880, %878 ], [ %915, %913 ]
  %919 = getelementptr inbounds %struct.NurbSort, ptr %846, i64 0, i32 3
  %920 = sitofp i32 %848 to float
  %921 = fdiv fast float 1.000000e+00, %920
  %922 = insertelement <2 x float> poison, float %921, i64 0
  %923 = shufflevector <2 x float> %922, <2 x float> poison, <2 x i32> zeroinitializer
  %924 = fmul fast <2 x float> %918, %923
  store <2 x float> %924, ptr %919, align 4, !tbaa !40
  %925 = fmul fast float %917, %921
  store float %925, ptr %850, align 4, !tbaa !40
  br label %926

926:                                              ; preds = %833, %804, %916, %825, %799
  %927 = load ptr, ptr %793, align 8, !tbaa !36
  %928 = icmp eq ptr %927, null
  br i1 %928, label %929, label %792, !llvm.loop !248

929:                                              ; preds = %926
  %930 = load ptr, ptr %3, align 8, !tbaa !56
  br label %931

931:                                              ; preds = %929, %788
  %932 = phi ptr [ %930, %929 ], [ null, %788 ]
  call void @BLI_remlink(ptr noundef nonnull %3, ptr noundef %932) #20
  call void @BLI_addtail(ptr noundef nonnull @nsortbase, ptr noundef %932) #20
  %933 = load ptr, ptr %3, align 8, !tbaa !56
  %934 = icmp eq ptr %933, null
  br i1 %934, label %1000, label %935

935:                                              ; preds = %931, %997
  %936 = phi ptr [ %998, %997 ], [ %933, %931 ]
  %937 = load ptr, ptr @nsortbase, align 8, !tbaa !56
  %938 = getelementptr inbounds %struct.NurbSort, ptr %937, i64 0, i32 3
  %939 = load float, ptr %938, align 4, !tbaa !40
  %940 = getelementptr inbounds %struct.NurbSort, ptr %937, i64 0, i32 3, i64 1
  %941 = load float, ptr %940, align 4, !tbaa !40
  %942 = getelementptr inbounds %struct.NurbSort, ptr %937, i64 0, i32 3, i64 2
  %943 = load float, ptr %942, align 4, !tbaa !40
  %944 = load ptr, ptr getelementptr inbounds (%struct.ListBase, ptr @nsortbase, i64 0, i32 1), align 8, !tbaa !249
  %945 = getelementptr inbounds %struct.NurbSort, ptr %944, i64 0, i32 3
  %946 = load float, ptr %945, align 4, !tbaa !40
  %947 = getelementptr inbounds %struct.NurbSort, ptr %944, i64 0, i32 3, i64 1
  %948 = load float, ptr %947, align 4, !tbaa !40
  %949 = getelementptr inbounds %struct.NurbSort, ptr %944, i64 0, i32 3, i64 2
  %950 = load float, ptr %949, align 4, !tbaa !40
  %951 = insertelement <2 x float> poison, float %948, i64 0
  %952 = insertelement <2 x float> %951, float %941, i64 1
  %953 = insertelement <2 x float> poison, float %946, i64 0
  %954 = insertelement <2 x float> %953, float %939, i64 1
  %955 = insertelement <2 x float> poison, float %950, i64 0
  %956 = insertelement <2 x float> %955, float %943, i64 1
  br label %957

957:                                              ; preds = %957, %935
  %958 = phi ptr [ null, %935 ], [ %987, %957 ]
  %959 = phi ptr [ null, %935 ], [ %985, %957 ]
  %960 = phi ptr [ %936, %935 ], [ %989, %957 ]
  %961 = phi <2 x float> [ <float 0x46293E5940000000, float 0x46293E5940000000>, %935 ], [ %988, %957 ]
  %962 = getelementptr inbounds %struct.NurbSort, ptr %960, i64 0, i32 3
  %963 = load float, ptr %962, align 4, !tbaa !40
  %964 = getelementptr inbounds %struct.NurbSort, ptr %960, i64 0, i32 3, i64 1
  %965 = load float, ptr %964, align 4, !tbaa !40
  %966 = getelementptr inbounds %struct.NurbSort, ptr %960, i64 0, i32 3, i64 2
  %967 = load float, ptr %966, align 4, !tbaa !40
  %968 = insertelement <2 x float> poison, float %963, i64 0
  %969 = shufflevector <2 x float> %968, <2 x float> poison, <2 x i32> zeroinitializer
  %970 = fsub fast <2 x float> %954, %969
  %971 = insertelement <2 x float> poison, float %965, i64 0
  %972 = shufflevector <2 x float> %971, <2 x float> poison, <2 x i32> zeroinitializer
  %973 = fsub fast <2 x float> %952, %972
  %974 = insertelement <2 x float> poison, float %967, i64 0
  %975 = shufflevector <2 x float> %974, <2 x float> poison, <2 x i32> zeroinitializer
  %976 = fsub fast <2 x float> %956, %975
  %977 = fmul fast <2 x float> %970, %970
  %978 = fmul fast <2 x float> %973, %973
  %979 = fadd fast <2 x float> %978, %977
  %980 = fmul fast <2 x float> %976, %976
  %981 = fadd fast <2 x float> %979, %980
  %982 = call fast <2 x float> @llvm.sqrt.v2f32(<2 x float> %981)
  %983 = fcmp fast olt <2 x float> %982, %961
  %984 = extractelement <2 x i1> %983, i64 1
  %985 = select i1 %984, ptr %960, ptr %959
  %986 = extractelement <2 x i1> %983, i64 0
  %987 = select i1 %986, ptr %960, ptr %958
  %988 = select <2 x i1> %983, <2 x float> %982, <2 x float> %961
  %989 = load ptr, ptr %960, align 8, !tbaa !250
  %990 = icmp eq ptr %989, null
  br i1 %990, label %991, label %957, !llvm.loop !251

991:                                              ; preds = %957
  %992 = shufflevector <2 x float> %988, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %993 = fcmp olt <2 x float> %992, %988
  %994 = extractelement <2 x i1> %993, i64 0
  br i1 %994, label %995, label %996

995:                                              ; preds = %991
  call void @BLI_remlink(ptr noundef nonnull %3, ptr noundef %985) #20
  call void @BLI_addhead(ptr noundef nonnull @nsortbase, ptr noundef %985) #20
  br label %997

996:                                              ; preds = %991
  call void @BLI_remlink(ptr noundef nonnull %3, ptr noundef %987) #20
  call void @BLI_addtail(ptr noundef nonnull @nsortbase, ptr noundef %987) #20
  br label %997

997:                                              ; preds = %996, %995
  %998 = load ptr, ptr %3, align 8, !tbaa !56
  %999 = icmp eq ptr %998, null
  br i1 %999, label %1000, label %935, !llvm.loop !252

1000:                                             ; preds = %997, %931
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  %1001 = load ptr, ptr @nsortbase, align 8, !tbaa !56
  %1002 = load ptr, ptr getelementptr inbounds (%struct.ListBase, ptr @nsortbase, i64 0, i32 1), align 8, !tbaa !249
  %1003 = icmp eq ptr %1001, %1002
  br i1 %1003, label %1004, label %1007

1004:                                             ; preds = %1000
  call void @BLI_freelistN(ptr noundef nonnull @nsortbase) #20
  %1005 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %1006 = load ptr, ptr %1005, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %1006, i32 noundef 32, ptr noundef nonnull @.str.208) #20
  br label %1959

1007:                                             ; preds = %1000
  %1008 = load ptr, ptr %1001, align 8, !tbaa !250
  %1009 = getelementptr inbounds %struct.NurbSort, ptr %1001, i64 0, i32 2
  %1010 = load ptr, ptr %1009, align 8, !tbaa !245
  %1011 = getelementptr inbounds %struct.Nurb, ptr %1010, i64 0, i32 7
  %1012 = load i32, ptr %1011, align 4, !tbaa !31
  %1013 = icmp eq i32 %1012, 1
  br i1 %1013, label %1014, label %1026

1014:                                             ; preds = %1007
  %1015 = getelementptr inbounds %struct.Nurb, ptr %1010, i64 0, i32 6
  %1016 = load i32, ptr %1015, align 8, !tbaa !23
  %1017 = getelementptr inbounds %struct.NurbSort, ptr %1008, i64 0, i32 2
  %1018 = load ptr, ptr %1017, align 8, !tbaa !245
  %1019 = getelementptr inbounds %struct.Nurb, ptr %1018, i64 0, i32 6
  %1020 = load i32, ptr %1019, align 8, !tbaa !23
  %1021 = icmp eq i32 %1016, %1020
  br i1 %1021, label %1055, label %1022

1022:                                             ; preds = %1014
  %1023 = getelementptr inbounds %struct.Nurb, ptr %1018, i64 0, i32 7
  %1024 = load i32, ptr %1023, align 4, !tbaa !31
  %1025 = icmp eq i32 %1016, %1024
  br i1 %1025, label %1055, label %1052

1026:                                             ; preds = %1007
  %1027 = getelementptr inbounds %struct.NurbSort, ptr %1008, i64 0, i32 2
  %1028 = load ptr, ptr %1027, align 8, !tbaa !245
  %1029 = getelementptr inbounds %struct.Nurb, ptr %1028, i64 0, i32 7
  %1030 = load i32, ptr %1029, align 4, !tbaa !31
  %1031 = icmp eq i32 %1030, 1
  br i1 %1031, label %1032, label %1040

1032:                                             ; preds = %1026
  %1033 = getelementptr inbounds %struct.Nurb, ptr %1028, i64 0, i32 6
  %1034 = load i32, ptr %1033, align 8, !tbaa !23
  %1035 = getelementptr inbounds %struct.Nurb, ptr %1010, i64 0, i32 6
  %1036 = load i32, ptr %1035, align 8, !tbaa !23
  %1037 = icmp eq i32 %1034, %1036
  %1038 = icmp eq i32 %1034, %1012
  %1039 = or i1 %1038, %1037
  br i1 %1039, label %1055, label %1052

1040:                                             ; preds = %1026
  %1041 = getelementptr inbounds %struct.Nurb, ptr %1010, i64 0, i32 6
  %1042 = load i32, ptr %1041, align 8, !tbaa !23
  %1043 = getelementptr inbounds %struct.Nurb, ptr %1028, i64 0, i32 6
  %1044 = load i32, ptr %1043, align 8, !tbaa !23
  %1045 = icmp eq i32 %1042, %1044
  %1046 = icmp eq i32 %1012, %1030
  %1047 = or i1 %1046, %1045
  %1048 = icmp eq i32 %1042, %1030
  %1049 = or i1 %1048, %1047
  %1050 = icmp eq i32 %1012, %1044
  %1051 = or i1 %1050, %1049
  br i1 %1051, label %1055, label %1052

1052:                                             ; preds = %1040, %1032, %1022
  %1053 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %1054 = load ptr, ptr %1053, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %1054, i32 noundef 32, ptr noundef nonnull @.str.209) #20
  call void @BLI_freelistN(ptr noundef nonnull @nsortbase) #20
  br label %1959

1055:                                             ; preds = %1040, %1032, %1022, %1014
  %1056 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %1057 = getelementptr inbounds %struct.Curve, ptr %780, i64 0, i32 4
  br label %1058

1058:                                             ; preds = %1456, %1055
  %1059 = phi ptr [ %1008, %1055 ], [ %1457, %1456 ]
  %1060 = load ptr, ptr %1009, align 8, !tbaa !245
  %1061 = getelementptr inbounds %struct.NurbSort, ptr %1059, i64 0, i32 2
  %1062 = load ptr, ptr %1061, align 8, !tbaa !245
  %1063 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 6
  %1064 = load i32, ptr %1063, align 8, !tbaa !23
  %1065 = add nsw i32 %1064, -1
  %1066 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 7
  %1067 = load i32, ptr %1066, align 4, !tbaa !31
  %1068 = add i32 %1067, -1
  %1069 = icmp sgt i32 %1067, 1
  br i1 %1069, label %1070, label %1089

1070:                                             ; preds = %1058
  %1071 = sext i32 %1064 to i64
  %1072 = icmp eq i32 %1068, 1
  br i1 %1072, label %1089, label %1073

1073:                                             ; preds = %1070
  %1074 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 17
  %1075 = load ptr, ptr %1074, align 8, !tbaa !32
  %1076 = sext i32 %1065 to i64
  %1077 = getelementptr inbounds %struct.BPoint, ptr %1075, i64 %1076
  br label %1078

1078:                                             ; preds = %1085, %1073
  %1079 = phi i32 [ 1, %1073 ], [ %1087, %1085 ]
  %1080 = phi ptr [ %1077, %1073 ], [ %1086, %1085 ]
  %1081 = getelementptr inbounds %struct.BPoint, ptr %1080, i64 %1071, i32 3
  %1082 = load i16, ptr %1081, align 4, !tbaa !34
  %1083 = and i16 %1082, 1
  %1084 = icmp eq i16 %1083, 0
  br i1 %1084, label %1085, label %1172

1085:                                             ; preds = %1078
  %1086 = getelementptr inbounds %struct.BPoint, ptr %1080, i64 %1071
  %1087 = add nuw nsw i32 %1079, 1
  %1088 = icmp eq i32 %1087, %1068
  br i1 %1088, label %1089, label %1078, !llvm.loop !253

1089:                                             ; preds = %1085, %1070, %1058
  %1090 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 12
  %1091 = load i16, ptr %1090, align 2, !tbaa !43
  %1092 = icmp eq i16 %1091, 0
  br i1 %1092, label %1093, label %1094

1093:                                             ; preds = %1089
  store i16 1, ptr %1090, align 2, !tbaa !43
  br label %1094

1094:                                             ; preds = %1093, %1089
  call fastcc void @rotate_direction_nurb(ptr noundef nonnull %1060)
  %1095 = load i32, ptr %1063, align 8, !tbaa !23
  %1096 = add nsw i32 %1095, -1
  %1097 = load i32, ptr %1066, align 4, !tbaa !31
  %1098 = add i32 %1097, -1
  %1099 = icmp sgt i32 %1097, 1
  br i1 %1099, label %1100, label %1119

1100:                                             ; preds = %1094
  %1101 = sext i32 %1095 to i64
  %1102 = icmp eq i32 %1098, 1
  br i1 %1102, label %1119, label %1103

1103:                                             ; preds = %1100
  %1104 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 17
  %1105 = load ptr, ptr %1104, align 8, !tbaa !32
  %1106 = sext i32 %1096 to i64
  %1107 = getelementptr inbounds %struct.BPoint, ptr %1105, i64 %1106
  br label %1108

1108:                                             ; preds = %1115, %1103
  %1109 = phi i32 [ 1, %1103 ], [ %1117, %1115 ]
  %1110 = phi ptr [ %1107, %1103 ], [ %1116, %1115 ]
  %1111 = getelementptr inbounds %struct.BPoint, ptr %1110, i64 %1101, i32 3
  %1112 = load i16, ptr %1111, align 4, !tbaa !34
  %1113 = and i16 %1112, 1
  %1114 = icmp eq i16 %1113, 0
  br i1 %1114, label %1115, label %1172

1115:                                             ; preds = %1108
  %1116 = getelementptr inbounds %struct.BPoint, ptr %1110, i64 %1101
  %1117 = add nuw nsw i32 %1109, 1
  %1118 = icmp eq i32 %1117, %1098
  br i1 %1118, label %1119, label %1108, !llvm.loop !253

1119:                                             ; preds = %1115, %1100, %1094
  call fastcc void @rotate_direction_nurb(ptr noundef %1060)
  %1120 = load i32, ptr %1063, align 8, !tbaa !23
  %1121 = add nsw i32 %1120, -1
  %1122 = load i32, ptr %1066, align 4, !tbaa !31
  %1123 = add i32 %1122, -1
  %1124 = icmp sgt i32 %1122, 1
  br i1 %1124, label %1125, label %1144

1125:                                             ; preds = %1119
  %1126 = sext i32 %1120 to i64
  %1127 = icmp eq i32 %1123, 1
  br i1 %1127, label %1144, label %1128

1128:                                             ; preds = %1125
  %1129 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 17
  %1130 = load ptr, ptr %1129, align 8, !tbaa !32
  %1131 = sext i32 %1121 to i64
  %1132 = getelementptr inbounds %struct.BPoint, ptr %1130, i64 %1131
  br label %1133

1133:                                             ; preds = %1140, %1128
  %1134 = phi i32 [ 1, %1128 ], [ %1142, %1140 ]
  %1135 = phi ptr [ %1132, %1128 ], [ %1141, %1140 ]
  %1136 = getelementptr inbounds %struct.BPoint, ptr %1135, i64 %1126, i32 3
  %1137 = load i16, ptr %1136, align 4, !tbaa !34
  %1138 = and i16 %1137, 1
  %1139 = icmp eq i16 %1138, 0
  br i1 %1139, label %1140, label %1172

1140:                                             ; preds = %1133
  %1141 = getelementptr inbounds %struct.BPoint, ptr %1135, i64 %1126
  %1142 = add nuw nsw i32 %1134, 1
  %1143 = icmp eq i32 %1142, %1123
  br i1 %1143, label %1144, label %1133, !llvm.loop !253

1144:                                             ; preds = %1140, %1125, %1119
  call fastcc void @rotate_direction_nurb(ptr noundef %1060)
  %1145 = load i32, ptr %1063, align 8, !tbaa !23
  %1146 = add nsw i32 %1145, -1
  %1147 = load i32, ptr %1066, align 4, !tbaa !31
  %1148 = add i32 %1147, -1
  %1149 = icmp sgt i32 %1147, 1
  br i1 %1149, label %1150, label %1169

1150:                                             ; preds = %1144
  %1151 = sext i32 %1145 to i64
  %1152 = icmp eq i32 %1148, 1
  br i1 %1152, label %1171, label %1153

1153:                                             ; preds = %1150
  %1154 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 17
  %1155 = load ptr, ptr %1154, align 8, !tbaa !32
  %1156 = sext i32 %1146 to i64
  %1157 = getelementptr inbounds %struct.BPoint, ptr %1155, i64 %1156
  br label %1158

1158:                                             ; preds = %1165, %1153
  %1159 = phi i32 [ 1, %1153 ], [ %1167, %1165 ]
  %1160 = phi ptr [ %1157, %1153 ], [ %1166, %1165 ]
  %1161 = getelementptr inbounds %struct.BPoint, ptr %1160, i64 %1151, i32 3
  %1162 = load i16, ptr %1161, align 4, !tbaa !34
  %1163 = and i16 %1162, 1
  %1164 = icmp eq i16 %1163, 0
  br i1 %1164, label %1165, label %1172

1165:                                             ; preds = %1158
  %1166 = getelementptr inbounds %struct.BPoint, ptr %1160, i64 %1151
  %1167 = add nuw nsw i32 %1159, 1
  %1168 = icmp eq i32 %1167, %1148
  br i1 %1168, label %1169, label %1158, !llvm.loop !253

1169:                                             ; preds = %1165, %1144
  %1170 = icmp eq i32 %1147, 1
  br i1 %1170, label %1456, label %1171

1171:                                             ; preds = %1169, %1150
  call fastcc void @rotate_direction_nurb(ptr noundef %1060)
  br label %1456

1172:                                             ; preds = %1078, %1108, %1133, %1158
  %1173 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 7
  %1174 = load i32, ptr %1173, align 4, !tbaa !31
  %1175 = add i32 %1174, -1
  %1176 = icmp sgt i32 %1174, 1
  br i1 %1176, label %1177, label %1196

1177:                                             ; preds = %1172
  %1178 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 6
  %1179 = load i32, ptr %1178, align 8, !tbaa !23
  %1180 = sext i32 %1179 to i64
  %1181 = icmp eq i32 %1175, 1
  br i1 %1181, label %1196, label %1182

1182:                                             ; preds = %1177
  %1183 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 17
  %1184 = load ptr, ptr %1183, align 8, !tbaa !32
  br label %1185

1185:                                             ; preds = %1192, %1182
  %1186 = phi i32 [ 1, %1182 ], [ %1194, %1192 ]
  %1187 = phi ptr [ %1184, %1182 ], [ %1193, %1192 ]
  %1188 = getelementptr inbounds %struct.BPoint, ptr %1187, i64 %1180, i32 3
  %1189 = load i16, ptr %1188, align 4, !tbaa !34
  %1190 = and i16 %1189, 1
  %1191 = icmp eq i16 %1190, 0
  br i1 %1191, label %1192, label %1279

1192:                                             ; preds = %1185
  %1193 = getelementptr inbounds %struct.BPoint, ptr %1187, i64 %1180
  %1194 = add nuw nsw i32 %1186, 1
  %1195 = icmp eq i32 %1194, %1175
  br i1 %1195, label %1196, label %1185, !llvm.loop !253

1196:                                             ; preds = %1192, %1177, %1172
  %1197 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 12
  %1198 = load i16, ptr %1197, align 2, !tbaa !43
  %1199 = icmp eq i16 %1198, 0
  br i1 %1199, label %1200, label %1201

1200:                                             ; preds = %1196
  store i16 1, ptr %1197, align 2, !tbaa !43
  br label %1201

1201:                                             ; preds = %1200, %1196
  call fastcc void @rotate_direction_nurb(ptr noundef nonnull %1062)
  %1202 = load i32, ptr %1173, align 4, !tbaa !31
  %1203 = add i32 %1202, -1
  %1204 = icmp sgt i32 %1202, 1
  br i1 %1204, label %1205, label %1224

1205:                                             ; preds = %1201
  %1206 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 6
  %1207 = load i32, ptr %1206, align 8, !tbaa !23
  %1208 = sext i32 %1207 to i64
  %1209 = icmp eq i32 %1203, 1
  br i1 %1209, label %1224, label %1210

1210:                                             ; preds = %1205
  %1211 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 17
  %1212 = load ptr, ptr %1211, align 8, !tbaa !32
  br label %1213

1213:                                             ; preds = %1220, %1210
  %1214 = phi i32 [ 1, %1210 ], [ %1222, %1220 ]
  %1215 = phi ptr [ %1212, %1210 ], [ %1221, %1220 ]
  %1216 = getelementptr inbounds %struct.BPoint, ptr %1215, i64 %1208, i32 3
  %1217 = load i16, ptr %1216, align 4, !tbaa !34
  %1218 = and i16 %1217, 1
  %1219 = icmp eq i16 %1218, 0
  br i1 %1219, label %1220, label %1279

1220:                                             ; preds = %1213
  %1221 = getelementptr inbounds %struct.BPoint, ptr %1215, i64 %1208
  %1222 = add nuw nsw i32 %1214, 1
  %1223 = icmp eq i32 %1222, %1203
  br i1 %1223, label %1224, label %1213, !llvm.loop !253

1224:                                             ; preds = %1220, %1205, %1201
  call fastcc void @rotate_direction_nurb(ptr noundef %1062)
  %1225 = load i32, ptr %1173, align 4, !tbaa !31
  %1226 = add i32 %1225, -1
  %1227 = icmp sgt i32 %1225, 1
  br i1 %1227, label %1228, label %1247

1228:                                             ; preds = %1224
  %1229 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 6
  %1230 = load i32, ptr %1229, align 8, !tbaa !23
  %1231 = sext i32 %1230 to i64
  %1232 = icmp eq i32 %1226, 1
  br i1 %1232, label %1247, label %1233

1233:                                             ; preds = %1228
  %1234 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 17
  %1235 = load ptr, ptr %1234, align 8, !tbaa !32
  br label %1236

1236:                                             ; preds = %1243, %1233
  %1237 = phi i32 [ 1, %1233 ], [ %1245, %1243 ]
  %1238 = phi ptr [ %1235, %1233 ], [ %1244, %1243 ]
  %1239 = getelementptr inbounds %struct.BPoint, ptr %1238, i64 %1231, i32 3
  %1240 = load i16, ptr %1239, align 4, !tbaa !34
  %1241 = and i16 %1240, 1
  %1242 = icmp eq i16 %1241, 0
  br i1 %1242, label %1243, label %1279

1243:                                             ; preds = %1236
  %1244 = getelementptr inbounds %struct.BPoint, ptr %1238, i64 %1231
  %1245 = add nuw nsw i32 %1237, 1
  %1246 = icmp eq i32 %1245, %1226
  br i1 %1246, label %1247, label %1236, !llvm.loop !253

1247:                                             ; preds = %1243, %1228, %1224
  call fastcc void @rotate_direction_nurb(ptr noundef %1062)
  %1248 = load i32, ptr %1173, align 4, !tbaa !31
  %1249 = add i32 %1248, -1
  %1250 = icmp sgt i32 %1248, 1
  br i1 %1250, label %1251, label %1270

1251:                                             ; preds = %1247
  %1252 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 6
  %1253 = load i32, ptr %1252, align 8, !tbaa !23
  %1254 = sext i32 %1253 to i64
  %1255 = icmp eq i32 %1249, 1
  br i1 %1255, label %1270, label %1256

1256:                                             ; preds = %1251
  %1257 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 17
  %1258 = load ptr, ptr %1257, align 8, !tbaa !32
  br label %1259

1259:                                             ; preds = %1266, %1256
  %1260 = phi i32 [ 1, %1256 ], [ %1268, %1266 ]
  %1261 = phi ptr [ %1258, %1256 ], [ %1267, %1266 ]
  %1262 = getelementptr inbounds %struct.BPoint, ptr %1261, i64 %1254, i32 3
  %1263 = load i16, ptr %1262, align 4, !tbaa !34
  %1264 = and i16 %1263, 1
  %1265 = icmp eq i16 %1264, 0
  br i1 %1265, label %1266, label %1279

1266:                                             ; preds = %1259
  %1267 = getelementptr inbounds %struct.BPoint, ptr %1261, i64 %1254
  %1268 = add nuw nsw i32 %1260, 1
  %1269 = icmp eq i32 %1268, %1249
  br i1 %1269, label %1270, label %1259, !llvm.loop !253

1270:                                             ; preds = %1266, %1251, %1247
  %1271 = load i32, ptr %1063, align 8, !tbaa !23
  %1272 = icmp eq i32 %1271, 1
  br i1 %1272, label %1273, label %1275

1273:                                             ; preds = %1270
  call fastcc void @rotate_direction_nurb(ptr noundef nonnull %1060)
  %1274 = load i32, ptr %1173, align 4, !tbaa !31
  br label %1275

1275:                                             ; preds = %1273, %1270
  %1276 = phi i32 [ %1274, %1273 ], [ %1248, %1270 ]
  %1277 = icmp eq i32 %1276, 1
  br i1 %1277, label %1456, label %1278

1278:                                             ; preds = %1275
  call fastcc void @rotate_direction_nurb(ptr noundef nonnull %1062)
  br label %1456

1279:                                             ; preds = %1185, %1213, %1236, %1259
  %1280 = phi i32 [ %1253, %1259 ], [ %1230, %1236 ], [ %1207, %1213 ], [ %1179, %1185 ]
  %1281 = phi ptr [ %1258, %1259 ], [ %1235, %1236 ], [ %1212, %1213 ], [ %1184, %1185 ]
  %1282 = phi i32 [ %1248, %1259 ], [ %1225, %1236 ], [ %1202, %1213 ], [ %1174, %1185 ]
  %1283 = load i32, ptr %1066, align 4, !tbaa !31
  %1284 = icmp eq i32 %1283, %1282
  br i1 %1284, label %1287, label %1285

1285:                                             ; preds = %1279
  %1286 = load ptr, ptr %1056, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %1286, i32 noundef 32, ptr noundef nonnull @.str.209) #20
  br label %1456

1287:                                             ; preds = %1279
  %1288 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 17
  %1289 = load ptr, ptr %1288, align 8, !tbaa !32
  %1290 = load i32, ptr %1063, align 8, !tbaa !23
  %1291 = add nsw i32 %1290, -1
  %1292 = sext i32 %1291 to i64
  %1293 = getelementptr inbounds %struct.BPoint, ptr %1289, i64 %1292
  %1294 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 17
  %1295 = icmp sgt i32 %1282, 0
  br i1 %1295, label %1296, label %1355

1296:                                             ; preds = %1287
  %1297 = sext i32 %1290 to i64
  %1298 = sext i32 %1280 to i64
  br label %1299

1299:                                             ; preds = %1299, %1296
  %1300 = phi i32 [ 0, %1296 ], [ %1320, %1299 ]
  %1301 = phi float [ 0.000000e+00, %1296 ], [ %1319, %1299 ]
  %1302 = phi ptr [ %1293, %1296 ], [ %1321, %1299 ]
  %1303 = phi ptr [ %1281, %1296 ], [ %1322, %1299 ]
  %1304 = load float, ptr %1303, align 4, !tbaa !40
  %1305 = load float, ptr %1302, align 4, !tbaa !40
  %1306 = fsub fast float %1304, %1305
  %1307 = getelementptr inbounds float, ptr %1303, i64 1
  %1308 = getelementptr inbounds float, ptr %1302, i64 1
  %1309 = fmul fast float %1306, %1306
  %1310 = load <2 x float>, ptr %1307, align 4, !tbaa !40
  %1311 = load <2 x float>, ptr %1308, align 4, !tbaa !40
  %1312 = fsub fast <2 x float> %1310, %1311
  %1313 = fmul fast <2 x float> %1312, %1312
  %1314 = extractelement <2 x float> %1313, i64 0
  %1315 = fadd fast float %1314, %1309
  %1316 = extractelement <2 x float> %1313, i64 1
  %1317 = fadd fast float %1315, %1316
  %1318 = call fast float @llvm.sqrt.f32(float %1317)
  %1319 = fadd fast float %1318, %1301
  %1320 = add nuw nsw i32 %1300, 1
  %1321 = getelementptr inbounds %struct.BPoint, ptr %1302, i64 %1297
  %1322 = getelementptr inbounds %struct.BPoint, ptr %1303, i64 %1298
  %1323 = icmp eq i32 %1320, %1282
  br i1 %1323, label %1324, label %1299, !llvm.loop !255

1324:                                             ; preds = %1299
  %1325 = add nsw i32 %1282, -1
  %1326 = mul nsw i32 %1325, %1280
  %1327 = sext i32 %1326 to i64
  %1328 = getelementptr inbounds %struct.BPoint, ptr %1281, i64 %1327
  %1329 = sub nsw i64 0, %1298
  br label %1330

1330:                                             ; preds = %1330, %1324
  %1331 = phi i32 [ 0, %1324 ], [ %1351, %1330 ]
  %1332 = phi float [ 0.000000e+00, %1324 ], [ %1350, %1330 ]
  %1333 = phi ptr [ %1293, %1324 ], [ %1352, %1330 ]
  %1334 = phi ptr [ %1328, %1324 ], [ %1353, %1330 ]
  %1335 = load float, ptr %1334, align 4, !tbaa !40
  %1336 = load float, ptr %1333, align 4, !tbaa !40
  %1337 = fsub fast float %1335, %1336
  %1338 = getelementptr inbounds float, ptr %1334, i64 1
  %1339 = getelementptr inbounds float, ptr %1333, i64 1
  %1340 = fmul fast float %1337, %1337
  %1341 = load <2 x float>, ptr %1338, align 4, !tbaa !40
  %1342 = load <2 x float>, ptr %1339, align 4, !tbaa !40
  %1343 = fsub fast <2 x float> %1341, %1342
  %1344 = fmul fast <2 x float> %1343, %1343
  %1345 = extractelement <2 x float> %1344, i64 0
  %1346 = fadd fast float %1345, %1340
  %1347 = extractelement <2 x float> %1344, i64 1
  %1348 = fadd fast float %1346, %1347
  %1349 = call fast float @llvm.sqrt.f32(float %1348)
  %1350 = fadd fast float %1349, %1332
  %1351 = add nuw nsw i32 %1331, 1
  %1352 = getelementptr inbounds %struct.BPoint, ptr %1333, i64 %1297
  %1353 = getelementptr inbounds %struct.BPoint, ptr %1334, i64 %1329
  %1354 = icmp eq i32 %1351, %1282
  br i1 %1354, label %1355, label %1330, !llvm.loop !256

1355:                                             ; preds = %1330, %1287
  %1356 = phi float [ 0.000000e+00, %1287 ], [ %1319, %1330 ]
  %1357 = phi float [ 0.000000e+00, %1287 ], [ %1350, %1330 ]
  %1358 = getelementptr inbounds %struct.Nurb, ptr %1062, i64 0, i32 6
  %1359 = add nsw i32 %1290, %1280
  store i32 %1359, ptr %1063, align 8, !tbaa !23
  %1360 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 11
  %1361 = load i16, ptr %1360, align 8, !tbaa !38
  %1362 = icmp slt i16 %1361, 3
  %1363 = sext i16 %1361 to i32
  %1364 = icmp sgt i32 %1359, %1363
  %1365 = select i1 %1362, i1 %1364, i1 false
  br i1 %1365, label %1366, label %1368

1366:                                             ; preds = %1355
  %1367 = add nsw i16 %1361, 1
  store i16 %1367, ptr %1360, align 8, !tbaa !38
  br label %1368

1368:                                             ; preds = %1366, %1355
  %1369 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 12
  %1370 = load i16, ptr %1369, align 2, !tbaa !43
  %1371 = icmp slt i16 %1370, 3
  %1372 = sext i16 %1370 to i32
  %1373 = icmp sgt i32 %1282, %1372
  %1374 = and i1 %1371, %1373
  br i1 %1374, label %1375, label %1377

1375:                                             ; preds = %1368
  %1376 = add nsw i16 %1370, 1
  store i16 %1376, ptr %1369, align 2, !tbaa !43
  br label %1377

1377:                                             ; preds = %1375, %1368
  %1378 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %1379 = mul nsw i32 %1359, %1282
  %1380 = sext i32 %1379 to i64
  %1381 = mul nsw i64 %1380, 36
  %1382 = call ptr %1378(i64 noundef %1381, ptr noundef nonnull @.str.211) #20
  store ptr %1382, ptr %1288, align 8, !tbaa !32
  %1383 = load i32, ptr %1066, align 4, !tbaa !31
  %1384 = icmp sgt i32 %1383, 0
  br i1 %1384, label %1385, label %1449

1385:                                             ; preds = %1377
  %1386 = fcmp fast olt float %1356, %1357
  %1387 = load i32, ptr %1063, align 8, !tbaa !23
  br label %1388

1388:                                             ; preds = %1442, %1385
  %1389 = phi i32 [ %1387, %1385 ], [ %1443, %1442 ]
  %1390 = phi i32 [ %1383, %1385 ], [ %1444, %1442 ]
  %1391 = phi i32 [ 0, %1385 ], [ %1447, %1442 ]
  %1392 = phi ptr [ %1382, %1385 ], [ %1446, %1442 ]
  %1393 = phi ptr [ %1289, %1385 ], [ %1445, %1442 ]
  %1394 = icmp sgt i32 %1389, 0
  br i1 %1394, label %1395, label %1442

1395:                                             ; preds = %1388
  %1396 = load ptr, ptr %1294, align 8, !tbaa !32
  %1397 = load i32, ptr %1358, align 8, !tbaa !23
  %1398 = xor i32 %1391, -1
  %1399 = add i32 %1390, %1398
  %1400 = select i1 %1386, i32 %1391, i32 %1399
  %1401 = mul nsw i32 %1397, %1400
  %1402 = sext i32 %1401 to i64
  %1403 = getelementptr inbounds %struct.BPoint, ptr %1396, i64 %1402
  br label %1404

1404:                                             ; preds = %1433, %1395
  %1405 = phi i32 [ %1436, %1433 ], [ 0, %1395 ]
  %1406 = phi ptr [ %1437, %1433 ], [ %1392, %1395 ]
  %1407 = phi ptr [ %1435, %1433 ], [ %1393, %1395 ]
  %1408 = phi ptr [ %1434, %1433 ], [ %1403, %1395 ]
  %1409 = icmp slt i32 %1405, %1290
  %1410 = load ptr, ptr %1057, align 8, !tbaa !18
  %1411 = getelementptr %struct.EditNurb, ptr %1410, i64 0, i32 1
  %1412 = load ptr, ptr %1411, align 8, !tbaa !47
  %1413 = icmp eq ptr %1412, null
  br i1 %1409, label %1414, label %1425

1414:                                             ; preds = %1404
  br i1 %1413, label %1420, label %1415

1415:                                             ; preds = %1414
  %1416 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %1412, ptr noundef %1407, ptr noundef null) #20
  %1417 = icmp eq ptr %1416, null
  br i1 %1417, label %1420, label %1418

1418:                                             ; preds = %1415
  %1419 = load ptr, ptr %1411, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1419, ptr noundef %1406, ptr noundef nonnull %1416) #20
  br label %1420

1420:                                             ; preds = %1418, %1415, %1414
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %1406, ptr noundef nonnull align 4 dereferenceable(36) %1407, i64 36, i1 false), !tbaa.struct !168
  %1421 = getelementptr inbounds %struct.BPoint, ptr %1407, i64 1
  %1422 = getelementptr inbounds %struct.BPoint, ptr %1406, i64 0, i32 3
  %1423 = load i16, ptr %1422, align 4, !tbaa !34
  %1424 = or i16 %1423, 1
  store i16 %1424, ptr %1422, align 4, !tbaa !34
  br label %1433

1425:                                             ; preds = %1404
  br i1 %1413, label %1431, label %1426

1426:                                             ; preds = %1425
  %1427 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %1412, ptr noundef %1408, ptr noundef null) #20
  %1428 = icmp eq ptr %1427, null
  br i1 %1428, label %1431, label %1429

1429:                                             ; preds = %1426
  %1430 = load ptr, ptr %1411, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1430, ptr noundef %1406, ptr noundef nonnull %1427) #20
  br label %1431

1431:                                             ; preds = %1429, %1426, %1425
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %1406, ptr noundef nonnull align 4 dereferenceable(36) %1408, i64 36, i1 false), !tbaa.struct !168
  %1432 = getelementptr inbounds %struct.BPoint, ptr %1408, i64 1
  br label %1433

1433:                                             ; preds = %1431, %1420
  %1434 = phi ptr [ %1408, %1420 ], [ %1432, %1431 ]
  %1435 = phi ptr [ %1421, %1420 ], [ %1407, %1431 ]
  %1436 = add nuw nsw i32 %1405, 1
  %1437 = getelementptr inbounds %struct.BPoint, ptr %1406, i64 1
  %1438 = load i32, ptr %1063, align 8, !tbaa !23
  %1439 = icmp slt i32 %1436, %1438
  br i1 %1439, label %1404, label %1440, !llvm.loop !257

1440:                                             ; preds = %1433
  %1441 = load i32, ptr %1066, align 4, !tbaa !31
  br label %1442

1442:                                             ; preds = %1440, %1388
  %1443 = phi i32 [ %1389, %1388 ], [ %1438, %1440 ]
  %1444 = phi i32 [ %1390, %1388 ], [ %1441, %1440 ]
  %1445 = phi ptr [ %1393, %1388 ], [ %1435, %1440 ]
  %1446 = phi ptr [ %1392, %1388 ], [ %1437, %1440 ]
  %1447 = add nuw nsw i32 %1391, 1
  %1448 = icmp slt i32 %1447, %1444
  br i1 %1448, label %1388, label %1449, !llvm.loop !258

1449:                                             ; preds = %1442, %1377
  %1450 = getelementptr inbounds %struct.Nurb, ptr %1060, i64 0, i32 2
  %1451 = load i16, ptr %1450, align 8, !tbaa !21
  %1452 = icmp eq i16 %1451, 4
  br i1 %1452, label %1453, label %1454

1453:                                             ; preds = %1449
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1060) #20
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %1060) #20
  br label %1454

1454:                                             ; preds = %1453, %1449
  %1455 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  call void %1455(ptr noundef %1289) #20
  call void @BLI_remlink(ptr noundef nonnull %789, ptr noundef %1062) #20
  call void @BKE_nurb_free(ptr noundef %1062) #20
  br label %1456

1456:                                             ; preds = %1454, %1285, %1278, %1275, %1171, %1169
  %1457 = load ptr, ptr %1059, align 8, !tbaa !250
  %1458 = icmp eq ptr %1457, null
  br i1 %1458, label %1459, label %1058, !llvm.loop !259

1459:                                             ; preds = %1456
  call void @BLI_freelistN(ptr noundef nonnull @nsortbase) #20
  %1460 = load ptr, ptr %779, align 8, !tbaa !17
  call void @BKE_curve_nurb_active_set(ptr noundef %1460, ptr noundef null) #20
  %1461 = load ptr, ptr %779, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %1461) #20
  %1462 = load ptr, ptr %779, align 8, !tbaa !17
  call void @DAG_id_tag_update(ptr noundef %1462, i16 noundef signext 0) #20
  br label %1959

1463:                                             ; preds = %22, %1608
  %1464 = phi ptr [ %1609, %1608 ], [ null, %22 ]
  %1465 = phi ptr [ %1610, %1608 ], [ null, %22 ]
  %1466 = phi ptr [ %1467, %1608 ], [ %15, %22 ]
  %1467 = load ptr, ptr %1466, align 8, !tbaa !36
  %1468 = icmp eq ptr %1467, null
  br i1 %1468, label %1614, label %1469

1469:                                             ; preds = %1463
  %1470 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 6
  %1471 = load i32, ptr %1470, align 8, !tbaa !23
  %1472 = icmp eq i32 %1471, 1
  %1473 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 13
  %1474 = load i16, ptr %1473, align 4, !tbaa !39
  br i1 %1472, label %1475, label %1477

1475:                                             ; preds = %1469
  %1476 = and i16 %1474, -2
  store i16 %1476, ptr %1473, align 4, !tbaa !39
  br label %1477

1477:                                             ; preds = %1469, %1475
  %1478 = phi i16 [ %1476, %1475 ], [ %1474, %1469 ]
  %1479 = and i16 %1478, 1
  %1480 = icmp eq i16 %1479, 0
  br i1 %1480, label %1481, label %1608

1481:                                             ; preds = %1477
  %1482 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 2
  %1483 = load i16, ptr %1482, align 8, !tbaa !21
  %1484 = icmp eq i16 %1483, 1
  br i1 %1484, label %1485, label %1575

1485:                                             ; preds = %1481
  %1486 = load i16, ptr %23, align 8, !tbaa !198
  %1487 = and i16 %1486, 1
  %1488 = icmp eq i16 %1487, 0
  %1489 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 18
  %1490 = load ptr, ptr %1489, align 8, !tbaa !24
  %1491 = add nsw i32 %1471, -1
  %1492 = sext i32 %1491 to i64
  %1493 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1492, i32 8
  %1494 = load i8, ptr %1493, align 4, !tbaa !29
  %1495 = and i8 %1494, 1
  %1496 = icmp eq i8 %1495, 0
  br i1 %1488, label %1498, label %1497

1497:                                             ; preds = %1485
  br i1 %1496, label %1531, label %1509

1498:                                             ; preds = %1485
  br i1 %1496, label %1499, label %1509

1499:                                             ; preds = %1498
  %1500 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1492, i32 7
  %1501 = load i8, ptr %1500, align 1, !tbaa !27
  %1502 = and i8 %1501, 1
  %1503 = icmp eq i8 %1502, 0
  br i1 %1503, label %1504, label %1509

1504:                                             ; preds = %1499
  %1505 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1492, i32 9
  %1506 = load i8, ptr %1505, align 1, !tbaa !30
  %1507 = and i8 %1506, 1
  %1508 = icmp eq i8 %1507, 0
  br i1 %1508, label %1536, label %1509

1509:                                             ; preds = %1504, %1499, %1498, %1497
  %1510 = icmp eq ptr %1465, null
  br i1 %1510, label %1608, label %1511

1511:                                             ; preds = %1509
  %1512 = icmp eq ptr %1464, null
  br i1 %1512, label %1513, label %1608

1513:                                             ; preds = %1511
  %1514 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 8
  %1515 = load i8, ptr %1514, align 4, !tbaa !29
  %1516 = and i8 %1515, 1
  %1517 = icmp eq i8 %1516, 0
  br i1 %1488, label %1519, label %1518

1518:                                             ; preds = %1513
  br i1 %1517, label %1530, label %1608

1519:                                             ; preds = %1513
  br i1 %1517, label %1520, label %1608

1520:                                             ; preds = %1519
  %1521 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 7
  %1522 = load i8, ptr %1521, align 1, !tbaa !27
  %1523 = and i8 %1522, 1
  %1524 = icmp eq i8 %1523, 0
  br i1 %1524, label %1525, label %1608

1525:                                             ; preds = %1520
  %1526 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 9
  %1527 = load i8, ptr %1526, align 1, !tbaa !30
  %1528 = and i8 %1527, 1
  %1529 = icmp eq i8 %1528, 0
  br i1 %1529, label %1530, label %1608

1530:                                             ; preds = %1525, %1518
  tail call void @BKE_nurb_direction_switch(ptr noundef nonnull %1467) #20
  tail call fastcc void @keyData_switchDirectionNurb(ptr noundef nonnull %6, ptr noundef nonnull %1467)
  br label %1608

1531:                                             ; preds = %1497
  %1532 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 8
  %1533 = load i8, ptr %1532, align 4, !tbaa !29
  %1534 = and i8 %1533, 1
  %1535 = icmp eq i8 %1534, 0
  br i1 %1535, label %1608, label %1551

1536:                                             ; preds = %1504
  %1537 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 8
  %1538 = load i8, ptr %1537, align 4, !tbaa !29
  %1539 = and i8 %1538, 1
  %1540 = icmp eq i8 %1539, 0
  br i1 %1540, label %1541, label %1551

1541:                                             ; preds = %1536
  %1542 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 7
  %1543 = load i8, ptr %1542, align 1, !tbaa !27
  %1544 = and i8 %1543, 1
  %1545 = icmp eq i8 %1544, 0
  br i1 %1545, label %1546, label %1551

1546:                                             ; preds = %1541
  %1547 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 0, i32 9
  %1548 = load i8, ptr %1547, align 1, !tbaa !30
  %1549 = and i8 %1548, 1
  %1550 = icmp eq i8 %1549, 0
  br i1 %1550, label %1608, label %1551

1551:                                             ; preds = %1546, %1541, %1536, %1531
  %1552 = icmp eq ptr %1464, null
  br i1 %1552, label %1608, label %1553

1553:                                             ; preds = %1551
  %1554 = icmp eq ptr %1465, null
  br i1 %1554, label %1555, label %1608

1555:                                             ; preds = %1553
  %1556 = add nsw i32 %1471, -1
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1557, i32 8
  %1559 = load i8, ptr %1558, align 4, !tbaa !29
  %1560 = and i8 %1559, 1
  %1561 = icmp eq i8 %1560, 0
  br i1 %1488, label %1563, label %1562

1562:                                             ; preds = %1555
  br i1 %1561, label %1574, label %1608

1563:                                             ; preds = %1555
  br i1 %1561, label %1564, label %1608

1564:                                             ; preds = %1563
  %1565 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1557, i32 7
  %1566 = load i8, ptr %1565, align 1, !tbaa !27
  %1567 = and i8 %1566, 1
  %1568 = icmp eq i8 %1567, 0
  br i1 %1568, label %1569, label %1608

1569:                                             ; preds = %1564
  %1570 = getelementptr inbounds %struct.BezTriple, ptr %1490, i64 %1557, i32 9
  %1571 = load i8, ptr %1570, align 1, !tbaa !30
  %1572 = and i8 %1571, 1
  %1573 = icmp eq i8 %1572, 0
  br i1 %1573, label %1574, label %1608

1574:                                             ; preds = %1569, %1562
  tail call void @BKE_nurb_direction_switch(ptr noundef nonnull %1467) #20
  tail call fastcc void @keyData_switchDirectionNurb(ptr noundef nonnull %6, ptr noundef nonnull %1467)
  br label %1608

1575:                                             ; preds = %1481
  %1576 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 7
  %1577 = load i32, ptr %1576, align 4, !tbaa !31
  %1578 = icmp eq i32 %1577, 1
  br i1 %1578, label %1579, label %1608

1579:                                             ; preds = %1575
  %1580 = getelementptr inbounds %struct.Nurb, ptr %1467, i64 0, i32 17
  %1581 = load ptr, ptr %1580, align 8, !tbaa !32
  %1582 = add nsw i32 %1471, -1
  %1583 = sext i32 %1582 to i64
  %1584 = getelementptr inbounds %struct.BPoint, ptr %1581, i64 %1583, i32 3
  %1585 = load i16, ptr %1584, align 4, !tbaa !34
  %1586 = and i16 %1585, 1
  %1587 = icmp eq i16 %1586, 0
  br i1 %1587, label %1598, label %1588

1588:                                             ; preds = %1579
  %1589 = icmp eq ptr %1465, null
  br i1 %1589, label %1608, label %1590

1590:                                             ; preds = %1588
  %1591 = icmp eq ptr %1464, null
  br i1 %1591, label %1592, label %1608

1592:                                             ; preds = %1590
  %1593 = getelementptr inbounds %struct.BPoint, ptr %1581, i64 0, i32 3
  %1594 = load i16, ptr %1593, align 4, !tbaa !34
  %1595 = and i16 %1594, 1
  %1596 = icmp eq i16 %1595, 0
  br i1 %1596, label %1597, label %1608

1597:                                             ; preds = %1592
  tail call void @BKE_nurb_direction_switch(ptr noundef nonnull %1467) #20
  tail call fastcc void @keyData_switchDirectionNurb(ptr noundef %6, ptr noundef nonnull %1467)
  br label %1608

1598:                                             ; preds = %1579
  %1599 = getelementptr inbounds %struct.BPoint, ptr %1581, i64 0, i32 3
  %1600 = load i16, ptr %1599, align 4, !tbaa !34
  %1601 = and i16 %1600, 1
  %1602 = icmp eq i16 %1601, 0
  br i1 %1602, label %1608, label %1603

1603:                                             ; preds = %1598
  %1604 = icmp eq ptr %1464, null
  br i1 %1604, label %1608, label %1605

1605:                                             ; preds = %1603
  %1606 = icmp eq ptr %1465, null
  br i1 %1606, label %1607, label %1608

1607:                                             ; preds = %1605
  tail call void @BKE_nurb_direction_switch(ptr noundef nonnull %1467) #20
  tail call fastcc void @keyData_switchDirectionNurb(ptr noundef %6, ptr noundef nonnull %1467)
  br label %1608

1608:                                             ; preds = %1603, %1588, %1551, %1509, %1531, %1546, %1553, %1574, %1569, %1564, %1563, %1562, %1518, %1519, %1520, %1525, %1530, %1511, %1590, %1597, %1592, %1607, %1605, %1598, %1575, %1477
  %1609 = phi ptr [ %1467, %1518 ], [ %1467, %1530 ], [ %1467, %1519 ], [ %1467, %1520 ], [ %1467, %1525 ], [ %1464, %1511 ], [ %1464, %1562 ], [ %1464, %1574 ], [ %1464, %1563 ], [ %1464, %1564 ], [ %1464, %1569 ], [ %1464, %1553 ], [ %1464, %1531 ], [ %1464, %1546 ], [ %1467, %1597 ], [ %1467, %1592 ], [ %1464, %1590 ], [ %1464, %1607 ], [ %1464, %1605 ], [ %1464, %1598 ], [ %1464, %1575 ], [ %1464, %1477 ], [ %1464, %1509 ], [ %1467, %1551 ], [ %1464, %1588 ], [ %1467, %1603 ]
  %1610 = phi ptr [ %1465, %1518 ], [ %1465, %1530 ], [ %1465, %1519 ], [ %1465, %1520 ], [ %1465, %1525 ], [ %1465, %1511 ], [ %1467, %1562 ], [ %1467, %1574 ], [ %1467, %1563 ], [ %1467, %1564 ], [ %1467, %1569 ], [ %1465, %1553 ], [ %1465, %1531 ], [ %1465, %1546 ], [ %1465, %1597 ], [ %1465, %1592 ], [ %1465, %1590 ], [ %1467, %1607 ], [ %1465, %1605 ], [ %1465, %1598 ], [ %1465, %1575 ], [ %1465, %1477 ], [ %1467, %1509 ], [ %1465, %1551 ], [ %1467, %1588 ], [ %1465, %1603 ]
  %1611 = icmp ne ptr %1609, null
  %1612 = icmp ne ptr %1610, null
  %1613 = select i1 %1611, i1 %1612, i1 false
  br i1 %1613, label %1614, label %1463, !llvm.loop !260

1614:                                             ; preds = %1608, %1463
  %1615 = phi ptr [ %1609, %1608 ], [ %1464, %1463 ]
  %1616 = phi ptr [ %1610, %1608 ], [ %1465, %1463 ]
  %1617 = icmp ne ptr %1615, null
  %1618 = icmp ne ptr %1616, null
  %1619 = select i1 %1617, i1 %1618, i1 false
  %1620 = icmp ne ptr %1615, %1616
  %1621 = select i1 %1619, i1 %1620, i1 false
  br i1 %1621, label %1622, label %1849

1622:                                             ; preds = %1614
  %1623 = getelementptr inbounds %struct.Nurb, ptr %1615, i64 0, i32 2
  %1624 = load i16, ptr %1623, align 8, !tbaa !21
  %1625 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 2
  %1626 = load i16, ptr %1625, align 8, !tbaa !21
  %1627 = icmp eq i16 %1624, %1626
  br i1 %1627, label %1628, label %1928

1628:                                             ; preds = %1622
  %1629 = icmp eq i16 %1624, 1
  %1630 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %1631 = getelementptr inbounds %struct.Nurb, ptr %1615, i64 0, i32 6
  %1632 = load i32, ptr %1631, align 8, !tbaa !23
  %1633 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 6
  %1634 = load i32, ptr %1633, align 8, !tbaa !23
  %1635 = add nsw i32 %1634, %1632
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds %struct.Curve, ptr %6, i64 0, i32 4
  br i1 %1629, label %1638, label %1738

1638:                                             ; preds = %1628
  %1639 = mul nsw i64 %1636, 72
  %1640 = tail call ptr %1630(i64 noundef %1639, ptr noundef nonnull @.str.205) #20
  %1641 = load ptr, ptr %1637, align 8, !tbaa !18
  %1642 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 18
  %1643 = load ptr, ptr %1642, align 8, !tbaa !24
  %1644 = load i32, ptr %1633, align 8, !tbaa !23
  %1645 = sext i32 %1644 to i64
  %1646 = mul nsw i64 %1645, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1640, ptr align 4 %1643, i64 %1646, i1 false)
  %1647 = getelementptr %struct.EditNurb, ptr %1641, i64 0, i32 1
  %1648 = load ptr, ptr %1647, align 8, !tbaa !47
  %1649 = icmp ne ptr %1648, null
  %1650 = icmp sgt i32 %1644, 0
  %1651 = and i1 %1650, %1649
  br i1 %1651, label %1652, label %1666

1652:                                             ; preds = %1638, %1661
  %1653 = phi ptr [ %1663, %1661 ], [ %1643, %1638 ]
  %1654 = phi i32 [ %1664, %1661 ], [ 0, %1638 ]
  %1655 = phi ptr [ %1662, %1661 ], [ %1640, %1638 ]
  %1656 = load ptr, ptr %1647, align 8, !tbaa !47
  %1657 = tail call ptr @BLI_ghash_popkey(ptr noundef %1656, ptr noundef %1653, ptr noundef null) #20
  %1658 = icmp eq ptr %1657, null
  br i1 %1658, label %1661, label %1659

1659:                                             ; preds = %1652
  %1660 = load ptr, ptr %1647, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %1660, ptr noundef %1655, ptr noundef nonnull %1657) #20
  br label %1661

1661:                                             ; preds = %1659, %1652
  %1662 = getelementptr inbounds i8, ptr %1655, i64 72
  %1663 = getelementptr inbounds i8, ptr %1653, i64 72
  %1664 = add nuw nsw i32 %1654, 1
  %1665 = icmp eq i32 %1664, %1644
  br i1 %1665, label %1666, label %1652, !llvm.loop !157

1666:                                             ; preds = %1661, %1638
  %1667 = load ptr, ptr %1637, align 8, !tbaa !18
  %1668 = load i32, ptr %1633, align 8, !tbaa !23
  %1669 = sext i32 %1668 to i64
  %1670 = getelementptr inbounds %struct.BezTriple, ptr %1640, i64 %1669
  %1671 = getelementptr inbounds %struct.Nurb, ptr %1615, i64 0, i32 18
  %1672 = load ptr, ptr %1671, align 8, !tbaa !24
  %1673 = load i32, ptr %1631, align 8, !tbaa !23
  %1674 = sext i32 %1673 to i64
  %1675 = mul nsw i64 %1674, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1670, ptr align 4 %1672, i64 %1675, i1 false)
  %1676 = getelementptr %struct.EditNurb, ptr %1667, i64 0, i32 1
  %1677 = load ptr, ptr %1676, align 8, !tbaa !47
  %1678 = icmp ne ptr %1677, null
  %1679 = icmp sgt i32 %1673, 0
  %1680 = and i1 %1679, %1678
  br i1 %1680, label %1681, label %1695

1681:                                             ; preds = %1666, %1690
  %1682 = phi ptr [ %1692, %1690 ], [ %1672, %1666 ]
  %1683 = phi i32 [ %1693, %1690 ], [ 0, %1666 ]
  %1684 = phi ptr [ %1691, %1690 ], [ %1670, %1666 ]
  %1685 = load ptr, ptr %1676, align 8, !tbaa !47
  %1686 = tail call ptr @BLI_ghash_popkey(ptr noundef %1685, ptr noundef %1682, ptr noundef null) #20
  %1687 = icmp eq ptr %1686, null
  br i1 %1687, label %1690, label %1688

1688:                                             ; preds = %1681
  %1689 = load ptr, ptr %1676, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %1689, ptr noundef %1684, ptr noundef nonnull %1686) #20
  br label %1690

1690:                                             ; preds = %1688, %1681
  %1691 = getelementptr inbounds i8, ptr %1684, i64 72
  %1692 = getelementptr inbounds i8, ptr %1682, i64 72
  %1693 = add nuw nsw i32 %1683, 1
  %1694 = icmp eq i32 %1693, %1673
  br i1 %1694, label %1695, label %1681, !llvm.loop !157

1695:                                             ; preds = %1690, %1666
  %1696 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1697 = load ptr, ptr %1671, align 8, !tbaa !24
  tail call void %1696(ptr noundef %1697) #20
  store ptr %1640, ptr %1671, align 8, !tbaa !24
  %1698 = load i32, ptr %1633, align 8, !tbaa !23
  %1699 = load i32, ptr %1631, align 8, !tbaa !23
  %1700 = add nsw i32 %1699, %1698
  store i32 %1700, ptr %1631, align 8, !tbaa !23
  tail call void @BLI_remlink(ptr noundef %15, ptr noundef nonnull %1616) #20
  %1701 = load ptr, ptr %1637, align 8, !tbaa !18
  %1702 = getelementptr inbounds %struct.EditNurb, ptr %1701, i64 0, i32 1
  %1703 = load ptr, ptr %1702, align 8, !tbaa !47
  %1704 = icmp eq ptr %1703, null
  br i1 %1704, label %1737, label %1705

1705:                                             ; preds = %1695
  %1706 = load ptr, ptr %1642, align 8, !tbaa !24
  %1707 = icmp eq ptr %1706, null
  %1708 = load i32, ptr %1633, align 8, !tbaa !23
  br i1 %1707, label %1720, label %1709

1709:                                             ; preds = %1705
  %1710 = icmp eq i32 %1708, 0
  br i1 %1710, label %1737, label %1711

1711:                                             ; preds = %1709, %1711
  %1712 = phi ptr [ %1718, %1711 ], [ %1706, %1709 ]
  %1713 = phi i32 [ %1714, %1711 ], [ %1708, %1709 ]
  %1714 = add nsw i32 %1713, -1
  %1715 = load ptr, ptr %1702, align 8, !tbaa !47
  %1716 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1717 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %1715, ptr noundef nonnull %1712, ptr noundef null, ptr noundef %1716) #20
  %1718 = getelementptr inbounds %struct.BezTriple, ptr %1712, i64 1
  %1719 = icmp eq i32 %1714, 0
  br i1 %1719, label %1737, label %1711, !llvm.loop !261

1720:                                             ; preds = %1705
  %1721 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 7
  %1722 = load i32, ptr %1721, align 4, !tbaa !31
  %1723 = mul nsw i32 %1722, %1708
  %1724 = icmp eq i32 %1723, 0
  br i1 %1724, label %1737, label %1725

1725:                                             ; preds = %1720
  %1726 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 17
  %1727 = load ptr, ptr %1726, align 8, !tbaa !32
  br label %1728

1728:                                             ; preds = %1728, %1725
  %1729 = phi ptr [ %1735, %1728 ], [ %1727, %1725 ]
  %1730 = phi i32 [ %1731, %1728 ], [ %1723, %1725 ]
  %1731 = add nsw i32 %1730, -1
  %1732 = load ptr, ptr %1702, align 8, !tbaa !47
  %1733 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1734 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %1732, ptr noundef %1729, ptr noundef null, ptr noundef %1733) #20
  %1735 = getelementptr inbounds %struct.BPoint, ptr %1729, i64 1
  %1736 = icmp eq i32 %1731, 0
  br i1 %1736, label %1737, label %1728, !llvm.loop !262

1737:                                             ; preds = %1711, %1728, %1695, %1709, %1720
  tail call void @BKE_nurb_free(ptr noundef nonnull %1616) #20
  tail call void @BKE_nurb_handles_calc(ptr noundef nonnull %1615) #20
  br label %1848

1738:                                             ; preds = %1628
  %1739 = mul nsw i64 %1636, 36
  %1740 = tail call ptr %1630(i64 noundef %1739, ptr noundef nonnull @.str.206) #20
  %1741 = load ptr, ptr %1637, align 8, !tbaa !18
  %1742 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 17
  %1743 = load ptr, ptr %1742, align 8, !tbaa !32
  %1744 = load i32, ptr %1633, align 8, !tbaa !23
  %1745 = sext i32 %1744 to i64
  %1746 = mul nsw i64 %1745, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1740, ptr align 4 %1743, i64 %1746, i1 false)
  %1747 = getelementptr %struct.EditNurb, ptr %1741, i64 0, i32 1
  %1748 = load ptr, ptr %1747, align 8, !tbaa !47
  %1749 = icmp ne ptr %1748, null
  %1750 = icmp sgt i32 %1744, 0
  %1751 = and i1 %1750, %1749
  br i1 %1751, label %1752, label %1766

1752:                                             ; preds = %1738, %1761
  %1753 = phi ptr [ %1763, %1761 ], [ %1743, %1738 ]
  %1754 = phi i32 [ %1764, %1761 ], [ 0, %1738 ]
  %1755 = phi ptr [ %1762, %1761 ], [ %1740, %1738 ]
  %1756 = load ptr, ptr %1747, align 8, !tbaa !47
  %1757 = tail call ptr @BLI_ghash_popkey(ptr noundef %1756, ptr noundef %1753, ptr noundef null) #20
  %1758 = icmp eq ptr %1757, null
  br i1 %1758, label %1761, label %1759

1759:                                             ; preds = %1752
  %1760 = load ptr, ptr %1747, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %1760, ptr noundef %1755, ptr noundef nonnull %1757) #20
  br label %1761

1761:                                             ; preds = %1759, %1752
  %1762 = getelementptr inbounds i8, ptr %1755, i64 36
  %1763 = getelementptr inbounds i8, ptr %1753, i64 36
  %1764 = add nuw nsw i32 %1754, 1
  %1765 = icmp eq i32 %1764, %1744
  br i1 %1765, label %1766, label %1752, !llvm.loop !157

1766:                                             ; preds = %1761, %1738
  %1767 = load ptr, ptr %1637, align 8, !tbaa !18
  %1768 = load i32, ptr %1633, align 8, !tbaa !23
  %1769 = sext i32 %1768 to i64
  %1770 = getelementptr inbounds %struct.BPoint, ptr %1740, i64 %1769
  %1771 = getelementptr inbounds %struct.Nurb, ptr %1615, i64 0, i32 17
  %1772 = load ptr, ptr %1771, align 8, !tbaa !32
  %1773 = load i32, ptr %1631, align 8, !tbaa !23
  %1774 = sext i32 %1773 to i64
  %1775 = mul nsw i64 %1774, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1770, ptr align 4 %1772, i64 %1775, i1 false)
  %1776 = getelementptr %struct.EditNurb, ptr %1767, i64 0, i32 1
  %1777 = load ptr, ptr %1776, align 8, !tbaa !47
  %1778 = icmp ne ptr %1777, null
  %1779 = icmp sgt i32 %1773, 0
  %1780 = and i1 %1779, %1778
  br i1 %1780, label %1781, label %1795

1781:                                             ; preds = %1766, %1790
  %1782 = phi ptr [ %1792, %1790 ], [ %1772, %1766 ]
  %1783 = phi i32 [ %1793, %1790 ], [ 0, %1766 ]
  %1784 = phi ptr [ %1791, %1790 ], [ %1770, %1766 ]
  %1785 = load ptr, ptr %1776, align 8, !tbaa !47
  %1786 = tail call ptr @BLI_ghash_popkey(ptr noundef %1785, ptr noundef %1782, ptr noundef null) #20
  %1787 = icmp eq ptr %1786, null
  br i1 %1787, label %1790, label %1788

1788:                                             ; preds = %1781
  %1789 = load ptr, ptr %1776, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %1789, ptr noundef %1784, ptr noundef nonnull %1786) #20
  br label %1790

1790:                                             ; preds = %1788, %1781
  %1791 = getelementptr inbounds i8, ptr %1784, i64 36
  %1792 = getelementptr inbounds i8, ptr %1782, i64 36
  %1793 = add nuw nsw i32 %1783, 1
  %1794 = icmp eq i32 %1793, %1773
  br i1 %1794, label %1795, label %1781, !llvm.loop !157

1795:                                             ; preds = %1790, %1766
  %1796 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1797 = load ptr, ptr %1771, align 8, !tbaa !32
  tail call void %1796(ptr noundef %1797) #20
  store ptr %1740, ptr %1771, align 8, !tbaa !32
  %1798 = load i32, ptr %1633, align 8, !tbaa !23
  %1799 = load i32, ptr %1631, align 8, !tbaa !23
  %1800 = add nsw i32 %1799, %1798
  store i32 %1800, ptr %1631, align 8, !tbaa !23
  tail call void @BLI_remlink(ptr noundef %15, ptr noundef nonnull %1616) #20
  %1801 = load i16, ptr %1623, align 8, !tbaa !21
  %1802 = icmp eq i16 %1801, 4
  br i1 %1802, label %1803, label %1810

1803:                                             ; preds = %1795
  %1804 = getelementptr inbounds %struct.Nurb, ptr %1615, i64 0, i32 15
  %1805 = load ptr, ptr %1804, align 8, !tbaa !37
  %1806 = icmp eq ptr %1805, null
  br i1 %1806, label %1809, label %1807

1807:                                             ; preds = %1803
  %1808 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %1808(ptr noundef nonnull %1805) #20
  store ptr null, ptr %1804, align 8, !tbaa !37
  br label %1809

1809:                                             ; preds = %1807, %1803
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1615) #20
  br label %1810

1810:                                             ; preds = %1809, %1795
  %1811 = load ptr, ptr %1637, align 8, !tbaa !18
  %1812 = getelementptr inbounds %struct.EditNurb, ptr %1811, i64 0, i32 1
  %1813 = load ptr, ptr %1812, align 8, !tbaa !47
  %1814 = icmp eq ptr %1813, null
  br i1 %1814, label %1847, label %1815

1815:                                             ; preds = %1810
  %1816 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 18
  %1817 = load ptr, ptr %1816, align 8, !tbaa !24
  %1818 = icmp eq ptr %1817, null
  %1819 = load i32, ptr %1633, align 8, !tbaa !23
  br i1 %1818, label %1831, label %1820

1820:                                             ; preds = %1815
  %1821 = icmp eq i32 %1819, 0
  br i1 %1821, label %1847, label %1822

1822:                                             ; preds = %1820, %1822
  %1823 = phi ptr [ %1829, %1822 ], [ %1817, %1820 ]
  %1824 = phi i32 [ %1825, %1822 ], [ %1819, %1820 ]
  %1825 = add nsw i32 %1824, -1
  %1826 = load ptr, ptr %1812, align 8, !tbaa !47
  %1827 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1828 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %1826, ptr noundef nonnull %1823, ptr noundef null, ptr noundef %1827) #20
  %1829 = getelementptr inbounds %struct.BezTriple, ptr %1823, i64 1
  %1830 = icmp eq i32 %1825, 0
  br i1 %1830, label %1847, label %1822, !llvm.loop !261

1831:                                             ; preds = %1815
  %1832 = getelementptr inbounds %struct.Nurb, ptr %1616, i64 0, i32 7
  %1833 = load i32, ptr %1832, align 4, !tbaa !31
  %1834 = mul nsw i32 %1833, %1819
  %1835 = icmp eq i32 %1834, 0
  br i1 %1835, label %1847, label %1836

1836:                                             ; preds = %1831
  %1837 = load ptr, ptr %1742, align 8, !tbaa !32
  br label %1838

1838:                                             ; preds = %1838, %1836
  %1839 = phi ptr [ %1845, %1838 ], [ %1837, %1836 ]
  %1840 = phi i32 [ %1841, %1838 ], [ %1834, %1836 ]
  %1841 = add nsw i32 %1840, -1
  %1842 = load ptr, ptr %1812, align 8, !tbaa !47
  %1843 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1844 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %1842, ptr noundef %1839, ptr noundef null, ptr noundef %1843) #20
  %1845 = getelementptr inbounds %struct.BPoint, ptr %1839, i64 1
  %1846 = icmp eq i32 %1841, 0
  br i1 %1846, label %1847, label %1838, !llvm.loop !262

1847:                                             ; preds = %1822, %1838, %1810, %1820, %1831
  tail call void @BKE_nurb_free(ptr noundef nonnull %1616) #20
  br label %1848

1848:                                             ; preds = %1847, %1737
  tail call void @BKE_curve_nurb_active_set(ptr noundef %6, ptr noundef nonnull %1615) #20
  br label %1931

1849:                                             ; preds = %1614
  %1850 = xor i1 %1617, %1618
  br i1 %1850, label %1851, label %1928

1851:                                             ; preds = %1849
  %1852 = select i1 %1618, ptr %1616, ptr %1615
  %1853 = getelementptr inbounds %struct.Nurb, ptr %1852, i64 0, i32 13
  %1854 = load i16, ptr %1853, align 4, !tbaa !39
  %1855 = and i16 %1854, 1
  %1856 = icmp eq i16 %1855, 0
  br i1 %1856, label %1857, label %1928

1857:                                             ; preds = %1851
  %1858 = getelementptr inbounds %struct.Nurb, ptr %1852, i64 0, i32 6
  %1859 = load i32, ptr %1858, align 8, !tbaa !23
  %1860 = icmp sgt i32 %1859, 1
  br i1 %1860, label %1861, label %1928

1861:                                             ; preds = %1857
  %1862 = getelementptr inbounds %struct.Nurb, ptr %1852, i64 0, i32 2
  %1863 = load i16, ptr %1862, align 8, !tbaa !21
  switch i16 %1863, label %1928 [
    i16 1, label %1864
    i16 4, label %1912
  ]

1864:                                             ; preds = %1861
  %1865 = load i16, ptr %23, align 8, !tbaa !198
  %1866 = and i16 %1865, 1
  %1867 = icmp eq i16 %1866, 0
  %1868 = getelementptr inbounds %struct.Nurb, ptr %1852, i64 0, i32 18
  %1869 = load ptr, ptr %1868, align 8, !tbaa !24
  %1870 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 0, i32 8
  %1871 = load i8, ptr %1870, align 4, !tbaa !29
  %1872 = and i8 %1871, 1
  %1873 = icmp eq i8 %1872, 0
  br i1 %1867, label %1875, label %1874

1874:                                             ; preds = %1864
  br i1 %1873, label %1928, label %1886

1875:                                             ; preds = %1864
  br i1 %1873, label %1876, label %1893

1876:                                             ; preds = %1875
  %1877 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 0, i32 7
  %1878 = load i8, ptr %1877, align 1, !tbaa !27
  %1879 = and i8 %1878, 1
  %1880 = icmp eq i8 %1879, 0
  br i1 %1880, label %1881, label %1893

1881:                                             ; preds = %1876
  %1882 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 0, i32 9
  %1883 = load i8, ptr %1882, align 1, !tbaa !30
  %1884 = and i8 %1883, 1
  %1885 = icmp eq i8 %1884, 0
  br i1 %1885, label %1928, label %1893

1886:                                             ; preds = %1874
  %1887 = add nsw i32 %1859, -1
  %1888 = zext i32 %1887 to i64
  %1889 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 %1888, i32 8
  %1890 = load i8, ptr %1889, align 4, !tbaa !29
  %1891 = and i8 %1890, 1
  %1892 = icmp eq i8 %1891, 0
  br i1 %1892, label %1928, label %1910

1893:                                             ; preds = %1881, %1876, %1875
  %1894 = add nsw i32 %1859, -1
  %1895 = zext i32 %1894 to i64
  %1896 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 %1895, i32 8
  %1897 = load i8, ptr %1896, align 4, !tbaa !29
  %1898 = and i8 %1897, 1
  %1899 = icmp eq i8 %1898, 0
  br i1 %1899, label %1900, label %1910

1900:                                             ; preds = %1893
  %1901 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 %1895, i32 7
  %1902 = load i8, ptr %1901, align 1, !tbaa !27
  %1903 = and i8 %1902, 1
  %1904 = icmp eq i8 %1903, 0
  br i1 %1904, label %1905, label %1910

1905:                                             ; preds = %1900
  %1906 = getelementptr inbounds %struct.BezTriple, ptr %1869, i64 %1895, i32 9
  %1907 = load i8, ptr %1906, align 1, !tbaa !30
  %1908 = and i8 %1907, 1
  %1909 = icmp eq i8 %1908, 0
  br i1 %1909, label %1928, label %1910

1910:                                             ; preds = %1905, %1900, %1893, %1886
  %1911 = or i16 %1854, 1
  store i16 %1911, ptr %1853, align 4, !tbaa !39
  tail call void @BKE_nurb_handles_calc(ptr noundef nonnull %1852) #20
  br label %1931

1912:                                             ; preds = %1861
  %1913 = getelementptr inbounds %struct.Nurb, ptr %1852, i64 0, i32 17
  %1914 = load ptr, ptr %1913, align 8, !tbaa !32
  %1915 = getelementptr inbounds %struct.BPoint, ptr %1914, i64 0, i32 3
  %1916 = load i16, ptr %1915, align 4, !tbaa !34
  %1917 = and i16 %1916, 1
  %1918 = icmp eq i16 %1917, 0
  br i1 %1918, label %1928, label %1919

1919:                                             ; preds = %1912
  %1920 = add nsw i32 %1859, -1
  %1921 = zext i32 %1920 to i64
  %1922 = getelementptr inbounds %struct.BPoint, ptr %1914, i64 %1921, i32 3
  %1923 = load i16, ptr %1922, align 4, !tbaa !34
  %1924 = and i16 %1923, 1
  %1925 = icmp eq i16 %1924, 0
  br i1 %1925, label %1928, label %1926

1926:                                             ; preds = %1919
  %1927 = or i16 %1854, 1
  store i16 %1927, ptr %1853, align 4, !tbaa !39
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1852) #20
  br label %1931

1928:                                             ; preds = %1861, %1874, %1881, %1886, %1905, %1622, %1851, %1857, %1912, %1919, %1849
  %1929 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %1930 = load ptr, ptr %1929, align 8, !tbaa !150
  tail call void @BKE_report(ptr noundef %1930, i32 noundef 32, ptr noundef nonnull @.str.207) #20
  br label %1959

1931:                                             ; preds = %1848, %1910, %1926
  %1932 = load ptr, ptr %5, align 8, !tbaa !17
  %1933 = tail call ptr @BKE_animdata_from_id(ptr noundef %1932) #20
  %1934 = getelementptr inbounds %struct.Curve, ptr %1932, i64 0, i32 4
  %1935 = load ptr, ptr %1934, align 8, !tbaa !18
  %1936 = getelementptr inbounds %struct.EditNurb, ptr %1935, i64 0, i32 1
  %1937 = load ptr, ptr %1936, align 8, !tbaa !47
  %1938 = icmp eq ptr %1937, null
  br i1 %1938, label %1956, label %1939

1939:                                             ; preds = %1931
  %1940 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %1932) #20
  %1941 = icmp eq ptr %1940, null
  br i1 %1941, label %1956, label %1942

1942:                                             ; preds = %1939
  %1943 = load ptr, ptr %1940, align 8, !tbaa !49
  %1944 = icmp eq ptr %1943, null
  br i1 %1944, label %1945, label %1949

1945:                                             ; preds = %1942
  %1946 = getelementptr inbounds %struct.AnimData, ptr %1940, i64 0, i32 5
  %1947 = load ptr, ptr %1946, align 8, !tbaa !51
  %1948 = icmp eq ptr %1947, null
  br i1 %1948, label %1956, label %1949

1949:                                             ; preds = %1945, %1942
  %1950 = load ptr, ptr %1933, align 8, !tbaa !49
  %1951 = icmp eq ptr %1950, null
  br i1 %1951, label %1954, label %1952

1952:                                             ; preds = %1949
  %1953 = getelementptr inbounds %struct.bAction, ptr %1950, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %1932, ptr noundef nonnull %1953)
  br label %1954

1954:                                             ; preds = %1952, %1949
  %1955 = getelementptr inbounds %struct.AnimData, ptr %1933, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %1932, ptr noundef nonnull %1955)
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %4) #20
  br label %1956

1956:                                             ; preds = %1939, %1945, %1931, %1954
  %1957 = load ptr, ptr %5, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %1957) #20
  %1958 = load ptr, ptr %5, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %1958, i16 noundef signext 0) #20
  br label %1959

1959:                                             ; preds = %1459, %1052, %1004, %1956, %1928
  %1960 = phi i32 [ 4, %1956 ], [ 2, %1928 ], [ 2, %1004 ], [ 2, %1052 ], [ 4, %1459 ]
  ret i32 %1960
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @mouse_nurb(ptr noundef %0, ptr nocapture noundef readonly %1, i8 noundef zeroext %2, i8 noundef zeroext %3, i8 noundef zeroext %4) local_unnamed_addr #5 {
  %6 = alloca %struct.anon.0, align 8
  %7 = alloca %struct.ViewContext, align 8
  %8 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %9 = getelementptr inbounds %struct.Object, ptr %8, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Object, ptr %8, i64 0, i32 3
  %12 = load i16, ptr %11, align 8, !tbaa !5
  %13 = and i16 %12, -2
  %14 = icmp eq i16 %13, 2
  br i1 %14, label %15, label %18

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !18
  br label %18

18:                                               ; preds = %5, %15
  %19 = phi ptr [ %17, %15 ], [ null, %5 ]
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %7) #20
  %20 = tail call ptr @BKE_curve_vert_active_get(ptr noundef %10) #20
  tail call void @view3d_operator_needs_opengl(ptr noundef %0) #20
  call void @view3d_set_viewcontext(ptr noundef %0, ptr noundef nonnull %7) #20
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %6) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %6, i8 0, i64 48, i1 false)
  %21 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 3
  %22 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 4
  %23 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 5
  %24 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 6
  %25 = load <2 x i32>, ptr %1, align 4, !tbaa !74
  %26 = call fast nofpclass(nan inf) float @ED_view3d_select_dist_px() #20
  store float %26, ptr %21, align 8, !tbaa !263
  store i32 0, ptr %22, align 4, !tbaa !265
  store i32 1, ptr %23, align 8, !tbaa !266
  %27 = sitofp <2 x i32> %25 to <2 x float>
  store <2 x float> %27, ptr %24, align 4, !tbaa !40
  %28 = getelementptr inbounds %struct.ViewContext, ptr %7, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !267
  %30 = getelementptr inbounds %struct.ViewContext, ptr %7, i64 0, i32 5
  %31 = load ptr, ptr %30, align 8, !tbaa !269
  call void @ED_view3d_init_mats_rv3d(ptr noundef %29, ptr noundef %31) #20
  call void @nurbs_foreachScreenVert(ptr noundef nonnull %7, ptr noundef nonnull @findnearestNurbvert__doClosest, ptr noundef nonnull %6, i32 noundef 7) #20
  %32 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !270
  %34 = getelementptr inbounds %struct.anon.0, ptr %6, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !271
  %36 = load ptr, ptr %6, align 8, !tbaa !272
  %37 = load i32, ptr %22, align 4, !tbaa !265
  %38 = trunc i32 %37 to i16
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %6) #20
  %39 = icmp ne ptr %35, null
  %40 = icmp ne ptr %36, null
  %41 = select i1 %39, i1 true, i1 %40
  br i1 %41, label %42, label %179

42:                                               ; preds = %18
  %43 = icmp eq i8 %2, 0
  br i1 %43, label %69, label %44

44:                                               ; preds = %42
  br i1 %39, label %45, label %65

45:                                               ; preds = %44
  switch i16 %38, label %58 [
    i16 1, label %46
    i16 0, label %56
  ]

46:                                               ; preds = %45
  %47 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %48 = load i8, ptr %47, align 1, !tbaa !27
  %49 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 8
  %50 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %51 = or i8 %48, 1
  store i8 %51, ptr %47, align 1, !tbaa !27
  %52 = load i8, ptr %49, align 4, !tbaa !29
  %53 = or i8 %52, 1
  store i8 %53, ptr %49, align 4, !tbaa !29
  %54 = load i8, ptr %50, align 1, !tbaa !30
  %55 = or i8 %54, 1
  store i8 %55, ptr %50, align 1, !tbaa !30
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef nonnull %35) #20
  br label %172

56:                                               ; preds = %45
  %57 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  br label %60

58:                                               ; preds = %45
  %59 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  br label %60

60:                                               ; preds = %58, %56
  %61 = phi ptr [ %59, %58 ], [ %57, %56 ]
  %62 = load i8, ptr %61, align 1, !tbaa !169
  %63 = or i8 %62, 1
  store i8 %63, ptr %61, align 1, !tbaa !169
  %64 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %64, align 8, !tbaa !174
  br label %172

65:                                               ; preds = %44
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef %36) #20
  %66 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %67 = load i16, ptr %66, align 4, !tbaa !34
  %68 = or i16 %67, 1
  store i16 %68, ptr %66, align 4, !tbaa !34
  br label %172

69:                                               ; preds = %42
  %70 = icmp eq i8 %3, 0
  br i1 %70, label %101, label %71

71:                                               ; preds = %69
  br i1 %39, label %72, label %94

72:                                               ; preds = %71
  switch i16 %38, label %90 [
    i16 1, label %73
    i16 0, label %86
  ]

73:                                               ; preds = %72
  %74 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %75 = load i8, ptr %74, align 1, !tbaa !27
  %76 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 8
  %77 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %78 = and i8 %75, -2
  store i8 %78, ptr %74, align 1, !tbaa !27
  %79 = load i8, ptr %76, align 4, !tbaa !29
  %80 = and i8 %79, -2
  store i8 %80, ptr %76, align 4, !tbaa !29
  %81 = load i8, ptr %77, align 1, !tbaa !30
  %82 = and i8 %81, -2
  store i8 %82, ptr %77, align 1, !tbaa !30
  %83 = icmp eq ptr %35, %20
  br i1 %83, label %84, label %172

84:                                               ; preds = %73
  %85 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %85, align 8, !tbaa !174
  br label %172

86:                                               ; preds = %72
  %87 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %88 = load i8, ptr %87, align 1, !tbaa !27
  %89 = and i8 %88, -2
  store i8 %89, ptr %87, align 1, !tbaa !27
  br label %172

90:                                               ; preds = %72
  %91 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %92 = load i8, ptr %91, align 1, !tbaa !30
  %93 = and i8 %92, -2
  store i8 %93, ptr %91, align 1, !tbaa !30
  br label %172

94:                                               ; preds = %71
  %95 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %96 = load i16, ptr %95, align 4, !tbaa !34
  %97 = and i16 %96, -2
  store i16 %97, ptr %95, align 4, !tbaa !34
  %98 = icmp eq ptr %36, %20
  br i1 %98, label %99, label %172

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %100, align 8, !tbaa !174
  br label %172

101:                                              ; preds = %69
  %102 = icmp eq i8 %4, 0
  br i1 %102, label %146, label %103

103:                                              ; preds = %101
  br i1 %39, label %104, label %134

104:                                              ; preds = %103
  switch i16 %38, label %130 [
    i16 1, label %105
    i16 0, label %126
  ]

105:                                              ; preds = %104
  %106 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 8
  %107 = load i8, ptr %106, align 4, !tbaa !29
  %108 = and i8 %107, 1
  %109 = icmp eq i8 %108, 0
  %110 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %111 = load i8, ptr %110, align 1, !tbaa !27
  %112 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  br i1 %109, label %121, label %113

113:                                              ; preds = %105
  %114 = and i8 %111, -2
  store i8 %114, ptr %110, align 1, !tbaa !27
  %115 = and i8 %107, -2
  store i8 %115, ptr %106, align 4, !tbaa !29
  %116 = load i8, ptr %112, align 1, !tbaa !30
  %117 = and i8 %116, -2
  store i8 %117, ptr %112, align 1, !tbaa !30
  %118 = icmp eq ptr %35, %20
  br i1 %118, label %119, label %172

119:                                              ; preds = %113
  %120 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %120, align 8, !tbaa !174
  br label %172

121:                                              ; preds = %105
  %122 = or i8 %111, 1
  store i8 %122, ptr %110, align 1, !tbaa !27
  %123 = or i8 %107, 1
  store i8 %123, ptr %106, align 4, !tbaa !29
  %124 = load i8, ptr %112, align 1, !tbaa !30
  %125 = or i8 %124, 1
  store i8 %125, ptr %112, align 1, !tbaa !30
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef nonnull %35) #20
  br label %172

126:                                              ; preds = %104
  %127 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %128 = load i8, ptr %127, align 1, !tbaa !27
  %129 = xor i8 %128, 1
  store i8 %129, ptr %127, align 1, !tbaa !27
  br label %172

130:                                              ; preds = %104
  %131 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %132 = load i8, ptr %131, align 1, !tbaa !30
  %133 = xor i8 %132, 1
  store i8 %133, ptr %131, align 1, !tbaa !30
  br label %172

134:                                              ; preds = %103
  %135 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %136 = load i16, ptr %135, align 4, !tbaa !34
  %137 = and i16 %136, 1
  %138 = icmp eq i16 %137, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %134
  %140 = and i16 %136, -2
  store i16 %140, ptr %135, align 4, !tbaa !34
  %141 = icmp eq ptr %36, %20
  br i1 %141, label %142, label %172

142:                                              ; preds = %139
  %143 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %143, align 8, !tbaa !174
  br label %172

144:                                              ; preds = %134
  %145 = or i16 %136, 1
  store i16 %145, ptr %135, align 4, !tbaa !34
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef nonnull %36) #20
  br label %172

146:                                              ; preds = %101
  call void @BKE_nurbList_flag_set(ptr noundef %19, i16 noundef signext 0) #20
  %147 = icmp eq ptr %35, null
  br i1 %147, label %168, label %148

148:                                              ; preds = %146
  switch i16 %38, label %161 [
    i16 1, label %149
    i16 0, label %159
  ]

149:                                              ; preds = %148
  %150 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  %151 = load i8, ptr %150, align 1, !tbaa !27
  %152 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 8
  %153 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  %154 = or i8 %151, 1
  store i8 %154, ptr %150, align 1, !tbaa !27
  %155 = load i8, ptr %152, align 4, !tbaa !29
  %156 = or i8 %155, 1
  store i8 %156, ptr %152, align 4, !tbaa !29
  %157 = load i8, ptr %153, align 1, !tbaa !30
  %158 = or i8 %157, 1
  store i8 %158, ptr %153, align 1, !tbaa !30
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef nonnull %35) #20
  br label %172

159:                                              ; preds = %148
  %160 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 7
  br label %163

161:                                              ; preds = %148
  %162 = getelementptr inbounds %struct.BezTriple, ptr %35, i64 0, i32 9
  br label %163

163:                                              ; preds = %161, %159
  %164 = phi ptr [ %162, %161 ], [ %160, %159 ]
  %165 = load i8, ptr %164, align 1, !tbaa !169
  %166 = or i8 %165, 1
  store i8 %166, ptr %164, align 1, !tbaa !169
  %167 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %167, align 8, !tbaa !174
  br label %172

168:                                              ; preds = %146
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef %33, ptr noundef %36) #20
  %169 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %170 = load i16, ptr %169, align 4, !tbaa !34
  %171 = or i16 %170, 1
  store i16 %171, ptr %169, align 4, !tbaa !34
  br label %172

172:                                              ; preds = %94, %99, %84, %73, %90, %86, %168, %163, %149, %126, %130, %121, %119, %113, %139, %142, %144, %65, %60, %46
  %173 = call ptr @BKE_curve_nurb_active_get(ptr noundef %10) #20
  %174 = icmp eq ptr %33, %173
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %176, align 8, !tbaa !174
  call void @BKE_curve_nurb_active_set(ptr noundef %10, ptr noundef %33) #20
  br label %177

177:                                              ; preds = %175, %172
  %178 = load ptr, ptr %9, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %178) #20
  br label %179

179:                                              ; preds = %18, %177
  %180 = phi i8 [ 1, %177 ], [ 0, %18 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %7) #20
  ret i8 %180
}

declare ptr @CTX_data_edit_object(ptr noundef) local_unnamed_addr #6

declare ptr @BKE_curve_vert_active_get(ptr noundef) local_unnamed_addr #6

declare void @view3d_operator_needs_opengl(ptr noundef) local_unnamed_addr #6

declare void @view3d_set_viewcontext(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BKE_curve_nurb_vert_active_set(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BKE_nurbList_flag_set(ptr noundef, i16 noundef signext) local_unnamed_addr #6

declare ptr @BKE_curve_nurb_active_get(ptr noundef) local_unnamed_addr #6

declare void @BKE_curve_nurb_active_set(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @WM_event_add_notifier(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ed_editnurb_spin(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3) local_unnamed_addr #5 {
  %5 = alloca [3 x [3 x float]], align 16
  %6 = alloca [3 x [3 x float]], align 16
  %7 = alloca [3 x [3 x float]], align 16
  %8 = alloca [3 x [3 x float]], align 16
  %9 = alloca [3 x [3 x float]], align 16
  %10 = alloca [3 x [3 x float]], align 16
  %11 = alloca [3 x [3 x float]], align 16
  %12 = alloca [3 x [3 x float]], align 16
  %13 = alloca [3 x [3 x float]], align 16
  %14 = getelementptr inbounds %struct.Object, ptr %1, i64 0, i32 19
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = getelementptr inbounds %struct.Object, ptr %1, i64 0, i32 3
  %17 = load i16, ptr %16, align 8, !tbaa !5
  %18 = and i16 %17, -2
  %19 = icmp eq i16 %18, 2
  br i1 %19, label %20, label %23

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.Curve, ptr %15, i64 0, i32 4
  %22 = load ptr, ptr %21, align 8, !tbaa !18
  br label %23

23:                                               ; preds = %4, %20
  %24 = phi ptr [ %22, %20 ], [ null, %4 ]
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %5) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %6) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %7) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %8) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %9) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %10) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %11) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %12) #20
  call void @llvm.lifetime.start.p0(i64 36, ptr nonnull %13) #20
  call void @copy_m3_m4(ptr noundef nonnull %12, ptr noundef %0) #20
  %25 = call zeroext i8 @invert_m3_m3(ptr noundef nonnull %13, ptr noundef nonnull %12) #20
  %26 = getelementptr inbounds %struct.Object, ptr %1, i64 0, i32 47
  call void @copy_m3_m4(ptr noundef nonnull %8, ptr noundef nonnull %26) #20
  %27 = call zeroext i8 @invert_m3_m3(ptr noundef nonnull %7, ptr noundef nonnull %8) #20
  call void @axis_angle_to_mat3(ptr noundef nonnull %5, ptr noundef %2, float noundef nofpclass(nan inf) 0x3FE921FB60000000) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %6, ptr noundef nonnull %5, ptr noundef nonnull %8) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %9, ptr noundef nonnull %7, ptr noundef nonnull %6) #20
  call void @unit_m3(ptr noundef nonnull %10) #20
  store float 0x3FF6A09E60000000, ptr %10, align 16, !tbaa !40
  %28 = getelementptr inbounds [3 x [3 x float]], ptr %10, i64 0, i64 1, i64 1
  store float 0x3FF6A09E60000000, ptr %28, align 16, !tbaa !40
  call void @mul_m3_m3m3(ptr noundef nonnull %6, ptr noundef nonnull %12, ptr noundef nonnull %8) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %5, ptr noundef nonnull %10, ptr noundef nonnull %6) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %6, ptr noundef nonnull %13, ptr noundef nonnull %5) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %10, ptr noundef nonnull %7, ptr noundef nonnull %6) #20
  call void @unit_m3(ptr noundef nonnull %11) #20
  %29 = load float, ptr %11, align 16, !tbaa !40
  %30 = fmul fast float %29, 0x3FE6A09E60000000
  store float %30, ptr %11, align 16, !tbaa !40
  %31 = getelementptr inbounds [3 x [3 x float]], ptr %11, i64 0, i64 1, i64 1
  %32 = load float, ptr %31, align 16, !tbaa !40
  %33 = fmul fast float %32, 0x3FE6A09E60000000
  store float %33, ptr %31, align 16, !tbaa !40
  call void @mul_m3_m3m3(ptr noundef nonnull %6, ptr noundef nonnull %12, ptr noundef nonnull %8) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %5, ptr noundef nonnull %11, ptr noundef nonnull %6) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %6, ptr noundef nonnull %13, ptr noundef nonnull %5) #20
  call void @mul_m3_m3m3(ptr noundef nonnull %11, ptr noundef nonnull %7, ptr noundef nonnull %6) #20
  %34 = getelementptr inbounds %struct.Curve, ptr %15, i64 0, i32 4
  %35 = getelementptr inbounds float, ptr %3, i64 1
  %36 = getelementptr inbounds float, ptr %3, i64 2
  %37 = load ptr, ptr %34, align 8, !tbaa !18
  %38 = call zeroext i8 @ed_editnurb_extrude_flag(ptr noundef %37, i16 noundef signext 1), !range !273
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %397, label %46

40:                                               ; preds = %333
  %41 = icmp eq ptr %334, null
  br i1 %41, label %397, label %337

42:                                               ; preds = %333
  %43 = load ptr, ptr %34, align 8, !tbaa !18
  %44 = call zeroext i8 @ed_editnurb_extrude_flag(ptr noundef %43, i16 noundef signext 1), !range !273
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %397, label %46, !llvm.loop !274

46:                                               ; preds = %23, %42
  %47 = phi i32 [ %335, %42 ], [ 0, %23 ]
  %48 = load ptr, ptr %24, align 8, !tbaa !36
  %49 = icmp eq ptr %48, null
  br i1 %49, label %100, label %50

50:                                               ; preds = %46, %97
  %51 = phi ptr [ %98, %97 ], [ %48, %46 ]
  %52 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 2
  %53 = load i16, ptr %52, align 8, !tbaa !21
  %54 = icmp eq i16 %53, 4
  br i1 %54, label %55, label %97

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 6
  %57 = load i32, ptr %56, align 8, !tbaa !23
  %58 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 7
  %59 = load i32, ptr %58, align 4, !tbaa !31
  %60 = mul nsw i32 %59, %57
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %97, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %struct.Nurb, ptr %51, i64 0, i32 17
  %64 = load ptr, ptr %63, align 8, !tbaa !32
  br label %65

65:                                               ; preds = %94, %62
  %66 = phi i32 [ %68, %94 ], [ %60, %62 ]
  %67 = phi ptr [ %95, %94 ], [ %64, %62 ]
  %68 = add nsw i32 %66, -1
  %69 = getelementptr inbounds %struct.BPoint, ptr %67, i64 0, i32 3
  %70 = load i16, ptr %69, align 4, !tbaa !34
  %71 = and i16 %70, 1
  %72 = icmp eq i16 %71, 0
  br i1 %72, label %94, label %73

73:                                               ; preds = %65
  %74 = load float, ptr %3, align 4, !tbaa !40
  %75 = load float, ptr %67, align 4, !tbaa !40
  %76 = fsub fast float %75, %74
  store float %76, ptr %67, align 4, !tbaa !40
  %77 = load float, ptr %35, align 4, !tbaa !40
  %78 = getelementptr inbounds float, ptr %67, i64 1
  %79 = load float, ptr %78, align 4, !tbaa !40
  %80 = fsub fast float %79, %77
  store float %80, ptr %78, align 4, !tbaa !40
  %81 = load float, ptr %36, align 4, !tbaa !40
  %82 = getelementptr inbounds float, ptr %67, i64 2
  %83 = load float, ptr %82, align 4, !tbaa !40
  %84 = fsub fast float %83, %81
  store float %84, ptr %82, align 4, !tbaa !40
  call void @mul_m3_v3(ptr noundef nonnull %9, ptr noundef nonnull %67) #20
  %85 = load float, ptr %3, align 4, !tbaa !40
  %86 = load float, ptr %67, align 4, !tbaa !40
  %87 = fadd fast float %86, %85
  store float %87, ptr %67, align 4, !tbaa !40
  %88 = load float, ptr %35, align 4, !tbaa !40
  %89 = load float, ptr %78, align 4, !tbaa !40
  %90 = fadd fast float %89, %88
  store float %90, ptr %78, align 4, !tbaa !40
  %91 = load float, ptr %36, align 4, !tbaa !40
  %92 = load float, ptr %82, align 4, !tbaa !40
  %93 = fadd fast float %92, %91
  store float %93, ptr %82, align 4, !tbaa !40
  br label %94

94:                                               ; preds = %73, %65
  %95 = getelementptr inbounds %struct.BPoint, ptr %67, i64 1
  %96 = icmp eq i32 %68, 0
  br i1 %96, label %97, label %65, !llvm.loop !275

97:                                               ; preds = %94, %55, %50
  %98 = load ptr, ptr %51, align 8, !tbaa !36
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %50, !llvm.loop !276

100:                                              ; preds = %97, %46
  %101 = and i32 %47, 1
  %102 = icmp eq i32 %101, 0
  %103 = load ptr, ptr %24, align 8, !tbaa !36
  %104 = icmp eq ptr %103, null
  br i1 %102, label %105, label %219

105:                                              ; preds = %100
  br i1 %104, label %333, label %106

106:                                              ; preds = %105, %153
  %107 = phi ptr [ %154, %153 ], [ %103, %105 ]
  %108 = getelementptr inbounds %struct.Nurb, ptr %107, i64 0, i32 2
  %109 = load i16, ptr %108, align 8, !tbaa !21
  %110 = icmp eq i16 %109, 4
  br i1 %110, label %111, label %153

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.Nurb, ptr %107, i64 0, i32 6
  %113 = load i32, ptr %112, align 8, !tbaa !23
  %114 = getelementptr inbounds %struct.Nurb, ptr %107, i64 0, i32 7
  %115 = load i32, ptr %114, align 4, !tbaa !31
  %116 = mul nsw i32 %115, %113
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %153, label %118

118:                                              ; preds = %111
  %119 = getelementptr inbounds %struct.Nurb, ptr %107, i64 0, i32 17
  %120 = load ptr, ptr %119, align 8, !tbaa !32
  br label %121

121:                                              ; preds = %150, %118
  %122 = phi i32 [ %124, %150 ], [ %116, %118 ]
  %123 = phi ptr [ %151, %150 ], [ %120, %118 ]
  %124 = add nsw i32 %122, -1
  %125 = getelementptr inbounds %struct.BPoint, ptr %123, i64 0, i32 3
  %126 = load i16, ptr %125, align 4, !tbaa !34
  %127 = and i16 %126, 1
  %128 = icmp eq i16 %127, 0
  br i1 %128, label %150, label %129

129:                                              ; preds = %121
  %130 = load float, ptr %3, align 4, !tbaa !40
  %131 = load float, ptr %123, align 4, !tbaa !40
  %132 = fsub fast float %131, %130
  store float %132, ptr %123, align 4, !tbaa !40
  %133 = load float, ptr %35, align 4, !tbaa !40
  %134 = getelementptr inbounds float, ptr %123, i64 1
  %135 = load float, ptr %134, align 4, !tbaa !40
  %136 = fsub fast float %135, %133
  store float %136, ptr %134, align 4, !tbaa !40
  %137 = load float, ptr %36, align 4, !tbaa !40
  %138 = getelementptr inbounds float, ptr %123, i64 2
  %139 = load float, ptr %138, align 4, !tbaa !40
  %140 = fsub fast float %139, %137
  store float %140, ptr %138, align 4, !tbaa !40
  call void @mul_m3_v3(ptr noundef nonnull %10, ptr noundef nonnull %123) #20
  %141 = load float, ptr %3, align 4, !tbaa !40
  %142 = load float, ptr %123, align 4, !tbaa !40
  %143 = fadd fast float %142, %141
  store float %143, ptr %123, align 4, !tbaa !40
  %144 = load float, ptr %35, align 4, !tbaa !40
  %145 = load float, ptr %134, align 4, !tbaa !40
  %146 = fadd fast float %145, %144
  store float %146, ptr %134, align 4, !tbaa !40
  %147 = load float, ptr %36, align 4, !tbaa !40
  %148 = load float, ptr %138, align 4, !tbaa !40
  %149 = fadd fast float %148, %147
  store float %149, ptr %138, align 4, !tbaa !40
  br label %150

150:                                              ; preds = %129, %121
  %151 = getelementptr inbounds %struct.BPoint, ptr %123, i64 1
  %152 = icmp eq i32 %124, 0
  br i1 %152, label %153, label %121, !llvm.loop !275

153:                                              ; preds = %150, %111, %106
  %154 = load ptr, ptr %107, align 8, !tbaa !36
  %155 = icmp eq ptr %154, null
  br i1 %155, label %156, label %106, !llvm.loop !276

156:                                              ; preds = %153
  %157 = load ptr, ptr %24, align 8, !tbaa !36
  %158 = icmp eq ptr %157, null
  br i1 %158, label %333, label %159

159:                                              ; preds = %156, %216
  %160 = phi ptr [ %217, %216 ], [ %157, %156 ]
  %161 = getelementptr inbounds %struct.Nurb, ptr %160, i64 0, i32 2
  %162 = load i16, ptr %161, align 8, !tbaa !21
  %163 = icmp eq i16 %162, 4
  br i1 %163, label %164, label %216

164:                                              ; preds = %159
  %165 = getelementptr inbounds %struct.Nurb, ptr %160, i64 0, i32 6
  %166 = load i32, ptr %165, align 8, !tbaa !23
  %167 = getelementptr inbounds %struct.Nurb, ptr %160, i64 0, i32 7
  %168 = load i32, ptr %167, align 4, !tbaa !31
  %169 = mul nsw i32 %168, %166
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %216, label %171

171:                                              ; preds = %164
  %172 = getelementptr inbounds %struct.Nurb, ptr %160, i64 0, i32 17
  %173 = load ptr, ptr %172, align 8, !tbaa !32
  %174 = and i32 %169, 1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %188, label %176

176:                                              ; preds = %171
  %177 = add nsw i32 %169, -1
  %178 = getelementptr inbounds %struct.BPoint, ptr %173, i64 0, i32 3
  %179 = load i16, ptr %178, align 4, !tbaa !34
  %180 = and i16 %179, 1
  %181 = icmp eq i16 %180, 0
  br i1 %181, label %186, label %182

182:                                              ; preds = %176
  %183 = getelementptr inbounds [4 x float], ptr %173, i64 0, i64 3
  %184 = load float, ptr %183, align 4, !tbaa !40
  %185 = fmul fast float %184, 0x3FD6A09E60000000
  store float %185, ptr %183, align 4, !tbaa !40
  br label %186

186:                                              ; preds = %182, %176
  %187 = getelementptr inbounds %struct.BPoint, ptr %173, i64 1
  br label %188

188:                                              ; preds = %186, %171
  %189 = phi i32 [ %169, %171 ], [ %177, %186 ]
  %190 = phi ptr [ %173, %171 ], [ %187, %186 ]
  %191 = icmp eq i32 %169, 1
  br i1 %191, label %216, label %192

192:                                              ; preds = %188, %213
  %193 = phi i32 [ %204, %213 ], [ %189, %188 ]
  %194 = phi ptr [ %214, %213 ], [ %190, %188 ]
  %195 = getelementptr inbounds %struct.BPoint, ptr %194, i64 0, i32 3
  %196 = load i16, ptr %195, align 4, !tbaa !34
  %197 = and i16 %196, 1
  %198 = icmp eq i16 %197, 0
  br i1 %198, label %203, label %199

199:                                              ; preds = %192
  %200 = getelementptr inbounds [4 x float], ptr %194, i64 0, i64 3
  %201 = load float, ptr %200, align 4, !tbaa !40
  %202 = fmul fast float %201, 0x3FD6A09E60000000
  store float %202, ptr %200, align 4, !tbaa !40
  br label %203

203:                                              ; preds = %199, %192
  %204 = add nsw i32 %193, -2
  %205 = getelementptr inbounds %struct.BPoint, ptr %194, i64 1, i32 3
  %206 = load i16, ptr %205, align 4, !tbaa !34
  %207 = and i16 %206, 1
  %208 = icmp eq i16 %207, 0
  br i1 %208, label %213, label %209

209:                                              ; preds = %203
  %210 = getelementptr inbounds %struct.BPoint, ptr %194, i64 1, i32 0, i64 3
  %211 = load float, ptr %210, align 4, !tbaa !40
  %212 = fmul fast float %211, 0x3FD6A09E60000000
  store float %212, ptr %210, align 4, !tbaa !40
  br label %213

213:                                              ; preds = %209, %203
  %214 = getelementptr inbounds %struct.BPoint, ptr %194, i64 2
  %215 = icmp eq i32 %204, 0
  br i1 %215, label %216, label %192, !llvm.loop !277

216:                                              ; preds = %188, %213, %164, %159
  %217 = load ptr, ptr %160, align 8, !tbaa !36
  %218 = icmp eq ptr %217, null
  br i1 %218, label %333, label %159, !llvm.loop !278

219:                                              ; preds = %100
  br i1 %104, label %333, label %220

220:                                              ; preds = %219, %267
  %221 = phi ptr [ %268, %267 ], [ %103, %219 ]
  %222 = getelementptr inbounds %struct.Nurb, ptr %221, i64 0, i32 2
  %223 = load i16, ptr %222, align 8, !tbaa !21
  %224 = icmp eq i16 %223, 4
  br i1 %224, label %225, label %267

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.Nurb, ptr %221, i64 0, i32 6
  %227 = load i32, ptr %226, align 8, !tbaa !23
  %228 = getelementptr inbounds %struct.Nurb, ptr %221, i64 0, i32 7
  %229 = load i32, ptr %228, align 4, !tbaa !31
  %230 = mul nsw i32 %229, %227
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %267, label %232

232:                                              ; preds = %225
  %233 = getelementptr inbounds %struct.Nurb, ptr %221, i64 0, i32 17
  %234 = load ptr, ptr %233, align 8, !tbaa !32
  br label %235

235:                                              ; preds = %264, %232
  %236 = phi i32 [ %238, %264 ], [ %230, %232 ]
  %237 = phi ptr [ %265, %264 ], [ %234, %232 ]
  %238 = add nsw i32 %236, -1
  %239 = getelementptr inbounds %struct.BPoint, ptr %237, i64 0, i32 3
  %240 = load i16, ptr %239, align 4, !tbaa !34
  %241 = and i16 %240, 1
  %242 = icmp eq i16 %241, 0
  br i1 %242, label %264, label %243

243:                                              ; preds = %235
  %244 = load float, ptr %3, align 4, !tbaa !40
  %245 = load float, ptr %237, align 4, !tbaa !40
  %246 = fsub fast float %245, %244
  store float %246, ptr %237, align 4, !tbaa !40
  %247 = load float, ptr %35, align 4, !tbaa !40
  %248 = getelementptr inbounds float, ptr %237, i64 1
  %249 = load float, ptr %248, align 4, !tbaa !40
  %250 = fsub fast float %249, %247
  store float %250, ptr %248, align 4, !tbaa !40
  %251 = load float, ptr %36, align 4, !tbaa !40
  %252 = getelementptr inbounds float, ptr %237, i64 2
  %253 = load float, ptr %252, align 4, !tbaa !40
  %254 = fsub fast float %253, %251
  store float %254, ptr %252, align 4, !tbaa !40
  call void @mul_m3_v3(ptr noundef nonnull %11, ptr noundef nonnull %237) #20
  %255 = load float, ptr %3, align 4, !tbaa !40
  %256 = load float, ptr %237, align 4, !tbaa !40
  %257 = fadd fast float %256, %255
  store float %257, ptr %237, align 4, !tbaa !40
  %258 = load float, ptr %35, align 4, !tbaa !40
  %259 = load float, ptr %248, align 4, !tbaa !40
  %260 = fadd fast float %259, %258
  store float %260, ptr %248, align 4, !tbaa !40
  %261 = load float, ptr %36, align 4, !tbaa !40
  %262 = load float, ptr %252, align 4, !tbaa !40
  %263 = fadd fast float %262, %261
  store float %263, ptr %252, align 4, !tbaa !40
  br label %264

264:                                              ; preds = %243, %235
  %265 = getelementptr inbounds %struct.BPoint, ptr %237, i64 1
  %266 = icmp eq i32 %238, 0
  br i1 %266, label %267, label %235, !llvm.loop !275

267:                                              ; preds = %264, %225, %220
  %268 = load ptr, ptr %221, align 8, !tbaa !36
  %269 = icmp eq ptr %268, null
  br i1 %269, label %270, label %220, !llvm.loop !276

270:                                              ; preds = %267
  %271 = load ptr, ptr %24, align 8, !tbaa !36
  %272 = icmp eq ptr %271, null
  br i1 %272, label %333, label %273

273:                                              ; preds = %270, %330
  %274 = phi ptr [ %331, %330 ], [ %271, %270 ]
  %275 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 2
  %276 = load i16, ptr %275, align 8, !tbaa !21
  %277 = icmp eq i16 %276, 4
  br i1 %277, label %278, label %330

278:                                              ; preds = %273
  %279 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 6
  %280 = load i32, ptr %279, align 8, !tbaa !23
  %281 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 7
  %282 = load i32, ptr %281, align 4, !tbaa !31
  %283 = mul nsw i32 %282, %280
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %330, label %285

285:                                              ; preds = %278
  %286 = getelementptr inbounds %struct.Nurb, ptr %274, i64 0, i32 17
  %287 = load ptr, ptr %286, align 8, !tbaa !32
  %288 = and i32 %283, 1
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %302, label %290

290:                                              ; preds = %285
  %291 = add nsw i32 %283, -1
  %292 = getelementptr inbounds %struct.BPoint, ptr %287, i64 0, i32 3
  %293 = load i16, ptr %292, align 4, !tbaa !34
  %294 = and i16 %293, 1
  %295 = icmp eq i16 %294, 0
  br i1 %295, label %300, label %296

296:                                              ; preds = %290
  %297 = getelementptr inbounds [4 x float], ptr %287, i64 0, i64 3
  %298 = load float, ptr %297, align 4, !tbaa !40
  %299 = fmul fast float %298, 0x4006A09E60000000
  store float %299, ptr %297, align 4, !tbaa !40
  br label %300

300:                                              ; preds = %296, %290
  %301 = getelementptr inbounds %struct.BPoint, ptr %287, i64 1
  br label %302

302:                                              ; preds = %300, %285
  %303 = phi i32 [ %283, %285 ], [ %291, %300 ]
  %304 = phi ptr [ %287, %285 ], [ %301, %300 ]
  %305 = icmp eq i32 %283, 1
  br i1 %305, label %330, label %306

306:                                              ; preds = %302, %327
  %307 = phi i32 [ %318, %327 ], [ %303, %302 ]
  %308 = phi ptr [ %328, %327 ], [ %304, %302 ]
  %309 = getelementptr inbounds %struct.BPoint, ptr %308, i64 0, i32 3
  %310 = load i16, ptr %309, align 4, !tbaa !34
  %311 = and i16 %310, 1
  %312 = icmp eq i16 %311, 0
  br i1 %312, label %317, label %313

313:                                              ; preds = %306
  %314 = getelementptr inbounds [4 x float], ptr %308, i64 0, i64 3
  %315 = load float, ptr %314, align 4, !tbaa !40
  %316 = fmul fast float %315, 0x4006A09E60000000
  store float %316, ptr %314, align 4, !tbaa !40
  br label %317

317:                                              ; preds = %313, %306
  %318 = add nsw i32 %307, -2
  %319 = getelementptr inbounds %struct.BPoint, ptr %308, i64 1, i32 3
  %320 = load i16, ptr %319, align 4, !tbaa !34
  %321 = and i16 %320, 1
  %322 = icmp eq i16 %321, 0
  br i1 %322, label %327, label %323

323:                                              ; preds = %317
  %324 = getelementptr inbounds %struct.BPoint, ptr %308, i64 1, i32 0, i64 3
  %325 = load float, ptr %324, align 4, !tbaa !40
  %326 = fmul fast float %325, 0x4006A09E60000000
  store float %326, ptr %324, align 4, !tbaa !40
  br label %327

327:                                              ; preds = %323, %317
  %328 = getelementptr inbounds %struct.BPoint, ptr %308, i64 2
  %329 = icmp eq i32 %318, 0
  br i1 %329, label %330, label %306, !llvm.loop !277

330:                                              ; preds = %302, %327, %278, %273
  %331 = load ptr, ptr %274, align 8, !tbaa !36
  %332 = icmp eq ptr %331, null
  br i1 %332, label %333, label %273, !llvm.loop !278

333:                                              ; preds = %330, %216, %219, %105, %270, %156
  %334 = phi ptr [ null, %219 ], [ null, %105 ], [ null, %270 ], [ null, %156 ], [ %157, %216 ], [ %271, %330 ]
  %335 = add nuw nsw i32 %47, 1
  %336 = icmp eq i32 %335, 7
  br i1 %336, label %40, label %42, !llvm.loop !274

337:                                              ; preds = %40, %394
  %338 = phi ptr [ %395, %394 ], [ %334, %40 ]
  %339 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 2
  %340 = load i16, ptr %339, align 8, !tbaa !21
  %341 = icmp eq i16 %340, 1
  %342 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 6
  %343 = load i32, ptr %342, align 8, !tbaa !23
  br i1 %341, label %344, label %370

344:                                              ; preds = %337
  %345 = icmp eq i32 %343, 0
  br i1 %345, label %394, label %346

346:                                              ; preds = %344
  %347 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 18
  %348 = load ptr, ptr %347, align 8, !tbaa !24
  br label %352

349:                                              ; preds = %365
  %350 = getelementptr inbounds %struct.BezTriple, ptr %354, i64 1
  %351 = icmp eq i32 %355, 0
  br i1 %351, label %394, label %352, !llvm.loop !25

352:                                              ; preds = %349, %346
  %353 = phi i32 [ %355, %349 ], [ %343, %346 ]
  %354 = phi ptr [ %350, %349 ], [ %348, %346 ]
  %355 = add nsw i32 %353, -1
  %356 = getelementptr inbounds %struct.BezTriple, ptr %354, i64 0, i32 7
  %357 = load i8, ptr %356, align 1, !tbaa !27
  %358 = and i8 %357, 1
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %360, label %389

360:                                              ; preds = %352
  %361 = getelementptr inbounds %struct.BezTriple, ptr %354, i64 0, i32 8
  %362 = load i8, ptr %361, align 4, !tbaa !29
  %363 = and i8 %362, 1
  %364 = icmp eq i8 %363, 0
  br i1 %364, label %365, label %389

365:                                              ; preds = %360
  %366 = getelementptr inbounds %struct.BezTriple, ptr %354, i64 0, i32 9
  %367 = load i8, ptr %366, align 1, !tbaa !30
  %368 = and i8 %367, 1
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %349, label %389

370:                                              ; preds = %337
  %371 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 7
  %372 = load i32, ptr %371, align 4, !tbaa !31
  %373 = mul nsw i32 %372, %343
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %394, label %375

375:                                              ; preds = %370
  %376 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 17
  %377 = load ptr, ptr %376, align 8, !tbaa !32
  br label %382

378:                                              ; preds = %382
  %379 = add nsw i32 %383, -1
  %380 = getelementptr inbounds %struct.BPoint, ptr %384, i64 1
  %381 = icmp eq i32 %379, 0
  br i1 %381, label %394, label %382, !llvm.loop !33

382:                                              ; preds = %378, %375
  %383 = phi i32 [ %379, %378 ], [ %373, %375 ]
  %384 = phi ptr [ %380, %378 ], [ %377, %375 ]
  %385 = getelementptr inbounds %struct.BPoint, ptr %384, i64 0, i32 3
  %386 = load i16, ptr %385, align 4, !tbaa !34
  %387 = and i16 %386, 1
  %388 = icmp eq i16 %387, 0
  br i1 %388, label %378, label %389

389:                                              ; preds = %382, %365, %360, %352
  %390 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 12
  store i16 4, ptr %390, align 2, !tbaa !43
  %391 = getelementptr inbounds %struct.Nurb, ptr %338, i64 0, i32 14
  %392 = load i16, ptr %391, align 2, !tbaa !44
  %393 = or i16 %392, 1
  store i16 %393, ptr %391, align 2, !tbaa !44
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %338) #20
  br label %394

394:                                              ; preds = %378, %349, %370, %344, %389
  %395 = load ptr, ptr %338, align 8, !tbaa !36
  %396 = icmp eq ptr %395, null
  br i1 %396, label %397, label %337, !llvm.loop !279

397:                                              ; preds = %42, %394, %23, %40
  %398 = phi i8 [ 1, %40 ], [ 0, %23 ], [ 1, %394 ], [ 1, %42 ]
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %13) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %12) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %11) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %10) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %9) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %8) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %6) #20
  call void @llvm.lifetime.end.p0(i64 36, ptr nonnull %5) #20
  ret i8 %398
}

declare void @copy_m3_m4(ptr noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @invert_m3_m3(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @axis_angle_to_mat3(ptr noundef, ptr noundef, float noundef nofpclass(nan inf)) local_unnamed_addr #6

declare void @mul_m3_m3m3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @unit_m3(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_spin(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.95, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.96, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.97, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @spin_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @spin_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurf, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_float_vector_xyz(ptr noundef %9, ptr noundef nonnull @.str.98, i32 noundef 3, ptr noundef null, float noundef nofpclass(nan inf) 0xC7EFFFFFE0000000, float noundef nofpclass(nan inf) 0x47EFFFFFE0000000, ptr noundef nonnull @.str.99, ptr noundef nonnull @.str.100, float noundef nofpclass(nan inf) 0xC7EFFFFFE0000000, float noundef nofpclass(nan inf) 0x47EFFFFFE0000000) #20
  %11 = load ptr, ptr %8, align 8, !tbaa !177
  %12 = tail call ptr @RNA_def_float_vector(ptr noundef %11, ptr noundef nonnull @.str.101, i32 noundef 3, ptr noundef null, float noundef nofpclass(nan inf) 0xC7EFFFFFE0000000, float noundef nofpclass(nan inf) 0x47EFFFFFE0000000, ptr noundef nonnull @.str.102, ptr noundef nonnull @.str.103, float noundef nofpclass(nan inf) -1.000000e+00, float noundef nofpclass(nan inf) 1.000000e+00) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @spin_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca [3 x float], align 4
  %4 = alloca [3 x float], align 4
  %5 = alloca [4 x [4 x float]], align 16
  %6 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %7 = tail call ptr @ED_view3d_context_rv3d(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #20
  %8 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %9 = load ptr, ptr %8, align 8, !tbaa !178
  call void @RNA_float_get_array(ptr noundef %9, ptr noundef nonnull @.str.98, ptr noundef nonnull %3) #20
  %10 = load ptr, ptr %8, align 8, !tbaa !178
  call void @RNA_float_get_array(ptr noundef %10, ptr noundef nonnull @.str.101, ptr noundef nonnull %4) #20
  %11 = getelementptr inbounds %struct.Object, ptr %6, i64 0, i32 50
  %12 = getelementptr inbounds %struct.Object, ptr %6, i64 0, i32 47
  %13 = call zeroext i8 @invert_m4_m4(ptr noundef nonnull %11, ptr noundef nonnull %12) #20
  call void @mul_m4_v3(ptr noundef nonnull %11, ptr noundef nonnull %3) #20
  %14 = icmp eq ptr %7, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.RegionView3D, ptr %7, i64 0, i32 1
  call void @copy_m4_m4(ptr noundef nonnull %5, ptr noundef nonnull %16) #20
  br label %18

17:                                               ; preds = %2
  call void @unit_m4(ptr noundef nonnull %5) #20
  br label %18

18:                                               ; preds = %17, %15
  %19 = call zeroext i8 @ed_editnurb_spin(ptr noundef nonnull %5, ptr noundef %6, ptr noundef nonnull %4, ptr noundef nonnull %3), !range !273
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %23 = load ptr, ptr %22, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %23, i32 noundef 32, ptr noundef nonnull @.str.213) #20
  br label %53

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.Object, ptr %6, i64 0, i32 19
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = call ptr @BKE_animdata_from_id(ptr noundef %26) #20
  %28 = getelementptr inbounds %struct.Curve, ptr %26, i64 0, i32 4
  %29 = load ptr, ptr %28, align 8, !tbaa !18
  %30 = getelementptr inbounds %struct.EditNurb, ptr %29, i64 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !47
  %32 = icmp eq ptr %31, null
  br i1 %32, label %50, label %33

33:                                               ; preds = %24
  %34 = call ptr @BKE_animdata_from_id(ptr noundef nonnull %26) #20
  %35 = icmp eq ptr %34, null
  br i1 %35, label %50, label %36

36:                                               ; preds = %33
  %37 = load ptr, ptr %34, align 8, !tbaa !49
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = getelementptr inbounds %struct.AnimData, ptr %34, i64 0, i32 5
  %41 = load ptr, ptr %40, align 8, !tbaa !51
  %42 = icmp eq ptr %41, null
  br i1 %42, label %50, label %43

43:                                               ; preds = %39, %36
  %44 = load ptr, ptr %27, align 8, !tbaa !49
  %45 = icmp eq ptr %44, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %struct.bAction, ptr %44, i64 0, i32 1
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %26, ptr noundef nonnull %47)
  br label %48

48:                                               ; preds = %46, %43
  %49 = getelementptr inbounds %struct.AnimData, ptr %27, i64 0, i32 5
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %26, ptr noundef nonnull %49)
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %6) #20
  br label %50

50:                                               ; preds = %33, %39, %24, %48
  %51 = load ptr, ptr %25, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %51) #20
  %52 = load ptr, ptr %25, align 8, !tbaa !17
  call void @DAG_id_tag_update(ptr noundef %52, i16 noundef signext 0) #20
  br label %53

53:                                               ; preds = %50, %21
  %54 = phi i32 [ 4, %50 ], [ 2, %21 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #20
  ret i32 %54
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @spin_invoke(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #5 {
  %4 = alloca [3 x float], align 8
  %5 = tail call ptr @CTX_data_scene(ptr noundef %0) #20
  %6 = tail call ptr @CTX_wm_view3d(ptr noundef %0) #20
  %7 = tail call ptr @ED_view3d_context_rv3d(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(12) %4, ptr noundef nonnull align 4 dereferenceable(12) @__const.spin_invoke.axis, i64 12, i1 false)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.RegionView3D, ptr %7, i64 0, i32 2, i64 2
  %11 = load <2 x float>, ptr %10, align 4, !tbaa !40
  store <2 x float> %11, ptr %4, align 8, !tbaa !40
  %12 = getelementptr inbounds %struct.RegionView3D, ptr %7, i64 0, i32 2, i64 2, i64 2
  %13 = load float, ptr %12, align 4, !tbaa !40
  %14 = getelementptr inbounds float, ptr %4, i64 2
  store float %13, ptr %14, align 8, !tbaa !40
  br label %15

15:                                               ; preds = %9, %3
  %16 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %17 = load ptr, ptr %16, align 8, !tbaa !178
  %18 = tail call ptr @ED_view3d_cursor3d_get(ptr noundef %5, ptr noundef %6) #20
  tail call void @RNA_float_set_array(ptr noundef %17, ptr noundef nonnull @.str.98, ptr noundef %18) #20
  %19 = load ptr, ptr %16, align 8, !tbaa !178
  call void @RNA_float_set_array(ptr noundef %19, ptr noundef nonnull @.str.101, ptr noundef nonnull %4) #20
  %20 = call i32 @spin_exec(ptr noundef %0, ptr noundef %1), !range !280
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #20
  ret i32 %20
}

declare i32 @ED_operator_editsurf(ptr noundef) #6

declare ptr @RNA_def_float_vector_xyz(ptr noundef, ptr noundef, i32 noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf)) local_unnamed_addr #6

declare ptr @RNA_def_float_vector(ptr noundef, ptr noundef, i32 noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf)) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_vertex_add(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.104, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.105, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.106, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @add_vertex_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @add_vertex_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_float_vector_xyz(ptr noundef %9, ptr noundef nonnull @.str.107, i32 noundef 3, ptr noundef null, float noundef nofpclass(nan inf) 0xC7EFFFFFE0000000, float noundef nofpclass(nan inf) 0x47EFFFFFE0000000, ptr noundef nonnull @.str.108, ptr noundef nonnull @.str.109, float noundef nofpclass(nan inf) -1.000000e+04, float noundef nofpclass(nan inf) 1.000000e+04) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @add_vertex_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca [3 x float], align 4
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #20
  %4 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !178
  call void @RNA_float_get_array(ptr noundef %5, ptr noundef nonnull @.str.107, ptr noundef nonnull %3) #20
  %6 = call fastcc i32 @addvert_Nurb(ptr noundef %0, i16 noundef signext 0, ptr noundef nonnull %3), !range !280
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #20
  ret i32 %6
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @add_vertex_invoke(ptr noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) #5 {
  %4 = alloca [3 x float], align 4
  %5 = alloca %struct.ViewContext, align 8
  %6 = alloca [3 x float], align 8
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca [2 x float], align 8
  %11 = alloca [3 x float], align 4
  %12 = alloca float, align 4
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #20
  call void @view3d_set_viewcontext(ptr noundef %0, ptr noundef nonnull %5) #20
  %13 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 5
  %14 = load ptr, ptr %13, align 8, !tbaa !269
  %15 = icmp eq ptr %14, null
  br i1 %15, label %178, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = call zeroext i8 @RNA_struct_property_is_set(ptr noundef %18, ptr noundef nonnull @.str.107) #20
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %178

21:                                               ; preds = %16
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %6) #20
  %22 = load ptr, ptr %5, align 8, !tbaa !281
  %23 = getelementptr inbounds %struct.Scene, ptr %22, i64 0, i32 20
  %24 = load ptr, ptr %23, align 8, !tbaa !282
  %25 = getelementptr inbounds %struct.ToolSettings, ptr %24, i64 0, i32 54
  %26 = load i16, ptr %25, align 2, !tbaa !301
  %27 = and i16 %26, 1
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.ToolSettings, ptr %24, i64 0, i32 51
  %31 = load i8, ptr %30, align 1, !tbaa !308
  %32 = icmp eq i8 %31, 3
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %29, %21
  %35 = phi i8 [ 0, %21 ], [ %33, %29 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9)
  %36 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !267
  %38 = getelementptr inbounds %struct.Object, ptr %37, i64 0, i32 19
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = getelementptr inbounds %struct.Curve, ptr %39, i64 0, i32 4
  %41 = load ptr, ptr %40, align 8, !tbaa !18
  %42 = load ptr, ptr %41, align 8, !tbaa !36
  %43 = icmp eq ptr %42, null
  br i1 %43, label %159, label %44

44:                                               ; preds = %34, %133
  %45 = phi ptr [ %134, %133 ], [ null, %34 ]
  %46 = phi ptr [ %135, %133 ], [ null, %34 ]
  %47 = phi ptr [ %136, %133 ], [ null, %34 ]
  %48 = phi ptr [ %137, %133 ], [ %42, %34 ]
  %49 = getelementptr inbounds %struct.Nurb, ptr %48, i64 0, i32 2
  %50 = load i16, ptr %49, align 8, !tbaa !21
  %51 = icmp eq i16 %50, 1
  %52 = getelementptr inbounds %struct.Nurb, ptr %48, i64 0, i32 6
  %53 = load i32, ptr %52, align 8, !tbaa !23
  br i1 %51, label %54, label %97

54:                                               ; preds = %44
  %55 = icmp eq i32 %53, 0
  br i1 %55, label %133, label %56

56:                                               ; preds = %54
  %57 = getelementptr inbounds %struct.Nurb, ptr %48, i64 0, i32 18
  %58 = load ptr, ptr %57, align 8, !tbaa !24
  br label %59

59:                                               ; preds = %91, %56
  %60 = phi ptr [ %92, %91 ], [ %45, %56 ]
  %61 = phi ptr [ %93, %91 ], [ %46, %56 ]
  %62 = phi ptr [ %94, %91 ], [ %47, %56 ]
  %63 = phi i32 [ %65, %91 ], [ %53, %56 ]
  %64 = phi ptr [ %95, %91 ], [ %58, %56 ]
  %65 = add nsw i32 %63, -1
  %66 = getelementptr inbounds %struct.BezTriple, ptr %64, i64 0, i32 7
  %67 = load i8, ptr %66, align 1, !tbaa !27
  %68 = and i8 %67, 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %80

70:                                               ; preds = %59
  %71 = getelementptr inbounds %struct.BezTriple, ptr %64, i64 0, i32 8
  %72 = load i8, ptr %71, align 4, !tbaa !29
  %73 = and i8 %72, 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %80

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.BezTriple, ptr %64, i64 0, i32 9
  %77 = load i8, ptr %76, align 1, !tbaa !30
  %78 = and i8 %77, 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %75, %70, %59
  %81 = icmp eq ptr %62, null
  %82 = icmp eq ptr %62, %48
  %83 = or i1 %81, %82
  br i1 %83, label %84, label %139

84:                                               ; preds = %80
  %85 = icmp eq ptr %61, null
  %86 = icmp eq ptr %60, null
  %87 = select i1 %85, i1 %86, i1 false
  %88 = select i1 %87, ptr %60, ptr null
  %89 = select i1 %87, ptr %64, ptr null
  %90 = select i1 %87, ptr %48, ptr %62
  br label %91

91:                                               ; preds = %84, %75
  %92 = phi ptr [ %60, %75 ], [ %88, %84 ]
  %93 = phi ptr [ %61, %75 ], [ %89, %84 ]
  %94 = phi ptr [ %62, %75 ], [ %90, %84 ]
  %95 = getelementptr inbounds %struct.BezTriple, ptr %64, i64 1
  %96 = icmp eq i32 %65, 0
  br i1 %96, label %133, label %59, !llvm.loop !309

97:                                               ; preds = %44
  %98 = getelementptr inbounds %struct.Nurb, ptr %48, i64 0, i32 7
  %99 = load i32, ptr %98, align 4, !tbaa !31
  %100 = mul nsw i32 %99, %53
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %133, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.Nurb, ptr %48, i64 0, i32 17
  %104 = load ptr, ptr %103, align 8, !tbaa !32
  br label %105

105:                                              ; preds = %127, %102
  %106 = phi ptr [ %128, %127 ], [ %45, %102 ]
  %107 = phi ptr [ %129, %127 ], [ %46, %102 ]
  %108 = phi ptr [ %130, %127 ], [ %47, %102 ]
  %109 = phi i32 [ %111, %127 ], [ %100, %102 ]
  %110 = phi ptr [ %131, %127 ], [ %104, %102 ]
  %111 = add nsw i32 %109, -1
  %112 = getelementptr inbounds %struct.BPoint, ptr %110, i64 0, i32 3
  %113 = load i16, ptr %112, align 4, !tbaa !34
  %114 = and i16 %113, 1
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %127, label %116

116:                                              ; preds = %105
  %117 = icmp eq ptr %108, null
  %118 = icmp eq ptr %108, %48
  %119 = or i1 %117, %118
  br i1 %119, label %120, label %139

120:                                              ; preds = %116
  %121 = icmp eq ptr %107, null
  %122 = icmp eq ptr %106, null
  %123 = select i1 %121, i1 %122, i1 false
  %124 = select i1 %123, ptr %110, ptr null
  %125 = select i1 %123, ptr %107, ptr null
  %126 = select i1 %123, ptr %48, ptr %108
  br label %127

127:                                              ; preds = %120, %105
  %128 = phi ptr [ %106, %105 ], [ %124, %120 ]
  %129 = phi ptr [ %107, %105 ], [ %125, %120 ]
  %130 = phi ptr [ %108, %105 ], [ %126, %120 ]
  %131 = getelementptr inbounds %struct.BPoint, ptr %110, i64 1
  %132 = icmp eq i32 %111, 0
  br i1 %132, label %133, label %105, !llvm.loop !310

133:                                              ; preds = %127, %91, %97, %54
  %134 = phi ptr [ %45, %97 ], [ %45, %54 ], [ %92, %91 ], [ %128, %127 ]
  %135 = phi ptr [ %46, %97 ], [ %46, %54 ], [ %93, %91 ], [ %129, %127 ]
  %136 = phi ptr [ %47, %97 ], [ %47, %54 ], [ %94, %91 ], [ %130, %127 ]
  %137 = load ptr, ptr %48, align 8, !tbaa !36
  %138 = icmp eq ptr %137, null
  br i1 %138, label %147, label %44, !llvm.loop !311

139:                                              ; preds = %116, %80
  %140 = phi ptr [ %62, %80 ], [ %108, %116 ]
  %141 = phi ptr [ %61, %80 ], [ %107, %116 ]
  %142 = phi ptr [ %60, %80 ], [ %106, %116 ]
  %143 = phi ptr [ %7, %80 ], [ %9, %116 ]
  %144 = phi ptr [ %9, %80 ], [ %8, %116 ]
  %145 = phi ptr [ %8, %80 ], [ %7, %116 ]
  store ptr %140, ptr %7, align 8, !tbaa !36
  store ptr %141, ptr %8, align 8, !tbaa !36
  store ptr %142, ptr %9, align 8
  store ptr null, ptr %143, align 8, !tbaa !36
  store ptr null, ptr %144, align 8, !tbaa !36
  store ptr null, ptr %145, align 8, !tbaa !36
  %146 = load ptr, ptr %8, align 8, !tbaa !36
  br label %148

147:                                              ; preds = %133
  store ptr %136, ptr %7, align 8, !tbaa !36
  store ptr %135, ptr %8, align 8, !tbaa !36
  store ptr %134, ptr %9, align 8
  br label %148

148:                                              ; preds = %147, %139
  %149 = phi ptr [ %135, %147 ], [ %146, %139 ]
  %150 = icmp eq ptr %149, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %struct.Object, ptr %37, i64 0, i32 47
  %153 = getelementptr inbounds [3 x [3 x float]], ptr %149, i64 0, i64 1
  call void @mul_v3_m4v3(ptr noundef nonnull %6, ptr noundef nonnull %152, ptr noundef nonnull %153) #20
  br label %167

154:                                              ; preds = %148
  %155 = load ptr, ptr %9, align 8, !tbaa !36
  %156 = icmp eq ptr %155, null
  br i1 %156, label %159, label %157

157:                                              ; preds = %154
  %158 = getelementptr inbounds %struct.Object, ptr %37, i64 0, i32 47
  call void @mul_v3_m4v3(ptr noundef nonnull %6, ptr noundef nonnull %158, ptr noundef nonnull %155) #20
  br label %167

159:                                              ; preds = %34, %154
  %160 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 4
  %161 = load ptr, ptr %160, align 8, !tbaa !312
  %162 = call ptr @ED_view3d_cursor3d_get(ptr noundef %22, ptr noundef %161) #20
  %163 = load <2 x float>, ptr %162, align 4, !tbaa !40
  store <2 x float> %163, ptr %6, align 8, !tbaa !40
  %164 = getelementptr inbounds float, ptr %162, i64 2
  %165 = load float, ptr %164, align 4, !tbaa !40
  %166 = getelementptr inbounds float, ptr %6, i64 2
  store float %165, ptr %166, align 8, !tbaa !40
  br label %167

167:                                              ; preds = %157, %159, %151
  %168 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 3
  %169 = load ptr, ptr %168, align 8, !tbaa !313
  %170 = getelementptr inbounds %struct.wmEvent, ptr %2, i64 0, i32 6
  call void @ED_view3d_win_to_3d_int(ptr noundef %169, ptr noundef nonnull %6, ptr noundef nonnull %170, ptr noundef nonnull %6) #20
  %171 = icmp eq i8 %35, 0
  br i1 %171, label %176, label %172

172:                                              ; preds = %167
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #20
  %173 = load <2 x i32>, ptr %170, align 4, !tbaa !74
  %174 = sitofp <2 x i32> %173 to <2 x float>
  store <2 x float> %174, ptr %10, align 8, !tbaa !40
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %11) #20
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #20
  %175 = call zeroext i8 @snapObjectsContext(ptr noundef %0, ptr noundef nonnull %10, ptr noundef nonnull %12, ptr noundef nonnull %6, ptr noundef nonnull %11, i32 noundef 2) #20
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %11) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #20
  br label %176

176:                                              ; preds = %172, %167
  %177 = load ptr, ptr %17, align 8, !tbaa !178
  call void @RNA_float_set_array(ptr noundef %177, ptr noundef nonnull @.str.107, ptr noundef nonnull %6) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %6) #20
  br label %178

178:                                              ; preds = %176, %16, %3
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #20
  %179 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %180 = load ptr, ptr %179, align 8, !tbaa !178
  call void @RNA_float_get_array(ptr noundef %180, ptr noundef nonnull @.str.107, ptr noundef nonnull %4) #20
  %181 = call fastcc i32 @addvert_Nurb(ptr noundef %0, i16 noundef signext 0, ptr noundef nonnull %4), !range !280
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #20
  ret i32 %181
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_extrude(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.110, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.111, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.112, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @extrude_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_enum(ptr noundef %8, ptr noundef nonnull @.str.113, ptr noundef nonnull @transform_mode_types, i32 noundef 1, ptr noundef nonnull @.str.114, ptr noundef nonnull @.str.18) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @extrude_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !18
  %8 = load ptr, ptr %7, align 8, !tbaa !36
  %9 = icmp eq ptr %8, null
  br i1 %9, label %358, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 16
  br label %12

12:                                               ; preds = %10, %355
  %13 = phi ptr [ %8, %10 ], [ %356, %355 ]
  %14 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 7
  %15 = load i32, ptr %14, align 4, !tbaa !31
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %355

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 2
  %19 = load i16, ptr %18, align 8, !tbaa !21
  %20 = icmp eq i16 %19, 1
  %21 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 6
  %22 = load i32, ptr %21, align 8, !tbaa !23
  %23 = icmp eq i32 %22, 0
  br i1 %20, label %24, label %203

24:                                               ; preds = %17
  br i1 %23, label %355, label %25

25:                                               ; preds = %24
  %26 = add nsw i32 %22, -1
  %27 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 18
  %28 = load ptr, ptr %27, align 8, !tbaa !24
  %29 = load i16, ptr %11, align 8, !tbaa !198
  %30 = and i16 %29, 1
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %166, label %32

32:                                               ; preds = %25
  %33 = zext i32 %22 to i64
  %34 = icmp ult i32 %22, 16
  br i1 %34, label %162, label %35

35:                                               ; preds = %32
  %36 = and i64 %33, 4294967280
  %37 = trunc i64 %36 to i32
  %38 = sub i32 %26, %37
  %39 = mul nuw nsw i64 %36, 72
  %40 = getelementptr i8, ptr %28, i64 %39
  %41 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %42 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %43 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %44 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %45 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %46 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %47 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %48 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %49 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %50 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %51 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %52 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %53 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %54 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %55 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  %56 = getelementptr %struct.BezTriple, ptr %28, i64 0, i32 8
  br label %57

57:                                               ; preds = %57, %35
  %58 = phi i64 [ 0, %35 ], [ %154, %57 ]
  %59 = phi <4 x i32> [ zeroinitializer, %35 ], [ %150, %57 ]
  %60 = phi <4 x i32> [ zeroinitializer, %35 ], [ %151, %57 ]
  %61 = phi <4 x i32> [ zeroinitializer, %35 ], [ %152, %57 ]
  %62 = phi <4 x i32> [ zeroinitializer, %35 ], [ %153, %57 ]
  %63 = mul i64 %58, 72
  %64 = mul i64 %58, 72
  %65 = or i64 %64, 72
  %66 = mul i64 %58, 72
  %67 = add i64 %66, 144
  %68 = mul i64 %58, 72
  %69 = add i64 %68, 216
  %70 = mul i64 %58, 72
  %71 = add i64 %70, 288
  %72 = mul i64 %58, 72
  %73 = add i64 %72, 360
  %74 = mul i64 %58, 72
  %75 = add i64 %74, 432
  %76 = mul i64 %58, 72
  %77 = add i64 %76, 504
  %78 = mul i64 %58, 72
  %79 = add i64 %78, 576
  %80 = mul i64 %58, 72
  %81 = add i64 %80, 648
  %82 = mul i64 %58, 72
  %83 = add i64 %82, 720
  %84 = mul i64 %58, 72
  %85 = add i64 %84, 792
  %86 = mul i64 %58, 72
  %87 = add i64 %86, 864
  %88 = mul i64 %58, 72
  %89 = add i64 %88, 936
  %90 = mul i64 %58, 72
  %91 = add i64 %90, 1008
  %92 = mul i64 %58, 72
  %93 = add i64 %92, 1080
  %94 = getelementptr i8, ptr %41, i64 %63
  %95 = getelementptr i8, ptr %42, i64 %65
  %96 = getelementptr i8, ptr %43, i64 %67
  %97 = getelementptr i8, ptr %44, i64 %69
  %98 = getelementptr i8, ptr %45, i64 %71
  %99 = getelementptr i8, ptr %46, i64 %73
  %100 = getelementptr i8, ptr %47, i64 %75
  %101 = getelementptr i8, ptr %48, i64 %77
  %102 = getelementptr i8, ptr %49, i64 %79
  %103 = getelementptr i8, ptr %50, i64 %81
  %104 = getelementptr i8, ptr %51, i64 %83
  %105 = getelementptr i8, ptr %52, i64 %85
  %106 = getelementptr i8, ptr %53, i64 %87
  %107 = getelementptr i8, ptr %54, i64 %89
  %108 = getelementptr i8, ptr %55, i64 %91
  %109 = getelementptr i8, ptr %56, i64 %93
  %110 = load i8, ptr %94, align 4, !tbaa !29
  %111 = load i8, ptr %95, align 4, !tbaa !29
  %112 = load i8, ptr %96, align 4, !tbaa !29
  %113 = load i8, ptr %97, align 4, !tbaa !29
  %114 = insertelement <4 x i8> poison, i8 %110, i64 0
  %115 = insertelement <4 x i8> %114, i8 %111, i64 1
  %116 = insertelement <4 x i8> %115, i8 %112, i64 2
  %117 = insertelement <4 x i8> %116, i8 %113, i64 3
  %118 = load i8, ptr %98, align 4, !tbaa !29
  %119 = load i8, ptr %99, align 4, !tbaa !29
  %120 = load i8, ptr %100, align 4, !tbaa !29
  %121 = load i8, ptr %101, align 4, !tbaa !29
  %122 = insertelement <4 x i8> poison, i8 %118, i64 0
  %123 = insertelement <4 x i8> %122, i8 %119, i64 1
  %124 = insertelement <4 x i8> %123, i8 %120, i64 2
  %125 = insertelement <4 x i8> %124, i8 %121, i64 3
  %126 = load i8, ptr %102, align 4, !tbaa !29
  %127 = load i8, ptr %103, align 4, !tbaa !29
  %128 = load i8, ptr %104, align 4, !tbaa !29
  %129 = load i8, ptr %105, align 4, !tbaa !29
  %130 = insertelement <4 x i8> poison, i8 %126, i64 0
  %131 = insertelement <4 x i8> %130, i8 %127, i64 1
  %132 = insertelement <4 x i8> %131, i8 %128, i64 2
  %133 = insertelement <4 x i8> %132, i8 %129, i64 3
  %134 = load i8, ptr %106, align 4, !tbaa !29
  %135 = load i8, ptr %107, align 4, !tbaa !29
  %136 = load i8, ptr %108, align 4, !tbaa !29
  %137 = load i8, ptr %109, align 4, !tbaa !29
  %138 = insertelement <4 x i8> poison, i8 %134, i64 0
  %139 = insertelement <4 x i8> %138, i8 %135, i64 1
  %140 = insertelement <4 x i8> %139, i8 %136, i64 2
  %141 = insertelement <4 x i8> %140, i8 %137, i64 3
  %142 = and <4 x i8> %117, <i8 1, i8 1, i8 1, i8 1>
  %143 = and <4 x i8> %125, <i8 1, i8 1, i8 1, i8 1>
  %144 = and <4 x i8> %133, <i8 1, i8 1, i8 1, i8 1>
  %145 = and <4 x i8> %141, <i8 1, i8 1, i8 1, i8 1>
  %146 = zext <4 x i8> %142 to <4 x i32>
  %147 = zext <4 x i8> %143 to <4 x i32>
  %148 = zext <4 x i8> %144 to <4 x i32>
  %149 = zext <4 x i8> %145 to <4 x i32>
  %150 = add <4 x i32> %59, %146
  %151 = add <4 x i32> %60, %147
  %152 = add <4 x i32> %61, %148
  %153 = add <4 x i32> %62, %149
  %154 = add nuw i64 %58, 16
  %155 = icmp eq i64 %154, %36
  br i1 %155, label %156, label %57, !llvm.loop !314

156:                                              ; preds = %57
  %157 = add <4 x i32> %151, %150
  %158 = add <4 x i32> %152, %157
  %159 = add <4 x i32> %153, %158
  %160 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %159)
  %161 = icmp eq i64 %36, %33
  br i1 %161, label %352, label %162

162:                                              ; preds = %32, %156
  %163 = phi i32 [ %26, %32 ], [ %38, %156 ]
  %164 = phi i32 [ 0, %32 ], [ %160, %156 ]
  %165 = phi ptr [ %28, %32 ], [ %40, %156 ]
  br label %191

166:                                              ; preds = %25, %186
  %167 = phi i32 [ %189, %186 ], [ %26, %25 ]
  %168 = phi i32 [ %187, %186 ], [ 0, %25 ]
  %169 = phi ptr [ %188, %186 ], [ %28, %25 ]
  %170 = getelementptr inbounds %struct.BezTriple, ptr %169, i64 0, i32 8
  %171 = load i8, ptr %170, align 4, !tbaa !29
  %172 = and i8 %171, 1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %174, label %184

174:                                              ; preds = %166
  %175 = getelementptr inbounds %struct.BezTriple, ptr %169, i64 0, i32 7
  %176 = load i8, ptr %175, align 1, !tbaa !27
  %177 = and i8 %176, 1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %179, label %184

179:                                              ; preds = %174
  %180 = getelementptr inbounds %struct.BezTriple, ptr %169, i64 0, i32 9
  %181 = load i8, ptr %180, align 1, !tbaa !30
  %182 = and i8 %181, 1
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %186, label %184

184:                                              ; preds = %179, %174, %166
  %185 = add nsw i32 %168, 1
  br label %186

186:                                              ; preds = %184, %179
  %187 = phi i32 [ %185, %184 ], [ %168, %179 ]
  %188 = getelementptr inbounds %struct.BezTriple, ptr %169, i64 1
  %189 = add nsw i32 %167, -1
  %190 = icmp eq i32 %167, 0
  br i1 %190, label %352, label %166, !llvm.loop !236

191:                                              ; preds = %162, %191
  %192 = phi i32 [ %201, %191 ], [ %163, %162 ]
  %193 = phi i32 [ %199, %191 ], [ %164, %162 ]
  %194 = phi ptr [ %200, %191 ], [ %165, %162 ]
  %195 = getelementptr inbounds %struct.BezTriple, ptr %194, i64 0, i32 8
  %196 = load i8, ptr %195, align 4, !tbaa !29
  %197 = and i8 %196, 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i32 %193, %198
  %200 = getelementptr inbounds %struct.BezTriple, ptr %194, i64 1
  %201 = add nsw i32 %192, -1
  %202 = icmp eq i32 %192, 0
  br i1 %202, label %352, label %191, !llvm.loop !315

203:                                              ; preds = %17
  br i1 %23, label %355, label %204

204:                                              ; preds = %203
  %205 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 17
  %206 = load ptr, ptr %205, align 8, !tbaa !32
  %207 = zext i32 %22 to i64
  %208 = icmp ult i32 %22, 16
  br i1 %208, label %336, label %209

209:                                              ; preds = %204
  %210 = and i64 %207, 4294967280
  %211 = trunc i64 %210 to i32
  %212 = sub i32 %22, %211
  %213 = mul nuw nsw i64 %210, 36
  %214 = getelementptr i8, ptr %206, i64 %213
  %215 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %216 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %217 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %218 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %219 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %220 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %221 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %222 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %223 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %224 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %225 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %226 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %227 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %228 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %229 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  %230 = getelementptr %struct.BPoint, ptr %206, i64 0, i32 3
  br label %231

231:                                              ; preds = %231, %209
  %232 = phi i64 [ 0, %209 ], [ %328, %231 ]
  %233 = phi <4 x i32> [ zeroinitializer, %209 ], [ %324, %231 ]
  %234 = phi <4 x i32> [ zeroinitializer, %209 ], [ %325, %231 ]
  %235 = phi <4 x i32> [ zeroinitializer, %209 ], [ %326, %231 ]
  %236 = phi <4 x i32> [ zeroinitializer, %209 ], [ %327, %231 ]
  %237 = mul i64 %232, 36
  %238 = mul i64 %232, 36
  %239 = or i64 %238, 36
  %240 = mul i64 %232, 36
  %241 = add i64 %240, 72
  %242 = mul i64 %232, 36
  %243 = add i64 %242, 108
  %244 = mul i64 %232, 36
  %245 = add i64 %244, 144
  %246 = mul i64 %232, 36
  %247 = add i64 %246, 180
  %248 = mul i64 %232, 36
  %249 = add i64 %248, 216
  %250 = mul i64 %232, 36
  %251 = add i64 %250, 252
  %252 = mul i64 %232, 36
  %253 = add i64 %252, 288
  %254 = mul i64 %232, 36
  %255 = add i64 %254, 324
  %256 = mul i64 %232, 36
  %257 = add i64 %256, 360
  %258 = mul i64 %232, 36
  %259 = add i64 %258, 396
  %260 = mul i64 %232, 36
  %261 = add i64 %260, 432
  %262 = mul i64 %232, 36
  %263 = add i64 %262, 468
  %264 = mul i64 %232, 36
  %265 = add i64 %264, 504
  %266 = mul i64 %232, 36
  %267 = add i64 %266, 540
  %268 = getelementptr i8, ptr %215, i64 %237
  %269 = getelementptr i8, ptr %216, i64 %239
  %270 = getelementptr i8, ptr %217, i64 %241
  %271 = getelementptr i8, ptr %218, i64 %243
  %272 = getelementptr i8, ptr %219, i64 %245
  %273 = getelementptr i8, ptr %220, i64 %247
  %274 = getelementptr i8, ptr %221, i64 %249
  %275 = getelementptr i8, ptr %222, i64 %251
  %276 = getelementptr i8, ptr %223, i64 %253
  %277 = getelementptr i8, ptr %224, i64 %255
  %278 = getelementptr i8, ptr %225, i64 %257
  %279 = getelementptr i8, ptr %226, i64 %259
  %280 = getelementptr i8, ptr %227, i64 %261
  %281 = getelementptr i8, ptr %228, i64 %263
  %282 = getelementptr i8, ptr %229, i64 %265
  %283 = getelementptr i8, ptr %230, i64 %267
  %284 = load i16, ptr %268, align 4, !tbaa !34
  %285 = load i16, ptr %269, align 4, !tbaa !34
  %286 = load i16, ptr %270, align 4, !tbaa !34
  %287 = load i16, ptr %271, align 4, !tbaa !34
  %288 = insertelement <4 x i16> poison, i16 %284, i64 0
  %289 = insertelement <4 x i16> %288, i16 %285, i64 1
  %290 = insertelement <4 x i16> %289, i16 %286, i64 2
  %291 = insertelement <4 x i16> %290, i16 %287, i64 3
  %292 = load i16, ptr %272, align 4, !tbaa !34
  %293 = load i16, ptr %273, align 4, !tbaa !34
  %294 = load i16, ptr %274, align 4, !tbaa !34
  %295 = load i16, ptr %275, align 4, !tbaa !34
  %296 = insertelement <4 x i16> poison, i16 %292, i64 0
  %297 = insertelement <4 x i16> %296, i16 %293, i64 1
  %298 = insertelement <4 x i16> %297, i16 %294, i64 2
  %299 = insertelement <4 x i16> %298, i16 %295, i64 3
  %300 = load i16, ptr %276, align 4, !tbaa !34
  %301 = load i16, ptr %277, align 4, !tbaa !34
  %302 = load i16, ptr %278, align 4, !tbaa !34
  %303 = load i16, ptr %279, align 4, !tbaa !34
  %304 = insertelement <4 x i16> poison, i16 %300, i64 0
  %305 = insertelement <4 x i16> %304, i16 %301, i64 1
  %306 = insertelement <4 x i16> %305, i16 %302, i64 2
  %307 = insertelement <4 x i16> %306, i16 %303, i64 3
  %308 = load i16, ptr %280, align 4, !tbaa !34
  %309 = load i16, ptr %281, align 4, !tbaa !34
  %310 = load i16, ptr %282, align 4, !tbaa !34
  %311 = load i16, ptr %283, align 4, !tbaa !34
  %312 = insertelement <4 x i16> poison, i16 %308, i64 0
  %313 = insertelement <4 x i16> %312, i16 %309, i64 1
  %314 = insertelement <4 x i16> %313, i16 %310, i64 2
  %315 = insertelement <4 x i16> %314, i16 %311, i64 3
  %316 = and <4 x i16> %291, <i16 1, i16 1, i16 1, i16 1>
  %317 = and <4 x i16> %299, <i16 1, i16 1, i16 1, i16 1>
  %318 = and <4 x i16> %307, <i16 1, i16 1, i16 1, i16 1>
  %319 = and <4 x i16> %315, <i16 1, i16 1, i16 1, i16 1>
  %320 = zext <4 x i16> %316 to <4 x i32>
  %321 = zext <4 x i16> %317 to <4 x i32>
  %322 = zext <4 x i16> %318 to <4 x i32>
  %323 = zext <4 x i16> %319 to <4 x i32>
  %324 = add <4 x i32> %233, %320
  %325 = add <4 x i32> %234, %321
  %326 = add <4 x i32> %235, %322
  %327 = add <4 x i32> %236, %323
  %328 = add nuw i64 %232, 16
  %329 = icmp eq i64 %328, %210
  br i1 %329, label %330, label %231, !llvm.loop !316

330:                                              ; preds = %231
  %331 = add <4 x i32> %325, %324
  %332 = add <4 x i32> %326, %331
  %333 = add <4 x i32> %327, %332
  %334 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %333)
  %335 = icmp eq i64 %210, %207
  br i1 %335, label %352, label %336

336:                                              ; preds = %204, %330
  %337 = phi i32 [ 0, %204 ], [ %334, %330 ]
  %338 = phi i32 [ %22, %204 ], [ %212, %330 ]
  %339 = phi ptr [ %206, %204 ], [ %214, %330 ]
  br label %340

340:                                              ; preds = %336, %340
  %341 = phi i32 [ %349, %340 ], [ %337, %336 ]
  %342 = phi i32 [ %344, %340 ], [ %338, %336 ]
  %343 = phi ptr [ %350, %340 ], [ %339, %336 ]
  %344 = add nsw i32 %342, -1
  %345 = getelementptr inbounds %struct.BPoint, ptr %343, i64 0, i32 3
  %346 = load i16, ptr %345, align 4, !tbaa !34
  %347 = and i16 %346, 1
  %348 = zext i16 %347 to i32
  %349 = add nuw nsw i32 %341, %348
  %350 = getelementptr inbounds %struct.BPoint, ptr %343, i64 1
  %351 = icmp eq i32 %344, 0
  br i1 %351, label %352, label %340, !llvm.loop !317

352:                                              ; preds = %340, %191, %186, %330, %156
  %353 = phi i32 [ %160, %156 ], [ %334, %330 ], [ %187, %186 ], [ %199, %191 ], [ %349, %340 ]
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %362, label %355

355:                                              ; preds = %203, %24, %12, %352
  %356 = load ptr, ptr %13, align 8, !tbaa !36
  %357 = icmp eq ptr %356, null
  br i1 %357, label %358, label %12, !llvm.loop !318

358:                                              ; preds = %355, %2
  %359 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %360 = load i16, ptr %359, align 8, !tbaa !5
  %361 = icmp eq i16 %360, 2
  br i1 %361, label %362, label %364

362:                                              ; preds = %352, %358
  %363 = tail call fastcc i32 @addvert_Nurb(ptr noundef %0, i16 noundef signext 101, ptr noundef null), !range !280
  br label %395

364:                                              ; preds = %358
  %365 = tail call zeroext i8 @ed_editnurb_extrude_flag(ptr noundef nonnull %7, i16 noundef signext 1), !range !273
  %366 = icmp eq i8 %365, 0
  br i1 %366, label %395, label %367

367:                                              ; preds = %364
  %368 = load ptr, ptr %4, align 8, !tbaa !17
  %369 = tail call ptr @BKE_animdata_from_id(ptr noundef %368) #20
  %370 = getelementptr inbounds %struct.Curve, ptr %368, i64 0, i32 4
  %371 = load ptr, ptr %370, align 8, !tbaa !18
  %372 = getelementptr inbounds %struct.EditNurb, ptr %371, i64 0, i32 1
  %373 = load ptr, ptr %372, align 8, !tbaa !47
  %374 = icmp eq ptr %373, null
  br i1 %374, label %392, label %375

375:                                              ; preds = %367
  %376 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %368) #20
  %377 = icmp eq ptr %376, null
  br i1 %377, label %392, label %378

378:                                              ; preds = %375
  %379 = load ptr, ptr %376, align 8, !tbaa !49
  %380 = icmp eq ptr %379, null
  br i1 %380, label %381, label %385

381:                                              ; preds = %378
  %382 = getelementptr inbounds %struct.AnimData, ptr %376, i64 0, i32 5
  %383 = load ptr, ptr %382, align 8, !tbaa !51
  %384 = icmp eq ptr %383, null
  br i1 %384, label %392, label %385

385:                                              ; preds = %381, %378
  %386 = load ptr, ptr %369, align 8, !tbaa !49
  %387 = icmp eq ptr %386, null
  br i1 %387, label %390, label %388

388:                                              ; preds = %385
  %389 = getelementptr inbounds %struct.bAction, ptr %386, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %368, ptr noundef nonnull %389)
  br label %390

390:                                              ; preds = %388, %385
  %391 = getelementptr inbounds %struct.AnimData, ptr %369, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %368, ptr noundef nonnull %391)
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %3) #20
  br label %392

392:                                              ; preds = %375, %381, %367, %390
  %393 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %393) #20
  %394 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %394, i16 noundef signext 0) #20
  br label %395

395:                                              ; preds = %364, %392, %362
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_cyclic_toggle(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.119, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.120, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.121, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @toggle_cyclic_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @toggle_cyclic_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_enum(ptr noundef %9, ptr noundef nonnull @.str.122, ptr noundef nonnull @CURVE_OT_cyclic_toggle.direction_items, i32 noundef 0, ptr noundef nonnull @.str.123, ptr noundef nonnull @.str.124) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @toggle_cyclic_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi ptr [ %12, %10 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %16 = load ptr, ptr %15, align 8, !tbaa !178
  %17 = tail call i32 @RNA_enum_get(ptr noundef %16, ptr noundef nonnull @.str.122) #20
  %18 = load ptr, ptr %14, align 8, !tbaa !36
  %19 = icmp eq ptr %18, null
  br i1 %19, label %163, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 16
  br label %22

22:                                               ; preds = %20, %160
  %23 = phi ptr [ %18, %20 ], [ %161, %160 ]
  %24 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 6
  %25 = load i32, ptr %24, align 8, !tbaa !23
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %31, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 7
  %29 = load i32, ptr %28, align 4, !tbaa !31
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %31, label %160

31:                                               ; preds = %27, %22
  %32 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 2
  %33 = load i16, ptr %32, align 8, !tbaa !21
  switch i16 %33, label %100 [
    i16 0, label %34
    i16 1, label %54
  ]

34:                                               ; preds = %31
  %35 = icmp eq i32 %25, 0
  br i1 %35, label %160, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %38 = load ptr, ptr %37, align 8, !tbaa !32
  br label %43

39:                                               ; preds = %43
  %40 = getelementptr inbounds %struct.BPoint, ptr %45, i64 1
  %41 = add nsw i32 %44, -1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %160, label %43, !llvm.loop !319

43:                                               ; preds = %36, %39
  %44 = phi i32 [ %41, %39 ], [ %25, %36 ]
  %45 = phi ptr [ %40, %39 ], [ %38, %36 ]
  %46 = getelementptr inbounds %struct.BPoint, ptr %45, i64 0, i32 3
  %47 = load i16, ptr %46, align 4, !tbaa !34
  %48 = and i16 %47, 1
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %39, label %50

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 13
  %52 = load i16, ptr %51, align 4, !tbaa !39
  %53 = xor i16 %52, 1
  store i16 %53, ptr %51, align 4, !tbaa !39
  br label %160

54:                                               ; preds = %31
  %55 = icmp eq i32 %25, 0
  br i1 %55, label %99, label %56

56:                                               ; preds = %54
  %57 = add nsw i32 %25, -1
  %58 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 18
  %59 = load ptr, ptr %58, align 8, !tbaa !24
  %60 = load i16, ptr %21, align 8, !tbaa !198
  %61 = and i16 %60, 1
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %84

63:                                               ; preds = %56, %80
  %64 = phi i32 [ %82, %80 ], [ %57, %56 ]
  %65 = phi ptr [ %81, %80 ], [ %59, %56 ]
  %66 = getelementptr inbounds %struct.BezTriple, ptr %65, i64 0, i32 8
  %67 = load i8, ptr %66, align 4, !tbaa !29
  %68 = and i8 %67, 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %91

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.BezTriple, ptr %65, i64 0, i32 7
  %72 = load i8, ptr %71, align 1, !tbaa !27
  %73 = and i8 %72, 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %75, label %91

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.BezTriple, ptr %65, i64 0, i32 9
  %77 = load i8, ptr %76, align 1, !tbaa !30
  %78 = and i8 %77, 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %91

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.BezTriple, ptr %65, i64 1
  %82 = add nsw i32 %64, -1
  %83 = icmp eq i32 %64, 0
  br i1 %83, label %99, label %63, !llvm.loop !320

84:                                               ; preds = %56, %95
  %85 = phi i32 [ %97, %95 ], [ %57, %56 ]
  %86 = phi ptr [ %96, %95 ], [ %59, %56 ]
  %87 = getelementptr inbounds %struct.BezTriple, ptr %86, i64 0, i32 8
  %88 = load i8, ptr %87, align 4, !tbaa !29
  %89 = and i8 %88, 1
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %84, %63, %70, %75
  %92 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 13
  %93 = load i16, ptr %92, align 4, !tbaa !39
  %94 = xor i16 %93, 1
  store i16 %94, ptr %92, align 4, !tbaa !39
  br label %99

95:                                               ; preds = %84
  %96 = getelementptr inbounds %struct.BezTriple, ptr %86, i64 1
  %97 = add nsw i32 %85, -1
  %98 = icmp eq i32 %85, 0
  br i1 %98, label %99, label %84, !llvm.loop !320

99:                                               ; preds = %95, %80, %54, %91
  tail call void @BKE_nurb_handles_calc(ptr noundef nonnull %23) #20
  br label %160

100:                                              ; preds = %31
  %101 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 7
  %102 = load i32, ptr %101, align 4, !tbaa !31
  %103 = icmp eq i32 %102, 1
  %104 = icmp eq i16 %33, 4
  %105 = and i1 %104, %103
  br i1 %105, label %106, label %130

106:                                              ; preds = %100
  %107 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 15
  %108 = load ptr, ptr %107, align 8, !tbaa !37
  %109 = icmp eq ptr %108, null
  %110 = icmp eq i32 %25, 0
  %111 = or i1 %109, %110
  br i1 %111, label %160, label %112

112:                                              ; preds = %106
  %113 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %114 = load ptr, ptr %113, align 8, !tbaa !32
  br label %119

115:                                              ; preds = %119
  %116 = getelementptr inbounds %struct.BPoint, ptr %121, i64 1
  %117 = add nsw i32 %120, -1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %160, label %119, !llvm.loop !321

119:                                              ; preds = %112, %115
  %120 = phi i32 [ %117, %115 ], [ %25, %112 ]
  %121 = phi ptr [ %116, %115 ], [ %114, %112 ]
  %122 = getelementptr inbounds %struct.BPoint, ptr %121, i64 0, i32 3
  %123 = load i16, ptr %122, align 4, !tbaa !34
  %124 = and i16 %123, 1
  %125 = icmp eq i16 %124, 0
  br i1 %125, label %115, label %126

126:                                              ; preds = %119
  %127 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 13
  %128 = load i16, ptr %127, align 4, !tbaa !39
  %129 = xor i16 %128, 1
  store i16 %129, ptr %127, align 4, !tbaa !39
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %23) #20
  br label %160

130:                                              ; preds = %100
  br i1 %104, label %131, label %160

131:                                              ; preds = %130
  %132 = mul nsw i32 %102, %25
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %160, label %134

134:                                              ; preds = %131
  %135 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 17
  %136 = load ptr, ptr %135, align 8, !tbaa !32
  br label %141

137:                                              ; preds = %141
  %138 = getelementptr inbounds %struct.BPoint, ptr %143, i64 1
  %139 = add nsw i32 %142, -1
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %160, label %141, !llvm.loop !322

141:                                              ; preds = %134, %137
  %142 = phi i32 [ %139, %137 ], [ %132, %134 ]
  %143 = phi ptr [ %138, %137 ], [ %136, %134 ]
  %144 = getelementptr inbounds %struct.BPoint, ptr %143, i64 0, i32 3
  %145 = load i16, ptr %144, align 4, !tbaa !34
  %146 = and i16 %145, 1
  %147 = icmp eq i16 %146, 0
  br i1 %147, label %137, label %148

148:                                              ; preds = %141
  switch i32 %17, label %160 [
    i32 0, label %149
    i32 1, label %154
  ]

149:                                              ; preds = %148
  br i1 %26, label %150, label %160

150:                                              ; preds = %149
  %151 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 13
  %152 = load i16, ptr %151, align 4, !tbaa !39
  %153 = xor i16 %152, 1
  store i16 %153, ptr %151, align 4, !tbaa !39
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %23) #20
  br label %160

154:                                              ; preds = %148
  %155 = icmp sgt i32 %102, 1
  br i1 %155, label %156, label %160

156:                                              ; preds = %154
  %157 = getelementptr inbounds %struct.Nurb, ptr %23, i64 0, i32 14
  %158 = load i16, ptr %157, align 2, !tbaa !44
  %159 = xor i16 %158, 1
  store i16 %159, ptr %157, align 2, !tbaa !44
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %23) #20
  br label %160

160:                                              ; preds = %39, %137, %115, %34, %131, %149, %150, %148, %27, %99, %130, %154, %156, %106, %126, %50
  %161 = load ptr, ptr %23, align 8, !tbaa !36
  %162 = icmp eq ptr %161, null
  br i1 %162, label %163, label %22, !llvm.loop !323

163:                                              ; preds = %160, %13
  %164 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %164) #20
  %165 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %165, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @toggle_cyclic_invoke(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #5 {
  %4 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = load i16, ptr inttoptr (i64 136 to ptr), align 8, !tbaa !5
  br label %18

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 3
  %10 = load i16, ptr %9, align 8, !tbaa !5
  %11 = and i16 %10, -2
  %12 = icmp eq i16 %11, 2
  br i1 %12, label %13, label %18

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 19
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = getelementptr inbounds %struct.Curve, ptr %15, i64 0, i32 4
  %17 = load ptr, ptr %16, align 8, !tbaa !18
  br label %18

18:                                               ; preds = %6, %8, %13
  %19 = phi i16 [ %10, %13 ], [ %10, %8 ], [ %7, %6 ]
  %20 = phi ptr [ %17, %13 ], [ null, %8 ], [ null, %6 ]
  %21 = icmp eq i16 %19, 3
  br i1 %21, label %22, label %48

22:                                               ; preds = %18
  %23 = load ptr, ptr %20, align 8, !tbaa !36
  %24 = icmp eq ptr %23, null
  br i1 %24, label %48, label %25

25:                                               ; preds = %22, %45
  %26 = phi ptr [ %46, %45 ], [ %23, %22 ]
  %27 = getelementptr inbounds %struct.Nurb, ptr %26, i64 0, i32 6
  %28 = load i32, ptr %27, align 8, !tbaa !23
  %29 = icmp sgt i32 %28, 1
  br i1 %29, label %34, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.Nurb, ptr %26, i64 0, i32 7
  %32 = load i32, ptr %31, align 4, !tbaa !31
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %45

34:                                               ; preds = %30, %25
  %35 = getelementptr inbounds %struct.Nurb, ptr %26, i64 0, i32 2
  %36 = load i16, ptr %35, align 8, !tbaa !21
  %37 = icmp eq i16 %36, 4
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = tail call ptr @uiPupMenuBegin(ptr noundef %0, ptr noundef nonnull @.str.123, i32 noundef 0) #20
  %40 = tail call ptr @uiPupMenuLayout(ptr noundef %39) #20
  %41 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 4
  %42 = load ptr, ptr %41, align 8, !tbaa !324
  %43 = getelementptr inbounds %struct.wmOperatorType, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !143
  tail call void @uiItemsEnumO(ptr noundef %40, ptr noundef %44, ptr noundef nonnull @.str.122) #20
  tail call void @uiPupMenuEnd(ptr noundef %0, ptr noundef %39) #20
  br label %50

45:                                               ; preds = %30, %34
  %46 = load ptr, ptr %26, align 8, !tbaa !36
  %47 = icmp eq ptr %46, null
  br i1 %47, label %48, label %25, !llvm.loop !325

48:                                               ; preds = %45, %22, %18
  %49 = tail call i32 @toggle_cyclic_exec(ptr noundef %0, ptr noundef %1)
  br label %50

50:                                               ; preds = %48, %38
  %51 = phi i32 [ 32, %38 ], [ 4, %48 ]
  ret i32 %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_linked(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.125, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.126, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.127, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_linked_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @select_linked_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_linked_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %7 = load ptr, ptr %6, align 8, !tbaa !18
  %8 = load ptr, ptr %7, align 8, !tbaa !36
  %9 = icmp eq ptr %8, null
  br i1 %9, label %124, label %10

10:                                               ; preds = %2, %121
  %11 = phi ptr [ %122, %121 ], [ %8, %2 ]
  %12 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 2
  %13 = load i16, ptr %12, align 8, !tbaa !21
  %14 = icmp eq i16 %13, 1
  %15 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 6
  %16 = load i32, ptr %15, align 8, !tbaa !23
  br i1 %14, label %17, label %63

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 18
  %19 = load ptr, ptr %18, align 8, !tbaa !24
  %20 = icmp eq i32 %16, 0
  br i1 %20, label %121, label %24

21:                                               ; preds = %37
  %22 = getelementptr inbounds %struct.BezTriple, ptr %26, i64 1
  %23 = icmp eq i32 %27, 0
  br i1 %23, label %121, label %24, !llvm.loop !326

24:                                               ; preds = %17, %21
  %25 = phi i32 [ %27, %21 ], [ %16, %17 ]
  %26 = phi ptr [ %22, %21 ], [ %19, %17 ]
  %27 = add nsw i32 %25, -1
  %28 = getelementptr inbounds %struct.BezTriple, ptr %26, i64 0, i32 7
  %29 = load i8, ptr %28, align 1, !tbaa !27
  %30 = and i8 %29, 1
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %24
  %33 = getelementptr inbounds %struct.BezTriple, ptr %26, i64 0, i32 8
  %34 = load i8, ptr %33, align 4, !tbaa !29
  %35 = and i8 %34, 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.BezTriple, ptr %26, i64 0, i32 9
  %39 = load i8, ptr %38, align 1, !tbaa !30
  %40 = and i8 %39, 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %21, label %42

42:                                               ; preds = %37, %32, %24
  br label %43

43:                                               ; preds = %42, %60
  %44 = phi i32 [ %46, %60 ], [ %16, %42 ]
  %45 = phi ptr [ %61, %60 ], [ %19, %42 ]
  %46 = add nsw i32 %44, -1
  %47 = getelementptr inbounds %struct.BezTriple, ptr %45, i64 0, i32 10
  %48 = load i8, ptr %47, align 2, !tbaa !127
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %60

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.BezTriple, ptr %45, i64 0, i32 7
  %52 = load i8, ptr %51, align 1, !tbaa !27
  %53 = getelementptr inbounds %struct.BezTriple, ptr %45, i64 0, i32 8
  %54 = getelementptr inbounds %struct.BezTriple, ptr %45, i64 0, i32 9
  %55 = or i8 %52, 1
  store i8 %55, ptr %51, align 1, !tbaa !27
  %56 = load i8, ptr %53, align 4, !tbaa !29
  %57 = or i8 %56, 1
  store i8 %57, ptr %53, align 4, !tbaa !29
  %58 = load i8, ptr %54, align 1, !tbaa !30
  %59 = or i8 %58, 1
  store i8 %59, ptr %54, align 1, !tbaa !30
  br label %60

60:                                               ; preds = %43, %50
  %61 = getelementptr inbounds %struct.BezTriple, ptr %45, i64 1
  %62 = icmp eq i32 %46, 0
  br i1 %62, label %121, label %43, !llvm.loop !327

63:                                               ; preds = %10
  %64 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 17
  %65 = load ptr, ptr %64, align 8, !tbaa !32
  %66 = getelementptr inbounds %struct.Nurb, ptr %11, i64 0, i32 7
  %67 = load i32, ptr %66, align 4, !tbaa !31
  %68 = mul nsw i32 %67, %16
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %121, label %74

70:                                               ; preds = %74
  %71 = getelementptr inbounds %struct.BPoint, ptr %76, i64 1
  %72 = add nsw i32 %75, -1
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %121, label %74, !llvm.loop !328

74:                                               ; preds = %63, %70
  %75 = phi i32 [ %72, %70 ], [ %68, %63 ]
  %76 = phi ptr [ %71, %70 ], [ %65, %63 ]
  %77 = getelementptr inbounds %struct.BPoint, ptr %76, i64 0, i32 3
  %78 = load i16, ptr %77, align 4, !tbaa !34
  %79 = and i16 %78, 1
  %80 = icmp eq i16 %79, 0
  br i1 %80, label %70, label %81

81:                                               ; preds = %74
  %82 = and i32 %68, 1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %95, label %84

84:                                               ; preds = %81
  %85 = add nsw i32 %68, -1
  %86 = getelementptr inbounds %struct.BPoint, ptr %65, i64 0, i32 4
  %87 = load i16, ptr %86, align 2, !tbaa !129
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %89, label %93

89:                                               ; preds = %84
  %90 = getelementptr inbounds %struct.BPoint, ptr %65, i64 0, i32 3
  %91 = load i16, ptr %90, align 4, !tbaa !34
  %92 = or i16 %91, 1
  store i16 %92, ptr %90, align 4, !tbaa !34
  br label %93

93:                                               ; preds = %89, %84
  %94 = getelementptr inbounds %struct.BPoint, ptr %65, i64 1
  br label %95

95:                                               ; preds = %93, %81
  %96 = phi i32 [ %68, %81 ], [ %85, %93 ]
  %97 = phi ptr [ %65, %81 ], [ %94, %93 ]
  %98 = icmp eq i32 %68, 1
  br i1 %98, label %121, label %99

99:                                               ; preds = %95, %118
  %100 = phi i32 [ %110, %118 ], [ %96, %95 ]
  %101 = phi ptr [ %119, %118 ], [ %97, %95 ]
  %102 = getelementptr inbounds %struct.BPoint, ptr %101, i64 0, i32 4
  %103 = load i16, ptr %102, align 2, !tbaa !129
  %104 = icmp eq i16 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.BPoint, ptr %101, i64 0, i32 3
  %107 = load i16, ptr %106, align 4, !tbaa !34
  %108 = or i16 %107, 1
  store i16 %108, ptr %106, align 4, !tbaa !34
  br label %109

109:                                              ; preds = %99, %105
  %110 = add nsw i32 %100, -2
  %111 = getelementptr inbounds %struct.BPoint, ptr %101, i64 1, i32 4
  %112 = load i16, ptr %111, align 2, !tbaa !129
  %113 = icmp eq i16 %112, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.BPoint, ptr %101, i64 1, i32 3
  %116 = load i16, ptr %115, align 4, !tbaa !34
  %117 = or i16 %116, 1
  store i16 %117, ptr %115, align 4, !tbaa !34
  br label %118

118:                                              ; preds = %114, %109
  %119 = getelementptr inbounds %struct.BPoint, ptr %101, i64 2
  %120 = icmp eq i32 %110, 0
  br i1 %120, label %121, label %99, !llvm.loop !329

121:                                              ; preds = %70, %95, %118, %21, %60, %63, %17
  %122 = load ptr, ptr %11, align 8, !tbaa !36
  %123 = icmp eq ptr %122, null
  br i1 %123, label %124, label %10, !llvm.loop !330

124:                                              ; preds = %121, %2
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %5) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_linked_invoke(ptr noundef %0, ptr nocapture readnone %1, ptr nocapture readnone %2) #5 {
  %4 = tail call i32 @select_linked_exec(ptr noundef %0, ptr poison)
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_select_linked_pick(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.128, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.129, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.130, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @select_linked_pick_invoke, ptr %4, align 8, !tbaa !176
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve_region_view3d, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_boolean(ptr noundef %8, ptr noundef nonnull @.str.131, i32 noundef 0, ptr noundef nonnull @.str.132, ptr noundef nonnull @.str.133) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_linked_pick_invoke(ptr noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) #5 {
  %4 = alloca %struct.anon.0, align 8
  %5 = alloca %struct.ViewContext, align 8
  %6 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #20
  %7 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %8 = load ptr, ptr %7, align 8, !tbaa !178
  %9 = tail call i32 @RNA_boolean_get(ptr noundef %8, ptr noundef nonnull @.str.131) #20
  %10 = freeze i32 %9
  %11 = icmp eq i32 %10, 0
  tail call void @view3d_operator_needs_opengl(ptr noundef %0) #20
  call void @view3d_set_viewcontext(ptr noundef %0, ptr noundef nonnull %5) #20
  %12 = getelementptr inbounds %struct.wmEvent, ptr %2, i64 0, i32 6
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %4) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(48) %4, i8 0, i64 48, i1 false)
  %13 = call fast nofpclass(nan inf) float @ED_view3d_select_dist_px() #20
  %14 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 3
  store float %13, ptr %14, align 8, !tbaa !263
  %15 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 4
  store i32 0, ptr %15, align 4, !tbaa !265
  %16 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 5
  store i32 1, ptr %16, align 8, !tbaa !266
  %17 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 6
  %18 = load <2 x i32>, ptr %12, align 4, !tbaa !74
  %19 = sitofp <2 x i32> %18 to <2 x float>
  store <2 x float> %19, ptr %17, align 4, !tbaa !40
  %20 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !267
  %22 = getelementptr inbounds %struct.ViewContext, ptr %5, i64 0, i32 5
  %23 = load ptr, ptr %22, align 8, !tbaa !269
  call void @ED_view3d_init_mats_rv3d(ptr noundef %21, ptr noundef %23) #20
  call void @nurbs_foreachScreenVert(ptr noundef nonnull %5, ptr noundef nonnull @findnearestNurbvert__doClosest, ptr noundef nonnull %4, i32 noundef 7) #20
  %24 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !270
  %26 = getelementptr inbounds %struct.anon.0, ptr %4, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !271
  %28 = load ptr, ptr %4, align 8, !tbaa !272
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #20
  %29 = icmp eq ptr %27, null
  br i1 %29, label %77, label %30

30:                                               ; preds = %3
  %31 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 6
  %32 = load i32, ptr %31, align 8, !tbaa !23
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %169, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 18
  %36 = load ptr, ptr %35, align 8, !tbaa !24
  br i1 %11, label %37, label %57

37:                                               ; preds = %34, %54
  %38 = phi i32 [ %40, %54 ], [ %32, %34 ]
  %39 = phi ptr [ %55, %54 ], [ %36, %34 ]
  %40 = add nsw i32 %38, -1
  %41 = getelementptr inbounds %struct.BezTriple, ptr %39, i64 0, i32 10
  %42 = load i8, ptr %41, align 2, !tbaa !127
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %54

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.BezTriple, ptr %39, i64 0, i32 7
  %46 = load i8, ptr %45, align 1, !tbaa !27
  %47 = getelementptr inbounds %struct.BezTriple, ptr %39, i64 0, i32 8
  %48 = getelementptr inbounds %struct.BezTriple, ptr %39, i64 0, i32 9
  %49 = or i8 %46, 1
  store i8 %49, ptr %45, align 1, !tbaa !27
  %50 = load i8, ptr %47, align 4, !tbaa !29
  %51 = or i8 %50, 1
  store i8 %51, ptr %47, align 4, !tbaa !29
  %52 = load i8, ptr %48, align 1, !tbaa !30
  %53 = or i8 %52, 1
  store i8 %53, ptr %48, align 1, !tbaa !30
  br label %54

54:                                               ; preds = %44, %37
  %55 = getelementptr inbounds %struct.BezTriple, ptr %39, i64 1
  %56 = icmp eq i32 %40, 0
  br i1 %56, label %169, label %37, !llvm.loop !331

57:                                               ; preds = %34, %74
  %58 = phi i32 [ %60, %74 ], [ %32, %34 ]
  %59 = phi ptr [ %75, %74 ], [ %36, %34 ]
  %60 = add nsw i32 %58, -1
  %61 = getelementptr inbounds %struct.BezTriple, ptr %59, i64 0, i32 10
  %62 = load i8, ptr %61, align 2, !tbaa !127
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %74

64:                                               ; preds = %57
  %65 = getelementptr inbounds %struct.BezTriple, ptr %59, i64 0, i32 7
  %66 = load i8, ptr %65, align 1, !tbaa !27
  %67 = getelementptr inbounds %struct.BezTriple, ptr %59, i64 0, i32 8
  %68 = getelementptr inbounds %struct.BezTriple, ptr %59, i64 0, i32 9
  %69 = and i8 %66, -2
  store i8 %69, ptr %65, align 1, !tbaa !27
  %70 = load i8, ptr %67, align 4, !tbaa !29
  %71 = and i8 %70, -2
  store i8 %71, ptr %67, align 4, !tbaa !29
  %72 = load i8, ptr %68, align 1, !tbaa !30
  %73 = and i8 %72, -2
  store i8 %73, ptr %68, align 1, !tbaa !30
  br label %74

74:                                               ; preds = %57, %64
  %75 = getelementptr inbounds %struct.BezTriple, ptr %59, i64 1
  %76 = icmp eq i32 %60, 0
  br i1 %76, label %169, label %57, !llvm.loop !331

77:                                               ; preds = %3
  %78 = icmp eq ptr %28, null
  br i1 %78, label %169, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 6
  %81 = load i32, ptr %80, align 8, !tbaa !23
  %82 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %83 = load i32, ptr %82, align 4, !tbaa !31
  %84 = mul nsw i32 %83, %81
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %169, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %88 = load ptr, ptr %87, align 8, !tbaa !32
  br i1 %11, label %107, label %89

89:                                               ; preds = %86
  %90 = and i32 %84, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %89
  %93 = add nsw i32 %84, -1
  %94 = getelementptr inbounds %struct.BPoint, ptr %88, i64 0, i32 4
  %95 = load i16, ptr %94, align 2, !tbaa !129
  %96 = icmp eq i16 %95, 0
  br i1 %96, label %97, label %101

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.BPoint, ptr %88, i64 0, i32 3
  %99 = load i16, ptr %98, align 4, !tbaa !34
  %100 = and i16 %99, -2
  store i16 %100, ptr %98, align 4, !tbaa !34
  br label %101

101:                                              ; preds = %97, %92
  %102 = getelementptr inbounds %struct.BPoint, ptr %88, i64 1
  br label %103

103:                                              ; preds = %101, %89
  %104 = phi i32 [ %84, %89 ], [ %93, %101 ]
  %105 = phi ptr [ %88, %89 ], [ %102, %101 ]
  %106 = icmp eq i32 %84, 1
  br i1 %106, label %169, label %147

107:                                              ; preds = %86
  %108 = and i32 %84, 1
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %121, label %110

110:                                              ; preds = %107
  %111 = add nsw i32 %84, -1
  %112 = getelementptr inbounds %struct.BPoint, ptr %88, i64 0, i32 4
  %113 = load i16, ptr %112, align 2, !tbaa !129
  %114 = icmp eq i16 %113, 0
  br i1 %114, label %115, label %119

115:                                              ; preds = %110
  %116 = getelementptr inbounds %struct.BPoint, ptr %88, i64 0, i32 3
  %117 = load i16, ptr %116, align 4, !tbaa !34
  %118 = or i16 %117, 1
  store i16 %118, ptr %116, align 4, !tbaa !34
  br label %119

119:                                              ; preds = %115, %110
  %120 = getelementptr inbounds %struct.BPoint, ptr %88, i64 1
  br label %121

121:                                              ; preds = %119, %107
  %122 = phi i32 [ %84, %107 ], [ %111, %119 ]
  %123 = phi ptr [ %88, %107 ], [ %120, %119 ]
  %124 = icmp eq i32 %84, 1
  br i1 %124, label %169, label %125

125:                                              ; preds = %121, %144
  %126 = phi i32 [ %136, %144 ], [ %122, %121 ]
  %127 = phi ptr [ %145, %144 ], [ %123, %121 ]
  %128 = getelementptr inbounds %struct.BPoint, ptr %127, i64 0, i32 4
  %129 = load i16, ptr %128, align 2, !tbaa !129
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %131, label %135

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.BPoint, ptr %127, i64 0, i32 3
  %133 = load i16, ptr %132, align 4, !tbaa !34
  %134 = or i16 %133, 1
  store i16 %134, ptr %132, align 4, !tbaa !34
  br label %135

135:                                              ; preds = %131, %125
  %136 = add nsw i32 %126, -2
  %137 = getelementptr inbounds %struct.BPoint, ptr %127, i64 1, i32 4
  %138 = load i16, ptr %137, align 2, !tbaa !129
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %135
  %141 = getelementptr inbounds %struct.BPoint, ptr %127, i64 1, i32 3
  %142 = load i16, ptr %141, align 4, !tbaa !34
  %143 = or i16 %142, 1
  store i16 %143, ptr %141, align 4, !tbaa !34
  br label %144

144:                                              ; preds = %140, %135
  %145 = getelementptr inbounds %struct.BPoint, ptr %127, i64 2
  %146 = icmp eq i32 %136, 0
  br i1 %146, label %169, label %125, !llvm.loop !332

147:                                              ; preds = %103, %166
  %148 = phi i32 [ %158, %166 ], [ %104, %103 ]
  %149 = phi ptr [ %167, %166 ], [ %105, %103 ]
  %150 = getelementptr inbounds %struct.BPoint, ptr %149, i64 0, i32 4
  %151 = load i16, ptr %150, align 2, !tbaa !129
  %152 = icmp eq i16 %151, 0
  br i1 %152, label %153, label %157

153:                                              ; preds = %147
  %154 = getelementptr inbounds %struct.BPoint, ptr %149, i64 0, i32 3
  %155 = load i16, ptr %154, align 4, !tbaa !34
  %156 = and i16 %155, -2
  store i16 %156, ptr %154, align 4, !tbaa !34
  br label %157

157:                                              ; preds = %147, %153
  %158 = add nsw i32 %148, -2
  %159 = getelementptr inbounds %struct.BPoint, ptr %149, i64 1, i32 4
  %160 = load i16, ptr %159, align 2, !tbaa !129
  %161 = icmp eq i16 %160, 0
  br i1 %161, label %162, label %166

162:                                              ; preds = %157
  %163 = getelementptr inbounds %struct.BPoint, ptr %149, i64 1, i32 3
  %164 = load i16, ptr %163, align 4, !tbaa !34
  %165 = and i16 %164, -2
  store i16 %165, ptr %163, align 4, !tbaa !34
  br label %166

166:                                              ; preds = %162, %157
  %167 = getelementptr inbounds %struct.BPoint, ptr %149, i64 2
  %168 = icmp eq i32 %158, 0
  br i1 %168, label %169, label %147, !llvm.loop !332

169:                                              ; preds = %74, %54, %103, %166, %121, %144, %30, %79, %77
  %170 = getelementptr inbounds %struct.Object, ptr %6, i64 0, i32 19
  %171 = load ptr, ptr %170, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %171) #20
  br i1 %11, label %174, label %172

172:                                              ; preds = %169
  %173 = load ptr, ptr %170, align 8, !tbaa !17
  call void @BKE_curve_nurb_vert_active_validate(ptr noundef %173) #20
  br label %174

174:                                              ; preds = %172, %169
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #20
  ret i32 4
}

declare i32 @ED_operator_editsurfcurve_region_view3d(ptr noundef) #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_row(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.134, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.135, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.136, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_row_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurf, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_row_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  %5 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %6 = getelementptr inbounds %struct.Object, ptr %5, i64 0, i32 19
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = getelementptr inbounds %struct.Object, ptr %5, i64 0, i32 3
  %9 = load i16, ptr %8, align 8, !tbaa !5
  %10 = and i16 %9, -2
  %11 = icmp eq i16 %10, 2
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.Curve, ptr %7, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %12
  %16 = phi ptr [ %14, %12 ], [ null, %2 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #20
  store ptr null, ptr %3, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #20
  store ptr null, ptr %4, align 8, !tbaa !36
  %17 = call zeroext i8 @BKE_curve_nurb_vert_active_get(ptr noundef %7, ptr noundef nonnull %3, ptr noundef nonnull %4) #20
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %162, label %19

19:                                               ; preds = %15
  %20 = load ptr, ptr @select_row_exec.last, align 8, !tbaa !36
  %21 = load ptr, ptr %4, align 8, !tbaa !36
  %22 = icmp eq ptr %20, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = load i32, ptr @select_row_exec.direction, align 4, !tbaa !74
  %25 = sub nuw nsw i32 1, %24
  store i32 %25, ptr @select_row_exec.direction, align 4, !tbaa !74
  call void @BKE_nurbList_flag_set(ptr noundef %16, i16 noundef signext 0) #20
  %26 = load ptr, ptr %4, align 8, !tbaa !36
  br label %27

27:                                               ; preds = %23, %19
  %28 = phi ptr [ %26, %23 ], [ %21, %19 ]
  store ptr %28, ptr @select_row_exec.last, align 8, !tbaa !36
  %29 = getelementptr inbounds %struct.Curve, ptr %7, i64 0, i32 32
  %30 = load i32, ptr %29, align 8, !tbaa !174
  %31 = load ptr, ptr %3, align 8, !tbaa !36
  %32 = getelementptr inbounds %struct.Nurb, ptr %31, i64 0, i32 6
  %33 = load i32, ptr %32, align 8, !tbaa !23
  %34 = srem i32 %30, %33
  %35 = sdiv i32 %30, %33
  %36 = getelementptr inbounds %struct.Nurb, ptr %31, i64 0, i32 17
  %37 = load ptr, ptr %36, align 8, !tbaa !32
  store ptr %37, ptr %4, align 8, !tbaa !36
  %38 = getelementptr inbounds %struct.Nurb, ptr %31, i64 0, i32 7
  %39 = load i32, ptr %38, align 4, !tbaa !31
  %40 = icmp sgt i32 %39, 0
  %41 = icmp sgt i32 %33, 0
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %160

43:                                               ; preds = %27
  %44 = load i32, ptr @select_row_exec.direction, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = and i32 %33, 1
  %48 = icmp eq i32 %33, 1
  %49 = and i32 %33, -2
  %50 = icmp eq i32 %47, 0
  br label %60

51:                                               ; preds = %43
  %52 = add nsw i32 %33, -1
  %53 = zext i32 %52 to i64
  %54 = mul nuw nsw i64 %53, 36
  %55 = add nuw nsw i64 %54, 36
  %56 = and i32 %33, 1
  %57 = icmp eq i32 %33, 1
  %58 = and i32 %33, -2
  %59 = icmp eq i32 %56, 0
  br label %112

60:                                               ; preds = %46, %108
  %61 = phi i32 [ %110, %108 ], [ 0, %46 ]
  %62 = phi ptr [ %109, %108 ], [ %37, %46 ]
  br i1 %48, label %92, label %63

63:                                               ; preds = %60, %87
  %64 = phi i32 [ %88, %87 ], [ 0, %60 ]
  %65 = phi ptr [ %89, %87 ], [ %62, %60 ]
  %66 = phi i32 [ %90, %87 ], [ 0, %60 ]
  %67 = icmp eq i32 %64, %34
  br i1 %67, label %68, label %76

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.BPoint, ptr %65, i64 0, i32 4
  %70 = load i16, ptr %69, align 2, !tbaa !129
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.BPoint, ptr %65, i64 0, i32 3
  %74 = load i16, ptr %73, align 4, !tbaa !34
  %75 = or i16 %74, 1
  store i16 %75, ptr %73, align 4, !tbaa !34
  br label %76

76:                                               ; preds = %72, %68, %63
  %77 = or i32 %64, 1
  %78 = icmp eq i32 %77, %34
  br i1 %78, label %79, label %87

79:                                               ; preds = %76
  %80 = getelementptr inbounds %struct.BPoint, ptr %65, i64 1, i32 4
  %81 = load i16, ptr %80, align 2, !tbaa !129
  %82 = icmp eq i16 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.BPoint, ptr %65, i64 1, i32 3
  %85 = load i16, ptr %84, align 4, !tbaa !34
  %86 = or i16 %85, 1
  store i16 %86, ptr %84, align 4, !tbaa !34
  br label %87

87:                                               ; preds = %83, %79, %76
  %88 = add nuw nsw i32 %64, 2
  %89 = getelementptr inbounds %struct.BPoint, ptr %65, i64 2
  %90 = add i32 %66, 2
  %91 = icmp eq i32 %90, %49
  br i1 %91, label %92, label %63, !llvm.loop !333

92:                                               ; preds = %87, %60
  %93 = phi ptr [ undef, %60 ], [ %89, %87 ]
  %94 = phi i32 [ 0, %60 ], [ %88, %87 ]
  %95 = phi ptr [ %62, %60 ], [ %89, %87 ]
  br i1 %50, label %108, label %96

96:                                               ; preds = %92
  %97 = icmp eq i32 %94, %34
  br i1 %97, label %98, label %106

98:                                               ; preds = %96
  %99 = getelementptr inbounds %struct.BPoint, ptr %95, i64 0, i32 4
  %100 = load i16, ptr %99, align 2, !tbaa !129
  %101 = icmp eq i16 %100, 0
  br i1 %101, label %102, label %106

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.BPoint, ptr %95, i64 0, i32 3
  %104 = load i16, ptr %103, align 4, !tbaa !34
  %105 = or i16 %104, 1
  store i16 %105, ptr %103, align 4, !tbaa !34
  br label %106

106:                                              ; preds = %102, %98, %96
  %107 = getelementptr inbounds %struct.BPoint, ptr %95, i64 1
  br label %108

108:                                              ; preds = %92, %106
  %109 = phi ptr [ %93, %92 ], [ %107, %106 ]
  %110 = add nuw nsw i32 %61, 1
  %111 = icmp eq i32 %110, %39
  br i1 %111, label %158, label %60, !llvm.loop !334

112:                                              ; preds = %51, %132
  %113 = phi i32 [ %134, %132 ], [ 0, %51 ]
  %114 = phi ptr [ %133, %132 ], [ %37, %51 ]
  %115 = icmp eq i32 %113, %35
  br i1 %115, label %116, label %117

116:                                              ; preds = %112
  br i1 %57, label %119, label %136

117:                                              ; preds = %112
  %118 = getelementptr i8, ptr %114, i64 %55
  br label %132

119:                                              ; preds = %154, %116
  %120 = phi ptr [ undef, %116 ], [ %155, %154 ]
  %121 = phi ptr [ %114, %116 ], [ %155, %154 ]
  br i1 %59, label %132, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.BPoint, ptr %121, i64 0, i32 4
  %124 = load i16, ptr %123, align 2, !tbaa !129
  %125 = icmp eq i16 %124, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.BPoint, ptr %121, i64 0, i32 3
  %128 = load i16, ptr %127, align 4, !tbaa !34
  %129 = or i16 %128, 1
  store i16 %129, ptr %127, align 4, !tbaa !34
  br label %130

130:                                              ; preds = %126, %122
  %131 = getelementptr inbounds %struct.BPoint, ptr %121, i64 1
  br label %132

132:                                              ; preds = %130, %119, %117
  %133 = phi ptr [ %118, %117 ], [ %120, %119 ], [ %131, %130 ]
  %134 = add nuw nsw i32 %113, 1
  %135 = icmp eq i32 %134, %39
  br i1 %135, label %158, label %112, !llvm.loop !334

136:                                              ; preds = %116, %154
  %137 = phi ptr [ %155, %154 ], [ %114, %116 ]
  %138 = phi i32 [ %156, %154 ], [ 0, %116 ]
  %139 = getelementptr inbounds %struct.BPoint, ptr %137, i64 0, i32 4
  %140 = load i16, ptr %139, align 2, !tbaa !129
  %141 = icmp eq i16 %140, 0
  br i1 %141, label %142, label %146

142:                                              ; preds = %136
  %143 = getelementptr inbounds %struct.BPoint, ptr %137, i64 0, i32 3
  %144 = load i16, ptr %143, align 4, !tbaa !34
  %145 = or i16 %144, 1
  store i16 %145, ptr %143, align 4, !tbaa !34
  br label %146

146:                                              ; preds = %142, %136
  %147 = getelementptr inbounds %struct.BPoint, ptr %137, i64 1, i32 4
  %148 = load i16, ptr %147, align 2, !tbaa !129
  %149 = icmp eq i16 %148, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %146
  %151 = getelementptr inbounds %struct.BPoint, ptr %137, i64 1, i32 3
  %152 = load i16, ptr %151, align 4, !tbaa !34
  %153 = or i16 %152, 1
  store i16 %153, ptr %151, align 4, !tbaa !34
  br label %154

154:                                              ; preds = %150, %146
  %155 = getelementptr inbounds %struct.BPoint, ptr %137, i64 2
  %156 = add i32 %138, 2
  %157 = icmp eq i32 %156, %58
  br i1 %157, label %119, label %136, !llvm.loop !333

158:                                              ; preds = %132, %108
  %159 = phi ptr [ %109, %108 ], [ %133, %132 ]
  store ptr %159, ptr %4, align 8, !tbaa !36
  br label %160

160:                                              ; preds = %158, %27
  %161 = load ptr, ptr %6, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %161) #20
  br label %162

162:                                              ; preds = %15, %160
  %163 = phi i32 [ 4, %160 ], [ 2, %15 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #20
  ret i32 %163
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_next(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.137, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.138, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.139, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_next_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_next_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  tail call fastcc void @select_adjacent_cp(ptr noundef %16, i16 noundef signext 1)
  %17 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %18) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_previous(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.140, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.141, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.142, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_previous_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_previous_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  tail call fastcc void @select_adjacent_cp(ptr noundef %16, i16 noundef signext -1)
  %17 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %18) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_more(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.143, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.144, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.145, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_more_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_more_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = load i16, ptr inttoptr (i64 136 to ptr), align 8, !tbaa !5
  br label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %9 = load i16, ptr %8, align 8, !tbaa !5
  %10 = and i16 %9, -2
  %11 = icmp eq i16 %10, 2
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.Curve, ptr %14, i64 0, i32 4
  %16 = load ptr, ptr %15, align 8, !tbaa !18
  br label %17

17:                                               ; preds = %5, %7, %12
  %18 = phi i16 [ %9, %12 ], [ %9, %7 ], [ %6, %5 ]
  %19 = phi ptr [ %16, %12 ], [ null, %7 ], [ null, %5 ]
  %20 = icmp eq i16 %18, 3
  br i1 %20, label %21, label %143

21:                                               ; preds = %17
  %22 = load ptr, ptr %19, align 8, !tbaa !36
  %23 = icmp eq ptr %22, null
  br i1 %23, label %144, label %24

24:                                               ; preds = %21, %139
  %25 = phi ptr [ %141, %139 ], [ %22, %21 ]
  %26 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 6
  %27 = load i32, ptr %26, align 8, !tbaa !23
  %28 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 7
  %29 = load i32, ptr %28, align 4, !tbaa !31
  %30 = mul nsw i32 %29, %27
  %31 = getelementptr inbounds %struct.Nurb, ptr %25, i64 0, i32 17
  %32 = load ptr, ptr %31, align 8, !tbaa !32
  %33 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %34 = ashr i32 %30, 5
  %35 = add nsw i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 2
  %38 = tail call ptr %33(i64 noundef %37, ptr noundef nonnull @.str.219) #20
  %39 = icmp sgt i32 %30, 0
  br i1 %39, label %40, label %139

40:                                               ; preds = %24, %133
  %41 = phi i32 [ %137, %133 ], [ %30, %24 ]
  %42 = phi ptr [ %136, %133 ], [ %32, %24 ]
  %43 = lshr i32 %41, 5
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, ptr %38, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !74
  %47 = and i32 %41, 31
  %48 = shl nuw i32 1, %47
  %49 = and i32 %46, %48
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %133

51:                                               ; preds = %40
  %52 = getelementptr inbounds %struct.BPoint, ptr %42, i64 0, i32 4
  %53 = load i16, ptr %52, align 2, !tbaa !129
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %55, label %133

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.BPoint, ptr %42, i64 0, i32 3
  %57 = load i16, ptr %56, align 4, !tbaa !34
  %58 = and i16 %57, 1
  %59 = icmp eq i16 %58, 0
  br i1 %59, label %133, label %60

60:                                               ; preds = %55
  %61 = load i32, ptr %26, align 8, !tbaa !23
  %62 = srem i32 %41, %61
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %60
  %65 = getelementptr %struct.BPoint, ptr %42, i64 -1, i32 3
  %66 = load i16, ptr %65, align 4, !tbaa !34
  %67 = and i16 %66, 1
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = getelementptr %struct.BPoint, ptr %42, i64 -1, i32 4
  %71 = load i16, ptr %70, align 2, !tbaa !129
  %72 = icmp eq i16 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %69
  %74 = or i16 %66, 1
  store i16 %74, ptr %65, align 4, !tbaa !34
  br label %75

75:                                               ; preds = %73, %69, %64, %60
  %76 = icmp sgt i32 %41, %61
  br i1 %76, label %77, label %98

77:                                               ; preds = %75
  %78 = sext i32 %61 to i64
  %79 = getelementptr inbounds %struct.BPoint, ptr %42, i64 %78, i32 3
  %80 = load i16, ptr %79, align 4, !tbaa !34
  %81 = and i16 %80, 1
  %82 = icmp eq i16 %81, 0
  br i1 %82, label %83, label %98

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.BPoint, ptr %42, i64 %78, i32 4
  %85 = load i16, ptr %84, align 2, !tbaa !129
  %86 = icmp eq i16 %85, 0
  br i1 %86, label %87, label %98

87:                                               ; preds = %83
  %88 = or i16 %80, 1
  store i16 %88, ptr %79, align 4, !tbaa !34
  %89 = sub nsw i32 %41, %61
  %90 = and i32 %89, 31
  %91 = shl nuw i32 1, %90
  %92 = ashr i32 %89, 5
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i32, ptr %38, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !74
  %96 = or i32 %95, %91
  store i32 %96, ptr %94, align 4, !tbaa !74
  %97 = load i32, ptr %26, align 8, !tbaa !23
  br label %98

98:                                               ; preds = %83, %77, %87, %75
  %99 = phi i32 [ %61, %83 ], [ %61, %77 ], [ %97, %87 ], [ %61, %75 ]
  %100 = add nsw i32 %99, %41
  %101 = load i32, ptr %28, align 4, !tbaa !31
  %102 = mul nsw i32 %101, %99
  %103 = icmp slt i32 %100, %102
  br i1 %103, label %104, label %117

104:                                              ; preds = %98
  %105 = sext i32 %99 to i64
  %106 = sub nsw i64 0, %105
  %107 = getelementptr inbounds %struct.BPoint, ptr %42, i64 %106, i32 3
  %108 = load i16, ptr %107, align 4, !tbaa !34
  %109 = and i16 %108, 1
  %110 = icmp eq i16 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %104
  %112 = getelementptr inbounds %struct.BPoint, ptr %42, i64 %106, i32 4
  %113 = load i16, ptr %112, align 2, !tbaa !129
  %114 = icmp eq i16 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  %116 = or i16 %108, 1
  store i16 %116, ptr %107, align 4, !tbaa !34
  br label %117

117:                                              ; preds = %115, %111, %104, %98
  %118 = srem i32 %41, %99
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %133, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.BPoint, ptr %42, i64 1, i32 3
  %122 = load i16, ptr %121, align 4, !tbaa !34
  %123 = and i16 %122, 1
  %124 = icmp eq i16 %123, 0
  br i1 %124, label %125, label %133

125:                                              ; preds = %120
  %126 = getelementptr inbounds %struct.BPoint, ptr %42, i64 1, i32 4
  %127 = load i16, ptr %126, align 2, !tbaa !129
  %128 = icmp eq i16 %127, 0
  br i1 %128, label %129, label %133

129:                                              ; preds = %125
  %130 = or i16 %122, 1
  store i16 %130, ptr %121, align 4, !tbaa !34
  %131 = getelementptr inbounds %struct.BPoint, ptr %42, i64 1
  %132 = add nsw i32 %41, -1
  br label %133

133:                                              ; preds = %125, %120, %117, %129, %55, %51, %40
  %134 = phi ptr [ %42, %40 ], [ %131, %129 ], [ %42, %117 ], [ %42, %55 ], [ %42, %51 ], [ %42, %120 ], [ %42, %125 ]
  %135 = phi i32 [ %41, %40 ], [ %132, %129 ], [ %41, %117 ], [ %41, %55 ], [ %41, %51 ], [ %41, %120 ], [ %41, %125 ]
  %136 = getelementptr inbounds %struct.BPoint, ptr %134, i64 1
  %137 = add nsw i32 %135, -1
  %138 = icmp sgt i32 %135, 1
  br i1 %138, label %40, label %139, !llvm.loop !335

139:                                              ; preds = %133, %24
  %140 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %140(ptr noundef %38) #20
  %141 = load ptr, ptr %25, align 8, !tbaa !36
  %142 = icmp eq ptr %141, null
  br i1 %142, label %144, label %24, !llvm.loop !336

143:                                              ; preds = %17
  tail call fastcc void @select_adjacent_cp(ptr noundef %19, i16 noundef signext 1)
  tail call fastcc void @select_adjacent_cp(ptr noundef %19, i16 noundef signext -1)
  br label %144

144:                                              ; preds = %139, %21, %143
  %145 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %146) #20
  ret i32 4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_select_less(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.146, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.147, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.148, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_less_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_less_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp ne ptr %3, null
  tail call void @llvm.assume(i1 %4)
  %5 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %6 = load i16, ptr %5, align 8, !tbaa !5
  %7 = and i16 %6, -2
  %8 = icmp eq i16 %7, 2
  tail call void @llvm.assume(i1 %8)
  %9 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  %13 = icmp eq i16 %6, 3
  %14 = load ptr, ptr %12, align 8, !tbaa !36
  %15 = icmp eq ptr %14, null
  br i1 %13, label %17, label %16

16:                                               ; preds = %2
  br i1 %15, label %333, label %149

17:                                               ; preds = %2
  br i1 %15, label %333, label %18

18:                                               ; preds = %17, %145
  %19 = phi ptr [ %147, %145 ], [ %14, %17 ]
  %20 = getelementptr inbounds %struct.Nurb, ptr %19, i64 0, i32 6
  %21 = load i32, ptr %20, align 8, !tbaa !23
  %22 = getelementptr inbounds %struct.Nurb, ptr %19, i64 0, i32 7
  %23 = load i32, ptr %22, align 4, !tbaa !31
  %24 = mul nsw i32 %23, %21
  %25 = getelementptr inbounds %struct.Nurb, ptr %19, i64 0, i32 17
  %26 = load ptr, ptr %25, align 8, !tbaa !32
  %27 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %28 = ashr i32 %24, 5
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = shl nsw i64 %30, 2
  %32 = tail call ptr %27(i64 noundef %31, ptr noundef nonnull @.str.219) #20
  %33 = icmp eq i32 %24, 0
  br i1 %33, label %145, label %34

34:                                               ; preds = %18, %142
  %35 = phi i32 [ %37, %142 ], [ %24, %18 ]
  %36 = phi ptr [ %143, %142 ], [ %26, %18 ]
  %37 = add nsw i32 %35, -1
  %38 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 4
  %39 = load i16, ptr %38, align 2, !tbaa !129
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %41, label %142

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.BPoint, ptr %36, i64 0, i32 3
  %43 = load i16, ptr %42, align 4, !tbaa !34
  %44 = and i16 %43, 1
  %45 = icmp eq i16 %44, 0
  br i1 %45, label %142, label %46

46:                                               ; preds = %41
  %47 = load i32, ptr %20, align 8, !tbaa !23
  %48 = srem i32 %35, %47
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %74, label %50

50:                                               ; preds = %46
  %51 = ashr i32 %35, 5
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, ptr %32, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !74
  %55 = and i32 %35, 31
  %56 = shl nuw i32 1, %55
  %57 = and i32 %54, %56
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %68

59:                                               ; preds = %50
  %60 = getelementptr %struct.BPoint, ptr %36, i64 -1, i32 4
  %61 = load i16, ptr %60, align 2, !tbaa !129
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = getelementptr %struct.BPoint, ptr %36, i64 -1, i32 3
  %65 = load i16, ptr %64, align 4, !tbaa !34
  %66 = and i16 %65, 1
  %67 = icmp eq i16 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %63, %50
  br label %69

69:                                               ; preds = %59, %63, %68
  %70 = phi i32 [ 1, %68 ], [ 0, %63 ], [ 0, %59 ]
  %71 = icmp eq i32 %48, 1
  br i1 %71, label %72, label %74

72:                                               ; preds = %69
  %73 = add nuw nsw i32 %70, 1
  br label %85

74:                                               ; preds = %46, %69
  %75 = phi i32 [ %70, %69 ], [ 1, %46 ]
  %76 = getelementptr inbounds %struct.BPoint, ptr %36, i64 1, i32 4
  %77 = load i16, ptr %76, align 2, !tbaa !129
  %78 = icmp eq i16 %77, 0
  br i1 %78, label %79, label %85

79:                                               ; preds = %74
  %80 = getelementptr inbounds %struct.BPoint, ptr %36, i64 1, i32 3
  %81 = load i16, ptr %80, align 4, !tbaa !34
  %82 = and i16 %81, 1
  %83 = zext i16 %82 to i32
  %84 = add nuw nsw i32 %75, %83
  br label %85

85:                                               ; preds = %79, %74, %72
  %86 = phi i32 [ %73, %72 ], [ %75, %74 ], [ %84, %79 ]
  %87 = load i32, ptr %22, align 4, !tbaa !31
  %88 = add i32 %87, -1
  %89 = mul i32 %88, %47
  %90 = icmp sgt i32 %35, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %85
  %92 = add nuw nsw i32 %86, 1
  br label %116

93:                                               ; preds = %85
  %94 = sext i32 %47 to i64
  %95 = sub nsw i64 0, %94
  %96 = add nsw i32 %47, %37
  %97 = ashr i32 %96, 5
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, ptr %32, i64 %98
  %100 = load i32, ptr %99, align 4, !tbaa !74
  %101 = and i32 %96, 31
  %102 = shl nuw i32 1, %101
  %103 = and i32 %100, %102
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %114

105:                                              ; preds = %93
  %106 = getelementptr inbounds %struct.BPoint, ptr %36, i64 %95, i32 4
  %107 = load i16, ptr %106, align 2, !tbaa !129
  %108 = icmp eq i16 %107, 0
  br i1 %108, label %109, label %116

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.BPoint, ptr %36, i64 %95, i32 3
  %111 = load i16, ptr %110, align 4, !tbaa !34
  %112 = and i16 %111, 1
  %113 = icmp eq i16 %112, 0
  br i1 %113, label %116, label %114

114:                                              ; preds = %109, %93
  %115 = add nuw nsw i32 %86, 1
  br label %116

116:                                              ; preds = %105, %109, %114, %91
  %117 = phi i32 [ %92, %91 ], [ %115, %114 ], [ %86, %109 ], [ %86, %105 ]
  %118 = icmp sgt i32 %35, %47
  br i1 %118, label %119, label %129

119:                                              ; preds = %116
  %120 = sext i32 %47 to i64
  %121 = getelementptr inbounds %struct.BPoint, ptr %36, i64 %120, i32 4
  %122 = load i16, ptr %121, align 2, !tbaa !129
  %123 = icmp eq i16 %122, 0
  br i1 %123, label %124, label %133

124:                                              ; preds = %119
  %125 = getelementptr inbounds %struct.BPoint, ptr %36, i64 %120, i32 3
  %126 = load i16, ptr %125, align 4, !tbaa !34
  %127 = and i16 %126, 1
  %128 = zext i16 %127 to i32
  br label %129

129:                                              ; preds = %116, %124
  %130 = phi i32 [ %128, %124 ], [ 1, %116 ]
  %131 = add nuw nsw i32 %117, %130
  %132 = icmp eq i32 %131, 4
  br i1 %132, label %142, label %133

133:                                              ; preds = %119, %129
  %134 = and i16 %43, -2
  store i16 %134, ptr %42, align 4, !tbaa !34
  %135 = and i32 %37, 31
  %136 = shl nuw i32 1, %135
  %137 = ashr i32 %37, 5
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, ptr %32, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !74
  %141 = or i32 %140, %136
  store i32 %141, ptr %139, align 4, !tbaa !74
  br label %142

142:                                              ; preds = %34, %41, %129, %133
  %143 = getelementptr inbounds %struct.BPoint, ptr %36, i64 1
  %144 = icmp eq i32 %37, 0
  br i1 %144, label %145, label %34, !llvm.loop !337

145:                                              ; preds = %142, %18
  %146 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %146(ptr noundef %32) #20
  %147 = load ptr, ptr %19, align 8, !tbaa !36
  %148 = icmp eq ptr %147, null
  br i1 %148, label %333, label %18, !llvm.loop !338

149:                                              ; preds = %16, %330
  %150 = phi ptr [ %331, %330 ], [ %14, %16 ]
  %151 = getelementptr inbounds %struct.Nurb, ptr %150, i64 0, i32 2
  %152 = load i16, ptr %151, align 8, !tbaa !21
  %153 = icmp eq i16 %152, 1
  %154 = getelementptr inbounds %struct.Nurb, ptr %150, i64 0, i32 6
  %155 = load i32, ptr %154, align 8, !tbaa !23
  br i1 %153, label %156, label %249

156:                                              ; preds = %149
  %157 = getelementptr inbounds %struct.Nurb, ptr %150, i64 0, i32 18
  %158 = load ptr, ptr %157, align 8, !tbaa !24
  %159 = icmp eq i32 %155, 0
  br i1 %159, label %330, label %160

160:                                              ; preds = %156
  %161 = add nsw i32 %155, -1
  %162 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 0, i32 10
  %163 = load i8, ptr %162, align 2, !tbaa !127
  %164 = icmp eq i8 %163, 0
  br i1 %164, label %165, label %189

165:                                              ; preds = %160
  %166 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 0, i32 8
  %167 = load i8, ptr %166, align 4, !tbaa !29
  %168 = and i8 %167, 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %189, label %170

170:                                              ; preds = %165
  %171 = icmp eq i32 %161, 0
  br i1 %171, label %330, label %172

172:                                              ; preds = %170
  %173 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 1, i32 10
  %174 = load i8, ptr %173, align 2, !tbaa !127
  %175 = icmp eq i8 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 1, i32 8
  %178 = load i8, ptr %177, align 4, !tbaa !29
  %179 = and i8 %178, 1
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %191

181:                                              ; preds = %172, %176
  %182 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 0, i32 7
  %183 = load i8, ptr %182, align 1, !tbaa !27
  %184 = getelementptr inbounds %struct.BezTriple, ptr %158, i64 0, i32 9
  %185 = and i8 %183, -2
  store i8 %185, ptr %182, align 1, !tbaa !27
  %186 = and i8 %167, -2
  store i8 %186, ptr %166, align 4, !tbaa !29
  %187 = load i8, ptr %184, align 1, !tbaa !30
  %188 = and i8 %187, -2
  store i8 %188, ptr %184, align 1, !tbaa !30
  br label %191

189:                                              ; preds = %165, %160
  %190 = icmp eq i32 %161, 0
  br i1 %190, label %330, label %191

191:                                              ; preds = %176, %181, %189
  %192 = phi i32 [ 1, %181 ], [ 0, %176 ], [ 0, %189 ]
  br label %193

193:                                              ; preds = %191, %246
  %194 = phi i32 [ %247, %246 ], [ %192, %191 ]
  %195 = phi i32 [ %198, %246 ], [ %161, %191 ]
  %196 = phi ptr [ %197, %246 ], [ %158, %191 ]
  %197 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 1
  %198 = add nsw i32 %195, -1
  %199 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 1, i32 10
  %200 = load i8, ptr %199, align 2, !tbaa !127
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %202, label %246

202:                                              ; preds = %193
  %203 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 1, i32 8
  %204 = load i8, ptr %203, align 4, !tbaa !29
  %205 = and i8 %204, 1
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %246, label %207

207:                                              ; preds = %202
  %208 = icmp eq i32 %194, 1
  %209 = zext i1 %208 to i32
  %210 = getelementptr %struct.BezTriple, ptr %196, i64 0, i32 10
  %211 = load i8, ptr %210, align 2, !tbaa !127
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %213, label %220

213:                                              ; preds = %207
  %214 = getelementptr %struct.BezTriple, ptr %196, i64 0, i32 8
  %215 = load i8, ptr %214, align 4, !tbaa !29
  %216 = and i8 %215, 1
  %217 = icmp eq i8 %216, 0
  %218 = select i1 %208, i32 2, i32 1
  %219 = select i1 %217, i32 %209, i32 %218
  br label %220

220:                                              ; preds = %213, %207
  %221 = phi i32 [ %209, %207 ], [ %219, %213 ]
  %222 = icmp eq i32 %198, 0
  br i1 %222, label %223, label %225

223:                                              ; preds = %220
  %224 = add nuw nsw i32 %221, 1
  br label %235

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 2, i32 10
  %227 = load i8, ptr %226, align 2, !tbaa !127
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %229, label %235

229:                                              ; preds = %225
  %230 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 2, i32 8
  %231 = load i8, ptr %230, align 4, !tbaa !29
  %232 = and i8 %231, 1
  %233 = zext i8 %232 to i32
  %234 = add nuw nsw i32 %221, %233
  br label %235

235:                                              ; preds = %229, %225, %223
  %236 = phi i32 [ %224, %223 ], [ %221, %225 ], [ %234, %229 ]
  %237 = icmp eq i32 %236, 2
  br i1 %237, label %246, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 1, i32 7
  %240 = load i8, ptr %239, align 1, !tbaa !27
  %241 = getelementptr inbounds %struct.BezTriple, ptr %196, i64 1, i32 9
  %242 = and i8 %240, -2
  store i8 %242, ptr %239, align 1, !tbaa !27
  %243 = and i8 %204, -2
  store i8 %243, ptr %203, align 4, !tbaa !29
  %244 = load i8, ptr %241, align 1, !tbaa !30
  %245 = and i8 %244, -2
  store i8 %245, ptr %241, align 1, !tbaa !30
  br label %246

246:                                              ; preds = %193, %202, %235, %238
  %247 = phi i32 [ 1, %238 ], [ 0, %235 ], [ 0, %202 ], [ 0, %193 ]
  %248 = icmp eq i32 %198, 0
  br i1 %248, label %330, label %193, !llvm.loop !339

249:                                              ; preds = %149
  %250 = getelementptr inbounds %struct.Nurb, ptr %150, i64 0, i32 7
  %251 = load i32, ptr %250, align 4, !tbaa !31
  %252 = mul nsw i32 %251, %155
  %253 = getelementptr inbounds %struct.Nurb, ptr %150, i64 0, i32 17
  %254 = load ptr, ptr %253, align 8, !tbaa !32
  %255 = icmp eq i32 %252, 0
  br i1 %255, label %330, label %256

256:                                              ; preds = %249
  %257 = add nsw i32 %252, -1
  %258 = getelementptr inbounds %struct.BPoint, ptr %254, i64 0, i32 4
  %259 = load i16, ptr %258, align 2, !tbaa !129
  %260 = icmp eq i16 %259, 0
  br i1 %260, label %261, label %279

261:                                              ; preds = %256
  %262 = getelementptr inbounds %struct.BPoint, ptr %254, i64 0, i32 3
  %263 = load i16, ptr %262, align 4, !tbaa !34
  %264 = and i16 %263, 1
  %265 = icmp eq i16 %264, 0
  br i1 %265, label %279, label %266

266:                                              ; preds = %261
  %267 = icmp eq i32 %257, 0
  br i1 %267, label %330, label %268

268:                                              ; preds = %266
  %269 = getelementptr inbounds %struct.BPoint, ptr %254, i64 1, i32 4
  %270 = load i16, ptr %269, align 2, !tbaa !129
  %271 = icmp eq i16 %270, 0
  br i1 %271, label %272, label %277

272:                                              ; preds = %268
  %273 = getelementptr inbounds %struct.BPoint, ptr %254, i64 1, i32 3
  %274 = load i16, ptr %273, align 4, !tbaa !34
  %275 = and i16 %274, 1
  %276 = icmp eq i16 %275, 0
  br i1 %276, label %277, label %281

277:                                              ; preds = %272, %268
  %278 = and i16 %263, -2
  store i16 %278, ptr %262, align 4, !tbaa !34
  br label %281

279:                                              ; preds = %261, %256
  %280 = icmp eq i32 %257, 0
  br i1 %280, label %330, label %281

281:                                              ; preds = %272, %277, %279
  %282 = phi i32 [ 1, %277 ], [ 0, %272 ], [ 0, %279 ]
  br label %283

283:                                              ; preds = %281, %327
  %284 = phi i32 [ %328, %327 ], [ %282, %281 ]
  %285 = phi i32 [ %288, %327 ], [ %257, %281 ]
  %286 = phi ptr [ %287, %327 ], [ %254, %281 ]
  %287 = getelementptr inbounds %struct.BPoint, ptr %286, i64 1
  %288 = add nsw i32 %285, -1
  %289 = icmp eq i32 %284, 0
  br i1 %289, label %290, label %327

290:                                              ; preds = %283
  %291 = getelementptr inbounds %struct.BPoint, ptr %286, i64 1, i32 4
  %292 = load i16, ptr %291, align 2, !tbaa !129
  %293 = icmp eq i16 %292, 0
  br i1 %293, label %294, label %327

294:                                              ; preds = %290
  %295 = getelementptr inbounds %struct.BPoint, ptr %286, i64 1, i32 3
  %296 = load i16, ptr %295, align 4, !tbaa !34
  %297 = and i16 %296, 1
  %298 = icmp eq i16 %297, 0
  br i1 %298, label %327, label %299

299:                                              ; preds = %294
  %300 = getelementptr %struct.BPoint, ptr %286, i64 0, i32 4
  %301 = load i16, ptr %300, align 2, !tbaa !129
  %302 = icmp eq i16 %301, 0
  br i1 %302, label %303, label %309

303:                                              ; preds = %299
  %304 = getelementptr %struct.BPoint, ptr %286, i64 0, i32 3
  %305 = load i16, ptr %304, align 4, !tbaa !34
  %306 = and i16 %305, 1
  %307 = zext i16 %306 to i32
  %308 = icmp eq i32 %288, 0
  br i1 %308, label %323, label %311

309:                                              ; preds = %299
  %310 = icmp eq i32 %288, 0
  br i1 %310, label %325, label %311

311:                                              ; preds = %309, %303
  %312 = phi i32 [ 0, %309 ], [ %307, %303 ]
  %313 = getelementptr inbounds %struct.BPoint, ptr %286, i64 2, i32 4
  %314 = load i16, ptr %313, align 2, !tbaa !129
  %315 = icmp eq i16 %314, 0
  br i1 %315, label %316, label %325

316:                                              ; preds = %311
  %317 = getelementptr inbounds %struct.BPoint, ptr %286, i64 2, i32 3
  %318 = load i16, ptr %317, align 4, !tbaa !34
  %319 = and i16 %318, 1
  %320 = icmp eq i16 %319, 0
  %321 = icmp eq i32 %312, 0
  %322 = select i1 %320, i1 true, i1 %321
  br i1 %322, label %325, label %327

323:                                              ; preds = %303
  %324 = icmp eq i16 %306, 0
  br i1 %324, label %325, label %330

325:                                              ; preds = %309, %316, %311, %323
  %326 = and i16 %296, -2
  store i16 %326, ptr %295, align 4, !tbaa !34
  br label %327

327:                                              ; preds = %316, %283, %290, %294, %325
  %328 = phi i32 [ 1, %325 ], [ 0, %294 ], [ 0, %290 ], [ 0, %283 ], [ 0, %316 ]
  %329 = icmp eq i32 %288, 0
  br i1 %329, label %330, label %283, !llvm.loop !340

330:                                              ; preds = %323, %327, %246, %266, %170, %279, %189, %249, %156
  %331 = load ptr, ptr %150, align 8, !tbaa !36
  %332 = icmp eq ptr %331, null
  br i1 %332, label %333, label %149, !llvm.loop !341

333:                                              ; preds = %330, %145, %16, %17
  %334 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %335 = load ptr, ptr %334, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %335) #20
  %336 = load ptr, ptr %334, align 8, !tbaa !17
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %336) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_select_random(ptr noundef %0) local_unnamed_addr #5 {
  store ptr @.str.149, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.150, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.151, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_select_random_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_float_percentage(ptr noundef %8, ptr noundef nonnull @.str.152, float noundef nofpclass(nan inf) 5.000000e+01, float noundef nofpclass(nan inf) 0.000000e+00, float noundef nofpclass(nan inf) 1.000000e+02, ptr noundef nonnull @.str.153, ptr noundef nonnull @.str.154, float noundef nofpclass(nan inf) 0.000000e+00, float noundef nofpclass(nan inf) 1.000000e+02) #20
  tail call void @WM_operator_properties_select_action_simple(ptr noundef nonnull %0, i32 noundef 1) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_select_random_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.Curve, ptr %12, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !18
  br label %15

15:                                               ; preds = %2, %5, %10
  %16 = phi ptr [ %14, %10 ], [ null, %5 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %18 = load ptr, ptr %17, align 8, !tbaa !178
  %19 = tail call i32 @RNA_enum_get(ptr noundef %18, ptr noundef nonnull @.str.198) #20
  %20 = icmp eq i32 %19, 1
  %21 = load ptr, ptr %17, align 8, !tbaa !178
  %22 = tail call fast nofpclass(nan inf) float @RNA_float_get(ptr noundef %21, ptr noundef nonnull @.str.152) #20
  %23 = fmul fast float %22, 0x3F847AE140000000
  %24 = load ptr, ptr %16, align 8, !tbaa !36
  %25 = icmp eq ptr %24, null
  br i1 %25, label %143, label %26

26:                                               ; preds = %15, %140
  %27 = phi ptr [ %141, %140 ], [ %24, %15 ]
  %28 = getelementptr inbounds %struct.Nurb, ptr %27, i64 0, i32 2
  %29 = load i16, ptr %28, align 8, !tbaa !21
  %30 = icmp eq i16 %29, 1
  %31 = getelementptr inbounds %struct.Nurb, ptr %27, i64 0, i32 6
  %32 = load i32, ptr %31, align 8, !tbaa !23
  br i1 %30, label %33, label %91

33:                                               ; preds = %26
  %34 = icmp eq i32 %32, 0
  br i1 %34, label %140, label %35

35:                                               ; preds = %33
  %36 = add nsw i32 %32, -1
  %37 = getelementptr inbounds %struct.Nurb, ptr %27, i64 0, i32 18
  %38 = load ptr, ptr %37, align 8, !tbaa !24
  br i1 %20, label %39, label %65

39:                                               ; preds = %35, %61
  %40 = phi i32 [ %63, %61 ], [ %36, %35 ]
  %41 = phi ptr [ %62, %61 ], [ %38, %35 ]
  %42 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 10
  %43 = load i8, ptr %42, align 2, !tbaa !127
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %61

45:                                               ; preds = %39
  %46 = tail call fast nofpclass(nan inf) float @BLI_frand() #20
  %47 = fcmp fast olt float %46, %23
  br i1 %47, label %48, label %61

48:                                               ; preds = %45
  %49 = load i8, ptr %42, align 2, !tbaa !127
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %61

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 7
  %53 = load i8, ptr %52, align 1, !tbaa !27
  %54 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 8
  %55 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 0, i32 9
  %56 = or i8 %53, 1
  store i8 %56, ptr %52, align 1, !tbaa !27
  %57 = load i8, ptr %54, align 4, !tbaa !29
  %58 = or i8 %57, 1
  store i8 %58, ptr %54, align 4, !tbaa !29
  %59 = load i8, ptr %55, align 1, !tbaa !30
  %60 = or i8 %59, 1
  store i8 %60, ptr %55, align 1, !tbaa !30
  br label %61

61:                                               ; preds = %51, %48, %45, %39
  %62 = getelementptr inbounds %struct.BezTriple, ptr %41, i64 1
  %63 = add nsw i32 %40, -1
  %64 = icmp eq i32 %40, 0
  br i1 %64, label %140, label %39, !llvm.loop !342

65:                                               ; preds = %35, %87
  %66 = phi i32 [ %89, %87 ], [ %36, %35 ]
  %67 = phi ptr [ %88, %87 ], [ %38, %35 ]
  %68 = getelementptr inbounds %struct.BezTriple, ptr %67, i64 0, i32 10
  %69 = load i8, ptr %68, align 2, !tbaa !127
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %87

71:                                               ; preds = %65
  %72 = tail call fast nofpclass(nan inf) float @BLI_frand() #20
  %73 = fcmp fast olt float %72, %23
  br i1 %73, label %74, label %87

74:                                               ; preds = %71
  %75 = load i8, ptr %68, align 2, !tbaa !127
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %87

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.BezTriple, ptr %67, i64 0, i32 7
  %79 = load i8, ptr %78, align 1, !tbaa !27
  %80 = getelementptr inbounds %struct.BezTriple, ptr %67, i64 0, i32 8
  %81 = getelementptr inbounds %struct.BezTriple, ptr %67, i64 0, i32 9
  %82 = and i8 %79, -2
  store i8 %82, ptr %78, align 1, !tbaa !27
  %83 = load i8, ptr %80, align 4, !tbaa !29
  %84 = and i8 %83, -2
  store i8 %84, ptr %80, align 4, !tbaa !29
  %85 = load i8, ptr %81, align 1, !tbaa !30
  %86 = and i8 %85, -2
  store i8 %86, ptr %81, align 1, !tbaa !30
  br label %87

87:                                               ; preds = %77, %74, %71, %65
  %88 = getelementptr inbounds %struct.BezTriple, ptr %67, i64 1
  %89 = add nsw i32 %66, -1
  %90 = icmp eq i32 %66, 0
  br i1 %90, label %140, label %65, !llvm.loop !342

91:                                               ; preds = %26
  %92 = getelementptr inbounds %struct.Nurb, ptr %27, i64 0, i32 7
  %93 = load i32, ptr %92, align 4, !tbaa !31
  %94 = mul nsw i32 %93, %32
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %140, label %96

96:                                               ; preds = %91
  %97 = add nsw i32 %94, -1
  %98 = getelementptr inbounds %struct.Nurb, ptr %27, i64 0, i32 17
  %99 = load ptr, ptr %98, align 8, !tbaa !32
  br i1 %20, label %100, label %120

100:                                              ; preds = %96, %116
  %101 = phi i32 [ %118, %116 ], [ %97, %96 ]
  %102 = phi ptr [ %117, %116 ], [ %99, %96 ]
  %103 = getelementptr inbounds %struct.BPoint, ptr %102, i64 0, i32 4
  %104 = load i16, ptr %103, align 2, !tbaa !129
  %105 = icmp eq i16 %104, 0
  br i1 %105, label %106, label %116

106:                                              ; preds = %100
  %107 = tail call fast nofpclass(nan inf) float @BLI_frand() #20
  %108 = fcmp fast olt float %107, %23
  br i1 %108, label %109, label %116

109:                                              ; preds = %106
  %110 = load i16, ptr %103, align 2, !tbaa !129
  %111 = icmp eq i16 %110, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %109
  %113 = getelementptr inbounds %struct.BPoint, ptr %102, i64 0, i32 3
  %114 = load i16, ptr %113, align 4, !tbaa !34
  %115 = or i16 %114, 1
  store i16 %115, ptr %113, align 4, !tbaa !34
  br label %116

116:                                              ; preds = %112, %109, %106, %100
  %117 = getelementptr inbounds %struct.BPoint, ptr %102, i64 1
  %118 = add nsw i32 %101, -1
  %119 = icmp eq i32 %101, 0
  br i1 %119, label %140, label %100, !llvm.loop !343

120:                                              ; preds = %96, %136
  %121 = phi i32 [ %138, %136 ], [ %97, %96 ]
  %122 = phi ptr [ %137, %136 ], [ %99, %96 ]
  %123 = getelementptr inbounds %struct.BPoint, ptr %122, i64 0, i32 4
  %124 = load i16, ptr %123, align 2, !tbaa !129
  %125 = icmp eq i16 %124, 0
  br i1 %125, label %126, label %136

126:                                              ; preds = %120
  %127 = tail call fast nofpclass(nan inf) float @BLI_frand() #20
  %128 = fcmp fast olt float %127, %23
  br i1 %128, label %129, label %136

129:                                              ; preds = %126
  %130 = load i16, ptr %123, align 2, !tbaa !129
  %131 = icmp eq i16 %130, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %129
  %133 = getelementptr inbounds %struct.BPoint, ptr %122, i64 0, i32 3
  %134 = load i16, ptr %133, align 4, !tbaa !34
  %135 = and i16 %134, -2
  store i16 %135, ptr %133, align 4, !tbaa !34
  br label %136

136:                                              ; preds = %132, %129, %126, %120
  %137 = getelementptr inbounds %struct.BPoint, ptr %122, i64 1
  %138 = add nsw i32 %121, -1
  %139 = icmp eq i32 %121, 0
  br i1 %139, label %140, label %120, !llvm.loop !343

140:                                              ; preds = %136, %116, %87, %61, %91, %33
  %141 = load ptr, ptr %27, align 8, !tbaa !36
  %142 = icmp eq ptr %141, null
  br i1 %142, label %143, label %26, !llvm.loop !344

143:                                              ; preds = %140, %15
  %144 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %145 = load ptr, ptr %144, align 8, !tbaa !17
  tail call void @BKE_curve_nurb_vert_active_validate(ptr noundef %145) #20
  %146 = load ptr, ptr %144, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %146) #20
  ret i32 4
}

declare ptr @RNA_def_float_percentage(ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), float noundef nofpclass(nan inf), ptr noundef, ptr noundef, float noundef nofpclass(nan inf), float noundef nofpclass(nan inf)) local_unnamed_addr #6

declare void @WM_operator_properties_select_action_simple(ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ED_curve_select_nth(ptr noundef %0, i32 noundef %1) local_unnamed_addr #5 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #20
  store ptr null, ptr %3, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #20
  store ptr null, ptr %4, align 8, !tbaa !36
  %5 = call zeroext i8 @BKE_curve_nurb_vert_active_get(ptr noundef %0, ptr noundef nonnull %3, ptr noundef nonnull %4) #20
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %94, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr %3, align 8, !tbaa !36
  %9 = getelementptr %struct.Nurb, ptr %8, i64 0, i32 18
  %10 = load ptr, ptr %9, align 8, !tbaa !24
  %11 = icmp eq ptr %10, null
  %12 = load ptr, ptr %4, align 8, !tbaa !36
  %13 = ptrtoint ptr %12 to i64
  br i1 %11, label %47, label %14

14:                                               ; preds = %7
  %15 = getelementptr i8, ptr %8, i64 24
  %16 = load i32, ptr %15, align 8, !tbaa !23
  %17 = ptrtoint ptr %10 to i64
  %18 = sub i64 %13, %17
  %19 = sdiv exact i64 %18, 72
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %16, 0
  br i1 %21, label %94, label %22

22:                                               ; preds = %14
  %23 = add nsw i32 %16, -1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.BezTriple, ptr %10, i64 %24
  br label %26

26:                                               ; preds = %44, %22
  %27 = phi i32 [ %29, %44 ], [ %16, %22 ]
  %28 = phi ptr [ %45, %44 ], [ %25, %22 ]
  %29 = add nsw i32 %27, -1
  %30 = sub nsw i32 %20, %29
  %31 = call i32 @llvm.abs.i32(i32 %30, i1 true)
  %32 = srem i32 %31, %1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %44, label %34

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 7
  %36 = load i8, ptr %35, align 1, !tbaa !27
  %37 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 8
  %38 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 9
  %39 = and i8 %36, -2
  store i8 %39, ptr %35, align 1, !tbaa !27
  %40 = load i8, ptr %37, align 4, !tbaa !29
  %41 = and i8 %40, -2
  store i8 %41, ptr %37, align 4, !tbaa !29
  %42 = load i8, ptr %38, align 1, !tbaa !30
  %43 = and i8 %42, -2
  store i8 %43, ptr %38, align 1, !tbaa !30
  br label %44

44:                                               ; preds = %34, %26
  %45 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 -1
  %46 = icmp eq i32 %29, 0
  br i1 %46, label %94, label %26, !llvm.loop !345

47:                                               ; preds = %7
  %48 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 17
  %49 = load ptr, ptr %48, align 8, !tbaa !32
  %50 = ptrtoint ptr %49 to i64
  %51 = sub i64 %13, %50
  %52 = sdiv exact i64 %51, 36
  %53 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 6
  %54 = load i32, ptr %53, align 8, !tbaa !23
  %55 = sext i32 %54 to i64
  %56 = sdiv i64 %52, %55
  %57 = trunc i64 %56 to i32
  %58 = srem i64 %52, %55
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 7
  %61 = load i32, ptr %60, align 4, !tbaa !31
  %62 = mul nsw i32 %61, %54
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %94, label %64

64:                                               ; preds = %47
  %65 = add nsw i32 %61, -1
  %66 = add nsw i32 %62, -1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.BPoint, ptr %49, i64 %67
  br label %69

69:                                               ; preds = %87, %64
  %70 = phi i32 [ %75, %87 ], [ %62, %64 ]
  %71 = phi i32 [ %91, %87 ], [ %54, %64 ]
  %72 = phi i32 [ %90, %87 ], [ %65, %64 ]
  %73 = phi ptr [ %92, %87 ], [ %68, %64 ]
  %74 = add nsw i32 %71, -1
  %75 = add nsw i32 %70, -1
  %76 = sub nsw i32 %74, %59
  %77 = call i32 @llvm.abs.i32(i32 %76, i1 true)
  %78 = sub nsw i32 %72, %57
  %79 = call i32 @llvm.abs.i32(i32 %78, i1 true)
  %80 = add nuw nsw i32 %77, %79
  %81 = srem i32 %80, %1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %69
  %84 = getelementptr inbounds %struct.BPoint, ptr %73, i64 0, i32 3
  %85 = load i16, ptr %84, align 4, !tbaa !34
  %86 = and i16 %85, -2
  store i16 %86, ptr %84, align 4, !tbaa !34
  br label %87

87:                                               ; preds = %83, %69
  %88 = icmp slt i32 %71, 2
  %89 = sext i1 %88 to i32
  %90 = add nsw i32 %72, %89
  %91 = select i1 %88, i32 %54, i32 %74
  %92 = getelementptr inbounds %struct.BPoint, ptr %73, i64 -1
  %93 = icmp eq i32 %75, 0
  br i1 %93, label %94, label %69, !llvm.loop !346

94:                                               ; preds = %44, %87, %47, %14, %2
  %95 = phi i8 [ 0, %2 ], [ 1, %14 ], [ 1, %47 ], [ 1, %87 ], [ 1, %44 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #20
  ret i8 %95
}

declare zeroext i8 @BKE_curve_nurb_vert_active_get(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_select_nth(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.155, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.156, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.157, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @select_nth_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %8 = load ptr, ptr %7, align 8, !tbaa !177
  %9 = tail call ptr @RNA_def_int(ptr noundef %8, ptr noundef nonnull @.str.158, i32 noundef 2, i32 noundef 2, i32 noundef 2147483647, ptr noundef nonnull @.str.159, ptr noundef nonnull @.str.18, i32 noundef 2, i32 noundef 100) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @select_nth_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %5 = load ptr, ptr %4, align 8, !tbaa !178
  %6 = tail call i32 @RNA_int_get(ptr noundef %5, ptr noundef nonnull @.str.158) #20
  %7 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = tail call zeroext i8 @ED_curve_select_nth(ptr noundef %8, i32 noundef %6), !range !273
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %13 = load i16, ptr %12, align 8, !tbaa !5
  %14 = icmp eq i16 %13, 3
  %15 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %16 = load ptr, ptr %15, align 8, !tbaa !150
  br i1 %14, label %17, label %18

17:                                               ; preds = %11
  tail call void @BKE_report(ptr noundef %16, i32 noundef 32, ptr noundef nonnull @.str.220) #20
  br label %21

18:                                               ; preds = %11
  tail call void @BKE_report(ptr noundef %16, i32 noundef 32, ptr noundef nonnull @.str.221) #20
  br label %21

19:                                               ; preds = %2
  %20 = load ptr, ptr %7, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %20) #20
  br label %21

21:                                               ; preds = %17, %18, %19
  %22 = phi i32 [ 4, %19 ], [ 2, %18 ], [ 2, %17 ]
  ret i32 %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_duplicate(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.160, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.161, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.162, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @duplicate_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @duplicate_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  call fastcc void @adduplicateflagNurb(ptr noundef %4, ptr noundef nonnull %3, i8 noundef zeroext 0)
  %5 = load ptr, ptr %3, align 8, !tbaa !56
  %6 = icmp eq ptr %5, null
  br i1 %6, label %23, label %7

7:                                                ; preds = %2
  %8 = icmp eq ptr %4, null
  br i1 %8, label %19, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 3
  %11 = load i16, ptr %10, align 8, !tbaa !5
  %12 = and i16 %11, -2
  %13 = icmp eq i16 %12, 2
  br i1 %13, label %14, label %19

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 19
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.Curve, ptr %16, i64 0, i32 4
  %18 = load ptr, ptr %17, align 8, !tbaa !18
  br label %19

19:                                               ; preds = %7, %9, %14
  %20 = phi ptr [ %18, %14 ], [ null, %9 ], [ null, %7 ]
  call void @BLI_movelisttolist(ptr noundef %20, ptr noundef nonnull %3) #20
  %21 = getelementptr inbounds %struct.Object, ptr %4, i64 0, i32 19
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274333696, ptr noundef %22) #20
  br label %26

23:                                               ; preds = %2
  %24 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %25 = load ptr, ptr %24, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %25, i32 noundef 32, ptr noundef nonnull @.str.222) #20
  br label %26

26:                                               ; preds = %19, %23
  %27 = phi i32 [ 4, %19 ], [ 2, %23 ]
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  ret i32 %27
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @CURVE_OT_delete(ptr nocapture noundef %0) local_unnamed_addr #5 {
  store ptr @.str.163, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.164, ptr %2, align 8, !tbaa !144
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.165, ptr %3, align 8, !tbaa !143
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @curve_delete_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 6
  store ptr @WM_menu_invoke, ptr %5, align 8, !tbaa !176
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %6, align 8, !tbaa !146
  %7 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %7, align 8, !tbaa !147
  %8 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 11
  %9 = load ptr, ptr %8, align 8, !tbaa !177
  %10 = tail call ptr @RNA_def_enum(ptr noundef %9, ptr noundef nonnull @.str.67, ptr noundef nonnull @curve_delete_type_items, i32 noundef 0, ptr noundef nonnull @.str.68, ptr noundef nonnull @.str.166) #20
  tail call void @RNA_def_enum_funcs(ptr noundef %10, ptr noundef nonnull @rna_curve_delete_type_itemf) #20
  %11 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 13
  store ptr %10, ptr %11, align 8, !tbaa !233
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @curve_delete_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 7
  %7 = load ptr, ptr %6, align 8, !tbaa !178
  %8 = tail call i32 @RNA_enum_get(ptr noundef %7, ptr noundef nonnull @.str.67) #20
  switch i32 %8, label %895 [
    i32 0, label %9
    i32 1, label %863
  ]

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %11 = load i16, ptr %10, align 8, !tbaa !5
  %12 = icmp eq i16 %11, 3
  %13 = load ptr, ptr %4, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !18
  %16 = load ptr, ptr %15, align 8, !tbaa !56
  %17 = icmp eq ptr %16, null
  br i1 %12, label %18, label %475

18:                                               ; preds = %9
  br i1 %17, label %865, label %19

19:                                               ; preds = %18, %473
  %20 = phi ptr [ %21, %473 ], [ %16, %18 ]
  %21 = load ptr, ptr %20, align 8, !tbaa !120
  %22 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 17
  %23 = load ptr, ptr %22, align 8, !tbaa !32
  %24 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 6
  %25 = load i32, ptr %24, align 8, !tbaa !23
  %26 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 7
  %27 = load i32, ptr %26, align 4, !tbaa !31
  %28 = mul nsw i32 %27, %25
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %43, label %33

30:                                               ; preds = %33
  %31 = getelementptr inbounds %struct.BPoint, ptr %35, i64 1
  %32 = icmp eq i32 %36, 0
  br i1 %32, label %43, label %33, !llvm.loop !347

33:                                               ; preds = %19, %30
  %34 = phi i32 [ %36, %30 ], [ %28, %19 ]
  %35 = phi ptr [ %31, %30 ], [ %23, %19 ]
  %36 = add nsw i32 %34, -1
  %37 = getelementptr inbounds %struct.BPoint, ptr %35, i64 0, i32 3
  %38 = load i16, ptr %37, align 4, !tbaa !34
  %39 = and i16 %38, 1
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %41, label %30

41:                                               ; preds = %33
  %42 = icmp eq i32 %36, 0
  br i1 %42, label %43, label %80

43:                                               ; preds = %30, %41, %19
  tail call void @BLI_remlink(ptr noundef nonnull %15, ptr noundef nonnull %20) #20
  %44 = load ptr, ptr %14, align 8, !tbaa !18
  %45 = getelementptr inbounds %struct.EditNurb, ptr %44, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !47
  %47 = icmp eq ptr %46, null
  br i1 %47, label %79, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 18
  %50 = load ptr, ptr %49, align 8, !tbaa !24
  %51 = icmp eq ptr %50, null
  %52 = load i32, ptr %24, align 8, !tbaa !23
  br i1 %51, label %64, label %53

53:                                               ; preds = %48
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %79, label %55

55:                                               ; preds = %53, %55
  %56 = phi ptr [ %62, %55 ], [ %50, %53 ]
  %57 = phi i32 [ %58, %55 ], [ %52, %53 ]
  %58 = add nsw i32 %57, -1
  %59 = load ptr, ptr %45, align 8, !tbaa !47
  %60 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %61 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %59, ptr noundef nonnull %56, ptr noundef null, ptr noundef %60) #20
  %62 = getelementptr inbounds %struct.BezTriple, ptr %56, i64 1
  %63 = icmp eq i32 %58, 0
  br i1 %63, label %79, label %55, !llvm.loop !261

64:                                               ; preds = %48
  %65 = load i32, ptr %26, align 4, !tbaa !31
  %66 = mul nsw i32 %65, %52
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %64
  %69 = load ptr, ptr %22, align 8, !tbaa !32
  br label %70

70:                                               ; preds = %70, %68
  %71 = phi ptr [ %77, %70 ], [ %69, %68 ]
  %72 = phi i32 [ %73, %70 ], [ %66, %68 ]
  %73 = add nsw i32 %72, -1
  %74 = load ptr, ptr %45, align 8, !tbaa !47
  %75 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %76 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %74, ptr noundef %71, ptr noundef null, ptr noundef %75) #20
  %77 = getelementptr inbounds %struct.BPoint, ptr %71, i64 1
  %78 = icmp eq i32 %73, 0
  br i1 %78, label %79, label %70, !llvm.loop !262

79:                                               ; preds = %55, %70, %64, %53, %43
  tail call void @BKE_nurb_free(ptr noundef nonnull %20) #20
  br label %473

80:                                               ; preds = %41
  %81 = icmp sgt i32 %27, 0
  br i1 %81, label %82, label %473

82:                                               ; preds = %80
  %83 = icmp sgt i32 %25, 0
  br i1 %83, label %84, label %253

84:                                               ; preds = %82
  %85 = zext i32 %25 to i64
  %86 = icmp ult i32 %25, 16
  %87 = and i64 %85, 4294967280
  %88 = trunc i64 %87 to i32
  %89 = mul nuw nsw i64 %87, 36
  %90 = icmp eq i64 %87, %85
  br label %91

91:                                               ; preds = %84, %242
  %92 = phi i32 [ %243, %242 ], [ 0, %84 ]
  %93 = phi i32 [ %244, %242 ], [ 0, %84 ]
  %94 = phi i32 [ %245, %242 ], [ 0, %84 ]
  %95 = phi ptr [ %236, %242 ], [ %23, %84 ]
  br i1 %86, label %218, label %96

96:                                               ; preds = %91
  %97 = getelementptr i8, ptr %95, i64 %89
  %98 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %99 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %100 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %101 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %102 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %103 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %104 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %105 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %106 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %107 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %108 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %109 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %110 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %111 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %112 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  %113 = getelementptr %struct.BPoint, ptr %95, i64 0, i32 3
  br label %114

114:                                              ; preds = %114, %96
  %115 = phi i64 [ 0, %96 ], [ %211, %114 ]
  %116 = phi <4 x i32> [ zeroinitializer, %96 ], [ %207, %114 ]
  %117 = phi <4 x i32> [ zeroinitializer, %96 ], [ %208, %114 ]
  %118 = phi <4 x i32> [ zeroinitializer, %96 ], [ %209, %114 ]
  %119 = phi <4 x i32> [ zeroinitializer, %96 ], [ %210, %114 ]
  %120 = mul i64 %115, 36
  %121 = mul i64 %115, 36
  %122 = or i64 %121, 36
  %123 = mul i64 %115, 36
  %124 = add i64 %123, 72
  %125 = mul i64 %115, 36
  %126 = add i64 %125, 108
  %127 = mul i64 %115, 36
  %128 = add i64 %127, 144
  %129 = mul i64 %115, 36
  %130 = add i64 %129, 180
  %131 = mul i64 %115, 36
  %132 = add i64 %131, 216
  %133 = mul i64 %115, 36
  %134 = add i64 %133, 252
  %135 = mul i64 %115, 36
  %136 = add i64 %135, 288
  %137 = mul i64 %115, 36
  %138 = add i64 %137, 324
  %139 = mul i64 %115, 36
  %140 = add i64 %139, 360
  %141 = mul i64 %115, 36
  %142 = add i64 %141, 396
  %143 = mul i64 %115, 36
  %144 = add i64 %143, 432
  %145 = mul i64 %115, 36
  %146 = add i64 %145, 468
  %147 = mul i64 %115, 36
  %148 = add i64 %147, 504
  %149 = mul i64 %115, 36
  %150 = add i64 %149, 540
  %151 = getelementptr i8, ptr %98, i64 %120
  %152 = getelementptr i8, ptr %99, i64 %122
  %153 = getelementptr i8, ptr %100, i64 %124
  %154 = getelementptr i8, ptr %101, i64 %126
  %155 = getelementptr i8, ptr %102, i64 %128
  %156 = getelementptr i8, ptr %103, i64 %130
  %157 = getelementptr i8, ptr %104, i64 %132
  %158 = getelementptr i8, ptr %105, i64 %134
  %159 = getelementptr i8, ptr %106, i64 %136
  %160 = getelementptr i8, ptr %107, i64 %138
  %161 = getelementptr i8, ptr %108, i64 %140
  %162 = getelementptr i8, ptr %109, i64 %142
  %163 = getelementptr i8, ptr %110, i64 %144
  %164 = getelementptr i8, ptr %111, i64 %146
  %165 = getelementptr i8, ptr %112, i64 %148
  %166 = getelementptr i8, ptr %113, i64 %150
  %167 = load i16, ptr %151, align 4, !tbaa !34
  %168 = load i16, ptr %152, align 4, !tbaa !34
  %169 = load i16, ptr %153, align 4, !tbaa !34
  %170 = load i16, ptr %154, align 4, !tbaa !34
  %171 = insertelement <4 x i16> poison, i16 %167, i64 0
  %172 = insertelement <4 x i16> %171, i16 %168, i64 1
  %173 = insertelement <4 x i16> %172, i16 %169, i64 2
  %174 = insertelement <4 x i16> %173, i16 %170, i64 3
  %175 = load i16, ptr %155, align 4, !tbaa !34
  %176 = load i16, ptr %156, align 4, !tbaa !34
  %177 = load i16, ptr %157, align 4, !tbaa !34
  %178 = load i16, ptr %158, align 4, !tbaa !34
  %179 = insertelement <4 x i16> poison, i16 %175, i64 0
  %180 = insertelement <4 x i16> %179, i16 %176, i64 1
  %181 = insertelement <4 x i16> %180, i16 %177, i64 2
  %182 = insertelement <4 x i16> %181, i16 %178, i64 3
  %183 = load i16, ptr %159, align 4, !tbaa !34
  %184 = load i16, ptr %160, align 4, !tbaa !34
  %185 = load i16, ptr %161, align 4, !tbaa !34
  %186 = load i16, ptr %162, align 4, !tbaa !34
  %187 = insertelement <4 x i16> poison, i16 %183, i64 0
  %188 = insertelement <4 x i16> %187, i16 %184, i64 1
  %189 = insertelement <4 x i16> %188, i16 %185, i64 2
  %190 = insertelement <4 x i16> %189, i16 %186, i64 3
  %191 = load i16, ptr %163, align 4, !tbaa !34
  %192 = load i16, ptr %164, align 4, !tbaa !34
  %193 = load i16, ptr %165, align 4, !tbaa !34
  %194 = load i16, ptr %166, align 4, !tbaa !34
  %195 = insertelement <4 x i16> poison, i16 %191, i64 0
  %196 = insertelement <4 x i16> %195, i16 %192, i64 1
  %197 = insertelement <4 x i16> %196, i16 %193, i64 2
  %198 = insertelement <4 x i16> %197, i16 %194, i64 3
  %199 = and <4 x i16> %174, <i16 1, i16 1, i16 1, i16 1>
  %200 = and <4 x i16> %182, <i16 1, i16 1, i16 1, i16 1>
  %201 = and <4 x i16> %190, <i16 1, i16 1, i16 1, i16 1>
  %202 = and <4 x i16> %198, <i16 1, i16 1, i16 1, i16 1>
  %203 = zext <4 x i16> %199 to <4 x i32>
  %204 = zext <4 x i16> %200 to <4 x i32>
  %205 = zext <4 x i16> %201 to <4 x i32>
  %206 = zext <4 x i16> %202 to <4 x i32>
  %207 = add <4 x i32> %116, %203
  %208 = add <4 x i32> %117, %204
  %209 = add <4 x i32> %118, %205
  %210 = add <4 x i32> %119, %206
  %211 = add nuw i64 %115, 16
  %212 = icmp eq i64 %211, %87
  br i1 %212, label %213, label %114, !llvm.loop !348

213:                                              ; preds = %114
  %214 = add <4 x i32> %208, %207
  %215 = add <4 x i32> %209, %214
  %216 = add <4 x i32> %210, %215
  %217 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %216)
  br i1 %90, label %234, label %218

218:                                              ; preds = %91, %213
  %219 = phi i32 [ 0, %91 ], [ %217, %213 ]
  %220 = phi i32 [ 0, %91 ], [ %88, %213 ]
  %221 = phi ptr [ %95, %91 ], [ %97, %213 ]
  br label %222

222:                                              ; preds = %218, %222
  %223 = phi i32 [ %230, %222 ], [ %219, %218 ]
  %224 = phi i32 [ %231, %222 ], [ %220, %218 ]
  %225 = phi ptr [ %232, %222 ], [ %221, %218 ]
  %226 = getelementptr inbounds %struct.BPoint, ptr %225, i64 0, i32 3
  %227 = load i16, ptr %226, align 4, !tbaa !34
  %228 = and i16 %227, 1
  %229 = zext i16 %228 to i32
  %230 = add nuw nsw i32 %223, %229
  %231 = add nuw nsw i32 %224, 1
  %232 = getelementptr inbounds %struct.BPoint, ptr %225, i64 1
  %233 = icmp eq i32 %231, %25
  br i1 %233, label %234, label %222, !llvm.loop !349

234:                                              ; preds = %222, %213
  %235 = phi i32 [ %217, %213 ], [ %230, %222 ]
  %236 = phi ptr [ %97, %213 ], [ %232, %222 ]
  %237 = icmp eq i32 %235, %25
  br i1 %237, label %240, label %238

238:                                              ; preds = %234
  %239 = icmp eq i32 %235, 0
  br i1 %239, label %242, label %247

240:                                              ; preds = %234
  %241 = add nsw i32 %93, 1
  br label %242

242:                                              ; preds = %240, %238
  %243 = phi i32 [ %241, %240 ], [ %92, %238 ]
  %244 = phi i32 [ %241, %240 ], [ %93, %238 ]
  %245 = add nuw nsw i32 %94, 1
  %246 = icmp eq i32 %245, %27
  br i1 %246, label %255, label %91, !llvm.loop !350

247:                                              ; preds = %238
  %248 = sext i32 %25 to i64
  %249 = and i32 %27, 3
  %250 = icmp ult i32 %27, 4
  %251 = and i32 %27, -4
  %252 = icmp eq i32 %249, 0
  br label %326

253:                                              ; preds = %82
  %254 = icmp eq i32 %25, 0
  br i1 %254, label %258, label %473

255:                                              ; preds = %242
  %256 = sub nsw i32 %27, %243
  %257 = icmp eq i32 %243, 0
  br i1 %257, label %473, label %258

258:                                              ; preds = %255, %253
  %259 = phi i32 [ %256, %255 ], [ 0, %253 ]
  %260 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %261 = mul nsw i32 %259, %25
  %262 = sext i32 %261 to i64
  %263 = mul nsw i64 %262, 36
  %264 = tail call ptr %260(i64 noundef %263, ptr noundef nonnull @.str.223) #20
  %265 = load i32, ptr %26, align 4, !tbaa !31
  %266 = icmp sgt i32 %265, 0
  br i1 %266, label %267, label %322

267:                                              ; preds = %258, %314
  %268 = phi i32 [ %319, %314 ], [ 0, %258 ]
  %269 = phi ptr [ %315, %314 ], [ %264, %258 ]
  %270 = phi ptr [ %318, %314 ], [ %23, %258 ]
  %271 = getelementptr inbounds %struct.BPoint, ptr %270, i64 0, i32 3
  %272 = load i16, ptr %271, align 4, !tbaa !34
  %273 = and i16 %272, 1
  %274 = icmp eq i16 %273, 0
  br i1 %274, label %275, label %306

275:                                              ; preds = %267
  %276 = load i32, ptr %24, align 8, !tbaa !23
  %277 = sext i32 %276 to i64
  %278 = mul nsw i64 %277, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %269, ptr nonnull align 4 %270, i64 %278, i1 false)
  %279 = load ptr, ptr %14, align 8, !tbaa !18
  %280 = load i32, ptr %24, align 8, !tbaa !23
  %281 = getelementptr %struct.EditNurb, ptr %279, i64 0, i32 1
  %282 = load ptr, ptr %281, align 8, !tbaa !47
  %283 = icmp ne ptr %282, null
  %284 = icmp sgt i32 %280, 0
  %285 = and i1 %284, %283
  br i1 %285, label %286, label %302

286:                                              ; preds = %275, %295
  %287 = phi ptr [ %297, %295 ], [ %270, %275 ]
  %288 = phi i32 [ %298, %295 ], [ 0, %275 ]
  %289 = phi ptr [ %296, %295 ], [ %269, %275 ]
  %290 = load ptr, ptr %281, align 8, !tbaa !47
  %291 = tail call ptr @BLI_ghash_popkey(ptr noundef %290, ptr noundef nonnull %287, ptr noundef null) #20
  %292 = icmp eq ptr %291, null
  br i1 %292, label %295, label %293

293:                                              ; preds = %286
  %294 = load ptr, ptr %281, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %294, ptr noundef %289, ptr noundef nonnull %291) #20
  br label %295

295:                                              ; preds = %293, %286
  %296 = getelementptr inbounds i8, ptr %289, i64 36
  %297 = getelementptr inbounds i8, ptr %287, i64 36
  %298 = add nuw nsw i32 %288, 1
  %299 = icmp eq i32 %298, %280
  br i1 %299, label %300, label %286, !llvm.loop !157

300:                                              ; preds = %295
  %301 = load i32, ptr %24, align 8, !tbaa !23
  br label %302

302:                                              ; preds = %300, %275
  %303 = phi i32 [ %301, %300 ], [ %280, %275 ]
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds %struct.BPoint, ptr %269, i64 %304
  br label %314

306:                                              ; preds = %267
  %307 = load ptr, ptr %14, align 8, !tbaa !18
  %308 = getelementptr i8, ptr %307, i64 16
  %309 = load ptr, ptr %308, align 8, !tbaa !47
  %310 = icmp eq ptr %309, null
  br i1 %310, label %314, label %311

311:                                              ; preds = %306
  %312 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %313 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef nonnull %309, ptr noundef nonnull %270, ptr noundef null, ptr noundef %312) #20
  br label %314

314:                                              ; preds = %311, %306, %302
  %315 = phi ptr [ %305, %302 ], [ %269, %306 ], [ %269, %311 ]
  %316 = load i32, ptr %24, align 8, !tbaa !23
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds %struct.BPoint, ptr %270, i64 %317
  %319 = add nuw nsw i32 %268, 1
  %320 = load i32, ptr %26, align 4, !tbaa !31
  %321 = icmp slt i32 %319, %320
  br i1 %321, label %267, label %322, !llvm.loop !351

322:                                              ; preds = %314, %258
  store i32 %259, ptr %26, align 4, !tbaa !31
  %323 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %324 = load ptr, ptr %22, align 8, !tbaa !32
  tail call void %323(ptr noundef %324) #20
  store ptr %264, ptr %22, align 8, !tbaa !32
  %325 = tail call zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef nonnull %20) #20
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %20) #20
  br label %473

326:                                              ; preds = %384, %247
  %327 = phi i32 [ %385, %384 ], [ 0, %247 ]
  %328 = phi i32 [ %386, %384 ], [ 0, %247 ]
  %329 = phi i64 [ %387, %384 ], [ 0, %247 ]
  %330 = getelementptr inbounds %struct.BPoint, ptr %23, i64 %329
  br i1 %250, label %361, label %331

331:                                              ; preds = %326, %331
  %332 = phi i32 [ %357, %331 ], [ 0, %326 ]
  %333 = phi ptr [ %358, %331 ], [ %330, %326 ]
  %334 = phi i32 [ %359, %331 ], [ 0, %326 ]
  %335 = getelementptr inbounds %struct.BPoint, ptr %333, i64 0, i32 3
  %336 = load i16, ptr %335, align 4, !tbaa !34
  %337 = and i16 %336, 1
  %338 = zext i16 %337 to i32
  %339 = add nuw nsw i32 %332, %338
  %340 = getelementptr inbounds %struct.BPoint, ptr %333, i64 %248
  %341 = getelementptr inbounds %struct.BPoint, ptr %333, i64 %248, i32 3
  %342 = load i16, ptr %341, align 4, !tbaa !34
  %343 = and i16 %342, 1
  %344 = zext i16 %343 to i32
  %345 = add nuw nsw i32 %339, %344
  %346 = getelementptr inbounds %struct.BPoint, ptr %340, i64 %248
  %347 = getelementptr inbounds %struct.BPoint, ptr %340, i64 %248, i32 3
  %348 = load i16, ptr %347, align 4, !tbaa !34
  %349 = and i16 %348, 1
  %350 = zext i16 %349 to i32
  %351 = add nuw nsw i32 %345, %350
  %352 = getelementptr inbounds %struct.BPoint, ptr %346, i64 %248
  %353 = getelementptr inbounds %struct.BPoint, ptr %346, i64 %248, i32 3
  %354 = load i16, ptr %353, align 4, !tbaa !34
  %355 = and i16 %354, 1
  %356 = zext i16 %355 to i32
  %357 = add nuw nsw i32 %351, %356
  %358 = getelementptr inbounds %struct.BPoint, ptr %352, i64 %248
  %359 = add i32 %334, 4
  %360 = icmp eq i32 %359, %251
  br i1 %360, label %361, label %331, !llvm.loop !352

361:                                              ; preds = %331, %326
  %362 = phi i32 [ undef, %326 ], [ %357, %331 ]
  %363 = phi i32 [ 0, %326 ], [ %357, %331 ]
  %364 = phi ptr [ %330, %326 ], [ %358, %331 ]
  br i1 %252, label %377, label %365

365:                                              ; preds = %361, %365
  %366 = phi i32 [ %373, %365 ], [ %363, %361 ]
  %367 = phi ptr [ %374, %365 ], [ %364, %361 ]
  %368 = phi i32 [ %375, %365 ], [ 0, %361 ]
  %369 = getelementptr inbounds %struct.BPoint, ptr %367, i64 0, i32 3
  %370 = load i16, ptr %369, align 4, !tbaa !34
  %371 = and i16 %370, 1
  %372 = zext i16 %371 to i32
  %373 = add nuw nsw i32 %366, %372
  %374 = getelementptr inbounds %struct.BPoint, ptr %367, i64 %248
  %375 = add i32 %368, 1
  %376 = icmp eq i32 %375, %249
  br i1 %376, label %377, label %365, !llvm.loop !353

377:                                              ; preds = %365, %361
  %378 = phi i32 [ %362, %361 ], [ %373, %365 ]
  %379 = icmp eq i32 %378, %27
  br i1 %379, label %380, label %382

380:                                              ; preds = %377
  %381 = add nsw i32 %328, 1
  br label %384

382:                                              ; preds = %377
  %383 = icmp eq i32 %378, 0
  br i1 %383, label %384, label %473

384:                                              ; preds = %382, %380
  %385 = phi i32 [ %381, %380 ], [ %327, %382 ]
  %386 = phi i32 [ %381, %380 ], [ %328, %382 ]
  %387 = add nuw nsw i64 %329, 1
  %388 = icmp eq i64 %387, %248
  br i1 %388, label %389, label %326, !llvm.loop !354

389:                                              ; preds = %384
  %390 = sub nsw i32 %25, %385
  %391 = icmp eq i32 %385, 0
  br i1 %391, label %473, label %392

392:                                              ; preds = %389
  %393 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %394 = mul nsw i32 %390, %27
  %395 = sext i32 %394 to i64
  %396 = mul nsw i64 %395, 36
  %397 = tail call ptr %393(i64 noundef %396, ptr noundef nonnull @.str.223) #20
  %398 = load i32, ptr %26, align 4, !tbaa !31
  %399 = icmp sgt i32 %398, 0
  br i1 %399, label %400, label %452

400:                                              ; preds = %392
  %401 = load i32, ptr %24, align 8, !tbaa !23
  br label %402

402:                                              ; preds = %445, %400
  %403 = phi i32 [ %446, %445 ], [ %398, %400 ]
  %404 = phi i32 [ %447, %445 ], [ %401, %400 ]
  %405 = phi i32 [ %450, %445 ], [ 0, %400 ]
  %406 = phi ptr [ %449, %445 ], [ %397, %400 ]
  %407 = phi ptr [ %448, %445 ], [ %23, %400 ]
  %408 = icmp sgt i32 %404, 0
  br i1 %408, label %409, label %445

409:                                              ; preds = %402, %437
  %410 = phi i32 [ %439, %437 ], [ 0, %402 ]
  %411 = phi ptr [ %438, %437 ], [ %406, %402 ]
  %412 = phi ptr [ %440, %437 ], [ %407, %402 ]
  %413 = getelementptr inbounds %struct.BPoint, ptr %412, i64 0, i32 3
  %414 = load i16, ptr %413, align 4, !tbaa !34
  %415 = and i16 %414, 1
  %416 = icmp eq i16 %415, 0
  br i1 %416, label %417, label %429

417:                                              ; preds = %409
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %411, ptr noundef nonnull align 4 dereferenceable(36) %412, i64 36, i1 false), !tbaa.struct !168
  %418 = load ptr, ptr %14, align 8, !tbaa !18
  %419 = getelementptr %struct.EditNurb, ptr %418, i64 0, i32 1
  %420 = load ptr, ptr %419, align 8, !tbaa !47
  %421 = icmp eq ptr %420, null
  br i1 %421, label %427, label %422

422:                                              ; preds = %417
  %423 = tail call ptr @BLI_ghash_popkey(ptr noundef nonnull %420, ptr noundef nonnull %412, ptr noundef null) #20
  %424 = icmp eq ptr %423, null
  br i1 %424, label %427, label %425

425:                                              ; preds = %422
  %426 = load ptr, ptr %419, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %426, ptr noundef nonnull %411, ptr noundef nonnull %423) #20
  br label %427

427:                                              ; preds = %425, %422, %417
  %428 = getelementptr inbounds %struct.BPoint, ptr %411, i64 1
  br label %437

429:                                              ; preds = %409
  %430 = load ptr, ptr %14, align 8, !tbaa !18
  %431 = getelementptr i8, ptr %430, i64 16
  %432 = load ptr, ptr %431, align 8, !tbaa !47
  %433 = icmp eq ptr %432, null
  br i1 %433, label %437, label %434

434:                                              ; preds = %429
  %435 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %436 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef nonnull %432, ptr noundef nonnull %412, ptr noundef null, ptr noundef %435) #20
  br label %437

437:                                              ; preds = %434, %429, %427
  %438 = phi ptr [ %428, %427 ], [ %411, %429 ], [ %411, %434 ]
  %439 = add nuw nsw i32 %410, 1
  %440 = getelementptr inbounds %struct.BPoint, ptr %412, i64 1
  %441 = load i32, ptr %24, align 8, !tbaa !23
  %442 = icmp slt i32 %439, %441
  br i1 %442, label %409, label %443, !llvm.loop !355

443:                                              ; preds = %437
  %444 = load i32, ptr %26, align 4, !tbaa !31
  br label %445

445:                                              ; preds = %443, %402
  %446 = phi i32 [ %403, %402 ], [ %444, %443 ]
  %447 = phi i32 [ %404, %402 ], [ %441, %443 ]
  %448 = phi ptr [ %407, %402 ], [ %440, %443 ]
  %449 = phi ptr [ %406, %402 ], [ %438, %443 ]
  %450 = add nuw nsw i32 %405, 1
  %451 = icmp slt i32 %450, %446
  br i1 %451, label %402, label %452, !llvm.loop !356

452:                                              ; preds = %445, %392
  %453 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %454 = load ptr, ptr %22, align 8, !tbaa !32
  tail call void %453(ptr noundef %454) #20
  store ptr %397, ptr %22, align 8, !tbaa !32
  %455 = icmp eq i32 %390, 1
  br i1 %455, label %456, label %470

456:                                              ; preds = %452
  %457 = load i32, ptr %26, align 4, !tbaa !31
  %458 = icmp sgt i32 %457, 1
  br i1 %458, label %459, label %470

459:                                              ; preds = %456
  store i32 %457, ptr %24, align 8, !tbaa !23
  store i32 1, ptr %26, align 4, !tbaa !31
  %460 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 11
  %461 = load <2 x i16>, ptr %460, align 8, !tbaa !170
  %462 = shufflevector <2 x i16> %461, <2 x i16> poison, <2 x i32> <i32 1, i32 0>
  store <2 x i16> %462, ptr %460, align 8, !tbaa !170
  %463 = tail call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %20) #20
  %464 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 16
  %465 = load ptr, ptr %464, align 8, !tbaa !42
  %466 = icmp eq ptr %465, null
  br i1 %466, label %469, label %467

467:                                              ; preds = %459
  %468 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %468(ptr noundef nonnull %465) #20
  br label %469

469:                                              ; preds = %467, %459
  store ptr null, ptr %464, align 8, !tbaa !42
  br label %472

470:                                              ; preds = %456, %452
  store i32 %390, ptr %24, align 8, !tbaa !23
  %471 = tail call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %20) #20
  br label %472

472:                                              ; preds = %470, %469
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %20) #20
  br label %473

473:                                              ; preds = %382, %472, %389, %322, %255, %253, %80, %79
  %474 = icmp eq ptr %21, null
  br i1 %474, label %865, label %19, !llvm.loop !357

475:                                              ; preds = %9
  br i1 %17, label %865, label %476

476:                                              ; preds = %475
  %477 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 31
  %478 = getelementptr %struct.EditNurb, ptr %15, i64 0, i32 1
  %479 = getelementptr inbounds %struct.Curve, ptr %13, i64 0, i32 16
  br label %480

480:                                              ; preds = %626, %476
  %481 = phi i32 [ 0, %476 ], [ %627, %626 ]
  %482 = phi ptr [ %16, %476 ], [ %483, %626 ]
  %483 = load ptr, ptr %482, align 8, !tbaa !120
  %484 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 2
  %485 = load i16, ptr %484, align 8, !tbaa !21
  %486 = icmp eq i16 %485, 1
  %487 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 6
  %488 = load i32, ptr %487, align 8, !tbaa !23
  br i1 %486, label %489, label %568

489:                                              ; preds = %480
  %490 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 18
  %491 = icmp eq i32 %488, 0
  br i1 %491, label %626, label %492

492:                                              ; preds = %489
  %493 = load ptr, ptr %490, align 8, !tbaa !24
  %494 = load i16, ptr %479, align 8, !tbaa !198
  %495 = and i16 %494, 1
  %496 = icmp eq i16 %495, 0
  br i1 %496, label %497, label %518

497:                                              ; preds = %492, %514
  %498 = phi i32 [ %515, %514 ], [ %488, %492 ]
  %499 = phi ptr [ %516, %514 ], [ %493, %492 ]
  %500 = getelementptr inbounds %struct.BezTriple, ptr %499, i64 0, i32 8
  %501 = load i8, ptr %500, align 4, !tbaa !29
  %502 = and i8 %501, 1
  %503 = icmp eq i8 %502, 0
  br i1 %503, label %504, label %514

504:                                              ; preds = %497
  %505 = getelementptr inbounds %struct.BezTriple, ptr %499, i64 0, i32 7
  %506 = load i8, ptr %505, align 1, !tbaa !27
  %507 = and i8 %506, 1
  %508 = icmp eq i8 %507, 0
  br i1 %508, label %509, label %514

509:                                              ; preds = %504
  %510 = getelementptr inbounds %struct.BezTriple, ptr %499, i64 0, i32 9
  %511 = load i8, ptr %510, align 1, !tbaa !30
  %512 = and i8 %511, 1
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %626, label %514

514:                                              ; preds = %509, %504, %497
  %515 = add nsw i32 %498, -1
  %516 = getelementptr inbounds %struct.BezTriple, ptr %499, i64 1
  %517 = icmp eq i32 %515, 0
  br i1 %517, label %529, label %497, !llvm.loop !358

518:                                              ; preds = %492, %525
  %519 = phi i32 [ %526, %525 ], [ %488, %492 ]
  %520 = phi ptr [ %527, %525 ], [ %493, %492 ]
  %521 = getelementptr inbounds %struct.BezTriple, ptr %520, i64 0, i32 8
  %522 = load i8, ptr %521, align 4, !tbaa !29
  %523 = and i8 %522, 1
  %524 = icmp eq i8 %523, 0
  br i1 %524, label %626, label %525

525:                                              ; preds = %518
  %526 = add nsw i32 %519, -1
  %527 = getelementptr inbounds %struct.BezTriple, ptr %520, i64 1
  %528 = icmp eq i32 %526, 0
  br i1 %528, label %529, label %518, !llvm.loop !358

529:                                              ; preds = %525, %514
  %530 = load i32, ptr %477, align 4, !tbaa !173
  %531 = icmp eq i32 %530, %481
  br i1 %531, label %532, label %533

532:                                              ; preds = %529
  store i32 -1, ptr %477, align 4, !tbaa !173
  br label %533

533:                                              ; preds = %532, %529
  tail call void @BLI_remlink(ptr noundef nonnull %15, ptr noundef nonnull %482) #20
  %534 = load ptr, ptr %478, align 8, !tbaa !47
  %535 = icmp eq ptr %534, null
  br i1 %535, label %625, label %536

536:                                              ; preds = %533
  %537 = load ptr, ptr %490, align 8, !tbaa !24
  %538 = icmp eq ptr %537, null
  %539 = load i32, ptr %487, align 8, !tbaa !23
  br i1 %538, label %551, label %540

540:                                              ; preds = %536
  %541 = icmp eq i32 %539, 0
  br i1 %541, label %625, label %542

542:                                              ; preds = %540, %542
  %543 = phi ptr [ %549, %542 ], [ %537, %540 ]
  %544 = phi i32 [ %545, %542 ], [ %539, %540 ]
  %545 = add nsw i32 %544, -1
  %546 = load ptr, ptr %478, align 8, !tbaa !47
  %547 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %548 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %546, ptr noundef nonnull %543, ptr noundef null, ptr noundef %547) #20
  %549 = getelementptr inbounds %struct.BezTriple, ptr %543, i64 1
  %550 = icmp eq i32 %545, 0
  br i1 %550, label %625, label %542, !llvm.loop !261

551:                                              ; preds = %536
  %552 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 7
  %553 = load i32, ptr %552, align 4, !tbaa !31
  %554 = mul nsw i32 %553, %539
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %625, label %556

556:                                              ; preds = %551
  %557 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 17
  %558 = load ptr, ptr %557, align 8, !tbaa !32
  br label %559

559:                                              ; preds = %559, %556
  %560 = phi ptr [ %566, %559 ], [ %558, %556 ]
  %561 = phi i32 [ %562, %559 ], [ %554, %556 ]
  %562 = add nsw i32 %561, -1
  %563 = load ptr, ptr %478, align 8, !tbaa !47
  %564 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %565 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %563, ptr noundef %560, ptr noundef null, ptr noundef %564) #20
  %566 = getelementptr inbounds %struct.BPoint, ptr %560, i64 1
  %567 = icmp eq i32 %562, 0
  br i1 %567, label %625, label %559, !llvm.loop !262

568:                                              ; preds = %480
  %569 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 17
  %570 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 7
  %571 = load i32, ptr %570, align 4, !tbaa !31
  %572 = mul nsw i32 %571, %488
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %626, label %574

574:                                              ; preds = %568
  %575 = load ptr, ptr %569, align 8, !tbaa !32
  br label %576

576:                                              ; preds = %583, %574
  %577 = phi i32 [ %584, %583 ], [ %572, %574 ]
  %578 = phi ptr [ %585, %583 ], [ %575, %574 ]
  %579 = getelementptr inbounds %struct.BPoint, ptr %578, i64 0, i32 3
  %580 = load i16, ptr %579, align 4, !tbaa !34
  %581 = and i16 %580, 1
  %582 = icmp eq i16 %581, 0
  br i1 %582, label %626, label %583

583:                                              ; preds = %576
  %584 = add nsw i32 %577, -1
  %585 = getelementptr inbounds %struct.BPoint, ptr %578, i64 1
  %586 = icmp eq i32 %584, 0
  br i1 %586, label %587, label %576, !llvm.loop !359

587:                                              ; preds = %583
  %588 = load i32, ptr %477, align 4, !tbaa !173
  %589 = icmp eq i32 %588, %481
  br i1 %589, label %590, label %591

590:                                              ; preds = %587
  store i32 -1, ptr %477, align 4, !tbaa !173
  br label %591

591:                                              ; preds = %590, %587
  tail call void @BLI_remlink(ptr noundef nonnull %15, ptr noundef nonnull %482) #20
  %592 = load ptr, ptr %478, align 8, !tbaa !47
  %593 = icmp eq ptr %592, null
  br i1 %593, label %625, label %594

594:                                              ; preds = %591
  %595 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 18
  %596 = load ptr, ptr %595, align 8, !tbaa !24
  %597 = icmp eq ptr %596, null
  %598 = load i32, ptr %487, align 8, !tbaa !23
  br i1 %597, label %610, label %599

599:                                              ; preds = %594
  %600 = icmp eq i32 %598, 0
  br i1 %600, label %625, label %601

601:                                              ; preds = %599, %601
  %602 = phi ptr [ %608, %601 ], [ %596, %599 ]
  %603 = phi i32 [ %604, %601 ], [ %598, %599 ]
  %604 = add nsw i32 %603, -1
  %605 = load ptr, ptr %478, align 8, !tbaa !47
  %606 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %607 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %605, ptr noundef nonnull %602, ptr noundef null, ptr noundef %606) #20
  %608 = getelementptr inbounds %struct.BezTriple, ptr %602, i64 1
  %609 = icmp eq i32 %604, 0
  br i1 %609, label %625, label %601, !llvm.loop !261

610:                                              ; preds = %594
  %611 = load i32, ptr %570, align 4, !tbaa !31
  %612 = mul nsw i32 %611, %598
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %625, label %614

614:                                              ; preds = %610
  %615 = load ptr, ptr %569, align 8, !tbaa !32
  br label %616

616:                                              ; preds = %616, %614
  %617 = phi ptr [ %623, %616 ], [ %615, %614 ]
  %618 = phi i32 [ %619, %616 ], [ %612, %614 ]
  %619 = add nsw i32 %618, -1
  %620 = load ptr, ptr %478, align 8, !tbaa !47
  %621 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %622 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef %620, ptr noundef %617, ptr noundef null, ptr noundef %621) #20
  %623 = getelementptr inbounds %struct.BPoint, ptr %617, i64 1
  %624 = icmp eq i32 %619, 0
  br i1 %624, label %625, label %616, !llvm.loop !262

625:                                              ; preds = %601, %616, %542, %559, %610, %599, %591, %551, %540, %533
  tail call void @BKE_nurb_free(ptr noundef nonnull %482) #20
  br label %626

626:                                              ; preds = %576, %518, %509, %625, %568, %489
  %627 = add nuw nsw i32 %481, 1
  %628 = icmp eq ptr %483, null
  br i1 %628, label %629, label %480, !llvm.loop !360

629:                                              ; preds = %626
  %630 = load ptr, ptr %15, align 8, !tbaa !56
  %631 = icmp eq ptr %630, null
  br i1 %631, label %865, label %632

632:                                              ; preds = %629, %861
  %633 = phi ptr [ %634, %861 ], [ %630, %629 ]
  %634 = load ptr, ptr %633, align 8, !tbaa !120
  %635 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 2
  %636 = load i16, ptr %635, align 8, !tbaa !21
  %637 = icmp eq i16 %636, 1
  br i1 %637, label %638, label %760

638:                                              ; preds = %632
  %639 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 18
  %640 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 6
  %641 = load i32, ptr %640, align 8, !tbaa !23
  %642 = icmp sgt i32 %641, 0
  br i1 %642, label %643, label %861

643:                                              ; preds = %638
  %644 = load ptr, ptr %639, align 8, !tbaa !24
  br label %645

645:                                              ; preds = %720, %643
  %646 = phi i32 [ %722, %720 ], [ %641, %643 ]
  %647 = phi i1 [ false, %720 ], [ true, %643 ]
  %648 = phi i32 [ %682, %720 ], [ 0, %643 ]
  %649 = phi ptr [ %683, %720 ], [ %644, %643 ]
  %650 = load i16, ptr %479, align 8, !tbaa !198
  %651 = and i16 %650, 1
  %652 = icmp eq i16 %651, 0
  br i1 %652, label %653, label %674

653:                                              ; preds = %645, %670
  %654 = phi i32 [ %672, %670 ], [ %648, %645 ]
  %655 = phi ptr [ %671, %670 ], [ %649, %645 ]
  %656 = getelementptr inbounds %struct.BezTriple, ptr %655, i64 0, i32 8
  %657 = load i8, ptr %656, align 4, !tbaa !29
  %658 = and i8 %657, 1
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %660, label %681

660:                                              ; preds = %653
  %661 = getelementptr inbounds %struct.BezTriple, ptr %655, i64 0, i32 7
  %662 = load i8, ptr %661, align 1, !tbaa !27
  %663 = and i8 %662, 1
  %664 = icmp eq i8 %663, 0
  br i1 %664, label %665, label %681

665:                                              ; preds = %660
  %666 = getelementptr inbounds %struct.BezTriple, ptr %655, i64 0, i32 9
  %667 = load i8, ptr %666, align 1, !tbaa !30
  %668 = and i8 %667, 1
  %669 = icmp eq i8 %668, 0
  br i1 %669, label %670, label %681

670:                                              ; preds = %665
  %671 = getelementptr inbounds %struct.BezTriple, ptr %655, i64 1
  %672 = add nsw i32 %654, 1
  %673 = icmp slt i32 %672, %646
  br i1 %673, label %653, label %724, !llvm.loop !361

674:                                              ; preds = %645, %716
  %675 = phi i32 [ %718, %716 ], [ %648, %645 ]
  %676 = phi ptr [ %717, %716 ], [ %649, %645 ]
  %677 = getelementptr inbounds %struct.BezTriple, ptr %676, i64 0, i32 8
  %678 = load i8, ptr %677, align 4, !tbaa !29
  %679 = and i8 %678, 1
  %680 = icmp eq i8 %679, 0
  br i1 %680, label %716, label %681

681:                                              ; preds = %674, %665, %660, %653
  %682 = phi i32 [ %654, %653 ], [ %654, %660 ], [ %654, %665 ], [ %675, %674 ]
  %683 = phi ptr [ %655, %653 ], [ %655, %660 ], [ %655, %665 ], [ %676, %674 ]
  %684 = getelementptr inbounds %struct.BezTriple, ptr %683, i64 1
  %685 = xor i32 %682, -1
  %686 = add i32 %646, %685
  %687 = sext i32 %686 to i64
  %688 = mul nsw i64 %687, 72
  tail call void @llvm.memmove.p0.p0.i64(ptr nonnull align 4 %683, ptr nonnull align 4 %684, i64 %688, i1 false)
  %689 = load ptr, ptr %478, align 8, !tbaa !47
  %690 = icmp eq ptr %689, null
  br i1 %690, label %714, label %691

691:                                              ; preds = %681
  %692 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %693 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef nonnull %689, ptr noundef nonnull %683, ptr noundef null, ptr noundef %692) #20
  %694 = load ptr, ptr %478, align 8, !tbaa !47
  %695 = load i32, ptr %640, align 8, !tbaa !23
  %696 = add i32 %695, %685
  %697 = icmp ne ptr %694, null
  %698 = icmp sgt i32 %696, 0
  %699 = and i1 %697, %698
  br i1 %699, label %700, label %720

700:                                              ; preds = %691, %709
  %701 = phi ptr [ %711, %709 ], [ %684, %691 ]
  %702 = phi i32 [ %712, %709 ], [ 0, %691 ]
  %703 = phi ptr [ %710, %709 ], [ %683, %691 ]
  %704 = load ptr, ptr %478, align 8, !tbaa !47
  %705 = tail call ptr @BLI_ghash_popkey(ptr noundef %704, ptr noundef nonnull %701, ptr noundef null) #20
  %706 = icmp eq ptr %705, null
  br i1 %706, label %709, label %707

707:                                              ; preds = %700
  %708 = load ptr, ptr %478, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %708, ptr noundef nonnull %703, ptr noundef nonnull %705) #20
  br label %709

709:                                              ; preds = %707, %700
  %710 = getelementptr inbounds i8, ptr %703, i64 72
  %711 = getelementptr inbounds i8, ptr %701, i64 72
  %712 = add nuw nsw i32 %702, 1
  %713 = icmp eq i32 %712, %696
  br i1 %713, label %714, label %700, !llvm.loop !157

714:                                              ; preds = %709, %681
  %715 = load i32, ptr %640, align 8, !tbaa !23
  br label %720

716:                                              ; preds = %674
  %717 = getelementptr inbounds %struct.BezTriple, ptr %676, i64 1
  %718 = add nsw i32 %675, 1
  %719 = icmp slt i32 %718, %646
  br i1 %719, label %674, label %724, !llvm.loop !361

720:                                              ; preds = %714, %691
  %721 = phi i32 [ %695, %691 ], [ %715, %714 ]
  %722 = add nsw i32 %721, -1
  store i32 %722, ptr %640, align 8, !tbaa !23
  %723 = icmp slt i32 %682, %722
  br i1 %723, label %645, label %725, !llvm.loop !361

724:                                              ; preds = %716, %670
  br i1 %647, label %861, label %725

725:                                              ; preds = %720, %724
  %726 = phi i32 [ %646, %724 ], [ %722, %720 ]
  %727 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %728 = sext i32 %726 to i64
  %729 = mul nsw i64 %728, 72
  %730 = tail call ptr %727(i64 noundef %729, ptr noundef nonnull @.str.224) #20
  %731 = load ptr, ptr %639, align 8, !tbaa !24
  %732 = load i32, ptr %640, align 8, !tbaa !23
  %733 = sext i32 %732 to i64
  %734 = mul nsw i64 %733, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %730, ptr align 4 %731, i64 %734, i1 false)
  %735 = load ptr, ptr %639, align 8, !tbaa !24
  %736 = load i32, ptr %640, align 8, !tbaa !23
  %737 = load ptr, ptr %478, align 8, !tbaa !47
  %738 = icmp ne ptr %737, null
  %739 = icmp sgt i32 %736, 0
  %740 = and i1 %739, %738
  br i1 %740, label %741, label %757

741:                                              ; preds = %725, %750
  %742 = phi ptr [ %752, %750 ], [ %735, %725 ]
  %743 = phi i32 [ %753, %750 ], [ 0, %725 ]
  %744 = phi ptr [ %751, %750 ], [ %730, %725 ]
  %745 = load ptr, ptr %478, align 8, !tbaa !47
  %746 = tail call ptr @BLI_ghash_popkey(ptr noundef %745, ptr noundef %742, ptr noundef null) #20
  %747 = icmp eq ptr %746, null
  br i1 %747, label %750, label %748

748:                                              ; preds = %741
  %749 = load ptr, ptr %478, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %749, ptr noundef %744, ptr noundef nonnull %746) #20
  br label %750

750:                                              ; preds = %748, %741
  %751 = getelementptr inbounds i8, ptr %744, i64 72
  %752 = getelementptr inbounds i8, ptr %742, i64 72
  %753 = add nuw nsw i32 %743, 1
  %754 = icmp eq i32 %753, %736
  br i1 %754, label %755, label %741, !llvm.loop !157

755:                                              ; preds = %750
  %756 = load ptr, ptr %639, align 8, !tbaa !24
  br label %757

757:                                              ; preds = %755, %725
  %758 = phi ptr [ %756, %755 ], [ %735, %725 ]
  %759 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %759(ptr noundef %758) #20
  store ptr %730, ptr %639, align 8, !tbaa !24
  tail call void @BKE_nurb_handles_calc(ptr noundef nonnull %633) #20
  br label %861

760:                                              ; preds = %632
  %761 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 7
  %762 = load i32, ptr %761, align 4, !tbaa !31
  %763 = icmp eq i32 %762, 1
  br i1 %763, label %764, label %861

764:                                              ; preds = %760
  %765 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 17
  %766 = getelementptr inbounds %struct.Nurb, ptr %633, i64 0, i32 6
  %767 = load i32, ptr %766, align 8, !tbaa !23
  %768 = icmp sgt i32 %767, 0
  br i1 %768, label %769, label %859

769:                                              ; preds = %764
  %770 = load ptr, ptr %765, align 8, !tbaa !32
  br label %771

771:                                              ; preds = %819, %769
  %772 = phi i32 [ %821, %819 ], [ %767, %769 ]
  %773 = phi i1 [ false, %819 ], [ true, %769 ]
  %774 = phi i32 [ %777, %819 ], [ 0, %769 ]
  %775 = phi ptr [ %778, %819 ], [ %770, %769 ]
  br label %776

776:                                              ; preds = %816, %771
  %777 = phi i32 [ %817, %816 ], [ %774, %771 ]
  %778 = phi ptr [ %783, %816 ], [ %775, %771 ]
  %779 = getelementptr inbounds %struct.BPoint, ptr %778, i64 0, i32 3
  %780 = load i16, ptr %779, align 4, !tbaa !34
  %781 = and i16 %780, 1
  %782 = icmp eq i16 %781, 0
  %783 = getelementptr inbounds %struct.BPoint, ptr %778, i64 1
  br i1 %782, label %816, label %784

784:                                              ; preds = %776
  %785 = xor i32 %777, -1
  %786 = add i32 %772, %785
  %787 = sext i32 %786 to i64
  %788 = mul nsw i64 %787, 36
  tail call void @llvm.memmove.p0.p0.i64(ptr nonnull align 4 %778, ptr nonnull align 4 %783, i64 %788, i1 false)
  %789 = load ptr, ptr %478, align 8, !tbaa !47
  %790 = icmp eq ptr %789, null
  br i1 %790, label %814, label %791

791:                                              ; preds = %784
  %792 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %793 = tail call zeroext i8 @BLI_ghash_remove(ptr noundef nonnull %789, ptr noundef nonnull %778, ptr noundef null, ptr noundef %792) #20
  %794 = load ptr, ptr %478, align 8, !tbaa !47
  %795 = load i32, ptr %766, align 8, !tbaa !23
  %796 = add i32 %795, %785
  %797 = icmp ne ptr %794, null
  %798 = icmp sgt i32 %796, 0
  %799 = and i1 %797, %798
  br i1 %799, label %800, label %819

800:                                              ; preds = %791, %809
  %801 = phi ptr [ %811, %809 ], [ %783, %791 ]
  %802 = phi i32 [ %812, %809 ], [ 0, %791 ]
  %803 = phi ptr [ %810, %809 ], [ %778, %791 ]
  %804 = load ptr, ptr %478, align 8, !tbaa !47
  %805 = tail call ptr @BLI_ghash_popkey(ptr noundef %804, ptr noundef nonnull %801, ptr noundef null) #20
  %806 = icmp eq ptr %805, null
  br i1 %806, label %809, label %807

807:                                              ; preds = %800
  %808 = load ptr, ptr %478, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %808, ptr noundef nonnull %803, ptr noundef nonnull %805) #20
  br label %809

809:                                              ; preds = %807, %800
  %810 = getelementptr inbounds i8, ptr %803, i64 36
  %811 = getelementptr inbounds i8, ptr %801, i64 36
  %812 = add nuw nsw i32 %802, 1
  %813 = icmp eq i32 %812, %796
  br i1 %813, label %814, label %800, !llvm.loop !157

814:                                              ; preds = %809, %784
  %815 = load i32, ptr %766, align 8, !tbaa !23
  br label %819

816:                                              ; preds = %776
  %817 = add nsw i32 %777, 1
  %818 = icmp slt i32 %817, %772
  br i1 %818, label %776, label %823, !llvm.loop !362

819:                                              ; preds = %814, %791
  %820 = phi i32 [ %795, %791 ], [ %815, %814 ]
  %821 = add nsw i32 %820, -1
  store i32 %821, ptr %766, align 8, !tbaa !23
  %822 = icmp slt i32 %777, %821
  br i1 %822, label %771, label %824, !llvm.loop !362

823:                                              ; preds = %816
  br i1 %773, label %859, label %824

824:                                              ; preds = %819, %823
  %825 = phi i32 [ %772, %823 ], [ %821, %819 ]
  %826 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %827 = sext i32 %825 to i64
  %828 = mul nsw i64 %827, 36
  %829 = tail call ptr %826(i64 noundef %828, ptr noundef nonnull @.str.225) #20
  %830 = load ptr, ptr %765, align 8, !tbaa !32
  %831 = load i32, ptr %766, align 8, !tbaa !23
  %832 = sext i32 %831 to i64
  %833 = mul nsw i64 %832, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %829, ptr align 4 %830, i64 %833, i1 false)
  %834 = load ptr, ptr %765, align 8, !tbaa !32
  %835 = load i32, ptr %766, align 8, !tbaa !23
  %836 = load ptr, ptr %478, align 8, !tbaa !47
  %837 = icmp ne ptr %836, null
  %838 = icmp sgt i32 %835, 0
  %839 = and i1 %838, %837
  br i1 %839, label %840, label %856

840:                                              ; preds = %824, %849
  %841 = phi ptr [ %851, %849 ], [ %834, %824 ]
  %842 = phi i32 [ %852, %849 ], [ 0, %824 ]
  %843 = phi ptr [ %850, %849 ], [ %829, %824 ]
  %844 = load ptr, ptr %478, align 8, !tbaa !47
  %845 = tail call ptr @BLI_ghash_popkey(ptr noundef %844, ptr noundef %841, ptr noundef null) #20
  %846 = icmp eq ptr %845, null
  br i1 %846, label %849, label %847

847:                                              ; preds = %840
  %848 = load ptr, ptr %478, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %848, ptr noundef %843, ptr noundef nonnull %845) #20
  br label %849

849:                                              ; preds = %847, %840
  %850 = getelementptr inbounds i8, ptr %843, i64 36
  %851 = getelementptr inbounds i8, ptr %841, i64 36
  %852 = add nuw nsw i32 %842, 1
  %853 = icmp eq i32 %852, %835
  br i1 %853, label %854, label %840, !llvm.loop !157

854:                                              ; preds = %849
  %855 = load ptr, ptr %765, align 8, !tbaa !32
  br label %856

856:                                              ; preds = %854, %824
  %857 = phi ptr [ %855, %854 ], [ %834, %824 ]
  %858 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %858(ptr noundef %857) #20
  store ptr %829, ptr %765, align 8, !tbaa !32
  br label %859

859:                                              ; preds = %856, %823, %764
  %860 = tail call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %633) #20
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %633) #20
  br label %861

861:                                              ; preds = %859, %760, %757, %724, %638
  %862 = icmp eq ptr %634, null
  br i1 %862, label %865, label %632, !llvm.loop !363

863:                                              ; preds = %2
  %864 = load ptr, ptr %4, align 8, !tbaa !17
  tail call fastcc void @curve_delete_segments(ptr %864, i8 noundef zeroext 0)
  br label %865

865:                                              ; preds = %861, %473, %863, %18, %475, %629
  %866 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 32
  store i32 -1, ptr %866, align 8, !tbaa !174
  %867 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 31
  store i32 -1, ptr %867, align 4, !tbaa !173
  %868 = load ptr, ptr %4, align 8, !tbaa !17
  %869 = tail call ptr @BKE_animdata_from_id(ptr noundef %868) #20
  %870 = getelementptr inbounds %struct.Curve, ptr %868, i64 0, i32 4
  %871 = load ptr, ptr %870, align 8, !tbaa !18
  %872 = getelementptr inbounds %struct.EditNurb, ptr %871, i64 0, i32 1
  %873 = load ptr, ptr %872, align 8, !tbaa !47
  %874 = icmp eq ptr %873, null
  br i1 %874, label %892, label %875

875:                                              ; preds = %865
  %876 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %868) #20
  %877 = icmp eq ptr %876, null
  br i1 %877, label %892, label %878

878:                                              ; preds = %875
  %879 = load ptr, ptr %876, align 8, !tbaa !49
  %880 = icmp eq ptr %879, null
  br i1 %880, label %881, label %885

881:                                              ; preds = %878
  %882 = getelementptr inbounds %struct.AnimData, ptr %876, i64 0, i32 5
  %883 = load ptr, ptr %882, align 8, !tbaa !51
  %884 = icmp eq ptr %883, null
  br i1 %884, label %892, label %885

885:                                              ; preds = %881, %878
  %886 = load ptr, ptr %869, align 8, !tbaa !49
  %887 = icmp eq ptr %886, null
  br i1 %887, label %890, label %888

888:                                              ; preds = %885
  %889 = getelementptr inbounds %struct.bAction, ptr %886, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %868, ptr noundef nonnull %889)
  br label %890

890:                                              ; preds = %888, %885
  %891 = getelementptr inbounds %struct.AnimData, ptr %869, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %868, ptr noundef nonnull %891)
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %3) #20
  br label %892

892:                                              ; preds = %875, %881, %865, %890
  %893 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %893) #20
  %894 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %894, i16 noundef signext 0) #20
  br label %895

895:                                              ; preds = %2, %892
  %896 = phi i32 [ 4, %892 ], [ 2, %2 ]
  ret i32 %896
}

declare void @RNA_def_enum_funcs(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @rna_curve_delete_type_itemf(ptr noundef readnone %0, ptr nocapture readnone %1, ptr nocapture readnone %2, ptr nocapture noundef writeonly %3) #5 {
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #20
  store ptr null, ptr %5, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #20
  store i32 0, ptr %6, align 4, !tbaa !74
  %7 = icmp eq ptr %0, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  call void @RNA_enum_items_add_value(ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull @curve_delete_type_items, i32 noundef 0) #20
  call void @RNA_enum_items_add_value(ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull @curve_delete_type_items, i32 noundef 1) #20
  call void @RNA_enum_item_end(ptr noundef nonnull %5, ptr noundef nonnull %6) #20
  store i8 1, ptr %3, align 1, !tbaa !169
  %9 = load ptr, ptr %5, align 8, !tbaa !36
  br label %10

10:                                               ; preds = %4, %8
  %11 = phi ptr [ %9, %8 ], [ @curve_delete_type_items, %4 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #20
  ret ptr %11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_shade_smooth(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.167, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.168, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.169, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @shade_smooth_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @shade_smooth_exec(ptr noundef %0, ptr nocapture noundef readonly %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %2
  %6 = load i16, ptr inttoptr (i64 136 to ptr), align 8, !tbaa !5
  br label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %9 = load i16, ptr %8, align 8, !tbaa !5
  %10 = and i16 %9, -2
  %11 = icmp eq i16 %10, 2
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.Curve, ptr %14, i64 0, i32 4
  %16 = load ptr, ptr %15, align 8, !tbaa !18
  br label %17

17:                                               ; preds = %5, %7, %12
  %18 = phi i16 [ %9, %12 ], [ %9, %7 ], [ %6, %5 ]
  %19 = phi ptr [ %16, %12 ], [ null, %7 ], [ null, %5 ]
  %20 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 2
  %21 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %20, ptr noundef nonnull dereferenceable(20) @.str.171) #21
  %22 = freeze i32 %21
  %23 = icmp eq i32 %22, 0
  %24 = icmp eq i16 %18, 2
  br i1 %24, label %25, label %151

25:                                               ; preds = %17
  %26 = load ptr, ptr %19, align 8, !tbaa !36
  %27 = icmp eq ptr %26, null
  br i1 %27, label %147, label %28

28:                                               ; preds = %25
  br i1 %23, label %29, label %88

29:                                               ; preds = %28, %85
  %30 = phi ptr [ %86, %85 ], [ %26, %28 ]
  %31 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 2
  %32 = load i16, ptr %31, align 8, !tbaa !21
  %33 = icmp eq i16 %32, 1
  %34 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 6
  %35 = load i32, ptr %34, align 8, !tbaa !23
  br i1 %33, label %55, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 7
  %38 = load i32, ptr %37, align 4, !tbaa !31
  %39 = mul nsw i32 %38, %35
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %85, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 17
  %43 = load ptr, ptr %42, align 8, !tbaa !32
  br label %44

44:                                               ; preds = %51, %41
  %45 = phi i32 [ %52, %51 ], [ %39, %41 ]
  %46 = phi ptr [ %53, %51 ], [ %43, %41 ]
  %47 = getelementptr inbounds %struct.BPoint, ptr %46, i64 0, i32 3
  %48 = load i16, ptr %47, align 4, !tbaa !34
  %49 = and i16 %48, 1
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %78

51:                                               ; preds = %44
  %52 = add nsw i32 %45, -1
  %53 = getelementptr inbounds %struct.BPoint, ptr %46, i64 1
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %85, label %44, !llvm.loop !33

55:                                               ; preds = %29
  %56 = icmp eq i32 %35, 0
  br i1 %56, label %85, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 18
  %59 = load ptr, ptr %58, align 8, !tbaa !24
  br label %60

60:                                               ; preds = %82, %57
  %61 = phi i32 [ %63, %82 ], [ %35, %57 ]
  %62 = phi ptr [ %83, %82 ], [ %59, %57 ]
  %63 = add nsw i32 %61, -1
  %64 = getelementptr inbounds %struct.BezTriple, ptr %62, i64 0, i32 7
  %65 = load i8, ptr %64, align 1, !tbaa !27
  %66 = and i8 %65, 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %78

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.BezTriple, ptr %62, i64 0, i32 8
  %70 = load i8, ptr %69, align 4, !tbaa !29
  %71 = and i8 %70, 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.BezTriple, ptr %62, i64 0, i32 9
  %75 = load i8, ptr %74, align 1, !tbaa !30
  %76 = and i8 %75, 1
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %44, %60, %68, %73
  %79 = getelementptr inbounds %struct.Nurb, ptr %30, i64 0, i32 5
  %80 = load i16, ptr %79, align 2, !tbaa !364
  %81 = and i16 %80, -2
  store i16 %81, ptr %79, align 2, !tbaa !364
  br label %85

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.BezTriple, ptr %62, i64 1
  %84 = icmp eq i32 %63, 0
  br i1 %84, label %85, label %60, !llvm.loop !25

85:                                               ; preds = %51, %82, %78, %55, %36
  %86 = load ptr, ptr %30, align 8, !tbaa !36
  %87 = icmp eq ptr %86, null
  br i1 %87, label %147, label %29, !llvm.loop !365

88:                                               ; preds = %28, %144
  %89 = phi ptr [ %145, %144 ], [ %26, %28 ]
  %90 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 2
  %91 = load i16, ptr %90, align 8, !tbaa !21
  %92 = icmp eq i16 %91, 1
  %93 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 6
  %94 = load i32, ptr %93, align 8, !tbaa !23
  br i1 %92, label %95, label %121

95:                                               ; preds = %88
  %96 = icmp eq i32 %94, 0
  br i1 %96, label %144, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 18
  %99 = load ptr, ptr %98, align 8, !tbaa !24
  br label %103

100:                                              ; preds = %116
  %101 = getelementptr inbounds %struct.BezTriple, ptr %105, i64 1
  %102 = icmp eq i32 %106, 0
  br i1 %102, label %144, label %103, !llvm.loop !25

103:                                              ; preds = %100, %97
  %104 = phi i32 [ %106, %100 ], [ %94, %97 ]
  %105 = phi ptr [ %101, %100 ], [ %99, %97 ]
  %106 = add nsw i32 %104, -1
  %107 = getelementptr inbounds %struct.BezTriple, ptr %105, i64 0, i32 7
  %108 = load i8, ptr %107, align 1, !tbaa !27
  %109 = and i8 %108, 1
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %140

111:                                              ; preds = %103
  %112 = getelementptr inbounds %struct.BezTriple, ptr %105, i64 0, i32 8
  %113 = load i8, ptr %112, align 4, !tbaa !29
  %114 = and i8 %113, 1
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %116, label %140

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.BezTriple, ptr %105, i64 0, i32 9
  %118 = load i8, ptr %117, align 1, !tbaa !30
  %119 = and i8 %118, 1
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %100, label %140

121:                                              ; preds = %88
  %122 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 7
  %123 = load i32, ptr %122, align 4, !tbaa !31
  %124 = mul nsw i32 %123, %94
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %144, label %126

126:                                              ; preds = %121
  %127 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 17
  %128 = load ptr, ptr %127, align 8, !tbaa !32
  br label %133

129:                                              ; preds = %133
  %130 = add nsw i32 %134, -1
  %131 = getelementptr inbounds %struct.BPoint, ptr %135, i64 1
  %132 = icmp eq i32 %130, 0
  br i1 %132, label %144, label %133, !llvm.loop !33

133:                                              ; preds = %129, %126
  %134 = phi i32 [ %130, %129 ], [ %124, %126 ]
  %135 = phi ptr [ %131, %129 ], [ %128, %126 ]
  %136 = getelementptr inbounds %struct.BPoint, ptr %135, i64 0, i32 3
  %137 = load i16, ptr %136, align 4, !tbaa !34
  %138 = and i16 %137, 1
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %129, label %140

140:                                              ; preds = %133, %116, %111, %103
  %141 = getelementptr inbounds %struct.Nurb, ptr %89, i64 0, i32 5
  %142 = load i16, ptr %141, align 2, !tbaa !364
  %143 = or i16 %142, 1
  store i16 %143, ptr %141, align 2, !tbaa !364
  br label %144

144:                                              ; preds = %129, %100, %121, %95, %140
  %145 = load ptr, ptr %89, align 8, !tbaa !36
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %88, !llvm.loop !365

147:                                              ; preds = %144, %85, %25
  %148 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %149 = load ptr, ptr %148, align 8, !tbaa !17
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %149) #20
  %150 = load ptr, ptr %148, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %150, i16 noundef signext 0) #20
  br label %151

151:                                              ; preds = %17, %147
  %152 = phi i32 [ 4, %147 ], [ 2, %17 ]
  ret i32 %152
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_shade_flat(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.170, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.171, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.172, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @shade_smooth_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editsurfcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @join_curve_exec(ptr noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = alloca [4 x [4 x float]], align 16
  %5 = alloca [4 x [4 x float]], align 16
  %6 = alloca %struct.ListBase, align 8
  %7 = alloca %struct.ListBase, align 8
  %8 = tail call ptr @CTX_data_main(ptr noundef %0) #20
  %9 = tail call ptr @CTX_data_scene(ptr noundef %0) #20
  %10 = tail call ptr @CTX_data_active_object(ptr noundef %0) #20
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %4) #20
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %5) #20
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %6) #20
  %11 = call i32 @CTX_data_selected_editable_bases(ptr noundef %0, ptr noundef nonnull %6) #20
  br label %12

12:                                               ; preds = %16, %2
  %13 = phi ptr [ %6, %2 ], [ %14, %16 ]
  %14 = load ptr, ptr %13, align 8, !tbaa !36
  %15 = icmp eq ptr %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.CollectionPointerLink, ptr %14, i64 0, i32 2, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !366
  %19 = getelementptr inbounds %struct.Base, ptr %18, i64 0, i32 7
  %20 = load ptr, ptr %19, align 8, !tbaa !148
  %21 = icmp eq ptr %20, %10
  br i1 %21, label %25, label %12

22:                                               ; preds = %12
  call void @BLI_freelistN(ptr noundef nonnull %6) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #20
  %23 = getelementptr inbounds %struct.wmOperator, ptr %1, i64 0, i32 8
  %24 = load ptr, ptr %23, align 8, !tbaa !150
  call void @BKE_report(ptr noundef %24, i32 noundef 16, ptr noundef nonnull @.str.173) #20
  br label %118

25:                                               ; preds = %16
  call void @BLI_freelistN(ptr noundef nonnull %6) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %6) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  %26 = getelementptr inbounds %struct.Object, ptr %10, i64 0, i32 47
  %27 = call zeroext i8 @invert_m4_m4(ptr noundef nonnull %4, ptr noundef nonnull %26) #20
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %7) #20
  %28 = call i32 @CTX_data_selected_editable_bases(ptr noundef %0, ptr noundef nonnull %7) #20
  %29 = load ptr, ptr %7, align 8, !tbaa !36
  %30 = icmp eq ptr %29, null
  br i1 %30, label %114, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.Object, ptr %10, i64 0, i32 3
  %33 = getelementptr inbounds %struct.Object, ptr %10, i64 0, i32 31
  br label %34

34:                                               ; preds = %31, %111
  %35 = phi ptr [ %29, %31 ], [ %112, %111 ]
  %36 = getelementptr inbounds %struct.CollectionPointerLink, ptr %35, i64 0, i32 2, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !366
  %38 = getelementptr inbounds %struct.Base, ptr %37, i64 0, i32 7
  %39 = load ptr, ptr %38, align 8, !tbaa !148
  %40 = getelementptr inbounds %struct.Object, ptr %39, i64 0, i32 3
  %41 = load i16, ptr %40, align 8, !tbaa !5
  %42 = load i16, ptr %32, align 8, !tbaa !5
  %43 = icmp ne i16 %41, %42
  %44 = icmp eq ptr %39, %10
  %45 = select i1 %43, i1 true, i1 %44
  br i1 %45, label %111, label %46

46:                                               ; preds = %34
  %47 = getelementptr inbounds %struct.Object, ptr %39, i64 0, i32 19
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.Curve, ptr %48, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !370
  %51 = icmp eq ptr %50, null
  br i1 %51, label %110, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.Object, ptr %39, i64 0, i32 47
  call void @mul_m4_m4m4(ptr noundef nonnull %5, ptr noundef nonnull %4, ptr noundef nonnull %53) #20
  %54 = load ptr, ptr %49, align 8, !tbaa !36
  %55 = icmp eq ptr %54, null
  br i1 %55, label %110, label %56

56:                                               ; preds = %52, %107
  %57 = phi ptr [ %108, %107 ], [ %54, %52 ]
  %58 = call ptr @BKE_nurb_duplicate(ptr noundef nonnull %57) #20
  %59 = load i32, ptr %33, align 8, !tbaa !371
  %60 = icmp eq i32 %59, 0
  %61 = getelementptr inbounds %struct.Nurb, ptr %58, i64 0, i32 3
  br i1 %60, label %71, label %62

62:                                               ; preds = %56
  %63 = load i16, ptr %61, align 2, !tbaa !372
  %64 = icmp slt i16 %63, 0
  br i1 %64, label %71, label %65

65:                                               ; preds = %62
  %66 = zext i16 %63 to i32
  %67 = icmp sgt i32 %59, %66
  br i1 %67, label %73, label %68

68:                                               ; preds = %65
  %69 = trunc i32 %59 to i16
  %70 = add i16 %69, -1
  br label %71

71:                                               ; preds = %56, %62, %68
  %72 = phi i16 [ %70, %68 ], [ 0, %62 ], [ 0, %56 ]
  store i16 %72, ptr %61, align 2, !tbaa !372
  br label %73

73:                                               ; preds = %71, %65
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %58) #20
  %74 = getelementptr inbounds %struct.Nurb, ptr %58, i64 0, i32 18
  %75 = load ptr, ptr %74, align 8, !tbaa !24
  %76 = icmp eq ptr %75, null
  br i1 %76, label %90, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.Nurb, ptr %58, i64 0, i32 6
  %79 = load i32, ptr %78, align 8, !tbaa !23
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %89, label %81

81:                                               ; preds = %77, %81
  %82 = phi i32 [ %84, %81 ], [ %79, %77 ]
  %83 = phi ptr [ %87, %81 ], [ %75, %77 ]
  %84 = add nsw i32 %82, -1
  call void @mul_m4_v3(ptr noundef nonnull %5, ptr noundef nonnull %83) #20
  %85 = getelementptr inbounds [3 x [3 x float]], ptr %83, i64 0, i64 1
  call void @mul_m4_v3(ptr noundef nonnull %5, ptr noundef nonnull %85) #20
  %86 = getelementptr inbounds [3 x [3 x float]], ptr %83, i64 0, i64 2
  call void @mul_m4_v3(ptr noundef nonnull %5, ptr noundef nonnull %86) #20
  %87 = getelementptr inbounds %struct.BezTriple, ptr %83, i64 1
  %88 = icmp eq i32 %84, 0
  br i1 %88, label %89, label %81, !llvm.loop !373

89:                                               ; preds = %81, %77
  call void @BKE_nurb_handles_calc(ptr noundef %58) #20
  br label %90

90:                                               ; preds = %89, %73
  %91 = getelementptr inbounds %struct.Nurb, ptr %58, i64 0, i32 17
  %92 = load ptr, ptr %91, align 8, !tbaa !32
  %93 = icmp eq ptr %92, null
  br i1 %93, label %107, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.Nurb, ptr %58, i64 0, i32 6
  %96 = load i32, ptr %95, align 8, !tbaa !23
  %97 = getelementptr inbounds %struct.Nurb, ptr %57, i64 0, i32 7
  %98 = load i32, ptr %97, align 4, !tbaa !31
  %99 = mul nsw i32 %98, %96
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %94, %101
  %102 = phi i32 [ %104, %101 ], [ %99, %94 ]
  %103 = phi ptr [ %105, %101 ], [ %92, %94 ]
  %104 = add nsw i32 %102, -1
  call void @mul_m4_v3(ptr noundef nonnull %5, ptr noundef nonnull %103) #20
  %105 = getelementptr inbounds %struct.BPoint, ptr %103, i64 1
  %106 = icmp eq i32 %104, 0
  br i1 %106, label %107, label %101, !llvm.loop !374

107:                                              ; preds = %101, %94, %90
  %108 = load ptr, ptr %57, align 8, !tbaa !36
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %56, !llvm.loop !375

110:                                              ; preds = %107, %52, %46
  call void @ED_base_object_free_and_unlink(ptr noundef %8, ptr noundef %9, ptr noundef %37) #20
  br label %111

111:                                              ; preds = %110, %34
  %112 = load ptr, ptr %35, align 8, !tbaa !36
  %113 = icmp eq ptr %112, null
  br i1 %113, label %114, label %34, !llvm.loop !376

114:                                              ; preds = %111, %25
  call void @BLI_freelistN(ptr noundef nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %7) #20
  %115 = getelementptr inbounds %struct.Object, ptr %10, i64 0, i32 19
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = getelementptr inbounds %struct.Curve, ptr %116, i64 0, i32 3
  call void @BLI_movelisttolist(ptr noundef nonnull %117, ptr noundef nonnull %3) #20
  call void @DAG_relations_tag_update(ptr noundef %8) #20
  call void @ED_object_editmode_enter(ptr noundef %0, i32 noundef 4) #20
  call void @ED_object_editmode_exit(ptr noundef %0, i32 noundef 13) #20
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 67567616, ptr noundef %9) #20
  br label %118

118:                                              ; preds = %114, %22
  %119 = phi i32 [ 2, %22 ], [ 4, %114 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  ret i32 %119
}

declare ptr @CTX_data_main(ptr noundef) local_unnamed_addr #6

declare ptr @CTX_data_scene(ptr noundef) local_unnamed_addr #6

declare ptr @CTX_data_active_object(ptr noundef) local_unnamed_addr #6

declare i32 @CTX_data_selected_editable_bases(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BLI_freelistN(ptr noundef) local_unnamed_addr #6

declare void @BKE_report(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @invert_m4_m4(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @mul_m4_m4m4(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @mul_m4_v3(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BKE_nurb_handles_calc(ptr noundef) local_unnamed_addr #6

declare void @ED_base_object_free_and_unlink(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BLI_movelisttolist(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @DAG_relations_tag_update(ptr noundef) local_unnamed_addr #6

declare void @ED_object_editmode_enter(ptr noundef, i32 noundef) local_unnamed_addr #6

declare void @ED_object_editmode_exit(ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_tilt_clear(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.174, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.175, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.176, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @clear_tilt_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @ED_operator_editcurve, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @clear_tilt_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %4 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 19
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.Object, ptr %3, i64 0, i32 3
  %7 = load i16, ptr %6, align 8, !tbaa !5
  %8 = and i16 %7, -2
  %9 = icmp eq i16 %8, 2
  tail call void @llvm.assume(i1 %9)
  %10 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 4
  %11 = load ptr, ptr %10, align 8, !tbaa !18
  %12 = load ptr, ptr %11, align 8, !tbaa !36
  %13 = icmp eq ptr %12, null
  br i1 %13, label %141, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.Curve, ptr %5, i64 0, i32 16
  br label %16

16:                                               ; preds = %14, %138
  %17 = phi ptr [ %12, %14 ], [ %139, %138 ]
  %18 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 18
  %19 = load ptr, ptr %18, align 8, !tbaa !24
  %20 = icmp eq ptr %19, null
  br i1 %20, label %90, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 6
  %23 = load i32, ptr %22, align 8, !tbaa !23
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %138, label %25

25:                                               ; preds = %21
  %26 = add i32 %23, -1
  %27 = load i16, ptr %15, align 8, !tbaa !198
  %28 = and i16 %27, 1
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %47, label %30

30:                                               ; preds = %25
  %31 = and i32 %23, 1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %43, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 0, i32 8
  %35 = load i8, ptr %34, align 4, !tbaa !29
  %36 = and i8 %35, 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 0, i32 1
  store float 0.000000e+00, ptr %39, align 4, !tbaa !95
  br label %40

40:                                               ; preds = %38, %33
  %41 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 1
  %42 = add i32 %23, -2
  br label %43

43:                                               ; preds = %40, %30
  %44 = phi i32 [ %26, %30 ], [ %42, %40 ]
  %45 = phi ptr [ %19, %30 ], [ %41, %40 ]
  %46 = icmp eq i32 %26, 0
  br i1 %46, label %138, label %70

47:                                               ; preds = %25, %66
  %48 = phi i32 [ %68, %66 ], [ %26, %25 ]
  %49 = phi ptr [ %67, %66 ], [ %19, %25 ]
  %50 = getelementptr inbounds %struct.BezTriple, ptr %49, i64 0, i32 8
  %51 = load i8, ptr %50, align 4, !tbaa !29
  %52 = and i8 %51, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %64

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.BezTriple, ptr %49, i64 0, i32 7
  %56 = load i8, ptr %55, align 1, !tbaa !27
  %57 = and i8 %56, 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.BezTriple, ptr %49, i64 0, i32 9
  %61 = load i8, ptr %60, align 1, !tbaa !30
  %62 = and i8 %61, 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %66, label %64

64:                                               ; preds = %59, %54, %47
  %65 = getelementptr inbounds %struct.BezTriple, ptr %49, i64 0, i32 1
  store float 0.000000e+00, ptr %65, align 4, !tbaa !95
  br label %66

66:                                               ; preds = %64, %59
  %67 = getelementptr inbounds %struct.BezTriple, ptr %49, i64 1
  %68 = add nsw i32 %48, -1
  %69 = icmp eq i32 %48, 0
  br i1 %69, label %138, label %47, !llvm.loop !377

70:                                               ; preds = %43, %86
  %71 = phi i32 [ %88, %86 ], [ %44, %43 ]
  %72 = phi ptr [ %87, %86 ], [ %45, %43 ]
  %73 = getelementptr inbounds %struct.BezTriple, ptr %72, i64 0, i32 8
  %74 = load i8, ptr %73, align 4, !tbaa !29
  %75 = and i8 %74, 1
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.BezTriple, ptr %72, i64 0, i32 1
  store float 0.000000e+00, ptr %78, align 4, !tbaa !95
  br label %79

79:                                               ; preds = %77, %70
  %80 = getelementptr inbounds %struct.BezTriple, ptr %72, i64 1, i32 8
  %81 = load i8, ptr %80, align 4, !tbaa !29
  %82 = and i8 %81, 1
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %86, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %struct.BezTriple, ptr %72, i64 1, i32 1
  store float 0.000000e+00, ptr %85, align 4, !tbaa !95
  br label %86

86:                                               ; preds = %84, %79
  %87 = getelementptr inbounds %struct.BezTriple, ptr %72, i64 2
  %88 = add nsw i32 %71, -2
  %89 = icmp eq i32 %71, 1
  br i1 %89, label %138, label %70, !llvm.loop !377

90:                                               ; preds = %16
  %91 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 17
  %92 = load ptr, ptr %91, align 8, !tbaa !32
  %93 = icmp eq ptr %92, null
  br i1 %93, label %138, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 6
  %96 = load i32, ptr %95, align 8, !tbaa !23
  %97 = getelementptr inbounds %struct.Nurb, ptr %17, i64 0, i32 7
  %98 = load i32, ptr %97, align 4, !tbaa !31
  %99 = mul nsw i32 %98, %96
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %138, label %101

101:                                              ; preds = %94
  %102 = and i32 %99, 1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %101
  %105 = add nsw i32 %99, -1
  %106 = getelementptr inbounds %struct.BPoint, ptr %92, i64 0, i32 3
  %107 = load i16, ptr %106, align 4, !tbaa !34
  %108 = and i16 %107, 1
  %109 = icmp eq i16 %108, 0
  br i1 %109, label %112, label %110

110:                                              ; preds = %104
  %111 = getelementptr inbounds %struct.BPoint, ptr %92, i64 0, i32 1
  store float 0.000000e+00, ptr %111, align 4, !tbaa !97
  br label %112

112:                                              ; preds = %110, %104
  %113 = getelementptr inbounds %struct.BPoint, ptr %92, i64 1
  br label %114

114:                                              ; preds = %112, %101
  %115 = phi i32 [ %99, %101 ], [ %105, %112 ]
  %116 = phi ptr [ %92, %101 ], [ %113, %112 ]
  %117 = icmp eq i32 %99, 1
  br i1 %117, label %138, label %118

118:                                              ; preds = %114, %135
  %119 = phi i32 [ %128, %135 ], [ %115, %114 ]
  %120 = phi ptr [ %136, %135 ], [ %116, %114 ]
  %121 = getelementptr inbounds %struct.BPoint, ptr %120, i64 0, i32 3
  %122 = load i16, ptr %121, align 4, !tbaa !34
  %123 = and i16 %122, 1
  %124 = icmp eq i16 %123, 0
  br i1 %124, label %127, label %125

125:                                              ; preds = %118
  %126 = getelementptr inbounds %struct.BPoint, ptr %120, i64 0, i32 1
  store float 0.000000e+00, ptr %126, align 4, !tbaa !97
  br label %127

127:                                              ; preds = %125, %118
  %128 = add nsw i32 %119, -2
  %129 = getelementptr inbounds %struct.BPoint, ptr %120, i64 1, i32 3
  %130 = load i16, ptr %129, align 4, !tbaa !34
  %131 = and i16 %130, 1
  %132 = icmp eq i16 %131, 0
  br i1 %132, label %135, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %struct.BPoint, ptr %120, i64 1, i32 1
  store float 0.000000e+00, ptr %134, align 4, !tbaa !97
  br label %135

135:                                              ; preds = %133, %127
  %136 = getelementptr inbounds %struct.BPoint, ptr %120, i64 2
  %137 = icmp eq i32 %128, 0
  br i1 %137, label %138, label %118, !llvm.loop !378

138:                                              ; preds = %43, %86, %66, %114, %135, %21, %94, %90
  %139 = load ptr, ptr %17, align 8, !tbaa !36
  %140 = icmp eq ptr %139, null
  br i1 %140, label %141, label %16, !llvm.loop !379

141:                                              ; preds = %138, %2
  tail call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %5) #20
  %142 = load ptr, ptr %4, align 8, !tbaa !17
  tail call void @DAG_id_tag_update(ptr noundef %142, i16 noundef signext 0) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @undo_push_curve(ptr noundef %0, ptr noundef %1) local_unnamed_addr #5 {
  tail call void @undo_editmode_push(ptr noundef %0, ptr noundef %1, ptr noundef nonnull @get_data, ptr noundef nonnull @free_undoCurve, ptr noundef nonnull @undoCurve_to_editCurve, ptr noundef nonnull @editCurve_to_undoCurve, ptr noundef null) #20
  ret void
}

declare void @undo_editmode_push(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @get_data(ptr noundef %0) #5 {
  %2 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  ret ptr %2
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @free_undoCurve(ptr noundef %0) #5 {
  tail call void @BKE_nurbList_free(ptr noundef %0) #20
  %2 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !380
  %4 = icmp eq ptr %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void @BLI_ghash_free(ptr noundef nonnull %3, ptr noundef null, ptr noundef %6) #20
  br label %7

7:                                                ; preds = %5, %1
  %8 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 3
  tail call void @free_fcurves(ptr noundef nonnull %8) #20
  %9 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 4
  tail call void @free_fcurves(ptr noundef nonnull %9) #20
  %10 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %10(ptr noundef nonnull %0) #20
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal void @undoCurve_to_editCurve(ptr noundef %0, ptr nocapture readnone %1, ptr noundef %2) #5 {
  %4 = tail call ptr @BKE_curve_editNurbs_get(ptr noundef %2) #20
  %5 = getelementptr inbounds %struct.Curve, ptr %2, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  %7 = tail call ptr @BKE_animdata_from_id(ptr noundef %2) #20
  tail call void @BKE_nurbList_free(ptr noundef %4) #20
  %8 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !380
  %10 = icmp eq ptr %9, null
  br i1 %10, label %17, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.EditNurb, ptr %6, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !47
  %14 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void @BLI_ghash_free(ptr noundef %13, ptr noundef null, ptr noundef %14) #20
  %15 = load ptr, ptr %8, align 8, !tbaa !380
  %16 = tail call fastcc ptr @dupli_keyIndexHash(ptr noundef %15)
  store ptr %16, ptr %12, align 8, !tbaa !47
  br label %17

17:                                               ; preds = %11, %3
  %18 = icmp eq ptr %7, null
  br i1 %18, label %30, label %19

19:                                               ; preds = %17
  %20 = load ptr, ptr %7, align 8, !tbaa !49
  %21 = icmp eq ptr %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.bAction, ptr %20, i64 0, i32 1
  tail call void @free_fcurves(ptr noundef nonnull %23) #20
  %24 = load ptr, ptr %7, align 8, !tbaa !49
  %25 = getelementptr inbounds %struct.bAction, ptr %24, i64 0, i32 1
  %26 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 3
  tail call void @copy_fcurves(ptr noundef nonnull %25, ptr noundef nonnull %26) #20
  br label %27

27:                                               ; preds = %22, %19
  %28 = getelementptr inbounds %struct.AnimData, ptr %7, i64 0, i32 5
  tail call void @free_fcurves(ptr noundef nonnull %28) #20
  %29 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 4
  tail call void @copy_fcurves(ptr noundef nonnull %28, ptr noundef nonnull %29) #20
  br label %30

30:                                               ; preds = %27, %17
  %31 = load ptr, ptr %0, align 8, !tbaa !36
  %32 = icmp eq ptr %31, null
  br i1 %32, label %44, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.EditNurb, ptr %6, i64 0, i32 1
  br label %35

35:                                               ; preds = %33, %41
  %36 = phi ptr [ %31, %33 ], [ %42, %41 ]
  %37 = tail call ptr @BKE_nurb_duplicate(ptr noundef nonnull %36) #20
  %38 = load ptr, ptr %34, align 8, !tbaa !47
  %39 = icmp eq ptr %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %35
  tail call fastcc void @keyIndex_updateNurb(ptr noundef nonnull %6, ptr noundef nonnull %36, ptr noundef %37)
  br label %41

41:                                               ; preds = %40, %35
  tail call void @BLI_addtail(ptr noundef %4, ptr noundef %37) #20
  %42 = load ptr, ptr %36, align 8, !tbaa !36
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %35, !llvm.loop !382

44:                                               ; preds = %41, %30
  %45 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 1
  %46 = load i32, ptr %45, align 8, !tbaa !383
  %47 = getelementptr inbounds %struct.Curve, ptr %2, i64 0, i32 32
  store i32 %46, ptr %47, align 8, !tbaa !174
  %48 = getelementptr inbounds %struct.UndoCurve, ptr %0, i64 0, i32 5
  %49 = load i32, ptr %48, align 8, !tbaa !384
  %50 = getelementptr inbounds %struct.Curve, ptr %2, i64 0, i32 31
  store i32 %49, ptr %50, align 4, !tbaa !173
  %51 = tail call ptr @BKE_animdata_from_id(ptr noundef %2) #20
  %52 = load ptr, ptr %5, align 8, !tbaa !18
  %53 = getelementptr inbounds %struct.EditNurb, ptr %52, i64 0, i32 1
  %54 = load ptr, ptr %53, align 8, !tbaa !47
  %55 = icmp eq ptr %54, null
  br i1 %55, label %73, label %56

56:                                               ; preds = %44
  %57 = tail call ptr @BKE_animdata_from_id(ptr noundef nonnull %2) #20
  %58 = icmp eq ptr %57, null
  br i1 %58, label %73, label %59

59:                                               ; preds = %56
  %60 = load ptr, ptr %57, align 8, !tbaa !49
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %66

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.AnimData, ptr %57, i64 0, i32 5
  %64 = load ptr, ptr %63, align 8, !tbaa !51
  %65 = icmp eq ptr %64, null
  br i1 %65, label %73, label %66

66:                                               ; preds = %62, %59
  %67 = load ptr, ptr %51, align 8, !tbaa !49
  %68 = icmp eq ptr %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %struct.bAction, ptr %67, i64 0, i32 1
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %2, ptr noundef nonnull %70)
  br label %71

71:                                               ; preds = %69, %66
  %72 = getelementptr inbounds %struct.AnimData, ptr %51, i64 0, i32 5
  tail call fastcc void @curve_rename_fcurves(ptr noundef nonnull %2, ptr noundef nonnull %72)
  br label %73

73:                                               ; preds = %44, %56, %62, %71
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal ptr @editCurve_to_undoCurve(ptr nocapture readnone %0, ptr noundef %1) #5 {
  %3 = alloca %struct.EditNurb, align 8
  %4 = tail call ptr @BKE_curve_editNurbs_get(ptr noundef %1) #20
  %5 = getelementptr inbounds %struct.Curve, ptr %1, i64 0, i32 4
  %6 = load ptr, ptr %5, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #20
  %7 = tail call ptr @BKE_animdata_from_id(ptr noundef %1) #20
  %8 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %9 = tail call ptr %8(i64 noundef 72, ptr noundef nonnull @.str.232) #20
  %10 = getelementptr inbounds %struct.EditNurb, ptr %6, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !47
  %12 = icmp eq ptr %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = tail call fastcc ptr @dupli_keyIndexHash(ptr noundef nonnull %11)
  %15 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 2
  store ptr %14, ptr %15, align 8, !tbaa !380
  %16 = getelementptr inbounds %struct.EditNurb, ptr %3, i64 0, i32 1
  store ptr %14, ptr %16, align 8, !tbaa !47
  br label %17

17:                                               ; preds = %13, %2
  %18 = icmp eq ptr %7, null
  br i1 %18, label %28, label %19

19:                                               ; preds = %17
  %20 = load ptr, ptr %7, align 8, !tbaa !49
  %21 = icmp eq ptr %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 3
  %24 = getelementptr inbounds %struct.bAction, ptr %20, i64 0, i32 1
  tail call void @copy_fcurves(ptr noundef nonnull %23, ptr noundef nonnull %24) #20
  br label %25

25:                                               ; preds = %22, %19
  %26 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 4
  %27 = getelementptr inbounds %struct.AnimData, ptr %7, i64 0, i32 5
  tail call void @copy_fcurves(ptr noundef nonnull %26, ptr noundef nonnull %27) #20
  br label %28

28:                                               ; preds = %25, %17
  %29 = load ptr, ptr %4, align 8, !tbaa !36
  %30 = icmp eq ptr %29, null
  br i1 %30, label %42, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 2
  br label %33

33:                                               ; preds = %31, %39
  %34 = phi ptr [ %29, %31 ], [ %40, %39 ]
  %35 = tail call ptr @BKE_nurb_duplicate(ptr noundef nonnull %34) #20
  %36 = load ptr, ptr %32, align 8, !tbaa !380
  %37 = icmp eq ptr %36, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  call fastcc void @keyIndex_updateNurb(ptr noundef nonnull %3, ptr noundef nonnull %34, ptr noundef %35)
  br label %39

39:                                               ; preds = %38, %33
  tail call void @BLI_addtail(ptr noundef nonnull %9, ptr noundef %35) #20
  %40 = load ptr, ptr %34, align 8, !tbaa !36
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %33, !llvm.loop !385

42:                                               ; preds = %39, %28
  %43 = getelementptr inbounds %struct.Curve, ptr %1, i64 0, i32 32
  %44 = load i32, ptr %43, align 8, !tbaa !174
  %45 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 1
  store i32 %44, ptr %45, align 8, !tbaa !383
  %46 = getelementptr inbounds %struct.Curve, ptr %1, i64 0, i32 31
  %47 = load i32, ptr %46, align 4, !tbaa !173
  %48 = getelementptr inbounds %struct.UndoCurve, ptr %9, i64 0, i32 5
  store i32 %47, ptr %48, align 8, !tbaa !384
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #20
  ret ptr %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @ED_curve_beztcpy(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #5 {
  %5 = sext i32 %3 to i64
  %6 = mul nsw i64 %5, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1, ptr align 4 %2, i64 %6, i1 false)
  %7 = getelementptr %struct.EditNurb, ptr %0, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !47
  %9 = icmp ne ptr %8, null
  %10 = icmp sgt i32 %3, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %26

12:                                               ; preds = %4, %21
  %13 = phi ptr [ %23, %21 ], [ %2, %4 ]
  %14 = phi i32 [ %24, %21 ], [ 0, %4 ]
  %15 = phi ptr [ %22, %21 ], [ %1, %4 ]
  %16 = load ptr, ptr %7, align 8, !tbaa !47
  %17 = tail call ptr @BLI_ghash_popkey(ptr noundef %16, ptr noundef %13, ptr noundef null) #20
  %18 = icmp eq ptr %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  %20 = load ptr, ptr %7, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %20, ptr noundef %15, ptr noundef nonnull %17) #20
  br label %21

21:                                               ; preds = %19, %12
  %22 = getelementptr inbounds i8, ptr %15, i64 72
  %23 = getelementptr inbounds i8, ptr %13, i64 72
  %24 = add nuw nsw i32 %14, 1
  %25 = icmp eq i32 %24, %3
  br i1 %25, label %26, label %12, !llvm.loop !157

26:                                               ; preds = %21, %4
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ED_curve_active_center(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #5 {
  %3 = alloca ptr, align 8
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #20
  store ptr null, ptr %3, align 8, !tbaa !36
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #20
  store ptr null, ptr %4, align 8, !tbaa !36
  %5 = call zeroext i8 @BKE_curve_nurb_vert_active_get(ptr noundef %0, ptr noundef nonnull %3, ptr noundef nonnull %4) #20
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %30, label %7

7:                                                ; preds = %2
  %8 = load ptr, ptr %3, align 8, !tbaa !36
  %9 = getelementptr inbounds %struct.Nurb, ptr %8, i64 0, i32 2
  %10 = load i16, ptr %9, align 8, !tbaa !21
  %11 = icmp eq i16 %10, 1
  %12 = load ptr, ptr %4, align 8, !tbaa !36
  br i1 %11, label %13, label %20

13:                                               ; preds = %7
  %14 = getelementptr inbounds [3 x [3 x float]], ptr %12, i64 0, i64 1
  %15 = load float, ptr %14, align 4, !tbaa !40
  store float %15, ptr %1, align 4, !tbaa !40
  %16 = getelementptr inbounds [3 x [3 x float]], ptr %12, i64 0, i64 1, i64 1
  %17 = load float, ptr %16, align 4, !tbaa !40
  %18 = getelementptr inbounds float, ptr %1, i64 1
  store float %17, ptr %18, align 4, !tbaa !40
  %19 = getelementptr inbounds [3 x [3 x float]], ptr %12, i64 0, i64 1, i64 2
  br label %26

20:                                               ; preds = %7
  %21 = load float, ptr %12, align 4, !tbaa !40
  store float %21, ptr %1, align 4, !tbaa !40
  %22 = getelementptr inbounds float, ptr %12, i64 1
  %23 = load float, ptr %22, align 4, !tbaa !40
  %24 = getelementptr inbounds float, ptr %1, i64 1
  store float %23, ptr %24, align 4, !tbaa !40
  %25 = getelementptr inbounds float, ptr %12, i64 2
  br label %26

26:                                               ; preds = %20, %13
  %27 = phi ptr [ %19, %13 ], [ %25, %20 ]
  %28 = load float, ptr %27, align 4, !tbaa !40
  %29 = getelementptr inbounds float, ptr %1, i64 2
  store float %28, ptr %29, align 4, !tbaa !40
  br label %30

30:                                               ; preds = %26, %2
  %31 = phi i8 [ 0, %2 ], [ 1, %26 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #20
  ret i8 %31
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @CURVE_OT_match_texture_space(ptr nocapture noundef writeonly %0) local_unnamed_addr #10 {
  store ptr @.str.177, ptr %0, align 8, !tbaa !140
  %2 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 1
  store ptr @.str.178, ptr %2, align 8, !tbaa !143
  %3 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 3
  store ptr @.str.179, ptr %3, align 8, !tbaa !144
  %4 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 4
  store ptr @match_texture_space_exec, ptr %4, align 8, !tbaa !145
  %5 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 9
  store ptr @match_texture_space_poll, ptr %5, align 8, !tbaa !146
  %6 = getelementptr inbounds %struct.wmOperatorType, ptr %0, i64 0, i32 19
  store i16 3, ptr %6, align 8, !tbaa !147
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @match_texture_space_exec(ptr noundef %0, ptr nocapture readnone %1) #5 {
  %3 = alloca [3 x float], align 8
  %4 = alloca [3 x float], align 8
  %5 = alloca [3 x float], align 8
  %6 = tail call ptr @CTX_data_scene(ptr noundef %0) #20
  %7 = tail call ptr @CTX_data_active_object(ptr noundef %0) #20
  %8 = getelementptr inbounds %struct.Object, ptr %7, i64 0, i32 19
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.lifetime.start.p0(i64 12, ptr nonnull %5) #20
  %10 = getelementptr inbounds %struct.Object, ptr %7, i64 0, i32 118
  %11 = load ptr, ptr %10, align 8, !tbaa !386
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  tail call void @BKE_displist_make_curveTypes(ptr noundef %6, ptr noundef nonnull %7, i8 noundef zeroext 0) #20
  %14 = load ptr, ptr %10, align 8, !tbaa !386
  br label %15

15:                                               ; preds = %13, %2
  %16 = phi ptr [ %14, %13 ], [ %11, %2 ]
  %17 = getelementptr inbounds [3 x float], ptr %3, i64 0, i64 2
  store float 0x46293E5940000000, ptr %17, align 8, !tbaa !40
  %18 = getelementptr inbounds [3 x float], ptr %3, i64 0, i64 1
  store <2 x float> <float 0x46293E5940000000, float 0x46293E5940000000>, ptr %3, align 8, !tbaa !40
  %19 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 2
  store float 0xC6293E5940000000, ptr %19, align 8, !tbaa !40
  %20 = getelementptr inbounds [3 x float], ptr %4, i64 0, i64 1
  store <2 x float> <float 0xC6293E5940000000, float 0xC6293E5940000000>, ptr %4, align 8, !tbaa !40
  call void @BKE_displist_minmax(ptr noundef %16, ptr noundef nonnull %3, ptr noundef nonnull %4) #20
  call void @mid_v3_v3v3(ptr noundef nonnull %5, ptr noundef nonnull %3, ptr noundef nonnull %4) #20
  %21 = load float, ptr %4, align 8, !tbaa !40
  %22 = load float, ptr %3, align 8, !tbaa !40
  %23 = fsub fast float %21, %22
  %24 = fmul fast float %23, 5.000000e-01
  %25 = load float, ptr %20, align 4, !tbaa !40
  %26 = load float, ptr %18, align 4, !tbaa !40
  %27 = fsub fast float %25, %26
  %28 = fmul fast float %27, 5.000000e-01
  %29 = load float, ptr %19, align 8, !tbaa !40
  %30 = load float, ptr %17, align 8, !tbaa !40
  %31 = fsub fast float %29, %30
  %32 = fmul fast float %31, 5.000000e-01
  %33 = fcmp fast oeq float %24, 0.000000e+00
  br i1 %33, label %43, label %34

34:                                               ; preds = %15
  %35 = fcmp fast ogt float %24, 0.000000e+00
  %36 = fcmp fast olt float %24, 0x3EE4F8B580000000
  %37 = select i1 %35, i1 %36, i1 false
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = fcmp fast olt float %24, 0.000000e+00
  %40 = fcmp fast ogt float %24, 0xBEE4F8B580000000
  %41 = select i1 %39, i1 %40, i1 false
  %42 = select i1 %41, float 0xBEE4F8B580000000, float %24
  br label %43

43:                                               ; preds = %38, %34, %15
  %44 = phi float [ 1.000000e+00, %15 ], [ 0x3EE4F8B580000000, %34 ], [ %42, %38 ]
  %45 = fcmp fast oeq float %28, 0.000000e+00
  br i1 %45, label %55, label %46

46:                                               ; preds = %43
  %47 = fcmp fast ogt float %28, 0.000000e+00
  %48 = fcmp fast olt float %28, 0x3EE4F8B580000000
  %49 = select i1 %47, i1 %48, i1 false
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = fcmp fast olt float %28, 0.000000e+00
  %52 = fcmp fast ogt float %28, 0xBEE4F8B580000000
  %53 = select i1 %51, i1 %52, i1 false
  %54 = select i1 %53, float 0xBEE4F8B580000000, float %28
  br label %55

55:                                               ; preds = %50, %43, %46
  %56 = phi float [ 0x3EE4F8B580000000, %46 ], [ 1.000000e+00, %43 ], [ %54, %50 ]
  %57 = fcmp fast oeq float %32, 0.000000e+00
  br i1 %57, label %67, label %58

58:                                               ; preds = %55
  %59 = fcmp fast ogt float %32, 0.000000e+00
  %60 = fcmp fast olt float %32, 0x3EE4F8B580000000
  %61 = select i1 %59, i1 %60, i1 false
  br i1 %61, label %67, label %62

62:                                               ; preds = %58
  %63 = fcmp fast olt float %32, 0.000000e+00
  %64 = fcmp fast ogt float %32, 0xBEE4F8B580000000
  %65 = select i1 %63, i1 %64, i1 false
  %66 = select i1 %65, float 0xBEE4F8B580000000, float %32
  br label %67

67:                                               ; preds = %62, %55, %58
  %68 = phi float [ 0x3EE4F8B580000000, %58 ], [ 1.000000e+00, %55 ], [ %66, %62 ]
  %69 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 11
  %70 = load <2 x float>, ptr %5, align 8, !tbaa !40
  store <2 x float> %70, ptr %69, align 4, !tbaa !40
  %71 = getelementptr inbounds float, ptr %5, i64 2
  %72 = load float, ptr %71, align 8, !tbaa !40
  %73 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 11, i64 2
  store float %72, ptr %73, align 4, !tbaa !40
  %74 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 12
  store float %44, ptr %74, align 4, !tbaa !40
  %75 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 12, i64 1
  store float %56, ptr %75, align 4, !tbaa !40
  %76 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 12, i64 2
  store float %68, ptr %76, align 4, !tbaa !40
  %77 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 13
  store <2 x float> zeroinitializer, ptr %77, align 4, !tbaa !40
  %78 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 13, i64 2
  store float 0.000000e+00, ptr %78, align 4, !tbaa !40
  %79 = getelementptr inbounds %struct.Curve, ptr %9, i64 0, i32 15
  %80 = load i16, ptr %79, align 2, !tbaa !387
  %81 = and i16 %80, -2
  store i16 %81, ptr %79, align 2, !tbaa !387
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %9) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 12, ptr nonnull %3) #20
  ret i32 4
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @match_texture_space_poll(ptr noundef %0) #5 {
  %2 = tail call ptr @CTX_data_active_object(ptr noundef %0) #20
  %3 = icmp eq ptr %2, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.Object, ptr %2, i64 0, i32 3
  %6 = load i16, ptr %5, align 8, !tbaa !5
  %7 = and i16 %6, -2
  %8 = icmp eq i16 %7, 2
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = icmp eq i16 %6, 4
  %11 = zext i1 %10 to i32
  br label %12

12:                                               ; preds = %4, %9, %1
  %13 = phi i32 [ 0, %1 ], [ %11, %9 ], [ 1, %4 ]
  ret i32 %13
}

declare i64 @BLI_snprintf(ptr noundef, i64 noundef, ptr noundef, ...) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #12

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare ptr @strchr(ptr noundef, i32 noundef) local_unnamed_addr #12

declare ptr @BLI_ghash_lookup(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #12

declare ptr @copy_fcurve(ptr noundef) local_unnamed_addr #6

declare ptr @BLI_sprintfN(ptr noundef, ...) local_unnamed_addr #6

declare void @action_groups_remove_channel(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @action_groups_add_channel(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BLI_remlink(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @free_fcurve(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @initialize_index_map(ptr nocapture readonly %0, ptr nocapture noundef writeonly %1) unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !36
  %7 = icmp eq ptr %6, null
  br i1 %7, label %27, label %8

8:                                                ; preds = %2, %22
  %9 = phi ptr [ %25, %22 ], [ %6, %2 ]
  %10 = phi i32 [ %24, %22 ], [ 0, %2 ]
  %11 = getelementptr inbounds %struct.Nurb, ptr %9, i64 0, i32 18
  %12 = load ptr, ptr %11, align 8, !tbaa !24
  %13 = icmp eq ptr %12, null
  %14 = getelementptr inbounds %struct.Nurb, ptr %9, i64 0, i32 6
  %15 = load i32, ptr %14, align 8, !tbaa !23
  br i1 %13, label %18, label %16

16:                                               ; preds = %8
  %17 = mul nsw i32 %15, 3
  br label %22

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.Nurb, ptr %9, i64 0, i32 7
  %20 = load i32, ptr %19, align 4, !tbaa !31
  %21 = mul nsw i32 %20, %15
  br label %22

22:                                               ; preds = %16, %18
  %23 = phi i32 [ %17, %16 ], [ %21, %18 ]
  %24 = add nsw i32 %23, %10
  %25 = load ptr, ptr %9, align 8, !tbaa !36
  %26 = icmp eq ptr %25, null
  br i1 %26, label %27, label %8, !llvm.loop !388

27:                                               ; preds = %22, %2
  %28 = phi i32 [ 0, %2 ], [ %24, %22 ]
  %29 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %30 = sext i32 %28 to i64
  %31 = shl nsw i64 %30, 2
  %32 = tail call ptr %29(i64 noundef %31, ptr noundef nonnull @.str.189) #20
  %33 = icmp sgt i32 %28, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %27
  %35 = zext i32 %28 to i64
  %36 = shl nuw nsw i64 %35, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %32, i8 -1, i64 %36, i1 false), !tbaa !74
  br label %37

37:                                               ; preds = %34, %27
  %38 = load ptr, ptr %4, align 8, !tbaa !36
  %39 = icmp eq ptr %38, null
  br i1 %39, label %126, label %40

40:                                               ; preds = %37
  %41 = getelementptr i8, ptr %4, i64 16
  br label %42

42:                                               ; preds = %40, %122
  %43 = phi ptr [ %38, %40 ], [ %124, %122 ]
  %44 = phi i32 [ 0, %40 ], [ %123, %122 ]
  %45 = getelementptr inbounds %struct.Nurb, ptr %43, i64 0, i32 18
  %46 = load ptr, ptr %45, align 8, !tbaa !24
  %47 = icmp eq ptr %46, null
  %48 = getelementptr inbounds %struct.Nurb, ptr %43, i64 0, i32 6
  %49 = load i32, ptr %48, align 8, !tbaa !23
  br i1 %47, label %97, label %50

50:                                               ; preds = %42
  %51 = icmp eq i32 %49, 0
  br i1 %51, label %122, label %52

52:                                               ; preds = %50, %93
  %53 = phi i32 [ %56, %93 ], [ %49, %50 ]
  %54 = phi ptr [ %95, %93 ], [ %46, %50 ]
  %55 = phi i32 [ %94, %93 ], [ %44, %50 ]
  %56 = add nsw i32 %53, -1
  %57 = load ptr, ptr %41, align 8, !tbaa !47
  %58 = tail call ptr @BLI_ghash_lookup(ptr noundef %57, ptr noundef nonnull %54) #20
  %59 = icmp eq ptr %58, null
  br i1 %59, label %93, label %60

60:                                               ; preds = %52
  %61 = getelementptr inbounds %struct.CVKeyIndex, ptr %58, i64 0, i32 5
  %62 = load i8, ptr %61, align 8, !tbaa !55
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %60
  %65 = add nsw i32 %55, 2
  %66 = getelementptr inbounds %struct.CVKeyIndex, ptr %58, i64 0, i32 4
  %67 = load i32, ptr %66, align 4, !tbaa !116
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, ptr %32, i64 %68
  store i32 %65, ptr %69, align 4, !tbaa !74
  %70 = add nsw i32 %55, 1
  %71 = load i32, ptr %66, align 4, !tbaa !116
  %72 = add nsw i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, ptr %32, i64 %73
  store i32 %70, ptr %74, align 4, !tbaa !74
  br label %86

75:                                               ; preds = %60
  %76 = getelementptr inbounds %struct.CVKeyIndex, ptr %58, i64 0, i32 4
  %77 = load i32, ptr %76, align 4, !tbaa !116
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, ptr %32, i64 %78
  store i32 %55, ptr %79, align 4, !tbaa !74
  %80 = add nsw i32 %55, 1
  %81 = load i32, ptr %76, align 4, !tbaa !116
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, ptr %32, i64 %83
  store i32 %80, ptr %84, align 4, !tbaa !74
  %85 = add nsw i32 %55, 2
  br label %86

86:                                               ; preds = %75, %64
  %87 = phi ptr [ %66, %64 ], [ %76, %75 ]
  %88 = phi i32 [ %55, %64 ], [ %85, %75 ]
  %89 = load i32, ptr %87, align 4, !tbaa !116
  %90 = add nsw i32 %89, 2
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, ptr %32, i64 %91
  store i32 %88, ptr %92, align 4, !tbaa !74
  br label %93

93:                                               ; preds = %86, %52
  %94 = add nsw i32 %55, 3
  %95 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1
  %96 = icmp eq i32 %56, 0
  br i1 %96, label %122, label %52, !llvm.loop !389

97:                                               ; preds = %42
  %98 = getelementptr inbounds %struct.Nurb, ptr %43, i64 0, i32 7
  %99 = load i32, ptr %98, align 4, !tbaa !31
  %100 = mul nsw i32 %99, %49
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %122, label %102

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.Nurb, ptr %43, i64 0, i32 17
  %104 = load ptr, ptr %103, align 8, !tbaa !32
  br label %105

105:                                              ; preds = %102, %118
  %106 = phi i32 [ %109, %118 ], [ %100, %102 ]
  %107 = phi ptr [ %120, %118 ], [ %104, %102 ]
  %108 = phi i32 [ %119, %118 ], [ %44, %102 ]
  %109 = add nsw i32 %106, -1
  %110 = load ptr, ptr %41, align 8, !tbaa !47
  %111 = tail call ptr @BLI_ghash_lookup(ptr noundef %110, ptr noundef %107) #20
  %112 = icmp eq ptr %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds %struct.CVKeyIndex, ptr %111, i64 0, i32 4
  %115 = load i32, ptr %114, align 4, !tbaa !116
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, ptr %32, i64 %116
  store i32 %108, ptr %117, align 4, !tbaa !74
  br label %118

118:                                              ; preds = %113, %105
  %119 = add nsw i32 %108, 1
  %120 = getelementptr inbounds %struct.BPoint, ptr %107, i64 1
  %121 = icmp eq i32 %109, 0
  br i1 %121, label %122, label %105, !llvm.loop !390

122:                                              ; preds = %93, %118, %50, %97
  %123 = phi i32 [ %44, %97 ], [ %44, %50 ], [ %119, %118 ], [ %94, %93 ]
  %124 = load ptr, ptr %43, align 8, !tbaa !36
  %125 = icmp eq ptr %124, null
  br i1 %125, label %126, label %42, !llvm.loop !391

126:                                              ; preds = %122, %37
  store i32 %28, ptr %1, align 4, !tbaa !74
  ret ptr %32
}

declare ptr @BLI_findlink(ptr noundef, i32 noundef) local_unnamed_addr #6

declare i32 @BKE_nurbList_verts_count(ptr noundef) local_unnamed_addr #6

declare void @BKE_nurb_handle_calc(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #6

declare ptr @BLI_ghash_ptr_new(ptr noundef) local_unnamed_addr #6

declare void @BLI_ghash_insert(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @CTX_data_active_base(ptr noundef) local_unnamed_addr #6

declare void @WM_cursor_wait(i8 noundef zeroext) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @adduplicateflagNurb(ptr noundef readonly %0, ptr noundef %1, i8 noundef zeroext %2) unnamed_addr #5 {
  %4 = icmp ne ptr %0, null
  tail call void @llvm.assume(i1 %4)
  %5 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 3
  %6 = load i16, ptr %5, align 8, !tbaa !5
  %7 = and i16 %6, -2
  %8 = icmp eq i16 %7, 2
  tail call void @llvm.assume(i1 %8)
  %9 = getelementptr inbounds %struct.Object, ptr %0, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  %13 = getelementptr inbounds %struct.ListBase, ptr %12, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !36
  %15 = icmp eq ptr %14, null
  br i1 %15, label %1100, label %16

16:                                               ; preds = %3
  %17 = icmp eq i8 %2, 0
  %18 = select i1 %17, i16 -6, i16 -5
  br label %19

19:                                               ; preds = %16, %1096
  %20 = phi ptr [ %14, %16 ], [ %1098, %1096 ]
  %21 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 2
  %22 = load i16, ptr %21, align 8, !tbaa !21
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %236

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 18
  %26 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 6
  %27 = load i32, ptr %26, align 8, !tbaa !23
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %1096

29:                                               ; preds = %24
  %30 = load ptr, ptr %25, align 8, !tbaa !24
  %31 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 13
  br label %32

32:                                               ; preds = %29, %183
  %33 = phi i32 [ %27, %29 ], [ %186, %183 ]
  %34 = phi i32 [ 0, %29 ], [ %187, %183 ]
  %35 = phi i32 [ 0, %29 ], [ %188, %183 ]
  %36 = phi ptr [ %30, %29 ], [ %189, %183 ]
  %37 = add nsw i32 %33, -1
  %38 = tail call i32 @llvm.smax.i32(i32 %35, i32 %37)
  br i1 %17, label %39, label %68

39:                                               ; preds = %32, %65
  %40 = phi ptr [ %67, %65 ], [ %36, %32 ]
  %41 = phi i32 [ %66, %65 ], [ %35, %32 ]
  %42 = phi i32 [ %41, %65 ], [ -1, %32 ]
  %43 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 0, i32 7
  %44 = load i8, ptr %43, align 1, !tbaa !27
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  %47 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 0, i32 8
  %48 = load i8, ptr %47, align 4, !tbaa !29
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  %51 = select i1 %46, i1 %50, i1 false
  br i1 %51, label %52, label %57

52:                                               ; preds = %39
  %53 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 0, i32 9
  %54 = load i8, ptr %53, align 1, !tbaa !30
  %55 = and i8 %54, 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %91, label %57

57:                                               ; preds = %39, %52
  %58 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 0, i32 8
  %59 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 0, i32 9
  %60 = and i8 %44, -2
  store i8 %60, ptr %43, align 1, !tbaa !27
  %61 = and i8 %48, -2
  store i8 %61, ptr %58, align 4, !tbaa !29
  %62 = load i8, ptr %59, align 1, !tbaa !30
  %63 = and i8 %62, -2
  store i8 %63, ptr %59, align 1, !tbaa !30
  %64 = icmp eq i32 %41, %38
  br i1 %64, label %96, label %65

65:                                               ; preds = %57
  %66 = add i32 %41, 1
  %67 = getelementptr inbounds %struct.BezTriple, ptr %40, i64 1
  br label %39, !llvm.loop !392

68:                                               ; preds = %32, %88
  %69 = phi ptr [ %90, %88 ], [ %36, %32 ]
  %70 = phi i32 [ %89, %88 ], [ %35, %32 ]
  %71 = phi i32 [ %70, %88 ], [ -1, %32 ]
  %72 = getelementptr inbounds %struct.BezTriple, ptr %69, i64 0, i32 7
  %73 = load i8, ptr %72, align 1, !tbaa !27
  %74 = and i8 %73, 1
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %86

76:                                               ; preds = %68
  %77 = getelementptr inbounds %struct.BezTriple, ptr %69, i64 0, i32 8
  %78 = load i8, ptr %77, align 4, !tbaa !29
  %79 = and i8 %78, 1
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %86

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.BezTriple, ptr %69, i64 0, i32 9
  %83 = load i8, ptr %82, align 1, !tbaa !30
  %84 = and i8 %83, 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %76, %68, %81
  %87 = icmp eq i32 %70, %38
  br i1 %87, label %96, label %88

88:                                               ; preds = %86
  %89 = add i32 %70, 1
  %90 = getelementptr inbounds %struct.BezTriple, ptr %69, i64 1
  br label %68, !llvm.loop !392

91:                                               ; preds = %81, %52
  %92 = phi ptr [ %40, %52 ], [ %69, %81 ]
  %93 = phi i32 [ %41, %52 ], [ %70, %81 ]
  %94 = phi i32 [ %42, %52 ], [ %71, %81 ]
  %95 = icmp slt i32 %94, %35
  br i1 %95, label %183, label %96

96:                                               ; preds = %86, %57, %91
  %97 = phi i32 [ %94, %91 ], [ %38, %57 ], [ %38, %86 ]
  %98 = phi i32 [ %93, %91 ], [ %38, %57 ], [ %38, %86 ]
  %99 = phi ptr [ %92, %91 ], [ %40, %57 ], [ %69, %86 ]
  %100 = sub nsw i32 %97, %35
  %101 = add nsw i32 %100, 1
  %102 = icmp ne i32 %35, 0
  %103 = icmp eq i32 %101, %33
  %104 = select i1 %102, i1 true, i1 %103
  br i1 %104, label %109, label %105

105:                                              ; preds = %96
  %106 = load i16, ptr %31, align 4, !tbaa !39
  %107 = and i16 %106, 1
  %108 = icmp eq i16 %107, 0
  br i1 %108, label %109, label %183

109:                                              ; preds = %105, %96
  %110 = icmp eq i32 %97, %37
  %111 = select i1 %110, i32 %34, i32 0
  %112 = add nsw i32 %101, %111
  %113 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %112, i32 noundef 1) #20
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %113) #20
  %114 = getelementptr inbounds %struct.Nurb, ptr %113, i64 0, i32 18
  %115 = load ptr, ptr %114, align 8, !tbaa !24
  %116 = load ptr, ptr %25, align 8, !tbaa !24
  %117 = sext i32 %35 to i64
  %118 = getelementptr inbounds %struct.BezTriple, ptr %116, i64 %117
  %119 = sext i32 %101 to i64
  %120 = mul nsw i64 %119, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %115, ptr align 4 %118, i64 %120, i1 false)
  %121 = icmp eq i32 %111, 0
  br i1 %121, label %128, label %122

122:                                              ; preds = %109
  %123 = load ptr, ptr %114, align 8, !tbaa !24
  %124 = getelementptr inbounds %struct.BezTriple, ptr %123, i64 %119
  %125 = load ptr, ptr %25, align 8, !tbaa !24
  %126 = sext i32 %34 to i64
  %127 = mul nsw i64 %126, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %124, ptr align 4 %125, i64 %127, i1 false)
  br label %128

128:                                              ; preds = %122, %109
  %129 = phi i32 [ 0, %122 ], [ %34, %109 ]
  %130 = load i32, ptr %26, align 8, !tbaa !23
  %131 = icmp eq i32 %112, %130
  br i1 %131, label %136, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.Nurb, ptr %113, i64 0, i32 13
  %134 = load i16, ptr %133, align 4, !tbaa !39
  %135 = and i16 %134, -2
  store i16 %135, ptr %133, align 4, !tbaa !39
  br label %136

136:                                              ; preds = %132, %128
  %137 = getelementptr inbounds %struct.Nurb, ptr %113, i64 0, i32 6
  %138 = load i32, ptr %137, align 8, !tbaa !23
  %139 = icmp sgt i32 %138, 0
  br i1 %139, label %140, label %183

140:                                              ; preds = %136
  %141 = load ptr, ptr %114, align 8, !tbaa !24
  %142 = and i32 %138, 1
  %143 = icmp eq i32 %138, 1
  br i1 %143, label %170, label %144

144:                                              ; preds = %140
  %145 = and i32 %138, -2
  br label %146

146:                                              ; preds = %146, %144
  %147 = phi ptr [ %141, %144 ], [ %167, %146 ]
  %148 = phi i32 [ 0, %144 ], [ %168, %146 ]
  %149 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 0, i32 7
  %150 = load i8, ptr %149, align 1, !tbaa !27
  %151 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 0, i32 8
  %152 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 0, i32 9
  %153 = or i8 %150, 1
  store i8 %153, ptr %149, align 1, !tbaa !27
  %154 = load i8, ptr %151, align 4, !tbaa !29
  %155 = or i8 %154, 1
  store i8 %155, ptr %151, align 4, !tbaa !29
  %156 = load i8, ptr %152, align 1, !tbaa !30
  %157 = or i8 %156, 1
  store i8 %157, ptr %152, align 1, !tbaa !30
  %158 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 1, i32 7
  %159 = load i8, ptr %158, align 1, !tbaa !27
  %160 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 1, i32 8
  %161 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 1, i32 9
  %162 = or i8 %159, 1
  store i8 %162, ptr %158, align 1, !tbaa !27
  %163 = load i8, ptr %160, align 4, !tbaa !29
  %164 = or i8 %163, 1
  store i8 %164, ptr %160, align 4, !tbaa !29
  %165 = load i8, ptr %161, align 1, !tbaa !30
  %166 = or i8 %165, 1
  store i8 %166, ptr %161, align 1, !tbaa !30
  %167 = getelementptr inbounds %struct.BezTriple, ptr %147, i64 2
  %168 = add i32 %148, 2
  %169 = icmp eq i32 %168, %145
  br i1 %169, label %170, label %146, !llvm.loop !393

170:                                              ; preds = %146, %140
  %171 = phi ptr [ %141, %140 ], [ %167, %146 ]
  %172 = icmp eq i32 %142, 0
  br i1 %172, label %183, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds %struct.BezTriple, ptr %171, i64 0, i32 7
  %175 = load i8, ptr %174, align 1, !tbaa !27
  %176 = getelementptr inbounds %struct.BezTriple, ptr %171, i64 0, i32 8
  %177 = getelementptr inbounds %struct.BezTriple, ptr %171, i64 0, i32 9
  %178 = or i8 %175, 1
  store i8 %178, ptr %174, align 1, !tbaa !27
  %179 = load i8, ptr %176, align 4, !tbaa !29
  %180 = or i8 %179, 1
  store i8 %180, ptr %176, align 4, !tbaa !29
  %181 = load i8, ptr %177, align 1, !tbaa !30
  %182 = or i8 %181, 1
  store i8 %182, ptr %177, align 1, !tbaa !30
  br label %183

183:                                              ; preds = %173, %170, %136, %105, %91
  %184 = phi i32 [ %93, %91 ], [ %98, %105 ], [ %98, %136 ], [ %98, %170 ], [ %98, %173 ]
  %185 = phi ptr [ %92, %91 ], [ %99, %105 ], [ %99, %136 ], [ %99, %170 ], [ %99, %173 ]
  %186 = phi i32 [ %33, %91 ], [ %33, %105 ], [ %130, %136 ], [ %130, %170 ], [ %130, %173 ]
  %187 = phi i32 [ %34, %91 ], [ %101, %105 ], [ %129, %136 ], [ %129, %170 ], [ %129, %173 ]
  %188 = add nsw i32 %184, 1
  %189 = getelementptr inbounds %struct.BezTriple, ptr %185, i64 1
  %190 = icmp slt i32 %188, %186
  br i1 %190, label %32, label %191, !llvm.loop !394

191:                                              ; preds = %183
  %192 = icmp eq i32 %187, 0
  br i1 %192, label %1096, label %193

193:                                              ; preds = %191
  %194 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %187, i32 noundef 1) #20
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %194) #20
  %195 = getelementptr inbounds %struct.Nurb, ptr %194, i64 0, i32 18
  %196 = load ptr, ptr %195, align 8, !tbaa !24
  %197 = load ptr, ptr %25, align 8, !tbaa !24
  %198 = sext i32 %187 to i64
  %199 = mul nsw i64 %198, 72
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %196, ptr align 4 %197, i64 %199, i1 false)
  %200 = getelementptr inbounds %struct.Nurb, ptr %194, i64 0, i32 13
  %201 = load i16, ptr %200, align 4, !tbaa !39
  %202 = and i16 %201, -2
  store i16 %202, ptr %200, align 4, !tbaa !39
  %203 = getelementptr inbounds %struct.Nurb, ptr %194, i64 0, i32 6
  %204 = load i32, ptr %203, align 8, !tbaa !23
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %206, label %1096

206:                                              ; preds = %193
  %207 = load ptr, ptr %195, align 8, !tbaa !24
  %208 = and i32 %204, 1
  %209 = icmp eq i32 %204, 1
  br i1 %209, label %1059, label %210

210:                                              ; preds = %206
  %211 = and i32 %204, -2
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi ptr [ %207, %210 ], [ %233, %212 ]
  %214 = phi i32 [ 0, %210 ], [ %234, %212 ]
  %215 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 0, i32 7
  %216 = load i8, ptr %215, align 1, !tbaa !27
  %217 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 0, i32 8
  %218 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 0, i32 9
  %219 = or i8 %216, 1
  store i8 %219, ptr %215, align 1, !tbaa !27
  %220 = load i8, ptr %217, align 4, !tbaa !29
  %221 = or i8 %220, 1
  store i8 %221, ptr %217, align 4, !tbaa !29
  %222 = load i8, ptr %218, align 1, !tbaa !30
  %223 = or i8 %222, 1
  store i8 %223, ptr %218, align 1, !tbaa !30
  %224 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 1, i32 7
  %225 = load i8, ptr %224, align 1, !tbaa !27
  %226 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 1, i32 8
  %227 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 1, i32 9
  %228 = or i8 %225, 1
  store i8 %228, ptr %224, align 1, !tbaa !27
  %229 = load i8, ptr %226, align 4, !tbaa !29
  %230 = or i8 %229, 1
  store i8 %230, ptr %226, align 4, !tbaa !29
  %231 = load i8, ptr %227, align 1, !tbaa !30
  %232 = or i8 %231, 1
  store i8 %232, ptr %227, align 1, !tbaa !30
  %233 = getelementptr inbounds %struct.BezTriple, ptr %213, i64 2
  %234 = add i32 %214, 2
  %235 = icmp eq i32 %234, %211
  br i1 %235, label %1059, label %212, !llvm.loop !395

236:                                              ; preds = %19
  %237 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 7
  %238 = load i32, ptr %237, align 4, !tbaa !31
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %240, label %418

240:                                              ; preds = %236
  %241 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 17
  %242 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 6
  %243 = load i32, ptr %242, align 8, !tbaa !23
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %1096

245:                                              ; preds = %240
  %246 = load ptr, ptr %241, align 8, !tbaa !32
  %247 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 13
  br label %248

248:                                              ; preds = %245, %371
  %249 = phi i32 [ %243, %245 ], [ %374, %371 ]
  %250 = phi i32 [ 0, %245 ], [ %375, %371 ]
  %251 = phi i32 [ 0, %245 ], [ %376, %371 ]
  %252 = phi ptr [ %246, %245 ], [ %377, %371 ]
  %253 = getelementptr inbounds %struct.BPoint, ptr %252, i64 0, i32 3
  %254 = load i16, ptr %253, align 4, !tbaa !34
  %255 = and i16 %254, 1
  %256 = icmp eq i16 %255, 0
  br i1 %256, label %285, label %257

257:                                              ; preds = %248
  %258 = add nsw i32 %249, -1
  %259 = tail call i32 @llvm.smax.i32(i32 %251, i32 %258)
  br i1 %17, label %260, label %274

260:                                              ; preds = %257, %267
  %261 = phi i16 [ %271, %267 ], [ %254, %257 ]
  %262 = phi ptr [ %270, %267 ], [ %253, %257 ]
  %263 = phi i32 [ %268, %267 ], [ %251, %257 ]
  %264 = phi ptr [ %269, %267 ], [ %252, %257 ]
  %265 = and i16 %261, -2
  store i16 %265, ptr %262, align 4, !tbaa !34
  %266 = icmp eq i32 %263, %259
  br i1 %266, label %290, label %267

267:                                              ; preds = %260
  %268 = add i32 %263, 1
  %269 = getelementptr inbounds %struct.BPoint, ptr %264, i64 1
  %270 = getelementptr inbounds %struct.BPoint, ptr %264, i64 1, i32 3
  %271 = load i16, ptr %270, align 4, !tbaa !34
  %272 = and i16 %271, 1
  %273 = icmp eq i16 %272, 0
  br i1 %273, label %285, label %260, !llvm.loop !396

274:                                              ; preds = %257, %278
  %275 = phi i32 [ %279, %278 ], [ %251, %257 ]
  %276 = phi ptr [ %280, %278 ], [ %252, %257 ]
  %277 = icmp eq i32 %275, %259
  br i1 %277, label %290, label %278

278:                                              ; preds = %274
  %279 = add i32 %275, 1
  %280 = getelementptr inbounds %struct.BPoint, ptr %276, i64 1
  %281 = getelementptr inbounds %struct.BPoint, ptr %276, i64 1, i32 3
  %282 = load i16, ptr %281, align 4, !tbaa !34
  %283 = and i16 %282, 1
  %284 = icmp eq i16 %283, 0
  br i1 %284, label %285, label %274, !llvm.loop !396

285:                                              ; preds = %278, %267, %248
  %286 = phi ptr [ %252, %248 ], [ %269, %267 ], [ %280, %278 ]
  %287 = phi i32 [ %251, %248 ], [ %268, %267 ], [ %279, %278 ]
  %288 = phi i32 [ -1, %248 ], [ %263, %267 ], [ %275, %278 ]
  %289 = icmp slt i32 %288, %251
  br i1 %289, label %371, label %290

290:                                              ; preds = %274, %260, %285
  %291 = phi i32 [ %288, %285 ], [ %259, %260 ], [ %259, %274 ]
  %292 = phi i32 [ %287, %285 ], [ %259, %260 ], [ %259, %274 ]
  %293 = phi ptr [ %286, %285 ], [ %264, %260 ], [ %276, %274 ]
  %294 = sub nsw i32 %291, %251
  %295 = add nsw i32 %294, 1
  %296 = icmp ne i32 %251, 0
  %297 = icmp eq i32 %295, %249
  %298 = select i1 %296, i1 true, i1 %297
  br i1 %298, label %303, label %299

299:                                              ; preds = %290
  %300 = load i16, ptr %247, align 4, !tbaa !39
  %301 = and i16 %300, 1
  %302 = icmp eq i16 %301, 0
  br i1 %302, label %303, label %371

303:                                              ; preds = %299, %290
  %304 = add nsw i32 %249, -1
  %305 = icmp eq i32 %291, %304
  %306 = select i1 %305, i32 %250, i32 0
  %307 = add nsw i32 %295, %306
  %308 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %307, i32 noundef 1) #20
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %308) #20
  %309 = getelementptr inbounds %struct.Nurb, ptr %308, i64 0, i32 17
  %310 = load ptr, ptr %309, align 8, !tbaa !32
  %311 = load ptr, ptr %241, align 8, !tbaa !32
  %312 = sext i32 %251 to i64
  %313 = getelementptr inbounds %struct.BPoint, ptr %311, i64 %312
  %314 = sext i32 %295 to i64
  %315 = mul nsw i64 %314, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %310, ptr align 4 %313, i64 %315, i1 false)
  %316 = icmp eq i32 %306, 0
  br i1 %316, label %323, label %317

317:                                              ; preds = %303
  %318 = load ptr, ptr %309, align 8, !tbaa !32
  %319 = getelementptr inbounds %struct.BPoint, ptr %318, i64 %314
  %320 = load ptr, ptr %241, align 8, !tbaa !32
  %321 = sext i32 %250 to i64
  %322 = mul nsw i64 %321, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %319, ptr align 4 %320, i64 %322, i1 false)
  br label %323

323:                                              ; preds = %317, %303
  %324 = phi i32 [ 0, %317 ], [ %250, %303 ]
  %325 = load i32, ptr %242, align 8, !tbaa !23
  %326 = icmp eq i32 %307, %325
  br i1 %326, label %331, label %327

327:                                              ; preds = %323
  %328 = getelementptr inbounds %struct.Nurb, ptr %308, i64 0, i32 13
  %329 = load i16, ptr %328, align 4, !tbaa !39
  %330 = and i16 %329, -2
  store i16 %330, ptr %328, align 4, !tbaa !39
  br label %331

331:                                              ; preds = %327, %323
  %332 = getelementptr inbounds %struct.Nurb, ptr %308, i64 0, i32 6
  %333 = load i32, ptr %332, align 8, !tbaa !23
  %334 = icmp sgt i32 %333, 0
  br i1 %334, label %335, label %371

335:                                              ; preds = %331
  %336 = load ptr, ptr %309, align 8, !tbaa !32
  %337 = and i32 %333, 3
  %338 = icmp ult i32 %333, 4
  br i1 %338, label %359, label %339

339:                                              ; preds = %335
  %340 = and i32 %333, -4
  br label %341

341:                                              ; preds = %341, %339
  %342 = phi ptr [ %336, %339 ], [ %356, %341 ]
  %343 = phi i32 [ 0, %339 ], [ %357, %341 ]
  %344 = getelementptr inbounds %struct.BPoint, ptr %342, i64 0, i32 3
  %345 = load i16, ptr %344, align 4, !tbaa !34
  %346 = or i16 %345, 1
  store i16 %346, ptr %344, align 4, !tbaa !34
  %347 = getelementptr inbounds %struct.BPoint, ptr %342, i64 1, i32 3
  %348 = load i16, ptr %347, align 4, !tbaa !34
  %349 = or i16 %348, 1
  store i16 %349, ptr %347, align 4, !tbaa !34
  %350 = getelementptr inbounds %struct.BPoint, ptr %342, i64 2, i32 3
  %351 = load i16, ptr %350, align 4, !tbaa !34
  %352 = or i16 %351, 1
  store i16 %352, ptr %350, align 4, !tbaa !34
  %353 = getelementptr inbounds %struct.BPoint, ptr %342, i64 3, i32 3
  %354 = load i16, ptr %353, align 4, !tbaa !34
  %355 = or i16 %354, 1
  store i16 %355, ptr %353, align 4, !tbaa !34
  %356 = getelementptr inbounds %struct.BPoint, ptr %342, i64 4
  %357 = add i32 %343, 4
  %358 = icmp eq i32 %357, %340
  br i1 %358, label %359, label %341, !llvm.loop !397

359:                                              ; preds = %341, %335
  %360 = phi ptr [ %336, %335 ], [ %356, %341 ]
  %361 = icmp eq i32 %337, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %359, %362
  %363 = phi ptr [ %368, %362 ], [ %360, %359 ]
  %364 = phi i32 [ %369, %362 ], [ 0, %359 ]
  %365 = getelementptr inbounds %struct.BPoint, ptr %363, i64 0, i32 3
  %366 = load i16, ptr %365, align 4, !tbaa !34
  %367 = or i16 %366, 1
  store i16 %367, ptr %365, align 4, !tbaa !34
  %368 = getelementptr inbounds %struct.BPoint, ptr %363, i64 1
  %369 = add i32 %364, 1
  %370 = icmp eq i32 %369, %337
  br i1 %370, label %371, label %362, !llvm.loop !398

371:                                              ; preds = %359, %362, %331, %299, %285
  %372 = phi i32 [ %287, %285 ], [ %292, %299 ], [ %292, %331 ], [ %292, %362 ], [ %292, %359 ]
  %373 = phi ptr [ %286, %285 ], [ %293, %299 ], [ %293, %331 ], [ %293, %362 ], [ %293, %359 ]
  %374 = phi i32 [ %249, %285 ], [ %249, %299 ], [ %325, %331 ], [ %325, %362 ], [ %325, %359 ]
  %375 = phi i32 [ %250, %285 ], [ %295, %299 ], [ %324, %331 ], [ %324, %362 ], [ %324, %359 ]
  %376 = add nsw i32 %372, 1
  %377 = getelementptr inbounds %struct.BPoint, ptr %373, i64 1
  %378 = icmp slt i32 %376, %374
  br i1 %378, label %248, label %379, !llvm.loop !399

379:                                              ; preds = %371
  %380 = icmp eq i32 %375, 0
  br i1 %380, label %1096, label %381

381:                                              ; preds = %379
  %382 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %375, i32 noundef 1) #20
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %382) #20
  %383 = getelementptr inbounds %struct.Nurb, ptr %382, i64 0, i32 17
  %384 = load ptr, ptr %383, align 8, !tbaa !32
  %385 = load ptr, ptr %241, align 8, !tbaa !32
  %386 = sext i32 %375 to i64
  %387 = mul nsw i64 %386, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %384, ptr align 4 %385, i64 %387, i1 false)
  %388 = getelementptr inbounds %struct.Nurb, ptr %382, i64 0, i32 13
  %389 = load i16, ptr %388, align 4, !tbaa !39
  %390 = and i16 %389, -2
  store i16 %390, ptr %388, align 4, !tbaa !39
  %391 = getelementptr inbounds %struct.Nurb, ptr %382, i64 0, i32 6
  %392 = load i32, ptr %391, align 8, !tbaa !23
  %393 = icmp sgt i32 %392, 0
  br i1 %393, label %394, label %1096

394:                                              ; preds = %381
  %395 = load ptr, ptr %383, align 8, !tbaa !32
  %396 = and i32 %392, 3
  %397 = icmp ult i32 %392, 4
  br i1 %397, label %1072, label %398

398:                                              ; preds = %394
  %399 = and i32 %392, -4
  br label %400

400:                                              ; preds = %400, %398
  %401 = phi ptr [ %395, %398 ], [ %415, %400 ]
  %402 = phi i32 [ 0, %398 ], [ %416, %400 ]
  %403 = getelementptr inbounds %struct.BPoint, ptr %401, i64 0, i32 3
  %404 = load i16, ptr %403, align 4, !tbaa !34
  %405 = or i16 %404, 1
  store i16 %405, ptr %403, align 4, !tbaa !34
  %406 = getelementptr inbounds %struct.BPoint, ptr %401, i64 1, i32 3
  %407 = load i16, ptr %406, align 4, !tbaa !34
  %408 = or i16 %407, 1
  store i16 %408, ptr %406, align 4, !tbaa !34
  %409 = getelementptr inbounds %struct.BPoint, ptr %401, i64 2, i32 3
  %410 = load i16, ptr %409, align 4, !tbaa !34
  %411 = or i16 %410, 1
  store i16 %411, ptr %409, align 4, !tbaa !34
  %412 = getelementptr inbounds %struct.BPoint, ptr %401, i64 3, i32 3
  %413 = load i16, ptr %412, align 4, !tbaa !34
  %414 = or i16 %413, 1
  store i16 %414, ptr %412, align 4, !tbaa !34
  %415 = getelementptr inbounds %struct.BPoint, ptr %401, i64 4
  %416 = add i32 %402, 4
  %417 = icmp eq i32 %416, %399
  br i1 %417, label %1072, label %400, !llvm.loop !400

418:                                              ; preds = %236
  %419 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 6
  %420 = load i32, ptr %419, align 8, !tbaa !23
  %421 = mul nsw i32 %420, %238
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %1096, label %423

423:                                              ; preds = %418
  %424 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 17
  %425 = load ptr, ptr %424, align 8, !tbaa !32
  br label %430

426:                                              ; preds = %430
  %427 = add nsw i32 %431, -1
  %428 = getelementptr inbounds %struct.BPoint, ptr %432, i64 1
  %429 = icmp eq i32 %427, 0
  br i1 %429, label %1096, label %430, !llvm.loop !33

430:                                              ; preds = %426, %423
  %431 = phi i32 [ %427, %426 ], [ %421, %423 ]
  %432 = phi ptr [ %428, %426 ], [ %425, %423 ]
  %433 = getelementptr inbounds %struct.BPoint, ptr %432, i64 0, i32 3
  %434 = load i16, ptr %433, align 4, !tbaa !34
  %435 = and i16 %434, 1
  %436 = icmp eq i16 %435, 0
  br i1 %436, label %426, label %437

437:                                              ; preds = %430
  %438 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %439 = sext i32 %420 to i64
  %440 = tail call ptr %438(i64 noundef %439, ptr noundef nonnull @.str.195) #20
  %441 = load i32, ptr %237, align 4, !tbaa !31
  %442 = icmp sgt i32 %441, 0
  %443 = load i32, ptr %419, align 8, !tbaa !23
  br i1 %442, label %444, label %446

444:                                              ; preds = %437
  %445 = load ptr, ptr %424, align 8, !tbaa !32
  br label %451

446:                                              ; preds = %479, %437
  %447 = phi i32 [ %443, %437 ], [ %481, %479 ]
  %448 = icmp sgt i32 %447, 0
  br i1 %448, label %449, label %505

449:                                              ; preds = %446
  %450 = zext i32 %447 to i64
  br label %486

451:                                              ; preds = %444, %479
  %452 = phi i32 [ %480, %479 ], [ %441, %444 ]
  %453 = phi i32 [ %481, %479 ], [ %443, %444 ]
  %454 = phi i32 [ %482, %479 ], [ %443, %444 ]
  %455 = phi i32 [ %484, %479 ], [ 0, %444 ]
  %456 = phi ptr [ %483, %479 ], [ %445, %444 ]
  %457 = icmp sgt i32 %454, 0
  br i1 %457, label %458, label %479

458:                                              ; preds = %451, %471
  %459 = phi i32 [ %472, %471 ], [ %453, %451 ]
  %460 = phi i64 [ %473, %471 ], [ 0, %451 ]
  %461 = phi ptr [ %474, %471 ], [ %456, %451 ]
  %462 = getelementptr inbounds %struct.BPoint, ptr %461, i64 0, i32 3
  %463 = load i16, ptr %462, align 4, !tbaa !34
  %464 = and i16 %463, 1
  %465 = icmp eq i16 %464, 0
  br i1 %465, label %471, label %466

466:                                              ; preds = %458
  %467 = getelementptr inbounds i8, ptr %440, i64 %460
  %468 = load i8, ptr %467, align 1, !tbaa !169
  %469 = add i8 %468, 1
  store i8 %469, ptr %467, align 1, !tbaa !169
  %470 = load i32, ptr %419, align 8, !tbaa !23
  br label %471

471:                                              ; preds = %458, %466
  %472 = phi i32 [ %459, %458 ], [ %470, %466 ]
  %473 = add nuw nsw i64 %460, 1
  %474 = getelementptr inbounds %struct.BPoint, ptr %461, i64 1
  %475 = sext i32 %472 to i64
  %476 = icmp slt i64 %473, %475
  br i1 %476, label %458, label %477, !llvm.loop !401

477:                                              ; preds = %471
  %478 = load i32, ptr %237, align 4, !tbaa !31
  br label %479

479:                                              ; preds = %477, %451
  %480 = phi i32 [ %452, %451 ], [ %478, %477 ]
  %481 = phi i32 [ %453, %451 ], [ %472, %477 ]
  %482 = phi i32 [ %454, %451 ], [ %472, %477 ]
  %483 = phi ptr [ %456, %451 ], [ %474, %477 ]
  %484 = add nuw nsw i32 %455, 1
  %485 = icmp slt i32 %484, %480
  br i1 %485, label %451, label %446, !llvm.loop !402

486:                                              ; preds = %449, %500
  %487 = phi i64 [ 0, %449 ], [ %503, %500 ]
  %488 = phi i32 [ 0, %449 ], [ %502, %500 ]
  %489 = phi i32 [ 0, %449 ], [ %501, %500 ]
  %490 = getelementptr inbounds i8, ptr %440, i64 %487
  %491 = load i8, ptr %490, align 1, !tbaa !169
  %492 = icmp eq i8 %491, 0
  br i1 %492, label %500, label %493

493:                                              ; preds = %486
  %494 = icmp eq i32 %488, 0
  %495 = zext i8 %491 to i32
  %496 = icmp eq i32 %488, %495
  %497 = or i1 %494, %496
  br i1 %497, label %498, label %505

498:                                              ; preds = %493
  %499 = add nsw i32 %489, 1
  br label %500

500:                                              ; preds = %486, %498
  %501 = phi i32 [ %489, %486 ], [ %499, %498 ]
  %502 = phi i32 [ %488, %486 ], [ %495, %498 ]
  %503 = add nuw nsw i64 %487, 1
  %504 = icmp eq i64 %503, %450
  br i1 %504, label %505, label %486, !llvm.loop !403

505:                                              ; preds = %500, %493, %446
  %506 = phi i32 [ 0, %446 ], [ %489, %493 ], [ %501, %500 ]
  %507 = phi i32 [ 0, %446 ], [ 0, %493 ], [ %502, %500 ]
  %508 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %508(ptr noundef %440) #20
  %509 = icmp eq i32 %506, 0
  %510 = icmp eq i32 %507, 0
  %511 = select i1 %509, i1 true, i1 %510
  br i1 %511, label %744, label %512

512:                                              ; preds = %505
  br i1 %17, label %513, label %516

513:                                              ; preds = %512
  %514 = load i32, ptr %419, align 8, !tbaa !23
  %515 = load i32, ptr %237, align 4, !tbaa !31
  br label %750

516:                                              ; preds = %512
  %517 = load i32, ptr %237, align 4, !tbaa !31
  %518 = icmp sgt i32 %517, 0
  %519 = load i32, ptr %419, align 8, !tbaa !23
  br i1 %518, label %520, label %750

520:                                              ; preds = %516
  %521 = load ptr, ptr %424, align 8, !tbaa !32
  %522 = icmp sgt i32 %519, 0
  %523 = zext i32 %519 to i64
  %524 = icmp ult i32 %519, 16
  %525 = and i64 %523, 4294967280
  %526 = trunc i64 %525 to i32
  %527 = mul nuw nsw i64 %525, 36
  %528 = icmp eq i64 %525, %523
  br label %529

529:                                              ; preds = %677, %520
  %530 = phi i32 [ 0, %520 ], [ %679, %677 ]
  %531 = phi ptr [ %521, %520 ], [ %678, %677 ]
  br i1 %522, label %532, label %677

532:                                              ; preds = %529
  br i1 %524, label %655, label %533

533:                                              ; preds = %532
  %534 = getelementptr i8, ptr %531, i64 %527
  %535 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %536 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %537 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %538 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %539 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %540 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %541 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %542 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %543 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %544 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %545 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %546 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %547 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %548 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %549 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  %550 = getelementptr %struct.BPoint, ptr %531, i64 0, i32 3
  br label %551

551:                                              ; preds = %551, %533
  %552 = phi i64 [ 0, %533 ], [ %648, %551 ]
  %553 = phi <4 x i32> [ zeroinitializer, %533 ], [ %644, %551 ]
  %554 = phi <4 x i32> [ zeroinitializer, %533 ], [ %645, %551 ]
  %555 = phi <4 x i32> [ zeroinitializer, %533 ], [ %646, %551 ]
  %556 = phi <4 x i32> [ zeroinitializer, %533 ], [ %647, %551 ]
  %557 = mul i64 %552, 36
  %558 = mul i64 %552, 36
  %559 = or i64 %558, 36
  %560 = mul i64 %552, 36
  %561 = add i64 %560, 72
  %562 = mul i64 %552, 36
  %563 = add i64 %562, 108
  %564 = mul i64 %552, 36
  %565 = add i64 %564, 144
  %566 = mul i64 %552, 36
  %567 = add i64 %566, 180
  %568 = mul i64 %552, 36
  %569 = add i64 %568, 216
  %570 = mul i64 %552, 36
  %571 = add i64 %570, 252
  %572 = mul i64 %552, 36
  %573 = add i64 %572, 288
  %574 = mul i64 %552, 36
  %575 = add i64 %574, 324
  %576 = mul i64 %552, 36
  %577 = add i64 %576, 360
  %578 = mul i64 %552, 36
  %579 = add i64 %578, 396
  %580 = mul i64 %552, 36
  %581 = add i64 %580, 432
  %582 = mul i64 %552, 36
  %583 = add i64 %582, 468
  %584 = mul i64 %552, 36
  %585 = add i64 %584, 504
  %586 = mul i64 %552, 36
  %587 = add i64 %586, 540
  %588 = getelementptr i8, ptr %535, i64 %557
  %589 = getelementptr i8, ptr %536, i64 %559
  %590 = getelementptr i8, ptr %537, i64 %561
  %591 = getelementptr i8, ptr %538, i64 %563
  %592 = getelementptr i8, ptr %539, i64 %565
  %593 = getelementptr i8, ptr %540, i64 %567
  %594 = getelementptr i8, ptr %541, i64 %569
  %595 = getelementptr i8, ptr %542, i64 %571
  %596 = getelementptr i8, ptr %543, i64 %573
  %597 = getelementptr i8, ptr %544, i64 %575
  %598 = getelementptr i8, ptr %545, i64 %577
  %599 = getelementptr i8, ptr %546, i64 %579
  %600 = getelementptr i8, ptr %547, i64 %581
  %601 = getelementptr i8, ptr %548, i64 %583
  %602 = getelementptr i8, ptr %549, i64 %585
  %603 = getelementptr i8, ptr %550, i64 %587
  %604 = load i16, ptr %588, align 4, !tbaa !34
  %605 = load i16, ptr %589, align 4, !tbaa !34
  %606 = load i16, ptr %590, align 4, !tbaa !34
  %607 = load i16, ptr %591, align 4, !tbaa !34
  %608 = insertelement <4 x i16> poison, i16 %604, i64 0
  %609 = insertelement <4 x i16> %608, i16 %605, i64 1
  %610 = insertelement <4 x i16> %609, i16 %606, i64 2
  %611 = insertelement <4 x i16> %610, i16 %607, i64 3
  %612 = load i16, ptr %592, align 4, !tbaa !34
  %613 = load i16, ptr %593, align 4, !tbaa !34
  %614 = load i16, ptr %594, align 4, !tbaa !34
  %615 = load i16, ptr %595, align 4, !tbaa !34
  %616 = insertelement <4 x i16> poison, i16 %612, i64 0
  %617 = insertelement <4 x i16> %616, i16 %613, i64 1
  %618 = insertelement <4 x i16> %617, i16 %614, i64 2
  %619 = insertelement <4 x i16> %618, i16 %615, i64 3
  %620 = load i16, ptr %596, align 4, !tbaa !34
  %621 = load i16, ptr %597, align 4, !tbaa !34
  %622 = load i16, ptr %598, align 4, !tbaa !34
  %623 = load i16, ptr %599, align 4, !tbaa !34
  %624 = insertelement <4 x i16> poison, i16 %620, i64 0
  %625 = insertelement <4 x i16> %624, i16 %621, i64 1
  %626 = insertelement <4 x i16> %625, i16 %622, i64 2
  %627 = insertelement <4 x i16> %626, i16 %623, i64 3
  %628 = load i16, ptr %600, align 4, !tbaa !34
  %629 = load i16, ptr %601, align 4, !tbaa !34
  %630 = load i16, ptr %602, align 4, !tbaa !34
  %631 = load i16, ptr %603, align 4, !tbaa !34
  %632 = insertelement <4 x i16> poison, i16 %628, i64 0
  %633 = insertelement <4 x i16> %632, i16 %629, i64 1
  %634 = insertelement <4 x i16> %633, i16 %630, i64 2
  %635 = insertelement <4 x i16> %634, i16 %631, i64 3
  %636 = and <4 x i16> %611, <i16 1, i16 1, i16 1, i16 1>
  %637 = and <4 x i16> %619, <i16 1, i16 1, i16 1, i16 1>
  %638 = and <4 x i16> %627, <i16 1, i16 1, i16 1, i16 1>
  %639 = and <4 x i16> %635, <i16 1, i16 1, i16 1, i16 1>
  %640 = zext <4 x i16> %636 to <4 x i32>
  %641 = zext <4 x i16> %637 to <4 x i32>
  %642 = zext <4 x i16> %638 to <4 x i32>
  %643 = zext <4 x i16> %639 to <4 x i32>
  %644 = add <4 x i32> %553, %640
  %645 = add <4 x i32> %554, %641
  %646 = add <4 x i32> %555, %642
  %647 = add <4 x i32> %556, %643
  %648 = add nuw i64 %552, 16
  %649 = icmp eq i64 %648, %525
  br i1 %649, label %650, label %551, !llvm.loop !404

650:                                              ; preds = %551
  %651 = add <4 x i32> %645, %644
  %652 = add <4 x i32> %646, %651
  %653 = add <4 x i32> %647, %652
  %654 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %653)
  br i1 %528, label %671, label %655

655:                                              ; preds = %532, %650
  %656 = phi i32 [ 0, %532 ], [ %654, %650 ]
  %657 = phi i32 [ 0, %532 ], [ %526, %650 ]
  %658 = phi ptr [ %531, %532 ], [ %534, %650 ]
  br label %659

659:                                              ; preds = %655, %659
  %660 = phi i32 [ %667, %659 ], [ %656, %655 ]
  %661 = phi i32 [ %668, %659 ], [ %657, %655 ]
  %662 = phi ptr [ %669, %659 ], [ %658, %655 ]
  %663 = getelementptr inbounds %struct.BPoint, ptr %662, i64 0, i32 3
  %664 = load i16, ptr %663, align 4, !tbaa !34
  %665 = and i16 %664, 1
  %666 = zext i16 %665 to i32
  %667 = add nuw nsw i32 %660, %666
  %668 = add nuw nsw i32 %661, 1
  %669 = getelementptr inbounds %struct.BPoint, ptr %662, i64 1
  %670 = icmp eq i32 %668, %519
  br i1 %670, label %671, label %659, !llvm.loop !405

671:                                              ; preds = %659, %650
  %672 = phi i32 [ %654, %650 ], [ %667, %659 ]
  %673 = phi ptr [ %534, %650 ], [ %669, %659 ]
  %674 = icmp eq i32 %672, %519
  %675 = icmp eq i32 %672, 0
  %676 = or i1 %674, %675
  br i1 %676, label %677, label %681

677:                                              ; preds = %529, %671
  %678 = phi ptr [ %673, %671 ], [ %531, %529 ]
  %679 = add nuw nsw i32 %530, 1
  %680 = icmp eq i32 %679, %517
  br i1 %680, label %750, label %529, !llvm.loop !350

681:                                              ; preds = %671
  %682 = sext i32 %519 to i64
  %683 = and i32 %517, 3
  %684 = icmp ult i32 %517, 4
  %685 = and i32 %517, -4
  %686 = icmp eq i32 %683, 0
  br label %687

687:                                              ; preds = %741, %681
  %688 = phi i64 [ 0, %681 ], [ %742, %741 ]
  %689 = getelementptr inbounds %struct.BPoint, ptr %521, i64 %688
  br i1 %684, label %720, label %690

690:                                              ; preds = %687, %690
  %691 = phi i32 [ %716, %690 ], [ 0, %687 ]
  %692 = phi ptr [ %717, %690 ], [ %689, %687 ]
  %693 = phi i32 [ %718, %690 ], [ 0, %687 ]
  %694 = getelementptr inbounds %struct.BPoint, ptr %692, i64 0, i32 3
  %695 = load i16, ptr %694, align 4, !tbaa !34
  %696 = and i16 %695, 1
  %697 = zext i16 %696 to i32
  %698 = add nuw nsw i32 %691, %697
  %699 = getelementptr inbounds %struct.BPoint, ptr %692, i64 %682
  %700 = getelementptr inbounds %struct.BPoint, ptr %692, i64 %682, i32 3
  %701 = load i16, ptr %700, align 4, !tbaa !34
  %702 = and i16 %701, 1
  %703 = zext i16 %702 to i32
  %704 = add nuw nsw i32 %698, %703
  %705 = getelementptr inbounds %struct.BPoint, ptr %699, i64 %682
  %706 = getelementptr inbounds %struct.BPoint, ptr %699, i64 %682, i32 3
  %707 = load i16, ptr %706, align 4, !tbaa !34
  %708 = and i16 %707, 1
  %709 = zext i16 %708 to i32
  %710 = add nuw nsw i32 %704, %709
  %711 = getelementptr inbounds %struct.BPoint, ptr %705, i64 %682
  %712 = getelementptr inbounds %struct.BPoint, ptr %705, i64 %682, i32 3
  %713 = load i16, ptr %712, align 4, !tbaa !34
  %714 = and i16 %713, 1
  %715 = zext i16 %714 to i32
  %716 = add nuw nsw i32 %710, %715
  %717 = getelementptr inbounds %struct.BPoint, ptr %711, i64 %682
  %718 = add i32 %693, 4
  %719 = icmp eq i32 %718, %685
  br i1 %719, label %720, label %690, !llvm.loop !352

720:                                              ; preds = %690, %687
  %721 = phi i32 [ undef, %687 ], [ %716, %690 ]
  %722 = phi i32 [ 0, %687 ], [ %716, %690 ]
  %723 = phi ptr [ %689, %687 ], [ %717, %690 ]
  br i1 %686, label %736, label %724

724:                                              ; preds = %720, %724
  %725 = phi i32 [ %732, %724 ], [ %722, %720 ]
  %726 = phi ptr [ %733, %724 ], [ %723, %720 ]
  %727 = phi i32 [ %734, %724 ], [ 0, %720 ]
  %728 = getelementptr inbounds %struct.BPoint, ptr %726, i64 0, i32 3
  %729 = load i16, ptr %728, align 4, !tbaa !34
  %730 = and i16 %729, 1
  %731 = zext i16 %730 to i32
  %732 = add nuw nsw i32 %725, %731
  %733 = getelementptr inbounds %struct.BPoint, ptr %726, i64 %682
  %734 = add i32 %727, 1
  %735 = icmp eq i32 %734, %683
  br i1 %735, label %736, label %724, !llvm.loop !406

736:                                              ; preds = %724, %720
  %737 = phi i32 [ %721, %720 ], [ %732, %724 ]
  %738 = icmp eq i32 %737, %517
  %739 = icmp eq i32 %737, 0
  %740 = or i1 %738, %739
  br i1 %740, label %741, label %744

741:                                              ; preds = %736
  %742 = add nuw nsw i64 %688, 1
  %743 = icmp eq i64 %742, %682
  br i1 %743, label %750, label %687, !llvm.loop !354

744:                                              ; preds = %736, %505
  %745 = load i32, ptr getelementptr inbounds (%struct.Global, ptr @G, i64 0, i32 16), align 4, !tbaa !407
  %746 = and i32 %745, 1
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %1096, label %748

748:                                              ; preds = %744
  %749 = tail call i32 @puts(ptr nonnull dereferenceable(1) @str)
  br label %1096

750:                                              ; preds = %677, %741, %513, %516
  %751 = phi i32 [ %515, %513 ], [ %517, %516 ], [ %517, %741 ], [ %517, %677 ]
  %752 = phi i32 [ %514, %513 ], [ %519, %516 ], [ %519, %741 ], [ %519, %677 ]
  %753 = mul nsw i32 %751, %752
  %754 = icmp sgt i32 %753, 0
  br i1 %754, label %755, label %957

755:                                              ; preds = %750
  %756 = load ptr, ptr %424, align 8, !tbaa !32
  %757 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 14
  %758 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 13
  br label %759

759:                                              ; preds = %755, %947
  %760 = phi i32 [ %751, %755 ], [ %948, %947 ]
  %761 = phi i32 [ %752, %755 ], [ %949, %947 ]
  %762 = phi i64 [ 0, %755 ], [ %952, %947 ]
  %763 = phi i32 [ 0, %755 ], [ %951, %947 ]
  %764 = phi i32 [ 0, %755 ], [ %950, %947 ]
  %765 = phi ptr [ %756, %755 ], [ %953, %947 ]
  %766 = trunc i64 %762 to i32
  %767 = getelementptr inbounds %struct.BPoint, ptr %765, i64 0, i32 3
  %768 = load i16, ptr %767, align 4, !tbaa !34
  %769 = and i16 %768, 5
  %770 = icmp eq i16 %769, 1
  %771 = icmp sgt i32 %761, -1
  %772 = and i1 %770, %771
  br i1 %772, label %773, label %814

773:                                              ; preds = %759
  %774 = srem i32 %766, %761
  %775 = zext i32 %761 to i64
  br label %776

776:                                              ; preds = %773, %809
  %777 = phi i32 [ %774, %773 ], [ %811, %809 ]
  %778 = phi ptr [ %765, %773 ], [ %812, %809 ]
  %779 = phi i32 [ 0, %773 ], [ %810, %809 ]
  %780 = phi i32 [ 0, %773 ], [ %786, %809 ]
  %781 = getelementptr inbounds %struct.BPoint, ptr %778, i64 0, i32 3
  %782 = load i16, ptr %781, align 4, !tbaa !34
  %783 = and i16 %782, 1
  %784 = icmp eq i16 %783, 0
  br i1 %784, label %814, label %785

785:                                              ; preds = %776
  %786 = add nuw nsw i32 %780, 1
  %787 = sdiv i32 %766, %761
  %788 = icmp slt i32 %787, %760
  br i1 %788, label %789, label %809

789:                                              ; preds = %785
  %790 = icmp eq i32 %780, 0
  %791 = zext i1 %790 to i32
  %792 = sub i32 %760, %787
  %793 = select i1 %790, i32 %792, i32 0
  %794 = add i32 %779, %793
  br label %795

795:                                              ; preds = %789, %803
  %796 = phi i32 [ %787, %789 ], [ %806, %803 ]
  %797 = phi ptr [ %778, %789 ], [ %807, %803 ]
  %798 = phi i32 [ %779, %789 ], [ %805, %803 ]
  %799 = getelementptr inbounds %struct.BPoint, ptr %797, i64 0, i32 3
  %800 = load i16, ptr %799, align 4, !tbaa !34
  %801 = and i16 %800, 1
  %802 = icmp eq i16 %801, 0
  br i1 %802, label %809, label %803

803:                                              ; preds = %795
  %804 = or i16 %800, 4
  store i16 %804, ptr %799, align 4, !tbaa !34
  %805 = add nsw i32 %798, %791
  %806 = add nsw i32 %796, 1
  %807 = getelementptr inbounds %struct.BPoint, ptr %797, i64 %775
  %808 = icmp eq i32 %806, %760
  br i1 %808, label %809, label %795, !llvm.loop !408

809:                                              ; preds = %803, %795, %785
  %810 = phi i32 [ %779, %785 ], [ %798, %795 ], [ %794, %803 ]
  %811 = add nuw nsw i32 %777, 1
  %812 = getelementptr inbounds %struct.BPoint, ptr %778, i64 1
  %813 = icmp slt i32 %811, %761
  br i1 %813, label %776, label %814, !llvm.loop !409

814:                                              ; preds = %776, %809, %759
  %815 = phi i32 [ 0, %759 ], [ %780, %776 ], [ %786, %809 ]
  %816 = phi i32 [ 0, %759 ], [ %779, %776 ], [ %810, %809 ]
  %817 = add nsw i32 %816, %815
  %818 = icmp sgt i32 %817, 2
  br i1 %818, label %819, label %947

819:                                              ; preds = %814
  %820 = icmp eq i64 %762, 0
  br i1 %820, label %821, label %841

821:                                              ; preds = %819
  %822 = icmp eq i32 %815, %761
  br i1 %822, label %823, label %828

823:                                              ; preds = %821
  %824 = load i16, ptr %757, align 2, !tbaa !44
  %825 = and i16 %824, 1
  %826 = icmp eq i16 %825, 0
  %827 = select i1 %826, i32 %763, i32 %816
  br label %828

828:                                              ; preds = %823, %821
  %829 = phi i32 [ %763, %821 ], [ %827, %823 ]
  %830 = icmp eq i32 %816, %760
  br i1 %830, label %831, label %836

831:                                              ; preds = %828
  %832 = load i16, ptr %758, align 4, !tbaa !39
  %833 = and i16 %832, 1
  %834 = icmp eq i16 %833, 0
  %835 = select i1 %834, i32 %764, i32 %815
  br label %836

836:                                              ; preds = %831, %828
  %837 = phi i32 [ %764, %828 ], [ %835, %831 ]
  %838 = icmp ne i32 %837, 0
  %839 = icmp ne i32 %829, 0
  %840 = select i1 %838, i1 true, i1 %839
  br i1 %840, label %947, label %905

841:                                              ; preds = %819
  %842 = add nuw nsw i32 %815, %766
  %843 = icmp eq i32 %842, %761
  %844 = icmp ne i32 %764, 0
  %845 = select i1 %843, i1 %844, i1 false
  br i1 %845, label %846, label %883

846:                                              ; preds = %841
  %847 = add nsw i32 %815, %764
  %848 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %847, i32 noundef %816) #20
  %849 = icmp sgt i32 %816, 0
  br i1 %849, label %850, label %930

850:                                              ; preds = %846
  %851 = getelementptr inbounds %struct.Nurb, ptr %848, i64 0, i32 17
  %852 = getelementptr inbounds %struct.Nurb, ptr %848, i64 0, i32 6
  %853 = zext i32 %815 to i64
  %854 = mul nuw nsw i64 %853, 36
  %855 = sext i32 %764 to i64
  %856 = mul nsw i64 %855, 36
  br label %857

857:                                              ; preds = %850, %857
  %858 = phi i32 [ 0, %850 ], [ %881, %857 ]
  %859 = load ptr, ptr %851, align 8, !tbaa !32
  %860 = load i32, ptr %852, align 8, !tbaa !23
  %861 = mul nsw i32 %860, %858
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds %struct.BPoint, ptr %859, i64 %862
  %864 = load ptr, ptr %424, align 8, !tbaa !32
  %865 = load i32, ptr %419, align 8, !tbaa !23
  %866 = mul nsw i32 %865, %858
  %867 = add nsw i32 %866, %766
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds %struct.BPoint, ptr %864, i64 %868
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %863, ptr align 4 %869, i64 %854, i1 false)
  %870 = load ptr, ptr %851, align 8, !tbaa !32
  %871 = load i32, ptr %852, align 8, !tbaa !23
  %872 = mul nsw i32 %871, %858
  %873 = add nsw i32 %872, %815
  %874 = sext i32 %873 to i64
  %875 = getelementptr inbounds %struct.BPoint, ptr %870, i64 %874
  %876 = load ptr, ptr %424, align 8, !tbaa !32
  %877 = load i32, ptr %419, align 8, !tbaa !23
  %878 = mul nsw i32 %877, %858
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds %struct.BPoint, ptr %876, i64 %879
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %875, ptr align 4 %880, i64 %856, i1 false)
  %881 = add nuw nsw i32 %858, 1
  %882 = icmp eq i32 %881, %816
  br i1 %882, label %930, label %857, !llvm.loop !410

883:                                              ; preds = %841
  %884 = sdiv i32 %766, %761
  %885 = add nsw i32 %884, %816
  %886 = icmp eq i32 %885, %760
  %887 = icmp ne i32 %763, 0
  %888 = select i1 %886, i1 %887, i1 false
  br i1 %888, label %889, label %905

889:                                              ; preds = %883
  %890 = add nsw i32 %816, %763
  %891 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %815, i32 noundef %890) #20
  %892 = getelementptr inbounds %struct.Nurb, ptr %891, i64 0, i32 17
  %893 = load ptr, ptr %892, align 8, !tbaa !32
  %894 = load ptr, ptr %424, align 8, !tbaa !32
  %895 = getelementptr inbounds %struct.BPoint, ptr %894, i64 %762
  %896 = mul nsw i32 %816, %815
  %897 = sext i32 %896 to i64
  %898 = mul nsw i64 %897, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %893, ptr nonnull align 4 %895, i64 %898, i1 false)
  %899 = load ptr, ptr %892, align 8, !tbaa !32
  %900 = getelementptr inbounds %struct.BPoint, ptr %899, i64 %897
  %901 = load ptr, ptr %424, align 8, !tbaa !32
  %902 = mul nsw i32 %815, %763
  %903 = sext i32 %902 to i64
  %904 = mul nsw i64 %903, 36
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %900, ptr align 4 %901, i64 %904, i1 false)
  br label %930

905:                                              ; preds = %836, %883
  %906 = phi i32 [ %764, %883 ], [ 0, %836 ]
  %907 = phi i32 [ %763, %883 ], [ 0, %836 ]
  %908 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %815, i32 noundef %816) #20
  %909 = icmp sgt i32 %816, 0
  br i1 %909, label %910, label %930

910:                                              ; preds = %905
  %911 = getelementptr inbounds %struct.Nurb, ptr %908, i64 0, i32 17
  %912 = zext i32 %815 to i64
  %913 = mul nuw nsw i64 %912, 36
  %914 = zext i32 %816 to i64
  br label %915

915:                                              ; preds = %910, %915
  %916 = phi i64 [ 0, %910 ], [ %928, %915 ]
  %917 = load ptr, ptr %911, align 8, !tbaa !32
  %918 = trunc i64 %916 to i32
  %919 = mul nsw i32 %815, %918
  %920 = zext i32 %919 to i64
  %921 = getelementptr inbounds %struct.BPoint, ptr %917, i64 %920
  %922 = load ptr, ptr %424, align 8, !tbaa !32
  %923 = load i32, ptr %419, align 8, !tbaa !23
  %924 = mul nsw i32 %923, %918
  %925 = add nsw i32 %924, %766
  %926 = sext i32 %925 to i64
  %927 = getelementptr inbounds %struct.BPoint, ptr %922, i64 %926
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %921, ptr align 4 %927, i64 %913, i1 false)
  %928 = add nuw nsw i64 %916, 1
  %929 = icmp eq i64 %928, %914
  br i1 %929, label %930, label %915, !llvm.loop !411

930:                                              ; preds = %857, %915, %846, %905, %889
  %931 = phi ptr [ %891, %889 ], [ %908, %905 ], [ %848, %846 ], [ %908, %915 ], [ %848, %857 ]
  %932 = phi i32 [ 0, %889 ], [ %906, %905 ], [ 0, %846 ], [ %906, %915 ], [ 0, %857 ]
  %933 = phi i32 [ 0, %889 ], [ %907, %905 ], [ 0, %846 ], [ %907, %915 ], [ 0, %857 ]
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %931) #20
  %934 = load i32, ptr %419, align 8, !tbaa !23
  %935 = icmp eq i32 %815, %934
  br i1 %935, label %940, label %936

936:                                              ; preds = %930
  %937 = getelementptr inbounds %struct.Nurb, ptr %931, i64 0, i32 13
  %938 = load i16, ptr %937, align 4, !tbaa !39
  %939 = and i16 %938, -2
  store i16 %939, ptr %937, align 4, !tbaa !39
  br label %940

940:                                              ; preds = %936, %930
  %941 = load i32, ptr %237, align 4, !tbaa !31
  %942 = icmp eq i32 %816, %941
  br i1 %942, label %947, label %943

943:                                              ; preds = %940
  %944 = getelementptr inbounds %struct.Nurb, ptr %931, i64 0, i32 14
  %945 = load i16, ptr %944, align 2, !tbaa !44
  %946 = and i16 %945, -2
  store i16 %946, ptr %944, align 2, !tbaa !44
  br label %947

947:                                              ; preds = %814, %943, %940, %836
  %948 = phi i32 [ %760, %836 ], [ %941, %943 ], [ %816, %940 ], [ %760, %814 ]
  %949 = phi i32 [ %761, %836 ], [ %934, %943 ], [ %934, %940 ], [ %761, %814 ]
  %950 = phi i32 [ %837, %836 ], [ %932, %943 ], [ %932, %940 ], [ %764, %814 ]
  %951 = phi i32 [ %829, %836 ], [ %933, %943 ], [ %933, %940 ], [ %763, %814 ]
  %952 = add nuw nsw i64 %762, 1
  %953 = getelementptr inbounds %struct.BPoint, ptr %765, i64 1
  %954 = mul nsw i32 %948, %949
  %955 = sext i32 %954 to i64
  %956 = icmp slt i64 %952, %955
  br i1 %956, label %759, label %957, !llvm.loop !412

957:                                              ; preds = %947, %750
  %958 = phi i32 [ 0, %750 ], [ %950, %947 ]
  %959 = phi i32 [ 0, %750 ], [ %951, %947 ]
  %960 = phi i32 [ %752, %750 ], [ %949, %947 ]
  %961 = phi i32 [ %751, %750 ], [ %948, %947 ]
  %962 = icmp ne i32 %958, 0
  %963 = icmp ne i32 %959, 0
  %964 = select i1 %962, i1 true, i1 %963
  br i1 %964, label %965, label %1030

965:                                              ; preds = %957
  %966 = icmp eq i32 %958, 0
  %967 = select i1 %966, i32 %960, i32 %958
  %968 = icmp eq i32 %959, 0
  %969 = select i1 %968, i32 %961, i32 %959
  %970 = tail call ptr @BKE_nurb_copy(ptr noundef nonnull %20, i32 noundef %967, i32 noundef %969) #20
  %971 = icmp sgt i32 %969, 0
  br i1 %971, label %972, label %1016

972:                                              ; preds = %965
  %973 = getelementptr inbounds %struct.Nurb, ptr %970, i64 0, i32 17
  %974 = sext i32 %967 to i64
  %975 = mul nsw i64 %974, 36
  %976 = zext i32 %969 to i64
  %977 = and i64 %976, 1
  %978 = icmp eq i32 %969, 1
  br i1 %978, label %1004, label %979

979:                                              ; preds = %972
  %980 = and i64 %976, 4294967294
  br label %981

981:                                              ; preds = %981, %979
  %982 = phi i64 [ 0, %979 ], [ %1001, %981 ]
  %983 = phi i64 [ 0, %979 ], [ %1002, %981 ]
  %984 = load ptr, ptr %973, align 8, !tbaa !32
  %985 = mul nsw i64 %982, %974
  %986 = getelementptr inbounds %struct.BPoint, ptr %984, i64 %985
  %987 = load ptr, ptr %424, align 8, !tbaa !32
  %988 = load i32, ptr %419, align 8, !tbaa !23
  %989 = sext i32 %988 to i64
  %990 = mul nsw i64 %982, %989
  %991 = getelementptr inbounds %struct.BPoint, ptr %987, i64 %990
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %986, ptr align 4 %991, i64 %975, i1 false)
  %992 = or i64 %982, 1
  %993 = load ptr, ptr %973, align 8, !tbaa !32
  %994 = mul nsw i64 %992, %974
  %995 = getelementptr inbounds %struct.BPoint, ptr %993, i64 %994
  %996 = load ptr, ptr %424, align 8, !tbaa !32
  %997 = load i32, ptr %419, align 8, !tbaa !23
  %998 = sext i32 %997 to i64
  %999 = mul nsw i64 %992, %998
  %1000 = getelementptr inbounds %struct.BPoint, ptr %996, i64 %999
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %995, ptr align 4 %1000, i64 %975, i1 false)
  %1001 = add nuw nsw i64 %982, 2
  %1002 = add i64 %983, 2
  %1003 = icmp eq i64 %1002, %980
  br i1 %1003, label %1004, label %981, !llvm.loop !413

1004:                                             ; preds = %981, %972
  %1005 = phi i64 [ 0, %972 ], [ %1001, %981 ]
  %1006 = icmp eq i64 %977, 0
  br i1 %1006, label %1016, label %1007

1007:                                             ; preds = %1004
  %1008 = load ptr, ptr %973, align 8, !tbaa !32
  %1009 = mul nsw i64 %1005, %974
  %1010 = getelementptr inbounds %struct.BPoint, ptr %1008, i64 %1009
  %1011 = load ptr, ptr %424, align 8, !tbaa !32
  %1012 = load i32, ptr %419, align 8, !tbaa !23
  %1013 = sext i32 %1012 to i64
  %1014 = mul nsw i64 %1005, %1013
  %1015 = getelementptr inbounds %struct.BPoint, ptr %1011, i64 %1014
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1010, ptr align 4 %1015, i64 %975, i1 false)
  br label %1016

1016:                                             ; preds = %1007, %1004, %965
  tail call void @BLI_addtail(ptr noundef %1, ptr noundef %970) #20
  %1017 = load i32, ptr %419, align 8, !tbaa !23
  %1018 = icmp eq i32 %967, %1017
  br i1 %1018, label %1023, label %1019

1019:                                             ; preds = %1016
  %1020 = getelementptr inbounds %struct.Nurb, ptr %970, i64 0, i32 13
  %1021 = load i16, ptr %1020, align 4, !tbaa !39
  %1022 = and i16 %1021, -2
  store i16 %1022, ptr %1020, align 4, !tbaa !39
  br label %1023

1023:                                             ; preds = %1019, %1016
  %1024 = load i32, ptr %237, align 4, !tbaa !31
  %1025 = icmp eq i32 %969, %1024
  br i1 %1025, label %1030, label %1026

1026:                                             ; preds = %1023
  %1027 = getelementptr inbounds %struct.Nurb, ptr %970, i64 0, i32 14
  %1028 = load i16, ptr %1027, align 2, !tbaa !44
  %1029 = and i16 %1028, -2
  store i16 %1029, ptr %1027, align 2, !tbaa !44
  br label %1030

1030:                                             ; preds = %1023, %1026, %957
  %1031 = phi i32 [ %969, %1023 ], [ %1024, %1026 ], [ %961, %957 ]
  %1032 = phi i32 [ %1017, %1023 ], [ %1017, %1026 ], [ %960, %957 ]
  %1033 = mul nsw i32 %1031, %1032
  %1034 = icmp sgt i32 %1033, 0
  br i1 %1034, label %1035, label %1096

1035:                                             ; preds = %1030
  %1036 = load ptr, ptr %424, align 8, !tbaa !32
  %1037 = and i32 %1033, 3
  %1038 = icmp ult i32 %1033, 4
  br i1 %1038, label %1084, label %1039

1039:                                             ; preds = %1035
  %1040 = and i32 %1033, -4
  br label %1041

1041:                                             ; preds = %1041, %1039
  %1042 = phi ptr [ %1036, %1039 ], [ %1056, %1041 ]
  %1043 = phi i32 [ 0, %1039 ], [ %1057, %1041 ]
  %1044 = getelementptr inbounds %struct.BPoint, ptr %1042, i64 0, i32 3
  %1045 = load i16, ptr %1044, align 4, !tbaa !34
  %1046 = and i16 %1045, %18
  store i16 %1046, ptr %1044, align 4, !tbaa !34
  %1047 = getelementptr inbounds %struct.BPoint, ptr %1042, i64 1, i32 3
  %1048 = load i16, ptr %1047, align 4, !tbaa !34
  %1049 = and i16 %1048, %18
  store i16 %1049, ptr %1047, align 4, !tbaa !34
  %1050 = getelementptr inbounds %struct.BPoint, ptr %1042, i64 2, i32 3
  %1051 = load i16, ptr %1050, align 4, !tbaa !34
  %1052 = and i16 %1051, %18
  store i16 %1052, ptr %1050, align 4, !tbaa !34
  %1053 = getelementptr inbounds %struct.BPoint, ptr %1042, i64 3, i32 3
  %1054 = load i16, ptr %1053, align 4, !tbaa !34
  %1055 = and i16 %1054, %18
  store i16 %1055, ptr %1053, align 4, !tbaa !34
  %1056 = getelementptr inbounds %struct.BPoint, ptr %1042, i64 4
  %1057 = add i32 %1043, 4
  %1058 = icmp eq i32 %1057, %1040
  br i1 %1058, label %1084, label %1041, !llvm.loop !414

1059:                                             ; preds = %212, %206
  %1060 = phi ptr [ %207, %206 ], [ %233, %212 ]
  %1061 = icmp eq i32 %208, 0
  br i1 %1061, label %1096, label %1062

1062:                                             ; preds = %1059
  %1063 = getelementptr inbounds %struct.BezTriple, ptr %1060, i64 0, i32 7
  %1064 = load i8, ptr %1063, align 1, !tbaa !27
  %1065 = getelementptr inbounds %struct.BezTriple, ptr %1060, i64 0, i32 8
  %1066 = getelementptr inbounds %struct.BezTriple, ptr %1060, i64 0, i32 9
  %1067 = or i8 %1064, 1
  store i8 %1067, ptr %1063, align 1, !tbaa !27
  %1068 = load i8, ptr %1065, align 4, !tbaa !29
  %1069 = or i8 %1068, 1
  store i8 %1069, ptr %1065, align 4, !tbaa !29
  %1070 = load i8, ptr %1066, align 1, !tbaa !30
  %1071 = or i8 %1070, 1
  store i8 %1071, ptr %1066, align 1, !tbaa !30
  br label %1096

1072:                                             ; preds = %400, %394
  %1073 = phi ptr [ %395, %394 ], [ %415, %400 ]
  %1074 = icmp eq i32 %396, 0
  br i1 %1074, label %1096, label %1075

1075:                                             ; preds = %1072, %1075
  %1076 = phi ptr [ %1081, %1075 ], [ %1073, %1072 ]
  %1077 = phi i32 [ %1082, %1075 ], [ 0, %1072 ]
  %1078 = getelementptr inbounds %struct.BPoint, ptr %1076, i64 0, i32 3
  %1079 = load i16, ptr %1078, align 4, !tbaa !34
  %1080 = or i16 %1079, 1
  store i16 %1080, ptr %1078, align 4, !tbaa !34
  %1081 = getelementptr inbounds %struct.BPoint, ptr %1076, i64 1
  %1082 = add i32 %1077, 1
  %1083 = icmp eq i32 %1082, %396
  br i1 %1083, label %1096, label %1075, !llvm.loop !415

1084:                                             ; preds = %1041, %1035
  %1085 = phi ptr [ %1036, %1035 ], [ %1056, %1041 ]
  %1086 = icmp eq i32 %1037, 0
  br i1 %1086, label %1096, label %1087

1087:                                             ; preds = %1084, %1087
  %1088 = phi ptr [ %1093, %1087 ], [ %1085, %1084 ]
  %1089 = phi i32 [ %1094, %1087 ], [ 0, %1084 ]
  %1090 = getelementptr inbounds %struct.BPoint, ptr %1088, i64 0, i32 3
  %1091 = load i16, ptr %1090, align 4, !tbaa !34
  %1092 = and i16 %1091, %18
  store i16 %1092, ptr %1090, align 4, !tbaa !34
  %1093 = getelementptr inbounds %struct.BPoint, ptr %1088, i64 1
  %1094 = add i32 %1089, 1
  %1095 = icmp eq i32 %1094, %1037
  br i1 %1095, label %1096, label %1087, !llvm.loop !416

1096:                                             ; preds = %426, %1084, %1087, %1072, %1075, %1062, %1059, %240, %24, %1030, %381, %193, %418, %379, %748, %744, %191
  %1097 = getelementptr inbounds %struct.Nurb, ptr %20, i64 0, i32 1
  %1098 = load ptr, ptr %1097, align 8, !tbaa !36
  %1099 = icmp eq ptr %1098, null
  br i1 %1099, label %1100, label %19, !llvm.loop !417

1100:                                             ; preds = %1096, %3
  %1101 = load ptr, ptr %1, align 8, !tbaa !36
  %1102 = icmp eq ptr %1101, null
  br i1 %1102, label %1234, label %1103

1103:                                             ; preds = %1100
  %1104 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 32
  store i32 -1, ptr %1104, align 8, !tbaa !174
  %1105 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 31
  store i32 -1, ptr %1105, align 4, !tbaa !173
  %1106 = icmp eq i8 %2, 0
  br i1 %1106, label %1107, label %1166

1107:                                             ; preds = %1103, %1163
  %1108 = phi ptr [ %1164, %1163 ], [ %1101, %1103 ]
  %1109 = getelementptr inbounds %struct.Nurb, ptr %1108, i64 0, i32 2
  %1110 = load i16, ptr %1109, align 8, !tbaa !21
  %1111 = icmp eq i16 %1110, 1
  br i1 %1111, label %1163, label %1112

1112:                                             ; preds = %1107
  %1113 = getelementptr inbounds %struct.Nurb, ptr %1108, i64 0, i32 15
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1113, i8 0, i64 16, i1 false)
  %1114 = tail call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %1108) #20
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1108) #20
  %1115 = load i16, ptr %5, align 8, !tbaa !5
  %1116 = icmp eq i16 %1115, 3
  br i1 %1116, label %1117, label %1163

1117:                                             ; preds = %1112
  %1118 = getelementptr inbounds %struct.Nurb, ptr %1108, i64 0, i32 6
  %1119 = load i32, ptr %1118, align 8, !tbaa !23
  %1120 = getelementptr inbounds %struct.Nurb, ptr %1108, i64 0, i32 7
  %1121 = load i32, ptr %1120, align 4, !tbaa !31
  %1122 = mul nsw i32 %1121, %1119
  %1123 = icmp sgt i32 %1122, 0
  br i1 %1123, label %1124, label %1143

1124:                                             ; preds = %1117
  %1125 = getelementptr inbounds %struct.Nurb, ptr %1108, i64 0, i32 17
  %1126 = load ptr, ptr %1125, align 8, !tbaa !32
  %1127 = and i32 %1122, 3
  %1128 = icmp ult i32 %1122, 4
  br i1 %1128, label %1131, label %1129

1129:                                             ; preds = %1124
  %1130 = and i32 %1122, -4
  br label %1145

1131:                                             ; preds = %1145, %1124
  %1132 = phi ptr [ %1126, %1124 ], [ %1160, %1145 ]
  %1133 = icmp eq i32 %1127, 0
  br i1 %1133, label %1143, label %1134

1134:                                             ; preds = %1131, %1134
  %1135 = phi ptr [ %1140, %1134 ], [ %1132, %1131 ]
  %1136 = phi i32 [ %1141, %1134 ], [ 0, %1131 ]
  %1137 = getelementptr inbounds %struct.BPoint, ptr %1135, i64 0, i32 3
  %1138 = load i16, ptr %1137, align 4, !tbaa !34
  %1139 = and i16 %1138, -5
  store i16 %1139, ptr %1137, align 4, !tbaa !34
  %1140 = getelementptr inbounds %struct.BPoint, ptr %1135, i64 1
  %1141 = add i32 %1136, 1
  %1142 = icmp eq i32 %1141, %1127
  br i1 %1142, label %1143, label %1134, !llvm.loop !418

1143:                                             ; preds = %1131, %1134, %1117
  %1144 = tail call zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef nonnull %1108) #20
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %1108) #20
  br label %1163

1145:                                             ; preds = %1145, %1129
  %1146 = phi ptr [ %1126, %1129 ], [ %1160, %1145 ]
  %1147 = phi i32 [ 0, %1129 ], [ %1161, %1145 ]
  %1148 = getelementptr inbounds %struct.BPoint, ptr %1146, i64 0, i32 3
  %1149 = load i16, ptr %1148, align 4, !tbaa !34
  %1150 = and i16 %1149, -5
  store i16 %1150, ptr %1148, align 4, !tbaa !34
  %1151 = getelementptr inbounds %struct.BPoint, ptr %1146, i64 1, i32 3
  %1152 = load i16, ptr %1151, align 4, !tbaa !34
  %1153 = and i16 %1152, -5
  store i16 %1153, ptr %1151, align 4, !tbaa !34
  %1154 = getelementptr inbounds %struct.BPoint, ptr %1146, i64 2, i32 3
  %1155 = load i16, ptr %1154, align 4, !tbaa !34
  %1156 = and i16 %1155, -5
  store i16 %1156, ptr %1154, align 4, !tbaa !34
  %1157 = getelementptr inbounds %struct.BPoint, ptr %1146, i64 3, i32 3
  %1158 = load i16, ptr %1157, align 4, !tbaa !34
  %1159 = and i16 %1158, -5
  store i16 %1159, ptr %1157, align 4, !tbaa !34
  %1160 = getelementptr inbounds %struct.BPoint, ptr %1146, i64 4
  %1161 = add i32 %1147, 4
  %1162 = icmp eq i32 %1161, %1130
  br i1 %1162, label %1131, label %1145, !llvm.loop !419

1163:                                             ; preds = %1107, %1143, %1112
  %1164 = load ptr, ptr %1108, align 8, !tbaa !36
  %1165 = icmp eq ptr %1164, null
  br i1 %1165, label %1234, label %1107, !llvm.loop !420

1166:                                             ; preds = %1103, %1231
  %1167 = phi ptr [ %1232, %1231 ], [ %1101, %1103 ]
  %1168 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 2
  %1169 = load i16, ptr %1168, align 8, !tbaa !21
  %1170 = icmp eq i16 %1169, 1
  br i1 %1170, label %1171, label %1180

1171:                                             ; preds = %1166
  %1172 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 18
  %1173 = load ptr, ptr %1172, align 8, !tbaa !24
  tail call void @BKE_nurb_handle_calc_simple(ptr noundef nonnull %1167, ptr noundef %1173) #20
  %1174 = load ptr, ptr %1172, align 8, !tbaa !24
  %1175 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 6
  %1176 = load i32, ptr %1175, align 8, !tbaa !23
  %1177 = add nsw i32 %1176, -1
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds %struct.BezTriple, ptr %1174, i64 %1178
  tail call void @BKE_nurb_handle_calc_simple(ptr noundef nonnull %1167, ptr noundef %1179) #20
  br label %1231

1180:                                             ; preds = %1166
  %1181 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 15
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1181, i8 0, i64 16, i1 false)
  %1182 = tail call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %1167) #20
  tail call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1167) #20
  %1183 = load i16, ptr %5, align 8, !tbaa !5
  %1184 = icmp eq i16 %1183, 3
  br i1 %1184, label %1185, label %1231

1185:                                             ; preds = %1180
  %1186 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 6
  %1187 = load i32, ptr %1186, align 8, !tbaa !23
  %1188 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 7
  %1189 = load i32, ptr %1188, align 4, !tbaa !31
  %1190 = mul nsw i32 %1189, %1187
  %1191 = icmp sgt i32 %1190, 0
  br i1 %1191, label %1192, label %1229

1192:                                             ; preds = %1185
  %1193 = getelementptr inbounds %struct.Nurb, ptr %1167, i64 0, i32 17
  %1194 = load ptr, ptr %1193, align 8, !tbaa !32
  %1195 = and i32 %1190, 3
  %1196 = icmp ult i32 %1190, 4
  br i1 %1196, label %1217, label %1197

1197:                                             ; preds = %1192
  %1198 = and i32 %1190, -4
  br label %1199

1199:                                             ; preds = %1199, %1197
  %1200 = phi ptr [ %1194, %1197 ], [ %1214, %1199 ]
  %1201 = phi i32 [ 0, %1197 ], [ %1215, %1199 ]
  %1202 = getelementptr inbounds %struct.BPoint, ptr %1200, i64 0, i32 3
  %1203 = load i16, ptr %1202, align 4, !tbaa !34
  %1204 = and i16 %1203, -5
  store i16 %1204, ptr %1202, align 4, !tbaa !34
  %1205 = getelementptr inbounds %struct.BPoint, ptr %1200, i64 1, i32 3
  %1206 = load i16, ptr %1205, align 4, !tbaa !34
  %1207 = and i16 %1206, -5
  store i16 %1207, ptr %1205, align 4, !tbaa !34
  %1208 = getelementptr inbounds %struct.BPoint, ptr %1200, i64 2, i32 3
  %1209 = load i16, ptr %1208, align 4, !tbaa !34
  %1210 = and i16 %1209, -5
  store i16 %1210, ptr %1208, align 4, !tbaa !34
  %1211 = getelementptr inbounds %struct.BPoint, ptr %1200, i64 3, i32 3
  %1212 = load i16, ptr %1211, align 4, !tbaa !34
  %1213 = and i16 %1212, -5
  store i16 %1213, ptr %1211, align 4, !tbaa !34
  %1214 = getelementptr inbounds %struct.BPoint, ptr %1200, i64 4
  %1215 = add i32 %1201, 4
  %1216 = icmp eq i32 %1215, %1198
  br i1 %1216, label %1217, label %1199, !llvm.loop !419

1217:                                             ; preds = %1199, %1192
  %1218 = phi ptr [ %1194, %1192 ], [ %1214, %1199 ]
  %1219 = icmp eq i32 %1195, 0
  br i1 %1219, label %1229, label %1220

1220:                                             ; preds = %1217, %1220
  %1221 = phi ptr [ %1226, %1220 ], [ %1218, %1217 ]
  %1222 = phi i32 [ %1227, %1220 ], [ 0, %1217 ]
  %1223 = getelementptr inbounds %struct.BPoint, ptr %1221, i64 0, i32 3
  %1224 = load i16, ptr %1223, align 4, !tbaa !34
  %1225 = and i16 %1224, -5
  store i16 %1225, ptr %1223, align 4, !tbaa !34
  %1226 = getelementptr inbounds %struct.BPoint, ptr %1221, i64 1
  %1227 = add i32 %1222, 1
  %1228 = icmp eq i32 %1227, %1195
  br i1 %1228, label %1229, label %1220, !llvm.loop !421

1229:                                             ; preds = %1217, %1220, %1185
  %1230 = tail call zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef nonnull %1167) #20
  tail call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %1167) #20
  br label %1231

1231:                                             ; preds = %1171, %1229, %1180
  %1232 = load ptr, ptr %1167, align 8, !tbaa !36
  %1233 = icmp eq ptr %1232, null
  br i1 %1233, label %1234, label %1166, !llvm.loop !420

1234:                                             ; preds = %1231, %1163, %1100
  ret void
}

declare ptr @ED_object_add_duplicate(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

declare ptr @BKE_curve_copy(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @curve_delete_segments(ptr nocapture readonly %0, i8 noundef zeroext %1) unnamed_addr #5 {
  %3 = alloca %struct.ListBase, align 8
  %4 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 4
  %5 = load ptr, ptr %4, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %3) #20
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  %6 = load ptr, ptr %5, align 8, !tbaa !36
  %7 = icmp eq ptr %6, null
  br i1 %7, label %1684, label %8

8:                                                ; preds = %2
  %9 = getelementptr %struct.EditNurb, ptr %5, i64 0, i32 1
  %10 = icmp eq i8 %1, 0
  %11 = getelementptr inbounds %struct.Curve, ptr %0, i64 0, i32 16
  br label %34

12:                                               ; preds = %1524
  %13 = load ptr, ptr %3, align 8, !tbaa !36
  %14 = icmp eq ptr %13, null
  br i1 %14, label %1634, label %15

15:                                               ; preds = %12
  %16 = icmp eq i8 %1, 0
  br i1 %16, label %17, label %1527

17:                                               ; preds = %15, %31
  %18 = phi ptr [ %32, %31 ], [ %13, %15 ]
  %19 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 2
  %20 = load i16, ptr %19, align 8, !tbaa !21
  %21 = icmp eq i16 %20, 1
  br i1 %21, label %30, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %23, i8 0, i64 16, i1 false)
  %24 = call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %18) #20
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %18) #20
  %25 = getelementptr inbounds %struct.Nurb, ptr %18, i64 0, i32 7
  %26 = load i32, ptr %25, align 4, !tbaa !31
  %27 = icmp sgt i32 %26, 1
  br i1 %27, label %28, label %31

28:                                               ; preds = %22
  %29 = call zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef nonnull %18) #20
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %18) #20
  br label %31

30:                                               ; preds = %17
  call void @BKE_nurb_handles_calc(ptr noundef nonnull %18) #20
  br label %31

31:                                               ; preds = %30, %28, %22
  %32 = load ptr, ptr %18, align 8, !tbaa !36
  %33 = icmp eq ptr %32, null
  br i1 %33, label %1634, label %17, !llvm.loop !422

34:                                               ; preds = %8, %1524
  %35 = phi ptr [ %6, %8 ], [ %1525, %1524 ]
  %36 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 2
  %37 = load i16, ptr %36, align 8, !tbaa !21
  %38 = icmp eq i16 %37, 1
  br i1 %38, label %39, label %493

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 18
  %41 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 6
  %42 = load i32, ptr %41, align 8, !tbaa !23
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %1524

44:                                               ; preds = %39
  %45 = load ptr, ptr %40, align 8, !tbaa !24
  %46 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 13
  br label %47

47:                                               ; preds = %44, %359
  %48 = phi i32 [ %42, %44 ], [ %366, %359 ]
  %49 = phi i32 [ 0, %44 ], [ %363, %359 ]
  %50 = phi i32 [ -1, %44 ], [ %362, %359 ]
  %51 = phi i32 [ -1, %44 ], [ %361, %359 ]
  %52 = phi i32 [ -1, %44 ], [ %360, %359 ]
  %53 = phi i32 [ 0, %44 ], [ %364, %359 ]
  %54 = phi ptr [ %45, %44 ], [ %365, %359 ]
  %55 = load i16, ptr %11, align 8, !tbaa !198
  %56 = and i16 %55, 1
  %57 = icmp eq i16 %56, 0
  %58 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 0, i32 8
  %59 = load i8, ptr %58, align 4, !tbaa !29
  %60 = and i8 %59, 1
  %61 = icmp eq i8 %60, 0
  br i1 %57, label %63, label %62

62:                                               ; preds = %47
  br i1 %61, label %74, label %82

63:                                               ; preds = %47
  br i1 %61, label %64, label %79

64:                                               ; preds = %63
  %65 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 0, i32 7
  %66 = load i8, ptr %65, align 1, !tbaa !27
  %67 = and i8 %66, 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %79

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 0, i32 9
  %71 = load i8, ptr %70, align 1, !tbaa !30
  %72 = and i8 %71, 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %69, %62
  %75 = icmp eq i32 %52, -1
  %76 = select i1 %75, i32 %53, i32 %52
  %77 = add nsw i32 %48, -1
  %78 = icmp slt i32 %53, %77
  br i1 %78, label %359, label %105

79:                                               ; preds = %69, %64, %63
  %80 = add nsw i32 %48, -1
  %81 = icmp slt i32 %53, %80
  br i1 %81, label %90, label %105

82:                                               ; preds = %62
  %83 = add nsw i32 %48, -1
  %84 = icmp slt i32 %53, %83
  br i1 %84, label %85, label %105

85:                                               ; preds = %82
  %86 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1, i32 8
  %87 = load i8, ptr %86, align 4, !tbaa !29
  %88 = and i8 %87, 1
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %359, label %105

90:                                               ; preds = %79
  %91 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1, i32 8
  %92 = load i8, ptr %91, align 4, !tbaa !29
  %93 = and i8 %92, 1
  %94 = icmp eq i8 %93, 0
  br i1 %94, label %95, label %105

95:                                               ; preds = %90
  %96 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1, i32 7
  %97 = load i8, ptr %96, align 1, !tbaa !27
  %98 = and i8 %97, 1
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %105

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1, i32 9
  %102 = load i8, ptr %101, align 1, !tbaa !30
  %103 = and i8 %102, 1
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %359, label %105

105:                                              ; preds = %82, %79, %85, %90, %95, %100, %74
  %106 = phi i32 [ %52, %85 ], [ %52, %90 ], [ %52, %95 ], [ %52, %100 ], [ %52, %79 ], [ %76, %74 ], [ %52, %82 ]
  %107 = phi i32 [ %51, %85 ], [ %51, %90 ], [ %51, %95 ], [ %51, %100 ], [ %51, %79 ], [ %53, %74 ], [ %51, %82 ]
  %108 = icmp sgt i32 %106, -1
  br i1 %108, label %109, label %359

109:                                              ; preds = %105
  %110 = icmp ult i32 %106, 2
  %111 = add nsw i32 %48, -1
  br i1 %110, label %112, label %205

112:                                              ; preds = %109
  %113 = icmp eq i32 %53, %111
  br i1 %113, label %114, label %124

114:                                              ; preds = %112
  %115 = icmp ne i32 %106, 1
  %116 = icmp eq i32 %107, %53
  %117 = select i1 %115, i1 true, i1 %116
  br i1 %117, label %121, label %118

118:                                              ; preds = %114
  %119 = load i16, ptr %46, align 4, !tbaa !39
  %120 = and i16 %119, -2
  store i16 %120, ptr %46, align 4, !tbaa !39
  br label %121

121:                                              ; preds = %118, %114
  %122 = add nuw nsw i32 %53, 1
  %123 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %122, i32 noundef 1) #20
  br label %304

124:                                              ; preds = %112
  %125 = icmp eq i32 %106, 0
  br i1 %125, label %126, label %205

126:                                              ; preds = %124
  %127 = add nsw i32 %107, 1
  %128 = add nsw i32 %107, 2
  %129 = load ptr, ptr %40, align 8, !tbaa !24
  %130 = sext i32 %111 to i64
  %131 = add nsw i32 %48, -2
  %132 = sext i32 %131 to i64
  %133 = load i16, ptr %46, align 4, !tbaa !39
  %134 = and i16 %133, 1
  %135 = icmp eq i16 %134, 0
  br i1 %135, label %203, label %136

136:                                              ; preds = %126
  %137 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %130, i32 8
  %138 = load i8, ptr %137, align 4, !tbaa !29
  %139 = and i8 %138, 1
  %140 = icmp eq i8 %139, 0
  br i1 %57, label %142, label %141

141:                                              ; preds = %136
  br i1 %140, label %359, label %153

142:                                              ; preds = %136
  br i1 %140, label %143, label %158

143:                                              ; preds = %142
  %144 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %130, i32 7
  %145 = load i8, ptr %144, align 1, !tbaa !27
  %146 = and i8 %145, 1
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %148, label %158

148:                                              ; preds = %143
  %149 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %130, i32 9
  %150 = load i8, ptr %149, align 1, !tbaa !30
  %151 = and i8 %150, 1
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %359, label %158

153:                                              ; preds = %141
  %154 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %132, i32 8
  %155 = load i8, ptr %154, align 4, !tbaa !29
  %156 = and i8 %155, 1
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %359, label %173

158:                                              ; preds = %148, %143, %142
  %159 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %132, i32 8
  %160 = load i8, ptr %159, align 4, !tbaa !29
  %161 = and i8 %160, 1
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %173

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %132, i32 7
  %165 = load i8, ptr %164, align 1, !tbaa !27
  %166 = and i8 %165, 1
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %168, label %173

168:                                              ; preds = %163
  %169 = getelementptr inbounds %struct.BezTriple, ptr %129, i64 %132, i32 9
  %170 = load i8, ptr %169, align 1, !tbaa !30
  %171 = and i8 %170, 1
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %359, label %173

173:                                              ; preds = %168, %163, %158, %153
  %174 = add nsw i32 %107, 3
  %175 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %174, i32 noundef 1) #20
  %176 = getelementptr inbounds %struct.Nurb, ptr %175, i64 0, i32 18
  %177 = load ptr, ptr %176, align 8, !tbaa !24
  %178 = getelementptr inbounds %struct.BezTriple, ptr %177, i64 1
  %179 = load ptr, ptr %40, align 8, !tbaa !24
  %180 = sext i32 %128 to i64
  %181 = mul nsw i64 %180, 72
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %178, ptr align 4 %179, i64 %181, i1 false)
  %182 = load ptr, ptr %9, align 8, !tbaa !47
  %183 = icmp ne ptr %182, null
  %184 = icmp sgt i32 %107, -2
  %185 = and i1 %184, %183
  br i1 %185, label %186, label %200

186:                                              ; preds = %173, %195
  %187 = phi ptr [ %197, %195 ], [ %179, %173 ]
  %188 = phi i32 [ %198, %195 ], [ 0, %173 ]
  %189 = phi ptr [ %196, %195 ], [ %178, %173 ]
  %190 = load ptr, ptr %9, align 8, !tbaa !47
  %191 = call ptr @BLI_ghash_popkey(ptr noundef %190, ptr noundef %187, ptr noundef null) #20
  %192 = icmp eq ptr %191, null
  br i1 %192, label %195, label %193

193:                                              ; preds = %186
  %194 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %194, ptr noundef nonnull %189, ptr noundef nonnull %191) #20
  br label %195

195:                                              ; preds = %193, %186
  %196 = getelementptr inbounds i8, ptr %189, i64 72
  %197 = getelementptr inbounds i8, ptr %187, i64 72
  %198 = add nuw nsw i32 %188, 1
  %199 = icmp eq i32 %198, %128
  br i1 %199, label %200, label %186, !llvm.loop !157

200:                                              ; preds = %195, %173
  %201 = load i32, ptr %41, align 8, !tbaa !23
  %202 = add nsw i32 %201, -1
  br label %304

203:                                              ; preds = %126
  %204 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %128, i32 noundef 1) #20
  br label %304

205:                                              ; preds = %109, %124
  %206 = icmp eq i32 %107, %111
  %207 = add nsw i32 %106, -1
  br i1 %206, label %208, label %299

208:                                              ; preds = %205
  %209 = sub nsw i32 %111, %207
  %210 = add nsw i32 %209, 1
  %211 = load ptr, ptr %40, align 8, !tbaa !24
  %212 = load i16, ptr %46, align 4, !tbaa !39
  %213 = and i16 %212, 1
  %214 = icmp eq i16 %213, 0
  br i1 %214, label %267, label %215

215:                                              ; preds = %208
  %216 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 0, i32 8
  %217 = load i8, ptr %216, align 4, !tbaa !29
  %218 = and i8 %217, 1
  %219 = icmp eq i8 %218, 0
  br i1 %57, label %221, label %220

220:                                              ; preds = %215
  br i1 %219, label %267, label %232

221:                                              ; preds = %215
  br i1 %219, label %222, label %237

222:                                              ; preds = %221
  %223 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 0, i32 7
  %224 = load i8, ptr %223, align 1, !tbaa !27
  %225 = and i8 %224, 1
  %226 = icmp eq i8 %225, 0
  br i1 %226, label %227, label %237

227:                                              ; preds = %222
  %228 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 0, i32 9
  %229 = load i8, ptr %228, align 1, !tbaa !30
  %230 = and i8 %229, 1
  %231 = icmp eq i8 %230, 0
  br i1 %231, label %267, label %237

232:                                              ; preds = %220
  %233 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 1, i32 8
  %234 = load i8, ptr %233, align 4, !tbaa !29
  %235 = and i8 %234, 1
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %267, label %252

237:                                              ; preds = %227, %222, %221
  %238 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 1, i32 8
  %239 = load i8, ptr %238, align 4, !tbaa !29
  %240 = and i8 %239, 1
  %241 = icmp eq i8 %240, 0
  br i1 %241, label %242, label %252

242:                                              ; preds = %237
  %243 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 1, i32 7
  %244 = load i8, ptr %243, align 1, !tbaa !27
  %245 = and i8 %244, 1
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %247, label %252

247:                                              ; preds = %242
  %248 = getelementptr inbounds %struct.BezTriple, ptr %211, i64 1, i32 9
  %249 = load i8, ptr %248, align 1, !tbaa !30
  %250 = and i8 %249, 1
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %267, label %252

252:                                              ; preds = %247, %242, %237, %232
  %253 = add nsw i32 %209, 2
  %254 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %253, i32 noundef 1) #20
  %255 = getelementptr inbounds %struct.Nurb, ptr %254, i64 0, i32 18
  %256 = load ptr, ptr %255, align 8, !tbaa !24
  %257 = sext i32 %210 to i64
  %258 = getelementptr inbounds %struct.BezTriple, ptr %256, i64 %257
  %259 = load ptr, ptr %40, align 8, !tbaa !24
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %258, ptr noundef nonnull align 4 dereferenceable(72) %259, i64 72, i1 false)
  %260 = load ptr, ptr %9, align 8, !tbaa !47
  %261 = icmp eq ptr %260, null
  br i1 %261, label %318, label %262

262:                                              ; preds = %252
  %263 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %260, ptr noundef nonnull %259, ptr noundef null) #20
  %264 = icmp eq ptr %263, null
  br i1 %264, label %311, label %265

265:                                              ; preds = %262
  %266 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %266, ptr noundef nonnull %258, ptr noundef nonnull %263) #20
  br label %311

267:                                              ; preds = %247, %232, %227, %220, %208
  %268 = icmp eq i32 %49, 0
  br i1 %268, label %297, label %269

269:                                              ; preds = %267
  %270 = add nsw i32 %210, %49
  %271 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %270, i32 noundef 1) #20
  %272 = getelementptr inbounds %struct.Nurb, ptr %271, i64 0, i32 18
  %273 = load ptr, ptr %272, align 8, !tbaa !24
  %274 = sext i32 %210 to i64
  %275 = getelementptr inbounds %struct.BezTriple, ptr %273, i64 %274
  %276 = load ptr, ptr %40, align 8, !tbaa !24
  %277 = sext i32 %49 to i64
  %278 = mul nsw i64 %277, 72
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %275, ptr align 4 %276, i64 %278, i1 false)
  %279 = load ptr, ptr %9, align 8, !tbaa !47
  %280 = icmp ne ptr %279, null
  %281 = icmp sgt i32 %49, 0
  %282 = and i1 %281, %280
  br i1 %282, label %283, label %318

283:                                              ; preds = %269, %292
  %284 = phi ptr [ %294, %292 ], [ %276, %269 ]
  %285 = phi i32 [ %295, %292 ], [ 0, %269 ]
  %286 = phi ptr [ %293, %292 ], [ %275, %269 ]
  %287 = load ptr, ptr %9, align 8, !tbaa !47
  %288 = call ptr @BLI_ghash_popkey(ptr noundef %287, ptr noundef %284, ptr noundef null) #20
  %289 = icmp eq ptr %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %283
  %291 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %291, ptr noundef %286, ptr noundef nonnull %288) #20
  br label %292

292:                                              ; preds = %290, %283
  %293 = getelementptr inbounds i8, ptr %286, i64 72
  %294 = getelementptr inbounds i8, ptr %284, i64 72
  %295 = add nuw nsw i32 %285, 1
  %296 = icmp eq i32 %295, %49
  br i1 %296, label %304, label %283, !llvm.loop !157

297:                                              ; preds = %267
  %298 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %210, i32 noundef 1) #20
  br label %304

299:                                              ; preds = %205
  %300 = add nsw i32 %107, 1
  %301 = sub nsw i32 %300, %207
  %302 = add nsw i32 %301, 1
  %303 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %302, i32 noundef 1) #20
  br label %304

304:                                              ; preds = %292, %203, %200, %297, %299, %121
  %305 = phi ptr [ %123, %121 ], [ %175, %200 ], [ %204, %203 ], [ %298, %297 ], [ %303, %299 ], [ %271, %292 ]
  %306 = phi i32 [ 0, %121 ], [ %202, %200 ], [ 0, %203 ], [ %207, %297 ], [ %207, %299 ], [ %207, %292 ]
  %307 = phi i32 [ %53, %121 ], [ %127, %200 ], [ %127, %203 ], [ %111, %297 ], [ %300, %299 ], [ %111, %292 ]
  %308 = phi i32 [ %122, %121 ], [ 1, %200 ], [ %128, %203 ], [ %210, %297 ], [ %302, %299 ], [ %210, %292 ]
  %309 = phi i32 [ %49, %121 ], [ %49, %200 ], [ %49, %203 ], [ 0, %297 ], [ %49, %299 ], [ 0, %292 ]
  %310 = icmp eq ptr %305, null
  br i1 %310, label %359, label %311

311:                                              ; preds = %262, %265, %304
  %312 = phi i32 [ %309, %304 ], [ %49, %265 ], [ %49, %262 ]
  %313 = phi i32 [ %308, %304 ], [ %210, %265 ], [ %210, %262 ]
  %314 = phi i32 [ %307, %304 ], [ %111, %265 ], [ %111, %262 ]
  %315 = phi i32 [ %306, %304 ], [ %207, %265 ], [ %207, %262 ]
  %316 = phi ptr [ %305, %304 ], [ %254, %265 ], [ %254, %262 ]
  %317 = sext i32 %313 to i64
  br label %318

318:                                              ; preds = %311, %269, %252
  %319 = phi i64 [ %317, %311 ], [ %274, %269 ], [ %257, %252 ]
  %320 = phi i32 [ %312, %311 ], [ 0, %269 ], [ %49, %252 ]
  %321 = phi i32 [ %313, %311 ], [ %210, %269 ], [ %210, %252 ]
  %322 = phi i32 [ %314, %311 ], [ %111, %269 ], [ %111, %252 ]
  %323 = phi i32 [ %315, %311 ], [ %207, %269 ], [ %207, %252 ]
  %324 = phi ptr [ %316, %311 ], [ %271, %269 ], [ %254, %252 ]
  %325 = getelementptr inbounds %struct.Nurb, ptr %324, i64 0, i32 18
  %326 = load ptr, ptr %325, align 8, !tbaa !24
  %327 = load ptr, ptr %40, align 8, !tbaa !24
  %328 = sext i32 %323 to i64
  %329 = getelementptr inbounds %struct.BezTriple, ptr %327, i64 %328
  %330 = mul nsw i64 %319, 72
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %326, ptr align 4 %329, i64 %330, i1 false)
  %331 = load ptr, ptr %9, align 8, !tbaa !47
  %332 = icmp ne ptr %331, null
  %333 = icmp sgt i32 %321, 0
  %334 = and i1 %333, %332
  br i1 %334, label %335, label %349

335:                                              ; preds = %318, %344
  %336 = phi ptr [ %346, %344 ], [ %329, %318 ]
  %337 = phi i32 [ %347, %344 ], [ 0, %318 ]
  %338 = phi ptr [ %345, %344 ], [ %326, %318 ]
  %339 = load ptr, ptr %9, align 8, !tbaa !47
  %340 = call ptr @BLI_ghash_popkey(ptr noundef %339, ptr noundef %336, ptr noundef null) #20
  %341 = icmp eq ptr %340, null
  br i1 %341, label %344, label %342

342:                                              ; preds = %335
  %343 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %343, ptr noundef %338, ptr noundef nonnull %340) #20
  br label %344

344:                                              ; preds = %342, %335
  %345 = getelementptr inbounds i8, ptr %338, i64 72
  %346 = getelementptr inbounds i8, ptr %336, i64 72
  %347 = add nuw nsw i32 %337, 1
  %348 = icmp eq i32 %347, %321
  br i1 %348, label %349, label %335, !llvm.loop !157

349:                                              ; preds = %344, %318
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %324) #20
  %350 = icmp eq i32 %323, 0
  br i1 %350, label %351, label %355

351:                                              ; preds = %349
  %352 = load i32, ptr %41, align 8, !tbaa !23
  %353 = add nsw i32 %352, -1
  %354 = icmp eq i32 %322, %353
  br i1 %354, label %359, label %355

355:                                              ; preds = %351, %349
  %356 = getelementptr inbounds %struct.Nurb, ptr %324, i64 0, i32 13
  %357 = load i16, ptr %356, align 4, !tbaa !39
  %358 = and i16 %357, -2
  store i16 %358, ptr %356, align 4, !tbaa !39
  br label %359

359:                                              ; preds = %168, %153, %148, %141, %304, %355, %351, %105, %85, %100, %74
  %360 = phi i32 [ %106, %105 ], [ %52, %85 ], [ %52, %100 ], [ %76, %74 ], [ -1, %351 ], [ -1, %355 ], [ -1, %304 ], [ -1, %141 ], [ -1, %148 ], [ -1, %153 ], [ -1, %168 ]
  %361 = phi i32 [ %107, %105 ], [ %51, %85 ], [ %51, %100 ], [ %53, %74 ], [ -1, %351 ], [ -1, %355 ], [ -1, %304 ], [ -1, %141 ], [ -1, %148 ], [ -1, %153 ], [ -1, %168 ]
  %362 = phi i32 [ %50, %105 ], [ %50, %85 ], [ %50, %100 ], [ %50, %74 ], [ %321, %351 ], [ %321, %355 ], [ %308, %304 ], [ %128, %141 ], [ %128, %148 ], [ %128, %153 ], [ %128, %168 ]
  %363 = phi i32 [ %49, %105 ], [ %49, %85 ], [ %49, %100 ], [ %49, %74 ], [ %320, %351 ], [ %320, %355 ], [ %309, %304 ], [ %128, %141 ], [ %128, %148 ], [ %128, %153 ], [ %128, %168 ]
  %364 = add nuw nsw i32 %53, 1
  %365 = getelementptr inbounds %struct.BezTriple, ptr %54, i64 1
  %366 = load i32, ptr %41, align 8, !tbaa !23
  %367 = icmp slt i32 %364, %366
  br i1 %367, label %47, label %368, !llvm.loop !423

368:                                              ; preds = %359
  %369 = icmp ne i32 %362, -1
  %370 = select i1 %10, i1 %369, i1 false
  %371 = icmp sgt i32 %366, 2
  %372 = and i1 %370, %371
  br i1 %372, label %373, label %1524

373:                                              ; preds = %368
  %374 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 13
  %375 = load i16, ptr %374, align 4, !tbaa !39
  %376 = and i16 %375, 1
  %377 = icmp eq i16 %376, 0
  br i1 %377, label %378, label %1524

378:                                              ; preds = %373
  %379 = load ptr, ptr %40, align 8, !tbaa !24
  %380 = load i16, ptr %11, align 8, !tbaa !198
  %381 = and i16 %380, 1
  %382 = icmp eq i16 %381, 0
  %383 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 0, i32 8
  %384 = load i8, ptr %383, align 4, !tbaa !29
  %385 = and i8 %384, 1
  %386 = icmp eq i8 %385, 0
  br i1 %382, label %388, label %387

387:                                              ; preds = %378
  br i1 %386, label %434, label %399

388:                                              ; preds = %378
  br i1 %386, label %389, label %404

389:                                              ; preds = %388
  %390 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 0, i32 7
  %391 = load i8, ptr %390, align 1, !tbaa !27
  %392 = and i8 %391, 1
  %393 = icmp eq i8 %392, 0
  br i1 %393, label %394, label %404

394:                                              ; preds = %389
  %395 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 0, i32 9
  %396 = load i8, ptr %395, align 1, !tbaa !30
  %397 = and i8 %396, 1
  %398 = icmp eq i8 %397, 0
  br i1 %398, label %434, label %404

399:                                              ; preds = %387
  %400 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 1, i32 8
  %401 = load i8, ptr %400, align 4, !tbaa !29
  %402 = and i8 %401, 1
  %403 = icmp eq i8 %402, 0
  br i1 %403, label %434, label %419

404:                                              ; preds = %394, %389, %388
  %405 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 1, i32 8
  %406 = load i8, ptr %405, align 4, !tbaa !29
  %407 = and i8 %406, 1
  %408 = icmp eq i8 %407, 0
  br i1 %408, label %409, label %419

409:                                              ; preds = %404
  %410 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 1, i32 7
  %411 = load i8, ptr %410, align 1, !tbaa !27
  %412 = and i8 %411, 1
  %413 = icmp eq i8 %412, 0
  br i1 %413, label %414, label %419

414:                                              ; preds = %409
  %415 = getelementptr inbounds %struct.BezTriple, ptr %379, i64 1, i32 9
  %416 = load i8, ptr %415, align 1, !tbaa !30
  %417 = and i8 %416, 1
  %418 = icmp eq i8 %417, 0
  br i1 %418, label %434, label %419

419:                                              ; preds = %414, %409, %404, %399
  %420 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef 1, i32 noundef 1) #20
  %421 = getelementptr inbounds %struct.Nurb, ptr %420, i64 0, i32 18
  %422 = load ptr, ptr %421, align 8, !tbaa !24
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %422, ptr noundef nonnull align 4 dereferenceable(72) %379, i64 72, i1 false)
  %423 = load ptr, ptr %9, align 8, !tbaa !47
  %424 = icmp eq ptr %423, null
  br i1 %424, label %430, label %425

425:                                              ; preds = %419
  %426 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %423, ptr noundef nonnull %379, ptr noundef null) #20
  %427 = icmp eq ptr %426, null
  br i1 %427, label %430, label %428

428:                                              ; preds = %425
  %429 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %429, ptr noundef nonnull %422, ptr noundef nonnull %426) #20
  br label %430

430:                                              ; preds = %425, %428, %419
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %420) #20
  %431 = load ptr, ptr %40, align 8, !tbaa !24
  %432 = load i32, ptr %41, align 8, !tbaa !23
  %433 = load i16, ptr %11, align 8, !tbaa !198
  br label %434

434:                                              ; preds = %430, %414, %399, %394, %387
  %435 = phi i16 [ %433, %430 ], [ %380, %414 ], [ %380, %399 ], [ %380, %394 ], [ %380, %387 ]
  %436 = phi i32 [ %432, %430 ], [ %366, %414 ], [ %366, %399 ], [ %366, %394 ], [ %366, %387 ]
  %437 = phi ptr [ %431, %430 ], [ %379, %414 ], [ %379, %399 ], [ %379, %394 ], [ %379, %387 ]
  %438 = add nsw i32 %436, -1
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %439
  %441 = add nsw i32 %436, -2
  %442 = sext i32 %441 to i64
  %443 = and i16 %435, 1
  %444 = icmp eq i16 %443, 0
  %445 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %439, i32 8
  %446 = load i8, ptr %445, align 4, !tbaa !29
  %447 = and i8 %446, 1
  %448 = icmp eq i8 %447, 0
  br i1 %444, label %450, label %449

449:                                              ; preds = %434
  br i1 %448, label %1524, label %461

450:                                              ; preds = %434
  br i1 %448, label %451, label %466

451:                                              ; preds = %450
  %452 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %439, i32 7
  %453 = load i8, ptr %452, align 1, !tbaa !27
  %454 = and i8 %453, 1
  %455 = icmp eq i8 %454, 0
  br i1 %455, label %456, label %466

456:                                              ; preds = %451
  %457 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %439, i32 9
  %458 = load i8, ptr %457, align 1, !tbaa !30
  %459 = and i8 %458, 1
  %460 = icmp eq i8 %459, 0
  br i1 %460, label %1524, label %466

461:                                              ; preds = %449
  %462 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %442, i32 8
  %463 = load i8, ptr %462, align 4, !tbaa !29
  %464 = and i8 %463, 1
  %465 = icmp eq i8 %464, 0
  br i1 %465, label %1524, label %481

466:                                              ; preds = %456, %451, %450
  %467 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %442, i32 8
  %468 = load i8, ptr %467, align 4, !tbaa !29
  %469 = and i8 %468, 1
  %470 = icmp eq i8 %469, 0
  br i1 %470, label %471, label %481

471:                                              ; preds = %466
  %472 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %442, i32 7
  %473 = load i8, ptr %472, align 1, !tbaa !27
  %474 = and i8 %473, 1
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %476, label %481

476:                                              ; preds = %471
  %477 = getelementptr inbounds %struct.BezTriple, ptr %437, i64 %442, i32 9
  %478 = load i8, ptr %477, align 1, !tbaa !30
  %479 = and i8 %478, 1
  %480 = icmp eq i8 %479, 0
  br i1 %480, label %1524, label %481

481:                                              ; preds = %476, %471, %466, %461
  %482 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef 1, i32 noundef 1) #20
  %483 = getelementptr inbounds %struct.Nurb, ptr %482, i64 0, i32 18
  %484 = load ptr, ptr %483, align 8, !tbaa !24
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %484, ptr noundef nonnull align 4 dereferenceable(72) %440, i64 72, i1 false)
  %485 = load ptr, ptr %9, align 8, !tbaa !47
  %486 = icmp eq ptr %485, null
  br i1 %486, label %492, label %487

487:                                              ; preds = %481
  %488 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %485, ptr noundef nonnull %440, ptr noundef null) #20
  %489 = icmp eq ptr %488, null
  br i1 %489, label %492, label %490

490:                                              ; preds = %487
  %491 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %491, ptr noundef nonnull %484, ptr noundef nonnull %488) #20
  br label %492

492:                                              ; preds = %487, %490, %481
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %482) #20
  br label %1524

493:                                              ; preds = %34
  %494 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 7
  %495 = load i32, ptr %494, align 4, !tbaa !31
  %496 = icmp sgt i32 %495, 0
  br i1 %496, label %497, label %1524

497:                                              ; preds = %493
  %498 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 6
  %499 = load i32, ptr %498, align 8, !tbaa !23
  %500 = icmp sgt i32 %499, 0
  br i1 %500, label %501, label %1524

501:                                              ; preds = %497
  %502 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 17
  %503 = load ptr, ptr %502, align 8, !tbaa !32
  %504 = zext i32 %499 to i64
  %505 = and i32 %495, 3
  %506 = icmp ult i32 %495, 4
  %507 = and i32 %495, -4
  %508 = icmp eq i32 %505, 0
  br label %509

509:                                              ; preds = %501, %569
  %510 = phi i64 [ 0, %501 ], [ %570, %569 ]
  %511 = getelementptr inbounds %struct.BPoint, ptr %503, i64 %510
  br i1 %506, label %542, label %512

512:                                              ; preds = %509, %512
  %513 = phi i32 [ %538, %512 ], [ 0, %509 ]
  %514 = phi ptr [ %539, %512 ], [ %511, %509 ]
  %515 = phi i32 [ %540, %512 ], [ 0, %509 ]
  %516 = getelementptr inbounds %struct.BPoint, ptr %514, i64 0, i32 3
  %517 = load i16, ptr %516, align 4, !tbaa !34
  %518 = and i16 %517, 1
  %519 = zext i16 %518 to i32
  %520 = add nuw nsw i32 %513, %519
  %521 = getelementptr inbounds %struct.BPoint, ptr %514, i64 %504
  %522 = getelementptr inbounds %struct.BPoint, ptr %514, i64 %504, i32 3
  %523 = load i16, ptr %522, align 4, !tbaa !34
  %524 = and i16 %523, 1
  %525 = zext i16 %524 to i32
  %526 = add nuw nsw i32 %520, %525
  %527 = getelementptr inbounds %struct.BPoint, ptr %521, i64 %504
  %528 = getelementptr inbounds %struct.BPoint, ptr %521, i64 %504, i32 3
  %529 = load i16, ptr %528, align 4, !tbaa !34
  %530 = and i16 %529, 1
  %531 = zext i16 %530 to i32
  %532 = add nuw nsw i32 %526, %531
  %533 = getelementptr inbounds %struct.BPoint, ptr %527, i64 %504
  %534 = getelementptr inbounds %struct.BPoint, ptr %527, i64 %504, i32 3
  %535 = load i16, ptr %534, align 4, !tbaa !34
  %536 = and i16 %535, 1
  %537 = zext i16 %536 to i32
  %538 = add nuw nsw i32 %532, %537
  %539 = getelementptr inbounds %struct.BPoint, ptr %533, i64 %504
  %540 = add i32 %515, 4
  %541 = icmp eq i32 %540, %507
  br i1 %541, label %542, label %512, !llvm.loop !352

542:                                              ; preds = %512, %509
  %543 = phi i32 [ undef, %509 ], [ %538, %512 ]
  %544 = phi i32 [ 0, %509 ], [ %538, %512 ]
  %545 = phi ptr [ %511, %509 ], [ %539, %512 ]
  br i1 %508, label %558, label %546

546:                                              ; preds = %542, %546
  %547 = phi i32 [ %554, %546 ], [ %544, %542 ]
  %548 = phi ptr [ %555, %546 ], [ %545, %542 ]
  %549 = phi i32 [ %556, %546 ], [ 0, %542 ]
  %550 = getelementptr inbounds %struct.BPoint, ptr %548, i64 0, i32 3
  %551 = load i16, ptr %550, align 4, !tbaa !34
  %552 = and i16 %551, 1
  %553 = zext i16 %552 to i32
  %554 = add nuw nsw i32 %547, %553
  %555 = getelementptr inbounds %struct.BPoint, ptr %548, i64 %504
  %556 = add i32 %549, 1
  %557 = icmp eq i32 %556, %505
  br i1 %557, label %558, label %546, !llvm.loop !424

558:                                              ; preds = %546, %542
  %559 = phi i32 [ %543, %542 ], [ %554, %546 ]
  %560 = icmp eq i32 %559, %495
  %561 = icmp eq i32 %559, 0
  %562 = or i1 %560, %561
  br i1 %562, label %569, label %563

563:                                              ; preds = %558
  %564 = icmp ult i32 %499, 16
  %565 = and i64 %504, 4294967280
  %566 = trunc i64 %565 to i32
  %567 = mul nuw nsw i64 %565, 36
  %568 = icmp eq i64 %565, %504
  br label %982

569:                                              ; preds = %558
  %570 = add nuw nsw i64 %510, 1
  %571 = icmp eq i64 %570, %504
  br i1 %571, label %572, label %509, !llvm.loop !354

572:                                              ; preds = %569
  %573 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 17
  br i1 %500, label %574, label %1524

574:                                              ; preds = %572
  %575 = load ptr, ptr %573, align 8, !tbaa !32
  %576 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 13
  br label %577

577:                                              ; preds = %574, %873
  %578 = phi i32 [ %499, %574 ], [ %880, %873 ]
  %579 = phi i32 [ 0, %574 ], [ %877, %873 ]
  %580 = phi i32 [ -1, %574 ], [ %876, %873 ]
  %581 = phi i32 [ -1, %574 ], [ %875, %873 ]
  %582 = phi i32 [ -1, %574 ], [ %874, %873 ]
  %583 = phi i32 [ 0, %574 ], [ %878, %873 ]
  %584 = phi ptr [ %575, %574 ], [ %879, %873 ]
  %585 = getelementptr inbounds %struct.BPoint, ptr %584, i64 0, i32 3
  %586 = load i16, ptr %585, align 4, !tbaa !34
  %587 = and i16 %586, 1
  %588 = icmp eq i16 %587, 0
  br i1 %588, label %589, label %594

589:                                              ; preds = %577
  %590 = icmp eq i32 %582, -1
  %591 = select i1 %590, i32 %583, i32 %582
  %592 = add nsw i32 %578, -1
  %593 = icmp slt i32 %583, %592
  br i1 %593, label %873, label %602

594:                                              ; preds = %577
  %595 = add nsw i32 %578, -1
  %596 = icmp slt i32 %583, %595
  br i1 %596, label %597, label %602

597:                                              ; preds = %594
  %598 = getelementptr inbounds %struct.BPoint, ptr %584, i64 1, i32 3
  %599 = load i16, ptr %598, align 4, !tbaa !34
  %600 = and i16 %599, 1
  %601 = icmp eq i16 %600, 0
  br i1 %601, label %873, label %602

602:                                              ; preds = %594, %597, %589
  %603 = phi i32 [ %582, %597 ], [ %582, %594 ], [ %591, %589 ]
  %604 = phi i32 [ %581, %597 ], [ %581, %594 ], [ %583, %589 ]
  %605 = icmp sgt i32 %603, -1
  br i1 %605, label %606, label %873

606:                                              ; preds = %602
  %607 = icmp ult i32 %603, 2
  %608 = add nsw i32 %578, -1
  br i1 %607, label %609, label %696

609:                                              ; preds = %606
  %610 = icmp eq i32 %583, %608
  br i1 %610, label %611, label %622

611:                                              ; preds = %609
  %612 = icmp ne i32 %603, 1
  %613 = icmp eq i32 %604, %583
  %614 = select i1 %612, i1 true, i1 %613
  br i1 %614, label %618, label %615

615:                                              ; preds = %611
  %616 = load i16, ptr %576, align 4, !tbaa !39
  %617 = and i16 %616, -2
  store i16 %617, ptr %576, align 4, !tbaa !39
  br label %618

618:                                              ; preds = %615, %611
  %619 = add nuw nsw i32 %583, 1
  %620 = load i32, ptr %494, align 4, !tbaa !31
  %621 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %619, i32 noundef %620) #20
  br label %806

622:                                              ; preds = %609
  %623 = icmp eq i32 %603, 0
  br i1 %623, label %624, label %696

624:                                              ; preds = %622
  %625 = add nsw i32 %604, 1
  %626 = add nsw i32 %604, 2
  %627 = load ptr, ptr %573, align 8, !tbaa !32
  %628 = add nsw i32 %578, -2
  %629 = sext i32 %628 to i64
  %630 = load i16, ptr %576, align 4, !tbaa !39
  %631 = and i16 %630, 1
  %632 = icmp eq i16 %631, 0
  br i1 %632, label %693, label %633

633:                                              ; preds = %624
  %634 = sext i32 %608 to i64
  %635 = getelementptr inbounds %struct.BPoint, ptr %627, i64 %634, i32 3
  %636 = load i16, ptr %635, align 4, !tbaa !34
  %637 = and i16 %636, 1
  %638 = icmp eq i16 %637, 0
  br i1 %638, label %873, label %639

639:                                              ; preds = %633
  %640 = getelementptr inbounds %struct.BPoint, ptr %627, i64 %629, i32 3
  %641 = load i16, ptr %640, align 4, !tbaa !34
  %642 = and i16 %641, 1
  %643 = icmp eq i16 %642, 0
  br i1 %643, label %873, label %644

644:                                              ; preds = %639
  %645 = add nsw i32 %604, 3
  %646 = load i32, ptr %494, align 4, !tbaa !31
  %647 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %645, i32 noundef %646) #20
  %648 = load i32, ptr %494, align 4, !tbaa !31
  %649 = icmp sgt i32 %648, 0
  br i1 %649, label %650, label %690

650:                                              ; preds = %644
  %651 = getelementptr inbounds %struct.Nurb, ptr %647, i64 0, i32 17
  %652 = getelementptr inbounds %struct.Nurb, ptr %647, i64 0, i32 6
  %653 = sext i32 %626 to i64
  %654 = mul nsw i64 %653, 36
  %655 = icmp sgt i32 %604, -2
  br label %656

656:                                              ; preds = %650, %686
  %657 = phi i32 [ 0, %650 ], [ %687, %686 ]
  %658 = load ptr, ptr %651, align 8, !tbaa !32
  %659 = load i32, ptr %652, align 8, !tbaa !23
  %660 = mul nsw i32 %659, %657
  %661 = add nsw i32 %660, 1
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds %struct.BPoint, ptr %658, i64 %662
  %664 = load ptr, ptr %573, align 8, !tbaa !32
  %665 = load i32, ptr %498, align 8, !tbaa !23
  %666 = mul nsw i32 %665, %657
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds %struct.BPoint, ptr %664, i64 %667
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %663, ptr align 4 %668, i64 %654, i1 false)
  %669 = load ptr, ptr %9, align 8, !tbaa !47
  %670 = icmp ne ptr %669, null
  %671 = and i1 %655, %670
  br i1 %671, label %672, label %686

672:                                              ; preds = %656, %681
  %673 = phi ptr [ %683, %681 ], [ %668, %656 ]
  %674 = phi i32 [ %684, %681 ], [ 0, %656 ]
  %675 = phi ptr [ %682, %681 ], [ %663, %656 ]
  %676 = load ptr, ptr %9, align 8, !tbaa !47
  %677 = call ptr @BLI_ghash_popkey(ptr noundef %676, ptr noundef %673, ptr noundef null) #20
  %678 = icmp eq ptr %677, null
  br i1 %678, label %681, label %679

679:                                              ; preds = %672
  %680 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %680, ptr noundef %675, ptr noundef nonnull %677) #20
  br label %681

681:                                              ; preds = %679, %672
  %682 = getelementptr inbounds i8, ptr %675, i64 36
  %683 = getelementptr inbounds i8, ptr %673, i64 36
  %684 = add nuw nsw i32 %674, 1
  %685 = icmp eq i32 %684, %626
  br i1 %685, label %686, label %672, !llvm.loop !157

686:                                              ; preds = %681, %656
  %687 = add nuw nsw i32 %657, 1
  %688 = load i32, ptr %494, align 4, !tbaa !31
  %689 = icmp slt i32 %687, %688
  br i1 %689, label %656, label %690, !llvm.loop !425

690:                                              ; preds = %686, %644
  %691 = load i32, ptr %498, align 8, !tbaa !23
  %692 = add nsw i32 %691, -1
  br label %806

693:                                              ; preds = %624
  %694 = load i32, ptr %494, align 4, !tbaa !31
  %695 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %626, i32 noundef %694) #20
  br label %806

696:                                              ; preds = %606, %622
  %697 = icmp eq i32 %604, %608
  %698 = add nsw i32 %603, -1
  br i1 %697, label %699, label %800

699:                                              ; preds = %696
  %700 = sub nsw i32 %608, %698
  %701 = add nsw i32 %700, 1
  %702 = load ptr, ptr %573, align 8, !tbaa !32
  %703 = load i16, ptr %576, align 4, !tbaa !39
  %704 = and i16 %703, 1
  %705 = icmp eq i16 %704, 0
  br i1 %705, label %749, label %706

706:                                              ; preds = %699
  %707 = getelementptr inbounds %struct.BPoint, ptr %702, i64 0, i32 3
  %708 = load i16, ptr %707, align 4, !tbaa !34
  %709 = and i16 %708, 1
  %710 = icmp eq i16 %709, 0
  br i1 %710, label %749, label %711

711:                                              ; preds = %706
  %712 = getelementptr inbounds %struct.BPoint, ptr %702, i64 1, i32 3
  %713 = load i16, ptr %712, align 4, !tbaa !34
  %714 = and i16 %713, 1
  %715 = icmp eq i16 %714, 0
  br i1 %715, label %749, label %716

716:                                              ; preds = %711
  %717 = add nsw i32 %700, 2
  %718 = load i32, ptr %494, align 4, !tbaa !31
  %719 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %717, i32 noundef %718) #20
  %720 = load i32, ptr %494, align 4, !tbaa !31
  %721 = icmp sgt i32 %720, 0
  br i1 %721, label %722, label %806

722:                                              ; preds = %716
  %723 = getelementptr inbounds %struct.Nurb, ptr %719, i64 0, i32 17
  %724 = getelementptr inbounds %struct.Nurb, ptr %719, i64 0, i32 6
  br label %725

725:                                              ; preds = %722, %745
  %726 = phi i32 [ 0, %722 ], [ %746, %745 ]
  %727 = load ptr, ptr %723, align 8, !tbaa !32
  %728 = load i32, ptr %724, align 8, !tbaa !23
  %729 = mul nsw i32 %728, %726
  %730 = add nsw i32 %729, %701
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds %struct.BPoint, ptr %727, i64 %731
  %733 = load ptr, ptr %573, align 8, !tbaa !32
  %734 = load i32, ptr %498, align 8, !tbaa !23
  %735 = mul nsw i32 %734, %726
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds %struct.BPoint, ptr %733, i64 %736
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %732, ptr noundef nonnull align 4 dereferenceable(36) %737, i64 36, i1 false)
  %738 = load ptr, ptr %9, align 8, !tbaa !47
  %739 = icmp eq ptr %738, null
  br i1 %739, label %745, label %740

740:                                              ; preds = %725
  %741 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %738, ptr noundef nonnull %737, ptr noundef null) #20
  %742 = icmp eq ptr %741, null
  br i1 %742, label %745, label %743

743:                                              ; preds = %740
  %744 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %744, ptr noundef nonnull %732, ptr noundef nonnull %741) #20
  br label %745

745:                                              ; preds = %740, %743, %725
  %746 = add nuw nsw i32 %726, 1
  %747 = load i32, ptr %494, align 4, !tbaa !31
  %748 = icmp slt i32 %746, %747
  br i1 %748, label %725, label %815, !llvm.loop !426

749:                                              ; preds = %711, %706, %699
  %750 = icmp eq i32 %579, 0
  br i1 %750, label %797, label %751

751:                                              ; preds = %749
  %752 = add nsw i32 %701, %579
  %753 = load i32, ptr %494, align 4, !tbaa !31
  %754 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %752, i32 noundef %753) #20
  %755 = load i32, ptr %494, align 4, !tbaa !31
  %756 = icmp sgt i32 %755, 0
  br i1 %756, label %757, label %806

757:                                              ; preds = %751
  %758 = getelementptr inbounds %struct.Nurb, ptr %754, i64 0, i32 17
  %759 = getelementptr inbounds %struct.Nurb, ptr %754, i64 0, i32 6
  %760 = sext i32 %579 to i64
  %761 = mul nsw i64 %760, 36
  %762 = icmp sgt i32 %579, 0
  br label %763

763:                                              ; preds = %757, %793
  %764 = phi i32 [ 0, %757 ], [ %794, %793 ]
  %765 = load ptr, ptr %758, align 8, !tbaa !32
  %766 = load i32, ptr %759, align 8, !tbaa !23
  %767 = mul nsw i32 %766, %764
  %768 = add nsw i32 %767, %701
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds %struct.BPoint, ptr %765, i64 %769
  %771 = load ptr, ptr %573, align 8, !tbaa !32
  %772 = load i32, ptr %498, align 8, !tbaa !23
  %773 = mul nsw i32 %772, %764
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds %struct.BPoint, ptr %771, i64 %774
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %770, ptr align 4 %775, i64 %761, i1 false)
  %776 = load ptr, ptr %9, align 8, !tbaa !47
  %777 = icmp ne ptr %776, null
  %778 = and i1 %762, %777
  br i1 %778, label %779, label %793

779:                                              ; preds = %763, %788
  %780 = phi ptr [ %790, %788 ], [ %775, %763 ]
  %781 = phi i32 [ %791, %788 ], [ 0, %763 ]
  %782 = phi ptr [ %789, %788 ], [ %770, %763 ]
  %783 = load ptr, ptr %9, align 8, !tbaa !47
  %784 = call ptr @BLI_ghash_popkey(ptr noundef %783, ptr noundef %780, ptr noundef null) #20
  %785 = icmp eq ptr %784, null
  br i1 %785, label %788, label %786

786:                                              ; preds = %779
  %787 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %787, ptr noundef %782, ptr noundef nonnull %784) #20
  br label %788

788:                                              ; preds = %786, %779
  %789 = getelementptr inbounds i8, ptr %782, i64 36
  %790 = getelementptr inbounds i8, ptr %780, i64 36
  %791 = add nuw nsw i32 %781, 1
  %792 = icmp eq i32 %791, %579
  br i1 %792, label %793, label %779, !llvm.loop !157

793:                                              ; preds = %788, %763
  %794 = add nuw nsw i32 %764, 1
  %795 = load i32, ptr %494, align 4, !tbaa !31
  %796 = icmp slt i32 %794, %795
  br i1 %796, label %763, label %806, !llvm.loop !427

797:                                              ; preds = %749
  %798 = load i32, ptr %494, align 4, !tbaa !31
  %799 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %701, i32 noundef %798) #20
  br label %806

800:                                              ; preds = %696
  %801 = add nsw i32 %604, 1
  %802 = sub nsw i32 %801, %698
  %803 = add nsw i32 %802, 1
  %804 = load i32, ptr %494, align 4, !tbaa !31
  %805 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %803, i32 noundef %804) #20
  br label %806

806:                                              ; preds = %793, %716, %751, %693, %690, %797, %800, %618
  %807 = phi ptr [ %621, %618 ], [ %647, %690 ], [ %695, %693 ], [ %799, %797 ], [ %805, %800 ], [ %754, %751 ], [ %719, %716 ], [ %754, %793 ]
  %808 = phi i32 [ 0, %618 ], [ %692, %690 ], [ 0, %693 ], [ %698, %797 ], [ %698, %800 ], [ %698, %751 ], [ %698, %716 ], [ %698, %793 ]
  %809 = phi i32 [ %583, %618 ], [ %625, %690 ], [ %625, %693 ], [ %608, %797 ], [ %801, %800 ], [ %608, %751 ], [ %608, %716 ], [ %608, %793 ]
  %810 = phi i32 [ %619, %618 ], [ 1, %690 ], [ %626, %693 ], [ %701, %797 ], [ %803, %800 ], [ %701, %751 ], [ %701, %716 ], [ %701, %793 ]
  %811 = phi i32 [ %579, %618 ], [ %579, %690 ], [ %579, %693 ], [ 0, %797 ], [ %579, %800 ], [ %579, %751 ], [ %579, %716 ], [ %579, %793 ]
  %812 = icmp eq ptr %807, null
  br i1 %812, label %873, label %813

813:                                              ; preds = %806
  %814 = load i32, ptr %494, align 4, !tbaa !31
  br label %815

815:                                              ; preds = %745, %813
  %816 = phi i32 [ %814, %813 ], [ %747, %745 ]
  %817 = phi i32 [ %811, %813 ], [ %579, %745 ]
  %818 = phi i32 [ %810, %813 ], [ %701, %745 ]
  %819 = phi i32 [ %809, %813 ], [ %608, %745 ]
  %820 = phi i32 [ %808, %813 ], [ %698, %745 ]
  %821 = phi ptr [ %807, %813 ], [ %719, %745 ]
  %822 = icmp sgt i32 %816, 0
  br i1 %822, label %823, label %863

823:                                              ; preds = %815
  %824 = getelementptr inbounds %struct.Nurb, ptr %821, i64 0, i32 17
  %825 = getelementptr inbounds %struct.Nurb, ptr %821, i64 0, i32 6
  %826 = sext i32 %818 to i64
  %827 = mul nsw i64 %826, 36
  %828 = icmp sgt i32 %818, 0
  br label %829

829:                                              ; preds = %823, %859
  %830 = phi i32 [ 0, %823 ], [ %860, %859 ]
  %831 = load ptr, ptr %824, align 8, !tbaa !32
  %832 = load i32, ptr %825, align 8, !tbaa !23
  %833 = mul nsw i32 %832, %830
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds %struct.BPoint, ptr %831, i64 %834
  %836 = load ptr, ptr %573, align 8, !tbaa !32
  %837 = load i32, ptr %498, align 8, !tbaa !23
  %838 = mul nsw i32 %837, %830
  %839 = add nsw i32 %838, %820
  %840 = sext i32 %839 to i64
  %841 = getelementptr inbounds %struct.BPoint, ptr %836, i64 %840
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %835, ptr align 4 %841, i64 %827, i1 false)
  %842 = load ptr, ptr %9, align 8, !tbaa !47
  %843 = icmp ne ptr %842, null
  %844 = and i1 %828, %843
  br i1 %844, label %845, label %859

845:                                              ; preds = %829, %854
  %846 = phi ptr [ %856, %854 ], [ %841, %829 ]
  %847 = phi i32 [ %857, %854 ], [ 0, %829 ]
  %848 = phi ptr [ %855, %854 ], [ %835, %829 ]
  %849 = load ptr, ptr %9, align 8, !tbaa !47
  %850 = call ptr @BLI_ghash_popkey(ptr noundef %849, ptr noundef %846, ptr noundef null) #20
  %851 = icmp eq ptr %850, null
  br i1 %851, label %854, label %852

852:                                              ; preds = %845
  %853 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %853, ptr noundef %848, ptr noundef nonnull %850) #20
  br label %854

854:                                              ; preds = %852, %845
  %855 = getelementptr inbounds i8, ptr %848, i64 36
  %856 = getelementptr inbounds i8, ptr %846, i64 36
  %857 = add nuw nsw i32 %847, 1
  %858 = icmp eq i32 %857, %818
  br i1 %858, label %859, label %845, !llvm.loop !157

859:                                              ; preds = %854, %829
  %860 = add nuw nsw i32 %830, 1
  %861 = load i32, ptr %494, align 4, !tbaa !31
  %862 = icmp slt i32 %860, %861
  br i1 %862, label %829, label %863, !llvm.loop !428

863:                                              ; preds = %859, %815
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %821) #20
  %864 = icmp eq i32 %820, 0
  br i1 %864, label %865, label %869

865:                                              ; preds = %863
  %866 = load i32, ptr %498, align 8, !tbaa !23
  %867 = add nsw i32 %866, -1
  %868 = icmp eq i32 %819, %867
  br i1 %868, label %873, label %869

869:                                              ; preds = %865, %863
  %870 = getelementptr inbounds %struct.Nurb, ptr %821, i64 0, i32 13
  %871 = load i16, ptr %870, align 4, !tbaa !39
  %872 = and i16 %871, -2
  store i16 %872, ptr %870, align 4, !tbaa !39
  br label %873

873:                                              ; preds = %639, %633, %806, %869, %865, %602, %597, %589
  %874 = phi i32 [ %603, %602 ], [ %582, %597 ], [ %591, %589 ], [ -1, %865 ], [ -1, %869 ], [ -1, %806 ], [ -1, %633 ], [ -1, %639 ]
  %875 = phi i32 [ %604, %602 ], [ %581, %597 ], [ %583, %589 ], [ -1, %865 ], [ -1, %869 ], [ -1, %806 ], [ -1, %633 ], [ -1, %639 ]
  %876 = phi i32 [ %580, %602 ], [ %580, %597 ], [ %580, %589 ], [ %818, %865 ], [ %818, %869 ], [ %810, %806 ], [ %626, %633 ], [ %626, %639 ]
  %877 = phi i32 [ %579, %602 ], [ %579, %597 ], [ %579, %589 ], [ %817, %865 ], [ %817, %869 ], [ %811, %806 ], [ %626, %633 ], [ %626, %639 ]
  %878 = add nuw nsw i32 %583, 1
  %879 = getelementptr inbounds %struct.BPoint, ptr %584, i64 1
  %880 = load i32, ptr %498, align 8, !tbaa !23
  %881 = icmp slt i32 %878, %880
  br i1 %881, label %577, label %882, !llvm.loop !429

882:                                              ; preds = %873
  %883 = icmp ne i32 %876, -1
  %884 = select i1 %10, i1 %883, i1 false
  %885 = icmp sgt i32 %880, 2
  %886 = and i1 %884, %885
  br i1 %886, label %887, label %1524

887:                                              ; preds = %882
  %888 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 13
  %889 = load i16, ptr %888, align 4, !tbaa !39
  %890 = and i16 %889, 1
  %891 = icmp eq i16 %890, 0
  br i1 %891, label %892, label %1524

892:                                              ; preds = %887
  %893 = load ptr, ptr %573, align 8, !tbaa !32
  %894 = getelementptr inbounds %struct.BPoint, ptr %893, i64 0, i32 3
  %895 = load i16, ptr %894, align 4, !tbaa !34
  %896 = and i16 %895, 1
  %897 = icmp eq i16 %896, 0
  br i1 %897, label %935, label %898

898:                                              ; preds = %892
  %899 = getelementptr inbounds %struct.BPoint, ptr %893, i64 1, i32 3
  %900 = load i16, ptr %899, align 4, !tbaa !34
  %901 = and i16 %900, 1
  %902 = icmp eq i16 %901, 0
  br i1 %902, label %935, label %903

903:                                              ; preds = %898
  %904 = load i32, ptr %494, align 4, !tbaa !31
  %905 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef 1, i32 noundef %904) #20
  %906 = load i32, ptr %494, align 4, !tbaa !31
  %907 = icmp sgt i32 %906, 0
  br i1 %907, label %908, label %932

908:                                              ; preds = %903
  %909 = getelementptr inbounds %struct.Nurb, ptr %905, i64 0, i32 17
  br label %910

910:                                              ; preds = %908, %927
  %911 = phi i64 [ 0, %908 ], [ %928, %927 ]
  %912 = load ptr, ptr %909, align 8, !tbaa !32
  %913 = getelementptr inbounds %struct.BPoint, ptr %912, i64 %911
  %914 = load ptr, ptr %573, align 8, !tbaa !32
  %915 = load i32, ptr %498, align 8, !tbaa !23
  %916 = trunc i64 %911 to i32
  %917 = mul nsw i32 %915, %916
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds %struct.BPoint, ptr %914, i64 %918
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %913, ptr noundef nonnull align 4 dereferenceable(36) %919, i64 36, i1 false)
  %920 = load ptr, ptr %9, align 8, !tbaa !47
  %921 = icmp eq ptr %920, null
  br i1 %921, label %927, label %922

922:                                              ; preds = %910
  %923 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %920, ptr noundef nonnull %919, ptr noundef null) #20
  %924 = icmp eq ptr %923, null
  br i1 %924, label %927, label %925

925:                                              ; preds = %922
  %926 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %926, ptr noundef nonnull %913, ptr noundef nonnull %923) #20
  br label %927

927:                                              ; preds = %922, %925, %910
  %928 = add nuw nsw i64 %911, 1
  %929 = load i32, ptr %494, align 4, !tbaa !31
  %930 = sext i32 %929 to i64
  %931 = icmp slt i64 %928, %930
  br i1 %931, label %910, label %932, !llvm.loop !430

932:                                              ; preds = %927, %903
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef %905) #20
  %933 = load ptr, ptr %573, align 8, !tbaa !32
  %934 = load i32, ptr %498, align 8, !tbaa !23
  br label %935

935:                                              ; preds = %932, %898, %892
  %936 = phi i32 [ %934, %932 ], [ %880, %898 ], [ %880, %892 ]
  %937 = phi ptr [ %933, %932 ], [ %893, %898 ], [ %893, %892 ]
  %938 = add nsw i32 %936, -1
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds %struct.BPoint, ptr %937, i64 %939, i32 3
  %941 = load i16, ptr %940, align 4, !tbaa !34
  %942 = and i16 %941, 1
  %943 = icmp eq i16 %942, 0
  br i1 %943, label %1524, label %944

944:                                              ; preds = %935
  %945 = add nsw i32 %936, -2
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds %struct.BPoint, ptr %937, i64 %946, i32 3
  %948 = load i16, ptr %947, align 4, !tbaa !34
  %949 = and i16 %948, 1
  %950 = icmp eq i16 %949, 0
  br i1 %950, label %1524, label %951

951:                                              ; preds = %944
  %952 = load i32, ptr %494, align 4, !tbaa !31
  %953 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef 1, i32 noundef %952) #20
  %954 = load i32, ptr %494, align 4, !tbaa !31
  %955 = icmp sgt i32 %954, 0
  br i1 %955, label %956, label %981

956:                                              ; preds = %951
  %957 = getelementptr inbounds %struct.Nurb, ptr %953, i64 0, i32 17
  br label %958

958:                                              ; preds = %956, %977
  %959 = phi i64 [ 0, %956 ], [ %964, %977 ]
  %960 = load ptr, ptr %957, align 8, !tbaa !32
  %961 = getelementptr inbounds %struct.BPoint, ptr %960, i64 %959
  %962 = load ptr, ptr %573, align 8, !tbaa !32
  %963 = load i32, ptr %498, align 8, !tbaa !23
  %964 = add nuw nsw i64 %959, 1
  %965 = trunc i64 %964 to i32
  %966 = mul i32 %963, %965
  %967 = add nsw i32 %966, -1
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds %struct.BPoint, ptr %962, i64 %968
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %961, ptr noundef nonnull align 4 dereferenceable(36) %969, i64 36, i1 false)
  %970 = load ptr, ptr %9, align 8, !tbaa !47
  %971 = icmp eq ptr %970, null
  br i1 %971, label %977, label %972

972:                                              ; preds = %958
  %973 = call ptr @BLI_ghash_popkey(ptr noundef nonnull %970, ptr noundef nonnull %969, ptr noundef null) #20
  %974 = icmp eq ptr %973, null
  br i1 %974, label %977, label %975

975:                                              ; preds = %972
  %976 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %976, ptr noundef nonnull %961, ptr noundef nonnull %973) #20
  br label %977

977:                                              ; preds = %972, %975, %958
  %978 = load i32, ptr %494, align 4, !tbaa !31
  %979 = sext i32 %978 to i64
  %980 = icmp slt i64 %964, %979
  br i1 %980, label %958, label %981, !llvm.loop !431

981:                                              ; preds = %977, %951
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef %953) #20
  br label %1524

982:                                              ; preds = %563, %1129
  %983 = phi i32 [ %1130, %1129 ], [ 0, %563 ]
  %984 = phi ptr [ %1125, %1129 ], [ %503, %563 ]
  br i1 %564, label %1107, label %985

985:                                              ; preds = %982
  %986 = getelementptr i8, ptr %984, i64 %567
  %987 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %988 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %989 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %990 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %991 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %992 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %993 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %994 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %995 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %996 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %997 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %998 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %999 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %1000 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %1001 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  %1002 = getelementptr %struct.BPoint, ptr %984, i64 0, i32 3
  br label %1003

1003:                                             ; preds = %1003, %985
  %1004 = phi i64 [ 0, %985 ], [ %1100, %1003 ]
  %1005 = phi <4 x i32> [ zeroinitializer, %985 ], [ %1096, %1003 ]
  %1006 = phi <4 x i32> [ zeroinitializer, %985 ], [ %1097, %1003 ]
  %1007 = phi <4 x i32> [ zeroinitializer, %985 ], [ %1098, %1003 ]
  %1008 = phi <4 x i32> [ zeroinitializer, %985 ], [ %1099, %1003 ]
  %1009 = mul i64 %1004, 36
  %1010 = mul i64 %1004, 36
  %1011 = or i64 %1010, 36
  %1012 = mul i64 %1004, 36
  %1013 = add i64 %1012, 72
  %1014 = mul i64 %1004, 36
  %1015 = add i64 %1014, 108
  %1016 = mul i64 %1004, 36
  %1017 = add i64 %1016, 144
  %1018 = mul i64 %1004, 36
  %1019 = add i64 %1018, 180
  %1020 = mul i64 %1004, 36
  %1021 = add i64 %1020, 216
  %1022 = mul i64 %1004, 36
  %1023 = add i64 %1022, 252
  %1024 = mul i64 %1004, 36
  %1025 = add i64 %1024, 288
  %1026 = mul i64 %1004, 36
  %1027 = add i64 %1026, 324
  %1028 = mul i64 %1004, 36
  %1029 = add i64 %1028, 360
  %1030 = mul i64 %1004, 36
  %1031 = add i64 %1030, 396
  %1032 = mul i64 %1004, 36
  %1033 = add i64 %1032, 432
  %1034 = mul i64 %1004, 36
  %1035 = add i64 %1034, 468
  %1036 = mul i64 %1004, 36
  %1037 = add i64 %1036, 504
  %1038 = mul i64 %1004, 36
  %1039 = add i64 %1038, 540
  %1040 = getelementptr i8, ptr %987, i64 %1009
  %1041 = getelementptr i8, ptr %988, i64 %1011
  %1042 = getelementptr i8, ptr %989, i64 %1013
  %1043 = getelementptr i8, ptr %990, i64 %1015
  %1044 = getelementptr i8, ptr %991, i64 %1017
  %1045 = getelementptr i8, ptr %992, i64 %1019
  %1046 = getelementptr i8, ptr %993, i64 %1021
  %1047 = getelementptr i8, ptr %994, i64 %1023
  %1048 = getelementptr i8, ptr %995, i64 %1025
  %1049 = getelementptr i8, ptr %996, i64 %1027
  %1050 = getelementptr i8, ptr %997, i64 %1029
  %1051 = getelementptr i8, ptr %998, i64 %1031
  %1052 = getelementptr i8, ptr %999, i64 %1033
  %1053 = getelementptr i8, ptr %1000, i64 %1035
  %1054 = getelementptr i8, ptr %1001, i64 %1037
  %1055 = getelementptr i8, ptr %1002, i64 %1039
  %1056 = load i16, ptr %1040, align 4, !tbaa !34
  %1057 = load i16, ptr %1041, align 4, !tbaa !34
  %1058 = load i16, ptr %1042, align 4, !tbaa !34
  %1059 = load i16, ptr %1043, align 4, !tbaa !34
  %1060 = insertelement <4 x i16> poison, i16 %1056, i64 0
  %1061 = insertelement <4 x i16> %1060, i16 %1057, i64 1
  %1062 = insertelement <4 x i16> %1061, i16 %1058, i64 2
  %1063 = insertelement <4 x i16> %1062, i16 %1059, i64 3
  %1064 = load i16, ptr %1044, align 4, !tbaa !34
  %1065 = load i16, ptr %1045, align 4, !tbaa !34
  %1066 = load i16, ptr %1046, align 4, !tbaa !34
  %1067 = load i16, ptr %1047, align 4, !tbaa !34
  %1068 = insertelement <4 x i16> poison, i16 %1064, i64 0
  %1069 = insertelement <4 x i16> %1068, i16 %1065, i64 1
  %1070 = insertelement <4 x i16> %1069, i16 %1066, i64 2
  %1071 = insertelement <4 x i16> %1070, i16 %1067, i64 3
  %1072 = load i16, ptr %1048, align 4, !tbaa !34
  %1073 = load i16, ptr %1049, align 4, !tbaa !34
  %1074 = load i16, ptr %1050, align 4, !tbaa !34
  %1075 = load i16, ptr %1051, align 4, !tbaa !34
  %1076 = insertelement <4 x i16> poison, i16 %1072, i64 0
  %1077 = insertelement <4 x i16> %1076, i16 %1073, i64 1
  %1078 = insertelement <4 x i16> %1077, i16 %1074, i64 2
  %1079 = insertelement <4 x i16> %1078, i16 %1075, i64 3
  %1080 = load i16, ptr %1052, align 4, !tbaa !34
  %1081 = load i16, ptr %1053, align 4, !tbaa !34
  %1082 = load i16, ptr %1054, align 4, !tbaa !34
  %1083 = load i16, ptr %1055, align 4, !tbaa !34
  %1084 = insertelement <4 x i16> poison, i16 %1080, i64 0
  %1085 = insertelement <4 x i16> %1084, i16 %1081, i64 1
  %1086 = insertelement <4 x i16> %1085, i16 %1082, i64 2
  %1087 = insertelement <4 x i16> %1086, i16 %1083, i64 3
  %1088 = and <4 x i16> %1063, <i16 1, i16 1, i16 1, i16 1>
  %1089 = and <4 x i16> %1071, <i16 1, i16 1, i16 1, i16 1>
  %1090 = and <4 x i16> %1079, <i16 1, i16 1, i16 1, i16 1>
  %1091 = and <4 x i16> %1087, <i16 1, i16 1, i16 1, i16 1>
  %1092 = zext <4 x i16> %1088 to <4 x i32>
  %1093 = zext <4 x i16> %1089 to <4 x i32>
  %1094 = zext <4 x i16> %1090 to <4 x i32>
  %1095 = zext <4 x i16> %1091 to <4 x i32>
  %1096 = add <4 x i32> %1005, %1092
  %1097 = add <4 x i32> %1006, %1093
  %1098 = add <4 x i32> %1007, %1094
  %1099 = add <4 x i32> %1008, %1095
  %1100 = add nuw i64 %1004, 16
  %1101 = icmp eq i64 %1100, %565
  br i1 %1101, label %1102, label %1003, !llvm.loop !432

1102:                                             ; preds = %1003
  %1103 = add <4 x i32> %1097, %1096
  %1104 = add <4 x i32> %1098, %1103
  %1105 = add <4 x i32> %1099, %1104
  %1106 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %1105)
  br i1 %568, label %1123, label %1107

1107:                                             ; preds = %982, %1102
  %1108 = phi i32 [ 0, %982 ], [ %1106, %1102 ]
  %1109 = phi i32 [ 0, %982 ], [ %566, %1102 ]
  %1110 = phi ptr [ %984, %982 ], [ %986, %1102 ]
  br label %1111

1111:                                             ; preds = %1107, %1111
  %1112 = phi i32 [ %1119, %1111 ], [ %1108, %1107 ]
  %1113 = phi i32 [ %1120, %1111 ], [ %1109, %1107 ]
  %1114 = phi ptr [ %1121, %1111 ], [ %1110, %1107 ]
  %1115 = getelementptr inbounds %struct.BPoint, ptr %1114, i64 0, i32 3
  %1116 = load i16, ptr %1115, align 4, !tbaa !34
  %1117 = and i16 %1116, 1
  %1118 = zext i16 %1117 to i32
  %1119 = add nuw nsw i32 %1112, %1118
  %1120 = add nuw nsw i32 %1113, 1
  %1121 = getelementptr inbounds %struct.BPoint, ptr %1114, i64 1
  %1122 = icmp eq i32 %1120, %499
  br i1 %1122, label %1123, label %1111, !llvm.loop !433

1123:                                             ; preds = %1111, %1102
  %1124 = phi i32 [ %1106, %1102 ], [ %1119, %1111 ]
  %1125 = phi ptr [ %986, %1102 ], [ %1121, %1111 ]
  %1126 = icmp eq i32 %1124, %499
  %1127 = icmp eq i32 %1124, 0
  %1128 = or i1 %1126, %1127
  br i1 %1128, label %1129, label %1495

1129:                                             ; preds = %1123
  %1130 = add nuw nsw i32 %983, 1
  %1131 = icmp eq i32 %1130, %495
  br i1 %1131, label %1132, label %982, !llvm.loop !350

1132:                                             ; preds = %1129
  %1133 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 14
  br label %1134

1134:                                             ; preds = %1132, %1381
  %1135 = phi i32 [ %499, %1132 ], [ %1387, %1381 ]
  %1136 = phi i32 [ %495, %1132 ], [ %1390, %1381 ]
  %1137 = phi i32 [ 0, %1132 ], [ %1385, %1381 ]
  %1138 = phi i32 [ -1, %1132 ], [ %1384, %1381 ]
  %1139 = phi i32 [ -1, %1132 ], [ %1383, %1381 ]
  %1140 = phi i32 [ -1, %1132 ], [ %1382, %1381 ]
  %1141 = phi i32 [ 0, %1132 ], [ %1386, %1381 ]
  %1142 = phi ptr [ %503, %1132 ], [ %1389, %1381 ]
  %1143 = getelementptr inbounds %struct.BPoint, ptr %1142, i64 0, i32 3
  %1144 = load i16, ptr %1143, align 4, !tbaa !34
  %1145 = and i16 %1144, 1
  %1146 = icmp eq i16 %1145, 0
  br i1 %1146, label %1147, label %1152

1147:                                             ; preds = %1134
  %1148 = icmp eq i32 %1140, -1
  %1149 = select i1 %1148, i32 %1141, i32 %1140
  %1150 = add nsw i32 %1136, -1
  %1151 = icmp slt i32 %1141, %1150
  br i1 %1151, label %1381, label %1161

1152:                                             ; preds = %1134
  %1153 = add nsw i32 %1136, -1
  %1154 = icmp slt i32 %1141, %1153
  br i1 %1154, label %1155, label %1161

1155:                                             ; preds = %1152
  %1156 = sext i32 %1135 to i64
  %1157 = getelementptr inbounds %struct.BPoint, ptr %1142, i64 %1156, i32 3
  %1158 = load i16, ptr %1157, align 4, !tbaa !34
  %1159 = and i16 %1158, 1
  %1160 = icmp eq i16 %1159, 0
  br i1 %1160, label %1381, label %1161

1161:                                             ; preds = %1152, %1155, %1147
  %1162 = phi i32 [ %1140, %1155 ], [ %1140, %1152 ], [ %1149, %1147 ]
  %1163 = phi i32 [ %1139, %1155 ], [ %1139, %1152 ], [ %1141, %1147 ]
  %1164 = icmp sgt i32 %1162, -1
  br i1 %1164, label %1165, label %1381

1165:                                             ; preds = %1161
  %1166 = icmp ult i32 %1162, 2
  %1167 = add nsw i32 %1136, -1
  br i1 %1166, label %1168, label %1239

1168:                                             ; preds = %1165
  %1169 = icmp eq i32 %1141, %1167
  br i1 %1169, label %1170, label %1180

1170:                                             ; preds = %1168
  %1171 = icmp ne i32 %1162, 1
  %1172 = icmp eq i32 %1163, %1141
  %1173 = select i1 %1171, i1 true, i1 %1172
  br i1 %1173, label %1177, label %1174

1174:                                             ; preds = %1170
  %1175 = load i16, ptr %1133, align 2, !tbaa !44
  %1176 = and i16 %1175, -2
  store i16 %1176, ptr %1133, align 2, !tbaa !44
  br label %1177

1177:                                             ; preds = %1174, %1170
  %1178 = add nuw nsw i32 %1141, 1
  %1179 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1178) #20
  br label %1330

1180:                                             ; preds = %1168
  %1181 = icmp eq i32 %1162, 0
  br i1 %1181, label %1182, label %1239

1182:                                             ; preds = %1180
  %1183 = add nsw i32 %1163, 1
  %1184 = add nsw i32 %1163, 2
  %1185 = load ptr, ptr %502, align 8, !tbaa !32
  %1186 = add i32 %1136, -2
  %1187 = mul i32 %1135, %1186
  %1188 = sext i32 %1187 to i64
  %1189 = load i16, ptr %1133, align 2, !tbaa !44
  %1190 = and i16 %1189, 1
  %1191 = icmp eq i16 %1190, 0
  br i1 %1191, label %1237, label %1192

1192:                                             ; preds = %1182
  %1193 = mul i32 %1135, %1167
  %1194 = sext i32 %1193 to i64
  %1195 = getelementptr inbounds %struct.BPoint, ptr %1185, i64 %1194, i32 3
  %1196 = load i16, ptr %1195, align 4, !tbaa !34
  %1197 = and i16 %1196, 1
  %1198 = icmp eq i16 %1197, 0
  br i1 %1198, label %1381, label %1199

1199:                                             ; preds = %1192
  %1200 = getelementptr inbounds %struct.BPoint, ptr %1185, i64 %1188, i32 3
  %1201 = load i16, ptr %1200, align 4, !tbaa !34
  %1202 = and i16 %1201, 1
  %1203 = icmp eq i16 %1202, 0
  br i1 %1203, label %1381, label %1204

1204:                                             ; preds = %1199
  %1205 = add nsw i32 %1163, 3
  %1206 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1205) #20
  %1207 = getelementptr inbounds %struct.Nurb, ptr %1206, i64 0, i32 17
  %1208 = load ptr, ptr %1207, align 8, !tbaa !32
  %1209 = load i32, ptr %498, align 8, !tbaa !23
  %1210 = sext i32 %1209 to i64
  %1211 = getelementptr inbounds %struct.BPoint, ptr %1208, i64 %1210
  %1212 = load ptr, ptr %502, align 8, !tbaa !32
  %1213 = mul nsw i32 %1209, %1184
  %1214 = sext i32 %1213 to i64
  %1215 = mul nsw i64 %1214, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1211, ptr align 4 %1212, i64 %1215, i1 false)
  %1216 = load ptr, ptr %9, align 8, !tbaa !47
  %1217 = icmp ne ptr %1216, null
  %1218 = icmp sgt i32 %1213, 0
  %1219 = and i1 %1218, %1217
  br i1 %1219, label %1220, label %1234

1220:                                             ; preds = %1204, %1229
  %1221 = phi ptr [ %1231, %1229 ], [ %1212, %1204 ]
  %1222 = phi i32 [ %1232, %1229 ], [ 0, %1204 ]
  %1223 = phi ptr [ %1230, %1229 ], [ %1211, %1204 ]
  %1224 = load ptr, ptr %9, align 8, !tbaa !47
  %1225 = call ptr @BLI_ghash_popkey(ptr noundef %1224, ptr noundef %1221, ptr noundef null) #20
  %1226 = icmp eq ptr %1225, null
  br i1 %1226, label %1229, label %1227

1227:                                             ; preds = %1220
  %1228 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1228, ptr noundef %1223, ptr noundef nonnull %1225) #20
  br label %1229

1229:                                             ; preds = %1227, %1220
  %1230 = getelementptr inbounds i8, ptr %1223, i64 36
  %1231 = getelementptr inbounds i8, ptr %1221, i64 36
  %1232 = add nuw nsw i32 %1222, 1
  %1233 = icmp eq i32 %1232, %1213
  br i1 %1233, label %1234, label %1220, !llvm.loop !157

1234:                                             ; preds = %1229, %1204
  %1235 = load i32, ptr %494, align 4, !tbaa !31
  %1236 = add nsw i32 %1235, -1
  br label %1330

1237:                                             ; preds = %1182
  %1238 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1184) #20
  br label %1330

1239:                                             ; preds = %1165, %1180
  %1240 = icmp eq i32 %1163, %1167
  %1241 = add nsw i32 %1162, -1
  br i1 %1240, label %1242, label %1325

1242:                                             ; preds = %1239
  %1243 = sub nsw i32 %1167, %1241
  %1244 = add nsw i32 %1243, 1
  %1245 = load ptr, ptr %502, align 8, !tbaa !32
  %1246 = sext i32 %1135 to i64
  %1247 = load i16, ptr %1133, align 2, !tbaa !44
  %1248 = and i16 %1247, 1
  %1249 = icmp eq i16 %1248, 0
  br i1 %1249, label %1290, label %1250

1250:                                             ; preds = %1242
  %1251 = getelementptr inbounds %struct.BPoint, ptr %1245, i64 0, i32 3
  %1252 = load i16, ptr %1251, align 4, !tbaa !34
  %1253 = and i16 %1252, 1
  %1254 = icmp eq i16 %1253, 0
  br i1 %1254, label %1290, label %1255

1255:                                             ; preds = %1250
  %1256 = getelementptr inbounds %struct.BPoint, ptr %1245, i64 %1246, i32 3
  %1257 = load i16, ptr %1256, align 4, !tbaa !34
  %1258 = and i16 %1257, 1
  %1259 = icmp eq i16 %1258, 0
  br i1 %1259, label %1290, label %1260

1260:                                             ; preds = %1255
  %1261 = add nsw i32 %1243, 2
  %1262 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1261) #20
  %1263 = getelementptr inbounds %struct.Nurb, ptr %1262, i64 0, i32 17
  %1264 = load ptr, ptr %1263, align 8, !tbaa !32
  %1265 = load i32, ptr %498, align 8, !tbaa !23
  %1266 = mul nsw i32 %1265, %1244
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds %struct.BPoint, ptr %1264, i64 %1267
  %1269 = load ptr, ptr %502, align 8, !tbaa !32
  %1270 = sext i32 %1265 to i64
  %1271 = mul nsw i64 %1270, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1268, ptr align 4 %1269, i64 %1271, i1 false)
  %1272 = load ptr, ptr %9, align 8, !tbaa !47
  %1273 = icmp ne ptr %1272, null
  %1274 = icmp sgt i32 %1265, 0
  %1275 = and i1 %1274, %1273
  br i1 %1275, label %1276, label %1337

1276:                                             ; preds = %1260, %1285
  %1277 = phi ptr [ %1287, %1285 ], [ %1269, %1260 ]
  %1278 = phi i32 [ %1288, %1285 ], [ 0, %1260 ]
  %1279 = phi ptr [ %1286, %1285 ], [ %1268, %1260 ]
  %1280 = load ptr, ptr %9, align 8, !tbaa !47
  %1281 = call ptr @BLI_ghash_popkey(ptr noundef %1280, ptr noundef %1277, ptr noundef null) #20
  %1282 = icmp eq ptr %1281, null
  br i1 %1282, label %1285, label %1283

1283:                                             ; preds = %1276
  %1284 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1284, ptr noundef %1279, ptr noundef nonnull %1281) #20
  br label %1285

1285:                                             ; preds = %1283, %1276
  %1286 = getelementptr inbounds i8, ptr %1279, i64 36
  %1287 = getelementptr inbounds i8, ptr %1277, i64 36
  %1288 = add nuw nsw i32 %1278, 1
  %1289 = icmp eq i32 %1288, %1265
  br i1 %1289, label %1330, label %1276, !llvm.loop !157

1290:                                             ; preds = %1255, %1250, %1242
  %1291 = icmp eq i32 %1137, 0
  br i1 %1291, label %1323, label %1292

1292:                                             ; preds = %1290
  %1293 = add nsw i32 %1244, %1137
  %1294 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1293) #20
  %1295 = getelementptr inbounds %struct.Nurb, ptr %1294, i64 0, i32 17
  %1296 = load ptr, ptr %1295, align 8, !tbaa !32
  %1297 = load i32, ptr %498, align 8, !tbaa !23
  %1298 = mul nsw i32 %1297, %1244
  %1299 = sext i32 %1298 to i64
  %1300 = getelementptr inbounds %struct.BPoint, ptr %1296, i64 %1299
  %1301 = load ptr, ptr %502, align 8, !tbaa !32
  %1302 = mul nsw i32 %1297, %1137
  %1303 = sext i32 %1302 to i64
  %1304 = mul nsw i64 %1303, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1300, ptr align 4 %1301, i64 %1304, i1 false)
  %1305 = load ptr, ptr %9, align 8, !tbaa !47
  %1306 = icmp ne ptr %1305, null
  %1307 = icmp sgt i32 %1302, 0
  %1308 = and i1 %1307, %1306
  br i1 %1308, label %1309, label %1337

1309:                                             ; preds = %1292, %1318
  %1310 = phi ptr [ %1320, %1318 ], [ %1301, %1292 ]
  %1311 = phi i32 [ %1321, %1318 ], [ 0, %1292 ]
  %1312 = phi ptr [ %1319, %1318 ], [ %1300, %1292 ]
  %1313 = load ptr, ptr %9, align 8, !tbaa !47
  %1314 = call ptr @BLI_ghash_popkey(ptr noundef %1313, ptr noundef %1310, ptr noundef null) #20
  %1315 = icmp eq ptr %1314, null
  br i1 %1315, label %1318, label %1316

1316:                                             ; preds = %1309
  %1317 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1317, ptr noundef %1312, ptr noundef nonnull %1314) #20
  br label %1318

1318:                                             ; preds = %1316, %1309
  %1319 = getelementptr inbounds i8, ptr %1312, i64 36
  %1320 = getelementptr inbounds i8, ptr %1310, i64 36
  %1321 = add nuw nsw i32 %1311, 1
  %1322 = icmp eq i32 %1321, %1302
  br i1 %1322, label %1330, label %1309, !llvm.loop !157

1323:                                             ; preds = %1290
  %1324 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1244) #20
  br label %1330

1325:                                             ; preds = %1239
  %1326 = add nsw i32 %1163, 1
  %1327 = sub nsw i32 %1326, %1241
  %1328 = add nsw i32 %1327, 1
  %1329 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1135, i32 noundef %1328) #20
  br label %1330

1330:                                             ; preds = %1285, %1318, %1237, %1234, %1323, %1325, %1177
  %1331 = phi ptr [ %1179, %1177 ], [ %1206, %1234 ], [ %1238, %1237 ], [ %1324, %1323 ], [ %1329, %1325 ], [ %1294, %1318 ], [ %1262, %1285 ]
  %1332 = phi i32 [ 0, %1177 ], [ %1236, %1234 ], [ 0, %1237 ], [ %1241, %1323 ], [ %1241, %1325 ], [ %1241, %1318 ], [ %1241, %1285 ]
  %1333 = phi i32 [ %1141, %1177 ], [ %1183, %1234 ], [ %1183, %1237 ], [ %1167, %1323 ], [ %1326, %1325 ], [ %1167, %1318 ], [ %1167, %1285 ]
  %1334 = phi i32 [ %1178, %1177 ], [ 1, %1234 ], [ %1184, %1237 ], [ %1244, %1323 ], [ %1328, %1325 ], [ %1244, %1318 ], [ %1244, %1285 ]
  %1335 = phi i32 [ %1137, %1177 ], [ %1137, %1234 ], [ %1137, %1237 ], [ 0, %1323 ], [ %1137, %1325 ], [ 0, %1318 ], [ %1137, %1285 ]
  %1336 = icmp eq ptr %1331, null
  br i1 %1336, label %1381, label %1337

1337:                                             ; preds = %1292, %1260, %1330
  %1338 = phi i32 [ %1335, %1330 ], [ 0, %1292 ], [ %1137, %1260 ]
  %1339 = phi i32 [ %1334, %1330 ], [ %1244, %1292 ], [ %1244, %1260 ]
  %1340 = phi i32 [ %1333, %1330 ], [ %1167, %1292 ], [ %1167, %1260 ]
  %1341 = phi i32 [ %1332, %1330 ], [ %1241, %1292 ], [ %1241, %1260 ]
  %1342 = phi ptr [ %1331, %1330 ], [ %1294, %1292 ], [ %1262, %1260 ]
  %1343 = getelementptr inbounds %struct.Nurb, ptr %1342, i64 0, i32 17
  %1344 = load ptr, ptr %1343, align 8, !tbaa !32
  %1345 = load ptr, ptr %502, align 8, !tbaa !32
  %1346 = load i32, ptr %498, align 8, !tbaa !23
  %1347 = mul nsw i32 %1346, %1341
  %1348 = sext i32 %1347 to i64
  %1349 = getelementptr inbounds %struct.BPoint, ptr %1345, i64 %1348
  %1350 = mul nsw i32 %1346, %1339
  %1351 = sext i32 %1350 to i64
  %1352 = mul nsw i64 %1351, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1344, ptr align 4 %1349, i64 %1352, i1 false)
  %1353 = load ptr, ptr %9, align 8, !tbaa !47
  %1354 = icmp ne ptr %1353, null
  %1355 = icmp sgt i32 %1350, 0
  %1356 = and i1 %1355, %1354
  br i1 %1356, label %1357, label %1371

1357:                                             ; preds = %1337, %1366
  %1358 = phi ptr [ %1368, %1366 ], [ %1349, %1337 ]
  %1359 = phi i32 [ %1369, %1366 ], [ 0, %1337 ]
  %1360 = phi ptr [ %1367, %1366 ], [ %1344, %1337 ]
  %1361 = load ptr, ptr %9, align 8, !tbaa !47
  %1362 = call ptr @BLI_ghash_popkey(ptr noundef %1361, ptr noundef %1358, ptr noundef null) #20
  %1363 = icmp eq ptr %1362, null
  br i1 %1363, label %1366, label %1364

1364:                                             ; preds = %1357
  %1365 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1365, ptr noundef %1360, ptr noundef nonnull %1362) #20
  br label %1366

1366:                                             ; preds = %1364, %1357
  %1367 = getelementptr inbounds i8, ptr %1360, i64 36
  %1368 = getelementptr inbounds i8, ptr %1358, i64 36
  %1369 = add nuw nsw i32 %1359, 1
  %1370 = icmp eq i32 %1369, %1350
  br i1 %1370, label %1371, label %1357, !llvm.loop !157

1371:                                             ; preds = %1366, %1337
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef nonnull %1342) #20
  %1372 = icmp eq i32 %1341, 0
  br i1 %1372, label %1373, label %1377

1373:                                             ; preds = %1371
  %1374 = load i32, ptr %494, align 4, !tbaa !31
  %1375 = add nsw i32 %1374, -1
  %1376 = icmp eq i32 %1340, %1375
  br i1 %1376, label %1381, label %1377

1377:                                             ; preds = %1373, %1371
  %1378 = getelementptr inbounds %struct.Nurb, ptr %1342, i64 0, i32 14
  %1379 = load i16, ptr %1378, align 2, !tbaa !44
  %1380 = and i16 %1379, -2
  store i16 %1380, ptr %1378, align 2, !tbaa !44
  br label %1381

1381:                                             ; preds = %1199, %1192, %1330, %1377, %1373, %1161, %1155, %1147
  %1382 = phi i32 [ %1162, %1161 ], [ %1140, %1155 ], [ %1149, %1147 ], [ -1, %1373 ], [ -1, %1377 ], [ -1, %1330 ], [ -1, %1192 ], [ -1, %1199 ]
  %1383 = phi i32 [ %1163, %1161 ], [ %1139, %1155 ], [ %1141, %1147 ], [ -1, %1373 ], [ -1, %1377 ], [ -1, %1330 ], [ -1, %1192 ], [ -1, %1199 ]
  %1384 = phi i32 [ %1138, %1161 ], [ %1138, %1155 ], [ %1138, %1147 ], [ %1339, %1373 ], [ %1339, %1377 ], [ %1334, %1330 ], [ %1184, %1192 ], [ %1184, %1199 ]
  %1385 = phi i32 [ %1137, %1161 ], [ %1137, %1155 ], [ %1137, %1147 ], [ %1338, %1373 ], [ %1338, %1377 ], [ %1335, %1330 ], [ %1184, %1192 ], [ %1184, %1199 ]
  %1386 = add nuw nsw i32 %1141, 1
  %1387 = load i32, ptr %498, align 8, !tbaa !23
  %1388 = sext i32 %1387 to i64
  %1389 = getelementptr inbounds %struct.BPoint, ptr %1142, i64 %1388
  %1390 = load i32, ptr %494, align 4, !tbaa !31
  %1391 = icmp slt i32 %1386, %1390
  br i1 %1391, label %1134, label %1392, !llvm.loop !434

1392:                                             ; preds = %1381
  %1393 = icmp ne i32 %1384, -1
  %1394 = select i1 %10, i1 %1393, i1 false
  %1395 = icmp sgt i32 %1390, 2
  %1396 = and i1 %1394, %1395
  br i1 %1396, label %1397, label %1524

1397:                                             ; preds = %1392
  %1398 = getelementptr inbounds %struct.Nurb, ptr %35, i64 0, i32 14
  %1399 = load i16, ptr %1398, align 2, !tbaa !44
  %1400 = and i16 %1399, 1
  %1401 = icmp eq i16 %1400, 0
  br i1 %1401, label %1402, label %1524

1402:                                             ; preds = %1397
  %1403 = load ptr, ptr %502, align 8, !tbaa !32
  %1404 = getelementptr inbounds %struct.BPoint, ptr %1403, i64 0, i32 3
  %1405 = load i16, ptr %1404, align 4, !tbaa !34
  %1406 = and i16 %1405, 1
  %1407 = icmp eq i16 %1406, 0
  br i1 %1407, label %1444, label %1408

1408:                                             ; preds = %1402
  %1409 = sext i32 %1387 to i64
  %1410 = getelementptr inbounds %struct.BPoint, ptr %1403, i64 %1409, i32 3
  %1411 = load i16, ptr %1410, align 4, !tbaa !34
  %1412 = and i16 %1411, 1
  %1413 = icmp eq i16 %1412, 0
  br i1 %1413, label %1444, label %1414

1414:                                             ; preds = %1408
  %1415 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1387, i32 noundef 1) #20
  %1416 = getelementptr inbounds %struct.Nurb, ptr %1415, i64 0, i32 17
  %1417 = load ptr, ptr %1416, align 8, !tbaa !32
  %1418 = load ptr, ptr %502, align 8, !tbaa !32
  %1419 = load i32, ptr %498, align 8, !tbaa !23
  %1420 = sext i32 %1419 to i64
  %1421 = mul nsw i64 %1420, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1417, ptr align 4 %1418, i64 %1421, i1 false)
  %1422 = load ptr, ptr %9, align 8, !tbaa !47
  %1423 = icmp ne ptr %1422, null
  %1424 = icmp sgt i32 %1419, 0
  %1425 = and i1 %1424, %1423
  br i1 %1425, label %1426, label %1440

1426:                                             ; preds = %1414, %1435
  %1427 = phi ptr [ %1437, %1435 ], [ %1418, %1414 ]
  %1428 = phi i32 [ %1438, %1435 ], [ 0, %1414 ]
  %1429 = phi ptr [ %1436, %1435 ], [ %1417, %1414 ]
  %1430 = load ptr, ptr %9, align 8, !tbaa !47
  %1431 = call ptr @BLI_ghash_popkey(ptr noundef %1430, ptr noundef %1427, ptr noundef null) #20
  %1432 = icmp eq ptr %1431, null
  br i1 %1432, label %1435, label %1433

1433:                                             ; preds = %1426
  %1434 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1434, ptr noundef %1429, ptr noundef nonnull %1431) #20
  br label %1435

1435:                                             ; preds = %1433, %1426
  %1436 = getelementptr inbounds i8, ptr %1429, i64 36
  %1437 = getelementptr inbounds i8, ptr %1427, i64 36
  %1438 = add nuw nsw i32 %1428, 1
  %1439 = icmp eq i32 %1438, %1419
  br i1 %1439, label %1440, label %1426, !llvm.loop !157

1440:                                             ; preds = %1435, %1414
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef %1415) #20
  %1441 = load ptr, ptr %502, align 8, !tbaa !32
  %1442 = load i32, ptr %498, align 8, !tbaa !23
  %1443 = load i32, ptr %494, align 4, !tbaa !31
  br label %1444

1444:                                             ; preds = %1440, %1408, %1402
  %1445 = phi i32 [ %1443, %1440 ], [ %1390, %1408 ], [ %1390, %1402 ]
  %1446 = phi i32 [ %1442, %1440 ], [ %1387, %1408 ], [ %1387, %1402 ]
  %1447 = phi ptr [ %1441, %1440 ], [ %1403, %1408 ], [ %1403, %1402 ]
  %1448 = add i32 %1445, -1
  %1449 = mul i32 %1448, %1446
  %1450 = sext i32 %1449 to i64
  %1451 = getelementptr inbounds %struct.BPoint, ptr %1447, i64 %1450, i32 3
  %1452 = load i16, ptr %1451, align 4, !tbaa !34
  %1453 = and i16 %1452, 1
  %1454 = icmp eq i16 %1453, 0
  br i1 %1454, label %1524, label %1455

1455:                                             ; preds = %1444
  %1456 = add i32 %1445, -2
  %1457 = mul i32 %1456, %1446
  %1458 = sext i32 %1457 to i64
  %1459 = getelementptr inbounds %struct.BPoint, ptr %1447, i64 %1458, i32 3
  %1460 = load i16, ptr %1459, align 4, !tbaa !34
  %1461 = and i16 %1460, 1
  %1462 = icmp eq i16 %1461, 0
  br i1 %1462, label %1524, label %1463

1463:                                             ; preds = %1455
  %1464 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %1446, i32 noundef 1) #20
  %1465 = getelementptr inbounds %struct.Nurb, ptr %1464, i64 0, i32 17
  %1466 = load ptr, ptr %1465, align 8, !tbaa !32
  %1467 = load ptr, ptr %502, align 8, !tbaa !32
  %1468 = load i32, ptr %498, align 8, !tbaa !23
  %1469 = load i32, ptr %494, align 4, !tbaa !31
  %1470 = add i32 %1469, -1
  %1471 = mul i32 %1470, %1468
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds %struct.BPoint, ptr %1467, i64 %1472
  %1474 = sext i32 %1468 to i64
  %1475 = mul nsw i64 %1474, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1466, ptr align 4 %1473, i64 %1475, i1 false)
  %1476 = load ptr, ptr %9, align 8, !tbaa !47
  %1477 = icmp ne ptr %1476, null
  %1478 = icmp sgt i32 %1468, 0
  %1479 = and i1 %1478, %1477
  br i1 %1479, label %1480, label %1494

1480:                                             ; preds = %1463, %1489
  %1481 = phi ptr [ %1491, %1489 ], [ %1473, %1463 ]
  %1482 = phi i32 [ %1492, %1489 ], [ 0, %1463 ]
  %1483 = phi ptr [ %1490, %1489 ], [ %1466, %1463 ]
  %1484 = load ptr, ptr %9, align 8, !tbaa !47
  %1485 = call ptr @BLI_ghash_popkey(ptr noundef %1484, ptr noundef %1481, ptr noundef null) #20
  %1486 = icmp eq ptr %1485, null
  br i1 %1486, label %1489, label %1487

1487:                                             ; preds = %1480
  %1488 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1488, ptr noundef %1483, ptr noundef nonnull %1485) #20
  br label %1489

1489:                                             ; preds = %1487, %1480
  %1490 = getelementptr inbounds i8, ptr %1483, i64 36
  %1491 = getelementptr inbounds i8, ptr %1481, i64 36
  %1492 = add nuw nsw i32 %1482, 1
  %1493 = icmp eq i32 %1492, %1468
  br i1 %1493, label %1494, label %1480, !llvm.loop !157

1494:                                             ; preds = %1489, %1463
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef %1464) #20
  br label %1524

1495:                                             ; preds = %1123
  %1496 = call ptr @BKE_nurb_copy(ptr noundef nonnull %35, i32 noundef %499, i32 noundef %495) #20
  %1497 = getelementptr inbounds %struct.Nurb, ptr %1496, i64 0, i32 17
  %1498 = load ptr, ptr %1497, align 8, !tbaa !32
  %1499 = load ptr, ptr %502, align 8, !tbaa !32
  %1500 = load i32, ptr %498, align 8, !tbaa !23
  %1501 = load i32, ptr %494, align 4, !tbaa !31
  %1502 = mul nsw i32 %1501, %1500
  %1503 = sext i32 %1502 to i64
  %1504 = mul nsw i64 %1503, 36
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %1498, ptr align 4 %1499, i64 %1504, i1 false)
  %1505 = load ptr, ptr %9, align 8, !tbaa !47
  %1506 = icmp ne ptr %1505, null
  %1507 = icmp sgt i32 %1502, 0
  %1508 = and i1 %1507, %1506
  br i1 %1508, label %1509, label %1523

1509:                                             ; preds = %1495, %1518
  %1510 = phi ptr [ %1520, %1518 ], [ %1499, %1495 ]
  %1511 = phi i32 [ %1521, %1518 ], [ 0, %1495 ]
  %1512 = phi ptr [ %1519, %1518 ], [ %1498, %1495 ]
  %1513 = load ptr, ptr %9, align 8, !tbaa !47
  %1514 = call ptr @BLI_ghash_popkey(ptr noundef %1513, ptr noundef %1510, ptr noundef null) #20
  %1515 = icmp eq ptr %1514, null
  br i1 %1515, label %1518, label %1516

1516:                                             ; preds = %1509
  %1517 = load ptr, ptr %9, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %1517, ptr noundef %1512, ptr noundef nonnull %1514) #20
  br label %1518

1518:                                             ; preds = %1516, %1509
  %1519 = getelementptr inbounds i8, ptr %1512, i64 36
  %1520 = getelementptr inbounds i8, ptr %1510, i64 36
  %1521 = add nuw nsw i32 %1511, 1
  %1522 = icmp eq i32 %1521, %1502
  br i1 %1522, label %1523, label %1509, !llvm.loop !157

1523:                                             ; preds = %1518, %1495
  call void @BLI_addtail(ptr noundef nonnull %3, ptr noundef %1496) #20
  br label %1524

1524:                                             ; preds = %497, %572, %39, %935, %944, %981, %887, %882, %1392, %1397, %1494, %1455, %1444, %1523, %449, %456, %461, %476, %492, %373, %368, %493
  %1525 = load ptr, ptr %35, align 8, !tbaa !36
  %1526 = icmp eq ptr %1525, null
  br i1 %1526, label %12, label %34, !llvm.loop !435

1527:                                             ; preds = %15, %1631
  %1528 = phi ptr [ %1632, %1631 ], [ %13, %15 ]
  %1529 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 2
  %1530 = load i16, ptr %1529, align 8, !tbaa !21
  %1531 = icmp eq i16 %1530, 1
  %1532 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 6
  %1533 = load i32, ptr %1532, align 8, !tbaa !23
  br i1 %1531, label %1534, label %1581

1534:                                             ; preds = %1527
  %1535 = icmp sgt i32 %1533, 0
  br i1 %1535, label %1536, label %1580

1536:                                             ; preds = %1534
  %1537 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 18
  %1538 = load ptr, ptr %1537, align 8, !tbaa !24
  %1539 = and i32 %1533, 1
  %1540 = icmp eq i32 %1533, 1
  br i1 %1540, label %1567, label %1541

1541:                                             ; preds = %1536
  %1542 = and i32 %1533, -2
  br label %1543

1543:                                             ; preds = %1543, %1541
  %1544 = phi ptr [ %1538, %1541 ], [ %1564, %1543 ]
  %1545 = phi i32 [ 0, %1541 ], [ %1565, %1543 ]
  %1546 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 0, i32 7
  %1547 = load i8, ptr %1546, align 1, !tbaa !27
  %1548 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 0, i32 8
  %1549 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 0, i32 9
  %1550 = and i8 %1547, -2
  store i8 %1550, ptr %1546, align 1, !tbaa !27
  %1551 = load i8, ptr %1548, align 4, !tbaa !29
  %1552 = and i8 %1551, -2
  store i8 %1552, ptr %1548, align 4, !tbaa !29
  %1553 = load i8, ptr %1549, align 1, !tbaa !30
  %1554 = and i8 %1553, -2
  store i8 %1554, ptr %1549, align 1, !tbaa !30
  %1555 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 1, i32 7
  %1556 = load i8, ptr %1555, align 1, !tbaa !27
  %1557 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 1, i32 8
  %1558 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 1, i32 9
  %1559 = and i8 %1556, -2
  store i8 %1559, ptr %1555, align 1, !tbaa !27
  %1560 = load i8, ptr %1557, align 4, !tbaa !29
  %1561 = and i8 %1560, -2
  store i8 %1561, ptr %1557, align 4, !tbaa !29
  %1562 = load i8, ptr %1558, align 1, !tbaa !30
  %1563 = and i8 %1562, -2
  store i8 %1563, ptr %1558, align 1, !tbaa !30
  %1564 = getelementptr inbounds %struct.BezTriple, ptr %1544, i64 2
  %1565 = add i32 %1545, 2
  %1566 = icmp eq i32 %1565, %1542
  br i1 %1566, label %1567, label %1543, !llvm.loop !436

1567:                                             ; preds = %1543, %1536
  %1568 = phi ptr [ %1538, %1536 ], [ %1564, %1543 ]
  %1569 = icmp eq i32 %1539, 0
  br i1 %1569, label %1580, label %1570

1570:                                             ; preds = %1567
  %1571 = getelementptr inbounds %struct.BezTriple, ptr %1568, i64 0, i32 7
  %1572 = load i8, ptr %1571, align 1, !tbaa !27
  %1573 = getelementptr inbounds %struct.BezTriple, ptr %1568, i64 0, i32 8
  %1574 = getelementptr inbounds %struct.BezTriple, ptr %1568, i64 0, i32 9
  %1575 = and i8 %1572, -2
  store i8 %1575, ptr %1571, align 1, !tbaa !27
  %1576 = load i8, ptr %1573, align 4, !tbaa !29
  %1577 = and i8 %1576, -2
  store i8 %1577, ptr %1573, align 4, !tbaa !29
  %1578 = load i8, ptr %1574, align 1, !tbaa !30
  %1579 = and i8 %1578, -2
  store i8 %1579, ptr %1574, align 1, !tbaa !30
  br label %1580

1580:                                             ; preds = %1570, %1567, %1534
  call void @BKE_nurb_handles_calc(ptr noundef nonnull %1528) #20
  br label %1631

1581:                                             ; preds = %1527
  %1582 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 7
  %1583 = load i32, ptr %1582, align 4, !tbaa !31
  %1584 = mul nsw i32 %1583, %1533
  %1585 = icmp sgt i32 %1584, 0
  br i1 %1585, label %1586, label %1623

1586:                                             ; preds = %1581
  %1587 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 17
  %1588 = load ptr, ptr %1587, align 8, !tbaa !32
  %1589 = and i32 %1584, 3
  %1590 = icmp ult i32 %1584, 4
  br i1 %1590, label %1611, label %1591

1591:                                             ; preds = %1586
  %1592 = and i32 %1584, -4
  br label %1593

1593:                                             ; preds = %1593, %1591
  %1594 = phi ptr [ %1588, %1591 ], [ %1608, %1593 ]
  %1595 = phi i32 [ 0, %1591 ], [ %1609, %1593 ]
  %1596 = getelementptr inbounds %struct.BPoint, ptr %1594, i64 0, i32 3
  %1597 = load i16, ptr %1596, align 4, !tbaa !34
  %1598 = and i16 %1597, -2
  store i16 %1598, ptr %1596, align 4, !tbaa !34
  %1599 = getelementptr inbounds %struct.BPoint, ptr %1594, i64 1, i32 3
  %1600 = load i16, ptr %1599, align 4, !tbaa !34
  %1601 = and i16 %1600, -2
  store i16 %1601, ptr %1599, align 4, !tbaa !34
  %1602 = getelementptr inbounds %struct.BPoint, ptr %1594, i64 2, i32 3
  %1603 = load i16, ptr %1602, align 4, !tbaa !34
  %1604 = and i16 %1603, -2
  store i16 %1604, ptr %1602, align 4, !tbaa !34
  %1605 = getelementptr inbounds %struct.BPoint, ptr %1594, i64 3, i32 3
  %1606 = load i16, ptr %1605, align 4, !tbaa !34
  %1607 = and i16 %1606, -2
  store i16 %1607, ptr %1605, align 4, !tbaa !34
  %1608 = getelementptr inbounds %struct.BPoint, ptr %1594, i64 4
  %1609 = add i32 %1595, 4
  %1610 = icmp eq i32 %1609, %1592
  br i1 %1610, label %1611, label %1593, !llvm.loop !437

1611:                                             ; preds = %1593, %1586
  %1612 = phi ptr [ %1588, %1586 ], [ %1608, %1593 ]
  %1613 = icmp eq i32 %1589, 0
  br i1 %1613, label %1623, label %1614

1614:                                             ; preds = %1611, %1614
  %1615 = phi ptr [ %1620, %1614 ], [ %1612, %1611 ]
  %1616 = phi i32 [ %1621, %1614 ], [ 0, %1611 ]
  %1617 = getelementptr inbounds %struct.BPoint, ptr %1615, i64 0, i32 3
  %1618 = load i16, ptr %1617, align 4, !tbaa !34
  %1619 = and i16 %1618, -2
  store i16 %1619, ptr %1617, align 4, !tbaa !34
  %1620 = getelementptr inbounds %struct.BPoint, ptr %1615, i64 1
  %1621 = add i32 %1616, 1
  %1622 = icmp eq i32 %1621, %1589
  br i1 %1622, label %1623, label %1614, !llvm.loop !438

1623:                                             ; preds = %1611, %1614, %1581
  %1624 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1624, i8 0, i64 16, i1 false)
  %1625 = call zeroext i8 @BKE_nurb_order_clamp_u(ptr noundef nonnull %1528) #20
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %1528) #20
  %1626 = getelementptr inbounds %struct.Nurb, ptr %1528, i64 0, i32 7
  %1627 = load i32, ptr %1626, align 4, !tbaa !31
  %1628 = icmp sgt i32 %1627, 1
  br i1 %1628, label %1629, label %1631

1629:                                             ; preds = %1623
  %1630 = call zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef nonnull %1528) #20
  call void @BKE_nurb_knot_calc_v(ptr noundef nonnull %1528) #20
  br label %1631

1631:                                             ; preds = %1580, %1629, %1623
  %1632 = load ptr, ptr %1528, align 8, !tbaa !36
  %1633 = icmp eq ptr %1632, null
  br i1 %1633, label %1634, label %1527, !llvm.loop !422

1634:                                             ; preds = %1631, %31, %12
  %1635 = load ptr, ptr %5, align 8, !tbaa !36
  %1636 = icmp eq ptr %1635, null
  br i1 %1636, label %1684, label %1637

1637:                                             ; preds = %1634
  %1638 = getelementptr inbounds %struct.EditNurb, ptr %5, i64 0, i32 1
  %1639 = load ptr, ptr %1638, align 8, !tbaa !47
  %1640 = icmp eq ptr %1639, null
  br i1 %1640, label %1684, label %1643

1641:                                             ; preds = %1681
  %1642 = load ptr, ptr %1638, align 8, !tbaa !47
  br label %1643

1643:                                             ; preds = %1637, %1641
  %1644 = phi ptr [ %1642, %1641 ], [ %1639, %1637 ]
  %1645 = phi ptr [ %1682, %1641 ], [ %1635, %1637 ]
  %1646 = icmp eq ptr %1644, null
  br i1 %1646, label %1681, label %1647

1647:                                             ; preds = %1643
  %1648 = getelementptr inbounds %struct.Nurb, ptr %1645, i64 0, i32 18
  %1649 = load ptr, ptr %1648, align 8, !tbaa !24
  %1650 = icmp eq ptr %1649, null
  %1651 = getelementptr inbounds %struct.Nurb, ptr %1645, i64 0, i32 6
  %1652 = load i32, ptr %1651, align 8, !tbaa !23
  br i1 %1650, label %1664, label %1653

1653:                                             ; preds = %1647
  %1654 = icmp eq i32 %1652, 0
  br i1 %1654, label %1681, label %1655

1655:                                             ; preds = %1653, %1655
  %1656 = phi ptr [ %1662, %1655 ], [ %1649, %1653 ]
  %1657 = phi i32 [ %1658, %1655 ], [ %1652, %1653 ]
  %1658 = add nsw i32 %1657, -1
  %1659 = load ptr, ptr %1638, align 8, !tbaa !47
  %1660 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1661 = call zeroext i8 @BLI_ghash_remove(ptr noundef %1659, ptr noundef nonnull %1656, ptr noundef null, ptr noundef %1660) #20
  %1662 = getelementptr inbounds %struct.BezTriple, ptr %1656, i64 1
  %1663 = icmp eq i32 %1658, 0
  br i1 %1663, label %1681, label %1655, !llvm.loop !261

1664:                                             ; preds = %1647
  %1665 = getelementptr inbounds %struct.Nurb, ptr %1645, i64 0, i32 7
  %1666 = load i32, ptr %1665, align 4, !tbaa !31
  %1667 = mul nsw i32 %1666, %1652
  %1668 = icmp eq i32 %1667, 0
  br i1 %1668, label %1681, label %1669

1669:                                             ; preds = %1664
  %1670 = getelementptr inbounds %struct.Nurb, ptr %1645, i64 0, i32 17
  %1671 = load ptr, ptr %1670, align 8, !tbaa !32
  br label %1672

1672:                                             ; preds = %1672, %1669
  %1673 = phi ptr [ %1679, %1672 ], [ %1671, %1669 ]
  %1674 = phi i32 [ %1675, %1672 ], [ %1667, %1669 ]
  %1675 = add nsw i32 %1674, -1
  %1676 = load ptr, ptr %1638, align 8, !tbaa !47
  %1677 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %1678 = call zeroext i8 @BLI_ghash_remove(ptr noundef %1676, ptr noundef %1673, ptr noundef null, ptr noundef %1677) #20
  %1679 = getelementptr inbounds %struct.BPoint, ptr %1673, i64 1
  %1680 = icmp eq i32 %1675, 0
  br i1 %1680, label %1681, label %1672, !llvm.loop !262

1681:                                             ; preds = %1655, %1672, %1664, %1653, %1643
  %1682 = load ptr, ptr %1645, align 8, !tbaa !36
  %1683 = icmp eq ptr %1682, null
  br i1 %1683, label %1684, label %1641, !llvm.loop !439

1684:                                             ; preds = %1681, %2, %1634, %1637
  call void @BKE_nurbList_free(ptr noundef nonnull %5) #20
  call void @BLI_movelisttolist(ptr noundef nonnull %5, ptr noundef nonnull %3) #20
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %3) #20
  ret void
}

declare void @DAG_id_tag_update(ptr noundef, i16 noundef signext) local_unnamed_addr #6

declare ptr @BKE_nurb_copy(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #6

declare void @BKE_nurb_handle_calc_simple(ptr noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @BKE_nurb_order_clamp_v(ptr noundef) local_unnamed_addr #6

declare zeroext i8 @BLI_ghash_remove(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @BKE_nurb_direction_switch(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @keyData_switchDirectionNurb(ptr nocapture noundef readonly %0, ptr noundef readonly %1) unnamed_addr #5 {
  %3 = getelementptr %struct.Curve, ptr %0, i64 0, i32 4
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr %struct.EditNurb, ptr %4, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !47
  %7 = icmp eq ptr %6, null
  br i1 %7, label %295, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 18
  %10 = load ptr, ptr %9, align 8, !tbaa !24
  %11 = icmp eq ptr %10, null
  br i1 %11, label %64, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 6
  %14 = load i32, ptr %13, align 8, !tbaa !23
  %15 = and i32 %14, 1
  %16 = add nsw i32 %15, %14
  %17 = add i32 %16, 1
  %18 = icmp ult i32 %17, 3
  br i1 %18, label %188, label %19

19:                                               ; preds = %12
  %20 = sdiv i32 %16, 2
  %21 = add nsw i32 %14, -1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.BezTriple, ptr %10, i64 %22
  br label %24

24:                                               ; preds = %60, %19
  %25 = phi i32 [ %20, %19 ], [ %28, %60 ]
  %26 = phi ptr [ %23, %19 ], [ %62, %60 ]
  %27 = phi ptr [ %10, %19 ], [ %61, %60 ]
  %28 = add nsw i32 %25, -1
  %29 = load ptr, ptr %5, align 8, !tbaa !47
  %30 = tail call ptr @BLI_ghash_lookup(ptr noundef %29, ptr noundef nonnull %27) #20
  %31 = load ptr, ptr %5, align 8, !tbaa !47
  %32 = tail call ptr @BLI_ghash_lookup(ptr noundef %31, ptr noundef %26) #20
  %33 = icmp eq ptr %30, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds %struct.CVKeyIndex, ptr %30, i64 0, i32 5
  %36 = load i8, ptr %35, align 8, !tbaa !55
  %37 = icmp eq i8 %36, 0
  %38 = zext i1 %37 to i8
  store i8 %38, ptr %35, align 8, !tbaa !55
  br label %39

39:                                               ; preds = %34, %24
  %40 = icmp eq ptr %27, %26
  br i1 %40, label %60, label %41

41:                                               ; preds = %39
  %42 = load ptr, ptr %5, align 8, !tbaa !47
  %43 = tail call ptr @BLI_ghash_popkey(ptr noundef %42, ptr noundef nonnull %27, ptr noundef null) #20
  %44 = load ptr, ptr %5, align 8, !tbaa !47
  %45 = tail call ptr @BLI_ghash_popkey(ptr noundef %44, ptr noundef %26, ptr noundef null) #20
  %46 = icmp eq ptr %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %41
  %48 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %48, ptr noundef nonnull %27, ptr noundef nonnull %45) #20
  br label %49

49:                                               ; preds = %47, %41
  %50 = icmp eq ptr %43, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %49
  %52 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %52, ptr noundef %26, ptr noundef nonnull %43) #20
  br label %53

53:                                               ; preds = %51, %49
  %54 = icmp eq ptr %32, null
  br i1 %54, label %60, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %struct.CVKeyIndex, ptr %32, i64 0, i32 5
  %57 = load i8, ptr %56, align 8, !tbaa !55
  %58 = icmp eq i8 %57, 0
  %59 = zext i1 %58 to i8
  store i8 %59, ptr %56, align 8, !tbaa !55
  br label %60

60:                                               ; preds = %55, %53, %39
  %61 = getelementptr inbounds %struct.BezTriple, ptr %27, i64 1
  %62 = getelementptr inbounds %struct.BezTriple, ptr %26, i64 -1
  %63 = icmp eq i32 %28, 0
  br i1 %63, label %188, label %24, !llvm.loop !440

64:                                               ; preds = %8
  %65 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 7
  %66 = load i32, ptr %65, align 4, !tbaa !31
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %75, label %68

68:                                               ; preds = %64
  %69 = icmp sgt i32 %66, 0
  br i1 %69, label %70, label %188

70:                                               ; preds = %68
  %71 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 17
  %72 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 6
  %73 = load i32, ptr %72, align 8, !tbaa !23
  %74 = icmp sgt i32 %73, 1
  br i1 %74, label %128, label %188

75:                                               ; preds = %64
  %76 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 6
  %77 = load i32, ptr %76, align 8, !tbaa !23
  %78 = icmp sgt i32 %77, 1
  br i1 %78, label %79, label %188

79:                                               ; preds = %75
  %80 = add nsw i32 %77, -1
  %81 = lshr i32 %77, 1
  %82 = zext i32 %80 to i64
  %83 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 17
  %84 = load ptr, ptr %83, align 8, !tbaa !32
  %85 = getelementptr inbounds %struct.BPoint, ptr %84, i64 %82
  br label %86

86:                                               ; preds = %119, %79
  %87 = phi ptr [ %85, %79 ], [ %122, %119 ]
  %88 = phi ptr [ %84, %79 ], [ %121, %119 ]
  %89 = phi i32 [ %81, %79 ], [ %120, %119 ]
  %90 = load ptr, ptr %5, align 8, !tbaa !47
  %91 = tail call ptr @BLI_ghash_lookup(ptr noundef %90, ptr noundef %88) #20
  %92 = load ptr, ptr %5, align 8, !tbaa !47
  %93 = tail call ptr @BLI_ghash_lookup(ptr noundef %92, ptr noundef %87) #20
  %94 = icmp eq ptr %91, null
  br i1 %94, label %100, label %95

95:                                               ; preds = %86
  %96 = getelementptr inbounds %struct.CVKeyIndex, ptr %91, i64 0, i32 5
  %97 = load i8, ptr %96, align 8, !tbaa !55
  %98 = icmp eq i8 %97, 0
  %99 = zext i1 %98 to i8
  store i8 %99, ptr %96, align 8, !tbaa !55
  br label %100

100:                                              ; preds = %95, %86
  %101 = icmp eq ptr %93, null
  br i1 %101, label %107, label %102

102:                                              ; preds = %100
  %103 = getelementptr inbounds %struct.CVKeyIndex, ptr %93, i64 0, i32 5
  %104 = load i8, ptr %103, align 8, !tbaa !55
  %105 = icmp eq i8 %104, 0
  %106 = zext i1 %105 to i8
  store i8 %106, ptr %103, align 8, !tbaa !55
  br label %107

107:                                              ; preds = %102, %100
  %108 = load ptr, ptr %5, align 8, !tbaa !47
  %109 = tail call ptr @BLI_ghash_popkey(ptr noundef %108, ptr noundef %88, ptr noundef null) #20
  %110 = load ptr, ptr %5, align 8, !tbaa !47
  %111 = tail call ptr @BLI_ghash_popkey(ptr noundef %110, ptr noundef %87, ptr noundef null) #20
  %112 = icmp eq ptr %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %107
  %114 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %114, ptr noundef %88, ptr noundef nonnull %111) #20
  br label %115

115:                                              ; preds = %113, %107
  %116 = icmp eq ptr %109, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %118, ptr noundef %87, ptr noundef nonnull %109) #20
  br label %119

119:                                              ; preds = %117, %115
  %120 = add nsw i32 %89, -1
  %121 = getelementptr inbounds %struct.BPoint, ptr %88, i64 1
  %122 = getelementptr inbounds %struct.BPoint, ptr %87, i64 -1
  %123 = icmp ne ptr %121, %122
  %124 = icmp sgt i32 %89, 1
  %125 = select i1 %123, i1 %124, i1 false
  br i1 %125, label %86, label %188, !llvm.loop !441

126:                                              ; preds = %184
  %127 = load i32, ptr %72, align 8, !tbaa !23
  br label %128

128:                                              ; preds = %70, %126
  %129 = phi i32 [ %127, %126 ], [ %73, %70 ]
  %130 = phi i32 [ %185, %126 ], [ %66, %70 ]
  %131 = phi i32 [ %186, %126 ], [ 0, %70 ]
  %132 = icmp sgt i32 %129, 1
  br i1 %132, label %133, label %184

133:                                              ; preds = %128
  %134 = lshr i32 %129, 1
  %135 = load ptr, ptr %71, align 8, !tbaa !32
  %136 = mul nsw i32 %129, %131
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds %struct.BPoint, ptr %135, i64 %137
  %139 = add nsw i32 %129, -1
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.BPoint, ptr %138, i64 %140
  br label %142

142:                                              ; preds = %175, %133
  %143 = phi ptr [ %178, %175 ], [ %141, %133 ]
  %144 = phi ptr [ %177, %175 ], [ %138, %133 ]
  %145 = phi i32 [ %176, %175 ], [ %134, %133 ]
  %146 = load ptr, ptr %5, align 8, !tbaa !47
  %147 = tail call ptr @BLI_ghash_lookup(ptr noundef %146, ptr noundef %144) #20
  %148 = load ptr, ptr %5, align 8, !tbaa !47
  %149 = tail call ptr @BLI_ghash_lookup(ptr noundef %148, ptr noundef %143) #20
  %150 = icmp eq ptr %147, null
  br i1 %150, label %156, label %151

151:                                              ; preds = %142
  %152 = getelementptr inbounds %struct.CVKeyIndex, ptr %147, i64 0, i32 5
  %153 = load i8, ptr %152, align 8, !tbaa !55
  %154 = icmp eq i8 %153, 0
  %155 = zext i1 %154 to i8
  store i8 %155, ptr %152, align 8, !tbaa !55
  br label %156

156:                                              ; preds = %151, %142
  %157 = icmp eq ptr %149, null
  br i1 %157, label %163, label %158

158:                                              ; preds = %156
  %159 = getelementptr inbounds %struct.CVKeyIndex, ptr %149, i64 0, i32 5
  %160 = load i8, ptr %159, align 8, !tbaa !55
  %161 = icmp eq i8 %160, 0
  %162 = zext i1 %161 to i8
  store i8 %162, ptr %159, align 8, !tbaa !55
  br label %163

163:                                              ; preds = %158, %156
  %164 = load ptr, ptr %5, align 8, !tbaa !47
  %165 = tail call ptr @BLI_ghash_popkey(ptr noundef %164, ptr noundef %144, ptr noundef null) #20
  %166 = load ptr, ptr %5, align 8, !tbaa !47
  %167 = tail call ptr @BLI_ghash_popkey(ptr noundef %166, ptr noundef %143, ptr noundef null) #20
  %168 = icmp eq ptr %167, null
  br i1 %168, label %171, label %169

169:                                              ; preds = %163
  %170 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %170, ptr noundef %144, ptr noundef nonnull %167) #20
  br label %171

171:                                              ; preds = %169, %163
  %172 = icmp eq ptr %165, null
  br i1 %172, label %175, label %173

173:                                              ; preds = %171
  %174 = load ptr, ptr %5, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %174, ptr noundef %143, ptr noundef nonnull %165) #20
  br label %175

175:                                              ; preds = %173, %171
  %176 = add nsw i32 %145, -1
  %177 = getelementptr inbounds %struct.BPoint, ptr %144, i64 1
  %178 = getelementptr inbounds %struct.BPoint, ptr %143, i64 -1
  %179 = icmp ne ptr %177, %178
  %180 = icmp sgt i32 %145, 1
  %181 = select i1 %179, i1 %180, i1 false
  br i1 %181, label %142, label %182, !llvm.loop !442

182:                                              ; preds = %175
  %183 = load i32, ptr %65, align 4, !tbaa !31
  br label %184

184:                                              ; preds = %182, %128
  %185 = phi i32 [ %183, %182 ], [ %130, %128 ]
  %186 = add nuw nsw i32 %131, 1
  %187 = icmp slt i32 %186, %185
  br i1 %187, label %126, label %188, !llvm.loop !443

188:                                              ; preds = %60, %184, %119, %70, %12, %68, %75
  %189 = getelementptr %struct.Curve, ptr %0, i64 0, i32 9
  %190 = load ptr, ptr %189, align 8, !tbaa !86
  %191 = icmp eq ptr %190, null
  br i1 %191, label %295, label %192

192:                                              ; preds = %188
  %193 = load ptr, ptr %3, align 8, !tbaa !18
  %194 = getelementptr inbounds %struct.Key, ptr %190, i64 0, i32 6
  %195 = load ptr, ptr %194, align 8, !tbaa !36
  %196 = icmp eq ptr %195, null
  br i1 %196, label %295, label %197

197:                                              ; preds = %192
  %198 = getelementptr i8, ptr %193, i64 16
  %199 = load ptr, ptr %193, align 8, !tbaa !36
  %200 = icmp eq ptr %199, null
  br i1 %200, label %295, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 17
  br label %208

203:                                              ; preds = %291, %208
  %204 = load ptr, ptr %210, align 8, !tbaa !36
  %205 = icmp eq ptr %204, null
  br i1 %205, label %295, label %206, !llvm.loop !444

206:                                              ; preds = %203
  %207 = load ptr, ptr %193, align 8, !tbaa !36
  br label %208

208:                                              ; preds = %206, %201
  %209 = phi ptr [ %207, %206 ], [ %199, %201 ]
  %210 = phi ptr [ %204, %206 ], [ %195, %201 ]
  %211 = icmp eq ptr %209, null
  br i1 %211, label %203, label %212

212:                                              ; preds = %208
  %213 = getelementptr inbounds %struct.KeyBlock, ptr %210, i64 0, i32 10
  %214 = load ptr, ptr %213, align 8, !tbaa !101
  br label %215

215:                                              ; preds = %291, %212
  %216 = phi ptr [ %293, %291 ], [ %209, %212 ]
  %217 = phi ptr [ %292, %291 ], [ %214, %212 ]
  %218 = getelementptr inbounds %struct.Nurb, ptr %216, i64 0, i32 18
  %219 = load ptr, ptr %218, align 8, !tbaa !24
  %220 = icmp eq ptr %219, null
  %221 = getelementptr inbounds %struct.Nurb, ptr %216, i64 0, i32 6
  %222 = load i32, ptr %221, align 8, !tbaa !23
  br i1 %220, label %258, label %223

223:                                              ; preds = %215
  %224 = icmp eq ptr %216, %1
  br i1 %224, label %225, label %254

225:                                              ; preds = %223
  %226 = icmp eq i32 %222, 0
  br i1 %226, label %291, label %227

227:                                              ; preds = %225, %250
  %228 = phi i32 [ %231, %250 ], [ %222, %225 ]
  %229 = phi ptr [ %252, %250 ], [ %219, %225 ]
  %230 = phi ptr [ %251, %250 ], [ %217, %225 ]
  %231 = add nsw i32 %228, -1
  %232 = load ptr, ptr %198, align 8, !tbaa !47
  %233 = tail call ptr @BLI_ghash_lookup(ptr noundef %232, ptr noundef nonnull %229) #20
  %234 = icmp eq ptr %233, null
  br i1 %234, label %250, label %235

235:                                              ; preds = %227
  %236 = load ptr, ptr %233, align 8, !tbaa !94
  %237 = icmp eq ptr %236, null
  br i1 %237, label %250, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds float, ptr %230, i64 6
  %240 = load <2 x float>, ptr %239, align 4, !tbaa !40
  %241 = load <2 x float>, ptr %230, align 4, !tbaa !40
  store <2 x float> %240, ptr %230, align 4, !tbaa !40
  store <2 x float> %241, ptr %239, align 4, !tbaa !40
  %242 = getelementptr inbounds float, ptr %230, i64 2
  %243 = load float, ptr %242, align 4, !tbaa !40
  %244 = getelementptr inbounds float, ptr %230, i64 8
  %245 = load float, ptr %244, align 4, !tbaa !40
  store float %245, ptr %242, align 4, !tbaa !40
  store float %243, ptr %244, align 4, !tbaa !40
  %246 = getelementptr inbounds float, ptr %230, i64 9
  %247 = load float, ptr %246, align 4, !tbaa !40
  %248 = fneg fast float %247
  store float %248, ptr %246, align 4, !tbaa !40
  %249 = getelementptr inbounds float, ptr %230, i64 12
  br label %250

250:                                              ; preds = %238, %235, %227
  %251 = phi ptr [ %249, %238 ], [ %230, %235 ], [ %230, %227 ]
  %252 = getelementptr inbounds %struct.BezTriple, ptr %229, i64 1
  %253 = icmp eq i32 %231, 0
  br i1 %253, label %291, label %227, !llvm.loop !445

254:                                              ; preds = %223
  %255 = mul nsw i32 %222, 12
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds float, ptr %217, i64 %256
  br label %291

258:                                              ; preds = %215
  %259 = getelementptr inbounds %struct.Nurb, ptr %216, i64 0, i32 7
  %260 = load i32, ptr %259, align 4, !tbaa !31
  %261 = mul nsw i32 %260, %222
  %262 = icmp eq ptr %216, %1
  br i1 %262, label %263, label %287

263:                                              ; preds = %258
  %264 = icmp eq i32 %261, 0
  br i1 %264, label %291, label %265

265:                                              ; preds = %263
  %266 = load ptr, ptr %202, align 8, !tbaa !32
  br label %267

267:                                              ; preds = %283, %265
  %268 = phi i32 [ %271, %283 ], [ %261, %265 ]
  %269 = phi ptr [ %285, %283 ], [ %266, %265 ]
  %270 = phi ptr [ %284, %283 ], [ %217, %265 ]
  %271 = add nsw i32 %268, -1
  %272 = load ptr, ptr %198, align 8, !tbaa !47
  %273 = tail call ptr @BLI_ghash_lookup(ptr noundef %272, ptr noundef %269) #20
  %274 = icmp eq ptr %273, null
  br i1 %274, label %283, label %275

275:                                              ; preds = %267
  %276 = load ptr, ptr %273, align 8, !tbaa !94
  %277 = icmp eq ptr %276, null
  br i1 %277, label %283, label %278

278:                                              ; preds = %275
  %279 = getelementptr inbounds float, ptr %270, i64 3
  %280 = load float, ptr %279, align 4, !tbaa !40
  %281 = fneg fast float %280
  store float %281, ptr %279, align 4, !tbaa !40
  %282 = getelementptr inbounds float, ptr %270, i64 4
  br label %283

283:                                              ; preds = %278, %275, %267
  %284 = phi ptr [ %282, %278 ], [ %270, %275 ], [ %270, %267 ]
  %285 = getelementptr inbounds %struct.BPoint, ptr %269, i64 1
  %286 = icmp eq i32 %271, 0
  br i1 %286, label %291, label %267, !llvm.loop !446

287:                                              ; preds = %258
  %288 = shl nsw i32 %261, 2
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds float, ptr %217, i64 %289
  br label %291

291:                                              ; preds = %250, %283, %287, %263, %254, %225
  %292 = phi ptr [ %257, %254 ], [ %290, %287 ], [ %217, %263 ], [ %217, %225 ], [ %284, %283 ], [ %251, %250 ]
  %293 = load ptr, ptr %216, align 8, !tbaa !36
  %294 = icmp eq ptr %293, null
  br i1 %294, label %203, label %215, !llvm.loop !447

295:                                              ; preds = %203, %197, %192, %188, %2
  ret void
}

declare ptr @BLI_ghash_popkey(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare nofpclass(nan inf) float @RNA_float_get(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @curve_smooth_value(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) unnamed_addr #13 {
  %4 = load ptr, ptr %0, align 8, !tbaa !36
  %5 = icmp eq ptr %4, null
  br i1 %5, label %378, label %6

6:                                                ; preds = %3
  %7 = zext i32 %1 to i64
  %8 = zext i32 %2 to i64
  br label %9

9:                                                ; preds = %6, %375
  %10 = phi ptr [ %4, %6 ], [ %376, %375 ]
  %11 = getelementptr inbounds %struct.Nurb, ptr %10, i64 0, i32 18
  %12 = load ptr, ptr %11, align 8, !tbaa !24
  %13 = icmp eq ptr %12, null
  br i1 %13, label %188, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.Nurb, ptr %10, i64 0, i32 6
  %16 = load i32, ptr %15, align 8, !tbaa !23
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %375

18:                                               ; preds = %14
  %19 = getelementptr i8, ptr %12, i64 %7
  %20 = add nsw i32 %16, -1
  %21 = add i32 %16, -2
  br label %22

22:                                               ; preds = %18, %184
  %23 = phi i32 [ 0, %18 ], [ %186, %184 ]
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.BezTriple, ptr %12, i64 %24
  br label %26

26:                                               ; preds = %22, %33
  %27 = phi i32 [ %23, %22 ], [ %34, %33 ]
  %28 = phi ptr [ %25, %22 ], [ %35, %33 ]
  %29 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 0, i32 8
  %30 = load i8, ptr %29, align 4, !tbaa !29
  %31 = and i8 %30, 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %26
  %34 = add nsw i32 %27, 1
  %35 = getelementptr inbounds %struct.BezTriple, ptr %28, i64 1
  %36 = icmp slt i32 %34, %16
  br i1 %36, label %26, label %37, !llvm.loop !448

37:                                               ; preds = %26, %33
  %38 = phi i32 [ -1, %33 ], [ %27, %26 ]
  %39 = add nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.BezTriple, ptr %12, i64 %40
  %42 = icmp slt i32 %39, %16
  br i1 %42, label %43, label %59

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.BezTriple, ptr %12, i64 %40, i32 8
  %45 = load i8, ptr %44, align 4, !tbaa !29
  %46 = and i8 %45, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %59, label %54

48:                                               ; preds = %54
  %49 = getelementptr inbounds %struct.BezTriple, ptr %55, i64 1
  %50 = getelementptr inbounds %struct.BezTriple, ptr %55, i64 1, i32 8
  %51 = load i8, ptr %50, align 4, !tbaa !29
  %52 = and i8 %51, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %59, label %54, !llvm.loop !449

54:                                               ; preds = %43, %48
  %55 = phi ptr [ %49, %48 ], [ %41, %43 ]
  %56 = phi i32 [ %57, %48 ], [ %39, %43 ]
  %57 = add nsw i32 %56, 1
  %58 = icmp eq i32 %57, %16
  br i1 %58, label %59, label %48, !llvm.loop !449

59:                                               ; preds = %48, %54, %43, %37
  %60 = phi i32 [ %38, %37 ], [ %38, %43 ], [ %20, %54 ], [ %56, %48 ]
  %61 = icmp eq i32 %38, -1
  br i1 %61, label %184, label %62

62:                                               ; preds = %59
  %63 = icmp eq i32 %38, %60
  br i1 %63, label %64, label %88

64:                                               ; preds = %62
  %65 = icmp sgt i32 %38, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %64
  %67 = add nsw i32 %38, -1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.BezTriple, ptr %19, i64 %68
  %70 = load float, ptr %69, align 4, !tbaa !40
  br label %71

71:                                               ; preds = %64, %66
  %72 = phi float [ %70, %66 ], [ 0x47EFFFFFE0000000, %64 ]
  %73 = icmp slt i32 %38, %16
  br i1 %73, label %74, label %77

74:                                               ; preds = %71
  %75 = getelementptr inbounds i8, ptr %41, i64 %7
  %76 = load float, ptr %75, align 4, !tbaa !40
  br label %77

77:                                               ; preds = %74, %71
  %78 = phi float [ %76, %74 ], [ 0x47EFFFFFE0000000, %71 ]
  %79 = fcmp fast une float %72, 0x47EFFFFFE0000000
  %80 = fcmp fast oge float %78, 0x47EFFFFFE0000000
  %81 = select i1 %79, i1 %80, i1 false
  br i1 %81, label %82, label %85

82:                                               ; preds = %77
  %83 = fadd fast float %78, %72
  %84 = fmul fast float %83, 5.000000e-01
  br label %180

85:                                               ; preds = %77
  br i1 %79, label %180, label %86

86:                                               ; preds = %85
  %87 = fcmp fast une float %78, 0x47EFFFFFE0000000
  br i1 %87, label %180, label %184

88:                                               ; preds = %62
  %89 = tail call i32 @llvm.umax.i32(i32 %38, i32 1)
  %90 = tail call i32 @llvm.usub.sat.i32(i32 %38, i32 1)
  %91 = sext i32 %90 to i64
  %92 = getelementptr %struct.BezTriple, ptr %19, i64 %91
  %93 = load float, ptr %92, align 4, !tbaa !40
  %94 = icmp eq i32 %60, %20
  %95 = select i1 %94, i32 %21, i32 %60
  %96 = icmp sgt i32 %89, %95
  br i1 %96, label %184, label %97

97:                                               ; preds = %88
  %98 = sub nsw i32 %95, %89
  %99 = sitofp i32 %98 to float
  %100 = fadd fast float %99, 2.000000e+00
  %101 = add nsw i32 %60, 1
  %102 = select i1 %94, i32 %20, i32 %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr %struct.BezTriple, ptr %19, i64 %103
  %105 = sext i32 %89 to i64
  %106 = getelementptr inbounds %struct.BezTriple, ptr %12, i64 %105
  %107 = load float, ptr %104, align 4, !tbaa !40
  %108 = fsub fast float %107, %93
  %109 = sub i32 %95, %89
  %110 = zext i32 %109 to i64
  %111 = add nuw nsw i64 %110, 1
  %112 = icmp ult i32 %109, 3
  br i1 %112, label %164, label %113

113:                                              ; preds = %97
  %114 = and i64 %111, 8589934588
  %115 = trunc i64 %114 to i32
  %116 = add i32 %89, %115
  %117 = mul nuw nsw i64 %114, 72
  %118 = getelementptr i8, ptr %106, i64 %117
  %119 = insertelement <4 x i32> poison, i32 %89, i64 0
  %120 = shufflevector <4 x i32> %119, <4 x i32> poison, <4 x i32> zeroinitializer
  %121 = add <4 x i32> %120, <i32 0, i32 1, i32 2, i32 3>
  %122 = insertelement <4 x i32> poison, i32 %89, i64 0
  %123 = shufflevector <4 x i32> %122, <4 x i32> poison, <4 x i32> zeroinitializer
  %124 = insertelement <4 x float> poison, float %108, i64 0
  %125 = shufflevector <4 x float> %124, <4 x float> poison, <4 x i32> zeroinitializer
  %126 = insertelement <4 x float> poison, float %100, i64 0
  %127 = shufflevector <4 x float> %126, <4 x float> poison, <4 x i32> zeroinitializer
  %128 = insertelement <4 x float> poison, float %93, i64 0
  %129 = shufflevector <4 x float> %128, <4 x float> poison, <4 x i32> zeroinitializer
  %130 = fdiv fast <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %127
  %131 = getelementptr i8, ptr %106, i64 %7
  %132 = getelementptr i8, ptr %106, i64 %7
  %133 = getelementptr i8, ptr %106, i64 %7
  %134 = getelementptr i8, ptr %106, i64 %7
  br label %135

135:                                              ; preds = %135, %113
  %136 = phi i64 [ 0, %113 ], [ %159, %135 ]
  %137 = phi <4 x i32> [ %121, %113 ], [ %160, %135 ]
  %138 = mul i64 %136, 72
  %139 = mul i64 %136, 72
  %140 = add i64 %139, 72
  %141 = mul i64 %136, 72
  %142 = add i64 %141, 144
  %143 = mul i64 %136, 72
  %144 = add i64 %143, 216
  %145 = add <4 x i32> %137, <i32 1, i32 1, i32 1, i32 1>
  %146 = sub nsw <4 x i32> %145, %123
  %147 = sitofp <4 x i32> %146 to <4 x float>
  %148 = fmul fast <4 x float> %125, %147
  %149 = fmul fast <4 x float> %148, %130
  %150 = fadd fast <4 x float> %149, %129
  %151 = getelementptr i8, ptr %131, i64 %138
  %152 = getelementptr i8, ptr %132, i64 %140
  %153 = getelementptr i8, ptr %133, i64 %142
  %154 = getelementptr i8, ptr %134, i64 %144
  %155 = extractelement <4 x float> %150, i64 0
  store float %155, ptr %151, align 4, !tbaa !40
  %156 = extractelement <4 x float> %150, i64 1
  store float %156, ptr %152, align 4, !tbaa !40
  %157 = extractelement <4 x float> %150, i64 2
  store float %157, ptr %153, align 4, !tbaa !40
  %158 = extractelement <4 x float> %150, i64 3
  store float %158, ptr %154, align 4, !tbaa !40
  %159 = add nuw i64 %136, 4
  %160 = add <4 x i32> %137, <i32 4, i32 4, i32 4, i32 4>
  %161 = icmp eq i64 %159, %114
  br i1 %161, label %162, label %135, !llvm.loop !450

162:                                              ; preds = %135
  %163 = icmp eq i64 %111, %114
  br i1 %163, label %184, label %164

164:                                              ; preds = %97, %162
  %165 = phi i32 [ %89, %97 ], [ %116, %162 ]
  %166 = phi ptr [ %106, %97 ], [ %118, %162 ]
  %167 = fdiv fast float 1.000000e+00, %100
  br label %168

168:                                              ; preds = %164, %168
  %169 = phi i32 [ %171, %168 ], [ %165, %164 ]
  %170 = phi ptr [ %178, %168 ], [ %166, %164 ]
  %171 = add i32 %169, 1
  %172 = sub nsw i32 %171, %89
  %173 = sitofp i32 %172 to float
  %174 = fmul fast float %108, %173
  %175 = fmul fast float %174, %167
  %176 = fadd fast float %175, %93
  %177 = getelementptr inbounds i8, ptr %170, i64 %7
  store float %176, ptr %177, align 4, !tbaa !40
  %178 = getelementptr inbounds %struct.BezTriple, ptr %170, i64 1
  %179 = icmp eq i32 %169, %95
  br i1 %179, label %184, label %168, !llvm.loop !451

180:                                              ; preds = %86, %85, %82
  %181 = phi float [ %84, %82 ], [ %72, %85 ], [ %78, %86 ]
  %182 = sext i32 %38 to i64
  %183 = getelementptr %struct.BezTriple, ptr %19, i64 %182
  store float %181, ptr %183, align 4, !tbaa !40
  br label %184

184:                                              ; preds = %168, %162, %180, %88, %59, %86
  %185 = phi i32 [ %38, %86 ], [ %16, %59 ], [ %60, %88 ], [ %38, %180 ], [ %60, %162 ], [ %60, %168 ]
  %186 = add nsw i32 %185, 1
  %187 = icmp slt i32 %186, %16
  br i1 %187, label %22, label %375, !llvm.loop !452

188:                                              ; preds = %9
  %189 = getelementptr inbounds %struct.Nurb, ptr %10, i64 0, i32 17
  %190 = load ptr, ptr %189, align 8, !tbaa !32
  %191 = icmp eq ptr %190, null
  br i1 %191, label %375, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds %struct.Nurb, ptr %10, i64 0, i32 6
  %194 = load i32, ptr %193, align 8, !tbaa !23
  %195 = icmp sgt i32 %194, 0
  br i1 %195, label %196, label %375

196:                                              ; preds = %192
  %197 = getelementptr i8, ptr %190, i64 %8
  %198 = add nsw i32 %194, -1
  %199 = add i32 %194, -2
  br label %200

200:                                              ; preds = %196, %371
  %201 = phi i32 [ 0, %196 ], [ %373, %371 ]
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds %struct.BPoint, ptr %190, i64 %202
  br label %204

204:                                              ; preds = %200, %211
  %205 = phi i32 [ %201, %200 ], [ %212, %211 ]
  %206 = phi ptr [ %203, %200 ], [ %213, %211 ]
  %207 = getelementptr inbounds %struct.BPoint, ptr %206, i64 0, i32 3
  %208 = load i16, ptr %207, align 4, !tbaa !34
  %209 = and i16 %208, 1
  %210 = icmp eq i16 %209, 0
  br i1 %210, label %211, label %215

211:                                              ; preds = %204
  %212 = add nsw i32 %205, 1
  %213 = getelementptr inbounds %struct.BPoint, ptr %206, i64 1
  %214 = icmp slt i32 %212, %194
  br i1 %214, label %204, label %215, !llvm.loop !453

215:                                              ; preds = %204, %211
  %216 = phi i32 [ -1, %211 ], [ %205, %204 ]
  %217 = add nsw i32 %216, 1
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds %struct.BPoint, ptr %190, i64 %218
  %220 = icmp slt i32 %217, %194
  br i1 %220, label %221, label %237

221:                                              ; preds = %215
  %222 = getelementptr inbounds %struct.BPoint, ptr %190, i64 %218, i32 3
  %223 = load i16, ptr %222, align 4, !tbaa !34
  %224 = and i16 %223, 1
  %225 = icmp eq i16 %224, 0
  br i1 %225, label %237, label %232

226:                                              ; preds = %232
  %227 = getelementptr inbounds %struct.BPoint, ptr %233, i64 1
  %228 = getelementptr inbounds %struct.BPoint, ptr %233, i64 1, i32 3
  %229 = load i16, ptr %228, align 4, !tbaa !34
  %230 = and i16 %229, 1
  %231 = icmp eq i16 %230, 0
  br i1 %231, label %237, label %232, !llvm.loop !454

232:                                              ; preds = %221, %226
  %233 = phi ptr [ %227, %226 ], [ %219, %221 ]
  %234 = phi i32 [ %235, %226 ], [ %217, %221 ]
  %235 = add nsw i32 %234, 1
  %236 = icmp eq i32 %235, %194
  br i1 %236, label %237, label %226, !llvm.loop !454

237:                                              ; preds = %226, %232, %221, %215
  %238 = phi i32 [ %216, %215 ], [ %216, %221 ], [ %198, %232 ], [ %234, %226 ]
  %239 = icmp eq i32 %216, -1
  br i1 %239, label %371, label %240

240:                                              ; preds = %237
  %241 = icmp eq i32 %216, %238
  br i1 %241, label %242, label %275

242:                                              ; preds = %240
  %243 = icmp sgt i32 %216, 0
  br i1 %243, label %244, label %250

244:                                              ; preds = %242
  %245 = add nsw i32 %216, -1
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds %struct.BPoint, ptr %197, i64 %246
  %248 = load float, ptr %247, align 4, !tbaa !40
  %249 = icmp slt i32 %216, %194
  br i1 %249, label %258, label %256

250:                                              ; preds = %242
  %251 = icmp slt i32 %216, %194
  br i1 %251, label %252, label %371

252:                                              ; preds = %250
  %253 = getelementptr inbounds i8, ptr %219, i64 %8
  %254 = load float, ptr %253, align 4, !tbaa !40
  %255 = fcmp fast une float %254, 0x47EFFFFFE0000000
  br i1 %255, label %272, label %371

256:                                              ; preds = %244
  %257 = fcmp fast une float %248, 0x47EFFFFFE0000000
  br i1 %257, label %269, label %371

258:                                              ; preds = %244
  %259 = getelementptr inbounds i8, ptr %219, i64 %8
  %260 = load float, ptr %259, align 4, !tbaa !40
  %261 = fcmp fast une float %248, 0x47EFFFFFE0000000
  %262 = fcmp fast une float %260, 0x47EFFFFFE0000000
  %263 = select i1 %261, i1 %262, i1 false
  br i1 %263, label %264, label %268

264:                                              ; preds = %258
  %265 = fadd fast float %260, %248
  %266 = fmul fast float %265, 5.000000e-01
  %267 = zext i32 %216 to i64
  br label %367

268:                                              ; preds = %258
  br i1 %261, label %269, label %271

269:                                              ; preds = %256, %268
  %270 = zext i32 %216 to i64
  br label %367

271:                                              ; preds = %268
  br i1 %262, label %272, label %371

272:                                              ; preds = %252, %271
  %273 = phi float [ %254, %252 ], [ %260, %271 ]
  %274 = sext i32 %216 to i64
  br label %367

275:                                              ; preds = %240
  %276 = tail call i32 @llvm.umax.i32(i32 %216, i32 1)
  %277 = tail call i32 @llvm.usub.sat.i32(i32 %216, i32 1)
  %278 = sext i32 %277 to i64
  %279 = getelementptr %struct.BPoint, ptr %197, i64 %278
  %280 = load float, ptr %279, align 4, !tbaa !40
  %281 = icmp eq i32 %238, %198
  %282 = select i1 %281, i32 %199, i32 %238
  %283 = icmp sgt i32 %276, %282
  br i1 %283, label %371, label %284

284:                                              ; preds = %275
  %285 = sub nsw i32 %282, %276
  %286 = sitofp i32 %285 to float
  %287 = fadd fast float %286, 2.000000e+00
  %288 = add nsw i32 %238, 1
  %289 = select i1 %281, i32 %198, i32 %288
  %290 = sext i32 %289 to i64
  %291 = getelementptr %struct.BPoint, ptr %197, i64 %290
  %292 = sext i32 %276 to i64
  %293 = getelementptr inbounds %struct.BPoint, ptr %190, i64 %292
  %294 = load float, ptr %291, align 4, !tbaa !40
  %295 = fsub fast float %294, %280
  %296 = sub i32 %282, %276
  %297 = zext i32 %296 to i64
  %298 = add nuw nsw i64 %297, 1
  %299 = icmp ult i32 %296, 3
  br i1 %299, label %351, label %300

300:                                              ; preds = %284
  %301 = and i64 %298, 8589934588
  %302 = trunc i64 %301 to i32
  %303 = add i32 %276, %302
  %304 = mul nuw nsw i64 %301, 36
  %305 = getelementptr i8, ptr %293, i64 %304
  %306 = insertelement <4 x i32> poison, i32 %276, i64 0
  %307 = shufflevector <4 x i32> %306, <4 x i32> poison, <4 x i32> zeroinitializer
  %308 = add <4 x i32> %307, <i32 0, i32 1, i32 2, i32 3>
  %309 = insertelement <4 x i32> poison, i32 %276, i64 0
  %310 = shufflevector <4 x i32> %309, <4 x i32> poison, <4 x i32> zeroinitializer
  %311 = insertelement <4 x float> poison, float %295, i64 0
  %312 = shufflevector <4 x float> %311, <4 x float> poison, <4 x i32> zeroinitializer
  %313 = insertelement <4 x float> poison, float %287, i64 0
  %314 = shufflevector <4 x float> %313, <4 x float> poison, <4 x i32> zeroinitializer
  %315 = insertelement <4 x float> poison, float %280, i64 0
  %316 = shufflevector <4 x float> %315, <4 x float> poison, <4 x i32> zeroinitializer
  %317 = fdiv fast <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %314
  %318 = getelementptr i8, ptr %293, i64 %8
  %319 = getelementptr i8, ptr %293, i64 %8
  %320 = getelementptr i8, ptr %293, i64 %8
  %321 = getelementptr i8, ptr %293, i64 %8
  br label %322

322:                                              ; preds = %322, %300
  %323 = phi i64 [ 0, %300 ], [ %346, %322 ]
  %324 = phi <4 x i32> [ %308, %300 ], [ %347, %322 ]
  %325 = mul i64 %323, 36
  %326 = mul i64 %323, 36
  %327 = add i64 %326, 36
  %328 = mul i64 %323, 36
  %329 = add i64 %328, 72
  %330 = mul i64 %323, 36
  %331 = add i64 %330, 108
  %332 = add <4 x i32> %324, <i32 1, i32 1, i32 1, i32 1>
  %333 = sub nsw <4 x i32> %332, %310
  %334 = sitofp <4 x i32> %333 to <4 x float>
  %335 = fmul fast <4 x float> %312, %334
  %336 = fmul fast <4 x float> %335, %317
  %337 = fadd fast <4 x float> %336, %316
  %338 = getelementptr i8, ptr %318, i64 %325
  %339 = getelementptr i8, ptr %319, i64 %327
  %340 = getelementptr i8, ptr %320, i64 %329
  %341 = getelementptr i8, ptr %321, i64 %331
  %342 = extractelement <4 x float> %337, i64 0
  store float %342, ptr %338, align 4, !tbaa !40
  %343 = extractelement <4 x float> %337, i64 1
  store float %343, ptr %339, align 4, !tbaa !40
  %344 = extractelement <4 x float> %337, i64 2
  store float %344, ptr %340, align 4, !tbaa !40
  %345 = extractelement <4 x float> %337, i64 3
  store float %345, ptr %341, align 4, !tbaa !40
  %346 = add nuw i64 %323, 4
  %347 = add <4 x i32> %324, <i32 4, i32 4, i32 4, i32 4>
  %348 = icmp eq i64 %346, %301
  br i1 %348, label %349, label %322, !llvm.loop !455

349:                                              ; preds = %322
  %350 = icmp eq i64 %298, %301
  br i1 %350, label %371, label %351

351:                                              ; preds = %284, %349
  %352 = phi i32 [ %276, %284 ], [ %303, %349 ]
  %353 = phi ptr [ %293, %284 ], [ %305, %349 ]
  %354 = fdiv fast float 1.000000e+00, %287
  br label %355

355:                                              ; preds = %351, %355
  %356 = phi i32 [ %358, %355 ], [ %352, %351 ]
  %357 = phi ptr [ %365, %355 ], [ %353, %351 ]
  %358 = add i32 %356, 1
  %359 = sub nsw i32 %358, %276
  %360 = sitofp i32 %359 to float
  %361 = fmul fast float %295, %360
  %362 = fmul fast float %361, %354
  %363 = fadd fast float %362, %280
  %364 = getelementptr inbounds i8, ptr %357, i64 %8
  store float %363, ptr %364, align 4, !tbaa !40
  %365 = getelementptr inbounds %struct.BPoint, ptr %357, i64 1
  %366 = icmp eq i32 %356, %282
  br i1 %366, label %371, label %355, !llvm.loop !456

367:                                              ; preds = %269, %272, %264
  %368 = phi i64 [ %267, %264 ], [ %274, %272 ], [ %270, %269 ]
  %369 = phi float [ %266, %264 ], [ %273, %272 ], [ %248, %269 ]
  %370 = getelementptr %struct.BPoint, ptr %197, i64 %368
  store float %369, ptr %370, align 4, !tbaa !40
  br label %371

371:                                              ; preds = %355, %349, %367, %275, %250, %252, %256, %237, %271
  %372 = phi i32 [ %216, %271 ], [ %194, %237 ], [ %216, %256 ], [ %216, %252 ], [ %216, %250 ], [ %238, %275 ], [ %216, %367 ], [ %238, %349 ], [ %238, %355 ]
  %373 = add nsw i32 %372, 1
  %374 = icmp slt i32 %373, %194
  br i1 %374, label %200, label %375, !llvm.loop !457

375:                                              ; preds = %184, %371, %14, %192, %188
  %376 = load ptr, ptr %10, align 8, !tbaa !36
  %377 = icmp eq ptr %376, null
  br i1 %377, label %378, label %9, !llvm.loop !458

378:                                              ; preds = %375, %3
  ret void
}

declare void @BKE_curve_nurb_vert_active_validate(ptr noundef) local_unnamed_addr #6

declare i32 @RNA_enum_get(ptr noundef, ptr noundef) local_unnamed_addr #6

declare i32 @RNA_boolean_get(ptr noundef, ptr noundef) local_unnamed_addr #6

declare i32 @RNA_int_get(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @BKE_nurb_bezt_get_next(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @interp_v3_v3v3(ptr noundef, ptr noundef, ptr noundef, float noundef nofpclass(nan inf)) local_unnamed_addr #6

declare ptr @BKE_nurb_bpoint_get_next(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @interp_v4_v4v4(ptr noundef, ptr noundef, ptr noundef, float noundef nofpclass(nan inf)) local_unnamed_addr #6

declare zeroext i8 @BKE_nurb_type_convert(ptr noundef, i16 noundef signext, i8 noundef zeroext) local_unnamed_addr #6

declare void @BKE_nurbList_handles_set(ptr noundef, i8 noundef zeroext) local_unnamed_addr #6

declare void @BKE_nurbList_handles_recalculate(ptr noundef, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #6

declare void @BKE_nurb_free(ptr noundef) local_unnamed_addr #6

declare void @BLI_addhead(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #14

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @rotate_direction_nurb(ptr nocapture noundef %0) unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 6
  %3 = load i32, ptr %2, align 8, !tbaa !23
  %4 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 7
  %5 = load i32, ptr %4, align 4, !tbaa !31
  store i32 %5, ptr %2, align 8, !tbaa !23
  store i32 %3, ptr %4, align 4, !tbaa !31
  %6 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 9
  %7 = load <4 x i16>, ptr %6, align 4, !tbaa !170
  %8 = shufflevector <4 x i16> %7, <4 x i16> poison, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  store <4 x i16> %8, ptr %6, align 4, !tbaa !170
  %9 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 13
  %10 = load i16, ptr %9, align 4, !tbaa !39
  %11 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 14
  %12 = load i16, ptr %11, align 2, !tbaa !44
  store i16 %12, ptr %9, align 4, !tbaa !39
  store i16 %10, ptr %11, align 2, !tbaa !44
  %13 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 15
  %14 = load ptr, ptr %13, align 8, !tbaa !37
  %15 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 16
  %16 = load ptr, ptr %15, align 8, !tbaa !42
  store ptr %16, ptr %13, align 8, !tbaa !37
  store ptr %14, ptr %15, align 8, !tbaa !42
  %17 = extractelement <4 x i16> %7, i64 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %3, %18
  %20 = and i16 %10, 1
  %21 = icmp eq i16 %20, 0
  %22 = add nsw i32 %18, -1
  %23 = select i1 %21, i32 0, i32 %22
  %24 = add nsw i32 %19, %23
  %25 = icmp eq ptr %14, null
  %26 = icmp eq i32 %24, 0
  %27 = or i1 %25, %26
  br i1 %27, label %198, label %28

28:                                               ; preds = %1
  %29 = add i32 %24, -1
  %30 = icmp sgt i32 %24, 1
  br i1 %30, label %31, label %47

31:                                               ; preds = %28
  %32 = lshr i32 %24, 1
  %33 = zext i32 %29 to i64
  %34 = getelementptr inbounds float, ptr %14, i64 %33
  br label %35

35:                                               ; preds = %35, %31
  %36 = phi ptr [ %42, %35 ], [ %14, %31 ]
  %37 = phi i32 [ %41, %35 ], [ %32, %31 ]
  %38 = phi ptr [ %43, %35 ], [ %34, %31 ]
  %39 = load float, ptr %36, align 4, !tbaa !40
  %40 = load float, ptr %38, align 4, !tbaa !40
  store float %40, ptr %36, align 4, !tbaa !40
  store float %39, ptr %38, align 4, !tbaa !40
  %41 = add nsw i32 %37, -1
  %42 = getelementptr inbounds float, ptr %36, i64 1
  %43 = getelementptr inbounds float, ptr %38, i64 -1
  %44 = icmp ne ptr %42, %43
  %45 = icmp ugt i32 %37, 1
  %46 = select i1 %44, i1 %45, i1 false
  br i1 %46, label %35, label %47, !llvm.loop !459

47:                                               ; preds = %35, %28
  %48 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %49 = sext i32 %24 to i64
  %50 = shl nsw i64 %49, 2
  %51 = tail call ptr %48(i64 noundef %50, ptr noundef nonnull @.str.212) #20
  %52 = zext i32 %29 to i64
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i32 %29, 31
  br i1 %54, label %109, label %55

55:                                               ; preds = %47
  %56 = zext i32 %29 to i64
  %57 = shl nuw nsw i64 %56, 2
  %58 = add nuw nsw i64 %57, 4
  %59 = getelementptr i8, ptr %51, i64 %58
  %60 = add nuw nsw i64 %57, 8
  %61 = getelementptr i8, ptr %14, i64 %60
  %62 = icmp ult ptr %51, %61
  %63 = icmp ult ptr %14, %59
  %64 = and i1 %62, %63
  br i1 %64, label %109, label %65

65:                                               ; preds = %55
  %66 = and i64 %53, 8589934560
  %67 = shl nuw nsw i64 %66, 2
  %68 = getelementptr i8, ptr %14, i64 %67
  %69 = trunc i64 %66 to i32
  %70 = sub i32 %24, %69
  %71 = shl nuw nsw i64 %66, 2
  %72 = getelementptr i8, ptr %51, i64 %71
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %105, %73 ]
  %75 = shl i64 %74, 2
  %76 = getelementptr i8, ptr %14, i64 %75
  %77 = shl i64 %74, 2
  %78 = getelementptr i8, ptr %51, i64 %77
  %79 = getelementptr inbounds float, ptr %76, i64 1
  %80 = load <8 x float>, ptr %79, align 4, !tbaa !40, !alias.scope !460
  %81 = getelementptr inbounds float, ptr %76, i64 9
  %82 = load <8 x float>, ptr %81, align 4, !tbaa !40, !alias.scope !460
  %83 = getelementptr inbounds float, ptr %76, i64 17
  %84 = load <8 x float>, ptr %83, align 4, !tbaa !40, !alias.scope !460
  %85 = getelementptr inbounds float, ptr %76, i64 25
  %86 = load <8 x float>, ptr %85, align 4, !tbaa !40, !alias.scope !460
  %87 = load <8 x float>, ptr %76, align 4, !tbaa !40, !alias.scope !460
  %88 = getelementptr float, ptr %76, i64 8
  %89 = load <8 x float>, ptr %88, align 4, !tbaa !40, !alias.scope !460
  %90 = getelementptr float, ptr %76, i64 16
  %91 = load <8 x float>, ptr %90, align 4, !tbaa !40, !alias.scope !460
  %92 = getelementptr float, ptr %76, i64 24
  %93 = load <8 x float>, ptr %92, align 4, !tbaa !40, !alias.scope !460
  %94 = fsub fast <8 x float> %80, %87
  %95 = fsub fast <8 x float> %82, %89
  %96 = fsub fast <8 x float> %84, %91
  %97 = fsub fast <8 x float> %86, %93
  %98 = tail call fast <8 x float> @llvm.fabs.v8f32(<8 x float> %94)
  %99 = tail call fast <8 x float> @llvm.fabs.v8f32(<8 x float> %95)
  %100 = tail call fast <8 x float> @llvm.fabs.v8f32(<8 x float> %96)
  %101 = tail call fast <8 x float> @llvm.fabs.v8f32(<8 x float> %97)
  store <8 x float> %98, ptr %78, align 4, !tbaa !40, !alias.scope !463, !noalias !460
  %102 = getelementptr float, ptr %78, i64 8
  store <8 x float> %99, ptr %102, align 4, !tbaa !40, !alias.scope !463, !noalias !460
  %103 = getelementptr float, ptr %78, i64 16
  store <8 x float> %100, ptr %103, align 4, !tbaa !40, !alias.scope !463, !noalias !460
  %104 = getelementptr float, ptr %78, i64 24
  store <8 x float> %101, ptr %104, align 4, !tbaa !40, !alias.scope !463, !noalias !460
  %105 = add nuw i64 %74, 32
  %106 = icmp eq i64 %105, %66
  br i1 %106, label %107, label %73, !llvm.loop !465

107:                                              ; preds = %73
  %108 = icmp eq i64 %53, %66
  br i1 %108, label %146, label %109

109:                                              ; preds = %55, %47, %107
  %110 = phi ptr [ %14, %55 ], [ %14, %47 ], [ %68, %107 ]
  %111 = phi i32 [ %24, %55 ], [ %24, %47 ], [ %70, %107 ]
  %112 = phi ptr [ %51, %55 ], [ %51, %47 ], [ %72, %107 ]
  %113 = and i32 %111, 1
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %123, label %115

115:                                              ; preds = %109
  %116 = add nsw i32 %111, -1
  %117 = getelementptr inbounds float, ptr %110, i64 1
  %118 = load float, ptr %117, align 4, !tbaa !40
  %119 = load float, ptr %110, align 4, !tbaa !40
  %120 = fsub fast float %118, %119
  %121 = tail call fast float @llvm.fabs.f32(float %120)
  store float %121, ptr %112, align 4, !tbaa !40
  %122 = getelementptr inbounds float, ptr %112, i64 1
  br label %123

123:                                              ; preds = %115, %109
  %124 = phi ptr [ %110, %109 ], [ %117, %115 ]
  %125 = phi i32 [ %111, %109 ], [ %116, %115 ]
  %126 = phi ptr [ %112, %109 ], [ %122, %115 ]
  %127 = icmp eq i32 %111, 1
  br i1 %127, label %146, label %128

128:                                              ; preds = %123, %128
  %129 = phi ptr [ %139, %128 ], [ %124, %123 ]
  %130 = phi i32 [ %138, %128 ], [ %125, %123 ]
  %131 = phi ptr [ %144, %128 ], [ %126, %123 ]
  %132 = getelementptr inbounds float, ptr %129, i64 1
  %133 = load float, ptr %132, align 4, !tbaa !40
  %134 = load float, ptr %129, align 4, !tbaa !40
  %135 = fsub fast float %133, %134
  %136 = tail call fast float @llvm.fabs.f32(float %135)
  store float %136, ptr %131, align 4, !tbaa !40
  %137 = getelementptr inbounds float, ptr %131, i64 1
  %138 = add nsw i32 %130, -2
  %139 = getelementptr inbounds float, ptr %129, i64 2
  %140 = load float, ptr %139, align 4, !tbaa !40
  %141 = load float, ptr %132, align 4, !tbaa !40
  %142 = fsub fast float %140, %141
  %143 = tail call fast float @llvm.fabs.f32(float %142)
  store float %143, ptr %137, align 4, !tbaa !40
  %144 = getelementptr inbounds float, ptr %131, i64 2
  %145 = icmp eq i32 %138, 0
  br i1 %145, label %146, label %128, !llvm.loop !466

146:                                              ; preds = %123, %128, %107
  store float 0.000000e+00, ptr %14, align 4, !tbaa !40
  %147 = icmp eq i32 %29, 0
  br i1 %147, label %196, label %148

148:                                              ; preds = %146
  %149 = add i32 %23, %3
  %150 = add i32 %149, %18
  %151 = add i32 %150, -2
  %152 = and i32 %29, 3
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %167, label %154

154:                                              ; preds = %148, %154
  %155 = phi float [ %163, %154 ], [ 0.000000e+00, %148 ]
  %156 = phi ptr [ %160, %154 ], [ %14, %148 ]
  %157 = phi i32 [ %161, %154 ], [ %29, %148 ]
  %158 = phi ptr [ %164, %154 ], [ %51, %148 ]
  %159 = phi i32 [ %165, %154 ], [ 0, %148 ]
  %160 = getelementptr inbounds float, ptr %156, i64 1
  %161 = add nsw i32 %157, -1
  %162 = load float, ptr %158, align 4, !tbaa !40
  %163 = fadd fast float %162, %155
  store float %163, ptr %160, align 4, !tbaa !40
  %164 = getelementptr inbounds float, ptr %158, i64 1
  %165 = add i32 %159, 1
  %166 = icmp eq i32 %165, %152
  br i1 %166, label %167, label %154, !llvm.loop !467

167:                                              ; preds = %154, %148
  %168 = phi float [ 0.000000e+00, %148 ], [ %163, %154 ]
  %169 = phi ptr [ %14, %148 ], [ %160, %154 ]
  %170 = phi i32 [ %29, %148 ], [ %161, %154 ]
  %171 = phi ptr [ %51, %148 ], [ %164, %154 ]
  %172 = icmp ult i32 %151, 3
  br i1 %172, label %196, label %173

173:                                              ; preds = %167, %173
  %174 = phi float [ %193, %173 ], [ %168, %167 ]
  %175 = phi ptr [ %190, %173 ], [ %169, %167 ]
  %176 = phi i32 [ %191, %173 ], [ %170, %167 ]
  %177 = phi ptr [ %194, %173 ], [ %171, %167 ]
  %178 = getelementptr inbounds float, ptr %175, i64 1
  %179 = load float, ptr %177, align 4, !tbaa !40
  %180 = fadd fast float %179, %174
  store float %180, ptr %178, align 4, !tbaa !40
  %181 = getelementptr inbounds float, ptr %177, i64 1
  %182 = getelementptr inbounds float, ptr %175, i64 2
  %183 = load float, ptr %181, align 4, !tbaa !40
  %184 = fadd fast float %183, %180
  store float %184, ptr %182, align 4, !tbaa !40
  %185 = getelementptr inbounds float, ptr %177, i64 2
  %186 = getelementptr inbounds float, ptr %175, i64 3
  %187 = load float, ptr %185, align 4, !tbaa !40
  %188 = fadd fast float %187, %184
  store float %188, ptr %186, align 4, !tbaa !40
  %189 = getelementptr inbounds float, ptr %177, i64 3
  %190 = getelementptr inbounds float, ptr %175, i64 4
  %191 = add nsw i32 %176, -4
  %192 = load float, ptr %189, align 4, !tbaa !40
  %193 = fadd fast float %192, %188
  store float %193, ptr %190, align 4, !tbaa !40
  %194 = getelementptr inbounds float, ptr %177, i64 4
  %195 = icmp eq i32 %191, 0
  br i1 %195, label %196, label %173, !llvm.loop !468

196:                                              ; preds = %167, %173, %146
  %197 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %197(ptr noundef %51) #20
  br label %198

198:                                              ; preds = %1, %196
  %199 = load ptr, ptr @MEM_dupallocN, align 8, !tbaa !36
  %200 = getelementptr inbounds %struct.Nurb, ptr %0, i64 0, i32 17
  %201 = load ptr, ptr %200, align 8, !tbaa !32
  %202 = tail call ptr %199(ptr noundef %201) #20
  %203 = load i32, ptr %4, align 4, !tbaa !31
  %204 = icmp sgt i32 %203, 0
  br i1 %204, label %205, label %241

205:                                              ; preds = %198
  %206 = load i32, ptr %2, align 8, !tbaa !23
  %207 = icmp sgt i32 %206, 0
  br i1 %207, label %208, label %241

208:                                              ; preds = %205
  %209 = load ptr, ptr %200, align 8, !tbaa !32
  br label %210

210:                                              ; preds = %208, %234
  %211 = phi i32 [ %203, %208 ], [ %235, %234 ]
  %212 = phi i32 [ %206, %208 ], [ %236, %234 ]
  %213 = phi i64 [ 0, %208 ], [ %238, %234 ]
  %214 = phi ptr [ %209, %208 ], [ %237, %234 ]
  %215 = icmp sgt i32 %212, 0
  br i1 %215, label %216, label %234

216:                                              ; preds = %210
  %217 = getelementptr %struct.BPoint, ptr %202, i64 %213
  br label %218

218:                                              ; preds = %216, %218
  %219 = phi i32 [ %212, %216 ], [ %230, %218 ]
  %220 = phi ptr [ %214, %216 ], [ %229, %218 ]
  %221 = phi i32 [ 0, %216 ], [ %228, %218 ]
  %222 = xor i32 %221, -1
  %223 = add i32 %219, %222
  %224 = load i32, ptr %4, align 4, !tbaa !31
  %225 = mul nsw i32 %224, %223
  %226 = sext i32 %225 to i64
  %227 = getelementptr %struct.BPoint, ptr %217, i64 %226
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %220, ptr noundef nonnull align 4 dereferenceable(36) %227, i64 36, i1 false), !tbaa.struct !168
  %228 = add nuw nsw i32 %221, 1
  %229 = getelementptr inbounds %struct.BPoint, ptr %220, i64 1
  %230 = load i32, ptr %2, align 8, !tbaa !23
  %231 = icmp slt i32 %228, %230
  br i1 %231, label %218, label %232, !llvm.loop !469

232:                                              ; preds = %218
  %233 = load i32, ptr %4, align 4, !tbaa !31
  br label %234

234:                                              ; preds = %232, %210
  %235 = phi i32 [ %211, %210 ], [ %233, %232 ]
  %236 = phi i32 [ %212, %210 ], [ %230, %232 ]
  %237 = phi ptr [ %214, %210 ], [ %229, %232 ]
  %238 = add nuw nsw i64 %213, 1
  %239 = sext i32 %235 to i64
  %240 = icmp slt i64 %238, %239
  br i1 %240, label %210, label %241, !llvm.loop !470

241:                                              ; preds = %234, %205, %198
  %242 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  tail call void %242(ptr noundef %202) #20
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #14

declare nofpclass(nan inf) float @ED_view3d_select_dist_px() local_unnamed_addr #6

declare void @ED_view3d_init_mats_rv3d(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @nurbs_foreachScreenVert(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable
define internal void @findnearestNurbvert__doClosest(ptr nocapture noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4, ptr nocapture noundef readonly %5) #15 {
  %7 = icmp eq ptr %2, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.BPoint, ptr %2, i64 0, i32 3
  %10 = load i16, ptr %9, align 4, !tbaa !34
  br label %24

11:                                               ; preds = %6
  switch i32 %4, label %20 [
    i32 0, label %12
    i32 1, label %16
  ]

12:                                               ; preds = %11
  %13 = getelementptr inbounds %struct.BezTriple, ptr %3, i64 0, i32 7
  %14 = load i8, ptr %13, align 1, !tbaa !27
  %15 = zext i8 %14 to i16
  br label %24

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.BezTriple, ptr %3, i64 0, i32 8
  %18 = load i8, ptr %17, align 4, !tbaa !29
  %19 = zext i8 %18 to i16
  br label %24

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.BezTriple, ptr %3, i64 0, i32 9
  %22 = load i8, ptr %21, align 1, !tbaa !30
  %23 = zext i8 %22 to i16
  br label %24

24:                                               ; preds = %12, %20, %16, %8
  %25 = phi i16 [ %10, %8 ], [ %15, %12 ], [ %19, %16 ], [ %23, %20 ]
  %26 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 6
  %27 = load <2 x float>, ptr %26, align 4, !tbaa !40
  %28 = load <2 x float>, ptr %5, align 4, !tbaa !40
  %29 = fsub fast <2 x float> %28, %27
  %30 = tail call fast <2 x float> @llvm.fabs.v2f32(<2 x float> %29)
  %31 = shufflevector <2 x float> %30, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %32 = fadd fast <2 x float> %31, %30
  %33 = extractelement <2 x float> %32, i64 0
  %34 = and i16 %25, 1
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 5
  %37 = load i32, ptr %36, align 8, !tbaa !266
  %38 = icmp eq i32 %37, %35
  %39 = fadd fast float %33, 5.000000e+00
  %40 = select i1 %38, float %39, float %33
  %41 = icmp ne ptr %3, null
  %42 = icmp eq i32 %4, 1
  %43 = and i1 %41, %42
  %44 = fadd fast float %40, 3.000000e+00
  %45 = select i1 %43, float %44, float %40
  %46 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 3
  %47 = load float, ptr %46, align 8, !tbaa !263
  %48 = fcmp fast olt float %45, %47
  br i1 %48, label %49, label %54

49:                                               ; preds = %24
  store float %45, ptr %46, align 8, !tbaa !263
  store ptr %2, ptr %0, align 8, !tbaa !272
  %50 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 1
  store ptr %3, ptr %50, align 8, !tbaa !271
  %51 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 2
  store ptr %1, ptr %51, align 8, !tbaa !270
  %52 = select i1 %41, i32 %4, i32 0
  %53 = getelementptr inbounds %struct.anon.1, ptr %0, i64 0, i32 4
  store i32 %52, ptr %53, align 4, !tbaa !265
  br label %54

54:                                               ; preds = %49, %24
  ret void
}

declare void @mul_m3_v3(ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @ED_view3d_context_rv3d(ptr noundef) local_unnamed_addr #6

declare void @RNA_float_get_array(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @copy_m4_m4(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @unit_m4(ptr noundef) local_unnamed_addr #6

declare ptr @CTX_wm_view3d(ptr noundef) local_unnamed_addr #6

declare void @RNA_float_set_array(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare ptr @ED_view3d_cursor3d_get(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @addvert_Nurb(ptr noundef %0, i16 noundef signext %1, ptr noundef %2) unnamed_addr #5 {
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca ptr, align 8
  %7 = alloca [4 x [4 x float]], align 16
  %8 = tail call ptr @CTX_data_edit_object(ptr noundef %0) #20
  %9 = getelementptr inbounds %struct.Object, ptr %8, i64 0, i32 19
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 4
  %12 = load ptr, ptr %11, align 8, !tbaa !18
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6)
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %7) #20
  %13 = getelementptr inbounds %struct.Object, ptr %8, i64 0, i32 47
  %14 = call zeroext i8 @invert_m4_m4(ptr noundef nonnull %7, ptr noundef nonnull %13) #20
  store ptr null, ptr %5, align 8, !tbaa !36
  store ptr null, ptr %6, align 8, !tbaa !36
  %15 = load ptr, ptr %12, align 8, !tbaa !36
  %16 = icmp eq ptr %15, null
  br i1 %16, label %136, label %17

17:                                               ; preds = %3, %106
  %18 = phi ptr [ %107, %106 ], [ null, %3 ]
  %19 = phi ptr [ %108, %106 ], [ null, %3 ]
  %20 = phi ptr [ %109, %106 ], [ null, %3 ]
  %21 = phi ptr [ %110, %106 ], [ %15, %3 ]
  %22 = getelementptr inbounds %struct.Nurb, ptr %21, i64 0, i32 2
  %23 = load i16, ptr %22, align 8, !tbaa !21
  %24 = icmp eq i16 %23, 1
  %25 = getelementptr inbounds %struct.Nurb, ptr %21, i64 0, i32 6
  %26 = load i32, ptr %25, align 8, !tbaa !23
  br i1 %24, label %27, label %70

27:                                               ; preds = %17
  %28 = icmp eq i32 %26, 0
  br i1 %28, label %106, label %29

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.Nurb, ptr %21, i64 0, i32 18
  %31 = load ptr, ptr %30, align 8, !tbaa !24
  br label %32

32:                                               ; preds = %64, %29
  %33 = phi ptr [ %65, %64 ], [ %18, %29 ]
  %34 = phi ptr [ %66, %64 ], [ %19, %29 ]
  %35 = phi ptr [ %67, %64 ], [ %20, %29 ]
  %36 = phi i32 [ %38, %64 ], [ %26, %29 ]
  %37 = phi ptr [ %68, %64 ], [ %31, %29 ]
  %38 = add nsw i32 %36, -1
  %39 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 7
  %40 = load i8, ptr %39, align 1, !tbaa !27
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %53

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 8
  %45 = load i8, ptr %44, align 4, !tbaa !29
  %46 = and i8 %45, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 0, i32 9
  %50 = load i8, ptr %49, align 1, !tbaa !30
  %51 = and i8 %50, 1
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %64, label %53

53:                                               ; preds = %48, %43, %32
  %54 = icmp eq ptr %35, null
  %55 = icmp eq ptr %35, %21
  %56 = or i1 %54, %55
  br i1 %56, label %57, label %112

57:                                               ; preds = %53
  %58 = icmp eq ptr %34, null
  %59 = icmp eq ptr %33, null
  %60 = select i1 %58, i1 %59, i1 false
  %61 = select i1 %60, ptr %33, ptr null
  %62 = select i1 %60, ptr %37, ptr null
  %63 = select i1 %60, ptr %21, ptr %35
  br label %64

64:                                               ; preds = %57, %48
  %65 = phi ptr [ %33, %48 ], [ %61, %57 ]
  %66 = phi ptr [ %34, %48 ], [ %62, %57 ]
  %67 = phi ptr [ %35, %48 ], [ %63, %57 ]
  %68 = getelementptr inbounds %struct.BezTriple, ptr %37, i64 1
  %69 = icmp eq i32 %38, 0
  br i1 %69, label %106, label %32, !llvm.loop !309

70:                                               ; preds = %17
  %71 = getelementptr inbounds %struct.Nurb, ptr %21, i64 0, i32 7
  %72 = load i32, ptr %71, align 4, !tbaa !31
  %73 = mul nsw i32 %72, %26
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %106, label %75

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.Nurb, ptr %21, i64 0, i32 17
  %77 = load ptr, ptr %76, align 8, !tbaa !32
  br label %78

78:                                               ; preds = %100, %75
  %79 = phi ptr [ %101, %100 ], [ %18, %75 ]
  %80 = phi ptr [ %102, %100 ], [ %19, %75 ]
  %81 = phi ptr [ %103, %100 ], [ %20, %75 ]
  %82 = phi i32 [ %84, %100 ], [ %73, %75 ]
  %83 = phi ptr [ %104, %100 ], [ %77, %75 ]
  %84 = add nsw i32 %82, -1
  %85 = getelementptr inbounds %struct.BPoint, ptr %83, i64 0, i32 3
  %86 = load i16, ptr %85, align 4, !tbaa !34
  %87 = and i16 %86, 1
  %88 = icmp eq i16 %87, 0
  br i1 %88, label %100, label %89

89:                                               ; preds = %78
  %90 = icmp eq ptr %81, null
  %91 = icmp eq ptr %81, %21
  %92 = or i1 %90, %91
  br i1 %92, label %93, label %112

93:                                               ; preds = %89
  %94 = icmp eq ptr %80, null
  %95 = icmp eq ptr %79, null
  %96 = select i1 %94, i1 %95, i1 false
  %97 = select i1 %96, ptr %83, ptr null
  %98 = select i1 %96, ptr %80, ptr null
  %99 = select i1 %96, ptr %21, ptr %81
  br label %100

100:                                              ; preds = %93, %78
  %101 = phi ptr [ %79, %78 ], [ %97, %93 ]
  %102 = phi ptr [ %80, %78 ], [ %98, %93 ]
  %103 = phi ptr [ %81, %78 ], [ %99, %93 ]
  %104 = getelementptr inbounds %struct.BPoint, ptr %83, i64 1
  %105 = icmp eq i32 %84, 0
  br i1 %105, label %106, label %78, !llvm.loop !310

106:                                              ; preds = %100, %64, %70, %27
  %107 = phi ptr [ %18, %70 ], [ %18, %27 ], [ %65, %64 ], [ %101, %100 ]
  %108 = phi ptr [ %19, %70 ], [ %19, %27 ], [ %66, %64 ], [ %102, %100 ]
  %109 = phi ptr [ %20, %70 ], [ %20, %27 ], [ %67, %64 ], [ %103, %100 ]
  %110 = load ptr, ptr %21, align 8, !tbaa !36
  %111 = icmp eq ptr %110, null
  br i1 %111, label %120, label %17, !llvm.loop !311

112:                                              ; preds = %89, %53
  %113 = phi ptr [ %35, %53 ], [ %81, %89 ]
  %114 = phi ptr [ %34, %53 ], [ %80, %89 ]
  %115 = phi ptr [ %33, %53 ], [ %79, %89 ]
  %116 = phi ptr [ %4, %53 ], [ %6, %89 ]
  %117 = phi ptr [ %6, %53 ], [ %5, %89 ]
  %118 = phi ptr [ %5, %53 ], [ %4, %89 ]
  store ptr %113, ptr %4, align 8, !tbaa !36
  store ptr %114, ptr %5, align 8, !tbaa !36
  store ptr %115, ptr %6, align 8
  store ptr null, ptr %116, align 8, !tbaa !36
  store ptr null, ptr %117, align 8, !tbaa !36
  store ptr null, ptr %118, align 8, !tbaa !36
  %119 = load ptr, ptr %4, align 8, !tbaa !36
  br label %121

120:                                              ; preds = %106
  store ptr %109, ptr %4, align 8, !tbaa !36
  store ptr %108, ptr %5, align 8, !tbaa !36
  store ptr %107, ptr %6, align 8
  br label %121

121:                                              ; preds = %120, %112
  %122 = phi ptr [ %109, %120 ], [ %119, %112 ]
  %123 = icmp eq ptr %122, null
  br i1 %123, label %136, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 2
  %126 = load i16, ptr %125, align 8, !tbaa !21
  %127 = icmp eq i16 %126, 1
  %128 = load ptr, ptr %5, align 8
  %129 = icmp eq ptr %128, null
  %130 = select i1 %127, i1 %129, i1 false
  br i1 %130, label %136, label %131

131:                                              ; preds = %124
  %132 = icmp ne i16 %126, 1
  %133 = load ptr, ptr %6, align 8
  %134 = icmp eq ptr %133, null
  %135 = select i1 %132, i1 %134, i1 false
  br i1 %135, label %136, label %216

136:                                              ; preds = %3, %131, %124, %121
  %137 = phi ptr [ null, %3 ], [ %122, %131 ], [ %122, %124 ], [ null, %121 ]
  %138 = icmp eq i16 %1, 101
  br i1 %138, label %614, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 31
  %141 = load i32, ptr %140, align 4, !tbaa !173
  %142 = icmp eq i32 %141, -1
  br i1 %142, label %145, label %143

143:                                              ; preds = %139
  %144 = call ptr @BLI_findlink(ptr noundef nonnull %12, i32 noundef %141) #20
  br label %145

145:                                              ; preds = %139, %143
  %146 = phi ptr [ %144, %143 ], [ %137, %139 ]
  %147 = icmp eq ptr %146, null
  br i1 %147, label %152, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.Nurb, ptr %146, i64 0, i32 2
  %150 = load i16, ptr %149, align 8, !tbaa !21
  %151 = icmp eq i16 %150, 1
  br i1 %151, label %152, label %197

152:                                              ; preds = %148, %145
  %153 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %154 = call ptr %153(i64 noundef 72, ptr noundef nonnull @.str.214) #20
  %155 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 3
  store float 1.000000e+00, ptr %155, align 4, !tbaa !184
  %156 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 1
  store float 0.000000e+00, ptr %156, align 4, !tbaa !95
  %157 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 7
  %158 = load i8, ptr %157, align 1, !tbaa !27
  %159 = or i8 %158, 1
  store i8 %159, ptr %157, align 1, !tbaa !27
  %160 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 8
  %161 = load i8, ptr %160, align 4, !tbaa !29
  %162 = or i8 %161, 1
  store i8 %162, ptr %160, align 4, !tbaa !29
  %163 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 9
  %164 = load i8, ptr %163, align 1, !tbaa !30
  %165 = or i8 %164, 1
  store i8 %165, ptr %163, align 1, !tbaa !30
  %166 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 5
  store i8 1, ptr %166, align 1, !tbaa !471
  %167 = getelementptr inbounds %struct.BezTriple, ptr %154, i64 0, i32 6
  store i8 1, ptr %167, align 2, !tbaa !472
  %168 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %169 = call ptr %168(i64 noundef 88, ptr noundef nonnull @.str.215) #20
  br i1 %147, label %170, label %178

170:                                              ; preds = %152
  %171 = getelementptr inbounds %struct.Nurb, ptr %169, i64 0, i32 2
  store i16 1, ptr %171, align 8, !tbaa !21
  %172 = getelementptr inbounds %struct.Curve, ptr %10, i64 0, i32 27
  %173 = load i16, ptr %172, align 4, !tbaa !473
  %174 = getelementptr inbounds %struct.Nurb, ptr %169, i64 0, i32 9
  store i16 %173, ptr %174, align 4, !tbaa !474
  %175 = getelementptr inbounds %struct.Nurb, ptr %169, i64 0, i32 5
  %176 = load i16, ptr %175, align 2, !tbaa !364
  %177 = or i16 %176, 1
  store i16 %177, ptr %175, align 2, !tbaa !364
  br label %179

178:                                              ; preds = %152
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %169, ptr noundef nonnull align 8 dereferenceable(88) %146, i64 88, i1 false)
  br label %179

179:                                              ; preds = %178, %170
  call void @BLI_addtail(ptr noundef nonnull %12, ptr noundef nonnull %169) #20
  %180 = getelementptr inbounds %struct.Nurb, ptr %169, i64 0, i32 18
  store ptr %154, ptr %180, align 8, !tbaa !24
  %181 = getelementptr inbounds %struct.Nurb, ptr %169, i64 0, i32 6
  store i32 1, ptr %181, align 8, !tbaa !23
  %182 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 1
  %183 = load float, ptr %2, align 4, !tbaa !40
  store float %183, ptr %182, align 4, !tbaa !40
  %184 = getelementptr inbounds float, ptr %2, i64 1
  %185 = load float, ptr %184, align 4, !tbaa !40
  %186 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 1, i64 1
  store float %185, ptr %186, align 4, !tbaa !40
  %187 = getelementptr inbounds float, ptr %2, i64 2
  %188 = load float, ptr %187, align 4, !tbaa !40
  %189 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 1, i64 2
  store float %188, ptr %189, align 4, !tbaa !40
  %190 = fadd fast float %183, -1.000000e+00
  store float %190, ptr %154, align 4, !tbaa !40
  %191 = getelementptr inbounds float, ptr %154, i64 1
  store float %185, ptr %191, align 4, !tbaa !40
  %192 = getelementptr inbounds float, ptr %154, i64 2
  store float %188, ptr %192, align 4, !tbaa !40
  %193 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 2
  %194 = fadd fast float %183, 1.000000e+00
  store float %194, ptr %193, align 4, !tbaa !40
  %195 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 2, i64 1
  store float %185, ptr %195, align 4, !tbaa !40
  %196 = getelementptr inbounds [3 x [3 x float]], ptr %154, i64 0, i64 2, i64 2
  store float %188, ptr %196, align 4, !tbaa !40
  call void @mul_m4_v3(ptr noundef nonnull %7, ptr noundef nonnull %154) #20
  call void @mul_m4_v3(ptr noundef nonnull %7, ptr noundef nonnull %182) #20
  call void @mul_m4_v3(ptr noundef nonnull %7, ptr noundef nonnull %193) #20
  store ptr %169, ptr %4, align 8, !tbaa !36
  br label %579

197:                                              ; preds = %148
  %198 = getelementptr inbounds %struct.Nurb, ptr %146, i64 0, i32 7
  %199 = load i32, ptr %198, align 4, !tbaa !31
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %201, label %614

201:                                              ; preds = %197
  %202 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %203 = call ptr %202(i64 noundef 36, ptr noundef nonnull @.str.216) #20
  %204 = getelementptr inbounds %struct.BPoint, ptr %203, i64 0, i32 5
  store float 1.000000e+00, ptr %204, align 4, !tbaa !186
  %205 = getelementptr inbounds %struct.BPoint, ptr %203, i64 0, i32 1
  store float 0.000000e+00, ptr %205, align 4, !tbaa !97
  %206 = getelementptr inbounds %struct.BPoint, ptr %203, i64 0, i32 3
  %207 = load i16, ptr %206, align 4, !tbaa !34
  %208 = or i16 %207, 1
  store i16 %208, ptr %206, align 4, !tbaa !34
  %209 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %210 = call ptr %209(i64 noundef 88, ptr noundef nonnull @.str.215) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %210, ptr noundef nonnull align 8 dereferenceable(88) %146, i64 88, i1 false)
  call void @BLI_addtail(ptr noundef nonnull %12, ptr noundef %210) #20
  %211 = getelementptr inbounds %struct.Nurb, ptr %210, i64 0, i32 17
  store ptr %203, ptr %211, align 8, !tbaa !32
  %212 = getelementptr inbounds %struct.Nurb, ptr %210, i64 0, i32 11
  store i16 2, ptr %212, align 8, !tbaa !38
  %213 = getelementptr inbounds %struct.Nurb, ptr %210, i64 0, i32 6
  store i32 1, ptr %213, align 8, !tbaa !23
  call void @mul_v3_m4v3(ptr noundef %203, ptr noundef nonnull %7, ptr noundef %2) #20
  %214 = getelementptr inbounds [4 x float], ptr %203, i64 0, i64 3
  store float 1.000000e+00, ptr %214, align 4, !tbaa !40
  %215 = getelementptr inbounds %struct.Nurb, ptr %210, i64 0, i32 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %215, i8 0, i64 16, i1 false)
  call void @BKE_nurb_knot_calc_u(ptr noundef %210) #20
  store ptr %210, ptr %4, align 8, !tbaa !36
  br label %579

216:                                              ; preds = %131
  br i1 %127, label %217, label %485

217:                                              ; preds = %216
  %218 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 18
  %219 = load ptr, ptr %218, align 8, !tbaa !24
  %220 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 6
  %221 = load i32, ptr %220, align 8, !tbaa !23
  %222 = add nsw i32 %221, -1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds %struct.BezTriple, ptr %219, i64 %223
  %225 = icmp eq ptr %128, %224
  br i1 %225, label %226, label %296

226:                                              ; preds = %217
  %227 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 7
  %228 = load i8, ptr %227, align 1, !tbaa !27
  %229 = and i8 %228, -2
  store i8 %229, ptr %227, align 1, !tbaa !27
  %230 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 8
  %231 = load i8, ptr %230, align 4, !tbaa !29
  %232 = and i8 %231, -2
  store i8 %232, ptr %230, align 4, !tbaa !29
  %233 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 9
  %234 = load i8, ptr %233, align 1, !tbaa !30
  %235 = and i8 %234, -2
  store i8 %235, ptr %233, align 1, !tbaa !30
  %236 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %237 = add nsw i32 %221, 1
  %238 = sext i32 %237 to i64
  %239 = mul nsw i64 %238, 72
  %240 = call ptr %236(i64 noundef %239, ptr noundef nonnull @.str.214) #20
  %241 = load ptr, ptr %218, align 8, !tbaa !24
  %242 = load i32, ptr %220, align 8, !tbaa !23
  %243 = sext i32 %242 to i64
  %244 = mul nsw i64 %243, 72
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %240, ptr align 4 %241, i64 %244, i1 false)
  %245 = getelementptr %struct.EditNurb, ptr %12, i64 0, i32 1
  %246 = load ptr, ptr %245, align 8, !tbaa !47
  %247 = icmp ne ptr %246, null
  %248 = icmp sgt i32 %242, 0
  %249 = and i1 %248, %247
  br i1 %249, label %250, label %264

250:                                              ; preds = %226, %259
  %251 = phi ptr [ %261, %259 ], [ %241, %226 ]
  %252 = phi i32 [ %262, %259 ], [ 0, %226 ]
  %253 = phi ptr [ %260, %259 ], [ %240, %226 ]
  %254 = load ptr, ptr %245, align 8, !tbaa !47
  %255 = call ptr @BLI_ghash_popkey(ptr noundef %254, ptr noundef %251, ptr noundef null) #20
  %256 = icmp eq ptr %255, null
  br i1 %256, label %259, label %257

257:                                              ; preds = %250
  %258 = load ptr, ptr %245, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %258, ptr noundef %253, ptr noundef nonnull %255) #20
  br label %259

259:                                              ; preds = %257, %250
  %260 = getelementptr inbounds i8, ptr %253, i64 72
  %261 = getelementptr inbounds i8, ptr %251, i64 72
  %262 = add nuw nsw i32 %252, 1
  %263 = icmp eq i32 %262, %242
  br i1 %263, label %264, label %250, !llvm.loop !157

264:                                              ; preds = %259, %226
  %265 = load i32, ptr %220, align 8, !tbaa !23
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %266
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %267, ptr noundef nonnull align 4 dereferenceable(72) %128, i64 72, i1 false), !tbaa.struct !475
  %268 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1
  %269 = load float, ptr %268, align 4, !tbaa !40
  %270 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1, i64 1
  %271 = load <2 x float>, ptr %270, align 4, !tbaa !40
  %272 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %273 = load ptr, ptr %218, align 8, !tbaa !24
  call void %272(ptr noundef %273) #20
  store ptr %240, ptr %218, align 8, !tbaa !24
  %274 = load i32, ptr %220, align 8, !tbaa !23
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275
  %277 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275, i32 7
  %278 = load i8, ptr %277, align 1, !tbaa !27
  %279 = or i8 %278, 1
  store i8 %279, ptr %277, align 1, !tbaa !27
  %280 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275, i32 8
  %281 = load i8, ptr %280, align 4, !tbaa !29
  %282 = or i8 %281, 1
  store i8 %282, ptr %280, align 4, !tbaa !29
  %283 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275, i32 9
  %284 = load i8, ptr %283, align 1, !tbaa !30
  %285 = or i8 %284, 1
  store i8 %285, ptr %283, align 1, !tbaa !30
  %286 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275, i32 6
  %287 = load i8, ptr %286, align 2, !tbaa !472
  %288 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %275, i32 5
  store i8 %287, ptr %288, align 1, !tbaa !471
  %289 = add nsw i32 %274, -1
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds %struct.BezTriple, ptr %240, i64 %290
  store ptr %291, ptr %5, align 8, !tbaa !36
  %292 = icmp sgt i32 %274, 1
  %293 = getelementptr inbounds %struct.BezTriple, ptr %276, i64 -1
  %294 = select i1 %292, ptr %293, ptr null
  %295 = select i1 %292, ptr %276, ptr null
  br label %394

296:                                              ; preds = %217
  %297 = icmp eq ptr %128, %219
  br i1 %297, label %298, label %359

298:                                              ; preds = %296
  %299 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 7
  %300 = load i8, ptr %299, align 1, !tbaa !27
  %301 = and i8 %300, -2
  store i8 %301, ptr %299, align 1, !tbaa !27
  %302 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 8
  %303 = load i8, ptr %302, align 4, !tbaa !29
  %304 = and i8 %303, -2
  store i8 %304, ptr %302, align 4, !tbaa !29
  %305 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 9
  %306 = load i8, ptr %305, align 1, !tbaa !30
  %307 = and i8 %306, -2
  store i8 %307, ptr %305, align 1, !tbaa !30
  %308 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %309 = add nsw i32 %221, 1
  %310 = sext i32 %309 to i64
  %311 = mul nsw i64 %310, 72
  %312 = call ptr %308(i64 noundef %311, ptr noundef nonnull @.str.214) #20
  %313 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 1
  %314 = load i32, ptr %220, align 8, !tbaa !23
  %315 = sext i32 %314 to i64
  %316 = mul nsw i64 %315, 72
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 4 %313, ptr align 4 %128, i64 %316, i1 false)
  %317 = getelementptr %struct.EditNurb, ptr %12, i64 0, i32 1
  %318 = load ptr, ptr %317, align 8, !tbaa !47
  %319 = icmp ne ptr %318, null
  %320 = icmp sgt i32 %314, 0
  %321 = and i1 %320, %319
  br i1 %321, label %322, label %336

322:                                              ; preds = %298, %331
  %323 = phi ptr [ %333, %331 ], [ %128, %298 ]
  %324 = phi i32 [ %334, %331 ], [ 0, %298 ]
  %325 = phi ptr [ %332, %331 ], [ %313, %298 ]
  %326 = load ptr, ptr %317, align 8, !tbaa !47
  %327 = call ptr @BLI_ghash_popkey(ptr noundef %326, ptr noundef nonnull %323, ptr noundef null) #20
  %328 = icmp eq ptr %327, null
  br i1 %328, label %331, label %329

329:                                              ; preds = %322
  %330 = load ptr, ptr %317, align 8, !tbaa !47
  call void @BLI_ghash_insert(ptr noundef %330, ptr noundef nonnull %325, ptr noundef nonnull %327) #20
  br label %331

331:                                              ; preds = %329, %322
  %332 = getelementptr inbounds i8, ptr %325, i64 72
  %333 = getelementptr inbounds i8, ptr %323, i64 72
  %334 = add nuw nsw i32 %324, 1
  %335 = icmp eq i32 %334, %314
  br i1 %335, label %336, label %322, !llvm.loop !157

336:                                              ; preds = %331, %298
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %312, ptr noundef nonnull align 4 dereferenceable(72) %128, i64 72, i1 false), !tbaa.struct !475
  %337 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 0, i32 7
  %338 = load i8, ptr %337, align 1, !tbaa !27
  %339 = or i8 %338, 1
  store i8 %339, ptr %337, align 1, !tbaa !27
  %340 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 0, i32 8
  %341 = load i8, ptr %340, align 4, !tbaa !29
  %342 = or i8 %341, 1
  store i8 %342, ptr %340, align 4, !tbaa !29
  %343 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 0, i32 9
  %344 = load i8, ptr %343, align 1, !tbaa !30
  %345 = or i8 %344, 1
  store i8 %345, ptr %343, align 1, !tbaa !30
  %346 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 0, i32 5
  %347 = load i8, ptr %346, align 1, !tbaa !471
  %348 = getelementptr inbounds %struct.BezTriple, ptr %312, i64 0, i32 6
  store i8 %347, ptr %348, align 2, !tbaa !472
  %349 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1
  %350 = load float, ptr %349, align 4, !tbaa !40
  %351 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1, i64 1
  %352 = load <2 x float>, ptr %351, align 4, !tbaa !40
  %353 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %354 = load ptr, ptr %218, align 8, !tbaa !24
  call void %353(ptr noundef %354) #20
  store ptr %312, ptr %218, align 8, !tbaa !24
  store ptr %313, ptr %5, align 8, !tbaa !36
  %355 = load i32, ptr %220, align 8, !tbaa !23
  %356 = icmp sgt i32 %355, 1
  %357 = select i1 %356, ptr %312, ptr null
  %358 = select i1 %356, ptr %313, ptr null
  br label %394

359:                                              ; preds = %296
  %360 = icmp eq i16 %1, 101
  br i1 %360, label %614, label %361

361:                                              ; preds = %359
  %362 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 7
  %363 = load i8, ptr %362, align 1, !tbaa !27
  %364 = and i8 %363, -2
  store i8 %364, ptr %362, align 1, !tbaa !27
  %365 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 8
  %366 = load i8, ptr %365, align 4, !tbaa !29
  %367 = and i8 %366, -2
  store i8 %367, ptr %365, align 4, !tbaa !29
  %368 = getelementptr inbounds %struct.BezTriple, ptr %128, i64 0, i32 9
  %369 = load i8, ptr %368, align 1, !tbaa !30
  %370 = and i8 %369, -2
  store i8 %370, ptr %368, align 1, !tbaa !30
  %371 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %372 = call ptr %371(i64 noundef 72, ptr noundef nonnull @.str.214) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(72) %372, ptr noundef nonnull align 4 dereferenceable(72) %128, i64 72, i1 false), !tbaa.struct !475
  %373 = getelementptr inbounds %struct.BezTriple, ptr %372, i64 0, i32 7
  %374 = load i8, ptr %373, align 1, !tbaa !27
  %375 = or i8 %374, 1
  store i8 %375, ptr %373, align 1, !tbaa !27
  %376 = getelementptr inbounds %struct.BezTriple, ptr %372, i64 0, i32 8
  %377 = load i8, ptr %376, align 4, !tbaa !29
  %378 = or i8 %377, 1
  store i8 %378, ptr %376, align 4, !tbaa !29
  %379 = getelementptr inbounds %struct.BezTriple, ptr %372, i64 0, i32 9
  %380 = load i8, ptr %379, align 1, !tbaa !30
  %381 = or i8 %380, 1
  store i8 %381, ptr %379, align 1, !tbaa !30
  %382 = getelementptr inbounds %struct.BezTriple, ptr %372, i64 0, i32 5
  %383 = load i8, ptr %382, align 1, !tbaa !471
  %384 = getelementptr inbounds %struct.BezTriple, ptr %372, i64 0, i32 6
  store i8 %383, ptr %384, align 2, !tbaa !472
  %385 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1
  %386 = load float, ptr %385, align 4, !tbaa !40
  %387 = getelementptr inbounds [3 x [3 x float]], ptr %128, i64 0, i64 1, i64 1
  %388 = load <2 x float>, ptr %387, align 4, !tbaa !40
  %389 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %390 = call ptr %389(i64 noundef 88, ptr noundef nonnull @.str.215) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %390, ptr noundef nonnull align 8 dereferenceable(88) %122, i64 88, i1 false)
  call void @BLI_addtail(ptr noundef nonnull %12, ptr noundef %390) #20
  %391 = getelementptr inbounds %struct.Nurb, ptr %390, i64 0, i32 18
  store ptr %372, ptr %391, align 8, !tbaa !24
  %392 = getelementptr inbounds %struct.Nurb, ptr %390, i64 0, i32 6
  store i32 1, ptr %392, align 8, !tbaa !23
  store ptr %390, ptr %4, align 8, !tbaa !36
  store ptr %372, ptr %5, align 8, !tbaa !36
  %393 = getelementptr inbounds [3 x [3 x float]], ptr %372, i64 0, i64 1
  call void @mul_v3_m4v3(ptr noundef nonnull %393, ptr noundef nonnull %7, ptr noundef %2) #20
  br label %440

394:                                              ; preds = %264, %336
  %395 = phi i32 [ %274, %264 ], [ %355, %336 ]
  %396 = phi ptr [ %291, %264 ], [ %313, %336 ]
  %397 = phi float [ %269, %264 ], [ %350, %336 ]
  %398 = phi ptr [ %276, %264 ], [ %312, %336 ]
  %399 = phi ptr [ %294, %264 ], [ null, %336 ]
  %400 = phi ptr [ %295, %264 ], [ %357, %336 ]
  %401 = phi ptr [ null, %264 ], [ %358, %336 ]
  %402 = phi <2 x float> [ %271, %264 ], [ %352, %336 ]
  %403 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 6
  %404 = add nsw i32 %395, 1
  store i32 %404, ptr %403, align 8, !tbaa !23
  %405 = icmp eq i16 %1, 101
  br i1 %405, label %406, label %432

406:                                              ; preds = %394
  %407 = load float, ptr %396, align 4, !tbaa !40
  store float %407, ptr %398, align 4, !tbaa !40
  %408 = getelementptr inbounds float, ptr %396, i64 1
  %409 = load float, ptr %408, align 4, !tbaa !40
  %410 = getelementptr inbounds float, ptr %398, i64 1
  store float %409, ptr %410, align 4, !tbaa !40
  %411 = getelementptr inbounds float, ptr %396, i64 2
  %412 = load float, ptr %411, align 4, !tbaa !40
  %413 = getelementptr inbounds float, ptr %398, i64 2
  store float %412, ptr %413, align 4, !tbaa !40
  %414 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 1
  %415 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 1
  %416 = load float, ptr %415, align 4, !tbaa !40
  store float %416, ptr %414, align 4, !tbaa !40
  %417 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 1, i64 1
  %418 = load float, ptr %417, align 4, !tbaa !40
  %419 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 1, i64 1
  store float %418, ptr %419, align 4, !tbaa !40
  %420 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 1, i64 2
  %421 = load float, ptr %420, align 4, !tbaa !40
  %422 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 1, i64 2
  store float %421, ptr %422, align 4, !tbaa !40
  %423 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 2
  %424 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 2
  %425 = load float, ptr %424, align 4, !tbaa !40
  store float %425, ptr %423, align 4, !tbaa !40
  %426 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 2, i64 1
  %427 = load float, ptr %426, align 4, !tbaa !40
  %428 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 2, i64 1
  store float %427, ptr %428, align 4, !tbaa !40
  %429 = getelementptr inbounds [3 x [3 x float]], ptr %396, i64 0, i64 2, i64 2
  %430 = load float, ptr %429, align 4, !tbaa !40
  %431 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 2, i64 2
  store float %430, ptr %431, align 4, !tbaa !40
  br label %579

432:                                              ; preds = %394
  %433 = getelementptr inbounds [3 x [3 x float]], ptr %398, i64 0, i64 1
  call void @mul_v3_m4v3(ptr noundef nonnull %433, ptr noundef nonnull %7, ptr noundef %2) #20
  %434 = icmp eq ptr %400, null
  br i1 %434, label %440, label %435

435:                                              ; preds = %432
  %436 = getelementptr inbounds %struct.BezTriple, ptr %400, i64 0, i32 5
  %437 = load i8, ptr %436, align 1, !tbaa !471
  %438 = getelementptr inbounds %struct.BezTriple, ptr %400, i64 0, i32 6
  %439 = load i8, ptr %438, align 2, !tbaa !472
  store i8 1, ptr %438, align 2, !tbaa !472
  store i8 1, ptr %436, align 1, !tbaa !471
  call void @BKE_nurb_handle_calc(ptr noundef nonnull %400, ptr noundef %399, ptr noundef %401, i8 noundef zeroext 0) #20
  store i8 %437, ptr %436, align 1, !tbaa !471
  store i8 %439, ptr %438, align 2, !tbaa !472
  br label %482

440:                                              ; preds = %432, %361
  %441 = phi ptr [ %393, %361 ], [ %433, %432 ]
  %442 = phi i1 [ false, %361 ], [ true, %432 ]
  %443 = phi ptr [ %390, %361 ], [ null, %432 ]
  %444 = phi ptr [ %372, %361 ], [ %398, %432 ]
  %445 = phi float [ %386, %361 ], [ %397, %432 ]
  %446 = phi ptr [ %372, %361 ], [ %396, %432 ]
  %447 = phi ptr [ %390, %361 ], [ %122, %432 ]
  %448 = phi <2 x float> [ %388, %361 ], [ %402, %432 ]
  %449 = getelementptr inbounds [3 x [3 x float]], ptr %444, i64 0, i64 1, i64 2
  %450 = load float, ptr %449, align 4, !tbaa !40
  %451 = extractelement <2 x float> %448, i64 1
  %452 = fsub fast float %450, %451
  %453 = getelementptr inbounds [3 x [3 x float]], ptr %444, i64 0, i64 1, i64 1
  %454 = load float, ptr %453, align 4, !tbaa !40
  %455 = extractelement <2 x float> %448, i64 0
  %456 = fsub fast float %454, %455
  %457 = load float, ptr %441, align 4, !tbaa !40
  %458 = fsub fast float %457, %445
  %459 = load float, ptr %446, align 4, !tbaa !40
  %460 = fadd fast float %459, %458
  store float %460, ptr %444, align 4, !tbaa !40
  %461 = getelementptr inbounds float, ptr %446, i64 1
  %462 = load float, ptr %461, align 4, !tbaa !40
  %463 = fadd fast float %462, %456
  %464 = getelementptr inbounds float, ptr %444, i64 1
  store float %463, ptr %464, align 4, !tbaa !40
  %465 = getelementptr inbounds float, ptr %446, i64 2
  %466 = load float, ptr %465, align 4, !tbaa !40
  %467 = fadd fast float %466, %452
  %468 = getelementptr inbounds float, ptr %444, i64 2
  store float %467, ptr %468, align 4, !tbaa !40
  %469 = getelementptr inbounds [3 x [3 x float]], ptr %444, i64 0, i64 2
  %470 = getelementptr inbounds [3 x [3 x float]], ptr %446, i64 0, i64 2
  %471 = load float, ptr %470, align 4, !tbaa !40
  %472 = fadd fast float %471, %458
  store float %472, ptr %469, align 4, !tbaa !40
  %473 = getelementptr inbounds [3 x [3 x float]], ptr %446, i64 0, i64 2, i64 1
  %474 = load float, ptr %473, align 4, !tbaa !40
  %475 = fadd fast float %474, %456
  %476 = getelementptr inbounds [3 x [3 x float]], ptr %444, i64 0, i64 2, i64 1
  store float %475, ptr %476, align 4, !tbaa !40
  %477 = getelementptr inbounds [3 x [3 x float]], ptr %446, i64 0, i64 2, i64 2
  %478 = load float, ptr %477, align 4, !tbaa !40
  %479 = fadd fast float %478, %452
  %480 = getelementptr inbounds [3 x [3 x float]], ptr %444, i64 0, i64 2, i64 2
  store float %479, ptr %480, align 4, !tbaa !40
  br i1 %442, label %482, label %481

481:                                              ; preds = %440
  call void @BKE_nurb_handles_calc(ptr noundef nonnull %443) #20
  br label %579

482:                                              ; preds = %435, %440
  %483 = phi ptr [ %122, %435 ], [ %447, %440 ]
  %484 = phi ptr [ %398, %435 ], [ %444, %440 ]
  call void @BKE_nurb_handles_calc(ptr noundef nonnull %483) #20
  br label %579

485:                                              ; preds = %216
  %486 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 7
  %487 = load i32, ptr %486, align 4, !tbaa !31
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %489, label %614

489:                                              ; preds = %485
  %490 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 17
  %491 = load ptr, ptr %490, align 8, !tbaa !32
  %492 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 6
  %493 = load i32, ptr %492, align 8, !tbaa !23
  %494 = add nsw i32 %493, -1
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds %struct.BPoint, ptr %491, i64 %495
  %497 = icmp eq ptr %133, %496
  br i1 %497, label %498, label %519

498:                                              ; preds = %489
  %499 = getelementptr inbounds %struct.BPoint, ptr %133, i64 0, i32 3
  store i16 0, ptr %499, align 4, !tbaa !34
  %500 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %501 = add nsw i32 %493, 1
  %502 = sext i32 %501 to i64
  %503 = mul nsw i64 %502, 36
  %504 = call ptr %500(i64 noundef %503, ptr noundef nonnull @.str.217) #20
  %505 = load ptr, ptr %490, align 8, !tbaa !32
  %506 = load i32, ptr %492, align 8, !tbaa !23
  call void @ED_curve_bpcpy(ptr noundef nonnull %12, ptr noundef %504, ptr noundef %505, i32 noundef %506)
  %507 = load i32, ptr %492, align 8, !tbaa !23
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds %struct.BPoint, ptr %504, i64 %508
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %509, ptr noundef nonnull align 4 dereferenceable(36) %133, i64 36, i1 false), !tbaa.struct !168
  %510 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %511 = load ptr, ptr %490, align 8, !tbaa !32
  call void %510(ptr noundef %511) #20
  store ptr %504, ptr %490, align 8, !tbaa !32
  %512 = load i32, ptr %492, align 8, !tbaa !23
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds %struct.BPoint, ptr %504, i64 %513
  %515 = getelementptr inbounds %struct.BPoint, ptr %504, i64 %513, i32 3
  %516 = load i16, ptr %515, align 4, !tbaa !34
  %517 = or i16 %516, 1
  store i16 %517, ptr %515, align 4, !tbaa !34
  %518 = getelementptr inbounds %struct.BPoint, ptr %514, i64 -1
  br label %537

519:                                              ; preds = %489
  %520 = icmp eq ptr %133, %491
  br i1 %520, label %521, label %535

521:                                              ; preds = %519
  %522 = getelementptr inbounds %struct.BPoint, ptr %133, i64 0, i32 3
  store i16 0, ptr %522, align 4, !tbaa !34
  %523 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %524 = add nsw i32 %493, 1
  %525 = sext i32 %524 to i64
  %526 = mul nsw i64 %525, 36
  %527 = call ptr %523(i64 noundef %526, ptr noundef nonnull @.str.218) #20
  %528 = getelementptr inbounds %struct.BPoint, ptr %527, i64 1
  %529 = load i32, ptr %492, align 8, !tbaa !23
  call void @ED_curve_bpcpy(ptr noundef nonnull %12, ptr noundef nonnull %528, ptr noundef %133, i32 noundef %529)
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %527, ptr noundef nonnull align 4 dereferenceable(36) %133, i64 36, i1 false), !tbaa.struct !168
  %530 = getelementptr inbounds %struct.BPoint, ptr %527, i64 0, i32 3
  %531 = load i16, ptr %530, align 4, !tbaa !34
  %532 = or i16 %531, 1
  store i16 %532, ptr %530, align 4, !tbaa !34
  %533 = load ptr, ptr @MEM_freeN, align 8, !tbaa !36
  %534 = load ptr, ptr %490, align 8, !tbaa !32
  call void %533(ptr noundef %534) #20
  store ptr %527, ptr %490, align 8, !tbaa !32
  br label %537

535:                                              ; preds = %519
  %536 = icmp eq i16 %1, 101
  br i1 %536, label %614, label %565

537:                                              ; preds = %521, %498
  %538 = phi ptr [ %528, %521 ], [ %518, %498 ]
  %539 = phi ptr [ %527, %521 ], [ %514, %498 ]
  store ptr %538, ptr %6, align 8, !tbaa !36
  %540 = icmp eq i16 %1, 101
  br i1 %540, label %541, label %549

541:                                              ; preds = %537
  %542 = load float, ptr %538, align 4, !tbaa !40
  store float %542, ptr %539, align 4, !tbaa !40
  %543 = getelementptr inbounds float, ptr %538, i64 1
  %544 = load float, ptr %543, align 4, !tbaa !40
  %545 = getelementptr inbounds float, ptr %539, i64 1
  store float %544, ptr %545, align 4, !tbaa !40
  %546 = getelementptr inbounds float, ptr %538, i64 2
  %547 = load float, ptr %546, align 4, !tbaa !40
  %548 = getelementptr inbounds float, ptr %539, i64 2
  store float %547, ptr %548, align 4, !tbaa !40
  br label %561

549:                                              ; preds = %537
  call void @mul_v3_m4v3(ptr noundef nonnull %539, ptr noundef nonnull %7, ptr noundef %2) #20
  %550 = getelementptr inbounds [4 x float], ptr %539, i64 0, i64 3
  store float 1.000000e+00, ptr %550, align 4, !tbaa !40
  %551 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 11
  %552 = load i16, ptr %551, align 8, !tbaa !38
  %553 = icmp slt i16 %552, 4
  br i1 %553, label %554, label %561

554:                                              ; preds = %549
  %555 = sext i16 %552 to i32
  %556 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 6
  %557 = load i32, ptr %556, align 8, !tbaa !23
  %558 = icmp slt i32 %557, %555
  br i1 %558, label %561, label %559

559:                                              ; preds = %554
  %560 = add nsw i16 %552, 1
  store i16 %560, ptr %551, align 8, !tbaa !38
  br label %561

561:                                              ; preds = %559, %554, %549, %541
  %562 = getelementptr inbounds %struct.Nurb, ptr %122, i64 0, i32 6
  %563 = load i32, ptr %562, align 8, !tbaa !23
  %564 = add nsw i32 %563, 1
  store i32 %564, ptr %562, align 8, !tbaa !23
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %122) #20
  br label %579

565:                                              ; preds = %535
  %566 = getelementptr inbounds %struct.BPoint, ptr %133, i64 0, i32 3
  store i16 0, ptr %566, align 4, !tbaa !34
  %567 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %568 = call ptr %567(i64 noundef 36, ptr noundef nonnull @.str.216) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 4 dereferenceable(36) %568, ptr noundef nonnull align 4 dereferenceable(36) %133, i64 36, i1 false), !tbaa.struct !168
  %569 = getelementptr inbounds %struct.BPoint, ptr %568, i64 0, i32 3
  %570 = load i16, ptr %569, align 4, !tbaa !34
  %571 = or i16 %570, 1
  store i16 %571, ptr %569, align 4, !tbaa !34
  %572 = load ptr, ptr @MEM_mallocN, align 8, !tbaa !36
  %573 = call ptr %572(i64 noundef 88, ptr noundef nonnull @.str.215) #20
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(88) %573, ptr noundef nonnull align 8 dereferenceable(88) %122, i64 88, i1 false)
  call void @BLI_addtail(ptr noundef nonnull %12, ptr noundef %573) #20
  %574 = getelementptr inbounds %struct.Nurb, ptr %573, i64 0, i32 17
  store ptr %568, ptr %574, align 8, !tbaa !32
  %575 = getelementptr inbounds %struct.Nurb, ptr %573, i64 0, i32 11
  store i16 2, ptr %575, align 8, !tbaa !38
  %576 = getelementptr inbounds %struct.Nurb, ptr %573, i64 0, i32 6
  store i32 1, ptr %576, align 8, !tbaa !23
  %577 = getelementptr inbounds %struct.Nurb, ptr %573, i64 0, i32 15
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %577, i8 0, i64 16, i1 false)
  store ptr %573, ptr %4, align 8, !tbaa !36
  store ptr %568, ptr %6, align 8, !tbaa !36
  call void @mul_v3_m4v3(ptr noundef nonnull %568, ptr noundef nonnull %7, ptr noundef %2) #20
  %578 = getelementptr inbounds [4 x float], ptr %568, i64 0, i64 3
  store float 1.000000e+00, ptr %578, align 4, !tbaa !40
  call void @BKE_nurb_knot_calc_u(ptr noundef nonnull %573) #20
  br label %579

579:                                              ; preds = %406, %482, %481, %201, %179, %561, %565
  %580 = phi ptr [ %122, %561 ], [ %573, %565 ], [ %210, %201 ], [ %169, %179 ], [ %122, %406 ], [ %483, %482 ], [ %447, %481 ]
  %581 = phi ptr [ %539, %561 ], [ %568, %565 ], [ %203, %201 ], [ null, %179 ], [ null, %406 ], [ null, %482 ], [ null, %481 ]
  %582 = phi ptr [ null, %561 ], [ null, %565 ], [ null, %201 ], [ %154, %179 ], [ %398, %406 ], [ %484, %482 ], [ %444, %481 ]
  %583 = getelementptr inbounds %struct.Nurb, ptr %580, i64 0, i32 18
  %584 = load ptr, ptr %583, align 8, !tbaa !24
  %585 = icmp eq ptr %584, null
  %586 = select i1 %585, ptr %581, ptr %582
  call void @BKE_curve_nurb_vert_active_set(ptr noundef %10, ptr noundef nonnull %580, ptr noundef %586) #20
  call void @BKE_nurb_test2D(ptr noundef nonnull %580) #20
  %587 = load ptr, ptr %9, align 8, !tbaa !17
  %588 = call ptr @BKE_animdata_from_id(ptr noundef %587) #20
  %589 = getelementptr inbounds %struct.Curve, ptr %587, i64 0, i32 4
  %590 = load ptr, ptr %589, align 8, !tbaa !18
  %591 = getelementptr inbounds %struct.EditNurb, ptr %590, i64 0, i32 1
  %592 = load ptr, ptr %591, align 8, !tbaa !47
  %593 = icmp eq ptr %592, null
  br i1 %593, label %611, label %594

594:                                              ; preds = %579
  %595 = call ptr @BKE_animdata_from_id(ptr noundef nonnull %587) #20
  %596 = icmp eq ptr %595, null
  br i1 %596, label %611, label %597

597:                                              ; preds = %594
  %598 = load ptr, ptr %595, align 8, !tbaa !49
  %599 = icmp eq ptr %598, null
  br i1 %599, label %600, label %604

600:                                              ; preds = %597
  %601 = getelementptr inbounds %struct.AnimData, ptr %595, i64 0, i32 5
  %602 = load ptr, ptr %601, align 8, !tbaa !51
  %603 = icmp eq ptr %602, null
  br i1 %603, label %611, label %604

604:                                              ; preds = %600, %597
  %605 = load ptr, ptr %588, align 8, !tbaa !49
  %606 = icmp eq ptr %605, null
  br i1 %606, label %609, label %607

607:                                              ; preds = %604
  %608 = getelementptr inbounds %struct.bAction, ptr %605, i64 0, i32 1
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %587, ptr noundef nonnull %608)
  br label %609

609:                                              ; preds = %607, %604
  %610 = getelementptr inbounds %struct.AnimData, ptr %588, i64 0, i32 5
  call fastcc void @curve_rename_fcurves(ptr noundef nonnull %587, ptr noundef nonnull %610)
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 85524480, ptr noundef nonnull %8) #20
  br label %611

611:                                              ; preds = %594, %600, %579, %609
  %612 = load ptr, ptr %9, align 8, !tbaa !17
  call void @WM_event_add_notifier(ptr noundef %0, i32 noundef 274399232, ptr noundef %612) #20
  %613 = load ptr, ptr %9, align 8, !tbaa !17
  call void @DAG_id_tag_update(ptr noundef %613, i16 noundef signext 0) #20
  br label %614

614:                                              ; preds = %359, %535, %485, %136, %197, %611
  %615 = phi i32 [ 4, %611 ], [ 2, %197 ], [ 2, %136 ], [ 2, %485 ], [ 2, %535 ], [ 2, %359 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %7) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  ret i32 %615
}

declare void @mul_v3_m4v3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @RNA_struct_property_is_set(ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @ED_view3d_win_to_3d_int(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare zeroext i8 @snapObjectsContext(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

declare ptr @uiPupMenuBegin(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

declare ptr @uiPupMenuLayout(ptr noundef) local_unnamed_addr #6

declare void @uiItemsEnumO(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @uiPupMenuEnd(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @select_adjacent_cp(ptr nocapture noundef readonly %0, i16 noundef signext %1) unnamed_addr #13 {
  %3 = sext i16 %1 to i32
  %4 = icmp eq i16 %1, 0
  br i1 %4, label %127, label %5

5:                                                ; preds = %2
  %6 = load ptr, ptr %0, align 8, !tbaa !36
  %7 = icmp eq ptr %6, null
  br i1 %7, label %127, label %8

8:                                                ; preds = %5
  %9 = icmp slt i16 %1, 0
  %10 = tail call i32 @llvm.abs.i32(i32 %3, i1 true)
  %11 = sext i16 %1 to i64
  br label %12

12:                                               ; preds = %8, %124
  %13 = phi ptr [ %6, %8 ], [ %125, %124 ]
  %14 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 2
  %15 = load i16, ptr %14, align 8, !tbaa !21
  %16 = icmp eq i16 %15, 1
  %17 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 6
  %18 = load i32, ptr %17, align 8, !tbaa !23
  br i1 %16, label %19, label %73

19:                                               ; preds = %12
  %20 = icmp ne i32 %18, 0
  %21 = icmp sgt i32 %18, %10
  %22 = select i1 %20, i1 %21, i1 false
  br i1 %22, label %23, label %124

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 18
  %25 = load ptr, ptr %24, align 8, !tbaa !24
  %26 = add nsw i32 %18, -1
  %27 = sext i32 %26 to i64
  %28 = select i1 %9, i64 %27, i64 0
  %29 = getelementptr inbounds %struct.BezTriple, ptr %25, i64 %28
  %30 = sdiv i32 %3, %10
  %31 = sub nsw i32 %3, %30
  %32 = sext i32 %31 to i64
  %33 = sub nsw i64 0, %32
  br label %34

34:                                               ; preds = %23, %66
  %35 = phi i32 [ %18, %23 ], [ %38, %66 ]
  %36 = phi ptr [ %29, %23 ], [ %69, %66 ]
  %37 = phi i8 [ 0, %23 ], [ %67, %66 ]
  %38 = add nsw i32 %35, -1
  %39 = icmp eq i8 %37, 0
  br i1 %39, label %40, label %66

40:                                               ; preds = %34
  %41 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 0, i32 10
  %42 = load i8, ptr %41, align 2, !tbaa !127
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %66

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 0, i32 8
  %46 = load i8, ptr %45, align 4, !tbaa !29
  %47 = and i8 %46, 1
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %66, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %11, i32 8
  %51 = load i8, ptr %50, align 4, !tbaa !29
  %52 = and i8 %51, 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %11, i32 10
  %56 = load i8, ptr %55, align 2, !tbaa !127
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %11, i32 7
  %60 = load i8, ptr %59, align 1, !tbaa !27
  %61 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %11, i32 9
  %62 = or i8 %60, 1
  store i8 %62, ptr %59, align 1, !tbaa !27
  %63 = or i8 %51, 1
  store i8 %63, ptr %50, align 4, !tbaa !29
  %64 = load i8, ptr %61, align 1, !tbaa !30
  %65 = or i8 %64, 1
  store i8 %65, ptr %61, align 1, !tbaa !30
  br label %66

66:                                               ; preds = %34, %40, %44, %58, %54, %49
  %67 = phi i8 [ 0, %49 ], [ 1, %58 ], [ 0, %54 ], [ 0, %44 ], [ 0, %40 ], [ 0, %34 ]
  %68 = getelementptr inbounds %struct.BezTriple, ptr %36, i64 %11
  %69 = getelementptr inbounds %struct.BezTriple, ptr %68, i64 %33
  %70 = icmp ne i32 %38, 0
  %71 = icmp sgt i32 %38, %10
  %72 = select i1 %70, i1 %71, i1 false
  br i1 %72, label %34, label %124, !llvm.loop !476

73:                                               ; preds = %12
  %74 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 7
  %75 = load i32, ptr %74, align 4, !tbaa !31
  %76 = mul nsw i32 %75, %18
  %77 = icmp ne i32 %76, 0
  %78 = icmp sgt i32 %76, %10
  %79 = select i1 %77, i1 %78, i1 false
  br i1 %79, label %80, label %124

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.Nurb, ptr %13, i64 0, i32 17
  %82 = load ptr, ptr %81, align 8, !tbaa !32
  %83 = add nsw i32 %76, -1
  %84 = sext i32 %83 to i64
  %85 = select i1 %9, i64 %84, i64 0
  %86 = getelementptr inbounds %struct.BPoint, ptr %82, i64 %85
  %87 = sdiv i32 %3, %10
  %88 = sub nsw i32 %3, %87
  %89 = sext i32 %88 to i64
  %90 = sub nsw i64 0, %89
  br label %91

91:                                               ; preds = %80, %117
  %92 = phi i32 [ %76, %80 ], [ %95, %117 ]
  %93 = phi i8 [ 0, %80 ], [ %118, %117 ]
  %94 = phi ptr [ %86, %80 ], [ %120, %117 ]
  %95 = add nsw i32 %92, -1
  %96 = icmp eq i8 %93, 0
  br i1 %96, label %97, label %117

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.BPoint, ptr %94, i64 0, i32 4
  %99 = load i16, ptr %98, align 2, !tbaa !129
  %100 = icmp eq i16 %99, 0
  br i1 %100, label %101, label %117

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.BPoint, ptr %94, i64 0, i32 3
  %103 = load i16, ptr %102, align 4, !tbaa !34
  %104 = and i16 %103, 1
  %105 = icmp eq i16 %104, 0
  br i1 %105, label %117, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.BPoint, ptr %94, i64 %11, i32 3
  %108 = load i16, ptr %107, align 4, !tbaa !34
  %109 = and i16 %108, 1
  %110 = icmp eq i16 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.BPoint, ptr %94, i64 %11, i32 4
  %113 = load i16, ptr %112, align 2, !tbaa !129
  %114 = icmp eq i16 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  %116 = or i16 %108, 1
  store i16 %116, ptr %107, align 4, !tbaa !34
  br label %117

117:                                              ; preds = %91, %97, %101, %115, %111, %106
  %118 = phi i8 [ 0, %106 ], [ 0, %111 ], [ 1, %115 ], [ 0, %101 ], [ 0, %97 ], [ 0, %91 ]
  %119 = getelementptr inbounds %struct.BPoint, ptr %94, i64 %11
  %120 = getelementptr inbounds %struct.BPoint, ptr %119, i64 %90
  %121 = icmp ne i32 %95, 0
  %122 = icmp sgt i32 %95, %10
  %123 = select i1 %121, i1 %122, i1 false
  br i1 %123, label %91, label %124, !llvm.loop !477

124:                                              ; preds = %117, %66, %73, %19
  %125 = load ptr, ptr %13, align 8, !tbaa !36
  %126 = icmp eq ptr %125, null
  br i1 %126, label %127, label %12, !llvm.loop !478

127:                                              ; preds = %124, %5, %2
  ret void
}

declare nofpclass(nan inf) float @BLI_frand() local_unnamed_addr #6

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #8

declare void @RNA_enum_items_add_value(ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #6

declare void @RNA_enum_item_end(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #12

declare void @BLI_ghash_free(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @free_fcurves(ptr noundef) local_unnamed_addr #6

declare ptr @BKE_curve_editNurbs_get(ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @dupli_keyIndexHash(ptr noundef %0) unnamed_addr #5 {
  %2 = tail call i32 @BLI_ghash_size(ptr noundef %0) #20
  %3 = tail call ptr @BLI_ghash_ptr_new_ex(ptr noundef nonnull @.str.230, i32 noundef %2) #20
  %4 = tail call ptr @BLI_ghashIterator_new(ptr noundef %0) #20
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = load ptr, ptr %5, align 8, !tbaa !479
  %7 = icmp eq ptr %6, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %1, %8
  %9 = phi ptr [ %16, %8 ], [ %6, %1 ]
  %10 = getelementptr i8, ptr %9, i64 8
  %11 = load ptr, ptr %10, align 8, !tbaa !481
  %12 = getelementptr i8, ptr %9, i64 16
  %13 = load ptr, ptr %12, align 8, !tbaa !483
  %14 = load ptr, ptr @MEM_callocN, align 8, !tbaa !36
  %15 = tail call ptr %14(i64 noundef 40, ptr noundef nonnull @.str.231) #20
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(40) %15, ptr noundef nonnull align 8 dereferenceable(40) %13, i64 40, i1 false)
  tail call void @BLI_ghash_insert(ptr noundef %3, ptr noundef %11, ptr noundef %15) #20
  tail call void @BLI_ghashIterator_step(ptr noundef nonnull %4) #20
  %16 = load ptr, ptr %5, align 8, !tbaa !479
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %8, !llvm.loop !484

18:                                               ; preds = %8, %1
  tail call void @BLI_ghashIterator_free(ptr noundef nonnull %4) #20
  ret ptr %3
}

declare void @copy_fcurves(ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @keyIndex_updateNurb(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 18
  %5 = load ptr, ptr %4, align 8, !tbaa !24
  %6 = icmp eq ptr %5, null
  %7 = getelementptr inbounds %struct.Nurb, ptr %2, i64 0, i32 6
  %8 = load i32, ptr %7, align 8, !tbaa !23
  br i1 %6, label %32, label %9

9:                                                ; preds = %3
  %10 = getelementptr %struct.EditNurb, ptr %0, i64 0, i32 1
  %11 = load ptr, ptr %10, align 8, !tbaa !47
  %12 = icmp ne ptr %11, null
  %13 = icmp sgt i32 %8, 0
  %14 = and i1 %13, %12
  br i1 %14, label %15, label %60

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.Nurb, ptr %2, i64 0, i32 18
  %17 = load ptr, ptr %16, align 8, !tbaa !24
  br label %18

18:                                               ; preds = %15, %27
  %19 = phi ptr [ %29, %27 ], [ %5, %15 ]
  %20 = phi i32 [ %30, %27 ], [ 0, %15 ]
  %21 = phi ptr [ %28, %27 ], [ %17, %15 ]
  %22 = load ptr, ptr %10, align 8, !tbaa !47
  %23 = tail call ptr @BLI_ghash_popkey(ptr noundef %22, ptr noundef nonnull %19, ptr noundef null) #20
  %24 = icmp eq ptr %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %18
  %26 = load ptr, ptr %10, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %26, ptr noundef %21, ptr noundef nonnull %23) #20
  br label %27

27:                                               ; preds = %25, %18
  %28 = getelementptr inbounds i8, ptr %21, i64 72
  %29 = getelementptr inbounds i8, ptr %19, i64 72
  %30 = add nuw nsw i32 %20, 1
  %31 = icmp eq i32 %30, %8
  br i1 %31, label %60, label %18, !llvm.loop !157

32:                                               ; preds = %3
  %33 = getelementptr inbounds %struct.Nurb, ptr %2, i64 0, i32 7
  %34 = load i32, ptr %33, align 4, !tbaa !31
  %35 = mul nsw i32 %34, %8
  %36 = getelementptr %struct.EditNurb, ptr %0, i64 0, i32 1
  %37 = load ptr, ptr %36, align 8, !tbaa !47
  %38 = icmp ne ptr %37, null
  %39 = icmp sgt i32 %35, 0
  %40 = and i1 %39, %38
  br i1 %40, label %41, label %60

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.Nurb, ptr %2, i64 0, i32 17
  %43 = load ptr, ptr %42, align 8, !tbaa !32
  %44 = getelementptr inbounds %struct.Nurb, ptr %1, i64 0, i32 17
  %45 = load ptr, ptr %44, align 8, !tbaa !32
  br label %46

46:                                               ; preds = %41, %55
  %47 = phi ptr [ %57, %55 ], [ %45, %41 ]
  %48 = phi i32 [ %58, %55 ], [ 0, %41 ]
  %49 = phi ptr [ %56, %55 ], [ %43, %41 ]
  %50 = load ptr, ptr %36, align 8, !tbaa !47
  %51 = tail call ptr @BLI_ghash_popkey(ptr noundef %50, ptr noundef %47, ptr noundef null) #20
  %52 = icmp eq ptr %51, null
  br i1 %52, label %55, label %53

53:                                               ; preds = %46
  %54 = load ptr, ptr %36, align 8, !tbaa !47
  tail call void @BLI_ghash_insert(ptr noundef %54, ptr noundef %49, ptr noundef nonnull %51) #20
  br label %55

55:                                               ; preds = %53, %46
  %56 = getelementptr inbounds i8, ptr %49, i64 36
  %57 = getelementptr inbounds i8, ptr %47, i64 36
  %58 = add nuw nsw i32 %48, 1
  %59 = icmp eq i32 %58, %35
  br i1 %59, label %60, label %46, !llvm.loop !157

60:                                               ; preds = %27, %55, %32, %9
  ret void
}

declare ptr @BLI_ghash_ptr_new_ex(ptr noundef, i32 noundef) local_unnamed_addr #6

declare i32 @BLI_ghash_size(ptr noundef) local_unnamed_addr #6

declare ptr @BLI_ghashIterator_new(ptr noundef) local_unnamed_addr #6

declare void @BLI_ghashIterator_step(ptr noundef) local_unnamed_addr #6

declare void @BLI_ghashIterator_free(ptr noundef) local_unnamed_addr #6

declare void @BKE_displist_make_curveTypes(ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #6

declare void @BKE_displist_minmax(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

declare void @mid_v3_v3v3(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #16

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #17

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
declare void @llvm.assume(i1 noundef) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.usub.sat.i32(i32, i32) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v8i32(<8 x i32>) #16

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <8 x i32> @llvm.masked.load.v8i32.p0(ptr nocapture, i32 immarg, <8 x i1>, <8 x i32>) #19

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <8 x float> @llvm.fabs.v8f32(<8 x float>) #16

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #16

attributes #0 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #8 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #9 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { nofree nosync nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #13 = { nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #15 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #17 = { nofree nounwind }
attributes #18 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
attributes #19 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #20 = { nounwind }
attributes #21 = { nounwind willreturn memory(read) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !11, i64 136}
!6 = !{!"Object", !7, i64 0, !8, i64 120, !8, i64 128, !11, i64 136, !11, i64 138, !12, i64 140, !12, i64 144, !12, i64 148, !9, i64 152, !8, i64 216, !8, i64 224, !8, i64 232, !8, i64 240, !8, i64 248, !8, i64 256, !8, i64 264, !8, i64 272, !8, i64 280, !8, i64 288, !8, i64 296, !8, i64 304, !13, i64 312, !8, i64 360, !14, i64 368, !14, i64 384, !14, i64 400, !14, i64 416, !12, i64 432, !12, i64 436, !8, i64 440, !8, i64 448, !12, i64 456, !12, i64 460, !9, i64 464, !9, i64 476, !9, i64 488, !9, i64 500, !9, i64 512, !9, i64 524, !9, i64 536, !9, i64 548, !9, i64 560, !9, i64 576, !9, i64 592, !9, i64 604, !15, i64 616, !15, i64 620, !9, i64 624, !9, i64 688, !9, i64 752, !9, i64 816, !9, i64 880, !12, i64 944, !11, i64 948, !11, i64 950, !11, i64 952, !11, i64 954, !11, i64 956, !11, i64 958, !11, i64 960, !11, i64 962, !11, i64 964, !9, i64 966, !9, i64 967, !12, i64 968, !12, i64 972, !12, i64 976, !12, i64 980, !12, i64 984, !15, i64 988, !15, i64 992, !15, i64 996, !15, i64 1000, !15, i64 1004, !15, i64 1008, !15, i64 1012, !15, i64 1016, !15, i64 1020, !15, i64 1024, !15, i64 1028, !15, i64 1032, !11, i64 1036, !11, i64 1038, !11, i64 1040, !9, i64 1042, !9, i64 1043, !11, i64 1044, !9, i64 1046, !9, i64 1047, !15, i64 1048, !15, i64 1052, !14, i64 1056, !14, i64 1072, !14, i64 1088, !14, i64 1104, !15, i64 1120, !11, i64 1124, !11, i64 1126, !9, i64 1128, !12, i64 1144, !12, i64 1148, !8, i64 1152, !9, i64 1160, !9, i64 1161, !11, i64 1162, !9, i64 1164, !14, i64 1176, !14, i64 1192, !14, i64 1208, !14, i64 1224, !8, i64 1240, !8, i64 1248, !8, i64 1256, !9, i64 1264, !9, i64 1265, !11, i64 1266, !15, i64 1268, !8, i64 1272, !8, i64 1280, !8, i64 1288, !8, i64 1296, !16, i64 1304, !16, i64 1312, !12, i64 1320, !12, i64 1324, !14, i64 1328, !14, i64 1344, !8, i64 1360, !8, i64 1368, !8, i64 1376, !9, i64 1384, !8, i64 1392, !14, i64 1400, !8, i64 1416}
!7 = !{!"ID", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !9, i64 32, !11, i64 98, !12, i64 100, !12, i64 104, !12, i64 108, !8, i64 112}
!8 = !{!"any pointer", !9, i64 0}
!9 = !{!"omnipotent char", !10, i64 0}
!10 = !{!"Simple C/C++ TBAA"}
!11 = !{!"short", !9, i64 0}
!12 = !{!"int", !9, i64 0}
!13 = !{!"bAnimVizSettings", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !11, i64 16, !11, i64 18, !11, i64 20, !11, i64 22, !11, i64 24, !11, i64 26, !11, i64 28, !11, i64 30, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44}
!14 = !{!"ListBase", !8, i64 0, !8, i64 8}
!15 = !{!"float", !9, i64 0}
!16 = !{!"long", !9, i64 0}
!17 = !{!6, !8, i64 296}
!18 = !{!19, !8, i64 152}
!19 = !{!"Curve", !7, i64 0, !8, i64 120, !8, i64 128, !14, i64 136, !8, i64 152, !8, i64 160, !8, i64 168, !8, i64 176, !8, i64 184, !8, i64 192, !8, i64 200, !9, i64 208, !9, i64 220, !9, i64 232, !11, i64 244, !11, i64 246, !11, i64 248, !11, i64 250, !15, i64 252, !15, i64 256, !12, i64 260, !11, i64 264, !11, i64 266, !12, i64 268, !15, i64 272, !15, i64 276, !15, i64 280, !11, i64 284, !11, i64 286, !11, i64 288, !11, i64 290, !12, i64 292, !12, i64 296, !9, i64 300, !11, i64 304, !9, i64 306, !9, i64 307, !15, i64 308, !15, i64 312, !15, i64 316, !15, i64 320, !15, i64 324, !15, i64 328, !15, i64 332, !15, i64 336, !15, i64 340, !15, i64 344, !12, i64 348, !12, i64 352, !12, i64 356, !12, i64 360, !12, i64 364, !8, i64 368, !8, i64 376, !9, i64 384, !8, i64 448, !8, i64 456, !8, i64 464, !8, i64 472, !8, i64 480, !12, i64 488, !12, i64 492, !8, i64 496, !20, i64 504, !15, i64 512, !15, i64 516, !15, i64 520, !9, i64 524, !9, i64 525, !9, i64 526}
!20 = !{!"CharInfo", !11, i64 0, !11, i64 2, !9, i64 4, !9, i64 5, !11, i64 6}
!21 = !{!22, !11, i64 16}
!22 = !{!"Nurb", !8, i64 0, !8, i64 8, !11, i64 16, !11, i64 18, !11, i64 20, !11, i64 22, !12, i64 24, !12, i64 28, !9, i64 32, !11, i64 36, !11, i64 38, !11, i64 40, !11, i64 42, !11, i64 44, !11, i64 46, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !11, i64 80, !11, i64 82, !12, i64 84}
!23 = !{!22, !12, i64 24}
!24 = !{!22, !8, i64 72}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.mustprogress"}
!27 = !{!28, !9, i64 51}
!28 = !{!"BezTriple", !9, i64 0, !15, i64 36, !15, i64 40, !15, i64 44, !9, i64 48, !9, i64 49, !9, i64 50, !9, i64 51, !9, i64 52, !9, i64 53, !9, i64 54, !9, i64 55, !15, i64 56, !15, i64 60, !15, i64 64, !9, i64 68}
!29 = !{!28, !9, i64 52}
!30 = !{!28, !9, i64 53}
!31 = !{!22, !12, i64 28}
!32 = !{!22, !8, i64 64}
!33 = distinct !{!33, !26}
!34 = !{!35, !11, i64 24}
!35 = !{!"BPoint", !9, i64 0, !15, i64 16, !15, i64 20, !11, i64 24, !11, i64 26, !15, i64 28, !15, i64 32}
!36 = !{!8, !8, i64 0}
!37 = !{!22, !8, i64 48}
!38 = !{!22, !11, i64 40}
!39 = !{!22, !11, i64 44}
!40 = !{!15, !15, i64 0}
!41 = distinct !{!41, !26}
!42 = !{!22, !8, i64 56}
!43 = !{!22, !11, i64 42}
!44 = !{!22, !11, i64 46}
!45 = distinct !{!45, !26}
!46 = distinct !{!46, !26}
!47 = !{!48, !8, i64 16}
!48 = !{!"EditNurb", !14, i64 0, !8, i64 16, !12, i64 24, !9, i64 28}
!49 = !{!50, !8, i64 0}
!50 = !{!"AnimData", !8, i64 0, !8, i64 8, !8, i64 16, !14, i64 24, !8, i64 40, !14, i64 48, !14, i64 64, !12, i64 80, !12, i64 84, !11, i64 88, !11, i64 90, !15, i64 92}
!51 = !{!50, !8, i64 48}
!52 = !{!53, !12, i64 12}
!53 = !{!"", !8, i64 0, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !9, i64 24, !8, i64 32}
!54 = !{!53, !12, i64 16}
!55 = !{!53, !9, i64 24}
!56 = !{!14, !8, i64 0}
!57 = !{!58, !8, i64 0}
!58 = !{!"FCurve", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !14, i64 32, !8, i64 48, !8, i64 56, !12, i64 64, !15, i64 68, !11, i64 72, !11, i64 74, !12, i64 76, !8, i64 80, !12, i64 88, !9, i64 92, !15, i64 104, !15, i64 108}
!59 = !{!58, !8, i64 80}
!60 = !{!58, !8, i64 16}
!61 = distinct !{!61, !26}
!62 = distinct !{!62, !26}
!63 = distinct !{!63, !26}
!64 = distinct !{!64, !26}
!65 = distinct !{!65, !26}
!66 = distinct !{!66, !26}
!67 = distinct !{!67, !26}
!68 = !{i64 0, i64 8, !36, i64 8, i64 8, !36}
!69 = !{!70, !8, i64 0}
!70 = !{!"Global", !8, i64 0, !9, i64 8, !9, i64 1032, !9, i64 2056, !9, i64 2057, !9, i64 2058, !14, i64 2064, !9, i64 2080, !9, i64 2081, !9, i64 2082, !11, i64 2084, !11, i64 2086, !11, i64 2088, !9, i64 2090, !11, i64 2092, !12, i64 2096, !12, i64 2100, !9, i64 2104, !12, i64 2108, !12, i64 2112, !9, i64 2116}
!71 = !{!6, !8, i64 216}
!72 = !{!6, !11, i64 138}
!73 = !{!6, !12, i64 140}
!74 = !{!12, !12, i64 0}
!75 = !{!6, !12, i64 144}
!76 = !{!6, !12, i64 148}
!77 = !{!78, !12, i64 16}
!78 = !{!"ModifierData", !8, i64 0, !8, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !9, i64 32, !8, i64 96, !8, i64 104}
!79 = !{!80, !12, i64 272}
!80 = !{!"HookModifierData", !78, i64 0, !8, i64 112, !9, i64 120, !9, i64 184, !9, i64 248, !15, i64 260, !8, i64 264, !12, i64 272, !15, i64 276, !9, i64 280}
!81 = !{!80, !8, i64 264}
!82 = distinct !{!82, !26}
!83 = distinct !{!83, !26}
!84 = distinct !{!84, !26}
!85 = distinct !{!85, !26}
!86 = !{!19, !8, i64 192}
!87 = !{!48, !12, i64 24}
!88 = !{!89, !11, i64 208}
!89 = !{!"Key", !7, i64 0, !8, i64 120, !8, i64 128, !9, i64 136, !12, i64 168, !12, i64 172, !14, i64 176, !8, i64 192, !8, i64 200, !11, i64 208, !11, i64 210, !11, i64 212, !11, i64 214, !15, i64 216, !12, i64 220}
!90 = !{!91, !11, i64 28}
!91 = !{!"KeyBlock", !8, i64 0, !8, i64 8, !15, i64 16, !15, i64 20, !11, i64 24, !11, i64 26, !11, i64 28, !11, i64 30, !12, i64 32, !12, i64 36, !8, i64 40, !9, i64 48, !9, i64 112, !15, i64 176, !15, i64 180}
!92 = distinct !{!92, !26}
!93 = distinct !{!93, !26}
!94 = !{!53, !8, i64 0}
!95 = !{!28, !15, i64 36}
!96 = distinct !{!96, !26}
!97 = !{!35, !15, i64 16}
!98 = distinct !{!98, !26}
!99 = distinct !{!99, !26}
!100 = !{!89, !12, i64 168}
!101 = !{!91, !8, i64 40}
!102 = !{!89, !8, i64 128}
!103 = distinct !{!103, !26}
!104 = distinct !{!104, !26}
!105 = distinct !{!105, !26}
!106 = !{!53, !12, i64 8}
!107 = distinct !{!107, !26}
!108 = distinct !{!108, !26}
!109 = distinct !{!109, !26}
!110 = distinct !{!110, !26}
!111 = !{!91, !12, i64 32}
!112 = distinct !{!112, !26}
!113 = distinct !{!113, !26}
!114 = !{!6, !11, i64 1266}
!115 = !{!48, !8, i64 0}
!116 = !{!53, !12, i64 20}
!117 = !{!53, !8, i64 32}
!118 = distinct !{!118, !26}
!119 = distinct !{!119, !26}
!120 = !{!22, !8, i64 0}
!121 = distinct !{!121, !26}
!122 = distinct !{!122, !26}
!123 = distinct !{!123, !26}
!124 = distinct !{!124, !125}
!125 = !{!"llvm.loop.unroll.disable"}
!126 = distinct !{!126, !26}
!127 = !{!28, !9, i64 54}
!128 = distinct !{!128, !26}
!129 = !{!35, !11, i64 26}
!130 = distinct !{!130, !26}
!131 = distinct !{!131, !26}
!132 = distinct !{!132, !26, !133, !134}
!133 = !{!"llvm.loop.isvectorized", i32 1}
!134 = !{!"llvm.loop.unroll.runtime.disable"}
!135 = distinct !{!135, !26, !134, !133}
!136 = distinct !{!136, !26}
!137 = distinct !{!137, !26}
!138 = distinct !{!138, !26, !133, !134}
!139 = distinct !{!139, !26, !134, !133}
!140 = !{!141, !8, i64 0}
!141 = !{!"wmOperatorType", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40, !8, i64 48, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !8, i64 88, !8, i64 96, !8, i64 104, !14, i64 112, !8, i64 128, !8, i64 136, !8, i64 144, !142, i64 152, !11, i64 184}
!142 = !{!"ExtensionRNA", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24}
!143 = !{!141, !8, i64 8}
!144 = !{!141, !8, i64 24}
!145 = !{!141, !8, i64 32}
!146 = !{!141, !8, i64 72}
!147 = !{!141, !11, i64 184}
!148 = !{!149, !8, i64 32}
!149 = !{!"Base", !8, i64 0, !8, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !11, i64 28, !11, i64 30, !8, i64 32}
!150 = !{!151, !8, i64 120}
!151 = !{!"wmOperator", !8, i64 0, !8, i64 8, !9, i64 16, !8, i64 80, !8, i64 88, !8, i64 96, !8, i64 104, !8, i64 112, !8, i64 120, !14, i64 128, !8, i64 144, !8, i64 152, !11, i64 160, !9, i64 162}
!152 = !{!19, !12, i64 100}
!153 = distinct !{!153, !26}
!154 = distinct !{!154, !26}
!155 = distinct !{!155, !26}
!156 = distinct !{!156, !26}
!157 = distinct !{!157, !26}
!158 = distinct !{!158, !26}
!159 = distinct !{!159, !26, !133, !134}
!160 = distinct !{!160, !26, !134, !133}
!161 = distinct !{!161, !26}
!162 = distinct !{!162, !26}
!163 = distinct !{!163, !26}
!164 = distinct !{!164, !125}
!165 = distinct !{!165, !26}
!166 = distinct !{!166, !125}
!167 = distinct !{!167, !26}
!168 = !{i64 0, i64 16, !169, i64 16, i64 4, !40, i64 20, i64 4, !40, i64 24, i64 2, !170, i64 26, i64 2, !170, i64 28, i64 4, !40, i64 32, i64 4, !40}
!169 = !{!9, !9, i64 0}
!170 = !{!11, !11, i64 0}
!171 = distinct !{!171, !26}
!172 = distinct !{!172, !26}
!173 = !{!19, !12, i64 292}
!174 = !{!19, !12, i64 296}
!175 = distinct !{!175, !26}
!176 = !{!141, !8, i64 48}
!177 = !{!141, !8, i64 88}
!178 = !{!151, !8, i64 112}
!179 = !{!28, !15, i64 40}
!180 = distinct !{!180, !26}
!181 = !{!35, !15, i64 20}
!182 = distinct !{!182, !26}
!183 = distinct !{!183, !26}
!184 = !{!28, !15, i64 44}
!185 = distinct !{!185, !26}
!186 = !{!35, !15, i64 28}
!187 = distinct !{!187, !26}
!188 = distinct !{!188, !26}
!189 = distinct !{!189, !26}
!190 = distinct !{!190, !26}
!191 = distinct !{!191, !26}
!192 = distinct !{!192, !26}
!193 = distinct !{!193, !26}
!194 = distinct !{!194, !26}
!195 = distinct !{!195, !26}
!196 = distinct !{!196, !26}
!197 = distinct !{!197, !125}
!198 = !{!19, !11, i64 248}
!199 = distinct !{!199, !26}
!200 = distinct !{!200, !26}
!201 = !{!22, !11, i64 20}
!202 = distinct !{!202, !26}
!203 = distinct !{!203, !26}
!204 = distinct !{!204, !26}
!205 = distinct !{!205, !26}
!206 = distinct !{!206, !26}
!207 = distinct !{!207, !26}
!208 = distinct !{!208, !26}
!209 = distinct !{!209, !26}
!210 = distinct !{!210, !26}
!211 = distinct !{!211, !26}
!212 = distinct !{!212, !26}
!213 = distinct !{!213, !26}
!214 = distinct !{!214, !26, !133, !134}
!215 = distinct !{!215, !26}
!216 = distinct !{!216, !26}
!217 = distinct !{!217, !26}
!218 = distinct !{!218, !26}
!219 = distinct !{!219, !26}
!220 = distinct !{!220, !26}
!221 = distinct !{!221, !26, !134, !133}
!222 = distinct !{!222, !26, !133, !134}
!223 = distinct !{!223, !26}
!224 = distinct !{!224, !26}
!225 = distinct !{!225, !26, !226}
!226 = !{!"llvm.loop.unswitch.partial.disable"}
!227 = distinct !{!227, !26}
!228 = distinct !{!228, !26, !134, !133}
!229 = distinct !{!229, !26}
!230 = distinct !{!230, !26}
!231 = distinct !{!231, !26}
!232 = distinct !{!232, !26}
!233 = !{!141, !8, i64 104}
!234 = distinct !{!234, !26}
!235 = distinct !{!235, !26, !133, !134}
!236 = distinct !{!236, !26}
!237 = distinct !{!237, !26, !134, !133}
!238 = distinct !{!238, !26, !133, !134}
!239 = distinct !{!239, !26, !134, !133}
!240 = distinct !{!240, !26, !133, !134}
!241 = distinct !{!241, !26, !134, !133}
!242 = distinct !{!242, !26, !133, !134}
!243 = distinct !{!243, !26, !134, !133}
!244 = distinct !{!244, !26}
!245 = !{!246, !8, i64 16}
!246 = !{!"NurbSort", !8, i64 0, !8, i64 8, !8, i64 16, !9, i64 24}
!247 = distinct !{!247, !26}
!248 = distinct !{!248, !26}
!249 = !{!14, !8, i64 8}
!250 = !{!246, !8, i64 0}
!251 = distinct !{!251, !26}
!252 = distinct !{!252, !26}
!253 = distinct !{!253, !26, !254}
!254 = !{!"llvm.loop.peeled.count", i32 1}
!255 = distinct !{!255, !26}
!256 = distinct !{!256, !26}
!257 = distinct !{!257, !26}
!258 = distinct !{!258, !26}
!259 = distinct !{!259, !26}
!260 = distinct !{!260, !26}
!261 = distinct !{!261, !26}
!262 = distinct !{!262, !26}
!263 = !{!264, !15, i64 24}
!264 = !{!"", !8, i64 0, !8, i64 8, !8, i64 16, !15, i64 24, !12, i64 28, !12, i64 32, !9, i64 36}
!265 = !{!264, !12, i64 28}
!266 = !{!264, !12, i64 32}
!267 = !{!268, !8, i64 16}
!268 = !{!"ViewContext", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !8, i64 32, !8, i64 40, !8, i64 48, !9, i64 56}
!269 = !{!268, !8, i64 40}
!270 = !{!264, !8, i64 16}
!271 = !{!264, !8, i64 8}
!272 = !{!264, !8, i64 0}
!273 = !{i8 0, i8 2}
!274 = distinct !{!274, !26}
!275 = distinct !{!275, !26}
!276 = distinct !{!276, !26}
!277 = distinct !{!277, !26}
!278 = distinct !{!278, !26}
!279 = distinct !{!279, !26}
!280 = !{i32 2, i32 5}
!281 = !{!268, !8, i64 0}
!282 = !{!283, !8, i64 264}
!283 = !{!"Scene", !7, i64 0, !8, i64 120, !8, i64 128, !8, i64 136, !8, i64 144, !14, i64 152, !8, i64 168, !8, i64 176, !9, i64 184, !9, i64 196, !9, i64 208, !9, i64 220, !12, i64 232, !12, i64 236, !12, i64 240, !11, i64 244, !9, i64 246, !9, i64 247, !8, i64 248, !8, i64 256, !8, i64 264, !8, i64 272, !284, i64 280, !293, i64 4264, !14, i64 4296, !14, i64 4312, !8, i64 4328, !8, i64 4336, !8, i64 4344, !8, i64 4352, !8, i64 4360, !8, i64 4368, !11, i64 4376, !11, i64 4378, !12, i64 4380, !14, i64 4384, !294, i64 4400, !295, i64 4416, !298, i64 4600, !8, i64 4608, !299, i64 4616, !8, i64 4640, !16, i64 4648, !16, i64 4656, !286, i64 4664, !287, i64 4824, !300, i64 4888, !8, i64 4952}
!284 = !{!"RenderData", !285, i64 0, !8, i64 248, !8, i64 256, !288, i64 264, !289, i64 328, !12, i64 400, !12, i64 404, !12, i64 408, !15, i64 412, !12, i64 416, !12, i64 420, !12, i64 424, !12, i64 428, !11, i64 432, !11, i64 434, !15, i64 436, !15, i64 440, !15, i64 444, !15, i64 448, !15, i64 452, !11, i64 456, !11, i64 458, !11, i64 460, !11, i64 462, !11, i64 464, !11, i64 466, !12, i64 468, !11, i64 472, !11, i64 474, !11, i64 476, !11, i64 478, !11, i64 480, !11, i64 482, !12, i64 484, !12, i64 488, !11, i64 492, !11, i64 494, !12, i64 496, !12, i64 500, !11, i64 504, !11, i64 506, !11, i64 508, !11, i64 510, !11, i64 512, !9, i64 514, !9, i64 515, !12, i64 516, !12, i64 520, !12, i64 524, !11, i64 528, !11, i64 530, !11, i64 532, !11, i64 534, !11, i64 536, !11, i64 538, !11, i64 540, !11, i64 542, !290, i64 544, !290, i64 560, !291, i64 576, !14, i64 592, !11, i64 608, !11, i64 610, !15, i64 612, !15, i64 616, !15, i64 620, !15, i64 624, !12, i64 628, !15, i64 632, !15, i64 636, !15, i64 640, !15, i64 644, !11, i64 648, !11, i64 650, !11, i64 652, !11, i64 654, !11, i64 656, !11, i64 658, !15, i64 660, !15, i64 664, !11, i64 668, !11, i64 670, !15, i64 672, !15, i64 676, !9, i64 680, !12, i64 1704, !11, i64 1708, !11, i64 1710, !9, i64 1712, !9, i64 2480, !9, i64 2496, !9, i64 2512, !9, i64 2513, !9, i64 2514, !9, i64 2515, !12, i64 2520, !11, i64 2524, !11, i64 2526, !15, i64 2528, !15, i64 2532, !11, i64 2536, !11, i64 2538, !15, i64 2540, !11, i64 2544, !11, i64 2546, !12, i64 2548, !11, i64 2552, !11, i64 2554, !11, i64 2556, !11, i64 2558, !15, i64 2560, !15, i64 2564, !8, i64 2568, !12, i64 2576, !15, i64 2580, !9, i64 2584, !292, i64 2616, !12, i64 3976, !12, i64 3980}
!285 = !{!"ImageFormatData", !9, i64 0, !9, i64 1, !9, i64 2, !9, i64 3, !9, i64 4, !9, i64 5, !9, i64 6, !9, i64 7, !11, i64 8, !11, i64 10, !15, i64 12, !9, i64 16, !9, i64 17, !9, i64 18, !286, i64 24, !287, i64 184}
!286 = !{!"ColorManagedViewSettings", !12, i64 0, !12, i64 4, !9, i64 8, !9, i64 72, !15, i64 136, !15, i64 140, !8, i64 144, !8, i64 152}
!287 = !{!"ColorManagedDisplaySettings", !9, i64 0}
!288 = !{!"QuicktimeCodecSettings", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !11, i64 48, !11, i64 50, !12, i64 52, !12, i64 56, !12, i64 60}
!289 = !{!"FFMpegCodecData", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !15, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !8, i64 64}
!290 = !{!"rctf", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12}
!291 = !{!"rcti", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12}
!292 = !{!"BakeData", !285, i64 0, !9, i64 248, !11, i64 1272, !11, i64 1274, !11, i64 1276, !11, i64 1278, !15, i64 1280, !15, i64 1284, !9, i64 1288, !9, i64 1291, !9, i64 1292, !9, i64 1293, !9, i64 1296}
!293 = !{!"AudioData", !12, i64 0, !15, i64 4, !15, i64 8, !15, i64 12, !12, i64 16, !11, i64 20, !11, i64 22, !15, i64 24, !15, i64 28}
!294 = !{!"GameFraming", !9, i64 0, !9, i64 12, !9, i64 13, !9, i64 14, !9, i64 15}
!295 = !{!"GameData", !294, i64 0, !11, i64 16, !11, i64 18, !11, i64 20, !11, i64 22, !11, i64 24, !11, i64 26, !11, i64 28, !11, i64 30, !11, i64 32, !9, i64 34, !296, i64 40, !11, i64 64, !11, i64 66, !15, i64 68, !297, i64 72, !15, i64 128, !15, i64 132, !12, i64 136, !11, i64 140, !11, i64 142, !11, i64 144, !11, i64 146, !11, i64 148, !11, i64 150, !11, i64 152, !11, i64 154, !11, i64 156, !11, i64 158, !11, i64 160, !11, i64 162, !15, i64 164, !15, i64 168, !15, i64 172, !15, i64 176, !15, i64 180}
!296 = !{!"GameDome", !11, i64 0, !11, i64 2, !11, i64 4, !11, i64 6, !15, i64 8, !15, i64 12, !8, i64 16}
!297 = !{!"RecastData", !15, i64 0, !15, i64 4, !15, i64 8, !15, i64 12, !15, i64 16, !15, i64 20, !15, i64 24, !15, i64 28, !15, i64 32, !15, i64 36, !12, i64 40, !15, i64 44, !15, i64 48, !11, i64 52, !11, i64 54}
!298 = !{!"UnitSettings", !15, i64 0, !9, i64 4, !9, i64 5, !11, i64 6}
!299 = !{!"PhysicsSettings", !9, i64 0, !12, i64 12, !12, i64 16, !12, i64 20}
!300 = !{!"ColorManagedColorspaceSettings", !9, i64 0}
!301 = !{!302, !11, i64 434}
!302 = !{!"ToolSettings", !8, i64 0, !8, i64 8, !8, i64 16, !8, i64 24, !15, i64 32, !15, i64 36, !15, i64 40, !11, i64 44, !11, i64 46, !9, i64 48, !9, i64 49, !9, i64 50, !9, i64 51, !15, i64 52, !11, i64 56, !9, i64 58, !9, i64 59, !303, i64 64, !305, i64 168, !15, i64 336, !15, i64 340, !11, i64 344, !11, i64 346, !9, i64 348, !9, i64 349, !11, i64 350, !15, i64 352, !15, i64 356, !15, i64 360, !15, i64 364, !15, i64 368, !15, i64 372, !15, i64 376, !15, i64 380, !15, i64 384, !15, i64 388, !11, i64 392, !9, i64 394, !9, i64 395, !9, i64 396, !9, i64 399, !8, i64 400, !9, i64 408, !9, i64 409, !9, i64 410, !9, i64 411, !9, i64 412, !9, i64 413, !9, i64 421, !9, i64 429, !9, i64 430, !9, i64 431, !9, i64 432, !9, i64 433, !11, i64 434, !11, i64 436, !11, i64 438, !11, i64 440, !9, i64 442, !9, i64 443, !9, i64 444, !9, i64 445, !9, i64 446, !9, i64 447, !12, i64 448, !12, i64 452, !12, i64 456, !12, i64 460, !11, i64 464, !11, i64 466, !12, i64 468, !15, i64 472, !15, i64 476, !306, i64 480, !307, i64 608}
!303 = !{!"ImagePaintSettings", !304, i64 0, !11, i64 40, !11, i64 42, !11, i64 44, !11, i64 46, !9, i64 48, !12, i64 52, !8, i64 56, !8, i64 64, !8, i64 72, !8, i64 80, !9, i64 88, !15, i64 100}
!304 = !{!"Paint", !8, i64 0, !8, i64 8, !8, i64 16, !9, i64 24, !12, i64 28, !12, i64 32, !12, i64 36}
!305 = !{!"ParticleEditSettings", !11, i64 0, !11, i64 2, !11, i64 4, !11, i64 6, !9, i64 8, !8, i64 120, !15, i64 128, !15, i64 132, !12, i64 136, !12, i64 140, !12, i64 144, !12, i64 148, !8, i64 152, !8, i64 160}
!306 = !{!"UnifiedPaintSettings", !12, i64 0, !15, i64 4, !15, i64 8, !15, i64 12, !9, i64 16, !9, i64 28, !12, i64 40, !9, i64 44, !15, i64 52, !12, i64 56, !12, i64 60, !9, i64 64, !9, i64 65, !15, i64 72, !9, i64 76, !12, i64 84, !15, i64 88, !9, i64 92, !9, i64 100, !12, i64 108, !8, i64 112, !15, i64 120, !12, i64 124}
!307 = !{!"MeshStatVis", !9, i64 0, !9, i64 1, !9, i64 3, !15, i64 4, !15, i64 8, !15, i64 12, !15, i64 16, !9, i64 20, !9, i64 21, !15, i64 24, !15, i64 28, !15, i64 32, !15, i64 36}
!308 = !{!302, !9, i64 431}
!309 = distinct !{!309, !26}
!310 = distinct !{!310, !26}
!311 = distinct !{!311, !26}
!312 = !{!268, !8, i64 32}
!313 = !{!268, !8, i64 24}
!314 = distinct !{!314, !26, !133, !134}
!315 = distinct !{!315, !26, !134, !133}
!316 = distinct !{!316, !26, !133, !134}
!317 = distinct !{!317, !26, !134, !133}
!318 = distinct !{!318, !26}
!319 = distinct !{!319, !26}
!320 = distinct !{!320, !26}
!321 = distinct !{!321, !26}
!322 = distinct !{!322, !26}
!323 = distinct !{!323, !26}
!324 = !{!151, !8, i64 88}
!325 = distinct !{!325, !26}
!326 = distinct !{!326, !26}
!327 = distinct !{!327, !26}
!328 = distinct !{!328, !26}
!329 = distinct !{!329, !26}
!330 = distinct !{!330, !26}
!331 = distinct !{!331, !26}
!332 = distinct !{!332, !26}
!333 = distinct !{!333, !26}
!334 = distinct !{!334, !26}
!335 = distinct !{!335, !26}
!336 = distinct !{!336, !26}
!337 = distinct !{!337, !26}
!338 = distinct !{!338, !26}
!339 = distinct !{!339, !26, !254}
!340 = distinct !{!340, !26, !254}
!341 = distinct !{!341, !26}
!342 = distinct !{!342, !26}
!343 = distinct !{!343, !26}
!344 = distinct !{!344, !26}
!345 = distinct !{!345, !26}
!346 = distinct !{!346, !26}
!347 = distinct !{!347, !26}
!348 = distinct !{!348, !26, !133, !134}
!349 = distinct !{!349, !26, !134, !133}
!350 = distinct !{!350, !26}
!351 = distinct !{!351, !26}
!352 = distinct !{!352, !26}
!353 = distinct !{!353, !125}
!354 = distinct !{!354, !26}
!355 = distinct !{!355, !26}
!356 = distinct !{!356, !26}
!357 = distinct !{!357, !26}
!358 = distinct !{!358, !26}
!359 = distinct !{!359, !26}
!360 = distinct !{!360, !26}
!361 = distinct !{!361, !26}
!362 = distinct !{!362, !26}
!363 = distinct !{!363, !26}
!364 = !{!22, !11, i64 22}
!365 = distinct !{!365, !26}
!366 = !{!367, !8, i64 32}
!367 = !{!"CollectionPointerLink", !8, i64 0, !8, i64 8, !368, i64 16}
!368 = !{!"PointerRNA", !369, i64 0, !8, i64 8, !8, i64 16}
!369 = !{!"", !8, i64 0}
!370 = !{!19, !8, i64 136}
!371 = !{!6, !12, i64 456}
!372 = !{!22, !11, i64 18}
!373 = distinct !{!373, !26}
!374 = distinct !{!374, !26}
!375 = distinct !{!375, !26}
!376 = distinct !{!376, !26}
!377 = distinct !{!377, !26}
!378 = distinct !{!378, !26}
!379 = distinct !{!379, !26}
!380 = !{!381, !8, i64 24}
!381 = !{!"", !14, i64 0, !12, i64 16, !8, i64 24, !14, i64 32, !14, i64 48, !12, i64 64}
!382 = distinct !{!382, !26}
!383 = !{!381, !12, i64 16}
!384 = !{!381, !12, i64 64}
!385 = distinct !{!385, !26}
!386 = !{!6, !8, i64 1280}
!387 = !{!19, !11, i64 246}
!388 = distinct !{!388, !26}
!389 = distinct !{!389, !26}
!390 = distinct !{!390, !26}
!391 = distinct !{!391, !26}
!392 = distinct !{!392, !26}
!393 = distinct !{!393, !26}
!394 = distinct !{!394, !26}
!395 = distinct !{!395, !26}
!396 = distinct !{!396, !26}
!397 = distinct !{!397, !26}
!398 = distinct !{!398, !125}
!399 = distinct !{!399, !26}
!400 = distinct !{!400, !26}
!401 = distinct !{!401, !26}
!402 = distinct !{!402, !26}
!403 = distinct !{!403, !26}
!404 = distinct !{!404, !26, !133, !134}
!405 = distinct !{!405, !26, !134, !133}
!406 = distinct !{!406, !125}
!407 = !{!70, !12, i64 2100}
!408 = distinct !{!408, !26}
!409 = distinct !{!409, !26}
!410 = distinct !{!410, !26}
!411 = distinct !{!411, !26}
!412 = distinct !{!412, !26}
!413 = distinct !{!413, !26}
!414 = distinct !{!414, !26}
!415 = distinct !{!415, !125}
!416 = distinct !{!416, !125}
!417 = distinct !{!417, !26}
!418 = distinct !{!418, !125}
!419 = distinct !{!419, !26}
!420 = distinct !{!420, !26}
!421 = distinct !{!421, !125}
!422 = distinct !{!422, !26}
!423 = distinct !{!423, !26}
!424 = distinct !{!424, !125}
!425 = distinct !{!425, !26}
!426 = distinct !{!426, !26}
!427 = distinct !{!427, !26}
!428 = distinct !{!428, !26}
!429 = distinct !{!429, !26}
!430 = distinct !{!430, !26}
!431 = distinct !{!431, !26}
!432 = distinct !{!432, !26, !133, !134}
!433 = distinct !{!433, !26, !134, !133}
!434 = distinct !{!434, !26}
!435 = distinct !{!435, !26}
!436 = distinct !{!436, !26}
!437 = distinct !{!437, !26}
!438 = distinct !{!438, !125}
!439 = distinct !{!439, !26, !226}
!440 = distinct !{!440, !26}
!441 = distinct !{!441, !26}
!442 = distinct !{!442, !26}
!443 = distinct !{!443, !26, !226}
!444 = distinct !{!444, !26, !226}
!445 = distinct !{!445, !26}
!446 = distinct !{!446, !26}
!447 = distinct !{!447, !26}
!448 = distinct !{!448, !26}
!449 = distinct !{!449, !26}
!450 = distinct !{!450, !26, !133, !134}
!451 = distinct !{!451, !26, !134, !133}
!452 = distinct !{!452, !26}
!453 = distinct !{!453, !26}
!454 = distinct !{!454, !26}
!455 = distinct !{!455, !26, !133, !134}
!456 = distinct !{!456, !26, !134, !133}
!457 = distinct !{!457, !26}
!458 = distinct !{!458, !26}
!459 = distinct !{!459, !26}
!460 = !{!461}
!461 = distinct !{!461, !462}
!462 = distinct !{!462, !"LVerDomain"}
!463 = !{!464}
!464 = distinct !{!464, !462}
!465 = distinct !{!465, !26, !133, !134}
!466 = distinct !{!466, !26, !133}
!467 = distinct !{!467, !125}
!468 = distinct !{!468, !26}
!469 = distinct !{!469, !26}
!470 = distinct !{!470, !26, !226}
!471 = !{!28, !9, i64 49}
!472 = !{!28, !9, i64 50}
!473 = !{!19, !11, i64 284}
!474 = !{!22, !11, i64 36}
!475 = !{i64 0, i64 36, !169, i64 36, i64 4, !40, i64 40, i64 4, !40, i64 44, i64 4, !40, i64 48, i64 1, !169, i64 49, i64 1, !169, i64 50, i64 1, !169, i64 51, i64 1, !169, i64 52, i64 1, !169, i64 53, i64 1, !169, i64 54, i64 1, !169, i64 55, i64 1, !169, i64 56, i64 4, !40, i64 60, i64 4, !40, i64 64, i64 4, !40, i64 68, i64 4, !169}
!476 = distinct !{!476, !26}
!477 = distinct !{!477, !26}
!478 = distinct !{!478, !26}
!479 = !{!480, !8, i64 8}
!480 = !{!"GHashIterator", !8, i64 0, !8, i64 8, !12, i64 16}
!481 = !{!482, !8, i64 8}
!482 = !{!"_gh_Entry", !8, i64 0, !8, i64 8, !8, i64 16}
!483 = !{!482, !8, i64 16}
!484 = distinct !{!484, !26}
