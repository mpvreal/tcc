; ModuleID = 'reload1.c'
source_filename = "reload1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.obstack = type { i64, ptr, ptr, ptr, ptr, i64, i32, ptr, ptr, ptr, i8 }
%struct.bitmap_head_def = type { ptr, ptr, i32, ptr }
%struct.bitmap_obstack = type { ptr, ptr, %struct.obstack }
%struct.bitmap_element_def = type { ptr, ptr, i32, [2 x i64] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, ptr, ptr, ptr }
%struct.emit_status = type { i32, i32, ptr, ptr, ptr, i32, i32, i32, i32, ptr }
%struct.varasm_status = type { ptr, i32 }
%struct.incoming_args = type { i32, i32, i32, ptr, %struct.ix86_args, ptr }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { ptr, ptr, ptr, ptr, ptr }
%struct.rtl_eh = type { ptr, ptr, ptr, ptr, ptr, ptr, [2 x ptr] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.addr_space, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, %struct.calls, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { ptr, ptr, ptr, %struct.asm_int_op, %struct.asm_int_op, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.asm_int_op = type { ptr, ptr, ptr, ptr }
%struct.sched = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vectorize = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.addr_space = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.calls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.c = type { ptr }
%struct.cxx = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.emutls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%struct.target_option_hooks = type { ptr, ptr, ptr, ptr, ptr, ptr }
%struct.elim_table_1 = type { i32, i32 }
%struct.recog_data = type { [30 x ptr], [30 x ptr], [30 x ptr], [30 x i32], [30 x i32], [14 x ptr], [14 x i8], i8, i8, i8, [30 x i8], ptr }
%struct.rtl_hooks = type { ptr, ptr, ptr, ptr, ptr }
%struct.insn_data = type { ptr, %union.anon, ptr, ptr, i8, i8, i8, i8 }
%union.anon = type { ptr }
%struct.reload = type { ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, ptr, i32, ptr, i32, i32, i32, i32, i32, i32, i8 }
%struct.optab_d = type { i32, ptr, i8, ptr, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.insn_chain = type { ptr, ptr, ptr, ptr, i32, i8, %struct.bitmap_head_def, %struct.bitmap_head_def, ptr, i32, i64 }
%struct.function = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i32, i32, i32, i32, ptr, i32 }
%struct.control_flow_graph = type { ptr, ptr, ptr, i32, i32, i32, ptr, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { ptr, ptr, ptr, ptr, [2 x ptr], ptr, ptr, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%union.basic_block_il_dependent = type { ptr }
%struct.VEC_edge_base = type { i32, i32, [1 x ptr] }
%struct.edge_def = type { ptr, ptr, %union.edge_def_insns, ptr, ptr, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { ptr }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], ptr, i64 }
%union.rtunion_def = type { ptr }
%struct.elim_table = type { i32, i32, i64, i32, i32, i64, i64, i32, ptr, ptr }
%struct.rtvec_def = type { i32, [1 x ptr] }
%struct.mem_attrs = type { ptr, ptr, ptr, i32, i32, i8 }
%struct.reg_info_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VEC_rtx_p_base = type { i32, i32, [1 x ptr] }
%struct.df = type { [8 x ptr], [8 x ptr], ptr, %struct.df_ref_info, %struct.df_ref_info, ptr, ptr, ptr, i32, i32, ptr, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, ptr, i32, i8, i8, i8 }
%struct.df_ref_info = type { ptr, ptr, ptr, i32, i32, i32, i32 }
%struct.df_base_ref = type { i32, ptr, ptr, ptr, ptr, ptr, i32, i32, i32 }
%struct.regstat_n_sets_and_refs_t = type { i32, i32 }
%struct.secondary_reload_info = type { i32, i32, ptr, i32 }
%struct.insn_operand_data = type { ptr, ptr, i16, i8, i8 }
%struct.rtl_bb_info = type { ptr, ptr, ptr, ptr, i32 }

@reg_equiv_constant = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_invariant = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_memory_loc = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_memory_loc_vec = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_address = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_mem = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_alt_mem_list = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_init = dso_local local_unnamed_addr global ptr null, align 8
@reg_equiv_init_size = dso_local local_unnamed_addr global i32 0, align 4
@indirect_symref_ok = dso_local local_unnamed_addr global i8 0, align 1
@double_reg_address_ok = dso_local local_unnamed_addr global i8 0, align 1
@reload_first_uid = dso_local local_unnamed_addr global i32 0, align 4
@caller_save_needed = dso_local local_unnamed_addr global i32 0, align 4
@reload_in_optab = dso_local local_unnamed_addr global [87 x i32] zeroinitializer, align 16
@reload_out_optab = dso_local local_unnamed_addr global [87 x i32] zeroinitializer, align 16
@reload_insn_chain = dso_local local_unnamed_addr global ptr null, align 8
@num_not_at_initial_offset = dso_local local_unnamed_addr global i32 0, align 4
@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@reload_in_progress = dso_local local_unnamed_addr global i32 0, align 4
@spill_indirect_levels = internal unnamed_addr global i8 0, align 1
@.str = private unnamed_addr constant [4 x i8] c"foo\00", align 1
@reload_obstack = internal global %struct.obstack zeroinitializer, align 8
@reload_startobj = internal unnamed_addr global ptr null, align 8
@spilled_pseudos = internal global %struct.bitmap_head_def zeroinitializer, align 8
@reg_obstack = external global %struct.bitmap_obstack, align 8
@changed_allocation_pseudos = internal global %struct.bitmap_head_def zeroinitializer, align 8
@pseudos_counted = internal global %struct.bitmap_head_def zeroinitializer, align 8
@unused_insn_chains = internal unnamed_addr global ptr null, align 8
@reg_renumber = external local_unnamed_addr global ptr, align 8
@ira_conflicts_p = external local_unnamed_addr global i8, align 1
@reload_completed = external local_unnamed_addr global i32, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"reload1.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@regno_reg_rtx = external local_unnamed_addr global ptr, align 8
@bitmap_zero_bits = external local_unnamed_addr global %struct.bitmap_element_def, align 8
@hard_regno_nregs = external local_unnamed_addr global [53 x [87 x i8]], align 16
@failure = internal unnamed_addr global i1 false, align 4
@reload_firstobj = internal unnamed_addr global ptr null, align 8
@spill_stack_slot = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@spill_stack_slot_width = internal unnamed_addr global [53 x i32] zeroinitializer, align 16
@max_regno = external local_unnamed_addr global i32, align 4
@cfun = external local_unnamed_addr global ptr, align 8
@x_rtl = external local_unnamed_addr global %struct.rtl_data, align 8
@call_used_regs = external local_unnamed_addr global [53 x i8], align 16
@fixed_regs = external local_unnamed_addr global [53 x i8], align 16
@reg_max_ref_width = internal unnamed_addr global ptr null, align 8
@reg_old_renumber = internal unnamed_addr global ptr null, align 8
@pseudo_forbidden_regs = internal unnamed_addr global ptr null, align 8
@pseudo_previous_regs = internal unnamed_addr global ptr null, align 8
@bad_spill_regs_global = internal unnamed_addr global i64 0, align 8
@num_eliminable_invariants = internal unnamed_addr global i32 0, align 4
@flag_pic = external local_unnamed_addr global i32, align 4
@rtx_class = external local_unnamed_addr constant [139 x i32], align 16
@global_rtl = external local_unnamed_addr global [11 x ptr], align 16
@dump_file = external local_unnamed_addr global ptr, align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"init_insns for %u: \00", align 1
@first_label_num = internal unnamed_addr global i32 0, align 4
@num_labels = internal unnamed_addr global i32 0, align 4
@offsets_known_at = internal unnamed_addr global ptr null, align 8
@offsets_at = internal unnamed_addr global ptr null, align 8
@temp_pseudo_reg_arr = internal unnamed_addr global ptr null, align 8
@num_eliminable = internal unnamed_addr global i32 0, align 4
@insns_need_reload = internal unnamed_addr global ptr null, align 8
@something_needs_elimination = internal unnamed_addr global i1 false, align 4
@last_spill_reg = internal unnamed_addr global i32 0, align 4
@used_spill_regs = internal unnamed_addr global i64 0, align 8
@reg_eliminate = internal unnamed_addr global ptr null, align 8
@something_needs_operands_changed = internal unnamed_addr global i32 0, align 4
@flag_var_tracking_assignments = external local_unnamed_addr global i32, align 4
@targetm = external local_unnamed_addr global %struct.gcc_target, align 8
@df = external local_unnamed_addr global ptr, align 8
@const_int_rtx = external local_unnamed_addr global [129 x ptr], align 16
@.str.5 = private unnamed_addr constant [43 x i8] c"%<asm%> operand has impossible constraints\00", align 1
@flag_stack_check = external local_unnamed_addr global i32, align 4
@reload.verbose_warned = internal unnamed_addr global i1 false, align 4
@.str.6 = private unnamed_addr constant [49 x i8] c"frame size too large for reliable stack checking\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"try reducing the number of local variables\00", align 1
@n_spills = internal unnamed_addr global i32 0, align 4
@spill_regs = internal unnamed_addr global [53 x i16] zeroinitializer, align 16
@substitute_stack = internal unnamed_addr global ptr null, align 8
@optimize = external local_unnamed_addr global i32, align 4
@.str.8 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@mode_size = external local_unnamed_addr global [87 x i8], align 16
@rtx_format = external local_unnamed_addr constant [139 x ptr], align 16
@rtx_length = external local_unnamed_addr constant [139 x i8], align 16
@reg_eliminate_1 = internal unnamed_addr constant [4 x %struct.elim_table_1] [%struct.elim_table_1 { i32 16, i32 7 }, %struct.elim_table_1 { i32 16, i32 6 }, %struct.elim_table_1 { i32 20, i32 7 }, %struct.elim_table_1 { i32 20, i32 6 }], align 16
@regstat_n_sets_and_refs = external local_unnamed_addr global ptr, align 8
@recog_data = external global %struct.recog_data, align 8
@reg_class_contents = external local_unnamed_addr global [27 x i64], align 16
@reg_class_subunion = external local_unnamed_addr global [27 x [27 x i32]], align 16
@spill_reg_order = internal global [53 x i16] zeroinitializer, align 16
@.str.9 = private unnamed_addr constant [29 x i8] c" Register %d now on stack.\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c" Register %d now in %d.\0A\0A\00", align 1
@reload_insn_firstobj = internal unnamed_addr global ptr null, align 8
@flag_expensive_optimizations = external local_unnamed_addr global i32, align 4
@n_reloads = external local_unnamed_addr global i32, align 4
@rtl_hooks = external local_unnamed_addr global %struct.rtl_hooks, align 8
@insn_data = external local_unnamed_addr constant [0 x %struct.insn_data], align 8
@current_function_decl = external local_unnamed_addr global ptr, align 8
@rld = external local_unnamed_addr global [180 x %struct.reload], align 16
@reload_order = internal global [180 x i16] zeroinitializer, align 16
@used_spill_regs_local = internal unnamed_addr global i64 0, align 8
@.str.11 = private unnamed_addr constant [23 x i8] c"Spilling for insn %d.\0A\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"reload failure for reload %d\0A\00", align 1
@reg_class_size = external local_unnamed_addr global [27 x i32], align 16
@fixed_reg_set = external local_unnamed_addr global i64, align 8
@bad_spill_regs = internal unnamed_addr global i64 0, align 8
@spill_cost = internal unnamed_addr global [53 x i32] zeroinitializer, align 16
@spill_add_cost = internal unnamed_addr global [53 x i32] zeroinitializer, align 16
@hard_regno_to_pseudo_regno = internal unnamed_addr global [53 x i32] zeroinitializer, align 16
@reg_info_p = external local_unnamed_addr global ptr, align 8
@find_reg.regno_pseudo_regs = internal global [53 x i32] zeroinitializer, align 16
@find_reg.best_regno_pseudo_regs = internal global [53 x i32] zeroinitializer, align 16
@reg_alloc_order = external local_unnamed_addr global [53 x i32], align 16
@inv_reg_alloc_order = external local_unnamed_addr global [53 x i32], align 16
@.str.13 = private unnamed_addr constant [28 x i8] c"Using reg %d for reload %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [59 x i8] c"can't find a register in class %qs while reloading %<asm%>\00", align 1
@reg_class_names = external local_unnamed_addr global [0 x ptr], align 8
@.str.15 = private unnamed_addr constant [48 x i8] c"unable to find a register to spill in class %qs\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"\0AReloads for insn # %d\0A\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"this is the insn:\00", align 1
@spill_reg_rtx = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@spill_reg_store = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@reg_last_reload_reg = internal unnamed_addr global ptr null, align 8
@reg_has_output_reload = internal global %struct.bitmap_head_def zeroinitializer, align 8
@reg_reloaded_valid = internal unnamed_addr global i64 0, align 8
@reg_is_output_reload = internal unnamed_addr global i64 0, align 8
@flag_non_call_exceptions = external local_unnamed_addr global i32, align 4
@.str.18 = private unnamed_addr constant [43 x i8] c"%<asm%> operand requires impossible reload\00", align 1
@call_used_reg_set = external local_unnamed_addr global i64, align 8
@reload_spill_index = internal unnamed_addr global [180 x i32] zeroinitializer, align 16
@reg_class_superunion = external local_unnamed_addr global [27 x [27 x i32]], align 16
@regclass_map = external local_unnamed_addr constant [53 x i32], align 16
@mode_class = external local_unnamed_addr constant [87 x i8], align 16
@reg_reloaded_contents = internal unnamed_addr global [53 x i32] zeroinitializer, align 16
@n_earlyclobbers = external local_unnamed_addr global i32, align 4
@reload_earlyclobbers = external local_unnamed_addr global [30 x ptr], align 16
@reg_used_in_insn = internal global i64 0, align 8
@reg_reloaded_dead = internal unnamed_addr global i64 0, align 8
@reload_override_in = internal unnamed_addr global [180 x ptr] zeroinitializer, align 16
@reg_reloaded_insn = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@reload_inheritance_insn = internal unnamed_addr global [180 x ptr] zeroinitializer, align 16
@reload_inherited = internal unnamed_addr global [180 x i8] zeroinitializer, align 16
@reload_reg_used_for_inherit = internal unnamed_addr global i64 0, align 8
@reload_reg_unavailable = internal unnamed_addr global i64 0, align 8
@reload_reg_used_at_all = internal unnamed_addr global i64 0, align 8
@reload_reg_used = internal unnamed_addr global i64 0, align 8
@reload_reg_used_in_op_addr = internal unnamed_addr global i64 0, align 8
@reload_reg_used_in_op_addr_reload = internal unnamed_addr global i64 0, align 8
@reload_reg_used_in_insn = internal unnamed_addr global i64 0, align 8
@reload_reg_used_in_other_addr = internal unnamed_addr global i64 0, align 8
@reload_n_operands = external local_unnamed_addr global i32, align 4
@reload_reg_used_in_output = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@reload_reg_used_in_input = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@reload_reg_used_in_input_addr = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@reload_reg_used_in_inpaddr_addr = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@reload_reg_used_in_output_addr = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@reload_reg_used_in_outaddr_addr = internal unnamed_addr global [30 x i64] zeroinitializer, align 16
@.str.19 = private unnamed_addr constant [32 x i8] c"could not find a spill register\00", align 1
@.str.20 = private unnamed_addr constant [58 x i8] c"%<asm%> operand constraint incompatible with operand size\00", align 1
@reg_reloaded_died = internal unnamed_addr global i64 0, align 8
@other_output_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@outaddr_address_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@output_address_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@output_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@inpaddr_address_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@input_address_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@input_reload_insns = internal unnamed_addr global [30 x ptr] zeroinitializer, align 16
@other_input_address_reload_insns = internal unnamed_addr global ptr null, align 8
@other_input_reload_insns = internal unnamed_addr global ptr null, align 8
@operand_reload_insns = internal unnamed_addr global ptr null, align 8
@other_operand_reload_insns = internal unnamed_addr global ptr null, align 8
@new_spill_reg_store = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@reload_reg_rtx_for_output = internal unnamed_addr global [180 x ptr] zeroinitializer, align 16
@spill_reg_stored_to = internal unnamed_addr global [53 x ptr] zeroinitializer, align 16
@reload_reg_rtx_for_input = internal unnamed_addr global [180 x ptr] zeroinitializer, align 16
@optab_table = external local_unnamed_addr global [159 x %struct.optab_d], align 16
@.str.21 = private unnamed_addr constant [26 x i8] c"Failure trying to reload:\00", align 1
@.str.22 = private unnamed_addr constant [22 x i8] c"VOIDmode on an output\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"output operand is constant in %<asm%>\00", align 1
@word_mode = external local_unnamed_addr global i32, align 4
@reg_raw_mode = external local_unnamed_addr global [53 x i32], align 16

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !6
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #19
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #19
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #19
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #19
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #19
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #19
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #19
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #19
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #19
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #19
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #19
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #19
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #19
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !22

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @init_reload() local_unnamed_addr #9 {
  %1 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 58) #19
  %2 = tail call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef 4) #19
  %3 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %1, ptr noundef %2) #19
  %4 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %3) #19
  store i8 0, ptr @spill_indirect_levels, align 1, !tbaa !17
  %5 = tail call i32 @memory_address_addr_space_p(i32 noundef 14, ptr noundef %4, i8 noundef zeroext 0) #19
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %0, %7
  %8 = phi ptr [ %11, %7 ], [ %4, %0 ]
  %9 = load i8, ptr @spill_indirect_levels, align 1, !tbaa !17
  %10 = add i8 %9, 1
  store i8 %10, ptr @spill_indirect_levels, align 1, !tbaa !17
  %11 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %8) #19
  %12 = tail call i32 @memory_address_addr_space_p(i32 noundef 14, ptr noundef %11, i8 noundef zeroext 0) #19
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %7, !llvm.loop !24

14:                                               ; preds = %7, %0
  %15 = tail call ptr @gen_rtx_fmt_s00_stat(i32 noundef 45, i32 noundef 16, ptr noundef nonnull @.str) #19
  %16 = tail call ptr @gen_rtx_MEM(i32 noundef 16, ptr noundef %15) #19
  %17 = tail call i32 @memory_address_addr_space_p(i32 noundef 14, ptr noundef %16, i8 noundef zeroext 0) #19
  %18 = trunc i32 %17 to i8
  store i8 %18, ptr @indirect_symref_ok, align 1, !tbaa !17
  br label %22

19:                                               ; preds = %22
  %20 = add nuw nsw i32 %23, 1
  %21 = icmp eq i32 %20, 53
  br i1 %21, label %31, label %22, !llvm.loop !25

22:                                               ; preds = %14, %19
  %23 = phi i32 [ 0, %14 ], [ %20, %19 ]
  %24 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef 6) #19
  %25 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %23) #19
  %26 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %24, ptr noundef %25) #19
  %27 = tail call ptr @plus_constant(ptr noundef %26, i64 noundef 4) #19
  %28 = tail call i32 @memory_address_addr_space_p(i32 noundef 14, ptr noundef %27, i8 noundef zeroext 0) #19
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %19, label %30

30:                                               ; preds = %22
  store i8 1, ptr @double_reg_address_ok, align 1, !tbaa !17
  br label %31

31:                                               ; preds = %19, %30
  %32 = tail call i32 @_obstack_begin(ptr noundef nonnull @reload_obstack, i32 noundef 0, i32 noundef 0, ptr noundef nonnull @xmalloc, ptr noundef nonnull @free) #19
  store i64 0, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %33 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %34 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %35 = ptrtoint ptr %33 to i64
  %36 = ptrtoint ptr %34 to i64
  %37 = sub i64 %35, %36
  %38 = icmp slt i64 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %31
  tail call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 0) #19
  %40 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %41 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %42

42:                                               ; preds = %31, %39
  %43 = phi ptr [ %34, %31 ], [ %41, %39 ]
  %44 = phi i64 [ 0, %31 ], [ %40, %39 ]
  %45 = getelementptr inbounds i8, ptr %43, i64 %44
  %46 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %47 = icmp eq ptr %45, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %42
  %49 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %50 = or i8 %49, 2
  store i8 %50, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %51

51:                                               ; preds = %42, %48
  %52 = ptrtoint ptr %46 to i64
  store i64 %52, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %53 = ptrtoint ptr %45 to i64
  %54 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %55 = sext i32 %54 to i64
  %56 = add nsw i64 %55, %53
  %57 = xor i32 %54, -1
  %58 = sext i32 %57 to i64
  %59 = and i64 %56, %58
  %60 = inttoptr i64 %59 to ptr
  %61 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %62 = ptrtoint ptr %61 to i64
  %63 = sub i64 %59, %62
  %64 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %65 = ptrtoint ptr %64 to i64
  %66 = sub i64 %65, %62
  %67 = icmp sgt i64 %63, %66
  %68 = select i1 %67, ptr %64, ptr %60
  store ptr %68, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %68, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %46, ptr @reload_startobj, align 8, !tbaa !6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @spilled_pseudos, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr getelementptr inbounds (%struct.bitmap_head_def, ptr @spilled_pseudos, i64 0, i32 3), align 8, !tbaa !33
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @changed_allocation_pseudos, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr getelementptr inbounds (%struct.bitmap_head_def, ptr @changed_allocation_pseudos, i64 0, i32 3), align 8, !tbaa !33
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @pseudos_counted, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr getelementptr inbounds (%struct.bitmap_head_def, ptr @pseudos_counted, i64 0, i32 3), align 8, !tbaa !33
  ret void
}

declare ptr @gen_rtx_MEM(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_ee_stat(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_REG(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @gen_rtx_CONST_INT(i32 noundef, i64 noundef) local_unnamed_addr #3

declare i32 @memory_address_addr_space_p(i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_s00_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @plus_constant(ptr noundef, i64 noundef) local_unnamed_addr #3

declare i32 @_obstack_begin(ptr noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @xmalloc(i64 noundef) #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #10

declare void @_obstack_newchunk(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @new_insn_chain() local_unnamed_addr #9 {
  %1 = load ptr, ptr @unused_insn_chains, align 8, !tbaa !6
  %2 = icmp eq ptr %1, null
  br i1 %2, label %3, label %44

3:                                                ; preds = %0
  store i64 128, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %4 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %5 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %6 = ptrtoint ptr %4 to i64
  %7 = ptrtoint ptr %5 to i64
  %8 = sub i64 %6, %7
  %9 = icmp slt i64 %8, 128
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  tail call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 128) #19
  %11 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %12 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi ptr [ %5, %3 ], [ %12, %10 ]
  %15 = phi i64 [ 128, %3 ], [ %11, %10 ]
  %16 = getelementptr inbounds i8, ptr %14, i64 %15
  %17 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %18 = icmp eq ptr %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %13
  %20 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %21 = or i8 %20, 2
  store i8 %21, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %22

22:                                               ; preds = %13, %19
  %23 = ptrtoint ptr %17 to i64
  store i64 %23, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %24 = ptrtoint ptr %16 to i64
  %25 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, %24
  %28 = xor i32 %25, -1
  %29 = sext i32 %28 to i64
  %30 = and i64 %27, %29
  %31 = inttoptr i64 %30 to ptr
  %32 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %33 = ptrtoint ptr %32 to i64
  %34 = sub i64 %30, %33
  %35 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %36 = ptrtoint ptr %35 to i64
  %37 = sub i64 %36, %33
  %38 = icmp sgt i64 %34, %37
  %39 = select i1 %38, ptr %35, ptr %31
  store ptr %39, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %39, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %40 = getelementptr inbounds %struct.insn_chain, ptr %17, i64 0, i32 6
  %41 = getelementptr inbounds %struct.insn_chain, ptr %17, i64 0, i32 6, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %40, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr %41, align 8, !tbaa !33
  %42 = getelementptr inbounds %struct.insn_chain, ptr %17, i64 0, i32 7
  %43 = getelementptr inbounds %struct.insn_chain, ptr %17, i64 0, i32 7, i32 3
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %42, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr %43, align 8, !tbaa !33
  br label %46

44:                                               ; preds = %0
  %45 = load ptr, ptr %1, align 8, !tbaa !35
  store ptr %45, ptr @unused_insn_chains, align 8, !tbaa !6
  br label %46

46:                                               ; preds = %44, %22
  %47 = phi ptr [ %17, %22 ], [ %1, %44 ]
  %48 = getelementptr inbounds %struct.insn_chain, ptr %47, i64 0, i32 5
  %49 = load i8, ptr %48, align 4
  %50 = and i8 %49, -16
  store i8 %50, ptr %48, align 4
  ret ptr %47
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @compute_use_by_pseudos(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr %1, align 8, !tbaa !37
  %4 = icmp eq ptr %3, null
  %5 = select i1 %4, ptr @bitmap_zero_bits, ptr %3
  %6 = getelementptr inbounds %struct.bitmap_element_def, ptr %5, i64 0, i32 2
  %7 = load i32, ptr %6, align 8, !tbaa !38
  %8 = icmp eq i32 %7, 0
  %9 = shl i32 %7, 7
  %10 = select i1 %8, i32 53, i32 %9
  %11 = getelementptr inbounds %struct.bitmap_element_def, ptr %5, i64 0, i32 3, i64 0
  %12 = load i64, ptr %11, align 8, !tbaa !40
  %13 = and i32 %10, 53
  %14 = zext i32 %13 to i64
  %15 = lshr i64 %12, %14
  %16 = icmp eq i64 %15, 0
  %17 = zext i1 %16 to i32
  %18 = add nuw nsw i32 %10, %17
  br label %19

19:                                               ; preds = %146, %2
  %20 = phi i64 [ %15, %2 ], [ %147, %146 ]
  %21 = phi i32 [ 0, %2 ], [ %27, %146 ]
  %22 = phi i32 [ %18, %2 ], [ %148, %146 ]
  %23 = phi ptr [ %5, %2 ], [ %29, %146 ]
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %48, %19
  %26 = phi i64 [ %20, %19 ], [ %53, %48 ]
  %27 = phi i32 [ %21, %19 ], [ %49, %48 ]
  %28 = phi i32 [ %22, %19 ], [ %50, %48 ]
  %29 = phi ptr [ %23, %19 ], [ %45, %48 ]
  %30 = and i64 %26, 1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %66

32:                                               ; preds = %25, %32
  %33 = phi i32 [ %36, %32 ], [ %28, %25 ]
  %34 = phi i64 [ %35, %32 ], [ %26, %25 ]
  %35 = lshr i64 %34, 1
  %36 = add i32 %33, 1
  %37 = and i64 %34, 2
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %32, label %66, !llvm.loop !41

39:                                               ; preds = %19
  %40 = add i32 %22, 63
  %41 = and i32 %40, -64
  %42 = add i32 %21, 1
  br label %43

43:                                               ; preds = %62, %39
  %44 = phi i32 [ %41, %39 ], [ %65, %62 ]
  %45 = phi ptr [ %23, %39 ], [ %60, %62 ]
  %46 = phi i32 [ %42, %39 ], [ 0, %62 ]
  %47 = icmp eq i32 %46, 2
  br i1 %47, label %59, label %48

48:                                               ; preds = %43, %55
  %49 = phi i32 [ %57, %55 ], [ %46, %43 ]
  %50 = phi i32 [ %56, %55 ], [ %44, %43 ]
  %51 = zext i32 %49 to i64
  %52 = getelementptr inbounds %struct.bitmap_element_def, ptr %45, i64 0, i32 3, i64 %51
  %53 = load i64, ptr %52, align 8, !tbaa !40
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %25

55:                                               ; preds = %48
  %56 = add i32 %50, 64
  %57 = add i32 %49, 1
  %58 = icmp eq i32 %57, 2
  br i1 %58, label %59, label %48, !llvm.loop !42

59:                                               ; preds = %55, %43
  %60 = load ptr, ptr %45, align 8, !tbaa !43
  %61 = icmp eq ptr %60, null
  br i1 %61, label %149, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.bitmap_element_def, ptr %60, i64 0, i32 2
  %64 = load i32, ptr %63, align 8, !tbaa !38
  %65 = shl i32 %64, 7
  br label %43

66:                                               ; preds = %32, %25
  %67 = phi i64 [ %26, %25 ], [ %35, %32 ]
  %68 = phi i32 [ %28, %25 ], [ %36, %32 ]
  %69 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds i16, ptr %69, i64 %70
  %72 = load i16, ptr %71, align 2, !tbaa !44
  %73 = icmp slt i16 %72, 0
  br i1 %73, label %74, label %81

74:                                               ; preds = %66
  %75 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %76 = icmp ne i8 %75, 0
  %77 = load i32, ptr @reload_completed, align 4
  %78 = icmp ne i32 %77, 0
  %79 = select i1 %76, i1 true, i1 %78
  br i1 %79, label %146, label %80

80:                                               ; preds = %74
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 575, ptr noundef nonnull @.str.2) #19
  br label %146

81:                                               ; preds = %66
  %82 = zext i16 %72 to i64
  %83 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %84 = getelementptr inbounds ptr, ptr %83, i64 %70
  %85 = load ptr, ptr %84, align 8, !tbaa !6
  %86 = load i32, ptr %85, align 8
  %87 = lshr i32 %86, 16
  %88 = and i32 %87, 255
  %89 = zext i16 %72 to i64
  %90 = zext i32 %88 to i64
  %91 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %89, i64 %90
  %92 = load i8, ptr %91, align 1, !tbaa !17
  %93 = zext i8 %92 to i64
  %94 = add nuw nsw i64 %93, %82
  %95 = load i64, ptr %0, align 8, !tbaa !40
  %96 = add nuw nsw i64 %89, 1
  %97 = tail call i64 @llvm.umax.i64(i64 %94, i64 %96)
  %98 = sub nsw i64 %97, %89
  %99 = icmp ult i64 %98, 8
  br i1 %99, label %134, label %100

100:                                              ; preds = %81
  %101 = and i64 %98, -8
  %102 = add nsw i64 %101, %89
  %103 = insertelement <2 x i64> poison, i64 %89, i64 0
  %104 = shufflevector <2 x i64> %103, <2 x i64> poison, <2 x i32> zeroinitializer
  %105 = add nuw nsw <2 x i64> %104, <i64 0, i64 1>
  %106 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %95, i64 0
  br label %107

107:                                              ; preds = %107, %100
  %108 = phi i64 [ 0, %100 ], [ %125, %107 ]
  %109 = phi <2 x i64> [ %105, %100 ], [ %126, %107 ]
  %110 = phi <2 x i64> [ %106, %100 ], [ %121, %107 ]
  %111 = phi <2 x i64> [ zeroinitializer, %100 ], [ %122, %107 ]
  %112 = phi <2 x i64> [ zeroinitializer, %100 ], [ %123, %107 ]
  %113 = phi <2 x i64> [ zeroinitializer, %100 ], [ %124, %107 ]
  %114 = add <2 x i64> %109, <i64 2, i64 2>
  %115 = add <2 x i64> %109, <i64 4, i64 4>
  %116 = add <2 x i64> %109, <i64 6, i64 6>
  %117 = shl nuw <2 x i64> <i64 1, i64 1>, %109
  %118 = shl nuw <2 x i64> <i64 1, i64 1>, %114
  %119 = shl nuw <2 x i64> <i64 1, i64 1>, %115
  %120 = shl nuw <2 x i64> <i64 1, i64 1>, %116
  %121 = or <2 x i64> %117, %110
  %122 = or <2 x i64> %118, %111
  %123 = or <2 x i64> %119, %112
  %124 = or <2 x i64> %120, %113
  %125 = add nuw i64 %108, 8
  %126 = add <2 x i64> %109, <i64 8, i64 8>
  %127 = icmp eq i64 %125, %101
  br i1 %127, label %128, label %107, !llvm.loop !45

128:                                              ; preds = %107
  %129 = or <2 x i64> %122, %121
  %130 = or <2 x i64> %123, %129
  %131 = or <2 x i64> %124, %130
  %132 = tail call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %131)
  %133 = icmp eq i64 %98, %101
  br i1 %133, label %144, label %134

134:                                              ; preds = %81, %128
  %135 = phi i64 [ %89, %81 ], [ %102, %128 ]
  %136 = phi i64 [ %95, %81 ], [ %132, %128 ]
  br label %137

137:                                              ; preds = %134, %137
  %138 = phi i64 [ %142, %137 ], [ %135, %134 ]
  %139 = phi i64 [ %141, %137 ], [ %136, %134 ]
  %140 = shl nuw i64 1, %138
  %141 = or i64 %140, %139
  %142 = add nuw nsw i64 %138, 1
  %143 = icmp ult i64 %142, %94
  br i1 %143, label %137, label %144, !llvm.loop !48

144:                                              ; preds = %137, %128
  %145 = phi i64 [ %132, %128 ], [ %141, %137 ]
  store i64 %145, ptr %0, align 8, !tbaa !40
  br label %146

146:                                              ; preds = %80, %74, %144
  %147 = lshr i64 %67, 1
  %148 = add i32 %68, 1
  br label %19, !llvm.loop !49

149:                                              ; preds = %59
  ret void
}

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @reload(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca [30 x ptr], align 16
  %7 = alloca [30 x i32], align 16
  tail call void @init_recog() #19
  store i1 false, ptr @failure, align 4
  store i64 0, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %8 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %9 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %10 = ptrtoint ptr %8 to i64
  %11 = ptrtoint ptr %9 to i64
  %12 = sub i64 %10, %11
  %13 = icmp slt i64 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  tail call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 0) #19
  %15 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %16 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %17

17:                                               ; preds = %2, %14
  %18 = phi ptr [ %9, %2 ], [ %16, %14 ]
  %19 = phi i64 [ 0, %2 ], [ %15, %14 ]
  %20 = getelementptr inbounds i8, ptr %18, i64 %19
  %21 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %22 = icmp eq ptr %20, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %25 = or i8 %24, 2
  store i8 %25, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %26

26:                                               ; preds = %17, %23
  %27 = ptrtoint ptr %21 to i64
  store i64 %27, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %28 = ptrtoint ptr %20 to i64
  %29 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, %28
  %32 = xor i32 %29, -1
  %33 = sext i32 %32 to i64
  %34 = and i64 %31, %33
  %35 = inttoptr i64 %34 to ptr
  %36 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %37 = ptrtoint ptr %36 to i64
  %38 = sub i64 %34, %37
  %39 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %40 = ptrtoint ptr %39 to i64
  %41 = sub i64 %40, %37
  %42 = icmp sgt i64 %38, %41
  %43 = select i1 %42, ptr %39, ptr %35
  store ptr %43, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %43, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %21, ptr @reload_firstobj, align 8, !tbaa !6
  %44 = tail call ptr @emit_note(i32 noundef 0) #19
  %45 = tail call i32 @get_max_uid() #19
  store i32 %45, ptr @reload_first_uid, align 4, !tbaa !21
  tail call void @clear_secondary_mem() #19
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(424) @spill_stack_slot, i8 0, i64 424, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(212) @spill_stack_slot_width, i8 0, i64 212, i1 false)
  tail call void @init_save_areas() #19
  %46 = load i32, ptr @max_regno, align 4, !tbaa !21
  %47 = icmp sgt i32 %46, 53
  br i1 %47, label %48, label %81

48:                                               ; preds = %26, %76
  %49 = phi i32 [ %77, %76 ], [ %46, %26 ]
  %50 = phi i64 [ %78, %76 ], [ 53, %26 ]
  %51 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %52 = getelementptr inbounds i16, ptr %51, i64 %50
  %53 = load i16, ptr %52, align 2, !tbaa !44
  %54 = icmp sgt i16 %53, -1
  br i1 %54, label %55, label %76

55:                                               ; preds = %48
  %56 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %57 = getelementptr inbounds ptr, ptr %56, i64 %50
  %58 = load ptr, ptr %57, align 8, !tbaa !6
  %59 = load i32, ptr %58, align 8
  %60 = lshr i32 %59, 16
  %61 = and i32 %60, 255
  %62 = zext i16 %53 to i32
  %63 = zext i16 %53 to i64
  %64 = zext i32 %61 to i64
  %65 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %63, i64 %64
  %66 = load i8, ptr %65, align 1, !tbaa !17
  %67 = zext i8 %66 to i32
  %68 = add nuw nsw i32 %67, %62
  %69 = icmp eq i8 %66, 0
  br i1 %69, label %76, label %70

70:                                               ; preds = %55, %70
  %71 = phi i32 [ %72, %70 ], [ %62, %55 ]
  %72 = add nuw nsw i32 %71, 1
  tail call void @df_set_regs_ever_live(i32 noundef %71, i8 noundef zeroext 1) #19
  %73 = icmp ult i32 %72, %68
  br i1 %73, label %70, label %74, !llvm.loop !50

74:                                               ; preds = %70
  %75 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %76

76:                                               ; preds = %74, %48, %55
  %77 = phi i32 [ %75, %74 ], [ %49, %48 ], [ %49, %55 ]
  %78 = add nuw nsw i64 %50, 1
  %79 = sext i32 %77 to i64
  %80 = icmp slt i64 %78, %79
  br i1 %80, label %48, label %81, !llvm.loop !51

81:                                               ; preds = %76, %26
  %82 = load ptr, ptr @cfun, align 8, !tbaa !6
  %83 = getelementptr inbounds %struct.function, ptr %82, i64 0, i32 20
  %84 = load i32, ptr %83, align 8
  %85 = and i32 %84, 1048576
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %221, label %87

87:                                               ; preds = %81
  %88 = load i32, ptr @optimize, align 4, !tbaa !21
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %220, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds %struct.function, ptr %82, i64 0, i32 1
  %92 = load ptr, ptr %91, align 8, !tbaa !52
  %93 = getelementptr inbounds %struct.control_flow_graph, ptr %92, i64 0, i32 3
  %94 = load i32, ptr %93, align 8, !tbaa !54
  %95 = add nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = shl nsw i64 %96, 3
  %98 = tail call ptr @xmalloc(i64 noundef %97) #19
  %99 = load ptr, ptr @cfun, align 8, !tbaa !6
  %100 = getelementptr inbounds %struct.function, ptr %99, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !52
  %102 = load ptr, ptr %101, align 8, !tbaa !56
  %103 = getelementptr inbounds %struct.control_flow_graph, ptr %101, i64 0, i32 1
  %104 = load ptr, ptr %103, align 8, !tbaa !57
  %105 = getelementptr inbounds %struct.basic_block_def, ptr %102, i64 0, i32 6
  %106 = load ptr, ptr %105, align 8, !tbaa !58
  %107 = icmp eq ptr %106, %104
  br i1 %107, label %116, label %108

108:                                              ; preds = %90, %108
  %109 = phi ptr [ %114, %108 ], [ %106, %90 ]
  %110 = getelementptr inbounds %struct.basic_block_def, ptr %109, i64 0, i32 13
  %111 = load i32, ptr %110, align 8, !tbaa !60
  %112 = and i32 %111, -3
  store i32 %112, ptr %110, align 8, !tbaa !60
  %113 = getelementptr inbounds %struct.basic_block_def, ptr %109, i64 0, i32 6
  %114 = load ptr, ptr %113, align 8, !tbaa !58
  %115 = icmp eq ptr %114, %104
  br i1 %115, label %116, label %108, !llvm.loop !61

116:                                              ; preds = %108, %90
  %117 = getelementptr inbounds %struct.basic_block_def, ptr %104, i64 0, i32 13
  %118 = load i32, ptr %117, align 8, !tbaa !60
  %119 = or i32 %118, 2
  store i32 %119, ptr %117, align 8, !tbaa !60
  %120 = getelementptr inbounds ptr, ptr %98, i64 1
  store ptr %104, ptr %98, align 8, !tbaa !6
  br label %124

121:                                              ; preds = %137, %129
  %122 = phi ptr [ %126, %129 ], [ %132, %137 ]
  %123 = icmp eq ptr %122, %98
  br i1 %123, label %169, label %124, !llvm.loop !62

124:                                              ; preds = %121, %116
  %125 = phi ptr [ %120, %116 ], [ %122, %121 ]
  %126 = getelementptr inbounds ptr, ptr %125, i64 -1
  %127 = load ptr, ptr %126, align 8, !tbaa !6
  %128 = icmp eq ptr %127, null
  br i1 %128, label %129, label %130

129:                                              ; preds = %124
  tail call void @fancy_abort(ptr noundef nonnull @.str.8, i32 noundef 687, ptr noundef nonnull @.str.2) #19
  br label %121

130:                                              ; preds = %124, %166
  %131 = phi i32 [ %168, %166 ], [ 0, %124 ]
  %132 = phi ptr [ %167, %166 ], [ %126, %124 ]
  %133 = load ptr, ptr %127, align 8, !tbaa !6
  %134 = icmp eq ptr %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %130
  %136 = load i32, ptr %133, align 8, !tbaa !63
  br label %137

137:                                              ; preds = %135, %130
  %138 = phi i32 [ %136, %135 ], [ 0, %130 ]
  %139 = icmp eq i32 %138, %131
  br i1 %139, label %121, label %140

140:                                              ; preds = %137
  %141 = zext i32 %131 to i64
  %142 = getelementptr inbounds %struct.VEC_edge_base, ptr %133, i64 0, i32 2, i64 %141
  %143 = load ptr, ptr %142, align 8, !tbaa !6
  %144 = getelementptr inbounds %struct.edge_def, ptr %143, i64 0, i32 7
  %145 = load i32, ptr %144, align 8, !tbaa !65
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %159

148:                                              ; preds = %140
  %149 = load ptr, ptr %143, align 8, !tbaa !67
  %150 = getelementptr inbounds %struct.basic_block_def, ptr %149, i64 0, i32 13
  %151 = load i32, ptr %150, align 8, !tbaa !60
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %159

154:                                              ; preds = %148
  %155 = or i32 %151, 2
  store i32 %155, ptr %150, align 8, !tbaa !60
  %156 = getelementptr inbounds ptr, ptr %132, i64 1
  store ptr %149, ptr %132, align 8, !tbaa !6
  %157 = load ptr, ptr %127, align 8, !tbaa !6
  %158 = icmp eq ptr %157, null
  br i1 %158, label %164, label %159

159:                                              ; preds = %154, %148, %140
  %160 = phi ptr [ %156, %154 ], [ %132, %140 ], [ %132, %148 ]
  %161 = phi ptr [ %157, %154 ], [ %133, %140 ], [ %133, %148 ]
  %162 = load i32, ptr %161, align 8, !tbaa !63
  %163 = icmp ult i32 %131, %162
  br i1 %163, label %166, label %164

164:                                              ; preds = %159, %154
  %165 = phi ptr [ %160, %159 ], [ %156, %154 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.8, i32 noundef 738, ptr noundef nonnull @.str.2) #19
  br label %166

166:                                              ; preds = %164, %159
  %167 = phi ptr [ %160, %159 ], [ %165, %164 ]
  %168 = add i32 %131, 1
  br label %130, !llvm.loop !68

169:                                              ; preds = %121
  tail call void @free(ptr noundef %98)
  %170 = load ptr, ptr @cfun, align 8, !tbaa !6
  %171 = getelementptr inbounds %struct.function, ptr %170, i64 0, i32 1
  %172 = load ptr, ptr %171, align 8, !tbaa !52
  %173 = load ptr, ptr %172, align 8, !tbaa !56
  %174 = getelementptr inbounds %struct.basic_block_def, ptr %173, i64 0, i32 6
  %175 = load ptr, ptr %174, align 8, !tbaa !58
  %176 = getelementptr inbounds %struct.control_flow_graph, ptr %172, i64 0, i32 1
  %177 = load ptr, ptr %176, align 8, !tbaa !57
  %178 = icmp eq ptr %175, %177
  br i1 %178, label %221, label %179

179:                                              ; preds = %169, %211
  %180 = phi ptr [ %212, %211 ], [ %170, %169 ]
  %181 = phi ptr [ %214, %211 ], [ %175, %169 ]
  %182 = getelementptr inbounds %struct.basic_block_def, ptr %181, i64 0, i32 13
  %183 = load i32, ptr %182, align 8, !tbaa !60
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %211, label %186

186:                                              ; preds = %179, %207
  %187 = phi i32 [ %208, %207 ], [ 0, %179 ]
  %188 = load ptr, ptr %181, align 8, !tbaa !6
  %189 = icmp eq ptr %188, null
  br i1 %189, label %192, label %190

190:                                              ; preds = %186
  %191 = load i32, ptr %188, align 8, !tbaa !63
  br label %192

192:                                              ; preds = %190, %186
  %193 = phi i32 [ %191, %190 ], [ 0, %186 ]
  %194 = icmp eq i32 %193, %187
  br i1 %194, label %209, label %195

195:                                              ; preds = %192
  %196 = zext i32 %187 to i64
  %197 = getelementptr inbounds %struct.VEC_edge_base, ptr %188, i64 0, i32 2, i64 %196
  %198 = load ptr, ptr %197, align 8, !tbaa !6
  %199 = getelementptr inbounds %struct.edge_def, ptr %198, i64 0, i32 7
  %200 = load i32, ptr %199, align 8, !tbaa !65
  %201 = and i32 %200, 2
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %220

203:                                              ; preds = %195
  %204 = load i32, ptr %188, align 8, !tbaa !63
  %205 = icmp ult i32 %187, %204
  br i1 %205, label %207, label %206

206:                                              ; preds = %203
  tail call void @fancy_abort(ptr noundef nonnull @.str.8, i32 noundef 738, ptr noundef nonnull @.str.2) #19
  br label %207

207:                                              ; preds = %206, %203
  %208 = add i32 %187, 1
  br label %186, !llvm.loop !69

209:                                              ; preds = %192
  %210 = load ptr, ptr @cfun, align 8, !tbaa !6
  br label %211

211:                                              ; preds = %209, %179
  %212 = phi ptr [ %210, %209 ], [ %180, %179 ]
  %213 = getelementptr inbounds %struct.basic_block_def, ptr %181, i64 0, i32 6
  %214 = load ptr, ptr %213, align 8, !tbaa !58
  %215 = getelementptr inbounds %struct.function, ptr %212, i64 0, i32 1
  %216 = load ptr, ptr %215, align 8, !tbaa !52
  %217 = getelementptr inbounds %struct.control_flow_graph, ptr %216, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !57
  %219 = icmp eq ptr %214, %218
  br i1 %219, label %221, label %179, !llvm.loop !70

220:                                              ; preds = %195, %87
  store i8 1, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 30), align 2, !tbaa !71
  br label %224

221:                                              ; preds = %211, %81, %169
  %222 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 30), align 2, !tbaa !71
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %239, label %224

224:                                              ; preds = %220, %221
  br label %225

225:                                              ; preds = %224, %236
  %226 = phi i64 [ %237, %236 ], [ 0, %224 ]
  %227 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %226
  %228 = load i8, ptr %227, align 1, !tbaa !17
  %229 = icmp eq i8 %228, 0
  br i1 %229, label %230, label %236

230:                                              ; preds = %225
  %231 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %226
  %232 = load i8, ptr %231, align 1, !tbaa !17
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %234, label %236

234:                                              ; preds = %230
  %235 = trunc i64 %226 to i32
  tail call void @df_set_regs_ever_live(i32 noundef %235, i8 noundef zeroext 1) #19
  br label %236

236:                                              ; preds = %225, %230, %234
  %237 = add nuw nsw i64 %226, 1
  %238 = icmp eq i64 %237, 53
  br i1 %238, label %239, label %225, !llvm.loop !80

239:                                              ; preds = %236, %221
  %240 = load i32, ptr @max_regno, align 4, !tbaa !21
  %241 = sext i32 %240 to i64
  %242 = tail call ptr @xcalloc(i64 noundef %241, i64 noundef 8) #19
  store ptr %242, ptr @reg_equiv_constant, align 8, !tbaa !6
  %243 = load i32, ptr @max_regno, align 4, !tbaa !21
  %244 = sext i32 %243 to i64
  %245 = tail call ptr @xcalloc(i64 noundef %244, i64 noundef 8) #19
  store ptr %245, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %246 = load i32, ptr @max_regno, align 4, !tbaa !21
  %247 = sext i32 %246 to i64
  %248 = tail call ptr @xcalloc(i64 noundef %247, i64 noundef 8) #19
  store ptr %248, ptr @reg_equiv_mem, align 8, !tbaa !6
  %249 = load i32, ptr @max_regno, align 4, !tbaa !21
  %250 = sext i32 %249 to i64
  %251 = tail call ptr @xcalloc(i64 noundef %250, i64 noundef 8) #19
  store ptr %251, ptr @reg_equiv_alt_mem_list, align 8, !tbaa !6
  %252 = load i32, ptr @max_regno, align 4, !tbaa !21
  %253 = sext i32 %252 to i64
  %254 = tail call ptr @xcalloc(i64 noundef %253, i64 noundef 8) #19
  store ptr %254, ptr @reg_equiv_address, align 8, !tbaa !6
  %255 = load i32, ptr @max_regno, align 4, !tbaa !21
  %256 = sext i32 %255 to i64
  %257 = tail call ptr @xcalloc(i64 noundef %256, i64 noundef 4) #19
  store ptr %257, ptr @reg_max_ref_width, align 8, !tbaa !6
  %258 = load i32, ptr @max_regno, align 4, !tbaa !21
  %259 = sext i32 %258 to i64
  %260 = tail call ptr @xcalloc(i64 noundef %259, i64 noundef 2) #19
  store ptr %260, ptr @reg_old_renumber, align 8, !tbaa !6
  %261 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %262 = load i32, ptr @max_regno, align 4, !tbaa !21
  %263 = sext i32 %262 to i64
  %264 = shl nsw i64 %263, 1
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 2 %260, ptr align 2 %261, i64 %264, i1 false)
  %265 = load i32, ptr @max_regno, align 4, !tbaa !21
  %266 = sext i32 %265 to i64
  %267 = shl nsw i64 %266, 3
  %268 = tail call ptr @xmalloc(i64 noundef %267) #19
  store ptr %268, ptr @pseudo_forbidden_regs, align 8, !tbaa !6
  %269 = load i32, ptr @max_regno, align 4, !tbaa !21
  %270 = sext i32 %269 to i64
  %271 = tail call ptr @xcalloc(i64 noundef %270, i64 noundef 8) #19
  store ptr %271, ptr @pseudo_previous_regs, align 8, !tbaa !6
  store i64 0, ptr @bad_spill_regs_global, align 8, !tbaa !40
  store i32 0, ptr @num_eliminable_invariants, align 4, !tbaa !21
  %272 = icmp eq ptr %0, null
  br i1 %272, label %473, label %273

273:                                              ; preds = %239, %469
  %274 = phi ptr [ %471, %469 ], [ %0, %239 ]
  %275 = load i32, ptr %274, align 8
  %276 = and i32 %275, 65535
  %277 = add nsw i32 %276, -7
  %278 = icmp ult i32 %277, 4
  br i1 %278, label %279, label %290

279:                                              ; preds = %273
  %280 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 1
  %281 = load ptr, ptr %280, align 8, !tbaa !17
  %282 = load i32, ptr %281, align 8
  %283 = and i32 %282, 65535
  %284 = icmp eq i32 %283, 23
  br i1 %284, label %296, label %285

285:                                              ; preds = %279
  %286 = tail call ptr @single_set_2(ptr noundef nonnull %274, ptr noundef nonnull %281) #19
  %287 = load i32, ptr %274, align 8
  %288 = and i32 %287, 65535
  %289 = add nsw i32 %288, -7
  br label %290

290:                                              ; preds = %273, %285
  %291 = phi i32 [ %277, %273 ], [ %289, %285 ]
  %292 = phi i32 [ %276, %273 ], [ %288, %285 ]
  %293 = phi i32 [ %275, %273 ], [ %287, %285 ]
  %294 = phi ptr [ null, %273 ], [ %286, %285 ]
  %295 = icmp ult i32 %291, 4
  br i1 %295, label %296, label %311

296:                                              ; preds = %279, %290
  %297 = phi ptr [ %294, %290 ], [ %281, %279 ]
  %298 = phi i32 [ %293, %290 ], [ %275, %279 ]
  %299 = phi i32 [ %292, %290 ], [ %276, %279 ]
  %300 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 1
  %301 = load ptr, ptr %300, align 8, !tbaa !17
  %302 = load i32, ptr %301, align 8
  %303 = and i32 %302, 65535
  %304 = icmp ne i32 %303, 24
  %305 = and i32 %298, 16711680
  %306 = icmp eq i32 %305, 0
  %307 = or i1 %306, %304
  br i1 %307, label %311, label %308

308:                                              ; preds = %296
  %309 = and i32 %298, -16711681
  store i32 %309, ptr %274, align 8
  %310 = and i32 %298, 65535
  br label %311

311:                                              ; preds = %290, %308, %296
  %312 = phi ptr [ %294, %290 ], [ %297, %308 ], [ %297, %296 ]
  %313 = phi i32 [ %292, %290 ], [ %310, %308 ], [ %299, %296 ]
  %314 = add nsw i32 %313, -11
  %315 = icmp ult i32 %314, -3
  br i1 %315, label %319, label %316

316:                                              ; preds = %311
  %317 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 1
  %318 = load ptr, ptr %317, align 8, !tbaa !17
  tail call fastcc void @scan_paradoxical_subregs(ptr noundef %318)
  br label %319

319:                                              ; preds = %311, %316
  %320 = icmp eq ptr %312, null
  br i1 %320, label %469, label %321

321:                                              ; preds = %319
  %322 = getelementptr inbounds %struct.rtx_def, ptr %312, i64 0, i32 1
  %323 = load ptr, ptr %322, align 8, !tbaa !17
  %324 = load i32, ptr %323, align 8
  %325 = and i32 %324, 65535
  %326 = icmp eq i32 %325, 37
  br i1 %326, label %327, label %469

327:                                              ; preds = %321
  %328 = tail call ptr @find_reg_note(ptr noundef nonnull %274, i32 noundef 3, ptr noundef null) #19
  %329 = icmp eq ptr %328, null
  br i1 %329, label %469, label %330

330:                                              ; preds = %327
  %331 = load ptr, ptr %322, align 8, !tbaa !17
  %332 = getelementptr i8, ptr %331, i64 8
  %333 = load i32, ptr %332, align 8, !tbaa !17
  %334 = getelementptr inbounds %struct.rtx_def, ptr %328, i64 0, i32 1
  %335 = load ptr, ptr %334, align 8, !tbaa !17
  %336 = icmp slt i32 %333, 58
  br i1 %336, label %469, label %337

337:                                              ; preds = %330
  %338 = load i32, ptr %335, align 8
  %339 = and i32 %338, 65535
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %340
  %342 = load i32, ptr %341, align 4, !tbaa !17
  %343 = icmp eq i32 %342, 9
  br i1 %343, label %373, label %344

344:                                              ; preds = %337
  %345 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8, !tbaa !6
  %346 = icmp eq ptr %345, %335
  br i1 %346, label %370, label %347

347:                                              ; preds = %344
  %348 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !6
  %349 = icmp eq ptr %348, %335
  br i1 %349, label %370, label %350

350:                                              ; preds = %347
  %351 = icmp eq i32 %339, 49
  br i1 %351, label %352, label %379

352:                                              ; preds = %350
  %353 = getelementptr inbounds %struct.rtx_def, ptr %335, i64 0, i32 1
  %354 = load ptr, ptr %353, align 8, !tbaa !17
  %355 = icmp eq ptr %354, %345
  %356 = icmp eq ptr %354, %348
  %357 = or i1 %355, %356
  br i1 %357, label %358, label %379

358:                                              ; preds = %352
  %359 = getelementptr inbounds %struct.rtx_def, ptr %335, i64 0, i32 1, i32 0, i32 0, i64 1
  %360 = load ptr, ptr %359, align 8, !tbaa !17
  %361 = load i32, ptr %360, align 8
  %362 = and i32 %361, 65535
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %363
  %365 = load i32, ptr %364, align 4, !tbaa !17
  %366 = icmp eq i32 %365, 9
  %367 = load i32, ptr @flag_pic, align 4
  %368 = icmp ne i32 %367, 0
  %369 = select i1 %366, i1 %368, i1 false
  br i1 %369, label %465, label %379

370:                                              ; preds = %344, %347
  %371 = load i32, ptr @flag_pic, align 4
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %379, label %465

373:                                              ; preds = %337
  %374 = load i32, ptr @flag_pic, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %379, label %376

376:                                              ; preds = %373
  %377 = tail call zeroext i8 @legitimate_pic_operand_p(ptr noundef nonnull %335) #19
  %378 = icmp eq i8 %377, 0
  br i1 %378, label %465, label %379

379:                                              ; preds = %358, %352, %350, %373, %376, %370
  %380 = tail call i32 @memory_operand(ptr noundef nonnull %335, i32 noundef 0) #19
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %387, label %382

382:                                              ; preds = %379
  %383 = tail call ptr @copy_rtx(ptr noundef nonnull %335) #19
  %384 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %385 = zext i32 %333 to i64
  %386 = getelementptr inbounds ptr, ptr %384, i64 %385
  store ptr %383, ptr %386, align 8, !tbaa !6
  br label %469

387:                                              ; preds = %379
  %388 = load i32, ptr %335, align 8
  %389 = and i32 %388, 65535
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %390
  %392 = load i32, ptr %391, align 4, !tbaa !17
  %393 = icmp eq i32 %392, 9
  br i1 %393, label %417, label %394

394:                                              ; preds = %387
  %395 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8, !tbaa !6
  %396 = icmp eq ptr %395, %335
  br i1 %396, label %417, label %397

397:                                              ; preds = %394
  %398 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !6
  %399 = icmp eq ptr %398, %335
  br i1 %399, label %417, label %400

400:                                              ; preds = %397
  %401 = icmp eq i32 %389, 49
  br i1 %401, label %402, label %461

402:                                              ; preds = %400
  %403 = getelementptr inbounds %struct.rtx_def, ptr %335, i64 0, i32 1
  %404 = load ptr, ptr %403, align 8, !tbaa !17
  %405 = icmp eq ptr %404, %395
  %406 = icmp eq ptr %404, %398
  %407 = or i1 %405, %406
  br i1 %407, label %408, label %461

408:                                              ; preds = %402
  %409 = getelementptr inbounds %struct.rtx_def, ptr %335, i64 0, i32 1, i32 0, i32 0, i64 1
  %410 = load ptr, ptr %409, align 8, !tbaa !17
  %411 = load i32, ptr %410, align 8
  %412 = and i32 %411, 65535
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %413
  %415 = load i32, ptr %414, align 4, !tbaa !17
  %416 = icmp eq i32 %415, 9
  br i1 %416, label %419, label %461

417:                                              ; preds = %387, %397, %394
  %418 = icmp eq i32 %389, 49
  br i1 %418, label %419, label %426

419:                                              ; preds = %408, %417
  %420 = tail call ptr @copy_rtx(ptr noundef nonnull %335) #19
  %421 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %422 = zext i32 %333 to i64
  %423 = getelementptr inbounds ptr, ptr %421, i64 %422
  store ptr %420, ptr %423, align 8, !tbaa !6
  %424 = load i32, ptr @num_eliminable_invariants, align 4, !tbaa !21
  %425 = add nsw i32 %424, 1
  store i32 %425, ptr @num_eliminable_invariants, align 4, !tbaa !21
  br label %469

426:                                              ; preds = %417
  %427 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8, !tbaa !6
  %428 = icmp eq ptr %335, %427
  %429 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8
  %430 = icmp eq ptr %335, %429
  %431 = select i1 %428, i1 true, i1 %430
  br i1 %431, label %432, label %438

432:                                              ; preds = %426
  %433 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %434 = zext i32 %333 to i64
  %435 = getelementptr inbounds ptr, ptr %433, i64 %434
  store ptr %335, ptr %435, align 8, !tbaa !6
  %436 = load i32, ptr @num_eliminable_invariants, align 4, !tbaa !21
  %437 = add nsw i32 %436, 1
  store i32 %437, ptr @num_eliminable_invariants, align 4, !tbaa !21
  br label %469

438:                                              ; preds = %426
  %439 = tail call zeroext i8 @legitimate_constant_p(ptr noundef nonnull %335) #19
  %440 = icmp eq i8 %439, 0
  br i1 %440, label %445, label %441

441:                                              ; preds = %438
  %442 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %443 = zext i32 %333 to i64
  %444 = getelementptr inbounds ptr, ptr %442, i64 %443
  store ptr %335, ptr %444, align 8, !tbaa !6
  br label %469

445:                                              ; preds = %438
  %446 = load ptr, ptr %322, align 8, !tbaa !17
  %447 = load i32, ptr %446, align 8
  %448 = lshr i32 %447, 16
  %449 = and i32 %448, 255
  %450 = tail call ptr @force_const_mem(i32 noundef %449, ptr noundef nonnull %335) #19
  %451 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %452 = zext i32 %333 to i64
  %453 = getelementptr inbounds ptr, ptr %451, i64 %452
  store ptr %450, ptr %453, align 8, !tbaa !6
  %454 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %455 = getelementptr inbounds ptr, ptr %454, i64 %452
  %456 = load ptr, ptr %455, align 8, !tbaa !6
  %457 = icmp eq ptr %456, null
  br i1 %457, label %458, label %469

458:                                              ; preds = %445
  %459 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %460 = getelementptr inbounds ptr, ptr %459, i64 %452
  store ptr null, ptr %460, align 8, !tbaa !6
  br label %469

461:                                              ; preds = %408, %402, %400
  %462 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %463 = zext i32 %333 to i64
  %464 = getelementptr inbounds ptr, ptr %462, i64 %463
  store ptr null, ptr %464, align 8, !tbaa !6
  br label %469

465:                                              ; preds = %370, %358, %376
  %466 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %467 = zext i32 %333 to i64
  %468 = getelementptr inbounds ptr, ptr %466, i64 %467
  store ptr null, ptr %468, align 8, !tbaa !6
  br label %469

469:                                              ; preds = %461, %327, %330, %319, %321, %465, %432, %445, %458, %441, %419, %382
  %470 = getelementptr inbounds %struct.rtx_def, ptr %274, i64 0, i32 1, i32 0, i32 0, i64 2
  %471 = load ptr, ptr %470, align 8, !tbaa !17
  %472 = icmp eq ptr %471, null
  br i1 %472, label %473, label %273, !llvm.loop !81

473:                                              ; preds = %469, %239
  %474 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %475 = icmp ne ptr %474, null
  %476 = load i32, ptr @max_regno, align 4
  %477 = icmp sgt i32 %476, 53
  %478 = select i1 %475, i1 %477, i1 false
  br i1 %478, label %479, label %506

479:                                              ; preds = %473
  %480 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  br label %481

481:                                              ; preds = %479, %500
  %482 = phi i32 [ %476, %479 ], [ %501, %500 ]
  %483 = phi ptr [ %480, %479 ], [ %502, %500 ]
  %484 = phi i64 [ 53, %479 ], [ %503, %500 ]
  %485 = getelementptr inbounds ptr, ptr %483, i64 %484
  %486 = load ptr, ptr %485, align 8, !tbaa !6
  %487 = icmp eq ptr %486, null
  br i1 %487, label %500, label %488

488:                                              ; preds = %481
  %489 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %490 = trunc i64 %484 to i32
  %491 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %489, ptr noundef nonnull @.str.3, i32 noundef %490)
  %492 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %493 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %494 = getelementptr inbounds ptr, ptr %493, i64 %484
  %495 = load ptr, ptr %494, align 8, !tbaa !6
  tail call void @print_inline_rtx(ptr noundef %492, ptr noundef %495, i32 noundef 20) #19
  %496 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %497 = tail call i32 @fputc(i32 10, ptr %496)
  %498 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %499 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %500

500:                                              ; preds = %481, %488
  %501 = phi i32 [ %482, %481 ], [ %499, %488 ]
  %502 = phi ptr [ %483, %481 ], [ %498, %488 ]
  %503 = add nuw nsw i64 %484, 1
  %504 = sext i32 %501 to i64
  %505 = icmp slt i64 %503, %504
  br i1 %505, label %481, label %506, !llvm.loop !82

506:                                              ; preds = %500, %473
  %507 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %508 = icmp eq ptr %507, null
  br i1 %508, label %509, label %511

509:                                              ; preds = %506
  %510 = tail call ptr @xcalloc(i64 noundef 4, i64 noundef 64) #19
  store ptr %510, ptr @reg_eliminate, align 8, !tbaa !6
  br label %511

511:                                              ; preds = %509, %506
  %512 = phi ptr [ %510, %509 ], [ %507, %506 ]
  store i32 0, ptr @num_eliminable, align 4, !tbaa !21
  br label %513

513:                                              ; preds = %535, %511
  %514 = phi ptr [ %541, %535 ], [ @reg_eliminate_1, %511 ]
  %515 = phi ptr [ %540, %535 ], [ %512, %511 ]
  %516 = load i32, ptr %514, align 4, !tbaa !83
  store i32 %516, ptr %515, align 8, !tbaa !85
  %517 = getelementptr inbounds %struct.elim_table_1, ptr %514, i64 0, i32 1
  %518 = load i32, ptr %517, align 4, !tbaa !87
  %519 = getelementptr inbounds %struct.elim_table, ptr %515, i64 0, i32 1
  store i32 %518, ptr %519, align 4, !tbaa !88
  %520 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 103), align 8, !tbaa !89
  %521 = tail call zeroext i8 %520(i32 noundef %516, i32 noundef %518) #19
  %522 = icmp eq i8 %521, 0
  br i1 %522, label %535, label %523

523:                                              ; preds = %513
  %524 = load i32, ptr %519, align 4, !tbaa !88
  %525 = icmp eq i32 %524, 7
  %526 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %527 = icmp ne i8 %526, 0
  %528 = select i1 %525, i1 %527, i1 false
  br i1 %528, label %529, label %535

529:                                              ; preds = %523
  %530 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1, !tbaa !101
  %531 = icmp ne i8 %530, 0
  %532 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 45), align 1
  %533 = icmp eq i8 %532, 0
  %534 = select i1 %531, i1 %533, i1 false
  br label %535

535:                                              ; preds = %529, %523, %513
  %536 = phi i1 [ false, %513 ], [ true, %523 ], [ %534, %529 ]
  %537 = zext i1 %536 to i32
  %538 = getelementptr inbounds %struct.elim_table, ptr %515, i64 0, i32 4
  store i32 %537, ptr %538, align 4, !tbaa !102
  %539 = getelementptr inbounds %struct.elim_table, ptr %515, i64 0, i32 3
  store i32 %537, ptr %539, align 8, !tbaa !103
  %540 = getelementptr inbounds %struct.elim_table, ptr %515, i64 1
  %541 = getelementptr inbounds %struct.elim_table_1, ptr %514, i64 1
  %542 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %543 = getelementptr inbounds %struct.elim_table, ptr %542, i64 4
  %544 = icmp ult ptr %540, %543
  br i1 %544, label %513, label %545, !llvm.loop !104

545:                                              ; preds = %535, %545
  %546 = phi ptr [ %558, %545 ], [ %542, %535 ]
  %547 = getelementptr inbounds %struct.elim_table, ptr %546, i64 0, i32 3
  %548 = load i32, ptr %547, align 8, !tbaa !103
  %549 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %550 = add nsw i32 %549, %548
  store i32 %550, ptr @num_eliminable, align 4, !tbaa !21
  %551 = load i32, ptr %546, align 8, !tbaa !85
  %552 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %551) #19
  %553 = getelementptr inbounds %struct.elim_table, ptr %546, i64 0, i32 8
  store ptr %552, ptr %553, align 8, !tbaa !105
  %554 = getelementptr inbounds %struct.elim_table, ptr %546, i64 0, i32 1
  %555 = load i32, ptr %554, align 4, !tbaa !88
  %556 = tail call ptr @gen_rtx_REG(i32 noundef 16, i32 noundef %555) #19
  %557 = getelementptr inbounds %struct.elim_table, ptr %546, i64 0, i32 9
  store ptr %556, ptr %557, align 8, !tbaa !106
  %558 = getelementptr inbounds %struct.elim_table, ptr %546, i64 1
  %559 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %560 = getelementptr inbounds %struct.elim_table, ptr %559, i64 4
  %561 = icmp ult ptr %558, %560
  br i1 %561, label %545, label %562, !llvm.loop !107

562:                                              ; preds = %545
  %563 = tail call i32 @get_first_label_num() #19
  store i32 %563, ptr @first_label_num, align 4, !tbaa !21
  %564 = tail call i32 @max_label_num() #19
  %565 = load i32, ptr @first_label_num, align 4, !tbaa !21
  %566 = sub nsw i32 %564, %565
  store i32 %566, ptr @num_labels, align 4, !tbaa !21
  %567 = sext i32 %566 to i64
  %568 = tail call ptr @xmalloc(i64 noundef %567) #19
  store ptr %568, ptr @offsets_known_at, align 8, !tbaa !6
  %569 = load i32, ptr @num_labels, align 4, !tbaa !21
  %570 = sext i32 %569 to i64
  %571 = shl nsw i64 %570, 5
  %572 = tail call ptr @xmalloc(i64 noundef %571) #19
  store ptr %572, ptr @offsets_at, align 8, !tbaa !6
  %573 = load i32, ptr @max_regno, align 4, !tbaa !21
  %574 = add nsw i32 %573, -58
  %575 = sext i32 %574 to i64
  %576 = shl nsw i64 %575, 2
  %577 = tail call ptr @xmalloc(i64 noundef %576) #19
  store ptr %577, ptr @temp_pseudo_reg_arr, align 8, !tbaa !6
  %578 = load i32, ptr @max_regno, align 4, !tbaa !21
  %579 = icmp sgt i32 %578, 58
  br i1 %579, label %580, label %590

580:                                              ; preds = %562, %580
  %581 = phi i64 [ %583, %580 ], [ 0, %562 ]
  %582 = phi i32 [ %585, %580 ], [ 58, %562 ]
  %583 = add nuw nsw i64 %581, 1
  %584 = getelementptr inbounds i32, ptr %577, i64 %581
  store i32 %582, ptr %584, align 4, !tbaa !21
  %585 = add nuw nsw i32 %582, 1
  %586 = load i32, ptr @max_regno, align 4, !tbaa !21
  %587 = icmp slt i32 %585, %586
  br i1 %587, label %580, label %588, !llvm.loop !108

588:                                              ; preds = %580
  %589 = trunc i64 %583 to i32
  br label %590

590:                                              ; preds = %588, %562
  %591 = phi i32 [ 0, %562 ], [ %589, %588 ]
  %592 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %596, label %594

594:                                              ; preds = %590
  %595 = load ptr, ptr @reg_max_ref_width, align 8, !tbaa !6
  tail call void @ira_sort_regnos_for_alter_reg(ptr noundef %577, i32 noundef %591, ptr noundef %595) #19
  br label %596

596:                                              ; preds = %594, %590
  %597 = icmp eq i32 %591, 0
  br i1 %597, label %600, label %598

598:                                              ; preds = %596
  %599 = zext i32 %591 to i64
  br label %605

600:                                              ; preds = %605, %596
  %601 = icmp ne ptr %0, null
  %602 = load i32, ptr @num_eliminable, align 4
  %603 = icmp ne i32 %602, 0
  %604 = select i1 %601, i1 %603, i1 false
  br i1 %604, label %612, label %630

605:                                              ; preds = %598, %605
  %606 = phi i64 [ 0, %598 ], [ %610, %605 ]
  %607 = load ptr, ptr @temp_pseudo_reg_arr, align 8, !tbaa !6
  %608 = getelementptr inbounds i32, ptr %607, i64 %606
  %609 = load i32, ptr %608, align 4, !tbaa !21
  tail call fastcc void @alter_reg(i32 noundef %609, i32 noundef -1, i8 noundef zeroext 0)
  %610 = add nuw nsw i64 %606, 1
  %611 = icmp eq i64 %610, %599
  br i1 %611, label %600, label %605, !llvm.loop !109

612:                                              ; preds = %600, %623
  %613 = phi i32 [ %624, %623 ], [ %602, %600 ]
  %614 = phi ptr [ %626, %623 ], [ %0, %600 ]
  %615 = load i32, ptr %614, align 8
  %616 = and i32 %615, 65535
  %617 = add nsw i32 %616, -7
  %618 = icmp ult i32 %617, 4
  br i1 %618, label %619, label %623

619:                                              ; preds = %612
  %620 = getelementptr inbounds %struct.rtx_def, ptr %614, i64 1
  %621 = load ptr, ptr %620, align 8, !tbaa !17
  tail call void @note_stores(ptr noundef %621, ptr noundef nonnull @mark_not_eliminable, ptr noundef null) #19
  %622 = load i32, ptr @num_eliminable, align 4
  br label %623

623:                                              ; preds = %612, %619
  %624 = phi i32 [ %613, %612 ], [ %622, %619 ]
  %625 = getelementptr inbounds %struct.rtx_def, ptr %614, i64 0, i32 1, i32 0, i32 0, i64 2
  %626 = load ptr, ptr %625, align 8, !tbaa !17
  %627 = icmp ne ptr %626, null
  %628 = icmp ne i32 %624, 0
  %629 = select i1 %627, i1 %628, i1 false
  br i1 %629, label %612, label %630, !llvm.loop !110

630:                                              ; preds = %623, %600
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %6) #19
  call void @llvm.lifetime.start.p0(i64 120, ptr nonnull %7) #19
  %631 = load ptr, ptr @reload_insn_chain, align 8, !tbaa !6
  %632 = icmp eq ptr %631, null
  br i1 %632, label %759, label %633

633:                                              ; preds = %630, %756
  %634 = phi ptr [ %757, %756 ], [ %631, %630 ]
  %635 = getelementptr inbounds %struct.insn_chain, ptr %634, i64 0, i32 3
  %636 = load ptr, ptr %635, align 8, !tbaa !111
  %637 = load i32, ptr %636, align 8
  %638 = and i32 %637, 65535
  %639 = add nsw i32 %638, -7
  %640 = icmp ult i32 %639, 4
  br i1 %640, label %641, label %756

641:                                              ; preds = %633
  %642 = getelementptr inbounds %struct.rtx_def, ptr %636, i64 1
  %643 = load ptr, ptr %642, align 8, !tbaa !17
  %644 = call i32 @asm_noperands(ptr noundef %643) #19
  %645 = icmp slt i32 %644, 0
  br i1 %645, label %756, label %646

646:                                              ; preds = %641
  %647 = load ptr, ptr %635, align 8, !tbaa !111
  %648 = getelementptr inbounds %struct.rtx_def, ptr %647, i64 1
  %649 = load ptr, ptr %648, align 8, !tbaa !17
  %650 = load i32, ptr %649, align 8
  %651 = and i32 %650, 65535
  %652 = icmp eq i32 %651, 15
  br i1 %652, label %653, label %756

653:                                              ; preds = %646
  %654 = getelementptr inbounds %struct.rtx_def, ptr %649, i64 0, i32 1
  %655 = load ptr, ptr %654, align 8, !tbaa !17
  %656 = load i32, ptr %655, align 8, !tbaa !112
  %657 = icmp sgt i32 %656, 0
  br i1 %657, label %658, label %687

658:                                              ; preds = %653
  %659 = zext i32 %656 to i64
  br label %660

660:                                              ; preds = %683, %658
  %661 = phi i64 [ 0, %658 ], [ %685, %683 ]
  %662 = phi i64 [ 0, %658 ], [ %684, %683 ]
  %663 = getelementptr inbounds %struct.rtvec_def, ptr %655, i64 0, i32 1, i64 %661
  %664 = load ptr, ptr %663, align 8, !tbaa !6
  %665 = load i32, ptr %664, align 8
  %666 = and i32 %665, 65535
  %667 = icmp eq i32 %666, 25
  br i1 %667, label %668, label %683

668:                                              ; preds = %660
  %669 = getelementptr inbounds %struct.rtx_def, ptr %664, i64 0, i32 1
  %670 = load ptr, ptr %669, align 8, !tbaa !17
  %671 = load i32, ptr %670, align 8
  %672 = and i32 %671, 65535
  %673 = icmp eq i32 %672, 37
  br i1 %673, label %674, label %683

674:                                              ; preds = %668
  %675 = getelementptr i8, ptr %670, i64 8
  %676 = load i32, ptr %675, align 8, !tbaa !17
  %677 = and i32 %676, -8
  %678 = icmp eq i32 %677, 8
  br i1 %678, label %679, label %683

679:                                              ; preds = %674
  %680 = zext i32 %676 to i64
  %681 = shl nuw nsw i64 1, %680
  %682 = or i64 %681, %662
  br label %683

683:                                              ; preds = %679, %674, %668, %660
  %684 = phi i64 [ %682, %679 ], [ %662, %674 ], [ %662, %668 ], [ %662, %660 ]
  %685 = add nuw nsw i64 %661, 1
  %686 = icmp eq i64 %685, %659
  br i1 %686, label %687, label %660, !llvm.loop !114

687:                                              ; preds = %683, %653
  %688 = phi i64 [ 0, %653 ], [ %684, %683 ]
  %689 = call ptr @decode_asm_operands(ptr noundef nonnull %649, ptr noundef nonnull @recog_data, ptr noundef nonnull getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 1), ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef null) #19
  %690 = icmp sgt i32 %644, 0
  br i1 %690, label %691, label %693

691:                                              ; preds = %687
  %692 = zext i32 %644 to i64
  br label %698

693:                                              ; preds = %741, %687
  %694 = phi i64 [ 0, %687 ], [ %715, %741 ]
  %695 = and i64 %694, %688
  %696 = getelementptr inbounds %struct.insn_chain, ptr %634, i64 0, i32 6
  %697 = getelementptr inbounds %struct.insn_chain, ptr %634, i64 0, i32 7
  br label %744

698:                                              ; preds = %741, %691
  %699 = phi i64 [ 0, %691 ], [ %742, %741 ]
  %700 = phi i64 [ 0, %691 ], [ %715, %741 ]
  %701 = getelementptr inbounds [30 x ptr], ptr %6, i64 0, i64 %699
  %702 = load ptr, ptr %701, align 8, !tbaa !6
  br label %703

703:                                              ; preds = %737, %698
  %704 = phi i64 [ %715, %737 ], [ %700, %698 ]
  %705 = phi ptr [ %738, %737 ], [ %702, %698 ]
  br label %706

706:                                              ; preds = %732, %703
  %707 = phi ptr [ %736, %732 ], [ %705, %703 ]
  %708 = phi i32 [ %733, %732 ], [ 0, %703 ]
  %709 = load i8, ptr %707, align 1, !tbaa !17
  switch i8 %709, label %721 [
    i8 44, label %710
    i8 35, label %710
    i8 0, label %710
  ]

710:                                              ; preds = %706, %706, %706
  %711 = icmp eq i8 %709, 35
  %712 = sext i32 %708 to i64
  %713 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %712
  %714 = load i64, ptr %713, align 8, !tbaa !40
  %715 = or i64 %714, %704
  %716 = getelementptr inbounds i8, ptr %707, i64 1
  br i1 %711, label %717, label %737

717:                                              ; preds = %710, %717
  %718 = phi ptr [ %719, %717 ], [ %716, %710 ]
  %719 = getelementptr inbounds i8, ptr %718, i64 1
  %720 = load i8, ptr %718, align 1, !tbaa !17
  switch i8 %720, label %717 [
    i8 44, label %737
    i8 0, label %737
  ]

721:                                              ; preds = %706
  %722 = sext i8 %709 to i32
  switch i32 %722, label %723 [
    i32 61, label %732
    i32 43, label %732
    i32 42, label %732
    i32 37, label %732
    i32 63, label %732
    i32 33, label %732
    i32 48, label %732
    i32 49, label %732
    i32 50, label %732
    i32 51, label %732
    i32 52, label %732
    i32 60, label %732
    i32 62, label %732
    i32 86, label %732
    i32 111, label %732
    i32 38, label %732
    i32 69, label %732
    i32 70, label %732
    i32 115, label %732
    i32 105, label %732
    i32 110, label %732
    i32 88, label %732
    i32 73, label %732
    i32 74, label %732
    i32 75, label %732
    i32 76, label %732
    i32 77, label %732
    i32 78, label %732
    i32 79, label %732
    i32 80, label %732
    i32 109, label %732
    i32 112, label %727
    i32 103, label %727
    i32 114, label %727
  ]

723:                                              ; preds = %721
  %724 = call i32 @lookup_constraint(ptr noundef nonnull %707) #19
  %725 = call i32 @regclass_for_constraint(i32 noundef %724) #19
  %726 = sext i32 %725 to i64
  br label %727

727:                                              ; preds = %721, %721, %721, %723
  %728 = phi i64 [ %726, %723 ], [ 13, %721 ], [ 13, %721 ], [ 13, %721 ]
  %729 = sext i32 %708 to i64
  %730 = getelementptr inbounds [27 x [27 x i32]], ptr @reg_class_subunion, i64 0, i64 %729, i64 %728
  %731 = load i32, ptr %730, align 4, !tbaa !17
  br label %732

732:                                              ; preds = %727, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721, %721
  %733 = phi i32 [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %708, %721 ], [ %731, %727 ]
  %734 = icmp eq i8 %709, 89
  %735 = select i1 %734, i64 2, i64 1
  %736 = getelementptr inbounds i8, ptr %707, i64 %735
  br label %706

737:                                              ; preds = %717, %717, %710
  %738 = phi ptr [ %716, %710 ], [ %719, %717 ], [ %719, %717 ]
  %739 = phi i8 [ %709, %710 ], [ %720, %717 ], [ %720, %717 ]
  %740 = icmp eq i8 %739, 0
  br i1 %740, label %741, label %703

741:                                              ; preds = %737
  %742 = add nuw nsw i64 %699, 1
  %743 = icmp eq i64 %742, %692
  br i1 %743, label %693, label %698, !llvm.loop !115

744:                                              ; preds = %753, %693
  %745 = phi i64 [ 0, %693 ], [ %754, %753 ]
  %746 = shl nuw nsw i64 1, %745
  %747 = and i64 %695, %746
  %748 = icmp eq i64 %747, 0
  br i1 %748, label %753, label %749

749:                                              ; preds = %744
  %750 = trunc i64 %745 to i32
  %751 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %696, i32 noundef %750) #19
  %752 = call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull %697, i32 noundef %750) #19
  br label %753

753:                                              ; preds = %749, %744
  %754 = add nuw nsw i64 %745, 1
  %755 = icmp eq i64 %754, 53
  br i1 %755, label %756, label %744, !llvm.loop !116

756:                                              ; preds = %753, %646, %641, %633
  %757 = load ptr, ptr %634, align 8, !tbaa !6
  %758 = icmp eq ptr %757, null
  br i1 %758, label %759, label %633, !llvm.loop !117

759:                                              ; preds = %756, %630
  call void @llvm.lifetime.end.p0(i64 120, ptr nonnull %7) #19
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %6) #19
  store ptr null, ptr @insns_need_reload, align 8, !tbaa !6
  store i1 false, ptr @something_needs_elimination, align 4
  store i32 -1, ptr @last_spill_reg, align 4, !tbaa !21
  store i64 0, ptr @used_spill_regs, align 8, !tbaa !40
  %760 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %761 = getelementptr inbounds %struct.elim_table, ptr %760, i64 4
  br label %762

762:                                              ; preds = %759, %823
  %763 = phi ptr [ %825, %823 ], [ %761, %759 ]
  %764 = phi ptr [ %772, %823 ], [ %760, %759 ]
  %765 = load i32, ptr %764, align 8, !tbaa !85
  br label %766

766:                                              ; preds = %774, %762
  %767 = phi i32 [ 0, %762 ], [ %771, %774 ]
  %768 = phi ptr [ %764, %762 ], [ %772, %774 ]
  %769 = getelementptr inbounds %struct.elim_table, ptr %768, i64 0, i32 3
  %770 = load i32, ptr %769, align 8, !tbaa !103
  %771 = or i32 %770, %767
  %772 = getelementptr inbounds %struct.elim_table, ptr %768, i64 1
  %773 = icmp ult ptr %772, %763
  br i1 %773, label %774, label %777

774:                                              ; preds = %766
  %775 = load i32, ptr %772, align 8, !tbaa !85
  %776 = icmp eq i32 %775, %765
  br i1 %776, label %766, label %777, !llvm.loop !118

777:                                              ; preds = %766, %774
  %778 = icmp eq i32 %771, 0
  br i1 %778, label %779, label %823

779:                                              ; preds = %777
  %780 = zext i32 %765 to i64
  %781 = shl nuw i64 1, %780
  %782 = load i64, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %783 = or i64 %782, %781
  store i64 %783, ptr @bad_spill_regs_global, align 8, !tbaa !40
  call void @df_set_regs_ever_live(i32 noundef %765, i8 noundef zeroext 1) #19
  %784 = load i32, ptr @max_regno, align 4, !tbaa !21
  %785 = icmp sgt i32 %784, 53
  br i1 %785, label %786, label %823

786:                                              ; preds = %779
  %787 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  br label %788

788:                                              ; preds = %817, %786
  %789 = phi i32 [ %784, %786 ], [ %818, %817 ]
  %790 = phi ptr [ %787, %786 ], [ %819, %817 ]
  %791 = phi i64 [ 53, %786 ], [ %820, %817 ]
  %792 = getelementptr inbounds i16, ptr %790, i64 %791
  %793 = load i16, ptr %792, align 2, !tbaa !44
  %794 = sext i16 %793 to i32
  %795 = icmp slt i16 %793, 0
  %796 = icmp ult i32 %765, %794
  %797 = or i1 %795, %796
  br i1 %797, label %817, label %798

798:                                              ; preds = %788
  %799 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %800 = getelementptr inbounds ptr, ptr %799, i64 %791
  %801 = load ptr, ptr %800, align 8, !tbaa !6
  %802 = load i32, ptr %801, align 8
  %803 = lshr i32 %802, 16
  %804 = and i32 %803, 255
  %805 = zext i32 %794 to i64
  %806 = zext i32 %804 to i64
  %807 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %805, i64 %806
  %808 = load i8, ptr %807, align 1, !tbaa !17
  %809 = zext i8 %808 to i32
  %810 = add nsw i32 %809, %794
  %811 = icmp ugt i32 %810, %765
  br i1 %811, label %812, label %817

812:                                              ; preds = %798
  %813 = trunc i64 %791 to i32
  %814 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %813) #19
  %815 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %816 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %817

817:                                              ; preds = %812, %798, %788
  %818 = phi i32 [ %789, %788 ], [ %789, %798 ], [ %816, %812 ]
  %819 = phi ptr [ %790, %788 ], [ %790, %798 ], [ %815, %812 ]
  %820 = add nuw nsw i64 %791, 1
  %821 = sext i32 %818 to i64
  %822 = icmp slt i64 %820, %821
  br i1 %822, label %788, label %823, !llvm.loop !119

823:                                              ; preds = %817, %779, %777
  %824 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %825 = getelementptr inbounds %struct.elim_table, ptr %824, i64 4
  %826 = icmp ult ptr %772, %825
  br i1 %826, label %762, label %827, !llvm.loop !120

827:                                              ; preds = %823
  %828 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  %829 = icmp eq i8 %828, 0
  br i1 %829, label %870, label %830

830:                                              ; preds = %827
  %831 = load i64, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %832 = or i64 %831, 64
  store i64 %832, ptr @bad_spill_regs_global, align 8, !tbaa !40
  call void @df_set_regs_ever_live(i32 noundef 6, i8 noundef zeroext 1) #19
  %833 = load i32, ptr @max_regno, align 4, !tbaa !21
  %834 = icmp sgt i32 %833, 53
  br i1 %834, label %835, label %870

835:                                              ; preds = %830
  %836 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  br label %837

837:                                              ; preds = %864, %835
  %838 = phi i32 [ %833, %835 ], [ %865, %864 ]
  %839 = phi ptr [ %836, %835 ], [ %866, %864 ]
  %840 = phi i64 [ 53, %835 ], [ %867, %864 ]
  %841 = getelementptr inbounds i16, ptr %839, i64 %840
  %842 = load i16, ptr %841, align 2, !tbaa !44
  %843 = icmp ugt i16 %842, 6
  br i1 %843, label %864, label %844

844:                                              ; preds = %837
  %845 = zext i16 %842 to i32
  %846 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %847 = getelementptr inbounds ptr, ptr %846, i64 %840
  %848 = load ptr, ptr %847, align 8, !tbaa !6
  %849 = load i32, ptr %848, align 8
  %850 = lshr i32 %849, 16
  %851 = and i32 %850, 255
  %852 = zext i16 %842 to i64
  %853 = zext i32 %851 to i64
  %854 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %852, i64 %853
  %855 = load i8, ptr %854, align 1, !tbaa !17
  %856 = zext i8 %855 to i32
  %857 = add nuw nsw i32 %856, %845
  %858 = icmp ugt i32 %857, 6
  br i1 %858, label %859, label %864

859:                                              ; preds = %844
  %860 = trunc i64 %840 to i32
  %861 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %860) #19
  %862 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %863 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %864

864:                                              ; preds = %859, %844, %837
  %865 = phi i32 [ %838, %837 ], [ %838, %844 ], [ %863, %859 ]
  %866 = phi ptr [ %839, %837 ], [ %839, %844 ], [ %862, %859 ]
  %867 = add nuw nsw i64 %840, 1
  %868 = sext i32 %865 to i64
  %869 = icmp slt i64 %867, %868
  br i1 %869, label %837, label %870, !llvm.loop !119

870:                                              ; preds = %864, %830, %827
  %871 = call fastcc i32 @finish_spills(i32 noundef %1), !range !122
  store i32 1, ptr @reload_in_progress, align 4, !tbaa !21
  br label %872

872:                                              ; preds = %3416, %870
  %873 = call i64 @get_frame_size() #19
  %874 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %875

875:                                              ; preds = %875, %872
  %876 = phi ptr [ %884, %875 ], [ %874, %872 ]
  %877 = load i32, ptr %876, align 8, !tbaa !85
  %878 = getelementptr inbounds %struct.elim_table, ptr %876, i64 0, i32 1
  %879 = load i32, ptr %878, align 4, !tbaa !88
  %880 = call i64 @ix86_initial_elimination_offset(i32 noundef %877, i32 noundef %879) #19
  %881 = getelementptr inbounds %struct.elim_table, ptr %876, i64 0, i32 2
  store i64 %880, ptr %881, align 8, !tbaa !123
  %882 = getelementptr inbounds %struct.elim_table, ptr %876, i64 0, i32 5
  store i64 %880, ptr %882, align 8, !tbaa !124
  %883 = getelementptr inbounds %struct.elim_table, ptr %876, i64 0, i32 6
  store i64 %880, ptr %883, align 8, !tbaa !125
  %884 = getelementptr inbounds %struct.elim_table, ptr %876, i64 1
  %885 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %886 = getelementptr inbounds %struct.elim_table, ptr %885, i64 4
  %887 = icmp ult ptr %884, %886
  br i1 %887, label %875, label %888, !llvm.loop !126

888:                                              ; preds = %875
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %889 = load ptr, ptr @offsets_known_at, align 8, !tbaa !6
  %890 = load i32, ptr @num_labels, align 4, !tbaa !21
  %891 = sext i32 %890 to i64
  call void @llvm.memset.p0.i64(ptr align 1 %889, i8 0, i64 %891, i1 false)
  %892 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 0, i32 5), align 8, !tbaa !17
  %893 = icmp eq ptr %892, null
  br i1 %893, label %904, label %894

894:                                              ; preds = %888, %900
  %895 = phi ptr [ %902, %900 ], [ %892, %888 ]
  %896 = getelementptr inbounds %struct.rtx_def, ptr %895, i64 0, i32 1
  %897 = load ptr, ptr %896, align 8, !tbaa !17
  %898 = icmp eq ptr %897, null
  br i1 %898, label %900, label %899

899:                                              ; preds = %894
  call fastcc void @set_label_offsets(ptr noundef nonnull %897, ptr noundef null, i32 noundef 1)
  br label %900

900:                                              ; preds = %899, %894
  %901 = getelementptr inbounds %struct.rtx_def, ptr %895, i64 0, i32 1, i32 0, i32 0, i64 1
  %902 = load ptr, ptr %901, align 8, !tbaa !17
  %903 = icmp eq ptr %902, null
  br i1 %903, label %904, label %894, !llvm.loop !127

904:                                              ; preds = %900, %888
  call void @for_each_eh_label(ptr noundef nonnull @set_initial_eh_label_offset) #19
  %905 = load i32, ptr @max_regno, align 4, !tbaa !21
  %906 = icmp sgt i32 %905, 53
  br i1 %906, label %907, label %992

907:                                              ; preds = %904, %987
  %908 = phi i64 [ %988, %987 ], [ 53, %904 ]
  %909 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %910 = getelementptr inbounds i16, ptr %909, i64 %908
  %911 = load i16, ptr %910, align 2, !tbaa !44
  %912 = icmp slt i16 %911, 0
  br i1 %912, label %913, label %987

913:                                              ; preds = %907
  %914 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %915 = getelementptr inbounds ptr, ptr %914, i64 %908
  %916 = load ptr, ptr %915, align 8, !tbaa !6
  %917 = icmp eq ptr %916, null
  br i1 %917, label %987, label %918

918:                                              ; preds = %913
  %919 = call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %916, i32 noundef 0, ptr noundef null, i8 noundef zeroext 0)
  %920 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %921 = getelementptr inbounds ptr, ptr %920, i64 %908
  %922 = load ptr, ptr %921, align 8, !tbaa !6
  %923 = load i32, ptr %922, align 8
  %924 = lshr i32 %923, 16
  %925 = and i32 %924, 255
  %926 = getelementptr inbounds %struct.rtx_def, ptr %919, i64 0, i32 1
  %927 = load ptr, ptr %926, align 8, !tbaa !17
  %928 = getelementptr inbounds %struct.rtx_def, ptr %919, i64 0, i32 1, i32 0, i32 0, i64 1
  %929 = load ptr, ptr %928, align 8, !tbaa !17
  %930 = icmp eq ptr %929, null
  br i1 %930, label %934, label %931

931:                                              ; preds = %918
  %932 = getelementptr inbounds %struct.mem_attrs, ptr %929, i64 0, i32 5
  %933 = load i8, ptr %932, align 8, !tbaa !128
  br label %934

934:                                              ; preds = %918, %931
  %935 = phi i8 [ %933, %931 ], [ 0, %918 ]
  %936 = call i32 @strict_memory_address_addr_space_p(i32 noundef %925, ptr noundef %927, i8 noundef zeroext %935) #19
  %937 = icmp eq i32 %936, 0
  br i1 %937, label %943, label %938

938:                                              ; preds = %934
  %939 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %940 = getelementptr inbounds ptr, ptr %939, i64 %908
  store ptr %919, ptr %940, align 8, !tbaa !6
  %941 = load ptr, ptr @reg_equiv_address, align 8, !tbaa !6
  %942 = getelementptr inbounds ptr, ptr %941, i64 %908
  store ptr null, ptr %942, align 8, !tbaa !6
  br label %987

943:                                              ; preds = %934
  %944 = load ptr, ptr %926, align 8, !tbaa !17
  %945 = load i32, ptr %944, align 8
  %946 = and i32 %945, 65535
  %947 = zext i32 %946 to i64
  %948 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %947
  %949 = load i32, ptr %948, align 4, !tbaa !17
  %950 = icmp eq i32 %949, 9
  br i1 %950, label %976, label %951

951:                                              ; preds = %943
  %952 = trunc i32 %945 to i16
  switch i16 %952, label %981 [
    i16 37, label %953
    i16 49, label %957
  ]

953:                                              ; preds = %951
  %954 = getelementptr i8, ptr %944, i64 8
  %955 = load i32, ptr %954, align 8, !tbaa !17
  %956 = icmp ult i32 %955, 53
  br i1 %956, label %976, label %981

957:                                              ; preds = %951
  %958 = getelementptr inbounds %struct.rtx_def, ptr %944, i64 0, i32 1
  %959 = load ptr, ptr %958, align 8, !tbaa !17
  %960 = load i32, ptr %959, align 8
  %961 = and i32 %960, 65535
  %962 = icmp eq i32 %961, 37
  br i1 %962, label %963, label %981

963:                                              ; preds = %957
  %964 = getelementptr i8, ptr %959, i64 8
  %965 = load i32, ptr %964, align 8, !tbaa !17
  %966 = icmp ult i32 %965, 53
  br i1 %966, label %967, label %981

967:                                              ; preds = %963
  %968 = getelementptr inbounds %struct.rtx_def, ptr %944, i64 0, i32 1, i32 0, i32 0, i64 1
  %969 = load ptr, ptr %968, align 8, !tbaa !17
  %970 = load i32, ptr %969, align 8
  %971 = and i32 %970, 65535
  %972 = zext i32 %971 to i64
  %973 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %972
  %974 = load i32, ptr %973, align 4, !tbaa !17
  %975 = icmp eq i32 %974, 9
  br i1 %975, label %976, label %981

976:                                              ; preds = %967, %953, %943
  %977 = load ptr, ptr @reg_equiv_address, align 8, !tbaa !6
  %978 = getelementptr inbounds ptr, ptr %977, i64 %908
  store ptr %944, ptr %978, align 8, !tbaa !6
  %979 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %980 = getelementptr inbounds ptr, ptr %979, i64 %908
  store ptr null, ptr %980, align 8, !tbaa !6
  br label %987

981:                                              ; preds = %951, %953, %967, %963, %957
  %982 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %983 = getelementptr inbounds ptr, ptr %982, i64 %908
  store ptr null, ptr %983, align 8, !tbaa !6
  %984 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %985 = getelementptr inbounds ptr, ptr %984, i64 %908
  store ptr null, ptr %985, align 8, !tbaa !6
  %986 = trunc i64 %908 to i32
  call fastcc void @alter_reg(i32 noundef %986, i32 noundef -1, i8 noundef zeroext 1)
  br label %987

987:                                              ; preds = %938, %981, %976, %907, %913
  %988 = add nuw nsw i64 %908, 1
  %989 = load i32, ptr @max_regno, align 4, !tbaa !21
  %990 = sext i32 %989 to i64
  %991 = icmp slt i64 %988, %990
  br i1 %991, label %907, label %992, !llvm.loop !130

992:                                              ; preds = %987, %904
  %993 = load i32, ptr @caller_save_needed, align 4, !tbaa !21
  %994 = icmp eq i32 %993, 0
  br i1 %994, label %996, label %995

995:                                              ; preds = %992
  call void @setup_save_areas() #19
  br label %996

996:                                              ; preds = %995, %992
  %997 = call i64 @get_frame_size() #19
  %998 = icmp eq i64 %873, %997
  br i1 %998, label %999, label %3416

999:                                              ; preds = %996
  %1000 = icmp ne i64 %873, 0
  %1001 = load i32, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 22), align 4
  %1002 = icmp ne i32 %1001, 0
  %1003 = select i1 %1000, i1 %1002, i1 false
  br i1 %1003, label %1004, label %1008

1004:                                             ; preds = %999
  %1005 = call ptr @assign_stack_local(i32 noundef 1, i64 noundef 0, i32 noundef %1001) #19
  %1006 = call i64 @get_frame_size() #19
  %1007 = icmp eq i64 %873, %1006
  br i1 %1007, label %1008, label %3416

1008:                                             ; preds = %1004, %999
  %1009 = load i32, ptr @caller_save_needed, align 4, !tbaa !21
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %1015

1011:                                             ; preds = %1008
  %1012 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1013 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %1014 = ptrtoint ptr %1012 to i64
  br label %1051

1015:                                             ; preds = %1008
  call void @save_call_clobbered_regs() #19
  store i64 0, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1016 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1017 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %1018 = ptrtoint ptr %1016 to i64
  %1019 = ptrtoint ptr %1017 to i64
  %1020 = sub i64 %1018, %1019
  %1021 = icmp slt i64 %1020, 0
  br i1 %1021, label %1022, label %1025

1022:                                             ; preds = %1015
  call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 0) #19
  %1023 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1024 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %1025

1025:                                             ; preds = %1015, %1022
  %1026 = phi ptr [ %1017, %1015 ], [ %1024, %1022 ]
  %1027 = phi i64 [ 0, %1015 ], [ %1023, %1022 ]
  %1028 = getelementptr inbounds i8, ptr %1026, i64 %1027
  %1029 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %1030 = icmp eq ptr %1028, %1029
  br i1 %1030, label %1031, label %1034

1031:                                             ; preds = %1025
  %1032 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %1033 = or i8 %1032, 2
  store i8 %1033, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %1034

1034:                                             ; preds = %1025, %1031
  %1035 = ptrtoint ptr %1028 to i64
  %1036 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %1037 = sext i32 %1036 to i64
  %1038 = add nsw i64 %1037, %1035
  %1039 = xor i32 %1036, -1
  %1040 = sext i32 %1039 to i64
  %1041 = and i64 %1038, %1040
  %1042 = inttoptr i64 %1041 to ptr
  %1043 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %1044 = ptrtoint ptr %1043 to i64
  %1045 = sub i64 %1041, %1044
  %1046 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1047 = ptrtoint ptr %1046 to i64
  %1048 = sub i64 %1047, %1044
  %1049 = icmp sgt i64 %1045, %1048
  %1050 = select i1 %1049, ptr %1046, ptr %1042
  store ptr %1050, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %1050, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %1029, ptr @reload_firstobj, align 8, !tbaa !6
  br label %1051

1051:                                             ; preds = %1011, %1034
  %1052 = phi i64 [ %1014, %1011 ], [ %1047, %1034 ]
  %1053 = phi ptr [ %1013, %1011 ], [ %1050, %1034 ]
  store i1 false, ptr @something_needs_elimination, align 4
  store i64 0, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1054 = ptrtoint ptr %1053 to i64
  %1055 = sub i64 %1052, %1054
  %1056 = icmp slt i64 %1055, 0
  br i1 %1056, label %1057, label %1060

1057:                                             ; preds = %1051
  call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 0) #19
  %1058 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1059 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %1060

1060:                                             ; preds = %1057, %1051
  %1061 = phi ptr [ %1053, %1051 ], [ %1059, %1057 ]
  %1062 = phi i64 [ 0, %1051 ], [ %1058, %1057 ]
  %1063 = getelementptr inbounds i8, ptr %1061, i64 %1062
  %1064 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %1065 = icmp eq ptr %1063, %1064
  br i1 %1065, label %1066, label %1069

1066:                                             ; preds = %1060
  %1067 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %1068 = or i8 %1067, 2
  store i8 %1068, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %1069

1069:                                             ; preds = %1066, %1060
  %1070 = ptrtoint ptr %1064 to i64
  store i64 %1070, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1071 = ptrtoint ptr %1063 to i64
  %1072 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %1073 = sext i32 %1072 to i64
  %1074 = add nsw i64 %1073, %1071
  %1075 = xor i32 %1072, -1
  %1076 = sext i32 %1075 to i64
  %1077 = and i64 %1074, %1076
  %1078 = inttoptr i64 %1077 to ptr
  %1079 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %1080 = ptrtoint ptr %1079 to i64
  %1081 = sub i64 %1077, %1080
  %1082 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1083 = ptrtoint ptr %1082 to i64
  %1084 = sub i64 %1083, %1080
  %1085 = icmp sgt i64 %1081, %1084
  %1086 = select i1 %1085, ptr %1082, ptr %1078
  store ptr %1086, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %1086, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %1064, ptr @reload_insn_firstobj, align 8, !tbaa !6
  %1087 = load ptr, ptr @reload_insn_chain, align 8, !tbaa !6
  %1088 = icmp eq ptr %1087, null
  br i1 %1088, label %1435, label %1089

1089:                                             ; preds = %1069, %1432
  %1090 = phi ptr [ %1433, %1432 ], [ @insns_need_reload, %1069 ]
  %1091 = phi ptr [ %1094, %1432 ], [ %1087, %1069 ]
  %1092 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 3
  %1093 = load ptr, ptr %1092, align 8, !tbaa !111
  %1094 = load ptr, ptr %1091, align 8, !tbaa !35
  %1095 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 9
  store i32 0, ptr %1095, align 8, !tbaa !131
  %1096 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 5
  %1097 = load i8, ptr %1096, align 4
  %1098 = and i8 %1097, -8
  store i8 %1098, ptr %1096, align 4
  %1099 = load i32, ptr %1093, align 8
  %1100 = trunc i32 %1099 to i16
  switch i16 %1100, label %1107 [
    i16 12, label %1105
    i16 9, label %1105
    i16 8, label %1101
    i16 7, label %1101
    i16 10, label %1101
  ]

1101:                                             ; preds = %1089, %1089, %1089
  %1102 = getelementptr inbounds %struct.rtx_def, ptr %1093, i64 1, i32 1, i32 0, i32 0, i64 1
  %1103 = load ptr, ptr %1102, align 8, !tbaa !17
  %1104 = icmp eq ptr %1103, null
  br i1 %1104, label %1107, label %1105

1105:                                             ; preds = %1101, %1089, %1089
  call fastcc void @set_label_offsets(ptr noundef nonnull %1093, ptr noundef nonnull %1093, i32 noundef 0)
  %1106 = load i32, ptr %1093, align 8
  br label %1107

1107:                                             ; preds = %1105, %1101, %1089
  %1108 = phi i32 [ %1099, %1089 ], [ %1106, %1105 ], [ %1099, %1101 ]
  %1109 = and i32 %1108, 65535
  %1110 = add nsw i32 %1109, -7
  %1111 = icmp ult i32 %1110, 4
  br i1 %1111, label %1112, label %1432

1112:                                             ; preds = %1107
  %1113 = getelementptr inbounds %struct.rtx_def, ptr %1093, i64 1
  %1114 = load ptr, ptr %1113, align 8, !tbaa !17
  %1115 = getelementptr inbounds %struct.rtx_def, ptr %1093, i64 1, i32 1
  %1116 = load i32, ptr %1115, align 8, !tbaa !17
  %1117 = getelementptr inbounds %struct.rtx_def, ptr %1093, i64 1, i32 1, i32 0, i32 0, i64 1
  %1118 = load ptr, ptr %1117, align 8, !tbaa !17
  %1119 = load i32, ptr %1114, align 8
  %1120 = and i32 %1119, 65535
  %1121 = icmp eq i32 %1120, 23
  br i1 %1121, label %1125, label %1122

1122:                                             ; preds = %1112
  %1123 = call ptr @single_set_2(ptr noundef nonnull %1093, ptr noundef nonnull %1114) #19
  %1124 = icmp eq ptr %1123, null
  br i1 %1124, label %1155, label %1125

1125:                                             ; preds = %1122, %1112
  %1126 = phi ptr [ %1123, %1122 ], [ %1114, %1112 ]
  %1127 = getelementptr inbounds %struct.rtx_def, ptr %1126, i64 0, i32 1
  %1128 = load ptr, ptr %1127, align 8, !tbaa !17
  %1129 = load i32, ptr %1128, align 8
  %1130 = and i32 %1129, 65535
  %1131 = icmp eq i32 %1130, 37
  br i1 %1131, label %1132, label %1155

1132:                                             ; preds = %1125
  %1133 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %1134 = getelementptr i8, ptr %1128, i64 8
  %1135 = load i32, ptr %1134, align 8, !tbaa !17
  %1136 = zext i32 %1135 to i64
  %1137 = getelementptr inbounds i16, ptr %1133, i64 %1136
  %1138 = load i16, ptr %1137, align 2, !tbaa !44
  %1139 = icmp slt i16 %1138, 0
  br i1 %1139, label %1140, label %1155

1140:                                             ; preds = %1132
  %1141 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %1142 = getelementptr inbounds ptr, ptr %1141, i64 %1136
  %1143 = load ptr, ptr %1142, align 8, !tbaa !6
  %1144 = icmp eq ptr %1143, null
  br i1 %1144, label %1145, label %1150

1145:                                             ; preds = %1140
  %1146 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %1147 = getelementptr inbounds ptr, ptr %1146, i64 %1136
  %1148 = load ptr, ptr %1147, align 8, !tbaa !6
  %1149 = icmp eq ptr %1148, null
  br i1 %1149, label %1155, label %1150

1150:                                             ; preds = %1145, %1140
  %1151 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %1152 = getelementptr inbounds ptr, ptr %1151, i64 %1136
  %1153 = load ptr, ptr %1152, align 8, !tbaa !6
  %1154 = icmp eq ptr %1153, null
  br i1 %1154, label %1155, label %1432

1155:                                             ; preds = %1150, %1145, %1132, %1125, %1122
  %1156 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %1157 = icmp ne i32 %1156, 0
  %1158 = load i32, ptr @num_eliminable_invariants, align 4
  %1159 = icmp ne i32 %1158, 0
  %1160 = select i1 %1157, i1 true, i1 %1159
  br i1 %1160, label %1161, label %1163

1161:                                             ; preds = %1155
  %1162 = call fastcc i32 @eliminate_regs_in_insn(ptr noundef nonnull %1093, i32 noundef 0)
  br label %1163

1163:                                             ; preds = %1161, %1155
  %1164 = phi i32 [ %1162, %1161 ], [ 0, %1155 ]
  %1165 = load i8, ptr @spill_indirect_levels, align 1, !tbaa !17
  %1166 = sext i8 %1165 to i32
  %1167 = call i32 @find_reloads(ptr noundef nonnull %1093, i32 noundef 0, i32 noundef %1166, i32 noundef %1, ptr noundef nonnull @spill_reg_order) #19
  %1168 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !21
  %1169 = icmp ne i32 %1168, 0
  %1170 = load i32, ptr @n_reloads, align 4
  %1171 = icmp sgt i32 %1170, 1
  %1172 = select i1 %1169, i1 %1171, i1 false
  br i1 %1172, label %1173, label %1254

1173:                                             ; preds = %1163
  %1174 = load i32, ptr %1093, align 8
  %1175 = and i32 %1174, 65535
  %1176 = add nsw i32 %1175, -7
  %1177 = icmp ult i32 %1176, 4
  br i1 %1177, label %1178, label %1254

1178:                                             ; preds = %1173
  %1179 = load ptr, ptr %1113, align 8, !tbaa !17
  %1180 = load i32, ptr %1179, align 8
  %1181 = and i32 %1180, 65535
  %1182 = icmp eq i32 %1181, 23
  br i1 %1182, label %1186, label %1183

1183:                                             ; preds = %1178
  %1184 = call ptr @single_set_2(ptr noundef nonnull %1093, ptr noundef nonnull %1179) #19
  %1185 = icmp eq ptr %1184, null
  br i1 %1185, label %1254, label %1186

1186:                                             ; preds = %1183, %1178
  %1187 = phi ptr [ %1184, %1183 ], [ %1179, %1178 ]
  %1188 = getelementptr inbounds %struct.rtx_def, ptr %1187, i64 0, i32 1
  %1189 = getelementptr inbounds %struct.rtx_def, ptr %1187, i64 0, i32 1, i32 0, i32 0, i64 1
  %1190 = load ptr, ptr %1189, align 8, !tbaa !17
  %1191 = load ptr, ptr %1188, align 8, !tbaa !17
  %1192 = icmp eq ptr %1190, %1191
  %1193 = load i32, ptr %1190, align 8
  %1194 = and i32 %1193, 65535
  %1195 = icmp eq i32 %1194, 37
  %1196 = select i1 %1192, i1 %1195, i1 false
  br i1 %1196, label %1197, label %1201

1197:                                             ; preds = %1186
  %1198 = getelementptr i8, ptr %1190, i64 8
  %1199 = load i32, ptr %1198, align 8, !tbaa !17
  %1200 = icmp ugt i32 %1199, 52
  br i1 %1200, label %1233, label %1202

1201:                                             ; preds = %1186
  br i1 %1195, label %1202, label %1254

1202:                                             ; preds = %1201, %1197
  %1203 = load i32, ptr %1191, align 8
  %1204 = and i32 %1203, 65535
  %1205 = icmp eq i32 %1204, 37
  br i1 %1205, label %1206, label %1254

1206:                                             ; preds = %1202
  %1207 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %1208 = getelementptr i8, ptr %1190, i64 8
  %1209 = load i32, ptr %1208, align 8, !tbaa !17
  %1210 = zext i32 %1209 to i64
  %1211 = getelementptr inbounds i16, ptr %1207, i64 %1210
  %1212 = load i16, ptr %1211, align 2, !tbaa !44
  %1213 = icmp slt i16 %1212, 0
  br i1 %1213, label %1214, label %1254

1214:                                             ; preds = %1206
  %1215 = getelementptr i8, ptr %1191, i64 8
  %1216 = load i32, ptr %1215, align 8, !tbaa !17
  %1217 = zext i32 %1216 to i64
  %1218 = getelementptr inbounds i16, ptr %1207, i64 %1217
  %1219 = load i16, ptr %1218, align 2, !tbaa !44
  %1220 = icmp slt i16 %1219, 0
  br i1 %1220, label %1221, label %1254

1221:                                             ; preds = %1214
  %1222 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %1223 = getelementptr inbounds ptr, ptr %1222, i64 %1210
  %1224 = load ptr, ptr %1223, align 8, !tbaa !6
  %1225 = icmp eq ptr %1224, null
  br i1 %1225, label %1254, label %1226

1226:                                             ; preds = %1221
  %1227 = getelementptr inbounds ptr, ptr %1222, i64 %1217
  %1228 = load ptr, ptr %1227, align 8, !tbaa !6
  %1229 = icmp eq ptr %1228, null
  br i1 %1229, label %1254, label %1230

1230:                                             ; preds = %1226
  %1231 = call i32 @rtx_equal_p(ptr noundef nonnull %1224, ptr noundef nonnull %1228) #19
  %1232 = icmp eq i32 %1231, 0
  br i1 %1232, label %1254, label %1233

1233:                                             ; preds = %1230, %1197
  %1234 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %1235 = icmp eq i8 %1234, 0
  br i1 %1235, label %1243, label %1236

1236:                                             ; preds = %1233
  %1237 = load ptr, ptr %1188, align 8, !tbaa !17
  %1238 = getelementptr i8, ptr %1237, i64 8
  %1239 = load i32, ptr %1238, align 8, !tbaa !17
  %1240 = load ptr, ptr %1189, align 8, !tbaa !17
  %1241 = getelementptr i8, ptr %1240, i64 8
  %1242 = load i32, ptr %1241, align 8, !tbaa !17
  call void @ira_mark_memory_move_deletion(i32 noundef %1239, i32 noundef %1242) #19
  br label %1243

1243:                                             ; preds = %1236, %1233
  %1244 = call ptr @delete_insn(ptr noundef nonnull %1093) #19
  %1245 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 1
  %1246 = load ptr, ptr %1245, align 8, !tbaa !132
  %1247 = icmp eq ptr %1246, null
  %1248 = select i1 %1247, ptr @reload_insn_chain, ptr %1246
  store ptr %1094, ptr %1248, align 8, !tbaa !6
  %1249 = icmp eq ptr %1094, null
  br i1 %1249, label %1252, label %1250

1250:                                             ; preds = %1243
  %1251 = getelementptr inbounds %struct.insn_chain, ptr %1094, i64 0, i32 1
  store ptr %1246, ptr %1251, align 8, !tbaa !132
  br label %1252

1252:                                             ; preds = %1250, %1243
  %1253 = load ptr, ptr @unused_insn_chains, align 8, !tbaa !6
  store ptr %1253, ptr %1091, align 8, !tbaa !35
  store ptr %1091, ptr @unused_insn_chains, align 8, !tbaa !6
  br label %1432

1254:                                             ; preds = %1230, %1226, %1221, %1214, %1206, %1202, %1201, %1183, %1173, %1163
  %1255 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %1256 = icmp eq i32 %1255, 0
  br i1 %1256, label %1312, label %1257

1257:                                             ; preds = %1254
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %1258 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %1259 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 0, i32 5
  %1260 = load i64, ptr %1259, align 8, !tbaa !124
  %1261 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 0, i32 6
  store i64 %1260, ptr %1261, align 8, !tbaa !125
  %1262 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 0, i32 3
  %1263 = load i32, ptr %1262, align 8, !tbaa !103
  %1264 = icmp eq i32 %1263, 0
  br i1 %1264, label %1270, label %1265

1265:                                             ; preds = %1257
  %1266 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 0, i32 2
  %1267 = load i64, ptr %1266, align 8, !tbaa !123
  %1268 = icmp eq i64 %1260, %1267
  br i1 %1268, label %1270, label %1269

1269:                                             ; preds = %1265
  store i32 1, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %1270

1270:                                             ; preds = %1269, %1265, %1257
  %1271 = phi i32 [ 0, %1257 ], [ 0, %1265 ], [ 1, %1269 ]
  %1272 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 1, i32 5
  %1273 = load i64, ptr %1272, align 8, !tbaa !124
  %1274 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 1, i32 6
  store i64 %1273, ptr %1274, align 8, !tbaa !125
  %1275 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 1, i32 3
  %1276 = load i32, ptr %1275, align 8, !tbaa !103
  %1277 = icmp eq i32 %1276, 0
  br i1 %1277, label %1284, label %1278

1278:                                             ; preds = %1270
  %1279 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 1, i32 2
  %1280 = load i64, ptr %1279, align 8, !tbaa !123
  %1281 = icmp eq i64 %1273, %1280
  br i1 %1281, label %1284, label %1282

1282:                                             ; preds = %1278
  %1283 = add nuw nsw i32 %1271, 1
  store i32 %1283, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %1284

1284:                                             ; preds = %1282, %1278, %1270
  %1285 = phi i32 [ %1271, %1270 ], [ %1271, %1278 ], [ %1283, %1282 ]
  %1286 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 2, i32 5
  %1287 = load i64, ptr %1286, align 8, !tbaa !124
  %1288 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 2, i32 6
  store i64 %1287, ptr %1288, align 8, !tbaa !125
  %1289 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 2, i32 3
  %1290 = load i32, ptr %1289, align 8, !tbaa !103
  %1291 = icmp eq i32 %1290, 0
  br i1 %1291, label %1298, label %1292

1292:                                             ; preds = %1284
  %1293 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 2, i32 2
  %1294 = load i64, ptr %1293, align 8, !tbaa !123
  %1295 = icmp eq i64 %1287, %1294
  br i1 %1295, label %1298, label %1296

1296:                                             ; preds = %1292
  %1297 = add nuw nsw i32 %1285, 1
  store i32 %1297, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %1298

1298:                                             ; preds = %1296, %1292, %1284
  %1299 = phi i32 [ %1285, %1284 ], [ %1285, %1292 ], [ %1297, %1296 ]
  %1300 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 3, i32 5
  %1301 = load i64, ptr %1300, align 8, !tbaa !124
  %1302 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 3, i32 6
  store i64 %1301, ptr %1302, align 8, !tbaa !125
  %1303 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 3, i32 3
  %1304 = load i32, ptr %1303, align 8, !tbaa !103
  %1305 = icmp eq i32 %1304, 0
  br i1 %1305, label %1312, label %1306

1306:                                             ; preds = %1298
  %1307 = getelementptr inbounds %struct.elim_table, ptr %1258, i64 3, i32 2
  %1308 = load i64, ptr %1307, align 8, !tbaa !123
  %1309 = icmp eq i64 %1301, %1308
  br i1 %1309, label %1312, label %1310

1310:                                             ; preds = %1306
  %1311 = add nuw nsw i32 %1299, 1
  store i32 %1311, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %1312

1312:                                             ; preds = %1310, %1306, %1298, %1254
  %1313 = trunc i32 %1164 to i8
  %1314 = load i8, ptr %1096, align 4
  %1315 = shl i8 %1313, 2
  %1316 = and i8 %1315, 4
  %1317 = and i8 %1314, -8
  %1318 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %1319 = icmp sgt i32 %1318, 0
  %1320 = zext i1 %1319 to i8
  %1321 = trunc i32 %1167 to i8
  %1322 = shl i8 %1321, 1
  %1323 = and i8 %1322, 2
  %1324 = or i8 %1323, %1316
  %1325 = or i8 %1324, %1317
  %1326 = or i8 %1325, %1320
  store i8 %1326, ptr %1096, align 4
  %1327 = icmp eq i32 %1164, 0
  br i1 %1327, label %1347, label %1328

1328:                                             ; preds = %1312
  %1329 = load ptr, ptr @reload_insn_firstobj, align 8, !tbaa !6
  %1330 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %1331 = ptrtoint ptr %1329 to i64
  %1332 = ptrtoint ptr %1330 to i64
  %1333 = sub i64 %1331, %1332
  store i64 %1333, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1334 = icmp sgt i64 %1333, 0
  br i1 %1334, label %1335, label %1342

1335:                                             ; preds = %1328
  %1336 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1337 = ptrtoint ptr %1336 to i64
  %1338 = sub i64 %1337, %1332
  %1339 = icmp slt i64 %1333, %1338
  br i1 %1339, label %1340, label %1342

1340:                                             ; preds = %1335
  %1341 = getelementptr inbounds i8, ptr %1330, i64 %1333
  store ptr %1341, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %1341, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %1345

1342:                                             ; preds = %1335, %1328
  %1343 = getelementptr inbounds i8, ptr %1330, i64 %1333
  call void @obstack_free(ptr noundef nonnull @reload_obstack, ptr noundef %1343) #19
  %1344 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %1345

1345:                                             ; preds = %1342, %1340
  %1346 = phi i32 [ %1344, %1342 ], [ %1318, %1340 ]
  store ptr %1114, ptr %1113, align 8, !tbaa !17
  store i32 %1116, ptr %1115, align 8, !tbaa !17
  store ptr %1118, ptr %1117, align 8, !tbaa !17
  store i1 true, ptr @something_needs_elimination, align 4
  br label %1347

1347:                                             ; preds = %1345, %1312
  %1348 = phi i32 [ %1346, %1345 ], [ %1318, %1312 ]
  %1349 = load i32, ptr @something_needs_operands_changed, align 4, !tbaa !21
  %1350 = or i32 %1349, %1167
  store i32 %1350, ptr @something_needs_operands_changed, align 4, !tbaa !21
  %1351 = icmp eq i32 %1348, 0
  br i1 %1351, label %1432, label %1352

1352:                                             ; preds = %1347
  store i32 %1348, ptr %1095, align 8, !tbaa !131
  %1353 = sext i32 %1348 to i64
  %1354 = mul nsw i64 %1353, 104
  store i64 %1354, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1355 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1356 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %1357 = ptrtoint ptr %1355 to i64
  %1358 = ptrtoint ptr %1356 to i64
  %1359 = sub i64 %1357, %1358
  %1360 = icmp slt i64 %1359, %1354
  br i1 %1360, label %1361, label %1365

1361:                                             ; preds = %1352
  %1362 = trunc i64 %1354 to i32
  call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef %1362) #19
  %1363 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1364 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %1365

1365:                                             ; preds = %1361, %1352
  %1366 = phi ptr [ %1356, %1352 ], [ %1364, %1361 ]
  %1367 = phi i64 [ %1354, %1352 ], [ %1363, %1361 ]
  %1368 = getelementptr inbounds i8, ptr %1366, i64 %1367
  %1369 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %1370 = icmp eq ptr %1368, %1369
  br i1 %1370, label %1371, label %1374

1371:                                             ; preds = %1365
  %1372 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %1373 = or i8 %1372, 2
  store i8 %1373, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %1374

1374:                                             ; preds = %1371, %1365
  %1375 = ptrtoint ptr %1368 to i64
  %1376 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %1377 = sext i32 %1376 to i64
  %1378 = add nsw i64 %1377, %1375
  %1379 = xor i32 %1376, -1
  %1380 = sext i32 %1379 to i64
  %1381 = and i64 %1378, %1380
  %1382 = inttoptr i64 %1381 to ptr
  %1383 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %1384 = ptrtoint ptr %1383 to i64
  %1385 = sub i64 %1381, %1384
  %1386 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1387 = ptrtoint ptr %1386 to i64
  %1388 = sub i64 %1387, %1384
  %1389 = icmp sgt i64 %1385, %1388
  %1390 = select i1 %1389, ptr %1386, ptr %1382
  store ptr %1390, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %1390, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %1391 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 8
  store ptr %1369, ptr %1391, align 8, !tbaa !133
  %1392 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %1393 = sext i32 %1392 to i64
  %1394 = mul nsw i64 %1393, 104
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1369, ptr nonnull align 16 @rld, i64 %1394, i1 false)
  store i64 0, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1395 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1396 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  %1397 = ptrtoint ptr %1395 to i64
  %1398 = ptrtoint ptr %1396 to i64
  %1399 = sub i64 %1397, %1398
  %1400 = icmp slt i64 %1399, 0
  br i1 %1400, label %1401, label %1404

1401:                                             ; preds = %1374
  call void @_obstack_newchunk(ptr noundef nonnull @reload_obstack, i32 noundef 0) #19
  %1402 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1403 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %1404

1404:                                             ; preds = %1401, %1374
  %1405 = phi ptr [ %1396, %1374 ], [ %1403, %1401 ]
  %1406 = phi i64 [ 0, %1374 ], [ %1402, %1401 ]
  %1407 = getelementptr inbounds i8, ptr %1405, i64 %1406
  %1408 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  %1409 = icmp eq ptr %1407, %1408
  br i1 %1409, label %1410, label %1413

1410:                                             ; preds = %1404
  %1411 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  %1412 = or i8 %1411, 2
  store i8 %1412, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 10), align 8
  br label %1413

1413:                                             ; preds = %1410, %1404
  %1414 = ptrtoint ptr %1408 to i64
  store i64 %1414, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %1415 = ptrtoint ptr %1407 to i64
  %1416 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 6), align 8, !tbaa !31
  %1417 = sext i32 %1416 to i64
  %1418 = add nsw i64 %1417, %1415
  %1419 = xor i32 %1416, -1
  %1420 = sext i32 %1419 to i64
  %1421 = and i64 %1418, %1420
  %1422 = inttoptr i64 %1421 to ptr
  %1423 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %1424 = ptrtoint ptr %1423 to i64
  %1425 = sub i64 %1421, %1424
  %1426 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %1427 = ptrtoint ptr %1426 to i64
  %1428 = sub i64 %1427, %1424
  %1429 = icmp sgt i64 %1425, %1428
  %1430 = select i1 %1429, ptr %1426, ptr %1422
  store ptr %1430, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8
  store ptr %1430, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %1408, ptr @reload_insn_firstobj, align 8, !tbaa !6
  store ptr %1091, ptr %1090, align 8, !tbaa !6
  %1431 = getelementptr inbounds %struct.insn_chain, ptr %1091, i64 0, i32 2
  br label %1432

1432:                                             ; preds = %1413, %1347, %1252, %1150, %1107
  %1433 = phi ptr [ %1090, %1107 ], [ %1090, %1150 ], [ %1431, %1413 ], [ %1090, %1347 ], [ %1090, %1252 ]
  %1434 = icmp eq ptr %1094, null
  br i1 %1434, label %1435, label %1089, !llvm.loop !134

1435:                                             ; preds = %1432, %1069
  %1436 = phi ptr [ @insns_need_reload, %1069 ], [ %1433, %1432 ]
  store ptr null, ptr %1436, align 8, !tbaa !6
  %1437 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %1438 = icmp eq i8 %1437, 0
  br i1 %1438, label %1439, label %1440

1439:                                             ; preds = %1435
  call void @bitmap_clear(ptr noundef nonnull @spilled_pseudos) #19
  br label %1440

1440:                                             ; preds = %1439, %1435
  %1441 = call i64 @get_frame_size() #19
  %1442 = icmp eq i64 %873, %1441
  br i1 %1442, label %1445, label %1443

1443:                                             ; preds = %1440
  %1444 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %1467

1445:                                             ; preds = %1440
  %1446 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %1447 = icmp eq i32 %1446, 0
  %1448 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br i1 %1447, label %1467, label %1449

1449:                                             ; preds = %1445, %1449
  %1450 = phi ptr [ %1459, %1449 ], [ %1448, %1445 ]
  %1451 = load i32, ptr %1450, align 8, !tbaa !85
  %1452 = getelementptr inbounds %struct.elim_table, ptr %1450, i64 0, i32 1
  %1453 = load i32, ptr %1452, align 4, !tbaa !88
  %1454 = call i64 @ix86_initial_elimination_offset(i32 noundef %1451, i32 noundef %1453) #19
  %1455 = getelementptr inbounds %struct.elim_table, ptr %1450, i64 0, i32 2
  %1456 = load i64, ptr %1455, align 8, !tbaa !123
  %1457 = icmp eq i64 %1454, %1456
  %1458 = freeze i1 %1457
  %1459 = getelementptr inbounds %struct.elim_table, ptr %1450, i64 1
  %1460 = load ptr, ptr @reg_eliminate, align 8
  %1461 = getelementptr inbounds %struct.elim_table, ptr %1460, i64 4
  %1462 = icmp ult ptr %1459, %1461
  %1463 = select i1 %1458, i1 %1462, i1 false
  br i1 %1463, label %1449, label %1464, !llvm.loop !135

1464:                                             ; preds = %1449
  %1465 = xor i1 %1458, true
  %1466 = zext i1 %1465 to i32
  br label %1467

1467:                                             ; preds = %1443, %1464, %1445
  %1468 = phi ptr [ %1444, %1443 ], [ %1448, %1445 ], [ %1460, %1464 ]
  %1469 = phi i32 [ 1, %1443 ], [ 0, %1445 ], [ %1466, %1464 ]
  %1470 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  br label %1475

1471:                                             ; preds = %1494
  %1472 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 3
  %1473 = load i32, ptr %1472, align 8, !tbaa !103
  %1474 = icmp eq i32 %1473, 0
  br i1 %1474, label %1499, label %1568

1475:                                             ; preds = %1494, %1467
  %1476 = phi ptr [ %1495, %1494 ], [ %1468, %1467 ]
  %1477 = load i32, ptr %1476, align 8, !tbaa !85
  %1478 = icmp eq i32 %1477, 6
  br i1 %1478, label %1479, label %1485

1479:                                             ; preds = %1475
  %1480 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 102), align 8, !tbaa !136
  %1481 = call zeroext i8 %1480() #19
  %1482 = icmp eq i8 %1481, 0
  br i1 %1482, label %1483, label %1492

1483:                                             ; preds = %1479
  %1484 = load i32, ptr %1476, align 8, !tbaa !85
  br label %1485

1485:                                             ; preds = %1483, %1475
  %1486 = phi i32 [ %1484, %1483 ], [ %1477, %1475 ]
  %1487 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 103), align 8, !tbaa !89
  %1488 = getelementptr inbounds %struct.elim_table, ptr %1476, i64 0, i32 1
  %1489 = load i32, ptr %1488, align 4, !tbaa !88
  %1490 = call zeroext i8 %1487(i32 noundef %1486, i32 noundef %1489) #19
  %1491 = icmp eq i8 %1490, 0
  br i1 %1491, label %1492, label %1494

1492:                                             ; preds = %1485, %1479
  %1493 = getelementptr inbounds %struct.elim_table, ptr %1476, i64 0, i32 3
  store i32 0, ptr %1493, align 8, !tbaa !103
  br label %1494

1494:                                             ; preds = %1492, %1485
  %1495 = getelementptr inbounds %struct.elim_table, ptr %1476, i64 1
  %1496 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %1497 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 4
  %1498 = icmp ult ptr %1495, %1497
  br i1 %1498, label %1475, label %1471, !llvm.loop !137

1499:                                             ; preds = %1471
  %1500 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 4
  %1501 = load i32, ptr %1500, align 4, !tbaa !102
  %1502 = icmp eq i32 %1501, 0
  br i1 %1502, label %1568, label %1507

1503:                                             ; preds = %1528, %1520, %1512
  %1504 = phi i64 [ 1, %1512 ], [ 2, %1520 ], [ 3, %1528 ]
  %1505 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 %1504, i32 1
  %1506 = load i32, ptr %1505, align 4, !tbaa !88
  br label %1532

1507:                                             ; preds = %1499
  %1508 = load i32, ptr %1496, align 8, !tbaa !85
  %1509 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1
  %1510 = load i32, ptr %1509, align 8, !tbaa !85
  %1511 = icmp eq i32 %1510, %1508
  br i1 %1511, label %1512, label %1516

1512:                                             ; preds = %1507
  %1513 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 3
  %1514 = load i32, ptr %1513, align 8, !tbaa !103
  %1515 = icmp eq i32 %1514, 0
  br i1 %1515, label %1516, label %1503

1516:                                             ; preds = %1512, %1507
  %1517 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2
  %1518 = load i32, ptr %1517, align 8, !tbaa !85
  %1519 = icmp eq i32 %1518, %1508
  br i1 %1519, label %1520, label %1524

1520:                                             ; preds = %1516
  %1521 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 3
  %1522 = load i32, ptr %1521, align 8, !tbaa !103
  %1523 = icmp eq i32 %1522, 0
  br i1 %1523, label %1524, label %1503

1524:                                             ; preds = %1520, %1516
  %1525 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1526 = load i32, ptr %1525, align 8, !tbaa !85
  %1527 = icmp eq i32 %1526, %1508
  br i1 %1527, label %1528, label %1532

1528:                                             ; preds = %1524
  %1529 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  %1530 = load i32, ptr %1529, align 8, !tbaa !103
  %1531 = icmp eq i32 %1530, 0
  br i1 %1531, label %1532, label %1503

1532:                                             ; preds = %1528, %1524, %1503
  %1533 = phi i32 [ %1506, %1503 ], [ -1, %1528 ], [ -1, %1524 ]
  %1534 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 1
  %1535 = icmp eq i32 %1508, %1533
  br i1 %1535, label %1536, label %1537

1536:                                             ; preds = %1532
  store i32 0, ptr %1472, align 8, !tbaa !103
  br label %1537

1537:                                             ; preds = %1536, %1532
  %1538 = icmp eq i32 %1510, %1533
  br i1 %1538, label %1539, label %1546

1539:                                             ; preds = %1537
  %1540 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 1
  %1541 = load i32, ptr %1540, align 4, !tbaa !88
  %1542 = load i32, ptr %1534, align 4, !tbaa !88
  %1543 = icmp eq i32 %1541, %1542
  br i1 %1543, label %1544, label %1546

1544:                                             ; preds = %1539
  %1545 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 3
  store i32 0, ptr %1545, align 8, !tbaa !103
  br label %1546

1546:                                             ; preds = %1544, %1539, %1537
  %1547 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2
  %1548 = load i32, ptr %1547, align 8, !tbaa !85
  %1549 = icmp eq i32 %1548, %1533
  br i1 %1549, label %1550, label %1557

1550:                                             ; preds = %1546
  %1551 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 1
  %1552 = load i32, ptr %1551, align 4, !tbaa !88
  %1553 = load i32, ptr %1534, align 4, !tbaa !88
  %1554 = icmp eq i32 %1552, %1553
  br i1 %1554, label %1555, label %1557

1555:                                             ; preds = %1550
  %1556 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 3
  store i32 0, ptr %1556, align 8, !tbaa !103
  br label %1557

1557:                                             ; preds = %1555, %1550, %1546
  %1558 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1559 = load i32, ptr %1558, align 8, !tbaa !85
  %1560 = icmp eq i32 %1559, %1533
  br i1 %1560, label %1561, label %1568

1561:                                             ; preds = %1557
  %1562 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 1
  %1563 = load i32, ptr %1562, align 4, !tbaa !88
  %1564 = load i32, ptr %1534, align 4, !tbaa !88
  %1565 = icmp eq i32 %1563, %1564
  br i1 %1565, label %1566, label %1568

1566:                                             ; preds = %1561
  %1567 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  store i32 0, ptr %1567, align 8, !tbaa !103
  br label %1568

1568:                                             ; preds = %1566, %1561, %1557, %1499, %1471
  %1569 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1
  %1570 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 3
  %1571 = load i32, ptr %1570, align 8, !tbaa !103
  %1572 = icmp eq i32 %1571, 0
  br i1 %1572, label %1573, label %1638

1573:                                             ; preds = %1568
  %1574 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 4
  %1575 = load i32, ptr %1574, align 4, !tbaa !102
  %1576 = icmp eq i32 %1575, 0
  br i1 %1576, label %1638, label %1577

1577:                                             ; preds = %1573
  %1578 = load i32, ptr %1569, align 8, !tbaa !85
  %1579 = load i32, ptr %1496, align 8, !tbaa !85
  %1580 = icmp ne i32 %1579, %1578
  %1581 = or i1 %1474, %1580
  br i1 %1581, label %1582, label %1598

1582:                                             ; preds = %1577
  %1583 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2
  %1584 = load i32, ptr %1583, align 8, !tbaa !85
  %1585 = icmp eq i32 %1584, %1578
  br i1 %1585, label %1586, label %1590

1586:                                             ; preds = %1582
  %1587 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 3
  %1588 = load i32, ptr %1587, align 8, !tbaa !103
  %1589 = icmp eq i32 %1588, 0
  br i1 %1589, label %1590, label %1598

1590:                                             ; preds = %1586, %1582
  %1591 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1592 = load i32, ptr %1591, align 8, !tbaa !85
  %1593 = icmp eq i32 %1592, %1578
  br i1 %1593, label %1594, label %1602

1594:                                             ; preds = %1590
  %1595 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  %1596 = load i32, ptr %1595, align 8, !tbaa !103
  %1597 = icmp eq i32 %1596, 0
  br i1 %1597, label %1602, label %1598

1598:                                             ; preds = %1594, %1586, %1577
  %1599 = phi i64 [ 2, %1586 ], [ 3, %1594 ], [ 0, %1577 ]
  %1600 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 %1599, i32 1
  %1601 = load i32, ptr %1600, align 4, !tbaa !88
  br label %1602

1602:                                             ; preds = %1598, %1594, %1590
  %1603 = phi i32 [ %1601, %1598 ], [ -1, %1594 ], [ -1, %1590 ]
  %1604 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 1
  %1605 = icmp eq i32 %1579, %1603
  br i1 %1605, label %1606, label %1612

1606:                                             ; preds = %1602
  %1607 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 1
  %1608 = load i32, ptr %1607, align 4, !tbaa !88
  %1609 = load i32, ptr %1604, align 4, !tbaa !88
  %1610 = icmp eq i32 %1608, %1609
  br i1 %1610, label %1611, label %1612

1611:                                             ; preds = %1606
  store i32 0, ptr %1472, align 8, !tbaa !103
  br label %1612

1612:                                             ; preds = %1611, %1606, %1602
  %1613 = phi i32 [ 0, %1611 ], [ %1473, %1606 ], [ %1473, %1602 ]
  %1614 = icmp eq i32 %1578, %1603
  br i1 %1614, label %1615, label %1616

1615:                                             ; preds = %1612
  store i32 0, ptr %1570, align 8, !tbaa !103
  br label %1616

1616:                                             ; preds = %1615, %1612
  %1617 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2
  %1618 = load i32, ptr %1617, align 8, !tbaa !85
  %1619 = icmp eq i32 %1618, %1603
  br i1 %1619, label %1620, label %1627

1620:                                             ; preds = %1616
  %1621 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 1
  %1622 = load i32, ptr %1621, align 4, !tbaa !88
  %1623 = load i32, ptr %1604, align 4, !tbaa !88
  %1624 = icmp eq i32 %1622, %1623
  br i1 %1624, label %1625, label %1627

1625:                                             ; preds = %1620
  %1626 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 3
  store i32 0, ptr %1626, align 8, !tbaa !103
  br label %1627

1627:                                             ; preds = %1625, %1620, %1616
  %1628 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1629 = load i32, ptr %1628, align 8, !tbaa !85
  %1630 = icmp eq i32 %1629, %1603
  br i1 %1630, label %1631, label %1638

1631:                                             ; preds = %1627
  %1632 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 1
  %1633 = load i32, ptr %1632, align 4, !tbaa !88
  %1634 = load i32, ptr %1604, align 4, !tbaa !88
  %1635 = icmp eq i32 %1633, %1634
  br i1 %1635, label %1636, label %1638

1636:                                             ; preds = %1631
  %1637 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  store i32 0, ptr %1637, align 8, !tbaa !103
  br label %1638

1638:                                             ; preds = %1636, %1631, %1627, %1573, %1568
  %1639 = phi i32 [ %1473, %1573 ], [ %1473, %1568 ], [ %1613, %1636 ], [ %1613, %1631 ], [ %1613, %1627 ]
  %1640 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2
  %1641 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 3
  %1642 = load i32, ptr %1641, align 8, !tbaa !103
  %1643 = icmp eq i32 %1642, 0
  br i1 %1643, label %1644, label %1705

1644:                                             ; preds = %1638
  %1645 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 4
  %1646 = load i32, ptr %1645, align 4, !tbaa !102
  %1647 = icmp eq i32 %1646, 0
  br i1 %1647, label %1705, label %1648

1648:                                             ; preds = %1644
  %1649 = load i32, ptr %1640, align 8, !tbaa !85
  %1650 = load i32, ptr %1496, align 8, !tbaa !85
  %1651 = icmp ne i32 %1650, %1649
  %1652 = icmp eq i32 %1639, 0
  %1653 = or i1 %1652, %1651
  br i1 %1653, label %1654, label %1666

1654:                                             ; preds = %1648
  %1655 = load i32, ptr %1569, align 8, !tbaa !85
  %1656 = icmp ne i32 %1655, %1649
  %1657 = or i1 %1572, %1656
  br i1 %1657, label %1658, label %1666

1658:                                             ; preds = %1654
  %1659 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1660 = load i32, ptr %1659, align 8, !tbaa !85
  %1661 = icmp eq i32 %1660, %1649
  br i1 %1661, label %1662, label %1670

1662:                                             ; preds = %1658
  %1663 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  %1664 = load i32, ptr %1663, align 8, !tbaa !103
  %1665 = icmp eq i32 %1664, 0
  br i1 %1665, label %1670, label %1666

1666:                                             ; preds = %1662, %1654, %1648
  %1667 = phi i64 [ 3, %1662 ], [ 0, %1648 ], [ 1, %1654 ]
  %1668 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 %1667, i32 1
  %1669 = load i32, ptr %1668, align 4, !tbaa !88
  br label %1670

1670:                                             ; preds = %1666, %1662, %1658
  %1671 = phi i32 [ %1669, %1666 ], [ -1, %1662 ], [ -1, %1658 ]
  %1672 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 1
  %1673 = icmp eq i32 %1650, %1671
  br i1 %1673, label %1674, label %1680

1674:                                             ; preds = %1670
  %1675 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 1
  %1676 = load i32, ptr %1675, align 4, !tbaa !88
  %1677 = load i32, ptr %1672, align 4, !tbaa !88
  %1678 = icmp eq i32 %1676, %1677
  br i1 %1678, label %1679, label %1680

1679:                                             ; preds = %1674
  store i32 0, ptr %1472, align 8, !tbaa !103
  br label %1680

1680:                                             ; preds = %1679, %1674, %1670
  %1681 = phi i32 [ 0, %1679 ], [ %1639, %1674 ], [ %1639, %1670 ]
  %1682 = load i32, ptr %1569, align 8, !tbaa !85
  %1683 = icmp eq i32 %1682, %1671
  br i1 %1683, label %1684, label %1690

1684:                                             ; preds = %1680
  %1685 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 1
  %1686 = load i32, ptr %1685, align 4, !tbaa !88
  %1687 = load i32, ptr %1672, align 4, !tbaa !88
  %1688 = icmp eq i32 %1686, %1687
  br i1 %1688, label %1689, label %1690

1689:                                             ; preds = %1684
  store i32 0, ptr %1570, align 8, !tbaa !103
  br label %1690

1690:                                             ; preds = %1689, %1684, %1680
  %1691 = phi i32 [ 0, %1689 ], [ %1571, %1684 ], [ %1571, %1680 ]
  %1692 = icmp eq i32 %1649, %1671
  br i1 %1692, label %1693, label %1694

1693:                                             ; preds = %1690
  store i32 0, ptr %1641, align 8, !tbaa !103
  br label %1694

1694:                                             ; preds = %1693, %1690
  %1695 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1696 = load i32, ptr %1695, align 8, !tbaa !85
  %1697 = icmp eq i32 %1696, %1671
  br i1 %1697, label %1698, label %1705

1698:                                             ; preds = %1694
  %1699 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 1
  %1700 = load i32, ptr %1699, align 4, !tbaa !88
  %1701 = load i32, ptr %1672, align 4, !tbaa !88
  %1702 = icmp eq i32 %1700, %1701
  br i1 %1702, label %1703, label %1705

1703:                                             ; preds = %1698
  %1704 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  store i32 0, ptr %1704, align 8, !tbaa !103
  br label %1705

1705:                                             ; preds = %1703, %1698, %1694, %1644, %1638
  %1706 = phi i32 [ %1571, %1644 ], [ %1571, %1638 ], [ %1691, %1703 ], [ %1691, %1698 ], [ %1691, %1694 ]
  %1707 = phi i32 [ %1639, %1644 ], [ %1639, %1638 ], [ %1681, %1703 ], [ %1681, %1698 ], [ %1681, %1694 ]
  %1708 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3
  %1709 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 3
  %1710 = load i32, ptr %1709, align 8, !tbaa !103
  %1711 = icmp eq i32 %1710, 0
  br i1 %1711, label %1712, label %1769

1712:                                             ; preds = %1705
  %1713 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 4
  %1714 = load i32, ptr %1713, align 4, !tbaa !102
  %1715 = icmp eq i32 %1714, 0
  br i1 %1715, label %1769, label %1716

1716:                                             ; preds = %1712
  %1717 = load i32, ptr %1708, align 8, !tbaa !85
  %1718 = load i32, ptr %1496, align 8, !tbaa !85
  %1719 = icmp ne i32 %1718, %1717
  %1720 = icmp eq i32 %1707, 0
  %1721 = or i1 %1720, %1719
  br i1 %1721, label %1722, label %1731

1722:                                             ; preds = %1716
  %1723 = load i32, ptr %1569, align 8, !tbaa !85
  %1724 = icmp ne i32 %1723, %1717
  %1725 = icmp eq i32 %1706, 0
  %1726 = or i1 %1725, %1724
  br i1 %1726, label %1727, label %1731

1727:                                             ; preds = %1722
  %1728 = load i32, ptr %1640, align 8, !tbaa !85
  %1729 = icmp ne i32 %1728, %1717
  %1730 = or i1 %1643, %1729
  br i1 %1730, label %1735, label %1731

1731:                                             ; preds = %1727, %1722, %1716
  %1732 = phi i64 [ 0, %1716 ], [ 1, %1722 ], [ 2, %1727 ]
  %1733 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 %1732, i32 1
  %1734 = load i32, ptr %1733, align 4, !tbaa !88
  br label %1735

1735:                                             ; preds = %1731, %1727
  %1736 = phi i32 [ %1734, %1731 ], [ -1, %1727 ]
  %1737 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 1
  %1738 = icmp eq i32 %1718, %1736
  br i1 %1738, label %1739, label %1745

1739:                                             ; preds = %1735
  %1740 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 1
  %1741 = load i32, ptr %1740, align 4, !tbaa !88
  %1742 = load i32, ptr %1737, align 4, !tbaa !88
  %1743 = icmp eq i32 %1741, %1742
  br i1 %1743, label %1744, label %1745

1744:                                             ; preds = %1739
  store i32 0, ptr %1472, align 8, !tbaa !103
  br label %1745

1745:                                             ; preds = %1744, %1739, %1735
  %1746 = phi i32 [ 0, %1744 ], [ %1707, %1739 ], [ %1707, %1735 ]
  %1747 = load i32, ptr %1569, align 8, !tbaa !85
  %1748 = icmp eq i32 %1747, %1736
  br i1 %1748, label %1749, label %1755

1749:                                             ; preds = %1745
  %1750 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 1
  %1751 = load i32, ptr %1750, align 4, !tbaa !88
  %1752 = load i32, ptr %1737, align 4, !tbaa !88
  %1753 = icmp eq i32 %1751, %1752
  br i1 %1753, label %1754, label %1755

1754:                                             ; preds = %1749
  store i32 0, ptr %1570, align 8, !tbaa !103
  br label %1755

1755:                                             ; preds = %1754, %1749, %1745
  %1756 = phi i32 [ 0, %1754 ], [ %1706, %1749 ], [ %1706, %1745 ]
  %1757 = load i32, ptr %1640, align 8, !tbaa !85
  %1758 = icmp eq i32 %1757, %1736
  br i1 %1758, label %1759, label %1765

1759:                                             ; preds = %1755
  %1760 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 1
  %1761 = load i32, ptr %1760, align 4, !tbaa !88
  %1762 = load i32, ptr %1737, align 4, !tbaa !88
  %1763 = icmp eq i32 %1761, %1762
  br i1 %1763, label %1764, label %1765

1764:                                             ; preds = %1759
  store i32 0, ptr %1641, align 8, !tbaa !103
  br label %1765

1765:                                             ; preds = %1764, %1759, %1755
  %1766 = phi i32 [ 0, %1764 ], [ %1642, %1759 ], [ %1642, %1755 ]
  %1767 = icmp eq i32 %1717, %1736
  br i1 %1767, label %1768, label %1769

1768:                                             ; preds = %1765
  store i32 0, ptr %1709, align 8, !tbaa !103
  br label %1769

1769:                                             ; preds = %1768, %1765, %1712, %1705
  %1770 = phi i32 [ %1642, %1712 ], [ %1642, %1705 ], [ %1766, %1768 ], [ %1766, %1765 ]
  %1771 = phi i32 [ %1706, %1712 ], [ %1706, %1705 ], [ %1756, %1768 ], [ %1756, %1765 ]
  %1772 = phi i32 [ %1707, %1712 ], [ %1707, %1705 ], [ %1746, %1768 ], [ %1746, %1765 ]
  store i8 1, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  %1773 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %1774 = icmp eq i32 %1772, 0
  br i1 %1774, label %1786, label %1775

1775:                                             ; preds = %1769
  %1776 = load i32, ptr %1496, align 8, !tbaa !85
  %1777 = icmp eq i32 %1776, 20
  br i1 %1777, label %1778, label %1795

1778:                                             ; preds = %1775
  %1779 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 1
  %1780 = load i32, ptr %1779, align 4, !tbaa !88
  %1781 = icmp eq i32 %1780, 6
  %1782 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %1783 = icmp ne i8 %1782, 0
  %1784 = select i1 %1781, i1 true, i1 %1783
  br i1 %1784, label %1795, label %1785

1785:                                             ; preds = %1778
  store i8 0, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  br label %1795

1786:                                             ; preds = %1769
  %1787 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 0, i32 4
  %1788 = load i32, ptr %1787, align 4, !tbaa !102
  %1789 = icmp eq i32 %1788, 0
  br i1 %1789, label %1795, label %1790

1790:                                             ; preds = %1786
  store i32 0, ptr %1787, align 4, !tbaa !102
  %1791 = load i32, ptr %1496, align 8, !tbaa !85
  %1792 = zext i32 %1791 to i64
  %1793 = shl nuw i64 1, %1792
  %1794 = add nsw i32 %1773, -1
  store i32 %1794, ptr @num_eliminable, align 4, !tbaa !21
  br label %1795

1795:                                             ; preds = %1790, %1786, %1785, %1778, %1775
  %1796 = phi i64 [ 0, %1786 ], [ %1793, %1790 ], [ 0, %1778 ], [ 0, %1785 ], [ 0, %1775 ]
  %1797 = phi i8 [ 1, %1786 ], [ 1, %1790 ], [ 1, %1778 ], [ 0, %1785 ], [ 1, %1775 ]
  %1798 = phi i32 [ %1773, %1786 ], [ %1794, %1790 ], [ %1773, %1778 ], [ %1773, %1785 ], [ %1773, %1775 ]
  %1799 = icmp eq i32 %1771, 0
  br i1 %1799, label %1811, label %1800

1800:                                             ; preds = %1795
  %1801 = load i32, ptr %1569, align 8, !tbaa !85
  %1802 = icmp eq i32 %1801, 20
  br i1 %1802, label %1803, label %1821

1803:                                             ; preds = %1800
  %1804 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 1
  %1805 = load i32, ptr %1804, align 4, !tbaa !88
  %1806 = icmp eq i32 %1805, 6
  %1807 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %1808 = icmp ne i8 %1807, 0
  %1809 = select i1 %1806, i1 true, i1 %1808
  br i1 %1809, label %1821, label %1810

1810:                                             ; preds = %1803
  store i8 0, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  br label %1821

1811:                                             ; preds = %1795
  %1812 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 1, i32 4
  %1813 = load i32, ptr %1812, align 4, !tbaa !102
  %1814 = icmp eq i32 %1813, 0
  br i1 %1814, label %1821, label %1815

1815:                                             ; preds = %1811
  store i32 0, ptr %1812, align 4, !tbaa !102
  %1816 = load i32, ptr %1569, align 8, !tbaa !85
  %1817 = zext i32 %1816 to i64
  %1818 = shl nuw i64 1, %1817
  %1819 = or i64 %1818, %1796
  %1820 = add nsw i32 %1798, -1
  store i32 %1820, ptr @num_eliminable, align 4, !tbaa !21
  br label %1821

1821:                                             ; preds = %1815, %1811, %1810, %1803, %1800
  %1822 = phi i64 [ %1796, %1811 ], [ %1819, %1815 ], [ %1796, %1803 ], [ %1796, %1810 ], [ %1796, %1800 ]
  %1823 = phi i8 [ %1797, %1811 ], [ %1797, %1815 ], [ %1797, %1803 ], [ 0, %1810 ], [ %1797, %1800 ]
  %1824 = phi i32 [ %1798, %1811 ], [ %1820, %1815 ], [ %1798, %1803 ], [ %1798, %1810 ], [ %1798, %1800 ]
  %1825 = icmp eq i32 %1770, 0
  br i1 %1825, label %1837, label %1826

1826:                                             ; preds = %1821
  %1827 = load i32, ptr %1640, align 8, !tbaa !85
  %1828 = icmp eq i32 %1827, 20
  br i1 %1828, label %1829, label %1847

1829:                                             ; preds = %1826
  %1830 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 1
  %1831 = load i32, ptr %1830, align 4, !tbaa !88
  %1832 = icmp eq i32 %1831, 6
  %1833 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %1834 = icmp ne i8 %1833, 0
  %1835 = select i1 %1832, i1 true, i1 %1834
  br i1 %1835, label %1847, label %1836

1836:                                             ; preds = %1829
  store i8 0, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  br label %1847

1837:                                             ; preds = %1821
  %1838 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 2, i32 4
  %1839 = load i32, ptr %1838, align 4, !tbaa !102
  %1840 = icmp eq i32 %1839, 0
  br i1 %1840, label %1847, label %1841

1841:                                             ; preds = %1837
  store i32 0, ptr %1838, align 4, !tbaa !102
  %1842 = load i32, ptr %1640, align 8, !tbaa !85
  %1843 = zext i32 %1842 to i64
  %1844 = shl nuw i64 1, %1843
  %1845 = or i64 %1844, %1822
  %1846 = add nsw i32 %1824, -1
  store i32 %1846, ptr @num_eliminable, align 4, !tbaa !21
  br label %1847

1847:                                             ; preds = %1841, %1837, %1836, %1829, %1826
  %1848 = phi i64 [ %1822, %1837 ], [ %1845, %1841 ], [ %1822, %1829 ], [ %1822, %1836 ], [ %1822, %1826 ]
  %1849 = phi i8 [ %1823, %1837 ], [ %1823, %1841 ], [ %1823, %1829 ], [ 0, %1836 ], [ %1823, %1826 ]
  %1850 = phi i32 [ %1824, %1837 ], [ %1846, %1841 ], [ %1824, %1829 ], [ %1824, %1836 ], [ %1824, %1826 ]
  br i1 %1711, label %1862, label %1851

1851:                                             ; preds = %1847
  %1852 = load i32, ptr %1708, align 8, !tbaa !85
  %1853 = icmp eq i32 %1852, 20
  br i1 %1853, label %1854, label %1872

1854:                                             ; preds = %1851
  %1855 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 1
  %1856 = load i32, ptr %1855, align 4, !tbaa !88
  %1857 = icmp eq i32 %1856, 6
  %1858 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 43), align 1
  %1859 = icmp ne i8 %1858, 0
  %1860 = select i1 %1857, i1 true, i1 %1859
  br i1 %1860, label %1872, label %1861

1861:                                             ; preds = %1854
  store i8 0, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  br label %1879

1862:                                             ; preds = %1847
  %1863 = getelementptr inbounds %struct.elim_table, ptr %1496, i64 3, i32 4
  %1864 = load i32, ptr %1863, align 4, !tbaa !102
  %1865 = icmp eq i32 %1864, 0
  br i1 %1865, label %1872, label %1866

1866:                                             ; preds = %1862
  store i32 0, ptr %1863, align 4, !tbaa !102
  %1867 = load i32, ptr %1708, align 8, !tbaa !85
  %1868 = zext i32 %1867 to i64
  %1869 = shl nuw i64 1, %1868
  %1870 = or i64 %1869, %1848
  %1871 = add nsw i32 %1850, -1
  store i32 %1871, ptr @num_eliminable, align 4, !tbaa !21
  br label %1872

1872:                                             ; preds = %1866, %1862, %1854, %1851
  %1873 = phi i64 [ %1848, %1862 ], [ %1870, %1866 ], [ %1848, %1854 ], [ %1848, %1851 ]
  %1874 = icmp eq i8 %1849, 0
  %1875 = icmp ne i8 %1470, 0
  %1876 = select i1 %1874, i1 true, i1 %1875
  %1877 = or i64 %1873, 64
  %1878 = select i1 %1876, i64 %1873, i64 %1877
  br label %1879

1879:                                             ; preds = %1872, %1861
  %1880 = phi i64 [ %1848, %1861 ], [ %1878, %1872 ]
  %1881 = xor i64 %1880, -1
  %1882 = load i64, ptr @used_spill_regs, align 8, !tbaa !40
  %1883 = and i64 %1882, %1881
  store i64 %1883, ptr @used_spill_regs, align 8, !tbaa !40
  br label %1884

1884:                                             ; preds = %1879, %1935
  %1885 = phi i64 [ 0, %1879 ], [ %1938, %1935 ]
  %1886 = phi i32 [ 0, %1879 ], [ %1937, %1935 ]
  %1887 = phi i32 [ %1469, %1879 ], [ %1936, %1935 ]
  %1888 = shl nuw nsw i64 1, %1885
  %1889 = and i64 %1888, %1880
  %1890 = icmp eq i64 %1889, 0
  br i1 %1890, label %1935, label %1891

1891:                                             ; preds = %1884
  %1892 = load i64, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %1893 = or i64 %1892, %1888
  store i64 %1893, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %1894 = trunc i64 %1885 to i32
  call void @df_set_regs_ever_live(i32 noundef %1894, i8 noundef zeroext 1) #19
  %1895 = load i32, ptr @max_regno, align 4, !tbaa !21
  %1896 = icmp sgt i32 %1895, 53
  br i1 %1896, label %1897, label %1935

1897:                                             ; preds = %1891
  %1898 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  br label %1899

1899:                                             ; preds = %1929, %1897
  %1900 = phi i32 [ %1895, %1897 ], [ %1930, %1929 ]
  %1901 = phi ptr [ %1898, %1897 ], [ %1931, %1929 ]
  %1902 = phi i64 [ 53, %1897 ], [ %1932, %1929 ]
  %1903 = getelementptr inbounds i16, ptr %1901, i64 %1902
  %1904 = load i16, ptr %1903, align 2, !tbaa !44
  %1905 = sext i16 %1904 to i32
  %1906 = icmp slt i16 %1904, 0
  %1907 = zext i32 %1905 to i64
  %1908 = icmp ult i64 %1885, %1907
  %1909 = or i1 %1906, %1908
  br i1 %1909, label %1929, label %1910

1910:                                             ; preds = %1899
  %1911 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %1912 = getelementptr inbounds ptr, ptr %1911, i64 %1902
  %1913 = load ptr, ptr %1912, align 8, !tbaa !6
  %1914 = load i32, ptr %1913, align 8
  %1915 = lshr i32 %1914, 16
  %1916 = and i32 %1915, 255
  %1917 = zext i32 %1916 to i64
  %1918 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1907, i64 %1917
  %1919 = load i8, ptr %1918, align 1, !tbaa !17
  %1920 = zext i8 %1919 to i32
  %1921 = add nsw i32 %1920, %1905
  %1922 = zext i32 %1921 to i64
  %1923 = icmp ult i64 %1885, %1922
  br i1 %1923, label %1924, label %1929

1924:                                             ; preds = %1910
  %1925 = trunc i64 %1902 to i32
  %1926 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %1925) #19
  %1927 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %1928 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %1929

1929:                                             ; preds = %1924, %1910, %1899
  %1930 = phi i32 [ %1900, %1899 ], [ %1900, %1910 ], [ %1928, %1924 ]
  %1931 = phi ptr [ %1901, %1899 ], [ %1901, %1910 ], [ %1927, %1924 ]
  %1932 = add nuw nsw i64 %1902, 1
  %1933 = sext i32 %1930 to i64
  %1934 = icmp slt i64 %1932, %1933
  br i1 %1934, label %1899, label %1935, !llvm.loop !119

1935:                                             ; preds = %1929, %1891, %1884
  %1936 = phi i32 [ %1887, %1884 ], [ 1, %1891 ], [ 1, %1929 ]
  %1937 = phi i32 [ %1886, %1884 ], [ 1, %1891 ], [ 1, %1929 ]
  %1938 = add nuw nsw i64 %1885, 1
  %1939 = icmp eq i64 %1938, 53
  br i1 %1939, label %1940, label %1884, !llvm.loop !138

1940:                                             ; preds = %1935
  %1941 = load ptr, ptr @insns_need_reload, align 8, !tbaa !6
  %1942 = icmp eq ptr %1941, null
  br i1 %1942, label %3353, label %1943

1943:                                             ; preds = %1940, %3349
  %1944 = phi ptr [ %3351, %3349 ], [ %1941, %1940 ]
  %1945 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 9
  %1946 = load i32, ptr %1945, align 8, !tbaa !131
  %1947 = icmp sgt i32 %1946, 0
  %1948 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 8
  %1949 = load ptr, ptr %1948, align 8, !tbaa !133
  br i1 %1947, label %1950, label %1977

1950:                                             ; preds = %1943
  %1951 = zext i32 %1946 to i64
  br label %1952

1952:                                             ; preds = %1972, %1950
  %1953 = phi i64 [ 0, %1950 ], [ %1975, %1972 ]
  %1954 = getelementptr inbounds %struct.reload, ptr %1949, i64 %1953, i32 11
  %1955 = load ptr, ptr %1954, align 8, !tbaa !139
  %1956 = icmp eq ptr %1955, null
  br i1 %1956, label %1970, label %1957

1957:                                             ; preds = %1952
  %1958 = getelementptr i8, ptr %1955, i64 8
  %1959 = load i32, ptr %1958, align 8, !tbaa !17
  %1960 = getelementptr inbounds %struct.reload, ptr %1949, i64 %1953, i32 10
  store i32 %1959, ptr %1960, align 8, !tbaa !141
  %1961 = sext i32 %1959 to i64
  %1962 = load i32, ptr %1955, align 8
  %1963 = lshr i32 %1962, 16
  %1964 = and i32 %1963, 255
  %1965 = zext i32 %1964 to i64
  %1966 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1961, i64 %1965
  %1967 = load i8, ptr %1966, align 1, !tbaa !17
  %1968 = zext i8 %1967 to i32
  %1969 = getelementptr inbounds %struct.reload, ptr %1949, i64 %1953, i32 6
  store i32 %1968, ptr %1969, align 8, !tbaa !142
  br label %1972

1970:                                             ; preds = %1952
  %1971 = getelementptr inbounds %struct.reload, ptr %1949, i64 %1953, i32 10
  store i32 -1, ptr %1971, align 8, !tbaa !141
  br label %1972

1972:                                             ; preds = %1970, %1957
  %1973 = trunc i64 %1953 to i16
  %1974 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %1953
  store i16 %1973, ptr %1974, align 2, !tbaa !44
  %1975 = add nuw nsw i64 %1953, 1
  %1976 = icmp eq i64 %1975, %1951
  br i1 %1976, label %1977, label %1952, !llvm.loop !143

1977:                                             ; preds = %1972, %1943
  store i32 %1946, ptr @n_reloads, align 4, !tbaa !21
  %1978 = sext i32 %1946 to i64
  %1979 = mul nsw i64 %1978, 104
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 16 @rld, ptr align 8 %1949, i64 %1979, i1 false)
  store i64 0, ptr @used_spill_regs_local, align 8, !tbaa !40
  %1980 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %1981 = icmp eq ptr %1980, null
  br i1 %1981, label %1990, label %1982

1982:                                             ; preds = %1977
  %1983 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 3
  %1984 = load ptr, ptr %1983, align 8, !tbaa !111
  %1985 = getelementptr inbounds %struct.rtx_def, ptr %1984, i64 0, i32 1
  %1986 = load i32, ptr %1985, align 8, !tbaa !17
  %1987 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %1980, ptr noundef nonnull @.str.11, i32 noundef %1986)
  %1988 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %1989 = sext i32 %1988 to i64
  br label %1990

1990:                                             ; preds = %1982, %1977
  %1991 = phi i64 [ %1989, %1982 ], [ %1978, %1977 ]
  call void @spec_qsort(ptr noundef nonnull @reload_order, i64 noundef %1991, i64 noundef 2, ptr noundef nonnull @reload_reg_class_lower) #19
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #19
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #19
  %1992 = load i64, ptr @fixed_reg_set, align 8, !tbaa !40
  store i64 %1992, ptr @bad_spill_regs, align 8, !tbaa !40
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(212) @spill_cost, i8 0, i64 212, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(212) @spill_add_cost, i8 0, i64 212, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(212) @hard_regno_to_pseudo_regno, i8 -1, i64 212, i1 false), !tbaa !21
  store i64 0, ptr %4, align 8, !tbaa !40
  %1993 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 6
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %4, ptr noundef nonnull %1993) #19
  store i64 0, ptr %5, align 8, !tbaa !40
  %1994 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 7
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %5, ptr noundef nonnull %1994) #19
  %1995 = load i64, ptr %4, align 8, !tbaa !40
  %1996 = load i64, ptr @bad_spill_regs, align 8, !tbaa !40
  %1997 = or i64 %1996, %1995
  %1998 = load i64, ptr %5, align 8, !tbaa !40
  %1999 = or i64 %1997, %1998
  store i64 %1999, ptr @bad_spill_regs, align 8, !tbaa !40
  call void @bitmap_clear(ptr noundef nonnull @pseudos_counted) #19
  %2000 = load ptr, ptr %1993, align 8, !tbaa !37
  %2001 = icmp eq ptr %2000, null
  %2002 = select i1 %2001, ptr @bitmap_zero_bits, ptr %2000
  %2003 = getelementptr inbounds %struct.bitmap_element_def, ptr %2002, i64 0, i32 2
  %2004 = load i32, ptr %2003, align 8, !tbaa !38
  %2005 = icmp eq i32 %2004, 0
  %2006 = shl i32 %2004, 7
  %2007 = select i1 %2005, i32 53, i32 %2006
  %2008 = getelementptr inbounds %struct.bitmap_element_def, ptr %2002, i64 0, i32 3, i64 0
  %2009 = load i64, ptr %2008, align 8, !tbaa !40
  %2010 = and i32 %2007, 53
  %2011 = zext i32 %2010 to i64
  %2012 = lshr i64 %2009, %2011
  %2013 = icmp eq i64 %2012, 0
  %2014 = zext i1 %2013 to i32
  %2015 = add nuw nsw i32 %2007, %2014
  br label %2016

2016:                                             ; preds = %2170, %1990
  %2017 = phi i64 [ %2012, %1990 ], [ %2171, %2170 ]
  %2018 = phi i32 [ %2015, %1990 ], [ %2172, %2170 ]
  %2019 = phi i32 [ 0, %1990 ], [ %2025, %2170 ]
  %2020 = phi ptr [ %2002, %1990 ], [ %2026, %2170 ]
  %2021 = icmp eq i64 %2017, 0
  br i1 %2021, label %2036, label %2022

2022:                                             ; preds = %2045, %2016
  %2023 = phi i64 [ %2017, %2016 ], [ %2050, %2045 ]
  %2024 = phi i32 [ %2018, %2016 ], [ %2046, %2045 ]
  %2025 = phi i32 [ %2019, %2016 ], [ %2047, %2045 ]
  %2026 = phi ptr [ %2020, %2016 ], [ %2042, %2045 ]
  %2027 = and i64 %2023, 1
  %2028 = icmp eq i64 %2027, 0
  br i1 %2028, label %2029, label %2063

2029:                                             ; preds = %2022, %2029
  %2030 = phi i32 [ %2033, %2029 ], [ %2024, %2022 ]
  %2031 = phi i64 [ %2032, %2029 ], [ %2023, %2022 ]
  %2032 = lshr i64 %2031, 1
  %2033 = add i32 %2030, 1
  %2034 = and i64 %2031, 2
  %2035 = icmp eq i64 %2034, 0
  br i1 %2035, label %2029, label %2063, !llvm.loop !41

2036:                                             ; preds = %2016
  %2037 = add i32 %2018, 63
  %2038 = and i32 %2037, -64
  %2039 = add i32 %2019, 1
  br label %2040

2040:                                             ; preds = %2059, %2036
  %2041 = phi i32 [ %2038, %2036 ], [ %2062, %2059 ]
  %2042 = phi ptr [ %2020, %2036 ], [ %2057, %2059 ]
  %2043 = phi i32 [ %2039, %2036 ], [ 0, %2059 ]
  %2044 = icmp eq i32 %2043, 2
  br i1 %2044, label %2056, label %2045

2045:                                             ; preds = %2040, %2052
  %2046 = phi i32 [ %2053, %2052 ], [ %2041, %2040 ]
  %2047 = phi i32 [ %2054, %2052 ], [ %2043, %2040 ]
  %2048 = zext i32 %2047 to i64
  %2049 = getelementptr inbounds %struct.bitmap_element_def, ptr %2042, i64 0, i32 3, i64 %2048
  %2050 = load i64, ptr %2049, align 8, !tbaa !40
  %2051 = icmp eq i64 %2050, 0
  br i1 %2051, label %2052, label %2022

2052:                                             ; preds = %2045
  %2053 = add i32 %2046, 64
  %2054 = add i32 %2047, 1
  %2055 = icmp eq i32 %2054, 2
  br i1 %2055, label %2056, label %2045, !llvm.loop !42

2056:                                             ; preds = %2052, %2040
  %2057 = load ptr, ptr %2042, align 8, !tbaa !43
  %2058 = icmp eq ptr %2057, null
  br i1 %2058, label %2173, label %2059

2059:                                             ; preds = %2056
  %2060 = getelementptr inbounds %struct.bitmap_element_def, ptr %2057, i64 0, i32 2
  %2061 = load i32, ptr %2060, align 8, !tbaa !38
  %2062 = shl i32 %2061, 7
  br label %2040

2063:                                             ; preds = %2029, %2022
  %2064 = phi i64 [ %2023, %2022 ], [ %2032, %2029 ]
  %2065 = phi i32 [ %2024, %2022 ], [ %2033, %2029 ]
  %2066 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %2067 = sext i32 %2065 to i64
  %2068 = getelementptr inbounds %struct.reg_info_t, ptr %2066, i64 %2067
  %2069 = load i32, ptr %2068, align 4, !tbaa !144
  %2070 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %2071 = getelementptr inbounds i16, ptr %2070, i64 %2067
  %2072 = load i16, ptr %2071, align 2, !tbaa !44
  %2073 = call i32 @bitmap_bit_p(ptr noundef nonnull @pseudos_counted, i32 noundef %2065) #19
  %2074 = icmp eq i32 %2073, 0
  br i1 %2074, label %2075, label %2170

2075:                                             ; preds = %2063
  %2076 = call i32 @bitmap_bit_p(ptr noundef nonnull @spilled_pseudos, i32 noundef %2065) #19
  %2077 = icmp eq i32 %2076, 0
  br i1 %2077, label %2078, label %2170

2078:                                             ; preds = %2075
  %2079 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %2080 = icmp ne i8 %2079, 0
  %2081 = icmp slt i16 %2072, 0
  %2082 = select i1 %2080, i1 %2081, i1 false
  br i1 %2082, label %2170, label %2083

2083:                                             ; preds = %2078
  %2084 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @pseudos_counted, i32 noundef %2065) #19
  %2085 = icmp sgt i16 %2072, -1
  br i1 %2085, label %2087, label %2086

2086:                                             ; preds = %2083
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1796, ptr noundef nonnull @.str.2) #19
  br label %2087

2087:                                             ; preds = %2086, %2083
  %2088 = sext i16 %2072 to i64
  %2089 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %2088
  %2090 = load i32, ptr %2089, align 4, !tbaa !21
  %2091 = add nsw i32 %2090, %2069
  store i32 %2091, ptr %2089, align 4, !tbaa !21
  %2092 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %2093 = getelementptr inbounds ptr, ptr %2092, i64 %2067
  %2094 = load ptr, ptr %2093, align 8, !tbaa !6
  %2095 = load i32, ptr %2094, align 8
  %2096 = lshr i32 %2095, 16
  %2097 = and i32 %2096, 255
  %2098 = zext i32 %2097 to i64
  %2099 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2088, i64 %2098
  %2100 = load i8, ptr %2099, align 1, !tbaa !17
  %2101 = icmp eq i8 %2100, 0
  br i1 %2101, label %2170, label %2102

2102:                                             ; preds = %2087
  %2103 = zext i8 %2100 to i64
  %2104 = icmp ult i8 %2100, 32
  br i1 %2104, label %2159, label %2105

2105:                                             ; preds = %2102
  %2106 = and i64 %2103, 224
  %2107 = and i64 %2103, 31
  %2108 = insertelement <8 x i32> poison, i32 %2065, i64 0
  %2109 = shufflevector <8 x i32> %2108, <8 x i32> poison, <8 x i32> zeroinitializer
  %2110 = insertelement <8 x i32> poison, i32 %2065, i64 0
  %2111 = shufflevector <8 x i32> %2110, <8 x i32> poison, <8 x i32> zeroinitializer
  %2112 = insertelement <8 x i32> poison, i32 %2065, i64 0
  %2113 = shufflevector <8 x i32> %2112, <8 x i32> poison, <8 x i32> zeroinitializer
  %2114 = insertelement <8 x i32> poison, i32 %2065, i64 0
  %2115 = shufflevector <8 x i32> %2114, <8 x i32> poison, <8 x i32> zeroinitializer
  %2116 = insertelement <8 x i32> poison, i32 %2069, i64 0
  %2117 = shufflevector <8 x i32> %2116, <8 x i32> poison, <8 x i32> zeroinitializer
  %2118 = insertelement <8 x i32> poison, i32 %2069, i64 0
  %2119 = shufflevector <8 x i32> %2118, <8 x i32> poison, <8 x i32> zeroinitializer
  %2120 = insertelement <8 x i32> poison, i32 %2069, i64 0
  %2121 = shufflevector <8 x i32> %2120, <8 x i32> poison, <8 x i32> zeroinitializer
  %2122 = insertelement <8 x i32> poison, i32 %2069, i64 0
  %2123 = shufflevector <8 x i32> %2122, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %2124

2124:                                             ; preds = %2124, %2105
  %2125 = phi i64 [ 0, %2105 ], [ %2155, %2124 ]
  %2126 = xor i64 %2125, -1
  %2127 = add i64 %2126, %2103
  %2128 = add nsw i64 %2127, %2088
  %2129 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %2128
  %2130 = getelementptr inbounds i32, ptr %2129, i64 -7
  store <8 x i32> %2109, ptr %2130, align 4, !tbaa !21
  %2131 = getelementptr inbounds i32, ptr %2129, i64 -15
  store <8 x i32> %2111, ptr %2131, align 4, !tbaa !21
  %2132 = getelementptr inbounds i32, ptr %2129, i64 -23
  store <8 x i32> %2113, ptr %2132, align 4, !tbaa !21
  %2133 = getelementptr inbounds i32, ptr %2129, i64 -31
  store <8 x i32> %2115, ptr %2133, align 4, !tbaa !21
  %2134 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %2128
  %2135 = getelementptr inbounds i32, ptr %2134, i64 -7
  %2136 = load <8 x i32>, ptr %2135, align 4, !tbaa !21
  %2137 = shufflevector <8 x i32> %2136, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2138 = getelementptr inbounds i32, ptr %2134, i64 -15
  %2139 = load <8 x i32>, ptr %2138, align 4, !tbaa !21
  %2140 = shufflevector <8 x i32> %2139, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2141 = getelementptr inbounds i32, ptr %2134, i64 -23
  %2142 = load <8 x i32>, ptr %2141, align 4, !tbaa !21
  %2143 = shufflevector <8 x i32> %2142, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2144 = getelementptr inbounds i32, ptr %2134, i64 -31
  %2145 = load <8 x i32>, ptr %2144, align 4, !tbaa !21
  %2146 = shufflevector <8 x i32> %2145, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2147 = add nsw <8 x i32> %2137, %2117
  %2148 = add nsw <8 x i32> %2140, %2119
  %2149 = add nsw <8 x i32> %2143, %2121
  %2150 = add nsw <8 x i32> %2146, %2123
  %2151 = shufflevector <8 x i32> %2147, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2151, ptr %2135, align 4, !tbaa !21
  %2152 = shufflevector <8 x i32> %2148, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2152, ptr %2138, align 4, !tbaa !21
  %2153 = shufflevector <8 x i32> %2149, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2153, ptr %2141, align 4, !tbaa !21
  %2154 = shufflevector <8 x i32> %2150, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2154, ptr %2144, align 4, !tbaa !21
  %2155 = add nuw i64 %2125, 32
  %2156 = icmp eq i64 %2155, %2106
  br i1 %2156, label %2157, label %2124, !llvm.loop !146

2157:                                             ; preds = %2124
  %2158 = icmp eq i64 %2106, %2103
  br i1 %2158, label %2170, label %2159

2159:                                             ; preds = %2102, %2157
  %2160 = phi i64 [ %2103, %2102 ], [ %2107, %2157 ]
  br label %2161

2161:                                             ; preds = %2159, %2161
  %2162 = phi i64 [ %2163, %2161 ], [ %2160, %2159 ]
  %2163 = add nsw i64 %2162, -1
  %2164 = add nsw i64 %2163, %2088
  %2165 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %2164
  store i32 %2065, ptr %2165, align 4, !tbaa !21
  %2166 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %2164
  %2167 = load i32, ptr %2166, align 4, !tbaa !21
  %2168 = add nsw i32 %2167, %2069
  store i32 %2168, ptr %2166, align 4, !tbaa !21
  %2169 = icmp ugt i64 %2162, 1
  br i1 %2169, label %2161, label %2170, !llvm.loop !147

2170:                                             ; preds = %2161, %2157, %2087, %2078, %2075, %2063
  %2171 = lshr i64 %2064, 1
  %2172 = add i32 %2065, 1
  br label %2016, !llvm.loop !148

2173:                                             ; preds = %2056
  %2174 = load ptr, ptr %1994, align 8, !tbaa !37
  %2175 = icmp eq ptr %2174, null
  %2176 = select i1 %2175, ptr @bitmap_zero_bits, ptr %2174
  %2177 = getelementptr inbounds %struct.bitmap_element_def, ptr %2176, i64 0, i32 2
  %2178 = load i32, ptr %2177, align 8, !tbaa !38
  %2179 = icmp eq i32 %2178, 0
  %2180 = shl i32 %2178, 7
  %2181 = select i1 %2179, i32 53, i32 %2180
  %2182 = getelementptr inbounds %struct.bitmap_element_def, ptr %2176, i64 0, i32 3, i64 0
  %2183 = load i64, ptr %2182, align 8, !tbaa !40
  %2184 = and i32 %2181, 53
  %2185 = zext i32 %2184 to i64
  %2186 = lshr i64 %2183, %2185
  %2187 = icmp eq i64 %2186, 0
  %2188 = zext i1 %2187 to i32
  %2189 = add nuw nsw i32 %2181, %2188
  br label %2190

2190:                                             ; preds = %2344, %2173
  %2191 = phi i64 [ %2186, %2173 ], [ %2345, %2344 ]
  %2192 = phi i32 [ %2189, %2173 ], [ %2346, %2344 ]
  %2193 = phi i32 [ 0, %2173 ], [ %2199, %2344 ]
  %2194 = phi ptr [ %2176, %2173 ], [ %2200, %2344 ]
  %2195 = icmp eq i64 %2191, 0
  br i1 %2195, label %2210, label %2196

2196:                                             ; preds = %2219, %2190
  %2197 = phi i64 [ %2191, %2190 ], [ %2224, %2219 ]
  %2198 = phi i32 [ %2192, %2190 ], [ %2220, %2219 ]
  %2199 = phi i32 [ %2193, %2190 ], [ %2221, %2219 ]
  %2200 = phi ptr [ %2194, %2190 ], [ %2216, %2219 ]
  %2201 = and i64 %2197, 1
  %2202 = icmp eq i64 %2201, 0
  br i1 %2202, label %2203, label %2237

2203:                                             ; preds = %2196, %2203
  %2204 = phi i32 [ %2207, %2203 ], [ %2198, %2196 ]
  %2205 = phi i64 [ %2206, %2203 ], [ %2197, %2196 ]
  %2206 = lshr i64 %2205, 1
  %2207 = add i32 %2204, 1
  %2208 = and i64 %2205, 2
  %2209 = icmp eq i64 %2208, 0
  br i1 %2209, label %2203, label %2237, !llvm.loop !41

2210:                                             ; preds = %2190
  %2211 = add i32 %2192, 63
  %2212 = and i32 %2211, -64
  %2213 = add i32 %2193, 1
  br label %2214

2214:                                             ; preds = %2233, %2210
  %2215 = phi i32 [ %2212, %2210 ], [ %2236, %2233 ]
  %2216 = phi ptr [ %2194, %2210 ], [ %2231, %2233 ]
  %2217 = phi i32 [ %2213, %2210 ], [ 0, %2233 ]
  %2218 = icmp eq i32 %2217, 2
  br i1 %2218, label %2230, label %2219

2219:                                             ; preds = %2214, %2226
  %2220 = phi i32 [ %2227, %2226 ], [ %2215, %2214 ]
  %2221 = phi i32 [ %2228, %2226 ], [ %2217, %2214 ]
  %2222 = zext i32 %2221 to i64
  %2223 = getelementptr inbounds %struct.bitmap_element_def, ptr %2216, i64 0, i32 3, i64 %2222
  %2224 = load i64, ptr %2223, align 8, !tbaa !40
  %2225 = icmp eq i64 %2224, 0
  br i1 %2225, label %2226, label %2196

2226:                                             ; preds = %2219
  %2227 = add i32 %2220, 64
  %2228 = add i32 %2221, 1
  %2229 = icmp eq i32 %2228, 2
  br i1 %2229, label %2230, label %2219, !llvm.loop !42

2230:                                             ; preds = %2226, %2214
  %2231 = load ptr, ptr %2216, align 8, !tbaa !43
  %2232 = icmp eq ptr %2231, null
  br i1 %2232, label %2347, label %2233

2233:                                             ; preds = %2230
  %2234 = getelementptr inbounds %struct.bitmap_element_def, ptr %2231, i64 0, i32 2
  %2235 = load i32, ptr %2234, align 8, !tbaa !38
  %2236 = shl i32 %2235, 7
  br label %2214

2237:                                             ; preds = %2203, %2196
  %2238 = phi i64 [ %2197, %2196 ], [ %2206, %2203 ]
  %2239 = phi i32 [ %2198, %2196 ], [ %2207, %2203 ]
  %2240 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %2241 = sext i32 %2239 to i64
  %2242 = getelementptr inbounds %struct.reg_info_t, ptr %2240, i64 %2241
  %2243 = load i32, ptr %2242, align 4, !tbaa !144
  %2244 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %2245 = getelementptr inbounds i16, ptr %2244, i64 %2241
  %2246 = load i16, ptr %2245, align 2, !tbaa !44
  %2247 = call i32 @bitmap_bit_p(ptr noundef nonnull @pseudos_counted, i32 noundef %2239) #19
  %2248 = icmp eq i32 %2247, 0
  br i1 %2248, label %2249, label %2344

2249:                                             ; preds = %2237
  %2250 = call i32 @bitmap_bit_p(ptr noundef nonnull @spilled_pseudos, i32 noundef %2239) #19
  %2251 = icmp eq i32 %2250, 0
  br i1 %2251, label %2252, label %2344

2252:                                             ; preds = %2249
  %2253 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %2254 = icmp ne i8 %2253, 0
  %2255 = icmp slt i16 %2246, 0
  %2256 = select i1 %2254, i1 %2255, i1 false
  br i1 %2256, label %2344, label %2257

2257:                                             ; preds = %2252
  %2258 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @pseudos_counted, i32 noundef %2239) #19
  %2259 = icmp sgt i16 %2246, -1
  br i1 %2259, label %2261, label %2260

2260:                                             ; preds = %2257
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1796, ptr noundef nonnull @.str.2) #19
  br label %2261

2261:                                             ; preds = %2260, %2257
  %2262 = sext i16 %2246 to i64
  %2263 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %2262
  %2264 = load i32, ptr %2263, align 4, !tbaa !21
  %2265 = add nsw i32 %2264, %2243
  store i32 %2265, ptr %2263, align 4, !tbaa !21
  %2266 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %2267 = getelementptr inbounds ptr, ptr %2266, i64 %2241
  %2268 = load ptr, ptr %2267, align 8, !tbaa !6
  %2269 = load i32, ptr %2268, align 8
  %2270 = lshr i32 %2269, 16
  %2271 = and i32 %2270, 255
  %2272 = zext i32 %2271 to i64
  %2273 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2262, i64 %2272
  %2274 = load i8, ptr %2273, align 1, !tbaa !17
  %2275 = icmp eq i8 %2274, 0
  br i1 %2275, label %2344, label %2276

2276:                                             ; preds = %2261
  %2277 = zext i8 %2274 to i64
  %2278 = icmp ult i8 %2274, 32
  br i1 %2278, label %2333, label %2279

2279:                                             ; preds = %2276
  %2280 = and i64 %2277, 224
  %2281 = and i64 %2277, 31
  %2282 = insertelement <8 x i32> poison, i32 %2239, i64 0
  %2283 = shufflevector <8 x i32> %2282, <8 x i32> poison, <8 x i32> zeroinitializer
  %2284 = insertelement <8 x i32> poison, i32 %2239, i64 0
  %2285 = shufflevector <8 x i32> %2284, <8 x i32> poison, <8 x i32> zeroinitializer
  %2286 = insertelement <8 x i32> poison, i32 %2239, i64 0
  %2287 = shufflevector <8 x i32> %2286, <8 x i32> poison, <8 x i32> zeroinitializer
  %2288 = insertelement <8 x i32> poison, i32 %2239, i64 0
  %2289 = shufflevector <8 x i32> %2288, <8 x i32> poison, <8 x i32> zeroinitializer
  %2290 = insertelement <8 x i32> poison, i32 %2243, i64 0
  %2291 = shufflevector <8 x i32> %2290, <8 x i32> poison, <8 x i32> zeroinitializer
  %2292 = insertelement <8 x i32> poison, i32 %2243, i64 0
  %2293 = shufflevector <8 x i32> %2292, <8 x i32> poison, <8 x i32> zeroinitializer
  %2294 = insertelement <8 x i32> poison, i32 %2243, i64 0
  %2295 = shufflevector <8 x i32> %2294, <8 x i32> poison, <8 x i32> zeroinitializer
  %2296 = insertelement <8 x i32> poison, i32 %2243, i64 0
  %2297 = shufflevector <8 x i32> %2296, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %2298

2298:                                             ; preds = %2298, %2279
  %2299 = phi i64 [ 0, %2279 ], [ %2329, %2298 ]
  %2300 = xor i64 %2299, -1
  %2301 = add i64 %2300, %2277
  %2302 = add nsw i64 %2301, %2262
  %2303 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %2302
  %2304 = getelementptr inbounds i32, ptr %2303, i64 -7
  store <8 x i32> %2283, ptr %2304, align 4, !tbaa !21
  %2305 = getelementptr inbounds i32, ptr %2303, i64 -15
  store <8 x i32> %2285, ptr %2305, align 4, !tbaa !21
  %2306 = getelementptr inbounds i32, ptr %2303, i64 -23
  store <8 x i32> %2287, ptr %2306, align 4, !tbaa !21
  %2307 = getelementptr inbounds i32, ptr %2303, i64 -31
  store <8 x i32> %2289, ptr %2307, align 4, !tbaa !21
  %2308 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %2302
  %2309 = getelementptr inbounds i32, ptr %2308, i64 -7
  %2310 = load <8 x i32>, ptr %2309, align 4, !tbaa !21
  %2311 = shufflevector <8 x i32> %2310, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2312 = getelementptr inbounds i32, ptr %2308, i64 -15
  %2313 = load <8 x i32>, ptr %2312, align 4, !tbaa !21
  %2314 = shufflevector <8 x i32> %2313, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2315 = getelementptr inbounds i32, ptr %2308, i64 -23
  %2316 = load <8 x i32>, ptr %2315, align 4, !tbaa !21
  %2317 = shufflevector <8 x i32> %2316, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2318 = getelementptr inbounds i32, ptr %2308, i64 -31
  %2319 = load <8 x i32>, ptr %2318, align 4, !tbaa !21
  %2320 = shufflevector <8 x i32> %2319, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %2321 = add nsw <8 x i32> %2311, %2291
  %2322 = add nsw <8 x i32> %2314, %2293
  %2323 = add nsw <8 x i32> %2317, %2295
  %2324 = add nsw <8 x i32> %2320, %2297
  %2325 = shufflevector <8 x i32> %2321, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2325, ptr %2309, align 4, !tbaa !21
  %2326 = shufflevector <8 x i32> %2322, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2326, ptr %2312, align 4, !tbaa !21
  %2327 = shufflevector <8 x i32> %2323, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2327, ptr %2315, align 4, !tbaa !21
  %2328 = shufflevector <8 x i32> %2324, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %2328, ptr %2318, align 4, !tbaa !21
  %2329 = add nuw i64 %2299, 32
  %2330 = icmp eq i64 %2329, %2280
  br i1 %2330, label %2331, label %2298, !llvm.loop !149

2331:                                             ; preds = %2298
  %2332 = icmp eq i64 %2280, %2277
  br i1 %2332, label %2344, label %2333

2333:                                             ; preds = %2276, %2331
  %2334 = phi i64 [ %2277, %2276 ], [ %2281, %2331 ]
  br label %2335

2335:                                             ; preds = %2333, %2335
  %2336 = phi i64 [ %2337, %2335 ], [ %2334, %2333 ]
  %2337 = add nsw i64 %2336, -1
  %2338 = add nsw i64 %2337, %2262
  %2339 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %2338
  store i32 %2239, ptr %2339, align 4, !tbaa !21
  %2340 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %2338
  %2341 = load i32, ptr %2340, align 4, !tbaa !21
  %2342 = add nsw i32 %2341, %2243
  store i32 %2342, ptr %2340, align 4, !tbaa !21
  %2343 = icmp ugt i64 %2336, 1
  br i1 %2343, label %2335, label %2344, !llvm.loop !150

2344:                                             ; preds = %2335, %2331, %2261, %2252, %2249, %2237
  %2345 = lshr i64 %2238, 1
  %2346 = add i32 %2239, 1
  br label %2190, !llvm.loop !151

2347:                                             ; preds = %2230
  call void @bitmap_clear(ptr noundef nonnull @pseudos_counted) #19
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #19
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #19
  %2348 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2349 = icmp sgt i32 %2348, 0
  br i1 %2349, label %2352, label %2350

2350:                                             ; preds = %2347
  %2351 = sext i32 %2348 to i64
  br label %3341

2352:                                             ; preds = %2347
  %2353 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 3
  br label %2354

2354:                                             ; preds = %3336, %2352
  %2355 = phi i64 [ 0, %2352 ], [ %3337, %3336 ]
  %2356 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %2355
  %2357 = load i16, ptr %2356, align 2, !tbaa !44
  %2358 = sext i16 %2357 to i64
  %2359 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 1
  %2360 = load ptr, ptr %2359, align 8, !tbaa !152
  %2361 = icmp eq ptr %2360, null
  br i1 %2361, label %2362, label %2371

2362:                                             ; preds = %2354
  %2363 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358
  %2364 = load ptr, ptr %2363, align 8, !tbaa !153
  %2365 = icmp eq ptr %2364, null
  br i1 %2365, label %2366, label %2371

2366:                                             ; preds = %2362
  %2367 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 18
  %2368 = load i8, ptr %2367, align 8
  %2369 = and i8 %2368, 4
  %2370 = icmp eq i8 %2369, 0
  br i1 %2370, label %3336, label %2371

2371:                                             ; preds = %2366, %2362, %2354
  %2372 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 18
  %2373 = load i8, ptr %2372, align 8
  %2374 = and i8 %2373, 1
  %2375 = icmp eq i8 %2374, 0
  br i1 %2375, label %2376, label %3336

2376:                                             ; preds = %2371
  %2377 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 10
  %2378 = load i32, ptr %2377, align 8, !tbaa !141
  %2379 = icmp eq i32 %2378, -1
  br i1 %2379, label %2380, label %3336

2380:                                             ; preds = %2376
  %2381 = sext i16 %2357 to i32
  %2382 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2358
  %2383 = load i64, ptr @bad_spill_regs, align 8, !tbaa !40
  %2384 = load i64, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %2385 = or i64 %2384, %2383
  %2386 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2358, i32 2
  %2387 = load i32, ptr %2386, align 8, !tbaa !154
  %2388 = zext i32 %2387 to i64
  %2389 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %2388
  %2390 = load i64, ptr %2389, align 8, !tbaa !40
  %2391 = xor i64 %2390, -1
  %2392 = or i64 %2385, %2391
  %2393 = icmp eq i64 %2355, 0
  br i1 %2393, label %2398, label %2394

2394:                                             ; preds = %2380
  %2395 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 17
  %2396 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2358, i32 12
  %2397 = zext i32 %2381 to i64
  br label %2401

2398:                                             ; preds = %2730, %2380
  %2399 = phi i64 [ 0, %2380 ], [ %2731, %2730 ]
  %2400 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2358, i32 5
  br label %2734

2401:                                             ; preds = %2730, %2394
  %2402 = phi i64 [ 0, %2394 ], [ %2732, %2730 ]
  %2403 = phi i64 [ 0, %2394 ], [ %2731, %2730 ]
  %2404 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %2402
  %2405 = load i16, ptr %2404, align 2, !tbaa !44
  %2406 = sext i16 %2405 to i64
  %2407 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 10
  %2408 = load i32, ptr %2407, align 8, !tbaa !141
  %2409 = icmp sgt i32 %2408, -1
  br i1 %2409, label %2410, label %2730

2410:                                             ; preds = %2401
  %2411 = sext i16 %2405 to i32
  %2412 = load i32, ptr %2395, align 4, !tbaa !155
  %2413 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 12
  %2414 = load i32, ptr %2413, align 8, !tbaa !156
  %2415 = load i32, ptr %2396, align 8, !tbaa !156
  %2416 = icmp eq i32 %2412, 9
  br i1 %2416, label %2663, label %2417

2417:                                             ; preds = %2410
  %2418 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 17
  %2419 = load i32, ptr %2418, align 4, !tbaa !155
  switch i32 %2419, label %2657 [
    i32 0, label %2420
    i32 3, label %2426
    i32 4, label %2434
    i32 5, label %2442
    i32 6, label %2450
    i32 7, label %2458
    i32 8, label %2648
    i32 1, label %2651
    i32 2, label %2654
    i32 10, label %2655
    i32 9, label %2663
  ]

2420:                                             ; preds = %2417
  switch i32 %2412, label %2421 [
    i32 8, label %2663
    i32 7, label %2663
    i32 2, label %2663
    i32 0, label %2663
  ]

2421:                                             ; preds = %2420
  %2422 = add i32 %2412, -3
  %2423 = icmp ult i32 %2422, 2
  %2424 = icmp sgt i32 %2415, %2414
  %2425 = select i1 %2423, i1 %2424, i1 false
  br i1 %2425, label %2663, label %2730

2426:                                             ; preds = %2417
  %2427 = icmp eq i32 %2412, 3
  %2428 = icmp eq i32 %2414, %2415
  %2429 = select i1 %2427, i1 %2428, i1 false
  br i1 %2429, label %2663, label %2430

2430:                                             ; preds = %2426
  %2431 = icmp eq i32 %2412, 0
  %2432 = icmp slt i32 %2415, %2414
  %2433 = select i1 %2431, i1 %2432, i1 false
  br i1 %2433, label %2663, label %2730

2434:                                             ; preds = %2417
  %2435 = icmp eq i32 %2412, 4
  %2436 = icmp eq i32 %2414, %2415
  %2437 = select i1 %2435, i1 %2436, i1 false
  br i1 %2437, label %2663, label %2438

2438:                                             ; preds = %2434
  %2439 = icmp eq i32 %2412, 0
  %2440 = icmp slt i32 %2415, %2414
  %2441 = select i1 %2439, i1 %2440, i1 false
  br i1 %2441, label %2663, label %2730

2442:                                             ; preds = %2417
  %2443 = icmp eq i32 %2412, 5
  %2444 = icmp eq i32 %2415, %2414
  %2445 = select i1 %2443, i1 %2444, i1 false
  br i1 %2445, label %2663, label %2446

2446:                                             ; preds = %2442
  %2447 = icmp eq i32 %2412, 1
  %2448 = icmp sle i32 %2415, %2414
  %2449 = select i1 %2447, i1 %2448, i1 false
  br i1 %2449, label %2663, label %2730

2450:                                             ; preds = %2417
  %2451 = icmp eq i32 %2412, 6
  %2452 = icmp eq i32 %2415, %2414
  %2453 = select i1 %2451, i1 %2452, i1 false
  br i1 %2453, label %2663, label %2454

2454:                                             ; preds = %2450
  %2455 = icmp eq i32 %2412, 1
  %2456 = icmp sle i32 %2415, %2414
  %2457 = select i1 %2455, i1 %2456, i1 false
  br i1 %2457, label %2663, label %2730

2458:                                             ; preds = %2417
  %2459 = and i32 %2412, -3
  %2460 = icmp eq i32 %2459, 0
  br i1 %2460, label %2663, label %2461

2461:                                             ; preds = %2458
  %2462 = icmp eq i32 %2412, 7
  br i1 %2462, label %2463, label %2730

2463:                                             ; preds = %2461
  %2464 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406
  %2465 = load ptr, ptr %2464, align 8, !tbaa !153
  %2466 = icmp eq ptr %2465, null
  br i1 %2466, label %2663, label %2467

2467:                                             ; preds = %2463
  %2468 = load ptr, ptr %2382, align 8, !tbaa !153
  %2469 = icmp eq ptr %2468, null
  br i1 %2469, label %2663, label %2470

2470:                                             ; preds = %2467
  %2471 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 1
  %2472 = load ptr, ptr %2471, align 8, !tbaa !152
  %2473 = icmp eq ptr %2472, null
  br i1 %2473, label %2474, label %2663

2474:                                             ; preds = %2470
  %2475 = load ptr, ptr %2359, align 8, !tbaa !152
  %2476 = icmp eq ptr %2475, null
  %2477 = icmp eq i32 %2414, %2415
  %2478 = select i1 %2476, i1 %2477, i1 false
  br i1 %2478, label %2479, label %2663

2479:                                             ; preds = %2474
  %2480 = call i32 @rtx_equal_p(ptr noundef nonnull %2465, ptr noundef nonnull %2468) #19
  %2481 = icmp eq i32 %2480, 0
  br i1 %2481, label %2482, label %2663

2482:                                             ; preds = %2479
  %2483 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 18
  %2484 = load i8, ptr %2483, align 8
  %2485 = and i8 %2484, 1
  %2486 = icmp eq i8 %2485, 0
  br i1 %2486, label %2487, label %2663

2487:                                             ; preds = %2482
  %2488 = load i8, ptr %2372, align 8
  %2489 = and i8 %2488, 1
  %2490 = icmp eq i8 %2489, 0
  br i1 %2490, label %2491, label %2663

2491:                                             ; preds = %2487
  %2492 = load ptr, ptr %2464, align 8, !tbaa !153
  %2493 = load ptr, ptr %2382, align 8, !tbaa !153
  %2494 = call i32 @reg_mentioned_p(ptr noundef %2492, ptr noundef %2493) #19
  %2495 = icmp eq i32 %2494, 0
  br i1 %2495, label %2496, label %2501

2496:                                             ; preds = %2491
  %2497 = load ptr, ptr %2382, align 8, !tbaa !153
  %2498 = load ptr, ptr %2464, align 8, !tbaa !153
  %2499 = call i32 @reg_mentioned_p(ptr noundef %2497, ptr noundef %2498) #19
  %2500 = icmp eq i32 %2499, 0
  br i1 %2500, label %2663, label %2501

2501:                                             ; preds = %2496, %2491
  %2502 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2503 = icmp sgt i32 %2502, 0
  br i1 %2503, label %2504, label %2527

2504:                                             ; preds = %2501
  %2505 = zext i32 %2411 to i64
  br label %2506

2506:                                             ; preds = %2522, %2504
  %2507 = phi i32 [ %2502, %2504 ], [ %2523, %2522 ]
  %2508 = phi i64 [ 0, %2504 ], [ %2524, %2522 ]
  %2509 = icmp eq i64 %2508, %2505
  %2510 = icmp eq i64 %2508, %2397
  %2511 = or i1 %2509, %2510
  br i1 %2511, label %2522, label %2512

2512:                                             ; preds = %2506
  %2513 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2508
  %2514 = load ptr, ptr %2513, align 8, !tbaa !153
  %2515 = icmp eq ptr %2514, null
  br i1 %2515, label %2522, label %2516

2516:                                             ; preds = %2512
  %2517 = load ptr, ptr %2464, align 8, !tbaa !153
  %2518 = call i32 @reg_mentioned_p(ptr noundef %2517, ptr noundef nonnull %2514) #19
  %2519 = icmp eq i32 %2518, 0
  br i1 %2519, label %2520, label %2663

2520:                                             ; preds = %2516
  %2521 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2522

2522:                                             ; preds = %2520, %2512, %2506
  %2523 = phi i32 [ %2521, %2520 ], [ %2507, %2506 ], [ %2507, %2512 ]
  %2524 = add nuw nsw i64 %2508, 1
  %2525 = sext i32 %2523 to i64
  %2526 = icmp slt i64 %2524, %2525
  br i1 %2526, label %2506, label %2527, !llvm.loop !157

2527:                                             ; preds = %2522, %2501
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #19
  %2528 = call ptr @get_last_insn() #19
  %2529 = load ptr, ptr %2464, align 8, !tbaa !153
  %2530 = load ptr, ptr %2382, align 8, !tbaa !153
  %2531 = call i32 @reg_mentioned_p(ptr noundef %2529, ptr noundef %2530) #19
  %2532 = icmp eq i32 %2531, 0
  %2533 = select i1 %2532, i32 %2381, i32 %2411
  %2534 = select i1 %2532, i32 %2411, i32 %2381
  %2535 = sext i32 %2533 to i64
  %2536 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2535
  %2537 = load ptr, ptr %2536, align 8, !tbaa !153
  %2538 = sext i32 %2534 to i64
  %2539 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2538
  %2540 = load ptr, ptr %2539, align 8, !tbaa !153
  %2541 = call i32 @reg_mentioned_p(ptr noundef %2537, ptr noundef %2540) #19
  %2542 = icmp eq i32 %2541, 0
  br i1 %2542, label %2543, label %2544

2543:                                             ; preds = %2527
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5254, ptr noundef nonnull @.str.2) #19
  br label %2544

2544:                                             ; preds = %2543, %2527
  %2545 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2538, i32 10
  %2546 = load i32, ptr %2545, align 8, !tbaa !141
  %2547 = icmp sgt i32 %2546, -1
  br i1 %2547, label %2553, label %2548

2548:                                             ; preds = %2544
  %2549 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2535, i32 10
  %2550 = load i32, ptr %2549, align 8, !tbaa !141
  %2551 = icmp sgt i32 %2550, -1
  br i1 %2551, label %2553, label %2552

2552:                                             ; preds = %2548
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5256, ptr noundef nonnull @.str.2) #19
  br label %2553

2553:                                             ; preds = %2552, %2548, %2544
  %2554 = phi i32 [ %2550, %2548 ], [ %2550, %2552 ], [ %2546, %2544 ]
  %2555 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2538, i32 5
  %2556 = load i32, ptr %2555, align 4, !tbaa !158
  %2557 = call ptr @gen_rtx_REG(i32 noundef %2556, i32 noundef %2554) #19
  %2558 = load ptr, ptr %2539, align 8, !tbaa !153
  store ptr %2558, ptr %3, align 8, !tbaa !6
  %2559 = load ptr, ptr %2536, align 8, !tbaa !153
  %2560 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2535, i32 5
  %2561 = load i32, ptr %2560, align 4, !tbaa !158
  %2562 = call ptr @gen_rtx_REG(i32 noundef %2561, i32 noundef %2554) #19
  call fastcc void @substitute(ptr noundef nonnull %3, ptr noundef %2559, ptr noundef %2562)
  %2563 = load ptr, ptr %3, align 8, !tbaa !6
  %2564 = load i32, ptr %2563, align 8
  %2565 = and i32 %2564, 65535
  %2566 = icmp eq i32 %2565, 39
  br i1 %2566, label %2567, label %2589

2567:                                             ; preds = %2553
  %2568 = lshr i32 %2564, 16
  %2569 = and i32 %2568, 255
  %2570 = zext i32 %2569 to i64
  %2571 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %2570
  %2572 = load i8, ptr %2571, align 1, !tbaa !17
  %2573 = getelementptr inbounds %struct.rtx_def, ptr %2563, i64 0, i32 1
  %2574 = load ptr, ptr %2573, align 8, !tbaa !17
  %2575 = load i32, ptr %2574, align 8
  %2576 = lshr i32 %2575, 16
  %2577 = and i32 %2576, 255
  %2578 = zext i32 %2577 to i64
  %2579 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %2578
  %2580 = load i8, ptr %2579, align 1, !tbaa !17
  %2581 = icmp ugt i8 %2572, %2580
  br i1 %2581, label %2582, label %2589

2582:                                             ; preds = %2567
  %2583 = call ptr @gen_lowpart_common(i32 noundef %2577, ptr noundef %2557) #19
  %2584 = icmp eq ptr %2583, null
  %2585 = load ptr, ptr %3, align 8, !tbaa !6
  br i1 %2584, label %2589, label %2586

2586:                                             ; preds = %2582
  %2587 = getelementptr inbounds %struct.rtx_def, ptr %2585, i64 0, i32 1
  %2588 = load ptr, ptr %2587, align 8, !tbaa !17
  store ptr %2588, ptr %3, align 8, !tbaa !6
  br label %2589

2589:                                             ; preds = %2586, %2582, %2567, %2553
  %2590 = phi ptr [ %2588, %2586 ], [ %2585, %2582 ], [ %2563, %2567 ], [ %2563, %2553 ]
  %2591 = phi ptr [ %2583, %2586 ], [ %2557, %2582 ], [ %2557, %2567 ], [ %2557, %2553 ]
  %2592 = load i32, ptr %2590, align 8
  %2593 = and i32 %2592, 65535
  %2594 = icmp eq i32 %2593, 49
  br i1 %2594, label %2595, label %2629

2595:                                             ; preds = %2589
  %2596 = getelementptr inbounds %struct.rtx_def, ptr %2590, i64 0, i32 1
  %2597 = load ptr, ptr %2596, align 8, !tbaa !17
  %2598 = load i32, ptr %2597, align 8
  %2599 = trunc i32 %2598 to i16
  switch i16 %2599, label %2629 [
    i16 37, label %2600
    i16 39, label %2600
    i16 43, label %2600
  ]

2600:                                             ; preds = %2595, %2595, %2595
  %2601 = getelementptr inbounds %struct.rtx_def, ptr %2590, i64 0, i32 1, i32 0, i32 0, i64 1
  %2602 = load ptr, ptr %2601, align 8, !tbaa !17
  %2603 = load i32, ptr %2602, align 8
  %2604 = trunc i32 %2603 to i16
  switch i16 %2604, label %2605 [
    i16 37, label %2613
    i16 39, label %2613
  ]

2605:                                             ; preds = %2600
  %2606 = and i32 %2603, 65535
  %2607 = zext i32 %2606 to i64
  %2608 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %2607
  %2609 = load i32, ptr %2608, align 4, !tbaa !17
  %2610 = icmp eq i32 %2609, 9
  %2611 = icmp eq i32 %2606, 43
  %2612 = or i1 %2611, %2610
  br i1 %2612, label %2613, label %2629

2613:                                             ; preds = %2605, %2600, %2600
  %2614 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %2591, ptr noundef nonnull %2590) #19
  %2615 = call ptr @emit_insn(ptr noundef %2614) #19
  %2616 = getelementptr inbounds %struct.rtx_def, ptr %2615, i64 1, i32 1
  %2617 = load i32, ptr %2616, align 8, !tbaa !17
  %2618 = icmp slt i32 %2617, 0
  br i1 %2618, label %2619, label %2624

2619:                                             ; preds = %2613
  %2620 = getelementptr inbounds %struct.rtx_def, ptr %2615, i64 1
  %2621 = load ptr, ptr %2620, align 8, !tbaa !17
  %2622 = call i32 @recog(ptr noundef %2621, ptr noundef nonnull %2615, ptr noundef null) #19
  store i32 %2622, ptr %2616, align 8, !tbaa !17
  %2623 = icmp sgt i32 %2622, -1
  br i1 %2623, label %2624, label %2627

2624:                                             ; preds = %2619, %2613
  call void @extract_insn(ptr noundef nonnull %2615) #19
  %2625 = call i32 @constrain_operands(i32 noundef 1) #19
  %2626 = trunc i32 %2625 to i8
  br label %2627

2627:                                             ; preds = %2624, %2619
  %2628 = phi i8 [ %2626, %2624 ], [ 0, %2619 ]
  call void @delete_insns_since(ptr noundef %2528) #19
  br label %2629

2629:                                             ; preds = %2627, %2605, %2595, %2589
  %2630 = phi i8 [ %2628, %2627 ], [ 1, %2589 ], [ 1, %2595 ], [ 1, %2605 ]
  %2631 = load ptr, ptr @substitute_stack, align 8
  %2632 = icmp eq ptr %2631, null
  br i1 %2632, label %2646, label %2633

2633:                                             ; preds = %2629
  %2634 = load ptr, ptr @substitute_stack, align 8
  %2635 = icmp eq ptr %2634, null
  br label %2636

2636:                                             ; preds = %2633, %2640
  %2637 = phi ptr [ %2634, %2640 ], [ %2631, %2633 ]
  %2638 = load i32, ptr %2637, align 8, !tbaa !159
  %2639 = icmp eq i32 %2638, 0
  br i1 %2639, label %2646, label %2640

2640:                                             ; preds = %2636
  %2641 = add i32 %2638, -1
  store i32 %2641, ptr %2637, align 8, !tbaa !159
  %2642 = zext i32 %2641 to i64
  %2643 = getelementptr inbounds %struct.VEC_rtx_p_base, ptr %2637, i64 0, i32 2, i64 %2642
  %2644 = load ptr, ptr %2643, align 8, !tbaa !6
  %2645 = load ptr, ptr %2536, align 8, !tbaa !153
  store ptr %2645, ptr %2644, align 8, !tbaa !6
  br i1 %2635, label %2646, label %2636, !llvm.loop !161

2646:                                             ; preds = %2640, %2636, %2629
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #19
  %2647 = icmp eq i8 %2630, 0
  br i1 %2647, label %2663, label %2730

2648:                                             ; preds = %2417
  %2649 = and i32 %2412, -9
  %2650 = icmp eq i32 %2649, 0
  br i1 %2650, label %2663, label %2730

2651:                                             ; preds = %2417
  %2652 = add i32 %2412, -1
  %2653 = icmp ult i32 %2652, 2
  br i1 %2653, label %2663, label %2658

2654:                                             ; preds = %2417
  switch i32 %2412, label %2730 [
    i32 7, label %2663
    i32 2, label %2663
    i32 1, label %2663
    i32 0, label %2663
  ]

2655:                                             ; preds = %2417
  %2656 = icmp eq i32 %2412, 10
  br i1 %2656, label %2663, label %2730

2657:                                             ; preds = %2417
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5378, ptr noundef nonnull @.str.2) #19
  br label %2730

2658:                                             ; preds = %2651
  %2659 = add i32 %2412, -5
  %2660 = icmp ult i32 %2659, 2
  %2661 = icmp sge i32 %2415, %2414
  %2662 = select i1 %2660, i1 %2661, i1 false
  br i1 %2662, label %2663, label %2730

2663:                                             ; preds = %2516, %2658, %2655, %2654, %2654, %2654, %2654, %2651, %2648, %2646, %2496, %2487, %2482, %2479, %2474, %2470, %2467, %2463, %2458, %2454, %2450, %2446, %2442, %2438, %2434, %2430, %2426, %2421, %2420, %2420, %2420, %2420, %2417, %2410
  %2664 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2406, i32 6
  %2665 = load i32, ptr %2664, align 8, !tbaa !142
  %2666 = icmp eq i32 %2665, 0
  br i1 %2666, label %2730, label %2667

2667:                                             ; preds = %2663
  %2668 = load i32, ptr %2407, align 8, !tbaa !141
  %2669 = zext i32 %2665 to i64
  %2670 = icmp ult i32 %2665, 8
  br i1 %2670, label %2717, label %2671

2671:                                             ; preds = %2667
  %2672 = and i64 %2669, 4294967288
  %2673 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %2403, i64 0
  %2674 = insertelement <2 x i32> poison, i32 %2668, i64 0
  %2675 = shufflevector <2 x i32> %2674, <2 x i32> poison, <2 x i32> zeroinitializer
  %2676 = insertelement <2 x i32> poison, i32 %2668, i64 0
  %2677 = insertelement <2 x i32> poison, i32 %2668, i64 0
  %2678 = insertelement <2 x i32> poison, i32 %2668, i64 0
  %2679 = add <2 x i32> %2676, <i32 2, i32 poison>
  %2680 = shufflevector <2 x i32> %2679, <2 x i32> poison, <2 x i32> zeroinitializer
  %2681 = add <2 x i32> %2677, <i32 4, i32 poison>
  %2682 = shufflevector <2 x i32> %2681, <2 x i32> poison, <2 x i32> zeroinitializer
  %2683 = add <2 x i32> %2678, <i32 6, i32 poison>
  %2684 = shufflevector <2 x i32> %2683, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %2685

2685:                                             ; preds = %2685, %2671
  %2686 = phi i64 [ 0, %2671 ], [ %2708, %2685 ]
  %2687 = phi <2 x i64> [ %2673, %2671 ], [ %2704, %2685 ]
  %2688 = phi <2 x i64> [ zeroinitializer, %2671 ], [ %2705, %2685 ]
  %2689 = phi <2 x i64> [ zeroinitializer, %2671 ], [ %2706, %2685 ]
  %2690 = phi <2 x i64> [ zeroinitializer, %2671 ], [ %2707, %2685 ]
  %2691 = phi <2 x i32> [ <i32 0, i32 1>, %2671 ], [ %2709, %2685 ]
  %2692 = add <2 x i32> %2675, %2691
  %2693 = add <2 x i32> %2680, %2691
  %2694 = add <2 x i32> %2682, %2691
  %2695 = add <2 x i32> %2684, %2691
  %2696 = zext <2 x i32> %2692 to <2 x i64>
  %2697 = zext <2 x i32> %2693 to <2 x i64>
  %2698 = zext <2 x i32> %2694 to <2 x i64>
  %2699 = zext <2 x i32> %2695 to <2 x i64>
  %2700 = shl nuw <2 x i64> <i64 1, i64 1>, %2696
  %2701 = shl nuw <2 x i64> <i64 1, i64 1>, %2697
  %2702 = shl nuw <2 x i64> <i64 1, i64 1>, %2698
  %2703 = shl nuw <2 x i64> <i64 1, i64 1>, %2699
  %2704 = or <2 x i64> %2700, %2687
  %2705 = or <2 x i64> %2701, %2688
  %2706 = or <2 x i64> %2702, %2689
  %2707 = or <2 x i64> %2703, %2690
  %2708 = add nuw i64 %2686, 8
  %2709 = add <2 x i32> %2691, <i32 8, i32 8>
  %2710 = icmp eq i64 %2708, %2672
  br i1 %2710, label %2711, label %2685, !llvm.loop !162

2711:                                             ; preds = %2685
  %2712 = or <2 x i64> %2705, %2704
  %2713 = or <2 x i64> %2706, %2712
  %2714 = or <2 x i64> %2707, %2713
  %2715 = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %2714)
  %2716 = icmp eq i64 %2672, %2669
  br i1 %2716, label %2730, label %2717

2717:                                             ; preds = %2667, %2711
  %2718 = phi i64 [ 0, %2667 ], [ %2672, %2711 ]
  %2719 = phi i64 [ %2403, %2667 ], [ %2715, %2711 ]
  br label %2720

2720:                                             ; preds = %2717, %2720
  %2721 = phi i64 [ %2728, %2720 ], [ %2718, %2717 ]
  %2722 = phi i64 [ %2727, %2720 ], [ %2719, %2717 ]
  %2723 = trunc i64 %2721 to i32
  %2724 = add i32 %2668, %2723
  %2725 = zext i32 %2724 to i64
  %2726 = shl nuw i64 1, %2725
  %2727 = or i64 %2726, %2722
  %2728 = add nuw nsw i64 %2721, 1
  %2729 = icmp eq i64 %2728, %2669
  br i1 %2729, label %2730, label %2720, !llvm.loop !163

2730:                                             ; preds = %2720, %2711, %2663, %2658, %2657, %2655, %2654, %2648, %2646, %2461, %2454, %2446, %2438, %2430, %2421, %2401
  %2731 = phi i64 [ %2403, %2658 ], [ %2403, %2401 ], [ %2403, %2657 ], [ %2403, %2461 ], [ %2403, %2663 ], [ %2403, %2655 ], [ %2403, %2654 ], [ %2403, %2648 ], [ %2403, %2421 ], [ %2403, %2430 ], [ %2403, %2438 ], [ %2403, %2446 ], [ %2403, %2454 ], [ %2403, %2646 ], [ %2715, %2711 ], [ %2727, %2720 ]
  %2732 = add nuw nsw i64 %2402, 1
  %2733 = icmp eq i64 %2732, %2355
  br i1 %2733, label %2398, label %2401, !llvm.loop !164

2734:                                             ; preds = %2919, %2398
  %2735 = phi i64 [ 0, %2398 ], [ %2922, %2919 ]
  %2736 = phi i32 [ 2147483647, %2398 ], [ %2921, %2919 ]
  %2737 = phi i32 [ -1, %2398 ], [ %2920, %2919 ]
  %2738 = getelementptr inbounds [53 x i32], ptr @reg_alloc_order, i64 0, i64 %2735
  %2739 = load i32, ptr %2738, align 4, !tbaa !21
  %2740 = zext i32 %2739 to i64
  %2741 = shl nuw i64 1, %2740
  %2742 = and i64 %2741, %2392
  %2743 = icmp eq i64 %2742, 0
  %2744 = and i64 %2741, %2399
  %2745 = icmp eq i64 %2744, 0
  %2746 = select i1 %2743, i1 %2745, i1 false
  br i1 %2746, label %2747, label %2919

2747:                                             ; preds = %2734
  %2748 = load i32, ptr %2400, align 4, !tbaa !158
  %2749 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %2739, i32 noundef %2748) #19
  %2750 = icmp eq i8 %2749, 0
  br i1 %2750, label %2919, label %2751

2751:                                             ; preds = %2747
  %2752 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %2740
  %2753 = load i32, ptr %2752, align 4, !tbaa !21
  %2754 = load i32, ptr %2400, align 4, !tbaa !158
  %2755 = zext i32 %2754 to i64
  %2756 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2740, i64 %2755
  %2757 = load i8, ptr %2756, align 1, !tbaa !17
  %2758 = icmp ugt i8 %2757, 1
  br i1 %2758, label %2759, label %2826

2759:                                             ; preds = %2751
  %2760 = zext i8 %2757 to i64
  %2761 = add nsw i64 %2760, -1
  %2762 = and i64 %2761, 1
  %2763 = icmp eq i8 %2757, 2
  br i1 %2763, label %2801, label %2764

2764:                                             ; preds = %2759
  %2765 = and i64 %2761, -2
  br label %2766

2766:                                             ; preds = %2766, %2764
  %2767 = phi i64 [ 1, %2764 ], [ %2798, %2766 ]
  %2768 = phi i32 [ 1, %2764 ], [ %2797, %2766 ]
  %2769 = phi i32 [ %2753, %2764 ], [ %2788, %2766 ]
  %2770 = phi i64 [ 0, %2764 ], [ %2799, %2766 ]
  %2771 = trunc i64 %2767 to i32
  %2772 = add i32 %2739, %2771
  %2773 = zext i32 %2772 to i64
  %2774 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %2773
  %2775 = load i32, ptr %2774, align 4, !tbaa !21
  %2776 = add nsw i32 %2775, %2769
  %2777 = shl nuw i64 1, %2773
  %2778 = and i64 %2777, %2392
  %2779 = icmp eq i64 %2778, 0
  %2780 = and i64 %2777, %2399
  %2781 = icmp eq i64 %2780, 0
  %2782 = trunc i64 %2767 to i32
  %2783 = add i32 %2782, 1
  %2784 = add i32 %2739, %2783
  %2785 = zext i32 %2784 to i64
  %2786 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %2785
  %2787 = load i32, ptr %2786, align 4, !tbaa !21
  %2788 = add nsw i32 %2787, %2776
  %2789 = shl nuw i64 1, %2785
  %2790 = and i64 %2789, %2392
  %2791 = icmp eq i64 %2790, 0
  %2792 = and i64 %2789, %2399
  %2793 = icmp eq i64 %2792, 0
  %2794 = select i1 %2791, i1 %2793, i1 false
  %2795 = select i1 %2794, i1 %2779, i1 false
  %2796 = select i1 %2795, i1 %2781, i1 false
  %2797 = select i1 %2796, i32 %2768, i32 0
  %2798 = add nuw nsw i64 %2767, 2
  %2799 = add i64 %2770, 2
  %2800 = icmp eq i64 %2799, %2765
  br i1 %2800, label %2801, label %2766, !llvm.loop !165

2801:                                             ; preds = %2766, %2759
  %2802 = phi i32 [ undef, %2759 ], [ %2788, %2766 ]
  %2803 = phi i32 [ undef, %2759 ], [ %2797, %2766 ]
  %2804 = phi i64 [ 1, %2759 ], [ %2798, %2766 ]
  %2805 = phi i32 [ 1, %2759 ], [ %2797, %2766 ]
  %2806 = phi i32 [ %2753, %2759 ], [ %2788, %2766 ]
  %2807 = icmp eq i64 %2762, 0
  br i1 %2807, label %2822, label %2808

2808:                                             ; preds = %2801
  %2809 = trunc i64 %2804 to i32
  %2810 = add i32 %2739, %2809
  %2811 = zext i32 %2810 to i64
  %2812 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %2811
  %2813 = load i32, ptr %2812, align 4, !tbaa !21
  %2814 = add nsw i32 %2813, %2806
  %2815 = shl nuw i64 1, %2811
  %2816 = and i64 %2815, %2392
  %2817 = icmp eq i64 %2816, 0
  %2818 = and i64 %2815, %2399
  %2819 = icmp eq i64 %2818, 0
  %2820 = select i1 %2817, i1 %2819, i1 false
  %2821 = select i1 %2820, i32 %2805, i32 0
  br label %2822

2822:                                             ; preds = %2801, %2808
  %2823 = phi i32 [ %2802, %2801 ], [ %2814, %2808 ]
  %2824 = phi i32 [ %2803, %2801 ], [ %2821, %2808 ]
  %2825 = icmp eq i32 %2824, 0
  br i1 %2825, label %2919, label %2826

2826:                                             ; preds = %2822, %2751
  %2827 = phi i32 [ %2823, %2822 ], [ %2753, %2751 ]
  %2828 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %2829 = icmp eq i8 %2828, 0
  br i1 %2829, label %2879, label %2830

2830:                                             ; preds = %2826
  %2831 = icmp eq i8 %2757, 0
  br i1 %2831, label %2859, label %2832

2832:                                             ; preds = %2830
  %2833 = zext i8 %2757 to i64
  br label %2834

2834:                                             ; preds = %2855, %2832
  %2835 = phi i64 [ 0, %2832 ], [ %2857, %2855 ]
  %2836 = phi i32 [ 0, %2832 ], [ %2856, %2855 ]
  %2837 = trunc i64 %2835 to i32
  %2838 = add i32 %2739, %2837
  %2839 = zext i32 %2838 to i64
  %2840 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %2839
  %2841 = load i32, ptr %2840, align 4, !tbaa !21
  %2842 = icmp slt i32 %2841, 0
  br i1 %2842, label %2855, label %2843

2843:                                             ; preds = %2834
  %2844 = icmp eq i32 %2836, 0
  br i1 %2844, label %2851, label %2845

2845:                                             ; preds = %2843
  %2846 = add i32 %2836, -1
  %2847 = zext i32 %2846 to i64
  %2848 = getelementptr inbounds [53 x i32], ptr @find_reg.regno_pseudo_regs, i64 0, i64 %2847
  %2849 = load i32, ptr %2848, align 4, !tbaa !21
  %2850 = icmp eq i32 %2849, %2841
  br i1 %2850, label %2855, label %2851

2851:                                             ; preds = %2845, %2843
  %2852 = add i32 %2836, 1
  %2853 = zext i32 %2836 to i64
  %2854 = getelementptr inbounds [53 x i32], ptr @find_reg.regno_pseudo_regs, i64 0, i64 %2853
  store i32 %2841, ptr %2854, align 4, !tbaa !21
  br label %2855

2855:                                             ; preds = %2851, %2845, %2834
  %2856 = phi i32 [ %2836, %2834 ], [ %2852, %2851 ], [ %2836, %2845 ]
  %2857 = add nuw nsw i64 %2835, 1
  %2858 = icmp eq i64 %2857, %2833
  br i1 %2858, label %2859, label %2834, !llvm.loop !166

2859:                                             ; preds = %2855, %2830
  %2860 = phi i32 [ 0, %2830 ], [ %2856, %2855 ]
  %2861 = zext i32 %2860 to i64
  %2862 = getelementptr inbounds [53 x i32], ptr @find_reg.regno_pseudo_regs, i64 0, i64 %2861
  store i32 -1, ptr %2862, align 4, !tbaa !21
  %2863 = icmp slt i32 %2737, 0
  br i1 %2863, label %2870, label %2864

2864:                                             ; preds = %2859
  %2865 = load ptr, ptr %2382, align 8, !tbaa !153
  %2866 = load ptr, ptr %2359, align 8, !tbaa !152
  %2867 = load ptr, ptr %2353, align 8, !tbaa !111
  %2868 = call zeroext i8 @ira_better_spill_reload_regno_p(ptr noundef nonnull @find_reg.regno_pseudo_regs, ptr noundef nonnull @find_reg.best_regno_pseudo_regs, ptr noundef %2865, ptr noundef %2866, ptr noundef %2867) #19
  %2869 = icmp eq i8 %2868, 0
  br i1 %2869, label %2919, label %2870

2870:                                             ; preds = %2864, %2859
  br label %2871

2871:                                             ; preds = %2870, %2871
  %2872 = phi i32 [ %2878, %2871 ], [ 0, %2870 ]
  %2873 = zext i32 %2872 to i64
  %2874 = getelementptr inbounds [53 x i32], ptr @find_reg.regno_pseudo_regs, i64 0, i64 %2873
  %2875 = load i32, ptr %2874, align 4, !tbaa !21
  %2876 = getelementptr inbounds [53 x i32], ptr @find_reg.best_regno_pseudo_regs, i64 0, i64 %2873
  store i32 %2875, ptr %2876, align 4, !tbaa !21
  %2877 = icmp slt i32 %2875, 0
  %2878 = add i32 %2872, 1
  br i1 %2877, label %2919, label %2871

2879:                                             ; preds = %2826
  %2880 = load ptr, ptr %2382, align 8, !tbaa !153
  %2881 = icmp eq ptr %2880, null
  br i1 %2881, label %2892, label %2882

2882:                                             ; preds = %2879
  %2883 = load i32, ptr %2880, align 8
  %2884 = and i32 %2883, 65535
  %2885 = icmp eq i32 %2884, 37
  br i1 %2885, label %2886, label %2892

2886:                                             ; preds = %2882
  %2887 = getelementptr i8, ptr %2880, i64 8
  %2888 = load i32, ptr %2887, align 8, !tbaa !17
  %2889 = icmp eq i32 %2888, %2739
  %2890 = sext i1 %2889 to i32
  %2891 = add nsw i32 %2827, %2890
  br label %2892

2892:                                             ; preds = %2886, %2882, %2879
  %2893 = phi i32 [ %2827, %2882 ], [ %2827, %2879 ], [ %2891, %2886 ]
  %2894 = load ptr, ptr %2359, align 8, !tbaa !152
  %2895 = icmp eq ptr %2894, null
  br i1 %2895, label %2906, label %2896

2896:                                             ; preds = %2892
  %2897 = load i32, ptr %2894, align 8
  %2898 = and i32 %2897, 65535
  %2899 = icmp eq i32 %2898, 37
  br i1 %2899, label %2900, label %2906

2900:                                             ; preds = %2896
  %2901 = getelementptr i8, ptr %2894, i64 8
  %2902 = load i32, ptr %2901, align 8, !tbaa !17
  %2903 = icmp eq i32 %2902, %2739
  %2904 = sext i1 %2903 to i32
  %2905 = add nsw i32 %2893, %2904
  br label %2906

2906:                                             ; preds = %2900, %2896, %2892
  %2907 = phi i32 [ %2893, %2896 ], [ %2893, %2892 ], [ %2905, %2900 ]
  %2908 = icmp slt i32 %2907, %2736
  br i1 %2908, label %2918, label %2909

2909:                                             ; preds = %2906
  %2910 = icmp eq i32 %2907, %2736
  br i1 %2910, label %2911, label %2919

2911:                                             ; preds = %2909
  %2912 = getelementptr inbounds [53 x i32], ptr @inv_reg_alloc_order, i64 0, i64 %2740
  %2913 = load i32, ptr %2912, align 4, !tbaa !21
  %2914 = sext i32 %2737 to i64
  %2915 = getelementptr inbounds [53 x i32], ptr @inv_reg_alloc_order, i64 0, i64 %2914
  %2916 = load i32, ptr %2915, align 4, !tbaa !21
  %2917 = icmp slt i32 %2913, %2916
  br i1 %2917, label %2918, label %2919

2918:                                             ; preds = %2911, %2906
  br label %2919

2919:                                             ; preds = %2871, %2918, %2911, %2909, %2864, %2822, %2747, %2734
  %2920 = phi i32 [ %2737, %2734 ], [ %2737, %2747 ], [ %2737, %2822 ], [ %2737, %2864 ], [ %2739, %2918 ], [ %2737, %2911 ], [ %2737, %2909 ], [ %2739, %2871 ]
  %2921 = phi i32 [ %2736, %2734 ], [ %2736, %2747 ], [ %2736, %2822 ], [ %2736, %2864 ], [ %2907, %2918 ], [ %2736, %2911 ], [ %2736, %2909 ], [ %2736, %2871 ]
  %2922 = add nuw nsw i64 %2735, 1
  %2923 = icmp eq i64 %2922, 53
  br i1 %2923, label %2924, label %2734, !llvm.loop !167

2924:                                             ; preds = %2919
  %2925 = icmp eq i32 %2920, -1
  %2926 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %2927 = icmp eq ptr %2926, null
  br i1 %2925, label %3312, label %2928

2928:                                             ; preds = %2924
  br i1 %2927, label %2931, label %2929

2929:                                             ; preds = %2928
  %2930 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %2926, ptr noundef nonnull @.str.13, i32 noundef %2920, i32 noundef %2381)
  br label %2931

2931:                                             ; preds = %2929, %2928
  %2932 = sext i32 %2920 to i64
  %2933 = load i32, ptr %2400, align 4, !tbaa !158
  %2934 = zext i32 %2933 to i64
  %2935 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2932, i64 %2934
  %2936 = load i8, ptr %2935, align 1, !tbaa !17
  %2937 = zext i8 %2936 to i32
  %2938 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2358, i32 6
  store i32 %2937, ptr %2938, align 8, !tbaa !142
  store i32 %2920, ptr %2377, align 8, !tbaa !141
  %2939 = load ptr, ptr %1993, align 8, !tbaa !37
  %2940 = icmp eq ptr %2939, null
  %2941 = select i1 %2940, ptr @bitmap_zero_bits, ptr %2939
  %2942 = getelementptr inbounds %struct.bitmap_element_def, ptr %2941, i64 0, i32 2
  %2943 = load i32, ptr %2942, align 8, !tbaa !38
  %2944 = icmp eq i32 %2943, 0
  %2945 = shl i32 %2943, 7
  %2946 = select i1 %2944, i32 53, i32 %2945
  %2947 = getelementptr inbounds %struct.bitmap_element_def, ptr %2941, i64 0, i32 3, i64 0
  %2948 = load i64, ptr %2947, align 8, !tbaa !40
  %2949 = and i32 %2946, 53
  %2950 = zext i32 %2949 to i64
  %2951 = lshr i64 %2948, %2950
  %2952 = icmp eq i64 %2951, 0
  %2953 = zext i1 %2952 to i32
  %2954 = add nuw nsw i32 %2946, %2953
  br label %2955

2955:                                             ; preds = %3107, %2931
  %2956 = phi i64 [ %2951, %2931 ], [ %3108, %3107 ]
  %2957 = phi i32 [ %2954, %2931 ], [ %3109, %3107 ]
  %2958 = phi i32 [ 0, %2931 ], [ %2964, %3107 ]
  %2959 = phi ptr [ %2941, %2931 ], [ %2965, %3107 ]
  %2960 = icmp eq i64 %2956, 0
  br i1 %2960, label %2975, label %2961

2961:                                             ; preds = %2984, %2955
  %2962 = phi i64 [ %2956, %2955 ], [ %2989, %2984 ]
  %2963 = phi i32 [ %2957, %2955 ], [ %2985, %2984 ]
  %2964 = phi i32 [ %2958, %2955 ], [ %2986, %2984 ]
  %2965 = phi ptr [ %2959, %2955 ], [ %2981, %2984 ]
  %2966 = and i64 %2962, 1
  %2967 = icmp eq i64 %2966, 0
  br i1 %2967, label %2968, label %3002

2968:                                             ; preds = %2961, %2968
  %2969 = phi i32 [ %2972, %2968 ], [ %2963, %2961 ]
  %2970 = phi i64 [ %2971, %2968 ], [ %2962, %2961 ]
  %2971 = lshr i64 %2970, 1
  %2972 = add i32 %2969, 1
  %2973 = and i64 %2970, 2
  %2974 = icmp eq i64 %2973, 0
  br i1 %2974, label %2968, label %3002, !llvm.loop !41

2975:                                             ; preds = %2955
  %2976 = add i32 %2957, 63
  %2977 = and i32 %2976, -64
  %2978 = add i32 %2958, 1
  br label %2979

2979:                                             ; preds = %2998, %2975
  %2980 = phi i32 [ %2977, %2975 ], [ %3001, %2998 ]
  %2981 = phi ptr [ %2959, %2975 ], [ %2996, %2998 ]
  %2982 = phi i32 [ %2978, %2975 ], [ 0, %2998 ]
  %2983 = icmp eq i32 %2982, 2
  br i1 %2983, label %2995, label %2984

2984:                                             ; preds = %2979, %2991
  %2985 = phi i32 [ %2992, %2991 ], [ %2980, %2979 ]
  %2986 = phi i32 [ %2993, %2991 ], [ %2982, %2979 ]
  %2987 = zext i32 %2986 to i64
  %2988 = getelementptr inbounds %struct.bitmap_element_def, ptr %2981, i64 0, i32 3, i64 %2987
  %2989 = load i64, ptr %2988, align 8, !tbaa !40
  %2990 = icmp eq i64 %2989, 0
  br i1 %2990, label %2991, label %2961

2991:                                             ; preds = %2984
  %2992 = add i32 %2985, 64
  %2993 = add i32 %2986, 1
  %2994 = icmp eq i32 %2993, 2
  br i1 %2994, label %2995, label %2984, !llvm.loop !42

2995:                                             ; preds = %2991, %2979
  %2996 = load ptr, ptr %2981, align 8, !tbaa !43
  %2997 = icmp eq ptr %2996, null
  br i1 %2997, label %3110, label %2998

2998:                                             ; preds = %2995
  %2999 = getelementptr inbounds %struct.bitmap_element_def, ptr %2996, i64 0, i32 2
  %3000 = load i32, ptr %2999, align 8, !tbaa !38
  %3001 = shl i32 %3000, 7
  br label %2979

3002:                                             ; preds = %2968, %2961
  %3003 = phi i64 [ %2962, %2961 ], [ %2971, %2968 ]
  %3004 = phi i32 [ %2963, %2961 ], [ %2972, %2968 ]
  %3005 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %3006 = sext i32 %3004 to i64
  %3007 = getelementptr inbounds %struct.reg_info_t, ptr %3005, i64 %3006
  %3008 = load i32, ptr %3007, align 4, !tbaa !144
  %3009 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3010 = getelementptr inbounds i16, ptr %3009, i64 %3006
  %3011 = load i16, ptr %3010, align 2, !tbaa !44
  %3012 = sext i16 %3011 to i64
  %3013 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3014 = getelementptr inbounds ptr, ptr %3013, i64 %3006
  %3015 = load ptr, ptr %3014, align 8, !tbaa !6
  %3016 = load i32, ptr %3015, align 8
  %3017 = lshr i32 %3016, 16
  %3018 = and i32 %3017, 255
  %3019 = zext i32 %3018 to i64
  %3020 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3012, i64 %3019
  %3021 = load i8, ptr %3020, align 1, !tbaa !17
  %3022 = zext i8 %3021 to i32
  %3023 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %3024 = icmp ne i8 %3023, 0
  %3025 = icmp slt i16 %3011, 0
  %3026 = and i1 %3025, %3024
  br i1 %3026, label %3107, label %3027

3027:                                             ; preds = %3002
  %3028 = load i32, ptr %2938, align 8, !tbaa !142
  %3029 = sext i16 %3011 to i32
  %3030 = call i32 @bitmap_bit_p(ptr noundef nonnull @spilled_pseudos, i32 noundef %3004) #19
  %3031 = icmp eq i32 %3030, 0
  %3032 = add nsw i32 %3028, %2920
  %3033 = icmp sgt i32 %3032, %3029
  %3034 = select i1 %3031, i1 %3033, i1 false
  %3035 = add nsw i32 %3022, %3029
  %3036 = icmp sgt i32 %3035, %2920
  %3037 = select i1 %3034, i1 %3036, i1 false
  br i1 %3037, label %3038, label %3107

3038:                                             ; preds = %3027
  %3039 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %3004) #19
  %3040 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %3012
  %3041 = load i32, ptr %3040, align 4, !tbaa !21
  %3042 = sub nsw i32 %3041, %3008
  store i32 %3042, ptr %3040, align 4, !tbaa !21
  %3043 = icmp eq i8 %3021, 0
  br i1 %3043, label %3107, label %3044

3044:                                             ; preds = %3038
  %3045 = sext i32 %3035 to i64
  %3046 = shl nsw i64 %3045, 2
  %3047 = add nsw i64 %3046, -4
  %3048 = add nsw i32 %3022, -1
  %3049 = zext i32 %3048 to i64
  %3050 = shl nuw nsw i64 %3049, 2
  %3051 = sub nsw i64 %3047, %3050
  %3052 = getelementptr i8, ptr @hard_regno_to_pseudo_regno, i64 %3051
  %3053 = zext i8 %3021 to i64
  %3054 = shl nuw nsw i64 %3053, 2
  call void @llvm.memset.p0.i64(ptr align 4 %3052, i8 -1, i64 %3054, i1 false), !tbaa !21
  %3055 = icmp ult i8 %3021, 32
  br i1 %3055, label %3097, label %3056

3056:                                             ; preds = %3044
  %3057 = and i64 %3053, 224
  %3058 = and i64 %3053, 31
  %3059 = insertelement <8 x i32> poison, i32 %3008, i64 0
  %3060 = shufflevector <8 x i32> %3059, <8 x i32> poison, <8 x i32> zeroinitializer
  %3061 = insertelement <8 x i32> poison, i32 %3008, i64 0
  %3062 = shufflevector <8 x i32> %3061, <8 x i32> poison, <8 x i32> zeroinitializer
  %3063 = insertelement <8 x i32> poison, i32 %3008, i64 0
  %3064 = shufflevector <8 x i32> %3063, <8 x i32> poison, <8 x i32> zeroinitializer
  %3065 = insertelement <8 x i32> poison, i32 %3008, i64 0
  %3066 = shufflevector <8 x i32> %3065, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %3067

3067:                                             ; preds = %3067, %3056
  %3068 = phi i64 [ 0, %3056 ], [ %3093, %3067 ]
  %3069 = xor i64 %3068, -1
  %3070 = add i64 %3069, %3053
  %3071 = add nsw i64 %3070, %3012
  %3072 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %3071
  %3073 = getelementptr inbounds i32, ptr %3072, i64 -7
  %3074 = load <8 x i32>, ptr %3073, align 4, !tbaa !21
  %3075 = shufflevector <8 x i32> %3074, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3076 = getelementptr inbounds i32, ptr %3072, i64 -15
  %3077 = load <8 x i32>, ptr %3076, align 4, !tbaa !21
  %3078 = shufflevector <8 x i32> %3077, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3079 = getelementptr inbounds i32, ptr %3072, i64 -23
  %3080 = load <8 x i32>, ptr %3079, align 4, !tbaa !21
  %3081 = shufflevector <8 x i32> %3080, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3082 = getelementptr inbounds i32, ptr %3072, i64 -31
  %3083 = load <8 x i32>, ptr %3082, align 4, !tbaa !21
  %3084 = shufflevector <8 x i32> %3083, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3085 = sub nsw <8 x i32> %3075, %3060
  %3086 = sub nsw <8 x i32> %3078, %3062
  %3087 = sub nsw <8 x i32> %3081, %3064
  %3088 = sub nsw <8 x i32> %3084, %3066
  %3089 = shufflevector <8 x i32> %3085, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3089, ptr %3073, align 4, !tbaa !21
  %3090 = shufflevector <8 x i32> %3086, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3090, ptr %3076, align 4, !tbaa !21
  %3091 = shufflevector <8 x i32> %3087, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3091, ptr %3079, align 4, !tbaa !21
  %3092 = shufflevector <8 x i32> %3088, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3092, ptr %3082, align 4, !tbaa !21
  %3093 = add nuw i64 %3068, 32
  %3094 = icmp eq i64 %3093, %3057
  br i1 %3094, label %3095, label %3067, !llvm.loop !168

3095:                                             ; preds = %3067
  %3096 = icmp eq i64 %3057, %3053
  br i1 %3096, label %3107, label %3097

3097:                                             ; preds = %3044, %3095
  %3098 = phi i64 [ %3053, %3044 ], [ %3058, %3095 ]
  br label %3099

3099:                                             ; preds = %3097, %3099
  %3100 = phi i64 [ %3101, %3099 ], [ %3098, %3097 ]
  %3101 = add nsw i64 %3100, -1
  %3102 = add nsw i64 %3101, %3012
  %3103 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %3102
  %3104 = load i32, ptr %3103, align 4, !tbaa !21
  %3105 = sub nsw i32 %3104, %3008
  store i32 %3105, ptr %3103, align 4, !tbaa !21
  %3106 = icmp ugt i64 %3100, 1
  br i1 %3106, label %3099, label %3107, !llvm.loop !169

3107:                                             ; preds = %3099, %3095, %3038, %3027, %3002
  %3108 = lshr i64 %3003, 1
  %3109 = add i32 %3004, 1
  br label %2955, !llvm.loop !170

3110:                                             ; preds = %2995
  %3111 = load ptr, ptr %1994, align 8, !tbaa !37
  %3112 = icmp eq ptr %3111, null
  %3113 = select i1 %3112, ptr @bitmap_zero_bits, ptr %3111
  %3114 = getelementptr inbounds %struct.bitmap_element_def, ptr %3113, i64 0, i32 2
  %3115 = load i32, ptr %3114, align 8, !tbaa !38
  %3116 = icmp eq i32 %3115, 0
  %3117 = shl i32 %3115, 7
  %3118 = select i1 %3116, i32 53, i32 %3117
  %3119 = getelementptr inbounds %struct.bitmap_element_def, ptr %3113, i64 0, i32 3, i64 0
  %3120 = load i64, ptr %3119, align 8, !tbaa !40
  %3121 = and i32 %3118, 53
  %3122 = zext i32 %3121 to i64
  %3123 = lshr i64 %3120, %3122
  %3124 = icmp eq i64 %3123, 0
  %3125 = zext i1 %3124 to i32
  %3126 = add nuw nsw i32 %3118, %3125
  br label %3127

3127:                                             ; preds = %3282, %3110
  %3128 = phi i64 [ %3123, %3110 ], [ %3283, %3282 ]
  %3129 = phi i32 [ %3126, %3110 ], [ %3284, %3282 ]
  %3130 = phi i32 [ 0, %3110 ], [ %3136, %3282 ]
  %3131 = phi ptr [ %3113, %3110 ], [ %3137, %3282 ]
  %3132 = icmp eq i64 %3128, 0
  br i1 %3132, label %3147, label %3133

3133:                                             ; preds = %3156, %3127
  %3134 = phi i64 [ %3128, %3127 ], [ %3161, %3156 ]
  %3135 = phi i32 [ %3129, %3127 ], [ %3157, %3156 ]
  %3136 = phi i32 [ %3130, %3127 ], [ %3158, %3156 ]
  %3137 = phi ptr [ %3131, %3127 ], [ %3153, %3156 ]
  %3138 = and i64 %3134, 1
  %3139 = icmp eq i64 %3138, 0
  br i1 %3139, label %3140, label %3177

3140:                                             ; preds = %3133, %3140
  %3141 = phi i32 [ %3144, %3140 ], [ %3135, %3133 ]
  %3142 = phi i64 [ %3143, %3140 ], [ %3134, %3133 ]
  %3143 = lshr i64 %3142, 1
  %3144 = add i32 %3141, 1
  %3145 = and i64 %3142, 2
  %3146 = icmp eq i64 %3145, 0
  br i1 %3146, label %3140, label %3177, !llvm.loop !41

3147:                                             ; preds = %3127
  %3148 = add i32 %3129, 63
  %3149 = and i32 %3148, -64
  %3150 = add i32 %3130, 1
  br label %3151

3151:                                             ; preds = %3173, %3147
  %3152 = phi i32 [ %3149, %3147 ], [ %3176, %3173 ]
  %3153 = phi ptr [ %3131, %3147 ], [ %3168, %3173 ]
  %3154 = phi i32 [ %3150, %3147 ], [ 0, %3173 ]
  %3155 = icmp eq i32 %3154, 2
  br i1 %3155, label %3167, label %3156

3156:                                             ; preds = %3151, %3163
  %3157 = phi i32 [ %3164, %3163 ], [ %3152, %3151 ]
  %3158 = phi i32 [ %3165, %3163 ], [ %3154, %3151 ]
  %3159 = zext i32 %3158 to i64
  %3160 = getelementptr inbounds %struct.bitmap_element_def, ptr %3153, i64 0, i32 3, i64 %3159
  %3161 = load i64, ptr %3160, align 8, !tbaa !40
  %3162 = icmp eq i64 %3161, 0
  br i1 %3162, label %3163, label %3133

3163:                                             ; preds = %3156
  %3164 = add i32 %3157, 64
  %3165 = add i32 %3158, 1
  %3166 = icmp eq i32 %3165, 2
  br i1 %3166, label %3167, label %3156, !llvm.loop !42

3167:                                             ; preds = %3163, %3151
  %3168 = load ptr, ptr %3153, align 8, !tbaa !43
  %3169 = icmp eq ptr %3168, null
  br i1 %3169, label %3170, label %3173

3170:                                             ; preds = %3167
  %3171 = load i32, ptr %2938, align 8, !tbaa !142
  %3172 = icmp eq i32 %3171, 0
  br i1 %3172, label %3336, label %3285

3173:                                             ; preds = %3167
  %3174 = getelementptr inbounds %struct.bitmap_element_def, ptr %3168, i64 0, i32 2
  %3175 = load i32, ptr %3174, align 8, !tbaa !38
  %3176 = shl i32 %3175, 7
  br label %3151

3177:                                             ; preds = %3140, %3133
  %3178 = phi i64 [ %3134, %3133 ], [ %3143, %3140 ]
  %3179 = phi i32 [ %3135, %3133 ], [ %3144, %3140 ]
  %3180 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %3181 = sext i32 %3179 to i64
  %3182 = getelementptr inbounds %struct.reg_info_t, ptr %3180, i64 %3181
  %3183 = load i32, ptr %3182, align 4, !tbaa !144
  %3184 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3185 = getelementptr inbounds i16, ptr %3184, i64 %3181
  %3186 = load i16, ptr %3185, align 2, !tbaa !44
  %3187 = sext i16 %3186 to i64
  %3188 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3189 = getelementptr inbounds ptr, ptr %3188, i64 %3181
  %3190 = load ptr, ptr %3189, align 8, !tbaa !6
  %3191 = load i32, ptr %3190, align 8
  %3192 = lshr i32 %3191, 16
  %3193 = and i32 %3192, 255
  %3194 = zext i32 %3193 to i64
  %3195 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3187, i64 %3194
  %3196 = load i8, ptr %3195, align 1, !tbaa !17
  %3197 = zext i8 %3196 to i32
  %3198 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %3199 = icmp ne i8 %3198, 0
  %3200 = icmp slt i16 %3186, 0
  %3201 = and i1 %3200, %3199
  br i1 %3201, label %3282, label %3202

3202:                                             ; preds = %3177
  %3203 = load i32, ptr %2938, align 8, !tbaa !142
  %3204 = sext i16 %3186 to i32
  %3205 = call i32 @bitmap_bit_p(ptr noundef nonnull @spilled_pseudos, i32 noundef %3179) #19
  %3206 = icmp eq i32 %3205, 0
  %3207 = add nsw i32 %3203, %2920
  %3208 = icmp sgt i32 %3207, %3204
  %3209 = select i1 %3206, i1 %3208, i1 false
  %3210 = add nsw i32 %3197, %3204
  %3211 = icmp sgt i32 %3210, %2920
  %3212 = select i1 %3209, i1 %3211, i1 false
  br i1 %3212, label %3213, label %3282

3213:                                             ; preds = %3202
  %3214 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %3179) #19
  %3215 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %3187
  %3216 = load i32, ptr %3215, align 4, !tbaa !21
  %3217 = sub nsw i32 %3216, %3183
  store i32 %3217, ptr %3215, align 4, !tbaa !21
  %3218 = icmp eq i8 %3196, 0
  br i1 %3218, label %3282, label %3219

3219:                                             ; preds = %3213
  %3220 = sext i32 %3210 to i64
  %3221 = shl nsw i64 %3220, 2
  %3222 = add nsw i64 %3221, -4
  %3223 = add nsw i32 %3197, -1
  %3224 = zext i32 %3223 to i64
  %3225 = shl nuw nsw i64 %3224, 2
  %3226 = sub nsw i64 %3222, %3225
  %3227 = getelementptr i8, ptr @hard_regno_to_pseudo_regno, i64 %3226
  %3228 = zext i8 %3196 to i64
  %3229 = shl nuw nsw i64 %3228, 2
  call void @llvm.memset.p0.i64(ptr align 4 %3227, i8 -1, i64 %3229, i1 false), !tbaa !21
  %3230 = icmp ult i8 %3196, 32
  br i1 %3230, label %3272, label %3231

3231:                                             ; preds = %3219
  %3232 = and i64 %3228, 224
  %3233 = and i64 %3228, 31
  %3234 = insertelement <8 x i32> poison, i32 %3183, i64 0
  %3235 = shufflevector <8 x i32> %3234, <8 x i32> poison, <8 x i32> zeroinitializer
  %3236 = insertelement <8 x i32> poison, i32 %3183, i64 0
  %3237 = shufflevector <8 x i32> %3236, <8 x i32> poison, <8 x i32> zeroinitializer
  %3238 = insertelement <8 x i32> poison, i32 %3183, i64 0
  %3239 = shufflevector <8 x i32> %3238, <8 x i32> poison, <8 x i32> zeroinitializer
  %3240 = insertelement <8 x i32> poison, i32 %3183, i64 0
  %3241 = shufflevector <8 x i32> %3240, <8 x i32> poison, <8 x i32> zeroinitializer
  br label %3242

3242:                                             ; preds = %3242, %3231
  %3243 = phi i64 [ 0, %3231 ], [ %3268, %3242 ]
  %3244 = xor i64 %3243, -1
  %3245 = add i64 %3244, %3228
  %3246 = add nsw i64 %3245, %3187
  %3247 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %3246
  %3248 = getelementptr inbounds i32, ptr %3247, i64 -7
  %3249 = load <8 x i32>, ptr %3248, align 4, !tbaa !21
  %3250 = shufflevector <8 x i32> %3249, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3251 = getelementptr inbounds i32, ptr %3247, i64 -15
  %3252 = load <8 x i32>, ptr %3251, align 4, !tbaa !21
  %3253 = shufflevector <8 x i32> %3252, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3254 = getelementptr inbounds i32, ptr %3247, i64 -23
  %3255 = load <8 x i32>, ptr %3254, align 4, !tbaa !21
  %3256 = shufflevector <8 x i32> %3255, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3257 = getelementptr inbounds i32, ptr %3247, i64 -31
  %3258 = load <8 x i32>, ptr %3257, align 4, !tbaa !21
  %3259 = shufflevector <8 x i32> %3258, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %3260 = sub nsw <8 x i32> %3250, %3235
  %3261 = sub nsw <8 x i32> %3253, %3237
  %3262 = sub nsw <8 x i32> %3256, %3239
  %3263 = sub nsw <8 x i32> %3259, %3241
  %3264 = shufflevector <8 x i32> %3260, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3264, ptr %3248, align 4, !tbaa !21
  %3265 = shufflevector <8 x i32> %3261, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3265, ptr %3251, align 4, !tbaa !21
  %3266 = shufflevector <8 x i32> %3262, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3266, ptr %3254, align 4, !tbaa !21
  %3267 = shufflevector <8 x i32> %3263, <8 x i32> poison, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  store <8 x i32> %3267, ptr %3257, align 4, !tbaa !21
  %3268 = add nuw i64 %3243, 32
  %3269 = icmp eq i64 %3268, %3232
  br i1 %3269, label %3270, label %3242, !llvm.loop !171

3270:                                             ; preds = %3242
  %3271 = icmp eq i64 %3232, %3228
  br i1 %3271, label %3282, label %3272

3272:                                             ; preds = %3219, %3270
  %3273 = phi i64 [ %3228, %3219 ], [ %3233, %3270 ]
  br label %3274

3274:                                             ; preds = %3272, %3274
  %3275 = phi i64 [ %3276, %3274 ], [ %3273, %3272 ]
  %3276 = add nsw i64 %3275, -1
  %3277 = add nsw i64 %3276, %3187
  %3278 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %3277
  %3279 = load i32, ptr %3278, align 4, !tbaa !21
  %3280 = sub nsw i32 %3279, %3183
  store i32 %3280, ptr %3278, align 4, !tbaa !21
  %3281 = icmp ugt i64 %3275, 1
  br i1 %3281, label %3274, label %3282, !llvm.loop !172

3282:                                             ; preds = %3274, %3270, %3213, %3202, %3177
  %3283 = lshr i64 %3178, 1
  %3284 = add i32 %3179, 1
  br label %3127, !llvm.loop !173

3285:                                             ; preds = %3170, %3304
  %3286 = phi i64 [ %3308, %3304 ], [ 0, %3170 ]
  %3287 = trunc i64 %3286 to i32
  %3288 = add i32 %2920, %3287
  %3289 = zext i32 %3288 to i64
  %3290 = getelementptr inbounds [53 x i32], ptr @spill_cost, i64 0, i64 %3289
  %3291 = load i32, ptr %3290, align 4, !tbaa !21
  %3292 = icmp eq i32 %3291, 0
  br i1 %3292, label %3294, label %3293

3293:                                             ; preds = %3285
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2020, ptr noundef nonnull @.str.2) #19
  br label %3294

3294:                                             ; preds = %3293, %3285
  %3295 = getelementptr inbounds [53 x i32], ptr @spill_add_cost, i64 0, i64 %3289
  %3296 = load i32, ptr %3295, align 4, !tbaa !21
  %3297 = icmp eq i32 %3296, 0
  br i1 %3297, label %3299, label %3298

3298:                                             ; preds = %3294
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2021, ptr noundef nonnull @.str.2) #19
  br label %3299

3299:                                             ; preds = %3298, %3294
  %3300 = getelementptr inbounds [53 x i32], ptr @hard_regno_to_pseudo_regno, i64 0, i64 %3289
  %3301 = load i32, ptr %3300, align 4, !tbaa !21
  %3302 = icmp eq i32 %3301, -1
  br i1 %3302, label %3304, label %3303

3303:                                             ; preds = %3299
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 2022, ptr noundef nonnull @.str.2) #19
  br label %3304

3304:                                             ; preds = %3303, %3299
  %3305 = shl nuw i64 1, %3289
  %3306 = load i64, ptr @used_spill_regs_local, align 8, !tbaa !40
  %3307 = or i64 %3306, %3305
  store i64 %3307, ptr @used_spill_regs_local, align 8, !tbaa !40
  %3308 = add nuw nsw i64 %3286, 1
  %3309 = load i32, ptr %2938, align 8, !tbaa !142
  %3310 = zext i32 %3309 to i64
  %3311 = icmp ult i64 %3308, %3310
  br i1 %3311, label %3285, label %3336, !llvm.loop !174

3312:                                             ; preds = %2924
  br i1 %2927, label %3315, label %3313

3313:                                             ; preds = %3312
  %3314 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %2926, ptr noundef nonnull @.str.12, i32 noundef %2381)
  br label %3315

3315:                                             ; preds = %3313, %3312
  %3316 = load ptr, ptr %2353, align 8, !tbaa !111
  %3317 = load i32, ptr %2386, align 8, !tbaa !154
  %3318 = getelementptr inbounds %struct.rtx_def, ptr %3316, i64 0, i32 1
  %3319 = getelementptr inbounds %struct.rtx_def, ptr %3316, i64 1
  %3320 = load ptr, ptr %3319, align 8, !tbaa !17
  %3321 = call i32 @asm_noperands(ptr noundef %3320) #19
  %3322 = icmp sgt i32 %3321, -1
  %3323 = zext i32 %3317 to i64
  %3324 = getelementptr inbounds [0 x ptr], ptr @reg_class_names, i64 0, i64 %3323
  %3325 = load ptr, ptr %3324, align 8, !tbaa !6
  br i1 %3322, label %3326, label %3327

3326:                                             ; preds = %3315
  call void (ptr, ptr, ...) @error_for_asm(ptr noundef nonnull %3316, ptr noundef nonnull @.str.14, ptr noundef %3325) #19
  br label %3335

3327:                                             ; preds = %3315
  call void (ptr, ...) @error(ptr noundef nonnull @.str.15, ptr noundef %3325) #19
  %3328 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %3329 = icmp eq ptr %3328, null
  br i1 %3329, label %3334, label %3330

3330:                                             ; preds = %3327
  %3331 = load i32, ptr %3318, align 8, !tbaa !17
  %3332 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %3328, ptr noundef nonnull @.str.16, i32 noundef %3331)
  %3333 = load ptr, ptr @dump_file, align 8, !tbaa !6
  call void @debug_reload_to_stream(ptr noundef %3333) #19
  br label %3334

3334:                                             ; preds = %3330, %3327
  call void @_fatal_insn(ptr noundef nonnull @.str.17, ptr noundef nonnull %3316, ptr noundef nonnull @.str.1, i32 noundef 2162, ptr noundef nonnull @.str.2) #19
  br label %3335

3335:                                             ; preds = %3334, %3326
  store i1 true, ptr @failure, align 4
  br label %3349

3336:                                             ; preds = %3304, %3170, %2376, %2371, %2366
  %3337 = add nuw nsw i64 %2355, 1
  %3338 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %3339 = sext i32 %3338 to i64
  %3340 = icmp slt i64 %3337, %3339
  br i1 %3340, label %2354, label %3341, !llvm.loop !175

3341:                                             ; preds = %3336, %2350
  %3342 = phi i64 [ %2351, %2350 ], [ %3339, %3336 ]
  %3343 = load i64, ptr @used_spill_regs_local, align 8, !tbaa !40
  %3344 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 10
  store i64 %3343, ptr %3344, align 8, !tbaa !176
  %3345 = load i64, ptr @used_spill_regs, align 8, !tbaa !40
  %3346 = or i64 %3345, %3343
  store i64 %3346, ptr @used_spill_regs, align 8, !tbaa !40
  %3347 = load ptr, ptr %1948, align 8, !tbaa !133
  %3348 = mul nsw i64 %3342, 104
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %3347, ptr nonnull align 16 @rld, i64 %3348, i1 false)
  br label %3349

3349:                                             ; preds = %3341, %3335
  %3350 = getelementptr inbounds %struct.insn_chain, ptr %1944, i64 0, i32 2
  %3351 = load ptr, ptr %3350, align 8, !tbaa !6
  %3352 = icmp eq ptr %3351, null
  br i1 %3352, label %3353, label %1943, !llvm.loop !177

3353:                                             ; preds = %3349, %1940
  %3354 = load i1, ptr @failure, align 4
  br i1 %3354, label %3544, label %3355

3355:                                             ; preds = %3353
  %3356 = load ptr, ptr @insns_need_reload, align 8, !tbaa !6
  %3357 = icmp ne ptr %3356, null
  %3358 = icmp ne i32 %1937, 0
  %3359 = select i1 %3357, i1 true, i1 %3358
  br i1 %3359, label %3360, label %3363

3360:                                             ; preds = %3355
  %3361 = call fastcc i32 @finish_spills(i32 noundef %1), !range !122
  %3362 = or i32 %3361, %1936
  br label %3363

3363:                                             ; preds = %3355, %3360
  %3364 = phi i32 [ %3362, %3360 ], [ %1936, %3355 ]
  %3365 = icmp eq i32 %3364, 0
  br i1 %3365, label %3419, label %3366

3366:                                             ; preds = %3363
  %3367 = load i32, ptr @caller_save_needed, align 4, !tbaa !21
  %3368 = icmp eq i32 %3367, 0
  %3369 = load ptr, ptr @reload_insn_chain, align 8
  %3370 = icmp eq ptr %3369, null
  %3371 = select i1 %3368, i1 true, i1 %3370
  br i1 %3371, label %3402, label %3372

3372:                                             ; preds = %3366, %3399
  %3373 = phi ptr [ %3378, %3399 ], [ %3369, %3366 ]
  %3374 = getelementptr inbounds %struct.insn_chain, ptr %3373, i64 0, i32 5
  %3375 = load i8, ptr %3374, align 4
  %3376 = and i8 %3375, 8
  %3377 = icmp eq i8 %3376, 0
  %3378 = load ptr, ptr %3373, align 8, !tbaa !35
  br i1 %3377, label %3400, label %3379

3379:                                             ; preds = %3372
  %3380 = getelementptr inbounds %struct.insn_chain, ptr %3373, i64 0, i32 3
  %3381 = load ptr, ptr %3380, align 8, !tbaa !111
  %3382 = load ptr, ptr @reload_insn_chain, align 8, !tbaa !6
  %3383 = icmp eq ptr %3373, %3382
  br i1 %3383, label %3384, label %3385

3384:                                             ; preds = %3379
  store ptr %3378, ptr @reload_insn_chain, align 8, !tbaa !6
  br label %3385

3385:                                             ; preds = %3384, %3379
  %3386 = call ptr @delete_insn(ptr noundef %3381) #19
  %3387 = icmp eq ptr %3378, null
  br i1 %3387, label %3392, label %3388

3388:                                             ; preds = %3385
  %3389 = getelementptr inbounds %struct.insn_chain, ptr %3373, i64 0, i32 1
  %3390 = load ptr, ptr %3389, align 8, !tbaa !132
  %3391 = getelementptr inbounds %struct.insn_chain, ptr %3378, i64 0, i32 1
  store ptr %3390, ptr %3391, align 8, !tbaa !132
  br label %3392

3392:                                             ; preds = %3388, %3385
  %3393 = getelementptr inbounds %struct.insn_chain, ptr %3373, i64 0, i32 1
  %3394 = load ptr, ptr %3393, align 8, !tbaa !132
  %3395 = icmp eq ptr %3394, null
  br i1 %3395, label %3397, label %3396

3396:                                             ; preds = %3392
  store ptr %3378, ptr %3394, align 8, !tbaa !35
  br label %3397

3397:                                             ; preds = %3396, %3392
  %3398 = load ptr, ptr @unused_insn_chains, align 8, !tbaa !6
  store ptr %3398, ptr %3373, align 8, !tbaa !35
  store ptr %3373, ptr @unused_insn_chains, align 8, !tbaa !6
  br i1 %3387, label %3402, label %3399

3399:                                             ; preds = %3397, %3400
  br label %3372, !llvm.loop !178

3400:                                             ; preds = %3372
  %3401 = icmp eq ptr %3378, null
  br i1 %3401, label %3402, label %3399

3402:                                             ; preds = %3400, %3397, %3366
  %3403 = load ptr, ptr @reload_firstobj, align 8, !tbaa !6
  %3404 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %3405 = ptrtoint ptr %3403 to i64
  %3406 = ptrtoint ptr %3404 to i64
  %3407 = sub i64 %3405, %3406
  store i64 %3407, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %3408 = icmp sgt i64 %3407, 0
  br i1 %3408, label %3409, label %3417

3409:                                             ; preds = %3402
  %3410 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %3411 = ptrtoint ptr %3410 to i64
  %3412 = sub i64 %3411, %3406
  %3413 = icmp slt i64 %3407, %3412
  br i1 %3413, label %3414, label %3417

3414:                                             ; preds = %3409
  %3415 = getelementptr inbounds i8, ptr %3404, i64 %3407
  store ptr %3415, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %3415, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %3416

3416:                                             ; preds = %3414, %3417, %1004, %996
  br label %872

3417:                                             ; preds = %3409, %3402
  %3418 = getelementptr inbounds i8, ptr %3404, i64 %3407
  call void @obstack_free(ptr noundef nonnull @reload_obstack, ptr noundef %3418) #19
  br label %3416

3419:                                             ; preds = %3363
  %3420 = icmp eq i32 %1, 0
  br i1 %3420, label %3439, label %3421

3421:                                             ; preds = %3419
  %3422 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %3423

3423:                                             ; preds = %3421, %3434
  %3424 = phi ptr [ %3435, %3434 ], [ %3422, %3421 ]
  %3425 = phi ptr [ %3436, %3434 ], [ %3422, %3421 ]
  %3426 = getelementptr inbounds %struct.elim_table, ptr %3425, i64 0, i32 3
  %3427 = load i32, ptr %3426, align 8, !tbaa !103
  %3428 = icmp eq i32 %3427, 0
  br i1 %3428, label %3434, label %3429

3429:                                             ; preds = %3423
  %3430 = load i32, ptr %3425, align 8, !tbaa !85
  %3431 = getelementptr inbounds %struct.elim_table, ptr %3425, i64 0, i32 1
  %3432 = load i32, ptr %3431, align 4, !tbaa !88
  call void @mark_elimination(i32 noundef %3430, i32 noundef %3432) #19
  %3433 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %3434

3434:                                             ; preds = %3423, %3429
  %3435 = phi ptr [ %3424, %3423 ], [ %3433, %3429 ]
  %3436 = getelementptr inbounds %struct.elim_table, ptr %3425, i64 1
  %3437 = getelementptr inbounds %struct.elim_table, ptr %3435, i64 4
  %3438 = icmp ult ptr %3436, %3437
  br i1 %3438, label %3423, label %3439, !llvm.loop !179

3439:                                             ; preds = %3434, %3419
  %3440 = load i32, ptr @max_regno, align 4, !tbaa !21
  %3441 = icmp sgt i32 %3440, 53
  br i1 %3441, label %3442, label %3485

3442:                                             ; preds = %3439, %3480
  %3443 = phi i32 [ %3481, %3480 ], [ %3440, %3439 ]
  %3444 = phi i64 [ %3482, %3480 ], [ 53, %3439 ]
  %3445 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3446 = getelementptr inbounds i16, ptr %3445, i64 %3444
  %3447 = load i16, ptr %3446, align 2, !tbaa !44
  %3448 = icmp slt i16 %3447, 0
  br i1 %3448, label %3449, label %3480

3449:                                             ; preds = %3442
  %3450 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %3451 = getelementptr inbounds ptr, ptr %3450, i64 %3444
  %3452 = load ptr, ptr %3451, align 8, !tbaa !6
  %3453 = icmp eq ptr %3452, null
  br i1 %3453, label %3480, label %3454

3454:                                             ; preds = %3449, %3474
  %3455 = phi ptr [ %3476, %3474 ], [ %3452, %3449 ]
  %3456 = getelementptr inbounds %struct.rtx_def, ptr %3455, i64 0, i32 1
  %3457 = load ptr, ptr %3456, align 8, !tbaa !17
  %3458 = load i32, ptr %3457, align 8
  %3459 = and i32 %3458, 65535
  %3460 = icmp eq i32 %3459, 13
  br i1 %3460, label %3474, label %3461

3461:                                             ; preds = %3454
  %3462 = call zeroext i8 @can_throw_internal(ptr noundef nonnull %3457) #19
  %3463 = icmp eq i8 %3462, 0
  br i1 %3463, label %3464, label %3474

3464:                                             ; preds = %3461
  %3465 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3466 = getelementptr inbounds ptr, ptr %3465, i64 %3444
  %3467 = load ptr, ptr %3466, align 8, !tbaa !6
  %3468 = getelementptr inbounds %struct.rtx_def, ptr %3457, i64 1
  %3469 = load ptr, ptr %3468, align 8, !tbaa !17
  %3470 = call i32 @reg_set_p(ptr noundef %3467, ptr noundef %3469) #19
  %3471 = icmp eq i32 %3470, 0
  br i1 %3471, label %3473, label %3472

3472:                                             ; preds = %3464
  call fastcc void @delete_dead_insn(ptr noundef nonnull %3457)
  br label %3474

3473:                                             ; preds = %3464
  call void @set_insn_deleted(ptr noundef nonnull %3457) #19
  br label %3474

3474:                                             ; preds = %3472, %3473, %3454, %3461
  %3475 = getelementptr inbounds %struct.rtx_def, ptr %3455, i64 0, i32 1, i32 0, i32 0, i64 1
  %3476 = load ptr, ptr %3475, align 8, !tbaa !17
  %3477 = icmp eq ptr %3476, null
  br i1 %3477, label %3478, label %3454, !llvm.loop !180

3478:                                             ; preds = %3474
  %3479 = load i32, ptr @max_regno, align 4, !tbaa !21
  br label %3480

3480:                                             ; preds = %3478, %3442, %3449
  %3481 = phi i32 [ %3479, %3478 ], [ %3443, %3442 ], [ %3443, %3449 ]
  %3482 = add nuw nsw i64 %3444, 1
  %3483 = sext i32 %3481 to i64
  %3484 = icmp slt i64 %3482, %3483
  br i1 %3484, label %3442, label %3485, !llvm.loop !181

3485:                                             ; preds = %3480, %3439
  %3486 = load ptr, ptr @insns_need_reload, align 8, !tbaa !6
  %3487 = icmp ne ptr %3486, null
  %3488 = load i1, ptr @something_needs_elimination, align 4
  %3489 = select i1 %3487, i1 true, i1 %3488
  %3490 = load i32, ptr @something_needs_operands_changed, align 4
  %3491 = icmp ne i32 %3490, 0
  %3492 = select i1 %3489, i1 true, i1 %3491
  br i1 %3492, label %3493, label %3519

3493:                                             ; preds = %3485
  %3494 = call i64 @get_frame_size() #19
  call fastcc void @reload_as_needed(i32 noundef %1)
  %3495 = call i64 @get_frame_size() #19
  %3496 = icmp eq i64 %3494, %3495
  br i1 %3496, label %3498, label %3497

3497:                                             ; preds = %3493
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1188, ptr noundef nonnull @.str.2) #19
  br label %3498

3498:                                             ; preds = %3493, %3497
  %3499 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %3500 = icmp eq i32 %3499, 0
  br i1 %3500, label %3519, label %3501

3501:                                             ; preds = %3498
  %3502 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %3503

3503:                                             ; preds = %3503, %3501
  %3504 = phi ptr [ %3502, %3501 ], [ %3512, %3503 ]
  %3505 = load i32, ptr %3504, align 8, !tbaa !85
  %3506 = getelementptr inbounds %struct.elim_table, ptr %3504, i64 0, i32 1
  %3507 = load i32, ptr %3506, align 4, !tbaa !88
  %3508 = call i64 @ix86_initial_elimination_offset(i32 noundef %3505, i32 noundef %3507) #19
  %3509 = getelementptr inbounds %struct.elim_table, ptr %3504, i64 0, i32 2
  %3510 = load i64, ptr %3509, align 8, !tbaa !123
  %3511 = icmp eq i64 %3508, %3510
  %3512 = getelementptr inbounds %struct.elim_table, ptr %3504, i64 1
  %3513 = load ptr, ptr @reg_eliminate, align 8
  %3514 = getelementptr inbounds %struct.elim_table, ptr %3513, i64 4
  %3515 = icmp ult ptr %3512, %3514
  %3516 = select i1 %3511, i1 %3515, i1 false
  br i1 %3516, label %3503, label %3517, !llvm.loop !135

3517:                                             ; preds = %3503
  br i1 %3511, label %3519, label %3518

3518:                                             ; preds = %3517
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 1190, ptr noundef nonnull @.str.2) #19
  br label %3519

3519:                                             ; preds = %3498, %3518, %3517, %3485
  %3520 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  %3521 = icmp eq i8 %3520, 0
  br i1 %3521, label %3522, label %3544

3522:                                             ; preds = %3519
  %3523 = load ptr, ptr @cfun, align 8, !tbaa !6
  %3524 = getelementptr inbounds %struct.function, ptr %3523, i64 0, i32 1
  %3525 = load ptr, ptr %3524, align 8, !tbaa !52
  %3526 = load ptr, ptr %3525, align 8, !tbaa !56
  %3527 = getelementptr inbounds %struct.basic_block_def, ptr %3526, i64 0, i32 6
  %3528 = load ptr, ptr %3527, align 8, !tbaa !58
  %3529 = getelementptr inbounds %struct.control_flow_graph, ptr %3525, i64 0, i32 1
  %3530 = load ptr, ptr %3529, align 8, !tbaa !57
  %3531 = icmp eq ptr %3528, %3530
  br i1 %3531, label %3544, label %3532

3532:                                             ; preds = %3522, %3532
  %3533 = phi ptr [ %3537, %3532 ], [ %3528, %3522 ]
  %3534 = call ptr @df_get_live_in(ptr noundef %3533) #19
  %3535 = call zeroext i8 @bitmap_clear_bit(ptr noundef %3534, i32 noundef 6) #19
  %3536 = getelementptr inbounds %struct.basic_block_def, ptr %3533, i64 0, i32 6
  %3537 = load ptr, ptr %3536, align 8, !tbaa !58
  %3538 = load ptr, ptr @cfun, align 8, !tbaa !6
  %3539 = getelementptr inbounds %struct.function, ptr %3538, i64 0, i32 1
  %3540 = load ptr, ptr %3539, align 8, !tbaa !52
  %3541 = getelementptr inbounds %struct.control_flow_graph, ptr %3540, i64 0, i32 1
  %3542 = load ptr, ptr %3541, align 8, !tbaa !57
  %3543 = icmp eq ptr %3537, %3542
  br i1 %3543, label %3544, label %3532, !llvm.loop !182

3544:                                             ; preds = %3353, %3532, %3522, %3519
  call void @bitmap_clear(ptr noundef nonnull @changed_allocation_pseudos) #19
  call void @bitmap_clear(ptr noundef nonnull @spilled_pseudos) #19
  store i32 0, ptr @reload_in_progress, align 4, !tbaa !21
  %3545 = load i32, ptr @max_regno, align 4, !tbaa !21
  %3546 = icmp sgt i32 %3545, 53
  br i1 %3546, label %3547, label %3753

3547:                                             ; preds = %3544, %3748
  %3548 = phi i64 [ %3749, %3748 ], [ 53, %3544 ]
  %3549 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %3550 = getelementptr inbounds ptr, ptr %3549, i64 %3548
  %3551 = load ptr, ptr %3550, align 8, !tbaa !6
  %3552 = icmp eq ptr %3551, null
  br i1 %3552, label %3556, label %3553

3553:                                             ; preds = %3547
  %3554 = getelementptr inbounds %struct.rtx_def, ptr %3551, i64 0, i32 1
  %3555 = load ptr, ptr %3554, align 8, !tbaa !17
  br label %3556

3556:                                             ; preds = %3553, %3547
  %3557 = phi ptr [ %3555, %3553 ], [ null, %3547 ]
  %3558 = load ptr, ptr @reg_equiv_address, align 8, !tbaa !6
  %3559 = getelementptr inbounds ptr, ptr %3558, i64 %3548
  %3560 = load ptr, ptr %3559, align 8, !tbaa !6
  %3561 = icmp eq ptr %3560, null
  %3562 = select i1 %3561, ptr %3557, ptr %3560
  %3563 = icmp eq ptr %3562, null
  br i1 %3563, label %3642, label %3564

3564:                                             ; preds = %3556
  %3565 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3566 = getelementptr inbounds i16, ptr %3565, i64 %3548
  %3567 = load i16, ptr %3566, align 2, !tbaa !44
  %3568 = icmp slt i16 %3567, 0
  br i1 %3568, label %3569, label %3639

3569:                                             ; preds = %3564
  %3570 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3571 = getelementptr inbounds ptr, ptr %3570, i64 %3548
  %3572 = load ptr, ptr %3571, align 8, !tbaa !6
  %3573 = load i32, ptr %3572, align 8
  %3574 = and i32 %3573, -134283264
  %3575 = or i32 %3574, 43
  store i32 %3575, ptr %3572, align 8
  %3576 = getelementptr inbounds %struct.rtx_def, ptr %3572, i64 0, i32 1
  store ptr %3562, ptr %3576, align 8, !tbaa !17
  %3577 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3578 = getelementptr inbounds ptr, ptr %3577, i64 %3548
  %3579 = load ptr, ptr %3578, align 8, !tbaa !6
  %3580 = icmp eq ptr %3579, null
  br i1 %3580, label %3632, label %3581

3581:                                             ; preds = %3569
  %3582 = load i32, ptr %3579, align 8
  %3583 = and i32 %3582, 134217728
  %3584 = or i32 %3583, %3575
  store i32 %3584, ptr %3572, align 8
  %3585 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3586 = getelementptr inbounds ptr, ptr %3585, i64 %3548
  %3587 = load ptr, ptr %3586, align 8, !tbaa !6
  %3588 = load i32, ptr %3587, align 8
  %3589 = and i32 %3588, 268435456
  %3590 = and i32 %3584, -268500949
  %3591 = or i32 %3589, %3590
  store i32 %3591, ptr %3572, align 8
  %3592 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3593 = getelementptr inbounds ptr, ptr %3592, i64 %3548
  %3594 = load ptr, ptr %3593, align 8, !tbaa !6
  %3595 = load i32, ptr %3594, align 8
  %3596 = and i32 %3595, -2147483648
  %3597 = and i32 %3591, 2147418155
  %3598 = or i32 %3596, %3597
  store i32 %3598, ptr %3572, align 8
  %3599 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3600 = getelementptr inbounds ptr, ptr %3599, i64 %3548
  %3601 = load ptr, ptr %3600, align 8, !tbaa !6
  %3602 = load i32, ptr %3601, align 8
  %3603 = and i32 %3602, 33554432
  %3604 = and i32 %3598, -33619925
  %3605 = or i32 %3603, %3604
  store i32 %3605, ptr %3572, align 8
  %3606 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3607 = getelementptr inbounds ptr, ptr %3606, i64 %3548
  %3608 = load ptr, ptr %3607, align 8, !tbaa !6
  %3609 = load i32, ptr %3608, align 8
  %3610 = and i32 %3609, 67108864
  %3611 = and i32 %3605, -67174357
  %3612 = or i32 %3610, %3611
  store i32 %3612, ptr %3572, align 8
  %3613 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3614 = getelementptr inbounds ptr, ptr %3613, i64 %3548
  %3615 = load ptr, ptr %3614, align 8, !tbaa !6
  %3616 = load i32, ptr %3615, align 8
  %3617 = and i32 %3616, 16777216
  %3618 = and i32 %3612, -16842709
  %3619 = or i32 %3617, %3618
  store i32 %3619, ptr %3572, align 8
  %3620 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3621 = getelementptr inbounds ptr, ptr %3620, i64 %3548
  %3622 = load ptr, ptr %3621, align 8, !tbaa !6
  %3623 = load i32, ptr %3622, align 8
  %3624 = and i32 %3623, 1073741824
  %3625 = and i32 %3619, -1073807317
  %3626 = or i32 %3624, %3625
  store i32 %3626, ptr %3572, align 8
  %3627 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3628 = getelementptr inbounds ptr, ptr %3627, i64 %3548
  %3629 = load ptr, ptr %3628, align 8, !tbaa !6
  %3630 = getelementptr inbounds %struct.rtx_def, ptr %3629, i64 0, i32 1, i32 0, i32 0, i64 1
  %3631 = load ptr, ptr %3630, align 8, !tbaa !17
  br label %3634

3632:                                             ; preds = %3569
  %3633 = and i32 %3575, 1744764971
  br label %3634

3634:                                             ; preds = %3632, %3581
  %3635 = phi i32 [ %3633, %3632 ], [ %3626, %3581 ]
  %3636 = phi ptr [ null, %3632 ], [ %3631, %3581 ]
  %3637 = getelementptr inbounds %struct.rtx_def, ptr %3572, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %3636, ptr %3637, align 8
  %3638 = or i32 %3635, 33554432
  store i32 %3638, ptr %3572, align 8
  br label %3642

3639:                                             ; preds = %3564
  br i1 %3552, label %3642, label %3640

3640:                                             ; preds = %3639
  %3641 = getelementptr inbounds %struct.rtx_def, ptr %3551, i64 0, i32 1
  store ptr %3562, ptr %3641, align 8, !tbaa !17
  br label %3642

3642:                                             ; preds = %3634, %3640, %3639, %3556
  %3643 = load i32, ptr @flag_var_tracking_assignments, align 4, !tbaa !21
  %3644 = icmp eq i32 %3643, 0
  br i1 %3644, label %3748, label %3645

3645:                                             ; preds = %3642
  %3646 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3647 = getelementptr inbounds i16, ptr %3646, i64 %3548
  %3648 = load i16, ptr %3647, align 2, !tbaa !44
  %3649 = icmp slt i16 %3648, 0
  br i1 %3649, label %3650, label %3748

3650:                                             ; preds = %3645
  %3651 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3652 = getelementptr inbounds ptr, ptr %3651, i64 %3548
  %3653 = load ptr, ptr %3652, align 8, !tbaa !6
  %3654 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3655 = getelementptr inbounds ptr, ptr %3654, i64 %3548
  %3656 = load ptr, ptr %3655, align 8, !tbaa !6
  %3657 = icmp eq ptr %3656, null
  br i1 %3657, label %3658, label %3677

3658:                                             ; preds = %3650
  %3659 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %3660 = getelementptr inbounds ptr, ptr %3659, i64 %3548
  %3661 = load ptr, ptr %3660, align 8, !tbaa !6
  %3662 = icmp eq ptr %3661, null
  br i1 %3662, label %3663, label %3677

3663:                                             ; preds = %3658
  %3664 = icmp eq ptr %3653, null
  br i1 %3664, label %3677, label %3665

3665:                                             ; preds = %3663
  %3666 = load i32, ptr %3653, align 8
  %3667 = trunc i32 %3666 to i16
  switch i16 %3667, label %3677 [
    i16 43, label %3668
    i16 37, label %3671
  ]

3668:                                             ; preds = %3665
  %3669 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 40), align 8, !tbaa !183
  %3670 = call ptr %3669(ptr noundef nonnull %3653) #19
  br label %3677

3671:                                             ; preds = %3665
  %3672 = getelementptr i8, ptr %3653, i64 8
  %3673 = load i32, ptr %3672, align 8, !tbaa !17
  %3674 = zext i32 %3673 to i64
  %3675 = icmp eq i64 %3548, %3674
  %3676 = select i1 %3675, ptr null, ptr %3653
  br label %3677

3677:                                             ; preds = %3665, %3671, %3663, %3658, %3650, %3668
  %3678 = phi ptr [ %3670, %3668 ], [ %3656, %3650 ], [ %3661, %3658 ], [ %3676, %3671 ], [ null, %3663 ], [ null, %3665 ]
  %3679 = freeze ptr %3678
  %3680 = icmp eq ptr %3679, %3653
  br i1 %3680, label %3748, label %3681

3681:                                             ; preds = %3677
  %3682 = load ptr, ptr @df, align 8, !tbaa !6
  %3683 = getelementptr inbounds %struct.df, ptr %3682, i64 0, i32 6
  %3684 = load ptr, ptr %3683, align 8, !tbaa !184
  %3685 = getelementptr inbounds ptr, ptr %3684, i64 %3548
  %3686 = load ptr, ptr %3685, align 8, !tbaa !6
  %3687 = load ptr, ptr %3686, align 8, !tbaa !187
  %3688 = icmp eq ptr %3687, null
  br i1 %3688, label %3748, label %3689

3689:                                             ; preds = %3681
  %3690 = icmp eq ptr %3679, null
  br i1 %3690, label %3691, label %3719

3691:                                             ; preds = %3689, %3717
  %3692 = phi ptr [ %3699, %3717 ], [ %3687, %3689 ]
  %3693 = getelementptr inbounds %struct.df_base_ref, ptr %3692, i64 0, i32 3
  %3694 = load ptr, ptr %3693, align 8, !tbaa !17
  %3695 = load ptr, ptr %3694, align 8, !tbaa !189
  br label %3696

3696:                                             ; preds = %3701, %3691
  %3697 = phi ptr [ %3692, %3691 ], [ %3699, %3701 ]
  %3698 = getelementptr inbounds %struct.df_base_ref, ptr %3697, i64 0, i32 4
  %3699 = load ptr, ptr %3698, align 8, !tbaa !17
  %3700 = icmp eq ptr %3699, null
  br i1 %3700, label %3706, label %3701

3701:                                             ; preds = %3696
  %3702 = getelementptr inbounds %struct.df_base_ref, ptr %3699, i64 0, i32 3
  %3703 = load ptr, ptr %3702, align 8, !tbaa !17
  %3704 = load ptr, ptr %3703, align 8, !tbaa !189
  %3705 = icmp eq ptr %3704, %3695
  br i1 %3705, label %3696, label %3706, !llvm.loop !191

3706:                                             ; preds = %3701, %3696
  %3707 = load i32, ptr %3695, align 8
  %3708 = and i32 %3707, 65535
  %3709 = icmp eq i32 %3708, 7
  br i1 %3709, label %3710, label %3717

3710:                                             ; preds = %3706
  %3711 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !6
  %3712 = call ptr @gen_rtx_fmt_e_stat(i32 noundef 25, i32 noundef 0, ptr noundef %3711) #19
  %3713 = getelementptr inbounds %struct.rtx_def, ptr %3695, i64 1
  %3714 = load ptr, ptr %3713, align 8, !tbaa !17
  %3715 = getelementptr inbounds %struct.rtx_def, ptr %3714, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %3712, ptr %3715, align 8, !tbaa !17
  %3716 = call zeroext i8 @df_insn_rescan_debug_internal(ptr noundef nonnull %3695) #19
  br label %3717

3717:                                             ; preds = %3710, %3706
  %3718 = icmp eq ptr %3699, null
  br i1 %3718, label %3748, label %3691, !llvm.loop !192

3719:                                             ; preds = %3689, %3746
  %3720 = phi ptr [ %3727, %3746 ], [ %3687, %3689 ]
  %3721 = getelementptr inbounds %struct.df_base_ref, ptr %3720, i64 0, i32 3
  %3722 = load ptr, ptr %3721, align 8, !tbaa !17
  %3723 = load ptr, ptr %3722, align 8, !tbaa !189
  br label %3724

3724:                                             ; preds = %3729, %3719
  %3725 = phi ptr [ %3720, %3719 ], [ %3727, %3729 ]
  %3726 = getelementptr inbounds %struct.df_base_ref, ptr %3725, i64 0, i32 4
  %3727 = load ptr, ptr %3726, align 8, !tbaa !17
  %3728 = icmp eq ptr %3727, null
  br i1 %3728, label %3734, label %3729

3729:                                             ; preds = %3724
  %3730 = getelementptr inbounds %struct.df_base_ref, ptr %3727, i64 0, i32 3
  %3731 = load ptr, ptr %3730, align 8, !tbaa !17
  %3732 = load ptr, ptr %3731, align 8, !tbaa !189
  %3733 = icmp eq ptr %3732, %3723
  br i1 %3733, label %3724, label %3734, !llvm.loop !191

3734:                                             ; preds = %3724, %3729
  %3735 = load i32, ptr %3723, align 8
  %3736 = and i32 %3735, 65535
  %3737 = icmp eq i32 %3736, 7
  br i1 %3737, label %3738, label %3746

3738:                                             ; preds = %3734
  %3739 = getelementptr inbounds %struct.rtx_def, ptr %3723, i64 1
  %3740 = load ptr, ptr %3739, align 8, !tbaa !17
  %3741 = getelementptr inbounds %struct.rtx_def, ptr %3740, i64 0, i32 1, i32 0, i32 0, i64 1
  %3742 = load ptr, ptr %3741, align 8, !tbaa !17
  %3743 = call ptr @simplify_replace_rtx(ptr noundef %3742, ptr noundef %3653, ptr noundef nonnull %3679) #19
  %3744 = load ptr, ptr %3739, align 8, !tbaa !17
  %3745 = getelementptr inbounds %struct.rtx_def, ptr %3744, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %3743, ptr %3745, align 8, !tbaa !17
  br label %3746

3746:                                             ; preds = %3734, %3738
  %3747 = icmp eq ptr %3727, null
  br i1 %3747, label %3748, label %3719, !llvm.loop !192

3748:                                             ; preds = %3746, %3717, %3681, %3677, %3642, %3645
  %3749 = add nuw nsw i64 %3548, 1
  %3750 = load i32, ptr @max_regno, align 4, !tbaa !21
  %3751 = sext i32 %3750 to i64
  %3752 = icmp slt i64 %3749, %3751
  br i1 %3752, label %3547, label %3753, !llvm.loop !193

3753:                                             ; preds = %3748, %3544
  store i32 1, ptr @reload_completed, align 4, !tbaa !21
  br i1 %272, label %3866, label %3754

3754:                                             ; preds = %3753, %3862
  %3755 = phi ptr [ %3864, %3862 ], [ %0, %3753 ]
  %3756 = load i32, ptr %3755, align 8
  %3757 = and i32 %3756, 65535
  %3758 = add nsw i32 %3757, -7
  %3759 = icmp ult i32 %3758, 4
  br i1 %3759, label %3760, label %3862

3760:                                             ; preds = %3754
  %3761 = icmp eq i32 %3757, 10
  br i1 %3761, label %3762, label %3765

3762:                                             ; preds = %3760
  %3763 = getelementptr inbounds %struct.rtx_def, ptr %3755, i64 1, i32 1, i32 0, i32 0, i64 2
  %3764 = load ptr, ptr %3763, align 8, !tbaa !17
  call fastcc void @replace_pseudos_in(ptr noundef nonnull %3763, i32 noundef 0, ptr noundef %3764)
  br label %3765

3765:                                             ; preds = %3762, %3760
  %3766 = getelementptr inbounds %struct.rtx_def, ptr %3755, i64 1
  %3767 = load ptr, ptr %3766, align 8, !tbaa !17
  %3768 = load i32, ptr %3767, align 8
  %3769 = and i32 %3768, 65535
  %3770 = icmp eq i32 %3769, 24
  br i1 %3770, label %3771, label %3781

3771:                                             ; preds = %3765
  %3772 = load i32, ptr %3755, align 8
  %3773 = and i32 %3772, 16711680
  %3774 = icmp eq i32 %3773, 917504
  br i1 %3774, label %3860, label %3775

3775:                                             ; preds = %3771
  %3776 = call ptr @find_reg_note(ptr noundef nonnull %3755, i32 noundef 4, ptr noundef null) #19
  %3777 = icmp eq ptr %3776, null
  br i1 %3777, label %3778, label %3860

3778:                                             ; preds = %3775
  %3779 = load ptr, ptr %3766, align 8, !tbaa !17
  %3780 = load i32, ptr %3779, align 8
  br label %3781

3781:                                             ; preds = %3778, %3765
  %3782 = phi i32 [ %3780, %3778 ], [ %3768, %3765 ]
  %3783 = phi ptr [ %3779, %3778 ], [ %3767, %3765 ]
  %3784 = and i32 %3782, 65535
  %3785 = icmp eq i32 %3784, 25
  br i1 %3785, label %3786, label %3805

3786:                                             ; preds = %3781
  %3787 = getelementptr inbounds %struct.rtx_def, ptr %3783, i64 0, i32 1
  %3788 = load ptr, ptr %3787, align 8, !tbaa !17
  %3789 = load i32, ptr %3788, align 8
  %3790 = and i32 %3789, 16777215
  %3791 = icmp eq i32 %3790, 65579
  br i1 %3791, label %3792, label %3801

3792:                                             ; preds = %3786
  %3793 = getelementptr inbounds %struct.rtx_def, ptr %3788, i64 0, i32 1
  %3794 = load ptr, ptr %3793, align 8, !tbaa !17
  %3795 = load i32, ptr %3794, align 8
  %3796 = and i32 %3795, 65535
  %3797 = icmp eq i32 %3796, 38
  %3798 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16
  %3799 = icmp eq ptr %3794, %3798
  %3800 = select i1 %3797, i1 true, i1 %3799
  br i1 %3800, label %3804, label %3860

3801:                                             ; preds = %3786
  %3802 = and i32 %3789, -2147418113
  %3803 = icmp eq i32 %3802, -2147483611
  br i1 %3803, label %3804, label %3860

3804:                                             ; preds = %3801, %3792
  call fastcc void @replace_pseudos_in(ptr noundef nonnull %3787, i32 noundef 0, ptr noundef nonnull %3783)
  br label %3805

3805:                                             ; preds = %3781, %3804
  %3806 = load i32, ptr %3755, align 8
  %3807 = and i32 %3806, 65535
  %3808 = icmp eq i32 %3807, 8
  br i1 %3808, label %3809, label %3832

3809:                                             ; preds = %3805
  %3810 = load ptr, ptr %3766, align 8, !tbaa !17
  %3811 = load i32, ptr %3810, align 8
  %3812 = and i32 %3811, 65535
  %3813 = icmp eq i32 %3812, 23
  br i1 %3813, label %3814, label %3832

3814:                                             ; preds = %3809
  %3815 = getelementptr inbounds %struct.rtx_def, ptr %3810, i64 0, i32 1, i32 0, i32 0, i64 1
  %3816 = load ptr, ptr %3815, align 8, !tbaa !17
  %3817 = load i32, ptr %3816, align 8
  %3818 = and i32 %3817, 65535
  %3819 = icmp eq i32 %3818, 37
  br i1 %3819, label %3820, label %3832

3820:                                             ; preds = %3814
  %3821 = getelementptr inbounds %struct.rtx_def, ptr %3810, i64 0, i32 1
  %3822 = load ptr, ptr %3821, align 8, !tbaa !17
  %3823 = load i32, ptr %3822, align 8
  %3824 = and i32 %3823, 65535
  %3825 = icmp eq i32 %3824, 37
  br i1 %3825, label %3826, label %3832

3826:                                             ; preds = %3820
  %3827 = getelementptr i8, ptr %3816, i64 8
  %3828 = load i32, ptr %3827, align 8, !tbaa !17
  %3829 = getelementptr i8, ptr %3822, i64 8
  %3830 = load i32, ptr %3829, align 8, !tbaa !17
  %3831 = icmp eq i32 %3828, %3830
  br i1 %3831, label %3860, label %3832

3832:                                             ; preds = %3826, %3820, %3814, %3809, %3805
  %3833 = getelementptr inbounds %struct.rtx_def, ptr %3755, i64 1, i32 1, i32 0, i32 0, i64 1
  %3834 = load ptr, ptr %3833, align 8, !tbaa !6
  %3835 = icmp eq ptr %3834, null
  br i1 %3835, label %3852, label %3836

3836:                                             ; preds = %3832, %3848
  %3837 = phi ptr [ %3849, %3848 ], [ %3834, %3832 ]
  %3838 = phi ptr [ %3850, %3848 ], [ %3833, %3832 ]
  %3839 = load i32, ptr %3837, align 8
  %3840 = lshr i32 %3839, 16
  %3841 = trunc i32 %3840 to i8
  switch i8 %3841, label %3845 [
    i8 1, label %3842
    i8 6, label %3842
    i8 2, label %3842
  ]

3842:                                             ; preds = %3836, %3836, %3836
  %3843 = getelementptr inbounds %struct.rtx_def, ptr %3837, i64 0, i32 1, i32 0, i32 0, i64 1
  %3844 = load ptr, ptr %3843, align 8, !tbaa !17
  store ptr %3844, ptr %3838, align 8, !tbaa !6
  br label %3848

3845:                                             ; preds = %3836
  %3846 = getelementptr inbounds %struct.rtx_def, ptr %3837, i64 0, i32 1, i32 0, i32 0, i64 1
  %3847 = load ptr, ptr %3846, align 8, !tbaa !6
  br label %3848

3848:                                             ; preds = %3845, %3842
  %3849 = phi ptr [ %3844, %3842 ], [ %3847, %3845 ]
  %3850 = phi ptr [ %3838, %3842 ], [ %3846, %3845 ]
  %3851 = icmp eq ptr %3849, null
  br i1 %3851, label %3852, label %3836, !llvm.loop !194

3852:                                             ; preds = %3848, %3832
  call void @cleanup_subreg_operands(ptr noundef nonnull %3755) #19
  %3853 = load ptr, ptr %3766, align 8, !tbaa !17
  %3854 = call i32 @asm_noperands(ptr noundef %3853) #19
  %3855 = icmp sgt i32 %3854, -1
  br i1 %3855, label %3856, label %3862

3856:                                             ; preds = %3852
  call void @extract_insn(ptr noundef nonnull %3755) #19
  %3857 = call i32 @constrain_operands(i32 noundef 1) #19
  %3858 = icmp eq i32 %3857, 0
  br i1 %3858, label %3859, label %3862

3859:                                             ; preds = %3856
  call void (ptr, ptr, ...) @error_for_asm(ptr noundef nonnull %3755, ptr noundef nonnull @.str.5) #19
  br label %3860

3860:                                             ; preds = %3826, %3771, %3775, %3801, %3792, %3859
  %3861 = call ptr @delete_insn(ptr noundef nonnull %3755) #19
  br label %3862

3862:                                             ; preds = %3860, %3754, %3856, %3852
  %3863 = getelementptr inbounds %struct.rtx_def, ptr %3755, i64 0, i32 1, i32 0, i32 0, i64 2
  %3864 = load ptr, ptr %3863, align 8, !tbaa !17
  %3865 = icmp eq ptr %3864, null
  br i1 %3865, label %3866, label %3754, !llvm.loop !195

3866:                                             ; preds = %3862, %3753
  %3867 = load i32, ptr @flag_stack_check, align 4, !tbaa !17
  %3868 = icmp eq i32 %3867, 1
  br i1 %3868, label %3869, label %3899

3869:                                             ; preds = %3866
  %3870 = call i64 @get_frame_size() #19
  %3871 = add nsw i64 %3870, 16
  br label %3872

3872:                                             ; preds = %3869, %3888
  %3873 = phi i64 [ 0, %3869 ], [ %3890, %3888 ]
  %3874 = phi i64 [ %3871, %3869 ], [ %3889, %3888 ]
  %3875 = trunc i64 %3873 to i32
  %3876 = call zeroext i8 @df_regs_ever_live_p(i32 noundef %3875) #19
  %3877 = icmp eq i8 %3876, 0
  br i1 %3877, label %3888, label %3878

3878:                                             ; preds = %3872
  %3879 = getelementptr inbounds [53 x i8], ptr @fixed_regs, i64 0, i64 %3873
  %3880 = load i8, ptr %3879, align 1, !tbaa !17
  %3881 = icmp eq i8 %3880, 0
  br i1 %3881, label %3882, label %3888

3882:                                             ; preds = %3878
  %3883 = getelementptr inbounds [53 x i8], ptr @call_used_regs, i64 0, i64 %3873
  %3884 = load i8, ptr %3883, align 1, !tbaa !17
  %3885 = icmp eq i8 %3884, 0
  %3886 = add nsw i64 %3874, 4
  %3887 = select i1 %3885, i64 %3874, i64 %3886
  br label %3888

3888:                                             ; preds = %3882, %3872, %3878
  %3889 = phi i64 [ %3874, %3878 ], [ %3874, %3872 ], [ %3887, %3882 ]
  %3890 = add nuw nsw i64 %3873, 1
  %3891 = icmp eq i64 %3890, 53
  br i1 %3891, label %3892, label %3872, !llvm.loop !196

3892:                                             ; preds = %3888
  %3893 = icmp sgt i64 %3889, 4092
  br i1 %3893, label %3894, label %3899

3894:                                             ; preds = %3892
  %3895 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.6) #19
  %3896 = load i1, ptr @reload.verbose_warned, align 4
  br i1 %3896, label %3899, label %3897

3897:                                             ; preds = %3894
  %3898 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.7) #19
  store i1 true, ptr @reload.verbose_warned, align 4
  br label %3899

3899:                                             ; preds = %3892, %3897, %3894, %3866
  %3900 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3901 = icmp eq ptr %3900, null
  br i1 %3901, label %3903, label %3902

3902:                                             ; preds = %3899
  call void @free(ptr noundef nonnull %3900)
  br label %3903

3903:                                             ; preds = %3902, %3899
  %3904 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %3905 = icmp eq ptr %3904, null
  br i1 %3905, label %3907, label %3906

3906:                                             ; preds = %3903
  call void @free(ptr noundef nonnull %3904)
  br label %3907

3907:                                             ; preds = %3906, %3903
  store ptr null, ptr @reg_equiv_constant, align 8, !tbaa !6
  store ptr null, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %3908 = load ptr, ptr @reg_equiv_memory_loc_vec, align 8, !tbaa !6
  %3909 = icmp eq ptr %3908, null
  br i1 %3909, label %3911, label %3910

3910:                                             ; preds = %3907
  call void @ggc_free(ptr noundef nonnull %3908) #19
  br label %3911

3911:                                             ; preds = %3907, %3910
  store ptr null, ptr @reg_equiv_memory_loc_vec, align 8, !tbaa !6
  store ptr null, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3912 = load ptr, ptr @temp_pseudo_reg_arr, align 8, !tbaa !6
  call void @free(ptr noundef %3912)
  %3913 = load ptr, ptr @offsets_known_at, align 8, !tbaa !6
  %3914 = icmp eq ptr %3913, null
  br i1 %3914, label %3916, label %3915

3915:                                             ; preds = %3911
  call void @free(ptr noundef nonnull %3913)
  br label %3916

3916:                                             ; preds = %3915, %3911
  %3917 = load ptr, ptr @offsets_at, align 8, !tbaa !6
  %3918 = icmp eq ptr %3917, null
  br i1 %3918, label %3920, label %3919

3919:                                             ; preds = %3916
  call void @free(ptr noundef nonnull %3917)
  br label %3920

3920:                                             ; preds = %3919, %3916
  %3921 = load ptr, ptr @reg_equiv_alt_mem_list, align 8, !tbaa !6
  br label %3922

3922:                                             ; preds = %3920, %3930
  %3923 = phi ptr [ %3921, %3920 ], [ %3931, %3930 ]
  %3924 = phi i64 [ 0, %3920 ], [ %3932, %3930 ]
  %3925 = getelementptr inbounds ptr, ptr %3923, i64 %3924
  %3926 = load ptr, ptr %3925, align 8, !tbaa !6
  %3927 = icmp eq ptr %3926, null
  br i1 %3927, label %3930, label %3928

3928:                                             ; preds = %3922
  call void @free_EXPR_LIST_list(ptr noundef nonnull %3925) #19
  %3929 = load ptr, ptr @reg_equiv_alt_mem_list, align 8, !tbaa !6
  br label %3930

3930:                                             ; preds = %3922, %3928
  %3931 = phi ptr [ %3923, %3922 ], [ %3929, %3928 ]
  %3932 = add nuw nsw i64 %3924, 1
  %3933 = icmp eq i64 %3932, 53
  br i1 %3933, label %3934, label %3922, !llvm.loop !197

3934:                                             ; preds = %3930
  call void @free(ptr noundef %3931)
  %3935 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  call void @free(ptr noundef %3935)
  store ptr null, ptr @reg_equiv_init, align 8, !tbaa !6
  %3936 = load ptr, ptr @reg_equiv_address, align 8, !tbaa !6
  call void @free(ptr noundef %3936)
  %3937 = load ptr, ptr @reg_max_ref_width, align 8, !tbaa !6
  call void @free(ptr noundef %3937)
  %3938 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  call void @free(ptr noundef %3938)
  %3939 = load ptr, ptr @pseudo_previous_regs, align 8, !tbaa !6
  call void @free(ptr noundef %3939)
  %3940 = load ptr, ptr @pseudo_forbidden_regs, align 8, !tbaa !6
  call void @free(ptr noundef %3940)
  store i64 0, ptr @used_spill_regs, align 8, !tbaa !40
  %3941 = load i32, ptr @n_spills, align 4, !tbaa !21
  %3942 = icmp sgt i32 %3941, 0
  br i1 %3942, label %3943, label %4002

3943:                                             ; preds = %3934
  %3944 = zext i32 %3941 to i64
  %3945 = icmp ult i32 %3941, 16
  br i1 %3945, label %3986, label %3946

3946:                                             ; preds = %3943
  %3947 = and i64 %3944, 4294967280
  br label %3948

3948:                                             ; preds = %3948, %3946
  %3949 = phi i64 [ 0, %3946 ], [ %3978, %3948 ]
  %3950 = phi <4 x i64> [ zeroinitializer, %3946 ], [ %3974, %3948 ]
  %3951 = phi <4 x i64> [ zeroinitializer, %3946 ], [ %3975, %3948 ]
  %3952 = phi <4 x i64> [ zeroinitializer, %3946 ], [ %3976, %3948 ]
  %3953 = phi <4 x i64> [ zeroinitializer, %3946 ], [ %3977, %3948 ]
  %3954 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %3949
  %3955 = load <4 x i16>, ptr %3954, align 16, !tbaa !44
  %3956 = getelementptr inbounds i16, ptr %3954, i64 4
  %3957 = load <4 x i16>, ptr %3956, align 8, !tbaa !44
  %3958 = getelementptr inbounds i16, ptr %3954, i64 8
  %3959 = load <4 x i16>, ptr %3958, align 16, !tbaa !44
  %3960 = getelementptr inbounds i16, ptr %3954, i64 12
  %3961 = load <4 x i16>, ptr %3960, align 8, !tbaa !44
  %3962 = sext <4 x i16> %3955 to <4 x i64>
  %3963 = sext <4 x i16> %3957 to <4 x i64>
  %3964 = sext <4 x i16> %3959 to <4 x i64>
  %3965 = sext <4 x i16> %3961 to <4 x i64>
  %3966 = and <4 x i64> %3962, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %3967 = and <4 x i64> %3963, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %3968 = and <4 x i64> %3964, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %3969 = and <4 x i64> %3965, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %3970 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %3966
  %3971 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %3967
  %3972 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %3968
  %3973 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %3969
  %3974 = or <4 x i64> %3970, %3950
  %3975 = or <4 x i64> %3971, %3951
  %3976 = or <4 x i64> %3972, %3952
  %3977 = or <4 x i64> %3973, %3953
  %3978 = add nuw i64 %3949, 16
  %3979 = icmp eq i64 %3978, %3947
  br i1 %3979, label %3980, label %3948, !llvm.loop !198

3980:                                             ; preds = %3948
  %3981 = or <4 x i64> %3975, %3974
  %3982 = or <4 x i64> %3976, %3981
  %3983 = or <4 x i64> %3977, %3982
  %3984 = call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %3983)
  %3985 = icmp eq i64 %3947, %3944
  br i1 %3985, label %4000, label %3986

3986:                                             ; preds = %3943, %3980
  %3987 = phi i64 [ 0, %3943 ], [ %3947, %3980 ]
  %3988 = phi i64 [ 0, %3943 ], [ %3984, %3980 ]
  br label %3989

3989:                                             ; preds = %3986, %3989
  %3990 = phi i64 [ %3998, %3989 ], [ %3987, %3986 ]
  %3991 = phi i64 [ %3997, %3989 ], [ %3988, %3986 ]
  %3992 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %3990
  %3993 = load i16, ptr %3992, align 2, !tbaa !44
  %3994 = sext i16 %3993 to i64
  %3995 = and i64 %3994, 4294967295
  %3996 = shl nuw i64 1, %3995
  %3997 = or i64 %3996, %3991
  %3998 = add nuw nsw i64 %3990, 1
  %3999 = icmp eq i64 %3998, %3944
  br i1 %3999, label %4000, label %3989, !llvm.loop !199

4000:                                             ; preds = %3989, %3980
  %4001 = phi i64 [ %3984, %3980 ], [ %3997, %3989 ]
  store i64 %4001, ptr @used_spill_regs, align 8, !tbaa !40
  br label %4002

4002:                                             ; preds = %4000, %3934
  %4003 = load ptr, ptr @reload_startobj, align 8, !tbaa !6
  %4004 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 1), align 8, !tbaa !32
  %4005 = ptrtoint ptr %4003 to i64
  %4006 = ptrtoint ptr %4004 to i64
  %4007 = sub i64 %4005, %4006
  store i64 %4007, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 5), align 8, !tbaa !26
  %4008 = icmp sgt i64 %4007, 0
  br i1 %4008, label %4009, label %4016

4009:                                             ; preds = %4002
  %4010 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 4), align 8, !tbaa !28
  %4011 = ptrtoint ptr %4010 to i64
  %4012 = sub i64 %4011, %4006
  %4013 = icmp slt i64 %4007, %4012
  br i1 %4013, label %4014, label %4016

4014:                                             ; preds = %4009
  %4015 = getelementptr inbounds i8, ptr %4004, i64 %4007
  store ptr %4015, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 2), align 8, !tbaa !30
  store ptr %4015, ptr getelementptr inbounds (%struct.obstack, ptr @reload_obstack, i64 0, i32 3), align 8, !tbaa !29
  br label %4018

4016:                                             ; preds = %4009, %4002
  %4017 = getelementptr inbounds i8, ptr %4004, i64 %4007
  call void @obstack_free(ptr noundef nonnull @reload_obstack, ptr noundef %4017) #19
  br label %4018

4018:                                             ; preds = %4016, %4014
  store ptr null, ptr @unused_insn_chains, align 8, !tbaa !6
  call void @fixup_abnormal_edges()
  call void @unshare_all_rtl_again(ptr noundef %0) #19
  %4019 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1, !tbaa !121
  %4020 = icmp eq i8 %4019, 0
  br i1 %4020, label %4021, label %4024

4021:                                             ; preds = %4018
  %4022 = load ptr, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 1, i32 9), align 8, !tbaa !200
  %4023 = getelementptr inbounds i8, ptr %4022, i64 6
  store i8 8, ptr %4023, align 1, !tbaa !17
  br label %4024

4024:                                             ; preds = %4021, %4018
  %4025 = load ptr, ptr @substitute_stack, align 8, !tbaa !6
  %4026 = icmp eq ptr %4025, null
  br i1 %4026, label %4028, label %4027

4027:                                             ; preds = %4024
  call void @free(ptr noundef nonnull %4025)
  br label %4028

4028:                                             ; preds = %4027, %4024
  store ptr null, ptr @substitute_stack, align 8, !tbaa !6
  %4029 = load i1, ptr @failure, align 4
  %4030 = zext i1 %4029 to i32
  ret i32 %4030
}

declare void @init_recog() local_unnamed_addr #3

declare ptr @emit_note(i32 noundef) local_unnamed_addr #3

declare i32 @get_max_uid() local_unnamed_addr #3

declare void @clear_secondary_mem() local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #11

declare void @init_save_areas() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @mark_home_live(i32 noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds i16, ptr %2, i64 %3
  %5 = load i16, ptr %4, align 2, !tbaa !44
  %6 = icmp sgt i16 %5, -1
  br i1 %6, label %7, label %26

7:                                                ; preds = %1
  %8 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %9 = getelementptr inbounds ptr, ptr %8, i64 %3
  %10 = load ptr, ptr %9, align 8, !tbaa !6
  %11 = load i32, ptr %10, align 8
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  %14 = zext i16 %5 to i32
  %15 = zext i16 %5 to i64
  %16 = zext i32 %13 to i64
  %17 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %15, i64 %16
  %18 = load i8, ptr %17, align 1, !tbaa !17
  %19 = zext i8 %18 to i32
  %20 = add nuw nsw i32 %19, %14
  %21 = icmp eq i8 %18, 0
  br i1 %21, label %26, label %22

22:                                               ; preds = %7, %22
  %23 = phi i32 [ %24, %22 ], [ %14, %7 ]
  %24 = add nuw nsw i32 %23, 1
  tail call void @df_set_regs_ever_live(i32 noundef %23, i8 noundef zeroext 1) #19
  %25 = icmp ult i32 %24, %20
  br i1 %25, label %22, label %26, !llvm.loop !50

26:                                               ; preds = %22, %7, %1
  ret void
}

declare void @df_set_regs_ever_live(i32 noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @xcalloc(i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #12

declare ptr @single_set_2(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @scan_paradoxical_subregs(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = load i32, ptr %0, align 8
  %3 = trunc i32 %2 to i16
  switch i16 %3, label %49 [
    i16 37, label %85
    i16 30, label %85
    i16 35, label %85
    i16 45, label %85
    i16 44, label %85
    i16 32, label %85
    i16 31, label %85
    i16 33, label %85
    i16 46, label %85
    i16 36, label %85
    i16 24, label %85
    i16 25, label %85
    i16 39, label %4
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 37
  br i1 %9, label %10, label %85

10:                                               ; preds = %4
  %11 = lshr i32 %2, 16
  %12 = and i32 %11, 255
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %13
  %15 = load i8, ptr %14, align 1, !tbaa !17
  %16 = zext i8 %15 to i32
  %17 = load ptr, ptr @reg_max_ref_width, align 8, !tbaa !6
  %18 = getelementptr i8, ptr %6, i64 8
  %19 = load i32, ptr %18, align 8, !tbaa !17
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i32, ptr %17, i64 %20
  %22 = load i32, ptr %21, align 4, !tbaa !21
  %23 = icmp ult i32 %22, %16
  br i1 %23, label %24, label %85

24:                                               ; preds = %10
  store i32 %16, ptr %21, align 4, !tbaa !21
  %25 = load ptr, ptr %5, align 8, !tbaa !17
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load i32, ptr %26, align 8, !tbaa !17
  %28 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %29 = sext i32 %27 to i64
  %30 = getelementptr inbounds i16, ptr %28, i64 %29
  %31 = load i16, ptr %30, align 2, !tbaa !44
  %32 = icmp slt i16 %31, 0
  br i1 %32, label %85, label %33

33:                                               ; preds = %24
  %34 = load i32, ptr %0, align 8
  %35 = lshr i32 %34, 16
  %36 = and i32 %35, 255
  %37 = zext i16 %31 to i32
  %38 = zext i16 %31 to i64
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %38, i64 %39
  %41 = load i8, ptr %40, align 1, !tbaa !17
  %42 = zext i8 %41 to i32
  %43 = add nuw nsw i32 %42, %37
  %44 = icmp eq i8 %41, 0
  br i1 %44, label %85, label %45

45:                                               ; preds = %33, %45
  %46 = phi i32 [ %47, %45 ], [ %37, %33 ]
  %47 = add nuw nsw i32 %46, 1
  tail call void @df_set_regs_ever_live(i32 noundef %46, i8 noundef zeroext 1) #19
  %48 = icmp ult i32 %47, %43
  br i1 %48, label %45, label %85, !llvm.loop !50

49:                                               ; preds = %1
  %50 = and i32 %2, 65535
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !6
  %54 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %51
  %55 = load i8, ptr %54, align 1, !tbaa !17
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %85, label %57

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %59 = zext i8 %55 to i64
  br label %60

60:                                               ; preds = %57, %83
  %61 = phi i64 [ %59, %57 ], [ %62, %83 ]
  %62 = add nsw i64 %61, -1
  %63 = getelementptr inbounds i8, ptr %53, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !17
  switch i8 %64, label %83 [
    i8 101, label %65
    i8 69, label %68
  ]

65:                                               ; preds = %60
  %66 = getelementptr inbounds [1 x %union.rtunion_def], ptr %58, i64 0, i64 %62
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  tail call fastcc void @scan_paradoxical_subregs(ptr noundef %67)
  br label %83

68:                                               ; preds = %60
  %69 = getelementptr inbounds [1 x %union.rtunion_def], ptr %58, i64 0, i64 %62
  %70 = load ptr, ptr %69, align 8, !tbaa !17
  %71 = load i32, ptr %70, align 8, !tbaa !112
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %83

73:                                               ; preds = %68
  %74 = zext i32 %71 to i64
  br label %75

75:                                               ; preds = %73, %75
  %76 = phi i64 [ %74, %73 ], [ %77, %75 ]
  %77 = add nsw i64 %76, -1
  %78 = load ptr, ptr %69, align 8, !tbaa !17
  %79 = and i64 %77, 4294967295
  %80 = getelementptr inbounds %struct.rtvec_def, ptr %78, i64 0, i32 1, i64 %79
  %81 = load ptr, ptr %80, align 8, !tbaa !6
  tail call fastcc void @scan_paradoxical_subregs(ptr noundef %81)
  %82 = icmp ugt i64 %76, 1
  br i1 %82, label %75, label %83, !llvm.loop !201

83:                                               ; preds = %75, %68, %60, %65
  %84 = icmp sgt i64 %61, 1
  br i1 %84, label %60, label %85, !llvm.loop !202

85:                                               ; preds = %45, %83, %49, %33, %24, %4, %10, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  ret void
}

declare ptr @find_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local i32 @function_invariant_p(ptr noundef readonly %0) local_unnamed_addr #13 {
  %2 = load i32, ptr %0, align 8
  %3 = and i32 %2, 65535
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = icmp eq i32 %6, 9
  br i1 %7, label %32, label %8

8:                                                ; preds = %1
  %9 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 3), align 8, !tbaa !6
  %10 = icmp eq ptr %9, %0
  br i1 %10, label %32, label %11

11:                                               ; preds = %8
  %12 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 5), align 8, !tbaa !6
  %13 = icmp eq ptr %12, %0
  br i1 %13, label %32, label %14

14:                                               ; preds = %11
  %15 = icmp eq i32 %3, 49
  br i1 %15, label %16, label %31

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = icmp eq ptr %18, %9
  %20 = icmp eq ptr %18, %12
  %21 = or i1 %19, %20
  br i1 %21, label %22, label %31

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load i32, ptr %24, align 8
  %26 = and i32 %25, 65535
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %27
  %29 = load i32, ptr %28, align 4, !tbaa !17
  %30 = icmp eq i32 %29, 9
  br i1 %30, label %32, label %31

31:                                               ; preds = %16, %22, %14
  br label %32

32:                                               ; preds = %22, %8, %11, %1, %31
  %33 = phi i32 [ 0, %31 ], [ 1, %1 ], [ 1, %11 ], [ 1, %8 ], [ 1, %22 ]
  ret i32 %33
}

declare zeroext i8 @legitimate_pic_operand_p(ptr noundef) local_unnamed_addr #3

declare i32 @memory_operand(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @copy_rtx(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @legitimate_constant_p(ptr noundef) local_unnamed_addr #3

declare ptr @force_const_mem(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

declare void @print_inline_rtx(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @get_first_label_num() local_unnamed_addr #3

declare i32 @max_label_num() local_unnamed_addr #3

declare void @ira_sort_regnos_for_alter_reg(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @alter_reg(i32 noundef %0, i32 noundef %1, i8 noundef zeroext %2) unnamed_addr #9 {
  %4 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds ptr, ptr %4, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !6
  %8 = icmp eq ptr %7, null
  br i1 %8, label %166, label %9

9:                                                ; preds = %3
  %10 = load i32, ptr %7, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 37
  br i1 %12, label %13, label %166

13:                                               ; preds = %9
  %14 = getelementptr i8, ptr %7, i64 8
  %15 = load i32, ptr %14, align 8, !tbaa !17
  %16 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %17 = getelementptr inbounds i16, ptr %16, i64 %5
  %18 = load i16, ptr %17, align 2, !tbaa !44
  %19 = sext i16 %18 to i32
  %20 = icmp slt i16 %18, 0
  %21 = select i1 %20, i32 %0, i32 %19
  tail call void @df_ref_change_reg_with_loc(i32 noundef %15, i32 noundef %21, ptr noundef nonnull %7) #19
  %22 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %23 = getelementptr inbounds i16, ptr %22, i64 %5
  %24 = load i16, ptr %23, align 2, !tbaa !44
  %25 = sext i16 %24 to i32
  %26 = icmp slt i16 %24, 0
  %27 = select i1 %26, i32 %0, i32 %25
  %28 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %29 = getelementptr inbounds ptr, ptr %28, i64 %5
  %30 = load ptr, ptr %29, align 8, !tbaa !6
  %31 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1
  store i32 %27, ptr %31, align 8, !tbaa !17
  %32 = load i16, ptr %23, align 2, !tbaa !44
  %33 = icmp slt i16 %32, 0
  br i1 %33, label %34, label %166

34:                                               ; preds = %13
  %35 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !6
  %36 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %35, i64 %5, i32 1
  %37 = load i32, ptr %36, align 4, !tbaa !203
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %166

39:                                               ; preds = %34
  %40 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %41 = getelementptr inbounds ptr, ptr %40, i64 %5
  %42 = load ptr, ptr %41, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %166

44:                                               ; preds = %39
  %45 = load ptr, ptr @reg_equiv_invariant, align 8, !tbaa !6
  %46 = getelementptr inbounds ptr, ptr %45, i64 %5
  %47 = load ptr, ptr %46, align 8, !tbaa !6
  %48 = icmp eq ptr %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %51 = getelementptr inbounds ptr, ptr %50, i64 %5
  %52 = load ptr, ptr %51, align 8, !tbaa !6
  %53 = icmp eq ptr %52, null
  br i1 %53, label %54, label %166

54:                                               ; preds = %49, %44
  %55 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %56 = getelementptr inbounds ptr, ptr %55, i64 %5
  %57 = load ptr, ptr %56, align 8, !tbaa !6
  %58 = icmp eq ptr %57, null
  br i1 %58, label %59, label %166

59:                                               ; preds = %54
  %60 = load ptr, ptr %29, align 8, !tbaa !6
  %61 = load i32, ptr %60, align 8
  %62 = lshr i32 %61, 16
  %63 = and i32 %62, 255
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %64
  %66 = load i8, ptr %65, align 1, !tbaa !17
  %67 = zext i8 %66 to i32
  %68 = tail call i32 @get_mode_alignment(i32 noundef %63) #19
  %69 = load ptr, ptr @reg_max_ref_width, align 8, !tbaa !6
  %70 = getelementptr inbounds i32, ptr %69, i64 %5
  %71 = load i32, ptr %70, align 4, !tbaa !21
  %72 = tail call i32 @llvm.umax.i32(i32 %71, i32 %67)
  %73 = shl i32 %71, 3
  %74 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %82, label %76

76:                                               ; preds = %59
  %77 = tail call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %0) #19
  %78 = icmp eq i8 %2, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  %80 = tail call ptr @ira_reuse_stack_slot(i32 noundef %0, i32 noundef %67, i32 noundef %72) #19
  %81 = icmp eq ptr %80, null
  br i1 %81, label %82, label %155

82:                                               ; preds = %59, %76, %79
  %83 = icmp eq i32 %1, -1
  br i1 %83, label %89, label %84

84:                                               ; preds = %82
  %85 = icmp eq i8 %2, 0
  %86 = load i8, ptr @ira_conflicts_p, align 1
  %87 = icmp ne i8 %86, 0
  %88 = select i1 %85, i1 %87, i1 false
  br i1 %88, label %89, label %101

89:                                               ; preds = %84, %82
  %90 = zext i32 %72 to i64
  %91 = icmp ugt i32 %73, %68
  %92 = icmp ugt i32 %71, %67
  %93 = select i1 %91, i1 true, i1 %92
  %94 = sext i1 %93 to i32
  %95 = tail call ptr @assign_stack_local(i32 noundef %63, i64 noundef %90, i32 noundef %94) #19
  %96 = icmp eq i8 %2, 0
  %97 = load i8, ptr @ira_conflicts_p, align 1
  %98 = icmp ne i8 %97, 0
  %99 = select i1 %96, i1 %98, i1 false
  br i1 %99, label %100, label %155

100:                                              ; preds = %89
  tail call void @ira_mark_new_stack_slot(ptr noundef %95, i32 noundef %0, i32 noundef %72) #19
  br label %155

101:                                              ; preds = %84
  %102 = sext i32 %1 to i64
  %103 = getelementptr inbounds [53 x ptr], ptr @spill_stack_slot, i64 0, i64 %102
  %104 = load ptr, ptr %103, align 8, !tbaa !6
  %105 = icmp eq ptr %104, null
  br i1 %105, label %144, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds [53 x i32], ptr @spill_stack_slot_width, i64 0, i64 %102
  %108 = load i32, ptr %107, align 4, !tbaa !21
  %109 = icmp ult i32 %108, %72
  %110 = load i32, ptr %104, align 8
  %111 = lshr i32 %110, 16
  %112 = and i32 %111, 255
  %113 = zext i32 %112 to i64
  br i1 %109, label %128, label %114

114:                                              ; preds = %106
  %115 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %113
  %116 = load i8, ptr %115, align 1, !tbaa !17
  %117 = icmp ult i8 %116, %66
  br i1 %117, label %128, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1, i32 0, i32 0, i64 1
  %120 = load ptr, ptr %119, align 8, !tbaa !17
  %121 = icmp eq ptr %120, null
  br i1 %121, label %125, label %122

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.mem_attrs, ptr %120, i64 0, i32 4
  %124 = load i32, ptr %123, align 4, !tbaa !205
  br label %125

125:                                              ; preds = %118, %122
  %126 = phi i32 [ %124, %122 ], [ 8, %118 ]
  %127 = icmp ult i32 %126, %73
  br i1 %127, label %128, label %155

128:                                              ; preds = %106, %125, %114
  %129 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %113
  %130 = load i8, ptr %129, align 1, !tbaa !17
  %131 = icmp ugt i8 %130, %66
  %132 = select i1 %131, i32 %112, i32 %63
  %133 = tail call i32 @llvm.umax.i32(i32 %108, i32 %72)
  %134 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1, i32 0, i32 0, i64 1
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  %136 = icmp eq ptr %135, null
  br i1 %136, label %137, label %140

137:                                              ; preds = %128
  %138 = icmp eq i32 %73, 0
  %139 = select i1 %138, i32 8, i32 %73
  br label %144

140:                                              ; preds = %128
  %141 = getelementptr inbounds %struct.mem_attrs, ptr %135, i64 0, i32 4
  %142 = load i32, ptr %141, align 4, !tbaa !205
  %143 = tail call i32 @llvm.umax.i32(i32 %142, i32 %73)
  br label %144

144:                                              ; preds = %140, %137, %101
  %145 = phi i32 [ %73, %101 ], [ %139, %137 ], [ %143, %140 ]
  %146 = phi i32 [ %72, %101 ], [ %133, %137 ], [ %133, %140 ]
  %147 = phi i32 [ %63, %101 ], [ %132, %137 ], [ %132, %140 ]
  %148 = zext i32 %146 to i64
  %149 = icmp ugt i32 %145, %68
  %150 = icmp ugt i32 %146, %67
  %151 = select i1 %149, i1 true, i1 %150
  %152 = sext i1 %151 to i32
  %153 = tail call ptr @assign_stack_local(i32 noundef %147, i64 noundef %148, i32 noundef %152) #19
  store ptr %153, ptr %103, align 8, !tbaa !6
  %154 = getelementptr inbounds [53 x i32], ptr @spill_stack_slot_width, i64 0, i64 %102
  store i32 %146, ptr %154, align 4, !tbaa !21
  br label %155

155:                                              ; preds = %125, %89, %100, %144, %79
  %156 = phi ptr [ %80, %79 ], [ %153, %144 ], [ %95, %100 ], [ %95, %89 ], [ %104, %125 ]
  %157 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %158 = getelementptr inbounds ptr, ptr %157, i64 %5
  %159 = load ptr, ptr %158, align 8, !tbaa !6
  %160 = load i32, ptr %159, align 8
  %161 = lshr i32 %160, 16
  %162 = and i32 %161, 255
  %163 = tail call ptr @adjust_address_1(ptr noundef %156, i32 noundef %162, i64 noundef 0, i32 noundef 0, i32 noundef 1) #19
  tail call void @set_mem_attrs_for_spill(ptr noundef %163) #19
  %164 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %165 = getelementptr inbounds ptr, ptr %164, i64 %5
  store ptr %163, ptr %165, align 8, !tbaa !6
  br label %166

166:                                              ; preds = %9, %3, %155, %54, %49, %39, %34, %13
  ret void
}

declare void @note_stores(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal void @mark_not_eliminable(ptr noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture readnone %2) #14 {
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 39
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  br label %10

10:                                               ; preds = %7, %3
  %11 = phi ptr [ %9, %7 ], [ %0, %3 ]
  %12 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16, !tbaa !6
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %140, label %14

14:                                               ; preds = %10
  %15 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %16 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %17 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1, i32 0, i32 0, i64 1
  %18 = getelementptr inbounds %struct.elim_table, ptr %15, i64 0, i32 3
  %19 = load i32, ptr %18, align 8, !tbaa !103
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %47, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.elim_table, ptr %15, i64 0, i32 9
  %23 = load ptr, ptr %22, align 8, !tbaa !106
  %24 = icmp eq ptr %11, %23
  br i1 %24, label %25, label %47

25:                                               ; preds = %21
  %26 = load i32, ptr %1, align 8
  %27 = and i32 %26, 65535
  %28 = icmp eq i32 %27, 23
  br i1 %28, label %29, label %44

29:                                               ; preds = %25
  %30 = load ptr, ptr %17, align 8, !tbaa !17
  %31 = load i32, ptr %30, align 8
  %32 = and i32 %31, 65535
  %33 = icmp eq i32 %32, 49
  br i1 %33, label %34, label %44

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = icmp eq ptr %36, %11
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1, i32 0, i32 0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = load i32, ptr %40, align 8
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %42, 30
  br i1 %43, label %47, label %44

44:                                               ; preds = %38, %34, %29, %25
  store i32 0, ptr %18, align 8, !tbaa !103
  %45 = getelementptr inbounds %struct.elim_table, ptr %15, i64 0, i32 4
  store i32 0, ptr %45, align 4, !tbaa !102
  %46 = add nsw i32 %16, -1
  store i32 %46, ptr @num_eliminable, align 4, !tbaa !21
  br label %47

47:                                               ; preds = %14, %21, %38, %44
  %48 = phi i32 [ %16, %14 ], [ %16, %21 ], [ %16, %38 ], [ %46, %44 ]
  %49 = getelementptr inbounds %struct.elim_table, ptr %15, i64 1, i32 3
  %50 = load i32, ptr %49, align 8, !tbaa !103
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %78, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.elim_table, ptr %15, i64 1, i32 9
  %54 = load ptr, ptr %53, align 8, !tbaa !106
  %55 = icmp eq ptr %11, %54
  br i1 %55, label %56, label %78

56:                                               ; preds = %52
  %57 = load i32, ptr %1, align 8
  %58 = and i32 %57, 65535
  %59 = icmp eq i32 %58, 23
  br i1 %59, label %60, label %75

60:                                               ; preds = %56
  %61 = load ptr, ptr %17, align 8, !tbaa !17
  %62 = load i32, ptr %61, align 8
  %63 = and i32 %62, 65535
  %64 = icmp eq i32 %63, 49
  br i1 %64, label %65, label %75

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.rtx_def, ptr %61, i64 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  %68 = icmp eq ptr %67, %11
  br i1 %68, label %69, label %75

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.rtx_def, ptr %61, i64 0, i32 1, i32 0, i32 0, i64 1
  %71 = load ptr, ptr %70, align 8, !tbaa !17
  %72 = load i32, ptr %71, align 8
  %73 = and i32 %72, 65535
  %74 = icmp eq i32 %73, 30
  br i1 %74, label %78, label %75

75:                                               ; preds = %69, %65, %60, %56
  store i32 0, ptr %49, align 8, !tbaa !103
  %76 = getelementptr inbounds %struct.elim_table, ptr %15, i64 1, i32 4
  store i32 0, ptr %76, align 4, !tbaa !102
  %77 = add nsw i32 %48, -1
  store i32 %77, ptr @num_eliminable, align 4, !tbaa !21
  br label %78

78:                                               ; preds = %75, %69, %52, %47
  %79 = phi i32 [ %48, %47 ], [ %48, %52 ], [ %48, %69 ], [ %77, %75 ]
  %80 = getelementptr inbounds %struct.elim_table, ptr %15, i64 2, i32 3
  %81 = load i32, ptr %80, align 8, !tbaa !103
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %109, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.elim_table, ptr %15, i64 2, i32 9
  %85 = load ptr, ptr %84, align 8, !tbaa !106
  %86 = icmp eq ptr %11, %85
  br i1 %86, label %87, label %109

87:                                               ; preds = %83
  %88 = load i32, ptr %1, align 8
  %89 = and i32 %88, 65535
  %90 = icmp eq i32 %89, 23
  br i1 %90, label %91, label %106

91:                                               ; preds = %87
  %92 = load ptr, ptr %17, align 8, !tbaa !17
  %93 = load i32, ptr %92, align 8
  %94 = and i32 %93, 65535
  %95 = icmp eq i32 %94, 49
  br i1 %95, label %96, label %106

96:                                               ; preds = %91
  %97 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  %99 = icmp eq ptr %98, %11
  br i1 %99, label %100, label %106

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.rtx_def, ptr %92, i64 0, i32 1, i32 0, i32 0, i64 1
  %102 = load ptr, ptr %101, align 8, !tbaa !17
  %103 = load i32, ptr %102, align 8
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, 30
  br i1 %105, label %109, label %106

106:                                              ; preds = %100, %96, %91, %87
  store i32 0, ptr %80, align 8, !tbaa !103
  %107 = getelementptr inbounds %struct.elim_table, ptr %15, i64 2, i32 4
  store i32 0, ptr %107, align 4, !tbaa !102
  %108 = add nsw i32 %79, -1
  store i32 %108, ptr @num_eliminable, align 4, !tbaa !21
  br label %109

109:                                              ; preds = %106, %100, %83, %78
  %110 = phi i32 [ %79, %78 ], [ %79, %83 ], [ %79, %100 ], [ %108, %106 ]
  %111 = getelementptr inbounds %struct.elim_table, ptr %15, i64 3, i32 3
  %112 = load i32, ptr %111, align 8, !tbaa !103
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %140, label %114

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.elim_table, ptr %15, i64 3, i32 9
  %116 = load ptr, ptr %115, align 8, !tbaa !106
  %117 = icmp eq ptr %11, %116
  br i1 %117, label %118, label %140

118:                                              ; preds = %114
  %119 = load i32, ptr %1, align 8
  %120 = and i32 %119, 65535
  %121 = icmp eq i32 %120, 23
  br i1 %121, label %122, label %137

122:                                              ; preds = %118
  %123 = load ptr, ptr %17, align 8, !tbaa !17
  %124 = load i32, ptr %123, align 8
  %125 = and i32 %124, 65535
  %126 = icmp eq i32 %125, 49
  br i1 %126, label %127, label %137

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.rtx_def, ptr %123, i64 0, i32 1
  %129 = load ptr, ptr %128, align 8, !tbaa !17
  %130 = icmp eq ptr %129, %11
  br i1 %130, label %131, label %137

131:                                              ; preds = %127
  %132 = getelementptr inbounds %struct.rtx_def, ptr %123, i64 0, i32 1, i32 0, i32 0, i64 1
  %133 = load ptr, ptr %132, align 8, !tbaa !17
  %134 = load i32, ptr %133, align 8
  %135 = and i32 %134, 65535
  %136 = icmp eq i32 %135, 30
  br i1 %136, label %140, label %137

137:                                              ; preds = %131, %127, %122, %118
  store i32 0, ptr %111, align 8, !tbaa !103
  %138 = getelementptr inbounds %struct.elim_table, ptr %15, i64 3, i32 4
  store i32 0, ptr %138, align 4, !tbaa !102
  %139 = add nsw i32 %110, -1
  store i32 %139, ptr @num_eliminable, align 4, !tbaa !21
  br label %140

140:                                              ; preds = %109, %114, %131, %137, %10
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @finish_spills(i32 noundef %0) unnamed_addr #9 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i32 0, ptr @n_spills, align 4, !tbaa !21
  %4 = load i64, ptr @used_spill_regs, align 8, !tbaa !40
  br label %5

5:                                                ; preds = %1, %32
  %6 = phi i64 [ %4, %1 ], [ %33, %32 ]
  %7 = phi i64 [ 0, %1 ], [ %35, %32 ]
  %8 = phi i32 [ 0, %1 ], [ %34, %32 ]
  %9 = trunc i64 %7 to i32
  %10 = shl nuw nsw i64 1, %7
  %11 = and i64 %6, %10
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %30, label %13

13:                                               ; preds = %5
  %14 = load i32, ptr @n_spills, align 4, !tbaa !21
  %15 = trunc i32 %14 to i16
  %16 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %7
  store i16 %15, ptr %16, align 2, !tbaa !44
  %17 = trunc i64 %7 to i16
  %18 = add nsw i32 %14, 1
  store i32 %18, ptr @n_spills, align 4, !tbaa !21
  %19 = sext i32 %14 to i64
  %20 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %19
  store i16 %17, ptr %20, align 2, !tbaa !44
  %21 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %13
  %24 = tail call zeroext i8 @df_regs_ever_live_p(i32 noundef %9) #19
  %25 = icmp eq i8 %24, 0
  %26 = select i1 %25, i32 1, i32 %8
  br label %27

27:                                               ; preds = %23, %13
  %28 = phi i32 [ %8, %13 ], [ %26, %23 ]
  tail call void @df_set_regs_ever_live(i32 noundef %9, i8 noundef zeroext 1) #19
  %29 = load i64, ptr @used_spill_regs, align 8, !tbaa !40
  br label %32

30:                                               ; preds = %5
  %31 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %7
  store i16 -1, ptr %31, align 2, !tbaa !44
  br label %32

32:                                               ; preds = %27, %30
  %33 = phi i64 [ %29, %27 ], [ %6, %30 ]
  %34 = phi i32 [ %28, %27 ], [ %8, %30 ]
  %35 = add nuw nsw i64 %7, 1
  %36 = icmp eq i64 %35, 53
  br i1 %36, label %37, label %5, !llvm.loop !206

37:                                               ; preds = %32
  %38 = load ptr, ptr @spilled_pseudos, align 8, !tbaa !37
  %39 = icmp eq ptr %38, null
  %40 = select i1 %39, ptr @bitmap_zero_bits, ptr %38
  %41 = getelementptr inbounds %struct.bitmap_element_def, ptr %40, i64 0, i32 2
  %42 = load i32, ptr %41, align 8, !tbaa !38
  %43 = icmp eq i32 %42, 0
  %44 = shl i32 %42, 7
  %45 = select i1 %43, i32 53, i32 %44
  %46 = getelementptr inbounds %struct.bitmap_element_def, ptr %40, i64 0, i32 3, i64 0
  %47 = load i64, ptr %46, align 8, !tbaa !40
  %48 = and i32 %45, 53
  %49 = zext i32 %48 to i64
  %50 = lshr i64 %47, %49
  %51 = icmp eq i64 %50, 0
  %52 = zext i1 %51 to i32
  %53 = add nuw nsw i32 %45, %52
  br label %54

54:                                               ; preds = %132, %37
  %55 = phi i64 [ %50, %37 ], [ %134, %132 ]
  %56 = phi i32 [ %53, %37 ], [ %135, %132 ]
  %57 = phi i32 [ 0, %37 ], [ %64, %132 ]
  %58 = phi ptr [ %40, %37 ], [ %65, %132 ]
  %59 = phi i32 [ %34, %37 ], [ %133, %132 ]
  %60 = icmp eq i64 %55, 0
  br i1 %60, label %75, label %61

61:                                               ; preds = %84, %54
  %62 = phi i64 [ %55, %54 ], [ %89, %84 ]
  %63 = phi i32 [ %56, %54 ], [ %85, %84 ]
  %64 = phi i32 [ %57, %54 ], [ %86, %84 ]
  %65 = phi ptr [ %58, %54 ], [ %81, %84 ]
  %66 = and i64 %62, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %102

68:                                               ; preds = %61, %68
  %69 = phi i32 [ %72, %68 ], [ %63, %61 ]
  %70 = phi i64 [ %71, %68 ], [ %62, %61 ]
  %71 = lshr i64 %70, 1
  %72 = add i32 %69, 1
  %73 = and i64 %70, 2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %68, label %102, !llvm.loop !41

75:                                               ; preds = %54
  %76 = add i32 %56, 63
  %77 = and i32 %76, -64
  %78 = add i32 %57, 1
  br label %79

79:                                               ; preds = %98, %75
  %80 = phi i32 [ %77, %75 ], [ %101, %98 ]
  %81 = phi ptr [ %58, %75 ], [ %96, %98 ]
  %82 = phi i32 [ %78, %75 ], [ 0, %98 ]
  %83 = icmp eq i32 %82, 2
  br i1 %83, label %95, label %84

84:                                               ; preds = %79, %91
  %85 = phi i32 [ %92, %91 ], [ %80, %79 ]
  %86 = phi i32 [ %93, %91 ], [ %82, %79 ]
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.bitmap_element_def, ptr %81, i64 0, i32 3, i64 %87
  %89 = load i64, ptr %88, align 8, !tbaa !40
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %61

91:                                               ; preds = %84
  %92 = add i32 %85, 64
  %93 = add i32 %86, 1
  %94 = icmp eq i32 %93, 2
  br i1 %94, label %95, label %84, !llvm.loop !42

95:                                               ; preds = %91, %79
  %96 = load ptr, ptr %81, align 8, !tbaa !43
  %97 = icmp eq ptr %96, null
  br i1 %97, label %136, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.bitmap_element_def, ptr %96, i64 0, i32 2
  %100 = load i32, ptr %99, align 8, !tbaa !38
  %101 = shl i32 %100, 7
  br label %79

102:                                              ; preds = %68, %61
  %103 = phi i64 [ %62, %61 ], [ %71, %68 ]
  %104 = phi i32 [ %63, %61 ], [ %72, %68 ]
  %105 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %106 = icmp eq i8 %105, 0
  %107 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %108 = zext i32 %104 to i64
  %109 = getelementptr inbounds i16, ptr %107, i64 %108
  %110 = load i16, ptr %109, align 2, !tbaa !44
  %111 = icmp sgt i16 %110, -1
  br i1 %106, label %113, label %112

112:                                              ; preds = %102
  br i1 %111, label %118, label %132

113:                                              ; preds = %102
  br i1 %111, label %118, label %114

114:                                              ; preds = %113
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3991, ptr noundef nonnull @.str.2) #19
  %115 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %116 = getelementptr inbounds i16, ptr %115, i64 %108
  %117 = load i16, ptr %116, align 2, !tbaa !44
  br label %118

118:                                              ; preds = %112, %113, %114
  %119 = phi i16 [ %110, %113 ], [ %117, %114 ], [ %110, %112 ]
  %120 = phi ptr [ %107, %113 ], [ %115, %114 ], [ %107, %112 ]
  %121 = getelementptr inbounds i16, ptr %120, i64 %108
  %122 = sext i16 %119 to i64
  %123 = and i64 %122, 4294967295
  %124 = shl nuw i64 1, %123
  %125 = load ptr, ptr @pseudo_previous_regs, align 8, !tbaa !6
  %126 = getelementptr inbounds i64, ptr %125, i64 %108
  %127 = load i64, ptr %126, align 8, !tbaa !40
  %128 = or i64 %124, %127
  store i64 %128, ptr %126, align 8, !tbaa !40
  store i16 -1, ptr %121, align 2, !tbaa !44
  %129 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %118
  tail call void @ira_mark_allocation_change(i32 noundef %104) #19
  br label %132

132:                                              ; preds = %118, %131, %112
  %133 = phi i32 [ %59, %112 ], [ 1, %131 ], [ 1, %118 ]
  %134 = lshr i64 %103, 1
  %135 = add i32 %104, 1
  br label %54, !llvm.loop !207

136:                                              ; preds = %95
  %137 = icmp ne i32 %0, 0
  %138 = load i8, ptr @ira_conflicts_p, align 1
  %139 = icmp ne i8 %138, 0
  %140 = select i1 %137, i1 %139, i1 false
  br i1 %140, label %141, label %352

141:                                              ; preds = %136
  %142 = load ptr, ptr @pseudo_forbidden_regs, align 8, !tbaa !6
  %143 = load i32, ptr @max_regno, align 4, !tbaa !21
  %144 = sext i32 %143 to i64
  %145 = shl nsw i64 %144, 3
  tail call void @llvm.memset.p0.i64(ptr align 8 %142, i8 0, i64 %145, i1 false)
  %146 = load ptr, ptr @insns_need_reload, align 8, !tbaa !6
  %147 = icmp eq ptr %146, null
  br i1 %147, label %148, label %154

148:                                              ; preds = %306, %141
  %149 = load i32, ptr @max_regno, align 4, !tbaa !21
  %150 = icmp ugt i32 %149, 53
  br i1 %150, label %151, label %343

151:                                              ; preds = %148
  %152 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  %153 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  br label %310

154:                                              ; preds = %141, %306
  %155 = phi ptr [ %308, %306 ], [ %146, %141 ]
  %156 = getelementptr inbounds %struct.insn_chain, ptr %155, i64 0, i32 6
  %157 = load ptr, ptr %156, align 8, !tbaa !37
  %158 = icmp eq ptr %157, null
  %159 = select i1 %158, ptr @bitmap_zero_bits, ptr %157
  %160 = getelementptr inbounds %struct.bitmap_element_def, ptr %159, i64 0, i32 2
  %161 = load i32, ptr %160, align 8, !tbaa !38
  %162 = icmp eq i32 %161, 0
  %163 = shl i32 %161, 7
  %164 = select i1 %162, i32 53, i32 %163
  %165 = getelementptr inbounds %struct.bitmap_element_def, ptr %159, i64 0, i32 3, i64 0
  %166 = load i64, ptr %165, align 8, !tbaa !40
  %167 = and i32 %164, 53
  %168 = zext i32 %167 to i64
  %169 = lshr i64 %166, %168
  %170 = icmp eq i64 %169, 0
  %171 = zext i1 %170 to i32
  %172 = add nuw nsw i32 %164, %171
  %173 = getelementptr inbounds %struct.insn_chain, ptr %155, i64 0, i32 10
  br label %174

174:                                              ; preds = %221, %154
  %175 = phi i64 [ %169, %154 ], [ %229, %221 ]
  %176 = phi i32 [ %172, %154 ], [ %230, %221 ]
  %177 = phi i32 [ 0, %154 ], [ %183, %221 ]
  %178 = phi ptr [ %159, %154 ], [ %184, %221 ]
  %179 = icmp eq i64 %175, 0
  br i1 %179, label %194, label %180

180:                                              ; preds = %203, %174
  %181 = phi i64 [ %175, %174 ], [ %208, %203 ]
  %182 = phi i32 [ %176, %174 ], [ %204, %203 ]
  %183 = phi i32 [ %177, %174 ], [ %205, %203 ]
  %184 = phi ptr [ %178, %174 ], [ %200, %203 ]
  %185 = and i64 %181, 1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %221

187:                                              ; preds = %180, %187
  %188 = phi i32 [ %191, %187 ], [ %182, %180 ]
  %189 = phi i64 [ %190, %187 ], [ %181, %180 ]
  %190 = lshr i64 %189, 1
  %191 = add i32 %188, 1
  %192 = and i64 %189, 2
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %187, label %221, !llvm.loop !41

194:                                              ; preds = %174
  %195 = add i32 %176, 63
  %196 = and i32 %195, -64
  %197 = add i32 %177, 1
  br label %198

198:                                              ; preds = %217, %194
  %199 = phi i32 [ %196, %194 ], [ %220, %217 ]
  %200 = phi ptr [ %178, %194 ], [ %215, %217 ]
  %201 = phi i32 [ %197, %194 ], [ 0, %217 ]
  %202 = icmp eq i32 %201, 2
  br i1 %202, label %214, label %203

203:                                              ; preds = %198, %210
  %204 = phi i32 [ %211, %210 ], [ %199, %198 ]
  %205 = phi i32 [ %212, %210 ], [ %201, %198 ]
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds %struct.bitmap_element_def, ptr %200, i64 0, i32 3, i64 %206
  %208 = load i64, ptr %207, align 8, !tbaa !40
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %180

210:                                              ; preds = %203
  %211 = add i32 %204, 64
  %212 = add i32 %205, 1
  %213 = icmp eq i32 %212, 2
  br i1 %213, label %214, label %203, !llvm.loop !42

214:                                              ; preds = %210, %198
  %215 = load ptr, ptr %200, align 8, !tbaa !43
  %216 = icmp eq ptr %215, null
  br i1 %216, label %231, label %217

217:                                              ; preds = %214
  %218 = getelementptr inbounds %struct.bitmap_element_def, ptr %215, i64 0, i32 2
  %219 = load i32, ptr %218, align 8, !tbaa !38
  %220 = shl i32 %219, 7
  br label %198

221:                                              ; preds = %187, %180
  %222 = phi i64 [ %181, %180 ], [ %190, %187 ]
  %223 = phi i32 [ %182, %180 ], [ %191, %187 ]
  %224 = load i64, ptr %173, align 8, !tbaa !176
  %225 = zext i32 %223 to i64
  %226 = getelementptr inbounds i64, ptr %142, i64 %225
  %227 = load i64, ptr %226, align 8, !tbaa !40
  %228 = or i64 %227, %224
  store i64 %228, ptr %226, align 8, !tbaa !40
  %229 = lshr i64 %222, 1
  %230 = add i32 %223, 1
  br label %174, !llvm.loop !208

231:                                              ; preds = %214
  %232 = getelementptr inbounds %struct.insn_chain, ptr %155, i64 0, i32 7
  %233 = load ptr, ptr %232, align 8, !tbaa !37
  %234 = icmp eq ptr %233, null
  %235 = select i1 %234, ptr @bitmap_zero_bits, ptr %233
  %236 = getelementptr inbounds %struct.bitmap_element_def, ptr %235, i64 0, i32 2
  %237 = load i32, ptr %236, align 8, !tbaa !38
  %238 = icmp eq i32 %237, 0
  %239 = shl i32 %237, 7
  %240 = select i1 %238, i32 53, i32 %239
  %241 = getelementptr inbounds %struct.bitmap_element_def, ptr %235, i64 0, i32 3, i64 0
  %242 = load i64, ptr %241, align 8, !tbaa !40
  %243 = and i32 %240, 53
  %244 = zext i32 %243 to i64
  %245 = lshr i64 %242, %244
  %246 = icmp eq i64 %245, 0
  %247 = zext i1 %246 to i32
  %248 = add nuw nsw i32 %240, %247
  br label %249

249:                                              ; preds = %296, %231
  %250 = phi i64 [ %245, %231 ], [ %304, %296 ]
  %251 = phi i32 [ %248, %231 ], [ %305, %296 ]
  %252 = phi i32 [ 0, %231 ], [ %258, %296 ]
  %253 = phi ptr [ %235, %231 ], [ %259, %296 ]
  %254 = icmp eq i64 %250, 0
  br i1 %254, label %269, label %255

255:                                              ; preds = %278, %249
  %256 = phi i64 [ %250, %249 ], [ %283, %278 ]
  %257 = phi i32 [ %251, %249 ], [ %279, %278 ]
  %258 = phi i32 [ %252, %249 ], [ %280, %278 ]
  %259 = phi ptr [ %253, %249 ], [ %275, %278 ]
  %260 = and i64 %256, 1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %296

262:                                              ; preds = %255, %262
  %263 = phi i32 [ %266, %262 ], [ %257, %255 ]
  %264 = phi i64 [ %265, %262 ], [ %256, %255 ]
  %265 = lshr i64 %264, 1
  %266 = add i32 %263, 1
  %267 = and i64 %264, 2
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %262, label %296, !llvm.loop !41

269:                                              ; preds = %249
  %270 = add i32 %251, 63
  %271 = and i32 %270, -64
  %272 = add i32 %252, 1
  br label %273

273:                                              ; preds = %292, %269
  %274 = phi i32 [ %271, %269 ], [ %295, %292 ]
  %275 = phi ptr [ %253, %269 ], [ %290, %292 ]
  %276 = phi i32 [ %272, %269 ], [ 0, %292 ]
  %277 = icmp eq i32 %276, 2
  br i1 %277, label %289, label %278

278:                                              ; preds = %273, %285
  %279 = phi i32 [ %286, %285 ], [ %274, %273 ]
  %280 = phi i32 [ %287, %285 ], [ %276, %273 ]
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds %struct.bitmap_element_def, ptr %275, i64 0, i32 3, i64 %281
  %283 = load i64, ptr %282, align 8, !tbaa !40
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %255

285:                                              ; preds = %278
  %286 = add i32 %279, 64
  %287 = add i32 %280, 1
  %288 = icmp eq i32 %287, 2
  br i1 %288, label %289, label %278, !llvm.loop !42

289:                                              ; preds = %285, %273
  %290 = load ptr, ptr %275, align 8, !tbaa !43
  %291 = icmp eq ptr %290, null
  br i1 %291, label %306, label %292

292:                                              ; preds = %289
  %293 = getelementptr inbounds %struct.bitmap_element_def, ptr %290, i64 0, i32 2
  %294 = load i32, ptr %293, align 8, !tbaa !38
  %295 = shl i32 %294, 7
  br label %273

296:                                              ; preds = %262, %255
  %297 = phi i64 [ %256, %255 ], [ %265, %262 ]
  %298 = phi i32 [ %257, %255 ], [ %266, %262 ]
  %299 = load i64, ptr %173, align 8, !tbaa !176
  %300 = zext i32 %298 to i64
  %301 = getelementptr inbounds i64, ptr %142, i64 %300
  %302 = load i64, ptr %301, align 8, !tbaa !40
  %303 = or i64 %302, %299
  store i64 %303, ptr %301, align 8, !tbaa !40
  %304 = lshr i64 %297, 1
  %305 = add i32 %298, 1
  br label %249, !llvm.loop !209

306:                                              ; preds = %289
  %307 = getelementptr inbounds %struct.insn_chain, ptr %155, i64 0, i32 2
  %308 = load ptr, ptr %307, align 8, !tbaa !6
  %309 = icmp eq ptr %308, null
  br i1 %309, label %148, label %154, !llvm.loop !210

310:                                              ; preds = %151, %333
  %311 = phi ptr [ %153, %151 ], [ %334, %333 ]
  %312 = phi ptr [ %152, %151 ], [ %335, %333 ]
  %313 = phi i64 [ 53, %151 ], [ %337, %333 ]
  %314 = phi i32 [ 0, %151 ], [ %336, %333 ]
  %315 = getelementptr inbounds i16, ptr %312, i64 %313
  %316 = load i16, ptr %315, align 2, !tbaa !44
  %317 = getelementptr inbounds i16, ptr %311, i64 %313
  %318 = load i16, ptr %317, align 2, !tbaa !44
  %319 = icmp eq i16 %316, %318
  br i1 %319, label %333, label %320

320:                                              ; preds = %310
  %321 = icmp slt i16 %318, 0
  br i1 %321, label %322, label %328

322:                                              ; preds = %320
  %323 = load ptr, ptr @temp_pseudo_reg_arr, align 8, !tbaa !6
  %324 = add i32 %314, 1
  %325 = zext i32 %314 to i64
  %326 = getelementptr inbounds i32, ptr %323, i64 %325
  %327 = trunc i64 %313 to i32
  store i32 %327, ptr %326, align 4, !tbaa !21
  br label %333

328:                                              ; preds = %320
  %329 = trunc i64 %313 to i32
  %330 = tail call zeroext i8 @bitmap_clear_bit(ptr noundef nonnull @spilled_pseudos, i32 noundef %329) #19
  %331 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  %332 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  br label %333

333:                                              ; preds = %310, %328, %322
  %334 = phi ptr [ %311, %322 ], [ %332, %328 ], [ %311, %310 ]
  %335 = phi ptr [ %312, %322 ], [ %331, %328 ], [ %312, %310 ]
  %336 = phi i32 [ %324, %322 ], [ %314, %328 ], [ %314, %310 ]
  %337 = add nuw nsw i64 %313, 1
  %338 = load i32, ptr @max_regno, align 4, !tbaa !21
  %339 = zext i32 %338 to i64
  %340 = icmp ult i64 %337, %339
  br i1 %340, label %310, label %341, !llvm.loop !211

341:                                              ; preds = %333
  %342 = load ptr, ptr @pseudo_forbidden_regs, align 8, !tbaa !6
  br label %343

343:                                              ; preds = %341, %148
  %344 = phi ptr [ %142, %148 ], [ %342, %341 ]
  %345 = phi i32 [ 0, %148 ], [ %336, %341 ]
  %346 = load ptr, ptr @temp_pseudo_reg_arr, align 8, !tbaa !6
  %347 = load i64, ptr @bad_spill_regs_global, align 8, !tbaa !40
  %348 = load ptr, ptr @pseudo_previous_regs, align 8, !tbaa !6
  %349 = tail call zeroext i8 @ira_reassign_pseudos(ptr noundef %346, i32 noundef %345, i64 noundef %347, ptr noundef %344, ptr noundef %348, ptr noundef nonnull @spilled_pseudos) #19
  %350 = icmp eq i8 %349, 0
  %351 = select i1 %350, i32 %59, i32 1
  br label %352

352:                                              ; preds = %343, %136
  %353 = phi i32 [ %351, %343 ], [ %59, %136 ]
  %354 = load ptr, ptr @reload_insn_chain, align 8, !tbaa !6
  %355 = icmp eq ptr %354, null
  br i1 %355, label %384, label %356

356:                                              ; preds = %352, %381
  %357 = phi ptr [ %382, %381 ], [ %354, %352 ]
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #19
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #19
  %358 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %360, label %365

360:                                              ; preds = %356
  %361 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 6
  %362 = call zeroext i8 @bitmap_and_compl_into(ptr noundef nonnull %361, ptr noundef nonnull @spilled_pseudos) #19
  %363 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 7
  %364 = call zeroext i8 @bitmap_and_compl_into(ptr noundef nonnull %363, ptr noundef nonnull @spilled_pseudos) #19
  br label %365

365:                                              ; preds = %360, %356
  %366 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 5
  %367 = load i8, ptr %366, align 4
  %368 = and i8 %367, 1
  %369 = icmp eq i8 %368, 0
  br i1 %369, label %381, label %370

370:                                              ; preds = %365
  store i64 0, ptr %2, align 8, !tbaa !40
  %371 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 6
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %2, ptr noundef nonnull %371) #19
  store i64 0, ptr %3, align 8, !tbaa !40
  %372 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 7
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %3, ptr noundef nonnull %372) #19
  %373 = load i64, ptr %3, align 8, !tbaa !40
  %374 = load i64, ptr %2, align 8, !tbaa !40
  %375 = or i64 %374, %373
  store i64 %375, ptr %2, align 8, !tbaa !40
  call void @compute_use_by_pseudos(ptr noundef nonnull %2, ptr noundef nonnull %371)
  call void @compute_use_by_pseudos(ptr noundef nonnull %2, ptr noundef nonnull %372)
  %376 = load i64, ptr %2, align 8, !tbaa !40
  %377 = xor i64 %376, -1
  %378 = getelementptr inbounds %struct.insn_chain, ptr %357, i64 0, i32 10
  %379 = load i64, ptr @used_spill_regs, align 8, !tbaa !40
  %380 = and i64 %379, %377
  store i64 %380, ptr %378, align 8, !tbaa !176
  br label %381

381:                                              ; preds = %370, %365
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #19
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #19
  %382 = load ptr, ptr %357, align 8, !tbaa !6
  %383 = icmp eq ptr %382, null
  br i1 %383, label %384, label %356, !llvm.loop !212

384:                                              ; preds = %381, %352
  call void @bitmap_clear(ptr noundef nonnull @changed_allocation_pseudos) #19
  %385 = load i32, ptr @max_regno, align 4, !tbaa !21
  %386 = icmp ugt i32 %385, 53
  br i1 %386, label %387, label %422

387:                                              ; preds = %384, %417
  %388 = phi i64 [ %418, %417 ], [ 53, %384 ]
  %389 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %390 = getelementptr inbounds i16, ptr %389, i64 %388
  %391 = load i16, ptr %390, align 2, !tbaa !44
  %392 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  %393 = getelementptr inbounds i16, ptr %392, i64 %388
  %394 = load i16, ptr %393, align 2, !tbaa !44
  %395 = icmp eq i16 %394, %391
  br i1 %395, label %417, label %396

396:                                              ; preds = %387
  %397 = trunc i64 %388 to i32
  %398 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @changed_allocation_pseudos, i32 noundef %397) #19
  %399 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  %400 = getelementptr inbounds i16, ptr %399, i64 %388
  %401 = load i16, ptr %400, align 2, !tbaa !44
  %402 = sext i16 %401 to i32
  call fastcc void @alter_reg(i32 noundef %397, i32 noundef %402, i8 noundef zeroext 0)
  %403 = load ptr, ptr @reg_old_renumber, align 8, !tbaa !6
  %404 = getelementptr inbounds i16, ptr %403, i64 %388
  store i16 %391, ptr %404, align 2, !tbaa !44
  %405 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %406 = icmp eq ptr %405, null
  br i1 %406, label %417, label %407

407:                                              ; preds = %396
  %408 = icmp eq i16 %391, -1
  br i1 %408, label %409, label %411

409:                                              ; preds = %407
  %410 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %405, ptr noundef nonnull @.str.9, i32 noundef %397)
  br label %417

411:                                              ; preds = %407
  %412 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %413 = getelementptr inbounds i16, ptr %412, i64 %388
  %414 = load i16, ptr %413, align 2, !tbaa !44
  %415 = sext i16 %414 to i32
  %416 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %405, ptr noundef nonnull @.str.10, i32 noundef %397, i32 noundef %415)
  br label %417

417:                                              ; preds = %396, %411, %409, %387
  %418 = add nuw nsw i64 %388, 1
  %419 = load i32, ptr @max_regno, align 4, !tbaa !21
  %420 = zext i32 %419 to i64
  %421 = icmp ult i64 %418, %420
  br i1 %421, label %387, label %422, !llvm.loop !213

422:                                              ; preds = %417, %384
  ret i32 %353
}

declare i64 @get_frame_size() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @eliminate_regs(ptr noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %0, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  ret ptr %4
}

declare i32 @strict_memory_address_addr_space_p(i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @setup_save_areas() local_unnamed_addr #3

declare ptr @assign_stack_local(i32 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

declare void @save_call_clobbered_regs() local_unnamed_addr #3

declare void @bitmap_clear(ptr noundef) local_unnamed_addr #3

declare void @obstack_free(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @mark_elimination(i32 noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @can_throw_internal(ptr noundef) local_unnamed_addr #3

declare i32 @reg_set_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @delete_dead_insn(ptr noundef %0) unnamed_addr #9 {
  %2 = tail call ptr @prev_real_insn(ptr noundef %0) #19
  %3 = icmp eq ptr %2, null
  br i1 %3, label %33, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.rtx_def, ptr %2, i64 1
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i32, ptr %6, align 8
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 23
  br i1 %9, label %10, label %33

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.rtx_def, ptr %6, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i32, ptr %12, align 8
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %14, 37
  br i1 %15, label %16, label %33

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %12, ptr noundef %18) #19
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = getelementptr i8, ptr %12, i64 8
  %23 = load i32, ptr %22, align 8, !tbaa !17
  %24 = tail call ptr @find_regno_note(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %23) #19
  %25 = icmp eq ptr %24, null
  br i1 %25, label %33, label %26

26:                                               ; preds = %21
  %27 = load ptr, ptr %5, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.rtx_def, ptr %27, i64 0, i32 1, i32 0, i32 0, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = tail call i32 @side_effects_p(ptr noundef %29) #19
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  tail call fastcc void @delete_dead_insn(ptr noundef nonnull %2)
  br label %33

33:                                               ; preds = %32, %26, %21, %16, %10, %4, %1
  tail call void @set_insn_deleted(ptr noundef %0) #19
  ret void
}

declare void @set_insn_deleted(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @reload_as_needed(i32 noundef %0) unnamed_addr #9 {
  %2 = alloca i64, align 8
  %3 = alloca ptr, align 8
  %4 = alloca %struct.secondary_reload_info, align 8
  %5 = alloca [180 x ptr], align 16
  %6 = alloca %struct.bitmap_head_def, align 8
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(424) @spill_reg_rtx, i8 0, i64 424, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(424) @spill_reg_store, i8 0, i64 424, i1 false)
  %7 = load i32, ptr @max_regno, align 4, !tbaa !21
  %8 = sext i32 %7 to i64
  %9 = tail call ptr @xcalloc(i64 noundef %8, i64 noundef 8) #19
  store ptr %9, ptr @reg_last_reload_reg, align 8, !tbaa !6
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) @reg_has_output_reload, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr getelementptr inbounds (%struct.bitmap_head_def, ptr @reg_has_output_reload, i64 0, i32 3), align 8, !tbaa !33
  store i64 0, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %10 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  br label %11

11:                                               ; preds = %11, %1
  %12 = phi ptr [ %20, %11 ], [ %10, %1 ]
  %13 = load i32, ptr %12, align 8, !tbaa !85
  %14 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 1
  %15 = load i32, ptr %14, align 4, !tbaa !88
  %16 = tail call i64 @ix86_initial_elimination_offset(i32 noundef %13, i32 noundef %15) #19
  %17 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 2
  store i64 %16, ptr %17, align 8, !tbaa !123
  %18 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 5
  store i64 %16, ptr %18, align 8, !tbaa !124
  %19 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 6
  store i64 %16, ptr %19, align 8, !tbaa !125
  %20 = getelementptr inbounds %struct.elim_table, ptr %12, i64 1
  %21 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %22 = getelementptr inbounds %struct.elim_table, ptr %21, i64 4
  %23 = icmp ult ptr %20, %22
  br i1 %23, label %11, label %24, !llvm.loop !126

24:                                               ; preds = %11
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %25 = load ptr, ptr @reload_insn_chain, align 8, !tbaa !6
  %26 = icmp eq ptr %25, null
  br i1 %26, label %5335, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.bitmap_head_def, ptr %6, i64 0, i32 3
  %29 = getelementptr inbounds %struct.secondary_reload_info, ptr %4, i64 0, i32 2
  br label %30

30:                                               ; preds = %27, %5332
  %31 = phi ptr [ %25, %27 ], [ %5333, %5332 ]
  %32 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !111
  %34 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1, i32 0, i32 0, i64 2
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = load i32, ptr %33, align 8
  %37 = trunc i32 %36 to i16
  switch i16 %37, label %5323 [
    i16 12, label %38
    i16 8, label %103
    i16 7, label %103
    i16 9, label %103
    i16 10, label %103
  ]

38:                                               ; preds = %30
  %39 = getelementptr i8, ptr %33, i64 56
  %40 = load i32, ptr %39, align 8, !tbaa !17
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %41 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %42 = load ptr, ptr @offsets_at, align 8, !tbaa !6
  %43 = load i32, ptr @first_label_num, align 4, !tbaa !21
  %44 = sub nsw i32 %40, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [4 x i64], ptr %42, i64 %45, i64 0
  %47 = load i64, ptr %46, align 8, !tbaa !40
  %48 = getelementptr inbounds %struct.elim_table, ptr %41, i64 0, i32 6
  store i64 %47, ptr %48, align 8, !tbaa !125
  %49 = getelementptr inbounds %struct.elim_table, ptr %41, i64 0, i32 5
  store i64 %47, ptr %49, align 8, !tbaa !124
  %50 = getelementptr inbounds %struct.elim_table, ptr %41, i64 0, i32 3
  %51 = load i32, ptr %50, align 8, !tbaa !103
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %38
  %54 = getelementptr inbounds %struct.elim_table, ptr %41, i64 0, i32 2
  %55 = load i64, ptr %54, align 8, !tbaa !123
  %56 = icmp eq i64 %47, %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %53
  store i32 1, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %58

58:                                               ; preds = %57, %53, %38
  %59 = phi i32 [ 0, %38 ], [ 0, %53 ], [ 1, %57 ]
  %60 = getelementptr inbounds [4 x i64], ptr %42, i64 %45, i64 1
  %61 = load i64, ptr %60, align 8, !tbaa !40
  %62 = getelementptr inbounds %struct.elim_table, ptr %41, i64 1, i32 6
  store i64 %61, ptr %62, align 8, !tbaa !125
  %63 = getelementptr inbounds %struct.elim_table, ptr %41, i64 1, i32 5
  store i64 %61, ptr %63, align 8, !tbaa !124
  %64 = getelementptr inbounds %struct.elim_table, ptr %41, i64 1, i32 3
  %65 = load i32, ptr %64, align 8, !tbaa !103
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %73, label %67

67:                                               ; preds = %58
  %68 = getelementptr inbounds %struct.elim_table, ptr %41, i64 1, i32 2
  %69 = load i64, ptr %68, align 8, !tbaa !123
  %70 = icmp eq i64 %61, %69
  br i1 %70, label %73, label %71

71:                                               ; preds = %67
  %72 = add nuw nsw i32 %59, 1
  store i32 %72, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %73

73:                                               ; preds = %71, %67, %58
  %74 = phi i32 [ %59, %58 ], [ %59, %67 ], [ %72, %71 ]
  %75 = getelementptr inbounds [4 x i64], ptr %42, i64 %45, i64 2
  %76 = load i64, ptr %75, align 8, !tbaa !40
  %77 = getelementptr inbounds %struct.elim_table, ptr %41, i64 2, i32 6
  store i64 %76, ptr %77, align 8, !tbaa !125
  %78 = getelementptr inbounds %struct.elim_table, ptr %41, i64 2, i32 5
  store i64 %76, ptr %78, align 8, !tbaa !124
  %79 = getelementptr inbounds %struct.elim_table, ptr %41, i64 2, i32 3
  %80 = load i32, ptr %79, align 8, !tbaa !103
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %73
  %83 = getelementptr inbounds %struct.elim_table, ptr %41, i64 2, i32 2
  %84 = load i64, ptr %83, align 8, !tbaa !123
  %85 = icmp eq i64 %76, %84
  br i1 %85, label %88, label %86

86:                                               ; preds = %82
  %87 = add nuw nsw i32 %74, 1
  store i32 %87, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %88

88:                                               ; preds = %86, %82, %73
  %89 = phi i32 [ %74, %73 ], [ %74, %82 ], [ %87, %86 ]
  %90 = getelementptr inbounds [4 x i64], ptr %42, i64 %45, i64 3
  %91 = load i64, ptr %90, align 8, !tbaa !40
  %92 = getelementptr inbounds %struct.elim_table, ptr %41, i64 3, i32 6
  store i64 %91, ptr %92, align 8, !tbaa !125
  %93 = getelementptr inbounds %struct.elim_table, ptr %41, i64 3, i32 5
  store i64 %91, ptr %93, align 8, !tbaa !124
  %94 = getelementptr inbounds %struct.elim_table, ptr %41, i64 3, i32 3
  %95 = load i32, ptr %94, align 8, !tbaa !103
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %5323, label %97

97:                                               ; preds = %88
  %98 = getelementptr inbounds %struct.elim_table, ptr %41, i64 3, i32 2
  %99 = load i64, ptr %98, align 8, !tbaa !123
  %100 = icmp eq i64 %91, %99
  br i1 %100, label %5323, label %101

101:                                              ; preds = %97
  %102 = add nuw nsw i32 %89, 1
  store i32 %102, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %5323

103:                                              ; preds = %30, %30, %30, %30
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #19
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  store ptr @reg_obstack, ptr %28, align 8, !tbaa !33
  %104 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 1
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  call void @note_stores(ptr noundef %105, ptr noundef nonnull @forget_old_reloads_1, ptr noundef nonnull %6) #19
  %106 = load ptr, ptr %104, align 8, !tbaa !17
  %107 = load i32, ptr %106, align 8
  %108 = and i32 %107, 65534
  %109 = icmp eq i32 %108, 24
  br i1 %109, label %110, label %126

110:                                              ; preds = %103
  %111 = getelementptr inbounds %struct.rtx_def, ptr %106, i64 0, i32 1
  %112 = load ptr, ptr %111, align 8, !tbaa !17
  %113 = load i32, ptr %112, align 8
  %114 = and i32 %113, 65535
  %115 = icmp eq i32 %114, 43
  br i1 %115, label %116, label %126

116:                                              ; preds = %110
  %117 = getelementptr inbounds %struct.rtx_def, ptr %112, i64 0, i32 1
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  %119 = lshr i32 %113, 16
  %120 = and i32 %119, 255
  %121 = call fastcc ptr @eliminate_regs_1(ptr noundef %118, i32 noundef %120, ptr noundef null, i8 noundef zeroext 0)
  %122 = load ptr, ptr %104, align 8, !tbaa !17
  %123 = getelementptr inbounds %struct.rtx_def, ptr %122, i64 0, i32 1
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = getelementptr inbounds %struct.rtx_def, ptr %124, i64 0, i32 1
  store ptr %121, ptr %125, align 8, !tbaa !17
  br label %126

126:                                              ; preds = %103, %116, %110
  %127 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %128 = icmp ne i32 %127, 0
  %129 = load i32, ptr @num_eliminable_invariants, align 4
  %130 = icmp ne i32 %129, 0
  %131 = select i1 %128, i1 true, i1 %130
  br i1 %131, label %132, label %198

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 5
  %134 = load i8, ptr %133, align 4
  %135 = and i8 %134, 4
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %198, label %137

137:                                              ; preds = %132
  %138 = call fastcc i32 @eliminate_regs_in_insn(ptr noundef nonnull %33, i32 noundef 1)
  %139 = load i32, ptr %33, align 8
  %140 = and i32 %139, 65535
  %141 = icmp eq i32 %140, 13
  br i1 %141, label %142, label %198

142:                                              ; preds = %137
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %143 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %144 = getelementptr inbounds %struct.elim_table, ptr %143, i64 0, i32 5
  %145 = load i64, ptr %144, align 8, !tbaa !124
  %146 = getelementptr inbounds %struct.elim_table, ptr %143, i64 0, i32 6
  store i64 %145, ptr %146, align 8, !tbaa !125
  %147 = getelementptr inbounds %struct.elim_table, ptr %143, i64 0, i32 3
  %148 = load i32, ptr %147, align 8, !tbaa !103
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %155, label %150

150:                                              ; preds = %142
  %151 = getelementptr inbounds %struct.elim_table, ptr %143, i64 0, i32 2
  %152 = load i64, ptr %151, align 8, !tbaa !123
  %153 = icmp eq i64 %145, %152
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  store i32 1, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %155

155:                                              ; preds = %154, %150, %142
  %156 = phi i32 [ 0, %142 ], [ 0, %150 ], [ 1, %154 ]
  %157 = getelementptr inbounds %struct.elim_table, ptr %143, i64 1, i32 5
  %158 = load i64, ptr %157, align 8, !tbaa !124
  %159 = getelementptr inbounds %struct.elim_table, ptr %143, i64 1, i32 6
  store i64 %158, ptr %159, align 8, !tbaa !125
  %160 = getelementptr inbounds %struct.elim_table, ptr %143, i64 1, i32 3
  %161 = load i32, ptr %160, align 8, !tbaa !103
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %169, label %163

163:                                              ; preds = %155
  %164 = getelementptr inbounds %struct.elim_table, ptr %143, i64 1, i32 2
  %165 = load i64, ptr %164, align 8, !tbaa !123
  %166 = icmp eq i64 %158, %165
  br i1 %166, label %169, label %167

167:                                              ; preds = %163
  %168 = add nuw nsw i32 %156, 1
  store i32 %168, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %169

169:                                              ; preds = %167, %163, %155
  %170 = phi i32 [ %156, %155 ], [ %156, %163 ], [ %168, %167 ]
  %171 = getelementptr inbounds %struct.elim_table, ptr %143, i64 2, i32 5
  %172 = load i64, ptr %171, align 8, !tbaa !124
  %173 = getelementptr inbounds %struct.elim_table, ptr %143, i64 2, i32 6
  store i64 %172, ptr %173, align 8, !tbaa !125
  %174 = getelementptr inbounds %struct.elim_table, ptr %143, i64 2, i32 3
  %175 = load i32, ptr %174, align 8, !tbaa !103
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %183, label %177

177:                                              ; preds = %169
  %178 = getelementptr inbounds %struct.elim_table, ptr %143, i64 2, i32 2
  %179 = load i64, ptr %178, align 8, !tbaa !123
  %180 = icmp eq i64 %172, %179
  br i1 %180, label %183, label %181

181:                                              ; preds = %177
  %182 = add nuw nsw i32 %170, 1
  store i32 %182, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %183

183:                                              ; preds = %181, %177, %169
  %184 = phi i32 [ %170, %169 ], [ %170, %177 ], [ %182, %181 ]
  %185 = getelementptr inbounds %struct.elim_table, ptr %143, i64 3, i32 5
  %186 = load i64, ptr %185, align 8, !tbaa !124
  %187 = getelementptr inbounds %struct.elim_table, ptr %143, i64 3, i32 6
  store i64 %186, ptr %187, align 8, !tbaa !125
  %188 = getelementptr inbounds %struct.elim_table, ptr %143, i64 3, i32 3
  %189 = load i32, ptr %188, align 8, !tbaa !103
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %197, label %191

191:                                              ; preds = %183
  %192 = getelementptr inbounds %struct.elim_table, ptr %143, i64 3, i32 2
  %193 = load i64, ptr %192, align 8, !tbaa !123
  %194 = icmp eq i64 %186, %193
  br i1 %194, label %197, label %195

195:                                              ; preds = %191
  %196 = add nuw nsw i32 %184, 1
  store i32 %196, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %197

197:                                              ; preds = %183, %191, %195
  call void @bitmap_clear(ptr noundef nonnull %6) #19
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #19
  br label %5332

198:                                              ; preds = %137, %126, %132
  %199 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 5
  %200 = load i8, ptr %199, align 4
  %201 = and i8 %200, 7
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %198
  store i32 0, ptr @n_reloads, align 4, !tbaa !21
  br label %5147

204:                                              ; preds = %198
  call void @bitmap_clear(ptr noundef nonnull @reg_has_output_reload) #19
  store i64 0, ptr @reg_is_output_reload, align 8, !tbaa !40
  %205 = load i8, ptr @spill_indirect_levels, align 1, !tbaa !17
  %206 = sext i8 %205 to i32
  %207 = call i32 @find_reloads(ptr noundef nonnull %33, i32 noundef 1, i32 noundef %206, i32 noundef %0, ptr noundef nonnull @spill_reg_order) #19
  %208 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %209 = icmp sgt i32 %208, 0
  br i1 %209, label %210, label %5147

210:                                              ; preds = %204
  %211 = load ptr, ptr %34, align 8, !tbaa !17
  %212 = getelementptr inbounds %struct.rtx_def, ptr %33, i64 0, i32 1, i32 0, i32 0, i64 1
  %213 = load ptr, ptr %212, align 8, !tbaa !17
  %214 = load ptr, ptr %32, align 8, !tbaa !111
  call void @llvm.lifetime.start.p0(i64 1440, ptr nonnull %5) #19
  br label %215

215:                                              ; preds = %210, %251
  %216 = phi i64 [ %255, %251 ], [ 0, %210 ]
  %217 = phi i32 [ %253, %251 ], [ 1, %210 ]
  %218 = phi i32 [ %252, %251 ], [ 0, %210 ]
  %219 = trunc i64 %216 to i16
  %220 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %216
  store i16 %219, ptr %220, align 2, !tbaa !44
  %221 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %216, i32 11
  %222 = load ptr, ptr %221, align 8, !tbaa !139
  %223 = icmp eq ptr %222, null
  br i1 %223, label %236, label %224

224:                                              ; preds = %215
  %225 = load i32, ptr %222, align 8
  %226 = and i32 %225, 65535
  %227 = icmp eq i32 %226, 37
  br i1 %227, label %228, label %232

228:                                              ; preds = %224
  %229 = getelementptr i8, ptr %222, i64 8
  %230 = load i32, ptr %229, align 8, !tbaa !17
  %231 = icmp ult i32 %230, 53
  br i1 %231, label %236, label %232

232:                                              ; preds = %228, %224
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5984, ptr noundef nonnull @.str.2) #19
  %233 = load ptr, ptr %221, align 8, !tbaa !139
  %234 = getelementptr i8, ptr %233, i64 8
  %235 = load i32, ptr %234, align 8, !tbaa !17
  br label %236

236:                                              ; preds = %232, %228, %215
  %237 = phi i32 [ %230, %228 ], [ %235, %232 ], [ -1, %215 ]
  %238 = phi ptr [ %222, %228 ], [ %233, %232 ], [ null, %215 ]
  %239 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %216
  store i32 %237, ptr %239, align 4, !tbaa !21
  %240 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %216, i32 6
  %241 = load i32, ptr %240, align 8, !tbaa !142
  %242 = icmp ugt i32 %241, 1
  br i1 %242, label %243, label %251

243:                                              ; preds = %236
  %244 = call i32 @llvm.umax.i32(i32 %241, i32 %217)
  %245 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %216, i32 2
  %246 = load i32, ptr %245, align 8, !tbaa !154
  %247 = sext i32 %246 to i64
  %248 = sext i32 %218 to i64
  %249 = getelementptr inbounds [27 x [27 x i32]], ptr @reg_class_superunion, i64 0, i64 %247, i64 %248
  %250 = load i32, ptr %249, align 4, !tbaa !17
  br label %251

251:                                              ; preds = %243, %236
  %252 = phi i32 [ %250, %243 ], [ %218, %236 ]
  %253 = phi i32 [ %244, %243 ], [ %217, %236 ]
  %254 = getelementptr inbounds [180 x ptr], ptr %5, i64 0, i64 %216
  store ptr %238, ptr %254, align 8, !tbaa !6
  %255 = add nuw nsw i64 %216, 1
  %256 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %257 = sext i32 %256 to i64
  %258 = icmp slt i64 %255, %257
  br i1 %258, label %215, label %259, !llvm.loop !214

259:                                              ; preds = %251
  %260 = icmp sgt i32 %256, 1
  br i1 %260, label %261, label %264

261:                                              ; preds = %259
  %262 = zext i32 %256 to i64
  call void @spec_qsort(ptr noundef nonnull @reload_order, i64 noundef %262, i64 noundef 2, ptr noundef nonnull @reload_reg_class_lower) #19
  %263 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %264

264:                                              ; preds = %261, %259
  %265 = phi i32 [ %263, %261 ], [ %256, %259 ]
  %266 = load i32, ptr @optimize, align 4, !tbaa !21
  %267 = icmp sgt i32 %266, 0
  %268 = zext i1 %267 to i32
  %269 = sext i32 %252 to i64
  %270 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %269
  %271 = getelementptr inbounds %struct.rtx_def, ptr %214, i64 1
  %272 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 6
  %273 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 7
  %274 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 10
  br label %278

275:                                              ; preds = %2042
  %276 = add nsw i32 %280, -1
  %277 = icmp slt i32 %280, 1
  br i1 %277, label %2046, label %278, !llvm.loop !215

278:                                              ; preds = %275, %264
  %279 = phi i32 [ %265, %264 ], [ %2043, %275 ]
  %280 = phi i32 [ %268, %264 ], [ %276, %275 ]
  %281 = icmp sgt i32 %279, 0
  br i1 %281, label %282, label %321

282:                                              ; preds = %278
  %283 = zext i32 %279 to i64
  %284 = and i64 %283, 3
  %285 = icmp ult i32 %279, 4
  br i1 %285, label %309, label %286

286:                                              ; preds = %282
  %287 = and i64 %283, 4294967292
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %306, %288 ]
  %290 = phi i64 [ 0, %286 ], [ %307, %288 ]
  %291 = getelementptr inbounds ptr, ptr %5, i64 %289
  %292 = load ptr, ptr %291, align 16, !tbaa !6
  %293 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %289, i32 11
  store ptr %292, ptr %293, align 16, !tbaa !139
  %294 = or i64 %289, 1
  %295 = getelementptr inbounds ptr, ptr %5, i64 %294
  %296 = load ptr, ptr %295, align 8, !tbaa !6
  %297 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %294, i32 11
  store ptr %296, ptr %297, align 8, !tbaa !139
  %298 = or i64 %289, 2
  %299 = getelementptr inbounds ptr, ptr %5, i64 %298
  %300 = load ptr, ptr %299, align 16, !tbaa !6
  %301 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %298, i32 11
  store ptr %300, ptr %301, align 16, !tbaa !139
  %302 = or i64 %289, 3
  %303 = getelementptr inbounds ptr, ptr %5, i64 %302
  %304 = load ptr, ptr %303, align 8, !tbaa !6
  %305 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %302, i32 11
  store ptr %304, ptr %305, align 8, !tbaa !139
  %306 = add nuw nsw i64 %289, 4
  %307 = add i64 %290, 4
  %308 = icmp eq i64 %307, %287
  br i1 %308, label %309, label %288, !llvm.loop !216

309:                                              ; preds = %288, %282
  %310 = phi i64 [ 0, %282 ], [ %306, %288 ]
  %311 = icmp eq i64 %284, 0
  br i1 %311, label %321, label %312

312:                                              ; preds = %309, %312
  %313 = phi i64 [ %318, %312 ], [ %310, %309 ]
  %314 = phi i64 [ %319, %312 ], [ 0, %309 ]
  %315 = getelementptr inbounds ptr, ptr %5, i64 %313
  %316 = load ptr, ptr %315, align 8, !tbaa !6
  %317 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %313, i32 11
  store ptr %316, ptr %317, align 8, !tbaa !139
  %318 = add nuw nsw i64 %313, 1
  %319 = add i64 %314, 1
  %320 = icmp eq i64 %319, %284
  br i1 %320, label %321, label %312, !llvm.loop !217

321:                                              ; preds = %309, %312, %278
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(180) @reload_inherited, i8 0, i64 180, i1 false)
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1440) @reload_override_in, i8 0, i64 1440, i1 false)
  store i64 0, ptr @reload_reg_used, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  store i64 0, ptr @reg_used_in_insn, align 8, !tbaa !40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #19
  store i64 0, ptr %2, align 8, !tbaa !40
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %2, ptr noundef nonnull %272) #19
  %322 = load i64, ptr %2, align 8, !tbaa !40
  %323 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %324 = or i64 %323, %322
  store i64 %324, ptr @reg_used_in_insn, align 8, !tbaa !40
  store i64 0, ptr %2, align 8, !tbaa !40
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %2, ptr noundef nonnull %273) #19
  %325 = load i64, ptr %2, align 8, !tbaa !40
  %326 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %327 = or i64 %326, %325
  store i64 %327, ptr @reg_used_in_insn, align 8, !tbaa !40
  %328 = load ptr, ptr %272, align 8, !tbaa !37
  %329 = icmp eq ptr %328, null
  %330 = select i1 %329, ptr @bitmap_zero_bits, ptr %328
  %331 = getelementptr inbounds %struct.bitmap_element_def, ptr %330, i64 0, i32 2
  %332 = load i32, ptr %331, align 8, !tbaa !38
  %333 = icmp eq i32 %332, 0
  %334 = shl i32 %332, 7
  %335 = select i1 %333, i32 53, i32 %334
  %336 = getelementptr inbounds %struct.bitmap_element_def, ptr %330, i64 0, i32 3, i64 0
  %337 = load i64, ptr %336, align 8, !tbaa !40
  %338 = and i32 %335, 53
  %339 = zext i32 %338 to i64
  %340 = lshr i64 %337, %339
  %341 = icmp eq i64 %340, 0
  %342 = zext i1 %341 to i32
  %343 = add nuw nsw i32 %335, %342
  br label %344

344:                                              ; preds = %470, %321
  %345 = phi i64 [ %340, %321 ], [ %471, %470 ]
  %346 = phi i32 [ 0, %321 ], [ %352, %470 ]
  %347 = phi i32 [ %343, %321 ], [ %472, %470 ]
  %348 = phi ptr [ %330, %321 ], [ %354, %470 ]
  %349 = icmp eq i64 %345, 0
  br i1 %349, label %364, label %350

350:                                              ; preds = %373, %344
  %351 = phi i64 [ %345, %344 ], [ %378, %373 ]
  %352 = phi i32 [ %346, %344 ], [ %374, %373 ]
  %353 = phi i32 [ %347, %344 ], [ %375, %373 ]
  %354 = phi ptr [ %348, %344 ], [ %370, %373 ]
  %355 = and i64 %351, 1
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %391

357:                                              ; preds = %350, %357
  %358 = phi i32 [ %361, %357 ], [ %353, %350 ]
  %359 = phi i64 [ %360, %357 ], [ %351, %350 ]
  %360 = lshr i64 %359, 1
  %361 = add i32 %358, 1
  %362 = and i64 %359, 2
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %357, label %391, !llvm.loop !41

364:                                              ; preds = %344
  %365 = add i32 %347, 63
  %366 = and i32 %365, -64
  %367 = add i32 %346, 1
  br label %368

368:                                              ; preds = %387, %364
  %369 = phi i32 [ %366, %364 ], [ %390, %387 ]
  %370 = phi ptr [ %348, %364 ], [ %385, %387 ]
  %371 = phi i32 [ %367, %364 ], [ 0, %387 ]
  %372 = icmp eq i32 %371, 2
  br i1 %372, label %384, label %373

373:                                              ; preds = %368, %380
  %374 = phi i32 [ %382, %380 ], [ %371, %368 ]
  %375 = phi i32 [ %381, %380 ], [ %369, %368 ]
  %376 = zext i32 %374 to i64
  %377 = getelementptr inbounds %struct.bitmap_element_def, ptr %370, i64 0, i32 3, i64 %376
  %378 = load i64, ptr %377, align 8, !tbaa !40
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %350

380:                                              ; preds = %373
  %381 = add i32 %375, 64
  %382 = add i32 %374, 1
  %383 = icmp eq i32 %382, 2
  br i1 %383, label %384, label %373, !llvm.loop !42

384:                                              ; preds = %380, %368
  %385 = load ptr, ptr %370, align 8, !tbaa !43
  %386 = icmp eq ptr %385, null
  br i1 %386, label %473, label %387

387:                                              ; preds = %384
  %388 = getelementptr inbounds %struct.bitmap_element_def, ptr %385, i64 0, i32 2
  %389 = load i32, ptr %388, align 8, !tbaa !38
  %390 = shl i32 %389, 7
  br label %368

391:                                              ; preds = %357, %350
  %392 = phi i64 [ %351, %350 ], [ %360, %357 ]
  %393 = phi i32 [ %353, %350 ], [ %361, %357 ]
  %394 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %395 = zext i32 %393 to i64
  %396 = getelementptr inbounds i16, ptr %394, i64 %395
  %397 = load i16, ptr %396, align 2, !tbaa !44
  %398 = icmp slt i16 %397, 0
  br i1 %398, label %399, label %406

399:                                              ; preds = %391
  %400 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %401 = icmp ne i8 %400, 0
  %402 = load i32, ptr @reload_completed, align 4
  %403 = icmp ne i32 %402, 0
  %404 = select i1 %401, i1 true, i1 %403
  br i1 %404, label %470, label %405

405:                                              ; preds = %399
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 575, ptr noundef nonnull @.str.2) #19
  br label %470

406:                                              ; preds = %391
  %407 = zext i16 %397 to i64
  %408 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %409 = getelementptr inbounds ptr, ptr %408, i64 %395
  %410 = load ptr, ptr %409, align 8, !tbaa !6
  %411 = load i32, ptr %410, align 8
  %412 = lshr i32 %411, 16
  %413 = and i32 %412, 255
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %407, i64 %414
  %416 = load i8, ptr %415, align 1, !tbaa !17
  %417 = zext i8 %416 to i64
  %418 = add nuw nsw i64 %417, %407
  %419 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %420 = add nuw nsw i64 %407, 1
  %421 = call i64 @llvm.umax.i64(i64 %418, i64 %420)
  %422 = sub nsw i64 %421, %407
  %423 = icmp ult i64 %422, 8
  br i1 %423, label %458, label %424

424:                                              ; preds = %406
  %425 = and i64 %422, -8
  %426 = add nsw i64 %425, %407
  %427 = insertelement <2 x i64> poison, i64 %407, i64 0
  %428 = shufflevector <2 x i64> %427, <2 x i64> poison, <2 x i32> zeroinitializer
  %429 = add nuw nsw <2 x i64> %428, <i64 0, i64 1>
  %430 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %419, i64 0
  br label %431

431:                                              ; preds = %431, %424
  %432 = phi i64 [ 0, %424 ], [ %449, %431 ]
  %433 = phi <2 x i64> [ %429, %424 ], [ %450, %431 ]
  %434 = phi <2 x i64> [ %430, %424 ], [ %445, %431 ]
  %435 = phi <2 x i64> [ zeroinitializer, %424 ], [ %446, %431 ]
  %436 = phi <2 x i64> [ zeroinitializer, %424 ], [ %447, %431 ]
  %437 = phi <2 x i64> [ zeroinitializer, %424 ], [ %448, %431 ]
  %438 = add <2 x i64> %433, <i64 2, i64 2>
  %439 = add <2 x i64> %433, <i64 4, i64 4>
  %440 = add <2 x i64> %433, <i64 6, i64 6>
  %441 = shl nuw <2 x i64> <i64 1, i64 1>, %433
  %442 = shl nuw <2 x i64> <i64 1, i64 1>, %438
  %443 = shl nuw <2 x i64> <i64 1, i64 1>, %439
  %444 = shl nuw <2 x i64> <i64 1, i64 1>, %440
  %445 = or <2 x i64> %441, %434
  %446 = or <2 x i64> %442, %435
  %447 = or <2 x i64> %443, %436
  %448 = or <2 x i64> %444, %437
  %449 = add nuw i64 %432, 8
  %450 = add <2 x i64> %433, <i64 8, i64 8>
  %451 = icmp eq i64 %449, %425
  br i1 %451, label %452, label %431, !llvm.loop !219

452:                                              ; preds = %431
  %453 = or <2 x i64> %446, %445
  %454 = or <2 x i64> %447, %453
  %455 = or <2 x i64> %448, %454
  %456 = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %455)
  %457 = icmp eq i64 %422, %425
  br i1 %457, label %468, label %458

458:                                              ; preds = %406, %452
  %459 = phi i64 [ %407, %406 ], [ %426, %452 ]
  %460 = phi i64 [ %419, %406 ], [ %456, %452 ]
  br label %461

461:                                              ; preds = %458, %461
  %462 = phi i64 [ %466, %461 ], [ %459, %458 ]
  %463 = phi i64 [ %465, %461 ], [ %460, %458 ]
  %464 = shl nuw i64 1, %462
  %465 = or i64 %464, %463
  %466 = add nuw nsw i64 %462, 1
  %467 = icmp ult i64 %466, %418
  br i1 %467, label %461, label %468, !llvm.loop !220

468:                                              ; preds = %461, %452
  %469 = phi i64 [ %456, %452 ], [ %465, %461 ]
  store i64 %469, ptr @reg_used_in_insn, align 8, !tbaa !40
  br label %470

470:                                              ; preds = %468, %405, %399
  %471 = lshr i64 %392, 1
  %472 = add i32 %393, 1
  br label %344, !llvm.loop !49

473:                                              ; preds = %384
  %474 = load ptr, ptr %273, align 8, !tbaa !37
  %475 = icmp eq ptr %474, null
  %476 = select i1 %475, ptr @bitmap_zero_bits, ptr %474
  %477 = getelementptr inbounds %struct.bitmap_element_def, ptr %476, i64 0, i32 2
  %478 = load i32, ptr %477, align 8, !tbaa !38
  %479 = icmp eq i32 %478, 0
  %480 = shl i32 %478, 7
  %481 = select i1 %479, i32 53, i32 %480
  %482 = getelementptr inbounds %struct.bitmap_element_def, ptr %476, i64 0, i32 3, i64 0
  %483 = load i64, ptr %482, align 8, !tbaa !40
  %484 = and i32 %481, 53
  %485 = zext i32 %484 to i64
  %486 = lshr i64 %483, %485
  %487 = icmp eq i64 %486, 0
  %488 = zext i1 %487 to i32
  %489 = add nuw nsw i32 %481, %488
  br label %490

490:                                              ; preds = %616, %473
  %491 = phi i64 [ %486, %473 ], [ %617, %616 ]
  %492 = phi i32 [ 0, %473 ], [ %498, %616 ]
  %493 = phi i32 [ %489, %473 ], [ %618, %616 ]
  %494 = phi ptr [ %476, %473 ], [ %500, %616 ]
  %495 = icmp eq i64 %491, 0
  br i1 %495, label %510, label %496

496:                                              ; preds = %519, %490
  %497 = phi i64 [ %491, %490 ], [ %524, %519 ]
  %498 = phi i32 [ %492, %490 ], [ %520, %519 ]
  %499 = phi i32 [ %493, %490 ], [ %521, %519 ]
  %500 = phi ptr [ %494, %490 ], [ %516, %519 ]
  %501 = and i64 %497, 1
  %502 = icmp eq i64 %501, 0
  br i1 %502, label %503, label %537

503:                                              ; preds = %496, %503
  %504 = phi i32 [ %507, %503 ], [ %499, %496 ]
  %505 = phi i64 [ %506, %503 ], [ %497, %496 ]
  %506 = lshr i64 %505, 1
  %507 = add i32 %504, 1
  %508 = and i64 %505, 2
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %503, label %537, !llvm.loop !41

510:                                              ; preds = %490
  %511 = add i32 %493, 63
  %512 = and i32 %511, -64
  %513 = add i32 %492, 1
  br label %514

514:                                              ; preds = %533, %510
  %515 = phi i32 [ %512, %510 ], [ %536, %533 ]
  %516 = phi ptr [ %494, %510 ], [ %531, %533 ]
  %517 = phi i32 [ %513, %510 ], [ 0, %533 ]
  %518 = icmp eq i32 %517, 2
  br i1 %518, label %530, label %519

519:                                              ; preds = %514, %526
  %520 = phi i32 [ %528, %526 ], [ %517, %514 ]
  %521 = phi i32 [ %527, %526 ], [ %515, %514 ]
  %522 = zext i32 %520 to i64
  %523 = getelementptr inbounds %struct.bitmap_element_def, ptr %516, i64 0, i32 3, i64 %522
  %524 = load i64, ptr %523, align 8, !tbaa !40
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %496

526:                                              ; preds = %519
  %527 = add i32 %521, 64
  %528 = add i32 %520, 1
  %529 = icmp eq i32 %528, 2
  br i1 %529, label %530, label %519, !llvm.loop !42

530:                                              ; preds = %526, %514
  %531 = load ptr, ptr %516, align 8, !tbaa !43
  %532 = icmp eq ptr %531, null
  br i1 %532, label %619, label %533

533:                                              ; preds = %530
  %534 = getelementptr inbounds %struct.bitmap_element_def, ptr %531, i64 0, i32 2
  %535 = load i32, ptr %534, align 8, !tbaa !38
  %536 = shl i32 %535, 7
  br label %514

537:                                              ; preds = %503, %496
  %538 = phi i64 [ %497, %496 ], [ %506, %503 ]
  %539 = phi i32 [ %499, %496 ], [ %507, %503 ]
  %540 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %541 = zext i32 %539 to i64
  %542 = getelementptr inbounds i16, ptr %540, i64 %541
  %543 = load i16, ptr %542, align 2, !tbaa !44
  %544 = icmp slt i16 %543, 0
  br i1 %544, label %545, label %552

545:                                              ; preds = %537
  %546 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %547 = icmp ne i8 %546, 0
  %548 = load i32, ptr @reload_completed, align 4
  %549 = icmp ne i32 %548, 0
  %550 = select i1 %547, i1 true, i1 %549
  br i1 %550, label %616, label %551

551:                                              ; preds = %545
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 575, ptr noundef nonnull @.str.2) #19
  br label %616

552:                                              ; preds = %537
  %553 = zext i16 %543 to i64
  %554 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %555 = getelementptr inbounds ptr, ptr %554, i64 %541
  %556 = load ptr, ptr %555, align 8, !tbaa !6
  %557 = load i32, ptr %556, align 8
  %558 = lshr i32 %557, 16
  %559 = and i32 %558, 255
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %553, i64 %560
  %562 = load i8, ptr %561, align 1, !tbaa !17
  %563 = zext i8 %562 to i64
  %564 = add nuw nsw i64 %563, %553
  %565 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %566 = add nuw nsw i64 %553, 1
  %567 = call i64 @llvm.umax.i64(i64 %564, i64 %566)
  %568 = sub nsw i64 %567, %553
  %569 = icmp ult i64 %568, 8
  br i1 %569, label %604, label %570

570:                                              ; preds = %552
  %571 = and i64 %568, -8
  %572 = add nsw i64 %571, %553
  %573 = insertelement <2 x i64> poison, i64 %553, i64 0
  %574 = shufflevector <2 x i64> %573, <2 x i64> poison, <2 x i32> zeroinitializer
  %575 = add nuw nsw <2 x i64> %574, <i64 0, i64 1>
  %576 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %565, i64 0
  br label %577

577:                                              ; preds = %577, %570
  %578 = phi i64 [ 0, %570 ], [ %595, %577 ]
  %579 = phi <2 x i64> [ %575, %570 ], [ %596, %577 ]
  %580 = phi <2 x i64> [ %576, %570 ], [ %591, %577 ]
  %581 = phi <2 x i64> [ zeroinitializer, %570 ], [ %592, %577 ]
  %582 = phi <2 x i64> [ zeroinitializer, %570 ], [ %593, %577 ]
  %583 = phi <2 x i64> [ zeroinitializer, %570 ], [ %594, %577 ]
  %584 = add <2 x i64> %579, <i64 2, i64 2>
  %585 = add <2 x i64> %579, <i64 4, i64 4>
  %586 = add <2 x i64> %579, <i64 6, i64 6>
  %587 = shl nuw <2 x i64> <i64 1, i64 1>, %579
  %588 = shl nuw <2 x i64> <i64 1, i64 1>, %584
  %589 = shl nuw <2 x i64> <i64 1, i64 1>, %585
  %590 = shl nuw <2 x i64> <i64 1, i64 1>, %586
  %591 = or <2 x i64> %587, %580
  %592 = or <2 x i64> %588, %581
  %593 = or <2 x i64> %589, %582
  %594 = or <2 x i64> %590, %583
  %595 = add nuw i64 %578, 8
  %596 = add <2 x i64> %579, <i64 8, i64 8>
  %597 = icmp eq i64 %595, %571
  br i1 %597, label %598, label %577, !llvm.loop !221

598:                                              ; preds = %577
  %599 = or <2 x i64> %592, %591
  %600 = or <2 x i64> %593, %599
  %601 = or <2 x i64> %594, %600
  %602 = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %601)
  %603 = icmp eq i64 %568, %571
  br i1 %603, label %614, label %604

604:                                              ; preds = %552, %598
  %605 = phi i64 [ %553, %552 ], [ %572, %598 ]
  %606 = phi i64 [ %565, %552 ], [ %602, %598 ]
  br label %607

607:                                              ; preds = %604, %607
  %608 = phi i64 [ %612, %607 ], [ %605, %604 ]
  %609 = phi i64 [ %611, %607 ], [ %606, %604 ]
  %610 = shl nuw i64 1, %608
  %611 = or i64 %610, %609
  %612 = add nuw nsw i64 %608, 1
  %613 = icmp ult i64 %612, %564
  br i1 %613, label %607, label %614, !llvm.loop !222

614:                                              ; preds = %607, %598
  %615 = phi i64 [ %602, %598 ], [ %611, %607 ]
  store i64 %615, ptr @reg_used_in_insn, align 8, !tbaa !40
  br label %616

616:                                              ; preds = %614, %551, %545
  %617 = lshr i64 %538, 1
  %618 = add i32 %539, 1
  br label %490, !llvm.loop !49

619:                                              ; preds = %530
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #19
  %620 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %621 = icmp sgt i32 %620, 0
  br i1 %621, label %622, label %625

622:                                              ; preds = %619
  %623 = zext i32 %620 to i64
  %624 = shl nuw nsw i64 %623, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_output, i8 0, i64 %624, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_input, i8 0, i64 %624, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_input_addr, i8 0, i64 %624, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_inpaddr_addr, i8 0, i64 %624, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_output_addr, i8 0, i64 %624, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_outaddr_addr, i8 0, i64 %624, i1 false), !tbaa !40
  br label %625

625:                                              ; preds = %622, %619
  %626 = load i64, ptr %274, align 8, !tbaa !176
  %627 = xor i64 %626, -1
  store i64 %627, ptr @reload_reg_unavailable, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  %628 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %629 = icmp sgt i32 %628, 0
  br i1 %629, label %630, label %2042

630:                                              ; preds = %625
  %631 = zext i32 %628 to i64
  %632 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %633 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %634 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %635 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %636 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %637 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %638

638:                                              ; preds = %630, %744
  %639 = phi i64 [ %745, %744 ], [ %637, %630 ]
  %640 = phi i64 [ %746, %744 ], [ %636, %630 ]
  %641 = phi i64 [ %747, %744 ], [ %635, %630 ]
  %642 = phi i64 [ %748, %744 ], [ %634, %630 ]
  %643 = phi i64 [ %749, %744 ], [ %633, %630 ]
  %644 = phi i64 [ %750, %744 ], [ %632, %630 ]
  %645 = phi i64 [ %751, %744 ], [ 0, %630 ]
  %646 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %645, i32 11
  %647 = load ptr, ptr %646, align 8, !tbaa !139
  %648 = icmp eq ptr %647, null
  br i1 %648, label %744, label %649

649:                                              ; preds = %638
  %650 = getelementptr i8, ptr %647, i64 8
  %651 = load i32, ptr %650, align 8, !tbaa !17
  %652 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %645, i32 17
  %653 = load i32, ptr %652, align 4, !tbaa !155
  %654 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %645, i32 5
  %655 = load i32, ptr %654, align 4, !tbaa !158
  %656 = zext i32 %651 to i64
  %657 = zext i32 %655 to i64
  %658 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %656, i64 %657
  %659 = load i8, ptr %658, align 1, !tbaa !17
  %660 = zext i8 %659 to i32
  %661 = add i32 %651, %660
  %662 = icmp ugt i32 %661, %651
  br i1 %662, label %663, label %744

663:                                              ; preds = %649
  %664 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %645, i32 12
  %665 = load i32, ptr %664, align 8, !tbaa !156
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %666
  %668 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %666
  %669 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %666
  %670 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %666
  %671 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %666
  %672 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %666
  %673 = zext i32 %661 to i64
  br label %674

674:                                              ; preds = %728, %663
  %675 = phi i64 [ %639, %663 ], [ %729, %728 ]
  %676 = phi i64 [ %640, %663 ], [ %730, %728 ]
  %677 = phi i64 [ %641, %663 ], [ %731, %728 ]
  %678 = phi i64 [ %642, %663 ], [ %732, %728 ]
  %679 = phi i64 [ %643, %663 ], [ %733, %728 ]
  %680 = phi i64 [ %656, %663 ], [ %741, %728 ]
  %681 = phi i64 [ %639, %663 ], [ %739, %728 ]
  %682 = phi i64 [ %640, %663 ], [ %738, %728 ]
  %683 = phi i64 [ %641, %663 ], [ %737, %728 ]
  %684 = phi i64 [ %642, %663 ], [ %736, %728 ]
  %685 = phi i64 [ %643, %663 ], [ %735, %728 ]
  %686 = phi i64 [ %644, %663 ], [ %740, %728 ]
  switch i32 %653, label %687 [
    i32 9, label %689
    i32 3, label %692
    i32 4, label %696
    i32 5, label %700
    i32 6, label %704
    i32 7, label %708
    i32 8, label %711
    i32 10, label %714
    i32 0, label %717
    i32 1, label %721
    i32 2, label %725
  ]

687:                                              ; preds = %674
  %688 = shl nuw i64 1, %680
  br label %728

689:                                              ; preds = %674
  %690 = shl nuw i64 1, %680
  %691 = or i64 %685, %690
  store i64 %691, ptr @reload_reg_used, align 8, !tbaa !40
  br label %728

692:                                              ; preds = %674
  %693 = shl nuw i64 1, %680
  %694 = load i64, ptr %672, align 8, !tbaa !40
  %695 = or i64 %694, %693
  store i64 %695, ptr %672, align 8, !tbaa !40
  br label %728

696:                                              ; preds = %674
  %697 = shl nuw i64 1, %680
  %698 = load i64, ptr %671, align 8, !tbaa !40
  %699 = or i64 %698, %697
  store i64 %699, ptr %671, align 8, !tbaa !40
  br label %728

700:                                              ; preds = %674
  %701 = shl nuw i64 1, %680
  %702 = load i64, ptr %670, align 8, !tbaa !40
  %703 = or i64 %702, %701
  store i64 %703, ptr %670, align 8, !tbaa !40
  br label %728

704:                                              ; preds = %674
  %705 = shl nuw i64 1, %680
  %706 = load i64, ptr %669, align 8, !tbaa !40
  %707 = or i64 %706, %705
  store i64 %707, ptr %669, align 8, !tbaa !40
  br label %728

708:                                              ; preds = %674
  %709 = shl nuw i64 1, %680
  %710 = or i64 %684, %709
  store i64 %710, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  br label %728

711:                                              ; preds = %674
  %712 = shl nuw i64 1, %680
  %713 = or i64 %683, %712
  store i64 %713, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  br label %728

714:                                              ; preds = %674
  %715 = shl nuw i64 1, %680
  %716 = or i64 %682, %715
  store i64 %716, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  br label %728

717:                                              ; preds = %674
  %718 = shl nuw i64 1, %680
  %719 = load i64, ptr %668, align 8, !tbaa !40
  %720 = or i64 %719, %718
  store i64 %720, ptr %668, align 8, !tbaa !40
  br label %728

721:                                              ; preds = %674
  %722 = shl nuw i64 1, %680
  %723 = load i64, ptr %667, align 8, !tbaa !40
  %724 = or i64 %723, %722
  store i64 %724, ptr %667, align 8, !tbaa !40
  br label %728

725:                                              ; preds = %674
  %726 = shl nuw i64 1, %680
  %727 = or i64 %681, %726
  store i64 %727, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %728

728:                                              ; preds = %725, %721, %717, %714, %711, %708, %704, %700, %696, %692, %689, %687
  %729 = phi i64 [ %675, %687 ], [ %727, %725 ], [ %675, %721 ], [ %675, %717 ], [ %675, %714 ], [ %675, %711 ], [ %675, %708 ], [ %675, %704 ], [ %675, %700 ], [ %675, %696 ], [ %675, %692 ], [ %675, %689 ]
  %730 = phi i64 [ %676, %687 ], [ %676, %725 ], [ %676, %721 ], [ %676, %717 ], [ %716, %714 ], [ %676, %711 ], [ %676, %708 ], [ %676, %704 ], [ %676, %700 ], [ %676, %696 ], [ %676, %692 ], [ %676, %689 ]
  %731 = phi i64 [ %677, %687 ], [ %677, %725 ], [ %677, %721 ], [ %677, %717 ], [ %677, %714 ], [ %713, %711 ], [ %677, %708 ], [ %677, %704 ], [ %677, %700 ], [ %677, %696 ], [ %677, %692 ], [ %677, %689 ]
  %732 = phi i64 [ %678, %687 ], [ %678, %725 ], [ %678, %721 ], [ %678, %717 ], [ %678, %714 ], [ %678, %711 ], [ %710, %708 ], [ %678, %704 ], [ %678, %700 ], [ %678, %696 ], [ %678, %692 ], [ %678, %689 ]
  %733 = phi i64 [ %679, %687 ], [ %679, %725 ], [ %679, %721 ], [ %679, %717 ], [ %679, %714 ], [ %679, %711 ], [ %679, %708 ], [ %679, %704 ], [ %679, %700 ], [ %679, %696 ], [ %679, %692 ], [ %691, %689 ]
  %734 = phi i64 [ %688, %687 ], [ %726, %725 ], [ %722, %721 ], [ %718, %717 ], [ %715, %714 ], [ %712, %711 ], [ %709, %708 ], [ %705, %704 ], [ %701, %700 ], [ %697, %696 ], [ %693, %692 ], [ %690, %689 ]
  %735 = phi i64 [ %685, %687 ], [ %685, %725 ], [ %685, %721 ], [ %685, %717 ], [ %685, %714 ], [ %685, %711 ], [ %685, %708 ], [ %685, %704 ], [ %685, %700 ], [ %685, %696 ], [ %685, %692 ], [ %691, %689 ]
  %736 = phi i64 [ %684, %687 ], [ %684, %725 ], [ %684, %721 ], [ %684, %717 ], [ %684, %714 ], [ %684, %711 ], [ %710, %708 ], [ %684, %704 ], [ %684, %700 ], [ %684, %696 ], [ %684, %692 ], [ %684, %689 ]
  %737 = phi i64 [ %683, %687 ], [ %683, %725 ], [ %683, %721 ], [ %683, %717 ], [ %683, %714 ], [ %713, %711 ], [ %683, %708 ], [ %683, %704 ], [ %683, %700 ], [ %683, %696 ], [ %683, %692 ], [ %683, %689 ]
  %738 = phi i64 [ %682, %687 ], [ %682, %725 ], [ %682, %721 ], [ %682, %717 ], [ %716, %714 ], [ %682, %711 ], [ %682, %708 ], [ %682, %704 ], [ %682, %700 ], [ %682, %696 ], [ %682, %692 ], [ %682, %689 ]
  %739 = phi i64 [ %681, %687 ], [ %727, %725 ], [ %681, %721 ], [ %681, %717 ], [ %681, %714 ], [ %681, %711 ], [ %681, %708 ], [ %681, %704 ], [ %681, %700 ], [ %681, %696 ], [ %681, %692 ], [ %681, %689 ]
  %740 = or i64 %734, %686
  %741 = add nuw nsw i64 %680, 1
  %742 = icmp eq i64 %741, %673
  br i1 %742, label %743, label %674, !llvm.loop !223

743:                                              ; preds = %728
  store i64 %740, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  br label %744

744:                                              ; preds = %743, %649, %638
  %745 = phi i64 [ %729, %743 ], [ %639, %649 ], [ %639, %638 ]
  %746 = phi i64 [ %730, %743 ], [ %640, %649 ], [ %640, %638 ]
  %747 = phi i64 [ %731, %743 ], [ %641, %649 ], [ %641, %638 ]
  %748 = phi i64 [ %732, %743 ], [ %642, %649 ], [ %642, %638 ]
  %749 = phi i64 [ %733, %743 ], [ %643, %649 ], [ %643, %638 ]
  %750 = phi i64 [ %740, %743 ], [ %644, %649 ], [ %644, %638 ]
  %751 = add nuw nsw i64 %645, 1
  %752 = icmp eq i64 %751, %631
  br i1 %752, label %753, label %638, !llvm.loop !224

753:                                              ; preds = %744
  %754 = icmp eq i32 %280, 0
  br label %757

755:                                              ; preds = %1637
  %756 = icmp sgt i32 %1639, 0
  br i1 %756, label %1642, label %2042

757:                                              ; preds = %1637, %753
  %758 = phi i64 [ 0, %753 ], [ %1638, %1637 ]
  %759 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %758
  %760 = load i16, ptr %759, align 2, !tbaa !44
  %761 = sext i16 %760 to i32
  %762 = sext i16 %760 to i64
  %763 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762
  %764 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 1
  %765 = load ptr, ptr %764, align 8, !tbaa !152
  %766 = icmp eq ptr %765, null
  %767 = load ptr, ptr %763, align 8, !tbaa !153
  %768 = icmp eq ptr %767, null
  br i1 %766, label %769, label %776

769:                                              ; preds = %757
  br i1 %768, label %770, label %777

770:                                              ; preds = %769
  %771 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 18
  %772 = load i8, ptr %771, align 8
  %773 = and i8 %772, 4
  %774 = icmp eq i8 %773, 0
  %775 = select i1 %774, i1 true, i1 %754
  br i1 %775, label %1637, label %799

776:                                              ; preds = %757
  br i1 %768, label %798, label %777

777:                                              ; preds = %776, %769
  %778 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 11
  %779 = load ptr, ptr %778, align 8, !tbaa !139
  %780 = icmp eq ptr %779, null
  br i1 %780, label %798, label %781

781:                                              ; preds = %777
  %782 = call i32 @rtx_equal_p(ptr noundef nonnull %767, ptr noundef nonnull %779) #19
  %783 = icmp eq i32 %782, 0
  br i1 %783, label %784, label %1637

784:                                              ; preds = %781
  %785 = load ptr, ptr %764, align 8, !tbaa !152
  %786 = load ptr, ptr %778, align 8, !tbaa !139
  %787 = call i32 @rtx_equal_p(ptr noundef %785, ptr noundef %786) #19
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %798, label %789

789:                                              ; preds = %784
  %790 = load ptr, ptr %763, align 8, !tbaa !153
  %791 = load i32, ptr %790, align 8
  %792 = and i32 %791, 65535
  %793 = icmp eq i32 %792, 43
  br i1 %793, label %798, label %794

794:                                              ; preds = %789
  %795 = call i32 @true_regnum(ptr noundef nonnull %790) #19
  %796 = icmp slt i32 %795, 53
  %797 = or i1 %754, %796
  br i1 %797, label %1637, label %799

798:                                              ; preds = %789, %784, %777, %776
  br i1 %754, label %1637, label %799

799:                                              ; preds = %798, %794, %770
  %800 = load ptr, ptr %763, align 8, !tbaa !153
  %801 = icmp eq ptr %800, null
  br i1 %801, label %1270, label %802

802:                                              ; preds = %799
  %803 = load i32, ptr %800, align 8
  %804 = and i32 %803, 65535
  %805 = icmp eq i32 %804, 37
  br i1 %805, label %806, label %809

806:                                              ; preds = %802
  %807 = getelementptr i8, ptr %800, i64 8
  %808 = load i32, ptr %807, align 8, !tbaa !17
  br label %834

809:                                              ; preds = %802
  %810 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 8
  %811 = load ptr, ptr %810, align 8, !tbaa !225
  %812 = load i32, ptr %811, align 8
  %813 = trunc i32 %812 to i16
  switch i16 %813, label %1238 [
    i16 37, label %814
    i16 39, label %817
  ]

814:                                              ; preds = %809
  %815 = getelementptr i8, ptr %811, i64 8
  %816 = load i32, ptr %815, align 8, !tbaa !17
  br label %834

817:                                              ; preds = %809
  %818 = getelementptr inbounds %struct.rtx_def, ptr %811, i64 0, i32 1
  %819 = load ptr, ptr %818, align 8, !tbaa !17
  %820 = load i32, ptr %819, align 8
  %821 = and i32 %820, 65535
  %822 = icmp eq i32 %821, 37
  br i1 %822, label %823, label %1238

823:                                              ; preds = %817
  %824 = getelementptr i8, ptr %819, i64 8
  %825 = load i32, ptr %824, align 8, !tbaa !17
  %826 = icmp slt i32 %825, 53
  br i1 %826, label %827, label %831

827:                                              ; preds = %823
  %828 = call i32 @subreg_regno(ptr noundef nonnull %811) #19
  %829 = load ptr, ptr %810, align 8, !tbaa !225
  %830 = load i32, ptr %829, align 8
  br label %834

831:                                              ; preds = %823
  %832 = getelementptr inbounds %struct.rtx_def, ptr %811, i64 0, i32 1, i32 0, i32 0, i64 1
  %833 = load i32, ptr %832, align 8, !tbaa !17
  br label %838

834:                                              ; preds = %827, %814, %806
  %835 = phi i32 [ %803, %806 ], [ %812, %814 ], [ %830, %827 ]
  %836 = phi i32 [ %808, %806 ], [ %816, %814 ], [ %828, %827 ]
  %837 = icmp sgt i32 %836, -1
  br i1 %837, label %838, label %1238

838:                                              ; preds = %834, %831
  %839 = phi i32 [ %812, %831 ], [ %835, %834 ]
  %840 = phi i32 [ %833, %831 ], [ 0, %834 ]
  %841 = phi i32 [ %825, %831 ], [ %836, %834 ]
  %842 = lshr i32 %839, 16
  %843 = and i32 %842, 255
  %844 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %845 = zext i32 %841 to i64
  %846 = getelementptr inbounds ptr, ptr %844, i64 %845
  %847 = load ptr, ptr %846, align 8, !tbaa !6
  %848 = icmp eq ptr %847, null
  br i1 %848, label %1238, label %849

849:                                              ; preds = %838
  %850 = load i32, ptr %847, align 8
  %851 = lshr i32 %850, 16
  %852 = and i32 %851, 255
  %853 = getelementptr i8, ptr %847, i64 8
  %854 = load i32, ptr %853, align 8, !tbaa !17
  %855 = zext i32 %854 to i64
  %856 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %855
  %857 = load i32, ptr %856, align 4, !tbaa !17
  %858 = call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %852, i32 noundef %843, i32 noundef %857) #19
  %859 = icmp eq i8 %858, 0
  br i1 %859, label %860, label %1238

860:                                              ; preds = %849
  %861 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 2
  %862 = load i32, ptr %861, align 8, !tbaa !154
  %863 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %864 = getelementptr inbounds ptr, ptr %863, i64 %845
  %865 = load ptr, ptr %864, align 8, !tbaa !6
  %866 = getelementptr i8, ptr %865, i64 8
  %867 = load i32, ptr %866, align 8, !tbaa !17
  %868 = load i32, ptr %865, align 8
  %869 = lshr i32 %868, 16
  %870 = and i32 %869, 255
  %871 = call i32 @subreg_regno_offset(i32 noundef %867, i32 noundef %870, i32 noundef %840, i32 noundef %843) #19
  %872 = add i32 %871, %867
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !17
  %876 = icmp eq i32 %840, 0
  br i1 %876, label %890, label %877

877:                                              ; preds = %860
  %878 = zext i32 %843 to i64
  %879 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %878
  %880 = load i8, ptr %879, align 1, !tbaa !17
  %881 = zext i8 %880 to i32
  %882 = add i32 %840, %881
  %883 = shl i32 %882, 3
  %884 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %878
  %885 = load i8, ptr %884, align 1, !tbaa !17
  %886 = icmp eq i8 %885, 3
  %887 = select i1 %886, i8 2, i8 %885
  %888 = zext i8 %887 to i32
  %889 = call i32 @smallest_mode_for_size(i32 noundef %883, i32 noundef %888) #19
  br label %890

890:                                              ; preds = %877, %860
  %891 = phi i32 [ %889, %877 ], [ %843, %860 ]
  %892 = load i32, ptr %865, align 8
  %893 = lshr i32 %892, 16
  %894 = and i32 %893, 255
  %895 = zext i32 %894 to i64
  %896 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %895
  %897 = load i8, ptr %896, align 1, !tbaa !17
  %898 = zext i32 %891 to i64
  %899 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %898
  %900 = load i8, ptr %899, align 1, !tbaa !17
  %901 = icmp ult i8 %897, %900
  br i1 %901, label %1238, label %902

902:                                              ; preds = %890
  %903 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %873
  %904 = load i32, ptr %903, align 4, !tbaa !21
  %905 = icmp eq i32 %904, %841
  br i1 %905, label %906, label %1238

906:                                              ; preds = %902
  %907 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %908 = zext i32 %872 to i64
  %909 = shl nuw i64 1, %908
  %910 = and i64 %907, %909
  %911 = icmp eq i64 %910, 0
  br i1 %911, label %1238, label %912

912:                                              ; preds = %906
  %913 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 5
  %914 = load i32, ptr %913, align 4, !tbaa !158
  %915 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %872, i32 noundef %914) #19
  %916 = icmp eq i8 %915, 0
  br i1 %916, label %1238, label %917

917:                                              ; preds = %912
  %918 = sext i32 %862 to i64
  %919 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %918
  %920 = load i64, ptr %919, align 8, !tbaa !40
  %921 = and i64 %920, %909
  %922 = icmp eq i64 %921, 0
  br i1 %922, label %923, label %933

923:                                              ; preds = %917
  %924 = call i32 @ix86_register_move_cost(i32 noundef %843, i32 noundef %875, i32 noundef %862) #19
  %925 = call i32 @ix86_memory_move_cost(i32 noundef %843, i32 noundef %862, i32 noundef 1) #19
  %926 = icmp slt i32 %924, %925
  br i1 %926, label %927, label %1238

927:                                              ; preds = %923
  %928 = call i32 @secondary_reload_class(i8 noundef zeroext 1, i32 noundef %862, i32 noundef %843, ptr noundef nonnull %865) #19
  %929 = icmp eq i32 %928, 0
  br i1 %929, label %930, label %1238

930:                                              ; preds = %927
  %931 = call i32 @ix86_secondary_memory_needed(i32 noundef %875, i32 noundef %862, i32 noundef %843, i32 noundef 1) #19
  %932 = icmp eq i32 %931, 0
  br i1 %932, label %933, label %1238

933:                                              ; preds = %930, %917
  %934 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 6
  %935 = load i32, ptr %934, align 8, !tbaa !142
  %936 = icmp eq i32 %935, %253
  br i1 %936, label %941, label %937

937:                                              ; preds = %933
  %938 = load i64, ptr %270, align 8, !tbaa !40
  %939 = and i64 %938, %909
  %940 = icmp eq i64 %939, 0
  br i1 %940, label %941, label %1238

941:                                              ; preds = %937, %933
  %942 = load i32, ptr %913, align 4, !tbaa !158
  %943 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 12
  %944 = load i32, ptr %943, align 8, !tbaa !156
  %945 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 17
  %946 = load i32, ptr %945, align 4, !tbaa !155
  %947 = load ptr, ptr %763, align 8, !tbaa !153
  %948 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !6
  %949 = call fastcc i32 @free_for_value_p(i32 noundef %872, i32 noundef %942, i32 noundef %944, i32 noundef %946, ptr noundef %947, ptr noundef %948, i32 noundef %761, i32 noundef 1), !range !122
  %950 = icmp eq i32 %949, 0
  br i1 %950, label %1238, label %951

951:                                              ; preds = %941
  %952 = load i32, ptr %913, align 4, !tbaa !158
  %953 = zext i32 %952 to i64
  %954 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %873, i64 %953
  %955 = load i8, ptr %954, align 1, !tbaa !17
  %956 = zext i8 %955 to i32
  %957 = icmp ugt i8 %955, 1
  br i1 %957, label %958, label %977

958:                                              ; preds = %951
  %959 = load i64, ptr @reg_reloaded_valid, align 8
  %960 = zext i8 %955 to i64
  br label %961

961:                                              ; preds = %972, %958
  %962 = phi i64 [ 1, %958 ], [ %973, %972 ]
  %963 = add nsw i64 %962, %873
  %964 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %963
  %965 = load i32, ptr %964, align 4, !tbaa !21
  %966 = icmp eq i32 %965, %841
  br i1 %966, label %967, label %975

967:                                              ; preds = %961
  %968 = and i64 %963, 4294967295
  %969 = shl nuw i64 1, %968
  %970 = and i64 %969, %959
  %971 = icmp eq i64 %970, 0
  br i1 %971, label %975, label %972

972:                                              ; preds = %967
  %973 = add nuw nsw i64 %962, 1
  %974 = icmp eq i64 %973, %960
  br i1 %974, label %980, label %961, !llvm.loop !226

975:                                              ; preds = %967, %961
  %976 = trunc i64 %962 to i32
  br label %977

977:                                              ; preds = %975, %951
  %978 = phi i32 [ 1, %951 ], [ %976, %975 ]
  %979 = icmp eq i32 %978, %956
  br i1 %979, label %980, label %1238

980:                                              ; preds = %972, %977
  %981 = load i32, ptr %865, align 8
  %982 = lshr i32 %981, 16
  %983 = and i32 %982, 255
  %984 = icmp eq i32 %983, %843
  br i1 %984, label %987, label %985

985:                                              ; preds = %980
  %986 = call ptr @gen_rtx_REG(i32 noundef %843, i32 noundef %872) #19
  br label %987

987:                                              ; preds = %985, %980
  %988 = phi ptr [ %986, %985 ], [ %865, %980 ]
  %989 = icmp eq i8 %955, 0
  br i1 %989, label %1065, label %990

990:                                              ; preds = %987
  %991 = load i32, ptr %861, align 8, !tbaa !154
  %992 = sext i32 %991 to i64
  %993 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %992
  %994 = load i64, ptr %993, align 8, !tbaa !40
  %995 = zext i8 %955 to i64
  %996 = icmp ult i8 %955, 8
  br i1 %996, label %1062, label %997

997:                                              ; preds = %990
  %998 = and i64 %995, 248
  %999 = insertelement <2 x i32> poison, i32 %872, i64 0
  %1000 = shufflevector <2 x i32> %999, <2 x i32> poison, <2 x i32> zeroinitializer
  %1001 = insertelement <2 x i64> poison, i64 %994, i64 0
  %1002 = shufflevector <2 x i64> %1001, <2 x i64> poison, <2 x i32> zeroinitializer
  %1003 = insertelement <2 x i64> poison, i64 %994, i64 0
  %1004 = shufflevector <2 x i64> %1003, <2 x i64> poison, <2 x i32> zeroinitializer
  %1005 = insertelement <2 x i64> poison, i64 %994, i64 0
  %1006 = shufflevector <2 x i64> %1005, <2 x i64> poison, <2 x i32> zeroinitializer
  %1007 = insertelement <2 x i64> poison, i64 %994, i64 0
  %1008 = shufflevector <2 x i64> %1007, <2 x i64> poison, <2 x i32> zeroinitializer
  %1009 = add i32 %872, 2
  %1010 = insertelement <2 x i32> poison, i32 %1009, i64 0
  %1011 = shufflevector <2 x i32> %1010, <2 x i32> poison, <2 x i32> zeroinitializer
  %1012 = add i32 %872, 4
  %1013 = insertelement <2 x i32> poison, i32 %1012, i64 0
  %1014 = shufflevector <2 x i32> %1013, <2 x i32> poison, <2 x i32> zeroinitializer
  %1015 = add i32 %872, 6
  %1016 = insertelement <2 x i32> poison, i32 %1015, i64 0
  %1017 = shufflevector <2 x i32> %1016, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %1018

1018:                                             ; preds = %1018, %997
  %1019 = phi i64 [ 0, %997 ], [ %1053, %1018 ]
  %1020 = phi <2 x i32> [ zeroinitializer, %997 ], [ %1049, %1018 ]
  %1021 = phi <2 x i32> [ zeroinitializer, %997 ], [ %1050, %1018 ]
  %1022 = phi <2 x i32> [ zeroinitializer, %997 ], [ %1051, %1018 ]
  %1023 = phi <2 x i32> [ zeroinitializer, %997 ], [ %1052, %1018 ]
  %1024 = phi <2 x i32> [ <i32 0, i32 1>, %997 ], [ %1054, %1018 ]
  %1025 = add nsw <2 x i32> %1000, %1024
  %1026 = add <2 x i32> %1011, %1024
  %1027 = add <2 x i32> %1014, %1024
  %1028 = add <2 x i32> %1017, %1024
  %1029 = zext <2 x i32> %1025 to <2 x i64>
  %1030 = zext <2 x i32> %1026 to <2 x i64>
  %1031 = zext <2 x i32> %1027 to <2 x i64>
  %1032 = zext <2 x i32> %1028 to <2 x i64>
  %1033 = shl nuw <2 x i64> <i64 1, i64 1>, %1029
  %1034 = shl nuw <2 x i64> <i64 1, i64 1>, %1030
  %1035 = shl nuw <2 x i64> <i64 1, i64 1>, %1031
  %1036 = shl nuw <2 x i64> <i64 1, i64 1>, %1032
  %1037 = and <2 x i64> %1033, %1002
  %1038 = and <2 x i64> %1034, %1004
  %1039 = and <2 x i64> %1035, %1006
  %1040 = and <2 x i64> %1036, %1008
  %1041 = icmp eq <2 x i64> %1037, zeroinitializer
  %1042 = icmp eq <2 x i64> %1038, zeroinitializer
  %1043 = icmp eq <2 x i64> %1039, zeroinitializer
  %1044 = icmp eq <2 x i64> %1040, zeroinitializer
  %1045 = zext <2 x i1> %1041 to <2 x i32>
  %1046 = zext <2 x i1> %1042 to <2 x i32>
  %1047 = zext <2 x i1> %1043 to <2 x i32>
  %1048 = zext <2 x i1> %1044 to <2 x i32>
  %1049 = or <2 x i32> %1020, %1045
  %1050 = or <2 x i32> %1021, %1046
  %1051 = or <2 x i32> %1022, %1047
  %1052 = or <2 x i32> %1023, %1048
  %1053 = add nuw i64 %1019, 8
  %1054 = add <2 x i32> %1024, <i32 8, i32 8>
  %1055 = icmp eq i64 %1053, %998
  br i1 %1055, label %1056, label %1018, !llvm.loop !227

1056:                                             ; preds = %1018
  %1057 = or <2 x i32> %1050, %1049
  %1058 = or <2 x i32> %1051, %1057
  %1059 = or <2 x i32> %1052, %1058
  %1060 = call i32 @llvm.vector.reduce.or.v2i32(<2 x i32> %1059)
  %1061 = icmp eq i64 %998, %995
  br i1 %1061, label %1065, label %1062

1062:                                             ; preds = %990, %1056
  %1063 = phi i64 [ 0, %990 ], [ %998, %1056 ]
  %1064 = phi i32 [ 0, %990 ], [ %1060, %1056 ]
  br label %1069

1065:                                             ; preds = %1069, %1056, %987
  %1066 = phi i32 [ 0, %987 ], [ %1060, %1056 ], [ %1079, %1069 ]
  %1067 = load i32, ptr @n_earlyclobbers, align 4, !tbaa !21
  %1068 = icmp sgt i32 %1067, 0
  br i1 %1068, label %1082, label %1099

1069:                                             ; preds = %1062, %1069
  %1070 = phi i64 [ %1080, %1069 ], [ %1063, %1062 ]
  %1071 = phi i32 [ %1079, %1069 ], [ %1064, %1062 ]
  %1072 = trunc i64 %1070 to i32
  %1073 = add nsw i32 %872, %1072
  %1074 = zext i32 %1073 to i64
  %1075 = shl nuw i64 1, %1074
  %1076 = and i64 %1075, %994
  %1077 = icmp eq i64 %1076, 0
  %1078 = zext i1 %1077 to i32
  %1079 = or i32 %1071, %1078
  %1080 = add nuw nsw i64 %1070, 1
  %1081 = icmp eq i64 %1080, %995
  br i1 %1081, label %1065, label %1069, !llvm.loop !228

1082:                                             ; preds = %1065, %1092
  %1083 = phi i64 [ %1093, %1092 ], [ 0, %1065 ]
  %1084 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %1085 = getelementptr inbounds ptr, ptr %1084, i64 %845
  %1086 = load ptr, ptr %1085, align 8, !tbaa !6
  %1087 = getelementptr inbounds [30 x ptr], ptr @reload_earlyclobbers, i64 0, i64 %1083
  %1088 = load ptr, ptr %1087, align 8, !tbaa !6
  %1089 = call i32 @reg_overlap_mentioned_for_reload_p(ptr noundef %1086, ptr noundef %1088) #19
  %1090 = icmp eq i32 %1089, 0
  %1091 = load i32, ptr @n_earlyclobbers, align 4, !tbaa !21
  br i1 %1090, label %1092, label %1096

1092:                                             ; preds = %1082
  %1093 = add nuw nsw i64 %1083, 1
  %1094 = sext i32 %1091 to i64
  %1095 = icmp slt i64 %1093, %1094
  br i1 %1095, label %1082, label %1096, !llvm.loop !229

1096:                                             ; preds = %1092, %1082
  %1097 = phi i64 [ %1093, %1092 ], [ %1083, %1082 ]
  %1098 = trunc i64 %1097 to i32
  br label %1099

1099:                                             ; preds = %1096, %1065
  %1100 = phi i32 [ %1067, %1065 ], [ %1091, %1096 ]
  %1101 = phi i32 [ 0, %1065 ], [ %1098, %1096 ]
  %1102 = icmp eq i32 %1101, %1100
  br i1 %1102, label %1103, label %1153

1103:                                             ; preds = %1099
  %1104 = load i32, ptr %913, align 4, !tbaa !158
  %1105 = load i32, ptr %943, align 8, !tbaa !156
  %1106 = load i32, ptr %945, align 4, !tbaa !155
  %1107 = load ptr, ptr %763, align 8, !tbaa !153
  %1108 = load ptr, ptr %764, align 8, !tbaa !152
  %1109 = call fastcc i32 @free_for_value_p(i32 noundef %872, i32 noundef %1104, i32 noundef %1105, i32 noundef %1106, ptr noundef %1107, ptr noundef %1108, i32 noundef %761, i32 noundef 1), !range !122
  %1110 = icmp eq i32 %1109, 0
  br i1 %1110, label %1153, label %1111

1111:                                             ; preds = %1103
  %1112 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %1113 = and i64 %1112, %909
  %1114 = icmp eq i64 %1113, 0
  br i1 %1114, label %1122, label %1115

1115:                                             ; preds = %1111
  %1116 = load ptr, ptr %764, align 8, !tbaa !152
  %1117 = icmp eq ptr %1116, null
  br i1 %1117, label %1122, label %1118

1118:                                             ; preds = %1115
  %1119 = load i64, ptr @reg_reloaded_dead, align 8, !tbaa !40
  %1120 = and i64 %1119, %909
  %1121 = icmp eq i64 %1120, 0
  br i1 %1121, label %1153, label %1122

1122:                                             ; preds = %1118, %1115, %1111
  %1123 = icmp eq i32 %872, 6
  %1124 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %1125 = icmp ne i8 %1124, 0
  %1126 = select i1 %1123, i1 %1125, i1 false
  br i1 %1126, label %1127, label %1130

1127:                                             ; preds = %1122
  %1128 = load ptr, ptr %764, align 8, !tbaa !152
  %1129 = icmp eq ptr %1128, null
  br i1 %1129, label %1130, label %1153

1130:                                             ; preds = %1127, %1122
  %1131 = load i32, ptr %913, align 4, !tbaa !158
  %1132 = zext i32 %1131 to i64
  %1133 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1132
  %1134 = load i8, ptr %1133, align 1, !tbaa !17
  %1135 = zext i32 %843 to i64
  %1136 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %1135
  %1137 = load i8, ptr %1136, align 1, !tbaa !17
  %1138 = icmp ugt i8 %1134, %1137
  %1139 = icmp ne i32 %1066, 0
  %1140 = select i1 %1138, i1 true, i1 %1139
  br i1 %1140, label %1153, label %1141

1141:                                             ; preds = %1130
  %1142 = load ptr, ptr %764, align 8, !tbaa !152
  %1143 = icmp eq ptr %1142, null
  br i1 %1143, label %1163, label %1144

1144:                                             ; preds = %1141
  %1145 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 11
  %1146 = load ptr, ptr %1145, align 8, !tbaa !139
  %1147 = icmp eq ptr %1146, null
  br i1 %1147, label %1163, label %1148

1148:                                             ; preds = %1144
  %1149 = call i32 @rtx_equal_p(ptr noundef nonnull %1142, ptr noundef nonnull %1146) #19
  %1150 = icmp eq i32 %1149, 0
  br i1 %1150, label %1151, label %1153

1151:                                             ; preds = %1148
  %1152 = load i32, ptr %913, align 4, !tbaa !158
  br label %1163

1153:                                             ; preds = %1148, %1130, %1127, %1118, %1103, %1099
  %1154 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 18
  %1155 = load i8, ptr %1154, align 8
  %1156 = and i8 %1155, 1
  %1157 = icmp eq i8 %1156, 0
  br i1 %1157, label %1158, label %1238

1158:                                             ; preds = %1153
  %1159 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %762
  store ptr %988, ptr %1159, align 8, !tbaa !6
  %1160 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %873
  %1161 = load ptr, ptr %1160, align 8, !tbaa !6
  %1162 = getelementptr inbounds [180 x ptr], ptr @reload_inheritance_insn, i64 0, i64 %762
  store ptr %1161, ptr %1162, align 8, !tbaa !6
  br label %1238

1163:                                             ; preds = %1151, %1144, %1141
  %1164 = phi i32 [ %1152, %1151 ], [ %1131, %1144 ], [ %1131, %1141 ]
  %1165 = load i32, ptr %943, align 8, !tbaa !156
  %1166 = load i32, ptr %945, align 4, !tbaa !155
  call fastcc void @mark_reload_reg_in_use(i32 noundef %872, i32 noundef %1165, i32 noundef %1166, i32 noundef %1164)
  %1167 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 11
  store ptr %988, ptr %1167, align 8, !tbaa !139
  %1168 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %762
  store i8 1, ptr %1168, align 1, !tbaa !17
  %1169 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %873
  %1170 = load ptr, ptr %1169, align 8, !tbaa !6
  %1171 = getelementptr inbounds [180 x ptr], ptr @reload_inheritance_insn, i64 0, i64 %762
  store ptr %1170, ptr %1171, align 8, !tbaa !6
  %1172 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %762
  store i32 %872, ptr %1172, align 4, !tbaa !21
  br i1 %989, label %1238, label %1173

1173:                                             ; preds = %1163
  %1174 = load i64, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  %1175 = zext i8 %955 to i64
  %1176 = icmp ult i8 %955, 8
  br i1 %1176, label %1223, label %1177

1177:                                             ; preds = %1173
  %1178 = and i64 %1175, 248
  %1179 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %1174, i64 0
  %1180 = insertelement <2 x i32> poison, i32 %872, i64 0
  %1181 = shufflevector <2 x i32> %1180, <2 x i32> poison, <2 x i32> zeroinitializer
  %1182 = add i32 %872, 2
  %1183 = insertelement <2 x i32> poison, i32 %1182, i64 0
  %1184 = shufflevector <2 x i32> %1183, <2 x i32> poison, <2 x i32> zeroinitializer
  %1185 = add i32 %872, 4
  %1186 = insertelement <2 x i32> poison, i32 %1185, i64 0
  %1187 = shufflevector <2 x i32> %1186, <2 x i32> poison, <2 x i32> zeroinitializer
  %1188 = add i32 %872, 6
  %1189 = insertelement <2 x i32> poison, i32 %1188, i64 0
  %1190 = shufflevector <2 x i32> %1189, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %1191

1191:                                             ; preds = %1191, %1177
  %1192 = phi i64 [ 0, %1177 ], [ %1214, %1191 ]
  %1193 = phi <2 x i64> [ %1179, %1177 ], [ %1210, %1191 ]
  %1194 = phi <2 x i64> [ zeroinitializer, %1177 ], [ %1211, %1191 ]
  %1195 = phi <2 x i64> [ zeroinitializer, %1177 ], [ %1212, %1191 ]
  %1196 = phi <2 x i64> [ zeroinitializer, %1177 ], [ %1213, %1191 ]
  %1197 = phi <2 x i32> [ <i32 0, i32 1>, %1177 ], [ %1215, %1191 ]
  %1198 = add nsw <2 x i32> %1181, %1197
  %1199 = add <2 x i32> %1184, %1197
  %1200 = add <2 x i32> %1187, %1197
  %1201 = add <2 x i32> %1190, %1197
  %1202 = zext <2 x i32> %1198 to <2 x i64>
  %1203 = zext <2 x i32> %1199 to <2 x i64>
  %1204 = zext <2 x i32> %1200 to <2 x i64>
  %1205 = zext <2 x i32> %1201 to <2 x i64>
  %1206 = shl nuw <2 x i64> <i64 1, i64 1>, %1202
  %1207 = shl nuw <2 x i64> <i64 1, i64 1>, %1203
  %1208 = shl nuw <2 x i64> <i64 1, i64 1>, %1204
  %1209 = shl nuw <2 x i64> <i64 1, i64 1>, %1205
  %1210 = or <2 x i64> %1206, %1193
  %1211 = or <2 x i64> %1207, %1194
  %1212 = or <2 x i64> %1208, %1195
  %1213 = or <2 x i64> %1209, %1196
  %1214 = add nuw i64 %1192, 8
  %1215 = add <2 x i32> %1197, <i32 8, i32 8>
  %1216 = icmp eq i64 %1214, %1178
  br i1 %1216, label %1217, label %1191, !llvm.loop !230

1217:                                             ; preds = %1191
  %1218 = or <2 x i64> %1211, %1210
  %1219 = or <2 x i64> %1212, %1218
  %1220 = or <2 x i64> %1213, %1219
  %1221 = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %1220)
  %1222 = icmp eq i64 %1178, %1175
  br i1 %1222, label %1236, label %1223

1223:                                             ; preds = %1173, %1217
  %1224 = phi i64 [ 0, %1173 ], [ %1178, %1217 ]
  %1225 = phi i64 [ %1174, %1173 ], [ %1221, %1217 ]
  br label %1226

1226:                                             ; preds = %1223, %1226
  %1227 = phi i64 [ %1234, %1226 ], [ %1224, %1223 ]
  %1228 = phi i64 [ %1233, %1226 ], [ %1225, %1223 ]
  %1229 = trunc i64 %1227 to i32
  %1230 = add nsw i32 %872, %1229
  %1231 = zext i32 %1230 to i64
  %1232 = shl nuw i64 1, %1231
  %1233 = or i64 %1232, %1228
  %1234 = add nuw nsw i64 %1227, 1
  %1235 = icmp eq i64 %1234, %1175
  br i1 %1235, label %1236, label %1226, !llvm.loop !231

1236:                                             ; preds = %1226, %1217
  %1237 = phi i64 [ %1221, %1217 ], [ %1233, %1226 ]
  store i64 %1237, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  br label %1238

1238:                                             ; preds = %1236, %1163, %1158, %1153, %977, %941, %937, %930, %927, %923, %912, %906, %902, %890, %849, %838, %834, %817, %809
  %1239 = load ptr, ptr %763, align 8, !tbaa !153
  %1240 = icmp eq ptr %1239, null
  br i1 %1240, label %1270, label %1241

1241:                                             ; preds = %1238
  %1242 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %762
  %1243 = load i8, ptr %1242, align 1, !tbaa !17
  %1244 = icmp eq i8 %1243, 0
  br i1 %1244, label %1245, label %1637

1245:                                             ; preds = %1241
  %1246 = load ptr, ptr %764, align 8, !tbaa !152
  %1247 = icmp eq ptr %1246, null
  br i1 %1247, label %1248, label %1637

1248:                                             ; preds = %1245
  %1249 = load i32, ptr %1239, align 8
  %1250 = and i32 %1249, 65535
  %1251 = zext i32 %1250 to i64
  %1252 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %1251
  %1253 = load i32, ptr %1252, align 4, !tbaa !17
  %1254 = freeze i32 %1253
  %1255 = icmp eq i32 %1254, 9
  br i1 %1255, label %1258, label %1256

1256:                                             ; preds = %1248
  %1257 = trunc i32 %1249 to i16
  switch i16 %1257, label %1637 [
    i16 49, label %1258
    i16 43, label %1258
    i16 37, label %1258
  ]

1258:                                             ; preds = %1256, %1256, %1256, %1248
  %1259 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 6
  %1260 = load i32, ptr %1259, align 8, !tbaa !142
  %1261 = icmp eq i32 %1260, %253
  br i1 %1261, label %1305, label %1262

1262:                                             ; preds = %1258
  %1263 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 2
  %1264 = load i32, ptr %1263, align 8, !tbaa !154
  %1265 = call i32 @reg_classes_intersect_p(i32 noundef %1264, i32 noundef %252) #19
  %1266 = icmp eq i32 %1265, 0
  %1267 = load ptr, ptr %763, align 8, !tbaa !153
  %1268 = icmp eq ptr %1267, null
  br i1 %1266, label %1304, label %1269

1269:                                             ; preds = %1262
  br i1 %1268, label %1270, label %1637

1270:                                             ; preds = %1269, %1238, %799
  %1271 = load ptr, ptr %764, align 8, !tbaa !152
  %1272 = icmp eq ptr %1271, null
  br i1 %1272, label %1637, label %1273

1273:                                             ; preds = %1270
  %1274 = load i32, ptr %214, align 8
  %1275 = and i32 %1274, 65535
  %1276 = add nsw i32 %1275, -7
  %1277 = icmp ult i32 %1276, 4
  br i1 %1277, label %1278, label %1637

1278:                                             ; preds = %1273
  %1279 = load ptr, ptr %271, align 8, !tbaa !17
  %1280 = load i32, ptr %1279, align 8
  %1281 = and i32 %1280, 65535
  %1282 = icmp eq i32 %1281, 23
  br i1 %1282, label %1288, label %1283

1283:                                             ; preds = %1278
  %1284 = call ptr @single_set_2(ptr noundef nonnull %214, ptr noundef nonnull %1279) #19
  %1285 = icmp eq ptr %1284, null
  br i1 %1285, label %1637, label %1286

1286:                                             ; preds = %1283
  %1287 = load ptr, ptr %764, align 8, !tbaa !152
  br label %1288

1288:                                             ; preds = %1286, %1278
  %1289 = phi ptr [ %1287, %1286 ], [ %1271, %1278 ]
  %1290 = phi ptr [ %1284, %1286 ], [ %1279, %1278 ]
  %1291 = getelementptr inbounds %struct.rtx_def, ptr %1290, i64 0, i32 1
  %1292 = load ptr, ptr %1291, align 8, !tbaa !17
  %1293 = call i32 @rtx_equal_p(ptr noundef %1289, ptr noundef %1292) #19
  %1294 = icmp eq i32 %1293, 0
  br i1 %1294, label %1637, label %1295

1295:                                             ; preds = %1288
  %1296 = getelementptr inbounds %struct.rtx_def, ptr %1290, i64 0, i32 1, i32 0, i32 0, i64 1
  %1297 = load ptr, ptr %1296, align 8, !tbaa !17
  %1298 = load i32, ptr %1297, align 8
  %1299 = and i32 %1298, 65535
  %1300 = zext i32 %1299 to i64
  %1301 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %1300
  %1302 = load i32, ptr %1301, align 4, !tbaa !17
  %1303 = icmp eq i32 %1302, 9
  br i1 %1303, label %1305, label %1637

1304:                                             ; preds = %1262
  br i1 %1268, label %1637, label %1305

1305:                                             ; preds = %1304, %1295, %1258
  %1306 = phi ptr [ %1267, %1304 ], [ %1297, %1295 ], [ %1239, %1258 ]
  %1307 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 2
  %1308 = load i32, ptr %1307, align 8, !tbaa !154
  %1309 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 5
  %1310 = load i32, ptr %1309, align 4, !tbaa !158
  %1311 = call ptr @find_equiv_reg(ptr noundef nonnull %1306, ptr noundef %214, i32 noundef %1308, i32 noundef -1, ptr noundef null, i32 noundef 0, i32 noundef %1310) #19
  %1312 = icmp eq ptr %1311, null
  br i1 %1312, label %1637, label %1313

1313:                                             ; preds = %1305
  %1314 = load i32, ptr %1311, align 8
  %1315 = trunc i32 %1314 to i16
  switch i16 %1315, label %1322 [
    i16 37, label %1316
    i16 39, label %1323
  ]

1316:                                             ; preds = %1313
  %1317 = getelementptr i8, ptr %1311, i64 8
  %1318 = load i32, ptr %1317, align 8, !tbaa !17
  %1319 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 6
  %1320 = load i32, ptr %1319, align 8, !tbaa !142
  %1321 = add i32 %1320, %1318
  br label %1346

1322:                                             ; preds = %1313
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6322, ptr noundef nonnull @.str.2) #19
  br label %1323

1323:                                             ; preds = %1322, %1313
  %1324 = call i32 @subreg_regno(ptr noundef nonnull %1311) #19
  %1325 = load i32, ptr %1309, align 4, !tbaa !158
  %1326 = call ptr @gen_rtx_REG(i32 noundef %1325, i32 noundef %1324) #19
  %1327 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 6
  %1328 = load i32, ptr %1327, align 8, !tbaa !142
  %1329 = add i32 %1328, %1324
  %1330 = icmp sgt i32 %1328, 0
  br i1 %1330, label %1331, label %1343

1331:                                             ; preds = %1323
  %1332 = load i64, ptr @reload_reg_unavailable, align 8, !tbaa !40
  br label %1333

1333:                                             ; preds = %1333, %1331
  %1334 = phi i32 [ %1324, %1331 ], [ %1341, %1333 ]
  %1335 = phi ptr [ %1326, %1331 ], [ %1340, %1333 ]
  %1336 = zext i32 %1334 to i64
  %1337 = shl nuw i64 1, %1336
  %1338 = and i64 %1337, %1332
  %1339 = icmp eq i64 %1338, 0
  %1340 = select i1 %1339, ptr %1335, ptr null
  %1341 = add nsw i32 %1334, 1
  %1342 = icmp slt i32 %1341, %1329
  br i1 %1342, label %1333, label %1343, !llvm.loop !232

1343:                                             ; preds = %1333, %1323
  %1344 = phi ptr [ %1326, %1323 ], [ %1340, %1333 ]
  %1345 = icmp eq ptr %1344, null
  br i1 %1345, label %1637, label %1346

1346:                                             ; preds = %1343, %1316
  %1347 = phi i32 [ %1321, %1316 ], [ %1329, %1343 ]
  %1348 = phi i32 [ %1318, %1316 ], [ %1324, %1343 ]
  %1349 = phi ptr [ %1311, %1316 ], [ %1344, %1343 ]
  %1350 = icmp slt i32 %1348, %1347
  br i1 %1350, label %1351, label %1429

1351:                                             ; preds = %1346
  %1352 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %1353 = load i32, ptr %1307, align 8, !tbaa !154
  %1354 = sext i32 %1353 to i64
  %1355 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %1354
  %1356 = load i64, ptr %1355, align 8, !tbaa !40
  %1357 = sub i32 %1347, %1348
  %1358 = icmp ult i32 %1357, 8
  br i1 %1358, label %1391, label %1359

1359:                                             ; preds = %1351
  %1360 = and i32 %1357, -8
  %1361 = add i32 %1348, %1360
  %1362 = insertelement <8 x i32> poison, i32 %1348, i64 0
  %1363 = shufflevector <8 x i32> %1362, <8 x i32> poison, <8 x i32> zeroinitializer
  %1364 = add <8 x i32> %1363, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1365 = insertelement <8 x i64> poison, i64 %1352, i64 0
  %1366 = shufflevector <8 x i64> %1365, <8 x i64> poison, <8 x i32> zeroinitializer
  %1367 = insertelement <8 x i64> poison, i64 %1356, i64 0
  %1368 = shufflevector <8 x i64> %1367, <8 x i64> poison, <8 x i32> zeroinitializer
  br label %1369

1369:                                             ; preds = %1369, %1359
  %1370 = phi i32 [ 0, %1359 ], [ %1384, %1369 ]
  %1371 = phi <8 x i32> [ %1364, %1359 ], [ %1385, %1369 ]
  %1372 = phi <8 x i32> [ zeroinitializer, %1359 ], [ %1383, %1369 ]
  %1373 = phi <8 x i32> [ zeroinitializer, %1359 ], [ %1379, %1369 ]
  %1374 = zext <8 x i32> %1371 to <8 x i64>
  %1375 = shl nuw <8 x i64> <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>, %1374
  %1376 = and <8 x i64> %1375, %1366
  %1377 = icmp ne <8 x i64> %1376, zeroinitializer
  %1378 = zext <8 x i1> %1377 to <8 x i32>
  %1379 = or <8 x i32> %1373, %1378
  %1380 = and <8 x i64> %1375, %1368
  %1381 = icmp eq <8 x i64> %1380, zeroinitializer
  %1382 = zext <8 x i1> %1381 to <8 x i32>
  %1383 = or <8 x i32> %1372, %1382
  %1384 = add nuw i32 %1370, 8
  %1385 = add <8 x i32> %1371, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1386 = icmp eq i32 %1384, %1360
  br i1 %1386, label %1387, label %1369, !llvm.loop !233

1387:                                             ; preds = %1369
  %1388 = call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> %1379)
  %1389 = call i32 @llvm.vector.reduce.or.v8i32(<8 x i32> %1383)
  %1390 = icmp eq i32 %1357, %1360
  br i1 %1390, label %1411, label %1391

1391:                                             ; preds = %1351, %1387
  %1392 = phi i32 [ %1348, %1351 ], [ %1361, %1387 ]
  %1393 = phi i32 [ 0, %1351 ], [ %1389, %1387 ]
  %1394 = phi i32 [ 0, %1351 ], [ %1388, %1387 ]
  br label %1395

1395:                                             ; preds = %1391, %1395
  %1396 = phi i32 [ %1409, %1395 ], [ %1392, %1391 ]
  %1397 = phi i32 [ %1408, %1395 ], [ %1393, %1391 ]
  %1398 = phi i32 [ %1404, %1395 ], [ %1394, %1391 ]
  %1399 = zext i32 %1396 to i64
  %1400 = shl nuw i64 1, %1399
  %1401 = and i64 %1400, %1352
  %1402 = icmp ne i64 %1401, 0
  %1403 = zext i1 %1402 to i32
  %1404 = or i32 %1398, %1403
  %1405 = and i64 %1400, %1356
  %1406 = icmp eq i64 %1405, 0
  %1407 = zext i1 %1406 to i32
  %1408 = or i32 %1397, %1407
  %1409 = add nsw i32 %1396, 1
  %1410 = icmp eq i32 %1409, %1347
  br i1 %1410, label %1411, label %1395, !llvm.loop !234

1411:                                             ; preds = %1395, %1387
  %1412 = phi i32 [ %1388, %1387 ], [ %1404, %1395 ]
  %1413 = phi i32 [ %1389, %1387 ], [ %1408, %1395 ]
  %1414 = icmp eq i32 %1412, 0
  br i1 %1414, label %1429, label %1415

1415:                                             ; preds = %1411
  %1416 = load i32, ptr %1309, align 4, !tbaa !158
  %1417 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 12
  %1418 = load i32, ptr %1417, align 8, !tbaa !156
  %1419 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 17
  %1420 = load i32, ptr %1419, align 4, !tbaa !155
  %1421 = load ptr, ptr %763, align 8, !tbaa !153
  %1422 = load ptr, ptr %764, align 8, !tbaa !152
  %1423 = call fastcc i32 @free_for_value_p(i32 noundef %1348, i32 noundef %1416, i32 noundef %1418, i32 noundef %1420, ptr noundef %1421, ptr noundef %1422, i32 noundef %761, i32 noundef 1), !range !122
  %1424 = icmp eq i32 %1423, 0
  %1425 = icmp ne i32 %1413, 0
  %1426 = select i1 %1424, i1 true, i1 %1425
  %1427 = icmp eq ptr %1349, null
  %1428 = or i1 %1427, %1426
  br i1 %1428, label %1637, label %1434

1429:                                             ; preds = %1411, %1346
  %1430 = phi i32 [ %1413, %1411 ], [ 0, %1346 ]
  %1431 = icmp ne i32 %1430, 0
  %1432 = icmp eq ptr %1349, null
  %1433 = or i1 %1432, %1431
  br i1 %1433, label %1637, label %1434

1434:                                             ; preds = %1429, %1415
  %1435 = load i32, ptr %1309, align 4, !tbaa !158
  %1436 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1348, i32 noundef %1435) #19
  %1437 = icmp eq i8 %1436, 0
  br i1 %1437, label %1637, label %1438

1438:                                             ; preds = %1434
  %1439 = load i32, ptr @n_earlyclobbers, align 4, !tbaa !21
  %1440 = icmp sgt i32 %1439, 0
  br i1 %1440, label %1446, label %1457

1441:                                             ; preds = %1446
  %1442 = add nuw nsw i64 %1447, 1
  %1443 = load i32, ptr @n_earlyclobbers, align 4, !tbaa !21
  %1444 = sext i32 %1443 to i64
  %1445 = icmp slt i64 %1442, %1444
  br i1 %1445, label %1446, label %1457, !llvm.loop !235

1446:                                             ; preds = %1438, %1441
  %1447 = phi i64 [ %1442, %1441 ], [ 0, %1438 ]
  %1448 = getelementptr inbounds [30 x ptr], ptr @reload_earlyclobbers, i64 0, i64 %1447
  %1449 = load ptr, ptr %1448, align 8, !tbaa !6
  %1450 = call i32 @reg_overlap_mentioned_for_reload_p(ptr noundef nonnull %1349, ptr noundef %1449) #19
  %1451 = icmp eq i32 %1450, 0
  br i1 %1451, label %1441, label %1452

1452:                                             ; preds = %1446
  %1453 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 18
  %1454 = load i8, ptr %1453, align 8
  %1455 = and i8 %1454, 1
  %1456 = icmp eq i8 %1455, 0
  br i1 %1456, label %1635, label %1637

1457:                                             ; preds = %1441, %1438
  %1458 = load i32, ptr %1309, align 4, !tbaa !158
  %1459 = call i32 @regno_clobbered_p(i32 noundef %1348, ptr noundef %214, i32 noundef %1458, i32 noundef 2) #19
  %1460 = icmp eq i32 %1459, 0
  br i1 %1460, label %1469, label %1461

1461:                                             ; preds = %1457
  %1462 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 17
  %1463 = load i32, ptr %1462, align 4, !tbaa !155
  switch i32 %1463, label %1637 [
    i32 10, label %1481
    i32 4, label %1481
    i32 3, label %1481
    i32 8, label %1481
    i32 9, label %1464
    i32 0, label %1464
    i32 7, label %1464
  ]

1464:                                             ; preds = %1461, %1461, %1461
  %1465 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 18
  %1466 = load i8, ptr %1465, align 8
  %1467 = and i8 %1466, 1
  %1468 = icmp eq i8 %1467, 0
  br i1 %1468, label %1635, label %1637

1469:                                             ; preds = %1457
  %1470 = load i32, ptr %1309, align 4, !tbaa !158
  %1471 = call i32 @regno_clobbered_p(i32 noundef %1348, ptr noundef %214, i32 noundef %1470, i32 noundef 1) #19
  %1472 = icmp eq i32 %1471, 0
  br i1 %1472, label %1481, label %1473

1473:                                             ; preds = %1469
  %1474 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 17
  %1475 = load i32, ptr %1474, align 4, !tbaa !155
  switch i32 %1475, label %1637 [
    i32 10, label %1481
    i32 4, label %1481
    i32 3, label %1481
    i32 8, label %1481
    i32 7, label %1481
    i32 0, label %1481
    i32 9, label %1476
  ]

1476:                                             ; preds = %1473
  %1477 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 18
  %1478 = load i8, ptr %1477, align 8
  %1479 = and i8 %1478, 1
  %1480 = icmp eq i8 %1479, 0
  br i1 %1480, label %1635, label %1637

1481:                                             ; preds = %1473, %1473, %1473, %1473, %1473, %1473, %1469, %1461, %1461, %1461, %1461
  %1482 = icmp eq i32 %1348, 6
  %1483 = load i8, ptr getelementptr inbounds (%struct.rtl_data, ptr @x_rtl, i64 0, i32 41), align 1
  %1484 = icmp ne i8 %1483, 0
  %1485 = select i1 %1482, i1 %1484, i1 false
  br i1 %1485, label %1637, label %1486

1486:                                             ; preds = %1481
  %1487 = sext i32 %1348 to i64
  %1488 = load i32, ptr %1309, align 4, !tbaa !158
  %1489 = zext i32 %1488 to i64
  %1490 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1487, i64 %1489
  %1491 = load i8, ptr %1490, align 1, !tbaa !17
  %1492 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 11
  store ptr %1349, ptr %1492, align 8, !tbaa !139
  %1493 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %762
  store i32 %1348, ptr %1493, align 4, !tbaa !21
  %1494 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %762
  store i8 1, ptr %1494, align 1, !tbaa !17
  %1495 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %1496 = zext i32 %1348 to i64
  %1497 = shl nuw i64 1, %1496
  %1498 = and i64 %1495, %1497
  %1499 = icmp eq i64 %1498, 0
  br i1 %1499, label %1500, label %1502

1500:                                             ; preds = %1486
  %1501 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %1487
  store ptr null, ptr %1501, align 8, !tbaa !6
  br label %1502

1502:                                             ; preds = %1500, %1486
  %1503 = icmp eq i8 %1491, 0
  br i1 %1503, label %1637, label %1504

1504:                                             ; preds = %1502
  %1505 = load i64, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  %1506 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %1507 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %1508 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %1509 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %1510 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %1511 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %1512 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 17
  %1513 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1496, i64 %1489
  %1514 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %762, i32 12
  %1515 = zext i8 %1491 to i64
  br label %1516

1516:                                             ; preds = %1625, %1504
  %1517 = phi i64 [ 0, %1504 ], [ %1633, %1625 ]
  %1518 = phi i64 [ %1511, %1504 ], [ %1632, %1625 ]
  %1519 = phi i64 [ %1510, %1504 ], [ %1631, %1625 ]
  %1520 = phi i64 [ %1509, %1504 ], [ %1630, %1625 ]
  %1521 = phi i64 [ %1508, %1504 ], [ %1629, %1625 ]
  %1522 = phi i64 [ %1507, %1504 ], [ %1628, %1625 ]
  %1523 = phi i64 [ %1506, %1504 ], [ %1627, %1625 ]
  %1524 = phi i64 [ %1505, %1504 ], [ %1626, %1625 ]
  %1525 = add nsw i64 %1517, %1487
  %1526 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %1525
  %1527 = load i16, ptr %1526, align 2, !tbaa !44
  %1528 = icmp sgt i16 %1527, -1
  br i1 %1528, label %1529, label %1625

1529:                                             ; preds = %1516
  %1530 = load i32, ptr %1512, align 4, !tbaa !155
  %1531 = load i8, ptr %1513, align 1, !tbaa !17
  %1532 = zext i8 %1531 to i32
  %1533 = add i32 %1348, %1532
  %1534 = icmp ugt i32 %1533, %1348
  br i1 %1534, label %1535, label %1615

1535:                                             ; preds = %1529
  %1536 = load i32, ptr %1514, align 8, !tbaa !156
  %1537 = sext i32 %1536 to i64
  %1538 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %1537
  %1539 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %1537
  %1540 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %1537
  %1541 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %1537
  %1542 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %1537
  %1543 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %1537
  %1544 = zext i32 %1533 to i64
  br label %1545

1545:                                             ; preds = %1599, %1535
  %1546 = phi i64 [ %1523, %1535 ], [ %1600, %1599 ]
  %1547 = phi i64 [ %1522, %1535 ], [ %1601, %1599 ]
  %1548 = phi i64 [ %1521, %1535 ], [ %1602, %1599 ]
  %1549 = phi i64 [ %1520, %1535 ], [ %1603, %1599 ]
  %1550 = phi i64 [ %1519, %1535 ], [ %1604, %1599 ]
  %1551 = phi i64 [ %1496, %1535 ], [ %1612, %1599 ]
  %1552 = phi i64 [ %1523, %1535 ], [ %1610, %1599 ]
  %1553 = phi i64 [ %1522, %1535 ], [ %1609, %1599 ]
  %1554 = phi i64 [ %1521, %1535 ], [ %1608, %1599 ]
  %1555 = phi i64 [ %1520, %1535 ], [ %1607, %1599 ]
  %1556 = phi i64 [ %1519, %1535 ], [ %1606, %1599 ]
  %1557 = phi i64 [ %1518, %1535 ], [ %1611, %1599 ]
  switch i32 %1530, label %1558 [
    i32 9, label %1560
    i32 3, label %1563
    i32 4, label %1567
    i32 5, label %1571
    i32 6, label %1575
    i32 7, label %1579
    i32 8, label %1582
    i32 10, label %1585
    i32 0, label %1588
    i32 1, label %1592
    i32 2, label %1596
  ]

1558:                                             ; preds = %1545
  %1559 = shl nuw i64 1, %1551
  br label %1599

1560:                                             ; preds = %1545
  %1561 = shl nuw i64 1, %1551
  %1562 = or i64 %1556, %1561
  store i64 %1562, ptr @reload_reg_used, align 8, !tbaa !40
  br label %1599

1563:                                             ; preds = %1545
  %1564 = shl nuw i64 1, %1551
  %1565 = load i64, ptr %1543, align 8, !tbaa !40
  %1566 = or i64 %1565, %1564
  store i64 %1566, ptr %1543, align 8, !tbaa !40
  br label %1599

1567:                                             ; preds = %1545
  %1568 = shl nuw i64 1, %1551
  %1569 = load i64, ptr %1542, align 8, !tbaa !40
  %1570 = or i64 %1569, %1568
  store i64 %1570, ptr %1542, align 8, !tbaa !40
  br label %1599

1571:                                             ; preds = %1545
  %1572 = shl nuw i64 1, %1551
  %1573 = load i64, ptr %1541, align 8, !tbaa !40
  %1574 = or i64 %1573, %1572
  store i64 %1574, ptr %1541, align 8, !tbaa !40
  br label %1599

1575:                                             ; preds = %1545
  %1576 = shl nuw i64 1, %1551
  %1577 = load i64, ptr %1540, align 8, !tbaa !40
  %1578 = or i64 %1577, %1576
  store i64 %1578, ptr %1540, align 8, !tbaa !40
  br label %1599

1579:                                             ; preds = %1545
  %1580 = shl nuw i64 1, %1551
  %1581 = or i64 %1555, %1580
  store i64 %1581, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  br label %1599

1582:                                             ; preds = %1545
  %1583 = shl nuw i64 1, %1551
  %1584 = or i64 %1554, %1583
  store i64 %1584, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  br label %1599

1585:                                             ; preds = %1545
  %1586 = shl nuw i64 1, %1551
  %1587 = or i64 %1553, %1586
  store i64 %1587, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  br label %1599

1588:                                             ; preds = %1545
  %1589 = shl nuw i64 1, %1551
  %1590 = load i64, ptr %1539, align 8, !tbaa !40
  %1591 = or i64 %1590, %1589
  store i64 %1591, ptr %1539, align 8, !tbaa !40
  br label %1599

1592:                                             ; preds = %1545
  %1593 = shl nuw i64 1, %1551
  %1594 = load i64, ptr %1538, align 8, !tbaa !40
  %1595 = or i64 %1594, %1593
  store i64 %1595, ptr %1538, align 8, !tbaa !40
  br label %1599

1596:                                             ; preds = %1545
  %1597 = shl nuw i64 1, %1551
  %1598 = or i64 %1552, %1597
  store i64 %1598, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %1599

1599:                                             ; preds = %1596, %1592, %1588, %1585, %1582, %1579, %1575, %1571, %1567, %1563, %1560, %1558
  %1600 = phi i64 [ %1546, %1558 ], [ %1598, %1596 ], [ %1546, %1592 ], [ %1546, %1588 ], [ %1546, %1585 ], [ %1546, %1582 ], [ %1546, %1579 ], [ %1546, %1575 ], [ %1546, %1571 ], [ %1546, %1567 ], [ %1546, %1563 ], [ %1546, %1560 ]
  %1601 = phi i64 [ %1547, %1558 ], [ %1547, %1596 ], [ %1547, %1592 ], [ %1547, %1588 ], [ %1587, %1585 ], [ %1547, %1582 ], [ %1547, %1579 ], [ %1547, %1575 ], [ %1547, %1571 ], [ %1547, %1567 ], [ %1547, %1563 ], [ %1547, %1560 ]
  %1602 = phi i64 [ %1548, %1558 ], [ %1548, %1596 ], [ %1548, %1592 ], [ %1548, %1588 ], [ %1548, %1585 ], [ %1584, %1582 ], [ %1548, %1579 ], [ %1548, %1575 ], [ %1548, %1571 ], [ %1548, %1567 ], [ %1548, %1563 ], [ %1548, %1560 ]
  %1603 = phi i64 [ %1549, %1558 ], [ %1549, %1596 ], [ %1549, %1592 ], [ %1549, %1588 ], [ %1549, %1585 ], [ %1549, %1582 ], [ %1581, %1579 ], [ %1549, %1575 ], [ %1549, %1571 ], [ %1549, %1567 ], [ %1549, %1563 ], [ %1549, %1560 ]
  %1604 = phi i64 [ %1550, %1558 ], [ %1550, %1596 ], [ %1550, %1592 ], [ %1550, %1588 ], [ %1550, %1585 ], [ %1550, %1582 ], [ %1550, %1579 ], [ %1550, %1575 ], [ %1550, %1571 ], [ %1550, %1567 ], [ %1550, %1563 ], [ %1562, %1560 ]
  %1605 = phi i64 [ %1559, %1558 ], [ %1597, %1596 ], [ %1593, %1592 ], [ %1589, %1588 ], [ %1586, %1585 ], [ %1583, %1582 ], [ %1580, %1579 ], [ %1576, %1575 ], [ %1572, %1571 ], [ %1568, %1567 ], [ %1564, %1563 ], [ %1561, %1560 ]
  %1606 = phi i64 [ %1556, %1558 ], [ %1556, %1596 ], [ %1556, %1592 ], [ %1556, %1588 ], [ %1556, %1585 ], [ %1556, %1582 ], [ %1556, %1579 ], [ %1556, %1575 ], [ %1556, %1571 ], [ %1556, %1567 ], [ %1556, %1563 ], [ %1562, %1560 ]
  %1607 = phi i64 [ %1555, %1558 ], [ %1555, %1596 ], [ %1555, %1592 ], [ %1555, %1588 ], [ %1555, %1585 ], [ %1555, %1582 ], [ %1581, %1579 ], [ %1555, %1575 ], [ %1555, %1571 ], [ %1555, %1567 ], [ %1555, %1563 ], [ %1555, %1560 ]
  %1608 = phi i64 [ %1554, %1558 ], [ %1554, %1596 ], [ %1554, %1592 ], [ %1554, %1588 ], [ %1554, %1585 ], [ %1584, %1582 ], [ %1554, %1579 ], [ %1554, %1575 ], [ %1554, %1571 ], [ %1554, %1567 ], [ %1554, %1563 ], [ %1554, %1560 ]
  %1609 = phi i64 [ %1553, %1558 ], [ %1553, %1596 ], [ %1553, %1592 ], [ %1553, %1588 ], [ %1587, %1585 ], [ %1553, %1582 ], [ %1553, %1579 ], [ %1553, %1575 ], [ %1553, %1571 ], [ %1553, %1567 ], [ %1553, %1563 ], [ %1553, %1560 ]
  %1610 = phi i64 [ %1552, %1558 ], [ %1598, %1596 ], [ %1552, %1592 ], [ %1552, %1588 ], [ %1552, %1585 ], [ %1552, %1582 ], [ %1552, %1579 ], [ %1552, %1575 ], [ %1552, %1571 ], [ %1552, %1567 ], [ %1552, %1563 ], [ %1552, %1560 ]
  %1611 = or i64 %1605, %1557
  %1612 = add nuw nsw i64 %1551, 1
  %1613 = icmp eq i64 %1612, %1544
  br i1 %1613, label %1614, label %1545, !llvm.loop !223

1614:                                             ; preds = %1599
  store i64 %1611, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  br label %1615

1615:                                             ; preds = %1614, %1529
  %1616 = phi i64 [ %1523, %1529 ], [ %1600, %1614 ]
  %1617 = phi i64 [ %1522, %1529 ], [ %1601, %1614 ]
  %1618 = phi i64 [ %1521, %1529 ], [ %1602, %1614 ]
  %1619 = phi i64 [ %1520, %1529 ], [ %1603, %1614 ]
  %1620 = phi i64 [ %1519, %1529 ], [ %1604, %1614 ]
  %1621 = phi i64 [ %1518, %1529 ], [ %1611, %1614 ]
  %1622 = and i64 %1525, 4294967295
  %1623 = shl nuw i64 1, %1622
  %1624 = or i64 %1524, %1623
  store i64 %1624, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  br label %1625

1625:                                             ; preds = %1615, %1516
  %1626 = phi i64 [ %1524, %1516 ], [ %1624, %1615 ]
  %1627 = phi i64 [ %1523, %1516 ], [ %1616, %1615 ]
  %1628 = phi i64 [ %1522, %1516 ], [ %1617, %1615 ]
  %1629 = phi i64 [ %1521, %1516 ], [ %1618, %1615 ]
  %1630 = phi i64 [ %1520, %1516 ], [ %1619, %1615 ]
  %1631 = phi i64 [ %1519, %1516 ], [ %1620, %1615 ]
  %1632 = phi i64 [ %1518, %1516 ], [ %1621, %1615 ]
  %1633 = add nuw nsw i64 %1517, 1
  %1634 = icmp eq i64 %1633, %1515
  br i1 %1634, label %1637, label %1516, !llvm.loop !236

1635:                                             ; preds = %1476, %1464, %1452
  %1636 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %762
  store ptr %1349, ptr %1636, align 8, !tbaa !6
  br label %1637

1637:                                             ; preds = %1625, %1635, %1502, %1481, %1476, %1473, %1464, %1461, %1452, %1434, %1429, %1415, %1343, %1305, %1304, %1295, %1288, %1283, %1273, %1270, %1269, %1256, %1245, %1241, %798, %794, %781, %770
  %1638 = add nuw nsw i64 %758, 1
  %1639 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %1640 = sext i32 %1639 to i64
  %1641 = icmp slt i64 %1638, %1640
  br i1 %1641, label %757, label %755, !llvm.loop !237

1642:                                             ; preds = %755, %2033
  %1643 = phi i32 [ %2034, %2033 ], [ %1639, %755 ]
  %1644 = phi i64 [ %2035, %2033 ], [ 0, %755 ]
  %1645 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %1644
  %1646 = load i16, ptr %1645, align 2, !tbaa !44
  %1647 = sext i16 %1646 to i32
  %1648 = sext i16 %1646 to i64
  %1649 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 1
  %1650 = load ptr, ptr %1649, align 8, !tbaa !152
  %1651 = icmp eq ptr %1650, null
  br i1 %1651, label %1652, label %1661

1652:                                             ; preds = %1642
  %1653 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648
  %1654 = load ptr, ptr %1653, align 8, !tbaa !153
  %1655 = icmp eq ptr %1654, null
  br i1 %1655, label %1656, label %1661

1656:                                             ; preds = %1652
  %1657 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 18
  %1658 = load i8, ptr %1657, align 8
  %1659 = and i8 %1658, 4
  %1660 = icmp eq i8 %1659, 0
  br i1 %1660, label %2033, label %1661

1661:                                             ; preds = %1656, %1652, %1642
  %1662 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 11
  %1663 = load ptr, ptr %1662, align 8, !tbaa !139
  %1664 = icmp eq ptr %1663, null
  br i1 %1664, label %1665, label %2033

1665:                                             ; preds = %1661
  %1666 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 18
  %1667 = load i8, ptr %1666, align 8
  %1668 = and i8 %1667, 1
  %1669 = icmp eq i8 %1668, 0
  br i1 %1669, label %1670, label %2033

1670:                                             ; preds = %1665
  %1671 = add nsw i32 %1643, -1
  %1672 = zext i32 %1671 to i64
  %1673 = icmp eq i64 %1644, %1672
  %1674 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648
  %1675 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 6
  %1676 = load i32, ptr %1675, align 8, !tbaa !142
  %1677 = icmp ult i32 %1676, 2
  %1678 = or i1 %1673, %1677
  %1679 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 2
  %1680 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 12
  %1681 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 17
  %1682 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %1648, i32 5
  %1683 = load i32, ptr @n_spills, align 4, !tbaa !21
  %1684 = icmp sgt i32 %1683, 0
  %1685 = load i32, ptr @last_spill_reg, align 4, !tbaa !21
  br i1 %1684, label %1784, label %1891

1686:                                             ; preds = %1887
  %1687 = load i32, ptr @last_spill_reg, align 4, !tbaa !21
  %1688 = icmp sgt i32 %1888, 0
  br i1 %1688, label %1689, label %1891

1689:                                             ; preds = %1686, %1780
  %1690 = phi i32 [ %1782, %1780 ], [ %1888, %1686 ]
  %1691 = phi i32 [ %1697, %1780 ], [ %1687, %1686 ]
  %1692 = phi i32 [ %1781, %1780 ], [ 0, %1686 ]
  %1693 = load i32, ptr %1679, align 8, !tbaa !154
  %1694 = add nsw i32 %1691, 1
  %1695 = icmp slt i32 %1694, %1690
  %1696 = select i1 %1695, i32 0, i32 %1690
  %1697 = sub nsw i32 %1694, %1696
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %1698
  %1700 = load i16, ptr %1699, align 2, !tbaa !44
  %1701 = sext i16 %1700 to i32
  %1702 = load i32, ptr %1680, align 8, !tbaa !156
  %1703 = load i32, ptr %1681, align 4, !tbaa !155
  %1704 = call fastcc i32 @reload_reg_free_p(i32 noundef %1701, i32 noundef %1702, i32 noundef %1703), !range !122
  %1705 = icmp eq i32 %1704, 0
  br i1 %1705, label %1709, label %1706

1706:                                             ; preds = %1689
  %1707 = zext i32 %1701 to i64
  %1708 = shl nuw i64 1, %1707
  br label %1725

1709:                                             ; preds = %1689
  %1710 = load ptr, ptr %1674, align 8, !tbaa !153
  %1711 = icmp eq ptr %1710, null
  br i1 %1711, label %1780, label %1712

1712:                                             ; preds = %1709
  %1713 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %1714 = zext i32 %1701 to i64
  %1715 = shl nuw i64 1, %1714
  %1716 = and i64 %1713, %1715
  %1717 = icmp eq i64 %1716, 0
  br i1 %1717, label %1718, label %1780

1718:                                             ; preds = %1712
  %1719 = load i32, ptr %1682, align 4, !tbaa !158
  %1720 = load i32, ptr %1680, align 8, !tbaa !156
  %1721 = load i32, ptr %1681, align 4, !tbaa !155
  %1722 = load ptr, ptr %1649, align 8, !tbaa !152
  %1723 = call fastcc i32 @free_for_value_p(i32 noundef %1701, i32 noundef %1719, i32 noundef %1720, i32 noundef %1721, ptr noundef nonnull %1710, ptr noundef %1722, i32 noundef %1647, i32 noundef 1), !range !122
  %1724 = icmp eq i32 %1723, 0
  br i1 %1724, label %1780, label %1725

1725:                                             ; preds = %1718, %1706
  %1726 = phi i64 [ %1708, %1706 ], [ %1715, %1718 ]
  %1727 = sext i32 %1693 to i64
  %1728 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %1727
  %1729 = load i64, ptr %1728, align 8, !tbaa !40
  %1730 = and i64 %1729, %1726
  %1731 = icmp eq i64 %1730, 0
  br i1 %1731, label %1780, label %1732

1732:                                             ; preds = %1725
  %1733 = load i32, ptr %1682, align 4, !tbaa !158
  %1734 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1701, i32 noundef %1733) #19
  %1735 = icmp eq i8 %1734, 0
  br i1 %1735, label %1780, label %1736

1736:                                             ; preds = %1732
  br i1 %1678, label %1737, label %1745

1737:                                             ; preds = %1736
  %1738 = sext i16 %1700 to i64
  %1739 = load i32, ptr %1682, align 4, !tbaa !158
  %1740 = zext i32 %1739 to i64
  %1741 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1738, i64 %1740
  %1742 = load i8, ptr %1741, align 1, !tbaa !17
  %1743 = zext i8 %1742 to i32
  %1744 = icmp eq i8 %1742, 1
  br i1 %1744, label %1778, label %1748

1745:                                             ; preds = %1736
  %1746 = load i32, ptr %1675, align 8, !tbaa !142
  %1747 = icmp eq i32 %1746, 1
  br i1 %1747, label %1780, label %1748

1748:                                             ; preds = %1745, %1737
  %1749 = phi i32 [ %1746, %1745 ], [ %1743, %1737 ]
  %1750 = add nsw i32 %1701, -1
  %1751 = sext i32 %1749 to i64
  %1752 = call i32 @llvm.smin.i32(i32 %1749, i32 1)
  br label %1753

1753:                                             ; preds = %1769, %1748
  %1754 = phi i64 [ %1751, %1748 ], [ %1774, %1769 ]
  %1755 = icmp sgt i64 %1754, 1
  %1756 = trunc i64 %1754 to i32
  br i1 %1755, label %1757, label %1775

1757:                                             ; preds = %1753
  %1758 = add i32 %1750, %1756
  %1759 = load i64, ptr %1728, align 8, !tbaa !40
  %1760 = zext i32 %1758 to i64
  %1761 = shl nuw i64 1, %1760
  %1762 = and i64 %1759, %1761
  %1763 = icmp eq i64 %1762, 0
  br i1 %1763, label %1780, label %1764

1764:                                             ; preds = %1757
  %1765 = sext i32 %1758 to i64
  %1766 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %1765
  %1767 = load i16, ptr %1766, align 2, !tbaa !44
  %1768 = icmp sgt i16 %1767, -1
  br i1 %1768, label %1769, label %1780

1769:                                             ; preds = %1764
  %1770 = load i32, ptr %1680, align 8, !tbaa !156
  %1771 = load i32, ptr %1681, align 4, !tbaa !155
  %1772 = call fastcc i32 @reload_reg_free_p(i32 noundef %1758, i32 noundef %1770, i32 noundef %1771), !range !122
  %1773 = icmp eq i32 %1772, 0
  %1774 = add nsw i64 %1754, -1
  br i1 %1773, label %1775, label %1753

1775:                                             ; preds = %1769, %1753
  %1776 = phi i32 [ %1756, %1769 ], [ %1752, %1753 ]
  %1777 = icmp eq i32 %1776, 1
  br i1 %1777, label %1778, label %1780

1778:                                             ; preds = %1775, %1737
  %1779 = load i32, ptr @n_spills, align 4, !tbaa !21
  br label %1891

1780:                                             ; preds = %1764, %1757, %1775, %1745, %1732, %1725, %1718, %1712, %1709
  %1781 = add nuw nsw i32 %1692, 1
  %1782 = load i32, ptr @n_spills, align 4, !tbaa !21
  %1783 = icmp slt i32 %1781, %1782
  br i1 %1783, label %1689, label %1891, !llvm.loop !238

1784:                                             ; preds = %1670, %1883
  %1785 = phi i32 [ %1885, %1883 ], [ %1683, %1670 ]
  %1786 = phi i32 [ %1792, %1883 ], [ %1685, %1670 ]
  %1787 = phi i32 [ %1884, %1883 ], [ 0, %1670 ]
  %1788 = load i32, ptr %1679, align 8, !tbaa !154
  %1789 = add nsw i32 %1786, 1
  %1790 = icmp slt i32 %1789, %1785
  %1791 = select i1 %1790, i32 0, i32 %1785
  %1792 = sub nsw i32 %1789, %1791
  %1793 = sext i32 %1792 to i64
  %1794 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %1793
  %1795 = load i16, ptr %1794, align 2, !tbaa !44
  %1796 = sext i16 %1795 to i32
  %1797 = load i32, ptr %1680, align 8, !tbaa !156
  %1798 = load i32, ptr %1681, align 4, !tbaa !155
  %1799 = call fastcc i32 @reload_reg_free_p(i32 noundef %1796, i32 noundef %1797, i32 noundef %1798), !range !122
  %1800 = icmp eq i32 %1799, 0
  br i1 %1800, label %1804, label %1801

1801:                                             ; preds = %1784
  %1802 = zext i32 %1796 to i64
  %1803 = shl nuw i64 1, %1802
  br label %1820

1804:                                             ; preds = %1784
  %1805 = load ptr, ptr %1674, align 8, !tbaa !153
  %1806 = icmp eq ptr %1805, null
  br i1 %1806, label %1883, label %1807

1807:                                             ; preds = %1804
  %1808 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %1809 = zext i32 %1796 to i64
  %1810 = shl nuw i64 1, %1809
  %1811 = and i64 %1808, %1810
  %1812 = icmp eq i64 %1811, 0
  br i1 %1812, label %1813, label %1883

1813:                                             ; preds = %1807
  %1814 = load i32, ptr %1682, align 4, !tbaa !158
  %1815 = load i32, ptr %1680, align 8, !tbaa !156
  %1816 = load i32, ptr %1681, align 4, !tbaa !155
  %1817 = load ptr, ptr %1649, align 8, !tbaa !152
  %1818 = call fastcc i32 @free_for_value_p(i32 noundef %1796, i32 noundef %1814, i32 noundef %1815, i32 noundef %1816, ptr noundef nonnull %1805, ptr noundef %1817, i32 noundef %1647, i32 noundef 1), !range !122
  %1819 = icmp eq i32 %1818, 0
  br i1 %1819, label %1883, label %1820

1820:                                             ; preds = %1813, %1801
  %1821 = phi i64 [ %1803, %1801 ], [ %1810, %1813 ]
  %1822 = sext i32 %1788 to i64
  %1823 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %1822
  %1824 = load i64, ptr %1823, align 8, !tbaa !40
  %1825 = and i64 %1824, %1821
  %1826 = icmp eq i64 %1825, 0
  br i1 %1826, label %1883, label %1827

1827:                                             ; preds = %1820
  %1828 = load i32, ptr %1682, align 4, !tbaa !158
  %1829 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1796, i32 noundef %1828) #19
  %1830 = icmp eq i8 %1829, 0
  br i1 %1830, label %1883, label %1831

1831:                                             ; preds = %1827
  %1832 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %1833 = and i64 %1832, %1821
  %1834 = icmp eq i64 %1833, 0
  br i1 %1834, label %1883, label %1835

1835:                                             ; preds = %1831
  %1836 = load i64, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  %1837 = and i64 %1836, %1821
  %1838 = icmp eq i64 %1837, 0
  br i1 %1838, label %1839, label %1883

1839:                                             ; preds = %1835
  br i1 %1678, label %1840, label %1848

1840:                                             ; preds = %1839
  %1841 = sext i16 %1795 to i64
  %1842 = load i32, ptr %1682, align 4, !tbaa !158
  %1843 = zext i32 %1842 to i64
  %1844 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1841, i64 %1843
  %1845 = load i8, ptr %1844, align 1, !tbaa !17
  %1846 = zext i8 %1845 to i32
  %1847 = icmp eq i8 %1845, 1
  br i1 %1847, label %1881, label %1851

1848:                                             ; preds = %1839
  %1849 = load i32, ptr %1675, align 8, !tbaa !142
  %1850 = icmp eq i32 %1849, 1
  br i1 %1850, label %1883, label %1851

1851:                                             ; preds = %1848, %1840
  %1852 = phi i32 [ %1849, %1848 ], [ %1846, %1840 ]
  %1853 = add nsw i32 %1796, -1
  %1854 = sext i32 %1852 to i64
  %1855 = call i32 @llvm.smin.i32(i32 %1852, i32 1)
  br label %1856

1856:                                             ; preds = %1872, %1851
  %1857 = phi i64 [ %1854, %1851 ], [ %1877, %1872 ]
  %1858 = icmp sgt i64 %1857, 1
  %1859 = trunc i64 %1857 to i32
  br i1 %1858, label %1860, label %1878

1860:                                             ; preds = %1856
  %1861 = add i32 %1853, %1859
  %1862 = load i64, ptr %1823, align 8, !tbaa !40
  %1863 = zext i32 %1861 to i64
  %1864 = shl nuw i64 1, %1863
  %1865 = and i64 %1862, %1864
  %1866 = icmp eq i64 %1865, 0
  br i1 %1866, label %1883, label %1867

1867:                                             ; preds = %1860
  %1868 = sext i32 %1861 to i64
  %1869 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %1868
  %1870 = load i16, ptr %1869, align 2, !tbaa !44
  %1871 = icmp sgt i16 %1870, -1
  br i1 %1871, label %1872, label %1883

1872:                                             ; preds = %1867
  %1873 = load i32, ptr %1680, align 8, !tbaa !156
  %1874 = load i32, ptr %1681, align 4, !tbaa !155
  %1875 = call fastcc i32 @reload_reg_free_p(i32 noundef %1861, i32 noundef %1873, i32 noundef %1874), !range !122
  %1876 = icmp eq i32 %1875, 0
  %1877 = add nsw i64 %1857, -1
  br i1 %1876, label %1878, label %1856

1878:                                             ; preds = %1872, %1856
  %1879 = phi i32 [ %1859, %1872 ], [ %1855, %1856 ]
  %1880 = icmp eq i32 %1879, 1
  br i1 %1880, label %1881, label %1883

1881:                                             ; preds = %1878, %1840
  %1882 = load i32, ptr @n_spills, align 4, !tbaa !21
  br label %1887

1883:                                             ; preds = %1867, %1860, %1878, %1848, %1835, %1831, %1827, %1820, %1813, %1807, %1804
  %1884 = add nuw nsw i32 %1787, 1
  %1885 = load i32, ptr @n_spills, align 4, !tbaa !21
  %1886 = icmp slt i32 %1884, %1885
  br i1 %1886, label %1784, label %1887, !llvm.loop !238

1887:                                             ; preds = %1883, %1881
  %1888 = phi i32 [ %1882, %1881 ], [ %1885, %1883 ]
  %1889 = phi i32 [ %1787, %1881 ], [ %1884, %1883 ]
  %1890 = icmp slt i32 %1889, %1888
  br i1 %1890, label %1891, label %1686

1891:                                             ; preds = %1780, %1887, %1778, %1686, %1670
  %1892 = phi i32 [ %1888, %1887 ], [ %1683, %1670 ], [ %1888, %1686 ], [ %1779, %1778 ], [ %1782, %1780 ]
  %1893 = phi i32 [ %1889, %1887 ], [ 0, %1670 ], [ 0, %1686 ], [ %1692, %1778 ], [ %1781, %1780 ]
  %1894 = phi i32 [ %1792, %1887 ], [ %1685, %1670 ], [ %1687, %1686 ], [ %1697, %1778 ], [ %1697, %1780 ]
  %1895 = icmp slt i32 %1893, %1892
  br i1 %1895, label %1896, label %2038

1896:                                             ; preds = %1891
  %1897 = sext i32 %1894 to i64
  %1898 = getelementptr inbounds [53 x ptr], ptr @spill_reg_rtx, i64 0, i64 %1897
  %1899 = load ptr, ptr %1898, align 8, !tbaa !6
  %1900 = icmp eq ptr %1899, null
  br i1 %1900, label %1901, label %1903

1901:                                             ; preds = %1896
  %1902 = load i32, ptr %1682, align 4, !tbaa !158
  br label %1909

1903:                                             ; preds = %1896
  %1904 = load i32, ptr %1899, align 8
  %1905 = lshr i32 %1904, 16
  %1906 = and i32 %1905, 255
  %1907 = load i32, ptr %1682, align 4, !tbaa !158
  %1908 = icmp eq i32 %1906, %1907
  br i1 %1908, label %1915, label %1909

1909:                                             ; preds = %1903, %1901
  %1910 = phi i32 [ %1902, %1901 ], [ %1907, %1903 ]
  %1911 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %1897
  %1912 = load i16, ptr %1911, align 2, !tbaa !44
  %1913 = sext i16 %1912 to i32
  %1914 = call ptr @gen_rtx_REG(i32 noundef %1910, i32 noundef %1913) #19
  store ptr %1914, ptr %1898, align 8, !tbaa !6
  br label %1915

1915:                                             ; preds = %1909, %1903
  %1916 = phi ptr [ %1914, %1909 ], [ %1899, %1903 ]
  %1917 = call i32 @true_regnum(ptr noundef %1916) #19
  %1918 = load i32, ptr %1682, align 4, !tbaa !158
  %1919 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1917, i32 noundef %1918) #19
  %1920 = icmp eq i8 %1919, 0
  br i1 %1920, label %2038, label %1921

1921:                                             ; preds = %1915
  %1922 = load ptr, ptr %1674, align 8, !tbaa !153
  %1923 = icmp eq ptr %1922, null
  br i1 %1923, label %1932, label %1924

1924:                                             ; preds = %1921
  %1925 = load i32, ptr %1922, align 8
  %1926 = lshr i32 %1925, 16
  %1927 = and i32 %1926, 255
  %1928 = icmp eq i32 %1927, 0
  br i1 %1928, label %1932, label %1929

1929:                                             ; preds = %1924
  %1930 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1917, i32 noundef %1927) #19
  %1931 = icmp eq i8 %1930, 0
  br i1 %1931, label %2038, label %1932

1932:                                             ; preds = %1929, %1924, %1921
  %1933 = load ptr, ptr %1649, align 8, !tbaa !152
  %1934 = icmp eq ptr %1933, null
  br i1 %1934, label %1941, label %1935

1935:                                             ; preds = %1932
  %1936 = load i32, ptr %1933, align 8
  %1937 = lshr i32 %1936, 16
  %1938 = and i32 %1937, 255
  %1939 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %1917, i32 noundef %1938) #19
  %1940 = icmp eq i8 %1939, 0
  br i1 %1940, label %2038, label %1941

1941:                                             ; preds = %1935, %1932
  store i32 %1894, ptr @last_spill_reg, align 4, !tbaa !21
  %1942 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %1897
  %1943 = load i16, ptr %1942, align 2, !tbaa !44
  %1944 = sext i16 %1943 to i32
  %1945 = load i32, ptr %1681, align 4, !tbaa !155
  %1946 = load i32, ptr %1682, align 4, !tbaa !158
  %1947 = zext i32 %1944 to i64
  %1948 = zext i32 %1946 to i64
  %1949 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %1947, i64 %1948
  %1950 = load i8, ptr %1949, align 1, !tbaa !17
  %1951 = zext i8 %1950 to i32
  %1952 = add nsw i32 %1951, %1944
  %1953 = icmp ugt i32 %1952, %1944
  br i1 %1953, label %1954, label %2030

1954:                                             ; preds = %1941
  %1955 = load i32, ptr %1680, align 8, !tbaa !156
  %1956 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %1957 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %1958 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %1959 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %1960 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %1961 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %1962 = sext i32 %1955 to i64
  %1963 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %1962
  %1964 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %1962
  %1965 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %1962
  %1966 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %1962
  %1967 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %1962
  %1968 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %1962
  %1969 = zext i32 %1952 to i64
  br label %1970

1970:                                             ; preds = %2019, %1954
  %1971 = phi i64 [ %1947, %1954 ], [ %2027, %2019 ]
  %1972 = phi i64 [ %1961, %1954 ], [ %2025, %2019 ]
  %1973 = phi i64 [ %1960, %1954 ], [ %2024, %2019 ]
  %1974 = phi i64 [ %1959, %1954 ], [ %2023, %2019 ]
  %1975 = phi i64 [ %1958, %1954 ], [ %2022, %2019 ]
  %1976 = phi i64 [ %1957, %1954 ], [ %2021, %2019 ]
  %1977 = phi i64 [ %1956, %1954 ], [ %2026, %2019 ]
  switch i32 %1945, label %1978 [
    i32 9, label %1980
    i32 3, label %1983
    i32 4, label %1987
    i32 5, label %1991
    i32 6, label %1995
    i32 7, label %1999
    i32 8, label %2002
    i32 10, label %2005
    i32 0, label %2008
    i32 1, label %2012
    i32 2, label %2016
  ]

1978:                                             ; preds = %1970
  %1979 = shl nuw i64 1, %1971
  br label %2019

1980:                                             ; preds = %1970
  %1981 = shl nuw i64 1, %1971
  %1982 = or i64 %1976, %1981
  store i64 %1982, ptr @reload_reg_used, align 8, !tbaa !40
  br label %2019

1983:                                             ; preds = %1970
  %1984 = shl nuw i64 1, %1971
  %1985 = load i64, ptr %1968, align 8, !tbaa !40
  %1986 = or i64 %1985, %1984
  store i64 %1986, ptr %1968, align 8, !tbaa !40
  br label %2019

1987:                                             ; preds = %1970
  %1988 = shl nuw i64 1, %1971
  %1989 = load i64, ptr %1967, align 8, !tbaa !40
  %1990 = or i64 %1989, %1988
  store i64 %1990, ptr %1967, align 8, !tbaa !40
  br label %2019

1991:                                             ; preds = %1970
  %1992 = shl nuw i64 1, %1971
  %1993 = load i64, ptr %1966, align 8, !tbaa !40
  %1994 = or i64 %1993, %1992
  store i64 %1994, ptr %1966, align 8, !tbaa !40
  br label %2019

1995:                                             ; preds = %1970
  %1996 = shl nuw i64 1, %1971
  %1997 = load i64, ptr %1965, align 8, !tbaa !40
  %1998 = or i64 %1997, %1996
  store i64 %1998, ptr %1965, align 8, !tbaa !40
  br label %2019

1999:                                             ; preds = %1970
  %2000 = shl nuw i64 1, %1971
  %2001 = or i64 %1975, %2000
  store i64 %2001, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  br label %2019

2002:                                             ; preds = %1970
  %2003 = shl nuw i64 1, %1971
  %2004 = or i64 %1974, %2003
  store i64 %2004, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  br label %2019

2005:                                             ; preds = %1970
  %2006 = shl nuw i64 1, %1971
  %2007 = or i64 %1973, %2006
  store i64 %2007, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  br label %2019

2008:                                             ; preds = %1970
  %2009 = shl nuw i64 1, %1971
  %2010 = load i64, ptr %1964, align 8, !tbaa !40
  %2011 = or i64 %2010, %2009
  store i64 %2011, ptr %1964, align 8, !tbaa !40
  br label %2019

2012:                                             ; preds = %1970
  %2013 = shl nuw i64 1, %1971
  %2014 = load i64, ptr %1963, align 8, !tbaa !40
  %2015 = or i64 %2014, %2013
  store i64 %2015, ptr %1963, align 8, !tbaa !40
  br label %2019

2016:                                             ; preds = %1970
  %2017 = shl nuw i64 1, %1971
  %2018 = or i64 %1972, %2017
  store i64 %2018, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %2019

2019:                                             ; preds = %2016, %2012, %2008, %2005, %2002, %1999, %1995, %1991, %1987, %1983, %1980, %1978
  %2020 = phi i64 [ %1979, %1978 ], [ %2017, %2016 ], [ %2013, %2012 ], [ %2009, %2008 ], [ %2006, %2005 ], [ %2003, %2002 ], [ %2000, %1999 ], [ %1996, %1995 ], [ %1992, %1991 ], [ %1988, %1987 ], [ %1984, %1983 ], [ %1981, %1980 ]
  %2021 = phi i64 [ %1976, %1978 ], [ %1976, %2016 ], [ %1976, %2012 ], [ %1976, %2008 ], [ %1976, %2005 ], [ %1976, %2002 ], [ %1976, %1999 ], [ %1976, %1995 ], [ %1976, %1991 ], [ %1976, %1987 ], [ %1976, %1983 ], [ %1982, %1980 ]
  %2022 = phi i64 [ %1975, %1978 ], [ %1975, %2016 ], [ %1975, %2012 ], [ %1975, %2008 ], [ %1975, %2005 ], [ %1975, %2002 ], [ %2001, %1999 ], [ %1975, %1995 ], [ %1975, %1991 ], [ %1975, %1987 ], [ %1975, %1983 ], [ %1975, %1980 ]
  %2023 = phi i64 [ %1974, %1978 ], [ %1974, %2016 ], [ %1974, %2012 ], [ %1974, %2008 ], [ %1974, %2005 ], [ %2004, %2002 ], [ %1974, %1999 ], [ %1974, %1995 ], [ %1974, %1991 ], [ %1974, %1987 ], [ %1974, %1983 ], [ %1974, %1980 ]
  %2024 = phi i64 [ %1973, %1978 ], [ %1973, %2016 ], [ %1973, %2012 ], [ %1973, %2008 ], [ %2007, %2005 ], [ %1973, %2002 ], [ %1973, %1999 ], [ %1973, %1995 ], [ %1973, %1991 ], [ %1973, %1987 ], [ %1973, %1983 ], [ %1973, %1980 ]
  %2025 = phi i64 [ %1972, %1978 ], [ %2018, %2016 ], [ %1972, %2012 ], [ %1972, %2008 ], [ %1972, %2005 ], [ %1972, %2002 ], [ %1972, %1999 ], [ %1972, %1995 ], [ %1972, %1991 ], [ %1972, %1987 ], [ %1972, %1983 ], [ %1972, %1980 ]
  %2026 = or i64 %2020, %1977
  %2027 = add nuw nsw i64 %1971, 1
  %2028 = icmp eq i64 %2027, %1969
  br i1 %2028, label %2029, label %1970, !llvm.loop !223

2029:                                             ; preds = %2019
  store i64 %2026, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  br label %2030

2030:                                             ; preds = %1941, %2029
  store ptr %1916, ptr %1662, align 8, !tbaa !139
  %2031 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %1648
  store i32 %1944, ptr %2031, align 4, !tbaa !21
  %2032 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2033

2033:                                             ; preds = %2030, %1665, %1661, %1656
  %2034 = phi i32 [ %1643, %1656 ], [ %1643, %1665 ], [ %1643, %1661 ], [ %2032, %2030 ]
  %2035 = add nuw nsw i64 %1644, 1
  %2036 = sext i32 %2034 to i64
  %2037 = icmp slt i64 %2035, %2036
  br i1 %2037, label %1642, label %2038, !llvm.loop !239

2038:                                             ; preds = %2033, %1935, %1929, %1915, %1891
  %2039 = phi i64 [ %2035, %2033 ], [ %1644, %1891 ], [ %1644, %1935 ], [ %1644, %1929 ], [ %1644, %1915 ]
  %2040 = trunc i64 %2039 to i32
  %2041 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2042

2042:                                             ; preds = %625, %2038, %755
  %2043 = phi i32 [ %1639, %755 ], [ %2041, %2038 ], [ %628, %625 ]
  %2044 = phi i32 [ 0, %755 ], [ %2040, %2038 ], [ 0, %625 ]
  %2045 = icmp eq i32 %2044, %2043
  br i1 %2045, label %2246, label %275

2046:                                             ; preds = %275
  call fastcc void @choose_reload_regs_init(ptr noundef nonnull %31, ptr noundef nonnull %5)
  %2047 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 9
  %2048 = load i32, ptr %2047, align 8, !tbaa !131
  %2049 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2050 = icmp eq i32 %2048, %2049
  br i1 %2050, label %2053, label %2051

2051:                                             ; preds = %2046
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6539, ptr noundef nonnull @.str.2) #19
  %2052 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2053

2053:                                             ; preds = %2051, %2046
  %2054 = phi i32 [ %2048, %2046 ], [ %2052, %2051 ]
  %2055 = icmp sgt i32 %2054, 0
  br i1 %2055, label %2056, label %2246

2056:                                             ; preds = %2053
  %2057 = getelementptr inbounds %struct.insn_chain, ptr %31, i64 0, i32 8
  br label %2058

2058:                                             ; preds = %2241, %2056
  %2059 = phi i64 [ 0, %2056 ], [ %2242, %2241 ]
  %2060 = load ptr, ptr %2057, align 8, !tbaa !133
  %2061 = getelementptr inbounds %struct.reload, ptr %2060, i64 %2059, i32 10
  %2062 = load i32, ptr %2061, align 8, !tbaa !141
  %2063 = icmp slt i32 %2062, 0
  br i1 %2063, label %2241, label %2064

2064:                                             ; preds = %2058
  %2065 = getelementptr inbounds %struct.reload, ptr %2060, i64 %2059, i32 11
  %2066 = load ptr, ptr %2065, align 8, !tbaa !139
  %2067 = icmp eq ptr %2066, null
  br i1 %2067, label %2068, label %2241

2068:                                             ; preds = %2064
  %2069 = getelementptr inbounds %struct.reload, ptr %2060, i64 %2059, i32 17
  %2070 = load i32, ptr %2069, align 4, !tbaa !155
  %2071 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 17
  %2072 = load i32, ptr %2071, align 4, !tbaa !155
  %2073 = icmp eq i32 %2070, %2072
  br i1 %2073, label %2075, label %2074

2074:                                             ; preds = %2068
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6545, ptr noundef nonnull @.str.2) #19
  br label %2075

2075:                                             ; preds = %2074, %2068
  %2076 = load i32, ptr @n_spills, align 4, !tbaa !21
  %2077 = icmp sgt i32 %2076, 0
  br i1 %2077, label %2078, label %2241

2078:                                             ; preds = %2075
  %2079 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 5
  %2080 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059
  %2081 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 11
  %2082 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 18
  %2083 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 1
  %2084 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2059, i32 12
  %2085 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2059
  br label %2086

2086:                                             ; preds = %2236, %2078
  %2087 = phi i64 [ 0, %2078 ], [ %2237, %2236 ]
  %2088 = getelementptr inbounds [53 x i16], ptr @spill_regs, i64 0, i64 %2087
  %2089 = load i16, ptr %2088, align 2, !tbaa !44
  %2090 = sext i16 %2089 to i32
  %2091 = load ptr, ptr %2057, align 8, !tbaa !133
  %2092 = getelementptr inbounds %struct.reload, ptr %2091, i64 %2059, i32 10
  %2093 = load i32, ptr %2092, align 8, !tbaa !141
  %2094 = icmp eq i32 %2093, %2090
  br i1 %2094, label %2095, label %2236

2095:                                             ; preds = %2086
  %2096 = getelementptr inbounds [53 x ptr], ptr @spill_reg_rtx, i64 0, i64 %2087
  %2097 = load ptr, ptr %2096, align 8, !tbaa !6
  %2098 = icmp eq ptr %2097, null
  br i1 %2098, label %2099, label %2101

2099:                                             ; preds = %2095
  %2100 = load i32, ptr %2079, align 4, !tbaa !158
  br label %2107

2101:                                             ; preds = %2095
  %2102 = load i32, ptr %2097, align 8
  %2103 = lshr i32 %2102, 16
  %2104 = and i32 %2103, 255
  %2105 = load i32, ptr %2079, align 4, !tbaa !158
  %2106 = icmp eq i32 %2104, %2105
  br i1 %2106, label %2110, label %2107

2107:                                             ; preds = %2101, %2099
  %2108 = phi i32 [ %2100, %2099 ], [ %2105, %2101 ]
  %2109 = call ptr @gen_rtx_REG(i32 noundef %2108, i32 noundef %2090) #19
  store ptr %2109, ptr %2096, align 8, !tbaa !6
  br label %2110

2110:                                             ; preds = %2107, %2101
  %2111 = phi ptr [ %2109, %2107 ], [ %2097, %2101 ]
  %2112 = call i32 @true_regnum(ptr noundef %2111) #19
  %2113 = load i32, ptr %2079, align 4, !tbaa !158
  %2114 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %2112, i32 noundef %2113) #19
  %2115 = icmp eq i8 %2114, 0
  br i1 %2115, label %2226, label %2116

2116:                                             ; preds = %2110
  %2117 = load ptr, ptr %2080, align 8, !tbaa !153
  %2118 = icmp eq ptr %2117, null
  br i1 %2118, label %2127, label %2119

2119:                                             ; preds = %2116
  %2120 = load i32, ptr %2117, align 8
  %2121 = lshr i32 %2120, 16
  %2122 = and i32 %2121, 255
  %2123 = icmp eq i32 %2122, 0
  br i1 %2123, label %2127, label %2124

2124:                                             ; preds = %2119
  %2125 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %2112, i32 noundef %2122) #19
  %2126 = icmp eq i8 %2125, 0
  br i1 %2126, label %2226, label %2127

2127:                                             ; preds = %2124, %2119, %2116
  %2128 = load ptr, ptr %2083, align 8, !tbaa !152
  %2129 = icmp eq ptr %2128, null
  br i1 %2129, label %2136, label %2130

2130:                                             ; preds = %2127
  %2131 = load i32, ptr %2128, align 8
  %2132 = lshr i32 %2131, 16
  %2133 = and i32 %2132, 255
  %2134 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %2112, i32 noundef %2133) #19
  %2135 = icmp eq i8 %2134, 0
  br i1 %2135, label %2226, label %2136

2136:                                             ; preds = %2130, %2127
  %2137 = trunc i64 %2087 to i32
  store i32 %2137, ptr @last_spill_reg, align 4, !tbaa !21
  %2138 = load i16, ptr %2088, align 2, !tbaa !44
  %2139 = sext i16 %2138 to i32
  %2140 = load i32, ptr %2071, align 4, !tbaa !155
  %2141 = load i32, ptr %2079, align 4, !tbaa !158
  %2142 = zext i32 %2139 to i64
  %2143 = zext i32 %2141 to i64
  %2144 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2142, i64 %2143
  %2145 = load i8, ptr %2144, align 1, !tbaa !17
  %2146 = zext i8 %2145 to i32
  %2147 = add nsw i32 %2146, %2139
  %2148 = icmp ugt i32 %2147, %2139
  br i1 %2148, label %2149, label %2225

2149:                                             ; preds = %2136
  %2150 = load i32, ptr %2084, align 8, !tbaa !156
  %2151 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %2152 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %2153 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %2154 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %2155 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %2156 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %2157 = sext i32 %2150 to i64
  %2158 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %2157
  %2159 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %2157
  %2160 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %2157
  %2161 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %2157
  %2162 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %2157
  %2163 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %2157
  %2164 = zext i32 %2147 to i64
  br label %2165

2165:                                             ; preds = %2214, %2149
  %2166 = phi i64 [ %2142, %2149 ], [ %2222, %2214 ]
  %2167 = phi i64 [ %2156, %2149 ], [ %2220, %2214 ]
  %2168 = phi i64 [ %2155, %2149 ], [ %2219, %2214 ]
  %2169 = phi i64 [ %2154, %2149 ], [ %2218, %2214 ]
  %2170 = phi i64 [ %2153, %2149 ], [ %2217, %2214 ]
  %2171 = phi i64 [ %2152, %2149 ], [ %2216, %2214 ]
  %2172 = phi i64 [ %2151, %2149 ], [ %2221, %2214 ]
  switch i32 %2140, label %2173 [
    i32 9, label %2175
    i32 3, label %2178
    i32 4, label %2182
    i32 5, label %2186
    i32 6, label %2190
    i32 7, label %2194
    i32 8, label %2197
    i32 10, label %2200
    i32 0, label %2203
    i32 1, label %2207
    i32 2, label %2211
  ]

2173:                                             ; preds = %2165
  %2174 = shl nuw i64 1, %2166
  br label %2214

2175:                                             ; preds = %2165
  %2176 = shl nuw i64 1, %2166
  %2177 = or i64 %2171, %2176
  store i64 %2177, ptr @reload_reg_used, align 8, !tbaa !40
  br label %2214

2178:                                             ; preds = %2165
  %2179 = shl nuw i64 1, %2166
  %2180 = load i64, ptr %2163, align 8, !tbaa !40
  %2181 = or i64 %2180, %2179
  store i64 %2181, ptr %2163, align 8, !tbaa !40
  br label %2214

2182:                                             ; preds = %2165
  %2183 = shl nuw i64 1, %2166
  %2184 = load i64, ptr %2162, align 8, !tbaa !40
  %2185 = or i64 %2184, %2183
  store i64 %2185, ptr %2162, align 8, !tbaa !40
  br label %2214

2186:                                             ; preds = %2165
  %2187 = shl nuw i64 1, %2166
  %2188 = load i64, ptr %2161, align 8, !tbaa !40
  %2189 = or i64 %2188, %2187
  store i64 %2189, ptr %2161, align 8, !tbaa !40
  br label %2214

2190:                                             ; preds = %2165
  %2191 = shl nuw i64 1, %2166
  %2192 = load i64, ptr %2160, align 8, !tbaa !40
  %2193 = or i64 %2192, %2191
  store i64 %2193, ptr %2160, align 8, !tbaa !40
  br label %2214

2194:                                             ; preds = %2165
  %2195 = shl nuw i64 1, %2166
  %2196 = or i64 %2170, %2195
  store i64 %2196, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  br label %2214

2197:                                             ; preds = %2165
  %2198 = shl nuw i64 1, %2166
  %2199 = or i64 %2169, %2198
  store i64 %2199, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  br label %2214

2200:                                             ; preds = %2165
  %2201 = shl nuw i64 1, %2166
  %2202 = or i64 %2168, %2201
  store i64 %2202, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  br label %2214

2203:                                             ; preds = %2165
  %2204 = shl nuw i64 1, %2166
  %2205 = load i64, ptr %2159, align 8, !tbaa !40
  %2206 = or i64 %2205, %2204
  store i64 %2206, ptr %2159, align 8, !tbaa !40
  br label %2214

2207:                                             ; preds = %2165
  %2208 = shl nuw i64 1, %2166
  %2209 = load i64, ptr %2158, align 8, !tbaa !40
  %2210 = or i64 %2209, %2208
  store i64 %2210, ptr %2158, align 8, !tbaa !40
  br label %2214

2211:                                             ; preds = %2165
  %2212 = shl nuw i64 1, %2166
  %2213 = or i64 %2167, %2212
  store i64 %2213, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %2214

2214:                                             ; preds = %2211, %2207, %2203, %2200, %2197, %2194, %2190, %2186, %2182, %2178, %2175, %2173
  %2215 = phi i64 [ %2174, %2173 ], [ %2212, %2211 ], [ %2208, %2207 ], [ %2204, %2203 ], [ %2201, %2200 ], [ %2198, %2197 ], [ %2195, %2194 ], [ %2191, %2190 ], [ %2187, %2186 ], [ %2183, %2182 ], [ %2179, %2178 ], [ %2176, %2175 ]
  %2216 = phi i64 [ %2171, %2173 ], [ %2171, %2211 ], [ %2171, %2207 ], [ %2171, %2203 ], [ %2171, %2200 ], [ %2171, %2197 ], [ %2171, %2194 ], [ %2171, %2190 ], [ %2171, %2186 ], [ %2171, %2182 ], [ %2171, %2178 ], [ %2177, %2175 ]
  %2217 = phi i64 [ %2170, %2173 ], [ %2170, %2211 ], [ %2170, %2207 ], [ %2170, %2203 ], [ %2170, %2200 ], [ %2170, %2197 ], [ %2196, %2194 ], [ %2170, %2190 ], [ %2170, %2186 ], [ %2170, %2182 ], [ %2170, %2178 ], [ %2170, %2175 ]
  %2218 = phi i64 [ %2169, %2173 ], [ %2169, %2211 ], [ %2169, %2207 ], [ %2169, %2203 ], [ %2169, %2200 ], [ %2199, %2197 ], [ %2169, %2194 ], [ %2169, %2190 ], [ %2169, %2186 ], [ %2169, %2182 ], [ %2169, %2178 ], [ %2169, %2175 ]
  %2219 = phi i64 [ %2168, %2173 ], [ %2168, %2211 ], [ %2168, %2207 ], [ %2168, %2203 ], [ %2202, %2200 ], [ %2168, %2197 ], [ %2168, %2194 ], [ %2168, %2190 ], [ %2168, %2186 ], [ %2168, %2182 ], [ %2168, %2178 ], [ %2168, %2175 ]
  %2220 = phi i64 [ %2167, %2173 ], [ %2213, %2211 ], [ %2167, %2207 ], [ %2167, %2203 ], [ %2167, %2200 ], [ %2167, %2197 ], [ %2167, %2194 ], [ %2167, %2190 ], [ %2167, %2186 ], [ %2167, %2182 ], [ %2167, %2178 ], [ %2167, %2175 ]
  %2221 = or i64 %2215, %2172
  %2222 = add nuw nsw i64 %2166, 1
  %2223 = icmp eq i64 %2222, %2164
  br i1 %2223, label %2224, label %2165, !llvm.loop !223

2224:                                             ; preds = %2214
  store i64 %2221, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  br label %2225

2225:                                             ; preds = %2136, %2224
  store ptr %2111, ptr %2081, align 8, !tbaa !139
  store i32 %2139, ptr %2085, align 4, !tbaa !21
  br label %2236

2226:                                             ; preds = %2130, %2124, %2110
  %2227 = load ptr, ptr %32, align 8, !tbaa !111
  %2228 = getelementptr inbounds %struct.rtx_def, ptr %2227, i64 1
  %2229 = load ptr, ptr %2228, align 8, !tbaa !17
  %2230 = call i32 @asm_noperands(ptr noundef %2229) #19
  %2231 = icmp slt i32 %2230, 0
  br i1 %2231, label %2232, label %2233

2232:                                             ; preds = %2226
  call void @_fatal_insn(ptr noundef nonnull @.str.19, ptr noundef nonnull %2227, ptr noundef nonnull @.str.1, i32 noundef 5706, ptr noundef nonnull @.str.2) #19
  br label %2233

2233:                                             ; preds = %2232, %2226
  call void (ptr, ptr, ...) @error_for_asm(ptr noundef nonnull %2227, ptr noundef nonnull @.str.20) #19
  store ptr null, ptr %2081, align 8, !tbaa !139
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %2080, i8 0, i64 16, i1 false)
  %2234 = load i8, ptr %2082, align 8
  %2235 = or i8 %2234, 5
  store i8 %2235, ptr %2082, align 8
  br label %2236

2236:                                             ; preds = %2233, %2225, %2086
  %2237 = add nuw nsw i64 %2087, 1
  %2238 = load i32, ptr @n_spills, align 4, !tbaa !21
  %2239 = sext i32 %2238 to i64
  %2240 = icmp slt i64 %2237, %2239
  br i1 %2240, label %2086, label %2241, !llvm.loop !240

2241:                                             ; preds = %2236, %2075, %2064, %2058
  %2242 = add nuw nsw i64 %2059, 1
  %2243 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2244 = sext i32 %2243 to i64
  %2245 = icmp slt i64 %2242, %2244
  br i1 %2245, label %2058, label %2246, !llvm.loop !241

2246:                                             ; preds = %2042, %2241, %2053
  %2247 = phi i32 [ %2054, %2053 ], [ %2243, %2241 ], [ %2043, %2042 ]
  %2248 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !21
  %2249 = icmp sgt i32 %2248, -1
  br i1 %2249, label %2250, label %2258

2250:                                             ; preds = %2246
  %2251 = icmp sgt i32 %2247, 0
  br i1 %2251, label %2253, label %2252

2252:                                             ; preds = %2250
  call void @llvm.lifetime.end.p0(i64 1440, ptr nonnull %5) #19
  br label %2854

2253:                                             ; preds = %2250, %2444
  %2254 = phi i32 [ %2445, %2444 ], [ %2247, %2250 ]
  %2255 = phi i32 [ %2446, %2444 ], [ %2247, %2250 ]
  %2256 = phi i32 [ %2448, %2444 ], [ %2248, %2250 ]
  %2257 = icmp sgt i32 %2255, 0
  br i1 %2257, label %2383, label %2444

2258:                                             ; preds = %2444, %2246
  %2259 = phi i32 [ %2247, %2246 ], [ %2445, %2444 ]
  %2260 = phi i32 [ %2247, %2246 ], [ %2446, %2444 ]
  %2261 = icmp sgt i32 %2260, 0
  br i1 %2261, label %2262, label %2643

2262:                                             ; preds = %2258
  %2263 = zext i32 %2260 to i64
  %2264 = icmp ult i32 %2260, 16
  br i1 %2264, label %2380, label %2265

2265:                                             ; preds = %2262
  %2266 = and i64 %2263, 4294967280
  br label %2267

2267:                                             ; preds = %2375, %2265
  %2268 = phi i64 [ 0, %2265 ], [ %2376, %2375 ]
  %2269 = or i64 %2268, 4
  %2270 = or i64 %2268, 8
  %2271 = or i64 %2268, 12
  %2272 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2268
  %2273 = load <4 x ptr>, ptr %2272, align 16, !tbaa !6
  %2274 = getelementptr inbounds ptr, ptr %2272, i64 4
  %2275 = load <4 x ptr>, ptr %2274, align 16, !tbaa !6
  %2276 = getelementptr inbounds ptr, ptr %2272, i64 8
  %2277 = load <4 x ptr>, ptr %2276, align 16, !tbaa !6
  %2278 = getelementptr inbounds ptr, ptr %2272, i64 12
  %2279 = load <4 x ptr>, ptr %2278, align 16, !tbaa !6
  %2280 = icmp ne <4 x ptr> %2273, zeroinitializer
  %2281 = icmp ne <4 x ptr> %2275, zeroinitializer
  %2282 = icmp ne <4 x ptr> %2277, zeroinitializer
  %2283 = icmp ne <4 x ptr> %2279, zeroinitializer
  %2284 = extractelement <4 x i1> %2280, i64 0
  br i1 %2284, label %2285, label %2288

2285:                                             ; preds = %2267
  %2286 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2268
  %2287 = extractelement <4 x ptr> %2273, i64 0
  store ptr %2287, ptr %2286, align 16, !tbaa !153
  br label %2288

2288:                                             ; preds = %2285, %2267
  %2289 = extractelement <4 x i1> %2280, i64 1
  br i1 %2289, label %2290, label %2294

2290:                                             ; preds = %2288
  %2291 = or i64 %2268, 1
  %2292 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2291
  %2293 = extractelement <4 x ptr> %2273, i64 1
  store ptr %2293, ptr %2292, align 8, !tbaa !153
  br label %2294

2294:                                             ; preds = %2290, %2288
  %2295 = extractelement <4 x i1> %2280, i64 2
  br i1 %2295, label %2296, label %2300

2296:                                             ; preds = %2294
  %2297 = or i64 %2268, 2
  %2298 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2297
  %2299 = extractelement <4 x ptr> %2273, i64 2
  store ptr %2299, ptr %2298, align 16, !tbaa !153
  br label %2300

2300:                                             ; preds = %2296, %2294
  %2301 = extractelement <4 x i1> %2280, i64 3
  br i1 %2301, label %2302, label %2306

2302:                                             ; preds = %2300
  %2303 = or i64 %2268, 3
  %2304 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2303
  %2305 = extractelement <4 x ptr> %2273, i64 3
  store ptr %2305, ptr %2304, align 8, !tbaa !153
  br label %2306

2306:                                             ; preds = %2302, %2300
  %2307 = extractelement <4 x i1> %2281, i64 0
  br i1 %2307, label %2308, label %2311

2308:                                             ; preds = %2306
  %2309 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2269
  %2310 = extractelement <4 x ptr> %2275, i64 0
  store ptr %2310, ptr %2309, align 16, !tbaa !153
  br label %2311

2311:                                             ; preds = %2308, %2306
  %2312 = extractelement <4 x i1> %2281, i64 1
  br i1 %2312, label %2313, label %2317

2313:                                             ; preds = %2311
  %2314 = or i64 %2268, 5
  %2315 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2314
  %2316 = extractelement <4 x ptr> %2275, i64 1
  store ptr %2316, ptr %2315, align 8, !tbaa !153
  br label %2317

2317:                                             ; preds = %2313, %2311
  %2318 = extractelement <4 x i1> %2281, i64 2
  br i1 %2318, label %2319, label %2323

2319:                                             ; preds = %2317
  %2320 = or i64 %2268, 6
  %2321 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2320
  %2322 = extractelement <4 x ptr> %2275, i64 2
  store ptr %2322, ptr %2321, align 16, !tbaa !153
  br label %2323

2323:                                             ; preds = %2319, %2317
  %2324 = extractelement <4 x i1> %2281, i64 3
  br i1 %2324, label %2325, label %2329

2325:                                             ; preds = %2323
  %2326 = or i64 %2268, 7
  %2327 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2326
  %2328 = extractelement <4 x ptr> %2275, i64 3
  store ptr %2328, ptr %2327, align 8, !tbaa !153
  br label %2329

2329:                                             ; preds = %2325, %2323
  %2330 = extractelement <4 x i1> %2282, i64 0
  br i1 %2330, label %2331, label %2334

2331:                                             ; preds = %2329
  %2332 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2270
  %2333 = extractelement <4 x ptr> %2277, i64 0
  store ptr %2333, ptr %2332, align 16, !tbaa !153
  br label %2334

2334:                                             ; preds = %2331, %2329
  %2335 = extractelement <4 x i1> %2282, i64 1
  br i1 %2335, label %2336, label %2340

2336:                                             ; preds = %2334
  %2337 = or i64 %2268, 9
  %2338 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2337
  %2339 = extractelement <4 x ptr> %2277, i64 1
  store ptr %2339, ptr %2338, align 8, !tbaa !153
  br label %2340

2340:                                             ; preds = %2336, %2334
  %2341 = extractelement <4 x i1> %2282, i64 2
  br i1 %2341, label %2342, label %2346

2342:                                             ; preds = %2340
  %2343 = or i64 %2268, 10
  %2344 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2343
  %2345 = extractelement <4 x ptr> %2277, i64 2
  store ptr %2345, ptr %2344, align 16, !tbaa !153
  br label %2346

2346:                                             ; preds = %2342, %2340
  %2347 = extractelement <4 x i1> %2282, i64 3
  br i1 %2347, label %2348, label %2352

2348:                                             ; preds = %2346
  %2349 = or i64 %2268, 11
  %2350 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2349
  %2351 = extractelement <4 x ptr> %2277, i64 3
  store ptr %2351, ptr %2350, align 8, !tbaa !153
  br label %2352

2352:                                             ; preds = %2348, %2346
  %2353 = extractelement <4 x i1> %2283, i64 0
  br i1 %2353, label %2354, label %2357

2354:                                             ; preds = %2352
  %2355 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2271
  %2356 = extractelement <4 x ptr> %2279, i64 0
  store ptr %2356, ptr %2355, align 16, !tbaa !153
  br label %2357

2357:                                             ; preds = %2354, %2352
  %2358 = extractelement <4 x i1> %2283, i64 1
  br i1 %2358, label %2359, label %2363

2359:                                             ; preds = %2357
  %2360 = or i64 %2268, 13
  %2361 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2360
  %2362 = extractelement <4 x ptr> %2279, i64 1
  store ptr %2362, ptr %2361, align 8, !tbaa !153
  br label %2363

2363:                                             ; preds = %2359, %2357
  %2364 = extractelement <4 x i1> %2283, i64 2
  br i1 %2364, label %2365, label %2369

2365:                                             ; preds = %2363
  %2366 = or i64 %2268, 14
  %2367 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2366
  %2368 = extractelement <4 x ptr> %2279, i64 2
  store ptr %2368, ptr %2367, align 16, !tbaa !153
  br label %2369

2369:                                             ; preds = %2365, %2363
  %2370 = extractelement <4 x i1> %2283, i64 3
  br i1 %2370, label %2371, label %2375

2371:                                             ; preds = %2369
  %2372 = or i64 %2268, 15
  %2373 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2372
  %2374 = extractelement <4 x ptr> %2279, i64 3
  store ptr %2374, ptr %2373, align 8, !tbaa !153
  br label %2375

2375:                                             ; preds = %2371, %2369
  %2376 = add nuw i64 %2268, 16
  %2377 = icmp eq i64 %2376, %2266
  br i1 %2377, label %2378, label %2267, !llvm.loop !242

2378:                                             ; preds = %2375
  %2379 = icmp eq i64 %2266, %2263
  br i1 %2379, label %2382, label %2380

2380:                                             ; preds = %2262, %2378
  %2381 = phi i64 [ 0, %2262 ], [ %2266, %2378 ]
  br label %2450

2382:                                             ; preds = %2457, %2378
  br label %2462

2383:                                             ; preds = %2253, %2438
  %2384 = phi i64 [ %2440, %2438 ], [ 0, %2253 ]
  %2385 = phi i32 [ %2439, %2438 ], [ %2256, %2253 ]
  %2386 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %2384
  %2387 = load i16, ptr %2386, align 2, !tbaa !44
  %2388 = sext i16 %2387 to i32
  %2389 = sext i16 %2387 to i64
  %2390 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %2389
  %2391 = load i8, ptr %2390, align 1, !tbaa !17
  %2392 = icmp eq i8 %2391, 0
  br i1 %2392, label %2397, label %2393

2393:                                             ; preds = %2383
  %2394 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389, i32 11
  %2395 = load ptr, ptr %2394, align 8, !tbaa !139
  %2396 = icmp eq ptr %2395, null
  br i1 %2396, label %2397, label %2404

2397:                                             ; preds = %2393, %2383
  %2398 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2389
  %2399 = load ptr, ptr %2398, align 8, !tbaa !6
  %2400 = icmp eq ptr %2399, null
  br i1 %2400, label %2438, label %2401

2401:                                             ; preds = %2397
  %2402 = load i32, ptr %2399, align 8
  %2403 = trunc i32 %2402 to i16
  switch i16 %2403, label %2438 [
    i16 37, label %2404
    i16 39, label %2404
  ]

2404:                                             ; preds = %2401, %2401, %2393
  %2405 = phi ptr [ %2395, %2393 ], [ %2399, %2401 ], [ %2399, %2401 ]
  %2406 = call i32 @true_regnum(ptr noundef nonnull %2405) #19
  %2407 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389
  %2408 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389, i32 5
  %2409 = load i32, ptr %2408, align 4, !tbaa !158
  %2410 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389, i32 12
  %2411 = load i32, ptr %2410, align 8, !tbaa !156
  %2412 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389, i32 17
  %2413 = load i32, ptr %2412, align 4, !tbaa !155
  %2414 = load ptr, ptr %2407, align 8, !tbaa !153
  %2415 = load i8, ptr %2390, align 1, !tbaa !17
  %2416 = icmp eq i8 %2415, 0
  %2417 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2389, i32 1
  %2418 = select i1 %2416, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), ptr %2417
  %2419 = load ptr, ptr %2418, align 8, !tbaa !6
  %2420 = call fastcc i32 @free_for_value_p(i32 noundef %2406, i32 noundef %2409, i32 noundef %2411, i32 noundef %2413, ptr noundef %2414, ptr noundef %2419, i32 noundef %2388, i32 noundef 1), !range !122
  %2421 = icmp eq i32 %2420, 0
  br i1 %2421, label %2422, label %2426

2422:                                             ; preds = %2404
  %2423 = icmp eq i32 %2385, 0
  br i1 %2423, label %2424, label %2438

2424:                                             ; preds = %2422
  store i8 0, ptr %2390, align 1, !tbaa !17
  %2425 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2389
  store ptr null, ptr %2425, align 8, !tbaa !6
  br label %2438

2426:                                             ; preds = %2404
  %2427 = load ptr, ptr %2407, align 8, !tbaa !153
  %2428 = icmp eq ptr %2427, null
  br i1 %2428, label %2438, label %2429

2429:                                             ; preds = %2426
  %2430 = load ptr, ptr %2417, align 8, !tbaa !152
  %2431 = icmp eq ptr %2430, %2427
  br i1 %2431, label %2438, label %2432

2432:                                             ; preds = %2429
  %2433 = call i32 @remove_address_replacements(ptr noundef nonnull %2427) #19
  %2434 = icmp ne i32 %2433, 0
  %2435 = icmp ne i32 %2385, 0
  %2436 = select i1 %2434, i1 %2435, i1 false
  %2437 = select i1 %2436, i32 2, i32 %2385
  br label %2438

2438:                                             ; preds = %2432, %2429, %2426, %2424, %2422, %2401, %2397
  %2439 = phi i32 [ %2385, %2401 ], [ %2385, %2397 ], [ %2385, %2422 ], [ %2437, %2432 ], [ %2385, %2429 ], [ %2385, %2426 ], [ 0, %2424 ]
  %2440 = add nuw nsw i64 %2384, 1
  %2441 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2442 = sext i32 %2441 to i64
  %2443 = icmp slt i64 %2440, %2442
  br i1 %2443, label %2383, label %2444, !llvm.loop !243

2444:                                             ; preds = %2438, %2253
  %2445 = phi i32 [ %2254, %2253 ], [ %2441, %2438 ]
  %2446 = phi i32 [ %2255, %2253 ], [ %2441, %2438 ]
  %2447 = phi i32 [ %2256, %2253 ], [ %2439, %2438 ]
  %2448 = add nsw i32 %2447, -1
  %2449 = icmp sgt i32 %2447, 0
  br i1 %2449, label %2253, label %2258, !llvm.loop !244

2450:                                             ; preds = %2380, %2457
  %2451 = phi i64 [ %2458, %2457 ], [ %2381, %2380 ]
  %2452 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2451
  %2453 = load ptr, ptr %2452, align 8, !tbaa !6
  %2454 = icmp eq ptr %2453, null
  br i1 %2454, label %2457, label %2455

2455:                                             ; preds = %2450
  %2456 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2451
  store ptr %2453, ptr %2456, align 8, !tbaa !153
  br label %2457

2457:                                             ; preds = %2455, %2450
  %2458 = add nuw nsw i64 %2451, 1
  %2459 = icmp eq i64 %2458, %2263
  br i1 %2459, label %2382, label %2450, !llvm.loop !246

2460:                                             ; preds = %2505
  %2461 = icmp sgt i32 %2507, 0
  br i1 %2461, label %2511, label %2643

2462:                                             ; preds = %2382, %2505
  %2463 = phi i32 [ %2506, %2505 ], [ %2259, %2382 ]
  %2464 = phi i32 [ %2507, %2505 ], [ %2260, %2382 ]
  %2465 = phi i64 [ %2508, %2505 ], [ 0, %2382 ]
  %2466 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465
  %2467 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 11
  %2468 = load ptr, ptr %2467, align 8, !tbaa !139
  %2469 = icmp eq ptr %2468, null
  br i1 %2469, label %2505, label %2470

2470:                                             ; preds = %2462
  %2471 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 18
  %2472 = load i8, ptr %2471, align 8
  %2473 = and i8 %2472, 1
  %2474 = icmp eq i8 %2473, 0
  br i1 %2474, label %2479, label %2475

2475:                                             ; preds = %2470
  %2476 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %2465
  %2477 = load i8, ptr %2476, align 1, !tbaa !17
  %2478 = icmp eq i8 %2477, 0
  br i1 %2478, label %2489, label %2479

2479:                                             ; preds = %2475, %2470
  %2480 = load ptr, ptr %2466, align 8, !tbaa !153
  %2481 = icmp eq ptr %2480, null
  br i1 %2481, label %2482, label %2505

2482:                                             ; preds = %2479
  %2483 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 1
  %2484 = load ptr, ptr %2483, align 8, !tbaa !152
  %2485 = icmp eq ptr %2484, null
  %2486 = and i8 %2472, 4
  %2487 = icmp eq i8 %2486, 0
  %2488 = and i1 %2487, %2485
  br i1 %2488, label %2489, label %2505

2489:                                             ; preds = %2482, %2475
  %2490 = call i32 @true_regnum(ptr noundef nonnull %2468) #19
  %2491 = sext i32 %2490 to i64
  %2492 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %2491
  %2493 = load i16, ptr %2492, align 2, !tbaa !44
  %2494 = icmp sgt i16 %2493, -1
  br i1 %2494, label %2495, label %2502

2495:                                             ; preds = %2489
  %2496 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 12
  %2497 = load i32, ptr %2496, align 8, !tbaa !156
  %2498 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 17
  %2499 = load i32, ptr %2498, align 4, !tbaa !155
  %2500 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2465, i32 5
  %2501 = load i32, ptr %2500, align 4, !tbaa !158
  call fastcc void @clear_reload_reg_in_use(i32 noundef %2490, i32 noundef %2497, i32 noundef %2499, i32 noundef %2501)
  br label %2502

2502:                                             ; preds = %2495, %2489
  store ptr null, ptr %2467, align 8, !tbaa !139
  %2503 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2465
  store i32 -1, ptr %2503, align 4, !tbaa !21
  %2504 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2505

2505:                                             ; preds = %2502, %2482, %2479, %2462
  %2506 = phi i32 [ %2463, %2462 ], [ %2463, %2479 ], [ %2463, %2482 ], [ %2504, %2502 ]
  %2507 = phi i32 [ %2464, %2462 ], [ %2464, %2479 ], [ %2464, %2482 ], [ %2504, %2502 ]
  %2508 = add nuw nsw i64 %2465, 1
  %2509 = sext i32 %2507 to i64
  %2510 = icmp slt i64 %2508, %2509
  br i1 %2510, label %2462, label %2460, !llvm.loop !247

2511:                                             ; preds = %2460, %2638
  %2512 = phi i64 [ %2639, %2638 ], [ 0, %2460 ]
  %2513 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %2512
  %2514 = load i16, ptr %2513, align 2, !tbaa !44
  %2515 = sext i16 %2514 to i64
  %2516 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2515
  %2517 = load i32, ptr %2516, align 4, !tbaa !21
  %2518 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2515, i32 9
  %2519 = load ptr, ptr %2518, align 8, !tbaa !248
  %2520 = icmp eq ptr %2519, null
  br i1 %2520, label %2638, label %2521

2521:                                             ; preds = %2511
  %2522 = load i32, ptr %2519, align 8
  %2523 = and i32 %2522, 65535
  %2524 = icmp eq i32 %2523, 37
  br i1 %2524, label %2525, label %2638

2525:                                             ; preds = %2521
  %2526 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2515, i32 11
  %2527 = load ptr, ptr %2526, align 8, !tbaa !139
  %2528 = icmp eq ptr %2527, null
  br i1 %2528, label %2638, label %2529

2529:                                             ; preds = %2525
  %2530 = getelementptr i8, ptr %2519, i64 8
  %2531 = load i32, ptr %2530, align 8, !tbaa !17
  %2532 = icmp slt i32 %2531, 53
  br i1 %2532, label %2533, label %2542

2533:                                             ; preds = %2529
  %2534 = sext i32 %2531 to i64
  %2535 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2515, i32 5
  %2536 = load i32, ptr %2535, align 4, !tbaa !158
  %2537 = zext i32 %2536 to i64
  %2538 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2534, i64 %2537
  %2539 = load i8, ptr %2538, align 1, !tbaa !17
  %2540 = zext i8 %2539 to i32
  %2541 = icmp eq i8 %2539, 0
  br i1 %2541, label %2550, label %2542

2542:                                             ; preds = %2533, %2529
  %2543 = phi i32 [ 1, %2529 ], [ %2540, %2533 ]
  br label %2544

2544:                                             ; preds = %2542, %2544
  %2545 = phi i32 [ %2546, %2544 ], [ %2543, %2542 ]
  %2546 = add nsw i32 %2545, -1
  %2547 = add nsw i32 %2546, %2531
  %2548 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @reg_has_output_reload, i32 noundef %2547) #19
  %2549 = icmp ugt i32 %2545, 1
  br i1 %2549, label %2544, label %2550, !llvm.loop !249

2550:                                             ; preds = %2544, %2533
  %2551 = icmp sgt i32 %2517, -1
  br i1 %2551, label %2552, label %2634

2552:                                             ; preds = %2550
  %2553 = zext i32 %2517 to i64
  %2554 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2515, i32 5
  %2555 = load i32, ptr %2554, align 4, !tbaa !158
  %2556 = zext i32 %2555 to i64
  %2557 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2553, i64 %2556
  %2558 = load i8, ptr %2557, align 1, !tbaa !17
  %2559 = icmp eq i8 %2558, 0
  br i1 %2559, label %2634, label %2560

2560:                                             ; preds = %2552
  %2561 = load i64, ptr @reg_is_output_reload, align 8, !tbaa !40
  %2562 = zext i8 %2558 to i64
  %2563 = icmp ult i8 %2558, 8
  br i1 %2563, label %2619, label %2564

2564:                                             ; preds = %2560
  %2565 = and i64 %2562, 248
  %2566 = and i64 %2562, 7
  %2567 = insertelement <2 x i64> poison, i64 %2562, i64 0
  %2568 = shufflevector <2 x i64> %2567, <2 x i64> poison, <2 x i32> zeroinitializer
  %2569 = add nsw <2 x i64> %2568, <i64 0, i64 -1>
  %2570 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %2561, i64 0
  %2571 = insertelement <2 x i32> poison, i32 %2517, i64 0
  %2572 = insertelement <2 x i32> poison, i32 %2517, i64 0
  %2573 = insertelement <2 x i32> poison, i32 %2517, i64 0
  %2574 = insertelement <2 x i32> poison, i32 %2517, i64 0
  %2575 = add <2 x i32> %2571, <i32 -1, i32 poison>
  %2576 = shufflevector <2 x i32> %2575, <2 x i32> poison, <2 x i32> zeroinitializer
  %2577 = add <2 x i32> %2572, <i32 -3, i32 poison>
  %2578 = shufflevector <2 x i32> %2577, <2 x i32> poison, <2 x i32> zeroinitializer
  %2579 = add <2 x i32> %2573, <i32 -5, i32 poison>
  %2580 = shufflevector <2 x i32> %2579, <2 x i32> poison, <2 x i32> zeroinitializer
  %2581 = add <2 x i32> %2574, <i32 -7, i32 poison>
  %2582 = shufflevector <2 x i32> %2581, <2 x i32> poison, <2 x i32> zeroinitializer
  br label %2583

2583:                                             ; preds = %2583, %2564
  %2584 = phi i64 [ 0, %2564 ], [ %2610, %2583 ]
  %2585 = phi <2 x i64> [ %2569, %2564 ], [ %2611, %2583 ]
  %2586 = phi <2 x i64> [ %2570, %2564 ], [ %2606, %2583 ]
  %2587 = phi <2 x i64> [ zeroinitializer, %2564 ], [ %2607, %2583 ]
  %2588 = phi <2 x i64> [ zeroinitializer, %2564 ], [ %2608, %2583 ]
  %2589 = phi <2 x i64> [ zeroinitializer, %2564 ], [ %2609, %2583 ]
  %2590 = trunc <2 x i64> %2585 to <2 x i32>
  %2591 = trunc <2 x i64> %2585 to <2 x i32>
  %2592 = trunc <2 x i64> %2585 to <2 x i32>
  %2593 = trunc <2 x i64> %2585 to <2 x i32>
  %2594 = add <2 x i32> %2576, %2590
  %2595 = add <2 x i32> %2578, %2591
  %2596 = add <2 x i32> %2580, %2592
  %2597 = add <2 x i32> %2582, %2593
  %2598 = zext <2 x i32> %2594 to <2 x i64>
  %2599 = zext <2 x i32> %2595 to <2 x i64>
  %2600 = zext <2 x i32> %2596 to <2 x i64>
  %2601 = zext <2 x i32> %2597 to <2 x i64>
  %2602 = shl nuw <2 x i64> <i64 1, i64 1>, %2598
  %2603 = shl nuw <2 x i64> <i64 1, i64 1>, %2599
  %2604 = shl nuw <2 x i64> <i64 1, i64 1>, %2600
  %2605 = shl nuw <2 x i64> <i64 1, i64 1>, %2601
  %2606 = or <2 x i64> %2602, %2586
  %2607 = or <2 x i64> %2603, %2587
  %2608 = or <2 x i64> %2604, %2588
  %2609 = or <2 x i64> %2605, %2589
  %2610 = add nuw i64 %2584, 8
  %2611 = add <2 x i64> %2585, <i64 -8, i64 -8>
  %2612 = icmp eq i64 %2610, %2565
  br i1 %2612, label %2613, label %2583, !llvm.loop !250

2613:                                             ; preds = %2583
  %2614 = or <2 x i64> %2607, %2606
  %2615 = or <2 x i64> %2608, %2614
  %2616 = or <2 x i64> %2609, %2615
  %2617 = call i64 @llvm.vector.reduce.or.v2i64(<2 x i64> %2616)
  %2618 = icmp eq i64 %2565, %2562
  br i1 %2618, label %2632, label %2619

2619:                                             ; preds = %2560, %2613
  %2620 = phi i64 [ %2562, %2560 ], [ %2566, %2613 ]
  %2621 = phi i64 [ %2561, %2560 ], [ %2617, %2613 ]
  br label %2622

2622:                                             ; preds = %2619, %2622
  %2623 = phi i64 [ %2625, %2622 ], [ %2620, %2619 ]
  %2624 = phi i64 [ %2630, %2622 ], [ %2621, %2619 ]
  %2625 = add nsw i64 %2623, -1
  %2626 = trunc i64 %2625 to i32
  %2627 = add i32 %2517, %2626
  %2628 = zext i32 %2627 to i64
  %2629 = shl nuw i64 1, %2628
  %2630 = or i64 %2629, %2624
  %2631 = icmp ugt i64 %2623, 1
  br i1 %2631, label %2622, label %2632, !llvm.loop !251

2632:                                             ; preds = %2622, %2613
  %2633 = phi i64 [ %2617, %2613 ], [ %2630, %2622 ]
  store i64 %2633, ptr @reg_is_output_reload, align 8, !tbaa !40
  br label %2634

2634:                                             ; preds = %2632, %2552, %2550
  %2635 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2515, i32 17
  %2636 = load i32, ptr %2635, align 4, !tbaa !155
  switch i32 %2636, label %2637 [
    i32 9, label %2638
    i32 1, label %2638
    i32 2, label %2638
  ]

2637:                                             ; preds = %2634
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6661, ptr noundef nonnull @.str.2) #19
  br label %2638

2638:                                             ; preds = %2637, %2634, %2634, %2634, %2525, %2521, %2511
  %2639 = add nuw nsw i64 %2512, 1
  %2640 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2641 = sext i32 %2640 to i64
  %2642 = icmp slt i64 %2639, %2641
  br i1 %2642, label %2511, label %2643, !llvm.loop !252

2643:                                             ; preds = %2638, %2258, %2460
  %2644 = phi i32 [ %2506, %2460 ], [ %2259, %2258 ], [ %2640, %2638 ]
  call void @llvm.lifetime.end.p0(i64 1440, ptr nonnull %5) #19
  %2645 = icmp sgt i32 %2644, 0
  br i1 %2645, label %2646, label %2854

2646:                                             ; preds = %2643, %2849
  %2647 = phi i32 [ %2850, %2849 ], [ %2644, %2643 ]
  %2648 = phi i64 [ %2851, %2849 ], [ 0, %2643 ]
  %2649 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2648
  %2650 = load ptr, ptr %2649, align 8, !tbaa !153
  %2651 = icmp eq ptr %2650, null
  br i1 %2651, label %2849, label %2652

2652:                                             ; preds = %2646
  %2653 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2648, i32 17
  %2654 = load i32, ptr %2653, align 4, !tbaa !155
  %2655 = icmp eq i32 %2654, 9
  br i1 %2655, label %2849, label %2656

2656:                                             ; preds = %2652
  %2657 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2648, i32 1
  %2658 = load ptr, ptr %2657, align 8, !tbaa !152
  %2659 = icmp eq ptr %2658, null
  br i1 %2659, label %2660, label %2849

2660:                                             ; preds = %2656
  %2661 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2648, i32 11
  %2662 = load ptr, ptr %2661, align 8, !tbaa !139
  %2663 = icmp eq ptr %2662, null
  br i1 %2663, label %2849, label %2664

2664:                                             ; preds = %2660
  %2665 = call i32 @reg_set_p(ptr noundef nonnull %2662, ptr noundef nonnull %33) #19
  %2666 = icmp eq i32 %2665, 0
  %2667 = load i32, ptr @n_reloads, align 4
  br i1 %2666, label %2668, label %2849

2668:                                             ; preds = %2664
  %2669 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2648, i32 12
  %2670 = icmp sgt i32 %2667, 0
  br i1 %2670, label %2671, label %2742

2671:                                             ; preds = %2668, %2727
  %2672 = phi i64 [ %2731, %2727 ], [ 0, %2668 ]
  %2673 = phi i32 [ %2730, %2727 ], [ 30, %2668 ]
  %2674 = phi i32 [ %2729, %2727 ], [ -1, %2668 ]
  %2675 = phi i32 [ %2728, %2727 ], [ 0, %2668 ]
  %2676 = icmp eq i64 %2648, %2672
  br i1 %2676, label %2727, label %2677

2677:                                             ; preds = %2671
  %2678 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672
  %2679 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 11
  %2680 = load ptr, ptr %2679, align 8, !tbaa !139
  %2681 = icmp eq ptr %2680, null
  br i1 %2681, label %2727, label %2682

2682:                                             ; preds = %2677
  %2683 = load ptr, ptr %2661, align 8, !tbaa !139
  %2684 = call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %2680, ptr noundef %2683) #19
  %2685 = icmp eq i32 %2684, 0
  br i1 %2685, label %2727, label %2686

2686:                                             ; preds = %2682
  %2687 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 17
  %2688 = load i32, ptr %2687, align 4, !tbaa !155
  %2689 = icmp eq i32 %2688, 3
  br i1 %2689, label %2690, label %2694

2690:                                             ; preds = %2686
  %2691 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 12
  %2692 = load i32, ptr %2691, align 8, !tbaa !156
  %2693 = call i32 @llvm.smax.i32(i32 %2692, i32 %2674)
  br label %2694

2694:                                             ; preds = %2690, %2686
  %2695 = phi i32 [ %2674, %2686 ], [ %2693, %2690 ]
  %2696 = load ptr, ptr %2661, align 8, !tbaa !139
  %2697 = load ptr, ptr %2679, align 8, !tbaa !139
  %2698 = call i32 @rtx_equal_p(ptr noundef %2696, ptr noundef %2697) #19
  %2699 = icmp eq i32 %2698, 0
  br i1 %2699, label %2711, label %2700

2700:                                             ; preds = %2694
  %2701 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 1
  %2702 = load ptr, ptr %2701, align 8, !tbaa !152
  %2703 = icmp eq ptr %2702, null
  br i1 %2703, label %2704, label %2711

2704:                                             ; preds = %2700
  %2705 = load ptr, ptr %2678, align 8, !tbaa !153
  %2706 = icmp eq ptr %2705, null
  br i1 %2706, label %2711, label %2707

2707:                                             ; preds = %2704
  %2708 = load ptr, ptr %2649, align 8, !tbaa !153
  %2709 = call i32 @rtx_equal_p(ptr noundef %2708, ptr noundef nonnull %2705) #19
  %2710 = icmp eq i32 %2709, 0
  br i1 %2710, label %2711, label %2727

2711:                                             ; preds = %2707, %2704, %2700, %2694
  %2712 = load i32, ptr %2687, align 4, !tbaa !155
  %2713 = icmp eq i32 %2712, 0
  br i1 %2713, label %2714, label %2735

2714:                                             ; preds = %2711
  %2715 = load i32, ptr %2653, align 4, !tbaa !155
  switch i32 %2715, label %2735 [
    i32 3, label %2719
    i32 10, label %2716
  ]

2716:                                             ; preds = %2714
  %2717 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 12
  %2718 = load i32, ptr %2717, align 8, !tbaa !156
  br label %2724

2719:                                             ; preds = %2714
  %2720 = load i32, ptr %2669, align 8, !tbaa !156
  %2721 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2672, i32 12
  %2722 = load i32, ptr %2721, align 8, !tbaa !156
  %2723 = icmp sgt i32 %2720, %2722
  br i1 %2723, label %2735, label %2724

2724:                                             ; preds = %2719, %2716
  %2725 = phi i32 [ %2718, %2716 ], [ %2722, %2719 ]
  %2726 = call i32 @llvm.smin.i32(i32 %2673, i32 %2725)
  br label %2727

2727:                                             ; preds = %2724, %2707, %2682, %2677, %2671
  %2728 = phi i32 [ %2675, %2671 ], [ %2675, %2677 ], [ %2675, %2707 ], [ %2675, %2682 ], [ 1, %2724 ]
  %2729 = phi i32 [ %2674, %2671 ], [ %2674, %2677 ], [ %2695, %2707 ], [ %2674, %2682 ], [ %2695, %2724 ]
  %2730 = phi i32 [ %2673, %2671 ], [ %2673, %2677 ], [ %2673, %2707 ], [ %2673, %2682 ], [ %2726, %2724 ]
  %2731 = add nuw nsw i64 %2672, 1
  %2732 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2733 = sext i32 %2732 to i64
  %2734 = icmp slt i64 %2731, %2733
  br i1 %2734, label %2671, label %2735, !llvm.loop !253

2735:                                             ; preds = %2727, %2719, %2714, %2711
  %2736 = phi i64 [ %2731, %2727 ], [ %2672, %2711 ], [ %2672, %2719 ], [ %2672, %2714 ]
  %2737 = phi i32 [ %2728, %2727 ], [ %2675, %2711 ], [ %2675, %2719 ], [ %2675, %2714 ]
  %2738 = phi i32 [ %2730, %2727 ], [ %2673, %2711 ], [ %2673, %2719 ], [ %2673, %2714 ]
  %2739 = phi i32 [ %2729, %2727 ], [ %2695, %2711 ], [ %2695, %2719 ], [ %2695, %2714 ]
  %2740 = trunc i64 %2736 to i32
  %2741 = load i32, ptr @n_reloads, align 4
  br label %2742

2742:                                             ; preds = %2735, %2668
  %2743 = phi i32 [ %2667, %2668 ], [ %2741, %2735 ]
  %2744 = phi i32 [ 0, %2668 ], [ %2740, %2735 ]
  %2745 = phi i32 [ 0, %2668 ], [ %2737, %2735 ]
  %2746 = phi i32 [ 30, %2668 ], [ %2738, %2735 ]
  %2747 = phi i32 [ -1, %2668 ], [ %2739, %2735 ]
  %2748 = icmp ne i32 %2744, %2743
  %2749 = icmp sgt i32 %2747, %2746
  %2750 = select i1 %2748, i1 true, i1 %2749
  br i1 %2750, label %2849, label %2751

2751:                                             ; preds = %2742
  %2752 = load i32, ptr %2653, align 4, !tbaa !155
  %2753 = icmp eq i32 %2752, 1
  br i1 %2753, label %2754, label %2756

2754:                                             ; preds = %2751
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6760, ptr noundef nonnull @.str.2) #19
  %2755 = load i32, ptr @n_reloads, align 4
  br label %2756

2756:                                             ; preds = %2754, %2751
  %2757 = phi i32 [ %2743, %2751 ], [ %2755, %2754 ]
  %2758 = icmp sgt i32 %2757, 0
  br i1 %2758, label %2759, label %2849

2759:                                             ; preds = %2756
  %2760 = icmp eq i32 %2745, 0
  %2761 = trunc i64 %2648 to i32
  br label %2762

2762:                                             ; preds = %2781, %2759
  %2763 = phi i64 [ 0, %2759 ], [ %2782, %2781 ]
  %2764 = icmp eq i64 %2648, %2763
  br i1 %2764, label %2781, label %2765

2765:                                             ; preds = %2762
  %2766 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2763
  %2767 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2763, i32 11
  %2768 = load ptr, ptr %2767, align 8, !tbaa !139
  %2769 = icmp eq ptr %2768, null
  br i1 %2769, label %2781, label %2770

2770:                                             ; preds = %2765
  %2771 = load ptr, ptr %2661, align 8, !tbaa !139
  %2772 = call i32 @rtx_equal_p(ptr noundef %2771, ptr noundef nonnull %2768) #19
  %2773 = icmp eq i32 %2772, 0
  br i1 %2773, label %2781, label %2774

2774:                                             ; preds = %2770
  br i1 %2760, label %2778, label %2775

2775:                                             ; preds = %2774
  %2776 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2763, i32 17
  %2777 = load i32, ptr %2776, align 4, !tbaa !155
  switch i32 %2777, label %2781 [
    i32 3, label %2778
    i32 10, label %2778
  ]

2778:                                             ; preds = %2775, %2775, %2774
  store i32 9, ptr %2653, align 4, !tbaa !155
  store ptr null, ptr %2766, align 8, !tbaa !153
  %2779 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2763
  store i32 -1, ptr %2779, align 4, !tbaa !21
  %2780 = trunc i64 %2763 to i32
  call void @transfer_replacements(i32 noundef %2761, i32 noundef %2780) #19
  br label %2781

2781:                                             ; preds = %2778, %2775, %2770, %2765, %2762
  %2782 = add nuw nsw i64 %2763, 1
  %2783 = load i32, ptr @n_reloads, align 4
  %2784 = sext i32 %2783 to i64
  %2785 = icmp slt i64 %2782, %2784
  br i1 %2785, label %2762, label %2786, !llvm.loop !254

2786:                                             ; preds = %2781
  %2787 = load i32, ptr %2653, align 4, !tbaa !155
  %2788 = icmp eq i32 %2787, 9
  %2789 = icmp sgt i32 %2783, 0
  %2790 = and i1 %2789, %2788
  br i1 %2790, label %2791, label %2849

2791:                                             ; preds = %2786, %2844
  %2792 = phi i64 [ %2845, %2844 ], [ 0, %2786 ]
  %2793 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2792
  %2794 = load ptr, ptr %2793, align 8, !tbaa !153
  %2795 = icmp eq ptr %2794, null
  br i1 %2795, label %2844, label %2796

2796:                                             ; preds = %2791
  %2797 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2792, i32 17
  %2798 = load i32, ptr %2797, align 4, !tbaa !155
  switch i32 %2798, label %2799 [
    i32 9, label %2844
    i32 10, label %2844
    i32 5, label %2844
    i32 7, label %2844
  ]

2799:                                             ; preds = %2796
  %2800 = add i32 %2798, -3
  %2801 = icmp ult i32 %2800, 2
  %2802 = or i1 %2760, %2801
  br i1 %2802, label %2803, label %2844

2803:                                             ; preds = %2799
  %2804 = load ptr, ptr %2649, align 8, !tbaa !153
  %2805 = call i32 @reg_overlap_mentioned_for_reload_p(ptr noundef nonnull %2794, ptr noundef %2804) #19
  %2806 = icmp eq i32 %2805, 0
  br i1 %2806, label %2844, label %2807

2807:                                             ; preds = %2803
  %2808 = load i32, ptr %2797, align 4, !tbaa !155
  %2809 = add i32 %2808, -3
  %2810 = icmp ult i32 %2809, 2
  %2811 = select i1 %2810, i32 10, i32 9
  store i32 %2811, ptr %2797, align 4, !tbaa !155
  %2812 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2792, i32 11
  %2813 = load ptr, ptr %2812, align 8, !tbaa !139
  %2814 = icmp ne ptr %2813, null
  %2815 = icmp ne i64 %2792, 0
  %2816 = and i1 %2815, %2814
  br i1 %2816, label %2817, label %2844

2817:                                             ; preds = %2807, %2841
  %2818 = phi i64 [ %2842, %2841 ], [ 0, %2807 ]
  %2819 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2818
  %2820 = load ptr, ptr %2819, align 8, !tbaa !153
  %2821 = icmp eq ptr %2820, null
  br i1 %2821, label %2841, label %2822

2822:                                             ; preds = %2817
  %2823 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2818, i32 11
  %2824 = load ptr, ptr %2823, align 8, !tbaa !139
  %2825 = icmp eq ptr %2824, null
  br i1 %2825, label %2841, label %2826

2826:                                             ; preds = %2822
  %2827 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2818, i32 17
  %2828 = load i32, ptr %2827, align 4, !tbaa !155
  %2829 = load i32, ptr %2797, align 4, !tbaa !155
  %2830 = icmp eq i32 %2828, %2829
  br i1 %2830, label %2831, label %2841

2831:                                             ; preds = %2826
  %2832 = load ptr, ptr %2812, align 8, !tbaa !139
  %2833 = call i32 @rtx_equal_p(ptr noundef nonnull %2824, ptr noundef %2832) #19
  %2834 = icmp eq i32 %2833, 0
  br i1 %2834, label %2841, label %2835

2835:                                             ; preds = %2831
  %2836 = load ptr, ptr %2819, align 8, !tbaa !153
  %2837 = load ptr, ptr %2793, align 8, !tbaa !153
  %2838 = call i32 @rtx_equal_p(ptr noundef %2836, ptr noundef %2837) #19
  %2839 = icmp eq i32 %2838, 0
  br i1 %2839, label %2840, label %2841

2840:                                             ; preds = %2835
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6824, ptr noundef nonnull @.str.2) #19
  br label %2841

2841:                                             ; preds = %2840, %2835, %2831, %2826, %2822, %2817
  %2842 = add nuw nsw i64 %2818, 1
  %2843 = icmp eq i64 %2842, %2792
  br i1 %2843, label %2844, label %2817, !llvm.loop !255

2844:                                             ; preds = %2841, %2807, %2803, %2799, %2796, %2796, %2796, %2796, %2791
  %2845 = add nuw nsw i64 %2792, 1
  %2846 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %2847 = sext i32 %2846 to i64
  %2848 = icmp slt i64 %2845, %2847
  br i1 %2848, label %2791, label %2849, !llvm.loop !256

2849:                                             ; preds = %2844, %2786, %2756, %2742, %2664, %2660, %2656, %2652, %2646
  %2850 = phi i32 [ %2743, %2742 ], [ %2783, %2786 ], [ %2647, %2646 ], [ %2647, %2652 ], [ %2647, %2656 ], [ %2647, %2660 ], [ %2667, %2664 ], [ %2757, %2756 ], [ %2846, %2844 ]
  %2851 = add nuw nsw i64 %2648, 1
  %2852 = sext i32 %2850 to i64
  %2853 = icmp slt i64 %2851, %2852
  br i1 %2853, label %2646, label %2854, !llvm.loop !257

2854:                                             ; preds = %2849, %2252, %2643
  %2855 = phi i32 [ %2644, %2643 ], [ %2247, %2252 ], [ %2850, %2849 ]
  %2856 = load ptr, ptr %32, align 8, !tbaa !111
  store i64 0, ptr @reg_reloaded_died, align 8, !tbaa !40
  %2857 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %2858 = icmp sgt i32 %2857, 0
  br i1 %2858, label %2859, label %2862

2859:                                             ; preds = %2854
  %2860 = zext i32 %2857 to i64
  %2861 = shl nuw nsw i64 %2860, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @other_output_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @outaddr_address_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @output_address_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @output_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @inpaddr_address_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @input_address_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @input_reload_insns, i8 0, i64 %2861, i1 false), !tbaa !6
  br label %2862

2862:                                             ; preds = %2859, %2854
  store ptr null, ptr @other_input_address_reload_insns, align 8, !tbaa !6
  store ptr null, ptr @other_input_reload_insns, align 8, !tbaa !6
  store ptr null, ptr @operand_reload_insns, align 8, !tbaa !6
  store ptr null, ptr @other_operand_reload_insns, align 8, !tbaa !6
  %2863 = load ptr, ptr @dump_file, align 8, !tbaa !6
  %2864 = icmp eq ptr %2863, null
  br i1 %2864, label %2871, label %2865

2865:                                             ; preds = %2862
  %2866 = getelementptr inbounds %struct.rtx_def, ptr %2856, i64 0, i32 1
  %2867 = load i32, ptr %2866, align 8, !tbaa !17
  %2868 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef nonnull %2863, ptr noundef nonnull @.str.16, i32 noundef %2867)
  %2869 = load ptr, ptr @dump_file, align 8, !tbaa !6
  call void @debug_reload_to_stream(ptr noundef %2869) #19
  %2870 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %2871

2871:                                             ; preds = %2865, %2862
  %2872 = phi i32 [ %2870, %2865 ], [ %2855, %2862 ]
  %2873 = icmp sgt i32 %2872, 0
  br i1 %2873, label %2874, label %4274

2874:                                             ; preds = %2871, %4269
  %2875 = phi i64 [ %4270, %4269 ], [ 0, %2871 ]
  %2876 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2875, i32 11
  %2877 = load ptr, ptr %2876, align 8, !tbaa !139
  %2878 = icmp eq ptr %2877, null
  br i1 %2878, label %2900, label %2879

2879:                                             ; preds = %2874
  %2880 = getelementptr i8, ptr %2877, i64 8
  %2881 = load i32, ptr %2880, align 8, !tbaa !17
  %2882 = icmp ult i32 %2881, 53
  br i1 %2882, label %2883, label %2900

2883:                                             ; preds = %2879
  %2884 = load i32, ptr %2877, align 8
  %2885 = lshr i32 %2884, 16
  %2886 = and i32 %2885, 255
  %2887 = zext i32 %2881 to i64
  %2888 = zext i32 %2886 to i64
  %2889 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %2887, i64 %2888
  %2890 = load i8, ptr %2889, align 1, !tbaa !17
  %2891 = icmp eq i8 %2890, 0
  br i1 %2891, label %2900, label %2892

2892:                                             ; preds = %2883
  %2893 = zext i8 %2890 to i64
  %2894 = shl nuw nsw i64 %2887, 3
  %2895 = getelementptr i8, ptr @new_spill_reg_store, i64 %2894
  %2896 = shl nuw nsw i64 %2893, 3
  %2897 = add nuw nsw i64 %2896, 34359738360
  %2898 = and i64 %2897, 34359738360
  %2899 = add nuw nsw i64 %2898, 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(1) %2895, i8 0, i64 %2899, i1 false), !tbaa !6
  br label %2900

2900:                                             ; preds = %2892, %2883, %2879, %2874
  %2901 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875
  %2902 = load ptr, ptr %32, align 8, !tbaa !111
  %2903 = load ptr, ptr %2901, align 8, !tbaa !6
  %2904 = icmp eq ptr %2903, null
  br i1 %2904, label %2905, label %2907

2905:                                             ; preds = %2900
  %2906 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_input, i64 0, i64 %2875
  store ptr %2877, ptr %2906, align 8, !tbaa !6
  br label %3725

2907:                                             ; preds = %2900
  %2908 = load i32, ptr %2903, align 8
  %2909 = and i32 %2908, 65535
  %2910 = icmp eq i32 %2909, 43
  %2911 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 8
  %2912 = select i1 %2910, ptr %2911, ptr %2901
  %2913 = load ptr, ptr %2912, align 8, !tbaa !6
  %2914 = icmp ne ptr %2913, null
  %2915 = icmp ne ptr %2877, null
  %2916 = and i1 %2915, %2914
  br i1 %2916, label %2917, label %2936

2917:                                             ; preds = %2907
  %2918 = load i32, ptr %2913, align 8
  %2919 = lshr i32 %2918, 16
  %2920 = and i32 %2919, 255
  %2921 = icmp eq i32 %2920, 0
  br i1 %2921, label %2922, label %2925

2922:                                             ; preds = %2917
  %2923 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 3
  %2924 = load i32, ptr %2923, align 4, !tbaa !258
  br label %2925

2925:                                             ; preds = %2922, %2917
  %2926 = phi i32 [ %2924, %2922 ], [ %2920, %2917 ]
  %2927 = load i32, ptr %2877, align 8
  %2928 = lshr i32 %2927, 16
  %2929 = and i32 %2928, 255
  %2930 = icmp eq i32 %2929, %2926
  br i1 %2930, label %2933, label %2931

2931:                                             ; preds = %2925
  %2932 = call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %2877, i32 noundef %2926) #19
  br label %2933

2933:                                             ; preds = %2931, %2925
  %2934 = phi ptr [ %2877, %2925 ], [ %2932, %2931 ]
  %2935 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_input, i64 0, i64 %2875
  store ptr %2934, ptr %2935, align 8, !tbaa !6
  br label %2938

2936:                                             ; preds = %2907
  %2937 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_input, i64 0, i64 %2875
  store ptr %2877, ptr %2937, align 8, !tbaa !6
  br i1 %2914, label %2938, label %3725

2938:                                             ; preds = %2936, %2933
  %2939 = phi ptr [ %2935, %2933 ], [ %2937, %2936 ]
  %2940 = phi ptr [ %2934, %2933 ], [ %2877, %2936 ]
  %2941 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %2875
  %2942 = load i8, ptr %2941, align 1, !tbaa !17
  %2943 = icmp eq i8 %2942, 0
  br i1 %2943, label %2952, label %2944

2944:                                             ; preds = %2938
  %2945 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 1
  %2946 = load ptr, ptr %2945, align 8, !tbaa !152
  %2947 = icmp eq ptr %2946, null
  br i1 %2947, label %3725, label %2948

2948:                                             ; preds = %2944
  %2949 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 9
  %2950 = load ptr, ptr %2949, align 8, !tbaa !248
  %2951 = icmp eq ptr %2950, null
  br i1 %2951, label %2952, label %3725

2952:                                             ; preds = %2948, %2938
  %2953 = call i32 @rtx_equal_p(ptr noundef %2940, ptr noundef nonnull %2913) #19
  %2954 = icmp eq i32 %2953, 0
  %2955 = icmp ne ptr %2940, null
  %2956 = select i1 %2954, i1 %2955, i1 false
  br i1 %2956, label %2957, label %3725

2957:                                             ; preds = %2952
  %2958 = load ptr, ptr %32, align 8, !tbaa !111
  %2959 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2875
  %2960 = load ptr, ptr %2959, align 8, !tbaa !6
  %2961 = icmp eq ptr %2960, null
  br i1 %2961, label %2974, label %2962

2962:                                             ; preds = %2957
  %2963 = load ptr, ptr %2911, align 8, !tbaa !225
  %2964 = load i32, ptr %2963, align 8
  %2965 = and i32 %2964, 65535
  %2966 = icmp eq i32 %2965, 37
  br i1 %2966, label %2967, label %2974

2967:                                             ; preds = %2962
  %2968 = load i32, ptr %2913, align 8
  %2969 = trunc i32 %2968 to i16
  switch i16 %2969, label %2973 [
    i16 37, label %2974
    i16 39, label %2970
  ]

2970:                                             ; preds = %2967
  %2971 = getelementptr inbounds %struct.rtx_def, ptr %2913, i64 0, i32 1
  %2972 = load ptr, ptr %2971, align 8, !tbaa !17
  br label %2974

2973:                                             ; preds = %2967
  br label %2974

2974:                                             ; preds = %2973, %2970, %2967, %2962, %2957
  %2975 = phi ptr [ %2963, %2970 ], [ %2963, %2967 ], [ %2963, %2973 ], [ %2913, %2962 ], [ %2913, %2957 ]
  %2976 = phi ptr [ %2972, %2970 ], [ %2913, %2967 ], [ null, %2973 ], [ null, %2962 ], [ null, %2957 ]
  %2977 = load ptr, ptr %2939, align 8, !tbaa !6
  %2978 = load i32, ptr %2977, align 8
  %2979 = lshr i32 %2978, 16
  %2980 = and i32 %2979, 255
  %2981 = load i32, ptr @optimize, align 4, !tbaa !21
  %2982 = icmp eq i32 %2981, 0
  br i1 %2982, label %3017, label %2983

2983:                                             ; preds = %2974
  %2984 = load i32, ptr %2913, align 8
  %2985 = and i32 %2984, 65535
  %2986 = icmp eq i32 %2985, 37
  br i1 %2986, label %2987, label %3017

2987:                                             ; preds = %2983
  %2988 = getelementptr i8, ptr %2913, i64 8
  %2989 = load i32, ptr %2988, align 8, !tbaa !17
  %2990 = icmp ult i32 %2989, 53
  br i1 %2990, label %2991, label %3017

2991:                                             ; preds = %2987
  %2992 = zext i32 %2989 to i64
  %2993 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %2992
  %2994 = load ptr, ptr %2993, align 8, !tbaa !6
  %2995 = icmp eq ptr %2994, null
  br i1 %2995, label %3017, label %2996

2996:                                             ; preds = %2991
  %2997 = load i32, ptr %2975, align 8
  %2998 = and i32 %2997, 65535
  %2999 = icmp eq i32 %2998, 37
  br i1 %2999, label %3000, label %3017

3000:                                             ; preds = %2996
  %3001 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %2992
  %3002 = load ptr, ptr %3001, align 8, !tbaa !6
  %3003 = call i32 @dead_or_set_p(ptr noundef %2958, ptr noundef %3002) #19
  %3004 = icmp eq i32 %3003, 0
  br i1 %3004, label %3005, label %3014

3005:                                             ; preds = %3000
  %3006 = load i32, ptr %2988, align 8, !tbaa !17
  %3007 = zext i32 %3006 to i64
  %3008 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3007
  %3009 = load ptr, ptr %3008, align 8, !tbaa !6
  %3010 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 9
  %3011 = load ptr, ptr %3010, align 8, !tbaa !248
  %3012 = call i32 @rtx_equal_p(ptr noundef %3009, ptr noundef %3011) #19
  %3013 = icmp eq i32 %3012, 0
  br i1 %3013, label %3017, label %3014

3014:                                             ; preds = %3005, %3000
  %3015 = load i32, ptr %2988, align 8, !tbaa !17
  %3016 = trunc i64 %2875 to i32
  call fastcc void @delete_output_reload(ptr noundef %2958, i32 noundef %3016, i32 noundef %3015, ptr noundef nonnull %2977)
  br label %3017

3017:                                             ; preds = %3014, %3005, %2996, %2991, %2987, %2983, %2974
  %3018 = load i32, ptr %2913, align 8
  %3019 = and i32 %3018, 65535
  %3020 = icmp eq i32 %3019, 39
  br i1 %3020, label %3021, label %3033

3021:                                             ; preds = %3017, %3027
  %3022 = phi i32 [ %3030, %3027 ], [ %3018, %3017 ]
  %3023 = phi ptr [ %3029, %3027 ], [ %2913, %3017 ]
  %3024 = lshr i32 %3022, 16
  %3025 = and i32 %3024, 255
  %3026 = icmp eq i32 %3025, %2980
  br i1 %3026, label %3033, label %3027

3027:                                             ; preds = %3021
  %3028 = getelementptr inbounds %struct.rtx_def, ptr %3023, i64 0, i32 1
  %3029 = load ptr, ptr %3028, align 8, !tbaa !17
  %3030 = load i32, ptr %3029, align 8
  %3031 = and i32 %3030, 65535
  %3032 = icmp eq i32 %3031, 39
  br i1 %3032, label %3021, label %3033, !llvm.loop !259

3033:                                             ; preds = %3027, %3021, %3017
  %3034 = phi ptr [ %2913, %3017 ], [ %3023, %3021 ], [ %3029, %3027 ]
  %3035 = phi i32 [ %3018, %3017 ], [ %3022, %3021 ], [ %3030, %3027 ]
  %3036 = lshr i32 %3035, 16
  %3037 = and i32 %3036, 255
  %3038 = icmp eq i32 %3037, 0
  %3039 = icmp eq i32 %2980, %3037
  %3040 = select i1 %3038, i1 true, i1 %3039
  br i1 %3040, label %3043, label %3041

3041:                                             ; preds = %3033
  %3042 = call ptr @gen_lowpart_SUBREG(i32 noundef %2980, ptr noundef nonnull %3034) #19
  br label %3043

3043:                                             ; preds = %3041, %3033
  %3044 = phi ptr [ %3042, %3041 ], [ %3034, %3033 ]
  %3045 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 17
  %3046 = load i32, ptr %3045, align 4, !tbaa !155
  switch i32 %3046, label %3075 [
    i32 9, label %3076
    i32 0, label %3047
    i32 3, label %3052
    i32 4, label %3057
    i32 5, label %3062
    i32 6, label %3067
    i32 7, label %3072
    i32 8, label %3073
    i32 10, label %3074
  ]

3047:                                             ; preds = %3043
  %3048 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3049 = load i32, ptr %3048, align 8, !tbaa !156
  %3050 = sext i32 %3049 to i64
  %3051 = getelementptr inbounds [30 x ptr], ptr @input_reload_insns, i64 0, i64 %3050
  br label %3076

3052:                                             ; preds = %3043
  %3053 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3054 = load i32, ptr %3053, align 8, !tbaa !156
  %3055 = sext i32 %3054 to i64
  %3056 = getelementptr inbounds [30 x ptr], ptr @input_address_reload_insns, i64 0, i64 %3055
  br label %3076

3057:                                             ; preds = %3043
  %3058 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3059 = load i32, ptr %3058, align 8, !tbaa !156
  %3060 = sext i32 %3059 to i64
  %3061 = getelementptr inbounds [30 x ptr], ptr @inpaddr_address_reload_insns, i64 0, i64 %3060
  br label %3076

3062:                                             ; preds = %3043
  %3063 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3064 = load i32, ptr %3063, align 8, !tbaa !156
  %3065 = sext i32 %3064 to i64
  %3066 = getelementptr inbounds [30 x ptr], ptr @output_address_reload_insns, i64 0, i64 %3065
  br label %3076

3067:                                             ; preds = %3043
  %3068 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3069 = load i32, ptr %3068, align 8, !tbaa !156
  %3070 = sext i32 %3069 to i64
  %3071 = getelementptr inbounds [30 x ptr], ptr @outaddr_address_reload_insns, i64 0, i64 %3070
  br label %3076

3072:                                             ; preds = %3043
  br label %3076

3073:                                             ; preds = %3043
  br label %3076

3074:                                             ; preds = %3043
  br label %3076

3075:                                             ; preds = %3043
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6984, ptr noundef nonnull @.str.2) #19
  br label %3076

3076:                                             ; preds = %3075, %3074, %3073, %3072, %3067, %3062, %3057, %3052, %3047, %3043
  %3077 = phi ptr [ undef, %3075 ], [ @other_input_address_reload_insns, %3074 ], [ @other_operand_reload_insns, %3073 ], [ @operand_reload_insns, %3072 ], [ %3071, %3067 ], [ %3066, %3062 ], [ %3061, %3057 ], [ %3056, %3052 ], [ %3051, %3047 ], [ @other_input_reload_insns, %3043 ]
  %3078 = load ptr, ptr %3077, align 8, !tbaa !6
  call void @push_to_sequence(ptr noundef %3078) #19
  %3079 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 1
  %3080 = load ptr, ptr %3079, align 8, !tbaa !152
  %3081 = icmp eq ptr %3080, null
  br i1 %3081, label %3247, label %3082

3082:                                             ; preds = %3076
  %3083 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 9
  %3084 = load ptr, ptr %3083, align 8, !tbaa !248
  %3085 = icmp eq ptr %3084, null
  br i1 %3085, label %3086, label %3247

3086:                                             ; preds = %3082
  %3087 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 13
  %3088 = load i32, ptr %3087, align 4, !tbaa !260
  %3089 = icmp slt i32 %3088, 0
  br i1 %3089, label %3091, label %3090

3090:                                             ; preds = %3086
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 6995, ptr noundef nonnull @.str.2) #19
  br label %3091

3091:                                             ; preds = %3090, %3086
  %3092 = load i8, ptr %2941, align 1, !tbaa !17
  %3093 = icmp eq i8 %3092, 0
  %3094 = select i1 %3093, ptr %3044, ptr %2977
  %3095 = load ptr, ptr %2911, align 8, !tbaa !225
  %3096 = getelementptr inbounds %struct.rtx_def, ptr %3095, i64 0, i32 1
  %3097 = load ptr, ptr %3096, align 8, !tbaa !17
  %3098 = load i32, ptr @optimize, align 4, !tbaa !21
  %3099 = icmp eq i32 %3098, 0
  br i1 %3099, label %3132, label %3100

3100:                                             ; preds = %3091
  %3101 = load i32, ptr %3094, align 8
  %3102 = and i32 %3101, 65535
  %3103 = icmp eq i32 %3102, 37
  br i1 %3103, label %3104, label %3132

3104:                                             ; preds = %3100
  %3105 = getelementptr i8, ptr %3094, i64 8
  %3106 = load i32, ptr %3105, align 8, !tbaa !17
  %3107 = icmp ult i32 %3106, 53
  br i1 %3107, label %3108, label %3132

3108:                                             ; preds = %3104
  %3109 = zext i32 %3106 to i64
  %3110 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %3109
  %3111 = load ptr, ptr %3110, align 8, !tbaa !6
  %3112 = icmp eq ptr %3111, null
  br i1 %3112, label %3132, label %3113

3113:                                             ; preds = %3108
  %3114 = load i32, ptr %3097, align 8
  %3115 = and i32 %3114, 65535
  %3116 = icmp eq i32 %3115, 37
  br i1 %3116, label %3117, label %3132

3117:                                             ; preds = %3113
  %3118 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3109
  %3119 = load ptr, ptr %3118, align 8, !tbaa !6
  %3120 = call i32 @dead_or_set_p(ptr noundef %2958, ptr noundef %3119) #19
  %3121 = icmp eq i32 %3120, 0
  br i1 %3121, label %3122, label %3129

3122:                                             ; preds = %3117
  %3123 = load i32, ptr %3105, align 8, !tbaa !17
  %3124 = zext i32 %3123 to i64
  %3125 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3124
  %3126 = load ptr, ptr %3125, align 8, !tbaa !6
  %3127 = call i32 @rtx_equal_p(ptr noundef %3126, ptr noundef nonnull %3097) #19
  %3128 = icmp eq i32 %3127, 0
  br i1 %3128, label %3132, label %3129

3129:                                             ; preds = %3122, %3117
  %3130 = load i32, ptr %3105, align 8, !tbaa !17
  %3131 = trunc i64 %2875 to i32
  call fastcc void @delete_output_reload(ptr noundef %2958, i32 noundef %3131, i32 noundef %3130, ptr noundef nonnull %2977)
  br label %3132

3132:                                             ; preds = %3129, %3122, %3113, %3108, %3104, %3100, %3091
  %3133 = load ptr, ptr %3079, align 8, !tbaa !152
  %3134 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 7
  %3135 = load i32, ptr %3134, align 4, !tbaa !261
  %3136 = getelementptr inbounds %struct.rtx_def, ptr %3133, i64 0, i32 1
  %3137 = call ptr @find_replacement(ptr noundef nonnull %3136) #19
  %3138 = load i32, ptr %3133, align 8
  %3139 = trunc i32 %3138 to i16
  %3140 = add i16 %3139, -76
  %3141 = icmp ult i16 %3140, 4
  %3142 = trunc i16 %3140 to i4
  %3143 = lshr i4 -5, %3142
  %3144 = and i4 %3143, 1
  %3145 = icmp ne i4 %3144, 0
  %3146 = select i1 %3141, i1 %3145, i1 false
  %3147 = icmp eq ptr %3094, %3133
  %3148 = select i1 %3147, ptr %3137, ptr %3094
  %3149 = load i32, ptr %3137, align 8
  %3150 = and i32 %3149, 65535
  %3151 = icmp eq i32 %3150, 37
  br i1 %3151, label %3152, label %3160

3152:                                             ; preds = %3132
  %3153 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %3154 = getelementptr i8, ptr %3137, i64 8
  %3155 = load i32, ptr %3154, align 8, !tbaa !17
  %3156 = zext i32 %3155 to i64
  %3157 = getelementptr inbounds ptr, ptr %3153, i64 %3156
  store ptr null, ptr %3157, align 8, !tbaa !6
  %3158 = load i32, ptr %3133, align 8
  %3159 = trunc i32 %3158 to i16
  br label %3160

3160:                                             ; preds = %3152, %3132
  %3161 = phi i16 [ %3159, %3152 ], [ %3139, %3132 ]
  switch i16 %3161, label %3176 [
    i16 78, label %3162
    i16 79, label %3162
    i16 74, label %3174
    i16 76, label %3174
  ]

3162:                                             ; preds = %3160, %3160
  %3163 = getelementptr inbounds %struct.rtx_def, ptr %3133, i64 0, i32 1, i32 0, i32 0, i64 1
  %3164 = load ptr, ptr %3163, align 8, !tbaa !17
  %3165 = load i32, ptr %3164, align 8
  %3166 = and i32 %3165, 65535
  %3167 = icmp eq i32 %3166, 49
  br i1 %3167, label %3170, label %3168

3168:                                             ; preds = %3162
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 8835, ptr noundef nonnull @.str.2) #19
  %3169 = load ptr, ptr %3163, align 8, !tbaa !17
  br label %3170

3170:                                             ; preds = %3168, %3162
  %3171 = phi ptr [ %3164, %3162 ], [ %3169, %3168 ]
  %3172 = getelementptr inbounds %struct.rtx_def, ptr %3171, i64 0, i32 1, i32 0, i32 0, i64 1
  %3173 = call ptr @find_replacement(ptr noundef nonnull %3172) #19
  br label %3180

3174:                                             ; preds = %3160, %3160
  %3175 = sub nsw i32 0, %3135
  br label %3176

3176:                                             ; preds = %3174, %3160
  %3177 = phi i32 [ %3175, %3174 ], [ %3135, %3160 ]
  %3178 = sext i32 %3177 to i64
  %3179 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %3178) #19
  br label %3180

3180:                                             ; preds = %3176, %3170
  %3181 = phi ptr [ %3173, %3170 ], [ %3179, %3176 ]
  %3182 = icmp ne ptr %3148, %2977
  %3183 = select i1 %3146, i1 %3182, i1 false
  br i1 %3183, label %3184, label %3187

3184:                                             ; preds = %3180
  %3185 = call ptr @gen_move_insn(ptr noundef nonnull %2977, ptr noundef %3148) #19
  %3186 = call ptr @emit_insn(ptr noundef %3185) #19
  br label %3187

3187:                                             ; preds = %3184, %3180
  br i1 %3147, label %3188, label %3212

3188:                                             ; preds = %3187
  %3189 = call ptr @get_last_insn() #19
  %3190 = load i32, ptr %3137, align 8
  %3191 = lshr i32 %3190, 16
  %3192 = and i32 %3191, 255
  %3193 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %3192, ptr noundef nonnull %3137, ptr noundef %3181) #19
  %3194 = call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %3137, ptr noundef %3193) #19
  %3195 = call ptr @emit_insn(ptr noundef %3194) #19
  %3196 = getelementptr inbounds %struct.rtx_def, ptr %3195, i64 1, i32 1
  %3197 = load i32, ptr %3196, align 8, !tbaa !17
  %3198 = icmp slt i32 %3197, 0
  br i1 %3198, label %3199, label %3204

3199:                                             ; preds = %3188
  %3200 = getelementptr inbounds %struct.rtx_def, ptr %3195, i64 1
  %3201 = load ptr, ptr %3200, align 8, !tbaa !17
  %3202 = call i32 @recog(ptr noundef %3201, ptr noundef nonnull %3195, ptr noundef null) #19
  store i32 %3202, ptr %3196, align 8, !tbaa !17
  %3203 = icmp sgt i32 %3202, -1
  br i1 %3203, label %3204, label %3211

3204:                                             ; preds = %3199, %3188
  call void @extract_insn(ptr noundef nonnull %3195) #19
  %3205 = call i32 @constrain_operands(i32 noundef 1) #19
  %3206 = icmp eq i32 %3205, 0
  br i1 %3206, label %3211, label %3207

3207:                                             ; preds = %3204
  br i1 %3146, label %3241, label %3208

3208:                                             ; preds = %3207
  %3209 = call ptr @gen_move_insn(ptr noundef nonnull %2977, ptr noundef nonnull %3137) #19
  %3210 = call ptr @emit_insn(ptr noundef %3209) #19
  br label %3241

3211:                                             ; preds = %3204, %3199
  call void @delete_insns_since(ptr noundef %3189) #19
  br label %3212

3212:                                             ; preds = %3211, %3187
  br i1 %3146, label %3223, label %3213

3213:                                             ; preds = %3212
  %3214 = icmp eq ptr %3094, %2977
  br i1 %3214, label %3218, label %3215

3215:                                             ; preds = %3213
  %3216 = call ptr @gen_move_insn(ptr noundef nonnull %2977, ptr noundef %3148) #19
  %3217 = call ptr @emit_insn(ptr noundef %3216) #19
  br label %3218

3218:                                             ; preds = %3215, %3213
  %3219 = call ptr @gen_add2_insn(ptr noundef nonnull %2977, ptr noundef %3181) #19
  %3220 = call ptr @emit_insn(ptr noundef %3219) #19
  %3221 = call ptr @gen_move_insn(ptr noundef nonnull %3137, ptr noundef nonnull %2977) #19
  %3222 = call ptr @emit_insn(ptr noundef %3221) #19
  br label %3241

3223:                                             ; preds = %3212
  %3224 = call ptr @gen_add2_insn(ptr noundef nonnull %2977, ptr noundef %3181) #19
  %3225 = call ptr @emit_insn(ptr noundef %3224) #19
  %3226 = call ptr @gen_move_insn(ptr noundef nonnull %3137, ptr noundef nonnull %2977) #19
  %3227 = call ptr @emit_insn(ptr noundef %3226) #19
  %3228 = load i32, ptr %3181, align 8
  %3229 = and i32 %3228, 65535
  %3230 = icmp eq i32 %3229, 30
  br i1 %3230, label %3231, label %3238

3231:                                             ; preds = %3223
  %3232 = getelementptr inbounds %struct.rtx_def, ptr %3181, i64 0, i32 1
  %3233 = load i64, ptr %3232, align 8, !tbaa !17
  %3234 = sub nsw i64 0, %3233
  %3235 = call ptr @gen_rtx_CONST_INT(i32 noundef 0, i64 noundef %3234) #19
  %3236 = call ptr @gen_add2_insn(ptr noundef nonnull %2977, ptr noundef %3235) #19
  %3237 = call ptr @emit_insn(ptr noundef %3236) #19
  br label %3241

3238:                                             ; preds = %3223
  %3239 = call ptr @gen_sub2_insn(ptr noundef nonnull %2977, ptr noundef nonnull %3181) #19
  %3240 = call ptr @emit_insn(ptr noundef %3239) #19
  br label %3241

3241:                                             ; preds = %3238, %3231, %3218, %3208, %3207
  %3242 = phi ptr [ %3195, %3208 ], [ %3195, %3207 ], [ %3227, %3231 ], [ %3227, %3238 ], [ %3222, %3218 ]
  %3243 = getelementptr i8, ptr %2977, i64 8
  %3244 = load i32, ptr %3243, align 8, !tbaa !17
  %3245 = zext i32 %3244 to i64
  %3246 = getelementptr inbounds [53 x ptr], ptr @new_spill_reg_store, i64 0, i64 %3245
  store ptr %3242, ptr %3246, align 8, !tbaa !6
  br label %3715

3247:                                             ; preds = %3082, %3076
  %3248 = load i32, ptr @optimize, align 4, !tbaa !21
  %3249 = icmp eq i32 %3248, 0
  br i1 %3249, label %3389, label %3250

3250:                                             ; preds = %3247
  %3251 = load i32, ptr %2975, align 8
  %3252 = and i32 %3251, 65535
  %3253 = icmp eq i32 %3252, 37
  br i1 %3253, label %3254, label %3389

3254:                                             ; preds = %3250
  %3255 = getelementptr i8, ptr %2975, i64 8
  %3256 = load i32, ptr %3255, align 8, !tbaa !17
  %3257 = icmp ugt i32 %3256, 52
  br i1 %3257, label %3258, label %3389

3258:                                             ; preds = %3254
  %3259 = call i32 @dead_or_set_p(ptr noundef %2958, ptr noundef nonnull %2975) #19
  %3260 = icmp eq i32 %3259, 0
  br i1 %3260, label %3389, label %3261

3261:                                             ; preds = %3258
  %3262 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %3263 = icmp sgt i32 %3262, 0
  br i1 %3263, label %3264, label %3280

3264:                                             ; preds = %3261, %3275
  %3265 = phi i32 [ %3276, %3275 ], [ %3262, %3261 ]
  %3266 = phi i64 [ %3277, %3275 ], [ 0, %3261 ]
  %3267 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %3266
  %3268 = load ptr, ptr %3267, align 8, !tbaa !6
  %3269 = icmp eq ptr %3268, null
  br i1 %3269, label %3275, label %3270

3270:                                             ; preds = %3264
  %3271 = call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %2977, ptr noundef nonnull %3268) #19
  %3272 = icmp eq i32 %3271, 0
  br i1 %3272, label %3273, label %3389

3273:                                             ; preds = %3270
  %3274 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %3275

3275:                                             ; preds = %3273, %3264
  %3276 = phi i32 [ %3274, %3273 ], [ %3265, %3264 ]
  %3277 = add nuw nsw i64 %3266, 1
  %3278 = sext i32 %3276 to i64
  %3279 = icmp slt i64 %3277, %3278
  br i1 %3279, label %3264, label %3280, !llvm.loop !262

3280:                                             ; preds = %3275, %3261
  %3281 = getelementptr i8, ptr %2977, i64 8
  %3282 = load i32, ptr %3281, align 8, !tbaa !17
  %3283 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 5
  %3284 = load i32, ptr %3283, align 4, !tbaa !158
  %3285 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3286 = load i32, ptr %3285, align 8, !tbaa !156
  %3287 = load i32, ptr %3045, align 4, !tbaa !155
  %3288 = load ptr, ptr %3079, align 8, !tbaa !152
  %3289 = trunc i64 %2875 to i32
  %3290 = call fastcc i32 @free_for_value_p(i32 noundef %3282, i32 noundef %3284, i32 noundef %3286, i32 noundef %3287, ptr noundef nonnull %2975, ptr noundef %3288, i32 noundef %3289, i32 noundef 0), !range !122
  %3291 = icmp eq i32 %3290, 0
  br i1 %3291, label %3389, label %3292

3292:                                             ; preds = %3280
  %3293 = getelementptr inbounds %struct.rtx_def, ptr %2958, i64 0, i32 1, i32 0, i32 0, i64 1
  %3294 = load ptr, ptr %3293, align 8, !tbaa !17
  %3295 = icmp eq ptr %3294, null
  br i1 %3295, label %3389, label %3296

3296:                                             ; preds = %3292, %3300
  %3297 = phi ptr [ %3302, %3300 ], [ %3294, %3292 ]
  %3298 = load i32, ptr %3297, align 8
  %3299 = trunc i32 %3298 to i16
  switch i16 %3299, label %3389 [
    i16 13, label %3300
    i16 7, label %3300
    i16 8, label %3304
  ]

3300:                                             ; preds = %3296, %3296
  %3301 = getelementptr inbounds %struct.rtx_def, ptr %3297, i64 0, i32 1, i32 0, i32 0, i64 1
  %3302 = load ptr, ptr %3301, align 8, !tbaa !17
  %3303 = icmp eq ptr %3302, null
  br i1 %3303, label %3389, label %3296, !llvm.loop !263

3304:                                             ; preds = %3296
  %3305 = getelementptr inbounds %struct.rtx_def, ptr %3297, i64 1
  %3306 = load ptr, ptr %3305, align 8, !tbaa !17
  %3307 = load i32, ptr %3306, align 8
  %3308 = and i32 %3307, 65535
  %3309 = icmp eq i32 %3308, 23
  br i1 %3309, label %3310, label %3389

3310:                                             ; preds = %3304
  %3311 = getelementptr inbounds %struct.rtx_def, ptr %3306, i64 0, i32 1
  %3312 = load ptr, ptr %3311, align 8, !tbaa !17
  %3313 = icmp eq ptr %3312, %2975
  br i1 %3313, label %3314, label %3389

3314:                                             ; preds = %3310
  %3315 = call i32 @asm_noperands(ptr noundef nonnull %3306) #19
  %3316 = icmp slt i32 %3315, 0
  br i1 %3316, label %3317, label %3389

3317:                                             ; preds = %3314
  %3318 = getelementptr inbounds %struct.rtx_def, ptr %2958, i64 1
  %3319 = load ptr, ptr %3318, align 8, !tbaa !17
  %3320 = call i32 @count_occurrences(ptr noundef %3319, ptr noundef nonnull %2975, i32 noundef 0) #19
  %3321 = icmp eq i32 %3320, 1
  br i1 %3321, label %3322, label %3389

3322:                                             ; preds = %3317
  %3323 = load ptr, ptr %3305, align 8, !tbaa !17
  %3324 = getelementptr inbounds %struct.rtx_def, ptr %3323, i64 0, i32 1
  %3325 = load ptr, ptr %3324, align 8, !tbaa !17
  store ptr %2977, ptr %3324, align 8, !tbaa !17
  call void @extract_insn(ptr noundef nonnull %3297) #19
  %3326 = call i32 @constrain_operands(i32 noundef 1) #19
  %3327 = icmp eq i32 %3326, 0
  %3328 = load ptr, ptr %3305, align 8, !tbaa !17
  br i1 %3327, label %3387, label %3329

3329:                                             ; preds = %3322
  %3330 = getelementptr inbounds %struct.rtx_def, ptr %3328, i64 0, i32 1, i32 0, i32 0, i64 1
  %3331 = load ptr, ptr %3330, align 8, !tbaa !17
  %3332 = load i32, ptr %3331, align 8
  %3333 = and i32 %3332, 65535
  %3334 = icmp eq i32 %3333, 37
  br i1 %3334, label %3335, label %3345

3335:                                             ; preds = %3329
  %3336 = getelementptr i8, ptr %3331, i64 8
  %3337 = load i32, ptr %3336, align 8, !tbaa !17
  %3338 = icmp ult i32 %3337, 53
  br i1 %3338, label %3339, label %3345

3339:                                             ; preds = %3335
  %3340 = zext i32 %3337 to i64
  %3341 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %3340
  store ptr null, ptr %3341, align 8, !tbaa !6
  %3342 = load i32, ptr %3336, align 8, !tbaa !17
  %3343 = zext i32 %3342 to i64
  %3344 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3343
  store ptr null, ptr %3344, align 8, !tbaa !6
  br label %3345

3345:                                             ; preds = %3339, %3335, %3329
  %3346 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %3347 = getelementptr i8, ptr %3325, i64 8
  %3348 = load i32, ptr %3347, align 8, !tbaa !17
  %3349 = zext i32 %3348 to i64
  %3350 = getelementptr inbounds %struct.reg_info_t, ptr %3346, i64 %3349, i32 1
  %3351 = load i32, ptr %3350, align 4, !tbaa !264
  %3352 = icmp eq i32 %3351, 1
  br i1 %3352, label %3353, label %3370

3353:                                             ; preds = %3345
  %3354 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !6
  %3355 = sext i32 %3348 to i64
  %3356 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %3354, i64 %3355
  %3357 = load i32, ptr %3356, align 4, !tbaa !265
  %3358 = icmp eq i32 %3357, 1
  br i1 %3358, label %3359, label %3370

3359:                                             ; preds = %3353
  %3360 = load i32, ptr %3281, align 8, !tbaa !17
  %3361 = trunc i32 %3360 to i16
  %3362 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %3363 = getelementptr inbounds i16, ptr %3362, i64 %3349
  store i16 %3361, ptr %3363, align 2, !tbaa !44
  %3364 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %3365 = icmp eq i8 %3364, 0
  br i1 %3365, label %3368, label %3366

3366:                                             ; preds = %3359
  %3367 = load i32, ptr %3347, align 8, !tbaa !17
  call void @ira_mark_allocation_change(i32 noundef %3367) #19
  br label %3368

3368:                                             ; preds = %3366, %3359
  %3369 = load i32, ptr %3347, align 8, !tbaa !17
  call fastcc void @alter_reg(i32 noundef %3369, i32 noundef -1, i8 noundef zeroext 0)
  br label %3370

3370:                                             ; preds = %3368, %3353, %3345
  %3371 = getelementptr inbounds %struct.rtx_def, ptr %3297, i64 0, i32 1, i32 0, i32 0, i64 2
  %3372 = load ptr, ptr %3371, align 8, !tbaa !17
  %3373 = icmp eq ptr %3372, %2958
  br i1 %3373, label %3715, label %3374

3374:                                             ; preds = %3370, %3383
  %3375 = phi ptr [ %3385, %3383 ], [ %3372, %3370 ]
  %3376 = load i32, ptr %3375, align 8
  %3377 = trunc i32 %3376 to i16
  switch i16 %3377, label %3382 [
    i16 7, label %3378
    i16 13, label %3383
  ]

3378:                                             ; preds = %3374
  %3379 = getelementptr inbounds %struct.rtx_def, ptr %3375, i64 1
  %3380 = load ptr, ptr %3379, align 8, !tbaa !17
  %3381 = call ptr @replace_rtx(ptr noundef %3380, ptr noundef %3325, ptr noundef nonnull %2977) #19
  br label %3383

3382:                                             ; preds = %3374
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7083, ptr noundef nonnull @.str.2) #19
  br label %3383

3383:                                             ; preds = %3382, %3378, %3374
  %3384 = getelementptr inbounds %struct.rtx_def, ptr %3375, i64 0, i32 1, i32 0, i32 0, i64 2
  %3385 = load ptr, ptr %3384, align 8, !tbaa !17
  %3386 = icmp eq ptr %3385, %2958
  br i1 %3386, label %3715, label %3374, !llvm.loop !266

3387:                                             ; preds = %3322
  %3388 = getelementptr inbounds %struct.rtx_def, ptr %3328, i64 0, i32 1
  store ptr %3325, ptr %3388, align 8, !tbaa !17
  br label %3389

3389:                                             ; preds = %3270, %3300, %3296, %3387, %3317, %3314, %3310, %3304, %3292, %3280, %3258, %3254, %3250, %3247
  %3390 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 13
  %3391 = load i32, ptr %3390, align 4, !tbaa !260
  %3392 = icmp sgt i32 %3391, -1
  br i1 %3392, label %3393, label %3651

3393:                                             ; preds = %3389
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #19
  store ptr null, ptr %3, align 8, !tbaa !6
  %3394 = load i32, ptr %3044, align 8
  %3395 = and i32 %3394, 65535
  %3396 = icmp eq i32 %3395, 39
  br i1 %3396, label %3397, label %3401

3397:                                             ; preds = %3393
  %3398 = getelementptr inbounds %struct.rtx_def, ptr %3044, i64 0, i32 1
  %3399 = load ptr, ptr %3398, align 8, !tbaa !17
  %3400 = load i32, ptr %3399, align 8
  br label %3401

3401:                                             ; preds = %3397, %3393
  %3402 = phi i32 [ %3400, %3397 ], [ %3394, %3393 ]
  %3403 = phi ptr [ %3399, %3397 ], [ %3044, %3393 ]
  %3404 = and i32 %3402, 65535
  %3405 = icmp eq i32 %3404, 37
  br i1 %3405, label %3406, label %3432

3406:                                             ; preds = %3401
  %3407 = getelementptr i8, ptr %3403, i64 8
  %3408 = load i32, ptr %3407, align 8, !tbaa !17
  %3409 = icmp ugt i32 %3408, 52
  br i1 %3409, label %3410, label %3432

3410:                                             ; preds = %3406
  %3411 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3412 = zext i32 %3408 to i64
  %3413 = getelementptr inbounds ptr, ptr %3411, i64 %3412
  %3414 = load ptr, ptr %3413, align 8, !tbaa !6
  %3415 = icmp eq ptr %3414, null
  br i1 %3415, label %3416, label %3421

3416:                                             ; preds = %3410
  %3417 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3418 = getelementptr inbounds ptr, ptr %3417, i64 %3412
  %3419 = load ptr, ptr %3418, align 8, !tbaa !6
  %3420 = icmp eq ptr %3419, null
  br i1 %3420, label %3432, label %3421

3421:                                             ; preds = %3416, %3410
  %3422 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %3423 = getelementptr inbounds ptr, ptr %3422, i64 %3412
  %3424 = load ptr, ptr %3423, align 8, !tbaa !6
  %3425 = icmp eq ptr %3424, null
  %3426 = load i32, ptr @num_not_at_initial_offset, align 4
  %3427 = icmp ne i32 %3426, 0
  %3428 = select i1 %3425, i1 true, i1 %3427
  %3429 = or i1 %3396, %3428
  br i1 %3429, label %3430, label %3432

3430:                                             ; preds = %3421
  %3431 = load ptr, ptr %2901, align 8, !tbaa !153
  br label %3432

3432:                                             ; preds = %3430, %3421, %3416, %3406, %3401
  %3433 = phi ptr [ %3431, %3430 ], [ %3044, %3416 ], [ %3044, %3406 ], [ %3044, %3401 ], [ %3424, %3421 ]
  %3434 = load i32, ptr %2975, align 8
  %3435 = and i32 %3434, 65535
  %3436 = icmp eq i32 %3435, 39
  br i1 %3436, label %3437, label %3441

3437:                                             ; preds = %3432
  %3438 = getelementptr inbounds %struct.rtx_def, ptr %2975, i64 0, i32 1
  %3439 = load ptr, ptr %3438, align 8, !tbaa !17
  %3440 = load i32, ptr %3439, align 8
  br label %3441

3441:                                             ; preds = %3437, %3432
  %3442 = phi i32 [ %3440, %3437 ], [ %3434, %3432 ]
  %3443 = phi ptr [ %3439, %3437 ], [ %2975, %3432 ]
  %3444 = and i32 %3442, 65535
  %3445 = icmp eq i32 %3444, 37
  br i1 %3445, label %3446, label %3472

3446:                                             ; preds = %3441
  %3447 = getelementptr i8, ptr %3443, i64 8
  %3448 = load i32, ptr %3447, align 8, !tbaa !17
  %3449 = icmp ugt i32 %3448, 52
  br i1 %3449, label %3450, label %3472

3450:                                             ; preds = %3446
  %3451 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3452 = zext i32 %3448 to i64
  %3453 = getelementptr inbounds ptr, ptr %3451, i64 %3452
  %3454 = load ptr, ptr %3453, align 8, !tbaa !6
  %3455 = icmp eq ptr %3454, null
  br i1 %3455, label %3456, label %3461

3456:                                             ; preds = %3450
  %3457 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3458 = getelementptr inbounds ptr, ptr %3457, i64 %3452
  %3459 = load ptr, ptr %3458, align 8, !tbaa !6
  %3460 = icmp eq ptr %3459, null
  br i1 %3460, label %3472, label %3461

3461:                                             ; preds = %3456, %3450
  %3462 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %3463 = getelementptr inbounds ptr, ptr %3462, i64 %3452
  %3464 = load ptr, ptr %3463, align 8, !tbaa !6
  %3465 = icmp eq ptr %3464, null
  %3466 = load i32, ptr @num_not_at_initial_offset, align 4
  %3467 = icmp ne i32 %3466, 0
  %3468 = select i1 %3465, i1 true, i1 %3467
  %3469 = or i1 %3436, %3468
  br i1 %3469, label %3470, label %3472

3470:                                             ; preds = %3461
  %3471 = load ptr, ptr %2901, align 8, !tbaa !153
  br label %3472

3472:                                             ; preds = %3470, %3461, %3456, %3446, %3441
  %3473 = phi ptr [ %3471, %3470 ], [ %2975, %3456 ], [ %2975, %3446 ], [ %2975, %3441 ], [ %3464, %3461 ]
  %3474 = zext i32 %3391 to i64
  %3475 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3474, i32 11
  %3476 = load ptr, ptr %3475, align 8, !tbaa !139
  store ptr %3476, ptr %3, align 8, !tbaa !6
  %3477 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3474, i32 13
  %3478 = load i32, ptr %3477, align 4, !tbaa !260
  %3479 = icmp sgt i32 %3478, -1
  br i1 %3479, label %3480, label %3490

3480:                                             ; preds = %3472
  %3481 = zext i32 %3478 to i64
  %3482 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3481, i32 11
  %3483 = load ptr, ptr %3482, align 8, !tbaa !139
  %3484 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3474, i32 15
  %3485 = load i32, ptr %3484, align 4, !tbaa !267
  %3486 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3481, i32 13
  %3487 = load i32, ptr %3486, align 4, !tbaa !260
  %3488 = icmp slt i32 %3487, 0
  br i1 %3488, label %3490, label %3489

3489:                                             ; preds = %3480
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7169, ptr noundef nonnull @.str.2) #19
  br label %3490

3490:                                             ; preds = %3489, %3480, %3472
  %3491 = phi ptr [ %3483, %3480 ], [ %3483, %3489 ], [ null, %3472 ]
  %3492 = phi i32 [ %3485, %3480 ], [ %3485, %3489 ], [ 2956, %3472 ]
  %3493 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 15
  %3494 = load i32, ptr %3493, align 4, !tbaa !267
  %3495 = icmp eq ptr %2975, %3044
  br i1 %3495, label %3499, label %3496

3496:                                             ; preds = %3490
  %3497 = call i32 @rtx_equal_p(ptr noundef nonnull %2975, ptr noundef nonnull %3044) #19
  %3498 = icmp eq i32 %3497, 0
  br i1 %3498, label %3505, label %3499

3499:                                             ; preds = %3496, %3490
  %3500 = load ptr, ptr %2901, align 8, !tbaa !153
  %3501 = icmp eq ptr %3500, null
  br i1 %3501, label %3613, label %3502

3502:                                             ; preds = %3499
  %3503 = load ptr, ptr %3079, align 8, !tbaa !152
  %3504 = icmp eq ptr %3503, null
  br i1 %3504, label %3613, label %3505

3505:                                             ; preds = %3502, %3496
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #19
  store i32 2956, ptr %4, align 8, !tbaa !268
  store ptr null, ptr %29, align 8, !tbaa !270
  %3506 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 97), align 8, !tbaa !271
  %3507 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 2
  %3508 = load i32, ptr %3507, align 8, !tbaa !154
  %3509 = call i32 %3506(i8 noundef zeroext 1, ptr noundef %3433, i32 noundef %3508, i32 noundef %2980, ptr noundef nonnull %4) #19
  %3510 = icmp eq i32 %3509, 0
  %3511 = load i32, ptr %4, align 8
  %3512 = icmp eq i32 %3511, 2956
  %3513 = select i1 %3510, i1 %3512, i1 false
  br i1 %3513, label %3514, label %3515

3514:                                             ; preds = %3505
  store ptr null, ptr %3, align 8, !tbaa !6
  br label %3606

3515:                                             ; preds = %3505
  br i1 %3510, label %3516, label %3528

3516:                                             ; preds = %3515
  %3517 = call i32 @scratch_reload_class(i32 noundef %3511) #19
  %3518 = sext i32 %3511 to i64
  %3519 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %3518, i32 3
  %3520 = load ptr, ptr %3519, align 8, !tbaa !272
  %3521 = getelementptr inbounds %struct.insn_operand_data, ptr %3520, i64 2, i32 2
  %3522 = load i16, ptr %3521, align 8
  %3523 = zext i16 %3522 to i32
  %3524 = call fastcc zeroext i8 @reload_adjust_reg_for_temp(ptr noundef nonnull %3, ptr noundef %3491, i32 noundef %3517, i32 noundef %3523)
  %3525 = icmp eq i8 %3524, 0
  br i1 %3525, label %3606, label %3526

3526:                                             ; preds = %3516
  %3527 = load i32, ptr %4, align 8, !tbaa !268
  br label %3606

3528:                                             ; preds = %3515
  br i1 %3512, label %3530, label %3529

3529:                                             ; preds = %3528
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7203, ptr noundef nonnull @.str.2) #19
  br label %3606

3530:                                             ; preds = %3528
  %3531 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 97), align 8, !tbaa !271
  %3532 = call i32 %3531(i8 noundef zeroext 1, ptr noundef %3433, i32 noundef %3509, i32 noundef %2980, ptr noundef nonnull %4) #19
  %3533 = icmp eq i32 %3532, 0
  br i1 %3533, label %3534, label %3538

3534:                                             ; preds = %3530
  %3535 = call fastcc zeroext i8 @reload_adjust_reg_for_temp(ptr noundef nonnull %3, ptr noundef %3491, i32 noundef %3509, i32 noundef %2980)
  %3536 = icmp eq i8 %3535, 0
  br i1 %3536, label %3606, label %3537

3537:                                             ; preds = %3534
  br label %3606

3538:                                             ; preds = %3530
  %3539 = icmp eq ptr %3476, null
  br i1 %3539, label %3606, label %3540

3540:                                             ; preds = %3538
  %3541 = sext i32 %3509 to i64
  %3542 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %3541
  %3543 = zext i32 %2980 to i64
  %3544 = getelementptr i8, ptr %3476, i64 8
  %3545 = load i32, ptr %3544, align 8, !tbaa !17
  %3546 = load i64, ptr %3542, align 8, !tbaa !40
  %3547 = zext i32 %3545 to i64
  %3548 = shl nuw i64 1, %3547
  %3549 = and i64 %3548, %3546
  %3550 = icmp eq i64 %3549, 0
  br i1 %3550, label %3606, label %3551

3551:                                             ; preds = %3540
  %3552 = load i32, ptr %3476, align 8
  %3553 = lshr i32 %3552, 16
  %3554 = and i32 %3553, 255
  %3555 = icmp eq i32 %3554, %2980
  br i1 %3555, label %3571, label %3556

3556:                                             ; preds = %3551
  %3557 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %3545, i32 noundef %2980) #19
  %3558 = icmp eq i8 %3557, 0
  br i1 %3558, label %3606, label %3559

3559:                                             ; preds = %3556
  %3560 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3547, i64 %3543
  %3561 = load i8, ptr %3560, align 1, !tbaa !17
  %3562 = load i32, ptr %3476, align 8
  %3563 = lshr i32 %3562, 16
  %3564 = and i32 %3563, 255
  %3565 = zext i32 %3564 to i64
  %3566 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3547, i64 %3565
  %3567 = load i8, ptr %3566, align 1, !tbaa !17
  %3568 = icmp ugt i8 %3561, %3567
  br i1 %3568, label %3606, label %3569

3569:                                             ; preds = %3559
  %3570 = call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %3476, i32 noundef %2980) #19
  br label %3571

3571:                                             ; preds = %3569, %3551
  %3572 = phi ptr [ %3570, %3569 ], [ %3476, %3551 ]
  %3573 = icmp eq ptr %3491, null
  br i1 %3573, label %3606, label %3574

3574:                                             ; preds = %3571
  %3575 = sext i32 %3532 to i64
  %3576 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %3575
  %3577 = getelementptr i8, ptr %3491, i64 8
  %3578 = load i32, ptr %3577, align 8, !tbaa !17
  %3579 = load i64, ptr %3576, align 8, !tbaa !40
  %3580 = zext i32 %3578 to i64
  %3581 = shl nuw i64 1, %3580
  %3582 = and i64 %3581, %3579
  %3583 = icmp eq i64 %3582, 0
  br i1 %3583, label %3606, label %3584

3584:                                             ; preds = %3574
  %3585 = load i32, ptr %3491, align 8
  %3586 = lshr i32 %3585, 16
  %3587 = and i32 %3586, 255
  %3588 = icmp eq i32 %3587, %2980
  br i1 %3588, label %3604, label %3589

3589:                                             ; preds = %3584
  %3590 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %3578, i32 noundef %2980) #19
  %3591 = icmp eq i8 %3590, 0
  br i1 %3591, label %3606, label %3592

3592:                                             ; preds = %3589
  %3593 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3580, i64 %3543
  %3594 = load i8, ptr %3593, align 1, !tbaa !17
  %3595 = load i32, ptr %3491, align 8
  %3596 = lshr i32 %3595, 16
  %3597 = and i32 %3596, 255
  %3598 = zext i32 %3597 to i64
  %3599 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %3580, i64 %3598
  %3600 = load i8, ptr %3599, align 1, !tbaa !17
  %3601 = icmp ugt i8 %3594, %3600
  br i1 %3601, label %3606, label %3602

3602:                                             ; preds = %3592
  %3603 = call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %3491, i32 noundef %2980) #19
  br label %3604

3604:                                             ; preds = %3602, %3584
  %3605 = phi ptr [ %3603, %3602 ], [ %3491, %3584 ]
  store ptr %3572, ptr %3, align 8, !tbaa !6
  br label %3606

3606:                                             ; preds = %3604, %3592, %3589, %3574, %3571, %3559, %3556, %3540, %3538, %3537, %3534, %3529, %3526, %3516, %3514
  %3607 = phi ptr [ %3491, %3514 ], [ %3491, %3516 ], [ null, %3526 ], [ %3491, %3534 ], [ null, %3537 ], [ %3491, %3529 ], [ %3605, %3604 ], [ %3491, %3538 ], [ %3491, %3559 ], [ %3491, %3556 ], [ %3491, %3540 ], [ null, %3571 ], [ %3491, %3592 ], [ %3491, %3589 ], [ %3491, %3574 ]
  %3608 = phi i32 [ %3494, %3514 ], [ %3494, %3516 ], [ %3527, %3526 ], [ %3494, %3534 ], [ %3494, %3537 ], [ %3494, %3529 ], [ %3494, %3604 ], [ %3494, %3538 ], [ %3494, %3559 ], [ %3494, %3556 ], [ %3494, %3540 ], [ %3494, %3571 ], [ %3494, %3592 ], [ %3494, %3589 ], [ %3494, %3574 ]
  %3609 = phi i32 [ %3492, %3514 ], [ %3492, %3516 ], [ %3492, %3526 ], [ %3492, %3534 ], [ 2956, %3537 ], [ %3492, %3529 ], [ 2956, %3604 ], [ %3492, %3538 ], [ %3492, %3559 ], [ %3492, %3556 ], [ %3492, %3540 ], [ %3492, %3571 ], [ %3492, %3592 ], [ %3492, %3589 ], [ %3492, %3574 ]
  %3610 = phi ptr [ %3433, %3514 ], [ %3473, %3516 ], [ %3433, %3526 ], [ %3473, %3534 ], [ %3433, %3537 ], [ %3433, %3529 ], [ %3433, %3604 ], [ %3473, %3538 ], [ %3473, %3559 ], [ %3473, %3556 ], [ %3473, %3540 ], [ %3473, %3571 ], [ %3473, %3592 ], [ %3473, %3589 ], [ %3473, %3574 ]
  %3611 = phi ptr [ %3044, %3514 ], [ %2975, %3516 ], [ %3044, %3526 ], [ %2975, %3534 ], [ %3044, %3537 ], [ %3044, %3529 ], [ %3044, %3604 ], [ %2975, %3538 ], [ %2975, %3559 ], [ %2975, %3556 ], [ %2975, %3540 ], [ %2975, %3571 ], [ %2975, %3592 ], [ %2975, %3589 ], [ %2975, %3574 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #19
  %3612 = load ptr, ptr %3, align 8, !tbaa !6
  br label %3613

3613:                                             ; preds = %3606, %3502, %3499
  %3614 = phi ptr [ %3491, %3499 ], [ %3491, %3502 ], [ %3607, %3606 ]
  %3615 = phi ptr [ %3476, %3499 ], [ %3476, %3502 ], [ %3612, %3606 ]
  %3616 = phi i32 [ %3494, %3499 ], [ %3494, %3502 ], [ %3608, %3606 ]
  %3617 = phi i32 [ %3492, %3499 ], [ %3492, %3502 ], [ %3609, %3606 ]
  %3618 = phi ptr [ %3433, %3499 ], [ %3433, %3502 ], [ %3610, %3606 ]
  %3619 = phi ptr [ %3044, %3499 ], [ %3044, %3502 ], [ %3611, %3606 ]
  %3620 = icmp eq ptr %3615, null
  br i1 %3620, label %3643, label %3621

3621:                                             ; preds = %3613
  %3622 = icmp eq i32 %3616, 2956
  br i1 %3622, label %3626, label %3623

3623:                                             ; preds = %3621
  %3624 = icmp eq ptr %3614, null
  br i1 %3624, label %3645, label %3625

3625:                                             ; preds = %3623
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7283, ptr noundef nonnull @.str.2) #19
  br label %3645

3626:                                             ; preds = %3621
  %3627 = icmp eq i32 %3617, 2956
  br i1 %3627, label %3634, label %3628

3628:                                             ; preds = %3626
  %3629 = zext i32 %3617 to i64
  %3630 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %3629, i32 2
  %3631 = load ptr, ptr %3630, align 8, !tbaa !274
  %3632 = call ptr (ptr, ...) %3631(ptr noundef nonnull %3615, ptr noundef %3618, ptr noundef %3614) #19
  %3633 = call ptr @emit_insn(ptr noundef %3632) #19
  br label %3643

3634:                                             ; preds = %3626
  %3635 = icmp eq ptr %3614, null
  %3636 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3637 = load i32, ptr %3636, align 8, !tbaa !156
  %3638 = load i32, ptr %3045, align 4, !tbaa !155
  br i1 %3635, label %3642, label %3639

3639:                                             ; preds = %3634
  call fastcc void @gen_reload(ptr noundef nonnull %3614, ptr noundef %3618, i32 noundef %3637, i32 noundef %3638)
  %3640 = load i32, ptr %3636, align 8, !tbaa !156
  %3641 = load i32, ptr %3045, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef nonnull %3615, ptr noundef nonnull %3614, i32 noundef %3640, i32 noundef %3641)
  br label %3643

3642:                                             ; preds = %3634
  call fastcc void @gen_reload(ptr noundef nonnull %3615, ptr noundef %3618, i32 noundef %3637, i32 noundef %3638)
  br label %3643

3643:                                             ; preds = %3642, %3639, %3628, %3613
  %3644 = phi ptr [ %3619, %3613 ], [ %3615, %3639 ], [ %3615, %3642 ], [ %3615, %3628 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #19
  br label %3651

3645:                                             ; preds = %3625, %3623
  %3646 = zext i32 %3616 to i64
  %3647 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %3646, i32 2
  %3648 = load ptr, ptr %3647, align 8, !tbaa !274
  %3649 = call ptr (ptr, ...) %3648(ptr noundef nonnull %2977, ptr noundef %3618, ptr noundef nonnull %3615) #19
  %3650 = call ptr @emit_insn(ptr noundef %3649) #19
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #19
  br label %3715

3651:                                             ; preds = %3643, %3389
  %3652 = phi ptr [ %3644, %3643 ], [ %3044, %3389 ]
  %3653 = call i32 @rtx_equal_p(ptr noundef nonnull %2977, ptr noundef %3652) #19
  %3654 = icmp eq i32 %3653, 0
  br i1 %3654, label %3655, label %3715

3655:                                             ; preds = %3651
  %3656 = load i32, ptr %3652, align 8
  %3657 = and i32 %3656, 65535
  %3658 = trunc i32 %3656 to i16
  switch i16 %3658, label %3695 [
    i16 37, label %3659
    i16 39, label %3674
  ]

3659:                                             ; preds = %3655
  %3660 = getelementptr i8, ptr %3652, i64 8
  %3661 = load i32, ptr %3660, align 8, !tbaa !17
  %3662 = icmp ugt i32 %3661, 52
  br i1 %3662, label %3663, label %3695

3663:                                             ; preds = %3659
  %3664 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3665 = zext i32 %3661 to i64
  %3666 = getelementptr inbounds ptr, ptr %3664, i64 %3665
  %3667 = load ptr, ptr %3666, align 8, !tbaa !6
  %3668 = icmp eq ptr %3667, null
  br i1 %3668, label %3669, label %3708

3669:                                             ; preds = %3663
  %3670 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3671 = getelementptr inbounds ptr, ptr %3670, i64 %3665
  %3672 = load ptr, ptr %3671, align 8, !tbaa !6
  %3673 = icmp eq ptr %3672, null
  br i1 %3673, label %3695, label %3708

3674:                                             ; preds = %3655
  %3675 = getelementptr inbounds %struct.rtx_def, ptr %3652, i64 0, i32 1
  %3676 = load ptr, ptr %3675, align 8, !tbaa !17
  %3677 = load i32, ptr %3676, align 8
  %3678 = and i32 %3677, 65535
  %3679 = icmp eq i32 %3678, 37
  br i1 %3679, label %3680, label %3695

3680:                                             ; preds = %3674
  %3681 = getelementptr i8, ptr %3676, i64 8
  %3682 = load i32, ptr %3681, align 8, !tbaa !17
  %3683 = icmp ugt i32 %3682, 52
  br i1 %3683, label %3684, label %3695

3684:                                             ; preds = %3680
  %3685 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %3686 = zext i32 %3682 to i64
  %3687 = getelementptr inbounds ptr, ptr %3685, i64 %3686
  %3688 = load ptr, ptr %3687, align 8, !tbaa !6
  %3689 = icmp eq ptr %3688, null
  br i1 %3689, label %3690, label %3708

3690:                                             ; preds = %3684
  %3691 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %3692 = getelementptr inbounds ptr, ptr %3691, i64 %3686
  %3693 = load ptr, ptr %3692, align 8, !tbaa !6
  %3694 = icmp eq ptr %3693, null
  br i1 %3694, label %3695, label %3708

3695:                                             ; preds = %3690, %3680, %3674, %3669, %3659, %3655
  %3696 = zext i32 %3657 to i64
  %3697 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %3696
  %3698 = load i32, ptr %3697, align 4, !tbaa !17
  %3699 = icmp eq i32 %3698, 9
  br i1 %3699, label %3700, label %3710

3700:                                             ; preds = %3695
  %3701 = getelementptr i8, ptr %2977, i64 8
  %3702 = load i32, ptr %3701, align 8, !tbaa !17
  %3703 = zext i32 %3702 to i64
  %3704 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %3703
  %3705 = load i32, ptr %3704, align 4, !tbaa !17
  %3706 = call i32 @ix86_preferred_reload_class(ptr noundef nonnull %3652, i32 noundef %3705) #19
  %3707 = icmp eq i32 %3706, 0
  br i1 %3707, label %3708, label %3710

3708:                                             ; preds = %3700, %3690, %3684, %3669, %3663
  %3709 = load ptr, ptr %2901, align 8, !tbaa !153
  br label %3710

3710:                                             ; preds = %3708, %3700, %3695
  %3711 = phi ptr [ %3709, %3708 ], [ %3652, %3700 ], [ %3652, %3695 ]
  %3712 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3713 = load i32, ptr %3712, align 8, !tbaa !156
  %3714 = load i32, ptr %3045, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef nonnull %2977, ptr noundef %3711, i32 noundef %3713, i32 noundef %3714)
  br label %3715

3715:                                             ; preds = %3383, %3710, %3651, %3645, %3370, %3241
  %3716 = phi ptr [ %3652, %3710 ], [ %3652, %3651 ], [ %3619, %3645 ], [ %3094, %3241 ], [ %3044, %3370 ], [ %3044, %3383 ]
  %3717 = load i32, ptr @flag_non_call_exceptions, align 4, !tbaa !21
  %3718 = icmp eq i32 %3717, 0
  br i1 %3718, label %3721, label %3719

3719:                                             ; preds = %3715
  %3720 = call ptr @get_insns() #19
  call void @copy_reg_eh_region_note_forward(ptr noundef %2958, ptr noundef %3720, ptr noundef null) #19
  br label %3721

3721:                                             ; preds = %3719, %3715
  %3722 = call ptr @get_insns() #19
  store ptr %3722, ptr %3077, align 8, !tbaa !6
  call void @end_sequence() #19
  %3723 = icmp eq ptr %2976, null
  br i1 %3723, label %3725, label %3724

3724:                                             ; preds = %3721
  store ptr %3716, ptr %2959, align 8, !tbaa !6
  br label %3725

3725:                                             ; preds = %3724, %3721, %2952, %2948, %2944, %2936, %2905
  %3726 = phi ptr [ %2940, %2952 ], [ %2940, %2948 ], [ %2940, %2944 ], [ %2877, %2936 ], [ %2940, %3721 ], [ %2940, %3724 ], [ %2877, %2905 ]
  %3727 = load i32, ptr @optimize, align 4, !tbaa !21
  %3728 = icmp eq i32 %3727, 0
  br i1 %3728, label %3799, label %3729

3729:                                             ; preds = %3725
  %3730 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %2875
  %3731 = load i8, ptr %3730, align 1, !tbaa !17
  %3732 = icmp eq i8 %3731, 0
  br i1 %3732, label %3763, label %3733

3733:                                             ; preds = %3729
  %3734 = load ptr, ptr %2901, align 8, !tbaa !153
  %3735 = icmp eq ptr %3734, null
  br i1 %3735, label %3769, label %3736

3736:                                             ; preds = %3733
  %3737 = load i32, ptr %3734, align 8
  %3738 = and i32 %3737, 65535
  %3739 = icmp eq i32 %3738, 43
  br i1 %3739, label %3740, label %3769

3740:                                             ; preds = %3736
  %3741 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 8
  %3742 = load ptr, ptr %3741, align 8, !tbaa !225
  %3743 = load i32, ptr %3742, align 8
  %3744 = and i32 %3743, 65535
  %3745 = icmp eq i32 %3744, 43
  br i1 %3745, label %3746, label %3769

3746:                                             ; preds = %3740
  %3747 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2875
  %3748 = load i32, ptr %3747, align 4, !tbaa !21
  %3749 = icmp sgt i32 %3748, -1
  br i1 %3749, label %3750, label %3769

3750:                                             ; preds = %3746
  %3751 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %3752 = zext i32 %3748 to i64
  %3753 = shl nuw i64 1, %3752
  %3754 = and i64 %3751, %3753
  %3755 = icmp eq i64 %3754, 0
  br i1 %3755, label %3769, label %3756

3756:                                             ; preds = %3750
  %3757 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %3758 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %3752
  %3759 = load i32, ptr %3758, align 4, !tbaa !21
  %3760 = sext i32 %3759 to i64
  %3761 = getelementptr inbounds ptr, ptr %3757, i64 %3760
  %3762 = load ptr, ptr %3761, align 8, !tbaa !6
  store ptr %3762, ptr %2901, align 8, !tbaa !153
  br label %3769

3763:                                             ; preds = %3729
  %3764 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %2875
  %3765 = load ptr, ptr %3764, align 8, !tbaa !6
  %3766 = icmp ne ptr %3765, null
  %3767 = icmp ne ptr %3726, null
  %3768 = select i1 %3766, i1 %3767, i1 false
  br i1 %3768, label %3771, label %3799

3769:                                             ; preds = %3756, %3750, %3746, %3740, %3736, %3733
  %3770 = icmp eq ptr %3726, null
  br i1 %3770, label %3799, label %3771

3771:                                             ; preds = %3769, %3763
  %3772 = load i32, ptr %3726, align 8
  %3773 = and i32 %3772, 65535
  %3774 = icmp eq i32 %3773, 37
  br i1 %3774, label %3775, label %3799

3775:                                             ; preds = %3771
  %3776 = getelementptr i8, ptr %3726, i64 8
  %3777 = load i32, ptr %3776, align 8, !tbaa !17
  %3778 = zext i32 %3777 to i64
  %3779 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %3778
  %3780 = load ptr, ptr %3779, align 8, !tbaa !6
  %3781 = icmp eq ptr %3780, null
  br i1 %3781, label %3799, label %3782

3782:                                             ; preds = %3775
  %3783 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3778
  %3784 = load ptr, ptr %3783, align 8, !tbaa !6
  %3785 = call i32 @dead_or_set_p(ptr noundef %2902, ptr noundef %3784) #19
  %3786 = icmp eq i32 %3785, 0
  br i1 %3786, label %3787, label %3796

3787:                                             ; preds = %3782
  %3788 = load i32, ptr %3776, align 8, !tbaa !17
  %3789 = zext i32 %3788 to i64
  %3790 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3789
  %3791 = load ptr, ptr %3790, align 8, !tbaa !6
  %3792 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 9
  %3793 = load ptr, ptr %3792, align 8, !tbaa !248
  %3794 = call i32 @rtx_equal_p(ptr noundef %3791, ptr noundef %3793) #19
  %3795 = icmp eq i32 %3794, 0
  br i1 %3795, label %3799, label %3796

3796:                                             ; preds = %3787, %3782
  %3797 = load i32, ptr %3776, align 8, !tbaa !17
  %3798 = trunc i64 %2875 to i32
  call fastcc void @delete_output_reload(ptr noundef %2902, i32 noundef %3798, i32 noundef %3797, ptr noundef nonnull %3726)
  br label %3799

3799:                                             ; preds = %3796, %3787, %3775, %3771, %3769, %3763, %3725
  %3800 = load ptr, ptr %32, align 8, !tbaa !111
  %3801 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 9
  %3802 = load ptr, ptr %3801, align 8, !tbaa !248
  %3803 = load ptr, ptr %2876, align 8, !tbaa !139
  %3804 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 1
  %3805 = load ptr, ptr %3804, align 8, !tbaa !152
  %3806 = icmp ne ptr %3805, null
  %3807 = icmp ne ptr %3803, null
  %3808 = select i1 %3806, i1 %3807, i1 false
  br i1 %3808, label %3809, label %3833

3809:                                             ; preds = %3799
  %3810 = load i32, ptr %3805, align 8
  %3811 = lshr i32 %3810, 16
  %3812 = and i32 %3811, 255
  %3813 = icmp eq i32 %3812, 0
  br i1 %3813, label %3814, label %3825

3814:                                             ; preds = %3809
  %3815 = getelementptr inbounds %struct.rtx_def, ptr %3800, i64 1
  %3816 = load ptr, ptr %3815, align 8, !tbaa !17
  %3817 = call i32 @asm_noperands(ptr noundef %3816) #19
  %3818 = icmp slt i32 %3817, 0
  br i1 %3818, label %3819, label %3820

3819:                                             ; preds = %3814
  call void @_fatal_insn(ptr noundef nonnull @.str.22, ptr noundef nonnull %3800, ptr noundef nonnull @.str.1, i32 noundef 7695, ptr noundef nonnull @.str.2) #19
  br label %3820

3820:                                             ; preds = %3819, %3814
  call void (ptr, ptr, ...) @error_for_asm(ptr noundef nonnull %3800, ptr noundef nonnull @.str.23) #19
  %3821 = load i32, ptr @word_mode, align 4, !tbaa !17
  %3822 = getelementptr i8, ptr %3803, i64 8
  %3823 = load i32, ptr %3822, align 8, !tbaa !17
  %3824 = call ptr @gen_rtx_REG(i32 noundef %3821, i32 noundef %3823) #19
  store ptr %3824, ptr %3804, align 8, !tbaa !152
  br label %3825

3825:                                             ; preds = %3820, %3809
  %3826 = phi i32 [ %3821, %3820 ], [ %3812, %3809 ]
  %3827 = load i32, ptr %3803, align 8
  %3828 = lshr i32 %3827, 16
  %3829 = and i32 %3828, 255
  %3830 = icmp eq i32 %3829, %3826
  br i1 %3830, label %3833, label %3831

3831:                                             ; preds = %3825
  %3832 = call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %3803, i32 noundef %3826) #19
  br label %3833

3833:                                             ; preds = %3831, %3825, %3799
  %3834 = phi ptr [ %3803, %3799 ], [ %3832, %3831 ], [ %3803, %3825 ]
  %3835 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_output, i64 0, i64 %2875
  store ptr %3834, ptr %3835, align 8, !tbaa !6
  %3836 = icmp ne ptr %3802, null
  %3837 = load i32, ptr @optimize, align 4
  %3838 = icmp ne i32 %3837, 0
  %3839 = select i1 %3836, i1 %3838, i1 false
  br i1 %3839, label %3840, label %3886

3840:                                             ; preds = %3833
  %3841 = load i32, ptr %3802, align 8
  %3842 = and i32 %3841, 65535
  %3843 = icmp eq i32 %3842, 37
  br i1 %3843, label %3844, label %3886

3844:                                             ; preds = %3840
  %3845 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 8
  %3846 = load ptr, ptr %3845, align 8, !tbaa !225
  %3847 = call i32 @rtx_equal_p(ptr noundef %3846, ptr noundef nonnull %3802) #19
  %3848 = icmp eq i32 %3847, 0
  br i1 %3848, label %3849, label %3886

3849:                                             ; preds = %3844
  %3850 = getelementptr i8, ptr %3802, i64 8
  %3851 = load i32, ptr %3850, align 8, !tbaa !17
  %3852 = icmp ugt i32 %3851, 52
  br i1 %3852, label %3853, label %3886

3853:                                             ; preds = %3849
  %3854 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %3855 = zext i32 %3851 to i64
  %3856 = getelementptr inbounds ptr, ptr %3854, i64 %3855
  %3857 = load ptr, ptr %3856, align 8, !tbaa !6
  %3858 = icmp eq ptr %3857, null
  br i1 %3858, label %3886, label %3859

3859:                                             ; preds = %3853
  %3860 = sext i32 %3851 to i64
  %3861 = getelementptr inbounds ptr, ptr %3854, i64 %3860
  %3862 = load ptr, ptr %3861, align 8, !tbaa !6
  %3863 = getelementptr i8, ptr %3862, i64 8
  %3864 = load i32, ptr %3863, align 8, !tbaa !17
  %3865 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %3866 = zext i32 %3864 to i64
  %3867 = shl nuw i64 1, %3866
  %3868 = and i64 %3867, %3865
  %3869 = icmp eq i64 %3868, 0
  br i1 %3869, label %3886, label %3870

3870:                                             ; preds = %3859
  %3871 = sext i32 %3864 to i64
  %3872 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %3871
  %3873 = load i32, ptr %3872, align 4, !tbaa !21
  %3874 = icmp eq i32 %3873, %3851
  br i1 %3874, label %3875, label %3886

3875:                                             ; preds = %3870
  %3876 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %3871
  %3877 = load ptr, ptr %3876, align 8, !tbaa !6
  %3878 = icmp eq ptr %3877, null
  br i1 %3878, label %3886, label %3879

3879:                                             ; preds = %3875
  %3880 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %3871
  %3881 = load ptr, ptr %3880, align 8, !tbaa !6
  %3882 = call i32 @rtx_equal_p(ptr noundef nonnull %3802, ptr noundef %3881) #19
  %3883 = icmp eq i32 %3882, 0
  br i1 %3883, label %3886, label %3884

3884:                                             ; preds = %3879
  %3885 = trunc i64 %2875 to i32
  call fastcc void @delete_output_reload(ptr noundef %3800, i32 noundef %3885, i32 noundef %3864, ptr noundef %3834)
  br label %3886

3886:                                             ; preds = %3884, %3879, %3875, %3870, %3859, %3853, %3849, %3844, %3840, %3833
  %3887 = load ptr, ptr %3801, align 8, !tbaa !248
  %3888 = icmp eq ptr %3887, null
  %3889 = icmp eq ptr %3834, null
  %3890 = select i1 %3888, i1 true, i1 %3889
  br i1 %3890, label %4269, label %3891

3891:                                             ; preds = %3886
  %3892 = call i32 @rtx_equal_p(ptr noundef nonnull %3887, ptr noundef nonnull %3834) #19
  %3893 = icmp eq i32 %3892, 0
  br i1 %3893, label %3894, label %4269

3894:                                             ; preds = %3891
  %3895 = load i32, ptr %3887, align 8
  %3896 = and i32 %3895, 65535
  %3897 = add nsw i32 %3896, -37
  %3898 = icmp ult i32 %3897, 2
  br i1 %3898, label %3899, label %3906

3899:                                             ; preds = %3894
  %3900 = call ptr @find_reg_note(ptr noundef %3800, i32 noundef 6, ptr noundef nonnull %3887) #19
  %3901 = icmp eq ptr %3900, null
  br i1 %3901, label %3902, label %3904

3902:                                             ; preds = %3899
  %3903 = load i32, ptr %3887, align 8
  br label %3906

3904:                                             ; preds = %3899
  %3905 = getelementptr inbounds %struct.rtx_def, ptr %3900, i64 0, i32 1
  store ptr %3834, ptr %3905, align 8, !tbaa !17
  br label %4269

3906:                                             ; preds = %3902, %3894
  %3907 = phi i32 [ %3903, %3902 ], [ %3895, %3894 ]
  %3908 = and i32 %3907, 65535
  %3909 = icmp eq i32 %3908, 39
  br i1 %3909, label %3910, label %3927

3910:                                             ; preds = %3906
  %3911 = getelementptr inbounds %struct.rtx_def, ptr %3887, i64 0, i32 1
  %3912 = load ptr, ptr %3911, align 8, !tbaa !17
  %3913 = load i32, ptr %3912, align 8
  %3914 = and i32 %3913, 65535
  %3915 = icmp eq i32 %3914, 37
  br i1 %3915, label %3916, label %3930

3916:                                             ; preds = %3910
  %3917 = call ptr @find_reg_note(ptr noundef %3800, i32 noundef 6, ptr noundef nonnull %3912) #19
  %3918 = icmp eq ptr %3917, null
  %3919 = load i32, ptr %3887, align 8
  br i1 %3918, label %3920, label %3922

3920:                                             ; preds = %3916
  %3921 = and i32 %3919, 65535
  br label %3927

3922:                                             ; preds = %3916
  %3923 = lshr i32 %3919, 16
  %3924 = and i32 %3923, 255
  %3925 = call ptr @gen_lowpart_common(i32 noundef %3924, ptr noundef nonnull %3834) #19
  %3926 = getelementptr inbounds %struct.rtx_def, ptr %3917, i64 0, i32 1
  store ptr %3925, ptr %3926, align 8, !tbaa !17
  br label %4269

3927:                                             ; preds = %3920, %3906
  %3928 = phi i32 [ %3921, %3920 ], [ %3908, %3906 ]
  %3929 = icmp eq i32 %3928, 38
  br i1 %3929, label %4269, label %3930

3930:                                             ; preds = %3927, %3910
  %3931 = load i32, ptr %3800, align 8
  %3932 = and i32 %3931, 65535
  %3933 = icmp eq i32 %3932, 8
  br i1 %3933, label %3935, label %3934

3934:                                             ; preds = %3930
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7756, ptr noundef nonnull @.str.2) #19
  br label %3935

3935:                                             ; preds = %3934, %3930
  %3936 = load ptr, ptr %32, align 8, !tbaa !111
  %3937 = load ptr, ptr %3804, align 8, !tbaa !152
  %3938 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 17
  %3939 = load i32, ptr %3938, align 4, !tbaa !155
  %3940 = icmp eq i32 %3939, 9
  br i1 %3940, label %3941, label %3942

3941:                                             ; preds = %3935
  call void @start_sequence() #19
  br label %3948

3942:                                             ; preds = %3935
  %3943 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %3944 = load i32, ptr %3943, align 8, !tbaa !156
  %3945 = sext i32 %3944 to i64
  %3946 = getelementptr inbounds [30 x ptr], ptr @output_reload_insns, i64 0, i64 %3945
  %3947 = load ptr, ptr %3946, align 8, !tbaa !6
  call void @push_to_sequence(ptr noundef %3947) #19
  br label %3948

3948:                                             ; preds = %3942, %3941
  %3949 = load ptr, ptr %3835, align 8, !tbaa !6
  %3950 = load i32, ptr %3949, align 8
  %3951 = lshr i32 %3950, 16
  %3952 = and i32 %3951, 255
  %3953 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 14
  %3954 = load i32, ptr %3953, align 8, !tbaa !275
  %3955 = icmp sgt i32 %3954, -1
  br i1 %3955, label %3956, label %4066

3956:                                             ; preds = %3948
  %3957 = zext i32 %3954 to i64
  %3958 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3957, i32 14
  %3959 = load i32, ptr %3958, align 8, !tbaa !275
  %3960 = load i32, ptr %3937, align 8
  %3961 = and i32 %3960, 65535
  %3962 = icmp eq i32 %3961, 37
  br i1 %3962, label %3963, label %3974

3963:                                             ; preds = %3956
  %3964 = getelementptr i8, ptr %3937, i64 8
  %3965 = load i32, ptr %3964, align 8, !tbaa !17
  %3966 = icmp ugt i32 %3965, 52
  br i1 %3966, label %3967, label %3974

3967:                                             ; preds = %3963
  %3968 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %3969 = zext i32 %3965 to i64
  %3970 = getelementptr inbounds ptr, ptr %3968, i64 %3969
  %3971 = load ptr, ptr %3970, align 8, !tbaa !6
  %3972 = icmp eq ptr %3971, null
  %3973 = select i1 %3972, ptr %3937, ptr %3971
  br label %3974

3974:                                             ; preds = %3967, %3963, %3956
  %3975 = phi ptr [ %3937, %3963 ], [ %3937, %3956 ], [ %3973, %3967 ]
  %3976 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 2
  %3977 = load i32, ptr %3976, align 8, !tbaa !154
  %3978 = call i32 @secondary_reload_class(i8 noundef zeroext 0, i32 noundef %3977, i32 noundef %3952, ptr noundef nonnull %3975) #19
  %3979 = icmp eq i32 %3978, 0
  br i1 %3979, label %4066, label %3980

3980:                                             ; preds = %3974
  %3981 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3957, i32 11
  %3982 = load ptr, ptr %3981, align 8, !tbaa !139
  %3983 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 16
  %3984 = load i32, ptr %3983, align 8, !tbaa !276
  %3985 = icmp eq i32 %3984, 2956
  br i1 %3985, label %3997, label %3986

3986:                                             ; preds = %3980
  %3987 = icmp slt i32 %3959, 0
  br i1 %3987, label %3990, label %3988

3988:                                             ; preds = %3986
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7404, ptr noundef nonnull @.str.2) #19
  %3989 = load i32, ptr %3983, align 8, !tbaa !276
  br label %3990

3990:                                             ; preds = %3988, %3986
  %3991 = phi i32 [ %3984, %3986 ], [ %3989, %3988 ]
  %3992 = zext i32 %3991 to i64
  %3993 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %3992, i32 2
  %3994 = load ptr, ptr %3993, align 8, !tbaa !274
  %3995 = call ptr (ptr, ...) %3994(ptr noundef nonnull %3975, ptr noundef nonnull %3949, ptr noundef %3982) #19
  %3996 = call ptr @emit_insn(ptr noundef %3995) #19
  br label %4112

3997:                                             ; preds = %3980
  %3998 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %3957, i32 16
  %3999 = load i32, ptr %3998, align 8, !tbaa !276
  %4000 = icmp slt i32 %3959, 0
  br i1 %4000, label %4007, label %4001

4001:                                             ; preds = %3997
  %4002 = zext i32 %3959 to i64
  %4003 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4002, i32 14
  %4004 = load i32, ptr %4003, align 8, !tbaa !275
  %4005 = icmp slt i32 %4004, 0
  br i1 %4005, label %4007, label %4006

4006:                                             ; preds = %4001
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 7420, ptr noundef nonnull @.str.2) #19
  br label %4007

4007:                                             ; preds = %4006, %4001, %3997
  %4008 = load i32, ptr %3982, align 8
  %4009 = lshr i32 %4008, 16
  %4010 = and i32 %4009, 255
  %4011 = icmp eq i32 %4010, %3952
  br i1 %4011, label %4014, label %4012

4012:                                             ; preds = %4007
  %4013 = call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %3982, i32 noundef %3952) #19
  br label %4014

4014:                                             ; preds = %4012, %4007
  %4015 = phi ptr [ %4013, %4012 ], [ %3982, %4007 ]
  %4016 = icmp eq i32 %3999, 2956
  br i1 %4016, label %4055, label %4017

4017:                                             ; preds = %4014
  %4018 = sext i32 %3959 to i64
  %4019 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4018, i32 11
  %4020 = load ptr, ptr %4019, align 8, !tbaa !139
  %4021 = load i32, ptr %3975, align 8
  %4022 = and i32 %4021, 65535
  %4023 = icmp eq i32 %4022, 39
  br i1 %4023, label %4024, label %4044

4024:                                             ; preds = %4017
  %4025 = lshr i32 %4021, 16
  %4026 = and i32 %4025, 255
  %4027 = zext i32 %4026 to i64
  %4028 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %4027
  %4029 = load i8, ptr %4028, align 1, !tbaa !17
  %4030 = getelementptr inbounds %struct.rtx_def, ptr %3975, i64 0, i32 1
  %4031 = load ptr, ptr %4030, align 8, !tbaa !17
  %4032 = load i32, ptr %4031, align 8
  %4033 = lshr i32 %4032, 16
  %4034 = and i32 %4033, 255
  %4035 = zext i32 %4034 to i64
  %4036 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %4035
  %4037 = load i8, ptr %4036, align 1, !tbaa !17
  %4038 = icmp ugt i8 %4029, %4037
  br i1 %4038, label %4039, label %4044

4039:                                             ; preds = %4024
  %4040 = call ptr @gen_lowpart_common(i32 noundef %4034, ptr noundef %4015) #19
  %4041 = icmp eq ptr %4040, null
  br i1 %4041, label %4044, label %4042

4042:                                             ; preds = %4039
  %4043 = load ptr, ptr %4030, align 8, !tbaa !17
  br label %4044

4044:                                             ; preds = %4042, %4039, %4024, %4017
  %4045 = phi ptr [ %4043, %4042 ], [ %3975, %4039 ], [ %3975, %4024 ], [ %3975, %4017 ]
  %4046 = phi ptr [ %4040, %4042 ], [ %4015, %4039 ], [ %4015, %4024 ], [ %4015, %4017 ]
  %4047 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %4048 = load i32, ptr %4047, align 8, !tbaa !156
  %4049 = load i32, ptr %3938, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef %4046, ptr noundef nonnull %3949, i32 noundef %4048, i32 noundef %4049)
  %4050 = zext i32 %3999 to i64
  %4051 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %4050, i32 2
  %4052 = load ptr, ptr %4051, align 8, !tbaa !274
  %4053 = call ptr (ptr, ...) %4052(ptr noundef %4045, ptr noundef %4046, ptr noundef %4020) #19
  %4054 = call ptr @emit_insn(ptr noundef %4053) #19
  br label %4112

4055:                                             ; preds = %4014
  %4056 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %4057 = load i32, ptr %4056, align 8, !tbaa !156
  %4058 = load i32, ptr %3938, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef %4015, ptr noundef nonnull %3949, i32 noundef %4057, i32 noundef %4058)
  %4059 = icmp sgt i32 %3959, -1
  br i1 %4059, label %4060, label %4066

4060:                                             ; preds = %4055
  %4061 = zext i32 %3959 to i64
  %4062 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4061, i32 11
  %4063 = load ptr, ptr %4062, align 8, !tbaa !139
  %4064 = load i32, ptr %4056, align 8, !tbaa !156
  %4065 = load i32, ptr %3938, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef %4063, ptr noundef %4015, i32 noundef %4064, i32 noundef %4065)
  br label %4066

4066:                                             ; preds = %4060, %4055, %3974, %3948
  %4067 = phi ptr [ %4015, %4055 ], [ %4063, %4060 ], [ %3949, %3974 ], [ %3949, %3948 ]
  %4068 = load i32, ptr @flag_expensive_optimizations, align 4, !tbaa !21
  %4069 = icmp eq i32 %4068, 0
  br i1 %4069, label %4108, label %4070

4070:                                             ; preds = %4066
  %4071 = load i32, ptr %3937, align 8
  %4072 = and i32 %4071, 65535
  %4073 = icmp eq i32 %4072, 37
  br i1 %4073, label %4074, label %4108

4074:                                             ; preds = %4070
  %4075 = load i32, ptr %3936, align 8
  %4076 = and i32 %4075, 65535
  %4077 = add nsw i32 %4076, -7
  %4078 = icmp ult i32 %4077, 4
  br i1 %4078, label %4079, label %4108

4079:                                             ; preds = %4074
  %4080 = getelementptr inbounds %struct.rtx_def, ptr %3936, i64 1
  %4081 = load ptr, ptr %4080, align 8, !tbaa !17
  %4082 = load i32, ptr %4081, align 8
  %4083 = and i32 %4082, 65535
  %4084 = icmp eq i32 %4083, 23
  br i1 %4084, label %4088, label %4085

4085:                                             ; preds = %4079
  %4086 = call ptr @single_set_2(ptr noundef nonnull %3936, ptr noundef nonnull %4081) #19
  %4087 = icmp eq ptr %4086, null
  br i1 %4087, label %4108, label %4088

4088:                                             ; preds = %4085, %4079
  %4089 = phi ptr [ %4086, %4085 ], [ %4081, %4079 ]
  %4090 = getelementptr inbounds %struct.rtx_def, ptr %4089, i64 0, i32 1
  %4091 = load ptr, ptr %4090, align 8, !tbaa !17
  %4092 = call i32 @rtx_equal_p(ptr noundef nonnull %3937, ptr noundef %4091) #19
  %4093 = icmp eq i32 %4092, 0
  br i1 %4093, label %4094, label %4108

4094:                                             ; preds = %4088
  %4095 = getelementptr inbounds %struct.rtx_def, ptr %4089, i64 0, i32 1, i32 0, i32 0, i64 1
  %4096 = load ptr, ptr %4095, align 8, !tbaa !17
  %4097 = call i32 @reg_mentioned_p(ptr noundef nonnull %3937, ptr noundef %4096) #19
  %4098 = icmp eq i32 %4097, 0
  br i1 %4098, label %4108, label %4099

4099:                                             ; preds = %4094
  %4100 = getelementptr i8, ptr %3937, i64 8
  %4101 = load i32, ptr %4100, align 8, !tbaa !17
  %4102 = icmp ult i32 %4101, 53
  br i1 %4102, label %4103, label %4108

4103:                                             ; preds = %4099
  %4104 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 5
  %4105 = load i32, ptr %4104, align 4, !tbaa !158
  %4106 = call i32 @regno_clobbered_p(i32 noundef %4101, ptr noundef nonnull %3936, i32 noundef %4105, i32 noundef 0) #19
  %4107 = icmp eq i32 %4106, 0
  br i1 %4107, label %4108, label %4112

4108:                                             ; preds = %4103, %4099, %4094, %4088, %4085, %4074, %4070, %4066
  %4109 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %4110 = load i32, ptr %4109, align 8, !tbaa !156
  %4111 = load i32, ptr %3938, align 4, !tbaa !155
  call fastcc void @gen_reload(ptr noundef %3937, ptr noundef %4067, i32 noundef %4110, i32 noundef %4111)
  br label %4112

4112:                                             ; preds = %4108, %4103, %4044, %3990
  %4113 = call ptr @get_insns() #19
  %4114 = icmp eq ptr %4113, null
  br i1 %4114, label %4243, label %4115

4115:                                             ; preds = %4112
  %4116 = getelementptr inbounds %struct.rtx_def, ptr %3936, i64 1
  %4117 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2875
  %4118 = getelementptr i8, ptr %3949, i64 8
  br label %4119

4119:                                             ; preds = %4239, %4115
  %4120 = phi ptr [ %4113, %4115 ], [ %4241, %4239 ]
  %4121 = load i32, ptr %4120, align 8
  %4122 = and i32 %4121, 65535
  %4123 = add nsw i32 %4122, -7
  %4124 = icmp ult i32 %4123, 4
  br i1 %4124, label %4125, label %4239

4125:                                             ; preds = %4119
  %4126 = getelementptr inbounds %struct.rtx_def, ptr %4120, i64 1
  %4127 = load ptr, ptr %4126, align 8, !tbaa !17
  call void @note_stores(ptr noundef %4127, ptr noundef nonnull @forget_old_reloads_1, ptr noundef null) #19
  %4128 = call i32 @reg_mentioned_p(ptr noundef nonnull %3949, ptr noundef %4127) #19
  %4129 = icmp eq i32 %4128, 0
  br i1 %4129, label %4239, label %4130

4130:                                             ; preds = %4125
  %4131 = load i32, ptr %3936, align 8
  %4132 = and i32 %4131, 65535
  %4133 = add nsw i32 %4132, -7
  %4134 = icmp ult i32 %4133, 4
  br i1 %4134, label %4135, label %4163

4135:                                             ; preds = %4130
  %4136 = load ptr, ptr %4116, align 8, !tbaa !17
  %4137 = load i32, ptr %4136, align 8
  %4138 = and i32 %4137, 65535
  %4139 = icmp eq i32 %4138, 23
  br i1 %4139, label %4142, label %4140

4140:                                             ; preds = %4135
  %4141 = call ptr @single_set_2(ptr noundef nonnull %3936, ptr noundef nonnull %4136) #19
  br label %4142

4142:                                             ; preds = %4140, %4135
  %4143 = phi ptr [ %4141, %4140 ], [ %4136, %4135 ]
  %4144 = load i32, ptr %4117, align 4, !tbaa !21
  %4145 = icmp slt i32 %4144, 0
  %4146 = icmp ne ptr %4143, null
  %4147 = select i1 %4145, i1 %4146, i1 false
  br i1 %4147, label %4148, label %4163

4148:                                             ; preds = %4142
  %4149 = getelementptr inbounds %struct.rtx_def, ptr %4143, i64 0, i32 1, i32 0, i32 0, i64 1
  %4150 = load ptr, ptr %4149, align 8, !tbaa !17
  %4151 = icmp eq ptr %4150, %3949
  br i1 %4151, label %4152, label %4163

4152:                                             ; preds = %4148
  %4153 = load i32, ptr %4118, align 8, !tbaa !17
  store i32 %4153, ptr %4117, align 4, !tbaa !21
  %4154 = zext i32 %4153 to i64
  %4155 = shl nuw i64 1, %4154
  %4156 = load i64, ptr @reg_is_output_reload, align 8, !tbaa !40
  %4157 = or i64 %4156, %4155
  store i64 %4157, ptr @reg_is_output_reload, align 8, !tbaa !40
  %4158 = call ptr @find_regno_note(ptr noundef nonnull %3936, i32 noundef 1, i32 noundef %4153) #19
  %4159 = icmp eq ptr %4158, null
  br i1 %4159, label %4163, label %4160

4160:                                             ; preds = %4152
  %4161 = load i64, ptr @reg_reloaded_died, align 8, !tbaa !40
  %4162 = or i64 %4161, %4155
  store i64 %4162, ptr @reg_reloaded_died, align 8, !tbaa !40
  br label %4163

4163:                                             ; preds = %4160, %4152, %4148, %4142, %4130
  %4164 = load i32, ptr %4118, align 8, !tbaa !17
  %4165 = icmp ult i32 %4164, 53
  br i1 %4165, label %4166, label %4239

4166:                                             ; preds = %4163
  %4167 = load i32, ptr %3953, align 8, !tbaa !275
  %4168 = load i32, ptr %4120, align 8
  %4169 = and i32 %4168, 65535
  %4170 = add nsw i32 %4169, -7
  %4171 = icmp ult i32 %4170, 4
  br i1 %4171, label %4172, label %4181

4172:                                             ; preds = %4166
  %4173 = load ptr, ptr %4126, align 8, !tbaa !17
  %4174 = load i32, ptr %4173, align 8
  %4175 = and i32 %4174, 65535
  %4176 = icmp eq i32 %4175, 23
  br i1 %4176, label %4177, label %4179

4177:                                             ; preds = %4172
  %4178 = icmp sgt i32 %4167, -1
  br i1 %4178, label %4187, label %4235

4179:                                             ; preds = %4172
  %4180 = call ptr @single_set_2(ptr noundef nonnull %4120, ptr noundef nonnull %4173) #19
  br label %4181

4181:                                             ; preds = %4179, %4166
  %4182 = phi ptr [ %4180, %4179 ], [ null, %4166 ]
  %4183 = icmp sgt i32 %4167, -1
  %4184 = icmp eq ptr %4182, null
  %4185 = select i1 %4183, i1 %4184, i1 false
  br i1 %4185, label %4239, label %4186

4186:                                             ; preds = %4181
  br i1 %4183, label %4187, label %4235

4187:                                             ; preds = %4186, %4177
  %4188 = phi ptr [ %4173, %4177 ], [ %4182, %4186 ]
  %4189 = getelementptr inbounds %struct.rtx_def, ptr %4188, i64 0, i32 1, i32 0, i32 0, i64 1
  %4190 = load ptr, ptr %4189, align 8, !tbaa !17
  %4191 = icmp eq ptr %4190, %3949
  br i1 %4191, label %4192, label %4235

4192:                                             ; preds = %4187
  %4193 = getelementptr inbounds %struct.rtx_def, ptr %4188, i64 0, i32 1
  %4194 = load ptr, ptr %4193, align 8, !tbaa !17
  %4195 = zext i32 %4167 to i64
  %4196 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4195, i32 11
  %4197 = load ptr, ptr %4196, align 8, !tbaa !139
  %4198 = icmp eq ptr %4194, %4197
  br i1 %4198, label %4199, label %4235

4199:                                             ; preds = %4192
  %4200 = getelementptr inbounds %struct.rtx_def, ptr %4120, i64 0, i32 1, i32 0, i32 0, i64 2
  %4201 = load ptr, ptr %4200, align 8, !tbaa !17
  %4202 = load ptr, ptr %3804, align 8, !tbaa !152
  %4203 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4195, i32 1
  store ptr %4202, ptr %4203, align 8, !tbaa !152
  %4204 = load ptr, ptr %3801, align 8, !tbaa !248
  %4205 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4195, i32 9
  store ptr %4204, ptr %4205, align 8, !tbaa !248
  %4206 = load i32, ptr %4201, align 8
  %4207 = and i32 %4206, 65535
  %4208 = add nsw i32 %4207, -7
  %4209 = icmp ult i32 %4208, 4
  br i1 %4209, label %4210, label %4239

4210:                                             ; preds = %4199
  %4211 = getelementptr inbounds %struct.rtx_def, ptr %4201, i64 1
  %4212 = load ptr, ptr %4211, align 8, !tbaa !17
  %4213 = load i32, ptr %4212, align 8
  %4214 = and i32 %4213, 65535
  %4215 = icmp eq i32 %4214, 23
  br i1 %4215, label %4219, label %4216

4216:                                             ; preds = %4210
  %4217 = call ptr @single_set_2(ptr noundef nonnull %4201, ptr noundef nonnull %4212) #19
  %4218 = icmp eq ptr %4217, null
  br i1 %4218, label %4239, label %4219

4219:                                             ; preds = %4216, %4210
  %4220 = phi ptr [ %4217, %4216 ], [ %4212, %4210 ]
  %4221 = getelementptr inbounds %struct.rtx_def, ptr %4220, i64 0, i32 1, i32 0, i32 0, i64 1
  %4222 = load ptr, ptr %4221, align 8, !tbaa !17
  %4223 = icmp eq ptr %4222, %4194
  br i1 %4223, label %4224, label %4239

4224:                                             ; preds = %4219
  %4225 = getelementptr i8, ptr %4194, i64 8
  %4226 = load i32, ptr %4225, align 8, !tbaa !17
  %4227 = zext i32 %4226 to i64
  %4228 = getelementptr inbounds [53 x ptr], ptr @new_spill_reg_store, i64 0, i64 %4227
  %4229 = load ptr, ptr %4228, align 8, !tbaa !6
  %4230 = icmp eq ptr %4229, null
  br i1 %4230, label %4231, label %4239

4231:                                             ; preds = %4224
  %4232 = shl nuw i64 1, %4227
  %4233 = load i64, ptr @reg_is_output_reload, align 8, !tbaa !40
  %4234 = or i64 %4233, %4232
  store i64 %4234, ptr @reg_is_output_reload, align 8, !tbaa !40
  store ptr %4201, ptr %4228, align 8, !tbaa !6
  br label %4239

4235:                                             ; preds = %4192, %4187, %4186, %4177
  %4236 = load i32, ptr %4118, align 8, !tbaa !17
  %4237 = zext i32 %4236 to i64
  %4238 = getelementptr inbounds [53 x ptr], ptr @new_spill_reg_store, i64 0, i64 %4237
  store ptr %4120, ptr %4238, align 8, !tbaa !6
  br label %4239

4239:                                             ; preds = %4235, %4231, %4224, %4219, %4216, %4199, %4181, %4163, %4125, %4119
  %4240 = getelementptr inbounds %struct.rtx_def, ptr %4120, i64 0, i32 1, i32 0, i32 0, i64 2
  %4241 = load ptr, ptr %4240, align 8, !tbaa !17
  %4242 = icmp eq ptr %4241, null
  br i1 %4242, label %4243, label %4119, !llvm.loop !277

4243:                                             ; preds = %4239, %4112
  %4244 = load i32, ptr %3938, align 4, !tbaa !155
  %4245 = icmp eq i32 %4244, 9
  br i1 %4245, label %4246, label %4254

4246:                                             ; preds = %4243
  %4247 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  %4248 = load i32, ptr %4247, align 8, !tbaa !156
  %4249 = sext i32 %4248 to i64
  %4250 = getelementptr inbounds [30 x ptr], ptr @other_output_reload_insns, i64 0, i64 %4249
  %4251 = load ptr, ptr %4250, align 8, !tbaa !6
  %4252 = call ptr @emit_insn(ptr noundef %4251) #19
  %4253 = call ptr @get_insns() #19
  br label %4257

4254:                                             ; preds = %4243
  %4255 = call ptr @get_insns() #19
  %4256 = getelementptr inbounds %struct.reload, ptr @rld, i64 %2875, i32 12
  br label %4257

4257:                                             ; preds = %4254, %4246
  %4258 = phi ptr [ %4256, %4254 ], [ %4247, %4246 ]
  %4259 = phi ptr [ @output_reload_insns, %4254 ], [ @other_output_reload_insns, %4246 ]
  %4260 = phi ptr [ %4255, %4254 ], [ %4253, %4246 ]
  %4261 = load i32, ptr %4258, align 8, !tbaa !156
  %4262 = sext i32 %4261 to i64
  %4263 = getelementptr inbounds [30 x ptr], ptr %4259, i64 0, i64 %4262
  store ptr %4260, ptr %4263, align 8, !tbaa !6
  %4264 = load i32, ptr @flag_non_call_exceptions, align 4, !tbaa !21
  %4265 = icmp eq i32 %4264, 0
  br i1 %4265, label %4268, label %4266

4266:                                             ; preds = %4257
  %4267 = call ptr @get_insns() #19
  call void @copy_reg_eh_region_note_forward(ptr noundef %3936, ptr noundef %4267, ptr noundef null) #19
  br label %4268

4268:                                             ; preds = %4266, %4257
  call void @end_sequence() #19
  br label %4269

4269:                                             ; preds = %4268, %3927, %3922, %3904, %3891, %3886
  %4270 = add nuw nsw i64 %2875, 1
  %4271 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %4272 = sext i32 %4271 to i64
  %4273 = icmp slt i64 %4270, %4272
  br i1 %4273, label %2874, label %4274, !llvm.loop !278

4274:                                             ; preds = %4269, %2871
  %4275 = load ptr, ptr @other_input_address_reload_insns, align 8, !tbaa !6
  %4276 = call ptr @emit_insn_before(ptr noundef %4275, ptr noundef %2856) #19
  %4277 = load ptr, ptr @other_input_reload_insns, align 8, !tbaa !6
  %4278 = call ptr @emit_insn_before(ptr noundef %4277, ptr noundef %2856) #19
  %4279 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %4280 = icmp sgt i32 %4279, 0
  br i1 %4280, label %4281, label %4296

4281:                                             ; preds = %4274, %4281
  %4282 = phi i64 [ %4292, %4281 ], [ 0, %4274 ]
  %4283 = getelementptr inbounds [30 x ptr], ptr @inpaddr_address_reload_insns, i64 0, i64 %4282
  %4284 = load ptr, ptr %4283, align 8, !tbaa !6
  %4285 = call ptr @emit_insn_before(ptr noundef %4284, ptr noundef %2856) #19
  %4286 = getelementptr inbounds [30 x ptr], ptr @input_address_reload_insns, i64 0, i64 %4282
  %4287 = load ptr, ptr %4286, align 8, !tbaa !6
  %4288 = call ptr @emit_insn_before(ptr noundef %4287, ptr noundef %2856) #19
  %4289 = getelementptr inbounds [30 x ptr], ptr @input_reload_insns, i64 0, i64 %4282
  %4290 = load ptr, ptr %4289, align 8, !tbaa !6
  %4291 = call ptr @emit_insn_before(ptr noundef %4290, ptr noundef %2856) #19
  %4292 = add nuw nsw i64 %4282, 1
  %4293 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %4294 = sext i32 %4293 to i64
  %4295 = icmp slt i64 %4292, %4294
  br i1 %4295, label %4281, label %4296, !llvm.loop !279

4296:                                             ; preds = %4281, %4274
  %4297 = load ptr, ptr @other_operand_reload_insns, align 8, !tbaa !6
  %4298 = call ptr @emit_insn_before(ptr noundef %4297, ptr noundef %2856) #19
  %4299 = load ptr, ptr @operand_reload_insns, align 8, !tbaa !6
  %4300 = call ptr @emit_insn_before(ptr noundef %4299, ptr noundef %2856) #19
  %4301 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %4302 = icmp sgt i32 %4301, 0
  br i1 %4302, label %4312, label %4303

4303:                                             ; preds = %4312, %4296
  %4304 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %4305 = icmp sgt i32 %4304, 0
  br i1 %4305, label %4306, label %5089

4306:                                             ; preds = %4303
  %4307 = getelementptr inbounds %struct.rtx_def, ptr %2856, i64 1
  %4308 = insertelement <4 x ptr> poison, ptr %2856, i64 0
  %4309 = shufflevector <4 x ptr> %4308, <4 x ptr> poison, <4 x i32> zeroinitializer
  %4310 = insertelement <4 x ptr> poison, ptr %2856, i64 0
  %4311 = shufflevector <4 x ptr> %4310, <4 x ptr> poison, <4 x i32> zeroinitializer
  br label %4330

4312:                                             ; preds = %4296, %4312
  %4313 = phi i64 [ %4326, %4312 ], [ 0, %4296 ]
  %4314 = getelementptr inbounds [30 x ptr], ptr @outaddr_address_reload_insns, i64 0, i64 %4313
  %4315 = load ptr, ptr %4314, align 8, !tbaa !6
  %4316 = call ptr @emit_insn_after(ptr noundef %4315, ptr noundef %2856) #19
  %4317 = getelementptr inbounds [30 x ptr], ptr @output_address_reload_insns, i64 0, i64 %4313
  %4318 = load ptr, ptr %4317, align 8, !tbaa !6
  %4319 = call ptr @emit_insn_after(ptr noundef %4318, ptr noundef %4316) #19
  %4320 = getelementptr inbounds [30 x ptr], ptr @output_reload_insns, i64 0, i64 %4313
  %4321 = load ptr, ptr %4320, align 8, !tbaa !6
  %4322 = call ptr @emit_insn_after(ptr noundef %4321, ptr noundef %4319) #19
  %4323 = getelementptr inbounds [30 x ptr], ptr @other_output_reload_insns, i64 0, i64 %4313
  %4324 = load ptr, ptr %4323, align 8, !tbaa !6
  %4325 = call ptr @emit_insn_after(ptr noundef %4324, ptr noundef %4322) #19
  %4326 = add nuw nsw i64 %4313, 1
  %4327 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %4328 = sext i32 %4327 to i64
  %4329 = icmp slt i64 %4326, %4328
  br i1 %4329, label %4312, label %4303, !llvm.loop !280

4330:                                             ; preds = %5084, %4306
  %4331 = phi i64 [ 0, %4306 ], [ %5085, %5084 ]
  %4332 = getelementptr inbounds [180 x i16], ptr @reload_order, i64 0, i64 %4331
  %4333 = load i16, ptr %4332, align 2, !tbaa !44
  %4334 = sext i16 %4333 to i64
  %4335 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %4334
  %4336 = load i32, ptr %4335, align 4, !tbaa !21
  %4337 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334
  %4338 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 8
  %4339 = load ptr, ptr %4338, align 8, !tbaa !225
  %4340 = icmp eq ptr %4339, null
  br i1 %4340, label %4385, label %4341

4341:                                             ; preds = %4330
  %4342 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %4334
  %4343 = load i8, ptr %4342, align 1, !tbaa !17
  %4344 = icmp eq i8 %4343, 0
  br i1 %4344, label %4345, label %4385

4345:                                             ; preds = %4341
  %4346 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %4334
  %4347 = load ptr, ptr %4346, align 8, !tbaa !6
  %4348 = icmp eq ptr %4347, null
  br i1 %4348, label %4349, label %4385

4349:                                             ; preds = %4345
  %4350 = load i32, ptr %4339, align 8
  %4351 = and i32 %4350, 65535
  %4352 = icmp eq i32 %4351, 39
  br i1 %4352, label %4353, label %4357

4353:                                             ; preds = %4349
  %4354 = getelementptr inbounds %struct.rtx_def, ptr %4339, i64 0, i32 1
  %4355 = load ptr, ptr %4354, align 8, !tbaa !17
  %4356 = load i32, ptr %4355, align 8
  br label %4357

4357:                                             ; preds = %4353, %4349
  %4358 = phi i32 [ %4356, %4353 ], [ %4350, %4349 ]
  %4359 = phi ptr [ %4355, %4353 ], [ %4339, %4349 ]
  %4360 = and i32 %4358, 65535
  %4361 = icmp eq i32 %4360, 37
  br i1 %4361, label %4362, label %4385

4362:                                             ; preds = %4357
  %4363 = getelementptr i8, ptr %4359, i64 8
  %4364 = load i32, ptr %4363, align 8, !tbaa !17
  %4365 = icmp ugt i32 %4364, 52
  br i1 %4365, label %4366, label %4385

4366:                                             ; preds = %4362
  %4367 = call i32 @bitmap_bit_p(ptr noundef nonnull @reg_has_output_reload, i32 noundef %4364) #19
  %4368 = icmp eq i32 %4367, 0
  br i1 %4368, label %4369, label %4385

4369:                                             ; preds = %4366
  %4370 = load i32, ptr %4363, align 8, !tbaa !17
  %4371 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4372 = sext i32 %4370 to i64
  %4373 = getelementptr inbounds ptr, ptr %4371, i64 %4372
  %4374 = load ptr, ptr %4373, align 8, !tbaa !6
  %4375 = icmp eq ptr %4374, null
  br i1 %4375, label %4385, label %4376

4376:                                             ; preds = %4369
  %4377 = getelementptr i8, ptr %4374, i64 8
  %4378 = load i32, ptr %4377, align 8, !tbaa !17
  %4379 = sext i32 %4378 to i64
  %4380 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %4379
  %4381 = load i32, ptr %4380, align 4, !tbaa !21
  %4382 = icmp eq i32 %4381, %4370
  br i1 %4382, label %4383, label %4385

4383:                                             ; preds = %4376
  %4384 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %4379
  store ptr null, ptr %4384, align 8, !tbaa !6
  br label %4385

4385:                                             ; preds = %4383, %4376, %4369, %4366, %4362, %4357, %4345, %4341, %4330
  %4386 = icmp sgt i32 %4336, -1
  br i1 %4386, label %4387, label %4908

4387:                                             ; preds = %4385
  %4388 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 11
  %4389 = load ptr, ptr %4388, align 8, !tbaa !139
  %4390 = icmp eq ptr %4389, null
  br i1 %4390, label %5084, label %4391

4391:                                             ; preds = %4387
  %4392 = zext i32 %4336 to i64
  %4393 = load i32, ptr %4389, align 8
  %4394 = lshr i32 %4393, 16
  %4395 = and i32 %4394, 255
  %4396 = zext i32 %4395 to i64
  %4397 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %4392, i64 %4396
  %4398 = load i8, ptr %4397, align 1, !tbaa !17
  %4399 = icmp eq i8 %4398, 0
  br i1 %4399, label %4421, label %4400

4400:                                             ; preds = %4391
  %4401 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 12
  %4402 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 17
  %4403 = zext i8 %4398 to i64
  br label %4404

4404:                                             ; preds = %4418, %4400
  %4405 = phi i64 [ 0, %4400 ], [ %4419, %4418 ]
  %4406 = load i32, ptr %4401, align 8, !tbaa !156
  %4407 = load i32, ptr %4402, align 4, !tbaa !155
  %4408 = trunc i64 %4405 to i32
  %4409 = add i32 %4336, %4408
  %4410 = call fastcc i32 @reload_reg_reaches_end_p(i32 noundef %4409, i32 noundef %4406, i32 noundef %4407), !range !122
  %4411 = icmp eq i32 %4410, 0
  br i1 %4411, label %4418, label %4412

4412:                                             ; preds = %4404
  %4413 = zext i32 %4409 to i64
  %4414 = shl nuw i64 1, %4413
  %4415 = xor i64 %4414, -1
  %4416 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %4417 = and i64 %4416, %4415
  store i64 %4417, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %4418

4418:                                             ; preds = %4412, %4404
  %4419 = add nuw nsw i64 %4405, 1
  %4420 = icmp eq i64 %4419, %4403
  br i1 %4420, label %4421, label %4404, !llvm.loop !281

4421:                                             ; preds = %4418, %4391
  %4422 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 1
  %4423 = load ptr, ptr %4422, align 8, !tbaa !152
  %4424 = icmp eq ptr %4423, null
  br i1 %4424, label %4649, label %4425

4425:                                             ; preds = %4421
  %4426 = load i32, ptr %4423, align 8
  %4427 = and i32 %4426, 65535
  %4428 = icmp eq i32 %4427, 37
  br i1 %4428, label %4435, label %4429

4429:                                             ; preds = %4425
  %4430 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4431 = load ptr, ptr %4430, align 8, !tbaa !248
  %4432 = load i32, ptr %4431, align 8
  %4433 = and i32 %4432, 65535
  %4434 = icmp eq i32 %4433, 37
  br i1 %4434, label %4435, label %5084

4435:                                             ; preds = %4429, %4425
  %4436 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_output, i64 0, i64 %4334
  %4437 = load ptr, ptr %4436, align 8, !tbaa !6
  %4438 = load i32, ptr %4437, align 8
  %4439 = lshr i32 %4438, 16
  %4440 = and i32 %4439, 255
  %4441 = getelementptr i8, ptr %4437, i64 8
  %4442 = load i32, ptr %4441, align 8, !tbaa !17
  %4443 = sext i32 %4442 to i64
  %4444 = zext i32 %4440 to i64
  %4445 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %4443, i64 %4444
  %4446 = load i8, ptr %4445, align 1, !tbaa !17
  %4447 = zext i8 %4446 to i32
  %4448 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 12
  %4449 = load i32, ptr %4448, align 8, !tbaa !156
  %4450 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 17
  %4451 = load i32, ptr %4450, align 4, !tbaa !155
  %4452 = icmp eq i8 %4446, 0
  br i1 %4452, label %4465, label %4456

4453:                                             ; preds = %4456
  %4454 = add nuw nsw i32 %4457, 1
  %4455 = icmp eq i32 %4454, %4447
  br i1 %4455, label %4461, label %4456, !llvm.loop !282

4456:                                             ; preds = %4435, %4453
  %4457 = phi i32 [ %4454, %4453 ], [ 0, %4435 ]
  %4458 = add i32 %4457, %4442
  %4459 = call fastcc i32 @reload_reg_reaches_end_p(i32 noundef %4458, i32 noundef %4449, i32 noundef %4451), !range !122
  %4460 = icmp eq i32 %4459, 0
  br i1 %4460, label %5084, label %4453

4461:                                             ; preds = %4453
  %4462 = load ptr, ptr %4422, align 8, !tbaa !152
  %4463 = load i32, ptr %4462, align 8
  %4464 = and i32 %4463, 65535
  br label %4465

4465:                                             ; preds = %4461, %4435
  %4466 = phi i32 [ %4464, %4461 ], [ %4427, %4435 ]
  %4467 = phi ptr [ %4462, %4461 ], [ %4423, %4435 ]
  %4468 = icmp eq i32 %4466, 37
  br i1 %4468, label %4477, label %4469

4469:                                             ; preds = %4465
  %4470 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4471 = load ptr, ptr %4470, align 8, !tbaa !248
  %4472 = icmp eq ptr %4471, null
  br i1 %4472, label %4473, label %4477

4473:                                             ; preds = %4469
  %4474 = load ptr, ptr %4338, align 8, !tbaa !225
  %4475 = getelementptr inbounds %struct.rtx_def, ptr %4474, i64 0, i32 1
  %4476 = load ptr, ptr %4475, align 8, !tbaa !17
  br label %4477

4477:                                             ; preds = %4473, %4469, %4465
  %4478 = phi ptr [ %4476, %4473 ], [ %4467, %4465 ], [ %4471, %4469 ]
  %4479 = getelementptr i8, ptr %4478, i64 8
  %4480 = load i32, ptr %4479, align 8, !tbaa !17
  %4481 = icmp slt i32 %4480, 53
  br i1 %4481, label %4484, label %4482

4482:                                             ; preds = %4477
  %4483 = zext i32 %4480 to i64
  br label %4489

4484:                                             ; preds = %4477
  %4485 = sext i32 %4480 to i64
  %4486 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %4485, i64 %4444
  %4487 = load i8, ptr %4486, align 1, !tbaa !17
  %4488 = zext i8 %4487 to i32
  br label %4489

4489:                                             ; preds = %4484, %4482
  %4490 = phi i64 [ %4483, %4482 ], [ %4485, %4484 ]
  %4491 = phi i32 [ 1, %4482 ], [ %4488, %4484 ]
  %4492 = getelementptr inbounds [53 x ptr], ptr @new_spill_reg_store, i64 0, i64 %4443
  %4493 = load ptr, ptr %4492, align 8, !tbaa !6
  %4494 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %4443
  store ptr %4493, ptr %4494, align 8, !tbaa !6
  %4495 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %4443
  store ptr %4478, ptr %4495, align 8, !tbaa !6
  %4496 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4497 = getelementptr inbounds ptr, ptr %4496, i64 %4490
  store ptr %4437, ptr %4497, align 8, !tbaa !6
  %4498 = icmp eq i32 %4491, %4447
  %4499 = select i1 %4481, i1 %4498, i1 false
  br i1 %4499, label %4500, label %4514

4500:                                             ; preds = %4489
  %4501 = getelementptr inbounds [53 x i32], ptr @reg_raw_mode, i64 0, i64 %4490
  %4502 = load i32, ptr %4501, align 4, !tbaa !17
  %4503 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %4490
  %4504 = load i32, ptr %4503, align 4, !tbaa !17
  %4505 = call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %4440, i32 noundef %4502, i32 noundef %4504) #19
  %4506 = icmp eq i8 %4505, 0
  br i1 %4506, label %4507, label %4514

4507:                                             ; preds = %4500
  %4508 = getelementptr inbounds [53 x i32], ptr @reg_raw_mode, i64 0, i64 %4443
  %4509 = load i32, ptr %4508, align 4, !tbaa !17
  %4510 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %4443
  %4511 = load i32, ptr %4510, align 4, !tbaa !17
  %4512 = call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %4440, i32 noundef %4509, i32 noundef %4511) #19
  %4513 = icmp eq i8 %4512, 0
  br label %4514

4514:                                             ; preds = %4507, %4500, %4489
  %4515 = phi i1 [ false, %4489 ], [ false, %4500 ], [ %4513, %4507 ]
  %4516 = icmp ugt i32 %4491, 1
  %4517 = select i1 %4481, i1 %4516, i1 false
  br i1 %4517, label %4518, label %4564

4518:                                             ; preds = %4514
  %4519 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4520 = zext i32 %4491 to i64
  %4521 = add nsw i64 %4520, -1
  %4522 = and i64 %4521, 1
  %4523 = icmp eq i32 %4491, 2
  br i1 %4523, label %4551, label %4524

4524:                                             ; preds = %4518
  %4525 = and i64 %4521, -2
  br label %4526

4526:                                             ; preds = %4544, %4524
  %4527 = phi i64 [ 1, %4524 ], [ %4548, %4544 ]
  %4528 = phi i64 [ 0, %4524 ], [ %4549, %4544 ]
  br i1 %4515, label %4529, label %4534

4529:                                             ; preds = %4526
  %4530 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4531 = add nsw i64 %4527, %4443
  %4532 = getelementptr inbounds ptr, ptr %4530, i64 %4531
  %4533 = load ptr, ptr %4532, align 8, !tbaa !6
  br label %4534

4534:                                             ; preds = %4529, %4526
  %4535 = phi ptr [ %4533, %4529 ], [ null, %4526 ]
  %4536 = add nsw i64 %4527, %4490
  %4537 = getelementptr inbounds ptr, ptr %4519, i64 %4536
  store ptr %4535, ptr %4537, align 8, !tbaa !6
  %4538 = add nuw nsw i64 %4527, 1
  br i1 %4515, label %4539, label %4544

4539:                                             ; preds = %4534
  %4540 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4541 = add nsw i64 %4538, %4443
  %4542 = getelementptr inbounds ptr, ptr %4540, i64 %4541
  %4543 = load ptr, ptr %4542, align 8, !tbaa !6
  br label %4544

4544:                                             ; preds = %4539, %4534
  %4545 = phi ptr [ %4543, %4539 ], [ null, %4534 ]
  %4546 = add nsw i64 %4538, %4490
  %4547 = getelementptr inbounds ptr, ptr %4519, i64 %4546
  store ptr %4545, ptr %4547, align 8, !tbaa !6
  %4548 = add nuw nsw i64 %4527, 2
  %4549 = add i64 %4528, 2
  %4550 = icmp eq i64 %4549, %4525
  br i1 %4550, label %4551, label %4526, !llvm.loop !283

4551:                                             ; preds = %4544, %4518
  %4552 = phi i64 [ 1, %4518 ], [ %4548, %4544 ]
  %4553 = icmp eq i64 %4522, 0
  br i1 %4553, label %4564, label %4554

4554:                                             ; preds = %4551
  br i1 %4515, label %4555, label %4560

4555:                                             ; preds = %4554
  %4556 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4557 = add nsw i64 %4552, %4443
  %4558 = getelementptr inbounds ptr, ptr %4556, i64 %4557
  %4559 = load ptr, ptr %4558, align 8, !tbaa !6
  br label %4560

4560:                                             ; preds = %4555, %4554
  %4561 = phi ptr [ %4559, %4555 ], [ null, %4554 ]
  %4562 = add nsw i64 %4552, %4490
  %4563 = getelementptr inbounds ptr, ptr %4519, i64 %4562
  store ptr %4561, ptr %4563, align 8, !tbaa !6
  br label %4564

4564:                                             ; preds = %4560, %4551, %4514
  br i1 %4452, label %5084, label %4565

4565:                                             ; preds = %4564
  %4566 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %4567 = load i64, ptr @reg_reloaded_dead, align 8, !tbaa !40
  %4568 = zext i8 %4446 to i64
  %4569 = icmp ult i8 %4446, 8
  br i1 %4569, label %4628, label %4570

4570:                                             ; preds = %4565
  %4571 = and i64 %4568, 248
  %4572 = insertelement <4 x i64> <i64 poison, i64 -1, i64 -1, i64 -1>, i64 %4567, i64 0
  %4573 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %4566, i64 0
  %4574 = insertelement <4 x i32> poison, i32 %4480, i64 0
  %4575 = shufflevector <4 x i32> %4574, <4 x i32> poison, <4 x i32> zeroinitializer
  %4576 = insertelement <4 x i64> poison, i64 %4443, i64 0
  %4577 = shufflevector <4 x i64> %4576, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %4578

4578:                                             ; preds = %4578, %4570
  %4579 = phi i64 [ 0, %4570 ], [ %4619, %4578 ]
  %4580 = phi <4 x i64> [ %4572, %4570 ], [ %4607, %4578 ]
  %4581 = phi <4 x i64> [ <i64 -1, i64 -1, i64 -1, i64 -1>, %4570 ], [ %4608, %4578 ]
  %4582 = phi <4 x i64> [ %4573, %4570 ], [ %4617, %4578 ]
  %4583 = phi <4 x i64> [ zeroinitializer, %4570 ], [ %4618, %4578 ]
  %4584 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %4570 ], [ %4620, %4578 ]
  %4585 = add <4 x i32> %4584, <i32 4, i32 4, i32 4, i32 4>
  %4586 = or i64 %4579, 1
  %4587 = or i64 %4579, 2
  %4588 = or i64 %4579, 3
  %4589 = insertelement <4 x i64> poison, i64 %4579, i64 0
  %4590 = shufflevector <4 x i64> %4589, <4 x i64> poison, <4 x i32> zeroinitializer
  %4591 = or <4 x i64> %4590, <i64 4, i64 5, i64 6, i64 7>
  %4592 = add nsw i64 %4579, %4443
  %4593 = add nsw i64 %4586, %4443
  %4594 = add nsw i64 %4587, %4443
  %4595 = add nsw i64 %4588, %4443
  %4596 = insertelement <4 x i64> poison, i64 %4592, i64 0
  %4597 = insertelement <4 x i64> %4596, i64 %4593, i64 1
  %4598 = insertelement <4 x i64> %4597, i64 %4594, i64 2
  %4599 = insertelement <4 x i64> %4598, i64 %4595, i64 3
  %4600 = add nsw <4 x i64> %4591, %4577
  %4601 = and <4 x i64> %4599, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %4602 = and <4 x i64> %4600, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %4603 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %4601
  %4604 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %4602
  %4605 = xor <4 x i64> %4603, <i64 -1, i64 -1, i64 -1, i64 -1>
  %4606 = xor <4 x i64> %4604, <i64 -1, i64 -1, i64 -1, i64 -1>
  %4607 = and <4 x i64> %4580, %4605
  %4608 = and <4 x i64> %4581, %4606
  %4609 = select i1 %4515, <4 x i32> %4584, <4 x i32> zeroinitializer
  %4610 = select i1 %4515, <4 x i32> %4585, <4 x i32> zeroinitializer
  %4611 = add nsw <4 x i32> %4609, %4575
  %4612 = add nsw <4 x i32> %4610, %4575
  %4613 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %4592
  store <4 x i32> %4611, ptr %4613, align 4, !tbaa !21
  %4614 = getelementptr inbounds i32, ptr %4613, i64 4
  store <4 x i32> %4612, ptr %4614, align 4, !tbaa !21
  %4615 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %4592
  store <4 x ptr> %4309, ptr %4615, align 8, !tbaa !6
  %4616 = getelementptr inbounds ptr, ptr %4615, i64 4
  store <4 x ptr> %4309, ptr %4616, align 8, !tbaa !6
  %4617 = or <4 x i64> %4603, %4582
  %4618 = or <4 x i64> %4604, %4583
  %4619 = add nuw i64 %4579, 8
  %4620 = add <4 x i32> %4584, <i32 8, i32 8, i32 8, i32 8>
  %4621 = icmp eq i64 %4619, %4571
  br i1 %4621, label %4622, label %4578, !llvm.loop !284

4622:                                             ; preds = %4578
  %4623 = or <4 x i64> %4618, %4617
  %4624 = call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %4623)
  %4625 = and <4 x i64> %4608, %4607
  %4626 = call i64 @llvm.vector.reduce.and.v4i64(<4 x i64> %4625)
  %4627 = icmp eq i64 %4571, %4568
  br i1 %4627, label %4905, label %4628

4628:                                             ; preds = %4565, %4622
  %4629 = phi i64 [ 0, %4565 ], [ %4571, %4622 ]
  %4630 = phi i64 [ %4567, %4565 ], [ %4626, %4622 ]
  %4631 = phi i64 [ %4566, %4565 ], [ %4624, %4622 ]
  br label %4632

4632:                                             ; preds = %4628, %4632
  %4633 = phi i64 [ %4647, %4632 ], [ %4629, %4628 ]
  %4634 = phi i64 [ %4640, %4632 ], [ %4630, %4628 ]
  %4635 = phi i64 [ %4646, %4632 ], [ %4631, %4628 ]
  %4636 = add nsw i64 %4633, %4443
  %4637 = and i64 %4636, 4294967295
  %4638 = shl nuw i64 1, %4637
  %4639 = xor i64 %4638, -1
  %4640 = and i64 %4634, %4639
  %4641 = trunc i64 %4633 to i32
  %4642 = select i1 %4515, i32 %4641, i32 0
  %4643 = add nsw i32 %4642, %4480
  %4644 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %4636
  store i32 %4643, ptr %4644, align 4, !tbaa !21
  %4645 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %4636
  store ptr %2856, ptr %4645, align 8, !tbaa !6
  %4646 = or i64 %4638, %4635
  %4647 = add nuw nsw i64 %4633, 1
  %4648 = icmp eq i64 %4647, %4568
  br i1 %4648, label %4905, label %4632, !llvm.loop !285

4649:                                             ; preds = %4421
  %4650 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4651 = load ptr, ptr %4650, align 8, !tbaa !248
  %4652 = icmp eq ptr %4651, null
  br i1 %4652, label %4653, label %5084

4653:                                             ; preds = %4649
  %4654 = load ptr, ptr %4337, align 8, !tbaa !153
  %4655 = icmp eq ptr %4654, null
  br i1 %4655, label %5084, label %4656

4656:                                             ; preds = %4653
  %4657 = load i32, ptr %4654, align 8
  %4658 = and i32 %4657, 65535
  %4659 = icmp eq i32 %4658, 37
  br i1 %4659, label %4660, label %4667

4660:                                             ; preds = %4656
  %4661 = getelementptr i8, ptr %4654, i64 8
  %4662 = load i32, ptr %4661, align 8, !tbaa !17
  %4663 = icmp ult i32 %4662, 53
  br i1 %4663, label %4667, label %4664

4664:                                             ; preds = %4660
  %4665 = call i32 @bitmap_bit_p(ptr noundef nonnull @reg_has_output_reload, i32 noundef %4662) #19
  %4666 = icmp eq i32 %4665, 0
  br i1 %4666, label %4677, label %4667

4667:                                             ; preds = %4664, %4660, %4656
  %4668 = load ptr, ptr %4338, align 8, !tbaa !225
  %4669 = load i32, ptr %4668, align 8
  %4670 = and i32 %4669, 65535
  %4671 = icmp eq i32 %4670, 37
  br i1 %4671, label %4672, label %5084

4672:                                             ; preds = %4667
  %4673 = getelementptr i8, ptr %4668, i64 8
  %4674 = load i32, ptr %4673, align 8, !tbaa !17
  %4675 = call i32 @bitmap_bit_p(ptr noundef nonnull @reg_has_output_reload, i32 noundef %4674) #19
  %4676 = icmp eq i32 %4675, 0
  br i1 %4676, label %4677, label %5084

4677:                                             ; preds = %4672, %4664
  %4678 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_input, i64 0, i64 %4334
  %4679 = load ptr, ptr %4678, align 8, !tbaa !6
  %4680 = load ptr, ptr %4307, align 8, !tbaa !17
  %4681 = call i32 @reg_set_p(ptr noundef %4679, ptr noundef %4680) #19
  %4682 = icmp eq i32 %4681, 0
  br i1 %4682, label %4683, label %5084

4683:                                             ; preds = %4677
  %4684 = load ptr, ptr %4678, align 8, !tbaa !6
  %4685 = load i32, ptr %4684, align 8
  %4686 = lshr i32 %4685, 16
  %4687 = and i32 %4686, 255
  %4688 = getelementptr i8, ptr %4684, i64 8
  %4689 = load i32, ptr %4688, align 8, !tbaa !17
  %4690 = sext i32 %4689 to i64
  %4691 = zext i32 %4687 to i64
  %4692 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %4690, i64 %4691
  %4693 = load i8, ptr %4692, align 1, !tbaa !17
  %4694 = zext i8 %4693 to i32
  %4695 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 12
  %4696 = load i32, ptr %4695, align 8, !tbaa !156
  %4697 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 17
  %4698 = load i32, ptr %4697, align 4, !tbaa !155
  %4699 = icmp eq i8 %4693, 0
  br i1 %4699, label %4708, label %4703

4700:                                             ; preds = %4703
  %4701 = add nuw nsw i32 %4704, 1
  %4702 = icmp eq i32 %4701, %4694
  br i1 %4702, label %4708, label %4703, !llvm.loop !282

4703:                                             ; preds = %4683, %4700
  %4704 = phi i32 [ %4701, %4700 ], [ 0, %4683 ]
  %4705 = add i32 %4704, %4689
  %4706 = call fastcc i32 @reload_reg_reaches_end_p(i32 noundef %4705, i32 noundef %4696, i32 noundef %4698), !range !122
  %4707 = icmp eq i32 %4706, 0
  br i1 %4707, label %5084, label %4700

4708:                                             ; preds = %4700, %4683
  %4709 = load ptr, ptr %4337, align 8, !tbaa !153
  %4710 = load i32, ptr %4709, align 8
  %4711 = and i32 %4710, 65535
  %4712 = icmp eq i32 %4711, 37
  br i1 %4712, label %4713, label %4717

4713:                                             ; preds = %4708
  %4714 = getelementptr i8, ptr %4709, i64 8
  %4715 = load i32, ptr %4714, align 8, !tbaa !17
  %4716 = icmp ugt i32 %4715, 52
  br i1 %4716, label %4725, label %4717

4717:                                             ; preds = %4713, %4708
  %4718 = load ptr, ptr %4338, align 8, !tbaa !225
  %4719 = load i32, ptr %4718, align 8
  %4720 = and i32 %4719, 65535
  %4721 = icmp eq i32 %4720, 37
  br i1 %4721, label %4725, label %4722

4722:                                             ; preds = %4717
  %4723 = getelementptr inbounds %struct.rtx_def, ptr %4718, i64 0, i32 1
  %4724 = load ptr, ptr %4723, align 8, !tbaa !17
  br label %4725

4725:                                             ; preds = %4722, %4717, %4713
  %4726 = phi ptr [ %4724, %4722 ], [ %4718, %4717 ], [ %4709, %4713 ]
  %4727 = getelementptr i8, ptr %4726, i64 8
  %4728 = load i32, ptr %4727, align 8, !tbaa !17
  %4729 = icmp slt i32 %4728, 53
  br i1 %4729, label %4734, label %4730

4730:                                             ; preds = %4725
  %4731 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4732 = zext i32 %4728 to i64
  %4733 = getelementptr inbounds ptr, ptr %4731, i64 %4732
  store ptr %4684, ptr %4733, align 8, !tbaa !6
  br label %4804

4734:                                             ; preds = %4725
  %4735 = sext i32 %4728 to i64
  %4736 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %4735, i64 %4691
  %4737 = load i8, ptr %4736, align 1, !tbaa !17
  %4738 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4739 = getelementptr inbounds ptr, ptr %4738, i64 %4735
  store ptr %4684, ptr %4739, align 8, !tbaa !6
  %4740 = icmp eq i8 %4737, %4693
  br i1 %4740, label %4741, label %4755

4741:                                             ; preds = %4734
  %4742 = getelementptr inbounds [53 x i32], ptr @reg_raw_mode, i64 0, i64 %4690
  %4743 = load i32, ptr %4742, align 4, !tbaa !17
  %4744 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %4690
  %4745 = load i32, ptr %4744, align 4, !tbaa !17
  %4746 = call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %4687, i32 noundef %4743, i32 noundef %4745) #19
  %4747 = icmp eq i8 %4746, 0
  br i1 %4747, label %4748, label %4755

4748:                                             ; preds = %4741
  %4749 = getelementptr inbounds [53 x i32], ptr @reg_raw_mode, i64 0, i64 %4735
  %4750 = load i32, ptr %4749, align 4, !tbaa !17
  %4751 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %4735
  %4752 = load i32, ptr %4751, align 4, !tbaa !17
  %4753 = call zeroext i8 @ix86_cannot_change_mode_class(i32 noundef %4687, i32 noundef %4750, i32 noundef %4752) #19
  %4754 = icmp eq i8 %4753, 0
  br label %4755

4755:                                             ; preds = %4748, %4741, %4734
  %4756 = phi i1 [ false, %4734 ], [ false, %4741 ], [ %4754, %4748 ]
  %4757 = icmp ugt i8 %4737, 1
  br i1 %4757, label %4758, label %4804

4758:                                             ; preds = %4755
  %4759 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4760 = zext i8 %4737 to i64
  %4761 = add nsw i64 %4760, -1
  %4762 = and i64 %4761, 1
  %4763 = icmp eq i8 %4737, 2
  br i1 %4763, label %4791, label %4764

4764:                                             ; preds = %4758
  %4765 = and i64 %4761, -2
  br label %4766

4766:                                             ; preds = %4784, %4764
  %4767 = phi i64 [ 1, %4764 ], [ %4788, %4784 ]
  %4768 = phi i64 [ 0, %4764 ], [ %4789, %4784 ]
  br i1 %4756, label %4769, label %4774

4769:                                             ; preds = %4766
  %4770 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4771 = add nsw i64 %4767, %4690
  %4772 = getelementptr inbounds ptr, ptr %4770, i64 %4771
  %4773 = load ptr, ptr %4772, align 8, !tbaa !6
  br label %4774

4774:                                             ; preds = %4769, %4766
  %4775 = phi ptr [ %4773, %4769 ], [ null, %4766 ]
  %4776 = add nsw i64 %4767, %4735
  %4777 = getelementptr inbounds ptr, ptr %4759, i64 %4776
  store ptr %4775, ptr %4777, align 8, !tbaa !6
  %4778 = add nuw nsw i64 %4767, 1
  br i1 %4756, label %4779, label %4784

4779:                                             ; preds = %4774
  %4780 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4781 = add nsw i64 %4778, %4690
  %4782 = getelementptr inbounds ptr, ptr %4780, i64 %4781
  %4783 = load ptr, ptr %4782, align 8, !tbaa !6
  br label %4784

4784:                                             ; preds = %4779, %4774
  %4785 = phi ptr [ %4783, %4779 ], [ null, %4774 ]
  %4786 = add nsw i64 %4778, %4735
  %4787 = getelementptr inbounds ptr, ptr %4759, i64 %4786
  store ptr %4785, ptr %4787, align 8, !tbaa !6
  %4788 = add nuw nsw i64 %4767, 2
  %4789 = add i64 %4768, 2
  %4790 = icmp eq i64 %4789, %4765
  br i1 %4790, label %4791, label %4766, !llvm.loop !286

4791:                                             ; preds = %4784, %4758
  %4792 = phi i64 [ 1, %4758 ], [ %4788, %4784 ]
  %4793 = icmp eq i64 %4762, 0
  br i1 %4793, label %4804, label %4794

4794:                                             ; preds = %4791
  br i1 %4756, label %4795, label %4800

4795:                                             ; preds = %4794
  %4796 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %4797 = add nsw i64 %4792, %4690
  %4798 = getelementptr inbounds ptr, ptr %4796, i64 %4797
  %4799 = load ptr, ptr %4798, align 8, !tbaa !6
  br label %4800

4800:                                             ; preds = %4795, %4794
  %4801 = phi ptr [ %4799, %4795 ], [ null, %4794 ]
  %4802 = add nsw i64 %4792, %4735
  %4803 = getelementptr inbounds ptr, ptr %4759, i64 %4802
  store ptr %4801, ptr %4803, align 8, !tbaa !6
  br label %4804

4804:                                             ; preds = %4800, %4791, %4755, %4730
  %4805 = phi i1 [ false, %4730 ], [ %4756, %4755 ], [ %4756, %4791 ], [ %4756, %4800 ]
  %4806 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %4334
  %4807 = load i8, ptr %4806, align 1, !tbaa !17
  %4808 = icmp eq i8 %4807, 0
  br i1 %4808, label %4815, label %4809

4809:                                             ; preds = %4804
  %4810 = load ptr, ptr %4422, align 8, !tbaa !152
  %4811 = icmp eq ptr %4810, null
  br i1 %4811, label %4817, label %4812

4812:                                             ; preds = %4809
  %4813 = load ptr, ptr %4650, align 8, !tbaa !248
  %4814 = icmp eq ptr %4813, null
  br i1 %4814, label %4815, label %4817

4815:                                             ; preds = %4812, %4804
  %4816 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %4690
  store ptr null, ptr %4816, align 8, !tbaa !6
  br label %4817

4817:                                             ; preds = %4815, %4812, %4809
  br i1 %4699, label %5084, label %4818

4818:                                             ; preds = %4817
  %4819 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %4820 = load i64, ptr @reg_reloaded_dead, align 8, !tbaa !40
  %4821 = zext i8 %4693 to i64
  %4822 = icmp ult i8 %4693, 8
  br i1 %4822, label %4881, label %4823

4823:                                             ; preds = %4818
  %4824 = and i64 %4821, 248
  %4825 = insertelement <4 x i64> <i64 poison, i64 -1, i64 -1, i64 -1>, i64 %4820, i64 0
  %4826 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %4819, i64 0
  %4827 = insertelement <4 x i32> poison, i32 %4728, i64 0
  %4828 = shufflevector <4 x i32> %4827, <4 x i32> poison, <4 x i32> zeroinitializer
  %4829 = insertelement <4 x i64> poison, i64 %4690, i64 0
  %4830 = shufflevector <4 x i64> %4829, <4 x i64> poison, <4 x i32> zeroinitializer
  br label %4831

4831:                                             ; preds = %4831, %4823
  %4832 = phi i64 [ 0, %4823 ], [ %4872, %4831 ]
  %4833 = phi <4 x i64> [ %4825, %4823 ], [ %4860, %4831 ]
  %4834 = phi <4 x i64> [ <i64 -1, i64 -1, i64 -1, i64 -1>, %4823 ], [ %4861, %4831 ]
  %4835 = phi <4 x i64> [ %4826, %4823 ], [ %4870, %4831 ]
  %4836 = phi <4 x i64> [ zeroinitializer, %4823 ], [ %4871, %4831 ]
  %4837 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %4823 ], [ %4873, %4831 ]
  %4838 = add <4 x i32> %4837, <i32 4, i32 4, i32 4, i32 4>
  %4839 = or i64 %4832, 1
  %4840 = or i64 %4832, 2
  %4841 = or i64 %4832, 3
  %4842 = insertelement <4 x i64> poison, i64 %4832, i64 0
  %4843 = shufflevector <4 x i64> %4842, <4 x i64> poison, <4 x i32> zeroinitializer
  %4844 = or <4 x i64> %4843, <i64 4, i64 5, i64 6, i64 7>
  %4845 = add nsw i64 %4832, %4690
  %4846 = add nsw i64 %4839, %4690
  %4847 = add nsw i64 %4840, %4690
  %4848 = add nsw i64 %4841, %4690
  %4849 = insertelement <4 x i64> poison, i64 %4845, i64 0
  %4850 = insertelement <4 x i64> %4849, i64 %4846, i64 1
  %4851 = insertelement <4 x i64> %4850, i64 %4847, i64 2
  %4852 = insertelement <4 x i64> %4851, i64 %4848, i64 3
  %4853 = add nsw <4 x i64> %4844, %4830
  %4854 = and <4 x i64> %4852, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %4855 = and <4 x i64> %4853, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %4856 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %4854
  %4857 = shl nuw <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %4855
  %4858 = xor <4 x i64> %4856, <i64 -1, i64 -1, i64 -1, i64 -1>
  %4859 = xor <4 x i64> %4857, <i64 -1, i64 -1, i64 -1, i64 -1>
  %4860 = and <4 x i64> %4833, %4858
  %4861 = and <4 x i64> %4834, %4859
  %4862 = select i1 %4805, <4 x i32> %4837, <4 x i32> zeroinitializer
  %4863 = select i1 %4805, <4 x i32> %4838, <4 x i32> zeroinitializer
  %4864 = add nsw <4 x i32> %4862, %4828
  %4865 = add nsw <4 x i32> %4863, %4828
  %4866 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %4845
  store <4 x i32> %4864, ptr %4866, align 4, !tbaa !21
  %4867 = getelementptr inbounds i32, ptr %4866, i64 4
  store <4 x i32> %4865, ptr %4867, align 4, !tbaa !21
  %4868 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %4845
  store <4 x ptr> %4311, ptr %4868, align 8, !tbaa !6
  %4869 = getelementptr inbounds ptr, ptr %4868, i64 4
  store <4 x ptr> %4311, ptr %4869, align 8, !tbaa !6
  %4870 = or <4 x i64> %4856, %4835
  %4871 = or <4 x i64> %4857, %4836
  %4872 = add nuw i64 %4832, 8
  %4873 = add <4 x i32> %4837, <i32 8, i32 8, i32 8, i32 8>
  %4874 = icmp eq i64 %4872, %4824
  br i1 %4874, label %4875, label %4831, !llvm.loop !287

4875:                                             ; preds = %4831
  %4876 = or <4 x i64> %4871, %4870
  %4877 = call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %4876)
  %4878 = and <4 x i64> %4861, %4860
  %4879 = call i64 @llvm.vector.reduce.and.v4i64(<4 x i64> %4878)
  %4880 = icmp eq i64 %4824, %4821
  br i1 %4880, label %4902, label %4881

4881:                                             ; preds = %4818, %4875
  %4882 = phi i64 [ 0, %4818 ], [ %4824, %4875 ]
  %4883 = phi i64 [ %4820, %4818 ], [ %4879, %4875 ]
  %4884 = phi i64 [ %4819, %4818 ], [ %4877, %4875 ]
  br label %4885

4885:                                             ; preds = %4881, %4885
  %4886 = phi i64 [ %4900, %4885 ], [ %4882, %4881 ]
  %4887 = phi i64 [ %4893, %4885 ], [ %4883, %4881 ]
  %4888 = phi i64 [ %4899, %4885 ], [ %4884, %4881 ]
  %4889 = add nsw i64 %4886, %4690
  %4890 = and i64 %4889, 4294967295
  %4891 = shl nuw i64 1, %4890
  %4892 = xor i64 %4891, -1
  %4893 = and i64 %4887, %4892
  %4894 = trunc i64 %4886 to i32
  %4895 = select i1 %4805, i32 %4894, i32 0
  %4896 = add nsw i32 %4895, %4728
  %4897 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %4889
  store i32 %4896, ptr %4897, align 4, !tbaa !21
  %4898 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %4889
  store ptr %2856, ptr %4898, align 8, !tbaa !6
  %4899 = or i64 %4891, %4888
  %4900 = add nuw nsw i64 %4886, 1
  %4901 = icmp eq i64 %4900, %4821
  br i1 %4901, label %4902, label %4885, !llvm.loop !288

4902:                                             ; preds = %4885, %4875
  %4903 = phi i64 [ %4879, %4875 ], [ %4893, %4885 ]
  %4904 = phi i64 [ %4877, %4875 ], [ %4899, %4885 ]
  store i64 %4903, ptr @reg_reloaded_dead, align 8, !tbaa !40
  store i64 %4904, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %5084

4905:                                             ; preds = %4632, %4622
  %4906 = phi i64 [ %4626, %4622 ], [ %4640, %4632 ]
  %4907 = phi i64 [ %4624, %4622 ], [ %4646, %4632 ]
  store i64 %4906, ptr @reg_reloaded_dead, align 8, !tbaa !40
  store i64 %4907, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %5084

4908:                                             ; preds = %4385
  %4909 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 1
  %4910 = load ptr, ptr %4909, align 8, !tbaa !152
  %4911 = icmp eq ptr %4910, null
  br i1 %4911, label %4921, label %4912

4912:                                             ; preds = %4908
  %4913 = load i32, ptr %4910, align 8
  %4914 = trunc i32 %4913 to i16
  switch i16 %4914, label %5084 [
    i16 37, label %4929
    i16 43, label %4915
  ]

4915:                                             ; preds = %4912
  %4916 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4917 = load ptr, ptr %4916, align 8, !tbaa !248
  %4918 = load i32, ptr %4917, align 8
  %4919 = and i32 %4918, 65535
  %4920 = icmp eq i32 %4919, 37
  br i1 %4920, label %4929, label %5084

4921:                                             ; preds = %4908
  %4922 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4923 = load ptr, ptr %4922, align 8, !tbaa !248
  %4924 = icmp eq ptr %4923, null
  br i1 %4924, label %5084, label %4925

4925:                                             ; preds = %4921
  %4926 = load i32, ptr %4923, align 8
  %4927 = and i32 %4926, 65535
  %4928 = icmp eq i32 %4927, 37
  br i1 %4928, label %4936, label %5084

4929:                                             ; preds = %4915, %4912
  %4930 = and i32 %4913, 65535
  %4931 = icmp eq i32 %4930, 37
  br i1 %4931, label %4936, label %4932

4932:                                             ; preds = %4929
  %4933 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 9
  %4934 = load ptr, ptr %4933, align 8, !tbaa !248
  %4935 = load i32, ptr %4934, align 8
  br label %4936

4936:                                             ; preds = %4932, %4929, %4925
  %4937 = phi i32 [ %4913, %4929 ], [ %4935, %4932 ], [ %4926, %4925 ]
  %4938 = phi ptr [ %4910, %4929 ], [ %4934, %4932 ], [ %4923, %4925 ]
  %4939 = getelementptr i8, ptr %4938, i64 8
  %4940 = load i32, ptr %4939, align 8, !tbaa !17
  %4941 = lshr i32 %4937, 16
  %4942 = and i32 %4941, 255
  %4943 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4334, i32 11
  %4944 = load ptr, ptr %4943, align 8, !tbaa !139
  %4945 = icmp eq ptr %4944, null
  %4946 = icmp eq ptr %4944, %4938
  %4947 = or i1 %4945, %4946
  br i1 %4947, label %4949, label %4948

4948:                                             ; preds = %4936
  call void @forget_old_reloads_1(ptr noundef nonnull %4944, ptr poison, ptr noundef null)
  br label %4949

4949:                                             ; preds = %4948, %4936
  %4950 = icmp slt i32 %4940, 53
  br i1 %4950, label %5072, label %4951

4951:                                             ; preds = %4949
  %4952 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %4953 = zext i32 %4940 to i64
  %4954 = getelementptr inbounds ptr, ptr %4952, i64 %4953
  store ptr null, ptr %4954, align 8, !tbaa !6
  %4955 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_output, i64 0, i64 %4334
  %4956 = load ptr, ptr %4955, align 8, !tbaa !6
  %4957 = icmp eq ptr %4956, null
  br i1 %4957, label %4958, label %4995

4958:                                             ; preds = %4951
  %4959 = load i32, ptr %2856, align 8
  %4960 = and i32 %4959, 65535
  %4961 = add nsw i32 %4960, -7
  %4962 = icmp ult i32 %4961, 4
  br i1 %4962, label %4963, label %5084

4963:                                             ; preds = %4958
  %4964 = load ptr, ptr %4307, align 8, !tbaa !17
  %4965 = load i32, ptr %4964, align 8
  %4966 = and i32 %4965, 65535
  %4967 = icmp eq i32 %4966, 23
  br i1 %4967, label %4971, label %4968

4968:                                             ; preds = %4963
  %4969 = call ptr @single_set_2(ptr noundef nonnull %2856, ptr noundef nonnull %4964) #19
  %4970 = icmp eq ptr %4969, null
  br i1 %4970, label %5084, label %4971

4971:                                             ; preds = %4968, %4963
  %4972 = phi ptr [ %4969, %4968 ], [ %4964, %4963 ]
  %4973 = getelementptr inbounds %struct.rtx_def, ptr %4972, i64 0, i32 1
  %4974 = load ptr, ptr %4973, align 8, !tbaa !17
  %4975 = load ptr, ptr %4909, align 8, !tbaa !152
  %4976 = icmp eq ptr %4974, %4975
  br i1 %4976, label %4977, label %5084

4977:                                             ; preds = %4971
  %4978 = getelementptr inbounds %struct.rtx_def, ptr %4972, i64 0, i32 1, i32 0, i32 0, i64 1
  %4979 = load ptr, ptr %4978, align 8, !tbaa !17
  %4980 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %4981 = icmp sgt i32 %4980, 0
  br i1 %4981, label %4982, label %5001

4982:                                             ; preds = %4977
  %4983 = zext i32 %4980 to i64
  br label %4987

4984:                                             ; preds = %4987
  %4985 = add nuw nsw i64 %4988, 1
  %4986 = icmp eq i64 %4985, %4983
  br i1 %4986, label %5001, label %4987, !llvm.loop !289

4987:                                             ; preds = %4984, %4982
  %4988 = phi i64 [ 0, %4982 ], [ %4985, %4984 ]
  %4989 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %4988
  %4990 = load ptr, ptr %4989, align 8, !tbaa !153
  %4991 = icmp eq ptr %4990, %4979
  br i1 %4991, label %4992, label %4984

4992:                                             ; preds = %4987
  %4993 = getelementptr inbounds [180 x ptr], ptr @reload_reg_rtx_for_input, i64 0, i64 %4988
  %4994 = load ptr, ptr %4993, align 8, !tbaa !6
  br label %5001

4995:                                             ; preds = %4951
  %4996 = getelementptr i8, ptr %4956, i64 8
  %4997 = load i32, ptr %4996, align 8, !tbaa !17
  %4998 = zext i32 %4997 to i64
  %4999 = getelementptr inbounds [53 x ptr], ptr @new_spill_reg_store, i64 0, i64 %4998
  %5000 = load ptr, ptr %4999, align 8, !tbaa !6
  br label %5004

5001:                                             ; preds = %4984, %4992, %4977
  %5002 = phi ptr [ %4994, %4992 ], [ %4979, %4977 ], [ %4979, %4984 ]
  %5003 = icmp eq ptr %5002, null
  br i1 %5003, label %5084, label %5004

5004:                                             ; preds = %5001, %4995
  %5005 = phi ptr [ %5000, %4995 ], [ %2856, %5001 ]
  %5006 = phi ptr [ %4956, %4995 ], [ %5002, %5001 ]
  %5007 = load i32, ptr %5006, align 8
  %5008 = and i32 %5007, 65535
  %5009 = icmp eq i32 %5008, 37
  br i1 %5009, label %5010, label %5084

5010:                                             ; preds = %5004
  %5011 = getelementptr i8, ptr %5006, i64 8
  %5012 = load i32, ptr %5011, align 8, !tbaa !17
  %5013 = icmp ult i32 %5012, 53
  br i1 %5013, label %5014, label %5084

5014:                                             ; preds = %5010
  %5015 = lshr i32 %5007, 16
  %5016 = and i32 %5015, 255
  %5017 = icmp eq i32 %5016, %4942
  br i1 %5017, label %5020, label %5018

5018:                                             ; preds = %5014
  call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 8156, ptr noundef nonnull @.str.2) #19
  %5019 = load i32, ptr %5011, align 8, !tbaa !17
  br label %5020

5020:                                             ; preds = %5018, %5014
  %5021 = phi i32 [ %5012, %5014 ], [ %5019, %5018 ]
  %5022 = sext i32 %5021 to i64
  %5023 = zext i32 %4942 to i64
  %5024 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %5022, i64 %5023
  %5025 = load i8, ptr %5024, align 1, !tbaa !17
  %5026 = call ptr @find_regno_note(ptr noundef %2856, i32 noundef 1, i32 noundef %5021) #19
  %5027 = icmp eq ptr %5026, null
  %5028 = icmp ne ptr %5005, null
  %5029 = select i1 %5027, i1 %5028, i1 false
  br i1 %5029, label %5030, label %5032

5030:                                             ; preds = %5020
  %5031 = call ptr @find_regno_note(ptr noundef nonnull %5005, i32 noundef 1, i32 noundef %5021) #19
  br label %5032

5032:                                             ; preds = %5030, %5020
  %5033 = phi ptr [ %5031, %5030 ], [ %5026, %5020 ]
  %5034 = icmp eq i8 %5025, 0
  br i1 %5034, label %5068, label %5035

5035:                                             ; preds = %5032
  %5036 = load i64, ptr @reg_reloaded_died, align 8, !tbaa !40
  %5037 = load i64, ptr @reg_is_output_reload, align 8, !tbaa !40
  %5038 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %5039 = load i64, ptr @reg_reloaded_dead, align 8, !tbaa !40
  %5040 = icmp eq ptr %5033, null
  %5041 = zext i32 %5021 to i64
  %5042 = shl nuw i64 1, %5041
  %5043 = xor i64 %5042, -1
  %5044 = zext i8 %5025 to i64
  br label %5045

5045:                                             ; preds = %5045, %5035
  %5046 = phi i64 [ 0, %5035 ], [ %5065, %5045 ]
  %5047 = phi i64 [ %5039, %5035 ], [ %5059, %5045 ]
  %5048 = phi i64 [ %5038, %5035 ], [ %5060, %5045 ]
  %5049 = phi i64 [ %5037, %5035 ], [ %5061, %5045 ]
  %5050 = phi i64 [ %5036, %5035 ], [ %5064, %5045 ]
  %5051 = add nsw i64 %5046, %5022
  %5052 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %5051
  store ptr %5005, ptr %5052, align 8, !tbaa !6
  %5053 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %5051
  store ptr %4938, ptr %5053, align 8, !tbaa !6
  %5054 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %5051
  store i32 %4940, ptr %5054, align 4, !tbaa !21
  %5055 = getelementptr inbounds [53 x ptr], ptr @reg_reloaded_insn, i64 0, i64 %5051
  store ptr %5005, ptr %5055, align 8, !tbaa !6
  %5056 = and i64 %5051, 4294967295
  %5057 = shl nuw i64 1, %5056
  %5058 = xor i64 %5057, -1
  %5059 = and i64 %5047, %5058
  %5060 = or i64 %5057, %5048
  %5061 = or i64 %5049, %5057
  %5062 = and i64 %5050, %5043
  %5063 = or i64 %5050, %5042
  %5064 = select i1 %5040, i64 %5062, i64 %5063
  %5065 = add nuw nsw i64 %5046, 1
  %5066 = icmp eq i64 %5065, %5044
  br i1 %5066, label %5067, label %5045, !llvm.loop !290

5067:                                             ; preds = %5045
  store i64 %5059, ptr @reg_reloaded_dead, align 8, !tbaa !40
  store i64 %5060, ptr @reg_reloaded_valid, align 8, !tbaa !40
  store i64 %5061, ptr @reg_is_output_reload, align 8, !tbaa !40
  store i64 %5064, ptr @reg_reloaded_died, align 8, !tbaa !40
  br label %5068

5068:                                             ; preds = %5067, %5032
  %5069 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %5070 = getelementptr inbounds ptr, ptr %5069, i64 %4953
  store ptr %5006, ptr %5070, align 8, !tbaa !6
  %5071 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull @reg_has_output_reload, i32 noundef %4940) #19
  br label %5084

5072:                                             ; preds = %4949
  %5073 = sext i32 %4940 to i64
  %5074 = zext i32 %4942 to i64
  %5075 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %5073, i64 %5074
  %5076 = load i8, ptr %5075, align 1, !tbaa !17
  %5077 = icmp eq i8 %5076, 0
  br i1 %5077, label %5084, label %5078

5078:                                             ; preds = %5072
  %5079 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %5080 = shl nsw i64 %5073, 3
  %5081 = getelementptr i8, ptr %5079, i64 %5080
  %5082 = zext i8 %5076 to i64
  %5083 = shl nuw nsw i64 %5082, 3
  call void @llvm.memset.p0.i64(ptr align 8 %5081, i8 0, i64 %5083, i1 false), !tbaa !6
  br label %5084

5084:                                             ; preds = %4456, %4703, %5078, %5072, %5068, %5010, %5004, %5001, %4971, %4968, %4958, %4925, %4921, %4915, %4912, %4905, %4902, %4817, %4677, %4672, %4667, %4653, %4649, %4564, %4429, %4387
  %5085 = add nuw nsw i64 %4331, 1
  %5086 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %5087 = sext i32 %5086 to i64
  %5088 = icmp slt i64 %5085, %5087
  br i1 %5088, label %4330, label %5089, !llvm.loop !291

5089:                                             ; preds = %5084, %4303
  %5090 = load i64, ptr @reg_reloaded_died, align 8, !tbaa !40
  %5091 = load i64, ptr @reg_reloaded_dead, align 8, !tbaa !40
  %5092 = or i64 %5091, %5090
  store i64 %5092, ptr @reg_reloaded_dead, align 8, !tbaa !40
  call void @subst_reloads(ptr noundef nonnull %33) #19
  %5093 = load i32, ptr @flag_non_call_exceptions, align 4, !tbaa !21
  %5094 = icmp eq i32 %5093, 0
  br i1 %5094, label %5109, label %5095

5095:                                             ; preds = %5089
  %5096 = load i32, ptr %33, align 8
  %5097 = and i32 %5096, 65535
  %5098 = icmp eq i32 %5097, 10
  br i1 %5098, label %5109, label %5099

5099:                                             ; preds = %5095
  %5100 = call ptr @find_reg_note(ptr noundef nonnull %33, i32 noundef 25, ptr noundef null) #19
  %5101 = icmp eq ptr %5100, null
  br i1 %5101, label %5109, label %5102

5102:                                             ; preds = %5099
  %5103 = call zeroext i8 @insn_could_throw_p(ptr noundef nonnull %33) #19
  %5104 = icmp eq i8 %5103, 0
  br i1 %5104, label %5105, label %5106

5105:                                             ; preds = %5102
  call void @remove_note(ptr noundef nonnull %33, ptr noundef nonnull %5100) #19
  br label %5106

5106:                                             ; preds = %5105, %5102
  %5107 = getelementptr inbounds %struct.rtx_def, ptr %213, i64 0, i32 1, i32 0, i32 0, i64 2
  %5108 = load ptr, ptr %5107, align 8, !tbaa !17
  call void @copy_reg_eh_region_note_forward(ptr noundef nonnull %5100, ptr noundef %5108, ptr noundef %211) #19
  br label %5109

5109:                                             ; preds = %5106, %5099, %5095, %5089
  %5110 = load ptr, ptr %104, align 8, !tbaa !17
  %5111 = call i32 @asm_noperands(ptr noundef %5110) #19
  %5112 = icmp sgt i32 %5111, -1
  br i1 %5112, label %5113, label %5147

5113:                                             ; preds = %5109
  %5114 = getelementptr inbounds %struct.rtx_def, ptr %213, i64 0, i32 1, i32 0, i32 0, i64 2
  %5115 = load ptr, ptr %5114, align 8, !tbaa !17
  %5116 = icmp eq ptr %5115, %211
  br i1 %5116, label %5147, label %5117

5117:                                             ; preds = %5113, %5143
  %5118 = phi ptr [ %5145, %5143 ], [ %5115, %5113 ]
  %5119 = icmp eq ptr %5118, %33
  br i1 %5119, label %5143, label %5120

5120:                                             ; preds = %5117
  %5121 = load i32, ptr %5118, align 8
  %5122 = and i32 %5121, 65535
  %5123 = add nsw i32 %5122, -7
  %5124 = icmp ult i32 %5123, 4
  br i1 %5124, label %5125, label %5143

5125:                                             ; preds = %5120
  %5126 = getelementptr inbounds %struct.rtx_def, ptr %5118, i64 1
  %5127 = load ptr, ptr %5126, align 8, !tbaa !17
  %5128 = load i32, ptr %5127, align 8
  %5129 = and i32 %5128, 65535
  %5130 = icmp eq i32 %5129, 24
  br i1 %5130, label %5143, label %5131

5131:                                             ; preds = %5125
  %5132 = getelementptr inbounds %struct.rtx_def, ptr %5118, i64 1, i32 1
  %5133 = load i32, ptr %5132, align 8, !tbaa !17
  %5134 = icmp slt i32 %5133, 0
  br i1 %5134, label %5135, label %5138

5135:                                             ; preds = %5131
  %5136 = call i32 @recog(ptr noundef nonnull %5127, ptr noundef nonnull %5118, ptr noundef null) #19
  store i32 %5136, ptr %5132, align 8, !tbaa !17
  %5137 = icmp slt i32 %5136, 0
  br i1 %5137, label %5141, label %5138

5138:                                             ; preds = %5131, %5135
  call void @extract_insn(ptr noundef nonnull %5118) #19
  %5139 = call i32 @constrain_operands(i32 noundef 1) #19
  %5140 = icmp eq i32 %5139, 0
  br i1 %5140, label %5141, label %5143

5141:                                             ; preds = %5138, %5135
  call void (ptr, ptr, ...) @error_for_asm(ptr noundef nonnull %33, ptr noundef nonnull @.str.18) #19
  %5142 = call ptr @delete_insn(ptr noundef nonnull %5118) #19
  br label %5143

5143:                                             ; preds = %5120, %5117, %5125, %5138, %5141
  %5144 = getelementptr inbounds %struct.rtx_def, ptr %5118, i64 0, i32 1, i32 0, i32 0, i64 2
  %5145 = load ptr, ptr %5144, align 8, !tbaa !17
  %5146 = icmp eq ptr %5145, %211
  br i1 %5146, label %5147, label %5117, !llvm.loop !292

5147:                                             ; preds = %5143, %5113, %203, %5109, %204
  %5148 = load i32, ptr @num_eliminable, align 4, !tbaa !21
  %5149 = icmp eq i32 %5148, 0
  br i1 %5149, label %5209, label %5150

5150:                                             ; preds = %5147
  %5151 = load i8, ptr %199, align 4
  %5152 = and i8 %5151, 4
  %5153 = icmp eq i8 %5152, 0
  br i1 %5153, label %5209, label %5154

5154:                                             ; preds = %5150
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %5155 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %5156 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 0, i32 5
  %5157 = load i64, ptr %5156, align 8, !tbaa !124
  %5158 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 0, i32 6
  store i64 %5157, ptr %5158, align 8, !tbaa !125
  %5159 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 0, i32 3
  %5160 = load i32, ptr %5159, align 8, !tbaa !103
  %5161 = icmp eq i32 %5160, 0
  br i1 %5161, label %5167, label %5162

5162:                                             ; preds = %5154
  %5163 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 0, i32 2
  %5164 = load i64, ptr %5163, align 8, !tbaa !123
  %5165 = icmp eq i64 %5157, %5164
  br i1 %5165, label %5167, label %5166

5166:                                             ; preds = %5162
  store i32 1, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %5167

5167:                                             ; preds = %5166, %5162, %5154
  %5168 = phi i32 [ 0, %5154 ], [ 0, %5162 ], [ 1, %5166 ]
  %5169 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 1, i32 5
  %5170 = load i64, ptr %5169, align 8, !tbaa !124
  %5171 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 1, i32 6
  store i64 %5170, ptr %5171, align 8, !tbaa !125
  %5172 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 1, i32 3
  %5173 = load i32, ptr %5172, align 8, !tbaa !103
  %5174 = icmp eq i32 %5173, 0
  br i1 %5174, label %5181, label %5175

5175:                                             ; preds = %5167
  %5176 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 1, i32 2
  %5177 = load i64, ptr %5176, align 8, !tbaa !123
  %5178 = icmp eq i64 %5170, %5177
  br i1 %5178, label %5181, label %5179

5179:                                             ; preds = %5175
  %5180 = add nuw nsw i32 %5168, 1
  store i32 %5180, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %5181

5181:                                             ; preds = %5179, %5175, %5167
  %5182 = phi i32 [ %5168, %5167 ], [ %5168, %5175 ], [ %5180, %5179 ]
  %5183 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 2, i32 5
  %5184 = load i64, ptr %5183, align 8, !tbaa !124
  %5185 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 2, i32 6
  store i64 %5184, ptr %5185, align 8, !tbaa !125
  %5186 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 2, i32 3
  %5187 = load i32, ptr %5186, align 8, !tbaa !103
  %5188 = icmp eq i32 %5187, 0
  br i1 %5188, label %5195, label %5189

5189:                                             ; preds = %5181
  %5190 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 2, i32 2
  %5191 = load i64, ptr %5190, align 8, !tbaa !123
  %5192 = icmp eq i64 %5184, %5191
  br i1 %5192, label %5195, label %5193

5193:                                             ; preds = %5189
  %5194 = add nuw nsw i32 %5182, 1
  store i32 %5194, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %5195

5195:                                             ; preds = %5193, %5189, %5181
  %5196 = phi i32 [ %5182, %5181 ], [ %5182, %5189 ], [ %5194, %5193 ]
  %5197 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 3, i32 5
  %5198 = load i64, ptr %5197, align 8, !tbaa !124
  %5199 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 3, i32 6
  store i64 %5198, ptr %5199, align 8, !tbaa !125
  %5200 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 3, i32 3
  %5201 = load i32, ptr %5200, align 8, !tbaa !103
  %5202 = icmp eq i32 %5201, 0
  br i1 %5202, label %5209, label %5203

5203:                                             ; preds = %5195
  %5204 = getelementptr inbounds %struct.elim_table, ptr %5155, i64 3, i32 2
  %5205 = load i64, ptr %5204, align 8, !tbaa !123
  %5206 = icmp eq i64 %5198, %5205
  br i1 %5206, label %5209, label %5207

5207:                                             ; preds = %5203
  %5208 = add nuw nsw i32 %5196, 1
  store i32 %5208, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %5209

5209:                                             ; preds = %5207, %5203, %5195, %5150, %5147
  %5210 = load ptr, ptr %6, align 8, !tbaa !37
  %5211 = icmp eq ptr %5210, null
  %5212 = select i1 %5211, ptr @bitmap_zero_bits, ptr %5210
  %5213 = getelementptr inbounds %struct.bitmap_element_def, ptr %5212, i64 0, i32 2
  %5214 = load i32, ptr %5213, align 8, !tbaa !38
  %5215 = shl i32 %5214, 7
  %5216 = getelementptr inbounds %struct.bitmap_element_def, ptr %5212, i64 0, i32 3, i64 0
  %5217 = load i64, ptr %5216, align 8, !tbaa !40
  %5218 = icmp eq i64 %5217, 0
  %5219 = zext i1 %5218 to i32
  %5220 = or i32 %5215, %5219
  br label %5221

5221:                                             ; preds = %5300, %5209
  %5222 = phi i64 [ %5217, %5209 ], [ %5301, %5300 ]
  %5223 = phi i32 [ 0, %5209 ], [ %5229, %5300 ]
  %5224 = phi i32 [ %5220, %5209 ], [ %5302, %5300 ]
  %5225 = phi ptr [ %5212, %5209 ], [ %5231, %5300 ]
  %5226 = icmp eq i64 %5222, 0
  br i1 %5226, label %5241, label %5227

5227:                                             ; preds = %5250, %5221
  %5228 = phi i64 [ %5222, %5221 ], [ %5255, %5250 ]
  %5229 = phi i32 [ %5223, %5221 ], [ %5251, %5250 ]
  %5230 = phi i32 [ %5224, %5221 ], [ %5252, %5250 ]
  %5231 = phi ptr [ %5225, %5221 ], [ %5247, %5250 ]
  %5232 = and i64 %5228, 1
  %5233 = icmp eq i64 %5232, 0
  br i1 %5233, label %5234, label %5268

5234:                                             ; preds = %5227, %5234
  %5235 = phi i32 [ %5238, %5234 ], [ %5230, %5227 ]
  %5236 = phi i64 [ %5237, %5234 ], [ %5228, %5227 ]
  %5237 = lshr i64 %5236, 1
  %5238 = add i32 %5235, 1
  %5239 = and i64 %5236, 2
  %5240 = icmp eq i64 %5239, 0
  br i1 %5240, label %5234, label %5268, !llvm.loop !41

5241:                                             ; preds = %5221
  %5242 = add i32 %5224, 63
  %5243 = and i32 %5242, -64
  %5244 = add i32 %5223, 1
  br label %5245

5245:                                             ; preds = %5264, %5241
  %5246 = phi i32 [ %5243, %5241 ], [ %5267, %5264 ]
  %5247 = phi ptr [ %5225, %5241 ], [ %5262, %5264 ]
  %5248 = phi i32 [ %5244, %5241 ], [ 0, %5264 ]
  %5249 = icmp eq i32 %5248, 2
  br i1 %5249, label %5261, label %5250

5250:                                             ; preds = %5245, %5257
  %5251 = phi i32 [ %5259, %5257 ], [ %5248, %5245 ]
  %5252 = phi i32 [ %5258, %5257 ], [ %5246, %5245 ]
  %5253 = zext i32 %5251 to i64
  %5254 = getelementptr inbounds %struct.bitmap_element_def, ptr %5247, i64 0, i32 3, i64 %5253
  %5255 = load i64, ptr %5254, align 8, !tbaa !40
  %5256 = icmp eq i64 %5255, 0
  br i1 %5256, label %5257, label %5227

5257:                                             ; preds = %5250
  %5258 = add i32 %5252, 64
  %5259 = add i32 %5251, 1
  %5260 = icmp eq i32 %5259, 2
  br i1 %5260, label %5261, label %5250, !llvm.loop !42

5261:                                             ; preds = %5257, %5245
  %5262 = load ptr, ptr %5247, align 8, !tbaa !43
  %5263 = icmp eq ptr %5262, null
  br i1 %5263, label %5303, label %5264

5264:                                             ; preds = %5261
  %5265 = getelementptr inbounds %struct.bitmap_element_def, ptr %5262, i64 0, i32 2
  %5266 = load i32, ptr %5265, align 8, !tbaa !38
  %5267 = shl i32 %5266, 7
  br label %5245

5268:                                             ; preds = %5234, %5227
  %5269 = phi i64 [ %5228, %5227 ], [ %5237, %5234 ]
  %5270 = phi i32 [ %5230, %5227 ], [ %5238, %5234 ]
  %5271 = icmp ult i32 %5270, 53
  %5272 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br i1 %5271, label %5273, label %5291

5273:                                             ; preds = %5268
  %5274 = icmp eq i32 %5272, 0
  br i1 %5274, label %5275, label %5278

5275:                                             ; preds = %5273
  %5276 = zext i32 %5270 to i64
  %5277 = shl nuw nsw i64 1, %5276
  br label %5284

5278:                                             ; preds = %5273
  %5279 = load i64, ptr @reg_is_output_reload, align 8, !tbaa !40
  %5280 = zext i32 %5270 to i64
  %5281 = shl nuw nsw i64 1, %5280
  %5282 = and i64 %5279, %5281
  %5283 = icmp eq i64 %5282, 0
  br i1 %5283, label %5284, label %5293

5284:                                             ; preds = %5278, %5275
  %5285 = phi i64 [ %5277, %5275 ], [ %5281, %5278 ]
  %5286 = phi i64 [ %5276, %5275 ], [ %5280, %5278 ]
  %5287 = xor i64 %5285, -1
  %5288 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %5289 = and i64 %5288, %5287
  store i64 %5289, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %5290 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %5286
  store ptr null, ptr %5290, align 8, !tbaa !6
  br label %5291

5291:                                             ; preds = %5284, %5268
  %5292 = icmp eq i32 %5272, 0
  br i1 %5292, label %5296, label %5293

5293:                                             ; preds = %5291, %5278
  %5294 = call i32 @bitmap_bit_p(ptr noundef nonnull @reg_has_output_reload, i32 noundef %5270) #19
  %5295 = icmp eq i32 %5294, 0
  br i1 %5295, label %5296, label %5300

5296:                                             ; preds = %5293, %5291
  %5297 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %5298 = zext i32 %5270 to i64
  %5299 = getelementptr inbounds ptr, ptr %5297, i64 %5298
  store ptr null, ptr %5299, align 8, !tbaa !6
  br label %5300

5300:                                             ; preds = %5296, %5293
  %5301 = lshr i64 %5269, 1
  %5302 = add i32 %5270, 1
  br label %5221, !llvm.loop !293

5303:                                             ; preds = %5261
  call void @bitmap_clear(ptr noundef nonnull %6) #19
  %5304 = load ptr, ptr %34, align 8, !tbaa !17
  %5305 = icmp eq ptr %5304, %35
  br i1 %5305, label %5322, label %5306

5306:                                             ; preds = %5303, %5318
  %5307 = phi ptr [ %5320, %5318 ], [ %5304, %5303 ]
  %5308 = load i32, ptr %5307, align 8
  %5309 = and i32 %5308, 65535
  %5310 = icmp eq i32 %5309, 8
  br i1 %5310, label %5311, label %5318

5311:                                             ; preds = %5306
  %5312 = getelementptr inbounds %struct.rtx_def, ptr %5307, i64 1
  %5313 = load ptr, ptr %5312, align 8, !tbaa !17
  %5314 = load i32, ptr %5313, align 8
  %5315 = and i32 %5314, 65535
  %5316 = icmp eq i32 %5315, 25
  br i1 %5316, label %5317, label %5318

5317:                                             ; preds = %5311
  call void @note_stores(ptr noundef nonnull %5313, ptr noundef nonnull @forget_old_reloads_1, ptr noundef null) #19
  br label %5318

5318:                                             ; preds = %5306, %5311, %5317
  %5319 = getelementptr inbounds %struct.rtx_def, ptr %5307, i64 0, i32 1, i32 0, i32 0, i64 2
  %5320 = load ptr, ptr %5319, align 8, !tbaa !17
  %5321 = icmp eq ptr %5320, %35
  br i1 %5321, label %5322, label %5306, !llvm.loop !294

5322:                                             ; preds = %5318, %5303
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #19
  br label %5323

5323:                                             ; preds = %101, %97, %88, %5322, %30
  %5324 = load i32, ptr %33, align 8
  %5325 = trunc i32 %5324 to i16
  switch i16 %5325, label %5332 [
    i16 12, label %5326
    i16 10, label %5327
  ]

5326:                                             ; preds = %5323
  store i64 0, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %5332

5327:                                             ; preds = %5323
  %5328 = load i64, ptr @call_used_reg_set, align 8, !tbaa !40
  %5329 = xor i64 %5328, -1
  %5330 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %5331 = and i64 %5330, %5329
  store i64 %5331, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %5332

5332:                                             ; preds = %5326, %5327, %5323, %197
  %5333 = load ptr, ptr %31, align 8, !tbaa !6
  %5334 = icmp eq ptr %5333, null
  br i1 %5334, label %5335, label %30, !llvm.loop !295

5335:                                             ; preds = %5332, %24
  %5336 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  call void @free(ptr noundef %5336)
  call void @bitmap_clear(ptr noundef nonnull @reg_has_output_reload) #19
  ret void
}

declare zeroext i8 @bitmap_clear_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @df_get_live_in(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_fmt_e_stat(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @df_insn_rescan_debug_internal(ptr noundef) local_unnamed_addr #3

declare ptr @simplify_replace_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @replace_pseudos_in(ptr nocapture noundef %0, i32 noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = load ptr, ptr %0, align 8, !tbaa !6
  %5 = icmp eq ptr %4, null
  br i1 %5, label %103, label %6

6:                                                ; preds = %3, %60
  %7 = phi ptr [ %64, %60 ], [ %4, %3 ]
  %8 = phi i32 [ %63, %60 ], [ %1, %3 ]
  %9 = phi ptr [ %61, %60 ], [ %0, %3 ]
  br label %10

10:                                               ; preds = %6, %22
  %11 = phi ptr [ %7, %6 ], [ %19, %22 ]
  %12 = load i32, ptr %11, align 8
  %13 = trunc i32 %12 to i16
  switch i16 %13, label %66 [
    i16 37, label %14
    i16 43, label %60
  ]

14:                                               ; preds = %10
  %15 = getelementptr i8, ptr %11, i64 8
  %16 = load i32, ptr %15, align 8, !tbaa !17
  %17 = icmp ult i32 %16, 53
  br i1 %17, label %103, label %18

18:                                               ; preds = %14
  %19 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %11, i32 noundef %8, ptr noundef %2, i8 noundef zeroext 0)
  %20 = load ptr, ptr %9, align 8, !tbaa !6
  %21 = icmp eq ptr %19, %20
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  store ptr %19, ptr %9, align 8, !tbaa !6
  %23 = icmp eq ptr %19, null
  br i1 %23, label %103, label %10

24:                                               ; preds = %18
  %25 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %26 = zext i32 %16 to i64
  %27 = getelementptr inbounds ptr, ptr %25, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !6
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %101

30:                                               ; preds = %24
  %31 = load ptr, ptr @reg_equiv_mem, align 8, !tbaa !6
  %32 = getelementptr inbounds ptr, ptr %31, i64 %26
  %33 = load ptr, ptr %32, align 8, !tbaa !6
  %34 = icmp eq ptr %33, null
  br i1 %34, label %35, label %101

35:                                               ; preds = %30
  %36 = load ptr, ptr @reg_equiv_address, align 8, !tbaa !6
  %37 = getelementptr inbounds ptr, ptr %36, i64 %26
  %38 = load ptr, ptr %37, align 8, !tbaa !6
  %39 = icmp eq ptr %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %35
  %41 = load i32, ptr %19, align 8
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 255
  %44 = tail call ptr @gen_rtx_MEM(i32 noundef %43, ptr noundef nonnull %38) #19
  br label %101

45:                                               ; preds = %35
  %46 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %47 = getelementptr inbounds ptr, ptr %46, i64 %26
  %48 = load ptr, ptr %47, align 8, !tbaa !6
  %49 = load i32, ptr %48, align 8
  %50 = and i32 %49, 65535
  %51 = icmp eq i32 %50, 37
  br i1 %51, label %52, label %101

52:                                               ; preds = %45
  %53 = getelementptr i8, ptr %48, i64 8
  %54 = load i32, ptr %53, align 8, !tbaa !17
  %55 = icmp eq i32 %54, %16
  br i1 %55, label %56, label %101

56:                                               ; preds = %52
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 621, ptr noundef nonnull @.str.2) #19
  %57 = load ptr, ptr @regno_reg_rtx, align 8, !tbaa !6
  %58 = getelementptr inbounds ptr, ptr %57, i64 %26
  %59 = load ptr, ptr %58, align 8, !tbaa !6
  br label %101

60:                                               ; preds = %10
  %61 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1
  %62 = lshr i32 %12, 16
  %63 = and i32 %62, 255
  %64 = load ptr, ptr %61, align 8, !tbaa !6
  %65 = icmp eq ptr %64, null
  br i1 %65, label %103, label %6

66:                                               ; preds = %10
  %67 = and i32 %12, 65535
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %68
  %70 = load i8, ptr %69, align 1, !tbaa !17
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %103, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %68
  %74 = load ptr, ptr %73, align 8, !tbaa !6
  %75 = getelementptr inbounds %struct.rtx_def, ptr %11, i64 0, i32 1
  %76 = zext i8 %70 to i64
  br label %77

77:                                               ; preds = %72, %97
  %78 = phi i64 [ 0, %72 ], [ %98, %97 ]
  %79 = phi ptr [ %74, %72 ], [ %99, %97 ]
  %80 = load i8, ptr %79, align 1, !tbaa !17
  switch i8 %80, label %97 [
    i8 101, label %86
    i8 69, label %81
  ]

81:                                               ; preds = %77
  %82 = getelementptr inbounds [1 x %union.rtunion_def], ptr %75, i64 0, i64 %78
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = load i32, ptr %83, align 8, !tbaa !112
  %85 = icmp sgt i32 %84, 0
  br i1 %85, label %88, label %97

86:                                               ; preds = %77
  %87 = getelementptr inbounds [1 x %union.rtunion_def], ptr %75, i64 0, i64 %78
  tail call fastcc void @replace_pseudos_in(ptr noundef nonnull %87, i32 noundef %8, ptr noundef %2)
  br label %97

88:                                               ; preds = %81, %88
  %89 = phi i64 [ %92, %88 ], [ 0, %81 ]
  %90 = phi ptr [ %93, %88 ], [ %83, %81 ]
  %91 = getelementptr inbounds %struct.rtvec_def, ptr %90, i64 0, i32 1, i64 %89
  tail call fastcc void @replace_pseudos_in(ptr noundef nonnull %91, i32 noundef %8, ptr noundef %2)
  %92 = add nuw nsw i64 %89, 1
  %93 = load ptr, ptr %82, align 8, !tbaa !17
  %94 = load i32, ptr %93, align 8, !tbaa !112
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %92, %95
  br i1 %96, label %88, label %97, !llvm.loop !296

97:                                               ; preds = %88, %81, %77, %86
  %98 = add nuw nsw i64 %78, 1
  %99 = getelementptr inbounds i8, ptr %79, i64 1
  %100 = icmp eq i64 %98, %76
  br i1 %100, label %103, label %77, !llvm.loop !297

101:                                              ; preds = %56, %52, %45, %30, %24, %40
  %102 = phi ptr [ %44, %40 ], [ %28, %24 ], [ %33, %30 ], [ %48, %45 ], [ %48, %52 ], [ %59, %56 ]
  store ptr %102, ptr %9, align 8, !tbaa !6
  br label %103

103:                                              ; preds = %60, %22, %14, %97, %101, %3, %66
  ret void
}

declare ptr @delete_insn(ptr noundef) local_unnamed_addr #3

declare void @cleanup_subreg_operands(ptr noundef) local_unnamed_addr #3

declare i32 @asm_noperands(ptr noundef) local_unnamed_addr #3

declare void @extract_insn(ptr noundef) local_unnamed_addr #3

declare i32 @constrain_operands(i32 noundef) local_unnamed_addr #3

declare void @error_for_asm(ptr noundef, ptr noundef, ...) local_unnamed_addr #3

declare zeroext i8 @df_regs_ever_live_p(i32 noundef) local_unnamed_addr #3

declare zeroext i8 @warning(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare void @free_EXPR_LIST_list(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @fixup_abnormal_edges() local_unnamed_addr #9 {
  %1 = load ptr, ptr @cfun, align 8, !tbaa !6
  %2 = getelementptr inbounds %struct.function, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !52
  %4 = load ptr, ptr %3, align 8, !tbaa !56
  %5 = getelementptr inbounds %struct.basic_block_def, ptr %4, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !58
  %7 = getelementptr inbounds %struct.control_flow_graph, ptr %3, i64 0, i32 1
  %8 = load ptr, ptr %7, align 8, !tbaa !57
  %9 = icmp eq ptr %6, %8
  br i1 %9, label %148, label %10

10:                                               ; preds = %0, %138
  %11 = phi ptr [ %141, %138 ], [ %6, %0 ]
  %12 = phi i8 [ %139, %138 ], [ 0, %0 ]
  %13 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 1
  br label %14

14:                                               ; preds = %10, %38
  %15 = phi i32 [ 0, %10 ], [ %39, %38 ]
  %16 = load ptr, ptr %13, align 8, !tbaa !6
  %17 = icmp eq ptr %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = load i32, ptr %16, align 8, !tbaa !63
  br label %20

20:                                               ; preds = %18, %14
  %21 = phi i32 [ %19, %18 ], [ 0, %14 ]
  %22 = icmp eq i32 %21, %15
  br i1 %22, label %138, label %23

23:                                               ; preds = %20
  %24 = zext i32 %15 to i64
  %25 = getelementptr inbounds %struct.VEC_edge_base, ptr %16, i64 0, i32 2, i64 %24
  %26 = load ptr, ptr %25, align 8, !tbaa !6
  %27 = getelementptr inbounds %struct.edge_def, ptr %26, i64 0, i32 7
  %28 = load i32, ptr %27, align 8, !tbaa !65
  %29 = and i32 %28, 4
  %30 = icmp ne i32 %29, 0
  %31 = and i32 %28, 10
  %32 = icmp eq i32 %31, 10
  %33 = or i1 %30, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %23
  %35 = load i32, ptr %16, align 8, !tbaa !63
  %36 = icmp ult i32 %15, %35
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  tail call void @fancy_abort(ptr noundef nonnull @.str.8, i32 noundef 738, ptr noundef nonnull @.str.2) #19
  br label %38

38:                                               ; preds = %34, %37
  %39 = add i32 %15, 1
  br label %14, !llvm.loop !298

40:                                               ; preds = %23
  %41 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 7
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = getelementptr inbounds %struct.rtl_bb_info, ptr %42, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !299
  %45 = load i32, ptr %44, align 8
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 10
  br i1 %47, label %138, label %48

48:                                               ; preds = %40
  %49 = tail call zeroext i8 @can_throw_internal(ptr noundef nonnull %44) #19
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %138

51:                                               ; preds = %48
  %52 = load ptr, ptr %41, align 8, !tbaa !17
  %53 = getelementptr inbounds %struct.rtl_bb_info, ptr %52, i64 0, i32 1
  br label %54

54:                                               ; preds = %66, %51
  %55 = phi ptr [ %53, %51 ], [ %67, %66 ]
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = load i32, ptr %56, align 8
  %58 = trunc i32 %57 to i16
  switch i16 %58, label %68 [
    i16 8, label %59
    i16 13, label %59
  ]

59:                                               ; preds = %54, %54
  %60 = tail call zeroext i8 @can_throw_internal(ptr noundef nonnull %56) #19
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = load ptr, ptr %41, align 8, !tbaa !17
  %64 = load ptr, ptr %63, align 8, !tbaa !301
  %65 = icmp eq ptr %56, %64
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1, i32 0, i32 0, i64 1
  br label %54, !llvm.loop !302

68:                                               ; preds = %54, %59, %62
  %69 = load i32, ptr %56, align 8
  %70 = and i32 %69, 65535
  %71 = icmp eq i32 %70, 10
  br i1 %71, label %75, label %72

72:                                               ; preds = %68
  %73 = tail call zeroext i8 @can_throw_internal(ptr noundef nonnull %56) #19
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %136, label %75

75:                                               ; preds = %72, %68
  %76 = load ptr, ptr %41, align 8, !tbaa !17
  %77 = getelementptr inbounds %struct.rtl_bb_info, ptr %76, i64 0, i32 1
  %78 = load ptr, ptr %77, align 8, !tbaa !299
  %79 = getelementptr inbounds %struct.rtx_def, ptr %78, i64 0, i32 1, i32 0, i32 0, i64 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  store ptr %56, ptr %77, align 8, !tbaa !299
  %81 = getelementptr inbounds %struct.rtx_def, ptr %56, i64 0, i32 1, i32 0, i32 0, i64 2
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  br label %83

83:                                               ; preds = %75, %104
  %84 = phi i32 [ 0, %75 ], [ %105, %104 ]
  %85 = load ptr, ptr %13, align 8, !tbaa !6
  %86 = icmp eq ptr %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %83
  %88 = load i32, ptr %85, align 8, !tbaa !63
  br label %89

89:                                               ; preds = %87, %83
  %90 = phi i32 [ %88, %87 ], [ 0, %83 ]
  %91 = icmp eq i32 %90, %84
  br i1 %91, label %106, label %92

92:                                               ; preds = %89
  %93 = zext i32 %84 to i64
  %94 = getelementptr inbounds %struct.VEC_edge_base, ptr %85, i64 0, i32 2, i64 %93
  %95 = load ptr, ptr %94, align 8, !tbaa !6
  %96 = getelementptr inbounds %struct.edge_def, ptr %95, i64 0, i32 7
  %97 = load i32, ptr %96, align 8, !tbaa !65
  %98 = and i32 %97, 1
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %92
  %101 = load i32, ptr %85, align 8, !tbaa !63
  %102 = icmp ult i32 %84, %101
  br i1 %102, label %104, label %103

103:                                              ; preds = %100
  tail call void @fancy_abort(ptr noundef nonnull @.str.8, i32 noundef 738, ptr noundef nonnull @.str.2) #19
  br label %104

104:                                              ; preds = %100, %103
  %105 = add i32 %84, 1
  br label %83, !llvm.loop !303

106:                                              ; preds = %89, %92
  %107 = phi ptr [ %95, %92 ], [ null, %89 ]
  %108 = icmp ne ptr %82, null
  %109 = icmp ne ptr %82, %80
  %110 = select i1 %108, i1 %109, i1 false
  br i1 %110, label %111, label %138

111:                                              ; preds = %106, %131
  %112 = phi i8 [ %132, %131 ], [ %12, %106 ]
  %113 = phi ptr [ %115, %131 ], [ %82, %106 ]
  %114 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1, i32 0, i32 0, i64 2
  %115 = load ptr, ptr %114, align 8, !tbaa !17
  %116 = load i32, ptr %113, align 8
  %117 = trunc i32 %116 to i16
  switch i16 %117, label %129 [
    i16 8, label %118
    i16 7, label %118
    i16 9, label %118
    i16 10, label %118
    i16 11, label %131
  ]

118:                                              ; preds = %111, %111, %111, %111
  %119 = tail call ptr @delete_insn(ptr noundef nonnull %113) #19
  %120 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 1
  %121 = load ptr, ptr %120, align 8, !tbaa !17
  %122 = load i32, ptr %121, align 8
  %123 = and i32 %122, 65535
  %124 = icmp eq i32 %123, 24
  br i1 %124, label %131, label %125

125:                                              ; preds = %118
  %126 = load i32, ptr %113, align 8
  %127 = and i32 %126, -134217729
  store i32 %127, ptr %113, align 8
  %128 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %128, i8 0, i64 16, i1 false)
  tail call void @insert_insn_on_edge(ptr noundef nonnull %113, ptr noundef %107) #19
  br label %131

129:                                              ; preds = %111
  %130 = getelementptr inbounds %struct.rtx_def, ptr %113, i64 0, i32 1, i32 0, i32 1
  store ptr null, ptr %130, align 8, !tbaa !17
  br label %131

131:                                              ; preds = %111, %129, %118, %125
  %132 = phi i8 [ 1, %125 ], [ %112, %118 ], [ %112, %129 ], [ %112, %111 ]
  %133 = icmp ne ptr %115, null
  %134 = icmp ne ptr %115, %80
  %135 = select i1 %133, i1 %134, i1 false
  br i1 %135, label %111, label %138, !llvm.loop !304

136:                                              ; preds = %72
  %137 = tail call zeroext i8 @purge_dead_edges(ptr noundef %11) #19
  br label %138

138:                                              ; preds = %20, %131, %106, %136, %48, %40
  %139 = phi i8 [ %12, %40 ], [ %12, %48 ], [ %12, %136 ], [ %12, %106 ], [ %132, %131 ], [ %12, %20 ]
  %140 = getelementptr inbounds %struct.basic_block_def, ptr %11, i64 0, i32 6
  %141 = load ptr, ptr %140, align 8, !tbaa !58
  %142 = load ptr, ptr @cfun, align 8, !tbaa !6
  %143 = getelementptr inbounds %struct.function, ptr %142, i64 0, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !52
  %145 = getelementptr inbounds %struct.control_flow_graph, ptr %144, i64 0, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !57
  %147 = icmp eq ptr %141, %146
  br i1 %147, label %148, label %10, !llvm.loop !305

148:                                              ; preds = %138, %0
  %149 = phi i8 [ 0, %0 ], [ %139, %138 ]
  %150 = phi ptr [ %3, %0 ], [ %144, %138 ]
  %151 = load i32, ptr @flag_non_call_exceptions, align 4, !tbaa !21
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %struct.control_flow_graph, ptr %150, i64 0, i32 5
  %155 = load i32, ptr %154, align 8, !tbaa !306
  %156 = tail call ptr @sbitmap_alloc(i32 noundef %155) #19
  tail call void @sbitmap_ones(ptr noundef %156) #19
  tail call void @find_many_sub_basic_blocks(ptr noundef %156) #19
  %157 = load ptr, ptr %156, align 8, !tbaa !307
  tail call void @free(ptr noundef %157)
  tail call void @free(ptr noundef %156)
  br label %158

158:                                              ; preds = %153, %148
  %159 = icmp eq i8 %149, 0
  br i1 %159, label %161, label %160

160:                                              ; preds = %158
  tail call void @commit_edge_insertions() #19
  br label %161

161:                                              ; preds = %160, %158
  ret void
}

declare void @unshare_all_rtl_again(ptr noundef) local_unnamed_addr #3

declare void @df_ref_change_reg_with_loc(i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @get_mode_alignment(i32 noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_set_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @ira_reuse_stack_slot(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @ira_mark_new_stack_slot(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @adjust_address_1(ptr noundef, i32 noundef, i64 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @set_mem_attrs_for_spill(ptr noundef) local_unnamed_addr #3

declare ptr @decode_asm_operands(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @regclass_for_constraint(i32 noundef) local_unnamed_addr #3

declare i32 @lookup_constraint(ptr noundef) local_unnamed_addr #3

declare void @ira_mark_allocation_change(i32 noundef) local_unnamed_addr #3

declare zeroext i8 @ira_reassign_pseudos(ptr noundef, i32 noundef, i64 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_and_compl_into(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @reg_set_to_hard_reg_set(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i64 @ix86_initial_elimination_offset(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @set_label_offsets(ptr noundef readonly %0, ptr noundef %1, i32 noundef %2) unnamed_addr #9 {
  br label %4

4:                                                ; preds = %210, %3
  %5 = phi ptr [ %0, %3 ], [ %211, %210 ]
  %6 = load i32, ptr %5, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %245 [
    i16 44, label %8
    i16 12, label %14
    i16 9, label %144
    i16 8, label %147
    i16 10, label %147
    i16 15, label %163
    i16 20, label %163
    i16 21, label %163
    i16 23, label %182
  ]

8:                                                ; preds = %4
  %9 = and i32 %6, 134217728
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %245

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  br label %14

14:                                               ; preds = %4, %11
  %15 = phi ptr [ %13, %11 ], [ %5, %4 ]
  %16 = load ptr, ptr @offsets_known_at, align 8, !tbaa !6
  %17 = getelementptr inbounds %struct.rtx_def, ptr %15, i64 1, i32 1
  %18 = load i32, ptr %17, align 8, !tbaa !17
  %19 = load i32, ptr @first_label_num, align 4, !tbaa !21
  %20 = sub nsw i32 %18, %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, ptr %16, i64 %21
  %23 = load i8, ptr %22, align 1, !tbaa !17
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %73

25:                                               ; preds = %14
  %26 = icmp eq i32 %2, 0
  %27 = load ptr, ptr @reg_eliminate, align 8
  %28 = load ptr, ptr @offsets_at, align 8, !tbaa !6
  %29 = getelementptr inbounds [4 x i64], ptr %28, i64 %21, i64 0
  br i1 %26, label %46, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.elim_table, ptr %27, i64 0, i32 2
  %32 = load i64, ptr %31, align 8, !tbaa !40
  store i64 %32, ptr %29, align 8, !tbaa !40
  %33 = getelementptr inbounds %struct.elim_table, ptr %27, i64 1, i32 2
  %34 = load i64, ptr %33, align 8, !tbaa !40
  %35 = load i32, ptr %17, align 8, !tbaa !17
  %36 = sub nsw i32 %35, %19
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [4 x i64], ptr %28, i64 %37, i64 1
  store i64 %34, ptr %38, align 8, !tbaa !40
  %39 = getelementptr inbounds %struct.elim_table, ptr %27, i64 2, i32 2
  %40 = load i64, ptr %39, align 8, !tbaa !40
  %41 = load i32, ptr %17, align 8, !tbaa !17
  %42 = sub nsw i32 %41, %19
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [4 x i64], ptr %28, i64 %43, i64 2
  store i64 %40, ptr %44, align 8, !tbaa !40
  %45 = getelementptr inbounds %struct.elim_table, ptr %27, i64 3, i32 2
  br label %62

46:                                               ; preds = %25
  %47 = getelementptr inbounds %struct.elim_table, ptr %27, i64 0, i32 5
  %48 = load i64, ptr %47, align 8, !tbaa !40
  store i64 %48, ptr %29, align 8, !tbaa !40
  %49 = getelementptr inbounds %struct.elim_table, ptr %27, i64 1, i32 5
  %50 = load i64, ptr %49, align 8, !tbaa !40
  %51 = load i32, ptr %17, align 8, !tbaa !17
  %52 = sub nsw i32 %51, %19
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [4 x i64], ptr %28, i64 %53, i64 1
  store i64 %50, ptr %54, align 8, !tbaa !40
  %55 = getelementptr inbounds %struct.elim_table, ptr %27, i64 2, i32 5
  %56 = load i64, ptr %55, align 8, !tbaa !40
  %57 = load i32, ptr %17, align 8, !tbaa !17
  %58 = sub nsw i32 %57, %19
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [4 x i64], ptr %28, i64 %59, i64 2
  store i64 %56, ptr %60, align 8, !tbaa !40
  %61 = getelementptr inbounds %struct.elim_table, ptr %27, i64 3, i32 5
  br label %62

62:                                               ; preds = %30, %46
  %63 = phi ptr [ %45, %30 ], [ %61, %46 ]
  %64 = load i64, ptr %63, align 8, !tbaa !40
  %65 = load i32, ptr %17, align 8, !tbaa !17
  %66 = sub nsw i32 %65, %19
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [4 x i64], ptr %28, i64 %67, i64 3
  store i64 %64, ptr %68, align 8, !tbaa !40
  %69 = load i32, ptr %17, align 8, !tbaa !17
  %70 = sub nsw i32 %69, %19
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, ptr %16, i64 %71
  store i8 1, ptr %72, align 1, !tbaa !17
  br label %245

73:                                               ; preds = %14
  %74 = icmp eq ptr %15, %1
  br i1 %74, label %75, label %85

75:                                               ; preds = %73
  %76 = tail call ptr @prev_nonnote_insn(ptr noundef %1) #19
  %77 = icmp eq ptr %76, null
  br i1 %77, label %85, label %78

78:                                               ; preds = %75
  %79 = load i32, ptr %76, align 8
  %80 = and i32 %79, 65535
  %81 = icmp eq i32 %80, 11
  br i1 %81, label %82, label %85

82:                                               ; preds = %78
  %83 = getelementptr i8, ptr %1, i64 56
  %84 = load i32, ptr %83, align 8, !tbaa !17
  tail call fastcc void @set_offsets_for_label(i32 %84)
  br label %245

85:                                               ; preds = %78, %75, %73
  %86 = load ptr, ptr @offsets_at, align 8, !tbaa !6
  %87 = load i32, ptr @first_label_num, align 4, !tbaa !21
  %88 = icmp eq i32 %2, 0
  %89 = load ptr, ptr @reg_eliminate, align 8
  %90 = load i32, ptr %17, align 8, !tbaa !17
  %91 = sub nsw i32 %90, %87
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [4 x i64], ptr %86, i64 %92, i64 0
  %94 = load i64, ptr %93, align 8, !tbaa !40
  %95 = getelementptr inbounds %struct.elim_table, ptr %89, i64 0, i32 2
  %96 = getelementptr inbounds %struct.elim_table, ptr %89, i64 0, i32 5
  %97 = select i1 %88, ptr %96, ptr %95
  %98 = load i64, ptr %97, align 8, !tbaa !40
  %99 = icmp eq i64 %94, %98
  br i1 %99, label %105, label %100

100:                                              ; preds = %85
  %101 = getelementptr inbounds %struct.elim_table, ptr %89, i64 0, i32 3
  store i32 0, ptr %101, align 8, !tbaa !103
  %102 = load i32, ptr %17, align 8, !tbaa !17
  %103 = sub nsw i32 %102, %87
  %104 = sext i32 %103 to i64
  br label %105

105:                                              ; preds = %85, %100
  %106 = phi i64 [ %92, %85 ], [ %104, %100 ]
  %107 = getelementptr inbounds [4 x i64], ptr %86, i64 %106, i64 1
  %108 = load i64, ptr %107, align 8, !tbaa !40
  %109 = getelementptr inbounds %struct.elim_table, ptr %89, i64 1, i32 2
  %110 = getelementptr inbounds %struct.elim_table, ptr %89, i64 1, i32 5
  %111 = select i1 %88, ptr %110, ptr %109
  %112 = load i64, ptr %111, align 8, !tbaa !40
  %113 = icmp eq i64 %108, %112
  br i1 %113, label %119, label %114

114:                                              ; preds = %105
  %115 = getelementptr inbounds %struct.elim_table, ptr %89, i64 1, i32 3
  store i32 0, ptr %115, align 8, !tbaa !103
  %116 = load i32, ptr %17, align 8, !tbaa !17
  %117 = sub nsw i32 %116, %87
  %118 = sext i32 %117 to i64
  br label %119

119:                                              ; preds = %114, %105
  %120 = phi i64 [ %118, %114 ], [ %106, %105 ]
  %121 = getelementptr inbounds [4 x i64], ptr %86, i64 %120, i64 2
  %122 = load i64, ptr %121, align 8, !tbaa !40
  %123 = getelementptr inbounds %struct.elim_table, ptr %89, i64 2, i32 2
  %124 = getelementptr inbounds %struct.elim_table, ptr %89, i64 2, i32 5
  %125 = select i1 %88, ptr %124, ptr %123
  %126 = load i64, ptr %125, align 8, !tbaa !40
  %127 = icmp eq i64 %122, %126
  br i1 %127, label %133, label %128

128:                                              ; preds = %119
  %129 = getelementptr inbounds %struct.elim_table, ptr %89, i64 2, i32 3
  store i32 0, ptr %129, align 8, !tbaa !103
  %130 = load i32, ptr %17, align 8, !tbaa !17
  %131 = sub nsw i32 %130, %87
  %132 = sext i32 %131 to i64
  br label %133

133:                                              ; preds = %128, %119
  %134 = phi i64 [ %132, %128 ], [ %120, %119 ]
  %135 = getelementptr inbounds [4 x i64], ptr %86, i64 %134, i64 3
  %136 = load i64, ptr %135, align 8, !tbaa !40
  %137 = getelementptr inbounds %struct.elim_table, ptr %89, i64 3, i32 2
  %138 = getelementptr inbounds %struct.elim_table, ptr %89, i64 3, i32 5
  %139 = select i1 %88, ptr %138, ptr %137
  %140 = load i64, ptr %139, align 8, !tbaa !40
  %141 = icmp eq i64 %136, %140
  br i1 %141, label %245, label %142

142:                                              ; preds = %133
  %143 = getelementptr inbounds %struct.elim_table, ptr %89, i64 3, i32 3
  store i32 0, ptr %143, align 8, !tbaa !103
  br label %245

144:                                              ; preds = %4
  %145 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 1
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  tail call fastcc void @set_label_offsets(ptr noundef %146, ptr noundef %1, i32 noundef %2)
  br label %147

147:                                              ; preds = %4, %4, %144
  %148 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 1, i32 1, i32 0, i32 0, i64 1
  %149 = load ptr, ptr %148, align 8, !tbaa !17
  %150 = icmp eq ptr %149, null
  br i1 %150, label %245, label %151

151:                                              ; preds = %147, %159
  %152 = phi ptr [ %161, %159 ], [ %149, %147 ]
  %153 = load i32, ptr %152, align 8
  %154 = and i32 %153, 16711680
  %155 = icmp eq i32 %154, 655360
  br i1 %155, label %156, label %159

156:                                              ; preds = %151
  %157 = getelementptr inbounds %struct.rtx_def, ptr %152, i64 0, i32 1
  %158 = load ptr, ptr %157, align 8, !tbaa !17
  tail call fastcc void @set_label_offsets(ptr noundef %158, ptr noundef %1, i32 noundef 1)
  br label %159

159:                                              ; preds = %151, %156
  %160 = getelementptr inbounds %struct.rtx_def, ptr %152, i64 0, i32 1, i32 0, i32 0, i64 1
  %161 = load ptr, ptr %160, align 8, !tbaa !17
  %162 = icmp eq ptr %161, null
  br i1 %162, label %245, label %151, !llvm.loop !309

163:                                              ; preds = %4, %4, %4
  %164 = and i32 %6, 65535
  %165 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %166 = icmp eq i32 %164, 21
  %167 = zext i1 %166 to i64
  %168 = getelementptr inbounds [1 x %union.rtunion_def], ptr %165, i64 0, i64 %167
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = load i32, ptr %169, align 8, !tbaa !112
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %245, label %172

172:                                              ; preds = %163, %172
  %173 = phi i64 [ %177, %172 ], [ 0, %163 ]
  %174 = phi ptr [ %178, %172 ], [ %169, %163 ]
  %175 = getelementptr inbounds %struct.rtvec_def, ptr %174, i64 0, i32 1, i64 %173
  %176 = load ptr, ptr %175, align 8, !tbaa !6
  tail call fastcc void @set_label_offsets(ptr noundef %176, ptr noundef %1, i32 noundef %2)
  %177 = add nuw nsw i64 %173, 1
  %178 = load ptr, ptr %168, align 8, !tbaa !17
  %179 = load i32, ptr %178, align 8, !tbaa !112
  %180 = zext i32 %179 to i64
  %181 = icmp ult i64 %177, %180
  br i1 %181, label %172, label %245, !llvm.loop !310

182:                                              ; preds = %4
  %183 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %184 = load ptr, ptr %183, align 8, !tbaa !17
  %185 = load ptr, ptr @global_rtl, align 16, !tbaa !6
  %186 = icmp eq ptr %184, %185
  br i1 %186, label %187, label %245

187:                                              ; preds = %182
  %188 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1, i32 0, i32 0, i64 1
  %189 = load ptr, ptr %188, align 8, !tbaa !17
  %190 = load i32, ptr %189, align 8
  %191 = trunc i32 %190 to i16
  switch i16 %191, label %212 [
    i16 36, label %245
    i16 27, label %245
    i16 44, label %210
    i16 47, label %192
  ]

192:                                              ; preds = %187
  %193 = getelementptr inbounds %struct.rtx_def, ptr %189, i64 0, i32 1, i32 0, i32 0, i64 1
  %194 = load ptr, ptr %193, align 8, !tbaa !17
  %195 = load i32, ptr %194, align 8
  %196 = trunc i32 %195 to i16
  switch i16 %196, label %212 [
    i16 44, label %197
    i16 36, label %201
    i16 27, label %201
  ]

197:                                              ; preds = %192
  %198 = getelementptr inbounds %struct.rtx_def, ptr %194, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !17
  tail call fastcc void @set_label_offsets(ptr noundef %199, ptr noundef %1, i32 noundef %2)
  %200 = load ptr, ptr %188, align 8, !tbaa !17
  br label %201

201:                                              ; preds = %192, %192, %197
  %202 = phi ptr [ %189, %192 ], [ %189, %192 ], [ %200, %197 ]
  %203 = getelementptr inbounds %struct.rtx_def, ptr %202, i64 0, i32 1, i32 0, i32 0, i64 2
  %204 = load ptr, ptr %203, align 8, !tbaa !17
  %205 = load i32, ptr %204, align 8
  %206 = trunc i32 %205 to i16
  switch i16 %206, label %212 [
    i16 44, label %207
    i16 36, label %245
    i16 27, label %245
  ]

207:                                              ; preds = %201
  %208 = getelementptr inbounds %struct.rtx_def, ptr %204, i64 0, i32 1
  %209 = load ptr, ptr %208, align 8, !tbaa !17
  br label %210

210:                                              ; preds = %207, %187
  %211 = phi ptr [ %209, %207 ], [ %189, %187 ]
  br label %4

212:                                              ; preds = %201, %192, %187
  %213 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %214 = getelementptr inbounds %struct.elim_table, ptr %213, i64 0, i32 5
  %215 = load i64, ptr %214, align 8, !tbaa !124
  %216 = getelementptr inbounds %struct.elim_table, ptr %213, i64 0, i32 2
  %217 = load i64, ptr %216, align 8, !tbaa !123
  %218 = icmp eq i64 %215, %217
  br i1 %218, label %221, label %219

219:                                              ; preds = %212
  %220 = getelementptr inbounds %struct.elim_table, ptr %213, i64 0, i32 3
  store i32 0, ptr %220, align 8, !tbaa !103
  br label %221

221:                                              ; preds = %212, %219
  %222 = getelementptr inbounds %struct.elim_table, ptr %213, i64 1, i32 5
  %223 = load i64, ptr %222, align 8, !tbaa !124
  %224 = getelementptr inbounds %struct.elim_table, ptr %213, i64 1, i32 2
  %225 = load i64, ptr %224, align 8, !tbaa !123
  %226 = icmp eq i64 %223, %225
  br i1 %226, label %229, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.elim_table, ptr %213, i64 1, i32 3
  store i32 0, ptr %228, align 8, !tbaa !103
  br label %229

229:                                              ; preds = %227, %221
  %230 = getelementptr inbounds %struct.elim_table, ptr %213, i64 2, i32 5
  %231 = load i64, ptr %230, align 8, !tbaa !124
  %232 = getelementptr inbounds %struct.elim_table, ptr %213, i64 2, i32 2
  %233 = load i64, ptr %232, align 8, !tbaa !123
  %234 = icmp eq i64 %231, %233
  br i1 %234, label %237, label %235

235:                                              ; preds = %229
  %236 = getelementptr inbounds %struct.elim_table, ptr %213, i64 2, i32 3
  store i32 0, ptr %236, align 8, !tbaa !103
  br label %237

237:                                              ; preds = %235, %229
  %238 = getelementptr inbounds %struct.elim_table, ptr %213, i64 3, i32 5
  %239 = load i64, ptr %238, align 8, !tbaa !124
  %240 = getelementptr inbounds %struct.elim_table, ptr %213, i64 3, i32 2
  %241 = load i64, ptr %240, align 8, !tbaa !123
  %242 = icmp eq i64 %239, %241
  br i1 %242, label %245, label %243

243:                                              ; preds = %237
  %244 = getelementptr inbounds %struct.elim_table, ptr %213, i64 3, i32 3
  store i32 0, ptr %244, align 8, !tbaa !103
  br label %245

245:                                              ; preds = %4, %201, %201, %187, %187, %182, %172, %159, %237, %243, %133, %142, %163, %147, %62, %82, %8
  ret void
}

declare void @for_each_eh_label(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @set_initial_eh_label_offset(ptr noundef %0) #9 {
  tail call fastcc void @set_label_offsets(ptr noundef %0, ptr noundef null, i32 noundef 1)
  ret void
}

declare ptr @prev_nonnote_insn(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @set_offsets_for_label(i32 %0) unnamed_addr #14 {
  store i32 0, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  %2 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %3 = load ptr, ptr @offsets_at, align 8, !tbaa !6
  %4 = load i32, ptr @first_label_num, align 4, !tbaa !21
  %5 = sub nsw i32 %0, %4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [4 x i64], ptr %3, i64 %6, i64 0
  %8 = load i64, ptr %7, align 8, !tbaa !40
  %9 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 6
  store i64 %8, ptr %9, align 8, !tbaa !125
  %10 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 5
  store i64 %8, ptr %10, align 8, !tbaa !124
  %11 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 3
  %12 = load i32, ptr %11, align 8, !tbaa !103
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 2
  %16 = load i64, ptr %15, align 8, !tbaa !123
  %17 = icmp eq i64 %8, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  store i32 1, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %19

19:                                               ; preds = %1, %14, %18
  %20 = phi i32 [ 0, %1 ], [ 0, %14 ], [ 1, %18 ]
  %21 = getelementptr inbounds [4 x i64], ptr %3, i64 %6, i64 1
  %22 = load i64, ptr %21, align 8, !tbaa !40
  %23 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 6
  store i64 %22, ptr %23, align 8, !tbaa !125
  %24 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 5
  store i64 %22, ptr %24, align 8, !tbaa !124
  %25 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 3
  %26 = load i32, ptr %25, align 8, !tbaa !103
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %19
  %29 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 2
  %30 = load i64, ptr %29, align 8, !tbaa !123
  %31 = icmp eq i64 %22, %30
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = add nuw nsw i32 %20, 1
  store i32 %33, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %34

34:                                               ; preds = %32, %28, %19
  %35 = phi i32 [ %20, %19 ], [ %20, %28 ], [ %33, %32 ]
  %36 = getelementptr inbounds [4 x i64], ptr %3, i64 %6, i64 2
  %37 = load i64, ptr %36, align 8, !tbaa !40
  %38 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 6
  store i64 %37, ptr %38, align 8, !tbaa !125
  %39 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 5
  store i64 %37, ptr %39, align 8, !tbaa !124
  %40 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 3
  %41 = load i32, ptr %40, align 8, !tbaa !103
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %49, label %43

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 2
  %45 = load i64, ptr %44, align 8, !tbaa !123
  %46 = icmp eq i64 %37, %45
  br i1 %46, label %49, label %47

47:                                               ; preds = %43
  %48 = add nuw nsw i32 %35, 1
  store i32 %48, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %49

49:                                               ; preds = %47, %43, %34
  %50 = phi i32 [ %35, %34 ], [ %35, %43 ], [ %48, %47 ]
  %51 = getelementptr inbounds [4 x i64], ptr %3, i64 %6, i64 3
  %52 = load i64, ptr %51, align 8, !tbaa !40
  %53 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 6
  store i64 %52, ptr %53, align 8, !tbaa !125
  %54 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 5
  store i64 %52, ptr %54, align 8, !tbaa !124
  %55 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 3
  %56 = load i32, ptr %55, align 8, !tbaa !103
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 2
  %60 = load i64, ptr %59, align 8, !tbaa !123
  %61 = icmp eq i64 %52, %60
  br i1 %61, label %64, label %62

62:                                               ; preds = %58
  %63 = add nuw nsw i32 %50, 1
  store i32 %63, ptr @num_not_at_initial_offset, align 4, !tbaa !21
  br label %64

64:                                               ; preds = %62, %58, %49
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @eliminate_regs_in_insn(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  %3 = alloca [30 x ptr], align 16
  %4 = alloca [30 x ptr], align 16
  %5 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1
  %6 = load i32, ptr %5, align 8, !tbaa !17
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = tail call i32 @recog(ptr noundef %10, ptr noundef nonnull %0, ptr noundef null) #19
  store i32 %11, ptr %5, align 8, !tbaa !17
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i32 [ %11, %8 ], [ %6, %2 ]
  %14 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = tail call i32 @asm_noperands(ptr noundef %15) #19
  %17 = icmp slt i32 %16, 0
  %18 = load i32, ptr %0, align 8
  %19 = and i32 %18, 65535
  %20 = add nsw i32 %19, -7
  %21 = icmp ult i32 %20, 4
  br i1 %21, label %22, label %33

22:                                               ; preds = %12
  %23 = load ptr, ptr %14, align 8, !tbaa !17
  %24 = load i32, ptr %23, align 8
  %25 = and i32 %24, 65535
  %26 = icmp eq i32 %25, 23
  br i1 %26, label %29, label %27

27:                                               ; preds = %22
  %28 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %23) #19
  br label %29

29:                                               ; preds = %22, %27
  %30 = phi ptr [ %28, %27 ], [ %23, %22 ]
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %3) #19
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %4) #19
  %31 = icmp slt i32 %13, 0
  %32 = select i1 %17, i1 %31, i1 false
  br i1 %32, label %36, label %56

33:                                               ; preds = %12
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %3) #19
  call void @llvm.lifetime.start.p0(i64 240, ptr nonnull %4) #19
  %34 = icmp slt i32 %13, 0
  %35 = select i1 %17, i1 %34, i1 false
  br i1 %35, label %36, label %383

36:                                               ; preds = %33, %29
  %37 = load ptr, ptr %14, align 8, !tbaa !17
  %38 = load i32, ptr %37, align 8
  %39 = trunc i32 %38 to i16
  switch i16 %39, label %40 [
    i16 24, label %45
    i16 25, label %45
    i16 20, label %45
    i16 21, label %45
    i16 16, label %45
  ]

40:                                               ; preds = %36
  %41 = load i32, ptr %0, align 8
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %42, 7
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 3227, ptr noundef nonnull @.str.2) #19
  br label %45

45:                                               ; preds = %36, %36, %36, %36, %36, %40, %44
  %46 = load i32, ptr %0, align 8
  %47 = and i32 %46, 65535
  %48 = icmp eq i32 %47, 7
  br i1 %48, label %49, label %826

49:                                               ; preds = %45
  %50 = load ptr, ptr %14, align 8, !tbaa !17
  %51 = getelementptr inbounds %struct.rtx_def, ptr %50, i64 0, i32 1, i32 0, i32 0, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %52, i32 noundef 0, ptr noundef nonnull %0, i8 noundef zeroext 0)
  %54 = load ptr, ptr %14, align 8, !tbaa !17
  %55 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 0, i64 1
  store ptr %53, ptr %55, align 8, !tbaa !17
  br label %826

56:                                               ; preds = %29
  %57 = icmp eq ptr %30, null
  br i1 %57, label %383, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = load i32, ptr %60, align 8
  %62 = and i32 %61, 65535
  %63 = icmp eq i32 %62, 37
  br i1 %63, label %64, label %383

64:                                               ; preds = %58
  %65 = getelementptr i8, ptr %60, i64 8
  %66 = load i32, ptr %65, align 8, !tbaa !17
  %67 = icmp ult i32 %66, 53
  br i1 %67, label %68, label %214

68:                                               ; preds = %64
  %69 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %70 = getelementptr inbounds %struct.elim_table, ptr %69, i64 0, i32 8
  %71 = load ptr, ptr %70, align 8, !tbaa !105
  %72 = icmp eq ptr %71, %60
  br i1 %72, label %73, label %190

73:                                               ; preds = %68
  %74 = getelementptr inbounds %struct.elim_table, ptr %69, i64 0, i32 3
  %75 = load i32, ptr %74, align 8, !tbaa !103
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %190, label %77

77:                                               ; preds = %210, %202, %194, %73
  %78 = phi i64 [ 0, %73 ], [ 1, %194 ], [ 2, %202 ], [ 3, %210 ]
  %79 = getelementptr inbounds %struct.elim_table, ptr %69, i64 %78
  %80 = load i32, ptr %79, align 8, !tbaa !85
  %81 = icmp eq i32 %80, 20
  br i1 %81, label %82, label %187

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.elim_table, ptr %69, i64 %78, i32 1
  %84 = load i32, ptr %83, align 4, !tbaa !88
  %85 = icmp eq i32 %84, 6
  br i1 %85, label %86, label %187

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1, i32 0, i32 0, i64 1
  %88 = getelementptr inbounds %struct.elim_table, ptr %69, i64 %78, i32 9
  %89 = load ptr, ptr %87, align 8, !tbaa !17
  %90 = load ptr, ptr %88, align 8, !tbaa !106
  %91 = icmp eq ptr %89, %90
  br i1 %91, label %149, label %92

92:                                               ; preds = %86, %137
  %93 = phi ptr [ %138, %137 ], [ %90, %86 ]
  %94 = phi ptr [ %142, %137 ], [ %89, %86 ]
  %95 = phi i64 [ %141, %137 ], [ 0, %86 ]
  %96 = phi ptr [ %140, %137 ], [ %0, %86 ]
  %97 = load i32, ptr %94, align 8
  %98 = and i32 %97, 65535
  %99 = icmp eq i32 %98, 49
  br i1 %99, label %100, label %111

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.rtx_def, ptr %94, i64 0, i32 1, i32 0, i32 0, i64 1
  %102 = load ptr, ptr %101, align 8, !tbaa !17
  %103 = load i32, ptr %102, align 8
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, 30
  br i1 %105, label %106, label %111

106:                                              ; preds = %100
  %107 = getelementptr inbounds %struct.rtx_def, ptr %94, i64 0, i32 1
  %108 = getelementptr inbounds %struct.rtx_def, ptr %102, i64 0, i32 1
  %109 = load i64, ptr %108, align 8, !tbaa !17
  %110 = add nsw i64 %109, %95
  br label %137

111:                                              ; preds = %100, %92
  %112 = tail call ptr @prev_nonnote_insn(ptr noundef %96) #19
  %113 = icmp eq ptr %112, null
  br i1 %113, label %144, label %114

114:                                              ; preds = %111
  %115 = load i32, ptr %112, align 8
  %116 = and i32 %115, 65535
  %117 = add nsw i32 %116, -7
  %118 = icmp ult i32 %117, 4
  br i1 %118, label %119, label %144

119:                                              ; preds = %114
  %120 = getelementptr inbounds %struct.rtx_def, ptr %112, i64 1
  %121 = load ptr, ptr %120, align 8, !tbaa !17
  %122 = load i32, ptr %121, align 8
  %123 = and i32 %122, 65535
  %124 = icmp eq i32 %123, 23
  br i1 %124, label %128, label %125

125:                                              ; preds = %119
  %126 = tail call ptr @single_set_2(ptr noundef nonnull %112, ptr noundef nonnull %121) #19
  %127 = icmp eq ptr %126, null
  br i1 %127, label %144, label %128

128:                                              ; preds = %119, %125
  %129 = phi ptr [ %126, %125 ], [ %121, %119 ]
  %130 = getelementptr inbounds %struct.rtx_def, ptr %129, i64 0, i32 1
  %131 = load ptr, ptr %130, align 8, !tbaa !17
  %132 = tail call i32 @rtx_equal_p(ptr noundef %131, ptr noundef nonnull %94) #19
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %144, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %struct.rtx_def, ptr %129, i64 0, i32 1, i32 0, i32 0, i64 1
  %136 = load ptr, ptr %88, align 8, !tbaa !106
  br label %137

137:                                              ; preds = %106, %134
  %138 = phi ptr [ %93, %106 ], [ %136, %134 ]
  %139 = phi ptr [ %107, %106 ], [ %135, %134 ]
  %140 = phi ptr [ %96, %106 ], [ %112, %134 ]
  %141 = phi i64 [ %110, %106 ], [ %95, %134 ]
  %142 = load ptr, ptr %139, align 8, !tbaa !17
  %143 = icmp eq ptr %142, %138
  br i1 %143, label %144, label %92

144:                                              ; preds = %137, %128, %125, %111, %114
  %145 = phi i64 [ %141, %137 ], [ %95, %128 ], [ %95, %125 ], [ %95, %111 ], [ %95, %114 ]
  %146 = phi ptr [ %138, %137 ], [ %94, %128 ], [ %94, %125 ], [ %94, %111 ], [ %94, %114 ]
  %147 = load ptr, ptr %88, align 8, !tbaa !106
  %148 = icmp eq ptr %146, %147
  br i1 %148, label %149, label %187

149:                                              ; preds = %86, %144
  %150 = phi i64 [ %145, %144 ], [ 0, %86 ]
  %151 = phi ptr [ %147, %144 ], [ %89, %86 ]
  %152 = getelementptr inbounds %struct.elim_table, ptr %69, i64 %78, i32 5
  %153 = load i64, ptr %152, align 8, !tbaa !124
  %154 = sub nsw i64 %150, %153
  %155 = tail call ptr @plus_constant(ptr noundef %151, i64 noundef %154) #19
  %156 = icmp eq i32 %1, 0
  br i1 %156, label %157, label %164

157:                                              ; preds = %149
  %158 = tail call ptr @copy_insn(ptr noundef %15) #19
  %159 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %160 = load ptr, ptr %159, align 8, !tbaa !17
  %161 = icmp eq ptr %160, null
  br i1 %161, label %164, label %162

162:                                              ; preds = %157
  %163 = tail call ptr @copy_insn_1(ptr noundef nonnull %160) #19
  store ptr %163, ptr %159, align 8, !tbaa !17
  br label %164

164:                                              ; preds = %157, %162, %149
  %165 = phi ptr [ %15, %149 ], [ %158, %162 ], [ %158, %157 ]
  store ptr %165, ptr %14, align 8, !tbaa !17
  %166 = load i32, ptr %0, align 8
  %167 = and i32 %166, 65535
  %168 = add nsw i32 %167, -7
  %169 = icmp ult i32 %168, 4
  br i1 %169, label %170, label %176

170:                                              ; preds = %164
  %171 = load i32, ptr %165, align 8
  %172 = and i32 %171, 65535
  %173 = icmp eq i32 %172, 23
  br i1 %173, label %176, label %174

174:                                              ; preds = %170
  %175 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %165) #19
  br label %176

176:                                              ; preds = %164, %170, %174
  %177 = phi ptr [ %175, %174 ], [ null, %164 ], [ %165, %170 ]
  %178 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1
  %179 = getelementptr inbounds %struct.rtx_def, ptr %177, i64 0, i32 1, i32 0, i32 0, i64 1
  %180 = tail call zeroext i8 @validate_change(ptr noundef nonnull %0, ptr noundef nonnull %179, ptr noundef %155, i8 noundef zeroext 1) #19
  %181 = load ptr, ptr %88, align 8, !tbaa !106
  %182 = tail call zeroext i8 @validate_change(ptr noundef nonnull %0, ptr noundef nonnull %178, ptr noundef %181, i8 noundef zeroext 1) #19
  %183 = tail call i32 @apply_change_group() #19
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %819

185:                                              ; preds = %176
  store ptr %155, ptr %179, align 8, !tbaa !17
  %186 = load ptr, ptr %88, align 8, !tbaa !106
  store ptr %186, ptr %178, align 8, !tbaa !17
  br label %819

187:                                              ; preds = %144, %82, %77
  %188 = icmp eq i32 %1, 0
  br i1 %188, label %819, label %189

189:                                              ; preds = %187
  tail call fastcc void @delete_dead_insn(ptr noundef nonnull %0)
  br label %826

190:                                              ; preds = %68, %73
  %191 = getelementptr inbounds %struct.elim_table, ptr %69, i64 1, i32 8
  %192 = load ptr, ptr %191, align 8, !tbaa !105
  %193 = icmp eq ptr %192, %60
  br i1 %193, label %194, label %198

194:                                              ; preds = %190
  %195 = getelementptr inbounds %struct.elim_table, ptr %69, i64 1, i32 3
  %196 = load i32, ptr %195, align 8, !tbaa !103
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %77

198:                                              ; preds = %194, %190
  %199 = getelementptr inbounds %struct.elim_table, ptr %69, i64 2, i32 8
  %200 = load ptr, ptr %199, align 8, !tbaa !105
  %201 = icmp eq ptr %200, %60
  br i1 %201, label %202, label %206

202:                                              ; preds = %198
  %203 = getelementptr inbounds %struct.elim_table, ptr %69, i64 2, i32 3
  %204 = load i32, ptr %203, align 8, !tbaa !103
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %77

206:                                              ; preds = %202, %198
  %207 = getelementptr inbounds %struct.elim_table, ptr %69, i64 3, i32 8
  %208 = load ptr, ptr %207, align 8, !tbaa !105
  %209 = icmp eq ptr %208, %60
  br i1 %209, label %210, label %214

210:                                              ; preds = %206
  %211 = getelementptr inbounds %struct.elim_table, ptr %69, i64 3, i32 3
  %212 = load i32, ptr %211, align 8, !tbaa !103
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %77

214:                                              ; preds = %206, %210, %64
  %215 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 0, i32 1, i32 0, i32 0, i64 1
  %216 = load ptr, ptr %215, align 8, !tbaa !17
  %217 = load i32, ptr %216, align 8
  %218 = and i32 %217, 65535
  %219 = icmp eq i32 %218, 49
  %220 = select i1 %219, ptr %216, ptr null
  br i1 %219, label %221, label %227

221:                                              ; preds = %214
  %222 = getelementptr inbounds %struct.rtx_def, ptr %216, i64 0, i32 1, i32 0, i32 0, i64 1
  %223 = load ptr, ptr %222, align 8, !tbaa !17
  %224 = load i32, ptr %223, align 8
  %225 = and i32 %224, 65535
  %226 = icmp eq i32 %225, 30
  br i1 %226, label %256, label %229

227:                                              ; preds = %214
  %228 = trunc i32 %217 to i16
  switch i16 %228, label %383 [
    i16 49, label %229
    i16 37, label %229
  ]

229:                                              ; preds = %227, %227, %221
  %230 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %231 = load ptr, ptr %230, align 8, !tbaa !17
  %232 = icmp eq ptr %231, null
  br i1 %232, label %383, label %233

233:                                              ; preds = %229, %252
  %234 = phi ptr [ %254, %252 ], [ %231, %229 ]
  %235 = load i32, ptr %234, align 8
  %236 = lshr i32 %235, 16
  %237 = and i32 %236, 255
  %238 = add nsw i32 %237, -3
  %239 = icmp ult i32 %238, 2
  br i1 %239, label %240, label %252

240:                                              ; preds = %233
  %241 = getelementptr inbounds %struct.rtx_def, ptr %234, i64 0, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !17
  %243 = load i32, ptr %242, align 8
  %244 = and i32 %243, 65535
  %245 = icmp eq i32 %244, 49
  br i1 %245, label %246, label %252

246:                                              ; preds = %240
  %247 = getelementptr inbounds %struct.rtx_def, ptr %242, i64 0, i32 1, i32 0, i32 0, i64 1
  %248 = load ptr, ptr %247, align 8, !tbaa !17
  %249 = load i32, ptr %248, align 8
  %250 = and i32 %249, 65535
  %251 = icmp eq i32 %250, 30
  br i1 %251, label %256, label %252

252:                                              ; preds = %233, %240, %246
  %253 = getelementptr inbounds %struct.rtx_def, ptr %234, i64 0, i32 1, i32 0, i32 0, i64 1
  %254 = load ptr, ptr %253, align 8, !tbaa !17
  %255 = icmp eq ptr %254, null
  br i1 %255, label %383, label %233, !llvm.loop !311

256:                                              ; preds = %246, %221
  %257 = phi ptr [ %216, %221 ], [ %242, %246 ]
  %258 = getelementptr inbounds %struct.rtx_def, ptr %257, i64 0, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !17
  %260 = load i32, ptr %259, align 8
  %261 = and i32 %260, 65535
  %262 = icmp eq i32 %261, 39
  br i1 %262, label %263, label %269

263:                                              ; preds = %256
  %264 = tail call i32 @subreg_lowpart_p(ptr noundef nonnull %259) #19
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %269, label %266

266:                                              ; preds = %263
  %267 = getelementptr inbounds %struct.rtx_def, ptr %259, i64 0, i32 1
  %268 = load ptr, ptr %267, align 8, !tbaa !17
  br label %269

269:                                              ; preds = %266, %263, %256
  %270 = phi ptr [ %268, %266 ], [ %259, %263 ], [ %259, %256 ]
  %271 = load i32, ptr %270, align 8
  %272 = and i32 %271, 65535
  %273 = icmp eq i32 %272, 37
  br i1 %273, label %274, label %383

274:                                              ; preds = %269
  %275 = getelementptr i8, ptr %270, i64 8
  %276 = load i32, ptr %275, align 8, !tbaa !17
  %277 = icmp ugt i32 %276, 52
  br i1 %277, label %383, label %278

278:                                              ; preds = %274
  %279 = load ptr, ptr %258, align 8, !tbaa !17
  %280 = getelementptr inbounds %struct.rtx_def, ptr %257, i64 0, i32 1, i32 0, i32 0, i64 1
  %281 = load ptr, ptr %280, align 8, !tbaa !17
  %282 = getelementptr inbounds %struct.rtx_def, ptr %281, i64 0, i32 1
  %283 = load i64, ptr %282, align 8, !tbaa !17
  %284 = load i32, ptr %279, align 8
  %285 = and i32 %284, 65535
  %286 = icmp eq i32 %285, 39
  br i1 %286, label %287, label %290

287:                                              ; preds = %278
  %288 = getelementptr inbounds %struct.rtx_def, ptr %279, i64 0, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !17
  br label %290

290:                                              ; preds = %287, %278
  %291 = phi ptr [ %289, %287 ], [ %279, %278 ]
  %292 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %293 = getelementptr inbounds %struct.elim_table, ptr %292, i64 0, i32 8
  %294 = load ptr, ptr %293, align 8, !tbaa !105
  %295 = icmp eq ptr %294, %291
  br i1 %295, label %296, label %359

296:                                              ; preds = %290
  %297 = getelementptr inbounds %struct.elim_table, ptr %292, i64 0, i32 3
  %298 = load i32, ptr %297, align 8, !tbaa !103
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %359, label %300

300:                                              ; preds = %379, %371, %363, %296
  %301 = phi i64 [ 0, %296 ], [ 1, %363 ], [ 2, %371 ], [ 3, %379 ]
  %302 = getelementptr inbounds %struct.elim_table, ptr %292, i64 %301, i32 9
  %303 = load ptr, ptr %302, align 8, !tbaa !106
  %304 = getelementptr inbounds %struct.elim_table, ptr %292, i64 %301, i32 5
  %305 = load i64, ptr %304, align 8, !tbaa !124
  %306 = add nsw i64 %305, %283
  %307 = load i32, ptr %257, align 8
  %308 = lshr i32 %307, 16
  %309 = and i32 %308, 255
  %310 = tail call i64 @trunc_int_for_mode(i64 noundef %306, i32 noundef %309) #19
  %311 = load ptr, ptr %258, align 8, !tbaa !17
  %312 = load i32, ptr %311, align 8
  %313 = and i32 %312, 65535
  %314 = icmp eq i32 %313, 39
  br i1 %314, label %315, label %320

315:                                              ; preds = %300
  %316 = load ptr, ptr @rtl_hooks, align 8, !tbaa !312
  %317 = lshr i32 %312, 16
  %318 = and i32 %317, 255
  %319 = tail call ptr %316(i32 noundef %318, ptr noundef %303) #19
  br label %320

320:                                              ; preds = %315, %300
  %321 = phi ptr [ %319, %315 ], [ %303, %300 ]
  %322 = icmp ne i64 %310, 0
  %323 = icmp eq ptr %220, null
  %324 = and i1 %323, %322
  br i1 %324, label %383, label %325

325:                                              ; preds = %320
  %326 = tail call ptr @plus_constant(ptr noundef %321, i64 noundef %310) #19
  %327 = icmp eq i32 %1, 0
  br i1 %327, label %328, label %335

328:                                              ; preds = %325
  %329 = tail call ptr @copy_insn(ptr noundef %15) #19
  %330 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %331 = load ptr, ptr %330, align 8, !tbaa !17
  %332 = icmp eq ptr %331, null
  br i1 %332, label %335, label %333

333:                                              ; preds = %328
  %334 = tail call ptr @copy_insn_1(ptr noundef nonnull %331) #19
  store ptr %334, ptr %330, align 8, !tbaa !17
  br label %335

335:                                              ; preds = %328, %333, %325
  %336 = phi ptr [ %15, %325 ], [ %329, %333 ], [ %329, %328 ]
  store ptr %336, ptr %14, align 8, !tbaa !17
  %337 = load i32, ptr %0, align 8
  %338 = and i32 %337, 65535
  %339 = add nsw i32 %338, -7
  %340 = icmp ult i32 %339, 4
  br i1 %340, label %341, label %347

341:                                              ; preds = %335
  %342 = load i32, ptr %336, align 8
  %343 = and i32 %342, 65535
  %344 = icmp eq i32 %343, 23
  br i1 %344, label %347, label %345

345:                                              ; preds = %341
  %346 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %336) #19
  br label %347

347:                                              ; preds = %335, %341, %345
  %348 = phi ptr [ %346, %345 ], [ null, %335 ], [ %336, %341 ]
  %349 = getelementptr inbounds %struct.rtx_def, ptr %348, i64 0, i32 1, i32 0, i32 0, i64 1
  %350 = tail call zeroext i8 @validate_change(ptr noundef nonnull %0, ptr noundef nonnull %349, ptr noundef %326, i8 noundef zeroext 0) #19
  %351 = icmp eq i8 %350, 0
  br i1 %351, label %352, label %819

352:                                              ; preds = %347
  %353 = getelementptr inbounds %struct.rtx_def, ptr %348, i64 0, i32 1
  %354 = load ptr, ptr %353, align 8, !tbaa !17
  %355 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %354, ptr noundef %326) #19
  %356 = tail call zeroext i8 @validate_change(ptr noundef nonnull %0, ptr noundef nonnull %14, ptr noundef %355, i8 noundef zeroext 0) #19
  %357 = icmp eq i8 %356, 0
  br i1 %357, label %358, label %819

358:                                              ; preds = %352
  store ptr %326, ptr %349, align 8, !tbaa !17
  br label %819

359:                                              ; preds = %290, %296
  %360 = getelementptr inbounds %struct.elim_table, ptr %292, i64 1, i32 8
  %361 = load ptr, ptr %360, align 8, !tbaa !105
  %362 = icmp eq ptr %361, %291
  br i1 %362, label %363, label %367

363:                                              ; preds = %359
  %364 = getelementptr inbounds %struct.elim_table, ptr %292, i64 1, i32 3
  %365 = load i32, ptr %364, align 8, !tbaa !103
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %367, label %300

367:                                              ; preds = %363, %359
  %368 = getelementptr inbounds %struct.elim_table, ptr %292, i64 2, i32 8
  %369 = load ptr, ptr %368, align 8, !tbaa !105
  %370 = icmp eq ptr %369, %291
  br i1 %370, label %371, label %375

371:                                              ; preds = %367
  %372 = getelementptr inbounds %struct.elim_table, ptr %292, i64 2, i32 3
  %373 = load i32, ptr %372, align 8, !tbaa !103
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %375, label %300

375:                                              ; preds = %371, %367
  %376 = getelementptr inbounds %struct.elim_table, ptr %292, i64 3, i32 8
  %377 = load ptr, ptr %376, align 8, !tbaa !105
  %378 = icmp eq ptr %377, %291
  br i1 %378, label %379, label %383

379:                                              ; preds = %375
  %380 = getelementptr inbounds %struct.elim_table, ptr %292, i64 3, i32 3
  %381 = load i32, ptr %380, align 8, !tbaa !103
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %383, label %300

383:                                              ; preds = %252, %375, %379, %229, %227, %320, %269, %274, %58, %33, %56
  %384 = phi ptr [ null, %56 ], [ null, %33 ], [ null, %58 ], [ null, %227 ], [ %220, %274 ], [ %220, %269 ], [ null, %320 ], [ %220, %229 ], [ %220, %379 ], [ %220, %375 ], [ %220, %252 ]
  %385 = phi ptr [ null, %56 ], [ null, %33 ], [ %30, %58 ], [ %30, %227 ], [ %30, %274 ], [ %30, %269 ], [ %30, %320 ], [ %30, %229 ], [ %30, %379 ], [ %30, %375 ], [ %30, %252 ]
  tail call fastcc void @elimination_effects(ptr noundef %15, i32 noundef 0)
  tail call void @extract_insn(ptr noundef nonnull %0) #19
  %386 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !314
  %387 = icmp sgt i8 %386, 0
  br i1 %387, label %388, label %398

388:                                              ; preds = %383
  %389 = sext i32 %13 to i64
  %390 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %389, i32 3
  %391 = icmp eq ptr %385, null
  %392 = getelementptr inbounds %struct.rtx_def, ptr %385, i64 0, i32 1, i32 0, i32 0, i64 1
  %393 = icmp eq ptr %384, null
  %394 = getelementptr inbounds %struct.rtx_def, ptr %384, i64 0, i32 1
  %395 = getelementptr inbounds %struct.rtx_def, ptr %384, i64 0, i32 1, i32 0, i32 0, i64 1
  %396 = icmp ne i32 %1, 0
  %397 = select i1 %396, ptr %0, ptr null
  br label %408

398:                                              ; preds = %490, %383
  %399 = phi i32 [ 0, %383 ], [ %491, %490 ]
  %400 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 8), align 1, !tbaa !316
  %401 = icmp sgt i8 %400, 0
  br i1 %401, label %402, label %531

402:                                              ; preds = %398
  %403 = zext i8 %400 to i64
  %404 = and i64 %403, 1
  %405 = icmp eq i8 %400, 1
  br i1 %405, label %519, label %406

406:                                              ; preds = %402
  %407 = and i64 %403, 254
  br label %496

408:                                              ; preds = %388, %490
  %409 = phi i64 [ 0, %388 ], [ %492, %490 ]
  %410 = phi i32 [ 0, %388 ], [ %491, %490 ]
  %411 = getelementptr inbounds [30 x ptr], ptr @recog_data, i64 0, i64 %409
  %412 = load ptr, ptr %411, align 8, !tbaa !6
  %413 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %409
  store ptr %412, ptr %413, align 8, !tbaa !6
  %414 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %409
  store ptr %412, ptr %414, align 8, !tbaa !6
  br i1 %17, label %415, label %420

415:                                              ; preds = %408
  %416 = load ptr, ptr %390, align 8, !tbaa !272
  %417 = getelementptr inbounds %struct.insn_operand_data, ptr %416, i64 %409, i32 4
  %418 = load i8, ptr %417, align 1, !tbaa !317
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %490, label %420

420:                                              ; preds = %415, %408
  %421 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 4, i64 %409
  %422 = load i32, ptr %421, align 4, !tbaa !17
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %453, label %424

424:                                              ; preds = %420
  %425 = load i32, ptr %412, align 8
  %426 = and i32 %425, 65535
  %427 = icmp eq i32 %426, 37
  br i1 %427, label %428, label %453

428:                                              ; preds = %424
  %429 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %430 = getelementptr inbounds %struct.elim_table, ptr %429, i64 0, i32 8
  %431 = load ptr, ptr %430, align 8, !tbaa !105
  %432 = icmp eq ptr %431, %412
  br i1 %432, label %433, label %435

433:                                              ; preds = %428
  %434 = getelementptr inbounds %struct.elim_table, ptr %429, i64 0, i32 3
  store i32 0, ptr %434, align 8, !tbaa !103
  br label %435

435:                                              ; preds = %428, %433
  %436 = getelementptr inbounds %struct.elim_table, ptr %429, i64 1, i32 8
  %437 = load ptr, ptr %436, align 8, !tbaa !105
  %438 = icmp eq ptr %437, %412
  br i1 %438, label %439, label %441

439:                                              ; preds = %435
  %440 = getelementptr inbounds %struct.elim_table, ptr %429, i64 1, i32 3
  store i32 0, ptr %440, align 8, !tbaa !103
  br label %441

441:                                              ; preds = %439, %435
  %442 = getelementptr inbounds %struct.elim_table, ptr %429, i64 2, i32 8
  %443 = load ptr, ptr %442, align 8, !tbaa !105
  %444 = icmp eq ptr %443, %412
  br i1 %444, label %445, label %447

445:                                              ; preds = %441
  %446 = getelementptr inbounds %struct.elim_table, ptr %429, i64 2, i32 3
  store i32 0, ptr %446, align 8, !tbaa !103
  br label %447

447:                                              ; preds = %445, %441
  %448 = getelementptr inbounds %struct.elim_table, ptr %429, i64 3, i32 8
  %449 = load ptr, ptr %448, align 8, !tbaa !105
  %450 = icmp eq ptr %449, %412
  br i1 %450, label %451, label %453

451:                                              ; preds = %447
  %452 = getelementptr inbounds %struct.elim_table, ptr %429, i64 3, i32 3
  store i32 0, ptr %452, align 8, !tbaa !103
  br label %453

453:                                              ; preds = %447, %451, %424, %420
  br i1 %391, label %459, label %454

454:                                              ; preds = %453
  %455 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %409
  %456 = load ptr, ptr %455, align 8, !tbaa !6
  %457 = icmp eq ptr %456, %392
  %458 = zext i1 %457 to i8
  br label %459

459:                                              ; preds = %454, %453
  %460 = phi i8 [ 0, %453 ], [ %458, %454 ]
  br i1 %393, label %468, label %461

461:                                              ; preds = %459
  %462 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %409
  %463 = load ptr, ptr %462, align 8, !tbaa !6
  %464 = icmp eq ptr %463, %394
  %465 = icmp eq ptr %463, %395
  %466 = select i1 %464, i1 true, i1 %465
  %467 = zext i1 %466 to i8
  br label %468

468:                                              ; preds = %461, %459
  %469 = phi i8 [ 0, %459 ], [ %467, %461 ]
  %470 = or i8 %469, %460
  %471 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %412, i32 noundef 0, ptr noundef %397, i8 noundef zeroext %470)
  store ptr %471, ptr %414, align 8, !tbaa !6
  %472 = icmp eq ptr %471, %412
  %473 = select i1 %472, i32 %410, i32 1
  %474 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %409
  %475 = load ptr, ptr %474, align 8, !tbaa !6
  store ptr null, ptr %475, align 8, !tbaa !6
  %476 = load i32, ptr %421, align 4, !tbaa !17
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %490, label %478

478:                                              ; preds = %468
  %479 = load i32, ptr %412, align 8
  %480 = and i32 %479, 65535
  %481 = icmp eq i32 %480, 37
  br i1 %481, label %482, label %490

482:                                              ; preds = %478
  %483 = load i32, ptr %471, align 8
  %484 = and i32 %483, 65535
  %485 = icmp eq i32 %484, 43
  %486 = and i1 %396, %485
  br i1 %486, label %487, label %490

487:                                              ; preds = %482
  %488 = tail call ptr @gen_clobber(ptr noundef nonnull %412) #19
  %489 = tail call ptr @emit_insn_after(ptr noundef %488, ptr noundef nonnull %0) #19
  br label %490

490:                                              ; preds = %468, %478, %482, %487, %415
  %491 = phi i32 [ %410, %415 ], [ %473, %487 ], [ %473, %482 ], [ %473, %478 ], [ %473, %468 ]
  %492 = add nuw nsw i64 %409, 1
  %493 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !314
  %494 = sext i8 %493 to i64
  %495 = icmp slt i64 %492, %494
  br i1 %495, label %408, label %398, !llvm.loop !319

496:                                              ; preds = %496, %406
  %497 = phi i64 [ 0, %406 ], [ %516, %496 ]
  %498 = phi i64 [ 0, %406 ], [ %517, %496 ]
  %499 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %497
  %500 = load i8, ptr %499, align 2, !tbaa !17
  %501 = sext i8 %500 to i64
  %502 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %501
  %503 = load ptr, ptr %502, align 8, !tbaa !6
  %504 = load ptr, ptr %503, align 8, !tbaa !6
  %505 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %497
  %506 = load ptr, ptr %505, align 8, !tbaa !6
  store ptr %504, ptr %506, align 8, !tbaa !6
  %507 = or i64 %497, 1
  %508 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %507
  %509 = load i8, ptr %508, align 1, !tbaa !17
  %510 = sext i8 %509 to i64
  %511 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %510
  %512 = load ptr, ptr %511, align 8, !tbaa !6
  %513 = load ptr, ptr %512, align 8, !tbaa !6
  %514 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %507
  %515 = load ptr, ptr %514, align 8, !tbaa !6
  store ptr %513, ptr %515, align 8, !tbaa !6
  %516 = add nuw nsw i64 %497, 2
  %517 = add i64 %498, 2
  %518 = icmp eq i64 %517, %407
  br i1 %518, label %519, label %496, !llvm.loop !320

519:                                              ; preds = %496, %402
  %520 = phi i64 [ 0, %402 ], [ %516, %496 ]
  %521 = icmp eq i64 %404, 0
  br i1 %521, label %531, label %522

522:                                              ; preds = %519
  %523 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %520
  %524 = load i8, ptr %523, align 1, !tbaa !17
  %525 = sext i8 %524 to i64
  %526 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %525
  %527 = load ptr, ptr %526, align 8, !tbaa !6
  %528 = load ptr, ptr %527, align 8, !tbaa !6
  %529 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %520
  %530 = load ptr, ptr %529, align 8, !tbaa !6
  store ptr %528, ptr %530, align 8, !tbaa !6
  br label %531

531:                                              ; preds = %522, %519, %398
  tail call fastcc void @check_eliminable_occurrences(ptr noundef %15)
  %532 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !314
  %533 = icmp sgt i8 %532, 0
  br i1 %533, label %534, label %553

534:                                              ; preds = %531
  %535 = zext i8 %532 to i64
  %536 = and i64 %535, 3
  %537 = icmp ult i8 %532, 4
  br i1 %537, label %540, label %538

538:                                              ; preds = %534
  %539 = and i64 %535, 252
  br label %562

540:                                              ; preds = %562, %534
  %541 = phi i64 [ 0, %534 ], [ %584, %562 ]
  %542 = icmp eq i64 %536, 0
  br i1 %542, label %553, label %543

543:                                              ; preds = %540, %543
  %544 = phi i64 [ %550, %543 ], [ %541, %540 ]
  %545 = phi i64 [ %551, %543 ], [ 0, %540 ]
  %546 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %544
  %547 = load ptr, ptr %546, align 8, !tbaa !6
  %548 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %544
  %549 = load ptr, ptr %548, align 8, !tbaa !6
  store ptr %547, ptr %549, align 8, !tbaa !6
  %550 = add nuw nsw i64 %544, 1
  %551 = add i64 %545, 1
  %552 = icmp eq i64 %551, %536
  br i1 %552, label %553, label %543, !llvm.loop !321

553:                                              ; preds = %540, %543, %531
  %554 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 8), align 1, !tbaa !316
  %555 = icmp sgt i8 %554, 0
  br i1 %555, label %556, label %619

556:                                              ; preds = %553
  %557 = zext i8 %554 to i64
  %558 = and i64 %557, 1
  %559 = icmp eq i8 %554, 1
  br i1 %559, label %608, label %560

560:                                              ; preds = %556
  %561 = and i64 %557, 254
  br label %587

562:                                              ; preds = %562, %538
  %563 = phi i64 [ 0, %538 ], [ %584, %562 ]
  %564 = phi i64 [ 0, %538 ], [ %585, %562 ]
  %565 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %563
  %566 = load ptr, ptr %565, align 16, !tbaa !6
  %567 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %563
  %568 = load ptr, ptr %567, align 8, !tbaa !6
  store ptr %566, ptr %568, align 8, !tbaa !6
  %569 = or i64 %563, 1
  %570 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %569
  %571 = load ptr, ptr %570, align 8, !tbaa !6
  %572 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %569
  %573 = load ptr, ptr %572, align 8, !tbaa !6
  store ptr %571, ptr %573, align 8, !tbaa !6
  %574 = or i64 %563, 2
  %575 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %574
  %576 = load ptr, ptr %575, align 16, !tbaa !6
  %577 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %574
  %578 = load ptr, ptr %577, align 8, !tbaa !6
  store ptr %576, ptr %578, align 8, !tbaa !6
  %579 = or i64 %563, 3
  %580 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %579
  %581 = load ptr, ptr %580, align 8, !tbaa !6
  %582 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %579
  %583 = load ptr, ptr %582, align 8, !tbaa !6
  store ptr %581, ptr %583, align 8, !tbaa !6
  %584 = add nuw nsw i64 %563, 4
  %585 = add i64 %564, 4
  %586 = icmp eq i64 %585, %539
  br i1 %586, label %540, label %562, !llvm.loop !322

587:                                              ; preds = %587, %560
  %588 = phi i64 [ 0, %560 ], [ %605, %587 ]
  %589 = phi i64 [ 0, %560 ], [ %606, %587 ]
  %590 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %588
  %591 = load i8, ptr %590, align 2, !tbaa !17
  %592 = sext i8 %591 to i64
  %593 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %592
  %594 = load ptr, ptr %593, align 8, !tbaa !6
  %595 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %588
  %596 = load ptr, ptr %595, align 8, !tbaa !6
  store ptr %594, ptr %596, align 8, !tbaa !6
  %597 = or i64 %588, 1
  %598 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %597
  %599 = load i8, ptr %598, align 1, !tbaa !17
  %600 = sext i8 %599 to i64
  %601 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %600
  %602 = load ptr, ptr %601, align 8, !tbaa !6
  %603 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %597
  %604 = load ptr, ptr %603, align 8, !tbaa !6
  store ptr %602, ptr %604, align 8, !tbaa !6
  %605 = add nuw nsw i64 %588, 2
  %606 = add i64 %589, 2
  %607 = icmp eq i64 %606, %561
  br i1 %607, label %608, label %587, !llvm.loop !323

608:                                              ; preds = %587, %556
  %609 = phi i64 [ 0, %556 ], [ %605, %587 ]
  %610 = icmp eq i64 %558, 0
  br i1 %610, label %619, label %611

611:                                              ; preds = %608
  %612 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %609
  %613 = load i8, ptr %612, align 1, !tbaa !17
  %614 = sext i8 %613 to i64
  %615 = getelementptr inbounds [30 x ptr], ptr %3, i64 0, i64 %614
  %616 = load ptr, ptr %615, align 8, !tbaa !6
  %617 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %609
  %618 = load ptr, ptr %617, align 8, !tbaa !6
  store ptr %616, ptr %618, align 8, !tbaa !6
  br label %619

619:                                              ; preds = %611, %608, %553
  %620 = icmp eq i32 %399, 0
  br i1 %620, label %670, label %621

621:                                              ; preds = %619
  %622 = icmp eq i32 %1, 0
  br i1 %622, label %623, label %630

623:                                              ; preds = %621
  %624 = tail call ptr @copy_insn(ptr noundef %15) #19
  %625 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %626 = load ptr, ptr %625, align 8, !tbaa !17
  %627 = icmp eq ptr %626, null
  br i1 %627, label %630, label %628

628:                                              ; preds = %623
  %629 = tail call ptr @copy_insn_1(ptr noundef nonnull %626) #19
  store ptr %629, ptr %625, align 8, !tbaa !17
  br label %630

630:                                              ; preds = %623, %628, %621
  %631 = phi ptr [ %15, %621 ], [ %624, %628 ], [ %624, %623 ]
  store ptr %631, ptr %14, align 8, !tbaa !17
  %632 = icmp ne ptr %385, null
  %633 = select i1 %17, i1 %632, i1 false
  br i1 %633, label %634, label %670

634:                                              ; preds = %630
  %635 = getelementptr inbounds %struct.rtx_def, ptr %385, i64 0, i32 1
  %636 = getelementptr inbounds %struct.rtx_def, ptr %385, i64 0, i32 1, i32 0, i32 0, i64 1
  %637 = load ptr, ptr %636, align 8, !tbaa !17
  %638 = load i32, ptr %637, align 8
  %639 = and i32 %638, 65535
  %640 = icmp eq i32 %639, 37
  br i1 %640, label %641, label %651

641:                                              ; preds = %634
  %642 = load i32, ptr %631, align 8
  %643 = and i32 %642, 65535
  %644 = icmp eq i32 %643, 23
  br i1 %644, label %645, label %666

645:                                              ; preds = %641
  %646 = getelementptr inbounds %struct.rtx_def, ptr %631, i64 0, i32 1, i32 0, i32 0, i64 1
  %647 = load ptr, ptr %646, align 8, !tbaa !17
  %648 = load i32, ptr %647, align 8
  %649 = and i32 %648, 65535
  %650 = icmp eq i32 %649, 37
  br i1 %650, label %656, label %666

651:                                              ; preds = %634
  %652 = icmp ne i32 %639, 43
  %653 = load ptr, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 0, i64 1), align 8
  %654 = icmp eq ptr %637, %653
  %655 = select i1 %652, i1 true, i1 %654
  br i1 %655, label %656, label %666

656:                                              ; preds = %645, %651
  %657 = load ptr, ptr %635, align 8, !tbaa !17
  %658 = load i32, ptr %657, align 8
  %659 = and i32 %658, 65535
  %660 = icmp eq i32 %659, 43
  %661 = load ptr, ptr @recog_data, align 8
  %662 = icmp ne ptr %657, %661
  %663 = select i1 %660, i1 %662, i1 false
  %664 = icmp eq i32 %639, 49
  %665 = or i1 %664, %663
  br i1 %665, label %666, label %670

666:                                              ; preds = %656, %651, %645, %641
  %667 = tail call i32 @recog(ptr noundef %631, ptr noundef nonnull %0, ptr noundef null) #19
  %668 = icmp sgt i32 %667, -1
  br i1 %668, label %669, label %670

669:                                              ; preds = %666
  store i32 %667, ptr %5, align 8, !tbaa !17
  br label %670

670:                                              ; preds = %656, %666, %669, %630, %619
  %671 = icmp eq i32 %1, 0
  br i1 %671, label %672, label %760

672:                                              ; preds = %670
  %673 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 7), align 2, !tbaa !314
  %674 = icmp sgt i8 %673, 0
  br i1 %674, label %675, label %694

675:                                              ; preds = %672
  %676 = zext i8 %673 to i64
  %677 = and i64 %676, 3
  %678 = icmp ult i8 %673, 4
  br i1 %678, label %681, label %679

679:                                              ; preds = %675
  %680 = and i64 %676, 252
  br label %703

681:                                              ; preds = %703, %675
  %682 = phi i64 [ 0, %675 ], [ %725, %703 ]
  %683 = icmp eq i64 %677, 0
  br i1 %683, label %694, label %684

684:                                              ; preds = %681, %684
  %685 = phi i64 [ %691, %684 ], [ %682, %681 ]
  %686 = phi i64 [ %692, %684 ], [ 0, %681 ]
  %687 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %685
  %688 = load ptr, ptr %687, align 8, !tbaa !6
  %689 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %685
  %690 = load ptr, ptr %689, align 8, !tbaa !6
  store ptr %688, ptr %690, align 8, !tbaa !6
  %691 = add nuw nsw i64 %685, 1
  %692 = add i64 %686, 1
  %693 = icmp eq i64 %692, %677
  br i1 %693, label %694, label %684, !llvm.loop !324

694:                                              ; preds = %681, %684, %672
  %695 = load i8, ptr getelementptr inbounds (%struct.recog_data, ptr @recog_data, i64 0, i32 8), align 1, !tbaa !316
  %696 = icmp sgt i8 %695, 0
  br i1 %696, label %697, label %760

697:                                              ; preds = %694
  %698 = zext i8 %695 to i64
  %699 = and i64 %698, 1
  %700 = icmp eq i8 %695, 1
  br i1 %700, label %749, label %701

701:                                              ; preds = %697
  %702 = and i64 %698, 254
  br label %728

703:                                              ; preds = %703, %679
  %704 = phi i64 [ 0, %679 ], [ %725, %703 ]
  %705 = phi i64 [ 0, %679 ], [ %726, %703 ]
  %706 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %704
  %707 = load ptr, ptr %706, align 16, !tbaa !6
  %708 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %704
  %709 = load ptr, ptr %708, align 8, !tbaa !6
  store ptr %707, ptr %709, align 8, !tbaa !6
  %710 = or i64 %704, 1
  %711 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %710
  %712 = load ptr, ptr %711, align 8, !tbaa !6
  %713 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %710
  %714 = load ptr, ptr %713, align 8, !tbaa !6
  store ptr %712, ptr %714, align 8, !tbaa !6
  %715 = or i64 %704, 2
  %716 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %715
  %717 = load ptr, ptr %716, align 16, !tbaa !6
  %718 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %715
  %719 = load ptr, ptr %718, align 8, !tbaa !6
  store ptr %717, ptr %719, align 8, !tbaa !6
  %720 = or i64 %704, 3
  %721 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %720
  %722 = load ptr, ptr %721, align 8, !tbaa !6
  %723 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 1, i64 %720
  %724 = load ptr, ptr %723, align 8, !tbaa !6
  store ptr %722, ptr %724, align 8, !tbaa !6
  %725 = add nuw nsw i64 %704, 4
  %726 = add i64 %705, 4
  %727 = icmp eq i64 %726, %680
  br i1 %727, label %681, label %703, !llvm.loop !325

728:                                              ; preds = %728, %701
  %729 = phi i64 [ 0, %701 ], [ %746, %728 ]
  %730 = phi i64 [ 0, %701 ], [ %747, %728 ]
  %731 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %729
  %732 = load i8, ptr %731, align 2, !tbaa !17
  %733 = sext i8 %732 to i64
  %734 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %733
  %735 = load ptr, ptr %734, align 8, !tbaa !6
  %736 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %729
  %737 = load ptr, ptr %736, align 8, !tbaa !6
  store ptr %735, ptr %737, align 8, !tbaa !6
  %738 = or i64 %729, 1
  %739 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %738
  %740 = load i8, ptr %739, align 1, !tbaa !17
  %741 = sext i8 %740 to i64
  %742 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %741
  %743 = load ptr, ptr %742, align 8, !tbaa !6
  %744 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %738
  %745 = load ptr, ptr %744, align 8, !tbaa !6
  store ptr %743, ptr %745, align 8, !tbaa !6
  %746 = add nuw nsw i64 %729, 2
  %747 = add i64 %730, 2
  %748 = icmp eq i64 %747, %702
  br i1 %748, label %749, label %728, !llvm.loop !326

749:                                              ; preds = %728, %697
  %750 = phi i64 [ 0, %697 ], [ %746, %728 ]
  %751 = icmp eq i64 %699, 0
  br i1 %751, label %760, label %752

752:                                              ; preds = %749
  %753 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 6, i64 %750
  %754 = load i8, ptr %753, align 1, !tbaa !17
  %755 = sext i8 %754 to i64
  %756 = getelementptr inbounds [30 x ptr], ptr %4, i64 0, i64 %755
  %757 = load ptr, ptr %756, align 8, !tbaa !6
  %758 = getelementptr inbounds %struct.recog_data, ptr @recog_data, i64 0, i32 5, i64 %750
  %759 = load ptr, ptr %758, align 8, !tbaa !6
  store ptr %757, ptr %759, align 8, !tbaa !6
  br label %760

760:                                              ; preds = %752, %749, %694, %670
  %761 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %762 = getelementptr inbounds %struct.elim_table, ptr %761, i64 0, i32 6
  %763 = load i64, ptr %762, align 8, !tbaa !125
  %764 = getelementptr inbounds %struct.elim_table, ptr %761, i64 0, i32 5
  %765 = load i64, ptr %764, align 8, !tbaa !124
  %766 = icmp eq i64 %763, %765
  br i1 %766, label %773, label %767

767:                                              ; preds = %760
  %768 = getelementptr inbounds %struct.elim_table, ptr %761, i64 0, i32 7
  %769 = load i32, ptr %768, align 8, !tbaa !327
  %770 = icmp eq i32 %769, 0
  br i1 %770, label %773, label %771

771:                                              ; preds = %767
  %772 = getelementptr inbounds %struct.elim_table, ptr %761, i64 0, i32 3
  store i32 0, ptr %772, align 8, !tbaa !103
  br label %773

773:                                              ; preds = %771, %767, %760
  %774 = phi i32 [ 1, %771 ], [ 1, %767 ], [ %399, %760 ]
  %775 = getelementptr inbounds %struct.elim_table, ptr %761, i64 0, i32 7
  store i32 0, ptr %775, align 8, !tbaa !327
  %776 = getelementptr inbounds %struct.elim_table, ptr %761, i64 1, i32 6
  %777 = load i64, ptr %776, align 8, !tbaa !125
  %778 = getelementptr inbounds %struct.elim_table, ptr %761, i64 1, i32 5
  %779 = load i64, ptr %778, align 8, !tbaa !124
  %780 = icmp eq i64 %777, %779
  br i1 %780, label %787, label %781

781:                                              ; preds = %773
  %782 = getelementptr inbounds %struct.elim_table, ptr %761, i64 1, i32 7
  %783 = load i32, ptr %782, align 8, !tbaa !327
  %784 = icmp eq i32 %783, 0
  br i1 %784, label %787, label %785

785:                                              ; preds = %781
  %786 = getelementptr inbounds %struct.elim_table, ptr %761, i64 1, i32 3
  store i32 0, ptr %786, align 8, !tbaa !103
  br label %787

787:                                              ; preds = %785, %781, %773
  %788 = phi i32 [ 1, %785 ], [ 1, %781 ], [ %774, %773 ]
  %789 = getelementptr inbounds %struct.elim_table, ptr %761, i64 1, i32 7
  store i32 0, ptr %789, align 8, !tbaa !327
  %790 = getelementptr inbounds %struct.elim_table, ptr %761, i64 2, i32 6
  %791 = load i64, ptr %790, align 8, !tbaa !125
  %792 = getelementptr inbounds %struct.elim_table, ptr %761, i64 2, i32 5
  %793 = load i64, ptr %792, align 8, !tbaa !124
  %794 = icmp eq i64 %791, %793
  br i1 %794, label %801, label %795

795:                                              ; preds = %787
  %796 = getelementptr inbounds %struct.elim_table, ptr %761, i64 2, i32 7
  %797 = load i32, ptr %796, align 8, !tbaa !327
  %798 = icmp eq i32 %797, 0
  br i1 %798, label %801, label %799

799:                                              ; preds = %795
  %800 = getelementptr inbounds %struct.elim_table, ptr %761, i64 2, i32 3
  store i32 0, ptr %800, align 8, !tbaa !103
  br label %801

801:                                              ; preds = %799, %795, %787
  %802 = phi i32 [ 1, %799 ], [ 1, %795 ], [ %788, %787 ]
  %803 = getelementptr inbounds %struct.elim_table, ptr %761, i64 2, i32 7
  store i32 0, ptr %803, align 8, !tbaa !327
  %804 = getelementptr inbounds %struct.elim_table, ptr %761, i64 3, i32 6
  %805 = load i64, ptr %804, align 8, !tbaa !125
  %806 = getelementptr inbounds %struct.elim_table, ptr %761, i64 3, i32 5
  %807 = load i64, ptr %806, align 8, !tbaa !124
  %808 = icmp eq i64 %805, %807
  %809 = getelementptr inbounds %struct.elim_table, ptr %761, i64 3, i32 7
  br i1 %808, label %817, label %810

810:                                              ; preds = %801
  %811 = load i32, ptr %809, align 8, !tbaa !327
  %812 = icmp eq i32 %811, 0
  br i1 %812, label %815, label %813

813:                                              ; preds = %810
  %814 = getelementptr inbounds %struct.elim_table, ptr %761, i64 3, i32 3
  store i32 0, ptr %814, align 8, !tbaa !103
  br label %815

815:                                              ; preds = %813, %810
  %816 = getelementptr inbounds %struct.elim_table, ptr %761, i64 3, i32 7
  store i32 0, ptr %816, align 8, !tbaa !327
  br label %819

817:                                              ; preds = %801
  store i32 0, ptr %809, align 8, !tbaa !327
  %818 = icmp eq i32 %802, 0
  br i1 %818, label %826, label %819

819:                                              ; preds = %815, %176, %185, %352, %358, %347, %187, %817
  %820 = phi i32 [ %802, %817 ], [ 1, %187 ], [ 1, %347 ], [ 1, %358 ], [ 1, %352 ], [ 1, %185 ], [ 1, %176 ], [ 1, %815 ]
  %821 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 1
  %822 = load ptr, ptr %821, align 8, !tbaa !17
  %823 = icmp eq ptr %822, null
  br i1 %823, label %826, label %824

824:                                              ; preds = %819
  %825 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %822, i32 noundef 0, ptr noundef nonnull %822, i8 noundef zeroext 1)
  store ptr %825, ptr %821, align 8, !tbaa !17
  br label %826

826:                                              ; preds = %817, %819, %824, %45, %49, %189
  %827 = phi i32 [ 1, %189 ], [ 0, %49 ], [ 0, %45 ], [ %820, %824 ], [ %820, %819 ], [ 0, %817 ]
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %4) #19
  call void @llvm.lifetime.end.p0(i64 240, ptr nonnull %3) #19
  ret i32 %827
}

declare i32 @find_reloads(ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @rtx_equal_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @ira_mark_memory_move_deletion(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @copy_insn(ptr noundef) local_unnamed_addr #3

declare ptr @copy_insn_1(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @validate_change(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare i32 @apply_change_group() local_unnamed_addr #3

declare i32 @subreg_lowpart_p(ptr noundef) local_unnamed_addr #3

declare i64 @trunc_int_for_mode(i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @elimination_effects(ptr noundef readonly %0, i32 noundef %1) unnamed_addr #15 {
  %3 = load ptr, ptr @reg_eliminate, align 8
  %4 = load ptr, ptr @reg_renumber, align 8
  br label %5

5:                                                ; preds = %528, %2
  %6 = phi ptr [ %4, %2 ], [ %529, %528 ]
  %7 = phi ptr [ %3, %2 ], [ %530, %528 ]
  %8 = phi ptr [ %0, %2 ], [ %533, %528 ]
  %9 = phi i32 [ %1, %2 ], [ %532, %528 ]
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 9
  %13 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  %14 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 9
  %15 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  %16 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 9
  %17 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  %18 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 9
  %19 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  %20 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 8
  %21 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  %22 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 8
  %23 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  %24 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 8
  %25 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  %26 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 8
  %27 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  %28 = load ptr, ptr @reg_equiv_memory_loc, align 8
  %29 = icmp ne ptr %28, null
  %30 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 8
  %31 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  %32 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 8
  %33 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  %34 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 8
  %35 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  %36 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 8
  %37 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  %38 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 9
  %39 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 5
  %40 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 5
  %41 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  %42 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 5
  %43 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 9
  %44 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 5
  %45 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 5
  %46 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  %47 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 5
  %48 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 9
  %49 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 5
  %50 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 5
  %51 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  %52 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 5
  %53 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 9
  %54 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 5
  %55 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 5
  %56 = load ptr, ptr @reg_equiv_constant, align 8
  %57 = icmp ne ptr %56, null
  br label %58

58:                                               ; preds = %317, %5
  %59 = phi ptr [ %8, %5 ], [ %318, %317 ]
  %60 = load i32, ptr %59, align 8
  %61 = trunc i32 %60 to i16
  switch i16 %61, label %538 [
    i16 30, label %575
    i16 32, label %575
    i16 31, label %575
    i16 33, label %575
    i16 35, label %575
    i16 45, label %575
    i16 12, label %575
    i16 36, label %575
    i16 46, label %575
    i16 16, label %575
    i16 20, label %575
    i16 21, label %575
    i16 27, label %575
    i16 37, label %62
    i16 75, label %116
    i16 77, label %116
    i16 74, label %116
    i16 76, label %116
    i16 79, label %116
    i16 78, label %116
    i16 40, label %312
    i16 51, label %312
    i16 64, label %312
    i16 98, label %312
    i16 99, label %312
    i16 100, label %312
    i16 101, label %312
    i16 102, label %312
    i16 103, label %312
    i16 104, label %312
    i16 106, label %312
    i16 105, label %312
    i16 111, label %312
    i16 112, label %312
    i16 114, label %312
    i16 115, label %312
    i16 116, label %312
    i16 117, label %312
    i16 118, label %312
    i16 113, label %312
    i16 39, label %319
    i16 24, label %345
    i16 25, label %369
    i16 23, label %393
    i16 43, label %534
  ]

62:                                               ; preds = %58
  %63 = getelementptr i8, ptr %59, i64 8
  %64 = load i32, ptr %63, align 8, !tbaa !17
  %65 = icmp slt i32 %64, 53
  br i1 %65, label %66, label %103

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 8
  %68 = load ptr, ptr %67, align 8, !tbaa !105
  %69 = icmp eq ptr %68, %59
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  %72 = load i32, ptr %71, align 8, !tbaa !103
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %99, %91, %83, %70
  %75 = phi i64 [ 0, %70 ], [ 1, %83 ], [ 2, %91 ], [ 3, %99 ]
  %76 = icmp eq i32 %9, 0
  br i1 %76, label %77, label %575

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.elim_table, ptr %7, i64 %75, i32 7
  store i32 1, ptr %78, align 8, !tbaa !327
  br label %575

79:                                               ; preds = %66, %70
  %80 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 8
  %81 = load ptr, ptr %80, align 8, !tbaa !105
  %82 = icmp eq ptr %81, %59
  br i1 %82, label %83, label %87

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  %85 = load i32, ptr %84, align 8, !tbaa !103
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %74

87:                                               ; preds = %83, %79
  %88 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 8
  %89 = load ptr, ptr %88, align 8, !tbaa !105
  %90 = icmp eq ptr %89, %59
  br i1 %90, label %91, label %95

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  %93 = load i32, ptr %92, align 8, !tbaa !103
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %74

95:                                               ; preds = %91, %87
  %96 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 8
  %97 = load ptr, ptr %96, align 8, !tbaa !105
  %98 = icmp eq ptr %97, %59
  br i1 %98, label %99, label %575

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  %101 = load i32, ptr %100, align 8, !tbaa !103
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %575, label %74

103:                                              ; preds = %62
  %104 = zext i32 %64 to i64
  %105 = getelementptr inbounds i16, ptr %6, i64 %104
  %106 = load i16, ptr %105, align 2, !tbaa !44
  %107 = icmp slt i16 %106, 0
  %108 = select i1 %107, i1 %57, i1 false
  br i1 %108, label %109, label %575

109:                                              ; preds = %103
  %110 = getelementptr inbounds ptr, ptr %56, i64 %104
  %111 = load ptr, ptr %110, align 8, !tbaa !6
  %112 = icmp eq ptr %111, null
  br i1 %112, label %575, label %113

113:                                              ; preds = %109
  %114 = tail call i32 @function_invariant_p(ptr noundef nonnull %111), !range !122
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %317, label %575

116:                                              ; preds = %58, %58, %58, %58, %58, %58
  %117 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %118 = load ptr, ptr %30, align 8, !tbaa !105
  %119 = load ptr, ptr %117, align 8, !tbaa !17
  %120 = icmp eq ptr %118, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %116
  store i32 0, ptr %31, align 8, !tbaa !103
  %122 = load ptr, ptr %117, align 8, !tbaa !17
  br label %123

123:                                              ; preds = %116, %121
  %124 = phi ptr [ %119, %116 ], [ %122, %121 ]
  %125 = load ptr, ptr %32, align 8, !tbaa !105
  %126 = icmp eq ptr %125, %124
  br i1 %126, label %127, label %129

127:                                              ; preds = %123
  store i32 0, ptr %33, align 8, !tbaa !103
  %128 = load ptr, ptr %117, align 8, !tbaa !17
  br label %129

129:                                              ; preds = %127, %123
  %130 = phi ptr [ %128, %127 ], [ %124, %123 ]
  %131 = load ptr, ptr %34, align 8, !tbaa !105
  %132 = icmp eq ptr %131, %130
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  store i32 0, ptr %35, align 8, !tbaa !103
  %134 = load ptr, ptr %117, align 8, !tbaa !17
  br label %135

135:                                              ; preds = %133, %129
  %136 = phi ptr [ %134, %133 ], [ %130, %129 ]
  %137 = load ptr, ptr %36, align 8, !tbaa !105
  %138 = icmp eq ptr %137, %136
  br i1 %138, label %139, label %141

139:                                              ; preds = %135
  store i32 0, ptr %37, align 8, !tbaa !103
  %140 = load ptr, ptr %117, align 8, !tbaa !17
  br label %141

141:                                              ; preds = %139, %135
  %142 = phi ptr [ %140, %139 ], [ %136, %135 ]
  %143 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 2), align 16
  %144 = and i32 %60, 65534
  %145 = icmp eq i32 %144, 78
  %146 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1, i32 0, i32 0, i64 1
  %147 = load ptr, ptr %38, align 8, !tbaa !106
  %148 = icmp eq ptr %147, %142
  br i1 %148, label %149, label %186

149:                                              ; preds = %141
  %150 = load i8, ptr %11, align 1, !tbaa !17
  %151 = zext i8 %150 to i32
  %152 = icmp eq ptr %142, %143
  %153 = add nuw nsw i32 %151, 3
  %154 = and i32 %153, 508
  %155 = select i1 %152, i32 %154, i32 %151
  switch i16 %61, label %164 [
    i16 76, label %156
    i16 74, label %156
    i16 77, label %160
    i16 75, label %160
  ]

156:                                              ; preds = %149, %149
  %157 = zext i32 %155 to i64
  %158 = load i64, ptr %40, align 8, !tbaa !124
  %159 = add nsw i64 %158, %157
  store i64 %159, ptr %40, align 8, !tbaa !124
  br label %186

160:                                              ; preds = %149, %149
  %161 = zext i32 %155 to i64
  %162 = load i64, ptr %39, align 8, !tbaa !124
  %163 = sub nsw i64 %162, %161
  store i64 %163, ptr %39, align 8, !tbaa !124
  br label %186

164:                                              ; preds = %149
  br i1 %145, label %165, label %186

165:                                              ; preds = %164
  %166 = load ptr, ptr %146, align 8, !tbaa !17
  %167 = load i32, ptr %166, align 8
  %168 = and i32 %167, 65535
  %169 = icmp eq i32 %168, 49
  br i1 %169, label %170, label %185

170:                                              ; preds = %165
  %171 = getelementptr inbounds %struct.rtx_def, ptr %166, i64 0, i32 1
  %172 = load ptr, ptr %171, align 8, !tbaa !17
  %173 = icmp eq ptr %142, %172
  br i1 %173, label %174, label %185

174:                                              ; preds = %170
  %175 = getelementptr inbounds %struct.rtx_def, ptr %166, i64 0, i32 1, i32 0, i32 0, i64 1
  %176 = load ptr, ptr %175, align 8, !tbaa !17
  %177 = load i32, ptr %176, align 8
  %178 = and i32 %177, 65535
  %179 = icmp eq i32 %178, 30
  br i1 %179, label %180, label %185

180:                                              ; preds = %174
  %181 = getelementptr inbounds %struct.rtx_def, ptr %176, i64 0, i32 1
  %182 = load i64, ptr %181, align 8, !tbaa !17
  %183 = load i64, ptr %42, align 8, !tbaa !124
  %184 = sub nsw i64 %183, %182
  store i64 %184, ptr %42, align 8, !tbaa !124
  br label %186

185:                                              ; preds = %174, %170, %165
  store i32 0, ptr %41, align 8, !tbaa !103
  br label %186

186:                                              ; preds = %156, %164, %185, %180, %160, %141
  %187 = load ptr, ptr %43, align 8, !tbaa !106
  %188 = load ptr, ptr %117, align 8, !tbaa !17
  %189 = icmp eq ptr %187, %188
  br i1 %189, label %190, label %227

190:                                              ; preds = %186
  %191 = load i8, ptr %11, align 1, !tbaa !17
  %192 = zext i8 %191 to i32
  %193 = icmp eq ptr %187, %143
  %194 = add nuw nsw i32 %192, 3
  %195 = and i32 %194, 508
  %196 = select i1 %193, i32 %195, i32 %192
  switch i16 %61, label %205 [
    i16 76, label %201
    i16 74, label %201
    i16 77, label %197
    i16 75, label %197
  ]

197:                                              ; preds = %190, %190
  %198 = zext i32 %196 to i64
  %199 = load i64, ptr %44, align 8, !tbaa !124
  %200 = sub nsw i64 %199, %198
  store i64 %200, ptr %44, align 8, !tbaa !124
  br label %227

201:                                              ; preds = %190, %190
  %202 = zext i32 %196 to i64
  %203 = load i64, ptr %45, align 8, !tbaa !124
  %204 = add nsw i64 %203, %202
  store i64 %204, ptr %45, align 8, !tbaa !124
  br label %227

205:                                              ; preds = %190
  br i1 %145, label %206, label %227

206:                                              ; preds = %205
  %207 = load ptr, ptr %146, align 8, !tbaa !17
  %208 = load i32, ptr %207, align 8
  %209 = and i32 %208, 65535
  %210 = icmp eq i32 %209, 49
  br i1 %210, label %211, label %221

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.rtx_def, ptr %207, i64 0, i32 1
  %213 = load ptr, ptr %212, align 8, !tbaa !17
  %214 = icmp eq ptr %187, %213
  br i1 %214, label %215, label %221

215:                                              ; preds = %211
  %216 = getelementptr inbounds %struct.rtx_def, ptr %207, i64 0, i32 1, i32 0, i32 0, i64 1
  %217 = load ptr, ptr %216, align 8, !tbaa !17
  %218 = load i32, ptr %217, align 8
  %219 = and i32 %218, 65535
  %220 = icmp eq i32 %219, 30
  br i1 %220, label %222, label %221

221:                                              ; preds = %215, %211, %206
  store i32 0, ptr %46, align 8, !tbaa !103
  br label %227

222:                                              ; preds = %215
  %223 = getelementptr inbounds %struct.rtx_def, ptr %217, i64 0, i32 1
  %224 = load i64, ptr %223, align 8, !tbaa !17
  %225 = load i64, ptr %47, align 8, !tbaa !124
  %226 = sub nsw i64 %225, %224
  store i64 %226, ptr %47, align 8, !tbaa !124
  br label %227

227:                                              ; preds = %222, %221, %205, %201, %197, %186
  %228 = load ptr, ptr %48, align 8, !tbaa !106
  %229 = load ptr, ptr %117, align 8, !tbaa !17
  %230 = icmp eq ptr %228, %229
  br i1 %230, label %231, label %268

231:                                              ; preds = %227
  %232 = load i8, ptr %11, align 1, !tbaa !17
  %233 = zext i8 %232 to i32
  %234 = icmp eq ptr %228, %143
  %235 = add nuw nsw i32 %233, 3
  %236 = and i32 %235, 508
  %237 = select i1 %234, i32 %236, i32 %233
  switch i16 %61, label %246 [
    i16 76, label %242
    i16 74, label %242
    i16 77, label %238
    i16 75, label %238
  ]

238:                                              ; preds = %231, %231
  %239 = zext i32 %237 to i64
  %240 = load i64, ptr %49, align 8, !tbaa !124
  %241 = sub nsw i64 %240, %239
  store i64 %241, ptr %49, align 8, !tbaa !124
  br label %268

242:                                              ; preds = %231, %231
  %243 = zext i32 %237 to i64
  %244 = load i64, ptr %50, align 8, !tbaa !124
  %245 = add nsw i64 %244, %243
  store i64 %245, ptr %50, align 8, !tbaa !124
  br label %268

246:                                              ; preds = %231
  br i1 %145, label %247, label %268

247:                                              ; preds = %246
  %248 = load ptr, ptr %146, align 8, !tbaa !17
  %249 = load i32, ptr %248, align 8
  %250 = and i32 %249, 65535
  %251 = icmp eq i32 %250, 49
  br i1 %251, label %252, label %262

252:                                              ; preds = %247
  %253 = getelementptr inbounds %struct.rtx_def, ptr %248, i64 0, i32 1
  %254 = load ptr, ptr %253, align 8, !tbaa !17
  %255 = icmp eq ptr %228, %254
  br i1 %255, label %256, label %262

256:                                              ; preds = %252
  %257 = getelementptr inbounds %struct.rtx_def, ptr %248, i64 0, i32 1, i32 0, i32 0, i64 1
  %258 = load ptr, ptr %257, align 8, !tbaa !17
  %259 = load i32, ptr %258, align 8
  %260 = and i32 %259, 65535
  %261 = icmp eq i32 %260, 30
  br i1 %261, label %263, label %262

262:                                              ; preds = %256, %252, %247
  store i32 0, ptr %51, align 8, !tbaa !103
  br label %268

263:                                              ; preds = %256
  %264 = getelementptr inbounds %struct.rtx_def, ptr %258, i64 0, i32 1
  %265 = load i64, ptr %264, align 8, !tbaa !17
  %266 = load i64, ptr %52, align 8, !tbaa !124
  %267 = sub nsw i64 %266, %265
  store i64 %267, ptr %52, align 8, !tbaa !124
  br label %268

268:                                              ; preds = %263, %262, %246, %242, %238, %227
  %269 = load ptr, ptr %53, align 8, !tbaa !106
  %270 = load ptr, ptr %117, align 8, !tbaa !17
  %271 = icmp eq ptr %269, %270
  br i1 %271, label %272, label %311

272:                                              ; preds = %268
  %273 = load i8, ptr %11, align 1, !tbaa !17
  %274 = zext i8 %273 to i32
  %275 = icmp eq ptr %269, %143
  %276 = add nuw nsw i32 %274, 3
  %277 = and i32 %276, 508
  %278 = select i1 %275, i32 %277, i32 %274
  switch i16 %61, label %287 [
    i16 76, label %283
    i16 74, label %283
    i16 77, label %279
    i16 75, label %279
  ]

279:                                              ; preds = %272, %272
  %280 = zext i32 %278 to i64
  %281 = load i64, ptr %54, align 8, !tbaa !124
  %282 = sub nsw i64 %281, %280
  store i64 %282, ptr %54, align 8, !tbaa !124
  br label %311

283:                                              ; preds = %272, %272
  %284 = zext i32 %278 to i64
  %285 = load i64, ptr %55, align 8, !tbaa !124
  %286 = add nsw i64 %285, %284
  store i64 %286, ptr %55, align 8, !tbaa !124
  br label %311

287:                                              ; preds = %272
  br i1 %145, label %288, label %312

288:                                              ; preds = %287
  %289 = load ptr, ptr %146, align 8, !tbaa !17
  %290 = load i32, ptr %289, align 8
  %291 = and i32 %290, 65535
  %292 = icmp eq i32 %291, 49
  br i1 %292, label %293, label %303

293:                                              ; preds = %288
  %294 = getelementptr inbounds %struct.rtx_def, ptr %289, i64 0, i32 1
  %295 = load ptr, ptr %294, align 8, !tbaa !17
  %296 = icmp eq ptr %269, %295
  br i1 %296, label %297, label %303

297:                                              ; preds = %293
  %298 = getelementptr inbounds %struct.rtx_def, ptr %289, i64 0, i32 1, i32 0, i32 0, i64 1
  %299 = load ptr, ptr %298, align 8, !tbaa !17
  %300 = load i32, ptr %299, align 8
  %301 = and i32 %300, 65535
  %302 = icmp eq i32 %301, 30
  br i1 %302, label %305, label %303

303:                                              ; preds = %297, %293, %288
  %304 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  store i32 0, ptr %304, align 8, !tbaa !103
  br label %538

305:                                              ; preds = %297
  %306 = getelementptr inbounds %struct.rtx_def, ptr %299, i64 0, i32 1
  %307 = load i64, ptr %306, align 8, !tbaa !17
  %308 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 5
  %309 = load i64, ptr %308, align 8, !tbaa !124
  %310 = sub nsw i64 %309, %307
  store i64 %310, ptr %308, align 8, !tbaa !124
  br label %538

311:                                              ; preds = %283, %279, %268
  br i1 %145, label %538, label %312

312:                                              ; preds = %287, %311, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58
  %313 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  br label %314

314:                                              ; preds = %312, %368, %392
  %315 = phi ptr [ %370, %392 ], [ %346, %368 ], [ %313, %312 ]
  %316 = load ptr, ptr %315, align 8, !tbaa !17
  br label %317

317:                                              ; preds = %314, %388, %364, %319, %325, %338, %113
  %318 = phi ptr [ %111, %113 ], [ %321, %338 ], [ %321, %325 ], [ %321, %319 ], [ %365, %364 ], [ %389, %388 ], [ %316, %314 ]
  br label %58

319:                                              ; preds = %58
  %320 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %321 = load ptr, ptr %320, align 8, !tbaa !17
  %322 = load i32, ptr %321, align 8
  %323 = and i32 %322, 65535
  %324 = icmp eq i32 %323, 37
  br i1 %324, label %325, label %317

325:                                              ; preds = %319
  %326 = lshr i32 %60, 16
  %327 = and i32 %326, 255
  %328 = zext i32 %327 to i64
  %329 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %328
  %330 = load i8, ptr %329, align 1, !tbaa !17
  %331 = lshr i32 %322, 16
  %332 = and i32 %331, 255
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %333
  %335 = load i8, ptr %334, align 1, !tbaa !17
  %336 = icmp ule i8 %330, %335
  %337 = select i1 %336, i1 %29, i1 false
  br i1 %337, label %338, label %317

338:                                              ; preds = %325
  %339 = getelementptr i8, ptr %321, i64 8
  %340 = load i32, ptr %339, align 8, !tbaa !17
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds ptr, ptr %28, i64 %341
  %343 = load ptr, ptr %342, align 8, !tbaa !6
  %344 = icmp eq ptr %343, null
  br i1 %344, label %317, label %575

345:                                              ; preds = %58
  %346 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %347 = load ptr, ptr %20, align 8, !tbaa !105
  %348 = load ptr, ptr %346, align 8, !tbaa !17
  %349 = icmp eq ptr %347, %348
  br i1 %349, label %350, label %352

350:                                              ; preds = %345
  store i32 0, ptr %21, align 8, !tbaa !103
  %351 = load ptr, ptr %346, align 8, !tbaa !17
  br label %352

352:                                              ; preds = %345, %350
  %353 = phi ptr [ %348, %345 ], [ %351, %350 ]
  %354 = load ptr, ptr %22, align 8, !tbaa !105
  %355 = icmp eq ptr %354, %353
  br i1 %355, label %356, label %358

356:                                              ; preds = %352
  store i32 0, ptr %23, align 8, !tbaa !103
  %357 = load ptr, ptr %346, align 8, !tbaa !17
  br label %358

358:                                              ; preds = %356, %352
  %359 = phi ptr [ %357, %356 ], [ %353, %352 ]
  %360 = load ptr, ptr %24, align 8, !tbaa !105
  %361 = icmp eq ptr %360, %359
  br i1 %361, label %362, label %364

362:                                              ; preds = %358
  store i32 0, ptr %25, align 8, !tbaa !103
  %363 = load ptr, ptr %346, align 8, !tbaa !17
  br label %364

364:                                              ; preds = %362, %358
  %365 = phi ptr [ %363, %362 ], [ %359, %358 ]
  %366 = load ptr, ptr %26, align 8, !tbaa !105
  %367 = icmp eq ptr %366, %365
  br i1 %367, label %368, label %317

368:                                              ; preds = %364
  store i32 0, ptr %27, align 8, !tbaa !103
  br label %314

369:                                              ; preds = %58
  %370 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %371 = load ptr, ptr %12, align 8, !tbaa !106
  %372 = load ptr, ptr %370, align 8, !tbaa !17
  %373 = icmp eq ptr %371, %372
  br i1 %373, label %374, label %376

374:                                              ; preds = %369
  store i32 0, ptr %13, align 8, !tbaa !103
  %375 = load ptr, ptr %370, align 8, !tbaa !17
  br label %376

376:                                              ; preds = %369, %374
  %377 = phi ptr [ %372, %369 ], [ %375, %374 ]
  %378 = load ptr, ptr %14, align 8, !tbaa !106
  %379 = icmp eq ptr %378, %377
  br i1 %379, label %380, label %382

380:                                              ; preds = %376
  store i32 0, ptr %15, align 8, !tbaa !103
  %381 = load ptr, ptr %370, align 8, !tbaa !17
  br label %382

382:                                              ; preds = %380, %376
  %383 = phi ptr [ %381, %380 ], [ %377, %376 ]
  %384 = load ptr, ptr %16, align 8, !tbaa !106
  %385 = icmp eq ptr %384, %383
  br i1 %385, label %386, label %388

386:                                              ; preds = %382
  store i32 0, ptr %17, align 8, !tbaa !103
  %387 = load ptr, ptr %370, align 8, !tbaa !17
  br label %388

388:                                              ; preds = %386, %382
  %389 = phi ptr [ %387, %386 ], [ %383, %382 ]
  %390 = load ptr, ptr %18, align 8, !tbaa !106
  %391 = icmp eq ptr %390, %389
  br i1 %391, label %392, label %317

392:                                              ; preds = %388
  store i32 0, ptr %19, align 8, !tbaa !103
  br label %314

393:                                              ; preds = %58
  %394 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %395 = load ptr, ptr %394, align 8, !tbaa !17
  %396 = load i32, ptr %395, align 8
  %397 = and i32 %396, 65535
  %398 = icmp eq i32 %397, 37
  br i1 %398, label %399, label %523

399:                                              ; preds = %393
  %400 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1, i32 0, i32 0, i64 1
  %401 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 9
  %402 = load ptr, ptr %401, align 8, !tbaa !106
  %403 = icmp ne ptr %402, %395
  %404 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16
  %405 = icmp eq ptr %395, %404
  %406 = select i1 %403, i1 true, i1 %405
  br i1 %406, label %430, label %407

407:                                              ; preds = %399
  %408 = load ptr, ptr %400, align 8, !tbaa !17
  %409 = load i32, ptr %408, align 8
  %410 = and i32 %409, 65535
  %411 = icmp eq i32 %410, 49
  br i1 %411, label %412, label %428

412:                                              ; preds = %407
  %413 = getelementptr inbounds %struct.rtx_def, ptr %408, i64 0, i32 1
  %414 = load ptr, ptr %413, align 8, !tbaa !17
  %415 = icmp eq ptr %414, %395
  br i1 %415, label %416, label %428

416:                                              ; preds = %412
  %417 = getelementptr inbounds %struct.rtx_def, ptr %408, i64 0, i32 1, i32 0, i32 0, i64 1
  %418 = load ptr, ptr %417, align 8, !tbaa !17
  %419 = load i32, ptr %418, align 8
  %420 = and i32 %419, 65535
  %421 = icmp eq i32 %420, 30
  br i1 %421, label %422, label %428

422:                                              ; preds = %416
  %423 = getelementptr inbounds %struct.rtx_def, ptr %418, i64 0, i32 1
  %424 = load i64, ptr %423, align 8, !tbaa !17
  %425 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 5
  %426 = load i64, ptr %425, align 8, !tbaa !124
  %427 = sub nsw i64 %426, %424
  store i64 %427, ptr %425, align 8, !tbaa !124
  br label %430

428:                                              ; preds = %416, %412, %407
  %429 = getelementptr inbounds %struct.elim_table, ptr %7, i64 0, i32 3
  store i32 0, ptr %429, align 8, !tbaa !103
  br label %430

430:                                              ; preds = %422, %428, %399
  %431 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 9
  %432 = load ptr, ptr %431, align 8, !tbaa !106
  %433 = load ptr, ptr %394, align 8, !tbaa !17
  %434 = icmp ne ptr %432, %433
  %435 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @global_rtl, i64 0, i64 4), align 16
  %436 = icmp eq ptr %433, %435
  %437 = select i1 %434, i1 true, i1 %436
  br i1 %437, label %461, label %438

438:                                              ; preds = %430
  %439 = load ptr, ptr %400, align 8, !tbaa !17
  %440 = load i32, ptr %439, align 8
  %441 = and i32 %440, 65535
  %442 = icmp eq i32 %441, 49
  br i1 %442, label %443, label %453

443:                                              ; preds = %438
  %444 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1
  %445 = load ptr, ptr %444, align 8, !tbaa !17
  %446 = icmp eq ptr %445, %432
  br i1 %446, label %447, label %453

447:                                              ; preds = %443
  %448 = getelementptr inbounds %struct.rtx_def, ptr %439, i64 0, i32 1, i32 0, i32 0, i64 1
  %449 = load ptr, ptr %448, align 8, !tbaa !17
  %450 = load i32, ptr %449, align 8
  %451 = and i32 %450, 65535
  %452 = icmp eq i32 %451, 30
  br i1 %452, label %455, label %453

453:                                              ; preds = %447, %443, %438
  %454 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 3
  store i32 0, ptr %454, align 8, !tbaa !103
  br label %461

455:                                              ; preds = %447
  %456 = getelementptr inbounds %struct.rtx_def, ptr %449, i64 0, i32 1
  %457 = load i64, ptr %456, align 8, !tbaa !17
  %458 = getelementptr inbounds %struct.elim_table, ptr %7, i64 1, i32 5
  %459 = load i64, ptr %458, align 8, !tbaa !124
  %460 = sub nsw i64 %459, %457
  store i64 %460, ptr %458, align 8, !tbaa !124
  br label %461

461:                                              ; preds = %455, %453, %430
  %462 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 9
  %463 = load ptr, ptr %462, align 8, !tbaa !106
  %464 = load ptr, ptr %394, align 8, !tbaa !17
  %465 = icmp ne ptr %463, %464
  %466 = icmp eq ptr %464, %435
  %467 = select i1 %465, i1 true, i1 %466
  br i1 %467, label %491, label %468

468:                                              ; preds = %461
  %469 = load ptr, ptr %400, align 8, !tbaa !17
  %470 = load i32, ptr %469, align 8
  %471 = and i32 %470, 65535
  %472 = icmp eq i32 %471, 49
  br i1 %472, label %473, label %483

473:                                              ; preds = %468
  %474 = getelementptr inbounds %struct.rtx_def, ptr %469, i64 0, i32 1
  %475 = load ptr, ptr %474, align 8, !tbaa !17
  %476 = icmp eq ptr %475, %463
  br i1 %476, label %477, label %483

477:                                              ; preds = %473
  %478 = getelementptr inbounds %struct.rtx_def, ptr %469, i64 0, i32 1, i32 0, i32 0, i64 1
  %479 = load ptr, ptr %478, align 8, !tbaa !17
  %480 = load i32, ptr %479, align 8
  %481 = and i32 %480, 65535
  %482 = icmp eq i32 %481, 30
  br i1 %482, label %485, label %483

483:                                              ; preds = %477, %473, %468
  %484 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 3
  store i32 0, ptr %484, align 8, !tbaa !103
  br label %491

485:                                              ; preds = %477
  %486 = getelementptr inbounds %struct.rtx_def, ptr %479, i64 0, i32 1
  %487 = load i64, ptr %486, align 8, !tbaa !17
  %488 = getelementptr inbounds %struct.elim_table, ptr %7, i64 2, i32 5
  %489 = load i64, ptr %488, align 8, !tbaa !124
  %490 = sub nsw i64 %489, %487
  store i64 %490, ptr %488, align 8, !tbaa !124
  br label %491

491:                                              ; preds = %485, %483, %461
  %492 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 9
  %493 = load ptr, ptr %492, align 8, !tbaa !106
  %494 = load ptr, ptr %394, align 8, !tbaa !17
  %495 = icmp ne ptr %493, %494
  %496 = icmp eq ptr %494, %435
  %497 = select i1 %495, i1 true, i1 %496
  br i1 %497, label %521, label %498

498:                                              ; preds = %491
  %499 = load ptr, ptr %400, align 8, !tbaa !17
  %500 = load i32, ptr %499, align 8
  %501 = and i32 %500, 65535
  %502 = icmp eq i32 %501, 49
  br i1 %502, label %503, label %513

503:                                              ; preds = %498
  %504 = getelementptr inbounds %struct.rtx_def, ptr %499, i64 0, i32 1
  %505 = load ptr, ptr %504, align 8, !tbaa !17
  %506 = icmp eq ptr %505, %493
  br i1 %506, label %507, label %513

507:                                              ; preds = %503
  %508 = getelementptr inbounds %struct.rtx_def, ptr %499, i64 0, i32 1, i32 0, i32 0, i64 1
  %509 = load ptr, ptr %508, align 8, !tbaa !17
  %510 = load i32, ptr %509, align 8
  %511 = and i32 %510, 65535
  %512 = icmp eq i32 %511, 30
  br i1 %512, label %515, label %513

513:                                              ; preds = %507, %503, %498
  %514 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 3
  store i32 0, ptr %514, align 8, !tbaa !103
  br label %521

515:                                              ; preds = %507
  %516 = getelementptr inbounds %struct.rtx_def, ptr %509, i64 0, i32 1
  %517 = load i64, ptr %516, align 8, !tbaa !17
  %518 = getelementptr inbounds %struct.elim_table, ptr %7, i64 3, i32 5
  %519 = load i64, ptr %518, align 8, !tbaa !124
  %520 = sub nsw i64 %519, %517
  store i64 %520, ptr %518, align 8, !tbaa !124
  br label %521

521:                                              ; preds = %515, %513, %491
  %522 = load ptr, ptr %394, align 8, !tbaa !17
  br label %523

523:                                              ; preds = %521, %393
  %524 = phi ptr [ %522, %521 ], [ %395, %393 ]
  tail call fastcc void @elimination_effects(ptr noundef %524, i32 noundef 0)
  %525 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1, i32 0, i32 0, i64 1
  %526 = load ptr, ptr @reg_eliminate, align 8
  %527 = load ptr, ptr @reg_renumber, align 8
  br label %528

528:                                              ; preds = %523, %534
  %529 = phi ptr [ %6, %534 ], [ %527, %523 ]
  %530 = phi ptr [ %7, %534 ], [ %526, %523 ]
  %531 = phi ptr [ %535, %534 ], [ %525, %523 ]
  %532 = phi i32 [ %537, %534 ], [ 0, %523 ]
  %533 = load ptr, ptr %531, align 8, !tbaa !17
  br label %5

534:                                              ; preds = %58
  %535 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %536 = lshr i32 %60, 16
  %537 = and i32 %536, 255
  br label %528

538:                                              ; preds = %58, %311, %303, %305
  %539 = and i32 %60, 65535
  %540 = zext i32 %539 to i64
  %541 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %540
  %542 = load i8, ptr %541, align 1, !tbaa !17
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %575, label %544

544:                                              ; preds = %538
  %545 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %540
  %546 = load ptr, ptr %545, align 8, !tbaa !6
  %547 = getelementptr inbounds %struct.rtx_def, ptr %59, i64 0, i32 1
  %548 = zext i8 %542 to i64
  br label %549

549:                                              ; preds = %544, %571
  %550 = phi i64 [ 0, %544 ], [ %572, %571 ]
  %551 = phi ptr [ %546, %544 ], [ %573, %571 ]
  %552 = load i8, ptr %551, align 1, !tbaa !17
  switch i8 %552, label %571 [
    i8 101, label %558
    i8 69, label %553
  ]

553:                                              ; preds = %549
  %554 = getelementptr inbounds [1 x %union.rtunion_def], ptr %547, i64 0, i64 %550
  %555 = load ptr, ptr %554, align 8, !tbaa !17
  %556 = load i32, ptr %555, align 8, !tbaa !112
  %557 = icmp sgt i32 %556, 0
  br i1 %557, label %561, label %571

558:                                              ; preds = %549
  %559 = getelementptr inbounds [1 x %union.rtunion_def], ptr %547, i64 0, i64 %550
  %560 = load ptr, ptr %559, align 8, !tbaa !17
  tail call fastcc void @elimination_effects(ptr noundef %560, i32 noundef %9)
  br label %571

561:                                              ; preds = %553, %561
  %562 = phi i64 [ %566, %561 ], [ 0, %553 ]
  %563 = phi ptr [ %567, %561 ], [ %555, %553 ]
  %564 = getelementptr inbounds %struct.rtvec_def, ptr %563, i64 0, i32 1, i64 %562
  %565 = load ptr, ptr %564, align 8, !tbaa !6
  tail call fastcc void @elimination_effects(ptr noundef %565, i32 noundef %9)
  %566 = add nuw nsw i64 %562, 1
  %567 = load ptr, ptr %554, align 8, !tbaa !17
  %568 = load i32, ptr %567, align 8, !tbaa !112
  %569 = sext i32 %568 to i64
  %570 = icmp slt i64 %566, %569
  br i1 %570, label %561, label %571, !llvm.loop !328

571:                                              ; preds = %561, %553, %549, %558
  %572 = add nuw nsw i64 %550, 1
  %573 = getelementptr inbounds i8, ptr %551, i64 1
  %574 = icmp eq i64 %572, %548
  br i1 %574, label %575, label %549, !llvm.loop !329

575:                                              ; preds = %338, %113, %109, %103, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %571, %95, %99, %538, %74, %77
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @eliminate_regs_1(ptr noundef %0, i32 noundef %1, ptr noundef %2, i8 noundef zeroext %3) unnamed_addr #9 {
  %5 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %6 = icmp eq ptr %5, null
  br i1 %6, label %532, label %7

7:                                                ; preds = %4
  %8 = icmp eq ptr %2, null
  %9 = load i32, ptr %0, align 8
  %10 = trunc i32 %9 to i16
  switch i16 %10, label %566 [
    i16 30, label %532
    i16 32, label %532
    i16 31, label %532
    i16 33, label %532
    i16 35, label %532
    i16 45, label %532
    i16 12, label %532
    i16 36, label %532
    i16 46, label %532
    i16 16, label %532
    i16 20, label %532
    i16 21, label %532
    i16 27, label %532
    i16 37, label %28
    i16 49, label %133
    i16 52, label %285
    i16 26, label %358
    i16 48, label %358
    i16 50, label %358
    i16 55, label %358
    i16 59, label %358
    i16 58, label %358
    i16 60, label %358
    i16 61, label %358
    i16 62, label %358
    i16 63, label %358
    i16 69, label %358
    i16 66, label %358
    i16 67, label %358
    i16 68, label %358
    i16 65, label %358
    i16 80, label %358
    i16 81, label %358
    i16 82, label %358
    i16 83, label %358
    i16 86, label %358
    i16 87, label %358
    i16 84, label %358
    i16 85, label %358
    i16 88, label %358
    i16 89, label %358
    i16 3, label %11
    i16 4, label %411
    i16 75, label %532
    i16 77, label %532
    i16 74, label %532
    i16 76, label %532
    i16 78, label %428
    i16 79, label %428
    i16 40, label %458
    i16 51, label %458
    i16 64, label %458
    i16 98, label %458
    i16 99, label %458
    i16 100, label %458
    i16 101, label %458
    i16 102, label %458
    i16 103, label %458
    i16 104, label %458
    i16 106, label %458
    i16 105, label %458
    i16 111, label %458
    i16 112, label %458
    i16 114, label %458
    i16 115, label %458
    i16 116, label %458
    i16 117, label %458
    i16 118, label %458
    i16 113, label %458
    i16 39, label %472
    i16 43, label %534
    i16 24, label %543
    i16 25, label %555
    i16 17, label %562
    i16 23, label %562
  ]

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = icmp eq ptr %13, null
  br i1 %14, label %411, label %15

15:                                               ; preds = %11
  %16 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %13, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %17 = load ptr, ptr %12, align 8, !tbaa !17
  %18 = icmp eq ptr %16, %17
  br i1 %18, label %411, label %19

19:                                               ; preds = %15
  %20 = load i32, ptr %0, align 8
  %21 = lshr i32 %20, 16
  %22 = and i32 %21, 255
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %404

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = icmp eq ptr %26, null
  br i1 %27, label %532, label %56

28:                                               ; preds = %7
  %29 = getelementptr i8, ptr %0, i64 8
  %30 = load i32, ptr %29, align 8, !tbaa !17
  %31 = icmp slt i32 %30, 53
  br i1 %31, label %68, label %32

32:                                               ; preds = %28
  %33 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %34 = icmp eq ptr %33, null
  br i1 %34, label %532, label %35

35:                                               ; preds = %32
  %36 = zext i32 %30 to i64
  %37 = getelementptr inbounds i16, ptr %33, i64 %36
  %38 = load i16, ptr %37, align 2, !tbaa !44
  %39 = icmp slt i16 %38, 0
  %40 = load ptr, ptr @reg_equiv_invariant, align 8
  %41 = icmp ne ptr %40, null
  %42 = select i1 %39, i1 %41, i1 false
  br i1 %42, label %43, label %532

43:                                               ; preds = %35
  %44 = getelementptr inbounds ptr, ptr %40, i64 %36
  %45 = load ptr, ptr %44, align 8, !tbaa !6
  %46 = icmp eq ptr %45, null
  br i1 %46, label %532, label %47

47:                                               ; preds = %43
  %48 = icmp eq i8 %3, 0
  br i1 %48, label %49, label %54

49:                                               ; preds = %47
  br i1 %8, label %130, label %50

50:                                               ; preds = %49
  %51 = load i32, ptr %2, align 8
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 7
  br i1 %53, label %54, label %130

54:                                               ; preds = %50, %47
  %55 = tail call ptr @copy_rtx(ptr noundef nonnull %45) #19
  br label %56

56:                                               ; preds = %54, %24
  %57 = phi ptr [ %26, %24 ], [ %55, %54 ]
  %58 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %59 = icmp eq ptr %58, null
  br i1 %59, label %532, label %60

60:                                               ; preds = %56, %126
  %61 = phi ptr [ %127, %126 ], [ %57, %56 ]
  %62 = load i32, ptr %61, align 8
  %63 = trunc i32 %62 to i16
  switch i16 %63, label %566 [
    i16 30, label %532
    i16 32, label %532
    i16 31, label %532
    i16 33, label %532
    i16 35, label %532
    i16 45, label %532
    i16 12, label %532
    i16 36, label %532
    i16 46, label %532
    i16 16, label %532
    i16 20, label %532
    i16 21, label %532
    i16 27, label %532
    i16 37, label %64
    i16 49, label %133
    i16 52, label %285
    i16 26, label %358
    i16 48, label %358
    i16 50, label %358
    i16 55, label %358
    i16 59, label %358
    i16 58, label %358
    i16 60, label %358
    i16 61, label %358
    i16 62, label %358
    i16 63, label %358
    i16 69, label %358
    i16 66, label %358
    i16 67, label %358
    i16 68, label %358
    i16 65, label %358
    i16 80, label %358
    i16 81, label %358
    i16 82, label %358
    i16 83, label %358
    i16 86, label %358
    i16 87, label %358
    i16 84, label %358
    i16 85, label %358
    i16 88, label %358
    i16 89, label %358
    i16 3, label %387
    i16 4, label %411
    i16 75, label %532
    i16 77, label %532
    i16 74, label %532
    i16 76, label %532
    i16 78, label %428
    i16 79, label %428
    i16 40, label %458
    i16 51, label %458
    i16 64, label %458
    i16 98, label %458
    i16 99, label %458
    i16 100, label %458
    i16 101, label %458
    i16 102, label %458
    i16 103, label %458
    i16 104, label %458
    i16 106, label %458
    i16 105, label %458
    i16 111, label %458
    i16 112, label %458
    i16 114, label %458
    i16 115, label %458
    i16 116, label %458
    i16 117, label %458
    i16 118, label %458
    i16 113, label %458
    i16 39, label %472
    i16 43, label %534
    i16 24, label %543
    i16 25, label %555
    i16 17, label %562
    i16 23, label %562
  ]

64:                                               ; preds = %60
  %65 = getelementptr i8, ptr %61, i64 8
  %66 = load i32, ptr %65, align 8, !tbaa !17
  %67 = icmp slt i32 %66, 53
  br i1 %67, label %68, label %109

68:                                               ; preds = %64, %28
  %69 = phi ptr [ %0, %28 ], [ %61, %64 ]
  %70 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %71 = getelementptr inbounds %struct.elim_table, ptr %70, i64 0, i32 8
  %72 = load ptr, ptr %71, align 8, !tbaa !105
  %73 = icmp eq ptr %72, %69
  br i1 %73, label %74, label %85

74:                                               ; preds = %68
  %75 = getelementptr inbounds %struct.elim_table, ptr %70, i64 0, i32 3
  %76 = load i32, ptr %75, align 8, !tbaa !103
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %85, label %78

78:                                               ; preds = %105, %97, %89, %74
  %79 = phi i64 [ 0, %74 ], [ 1, %89 ], [ 2, %97 ], [ 3, %105 ]
  %80 = getelementptr inbounds %struct.elim_table, ptr %70, i64 %79, i32 9
  %81 = load ptr, ptr %80, align 8, !tbaa !106
  %82 = getelementptr inbounds %struct.elim_table, ptr %70, i64 %79, i32 6
  %83 = load i64, ptr %82, align 8, !tbaa !125
  %84 = tail call ptr @plus_constant(ptr noundef %81, i64 noundef %83) #19
  br label %532

85:                                               ; preds = %68, %74
  %86 = getelementptr inbounds %struct.elim_table, ptr %70, i64 1, i32 8
  %87 = load ptr, ptr %86, align 8, !tbaa !105
  %88 = icmp eq ptr %87, %69
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.elim_table, ptr %70, i64 1, i32 3
  %91 = load i32, ptr %90, align 8, !tbaa !103
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %78

93:                                               ; preds = %89, %85
  %94 = getelementptr inbounds %struct.elim_table, ptr %70, i64 2, i32 8
  %95 = load ptr, ptr %94, align 8, !tbaa !105
  %96 = icmp eq ptr %95, %69
  br i1 %96, label %97, label %101

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.elim_table, ptr %70, i64 2, i32 3
  %99 = load i32, ptr %98, align 8, !tbaa !103
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %78

101:                                              ; preds = %97, %93
  %102 = getelementptr inbounds %struct.elim_table, ptr %70, i64 3, i32 8
  %103 = load ptr, ptr %102, align 8, !tbaa !105
  %104 = icmp eq ptr %103, %69
  br i1 %104, label %105, label %532

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.elim_table, ptr %70, i64 3, i32 3
  %107 = load i32, ptr %106, align 8, !tbaa !103
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %532, label %78

109:                                              ; preds = %64
  %110 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %111 = icmp eq ptr %110, null
  br i1 %111, label %532, label %112

112:                                              ; preds = %109
  %113 = zext i32 %66 to i64
  %114 = getelementptr inbounds i16, ptr %110, i64 %113
  %115 = load i16, ptr %114, align 2, !tbaa !44
  %116 = icmp slt i16 %115, 0
  %117 = load ptr, ptr @reg_equiv_invariant, align 8
  %118 = icmp ne ptr %117, null
  %119 = select i1 %116, i1 %118, i1 false
  br i1 %119, label %120, label %532

120:                                              ; preds = %112
  %121 = getelementptr inbounds ptr, ptr %117, i64 %113
  %122 = load ptr, ptr %121, align 8, !tbaa !6
  %123 = icmp eq ptr %122, null
  br i1 %123, label %532, label %124

124:                                              ; preds = %120
  %125 = tail call ptr @copy_rtx(ptr noundef nonnull %122) #19
  br label %126

126:                                              ; preds = %124, %400
  %127 = phi ptr [ %125, %124 ], [ %402, %400 ]
  %128 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %129 = icmp eq ptr %128, null
  br i1 %129, label %532, label %60, !llvm.loop !330

130:                                              ; preds = %50, %49
  %131 = load ptr, ptr @reg_equiv_init, align 8, !tbaa !6
  %132 = getelementptr inbounds ptr, ptr %131, i64 %36
  store ptr null, ptr %132, align 8, !tbaa !6
  tail call fastcc void @alter_reg(i32 noundef %30, i32 noundef -1, i8 noundef zeroext 1)
  br label %532

133:                                              ; preds = %60, %7
  %134 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %135 = getelementptr inbounds %struct.rtx_def, ptr %134, i64 0, i32 1
  %136 = load ptr, ptr %135, align 8, !tbaa !17
  %137 = load i32, ptr %136, align 8
  %138 = and i32 %137, 65535
  %139 = icmp eq i32 %138, 37
  br i1 %139, label %140, label %210

140:                                              ; preds = %133
  %141 = getelementptr i8, ptr %136, i64 8
  %142 = load i32, ptr %141, align 8, !tbaa !17
  %143 = icmp ult i32 %142, 53
  br i1 %143, label %144, label %210

144:                                              ; preds = %140
  %145 = getelementptr inbounds %struct.rtx_def, ptr %134, i64 0, i32 1, i32 0, i32 0, i64 1
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  %147 = load i32, ptr %146, align 8
  %148 = and i32 %147, 65535
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %149
  %151 = load i32, ptr %150, align 4, !tbaa !17
  %152 = icmp eq i32 %151, 9
  br i1 %152, label %153, label %210

153:                                              ; preds = %144
  %154 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %155 = getelementptr inbounds %struct.elim_table, ptr %154, i64 0, i32 8
  %156 = load ptr, ptr %155, align 8, !tbaa !105
  %157 = icmp eq ptr %156, %136
  br i1 %157, label %158, label %186

158:                                              ; preds = %153
  %159 = getelementptr inbounds %struct.elim_table, ptr %154, i64 0, i32 3
  %160 = load i32, ptr %159, align 8, !tbaa !103
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %186, label %162

162:                                              ; preds = %206, %198, %190, %158
  %163 = phi i64 [ 0, %158 ], [ 1, %190 ], [ 2, %198 ], [ 3, %206 ]
  %164 = icmp ne i32 %1, 0
  %165 = icmp eq i32 %148, 30
  %166 = and i1 %164, %165
  br i1 %166, label %170, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds %struct.elim_table, ptr %154, i64 %163, i32 6
  %169 = load i64, ptr %168, align 8, !tbaa !125
  br label %180

170:                                              ; preds = %162
  %171 = getelementptr inbounds %struct.rtx_def, ptr %146, i64 0, i32 1
  %172 = load i64, ptr %171, align 8, !tbaa !17
  %173 = getelementptr inbounds %struct.elim_table, ptr %154, i64 %163, i32 6
  %174 = load i64, ptr %173, align 8, !tbaa !125
  %175 = sub nsw i64 0, %174
  %176 = icmp eq i64 %172, %175
  br i1 %176, label %177, label %180

177:                                              ; preds = %170
  %178 = getelementptr inbounds %struct.elim_table, ptr %154, i64 %163, i32 9
  %179 = load ptr, ptr %178, align 8, !tbaa !106
  br label %532

180:                                              ; preds = %167, %170
  %181 = phi i64 [ %169, %167 ], [ %174, %170 ]
  %182 = getelementptr inbounds %struct.elim_table, ptr %154, i64 %163, i32 9
  %183 = load ptr, ptr %182, align 8, !tbaa !106
  %184 = tail call ptr @plus_constant(ptr noundef nonnull %146, i64 noundef %181) #19
  %185 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef 16, ptr noundef %183, ptr noundef %184) #19
  br label %532

186:                                              ; preds = %153, %158
  %187 = getelementptr inbounds %struct.elim_table, ptr %154, i64 1, i32 8
  %188 = load ptr, ptr %187, align 8, !tbaa !105
  %189 = icmp eq ptr %188, %136
  br i1 %189, label %190, label %194

190:                                              ; preds = %186
  %191 = getelementptr inbounds %struct.elim_table, ptr %154, i64 1, i32 3
  %192 = load i32, ptr %191, align 8, !tbaa !103
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %162

194:                                              ; preds = %190, %186
  %195 = getelementptr inbounds %struct.elim_table, ptr %154, i64 2, i32 8
  %196 = load ptr, ptr %195, align 8, !tbaa !105
  %197 = icmp eq ptr %196, %136
  br i1 %197, label %198, label %202

198:                                              ; preds = %194
  %199 = getelementptr inbounds %struct.elim_table, ptr %154, i64 2, i32 3
  %200 = load i32, ptr %199, align 8, !tbaa !103
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %162

202:                                              ; preds = %198, %194
  %203 = getelementptr inbounds %struct.elim_table, ptr %154, i64 3, i32 8
  %204 = load ptr, ptr %203, align 8, !tbaa !105
  %205 = icmp eq ptr %204, %136
  br i1 %205, label %206, label %532

206:                                              ; preds = %202
  %207 = getelementptr inbounds %struct.elim_table, ptr %154, i64 3, i32 3
  %208 = load i32, ptr %207, align 8, !tbaa !103
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %532, label %162

210:                                              ; preds = %144, %140, %133
  %211 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %136, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %212 = getelementptr inbounds %struct.rtx_def, ptr %134, i64 0, i32 1, i32 0, i32 0, i64 1
  %213 = load ptr, ptr %212, align 8, !tbaa !17
  %214 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %213, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %215 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %216 = icmp eq ptr %215, null
  br i1 %216, label %532, label %217

217:                                              ; preds = %210
  %218 = load ptr, ptr %135, align 8, !tbaa !17
  %219 = icmp eq ptr %211, %218
  br i1 %219, label %220, label %223

220:                                              ; preds = %217
  %221 = load ptr, ptr %212, align 8, !tbaa !17
  %222 = icmp eq ptr %214, %221
  br i1 %222, label %532, label %223

223:                                              ; preds = %220, %217
  %224 = load i32, ptr %211, align 8
  %225 = and i32 %224, 65535
  %226 = icmp eq i32 %225, 49
  %227 = load i32, ptr %214, align 8
  %228 = and i32 %227, 65535
  br i1 %226, label %229, label %248

229:                                              ; preds = %223
  %230 = icmp eq i32 %228, 37
  br i1 %230, label %231, label %247

231:                                              ; preds = %229
  %232 = getelementptr i8, ptr %214, i64 8
  %233 = load i32, ptr %232, align 8, !tbaa !17
  %234 = icmp ugt i32 %233, 52
  br i1 %234, label %235, label %247

235:                                              ; preds = %231
  %236 = zext i32 %233 to i64
  %237 = getelementptr inbounds i16, ptr %215, i64 %236
  %238 = load i16, ptr %237, align 2, !tbaa !44
  %239 = icmp slt i16 %238, 0
  %240 = load ptr, ptr @reg_equiv_constant, align 8
  %241 = icmp ne ptr %240, null
  %242 = select i1 %239, i1 %241, i1 false
  br i1 %242, label %243, label %247

243:                                              ; preds = %235
  %244 = getelementptr inbounds ptr, ptr %240, i64 %236
  %245 = load ptr, ptr %244, align 8, !tbaa !6
  %246 = icmp eq ptr %245, null
  br i1 %246, label %247, label %267

247:                                              ; preds = %243, %235, %231, %229
  br label %267

248:                                              ; preds = %223
  %249 = icmp eq i32 %228, 49
  %250 = icmp eq i32 %225, 37
  %251 = and i1 %250, %249
  br i1 %251, label %252, label %267

252:                                              ; preds = %248
  %253 = getelementptr i8, ptr %211, i64 8
  %254 = load i32, ptr %253, align 8, !tbaa !17
  %255 = icmp ugt i32 %254, 52
  br i1 %255, label %256, label %267

256:                                              ; preds = %252
  %257 = zext i32 %254 to i64
  %258 = getelementptr inbounds i16, ptr %215, i64 %257
  %259 = load i16, ptr %258, align 2, !tbaa !44
  %260 = icmp slt i16 %259, 0
  br i1 %260, label %261, label %267

261:                                              ; preds = %256
  %262 = load ptr, ptr @reg_equiv_constant, align 8, !tbaa !6
  %263 = getelementptr inbounds ptr, ptr %262, i64 %257
  %264 = load ptr, ptr %263, align 8, !tbaa !6
  %265 = icmp eq ptr %264, null
  %266 = select i1 %265, ptr %211, ptr %264
  br label %267

267:                                              ; preds = %247, %261, %243, %248, %252, %256
  %268 = phi ptr [ %211, %256 ], [ %211, %252 ], [ %211, %248 ], [ %211, %243 ], [ %266, %261 ], [ %211, %247 ]
  %269 = phi ptr [ %214, %256 ], [ %214, %252 ], [ %214, %248 ], [ %245, %243 ], [ %214, %261 ], [ %214, %247 ]
  %270 = load i32, ptr %134, align 8
  %271 = lshr i32 %270, 16
  %272 = and i32 %271, 255
  %273 = tail call ptr @form_sum(i32 noundef %272, ptr noundef nonnull %268, ptr noundef nonnull %269) #19
  %274 = icmp eq i32 %1, 0
  br i1 %274, label %275, label %532

275:                                              ; preds = %267
  %276 = load i32, ptr %273, align 8
  %277 = and i32 %276, 65535
  %278 = icmp eq i32 %277, 49
  br i1 %278, label %532, label %279

279:                                              ; preds = %275
  %280 = load i32, ptr %134, align 8
  %281 = lshr i32 %280, 16
  %282 = and i32 %281, 255
  %283 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !6
  %284 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %282, ptr noundef nonnull %273, ptr noundef %283) #19
  br label %532

285:                                              ; preds = %60, %7
  %286 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %287 = phi i32 [ %9, %7 ], [ %62, %60 ]
  %288 = getelementptr inbounds %struct.rtx_def, ptr %286, i64 0, i32 1
  %289 = load ptr, ptr %288, align 8, !tbaa !17
  %290 = load i32, ptr %289, align 8
  %291 = and i32 %290, 65535
  %292 = icmp eq i32 %291, 37
  br i1 %292, label %293, label %363

293:                                              ; preds = %285
  %294 = getelementptr i8, ptr %289, i64 8
  %295 = load i32, ptr %294, align 8, !tbaa !17
  %296 = icmp ult i32 %295, 53
  br i1 %296, label %297, label %363

297:                                              ; preds = %293
  %298 = getelementptr inbounds %struct.rtx_def, ptr %286, i64 0, i32 1, i32 0, i32 0, i64 1
  %299 = load ptr, ptr %298, align 8, !tbaa !17
  %300 = load i32, ptr %299, align 8
  %301 = and i32 %300, 65535
  %302 = icmp eq i32 %301, 30
  br i1 %302, label %303, label %363

303:                                              ; preds = %297
  %304 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %305 = getelementptr inbounds %struct.elim_table, ptr %304, i64 0, i32 8
  %306 = load ptr, ptr %305, align 8, !tbaa !105
  %307 = icmp eq ptr %306, %289
  br i1 %307, label %308, label %334

308:                                              ; preds = %303
  %309 = getelementptr inbounds %struct.elim_table, ptr %304, i64 0, i32 3
  %310 = load i32, ptr %309, align 8, !tbaa !103
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %334, label %312

312:                                              ; preds = %354, %346, %338, %308
  %313 = phi i64 [ 0, %308 ], [ 1, %338 ], [ 2, %346 ], [ 3, %354 ]
  %314 = icmp eq i32 %1, 0
  br i1 %314, label %315, label %322

315:                                              ; preds = %312
  br i1 %8, label %319, label %316

316:                                              ; preds = %315
  %317 = load i32, ptr %2, align 8
  %318 = trunc i32 %317 to i16
  switch i16 %318, label %319 [
    i16 3, label %322
    i16 4, label %322
    i16 7, label %322
  ]

319:                                              ; preds = %316, %315
  %320 = getelementptr inbounds %struct.elim_table, ptr %304, i64 %313, i32 7
  store i32 1, ptr %320, align 8, !tbaa !327
  %321 = load ptr, ptr %298, align 8, !tbaa !17
  br label %322

322:                                              ; preds = %316, %316, %316, %319, %312
  %323 = phi ptr [ %299, %316 ], [ %299, %316 ], [ %299, %316 ], [ %321, %319 ], [ %299, %312 ]
  %324 = getelementptr inbounds %struct.elim_table, ptr %304, i64 %313, i32 9
  %325 = load ptr, ptr %324, align 8, !tbaa !106
  %326 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 52, i32 noundef 16, ptr noundef %325, ptr noundef %323) #19
  %327 = getelementptr inbounds %struct.elim_table, ptr %304, i64 %313, i32 6
  %328 = load i64, ptr %327, align 8, !tbaa !125
  %329 = load ptr, ptr %298, align 8, !tbaa !17
  %330 = getelementptr inbounds %struct.rtx_def, ptr %329, i64 0, i32 1
  %331 = load i64, ptr %330, align 8, !tbaa !17
  %332 = mul nsw i64 %331, %328
  %333 = tail call ptr @plus_constant(ptr noundef %326, i64 noundef %332) #19
  br label %532

334:                                              ; preds = %303, %308
  %335 = getelementptr inbounds %struct.elim_table, ptr %304, i64 1, i32 8
  %336 = load ptr, ptr %335, align 8, !tbaa !105
  %337 = icmp eq ptr %336, %289
  br i1 %337, label %338, label %342

338:                                              ; preds = %334
  %339 = getelementptr inbounds %struct.elim_table, ptr %304, i64 1, i32 3
  %340 = load i32, ptr %339, align 8, !tbaa !103
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %342, label %312

342:                                              ; preds = %338, %334
  %343 = getelementptr inbounds %struct.elim_table, ptr %304, i64 2, i32 8
  %344 = load ptr, ptr %343, align 8, !tbaa !105
  %345 = icmp eq ptr %344, %289
  br i1 %345, label %346, label %350

346:                                              ; preds = %342
  %347 = getelementptr inbounds %struct.elim_table, ptr %304, i64 2, i32 3
  %348 = load i32, ptr %347, align 8, !tbaa !103
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %312

350:                                              ; preds = %346, %342
  %351 = getelementptr inbounds %struct.elim_table, ptr %304, i64 3, i32 8
  %352 = load ptr, ptr %351, align 8, !tbaa !105
  %353 = icmp eq ptr %352, %289
  br i1 %353, label %354, label %363

354:                                              ; preds = %350
  %355 = getelementptr inbounds %struct.elim_table, ptr %304, i64 3, i32 3
  %356 = load i32, ptr %355, align 8, !tbaa !103
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %363, label %312

358:                                              ; preds = %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7
  %359 = phi ptr [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ]
  %360 = phi i
  %361 = getelementptr inbounds %struct.rtx_def, ptr %359, i64 0, i32 1
  %362 = load ptr, ptr %361, align 8, !tbaa !17
  br label %363

363:                                              ; preds = %350, %354, %358, %285, %293, %297
  %364 = phi ptr [ %362, %358 ], [ %289, %285 ], [ %289, %293 ], [ %289, %297 ], [ %289, %354 ], [ %289, %350 ]
  %365 = phi ptr [ %359, %358 ], [ %286, %285 ], [ %286, %293 ], [ %286, %297 ], [ %286, %354 ], [ %286, %350 ]
  %366 = phi i32 [ %360, %358 ], [ %287, %285 ], [ %287, %293 ], [ %287, %297 ], [ %287, %354 ], [ %287, %350 ]
  %367 = and i32 %366, 65535
  %368 = getelementptr inbounds %struct.rtx_def, ptr %365, i64 0, i32 1
  %369 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %364, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  %370 = getelementptr inbounds %struct.rtx_def, ptr %365, i64 0, i32 1, i32 0, i32 0, i64 1
  %371 = load ptr, ptr %370, align 8, !tbaa !17
  %372 = icmp eq ptr %371, null
  br i1 %372, label %375, label %373

373:                                              ; preds = %363
  %374 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %371, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  br label %375

375:                                              ; preds = %363, %373
  %376 = phi ptr [ %374, %373 ], [ null, %363 ]
  %377 = load ptr, ptr %368, align 8, !tbaa !17
  %378 = icmp eq ptr %369, %377
  br i1 %378, label %379, label %382

379:                                              ; preds = %375
  %380 = load ptr, ptr %370, align 8, !tbaa !17
  %381 = icmp eq ptr %376, %380
  br i1 %381, label %532, label %382

382:                                              ; preds = %375, %379
  %383 = load i32, ptr %365, align 8
  %384 = lshr i32 %383, 16
  %385 = and i32 %384, 255
  %386 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %367, i32 noundef %385, ptr noundef %369, ptr noundef %376) #19
  br label %532

387:                                              ; preds = %60
  %388 = getelementptr inbounds %struct.rtx_def, ptr %61, i64 0, i32 1
  %389 = load ptr, ptr %388, align 8, !tbaa !17
  %390 = icmp eq ptr %389, null
  br i1 %390, label %411, label %391

391:                                              ; preds = %387
  %392 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %389, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %393 = load ptr, ptr %388, align 8, !tbaa !17
  %394 = icmp eq ptr %392, %393
  br i1 %394, label %411, label %395

395:                                              ; preds = %391
  %396 = load i32, ptr %61, align 8
  %397 = lshr i32 %396, 16
  %398 = and i32 %397, 255
  %399 = icmp eq i32 %398, 1
  br i1 %399, label %400, label %404

400:                                              ; preds = %395
  %401 = getelementptr inbounds %struct.rtx_def, ptr %61, i64 0, i32 1, i32 0, i32 0, i64 1
  %402 = load ptr, ptr %401, align 8, !tbaa !17
  %403 = icmp eq ptr %402, null
  br i1 %403, label %532, label %126

404:                                              ; preds = %395, %19
  %405 = phi ptr [ %0, %19 ], [ %61, %395 ]
  %406 = phi i32 [ %22, %19 ], [ %398, %395 ]
  %407 = phi ptr [ %16, %19 ], [ %392, %395 ]
  %408 = getelementptr inbounds %struct.rtx_def, ptr %405, i64 0, i32 1, i32 0, i32 0, i64 1
  %409 = load ptr, ptr %408, align 8, !tbaa !17
  %410 = tail call ptr @alloc_reg_note(i32 noundef %406, ptr noundef %407, ptr noundef %409) #19
  br label %411

411:                                              ; preds = %387, %391, %60, %7, %11, %15, %404
  %412 = phi ptr [ %410, %404 ], [ %0, %7 ], [ %0, %11 ], [ %0, %15 ], [ %61, %60 ], [ %61, %391 ], [ %61, %387 ]
  %413 = getelementptr inbounds %struct.rtx_def, ptr %412, i64 0, i32 1
  %414 = getelementptr inbounds %struct.rtx_def, ptr %412, i64 0, i32 1, i32 0, i32 0, i64 1
  %415 = load ptr, ptr %414, align 8, !tbaa !17
  %416 = icmp eq ptr %415, null
  br i1 %416, label %532, label %417

417:                                              ; preds = %411
  %418 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %415, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %419 = load ptr, ptr %414, align 8, !tbaa !17
  %420 = icmp eq ptr %418, %419
  br i1 %420, label %532, label %421

421:                                              ; preds = %417
  %422 = load i32, ptr %412, align 8
  %423 = and i32 %422, 65535
  %424 = lshr i32 %422, 16
  %425 = and i32 %424, 255
  %426 = load ptr, ptr %413, align 8, !tbaa !17
  %427 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %423, i32 noundef %425, ptr noundef %426, ptr noundef %418) #19
  br label %532

428:                                              ; preds = %60, %60, %7, %7
  %429 = phi ptr [ %0, %7 ], [ %0, %7 ], [ %61, %60 ], [ %61, %60 ]
  %430 = phi i32 [ %9, %7 ], [ %9, %7 ], [ %62, %60 ], [ %62, %60 ]
  %431 = and i32 %430, 65535
  %432 = getelementptr inbounds %struct.rtx_def, ptr %429, i64 0, i32 1
  %433 = getelementptr inbounds %struct.rtx_def, ptr %429, i64 0, i32 1, i32 0, i32 0, i64 1
  %434 = load ptr, ptr %433, align 8, !tbaa !17
  %435 = load i32, ptr %434, align 8
  %436 = and i32 %435, 65535
  %437 = icmp eq i32 %436, 49
  br i1 %437, label %438, label %532

438:                                              ; preds = %428
  %439 = getelementptr inbounds %struct.rtx_def, ptr %434, i64 0, i32 1
  %440 = load ptr, ptr %439, align 8, !tbaa !17
  %441 = load ptr, ptr %432, align 8, !tbaa !17
  %442 = icmp eq ptr %440, %441
  br i1 %442, label %443, label %532

443:                                              ; preds = %438
  %444 = getelementptr inbounds %struct.rtx_def, ptr %434, i64 0, i32 1, i32 0, i32 0, i64 1
  %445 = load ptr, ptr %444, align 8, !tbaa !17
  %446 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %445, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 1)
  %447 = load ptr, ptr %433, align 8, !tbaa !17
  %448 = getelementptr inbounds %struct.rtx_def, ptr %447, i64 0, i32 1, i32 0, i32 0, i64 1
  %449 = load ptr, ptr %448, align 8, !tbaa !17
  %450 = icmp eq ptr %446, %449
  br i1 %450, label %532, label %451

451:                                              ; preds = %443
  %452 = load i32, ptr %429, align 8
  %453 = lshr i32 %452, 16
  %454 = and i32 %453, 255
  %455 = load ptr, ptr %432, align 8, !tbaa !17
  %456 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %454, ptr noundef %455, ptr noundef %446) #19
  %457 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef %431, i32 noundef %454, ptr noundef %455, ptr noundef %456) #19
  br label %532

458:                                              ; preds = %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7
  %459 = phi ptr [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ]
  %460 = phi i
  %461 = getelementptr inbounds %struct.rtx_def, ptr %459, i64 0, i32 1
  %462 = load ptr, ptr %461, align 8, !tbaa !17
  %463 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %462, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  %464 = load ptr, ptr %461, align 8, !tbaa !17
  %465 = icmp eq ptr %463, %464
  br i1 %465, label %532, label %466

466:                                              ; preds = %458
  %467 = and i32 %460, 65535
  %468 = load i32, ptr %459, align 8
  %469 = lshr i32 %468, 16
  %470 = and i32 %469, 255
  %471 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %467, i32 noundef %470, ptr noundef %463) #19
  br label %532

472:                                              ; preds = %60, %7
  %473 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %474 = phi i32 [ %9, %7 ], [ %62, %60 ]
  %475 = getelementptr inbounds %struct.rtx_def, ptr %473, i64 0, i32 1
  %476 = load ptr, ptr %475, align 8, !tbaa !17
  %477 = load i32, ptr %476, align 8
  %478 = and i32 %477, 65535
  %479 = icmp eq i32 %478, 37
  br i1 %479, label %480, label %502

480:                                              ; preds = %472
  %481 = lshr i32 %474, 16
  %482 = and i32 %481, 255
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %483
  %485 = load i8, ptr %484, align 1, !tbaa !17
  %486 = lshr i32 %477, 16
  %487 = and i32 %486, 255
  %488 = zext i32 %487 to i64
  %489 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %488
  %490 = load i8, ptr %489, align 1, !tbaa !17
  %491 = icmp ule i8 %485, %490
  %492 = load ptr, ptr @reg_equiv_memory_loc, align 8
  %493 = icmp ne ptr %492, null
  %494 = select i1 %491, i1 %493, i1 false
  br i1 %494, label %495, label %502

495:                                              ; preds = %480
  %496 = getelementptr i8, ptr %476, i64 8
  %497 = load i32, ptr %496, align 8, !tbaa !17
  %498 = zext i32 %497 to i64
  %499 = getelementptr inbounds ptr, ptr %492, i64 %498
  %500 = load ptr, ptr %499, align 8, !tbaa !6
  %501 = icmp eq ptr %500, null
  br i1 %501, label %502, label %532

502:                                              ; preds = %472, %480, %495
  %503 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %476, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  %504 = load ptr, ptr %475, align 8, !tbaa !17
  %505 = icmp eq ptr %503, %504
  br i1 %505, label %532, label %506

506:                                              ; preds = %502
  %507 = load i32, ptr %473, align 8
  %508 = lshr i32 %507, 16
  %509 = and i32 %508, 255
  %510 = load i32, ptr %503, align 8
  %511 = and i32 %510, 65535
  %512 = icmp eq i32 %511, 43
  br i1 %512, label %513, label %528

513:                                              ; preds = %506
  %514 = lshr i32 %510, 16
  %515 = and i32 %514, 255
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %516
  %518 = load i8, ptr %517, align 1, !tbaa !17
  %519 = zext i32 %509 to i64
  %520 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %519
  %521 = load i8, ptr %520, align 1, !tbaa !17
  %522 = icmp ugt i8 %521, %518
  br i1 %522, label %528, label %523

523:                                              ; preds = %513
  %524 = getelementptr inbounds %struct.rtx_def, ptr %473, i64 0, i32 1, i32 0, i32 0, i64 1
  %525 = load i32, ptr %524, align 8, !tbaa !17
  %526 = zext i32 %525 to i64
  %527 = tail call ptr @adjust_address_1(ptr noundef nonnull %503, i32 noundef %509, i64 noundef %526, i32 noundef 0, i32 noundef 1) #19
  br label %532

528:                                              ; preds = %513, %506
  %529 = getelementptr inbounds %struct.rtx_def, ptr %473, i64 0, i32 1, i32 0, i32 0, i64 1
  %530 = load i32, ptr %529, align 8, !tbaa !17
  %531 = tail call ptr @gen_rtx_SUBREG(i32 noundef %509, ptr noundef nonnull %503, i32 noundef %530) #19
  br label %532

532:                                              ; preds = %443, %267, %275, %279, %428, %438, %451, %382, %379, %220, %210, %543, %502, %523, %528, %458, %411, %417, %130, %550, %466, %421, %322, %180, %177, %78, %566, %4, %105, %101, %206, %202, %56, %43, %35, %32, %24, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %7, %495, %650, %126, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %60, %109, %112, %120, %400, %534
  %533 = phi ptr [ %542, %534 ], [ %554, %550 ], [ %471, %466 ], [ %457, %451 ], [ %427, %421 ], [ %333, %322 ], [ %179, %177 ], [ %185, %180 ], [ %84, %78 ], [ %0, %130 ], [ %412, %417 ], [ %412, %411 ], [ %459, %458 ], [ %527, %523 ], [ %531, %528 ], [ %473, %502 ], [ %544, %543 ], [ %134, %220 ], [ %134, %210 ], [ %386, %382 ], [ %365, %379 ], [ %429, %438 ], [ %429, %428 ], [ %273, %267 ], [ %273, %275 ], [ %284, %279 ], [ %429, %443 ], [ %567, %566 ], [ %0, %4 ], [ %69, %105 ], [ %69, %101 ], [ %134, %206 ], [ %134, %202 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ %0, %7 ], [ null, %24 ], [ %0, %32 ], [ %0, %35 ], [ %0, %43 ], [ %57, %56 ], [ %473, %495 ], [ %652, %650 ], [ %127, %126 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %60 ], [ %61, %109 ], [ %61, %112 ], [ %61, %120 ], [ null, %400 ]
  ret ptr %533

534:                                              ; preds = %60, %7
  %535 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %536 = phi i32 [ %9, %7 ], [ %62, %60 ]
  %537 = getelementptr inbounds %struct.rtx_def, ptr %535, i64 0, i32 1
  %538 = load ptr, ptr %537, align 8, !tbaa !17
  %539 = lshr i32 %536, 16
  %540 = and i32 %539, 255
  %541 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %538, i32 noundef %540, ptr noundef %2, i8 noundef zeroext 1)
  %542 = tail call ptr @replace_equiv_address_nv(ptr noundef nonnull %535, ptr noundef %541) #19
  br label %532

543:                                              ; preds = %60, %7
  %544 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %545 = getelementptr inbounds %struct.rtx_def, ptr %544, i64 0, i32 1
  %546 = load ptr, ptr %545, align 8, !tbaa !17
  %547 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %546, i32 noundef 0, ptr noundef %2, i8 noundef zeroext 0)
  %548 = load ptr, ptr %545, align 8, !tbaa !17
  %549 = icmp eq ptr %547, %548
  br i1 %549, label %532, label %550

550:                                              ; preds = %543
  %551 = load i32, ptr %544, align 8
  %552 = lshr i32 %551, 16
  %553 = and i32 %552, 255
  %554 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef 24, i32 noundef %553, ptr noundef %547) #19
  br label %532

555:                                              ; preds = %60, %7
  %556 = phi ptr [ %0, %7 ], [ %61, %60 ]
  %557 = phi i32 [ %9, %7 ], [ %62, %60 ]
  br i1 %8, label %562, label %558

558:                                              ; preds = %555
  %559 = load i32, ptr %2, align 8
  %560 = and i32 %559, 65535
  %561 = icmp eq i32 %560, 7
  br i1 %561, label %566, label %562

562:                                              ; preds = %60, %60, %7, %7, %555, %558
  %563 = phi i32 [ 2889, %558 ], [ 2889, %555 ], [ 2894, %7 ], [ 2894, %7 ], [ 2894, %60 ], [ 2894, %60 ]
  %564 = phi ptr [ %556, %558 ], [ %556, %555 ], [ %0, %7 ], [ %0, %7 ], [ %61, %60 ], [ %61, %60 ]
  %565 = phi i32 [ %557, %558 ], [ %557, %555 ], [ %9, %7 ], [ %9, %7 ], [ %62, %60 ], [ %62, %60 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef %563, ptr noundef nonnull @.str.2) #19
  br label %566

566:                                              ; preds = %60, %562, %7, %558
  %567 = phi ptr [ %556, %558 ], [ %0, %7 ], [ %564, %562 ], [ %61, %60 ]
  %568 = phi i32 [ %557, %558 ], [ %9, %7 ], [ %565, %562 ], [ %62, %60 ]
  %569 = and i32 %568, 65535
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %570
  %572 = load i8, ptr %571, align 1, !tbaa !17
  %573 = icmp eq i8 %572, 0
  br i1 %573, label %532, label %574

574:                                              ; preds = %566
  %575 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %570
  %576 = load ptr, ptr %575, align 8, !tbaa !6
  %577 = zext i8 %572 to i64
  br label %578

578:                                              ; preds = %574, %650
  %579 = phi i64 [ 0, %574 ], [ %653, %650 ]
  %580 = phi ptr [ %567, %574 ], [ %652, %650 ]
  %581 = phi i32 [ 0, %574 ], [ %651, %650 ]
  %582 = phi ptr [ %576, %574 ], [ %654, %650 ]
  %583 = load i8, ptr %582, align 1, !tbaa !17
  switch i8 %583, label %650 [
    i8 101, label %590
    i8 69, label %584
  ]

584:                                              ; preds = %578
  %585 = getelementptr inbounds %struct.rtx_def, ptr %580, i64 0, i32 1
  %586 = getelementptr inbounds [1 x %union.rtunion_def], ptr %585, i64 0, i64 %579
  %587 = load ptr, ptr %586, align 8, !tbaa !17
  %588 = load i32, ptr %587, align 8, !tbaa !112
  %589 = icmp sgt i32 %588, 0
  br i1 %589, label %606, label %650

590:                                              ; preds = %578
  %591 = getelementptr inbounds %struct.rtx_def, ptr %580, i64 0, i32 1
  %592 = getelementptr inbounds [1 x %union.rtunion_def], ptr %591, i64 0, i64 %579
  %593 = load ptr, ptr %592, align 8, !tbaa !17
  %594 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %593, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  %595 = load ptr, ptr %592, align 8, !tbaa !17
  %596 = icmp eq ptr %594, %595
  %597 = icmp ne i32 %581, 0
  %598 = select i1 %596, i1 true, i1 %597
  br i1 %598, label %601, label %599

599:                                              ; preds = %590
  %600 = tail call ptr @shallow_copy_rtx_stat(ptr noundef nonnull %580) #19
  br label %601

601:                                              ; preds = %599, %590
  %602 = phi i32 [ %581, %590 ], [ 1, %599 ]
  %603 = phi ptr [ %580, %590 ], [ %600, %599 ]
  %604 = getelementptr inbounds %struct.rtx_def, ptr %603, i64 0, i32 1
  %605 = getelementptr inbounds [1 x %union.rtunion_def], ptr %604, i64 0, i64 %579
  store ptr %594, ptr %605, align 8, !tbaa !17
  br label %650

606:                                              ; preds = %584, %637
  %607 = phi i64 [ %645, %637 ], [ 0, %584 ]
  %608 = phi ptr [ %646, %637 ], [ %587, %584 ]
  %609 = phi ptr [ %643, %637 ], [ %586, %584 ]
  %610 = phi i32 [ %641, %637 ], [ 0, %584 ]
  %611 = phi ptr [ %640, %637 ], [ %580, %584 ]
  %612 = phi i32 [ %639, %637 ], [ %581, %584 ]
  %613 = getelementptr inbounds %struct.rtvec_def, ptr %608, i64 0, i32 1, i64 %607
  %614 = load ptr, ptr %613, align 8, !tbaa !6
  %615 = tail call fastcc ptr @eliminate_regs_1(ptr noundef %614, i32 noundef %1, ptr noundef %2, i8 noundef zeroext 0)
  %616 = load ptr, ptr %609, align 8, !tbaa !17
  %617 = getelementptr inbounds %struct.rtvec_def, ptr %616, i64 0, i32 1, i64 %607
  %618 = load ptr, ptr %617, align 8, !tbaa !6
  %619 = icmp eq ptr %615, %618
  %620 = icmp ne i32 %610, 0
  %621 = select i1 %619, i1 true, i1 %620
  br i1 %621, label %622, label %626

622:                                              ; preds = %606
  %623 = getelementptr inbounds %struct.rtx_def, ptr %611, i64 0, i32 1
  %624 = getelementptr inbounds [1 x %union.rtunion_def], ptr %623, i64 0, i64 %579
  %625 = load ptr, ptr %624, align 8, !tbaa !17
  br label %637

626:                                              ; preds = %606
  %627 = getelementptr inbounds %struct.rtvec_def, ptr %616, i64 0, i32 1
  %628 = load i32, ptr %616, align 8, !tbaa !112
  %629 = tail call ptr @gen_rtvec_v(i32 noundef %628, ptr noundef nonnull %627) #19
  %630 = icmp eq i32 %612, 0
  br i1 %630, label %631, label %633

631:                                              ; preds = %626
  %632 = tail call ptr @shallow_copy_rtx_stat(ptr noundef nonnull %611) #19
  br label %633

633:                                              ; preds = %631, %626
  %634 = phi ptr [ %611, %626 ], [ %632, %631 ]
  %635 = getelementptr inbounds %struct.rtx_def, ptr %634, i64 0, i32 1
  %636 = getelementptr inbounds [1 x %union.rtunion_def], ptr %635, i64 0, i64 %579
  store ptr %629, ptr %636, align 8, !tbaa !17
  br label %637

637:                                              ; preds = %622, %633
  %638 = phi ptr [ %625, %622 ], [ %629, %633 ]
  %639 = phi i32 [ %612, %622 ], [ 1, %633 ]
  %640 = phi ptr [ %611, %622 ], [ %634, %633 ]
  %641 = phi i32 [ %610, %622 ], [ 1, %633 ]
  %642 = getelementptr inbounds %struct.rtx_def, ptr %640, i64 0, i32 1
  %643 = getelementptr inbounds [1 x %union.rtunion_def], ptr %642, i64 0, i64 %579
  %644 = getelementptr inbounds %struct.rtvec_def, ptr %638, i64 0, i32 1, i64 %607
  store ptr %615, ptr %644, align 8, !tbaa !6
  %645 = add nuw nsw i64 %607, 1
  %646 = load ptr, ptr %643, align 8, !tbaa !17
  %647 = load i32, ptr %646, align 8, !tbaa !112
  %648 = sext i32 %647 to i64
  %649 = icmp slt i64 %645, %648
  br i1 %649, label %606, label %650, !llvm.loop !332

650:                                              ; preds = %637, %584, %578, %601
  %651 = phi i32 [ %602, %601 ], [ %581, %578 ], [ %581, %584 ], [ %639, %637 ]
  %652 = phi ptr [ %603, %601 ], [ %580, %578 ], [ %580, %584 ], [ %640, %637 ]
  %653 = add nuw nsw i64 %579, 1
  %654 = getelementptr inbounds i8, ptr %582, i64 1
  %655 = icmp eq i64 %653, %577
  br i1 %655, label %532, label %578, !llvm.loop !333
}

declare ptr @emit_insn_after(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_clobber(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define internal fastcc void @check_eliminable_occurrences(ptr noundef readonly %0) unnamed_addr #15 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %72, label %3

3:                                                ; preds = %1
  %4 = load i32, ptr %0, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %7, label %36

7:                                                ; preds = %3
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i32, ptr %8, align 8, !tbaa !17
  %10 = icmp ult i32 %9, 53
  br i1 %10, label %11, label %36

11:                                               ; preds = %7
  %12 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %13 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 8
  %14 = load ptr, ptr %13, align 8, !tbaa !105
  %15 = icmp eq ptr %14, %0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.elim_table, ptr %12, i64 0, i32 3
  store i32 0, ptr %17, align 8, !tbaa !103
  br label %18

18:                                               ; preds = %11, %16
  %19 = getelementptr inbounds %struct.elim_table, ptr %12, i64 1, i32 8
  %20 = load ptr, ptr %19, align 8, !tbaa !105
  %21 = icmp eq ptr %20, %0
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.elim_table, ptr %12, i64 1, i32 3
  store i32 0, ptr %23, align 8, !tbaa !103
  br label %24

24:                                               ; preds = %22, %18
  %25 = getelementptr inbounds %struct.elim_table, ptr %12, i64 2, i32 8
  %26 = load ptr, ptr %25, align 8, !tbaa !105
  %27 = icmp eq ptr %26, %0
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.elim_table, ptr %12, i64 2, i32 3
  store i32 0, ptr %29, align 8, !tbaa !103
  br label %30

30:                                               ; preds = %28, %24
  %31 = getelementptr inbounds %struct.elim_table, ptr %12, i64 3, i32 8
  %32 = load ptr, ptr %31, align 8, !tbaa !105
  %33 = icmp eq ptr %32, %0
  br i1 %33, label %34, label %72

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.elim_table, ptr %12, i64 3, i32 3
  store i32 0, ptr %35, align 8, !tbaa !103
  br label %72

36:                                               ; preds = %7, %3
  %37 = zext i32 %5 to i64
  %38 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !17
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %72, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %37
  %43 = load ptr, ptr %42, align 8, !tbaa !6
  %44 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %45 = zext i8 %39 to i64
  br label %46

46:                                               ; preds = %41, %68
  %47 = phi i64 [ 0, %41 ], [ %69, %68 ]
  %48 = phi ptr [ %43, %41 ], [ %70, %68 ]
  %49 = load i8, ptr %48, align 1, !tbaa !17
  switch i8 %49, label %68 [
    i8 101, label %55
    i8 69, label %50
  ]

50:                                               ; preds = %46
  %51 = getelementptr inbounds [1 x %union.rtunion_def], ptr %44, i64 0, i64 %47
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = load i32, ptr %52, align 8, !tbaa !112
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %58, label %68

55:                                               ; preds = %46
  %56 = getelementptr inbounds [1 x %union.rtunion_def], ptr %44, i64 0, i64 %47
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  tail call fastcc void @check_eliminable_occurrences(ptr noundef %57)
  br label %68

58:                                               ; preds = %50, %58
  %59 = phi i64 [ %63, %58 ], [ 0, %50 ]
  %60 = phi ptr [ %64, %58 ], [ %52, %50 ]
  %61 = getelementptr inbounds %struct.rtvec_def, ptr %60, i64 0, i32 1, i64 %59
  %62 = load ptr, ptr %61, align 8, !tbaa !6
  tail call fastcc void @check_eliminable_occurrences(ptr noundef %62)
  %63 = add nuw nsw i64 %59, 1
  %64 = load ptr, ptr %51, align 8, !tbaa !17
  %65 = load i32, ptr %64, align 8, !tbaa !112
  %66 = sext i32 %65 to i64
  %67 = icmp slt i64 %63, %66
  br i1 %67, label %58, label %68, !llvm.loop !334

68:                                               ; preds = %58, %50, %46, %55
  %69 = add nuw nsw i64 %47, 1
  %70 = getelementptr inbounds i8, ptr %48, i64 1
  %71 = icmp eq i64 %69, %45
  br i1 %71, label %72, label %46, !llvm.loop !335

72:                                               ; preds = %68, %30, %34, %36, %1
  ret void
}

declare i32 @recog(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @form_sum(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @alloc_reg_note(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtx_SUBREG(i32 noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @replace_equiv_address_nv(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @shallow_copy_rtx_stat(ptr noundef) local_unnamed_addr #3

declare ptr @gen_rtvec_v(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @spec_qsort(ptr noundef, i64 noundef, i64 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define internal i32 @reload_reg_class_lower(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) #13 {
  %3 = load i16, ptr %0, align 2, !tbaa !44
  %4 = sext i16 %3 to i32
  %5 = load i16, ptr %1, align 2, !tbaa !44
  %6 = sext i16 %5 to i32
  %7 = sext i16 %3 to i64
  %8 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %7, i32 18
  %9 = load i8, ptr %8, align 8
  %10 = and i8 %9, 1
  %11 = zext i8 %10 to i32
  %12 = sext i16 %5 to i64
  %13 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %12, i32 18
  %14 = load i8, ptr %13, align 8
  %15 = and i8 %14, 1
  %16 = zext i8 %15 to i32
  %17 = sub nsw i32 %11, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %48

19:                                               ; preds = %2
  %20 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %12, i32 2
  %21 = load i32, ptr %20, align 8, !tbaa !154
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [27 x i32], ptr @reg_class_size, i64 0, i64 %22
  %24 = load i32, ptr %23, align 4, !tbaa !21
  %25 = icmp eq i32 %24, 1
  %26 = zext i1 %25 to i32
  %27 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %7, i32 2
  %28 = load i32, ptr %27, align 8, !tbaa !154
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [27 x i32], ptr @reg_class_size, i64 0, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !21
  %32 = icmp eq i32 %31, 1
  %33 = sext i1 %32 to i32
  %34 = add nsw i32 %33, %26
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %48

36:                                               ; preds = %19
  %37 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %12, i32 6
  %38 = load i32, ptr %37, align 8, !tbaa !142
  %39 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %7, i32 6
  %40 = load i32, ptr %39, align 8, !tbaa !142
  %41 = sub i32 %38, %40
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %36
  %44 = sub nsw i32 %28, %21
  %45 = icmp eq i32 %28, %21
  %46 = sub nsw i32 %4, %6
  %47 = select i1 %45, i32 %46, i32 %44
  br label %48

48:                                               ; preds = %43, %36, %19, %2
  %49 = phi i32 [ %17, %2 ], [ %34, %19 ], [ %41, %36 ], [ %47, %43 ]
  ret i32 %49
}

declare i32 @bitmap_bit_p(ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @ira_better_spill_reload_regno_p(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @reg_mentioned_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_last_insn() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @substitute(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = load ptr, ptr %0, align 8, !tbaa !6
  %5 = icmp eq ptr %4, null
  br i1 %5, label %70, label %6

6:                                                ; preds = %3
  %7 = icmp eq ptr %4, %1
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = tail call i32 @rtx_equal_p(ptr noundef nonnull %4, ptr noundef %1) #19
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %28, label %11

11:                                               ; preds = %8, %6
  %12 = load ptr, ptr @substitute_stack, align 8, !tbaa !6
  %13 = icmp eq ptr %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.VEC_rtx_p_base, ptr %12, i64 0, i32 1
  %16 = load i32, ptr %15, align 4, !tbaa !336
  %17 = load i32, ptr %12, align 8, !tbaa !159
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %14, %11
  %20 = tail call ptr @vec_heap_p_reserve(ptr noundef %12, i32 noundef 1) #19
  store ptr %20, ptr @substitute_stack, align 8, !tbaa !6
  %21 = load i32, ptr %20, align 8, !tbaa !159
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %17, %14 ], [ %21, %19 ]
  %24 = phi ptr [ %12, %14 ], [ %20, %19 ]
  %25 = add i32 %23, 1
  store i32 %25, ptr %24, align 8, !tbaa !159
  %26 = zext i32 %23 to i64
  %27 = getelementptr inbounds %struct.VEC_rtx_p_base, ptr %24, i64 0, i32 2, i64 %26
  store ptr %0, ptr %27, align 8, !tbaa !6
  store ptr %2, ptr %0, align 8, !tbaa !6
  br label %70

28:                                               ; preds = %8
  %29 = load ptr, ptr %0, align 8, !tbaa !6
  %30 = load i32, ptr %29, align 8
  %31 = and i32 %30, 65535
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %32
  %34 = load ptr, ptr %33, align 8, !tbaa !6
  %35 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %32
  %36 = load i8, ptr %35, align 1, !tbaa !17
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %70, label %38

38:                                               ; preds = %28
  %39 = zext i8 %36 to i64
  br label %40

40:                                               ; preds = %38, %68
  %41 = phi i64 [ %39, %38 ], [ %42, %68 ]
  %42 = add nsw i64 %41, -1
  %43 = getelementptr inbounds i8, ptr %34, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !17
  switch i8 %44, label %68 [
    i8 69, label %45
    i8 101, label %64
  ]

45:                                               ; preds = %40
  %46 = load ptr, ptr %0, align 8, !tbaa !6
  %47 = getelementptr inbounds %struct.rtx_def, ptr %46, i64 0, i32 1
  %48 = getelementptr inbounds [1 x %union.rtunion_def], ptr %47, i64 0, i64 %42
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  %50 = load i32, ptr %49, align 8, !tbaa !112
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %68

52:                                               ; preds = %45
  %53 = zext i32 %50 to i64
  br label %54

54:                                               ; preds = %52, %54
  %55 = phi i64 [ %53, %52 ], [ %56, %54 ]
  %56 = add nsw i64 %55, -1
  %57 = load ptr, ptr %0, align 8, !tbaa !6
  %58 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %59 = getelementptr inbounds [1 x %union.rtunion_def], ptr %58, i64 0, i64 %42
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = and i64 %56, 4294967295
  %62 = getelementptr inbounds %struct.rtvec_def, ptr %60, i64 0, i32 1, i64 %61
  tail call fastcc void @substitute(ptr noundef nonnull %62, ptr noundef %1, ptr noundef %2)
  %63 = icmp ugt i64 %55, 1
  br i1 %63, label %54, label %68, !llvm.loop !337

64:                                               ; preds = %40
  %65 = load ptr, ptr %0, align 8, !tbaa !6
  %66 = getelementptr inbounds %struct.rtx_def, ptr %65, i64 0, i32 1
  %67 = getelementptr inbounds [1 x %union.rtunion_def], ptr %66, i64 0, i64 %42
  tail call fastcc void @substitute(ptr noundef nonnull %67, ptr noundef %1, ptr noundef %2)
  br label %68

68:                                               ; preds = %54, %45, %40, %64
  %69 = icmp sgt i64 %41, 1
  br i1 %69, label %40, label %70, !llvm.loop !338

70:                                               ; preds = %68, %28, %3, %22
  ret void
}

declare ptr @gen_lowpart_common(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @emit_insn(ptr noundef) local_unnamed_addr #3

declare void @delete_insns_since(ptr noundef) local_unnamed_addr #3

declare ptr @vec_heap_p_reserve(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @error(ptr noundef, ...) local_unnamed_addr #3

declare void @debug_reload_to_stream(ptr noundef) local_unnamed_addr #3

declare void @_fatal_insn(ptr noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @prev_real_insn(ptr noundef) local_unnamed_addr #3

declare ptr @find_regno_note(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @side_effects_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal void @forget_old_reloads_1(ptr nocapture noundef readonly %0, ptr nocapture readnone %1, ptr noundef %2) #9 {
  br label %4

4:                                                ; preds = %8, %3
  %5 = phi ptr [ %0, %3 ], [ %10, %8 ]
  %6 = load i32, ptr %5, align 8
  %7 = trunc i32 %6 to i16
  switch i16 %7, label %252 [
    i16 39, label %8
    i16 37, label %11
  ]

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.rtx_def, ptr %5, i64 0, i32 1
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  br label %4, !llvm.loop !339

11:                                               ; preds = %4
  %12 = getelementptr i8, ptr %5, i64 8
  %13 = load i32, ptr %12, align 8, !tbaa !17
  %14 = icmp ugt i32 %13, 52
  br i1 %14, label %147, label %15

15:                                               ; preds = %11
  %16 = zext i32 %13 to i64
  %17 = lshr i32 %6, 16
  %18 = and i32 %17, 255
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %16, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !17
  %22 = icmp eq ptr %2, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %15
  %24 = zext i8 %21 to i32
  %25 = icmp eq i8 %21, 0
  br label %151

26:                                               ; preds = %15
  %27 = icmp eq i8 %21, 0
  br i1 %27, label %252, label %28

28:                                               ; preds = %26
  %29 = load i64, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %30 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %31 = icmp eq i32 %30, 0
  %32 = load i64, ptr @reg_is_output_reload, align 8
  br i1 %31, label %39, label %33

33:                                               ; preds = %28
  %34 = zext i8 %21 to i64
  %35 = and i64 %34, 1
  %36 = icmp eq i8 %21, 1
  br i1 %36, label %134, label %37

37:                                               ; preds = %33
  %38 = and i64 %34, 254
  br label %106

39:                                               ; preds = %28
  %40 = shl nuw nsw i64 %16, 3
  %41 = getelementptr i8, ptr @spill_reg_store, i64 %40
  %42 = zext i8 %21 to i64
  %43 = shl nuw nsw i64 %42, 3
  tail call void @llvm.memset.p0.i64(ptr align 8 %41, i8 0, i64 %43, i1 false), !tbaa !6
  %44 = zext i8 %21 to i64
  %45 = icmp ult i8 %21, 8
  br i1 %45, label %92, label %46

46:                                               ; preds = %39
  %47 = and i64 %44, 248
  %48 = insertelement <2 x i64> <i64 poison, i64 -1>, i64 %29, i64 0
  %49 = insertelement <2 x i64> poison, i64 %16, i64 0
  %50 = shufflevector <2 x i64> %49, <2 x i64> poison, <2 x i32> zeroinitializer
  %51 = add nuw nsw i64 %16, 2
  %52 = insertelement <2 x i64> poison, i64 %51, i64 0
  %53 = shufflevector <2 x i64> %52, <2 x i64> poison, <2 x i32> zeroinitializer
  %54 = add nuw nsw i64 %16, 4
  %55 = insertelement <2 x i64> poison, i64 %54, i64 0
  %56 = shufflevector <2 x i64> %55, <2 x i64> poison, <2 x i32> zeroinitializer
  %57 = add nuw nsw i64 %16, 6
  %58 = insertelement <2 x i64> poison, i64 %57, i64 0
  %59 = shufflevector <2 x i64> %58, <2 x i64> poison, <2 x i32> zeroinitializer
  br label %60

60:                                               ; preds = %60, %46
  %61 = phi i64 [ 0, %46 ], [ %83, %60 ]
  %62 = phi <2 x i64> [ <i64 0, i64 1>, %46 ], [ %84, %60 ]
  %63 = phi <2 x i64> [ %48, %46 ], [ %79, %60 ]
  %64 = phi <2 x i64> [ <i64 -1, i64 -1>, %46 ], [ %80, %60 ]
  %65 = phi <2 x i64> [ <i64 -1, i64 -1>, %46 ], [ %81, %60 ]
  %66 = phi <2 x i64> [ <i64 -1, i64 -1>, %46 ], [ %82, %60 ]
  %67 = add nuw nsw <2 x i64> %62, %50
  %68 = add <2 x i64> %53, %62
  %69 = add <2 x i64> %56, %62
  %70 = add <2 x i64> %59, %62
  %71 = shl nuw <2 x i64> <i64 1, i64 1>, %67
  %72 = shl nuw <2 x i64> <i64 1, i64 1>, %68
  %73 = shl nuw <2 x i64> <i64 1, i64 1>, %69
  %74 = shl nuw <2 x i64> <i64 1, i64 1>, %70
  %75 = xor <2 x i64> %71, <i64 -1, i64 -1>
  %76 = xor <2 x i64> %72, <i64 -1, i64 -1>
  %77 = xor <2 x i64> %73, <i64 -1, i64 -1>
  %78 = xor <2 x i64> %74, <i64 -1, i64 -1>
  %79 = and <2 x i64> %63, %75
  %80 = and <2 x i64> %64, %76
  %81 = and <2 x i64> %65, %77
  %82 = and <2 x i64> %66, %78
  %83 = add nuw i64 %61, 8
  %84 = add <2 x i64> %62, <i64 8, i64 8>
  %85 = icmp eq i64 %83, %47
  br i1 %85, label %86, label %60, !llvm.loop !340

86:                                               ; preds = %60
  %87 = and <2 x i64> %80, %79
  %88 = and <2 x i64> %81, %87
  %89 = and <2 x i64> %82, %88
  %90 = tail call i64 @llvm.vector.reduce.and.v2i64(<2 x i64> %89)
  %91 = icmp eq i64 %47, %44
  br i1 %91, label %104, label %92

92:                                               ; preds = %39, %86
  %93 = phi i64 [ 0, %39 ], [ %47, %86 ]
  %94 = phi i64 [ %29, %39 ], [ %90, %86 ]
  br label %95

95:                                               ; preds = %92, %95
  %96 = phi i64 [ %102, %95 ], [ %93, %92 ]
  %97 = phi i64 [ %101, %95 ], [ %94, %92 ]
  %98 = add nuw nsw i64 %96, %16
  %99 = shl nuw i64 1, %98
  %100 = xor i64 %99, -1
  %101 = and i64 %97, %100
  %102 = add nuw nsw i64 %96, 1
  %103 = icmp eq i64 %102, %44
  br i1 %103, label %104, label %95, !llvm.loop !341

104:                                              ; preds = %95, %86
  %105 = phi i64 [ %90, %86 ], [ %101, %95 ]
  store i64 %105, ptr @reg_reloaded_valid, align 8, !tbaa !40
  br label %147

106:                                              ; preds = %129, %37
  %107 = phi i64 [ 0, %37 ], [ %131, %129 ]
  %108 = phi i64 [ %29, %37 ], [ %130, %129 ]
  %109 = phi i64 [ 0, %37 ], [ %132, %129 ]
  %110 = add nuw nsw i64 %107, %16
  %111 = shl nuw i64 1, %110
  %112 = and i64 %32, %111
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %106
  %115 = xor i64 %111, -1
  %116 = and i64 %108, %115
  store i64 %116, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %117 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %110
  store ptr null, ptr %117, align 8, !tbaa !6
  br label %118

118:                                              ; preds = %106, %114
  %119 = phi i64 [ %108, %106 ], [ %116, %114 ]
  %120 = or i64 %107, 1
  %121 = add nuw nsw i64 %120, %16
  %122 = shl nuw i64 1, %121
  %123 = and i64 %32, %122
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %129

125:                                              ; preds = %118
  %126 = xor i64 %122, -1
  %127 = and i64 %119, %126
  store i64 %127, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %128 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %121
  store ptr null, ptr %128, align 8, !tbaa !6
  br label %129

129:                                              ; preds = %125, %118
  %130 = phi i64 [ %119, %118 ], [ %127, %125 ]
  %131 = add nuw nsw i64 %107, 2
  %132 = add i64 %109, 2
  %133 = icmp eq i64 %132, %38
  br i1 %133, label %134, label %106, !llvm.loop !342

134:                                              ; preds = %129, %33
  %135 = phi i64 [ 0, %33 ], [ %131, %129 ]
  %136 = phi i64 [ %29, %33 ], [ %130, %129 ]
  %137 = icmp eq i64 %35, 0
  br i1 %137, label %147, label %138

138:                                              ; preds = %134
  %139 = add nuw nsw i64 %135, %16
  %140 = shl nuw i64 1, %139
  %141 = and i64 %32, %140
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %147

143:                                              ; preds = %138
  %144 = xor i64 %140, -1
  %145 = and i64 %136, %144
  store i64 %145, ptr @reg_reloaded_valid, align 8, !tbaa !40
  %146 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %139
  store ptr null, ptr %146, align 8, !tbaa !6
  br label %147

147:                                              ; preds = %134, %143, %138, %104, %11
  %148 = phi i8 [ 1, %11 ], [ %21, %104 ], [ %21, %138 ], [ %21, %143 ], [ %21, %134 ]
  %149 = zext i8 %148 to i32
  %150 = icmp eq ptr %2, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %23, %147
  %152 = phi i32 [ %24, %23 ], [ %149, %147 ]
  %153 = phi i1 [ %25, %23 ], [ false, %147 ]
  br i1 %153, label %252, label %227

154:                                              ; preds = %147
  %155 = add nsw i32 %149, -1
  %156 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %154
  %159 = zext i32 %155 to i64
  br label %233

160:                                              ; preds = %154
  %161 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %162 = zext i32 %155 to i64
  %163 = zext i8 %148 to i64
  %164 = icmp ult i8 %148, 20
  %165 = sub nsw i32 0, %149
  %166 = icmp ugt i32 %13, %165
  %167 = select i1 %164, i1 true, i1 %166
  br i1 %167, label %186, label %168

168:                                              ; preds = %160
  %169 = and i64 %163, 240
  %170 = sub nsw i64 %162, %169
  br label %171

171:                                              ; preds = %171, %168
  %172 = phi i64 [ 0, %168 ], [ %182, %171 ]
  %173 = trunc i64 %172 to i32
  %174 = sub i32 %155, %173
  %175 = add i32 %13, %174
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds ptr, ptr %161, i64 %176
  %178 = getelementptr inbounds ptr, ptr %177, i64 -3
  store <4 x ptr> zeroinitializer, ptr %178, align 8, !tbaa !6
  %179 = getelementptr inbounds ptr, ptr %177, i64 -7
  store <4 x ptr> zeroinitializer, ptr %179, align 8, !tbaa !6
  %180 = getelementptr inbounds ptr, ptr %177, i64 -11
  store <4 x ptr> zeroinitializer, ptr %180, align 8, !tbaa !6
  %181 = getelementptr inbounds ptr, ptr %177, i64 -15
  store <4 x ptr> zeroinitializer, ptr %181, align 8, !tbaa !6
  %182 = add nuw i64 %172, 16
  %183 = icmp eq i64 %182, %169
  br i1 %183, label %184, label %171, !llvm.loop !343

184:                                              ; preds = %171
  %185 = icmp eq i64 %169, %163
  br i1 %185, label %252, label %186

186:                                              ; preds = %160, %184
  %187 = phi i64 [ %162, %160 ], [ %170, %184 ]
  %188 = add nsw i64 %187, 1
  %189 = and i64 %188, 3
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %201, label %191

191:                                              ; preds = %186, %191
  %192 = phi i64 [ %198, %191 ], [ %187, %186 ]
  %193 = phi i64 [ %199, %191 ], [ 0, %186 ]
  %194 = trunc i64 %192 to i32
  %195 = add i32 %13, %194
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds ptr, ptr %161, i64 %196
  store ptr null, ptr %197, align 8, !tbaa !6
  %198 = add nsw i64 %192, -1
  %199 = add i64 %193, 1
  %200 = icmp eq i64 %199, %189
  br i1 %200, label %201, label %191, !llvm.loop !344

201:                                              ; preds = %191, %186
  %202 = phi i64 [ %187, %186 ], [ %198, %191 ]
  %203 = icmp ult i64 %187, 3
  br i1 %203, label %252, label %204

204:                                              ; preds = %201, %204
  %205 = phi i64 [ %225, %204 ], [ %202, %201 ]
  %206 = trunc i64 %205 to i32
  %207 = add i32 %13, %206
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds ptr, ptr %161, i64 %208
  store ptr null, ptr %209, align 8, !tbaa !6
  %210 = trunc i64 %205 to i32
  %211 = add i32 %210, -1
  %212 = add i32 %13, %211
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds ptr, ptr %161, i64 %213
  store ptr null, ptr %214, align 8, !tbaa !6
  %215 = trunc i64 %205 to i32
  %216 = add i32 %215, -2
  %217 = add i32 %13, %216
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds ptr, ptr %161, i64 %218
  store ptr null, ptr %219, align 8, !tbaa !6
  %220 = add nsw i64 %205, -3
  %221 = trunc i64 %220 to i32
  %222 = add i32 %13, %221
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds ptr, ptr %161, i64 %223
  store ptr null, ptr %224, align 8, !tbaa !6
  %225 = add nsw i64 %205, -4
  %226 = icmp eq i64 %220, 0
  br i1 %226, label %252, label %204, !llvm.loop !345

227:                                              ; preds = %151, %227
  %228 = phi i32 [ %229, %227 ], [ %152, %151 ]
  %229 = add nsw i32 %228, -1
  %230 = add i32 %229, %13
  %231 = tail call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %2, i32 noundef %230) #19
  %232 = icmp eq i32 %229, 0
  br i1 %232, label %252, label %227, !llvm.loop !346

233:                                              ; preds = %158, %248
  %234 = phi i32 [ 1, %158 ], [ %249, %248 ]
  %235 = phi i64 [ %159, %158 ], [ %250, %248 ]
  %236 = icmp eq i32 %234, 0
  %237 = trunc i64 %235 to i32
  %238 = add i32 %13, %237
  br i1 %236, label %243, label %239

239:                                              ; preds = %233
  %240 = tail call i32 @bitmap_bit_p(ptr noundef nonnull @reg_has_output_reload, i32 noundef %238) #19
  %241 = icmp eq i32 %240, 0
  %242 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br i1 %241, label %243, label %248

243:                                              ; preds = %233, %239
  %244 = phi i32 [ %242, %239 ], [ 0, %233 ]
  %245 = load ptr, ptr @reg_last_reload_reg, align 8, !tbaa !6
  %246 = zext i32 %238 to i64
  %247 = getelementptr inbounds ptr, ptr %245, i64 %246
  store ptr null, ptr %247, align 8, !tbaa !6
  br label %248

248:                                              ; preds = %243, %239
  %249 = phi i32 [ %244, %243 ], [ %242, %239 ]
  %250 = add nsw i64 %235, -1
  %251 = icmp eq i64 %235, 0
  br i1 %251, label %252, label %233, !llvm.loop !347

252:                                              ; preds = %4, %227, %248, %201, %204, %184, %26, %151
  ret void
}

declare void @subst_reloads(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @choose_reload_regs_init(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  %3 = alloca i64, align 8
  %4 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %45

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  %8 = and i64 %7, 3
  %9 = icmp ult i32 %4, 4
  br i1 %9, label %33, label %10

10:                                               ; preds = %6
  %11 = and i64 %7, 4294967292
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %30, %12 ]
  %14 = phi i64 [ 0, %10 ], [ %31, %12 ]
  %15 = getelementptr inbounds ptr, ptr %1, i64 %13
  %16 = load ptr, ptr %15, align 8, !tbaa !6
  %17 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %13, i32 11
  store ptr %16, ptr %17, align 16, !tbaa !139
  %18 = or i64 %13, 1
  %19 = getelementptr inbounds ptr, ptr %1, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !6
  %21 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %18, i32 11
  store ptr %20, ptr %21, align 8, !tbaa !139
  %22 = or i64 %13, 2
  %23 = getelementptr inbounds ptr, ptr %1, i64 %22
  %24 = load ptr, ptr %23, align 8, !tbaa !6
  %25 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %22, i32 11
  store ptr %24, ptr %25, align 16, !tbaa !139
  %26 = or i64 %13, 3
  %27 = getelementptr inbounds ptr, ptr %1, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !6
  %29 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %26, i32 11
  store ptr %28, ptr %29, align 8, !tbaa !139
  %30 = add nuw nsw i64 %13, 4
  %31 = add i64 %14, 4
  %32 = icmp eq i64 %31, %11
  br i1 %32, label %33, label %12, !llvm.loop !216

33:                                               ; preds = %12, %6
  %34 = phi i64 [ 0, %6 ], [ %30, %12 ]
  %35 = icmp eq i64 %8, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %33, %36
  %37 = phi i64 [ %42, %36 ], [ %34, %33 ]
  %38 = phi i64 [ %43, %36 ], [ 0, %33 ]
  %39 = getelementptr inbounds ptr, ptr %1, i64 %37
  %40 = load ptr, ptr %39, align 8, !tbaa !6
  %41 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %37, i32 11
  store ptr %40, ptr %41, align 8, !tbaa !139
  %42 = add nuw nsw i64 %37, 1
  %43 = add i64 %38, 1
  %44 = icmp eq i64 %43, %8
  br i1 %44, label %45, label %36, !llvm.loop !348

45:                                               ; preds = %33, %36, %2
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(180) @reload_inherited, i8 0, i64 180, i1 false)
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(1440) @reload_override_in, i8 0, i64 1440, i1 false)
  store i64 0, ptr @reload_reg_used, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  store i64 0, ptr @reg_used_in_insn, align 8, !tbaa !40
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %3) #19
  store i64 0, ptr %3, align 8, !tbaa !40
  %46 = getelementptr inbounds %struct.insn_chain, ptr %0, i64 0, i32 6
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %3, ptr noundef nonnull %46) #19
  %47 = load i64, ptr %3, align 8, !tbaa !40
  %48 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %49 = or i64 %48, %47
  store i64 %49, ptr @reg_used_in_insn, align 8, !tbaa !40
  store i64 0, ptr %3, align 8, !tbaa !40
  %50 = getelementptr inbounds %struct.insn_chain, ptr %0, i64 0, i32 7
  call void @reg_set_to_hard_reg_set(ptr noundef nonnull %3, ptr noundef nonnull %50) #19
  %51 = load i64, ptr %3, align 8, !tbaa !40
  %52 = load i64, ptr @reg_used_in_insn, align 8, !tbaa !40
  %53 = or i64 %52, %51
  store i64 %53, ptr @reg_used_in_insn, align 8, !tbaa !40
  call void @compute_use_by_pseudos(ptr noundef nonnull @reg_used_in_insn, ptr noundef nonnull %46)
  call void @compute_use_by_pseudos(ptr noundef nonnull @reg_used_in_insn, ptr noundef nonnull %50)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %3) #19
  %54 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %45
  %57 = zext i32 %54 to i64
  %58 = shl nuw nsw i64 %57, 3
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_output, i8 0, i64 %58, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_input, i8 0, i64 %58, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_input_addr, i8 0, i64 %58, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_inpaddr_addr, i8 0, i64 %58, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_output_addr, i8 0, i64 %58, i1 false), !tbaa !40
  call void @llvm.memset.p0.i64(ptr nonnull align 16 @reload_reg_used_in_outaddr_addr, i8 0, i64 %58, i1 false), !tbaa !40
  br label %59

59:                                               ; preds = %56, %45
  %60 = getelementptr inbounds %struct.insn_chain, ptr %0, i64 0, i32 10
  %61 = load i64, ptr %60, align 8, !tbaa !176
  %62 = xor i64 %61, -1
  store i64 %62, ptr @reload_reg_unavailable, align 8, !tbaa !40
  store i64 0, ptr @reload_reg_used_for_inherit, align 8, !tbaa !40
  %63 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %86

65:                                               ; preds = %59, %81
  %66 = phi i32 [ %82, %81 ], [ %63, %59 ]
  %67 = phi i64 [ %83, %81 ], [ 0, %59 ]
  %68 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %67, i32 11
  %69 = load ptr, ptr %68, align 8, !tbaa !139
  %70 = icmp eq ptr %69, null
  br i1 %70, label %81, label %71

71:                                               ; preds = %65
  %72 = getelementptr i8, ptr %69, i64 8
  %73 = load i32, ptr %72, align 8, !tbaa !17
  %74 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %67, i32 12
  %75 = load i32, ptr %74, align 8, !tbaa !156
  %76 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %67, i32 17
  %77 = load i32, ptr %76, align 4, !tbaa !155
  %78 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %67, i32 5
  %79 = load i32, ptr %78, align 4, !tbaa !158
  call fastcc void @mark_reload_reg_in_use(i32 noundef %73, i32 noundef %75, i32 noundef %77, i32 noundef %79)
  %80 = load i32, ptr @n_reloads, align 4, !tbaa !21
  br label %81

81:                                               ; preds = %65, %71
  %82 = phi i32 [ %66, %65 ], [ %80, %71 ]
  %83 = add nuw nsw i64 %67, 1
  %84 = sext i32 %82 to i64
  %85 = icmp slt i64 %83, %84
  br i1 %85, label %65, label %86, !llvm.loop !224

86:                                               ; preds = %81, %59
  ret void
}

declare i32 @true_regnum(ptr noundef) local_unnamed_addr #3

declare i32 @subreg_regno(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @ix86_cannot_change_mode_class(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @subreg_regno_offset(i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @smallest_mode_for_size(i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @ix86_register_move_cost(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @ix86_memory_move_cost(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @secondary_reload_class(i8 noundef zeroext, i32 noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @ix86_secondary_memory_needed(i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @free_for_value_p(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, i32 noundef %7) unnamed_addr #9 {
  %9 = sext i32 %0 to i64
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %9, i64 %10
  %12 = load i8, ptr %11, align 1, !tbaa !17
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %221, label %14

14:                                               ; preds = %8
  %15 = add nsw i32 %2, 125
  %16 = add nsw i32 %2, 124
  %17 = shl nsw i32 %2, 2
  %18 = add nsw i32 %17, 4
  %19 = or i32 %17, 3
  %20 = or i32 %17, 2
  %21 = icmp eq i32 %3, 5
  %22 = icmp ne i32 %7, 0
  %23 = sext i32 %6 to i64
  %24 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %23, i32 1
  %25 = icmp eq i32 %3, 7
  %26 = icmp eq i32 %3, 0
  %27 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %23, i32 9
  %28 = zext i32 %6 to i64
  %29 = zext i8 %12 to i64
  br label %30

30:                                               ; preds = %14, %219
  %31 = phi i64 [ %29, %14 ], [ %32, %219 ]
  %32 = add nsw i64 %31, -1
  %33 = load i64, ptr @reload_reg_unavailable, align 8, !tbaa !40
  %34 = trunc i64 %32 to i32
  %35 = add i32 %34, %0
  %36 = zext i32 %35 to i64
  %37 = shl nuw i64 1, %36
  %38 = and i64 %33, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %221

40:                                               ; preds = %30
  %41 = load ptr, ptr getelementptr inbounds ([129 x ptr], ptr @const_int_rtx, i64 0, i64 64), align 16, !tbaa !6
  %42 = icmp ne ptr %41, %5
  %43 = select i1 %42, ptr %5, ptr null
  switch i32 %3, label %56 [
    i32 10, label %44
    i32 9, label %46
    i32 4, label %48
    i32 3, label %49
    i32 0, label %50
    i32 8, label %57
    i32 7, label %52
    i32 6, label %54
    i32 5, label %55
  ]

44:                                               ; preds = %40
  %45 = zext i1 %42 to i32
  br label %57

46:                                               ; preds = %40
  %47 = select i1 %42, i32 155, i32 1
  br label %57

48:                                               ; preds = %40
  br label %57

49:                                               ; preds = %40
  br label %57

50:                                               ; preds = %40
  %51 = select i1 %42, i32 123, i32 %18
  br label %57

52:                                               ; preds = %40
  %53 = select i1 %42, i32 123, i32 122
  br label %57

54:                                               ; preds = %40
  br label %57

55:                                               ; preds = %40
  br label %57

56:                                               ; preds = %40
  br label %57

57:                                               ; preds = %56, %55, %54, %52, %50, %49, %48, %46, %44, %40
  %58 = phi i32 [ 155, %56 ], [ %15, %55 ], [ %16, %54 ], [ %53, %52 ], [ %51, %50 ], [ %19, %49 ], [ %20, %48 ], [ %47, %46 ], [ %45, %44 ], [ 121, %40 ]
  %59 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %219

61:                                               ; preds = %57
  %62 = icmp ne ptr %43, null
  %63 = icmp eq ptr %43, null
  br label %64

64:                                               ; preds = %207, %61
  %65 = phi i64 [ 0, %61 ], [ %209, %207 ]
  %66 = phi i32 [ 0, %61 ], [ %208, %207 ]
  %67 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65
  %68 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 11
  %69 = load ptr, ptr %68, align 8, !tbaa !139
  %70 = icmp eq ptr %69, null
  br i1 %70, label %207, label %71

71:                                               ; preds = %64
  %72 = load i32, ptr %69, align 8
  %73 = and i32 %72, 65535
  %74 = icmp eq i32 %73, 37
  br i1 %74, label %75, label %207

75:                                               ; preds = %71
  %76 = tail call i32 @true_regnum(ptr noundef nonnull %69) #19
  %77 = sub i32 %35, %76
  %78 = getelementptr i8, ptr %69, i64 8
  %79 = load i32, ptr %78, align 8, !tbaa !17
  %80 = zext i32 %79 to i64
  %81 = load i32, ptr %69, align 8
  %82 = lshr i32 %81, 16
  %83 = and i32 %82, 255
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %80, i64 %84
  %86 = load i8, ptr %85, align 1, !tbaa !17
  %87 = zext i8 %86 to i32
  %88 = add nsw i32 %87, -1
  %89 = icmp ugt i32 %77, %88
  %90 = icmp eq i64 %65, %28
  %91 = or i1 %90, %89
  br i1 %91, label %207, label %92

92:                                               ; preds = %75
  %93 = load ptr, ptr %67, align 8, !tbaa !153
  %94 = tail call i32 @true_regnum(ptr noundef nonnull %69) #19
  %95 = icmp eq i32 %94, %0
  %96 = select i1 %95, ptr %93, ptr null
  %97 = icmp eq ptr %96, null
  br i1 %97, label %106, label %98

98:                                               ; preds = %92
  %99 = tail call i32 @rtx_equal_p(ptr noundef nonnull %96, ptr noundef %4) #19
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %106, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 1
  %103 = load ptr, ptr %102, align 8, !tbaa !152
  %104 = icmp ne ptr %103, null
  %105 = or i1 %62, %104
  br i1 %105, label %106, label %207

106:                                              ; preds = %101, %98, %92
  %107 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 17
  %108 = load i32, ptr %107, align 4, !tbaa !155
  switch i32 %108, label %221 [
    i32 10, label %187
    i32 4, label %109
    i32 3, label %130
    i32 0, label %142
    i32 8, label %147
    i32 7, label %155
    i32 2, label %156
    i32 1, label %157
    i32 6, label %158
    i32 5, label %170
    i32 9, label %174
  ]

109:                                              ; preds = %106
  switch i32 %3, label %125 [
    i32 3, label %110
    i32 0, label %117
  ]

110:                                              ; preds = %109
  %111 = add nuw nsw i64 %65, 1
  %112 = icmp eq i64 %111, %28
  %113 = and i1 %22, %112
  br i1 %113, label %114, label %125

114:                                              ; preds = %110
  %115 = load ptr, ptr %24, align 8, !tbaa !152
  %116 = icmp eq ptr %115, null
  br i1 %116, label %207, label %125

117:                                              ; preds = %109
  %118 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %119 = load i32, ptr %118, align 8, !tbaa !156
  %120 = icmp eq i32 %119, %2
  %121 = and i1 %22, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %117
  %123 = load ptr, ptr %24, align 8, !tbaa !152
  %124 = icmp eq ptr %123, null
  br i1 %124, label %207, label %125

125:                                              ; preds = %122, %117, %114, %110, %109
  %126 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %127 = load i32, ptr %126, align 8, !tbaa !156
  %128 = shl nsw i32 %127, 2
  %129 = or i32 %128, 2
  br label %187

130:                                              ; preds = %106
  %131 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %132 = load i32, ptr %131, align 8, !tbaa !156
  %133 = icmp eq i32 %132, %2
  %134 = and i1 %22, %133
  %135 = select i1 %26, i1 %134, i1 false
  br i1 %135, label %139, label %136

136:                                              ; preds = %130
  %137 = shl nsw i32 %132, 2
  %138 = or i32 %137, 3
  br label %187

139:                                              ; preds = %130
  %140 = load ptr, ptr %24, align 8, !tbaa !152
  %141 = icmp eq ptr %140, null
  br i1 %141, label %207, label %187

142:                                              ; preds = %106
  %143 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %144 = load i32, ptr %143, align 8, !tbaa !156
  %145 = shl nsw i32 %144, 2
  %146 = add nsw i32 %145, 4
  br label %187

147:                                              ; preds = %106
  br i1 %25, label %148, label %187

148:                                              ; preds = %147
  %149 = add nuw nsw i64 %65, 1
  %150 = icmp eq i64 %149, %28
  %151 = and i1 %22, %150
  br i1 %151, label %152, label %187

152:                                              ; preds = %148
  %153 = load ptr, ptr %24, align 8, !tbaa !152
  %154 = icmp eq ptr %153, null
  br i1 %154, label %207, label %187

155:                                              ; preds = %106
  br label %187

156:                                              ; preds = %106
  br label %187

157:                                              ; preds = %106
  br label %187

158:                                              ; preds = %106
  br i1 %21, label %159, label %166

159:                                              ; preds = %158
  %160 = add nuw nsw i64 %65, 1
  %161 = icmp eq i64 %160, %28
  %162 = and i1 %22, %161
  br i1 %162, label %163, label %166

163:                                              ; preds = %159
  %164 = load ptr, ptr %24, align 8, !tbaa !152
  %165 = icmp eq ptr %164, null
  br i1 %165, label %207, label %166

166:                                              ; preds = %163, %159, %158
  %167 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %168 = load i32, ptr %167, align 8, !tbaa !156
  %169 = add nsw i32 %168, 124
  br label %187

170:                                              ; preds = %106
  %171 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 12
  %172 = load i32, ptr %171, align 8, !tbaa !156
  %173 = add nsw i32 %172, 125
  br label %187

174:                                              ; preds = %106
  %175 = load ptr, ptr %67, align 8, !tbaa !153
  %176 = icmp eq ptr %175, null
  br i1 %176, label %180, label %177

177:                                              ; preds = %174
  %178 = tail call i32 @rtx_equal_p(ptr noundef %96, ptr noundef %4) #19
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %186, label %180

180:                                              ; preds = %177, %174
  %181 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 1
  %182 = load ptr, ptr %181, align 8, !tbaa !152
  %183 = tail call i32 @earlyclobber_operand_p(ptr noundef %182) #19
  %184 = icmp eq i32 %183, 0
  %185 = select i1 %184, i32 124, i32 123
  br label %187

186:                                              ; preds = %177
  br i1 %63, label %187, label %221

187:                                              ; preds = %139, %136, %186, %180, %170, %166, %157, %156, %155, %152, %148, %147, %142, %125, %106
  %188 = phi i32 [ %66, %186 ], [ %66, %170 ], [ %66, %166 ], [ %66, %157 ], [ %66, %156 ], [ 1, %155 ], [ 1, %142 ], [ %66, %125 ], [ %66, %106 ], [ %66, %152 ], [ %66, %148 ], [ %66, %147 ], [ %66, %180 ], [ %66, %136 ], [ %66, %139 ]
  %189 = phi i32 [ 1, %186 ], [ %173, %170 ], [ %169, %166 ], [ 124, %157 ], [ 123, %156 ], [ 122, %155 ], [ %146, %142 ], [ %129, %125 ], [ 0, %106 ], [ 121, %152 ], [ 121, %148 ], [ 121, %147 ], [ %185, %180 ], [ %138, %136 ], [ %19, %139 ]
  %190 = icmp slt i32 %58, %189
  br i1 %190, label %201, label %191

191:                                              ; preds = %187
  %192 = load ptr, ptr %67, align 8, !tbaa !153
  %193 = icmp eq ptr %192, null
  br i1 %193, label %221, label %194

194:                                              ; preds = %191
  %195 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %65, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !152
  %197 = icmp eq ptr %196, null
  br i1 %197, label %198, label %221

198:                                              ; preds = %194
  %199 = tail call i32 @rtx_equal_p(ptr noundef %96, ptr noundef %4) #19
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %221, label %201

201:                                              ; preds = %198, %187
  br i1 %63, label %207, label %202

202:                                              ; preds = %201
  %203 = load ptr, ptr %27, align 8, !tbaa !248
  %204 = icmp ne ptr %203, null
  %205 = icmp sgt i32 %189, 122
  %206 = and i1 %205, %204
  br i1 %206, label %221, label %207

207:                                              ; preds = %202, %201, %163, %152, %139, %122, %114, %101, %75, %71, %64
  %208 = phi i32 [ %66, %64 ], [ %66, %71 ], [ %66, %75 ], [ %66, %114 ], [ %66, %122 ], [ %66, %139 ], [ %66, %152 ], [ %66, %163 ], [ %188, %202 ], [ %188, %201 ], [ %66, %101 ]
  %209 = add nuw nsw i64 %65, 1
  %210 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %211 = sext i32 %210 to i64
  %212 = icmp slt i64 %209, %211
  br i1 %212, label %64, label %213, !llvm.loop !349

213:                                              ; preds = %207
  %214 = icmp ne i32 %208, 0
  %215 = and i1 %62, %214
  br i1 %215, label %216, label %219

216:                                              ; preds = %213
  %217 = tail call i32 @earlyclobber_operand_p(ptr noundef nonnull %43) #19
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %57, %213, %216
  %220 = icmp sgt i64 %31, 1
  br i1 %220, label %30, label %221, !llvm.loop !350

221:                                              ; preds = %219, %30, %216, %186, %106, %202, %198, %194, %191, %8
  %222 = phi i32 [ 1, %8 ], [ 0, %191 ], [ 0, %194 ], [ 0, %198 ], [ 0, %202 ], [ 0, %106 ], [ 0, %186 ], [ 1, %219 ], [ 0, %30 ], [ 0, %216 ]
  ret i32 %222
}

declare i32 @reg_overlap_mentioned_for_reload_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define internal fastcc void @mark_reload_reg_in_use(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #16 {
  %5 = zext i32 %0 to i64
  %6 = zext i32 %3 to i64
  %7 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %5, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !17
  %9 = zext i8 %8 to i32
  %10 = add i32 %9, %0
  %11 = icmp ugt i32 %10, %0
  br i1 %11, label %12, label %87

12:                                               ; preds = %4
  %13 = load i64, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  %14 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %15 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %16 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %17 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %18 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %19
  %21 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %19
  %22 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %19
  %23 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %19
  %24 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %19
  %25 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %19
  %26 = zext i32 %10 to i64
  br label %27

27:                                               ; preds = %12, %76
  %28 = phi i64 [ %5, %12 ], [ %84, %76 ]
  %29 = phi i64 [ %18, %12 ], [ %82, %76 ]
  %30 = phi i64 [ %17, %12 ], [ %81, %76 ]
  %31 = phi i64 [ %16, %12 ], [ %80, %76 ]
  %32 = phi i64 [ %15, %12 ], [ %79, %76 ]
  %33 = phi i64 [ %14, %12 ], [ %78, %76 ]
  %34 = phi i64 [ %13, %12 ], [ %83, %76 ]
  switch i32 %2, label %35 [
    i32 9, label %37
    i32 3, label %40
    i32 4, label %44
    i32 5, label %48
    i32 6, label %52
    i32 7, label %56
    i32 8, label %59
    i32 10, label %62
    i32 0, label %65
    i32 1, label %69
    i32 2, label %73
  ]

35:                                               ; preds = %27
  %36 = shl nuw i64 1, %28
  br label %76

37:                                               ; preds = %27
  %38 = shl nuw i64 1, %28
  %39 = or i64 %33, %38
  store i64 %39, ptr @reload_reg_used, align 8, !tbaa !40
  br label %76

40:                                               ; preds = %27
  %41 = shl nuw i64 1, %28
  %42 = load i64, ptr %25, align 8, !tbaa !40
  %43 = or i64 %42, %41
  store i64 %43, ptr %25, align 8, !tbaa !40
  br label %76

44:                                               ; preds = %27
  %45 = shl nuw i64 1, %28
  %46 = load i64, ptr %24, align 8, !tbaa !40
  %47 = or i64 %46, %45
  store i64 %47, ptr %24, align 8, !tbaa !40
  br label %76

48:                                               ; preds = %27
  %49 = shl nuw i64 1, %28
  %50 = load i64, ptr %23, align 8, !tbaa !40
  %51 = or i64 %50, %49
  store i64 %51, ptr %23, align 8, !tbaa !40
  br label %76

52:                                               ; preds = %27
  %53 = shl nuw i64 1, %28
  %54 = load i64, ptr %22, align 8, !tbaa !40
  %55 = or i64 %54, %53
  store i64 %55, ptr %22, align 8, !tbaa !40
  br label %76

56:                                               ; preds = %27
  %57 = shl nuw i64 1, %28
  %58 = or i64 %32, %57
  store i64 %58, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  br label %76

59:                                               ; preds = %27
  %60 = shl nuw i64 1, %28
  %61 = or i64 %31, %60
  store i64 %61, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  br label %76

62:                                               ; preds = %27
  %63 = shl nuw i64 1, %28
  %64 = or i64 %30, %63
  store i64 %64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  br label %76

65:                                               ; preds = %27
  %66 = shl nuw i64 1, %28
  %67 = load i64, ptr %21, align 8, !tbaa !40
  %68 = or i64 %67, %66
  store i64 %68, ptr %21, align 8, !tbaa !40
  br label %76

69:                                               ; preds = %27
  %70 = shl nuw i64 1, %28
  %71 = load i64, ptr %20, align 8, !tbaa !40
  %72 = or i64 %71, %70
  store i64 %72, ptr %20, align 8, !tbaa !40
  br label %76

73:                                               ; preds = %27
  %74 = shl nuw i64 1, %28
  %75 = or i64 %29, %74
  store i64 %75, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  br label %76

76:                                               ; preds = %35, %73, %69, %65, %62, %59, %56, %52, %48, %44, %40, %37
  %77 = phi i64 [ %36, %35 ], [ %74, %73 ], [ %70, %69 ], [ %66, %65 ], [ %63, %62 ], [ %60, %59 ], [ %57, %56 ], [ %53, %52 ], [ %49, %48 ], [ %45, %44 ], [ %41, %40 ], [ %38, %37 ]
  %78 = phi i64 [ %33, %35 ], [ %33, %73 ], [ %33, %69 ], [ %33, %65 ], [ %33, %62 ], [ %33, %59 ], [ %33, %56 ], [ %33, %52 ], [ %33, %48 ], [ %33, %44 ], [ %33, %40 ], [ %39, %37 ]
  %79 = phi i64 [ %32, %35 ], [ %32, %73 ], [ %32, %69 ], [ %32, %65 ], [ %32, %62 ], [ %32, %59 ], [ %58, %56 ], [ %32, %52 ], [ %32, %48 ], [ %32, %44 ], [ %32, %40 ], [ %32, %37 ]
  %80 = phi i64 [ %31, %35 ], [ %31, %73 ], [ %31, %69 ], [ %31, %65 ], [ %31, %62 ], [ %61, %59 ], [ %31, %56 ], [ %31, %52 ], [ %31, %48 ], [ %31, %44 ], [ %31, %40 ], [ %31, %37 ]
  %81 = phi i64 [ %30, %35 ], [ %30, %73 ], [ %30, %69 ], [ %30, %65 ], [ %64, %62 ], [ %30, %59 ], [ %30, %56 ], [ %30, %52 ], [ %30, %48 ], [ %30, %44 ], [ %30, %40 ], [ %30, %37 ]
  %82 = phi i64 [ %29, %35 ], [ %75, %73 ], [ %29, %69 ], [ %29, %65 ], [ %29, %62 ], [ %29, %59 ], [ %29, %56 ], [ %29, %52 ], [ %29, %48 ], [ %29, %44 ], [ %29, %40 ], [ %29, %37 ]
  %83 = or i64 %34, %77
  %84 = add nuw nsw i64 %28, 1
  %85 = icmp eq i64 %84, %26
  br i1 %85, label %86, label %27, !llvm.loop !223

86:                                               ; preds = %76
  store i64 %83, ptr @reload_reg_used_at_all, align 8, !tbaa !40
  br label %87

87:                                               ; preds = %86, %4
  ret void
}

declare i32 @reg_classes_intersect_p(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @find_equiv_reg(ptr noundef, ptr noundef, i32 noundef, i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @regno_clobbered_p(i32 noundef, ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare i32 @remove_address_replacements(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @clear_reload_reg_in_use(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = zext i32 %0 to i64
  %6 = zext i32 %3 to i64
  %7 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %5, i64 %6
  %8 = load i8, ptr %7, align 1, !tbaa !17
  %9 = zext i8 %8 to i32
  switch i32 %2, label %31 [
    i32 9, label %75
    i32 3, label %10
    i32 4, label %13
    i32 5, label %16
    i32 6, label %19
    i32 7, label %22
    i32 8, label %32
    i32 10, label %23
    i32 0, label %24
    i32 1, label %27
    i32 2, label %30
  ]

10:                                               ; preds = %4
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %11
  br label %75

13:                                               ; preds = %4
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %14
  br label %32

16:                                               ; preds = %4
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %17
  br label %75

19:                                               ; preds = %4
  %20 = sext i32 %1 to i64
  %21 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %20
  br label %32

22:                                               ; preds = %4
  br label %75

23:                                               ; preds = %4
  br label %32

24:                                               ; preds = %4
  %25 = sext i32 %1 to i64
  %26 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %25
  br label %75

27:                                               ; preds = %4
  %28 = sext i32 %1 to i64
  %29 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %28
  br label %75

30:                                               ; preds = %4
  br label %75

31:                                               ; preds = %4
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4775, ptr noundef nonnull @.str.2) #19
  br label %75

32:                                               ; preds = %19, %13, %23, %4
  %33 = phi i1 [ false, %13 ], [ false, %19 ], [ true, %23 ], [ true, %4 ]
  %34 = phi ptr [ %15, %13 ], [ %21, %19 ], [ @reload_reg_used_in_other_addr, %23 ], [ @reload_reg_used_in_op_addr_reload, %4 ]
  %35 = add i32 %9, %0
  %36 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %116

38:                                               ; preds = %32
  %39 = add nsw i32 %36, -1
  %40 = zext i32 %39 to i64
  br i1 %33, label %41, label %78

41:                                               ; preds = %38, %70
  %42 = phi i64 [ %73, %70 ], [ %40, %38 ]
  %43 = phi i32 [ %72, %70 ], [ %0, %38 ]
  %44 = phi i32 [ %71, %70 ], [ %35, %38 ]
  %45 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %42, i32 17
  %46 = load i32, ptr %45, align 4, !tbaa !155
  %47 = icmp eq i32 %46, %2
  br i1 %47, label %48, label %70

48:                                               ; preds = %41
  %49 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %42, i32 11
  %50 = load ptr, ptr %49, align 8, !tbaa !139
  %51 = icmp eq ptr %50, null
  br i1 %51, label %70, label %52

52:                                               ; preds = %48
  %53 = tail call i32 @true_regnum(ptr noundef nonnull %50) #19
  %54 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %42, i32 5
  %55 = load i32, ptr %54, align 4, !tbaa !158
  %56 = zext i32 %53 to i64
  %57 = sext i32 %55 to i64
  %58 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %56, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !17
  %60 = zext i8 %59 to i32
  %61 = add i32 %53, %60
  %62 = icmp ule i32 %53, %43
  %63 = icmp ugt i32 %61, %43
  %64 = select i1 %62, i1 %63, i1 false
  %65 = select i1 %64, i32 %61, i32 %43
  %66 = icmp ugt i32 %53, %65
  %67 = icmp ult i32 %53, %44
  %68 = select i1 %66, i1 %67, i1 false
  %69 = select i1 %68, i32 %53, i32 %44
  br label %70

70:                                               ; preds = %52, %48, %41
  %71 = phi i32 [ %69, %52 ], [ %44, %48 ], [ %44, %41 ]
  %72 = phi i32 [ %65, %52 ], [ %43, %48 ], [ %43, %41 ]
  %73 = add nsw i64 %42, -1
  %74 = icmp sgt i64 %42, 0
  br i1 %74, label %41, label %116, !llvm.loop !351

75:                                               ; preds = %4, %31, %30, %27, %24, %22, %16, %10
  %76 = phi ptr [ undef, %31 ], [ @reload_reg_used_in_insn, %30 ], [ %29, %27 ], [ %26, %24 ], [ @reload_reg_used_in_op_addr, %22 ], [ %18, %16 ], [ %12, %10 ], [ @reload_reg_used, %4 ]
  %77 = add i32 %9, %0
  br label %116

78:                                               ; preds = %38, %111
  %79 = phi i64 [ %114, %111 ], [ %40, %38 ]
  %80 = phi i32 [ %113, %111 ], [ %0, %38 ]
  %81 = phi i32 [ %112, %111 ], [ %35, %38 ]
  %82 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %79, i32 17
  %83 = load i32, ptr %82, align 4, !tbaa !155
  %84 = icmp eq i32 %83, %2
  br i1 %84, label %85, label %111

85:                                               ; preds = %78
  %86 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %79, i32 12
  %87 = load i32, ptr %86, align 8, !tbaa !156
  %88 = icmp eq i32 %87, %1
  br i1 %88, label %89, label %111

89:                                               ; preds = %85
  %90 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %79, i32 11
  %91 = load ptr, ptr %90, align 8, !tbaa !139
  %92 = icmp eq ptr %91, null
  br i1 %92, label %111, label %93

93:                                               ; preds = %89
  %94 = tail call i32 @true_regnum(ptr noundef nonnull %91) #19
  %95 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %79, i32 5
  %96 = load i32, ptr %95, align 4, !tbaa !158
  %97 = zext i32 %94 to i64
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %97, i64 %98
  %100 = load i8, ptr %99, align 1, !tbaa !17
  %101 = zext i8 %100 to i32
  %102 = add i32 %94, %101
  %103 = icmp ule i32 %94, %80
  %104 = icmp ugt i32 %102, %80
  %105 = select i1 %103, i1 %104, i1 false
  %106 = select i1 %105, i32 %102, i32 %80
  %107 = icmp ugt i32 %94, %106
  %108 = icmp ult i32 %94, %81
  %109 = select i1 %107, i1 %108, i1 false
  %110 = select i1 %109, i32 %94, i32 %81
  br label %111

111:                                              ; preds = %78, %85, %89, %93
  %112 = phi i32 [ %110, %93 ], [ %81, %89 ], [ %81, %85 ], [ %81, %78 ]
  %113 = phi i32 [ %106, %93 ], [ %80, %89 ], [ %80, %85 ], [ %80, %78 ]
  %114 = add nsw i64 %79, -1
  %115 = icmp sgt i64 %79, 0
  br i1 %115, label %78, label %116, !llvm.loop !351

116:                                              ; preds = %111, %70, %32, %75
  %117 = phi ptr [ %76, %75 ], [ %34, %32 ], [ %34, %70 ], [ %34, %111 ]
  %118 = phi i32 [ %77, %75 ], [ %35, %32 ], [ %71, %70 ], [ %112, %111 ]
  %119 = phi i32 [ %0, %75 ], [ %0, %32 ], [ %72, %70 ], [ %113, %111 ]
  %120 = icmp ult i32 %119, %118
  br i1 %120, label %121, label %178

121:                                              ; preds = %116
  %122 = load i64, ptr %117, align 8, !tbaa !40
  %123 = zext i32 %119 to i64
  %124 = zext i32 %118 to i64
  %125 = sub nsw i64 %124, %123
  %126 = icmp ult i64 %125, 8
  br i1 %126, label %165, label %127

127:                                              ; preds = %121
  %128 = and i64 %125, -8
  %129 = add nsw i64 %128, %123
  %130 = insertelement <2 x i64> poison, i64 %123, i64 0
  %131 = shufflevector <2 x i64> %130, <2 x i64> poison, <2 x i32> zeroinitializer
  %132 = add nuw nsw <2 x i64> %131, <i64 0, i64 1>
  %133 = insertelement <2 x i64> <i64 poison, i64 -1>, i64 %122, i64 0
  br label %134

134:                                              ; preds = %134, %127
  %135 = phi i64 [ 0, %127 ], [ %156, %134 ]
  %136 = phi <2 x i64> [ %132, %127 ], [ %157, %134 ]
  %137 = phi <2 x i64> [ %133, %127 ], [ %152, %134 ]
  %138 = phi <2 x i64> [ <i64 -1, i64 -1>, %127 ], [ %153, %134 ]
  %139 = phi <2 x i64> [ <i64 -1, i64 -1>, %127 ], [ %154, %134 ]
  %140 = phi <2 x i64> [ <i64 -1, i64 -1>, %127 ], [ %155, %134 ]
  %141 = add <2 x i64> %136, <i64 2, i64 2>
  %142 = add <2 x i64> %136, <i64 4, i64 4>
  %143 = add <2 x i64> %136, <i64 6, i64 6>
  %144 = shl nuw <2 x i64> <i64 1, i64 1>, %136
  %145 = shl nuw <2 x i64> <i64 1, i64 1>, %141
  %146 = shl nuw <2 x i64> <i64 1, i64 1>, %142
  %147 = shl nuw <2 x i64> <i64 1, i64 1>, %143
  %148 = xor <2 x i64> %144, <i64 -1, i64 -1>
  %149 = xor <2 x i64> %145, <i64 -1, i64 -1>
  %150 = xor <2 x i64> %146, <i64 -1, i64 -1>
  %151 = xor <2 x i64> %147, <i64 -1, i64 -1>
  %152 = and <2 x i64> %137, %148
  %153 = and <2 x i64> %138, %149
  %154 = and <2 x i64> %139, %150
  %155 = and <2 x i64> %140, %151
  %156 = add nuw i64 %135, 8
  %157 = add <2 x i64> %136, <i64 8, i64 8>
  %158 = icmp eq i64 %156, %128
  br i1 %158, label %159, label %134, !llvm.loop !352

159:                                              ; preds = %134
  %160 = and <2 x i64> %153, %152
  %161 = and <2 x i64> %154, %160
  %162 = and <2 x i64> %155, %161
  %163 = tail call i64 @llvm.vector.reduce.and.v2i64(<2 x i64> %162)
  %164 = icmp eq i64 %125, %128
  br i1 %164, label %176, label %165

165:                                              ; preds = %121, %159
  %166 = phi i64 [ %123, %121 ], [ %129, %159 ]
  %167 = phi i64 [ %122, %121 ], [ %163, %159 ]
  br label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %174, %168 ], [ %166, %165 ]
  %170 = phi i64 [ %173, %168 ], [ %167, %165 ]
  %171 = shl nuw i64 1, %169
  %172 = xor i64 %171, -1
  %173 = and i64 %170, %172
  %174 = add nuw nsw i64 %169, 1
  %175 = icmp eq i64 %174, %124
  br i1 %175, label %176, label %168, !llvm.loop !353

176:                                              ; preds = %168, %159
  %177 = phi i64 [ %163, %159 ], [ %173, %168 ]
  store i64 %177, ptr %117, align 8, !tbaa !40
  br label %178

178:                                              ; preds = %176, %116
  ret void
}

declare i32 @earlyclobber_operand_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @reload_reg_free_p(i32 noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  %4 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %5 = zext i32 %0 to i64
  %6 = shl nuw i64 1, %5
  %7 = and i64 %4, %6
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %304

9:                                                ; preds = %3
  %10 = load i64, ptr @reload_reg_unavailable, align 8, !tbaa !40
  %11 = and i64 %10, %6
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %304

13:                                               ; preds = %9
  switch i32 %2, label %303 [
    i32 9, label %29
    i32 0, label %84
    i32 3, label %127
    i32 4, label %151
    i32 5, label %170
    i32 6, label %190
    i32 7, label %24
    i32 8, label %19
    i32 1, label %240
    i32 2, label %14
    i32 10, label %299
  ]

14:                                               ; preds = %13
  %15 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %291

17:                                               ; preds = %14
  %18 = zext i32 %15 to i64
  br label %280

19:                                               ; preds = %13
  %20 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %236

22:                                               ; preds = %19
  %23 = zext i32 %20 to i64
  br label %230

24:                                               ; preds = %13
  %25 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %219

27:                                               ; preds = %24
  %28 = zext i32 %25 to i64
  br label %213

29:                                               ; preds = %13
  %30 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %31 = and i64 %30, %6
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %304

33:                                               ; preds = %29
  %34 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %35 = and i64 %34, %6
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %304

37:                                               ; preds = %33
  %38 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %39 = and i64 %38, %6
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %304

41:                                               ; preds = %37
  %42 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %43 = and i64 %42, %6
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %304

45:                                               ; preds = %41
  %46 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %304

48:                                               ; preds = %45
  %49 = zext i32 %46 to i64
  br label %53

50:                                               ; preds = %79
  %51 = add nuw nsw i64 %54, 1
  %52 = icmp eq i64 %51, %49
  br i1 %52, label %304, label %53, !llvm.loop !354

53:                                               ; preds = %48, %50
  %54 = phi i64 [ 0, %48 ], [ %51, %50 ]
  %55 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %54
  %56 = load i64, ptr %55, align 8, !tbaa !40
  %57 = and i64 %56, %6
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %304

59:                                               ; preds = %53
  %60 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %54
  %61 = load i64, ptr %60, align 8, !tbaa !40
  %62 = and i64 %61, %6
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %304

64:                                               ; preds = %59
  %65 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %54
  %66 = load i64, ptr %65, align 8, !tbaa !40
  %67 = and i64 %66, %6
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %304

69:                                               ; preds = %64
  %70 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %54
  %71 = load i64, ptr %70, align 8, !tbaa !40
  %72 = and i64 %71, %6
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %304

74:                                               ; preds = %69
  %75 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %54
  %76 = load i64, ptr %75, align 8, !tbaa !40
  %77 = and i64 %76, %6
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %304

79:                                               ; preds = %74
  %80 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %54
  %81 = load i64, ptr %80, align 8, !tbaa !40
  %82 = and i64 %81, %6
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %50, label %304

84:                                               ; preds = %13
  %85 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %86 = and i64 %85, %6
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %304

88:                                               ; preds = %84
  %89 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %90 = and i64 %89, %6
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %304

92:                                               ; preds = %88
  %93 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %94 = and i64 %93, %6
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %304

96:                                               ; preds = %92
  %97 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %96
  %100 = zext i32 %97 to i64
  br label %107

101:                                              ; preds = %107
  %102 = add nuw nsw i64 %108, 1
  %103 = icmp eq i64 %102, %100
  br i1 %103, label %104, label %107, !llvm.loop !355

104:                                              ; preds = %101, %96
  %105 = sext i32 %1 to i64
  %106 = sext i32 %97 to i64
  br label %113

107:                                              ; preds = %99, %101
  %108 = phi i64 [ 0, %99 ], [ %102, %101 ]
  %109 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %108
  %110 = load i64, ptr %109, align 8, !tbaa !40
  %111 = and i64 %110, %6
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %101, label %304

113:                                              ; preds = %104, %122
  %114 = phi i64 [ %105, %104 ], [ %115, %122 ]
  %115 = add nsw i64 %114, 1
  %116 = icmp sge i64 %115, %106
  br i1 %116, label %304, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %115
  %119 = load i64, ptr %118, align 8, !tbaa !40
  %120 = and i64 %119, %6
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %304

122:                                              ; preds = %117
  %123 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %115
  %124 = load i64, ptr %123, align 8, !tbaa !40
  %125 = and i64 %124, %6
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %113, label %304, !llvm.loop !356

127:                                              ; preds = %13
  %128 = sext i32 %1 to i64
  %129 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %128
  %130 = load i64, ptr %129, align 8, !tbaa !40
  %131 = and i64 %130, %6
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %304

133:                                              ; preds = %127
  %134 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %128
  %135 = load i64, ptr %134, align 8, !tbaa !40
  %136 = and i64 %135, %6
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %304

138:                                              ; preds = %133
  %139 = icmp sgt i32 %1, 0
  br i1 %139, label %140, label %304

140:                                              ; preds = %138
  %141 = zext i32 %1 to i64
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %148, %142 ]
  %144 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %143
  %145 = load i64, ptr %144, align 8, !tbaa !40
  %146 = and i64 %145, %6
  %147 = icmp eq i64 %146, 0
  %148 = add nuw nsw i64 %143, 1
  %149 = icmp ne i64 %148, %141
  %150 = select i1 %147, i1 %149, i1 false
  br i1 %150, label %142, label %304, !llvm.loop !357

151:                                              ; preds = %13
  %152 = sext i32 %1 to i64
  %153 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %152
  %154 = load i64, ptr %153, align 8, !tbaa !40
  %155 = and i64 %154, %6
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %304

157:                                              ; preds = %151
  %158 = icmp sgt i32 %1, 0
  br i1 %158, label %159, label %304

159:                                              ; preds = %157
  %160 = zext i32 %1 to i64
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %167, %161 ]
  %163 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %162
  %164 = load i64, ptr %163, align 8, !tbaa !40
  %165 = and i64 %164, %6
  %166 = icmp eq i64 %165, 0
  %167 = add nuw nsw i64 %162, 1
  %168 = icmp ne i64 %167, %160
  %169 = select i1 %166, i1 %168, i1 false
  br i1 %169, label %161, label %304, !llvm.loop !358

170:                                              ; preds = %13
  %171 = sext i32 %1 to i64
  %172 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %171
  %173 = load i64, ptr %172, align 8, !tbaa !40
  %174 = and i64 %173, %6
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %304

176:                                              ; preds = %170
  %177 = icmp slt i32 %1, 0
  br i1 %177, label %304, label %178

178:                                              ; preds = %176
  %179 = add nuw i32 %1, 1
  %180 = zext i32 %179 to i64
  br label %181

181:                                              ; preds = %181, %178
  %182 = phi i64 [ 0, %178 ], [ %187, %181 ]
  %183 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %182
  %184 = load i64, ptr %183, align 8, !tbaa !40
  %185 = and i64 %184, %6
  %186 = icmp eq i64 %185, 0
  %187 = add nuw nsw i64 %182, 1
  %188 = icmp ne i64 %187, %180
  %189 = select i1 %186, i1 %188, i1 false
  br i1 %189, label %181, label %304, !llvm.loop !359

190:                                              ; preds = %13
  %191 = sext i32 %1 to i64
  %192 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %191
  %193 = load i64, ptr %192, align 8, !tbaa !40
  %194 = and i64 %193, %6
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %304

196:                                              ; preds = %190
  %197 = icmp slt i32 %1, 0
  br i1 %197, label %304, label %198

198:                                              ; preds = %196
  %199 = add nuw i32 %1, 1
  %200 = zext i32 %199 to i64
  br label %201

201:                                              ; preds = %201, %198
  %202 = phi i64 [ 0, %198 ], [ %207, %201 ]
  %203 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %202
  %204 = load i64, ptr %203, align 8, !tbaa !40
  %205 = and i64 %204, %6
  %206 = icmp eq i64 %205, 0
  %207 = add nuw nsw i64 %202, 1
  %208 = icmp ne i64 %207, %200
  %209 = select i1 %206, i1 %208, i1 false
  br i1 %209, label %201, label %304, !llvm.loop !360

210:                                              ; preds = %213
  %211 = add nuw nsw i64 %214, 1
  %212 = icmp eq i64 %211, %28
  br i1 %212, label %219, label %213, !llvm.loop !361

213:                                              ; preds = %27, %210
  %214 = phi i64 [ 0, %27 ], [ %211, %210 ]
  %215 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %214
  %216 = load i64, ptr %215, align 8, !tbaa !40
  %217 = and i64 %216, %6
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %210, label %304

219:                                              ; preds = %210, %24
  %220 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %221 = and i64 %220, %6
  %222 = icmp eq i64 %221, 0
  %223 = load i64, ptr @reload_reg_used_in_op_addr, align 8
  %224 = and i64 %223, %6
  %225 = icmp eq i64 %224, 0
  %226 = select i1 %222, i1 %225, i1 false
  br label %304

227:                                              ; preds = %230
  %228 = add nuw nsw i64 %231, 1
  %229 = icmp eq i64 %228, %23
  br i1 %229, label %236, label %230, !llvm.loop !362

230:                                              ; preds = %22, %227
  %231 = phi i64 [ 0, %22 ], [ %228, %227 ]
  %232 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %231
  %233 = load i64, ptr %232, align 8, !tbaa !40
  %234 = and i64 %233, %6
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %227, label %304

236:                                              ; preds = %227, %19
  %237 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %238 = and i64 %237, %6
  %239 = icmp eq i64 %238, 0
  br label %304

240:                                              ; preds = %13
  %241 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %242 = and i64 %241, %6
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %304

244:                                              ; preds = %240
  %245 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %246 = icmp sgt i32 %245, 0
  br i1 %246, label %247, label %252

247:                                              ; preds = %244
  %248 = zext i32 %245 to i64
  br label %257

249:                                              ; preds = %257
  %250 = add nuw nsw i64 %258, 1
  %251 = icmp eq i64 %250, %248
  br i1 %251, label %252, label %257, !llvm.loop !363

252:                                              ; preds = %249, %244
  %253 = icmp sgt i32 %245, %1
  br i1 %253, label %254, label %304

254:                                              ; preds = %252
  %255 = sext i32 %1 to i64
  %256 = sext i32 %245 to i64
  br label %266

257:                                              ; preds = %247, %249
  %258 = phi i64 [ 0, %247 ], [ %250, %249 ]
  %259 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %258
  %260 = load i64, ptr %259, align 8, !tbaa !40
  %261 = and i64 %260, %6
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %249, label %304

263:                                              ; preds = %272
  %264 = add nsw i64 %267, 1
  %265 = icmp eq i64 %264, %256
  br i1 %265, label %304, label %266, !llvm.loop !364

266:                                              ; preds = %254, %263
  %267 = phi i64 [ %255, %254 ], [ %264, %263 ]
  %268 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %267
  %269 = load i64, ptr %268, align 8, !tbaa !40
  %270 = and i64 %269, %6
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %272, label %304

272:                                              ; preds = %266
  %273 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %267
  %274 = load i64, ptr %273, align 8, !tbaa !40
  %275 = and i64 %274, %6
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %263, label %304

277:                                              ; preds = %286
  %278 = add nuw nsw i64 %281, 1
  %279 = icmp eq i64 %278, %18
  br i1 %279, label %291, label %280, !llvm.loop !365

280:                                              ; preds = %17, %277
  %281 = phi i64 [ 0, %17 ], [ %278, %277 ]
  %282 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %281
  %283 = load i64, ptr %282, align 8, !tbaa !40
  %284 = and i64 %283, %6
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %304

286:                                              ; preds = %280
  %287 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %281
  %288 = load i64, ptr %287, align 8, !tbaa !40
  %289 = and i64 %288, %6
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %277, label %304

291:                                              ; preds = %277, %14
  %292 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %293 = and i64 %292, %6
  %294 = icmp eq i64 %293, 0
  %295 = load i64, ptr @reload_reg_used_in_op_addr, align 8
  %296 = and i64 %295, %6
  %297 = icmp eq i64 %296, 0
  %298 = select i1 %294, i1 %297, i1 false
  br label %304

299:                                              ; preds = %13
  %300 = load i64, ptr @reload_reg_used_in_other_addr, align 8, !tbaa !40
  %301 = and i64 %300, %6
  %302 = icmp eq i64 %301, 0
  br label %304

303:                                              ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 4972, ptr noundef nonnull @.str.2) #19
  br label %304

304:                                              ; preds = %280, %286, %257, %272, %266, %263, %230, %213, %201, %181, %161, %142, %107, %113, %117, %122, %79, %74, %69, %64, %59, %53, %50, %252, %196, %176, %157, %138, %45, %240, %190, %170, %151, %127, %133, %92, %84, %88, %29, %33, %37, %41, %3, %9, %303, %299, %291, %236, %219
  %305 = phi i1 [ false, %303 ], [ %302, %299 ], [ %298, %291 ], [ %239, %236 ], [ %226, %219 ], [ false, %9 ], [ false, %3 ], [ false, %41 ], [ false, %37 ], [ false, %33 ], [ false, %29 ], [ false, %88 ], [ false, %84 ], [ false, %92 ], [ false, %133 ], [ false, %127 ], [ false, %151 ], [ false, %170 ], [ false, %190 ], [ false, %240 ], [ true, %45 ], [ true, %138 ], [ true, %157 ], [ true, %176 ], [ true, %196 ], [ true, %252 ], [ false, %79 ], [ false, %74 ], [ false, %69 ], [ false, %64 ], [ false, %59 ], [ false, %53 ], [ true, %50 ], [ %116, %122 ], [ %116, %117 ], [ %116, %113 ], [ false, %107 ], [ %147, %142 ], [ %166, %161 ], [ %186, %181 ], [ %206, %201 ], [ false, %213 ], [ false, %230 ], [ false, %272 ], [ false, %266 ], [ true, %263 ], [ false, %257 ], [ false, %286 ], [ false, %280 ]
  %306 = zext i1 %305 to i32
  ret i32 %306
}

declare i32 @reg_overlap_mentioned_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @transfer_replacements(i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @emit_insn_before(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @reload_reg_reaches_end_p(i32 noundef %0, i32 noundef %1, i32 noundef %2) unnamed_addr #9 {
  switch i32 %2, label %249 [
    i32 9, label %250
    i32 10, label %19
    i32 3, label %76
    i32 4, label %76
    i32 0, label %13
    i32 7, label %4
    i32 8, label %6
    i32 2, label %226
    i32 1, label %228
    i32 5, label %228
    i32 6, label %228
  ]

4:                                                ; preds = %3
  %5 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  br label %165

6:                                                ; preds = %3
  %7 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %8 = icmp sgt i32 %7, 0
  %9 = zext i32 %0 to i64
  %10 = shl nuw i64 1, %9
  br i1 %8, label %11, label %214

11:                                               ; preds = %6
  %12 = zext i32 %7 to i64
  br label %198

13:                                               ; preds = %3
  %14 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %15 = zext i32 %0 to i64
  %16 = shl nuw i64 1, %15
  %17 = sext i32 %1 to i64
  %18 = sext i32 %14 to i64
  br label %146

19:                                               ; preds = %3
  %20 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %21 = icmp sgt i32 %20, 0
  %22 = zext i32 %0 to i64
  %23 = shl nuw i64 1, %22
  br i1 %21, label %24, label %60

24:                                               ; preds = %19
  %25 = zext i32 %20 to i64
  br label %29

26:                                               ; preds = %55
  %27 = add nuw nsw i64 %30, 1
  %28 = icmp eq i64 %27, %25
  br i1 %28, label %60, label %29, !llvm.loop !366

29:                                               ; preds = %24, %26
  %30 = phi i64 [ 0, %24 ], [ %27, %26 ]
  %31 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %30
  %32 = load i64, ptr %31, align 8, !tbaa !40
  %33 = and i64 %32, %23
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %250

35:                                               ; preds = %29
  %36 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %30
  %37 = load i64, ptr %36, align 8, !tbaa !40
  %38 = and i64 %37, %23
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %250

40:                                               ; preds = %35
  %41 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %30
  %42 = load i64, ptr %41, align 8, !tbaa !40
  %43 = and i64 %42, %23
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %250

45:                                               ; preds = %40
  %46 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %30
  %47 = load i64, ptr %46, align 8, !tbaa !40
  %48 = and i64 %47, %23
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %250

50:                                               ; preds = %45
  %51 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %30
  %52 = load i64, ptr %51, align 8, !tbaa !40
  %53 = and i64 %52, %23
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %250

55:                                               ; preds = %50
  %56 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %30
  %57 = load i64, ptr %56, align 8, !tbaa !40
  %58 = and i64 %57, %23
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %26, label %250

60:                                               ; preds = %26, %19
  %61 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %62 = and i64 %61, %23
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %250

64:                                               ; preds = %60
  %65 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %66 = and i64 %65, %23
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %250

68:                                               ; preds = %64
  %69 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %70 = and i64 %69, %23
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %250

72:                                               ; preds = %68
  %73 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %74 = and i64 %73, %23
  %75 = icmp eq i64 %74, 0
  br label %250

76:                                               ; preds = %3, %3
  %77 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  %78 = icmp sgt i32 %77, %1
  %79 = zext i32 %0 to i64
  %80 = shl nuw i64 1, %79
  %81 = sext i32 %1 to i64
  %82 = sext i32 %77 to i64
  br i1 %78, label %87, label %83

83:                                               ; preds = %84, %76
  br label %93

84:                                               ; preds = %87
  %85 = add nsw i64 %88, 1
  %86 = icmp eq i64 %85, %82
  br i1 %86, label %83, label %87, !llvm.loop !367

87:                                               ; preds = %76, %84
  %88 = phi i64 [ %85, %84 ], [ %81, %76 ]
  %89 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %88
  %90 = load i64, ptr %89, align 8, !tbaa !40
  %91 = and i64 %90, %80
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %84, label %250

93:                                               ; preds = %83, %106
  %94 = phi i64 [ %95, %106 ], [ %81, %83 ]
  %95 = add nsw i64 %94, 1
  %96 = icmp slt i64 %95, %82
  br i1 %96, label %101, label %97

97:                                               ; preds = %93
  %98 = icmp sgt i32 %77, 0
  br i1 %98, label %99, label %130

99:                                               ; preds = %97
  %100 = zext i32 %77 to i64
  br label %114

101:                                              ; preds = %93
  %102 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %95
  %103 = load i64, ptr %102, align 8, !tbaa !40
  %104 = and i64 %103, %80
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %250

106:                                              ; preds = %101
  %107 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %95
  %108 = load i64, ptr %107, align 8, !tbaa !40
  %109 = and i64 %108, %80
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %93, label %250, !llvm.loop !368

111:                                              ; preds = %125
  %112 = add nuw nsw i64 %115, 1
  %113 = icmp eq i64 %112, %100
  br i1 %113, label %130, label %114, !llvm.loop !369

114:                                              ; preds = %99, %111
  %115 = phi i64 [ 0, %99 ], [ %112, %111 ]
  %116 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %115
  %117 = load i64, ptr %116, align 8, !tbaa !40
  %118 = and i64 %117, %80
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %250

120:                                              ; preds = %114
  %121 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %115
  %122 = load i64, ptr %121, align 8, !tbaa !40
  %123 = and i64 %122, %80
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %250

125:                                              ; preds = %120
  %126 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %115
  %127 = load i64, ptr %126, align 8, !tbaa !40
  %128 = and i64 %127, %80
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %111, label %250

130:                                              ; preds = %111, %97
  %131 = load i64, ptr @reload_reg_used_in_op_addr_reload, align 8, !tbaa !40
  %132 = and i64 %131, %80
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %250

134:                                              ; preds = %130
  %135 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %136 = and i64 %135, %80
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %250

138:                                              ; preds = %134
  %139 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %140 = and i64 %139, %80
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %250

142:                                              ; preds = %138
  %143 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %144 = and i64 %143, %80
  %145 = icmp eq i64 %144, 0
  br label %250

146:                                              ; preds = %13, %160
  %147 = phi i64 [ %17, %13 ], [ %148, %160 ]
  %148 = add nsw i64 %147, 1
  %149 = icmp slt i64 %148, %18
  br i1 %149, label %150, label %165

150:                                              ; preds = %146
  %151 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input_addr, i64 0, i64 %148
  %152 = load i64, ptr %151, align 8, !tbaa !40
  %153 = and i64 %152, %16
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %250

155:                                              ; preds = %150
  %156 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_inpaddr_addr, i64 0, i64 %148
  %157 = load i64, ptr %156, align 8, !tbaa !40
  %158 = and i64 %157, %16
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %250

160:                                              ; preds = %155
  %161 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_input, i64 0, i64 %148
  %162 = load i64, ptr %161, align 8, !tbaa !40
  %163 = and i64 %162, %16
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %146, label %250, !llvm.loop !370

165:                                              ; preds = %146, %4
  %166 = phi i32 [ %5, %4 ], [ %14, %146 ]
  %167 = icmp sgt i32 %166, 0
  %168 = zext i32 %0 to i64
  %169 = shl nuw i64 1, %168
  br i1 %167, label %170, label %191

170:                                              ; preds = %165
  %171 = zext i32 %166 to i64
  br label %175

172:                                              ; preds = %186
  %173 = add nuw nsw i64 %176, 1
  %174 = icmp eq i64 %173, %171
  br i1 %174, label %191, label %175, !llvm.loop !371

175:                                              ; preds = %170, %172
  %176 = phi i64 [ 0, %170 ], [ %173, %172 ]
  %177 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %176
  %178 = load i64, ptr %177, align 8, !tbaa !40
  %179 = and i64 %178, %169
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %250

181:                                              ; preds = %175
  %182 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %176
  %183 = load i64, ptr %182, align 8, !tbaa !40
  %184 = and i64 %183, %169
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %250

186:                                              ; preds = %181
  %187 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %176
  %188 = load i64, ptr %187, align 8, !tbaa !40
  %189 = and i64 %188, %169
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %172, label %250

191:                                              ; preds = %172, %165
  %192 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %193 = and i64 %192, %169
  %194 = icmp eq i64 %193, 0
  br label %250

195:                                              ; preds = %209
  %196 = add nuw nsw i64 %199, 1
  %197 = icmp eq i64 %196, %12
  br i1 %197, label %214, label %198, !llvm.loop !372

198:                                              ; preds = %11, %195
  %199 = phi i64 [ 0, %11 ], [ %196, %195 ]
  %200 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %199
  %201 = load i64, ptr %200, align 8, !tbaa !40
  %202 = and i64 %201, %10
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %250

204:                                              ; preds = %198
  %205 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %199
  %206 = load i64, ptr %205, align 8, !tbaa !40
  %207 = and i64 %206, %10
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %250

209:                                              ; preds = %204
  %210 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output, i64 0, i64 %199
  %211 = load i64, ptr %210, align 8, !tbaa !40
  %212 = and i64 %211, %10
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %195, label %250

214:                                              ; preds = %195, %6
  %215 = load i64, ptr @reload_reg_used_in_op_addr, align 8, !tbaa !40
  %216 = and i64 %215, %10
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %250

218:                                              ; preds = %214
  %219 = load i64, ptr @reload_reg_used_in_insn, align 8, !tbaa !40
  %220 = and i64 %219, %10
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %250

222:                                              ; preds = %218
  %223 = load i64, ptr @reload_reg_used, align 8, !tbaa !40
  %224 = and i64 %223, %10
  %225 = icmp eq i64 %224, 0
  br label %250

226:                                              ; preds = %3
  %227 = load i32, ptr @reload_n_operands, align 4, !tbaa !21
  br label %228

228:                                              ; preds = %3, %3, %3, %226
  %229 = phi i32 [ %1, %3 ], [ %1, %3 ], [ %1, %3 ], [ %227, %226 ]
  %230 = icmp sgt i32 %229, 0
  br i1 %230, label %231, label %250

231:                                              ; preds = %228
  %232 = zext i32 %0 to i64
  %233 = shl nuw i64 1, %232
  %234 = zext i32 %229 to i64
  br label %238

235:                                              ; preds = %244
  %236 = add nuw nsw i64 %239, 1
  %237 = icmp eq i64 %236, %234
  br i1 %237, label %250, label %238, !llvm.loop !373

238:                                              ; preds = %231, %235
  %239 = phi i64 [ 0, %231 ], [ %236, %235 ]
  %240 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_output_addr, i64 0, i64 %239
  %241 = load i64, ptr %240, align 8, !tbaa !40
  %242 = and i64 %241, %233
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %244, label %250

244:                                              ; preds = %238
  %245 = getelementptr inbounds [30 x i64], ptr @reload_reg_used_in_outaddr_addr, i64 0, i64 %239
  %246 = load i64, ptr %245, align 8, !tbaa !40
  %247 = and i64 %246, %233
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %235, label %250

249:                                              ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 5110, ptr noundef nonnull @.str.2) #19
  br label %250

250:                                              ; preds = %244, %238, %235, %198, %204, %209, %150, %155, %160, %175, %181, %186, %87, %101, %106, %114, %120, %125, %29, %35, %40, %45, %50, %55, %228, %214, %218, %222, %134, %138, %142, %130, %60, %64, %68, %72, %3, %249, %191
  %251 = phi i1 [ false, %249 ], [ %194, %191 ], [ true, %3 ], [ false, %68 ], [ false, %64 ], [ false, %60 ], [ %75, %72 ], [ false, %130 ], [ false, %138 ], [ false, %134 ], [ %145, %142 ], [ false, %218 ], [ false, %214 ], [ %225, %222 ], [ true, %228 ], [ false, %55 ], [ false, %50 ], [ false, %45 ], [ false, %40 ], [ false, %35 ], [ false, %29 ], [ false, %125 ], [ false, %120 ], [ false, %114 ], [ false, %106 ], [ false, %101 ], [ false, %87 ], [ false, %186 ], [ false, %181 ], [ false, %175 ], [ false, %160 ], [ false, %155 ], [ false, %150 ], [ false, %209 ], [ false, %204 ], [ false, %198 ], [ false, %244 ], [ false, %238 ], [ true, %235 ]
  %252 = zext i1 %251 to i32
  ret i32 %252
}

declare ptr @reload_adjust_reg_for_mode(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @dead_or_set_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @delete_output_reload(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3) unnamed_addr #9 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [53 x ptr], ptr @spill_reg_store, i64 0, i64 %5
  %7 = load ptr, ptr %6, align 8, !tbaa !6
  %8 = load i32, ptr %7, align 8
  %9 = and i32 %8, 134217728
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %317

11:                                               ; preds = %4
  %12 = getelementptr inbounds [53 x ptr], ptr @spill_reg_stored_to, i64 0, i64 %5
  br label %13

13:                                               ; preds = %11, %13
  %14 = phi ptr [ %19, %13 ], [ %12, %11 ]
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i32, ptr %15, align 8
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, 39
  %19 = getelementptr %struct.rtx_def, ptr %15, i64 0, i32 1
  br i1 %18, label %13, label %20, !llvm.loop !374

20:                                               ; preds = %13
  %21 = load ptr, ptr @reg_equiv_memory_loc, align 8, !tbaa !6
  %22 = load i32, ptr %19, align 8, !tbaa !17
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds ptr, ptr %21, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !6
  %26 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %82

28:                                               ; preds = %20
  %29 = zext i32 %26 to i64
  br label %30

30:                                               ; preds = %28, %79
  %31 = phi i64 [ %29, %28 ], [ %33, %79 ]
  %32 = phi i32 [ 0, %28 ], [ %80, %79 ]
  %33 = add nsw i64 %31, -1
  %34 = trunc i64 %33 to i32
  %35 = and i64 %33, 4294967295
  %36 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %35
  %37 = load ptr, ptr %36, align 8, !tbaa !153
  %38 = icmp eq ptr %37, null
  br i1 %38, label %79, label %39

39:                                               ; preds = %30
  %40 = load i32, ptr %37, align 8
  %41 = and i32 %40, 65535
  %42 = icmp eq i32 %41, 43
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %35
  %45 = load ptr, ptr %44, align 8, !tbaa !6
  %46 = icmp eq ptr %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %43, %39
  %48 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %35, i32 8
  %49 = load ptr, ptr %48, align 8, !tbaa !225
  %50 = load i32, ptr %49, align 8
  br label %51

51:                                               ; preds = %47, %43
  %52 = phi i32 [ %50, %47 ], [ %40, %43 ]
  %53 = phi ptr [ %49, %47 ], [ %37, %43 ]
  %54 = and i32 %52, 65535
  %55 = icmp eq i32 %54, 39
  br i1 %55, label %56, label %63

56:                                               ; preds = %51, %56
  %57 = phi ptr [ %59, %56 ], [ %53, %51 ]
  %58 = getelementptr inbounds %struct.rtx_def, ptr %57, i64 0, i32 1
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = load i32, ptr %59, align 8
  %61 = and i32 %60, 65535
  %62 = icmp eq i32 %61, 39
  br i1 %62, label %56, label %63, !llvm.loop !375

63:                                               ; preds = %56, %51
  %64 = phi ptr [ %53, %51 ], [ %59, %56 ]
  %65 = tail call i32 @rtx_equal_p(ptr noundef nonnull %64, ptr noundef nonnull %15) #19
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %35
  %69 = load i8, ptr %68, align 1, !tbaa !17
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %35
  %73 = load ptr, ptr %72, align 8, !tbaa !6
  %74 = icmp ne ptr %73, null
  %75 = icmp eq i32 %34, %1
  %76 = or i1 %74, %75
  br i1 %76, label %77, label %317

77:                                               ; preds = %71, %67
  %78 = add nsw i32 %32, 1
  br label %79

79:                                               ; preds = %30, %77, %63
  %80 = phi i32 [ %32, %63 ], [ %78, %77 ], [ %32, %30 ]
  %81 = icmp sgt i64 %31, 1
  br i1 %81, label %30, label %82, !llvm.loop !376

82:                                               ; preds = %79, %20
  %83 = phi i32 [ 0, %20 ], [ %80, %79 ]
  %84 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  %86 = tail call i32 @count_occurrences(ptr noundef %85, ptr noundef nonnull %15, i32 noundef 0) #19
  %87 = load i32, ptr %0, align 8
  %88 = and i32 %87, 65535
  %89 = icmp eq i32 %88, 10
  br i1 %89, label %90, label %97

90:                                               ; preds = %82
  %91 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1, i32 1, i32 0, i32 0, i64 2
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = icmp eq ptr %92, null
  br i1 %93, label %97, label %94

94:                                               ; preds = %90
  %95 = tail call i32 @count_occurrences(ptr noundef nonnull %92, ptr noundef nonnull %15, i32 noundef 0) #19
  %96 = add nsw i32 %95, %86
  br label %97

97:                                               ; preds = %94, %90, %82
  %98 = phi i32 [ %96, %94 ], [ %86, %90 ], [ %86, %82 ]
  %99 = icmp eq ptr %25, null
  br i1 %99, label %105, label %100

100:                                              ; preds = %97
  %101 = load ptr, ptr %84, align 8, !tbaa !17
  %102 = tail call fastcc ptr @eliminate_regs_1(ptr noundef nonnull %25, i32 noundef 0, ptr noundef null, i8 noundef zeroext 0)
  %103 = tail call i32 @count_occurrences(ptr noundef %101, ptr noundef %102, i32 noundef 0) #19
  %104 = add nsw i32 %103, %98
  br label %105

105:                                              ; preds = %100, %97
  %106 = phi i32 [ %104, %100 ], [ %98, %97 ]
  %107 = load ptr, ptr @reg_equiv_alt_mem_list, align 8, !tbaa !6
  %108 = load i32, ptr %19, align 8, !tbaa !17
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds ptr, ptr %107, i64 %109
  %111 = load ptr, ptr %110, align 8, !tbaa !17
  %112 = icmp eq ptr %111, null
  br i1 %112, label %129, label %113

113:                                              ; preds = %105, %121
  %114 = phi ptr [ %127, %121 ], [ %111, %105 ]
  %115 = phi i32 [ %125, %121 ], [ %106, %105 ]
  %116 = getelementptr inbounds %struct.rtx_def, ptr %114, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = tail call i32 @rtx_equal_p(ptr noundef %117, ptr noundef %25) #19
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %121, label %120

120:                                              ; preds = %113
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 8543, ptr noundef nonnull @.str.2) #19
  br label %121

121:                                              ; preds = %113, %120
  %122 = load ptr, ptr %84, align 8, !tbaa !17
  %123 = load ptr, ptr %116, align 8, !tbaa !17
  %124 = tail call i32 @count_occurrences(ptr noundef %122, ptr noundef %123, i32 noundef 0) #19
  %125 = add nsw i32 %124, %115
  %126 = getelementptr inbounds %struct.rtx_def, ptr %114, i64 0, i32 1, i32 0, i32 0, i64 1
  %127 = load ptr, ptr %126, align 8, !tbaa !17
  %128 = icmp eq ptr %127, null
  br i1 %128, label %129, label %113, !llvm.loop !377

129:                                              ; preds = %121, %105
  %130 = phi i32 [ %106, %105 ], [ %125, %121 ]
  %131 = icmp sgt i32 %130, %83
  br i1 %131, label %317, label %132

132:                                              ; preds = %129
  %133 = getelementptr inbounds %struct.rtx_def, ptr %7, i64 0, i32 1, i32 0, i32 0, i64 2
  %134 = load ptr, ptr %133, align 8, !tbaa !17
  %135 = icmp eq ptr %134, %0
  br i1 %135, label %183, label %136

136:                                              ; preds = %132, %179
  %137 = phi ptr [ %181, %179 ], [ %134, %132 ]
  %138 = load i32, ptr %137, align 8
  %139 = trunc i32 %138 to i16
  switch i16 %139, label %179 [
    i16 13, label %140
    i16 8, label %144
    i16 10, label %144
  ]

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.rtx_def, ptr %137, i64 1
  %142 = load i32, ptr %141, align 8, !tbaa !17
  %143 = icmp eq i32 %142, 10
  br i1 %143, label %317, label %179

144:                                              ; preds = %136, %136
  %145 = getelementptr inbounds %struct.rtx_def, ptr %137, i64 1
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  %147 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %15, ptr noundef %146) #19
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %179, label %149

149:                                              ; preds = %144
  %150 = load i32, ptr %137, align 8
  %151 = and i32 %150, 65535
  %152 = icmp eq i32 %151, 8
  br i1 %152, label %153, label %173

153:                                              ; preds = %149, %161
  %154 = phi i32 [ %167, %161 ], [ %130, %149 ]
  %155 = phi ptr [ %169, %161 ], [ %137, %149 ]
  %156 = getelementptr inbounds %struct.rtx_def, ptr %155, i64 1
  %157 = load ptr, ptr %156, align 8, !tbaa !17
  %158 = load i32, ptr %157, align 8
  %159 = and i32 %158, 65535
  %160 = icmp eq i32 %159, 24
  br i1 %160, label %161, label %173

161:                                              ; preds = %153
  %162 = getelementptr inbounds %struct.rtx_def, ptr %157, i64 0, i32 1
  %163 = load ptr, ptr %162, align 8, !tbaa !17
  %164 = tail call i32 @rtx_equal_p(ptr noundef nonnull %15, ptr noundef %163) #19
  %165 = icmp ne i32 %164, 0
  %166 = zext i1 %165 to i32
  %167 = add nsw i32 %154, %166
  %168 = getelementptr inbounds %struct.rtx_def, ptr %155, i64 0, i32 1, i32 0, i32 0, i64 2
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = load i32, ptr %169, align 8
  %171 = and i32 %170, 65535
  %172 = icmp eq i32 %171, 8
  br i1 %172, label %153, label %173, !llvm.loop !378

173:                                              ; preds = %153, %161, %149
  %174 = phi ptr [ %137, %149 ], [ %169, %161 ], [ %155, %153 ]
  %175 = phi i32 [ %130, %149 ], [ %167, %161 ], [ %154, %153 ]
  %176 = icmp sle i32 %175, %83
  %177 = icmp eq ptr %174, %0
  %178 = and i1 %177, %176
  br i1 %178, label %183, label %317

179:                                              ; preds = %136, %140, %144
  %180 = getelementptr inbounds %struct.rtx_def, ptr %137, i64 0, i32 1, i32 0, i32 0, i64 2
  %181 = load ptr, ptr %180, align 8, !tbaa !17
  %182 = icmp eq ptr %181, %0
  br i1 %182, label %183, label %136, !llvm.loop !379

183:                                              ; preds = %179, %132, %173
  %184 = load i32, ptr %15, align 8
  %185 = lshr i32 %184, 16
  %186 = and i32 %185, 255
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %5, i64 %187
  %189 = load i8, ptr %188, align 1, !tbaa !17
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %204, label %191

191:                                              ; preds = %183
  %192 = zext i8 %189 to i32
  %193 = add i32 %192, %2
  %194 = add i32 %193, -1
  %195 = sext i32 %194 to i64
  %196 = add nsw i32 %192, -1
  %197 = zext i32 %196 to i64
  %198 = sub nsw i64 %195, %197
  %199 = shl nsw i64 %198, 3
  %200 = getelementptr i8, ptr @spill_reg_store, i64 %199
  %201 = zext i8 %189 to i64
  %202 = shl nuw nsw i64 %201, 3
  tail call void @llvm.memset.p0.i64(ptr align 8 %200, i8 0, i64 %202, i1 false), !tbaa !6
  %203 = getelementptr i8, ptr @spill_reg_stored_to, i64 %199
  tail call void @llvm.memset.p0.i64(ptr align 8 %203, i8 0, i64 %202, i1 false), !tbaa !6
  br label %204

204:                                              ; preds = %191, %183
  %205 = sext i32 %1 to i64
  %206 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %205
  %207 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %205, i32 1
  %208 = load ptr, ptr %207, align 8, !tbaa !152
  %209 = load ptr, ptr %206, align 8, !tbaa !153
  %210 = icmp eq ptr %208, %209
  br i1 %210, label %315, label %211

211:                                              ; preds = %204
  %212 = load ptr, ptr @reg_info_p, align 8, !tbaa !6
  %213 = load i32, ptr %19, align 8, !tbaa !17
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds %struct.reg_info_t, ptr %212, i64 %214, i32 1
  %216 = load i32, ptr %215, align 4, !tbaa !264
  %217 = icmp eq i32 %216, 1
  br i1 %217, label %218, label %315

218:                                              ; preds = %211
  %219 = load ptr, ptr @regstat_n_sets_and_refs, align 8, !tbaa !6
  %220 = sext i32 %213 to i64
  %221 = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, ptr %219, i64 %220
  %222 = load i32, ptr %221, align 4, !tbaa !265
  %223 = icmp eq i32 %222, 1
  br i1 %223, label %224, label %315

224:                                              ; preds = %218
  %225 = getelementptr inbounds %struct.reg_info_t, ptr %212, i64 %214, i32 6
  %226 = load i32, ptr %225, align 4, !tbaa !380
  %227 = icmp sgt i32 %226, 1
  br i1 %227, label %228, label %315

228:                                              ; preds = %224
  %229 = tail call ptr @find_regno_note(ptr noundef nonnull %0, i32 noundef 1, i32 noundef %213) #19
  %230 = icmp eq ptr %229, null
  br i1 %230, label %315, label %231

231:                                              ; preds = %228
  %232 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %233 = load ptr, ptr %232, align 8, !tbaa !17
  %234 = icmp eq ptr %233, null
  br i1 %234, label %301, label %235

235:                                              ; preds = %231, %265
  %236 = phi ptr [ %267, %265 ], [ %233, %231 ]
  %237 = load i32, ptr %236, align 8
  %238 = and i32 %237, 65535
  %239 = add nsw i32 %238, -7
  %240 = icmp ult i32 %239, 4
  br i1 %240, label %241, label %255

241:                                              ; preds = %235
  %242 = getelementptr inbounds %struct.rtx_def, ptr %236, i64 1
  %243 = load ptr, ptr %242, align 8, !tbaa !17
  %244 = load i32, ptr %243, align 8
  %245 = and i32 %244, 65535
  %246 = icmp eq i32 %245, 23
  br i1 %246, label %250, label %247

247:                                              ; preds = %241
  %248 = tail call ptr @single_set_2(ptr noundef nonnull %236, ptr noundef nonnull %243) #19
  %249 = icmp eq ptr %248, null
  br i1 %249, label %255, label %250

250:                                              ; preds = %241, %247
  %251 = phi ptr [ %248, %247 ], [ %243, %241 ]
  %252 = getelementptr inbounds %struct.rtx_def, ptr %251, i64 0, i32 1
  %253 = load ptr, ptr %252, align 8, !tbaa !17
  %254 = icmp eq ptr %253, %15
  br i1 %254, label %265, label %255

255:                                              ; preds = %235, %250, %247
  %256 = load i32, ptr %236, align 8
  %257 = trunc i32 %256 to i16
  switch i16 %257, label %265 [
    i16 12, label %269
    i16 9, label %269
    i16 8, label %258
    i16 10, label %258
  ]

258:                                              ; preds = %255, %255
  %259 = getelementptr inbounds %struct.rtx_def, ptr %236, i64 1
  %260 = load ptr, ptr %259, align 8, !tbaa !17
  %261 = tail call i32 @reg_mentioned_p(ptr noundef nonnull %15, ptr noundef %260) #19
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %265, label %263

263:                                              ; preds = %258
  tail call fastcc void @delete_address_reloads(ptr noundef nonnull %7, ptr noundef nonnull %0)
  %264 = tail call ptr @delete_insn(ptr noundef nonnull %7) #19
  br label %317

265:                                              ; preds = %258, %255, %250
  %266 = getelementptr inbounds %struct.rtx_def, ptr %236, i64 0, i32 1, i32 0, i32 0, i64 1
  %267 = load ptr, ptr %266, align 8, !tbaa !17
  %268 = icmp eq ptr %267, null
  br i1 %268, label %269, label %235, !llvm.loop !381

269:                                              ; preds = %265, %255, %255
  %270 = load ptr, ptr %232, align 8, !tbaa !17
  %271 = icmp eq ptr %270, null
  br i1 %271, label %301, label %272

272:                                              ; preds = %269, %297
  %273 = phi ptr [ %299, %297 ], [ %270, %269 ]
  %274 = load i32, ptr %273, align 8
  %275 = and i32 %274, 65535
  %276 = add nsw i32 %275, -7
  %277 = icmp ult i32 %276, 4
  br i1 %277, label %278, label %294

278:                                              ; preds = %272
  %279 = getelementptr inbounds %struct.rtx_def, ptr %273, i64 1
  %280 = load ptr, ptr %279, align 8, !tbaa !17
  %281 = load i32, ptr %280, align 8
  %282 = and i32 %281, 65535
  %283 = icmp eq i32 %282, 23
  br i1 %283, label %287, label %284

284:                                              ; preds = %278
  %285 = tail call ptr @single_set_2(ptr noundef nonnull %273, ptr noundef nonnull %280) #19
  %286 = icmp eq ptr %285, null
  br i1 %286, label %294, label %287

287:                                              ; preds = %278, %284
  %288 = phi ptr [ %285, %284 ], [ %280, %278 ]
  %289 = getelementptr inbounds %struct.rtx_def, ptr %288, i64 0, i32 1
  %290 = load ptr, ptr %289, align 8, !tbaa !17
  %291 = icmp eq ptr %290, %15
  br i1 %291, label %292, label %294

292:                                              ; preds = %287
  tail call fastcc void @delete_address_reloads(ptr noundef nonnull %273, ptr noundef nonnull %0)
  %293 = tail call ptr @delete_insn(ptr noundef nonnull %273) #19
  br label %294

294:                                              ; preds = %272, %292, %287, %284
  %295 = load i32, ptr %273, align 8
  %296 = trunc i32 %295 to i16
  switch i16 %296, label %297 [
    i16 12, label %301
    i16 9, label %301
  ]

297:                                              ; preds = %294
  %298 = getelementptr inbounds %struct.rtx_def, ptr %273, i64 0, i32 1, i32 0, i32 0, i64 1
  %299 = load ptr, ptr %298, align 8, !tbaa !17
  %300 = icmp eq ptr %299, null
  br i1 %300, label %301, label %272, !llvm.loop !382

301:                                              ; preds = %297, %294, %294, %231, %269
  %302 = getelementptr i8, ptr %3, i64 8
  %303 = load i32, ptr %302, align 8, !tbaa !17
  %304 = trunc i32 %303 to i16
  %305 = load ptr, ptr @reg_renumber, align 8, !tbaa !6
  %306 = load i32, ptr %19, align 8, !tbaa !17
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i16, ptr %305, i64 %307
  store i16 %304, ptr %308, align 2, !tbaa !44
  %309 = load i8, ptr @ira_conflicts_p, align 1, !tbaa !17
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %313, label %311

311:                                              ; preds = %301
  %312 = load i32, ptr %19, align 8, !tbaa !17
  tail call void @ira_mark_allocation_change(i32 noundef %312) #19
  br label %313

313:                                              ; preds = %311, %301
  %314 = load i32, ptr %19, align 8, !tbaa !17
  tail call fastcc void @alter_reg(i32 noundef %314, i32 noundef -1, i8 noundef zeroext 0)
  br label %317

315:                                              ; preds = %228, %224, %218, %211, %204
  tail call fastcc void @delete_address_reloads(ptr noundef nonnull %7, ptr noundef nonnull %0)
  %316 = tail call ptr @delete_insn(ptr noundef nonnull %7) #19
  br label %317

317:                                              ; preds = %71, %140, %263, %313, %315, %173, %129, %4
  ret void
}

declare ptr @gen_lowpart_SUBREG(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @push_to_sequence(ptr noundef) local_unnamed_addr #3

declare i32 @count_occurrences(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @replace_rtx(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @reload_adjust_reg_for_temp(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = load ptr, ptr %0, align 8, !tbaa !6
  %6 = icmp eq ptr %5, null
  br i1 %6, label %69, label %7

7:                                                ; preds = %4
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds [27 x i64], ptr @reg_class_contents, i64 0, i64 %8
  %10 = zext i32 %3 to i64
  %11 = getelementptr i8, ptr %5, i64 8
  %12 = load i32, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %9, align 8, !tbaa !40
  %14 = zext i32 %12 to i64
  %15 = shl nuw i64 1, %14
  %16 = and i64 %15, %13
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %36, label %18

18:                                               ; preds = %7
  %19 = load i32, ptr %5, align 8
  %20 = lshr i32 %19, 16
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, %3
  br i1 %22, label %67, label %23

23:                                               ; preds = %18
  %24 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %12, i32 noundef %3) #19
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %14, i64 %10
  %28 = load i8, ptr %27, align 1, !tbaa !17
  %29 = load i32, ptr %5, align 8
  %30 = lshr i32 %29, 16
  %31 = and i32 %30, 255
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %14, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !17
  %35 = icmp ugt i8 %28, %34
  br i1 %35, label %36, label %64

36:                                               ; preds = %26, %23, %7
  %37 = icmp eq ptr %1, null
  br i1 %37, label %69, label %38

38:                                               ; preds = %36
  %39 = getelementptr i8, ptr %1, i64 8
  %40 = load i32, ptr %39, align 8, !tbaa !17
  %41 = load i64, ptr %9, align 8, !tbaa !40
  %42 = zext i32 %40 to i64
  %43 = shl nuw i64 1, %42
  %44 = and i64 %43, %41
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %69, label %46

46:                                               ; preds = %38
  %47 = load i32, ptr %1, align 8
  %48 = lshr i32 %47, 16
  %49 = and i32 %48, 255
  %50 = icmp eq i32 %49, %3
  br i1 %50, label %67, label %51

51:                                               ; preds = %46
  %52 = tail call zeroext i8 @ix86_hard_regno_mode_ok(i32 noundef %40, i32 noundef %3) #19
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %69, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %42, i64 %10
  %56 = load i8, ptr %55, align 1, !tbaa !17
  %57 = load i32, ptr %1, align 8
  %58 = lshr i32 %57, 16
  %59 = and i32 %58, 255
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [53 x [87 x i8]], ptr @hard_regno_nregs, i64 0, i64 %42, i64 %60
  %62 = load i8, ptr %61, align 1, !tbaa !17
  %63 = icmp ugt i8 %56, %62
  br i1 %63, label %69, label %64

64:                                               ; preds = %54, %26
  %65 = phi ptr [ %5, %26 ], [ %1, %54 ]
  %66 = tail call ptr @reload_adjust_reg_for_mode(ptr noundef nonnull %65, i32 noundef %3) #19
  br label %67

67:                                               ; preds = %18, %46, %64
  %68 = phi ptr [ %66, %64 ], [ %5, %18 ], [ %1, %46 ]
  store ptr %68, ptr %0, align 8, !tbaa !6
  br label %69

69:                                               ; preds = %36, %54, %51, %38, %4, %67
  %70 = phi i8 [ 1, %67 ], [ 0, %4 ], [ 0, %38 ], [ 0, %51 ], [ 0, %54 ], [ 0, %36 ]
  ret i8 %70
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @gen_reload(ptr noundef %0, ptr noundef %1, i32 noundef %2, i32 noundef %3) unnamed_addr #9 {
  %5 = tail call ptr @get_last_insn() #19
  %6 = load i32, ptr %1, align 8
  %7 = and i32 %6, 65535
  %8 = icmp eq i32 %7, 39
  br i1 %8, label %9, label %29

9:                                                ; preds = %4
  %10 = lshr i32 %6, 16
  %11 = and i32 %10, 255
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %12
  %14 = load i8, ptr %13, align 1, !tbaa !17
  %15 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i32, ptr %16, align 8
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !17
  %23 = icmp ugt i8 %14, %22
  br i1 %23, label %24, label %29

24:                                               ; preds = %9
  %25 = tail call ptr @gen_lowpart_common(i32 noundef %19, ptr noundef %0) #19
  %26 = icmp eq ptr %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = load ptr, ptr %15, align 8, !tbaa !17
  br label %53

29:                                               ; preds = %24, %9, %4
  %30 = load i32, ptr %0, align 8
  %31 = and i32 %30, 65535
  %32 = icmp eq i32 %31, 39
  br i1 %32, label %33, label %53

33:                                               ; preds = %29
  %34 = lshr i32 %30, 16
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %36
  %38 = load i8, ptr %37, align 1, !tbaa !17
  %39 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = load i32, ptr %40, align 8
  %42 = lshr i32 %41, 16
  %43 = and i32 %42, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %44
  %46 = load i8, ptr %45, align 1, !tbaa !17
  %47 = icmp ugt i8 %38, %46
  br i1 %47, label %48, label %53

48:                                               ; preds = %33
  %49 = tail call ptr @gen_lowpart_common(i32 noundef %43, ptr noundef nonnull %1) #19
  %50 = icmp eq ptr %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = load ptr, ptr %39, align 8, !tbaa !17
  br label %53

53:                                               ; preds = %29, %33, %48, %51, %27
  %54 = phi ptr [ %28, %27 ], [ %49, %51 ], [ %1, %48 ], [ %1, %33 ], [ %1, %29 ]
  %55 = phi ptr [ %25, %27 ], [ %52, %51 ], [ %0, %48 ], [ %0, %33 ], [ %0, %29 ]
  %56 = load i32, ptr %54, align 8
  %57 = trunc i32 %56 to i16
  switch i16 %57, label %250 [
    i16 49, label %58
    i16 37, label %189
    i16 39, label %183
  ]

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = load i32, ptr %60, align 8
  %62 = trunc i32 %61 to i16
  switch i16 %62, label %250 [
    i16 37, label %63
    i16 39, label %63
    i16 43, label %63
  ]

63:                                               ; preds = %58, %58, %58
  %64 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 0, i64 1
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  %66 = load i32, ptr %65, align 8
  %67 = trunc i32 %66 to i16
  switch i16 %67, label %68 [
    i16 37, label %76
    i16 39, label %76
  ]

68:                                               ; preds = %63
  %69 = and i32 %66, 65535
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %70
  %72 = load i32, ptr %71, align 4, !tbaa !17
  %73 = icmp eq i32 %72, 9
  %74 = icmp eq i32 %69, 43
  %75 = or i1 %74, %73
  br i1 %75, label %76, label %250

76:                                               ; preds = %63, %63, %68
  %77 = tail call ptr @find_replacement(ptr noundef nonnull %59) #19
  %78 = tail call ptr @find_replacement(ptr noundef nonnull %64) #19
  %79 = load ptr, ptr %64, align 8, !tbaa !17
  %80 = load i32, ptr %79, align 8
  %81 = and i32 %80, 65535
  %82 = icmp eq i32 %81, 37
  br i1 %82, label %83, label %91

83:                                               ; preds = %76
  %84 = getelementptr i8, ptr %55, i64 8
  %85 = load i32, ptr %84, align 8, !tbaa !17
  %86 = getelementptr i8, ptr %79, i64 8
  %87 = load i32, ptr %86, align 8, !tbaa !17
  %88 = icmp eq i32 %85, %87
  %89 = select i1 %88, ptr %78, ptr %77
  %90 = select i1 %88, ptr %77, ptr %78
  br label %91

91:                                               ; preds = %83, %76
  %92 = phi ptr [ %77, %76 ], [ %89, %83 ]
  %93 = phi ptr [ %78, %76 ], [ %90, %83 ]
  %94 = load ptr, ptr %59, align 8, !tbaa !17
  %95 = icmp eq ptr %92, %94
  %96 = icmp eq ptr %93, %79
  %97 = select i1 %95, i1 %96, i1 false
  br i1 %97, label %103, label %98

98:                                               ; preds = %91
  %99 = load i32, ptr %54, align 8
  %100 = lshr i32 %99, 16
  %101 = and i32 %100, 255
  %102 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 49, i32 noundef %101, ptr noundef %92, ptr noundef %93) #19
  br label %103

103:                                              ; preds = %91, %98
  %104 = phi ptr [ %102, %98 ], [ %54, %91 ]
  %105 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef %55, ptr noundef %104) #19
  %106 = tail call ptr @get_last_insn() #19
  %107 = tail call ptr @emit_insn(ptr noundef %105) #19
  %108 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 1, i32 1
  %109 = load i32, ptr %108, align 8, !tbaa !17
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %111, label %116

111:                                              ; preds = %103
  %112 = getelementptr inbounds %struct.rtx_def, ptr %107, i64 1
  %113 = load ptr, ptr %112, align 8, !tbaa !17
  %114 = tail call i32 @recog(ptr noundef %113, ptr noundef nonnull %107, ptr noundef null) #19
  store i32 %114, ptr %108, align 8, !tbaa !17
  %115 = icmp sgt i32 %114, -1
  br i1 %115, label %116, label %119

116:                                              ; preds = %111, %103
  tail call void @extract_insn(ptr noundef nonnull %107) #19
  %117 = tail call i32 @constrain_operands(i32 noundef 1) #19
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %341

119:                                              ; preds = %111, %116
  tail call void @delete_insns_since(ptr noundef %106) #19
  %120 = load i32, ptr %55, align 8
  %121 = lshr i32 %120, 16
  %122 = and i32 %121, 255
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds [159 x %struct.optab_d], ptr @optab_table, i64 0, i64 12, i32 4, i64 %123
  %125 = load i32, ptr %124, align 4, !tbaa !383
  %126 = load i32, ptr %93, align 8
  %127 = and i32 %126, 65535
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %128
  %130 = load i32, ptr %129, align 4, !tbaa !17
  %131 = freeze i32 %130
  %132 = icmp eq i32 %131, 9
  br i1 %132, label %152, label %133

133:                                              ; preds = %119
  %134 = trunc i32 %126 to i16
  switch i16 %134, label %139 [
    i16 43, label %152
    i16 39, label %152
    i16 37, label %135
  ]

135:                                              ; preds = %133
  %136 = getelementptr i8, ptr %93, i64 8
  %137 = load i32, ptr %136, align 8, !tbaa !17
  %138 = icmp ugt i32 %137, 52
  br i1 %138, label %152, label %139

139:                                              ; preds = %133, %135
  %140 = icmp eq i32 %125, 2956
  br i1 %140, label %153, label %141

141:                                              ; preds = %139
  %142 = sext i32 %125 to i64
  %143 = getelementptr inbounds [0 x %struct.insn_data], ptr @insn_data, i64 0, i64 %142, i32 3
  %144 = load ptr, ptr %143, align 8, !tbaa !272
  %145 = getelementptr inbounds %struct.insn_operand_data, ptr %144, i64 2
  %146 = load ptr, ptr %145, align 8, !tbaa !385
  %147 = getelementptr inbounds %struct.insn_operand_data, ptr %144, i64 2, i32 2
  %148 = load i16, ptr %147, align 8
  %149 = zext i16 %148 to i32
  %150 = tail call i32 %146(ptr noundef nonnull %93, i32 noundef %149) #19
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %133, %133, %119, %141, %135
  br label %153

153:                                              ; preds = %152, %141, %139
  %154 = phi ptr [ %93, %152 ], [ %92, %141 ], [ %92, %139 ]
  %155 = phi ptr [ %92, %152 ], [ %93, %141 ], [ %93, %139 ]
  tail call fastcc void @gen_reload(ptr noundef nonnull %55, ptr noundef %154, i32 noundef %2, i32 noundef %3)
  %156 = tail call i32 @rtx_equal_p(ptr noundef %154, ptr noundef %155) #19
  %157 = icmp eq i32 %156, 0
  %158 = select i1 %157, ptr %155, ptr %55
  %159 = tail call ptr @gen_add2_insn(ptr noundef nonnull %55, ptr noundef %158) #19
  %160 = tail call ptr @get_last_insn() #19
  %161 = tail call ptr @emit_insn(ptr noundef %159) #19
  %162 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 1, i32 1
  %163 = load i32, ptr %162, align 8, !tbaa !17
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %165, label %170

165:                                              ; preds = %153
  %166 = getelementptr inbounds %struct.rtx_def, ptr %161, i64 1
  %167 = load ptr, ptr %166, align 8, !tbaa !17
  %168 = tail call i32 @recog(ptr noundef %167, ptr noundef nonnull %161, ptr noundef null) #19
  store i32 %168, ptr %162, align 8, !tbaa !17
  %169 = icmp sgt i32 %168, -1
  br i1 %169, label %170, label %175

170:                                              ; preds = %165, %153
  tail call void @extract_insn(ptr noundef nonnull %161) #19
  %171 = tail call i32 @constrain_operands(i32 noundef 1) #19
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %175, label %173

173:                                              ; preds = %170
  %174 = tail call ptr @set_unique_reg_note(ptr noundef nonnull %161, i32 noundef 3, ptr noundef %104) #19
  br label %341

175:                                              ; preds = %165, %170
  tail call void @delete_insns_since(ptr noundef %160) #19
  %176 = tail call i32 @reg_overlap_mentioned_p(ptr noundef nonnull %55, ptr noundef %154) #19
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %179, label %178

178:                                              ; preds = %175
  tail call void @fancy_abort(ptr noundef nonnull @.str.1, i32 noundef 8381, ptr noundef nonnull @.str.2) #19
  br label %179

179:                                              ; preds = %178, %175
  tail call fastcc void @gen_reload(ptr noundef nonnull %55, ptr noundef %158, i32 noundef %2, i32 noundef %3)
  %180 = tail call ptr @gen_add2_insn(ptr noundef nonnull %55, ptr noundef %154) #19
  %181 = tail call ptr @emit_insn(ptr noundef %180) #19
  %182 = tail call ptr @set_unique_reg_note(ptr noundef %181, i32 noundef 3, ptr noundef %104) #19
  br label %337

183:                                              ; preds = %53
  %184 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1
  %185 = load ptr, ptr %184, align 8, !tbaa !17
  %186 = load i32, ptr %185, align 8
  %187 = and i32 %186, 65535
  %188 = icmp eq i32 %187, 37
  br i1 %188, label %189, label %250

189:                                              ; preds = %53, %183
  %190 = tail call i32 @reg_or_subregno(ptr noundef nonnull %54) #19
  %191 = icmp ult i32 %190, 53
  br i1 %191, label %192, label %250

192:                                              ; preds = %189
  %193 = load i32, ptr %55, align 8
  %194 = trunc i32 %193 to i16
  switch i16 %194, label %250 [
    i16 37, label %201
    i16 39, label %195
  ]

195:                                              ; preds = %192
  %196 = getelementptr inbounds %struct.rtx_def, ptr %55, i64 0, i32 1
  %197 = load ptr, ptr %196, align 8, !tbaa !17
  %198 = load i32, ptr %197, align 8
  %199 = and i32 %198, 65535
  %200 = icmp eq i32 %199, 37
  br i1 %200, label %201, label %250

201:                                              ; preds = %192, %195
  %202 = tail call i32 @reg_or_subregno(ptr noundef nonnull %55) #19
  %203 = icmp ult i32 %202, 53
  br i1 %203, label %204, label %250

204:                                              ; preds = %201
  %205 = tail call i32 @reg_or_subregno(ptr noundef nonnull %54) #19
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %206
  %208 = load i32, ptr %207, align 4, !tbaa !17
  %209 = tail call i32 @reg_or_subregno(ptr noundef nonnull %55) #19
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds [53 x i32], ptr @regclass_map, i64 0, i64 %210
  %212 = load i32, ptr %211, align 4, !tbaa !17
  %213 = load i32, ptr %55, align 8
  %214 = lshr i32 %213, 16
  %215 = and i32 %214, 255
  %216 = tail call i32 @ix86_secondary_memory_needed(i32 noundef %208, i32 noundef %212, i32 noundef %215, i32 noundef 1) #19
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %250, label %218

218:                                              ; preds = %204
  %219 = load i32, ptr %55, align 8
  %220 = lshr i32 %219, 16
  %221 = and i32 %220, 255
  %222 = tail call ptr @get_secondary_mem(ptr noundef nonnull %54, i32 noundef %221, i32 noundef %2, i32 noundef %3) #19
  %223 = load i32, ptr %222, align 8
  %224 = lshr i32 %223, 16
  %225 = and i32 %224, 255
  %226 = load i32, ptr %55, align 8
  %227 = lshr i32 %226, 16
  %228 = and i32 %227, 255
  %229 = icmp eq i32 %225, %228
  br i1 %229, label %237, label %230

230:                                              ; preds = %218
  %231 = getelementptr i8, ptr %55, i64 8
  %232 = load i32, ptr %231, align 8, !tbaa !17
  %233 = tail call ptr @gen_rtx_REG(i32 noundef %225, i32 noundef %232) #19
  %234 = load i32, ptr %222, align 8
  %235 = lshr i32 %234, 16
  %236 = and i32 %235, 255
  br label %237

237:                                              ; preds = %230, %218
  %238 = phi i32 [ %236, %230 ], [ %225, %218 ]
  %239 = phi ptr [ %233, %230 ], [ %55, %218 ]
  %240 = load i32, ptr %54, align 8
  %241 = lshr i32 %240, 16
  %242 = and i32 %241, 255
  %243 = icmp eq i32 %238, %242
  br i1 %243, label %248, label %244

244:                                              ; preds = %237
  %245 = getelementptr i8, ptr %54, i64 8
  %246 = load i32, ptr %245, align 8, !tbaa !17
  %247 = tail call ptr @gen_rtx_REG(i32 noundef %238, i32 noundef %246) #19
  br label %248

248:                                              ; preds = %244, %237
  %249 = phi ptr [ %247, %244 ], [ %54, %237 ]
  tail call fastcc void @gen_reload(ptr noundef nonnull %222, ptr noundef %249, i32 noundef %2, i32 noundef %3)
  tail call fastcc void @gen_reload(ptr noundef %239, ptr noundef nonnull %222, i32 noundef %2, i32 noundef %3)
  br label %337

250:                                              ; preds = %53, %58, %68, %192, %204, %201, %195, %189, %183
  %251 = load i32, ptr %55, align 8
  %252 = and i32 %251, 65535
  %253 = icmp eq i32 %252, 37
  %254 = load i32, ptr %54, align 8
  %255 = and i32 %254, 65535
  %256 = zext i32 %255 to i64
  br i1 %253, label %257, label %324

257:                                              ; preds = %250
  %258 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %256
  %259 = load i32, ptr %258, align 4, !tbaa !17
  %260 = icmp eq i32 %259, 4
  br i1 %260, label %261, label %324

261:                                              ; preds = %257
  %262 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1
  %263 = tail call ptr @find_replacement(ptr noundef nonnull %262) #19
  %264 = load ptr, ptr %262, align 8, !tbaa !17
  %265 = icmp eq ptr %263, %264
  br i1 %265, label %272, label %266

266:                                              ; preds = %261
  %267 = load i32, ptr %54, align 8
  %268 = and i32 %267, 65535
  %269 = lshr i32 %267, 16
  %270 = and i32 %269, 255
  %271 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %268, i32 noundef %270, ptr noundef %263) #19
  br label %272

272:                                              ; preds = %266, %261
  %273 = phi ptr [ %271, %266 ], [ %54, %261 ]
  %274 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %55, ptr noundef %273) #19
  %275 = tail call ptr @get_last_insn() #19
  %276 = tail call ptr @emit_insn(ptr noundef %274) #19
  %277 = getelementptr inbounds %struct.rtx_def, ptr %276, i64 1, i32 1
  %278 = load i32, ptr %277, align 8, !tbaa !17
  %279 = icmp slt i32 %278, 0
  br i1 %279, label %280, label %285

280:                                              ; preds = %272
  %281 = getelementptr inbounds %struct.rtx_def, ptr %276, i64 1
  %282 = load ptr, ptr %281, align 8, !tbaa !17
  %283 = tail call i32 @recog(ptr noundef %282, ptr noundef nonnull %276, ptr noundef null) #19
  store i32 %283, ptr %277, align 8, !tbaa !17
  %284 = icmp sgt i32 %283, -1
  br i1 %284, label %285, label %288

285:                                              ; preds = %280, %272
  tail call void @extract_insn(ptr noundef nonnull %276) #19
  %286 = tail call i32 @constrain_operands(i32 noundef 1) #19
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %341

288:                                              ; preds = %280, %285
  tail call void @delete_insns_since(ptr noundef %275) #19
  %289 = load i32, ptr %263, align 8
  %290 = lshr i32 %289, 16
  %291 = and i32 %290, 255
  %292 = load i32, ptr %55, align 8
  %293 = lshr i32 %292, 16
  %294 = and i32 %293, 255
  %295 = icmp eq i32 %291, %294
  br i1 %295, label %300, label %296

296:                                              ; preds = %288
  %297 = getelementptr i8, ptr %55, i64 8
  %298 = load i32, ptr %297, align 8, !tbaa !17
  %299 = tail call ptr @gen_rtx_REG(i32 noundef %291, i32 noundef %298) #19
  br label %300

300:                                              ; preds = %288, %296
  %301 = phi ptr [ %299, %296 ], [ %55, %288 ]
  tail call fastcc void @gen_reload(ptr noundef %301, ptr noundef nonnull %263, i32 noundef %2, i32 noundef %3)
  %302 = load i32, ptr %273, align 8
  %303 = and i32 %302, 65535
  %304 = lshr i32 %302, 16
  %305 = and i32 %304, 255
  %306 = tail call ptr @gen_rtx_fmt_e_stat(i32 noundef %303, i32 noundef %305, ptr noundef %301) #19
  %307 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %55, ptr noundef %306) #19
  %308 = tail call ptr @get_last_insn() #19
  %309 = tail call ptr @emit_insn(ptr noundef %307) #19
  %310 = getelementptr inbounds %struct.rtx_def, ptr %309, i64 1, i32 1
  %311 = load i32, ptr %310, align 8, !tbaa !17
  %312 = icmp slt i32 %311, 0
  br i1 %312, label %313, label %318

313:                                              ; preds = %300
  %314 = getelementptr inbounds %struct.rtx_def, ptr %309, i64 1
  %315 = load ptr, ptr %314, align 8, !tbaa !17
  %316 = tail call i32 @recog(ptr noundef %315, ptr noundef nonnull %309, ptr noundef null) #19
  store i32 %316, ptr %310, align 8, !tbaa !17
  %317 = icmp sgt i32 %316, -1
  br i1 %317, label %318, label %323

318:                                              ; preds = %313, %300
  tail call void @extract_insn(ptr noundef nonnull %309) #19
  %319 = tail call i32 @constrain_operands(i32 noundef 1) #19
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %323, label %321

321:                                              ; preds = %318
  %322 = tail call ptr @set_unique_reg_note(ptr noundef nonnull %309, i32 noundef 3, ptr noundef nonnull %273) #19
  br label %341

323:                                              ; preds = %318, %313
  tail call void @delete_insns_since(ptr noundef %308) #19
  tail call void @_fatal_insn(ptr noundef nonnull @.str.21, ptr noundef null, ptr noundef nonnull @.str.1, i32 noundef 8450, ptr noundef nonnull @.str.2) #19
  br label %337

324:                                              ; preds = %250, %257
  %325 = getelementptr inbounds [139 x i32], ptr @rtx_class, i64 0, i64 %256
  %326 = load i32, ptr %325, align 4, !tbaa !17
  %327 = and i32 %326, -2
  %328 = icmp eq i32 %327, 8
  %329 = icmp eq i32 %255, 39
  %330 = or i1 %329, %328
  br i1 %330, label %331, label %334

331:                                              ; preds = %324
  %332 = tail call ptr @gen_move_insn(ptr noundef nonnull %55, ptr noundef nonnull %54) #19
  %333 = tail call ptr @emit_insn(ptr noundef %332) #19
  tail call void @mark_jump_label(ptr noundef nonnull %54, ptr noundef %333, i32 noundef 0) #19
  br label %337

334:                                              ; preds = %324
  %335 = tail call ptr @gen_rtx_fmt_ee_stat(i32 noundef 23, i32 noundef 0, ptr noundef nonnull %55, ptr noundef nonnull %54) #19
  %336 = tail call ptr @emit_insn(ptr noundef %335) #19
  br label %337

337:                                              ; preds = %323, %179, %248, %331, %334
  %338 = icmp eq ptr %5, null
  br i1 %338, label %339, label %341

339:                                              ; preds = %337
  %340 = tail call ptr @get_insns() #19
  br label %341

341:                                              ; preds = %337, %285, %321, %116, %173, %339
  ret void
}

declare i32 @ix86_preferred_reload_class(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @copy_reg_eh_region_note_forward(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_insns() local_unnamed_addr #3

declare void @end_sequence() local_unnamed_addr #3

declare ptr @find_replacement(ptr noundef) local_unnamed_addr #3

declare ptr @gen_move_insn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_add2_insn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @gen_sub2_insn(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @scratch_reload_class(i32 noundef) local_unnamed_addr #3

declare ptr @set_unique_reg_note(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare i32 @reg_or_subregno(ptr noundef) local_unnamed_addr #3

declare ptr @get_secondary_mem(ptr noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare void @mark_jump_label(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @delete_address_reloads(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i32, ptr %0, align 8
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -7
  %6 = icmp ult i32 %5, 4
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i32, ptr %9, align 8
  %11 = and i32 %10, 65535
  %12 = icmp eq i32 %11, 23
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = tail call ptr @single_set_2(ptr noundef nonnull %0, ptr noundef nonnull %9) #19
  %15 = icmp eq ptr %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %7, %13
  %17 = phi ptr [ %14, %13 ], [ %9, %7 ]
  %18 = getelementptr inbounds %struct.rtx_def, ptr %17, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = load i32, ptr %19, align 8
  %21 = and i32 %20, 65535
  %22 = icmp eq i32 %21, 43
  br i1 %22, label %23, label %26

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.rtx_def, ptr %19, i64 0, i32 1
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  tail call fastcc void @delete_address_reloads_1(ptr noundef nonnull %0, ptr noundef %25, ptr noundef %1)
  br label %26

26:                                               ; preds = %2, %16, %23, %13
  %27 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = icmp ne ptr %28, null
  %32 = icmp ne ptr %30, null
  %33 = select i1 %31, i1 %32, i1 false
  br i1 %33, label %34, label %125

34:                                               ; preds = %26
  %35 = load i32, ptr %30, align 8
  %36 = and i32 %35, 65535
  %37 = add nsw i32 %36, -7
  %38 = icmp ult i32 %37, 4
  br i1 %38, label %39, label %47

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.rtx_def, ptr %30, i64 1
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = load i32, ptr %41, align 8
  %43 = and i32 %42, 65535
  %44 = icmp eq i32 %43, 23
  br i1 %44, label %47, label %45

45:                                               ; preds = %39
  %46 = tail call ptr @single_set_2(ptr noundef nonnull %30, ptr noundef nonnull %41) #19
  br label %47

47:                                               ; preds = %34, %39, %45
  %48 = phi ptr [ %46, %45 ], [ null, %34 ], [ %41, %39 ]
  %49 = load i32, ptr %28, align 8
  %50 = and i32 %49, 65535
  %51 = add nsw i32 %50, -7
  %52 = icmp ult i32 %51, 4
  br i1 %52, label %53, label %125

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.rtx_def, ptr %28, i64 1
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = load i32, ptr %55, align 8
  %57 = and i32 %56, 65535
  %58 = icmp eq i32 %57, 23
  br i1 %58, label %61, label %59

59:                                               ; preds = %53
  %60 = tail call ptr @single_set_2(ptr noundef nonnull %28, ptr noundef nonnull %55) #19
  br label %61

61:                                               ; preds = %53, %59
  %62 = phi ptr [ %60, %59 ], [ %55, %53 ]
  %63 = icmp ne ptr %48, null
  %64 = icmp ne ptr %62, null
  %65 = select i1 %63, i1 %64, i1 false
  br i1 %65, label %66, label %125

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.rtx_def, ptr %48, i64 0, i32 1
  %68 = getelementptr inbounds %struct.rtx_def, ptr %48, i64 0, i32 1, i32 0, i32 0, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !17
  %70 = load i32, ptr %69, align 8
  %71 = and i32 %70, 65535
  %72 = icmp eq i32 %71, 49
  br i1 %72, label %73, label %125

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.rtx_def, ptr %62, i64 0, i32 1
  %75 = getelementptr inbounds %struct.rtx_def, ptr %62, i64 0, i32 1, i32 0, i32 0, i64 1
  %76 = load ptr, ptr %75, align 8, !tbaa !17
  %77 = load i32, ptr %76, align 8
  %78 = and i32 %77, 65535
  %79 = icmp eq i32 %78, 49
  br i1 %79, label %80, label %125

80:                                               ; preds = %73
  %81 = getelementptr inbounds %struct.rtx_def, ptr %69, i64 0, i32 1, i32 0, i32 0, i64 1
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  %83 = load i32, ptr %82, align 8
  %84 = and i32 %83, 65535
  %85 = icmp eq i32 %84, 30
  br i1 %85, label %86, label %125

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.rtx_def, ptr %76, i64 0, i32 1, i32 0, i32 0, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = load i32, ptr %88, align 8
  %90 = and i32 %89, 65535
  %91 = icmp eq i32 %90, 30
  br i1 %91, label %92, label %125

92:                                               ; preds = %86
  %93 = load ptr, ptr %67, align 8, !tbaa !17
  %94 = load ptr, ptr %74, align 8, !tbaa !17
  %95 = tail call i32 @rtx_equal_p(ptr noundef %93, ptr noundef %94) #19
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %125, label %97

97:                                               ; preds = %92
  %98 = load ptr, ptr %68, align 8, !tbaa !17
  %99 = getelementptr inbounds %struct.rtx_def, ptr %98, i64 0, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = tail call i32 @rtx_equal_p(ptr noundef %93, ptr noundef %100) #19
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %125, label %103

103:                                              ; preds = %97
  %104 = load ptr, ptr %75, align 8, !tbaa !17
  %105 = getelementptr inbounds %struct.rtx_def, ptr %104, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = tail call i32 @rtx_equal_p(ptr noundef %93, ptr noundef %106) #19
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %125, label %109

109:                                              ; preds = %103
  %110 = load ptr, ptr %68, align 8, !tbaa !17
  %111 = getelementptr inbounds %struct.rtx_def, ptr %110, i64 0, i32 1, i32 0, i32 0, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !17
  %113 = getelementptr inbounds %struct.rtx_def, ptr %112, i64 0, i32 1
  %114 = load i64, ptr %113, align 8, !tbaa !17
  %115 = load ptr, ptr %75, align 8, !tbaa !17
  %116 = getelementptr inbounds %struct.rtx_def, ptr %115, i64 0, i32 1, i32 0, i32 0, i64 1
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = getelementptr inbounds %struct.rtx_def, ptr %117, i64 0, i32 1
  %119 = load i64, ptr %118, align 8, !tbaa !17
  %120 = sub nsw i64 0, %119
  %121 = icmp eq i64 %114, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %109
  %123 = tail call ptr @delete_related_insns(ptr noundef nonnull %28) #19
  %124 = tail call ptr @delete_related_insns(ptr noundef nonnull %30) #19
  br label %125

125:                                              ; preds = %47, %92, %97, %103, %109, %61, %66, %73, %80, %86, %26, %122
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @delete_address_reloads_1(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = load i32, ptr %1, align 8
  %5 = and i32 %4, 65535
  %6 = icmp eq i32 %5, 37
  br i1 %6, label %42, label %7

7:                                                ; preds = %3
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds [139 x ptr], ptr @rtx_format, i64 0, i64 %8
  %10 = load ptr, ptr %9, align 8, !tbaa !6
  %11 = getelementptr inbounds [139 x i8], ptr @rtx_length, i64 0, i64 %8
  %12 = load i8, ptr %11, align 1, !tbaa !17
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %187, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.rtx_def, ptr %1, i64 0, i32 1
  %16 = zext i8 %12 to i64
  br label %17

17:                                               ; preds = %14, %40
  %18 = phi i64 [ %16, %14 ], [ %19, %40 ]
  %19 = add nsw i64 %18, -1
  %20 = getelementptr inbounds i8, ptr %10, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !17
  switch i8 %21, label %40 [
    i8 101, label %22
    i8 69, label %25
  ]

22:                                               ; preds = %17
  %23 = getelementptr inbounds [1 x %union.rtunion_def], ptr %15, i64 0, i64 %19
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  tail call fastcc void @delete_address_reloads_1(ptr noundef %0, ptr noundef %24, ptr noundef %2)
  br label %40

25:                                               ; preds = %17
  %26 = getelementptr inbounds [1 x %union.rtunion_def], ptr %15, i64 0, i64 %19
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = load i32, ptr %27, align 8, !tbaa !112
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %40

30:                                               ; preds = %25
  %31 = zext i32 %28 to i64
  br label %32

32:                                               ; preds = %30, %32
  %33 = phi i64 [ %31, %30 ], [ %34, %32 ]
  %34 = add nsw i64 %33, -1
  %35 = load ptr, ptr %26, align 8, !tbaa !17
  %36 = and i64 %34, 4294967295
  %37 = getelementptr inbounds %struct.rtvec_def, ptr %35, i64 0, i32 1, i64 %36
  %38 = load ptr, ptr %37, align 8, !tbaa !6
  tail call fastcc void @delete_address_reloads_1(ptr noundef %0, ptr noundef %38, ptr noundef %2)
  %39 = icmp ugt i64 %33, 1
  br i1 %39, label %32, label %40, !llvm.loop !386

40:                                               ; preds = %32, %25, %17, %22
  %41 = icmp sgt i64 %18, 1
  br i1 %41, label %17, label %187, !llvm.loop !387

42:                                               ; preds = %3
  %43 = getelementptr i8, ptr %1, i64 8
  %44 = load i32, ptr %43, align 8, !tbaa !17
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %45
  %47 = load i16, ptr %46, align 2, !tbaa !44
  %48 = icmp slt i16 %47, 0
  br i1 %48, label %187, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = icmp eq ptr %51, null
  br i1 %52, label %187, label %53

53:                                               ; preds = %49, %66
  %54 = phi ptr [ %68, %66 ], [ %51, %49 ]
  %55 = load i32, ptr %54, align 8
  %56 = trunc i32 %55 to i16
  switch i16 %56, label %66 [
    i16 12, label %187
    i16 9, label %187
    i16 8, label %57
    i16 7, label %57
    i16 10, label %57
  ]

57:                                               ; preds = %53, %53, %53
  %58 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 1
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = tail call i32 @reg_set_p(ptr noundef nonnull %1, ptr noundef %59) #19
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %70

62:                                               ; preds = %57
  %63 = load ptr, ptr %58, align 8, !tbaa !17
  %64 = tail call i32 @reg_referenced_p(ptr noundef nonnull %1, ptr noundef %63) #19
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %187

66:                                               ; preds = %53, %62
  %67 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1, i32 0, i32 0, i64 1
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  %69 = icmp eq ptr %68, null
  br i1 %69, label %187, label %53, !llvm.loop !388

70:                                               ; preds = %57
  %71 = getelementptr inbounds %struct.rtx_def, ptr %54, i64 0, i32 1
  %72 = load i32, ptr %71, align 8, !tbaa !17
  %73 = load i32, ptr @reload_first_uid, align 4, !tbaa !21
  %74 = icmp slt i32 %72, %73
  br i1 %74, label %187, label %75

75:                                               ; preds = %70
  %76 = load i32, ptr %54, align 8
  %77 = and i32 %76, 65535
  %78 = add nsw i32 %77, -7
  %79 = icmp ult i32 %78, 4
  br i1 %79, label %80, label %187

80:                                               ; preds = %75
  %81 = load ptr, ptr %58, align 8, !tbaa !17
  %82 = load i32, ptr %81, align 8
  %83 = and i32 %82, 65535
  %84 = icmp eq i32 %83, 23
  br i1 %84, label %88, label %85

85:                                               ; preds = %80
  %86 = tail call ptr @single_set_2(ptr noundef nonnull %54, ptr noundef nonnull %81) #19
  %87 = icmp eq ptr %86, null
  br i1 %87, label %187, label %88

88:                                               ; preds = %80, %85
  %89 = phi ptr [ %86, %85 ], [ %81, %80 ]
  %90 = getelementptr inbounds %struct.rtx_def, ptr %89, i64 0, i32 1
  %91 = load ptr, ptr %90, align 8, !tbaa !17
  %92 = load i32, ptr %91, align 8
  %93 = and i32 %92, 65535
  %94 = icmp eq i32 %93, 37
  br i1 %94, label %95, label %187

95:                                               ; preds = %88
  %96 = tail call i32 @rtx_equal_p(ptr noundef nonnull %91, ptr noundef nonnull %1) #19
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %187, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 1
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = tail call i32 @reg_set_p(ptr noundef nonnull %91, ptr noundef %100) #19
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %188

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.rtx_def, ptr %0, i64 0, i32 1, i32 0, i32 0, i64 2
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  %106 = icmp eq ptr %105, null
  br i1 %106, label %188, label %107

107:                                              ; preds = %103, %183
  %108 = phi ptr [ %185, %183 ], [ %105, %103 ]
  %109 = load i32, ptr %108, align 8
  %110 = trunc i32 %109 to i16
  switch i16 %110, label %183 [
    i16 12, label %188
    i16 8, label %111
    i16 7, label %111
    i16 9, label %111
    i16 10, label %111
  ]

111:                                              ; preds = %107, %107, %107, %107
  %112 = getelementptr inbounds %struct.rtx_def, ptr %108, i64 1
  %113 = load ptr, ptr %112, align 8, !tbaa !17
  %114 = tail call i32 @reg_referenced_p(ptr noundef nonnull %91, ptr noundef %113) #19
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %153, label %116

116:                                              ; preds = %111
  %117 = icmp eq ptr %108, %2
  br i1 %117, label %118, label %187

118:                                              ; preds = %116
  %119 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %120 = zext i32 %119 to i64
  br label %121

121:                                              ; preds = %136, %118
  %122 = phi i64 [ %123, %136 ], [ %120, %118 ]
  %123 = add nsw i64 %122, -1
  %124 = trunc i64 %122 to i32
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %121
  %127 = icmp sgt i32 %119, 0
  br i1 %127, label %140, label %187

128:                                              ; preds = %121
  %129 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %123, i32 11
  %130 = load ptr, ptr %129, align 8, !tbaa !139
  %131 = icmp eq ptr %130, %91
  br i1 %131, label %132, label %136

132:                                              ; preds = %128
  %133 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %123
  %134 = load i8, ptr %133, align 1, !tbaa !17
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %187

136:                                              ; preds = %132, %128
  %137 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %123
  %138 = load ptr, ptr %137, align 8, !tbaa !6
  %139 = icmp eq ptr %138, %91
  br i1 %139, label %187, label %121, !llvm.loop !389

140:                                              ; preds = %126, %151
  %141 = phi i64 [ %142, %151 ], [ %120, %126 ]
  %142 = add nsw i64 %141, -1
  %143 = and i64 %142, 4294967295
  %144 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %143
  %145 = load ptr, ptr %144, align 8, !tbaa !153
  %146 = icmp eq ptr %145, null
  br i1 %146, label %151, label %147

147:                                              ; preds = %140
  %148 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %143, i32 11
  %149 = load ptr, ptr %148, align 8, !tbaa !139
  %150 = icmp eq ptr %149, %91
  br i1 %150, label %188, label %151

151:                                              ; preds = %140, %147
  %152 = icmp sgt i64 %141, 1
  br i1 %152, label %140, label %187, !llvm.loop !390

153:                                              ; preds = %111
  %154 = load i32, ptr %108, align 8
  %155 = and i32 %154, 65535
  %156 = icmp eq i32 %155, 9
  br i1 %156, label %188, label %157

157:                                              ; preds = %153
  %158 = icmp eq ptr %108, %2
  br i1 %158, label %159, label %179

159:                                              ; preds = %157
  %160 = load i32, ptr @n_reloads, align 4, !tbaa !21
  %161 = zext i32 %160 to i64
  br label %162

162:                                              ; preds = %175, %159
  %163 = phi i64 [ %164, %175 ], [ %161, %159 ]
  %164 = add nsw i64 %163, -1
  %165 = trunc i64 %163 to i32
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %179

167:                                              ; preds = %162
  %168 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %164, i32 11
  %169 = load ptr, ptr %168, align 8, !tbaa !139
  %170 = icmp eq ptr %169, %91
  br i1 %170, label %171, label %175

171:                                              ; preds = %167
  %172 = getelementptr inbounds [180 x i8], ptr @reload_inherited, i64 0, i64 %164
  %173 = load i8, ptr %172, align 1, !tbaa !17
  %174 = icmp eq i8 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %171, %167
  %176 = getelementptr inbounds [180 x ptr], ptr @reload_override_in, i64 0, i64 %164
  %177 = load ptr, ptr %176, align 8, !tbaa !6
  %178 = icmp eq ptr %177, %91
  br i1 %178, label %187, label %162, !llvm.loop !391

179:                                              ; preds = %162, %157
  %180 = load ptr, ptr %112, align 8, !tbaa !17
  %181 = tail call i32 @reg_set_p(ptr noundef nonnull %91, ptr noundef %180) #19
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %188

183:                                              ; preds = %107, %179
  %184 = getelementptr inbounds %struct.rtx_def, ptr %108, i64 0, i32 1, i32 0, i32 0, i64 2
  %185 = load ptr, ptr %184, align 8, !tbaa !17
  %186 = icmp eq ptr %185, null
  br i1 %186, label %188, label %107, !llvm.loop !392

187:                                              ; preds = %75, %116, %88, %95, %85, %70, %42, %126, %49, %7, %151, %132, %136, %171, %175, %53, %53, %62, %66, %40, %188
  ret void

188:                                              ; preds = %179, %153, %183, %107, %147, %103, %98
  %189 = getelementptr inbounds %struct.rtx_def, ptr %89, i64 0, i32 1, i32 0, i32 0, i64 1
  %190 = load ptr, ptr %189, align 8, !tbaa !17
  tail call fastcc void @delete_address_reloads_1(ptr noundef nonnull %54, ptr noundef %190, ptr noundef %2)
  %191 = getelementptr i8, ptr %91, i64 8
  %192 = load i32, ptr %191, align 8, !tbaa !17
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds [53 x i32], ptr @reg_reloaded_contents, i64 0, i64 %193
  store i32 -1, ptr %194, align 4, !tbaa !21
  %195 = tail call ptr @delete_insn(ptr noundef nonnull %54) #19
  br label %187
}

declare ptr @delete_related_insns(ptr noundef) local_unnamed_addr #3

declare i32 @reg_referenced_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @start_sequence() local_unnamed_addr #3

declare zeroext i8 @insn_could_throw_p(ptr noundef) local_unnamed_addr #3

declare void @remove_note(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @ggc_free(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @elimination_target_reg_p(ptr noundef readnone %0) local_unnamed_addr #13 {
  %2 = load ptr, ptr @reg_eliminate, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 9
  %4 = load ptr, ptr %3, align 8, !tbaa !106
  %5 = icmp eq ptr %4, %0
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.elim_table, ptr %2, i64 0, i32 3
  %8 = load i32, ptr %7, align 8, !tbaa !103
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %35

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 9
  %12 = load ptr, ptr %11, align 8, !tbaa !106
  %13 = icmp eq ptr %12, %0
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.elim_table, ptr %2, i64 1, i32 3
  %16 = load i32, ptr %15, align 8, !tbaa !103
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %35

18:                                               ; preds = %14, %10
  %19 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 9
  %20 = load ptr, ptr %19, align 8, !tbaa !106
  %21 = icmp eq ptr %20, %0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.elim_table, ptr %2, i64 2, i32 3
  %24 = load i32, ptr %23, align 8, !tbaa !103
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %35

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 9
  %28 = load ptr, ptr %27, align 8, !tbaa !106
  %29 = icmp eq ptr %28, %0
  br i1 %29, label %30, label %34

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.elim_table, ptr %2, i64 3, i32 3
  %32 = load i32, ptr %31, align 8, !tbaa !103
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %30, %26
  br label %35

35:                                               ; preds = %34, %30, %22, %14, %6
  %36 = phi i8 [ 1, %6 ], [ 1, %14 ], [ 1, %22 ], [ 1, %30 ], [ 0, %34 ]
  ret i8 %36
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @deallocate_reload_reg(i32 noundef %0) local_unnamed_addr #9 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2, i32 11
  %4 = load ptr, ptr %3, align 8, !tbaa !139
  %5 = icmp eq ptr %4, null
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @true_regnum(ptr noundef nonnull %4) #19
  store ptr null, ptr %3, align 8, !tbaa !139
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [53 x i16], ptr @spill_reg_order, i64 0, i64 %8
  %10 = load i16, ptr %9, align 2, !tbaa !44
  %11 = icmp sgt i16 %10, -1
  br i1 %11, label %12, label %19

12:                                               ; preds = %6
  %13 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2, i32 12
  %14 = load i32, ptr %13, align 8, !tbaa !156
  %15 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2, i32 17
  %16 = load i32, ptr %15, align 4, !tbaa !155
  %17 = getelementptr inbounds [180 x %struct.reload], ptr @rld, i64 0, i64 %2, i32 5
  %18 = load i32, ptr %17, align 4, !tbaa !158
  tail call fastcc void @clear_reload_reg_in_use(i32 noundef %7, i32 noundef %14, i32 noundef %16, i32 noundef %18)
  br label %19

19:                                               ; preds = %12, %6
  %20 = getelementptr inbounds [180 x i32], ptr @reload_spill_index, i64 0, i64 %2
  store i32 -1, ptr %20, align 4, !tbaa !21
  br label %21

21:                                               ; preds = %1, %19
  ret void
}

declare void @insert_insn_on_edge(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @purge_dead_edges(ptr noundef) local_unnamed_addr #3

declare ptr @sbitmap_alloc(i32 noundef) local_unnamed_addr #3

declare void @sbitmap_ones(ptr noundef) local_unnamed_addr #3

declare void @find_many_sub_basic_blocks(ptr noundef) local_unnamed_addr #3

declare void @commit_edge_insertions() local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fputc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #17

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v2i64(<2 x i64>) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.and.v4i64(<4 x i64>) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.or.v8i32(<8 x i32>) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.or.v2i32(<2 x i32>) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.and.v2i64(<2 x i64>) #18

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #13 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { nofree nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { nofree nounwind }
attributes #18 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #19 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"openmp", i32 51}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{!"clang version 17.0.6"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !7, i64 8}
!11 = !{!"_IO_FILE", !12, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !12, i64 112, !12, i64 116, !13, i64 120, !14, i64 128, !8, i64 130, !8, i64 131, !7, i64 136, !13, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !13, i64 184, !12, i64 192, !8, i64 196}
!12 = !{!"int", !8, i64 0}
!13 = !{!"long", !8, i64 0}
!14 = !{!"short", !8, i64 0}
!15 = !{!11, !7, i64 16}
!16 = !{!"branch_weights", i32 2000, i32 1}
!17 = !{!8, !8, i64 0}
!18 = !{!11, !7, i64 40}
!19 = !{!11, !7, i64 48}
!20 = !{!11, !12, i64 0}
!21 = !{!12, !12, i64 0}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.mustprogress"}
!24 = distinct !{!24, !23}
!25 = distinct !{!25, !23}
!26 = !{!27, !13, i64 40}
!27 = !{!"obstack", !13, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !13, i64 40, !12, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !12, i64 80, !12, i64 80, !12, i64 80}
!28 = !{!27, !7, i64 32}
!29 = !{!27, !7, i64 24}
!30 = !{!27, !7, i64 16}
!31 = !{!27, !12, i64 48}
!32 = !{!27, !7, i64 8}
!33 = !{!34, !7, i64 24}
!34 = !{!"bitmap_head_def", !7, i64 0, !7, i64 8, !12, i64 16, !7, i64 24}
!35 = !{!36, !7, i64 0}
!36 = !{!"insn_chain", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !12, i64 32, !12, i64 36, !12, i64 36, !12, i64 36, !12, i64 36, !34, i64 40, !34, i64 72, !7, i64 104, !12, i64 112, !13, i64 120}
!37 = !{!34, !7, i64 0}
!38 = !{!39, !12, i64 16}
!39 = !{!"bitmap_element_def", !7, i64 0, !7, i64 8, !12, i64 16, !8, i64 24}
!40 = !{!13, !13, i64 0}
!41 = distinct !{!41, !23}
!42 = distinct !{!42, !23}
!43 = !{!39, !7, i64 0}
!44 = !{!14, !14, i64 0}
!45 = distinct !{!45, !23, !46, !47}
!46 = !{!"llvm.loop.isvectorized", i32 1}
!47 = !{!"llvm.loop.unroll.runtime.disable"}
!48 = distinct !{!48, !23, !47, !46}
!49 = distinct !{!49, !23}
!50 = distinct !{!50, !23}
!51 = distinct !{!51, !23}
!52 = !{!53, !7, i64 8}
!53 = !{!"function", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !12, i64 104, !12, i64 108, !12, i64 112, !12, i64 116, !12, i64 120, !12, i64 124, !7, i64 128, !12, i64 136, !12, i64 137, !12, i64 138, !12, i64 138, !12, i64 138, !12, i64 138, !12, i64 138, !12, i64 138, !12, i64 138, !12, i64 139, !12, i64 139, !12, i64 139, !12, i64 139, !12, i64 139, !12, i64 139, !12, i64 139}
!54 = !{!55, !12, i64 24}
!55 = !{!"control_flow_graph", !7, i64 0, !7, i64 8, !7, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !7, i64 40, !8, i64 48, !8, i64 52, !8, i64 60, !12, i64 68, !12, i64 72}
!56 = !{!55, !7, i64 0}
!57 = !{!55, !7, i64 8}
!58 = !{!59, !7, i64 56}
!59 = !{!"basic_block_def", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !8, i64 32, !7, i64 48, !7, i64 56, !8, i64 64, !13, i64 72, !12, i64 80, !12, i64 84, !12, i64 88, !12, i64 92, !12, i64 96}
!60 = !{!59, !12, i64 96}
!61 = distinct !{!61, !23}
!62 = distinct !{!62, !23}
!63 = !{!64, !12, i64 0}
!64 = !{!"VEC_edge_base", !12, i64 0, !12, i64 4, !8, i64 8}
!65 = !{!66, !12, i64 48}
!66 = !{!"edge_def", !7, i64 0, !7, i64 8, !8, i64 16, !7, i64 24, !7, i64 32, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !13, i64 56}
!67 = !{!66, !7, i64 0}
!68 = distinct !{!68, !23}
!69 = distinct !{!69, !23}
!70 = distinct !{!70, !23}
!71 = !{!72, !8, i64 466}
!72 = !{!"rtl_data", !73, i64 0, !74, i64 40, !75, i64 96, !76, i64 112, !78, i64 208, !79, i64 248, !12, i64 312, !7, i64 320, !7, i64 328, !7, i64 336, !7, i64 344, !7, i64 352, !7, i64 360, !7, i64 368, !7, i64 376, !7, i64 384, !7, i64 392, !13, i64 400, !7, i64 408, !7, i64 416, !7, i64 424, !12, i64 432, !12, i64 436, !12, i64 440, !12, i64 444, !12, i64 448, !12, i64 452, !7, i64 456, !8, i64 464, !8, i64 465, !8, i64 466, !8, i64 467, !8, i64 468, !8, i64 469, !8, i64 470, !8, i64 471, !8, i64 472, !8, i64 473, !8, i64 474, !8, i64 475, !8, i64 476, !8, i64 477, !8, i64 478, !8, i64 479, !8, i64 480, !8, i64 481, !8, i64 482, !8, i64 483, !8, i64 484, !8, i64 485}
!73 = !{!"expr_status", !12, i64 0, !12, i64 4, !12, i64 8, !7, i64 16, !7, i64 24, !7, i64 32}
!74 = !{!"emit_status", !12, i64 0, !12, i64 4, !7, i64 8, !7, i64 16, !7, i64 24, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !7, i64 48}
!75 = !{!"varasm_status", !7, i64 0, !12, i64 8}
!76 = !{!"incoming_args", !12, i64 0, !12, i64 4, !12, i64 8, !7, i64 16, !77, i64 24, !7, i64 88}
!77 = !{!"ix86_args", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !8, i64 60}
!78 = !{!"function_subsections", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32}
!79 = !{!"rtl_eh", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !8, i64 48}
!80 = distinct !{!80, !23}
!81 = distinct !{!81, !23}
!82 = distinct !{!82, !23}
!83 = !{!84, !12, i64 0}
!84 = !{!"elim_table_1", !12, i64 0, !12, i64 4}
!85 = !{!86, !12, i64 0}
!86 = !{!"elim_table", !12, i64 0, !12, i64 4, !13, i64 8, !12, i64 16, !12, i64 20, !13, i64 24, !13, i64 32, !12, i64 40, !7, i64 48, !7, i64 56}
!87 = !{!84, !12, i64 4}
!88 = !{!86, !12, i64 4}
!89 = !{!90, !7, i64 1776}
!90 = !{!"gcc_target", !91, i64 0, !93, i64 368, !94, i64 664, !12, i64 744, !7, i64 752, !7, i64 760, !7, i64 768, !7, i64 776, !7, i64 784, !7, i64 792, !7, i64 800, !7, i64 808, !7, i64 816, !7, i64 824, !7, i64 832, !7, i64 840, !7, i64 848, !7, i64 856, !7, i64 864, !7, i64 872, !7, i64 880, !7, i64 888, !7, i64 896, !7, i64 904, !7, i64 912, !7, i64 920, !7, i64 928, !7, i64 936, !7, i64 944, !7, i64 952, !7, i64 960, !7, i64 968, !7, i64 976, !7, i64 984, !7, i64 992, !7, i64 1000, !7, i64 1008, !7, i64 1016, !7, i64 1024, !7, i64 1032, !7, i64 1040, !7, i64 1048, !7, i64 1056, !13, i64 1064, !13, i64 1072, !7, i64 1080, !7, i64 1088, !7, i64 1096, !7, i64 1104, !7, i64 1112, !7, i64 1120, !7, i64 1128, !7, i64 1136, !7, i64 1144, !7, i64 1152, !7, i64 1160, !7, i64 1168, !95, i64 1176, !7, i64 1232, !7, i64 1240, !7, i64 1248, !7, i64 1256, !7, i64 1264, !7, i64 1272, !7, i64 1280, !7, i64 1288, !7, i64 1296, !7, i64 1304, !7, i64 1312, !7, i64 1320, !7, i64 1328, !7, i64 1336, !7, i64 1344, !7, i64 1352, !7, i64 1360, !7, i64 1368, !7, i64 1376, !7, i64 1384, !7, i64 1392, !7, i64 1400, !7, i64 1408, !7, i64 1416, !7, i64 1424, !7, i64 1432, !7, i64 1440, !7, i64 1448, !7, i64 1456, !13, i64 1464, !96, i64 1472, !7, i64 1664, !7, i64 1672, !7, i64 1680, !7, i64 1688, !7, i64 1696, !7, i64 1704, !7, i64 1712, !7, i64 1720, !7, i64 1728, !7, i64 1736, !7, i64 1744, !7, i64 1752, !7, i64 1760, !7, i64 1768, !7, i64 1776, !97, i64 1784, !98, i64 1792, !99, i64 1896, !100, i64 1968, !7, i64 2016, !8, i64 2024, !8, i64 2025, !8, i64 2026, !8, i64 2027, !8, i64 2028, !8, i64 2029, !8, i64 2030, !8, i64 2031, !8, i64 2032, !8, i64 2033, !8, i64 2034, !8, i64 2035}
!91 = !{!"asm_out", !7, i64 0, !7, i64 8, !7, i64 16, !92, i64 24, !92, i64 56, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288, !7, i64 296, !7, i64 304, !7, i64 312, !7, i64 320, !7, i64 328, !7, i64 336, !7, i64 344, !7, i64 352, !7, i64 360}
!92 = !{!"asm_int_op", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!93 = !{!"sched", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288}
!94 = !{!"vectorize", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72}
!95 = !{!"addr_space", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!96 = !{!"calls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184}
!97 = !{!"c", !7, i64 0}
!98 = !{!"cxx", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96}
!99 = !{!"emutls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !8, i64 64, !8, i64 65}
!100 = !{!"target_option_hooks", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!101 = !{!72, !8, i64 479}
!102 = !{!86, !12, i64 20}
!103 = !{!86, !12, i64 16}
!104 = distinct !{!104, !23}
!105 = !{!86, !7, i64 48}
!106 = !{!86, !7, i64 56}
!107 = distinct !{!107, !23}
!108 = distinct !{!108, !23}
!109 = distinct !{!109, !23}
!110 = distinct !{!110, !23}
!111 = !{!36, !7, i64 24}
!112 = !{!113, !12, i64 0}
!113 = !{!"rtvec_def", !12, i64 0, !8, i64 8}
!114 = distinct !{!114, !23}
!115 = distinct !{!115, !23}
!116 = distinct !{!116, !23}
!117 = distinct !{!117, !23}
!118 = distinct !{!118, !23}
!119 = distinct !{!119, !23}
!120 = distinct !{!120, !23}
!121 = !{!72, !8, i64 477}
!122 = !{i32 0, i32 2}
!123 = !{!86, !13, i64 8}
!124 = !{!86, !13, i64 24}
!125 = !{!86, !13, i64 32}
!126 = distinct !{!126, !23}
!127 = distinct !{!127, !23}
!128 = !{!129, !8, i64 32}
!129 = !{!"mem_attrs", !7, i64 0, !7, i64 8, !7, i64 16, !12, i64 24, !12, i64 28, !8, i64 32}
!130 = distinct !{!130, !23}
!131 = !{!36, !12, i64 112}
!132 = !{!36, !7, i64 8}
!133 = !{!36, !7, i64 104}
!134 = distinct !{!134, !23}
!135 = distinct !{!135, !23}
!136 = !{!90, !7, i64 1768}
!137 = distinct !{!137, !23}
!138 = distinct !{!138, !23}
!139 = !{!140, !7, i64 64}
!140 = !{!"reload", !7, i64 0, !7, i64 8, !8, i64 16, !8, i64 20, !8, i64 24, !8, i64 28, !12, i64 32, !12, i64 36, !7, i64 40, !7, i64 48, !12, i64 56, !7, i64 64, !12, i64 72, !12, i64 76, !12, i64 80, !8, i64 84, !8, i64 88, !8, i64 92, !12, i64 96, !12, i64 96, !12, i64 96, !12, i64 96}
!141 = !{!140, !12, i64 56}
!142 = !{!140, !12, i64 32}
!143 = distinct !{!143, !23}
!144 = !{!145, !12, i64 0}
!145 = !{!"reg_info_t", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24}
!146 = distinct !{!146, !23, !46, !47}
!147 = distinct !{!147, !23, !47, !46}
!148 = distinct !{!148, !23}
!149 = distinct !{!149, !23, !46, !47}
!150 = distinct !{!150, !23, !47, !46}
!151 = distinct !{!151, !23}
!152 = !{!140, !7, i64 8}
!153 = !{!140, !7, i64 0}
!154 = !{!140, !8, i64 16}
!155 = !{!140, !8, i64 92}
!156 = !{!140, !12, i64 72}
!157 = distinct !{!157, !23}
!158 = !{!140, !8, i64 28}
!159 = !{!160, !12, i64 0}
!160 = !{!"VEC_rtx_p_base", !12, i64 0, !12, i64 4, !8, i64 8}
!161 = distinct !{!161, !23}
!162 = distinct !{!162, !23, !46, !47}
!163 = distinct !{!163, !23, !47, !46}
!164 = distinct !{!164, !23}
!165 = distinct !{!165, !23}
!166 = distinct !{!166, !23}
!167 = distinct !{!167, !23}
!168 = distinct !{!168, !23, !46, !47}
!169 = distinct !{!169, !23, !47, !46}
!170 = distinct !{!170, !23}
!171 = distinct !{!171, !23, !46, !47}
!172 = distinct !{!172, !23, !47, !46}
!173 = distinct !{!173, !23}
!174 = distinct !{!174, !23}
!175 = distinct !{!175, !23}
!176 = !{!36, !13, i64 120}
!177 = distinct !{!177, !23}
!178 = distinct !{!178, !23}
!179 = distinct !{!179, !23}
!180 = distinct !{!180, !23}
!181 = distinct !{!181, !23}
!182 = distinct !{!182, !23}
!183 = !{!90, !7, i64 1040}
!184 = !{!185, !7, i64 224}
!185 = !{!"df", !8, i64 0, !8, i64 64, !7, i64 128, !186, i64 136, !186, i64 176, !7, i64 216, !7, i64 224, !7, i64 232, !12, i64 240, !12, i64 244, !7, i64 248, !12, i64 256, !12, i64 260, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288, !7, i64 296, !7, i64 304, !7, i64 312, !7, i64 320, !7, i64 328, !7, i64 336, !12, i64 344, !12, i64 348, !7, i64 352, !12, i64 360, !12, i64 364, !8, i64 365, !8, i64 366}
!186 = !{!"df_ref_info", !7, i64 0, !7, i64 8, !7, i64 16, !12, i64 24, !12, i64 28, !12, i64 32, !8, i64 36}
!187 = !{!188, !7, i64 0}
!188 = !{!"df_reg_info", !7, i64 0, !12, i64 8}
!189 = !{!190, !7, i64 0}
!190 = !{!"df_insn_info", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !12, i64 40}
!191 = distinct !{!191, !23}
!192 = distinct !{!192, !23}
!193 = distinct !{!193, !23}
!194 = distinct !{!194, !23}
!195 = distinct !{!195, !23}
!196 = distinct !{!196, !23}
!197 = distinct !{!197, !23}
!198 = distinct !{!198, !23, !46, !47}
!199 = distinct !{!199, !23, !47, !46}
!200 = !{!72, !7, i64 88}
!201 = distinct !{!201, !23}
!202 = distinct !{!202, !23}
!203 = !{!204, !12, i64 4}
!204 = !{!"regstat_n_sets_and_refs_t", !12, i64 0, !12, i64 4}
!205 = !{!129, !12, i64 28}
!206 = distinct !{!206, !23}
!207 = distinct !{!207, !23}
!208 = distinct !{!208, !23}
!209 = distinct !{!209, !23}
!210 = distinct !{!210, !23}
!211 = distinct !{!211, !23}
!212 = distinct !{!212, !23}
!213 = distinct !{!213, !23}
!214 = distinct !{!214, !23}
!215 = distinct !{!215, !23}
!216 = distinct !{!216, !23}
!217 = distinct !{!217, !218}
!218 = !{!"llvm.loop.unroll.disable"}
!219 = distinct !{!219, !23, !46, !47}
!220 = distinct !{!220, !23, !47, !46}
!221 = distinct !{!221, !23, !46, !47}
!222 = distinct !{!222, !23, !47, !46}
!223 = distinct !{!223, !23}
!224 = distinct !{!224, !23}
!225 = !{!140, !7, i64 40}
!226 = distinct !{!226, !23}
!227 = distinct !{!227, !23, !46, !47}
!228 = distinct !{!228, !23, !47, !46}
!229 = distinct !{!229, !23}
!230 = distinct !{!230, !23, !46, !47}
!231 = distinct !{!231, !23, !47, !46}
!232 = distinct !{!232, !23}
!233 = distinct !{!233, !23, !46, !47}
!234 = distinct !{!234, !23, !47, !46}
!235 = distinct !{!235, !23}
!236 = distinct !{!236, !23}
!237 = distinct !{!237, !23}
!238 = distinct !{!238, !23}
!239 = distinct !{!239, !23}
!240 = distinct !{!240, !23}
!241 = distinct !{!241, !23}
!242 = distinct !{!242, !23, !46, !47}
!243 = distinct !{!243, !23}
!244 = distinct !{!244, !23, !245}
!245 = !{!"llvm.loop.unswitch.partial.disable"}
!246 = distinct !{!246, !23, !47, !46}
!247 = distinct !{!247, !23}
!248 = !{!140, !7, i64 48}
!249 = distinct !{!249, !23}
!250 = distinct !{!250, !23, !46, !47}
!251 = distinct !{!251, !23, !47, !46}
!252 = distinct !{!252, !23}
!253 = distinct !{!253, !23}
!254 = distinct !{!254, !23}
!255 = distinct !{!255, !23}
!256 = distinct !{!256, !23}
!257 = distinct !{!257, !23}
!258 = !{!140, !8, i64 20}
!259 = distinct !{!259, !23}
!260 = !{!140, !12, i64 76}
!261 = !{!140, !12, i64 36}
!262 = distinct !{!262, !23}
!263 = distinct !{!263, !23}
!264 = !{!145, !12, i64 4}
!265 = !{!204, !12, i64 0}
!266 = distinct !{!266, !23}
!267 = !{!140, !8, i64 84}
!268 = !{!269, !12, i64 0}
!269 = !{!"secondary_reload_info", !12, i64 0, !12, i64 4, !7, i64 8, !12, i64 16}
!270 = !{!269, !7, i64 8}
!271 = !{!90, !7, i64 1728}
!272 = !{!273, !7, i64 24}
!273 = !{!"insn_data", !7, i64 0, !8, i64 8, !7, i64 16, !7, i64 24, !8, i64 32, !8, i64 33, !8, i64 34, !8, i64 35}
!274 = !{!273, !7, i64 16}
!275 = !{!140, !12, i64 80}
!276 = !{!140, !8, i64 88}
!277 = distinct !{!277, !23}
!278 = distinct !{!278, !23}
!279 = distinct !{!279, !23}
!280 = distinct !{!280, !23}
!281 = distinct !{!281, !23}
!282 = distinct !{!282, !23}
!283 = distinct !{!283, !23}
!284 = distinct !{!284, !23, !46, !47}
!285 = distinct !{!285, !23, !47, !46}
!286 = distinct !{!286, !23}
!287 = distinct !{!287, !23, !46, !47}
!288 = distinct !{!288, !23, !47, !46}
!289 = distinct !{!289, !23}
!290 = distinct !{!290, !23}
!291 = distinct !{!291, !23}
!292 = distinct !{!292, !23}
!293 = distinct !{!293, !23}
!294 = distinct !{!294, !23}
!295 = distinct !{!295, !23}
!296 = distinct !{!296, !23}
!297 = distinct !{!297, !23}
!298 = distinct !{!298, !23}
!299 = !{!300, !7, i64 8}
!300 = !{!"rtl_bb_info", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !12, i64 32}
!301 = !{!300, !7, i64 0}
!302 = distinct !{!302, !23}
!303 = distinct !{!303, !23}
!304 = distinct !{!304, !23}
!305 = distinct !{!305, !23}
!306 = !{!55, !12, i64 32}
!307 = !{!308, !7, i64 0}
!308 = !{!"simple_bitmap_def", !7, i64 0, !12, i64 8, !12, i64 12, !8, i64 16}
!309 = distinct !{!309, !23}
!310 = distinct !{!310, !23}
!311 = distinct !{!311, !23}
!312 = !{!313, !7, i64 0}
!313 = !{!"rtl_hooks", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32}
!314 = !{!315, !8, i64 1086}
!315 = !{!"recog_data", !8, i64 0, !8, i64 240, !8, i64 480, !8, i64 720, !8, i64 840, !8, i64 960, !8, i64 1072, !8, i64 1086, !8, i64 1087, !8, i64 1088, !8, i64 1089, !7, i64 1120}
!316 = !{!315, !8, i64 1087}
!317 = !{!318, !8, i64 19}
!318 = !{!"insn_operand_data", !7, i64 0, !7, i64 8, !12, i64 16, !8, i64 18, !8, i64 19}
!319 = distinct !{!319, !23}
!320 = distinct !{!320, !23}
!321 = distinct !{!321, !218}
!322 = distinct !{!322, !23}
!323 = distinct !{!323, !23}
!324 = distinct !{!324, !218}
!325 = distinct !{!325, !23}
!326 = distinct !{!326, !23}
!327 = !{!86, !12, i64 40}
!328 = distinct !{!328, !23}
!329 = distinct !{!329, !23}
!330 = distinct !{!330, !331}
!331 = !{!"llvm.loop.peeled.count", i32 1}
!332 = distinct !{!332, !23}
!333 = distinct !{!333, !23}
!334 = distinct !{!334, !23}
!335 = distinct !{!335, !23}
!336 = !{!160, !12, i64 4}
!337 = distinct !{!337, !23}
!338 = distinct !{!338, !23}
!339 = distinct !{!339, !23}
!340 = distinct !{!340, !23, !46, !47}
!341 = distinct !{!341, !23, !47, !46}
!342 = distinct !{!342, !23}
!343 = distinct !{!343, !23, !46, !47}
!344 = distinct !{!344, !218}
!345 = distinct !{!345, !23, !46}
!346 = distinct !{!346, !23}
!347 = distinct !{!347, !23, !245}
!348 = distinct !{!348, !218}
!349 = distinct !{!349, !23}
!350 = distinct !{!350, !23}
!351 = distinct !{!351, !23}
!352 = distinct !{!352, !23, !46, !47}
!353 = distinct !{!353, !23, !47, !46}
!354 = distinct !{!354, !23}
!355 = distinct !{!355, !23}
!356 = distinct !{!356, !23}
!357 = distinct !{!357, !23}
!358 = distinct !{!358, !23}
!359 = distinct !{!359, !23}
!360 = distinct !{!360, !23}
!361 = distinct !{!361, !23}
!362 = distinct !{!362, !23}
!363 = distinct !{!363, !23}
!364 = distinct !{!364, !23}
!365 = distinct !{!365, !23}
!366 = distinct !{!366, !23}
!367 = distinct !{!367, !23}
!368 = distinct !{!368, !23}
!369 = distinct !{!369, !23}
!370 = distinct !{!370, !23}
!371 = distinct !{!371, !23}
!372 = distinct !{!372, !23}
!373 = distinct !{!373, !23}
!374 = distinct !{!374, !23}
!375 = distinct !{!375, !23}
!376 = distinct !{!376, !23}
!377 = distinct !{!377, !23}
!378 = distinct !{!378, !23}
!379 = distinct !{!379, !23}
!380 = !{!145, !12, i64 24}
!381 = distinct !{!381, !23}
!382 = distinct !{!382, !23}
!383 = !{!384, !8, i64 0}
!384 = !{!"optab_handlers", !8, i64 0}
!385 = !{!318, !7, i64 0}
!386 = distinct !{!386, !23}
!387 = distinct !{!387, !23}
!388 = distinct !{!388, !23}
!389 = distinct !{!389, !23}
!390 = distinct !{!390, !23}
!391 = distinct !{!391, !23}
!392 = distinct !{!392, !23}
