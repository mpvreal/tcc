; ModuleID = 'c-typeck.c'
source_filename = "c-typeck.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.addr_space, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, %struct.calls, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { ptr, ptr, ptr, %struct.asm_int_op, %struct.asm_int_op, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.asm_int_op = type { ptr, ptr, ptr, ptr }
%struct.sched = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vectorize = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.addr_space = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.calls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.c = type { ptr }
%struct.cxx = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.emutls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%struct.target_option_hooks = type { ptr, ptr, ptr, ptr, ptr, ptr }
%struct.obstack = type { i64, ptr, ptr, ptr, ptr, i64, i32, ptr, ptr, ptr, i8 }
%struct.lang_hooks = type { ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_tree_inlining = type { ptr }
%struct.lang_hooks_for_callgraph = type { ptr }
%struct.lang_hooks_for_tree_dump = type { ptr, ptr }
%struct.lang_hooks_for_decls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.lang_hooks_for_types = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_lto = type { ptr, ptr, ptr }
%struct.bitmap_obstack = type { ptr, ptr, %struct.obstack }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%union.tree_type_symtab = type { ptr }
%struct.tree_list = type { %struct.tree_common, ptr, ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.tree_block = type { %struct.tree_common, i32, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tagged_tu_seen_cache = type { ptr, ptr, ptr, i32 }
%struct.tree_field_decl = type { %struct.tree_decl_common, ptr, ptr, ptr, ptr, ptr }
%struct.c_expr = type { ptr, i32, ptr }
%struct.tree_exp = type { %struct.tree_common, i32, ptr, [1 x ptr] }
%struct.tree_complex = type { %struct.tree_common, ptr, ptr }
%struct.sorted_fields_type = type { i32, [1 x ptr] }
%struct.maybe_used_decl = type { ptr, i32, ptr }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, ptr, ptr, ptr, ptr, i32 }
%struct.VEC_tree_base = type { i32, i32, [1 x ptr] }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { ptr, i32, i32 }
%struct.expanded_location = type { ptr, i32, i32, i8 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_constructor = type { %struct.tree_common, ptr }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { ptr, ptr }
%struct.spelling = type { i32, %union.anon.0 }
%union.anon.0 = type { i64 }
%struct.c_declspecs = type { ptr, ptr, ptr, ptr, i32, i32, i8, i32, i16, i8 }
%struct.initializer_stack = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i8, i8, i8 }
%struct.constructor_stack = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, %struct.c_expr, ptr, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.constructor_range_stack = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.init_node = type { ptr, ptr, ptr, i32, ptr, ptr, ptr }
%struct.c_switch = type { ptr, ptr, ptr, ptr, ptr }
%struct.tree_statement_list = type { %struct.tree_common, ptr, ptr }
%struct.tree_statement_list_node = type { ptr, ptr, ptr }
%struct.bitmap_head_def = type { ptr, ptr, i32, ptr }
%struct.tree_omp_clause = type { %struct.tree_common, i32, i32, %union.omp_clause_subcode, ptr, ptr, [1 x ptr] }
%union.omp_clause_subcode = type { i32 }

@in_late_binary_op = dso_local local_unnamed_addr global i8 0, align 1
@in_alignof = dso_local local_unnamed_addr global i32 0, align 4
@in_sizeof = dso_local local_unnamed_addr global i32 0, align 4
@in_typeof = dso_local local_unnamed_addr global i32 0, align 4
@c_switch_stack = dso_local local_unnamed_addr global ptr null, align 8
@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@global_trees = external local_unnamed_addr global [131 x ptr], align 16
@.str = private unnamed_addr constant [27 x i8] c"%qD has an incomplete type\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"struct\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"union\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"enum\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"invalid use of void expression\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"invalid use of flexible array member\00", align 1
@.str.6 = private unnamed_addr constant [45 x i8] c"invalid use of array with unspecified bounds\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"c-typeck.c\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"invalid use of undefined type %<%s %E%>\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"invalid use of incomplete typedef %qD\00", align 1
@integer_types = external local_unnamed_addr global [11 x ptr], align 16
@targetm = external local_unnamed_addr global %struct.gcc_target, align 8
@c_override_global_bindings_to_false = external local_unnamed_addr global i8, align 1
@input_location = external local_unnamed_addr global i32, align 4
@.str.11 = private unnamed_addr constant [45 x i8] c"function types not truly compatible in ISO C\00", align 1
@.str.12 = private unnamed_addr constant [49 x i8] c"%qT and %qT are in disjoint named address spaces\00", align 1
@mode_class = external local_unnamed_addr constant [87 x i8], align 16
@.str.13 = private unnamed_addr constant [54 x i8] c"can%'t mix operands of decimal float and vector types\00", align 1
@.str.14 = private unnamed_addr constant [55 x i8] c"can%'t mix operands of decimal float and complex types\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"can%'t mix operands of decimal float and other float types\00", align 1
@mode_precision = external local_unnamed_addr constant [87 x i16], align 16
@mode_fbit = external local_unnamed_addr constant [87 x i8], align 16
@mode_ibit = external local_unnamed_addr constant [87 x i8], align 16
@tagged_tu_seen_base = internal unnamed_addr global ptr null, align 8
@.str.16 = private unnamed_addr constant [57 x i8] c"function return types not compatible due to %<volatile%>\00", align 1
@flag_isoc99 = external local_unnamed_addr global i32, align 4
@tree_code_type = external local_unnamed_addr constant [0 x i32], align 4
@current_function_decl = external local_unnamed_addr global ptr, align 8
@.str.17 = private unnamed_addr constant [41 x i8] c"void value not ignored as it ought to be\00", align 1
@.str.18 = private unnamed_addr constant [28 x i8] c"%qT has no member named %qE\00", align 1
@.str.19 = private unnamed_addr constant [61 x i8] c"request for member %qE in something not a structure or union\00", align 1
@warn_strict_aliasing = external local_unnamed_addr global i32, align 4
@.str.20 = private unnamed_addr constant [41 x i8] c"dereferencing pointer to incomplete type\00", align 1
@c_inhibit_evaluation_warnings = external local_unnamed_addr global i32, align 4
@.str.21 = private unnamed_addr constant [33 x i8] c"dereferencing %<void *%> pointer\00", align 1
@.str.22 = private unnamed_addr constant [51 x i8] c"invalid type argument of array indexing (have %qT)\00", align 1
@.str.23 = private unnamed_addr constant [48 x i8] c"invalid type argument of unary %<*%> (have %qT)\00", align 1
@.str.24 = private unnamed_addr constant [43 x i8] c"invalid type argument of %<->%> (have %qT)\00", align 1
@.str.25 = private unnamed_addr constant [47 x i8] c"subscripted value is neither array nor pointer\00", align 1
@.str.26 = private unnamed_addr constant [34 x i8] c"array subscript is not an integer\00", align 1
@.str.27 = private unnamed_addr constant [41 x i8] c"subscripted value is pointer to function\00", align 1
@pedantic = external local_unnamed_addr global i32, align 4
@.str.28 = private unnamed_addr constant [46 x i8] c"ISO C forbids subscripting %<register%> array\00", align 1
@.str.29 = private unnamed_addr constant [46 x i8] c"ISO C90 forbids subscripting non-lvalue array\00", align 1
@warn_cxx_compat = external local_unnamed_addr global i32, align 4
@.str.30 = private unnamed_addr constant [63 x i8] c"enum constant defined in struct or union is not visible in C++\00", align 1
@.str.31 = private unnamed_addr constant [27 x i8] c"enum constant defined here\00", align 1
@parser_obstack = external global %struct.obstack, align 8
@maybe_used_decls = internal unnamed_addr global ptr null, align 8
@require_constant_value = internal unnamed_addr global i32 0, align 4
@.str.32 = private unnamed_addr constant [36 x i8] c"called object %qE is not a function\00", align 1
@current_function_returns_abnormally = external local_unnamed_addr global i32, align 4
@built_in_decls = external local_unnamed_addr global [721 x ptr], align 16
@.str.33 = private unnamed_addr constant [46 x i8] c"function called through a non-compatible type\00", align 1
@.str.34 = private unnamed_addr constant [48 x i8] c"if this code is reached, the program will abort\00", align 1
@.str.35 = private unnamed_addr constant [48 x i8] c"function with qualified void return type called\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"__builtin_\00", align 1
@.str.37 = private unnamed_addr constant [13 x i8] c"type generic\00", align 1
@.str.38 = private unnamed_addr constant [35 x i8] c"too many arguments to function %qE\00", align 1
@.str.39 = private unnamed_addr constant [14 x i8] c"declared here\00", align 1
@.str.40 = private unnamed_addr constant [42 x i8] c"type of formal parameter %d is incomplete\00", align 1
@warn_traditional_conversion = external local_unnamed_addr global i32, align 4
@warn_traditional = external local_unnamed_addr global i32, align 4
@.str.41 = private unnamed_addr constant [76 x i8] c"passing argument %d of %qE as integer rather than floating due to prototype\00", align 1
@.str.42 = private unnamed_addr constant [75 x i8] c"passing argument %d of %qE as integer rather than complex due to prototype\00", align 1
@.str.43 = private unnamed_addr constant [76 x i8] c"passing argument %d of %qE as complex rather than floating due to prototype\00", align 1
@.str.44 = private unnamed_addr constant [76 x i8] c"passing argument %d of %qE as floating rather than integer due to prototype\00", align 1
@.str.45 = private unnamed_addr constant [75 x i8] c"passing argument %d of %qE as complex rather than integer due to prototype\00", align 1
@.str.46 = private unnamed_addr constant [76 x i8] c"passing argument %d of %qE as floating rather than complex due to prototype\00", align 1
@.str.47 = private unnamed_addr constant [80 x i8] c"passing argument %d of %qE as %<float%> rather than %<double%> due to prototype\00", align 1
@.str.48 = private unnamed_addr constant [67 x i8] c"passing argument %d of %qE as %qT rather than %qT due to prototype\00", align 1
@.str.49 = private unnamed_addr constant [65 x i8] c"passing argument %d of %qE with different width due to prototype\00", align 1
@.str.50 = private unnamed_addr constant [56 x i8] c"passing argument %d of %qE as unsigned due to prototype\00", align 1
@.str.51 = private unnamed_addr constant [54 x i8] c"passing argument %d of %qE as signed due to prototype\00", align 1
@.str.52 = private unnamed_addr constant [34 x i8] c"too few arguments to function %qE\00", align 1
@c_language = external local_unnamed_addr global i32, align 4
@.str.53 = private unnamed_addr constant [66 x i8] c"enum conversion when passing argument %d of %qE is invalid in C++\00", align 1
@.str.54 = private unnamed_addr constant [41 x i8] c"expected %qT but argument is of type %qT\00", align 1
@.str.55 = private unnamed_addr constant [48 x i8] c"enum conversion in assignment is invalid in C++\00", align 1
@.str.56 = private unnamed_addr constant [52 x i8] c"enum conversion in initialization is invalid in C++\00", align 1
@.str.57 = private unnamed_addr constant [44 x i8] c"enum conversion in return is invalid in C++\00", align 1
@.str.58 = private unnamed_addr constant [42 x i8] c"cannot pass rvalue to reference parameter\00", align 1
@.str.59 = private unnamed_addr constant [77 x i8] c"passing argument %d of %qE makes qualified function pointer from unqualified\00", align 1
@.str.60 = private unnamed_addr constant [61 x i8] c"assignment makes qualified function pointer from unqualified\00", align 1
@.str.61 = private unnamed_addr constant [65 x i8] c"initialization makes qualified function pointer from unqualified\00", align 1
@.str.62 = private unnamed_addr constant [57 x i8] c"return makes qualified function pointer from unqualified\00", align 1
@.str.63 = private unnamed_addr constant [72 x i8] c"passing argument %d of %qE discards qualifiers from pointer target type\00", align 1
@.str.64 = private unnamed_addr constant [56 x i8] c"assignment discards qualifiers from pointer target type\00", align 1
@.str.65 = private unnamed_addr constant [60 x i8] c"initialization discards qualifiers from pointer target type\00", align 1
@.str.66 = private unnamed_addr constant [52 x i8] c"return discards qualifiers from pointer target type\00", align 1
@.str.67 = private unnamed_addr constant [50 x i8] c"ISO C prohibits argument conversion to union type\00", align 1
@.str.68 = private unnamed_addr constant [69 x i8] c"request for implicit conversion from %qT to %qT not permitted in C++\00", align 1
@.str.69 = private unnamed_addr constant [70 x i8] c"passing argument %d of %qE from pointer to non-enclosed address space\00", align 1
@.str.70 = private unnamed_addr constant [54 x i8] c"assignment from pointer to non-enclosed address space\00", align 1
@.str.71 = private unnamed_addr constant [58 x i8] c"initialization from pointer to non-enclosed address space\00", align 1
@.str.72 = private unnamed_addr constant [50 x i8] c"return from pointer to non-enclosed address space\00", align 1
@warn_missing_format_attribute = external local_unnamed_addr global i32, align 4
@.str.73 = private unnamed_addr constant [63 x i8] c"argument %d of %qE might be a candidate for a format attribute\00", align 1
@.str.74 = private unnamed_addr constant [70 x i8] c"assignment left-hand side might be a candidate for a format attribute\00", align 1
@.str.75 = private unnamed_addr constant [74 x i8] c"initialization left-hand side might be a candidate for a format attribute\00", align 1
@.str.76 = private unnamed_addr constant [56 x i8] c"return type might be a candidate for a format attribute\00", align 1
@.str.77 = private unnamed_addr constant [81 x i8] c"ISO C forbids passing argument %d of %qE between function pointer and %<void *%>\00", align 1
@.str.78 = private unnamed_addr constant [65 x i8] c"ISO C forbids assignment between function pointer and %<void *%>\00", align 1
@.str.79 = private unnamed_addr constant [69 x i8] c"ISO C forbids initialization between function pointer and %<void *%>\00", align 1
@.str.80 = private unnamed_addr constant [61 x i8] c"ISO C forbids return between function pointer and %<void *%>\00", align 1
@warn_pointer_sign = external local_unnamed_addr global i32, align 4
@.str.81 = private unnamed_addr constant [67 x i8] c"pointer targets in passing argument %d of %qE differ in signedness\00", align 1
@.str.82 = private unnamed_addr constant [51 x i8] c"pointer targets in assignment differ in signedness\00", align 1
@.str.83 = private unnamed_addr constant [55 x i8] c"pointer targets in initialization differ in signedness\00", align 1
@.str.84 = private unnamed_addr constant [47 x i8] c"pointer targets in return differ in signedness\00", align 1
@.str.85 = private unnamed_addr constant [58 x i8] c"passing argument %d of %qE from incompatible pointer type\00", align 1
@.str.86 = private unnamed_addr constant [42 x i8] c"assignment from incompatible pointer type\00", align 1
@.str.87 = private unnamed_addr constant [46 x i8] c"initialization from incompatible pointer type\00", align 1
@.str.88 = private unnamed_addr constant [38 x i8] c"return from incompatible pointer type\00", align 1
@.str.89 = private unnamed_addr constant [32 x i8] c"invalid use of non-lvalue array\00", align 1
@.str.90 = private unnamed_addr constant [69 x i8] c"passing argument %d of %qE makes pointer from integer without a cast\00", align 1
@.str.91 = private unnamed_addr constant [53 x i8] c"assignment makes pointer from integer without a cast\00", align 1
@.str.92 = private unnamed_addr constant [57 x i8] c"initialization makes pointer from integer without a cast\00", align 1
@.str.93 = private unnamed_addr constant [49 x i8] c"return makes pointer from integer without a cast\00", align 1
@.str.94 = private unnamed_addr constant [69 x i8] c"passing argument %d of %qE makes integer from pointer without a cast\00", align 1
@.str.95 = private unnamed_addr constant [53 x i8] c"assignment makes integer from pointer without a cast\00", align 1
@.str.96 = private unnamed_addr constant [57 x i8] c"initialization makes integer from pointer without a cast\00", align 1
@.str.97 = private unnamed_addr constant [49 x i8] c"return makes integer from pointer without a cast\00", align 1
@.str.98 = private unnamed_addr constant [41 x i8] c"incompatible type for argument %d of %qE\00", align 1
@.str.99 = private unnamed_addr constant [60 x i8] c"incompatible types when assigning to type %qT from type %qT\00", align 1
@.str.100 = private unnamed_addr constant [61 x i8] c"incompatible types when initializing type %qT using type %qT\00", align 1
@.str.101 = private unnamed_addr constant [64 x i8] c"incompatible types when returning type %qT but %qT was expected\00", align 1
@.str.102 = private unnamed_addr constant [31 x i8] c"types are not quite compatible\00", align 1
@.str.103 = private unnamed_addr constant [41 x i8] c"pointer target types incompatible in C++\00", align 1
@warn_parentheses = external local_unnamed_addr global i32, align 4
@warn_logical_op = external local_unnamed_addr global i32, align 4
@.str.104 = private unnamed_addr constant [63 x i8] c"comparison with string literal results in unspecified behavior\00", align 1
@warn_enum_compare = external local_unnamed_addr global i32, align 4
@.str.105 = private unnamed_addr constant [31 x i8] c"comparison between %qT and %qT\00", align 1
@.str.106 = private unnamed_addr constant [34 x i8] c"wrong type argument to unary plus\00", align 1
@.str.107 = private unnamed_addr constant [35 x i8] c"wrong type argument to unary minus\00", align 1
@.str.108 = private unnamed_addr constant [53 x i8] c"ISO C does not support %<~%> for complex conjugation\00", align 1
@.str.109 = private unnamed_addr constant [38 x i8] c"wrong type argument to bit-complement\00", align 1
@.str.110 = private unnamed_addr constant [27 x i8] c"wrong type argument to abs\00", align 1
@.str.111 = private unnamed_addr constant [35 x i8] c"wrong type argument to conjugation\00", align 1
@.str.112 = private unnamed_addr constant [46 x i8] c"wrong type argument to unary exclamation mark\00", align 1
@.str.113 = private unnamed_addr constant [49 x i8] c"increment of enumeration value is invalid in C++\00", align 1
@.str.114 = private unnamed_addr constant [49 x i8] c"decrement of enumeration value is invalid in C++\00", align 1
@.str.115 = private unnamed_addr constant [58 x i8] c"ISO C does not support %<++%> and %<--%> on complex types\00", align 1
@.str.116 = private unnamed_addr constant [33 x i8] c"wrong type argument to increment\00", align 1
@.str.117 = private unnamed_addr constant [33 x i8] c"wrong type argument to decrement\00", align 1
@.str.118 = private unnamed_addr constant [42 x i8] c"increment of pointer to unknown structure\00", align 1
@.str.119 = private unnamed_addr constant [42 x i8] c"decrement of pointer to unknown structure\00", align 1
@sizetype_tab = external local_unnamed_addr global [4 x ptr], align 16
@.str.120 = private unnamed_addr constant [46 x i8] c"taking address of expression of type %<void%>\00", align 1
@.str.121 = private unnamed_addr constant [44 x i8] c"arithmetic on pointer to an incomplete type\00", align 1
@.str.122 = private unnamed_addr constant [35 x i8] c"assignment of read-only member %qD\00", align 1
@.str.123 = private unnamed_addr constant [34 x i8] c"increment of read-only member %qD\00", align 1
@.str.124 = private unnamed_addr constant [34 x i8] c"decrement of read-only member %qD\00", align 1
@.str.125 = private unnamed_addr constant [44 x i8] c"read-only member %qD used as %<asm%> output\00", align 1
@.str.126 = private unnamed_addr constant [37 x i8] c"assignment of read-only variable %qD\00", align 1
@.str.127 = private unnamed_addr constant [36 x i8] c"increment of read-only variable %qD\00", align 1
@.str.128 = private unnamed_addr constant [36 x i8] c"decrement of read-only variable %qD\00", align 1
@.str.129 = private unnamed_addr constant [46 x i8] c"read-only variable %qD used as %<asm%> output\00", align 1
@.str.130 = private unnamed_addr constant [37 x i8] c"assignment of read-only location %qE\00", align 1
@.str.131 = private unnamed_addr constant [36 x i8] c"increment of read-only location %qE\00", align 1
@.str.132 = private unnamed_addr constant [36 x i8] c"decrement of read-only location %qE\00", align 1
@.str.133 = private unnamed_addr constant [46 x i8] c"read-only location %qE used as %<asm%> output\00", align 1
@.str.134 = private unnamed_addr constant [37 x i8] c"cannot take address of bit-field %qD\00", align 1
@.str.135 = private unnamed_addr constant [53 x i8] c"global register variable %qD used in nested function\00", align 1
@.str.136 = private unnamed_addr constant [46 x i8] c"register variable %qD used in nested function\00", align 1
@.str.137 = private unnamed_addr constant [50 x i8] c"address of global register variable %qD requested\00", align 1
@.str.138 = private unnamed_addr constant [43 x i8] c"address of register variable %qD requested\00", align 1
@.str.139 = private unnamed_addr constant [43 x i8] c"non-lvalue array in conditional expression\00", align 1
@.str.140 = private unnamed_addr constant [66 x i8] c"different enum types in conditional is invalid in C++: %qT vs %qT\00", align 1
@c_global_trees = external local_unnamed_addr global [55 x ptr], align 16
@warn_sign_compare = external local_unnamed_addr global i32, align 4
@.str.141 = private unnamed_addr constant [51 x i8] c"signed and unsigned type in conditional expression\00", align 1
@.str.142 = private unnamed_addr constant [55 x i8] c"ISO C forbids conditional expr with only one void side\00", align 1
@.str.143 = private unnamed_addr constant [67 x i8] c"pointers to disjoint address spaces used in conditional expression\00", align 1
@.str.144 = private unnamed_addr constant [71 x i8] c"ISO C forbids conditional expr between %<void *%> and function pointer\00", align 1
@.str.145 = private unnamed_addr constant [48 x i8] c"pointer type mismatch in conditional expression\00", align 1
@.str.146 = private unnamed_addr constant [56 x i8] c"pointer/integer type mismatch in conditional expression\00", align 1
@flag_cond_mismatch = external local_unnamed_addr global i32, align 4
@.str.147 = private unnamed_addr constant [40 x i8] c"type mismatch in conditional expression\00", align 1
@warn_unused_value = external local_unnamed_addr global i32, align 4
@.str.148 = private unnamed_addr constant [52 x i8] c"left-hand operand of comma expression has no effect\00", align 1
@.str.149 = private unnamed_addr constant [26 x i8] c"cast specifies array type\00", align 1
@.str.150 = private unnamed_addr constant [29 x i8] c"cast specifies function type\00", align 1
@.str.151 = private unnamed_addr constant [49 x i8] c"ISO C forbids casting nonscalar to the same type\00", align 1
@.str.152 = private unnamed_addr constant [34 x i8] c"ISO C forbids casts to union type\00", align 1
@.str.153 = private unnamed_addr constant [50 x i8] c"cast to union type from type not present in union\00", align 1
@warn_cast_qual = external local_unnamed_addr global i32, align 4
@.str.154 = private unnamed_addr constant [77 x i8] c"cast to %s address space pointer from disjoint generic address space pointer\00", align 1
@.str.155 = private unnamed_addr constant [77 x i8] c"cast to generic address space pointer from disjoint %s address space pointer\00", align 1
@.str.156 = private unnamed_addr constant [72 x i8] c"cast to %s address space pointer from disjoint %s address space pointer\00", align 1
@.str.157 = private unnamed_addr constant [47 x i8] c"cast from pointer to integer of different size\00", align 1
@.str.158 = private unnamed_addr constant [61 x i8] c"cast from function call of type %qT to non-matching type %qT\00", align 1
@.str.159 = private unnamed_addr constant [47 x i8] c"cast to pointer from integer of different size\00", align 1
@.str.160 = private unnamed_addr constant [68 x i8] c"ISO C forbids conversion of function pointer to object pointer type\00", align 1
@.str.161 = private unnamed_addr constant [68 x i8] c"ISO C forbids conversion of object pointer to function pointer type\00", align 1
@.str.162 = private unnamed_addr constant [42 x i8] c"initialization of a flexible array member\00", align 1
@.str.163 = private unnamed_addr constant [40 x i8] c"char-array initialized from wide string\00", align 1
@.str.164 = private unnamed_addr constant [54 x i8] c"wide character array initialized from non-wide string\00", align 1
@.str.165 = private unnamed_addr constant [63 x i8] c"wide character array initialized from incompatible wide string\00", align 1
@.str.166 = private unnamed_addr constant [50 x i8] c"initializer-string for array of chars is too long\00", align 1
@.str.167 = private unnamed_addr constant [55 x i8] c"initializer-string for array chars is too long for C++\00", align 1
@.str.168 = private unnamed_addr constant [61 x i8] c"array of inappropriate type initialized from string constant\00", align 1
@warn_sequence_point = external local_unnamed_addr global i32, align 4
@.str.169 = private unnamed_addr constant [53 x i8] c"array initialized from non-constant array expression\00", align 1
@.str.170 = private unnamed_addr constant [36 x i8] c"initializer element is not constant\00", align 1
@flag_pedantic_errors = external local_unnamed_addr global i32, align 4
@.str.171 = private unnamed_addr constant [49 x i8] c"initializer element is not a constant expression\00", align 1
@.str.172 = private unnamed_addr constant [51 x i8] c"initializer element is not computable at load time\00", align 1
@.str.173 = private unnamed_addr constant [45 x i8] c"variable-sized object may not be initialized\00", align 1
@.str.174 = private unnamed_addr constant [20 x i8] c"invalid initializer\00", align 1
@.str.175 = private unnamed_addr constant [42 x i8] c"cast adds new qualifiers to function type\00", align 1
@.str.176 = private unnamed_addr constant [50 x i8] c"cast discards qualifiers from pointer target type\00", align 1
@.str.177 = private unnamed_addr constant [66 x i8] c"new qualifiers in middle of multi-level non-const cast are unsafe\00", align 1
@warn_strict_prototypes = external local_unnamed_addr global i32, align 4
@.str.178 = private unnamed_addr constant [44 x i8] c"defining a type in a cast is invalid in C++\00", align 1
@flag_objc_gc = external local_unnamed_addr global i32, align 4
@.str.179 = private unnamed_addr constant [57 x i8] c"traditional C rejects automatic aggregate initialization\00", align 1
@.str.180 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.181 = private unnamed_addr constant [30 x i8] c"(near initialization for %qs)\00", align 1
@spelling_base = internal unnamed_addr global ptr null, align 8
@spelling = internal unnamed_addr global ptr null, align 8
@.str.182 = private unnamed_addr constant [6 x i8] c"[%lu]\00", align 1
@.str.183 = private unnamed_addr constant [53 x i8] c"array initialized from parenthesized string constant\00", align 1
@constructor_decl = internal unnamed_addr global ptr null, align 8
@require_constant_elements = internal unnamed_addr global i32 0, align 4
@constructor_stack = internal unnamed_addr global ptr null, align 8
@constructor_range_stack = internal unnamed_addr global ptr null, align 8
@constructor_elements = internal unnamed_addr global ptr null, align 8
@spelling_size = internal unnamed_addr global i32 0, align 4
@constructor_top_level = internal unnamed_addr global i32 0, align 4
@initializer_stack = internal unnamed_addr global ptr null, align 8
@constructor_designated = internal unnamed_addr global i32 0, align 4
@.str.184 = private unnamed_addr constant [12 x i8] c"(anonymous)\00", align 1
@missing_braces_mentioned = internal unnamed_addr global i1 false, align 4
@.str.185 = private unnamed_addr constant [42 x i8] c"opaque vector types cannot be initialized\00", align 1
@constructor_type = internal unnamed_addr global ptr null, align 8
@constructor_fields = internal unnamed_addr global ptr null, align 8
@constructor_index = internal unnamed_addr global ptr null, align 8
@constructor_max_index = internal unnamed_addr global ptr null, align 8
@constructor_unfilled_index = internal unnamed_addr global ptr null, align 8
@constructor_unfilled_fields = internal unnamed_addr global ptr null, align 8
@constructor_bit_index = internal unnamed_addr global ptr null, align 8
@constructor_constant = internal unnamed_addr global i32 0, align 4
@constructor_simple = internal unnamed_addr global i32 0, align 4
@constructor_nonconst = internal unnamed_addr global i32 0, align 4
@constructor_erroneous = internal unnamed_addr global i32 0, align 4
@constructor_pending_elts = internal unnamed_addr global ptr null, align 8
@constructor_depth = internal unnamed_addr global i32 0, align 4
@constructor_incremental = internal unnamed_addr global i32 0, align 4
@designator_depth = internal unnamed_addr global i32 0, align 4
@designator_erroneous = internal unnamed_addr global i1 false, align 4
@.str.186 = private unnamed_addr constant [40 x i8] c"extra brace group at end of initializer\00", align 1
@warn_missing_braces = external local_unnamed_addr global i32, align 4
@.str.187 = private unnamed_addr constant [34 x i8] c"missing braces around initializer\00", align 1
@.str.188 = private unnamed_addr constant [33 x i8] c"braces around scalar initializer\00", align 1
@.str.189 = private unnamed_addr constant [12 x i8] c"<anonymous>\00", align 1
@.str.190 = private unnamed_addr constant [48 x i8] c"initialized field with side-effects overwritten\00", align 1
@warn_override_init = external local_unnamed_addr global i32, align 4
@.str.191 = private unnamed_addr constant [30 x i8] c"initialized field overwritten\00", align 1
@.str.192 = private unnamed_addr constant [60 x i8] c"initialization of flexible array member in a nested context\00", align 1
@warn_missing_field_initializers = external local_unnamed_addr global i32, align 4
@.str.193 = private unnamed_addr constant [20 x i8] c"missing initializer\00", align 1
@.str.194 = private unnamed_addr constant [25 x i8] c"empty scalar initializer\00", align 1
@.str.195 = private unnamed_addr constant [37 x i8] c"extra elements in scalar initializer\00", align 1
@.str.196 = private unnamed_addr constant [47 x i8] c"array index in initializer not of integer type\00", align 1
@.str.197 = private unnamed_addr constant [65 x i8] c"array index in initializer is not an integer constant expression\00", align 1
@.str.198 = private unnamed_addr constant [39 x i8] c"nonconstant array index in initializer\00", align 1
@.str.199 = private unnamed_addr constant [37 x i8] c"array index in non-array initializer\00", align 1
@.str.200 = private unnamed_addr constant [48 x i8] c"array index in initializer exceeds array bounds\00", align 1
@.str.201 = private unnamed_addr constant [33 x i8] c"empty index range in initializer\00", align 1
@.str.202 = private unnamed_addr constant [54 x i8] c"array index range in initializer exceeds array bounds\00", align 1
@.str.203 = private unnamed_addr constant [46 x i8] c"field name not in record or union initializer\00", align 1
@.str.204 = private unnamed_addr constant [43 x i8] c"unknown field %qE specified in initializer\00", align 1
@.str.205 = private unnamed_addr constant [42 x i8] c"excess elements in char array initializer\00", align 1
@.str.206 = private unnamed_addr constant [38 x i8] c"excess elements in struct initializer\00", align 1
@.str.207 = private unnamed_addr constant [53 x i8] c"non-static initialization of a flexible array member\00", align 1
@.str.208 = private unnamed_addr constant [37 x i8] c"excess elements in union initializer\00", align 1
@.str.209 = private unnamed_addr constant [47 x i8] c"traditional C rejects initialization of unions\00", align 1
@.str.210 = private unnamed_addr constant [37 x i8] c"excess elements in array initializer\00", align 1
@.str.211 = private unnamed_addr constant [38 x i8] c"excess elements in vector initializer\00", align 1
@.str.212 = private unnamed_addr constant [38 x i8] c"excess elements in scalar initializer\00", align 1
@.str.213 = private unnamed_addr constant [30 x i8] c"ISO C forbids %<goto *expr;%>\00", align 1
@.str.214 = private unnamed_addr constant [58 x i8] c"function declared %<noreturn%> has a %<return%> statement\00", align 1
@current_function_returns_null = external local_unnamed_addr global i32, align 4
@warn_return_type = external local_unnamed_addr global i32, align 4
@.str.215 = private unnamed_addr constant [57 x i8] c"%<return%> with no value, in function returning non-void\00", align 1
@.str.216 = private unnamed_addr constant [52 x i8] c"%<return%> with a value, in function returning void\00", align 1
@.str.217 = private unnamed_addr constant [69 x i8] c"ISO C forbids %<return%> with expression, in function returning void\00", align 1
@current_function_returns_value = external local_unnamed_addr global i32, align 4
@.str.218 = private unnamed_addr constant [43 x i8] c"function returns address of local variable\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"switch quantity not an integer\00", align 1
@.str.220 = private unnamed_addr constant [61 x i8] c"%<long%> switch expression not converted to %<int%> in ISO C\00", align 1
@.str.221 = private unnamed_addr constant [49 x i8] c"case label is not an integer constant expression\00", align 1
@.str.222 = private unnamed_addr constant [41 x i8] c"case label not within a switch statement\00", align 1
@.str.223 = private unnamed_addr constant [48 x i8] c"%<default%> label not within a switch statement\00", align 1
@.str.224 = private unnamed_addr constant [52 x i8] c"suggest explicit braces to avoid ambiguous %<else%>\00", align 1
@.str.225 = private unnamed_addr constant [42 x i8] c"break statement not within loop or switch\00", align 1
@.str.226 = private unnamed_addr constant [37 x i8] c"continue statement not within a loop\00", align 1
@.str.227 = private unnamed_addr constant [42 x i8] c"break statement used with OpenMP for loop\00", align 1
@.str.228 = private unnamed_addr constant [41 x i8] c"expression statement has incomplete type\00", align 1
@.str.229 = private unnamed_addr constant [25 x i8] c"statement with no effect\00", align 1
@.str.230 = private unnamed_addr constant [30 x i8] c"right shift count is negative\00", align 1
@.str.231 = private unnamed_addr constant [35 x i8] c"right shift count >= width of type\00", align 1
@.str.232 = private unnamed_addr constant [29 x i8] c"left shift count is negative\00", align 1
@.str.233 = private unnamed_addr constant [34 x i8] c"left shift count >= width of type\00", align 1
@.str.234 = private unnamed_addr constant [49 x i8] c"comparing floating point with == or != is unsafe\00", align 1
@.str.235 = private unnamed_addr constant [50 x i8] c"comparison of pointers to disjoint address spaces\00", align 1
@.str.236 = private unnamed_addr constant [61 x i8] c"ISO C forbids comparison of %<void *%> with function pointer\00", align 1
@.str.237 = private unnamed_addr constant [50 x i8] c"comparison of distinct pointer types lacks a cast\00", align 1
@.str.238 = private unnamed_addr constant [38 x i8] c"the address of %qD will never be NULL\00", align 1
@.str.239 = private unnamed_addr constant [39 x i8] c"comparison between pointer and integer\00", align 1
@.str.240 = private unnamed_addr constant [47 x i8] c"comparison of complete and incomplete pointers\00", align 1
@.str.241 = private unnamed_addr constant [59 x i8] c"ISO C forbids ordered comparisons of pointers to functions\00", align 1
@.str.242 = private unnamed_addr constant [48 x i8] c"ordered comparison of pointer with integer zero\00", align 1
@extra_warnings = external local_unnamed_addr global i32, align 4
@flag_signed_zeros = external local_unnamed_addr global i32, align 4
@lang_hooks = external local_unnamed_addr global %struct.lang_hooks, align 8
@.str.243 = private unnamed_addr constant [47 x i8] c"pointer of type %<void *%> used in subtraction\00", align 1
@.str.244 = private unnamed_addr constant [42 x i8] c"pointer to a function used in subtraction\00", align 1
@.str.245 = private unnamed_addr constant [72 x i8] c"used array that cannot be converted to pointer where scalar is required\00", align 1
@.str.246 = private unnamed_addr constant [48 x i8] c"used struct type value where scalar is required\00", align 1
@.str.247 = private unnamed_addr constant [47 x i8] c"used union type value where scalar is required\00", align 1
@bitmap_default_obstack = external global %struct.bitmap_obstack, align 8
@.str.248 = private unnamed_addr constant [7 x i8] c"shared\00", align 1
@.str.249 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@.str.250 = private unnamed_addr constant [10 x i8] c"reduction\00", align 1
@.str.251 = private unnamed_addr constant [39 x i8] c"%qE has invalid type for %<reduction%>\00", align 1
@.str.252 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.253 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.254 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.255 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.256 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@.str.257 = private unnamed_addr constant [43 x i8] c"%qE has invalid type for %<reduction(%s)%>\00", align 1
@.str.258 = private unnamed_addr constant [12 x i8] c"copyprivate\00", align 1
@.str.259 = private unnamed_addr constant [7 x i8] c"copyin\00", align 1
@.str.260 = private unnamed_addr constant [45 x i8] c"%qE must be %<threadprivate%> for %<copyin%>\00", align 1
@.str.261 = private unnamed_addr constant [36 x i8] c"%qE is not a variable in clause %qs\00", align 1
@.str.262 = private unnamed_addr constant [43 x i8] c"%qE appears more than once in data clauses\00", align 1
@.str.263 = private unnamed_addr constant [13 x i8] c"firstprivate\00", align 1
@.str.264 = private unnamed_addr constant [49 x i8] c"%qE is not a variable in clause %<firstprivate%>\00", align 1
@.str.265 = private unnamed_addr constant [12 x i8] c"lastprivate\00", align 1
@.str.266 = private unnamed_addr constant [48 x i8] c"%qE is not a variable in clause %<lastprivate%>\00", align 1
@.str.267 = private unnamed_addr constant [14 x i8] c"threadprivate\00", align 1
@.str.268 = private unnamed_addr constant [33 x i8] c"%qE is predetermined %qs for %qs\00", align 1
@.str.269 = private unnamed_addr constant [28 x i8] c"invalid use of %<restrict%>\00", align 1
@.str.270 = private unnamed_addr constant [57 x i8] c"C++ requires promoted type, not enum type, in %<va_arg%>\00", align 1
@switch.table.convert_for_assignment = private unnamed_addr constant [3 x i32] [i32 -1, i32 -2, i32 0], align 4
@switch.table.output_pending_init_elements = private unnamed_addr constant [3 x ptr] [ptr @constructor_unfilled_index, ptr @constructor_unfilled_fields, ptr @constructor_unfilled_fields], align 8

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !6
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #20
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #20
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #20
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #20
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #20
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #20
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #20
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #20
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #20
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #20
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #20
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #20
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #20
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !22

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @require_complete_type(ptr noundef %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %5 = icmp eq ptr %4, %0
  %6 = icmp eq ptr %3, %4
  %7 = select i1 %5, i1 true, i1 %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %8
  tail call void @c_incomplete_type_error(ptr noundef nonnull %0, ptr noundef nonnull %3)
  %13 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %14

14:                                               ; preds = %1, %8, %12
  %15 = phi ptr [ %13, %12 ], [ %0, %8 ], [ %4, %1 ]
  ret ptr %15
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_incomplete_type_error(ptr noundef %0, ptr nocapture noundef readonly %1) local_unnamed_addr #9 {
  %3 = load i64, ptr %1, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %44, label %6

6:                                                ; preds = %2
  %7 = icmp eq ptr %0, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %9, %6
  br label %13

9:                                                ; preds = %6
  %10 = load i64, ptr %0, align 8
  %11 = trunc i64 %10 to i16
  switch i16 %11, label %8 [
    i16 32, label %12
    i16 34, label %12
  ]

12:                                               ; preds = %9, %9
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str, ptr noundef nonnull %0) #20
  br label %44

13:                                               ; preds = %8, %27
  %14 = phi i64 [ %30, %27 ], [ %3, %8 ]
  %15 = phi ptr [ %29, %27 ], [ %1, %8 ]
  %16 = trunc i64 %14 to i16
  switch i16 %16, label %32 [
    i16 16, label %33
    i16 17, label %34
    i16 6, label %35
    i16 19, label %17
    i16 15, label %18
  ]

17:                                               ; preds = %13
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.4) #20
  br label %44

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = icmp eq ptr %20, null
  br i1 %21, label %31, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.tree_type, ptr %20, i64 0, i32 14
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.5) #20
  br label %44

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = load i64, ptr %29, align 8
  br label %13

31:                                               ; preds = %18
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.6) #20
  br label %44

32:                                               ; preds = %13
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 254, ptr noundef nonnull @.str.8) #20
  br label %35

33:                                               ; preds = %13
  br label %35

34:                                               ; preds = %13
  br label %35

35:                                               ; preds = %13, %34, %33, %32
  %36 = phi ptr [ undef, %32 ], [ @.str.1, %33 ], [ @.str.2, %34 ], [ @.str.3, %13 ]
  %37 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 12
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = load i64, ptr %38, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 1
  br i1 %41, label %42, label %43

42:                                               ; preds = %35
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.9, ptr noundef %36, ptr noundef nonnull %38) #20
  br label %44

43:                                               ; preds = %35
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.10, ptr noundef nonnull %38) #20
  br label %44

44:                                               ; preds = %12, %43, %42, %2, %31, %26, %17
  ret void
}

declare void @error(ptr noundef, ...) local_unnamed_addr #3

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_type_promotes_to(ptr noundef %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 16
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 31), align 8, !tbaa !6
  %5 = icmp eq ptr %3, %4
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  %7 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 32), align 16, !tbaa !6
  br label %26

8:                                                ; preds = %1
  %9 = tail call zeroext i8 @c_promoting_integer_type_p(ptr noundef nonnull %0) #20
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %8
  %12 = load i64, ptr %0, align 8
  %13 = and i64 %12, 2097152
  %14 = icmp eq i64 %13, 0
  %15 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br i1 %14, label %26, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %20 = load i32, ptr %19, align 4
  %21 = xor i32 %20, %18
  %22 = and i32 %21, 1023
  %23 = icmp eq i32 %22, 0
  %24 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 6), align 16
  %25 = select i1 %23, ptr %24, ptr %15
  br label %26

26:                                               ; preds = %16, %11, %8, %6
  %27 = phi ptr [ %7, %6 ], [ %0, %8 ], [ %15, %11 ], [ %25, %16 ]
  ret ptr %27
}

declare zeroext i8 @c_promoting_integer_type_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local zeroext i8 @c_vla_type_p(ptr nocapture noundef readonly %0) local_unnamed_addr #10 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = icmp eq i64 %3, 15
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 4
  %8 = and i32 %7, 67108864
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %5, %1
  br label %11

11:                                               ; preds = %5, %10
  %12 = phi i8 [ 0, %10 ], [ 1, %5 ]
  ret i8 %12
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @composite_type(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %0, %1
  br i1 %3, label %30, label %4

4:                                                ; preds = %2
  %5 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %6 = icmp eq ptr %5, %0
  br i1 %6, label %30, label %7

7:                                                ; preds = %4
  %8 = icmp eq ptr %5, %1
  br i1 %8, label %30, label %9

9:                                                ; preds = %7
  %10 = load i64, ptr %0, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = load i64, ptr %1, align 8
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 65535
  %16 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 12), align 8, !tbaa !24
  %17 = tail call ptr %16(ptr noundef nonnull %0, ptr noundef nonnull %1) #20
  %18 = icmp eq i32 %12, 6
  %19 = icmp eq i32 %15, 8
  %20 = select i1 %18, i1 %19, i1 false
  br i1 %20, label %30, label %21

21:                                               ; preds = %9
  %22 = icmp eq i32 %15, 6
  %23 = icmp eq i32 %12, 8
  %24 = select i1 %22, i1 %23, i1 false
  br i1 %24, label %30, label %25

25:                                               ; preds = %21
  %26 = icmp eq i32 %12, %15
  br i1 %26, label %28, label %27

27:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 388, ptr noundef nonnull @.str.8) #20
  br label %28

28:                                               ; preds = %25, %27
  %29 = trunc i64 %10 to i16
  switch i16 %29, label %473 [
    i16 10, label %32
    i16 15, label %41
    i16 6, label %251
    i16 16, label %251
    i16 17, label %251
    i16 20, label %265
  ]

30:                                               ; preds = %279, %286, %294, %289, %258, %253, %167, %180, %189, %198, %248, %21, %9, %7, %4, %2, %473, %263, %32
  %31 = phi ptr [ %40, %32 ], [ %475, %473 ], [ %264, %263 ], [ %0, %2 ], [ %1, %4 ], [ %0, %7 ], [ %0, %9 ], [ %1, %21 ], [ %250, %248 ], [ %199, %198 ], [ %190, %189 ], [ %181, %180 ], [ %168, %167 ], [ %0, %253 ], [ %1, %258 ], [ %280, %279 ], [ %287, %286 ], [ %297, %294 ], [ %292, %289 ]
  ret ptr %31

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = tail call ptr @composite_type(ptr noundef %34, ptr noundef %36)
  %38 = tail call ptr @build_pointer_type(ptr noundef %37) #20
  %39 = tail call ptr @build_type_attribute_variant(ptr noundef %38, ptr noundef %17) #20
  %40 = tail call fastcc ptr @qualify_type(ptr noundef %39, ptr noundef nonnull %1)
  br label %30

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = tail call ptr @composite_type(ptr noundef %43, ptr noundef %45)
  %47 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = load i64, ptr %0, align 8
  %52 = trunc i64 %51 to i32
  %53 = lshr i32 %52, 20
  %54 = and i32 %53, 1
  %55 = lshr i32 %52, 18
  %56 = and i32 %55, 2
  %57 = or i32 %54, %56
  %58 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %59 = load i32, ptr %58, align 4
  %60 = lshr i32 %59, 11
  %61 = and i32 %60, 4
  %62 = or i32 %57, %61
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %78

64:                                               ; preds = %41
  %65 = load i64, ptr %1, align 8
  %66 = trunc i64 %65 to i32
  %67 = lshr i32 %66, 20
  %68 = and i32 %67, 1
  %69 = lshr i32 %66, 18
  %70 = and i32 %69, 2
  %71 = or i32 %68, %70
  %72 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %73 = load i32, ptr %72, align 4
  %74 = lshr i32 %73, 11
  %75 = and i32 %74, 4
  %76 = or i32 %71, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %79, label %78

78:                                               ; preds = %64, %41
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 416, ptr noundef nonnull @.str.8) #20
  br label %79

79:                                               ; preds = %64, %78
  %80 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = icmp ne ptr %81, null
  %83 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  %85 = icmp ne ptr %84, null
  %86 = icmp eq ptr %48, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %79
  %88 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 14
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = icmp eq ptr %89, null
  br label %91

91:                                               ; preds = %87, %79
  %92 = phi i1 [ true, %79 ], [ %90, %87 ]
  %93 = icmp eq ptr %50, null
  br i1 %93, label %98, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %struct.tree_type, ptr %50, i64 0, i32 14
  %96 = load ptr, ptr %95, align 8, !tbaa !17
  %97 = icmp eq ptr %96, null
  br label %98

98:                                               ; preds = %94, %91
  %99 = phi i1 [ true, %91 ], [ %97, %94 ]
  br i1 %92, label %112, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 13
  %102 = load ptr, ptr %101, align 8, !tbaa !17
  %103 = load i64, ptr %102, align 8
  %104 = and i64 %103, 65535
  %105 = icmp eq i64 %104, 23
  br i1 %105, label %106, label %112

106:                                              ; preds = %100
  %107 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 14
  %108 = load ptr, ptr %107, align 8, !tbaa !17
  %109 = load i64, ptr %108, align 8
  %110 = and i64 %109, 65535
  %111 = icmp ne i64 %110, 23
  br label %112

112:                                              ; preds = %100, %106, %98
  %113 = phi i1 [ false, %98 ], [ true, %100 ], [ %111, %106 ]
  br i1 %99, label %126, label %114

114:                                              ; preds = %112
  %115 = getelementptr inbounds %struct.tree_type, ptr %50, i64 0, i32 13
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = load i64, ptr %116, align 8
  %118 = and i64 %117, 65535
  %119 = icmp eq i64 %118, 23
  br i1 %119, label %120, label %126

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.tree_type, ptr %50, i64 0, i32 14
  %122 = load ptr, ptr %121, align 8, !tbaa !17
  %123 = load i64, ptr %122, align 8
  %124 = and i64 %123, 65535
  %125 = icmp ne i64 %124, 23
  br label %126

126:                                              ; preds = %114, %120, %112
  %127 = phi i1 [ false, %112 ], [ true, %114 ], [ %125, %120 ]
  %128 = xor i1 %92, true
  %129 = select i1 %113, i1 true, i1 %128
  %130 = zext i1 %113 to i8
  br i1 %129, label %140, label %131

131:                                              ; preds = %126
  %132 = load i64, ptr %0, align 8
  %133 = and i64 %132, 65535
  %134 = icmp eq i64 %133, 15
  br i1 %134, label %135, label %139

135:                                              ; preds = %131
  %136 = load i32, ptr %58, align 4
  %137 = and i32 %136, 67108864
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %135, %131
  br label %140

140:                                              ; preds = %139, %135, %126
  %141 = phi i8 [ %130, %126 ], [ 0, %139 ], [ 1, %135 ]
  %142 = xor i1 %99, true
  %143 = select i1 %127, i1 true, i1 %142
  %144 = zext i1 %127 to i8
  br i1 %143, label %155, label %145

145:                                              ; preds = %140
  %146 = load i64, ptr %1, align 8
  %147 = and i64 %146, 65535
  %148 = icmp eq i64 %147, 15
  br i1 %148, label %149, label %154

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %151 = load i32, ptr %150, align 4
  %152 = and i32 %151, 67108864
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %149, %145
  br label %155

155:                                              ; preds = %154, %149, %140
  %156 = phi i8 [ %144, %140 ], [ 0, %154 ], [ 1, %149 ]
  %157 = load ptr, ptr %42, align 8, !tbaa !17
  %158 = icmp eq ptr %46, %157
  br i1 %158, label %159, label %169

159:                                              ; preds = %155
  %160 = load ptr, ptr %47, align 8, !tbaa !17
  %161 = icmp eq ptr %160, null
  br i1 %161, label %169, label %162

162:                                              ; preds = %159
  %163 = icmp ne i8 %156, 0
  %164 = select i1 %163, i1 true, i1 %99
  %165 = icmp eq i8 %141, 0
  %166 = select i1 %164, i1 true, i1 %165
  br i1 %166, label %167, label %169

167:                                              ; preds = %162
  %168 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %0, ptr noundef %17) #20
  br label %30

169:                                              ; preds = %162, %159, %155
  %170 = load ptr, ptr %44, align 8, !tbaa !17
  %171 = icmp eq ptr %46, %170
  br i1 %171, label %172, label %182

172:                                              ; preds = %169
  %173 = load ptr, ptr %49, align 8, !tbaa !17
  %174 = icmp eq ptr %173, null
  br i1 %174, label %182, label %175

175:                                              ; preds = %172
  %176 = icmp ne i8 %141, 0
  %177 = select i1 %176, i1 true, i1 %92
  %178 = icmp eq i8 %156, 0
  %179 = select i1 %177, i1 true, i1 %178
  br i1 %179, label %180, label %182

180:                                              ; preds = %175
  %181 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %1, ptr noundef %17) #20
  br label %30

182:                                              ; preds = %175, %172, %169
  br i1 %158, label %183, label %191

183:                                              ; preds = %182
  %184 = load ptr, ptr %49, align 8, !tbaa !17
  %185 = icmp eq ptr %184, null
  br i1 %185, label %186, label %191

186:                                              ; preds = %183
  %187 = load ptr, ptr %47, align 8, !tbaa !17
  %188 = icmp eq ptr %187, null
  br i1 %188, label %189, label %191

189:                                              ; preds = %186
  %190 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %0, ptr noundef %17) #20
  br label %30

191:                                              ; preds = %186, %183, %182
  br i1 %171, label %192, label %200

192:                                              ; preds = %191
  %193 = load ptr, ptr %49, align 8, !tbaa !17
  %194 = icmp eq ptr %193, null
  br i1 %194, label %195, label %200

195:                                              ; preds = %192
  %196 = load ptr, ptr %47, align 8, !tbaa !17
  %197 = icmp eq ptr %196, null
  br i1 %197, label %198, label %200

198:                                              ; preds = %195
  %199 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %1, ptr noundef %17) #20
  br label %30

200:                                              ; preds = %195, %192, %191
  %201 = tail call ptr @strip_array_types(ptr noundef %46) #20
  %202 = load i64, ptr %201, align 8
  %203 = trunc i64 %202 to i32
  %204 = lshr i32 %203, 20
  %205 = and i32 %204, 1
  %206 = tail call ptr @strip_array_types(ptr noundef %46) #20
  %207 = load i64, ptr %206, align 8
  %208 = trunc i64 %207 to i32
  %209 = lshr i32 %208, 18
  %210 = and i32 %209, 2
  %211 = or i32 %210, %205
  %212 = tail call ptr @strip_array_types(ptr noundef %46) #20
  %213 = getelementptr inbounds %struct.tree_type, ptr %212, i64 0, i32 6
  %214 = load i32, ptr %213, align 4
  %215 = lshr i32 %214, 11
  %216 = and i32 %215, 4
  %217 = or i32 %211, %216
  %218 = tail call ptr @strip_array_types(ptr noundef %46) #20
  %219 = load i64, ptr %218, align 8
  %220 = lshr i64 %219, 48
  %221 = trunc i64 %220 to i32
  %222 = and i32 %221, 65280
  %223 = or i32 %217, %222
  %224 = tail call ptr @c_build_qualified_type(ptr noundef %46, i32 noundef 0)
  %225 = load ptr, ptr %47, align 8, !tbaa !17
  %226 = icmp eq ptr %225, null
  br i1 %226, label %232, label %227

227:                                              ; preds = %200
  %228 = icmp ne i8 %156, 0
  %229 = select i1 %228, i1 true, i1 %99
  %230 = icmp eq i8 %141, 0
  %231 = select i1 %229, i1 true, i1 %230
  br i1 %231, label %234, label %232

232:                                              ; preds = %227, %200
  %233 = load ptr, ptr %49, align 8, !tbaa !17
  br label %234

234:                                              ; preds = %227, %232
  %235 = phi ptr [ %233, %232 ], [ %225, %227 ]
  %236 = tail call ptr @build_array_type(ptr noundef %224, ptr noundef %235) #20
  %237 = select i1 %92, i1 %99, i1 false
  %238 = select i1 %82, i1 true, i1 %85
  %239 = select i1 %237, i1 %238, i1 false
  br i1 %239, label %240, label %248

240:                                              ; preds = %234
  %241 = getelementptr inbounds %struct.tree_type, ptr %236, i64 0, i32 2
  %242 = load ptr, ptr %241, align 8, !tbaa !17
  %243 = icmp eq ptr %242, null
  br i1 %243, label %244, label %248

244:                                              ; preds = %240
  %245 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %245, ptr %241, align 8, !tbaa !17
  %246 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 17), align 8, !tbaa !6
  %247 = getelementptr inbounds %struct.tree_type, ptr %236, i64 0, i32 3
  store ptr %246, ptr %247, align 8, !tbaa !17
  br label %248

248:                                              ; preds = %244, %240, %234
  %249 = tail call ptr @c_build_qualified_type(ptr noundef %236, i32 noundef %223)
  %250 = tail call ptr @build_type_attribute_variant(ptr noundef %249, ptr noundef %17) #20
  br label %30

251:                                              ; preds = %28, %28, %28
  %252 = icmp eq ptr %17, null
  br i1 %252, label %263, label %253

253:                                              ; preds = %251
  %254 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  %255 = load ptr, ptr %254, align 8, !tbaa !17
  %256 = tail call i32 @attribute_list_equal(ptr noundef %255, ptr noundef nonnull %17) #20
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %30

258:                                              ; preds = %253
  %259 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 4
  %260 = load ptr, ptr %259, align 8, !tbaa !17
  %261 = tail call i32 @attribute_list_equal(ptr noundef %260, ptr noundef nonnull %17) #20
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %30

263:                                              ; preds = %258, %251
  %264 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %0, ptr noundef %17) #20
  br label %30

265:                                              ; preds = %28
  %266 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %267 = load ptr, ptr %266, align 8, !tbaa !17
  %268 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %269 = load ptr, ptr %268, align 8, !tbaa !17
  %270 = tail call ptr @composite_type(ptr noundef %267, ptr noundef %269)
  %271 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %272 = load ptr, ptr %271, align 8, !tbaa !17
  %273 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %274 = load ptr, ptr %273, align 8, !tbaa !17
  %275 = load ptr, ptr %266, align 8, !tbaa !17
  %276 = icmp eq ptr %270, %275
  %277 = icmp eq ptr %274, null
  %278 = select i1 %276, i1 %277, i1 false
  br i1 %278, label %279, label %281

279:                                              ; preds = %265
  %280 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %0, ptr noundef %17) #20
  br label %30

281:                                              ; preds = %265
  %282 = load ptr, ptr %268, align 8, !tbaa !17
  %283 = icmp eq ptr %270, %282
  %284 = icmp eq ptr %272, null
  br i1 %283, label %285, label %288

285:                                              ; preds = %281
  br i1 %284, label %286, label %293

286:                                              ; preds = %285
  %287 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %1, ptr noundef %17) #20
  br label %30

288:                                              ; preds = %281
  br i1 %284, label %289, label %293

289:                                              ; preds = %288
  %290 = tail call ptr @build_function_type(ptr noundef %270, ptr noundef %274) #20
  %291 = tail call ptr @build_type_attribute_variant(ptr noundef %290, ptr noundef %17) #20
  %292 = tail call fastcc ptr @qualify_type(ptr noundef %291, ptr noundef nonnull %1)
  br label %30

293:                                              ; preds = %285, %288
  br i1 %277, label %294, label %298

294:                                              ; preds = %293
  %295 = tail call ptr @build_function_type(ptr noundef %270, ptr noundef nonnull %272) #20
  %296 = tail call ptr @build_type_attribute_variant(ptr noundef %295, ptr noundef %17) #20
  %297 = tail call fastcc ptr @qualify_type(ptr noundef %296, ptr noundef nonnull %1)
  br label %30

298:                                              ; preds = %293
  store i8 1, ptr @c_override_global_bindings_to_false, align 1, !tbaa !17
  %299 = tail call i32 @list_length(ptr noundef nonnull %272) #20
  %300 = icmp sgt i32 %299, 0
  br i1 %300, label %305, label %303

301:                                              ; preds = %305
  %302 = icmp eq ptr %272, null
  br i1 %302, label %469, label %303

303:                                              ; preds = %298, %301
  %304 = phi ptr [ %308, %301 ], [ null, %298 ]
  br label %311

305:                                              ; preds = %298, %305
  %306 = phi i32 [ %309, %305 ], [ 0, %298 ]
  %307 = phi ptr [ %308, %305 ], [ null, %298 ]
  %308 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef null, ptr noundef %307) #20
  %309 = add nuw nsw i32 %306, 1
  %310 = icmp eq i32 %309, %299
  br i1 %310, label %301, label %305, !llvm.loop !36

311:                                              ; preds = %303, %461
  %312 = phi ptr [ %467, %461 ], [ %304, %303 ]
  %313 = phi ptr [ %465, %461 ], [ %274, %303 ]
  %314 = phi ptr [ %463, %461 ], [ %272, %303 ]
  %315 = getelementptr inbounds %struct.tree_list, ptr %314, i64 0, i32 2
  %316 = load ptr, ptr %315, align 8, !tbaa !17
  %317 = icmp eq ptr %316, null
  %318 = getelementptr inbounds %struct.tree_list, ptr %313, i64 0, i32 2
  %319 = load ptr, ptr %318, align 8, !tbaa !17
  br i1 %317, label %320, label %322

320:                                              ; preds = %311
  %321 = getelementptr inbounds %struct.tree_list, ptr %312, i64 0, i32 2
  store ptr %319, ptr %321, align 8, !tbaa !17
  br label %461

322:                                              ; preds = %311
  %323 = icmp eq ptr %319, null
  br i1 %323, label %324, label %326

324:                                              ; preds = %322
  %325 = getelementptr inbounds %struct.tree_list, ptr %312, i64 0, i32 2
  store ptr %316, ptr %325, align 8, !tbaa !17
  br label %461

326:                                              ; preds = %322
  %327 = load i64, ptr %316, align 8
  %328 = and i64 %327, 65535
  %329 = icmp ne i64 %328, 17
  %330 = icmp eq ptr %316, %319
  %331 = or i1 %330, %329
  br i1 %331, label %389, label %332

332:                                              ; preds = %326
  %333 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %334 = icmp eq ptr %319, %333
  br i1 %334, label %342, label %335

335:                                              ; preds = %332
  %336 = load i64, ptr %319, align 8
  %337 = and i64 %336, 65535
  %338 = icmp eq i64 %337, 15
  br i1 %338, label %342, label %339

339:                                              ; preds = %335
  %340 = getelementptr inbounds %struct.tree_type, ptr %319, i64 0, i32 16
  %341 = load ptr, ptr %340, align 8, !tbaa !17
  br label %342

342:                                              ; preds = %339, %335, %332
  %343 = phi ptr [ %341, %339 ], [ %319, %335 ], [ %319, %332 ]
  %344 = getelementptr inbounds %struct.tree_type, ptr %316, i64 0, i32 1
  %345 = load ptr, ptr %344, align 8, !tbaa !17
  %346 = icmp eq ptr %345, null
  br i1 %346, label %389, label %347

347:                                              ; preds = %342, %374
  %348 = phi ptr [ %376, %374 ], [ %345, %342 ]
  %349 = getelementptr inbounds %struct.tree_common, ptr %348, i64 0, i32 2
  %350 = load ptr, ptr %349, align 8, !tbaa !17
  %351 = icmp eq ptr %350, null
  br i1 %351, label %362, label %352

352:                                              ; preds = %347
  %353 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %354 = icmp eq ptr %350, %353
  br i1 %354, label %362, label %355

355:                                              ; preds = %352
  %356 = load i64, ptr %350, align 8
  %357 = and i64 %356, 65535
  %358 = icmp eq i64 %357, 15
  br i1 %358, label %362, label %359

359:                                              ; preds = %355
  %360 = getelementptr inbounds %struct.tree_type, ptr %350, i64 0, i32 16
  %361 = load ptr, ptr %360, align 8, !tbaa !17
  br label %362

362:                                              ; preds = %359, %355, %352, %347
  %363 = phi ptr [ %361, %359 ], [ %350, %355 ], [ %350, %352 ], [ null, %347 ]
  %364 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %365 = tail call fastcc i32 @comptypes_internal(ptr noundef %363, ptr noundef %343, ptr noundef null)
  %366 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %367 = icmp eq ptr %366, %364
  br i1 %367, label %372, label %368

368:                                              ; preds = %362, %368
  %369 = phi ptr [ %370, %368 ], [ %366, %362 ]
  %370 = load ptr, ptr %369, align 8, !tbaa !37
  tail call void @free(ptr noundef %369)
  %371 = icmp eq ptr %370, %364
  br i1 %371, label %372, label %368, !llvm.loop !39

372:                                              ; preds = %368, %362
  store ptr %364, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %373 = icmp eq i32 %365, 0
  br i1 %373, label %374, label %378

374:                                              ; preds = %372
  %375 = getelementptr inbounds %struct.tree_common, ptr %348, i64 0, i32 1
  %376 = load ptr, ptr %375, align 8, !tbaa !17
  %377 = icmp eq ptr %376, null
  br i1 %377, label %386, label %347, !llvm.loop !40

378:                                              ; preds = %372
  %379 = getelementptr inbounds %struct.tree_common, ptr %348, i64 0, i32 2
  %380 = load ptr, ptr %379, align 8, !tbaa !17
  %381 = load ptr, ptr %318, align 8, !tbaa !17
  %382 = tail call ptr @composite_type(ptr noundef %380, ptr noundef %381)
  %383 = getelementptr inbounds %struct.tree_list, ptr %312, i64 0, i32 2
  store ptr %382, ptr %383, align 8, !tbaa !17
  %384 = load i32, ptr @input_location, align 4, !tbaa !21
  %385 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %384, i32 noundef 834, ptr noundef nonnull @.str.11) #20
  br label %461

386:                                              ; preds = %374
  %387 = load ptr, ptr %318, align 8, !tbaa !17
  %388 = load ptr, ptr %315, align 8, !tbaa !17
  br label %389

389:                                              ; preds = %386, %342, %326
  %390 = phi ptr [ %388, %386 ], [ %316, %342 ], [ %316, %326 ]
  %391 = phi ptr [ %387, %386 ], [ %319, %342 ], [ %319, %326 ]
  %392 = load i64, ptr %391, align 8
  %393 = and i64 %392, 65535
  %394 = icmp eq i64 %393, 17
  br i1 %394, label %395, label %456

395:                                              ; preds = %389
  %396 = icmp eq ptr %391, %390
  br i1 %396, label %456, label %397

397:                                              ; preds = %395
  %398 = icmp eq ptr %390, null
  br i1 %398, label %409, label %399

399:                                              ; preds = %397
  %400 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %401 = icmp eq ptr %390, %400
  br i1 %401, label %409, label %402

402:                                              ; preds = %399
  %403 = load i64, ptr %390, align 8
  %404 = and i64 %403, 65535
  %405 = icmp eq i64 %404, 15
  br i1 %405, label %409, label %406

406:                                              ; preds = %402
  %407 = getelementptr inbounds %struct.tree_type, ptr %390, i64 0, i32 16
  %408 = load ptr, ptr %407, align 8, !tbaa !17
  br label %409

409:                                              ; preds = %406, %402, %399, %397
  %410 = phi ptr [ %408, %406 ], [ %390, %402 ], [ %390, %399 ], [ null, %397 ]
  %411 = getelementptr inbounds %struct.tree_type, ptr %391, i64 0, i32 1
  %412 = load ptr, ptr %411, align 8, !tbaa !17
  %413 = icmp eq ptr %412, null
  br i1 %413, label %456, label %414

414:                                              ; preds = %409, %441
  %415 = phi ptr [ %443, %441 ], [ %412, %409 ]
  %416 = getelementptr inbounds %struct.tree_common, ptr %415, i64 0, i32 2
  %417 = load ptr, ptr %416, align 8, !tbaa !17
  %418 = icmp eq ptr %417, null
  br i1 %418, label %429, label %419

419:                                              ; preds = %414
  %420 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %421 = icmp eq ptr %417, %420
  br i1 %421, label %429, label %422

422:                                              ; preds = %419
  %423 = load i64, ptr %417, align 8
  %424 = and i64 %423, 65535
  %425 = icmp eq i64 %424, 15
  br i1 %425, label %429, label %426

426:                                              ; preds = %422
  %427 = getelementptr inbounds %struct.tree_type, ptr %417, i64 0, i32 16
  %428 = load ptr, ptr %427, align 8, !tbaa !17
  br label %429

429:                                              ; preds = %426, %422, %419, %414
  %430 = phi ptr [ %428, %426 ], [ %417, %422 ], [ %417, %419 ], [ null, %414 ]
  %431 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %432 = tail call fastcc i32 @comptypes_internal(ptr noundef %430, ptr noundef %410, ptr noundef null)
  %433 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %434 = icmp eq ptr %433, %431
  br i1 %434, label %439, label %435

435:                                              ; preds = %429, %435
  %436 = phi ptr [ %437, %435 ], [ %433, %429 ]
  %437 = load ptr, ptr %436, align 8, !tbaa !37
  tail call void @free(ptr noundef %436)
  %438 = icmp eq ptr %437, %431
  br i1 %438, label %439, label %435, !llvm.loop !39

439:                                              ; preds = %435, %429
  store ptr %431, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %440 = icmp eq i32 %432, 0
  br i1 %440, label %441, label %445

441:                                              ; preds = %439
  %442 = getelementptr inbounds %struct.tree_common, ptr %415, i64 0, i32 1
  %443 = load ptr, ptr %442, align 8, !tbaa !17
  %444 = icmp eq ptr %443, null
  br i1 %444, label %453, label %414, !llvm.loop !41

445:                                              ; preds = %439
  %446 = getelementptr inbounds %struct.tree_common, ptr %415, i64 0, i32 2
  %447 = load ptr, ptr %446, align 8, !tbaa !17
  %448 = load ptr, ptr %315, align 8, !tbaa !17
  %449 = tail call ptr @composite_type(ptr noundef %447, ptr noundef %448)
  %450 = getelementptr inbounds %struct.tree_list, ptr %312, i64 0, i32 2
  store ptr %449, ptr %450, align 8, !tbaa !17
  %451 = load i32, ptr @input_location, align 4, !tbaa !21
  %452 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %451, i32 noundef 834, ptr noundef nonnull @.str.11) #20
  br label %461

453:                                              ; preds = %441
  %454 = load ptr, ptr %315, align 8, !tbaa !17
  %455 = load ptr, ptr %318, align 8, !tbaa !17
  br label %456

456:                                              ; preds = %453, %409, %395, %389
  %457 = phi ptr [ %455, %453 ], [ %391, %409 ], [ %390, %395 ], [ %391, %389 ]
  %458 = phi ptr [ %454, %453 ], [ %390, %409 ], [ %390, %395 ], [ %390, %389 ]
  %459 = tail call ptr @composite_type(ptr noundef %458, ptr noundef %457)
  %460 = getelementptr inbounds %struct.tree_list, ptr %312, i64 0, i32 2
  store ptr %459, ptr %460, align 8, !tbaa !17
  br label %461

461:                                              ; preds = %445, %378, %320, %324, %456
  %462 = getelementptr inbounds %struct.tree_common, ptr %314, i64 0, i32 1
  %463 = load ptr, ptr %462, align 8, !tbaa !17
  %464 = getelementptr inbounds %struct.tree_common, ptr %313, i64 0, i32 1
  %465 = load ptr, ptr %464, align 8, !tbaa !17
  %466 = getelementptr inbounds %struct.tree_common, ptr %312, i64 0, i32 1
  %467 = load ptr, ptr %466, align 8, !tbaa !17
  %468 = icmp eq ptr %463, null
  br i1 %468, label %469, label %311, !llvm.loop !42

469:                                              ; preds = %461, %301
  %470 = phi ptr [ %308, %301 ], [ %304, %461 ]
  store i8 0, ptr @c_override_global_bindings_to_false, align 1, !tbaa !17
  %471 = tail call ptr @build_function_type(ptr noundef %270, ptr noundef %470) #20
  %472 = tail call fastcc ptr @qualify_type(ptr noundef %471, ptr noundef nonnull %1)
  br label %473

473:                                              ; preds = %469, %28
  %474 = phi ptr [ %0, %28 ], [ %472, %469 ]
  %475 = tail call ptr @build_type_attribute_variant(ptr noundef %474, ptr noundef %17) #20
  br label %30
}

declare ptr @build_pointer_type(ptr noundef) local_unnamed_addr #3

declare ptr @build_type_attribute_variant(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @qualify_type(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = lshr i64 %3, 56
  %5 = trunc i64 %4 to i8
  %6 = load i64, ptr %1, align 8
  %7 = lshr i64 %6, 56
  %8 = trunc i64 %7 to i8
  %9 = icmp eq i8 %5, %8
  br i1 %9, label %19, label %10

10:                                               ; preds = %2
  %11 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %12 = tail call zeroext i8 %11(i8 noundef zeroext %5, i8 noundef zeroext %8) #20
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %16 = tail call zeroext i8 %15(i8 noundef zeroext %8, i8 noundef zeroext %5) #20
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.12, ptr noundef nonnull %0, ptr noundef nonnull %1) #20
  br label %19

19:                                               ; preds = %14, %10, %2, %18
  %20 = phi i8 [ %5, %18 ], [ %5, %2 ], [ %8, %10 ], [ %5, %14 ]
  %21 = load i64, ptr %0, align 8
  %22 = trunc i64 %21 to i32
  %23 = lshr i32 %22, 20
  %24 = and i32 %23, 1
  %25 = lshr i32 %22, 18
  %26 = and i32 %25, 2
  %27 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %28 = load i32, ptr %27, align 4
  %29 = lshr i32 %28, 11
  %30 = and i32 %29, 4
  %31 = load i64, ptr %1, align 8
  %32 = trunc i64 %31 to i32
  %33 = lshr i32 %32, 20
  %34 = and i32 %33, 1
  %35 = lshr i32 %32, 18
  %36 = and i32 %35, 2
  %37 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %38 = load i32, ptr %37, align 4
  %39 = lshr i32 %38, 11
  %40 = and i32 %39, 4
  %41 = or i32 %24, %26
  %42 = or i32 %41, %30
  %43 = or i32 %42, %36
  %44 = or i32 %43, %34
  %45 = or i32 %44, %40
  %46 = zext i8 %20 to i32
  %47 = shl nuw nsw i32 %46, 8
  %48 = or i32 %45, %47
  %49 = tail call ptr @c_build_qualified_type(ptr noundef nonnull %0, i32 noundef %48)
  ret ptr %49
}

declare ptr @strip_array_types(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_build_qualified_type(ptr noundef %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %4 = icmp eq ptr %3, %0
  br i1 %4, label %88, label %5

5:                                                ; preds = %2
  %6 = load i64, ptr %0, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 15
  br i1 %8, label %9, label %97

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call ptr @c_build_qualified_type(ptr noundef %11, i32 noundef %1)
  %13 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 16
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = icmp eq ptr %14, null
  br i1 %15, label %66, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 12
  %18 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 18
  %19 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 4
  br label %20

20:                                               ; preds = %16, %62
  %21 = phi ptr [ %14, %16 ], [ %64, %62 ]
  %22 = tail call ptr @strip_array_types(ptr noundef nonnull %21) #20
  %23 = load i64, ptr %22, align 8
  %24 = trunc i64 %23 to i32
  %25 = lshr i32 %24, 20
  %26 = and i32 %25, 1
  %27 = tail call ptr @strip_array_types(ptr noundef nonnull %21) #20
  %28 = load i64, ptr %27, align 8
  %29 = trunc i64 %28 to i32
  %30 = lshr i32 %29, 18
  %31 = and i32 %30, 2
  %32 = or i32 %31, %26
  %33 = tail call ptr @strip_array_types(ptr noundef nonnull %21) #20
  %34 = getelementptr inbounds %struct.tree_type, ptr %33, i64 0, i32 6
  %35 = load i32, ptr %34, align 4
  %36 = lshr i32 %35, 11
  %37 = and i32 %36, 4
  %38 = or i32 %32, %37
  %39 = tail call ptr @strip_array_types(ptr noundef nonnull %21) #20
  %40 = load i64, ptr %39, align 8
  %41 = lshr i64 %40, 48
  %42 = trunc i64 %41 to i32
  %43 = and i32 %42, 65280
  %44 = or i32 %38, %43
  %45 = icmp eq i32 %44, %1
  br i1 %45, label %46, label %62

46:                                               ; preds = %20
  %47 = getelementptr inbounds %struct.tree_type, ptr %21, i64 0, i32 12
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load ptr, ptr %17, align 8, !tbaa !17
  %50 = icmp eq ptr %48, %49
  br i1 %50, label %51, label %62

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.tree_type, ptr %21, i64 0, i32 18
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = load ptr, ptr %18, align 8, !tbaa !17
  %55 = icmp eq ptr %53, %54
  br i1 %55, label %56, label %62

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.tree_type, ptr %21, i64 0, i32 4
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  %59 = load ptr, ptr %19, align 8, !tbaa !17
  %60 = tail call i32 @attribute_list_equal(ptr noundef %58, ptr noundef %59) #20
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %88

62:                                               ; preds = %20, %46, %51, %56
  %63 = getelementptr inbounds %struct.tree_type, ptr %21, i64 0, i32 15
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %20, !llvm.loop !44

66:                                               ; preds = %62, %9
  %67 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  %69 = tail call ptr @build_variant_type_copy(ptr noundef nonnull %0) #20
  %70 = getelementptr inbounds %struct.tree_common, ptr %69, i64 0, i32 2
  store ptr %12, ptr %70, align 8, !tbaa !17
  %71 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 19
  %72 = load ptr, ptr %71, align 8, !tbaa !17
  %73 = icmp eq ptr %72, null
  br i1 %73, label %80, label %74

74:                                               ; preds = %66
  %75 = icmp eq ptr %68, null
  br i1 %75, label %82, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds %struct.tree_type, ptr %68, i64 0, i32 19
  %78 = load ptr, ptr %77, align 8, !tbaa !17
  %79 = icmp eq ptr %78, null
  br i1 %79, label %80, label %84

80:                                               ; preds = %76, %66
  %81 = getelementptr inbounds %struct.tree_type, ptr %69, i64 0, i32 19
  store ptr null, ptr %81, align 8, !tbaa !17
  br label %88

82:                                               ; preds = %74
  %83 = icmp eq ptr %72, %12
  br i1 %83, label %95, label %90

84:                                               ; preds = %76
  %85 = icmp eq ptr %72, %12
  %86 = icmp eq ptr %78, %68
  %87 = select i1 %85, i1 %86, i1 false
  br i1 %87, label %95, label %90

88:                                               ; preds = %95, %80, %2, %110, %56, %90
  %89 = phi ptr [ %69, %90 ], [ %112, %110 ], [ %0, %2 ], [ %69, %95 ], [ %69, %80 ], [ %21, %56 ]
  ret ptr %89

90:                                               ; preds = %84, %82
  %91 = phi ptr [ null, %82 ], [ %78, %84 ]
  %92 = tail call ptr @build_array_type(ptr noundef nonnull %72, ptr noundef %91) #20
  %93 = tail call ptr @c_build_qualified_type(ptr noundef %92, i32 noundef %1)
  %94 = getelementptr inbounds %struct.tree_type, ptr %69, i64 0, i32 19
  store ptr %93, ptr %94, align 8, !tbaa !17
  br label %88

95:                                               ; preds = %84, %82
  %96 = getelementptr inbounds %struct.tree_type, ptr %69, i64 0, i32 19
  store ptr %69, ptr %96, align 8, !tbaa !17
  br label %88

97:                                               ; preds = %5
  %98 = and i32 %1, 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %110, label %100

100:                                              ; preds = %97
  %101 = trunc i64 %6 to i16
  switch i16 %101, label %108 [
    i16 10, label %102
    i16 12, label %102
  ]

102:                                              ; preds = %100, %100
  %103 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !17
  %105 = load i64, ptr %104, align 8
  %106 = and i64 %105, 65535
  %107 = icmp eq i64 %106, 20
  br i1 %107, label %108, label %110

108:                                              ; preds = %100, %102
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.269) #20
  %109 = and i32 %1, -5
  br label %110

110:                                              ; preds = %108, %102, %97
  %111 = phi i32 [ %109, %108 ], [ %1, %102 ], [ %1, %97 ]
  %112 = tail call ptr @build_qualified_type(ptr noundef nonnull %0, i32 noundef %111) #20
  br label %88
}

declare ptr @build_array_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @attribute_list_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_function_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @list_length(ptr noundef) local_unnamed_addr #3

declare ptr @tree_cons_stat(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @comptypes(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %4 = tail call fastcc i32 @comptypes_internal(ptr noundef %0, ptr noundef %1, ptr noundef null)
  %5 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %6 = icmp eq ptr %5, %3
  br i1 %6, label %11, label %7

7:                                                ; preds = %2, %7
  %8 = phi ptr [ %9, %7 ], [ %5, %2 ]
  %9 = load ptr, ptr %8, align 8, !tbaa !37
  tail call void @free(ptr noundef %8)
  %10 = icmp eq ptr %9, %3
  br i1 %10, label %11, label %7, !llvm.loop !39

11:                                               ; preds = %7, %2
  store ptr %3, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  ret i32 %4
}

declare zeroext i8 @pedwarn(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @common_type(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 6
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %8 = load i32, ptr %7, align 4
  %9 = and i32 %8, 1023
  %10 = tail call ptr @c_common_type_for_size(i32 noundef %9, i32 noundef 1) #20
  br label %11

11:                                               ; preds = %6, %2
  %12 = phi ptr [ %10, %6 ], [ %0, %2 ]
  %13 = load i64, ptr %1, align 8
  %14 = and i64 %13, 65535
  %15 = icmp eq i64 %14, 6
  br i1 %15, label %16, label %21

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = and i32 %18, 1023
  %20 = tail call ptr @c_common_type_for_size(i32 noundef %19, i32 noundef 1) #20
  br label %21

21:                                               ; preds = %16, %11
  %22 = phi ptr [ %20, %16 ], [ %1, %11 ]
  %23 = load i64, ptr %12, align 8
  %24 = and i64 %23, 65535
  %25 = icmp eq i64 %24, 7
  %26 = load i64, ptr %22, align 8
  %27 = and i64 %26, 65535
  %28 = icmp eq i64 %27, 7
  br i1 %25, label %29, label %32

29:                                               ; preds = %21
  %30 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8
  %31 = select i1 %28, ptr %30, ptr %22
  br label %35

32:                                               ; preds = %21
  br i1 %28, label %35, label %33

33:                                               ; preds = %32
  %34 = tail call fastcc ptr @c_common_type(ptr noundef nonnull %12, ptr noundef nonnull %22)
  br label %35

35:                                               ; preds = %29, %32, %33
  %36 = phi ptr [ %34, %33 ], [ %12, %32 ], [ %31, %29 ]
  ret ptr %36
}

declare ptr @c_common_type_for_size(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @c_common_type(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %4 = icmp eq ptr %3, %0
  br i1 %4, label %411, label %5

5:                                                ; preds = %2
  %6 = icmp eq ptr %3, %1
  br i1 %6, label %411, label %7

7:                                                ; preds = %5
  %8 = load i64, ptr %0, align 8
  %9 = trunc i64 %8 to i32
  %10 = lshr i32 %9, 20
  %11 = and i32 %10, 1
  %12 = lshr i32 %9, 18
  %13 = and i32 %12, 2
  %14 = or i32 %11, %13
  %15 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 11
  %18 = and i32 %17, 4
  %19 = or i32 %14, %18
  %20 = lshr i64 %8, 48
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 65280
  %23 = or i32 %19, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %7
  %26 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 16
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  br label %28

28:                                               ; preds = %25, %7
  %29 = phi ptr [ %27, %25 ], [ %0, %7 ]
  %30 = load i64, ptr %1, align 8
  %31 = trunc i64 %30 to i32
  %32 = lshr i32 %31, 20
  %33 = and i32 %32, 1
  %34 = lshr i32 %31, 18
  %35 = and i32 %34, 2
  %36 = or i32 %33, %35
  %37 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %38 = load i32, ptr %37, align 4
  %39 = lshr i32 %38, 11
  %40 = and i32 %39, 4
  %41 = or i32 %36, %40
  %42 = lshr i64 %30, 48
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 65280
  %45 = or i32 %41, %44
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %28
  %48 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  br label %50

50:                                               ; preds = %47, %28
  %51 = phi ptr [ %49, %47 ], [ %1, %28 ]
  %52 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 4
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = icmp eq ptr %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %50
  %56 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %29, ptr noundef null) #20
  br label %57

57:                                               ; preds = %55, %50
  %58 = phi ptr [ %56, %55 ], [ %29, %50 ]
  %59 = getelementptr inbounds %struct.tree_type, ptr %51, i64 0, i32 4
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = icmp eq ptr %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %57
  %63 = tail call ptr @build_type_attribute_variant(ptr noundef nonnull %51, ptr noundef null) #20
  br label %64

64:                                               ; preds = %62, %57
  %65 = phi ptr [ %63, %62 ], [ %51, %57 ]
  %66 = icmp eq ptr %58, %65
  br i1 %66, label %411, label %67

67:                                               ; preds = %64
  %68 = load i64, ptr %58, align 8
  %69 = freeze i64 %68
  %70 = trunc i64 %69 to i32
  %71 = and i32 %70, 65535
  %72 = load i64, ptr %65, align 8
  %73 = freeze i64 %72
  %74 = trunc i64 %73 to i32
  %75 = and i32 %74, 65535
  %76 = icmp eq i32 %71, 14
  %77 = icmp eq i32 %71, 13
  %78 = icmp eq i32 %71, 11
  %79 = icmp eq i32 %71, 9
  %80 = and i32 %70, 65534
  %81 = icmp eq i32 %80, 8
  br i1 %81, label %85, label %82

82:                                               ; preds = %67
  %83 = trunc i64 %69 to i16
  switch i16 %83, label %84 [
    i16 14, label %85
    i16 13, label %85
    i16 11, label %85
  ]

84:                                               ; preds = %82
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 726, ptr noundef nonnull @.str.8) #20
  br label %85

85:                                               ; preds = %82, %82, %82, %67, %84
  %86 = icmp eq i32 %75, 14
  %87 = icmp eq i32 %75, 13
  %88 = icmp eq i32 %75, 11
  %89 = icmp eq i32 %75, 9
  %90 = and i32 %74, 65534
  %91 = icmp eq i32 %90, 8
  br i1 %91, label %95, label %92

92:                                               ; preds = %85
  %93 = trunc i64 %73 to i16
  switch i16 %93, label %94 [
    i16 14, label %95
    i16 13, label %95
    i16 11, label %95
  ]

94:                                               ; preds = %92
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 729, ptr noundef nonnull @.str.8) #20
  br label %95

95:                                               ; preds = %92, %92, %92, %85, %94
  %96 = load i64, ptr %58, align 8
  %97 = and i64 %96, 65535
  %98 = icmp eq i64 %97, 9
  br i1 %98, label %99, label %108

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %101 = load i32, ptr %100, align 4
  %102 = lshr i32 %101, 16
  %103 = and i32 %102, 255
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %104
  %106 = load i8, ptr %105, align 1, !tbaa !17
  %107 = icmp eq i8 %106, 9
  br i1 %107, label %128, label %108

108:                                              ; preds = %99, %95
  %109 = load i64, ptr %65, align 8
  %110 = and i64 %109, 65535
  %111 = icmp eq i64 %110, 9
  br i1 %111, label %112, label %158

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %114 = load i32, ptr %113, align 4
  %115 = lshr i32 %114, 16
  %116 = and i32 %115, 255
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %117
  %119 = load i8, ptr %118, align 1, !tbaa !17
  %120 = icmp eq i8 %119, 9
  br i1 %120, label %121, label %158

121:                                              ; preds = %112
  br i1 %98, label %122, label %146

122:                                              ; preds = %121
  %123 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %124 = load i32, ptr %123, align 4
  %125 = lshr i32 %124, 16
  %126 = and i32 %125, 255
  %127 = zext i32 %126 to i64
  br label %128

128:                                              ; preds = %122, %99
  %129 = phi i64 [ %127, %122 ], [ %104, %99 ]
  %130 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %129
  %131 = load i8, ptr %130, align 1, !tbaa !17
  %132 = icmp eq i8 %131, 9
  br i1 %132, label %133, label %146

133:                                              ; preds = %128
  %134 = load i64, ptr %65, align 8
  %135 = and i64 %134, 65535
  %136 = icmp eq i64 %135, 9
  br i1 %136, label %137, label %146

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %139 = load i32, ptr %138, align 4
  %140 = lshr i32 %139, 16
  %141 = and i32 %140, 255
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %142
  %144 = load i8, ptr %143, align 1, !tbaa !17
  %145 = icmp eq i8 %144, 9
  br i1 %145, label %158, label %146

146:                                              ; preds = %137, %133, %128, %121
  %147 = or i1 %76, %86
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.13) #20
  %149 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %411

150:                                              ; preds = %146
  %151 = or i1 %77, %87
  br i1 %151, label %152, label %154

152:                                              ; preds = %150
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.14) #20
  %153 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %411

154:                                              ; preds = %150
  %155 = and i1 %79, %89
  br i1 %155, label %156, label %158

156:                                              ; preds = %154
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.15) #20
  %157 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %411

158:                                              ; preds = %154, %137, %112, %108
  %159 = or i1 %76, %86
  %160 = select i1 %76, ptr %58, ptr %65
  br i1 %159, label %411, label %161

161:                                              ; preds = %158
  %162 = or i1 %77, %87
  br i1 %162, label %163, label %186

163:                                              ; preds = %161
  br i1 %77, label %164, label %167

164:                                              ; preds = %163
  %165 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 2
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  br label %167

167:                                              ; preds = %163, %164
  %168 = phi ptr [ %166, %164 ], [ %58, %163 ]
  br i1 %87, label %169, label %172

169:                                              ; preds = %167
  %170 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %171 = load ptr, ptr %170, align 8, !tbaa !17
  br label %172

172:                                              ; preds = %167, %169
  %173 = phi ptr [ %171, %169 ], [ %65, %167 ]
  %174 = tail call fastcc ptr @c_common_type(ptr noundef %168, ptr noundef %173)
  br i1 %77, label %175, label %179

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !17
  %178 = icmp eq ptr %177, %174
  br i1 %178, label %411, label %179

179:                                              ; preds = %175, %172
  br i1 %87, label %180, label %184

180:                                              ; preds = %179
  %181 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %182 = load ptr, ptr %181, align 8, !tbaa !17
  %183 = icmp eq ptr %182, %174
  br i1 %183, label %411, label %184

184:                                              ; preds = %180, %179
  %185 = tail call ptr @build_complex_type(ptr noundef %174) #20
  br label %411

186:                                              ; preds = %161
  %187 = icmp ne i32 %75, 9
  %188 = and i1 %79, %187
  br i1 %188, label %411, label %189

189:                                              ; preds = %186
  %190 = icmp ne i32 %71, 9
  %191 = and i1 %190, %89
  br i1 %191, label %411, label %192

192:                                              ; preds = %189
  %193 = and i1 %79, %89
  br i1 %193, label %194, label %213

194:                                              ; preds = %192
  %195 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 16
  %196 = load ptr, ptr %195, align 8, !tbaa !17
  %197 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 51), align 8, !tbaa !6
  %198 = icmp eq ptr %196, %197
  br i1 %198, label %411, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 16
  %201 = load ptr, ptr %200, align 8, !tbaa !17
  %202 = icmp eq ptr %201, %197
  br i1 %202, label %411, label %203

203:                                              ; preds = %199
  %204 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 50), align 16, !tbaa !6
  %205 = icmp eq ptr %196, %204
  %206 = icmp eq ptr %201, %204
  %207 = or i1 %205, %206
  br i1 %207, label %411, label %208

208:                                              ; preds = %203
  %209 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 49), align 8, !tbaa !6
  %210 = icmp eq ptr %196, %209
  %211 = icmp eq ptr %201, %209
  %212 = or i1 %210, %211
  br i1 %212, label %411, label %213

213:                                              ; preds = %208, %192
  %214 = or i1 %78, %88
  br i1 %214, label %215, label %352

215:                                              ; preds = %213
  %216 = icmp eq i64 %97, 14
  br i1 %216, label %217, label %219

217:                                              ; preds = %215
  %218 = tail call i32 @vector_type_mode(ptr noundef nonnull %58) #20
  br label %224

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %221 = load i32, ptr %220, align 4
  %222 = lshr i32 %221, 16
  %223 = and i32 %222, 255
  br label %224

224:                                              ; preds = %219, %217
  %225 = phi i32 [ %218, %217 ], [ %223, %219 ]
  %226 = load i64, ptr %65, align 8
  %227 = and i64 %226, 65535
  %228 = icmp eq i64 %227, 14
  br i1 %228, label %229, label %231

229:                                              ; preds = %224
  %230 = tail call i32 @vector_type_mode(ptr noundef nonnull %65) #20
  br label %236

231:                                              ; preds = %224
  %232 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %233 = load i32, ptr %232, align 4
  %234 = lshr i32 %233, 16
  %235 = and i32 %234, 255
  br label %236

236:                                              ; preds = %231, %229
  %237 = phi i32 [ %230, %229 ], [ %235, %231 ]
  %238 = load i64, ptr %58, align 8
  %239 = and i64 %238, 2147483648
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %245

241:                                              ; preds = %236
  %242 = load i64, ptr %65, align 8
  %243 = and i64 %242, 2147483648
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %246, label %245

245:                                              ; preds = %241, %236
  br label %246

246:                                              ; preds = %245, %241
  %247 = phi i32 [ 1, %245 ], [ 0, %241 ]
  %248 = and i64 %238, 2097152
  %249 = icmp ne i64 %248, 0
  br i1 %249, label %250, label %259

250:                                              ; preds = %246
  %251 = load i64, ptr %65, align 8
  %252 = and i64 %251, 2097152
  %253 = icmp ne i64 %252, 0
  %254 = and i1 %78, %253
  %255 = and i1 %88, %254
  %256 = icmp ne i32 %75, 11
  %257 = and i1 %78, %256
  %258 = or i1 %257, %255
  br i1 %258, label %302, label %259

259:                                              ; preds = %250, %246
  %260 = icmp ne i32 %71, 11
  %261 = and i1 %260, %88
  br i1 %261, label %262, label %266

262:                                              ; preds = %259
  %263 = load i64, ptr %65, align 8
  %264 = and i64 %263, 2097152
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %298

266:                                              ; preds = %262, %259
  %267 = and i1 %78, %249
  br i1 %267, label %268, label %280

268:                                              ; preds = %266
  %269 = zext i32 %225 to i64
  %270 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %269
  %271 = load i8, ptr %270, align 1, !tbaa !17
  switch i8 %271, label %273 [
    i8 5, label %274
    i8 7, label %272
  ]

272:                                              ; preds = %268
  br label %274

273:                                              ; preds = %268
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 843, ptr noundef nonnull @.str.8) #20
  br label %274

274:                                              ; preds = %268, %272, %273
  %275 = phi i32 [ 6, %272 ], [ 0, %273 ], [ 4, %268 ]
  %276 = getelementptr inbounds [87 x i16], ptr @mode_precision, i64 0, i64 %269
  %277 = load i16, ptr %276, align 2, !tbaa !45
  %278 = zext i16 %277 to i32
  %279 = tail call i32 @mode_for_size(i32 noundef %278, i32 noundef %275, i32 noundef 0) #20
  br label %280

280:                                              ; preds = %266, %274
  %281 = phi i32 [ %279, %274 ], [ %225, %266 ]
  br i1 %88, label %282, label %298

282:                                              ; preds = %280
  %283 = load i64, ptr %65, align 8
  %284 = and i64 %283, 2097152
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %298, label %286

286:                                              ; preds = %282
  %287 = zext i32 %237 to i64
  %288 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %287
  %289 = load i8, ptr %288, align 1, !tbaa !17
  switch i8 %289, label %291 [
    i8 5, label %292
    i8 7, label %290
  ]

290:                                              ; preds = %286
  br label %292

291:                                              ; preds = %286
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 854, ptr noundef nonnull @.str.8) #20
  br label %292

292:                                              ; preds = %286, %290, %291
  %293 = phi i32 [ 6, %290 ], [ 0, %291 ], [ 4, %286 ]
  %294 = getelementptr inbounds [87 x i16], ptr @mode_precision, i64 0, i64 %287
  %295 = load i16, ptr %294, align 2, !tbaa !45
  %296 = zext i16 %295 to i32
  %297 = tail call i32 @mode_for_size(i32 noundef %296, i32 noundef %293, i32 noundef 0) #20
  br label %298

298:                                              ; preds = %262, %280, %282, %292
  %299 = phi i32 [ 0, %292 ], [ 0, %282 ], [ 0, %280 ], [ 1, %262 ]
  %300 = phi i32 [ %281, %292 ], [ %281, %282 ], [ %281, %280 ], [ %225, %262 ]
  %301 = phi i32 [ %297, %292 ], [ %237, %282 ], [ %237, %280 ], [ %237, %262 ]
  br i1 %78, label %302, label %313

302:                                              ; preds = %250, %298
  %303 = phi i32 [ %301, %298 ], [ %237, %250 ]
  %304 = phi i32 [ %300, %298 ], [ %225, %250 ]
  %305 = phi i32 [ %299, %298 ], [ 1, %250 ]
  %306 = zext i32 %304 to i64
  %307 = getelementptr inbounds [87 x i8], ptr @mode_fbit, i64 0, i64 %306
  %308 = load i8, ptr %307, align 1, !tbaa !17
  %309 = zext i8 %308 to i32
  %310 = getelementptr inbounds [87 x i8], ptr @mode_ibit, i64 0, i64 %306
  %311 = load i8, ptr %310, align 1, !tbaa !17
  %312 = zext i8 %311 to i32
  br label %323

313:                                              ; preds = %298
  %314 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %315 = load i32, ptr %314, align 4
  %316 = and i32 %315, 1023
  %317 = load i64, ptr %58, align 8
  %318 = trunc i64 %317 to i32
  %319 = lshr i32 %318, 21
  %320 = and i32 %319, 1
  %321 = add nsw i32 %316, -1
  %322 = add nsw i32 %321, %320
  br label %323

323:                                              ; preds = %313, %302
  %324 = phi i32 [ %303, %302 ], [ %301, %313 ]
  %325 = phi i32 [ %305, %302 ], [ %299, %313 ]
  %326 = phi i32 [ %309, %302 ], [ 0, %313 ]
  %327 = phi i32 [ %312, %302 ], [ %322, %313 ]
  br i1 %88, label %328, label %336

328:                                              ; preds = %323
  %329 = zext i32 %324 to i64
  %330 = getelementptr inbounds [87 x i8], ptr @mode_fbit, i64 0, i64 %329
  %331 = load i8, ptr %330, align 1, !tbaa !17
  %332 = zext i8 %331 to i32
  %333 = getelementptr inbounds [87 x i8], ptr @mode_ibit, i64 0, i64 %329
  %334 = load i8, ptr %333, align 1, !tbaa !17
  %335 = zext i8 %334 to i32
  br label %346

336:                                              ; preds = %323
  %337 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %338 = load i32, ptr %337, align 4
  %339 = and i32 %338, 1023
  %340 = load i64, ptr %65, align 8
  %341 = trunc i64 %340 to i32
  %342 = lshr i32 %341, 21
  %343 = and i32 %342, 1
  %344 = add nsw i32 %339, -1
  %345 = add nsw i32 %344, %343
  br label %346

346:                                              ; preds = %336, %328
  %347 = phi i32 [ %332, %328 ], [ 0, %336 ]
  %348 = phi i32 [ %335, %328 ], [ %345, %336 ]
  %349 = tail call i32 @llvm.umax.i32(i32 %327, i32 %348)
  %350 = tail call i32 @llvm.umax.i32(i32 %326, i32 %347)
  %351 = tail call ptr @c_common_fixed_point_type_for_size(i32 noundef %349, i32 noundef %350, i32 noundef %325, i32 noundef %247) #20
  br label %411

352:                                              ; preds = %213
  %353 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %354 = load i32, ptr %353, align 4
  %355 = and i32 %354, 1023
  %356 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %357 = load i32, ptr %356, align 4
  %358 = and i32 %357, 1023
  %359 = icmp ugt i32 %355, %358
  br i1 %359, label %411, label %360

360:                                              ; preds = %352
  %361 = icmp ugt i32 %358, %355
  br i1 %361, label %411, label %362

362:                                              ; preds = %360
  %363 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 16
  %364 = load ptr, ptr %363, align 8, !tbaa !17
  %365 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 10), align 16, !tbaa !6
  %366 = icmp eq ptr %364, %365
  br i1 %366, label %411, label %367

367:                                              ; preds = %362
  %368 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 16
  %369 = load ptr, ptr %368, align 8, !tbaa !17
  %370 = icmp eq ptr %369, %365
  br i1 %370, label %411, label %371

371:                                              ; preds = %367
  %372 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 9), align 8, !tbaa !6
  %373 = icmp eq ptr %364, %372
  %374 = icmp eq ptr %369, %372
  %375 = or i1 %373, %374
  br i1 %375, label %376, label %384

376:                                              ; preds = %371
  %377 = and i64 %96, 2097152
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %411

379:                                              ; preds = %376
  %380 = load i64, ptr %65, align 8
  %381 = and i64 %380, 2097152
  %382 = icmp eq i64 %381, 0
  %383 = select i1 %382, ptr %372, ptr %365
  br label %411

384:                                              ; preds = %371
  %385 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 8), align 16, !tbaa !6
  %386 = icmp eq ptr %364, %385
  %387 = icmp eq ptr %369, %385
  %388 = or i1 %386, %387
  br i1 %388, label %411, label %389

389:                                              ; preds = %384
  %390 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 7), align 8, !tbaa !6
  %391 = icmp eq ptr %364, %390
  %392 = icmp eq ptr %369, %390
  %393 = or i1 %391, %392
  br i1 %393, label %394, label %402

394:                                              ; preds = %389
  %395 = and i64 %96, 2097152
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %411

397:                                              ; preds = %394
  %398 = load i64, ptr %65, align 8
  %399 = and i64 %398, 2097152
  %400 = icmp eq i64 %399, 0
  %401 = select i1 %400, ptr %390, ptr %385
  br label %411

402:                                              ; preds = %389
  %403 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 33), align 8, !tbaa !6
  %404 = icmp eq ptr %364, %403
  %405 = icmp eq ptr %369, %403
  %406 = or i1 %404, %405
  br i1 %406, label %411, label %407

407:                                              ; preds = %402
  %408 = and i64 %96, 2097152
  %409 = icmp eq i64 %408, 0
  %410 = select i1 %409, ptr %65, ptr %58
  br label %411

411:                                              ; preds = %397, %379, %402, %394, %384, %376, %362, %367, %208, %203, %194, %199, %158, %407, %360, %352, %189, %186, %184, %175, %180, %64, %5, %2, %346, %156, %152, %148
  %412 = phi ptr [ %351, %346 ], [ %149, %148 ], [ %153, %152 ], [ %157, %156 ], [ %1, %2 ], [ %0, %5 ], [ %58, %64 ], [ %160, %158 ], [ %185, %184 ], [ %58, %175 ], [ %65, %180 ], [ %58, %186 ], [ %65, %189 ], [ %58, %352 ], [ %65, %360 ], [ %410, %407 ], [ %197, %199 ], [ %196, %194 ], [ %204, %203 ], [ %209, %208 ], [ %365, %367 ], [ %364, %362 ], [ %365, %376 ], [ %385, %384 ], [ %385, %394 ], [ %403, %402 ], [ %383, %379 ], [ %401, %397 ]
  ret ptr %412
}

declare i32 @vector_type_mode(ptr noundef) local_unnamed_addr #3

declare ptr @build_complex_type(ptr noundef) local_unnamed_addr #3

declare i32 @mode_for_size(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @c_common_fixed_point_type_for_size(i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @comptypes_internal(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = icmp ne ptr %0, %1
  %5 = icmp ne ptr %0, null
  %6 = and i1 %5, %4
  %7 = icmp ne ptr %1, null
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %319

9:                                                ; preds = %3
  %10 = load i64, ptr %0, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %319, label %14

14:                                               ; preds = %9
  %15 = load i64, ptr %1, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %319, label %18

18:                                               ; preds = %14
  %19 = icmp eq i32 %12, 8
  br i1 %19, label %20, label %34

20:                                               ; preds = %18
  %21 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %22 = load i32, ptr %21, align 4
  %23 = and i32 %22, 1024
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %34, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = icmp eq ptr %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.tree_common, ptr %27, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = icmp eq ptr %31, null
  %33 = select i1 %32, ptr %0, ptr %31
  br label %34

34:                                               ; preds = %29, %25, %20, %18
  %35 = phi ptr [ %0, %25 ], [ %0, %20 ], [ %0, %18 ], [ %33, %29 ]
  %36 = icmp eq i64 %16, 8
  br i1 %36, label %37, label %51

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %39 = load i32, ptr %38, align 4
  %40 = and i32 %39, 1024
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %51, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = icmp eq ptr %44, null
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.tree_common, ptr %44, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = icmp eq ptr %48, null
  %50 = select i1 %49, ptr %1, ptr %48
  br label %51

51:                                               ; preds = %46, %42, %37, %34
  %52 = phi ptr [ %1, %42 ], [ %1, %37 ], [ %1, %34 ], [ %50, %46 ]
  %53 = load i64, ptr %35, align 8
  %54 = and i64 %53, 65535
  %55 = icmp eq i64 %54, 6
  %56 = load i64, ptr %52, align 8
  %57 = and i64 %56, 65535
  %58 = icmp eq i64 %57, 6
  br i1 %55, label %59, label %73

59:                                               ; preds = %51
  br i1 %58, label %90, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %struct.tree_type, ptr %35, i64 0, i32 6
  %62 = load i32, ptr %61, align 4
  %63 = and i32 %62, 1023
  %64 = trunc i64 %53 to i32
  %65 = lshr i32 %64, 21
  %66 = and i32 %65, 1
  %67 = tail call ptr @c_common_type_for_size(i32 noundef %63, i32 noundef %66) #20
  %68 = icmp eq ptr %2, null
  br i1 %68, label %90, label %69

69:                                               ; preds = %60
  %70 = load i64, ptr %52, align 8
  %71 = and i64 %70, 65535
  %72 = icmp eq i64 %71, 19
  br i1 %72, label %90, label %87

73:                                               ; preds = %51
  br i1 %58, label %74, label %90

74:                                               ; preds = %73
  %75 = getelementptr inbounds %struct.tree_type, ptr %52, i64 0, i32 6
  %76 = load i32, ptr %75, align 4
  %77 = and i32 %76, 1023
  %78 = trunc i64 %56 to i32
  %79 = lshr i32 %78, 21
  %80 = and i32 %79, 1
  %81 = tail call ptr @c_common_type_for_size(i32 noundef %77, i32 noundef %80) #20
  %82 = icmp eq ptr %2, null
  br i1 %82, label %90, label %83

83:                                               ; preds = %74
  %84 = load i64, ptr %35, align 8
  %85 = and i64 %84, 65535
  %86 = icmp eq i64 %85, 19
  br i1 %86, label %90, label %87

87:                                               ; preds = %83, %69
  %88 = phi ptr [ %52, %69 ], [ %81, %83 ]
  %89 = phi ptr [ %67, %69 ], [ %35, %83 ]
  store i8 1, ptr %2, align 1, !tbaa !17
  br label %90

90:                                               ; preds = %87, %59, %73, %83, %74, %60, %69
  %91 = phi ptr [ %52, %69 ], [ %52, %60 ], [ %81, %83 ], [ %81, %74 ], [ %52, %73 ], [ %52, %59 ], [ %88, %87 ]
  %92 = phi ptr [ %67, %69 ], [ %67, %60 ], [ %35, %83 ], [ %35, %74 ], [ %35, %73 ], [ %35, %59 ], [ %89, %87 ]
  %93 = icmp eq ptr %92, %91
  br i1 %93, label %319, label %94

94:                                               ; preds = %90
  %95 = load i64, ptr %92, align 8
  %96 = trunc i64 %95 to i32
  %97 = and i32 %96, 65535
  %98 = load i64, ptr %91, align 8
  %99 = trunc i64 %98 to i32
  %100 = and i32 %99, 65535
  %101 = icmp eq i32 %97, %100
  br i1 %101, label %102, label %319

102:                                              ; preds = %94
  %103 = lshr i32 %96, 20
  %104 = and i32 %103, 1
  %105 = lshr i32 %96, 18
  %106 = and i32 %105, 2
  %107 = or i32 %104, %106
  %108 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 6
  %109 = load i32, ptr %108, align 4
  %110 = lshr i32 %109, 11
  %111 = and i32 %110, 4
  %112 = lshr i64 %95, 48
  %113 = trunc i64 %112 to i32
  %114 = and i32 %113, 65280
  %115 = or i32 %107, %114
  %116 = or i32 %115, %111
  %117 = lshr i32 %99, 20
  %118 = and i32 %117, 1
  %119 = lshr i32 %99, 18
  %120 = and i32 %119, 2
  %121 = or i32 %118, %120
  %122 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 6
  %123 = load i32, ptr %122, align 4
  %124 = lshr i32 %123, 11
  %125 = and i32 %124, 4
  %126 = lshr i64 %98, 48
  %127 = trunc i64 %126 to i32
  %128 = and i32 %127, 65280
  %129 = or i32 %121, %128
  %130 = or i32 %129, %125
  %131 = icmp eq i32 %116, %130
  br i1 %131, label %132, label %319

132:                                              ; preds = %102
  %133 = icmp eq i32 %97, 15
  br i1 %133, label %140, label %134

134:                                              ; preds = %132
  %135 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 16
  %136 = load ptr, ptr %135, align 8, !tbaa !17
  %137 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 16
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  %139 = icmp eq ptr %136, %138
  br i1 %139, label %319, label %140

140:                                              ; preds = %134, %132
  %141 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 14), align 8, !tbaa !46
  %142 = tail call i32 %141(ptr noundef nonnull %92, ptr noundef nonnull %91) #20
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %319, label %144

144:                                              ; preds = %140
  %145 = load i64, ptr %92, align 8
  %146 = trunc i64 %145 to i16
  switch i16 %146, label %313 [
    i16 10, label %147
    i16 20, label %177
    i16 15, label %179
    i16 6, label %279
    i16 16, label %279
    i16 17, label %279
    i16 14, label %295
  ]

147:                                              ; preds = %144
  %148 = load i32, ptr %108, align 4
  %149 = lshr i32 %148, 16
  %150 = and i32 %149, 255
  %151 = load i64, ptr %91, align 8
  %152 = and i64 %151, 65535
  %153 = icmp eq i64 %152, 14
  br i1 %153, label %154, label %156

154:                                              ; preds = %147
  %155 = tail call i32 @vector_type_mode(ptr noundef nonnull %91) #20
  br label %160

156:                                              ; preds = %147
  %157 = load i32, ptr %122, align 4
  %158 = lshr i32 %157, 16
  %159 = and i32 %158, 255
  br label %160

160:                                              ; preds = %156, %154
  %161 = phi i32 [ %155, %154 ], [ %159, %156 ]
  %162 = icmp eq i32 %150, %161
  br i1 %162, label %163, label %313

163:                                              ; preds = %160
  %164 = load i64, ptr %92, align 8
  %165 = load i64, ptr %91, align 8
  %166 = xor i64 %165, %164
  %167 = and i64 %166, 67108864
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %313

169:                                              ; preds = %163
  %170 = getelementptr inbounds %struct.tree_common, ptr %92, i64 0, i32 2
  %171 = load ptr, ptr %170, align 8, !tbaa !17
  %172 = getelementptr inbounds %struct.tree_common, ptr %91, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !17
  %174 = icmp eq ptr %171, %173
  br i1 %174, label %313, label %175

175:                                              ; preds = %169
  %176 = tail call fastcc i32 @comptypes_internal(ptr noundef %171, ptr noundef %173, ptr noundef %2)
  br label %313

177:                                              ; preds = %144
  %178 = tail call fastcc i32 @function_types_compatible_p(ptr noundef nonnull %92, ptr noundef nonnull %91, ptr noundef %2)
  br label %313

179:                                              ; preds = %144
  %180 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !17
  %182 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 1
  %183 = load ptr, ptr %182, align 8, !tbaa !17
  %184 = getelementptr inbounds %struct.tree_common, ptr %92, i64 0, i32 2
  %185 = load ptr, ptr %184, align 8, !tbaa !17
  %186 = getelementptr inbounds %struct.tree_common, ptr %91, i64 0, i32 2
  %187 = load ptr, ptr %186, align 8, !tbaa !17
  %188 = icmp eq ptr %185, %187
  br i1 %188, label %192, label %189

189:                                              ; preds = %179
  %190 = tail call fastcc i32 @comptypes_internal(ptr noundef %185, ptr noundef %187, ptr noundef %2)
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %319, label %192

192:                                              ; preds = %189, %179
  %193 = phi i32 [ %190, %189 ], [ 1, %179 ]
  %194 = icmp eq ptr %181, null
  %195 = icmp eq ptr %183, null
  %196 = select i1 %194, i1 true, i1 %195
  %197 = icmp eq ptr %181, %183
  %198 = select i1 %196, i1 true, i1 %197
  br i1 %198, label %313, label %199

199:                                              ; preds = %192
  %200 = getelementptr inbounds %struct.tree_type, ptr %181, i64 0, i32 14
  %201 = load ptr, ptr %200, align 8, !tbaa !17
  %202 = icmp eq ptr %201, null
  %203 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 14
  %204 = load ptr, ptr %203, align 8, !tbaa !17
  %205 = icmp eq ptr %204, null
  br i1 %202, label %217, label %206

206:                                              ; preds = %199
  %207 = getelementptr inbounds %struct.tree_type, ptr %181, i64 0, i32 13
  %208 = load ptr, ptr %207, align 8, !tbaa !17
  %209 = load i64, ptr %208, align 8
  %210 = and i64 %209, 65535
  %211 = icmp eq i64 %210, 23
  br i1 %211, label %212, label %217

212:                                              ; preds = %206
  %213 = load i64, ptr %201, align 8
  %214 = and i64 %213, 65535
  %215 = icmp ne i64 %214, 23
  %216 = zext i1 %215 to i32
  br label %217

217:                                              ; preds = %206, %212, %199
  %218 = phi i32 [ 0, %199 ], [ 1, %206 ], [ %216, %212 ]
  br i1 %205, label %230, label %219

219:                                              ; preds = %217
  %220 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 13
  %221 = load ptr, ptr %220, align 8, !tbaa !17
  %222 = load i64, ptr %221, align 8
  %223 = and i64 %222, 65535
  %224 = icmp eq i64 %223, 23
  br i1 %224, label %225, label %230

225:                                              ; preds = %219
  %226 = load i64, ptr %204, align 8
  %227 = and i64 %226, 65535
  %228 = icmp ne i64 %227, 23
  %229 = zext i1 %228 to i32
  br label %230

230:                                              ; preds = %219, %225, %217
  %231 = phi i32 [ 0, %217 ], [ 1, %219 ], [ %229, %225 ]
  %232 = icmp eq i32 %218, 0
  %233 = and i1 %202, %232
  %234 = xor i1 %232, true
  %235 = zext i1 %234 to i32
  br i1 %233, label %236, label %245

236:                                              ; preds = %230
  %237 = load i64, ptr %92, align 8
  %238 = and i64 %237, 65535
  %239 = icmp eq i64 %238, 15
  br i1 %239, label %240, label %244

240:                                              ; preds = %236
  %241 = load i32, ptr %108, align 4
  %242 = and i32 %241, 67108864
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %245

244:                                              ; preds = %240, %236
  br label %245

245:                                              ; preds = %244, %240, %230
  %246 = phi i32 [ %235, %230 ], [ 0, %244 ], [ 1, %240 ]
  %247 = icmp ne i32 %231, 0
  %248 = xor i1 %205, true
  %249 = select i1 %247, i1 true, i1 %248
  br i1 %249, label %258, label %250

250:                                              ; preds = %245
  %251 = load i64, ptr %91, align 8
  %252 = and i64 %251, 65535
  %253 = icmp eq i64 %252, 15
  br i1 %253, label %254, label %258

254:                                              ; preds = %250
  %255 = load i32, ptr %122, align 4
  %256 = and i32 %255, 67108864
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %313

258:                                              ; preds = %250, %254, %245
  %259 = phi i1 [ %247, %245 ], [ false, %254 ], [ false, %250 ]
  %260 = icmp ne i32 %246, 0
  %261 = or i1 %260, %259
  %262 = select i1 %202, i1 %205, i1 false
  %263 = select i1 %261, i1 true, i1 %262
  br i1 %263, label %313, label %264

264:                                              ; preds = %258
  %265 = select i1 %202, i1 true, i1 %205
  br i1 %265, label %278, label %266

266:                                              ; preds = %264
  %267 = getelementptr inbounds %struct.tree_type, ptr %181, i64 0, i32 13
  %268 = load ptr, ptr %267, align 8, !tbaa !17
  %269 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 13
  %270 = load ptr, ptr %269, align 8, !tbaa !17
  %271 = tail call i32 @tree_int_cst_equal(ptr noundef %268, ptr noundef %270) #20
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %278, label %273

273:                                              ; preds = %266
  %274 = load ptr, ptr %200, align 8, !tbaa !17
  %275 = load ptr, ptr %203, align 8, !tbaa !17
  %276 = tail call i32 @tree_int_cst_equal(ptr noundef %274, ptr noundef %275) #20
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %313

278:                                              ; preds = %273, %266, %264
  br label %313

279:                                              ; preds = %144, %144, %144
  %280 = tail call i32 @same_translation_unit_p(ptr noundef nonnull %92, ptr noundef nonnull %91), !range !47
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %313

282:                                              ; preds = %279
  %283 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 4
  %284 = load ptr, ptr %283, align 8, !tbaa !17
  %285 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 4
  %286 = load ptr, ptr %285, align 8, !tbaa !17
  %287 = tail call i32 @attribute_list_contained(ptr noundef %284, ptr noundef %286) #20
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %292

289:                                              ; preds = %282
  %290 = tail call i32 @attribute_list_contained(ptr noundef %286, ptr noundef %284) #20
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %313, label %292

292:                                              ; preds = %289, %282
  %293 = icmp eq i32 %142, 2
  %294 = tail call fastcc i32 @tagged_types_tu_compatible_p(ptr noundef nonnull %92, ptr noundef nonnull %91, ptr noundef %2)
  br i1 %293, label %313, label %319

295:                                              ; preds = %144
  %296 = load i32, ptr %108, align 4
  %297 = and i32 %296, 1023
  %298 = zext i32 %297 to i64
  %299 = shl nuw i64 1, %298
  %300 = load i32, ptr %122, align 4
  %301 = and i32 %300, 1023
  %302 = zext i32 %301 to i64
  %303 = shl nuw i64 1, %302
  %304 = icmp eq i64 %299, %303
  br i1 %304, label %305, label %313

305:                                              ; preds = %295
  %306 = getelementptr inbounds %struct.tree_common, ptr %92, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !17
  %308 = getelementptr inbounds %struct.tree_common, ptr %91, i64 0, i32 2
  %309 = load ptr, ptr %308, align 8, !tbaa !17
  %310 = tail call fastcc i32 @comptypes_internal(ptr noundef %307, ptr noundef %309, ptr noundef %2)
  %311 = icmp ne i32 %310, 0
  %312 = zext i1 %311 to i32
  br label %313

313:                                              ; preds = %292, %254, %289, %273, %278, %258, %192, %295, %305, %175, %169, %144, %279, %160, %163, %177
  %314 = phi i32 [ 0, %144 ], [ 0, %279 ], [ %178, %177 ], [ 0, %160 ], [ 0, %163 ], [ %176, %175 ], [ 1, %169 ], [ 0, %295 ], [ %312, %305 ], [ %193, %273 ], [ 0, %278 ], [ %193, %258 ], [ %193, %192 ], [ 0, %289 ], [ %193, %254 ], [ %294, %292 ]
  %315 = icmp eq i32 %142, 2
  %316 = icmp eq i32 %314, 1
  %317 = select i1 %315, i1 %316, i1 false
  %318 = select i1 %317, i32 2, i32 %314
  br label %319

319:                                              ; preds = %292, %189, %140, %134, %102, %94, %90, %3, %9, %14, %313
  %320 = phi i32 [ %318, %313 ], [ 1, %14 ], [ 1, %9 ], [ 1, %3 ], [ 1, %90 ], [ 0, %94 ], [ 0, %102 ], [ 1, %134 ], [ 0, %140 ], [ 0, %189 ], [ %294, %292 ]
  ret i32 %320
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @function_types_compatible_p(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %5, align 8
  %9 = load i64, ptr %7, align 8
  %10 = xor i64 %9, %8
  %11 = and i64 %10, 524288
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %3
  %14 = load i32, ptr @input_location, align 4, !tbaa !21
  %15 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %14, i32 noundef 0, ptr noundef nonnull @.str.16) #20
  %16 = load i64, ptr %5, align 8
  br label %17

17:                                               ; preds = %13, %3
  %18 = phi i64 [ %16, %13 ], [ %8, %3 ]
  %19 = and i64 %18, 524288
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %37, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 16
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = trunc i64 %18 to i32
  %25 = lshr i32 %24, 20
  %26 = and i32 %25, 1
  %27 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 6
  %28 = load i32, ptr %27, align 4
  %29 = lshr i32 %28, 11
  %30 = and i32 %29, 4
  %31 = lshr i64 %18, 48
  %32 = trunc i64 %31 to i32
  %33 = and i32 %32, 65280
  %34 = or i32 %33, %26
  %35 = or i32 %34, %30
  %36 = tail call ptr @build_qualified_type(ptr noundef %23, i32 noundef %35) #20
  br label %37

37:                                               ; preds = %21, %17
  %38 = phi ptr [ %36, %21 ], [ %5, %17 ]
  %39 = load i64, ptr %7, align 8
  %40 = and i64 %39, 524288
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %58, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 16
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = trunc i64 %39 to i32
  %46 = lshr i32 %45, 20
  %47 = and i32 %46, 1
  %48 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 6
  %49 = load i32, ptr %48, align 4
  %50 = lshr i32 %49, 11
  %51 = and i32 %50, 4
  %52 = lshr i64 %39, 48
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 65280
  %55 = or i32 %54, %47
  %56 = or i32 %55, %51
  %57 = tail call ptr @build_qualified_type(ptr noundef %44, i32 noundef %56) #20
  br label %58

58:                                               ; preds = %42, %37
  %59 = phi ptr [ %57, %42 ], [ %7, %37 ]
  %60 = tail call fastcc i32 @comptypes_internal(ptr noundef %38, ptr noundef %59, ptr noundef %2)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %96, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  %67 = icmp eq ptr %64, null
  br i1 %67, label %68, label %79

68:                                               ; preds = %62
  %69 = tail call i32 @self_promoting_args_p(ptr noundef %66) #20
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %96, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 17
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = icmp eq ptr %73, null
  br i1 %74, label %96, label %75

75:                                               ; preds = %71
  %76 = tail call fastcc i32 @type_lists_compatible_p(ptr noundef %66, ptr noundef nonnull %73, ptr noundef %2)
  %77 = icmp eq i32 %76, 1
  %78 = select i1 %77, i32 %60, i32 2
  br label %96

79:                                               ; preds = %62
  %80 = icmp eq ptr %66, null
  br i1 %80, label %81, label %92

81:                                               ; preds = %79
  %82 = tail call i32 @self_promoting_args_p(ptr noundef nonnull %64) #20
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %96, label %84

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 17
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = icmp eq ptr %86, null
  br i1 %87, label %96, label %88

88:                                               ; preds = %84
  %89 = tail call fastcc i32 @type_lists_compatible_p(ptr noundef nonnull %64, ptr noundef nonnull %86, ptr noundef %2)
  %90 = icmp eq i32 %89, 1
  %91 = select i1 %90, i32 %60, i32 2
  br label %96

92:                                               ; preds = %79
  %93 = tail call fastcc i32 @type_lists_compatible_p(ptr noundef nonnull %64, ptr noundef nonnull %66, ptr noundef %2)
  %94 = icmp eq i32 %93, 1
  %95 = select i1 %94, i32 %60, i32 %93
  br label %96

96:                                               ; preds = %88, %75, %84, %81, %71, %68, %58, %92
  %97 = phi i32 [ %95, %92 ], [ 0, %58 ], [ 0, %68 ], [ %60, %71 ], [ %78, %75 ], [ 0, %81 ], [ %60, %84 ], [ %91, %88 ]
  ret i32 %97
}

declare i32 @tree_int_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @same_translation_unit_p(ptr noundef readonly %0, ptr noundef readonly %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %0, null
  br i1 %3, label %25, label %4

4:                                                ; preds = %2, %22
  %5 = phi ptr [ %23, %22 ], [ %0, %2 ]
  %6 = load i64, ptr %5, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 40
  br i1 %8, label %25, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %7
  %11 = load i32, ptr %10, align 4, !tbaa !17
  switch i32 %11, label %21 [
    i32 3, label %12
    i32 2, label %15
    i32 0, label %18
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.tree_decl_minimal, ptr %5, i64 0, i32 4
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  br label %22

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 18
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  br label %22

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.tree_block, ptr %5, i64 0, i32 6
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  br label %22

21:                                               ; preds = %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1221, ptr noundef nonnull @.str.8) #20
  br label %22

22:                                               ; preds = %21, %18, %15, %12
  %23 = phi ptr [ %5, %21 ], [ %20, %18 ], [ %17, %15 ], [ %14, %12 ]
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %4, !llvm.loop !48

25:                                               ; preds = %4, %22, %2
  %26 = phi ptr [ null, %2 ], [ null, %22 ], [ %5, %4 ]
  %27 = icmp eq ptr %1, null
  br i1 %27, label %49, label %28

28:                                               ; preds = %25, %46
  %29 = phi ptr [ %47, %46 ], [ %1, %25 ]
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 40
  br i1 %32, label %49, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %31
  %35 = load i32, ptr %34, align 4, !tbaa !17
  switch i32 %35, label %45 [
    i32 3, label %36
    i32 2, label %39
    i32 0, label %42
  ]

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.tree_decl_minimal, ptr %29, i64 0, i32 4
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  br label %46

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 18
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  br label %46

42:                                               ; preds = %33
  %43 = getelementptr inbounds %struct.tree_block, ptr %29, i64 0, i32 6
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  br label %46

45:                                               ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1233, ptr noundef nonnull @.str.8) #20
  br label %46

46:                                               ; preds = %45, %42, %39, %36
  %47 = phi ptr [ %29, %45 ], [ %44, %42 ], [ %41, %39 ], [ %38, %36 ]
  %48 = icmp eq ptr %47, null
  br i1 %48, label %49, label %28, !llvm.loop !49

49:                                               ; preds = %28, %46, %25
  %50 = phi ptr [ null, %25 ], [ null, %46 ], [ %29, %28 ]
  %51 = icmp eq ptr %26, %50
  %52 = zext i1 %51 to i32
  ret i32 %52
}

declare i32 @attribute_list_contained(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @tagged_types_tu_compatible_p(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  br label %4

4:                                                ; preds = %13, %3
  %5 = phi ptr [ %0, %3 ], [ %15, %13 ]
  %6 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 12
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = icmp eq ptr %7, null
  br i1 %8, label %17, label %9

9:                                                ; preds = %4
  %10 = load i64, ptr %7, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 35
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.tree_decl_non_common, ptr %7, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = icmp eq ptr %15, null
  br i1 %16, label %17, label %4, !llvm.loop !50

17:                                               ; preds = %9, %4, %13
  br label %18

18:                                               ; preds = %17, %27
  %19 = phi ptr [ %29, %27 ], [ %1, %17 ]
  %20 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 12
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = icmp eq ptr %21, null
  br i1 %22, label %31, label %23

23:                                               ; preds = %18
  %24 = load i64, ptr %21, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 35
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.tree_decl_non_common, ptr %21, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = icmp eq ptr %29, null
  br i1 %30, label %31, label %18, !llvm.loop !51

31:                                               ; preds = %23, %18, %27
  %32 = load i32, ptr @flag_isoc99, align 4, !tbaa !21
  %33 = icmp eq i32 %32, 0
  %34 = icmp eq ptr %7, %21
  %35 = or i1 %34, %33
  br i1 %35, label %36, label %333

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = icmp eq ptr %38, null
  br i1 %39, label %333, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 2
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = icmp eq ptr %42, null
  br i1 %43, label %333, label %44

44:                                               ; preds = %40
  %45 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %46 = icmp eq ptr %45, null
  br i1 %46, label %62, label %47

47:                                               ; preds = %44, %56
  %48 = phi ptr [ %57, %56 ], [ %45, %44 ]
  %49 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %48, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !52
  %51 = icmp eq ptr %50, %5
  br i1 %51, label %52, label %56

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %48, i64 0, i32 2
  %54 = load ptr, ptr %53, align 8, !tbaa !53
  %55 = icmp eq ptr %54, %19
  br i1 %55, label %59, label %56

56:                                               ; preds = %47, %52
  %57 = load ptr, ptr %48, align 8, !tbaa !6
  %58 = icmp eq ptr %57, null
  br i1 %58, label %62, label %47, !llvm.loop !54

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %48, i64 0, i32 3
  %61 = load i32, ptr %60, align 8, !tbaa !55
  br label %333

62:                                               ; preds = %56, %44
  %63 = load i64, ptr %5, align 8
  %64 = trunc i64 %63 to i16
  switch i16 %64, label %332 [
    i16 6, label %65
    i16 17, label %144
    i16 16, label %272
  ]

65:                                               ; preds = %62
  %66 = tail call ptr @xmalloc(i64 noundef 32) #20
  %67 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  store ptr %67, ptr %66, align 8, !tbaa !37
  %68 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %66, i64 0, i32 1
  store ptr %5, ptr %68, align 8, !tbaa !52
  %69 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %66, i64 0, i32 2
  store ptr %19, ptr %69, align 8, !tbaa !53
  store ptr %66, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %70 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %66, i64 0, i32 3
  store i32 1, ptr %70, align 8, !tbaa !55
  %71 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 1
  %72 = load ptr, ptr %71, align 8, !tbaa !17
  %73 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 1
  %74 = load ptr, ptr %73, align 8, !tbaa !17
  %75 = icmp eq ptr %72, %74
  br i1 %75, label %333, label %76

76:                                               ; preds = %65
  %77 = icmp ne ptr %72, null
  %78 = icmp ne ptr %74, null
  %79 = and i1 %77, %78
  br i1 %79, label %80, label %104

80:                                               ; preds = %76, %96
  %81 = phi ptr [ %100, %96 ], [ %74, %76 ]
  %82 = phi ptr [ %98, %96 ], [ %72, %76 ]
  %83 = getelementptr inbounds %struct.tree_list, ptr %82, i64 0, i32 1
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  %85 = getelementptr inbounds %struct.tree_list, ptr %81, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = icmp eq ptr %84, %86
  br i1 %87, label %88, label %110

88:                                               ; preds = %80
  %89 = getelementptr inbounds %struct.tree_list, ptr %82, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !17
  %91 = getelementptr inbounds %struct.tree_list, ptr %81, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = tail call i32 @simple_cst_equal(ptr noundef %90, ptr noundef %92) #20
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %96, label %95

95:                                               ; preds = %88
  store i32 0, ptr %70, align 8, !tbaa !55
  br label %333

96:                                               ; preds = %88
  %97 = getelementptr inbounds %struct.tree_common, ptr %82, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  %99 = getelementptr inbounds %struct.tree_common, ptr %81, i64 0, i32 1
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = icmp ne ptr %98, null
  %102 = icmp ne ptr %100, null
  %103 = select i1 %101, i1 %102, i1 false
  br i1 %103, label %80, label %104, !llvm.loop !56

104:                                              ; preds = %96, %76
  %105 = phi ptr [ %72, %76 ], [ %98, %96 ]
  %106 = phi ptr [ %74, %76 ], [ %100, %96 ]
  %107 = icmp eq ptr %105, null
  %108 = icmp eq ptr %106, null
  %109 = select i1 %107, i1 %108, i1 false
  br i1 %109, label %333, label %110

110:                                              ; preds = %80, %104
  %111 = phi i1 [ %108, %104 ], [ false, %80 ]
  %112 = phi i1 [ %107, %104 ], [ false, %80 ]
  %113 = select i1 %112, i1 true, i1 %111
  br i1 %113, label %114, label %115

114:                                              ; preds = %110
  store i32 0, ptr %70, align 8, !tbaa !55
  br label %333

115:                                              ; preds = %110
  %116 = load ptr, ptr %71, align 8, !tbaa !17
  %117 = tail call i32 @list_length(ptr noundef %116) #20
  %118 = load ptr, ptr %73, align 8, !tbaa !17
  %119 = tail call i32 @list_length(ptr noundef %118) #20
  %120 = icmp eq i32 %117, %119
  br i1 %120, label %121, label %124

121:                                              ; preds = %115
  %122 = load ptr, ptr %71, align 8, !tbaa !17
  %123 = icmp eq ptr %122, null
  br i1 %123, label %333, label %129

124:                                              ; preds = %115
  store i32 0, ptr %70, align 8, !tbaa !55
  br label %333

125:                                              ; preds = %136
  %126 = getelementptr inbounds %struct.tree_common, ptr %130, i64 0, i32 1
  %127 = load ptr, ptr %126, align 8, !tbaa !17
  %128 = icmp eq ptr %127, null
  br i1 %128, label %333, label %129, !llvm.loop !57

129:                                              ; preds = %121, %125
  %130 = phi ptr [ %127, %125 ], [ %122, %121 ]
  %131 = getelementptr inbounds %struct.tree_list, ptr %130, i64 0, i32 1
  %132 = load ptr, ptr %131, align 8, !tbaa !17
  %133 = load ptr, ptr %73, align 8, !tbaa !17
  %134 = tail call ptr @purpose_member(ptr noundef %132, ptr noundef %133) #20
  %135 = icmp eq ptr %134, null
  br i1 %135, label %143, label %136

136:                                              ; preds = %129
  %137 = getelementptr inbounds %struct.tree_list, ptr %130, i64 0, i32 2
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  %139 = getelementptr inbounds %struct.tree_list, ptr %134, i64 0, i32 2
  %140 = load ptr, ptr %139, align 8, !tbaa !17
  %141 = tail call i32 @simple_cst_equal(ptr noundef %138, ptr noundef %140) #20
  %142 = icmp eq i32 %141, 1
  br i1 %142, label %125, label %143

143:                                              ; preds = %136, %129
  store i32 0, ptr %70, align 8, !tbaa !55
  br label %333

144:                                              ; preds = %62
  %145 = tail call ptr @xmalloc(i64 noundef 32) #20
  %146 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  store ptr %146, ptr %145, align 8, !tbaa !37
  %147 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %145, i64 0, i32 1
  store ptr %5, ptr %147, align 8, !tbaa !52
  %148 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %145, i64 0, i32 2
  store ptr %19, ptr %148, align 8, !tbaa !53
  store ptr %145, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %149 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %145, i64 0, i32 3
  store i32 1, ptr %149, align 8, !tbaa !55
  %150 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 1
  %151 = load ptr, ptr %150, align 8, !tbaa !17
  %152 = tail call i32 @list_length(ptr noundef %151) #20
  %153 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 1
  %154 = load ptr, ptr %153, align 8, !tbaa !17
  %155 = tail call i32 @list_length(ptr noundef %154) #20
  %156 = icmp eq i32 %152, %155
  br i1 %156, label %157, label %163

157:                                              ; preds = %144
  %158 = load ptr, ptr %150, align 8, !tbaa !17
  %159 = load ptr, ptr %153, align 8, !tbaa !17
  %160 = icmp ne ptr %158, null
  %161 = icmp ne ptr %159, null
  %162 = select i1 %160, i1 %161, i1 false
  br i1 %162, label %164, label %207

163:                                              ; preds = %144
  store i32 0, ptr %149, align 8, !tbaa !55
  br label %333

164:                                              ; preds = %157, %199
  %165 = phi ptr [ %203, %199 ], [ %159, %157 ]
  %166 = phi ptr [ %202, %199 ], [ %158, %157 ]
  %167 = phi i8 [ %187, %199 ], [ 0, %157 ]
  %168 = getelementptr inbounds %struct.tree_decl_minimal, ptr %166, i64 0, i32 3
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = getelementptr inbounds %struct.tree_decl_minimal, ptr %165, i64 0, i32 3
  %171 = load ptr, ptr %170, align 8, !tbaa !17
  %172 = icmp eq ptr %169, %171
  br i1 %172, label %173, label %212

173:                                              ; preds = %164
  %174 = getelementptr inbounds %struct.tree_common, ptr %166, i64 0, i32 2
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = getelementptr inbounds %struct.tree_common, ptr %165, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !17
  %178 = tail call fastcc i32 @comptypes_internal(ptr noundef %175, ptr noundef %177, ptr noundef %2)
  %179 = icmp eq i32 %178, 1
  br i1 %179, label %186, label %180

180:                                              ; preds = %173
  %181 = load ptr, ptr %168, align 8, !tbaa !17
  %182 = icmp eq ptr %181, null
  br i1 %182, label %212, label %183

183:                                              ; preds = %180
  switch i32 %178, label %186 [
    i32 0, label %184
    i32 2, label %185
  ]

184:                                              ; preds = %183
  store i32 0, ptr %149, align 8, !tbaa !55
  br label %333

185:                                              ; preds = %183
  br label %186

186:                                              ; preds = %173, %183, %185
  %187 = phi i8 [ 1, %185 ], [ %167, %183 ], [ %167, %173 ]
  %188 = load i64, ptr %166, align 8
  %189 = and i64 %188, 65535
  %190 = icmp eq i64 %189, 31
  br i1 %190, label %191, label %199

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.tree_field_decl, ptr %166, i64 0, i32 4
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  %194 = getelementptr inbounds %struct.tree_field_decl, ptr %165, i64 0, i32 4
  %195 = load ptr, ptr %194, align 8, !tbaa !17
  %196 = tail call i32 @simple_cst_equal(ptr noundef %193, ptr noundef %195) #20
  %197 = icmp eq i32 %196, 1
  br i1 %197, label %199, label %198

198:                                              ; preds = %191
  store i32 0, ptr %149, align 8, !tbaa !55
  br label %333

199:                                              ; preds = %191, %186
  %200 = getelementptr inbounds %struct.tree_common, ptr %166, i64 0, i32 1
  %201 = getelementptr inbounds %struct.tree_common, ptr %165, i64 0, i32 1
  %202 = load ptr, ptr %200, align 8, !tbaa !17
  %203 = load ptr, ptr %201, align 8, !tbaa !17
  %204 = icmp ne ptr %202, null
  %205 = icmp ne ptr %203, null
  %206 = select i1 %204, i1 %205, i1 false
  br i1 %206, label %164, label %207, !llvm.loop !58

207:                                              ; preds = %199, %157
  %208 = phi i8 [ 0, %157 ], [ %187, %199 ]
  %209 = phi i1 [ %160, %157 ], [ %204, %199 ]
  %210 = phi i1 [ %161, %157 ], [ %205, %199 ]
  %211 = select i1 %209, i1 true, i1 %210
  br i1 %211, label %212, label %216

212:                                              ; preds = %164, %180, %207
  %213 = phi i8 [ %208, %207 ], [ %167, %180 ], [ %167, %164 ]
  %214 = load ptr, ptr %150, align 8, !tbaa !17
  %215 = icmp eq ptr %214, null
  br i1 %215, label %268, label %219

216:                                              ; preds = %207
  %217 = icmp eq i8 %208, 0
  %218 = select i1 %217, i32 1, i32 2
  store i32 %218, ptr %149, align 8, !tbaa !55
  br label %333

219:                                              ; preds = %212, %264
  %220 = phi ptr [ %266, %264 ], [ %214, %212 ]
  %221 = phi i8 [ %247, %264 ], [ %213, %212 ]
  %222 = load ptr, ptr %153, align 8, !tbaa !17
  %223 = icmp eq ptr %222, null
  br i1 %223, label %263, label %224

224:                                              ; preds = %219
  %225 = getelementptr inbounds %struct.tree_decl_minimal, ptr %220, i64 0, i32 3
  %226 = getelementptr inbounds %struct.tree_common, ptr %220, i64 0, i32 2
  %227 = load ptr, ptr %225, align 8, !tbaa !17
  br label %228

228:                                              ; preds = %224, %258
  %229 = phi ptr [ %227, %224 ], [ %259, %258 ]
  %230 = phi ptr [ %222, %224 ], [ %261, %258 ]
  %231 = getelementptr inbounds %struct.tree_decl_minimal, ptr %230, i64 0, i32 3
  %232 = load ptr, ptr %231, align 8, !tbaa !17
  %233 = icmp eq ptr %229, %232
  br i1 %233, label %234, label %258

234:                                              ; preds = %228
  %235 = load ptr, ptr %226, align 8, !tbaa !17
  %236 = getelementptr inbounds %struct.tree_common, ptr %230, i64 0, i32 2
  %237 = load ptr, ptr %236, align 8, !tbaa !17
  %238 = tail call fastcc i32 @comptypes_internal(ptr noundef %235, ptr noundef %237, ptr noundef %2)
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %246, label %240

240:                                              ; preds = %234
  %241 = load ptr, ptr %225, align 8, !tbaa !17
  %242 = icmp eq ptr %241, null
  br i1 %242, label %258, label %243

243:                                              ; preds = %240
  switch i32 %238, label %246 [
    i32 0, label %244
    i32 2, label %245
  ]

244:                                              ; preds = %243
  store i32 0, ptr %149, align 8, !tbaa !55
  br label %333

245:                                              ; preds = %243
  br label %246

246:                                              ; preds = %234, %243, %245
  %247 = phi i8 [ 1, %245 ], [ %221, %243 ], [ %221, %234 ]
  %248 = load i64, ptr %220, align 8
  %249 = and i64 %248, 65535
  %250 = icmp eq i64 %249, 31
  br i1 %250, label %251, label %264

251:                                              ; preds = %246
  %252 = getelementptr inbounds %struct.tree_field_decl, ptr %220, i64 0, i32 4
  %253 = load ptr, ptr %252, align 8, !tbaa !17
  %254 = getelementptr inbounds %struct.tree_field_decl, ptr %230, i64 0, i32 4
  %255 = load ptr, ptr %254, align 8, !tbaa !17
  %256 = tail call i32 @simple_cst_equal(ptr noundef %253, ptr noundef %255) #20
  %257 = icmp eq i32 %256, 1
  br i1 %257, label %264, label %263

258:                                              ; preds = %240, %228
  %259 = phi ptr [ null, %240 ], [ %229, %228 ]
  %260 = getelementptr inbounds %struct.tree_common, ptr %230, i64 0, i32 1
  %261 = load ptr, ptr %260, align 8, !tbaa !17
  %262 = icmp eq ptr %261, null
  br i1 %262, label %263, label %228, !llvm.loop !59

263:                                              ; preds = %251, %219, %258
  store i32 0, ptr %149, align 8, !tbaa !55
  br label %333

264:                                              ; preds = %251, %246
  %265 = getelementptr inbounds %struct.tree_common, ptr %220, i64 0, i32 1
  %266 = load ptr, ptr %265, align 8, !tbaa !17
  %267 = icmp eq ptr %266, null
  br i1 %267, label %268, label %219, !llvm.loop !60

268:                                              ; preds = %264, %212
  %269 = phi i8 [ %213, %212 ], [ %247, %264 ]
  %270 = icmp eq i8 %269, 0
  %271 = select i1 %270, i32 10, i32 2
  store i32 %271, ptr %149, align 8, !tbaa !55
  br label %333

272:                                              ; preds = %62
  %273 = tail call ptr @xmalloc(i64 noundef 32) #20
  %274 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  store ptr %274, ptr %273, align 8, !tbaa !37
  %275 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %273, i64 0, i32 1
  store ptr %5, ptr %275, align 8, !tbaa !52
  %276 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %273, i64 0, i32 2
  store ptr %19, ptr %276, align 8, !tbaa !53
  store ptr %273, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %277 = getelementptr inbounds %struct.tagged_tu_seen_cache, ptr %273, i64 0, i32 3
  store i32 1, ptr %277, align 8, !tbaa !55
  %278 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 1
  %279 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 1
  %280 = load ptr, ptr %278, align 8, !tbaa !17
  %281 = load ptr, ptr %279, align 8, !tbaa !17
  %282 = icmp ne ptr %280, null
  %283 = icmp ne ptr %281, null
  %284 = select i1 %282, i1 %283, i1 false
  br i1 %284, label %285, label %329

285:                                              ; preds = %272, %319
  %286 = phi ptr [ %323, %319 ], [ %281, %272 ]
  %287 = phi ptr [ %322, %319 ], [ %280, %272 ]
  %288 = phi i8 [ %308, %319 ], [ 0, %272 ]
  %289 = load i64, ptr %287, align 8
  %290 = load i64, ptr %286, align 8
  %291 = xor i64 %290, %289
  %292 = and i64 %291, 65535
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %330

294:                                              ; preds = %285
  %295 = getelementptr inbounds %struct.tree_decl_minimal, ptr %287, i64 0, i32 3
  %296 = load ptr, ptr %295, align 8, !tbaa !17
  %297 = getelementptr inbounds %struct.tree_decl_minimal, ptr %286, i64 0, i32 3
  %298 = load ptr, ptr %297, align 8, !tbaa !17
  %299 = icmp eq ptr %296, %298
  br i1 %299, label %300, label %330

300:                                              ; preds = %294
  %301 = getelementptr inbounds %struct.tree_common, ptr %287, i64 0, i32 2
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  %303 = getelementptr inbounds %struct.tree_common, ptr %286, i64 0, i32 2
  %304 = load ptr, ptr %303, align 8, !tbaa !17
  %305 = tail call fastcc i32 @comptypes_internal(ptr noundef %302, ptr noundef %304, ptr noundef %2)
  switch i32 %305, label %307 [
    i32 0, label %330
    i32 2, label %306
  ]

306:                                              ; preds = %300
  br label %307

307:                                              ; preds = %300, %306
  %308 = phi i8 [ 1, %306 ], [ %288, %300 ]
  %309 = load i64, ptr %287, align 8
  %310 = and i64 %309, 65535
  %311 = icmp eq i64 %310, 31
  br i1 %311, label %312, label %319

312:                                              ; preds = %307
  %313 = getelementptr inbounds %struct.tree_field_decl, ptr %287, i64 0, i32 4
  %314 = load ptr, ptr %313, align 8, !tbaa !17
  %315 = getelementptr inbounds %struct.tree_field_decl, ptr %286, i64 0, i32 4
  %316 = load ptr, ptr %315, align 8, !tbaa !17
  %317 = tail call i32 @simple_cst_equal(ptr noundef %314, ptr noundef %316) #20
  %318 = icmp eq i32 %317, 1
  br i1 %318, label %319, label %330

319:                                              ; preds = %312, %307
  %320 = getelementptr inbounds %struct.tree_common, ptr %287, i64 0, i32 1
  %321 = getelementptr inbounds %struct.tree_common, ptr %286, i64 0, i32 1
  %322 = load ptr, ptr %320, align 8, !tbaa !17
  %323 = load ptr, ptr %321, align 8, !tbaa !17
  %324 = icmp ne ptr %322, null
  %325 = icmp ne ptr %323, null
  %326 = select i1 %324, i1 %325, i1 false
  br i1 %326, label %285, label %327, !llvm.loop !61

327:                                              ; preds = %319
  %328 = icmp eq i8 %308, 0
  br i1 %328, label %329, label %330

329:                                              ; preds = %272, %327
  br label %330

330:                                              ; preds = %312, %300, %285, %294, %329, %327
  %331 = phi i32 [ 1, %329 ], [ 2, %327 ], [ 0, %312 ], [ %305, %300 ], [ 0, %285 ], [ 0, %294 ]
  store i32 %331, ptr %277, align 8, !tbaa !55
  br label %333

332:                                              ; preds = %62
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1500, ptr noundef nonnull @.str.8) #20
  br label %333

333:                                              ; preds = %125, %121, %31, %244, %263, %198, %184, %59, %163, %216, %268, %95, %114, %124, %143, %65, %104, %36, %40, %332, %330
  %334 = phi i32 [ 0, %332 ], [ %331, %330 ], [ %61, %59 ], [ 1, %40 ], [ 1, %36 ], [ 0, %114 ], [ 0, %124 ], [ 0, %143 ], [ 0, %95 ], [ 1, %65 ], [ 1, %104 ], [ 0, %163 ], [ %271, %268 ], [ %218, %216 ], [ 0, %184 ], [ 0, %198 ], [ 0, %263 ], [ 0, %244 ], [ 0, %31 ], [ 1, %121 ], [ 1, %125 ]
  ret i32 %334
}

declare ptr @build_qualified_type(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @self_promoting_args_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @type_lists_compatible_p(ptr noundef readonly %0, ptr noundef readonly %1, ptr noundef %2) unnamed_addr #9 {
  %4 = icmp eq ptr %0, null
  %5 = icmp eq ptr %1, null
  %6 = and i1 %4, %5
  br i1 %6, label %230, label %7

7:                                                ; preds = %3, %220
  %8 = phi i1 [ %228, %220 ], [ %5, %3 ]
  %9 = phi i1 [ %227, %220 ], [ %4, %3 ]
  %10 = phi ptr [ %224, %220 ], [ %0, %3 ]
  %11 = phi i32 [ %221, %220 ], [ 0, %3 ]
  %12 = phi i32 [ %222, %220 ], [ 1, %3 ]
  %13 = phi ptr [ %226, %220 ], [ %1, %3 ]
  %14 = select i1 %9, i1 true, i1 %8
  br i1 %14, label %230, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.tree_list, ptr %10, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.tree_list, ptr %13, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = icmp eq ptr %17, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %15
  %22 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %23 = icmp eq ptr %17, %22
  br i1 %23, label %31, label %24

24:                                               ; preds = %21
  %25 = load i64, ptr %17, align 8
  %26 = and i64 %25, 65535
  %27 = icmp eq i64 %26, 15
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 16
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  br label %31

31:                                               ; preds = %28, %24, %21
  %32 = phi ptr [ %30, %28 ], [ %17, %24 ], [ %17, %21 ]
  %33 = icmp eq ptr %19, null
  br i1 %33, label %79, label %38

34:                                               ; preds = %15
  %35 = icmp eq ptr %19, null
  br i1 %35, label %51, label %36

36:                                               ; preds = %34
  %37 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %38

38:                                               ; preds = %36, %31
  %39 = phi ptr [ %37, %36 ], [ %22, %31 ]
  %40 = phi ptr [ null, %36 ], [ %32, %31 ]
  %41 = icmp eq ptr %19, %39
  br i1 %41, label %49, label %42

42:                                               ; preds = %38
  %43 = load i64, ptr %19, align 8
  %44 = and i64 %43, 65535
  %45 = icmp eq i64 %44, 15
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 16
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  br label %49

49:                                               ; preds = %46, %42, %38
  %50 = phi ptr [ %48, %46 ], [ %19, %42 ], [ %19, %38 ]
  br i1 %20, label %51, label %107

51:                                               ; preds = %34, %49
  %52 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 16
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 31), align 8, !tbaa !6
  %55 = icmp eq ptr %53, %54
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 32), align 16, !tbaa !6
  br label %76

58:                                               ; preds = %51
  %59 = tail call zeroext i8 @c_promoting_integer_type_p(ptr noundef nonnull %19) #20
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %220, label %61

61:                                               ; preds = %58
  %62 = load i64, ptr %19, align 8
  %63 = and i64 %62, 2097152
  %64 = icmp eq i64 %63, 0
  %65 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br i1 %64, label %76, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 6
  %68 = load i32, ptr %67, align 4
  %69 = getelementptr inbounds %struct.tree_type, ptr %65, i64 0, i32 6
  %70 = load i32, ptr %69, align 4
  %71 = xor i32 %70, %68
  %72 = and i32 %71, 1023
  %73 = icmp eq i32 %72, 0
  %74 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 6), align 16
  %75 = select i1 %73, ptr %74, ptr %65
  br label %76

76:                                               ; preds = %56, %61, %66
  %77 = phi ptr [ %57, %56 ], [ %65, %61 ], [ %75, %66 ]
  %78 = icmp eq ptr %77, %19
  br i1 %78, label %220, label %230

79:                                               ; preds = %31
  %80 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 16
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 31), align 8, !tbaa !6
  %83 = icmp eq ptr %81, %82
  br i1 %83, label %84, label %86

84:                                               ; preds = %79
  %85 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 32), align 16, !tbaa !6
  br label %104

86:                                               ; preds = %79
  %87 = tail call zeroext i8 @c_promoting_integer_type_p(ptr noundef nonnull %17) #20
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %220, label %89

89:                                               ; preds = %86
  %90 = load i64, ptr %17, align 8
  %91 = and i64 %90, 2097152
  %92 = icmp eq i64 %91, 0
  %93 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br i1 %92, label %104, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 6
  %96 = load i32, ptr %95, align 4
  %97 = getelementptr inbounds %struct.tree_type, ptr %93, i64 0, i32 6
  %98 = load i32, ptr %97, align 4
  %99 = xor i32 %98, %96
  %100 = and i32 %99, 1023
  %101 = icmp eq i32 %100, 0
  %102 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 6), align 16
  %103 = select i1 %101, ptr %102, ptr %93
  br label %104

104:                                              ; preds = %84, %89, %94
  %105 = phi ptr [ %85, %84 ], [ %93, %89 ], [ %103, %94 ]
  %106 = icmp eq ptr %105, %17
  br i1 %106, label %220, label %230

107:                                              ; preds = %49
  %108 = load i64, ptr %17, align 8
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %220, label %111

111:                                              ; preds = %107
  %112 = load i64, ptr %19, align 8
  %113 = and i64 %112, 65535
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %220, label %115

115:                                              ; preds = %111
  %116 = tail call fastcc i32 @comptypes_internal(ptr noundef %40, ptr noundef %50, ptr noundef %2)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %220

118:                                              ; preds = %115
  %119 = load i64, ptr %17, align 8
  %120 = and i64 %119, 65535
  %121 = icmp eq i64 %120, 17
  br i1 %121, label %122, label %169

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 12
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = icmp eq ptr %124, null
  br i1 %125, label %131, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 6
  %128 = load i32, ptr %127, align 4
  %129 = and i32 %128, 4096
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %169, label %131

131:                                              ; preds = %126, %122
  %132 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !17
  %134 = load i64, ptr %133, align 8
  %135 = and i64 %134, 65535
  %136 = icmp eq i64 %135, 23
  br i1 %136, label %137, label %169

137:                                              ; preds = %131
  %138 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 2
  %139 = load ptr, ptr %138, align 8, !tbaa !17
  %140 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %133, ptr noundef %139) #20
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %169, label %142

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !17
  %145 = icmp eq ptr %144, null
  br i1 %145, label %230, label %150

146:                                              ; preds = %165
  %147 = getelementptr inbounds %struct.tree_common, ptr %151, i64 0, i32 1
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = icmp eq ptr %148, null
  br i1 %149, label %230, label %150, !llvm.loop !62

150:                                              ; preds = %142, %146
  %151 = phi ptr [ %148, %146 ], [ %144, %142 ]
  %152 = getelementptr inbounds %struct.tree_common, ptr %151, i64 0, i32 2
  %153 = load ptr, ptr %152, align 8, !tbaa !17
  %154 = icmp eq ptr %153, null
  br i1 %154, label %165, label %155

155:                                              ; preds = %150
  %156 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %157 = icmp eq ptr %153, %156
  br i1 %157, label %165, label %158

158:                                              ; preds = %155
  %159 = load i64, ptr %153, align 8
  %160 = and i64 %159, 65535
  %161 = icmp eq i64 %160, 15
  br i1 %161, label %165, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %struct.tree_type, ptr %153, i64 0, i32 16
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  br label %165

165:                                              ; preds = %162, %158, %155, %150
  %166 = phi ptr [ %164, %162 ], [ %153, %158 ], [ %153, %155 ], [ null, %150 ]
  %167 = tail call fastcc i32 @comptypes_internal(ptr noundef %166, ptr noundef %50, ptr noundef %2)
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %146, label %220

169:                                              ; preds = %137, %131, %126, %118
  %170 = load i64, ptr %19, align 8
  %171 = and i64 %170, 65535
  %172 = icmp eq i64 %171, 17
  br i1 %172, label %173, label %230

173:                                              ; preds = %169
  %174 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 12
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = icmp eq ptr %175, null
  br i1 %176, label %182, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 6
  %179 = load i32, ptr %178, align 4
  %180 = and i32 %179, 4096
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %230, label %182

182:                                              ; preds = %177, %173
  %183 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 2
  %184 = load ptr, ptr %183, align 8, !tbaa !17
  %185 = load i64, ptr %184, align 8
  %186 = and i64 %185, 65535
  %187 = icmp eq i64 %186, 23
  br i1 %187, label %188, label %230

188:                                              ; preds = %182
  %189 = getelementptr inbounds %struct.tree_type, ptr %17, i64 0, i32 2
  %190 = load ptr, ptr %189, align 8, !tbaa !17
  %191 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %184, ptr noundef %190) #20
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %230, label %193

193:                                              ; preds = %188
  %194 = getelementptr inbounds %struct.tree_type, ptr %19, i64 0, i32 1
  %195 = load ptr, ptr %194, align 8, !tbaa !17
  %196 = icmp eq ptr %195, null
  br i1 %196, label %230, label %201

197:                                              ; preds = %216
  %198 = getelementptr inbounds %struct.tree_common, ptr %202, i64 0, i32 1
  %199 = load ptr, ptr %198, align 8, !tbaa !17
  %200 = icmp eq ptr %199, null
  br i1 %200, label %230, label %201, !llvm.loop !63

201:                                              ; preds = %193, %197
  %202 = phi ptr [ %199, %197 ], [ %195, %193 ]
  %203 = getelementptr inbounds %struct.tree_common, ptr %202, i64 0, i32 2
  %204 = load ptr, ptr %203, align 8, !tbaa !17
  %205 = icmp eq ptr %204, null
  br i1 %205, label %216, label %206

206:                                              ; preds = %201
  %207 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %208 = icmp eq ptr %204, %207
  br i1 %208, label %216, label %209

209:                                              ; preds = %206
  %210 = load i64, ptr %204, align 8
  %211 = and i64 %210, 65535
  %212 = icmp eq i64 %211, 15
  br i1 %212, label %216, label %213

213:                                              ; preds = %209
  %214 = getelementptr inbounds %struct.tree_type, ptr %204, i64 0, i32 16
  %215 = load ptr, ptr %214, align 8, !tbaa !17
  br label %216

216:                                              ; preds = %213, %209, %206, %201
  %217 = phi ptr [ %215, %213 ], [ %204, %209 ], [ %204, %206 ], [ null, %201 ]
  %218 = tail call fastcc i32 @comptypes_internal(ptr noundef %217, ptr noundef %40, ptr noundef %2)
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %197, label %220

220:                                              ; preds = %165, %216, %86, %58, %76, %111, %107, %115, %104
  %221 = phi i32 [ %11, %76 ], [ %11, %104 ], [ %11, %107 ], [ %11, %111 ], [ %116, %115 ], [ %11, %58 ], [ %11, %86 ], [ 0, %216 ], [ 0, %165 ]
  %222 = tail call i32 @llvm.smax.i32(i32 %221, i32 %12)
  %223 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 1
  %224 = load ptr, ptr %223, align 8, !tbaa !17
  %225 = getelementptr inbounds %struct.tree_common, ptr %13, i64 0, i32 1
  %226 = load ptr, ptr %225, align 8, !tbaa !17
  %227 = icmp eq ptr %224, null
  %228 = icmp eq ptr %226, null
  %229 = select i1 %227, i1 %228, i1 false
  br i1 %229, label %230, label %7

230:                                              ; preds = %169, %177, %182, %188, %104, %76, %7, %220, %142, %193, %146, %197, %3
  %231 = phi i32 [ 1, %3 ], [ 0, %197 ], [ 0, %146 ], [ 0, %193 ], [ 0, %142 ], [ 0, %169 ], [ 0, %177 ], [ 0, %182 ], [ 0, %188 ], [ 0, %104 ], [ 0, %76 ], [ 0, %7 ], [ %222, %220 ]
  ret i32 %231
}

declare i32 @simple_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @purpose_member(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @xmalloc(i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @decl_constant_value(ptr noundef readonly %0) local_unnamed_addr #12 {
  %2 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %3 = icmp eq ptr %2, null
  br i1 %3, label %22, label %4

4:                                                ; preds = %1
  %5 = load i64, ptr %0, align 8
  %6 = and i64 %5, 65535
  %7 = icmp eq i64 %6, 34
  %8 = and i64 %5, 1572864
  %9 = icmp ne i64 %8, 1048576
  %10 = or i1 %7, %9
  br i1 %10, label %22, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.tree_decl_common, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = icmp eq ptr %13, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %11
  %16 = load i64, ptr %13, align 8
  %17 = freeze i64 %16
  %18 = and i64 %17, 131072
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %15
  %21 = trunc i64 %17 to i16
  switch i16 %21, label %23 [
    i16 51, label %22
    i16 0, label %22
  ]

22:                                               ; preds = %20, %20, %15, %11, %4, %1
  br label %23

23:                                               ; preds = %20, %22
  %24 = phi ptr [ %0, %22 ], [ %13, %20 ]
  ret ptr %24
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @default_function_array_conversion(ptr noalias nocapture writeonly sret(%struct.c_expr) align 8 %0, i32 noundef %1, ptr nocapture noundef byval(%struct.c_expr) align 8 %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %2, align 8, !tbaa !64
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i16
  switch i16 %8, label %94 [
    i16 15, label %9
    i16 20, label %64
  ]

9:                                                ; preds = %3, %20
  %10 = phi ptr [ %16, %20 ], [ %4, %3 ]
  %11 = phi i8 [ %23, %20 ], [ 0, %3 ]
  %12 = load i64, ptr %10, align 8
  %13 = trunc i64 %12 to i16
  switch i16 %13, label %24 [
    i16 117, label %14
    i16 116, label %14
    i16 113, label %14
  ]

14:                                               ; preds = %9, %9, %9
  %15 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = icmp eq ptr %18, %6
  br i1 %19, label %20, label %24

20:                                               ; preds = %14
  %21 = and i64 %12, 65535
  %22 = icmp eq i64 %21, 117
  %23 = select i1 %22, i8 1, i8 %11
  br label %9, !llvm.loop !66

24:                                               ; preds = %9, %14
  store ptr %10, ptr %2, align 8, !tbaa !64
  %25 = load i64, ptr %4, align 8
  %26 = and i64 %25, 8388608
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = or i64 %12, 8388608
  store i64 %29, ptr %10, align 8
  br label %30

30:                                               ; preds = %28, %24
  %31 = phi i64 [ %29, %28 ], [ %12, %24 ]
  %32 = icmp eq i8 %11, 0
  br i1 %32, label %33, label %57

33:                                               ; preds = %30, %39
  %34 = phi i64 [ %42, %39 ], [ %31, %30 ]
  %35 = phi ptr [ %41, %39 ], [ %10, %30 ]
  %36 = trunc i64 %34 to i16
  switch i16 %36, label %57 [
    i16 43, label %37
    i16 44, label %37
    i16 41, label %37
    i16 189, label %43
    i16 119, label %62
    i16 28, label %62
    i16 47, label %45
    i16 45, label %45
    i16 32, label %45
    i16 34, label %45
    i16 36, label %45
    i16 0, label %45
    i16 58, label %51
  ]

37:                                               ; preds = %33, %33, %33
  %38 = getelementptr inbounds %struct.tree_exp, ptr %35, i64 0, i32 3
  br label %39

39:                                               ; preds = %43, %37
  %40 = phi ptr [ %38, %37 ], [ %44, %43 ]
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = load i64, ptr %41, align 8
  br label %33

43:                                               ; preds = %33
  %44 = getelementptr inbounds %struct.tree_exp, ptr %35, i64 1
  br label %39

45:                                               ; preds = %33, %33, %33, %33, %33, %33
  %46 = getelementptr inbounds %struct.tree_common, ptr %35, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  %48 = load i64, ptr %47, align 8
  %49 = and i64 %48, 65534
  %50 = icmp ne i64 %49, 20
  br label %57

51:                                               ; preds = %33
  %52 = getelementptr inbounds %struct.tree_common, ptr %35, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = load i64, ptr %53, align 8
  %55 = and i64 %54, 65535
  %56 = icmp eq i64 %55, 15
  br label %57

57:                                               ; preds = %33, %51, %45, %30
  %58 = phi i1 [ false, %30 ], [ %56, %51 ], [ %50, %45 ], [ false, %33 ]
  %59 = load i32, ptr @flag_isoc99, align 4, !tbaa !21
  %60 = icmp ne i32 %59, 0
  %61 = select i1 %60, i1 true, i1 %58
  br i1 %61, label %62, label %94

62:                                               ; preds = %33, %33, %57
  %63 = tail call fastcc ptr @array_to_pointer_conversion(i32 noundef %1, ptr noundef nonnull %10)
  br label %92

64:                                               ; preds = %3
  %65 = and i64 %7, 65535
  %66 = icmp eq i64 %65, 20
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1759, ptr noundef nonnull @.str.8) #20
  br label %68

68:                                               ; preds = %67, %64
  %69 = load ptr, ptr @global_trees, align 16
  br label %70

70:                                               ; preds = %78, %68
  %71 = phi ptr [ %4, %68 ], [ %76, %78 ]
  %72 = load i64, ptr %71, align 8
  %73 = trunc i64 %72 to i16
  switch i16 %73, label %84 [
    i16 116, label %74
    i16 113, label %74
    i16 117, label %74
  ]

74:                                               ; preds = %70, %70, %70
  %75 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %76 = load ptr, ptr %75, align 8, !tbaa !17
  %77 = icmp eq ptr %76, %69
  br i1 %77, label %84, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = getelementptr inbounds %struct.tree_common, ptr %76, i64 0, i32 2
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  %83 = icmp eq ptr %80, %82
  br i1 %83, label %70, label %84, !llvm.loop !67

84:                                               ; preds = %78, %74, %70
  %85 = load i64, ptr %4, align 8
  %86 = and i64 %85, 8388608
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %84
  %89 = or i64 %72, 8388608
  store i64 %89, ptr %71, align 8
  br label %90

90:                                               ; preds = %84, %88
  %91 = tail call ptr @build_unary_op(i32 noundef %1, i32 noundef 121, ptr noundef nonnull %71, i32 noundef 0)
  br label %92

92:                                               ; preds = %90, %62
  %93 = phi ptr [ %63, %62 ], [ %91, %90 ]
  store ptr %93, ptr %2, align 8, !tbaa !64
  br label %94

94:                                               ; preds = %3, %92, %57
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %2, i64 24, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @lvalue_p(ptr nocapture noundef readonly %0) local_unnamed_addr #13 {
  br label %2

2:                                                ; preds = %8, %1
  %3 = phi ptr [ %0, %1 ], [ %10, %8 ]
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %26 [
    i16 43, label %6
    i16 44, label %6
    i16 41, label %6
    i16 189, label %11
    i16 119, label %25
    i16 28, label %25
    i16 47, label %13
    i16 45, label %13
    i16 32, label %13
    i16 34, label %13
    i16 36, label %13
    i16 0, label %13
    i16 58, label %19
  ]

6:                                                ; preds = %2, %2, %2
  %7 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  br label %8

8:                                                ; preds = %6, %11
  %9 = phi ptr [ %7, %6 ], [ %12, %11 ]
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  br label %2

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  br label %8

13:                                               ; preds = %2, %2, %2, %2, %2, %2
  %14 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i64, ptr %15, align 8
  %17 = and i64 %16, 65534
  %18 = icmp ne i64 %17, 20
  br label %26

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = load i64, ptr %21, align 8
  %23 = and i64 %22, 65535
  %24 = icmp eq i64 %23, 15
  br label %26

25:                                               ; preds = %2, %2
  br label %26

26:                                               ; preds = %2, %25, %19, %13
  %27 = phi i1 [ %24, %19 ], [ %18, %13 ], [ true, %25 ], [ false, %2 ]
  %28 = zext i1 %27 to i8
  ret i8 %28
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #14

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @array_to_pointer_conversion(i32 noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %4, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 15
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1737, ptr noundef nonnull @.str.8) #20
  br label %11

11:                                               ; preds = %2, %10
  %12 = load ptr, ptr @global_trees, align 16
  br label %13

13:                                               ; preds = %21, %11
  %14 = phi ptr [ %1, %11 ], [ %19, %21 ]
  %15 = load i64, ptr %14, align 8
  %16 = trunc i64 %15 to i16
  switch i16 %16, label %27 [
    i16 116, label %17
    i16 113, label %17
    i16 117, label %17
  ]

17:                                               ; preds = %13, %13, %13
  %18 = getelementptr inbounds %struct.tree_exp, ptr %14, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = icmp eq ptr %19, %12
  br i1 %20, label %27, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = getelementptr inbounds %struct.tree_common, ptr %19, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = icmp eq ptr %23, %25
  br i1 %26, label %13, label %27, !llvm.loop !68

27:                                               ; preds = %13, %17, %21
  %28 = load i64, ptr %1, align 8
  %29 = and i64 %28, 8388608
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = or i64 %15, 8388608
  store i64 %32, ptr %14, align 8
  br label %33

33:                                               ; preds = %31, %27
  %34 = tail call ptr @build_pointer_type(ptr noundef %6) #20
  %35 = load i64, ptr %14, align 8
  %36 = and i64 %35, 65535
  %37 = icmp eq i64 %36, 47
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.tree_exp, ptr %14, i64 0, i32 3
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  br label %43

41:                                               ; preds = %33
  %42 = tail call ptr @build_unary_op(i32 noundef %0, i32 noundef 121, ptr noundef nonnull %14, i32 noundef 1)
  br label %43

43:                                               ; preds = %41, %38
  %44 = phi ptr [ %42, %41 ], [ %40, %38 ]
  %45 = tail call ptr @convert(ptr noundef %34, ptr noundef %44) #20
  ret ptr %45
}

declare ptr @convert(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_unary_op(i32 noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #9 {
  %5 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %6 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %7, align 8
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 65535
  %11 = add nsw i32 %10, -6
  %12 = icmp ult i32 %11, 3
  br i1 %12, label %13, label %25

13:                                               ; preds = %4
  %14 = load i64, ptr %2, align 8
  %15 = trunc i64 %14 to i16
  switch i16 %15, label %25 [
    i16 23, label %19
    i16 189, label %16
  ]

16:                                               ; preds = %13
  %17 = and i64 %14, 8589934592
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %13, %16
  %20 = and i64 %14, 65535
  %21 = icmp eq i64 %20, 189
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %13, %4, %22, %19, %16
  %26 = phi i1 [ false, %16 ], [ true, %19 ], [ true, %22 ], [ false, %4 ], [ false, %13 ]
  %27 = phi ptr [ %2, %16 ], [ %2, %19 ], [ %24, %22 ], [ %2, %4 ], [ %2, %13 ]
  %28 = icmp eq i32 %1, 121
  br i1 %28, label %41, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.tree_common, ptr %27, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = icmp eq ptr %5, %27
  %33 = icmp eq ptr %31, %5
  %34 = select i1 %32, i1 true, i1 %33
  br i1 %34, label %41, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.tree_type, ptr %31, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  tail call void @c_incomplete_type_error(ptr noundef nonnull %27, ptr noundef nonnull %31)
  %40 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %41

41:                                               ; preds = %39, %35, %29, %25
  %42 = phi ptr [ %5, %25 ], [ %40, %39 ], [ %5, %35 ], [ %5, %29 ]
  %43 = phi ptr [ %27, %25 ], [ %40, %39 ], [ %27, %35 ], [ %5, %29 ]
  %44 = getelementptr inbounds %struct.tree_common, ptr %43, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = load i64, ptr %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = and i32 %47, 65535
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %674, label %50

50:                                               ; preds = %41
  %51 = and i32 %47, 65534
  %52 = icmp eq i32 %51, 6
  %53 = select i1 %52, i32 8, i32 %48
  %54 = freeze i32 %53
  %55 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 90), align 8, !tbaa !69
  %56 = load ptr, ptr %6, align 8, !tbaa !17
  %57 = tail call ptr %55(i32 noundef %1, ptr noundef %56) #20
  %58 = icmp eq ptr %57, null
  br i1 %58, label %61, label %59

59:                                               ; preds = %50
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull %57) #20
  %60 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

61:                                               ; preds = %50
  %62 = load i64, ptr %43, align 8
  %63 = and i64 %62, 65535
  %64 = icmp eq i64 %63, 190
  br i1 %64, label %65, label %69

65:                                               ; preds = %61
  %66 = load ptr, ptr %44, align 8, !tbaa !17
  %67 = getelementptr inbounds %struct.tree_exp, ptr %43, i64 0, i32 3
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  br label %69

69:                                               ; preds = %65, %61
  %70 = phi ptr [ %66, %65 ], [ null, %61 ]
  %71 = phi ptr [ %68, %65 ], [ %43, %61 ]
  switch i32 %1, label %620 [
    i32 113, label %72
    i32 79, label %86
    i32 90, label %97
    i32 82, label %122
    i32 124, label %131
    i32 96, label %142
    i32 43, label %160
    i32 44, label %187
    i32 126, label %217
    i32 128, label %217
    i32 125, label %217
    i32 127, label %217
    i32 121, label %465
  ]

72:                                               ; preds = %69
  %73 = and i32 %54, 65534
  %74 = icmp eq i32 %73, 8
  br i1 %74, label %79, label %75

75:                                               ; preds = %72
  %76 = trunc i32 %54 to i16
  switch i16 %76, label %77 [
    i16 14, label %79
    i16 13, label %79
    i16 11, label %79
  ]

77:                                               ; preds = %75
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.106) #20
  %78 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

79:                                               ; preds = %75, %75, %75, %72
  %80 = icmp eq i32 %3, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %79
  %82 = tail call ptr @default_conversion(ptr noundef %71)
  br label %83

83:                                               ; preds = %79, %81
  %84 = phi ptr [ %71, %79 ], [ %82, %81 ]
  %85 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %84) #20
  br label %621

86:                                               ; preds = %69
  %87 = and i32 %54, 65534
  %88 = icmp eq i32 %87, 8
  br i1 %88, label %93, label %89

89:                                               ; preds = %86
  %90 = trunc i32 %54 to i16
  switch i16 %90, label %91 [
    i16 14, label %93
    i16 13, label %93
    i16 11, label %93
  ]

91:                                               ; preds = %89
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.107) #20
  %92 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

93:                                               ; preds = %89, %89, %89, %86
  %94 = icmp eq i32 %3, 0
  br i1 %94, label %95, label %621

95:                                               ; preds = %93
  %96 = tail call ptr @default_conversion(ptr noundef %71)
  br label %621

97:                                               ; preds = %69
  %98 = trunc i32 %54 to i16
  switch i16 %98, label %120 [
    i16 8, label %111
    i16 14, label %99
    i16 13, label %115
  ]

99:                                               ; preds = %97
  %100 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8, !tbaa !17
  %102 = load i64, ptr %101, align 8
  %103 = and i64 %102, 65535
  %104 = icmp eq i64 %103, 14
  br i1 %104, label %105, label %111

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.tree_common, ptr %101, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  %108 = load i64, ptr %107, align 8
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 9
  br i1 %110, label %120, label %111

111:                                              ; preds = %97, %105, %99
  %112 = icmp eq i32 %3, 0
  br i1 %112, label %113, label %621

113:                                              ; preds = %111
  %114 = tail call ptr @default_conversion(ptr noundef %71)
  br label %621

115:                                              ; preds = %97
  %116 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.108) #20
  %117 = icmp eq i32 %3, 0
  br i1 %117, label %118, label %621

118:                                              ; preds = %115
  %119 = tail call ptr @default_conversion(ptr noundef %71)
  br label %621

120:                                              ; preds = %105, %97
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.109) #20
  %121 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

122:                                              ; preds = %69
  %123 = and i32 %54, 65534
  %124 = icmp eq i32 %123, 8
  br i1 %124, label %127, label %125

125:                                              ; preds = %122
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.110) #20
  %126 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

127:                                              ; preds = %122
  %128 = icmp eq i32 %3, 0
  br i1 %128, label %129, label %621

129:                                              ; preds = %127
  %130 = tail call ptr @default_conversion(ptr noundef %71)
  br label %621

131:                                              ; preds = %69
  %132 = and i32 %54, 65534
  %133 = icmp eq i32 %132, 8
  %134 = icmp eq i32 %54, 13
  %135 = or i1 %134, %133
  br i1 %135, label %138, label %136

136:                                              ; preds = %131
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.111) #20
  %137 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

138:                                              ; preds = %131
  %139 = icmp eq i32 %3, 0
  br i1 %139, label %140, label %621

140:                                              ; preds = %138
  %141 = tail call ptr @default_conversion(ptr noundef %71)
  br label %621

142:                                              ; preds = %69
  %143 = trunc i32 %54 to i16
  switch i16 %143, label %144 [
    i16 13, label %146
    i16 11, label %146
    i16 10, label %146
    i16 9, label %146
    i16 8, label %146
  ]

144:                                              ; preds = %142
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.112) #20
  %145 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

146:                                              ; preds = %142, %142, %142, %142, %142
  %147 = tail call ptr @c_objc_common_truthvalue_conversion(i32 noundef %0, ptr noundef %71)
  %148 = tail call ptr @invert_truthvalue_loc(i32 noundef %0, ptr noundef %147) #20
  %149 = load i64, ptr %148, align 8
  %150 = and i64 %149, 65535
  %151 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %150
  %152 = load i32, ptr %151, align 4, !tbaa !17
  %153 = add i32 %152, -4
  %154 = icmp ult i32 %153, 7
  br i1 %154, label %155, label %638

155:                                              ; preds = %146
  %156 = getelementptr inbounds %struct.tree_exp, ptr %148, i64 0, i32 1
  %157 = load i32, ptr %156, align 8, !tbaa !17
  %158 = icmp eq i32 %157, 0
  %159 = select i1 %158, i32 %0, i32 %157
  br label %638

160:                                              ; preds = %69
  %161 = load i64, ptr %71, align 8
  %162 = and i64 %161, 65535
  %163 = icmp eq i64 %162, 26
  br i1 %163, label %164, label %167

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.tree_complex, ptr %71, i64 0, i32 1
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  br label %177

167:                                              ; preds = %160
  %168 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = load i64, ptr %169, align 8
  %171 = and i64 %170, 65535
  %172 = icmp eq i64 %171, 13
  br i1 %172, label %173, label %177

173:                                              ; preds = %167
  %174 = getelementptr inbounds %struct.tree_common, ptr %169, i64 0, i32 2
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %175, ptr noundef nonnull %71) #20
  br label %177

177:                                              ; preds = %167, %173, %164
  %178 = phi ptr [ %166, %164 ], [ %176, %173 ], [ %71, %167 ]
  %179 = icmp eq ptr %70, null
  br i1 %179, label %638, label %180

180:                                              ; preds = %177
  %181 = load i64, ptr %70, align 8
  %182 = and i64 %181, 65535
  %183 = icmp eq i64 %182, 13
  br i1 %183, label %184, label %638

184:                                              ; preds = %180
  %185 = getelementptr inbounds %struct.tree_common, ptr %70, i64 0, i32 2
  %186 = load ptr, ptr %185, align 8, !tbaa !17
  br label %638

187:                                              ; preds = %69
  %188 = load i64, ptr %71, align 8
  %189 = and i64 %188, 65535
  %190 = icmp eq i64 %189, 26
  br i1 %190, label %191, label %194

191:                                              ; preds = %187
  %192 = getelementptr inbounds %struct.tree_complex, ptr %71, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  br label %207

194:                                              ; preds = %187
  %195 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %196 = load ptr, ptr %195, align 8, !tbaa !17
  %197 = load i64, ptr %196, align 8
  %198 = and i64 %197, 65535
  %199 = icmp eq i64 %198, 13
  br i1 %199, label %200, label %204

200:                                              ; preds = %194
  %201 = getelementptr inbounds %struct.tree_common, ptr %196, i64 0, i32 2
  %202 = load ptr, ptr %201, align 8, !tbaa !17
  %203 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %202, ptr noundef nonnull %71) #20
  br label %207

204:                                              ; preds = %194
  %205 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %206 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %196, ptr noundef %205, ptr noundef nonnull %71) #20
  br label %207

207:                                              ; preds = %200, %204, %191
  %208 = phi ptr [ %193, %191 ], [ %203, %200 ], [ %206, %204 ]
  %209 = icmp eq ptr %70, null
  br i1 %209, label %638, label %210

210:                                              ; preds = %207
  %211 = load i64, ptr %70, align 8
  %212 = and i64 %211, 65535
  %213 = icmp eq i64 %212, 13
  br i1 %213, label %214, label %638

214:                                              ; preds = %210
  %215 = getelementptr inbounds %struct.tree_common, ptr %70, i64 0, i32 2
  %216 = load ptr, ptr %215, align 8, !tbaa !17
  br label %638

217:                                              ; preds = %69, %69, %69, %69
  %218 = load i64, ptr %71, align 8
  %219 = and i64 %218, 65535
  %220 = icmp eq i64 %219, 189
  br i1 %220, label %221, label %240

221:                                              ; preds = %217
  %222 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 1
  %223 = load ptr, ptr %222, align 8, !tbaa !17
  %224 = tail call ptr @build_unary_op(i32 noundef %0, i32 noundef %1, ptr noundef %223, i32 noundef %3)
  %225 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %226 = icmp eq ptr %224, %225
  br i1 %226, label %674, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %229 = getelementptr inbounds %struct.tree_common, ptr %224, i64 0, i32 2
  %230 = load ptr, ptr %229, align 8, !tbaa !17
  %231 = load ptr, ptr %228, align 8, !tbaa !17
  %232 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %230, ptr noundef %231, ptr noundef %224) #20
  %233 = load i64, ptr %71, align 8
  %234 = and i64 %233, 8589934592
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %237, label %236

236:                                              ; preds = %227
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3455, ptr noundef nonnull @.str.8) #20
  br label %237

237:                                              ; preds = %236, %227
  %238 = load i64, ptr %232, align 8
  %239 = or i64 %238, 17179869184
  store i64 %239, ptr %232, align 8
  br label %638

240:                                              ; preds = %217
  %241 = icmp eq i32 %1, 126
  %242 = icmp eq i32 %1, 128
  %243 = or i1 %241, %242
  %244 = select i1 %243, i32 1, i32 2
  br label %245

245:                                              ; preds = %251, %240
  %246 = phi i64 [ %218, %240 ], [ %254, %251 ]
  %247 = phi ptr [ %71, %240 ], [ %253, %251 ]
  %248 = trunc i64 %246 to i16
  switch i16 %248, label %269 [
    i16 43, label %249
    i16 44, label %249
    i16 41, label %249
    i16 189, label %255
    i16 119, label %271
    i16 28, label %271
    i16 47, label %263
    i16 45, label %263
    i16 32, label %263
    i16 34, label %263
    i16 36, label %263
    i16 0, label %263
    i16 58, label %257
  ]

249:                                              ; preds = %245, %245, %245
  %250 = getelementptr inbounds %struct.tree_exp, ptr %247, i64 0, i32 3
  br label %251

251:                                              ; preds = %255, %249
  %252 = phi ptr [ %250, %249 ], [ %256, %255 ]
  %253 = load ptr, ptr %252, align 8, !tbaa !17
  %254 = load i64, ptr %253, align 8
  br label %245

255:                                              ; preds = %245
  %256 = getelementptr inbounds %struct.tree_exp, ptr %247, i64 1
  br label %251

257:                                              ; preds = %245
  %258 = getelementptr inbounds %struct.tree_common, ptr %247, i64 0, i32 2
  %259 = load ptr, ptr %258, align 8, !tbaa !17
  %260 = load i64, ptr %259, align 8
  %261 = and i64 %260, 65535
  %262 = icmp eq i64 %261, 15
  br i1 %262, label %271, label %269

263:                                              ; preds = %245, %245, %245, %245, %245, %245
  %264 = getelementptr inbounds %struct.tree_common, ptr %247, i64 0, i32 2
  %265 = load ptr, ptr %264, align 8, !tbaa !17
  %266 = load i64, ptr %265, align 8
  %267 = and i64 %266, 65534
  %268 = icmp eq i64 %267, 20
  br i1 %268, label %269, label %271

269:                                              ; preds = %245, %263, %257
  tail call void @lvalue_error(i32 noundef %244) #20
  %270 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

271:                                              ; preds = %245, %245, %263, %257
  %272 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %286, label %274

274:                                              ; preds = %271
  %275 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %276 = load ptr, ptr %275, align 8, !tbaa !17
  %277 = load i64, ptr %276, align 8
  %278 = and i64 %277, 65535
  %279 = icmp eq i64 %278, 6
  br i1 %279, label %280, label %286

280:                                              ; preds = %274
  %281 = add i32 %1, -126
  %282 = and i32 %281, -3
  %283 = icmp eq i32 %282, 0
  %284 = select i1 %283, ptr @.str.113, ptr @.str.114
  %285 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull %284) #20
  br label %286

286:                                              ; preds = %280, %274, %271
  %287 = tail call ptr @c_fully_fold(ptr noundef %71, i8 noundef zeroext 0, ptr noundef null) #20
  %288 = icmp eq i32 %54, 13
  br i1 %288, label %289, label %336

289:                                              ; preds = %286
  %290 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.115) #20
  %291 = tail call ptr @stabilize_reference(ptr noundef %287) #20
  %292 = load i64, ptr %291, align 8
  %293 = and i64 %292, 65535
  %294 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %293
  %295 = load i32, ptr %294, align 4, !tbaa !17
  %296 = add i32 %295, -4
  %297 = icmp ult i32 %296, 7
  br i1 %297, label %298, label %301

298:                                              ; preds = %289
  %299 = getelementptr inbounds %struct.tree_exp, ptr %291, i64 0, i32 1
  %300 = load i32, ptr %299, align 8, !tbaa !17
  br label %301

301:                                              ; preds = %289, %298
  %302 = phi i32 [ %300, %298 ], [ 0, %289 ]
  %303 = tail call ptr @build_unary_op(i32 noundef %302, i32 noundef 43, ptr noundef nonnull %291, i32 noundef 1)
  %304 = load i64, ptr %291, align 8
  %305 = and i64 %304, 65535
  %306 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %305
  %307 = load i32, ptr %306, align 4, !tbaa !17
  %308 = add i32 %307, -4
  %309 = icmp ult i32 %308, 7
  br i1 %309, label %310, label %313

310:                                              ; preds = %301
  %311 = getelementptr inbounds %struct.tree_exp, ptr %291, i64 0, i32 1
  %312 = load i32, ptr %311, align 8, !tbaa !17
  br label %313

313:                                              ; preds = %301, %310
  %314 = phi i32 [ %312, %310 ], [ 0, %301 ]
  %315 = tail call ptr @build_unary_op(i32 noundef %314, i32 noundef 44, ptr noundef nonnull %291, i32 noundef 1)
  %316 = load i64, ptr %291, align 8
  %317 = and i64 %316, 65535
  %318 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %317
  %319 = load i32, ptr %318, align 4, !tbaa !17
  %320 = add i32 %319, -4
  %321 = icmp ult i32 %320, 7
  br i1 %321, label %322, label %325

322:                                              ; preds = %313
  %323 = getelementptr inbounds %struct.tree_exp, ptr %291, i64 0, i32 1
  %324 = load i32, ptr %323, align 8, !tbaa !17
  br label %325

325:                                              ; preds = %313, %322
  %326 = phi i32 [ %324, %322 ], [ 0, %313 ]
  %327 = tail call ptr @build_unary_op(i32 noundef %326, i32 noundef %1, ptr noundef %303, i32 noundef 1)
  %328 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %329 = icmp eq ptr %327, %328
  %330 = icmp eq ptr %315, %328
  %331 = select i1 %329, i1 true, i1 %330
  br i1 %331, label %674, label %332

332:                                              ; preds = %325
  %333 = getelementptr inbounds %struct.tree_common, ptr %291, i64 0, i32 2
  %334 = load ptr, ptr %333, align 8, !tbaa !17
  %335 = tail call ptr @build2_stat(i32 noundef 123, ptr noundef %334, ptr noundef %327, ptr noundef %315) #20
  br label %638

336:                                              ; preds = %286
  %337 = add nsw i32 %54, -12
  %338 = icmp ult i32 %337, -4
  br i1 %338, label %339, label %345

339:                                              ; preds = %336
  %340 = add i32 %1, -126
  %341 = and i32 %340, -3
  %342 = icmp eq i32 %341, 0
  %343 = select i1 %342, ptr @.str.116, ptr @.str.117
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull %343) #20
  %344 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

345:                                              ; preds = %336
  %346 = getelementptr inbounds %struct.tree_common, ptr %287, i64 0, i32 2
  %347 = load ptr, ptr %346, align 8, !tbaa !17
  %348 = icmp eq i32 %54, 10
  br i1 %348, label %349, label %383

349:                                              ; preds = %345
  %350 = getelementptr inbounds %struct.tree_common, ptr %347, i64 0, i32 2
  %351 = load ptr, ptr %350, align 8, !tbaa !17
  %352 = getelementptr inbounds %struct.tree_type, ptr %351, i64 0, i32 2
  %353 = load ptr, ptr %352, align 8, !tbaa !17
  %354 = icmp ne ptr %353, null
  %355 = load i64, ptr %351, align 8
  %356 = and i64 %355, 65535
  %357 = icmp eq i64 %356, 19
  %358 = select i1 %354, i1 true, i1 %357
  br i1 %358, label %362, label %359

359:                                              ; preds = %349
  switch i32 %1, label %361 [
    i32 128, label %360
    i32 126, label %360
  ]

360:                                              ; preds = %359, %359
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.118) #20
  br label %378

361:                                              ; preds = %359
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.119) #20
  br label %378

362:                                              ; preds = %349
  %363 = trunc i64 %355 to i32
  %364 = and i32 %363, 65535
  %365 = add nsw i32 %364, -19
  %366 = icmp ult i32 %365, 2
  br i1 %366, label %367, label %378

367:                                              ; preds = %362
  switch i32 %1, label %373 [
    i32 128, label %368
    i32 126, label %368
  ]

368:                                              ; preds = %367, %367
  %369 = load i32, ptr @pedantic, align 4, !tbaa !21
  %370 = icmp eq i32 %369, 0
  %371 = select i1 %370, i32 162, i32 834
  %372 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %371, ptr noundef nonnull @.str.116) #20
  br label %378

373:                                              ; preds = %367
  %374 = load i32, ptr @pedantic, align 4, !tbaa !21
  %375 = icmp eq i32 %374, 0
  %376 = select i1 %375, i32 162, i32 834
  %377 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %376, ptr noundef nonnull @.str.117) #20
  br label %378

378:                                              ; preds = %362, %373, %368, %360, %361
  %379 = load ptr, ptr %350, align 8, !tbaa !17
  %380 = tail call fastcc ptr @c_size_in_bytes(ptr noundef %379)
  %381 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %382 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %381, ptr noundef %380) #20
  br label %427

383:                                              ; preds = %345
  %384 = load i64, ptr %347, align 8
  %385 = and i64 %384, 65535
  %386 = icmp eq i64 %385, 14
  br i1 %386, label %387, label %389

387:                                              ; preds = %383
  %388 = tail call i32 @vector_type_mode(ptr noundef nonnull %347) #20
  br label %394

389:                                              ; preds = %383
  %390 = getelementptr inbounds %struct.tree_type, ptr %347, i64 0, i32 6
  %391 = load i32, ptr %390, align 4
  %392 = lshr i32 %391, 16
  %393 = and i32 %392, 255
  br label %394

394:                                              ; preds = %389, %387
  %395 = phi i32 [ %388, %387 ], [ %393, %389 ]
  %396 = zext i32 %395 to i64
  %397 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %396
  %398 = load i8, ptr %397, align 1, !tbaa !17
  %399 = icmp eq i8 %398, 4
  br i1 %399, label %417, label %400

400:                                              ; preds = %394
  %401 = load i64, ptr %347, align 8
  %402 = and i64 %401, 65535
  %403 = icmp eq i64 %402, 14
  br i1 %403, label %404, label %406

404:                                              ; preds = %400
  %405 = tail call i32 @vector_type_mode(ptr noundef nonnull %347) #20
  br label %411

406:                                              ; preds = %400
  %407 = getelementptr inbounds %struct.tree_type, ptr %347, i64 0, i32 6
  %408 = load i32, ptr %407, align 4
  %409 = lshr i32 %408, 16
  %410 = and i32 %409, 255
  br label %411

411:                                              ; preds = %406, %404
  %412 = phi i32 [ %405, %404 ], [ %410, %406 ]
  %413 = zext i32 %412 to i64
  %414 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %413
  %415 = load i8, ptr %414, align 1, !tbaa !17
  %416 = icmp eq i8 %415, 13
  br i1 %416, label %417, label %424

417:                                              ; preds = %411, %394
  %418 = icmp eq i32 %1, 125
  %419 = select i1 %242, i32 127, i32 128
  %420 = select i1 %418, i32 126, i32 %419
  %421 = select i1 %241, i32 125, i32 %420
  %422 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 15), align 8, !tbaa !6
  %423 = tail call ptr @convert(ptr noundef nonnull %347, ptr noundef %422) #20
  br label %427

424:                                              ; preds = %411
  %425 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %426 = tail call ptr @convert(ptr noundef nonnull %347, ptr noundef %425) #20
  br label %427

427:                                              ; preds = %417, %424, %378
  %428 = phi ptr [ %382, %378 ], [ %423, %417 ], [ %426, %424 ]
  %429 = phi i32 [ %1, %378 ], [ %421, %417 ], [ %1, %424 ]
  %430 = load i64, ptr %347, align 8
  %431 = and i64 %430, 1048576
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %433, label %459

433:                                              ; preds = %427
  %434 = load i64, ptr %287, align 8
  %435 = and i64 %434, 1048576
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %442, label %437

437:                                              ; preds = %433
  %438 = icmp eq i32 %429, 126
  %439 = icmp eq i32 %429, 128
  %440 = or i1 %438, %439
  %441 = select i1 %440, i32 1, i32 2
  tail call fastcc void @readonly_warning(ptr noundef nonnull %287, i32 noundef %441)
  br label %442

442:                                              ; preds = %433, %437
  %443 = load ptr, ptr %346, align 8, !tbaa !17
  %444 = load i64, ptr %443, align 8
  %445 = and i64 %444, 65535
  %446 = icmp eq i64 %445, 7
  br i1 %446, label %447, label %449

447:                                              ; preds = %442
  %448 = tail call ptr @boolean_increment(i32 noundef %429, ptr noundef nonnull %287) #20
  br label %451

449:                                              ; preds = %442
  %450 = tail call ptr @build2_stat(i32 noundef %429, ptr noundef nonnull %443, ptr noundef nonnull %287, ptr noundef %428) #20
  br label %451

451:                                              ; preds = %447, %449
  %452 = phi ptr [ %448, %447 ], [ %450, %449 ]
  %453 = load i64, ptr %452, align 8
  %454 = trunc i64 %453 to i32
  %455 = and i32 %454, 65535
  %456 = icmp eq i32 %455, %429
  %457 = select i1 %456, i64 65536, i64 8454144
  %458 = or i64 %457, %453
  store i64 %458, ptr %452, align 8
  br label %638

459:                                              ; preds = %427
  %460 = icmp eq i32 %429, 126
  %461 = icmp eq i32 %429, 128
  %462 = or i1 %460, %461
  %463 = select i1 %462, i32 1, i32 2
  tail call fastcc void @readonly_error(ptr noundef nonnull %287, i32 noundef %463)
  %464 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

465:                                              ; preds = %69
  %466 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %467 = load ptr, ptr %466, align 8, !tbaa !17
  %468 = load i64, ptr %467, align 8
  %469 = and i64 %468, 65535
  %470 = icmp eq i64 %469, 19
  br i1 %470, label %471, label %497

471:                                              ; preds = %465
  %472 = trunc i64 %468 to i32
  %473 = lshr i32 %472, 20
  %474 = and i32 %473, 1
  %475 = lshr i32 %472, 18
  %476 = and i32 %475, 2
  %477 = or i32 %474, %476
  %478 = getelementptr inbounds %struct.tree_type, ptr %467, i64 0, i32 6
  %479 = load i32, ptr %478, align 4
  %480 = lshr i32 %479, 11
  %481 = and i32 %480, 4
  %482 = lshr i64 %468, 48
  %483 = trunc i64 %482 to i32
  %484 = and i32 %483, 65280
  %485 = or i32 %477, %484
  %486 = or i32 %485, %481
  %487 = icmp eq i32 %486, 0
  br i1 %487, label %488, label %497

488:                                              ; preds = %471
  %489 = load i64, ptr %71, align 8
  %490 = and i64 %489, 65535
  %491 = icmp eq i64 %490, 47
  %492 = load i32, ptr @flag_isoc99, align 4
  %493 = icmp ne i32 %492, 0
  %494 = select i1 %491, i1 %493, i1 false
  br i1 %494, label %497, label %495

495:                                              ; preds = %488
  %496 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.120) #20
  br label %497

497:                                              ; preds = %488, %495, %471, %465
  %498 = load i64, ptr %71, align 8
  %499 = trunc i64 %498 to i16
  switch i16 %499, label %527 [
    i16 47, label %500
    i16 45, label %507
  ]

500:                                              ; preds = %497
  %501 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %502 = load ptr, ptr %501, align 8, !tbaa !17
  %503 = tail call zeroext i8 @lvalue_p(ptr noundef %502), !range !70
  %504 = icmp eq i8 %503, 0
  br i1 %504, label %638, label %505

505:                                              ; preds = %500
  %506 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %502) #20
  br label %674

507:                                              ; preds = %497
  %508 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %509 = load ptr, ptr %508, align 8, !tbaa !17
  %510 = tail call zeroext i8 @c_mark_addressable(ptr noundef %509), !range !70
  %511 = icmp eq i8 %510, 0
  br i1 %511, label %512, label %514

512:                                              ; preds = %507
  %513 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

514:                                              ; preds = %507
  %515 = getelementptr inbounds %struct.tree_common, ptr %509, i64 0, i32 2
  %516 = load ptr, ptr %515, align 8, !tbaa !17
  %517 = load i64, ptr %516, align 8
  %518 = and i64 %517, 65535
  %519 = icmp eq i64 %518, 15
  br i1 %519, label %520, label %522

520:                                              ; preds = %514
  %521 = tail call fastcc ptr @array_to_pointer_conversion(i32 noundef %0, ptr noundef nonnull %509)
  br label %522

522:                                              ; preds = %514, %520
  %523 = phi ptr [ %521, %520 ], [ %509, %514 ]
  %524 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 1
  %525 = load ptr, ptr %524, align 8, !tbaa !17
  %526 = tail call ptr @build_binary_op(i32 noundef %0, i32 noundef 63, ptr noundef %523, ptr noundef %525, i32 noundef 1)
  br label %674

527:                                              ; preds = %497
  %528 = icmp eq i32 %54, 20
  %529 = icmp ne i32 %3, 0
  %530 = or i1 %529, %528
  br i1 %530, label %538, label %531

531:                                              ; preds = %527
  %532 = tail call fastcc i32 @lvalue_or_else(ptr noundef nonnull %71, i32 noundef 3), !range !47
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %536, label %534

534:                                              ; preds = %531
  %535 = load i64, ptr %71, align 8
  br label %538

536:                                              ; preds = %531
  %537 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

538:                                              ; preds = %534, %527
  %539 = phi i64 [ %535, %534 ], [ %498, %527 ]
  %540 = and i64 %539, 65535
  %541 = icmp eq i64 %540, 189
  br i1 %541, label %542, label %562

542:                                              ; preds = %538
  %543 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %544 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 1
  %545 = load ptr, ptr %544, align 8, !tbaa !17
  %546 = tail call ptr @build_unary_op(i32 noundef %0, i32 noundef 121, ptr noundef %545, i32 noundef %3)
  %547 = getelementptr inbounds %struct.tree_common, ptr %546, i64 0, i32 2
  %548 = load ptr, ptr %547, align 8, !tbaa !17
  %549 = load ptr, ptr %543, align 8, !tbaa !17
  %550 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %548, ptr noundef %549, ptr noundef %546) #20
  %551 = load i64, ptr %71, align 8
  %552 = and i64 %551, 8589934592
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %556, label %554

554:                                              ; preds = %542
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3648, ptr noundef nonnull @.str.8) #20
  %555 = load i64, ptr %71, align 8
  br label %556

556:                                              ; preds = %542, %554
  %557 = phi i64 [ %551, %542 ], [ %555, %554 ]
  %558 = and i64 %557, 17179869184
  %559 = load i64, ptr %550, align 8
  %560 = and i64 %559, -17179869185
  %561 = or i64 %560, %558
  store i64 %561, ptr %550, align 8
  br label %638

562:                                              ; preds = %538
  %563 = load ptr, ptr %466, align 8, !tbaa !17
  %564 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %540
  %565 = load i32, ptr %564, align 4, !tbaa !17
  %566 = add i32 %565, -5
  %567 = icmp ult i32 %566, -2
  %568 = and i64 %539, 1572864
  %569 = icmp eq i64 %568, 0
  %570 = or i1 %569, %567
  br i1 %570, label %579, label %571

571:                                              ; preds = %562
  %572 = trunc i64 %539 to i32
  %573 = lshr i32 %572, 20
  %574 = and i32 %573, 1
  %575 = lshr i32 %572, 18
  %576 = and i32 %575, 2
  %577 = or i32 %574, %576
  %578 = tail call ptr @c_build_qualified_type(ptr noundef %563, i32 noundef %577)
  br label %579

579:                                              ; preds = %562, %571
  %580 = phi ptr [ %578, %571 ], [ %563, %562 ]
  %581 = tail call zeroext i8 @c_mark_addressable(ptr noundef nonnull %71), !range !70
  %582 = icmp eq i8 %581, 0
  br i1 %582, label %583, label %585

583:                                              ; preds = %579
  %584 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %674

585:                                              ; preds = %579
  %586 = load i64, ptr %71, align 8
  %587 = and i64 %586, 65535
  %588 = icmp eq i64 %587, 41
  br i1 %588, label %589, label %597

589:                                              ; preds = %585
  %590 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 1
  %591 = load ptr, ptr %590, align 8, !tbaa !17
  %592 = getelementptr inbounds %struct.tree_decl_common, ptr %591, i64 0, i32 2
  %593 = load i64, ptr %592, align 8
  %594 = and i64 %593, 524288
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %597, label %596

596:                                              ; preds = %589
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3671, ptr noundef nonnull @.str.8) #20
  br label %597

597:                                              ; preds = %585, %589, %596
  %598 = tail call ptr @build_pointer_type(ptr noundef %580) #20
  %599 = tail call ptr @get_base_address(ptr noundef nonnull %71) #20
  %600 = icmp eq ptr %599, null
  br i1 %600, label %618, label %601

601:                                              ; preds = %597
  %602 = load i64, ptr %599, align 8
  %603 = and i64 %602, 65535
  %604 = icmp eq i64 %603, 47
  br i1 %604, label %605, label %618

605:                                              ; preds = %601
  %606 = getelementptr inbounds %struct.tree_exp, ptr %599, i64 0, i32 3
  %607 = load ptr, ptr %606, align 8, !tbaa !17
  %608 = load i64, ptr %607, align 8
  %609 = and i64 %608, 131072
  %610 = icmp eq i64 %609, 0
  br i1 %610, label %618, label %611

611:                                              ; preds = %605
  %612 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %613 = tail call ptr @fold_offsetof(ptr noundef nonnull %71, ptr noundef nonnull %599) #20
  %614 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %612, ptr noundef %613) #20
  %615 = load ptr, ptr %606, align 8, !tbaa !17
  %616 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %598, ptr noundef %615) #20
  %617 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 66, ptr noundef %598, ptr noundef %616, ptr noundef %614) #20
  br label %638

618:                                              ; preds = %605, %601, %597
  %619 = tail call ptr @build1_stat(i32 noundef 121, ptr noundef %598, ptr noundef nonnull %71) #20
  br label %638

620:                                              ; preds = %69
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3695, ptr noundef nonnull @.str.8) #20
  br label %621

621:                                              ; preds = %83, %620, %93, %95, %118, %115, %111, %113, %127, %129, %138, %140
  %622 = phi ptr [ %71, %620 ], [ %71, %138 ], [ %141, %140 ], [ %71, %127 ], [ %130, %129 ], [ %71, %111 ], [ %114, %113 ], [ %71, %115 ], [ %119, %118 ], [ %71, %93 ], [ %96, %95 ], [ %85, %83 ]
  %623 = phi i32 [ %1, %620 ], [ 124, %138 ], [ 124, %140 ], [ 82, %127 ], [ 82, %129 ], [ 90, %111 ], [ 90, %113 ], [ 124, %115 ], [ 124, %118 ], [ 79, %93 ], [ 79, %95 ], [ 113, %83 ]
  %624 = getelementptr inbounds %struct.tree_common, ptr %622, i64 0, i32 2
  %625 = load ptr, ptr %624, align 8, !tbaa !17
  %626 = load i64, ptr %622, align 8
  %627 = and i64 %626, 65535
  %628 = icmp eq i64 %627, 23
  br i1 %628, label %629, label %636

629:                                              ; preds = %621
  %630 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %634, label %632

632:                                              ; preds = %629
  %633 = tail call ptr @fold_build1_initializer_loc(i32 noundef %0, i32 noundef %623, ptr noundef %625, ptr noundef nonnull %622) #20
  br label %638

634:                                              ; preds = %629
  %635 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %623, ptr noundef %625, ptr noundef nonnull %622) #20
  br label %638

636:                                              ; preds = %621
  %637 = tail call ptr @build1_stat(i32 noundef %623, ptr noundef %625, ptr noundef nonnull %622) #20
  br label %638

638:                                              ; preds = %155, %500, %451, %332, %237, %632, %634, %611, %556, %636, %207, %210, %214, %177, %180, %184, %146, %618
  %639 = phi ptr [ %70, %636 ], [ %70, %556 ], [ %70, %611 ], [ %70, %618 ], [ %70, %237 ], [ %216, %214 ], [ %70, %210 ], [ null, %207 ], [ %186, %184 ], [ %70, %180 ], [ null, %177 ], [ %70, %146 ], [ %70, %634 ], [ %70, %632 ], [ %70, %332 ], [ %70, %451 ], [ %70, %500 ], [ %70, %155 ]
  %640 = phi ptr [ %637, %636 ], [ %550, %556 ], [ %617, %611 ], [ %619, %618 ], [ %232, %237 ], [ %208, %214 ], [ %208, %210 ], [ %208, %207 ], [ %178, %184 ], [ %178, %180 ], [ %178, %177 ], [ %148, %146 ], [ %635, %634 ], [ %633, %632 ], [ %335, %332 ], [ %452, %451 ], [ %502, %500 ], [ %148, %155 ]
  %641 = phi i32 [ %0, %636 ], [ %0, %556 ], [ %0, %611 ], [ %0, %618 ], [ %0, %237 ], [ %0, %214 ], [ %0, %210 ], [ %0, %207 ], [ %0, %184 ], [ %0, %180 ], [ %0, %177 ], [ %0, %146 ], [ %0, %634 ], [ %0, %632 ], [ %0, %332 ], [ %0, %451 ], [ %0, %500 ], [ %159, %155 ]
  %642 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %643 = icmp eq ptr %640, %642
  br i1 %643, label %644, label %645

644:                                              ; preds = %638
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3707, ptr noundef nonnull @.str.8) #20
  br label %645

645:                                              ; preds = %638, %644
  %646 = load i64, ptr %640, align 8
  %647 = and i64 %646, 134283263
  %648 = icmp eq i64 %647, 23
  br i1 %648, label %649, label %657

649:                                              ; preds = %645
  %650 = load i64, ptr %2, align 8
  %651 = and i64 %650, 134283263
  %652 = icmp eq i64 %651, 23
  br i1 %652, label %667, label %653

653:                                              ; preds = %649
  %654 = getelementptr inbounds %struct.tree_common, ptr %640, i64 0, i32 2
  %655 = load ptr, ptr %654, align 8, !tbaa !17
  %656 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %655, ptr noundef nonnull %640) #20
  br label %667

657:                                              ; preds = %645
  %658 = and i64 %646, 65535
  %659 = icmp ne i64 %658, 23
  %660 = and i1 %26, %659
  br i1 %660, label %661, label %667

661:                                              ; preds = %657
  %662 = getelementptr inbounds %struct.tree_common, ptr %640, i64 0, i32 2
  %663 = load ptr, ptr %662, align 8, !tbaa !17
  %664 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %663, ptr noundef null, ptr noundef nonnull %640) #20
  %665 = load i64, ptr %664, align 8
  %666 = or i64 %665, 8589934592
  store i64 %666, ptr %664, align 8
  br label %667

667:                                              ; preds = %649, %657, %661, %653
  %668 = phi ptr [ %664, %661 ], [ %640, %657 ], [ %656, %653 ], [ %640, %649 ]
  %669 = icmp eq ptr %639, null
  br i1 %669, label %672, label %670

670:                                              ; preds = %667
  %671 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %639, ptr noundef %668) #20
  br label %672

672:                                              ; preds = %670, %667
  %673 = phi ptr [ %671, %670 ], [ %668, %667 ]
  tail call void @protected_set_expr_location(ptr noundef %673, i32 noundef %641) #20
  br label %674

674:                                              ; preds = %41, %221, %459, %325, %512, %522, %672, %583, %536, %505, %339, %269, %144, %136, %125, %120, %91, %77, %59
  %675 = phi ptr [ %60, %59 ], [ %673, %672 ], [ %506, %505 ], [ %584, %583 ], [ %537, %536 ], [ %344, %339 ], [ %464, %459 ], [ %270, %269 ], [ %145, %144 ], [ %137, %136 ], [ %126, %125 ], [ %121, %120 ], [ %92, %91 ], [ %78, %77 ], [ %526, %522 ], [ %513, %512 ], [ %328, %325 ], [ %224, %221 ], [ %42, %41 ]
  ret ptr %675
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @perform_integral_promotions(ptr noundef %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %6 [
    i16 6, label %7
    i16 7, label %22
    i16 8, label %22
  ]

6:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1834, ptr noundef nonnull @.str.8) #20
  br label %22

7:                                                ; preds = %1
  %8 = trunc i64 %4 to i32
  %9 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 6
  %10 = load i32, ptr %9, align 4
  %11 = and i32 %10, 1023
  %12 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %13 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = and i32 %14, 1023
  %16 = tail call i32 @llvm.umax.i32(i32 %11, i32 %15)
  %17 = icmp ult i32 %11, %15
  %18 = lshr i32 %8, 21
  %19 = and i32 %18, 1
  %20 = select i1 %17, i32 0, i32 %19
  %21 = tail call ptr @c_common_type_for_size(i32 noundef %16, i32 noundef %20) #20
  br label %63

22:                                               ; preds = %6, %1, %1
  %23 = load i64, ptr %0, align 8
  %24 = and i64 %23, 65535
  %25 = icmp eq i64 %24, 41
  br i1 %25, label %26, label %45

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.tree_decl_common, ptr %28, i64 0, i32 2
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 524288
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %45, label %33

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.tree_decl_common, ptr %28, i64 0, i32 1
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %37 = getelementptr inbounds %struct.tree_type, ptr %36, i64 0, i32 6
  %38 = load i32, ptr %37, align 4
  %39 = and i32 %38, 1023
  %40 = zext i32 %39 to i64
  %41 = tail call i32 @compare_tree_int(ptr noundef %35, i64 noundef %40) #20
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %33
  %44 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br label %63

45:                                               ; preds = %33, %26, %22
  %46 = tail call zeroext i8 @c_promoting_integer_type_p(ptr noundef nonnull %3) #20
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %66, label %48

48:                                               ; preds = %45
  %49 = load i64, ptr %3, align 8
  %50 = and i64 %49, 2097152
  %51 = icmp eq i64 %50, 0
  %52 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br i1 %51, label %63, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 6
  %55 = load i32, ptr %54, align 4
  %56 = getelementptr inbounds %struct.tree_type, ptr %52, i64 0, i32 6
  %57 = load i32, ptr %56, align 4
  %58 = xor i32 %57, %55
  %59 = and i32 %58, 1023
  %60 = icmp eq i32 %59, 0
  %61 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 6), align 16
  %62 = select i1 %60, ptr %61, ptr %52
  br label %63

63:                                               ; preds = %53, %48, %7, %43
  %64 = phi ptr [ %44, %43 ], [ %21, %7 ], [ %52, %48 ], [ %62, %53 ]
  %65 = tail call ptr @convert(ptr noundef %64, ptr noundef nonnull %0) #20
  br label %66

66:                                               ; preds = %63, %45
  %67 = phi ptr [ %0, %45 ], [ %65, %63 ]
  ret ptr %67
}

declare i32 @compare_tree_int(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @default_conversion(ptr noundef %0) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %7 [
    i16 20, label %6
    i16 15, label %71
  ]

6:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 1886, ptr noundef nonnull @.str.8) #20
  br label %7

7:                                                ; preds = %6, %1
  %8 = load i64, ptr %0, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 33
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.tree_decl_common, ptr %0, i64 0, i32 5
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  br label %14

14:                                               ; preds = %11, %7
  %15 = phi ptr [ %13, %11 ], [ %0, %7 ]
  %16 = load ptr, ptr @global_trees, align 16
  br label %17

17:                                               ; preds = %25, %14
  %18 = phi ptr [ %15, %14 ], [ %23, %25 ]
  %19 = load i64, ptr %18, align 8
  %20 = trunc i64 %19 to i16
  switch i16 %20, label %31 [
    i16 116, label %21
    i16 113, label %21
    i16 117, label %21
  ]

21:                                               ; preds = %17, %17, %17
  %22 = getelementptr inbounds %struct.tree_exp, ptr %18, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = icmp eq ptr %23, %16
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = icmp eq ptr %27, %29
  br i1 %30, label %17, label %31, !llvm.loop !71

31:                                               ; preds = %17, %21, %25
  %32 = load i64, ptr %15, align 8
  %33 = and i64 %32, 8388608
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = or i64 %19, 8388608
  store i64 %36, ptr %18, align 8
  br label %37

37:                                               ; preds = %35, %31
  %38 = and i64 %4, 65535
  %39 = icmp eq i64 %38, 19
  br i1 %39, label %40, label %42

40:                                               ; preds = %37
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.17) #20
  %41 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %71

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %46 = icmp eq ptr %45, %18
  %47 = icmp eq ptr %44, %45
  %48 = select i1 %46, i1 true, i1 %47
  br i1 %48, label %71, label %49

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.tree_type, ptr %44, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  tail call void @c_incomplete_type_error(ptr noundef nonnull %18, ptr noundef nonnull %44)
  %54 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %71

55:                                               ; preds = %49
  %56 = icmp eq ptr %18, %45
  br i1 %56, label %71, label %57

57:                                               ; preds = %55
  %58 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 94), align 8, !tbaa !72
  %59 = tail call ptr %58(ptr noundef nonnull %3) #20
  %60 = icmp eq ptr %59, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  %62 = tail call ptr @convert(ptr noundef nonnull %59, ptr noundef nonnull %18) #20
  br label %71

63:                                               ; preds = %57
  %64 = load i64, ptr %3, align 8
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 65535
  %67 = add nsw i32 %66, -6
  %68 = icmp ult i32 %67, 3
  br i1 %68, label %69, label %71

69:                                               ; preds = %63
  %70 = tail call ptr @perform_integral_promotions(ptr noundef nonnull %18)
  br label %71

71:                                               ; preds = %42, %53, %63, %55, %1, %69, %61, %40
  %72 = phi ptr [ %41, %40 ], [ %62, %61 ], [ %70, %69 ], [ %0, %1 ], [ %45, %55 ], [ %18, %63 ], [ %45, %42 ], [ %54, %53 ]
  ret ptr %72
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_component_ref(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 65535
  br label %9

9:                                                ; preds = %15, %3
  %10 = phi ptr [ %1, %3 ], [ %17, %15 ]
  %11 = load i64, ptr %10, align 8
  %12 = trunc i64 %11 to i16
  switch i16 %12, label %32 [
    i16 43, label %13
    i16 44, label %13
    i16 41, label %13
    i16 189, label %18
    i16 119, label %33
    i16 28, label %33
    i16 47, label %20
    i16 45, label %20
    i16 32, label %20
    i16 34, label %20
    i16 36, label %20
    i16 0, label %20
    i16 58, label %26
  ]

13:                                               ; preds = %9, %9, %9
  %14 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 0, i32 3
  br label %15

15:                                               ; preds = %18, %13
  %16 = phi ptr [ %14, %13 ], [ %19, %18 ]
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  br label %9

18:                                               ; preds = %9
  %19 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 1
  br label %15

20:                                               ; preds = %9, %9, %9, %9, %9, %9
  %21 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = load i64, ptr %22, align 8
  %24 = and i64 %23, 65534
  %25 = icmp ne i64 %24, 20
  br label %33

26:                                               ; preds = %9
  %27 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = load i64, ptr %28, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 15
  br label %33

32:                                               ; preds = %9
  br label %33

33:                                               ; preds = %9, %9, %32, %20, %26
  %34 = phi i1 [ %31, %26 ], [ %25, %20 ], [ false, %32 ], [ true, %9 ], [ true, %9 ]
  %35 = tail call i32 @objc_is_public(ptr noundef %1, ptr noundef %2) #20
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %171

39:                                               ; preds = %33
  %40 = and i32 %7, 65534
  %41 = icmp eq i32 %40, 16
  br i1 %41, label %42, label %166

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = icmp eq ptr %44, null
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  tail call void @c_incomplete_type_error(ptr noundef null, ptr noundef nonnull %5)
  %47 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %171

48:                                               ; preds = %42
  %49 = tail call fastcc ptr @lookup_field(ptr noundef %1, ptr noundef %2)
  %50 = icmp eq ptr %49, null
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.18, ptr noundef nonnull %5, ptr noundef %2) #20
  %52 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %171

53:                                               ; preds = %48, %162
  %54 = phi ptr [ %164, %162 ], [ %49, %48 ]
  %55 = phi ptr [ %119, %162 ], [ %1, %48 ]
  %56 = getelementptr inbounds %struct.tree_list, ptr %54, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.tree_common, ptr %57, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %61 = icmp eq ptr %59, %60
  br i1 %61, label %171, label %62

62:                                               ; preds = %53
  br i1 %34, label %67, label %63

63:                                               ; preds = %62
  %64 = load i64, ptr %59, align 8
  %65 = and i64 %64, 65535
  %66 = icmp ne i64 %65, 15
  br label %67

67:                                               ; preds = %63, %62
  %68 = phi i1 [ true, %62 ], [ %66, %63 ]
  %69 = tail call ptr @strip_array_types(ptr noundef %59) #20
  %70 = load i64, ptr %69, align 8
  %71 = trunc i64 %70 to i32
  %72 = lshr i32 %71, 20
  %73 = and i32 %72, 1
  %74 = load ptr, ptr %58, align 8, !tbaa !17
  %75 = tail call ptr @strip_array_types(ptr noundef %74) #20
  %76 = load i64, ptr %75, align 8
  %77 = trunc i64 %76 to i32
  %78 = lshr i32 %77, 18
  %79 = and i32 %78, 2
  %80 = or i32 %79, %73
  %81 = load ptr, ptr %58, align 8, !tbaa !17
  %82 = tail call ptr @strip_array_types(ptr noundef %81) #20
  %83 = getelementptr inbounds %struct.tree_type, ptr %82, i64 0, i32 6
  %84 = load i32, ptr %83, align 4
  %85 = lshr i32 %84, 11
  %86 = and i32 %85, 4
  %87 = or i32 %80, %86
  %88 = load ptr, ptr %58, align 8, !tbaa !17
  %89 = tail call ptr @strip_array_types(ptr noundef %88) #20
  %90 = load i64, ptr %89, align 8
  %91 = lshr i64 %90, 48
  %92 = trunc i64 %91 to i32
  %93 = and i32 %92, 65280
  %94 = or i32 %87, %93
  br i1 %68, label %95, label %115

95:                                               ; preds = %67
  %96 = getelementptr inbounds %struct.tree_common, ptr %55, i64 0, i32 2
  %97 = load ptr, ptr %96, align 8, !tbaa !17
  %98 = load i64, ptr %97, align 8
  %99 = trunc i64 %98 to i32
  %100 = lshr i32 %99, 20
  %101 = and i32 %100, 1
  %102 = lshr i32 %99, 18
  %103 = and i32 %102, 2
  %104 = getelementptr inbounds %struct.tree_type, ptr %97, i64 0, i32 6
  %105 = load i32, ptr %104, align 4
  %106 = lshr i32 %105, 11
  %107 = and i32 %106, 4
  %108 = lshr i64 %98, 48
  %109 = trunc i64 %108 to i32
  %110 = and i32 %109, 65280
  %111 = or i32 %103, %101
  %112 = or i32 %111, %107
  %113 = or i32 %112, %110
  %114 = or i32 %113, %94
  br label %115

115:                                              ; preds = %95, %67
  %116 = phi i32 [ %114, %95 ], [ %94, %67 ]
  %117 = load ptr, ptr %58, align 8, !tbaa !17
  %118 = tail call ptr @c_build_qualified_type(ptr noundef %117, i32 noundef %116)
  %119 = tail call ptr @build3_stat(i32 noundef 41, ptr noundef %118, ptr noundef %55, ptr noundef nonnull %57, ptr noundef null) #20
  %120 = getelementptr inbounds %struct.tree_exp, ptr %119, i64 0, i32 1
  store i32 %0, ptr %120, align 8, !tbaa !17
  %121 = load i64, ptr %57, align 8
  %122 = and i64 %121, 1048576
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %129

124:                                              ; preds = %115
  br i1 %68, label %125, label %144

125:                                              ; preds = %124
  %126 = load i64, ptr %55, align 8
  %127 = and i64 %126, 1048576
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %141, label %135

129:                                              ; preds = %115
  %130 = load i64, ptr %119, align 8
  %131 = or i64 %130, 1048576
  store i64 %131, ptr %119, align 8
  %132 = load i64, ptr %57, align 8
  %133 = and i64 %132, 524288
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %147, label %153

135:                                              ; preds = %125
  %136 = load i64, ptr %119, align 8
  %137 = or i64 %136, 1048576
  store i64 %137, ptr %119, align 8
  %138 = load i64, ptr %57, align 8
  %139 = and i64 %138, 524288
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %148, label %153

141:                                              ; preds = %125
  %142 = and i64 %121, 524288
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %148, label %153

144:                                              ; preds = %124
  %145 = and i64 %121, 524288
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %157, label %153

147:                                              ; preds = %129
  br i1 %68, label %148, label %157

148:                                              ; preds = %135, %141, %147
  %149 = phi i64 [ %138, %135 ], [ %121, %141 ], [ %132, %147 ]
  %150 = load i64, ptr %55, align 8
  %151 = and i64 %150, 524288
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %157, label %153

153:                                              ; preds = %135, %141, %144, %148, %129
  %154 = load i64, ptr %119, align 8
  %155 = or i64 %154, 524288
  store i64 %155, ptr %119, align 8
  %156 = load i64, ptr %57, align 8
  br label %157

157:                                              ; preds = %144, %153, %148, %147
  %158 = phi i64 [ %121, %144 ], [ %156, %153 ], [ %149, %148 ], [ %132, %147 ]
  %159 = and i64 %158, 1073741824
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %162, label %161

161:                                              ; preds = %157
  tail call void @warn_deprecated_use(ptr noundef nonnull %57, ptr noundef null) #20
  br label %162

162:                                              ; preds = %161, %157
  %163 = getelementptr inbounds %struct.tree_common, ptr %54, i64 0, i32 1
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = icmp eq ptr %164, null
  br i1 %165, label %171, label %53, !llvm.loop !73

166:                                              ; preds = %39
  %167 = icmp eq i32 %8, 0
  br i1 %167, label %169, label %168

168:                                              ; preds = %166
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.19, ptr noundef %2) #20
  br label %169

169:                                              ; preds = %166, %168
  %170 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %171

171:                                              ; preds = %53, %162, %169, %51, %46, %37
  %172 = phi ptr [ %52, %51 ], [ %47, %46 ], [ %170, %169 ], [ %38, %37 ], [ %59, %53 ], [ %119, %162 ]
  ret ptr %172
}

declare i32 @objc_is_public(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @lookup_field(ptr nocapture noundef readonly %0, ptr noundef %1) unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 20
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = icmp eq ptr %6, null
  br i1 %7, label %90, label %8

8:                                                ; preds = %2
  %9 = load ptr, ptr %6, align 8, !tbaa !74
  %10 = icmp eq ptr %9, null
  br i1 %10, label %90, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.sorted_fields_type, ptr %9, i64 0, i32 1
  %13 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 1
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = load i32, ptr %9, align 8, !tbaa !76
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %77

17:                                               ; preds = %11, %71
  %18 = phi i32 [ %75, %71 ], [ %15, %11 ]
  %19 = phi i32 [ %74, %71 ], [ 0, %11 ]
  %20 = phi i32 [ %73, %71 ], [ %15, %11 ]
  br label %24

21:                                               ; preds = %65
  %22 = sub nsw i32 %20, %66
  %23 = icmp sgt i32 %22, 1
  br i1 %23, label %24, label %77, !llvm.loop !78

24:                                               ; preds = %17, %21
  %25 = phi i32 [ %18, %17 ], [ %22, %21 ]
  %26 = phi i32 [ %19, %17 ], [ %66, %21 ]
  %27 = add nuw nsw i32 %25, 1
  %28 = lshr i32 %27, 1
  %29 = add nsw i32 %28, %26
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds ptr, ptr %12, i64 %30
  %32 = load ptr, ptr %31, align 8, !tbaa !6
  %33 = getelementptr inbounds %struct.tree_decl_minimal, ptr %32, i64 0, i32 3
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %69

36:                                               ; preds = %24
  %37 = sext i32 %26 to i64
  %38 = getelementptr inbounds ptr, ptr %12, i64 %37
  %39 = load ptr, ptr %38, align 8, !tbaa !6
  %40 = getelementptr inbounds %struct.tree_decl_minimal, ptr %39, i64 0, i32 3
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %65

43:                                               ; preds = %36, %57
  %44 = phi i64 [ %46, %57 ], [ %37, %36 ]
  %45 = phi ptr [ %59, %57 ], [ %39, %36 ]
  %46 = add i64 %44, 1
  %47 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = and i64 %49, 65534
  %51 = icmp eq i64 %50, 16
  br i1 %51, label %52, label %57

52:                                               ; preds = %43
  %53 = tail call fastcc ptr @lookup_field(ptr noundef nonnull %45, ptr noundef %1)
  %54 = icmp eq ptr %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %52
  %56 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef nonnull %45, ptr noundef nonnull %53) #20
  br label %122

57:                                               ; preds = %52, %43
  %58 = getelementptr inbounds ptr, ptr %12, i64 %46
  %59 = load ptr, ptr %58, align 8, !tbaa !6
  %60 = getelementptr inbounds %struct.tree_decl_minimal, ptr %59, i64 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = icmp eq ptr %61, null
  br i1 %62, label %43, label %63, !llvm.loop !79

63:                                               ; preds = %57
  %64 = trunc i64 %46 to i32
  br label %65

65:                                               ; preds = %63, %36
  %66 = phi i32 [ %26, %36 ], [ %64, %63 ]
  %67 = phi ptr [ %32, %36 ], [ %45, %63 ]
  %68 = icmp sgt i32 %66, %20
  br i1 %68, label %122, label %21, !llvm.loop !78

69:                                               ; preds = %24
  %70 = icmp eq ptr %34, %1
  br i1 %70, label %77, label %71

71:                                               ; preds = %69
  %72 = icmp ult ptr %34, %1
  %73 = select i1 %72, i32 %20, i32 %29
  %74 = select i1 %72, i32 %29, i32 %26
  %75 = sub nsw i32 %73, %74
  %76 = icmp sgt i32 %75, 1
  br i1 %76, label %17, label %77, !llvm.loop !78

77:                                               ; preds = %69, %71, %21, %11
  %78 = phi i32 [ 0, %11 ], [ %66, %21 ], [ %74, %71 ], [ %26, %69 ]
  %79 = phi ptr [ %14, %11 ], [ %67, %21 ], [ %32, %71 ], [ %32, %69 ]
  %80 = sext i32 %78 to i64
  %81 = getelementptr inbounds ptr, ptr %12, i64 %80
  %82 = load ptr, ptr %81, align 8, !tbaa !6
  %83 = getelementptr inbounds %struct.tree_decl_minimal, ptr %82, i64 0, i32 3
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  %85 = icmp eq ptr %84, %1
  br i1 %85, label %119, label %86

86:                                               ; preds = %77
  %87 = getelementptr inbounds %struct.tree_decl_minimal, ptr %79, i64 0, i32 3
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = icmp eq ptr %88, %1
  br i1 %89, label %119, label %122

90:                                               ; preds = %8, %2
  %91 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 1
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = icmp eq ptr %92, null
  br i1 %93, label %122, label %94

94:                                               ; preds = %90, %115
  %95 = phi ptr [ %117, %115 ], [ %92, %90 ]
  %96 = getelementptr inbounds %struct.tree_decl_minimal, ptr %95, i64 0, i32 3
  %97 = load ptr, ptr %96, align 8, !tbaa !17
  %98 = icmp eq ptr %97, null
  br i1 %98, label %99, label %112

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.tree_common, ptr %95, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8, !tbaa !17
  %102 = load i64, ptr %101, align 8
  %103 = and i64 %102, 65534
  %104 = icmp eq i64 %103, 16
  br i1 %104, label %105, label %112

105:                                              ; preds = %99
  %106 = tail call fastcc ptr @lookup_field(ptr noundef nonnull %95, ptr noundef %1)
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %110

108:                                              ; preds = %105
  %109 = load ptr, ptr %96, align 8, !tbaa !17
  br label %112

110:                                              ; preds = %105
  %111 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef nonnull %95, ptr noundef nonnull %106) #20
  br label %122

112:                                              ; preds = %108, %99, %94
  %113 = phi ptr [ %109, %108 ], [ null, %99 ], [ %97, %94 ]
  %114 = icmp eq ptr %113, %1
  br i1 %114, label %119, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %struct.tree_common, ptr %95, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = icmp eq ptr %117, null
  br i1 %118, label %122, label %94, !llvm.loop !80

119:                                              ; preds = %112, %77, %86
  %120 = phi ptr [ %79, %86 ], [ %82, %77 ], [ %95, %112 ]
  %121 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef nonnull %120, ptr noundef null) #20
  br label %122

122:                                              ; preds = %65, %115, %90, %86, %55, %110, %119
  %123 = phi ptr [ %121, %119 ], [ %111, %110 ], [ null, %86 ], [ %56, %55 ], [ null, %90 ], [ null, %115 ], [ null, %65 ]
  ret ptr %123
}

declare void @error_at(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare ptr @build3_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @warn_deprecated_use(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_indirect_ref(i32 noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @default_conversion(ptr noundef %1)
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 10
  %10 = load i64, ptr %4, align 8
  br i1 %9, label %11, label %88

11:                                               ; preds = %3
  %12 = trunc i64 %10 to i16
  switch i16 %12, label %13 [
    i16 116, label %19
    i16 113, label %19
  ]

13:                                               ; preds = %11
  %14 = and i64 %10, 65535
  %15 = icmp eq i64 %14, 118
  %16 = load i32, ptr @warn_strict_aliasing, align 4
  %17 = icmp sgt i32 %16, 2
  %18 = select i1 %15, i1 %17, i1 false
  br i1 %18, label %22, label %32

19:                                               ; preds = %11, %11
  %20 = load i32, ptr @warn_strict_aliasing, align 4, !tbaa !21
  %21 = icmp sgt i32 %20, 2
  br i1 %21, label %22, label %32

22:                                               ; preds = %13, %19
  %23 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = getelementptr inbounds %struct.tree_common, ptr %24, i64 0, i32 2
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = tail call zeroext i8 @strict_aliasing_warning(ptr noundef %26, ptr noundef nonnull %6, ptr noundef %24) #20
  %28 = icmp eq i8 %27, 0
  %29 = load i64, ptr %4, align 8
  br i1 %28, label %32, label %30

30:                                               ; preds = %22
  %31 = or i64 %29, 8388608
  store i64 %31, ptr %4, align 8
  br label %32

32:                                               ; preds = %19, %30, %22, %13
  %33 = phi i64 [ %10, %19 ], [ %31, %30 ], [ %29, %22 ], [ %10, %13 ]
  %34 = and i64 %33, 65535
  %35 = icmp eq i64 %34, 121
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  br label %48

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = getelementptr inbounds %struct.tree_common, ptr %41, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = icmp eq ptr %43, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %39
  tail call void @protected_set_expr_location(ptr noundef nonnull %41, i32 noundef %0) #20
  br label %98

48:                                               ; preds = %36, %39
  %49 = phi ptr [ %38, %36 ], [ %45, %39 ]
  %50 = tail call ptr @build1_stat(i32 noundef 47, ptr noundef %49, ptr noundef nonnull %4) #20
  %51 = getelementptr inbounds %struct.tree_type, ptr %49, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = icmp eq ptr %52, null
  %54 = load i64, ptr %49, align 8
  br i1 %53, label %55, label %59

55:                                               ; preds = %48
  %56 = trunc i64 %54 to i16
  switch i16 %56, label %57 [
    i16 19, label %59
    i16 15, label %59
  ]

57:                                               ; preds = %55
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.20) #20
  %58 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %98

59:                                               ; preds = %55, %55, %48
  %60 = and i64 %54, 65535
  %61 = icmp eq i64 %60, 19
  %62 = load i32, ptr @c_inhibit_evaluation_warnings, align 4
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %61, i1 %63, i1 false
  br i1 %64, label %65, label %68

65:                                               ; preds = %59
  %66 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.21) #20
  %67 = load i64, ptr %49, align 8
  br label %68

68:                                               ; preds = %65, %59
  %69 = phi i64 [ %67, %65 ], [ %54, %59 ]
  %70 = and i64 %69, 1048576
  %71 = load i64, ptr %50, align 8
  %72 = and i64 %71, -1048577
  %73 = or i64 %72, %70
  store i64 %73, ptr %50, align 8
  %74 = load i64, ptr %49, align 8
  %75 = and i64 %74, 524288
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %68
  %78 = load i64, ptr %4, align 8
  %79 = and i64 %78, 65536
  br label %80

80:                                               ; preds = %77, %68
  %81 = phi i64 [ 65536, %68 ], [ %79, %77 ]
  %82 = and i64 %73, -65537
  %83 = or i64 %81, %82
  store i64 %83, ptr %50, align 8
  %84 = load i64, ptr %49, align 8
  %85 = and i64 %84, 524288
  %86 = and i64 %83, -524289
  %87 = or i64 %85, %86
  store i64 %87, ptr %50, align 8
  tail call void @protected_set_expr_location(ptr noundef nonnull %50, i32 noundef %0) #20
  br label %98

88:                                               ; preds = %3
  %89 = and i64 %10, 65535
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %96, label %91

91:                                               ; preds = %88
  switch i32 %2, label %95 [
    i32 1, label %92
    i32 2, label %93
    i32 3, label %94
  ]

92:                                               ; preds = %91
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.22, ptr noundef nonnull %6) #20
  br label %96

93:                                               ; preds = %91
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.23, ptr noundef nonnull %6) #20
  br label %96

94:                                               ; preds = %91
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.24, ptr noundef nonnull %6) #20
  br label %96

95:                                               ; preds = %91
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 2189, ptr noundef nonnull @.str.8) #20
  br label %96

96:                                               ; preds = %88, %95, %94, %93, %92
  %97 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %98

98:                                               ; preds = %57, %80, %96, %47
  %99 = phi ptr [ %41, %47 ], [ %97, %96 ], [ %50, %80 ], [ %58, %57 ]
  ret ptr %99
}

declare zeroext i8 @strict_aliasing_warning(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @protected_set_expr_location(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @build1_stat(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @warning_at(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_array_ref(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %7 = icmp eq ptr %5, %6
  br i1 %7, label %195, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = icmp eq ptr %10, %6
  br i1 %11, label %195, label %12

12:                                               ; preds = %8
  %13 = load i64, ptr %5, align 8
  %14 = trunc i64 %13 to i16
  switch i16 %14, label %15 [
    i16 15, label %20
    i16 10, label %20
  ]

15:                                               ; preds = %12
  %16 = load i64, ptr %10, align 8
  %17 = trunc i64 %16 to i16
  switch i16 %17, label %18 [
    i16 15, label %20
    i16 10, label %20
  ]

18:                                               ; preds = %15
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.25) #20
  %19 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %195

20:                                               ; preds = %15, %15, %12, %12
  %21 = phi i1 [ true, %12 ], [ true, %12 ], [ false, %15 ], [ false, %15 ]
  %22 = phi ptr [ %2, %12 ], [ %2, %12 ], [ %1, %15 ], [ %1, %15 ]
  %23 = phi ptr [ %1, %12 ], [ %1, %12 ], [ %2, %15 ], [ %2, %15 ]
  %24 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = load i64, ptr %25, align 8
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 65535
  %29 = add nsw i32 %28, -6
  %30 = icmp ult i32 %29, 3
  br i1 %30, label %33, label %31

31:                                               ; preds = %20
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.26) #20
  %32 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %195

33:                                               ; preds = %20
  %34 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = getelementptr inbounds %struct.tree_common, ptr %35, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  %38 = load i64, ptr %37, align 8
  %39 = and i64 %38, 65535
  %40 = icmp eq i64 %39, 20
  br i1 %40, label %41, label %43

41:                                               ; preds = %33
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.27) #20
  %42 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %195

43:                                               ; preds = %33
  br i1 %21, label %44, label %45

44:                                               ; preds = %43
  tail call void @warn_array_subscript_with_type_char(ptr noundef nonnull %22) #20
  br label %45

45:                                               ; preds = %44, %43
  %46 = tail call ptr @default_conversion(ptr noundef nonnull %22)
  %47 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = and i64 %49, 65535
  %51 = icmp eq i64 %50, 8
  br i1 %51, label %53, label %52

52:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 2250, ptr noundef nonnull @.str.8) #20
  br label %53

53:                                               ; preds = %45, %52
  %54 = load ptr, ptr %34, align 8, !tbaa !17
  %55 = load i64, ptr %54, align 8
  %56 = and i64 %55, 65535
  %57 = icmp eq i64 %56, 15
  br i1 %57, label %58, label %172

58:                                               ; preds = %53
  %59 = load i64, ptr %46, align 8
  %60 = and i64 %59, 65535
  %61 = icmp eq i64 %60, 23
  br i1 %61, label %62, label %72

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.tree_common, ptr %54, i64 0, i32 2
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = getelementptr inbounds %struct.tree_type, ptr %64, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  %67 = icmp eq ptr %66, null
  br i1 %67, label %79, label %68

68:                                               ; preds = %62
  %69 = load i64, ptr %66, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 23
  br i1 %71, label %79, label %72

72:                                               ; preds = %68, %58
  %73 = tail call zeroext i8 @c_mark_addressable(ptr noundef nonnull %23), !range !70
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = load i64, ptr %46, align 8
  br label %79

77:                                               ; preds = %72
  %78 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %195

79:                                               ; preds = %75, %68, %62
  %80 = phi i64 [ %76, %75 ], [ %59, %68 ], [ %59, %62 ]
  %81 = and i64 %80, 65535
  %82 = icmp eq i64 %81, 23
  br i1 %82, label %83, label %96

83:                                               ; preds = %79
  %84 = load ptr, ptr %34, align 8, !tbaa !17
  %85 = getelementptr inbounds %struct.tree_type, ptr %84, i64 0, i32 1
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = icmp eq ptr %86, null
  br i1 %87, label %96, label %88

88:                                               ; preds = %83
  %89 = tail call i32 @int_fits_type_p(ptr noundef nonnull %46, ptr noundef nonnull %86) #20
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %96

91:                                               ; preds = %88
  %92 = tail call zeroext i8 @c_mark_addressable(ptr noundef nonnull %23), !range !70
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %195

96:                                               ; preds = %91, %88, %83, %79
  %97 = load i32, ptr @pedantic, align 4, !tbaa !21
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %120, label %99

99:                                               ; preds = %96, %103
  %100 = phi ptr [ %105, %103 ], [ %23, %96 ]
  %101 = load i64, ptr %100, align 8
  %102 = trunc i64 %101 to i16
  switch i16 %102, label %111 [
    i16 41, label %103
    i16 32, label %106
  ]

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.tree_exp, ptr %100, i64 0, i32 3
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  br label %99, !llvm.loop !81

106:                                              ; preds = %99
  %107 = getelementptr inbounds %struct.tree_decl_common, ptr %100, i64 0, i32 2
  %108 = load i64, ptr %107, align 8
  %109 = and i64 %108, 524288
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %117

111:                                              ; preds = %99, %106
  %112 = load i32, ptr @flag_isoc99, align 4, !tbaa !21
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %111
  %115 = tail call zeroext i8 @lvalue_p(ptr noundef nonnull %100), !range !70
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %114, %106
  %118 = phi ptr [ @.str.28, %106 ], [ @.str.29, %114 ]
  %119 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull %118) #20
  br label %120

120:                                              ; preds = %117, %114, %111, %96
  %121 = load ptr, ptr %34, align 8, !tbaa !17
  %122 = getelementptr inbounds %struct.tree_common, ptr %121, i64 0, i32 2
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  %124 = tail call ptr @build4_stat(i32 noundef 45, ptr noundef %123, ptr noundef %23, ptr noundef nonnull %46, ptr noundef null, ptr noundef null) #20
  %125 = load ptr, ptr %34, align 8, !tbaa !17
  %126 = getelementptr inbounds %struct.tree_common, ptr %125, i64 0, i32 2
  %127 = load ptr, ptr %126, align 8, !tbaa !17
  %128 = load i64, ptr %127, align 8
  %129 = load i64, ptr %23, align 8
  %130 = or i64 %129, %128
  %131 = load i64, ptr %124, align 8
  %132 = and i64 %130, 1048576
  %133 = or i64 %132, %131
  store i64 %133, ptr %124, align 8
  %134 = load ptr, ptr %34, align 8, !tbaa !17
  %135 = getelementptr inbounds %struct.tree_common, ptr %134, i64 0, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !17
  %137 = load i64, ptr %136, align 8
  %138 = trunc i64 %137 to i32
  %139 = load i64, ptr %23, align 8
  %140 = lshr i32 %138, 3
  %141 = or i64 %139, %131
  %142 = trunc i64 %141 to i32
  %143 = or i32 %140, %142
  %144 = and i32 %143, 65536
  %145 = zext i32 %144 to i64
  %146 = and i64 %133, -65537
  %147 = or i64 %146, %145
  store i64 %147, ptr %124, align 8
  %148 = load ptr, ptr %34, align 8, !tbaa !17
  %149 = getelementptr inbounds %struct.tree_common, ptr %148, i64 0, i32 2
  %150 = load ptr, ptr %149, align 8, !tbaa !17
  %151 = load i64, ptr %150, align 8
  %152 = load i64, ptr %23, align 8
  %153 = or i64 %151, %152
  %154 = or i64 %153, %131
  %155 = and i64 %154, 524288
  %156 = and i64 %147, -524289
  %157 = or i64 %155, %156
  store i64 %157, ptr %124, align 8
  %158 = getelementptr inbounds %struct.tree_common, ptr %124, i64 0, i32 2
  %159 = load ptr, ptr %158, align 8, !tbaa !17
  %160 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %161 = icmp eq ptr %160, %124
  %162 = icmp eq ptr %159, %160
  %163 = select i1 %161, i1 true, i1 %162
  br i1 %163, label %170, label %164

164:                                              ; preds = %120
  %165 = getelementptr inbounds %struct.tree_type, ptr %159, i64 0, i32 2
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  %167 = icmp eq ptr %166, null
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  tail call void @c_incomplete_type_error(ptr noundef nonnull %124, ptr noundef nonnull %159)
  %169 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %170

170:                                              ; preds = %120, %164, %168
  %171 = phi ptr [ %169, %168 ], [ %124, %164 ], [ %160, %120 ]
  tail call void @protected_set_expr_location(ptr noundef %171, i32 noundef %0) #20
  br label %195

172:                                              ; preds = %53
  %173 = tail call ptr @default_conversion(ptr noundef nonnull %23)
  %174 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %175 = icmp eq ptr %173, %174
  br i1 %175, label %195, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.tree_common, ptr %173, i64 0, i32 2
  %178 = load ptr, ptr %177, align 8, !tbaa !17
  %179 = load i64, ptr %178, align 8
  %180 = and i64 %179, 65535
  %181 = icmp eq i64 %180, 10
  br i1 %181, label %184, label %182

182:                                              ; preds = %176
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 2320, ptr noundef nonnull @.str.8) #20
  %183 = load ptr, ptr %177, align 8, !tbaa !17
  br label %184

184:                                              ; preds = %176, %182
  %185 = phi ptr [ %178, %176 ], [ %183, %182 ]
  %186 = getelementptr inbounds %struct.tree_common, ptr %185, i64 0, i32 2
  %187 = load ptr, ptr %186, align 8, !tbaa !17
  %188 = load i64, ptr %187, align 8
  %189 = and i64 %188, 65535
  %190 = icmp eq i64 %189, 20
  br i1 %190, label %191, label %192

191:                                              ; preds = %184
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 2321, ptr noundef nonnull @.str.8) #20
  br label %192

192:                                              ; preds = %184, %191
  %193 = tail call ptr @build_binary_op(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %173, ptr noundef nonnull %46, i32 noundef 0)
  %194 = tail call ptr @build_indirect_ref(i32 noundef %0, ptr noundef %193, i32 noundef 1)
  br label %195

195:                                              ; preds = %18, %3, %8, %192, %172, %77, %94, %170, %41, %31
  %196 = phi ptr [ %42, %41 ], [ %32, %31 ], [ %19, %18 ], [ %171, %170 ], [ %95, %94 ], [ %78, %77 ], [ %194, %192 ], [ %173, %172 ], [ %6, %8 ], [ %5, %3 ]
  ret ptr %196
}

declare void @warn_array_subscript_with_type_char(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @c_mark_addressable(ptr noundef %0) local_unnamed_addr #9 {
  br label %2

2:                                                ; preds = %14, %1
  %3 = phi ptr [ %0, %1 ], [ %16, %14 ]
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %47 [
    i16 41, label %6
    i16 121, label %14
    i16 45, label %14
    i16 43, label %14
    i16 44, label %14
    i16 119, label %17
    i16 51, label %17
    i16 32, label %19
    i16 33, label %19
    i16 34, label %19
    i16 36, label %19
    i16 29, label %44
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = getelementptr inbounds %struct.tree_decl_common, ptr %8, i64 0, i32 2
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 524288
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %6
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.134, ptr noundef nonnull %8) #20
  br label %47

14:                                               ; preds = %6, %2, %2, %2, %2
  %15 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  br label %2

17:                                               ; preds = %2, %2
  %18 = or i64 %4, 262144
  store i64 %18, ptr %3, align 8
  br label %47

19:                                               ; preds = %2, %2, %2, %2
  %20 = getelementptr inbounds %struct.tree_decl_common, ptr %3, i64 0, i32 2
  %21 = load i64, ptr %20, align 8
  %22 = and i64 %21, 524544
  %23 = icmp eq i64 %22, 524544
  br i1 %23, label %24, label %34

24:                                               ; preds = %19
  %25 = and i64 %4, 201326592
  %26 = and i64 %21, 33554432
  %27 = or i64 %26, %25
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.135, ptr noundef nonnull %3) #20
  br label %47

30:                                               ; preds = %24
  %31 = load i32, ptr @input_location, align 4, !tbaa !21
  %32 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %31, i32 noundef 0, ptr noundef nonnull @.str.136, ptr noundef nonnull %3) #20
  %33 = load i64, ptr %3, align 8
  br label %44

34:                                               ; preds = %19
  %35 = and i64 %21, 524288
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %34
  %38 = and i64 %4, 201326592
  %39 = and i64 %21, 33554432
  %40 = or i64 %39, %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.137, ptr noundef nonnull %3) #20
  br label %47

43:                                               ; preds = %37
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.138, ptr noundef nonnull %3) #20
  br label %47

44:                                               ; preds = %2, %30, %34
  %45 = phi i64 [ %33, %30 ], [ %4, %34 ], [ %4, %2 ]
  %46 = or i64 %45, 262144
  store i64 %46, ptr %3, align 8
  br label %47

47:                                               ; preds = %2, %44, %42, %43, %29, %17, %13
  %48 = phi i8 [ 0, %29 ], [ 1, %17 ], [ 0, %13 ], [ 0, %43 ], [ 0, %42 ], [ 1, %44 ], [ 1, %2 ]
  ret i8 %48
}

declare i32 @int_fits_type_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build4_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_binary_op(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, i32 noundef %4) local_unnamed_addr #9 {
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = icmp eq i32 %0, 0
  %14 = load i32, ptr @input_location, align 4
  %15 = select i1 %13, i32 %14, i32 %0
  %16 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = load i64, ptr %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  %21 = add nsw i32 %20, -6
  %22 = icmp ult i32 %21, 3
  br i1 %22, label %23, label %35

23:                                               ; preds = %5
  %24 = load i64, ptr %2, align 8
  %25 = trunc i64 %24 to i16
  switch i16 %25, label %35 [
    i16 23, label %29
    i16 189, label %26
  ]

26:                                               ; preds = %23
  %27 = and i64 %24, 8589934592
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %23, %26
  %30 = and i64 %24, 65535
  %31 = icmp eq i64 %30, 189
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  br label %35

35:                                               ; preds = %23, %5, %32, %29, %26
  %36 = phi i1 [ false, %26 ], [ true, %29 ], [ true, %32 ], [ false, %5 ], [ false, %23 ]
  %37 = phi ptr [ %2, %26 ], [ %2, %29 ], [ %34, %32 ], [ %2, %5 ], [ %2, %23 ]
  %38 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = load i64, ptr %39, align 8
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 65535
  %43 = add nsw i32 %42, -6
  %44 = icmp ult i32 %43, 3
  br i1 %44, label %45, label %75

45:                                               ; preds = %35
  %46 = load i64, ptr %3, align 8
  %47 = trunc i64 %46 to i16
  switch i16 %47, label %75 [
    i16 23, label %51
    i16 189, label %48
  ]

48:                                               ; preds = %45
  %49 = and i64 %46, 8589934592
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %75, label %51

51:                                               ; preds = %45, %48
  %52 = and i64 %46, 65535
  %53 = icmp eq i64 %52, 189
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  br label %57

57:                                               ; preds = %54, %51
  %58 = phi ptr [ %56, %54 ], [ %3, %51 ]
  br i1 %36, label %59, label %75

59:                                               ; preds = %57
  %60 = load i64, ptr %2, align 8
  %61 = and i64 %60, 65535
  %62 = icmp eq i64 %61, 23
  %63 = icmp eq i64 %52, 23
  %64 = and i1 %62, %63
  br i1 %64, label %65, label %71

65:                                               ; preds = %59
  %66 = and i64 %60, 134217728
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %65
  %69 = and i64 %46, 134217728
  %70 = icmp eq i64 %69, 0
  br label %71

71:                                               ; preds = %59, %68, %65
  %72 = phi i8 [ 1, %65 ], [ 1, %68 ], [ 0, %59 ]
  %73 = phi i1 [ false, %65 ], [ %70, %68 ], [ false, %59 ]
  %74 = zext i1 %73 to i8
  br label %75

75:                                               ; preds = %45, %35, %48, %57, %71
  %76 = phi i1 [ true, %71 ], [ false, %57 ], [ false, %48 ], [ false, %35 ], [ false, %45 ]
  %77 = phi ptr [ %58, %71 ], [ %58, %57 ], [ %3, %48 ], [ %3, %35 ], [ %3, %45 ]
  %78 = phi i8 [ %72, %71 ], [ 0, %57 ], [ 0, %48 ], [ 0, %35 ], [ 0, %45 ]
  %79 = phi i8 [ %74, %71 ], [ 0, %57 ], [ 0, %48 ], [ 0, %35 ], [ 0, %45 ]
  %80 = icmp eq i32 %4, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %75
  %82 = tail call ptr @default_conversion(ptr noundef %37)
  %83 = tail call ptr @default_conversion(ptr noundef %77)
  br label %84

84:                                               ; preds = %81, %75
  %85 = phi ptr [ %83, %81 ], [ %77, %75 ]
  %86 = phi ptr [ %82, %81 ], [ %37, %75 ]
  %87 = getelementptr inbounds %struct.tree_common, ptr %86, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = getelementptr inbounds %struct.tree_common, ptr %85, i64 0, i32 2
  %90 = load ptr, ptr %89, align 8, !tbaa !17
  %91 = load i64, ptr %88, align 8
  %92 = freeze i64 %91
  %93 = trunc i64 %92 to i32
  %94 = and i32 %93, 65535
  %95 = load i64, ptr %90, align 8
  %96 = freeze i64 %95
  %97 = trunc i64 %96 to i32
  %98 = and i32 %97, 65535
  %99 = load ptr, ptr @global_trees, align 16
  br label %100

100:                                              ; preds = %108, %84
  %101 = phi ptr [ %86, %84 ], [ %106, %108 ]
  %102 = load i64, ptr %101, align 8
  %103 = trunc i64 %102 to i16
  switch i16 %103, label %112 [
    i16 116, label %104
    i16 113, label %104
    i16 117, label %104
  ]

104:                                              ; preds = %100, %100, %100
  %105 = getelementptr inbounds %struct.tree_exp, ptr %101, i64 0, i32 3
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = icmp eq ptr %106, %99
  br i1 %107, label %112, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.tree_common, ptr %106, i64 0, i32 2
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = icmp eq ptr %88, %110
  br i1 %111, label %100, label %112, !llvm.loop !82

112:                                              ; preds = %100, %104, %108
  br label %113

113:                                              ; preds = %112, %121
  %114 = phi ptr [ %119, %121 ], [ %85, %112 ]
  %115 = load i64, ptr %114, align 8
  %116 = trunc i64 %115 to i16
  switch i16 %116, label %125 [
    i16 116, label %117
    i16 113, label %117
    i16 117, label %117
  ]

117:                                              ; preds = %113, %113, %113
  %118 = getelementptr inbounds %struct.tree_exp, ptr %114, i64 0, i32 3
  %119 = load ptr, ptr %118, align 8, !tbaa !17
  %120 = icmp eq ptr %119, %99
  br i1 %120, label %125, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %struct.tree_common, ptr %119, i64 0, i32 2
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  %124 = icmp eq ptr %90, %123
  br i1 %124, label %113, label %125, !llvm.loop !83

125:                                              ; preds = %113, %117, %121
  %126 = icmp eq i32 %94, 0
  %127 = icmp eq i32 %98, 0
  %128 = or i1 %126, %127
  br i1 %128, label %1228, label %129

129:                                              ; preds = %125
  %130 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 91), align 8, !tbaa !84
  %131 = tail call ptr %130(i32 noundef %1, ptr noundef nonnull %88, ptr noundef nonnull %90) #20
  %132 = icmp eq ptr %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %129
  tail call void (i32, ptr, ...) @error_at(i32 noundef %15, ptr noundef nonnull %131) #20
  %134 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

135:                                              ; preds = %129
  switch i32 %1, label %140 [
    i32 63, label %136
    i32 64, label %136
    i32 65, label %136
    i32 67, label %136
    i32 68, label %136
    i32 69, label %136
    i32 70, label %136
    i32 76, label %136
  ]

136:                                              ; preds = %135, %135, %135, %135, %135, %135, %135, %135
  %137 = load i64, ptr %101, align 8
  %138 = and i64 %137, 65535
  %139 = icmp eq i64 %138, 190
  br i1 %139, label %144, label %151

140:                                              ; preds = %135
  %141 = load i64, ptr %101, align 8
  %142 = and i64 %141, 65535
  %143 = icmp eq i64 %142, 190
  br i1 %143, label %144, label %164

144:                                              ; preds = %140, %136
  %145 = phi i1 [ false, %140 ], [ true, %136 ]
  %146 = phi i1 [ true, %140 ], [ false, %136 ]
  %147 = getelementptr inbounds %struct.tree_exp, ptr %101, i64 0, i32 3
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = getelementptr inbounds %struct.tree_common, ptr %148, i64 0, i32 2
  %150 = load ptr, ptr %149, align 8, !tbaa !17
  br label %156

151:                                              ; preds = %136
  %152 = tail call ptr @excess_precision_type(ptr noundef nonnull %88) #20
  %153 = icmp eq ptr %152, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %151
  %155 = tail call ptr @convert(ptr noundef nonnull %152, ptr noundef nonnull %101) #20
  br label %156

156:                                              ; preds = %151, %154, %144
  %157 = phi i1 [ %145, %144 ], [ true, %154 ], [ true, %151 ]
  %158 = phi i1 [ %146, %144 ], [ false, %154 ], [ false, %151 ]
  %159 = phi ptr [ %148, %144 ], [ %155, %154 ], [ %101, %151 ]
  %160 = phi ptr [ %150, %144 ], [ %152, %154 ], [ %88, %151 ]
  %161 = load i64, ptr %114, align 8
  %162 = and i64 %161, 65535
  %163 = icmp eq i64 %162, 190
  br i1 %163, label %168, label %176

164:                                              ; preds = %140
  %165 = load i64, ptr %114, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 190
  br i1 %167, label %168, label %182

168:                                              ; preds = %164, %156
  %169 = phi ptr [ %88, %164 ], [ %160, %156 ]
  %170 = phi ptr [ %101, %164 ], [ %159, %156 ]
  %171 = phi i1 [ false, %164 ], [ %157, %156 ]
  %172 = getelementptr inbounds %struct.tree_exp, ptr %114, i64 0, i32 3
  %173 = load ptr, ptr %172, align 8, !tbaa !17
  %174 = getelementptr inbounds %struct.tree_common, ptr %173, i64 0, i32 2
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  br label %182

176:                                              ; preds = %156
  br i1 %158, label %182, label %177

177:                                              ; preds = %176
  %178 = tail call ptr @excess_precision_type(ptr noundef nonnull %90) #20
  %179 = icmp eq ptr %178, null
  br i1 %179, label %182, label %180

180:                                              ; preds = %177
  %181 = tail call ptr @convert(ptr noundef nonnull %178, ptr noundef nonnull %114) #20
  br label %182

182:                                              ; preds = %164, %176, %177, %180, %168
  %183 = phi ptr [ %169, %168 ], [ %160, %180 ], [ %160, %177 ], [ %160, %176 ], [ %88, %164 ]
  %184 = phi ptr [ %170, %168 ], [ %159, %180 ], [ %159, %177 ], [ %159, %176 ], [ %101, %164 ]
  %185 = phi i1 [ %171, %168 ], [ %157, %180 ], [ %157, %177 ], [ %157, %176 ], [ false, %164 ]
  %186 = phi ptr [ %173, %168 ], [ %181, %180 ], [ %114, %177 ], [ %114, %176 ], [ %114, %164 ]
  %187 = phi ptr [ %175, %168 ], [ %178, %180 ], [ %90, %177 ], [ %90, %176 ], [ %90, %164 ]
  %188 = tail call zeroext i8 @objc_compare_types(ptr noundef %183, ptr noundef %187, i32 noundef -3, ptr noundef null) #20
  switch i32 %1, label %745 [
    i32 63, label %189
    i32 64, label %201
    i32 65, label %746
    i32 67, label %219
    i32 68, label %219
    i32 69, label %219
    i32 70, label %219
    i32 76, label %219
    i32 89, label %278
    i32 87, label %278
    i32 88, label %278
    i32 71, label %307
    i32 73, label %307
    i32 91, label %343
    i32 92, label %343
    i32 93, label %343
    i32 94, label %343
    i32 95, label %343
    i32 84, label %420
    i32 83, label %463
    i32 101, label %502
    i32 102, label %502
    i32 98, label %649
    i32 100, label %649
    i32 97, label %649
    i32 99, label %649
  ]

189:                                              ; preds = %182
  %190 = icmp eq i32 %94, 10
  %191 = icmp eq i32 %98, 8
  %192 = and i1 %190, %191
  br i1 %192, label %193, label %195

193:                                              ; preds = %189
  %194 = tail call ptr @pointer_int_sum(i32 noundef %15, i32 noundef 63, ptr noundef %184, ptr noundef %186) #20
  br label %1188

195:                                              ; preds = %189
  %196 = icmp eq i32 %98, 10
  %197 = icmp eq i32 %94, 8
  %198 = and i1 %196, %197
  br i1 %198, label %199, label %746

199:                                              ; preds = %195
  %200 = tail call ptr @pointer_int_sum(i32 noundef %15, i32 noundef 63, ptr noundef %186, ptr noundef %184) #20
  br label %1188

201:                                              ; preds = %182
  %202 = icmp eq i32 %94, 10
  %203 = icmp eq i32 %98, 10
  %204 = and i1 %202, %203
  br i1 %204, label %205, label %214

205:                                              ; preds = %201
  %206 = getelementptr i8, ptr %183, i64 16
  %207 = load ptr, ptr %206, align 8, !tbaa !17
  %208 = getelementptr i8, ptr %187, i64 16
  %209 = load ptr, ptr %208, align 8, !tbaa !17
  %210 = tail call fastcc i32 @comp_target_types(i32 noundef %15, ptr %207, ptr %209)
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %777, label %212

212:                                              ; preds = %205
  %213 = tail call fastcc ptr @pointer_diff(i32 noundef %15, ptr noundef %184, ptr noundef %186)
  br label %1188

214:                                              ; preds = %201
  %215 = icmp eq i32 %98, 8
  %216 = and i1 %202, %215
  br i1 %216, label %217, label %746

217:                                              ; preds = %214
  %218 = tail call ptr @pointer_int_sum(i32 noundef %15, i32 noundef 64, ptr noundef %184, ptr noundef %186) #20
  br label %1188

219:                                              ; preds = %182, %182, %182, %182, %182
  tail call void @warn_for_div_by_zero(i32 noundef %15, ptr noundef %186) #20
  %220 = and i32 %93, 65534
  %221 = icmp eq i32 %220, 8
  %222 = icmp eq i32 %94, 11
  %223 = or i1 %221, %222
  %224 = add nsw i32 %94, -13
  %225 = icmp ult i32 %224, 2
  %226 = or i1 %223, %225
  br i1 %226, label %227, label %777

227:                                              ; preds = %219
  %228 = and i32 %97, 65534
  %229 = icmp eq i32 %228, 8
  %230 = icmp eq i32 %98, 11
  %231 = or i1 %229, %230
  %232 = add nsw i32 %98, -13
  %233 = icmp ult i32 %232, 2
  %234 = or i1 %231, %233
  br i1 %234, label %235, label %777

235:                                              ; preds = %227
  br i1 %225, label %236, label %244

236:                                              ; preds = %235
  %237 = getelementptr inbounds %struct.tree_common, ptr %184, i64 0, i32 2
  %238 = load ptr, ptr %237, align 8, !tbaa !17
  %239 = getelementptr inbounds %struct.tree_common, ptr %238, i64 0, i32 2
  %240 = load ptr, ptr %239, align 8, !tbaa !17
  %241 = load i64, ptr %240, align 8
  %242 = trunc i64 %241 to i32
  %243 = and i32 %242, 65535
  br label %244

244:                                              ; preds = %235, %236
  %245 = phi i32 [ %243, %236 ], [ %94, %235 ]
  br i1 %233, label %246, label %254

246:                                              ; preds = %244
  %247 = getelementptr inbounds %struct.tree_common, ptr %186, i64 0, i32 2
  %248 = load ptr, ptr %247, align 8, !tbaa !17
  %249 = getelementptr inbounds %struct.tree_common, ptr %248, i64 0, i32 2
  %250 = load ptr, ptr %249, align 8, !tbaa !17
  %251 = load i64, ptr %250, align 8
  %252 = trunc i64 %251 to i32
  %253 = and i32 %252, 65535
  br label %254

254:                                              ; preds = %244, %246
  %255 = phi i32 [ %253, %246 ], [ %98, %244 ]
  %256 = icmp eq i32 %245, 8
  %257 = icmp eq i32 %255, 8
  %258 = select i1 %256, i1 %257, i1 false
  br i1 %258, label %263, label %259

259:                                              ; preds = %254
  %260 = icmp eq i32 %245, 11
  %261 = icmp eq i32 %255, 11
  %262 = select i1 %260, i1 %261, i1 false
  br i1 %262, label %263, label %746

263:                                              ; preds = %259, %254
  %264 = load ptr, ptr %16, align 8, !tbaa !17
  %265 = load i64, ptr %264, align 8
  %266 = and i64 %265, 2097152
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %275

268:                                              ; preds = %263
  %269 = load i64, ptr %186, align 8
  %270 = and i64 %269, 65535
  %271 = icmp eq i64 %270, 23
  br i1 %271, label %272, label %275

272:                                              ; preds = %268
  %273 = tail call i32 @integer_all_onesp(ptr noundef nonnull %186) #20
  %274 = icmp eq i32 %273, 0
  br label %275

275:                                              ; preds = %268, %272, %263
  %276 = phi i1 [ true, %263 ], [ false, %268 ], [ %274, %272 ]
  %277 = zext i1 %276 to i32
  br label %746

278:                                              ; preds = %182, %182, %182
  %279 = icmp eq i32 %94, 8
  %280 = icmp eq i32 %98, 8
  %281 = and i1 %279, %280
  br i1 %281, label %777, label %282

282:                                              ; preds = %278
  %283 = icmp eq i32 %94, 14
  %284 = icmp eq i32 %98, 14
  %285 = and i1 %283, %284
  br i1 %285, label %286, label %746

286:                                              ; preds = %282
  %287 = load i64, ptr %183, align 8
  %288 = and i64 %287, 65535
  %289 = icmp eq i64 %288, 14
  br i1 %289, label %290, label %296

290:                                              ; preds = %286
  %291 = getelementptr inbounds %struct.tree_common, ptr %183, i64 0, i32 2
  %292 = load ptr, ptr %291, align 8, !tbaa !17
  %293 = load i64, ptr %292, align 8
  %294 = and i64 %293, 65535
  %295 = icmp eq i64 %294, 9
  br i1 %295, label %746, label %296

296:                                              ; preds = %290, %286
  %297 = load i64, ptr %187, align 8
  %298 = and i64 %297, 65535
  %299 = icmp eq i64 %298, 14
  br i1 %299, label %300, label %306

300:                                              ; preds = %296
  %301 = getelementptr inbounds %struct.tree_common, ptr %187, i64 0, i32 2
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  %303 = load i64, ptr %302, align 8
  %304 = and i64 %303, 65535
  %305 = icmp eq i64 %304, 9
  br i1 %305, label %746, label %306

306:                                              ; preds = %300, %296
  br label %746

307:                                              ; preds = %182, %182
  tail call void @warn_for_div_by_zero(i32 noundef %15, ptr noundef %186) #20
  %308 = icmp eq i32 %94, 14
  %309 = icmp eq i32 %98, 14
  %310 = and i1 %308, %309
  br i1 %310, label %311, label %324

311:                                              ; preds = %307
  %312 = getelementptr inbounds %struct.tree_common, ptr %183, i64 0, i32 2
  %313 = load ptr, ptr %312, align 8, !tbaa !17
  %314 = load i64, ptr %313, align 8
  %315 = and i64 %314, 65535
  %316 = icmp eq i64 %315, 8
  br i1 %316, label %317, label %323

317:                                              ; preds = %311
  %318 = getelementptr inbounds %struct.tree_common, ptr %187, i64 0, i32 2
  %319 = load ptr, ptr %318, align 8, !tbaa !17
  %320 = load i64, ptr %319, align 8
  %321 = and i64 %320, 65535
  %322 = icmp eq i64 %321, 8
  br i1 %322, label %746, label %323

323:                                              ; preds = %317, %311
  br label %746

324:                                              ; preds = %307
  %325 = icmp eq i32 %94, 8
  %326 = icmp eq i32 %98, 8
  %327 = and i1 %325, %326
  br i1 %327, label %328, label %746

328:                                              ; preds = %324
  %329 = load ptr, ptr %16, align 8, !tbaa !17
  %330 = load i64, ptr %329, align 8
  %331 = and i64 %330, 2097152
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %340

333:                                              ; preds = %328
  %334 = load i64, ptr %186, align 8
  %335 = and i64 %334, 65535
  %336 = icmp eq i64 %335, 23
  br i1 %336, label %337, label %340

337:                                              ; preds = %333
  %338 = tail call i32 @integer_all_onesp(ptr noundef nonnull %186) #20
  %339 = icmp eq i32 %338, 0
  br label %340

340:                                              ; preds = %333, %337, %328
  %341 = phi i1 [ true, %328 ], [ false, %333 ], [ %339, %337 ]
  %342 = zext i1 %341 to i32
  br label %777

343:                                              ; preds = %182, %182, %182, %182, %182
  %344 = and i32 %93, 65533
  %345 = icmp eq i32 %344, 8
  %346 = and i32 %93, 65531
  %347 = icmp eq i32 %346, 9
  %348 = or i1 %345, %347
  %349 = icmp eq i32 %94, 11
  %350 = or i1 %348, %349
  br i1 %350, label %351, label %363

351:                                              ; preds = %343
  %352 = and i32 %97, 65533
  %353 = icmp eq i32 %352, 8
  %354 = and i32 %97, 65531
  %355 = icmp eq i32 %354, 9
  %356 = or i1 %353, %355
  %357 = icmp eq i32 %98, 11
  %358 = or i1 %356, %357
  br i1 %358, label %359, label %363

359:                                              ; preds = %351
  %360 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %361 = tail call ptr @c_common_truthvalue_conversion(i32 noundef %15, ptr noundef %184) #20
  %362 = tail call ptr @c_common_truthvalue_conversion(i32 noundef %15, ptr noundef %186) #20
  br label %363

363:                                              ; preds = %351, %343, %359
  %364 = phi i32 [ 1, %359 ], [ 0, %351 ], [ 0, %343 ]
  %365 = phi ptr [ %360, %359 ], [ null, %351 ], [ null, %343 ]
  %366 = phi ptr [ %362, %359 ], [ %186, %351 ], [ %186, %343 ]
  %367 = phi ptr [ %361, %359 ], [ %184, %351 ], [ %184, %343 ]
  switch i32 %1, label %746 [
    i32 91, label %368
    i32 92, label %394
  ]

368:                                              ; preds = %363
  br i1 %76, label %369, label %390

369:                                              ; preds = %368
  %370 = load i64, ptr %2, align 8
  %371 = and i64 %370, 65535
  %372 = icmp eq i64 %371, 23
  br i1 %372, label %373, label %390

373:                                              ; preds = %369
  %374 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 47), align 8, !tbaa !6
  %375 = icmp eq ptr %367, %374
  br i1 %375, label %380, label %376

376:                                              ; preds = %373
  %377 = load i64, ptr %3, align 8
  %378 = and i64 %377, 65535
  %379 = icmp eq i64 %378, 23
  br i1 %379, label %383, label %390

380:                                              ; preds = %373
  %381 = and i64 %370, 134217728
  %382 = icmp eq i64 %381, 0
  br label %390

383:                                              ; preds = %376
  %384 = and i64 %370, 134217728
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %390

386:                                              ; preds = %383
  %387 = load i64, ptr %3, align 8
  %388 = and i64 %387, 134217728
  %389 = icmp eq i64 %388, 0
  br label %390

390:                                              ; preds = %380, %383, %368, %369, %386, %376
  %391 = phi i8 [ 0, %376 ], [ 1, %386 ], [ 0, %369 ], [ 0, %368 ], [ 1, %383 ], [ 1, %380 ]
  %392 = phi i1 [ false, %376 ], [ %389, %386 ], [ false, %369 ], [ false, %368 ], [ false, %383 ], [ %382, %380 ]
  %393 = zext i1 %392 to i8
  br label %746

394:                                              ; preds = %363
  br i1 %76, label %395, label %416

395:                                              ; preds = %394
  %396 = load i64, ptr %2, align 8
  %397 = and i64 %396, 65535
  %398 = icmp eq i64 %397, 23
  br i1 %398, label %399, label %416

399:                                              ; preds = %395
  %400 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 46), align 16, !tbaa !6
  %401 = icmp eq ptr %367, %400
  br i1 %401, label %406, label %402

402:                                              ; preds = %399
  %403 = load i64, ptr %3, align 8
  %404 = and i64 %403, 65535
  %405 = icmp eq i64 %404, 23
  br i1 %405, label %409, label %416

406:                                              ; preds = %399
  %407 = and i64 %396, 134217728
  %408 = icmp eq i64 %407, 0
  br label %416

409:                                              ; preds = %402
  %410 = and i64 %396, 134217728
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %412, label %416

412:                                              ; preds = %409
  %413 = load i64, ptr %3, align 8
  %414 = and i64 %413, 134217728
  %415 = icmp eq i64 %414, 0
  br label %416

416:                                              ; preds = %406, %409, %394, %395, %412, %402
  %417 = phi i8 [ 0, %402 ], [ 1, %412 ], [ 0, %395 ], [ 0, %394 ], [ 1, %409 ], [ 1, %406 ]
  %418 = phi i1 [ false, %402 ], [ %415, %412 ], [ false, %395 ], [ false, %394 ], [ false, %409 ], [ %408, %406 ]
  %419 = zext i1 %418 to i8
  br label %746

420:                                              ; preds = %182
  %421 = icmp eq i32 %94, 8
  %422 = icmp eq i32 %94, 11
  %423 = or i1 %421, %422
  %424 = icmp eq i32 %98, 8
  %425 = and i1 %423, %424
  br i1 %425, label %426, label %746

426:                                              ; preds = %420
  %427 = load i64, ptr %186, align 8
  %428 = and i64 %427, 65535
  %429 = icmp eq i64 %428, 23
  br i1 %429, label %430, label %452

430:                                              ; preds = %426
  %431 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %186) #20
  %432 = icmp slt i32 %431, 0
  br i1 %432, label %433, label %436

433:                                              ; preds = %430
  %434 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %448, label %452

436:                                              ; preds = %430
  %437 = tail call i32 @integer_zerop(ptr noundef nonnull %186) #20
  %438 = icmp eq i32 %437, 0
  %439 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 6
  %440 = load i32, ptr %439, align 4
  %441 = and i32 %440, 1023
  %442 = zext i32 %441 to i64
  %443 = tail call i32 @compare_tree_int(ptr noundef nonnull %186, i64 noundef %442) #20
  %444 = icmp sgt i32 %443, -1
  br i1 %444, label %445, label %452

445:                                              ; preds = %436
  %446 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %452

448:                                              ; preds = %445, %433
  %449 = phi ptr [ @.str.230, %433 ], [ @.str.231, %445 ]
  %450 = phi i1 [ false, %433 ], [ %438, %445 ]
  %451 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull %449) #20
  br label %452

452:                                              ; preds = %448, %433, %445, %436, %426
  %453 = phi i1 [ false, %433 ], [ %438, %445 ], [ %438, %436 ], [ false, %426 ], [ %450, %448 ]
  %454 = phi i8 [ 0, %433 ], [ 0, %445 ], [ %79, %436 ], [ %79, %426 ], [ 0, %448 ]
  %455 = getelementptr inbounds %struct.tree_common, ptr %186, i64 0, i32 2
  %456 = load ptr, ptr %455, align 8, !tbaa !17
  %457 = getelementptr inbounds %struct.tree_type, ptr %456, i64 0, i32 16
  %458 = load ptr, ptr %457, align 8, !tbaa !17
  %459 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %460 = icmp eq ptr %458, %459
  br i1 %460, label %777, label %461

461:                                              ; preds = %452
  %462 = tail call ptr @convert(ptr noundef %459, ptr noundef nonnull %186) #20
  br label %777

463:                                              ; preds = %182
  %464 = icmp eq i32 %94, 8
  %465 = icmp eq i32 %94, 11
  %466 = or i1 %464, %465
  %467 = icmp eq i32 %98, 8
  %468 = and i1 %466, %467
  br i1 %468, label %469, label %746

469:                                              ; preds = %463
  %470 = load i64, ptr %186, align 8
  %471 = and i64 %470, 65535
  %472 = icmp eq i64 %471, 23
  br i1 %472, label %473, label %492

473:                                              ; preds = %469
  %474 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %186) #20
  %475 = icmp slt i32 %474, 0
  br i1 %475, label %476, label %479

476:                                              ; preds = %473
  %477 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %489, label %492

479:                                              ; preds = %473
  %480 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 6
  %481 = load i32, ptr %480, align 4
  %482 = and i32 %481, 1023
  %483 = zext i32 %482 to i64
  %484 = tail call i32 @compare_tree_int(ptr noundef nonnull %186, i64 noundef %483) #20
  %485 = icmp sgt i32 %484, -1
  br i1 %485, label %486, label %492

486:                                              ; preds = %479
  %487 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %492

489:                                              ; preds = %486, %476
  %490 = phi ptr [ @.str.232, %476 ], [ @.str.233, %486 ]
  %491 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull %490) #20
  br label %492

492:                                              ; preds = %489, %476, %486, %479, %469
  %493 = phi i8 [ 0, %476 ], [ 0, %486 ], [ %79, %479 ], [ %79, %469 ], [ 0, %489 ]
  %494 = getelementptr inbounds %struct.tree_common, ptr %186, i64 0, i32 2
  %495 = load ptr, ptr %494, align 8, !tbaa !17
  %496 = getelementptr inbounds %struct.tree_type, ptr %495, i64 0, i32 16
  %497 = load ptr, ptr %496, align 8, !tbaa !17
  %498 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %499 = icmp eq ptr %497, %498
  br i1 %499, label %777, label %500

500:                                              ; preds = %492
  %501 = tail call ptr @convert(ptr noundef %498, ptr noundef nonnull %186) #20
  br label %777

502:                                              ; preds = %182, %182
  %503 = load i64, ptr %183, align 8
  %504 = trunc i64 %503 to i16
  switch i16 %504, label %511 [
    i16 9, label %520
    i16 13, label %505
    i16 14, label %505
  ]

505:                                              ; preds = %502, %502
  %506 = getelementptr inbounds %struct.tree_common, ptr %183, i64 0, i32 2
  %507 = load ptr, ptr %506, align 8, !tbaa !17
  %508 = load i64, ptr %507, align 8
  %509 = and i64 %508, 65535
  %510 = icmp eq i64 %509, 9
  br i1 %510, label %520, label %511

511:                                              ; preds = %502, %505
  %512 = load i64, ptr %187, align 8
  %513 = trunc i64 %512 to i16
  switch i16 %513, label %522 [
    i16 9, label %520
    i16 13, label %514
    i16 14, label %514
  ]

514:                                              ; preds = %511, %511
  %515 = getelementptr inbounds %struct.tree_common, ptr %187, i64 0, i32 2
  %516 = load ptr, ptr %515, align 8, !tbaa !17
  %517 = load i64, ptr %516, align 8
  %518 = and i64 %517, 65535
  %519 = icmp eq i64 %518, 9
  br i1 %519, label %520, label %522

520:                                              ; preds = %511, %502, %514, %505
  %521 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %15, i32 noundef 89, ptr noundef nonnull @.str.234) #20
  br label %522

522:                                              ; preds = %511, %520, %514
  %523 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %524 = icmp eq i32 %94, 8
  %525 = and i32 %93, 65534
  %526 = icmp eq i32 %525, 8
  br i1 %526, label %529, label %527

527:                                              ; preds = %522
  %528 = trunc i64 %92 to i16
  switch i16 %528, label %534 [
    i16 13, label %529
    i16 11, label %529
  ]

529:                                              ; preds = %527, %527, %522
  %530 = and i32 %97, 65534
  %531 = icmp eq i32 %530, 8
  br i1 %531, label %746, label %532

532:                                              ; preds = %529
  %533 = trunc i64 %96 to i16
  switch i16 %533, label %534 [
    i16 13, label %746
    i16 11, label %746
  ]

534:                                              ; preds = %532, %527
  %535 = icmp eq i32 %94, 10
  %536 = icmp eq i32 %98, 10
  %537 = and i1 %535, %536
  br i1 %537, label %538, label %609

538:                                              ; preds = %534
  %539 = getelementptr %struct.tree_common, ptr %183, i64 0, i32 2
  %540 = load ptr, ptr %539, align 8, !tbaa !17
  %541 = getelementptr %struct.tree_common, ptr %187, i64 0, i32 2
  %542 = load ptr, ptr %541, align 8, !tbaa !17
  %543 = load i64, ptr %540, align 8
  %544 = lshr i64 %543, 56
  %545 = trunc i64 %544 to i8
  %546 = load i64, ptr %542, align 8
  %547 = lshr i64 %546, 56
  %548 = trunc i64 %547 to i8
  %549 = tail call fastcc i32 @comp_target_types(i32 noundef %15, ptr nonnull %540, ptr nonnull %542)
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %551, label %597

551:                                              ; preds = %538
  %552 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %2), !range !70
  %553 = icmp eq i8 %552, 0
  br i1 %553, label %554, label %777

554:                                              ; preds = %551
  %555 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %3), !range !70
  %556 = icmp eq i8 %555, 0
  br i1 %556, label %557, label %777

557:                                              ; preds = %554
  %558 = icmp eq i8 %545, %548
  br i1 %558, label %567, label %559

559:                                              ; preds = %557
  %560 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %561 = tail call zeroext i8 %560(i8 noundef zeroext %545, i8 noundef zeroext %548) #20
  %562 = icmp eq i8 %561, 0
  br i1 %562, label %563, label %567

563:                                              ; preds = %559
  %564 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %565 = tail call zeroext i8 %564(i8 noundef zeroext %548, i8 noundef zeroext %545) #20
  %566 = icmp eq i8 %565, 0
  br i1 %566, label %607, label %567

567:                                              ; preds = %563, %559, %557
  %568 = phi i8 [ %545, %557 ], [ %548, %559 ], [ %545, %563 ]
  %569 = load i64, ptr %540, align 8
  %570 = trunc i64 %569 to i32
  %571 = and i32 %570, 65535
  %572 = icmp eq i32 %571, 19
  br i1 %572, label %573, label %582

573:                                              ; preds = %567
  %574 = load i32, ptr @pedantic, align 4, !tbaa !21
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %600, label %576

576:                                              ; preds = %573
  %577 = load i64, ptr %542, align 8
  %578 = and i64 %577, 65535
  %579 = icmp eq i64 %578, 20
  br i1 %579, label %580, label %600

580:                                              ; preds = %576
  %581 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.236) #20
  br label %600

582:                                              ; preds = %567
  %583 = load i64, ptr %542, align 8
  %584 = and i64 %583, 65535
  %585 = icmp eq i64 %584, 19
  br i1 %585, label %586, label %593

586:                                              ; preds = %582
  %587 = load i32, ptr @pedantic, align 4, !tbaa !21
  %588 = icmp ne i32 %587, 0
  %589 = icmp eq i32 %571, 20
  %590 = and i1 %589, %588
  br i1 %590, label %591, label %600

591:                                              ; preds = %586
  %592 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.236) #20
  br label %600

593:                                              ; preds = %582
  %594 = icmp eq i8 %188, 0
  br i1 %594, label %595, label %600

595:                                              ; preds = %593
  %596 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.237) #20
  br label %600

597:                                              ; preds = %538
  %598 = tail call fastcc ptr @common_pointer_type(ptr noundef nonnull %183, ptr noundef nonnull %187)
  %599 = icmp eq ptr %598, null
  br i1 %599, label %600, label %777

600:                                              ; preds = %595, %593, %586, %591, %573, %576, %580, %597
  %601 = phi i8 [ 0, %597 ], [ %568, %580 ], [ %568, %576 ], [ %568, %573 ], [ %568, %591 ], [ %568, %586 ], [ %568, %593 ], [ %568, %595 ]
  %602 = zext i8 %601 to i32
  %603 = shl nuw nsw i32 %602, 8
  %604 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %605 = tail call ptr @build_qualified_type(ptr noundef %604, i32 noundef %603) #20
  %606 = tail call ptr @build_pointer_type(ptr noundef %605) #20
  br label %777

607:                                              ; preds = %563
  tail call void (i32, ptr, ...) @error_at(i32 noundef %15, ptr noundef nonnull @.str.235) #20
  %608 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

609:                                              ; preds = %534
  br i1 %535, label %610, label %625

610:                                              ; preds = %609
  %611 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %3), !range !70
  %612 = icmp eq i8 %611, 0
  br i1 %612, label %625, label %613

613:                                              ; preds = %610
  %614 = load i64, ptr %184, align 8
  %615 = and i64 %614, 65535
  %616 = icmp eq i64 %615, 121
  br i1 %616, label %617, label %777

617:                                              ; preds = %613
  %618 = getelementptr inbounds %struct.tree_exp, ptr %184, i64 0, i32 3
  %619 = load ptr, ptr %618, align 8, !tbaa !17
  %620 = tail call zeroext i8 @decl_with_nonnull_addr_p(ptr noundef %619) #20
  %621 = icmp eq i8 %620, 0
  br i1 %621, label %777, label %622

622:                                              ; preds = %617
  %623 = load ptr, ptr %618, align 8, !tbaa !17
  %624 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %15, i32 noundef 33, ptr noundef nonnull @.str.238, ptr noundef %623) #20
  br label %777

625:                                              ; preds = %610, %609
  br i1 %536, label %626, label %641

626:                                              ; preds = %625
  %627 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %2), !range !70
  %628 = icmp eq i8 %627, 0
  br i1 %628, label %646, label %629

629:                                              ; preds = %626
  %630 = load i64, ptr %186, align 8
  %631 = and i64 %630, 65535
  %632 = icmp eq i64 %631, 121
  br i1 %632, label %633, label %777

633:                                              ; preds = %629
  %634 = getelementptr inbounds %struct.tree_exp, ptr %186, i64 0, i32 3
  %635 = load ptr, ptr %634, align 8, !tbaa !17
  %636 = tail call zeroext i8 @decl_with_nonnull_addr_p(ptr noundef %635) #20
  %637 = icmp eq i8 %636, 0
  br i1 %637, label %777, label %638

638:                                              ; preds = %633
  %639 = load ptr, ptr %634, align 8, !tbaa !17
  %640 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %15, i32 noundef 33, ptr noundef nonnull @.str.238, ptr noundef %639) #20
  br label %777

641:                                              ; preds = %625
  %642 = icmp eq i32 %98, 8
  %643 = and i1 %535, %642
  br i1 %643, label %644, label %746

644:                                              ; preds = %641
  %645 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.239) #20
  br label %777

646:                                              ; preds = %626
  br i1 %524, label %647, label %777

647:                                              ; preds = %646
  %648 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.239) #20
  br label %777

649:                                              ; preds = %182, %182, %182, %182
  %650 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %651 = icmp eq i32 %94, 8
  %652 = and i32 %93, 65534
  %653 = icmp eq i32 %652, 8
  %654 = icmp eq i32 %94, 11
  %655 = or i1 %653, %654
  br i1 %655, label %656, label %661

656:                                              ; preds = %649
  %657 = and i32 %97, 65534
  %658 = icmp eq i32 %657, 8
  %659 = icmp eq i32 %98, 11
  %660 = or i1 %658, %659
  br i1 %660, label %746, label %661

661:                                              ; preds = %656, %649
  %662 = icmp eq i32 %94, 10
  %663 = icmp eq i32 %98, 10
  %664 = and i1 %662, %663
  br i1 %664, label %665, label %717

665:                                              ; preds = %661
  %666 = getelementptr %struct.tree_common, ptr %183, i64 0, i32 2
  %667 = load ptr, ptr %666, align 8, !tbaa !17
  %668 = load i64, ptr %667, align 8
  %669 = getelementptr %struct.tree_common, ptr %187, i64 0, i32 2
  %670 = load ptr, ptr %669, align 8, !tbaa !17
  %671 = load i64, ptr %670, align 8
  %672 = tail call fastcc i32 @comp_target_types(i32 noundef %15, ptr nonnull %667, ptr nonnull %670)
  %673 = icmp eq i32 %672, 0
  br i1 %673, label %693, label %674

674:                                              ; preds = %665
  %675 = tail call fastcc ptr @common_pointer_type(ptr noundef nonnull %183, ptr noundef nonnull %187)
  %676 = load ptr, ptr %666, align 8, !tbaa !17
  %677 = getelementptr inbounds %struct.tree_type, ptr %676, i64 0, i32 2
  %678 = load ptr, ptr %677, align 8, !tbaa !17
  %679 = icmp ne ptr %678, null
  %680 = load ptr, ptr %669, align 8, !tbaa !17
  %681 = getelementptr inbounds %struct.tree_type, ptr %680, i64 0, i32 2
  %682 = load ptr, ptr %681, align 8, !tbaa !17
  %683 = icmp eq ptr %682, null
  %684 = xor i1 %679, %683
  br i1 %684, label %687, label %685

685:                                              ; preds = %674
  %686 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.240) #20
  br label %777

687:                                              ; preds = %674
  %688 = load i64, ptr %676, align 8
  %689 = and i64 %688, 65535
  %690 = icmp eq i64 %689, 20
  br i1 %690, label %691, label %777

691:                                              ; preds = %687
  %692 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.241) #20
  br label %777

693:                                              ; preds = %665
  %694 = lshr i64 %671, 56
  %695 = trunc i64 %694 to i8
  %696 = lshr i64 %668, 56
  %697 = trunc i64 %696 to i8
  %698 = icmp eq i8 %697, %695
  br i1 %698, label %707, label %699

699:                                              ; preds = %693
  %700 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %701 = tail call zeroext i8 %700(i8 noundef zeroext %697, i8 noundef zeroext %695) #20
  %702 = icmp eq i8 %701, 0
  br i1 %702, label %703, label %707

703:                                              ; preds = %699
  %704 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %705 = tail call zeroext i8 %704(i8 noundef zeroext %695, i8 noundef zeroext %697) #20
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %715, label %707

707:                                              ; preds = %703, %699, %693
  %708 = phi i8 [ %695, %693 ], [ %695, %699 ], [ %697, %703 ]
  %709 = zext i8 %708 to i32
  %710 = shl nuw nsw i32 %709, 8
  %711 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %712 = tail call ptr @build_qualified_type(ptr noundef %711, i32 noundef %710) #20
  %713 = tail call ptr @build_pointer_type(ptr noundef %712) #20
  %714 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.237) #20
  br label %777

715:                                              ; preds = %703
  tail call void (i32, ptr, ...) @error_at(i32 noundef %15, ptr noundef nonnull @.str.235) #20
  %716 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

717:                                              ; preds = %661
  br i1 %662, label %718, label %731

718:                                              ; preds = %717
  %719 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %3), !range !70
  %720 = icmp eq i8 %719, 0
  br i1 %720, label %731, label %721

721:                                              ; preds = %718
  %722 = load i32, ptr @pedantic, align 4, !tbaa !21
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %726, label %724

724:                                              ; preds = %721
  %725 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.242) #20
  br label %777

726:                                              ; preds = %721
  %727 = load i32, ptr @extra_warnings, align 4, !tbaa !21
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %777, label %729

729:                                              ; preds = %726
  %730 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %15, i32 noundef 82, ptr noundef nonnull @.str.242) #20
  br label %777

731:                                              ; preds = %718, %717
  br i1 %663, label %732, label %737

732:                                              ; preds = %731
  %733 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %2), !range !70
  %734 = icmp eq i8 %733, 0
  br i1 %734, label %742, label %735

735:                                              ; preds = %732
  %736 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.242) #20
  br label %777

737:                                              ; preds = %731
  %738 = icmp eq i32 %98, 8
  %739 = and i1 %662, %738
  br i1 %739, label %740, label %746

740:                                              ; preds = %737
  %741 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.239) #20
  br label %777

742:                                              ; preds = %732
  br i1 %651, label %743, label %777

743:                                              ; preds = %742
  %744 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 0, ptr noundef nonnull @.str.239) #20
  br label %777

745:                                              ; preds = %182
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9585, ptr noundef nonnull @.str.8) #20
  br label %746

746:                                              ; preds = %532, %532, %529, %737, %641, %323, %745, %282, %290, %300, %306, %324, %416, %390, %420, %463, %195, %214, %182, %259, %275, %317, %363, %656
  %747 = phi i32 [ 0, %745 ], [ 0, %463 ], [ 0, %420 ], [ 0, %390 ], [ 0, %416 ], [ 0, %324 ], [ 0, %290 ], [ 0, %300 ], [ 0, %306 ], [ 0, %282 ], [ 0, %195 ], [ 0, %214 ], [ 0, %182 ], [ %277, %275 ], [ 0, %259 ], [ 0, %317 ], [ 0, %363 ], [ 0, %532 ], [ 0, %656 ], [ 0, %323 ], [ 0, %641 ], [ 0, %737 ], [ 0, %529 ], [ 0, %532 ]
  %748 = phi i1 [ false, %745 ], [ false, %463 ], [ false, %420 ], [ false, %390 ], [ false, %416 ], [ false, %324 ], [ false, %290 ], [ false, %300 ], [ false, %306 ], [ false, %282 ], [ false, %195 ], [ false, %214 ], [ false, %182 ], [ false, %275 ], [ false, %259 ], [ false, %317 ], [ false, %363 ], [ true, %532 ], [ true, %656 ], [ false, %323 ], [ false, %641 ], [ false, %737 ], [ true, %529 ], [ true, %532 ]
  %749 = phi i1 [ false, %745 ], [ false, %463 ], [ false, %420 ], [ false, %390 ], [ false, %416 ], [ false, %324 ], [ false, %290 ], [ false, %300 ], [ true, %306 ], [ false, %282 ], [ true, %195 ], [ true, %214 ], [ true, %182 ], [ true, %275 ], [ true, %259 ], [ true, %317 ], [ false, %363 ], [ false, %532 ], [ false, %656 ], [ false, %323 ], [ false, %641 ], [ false, %737 ], [ false, %529 ], [ false, %532 ]
  %750 = phi ptr [ null, %745 ], [ null, %463 ], [ null, %420 ], [ null, %390 ], [ null, %416 ], [ null, %324 ], [ null, %290 ], [ null, %300 ], [ null, %306 ], [ null, %282 ], [ null, %195 ], [ null, %214 ], [ null, %182 ], [ null, %275 ], [ null, %259 ], [ null, %317 ], [ null, %363 ], [ %523, %532 ], [ %650, %656 ], [ null, %323 ], [ %523, %641 ], [ %650, %737 ], [ %523, %529 ], [ %523, %532 ]
  %751 = phi i32 [ 0, %745 ], [ 0, %463 ], [ 0, %420 ], [ %364, %390 ], [ %364, %416 ], [ 0, %324 ], [ 0, %290 ], [ 0, %300 ], [ 0, %306 ], [ 0, %282 ], [ 0, %195 ], [ 0, %214 ], [ 0, %182 ], [ 0, %275 ], [ 0, %259 ], [ 0, %317 ], [ %364, %363 ], [ 0, %532 ], [ 0, %656 ], [ 0, %323 ], [ 0, %641 ], [ 0, %737 ], [ 0, %529 ], [ 0, %532 ]
  %752 = phi ptr [ null, %745 ], [ null, %463 ], [ null, %420 ], [ %365, %390 ], [ %365, %416 ], [ null, %324 ], [ null, %290 ], [ null, %300 ], [ null, %306 ], [ null, %282 ], [ null, %195 ], [ null, %214 ], [ null, %182 ], [ null, %275 ], [ null, %259 ], [ null, %317 ], [ %365, %363 ], [ null, %532 ], [ null, %656 ], [ null, %323 ], [ null, %641 ], [ null, %737 ], [ null, %529 ], [ null, %532 ]
  %753 = phi i32 [ %1, %745 ], [ 83, %463 ], [ 84, %420 ], [ 91, %390 ], [ 92, %416 ], [ %1, %324 ], [ %1, %290 ], [ %1, %300 ], [ %1, %306 ], [ %1, %282 ], [ 63, %195 ], [ 64, %214 ], [ %1, %182 ], [ %1, %275 ], [ 75, %259 ], [ %1, %317 ], [ %1, %363 ], [ %1, %532 ], [ %1, %656 ], [ %1, %323 ], [ %1, %641 ], [ %1, %737 ], [ %1, %529 ], [ %1, %532 ]
  %754 = phi i8 [ %78, %745 ], [ %78, %463 ], [ %78, %420 ], [ %391, %390 ], [ %417, %416 ], [ %78, %324 ], [ %78, %290 ], [ %78, %300 ], [ %78, %306 ], [ %78, %282 ], [ %78, %195 ], [ %78, %214 ], [ %78, %182 ], [ %78, %275 ], [ %78, %259 ], [ %78, %317 ], [ %78, %363 ], [ %78, %532 ], [ %78, %656 ], [ %78, %323 ], [ %78, %641 ], [ %78, %737 ], [ %78, %529 ], [ %78, %532 ]
  %755 = phi i8 [ %79, %745 ], [ %79, %463 ], [ %79, %420 ], [ %393, %390 ], [ %419, %416 ], [ %79, %324 ], [ %79, %290 ], [ %79, %300 ], [ %79, %306 ], [ %79, %282 ], [ %79, %195 ], [ %79, %214 ], [ %79, %182 ], [ %79, %275 ], [ %79, %259 ], [ %79, %317 ], [ %79, %363 ], [ %79, %532 ], [ %79, %656 ], [ %79, %323 ], [ %79, %641 ], [ %79, %737 ], [ %79, %529 ], [ %79, %532 ]
  %756 = phi ptr [ %186, %745 ], [ %186, %463 ], [ %186, %420 ], [ %366, %390 ], [ %366, %416 ], [ %186, %324 ], [ %186, %290 ], [ %186, %300 ], [ %186, %306 ], [ %186, %282 ], [ %186, %195 ], [ %186, %214 ], [ %186, %182 ], [ %186, %275 ], [ %186, %259 ], [ %186, %317 ], [ %366, %363 ], [ %186, %532 ], [ %186, %656 ], [ %186, %323 ], [ %186, %641 ], [ %186, %737 ], [ %186, %529 ], [ %186, %532 ]
  %757 = phi ptr [ %184, %745 ], [ %184, %463 ], [ %184, %420 ], [ %367, %390 ], [ %367, %416 ], [ %184, %324 ], [ %184, %290 ], [ %184, %300 ], [ %184, %306 ], [ %184, %282 ], [ %184, %195 ], [ %184, %214 ], [ %184, %182 ], [ %184, %275 ], [ %184, %259 ], [ %184, %317 ], [ %367, %363 ], [ %184, %532 ], [ %184, %656 ], [ %184, %323 ], [ %184, %641 ], [ %184, %737 ], [ %184, %529 ], [ %184, %532 ]
  %758 = icmp eq i32 %94, 14
  %759 = icmp eq i32 %98, 14
  %760 = and i1 %758, %759
  br i1 %760, label %761, label %777

761:                                              ; preds = %746
  %762 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 2
  %763 = load ptr, ptr %762, align 8, !tbaa !17
  %764 = getelementptr inbounds %struct.tree_type, ptr %187, i64 0, i32 2
  %765 = load ptr, ptr %764, align 8, !tbaa !17
  %766 = tail call i32 @tree_int_cst_equal(ptr noundef %763, ptr noundef %765) #20
  %767 = icmp eq i32 %766, 0
  br i1 %767, label %775, label %768

768:                                              ; preds = %761
  %769 = getelementptr inbounds %struct.tree_common, ptr %183, i64 0, i32 2
  %770 = load ptr, ptr %769, align 8, !tbaa !17
  %771 = getelementptr inbounds %struct.tree_common, ptr %187, i64 0, i32 2
  %772 = load ptr, ptr %771, align 8, !tbaa !17
  %773 = tail call zeroext i8 @same_scalar_type_ignoring_signedness(ptr noundef %770, ptr noundef %772) #20
  %774 = icmp eq i8 %773, 0
  br i1 %774, label %775, label %777

775:                                              ; preds = %768, %761
  tail call void @binary_op_error(i32 noundef %15, i32 noundef %1, ptr noundef nonnull %183, ptr noundef nonnull %187) #20
  %776 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

777:                                              ; preds = %707, %687, %691, %685, %554, %551, %597, %600, %205, %629, %633, %638, %742, %735, %646, %227, %613, %617, %622, %492, %500, %452, %461, %278, %726, %729, %724, %740, %743, %644, %647, %340, %219, %768, %746
  %778 = phi ptr [ %757, %768 ], [ %757, %746 ], [ %184, %219 ], [ %184, %340 ], [ %184, %647 ], [ %184, %644 ], [ %184, %743 ], [ %184, %740 ], [ %184, %724 ], [ %184, %729 ], [ %184, %726 ], [ %184, %278 ], [ %184, %461 ], [ %184, %452 ], [ %184, %500 ], [ %184, %492 ], [ %184, %622 ], [ %184, %617 ], [ %184, %613 ], [ %184, %227 ], [ %184, %646 ], [ %184, %735 ], [ %184, %742 ], [ %184, %638 ], [ %184, %633 ], [ %184, %629 ], [ %184, %205 ], [ %184, %600 ], [ %184, %597 ], [ %184, %551 ], [ %184, %554 ], [ %184, %685 ], [ %184, %691 ], [ %184, %687 ], [ %184, %707 ]
  %779 = phi ptr [ %756, %768 ], [ %756, %746 ], [ %186, %219 ], [ %186, %340 ], [ %186, %647 ], [ %186, %644 ], [ %186, %743 ], [ %186, %740 ], [ %186, %724 ], [ %186, %729 ], [ %186, %726 ], [ %186, %278 ], [ %462, %461 ], [ %186, %452 ], [ %501, %500 ], [ %186, %492 ], [ %186, %622 ], [ %186, %617 ], [ %186, %613 ], [ %186, %227 ], [ %186, %646 ], [ %186, %735 ], [ %186, %742 ], [ %186, %638 ], [ %186, %633 ], [ %186, %629 ], [ %186, %205 ], [ %186, %600 ], [ %186, %597 ], [ %186, %551 ], [ %186, %554 ], [ %186, %685 ], [ %186, %691 ], [ %186, %687 ], [ %186, %707 ]
  %780 = phi i8 [ %755, %768 ], [ %755, %746 ], [ %79, %219 ], [ %79, %340 ], [ %79, %647 ], [ %79, %644 ], [ %79, %743 ], [ %79, %740 ], [ %79, %724 ], [ %79, %729 ], [ %79, %726 ], [ %79, %278 ], [ %454, %461 ], [ %454, %452 ], [ %493, %500 ], [ %493, %492 ], [ %79, %622 ], [ %79, %617 ], [ %79, %613 ], [ %79, %227 ], [ %79, %646 ], [ %79, %735 ], [ %79, %742 ], [ %79, %638 ], [ %79, %633 ], [ %79, %629 ], [ %79, %205 ], [ %79, %600 ], [ %79, %597 ], [ %79, %551 ], [ %79, %554 ], [ %79, %685 ], [ %79, %691 ], [ %79, %687 ], [ %79, %707 ]
  %781 = phi i8 [ %754, %768 ], [ %754, %746 ], [ %78, %219 ], [ %78, %340 ], [ %78, %647 ], [ %78, %644 ], [ %78, %743 ], [ %78, %740 ], [ %78, %724 ], [ %78, %729 ], [ %78, %726 ], [ %78, %278 ], [ %78, %461 ], [ %78, %452 ], [ %78, %500 ], [ %78, %492 ], [ %78, %622 ], [ %78, %617 ], [ %78, %613 ], [ %78, %227 ], [ %78, %646 ], [ %78, %735 ], [ %78, %742 ], [ %78, %638 ], [ %78, %633 ], [ %78, %629 ], [ %78, %205 ], [ %78, %600 ], [ %78, %597 ], [ %78, %551 ], [ %78, %554 ], [ %78, %685 ], [ %78, %691 ], [ %78, %687 ], [ %78, %707 ]
  %782 = phi i32 [ %753, %768 ], [ %753, %746 ], [ %1, %219 ], [ %1, %340 ], [ %1, %647 ], [ %1, %644 ], [ %1, %743 ], [ %1, %740 ], [ %1, %724 ], [ %1, %729 ], [ %1, %726 ], [ %1, %278 ], [ 84, %461 ], [ 84, %452 ], [ 83, %500 ], [ 83, %492 ], [ %1, %622 ], [ %1, %617 ], [ %1, %613 ], [ %1, %227 ], [ %1, %646 ], [ %1, %735 ], [ %1, %742 ], [ %1, %638 ], [ %1, %633 ], [ %1, %629 ], [ 64, %205 ], [ %1, %600 ], [ %1, %597 ], [ %1, %551 ], [ %1, %554 ], [ %1, %685 ], [ %1, %691 ], [ %1, %687 ], [ %1, %707 ]
  %783 = phi ptr [ %752, %768 ], [ %752, %746 ], [ null, %219 ], [ null, %340 ], [ %187, %647 ], [ %183, %644 ], [ %187, %743 ], [ %183, %740 ], [ %183, %724 ], [ %183, %729 ], [ %183, %726 ], [ null, %278 ], [ %183, %461 ], [ %183, %452 ], [ %183, %500 ], [ %183, %492 ], [ %183, %622 ], [ %183, %617 ], [ %183, %613 ], [ null, %227 ], [ null, %646 ], [ %187, %735 ], [ null, %742 ], [ %187, %638 ], [ %187, %633 ], [ %187, %629 ], [ null, %205 ], [ %606, %600 ], [ %598, %597 ], [ %187, %551 ], [ %183, %554 ], [ %675, %685 ], [ %675, %691 ], [ %675, %687 ], [ %713, %707 ]
  %784 = phi i32 [ %751, %768 ], [ %751, %746 ], [ 0, %219 ], [ 0, %340 ], [ 0, %647 ], [ 0, %644 ], [ 0, %743 ], [ 0, %740 ], [ 0, %724 ], [ 0, %729 ], [ 0, %726 ], [ 0, %278 ], [ 1, %461 ], [ 1, %452 ], [ 1, %500 ], [ 1, %492 ], [ 0, %622 ], [ 0, %617 ], [ 0, %613 ], [ 0, %227 ], [ 0, %646 ], [ 0, %735 ], [ 0, %742 ], [ 0, %638 ], [ 0, %633 ], [ 0, %629 ], [ 0, %205 ], [ 0, %600 ], [ 0, %597 ], [ 0, %551 ], [ 0, %554 ], [ 0, %685 ], [ 0, %691 ], [ 0, %687 ], [ 0, %707 ]
  %785 = phi ptr [ %750, %768 ], [ %750, %746 ], [ null, %219 ], [ null, %340 ], [ %523, %647 ], [ %523, %644 ], [ %650, %743 ], [ %650, %740 ], [ %650, %724 ], [ %650, %729 ], [ %650, %726 ], [ null, %278 ], [ null, %461 ], [ null, %452 ], [ null, %500 ], [ null, %492 ], [ %523, %622 ], [ %523, %617 ], [ %523, %613 ], [ null, %227 ], [ %523, %646 ], [ %650, %735 ], [ %650, %742 ], [ %523, %638 ], [ %523, %633 ], [ %523, %629 ], [ null, %205 ], [ %523, %600 ], [ %523, %597 ], [ %523, %551 ], [ %523, %554 ], [ %650, %685 ], [ %650, %691 ], [ %650, %687 ], [ %650, %707 ]
  %786 = phi i1 [ %749, %768 ], [ %749, %746 ], [ false, %219 ], [ true, %340 ], [ false, %647 ], [ false, %644 ], [ false, %743 ], [ false, %740 ], [ false, %724 ], [ false, %729 ], [ false, %726 ], [ false, %278 ], [ false, %461 ], [ false, %452 ], [ false, %500 ], [ false, %492 ], [ false, %622 ], [ false, %617 ], [ false, %613 ], [ false, %227 ], [ false, %646 ], [ false, %735 ], [ false, %742 ], [ false, %638 ], [ false, %633 ], [ false, %629 ], [ true, %205 ], [ false, %600 ], [ false, %597 ], [ false, %551 ], [ false, %554 ], [ false, %685 ], [ false, %691 ], [ false, %687 ], [ false, %707 ]
  %787 = phi i1 [ false, %768 ], [ false, %746 ], [ false, %219 ], [ false, %340 ], [ false, %647 ], [ false, %644 ], [ false, %743 ], [ false, %740 ], [ false, %724 ], [ false, %729 ], [ false, %726 ], [ false, %278 ], [ %453, %461 ], [ %453, %452 ], [ false, %500 ], [ false, %492 ], [ false, %622 ], [ false, %617 ], [ false, %613 ], [ false, %227 ], [ false, %646 ], [ false, %735 ], [ false, %742 ], [ false, %638 ], [ false, %633 ], [ false, %629 ], [ false, %205 ], [ false, %600 ], [ false, %597 ], [ false, %551 ], [ false, %554 ], [ false, %685 ], [ false, %691 ], [ false, %687 ], [ false, %707 ]
  %788 = phi i1 [ %748, %768 ], [ %748, %746 ], [ false, %219 ], [ false, %340 ], [ false, %647 ], [ false, %644 ], [ false, %743 ], [ false, %740 ], [ false, %724 ], [ false, %729 ], [ false, %726 ], [ false, %278 ], [ false, %461 ], [ false, %452 ], [ false, %500 ], [ false, %492 ], [ false, %622 ], [ false, %617 ], [ false, %613 ], [ false, %227 ], [ false, %646 ], [ false, %735 ], [ false, %742 ], [ false, %638 ], [ false, %633 ], [ false, %629 ], [ false, %205 ], [ false, %600 ], [ false, %597 ], [ false, %551 ], [ false, %554 ], [ false, %685 ], [ false, %691 ], [ false, %687 ], [ false, %707 ]
  %789 = phi i32 [ %747, %768 ], [ %747, %746 ], [ 0, %219 ], [ %342, %340 ], [ 0, %647 ], [ 0, %644 ], [ 0, %743 ], [ 0, %740 ], [ 0, %724 ], [ 0, %729 ], [ 0, %726 ], [ -1, %278 ], [ 0, %461 ], [ 0, %452 ], [ 0, %500 ], [ 0, %492 ], [ 0, %622 ], [ 0, %617 ], [ 0, %613 ], [ 0, %227 ], [ 0, %646 ], [ 0, %735 ], [ 0, %742 ], [ 0, %638 ], [ 0, %633 ], [ 0, %629 ], [ 0, %205 ], [ 0, %600 ], [ 0, %597 ], [ 0, %551 ], [ 0, %554 ], [ 0, %685 ], [ 0, %691 ], [ 0, %687 ], [ 0, %707 ]
  %790 = and i32 %93, 65534
  %791 = icmp eq i32 %790, 8
  %792 = icmp eq i32 %94, 13
  %793 = icmp eq i32 %94, 11
  %794 = or i1 %791, %793
  %795 = add nsw i32 %94, -13
  %796 = icmp ult i32 %795, 2
  %797 = or i1 %794, %796
  br i1 %797, label %798, label %1086

798:                                              ; preds = %777
  %799 = and i32 %97, 65534
  %800 = icmp eq i32 %799, 8
  %801 = icmp eq i32 %98, 11
  %802 = or i1 %800, %801
  %803 = add nsw i32 %98, -13
  %804 = icmp ult i32 %803, 2
  %805 = or i1 %802, %804
  br i1 %805, label %806, label %1086

806:                                              ; preds = %798
  %807 = icmp eq i32 %98, 13
  %808 = icmp ne i32 %789, 0
  %809 = or i1 %786, %808
  %810 = or i1 %788, %809
  br i1 %810, label %811, label %815

811:                                              ; preds = %806
  %812 = tail call fastcc ptr @c_common_type(ptr noundef %183, ptr noundef %187)
  %813 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %814 = icmp eq ptr %812, %813
  br i1 %814, label %1228, label %815

815:                                              ; preds = %811, %806
  %816 = phi ptr [ %812, %811 ], [ %783, %806 ]
  %817 = xor i1 %792, %807
  br i1 %817, label %818, label %952

818:                                              ; preds = %815
  %819 = add i32 %1, -63
  %820 = icmp ult i32 %819, 3
  %821 = icmp eq i32 %1, 67
  %822 = and i1 %821, %792
  %823 = or i1 %820, %822
  br i1 %823, label %824, label %952

824:                                              ; preds = %818
  %825 = getelementptr inbounds %struct.tree_common, ptr %816, i64 0, i32 2
  %826 = load ptr, ptr %825, align 8, !tbaa !17
  %827 = load i64, ptr %826, align 8
  %828 = and i64 %827, 65535
  %829 = icmp eq i64 %828, 9
  %830 = load i32, ptr @flag_signed_zeros, align 4
  %831 = icmp ne i32 %830, 0
  %832 = select i1 %829, i1 %831, i1 false
  br i1 %832, label %833, label %952

833:                                              ; preds = %824
  %834 = icmp eq ptr %183, %88
  %835 = icmp eq ptr %187, %90
  %836 = and i1 %834, %835
  br i1 %836, label %842, label %837

837:                                              ; preds = %833
  %838 = and i1 %185, %786
  br i1 %838, label %840, label %839

839:                                              ; preds = %837
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9633, ptr noundef nonnull @.str.8) #20
  br label %840

840:                                              ; preds = %837, %839
  %841 = tail call fastcc ptr @c_common_type(ptr noundef nonnull %88, ptr noundef nonnull %90)
  br label %842

842:                                              ; preds = %833, %840
  %843 = phi ptr [ %841, %840 ], [ null, %833 ]
  %844 = getelementptr inbounds %struct.tree_common, ptr %778, i64 0, i32 2
  %845 = load ptr, ptr %844, align 8, !tbaa !17
  br i1 %792, label %846, label %855

846:                                              ; preds = %842
  %847 = icmp eq ptr %845, %816
  br i1 %847, label %850, label %848

848:                                              ; preds = %846
  %849 = tail call ptr @convert_and_check(ptr noundef nonnull %816, ptr noundef nonnull %778) #20
  br label %850

850:                                              ; preds = %848, %846
  %851 = phi ptr [ %849, %848 ], [ %778, %846 ]
  %852 = getelementptr inbounds %struct.tree_common, ptr %779, i64 0, i32 2
  %853 = load ptr, ptr %852, align 8, !tbaa !17
  %854 = icmp eq ptr %853, %826
  br i1 %854, label %868, label %864

855:                                              ; preds = %842
  %856 = icmp eq ptr %845, %826
  br i1 %856, label %859, label %857

857:                                              ; preds = %855
  %858 = tail call ptr @convert_and_check(ptr noundef nonnull %826, ptr noundef nonnull %778) #20
  br label %859

859:                                              ; preds = %857, %855
  %860 = phi ptr [ %858, %857 ], [ %778, %855 ]
  %861 = getelementptr inbounds %struct.tree_common, ptr %779, i64 0, i32 2
  %862 = load ptr, ptr %861, align 8, !tbaa !17
  %863 = icmp eq ptr %862, %816
  br i1 %863, label %868, label %864

864:                                              ; preds = %859, %850
  %865 = phi ptr [ %826, %850 ], [ %816, %859 ]
  %866 = phi ptr [ %851, %850 ], [ %860, %859 ]
  %867 = tail call ptr @convert_and_check(ptr noundef nonnull %865, ptr noundef nonnull %779) #20
  br label %868

868:                                              ; preds = %864, %859, %850
  %869 = phi ptr [ %779, %850 ], [ %779, %859 ], [ %867, %864 ]
  %870 = phi ptr [ %851, %850 ], [ %860, %859 ], [ %866, %864 ]
  %871 = load i64, ptr %870, align 8
  %872 = and i64 %871, 65535
  %873 = icmp eq i64 %872, 0
  br i1 %873, label %878, label %874

874:                                              ; preds = %868
  %875 = load i64, ptr %869, align 8
  %876 = and i64 %875, 65535
  %877 = icmp eq i64 %876, 0
  br i1 %877, label %878, label %880

878:                                              ; preds = %874, %868
  %879 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

880:                                              ; preds = %874
  br i1 %792, label %881, label %913

881:                                              ; preds = %880
  %882 = tail call ptr @c_save_expr(ptr noundef nonnull %870) #20
  %883 = load i64, ptr %2, align 8
  %884 = and i64 %883, 65535
  %885 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %884
  %886 = load i32, ptr %885, align 4, !tbaa !17
  %887 = add i32 %886, -4
  %888 = icmp ult i32 %887, 7
  br i1 %888, label %889, label %892

889:                                              ; preds = %881
  %890 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 1
  %891 = load i32, ptr %890, align 8, !tbaa !17
  br label %892

892:                                              ; preds = %881, %889
  %893 = phi i32 [ %891, %889 ], [ 0, %881 ]
  %894 = tail call ptr @build_unary_op(i32 noundef %893, i32 noundef 43, ptr noundef %882, i32 noundef 1)
  %895 = load i64, ptr %2, align 8
  %896 = and i64 %895, 65535
  %897 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %896
  %898 = load i32, ptr %897, align 4, !tbaa !17
  %899 = add i32 %898, -4
  %900 = icmp ult i32 %899, 7
  br i1 %900, label %901, label %904

901:                                              ; preds = %892
  %902 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 1
  %903 = load i32, ptr %902, align 8, !tbaa !17
  br label %904

904:                                              ; preds = %892, %901
  %905 = phi i32 [ %903, %901 ], [ 0, %892 ]
  %906 = tail call ptr @build_unary_op(i32 noundef %905, i32 noundef 44, ptr noundef %882, i32 noundef 1)
  switch i32 %1, label %912 [
    i32 65, label %907
    i32 67, label %907
    i32 63, label %909
    i32 64, label %909
  ]

907:                                              ; preds = %904, %904
  %908 = tail call ptr @build2_stat(i32 noundef %782, ptr noundef nonnull %826, ptr noundef %906, ptr noundef nonnull %869) #20
  br label %909

909:                                              ; preds = %904, %904, %907
  %910 = phi ptr [ %906, %904 ], [ %906, %904 ], [ %908, %907 ]
  %911 = tail call ptr @build2_stat(i32 noundef %782, ptr noundef nonnull %826, ptr noundef %894, ptr noundef nonnull %869) #20
  br label %948

912:                                              ; preds = %904
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9670, ptr noundef nonnull @.str.8) #20
  br label %948

913:                                              ; preds = %880
  %914 = tail call ptr @c_save_expr(ptr noundef nonnull %869) #20
  %915 = load i64, ptr %3, align 8
  %916 = and i64 %915, 65535
  %917 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %916
  %918 = load i32, ptr %917, align 4, !tbaa !17
  %919 = add i32 %918, -4
  %920 = icmp ult i32 %919, 7
  br i1 %920, label %921, label %924

921:                                              ; preds = %913
  %922 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 1
  %923 = load i32, ptr %922, align 8, !tbaa !17
  br label %924

924:                                              ; preds = %913, %921
  %925 = phi i32 [ %923, %921 ], [ 0, %913 ]
  %926 = tail call ptr @build_unary_op(i32 noundef %925, i32 noundef 43, ptr noundef %914, i32 noundef 1)
  %927 = load i64, ptr %3, align 8
  %928 = and i64 %927, 65535
  %929 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %928
  %930 = load i32, ptr %929, align 4, !tbaa !17
  %931 = add i32 %930, -4
  %932 = icmp ult i32 %931, 7
  br i1 %932, label %933, label %936

933:                                              ; preds = %924
  %934 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 1
  %935 = load i32, ptr %934, align 8, !tbaa !17
  br label %936

936:                                              ; preds = %924, %933
  %937 = phi i32 [ %935, %933 ], [ 0, %924 ]
  %938 = tail call ptr @build_unary_op(i32 noundef %937, i32 noundef 44, ptr noundef %914, i32 noundef 1)
  switch i32 %1, label %947 [
    i32 65, label %939
    i32 63, label %941
    i32 64, label %944
  ]

939:                                              ; preds = %936
  %940 = tail call ptr @build2_stat(i32 noundef %782, ptr noundef nonnull %826, ptr noundef nonnull %870, ptr noundef %938) #20
  br label %941

941:                                              ; preds = %936, %939
  %942 = phi ptr [ %938, %936 ], [ %940, %939 ]
  %943 = tail call ptr @build2_stat(i32 noundef %782, ptr noundef nonnull %826, ptr noundef nonnull %870, ptr noundef %926) #20
  br label %948

944:                                              ; preds = %936
  %945 = tail call ptr @build2_stat(i32 noundef %782, ptr noundef nonnull %826, ptr noundef nonnull %870, ptr noundef %926) #20
  %946 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef nonnull %826, ptr noundef %938) #20
  br label %948

947:                                              ; preds = %936
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9693, ptr noundef nonnull @.str.8) #20
  br label %948

948:                                              ; preds = %941, %944, %947, %909, %912
  %949 = phi ptr [ %894, %912 ], [ %911, %909 ], [ %926, %947 ], [ %945, %944 ], [ %943, %941 ]
  %950 = phi ptr [ %906, %912 ], [ %910, %909 ], [ %938, %947 ], [ %946, %944 ], [ %942, %941 ]
  %951 = tail call ptr @build2_stat(i32 noundef 123, ptr noundef nonnull %816, ptr noundef %949, ptr noundef %950) #20
  br label %1188

952:                                              ; preds = %818, %824, %815
  %953 = xor i1 %808, true
  %954 = or i1 %792, %953
  %955 = or i1 %954, %807
  br i1 %955, label %960, label %956

956:                                              ; preds = %952
  %957 = icmp eq i32 %789, -1
  %958 = zext i1 %957 to i8
  %959 = tail call ptr @shorten_binary_op(ptr noundef %816, ptr noundef %778, ptr noundef %779, i8 noundef zeroext %958) #20
  br label %960

960:                                              ; preds = %956, %952
  %961 = phi ptr [ %816, %956 ], [ null, %952 ]
  %962 = phi ptr [ %959, %956 ], [ %816, %952 ]
  br i1 %787, label %963, label %1015

963:                                              ; preds = %960
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #20
  %964 = call ptr @get_narrower(ptr noundef %778, ptr noundef nonnull %6) #20
  %965 = icmp eq ptr %964, %778
  br i1 %965, label %966, label %975

966:                                              ; preds = %963
  %967 = getelementptr inbounds %struct.tree_common, ptr %778, i64 0, i32 2
  %968 = load ptr, ptr %967, align 8, !tbaa !17
  %969 = icmp eq ptr %962, %968
  br i1 %969, label %970, label %975

970:                                              ; preds = %966
  %971 = load i64, ptr %962, align 8
  %972 = trunc i64 %971 to i32
  %973 = lshr i32 %972, 21
  %974 = and i32 %973, 1
  store i32 %974, ptr %6, align 4, !tbaa !21
  br label %975

975:                                              ; preds = %970, %966, %963
  %976 = getelementptr inbounds %struct.tree_common, ptr %964, i64 0, i32 2
  %977 = load ptr, ptr %976, align 8, !tbaa !17
  %978 = getelementptr inbounds %struct.tree_type, ptr %977, i64 0, i32 6
  %979 = load i32, ptr %978, align 4
  %980 = and i32 %979, 1023
  %981 = getelementptr inbounds %struct.tree_type, ptr %962, i64 0, i32 6
  %982 = load i32, ptr %981, align 4
  %983 = and i32 %982, 1023
  %984 = icmp ult i32 %980, %983
  br i1 %984, label %985, label %1011

985:                                              ; preds = %975
  %986 = call i32 @tree_int_cst_sgn(ptr noundef %779) #20
  %987 = icmp sgt i32 %986, 0
  br i1 %987, label %988, label %1011

988:                                              ; preds = %985
  %989 = load ptr, ptr %976, align 8, !tbaa !17
  %990 = getelementptr inbounds %struct.tree_type, ptr %989, i64 0, i32 6
  %991 = load i32, ptr %990, align 4
  %992 = and i32 %991, 1023
  %993 = zext i32 %992 to i64
  %994 = call i32 @compare_tree_int(ptr noundef %779, i64 noundef %993) #20
  %995 = icmp slt i32 %994, 0
  br i1 %995, label %996, label %1011

996:                                              ; preds = %988
  %997 = load i64, ptr %962, align 8
  %998 = and i64 %997, 2097152
  %999 = icmp eq i64 %998, 0
  %1000 = load i32, ptr %6, align 4
  %1001 = icmp ne i32 %1000, 0
  %1002 = select i1 %999, i1 true, i1 %1001
  br i1 %1002, label %1003, label %1011

1003:                                             ; preds = %996
  %1004 = load ptr, ptr %976, align 8, !tbaa !17
  %1005 = call ptr @c_common_signed_or_unsigned_type(i32 noundef %1000, ptr noundef %1004) #20
  %1006 = getelementptr inbounds %struct.tree_common, ptr %778, i64 0, i32 2
  %1007 = load ptr, ptr %1006, align 8, !tbaa !17
  %1008 = icmp eq ptr %1007, %1005
  br i1 %1008, label %1011, label %1009

1009:                                             ; preds = %1003
  %1010 = call ptr @convert(ptr noundef %1005, ptr noundef nonnull %778) #20
  br label %1011

1011:                                             ; preds = %1003, %1009, %996, %988, %985, %975
  %1012 = phi i32 [ %784, %996 ], [ %784, %988 ], [ %784, %985 ], [ %784, %975 ], [ 1, %1009 ], [ 1, %1003 ]
  %1013 = phi ptr [ %962, %996 ], [ %962, %988 ], [ %962, %985 ], [ %962, %975 ], [ %1005, %1009 ], [ %1005, %1003 ]
  %1014 = phi ptr [ %778, %996 ], [ %778, %988 ], [ %778, %985 ], [ %778, %975 ], [ %1010, %1009 ], [ %778, %1003 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #20
  br label %1015

1015:                                             ; preds = %1011, %960
  %1016 = phi ptr [ %962, %1011 ], [ %961, %960 ]
  %1017 = phi i32 [ %1012, %1011 ], [ %784, %960 ]
  %1018 = phi ptr [ %1013, %1011 ], [ %962, %960 ]
  %1019 = phi ptr [ %1014, %1011 ], [ %778, %960 ]
  br i1 %788, label %1020, label %1086

1020:                                             ; preds = %1015
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #20
  store ptr %1019, ptr %7, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #20
  store ptr %779, ptr %8, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #20
  store ptr %1018, ptr %9, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #20
  store i32 %782, ptr %10, align 4, !tbaa !17
  %1021 = call ptr @shorten_compare(ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10) #20
  %1022 = icmp eq ptr %1021, null
  br i1 %1022, label %1023, label %1085

1023:                                             ; preds = %1020
  %1024 = load ptr, ptr %7, align 8, !tbaa !6
  %1025 = load ptr, ptr %8, align 8, !tbaa !6
  %1026 = load i32, ptr %10, align 4, !tbaa !17
  %1027 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1029, label %1082

1029:                                             ; preds = %1023
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #20
  store i8 1, ptr %11, align 1, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %12) #20
  store i8 1, ptr %12, align 1, !tbaa !17
  %1030 = load i8, ptr @in_late_binary_op, align 1, !tbaa !17
  %1031 = icmp eq i8 %1030, 0
  br i1 %1031, label %1032, label %1047

1032:                                             ; preds = %1029
  store i32 1, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %1033 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %1034 = trunc i32 %1033 to i8
  %1035 = call ptr @c_fully_fold(ptr noundef %1024, i8 noundef zeroext %1034, ptr noundef nonnull %11) #20
  %1036 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %1037 = trunc i32 %1036 to i8
  %1038 = call ptr @c_fully_fold(ptr noundef %1025, i8 noundef zeroext %1037, ptr noundef nonnull %12) #20
  %1039 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %1040 = add nsw i32 %1039, -1
  store i32 %1040, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %1041 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %1042 = trunc i32 %1041 to i8
  %1043 = call ptr @c_fully_fold(ptr noundef %2, i8 noundef zeroext %1042, ptr noundef null) #20
  %1044 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %1045 = trunc i32 %1044 to i8
  %1046 = call ptr @c_fully_fold(ptr noundef %3, i8 noundef zeroext %1045, ptr noundef null) #20
  br label %1047

1047:                                             ; preds = %1029, %1032
  %1048 = phi ptr [ %1038, %1032 ], [ %1025, %1029 ]
  %1049 = phi ptr [ %1035, %1032 ], [ %1024, %1029 ]
  %1050 = phi ptr [ %1043, %1032 ], [ %2, %1029 ]
  %1051 = phi ptr [ %1046, %1032 ], [ %3, %1029 ]
  %1052 = load i32, ptr @warn_sign_compare, align 4, !tbaa !21
  %1053 = icmp eq i32 %1052, 0
  br i1 %1053, label %1055, label %1054

1054:                                             ; preds = %1047
  call void @warn_for_sign_compare(i32 noundef %15, ptr noundef %1050, ptr noundef %1051, ptr noundef %1049, ptr noundef %1048, ptr noundef %1018, i32 noundef %1026) #20
  br label %1055

1055:                                             ; preds = %1054, %1047
  %1056 = load i8, ptr @in_late_binary_op, align 1, !tbaa !17
  %1057 = icmp eq i8 %1056, 0
  br i1 %1057, label %1058, label %1079

1058:                                             ; preds = %1055
  %1059 = load i8, ptr %11, align 1, !tbaa !17
  %1060 = icmp eq i8 %1059, 0
  br i1 %1060, label %1065, label %1061

1061:                                             ; preds = %1058
  %1062 = load i64, ptr %1049, align 8
  %1063 = and i64 %1062, 65535
  %1064 = icmp eq i64 %1063, 23
  br i1 %1064, label %1068, label %1065

1065:                                             ; preds = %1061, %1058
  %1066 = zext i1 %1060 to i8
  %1067 = call ptr @c_wrap_maybe_const(ptr noundef %1049, i8 noundef zeroext %1066) #20
  br label %1068

1068:                                             ; preds = %1065, %1061
  %1069 = phi ptr [ %1067, %1065 ], [ %1049, %1061 ]
  %1070 = load i8, ptr %12, align 1, !tbaa !17
  %1071 = icmp eq i8 %1070, 0
  br i1 %1071, label %1076, label %1072

1072:                                             ; preds = %1068
  %1073 = load i64, ptr %1048, align 8
  %1074 = and i64 %1073, 65535
  %1075 = icmp eq i64 %1074, 23
  br i1 %1075, label %1079, label %1076

1076:                                             ; preds = %1072, %1068
  %1077 = zext i1 %1071 to i8
  %1078 = call ptr @c_wrap_maybe_const(ptr noundef %1048, i8 noundef zeroext %1077) #20
  br label %1079

1079:                                             ; preds = %1072, %1076, %1055
  %1080 = phi ptr [ %1048, %1055 ], [ %1078, %1076 ], [ %1048, %1072 ]
  %1081 = phi ptr [ %1049, %1055 ], [ %1069, %1076 ], [ %1069, %1072 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %12) #20
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #20
  br label %1082

1082:                                             ; preds = %1023, %1079
  %1083 = phi ptr [ %1025, %1023 ], [ %1080, %1079 ]
  %1084 = phi ptr [ %1024, %1023 ], [ %1081, %1079 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #20
  br label %1086

1085:                                             ; preds = %1020
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #20
  br label %1188

1086:                                             ; preds = %1015, %1082, %798, %777
  %1087 = phi ptr [ null, %798 ], [ null, %777 ], [ %1016, %1082 ], [ %1016, %1015 ]
  %1088 = phi i32 [ %784, %798 ], [ %784, %777 ], [ 1, %1082 ], [ %1017, %1015 ]
  %1089 = phi ptr [ %783, %798 ], [ %783, %777 ], [ %1018, %1082 ], [ %1018, %1015 ]
  %1090 = phi i32 [ %782, %798 ], [ %782, %777 ], [ %1026, %1082 ], [ %782, %1015 ]
  %1091 = phi ptr [ %779, %798 ], [ %779, %777 ], [ %1083, %1082 ], [ %779, %1015 ]
  %1092 = phi ptr [ %778, %798 ], [ %778, %777 ], [ %1084, %1082 ], [ %1019, %1015 ]
  %1093 = icmp eq ptr %1089, null
  br i1 %1093, label %1094, label %1100

1094:                                             ; preds = %1086
  %1095 = getelementptr inbounds %struct.tree_common, ptr %1092, i64 0, i32 2
  %1096 = load ptr, ptr %1095, align 8, !tbaa !17
  %1097 = getelementptr inbounds %struct.tree_common, ptr %1091, i64 0, i32 2
  %1098 = load ptr, ptr %1097, align 8, !tbaa !17
  call void @binary_op_error(i32 noundef %15, i32 noundef %1, ptr noundef %1096, ptr noundef %1098) #20
  %1099 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

1100:                                             ; preds = %1086
  %1101 = icmp eq ptr %785, null
  br i1 %1101, label %1102, label %1111

1102:                                             ; preds = %1100
  %1103 = icmp eq ptr %183, %88
  %1104 = icmp eq ptr %187, %90
  %1105 = and i1 %1103, %1104
  br i1 %1105, label %1111, label %1106

1106:                                             ; preds = %1102
  %1107 = and i1 %185, %786
  br i1 %1107, label %1109, label %1108

1108:                                             ; preds = %1106
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9836, ptr noundef nonnull @.str.8) #20
  br label %1109

1109:                                             ; preds = %1106, %1108
  %1110 = call fastcc ptr @c_common_type(ptr noundef nonnull %88, ptr noundef nonnull %90)
  br label %1111

1111:                                             ; preds = %1102, %1109, %1100
  %1112 = phi ptr [ %1089, %1109 ], [ %785, %1100 ], [ %1089, %1102 ]
  %1113 = phi ptr [ %1110, %1109 ], [ null, %1100 ], [ null, %1102 ]
  %1114 = icmp eq i32 %1088, 0
  br i1 %1114, label %1115, label %1170

1115:                                             ; preds = %1111
  %1116 = getelementptr inbounds %struct.tree_common, ptr %1092, i64 0, i32 2
  %1117 = load ptr, ptr %1116, align 8, !tbaa !17
  %1118 = icmp eq ptr %1117, %1089
  br i1 %1118, label %1132, label %1119

1119:                                             ; preds = %1115
  %1120 = icmp eq ptr %1113, null
  br i1 %1120, label %1137, label %1121

1121:                                             ; preds = %1119
  %1122 = load i64, ptr %1117, align 8
  %1123 = and i64 %1122, 65535
  %1124 = icmp ne i64 %1123, 8
  %1125 = icmp eq ptr %1117, %1113
  %1126 = or i1 %1125, %1124
  br i1 %1126, label %1129, label %1127

1127:                                             ; preds = %1121
  %1128 = call ptr @convert_and_check(ptr noundef nonnull %1113, ptr noundef nonnull %1092) #20
  br label %1129

1129:                                             ; preds = %1127, %1121
  %1130 = phi ptr [ %1128, %1127 ], [ %1092, %1121 ]
  %1131 = call ptr @convert(ptr noundef nonnull %1089, ptr noundef %1130) #20
  br label %1132

1132:                                             ; preds = %1115, %1129
  %1133 = phi ptr [ %1131, %1129 ], [ %1092, %1115 ]
  %1134 = getelementptr inbounds %struct.tree_common, ptr %1091, i64 0, i32 2
  %1135 = load ptr, ptr %1134, align 8, !tbaa !17
  %1136 = icmp eq ptr %1135, %1089
  br i1 %1136, label %1158, label %1142

1137:                                             ; preds = %1119
  %1138 = call ptr @convert_and_check(ptr noundef nonnull %1089, ptr noundef nonnull %1092) #20
  %1139 = getelementptr inbounds %struct.tree_common, ptr %1091, i64 0, i32 2
  %1140 = load ptr, ptr %1139, align 8, !tbaa !17
  %1141 = icmp eq ptr %1140, %1089
  br i1 %1141, label %1158, label %1144

1142:                                             ; preds = %1132
  %1143 = icmp eq ptr %1113, null
  br i1 %1143, label %1144, label %1147

1144:                                             ; preds = %1137, %1142
  %1145 = phi ptr [ %1133, %1142 ], [ %1138, %1137 ]
  %1146 = call ptr @convert_and_check(ptr noundef nonnull %1089, ptr noundef nonnull %1091) #20
  br label %1158

1147:                                             ; preds = %1142
  %1148 = load i64, ptr %1135, align 8
  %1149 = and i64 %1148, 65535
  %1150 = icmp ne i64 %1149, 8
  %1151 = icmp eq ptr %1135, %1113
  %1152 = or i1 %1151, %1150
  br i1 %1152, label %1155, label %1153

1153:                                             ; preds = %1147
  %1154 = call ptr @convert_and_check(ptr noundef nonnull %1113, ptr noundef nonnull %1091) #20
  br label %1155

1155:                                             ; preds = %1153, %1147
  %1156 = phi ptr [ %1154, %1153 ], [ %1091, %1147 ]
  %1157 = call ptr @convert(ptr noundef nonnull %1089, ptr noundef %1156) #20
  br label %1158

1158:                                             ; preds = %1137, %1132, %1144, %1155
  %1159 = phi ptr [ %1133, %1155 ], [ %1145, %1144 ], [ %1133, %1132 ], [ %1138, %1137 ]
  %1160 = phi ptr [ %1157, %1155 ], [ %1146, %1144 ], [ %1091, %1132 ], [ %1091, %1137 ]
  %1161 = load i64, ptr %1159, align 8
  %1162 = and i64 %1161, 65535
  %1163 = icmp eq i64 %1162, 0
  br i1 %1163, label %1168, label %1164

1164:                                             ; preds = %1158
  %1165 = load i64, ptr %1160, align 8
  %1166 = and i64 %1165, 65535
  %1167 = icmp eq i64 %1166, 0
  br i1 %1167, label %1168, label %1170

1168:                                             ; preds = %1164, %1158
  %1169 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %1228

1170:                                             ; preds = %1164, %1111
  %1171 = phi ptr [ %1091, %1111 ], [ %1160, %1164 ]
  %1172 = phi ptr [ %1092, %1111 ], [ %1159, %1164 ]
  %1173 = icmp eq i8 %781, 0
  br i1 %1173, label %1181, label %1174

1174:                                             ; preds = %1170
  %1175 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %1176 = icmp eq i32 %1175, 0
  br i1 %1176, label %1179, label %1177

1177:                                             ; preds = %1174
  %1178 = call ptr @fold_build2_initializer_loc(i32 noundef %15, i32 noundef %1090, ptr noundef nonnull %1112, ptr noundef %1172, ptr noundef %1171) #20
  br label %1183

1179:                                             ; preds = %1174
  %1180 = call ptr @fold_build2_stat_loc(i32 noundef %15, i32 noundef %1090, ptr noundef nonnull %1112, ptr noundef %1172, ptr noundef %1171) #20
  br label %1183

1181:                                             ; preds = %1170
  %1182 = call ptr @build2_stat(i32 noundef %1090, ptr noundef nonnull %1112, ptr noundef %1172, ptr noundef %1171) #20
  br label %1183

1183:                                             ; preds = %1177, %1179, %1181
  %1184 = phi ptr [ %1182, %1181 ], [ %1178, %1177 ], [ %1180, %1179 ]
  %1185 = icmp eq ptr %1087, null
  br i1 %1185, label %1188, label %1186

1186:                                             ; preds = %1183
  %1187 = call ptr @convert(ptr noundef nonnull %1087, ptr noundef %1184) #20
  br label %1188

1188:                                             ; preds = %948, %1085, %1183, %1186, %217, %212, %199, %193
  %1189 = phi ptr [ %1113, %1186 ], [ %1113, %1183 ], [ null, %212 ], [ null, %217 ], [ null, %193 ], [ null, %199 ], [ null, %1085 ], [ %843, %948 ]
  %1190 = phi i8 [ %780, %1186 ], [ %780, %1183 ], [ %79, %212 ], [ %79, %217 ], [ %79, %193 ], [ %79, %199 ], [ %780, %1085 ], [ %780, %948 ]
  %1191 = phi ptr [ %1187, %1186 ], [ %1184, %1183 ], [ %213, %212 ], [ %218, %217 ], [ %194, %193 ], [ %200, %199 ], [ %1021, %1085 ], [ %951, %948 ]
  %1192 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %1193 = icmp eq ptr %1191, %1192
  br i1 %1193, label %1194, label %1195

1194:                                             ; preds = %1188
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9864, ptr noundef nonnull @.str.8) #20
  br label %1195

1195:                                             ; preds = %1188, %1194
  %1196 = load i64, ptr %1191, align 8
  %1197 = and i64 %1196, 65535
  %1198 = icmp eq i64 %1197, 23
  br i1 %1198, label %1199, label %1211

1199:                                             ; preds = %1195
  %1200 = and i64 %1196, 134217728
  %1201 = icmp ne i64 %1200, 0
  %1202 = icmp ne i8 %1190, 0
  %1203 = select i1 %1201, i1 true, i1 %1202
  br i1 %1203, label %1221, label %1204

1204:                                             ; preds = %1199
  br i1 %76, label %1205, label %1207

1205:                                             ; preds = %1204
  %1206 = call fastcc ptr @note_integer_operands(ptr noundef nonnull %1191)
  br label %1221

1207:                                             ; preds = %1204
  %1208 = getelementptr inbounds %struct.tree_common, ptr %1191, i64 0, i32 2
  %1209 = load ptr, ptr %1208, align 8, !tbaa !17
  %1210 = call ptr @build1_stat(i32 noundef 116, ptr noundef %1209, ptr noundef nonnull %1191) #20
  br label %1221

1211:                                             ; preds = %1195
  %1212 = load i8, ptr @in_late_binary_op, align 1
  %1213 = icmp eq i8 %1212, 0
  %1214 = select i1 %76, i1 %1213, i1 false
  br i1 %1214, label %1215, label %1221

1215:                                             ; preds = %1211
  %1216 = getelementptr inbounds %struct.tree_common, ptr %1191, i64 0, i32 2
  %1217 = load ptr, ptr %1216, align 8, !tbaa !17
  %1218 = call ptr @build2_stat(i32 noundef 189, ptr noundef %1217, ptr noundef null, ptr noundef nonnull %1191) #20
  %1219 = load i64, ptr %1218, align 8
  %1220 = or i64 %1219, 8589934592
  store i64 %1220, ptr %1218, align 8
  br label %1221

1221:                                             ; preds = %1199, %1205, %1207, %1211, %1215
  %1222 = phi ptr [ %1191, %1211 ], [ %1218, %1215 ], [ %1206, %1205 ], [ %1210, %1207 ], [ %1191, %1199 ]
  %1223 = icmp eq ptr %1189, null
  br i1 %1223, label %1226, label %1224

1224:                                             ; preds = %1221
  %1225 = call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %1189, ptr noundef %1222) #20
  br label %1226

1226:                                             ; preds = %1224, %1221
  %1227 = phi ptr [ %1225, %1224 ], [ %1222, %1221 ]
  call void @protected_set_expr_location(ptr noundef %1227, i32 noundef %15) #20
  br label %1228

1228:                                             ; preds = %125, %878, %811, %715, %607, %1226, %1168, %1094, %775, %133
  %1229 = phi ptr [ %134, %133 ], [ %1227, %1226 ], [ %1169, %1168 ], [ %1099, %1094 ], [ %776, %775 ], [ %716, %715 ], [ %608, %607 ], [ %879, %878 ], [ %812, %811 ], [ %99, %125 ]
  ret ptr %1229
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_external_ref(i32 noundef %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #9 {
  %5 = tail call ptr @lookup_name(ptr noundef %1) #20
  %6 = tail call ptr @objc_lookup_ivar(ptr noundef %5, ptr noundef %1) #20
  store ptr null, ptr %3, align 8, !tbaa !6
  %7 = icmp eq ptr %6, null
  %8 = load ptr, ptr @global_trees, align 16
  %9 = icmp eq ptr %6, %8
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %14, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  store ptr %13, ptr %3, align 8, !tbaa !6
  br label %21

14:                                               ; preds = %4
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %14
  %17 = tail call ptr @implicitly_declare(i32 noundef %0, ptr noundef %1) #20
  br label %21

18:                                               ; preds = %14
  br i1 %9, label %185, label %19

19:                                               ; preds = %18
  tail call void @undeclared_variable(i32 noundef %0, ptr noundef %1) #20
  %20 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %185

21:                                               ; preds = %16, %11
  %22 = phi ptr [ %6, %11 ], [ %17, %16 ]
  %23 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %26 = icmp eq ptr %24, %25
  br i1 %26, label %185, label %27

27:                                               ; preds = %21
  %28 = load i64, ptr %22, align 8
  %29 = and i64 %28, 1073741824
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  tail call void @warn_deprecated_use(ptr noundef nonnull %22, ptr noundef null) #20
  %32 = load i64, ptr %22, align 8
  br label %33

33:                                               ; preds = %31, %27
  %34 = phi i64 [ %32, %31 ], [ %28, %27 ]
  %35 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %36 = icmp eq ptr %22, %35
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = or i64 %34, 16777216
  store i64 %38, ptr %22, align 8
  br label %39

39:                                               ; preds = %37, %33
  %40 = phi i64 [ %38, %37 ], [ %34, %33 ]
  %41 = and i64 %40, 65535
  %42 = icmp ne i64 %41, 29
  %43 = load i32, ptr @in_alignof, align 4
  %44 = icmp ne i32 %43, 0
  %45 = select i1 %42, i1 true, i1 %44
  br i1 %45, label %112, label %46

46:                                               ; preds = %39
  %47 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %48 = icmp ne i32 %47, 0
  %49 = load i32, ptr @in_typeof, align 4
  %50 = icmp ne i32 %49, 0
  %51 = select i1 %48, i1 true, i1 %50
  br i1 %51, label %56, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.tree_decl_common, ptr %22, i64 0, i32 2
  %54 = load i64, ptr %53, align 8
  %55 = or i64 %54, 1048576
  store i64 %55, ptr %53, align 8
  br label %112

56:                                               ; preds = %46
  %57 = getelementptr inbounds %struct.tree_decl_common, ptr %22, i64 0, i32 5
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  %59 = icmp eq ptr %58, null
  br i1 %59, label %60, label %112

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.tree_decl_common, ptr %22, i64 0, i32 2
  %62 = load i64, ptr %61, align 8
  %63 = and i64 %62, 33554432
  %64 = icmp ne i64 %63, 0
  %65 = and i64 %40, 134217728
  %66 = icmp eq i64 %65, 0
  %67 = and i1 %66, %64
  br i1 %67, label %68, label %112

68:                                               ; preds = %60
  store i64 24, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 5), align 8, !tbaa !85
  %69 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 4), align 8, !tbaa !87
  %70 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 3), align 8, !tbaa !88
  %71 = ptrtoint ptr %69 to i64
  %72 = ptrtoint ptr %70 to i64
  %73 = sub i64 %71, %72
  %74 = icmp slt i64 %73, 24
  br i1 %74, label %75, label %78

75:                                               ; preds = %68
  tail call void @_obstack_newchunk(ptr noundef nonnull @parser_obstack, i32 noundef 24) #20
  %76 = load i64, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 5), align 8, !tbaa !85
  %77 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 3), align 8, !tbaa !88
  br label %78

78:                                               ; preds = %75, %68
  %79 = phi ptr [ %70, %68 ], [ %77, %75 ]
  %80 = phi i64 [ 24, %68 ], [ %76, %75 ]
  %81 = getelementptr inbounds i8, ptr %79, i64 %80
  %82 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 2), align 8, !tbaa !89
  %83 = icmp eq ptr %81, %82
  br i1 %83, label %84, label %87

84:                                               ; preds = %78
  %85 = load i8, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 10), align 8
  %86 = or i8 %85, 2
  store i8 %86, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 10), align 8
  br label %87

87:                                               ; preds = %78, %84
  %88 = ptrtoint ptr %82 to i64
  store i64 %88, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 5), align 8, !tbaa !85
  %89 = ptrtoint ptr %81 to i64
  %90 = load i32, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 6), align 8, !tbaa !90
  %91 = sext i32 %90 to i64
  %92 = add nsw i64 %91, %89
  %93 = xor i32 %90, -1
  %94 = sext i32 %93 to i64
  %95 = and i64 %92, %94
  %96 = inttoptr i64 %95 to ptr
  %97 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 1), align 8, !tbaa !91
  %98 = ptrtoint ptr %97 to i64
  %99 = sub i64 %95, %98
  %100 = load ptr, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 4), align 8, !tbaa !87
  %101 = ptrtoint ptr %100 to i64
  %102 = sub i64 %101, %98
  %103 = icmp sgt i64 %99, %102
  %104 = select i1 %103, ptr %100, ptr %96
  store ptr %104, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 3), align 8
  store ptr %104, ptr getelementptr inbounds (%struct.obstack, ptr @parser_obstack, i64 0, i32 2), align 8, !tbaa !89
  store ptr %22, ptr %82, align 8, !tbaa !92
  %105 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %106 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %107 = add nsw i32 %106, %105
  %108 = getelementptr inbounds %struct.maybe_used_decl, ptr %82, i64 0, i32 1
  store i32 %107, ptr %108, align 8, !tbaa !94
  %109 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %110 = getelementptr inbounds %struct.maybe_used_decl, ptr %82, i64 0, i32 2
  store ptr %109, ptr %110, align 8, !tbaa !95
  store ptr %82, ptr @maybe_used_decls, align 8, !tbaa !6
  %111 = load i64, ptr %22, align 8
  br label %112

112:                                              ; preds = %52, %87, %60, %56, %39
  %113 = phi i64 [ %40, %52 ], [ %111, %87 ], [ %40, %60 ], [ %40, %56 ], [ %40, %39 ]
  %114 = and i64 %113, 65535
  %115 = icmp eq i64 %114, 33
  br i1 %115, label %116, label %139

116:                                              ; preds = %112
  %117 = load ptr, ptr %23, align 8, !tbaa !17
  tail call void @used_types_insert(ptr noundef %117) #20
  %118 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %134, label %120

120:                                              ; preds = %116
  %121 = load ptr, ptr %23, align 8, !tbaa !17
  %122 = load i64, ptr %121, align 8
  %123 = and i64 %122, 65535
  %124 = icmp eq i64 %123, 6
  br i1 %124, label %125, label %134

125:                                              ; preds = %120
  %126 = getelementptr inbounds %struct.tree_type, ptr %121, i64 0, i32 6
  %127 = load i32, ptr %126, align 4
  %128 = and i32 %127, 134217728
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %125
  %131 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.30) #20
  %132 = getelementptr inbounds %struct.tree_decl_minimal, ptr %22, i64 0, i32 1
  %133 = load i32, ptr %132, align 8, !tbaa !17
  tail call void (i32, ptr, ...) @inform(i32 noundef %133, ptr noundef nonnull @.str.31) #20
  br label %134

134:                                              ; preds = %130, %125, %120, %116
  %135 = getelementptr inbounds %struct.tree_decl_common, ptr %22, i64 0, i32 5
  %136 = load ptr, ptr %135, align 8, !tbaa !17
  %137 = load i64, ptr %136, align 8
  %138 = or i64 %137, 131072
  store i64 %138, ptr %136, align 8
  br label %185

139:                                              ; preds = %112
  %140 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %141 = icmp eq ptr %140, null
  br i1 %141, label %185, label %142

142:                                              ; preds = %139
  %143 = getelementptr inbounds %struct.tree_decl_minimal, ptr %140, i64 0, i32 4
  %144 = load ptr, ptr %143, align 8, !tbaa !17
  %145 = icmp eq ptr %144, null
  br i1 %145, label %162, label %146

146:                                              ; preds = %142
  %147 = load i64, ptr %144, align 8
  %148 = and i64 %147, 65535
  %149 = icmp eq i64 %148, 40
  br i1 %149, label %162, label %150

150:                                              ; preds = %146
  %151 = trunc i64 %113 to i16
  switch i16 %151, label %162 [
    i16 32, label %152
    i16 34, label %152
    i16 29, label %152
  ]

152:                                              ; preds = %150, %150, %150
  %153 = tail call ptr @decl_function_context(ptr noundef nonnull %22) #20
  %154 = icmp eq ptr %153, null
  %155 = load ptr, ptr @current_function_decl, align 8
  %156 = icmp eq ptr %153, %155
  %157 = select i1 %154, i1 true, i1 %156
  br i1 %157, label %185, label %158

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.tree_decl_common, ptr %22, i64 0, i32 2
  %160 = load i64, ptr %159, align 8
  %161 = or i64 %160, 256
  store i64 %161, ptr %159, align 8
  br label %185

162:                                              ; preds = %150, %146, %142
  %163 = getelementptr inbounds %struct.tree_function_decl, ptr %140, i64 0, i32 5
  %164 = load i32, ptr %163, align 8
  %165 = and i32 %164, 2097152
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %185, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds %struct.tree_decl_common, ptr %140, i64 0, i32 2
  %169 = load i64, ptr %168, align 8
  %170 = and i64 %169, 33554432
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %185, label %172

172:                                              ; preds = %167
  %173 = trunc i64 %113 to i16
  switch i16 %173, label %185 [
    i16 32, label %174
    i16 29, label %174
  ]

174:                                              ; preds = %172, %172
  %175 = and i64 %113, 67174399
  %176 = icmp ne i64 %175, 32
  %177 = and i64 %113, 134217728
  %178 = icmp eq i64 %177, 0
  %179 = and i1 %176, %178
  br i1 %179, label %180, label %185

180:                                              ; preds = %174
  %181 = getelementptr inbounds %struct.tree_decl_minimal, ptr %22, i64 0, i32 4
  %182 = load ptr, ptr %181, align 8, !tbaa !17
  %183 = icmp eq ptr %182, %140
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  tail call void @record_inline_static(i32 noundef %0, ptr noundef nonnull %140, ptr noundef nonnull %22, i32 noundef 0) #20
  br label %185

185:                                              ; preds = %139, %134, %162, %167, %180, %184, %158, %152, %172, %174, %21, %18, %19
  %186 = phi ptr [ %20, %19 ], [ %6, %18 ], [ %24, %21 ], [ %136, %134 ], [ %22, %184 ], [ %22, %180 ], [ %22, %167 ], [ %22, %162 ], [ %22, %158 ], [ %22, %152 ], [ %22, %172 ], [ %22, %174 ], [ %22, %139 ]
  ret ptr %186
}

declare ptr @lookup_name(ptr noundef) local_unnamed_addr #3

declare ptr @objc_lookup_ivar(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @implicitly_declare(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @undeclared_variable(i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @used_types_insert(ptr noundef) local_unnamed_addr #3

declare void @inform(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

declare ptr @decl_function_context(ptr noundef) local_unnamed_addr #3

declare void @record_inline_static(i32 noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @_obstack_newchunk(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable
define dso_local void @pop_maybe_used(i8 noundef zeroext %0) local_unnamed_addr #15 {
  %2 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %3 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %4 = add nsw i32 %3, %2
  %5 = freeze i32 %4
  %6 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %7 = icmp eq ptr %6, null
  br i1 %7, label %43, label %8

8:                                                ; preds = %1
  %9 = icmp eq i8 %0, 0
  br i1 %9, label %10, label %19

10:                                               ; preds = %8, %15
  %11 = phi ptr [ %17, %15 ], [ %6, %8 ]
  %12 = getelementptr inbounds %struct.maybe_used_decl, ptr %11, i64 0, i32 1
  %13 = load i32, ptr %12, align 8, !tbaa !94
  %14 = icmp sgt i32 %13, %5
  br i1 %14, label %15, label %43

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.maybe_used_decl, ptr %11, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !6
  %18 = icmp eq ptr %17, null
  br i1 %18, label %43, label %10, !llvm.loop !96

19:                                               ; preds = %8
  %20 = icmp eq i32 %5, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %19, %26
  %22 = phi ptr [ %32, %26 ], [ %6, %19 ]
  %23 = getelementptr inbounds %struct.maybe_used_decl, ptr %22, i64 0, i32 1
  %24 = load i32, ptr %23, align 8, !tbaa !94
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %43

26:                                               ; preds = %21
  %27 = load ptr, ptr %22, align 8, !tbaa !92
  %28 = getelementptr inbounds %struct.tree_decl_common, ptr %27, i64 0, i32 2
  %29 = load i64, ptr %28, align 8
  %30 = or i64 %29, 1048576
  store i64 %30, ptr %28, align 8
  %31 = getelementptr inbounds %struct.maybe_used_decl, ptr %22, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !6
  %33 = icmp eq ptr %32, null
  br i1 %33, label %43, label %21, !llvm.loop !96

34:                                               ; preds = %19, %39
  %35 = phi ptr [ %41, %39 ], [ %6, %19 ]
  %36 = getelementptr inbounds %struct.maybe_used_decl, ptr %35, i64 0, i32 1
  %37 = load i32, ptr %36, align 8, !tbaa !94
  %38 = icmp sgt i32 %37, %5
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  store i32 %5, ptr %36, align 8, !tbaa !94
  %40 = getelementptr inbounds %struct.maybe_used_decl, ptr %35, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !6
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %34, !llvm.loop !96

43:                                               ; preds = %34, %39, %21, %26, %10, %15, %1
  %44 = phi ptr [ null, %1 ], [ null, %15 ], [ %11, %10 ], [ null, %26 ], [ %22, %21 ], [ null, %39 ], [ %35, %34 ]
  %45 = icmp eq i8 %0, 0
  %46 = icmp eq i32 %5, 0
  %47 = or i1 %45, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %43
  store ptr %44, ptr @maybe_used_decls, align 8, !tbaa !6
  br label %49

49:                                               ; preds = %43, %48
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_expr_sizeof_expr(ptr noalias nocapture writeonly sret(%struct.c_expr) align 8 %0, i32 noundef %1, ptr nocapture noundef readonly byval(%struct.c_expr) align 8 %2) local_unnamed_addr #9 {
  %4 = alloca i8, align 1
  %5 = load ptr, ptr %2, align 8, !tbaa !64
  %6 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %7 = icmp eq ptr %5, %6
  br i1 %7, label %8, label %28

8:                                                ; preds = %3
  store ptr %5, ptr %0, align 8, !tbaa !64
  %9 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 0, ptr %9, align 8, !tbaa !97
  %10 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %10, align 8, !tbaa !98
  %11 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %12 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %13 = add nsw i32 %12, %11
  %14 = freeze i32 %13
  %15 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %16 = icmp eq ptr %15, null
  br i1 %16, label %26, label %17

17:                                               ; preds = %8, %22
  %18 = phi ptr [ %24, %22 ], [ %15, %8 ]
  %19 = getelementptr inbounds %struct.maybe_used_decl, ptr %18, i64 0, i32 1
  %20 = load i32, ptr %19, align 8, !tbaa !94
  %21 = icmp sgt i32 %20, %14
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.maybe_used_decl, ptr %18, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !6
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %17, !llvm.loop !96

26:                                               ; preds = %17, %22, %8
  %27 = phi ptr [ null, %8 ], [ %18, %17 ], [ null, %22 ]
  store ptr %27, ptr @maybe_used_decls, align 8, !tbaa !6
  br label %113

28:                                               ; preds = %3
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #20
  store i8 1, ptr %4, align 1, !tbaa !17
  %29 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %30 = trunc i32 %29 to i8
  %31 = call ptr @c_fully_fold(ptr noundef %5, i8 noundef zeroext %30, ptr noundef nonnull %4) #20
  %32 = getelementptr inbounds %struct.tree_common, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = call ptr @c_sizeof_or_alignof_type(i32 noundef %1, ptr noundef %33, i8 noundef zeroext 1, i32 noundef 1) #20
  store ptr %34, ptr %0, align 8, !tbaa !64
  %35 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 0, ptr %35, align 8, !tbaa !97
  %36 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %36, align 8, !tbaa !98
  %37 = load ptr, ptr %32, align 8, !tbaa !17
  %38 = load i64, ptr %37, align 8
  %39 = and i64 %38, 65535
  %40 = icmp eq i64 %39, 15
  br i1 %40, label %41, label %58

41:                                               ; preds = %28
  %42 = getelementptr inbounds %struct.tree_type, ptr %37, i64 0, i32 6
  %43 = load i32, ptr %42, align 4
  %44 = and i32 %43, 67108864
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.tree_common, ptr %34, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = call ptr @build2_stat(i32 noundef 189, ptr noundef %48, ptr noundef nonnull %31, ptr noundef %34) #20
  store ptr %49, ptr %0, align 8, !tbaa !64
  %50 = load i8, ptr %4, align 1, !tbaa !17
  %51 = icmp eq i8 %50, 0
  %52 = load i64, ptr %49, align 8
  %53 = select i1 %51, i64 17179869184, i64 0
  %54 = and i64 %52, -17179869185
  %55 = or i64 %54, %53
  store i64 %55, ptr %49, align 8
  %56 = getelementptr inbounds %struct.tree_exp, ptr %49, i64 0, i32 1
  store i32 %1, ptr %56, align 8, !tbaa !17
  %57 = load ptr, ptr %32, align 8, !tbaa !17
  br label %58

58:                                               ; preds = %41, %28, %46
  %59 = phi ptr [ %37, %41 ], [ %37, %28 ], [ %57, %46 ]
  %60 = getelementptr inbounds %struct.tree_type, ptr %59, i64 0, i32 6
  %61 = load i32, ptr %60, align 4
  %62 = lshr i32 %61, 26
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %66 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %67 = add nsw i32 %66, %65
  %68 = freeze i32 %67
  %69 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %70 = icmp eq ptr %69, null
  br i1 %70, label %106, label %71

71:                                               ; preds = %58
  %72 = icmp eq i8 %64, 0
  br i1 %72, label %73, label %82

73:                                               ; preds = %71, %78
  %74 = phi ptr [ %80, %78 ], [ %69, %71 ]
  %75 = getelementptr inbounds %struct.maybe_used_decl, ptr %74, i64 0, i32 1
  %76 = load i32, ptr %75, align 8, !tbaa !94
  %77 = icmp sgt i32 %76, %68
  br i1 %77, label %78, label %106

78:                                               ; preds = %73
  %79 = getelementptr inbounds %struct.maybe_used_decl, ptr %74, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !6
  %81 = icmp eq ptr %80, null
  br i1 %81, label %106, label %73, !llvm.loop !96

82:                                               ; preds = %71
  %83 = icmp eq i32 %68, 0
  br i1 %83, label %84, label %97

84:                                               ; preds = %82, %89
  %85 = phi ptr [ %95, %89 ], [ %69, %82 ]
  %86 = getelementptr inbounds %struct.maybe_used_decl, ptr %85, i64 0, i32 1
  %87 = load i32, ptr %86, align 8, !tbaa !94
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %106

89:                                               ; preds = %84
  %90 = load ptr, ptr %85, align 8, !tbaa !92
  %91 = getelementptr inbounds %struct.tree_decl_common, ptr %90, i64 0, i32 2
  %92 = load i64, ptr %91, align 8
  %93 = or i64 %92, 1048576
  store i64 %93, ptr %91, align 8
  %94 = getelementptr inbounds %struct.maybe_used_decl, ptr %85, i64 0, i32 2
  %95 = load ptr, ptr %94, align 8, !tbaa !6
  %96 = icmp eq ptr %95, null
  br i1 %96, label %106, label %84, !llvm.loop !96

97:                                               ; preds = %82, %102
  %98 = phi ptr [ %104, %102 ], [ %69, %82 ]
  %99 = getelementptr inbounds %struct.maybe_used_decl, ptr %98, i64 0, i32 1
  %100 = load i32, ptr %99, align 8, !tbaa !94
  %101 = icmp sgt i32 %100, %68
  br i1 %101, label %102, label %106

102:                                              ; preds = %97
  store i32 %68, ptr %99, align 8, !tbaa !94
  %103 = getelementptr inbounds %struct.maybe_used_decl, ptr %98, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !6
  %105 = icmp eq ptr %104, null
  br i1 %105, label %106, label %97, !llvm.loop !96

106:                                              ; preds = %102, %97, %89, %84, %78, %73, %58
  %107 = phi ptr [ null, %58 ], [ %74, %73 ], [ null, %78 ], [ %85, %84 ], [ null, %89 ], [ %98, %97 ], [ null, %102 ]
  %108 = icmp eq i8 %64, 0
  %109 = icmp eq i32 %68, 0
  %110 = or i1 %108, %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %106
  store ptr %107, ptr @maybe_used_decls, align 8, !tbaa !6
  br label %112

112:                                              ; preds = %106, %111
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #20
  br label %113

113:                                              ; preds = %112, %26
  ret void
}

declare ptr @c_fully_fold(ptr noundef, i8 noundef zeroext, ptr noundef) local_unnamed_addr #3

declare ptr @c_sizeof_or_alignof_type(i32 noundef, ptr noundef, i8 noundef zeroext, i32 noundef) local_unnamed_addr #3

declare ptr @build2_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_expr_sizeof_type(ptr noalias nocapture writeonly sret(%struct.c_expr) align 8 %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = alloca ptr, align 8
  %5 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #20
  store ptr null, ptr %4, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #20
  store i8 1, ptr %5, align 1, !tbaa !17
  %6 = call ptr @groktypename(ptr noundef %2, ptr noundef nonnull %4, ptr noundef nonnull %5) #20
  %7 = call ptr @c_sizeof_or_alignof_type(i32 noundef %1, ptr noundef %6, i8 noundef zeroext 1, i32 noundef 1) #20
  store ptr %7, ptr %0, align 8, !tbaa !64
  %8 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 0, ptr %8, align 8, !tbaa !97
  %9 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %9, align 8, !tbaa !98
  %10 = load ptr, ptr %4, align 8, !tbaa !6
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %16

12:                                               ; preds = %3
  %13 = load i64, ptr %7, align 8
  %14 = and i64 %13, 65535
  %15 = icmp eq i64 %14, 23
  br i1 %15, label %16, label %39

16:                                               ; preds = %12, %3
  %17 = load i64, ptr %6, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 15
  br i1 %19, label %20, label %39

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %22 = load i32, ptr %21, align 4
  %23 = and i32 %22, 67108864
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %39, label %25

25:                                               ; preds = %20
  br i1 %11, label %26, label %28

26:                                               ; preds = %25
  %27 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  store ptr %27, ptr %4, align 8, !tbaa !6
  br label %28

28:                                               ; preds = %26, %25
  %29 = phi ptr [ %27, %26 ], [ %10, %25 ]
  %30 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = call ptr @build2_stat(i32 noundef 189, ptr noundef %31, ptr noundef %29, ptr noundef %7) #20
  store ptr %32, ptr %0, align 8, !tbaa !64
  %33 = load i8, ptr %5, align 1, !tbaa !17
  %34 = icmp eq i8 %33, 0
  %35 = load i64, ptr %32, align 8
  %36 = select i1 %34, i64 17179869184, i64 0
  %37 = and i64 %35, -17179869185
  %38 = or i64 %37, %36
  store i64 %38, ptr %32, align 8
  br label %39

39:                                               ; preds = %20, %16, %28, %12
  %40 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %41 = icmp eq ptr %6, %40
  br i1 %41, label %54, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %44 = load i32, ptr %43, align 4
  %45 = lshr i32 %44, 26
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %49 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %50 = add nsw i32 %49, %48
  %51 = freeze i32 %50
  %52 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %53 = icmp eq ptr %52, null
  br i1 %53, label %99, label %61

54:                                               ; preds = %39
  %55 = load i32, ptr @in_sizeof, align 4, !tbaa !21
  %56 = load i32, ptr @in_typeof, align 4, !tbaa !21
  %57 = add nsw i32 %56, %55
  %58 = freeze i32 %57
  %59 = load ptr, ptr @maybe_used_decls, align 8, !tbaa !6
  %60 = icmp eq ptr %59, null
  br i1 %60, label %106, label %63

61:                                               ; preds = %42
  %62 = icmp eq i8 %47, 0
  br i1 %62, label %63, label %75

63:                                               ; preds = %54, %61
  %64 = phi i32 [ %51, %61 ], [ %58, %54 ]
  %65 = phi ptr [ %52, %61 ], [ %59, %54 ]
  br label %66

66:                                               ; preds = %63, %71
  %67 = phi ptr [ %73, %71 ], [ %65, %63 ]
  %68 = getelementptr inbounds %struct.maybe_used_decl, ptr %67, i64 0, i32 1
  %69 = load i32, ptr %68, align 8, !tbaa !94
  %70 = icmp sgt i32 %69, %64
  br i1 %70, label %71, label %99

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.maybe_used_decl, ptr %67, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !6
  %74 = icmp eq ptr %73, null
  br i1 %74, label %99, label %66, !llvm.loop !96

75:                                               ; preds = %61
  %76 = icmp eq i32 %51, 0
  br i1 %76, label %77, label %90

77:                                               ; preds = %75, %82
  %78 = phi ptr [ %88, %82 ], [ %52, %75 ]
  %79 = getelementptr inbounds %struct.maybe_used_decl, ptr %78, i64 0, i32 1
  %80 = load i32, ptr %79, align 8, !tbaa !94
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %82, label %99

82:                                               ; preds = %77
  %83 = load ptr, ptr %78, align 8, !tbaa !92
  %84 = getelementptr inbounds %struct.tree_decl_common, ptr %83, i64 0, i32 2
  %85 = load i64, ptr %84, align 8
  %86 = or i64 %85, 1048576
  store i64 %86, ptr %84, align 8
  %87 = getelementptr inbounds %struct.maybe_used_decl, ptr %78, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !6
  %89 = icmp eq ptr %88, null
  br i1 %89, label %99, label %77, !llvm.loop !96

90:                                               ; preds = %75, %95
  %91 = phi ptr [ %97, %95 ], [ %52, %75 ]
  %92 = getelementptr inbounds %struct.maybe_used_decl, ptr %91, i64 0, i32 1
  %93 = load i32, ptr %92, align 8, !tbaa !94
  %94 = icmp sgt i32 %93, %51
  br i1 %94, label %95, label %99

95:                                               ; preds = %90
  store i32 %51, ptr %92, align 8, !tbaa !94
  %96 = getelementptr inbounds %struct.maybe_used_decl, ptr %91, i64 0, i32 2
  %97 = load ptr, ptr %96, align 8, !tbaa !6
  %98 = icmp eq ptr %97, null
  br i1 %98, label %99, label %90, !llvm.loop !96

99:                                               ; preds = %95, %90, %82, %77, %71, %66, %42
  %100 = phi i32 [ %51, %42 ], [ %64, %66 ], [ %64, %71 ], [ %51, %77 ], [ %51, %82 ], [ 1, %90 ], [ 1, %95 ]
  %101 = phi i8 [ %47, %42 ], [ 0, %66 ], [ 0, %71 ], [ 1, %77 ], [ 1, %82 ], [ 1, %90 ], [ 1, %95 ]
  %102 = phi ptr [ null, %42 ], [ null, %71 ], [ %67, %66 ], [ null, %82 ], [ %78, %77 ], [ null, %95 ], [ %91, %90 ]
  %103 = icmp eq i8 %101, 0
  %104 = icmp eq i32 %100, 0
  %105 = or i1 %103, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %54, %99
  %107 = phi ptr [ %102, %99 ], [ null, %54 ]
  store ptr %107, ptr @maybe_used_decls, align 8, !tbaa !6
  br label %108

108:                                              ; preds = %99, %106
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #20
  ret void
}

declare ptr @groktypename(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_function_call(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call i32 @list_length(ptr noundef %2) #20
  %5 = tail call ptr @vec_gc_p_reserve_exact(ptr noundef null, i32 noundef %4) #20
  %6 = icmp eq ptr %2, null
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = load i32, ptr %5, align 8, !tbaa !99
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i32 [ %8, %7 ], [ %14, %9 ]
  %11 = phi ptr [ %2, %7 ], [ %18, %9 ]
  %12 = getelementptr inbounds %struct.tree_list, ptr %11, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = add i32 %10, 1
  store i32 %14, ptr %5, align 8, !tbaa !99
  %15 = zext i32 %10 to i64
  %16 = getelementptr inbounds %struct.VEC_tree_base, ptr %5, i64 0, i32 2, i64 %15
  store ptr %13, ptr %16, align 8, !tbaa !6
  %17 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %9, !llvm.loop !101

20:                                               ; preds = %9
  %21 = tail call ptr @build_function_call_vec(i32 noundef %0, ptr noundef %1, ptr noundef nonnull %5, ptr noundef null)
  br label %25

22:                                               ; preds = %3
  %23 = tail call ptr @build_function_call_vec(i32 noundef %0, ptr noundef %1, ptr noundef %5, ptr noundef null)
  %24 = icmp eq ptr %5, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %20, %22
  %26 = phi ptr [ %21, %20 ], [ %23, %22 ]
  tail call void @ggc_free(ptr noundef nonnull %5) #20
  br label %27

27:                                               ; preds = %22, %25
  %28 = phi ptr [ %23, %22 ], [ %26, %25 ]
  ret ptr %28
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_function_call_vec(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef readonly %3) local_unnamed_addr #9 {
  %5 = load ptr, ptr @global_trees, align 16
  br label %6

6:                                                ; preds = %14, %4
  %7 = phi ptr [ %1, %4 ], [ %12, %14 ]
  %8 = load i64, ptr %7, align 8
  %9 = trunc i64 %8 to i16
  switch i16 %9, label %20 [
    i16 116, label %10
    i16 113, label %10
    i16 117, label %10
  ]

10:                                               ; preds = %6, %6, %6
  %11 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = icmp eq ptr %12, %5
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = icmp eq ptr %16, %18
  br i1 %19, label %6, label %20, !llvm.loop !102

20:                                               ; preds = %6, %10, %14
  %21 = and i64 %8, 65535
  %22 = icmp eq i64 %21, 29
  br i1 %22, label %23, label %29

23:                                               ; preds = %20
  %24 = tail call ptr @resolve_overloaded_builtin(i32 noundef %0, ptr noundef nonnull %7, ptr noundef %2) #20
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %727

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.tree_decl_minimal, ptr %7, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  br label %29

29:                                               ; preds = %26, %20
  %30 = phi ptr [ %7, %26 ], [ null, %20 ]
  %31 = phi ptr [ %28, %26 ], [ null, %20 ]
  %32 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = load i64, ptr %33, align 8
  %35 = and i64 %34, 65535
  %36 = icmp eq i64 %35, 20
  br i1 %36, label %37, label %59

37:                                               ; preds = %29
  %38 = load ptr, ptr @global_trees, align 16
  br label %39

39:                                               ; preds = %47, %37
  %40 = phi ptr [ %7, %37 ], [ %45, %47 ]
  %41 = load i64, ptr %40, align 8
  %42 = trunc i64 %41 to i16
  switch i16 %42, label %51 [
    i16 116, label %43
    i16 113, label %43
    i16 117, label %43
  ]

43:                                               ; preds = %39, %39, %39
  %44 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = icmp eq ptr %45, %38
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  %50 = icmp eq ptr %33, %49
  br i1 %50, label %39, label %51, !llvm.loop !67

51:                                               ; preds = %47, %43, %39
  %52 = load i64, ptr %7, align 8
  %53 = and i64 %52, 8388608
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = or i64 %41, 8388608
  store i64 %56, ptr %40, align 8
  br label %57

57:                                               ; preds = %51, %55
  %58 = tail call ptr @build_unary_op(i32 noundef %0, i32 noundef 121, ptr noundef nonnull %40, i32 noundef 0)
  br label %59

59:                                               ; preds = %57, %29
  %60 = phi ptr [ %58, %57 ], [ %7, %29 ]
  %61 = icmp eq ptr %2, null
  br i1 %61, label %69, label %62

62:                                               ; preds = %59
  %63 = load i32, ptr %2, align 8, !tbaa !99
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds %struct.VEC_tree_base, ptr %2, i64 0, i32 2, i64 0
  %67 = load ptr, ptr %66, align 8, !tbaa !6
  %68 = tail call ptr @objc_rewrite_function_call(ptr noundef %60, ptr noundef %67) #20
  br label %69

69:                                               ; preds = %59, %65, %62
  %70 = phi ptr [ %60, %62 ], [ %68, %65 ], [ %60, %59 ]
  %71 = tail call ptr @c_fully_fold(ptr noundef %70, i8 noundef zeroext 0, ptr noundef null) #20
  %72 = getelementptr inbounds %struct.tree_common, ptr %71, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = load i64, ptr %73, align 8
  %75 = trunc i64 %74 to i16
  switch i16 %75, label %84 [
    i16 0, label %76
    i16 10, label %78
  ]

76:                                               ; preds = %69
  %77 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %727

78:                                               ; preds = %69
  %79 = getelementptr inbounds %struct.tree_common, ptr %73, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = load i64, ptr %80, align 8
  %82 = and i64 %81, 65535
  %83 = icmp eq i64 %82, 20
  br i1 %83, label %86, label %84

84:                                               ; preds = %69, %78
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.32, ptr noundef nonnull %71) #20
  %85 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %727

86:                                               ; preds = %78
  %87 = icmp eq ptr %30, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %86
  %89 = load i64, ptr %30, align 8
  %90 = and i64 %89, 524288
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  store i32 1, ptr @current_function_returns_abnormally, align 4, !tbaa !21
  br label %96

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !17
  br label %105

96:                                               ; preds = %92, %88
  %97 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 1
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  %99 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = getelementptr inbounds %struct.tree_type, ptr %100, i64 0, i32 4
  %102 = load ptr, ptr %101, align 8, !tbaa !17
  %103 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.37, ptr noundef %102) #20
  %104 = icmp ne ptr %103, null
  br label %105

105:                                              ; preds = %93, %96
  %106 = phi ptr [ %95, %93 ], [ %98, %96 ]
  %107 = phi ptr [ %94, %93 ], [ %97, %96 ]
  %108 = phi i1 [ false, %93 ], [ %104, %96 ]
  %109 = load i64, ptr %71, align 8
  %110 = and i64 %109, 65535
  %111 = icmp eq i64 %110, 121
  br i1 %111, label %112, label %119

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = load i64, ptr %114, align 8
  %116 = and i64 %115, 65535
  %117 = icmp eq i64 %116, 29
  %118 = select i1 %117, ptr %114, ptr %71
  br label %119

119:                                              ; preds = %112, %105
  %120 = phi ptr [ %71, %105 ], [ %118, %112 ]
  %121 = tail call ptr @objc_message_selector() #20
  br i1 %108, label %122, label %136

122:                                              ; preds = %119
  %123 = getelementptr inbounds %struct.tree_function_decl, ptr %30, i64 0, i32 5
  %124 = load i32, ptr %123, align 8
  %125 = and i32 %124, 6144
  %126 = icmp eq i32 %125, 6144
  br i1 %126, label %127, label %136

127:                                              ; preds = %122
  %128 = and i32 %124, 2047
  %129 = add nsw i32 %128, -466
  %130 = icmp ult i32 %129, 16
  br i1 %130, label %131, label %136

131:                                              ; preds = %127
  %132 = trunc i32 %129 to i16
  %133 = lshr i16 -32241, %132
  %134 = and i16 %133, 1
  %135 = icmp ne i16 %134, 0
  br label %136

136:                                              ; preds = %127, %131, %122, %119
  %137 = phi i1 [ false, %119 ], [ false, %122 ], [ %135, %131 ], [ false, %127 ]
  br i1 %61, label %526, label %138

138:                                              ; preds = %136
  %139 = icmp ne ptr %121, null
  %140 = icmp eq ptr %3, null
  %141 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %142 = load i32, ptr %2, align 8, !tbaa !99
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %518, label %144

144:                                              ; preds = %138, %513
  %145 = phi i8 [ %509, %513 ], [ 0, %138 ]
  %146 = phi ptr [ %514, %513 ], [ %106, %138 ]
  %147 = phi i64 [ %158, %513 ], [ 0, %138 ]
  %148 = getelementptr inbounds %struct.VEC_tree_base, ptr %2, i64 0, i32 2, i64 %147
  %149 = load ptr, ptr %148, align 8, !tbaa !6
  %150 = icmp eq ptr %146, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %144
  %152 = getelementptr inbounds %struct.tree_list, ptr %146, i64 0, i32 2
  %153 = load ptr, ptr %152, align 8, !tbaa !17
  br label %154

154:                                              ; preds = %151, %144
  %155 = phi ptr [ %153, %151 ], [ null, %144 ]
  %156 = getelementptr inbounds %struct.tree_common, ptr %149, i64 0, i32 2
  %157 = load ptr, ptr %156, align 8, !tbaa !17
  %158 = add nuw nsw i64 %147, 1
  %159 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %160 = icmp eq ptr %155, %159
  br i1 %160, label %161, label %172

161:                                              ; preds = %154
  %162 = trunc i64 %147 to i32
  %163 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void (i32, ptr, ...) @error_at(i32 noundef %163, ptr noundef nonnull @.str.38, ptr noundef nonnull %120) #20
  br i1 %87, label %548, label %164

164:                                              ; preds = %161
  %165 = getelementptr inbounds %struct.tree_function_decl, ptr %30, i64 0, i32 5
  %166 = load i32, ptr %165, align 8
  %167 = and i32 %166, 6144
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %548

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.tree_decl_minimal, ptr %30, i64 0, i32 1
  %171 = load i32, ptr %170, align 8, !tbaa !17
  tail call void (i32, ptr, ...) @inform(i32 noundef %171, ptr noundef nonnull @.str.39) #20
  br label %548

172:                                              ; preds = %154
  %173 = trunc i64 %158 to i32
  %174 = icmp sgt i32 %173, 2
  %175 = and i1 %139, %174
  %176 = trunc i64 %147 to i32
  %177 = add i32 %176, -1
  %178 = select i1 %175, ptr %121, ptr %120
  %179 = select i1 %175, i32 %177, i32 %173
  %180 = load i64, ptr %149, align 8
  %181 = and i64 %180, 134283263
  %182 = icmp eq i64 %181, 23
  br i1 %182, label %183, label %214

183:                                              ; preds = %172
  %184 = tail call i32 @integer_zerop(ptr noundef nonnull %149) #20
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %214, label %186

186:                                              ; preds = %183
  %187 = load i64, ptr %157, align 8
  %188 = trunc i64 %187 to i16
  switch i16 %188, label %213 [
    i16 6, label %214
    i16 7, label %214
    i16 8, label %214
    i16 10, label %189
  ]

189:                                              ; preds = %186
  %190 = getelementptr inbounds %struct.tree_common, ptr %157, i64 0, i32 2
  %191 = load ptr, ptr %190, align 8, !tbaa !17
  %192 = load i64, ptr %191, align 8
  %193 = and i64 %192, 65535
  %194 = icmp eq i64 %193, 19
  br i1 %194, label %195, label %214

195:                                              ; preds = %189
  %196 = trunc i64 %192 to i32
  %197 = lshr i32 %196, 20
  %198 = and i32 %197, 1
  %199 = lshr i32 %196, 18
  %200 = and i32 %199, 2
  %201 = or i32 %198, %200
  %202 = getelementptr inbounds %struct.tree_type, ptr %191, i64 0, i32 6
  %203 = load i32, ptr %202, align 4
  %204 = lshr i32 %203, 11
  %205 = and i32 %204, 4
  %206 = lshr i64 %192, 48
  %207 = trunc i64 %206 to i32
  %208 = and i32 %207, 65280
  %209 = or i32 %201, %208
  %210 = or i32 %209, %205
  %211 = icmp eq i32 %210, 0
  %212 = zext i1 %211 to i8
  br label %214

213:                                              ; preds = %186
  br label %214

214:                                              ; preds = %213, %195, %189, %186, %186, %186, %183, %172
  %215 = phi i8 [ 0, %183 ], [ 0, %172 ], [ 1, %186 ], [ 0, %189 ], [ %212, %195 ], [ 1, %186 ], [ 1, %186 ], [ 0, %213 ]
  %216 = load i64, ptr %149, align 8
  %217 = and i64 %216, 65535
  %218 = icmp eq i64 %217, 190
  br i1 %218, label %219, label %226

219:                                              ; preds = %214
  %220 = icmp eq ptr %155, null
  %221 = select i1 %220, i1 %108, i1 false
  %222 = and i1 %137, %221
  br i1 %222, label %226, label %223

223:                                              ; preds = %219
  %224 = getelementptr inbounds %struct.tree_exp, ptr %149, i64 0, i32 3
  %225 = load ptr, ptr %224, align 8, !tbaa !17
  br label %226

226:                                              ; preds = %223, %219, %214
  %227 = phi ptr [ %149, %219 ], [ %225, %223 ], [ %149, %214 ]
  %228 = phi i1 [ true, %219 ], [ false, %223 ], [ true, %214 ]
  %229 = tail call ptr @c_fully_fold(ptr noundef %227, i8 noundef zeroext 0, ptr noundef null) #20
  %230 = load ptr, ptr @global_trees, align 16
  br label %231

231:                                              ; preds = %239, %226
  %232 = phi ptr [ %229, %226 ], [ %237, %239 ]
  %233 = load i64, ptr %232, align 8
  %234 = trunc i64 %233 to i16
  switch i16 %234, label %245 [
    i16 116, label %235
    i16 113, label %235
    i16 117, label %235
  ]

235:                                              ; preds = %231, %231, %231
  %236 = getelementptr inbounds %struct.tree_exp, ptr %232, i64 0, i32 3
  %237 = load ptr, ptr %236, align 8, !tbaa !17
  %238 = icmp eq ptr %237, %230
  br i1 %238, label %245, label %239

239:                                              ; preds = %235
  %240 = getelementptr inbounds %struct.tree_common, ptr %232, i64 0, i32 2
  %241 = load ptr, ptr %240, align 8, !tbaa !17
  %242 = getelementptr inbounds %struct.tree_common, ptr %237, i64 0, i32 2
  %243 = load ptr, ptr %242, align 8, !tbaa !17
  %244 = icmp eq ptr %241, %243
  br i1 %244, label %231, label %245, !llvm.loop !103

245:                                              ; preds = %239, %235, %231
  %246 = getelementptr inbounds %struct.tree_common, ptr %232, i64 0, i32 2
  %247 = load ptr, ptr %246, align 8, !tbaa !17
  %248 = icmp eq ptr %230, %232
  %249 = icmp eq ptr %247, %230
  %250 = select i1 %248, i1 true, i1 %249
  br i1 %250, label %257, label %251

251:                                              ; preds = %245
  %252 = getelementptr inbounds %struct.tree_type, ptr %247, i64 0, i32 2
  %253 = load ptr, ptr %252, align 8, !tbaa !17
  %254 = icmp eq ptr %253, null
  br i1 %254, label %255, label %257

255:                                              ; preds = %251
  tail call void @c_incomplete_type_error(ptr noundef nonnull %232, ptr noundef nonnull %247)
  %256 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %257

257:                                              ; preds = %255, %251, %245
  %258 = phi ptr [ %256, %255 ], [ %230, %251 ], [ %230, %245 ]
  %259 = phi ptr [ %256, %255 ], [ %232, %251 ], [ %230, %245 ]
  %260 = icmp eq ptr %155, null
  br i1 %260, label %471, label %261

261:                                              ; preds = %257
  %262 = icmp eq ptr %155, %258
  br i1 %262, label %267, label %263

263:                                              ; preds = %261
  %264 = getelementptr inbounds %struct.tree_type, ptr %155, i64 0, i32 2
  %265 = load ptr, ptr %264, align 8, !tbaa !17
  %266 = icmp eq ptr %265, null
  br i1 %266, label %267, label %268

267:                                              ; preds = %263, %261
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.40, i32 noundef %173) #20
  br label %505

268:                                              ; preds = %263
  %269 = load i32, ptr @warn_traditional_conversion, align 4, !tbaa !21
  %270 = icmp ne i32 %269, 0
  %271 = load i32, ptr @warn_traditional, align 4
  %272 = icmp ne i32 %271, 0
  %273 = select i1 %270, i1 true, i1 %272
  br i1 %273, label %274, label %435

274:                                              ; preds = %268
  %275 = getelementptr inbounds %struct.tree_type, ptr %155, i64 0, i32 6
  %276 = load i32, ptr %275, align 4
  %277 = and i32 %276, 1023
  %278 = load i64, ptr %155, align 8
  %279 = trunc i64 %278 to i32
  %280 = and i32 %279, 65535
  %281 = add nsw i32 %280, -6
  %282 = icmp ult i32 %281, 3
  br i1 %282, label %283, label %292

283:                                              ; preds = %274
  %284 = load i64, ptr %157, align 8
  %285 = and i64 %284, 65535
  %286 = icmp eq i64 %285, 9
  br i1 %286, label %287, label %292

287:                                              ; preds = %283
  %288 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.41, i32 noundef %179, ptr noundef %178) #20
  %289 = load i64, ptr %155, align 8
  %290 = trunc i64 %289 to i32
  %291 = and i32 %290, 65535
  br label %292

292:                                              ; preds = %287, %283, %274
  %293 = phi i32 [ %280, %274 ], [ %291, %287 ], [ %280, %283 ]
  %294 = phi i64 [ %278, %274 ], [ %289, %287 ], [ %278, %283 ]
  %295 = add nsw i32 %293, -9
  %296 = icmp ult i32 %295, -3
  br i1 %296, label %303, label %297

297:                                              ; preds = %292
  %298 = load i64, ptr %157, align 8
  %299 = and i64 %298, 65535
  %300 = icmp eq i64 %299, 13
  br i1 %300, label %301, label %303

301:                                              ; preds = %297
  %302 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.42, i32 noundef %179, ptr noundef %178) #20
  br label %435

303:                                              ; preds = %297, %292
  %304 = trunc i64 %294 to i16
  switch i16 %304, label %373 [
    i16 13, label %305
    i16 9, label %311
  ]

305:                                              ; preds = %303
  %306 = load i64, ptr %157, align 8
  %307 = and i64 %306, 65535
  %308 = icmp eq i64 %307, 9
  br i1 %308, label %309, label %319

309:                                              ; preds = %305
  %310 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.43, i32 noundef %179, ptr noundef %178) #20
  br label %435

311:                                              ; preds = %303
  %312 = load i64, ptr %157, align 8
  %313 = trunc i64 %312 to i32
  %314 = and i32 %313, 65535
  %315 = add nsw i32 %314, -6
  %316 = icmp ult i32 %315, 3
  br i1 %316, label %317, label %326

317:                                              ; preds = %311
  %318 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.44, i32 noundef %179, ptr noundef %178) #20
  br label %435

319:                                              ; preds = %305
  %320 = trunc i64 %306 to i32
  %321 = and i32 %320, 65535
  %322 = add nsw i32 %321, -6
  %323 = icmp ult i32 %322, 3
  br i1 %323, label %324, label %373

324:                                              ; preds = %319
  %325 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.45, i32 noundef %179, ptr noundef %178) #20
  br label %435

326:                                              ; preds = %311
  %327 = trunc i64 %312 to i16
  switch i16 %327, label %373 [
    i16 13, label %328
    i16 9, label %330
  ]

328:                                              ; preds = %326
  %329 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.46, i32 noundef %179, ptr noundef %178) #20
  br label %435

330:                                              ; preds = %326
  %331 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 31), align 8, !tbaa !6
  %332 = getelementptr inbounds %struct.tree_type, ptr %331, i64 0, i32 6
  %333 = load i32, ptr %332, align 4
  %334 = and i32 %333, 1023
  %335 = icmp ne i32 %277, %334
  %336 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 49), align 8
  %337 = icmp eq ptr %155, %336
  %338 = select i1 %335, i1 true, i1 %337
  br i1 %338, label %341, label %339

339:                                              ; preds = %330
  %340 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.47, i32 noundef %179, ptr noundef %178) #20
  br label %435

341:                                              ; preds = %330
  %342 = icmp eq ptr %155, %157
  br i1 %342, label %435, label %343

343:                                              ; preds = %341
  br i1 %337, label %356, label %344

344:                                              ; preds = %343
  %345 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 50), align 16, !tbaa !6
  %346 = icmp eq ptr %155, %345
  br i1 %346, label %356, label %347

347:                                              ; preds = %344
  %348 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 51), align 8, !tbaa !6
  %349 = icmp eq ptr %155, %348
  %350 = icmp eq ptr %157, %336
  %351 = select i1 %349, i1 true, i1 %350
  %352 = icmp eq ptr %157, %345
  %353 = select i1 %351, i1 true, i1 %352
  %354 = icmp eq ptr %157, %348
  %355 = select i1 %353, i1 true, i1 %354
  br i1 %355, label %356, label %435

356:                                              ; preds = %347, %344, %343
  %357 = getelementptr inbounds %struct.tree_type, ptr %157, i64 0, i32 6
  %358 = load i32, ptr %357, align 4
  %359 = and i32 %358, 1023
  %360 = icmp ugt i32 %277, %359
  br i1 %360, label %361, label %371

361:                                              ; preds = %356
  %362 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 51), align 8, !tbaa !6
  %363 = icmp ne ptr %155, %362
  %364 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 50), align 16
  %365 = icmp eq ptr %157, %364
  %366 = select i1 %363, i1 true, i1 %365
  %367 = icmp eq ptr %157, %336
  %368 = icmp ne ptr %155, %364
  %369 = select i1 %366, i1 %368, i1 false
  %370 = select i1 %369, i1 true, i1 %367
  br i1 %370, label %435, label %371

371:                                              ; preds = %361, %356
  %372 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.48, i32 noundef %179, ptr noundef %178, ptr noundef nonnull %155, ptr noundef nonnull %157) #20
  br label %435

373:                                              ; preds = %326, %319, %303
  %374 = load i32, ptr @warn_traditional_conversion, align 4, !tbaa !21
  %375 = icmp eq i32 %374, 0
  %376 = or i1 %296, %375
  br i1 %376, label %435, label %377

377:                                              ; preds = %373
  %378 = load i64, ptr %157, align 8
  %379 = trunc i64 %378 to i32
  %380 = and i32 %379, 65535
  %381 = add nsw i32 %380, -6
  %382 = icmp ult i32 %381, 3
  br i1 %382, label %383, label %435

383:                                              ; preds = %377
  %384 = tail call ptr @default_conversion(ptr noundef %259)
  %385 = getelementptr inbounds %struct.tree_common, ptr %384, i64 0, i32 2
  %386 = load ptr, ptr %385, align 8, !tbaa !17
  %387 = load i64, ptr %155, align 8
  %388 = and i64 %387, 65535
  %389 = icmp eq i64 %388, 6
  br i1 %389, label %390, label %396

390:                                              ; preds = %383
  %391 = getelementptr inbounds %struct.tree_type, ptr %155, i64 0, i32 16
  %392 = load ptr, ptr %391, align 8, !tbaa !17
  %393 = getelementptr inbounds %struct.tree_type, ptr %157, i64 0, i32 16
  %394 = load ptr, ptr %393, align 8, !tbaa !17
  %395 = icmp eq ptr %392, %394
  br i1 %395, label %435, label %396

396:                                              ; preds = %390, %383
  %397 = getelementptr inbounds %struct.tree_type, ptr %386, i64 0, i32 6
  %398 = load i32, ptr %397, align 4
  %399 = and i32 %398, 1023
  %400 = icmp eq i32 %277, %399
  br i1 %400, label %403, label %401

401:                                              ; preds = %396
  %402 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 203, ptr noundef nonnull @.str.49, i32 noundef %179, ptr noundef %178) #20
  br label %435

403:                                              ; preds = %396
  %404 = load i64, ptr %386, align 8
  %405 = xor i64 %404, %387
  %406 = and i64 %405, 2097152
  %407 = icmp eq i64 %406, 0
  %408 = or i1 %389, %407
  br i1 %408, label %435, label %409

409:                                              ; preds = %403
  %410 = load i64, ptr %259, align 8
  %411 = and i64 %410, 65535
  %412 = icmp eq i64 %411, 23
  br i1 %412, label %413, label %416

413:                                              ; preds = %409
  %414 = tail call i32 @int_fits_type_p(ptr noundef nonnull %259, ptr noundef nonnull %155) #20
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %435

416:                                              ; preds = %413, %409
  %417 = getelementptr inbounds %struct.tree_type, ptr %157, i64 0, i32 6
  %418 = load i32, ptr %417, align 4
  %419 = and i32 %418, 1023
  %420 = load i32, ptr %275, align 4
  %421 = and i32 %420, 1023
  %422 = icmp ult i32 %419, %421
  br i1 %422, label %423, label %427

423:                                              ; preds = %416
  %424 = load i64, ptr %157, align 8
  %425 = and i64 %424, 2097152
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %427, label %435

427:                                              ; preds = %423, %416
  %428 = load i64, ptr %155, align 8
  %429 = and i64 %428, 2097152
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %433, label %431

431:                                              ; preds = %427
  %432 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 203, ptr noundef nonnull @.str.50, i32 noundef %179, ptr noundef %178) #20
  br label %435

433:                                              ; preds = %427
  %434 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 203, ptr noundef nonnull @.str.51, i32 noundef %179, ptr noundef %178) #20
  br label %435

435:                                              ; preds = %433, %431, %423, %413, %403, %401, %390, %377, %373, %371, %361, %347, %341, %339, %328, %324, %317, %309, %301, %268
  br i1 %228, label %438, label %436

436:                                              ; preds = %435
  %437 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef %157, ptr noundef %259) #20
  br label %438

438:                                              ; preds = %436, %435
  %439 = phi ptr [ %259, %435 ], [ %437, %436 ]
  br i1 %140, label %443, label %440

440:                                              ; preds = %438
  %441 = getelementptr inbounds %struct.VEC_tree_base, ptr %3, i64 0, i32 2, i64 %147
  %442 = load ptr, ptr %441, align 8, !tbaa !6
  br label %443

443:                                              ; preds = %440, %438
  %444 = phi ptr [ %442, %440 ], [ null, %438 ]
  %445 = load i32, ptr @input_location, align 4, !tbaa !21
  %446 = tail call fastcc ptr @convert_for_assignment(i32 noundef %445, ptr noundef nonnull %155, ptr noundef %439, ptr noundef %444, i32 noundef 0, i8 noundef zeroext %215, ptr noundef %30, ptr noundef nonnull %120, i32 noundef %173)
  %447 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 88, i32 1), align 8, !tbaa !104
  br i1 %87, label %450, label %448

448:                                              ; preds = %443
  %449 = load ptr, ptr %141, align 8, !tbaa !17
  br label %450

450:                                              ; preds = %448, %443
  %451 = phi ptr [ %449, %448 ], [ null, %443 ]
  %452 = tail call zeroext i8 %447(ptr noundef %451) #20
  %453 = icmp eq i8 %452, 0
  br i1 %453, label %505, label %454

454:                                              ; preds = %450
  %455 = load i64, ptr %155, align 8
  %456 = trunc i64 %455 to i32
  %457 = and i32 %456, 65535
  %458 = add nsw i32 %457, -6
  %459 = icmp ult i32 %458, 3
  br i1 %459, label %460, label %505

460:                                              ; preds = %454
  %461 = getelementptr inbounds %struct.tree_type, ptr %155, i64 0, i32 6
  %462 = load i32, ptr %461, align 4
  %463 = and i32 %462, 1023
  %464 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %465 = getelementptr inbounds %struct.tree_type, ptr %464, i64 0, i32 6
  %466 = load i32, ptr %465, align 4
  %467 = and i32 %466, 1023
  %468 = icmp ult i32 %463, %467
  br i1 %468, label %469, label %505

469:                                              ; preds = %460
  %470 = tail call ptr @default_conversion(ptr noundef %446)
  br label %505

471:                                              ; preds = %257
  %472 = load i64, ptr %157, align 8
  %473 = and i64 %472, 65535
  %474 = icmp eq i64 %473, 9
  br i1 %474, label %475, label %494

475:                                              ; preds = %471
  %476 = getelementptr inbounds %struct.tree_type, ptr %157, i64 0, i32 6
  %477 = load i32, ptr %476, align 4
  %478 = and i32 %477, 1023
  %479 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 32), align 16, !tbaa !6
  %480 = getelementptr inbounds %struct.tree_type, ptr %479, i64 0, i32 6
  %481 = load i32, ptr %480, align 4
  %482 = and i32 %481, 1023
  %483 = icmp ult i32 %478, %482
  br i1 %483, label %484, label %494

484:                                              ; preds = %475
  %485 = lshr i32 %477, 16
  %486 = and i32 %485, 255
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %487
  %489 = load i8, ptr %488, align 1, !tbaa !17
  %490 = icmp eq i8 %489, 9
  br i1 %490, label %494, label %491

491:                                              ; preds = %484
  br i1 %108, label %505, label %492

492:                                              ; preds = %491
  %493 = tail call ptr @convert(ptr noundef nonnull %479, ptr noundef %259) #20
  br label %505

494:                                              ; preds = %484, %475, %471
  %495 = select i1 %228, i1 true, i1 %108
  br i1 %495, label %498, label %496

496:                                              ; preds = %494
  %497 = tail call ptr @convert(ptr noundef nonnull %157, ptr noundef %259) #20
  br label %505

498:                                              ; preds = %494
  %499 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 88, i32 14), align 8, !tbaa !105
  %500 = tail call ptr %499(ptr noundef %106, ptr noundef %30, ptr noundef %259) #20
  %501 = icmp eq ptr %500, null
  br i1 %501, label %503, label %502

502:                                              ; preds = %498
  tail call void (ptr, ...) @error(ptr noundef nonnull %500) #20
  br label %551

503:                                              ; preds = %498
  %504 = tail call ptr @default_conversion(ptr noundef %259)
  br label %505

505:                                              ; preds = %503, %496, %492, %491, %469, %460, %454, %450, %267
  %506 = phi ptr [ %259, %267 ], [ %504, %503 ], [ %497, %496 ], [ %493, %492 ], [ %470, %469 ], [ %446, %460 ], [ %446, %450 ], [ %446, %454 ], [ %259, %491 ]
  store ptr %506, ptr %148, align 8, !tbaa !6
  %507 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %508 = icmp eq ptr %506, %507
  %509 = select i1 %508, i8 1, i8 %145
  br i1 %150, label %513, label %510

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.tree_common, ptr %146, i64 0, i32 1
  %512 = load ptr, ptr %511, align 8, !tbaa !17
  br label %513

513:                                              ; preds = %510, %505
  %514 = phi ptr [ %512, %510 ], [ null, %505 ]
  %515 = load i32, ptr %2, align 8, !tbaa !99
  %516 = zext i32 %515 to i64
  %517 = icmp ult i64 %158, %516
  br i1 %517, label %144, label %518

518:                                              ; preds = %513, %138
  %519 = phi i64 [ 0, %138 ], [ %158, %513 ]
  %520 = phi ptr [ %106, %138 ], [ %514, %513 ]
  %521 = phi i8 [ 0, %138 ], [ %509, %513 ]
  %522 = phi i32 [ 0, %138 ], [ %515, %513 ]
  %523 = trunc i64 %519 to i32
  %524 = icmp eq i32 %522, %523
  br i1 %524, label %526, label %525

525:                                              ; preds = %518
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3043, ptr noundef nonnull @.str.8) #20
  br label %526

526:                                              ; preds = %525, %518, %136
  %527 = phi ptr [ %520, %518 ], [ %520, %525 ], [ %106, %136 ]
  %528 = phi i32 [ %522, %518 ], [ %523, %525 ], [ 0, %136 ]
  %529 = phi i8 [ %521, %518 ], [ %521, %525 ], [ 0, %136 ]
  %530 = icmp eq ptr %527, null
  br i1 %530, label %546, label %531

531:                                              ; preds = %526
  %532 = getelementptr inbounds %struct.tree_list, ptr %527, i64 0, i32 2
  %533 = load ptr, ptr %532, align 8, !tbaa !17
  %534 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %535 = icmp eq ptr %533, %534
  br i1 %535, label %546, label %536

536:                                              ; preds = %531
  %537 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void (i32, ptr, ...) @error_at(i32 noundef %537, ptr noundef nonnull @.str.52, ptr noundef nonnull %120) #20
  br i1 %87, label %551, label %538

538:                                              ; preds = %536
  %539 = getelementptr inbounds %struct.tree_function_decl, ptr %30, i64 0, i32 5
  %540 = load i32, ptr %539, align 8
  %541 = and i32 %540, 6144
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %543, label %551

543:                                              ; preds = %538
  %544 = getelementptr inbounds %struct.tree_decl_minimal, ptr %30, i64 0, i32 1
  %545 = load i32, ptr %544, align 8, !tbaa !17
  tail call void (i32, ptr, ...) @inform(i32 noundef %545, ptr noundef nonnull @.str.39) #20
  br label %551

546:                                              ; preds = %531, %526
  %547 = icmp eq i8 %529, 0
  br i1 %547, label %548, label %551

548:                                              ; preds = %546, %161, %164, %169
  %549 = phi i32 [ %162, %161 ], [ %162, %164 ], [ %162, %169 ], [ %528, %546 ]
  %550 = icmp slt i32 %549, 0
  br i1 %550, label %551, label %553

551:                                              ; preds = %502, %536, %538, %543, %546, %548
  %552 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %727

553:                                              ; preds = %548
  %554 = load i64, ptr %71, align 8
  %555 = trunc i64 %554 to i16
  switch i16 %555, label %627 [
    i16 116, label %556
    i16 113, label %556
  ]

556:                                              ; preds = %553, %553
  %557 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %558 = load ptr, ptr %557, align 8, !tbaa !17
  %559 = load i64, ptr %558, align 8
  %560 = and i64 %559, 65535
  %561 = icmp eq i64 %560, 121
  br i1 %561, label %562, label %627

562:                                              ; preds = %556
  %563 = getelementptr inbounds %struct.tree_exp, ptr %558, i64 0, i32 3
  %564 = load ptr, ptr %563, align 8, !tbaa !17
  %565 = load i64, ptr %564, align 8
  %566 = and i64 %565, 65535
  %567 = icmp eq i64 %566, 29
  br i1 %567, label %568, label %627

568:                                              ; preds = %562
  %569 = getelementptr inbounds %struct.tree_common, ptr %564, i64 0, i32 2
  %570 = load ptr, ptr %569, align 8, !tbaa !17
  %571 = tail call i32 @comptypes(ptr noundef nonnull %80, ptr noundef %570)
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %573, label %627

573:                                              ; preds = %568
  %574 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %575 = load ptr, ptr %574, align 8, !tbaa !17
  %576 = load ptr, ptr getelementptr inbounds ([721 x ptr], ptr @built_in_decls, i64 0, i64 509), align 8, !tbaa !6
  %577 = tail call ptr @build_function_call(i32 noundef %0, ptr noundef %576, ptr noundef null)
  %578 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.33) #20
  %579 = icmp eq i8 %578, 0
  br i1 %579, label %581, label %580

580:                                              ; preds = %573
  tail call void (i32, ptr, ...) @inform(i32 noundef %0, ptr noundef nonnull @.str.34) #20
  br label %581

581:                                              ; preds = %580, %573
  %582 = icmp eq i32 %549, 0
  br i1 %582, label %594, label %583

583:                                              ; preds = %581
  %584 = zext i32 %549 to i64
  br label %585

585:                                              ; preds = %583, %585
  %586 = phi i64 [ 0, %583 ], [ %592, %585 ]
  %587 = phi ptr [ %577, %583 ], [ %591, %585 ]
  %588 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %589 = getelementptr inbounds %struct.VEC_tree_base, ptr %2, i64 0, i32 2, i64 %586
  %590 = load ptr, ptr %589, align 8, !tbaa !6
  %591 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %588, ptr noundef %590, ptr noundef %587) #20
  %592 = add nuw nsw i64 %586, 1
  %593 = icmp eq i64 %592, %584
  br i1 %593, label %594, label %585, !llvm.loop !106

594:                                              ; preds = %585, %581
  %595 = phi ptr [ %577, %581 ], [ %591, %585 ]
  %596 = load i64, ptr %575, align 8
  %597 = trunc i64 %596 to i16
  switch i16 %597, label %620 [
    i16 19, label %598
    i16 15, label %617
    i16 16, label %617
    i16 17, label %617
    i16 18, label %617
  ]

598:                                              ; preds = %594
  %599 = trunc i64 %596 to i32
  %600 = lshr i32 %599, 20
  %601 = and i32 %600, 1
  %602 = lshr i32 %599, 18
  %603 = and i32 %602, 2
  %604 = or i32 %601, %603
  %605 = getelementptr inbounds %struct.tree_type, ptr %575, i64 0, i32 6
  %606 = load i32, ptr %605, align 4
  %607 = lshr i32 %606, 11
  %608 = and i32 %607, 4
  %609 = lshr i64 %596, 48
  %610 = trunc i64 %609 to i32
  %611 = and i32 %610, 65280
  %612 = or i32 %604, %611
  %613 = or i32 %612, %608
  %614 = icmp eq i32 %613, 0
  br i1 %614, label %727, label %615

615:                                              ; preds = %598
  %616 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.35) #20
  br label %727

617:                                              ; preds = %594, %594, %594, %594
  %618 = tail call ptr @build_constructor(ptr noundef nonnull %575, ptr noundef null) #20
  %619 = tail call ptr @build_compound_literal(i32 noundef %0, ptr noundef nonnull %575, ptr noundef %618, i8 noundef zeroext 0) #20
  br label %623

620:                                              ; preds = %594
  %621 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %622 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %575, ptr noundef %621) #20
  br label %623

623:                                              ; preds = %620, %617
  %624 = phi ptr [ %619, %617 ], [ %622, %620 ]
  %625 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef nonnull %575, ptr noundef %595, ptr noundef %624) #20
  %626 = tail call ptr @require_complete_type(ptr noundef %625)
  br label %727

627:                                              ; preds = %553, %568, %562, %556
  %628 = getelementptr inbounds %struct.VEC_tree_base, ptr %2, i64 0, i32 2
  %629 = select i1 %61, ptr null, ptr %628
  br i1 %87, label %640, label %630

630:                                              ; preds = %627
  %631 = getelementptr inbounds %struct.tree_function_decl, ptr %30, i64 0, i32 5
  %632 = load i32, ptr %631, align 8
  %633 = and i32 %632, 6144
  %634 = icmp eq i32 %633, 6144
  br i1 %634, label %635, label %640

635:                                              ; preds = %630
  %636 = tail call zeroext i8 @check_builtin_function_arguments(ptr noundef nonnull %30, i32 noundef %549, ptr noundef %629) #20
  %637 = icmp eq i8 %636, 0
  br i1 %637, label %638, label %640

638:                                              ; preds = %635
  %639 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %727

640:                                              ; preds = %630, %635, %627
  %641 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 4
  %642 = load ptr, ptr %641, align 8, !tbaa !17
  %643 = load ptr, ptr %107, align 8, !tbaa !17
  tail call void @check_function_arguments(ptr noundef %642, i32 noundef %549, ptr noundef %629, ptr noundef %643) #20
  %644 = icmp eq ptr %31, null
  br i1 %644, label %686, label %645

645:                                              ; preds = %640
  %646 = getelementptr inbounds %struct.tree_identifier, ptr %31, i64 0, i32 1
  %647 = load ptr, ptr %646, align 8, !tbaa !17
  %648 = tail call i32 @strncmp(ptr noundef nonnull dereferenceable(1) %647, ptr noundef nonnull dereferenceable(11) @.str.36, i64 noundef 10)
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %650, label %686

650:                                              ; preds = %645
  %651 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %652 = icmp eq i32 %651, 0
  %653 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %654 = load ptr, ptr %653, align 8, !tbaa !17
  br i1 %652, label %657, label %655

655:                                              ; preds = %650
  %656 = tail call ptr @fold_build_call_array_initializer_loc(i32 noundef %0, ptr noundef %654, ptr noundef nonnull %71, i32 noundef %549, ptr noundef %629) #20
  br label %659

657:                                              ; preds = %650
  %658 = tail call ptr @fold_build_call_array_loc(i32 noundef %0, ptr noundef %654, ptr noundef nonnull %71, i32 noundef %549, ptr noundef %629) #20
  br label %659

659:                                              ; preds = %657, %655
  %660 = phi ptr [ %656, %655 ], [ %658, %657 ]
  %661 = load i64, ptr %660, align 8
  %662 = and i64 %661, 65535
  %663 = icmp eq i64 %662, 116
  br i1 %663, label %664, label %690

664:                                              ; preds = %659
  %665 = getelementptr inbounds %struct.tree_exp, ptr %660, i64 0, i32 3
  %666 = load ptr, ptr %665, align 8, !tbaa !17
  %667 = load i64, ptr %666, align 8
  %668 = and i64 %667, 65535
  %669 = icmp eq i64 %668, 23
  br i1 %669, label %670, label %690

670:                                              ; preds = %664
  %671 = load ptr, ptr @global_trees, align 16
  br label %672

672:                                              ; preds = %670, %680
  %673 = phi ptr [ %678, %680 ], [ %660, %670 ]
  %674 = load i64, ptr %673, align 8
  %675 = trunc i64 %674 to i16
  switch i16 %675, label %690 [
    i16 116, label %676
    i16 113, label %676
    i16 117, label %676
  ]

676:                                              ; preds = %672, %672, %672
  %677 = getelementptr inbounds %struct.tree_exp, ptr %673, i64 0, i32 3
  %678 = load ptr, ptr %677, align 8, !tbaa !17
  %679 = icmp eq ptr %678, %671
  br i1 %679, label %690, label %680

680:                                              ; preds = %676
  %681 = getelementptr inbounds %struct.tree_common, ptr %673, i64 0, i32 2
  %682 = load ptr, ptr %681, align 8, !tbaa !17
  %683 = getelementptr inbounds %struct.tree_common, ptr %678, i64 0, i32 2
  %684 = load ptr, ptr %683, align 8, !tbaa !17
  %685 = icmp eq ptr %682, %684
  br i1 %685, label %672, label %690, !llvm.loop !107

686:                                              ; preds = %645, %640
  %687 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %688 = load ptr, ptr %687, align 8, !tbaa !17
  %689 = tail call ptr @build_call_array_loc(i32 noundef %0, ptr noundef %688, ptr noundef nonnull %71, i32 noundef %549, ptr noundef %629) #20
  br label %690

690:                                              ; preds = %672, %676, %680, %659, %664, %686
  %691 = phi ptr [ %689, %686 ], [ %660, %664 ], [ %660, %659 ], [ %673, %680 ], [ %673, %676 ], [ %673, %672 ]
  %692 = getelementptr inbounds %struct.tree_common, ptr %691, i64 0, i32 2
  %693 = load ptr, ptr %692, align 8, !tbaa !17
  %694 = load i64, ptr %693, align 8
  %695 = and i64 %694, 65535
  %696 = icmp eq i64 %695, 19
  br i1 %696, label %697, label %716

697:                                              ; preds = %690
  %698 = trunc i64 %694 to i32
  %699 = lshr i32 %698, 20
  %700 = and i32 %699, 1
  %701 = lshr i32 %698, 18
  %702 = and i32 %701, 2
  %703 = or i32 %700, %702
  %704 = getelementptr inbounds %struct.tree_type, ptr %693, i64 0, i32 6
  %705 = load i32, ptr %704, align 4
  %706 = lshr i32 %705, 11
  %707 = and i32 %706, 4
  %708 = lshr i64 %694, 48
  %709 = trunc i64 %708 to i32
  %710 = and i32 %709, 65280
  %711 = or i32 %703, %710
  %712 = or i32 %711, %707
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %727, label %714

714:                                              ; preds = %697
  %715 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.35) #20
  br label %727

716:                                              ; preds = %690
  %717 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %718 = icmp eq ptr %717, %691
  %719 = icmp eq ptr %693, %717
  %720 = or i1 %718, %719
  br i1 %720, label %727, label %721

721:                                              ; preds = %716
  %722 = getelementptr inbounds %struct.tree_type, ptr %693, i64 0, i32 2
  %723 = load ptr, ptr %722, align 8, !tbaa !17
  %724 = icmp eq ptr %723, null
  br i1 %724, label %725, label %727

725:                                              ; preds = %721
  tail call void @c_incomplete_type_error(ptr noundef nonnull %691, ptr noundef nonnull %693)
  %726 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %727

727:                                              ; preds = %725, %721, %716, %697, %714, %623, %615, %598, %23, %638, %551, %84, %76
  %728 = phi ptr [ %77, %76 ], [ %552, %551 ], [ %639, %638 ], [ %85, %84 ], [ %24, %23 ], [ %626, %623 ], [ %595, %615 ], [ %595, %598 ], [ %691, %714 ], [ %691, %697 ], [ %726, %725 ], [ %691, %721 ], [ %717, %716 ]
  ret ptr %728
}

declare ptr @vec_gc_p_reserve_exact(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @ggc_free(ptr noundef) local_unnamed_addr #3

declare ptr @resolve_overloaded_builtin(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @objc_rewrite_function_call(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_compound_literal(i32 noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @build_constructor(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_convert_loc(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @check_builtin_function_arguments(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @check_function_arguments(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strncmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #16

declare ptr @fold_build_call_array_initializer_loc(i32 noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_build_call_array_loc(i32 noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_call_array_loc(i32 noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @lookup_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @objc_message_selector() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %0) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 134283263
  %6 = icmp eq i64 %5, 23
  br i1 %6, label %7, label %38

7:                                                ; preds = %1
  %8 = tail call i32 @integer_zerop(ptr noundef nonnull %0) #20
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %38, label %10

10:                                               ; preds = %7
  %11 = load i64, ptr %3, align 8
  %12 = trunc i64 %11 to i16
  switch i16 %12, label %37 [
    i16 6, label %38
    i16 7, label %38
    i16 8, label %38
    i16 10, label %13
  ]

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i64, ptr %15, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 19
  br i1 %18, label %19, label %38

19:                                               ; preds = %13
  %20 = trunc i64 %16 to i32
  %21 = lshr i32 %20, 20
  %22 = and i32 %21, 1
  %23 = lshr i32 %20, 18
  %24 = and i32 %23, 2
  %25 = or i32 %22, %24
  %26 = getelementptr inbounds %struct.tree_type, ptr %15, i64 0, i32 6
  %27 = load i32, ptr %26, align 4
  %28 = lshr i32 %27, 11
  %29 = and i32 %28, 4
  %30 = lshr i64 %16, 48
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 65280
  %33 = or i32 %25, %32
  %34 = or i32 %33, %29
  %35 = icmp eq i32 %34, 0
  %36 = zext i1 %35 to i8
  br label %38

37:                                               ; preds = %10
  br label %38

38:                                               ; preds = %10, %10, %10, %37, %19, %13, %7, %1
  %39 = phi i8 [ 0, %7 ], [ 0, %1 ], [ 1, %10 ], [ 0, %13 ], [ %36, %19 ], [ 1, %10 ], [ 1, %10 ], [ 0, %37 ]
  ret i8 %39
}

declare zeroext i8 @warning(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef readonly %3, i32 noundef %4, i8 noundef zeroext %5, ptr noundef readonly %6, ptr noundef %7, i32 noundef %8) unnamed_addr #9 {
  %10 = alloca %struct.expanded_location, align 8
  %11 = load i64, ptr %1, align 8
  %12 = freeze i64 %11
  %13 = trunc i64 %12 to i32
  %14 = and i32 %13, 65535
  %15 = icmp eq i32 %4, 0
  br i1 %15, label %16, label %36

16:                                               ; preds = %9
  %17 = load i64, ptr %7, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 121
  br i1 %19, label %20, label %27

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = load i64, ptr %22, align 8
  %24 = and i64 %23, 65535
  %25 = icmp eq i64 %24, 29
  %26 = select i1 %25, ptr %22, ptr %7
  br label %27

27:                                               ; preds = %20, %16
  %28 = phi ptr [ %7, %16 ], [ %26, %20 ]
  %29 = tail call ptr @objc_message_selector() #20
  %30 = icmp ne ptr %29, null
  %31 = icmp sgt i32 %8, 2
  %32 = and i1 %31, %30
  %33 = add nsw i32 %8, -2
  %34 = select i1 %32, ptr %29, ptr %28
  %35 = select i1 %32, i32 %33, i32 %8
  br label %36

36:                                               ; preds = %27, %9
  %37 = phi ptr [ %34, %27 ], [ null, %9 ]
  %38 = phi i32 [ %35, %27 ], [ %8, %9 ]
  %39 = load i64, ptr %2, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 190
  br i1 %41, label %42, label %45

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  br label %45

45:                                               ; preds = %42, %36
  %46 = phi ptr [ %44, %42 ], [ %2, %36 ]
  %47 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = freeze i64 %49
  %51 = trunc i64 %50 to i32
  %52 = and i32 %51, 65535
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %45
  %55 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

56:                                               ; preds = %45
  %57 = load i32, ptr @c_language, align 4, !tbaa !17
  %58 = and i32 %57, 1
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %56
  %61 = add i32 %4, -1
  %62 = icmp ult i32 %61, 3
  br i1 %62, label %63, label %67

63:                                               ; preds = %60
  %64 = sext i32 %61 to i64
  %65 = getelementptr inbounds [3 x i32], ptr @switch.table.convert_for_assignment, i64 0, i64 %64
  %66 = load i32, ptr %65, align 4
  br label %67

67:                                               ; preds = %60, %63
  %68 = phi i32 [ %66, %63 ], [ %38, %60 ]
  %69 = tail call zeroext i8 @objc_compare_types(ptr noundef nonnull %1, ptr noundef nonnull %48, i32 noundef %68, ptr noundef %37) #20
  br label %70

70:                                               ; preds = %67, %56
  %71 = phi i8 [ %69, %67 ], [ 0, %56 ]
  %72 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %114, label %74

74:                                               ; preds = %70
  %75 = icmp eq ptr %3, null
  %76 = select i1 %75, ptr %48, ptr %3
  %77 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %78 = icmp eq ptr %76, %77
  br i1 %78, label %114, label %79

79:                                               ; preds = %74
  %80 = load i64, ptr %1, align 8
  %81 = and i64 %80, 65535
  %82 = icmp eq i64 %81, 6
  br i1 %82, label %83, label %114

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.tree_type, ptr %76, i64 0, i32 16
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  %86 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %87 = load ptr, ptr %86, align 8, !tbaa !17
  %88 = icmp eq ptr %85, %87
  br i1 %88, label %114, label %89

89:                                               ; preds = %83
  switch i32 %4, label %113 [
    i32 0, label %90
    i32 1, label %104
    i32 2, label %107
    i32 3, label %110
  ]

90:                                               ; preds = %89
  %91 = load i32, ptr @input_location, align 4, !tbaa !21
  %92 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %91, i32 noundef 49, ptr noundef nonnull @.str.53, i32 noundef %38, ptr noundef %37) #20
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %114, label %94

94:                                               ; preds = %90
  %95 = icmp eq ptr %6, null
  br i1 %95, label %100, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %98 = load i32, ptr %97, align 8, !tbaa !17
  %99 = icmp ult i32 %98, 2
  br i1 %99, label %100, label %102

100:                                              ; preds = %96, %94
  %101 = load i32, ptr @input_location, align 4, !tbaa !21
  br label %102

102:                                              ; preds = %96, %100
  %103 = phi i32 [ %101, %100 ], [ %98, %96 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %103, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %114

104:                                              ; preds = %89
  %105 = load i32, ptr @input_location, align 4, !tbaa !21
  %106 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %105, i32 noundef 49, ptr noundef nonnull @.str.55) #20
  br label %114

107:                                              ; preds = %89
  %108 = load i32, ptr @input_location, align 4, !tbaa !21
  %109 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %108, i32 noundef 49, ptr noundef nonnull @.str.56) #20
  br label %114

110:                                              ; preds = %89
  %111 = load i32, ptr @input_location, align 4, !tbaa !21
  %112 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %111, i32 noundef 49, ptr noundef nonnull @.str.57) #20
  br label %114

113:                                              ; preds = %89
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 4971, ptr noundef nonnull @.str.8) #20
  br label %114

114:                                              ; preds = %74, %79, %83, %90, %102, %113, %110, %107, %104, %70
  %115 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 16
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  %119 = icmp eq ptr %116, %118
  br i1 %119, label %854, label %120

120:                                              ; preds = %114
  %121 = icmp eq i32 %52, 19
  br i1 %121, label %122, label %124

122:                                              ; preds = %120
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.17) #20
  %123 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

124:                                              ; preds = %120
  %125 = load ptr, ptr %47, align 8, !tbaa !17
  %126 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %127 = icmp eq ptr %126, %46
  %128 = icmp eq ptr %125, %126
  %129 = select i1 %127, i1 true, i1 %128
  br i1 %129, label %854, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %struct.tree_type, ptr %125, i64 0, i32 2
  %132 = load ptr, ptr %131, align 8, !tbaa !17
  %133 = icmp eq ptr %132, null
  br i1 %133, label %134, label %136

134:                                              ; preds = %130
  tail call void @c_incomplete_type_error(ptr noundef nonnull %46, ptr noundef nonnull %125)
  %135 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

136:                                              ; preds = %130
  %137 = icmp eq ptr %46, %126
  br i1 %137, label %854, label %138

138:                                              ; preds = %136
  %139 = icmp eq i32 %14, 12
  br i1 %139, label %140, label %204

140:                                              ; preds = %138
  %141 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %142 = load ptr, ptr %141, align 8, !tbaa !17
  %143 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !17
  %145 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %146 = tail call fastcc i32 @comptypes_internal(ptr noundef %142, ptr noundef %144, ptr noundef null)
  %147 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %148 = icmp eq ptr %147, %145
  br i1 %148, label %153, label %149

149:                                              ; preds = %140, %149
  %150 = phi ptr [ %151, %149 ], [ %147, %140 ]
  %151 = load ptr, ptr %150, align 8, !tbaa !37
  tail call void @free(ptr noundef %150)
  %152 = icmp eq ptr %151, %145
  br i1 %152, label %153, label %149, !llvm.loop !39

153:                                              ; preds = %149, %140
  store ptr %145, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %154 = icmp eq i32 %146, 1
  br i1 %154, label %155, label %204

155:                                              ; preds = %153, %161
  %156 = phi ptr [ %163, %161 ], [ %46, %153 ]
  %157 = load i64, ptr %156, align 8
  %158 = trunc i64 %157 to i16
  switch i16 %158, label %178 [
    i16 43, label %159
    i16 44, label %159
    i16 41, label %159
    i16 189, label %164
    i16 119, label %180
    i16 28, label %180
    i16 47, label %172
    i16 45, label %172
    i16 32, label %172
    i16 34, label %172
    i16 36, label %172
    i16 0, label %172
    i16 58, label %166
  ]

159:                                              ; preds = %155, %155, %155
  %160 = getelementptr inbounds %struct.tree_exp, ptr %156, i64 0, i32 3
  br label %161

161:                                              ; preds = %164, %159
  %162 = phi ptr [ %160, %159 ], [ %165, %164 ]
  %163 = load ptr, ptr %162, align 8, !tbaa !17
  br label %155

164:                                              ; preds = %155
  %165 = getelementptr inbounds %struct.tree_exp, ptr %156, i64 1
  br label %161

166:                                              ; preds = %155
  %167 = getelementptr inbounds %struct.tree_common, ptr %156, i64 0, i32 2
  %168 = load ptr, ptr %167, align 8, !tbaa !17
  %169 = load i64, ptr %168, align 8
  %170 = and i64 %169, 65535
  %171 = icmp eq i64 %170, 15
  br i1 %171, label %180, label %178

172:                                              ; preds = %155, %155, %155, %155, %155, %155
  %173 = getelementptr inbounds %struct.tree_common, ptr %156, i64 0, i32 2
  %174 = load ptr, ptr %173, align 8, !tbaa !17
  %175 = load i64, ptr %174, align 8
  %176 = and i64 %175, 65534
  %177 = icmp eq i64 %176, 20
  br i1 %177, label %178, label %180

178:                                              ; preds = %155, %166, %172
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.58) #20
  %179 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

180:                                              ; preds = %155, %155, %166, %172
  %181 = tail call zeroext i8 @c_mark_addressable(ptr noundef %46), !range !70
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %183, label %185

183:                                              ; preds = %180
  %184 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

185:                                              ; preds = %180
  %186 = load ptr, ptr %143, align 8, !tbaa !17
  %187 = tail call ptr @build_pointer_type(ptr noundef %186) #20
  %188 = tail call ptr @build1_stat(i32 noundef 121, ptr noundef %187, ptr noundef %46) #20
  %189 = getelementptr inbounds %struct.tree_exp, ptr %188, i64 0, i32 1
  store i32 %0, ptr %189, align 8, !tbaa !17
  %190 = getelementptr inbounds %struct.tree_common, ptr %188, i64 0, i32 2
  %191 = load ptr, ptr %190, align 8, !tbaa !17
  %192 = getelementptr inbounds %struct.tree_common, ptr %191, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  %194 = load ptr, ptr %141, align 8, !tbaa !17
  %195 = icmp eq ptr %193, %194
  br i1 %195, label %200, label %196

196:                                              ; preds = %185
  %197 = tail call ptr @build_pointer_type(ptr noundef %194) #20
  %198 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %197, ptr noundef nonnull %188) #20
  %199 = getelementptr inbounds %struct.tree_exp, ptr %198, i64 0, i32 1
  store i32 %0, ptr %199, align 8, !tbaa !17
  br label %200

200:                                              ; preds = %196, %185
  %201 = phi ptr [ %198, %196 ], [ %188, %185 ]
  %202 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %201) #20
  %203 = getelementptr inbounds %struct.tree_exp, ptr %202, i64 0, i32 1
  store i32 %0, ptr %203, align 8, !tbaa !17
  br label %854

204:                                              ; preds = %153, %138
  %205 = icmp eq i32 %14, 14
  %206 = icmp eq i32 %52, 14
  %207 = and i1 %205, %206
  br i1 %207, label %208, label %215

208:                                              ; preds = %204
  %209 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %210 = load ptr, ptr %209, align 8, !tbaa !17
  %211 = tail call zeroext i8 @vector_types_convertible_p(ptr noundef nonnull %1, ptr noundef %210, i8 noundef zeroext 1) #20
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %215, label %213

213:                                              ; preds = %208
  %214 = tail call ptr @convert(ptr noundef nonnull %1, ptr noundef nonnull %46) #20
  br label %854

215:                                              ; preds = %208, %204
  %216 = icmp eq i32 %14, 8
  %217 = and i32 %13, 65534
  %218 = icmp eq i32 %217, 8
  %219 = icmp eq i32 %14, 7
  br i1 %218, label %222, label %220

220:                                              ; preds = %215
  %221 = trunc i64 %12 to i16
  switch i16 %221, label %233 [
    i16 13, label %222
    i16 11, label %222
    i16 7, label %222
    i16 6, label %222
  ]

222:                                              ; preds = %220, %220, %220, %220, %215
  %223 = and i32 %51, 65534
  %224 = icmp eq i32 %223, 8
  br i1 %224, label %227, label %225

225:                                              ; preds = %222
  %226 = trunc i64 %50 to i16
  switch i16 %226, label %233 [
    i16 13, label %227
    i16 11, label %227
    i16 7, label %227
    i16 6, label %227
  ]

227:                                              ; preds = %225, %225, %225, %225, %222
  br i1 %219, label %230, label %228

228:                                              ; preds = %227
  %229 = tail call ptr @convert_and_check(ptr noundef nonnull %1, ptr noundef nonnull %2) #20
  br label %854

230:                                              ; preds = %227
  %231 = load i8, ptr @in_late_binary_op, align 1, !tbaa !17
  store i8 1, ptr @in_late_binary_op, align 1, !tbaa !17
  %232 = tail call ptr @convert_and_check(ptr noundef nonnull %1, ptr noundef nonnull %2) #20
  store i8 %231, ptr @in_late_binary_op, align 1, !tbaa !17
  br label %854

233:                                              ; preds = %225, %220
  %234 = icmp eq i32 %217, 16
  %235 = icmp eq i32 %14, %52
  %236 = and i1 %234, %235
  br i1 %236, label %237, label %250

237:                                              ; preds = %233
  %238 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %239 = tail call fastcc i32 @comptypes_internal(ptr noundef nonnull %1, ptr noundef nonnull %48, ptr noundef null)
  %240 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %241 = icmp eq ptr %240, %238
  br i1 %241, label %246, label %242

242:                                              ; preds = %237, %242
  %243 = phi ptr [ %244, %242 ], [ %240, %237 ]
  %244 = load ptr, ptr %243, align 8, !tbaa !37
  tail call void @free(ptr noundef %243)
  %245 = icmp eq ptr %244, %238
  br i1 %245, label %246, label %242, !llvm.loop !39

246:                                              ; preds = %242, %237
  store ptr %238, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %247 = icmp eq i32 %239, 0
  br i1 %247, label %250, label %248

248:                                              ; preds = %246
  %249 = tail call ptr @convert_and_check(ptr noundef nonnull %1, ptr noundef %46) #20
  br label %854

250:                                              ; preds = %233, %246
  br i1 %234, label %251, label %473

251:                                              ; preds = %250
  %252 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %253 = load i32, ptr %252, align 4
  %254 = and i32 %253, 4096
  %255 = icmp ne i32 %254, 0
  %256 = and i1 %15, %255
  br i1 %256, label %257, label %473

257:                                              ; preds = %251
  %258 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !17
  %260 = icmp eq ptr %259, null
  br i1 %260, label %838, label %261

261:                                              ; preds = %257
  %262 = icmp eq i32 %52, 10
  %263 = getelementptr %struct.tree_common, ptr %48, i64 0, i32 2
  %264 = icmp eq i8 %5, 0
  %265 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  br label %266

266:                                              ; preds = %261, %360
  %267 = phi ptr [ %265, %261 ], [ %361, %360 ]
  %268 = phi ptr [ %259, %261 ], [ %364, %360 ]
  %269 = phi ptr [ null, %261 ], [ %362, %360 ]
  %270 = getelementptr inbounds %struct.tree_common, ptr %268, i64 0, i32 2
  %271 = load ptr, ptr %270, align 8, !tbaa !17
  %272 = getelementptr inbounds %struct.tree_type, ptr %271, i64 0, i32 16
  %273 = load ptr, ptr %272, align 8, !tbaa !17
  %274 = load ptr, ptr %117, align 8, !tbaa !17
  %275 = tail call fastcc i32 @comptypes_internal(ptr noundef %273, ptr noundef %274, ptr noundef null)
  %276 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %277 = icmp eq ptr %276, %267
  br i1 %277, label %282, label %278

278:                                              ; preds = %266, %278
  %279 = phi ptr [ %280, %278 ], [ %276, %266 ]
  %280 = load ptr, ptr %279, align 8, !tbaa !37
  tail call void @free(ptr noundef %279)
  %281 = icmp eq ptr %280, %267
  br i1 %281, label %282, label %278, !llvm.loop !39

282:                                              ; preds = %278, %266
  store ptr %267, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %283 = icmp eq i32 %275, 0
  br i1 %283, label %284, label %456

284:                                              ; preds = %282
  %285 = load i64, ptr %271, align 8
  %286 = and i64 %285, 65535
  %287 = icmp eq i64 %286, 10
  br i1 %287, label %288, label %360

288:                                              ; preds = %284
  br i1 %262, label %289, label %356

289:                                              ; preds = %288
  %290 = getelementptr %struct.tree_common, ptr %271, i64 0, i32 2
  %291 = load ptr, ptr %290, align 8, !tbaa !17
  %292 = load ptr, ptr %263, align 8, !tbaa !17
  %293 = load i64, ptr %291, align 8
  %294 = and i64 %293, 65535
  %295 = icmp eq i64 %294, 19
  %296 = load i64, ptr %292, align 8
  %297 = and i64 %296, 65535
  %298 = icmp eq i64 %297, 19
  %299 = select i1 %295, i1 true, i1 %298
  br i1 %299, label %307, label %300

300:                                              ; preds = %289
  %301 = tail call fastcc i32 @comp_target_types(i32 noundef %0, ptr nonnull %291, ptr nonnull %292)
  %302 = icmp eq i32 %301, 0
  %303 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  br i1 %302, label %356, label %304

304:                                              ; preds = %300
  %305 = load i64, ptr %291, align 8
  %306 = load i64, ptr %292, align 8
  br label %307

307:                                              ; preds = %304, %289
  %308 = phi i64 [ %306, %304 ], [ %296, %289 ]
  %309 = phi i64 [ %305, %304 ], [ %293, %289 ]
  %310 = phi ptr [ %303, %304 ], [ %267, %289 ]
  %311 = trunc i64 %309 to i32
  %312 = lshr i32 %311, 20
  %313 = and i32 %312, 1
  %314 = lshr i32 %311, 18
  %315 = and i32 %314, 2
  %316 = or i32 %313, %315
  %317 = getelementptr inbounds %struct.tree_type, ptr %291, i64 0, i32 6
  %318 = load i32, ptr %317, align 4
  %319 = lshr i32 %318, 11
  %320 = and i32 %319, 4
  %321 = or i32 %316, %320
  %322 = lshr i64 %309, 48
  %323 = trunc i64 %322 to i32
  %324 = and i32 %323, 65280
  %325 = or i32 %321, %324
  %326 = trunc i64 %308 to i32
  %327 = lshr i32 %326, 20
  %328 = and i32 %327, 1
  %329 = lshr i32 %326, 18
  %330 = and i32 %329, 2
  %331 = or i32 %328, %330
  %332 = getelementptr inbounds %struct.tree_type, ptr %292, i64 0, i32 6
  %333 = load i32, ptr %332, align 4
  %334 = lshr i32 %333, 11
  %335 = and i32 %334, 4
  %336 = or i32 %331, %335
  %337 = lshr i64 %308, 48
  %338 = trunc i64 %337 to i32
  %339 = and i32 %338, 65280
  %340 = or i32 %336, %339
  %341 = icmp eq i32 %325, %340
  br i1 %341, label %456, label %342

342:                                              ; preds = %307
  %343 = and i64 %308, 65535
  %344 = icmp eq i64 %343, 20
  %345 = and i64 %309, 65535
  %346 = icmp eq i64 %345, 20
  %347 = select i1 %344, i1 %346, i1 false
  %348 = or i32 %340, %325
  br i1 %347, label %349, label %351

349:                                              ; preds = %342
  %350 = icmp eq i32 %348, %340
  br i1 %350, label %456, label %353

351:                                              ; preds = %342
  %352 = icmp eq i32 %348, %325
  br i1 %352, label %456, label %353

353:                                              ; preds = %351, %349
  %354 = icmp eq ptr %269, null
  %355 = select i1 %354, ptr %268, ptr %269
  br label %356

356:                                              ; preds = %288, %353, %300
  %357 = phi ptr [ %267, %288 ], [ %303, %300 ], [ %310, %353 ]
  %358 = phi ptr [ %269, %288 ], [ %269, %300 ], [ %355, %353 ]
  %359 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 16), align 16
  br i1 %264, label %360, label %456

360:                                              ; preds = %284, %356
  %361 = phi ptr [ %357, %356 ], [ %267, %284 ]
  %362 = phi ptr [ %358, %356 ], [ %269, %284 ]
  %363 = getelementptr inbounds %struct.tree_common, ptr %268, i64 0, i32 1
  %364 = load ptr, ptr %363, align 8, !tbaa !17
  %365 = icmp eq ptr %364, null
  br i1 %365, label %366, label %266, !llvm.loop !108

366:                                              ; preds = %360
  %367 = icmp eq ptr %362, null
  br i1 %367, label %837, label %368

368:                                              ; preds = %366
  %369 = getelementptr inbounds %struct.tree_common, ptr %362, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !17
  %371 = getelementptr inbounds %struct.tree_common, ptr %370, i64 0, i32 2
  %372 = load ptr, ptr %371, align 8, !tbaa !17
  %373 = getelementptr inbounds %struct.tree_common, ptr %48, i64 0, i32 2
  %374 = load ptr, ptr %373, align 8, !tbaa !17
  %375 = load i64, ptr %374, align 8
  %376 = and i64 %375, 65535
  %377 = icmp eq i64 %376, 20
  %378 = load i64, ptr %372, align 8
  %379 = and i64 %378, 65535
  %380 = icmp eq i64 %379, 20
  %381 = select i1 %377, i1 %380, i1 false
  br i1 %381, label %382, label %418

382:                                              ; preds = %368
  %383 = trunc i64 %378 to i32
  %384 = lshr i32 %383, 20
  %385 = and i32 %384, 1
  %386 = lshr i32 %383, 18
  %387 = and i32 %386, 2
  %388 = or i32 %385, %387
  %389 = getelementptr inbounds %struct.tree_type, ptr %372, i64 0, i32 6
  %390 = load i32, ptr %389, align 4
  %391 = lshr i32 %390, 11
  %392 = and i32 %391, 4
  %393 = or i32 %388, %392
  %394 = trunc i64 %375 to i32
  %395 = lshr i32 %394, 20
  %396 = and i32 %395, 1
  %397 = lshr i32 %394, 18
  %398 = and i32 %397, 2
  %399 = or i32 %396, %398
  %400 = getelementptr inbounds %struct.tree_type, ptr %374, i64 0, i32 6
  %401 = load i32, ptr %400, align 4
  %402 = lshr i32 %401, 11
  %403 = and i32 %402, 4
  %404 = or i32 %399, %403
  %405 = xor i32 %404, -1
  %406 = and i32 %393, %405
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %456, label %408

408:                                              ; preds = %382
  %409 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.59, i32 noundef %38, ptr noundef %37) #20
  %410 = icmp eq i8 %409, 0
  br i1 %410, label %456, label %411

411:                                              ; preds = %408
  %412 = icmp eq ptr %6, null
  br i1 %412, label %417, label %413

413:                                              ; preds = %411
  %414 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %415 = load i32, ptr %414, align 8, !tbaa !17
  %416 = icmp ult i32 %415, 2
  br i1 %416, label %417, label %454

417:                                              ; preds = %413, %411
  br label %454

418:                                              ; preds = %368
  %419 = trunc i64 %375 to i32
  %420 = lshr i32 %419, 20
  %421 = and i32 %420, 1
  %422 = lshr i32 %419, 18
  %423 = and i32 %422, 2
  %424 = or i32 %421, %423
  %425 = getelementptr inbounds %struct.tree_type, ptr %374, i64 0, i32 6
  %426 = load i32, ptr %425, align 4
  %427 = lshr i32 %426, 11
  %428 = and i32 %427, 4
  %429 = or i32 %424, %428
  %430 = trunc i64 %378 to i32
  %431 = lshr i32 %430, 20
  %432 = and i32 %431, 1
  %433 = lshr i32 %430, 18
  %434 = and i32 %433, 2
  %435 = or i32 %432, %434
  %436 = getelementptr inbounds %struct.tree_type, ptr %372, i64 0, i32 6
  %437 = load i32, ptr %436, align 4
  %438 = lshr i32 %437, 11
  %439 = and i32 %438, 4
  %440 = or i32 %435, %439
  %441 = xor i32 %440, -1
  %442 = and i32 %429, %441
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %456, label %444

444:                                              ; preds = %418
  %445 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.63, i32 noundef %38, ptr noundef %37) #20
  %446 = icmp eq i8 %445, 0
  br i1 %446, label %456, label %447

447:                                              ; preds = %444
  %448 = icmp eq ptr %6, null
  br i1 %448, label %453, label %449

449:                                              ; preds = %447
  %450 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %451 = load i32, ptr %450, align 8, !tbaa !17
  %452 = icmp ult i32 %451, 2
  br i1 %452, label %453, label %454

453:                                              ; preds = %449, %447
  br label %454

454:                                              ; preds = %453, %449, %417, %413
  %455 = phi i32 [ %0, %417 ], [ %415, %413 ], [ %0, %453 ], [ %451, %449 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %455, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %456

456:                                              ; preds = %356, %282, %351, %349, %307, %454, %408, %382, %444, %418
  %457 = phi ptr [ %46, %418 ], [ %46, %444 ], [ %46, %382 ], [ %46, %408 ], [ %46, %454 ], [ %46, %307 ], [ %46, %349 ], [ %46, %351 ], [ %46, %282 ], [ %359, %356 ]
  %458 = phi ptr [ %362, %418 ], [ %362, %444 ], [ %362, %382 ], [ %362, %408 ], [ %362, %454 ], [ %268, %307 ], [ %268, %349 ], [ %268, %351 ], [ %268, %282 ], [ %268, %356 ]
  %459 = icmp eq ptr %6, null
  br i1 %459, label %466, label %460

460:                                              ; preds = %456
  %461 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %462 = load i32, ptr %461, align 8, !tbaa !17
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %10, i32 noundef %462) #20
  %463 = getelementptr inbounds %struct.expanded_location, ptr %10, i64 0, i32 3
  %464 = load i8, ptr %463, align 8, !tbaa !109
  %465 = icmp eq i8 %464, 0
  br i1 %465, label %466, label %468

466:                                              ; preds = %460, %456
  %467 = call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.67) #20
  br label %468

468:                                              ; preds = %460, %466
  %469 = getelementptr inbounds %struct.tree_common, ptr %458, i64 0, i32 2
  %470 = load ptr, ptr %469, align 8, !tbaa !17
  %471 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %470, ptr noundef %457) #20
  %472 = call ptr @build_constructor_single(ptr noundef nonnull %1, ptr noundef nonnull %458, ptr noundef %471) #20
  br label %854

473:                                              ; preds = %250, %251
  %474 = icmp eq i32 %14, 10
  %475 = trunc i64 %12 to i16
  switch i16 %475, label %807 [
    i16 12, label %476
    i16 10, label %476
  ]

476:                                              ; preds = %473, %473
  br i1 %235, label %477, label %775

477:                                              ; preds = %476
  %478 = getelementptr %struct.tree_common, ptr %1, i64 0, i32 2
  %479 = load ptr, ptr %478, align 8, !tbaa !17
  %480 = getelementptr %struct.tree_common, ptr %48, i64 0, i32 2
  %481 = load ptr, ptr %480, align 8, !tbaa !17
  %482 = load i64, ptr %479, align 8
  %483 = and i64 %482, 65535
  %484 = icmp eq i64 %483, 15
  br i1 %484, label %488, label %485

485:                                              ; preds = %477
  %486 = getelementptr inbounds %struct.tree_type, ptr %479, i64 0, i32 16
  %487 = load ptr, ptr %486, align 8, !tbaa !17
  br label %488

488:                                              ; preds = %485, %477
  %489 = phi ptr [ %487, %485 ], [ %479, %477 ]
  %490 = load i64, ptr %481, align 8
  %491 = and i64 %490, 65535
  %492 = icmp eq i64 %491, 15
  br i1 %492, label %496, label %493

493:                                              ; preds = %488
  %494 = getelementptr inbounds %struct.tree_type, ptr %481, i64 0, i32 16
  %495 = load ptr, ptr %494, align 8, !tbaa !17
  br label %496

496:                                              ; preds = %493, %488
  %497 = phi ptr [ %495, %493 ], [ %481, %488 ]
  %498 = tail call zeroext i8 @vector_targets_convertible_p(ptr noundef nonnull %479, ptr noundef nonnull %481) #20
  %499 = load i64, ptr %481, align 8
  %500 = and i64 %499, 65535
  %501 = icmp ne i64 %500, 19
  %502 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 16), align 16
  %503 = icmp eq ptr %46, %502
  %504 = select i1 %501, i1 true, i1 %503
  %505 = load i64, ptr %479, align 8
  %506 = and i64 %505, 65535
  %507 = icmp eq i64 %506, 19
  %508 = select i1 %504, i1 true, i1 %507
  br i1 %508, label %513, label %509

509:                                              ; preds = %496
  %510 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.68, ptr noundef nonnull %48, ptr noundef nonnull %1) #20
  %511 = load i64, ptr %479, align 8
  %512 = load i64, ptr %481, align 8
  br label %513

513:                                              ; preds = %509, %496
  %514 = phi i64 [ %512, %509 ], [ %499, %496 ]
  %515 = phi i64 [ %511, %509 ], [ %505, %496 ]
  %516 = lshr i64 %515, 56
  %517 = lshr i64 %514, 56
  %518 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef %46), !range !70
  %519 = icmp ne i8 %518, 0
  %520 = trunc i64 %517 to i32
  %521 = trunc i64 %516 to i32
  %522 = icmp eq i32 %520, %521
  %523 = select i1 %519, i1 true, i1 %522
  br i1 %523, label %538, label %524

524:                                              ; preds = %513
  %525 = trunc i64 %517 to i8
  %526 = trunc i64 %516 to i8
  %527 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %528 = tail call zeroext i8 %527(i8 noundef zeroext %525, i8 noundef zeroext %526) #20
  %529 = icmp eq i8 %528, 0
  br i1 %529, label %530, label %538

530:                                              ; preds = %524
  switch i32 %4, label %535 [
    i32 0, label %531
    i32 1, label %532
    i32 2, label %533
    i32 3, label %534
  ]

531:                                              ; preds = %530
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.69, i32 noundef %38, ptr noundef %37) #20
  br label %536

532:                                              ; preds = %530
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.70) #20
  br label %536

533:                                              ; preds = %530
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.71) #20
  br label %536

534:                                              ; preds = %530
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.72) #20
  br label %536

535:                                              ; preds = %530
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5222, ptr noundef nonnull @.str.8) #20
  br label %536

536:                                              ; preds = %535, %534, %533, %532, %531
  %537 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

538:                                              ; preds = %524, %513
  %539 = load i32, ptr @warn_missing_format_attribute, align 4, !tbaa !21
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %554, label %541

541:                                              ; preds = %538
  %542 = tail call zeroext i8 @check_missing_format_attribute(ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %554, label %544

544:                                              ; preds = %541
  switch i32 %4, label %553 [
    i32 0, label %545
    i32 1, label %547
    i32 2, label %549
    i32 3, label %551
  ]

545:                                              ; preds = %544
  %546 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 131, ptr noundef nonnull @.str.73, i32 noundef %38, ptr noundef %37) #20
  br label %554

547:                                              ; preds = %544
  %548 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 131, ptr noundef nonnull @.str.74) #20
  br label %554

549:                                              ; preds = %544
  %550 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 131, ptr noundef nonnull @.str.75) #20
  br label %554

551:                                              ; preds = %544
  %552 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 131, ptr noundef nonnull @.str.76) #20
  br label %554

553:                                              ; preds = %544
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5256, ptr noundef nonnull @.str.8) #20
  br label %554

554:                                              ; preds = %545, %547, %549, %551, %553, %541, %538
  %555 = load i64, ptr %479, align 8
  %556 = and i64 %555, 65535
  %557 = icmp eq i64 %556, 19
  br i1 %557, label %573, label %558

558:                                              ; preds = %554
  %559 = load i64, ptr %481, align 8
  %560 = and i64 %559, 65535
  %561 = icmp eq i64 %560, 19
  br i1 %561, label %573, label %562

562:                                              ; preds = %558
  %563 = load ptr, ptr %478, align 8, !tbaa !17
  %564 = load ptr, ptr %480, align 8, !tbaa !17
  %565 = tail call fastcc i32 @comp_target_types(i32 noundef %0, ptr %563, ptr %564)
  %566 = icmp ne i32 %565, 0
  %567 = icmp ne i8 %498, 0
  %568 = select i1 %566, i1 true, i1 %567
  br i1 %568, label %573, label %569

569:                                              ; preds = %562
  %570 = tail call ptr @c_common_unsigned_type(ptr noundef %489) #20
  %571 = tail call ptr @c_common_unsigned_type(ptr noundef %497) #20
  %572 = icmp eq ptr %570, %571
  br i1 %572, label %573, label %751

573:                                              ; preds = %569, %562, %558, %554
  %574 = phi i32 [ 0, %554 ], [ 0, %558 ], [ %565, %562 ], [ 0, %569 ]
  %575 = load i32, ptr @pedantic, align 4, !tbaa !21
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %577, label %580

577:                                              ; preds = %573
  %578 = load i64, ptr %481, align 8
  %579 = load i64, ptr %479, align 8
  br label %614

580:                                              ; preds = %573
  %581 = load i64, ptr %479, align 8
  %582 = and i64 %581, 65535
  %583 = icmp eq i64 %582, 19
  %584 = load i64, ptr %481, align 8
  %585 = and i64 %584, 65535
  br i1 %583, label %586, label %588

586:                                              ; preds = %580
  %587 = icmp eq i64 %585, 20
  br i1 %587, label %594, label %614

588:                                              ; preds = %580
  %589 = icmp eq i64 %585, 19
  %590 = icmp eq i8 %5, 0
  %591 = and i1 %590, %589
  %592 = icmp eq i64 %582, 20
  %593 = and i1 %592, %591
  br i1 %593, label %594, label %614

594:                                              ; preds = %588, %586
  switch i32 %4, label %613 [
    i32 0, label %595
    i32 1, label %607
    i32 2, label %609
    i32 3, label %611
  ]

595:                                              ; preds = %594
  %596 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.77, i32 noundef %38, ptr noundef %37) #20
  %597 = icmp eq i8 %596, 0
  br i1 %597, label %773, label %598

598:                                              ; preds = %595
  %599 = icmp eq ptr %6, null
  br i1 %599, label %604, label %600

600:                                              ; preds = %598
  %601 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %602 = load i32, ptr %601, align 8, !tbaa !17
  %603 = icmp ult i32 %602, 2
  br i1 %603, label %604, label %605

604:                                              ; preds = %600, %598
  br label %605

605:                                              ; preds = %600, %604
  %606 = phi i32 [ %0, %604 ], [ %602, %600 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %606, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %773

607:                                              ; preds = %594
  %608 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.78) #20
  br label %773

609:                                              ; preds = %594
  %610 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.79) #20
  br label %773

611:                                              ; preds = %594
  %612 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.80) #20
  br label %773

613:                                              ; preds = %594
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5284, ptr noundef nonnull @.str.8) #20
  br label %773

614:                                              ; preds = %577, %586, %588
  %615 = phi i64 [ %579, %577 ], [ %581, %586 ], [ %581, %588 ]
  %616 = phi i64 [ %578, %577 ], [ %584, %586 ], [ %584, %588 ]
  %617 = trunc i64 %616 to i32
  %618 = and i32 %617, 65535
  %619 = icmp eq i32 %618, 20
  br i1 %619, label %700, label %620

620:                                              ; preds = %614
  %621 = trunc i64 %615 to i32
  %622 = and i32 %621, 65535
  %623 = icmp eq i32 %622, 20
  br i1 %623, label %700, label %624

624:                                              ; preds = %620
  %625 = lshr i32 %617, 20
  %626 = and i32 %625, 1
  %627 = lshr i32 %617, 18
  %628 = and i32 %627, 2
  %629 = or i32 %626, %628
  %630 = getelementptr inbounds %struct.tree_type, ptr %481, i64 0, i32 6
  %631 = load i32, ptr %630, align 4
  %632 = lshr i32 %631, 11
  %633 = and i32 %632, 4
  %634 = or i32 %629, %633
  %635 = lshr i32 %621, 20
  %636 = and i32 %635, 1
  %637 = lshr i32 %621, 18
  %638 = and i32 %637, 2
  %639 = or i32 %636, %638
  %640 = getelementptr inbounds %struct.tree_type, ptr %479, i64 0, i32 6
  %641 = load i32, ptr %640, align 4
  %642 = lshr i32 %641, 11
  %643 = and i32 %642, 4
  %644 = or i32 %639, %643
  %645 = xor i32 %644, -1
  %646 = and i32 %634, %645
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %671, label %648

648:                                              ; preds = %624
  %649 = tail call zeroext i8 @objc_type_quals_match(ptr noundef nonnull %479, ptr noundef nonnull %481) #20
  %650 = icmp eq i8 %649, 0
  br i1 %650, label %651, label %773

651:                                              ; preds = %648
  switch i32 %4, label %670 [
    i32 0, label %652
    i32 1, label %664
    i32 2, label %666
    i32 3, label %668
  ]

652:                                              ; preds = %651
  %653 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.63, i32 noundef %38, ptr noundef %37) #20
  %654 = icmp eq i8 %653, 0
  br i1 %654, label %773, label %655

655:                                              ; preds = %652
  %656 = icmp eq ptr %6, null
  br i1 %656, label %661, label %657

657:                                              ; preds = %655
  %658 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %659 = load i32, ptr %658, align 8, !tbaa !17
  %660 = icmp ult i32 %659, 2
  br i1 %660, label %661, label %662

661:                                              ; preds = %657, %655
  br label %662

662:                                              ; preds = %657, %661
  %663 = phi i32 [ %0, %661 ], [ %659, %657 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %663, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %773

664:                                              ; preds = %651
  %665 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.64) #20
  br label %773

666:                                              ; preds = %651
  %667 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.65) #20
  br label %773

668:                                              ; preds = %651
  %669 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.66) #20
  br label %773

670:                                              ; preds = %651
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5305, ptr noundef nonnull @.str.8) #20
  br label %773

671:                                              ; preds = %624
  %672 = icmp eq i32 %622, 19
  br i1 %672, label %773, label %673

673:                                              ; preds = %671
  %674 = icmp ne i32 %618, 19
  %675 = icmp eq i32 %574, 0
  %676 = and i1 %675, %674
  %677 = load i32, ptr @warn_pointer_sign, align 4
  %678 = icmp ne i32 %677, 0
  %679 = select i1 %676, i1 %678, i1 false
  br i1 %679, label %680, label %773

680:                                              ; preds = %673
  switch i32 %4, label %699 [
    i32 0, label %681
    i32 1, label %693
    i32 2, label %695
    i32 3, label %697
  ]

681:                                              ; preds = %680
  %682 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 163, ptr noundef nonnull @.str.81, i32 noundef %38, ptr noundef %37) #20
  %683 = icmp eq i8 %682, 0
  br i1 %683, label %773, label %684

684:                                              ; preds = %681
  %685 = icmp eq ptr %6, null
  br i1 %685, label %690, label %686

686:                                              ; preds = %684
  %687 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %688 = load i32, ptr %687, align 8, !tbaa !17
  %689 = icmp ult i32 %688, 2
  br i1 %689, label %690, label %691

690:                                              ; preds = %686, %684
  br label %691

691:                                              ; preds = %686, %690
  %692 = phi i32 [ %0, %690 ], [ %688, %686 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %692, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %773

693:                                              ; preds = %680
  %694 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 163, ptr noundef nonnull @.str.82) #20
  br label %773

695:                                              ; preds = %680
  %696 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 163, ptr noundef nonnull @.str.83) #20
  br label %773

697:                                              ; preds = %680
  %698 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 163, ptr noundef nonnull @.str.84) #20
  br label %773

699:                                              ; preds = %680
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5322, ptr noundef nonnull @.str.8) #20
  br label %773

700:                                              ; preds = %620, %614
  %701 = and i64 %615, 65535
  %702 = icmp eq i64 %701, 20
  %703 = and i64 %616, 65535
  %704 = icmp eq i64 %703, 20
  %705 = and i1 %704, %702
  br i1 %705, label %706, label %773

706:                                              ; preds = %700
  %707 = trunc i64 %615 to i32
  %708 = lshr i32 %707, 20
  %709 = and i32 %708, 1
  %710 = lshr i32 %707, 18
  %711 = and i32 %710, 2
  %712 = or i32 %709, %711
  %713 = getelementptr inbounds %struct.tree_type, ptr %479, i64 0, i32 6
  %714 = load i32, ptr %713, align 4
  %715 = lshr i32 %714, 11
  %716 = and i32 %715, 4
  %717 = or i32 %712, %716
  %718 = lshr i32 %617, 20
  %719 = and i32 %718, 1
  %720 = lshr i32 %617, 18
  %721 = and i32 %720, 2
  %722 = or i32 %719, %721
  %723 = getelementptr inbounds %struct.tree_type, ptr %481, i64 0, i32 6
  %724 = load i32, ptr %723, align 4
  %725 = lshr i32 %724, 11
  %726 = and i32 %725, 4
  %727 = or i32 %722, %726
  %728 = xor i32 %727, -1
  %729 = and i32 %717, %728
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %773, label %731

731:                                              ; preds = %706
  switch i32 %4, label %750 [
    i32 0, label %732
    i32 1, label %744
    i32 2, label %746
    i32 3, label %748
  ]

732:                                              ; preds = %731
  %733 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.59, i32 noundef %38, ptr noundef %37) #20
  %734 = icmp eq i8 %733, 0
  br i1 %734, label %773, label %735

735:                                              ; preds = %732
  %736 = icmp eq ptr %6, null
  br i1 %736, label %741, label %737

737:                                              ; preds = %735
  %738 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %739 = load i32, ptr %738, align 8, !tbaa !17
  %740 = icmp ult i32 %739, 2
  br i1 %740, label %741, label %742

741:                                              ; preds = %737, %735
  br label %742

742:                                              ; preds = %737, %741
  %743 = phi i32 [ %0, %741 ], [ %739, %737 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %743, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %773

744:                                              ; preds = %731
  %745 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.60) #20
  br label %773

746:                                              ; preds = %731
  %747 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.61) #20
  br label %773

748:                                              ; preds = %731
  %749 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.62) #20
  br label %773

750:                                              ; preds = %731
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5342, ptr noundef nonnull @.str.8) #20
  br label %773

751:                                              ; preds = %569
  %752 = icmp eq i8 %71, 0
  br i1 %752, label %753, label %773

753:                                              ; preds = %751
  switch i32 %4, label %772 [
    i32 0, label %754
    i32 1, label %766
    i32 2, label %768
    i32 3, label %770
  ]

754:                                              ; preds = %753
  %755 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.85, i32 noundef %38, ptr noundef %37) #20
  %756 = icmp eq i8 %755, 0
  br i1 %756, label %773, label %757

757:                                              ; preds = %754
  %758 = icmp eq ptr %6, null
  br i1 %758, label %763, label %759

759:                                              ; preds = %757
  %760 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %761 = load i32, ptr %760, align 8, !tbaa !17
  %762 = icmp ult i32 %761, 2
  br i1 %762, label %763, label %764

763:                                              ; preds = %759, %757
  br label %764

764:                                              ; preds = %759, %763
  %765 = phi i32 [ %0, %763 ], [ %761, %759 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %765, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %773

766:                                              ; preds = %753
  %767 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.86) #20
  br label %773

768:                                              ; preds = %753
  %769 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.87) #20
  br label %773

770:                                              ; preds = %753
  %771 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.88) #20
  br label %773

772:                                              ; preds = %753
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5354, ptr noundef nonnull @.str.8) #20
  br label %773

773:                                              ; preds = %751, %754, %764, %772, %770, %768, %766, %595, %605, %613, %611, %609, %607, %700, %744, %746, %748, %750, %742, %732, %706, %664, %666, %668, %670, %662, %652, %648, %681, %691, %699, %697, %695, %693, %671, %673
  %774 = tail call ptr @convert(ptr noundef nonnull %1, ptr noundef %46) #20
  br label %854

775:                                              ; preds = %476
  %776 = icmp eq i32 %52, 15
  %777 = and i1 %474, %776
  br i1 %777, label %778, label %780

778:                                              ; preds = %775
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.89) #20
  %779 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

780:                                              ; preds = %775
  %781 = icmp eq i32 %52, 8
  %782 = and i1 %474, %781
  br i1 %782, label %783, label %837

783:                                              ; preds = %780
  %784 = icmp eq i8 %5, 0
  br i1 %784, label %785, label %805

785:                                              ; preds = %783
  switch i32 %4, label %804 [
    i32 0, label %786
    i32 1, label %798
    i32 2, label %800
    i32 3, label %802
  ]

786:                                              ; preds = %785
  %787 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.90, i32 noundef %38, ptr noundef %37) #20
  %788 = icmp eq i8 %787, 0
  br i1 %788, label %805, label %789

789:                                              ; preds = %786
  %790 = icmp eq ptr %6, null
  br i1 %790, label %795, label %791

791:                                              ; preds = %789
  %792 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %793 = load i32, ptr %792, align 8, !tbaa !17
  %794 = icmp ult i32 %793, 2
  br i1 %794, label %795, label %796

795:                                              ; preds = %791, %789
  br label %796

796:                                              ; preds = %791, %795
  %797 = phi i32 [ %0, %795 ], [ %793, %791 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %797, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %805

798:                                              ; preds = %785
  %799 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.91) #20
  br label %805

800:                                              ; preds = %785
  %801 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.92) #20
  br label %805

802:                                              ; preds = %785
  %803 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.93) #20
  br label %805

804:                                              ; preds = %785
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5379, ptr noundef nonnull @.str.8) #20
  br label %805

805:                                              ; preds = %798, %800, %802, %804, %796, %786, %783
  %806 = tail call ptr @convert(ptr noundef nonnull %1, ptr noundef %46) #20
  br label %854

807:                                              ; preds = %473
  %808 = icmp eq i32 %52, 10
  %809 = and i1 %216, %808
  br i1 %809, label %810, label %832

810:                                              ; preds = %807
  switch i32 %4, label %829 [
    i32 0, label %811
    i32 1, label %823
    i32 2, label %825
    i32 3, label %827
  ]

811:                                              ; preds = %810
  %812 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.94, i32 noundef %38, ptr noundef %37) #20
  %813 = icmp eq i8 %812, 0
  br i1 %813, label %830, label %814

814:                                              ; preds = %811
  %815 = icmp eq ptr %6, null
  br i1 %815, label %820, label %816

816:                                              ; preds = %814
  %817 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %818 = load i32, ptr %817, align 8, !tbaa !17
  %819 = icmp ult i32 %818, 2
  br i1 %819, label %820, label %821

820:                                              ; preds = %816, %814
  br label %821

821:                                              ; preds = %816, %820
  %822 = phi i32 [ %0, %820 ], [ %818, %816 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %822, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %830

823:                                              ; preds = %810
  %824 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.95) #20
  br label %830

825:                                              ; preds = %810
  %826 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.96) #20
  br label %830

827:                                              ; preds = %810
  %828 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.97) #20
  br label %830

829:                                              ; preds = %810
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5393, ptr noundef nonnull @.str.8) #20
  br label %830

830:                                              ; preds = %811, %821, %829, %827, %825, %823
  %831 = tail call ptr @convert(ptr noundef nonnull %1, ptr noundef %46) #20
  br label %854

832:                                              ; preds = %807
  %833 = and i1 %219, %808
  br i1 %833, label %834, label %837

834:                                              ; preds = %832
  %835 = load i8, ptr @in_late_binary_op, align 1, !tbaa !17
  store i8 1, ptr @in_late_binary_op, align 1, !tbaa !17
  %836 = tail call ptr @convert(ptr noundef nonnull %1, ptr noundef %46) #20
  store i8 %835, ptr @in_late_binary_op, align 1, !tbaa !17
  br label %854

837:                                              ; preds = %780, %366, %832
  switch i32 %4, label %851 [
    i32 0, label %838
    i32 1, label %848
    i32 2, label %849
    i32 3, label %850
  ]

838:                                              ; preds = %257, %837
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.98, i32 noundef %38, ptr noundef %37) #20
  %839 = icmp eq ptr %6, null
  br i1 %839, label %844, label %840

840:                                              ; preds = %838
  %841 = getelementptr inbounds %struct.tree_decl_minimal, ptr %6, i64 0, i32 1
  %842 = load i32, ptr %841, align 8, !tbaa !17
  %843 = icmp ult i32 %842, 2
  br i1 %843, label %844, label %846

844:                                              ; preds = %840, %838
  %845 = load i32, ptr @input_location, align 4, !tbaa !21
  br label %846

846:                                              ; preds = %840, %844
  %847 = phi i32 [ %845, %844 ], [ %842, %840 ]
  tail call void (i32, ptr, ...) @inform(i32 noundef %847, ptr noundef nonnull @.str.54, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %852

848:                                              ; preds = %837
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.99, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %852

849:                                              ; preds = %837
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.100, ptr noundef nonnull %1, ptr noundef nonnull %48) #20
  br label %852

850:                                              ; preds = %837
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.101, ptr noundef nonnull %48, ptr noundef nonnull %1) #20
  br label %852

851:                                              ; preds = %837
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 5429, ptr noundef nonnull @.str.8) #20
  br label %852

852:                                              ; preds = %851, %850, %849, %848, %846
  %853 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %854

854:                                              ; preds = %124, %134, %468, %228, %536, %773, %230, %136, %114, %852, %834, %830, %805, %778, %248, %213, %200, %183, %178, %122, %54
  %855 = phi ptr [ %55, %54 ], [ %123, %122 ], [ %202, %200 ], [ %184, %183 ], [ %179, %178 ], [ %214, %213 ], [ %249, %248 ], [ %853, %852 ], [ %472, %468 ], [ %779, %778 ], [ %806, %805 ], [ %831, %830 ], [ %836, %834 ], [ %46, %114 ], [ %126, %136 ], [ %232, %230 ], [ %229, %228 ], [ %774, %773 ], [ %537, %536 ], [ %126, %124 ], [ %135, %134 ]
  ret ptr %855
}

declare i32 @integer_zerop(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @objc_compare_types(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @vector_types_convertible_p(ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @convert_and_check(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @comp_target_types(i32 noundef %0, ptr %1, ptr %2) unnamed_addr #9 {
  %4 = alloca i8, align 1
  %5 = load i64, ptr %1, align 8
  %6 = lshr i64 %5, 56
  %7 = trunc i64 %6 to i8
  %8 = load i64, ptr %2, align 8
  %9 = lshr i64 %8, 56
  %10 = trunc i64 %9 to i8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #20
  %11 = icmp eq i8 %7, %10
  br i1 %11, label %20, label %12

12:                                               ; preds = %3
  %13 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %14 = tail call zeroext i8 %13(i8 noundef zeroext %7, i8 noundef zeroext %10) #20
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %12
  %17 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %18 = tail call zeroext i8 %17(i8 noundef zeroext %10, i8 noundef zeroext %7) #20
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %59, label %20

20:                                               ; preds = %16, %12, %3
  %21 = load i64, ptr %1, align 8
  %22 = and i64 %21, 65535
  %23 = icmp eq i64 %22, 15
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  br label %27

27:                                               ; preds = %24, %20
  %28 = phi ptr [ %26, %24 ], [ %1, %20 ]
  %29 = load i64, ptr %2, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 15
  br i1 %31, label %35, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 16
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi ptr [ %34, %32 ], [ %2, %27 ]
  store i8 0, ptr %4, align 1, !tbaa !17
  %37 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %38 = call fastcc i32 @comptypes_internal(ptr noundef %28, ptr noundef %36, ptr noundef nonnull %4)
  %39 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %40 = icmp eq ptr %39, %37
  br i1 %40, label %45, label %41

41:                                               ; preds = %35, %41
  %42 = phi ptr [ %43, %41 ], [ %39, %35 ]
  %43 = load ptr, ptr %42, align 8, !tbaa !37
  call void @free(ptr noundef %42)
  %44 = icmp eq ptr %43, %37
  br i1 %44, label %45, label %41, !llvm.loop !39

45:                                               ; preds = %41, %35
  store ptr %37, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %46 = icmp eq i32 %38, 2
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.102) #20
  br label %49

49:                                               ; preds = %47, %45
  %50 = icmp eq i32 %38, 1
  %51 = load i8, ptr %4, align 1
  %52 = icmp ne i8 %51, 0
  %53 = select i1 %50, i1 %52, i1 false
  %54 = load i32, ptr @warn_cxx_compat, align 4
  %55 = icmp ne i32 %54, 0
  %56 = select i1 %53, i1 %55, i1 false
  br i1 %56, label %57, label %59

57:                                               ; preds = %49
  %58 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.103) #20
  br label %59

59:                                               ; preds = %16, %49, %57
  %60 = phi i32 [ 1, %57 ], [ %38, %49 ], [ 0, %16 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #20
  ret i32 %60
}

declare void @expand_location(ptr sret(%struct.expanded_location) align 8, i32 noundef) local_unnamed_addr #3

declare ptr @build_constructor_single(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @vector_targets_convertible_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @check_missing_format_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @c_common_unsigned_type(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @objc_type_quals_match(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @parser_build_unary_op(ptr noalias nocapture writeonly sret(%struct.c_expr) align 8 %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly byval(%struct.c_expr) align 8 %3) local_unnamed_addr #9 {
  %5 = load ptr, ptr %3, align 8, !tbaa !64
  %6 = tail call ptr @build_unary_op(i32 noundef %1, i32 noundef %2, ptr noundef %5, i32 noundef 0)
  store ptr %6, ptr %0, align 8, !tbaa !64
  %7 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 %2, ptr %7, align 8, !tbaa !97
  %8 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %8, align 8, !tbaa !98
  %9 = load i64, ptr %6, align 8
  %10 = and i64 %9, 65535
  %11 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !17
  %13 = icmp ne i32 %12, 1
  %14 = and i64 %9, 134217728
  %15 = icmp eq i64 %14, 0
  %16 = or i1 %13, %15
  br i1 %16, label %27, label %17

17:                                               ; preds = %4
  %18 = load i64, ptr %5, align 8
  %19 = and i64 %18, 65535
  %20 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !17
  %22 = icmp ne i32 %21, 1
  %23 = and i64 %18, 134217728
  %24 = icmp eq i64 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %17
  tail call void @overflow_warning(i32 noundef %1, ptr noundef nonnull %6) #20
  br label %27

27:                                               ; preds = %17, %26, %4
  ret void
}

declare void @overflow_warning(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @parser_build_binary_op(ptr noalias nocapture writeonly sret(%struct.c_expr) align 8 %0, i32 noundef %1, i32 noundef %2, ptr nocapture noundef readonly byval(%struct.c_expr) align 8 %3, ptr nocapture noundef readonly byval(%struct.c_expr) align 8 %4) local_unnamed_addr #9 {
  %6 = getelementptr inbounds %struct.c_expr, ptr %3, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !97
  %8 = getelementptr inbounds %struct.c_expr, ptr %4, i64 0, i32 1
  %9 = load i32, ptr %8, align 8, !tbaa !97
  %10 = getelementptr inbounds %struct.c_expr, ptr %3, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !98
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %5
  %14 = load ptr, ptr %3, align 8, !tbaa !64
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  br label %17

17:                                               ; preds = %5, %13
  %18 = phi ptr [ %16, %13 ], [ %11, %5 ]
  %19 = getelementptr inbounds %struct.c_expr, ptr %4, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !98
  %21 = icmp eq ptr %20, null
  %22 = load ptr, ptr %4, align 8, !tbaa !64
  br i1 %21, label %23, label %26

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  br label %26

26:                                               ; preds = %17, %23
  %27 = phi ptr [ %25, %23 ], [ %20, %17 ]
  %28 = load ptr, ptr %3, align 8, !tbaa !64
  %29 = tail call ptr @build_binary_op(i32 noundef %1, i32 noundef %2, ptr noundef %28, ptr noundef %22, i32 noundef 1)
  store ptr %29, ptr %0, align 8, !tbaa !64
  %30 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 %2, ptr %30, align 8, !tbaa !97
  %31 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %31, align 8, !tbaa !98
  %32 = load i64, ptr %29, align 8
  %33 = and i64 %32, 65535
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %125, label %35

35:                                               ; preds = %26
  %36 = icmp eq i32 %1, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  tail call void @protected_set_expr_location(ptr noundef nonnull %29, i32 noundef %1) #20
  br label %38

38:                                               ; preds = %37, %35
  %39 = load i32, ptr @warn_parentheses, align 4, !tbaa !21
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %38
  tail call void @warn_about_parentheses(i32 noundef %2, i32 noundef %7, ptr noundef %28, i32 noundef %9, ptr noundef %22) #20
  br label %42

42:                                               ; preds = %41, %38
  %43 = load i32, ptr @warn_logical_op, align 4, !tbaa !21
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = load i32, ptr @input_location, align 4, !tbaa !21
  %47 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  tail call void @warn_logical_operator(i32 noundef %46, i32 noundef %2, ptr noundef %48, i32 noundef %7, ptr noundef %28, i32 noundef %9, ptr noundef %22) #20
  br label %49

49:                                               ; preds = %45, %42
  %50 = add i32 %2, -101
  %51 = icmp ult i32 %50, 2
  br i1 %51, label %52, label %62

52:                                               ; preds = %49
  %53 = icmp eq i32 %7, 28
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = tail call i32 @integer_zerop(ptr noundef %22) #20
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %71, label %57

57:                                               ; preds = %54, %52
  %58 = icmp eq i32 %9, 28
  br i1 %58, label %59, label %73

59:                                               ; preds = %57
  %60 = tail call i32 @integer_zerop(ptr noundef %28) #20
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %73

62:                                               ; preds = %49
  %63 = sext i32 %2 to i64
  %64 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %63
  %65 = load i32, ptr %64, align 4, !tbaa !17
  %66 = icmp eq i32 %65, 5
  br i1 %66, label %67, label %73

67:                                               ; preds = %62
  %68 = icmp eq i32 %7, 28
  %69 = icmp eq i32 %9, 28
  %70 = select i1 %68, i1 true, i1 %69
  br i1 %70, label %71, label %73

71:                                               ; preds = %67, %54, %59
  %72 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %1, i32 noundef 33, ptr noundef nonnull @.str.104) #20
  br label %73

73:                                               ; preds = %71, %62, %67, %57, %59
  %74 = load i64, ptr %29, align 8
  %75 = and i64 %74, 65535
  %76 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %75
  %77 = load i32, ptr %76, align 4, !tbaa !17
  %78 = icmp ne i32 %77, 1
  %79 = and i64 %74, 134217728
  %80 = icmp eq i64 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %101, label %82

82:                                               ; preds = %73
  %83 = load i64, ptr %28, align 8
  %84 = and i64 %83, 65535
  %85 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !17
  %87 = icmp ne i32 %86, 1
  %88 = and i64 %83, 134217728
  %89 = icmp eq i64 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %101

91:                                               ; preds = %82
  %92 = load i64, ptr %22, align 8
  %93 = and i64 %92, 65535
  %94 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %93
  %95 = load i32, ptr %94, align 4, !tbaa !17
  %96 = icmp ne i32 %95, 1
  %97 = and i64 %92, 134217728
  %98 = icmp eq i64 %97, 0
  %99 = or i1 %96, %98
  br i1 %99, label %100, label %101

100:                                              ; preds = %91
  tail call void @overflow_warning(i32 noundef %1, ptr noundef nonnull %29) #20
  br label %101

101:                                              ; preds = %91, %82, %100, %73
  %102 = load i32, ptr @warn_enum_compare, align 4, !tbaa !21
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %125, label %104

104:                                              ; preds = %101
  %105 = sext i32 %2 to i64
  %106 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %105
  %107 = load i32, ptr %106, align 4, !tbaa !17
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %109, label %125

109:                                              ; preds = %104
  %110 = load i64, ptr %18, align 8
  %111 = and i64 %110, 65535
  %112 = icmp eq i64 %111, 6
  br i1 %112, label %113, label %125

113:                                              ; preds = %109
  %114 = load i64, ptr %27, align 8
  %115 = and i64 %114, 65535
  %116 = icmp eq i64 %115, 6
  br i1 %116, label %117, label %125

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.tree_type, ptr %18, i64 0, i32 16
  %119 = load ptr, ptr %118, align 8, !tbaa !17
  %120 = getelementptr inbounds %struct.tree_type, ptr %27, i64 0, i32 16
  %121 = load ptr, ptr %120, align 8, !tbaa !17
  %122 = icmp eq ptr %119, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %117
  %124 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %1, i32 noundef 76, ptr noundef nonnull @.str.105, ptr noundef nonnull %18, ptr noundef nonnull %27) #20
  br label %125

125:                                              ; preds = %101, %104, %109, %113, %117, %123, %26
  ret void
}

declare void @warn_about_parentheses(i32 noundef, i32 noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare void @warn_logical_operator(i32 noundef, i32 noundef, ptr noundef, i32 noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @non_lvalue_loc(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_objc_common_truthvalue_conversion(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = load i64, ptr %4, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %16 [
    i16 15, label %7
    i16 16, label %9
    i16 17, label %11
    i16 20, label %13
  ]

7:                                                ; preds = %2
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.245) #20
  %8 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %68

9:                                                ; preds = %2
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.246) #20
  %10 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %68

11:                                               ; preds = %2
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.247) #20
  %12 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %68

13:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 9902, ptr noundef nonnull @.str.8) #20
  %14 = load ptr, ptr %3, align 8, !tbaa !17
  %15 = load i64, ptr %14, align 8
  br label %16

16:                                               ; preds = %13, %2
  %17 = phi i64 [ %15, %13 ], [ %5, %2 ]
  %18 = load i64, ptr %1, align 8
  %19 = and i64 %18, 65535
  %20 = and i64 %18, 134283263
  %21 = icmp eq i64 %20, 23
  %22 = trunc i64 %17 to i32
  %23 = and i32 %22, 65535
  %24 = add nsw i32 %23, -6
  %25 = icmp ult i32 %24, 3
  br i1 %25, label %26, label %36

26:                                               ; preds = %16
  %27 = trunc i64 %18 to i16
  switch i16 %27, label %36 [
    i16 23, label %31
    i16 189, label %28
  ]

28:                                               ; preds = %26
  %29 = and i64 %18, 8589934592
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %36, label %31

31:                                               ; preds = %26, %28
  %32 = icmp eq i64 %19, 189
  br i1 %32, label %33, label %36

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  br label %36

36:                                               ; preds = %26, %16, %33, %31, %28
  %37 = phi i1 [ true, %28 ], [ false, %31 ], [ false, %33 ], [ true, %16 ], [ true, %26 ]
  %38 = phi ptr [ %1, %28 ], [ %1, %31 ], [ %35, %33 ], [ %1, %16 ], [ %1, %26 ]
  %39 = tail call ptr @c_common_truthvalue_conversion(i32 noundef %0, ptr noundef %38) #20
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 65535
  %42 = icmp ne i64 %41, 23
  %43 = or i1 %37, %42
  %44 = or i1 %21, %43
  br i1 %44, label %62, label %45

45:                                               ; preds = %36
  %46 = and i64 %40, 134217728
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %68

48:                                               ; preds = %45
  %49 = load i8, ptr @in_late_binary_op, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %48
  %52 = tail call ptr @copy_node_stat(ptr noundef nonnull %39) #20
  br label %57

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.tree_common, ptr %39, i64 0, i32 2
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %55, ptr noundef null, ptr noundef nonnull %39) #20
  br label %57

57:                                               ; preds = %51, %53
  %58 = phi ptr [ %56, %53 ], [ %52, %51 ]
  %59 = phi i64 [ 8589934592, %53 ], [ 134217728, %51 ]
  %60 = load i64, ptr %58, align 8
  %61 = or i64 %60, %59
  store i64 %61, ptr %58, align 8
  br label %68

62:                                               ; preds = %36
  %63 = or i1 %21, %42
  br i1 %63, label %68, label %64

64:                                               ; preds = %62
  %65 = getelementptr inbounds %struct.tree_common, ptr %39, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  %67 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %66, ptr noundef nonnull %39) #20
  br label %68

68:                                               ; preds = %62, %45, %64, %57, %11, %9, %7
  %69 = phi ptr [ %67, %64 ], [ %58, %57 ], [ %12, %11 ], [ %10, %9 ], [ %8, %7 ], [ %39, %45 ], [ %39, %62 ]
  ret ptr %69
}

declare ptr @invert_truthvalue_loc(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_build1_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @omit_one_operand_loc(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @lvalue_or_else(ptr nocapture noundef readonly %0, i32 noundef %1) unnamed_addr #9 {
  br label %3

3:                                                ; preds = %9, %2
  %4 = phi ptr [ %0, %2 ], [ %11, %9 ]
  %5 = load i64, ptr %4, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %26 [
    i16 43, label %7
    i16 44, label %7
    i16 41, label %7
    i16 189, label %12
    i16 119, label %27
    i16 28, label %27
    i16 47, label %20
    i16 45, label %20
    i16 32, label %20
    i16 34, label %20
    i16 36, label %20
    i16 0, label %20
    i16 58, label %14
  ]

7:                                                ; preds = %3, %3, %3
  %8 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  br label %9

9:                                                ; preds = %12, %7
  %10 = phi ptr [ %8, %7 ], [ %13, %12 ]
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  br label %3

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  br label %9

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 15
  br i1 %19, label %27, label %26

20:                                               ; preds = %3, %3, %3, %3, %3, %3
  %21 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = load i64, ptr %22, align 8
  %24 = and i64 %23, 65534
  %25 = icmp eq i64 %24, 20
  br i1 %25, label %26, label %27

26:                                               ; preds = %3, %14, %20
  tail call void @lvalue_error(i32 noundef %1) #20
  br label %27

27:                                               ; preds = %3, %3, %14, %26, %20
  %28 = phi i32 [ 0, %26 ], [ 1, %20 ], [ 1, %14 ], [ 1, %3 ], [ 1, %3 ]
  ret i32 %28
}

declare ptr @stabilize_reference(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @c_size_in_bytes(ptr nocapture noundef readonly %0) unnamed_addr #9 {
  %2 = load i64, ptr %0, align 8
  %3 = trunc i64 %2 to i16
  switch i16 %3, label %6 [
    i16 20, label %4
    i16 19, label %4
    i16 0, label %4
  ]

4:                                                ; preds = %1, %1, %1
  %5 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  br label %24

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = icmp eq ptr %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.121) #20
  %11 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  br label %24

12:                                               ; preds = %6
  %13 = load i32, ptr @input_location, align 4, !tbaa !21
  %14 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load ptr, ptr @integer_types, align 16, !tbaa !6
  %17 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = lshr i32 %18, 3
  %20 = and i32 %19, 127
  %21 = zext i32 %20 to i64
  %22 = tail call ptr @size_int_kind(i64 noundef %21, i32 noundef 0) #20
  %23 = tail call ptr @size_binop_loc(i32 noundef %13, i32 noundef 68, ptr noundef %15, ptr noundef %22) #20
  br label %24

24:                                               ; preds = %12, %10, %4
  %25 = phi ptr [ %5, %4 ], [ %23, %12 ], [ %11, %10 ]
  ret ptr %25
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @readonly_error(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  switch i32 %1, label %16 [
    i32 4, label %3
    i32 2, label %3
    i32 1, label %3
    i32 0, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2
  br label %4

4:                                                ; preds = %3, %8
  %5 = phi ptr [ %10, %8 ], [ %0, %3 ]
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %46 [
    i16 41, label %8
    i16 32, label %38
  ]

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %12, align 8
  %14 = and i64 %13, 1048576
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %28, label %4

16:                                               ; preds = %2, %20
  %17 = phi ptr [ %22, %20 ], [ %0, %2 ]
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3765, ptr noundef nonnull @.str.8) #20
  %18 = load i64, ptr %17, align 8
  %19 = trunc i64 %18 to i16
  switch i16 %19, label %46 [
    i16 41, label %20
    i16 32, label %38
  ]

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.tree_exp, ptr %17, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load i64, ptr %24, align 8
  %26 = and i64 %25, 1048576
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %16

28:                                               ; preds = %8, %20
  %29 = phi ptr [ %17, %20 ], [ %5, %8 ]
  %30 = icmp eq i32 %1, 0
  %31 = icmp eq i32 %1, 1
  %32 = icmp eq i32 %1, 2
  %33 = select i1 %32, ptr @.str.124, ptr @.str.125
  %34 = select i1 %31, ptr @.str.123, ptr %33
  %35 = select i1 %30, ptr @.str.122, ptr %34
  %36 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  tail call void (ptr, ...) @error(ptr noundef nonnull %35, ptr noundef %37) #20
  br label %54

38:                                               ; preds = %4, %16
  %39 = phi ptr [ %17, %16 ], [ %5, %4 ]
  %40 = icmp eq i32 %1, 0
  %41 = icmp eq i32 %1, 1
  %42 = icmp eq i32 %1, 2
  %43 = select i1 %42, ptr @.str.128, ptr @.str.129
  %44 = select i1 %41, ptr @.str.127, ptr %43
  %45 = select i1 %40, ptr @.str.126, ptr %44
  tail call void (ptr, ...) @error(ptr noundef nonnull %45, ptr noundef nonnull %39) #20
  br label %54

46:                                               ; preds = %4, %16
  %47 = phi ptr [ %17, %16 ], [ %5, %4 ]
  %48 = icmp eq i32 %1, 0
  %49 = icmp eq i32 %1, 1
  %50 = icmp eq i32 %1, 2
  %51 = select i1 %50, ptr @.str.132, ptr @.str.133
  %52 = select i1 %49, ptr @.str.131, ptr %51
  %53 = select i1 %48, ptr @.str.130, ptr %52
  tail call void (ptr, ...) @error(ptr noundef nonnull %53, ptr noundef nonnull %47) #20
  br label %54

54:                                               ; preds = %38, %46, %28
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @readonly_warning(ptr noundef %0, i32 noundef %1) unnamed_addr #9 {
  switch i32 %1, label %9 [
    i32 0, label %3
    i32 1, label %5
    i32 2, label %7
  ]

3:                                                ; preds = %2
  %4 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.130, ptr noundef %0) #20
  br label %10

5:                                                ; preds = %2
  %6 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.131, ptr noundef %0) #20
  br label %10

7:                                                ; preds = %2
  %8 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.132, ptr noundef %0) #20
  br label %10

9:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3815, ptr noundef nonnull @.str.8) #20
  br label %10

10:                                               ; preds = %9, %7, %5, %3
  ret void
}

declare ptr @boolean_increment(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @get_base_address(ptr noundef) local_unnamed_addr #3

declare ptr @fold_offsetof(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_build2_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @fold_build1_initializer_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @note_integer_operands(ptr noundef %0) unnamed_addr #9 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = icmp eq i64 %3, 23
  %5 = load i8, ptr @in_late_binary_op, align 1
  %6 = icmp ne i8 %5, 0
  %7 = select i1 %4, i1 %6, i1 false
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = tail call ptr @copy_node_stat(ptr noundef nonnull %0) #20
  br label %14

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %12, ptr noundef null, ptr noundef nonnull %0) #20
  br label %14

14:                                               ; preds = %10, %8
  %15 = phi ptr [ %13, %10 ], [ %9, %8 ]
  %16 = phi i64 [ 8589934592, %10 ], [ 134217728, %8 ]
  %17 = load i64, ptr %15, align 8
  %18 = or i64 %17, %16
  store i64 %18, ptr %15, align 8
  ret ptr %15
}

declare void @lvalue_error(i32 noundef) local_unnamed_addr #3

declare ptr @size_binop_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @size_int_kind(i64 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @copy_node_stat(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_conditional_expr(i32 noundef %0, ptr noundef %1, i8 noundef zeroext %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6) local_unnamed_addr #9 {
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 65535
  %16 = add nsw i32 %15, -6
  %17 = icmp ult i32 %16, 3
  br i1 %17, label %18, label %30

18:                                               ; preds = %7
  %19 = load i64, ptr %3, align 8
  %20 = trunc i64 %19 to i16
  switch i16 %20, label %30 [
    i16 23, label %24
    i16 189, label %21
  ]

21:                                               ; preds = %18
  %22 = and i64 %19, 8589934592
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %30, label %24

24:                                               ; preds = %18, %21
  %25 = and i64 %19, 65535
  %26 = icmp eq i64 %25, 189
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  br label %30

30:                                               ; preds = %18, %7, %27, %24, %21
  %31 = phi i1 [ false, %21 ], [ true, %24 ], [ true, %27 ], [ false, %7 ], [ false, %18 ]
  %32 = phi ptr [ %3, %21 ], [ %3, %24 ], [ %29, %27 ], [ %3, %7 ], [ %3, %18 ]
  %33 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = load i64, ptr %34, align 8
  %36 = trunc i64 %35 to i32
  %37 = and i32 %36, 65535
  %38 = add nsw i32 %37, -6
  %39 = icmp ult i32 %38, 3
  br i1 %39, label %40, label %52

40:                                               ; preds = %30
  %41 = load i64, ptr %5, align 8
  %42 = trunc i64 %41 to i16
  switch i16 %42, label %52 [
    i16 23, label %46
    i16 189, label %43
  ]

43:                                               ; preds = %40
  %44 = and i64 %41, 8589934592
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %40, %43
  %47 = and i64 %41, 65535
  %48 = icmp eq i64 %47, 189
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  br label %52

52:                                               ; preds = %40, %30, %49, %46, %43
  %53 = phi i1 [ false, %43 ], [ true, %46 ], [ true, %49 ], [ false, %30 ], [ false, %40 ]
  %54 = phi ptr [ %5, %43 ], [ %5, %46 ], [ %51, %49 ], [ %5, %30 ], [ %5, %40 ]
  %55 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = load i64, ptr %56, align 8
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 65535
  %60 = add nsw i32 %59, -6
  %61 = icmp ult i32 %60, 3
  br i1 %61, label %62, label %74

62:                                               ; preds = %52
  %63 = load i64, ptr %1, align 8
  %64 = trunc i64 %63 to i16
  switch i16 %64, label %74 [
    i16 23, label %68
    i16 189, label %65
  ]

65:                                               ; preds = %62
  %66 = and i64 %63, 8589934592
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %74, label %68

68:                                               ; preds = %62, %65
  %69 = and i64 %63, 65535
  %70 = icmp eq i64 %69, 189
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  br label %74

74:                                               ; preds = %62, %52, %71, %68, %65
  %75 = phi i1 [ false, %65 ], [ true, %68 ], [ true, %71 ], [ false, %52 ], [ false, %62 ]
  %76 = phi ptr [ %1, %65 ], [ %1, %68 ], [ %73, %71 ], [ %1, %52 ], [ %1, %62 ]
  %77 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %78 = load ptr, ptr %77, align 8, !tbaa !17
  %79 = load i64, ptr %78, align 8
  %80 = and i64 %79, 65535
  %81 = icmp eq i64 %80, 19
  br i1 %81, label %84, label %82

82:                                               ; preds = %74
  %83 = tail call ptr @default_conversion(ptr noundef nonnull %32)
  br label %84

84:                                               ; preds = %82, %74
  %85 = phi ptr [ %83, %82 ], [ %32, %74 ]
  %86 = getelementptr inbounds %struct.tree_common, ptr %54, i64 0, i32 2
  %87 = load ptr, ptr %86, align 8, !tbaa !17
  %88 = load i64, ptr %87, align 8
  %89 = and i64 %88, 65535
  %90 = icmp eq i64 %89, 19
  br i1 %90, label %93, label %91

91:                                               ; preds = %84
  %92 = tail call ptr @default_conversion(ptr noundef nonnull %54)
  br label %93

93:                                               ; preds = %91, %84
  %94 = phi ptr [ %92, %91 ], [ %54, %84 ]
  %95 = load i64, ptr %76, align 8
  %96 = and i64 %95, 65535
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %112, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.tree_common, ptr %85, i64 0, i32 2
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = load i64, ptr %100, align 8
  %102 = trunc i64 %101 to i32
  %103 = and i32 %102, 65535
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %98
  %106 = getelementptr inbounds %struct.tree_common, ptr %94, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  %108 = load i64, ptr %107, align 8
  %109 = trunc i64 %108 to i32
  %110 = and i32 %109, 65535
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %105, %98, %93
  %113 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %570

114:                                              ; preds = %105
  %115 = icmp eq i32 %103, 15
  %116 = icmp eq i32 %110, 15
  %117 = or i1 %115, %116
  br i1 %117, label %118, label %120

118:                                              ; preds = %114
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.139) #20
  %119 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %570

120:                                              ; preds = %114
  %121 = tail call zeroext i8 @objc_compare_types(ptr noundef nonnull %100, ptr noundef nonnull %107, i32 noundef -3, ptr noundef null) #20
  %122 = load i64, ptr %85, align 8
  %123 = and i64 %122, 65535
  %124 = icmp eq i64 %123, 190
  br i1 %124, label %129, label %125

125:                                              ; preds = %120
  %126 = load i64, ptr %94, align 8
  %127 = and i64 %126, 65535
  %128 = icmp eq i64 %127, 190
  br i1 %128, label %129, label %170

129:                                              ; preds = %125, %120
  %130 = and i32 %102, 65534
  %131 = icmp eq i32 %130, 8
  %132 = icmp eq i32 %103, 13
  %133 = or i1 %131, %132
  br i1 %133, label %134, label %170

134:                                              ; preds = %129
  %135 = and i32 %109, 65534
  %136 = icmp eq i32 %135, 8
  %137 = icmp eq i32 %110, 13
  %138 = or i1 %136, %137
  br i1 %138, label %139, label %170

139:                                              ; preds = %134
  %140 = tail call fastcc ptr @c_common_type(ptr noundef nonnull %100, ptr noundef nonnull %107)
  %141 = load i64, ptr %85, align 8
  %142 = and i64 %141, 65535
  %143 = icmp eq i64 %142, 190
  br i1 %143, label %144, label %154

144:                                              ; preds = %139
  %145 = getelementptr inbounds %struct.tree_exp, ptr %85, i64 0, i32 3
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  %147 = getelementptr inbounds %struct.tree_common, ptr %146, i64 0, i32 2
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = load i64, ptr %148, align 8
  %150 = trunc i64 %149 to i32
  %151 = and i32 %150, 65535
  %152 = icmp eq i32 %151, %103
  br i1 %152, label %154, label %153

153:                                              ; preds = %144
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 4003, ptr noundef nonnull @.str.8) #20
  br label %154

154:                                              ; preds = %153, %144, %139
  %155 = phi ptr [ %148, %144 ], [ %148, %153 ], [ %100, %139 ]
  %156 = phi ptr [ %146, %144 ], [ %146, %153 ], [ %85, %139 ]
  %157 = load i64, ptr %94, align 8
  %158 = and i64 %157, 65535
  %159 = icmp eq i64 %158, 190
  br i1 %159, label %160, label %170

160:                                              ; preds = %154
  %161 = getelementptr inbounds %struct.tree_exp, ptr %94, i64 0, i32 3
  %162 = load ptr, ptr %161, align 8, !tbaa !17
  %163 = getelementptr inbounds %struct.tree_common, ptr %162, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = load i64, ptr %164, align 8
  %166 = trunc i64 %165 to i32
  %167 = and i32 %166, 65535
  %168 = icmp eq i32 %167, %110
  br i1 %168, label %170, label %169

169:                                              ; preds = %160
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 4009, ptr noundef nonnull @.str.8) #20
  br label %170

170:                                              ; preds = %169, %160, %154, %134, %129, %125
  %171 = phi ptr [ %140, %160 ], [ %140, %169 ], [ %140, %154 ], [ null, %134 ], [ null, %129 ], [ null, %125 ]
  %172 = phi ptr [ %164, %160 ], [ %164, %169 ], [ %107, %154 ], [ %107, %134 ], [ %107, %129 ], [ %107, %125 ]
  %173 = phi ptr [ %155, %160 ], [ %155, %169 ], [ %155, %154 ], [ %100, %134 ], [ %100, %129 ], [ %100, %125 ]
  %174 = phi ptr [ %162, %160 ], [ %162, %169 ], [ %94, %154 ], [ %94, %134 ], [ %94, %129 ], [ %94, %125 ]
  %175 = phi ptr [ %156, %160 ], [ %156, %169 ], [ %156, %154 ], [ %85, %134 ], [ %85, %129 ], [ %85, %125 ]
  %176 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %204, label %178

178:                                              ; preds = %170
  %179 = icmp eq ptr %4, null
  br i1 %179, label %180, label %182

180:                                              ; preds = %178
  %181 = load ptr, ptr %11, align 8, !tbaa !17
  br label %182

182:                                              ; preds = %178, %180
  %183 = phi ptr [ %181, %180 ], [ %4, %178 ]
  %184 = icmp eq ptr %6, null
  br i1 %184, label %185, label %187

185:                                              ; preds = %182
  %186 = load ptr, ptr %33, align 8, !tbaa !17
  br label %187

187:                                              ; preds = %182, %185
  %188 = phi ptr [ %186, %185 ], [ %6, %182 ]
  %189 = load i64, ptr %183, align 8
  %190 = and i64 %189, 65535
  %191 = icmp eq i64 %190, 6
  br i1 %191, label %192, label %204

192:                                              ; preds = %187
  %193 = load i64, ptr %188, align 8
  %194 = and i64 %193, 65535
  %195 = icmp eq i64 %194, 6
  br i1 %195, label %196, label %204

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.tree_type, ptr %183, i64 0, i32 16
  %198 = load ptr, ptr %197, align 8, !tbaa !17
  %199 = getelementptr inbounds %struct.tree_type, ptr %188, i64 0, i32 16
  %200 = load ptr, ptr %199, align 8, !tbaa !17
  %201 = icmp eq ptr %198, %200
  br i1 %201, label %204, label %202

202:                                              ; preds = %196
  %203 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.140, ptr noundef nonnull %183, ptr noundef nonnull %188) #20
  br label %204

204:                                              ; preds = %187, %192, %196, %202, %170
  %205 = getelementptr inbounds %struct.tree_type, ptr %173, i64 0, i32 16
  %206 = load ptr, ptr %205, align 8, !tbaa !17
  %207 = getelementptr inbounds %struct.tree_type, ptr %172, i64 0, i32 16
  %208 = load ptr, ptr %207, align 8, !tbaa !17
  %209 = icmp eq ptr %206, %208
  br i1 %209, label %210, label %212

210:                                              ; preds = %204
  %211 = icmp eq ptr %173, %172
  br i1 %211, label %429, label %419

212:                                              ; preds = %204
  %213 = icmp eq i32 %103, 8
  %214 = and i32 %102, 65534
  %215 = icmp eq i32 %214, 8
  %216 = icmp eq i32 %103, 13
  %217 = or i1 %215, %216
  br i1 %217, label %218, label %307

218:                                              ; preds = %212
  %219 = and i32 %109, 65534
  %220 = icmp eq i32 %219, 8
  %221 = icmp eq i32 %110, 13
  %222 = or i1 %220, %221
  br i1 %222, label %223, label %307

223:                                              ; preds = %218
  %224 = tail call fastcc ptr @c_common_type(ptr noundef nonnull %173, ptr noundef nonnull %172)
  %225 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %419

227:                                              ; preds = %223
  %228 = load ptr, ptr %11, align 8, !tbaa !17
  %229 = load i64, ptr %228, align 8
  %230 = trunc i64 %229 to i32
  %231 = lshr i32 %230, 21
  %232 = and i32 %231, 1
  %233 = load ptr, ptr %33, align 8, !tbaa !17
  %234 = load i64, ptr %233, align 8
  %235 = trunc i64 %234 to i32
  %236 = lshr i32 %235, 21
  %237 = and i32 %236, 1
  %238 = icmp eq i32 %232, %237
  br i1 %238, label %419, label %239

239:                                              ; preds = %227
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #20
  %240 = load i64, ptr %224, align 8
  %241 = and i64 %240, 2097152
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %304, label %243

243:                                              ; preds = %239
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9) #20
  store i8 1, ptr %9, align 1, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10) #20
  store i8 1, ptr %10, align 1, !tbaa !17
  %244 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 47), align 8, !tbaa !6
  %245 = icmp eq ptr %76, %244
  %246 = zext i1 %245 to i32
  store i32 %246, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %247 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %248 = trunc i32 %247 to i8
  %249 = call ptr @c_fully_fold(ptr noundef nonnull %175, i8 noundef zeroext %248, ptr noundef nonnull %9) #20
  %250 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 47), align 8, !tbaa !6
  %251 = icmp eq ptr %76, %250
  %252 = sext i1 %251 to i32
  %253 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %254 = add i32 %253, %252
  %255 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 46), align 16, !tbaa !6
  %256 = icmp eq ptr %76, %255
  %257 = zext i1 %256 to i32
  %258 = add nsw i32 %254, %257
  store i32 %258, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %259 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %260 = trunc i32 %259 to i8
  %261 = call ptr @c_fully_fold(ptr noundef nonnull %174, i8 noundef zeroext %260, ptr noundef nonnull %10) #20
  %262 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 46), align 16, !tbaa !6
  %263 = icmp eq ptr %76, %262
  %264 = sext i1 %263 to i32
  %265 = load i32, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %266 = add i32 %265, %264
  store i32 %266, ptr @c_inhibit_evaluation_warnings, align 4, !tbaa !21
  %267 = load i32, ptr @warn_sign_compare, align 4, !tbaa !21
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %281, label %269

269:                                              ; preds = %243
  %270 = icmp eq i32 %237, 0
  br i1 %270, label %274, label %271

271:                                              ; preds = %269
  %272 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %249, ptr noundef nonnull %8) #20
  %273 = icmp eq i8 %272, 0
  br i1 %273, label %274, label %281

274:                                              ; preds = %271, %269
  %275 = icmp eq i32 %232, 0
  br i1 %275, label %279, label %276

276:                                              ; preds = %274
  %277 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %261, ptr noundef nonnull %8) #20
  %278 = icmp eq i8 %277, 0
  br i1 %278, label %279, label %281

279:                                              ; preds = %276, %274
  %280 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 177, ptr noundef nonnull @.str.141) #20
  br label %281

281:                                              ; preds = %279, %276, %271, %243
  %282 = load i8, ptr %9, align 1, !tbaa !17
  %283 = icmp eq i8 %282, 0
  br i1 %283, label %288, label %284

284:                                              ; preds = %281
  %285 = load i64, ptr %249, align 8
  %286 = and i64 %285, 65535
  %287 = icmp eq i64 %286, 23
  br i1 %287, label %291, label %288

288:                                              ; preds = %284, %281
  %289 = zext i1 %283 to i8
  %290 = call ptr @c_wrap_maybe_const(ptr noundef %249, i8 noundef zeroext %289) #20
  br label %291

291:                                              ; preds = %288, %284
  %292 = phi ptr [ %290, %288 ], [ %249, %284 ]
  %293 = load i8, ptr %10, align 1, !tbaa !17
  %294 = icmp eq i8 %293, 0
  br i1 %294, label %299, label %295

295:                                              ; preds = %291
  %296 = load i64, ptr %261, align 8
  %297 = and i64 %296, 65535
  %298 = icmp eq i64 %297, 23
  br i1 %298, label %302, label %299

299:                                              ; preds = %295, %291
  %300 = zext i1 %294 to i8
  %301 = call ptr @c_wrap_maybe_const(ptr noundef %261, i8 noundef zeroext %300) #20
  br label %302

302:                                              ; preds = %299, %295
  %303 = phi ptr [ %301, %299 ], [ %261, %295 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #20
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #20
  br label %304

304:                                              ; preds = %239, %302
  %305 = phi ptr [ %303, %302 ], [ %174, %239 ]
  %306 = phi ptr [ %292, %302 ], [ %175, %239 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #20
  br label %429

307:                                              ; preds = %218, %212
  %308 = icmp eq i32 %103, 19
  %309 = icmp eq i32 %110, 19
  %310 = or i1 %308, %309
  br i1 %310, label %311, label %319

311:                                              ; preds = %307
  %312 = icmp ne i32 %103, 19
  %313 = icmp ne i32 %110, 19
  %314 = or i1 %312, %313
  br i1 %314, label %315, label %317

315:                                              ; preds = %311
  %316 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.142) #20
  br label %317

317:                                              ; preds = %311, %315
  %318 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  br label %419

319:                                              ; preds = %307
  %320 = icmp eq i32 %103, 10
  %321 = icmp eq i32 %110, 10
  %322 = and i1 %320, %321
  br i1 %322, label %323, label %400

323:                                              ; preds = %319
  %324 = getelementptr %struct.tree_common, ptr %173, i64 0, i32 2
  %325 = load ptr, ptr %324, align 8, !tbaa !17
  %326 = load i64, ptr %325, align 8
  %327 = lshr i64 %326, 56
  %328 = trunc i64 %327 to i8
  %329 = getelementptr %struct.tree_common, ptr %172, i64 0, i32 2
  %330 = load ptr, ptr %329, align 8, !tbaa !17
  %331 = load i64, ptr %330, align 8
  %332 = lshr i64 %331, 56
  %333 = trunc i64 %332 to i8
  %334 = tail call fastcc i32 @comp_target_types(i32 noundef %0, ptr nonnull %325, ptr nonnull %330)
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %338, label %336

336:                                              ; preds = %323
  %337 = tail call fastcc ptr @common_pointer_type(ptr noundef nonnull %173, ptr noundef nonnull %172)
  br label %419

338:                                              ; preds = %323
  %339 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %3), !range !70
  %340 = icmp eq i8 %339, 0
  br i1 %340, label %341, label %429

341:                                              ; preds = %338
  %342 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %5), !range !70
  %343 = icmp eq i8 %342, 0
  br i1 %343, label %344, label %429

344:                                              ; preds = %341
  %345 = icmp eq i8 %328, %333
  br i1 %345, label %354, label %346

346:                                              ; preds = %344
  %347 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %348 = tail call zeroext i8 %347(i8 noundef zeroext %328, i8 noundef zeroext %333) #20
  %349 = icmp eq i8 %348, 0
  br i1 %349, label %350, label %354

350:                                              ; preds = %346
  %351 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %352 = tail call zeroext i8 %351(i8 noundef zeroext %333, i8 noundef zeroext %328) #20
  %353 = icmp eq i8 %352, 0
  br i1 %353, label %398, label %354

354:                                              ; preds = %350, %346, %344
  %355 = phi i8 [ %328, %344 ], [ %333, %346 ], [ %328, %350 ]
  %356 = load ptr, ptr %324, align 8, !tbaa !17
  %357 = load i64, ptr %356, align 8
  %358 = trunc i64 %357 to i32
  %359 = and i32 %358, 65535
  %360 = icmp eq i32 %359, 19
  %361 = load ptr, ptr %329, align 8, !tbaa !17
  %362 = load i64, ptr %361, align 8
  %363 = and i64 %362, 65535
  br i1 %360, label %364, label %375

364:                                              ; preds = %354
  %365 = icmp eq i64 %363, 20
  br i1 %365, label %366, label %370

366:                                              ; preds = %364
  %367 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.144) #20
  %368 = load ptr, ptr %324, align 8, !tbaa !17
  %369 = load ptr, ptr %329, align 8, !tbaa !17
  br label %370

370:                                              ; preds = %366, %364
  %371 = phi ptr [ %369, %366 ], [ %361, %364 ]
  %372 = phi ptr [ %368, %366 ], [ %356, %364 ]
  %373 = tail call fastcc ptr @qualify_type(ptr noundef %372, ptr noundef %371)
  %374 = tail call ptr @build_pointer_type(ptr noundef %373) #20
  br label %419

375:                                              ; preds = %354
  %376 = icmp eq i64 %363, 19
  br i1 %376, label %377, label %388

377:                                              ; preds = %375
  %378 = icmp eq i32 %359, 20
  br i1 %378, label %379, label %383

379:                                              ; preds = %377
  %380 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.144) #20
  %381 = load ptr, ptr %329, align 8, !tbaa !17
  %382 = load ptr, ptr %324, align 8, !tbaa !17
  br label %383

383:                                              ; preds = %379, %377
  %384 = phi ptr [ %382, %379 ], [ %356, %377 ]
  %385 = phi ptr [ %381, %379 ], [ %361, %377 ]
  %386 = tail call fastcc ptr @qualify_type(ptr noundef %385, ptr noundef %384)
  %387 = tail call ptr @build_pointer_type(ptr noundef %386) #20
  br label %419

388:                                              ; preds = %375
  %389 = zext i8 %355 to i32
  %390 = shl nuw nsw i32 %389, 8
  %391 = icmp eq i8 %121, 0
  br i1 %391, label %392, label %394

392:                                              ; preds = %388
  %393 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.145) #20
  br label %394

394:                                              ; preds = %392, %388
  %395 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %396 = tail call ptr @build_qualified_type(ptr noundef %395, i32 noundef %390) #20
  %397 = tail call ptr @build_pointer_type(ptr noundef %396) #20
  br label %419

398:                                              ; preds = %350
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.143) #20
  %399 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %570

400:                                              ; preds = %319
  %401 = icmp eq i32 %110, 8
  %402 = and i1 %320, %401
  br i1 %402, label %403, label %410

403:                                              ; preds = %400
  %404 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %5), !range !70
  %405 = icmp eq i8 %404, 0
  br i1 %405, label %406, label %408

406:                                              ; preds = %403
  %407 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.146) #20
  br label %429

408:                                              ; preds = %403
  %409 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 16), align 16, !tbaa !6
  br label %429

410:                                              ; preds = %400
  %411 = and i1 %213, %321
  br i1 %411, label %412, label %422

412:                                              ; preds = %410
  %413 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %3), !range !70
  %414 = icmp eq i8 %413, 0
  br i1 %414, label %415, label %417

415:                                              ; preds = %412
  %416 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.146) #20
  br label %429

417:                                              ; preds = %412
  %418 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 16), align 16, !tbaa !6
  br label %429

419:                                              ; preds = %336, %370, %394, %383, %210, %227, %223, %317
  %420 = phi ptr [ %224, %223 ], [ %318, %317 ], [ %206, %210 ], [ %224, %227 ], [ %397, %394 ], [ %387, %383 ], [ %374, %370 ], [ %337, %336 ]
  %421 = icmp eq ptr %420, null
  br i1 %421, label %422, label %429

422:                                              ; preds = %410, %419
  %423 = load i32, ptr @flag_cond_mismatch, align 4, !tbaa !21
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %427, label %425

425:                                              ; preds = %422
  %426 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  br label %429

427:                                              ; preds = %422
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.147) #20
  %428 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %570

429:                                              ; preds = %338, %341, %210, %415, %417, %406, %408, %304, %425, %419
  %430 = phi ptr [ %175, %419 ], [ %175, %425 ], [ %175, %415 ], [ %418, %417 ], [ %175, %406 ], [ %175, %408 ], [ %306, %304 ], [ %175, %210 ], [ %175, %341 ], [ %175, %338 ]
  %431 = phi ptr [ %174, %419 ], [ %174, %425 ], [ %174, %415 ], [ %174, %417 ], [ %174, %406 ], [ %409, %408 ], [ %305, %304 ], [ %174, %210 ], [ %174, %341 ], [ %174, %338 ]
  %432 = phi ptr [ %420, %419 ], [ %426, %425 ], [ %172, %415 ], [ %172, %417 ], [ %173, %406 ], [ %173, %408 ], [ %224, %304 ], [ %172, %210 ], [ %173, %341 ], [ %172, %338 ]
  %433 = load i64, ptr %173, align 8
  %434 = and i64 %433, 1048576
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %441

436:                                              ; preds = %429
  %437 = load i64, ptr %172, align 8
  %438 = trunc i64 %437 to i32
  %439 = lshr i32 %438, 20
  %440 = and i32 %439, 1
  br label %441

441:                                              ; preds = %436, %429
  %442 = phi i32 [ 1, %429 ], [ %440, %436 ]
  %443 = and i64 %433, 524288
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %445, label %450

445:                                              ; preds = %441
  %446 = load i64, ptr %172, align 8
  %447 = trunc i64 %446 to i32
  %448 = lshr i32 %447, 18
  %449 = and i32 %448, 2
  br label %450

450:                                              ; preds = %445, %441
  %451 = phi i32 [ 2, %441 ], [ %449, %445 ]
  %452 = or i32 %451, %442
  %453 = call ptr @build_qualified_type(ptr noundef %432, i32 noundef %452) #20
  %454 = getelementptr inbounds %struct.tree_common, ptr %430, i64 0, i32 2
  %455 = load ptr, ptr %454, align 8, !tbaa !17
  %456 = icmp eq ptr %455, %453
  br i1 %456, label %470, label %457

457:                                              ; preds = %450
  %458 = icmp eq ptr %171, null
  br i1 %458, label %475, label %459

459:                                              ; preds = %457
  %460 = load i64, ptr %455, align 8
  %461 = and i64 %460, 65535
  %462 = icmp ne i64 %461, 8
  %463 = icmp eq ptr %455, %171
  %464 = or i1 %463, %462
  br i1 %464, label %467, label %465

465:                                              ; preds = %459
  %466 = call ptr @convert_and_check(ptr noundef nonnull %171, ptr noundef nonnull %430) #20
  br label %467

467:                                              ; preds = %465, %459
  %468 = phi ptr [ %466, %465 ], [ %430, %459 ]
  %469 = call ptr @convert(ptr noundef %453, ptr noundef %468) #20
  br label %470

470:                                              ; preds = %450, %467
  %471 = phi ptr [ %469, %467 ], [ %430, %450 ]
  %472 = getelementptr inbounds %struct.tree_common, ptr %431, i64 0, i32 2
  %473 = load ptr, ptr %472, align 8, !tbaa !17
  %474 = icmp eq ptr %473, %453
  br i1 %474, label %496, label %480

475:                                              ; preds = %457
  %476 = call ptr @convert_and_check(ptr noundef %453, ptr noundef nonnull %430) #20
  %477 = getelementptr inbounds %struct.tree_common, ptr %431, i64 0, i32 2
  %478 = load ptr, ptr %477, align 8, !tbaa !17
  %479 = icmp eq ptr %478, %453
  br i1 %479, label %496, label %482

480:                                              ; preds = %470
  %481 = icmp eq ptr %171, null
  br i1 %481, label %482, label %485

482:                                              ; preds = %475, %480
  %483 = phi ptr [ %471, %480 ], [ %476, %475 ]
  %484 = call ptr @convert_and_check(ptr noundef %453, ptr noundef nonnull %431) #20
  br label %496

485:                                              ; preds = %480
  %486 = load i64, ptr %473, align 8
  %487 = and i64 %486, 65535
  %488 = icmp ne i64 %487, 8
  %489 = icmp eq ptr %473, %171
  %490 = or i1 %489, %488
  br i1 %490, label %493, label %491

491:                                              ; preds = %485
  %492 = call ptr @convert_and_check(ptr noundef nonnull %171, ptr noundef nonnull %431) #20
  br label %493

493:                                              ; preds = %491, %485
  %494 = phi ptr [ %492, %491 ], [ %431, %485 ]
  %495 = call ptr @convert(ptr noundef %453, ptr noundef %494) #20
  br label %496

496:                                              ; preds = %475, %470, %482, %493
  %497 = phi ptr [ %471, %493 ], [ %483, %482 ], [ %471, %470 ], [ %476, %475 ]
  %498 = phi ptr [ %495, %493 ], [ %484, %482 ], [ %431, %470 ], [ %431, %475 ]
  %499 = icmp ne i8 %2, 0
  %500 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 46), align 16
  %501 = icmp eq ptr %76, %500
  %502 = select i1 %499, i1 %501, i1 false
  br i1 %502, label %503, label %507

503:                                              ; preds = %496
  %504 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %505 = trunc i32 %504 to i8
  %506 = call ptr @c_fully_fold(ptr noundef %497, i8 noundef zeroext %505, ptr noundef null) #20
  br label %507

507:                                              ; preds = %503, %496
  %508 = phi i1 [ true, %503 ], [ %53, %496 ]
  %509 = phi ptr [ %506, %503 ], [ %497, %496 ]
  %510 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 47), align 8
  %511 = icmp eq ptr %76, %510
  %512 = select i1 %499, i1 %511, i1 false
  br i1 %512, label %513, label %517

513:                                              ; preds = %507
  %514 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %515 = trunc i32 %514 to i8
  %516 = call ptr @c_fully_fold(ptr noundef %498, i8 noundef zeroext %515, ptr noundef null) #20
  br label %517

517:                                              ; preds = %513, %507
  %518 = phi i1 [ true, %513 ], [ %31, %507 ]
  %519 = phi ptr [ %516, %513 ], [ %498, %507 ]
  %520 = and i1 %75, %518
  %521 = and i1 %508, %520
  br i1 %521, label %522, label %536

522:                                              ; preds = %517
  %523 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 46), align 16, !tbaa !6
  %524 = icmp eq ptr %76, %523
  br i1 %524, label %525, label %529

525:                                              ; preds = %522
  %526 = load i64, ptr %3, align 8
  %527 = and i64 %526, 134283263
  %528 = icmp eq i64 %527, 23
  br i1 %528, label %541, label %529

529:                                              ; preds = %525, %522
  %530 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 47), align 8, !tbaa !6
  %531 = icmp eq ptr %76, %530
  br i1 %531, label %532, label %536

532:                                              ; preds = %529
  %533 = load i64, ptr %5, align 8
  %534 = and i64 %533, 134283263
  %535 = icmp eq i64 %534, 23
  br i1 %535, label %541, label %536

536:                                              ; preds = %517, %532, %529
  br i1 %499, label %537, label %543

537:                                              ; preds = %536
  %538 = load i64, ptr %76, align 8
  %539 = and i64 %538, 65535
  %540 = icmp eq i64 %539, 23
  br i1 %540, label %541, label %543

541:                                              ; preds = %532, %525, %537
  %542 = call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 56, ptr noundef %453, ptr noundef nonnull %76, ptr noundef %509, ptr noundef %519) #20
  br label %563

543:                                              ; preds = %537, %536
  %544 = call ptr @build3_stat(i32 noundef 56, ptr noundef %453, ptr noundef nonnull %76, ptr noundef %509, ptr noundef %519) #20
  br i1 %521, label %545, label %563

545:                                              ; preds = %543
  %546 = load i64, ptr %544, align 8
  %547 = and i64 %546, 65535
  %548 = icmp eq i64 %547, 23
  %549 = load i8, ptr @in_late_binary_op, align 1
  %550 = icmp ne i8 %549, 0
  %551 = select i1 %548, i1 %550, i1 false
  br i1 %551, label %552, label %554

552:                                              ; preds = %545
  %553 = call ptr @copy_node_stat(ptr noundef nonnull %544) #20
  br label %558

554:                                              ; preds = %545
  %555 = getelementptr inbounds %struct.tree_common, ptr %544, i64 0, i32 2
  %556 = load ptr, ptr %555, align 8, !tbaa !17
  %557 = call ptr @build2_stat(i32 noundef 189, ptr noundef %556, ptr noundef null, ptr noundef nonnull %544) #20
  br label %558

558:                                              ; preds = %552, %554
  %559 = phi ptr [ %557, %554 ], [ %553, %552 ]
  %560 = phi i64 [ 8589934592, %554 ], [ 134217728, %552 ]
  %561 = load i64, ptr %559, align 8
  %562 = or i64 %561, %560
  store i64 %562, ptr %559, align 8
  br label %563

563:                                              ; preds = %543, %558, %541
  %564 = phi ptr [ %542, %541 ], [ %559, %558 ], [ %544, %543 ]
  %565 = icmp eq ptr %171, null
  br i1 %565, label %568, label %566

566:                                              ; preds = %563
  %567 = call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %171, ptr noundef %564) #20
  br label %568

568:                                              ; preds = %566, %563
  %569 = phi ptr [ %567, %566 ], [ %564, %563 ]
  call void @protected_set_expr_location(ptr noundef %569, i32 noundef %0) #20
  br label %570

570:                                              ; preds = %398, %568, %427, %118, %112
  %571 = phi ptr [ %113, %112 ], [ %119, %118 ], [ %569, %568 ], [ %428, %427 ], [ %399, %398 ]
  ret ptr %571
}

declare zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @c_wrap_maybe_const(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @common_pointer_type(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = icmp eq ptr %0, %1
  br i1 %3, label %93, label %4

4:                                                ; preds = %2
  %5 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %6 = icmp eq ptr %5, %0
  br i1 %6, label %93, label %7

7:                                                ; preds = %4
  %8 = icmp eq ptr %5, %1
  br i1 %8, label %93, label %9

9:                                                ; preds = %7
  %10 = load i64, ptr %0, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 10
  br i1 %12, label %13, label %17

13:                                               ; preds = %9
  %14 = load i64, ptr %1, align 8
  %15 = and i64 %14, 65535
  %16 = icmp eq i64 %15, 10
  br i1 %16, label %18, label %17

17:                                               ; preds = %13, %9
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 644, ptr noundef nonnull @.str.8) #20
  br label %18

18:                                               ; preds = %13, %17
  %19 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 12), align 8, !tbaa !24
  %20 = tail call ptr %19(ptr noundef nonnull %0, ptr noundef %1) #20
  %21 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load i64, ptr %22, align 8
  %26 = and i64 %25, 65535
  %27 = icmp eq i64 %26, 15
  br i1 %27, label %31, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %struct.tree_type, ptr %22, i64 0, i32 16
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  br label %31

31:                                               ; preds = %28, %18
  %32 = phi ptr [ %30, %28 ], [ %22, %18 ]
  %33 = load i64, ptr %24, align 8
  %34 = and i64 %33, 65535
  %35 = icmp eq i64 %34, 15
  br i1 %35, label %39, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 16
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  br label %39

39:                                               ; preds = %36, %31
  %40 = phi ptr [ %38, %36 ], [ %24, %31 ]
  %41 = tail call ptr @composite_type(ptr noundef %32, ptr noundef %40)
  %42 = load i64, ptr %22, align 8
  %43 = trunc i64 %42 to i32
  %44 = lshr i32 %43, 20
  %45 = and i32 %44, 1
  %46 = lshr i32 %43, 18
  %47 = and i32 %46, 2
  %48 = or i32 %45, %47
  %49 = getelementptr inbounds %struct.tree_type, ptr %22, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = lshr i32 %50, 11
  %52 = and i32 %51, 4
  %53 = or i32 %48, %52
  %54 = load i64, ptr %24, align 8
  %55 = trunc i64 %54 to i32
  %56 = lshr i32 %55, 20
  %57 = and i32 %56, 1
  %58 = lshr i32 %55, 18
  %59 = and i32 %58, 2
  %60 = or i32 %57, %59
  %61 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 6
  %62 = load i32, ptr %61, align 4
  %63 = lshr i32 %62, 11
  %64 = and i32 %63, 4
  %65 = or i32 %60, %64
  %66 = and i64 %42, 65535
  %67 = icmp eq i64 %66, 20
  %68 = and i32 %65, %53
  %69 = or i32 %65, %53
  %70 = select i1 %67, i32 %68, i32 %69
  %71 = lshr i64 %42, 56
  %72 = trunc i64 %71 to i8
  %73 = lshr i64 %54, 56
  %74 = trunc i64 %73 to i8
  %75 = icmp eq i8 %72, %74
  br i1 %75, label %85, label %76

76:                                               ; preds = %39
  %77 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %78 = tail call zeroext i8 %77(i8 noundef zeroext %72, i8 noundef zeroext %74) #20
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %76
  %81 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %82 = tail call zeroext i8 %81(i8 noundef zeroext %74, i8 noundef zeroext %72) #20
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %80
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 677, ptr noundef nonnull @.str.8) #20
  br label %85

85:                                               ; preds = %80, %76, %39, %84
  %86 = phi i8 [ undef, %84 ], [ %72, %39 ], [ %74, %76 ], [ %72, %80 ]
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %87, 8
  %89 = or i32 %88, %70
  %90 = tail call ptr @c_build_qualified_type(ptr noundef %41, i32 noundef %89)
  %91 = tail call ptr @build_pointer_type(ptr noundef %90) #20
  %92 = tail call ptr @build_type_attribute_variant(ptr noundef %91, ptr noundef %20) #20
  br label %93

93:                                               ; preds = %7, %4, %2, %85
  %94 = phi ptr [ %92, %85 ], [ %0, %2 ], [ %1, %4 ], [ %0, %7 ]
  ret ptr %94
}

declare ptr @fold_build3_stat_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_compound_expr(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 65535
  %9 = add nsw i32 %8, -6
  %10 = icmp ult i32 %9, 3
  br i1 %10, label %11, label %23

11:                                               ; preds = %3
  %12 = load i64, ptr %1, align 8
  %13 = trunc i64 %12 to i16
  switch i16 %13, label %23 [
    i16 23, label %17
    i16 189, label %14
  ]

14:                                               ; preds = %11
  %15 = and i64 %12, 8589934592
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %11, %14
  %18 = and i64 %12, 65535
  %19 = icmp eq i64 %18, 189
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  br label %23

23:                                               ; preds = %11, %3, %20, %17, %14
  %24 = phi i1 [ false, %14 ], [ true, %17 ], [ true, %20 ], [ false, %3 ], [ false, %11 ]
  %25 = phi ptr [ %1, %14 ], [ %1, %17 ], [ %22, %20 ], [ %1, %3 ], [ %1, %11 ]
  %26 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = load i64, ptr %27, align 8
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 65535
  %31 = add nsw i32 %30, -6
  %32 = icmp ult i32 %31, 3
  br i1 %32, label %33, label %45

33:                                               ; preds = %23
  %34 = load i64, ptr %2, align 8
  %35 = trunc i64 %34 to i16
  switch i16 %35, label %45 [
    i16 23, label %39
    i16 189, label %36
  ]

36:                                               ; preds = %33
  %37 = and i64 %34, 8589934592
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %33, %36
  %40 = and i64 %34, 65535
  %41 = icmp eq i64 %40, 189
  br i1 %41, label %42, label %45

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  br label %45

45:                                               ; preds = %33, %23, %42, %39, %36
  %46 = phi i1 [ false, %36 ], [ true, %39 ], [ true, %42 ], [ false, %23 ], [ false, %33 ]
  %47 = phi ptr [ %2, %36 ], [ %2, %39 ], [ %44, %42 ], [ %2, %23 ], [ %2, %33 ]
  %48 = load i64, ptr %25, align 8
  %49 = and i64 %48, 65535
  %50 = icmp eq i64 %49, 190
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 0, i32 3
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  br label %54

54:                                               ; preds = %51, %45
  %55 = phi ptr [ %53, %51 ], [ %25, %45 ]
  %56 = load i64, ptr %47, align 8
  %57 = and i64 %56, 65535
  %58 = icmp eq i64 %57, 190
  br i1 %58, label %59, label %64

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.tree_common, ptr %47, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = getelementptr inbounds %struct.tree_exp, ptr %47, i64 0, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !17
  br label %64

64:                                               ; preds = %59, %54
  %65 = phi ptr [ %63, %59 ], [ %47, %54 ]
  %66 = phi ptr [ %61, %59 ], [ null, %54 ]
  %67 = load i64, ptr %55, align 8
  %68 = and i64 %67, 65536
  %69 = icmp eq i64 %68, 0
  %70 = load i32, ptr @warn_unused_value, align 4, !tbaa !21
  %71 = icmp eq i32 %70, 0
  br i1 %69, label %72, label %91

72:                                               ; preds = %64
  br i1 %71, label %94, label %73

73:                                               ; preds = %72
  %74 = getelementptr inbounds %struct.tree_common, ptr %55, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8, !tbaa !17
  %76 = load i64, ptr %75, align 8
  %77 = and i64 %76, 65535
  %78 = icmp eq i64 %77, 19
  br i1 %78, label %79, label %89

79:                                               ; preds = %73
  %80 = trunc i64 %67 to i16
  switch i16 %80, label %81 [
    i16 116, label %94
    i16 113, label %94
  ]

81:                                               ; preds = %79
  %82 = and i64 %67, 65535
  %83 = icmp eq i64 %82, 52
  br i1 %83, label %84, label %89

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.tree_exp, ptr %55, i64 1
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = load i64, ptr %86, align 8
  %88 = trunc i64 %87 to i16
  switch i16 %88, label %89 [
    i16 116, label %94
    i16 113, label %94
  ]

89:                                               ; preds = %73, %84, %81
  %90 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 229, ptr noundef nonnull @.str.148) #20
  br label %94

91:                                               ; preds = %64
  br i1 %71, label %94, label %92

92:                                               ; preds = %91
  %93 = tail call i32 @warn_if_unused_value(ptr noundef nonnull %55, i32 noundef %0) #20
  br label %94

94:                                               ; preds = %84, %84, %79, %79, %91, %92, %72, %89
  %95 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %96 = icmp eq ptr %65, %95
  br i1 %96, label %130, label %97

97:                                               ; preds = %94
  %98 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %99 = load ptr, ptr %98, align 8, !tbaa !17
  %100 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %99, ptr noundef nonnull %55, ptr noundef %65) #20
  %101 = load i32, ptr @flag_isoc99, align 4, !tbaa !21
  %102 = icmp ne i32 %101, 0
  %103 = and i1 %46, %102
  %104 = and i1 %24, %103
  br i1 %104, label %105, label %123

105:                                              ; preds = %97
  %106 = load i64, ptr %100, align 8
  %107 = and i64 %106, 65535
  %108 = icmp eq i64 %107, 23
  %109 = load i8, ptr @in_late_binary_op, align 1
  %110 = icmp ne i8 %109, 0
  %111 = select i1 %108, i1 %110, i1 false
  br i1 %111, label %112, label %114

112:                                              ; preds = %105
  %113 = tail call ptr @copy_node_stat(ptr noundef nonnull %100) #20
  br label %118

114:                                              ; preds = %105
  %115 = getelementptr inbounds %struct.tree_common, ptr %100, i64 0, i32 2
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %116, ptr noundef null, ptr noundef nonnull %100) #20
  br label %118

118:                                              ; preds = %112, %114
  %119 = phi ptr [ %117, %114 ], [ %113, %112 ]
  %120 = phi i64 [ 8589934592, %114 ], [ 134217728, %112 ]
  %121 = load i64, ptr %119, align 8
  %122 = or i64 %121, %120
  store i64 %122, ptr %119, align 8
  br label %123

123:                                              ; preds = %118, %97
  %124 = phi ptr [ %119, %118 ], [ %100, %97 ]
  %125 = icmp eq ptr %66, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  %127 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %66, ptr noundef %124) #20
  br label %128

128:                                              ; preds = %126, %123
  %129 = phi ptr [ %127, %126 ], [ %124, %123 ]
  tail call void @protected_set_expr_location(ptr noundef %129, i32 noundef %0) #20
  br label %130

130:                                              ; preds = %94, %128
  %131 = phi ptr [ %129, %128 ], [ %65, %94 ]
  ret ptr %131
}

declare i32 @warn_if_unused_value(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_c_cast(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = alloca i8, align 1
  %5 = load i64, ptr %2, align 8
  %6 = and i64 %5, 65535
  %7 = icmp eq i64 %6, 190
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  br label %11

11:                                               ; preds = %8, %3
  %12 = phi ptr [ %10, %8 ], [ %2, %3 ]
  %13 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %14 = icmp eq ptr %13, %1
  %15 = icmp eq ptr %12, %13
  %16 = select i1 %14, i1 true, i1 %15
  br i1 %16, label %368, label %17

17:                                               ; preds = %11
  %18 = tail call ptr @objc_is_object_ptr(ptr noundef %1) #20
  %19 = icmp eq ptr %18, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = tail call ptr @objc_is_object_ptr(ptr noundef %22) #20
  %24 = icmp eq ptr %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %1, ptr noundef nonnull %12) #20
  br label %368

27:                                               ; preds = %20, %17
  %28 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = load i64, ptr %29, align 8
  %31 = trunc i64 %30 to i16
  switch i16 %31, label %36 [
    i16 15, label %32
    i16 20, label %34
    i16 19, label %51
  ]

32:                                               ; preds = %27
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.149) #20
  %33 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %368

34:                                               ; preds = %27
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.150) #20
  %35 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %368

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %40 = icmp eq ptr %39, %12
  %41 = icmp eq ptr %38, %39
  %42 = select i1 %40, i1 true, i1 %41
  br i1 %42, label %368, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = icmp eq ptr %45, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %43
  tail call void @c_incomplete_type_error(ptr noundef nonnull %12, ptr noundef nonnull %38)
  %48 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %368

49:                                               ; preds = %43
  %50 = icmp eq ptr %12, %39
  br i1 %50, label %368, label %51

51:                                               ; preds = %27, %49
  %52 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 16
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = icmp eq ptr %29, %55
  %57 = load i64, ptr %29, align 8
  br i1 %56, label %58, label %63

58:                                               ; preds = %51
  %59 = and i64 %57, 65534
  %60 = icmp eq i64 %59, 16
  br i1 %60, label %61, label %330

61:                                               ; preds = %58
  %62 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.151) #20
  br label %330

63:                                               ; preds = %51
  %64 = trunc i64 %57 to i32
  %65 = and i32 %64, 65535
  %66 = icmp eq i32 %65, 17
  br i1 %66, label %67, label %115

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !17
  %70 = icmp eq ptr %69, null
  br i1 %70, label %113, label %71

71:                                               ; preds = %67, %93
  %72 = phi ptr [ %95, %93 ], [ %69, %67 ]
  %73 = getelementptr inbounds %struct.tree_common, ptr %72, i64 0, i32 2
  %74 = load ptr, ptr %73, align 8, !tbaa !17
  %75 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %76 = icmp eq ptr %74, %75
  br i1 %76, label %93, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.tree_type, ptr %74, i64 0, i32 16
  %79 = load ptr, ptr %78, align 8, !tbaa !17
  %80 = load ptr, ptr %52, align 8, !tbaa !17
  %81 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 16
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  %83 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %84 = tail call fastcc i32 @comptypes_internal(ptr noundef %79, ptr noundef %82, ptr noundef null)
  %85 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %86 = icmp eq ptr %85, %83
  br i1 %86, label %91, label %87

87:                                               ; preds = %77, %87
  %88 = phi ptr [ %89, %87 ], [ %85, %77 ]
  %89 = load ptr, ptr %88, align 8, !tbaa !37
  tail call void @free(ptr noundef %88)
  %90 = icmp eq ptr %89, %83
  br i1 %90, label %91, label %87, !llvm.loop !39

91:                                               ; preds = %87, %77
  store ptr %83, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %92 = icmp eq i32 %84, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %71, %91
  %94 = getelementptr inbounds %struct.tree_common, ptr %72, i64 0, i32 1
  %95 = load ptr, ptr %94, align 8, !tbaa !17
  %96 = icmp eq ptr %95, null
  br i1 %96, label %113, label %71, !llvm.loop !111

97:                                               ; preds = %91
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %4) #20
  store i8 1, ptr %4, align 1, !tbaa !17
  %98 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.152) #20
  %99 = call ptr @c_fully_fold(ptr noundef %12, i8 noundef zeroext 0, ptr noundef nonnull %4) #20
  %100 = call ptr @build_constructor_single(ptr noundef nonnull %29, ptr noundef nonnull %72, ptr noundef %99) #20
  %101 = load i8, ptr %4, align 1, !tbaa !17
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %97
  %104 = call ptr @c_wrap_maybe_const(ptr noundef %100, i8 noundef zeroext 1) #20
  br label %105

105:                                              ; preds = %103, %97
  %106 = phi ptr [ %100, %97 ], [ %104, %103 ]
  %107 = call fastcc ptr @digest_init(i32 noundef %0, ptr noundef nonnull %29, ptr noundef %106, ptr noundef null, i8 noundef zeroext 0, i8 noundef zeroext 1, i32 noundef 0)
  %108 = load i64, ptr %12, align 8
  %109 = and i64 %108, 131072
  %110 = load i64, ptr %107, align 8
  %111 = and i64 %110, -131073
  %112 = or i64 %111, %109
  store i64 %112, ptr %107, align 8
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %4) #20
  br label %368

113:                                              ; preds = %93, %67
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.153) #20
  %114 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %368

115:                                              ; preds = %63
  %116 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %117 = icmp eq ptr %29, %116
  br i1 %117, label %327, label %118

118:                                              ; preds = %115
  %119 = load i32, ptr @warn_cast_qual, align 4, !tbaa !21
  %120 = icmp ne i32 %119, 0
  %121 = icmp eq i32 %65, 10
  %122 = and i1 %121, %120
  br i1 %122, label %123, label %129

123:                                              ; preds = %118
  %124 = load i64, ptr %53, align 8
  %125 = and i64 %124, 65535
  %126 = icmp eq i64 %125, 10
  br i1 %126, label %127, label %129

127:                                              ; preds = %123
  tail call fastcc void @handle_warn_cast_qual(ptr noundef nonnull %29, ptr noundef nonnull %53)
  %128 = load i64, ptr %29, align 8
  br label %129

129:                                              ; preds = %127, %123, %118
  %130 = phi i64 [ %128, %127 ], [ %57, %123 ], [ %57, %118 ]
  %131 = and i64 %130, 65535
  %132 = icmp eq i64 %131, 10
  br i1 %132, label %133, label %174

133:                                              ; preds = %129
  %134 = load i64, ptr %53, align 8
  %135 = and i64 %134, 65535
  %136 = icmp eq i64 %135, 10
  br i1 %136, label %137, label %174

137:                                              ; preds = %133
  %138 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %12), !range !70
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %140, label %174

140:                                              ; preds = %137
  %141 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %142 = load ptr, ptr %141, align 8, !tbaa !17
  %143 = load i64, ptr %142, align 8
  %144 = lshr i64 %143, 56
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !17
  %148 = load i64, ptr %147, align 8
  %149 = lshr i64 %148, 56
  %150 = trunc i64 %149 to i8
  %151 = icmp eq i8 %145, %150
  br i1 %151, label %174, label %152

152:                                              ; preds = %140
  %153 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %154 = tail call zeroext i8 %153(i8 noundef zeroext %145, i8 noundef zeroext %150) #20
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %156, label %174

156:                                              ; preds = %152
  %157 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %158 = tail call zeroext i8 %157(i8 noundef zeroext %150, i8 noundef zeroext %145) #20
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %174

160:                                              ; preds = %156
  %161 = icmp ult i64 %148, 72057594037927936
  br i1 %161, label %162, label %165

162:                                              ; preds = %160
  %163 = tail call ptr @c_addr_space_name(i8 noundef zeroext %145) #20
  %164 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.154, ptr noundef %163) #20
  br label %174

165:                                              ; preds = %160
  %166 = icmp ult i64 %143, 72057594037927936
  br i1 %166, label %167, label %170

167:                                              ; preds = %165
  %168 = tail call ptr @c_addr_space_name(i8 noundef zeroext %150) #20
  %169 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.155, ptr noundef %168) #20
  br label %174

170:                                              ; preds = %165
  %171 = tail call ptr @c_addr_space_name(i8 noundef zeroext %145) #20
  %172 = tail call ptr @c_addr_space_name(i8 noundef zeroext %150) #20
  %173 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.156, ptr noundef %171, ptr noundef %172) #20
  br label %174

174:                                              ; preds = %167, %170, %162, %140, %152, %156, %137, %133, %129
  %175 = load i64, ptr %29, align 8
  %176 = and i64 %175, 65535
  %177 = icmp eq i64 %176, 8
  br i1 %177, label %178, label %193

178:                                              ; preds = %174
  %179 = load i64, ptr %53, align 8
  %180 = and i64 %179, 65535
  %181 = icmp eq i64 %180, 10
  br i1 %181, label %182, label %193

182:                                              ; preds = %178
  %183 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 6
  %184 = load i32, ptr %183, align 4
  %185 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 6
  %186 = load i32, ptr %185, align 4
  %187 = xor i32 %186, %184
  %188 = and i32 %187, 1023
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %193, label %190

190:                                              ; preds = %182
  %191 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 164, ptr noundef nonnull @.str.157) #20
  %192 = load i64, ptr %29, align 8
  br label %193

193:                                              ; preds = %190, %182, %178, %174
  %194 = phi i64 [ %192, %190 ], [ %175, %182 ], [ %175, %178 ], [ %175, %174 ]
  %195 = load i64, ptr %12, align 8
  %196 = and i64 %195, 65535
  %197 = icmp eq i64 %196, 59
  br i1 %197, label %198, label %206

198:                                              ; preds = %193
  %199 = load i64, ptr %53, align 8
  %200 = xor i64 %199, %194
  %201 = and i64 %200, 65535
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %206, label %203

203:                                              ; preds = %198
  %204 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 46, ptr noundef nonnull @.str.158, ptr noundef nonnull %53, ptr noundef nonnull %29) #20
  %205 = load i64, ptr %29, align 8
  br label %206

206:                                              ; preds = %203, %198, %193
  %207 = phi i64 [ %205, %203 ], [ %194, %198 ], [ %194, %193 ]
  %208 = and i64 %207, 65535
  %209 = icmp eq i64 %208, 10
  br i1 %209, label %210, label %228

210:                                              ; preds = %206
  %211 = load i64, ptr %53, align 8
  %212 = and i64 %211, 65535
  %213 = icmp eq i64 %212, 8
  br i1 %213, label %214, label %228

214:                                              ; preds = %210
  %215 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 6
  %216 = load i32, ptr %215, align 4
  %217 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 6
  %218 = load i32, ptr %217, align 4
  %219 = xor i32 %218, %216
  %220 = and i32 %219, 1023
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %228, label %222

222:                                              ; preds = %214
  %223 = load i64, ptr %12, align 8
  %224 = and i64 %223, 131072
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %228

226:                                              ; preds = %222
  %227 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 111, ptr noundef nonnull @.str.159) #20
  br label %228

228:                                              ; preds = %226, %222, %214, %210, %206
  %229 = load i32, ptr @warn_strict_aliasing, align 4, !tbaa !21
  %230 = icmp slt i32 %229, 3
  br i1 %230, label %231, label %233

231:                                              ; preds = %228
  %232 = tail call zeroext i8 @strict_aliasing_warning(ptr noundef nonnull %53, ptr noundef nonnull %29, ptr noundef nonnull %12) #20
  br label %233

233:                                              ; preds = %231, %228
  %234 = load i32, ptr @pedantic, align 4, !tbaa !21
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %285, label %236

236:                                              ; preds = %233
  %237 = load i64, ptr %29, align 8
  %238 = and i64 %237, 65535
  %239 = icmp eq i64 %238, 10
  br i1 %239, label %240, label %260

240:                                              ; preds = %236
  %241 = load i64, ptr %53, align 8
  %242 = and i64 %241, 65535
  %243 = icmp eq i64 %242, 10
  br i1 %243, label %244, label %260

244:                                              ; preds = %240
  %245 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %246 = load ptr, ptr %245, align 8, !tbaa !17
  %247 = load i64, ptr %246, align 8
  %248 = and i64 %247, 65535
  %249 = icmp eq i64 %248, 20
  br i1 %249, label %250, label %260

250:                                              ; preds = %244
  %251 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %252 = load ptr, ptr %251, align 8, !tbaa !17
  %253 = load i64, ptr %252, align 8
  %254 = and i64 %253, 65535
  %255 = icmp eq i64 %254, 20
  br i1 %255, label %260, label %256

256:                                              ; preds = %250
  %257 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.160) #20
  %258 = load i32, ptr @pedantic, align 4, !tbaa !21
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %285, label %260

260:                                              ; preds = %236, %240, %244, %250, %256
  %261 = load i64, ptr %29, align 8
  %262 = and i64 %261, 65535
  %263 = icmp eq i64 %262, 10
  br i1 %263, label %264, label %285

264:                                              ; preds = %260
  %265 = load i64, ptr %53, align 8
  %266 = and i64 %265, 65535
  %267 = icmp eq i64 %266, 10
  br i1 %267, label %268, label %285

268:                                              ; preds = %264
  %269 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %270 = load ptr, ptr %269, align 8, !tbaa !17
  %271 = load i64, ptr %270, align 8
  %272 = and i64 %271, 65535
  %273 = icmp eq i64 %272, 20
  br i1 %273, label %274, label %285

274:                                              ; preds = %268
  %275 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %276 = load ptr, ptr %275, align 8, !tbaa !17
  %277 = load i64, ptr %276, align 8
  %278 = and i64 %277, 65535
  %279 = icmp eq i64 %278, 20
  br i1 %279, label %285, label %280

280:                                              ; preds = %274
  %281 = tail call fastcc zeroext i8 @null_pointer_constant_p(ptr noundef nonnull %12), !range !70
  %282 = icmp eq i8 %281, 0
  br i1 %282, label %283, label %285

283:                                              ; preds = %280
  %284 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.161) #20
  br label %285

285:                                              ; preds = %233, %283, %280, %274, %268, %264, %260, %256
  %286 = tail call ptr @convert(ptr noundef nonnull %29, ptr noundef nonnull %12) #20
  %287 = load i64, ptr %286, align 8
  %288 = and i64 %287, 65535
  %289 = icmp eq i64 %288, 23
  br i1 %289, label %290, label %330

290:                                              ; preds = %285
  %291 = load i64, ptr %53, align 8
  %292 = trunc i64 %291 to i16
  switch i16 %292, label %299 [
    i16 9, label %330
    i16 13, label %293
    i16 14, label %293
  ]

293:                                              ; preds = %290, %290
  %294 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %295 = load ptr, ptr %294, align 8, !tbaa !17
  %296 = load i64, ptr %295, align 8
  %297 = and i64 %296, 65535
  %298 = icmp eq i64 %297, 9
  br i1 %298, label %330, label %299

299:                                              ; preds = %290, %293
  %300 = load i64, ptr %12, align 8
  %301 = and i64 %300, 65535
  %302 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %301
  %303 = load i32, ptr %302, align 4, !tbaa !17
  %304 = icmp ne i32 %303, 1
  %305 = and i64 %300, 134217728
  %306 = icmp eq i64 %305, 0
  %307 = or i1 %304, %306
  %308 = and i64 %287, 134217728
  %309 = icmp eq i64 %308, 0
  br i1 %307, label %318, label %310

310:                                              ; preds = %299
  br i1 %309, label %311, label %330

311:                                              ; preds = %310
  %312 = tail call ptr @copy_node_stat(ptr noundef nonnull %286) #20
  %313 = load i64, ptr %12, align 8
  %314 = and i64 %313, 134217728
  %315 = load i64, ptr %312, align 8
  %316 = and i64 %315, -134217729
  %317 = or i64 %316, %314
  store i64 %317, ptr %312, align 8
  br label %330

318:                                              ; preds = %299
  br i1 %309, label %330, label %319

319:                                              ; preds = %318
  %320 = getelementptr inbounds %struct.tree_common, ptr %286, i64 0, i32 2
  %321 = load ptr, ptr %320, align 8, !tbaa !17
  %322 = getelementptr inbounds %struct.tree_int_cst, ptr %286, i64 0, i32 1
  %323 = load i64, ptr %322, align 8, !tbaa !17
  %324 = getelementptr inbounds %struct.tree_int_cst, ptr %286, i64 0, i32 1, i32 1
  %325 = load i64, ptr %324, align 8, !tbaa !17
  %326 = tail call ptr @build_int_cst_wide(ptr noundef %321, i64 noundef %323, i64 noundef %325) #20
  br label %330

327:                                              ; preds = %115
  %328 = tail call ptr @build1_stat(i32 noundef 113, ptr noundef nonnull %29, ptr noundef nonnull %12) #20
  %329 = getelementptr inbounds %struct.tree_exp, ptr %328, i64 0, i32 1
  store i32 %0, ptr %329, align 8, !tbaa !17
  br label %368

330:                                              ; preds = %290, %311, %310, %319, %318, %293, %285, %58, %61
  %331 = phi ptr [ %12, %61 ], [ %12, %58 ], [ %286, %285 ], [ %286, %318 ], [ %326, %319 ], [ %312, %311 ], [ %286, %310 ], [ %286, %293 ], [ %286, %290 ]
  %332 = icmp eq ptr %331, %12
  br i1 %332, label %333, label %335

333:                                              ; preds = %330
  %334 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef nonnull %12) #20
  br label %335

335:                                              ; preds = %333, %330
  %336 = phi ptr [ %334, %333 ], [ %331, %330 ]
  %337 = load i64, ptr %336, align 8
  %338 = trunc i64 %337 to i16
  switch i16 %338, label %358 [
    i16 24, label %353
    i16 26, label %353
    i16 23, label %339
  ]

339:                                              ; preds = %335
  %340 = load i64, ptr %12, align 8
  %341 = and i64 %340, 65535
  %342 = icmp eq i64 %341, 23
  br i1 %342, label %343, label %351

343:                                              ; preds = %339
  %344 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %345 = load ptr, ptr %344, align 8, !tbaa !17
  %346 = load i64, ptr %345, align 8
  %347 = trunc i64 %346 to i32
  %348 = and i32 %347, 65535
  %349 = add nsw i32 %348, -6
  %350 = icmp ult i32 %349, 3
  br i1 %350, label %358, label %351

351:                                              ; preds = %343, %339
  %352 = trunc i64 %340 to i16
  switch i16 %352, label %353 [
    i16 24, label %358
    i16 26, label %358
  ]

353:                                              ; preds = %335, %335, %351
  %354 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef nonnull %29, ptr noundef nonnull %336) #20
  %355 = icmp eq ptr %354, null
  br i1 %355, label %368, label %356

356:                                              ; preds = %353
  %357 = load i64, ptr %354, align 8
  br label %358

358:                                              ; preds = %356, %343, %335, %351, %351
  %359 = phi i64 [ %357, %356 ], [ %337, %351 ], [ %337, %351 ], [ %337, %335 ], [ %337, %343 ]
  %360 = phi ptr [ %354, %356 ], [ %336, %351 ], [ %336, %351 ], [ %336, %335 ], [ %336, %343 ]
  %361 = and i64 %359, 65535
  %362 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %361
  %363 = load i32, ptr %362, align 4, !tbaa !17
  %364 = add i32 %363, -4
  %365 = icmp ult i32 %364, 7
  br i1 %365, label %366, label %368

366:                                              ; preds = %358
  %367 = getelementptr inbounds %struct.tree_exp, ptr %360, i64 0, i32 1
  store i32 %0, ptr %367, align 8, !tbaa !17
  br label %368

368:                                              ; preds = %36, %47, %327, %11, %353, %358, %366, %105, %113, %49, %34, %32, %25
  %369 = phi ptr [ %26, %25 ], [ %33, %32 ], [ %35, %34 ], [ %328, %327 ], [ %39, %49 ], [ %107, %105 ], [ %114, %113 ], [ %360, %366 ], [ %360, %358 ], [ null, %353 ], [ %13, %11 ], [ %39, %36 ], [ %48, %47 ]
  ret ptr %369
}

declare ptr @objc_is_object_ptr(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @digest_init(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i8 noundef zeroext %4, i8 noundef zeroext %5, i32 noundef %6) unnamed_addr #9 {
  %8 = alloca i8, align 1
  %9 = load i64, ptr %1, align 8
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 65535
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #20
  store i8 1, ptr %8, align 1, !tbaa !17
  %12 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %13 = icmp eq ptr %12, %1
  %14 = icmp eq ptr %2, null
  %15 = or i1 %14, %13
  %16 = icmp eq ptr %12, %2
  %17 = or i1 %16, %15
  br i1 %17, label %456, label %18

18:                                               ; preds = %7
  %19 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = icmp eq ptr %20, %12
  br i1 %21, label %456, label %22

22:                                               ; preds = %18, %30
  %23 = phi ptr [ %28, %30 ], [ %2, %18 ]
  %24 = load i64, ptr %23, align 8
  %25 = trunc i64 %24 to i16
  switch i16 %25, label %34 [
    i16 116, label %26
    i16 113, label %26
    i16 117, label %26
  ]

26:                                               ; preds = %22, %22, %22
  %27 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = icmp eq ptr %28, %12
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !17
  %33 = icmp eq ptr %20, %32
  br i1 %33, label %22, label %34, !llvm.loop !112

34:                                               ; preds = %22, %26, %30
  %35 = and i64 %24, 65535
  %36 = icmp eq i64 %35, 190
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  br label %42

42:                                               ; preds = %37, %34
  %43 = phi ptr [ %39, %37 ], [ null, %34 ]
  %44 = phi ptr [ %41, %37 ], [ %23, %34 ]
  %45 = trunc i32 %6 to i8
  %46 = call ptr @c_fully_fold(ptr noundef %44, i8 noundef zeroext %45, ptr noundef nonnull %8) #20
  %47 = call ptr @decl_constant_value_for_optimization(ptr noundef %46) #20
  %48 = icmp eq i32 %11, 15
  %49 = icmp ne ptr %47, null
  %50 = select i1 %48, i1 %49, i1 false
  br i1 %50, label %51, label %207

51:                                               ; preds = %42
  %52 = load i64, ptr %47, align 8
  %53 = and i64 %52, 65535
  %54 = icmp eq i64 %53, 28
  br i1 %54, label %55, label %261

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.tree_type, ptr %57, i64 0, i32 16
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = load ptr, ptr @integer_types, align 16, !tbaa !6
  %61 = icmp eq ptr %59, %60
  %62 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 1), align 8
  %63 = icmp eq ptr %59, %62
  %64 = select i1 %61, i1 true, i1 %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %55
  %66 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 2), align 16, !tbaa !6
  %67 = icmp eq ptr %59, %66
  br label %68

68:                                               ; preds = %65, %55
  %69 = phi i1 [ true, %55 ], [ %67, %65 ]
  %70 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 2), align 16, !tbaa !6
  %71 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %72 = call fastcc i32 @comptypes_internal(ptr noundef %59, ptr noundef %70, ptr noundef null)
  %73 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %74 = icmp eq ptr %73, %71
  br i1 %74, label %79, label %75

75:                                               ; preds = %68, %75
  %76 = phi ptr [ %77, %75 ], [ %73, %68 ]
  %77 = load ptr, ptr %76, align 8, !tbaa !37
  call void @free(ptr noundef %76)
  %78 = icmp eq ptr %77, %71
  br i1 %78, label %79, label %75, !llvm.loop !39

79:                                               ; preds = %75, %68
  store ptr %71, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %80 = icmp ne i32 %72, 0
  %81 = load ptr, ptr @c_global_trees, align 16, !tbaa !6
  %82 = call fastcc i32 @comptypes_internal(ptr noundef %59, ptr noundef %81, ptr noundef null)
  %83 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %84 = icmp eq ptr %83, %71
  br i1 %84, label %89, label %85

85:                                               ; preds = %79, %85
  %86 = phi ptr [ %87, %85 ], [ %83, %79 ]
  %87 = load ptr, ptr %86, align 8, !tbaa !37
  call void @free(ptr noundef %86)
  %88 = icmp eq ptr %87, %71
  br i1 %88, label %89, label %85, !llvm.loop !39

89:                                               ; preds = %85, %79
  store ptr %71, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %90 = icmp ne i32 %82, 0
  %91 = load ptr, ptr getelementptr inbounds ([55 x ptr], ptr @c_global_trees, i64 0, i64 1), align 8, !tbaa !6
  %92 = call fastcc i32 @comptypes_internal(ptr noundef %59, ptr noundef %91, ptr noundef null)
  %93 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %94 = icmp eq ptr %93, %71
  br i1 %94, label %99, label %95

95:                                               ; preds = %89, %95
  %96 = phi ptr [ %97, %95 ], [ %93, %89 ]
  %97 = load ptr, ptr %96, align 8, !tbaa !37
  call void @free(ptr noundef %96)
  %98 = icmp eq ptr %97, %71
  br i1 %98, label %99, label %95, !llvm.loop !39

99:                                               ; preds = %95, %89
  store ptr %71, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %100 = icmp ne i32 %92, 0
  %101 = select i1 %69, i1 true, i1 %80
  %102 = select i1 %101, i1 true, i1 %90
  %103 = select i1 %102, i1 true, i1 %100
  br i1 %103, label %104, label %199

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.tree_common, ptr %47, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = getelementptr inbounds %struct.tree_common, ptr %106, i64 0, i32 2
  %108 = load ptr, ptr %107, align 8, !tbaa !17
  %109 = getelementptr inbounds %struct.tree_type, ptr %108, i64 0, i32 16
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = icmp eq i8 %5, 0
  %112 = load i32, ptr @pedantic, align 4, !tbaa !21
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %125, label %114

114:                                              ; preds = %104
  %115 = load i64, ptr %1, align 8
  %116 = and i64 %115, 65535
  %117 = icmp eq i64 %116, 15
  br i1 %117, label %118, label %125

118:                                              ; preds = %114
  %119 = load i64, ptr %47, align 8
  %120 = and i64 %119, 65535
  %121 = icmp eq i64 %120, 28
  %122 = and i1 %111, %121
  br i1 %122, label %123, label %125

123:                                              ; preds = %118
  %124 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %124, i32 noundef 834, ptr noundef nonnull @.str.183)
  br label %125

125:                                              ; preds = %104, %114, %118, %123
  %126 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 1
  %127 = load ptr, ptr %126, align 8, !tbaa !17
  %128 = icmp eq ptr %127, null
  br i1 %128, label %134, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.tree_type, ptr %127, i64 0, i32 14
  %131 = load ptr, ptr %130, align 8, !tbaa !17
  %132 = icmp eq ptr %131, null
  br i1 %132, label %133, label %134

133:                                              ; preds = %129
  call void @pedwarn_init(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.162)
  br label %134

134:                                              ; preds = %133, %129, %125
  %135 = load ptr, ptr %105, align 8, !tbaa !17
  %136 = getelementptr inbounds %struct.tree_type, ptr %135, i64 0, i32 16
  %137 = load ptr, ptr %136, align 8, !tbaa !17
  %138 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %139 = load ptr, ptr %138, align 8, !tbaa !17
  %140 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %141 = call fastcc i32 @comptypes_internal(ptr noundef %137, ptr noundef %139, ptr noundef null)
  %142 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %143 = icmp eq ptr %142, %140
  br i1 %143, label %148, label %144

144:                                              ; preds = %134, %144
  %145 = phi ptr [ %146, %144 ], [ %142, %134 ]
  %146 = load ptr, ptr %145, align 8, !tbaa !37
  call void @free(ptr noundef %145)
  %147 = icmp eq ptr %146, %140
  br i1 %147, label %148, label %144, !llvm.loop !39

148:                                              ; preds = %144, %134
  store ptr %140, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %149 = icmp eq i32 %141, 0
  br i1 %149, label %150, label %456

150:                                              ; preds = %148
  %151 = load ptr, ptr @integer_types, align 16, !tbaa !6
  %152 = icmp eq ptr %110, %151
  br i1 %69, label %153, label %156

153:                                              ; preds = %150
  br i1 %152, label %164, label %154

154:                                              ; preds = %153
  call void @error_init(ptr noundef nonnull @.str.163)
  %155 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

156:                                              ; preds = %150
  br i1 %152, label %157, label %159

157:                                              ; preds = %156
  call void @error_init(ptr noundef nonnull @.str.164)
  %158 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

159:                                              ; preds = %156
  %160 = call i32 @comptypes(ptr noundef %59, ptr noundef %110)
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %159
  call void @error_init(ptr noundef nonnull @.str.165)
  %163 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

164:                                              ; preds = %159, %153
  store ptr %1, ptr %105, align 8, !tbaa !17
  %165 = load ptr, ptr %126, align 8, !tbaa !17
  %166 = icmp eq ptr %165, null
  br i1 %166, label %456, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = icmp eq ptr %169, null
  br i1 %170, label %456, label %171

171:                                              ; preds = %167
  %172 = load i64, ptr %169, align 8
  %173 = and i64 %172, 65535
  %174 = icmp eq i64 %173, 23
  br i1 %174, label %175, label %456

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.tree_string, ptr %47, i64 0, i32 1
  %177 = load i32, ptr %176, align 8, !tbaa !17
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 3
  %180 = load ptr, ptr %179, align 8, !tbaa !17
  %181 = getelementptr inbounds %struct.tree_type, ptr %59, i64 0, i32 6
  %182 = load i32, ptr %181, align 4
  %183 = lshr i32 %182, 3
  %184 = and i32 %183, 127
  %185 = zext i32 %184 to i64
  %186 = sub nsw i64 %178, %185
  %187 = call i32 @compare_tree_int(ptr noundef %180, i64 noundef %186) #20
  %188 = icmp slt i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %175
  call void @pedwarn_init(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.166)
  br label %456

190:                                              ; preds = %175
  %191 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %456, label %193

193:                                              ; preds = %190
  %194 = load ptr, ptr %179, align 8, !tbaa !17
  %195 = call i32 @compare_tree_int(ptr noundef %194, i64 noundef %178) #20
  %196 = icmp slt i32 %195, 0
  br i1 %196, label %197, label %456

197:                                              ; preds = %193
  %198 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.167) #20
  br label %456

199:                                              ; preds = %99
  %200 = load i64, ptr %59, align 8
  %201 = trunc i64 %200 to i32
  %202 = and i32 %201, 65535
  %203 = add nsw i32 %202, -6
  %204 = icmp ult i32 %203, 3
  br i1 %204, label %205, label %207

205:                                              ; preds = %199
  call void @error_init(ptr noundef nonnull @.str.168)
  %206 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

207:                                              ; preds = %199, %42
  %208 = icmp eq i32 %11, 14
  br i1 %208, label %209, label %261

209:                                              ; preds = %207
  %210 = getelementptr inbounds %struct.tree_common, ptr %47, i64 0, i32 2
  %211 = load ptr, ptr %210, align 8, !tbaa !17
  %212 = load i64, ptr %211, align 8
  %213 = and i64 %212, 65535
  %214 = icmp eq i64 %213, 14
  br i1 %214, label %215, label %261

215:                                              ; preds = %209
  %216 = call zeroext i8 @vector_types_convertible_p(ptr noundef nonnull %211, ptr noundef nonnull %1, i8 noundef zeroext 1) #20
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %261, label %218

218:                                              ; preds = %215
  %219 = load i64, ptr %47, align 8
  %220 = and i64 %219, 131072
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %261, label %222

222:                                              ; preds = %218
  %223 = and i64 %219, 65535
  %224 = icmp eq i64 %223, 27
  br i1 %224, label %225, label %235

225:                                              ; preds = %222
  %226 = load ptr, ptr %210, align 8, !tbaa !17
  %227 = getelementptr inbounds %struct.tree_type, ptr %226, i64 0, i32 16
  %228 = load ptr, ptr %227, align 8, !tbaa !17
  %229 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %230 = load ptr, ptr %229, align 8, !tbaa !17
  %231 = call i32 @comptypes(ptr noundef %228, ptr noundef %230)
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %456

233:                                              ; preds = %225
  %234 = load i64, ptr %47, align 8
  br label %235

235:                                              ; preds = %233, %222
  %236 = phi i64 [ %234, %233 ], [ %219, %222 ]
  %237 = and i64 %236, 65535
  %238 = icmp eq i64 %237, 51
  br i1 %238, label %239, label %261

239:                                              ; preds = %235
  %240 = getelementptr inbounds %struct.tree_constructor, ptr %47, i64 0, i32 1
  %241 = load ptr, ptr %240, align 8, !tbaa !17
  %242 = icmp eq ptr %241, null
  br i1 %242, label %259, label %243

243:                                              ; preds = %239
  %244 = load i32, ptr %241, align 8, !tbaa !113
  %245 = zext i32 %244 to i64
  br label %246

246:                                              ; preds = %249, %243
  %247 = phi i64 [ %258, %249 ], [ 0, %243 ]
  %248 = icmp eq i64 %247, %245
  br i1 %248, label %259, label %249

249:                                              ; preds = %246
  %250 = and i64 %247, 4294967295
  %251 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %241, i64 0, i32 2, i64 %250, i32 1
  %252 = load ptr, ptr %251, align 8, !tbaa !115
  %253 = load i64, ptr %252, align 8
  %254 = and i64 %253, 65535
  %255 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %254
  %256 = load i32, ptr %255, align 4, !tbaa !17
  %257 = icmp eq i32 %256, 1
  %258 = add nuw nsw i64 %247, 1
  br i1 %257, label %246, label %261, !llvm.loop !117

259:                                              ; preds = %246, %239
  %260 = call ptr @build_vector_from_ctor(ptr noundef nonnull %1, ptr noundef %241) #20
  br label %456

261:                                              ; preds = %249, %51, %235, %218, %215, %209, %207
  %262 = phi i1 [ true, %235 ], [ true, %218 ], [ true, %215 ], [ true, %209 ], [ false, %207 ], [ false, %51 ], [ true, %249 ]
  %263 = load i32, ptr @warn_sequence_point, align 4, !tbaa !21
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %266, label %265

265:                                              ; preds = %261
  call void @verify_sequence_points(ptr noundef %47) #20
  br label %266

266:                                              ; preds = %265, %261
  br i1 %49, label %267, label %396

267:                                              ; preds = %266
  %268 = getelementptr inbounds %struct.tree_common, ptr %47, i64 0, i32 2
  %269 = load ptr, ptr %268, align 8, !tbaa !17
  %270 = icmp eq ptr %269, null
  br i1 %270, label %396, label %271

271:                                              ; preds = %267
  %272 = getelementptr inbounds %struct.tree_type, ptr %269, i64 0, i32 16
  %273 = load ptr, ptr %272, align 8, !tbaa !17
  %274 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %275 = load ptr, ptr %274, align 8, !tbaa !17
  %276 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %277 = call fastcc i32 @comptypes_internal(ptr noundef %273, ptr noundef %275, ptr noundef null)
  %278 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %279 = icmp eq ptr %278, %276
  br i1 %279, label %284, label %280

280:                                              ; preds = %271, %280
  %281 = phi ptr [ %282, %280 ], [ %278, %271 ]
  %282 = load ptr, ptr %281, align 8, !tbaa !37
  call void @free(ptr noundef %281)
  %283 = icmp eq ptr %282, %276
  br i1 %283, label %284, label %280, !llvm.loop !39

284:                                              ; preds = %280, %271
  store ptr %276, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %285 = icmp eq i32 %277, 0
  br i1 %285, label %286, label %310

286:                                              ; preds = %284
  br i1 %48, label %287, label %291

287:                                              ; preds = %286
  %288 = load ptr, ptr %268, align 8, !tbaa !17
  %289 = call i32 @comptypes(ptr noundef %288, ptr noundef nonnull %1)
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %324

291:                                              ; preds = %287, %286
  br i1 %262, label %292, label %296

292:                                              ; preds = %291
  %293 = load ptr, ptr %268, align 8, !tbaa !17
  %294 = call i32 @comptypes(ptr noundef %293, ptr noundef nonnull %1)
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %310

296:                                              ; preds = %292, %291
  %297 = icmp eq i32 %11, 10
  br i1 %297, label %298, label %396

298:                                              ; preds = %296
  %299 = load ptr, ptr %268, align 8, !tbaa !17
  %300 = load i64, ptr %299, align 8
  %301 = and i64 %300, 65535
  %302 = icmp eq i64 %301, 15
  br i1 %302, label %303, label %396

303:                                              ; preds = %298
  %304 = getelementptr inbounds %struct.tree_common, ptr %299, i64 0, i32 2
  %305 = load ptr, ptr %304, align 8, !tbaa !17
  %306 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %307 = load ptr, ptr %306, align 8, !tbaa !17
  %308 = call i32 @comptypes(ptr noundef %305, ptr noundef %307)
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %396, label %312

310:                                              ; preds = %292, %284
  %311 = icmp eq i32 %11, 10
  br i1 %311, label %312, label %324

312:                                              ; preds = %303, %310
  %313 = load ptr, ptr %268, align 8, !tbaa !17
  %314 = load i64, ptr %313, align 8
  %315 = and i64 %314, 65535
  %316 = icmp eq i64 %315, 15
  br i1 %316, label %317, label %324

317:                                              ; preds = %312
  %318 = load i64, ptr %47, align 8
  %319 = trunc i64 %318 to i16
  switch i16 %319, label %322 [
    i16 28, label %320
    i16 119, label %320
  ]

320:                                              ; preds = %317, %317
  %321 = call fastcc ptr @array_to_pointer_conversion(i32 noundef %0, ptr noundef nonnull %47)
  br label %324

322:                                              ; preds = %317
  call void @error_init(ptr noundef nonnull @.str.89)
  %323 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

324:                                              ; preds = %287, %312, %320, %310
  %325 = phi ptr [ %321, %320 ], [ %47, %312 ], [ %47, %310 ], [ %47, %287 ]
  br i1 %262, label %326, label %328

326:                                              ; preds = %324
  %327 = call ptr @convert(ptr noundef nonnull %1, ptr noundef %325) #20
  br label %328

328:                                              ; preds = %326, %324
  %329 = phi ptr [ %327, %326 ], [ %325, %324 ]
  %330 = icmp ne i32 %6, 0
  br i1 %330, label %331, label %347

331:                                              ; preds = %328
  %332 = icmp ne i32 %11, 14
  %333 = load i32, ptr @flag_isoc99, align 4
  %334 = icmp ne i32 %333, 0
  %335 = select i1 %332, i1 %334, i1 false
  br i1 %335, label %347, label %336

336:                                              ; preds = %331
  %337 = load i64, ptr %329, align 8
  %338 = and i64 %337, 65535
  %339 = icmp eq i64 %338, 119
  br i1 %339, label %340, label %347

340:                                              ; preds = %336
  %341 = getelementptr inbounds %struct.tree_exp, ptr %329, i64 0, i32 3
  %342 = load ptr, ptr %341, align 8, !tbaa !17
  %343 = getelementptr inbounds %struct.tree_exp, ptr %342, i64 0, i32 3
  %344 = load ptr, ptr %343, align 8, !tbaa !17
  %345 = getelementptr inbounds %struct.tree_decl_common, ptr %344, i64 0, i32 5
  %346 = load ptr, ptr %345, align 8, !tbaa !17
  br label %347

347:                                              ; preds = %331, %340, %336, %328
  %348 = phi ptr [ %329, %331 ], [ %346, %340 ], [ %329, %336 ], [ %329, %328 ]
  br i1 %48, label %349, label %354

349:                                              ; preds = %347
  %350 = load i64, ptr %348, align 8
  %351 = trunc i64 %350 to i16
  switch i16 %351, label %352 [
    i16 28, label %354
    i16 51, label %354
  ]

352:                                              ; preds = %349
  call void @error_init(ptr noundef nonnull @.str.169)
  %353 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

354:                                              ; preds = %349, %349, %347
  %355 = load i32, ptr @pedantic, align 4
  %356 = icmp ne i32 %355, 0
  %357 = select i1 %330, i1 %356, i1 false
  br i1 %357, label %358, label %375

358:                                              ; preds = %354
  %359 = load i64, ptr %348, align 8
  %360 = and i64 %359, 65535
  %361 = icmp eq i64 %360, 52
  br i1 %361, label %362, label %376

362:                                              ; preds = %358
  %363 = getelementptr inbounds %struct.tree_common, ptr %348, i64 0, i32 2
  %364 = load ptr, ptr %363, align 8, !tbaa !17
  %365 = call fastcc ptr @valid_compound_expr_initializer(ptr noundef nonnull %348, ptr noundef %364)
  %366 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %367 = icmp eq ptr %365, %366
  br i1 %367, label %368, label %369

368:                                              ; preds = %362
  call void @error_init(ptr noundef nonnull @.str.170)
  br label %370

369:                                              ; preds = %362
  call void @pedwarn_init(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.170)
  br label %370

370:                                              ; preds = %369, %368
  %371 = load i32, ptr @flag_pedantic_errors, align 4, !tbaa !21
  %372 = icmp eq i32 %371, 0
  %373 = load ptr, ptr @global_trees, align 16
  %374 = select i1 %372, ptr %365, ptr %373
  br label %387

375:                                              ; preds = %354
  br i1 %330, label %376, label %387

376:                                              ; preds = %358, %375
  %377 = getelementptr inbounds %struct.tree_common, ptr %348, i64 0, i32 2
  %378 = load ptr, ptr %377, align 8, !tbaa !17
  %379 = call ptr @initializer_constant_valid_p(ptr noundef %348, ptr noundef %378) #20
  %380 = icmp eq ptr %379, null
  br i1 %380, label %381, label %383

381:                                              ; preds = %376
  call void @error_init(ptr noundef nonnull @.str.170)
  %382 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %387

383:                                              ; preds = %376
  %384 = load i8, ptr %8, align 1
  %385 = icmp eq i8 %384, 0
  br i1 %385, label %386, label %387

386:                                              ; preds = %383
  call void @pedwarn_init(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.171)
  br label %387

387:                                              ; preds = %375, %370, %381, %386, %383
  %388 = phi ptr [ %348, %383 ], [ %348, %386 ], [ %382, %381 ], [ %374, %370 ], [ %348, %375 ]
  %389 = getelementptr inbounds %struct.tree_common, ptr %388, i64 0, i32 2
  %390 = load ptr, ptr %389, align 8, !tbaa !17
  %391 = load i64, ptr %390, align 8
  %392 = and i64 %391, 65535
  %393 = icmp eq i64 %392, 10
  br i1 %393, label %394, label %456

394:                                              ; preds = %387
  %395 = call fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %388, ptr noundef %3, i32 noundef 2, i8 noundef zeroext %4, ptr noundef null, ptr noundef null, i32 noundef 0)
  br label %456

396:                                              ; preds = %303, %298, %296, %267, %266
  %397 = and i32 %10, 65532
  %398 = icmp eq i32 %397, 8
  %399 = and i32 %10, 65534
  %400 = icmp eq i32 %399, 6
  %401 = or i1 %398, %400
  %402 = add nsw i32 %11, -13
  %403 = icmp ult i32 %402, 2
  %404 = select i1 %401, i1 true, i1 %403
  br i1 %404, label %405, label %444

405:                                              ; preds = %396
  %406 = load ptr, ptr %19, align 8, !tbaa !17
  %407 = load i64, ptr %406, align 8
  %408 = and i64 %407, 65535
  %409 = icmp eq i64 %408, 15
  br i1 %409, label %410, label %415

410:                                              ; preds = %405
  %411 = load i64, ptr %2, align 8
  %412 = trunc i64 %411 to i16
  switch i16 %412, label %415 [
    i16 28, label %413
    i16 119, label %413
  ]

413:                                              ; preds = %410, %410
  %414 = call fastcc ptr @array_to_pointer_conversion(i32 noundef %0, ptr noundef nonnull %2)
  br label %415

415:                                              ; preds = %410, %413, %405
  %416 = phi ptr [ %414, %413 ], [ %47, %405 ], [ %47, %410 ]
  %417 = icmp eq ptr %43, null
  br i1 %417, label %420, label %418

418:                                              ; preds = %415
  %419 = call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %43, ptr noundef %416) #20
  br label %420

420:                                              ; preds = %418, %415
  %421 = phi ptr [ %419, %418 ], [ %416, %415 ]
  %422 = call fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %421, ptr noundef %3, i32 noundef 2, i8 noundef zeroext %4, ptr noundef null, ptr noundef null, i32 noundef 0)
  %423 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %424 = icmp eq ptr %422, %423
  %425 = icmp eq i32 %6, 0
  %426 = or i1 %425, %424
  br i1 %426, label %456, label %427

427:                                              ; preds = %420
  %428 = load i64, ptr %422, align 8
  %429 = and i64 %428, 131072
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %433

431:                                              ; preds = %427
  call void @error_init(ptr noundef nonnull @.str.170)
  %432 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

433:                                              ; preds = %427
  %434 = getelementptr inbounds %struct.tree_common, ptr %422, i64 0, i32 2
  %435 = load ptr, ptr %434, align 8, !tbaa !17
  %436 = call ptr @initializer_constant_valid_p(ptr noundef nonnull %422, ptr noundef %435) #20
  %437 = icmp eq ptr %436, null
  br i1 %437, label %438, label %440

438:                                              ; preds = %433
  call void @error_init(ptr noundef nonnull @.str.172)
  %439 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

440:                                              ; preds = %433
  %441 = load i8, ptr %8, align 1
  %442 = icmp eq i8 %441, 0
  br i1 %442, label %443, label %456

443:                                              ; preds = %440
  call void @pedwarn_init(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.171)
  br label %456

444:                                              ; preds = %396
  %445 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %446 = load ptr, ptr %445, align 8, !tbaa !17
  %447 = icmp eq ptr %446, null
  br i1 %447, label %454, label %448

448:                                              ; preds = %444
  %449 = load i64, ptr %446, align 8
  %450 = and i64 %449, 65535
  %451 = icmp eq i64 %450, 23
  br i1 %451, label %454, label %452

452:                                              ; preds = %448
  call void @error_init(ptr noundef nonnull @.str.173)
  %453 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

454:                                              ; preds = %448, %444
  call void @error_init(ptr noundef nonnull @.str.174)
  %455 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %456

456:                                              ; preds = %154, %157, %162, %148, %189, %197, %193, %190, %171, %167, %164, %205, %259, %7, %18, %420, %438, %443, %440, %431, %387, %394, %225, %454, %452, %352, %322
  %457 = phi ptr [ %353, %352 ], [ %323, %322 ], [ %453, %452 ], [ %455, %454 ], [ %260, %259 ], [ %47, %225 ], [ %395, %394 ], [ %388, %387 ], [ %422, %420 ], [ %422, %440 ], [ %422, %443 ], [ %439, %438 ], [ %432, %431 ], [ %12, %18 ], [ %12, %7 ], [ %47, %164 ], [ %47, %167 ], [ %47, %171 ], [ %47, %190 ], [ %47, %193 ], [ %47, %197 ], [ %47, %189 ], [ %47, %148 ], [ %163, %162 ], [ %158, %157 ], [ %155, %154 ], [ %206, %205 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #20
  ret ptr %457
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @handle_warn_cast_qual(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #9 {
  br label %3

3:                                                ; preds = %18, %2
  %4 = phi ptr [ %0, %2 ], [ %10, %18 ]
  %5 = phi ptr [ %1, %2 ], [ %8, %18 ]
  %6 = phi i32 [ 0, %2 ], [ %43, %18 ]
  %7 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = load i64, ptr %8, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 20
  %14 = load i64, ptr %10, align 8
  %15 = and i64 %14, 65535
  %16 = icmp eq i64 %15, 20
  %17 = select i1 %13, i1 %16, i1 false
  br i1 %17, label %47, label %18

18:                                               ; preds = %3
  %19 = trunc i64 %11 to i32
  %20 = lshr i32 %19, 20
  %21 = and i32 %20, 1
  %22 = lshr i32 %19, 18
  %23 = and i32 %22, 2
  %24 = or i32 %21, %23
  %25 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %26 = load i32, ptr %25, align 4
  %27 = lshr i32 %26, 11
  %28 = and i32 %27, 4
  %29 = or i32 %24, %28
  %30 = trunc i64 %14 to i32
  %31 = lshr i32 %30, 20
  %32 = and i32 %31, 1
  %33 = lshr i32 %30, 18
  %34 = and i32 %33, 2
  %35 = or i32 %32, %34
  %36 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 6
  %37 = load i32, ptr %36, align 4
  %38 = lshr i32 %37, 11
  %39 = and i32 %38, 4
  %40 = or i32 %35, %39
  %41 = xor i32 %40, -1
  %42 = and i32 %29, %41
  %43 = or i32 %42, %6
  %44 = icmp eq i64 %15, 10
  %45 = icmp eq i64 %12, 10
  %46 = and i1 %45, %44
  br i1 %46, label %3, label %75, !llvm.loop !118

47:                                               ; preds = %3
  %48 = trunc i64 %14 to i32
  %49 = lshr i32 %48, 20
  %50 = and i32 %49, 1
  %51 = lshr i32 %48, 18
  %52 = and i32 %51, 2
  %53 = or i32 %50, %52
  %54 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 6
  %55 = load i32, ptr %54, align 4
  %56 = lshr i32 %55, 11
  %57 = and i32 %56, 4
  %58 = or i32 %53, %57
  %59 = trunc i64 %11 to i32
  %60 = lshr i32 %59, 20
  %61 = and i32 %60, 1
  %62 = lshr i32 %59, 18
  %63 = and i32 %62, 2
  %64 = or i32 %61, %63
  %65 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %66 = load i32, ptr %65, align 4
  %67 = lshr i32 %66, 11
  %68 = and i32 %67, 4
  %69 = or i32 %64, %68
  %70 = xor i32 %69, -1
  %71 = and i32 %58, %70
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %47
  %74 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 52, ptr noundef nonnull @.str.175) #20
  br label %75

75:                                               ; preds = %18, %73, %47
  %76 = phi i32 [ %71, %73 ], [ 0, %47 ], [ 0, %18 ]
  %77 = phi i32 [ %6, %73 ], [ %6, %47 ], [ %43, %18 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %75
  %80 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 52, ptr noundef nonnull @.str.176) #20
  br label %81

81:                                               ; preds = %79, %75
  %82 = or i32 %76, %77
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %152

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 16
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 16
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = icmp eq ptr %86, %88
  br i1 %89, label %90, label %152

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = load i64, ptr %92, align 8
  %94 = and i64 %93, 65535
  %95 = icmp eq i64 %94, 10
  br i1 %95, label %96, label %152

96:                                               ; preds = %90
  %97 = lshr i64 %93, 20
  %98 = trunc i64 %97 to i8
  %99 = and i8 %98, 1
  br label %100

100:                                              ; preds = %147, %96
  %101 = phi ptr [ %0, %96 ], [ %105, %147 ]
  %102 = phi ptr [ %1, %96 ], [ %107, %147 ]
  %103 = phi i8 [ %99, %96 ], [ %149, %147 ]
  %104 = getelementptr inbounds %struct.tree_common, ptr %101, i64 0, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  %106 = getelementptr inbounds %struct.tree_common, ptr %102, i64 0, i32 2
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  %108 = load i64, ptr %105, align 8
  %109 = trunc i64 %108 to i32
  %110 = lshr i32 %109, 20
  %111 = and i32 %110, 1
  %112 = lshr i32 %109, 18
  %113 = and i32 %112, 2
  %114 = getelementptr inbounds %struct.tree_type, ptr %105, i64 0, i32 6
  %115 = load i32, ptr %114, align 4
  %116 = lshr i32 %115, 11
  %117 = and i32 %116, 4
  %118 = or i32 %113, %117
  %119 = lshr i64 %108, 48
  %120 = trunc i64 %119 to i32
  %121 = and i32 %120, 65280
  %122 = or i32 %118, %121
  %123 = or i32 %122, %111
  %124 = load i64, ptr %107, align 8
  %125 = trunc i64 %124 to i32
  %126 = lshr i32 %125, 20
  %127 = and i32 %126, 1
  %128 = lshr i32 %125, 18
  %129 = and i32 %128, 2
  %130 = or i32 %127, %129
  %131 = getelementptr inbounds %struct.tree_type, ptr %107, i64 0, i32 6
  %132 = load i32, ptr %131, align 4
  %133 = lshr i32 %132, 11
  %134 = and i32 %133, 4
  %135 = or i32 %130, %134
  %136 = lshr i64 %124, 48
  %137 = trunc i64 %136 to i32
  %138 = and i32 %137, 65280
  %139 = or i32 %135, %138
  %140 = xor i32 %139, -1
  %141 = and i32 %123, %140
  %142 = icmp eq i32 %141, 0
  %143 = icmp ne i8 %103, 0
  %144 = select i1 %142, i1 true, i1 %143
  br i1 %144, label %147, label %145

145:                                              ; preds = %100
  %146 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 52, ptr noundef nonnull @.str.177) #20
  br label %152

147:                                              ; preds = %100
  %148 = trunc i32 %111 to i8
  %149 = select i1 %143, i8 %148, i8 0
  %150 = and i64 %108, 65535
  %151 = icmp eq i64 %150, 10
  br i1 %151, label %100, label %152, !llvm.loop !119

152:                                              ; preds = %147, %145, %90, %84, %81
  ret void
}

declare ptr @c_addr_space_name(i8 noundef zeroext) local_unnamed_addr #3

declare ptr @build_int_cst_wide(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare ptr @decl_constant_value_for_optimization(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @maybe_warn_string_init(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly byval(%struct.c_expr) align 8 %1) local_unnamed_addr #9 {
  %3 = load i32, ptr @pedantic, align 4, !tbaa !21
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %2
  %6 = load i64, ptr %0, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 15
  br i1 %8, label %9, label %20

9:                                                ; preds = %5
  %10 = load ptr, ptr %1, align 8, !tbaa !64
  %11 = load i64, ptr %10, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 28
  %14 = getelementptr inbounds %struct.c_expr, ptr %1, i64 0, i32 1
  %15 = load i32, ptr %14, align 8
  %16 = icmp ne i32 %15, 28
  %17 = select i1 %13, i1 %16, i1 false
  br i1 %17, label %18, label %20

18:                                               ; preds = %9
  %19 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void @pedwarn_init(i32 noundef %19, i32 noundef 834, ptr noundef nonnull @.str.183)
  br label %20

20:                                               ; preds = %18, %9, %5, %2
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @pedwarn_init(i32 noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %1, ptr noundef nonnull @.str.180, ptr noundef %2) #20
  %5 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %6 = load ptr, ptr @spelling, align 8, !tbaa !6
  %7 = icmp ult ptr %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = alloca i8, align 16
  br label %64

10:                                               ; preds = %3, %24
  %11 = phi ptr [ %26, %24 ], [ %5, %3 ]
  %12 = phi i32 [ %25, %24 ], [ 0, %3 ]
  %13 = load i32, ptr %11, align 8, !tbaa !120
  %14 = icmp eq i32 %13, 3
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = add nsw i32 %12, 25
  br label %24

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.spelling, ptr %11, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %19)
  %21 = trunc i64 %20 to i32
  %22 = add i32 %12, 1
  %23 = add i32 %22, %21
  br label %24

24:                                               ; preds = %17, %15
  %25 = phi i32 [ %16, %15 ], [ %23, %17 ]
  %26 = getelementptr inbounds %struct.spelling, ptr %11, i64 1
  %27 = icmp ult ptr %26, %6
  br i1 %27, label %10, label %28, !llvm.loop !122

28:                                               ; preds = %24
  %29 = add nsw i32 %25, 1
  %30 = sext i32 %29 to i64
  %31 = alloca i8, i64 %30, align 16
  br label %32

32:                                               ; preds = %28, %59
  %33 = phi ptr [ %60, %59 ], [ %6, %28 ]
  %34 = phi ptr [ %62, %59 ], [ %5, %28 ]
  %35 = phi ptr [ %61, %59 ], [ %31, %28 ]
  %36 = load i32, ptr %34, align 8, !tbaa !120
  switch i32 %36, label %46 [
    i32 3, label %37
    i32 2, label %44
  ]

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.spelling, ptr %34, i64 0, i32 1
  %39 = load i64, ptr %38, align 8, !tbaa !17
  %40 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %35, ptr noundef nonnull dereferenceable(1) @.str.182, i64 noundef %39)
  %41 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %35)
  %42 = getelementptr inbounds i8, ptr %35, i64 %41
  %43 = load ptr, ptr @spelling, align 8, !tbaa !6
  br label %59

44:                                               ; preds = %32
  %45 = getelementptr inbounds i8, ptr %35, i64 1
  store i8 46, ptr %35, align 1, !tbaa !17
  br label %46

46:                                               ; preds = %44, %32
  %47 = phi ptr [ %45, %44 ], [ %35, %32 ]
  %48 = getelementptr inbounds %struct.spelling, ptr %34, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  %50 = load i8, ptr %49, align 1, !tbaa !17
  store i8 %50, ptr %47, align 1, !tbaa !17
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %46, %52
  %53 = phi ptr [ %55, %52 ], [ %49, %46 ]
  %54 = phi ptr [ %56, %52 ], [ %47, %46 ]
  %55 = getelementptr inbounds i8, ptr %53, i64 1
  %56 = getelementptr inbounds i8, ptr %54, i64 1
  %57 = load i8, ptr %55, align 1, !tbaa !17
  store i8 %57, ptr %56, align 1, !tbaa !17
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %59, label %52, !llvm.loop !123

59:                                               ; preds = %52, %46, %37
  %60 = phi ptr [ %43, %37 ], [ %33, %46 ], [ %33, %52 ]
  %61 = phi ptr [ %42, %37 ], [ %47, %46 ], [ %56, %52 ]
  %62 = getelementptr inbounds %struct.spelling, ptr %34, i64 1
  %63 = icmp ult ptr %62, %60
  br i1 %63, label %32, label %64, !llvm.loop !124

64:                                               ; preds = %59, %8
  %65 = phi ptr [ %9, %8 ], [ %31, %59 ]
  %66 = phi ptr [ %9, %8 ], [ %61, %59 ]
  store i8 0, ptr %66, align 1, !tbaa !17
  %67 = load i8, ptr %65, align 16, !tbaa !17
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %64
  %70 = call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %1, ptr noundef nonnull @.str.181, ptr noundef nonnull %65) #20
  br label %71

71:                                               ; preds = %69, %64
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @error_init(ptr noundef %0) local_unnamed_addr #9 {
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.180, ptr noundef %0) #20
  %2 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %3 = load ptr, ptr @spelling, align 8, !tbaa !6
  %4 = icmp ult ptr %2, %3
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = alloca i8, align 16
  br label %61

7:                                                ; preds = %1, %21
  %8 = phi ptr [ %23, %21 ], [ %2, %1 ]
  %9 = phi i32 [ %22, %21 ], [ 0, %1 ]
  %10 = load i32, ptr %8, align 8, !tbaa !120
  %11 = icmp eq i32 %10, 3
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  %13 = add nsw i32 %9, 25
  br label %21

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.spelling, ptr %8, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %16)
  %18 = trunc i64 %17 to i32
  %19 = add i32 %9, 1
  %20 = add i32 %19, %18
  br label %21

21:                                               ; preds = %14, %12
  %22 = phi i32 [ %13, %12 ], [ %20, %14 ]
  %23 = getelementptr inbounds %struct.spelling, ptr %8, i64 1
  %24 = icmp ult ptr %23, %3
  br i1 %24, label %7, label %25, !llvm.loop !122

25:                                               ; preds = %21
  %26 = add nsw i32 %22, 1
  %27 = sext i32 %26 to i64
  %28 = alloca i8, i64 %27, align 16
  br label %29

29:                                               ; preds = %25, %56
  %30 = phi ptr [ %57, %56 ], [ %3, %25 ]
  %31 = phi ptr [ %59, %56 ], [ %2, %25 ]
  %32 = phi ptr [ %58, %56 ], [ %28, %25 ]
  %33 = load i32, ptr %31, align 8, !tbaa !120
  switch i32 %33, label %43 [
    i32 3, label %34
    i32 2, label %41
  ]

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.spelling, ptr %31, i64 0, i32 1
  %36 = load i64, ptr %35, align 8, !tbaa !17
  %37 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %32, ptr noundef nonnull dereferenceable(1) @.str.182, i64 noundef %36)
  %38 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %32)
  %39 = getelementptr inbounds i8, ptr %32, i64 %38
  %40 = load ptr, ptr @spelling, align 8, !tbaa !6
  br label %56

41:                                               ; preds = %29
  %42 = getelementptr inbounds i8, ptr %32, i64 1
  store i8 46, ptr %32, align 1, !tbaa !17
  br label %43

43:                                               ; preds = %41, %29
  %44 = phi ptr [ %42, %41 ], [ %32, %29 ]
  %45 = getelementptr inbounds %struct.spelling, ptr %31, i64 0, i32 1
  %46 = load ptr, ptr %45, align 8, !tbaa !17
  %47 = load i8, ptr %46, align 1, !tbaa !17
  store i8 %47, ptr %44, align 1, !tbaa !17
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %56, label %49

49:                                               ; preds = %43, %49
  %50 = phi ptr [ %52, %49 ], [ %46, %43 ]
  %51 = phi ptr [ %53, %49 ], [ %44, %43 ]
  %52 = getelementptr inbounds i8, ptr %50, i64 1
  %53 = getelementptr inbounds i8, ptr %51, i64 1
  %54 = load i8, ptr %52, align 1, !tbaa !17
  store i8 %54, ptr %53, align 1, !tbaa !17
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %56, label %49, !llvm.loop !123

56:                                               ; preds = %49, %43, %34
  %57 = phi ptr [ %40, %34 ], [ %30, %43 ], [ %30, %49 ]
  %58 = phi ptr [ %39, %34 ], [ %44, %43 ], [ %53, %49 ]
  %59 = getelementptr inbounds %struct.spelling, ptr %31, i64 1
  %60 = icmp ult ptr %59, %57
  br i1 %60, label %29, label %61, !llvm.loop !124

61:                                               ; preds = %56, %5
  %62 = phi ptr [ %6, %5 ], [ %28, %56 ]
  %63 = phi ptr [ %6, %5 ], [ %58, %56 ]
  store i8 0, ptr %63, align 1, !tbaa !17
  %64 = load i8, ptr %62, align 16, !tbaa !17
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %61
  call void (ptr, ...) @error(ptr noundef nonnull @.str.181, ptr noundef nonnull %62) #20
  br label %67

67:                                               ; preds = %66, %61
  ret void
}

declare ptr @build_vector_from_ctor(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @verify_sequence_points(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @valid_compound_expr_initializer(ptr noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 52
  br i1 %5, label %6, label %19

6:                                                ; preds = %2, %13
  %7 = phi ptr [ %15, %13 ], [ %0, %2 ]
  %8 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = tail call fastcc ptr @valid_compound_expr_initializer(ptr noundef %9, ptr noundef %1)
  %11 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %12 = icmp eq ptr %10, %11
  br i1 %12, label %25, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i64, ptr %15, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 52
  br i1 %18, label %6, label %19

19:                                               ; preds = %13, %2
  %20 = phi ptr [ %0, %2 ], [ %15, %13 ]
  %21 = tail call ptr @initializer_constant_valid_p(ptr noundef nonnull %20, ptr noundef %1) #20
  %22 = icmp eq ptr %21, null
  %23 = load ptr, ptr @global_trees, align 16
  %24 = select i1 %22, ptr %23, ptr %20
  br label %25

25:                                               ; preds = %6, %19
  %26 = phi ptr [ %24, %19 ], [ %10, %6 ]
  ret ptr %26
}

declare ptr @initializer_constant_valid_p(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_cast_expr(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = alloca ptr, align 8
  %5 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #20
  store ptr null, ptr %4, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %5) #20
  store i8 1, ptr %5, align 1, !tbaa !17
  %6 = load i32, ptr @warn_strict_prototypes, align 4, !tbaa !21
  %7 = load i64, ptr %2, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 23
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i32 0, ptr @warn_strict_prototypes, align 4, !tbaa !21
  br label %11

11:                                               ; preds = %10, %3
  %12 = call ptr @groktypename(ptr noundef %1, ptr noundef nonnull %4, ptr noundef nonnull %5) #20
  store i32 %6, ptr @warn_strict_prototypes, align 4, !tbaa !21
  %13 = call ptr @build_c_cast(i32 noundef %0, ptr noundef %12, ptr noundef nonnull %2)
  %14 = load ptr, ptr %4, align 8, !tbaa !6
  %15 = icmp eq ptr %14, null
  br i1 %15, label %27, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.tree_common, ptr %13, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = call ptr @build2_stat(i32 noundef 189, ptr noundef %18, ptr noundef nonnull %14, ptr noundef %13) #20
  %20 = load i8, ptr %5, align 1, !tbaa !17
  %21 = icmp eq i8 %20, 0
  %22 = load i64, ptr %19, align 8
  %23 = select i1 %21, i64 17179869184, i64 0
  %24 = and i64 %22, -17179869185
  %25 = or i64 %24, %23
  store i64 %25, ptr %19, align 8
  %26 = getelementptr inbounds %struct.tree_exp, ptr %19, i64 0, i32 1
  store i32 %0, ptr %26, align 8, !tbaa !17
  br label %31

27:                                               ; preds = %11
  %28 = icmp eq ptr %13, null
  br i1 %28, label %44, label %29

29:                                               ; preds = %27
  %30 = load i64, ptr %13, align 8
  br label %31

31:                                               ; preds = %29, %16
  %32 = phi i64 [ %25, %16 ], [ %30, %29 ]
  %33 = phi ptr [ %19, %16 ], [ %13, %29 ]
  %34 = and i64 %32, 65535
  %35 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %34
  %36 = load i32, ptr %35, align 4, !tbaa !17
  %37 = add i32 %36, -4
  %38 = icmp ult i32 %37, 7
  br i1 %38, label %39, label %44

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.tree_exp, ptr %33, i64 0, i32 1
  %41 = load i32, ptr %40, align 8, !tbaa !17
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %39
  store i32 %0, ptr %40, align 8, !tbaa !17
  br label %44

44:                                               ; preds = %43, %39, %31, %27
  %45 = phi ptr [ %33, %43 ], [ %33, %39 ], [ %33, %31 ], [ null, %27 ]
  %46 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %44
  %49 = load ptr, ptr %1, align 8, !tbaa !125
  %50 = getelementptr inbounds %struct.c_declspecs, ptr %49, i64 0, i32 6
  %51 = load i8, ptr %50, align 8
  %52 = and i8 %51, 32
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %48
  %55 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.178) #20
  br label %56

56:                                               ; preds = %54, %48, %44
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #20
  ret ptr %45
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_modify_expr(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, i32 noundef %4, ptr noundef %5, ptr noundef %6) local_unnamed_addr #9 {
  %8 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %11 = icmp eq ptr %10, %1
  %12 = icmp eq ptr %9, %10
  %13 = select i1 %11, i1 true, i1 %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  tail call void @c_incomplete_type_error(ptr noundef nonnull %1, ptr noundef nonnull %9)
  %19 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %20

20:                                               ; preds = %7, %14, %18
  %21 = phi ptr [ %19, %18 ], [ %10, %14 ], [ %10, %7 ]
  %22 = phi ptr [ %19, %18 ], [ %1, %14 ], [ %10, %7 ]
  %23 = load i64, ptr %22, align 8
  %24 = and i64 %23, 65535
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %250, label %26

26:                                               ; preds = %20
  %27 = load i64, ptr %5, align 8
  %28 = and i64 %27, 65535
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %250, label %30

30:                                               ; preds = %26, %36
  %31 = phi i64 [ %39, %36 ], [ %23, %26 ]
  %32 = phi ptr [ %38, %36 ], [ %22, %26 ]
  %33 = trunc i64 %31 to i16
  switch i16 %33, label %54 [
    i16 43, label %34
    i16 44, label %34
    i16 41, label %34
    i16 189, label %40
    i16 119, label %56
    i16 28, label %56
    i16 47, label %48
    i16 45, label %48
    i16 32, label %48
    i16 34, label %48
    i16 36, label %48
    i16 0, label %48
    i16 58, label %42
  ]

34:                                               ; preds = %30, %30, %30
  %35 = getelementptr inbounds %struct.tree_exp, ptr %32, i64 0, i32 3
  br label %36

36:                                               ; preds = %40, %34
  %37 = phi ptr [ %35, %34 ], [ %41, %40 ]
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = load i64, ptr %38, align 8
  br label %30

40:                                               ; preds = %30
  %41 = getelementptr inbounds %struct.tree_exp, ptr %32, i64 1
  br label %36

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = load i64, ptr %44, align 8
  %46 = and i64 %45, 65535
  %47 = icmp eq i64 %46, 15
  br i1 %47, label %56, label %54

48:                                               ; preds = %30, %30, %30, %30, %30, %30
  %49 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = load i64, ptr %50, align 8
  %52 = and i64 %51, 65534
  %53 = icmp eq i64 %52, 20
  br i1 %53, label %54, label %56

54:                                               ; preds = %30, %48, %42
  tail call void @lvalue_error(i32 noundef 0) #20
  %55 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %250

56:                                               ; preds = %30, %30, %48, %42
  %57 = icmp eq i64 %28, 190
  br i1 %57, label %58, label %63

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  br label %63

63:                                               ; preds = %58, %56
  %64 = phi ptr [ %60, %58 ], [ null, %56 ]
  %65 = phi ptr [ %62, %58 ], [ %5, %56 ]
  %66 = icmp eq i64 %24, 189
  br i1 %66, label %67, label %86

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.tree_exp, ptr %22, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !17
  %70 = tail call ptr @build_modify_expr(i32 noundef %0, ptr noundef %69, ptr noundef %2, i32 noundef %3, i32 noundef %4, ptr noundef %65, ptr noundef %6)
  %71 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %72 = icmp eq ptr %70, %71
  br i1 %72, label %250, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %struct.tree_exp, ptr %22, i64 0, i32 3
  %75 = getelementptr inbounds %struct.tree_common, ptr %70, i64 0, i32 2
  %76 = load ptr, ptr %75, align 8, !tbaa !17
  %77 = load ptr, ptr %74, align 8, !tbaa !17
  %78 = tail call ptr @build2_stat(i32 noundef 189, ptr noundef %76, ptr noundef %77, ptr noundef %70) #20
  %79 = load i64, ptr %22, align 8
  %80 = and i64 %79, 8589934592
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %83, label %82

82:                                               ; preds = %73
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 4730, ptr noundef nonnull @.str.8) #20
  br label %83

83:                                               ; preds = %73, %82
  %84 = load i64, ptr %78, align 8
  %85 = or i64 %84, 17179869184
  store i64 %85, ptr %78, align 8
  tail call void @protected_set_expr_location(ptr noundef nonnull %78, i32 noundef %0) #20
  br label %250

86:                                               ; preds = %63
  %87 = icmp eq i32 %3, 116
  br i1 %87, label %92, label %88

88:                                               ; preds = %86
  %89 = tail call ptr @c_fully_fold(ptr noundef nonnull %22, i8 noundef zeroext 0, ptr noundef null) #20
  %90 = tail call ptr @stabilize_reference(ptr noundef %89) #20
  %91 = tail call ptr @build_binary_op(i32 noundef %0, i32 noundef %3, ptr noundef %90, ptr noundef %65, i32 noundef 1)
  br label %92

92:                                               ; preds = %88, %86
  %93 = phi ptr [ %91, %88 ], [ %65, %86 ]
  %94 = phi ptr [ null, %88 ], [ %6, %86 ]
  %95 = phi ptr [ %90, %88 ], [ %22, %86 ]
  %96 = load i64, ptr %9, align 8
  %97 = and i64 %96, 1048576
  %98 = icmp ne i64 %97, 0
  %99 = and i64 %96, 17179934718
  %100 = icmp eq i64 %99, 17179869200
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %121

102:                                              ; preds = %92, %106
  %103 = phi ptr [ %108, %106 ], [ %95, %92 ]
  %104 = load i64, ptr %103, align 8
  %105 = trunc i64 %104 to i16
  switch i16 %105, label %118 [
    i16 41, label %106
    i16 32, label %117
  ]

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.tree_exp, ptr %103, i64 0, i32 3
  %108 = load ptr, ptr %107, align 8, !tbaa !17
  %109 = getelementptr inbounds %struct.tree_common, ptr %108, i64 0, i32 2
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = load i64, ptr %110, align 8
  %112 = and i64 %111, 1048576
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %102

114:                                              ; preds = %106
  %115 = getelementptr inbounds %struct.tree_exp, ptr %103, i64 1
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.122, ptr noundef %116) #20
  br label %119

117:                                              ; preds = %102
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.126, ptr noundef nonnull %103) #20
  br label %119

118:                                              ; preds = %102
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.130, ptr noundef nonnull %103) #20
  br label %119

119:                                              ; preds = %114, %117, %118
  %120 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %250

121:                                              ; preds = %92
  %122 = load i64, ptr %95, align 8
  %123 = and i64 %122, 1048576
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %121
  %126 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.130, ptr noundef nonnull %95) #20
  %127 = load i64, ptr %95, align 8
  br label %128

128:                                              ; preds = %121, %125
  %129 = phi i64 [ %122, %121 ], [ %127, %125 ]
  %130 = and i64 %129, 65535
  %131 = icmp eq i64 %130, 41
  br i1 %131, label %132, label %142

132:                                              ; preds = %128
  %133 = load i64, ptr %9, align 8
  %134 = trunc i64 %133 to i32
  %135 = and i32 %134, 65534
  %136 = add nsw i32 %135, -6
  %137 = icmp ult i32 %136, 4
  br i1 %137, label %138, label %142

138:                                              ; preds = %132
  %139 = tail call ptr @get_unwidened(ptr noundef nonnull %95, ptr noundef null) #20
  %140 = getelementptr inbounds %struct.tree_common, ptr %139, i64 0, i32 2
  %141 = load ptr, ptr %140, align 8, !tbaa !17
  br label %142

142:                                              ; preds = %132, %138, %128
  %143 = phi ptr [ %141, %138 ], [ %9, %128 ], [ %9, %132 ]
  %144 = getelementptr inbounds %struct.tree_common, ptr %95, i64 0, i32 2
  %145 = load ptr, ptr %144, align 8, !tbaa !17
  %146 = icmp eq ptr %143, %145
  br i1 %146, label %150, label %147

147:                                              ; preds = %142
  %148 = tail call ptr @copy_node_stat(ptr noundef nonnull %95) #20
  %149 = getelementptr inbounds %struct.tree_common, ptr %148, i64 0, i32 2
  store ptr %143, ptr %149, align 8, !tbaa !17
  br label %150

150:                                              ; preds = %147, %142
  %151 = phi ptr [ %148, %147 ], [ %95, %142 ]
  %152 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %153 = icmp eq i32 %152, 0
  %154 = icmp eq ptr %2, null
  %155 = or i1 %154, %153
  %156 = icmp eq ptr %143, %2
  %157 = or i1 %156, %155
  br i1 %157, label %179, label %158

158:                                              ; preds = %150
  %159 = load i64, ptr %2, align 8
  %160 = and i64 %159, 65535
  %161 = icmp eq i64 %160, 6
  br i1 %161, label %162, label %179

162:                                              ; preds = %158
  %163 = icmp eq ptr %94, null
  br i1 %163, label %164, label %167

164:                                              ; preds = %162
  %165 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  br label %167

167:                                              ; preds = %162, %164
  %168 = phi ptr [ %166, %164 ], [ %94, %162 ]
  %169 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %170 = icmp eq ptr %168, %169
  br i1 %170, label %179, label %171

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.tree_type, ptr %168, i64 0, i32 16
  %173 = load ptr, ptr %172, align 8, !tbaa !17
  %174 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 16
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = icmp eq ptr %173, %175
  br i1 %176, label %179, label %177

177:                                              ; preds = %171
  %178 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.55) #20
  br label %179

179:                                              ; preds = %167, %171, %177, %158, %150
  %180 = getelementptr inbounds %struct.tree_common, ptr %93, i64 0, i32 2
  %181 = load ptr, ptr %180, align 8, !tbaa !17
  %182 = load i64, ptr %93, align 8
  %183 = and i64 %182, 134283263
  %184 = icmp eq i64 %183, 23
  br i1 %184, label %185, label %216

185:                                              ; preds = %179
  %186 = tail call i32 @integer_zerop(ptr noundef nonnull %93) #20
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %216, label %188

188:                                              ; preds = %185
  %189 = load i64, ptr %181, align 8
  %190 = trunc i64 %189 to i16
  switch i16 %190, label %215 [
    i16 6, label %216
    i16 7, label %216
    i16 8, label %216
    i16 10, label %191
  ]

191:                                              ; preds = %188
  %192 = getelementptr inbounds %struct.tree_common, ptr %181, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  %194 = load i64, ptr %193, align 8
  %195 = and i64 %194, 65535
  %196 = icmp eq i64 %195, 19
  br i1 %196, label %197, label %216

197:                                              ; preds = %191
  %198 = trunc i64 %194 to i32
  %199 = lshr i32 %198, 20
  %200 = and i32 %199, 1
  %201 = lshr i32 %198, 18
  %202 = and i32 %201, 2
  %203 = or i32 %200, %202
  %204 = getelementptr inbounds %struct.tree_type, ptr %193, i64 0, i32 6
  %205 = load i32, ptr %204, align 4
  %206 = lshr i32 %205, 11
  %207 = and i32 %206, 4
  %208 = lshr i64 %194, 48
  %209 = trunc i64 %208 to i32
  %210 = and i32 %209, 65280
  %211 = or i32 %203, %210
  %212 = or i32 %211, %207
  %213 = icmp eq i32 %212, 0
  %214 = zext i1 %213 to i8
  br label %216

215:                                              ; preds = %188
  br label %216

216:                                              ; preds = %179, %185, %188, %188, %188, %191, %197, %215
  %217 = phi i8 [ 0, %185 ], [ 0, %179 ], [ 1, %188 ], [ 0, %191 ], [ %214, %197 ], [ 1, %188 ], [ 1, %188 ], [ 0, %215 ]
  %218 = tail call ptr @c_fully_fold(ptr noundef nonnull %93, i8 noundef zeroext 0, ptr noundef null) #20
  %219 = icmp eq ptr %64, null
  br i1 %219, label %222, label %220

220:                                              ; preds = %216
  %221 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %64, ptr noundef %218) #20
  br label %222

222:                                              ; preds = %220, %216
  %223 = phi ptr [ %221, %220 ], [ %218, %216 ]
  %224 = tail call fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef %143, ptr noundef %223, ptr noundef %94, i32 noundef 1, i8 noundef zeroext %217, ptr noundef null, ptr noundef null, i32 noundef 0)
  %225 = load i64, ptr %224, align 8
  %226 = and i64 %225, 65535
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %222
  %229 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %250

230:                                              ; preds = %222
  %231 = load i32, ptr @c_language, align 4, !tbaa !17
  %232 = and i32 %231, 1
  %233 = icmp ne i32 %232, 0
  %234 = load i32, ptr @flag_objc_gc, align 4
  %235 = icmp ne i32 %234, 0
  %236 = select i1 %233, i1 %235, i1 false
  br i1 %236, label %237, label %241

237:                                              ; preds = %230
  %238 = tail call ptr @objc_generate_write_barrier(ptr noundef nonnull %151, i32 noundef %3, ptr noundef nonnull %224) #20
  %239 = icmp eq ptr %238, null
  br i1 %239, label %241, label %240

240:                                              ; preds = %237
  tail call void @protected_set_expr_location(ptr noundef nonnull %238, i32 noundef %0) #20
  br label %250

241:                                              ; preds = %237, %230
  %242 = tail call ptr @build2_stat(i32 noundef 53, ptr noundef %143, ptr noundef nonnull %151, ptr noundef nonnull %224) #20
  %243 = load i64, ptr %242, align 8
  %244 = or i64 %243, 65536
  store i64 %244, ptr %242, align 8
  tail call void @protected_set_expr_location(ptr noundef nonnull %242, i32 noundef %0) #20
  %245 = getelementptr inbounds %struct.tree_common, ptr %242, i64 0, i32 2
  %246 = load ptr, ptr %245, align 8, !tbaa !17
  %247 = icmp eq ptr %9, %246
  br i1 %247, label %250, label %248

248:                                              ; preds = %241
  %249 = tail call fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef nonnull %9, ptr noundef nonnull %242, ptr noundef %94, i32 noundef 1, i8 noundef zeroext 0, ptr noundef null, ptr noundef null, i32 noundef 0)
  tail call void @protected_set_expr_location(ptr noundef %249, i32 noundef %0) #20
  br label %250

250:                                              ; preds = %20, %26, %241, %83, %67, %248, %240, %228, %119, %54
  %251 = phi ptr [ %120, %119 ], [ %229, %228 ], [ %238, %240 ], [ %249, %248 ], [ %55, %54 ], [ %78, %83 ], [ %70, %67 ], [ %242, %241 ], [ %21, %26 ], [ %21, %20 ]
  ret ptr %251
}

declare ptr @get_unwidened(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @objc_generate_write_barrier(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @store_init_value(i32 noundef %0, ptr nocapture noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #9 {
  %5 = alloca %struct.expanded_location, align 8
  %6 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %148, label %11

11:                                               ; preds = %4
  %12 = icmp eq ptr %2, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %59

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = load i64, ptr %2, align 8
  %19 = and i64 %18, 134283263
  %20 = icmp eq i64 %19, 23
  br i1 %20, label %21, label %52

21:                                               ; preds = %15
  %22 = tail call i32 @integer_zerop(ptr noundef nonnull %2) #20
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %52, label %24

24:                                               ; preds = %21
  %25 = load i64, ptr %17, align 8
  %26 = trunc i64 %25 to i16
  switch i16 %26, label %51 [
    i16 6, label %52
    i16 7, label %52
    i16 8, label %52
    i16 10, label %27
  ]

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 19
  br i1 %32, label %33, label %52

33:                                               ; preds = %27
  %34 = trunc i64 %30 to i32
  %35 = lshr i32 %34, 20
  %36 = and i32 %35, 1
  %37 = lshr i32 %34, 18
  %38 = and i32 %37, 2
  %39 = or i32 %36, %38
  %40 = getelementptr inbounds %struct.tree_type, ptr %29, i64 0, i32 6
  %41 = load i32, ptr %40, align 4
  %42 = lshr i32 %41, 11
  %43 = and i32 %42, 4
  %44 = lshr i64 %30, 48
  %45 = trunc i64 %44 to i32
  %46 = and i32 %45, 65280
  %47 = or i32 %39, %46
  %48 = or i32 %47, %43
  %49 = icmp eq i32 %48, 0
  %50 = zext i1 %49 to i8
  br label %52

51:                                               ; preds = %24
  br label %52

52:                                               ; preds = %15, %21, %24, %24, %24, %27, %33, %51
  %53 = phi i8 [ 0, %21 ], [ 0, %15 ], [ 1, %24 ], [ 0, %27 ], [ %50, %33 ], [ 1, %24 ], [ 1, %24 ], [ 0, %51 ]
  %54 = load i64, ptr %1, align 8
  %55 = trunc i64 %54 to i32
  %56 = lshr i32 %55, 26
  %57 = and i32 %56, 1
  %58 = tail call fastcc ptr @digest_init(i32 noundef %0, ptr noundef nonnull %7, ptr noundef nonnull %2, ptr noundef %3, i8 noundef zeroext %53, i8 noundef zeroext 1, i32 noundef %57)
  br label %59

59:                                               ; preds = %13, %52
  %60 = phi ptr [ %14, %13 ], [ %58, %52 ]
  %61 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %5, i32 noundef %61) #20
  %62 = getelementptr inbounds %struct.expanded_location, ptr %5, i64 0, i32 3
  %63 = load i8, ptr %62, align 8, !tbaa !109
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %78

65:                                               ; preds = %59
  %66 = load ptr, ptr %6, align 8, !tbaa !17
  %67 = load i64, ptr %66, align 8
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 65535
  %70 = add nsw i32 %69, -15
  %71 = icmp ult i32 %70, 4
  br i1 %71, label %72, label %78

72:                                               ; preds = %65
  %73 = load i64, ptr %1, align 8
  %74 = and i64 %73, 67108864
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 202, ptr noundef nonnull @.str.179) #20
  br label %78

78:                                               ; preds = %65, %76, %72, %59
  %79 = getelementptr inbounds %struct.tree_decl_common, ptr %1, i64 0, i32 5
  store ptr %60, ptr %79, align 8, !tbaa !17
  %80 = load ptr, ptr @global_trees, align 16
  br label %81

81:                                               ; preds = %89, %78
  %82 = phi ptr [ %60, %78 ], [ %87, %89 ]
  %83 = load i64, ptr %82, align 8
  %84 = trunc i64 %83 to i16
  switch i16 %84, label %95 [
    i16 116, label %85
    i16 113, label %85
    i16 117, label %85
  ]

85:                                               ; preds = %81, %81, %81
  %86 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %87 = load ptr, ptr %86, align 8, !tbaa !17
  %88 = icmp eq ptr %87, %80
  br i1 %88, label %95, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.tree_common, ptr %82, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !17
  %92 = getelementptr inbounds %struct.tree_common, ptr %87, i64 0, i32 2
  %93 = load ptr, ptr %92, align 8, !tbaa !17
  %94 = icmp eq ptr %91, %93
  br i1 %94, label %81, label %95, !llvm.loop !127

95:                                               ; preds = %81, %85, %89
  %96 = load i64, ptr %1, align 8
  %97 = and i64 %96, 67108864
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  call void @constant_expression_warning(ptr noundef nonnull %82) #20
  br label %100

100:                                              ; preds = %99, %95
  %101 = load i64, ptr %7, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 15
  br i1 %103, label %104, label %148

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = icmp ne ptr %106, null
  %108 = load ptr, ptr @global_trees, align 16
  %109 = icmp eq ptr %82, %108
  %110 = select i1 %107, i1 true, i1 %109
  br i1 %110, label %148, label %111

111:                                              ; preds = %104, %119
  %112 = phi ptr [ %117, %119 ], [ %2, %104 ]
  %113 = load i64, ptr %112, align 8
  %114 = trunc i64 %113 to i16
  switch i16 %114, label %125 [
    i16 116, label %115
    i16 113, label %115
    i16 117, label %115
  ]

115:                                              ; preds = %111, %111, %111
  %116 = getelementptr inbounds %struct.tree_exp, ptr %112, i64 0, i32 3
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = icmp eq ptr %117, %108
  br i1 %118, label %125, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.tree_common, ptr %112, i64 0, i32 2
  %121 = load ptr, ptr %120, align 8, !tbaa !17
  %122 = getelementptr inbounds %struct.tree_common, ptr %117, i64 0, i32 2
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  %124 = icmp eq ptr %121, %123
  br i1 %124, label %111, label %125, !llvm.loop !128

125:                                              ; preds = %111, %115, %119
  %126 = call ptr @fold(ptr noundef nonnull %112) #20
  %127 = load i64, ptr %126, align 8
  %128 = and i64 %127, 65535
  %129 = icmp eq i64 %128, 119
  br i1 %129, label %130, label %148

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.tree_exp, ptr %126, i64 0, i32 3
  %132 = load ptr, ptr %131, align 8, !tbaa !17
  %133 = getelementptr inbounds %struct.tree_exp, ptr %132, i64 0, i32 3
  %134 = load ptr, ptr %133, align 8, !tbaa !17
  %135 = getelementptr inbounds %struct.tree_common, ptr %134, i64 0, i32 2
  %136 = load ptr, ptr %135, align 8, !tbaa !17
  %137 = getelementptr inbounds %struct.tree_type, ptr %136, i64 0, i32 1
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  %139 = icmp eq ptr %138, null
  br i1 %139, label %148, label %140

140:                                              ; preds = %130
  %141 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 16
  %142 = load ptr, ptr %141, align 8, !tbaa !17
  %143 = call ptr @build_distinct_type_copy(ptr noundef %142) #20
  store ptr %143, ptr %6, align 8, !tbaa !17
  %144 = load ptr, ptr %135, align 8, !tbaa !17
  %145 = getelementptr inbounds %struct.tree_type, ptr %144, i64 0, i32 1
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  %147 = getelementptr inbounds %struct.tree_type, ptr %143, i64 0, i32 1
  store ptr %146, ptr %147, align 8, !tbaa !17
  call void @layout_type(ptr noundef %143) #20
  call void @layout_decl(ptr noundef nonnull %134, i32 noundef 0) #20
  br label %148

148:                                              ; preds = %100, %104, %130, %140, %125, %4
  ret void
}

declare void @constant_expression_warning(ptr noundef) local_unnamed_addr #3

declare ptr @fold(ptr noundef) local_unnamed_addr #3

declare ptr @build_distinct_type_copy(ptr noundef) local_unnamed_addr #3

declare void @layout_type(ptr noundef) local_unnamed_addr #3

declare void @layout_decl(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @sprintf(ptr noalias nocapture noundef writeonly, ptr nocapture noundef readonly, ...) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #16

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @start_init(ptr noundef %0, ptr nocapture noundef readnone %1, i32 noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @xmalloc(i64 noundef 64) #20
  %5 = load ptr, ptr @constructor_decl, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 1
  store ptr %5, ptr %6, align 8, !tbaa !129
  %7 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %8 = trunc i32 %7 to i8
  %9 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 9
  store i8 %8, ptr %9, align 1, !tbaa !131
  %10 = load i32, ptr @require_constant_elements, align 4, !tbaa !21
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 10
  store i8 %11, ptr %12, align 2, !tbaa !132
  %13 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %14 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 2
  store ptr %13, ptr %14, align 8, !tbaa !133
  %15 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 3
  store ptr %15, ptr %16, align 8, !tbaa !134
  %17 = load ptr, ptr @constructor_elements, align 8, !tbaa !6
  %18 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 4
  store ptr %17, ptr %18, align 8, !tbaa !135
  %19 = load ptr, ptr @spelling, align 8, !tbaa !6
  %20 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 5
  store ptr %19, ptr %20, align 8, !tbaa !136
  %21 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %22 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 6
  store ptr %21, ptr %22, align 8, !tbaa !137
  %23 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %24 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 7
  store i32 %23, ptr %24, align 8, !tbaa !138
  %25 = load i32, ptr @constructor_top_level, align 4, !tbaa !21
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds %struct.initializer_stack, ptr %4, i64 0, i32 8
  store i8 %26, ptr %27, align 4, !tbaa !139
  %28 = load ptr, ptr @initializer_stack, align 8, !tbaa !6
  store ptr %28, ptr %4, align 8, !tbaa !140
  store ptr %4, ptr @initializer_stack, align 8, !tbaa !6
  store ptr %0, ptr @constructor_decl, align 8, !tbaa !6
  store i32 0, ptr @constructor_designated, align 4, !tbaa !21
  store i32 %2, ptr @constructor_top_level, align 4, !tbaa !21
  %29 = icmp eq ptr %0, null
  %30 = load ptr, ptr @global_trees, align 16
  %31 = icmp eq ptr %30, %0
  %32 = select i1 %29, i1 true, i1 %31
  br i1 %32, label %64, label %33

33:                                               ; preds = %3
  %34 = load i64, ptr %0, align 8
  %35 = trunc i64 %34 to i32
  %36 = lshr i32 %35, 26
  %37 = and i32 %36, 1
  store i32 %37, ptr @require_constant_value, align 4, !tbaa !21
  %38 = and i64 %34, 67108864
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %46

40:                                               ; preds = %33
  %41 = load i32, ptr @pedantic, align 4, !tbaa !21
  %42 = icmp eq i32 %41, 0
  %43 = load i32, ptr @flag_isoc99, align 4
  %44 = icmp ne i32 %43, 0
  %45 = select i1 %42, i1 true, i1 %44
  br i1 %45, label %57, label %46

46:                                               ; preds = %40, %33
  %47 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 65535
  %52 = add nsw i32 %51, -15
  %53 = icmp ult i32 %52, 3
  br i1 %53, label %57, label %54

54:                                               ; preds = %46
  %55 = icmp eq i32 %51, 18
  %56 = zext i1 %55 to i32
  br label %57

57:                                               ; preds = %46, %54, %40
  %58 = phi i32 [ 0, %40 ], [ %56, %54 ], [ 1, %46 ]
  store i32 %58, ptr @require_constant_elements, align 4, !tbaa !21
  %59 = getelementptr inbounds %struct.tree_decl_minimal, ptr %0, i64 0, i32 3
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = getelementptr inbounds %struct.tree_identifier, ptr %60, i64 0, i32 1
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  %63 = tail call ptr @identifier_to_locale(ptr noundef %62) #20
  br label %65

64:                                               ; preds = %3
  store i32 0, ptr @require_constant_value, align 4, !tbaa !21
  store i32 0, ptr @require_constant_elements, align 4, !tbaa !21
  br label %65

65:                                               ; preds = %64, %57
  %66 = phi ptr [ %63, %57 ], [ @.str.184, %64 ]
  store ptr null, ptr @constructor_stack, align 8, !tbaa !6
  store ptr null, ptr @constructor_range_stack, align 8, !tbaa !6
  store i1 false, ptr @missing_braces_mentioned, align 4
  store ptr null, ptr @spelling_base, align 8, !tbaa !6
  store i32 0, ptr @spelling_size, align 4, !tbaa !21
  store ptr null, ptr @spelling, align 8, !tbaa !6
  %67 = icmp eq ptr %66, null
  br i1 %67, label %72, label %68

68:                                               ; preds = %65
  store i32 10, ptr @spelling_size, align 4, !tbaa !21
  %69 = tail call ptr @xrealloc(ptr noundef null, i64 noundef 160) #20
  store ptr %69, ptr @spelling_base, align 8, !tbaa !6
  store i32 1, ptr %69, align 8, !tbaa !120
  %70 = getelementptr inbounds %struct.spelling, ptr %69, i64 0, i32 1
  store ptr %66, ptr %70, align 8, !tbaa !17
  %71 = getelementptr inbounds %struct.spelling, ptr %69, i64 1
  store ptr %71, ptr @spelling, align 8, !tbaa !6
  br label %72

72:                                               ; preds = %68, %65
  ret void
}

declare ptr @identifier_to_locale(ptr noundef) local_unnamed_addr #3

declare ptr @xrealloc(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @finish_init() local_unnamed_addr #9 {
  %1 = load ptr, ptr @initializer_stack, align 8, !tbaa !6
  %2 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %3 = icmp eq ptr %2, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %0, %4
  %5 = phi ptr [ %6, %4 ], [ %2, %0 ]
  %6 = load ptr, ptr %5, align 8, !tbaa !141
  store ptr %6, ptr @constructor_stack, align 8, !tbaa !6
  tail call void @free(ptr noundef nonnull %5)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %4, !llvm.loop !143

8:                                                ; preds = %4, %0
  %9 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %10 = icmp eq ptr %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 6262, ptr noundef nonnull @.str.8) #20
  br label %12

12:                                               ; preds = %8, %11
  %13 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  tail call void @free(ptr noundef %13)
  %14 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !129
  store ptr %15, ptr @constructor_decl, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 9
  %17 = load i8, ptr %16, align 1, !tbaa !131
  %18 = sext i8 %17 to i32
  store i32 %18, ptr @require_constant_value, align 4, !tbaa !21
  %19 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 10
  %20 = load i8, ptr %19, align 2, !tbaa !132
  %21 = sext i8 %20 to i32
  store i32 %21, ptr @require_constant_elements, align 4, !tbaa !21
  %22 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !133
  store ptr %23, ptr @constructor_stack, align 8, !tbaa !6
  %24 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !134
  store ptr %25, ptr @constructor_range_stack, align 8, !tbaa !6
  %26 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 4
  %27 = load ptr, ptr %26, align 8, !tbaa !135
  store ptr %27, ptr @constructor_elements, align 8, !tbaa !6
  %28 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 5
  %29 = load ptr, ptr %28, align 8, !tbaa !136
  store ptr %29, ptr @spelling, align 8, !tbaa !6
  %30 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 6
  %31 = load ptr, ptr %30, align 8, !tbaa !137
  store ptr %31, ptr @spelling_base, align 8, !tbaa !6
  %32 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 7
  %33 = load i32, ptr %32, align 8, !tbaa !138
  store i32 %33, ptr @spelling_size, align 4, !tbaa !21
  %34 = getelementptr inbounds %struct.initializer_stack, ptr %1, i64 0, i32 8
  %35 = load i8, ptr %34, align 4, !tbaa !139
  %36 = sext i8 %35 to i32
  store i32 %36, ptr @constructor_top_level, align 4, !tbaa !21
  %37 = load ptr, ptr %1, align 8, !tbaa !140
  store ptr %37, ptr @initializer_stack, align 8, !tbaa !6
  tail call void @free(ptr noundef %1)
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @really_start_incremental_init(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call ptr @xmalloc(i64 noundef 128) #20
  %3 = icmp eq ptr %0, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = load ptr, ptr @constructor_decl, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  br label %8

8:                                                ; preds = %4, %1
  %9 = phi ptr [ %7, %4 ], [ %0, %1 ]
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 4295032831
  %12 = icmp eq i64 %11, 4294967310
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.185) #20
  br label %14

14:                                               ; preds = %13, %8
  %15 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 1
  store ptr %15, ptr %16, align 8, !tbaa !144
  %17 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %18 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 2
  store ptr %17, ptr %18, align 8, !tbaa !145
  %19 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %20 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 3
  store ptr %19, ptr %20, align 8, !tbaa !146
  %21 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %22 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 4
  store ptr %21, ptr %22, align 8, !tbaa !147
  %23 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %24 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 5
  store ptr %23, ptr %24, align 8, !tbaa !148
  %25 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %26 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 6
  store ptr %25, ptr %26, align 8, !tbaa !149
  %27 = load ptr, ptr @constructor_bit_index, align 8, !tbaa !6
  %28 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 7
  store ptr %27, ptr %28, align 8, !tbaa !150
  %29 = load ptr, ptr @constructor_elements, align 8, !tbaa !6
  %30 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 8
  store ptr %29, ptr %30, align 8, !tbaa !151
  %31 = load i32, ptr @constructor_constant, align 4, !tbaa !21
  %32 = trunc i32 %31 to i8
  %33 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 14
  store i8 %32, ptr %33, align 8, !tbaa !152
  %34 = load i32, ptr @constructor_simple, align 4, !tbaa !21
  %35 = trunc i32 %34 to i8
  %36 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 15
  store i8 %35, ptr %36, align 1, !tbaa !153
  %37 = load i32, ptr @constructor_nonconst, align 4, !tbaa !21
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 16
  store i8 %38, ptr %39, align 2, !tbaa !154
  %40 = load i32, ptr @constructor_erroneous, align 4, !tbaa !21
  %41 = trunc i32 %40 to i8
  %42 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 18
  store i8 %41, ptr %42, align 4, !tbaa !155
  %43 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %44 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 9
  store ptr %43, ptr %44, align 8, !tbaa !156
  %45 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %46 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 11
  store i32 %45, ptr %46, align 4, !tbaa !157
  %47 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 12
  store ptr null, ptr %47, align 8, !tbaa !158
  %48 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 12, i32 1
  store i32 0, ptr %48, align 8, !tbaa !159
  %49 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 12, i32 2
  %50 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 17
  store i8 0, ptr %50, align 1, !tbaa !160
  %51 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 19
  store i8 0, ptr %51, align 1, !tbaa !161
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %49, i8 0, i64 16, i1 false)
  %52 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %53 = trunc i32 %52 to i8
  %54 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 20
  store i8 %53, ptr %54, align 2, !tbaa !162
  %55 = load i32, ptr @constructor_designated, align 4, !tbaa !21
  %56 = trunc i32 %55 to i8
  %57 = getelementptr inbounds %struct.constructor_stack, ptr %2, i64 0, i32 21
  store i8 %56, ptr %57, align 1, !tbaa !163
  store ptr null, ptr %2, align 8, !tbaa !141
  store ptr %2, ptr @constructor_stack, align 8, !tbaa !6
  store i32 1, ptr @constructor_constant, align 4, !tbaa !21
  store i32 1, ptr @constructor_simple, align 4, !tbaa !21
  store i32 0, ptr @constructor_nonconst, align 4, !tbaa !21
  %58 = load ptr, ptr @spelling, align 8, !tbaa !6
  %59 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %60 = ptrtoint ptr %58 to i64
  %61 = ptrtoint ptr %59 to i64
  %62 = sub i64 %60, %61
  %63 = lshr exact i64 %62, 4
  %64 = trunc i64 %63 to i32
  store i32 %64, ptr @constructor_depth, align 4, !tbaa !21
  store ptr null, ptr @constructor_elements, align 8, !tbaa !6
  store ptr null, ptr @constructor_pending_elts, align 8, !tbaa !6
  store ptr %9, ptr @constructor_type, align 8, !tbaa !6
  store i32 1, ptr @constructor_incremental, align 4, !tbaa !21
  store i32 0, ptr @constructor_designated, align 4, !tbaa !21
  store i32 0, ptr @designator_depth, align 4, !tbaa !21
  store i1 false, ptr @designator_erroneous, align 4
  %65 = load i64, ptr %9, align 8
  %66 = trunc i64 %65 to i16
  switch i16 %66, label %131 [
    i16 16, label %67
    i16 17, label %67
    i16 15, label %88
    i16 14, label %122
  ]

67:                                               ; preds = %14, %14
  %68 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 1
  %69 = load ptr, ptr %68, align 8, !tbaa !17
  %70 = icmp eq ptr %69, null
  br i1 %70, label %85, label %71

71:                                               ; preds = %67, %81
  %72 = phi ptr [ %83, %81 ], [ %69, %67 ]
  %73 = getelementptr inbounds %struct.tree_decl_common, ptr %72, i64 0, i32 2
  %74 = load i64, ptr %73, align 8
  %75 = and i64 %74, 524288
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %85, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.tree_decl_minimal, ptr %72, i64 0, i32 3
  %79 = load ptr, ptr %78, align 8, !tbaa !17
  %80 = icmp eq ptr %79, null
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.tree_common, ptr %72, i64 0, i32 1
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = icmp eq ptr %83, null
  br i1 %84, label %85, label %71, !llvm.loop !164

85:                                               ; preds = %77, %81, %71, %67
  %86 = phi ptr [ null, %67 ], [ %72, %71 ], [ null, %81 ], [ %72, %77 ]
  store ptr %86, ptr @constructor_fields, align 8, !tbaa !6
  store ptr %86, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %87 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %87, ptr @constructor_bit_index, align 8, !tbaa !6
  br label %132

88:                                               ; preds = %14
  %89 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !17
  %91 = icmp eq ptr %90, null
  br i1 %91, label %118, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.tree_type, ptr %90, i64 0, i32 14
  %94 = load ptr, ptr %93, align 8, !tbaa !17
  store ptr %94, ptr @constructor_max_index, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %96, label %103

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 2
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  %99 = icmp eq ptr %98, null
  br i1 %99, label %110, label %100

100:                                              ; preds = %96
  %101 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef -1) #20
  store ptr %101, ptr @constructor_max_index, align 8, !tbaa !6
  %102 = icmp eq ptr %101, null
  br i1 %102, label %110, label %103

103:                                              ; preds = %92, %100
  %104 = phi ptr [ %101, %100 ], [ %94, %92 ]
  %105 = load i64, ptr %104, align 8
  %106 = and i64 %105, 65535
  %107 = icmp eq i64 %106, 23
  br i1 %107, label %110, label %108

108:                                              ; preds = %103
  %109 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef -1) #20
  store ptr %109, ptr @constructor_max_index, align 8, !tbaa !6
  br label %110

110:                                              ; preds = %96, %108, %103, %100
  %111 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %112 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %113 = getelementptr inbounds %struct.tree_type, ptr %112, i64 0, i32 1
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = getelementptr inbounds %struct.tree_type, ptr %114, i64 0, i32 13
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = tail call ptr @convert(ptr noundef %111, ptr noundef %116) #20
  store ptr %117, ptr @constructor_index, align 8, !tbaa !6
  br label %120

118:                                              ; preds = %88
  %119 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %119, ptr @constructor_index, align 8, !tbaa !6
  store ptr null, ptr @constructor_max_index, align 8, !tbaa !6
  br label %120

120:                                              ; preds = %118, %110
  %121 = phi ptr [ %119, %118 ], [ %117, %110 ]
  store ptr %121, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %132

122:                                              ; preds = %14
  %123 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %124 = load i32, ptr %123, align 4
  %125 = and i32 %124, 1023
  %126 = zext i32 %125 to i64
  %127 = shl nsw i64 -1, %126
  %128 = xor i64 %127, -1
  %129 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef %128) #20
  store ptr %129, ptr @constructor_max_index, align 8, !tbaa !6
  %130 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %130, ptr @constructor_index, align 8, !tbaa !6
  store ptr %130, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %132

131:                                              ; preds = %14
  store ptr %9, ptr @constructor_fields, align 8, !tbaa !6
  store ptr %9, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %132

132:                                              ; preds = %120, %131, %122, %85
  ret void
}

declare ptr @build_int_cst(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @push_init_level(i32 noundef %0) local_unnamed_addr #9 {
  %2 = alloca [2 x i64], align 16
  %3 = alloca %struct.c_expr, align 8
  %4 = alloca %struct.c_expr, align 8
  %5 = icmp eq i32 %0, 1
  br i1 %5, label %43, label %6

6:                                                ; preds = %1
  %7 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %8 = getelementptr inbounds %struct.constructor_stack, ptr %7, i64 0, i32 17
  %9 = load i8, ptr %8, align 1, !tbaa !160
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %41, label %11

11:                                               ; preds = %6, %35
  %12 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %13 = load i64, ptr %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 65535
  %16 = icmp eq i32 %15, 16
  br i1 %16, label %22, label %17

17:                                               ; preds = %11
  %18 = icmp eq i32 %15, 17
  %19 = load ptr, ptr @constructor_fields, align 8
  %20 = icmp eq ptr %19, null
  %21 = select i1 %18, i1 %20, i1 false
  br i1 %21, label %35, label %25

22:                                               ; preds = %11
  %23 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %24 = icmp eq ptr %23, null
  br i1 %24, label %35, label %25

25:                                               ; preds = %22, %17
  %26 = and i64 %13, 65535
  %27 = icmp eq i64 %26, 15
  %28 = load ptr, ptr @constructor_max_index, align 8
  %29 = icmp ne ptr %28, null
  %30 = select i1 %27, i1 %29, i1 false
  br i1 %30, label %31, label %41

31:                                               ; preds = %25
  %32 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %33 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %28, ptr noundef %32) #20
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %31, %22, %17
  %36 = phi ptr [ %3, %17 ], [ %3, %22 ], [ %4, %31 ]
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %36, i32 noundef 1)
  tail call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %36, i8 noundef zeroext 1)
  %37 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %38 = getelementptr inbounds %struct.constructor_stack, ptr %37, i64 0, i32 17
  %39 = load i8, ptr %38, align 1, !tbaa !160
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %11, !llvm.loop !165

41:                                               ; preds = %25, %31, %35, %6
  %42 = icmp eq i32 %0, 0
  br i1 %42, label %66, label %43

43:                                               ; preds = %1, %41
  %44 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %45 = load i64, ptr %44, align 8
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 65535
  %48 = icmp eq i32 %47, 16
  br i1 %48, label %54, label %49

49:                                               ; preds = %43
  %50 = icmp eq i32 %47, 17
  %51 = load ptr, ptr @constructor_fields, align 8
  %52 = icmp ne ptr %51, null
  %53 = select i1 %50, i1 %52, i1 false
  br i1 %53, label %57, label %60

54:                                               ; preds = %43
  %55 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %56 = icmp eq ptr %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %49, %54
  %58 = phi ptr [ %51, %49 ], [ %55, %54 ]
  %59 = tail call fastcc ptr @find_init_member(ptr noundef nonnull %58)
  br label %66

60:                                               ; preds = %54, %49
  %61 = and i64 %45, 65535
  %62 = icmp eq i64 %61, 15
  br i1 %62, label %63, label %66

63:                                               ; preds = %60
  %64 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %65 = tail call fastcc ptr @find_init_member(ptr noundef %64)
  br label %66

66:                                               ; preds = %57, %63, %60, %41
  %67 = phi i1 [ false, %57 ], [ false, %63 ], [ false, %60 ], [ true, %41 ]
  %68 = phi ptr [ %59, %57 ], [ %65, %63 ], [ null, %60 ], [ null, %41 ]
  %69 = tail call ptr @xmalloc(i64 noundef 128) #20
  %70 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %71 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 1
  store ptr %70, ptr %71, align 8, !tbaa !144
  %72 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %73 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 2
  store ptr %72, ptr %73, align 8, !tbaa !145
  %74 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %75 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 3
  store ptr %74, ptr %75, align 8, !tbaa !146
  %76 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %77 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 4
  store ptr %76, ptr %77, align 8, !tbaa !147
  %78 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %79 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 5
  store ptr %78, ptr %79, align 8, !tbaa !148
  %80 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %81 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 6
  store ptr %80, ptr %81, align 8, !tbaa !149
  %82 = load ptr, ptr @constructor_bit_index, align 8, !tbaa !6
  %83 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 7
  store ptr %82, ptr %83, align 8, !tbaa !150
  %84 = load ptr, ptr @constructor_elements, align 8, !tbaa !6
  %85 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 8
  store ptr %84, ptr %85, align 8, !tbaa !151
  %86 = load i32, ptr @constructor_constant, align 4, !tbaa !21
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 14
  store i8 %87, ptr %88, align 8, !tbaa !152
  %89 = load i32, ptr @constructor_simple, align 4, !tbaa !21
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 15
  store i8 %90, ptr %91, align 1, !tbaa !153
  %92 = load i32, ptr @constructor_nonconst, align 4, !tbaa !21
  %93 = trunc i32 %92 to i8
  %94 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 16
  store i8 %93, ptr %94, align 2, !tbaa !154
  %95 = load i32, ptr @constructor_erroneous, align 4, !tbaa !21
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 18
  store i8 %96, ptr %97, align 4, !tbaa !155
  %98 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %99 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 9
  store ptr %98, ptr %99, align 8, !tbaa !156
  %100 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %101 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 11
  store i32 %100, ptr %101, align 4, !tbaa !157
  %102 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 12
  store ptr null, ptr %102, align 8, !tbaa !158
  %103 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 12, i32 1
  store i32 0, ptr %103, align 8, !tbaa !159
  %104 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 12, i32 2
  store ptr null, ptr %104, align 8, !tbaa !166
  %105 = trunc i32 %0 to i8
  %106 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 17
  store i8 %105, ptr %106, align 1, !tbaa !160
  %107 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 19
  store i8 0, ptr %107, align 1, !tbaa !161
  %108 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 20
  store i8 %109, ptr %110, align 2, !tbaa !162
  %111 = load i32, ptr @constructor_designated, align 4, !tbaa !21
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 21
  store i8 %112, ptr %113, align 1, !tbaa !163
  %114 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  store ptr %114, ptr %69, align 8, !tbaa !141
  %115 = getelementptr inbounds %struct.constructor_stack, ptr %69, i64 0, i32 13
  store ptr null, ptr %115, align 8, !tbaa !167
  store ptr %69, ptr @constructor_stack, align 8, !tbaa !6
  store i32 1, ptr @constructor_constant, align 4, !tbaa !21
  store i32 1, ptr @constructor_simple, align 4, !tbaa !21
  store i32 0, ptr @constructor_nonconst, align 4, !tbaa !21
  %116 = load ptr, ptr @spelling, align 8, !tbaa !6
  %117 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %118 = ptrtoint ptr %116 to i64
  %119 = ptrtoint ptr %117 to i64
  %120 = sub i64 %118, %119
  %121 = lshr exact i64 %120, 4
  %122 = trunc i64 %121 to i32
  store i32 %122, ptr @constructor_depth, align 4, !tbaa !21
  store ptr null, ptr @constructor_elements, align 8, !tbaa !6
  store i32 1, ptr @constructor_incremental, align 4, !tbaa !21
  store i32 0, ptr @constructor_designated, align 4, !tbaa !21
  store ptr null, ptr @constructor_pending_elts, align 8, !tbaa !6
  br i1 %67, label %123, label %125

123:                                              ; preds = %66
  %124 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  store ptr %124, ptr %115, align 8, !tbaa !167
  store ptr null, ptr @constructor_range_stack, align 8, !tbaa !6
  store i32 0, ptr @designator_depth, align 4, !tbaa !21
  store i1 false, ptr @designator_erroneous, align 4
  br label %125

125:                                              ; preds = %123, %66
  %126 = icmp eq ptr %70, null
  br i1 %126, label %198, label %127

127:                                              ; preds = %125
  %128 = load i64, ptr %70, align 8
  %129 = trunc i64 %128 to i16
  switch i16 %129, label %198 [
    i16 16, label %130
    i16 17, label %130
    i16 15, label %169
  ]

130:                                              ; preds = %127, %127
  %131 = icmp eq ptr %72, null
  br i1 %131, label %132, label %133

132:                                              ; preds = %130
  store ptr null, ptr @constructor_type, align 8, !tbaa !6
  br label %201

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.tree_common, ptr %72, i64 0, i32 2
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  store ptr %135, ptr @constructor_type, align 8, !tbaa !6
  %136 = getelementptr i8, ptr %72, i64 32
  %137 = load ptr, ptr %136, align 8, !tbaa !17
  %138 = icmp eq ptr %137, null
  br i1 %138, label %150, label %139

139:                                              ; preds = %133
  %140 = getelementptr inbounds %struct.tree_identifier, ptr %137, i64 0, i32 1
  %141 = load ptr, ptr %140, align 8, !tbaa !17
  %142 = tail call ptr @identifier_to_locale(ptr noundef %141) #20
  %143 = load ptr, ptr @spelling, align 8, !tbaa !6
  %144 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %145 = ptrtoint ptr %143 to i64
  %146 = ptrtoint ptr %144 to i64
  %147 = sub i64 %145, %146
  %148 = lshr exact i64 %147, 4
  %149 = trunc i64 %148 to i32
  br label %150

150:                                              ; preds = %139, %133
  %151 = phi i32 [ %149, %139 ], [ %122, %133 ]
  %152 = phi i64 [ %147, %139 ], [ %120, %133 ]
  %153 = phi ptr [ %144, %139 ], [ %117, %133 ]
  %154 = phi ptr [ %143, %139 ], [ %116, %133 ]
  %155 = phi ptr [ %142, %139 ], [ @.str.189, %133 ]
  %156 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %157 = icmp sgt i32 %156, %151
  br i1 %157, label %166, label %158

158:                                              ; preds = %150
  %159 = add nsw i32 %156, 10
  store i32 %159, ptr @spelling_size, align 4, !tbaa !21
  %160 = sext i32 %159 to i64
  %161 = shl nsw i64 %160, 4
  %162 = tail call ptr @xrealloc(ptr noundef %153, i64 noundef %161) #20
  store ptr %162, ptr @spelling_base, align 8, !tbaa !6
  %163 = shl i64 %152, 28
  %164 = ashr i64 %163, 32
  %165 = getelementptr inbounds %struct.spelling, ptr %162, i64 %164
  br label %166

166:                                              ; preds = %150, %158
  %167 = phi ptr [ %165, %158 ], [ %154, %150 ]
  store i32 2, ptr %167, align 8, !tbaa !120
  %168 = getelementptr inbounds %struct.spelling, ptr %167, i64 0, i32 1
  store ptr %155, ptr %168, align 8, !tbaa !17
  br label %193

169:                                              ; preds = %127
  %170 = getelementptr inbounds %struct.tree_common, ptr %70, i64 0, i32 2
  %171 = load ptr, ptr %170, align 8, !tbaa !17
  store ptr %171, ptr @constructor_type, align 8, !tbaa !6
  %172 = tail call i64 @tree_low_cst(ptr noundef %74, i32 noundef 1) #20
  %173 = load ptr, ptr @spelling, align 8, !tbaa !6
  %174 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %175 = ptrtoint ptr %173 to i64
  %176 = ptrtoint ptr %174 to i64
  %177 = sub i64 %175, %176
  %178 = lshr exact i64 %177, 4
  %179 = trunc i64 %178 to i32
  %180 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %181 = icmp sgt i32 %180, %179
  br i1 %181, label %190, label %182

182:                                              ; preds = %169
  %183 = add nsw i32 %180, 10
  store i32 %183, ptr @spelling_size, align 4, !tbaa !21
  %184 = sext i32 %183 to i64
  %185 = shl nsw i64 %184, 4
  %186 = tail call ptr @xrealloc(ptr noundef %174, i64 noundef %185) #20
  store ptr %186, ptr @spelling_base, align 8, !tbaa !6
  %187 = shl i64 %177, 28
  %188 = ashr i64 %187, 32
  %189 = getelementptr inbounds %struct.spelling, ptr %186, i64 %188
  br label %190

190:                                              ; preds = %169, %182
  %191 = phi ptr [ %189, %182 ], [ %173, %169 ]
  store i32 3, ptr %191, align 8, !tbaa !120
  %192 = getelementptr inbounds %struct.spelling, ptr %191, i64 0, i32 1
  store i64 %172, ptr %192, align 8, !tbaa !17
  br label %193

193:                                              ; preds = %190, %166
  %194 = phi ptr [ %167, %166 ], [ %191, %190 ]
  %195 = getelementptr inbounds %struct.spelling, ptr %194, i64 1
  store ptr %195, ptr @spelling, align 8, !tbaa !6
  %196 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %197 = add nsw i32 %196, 1
  store i32 %197, ptr @constructor_depth, align 4, !tbaa !21
  br label %198

198:                                              ; preds = %193, %127, %125
  %199 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %200 = icmp eq ptr %199, null
  br i1 %200, label %201, label %202

201:                                              ; preds = %132, %198
  tail call void @error_init(ptr noundef nonnull @.str.186)
  store ptr null, ptr @constructor_fields, align 8, !tbaa !6
  store ptr null, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %462

202:                                              ; preds = %198
  %203 = icmp eq ptr %68, null
  br i1 %203, label %230, label %204

204:                                              ; preds = %202
  %205 = load i64, ptr %68, align 8
  %206 = and i64 %205, 65535
  %207 = icmp eq i64 %206, 51
  br i1 %207, label %208, label %230

208:                                              ; preds = %204
  %209 = trunc i64 %205 to i32
  %210 = lshr i32 %209, 17
  %211 = and i32 %210, 1
  store i32 %211, ptr @constructor_constant, align 4, !tbaa !21
  %212 = lshr i32 %209, 26
  %213 = and i32 %212, 1
  store i32 %213, ptr @constructor_simple, align 4, !tbaa !21
  %214 = lshr i64 %205, 34
  %215 = trunc i64 %214 to i32
  %216 = and i32 %215, 1
  store i32 %216, ptr @constructor_nonconst, align 4, !tbaa !21
  %217 = getelementptr inbounds %struct.tree_constructor, ptr %68, i64 0, i32 1
  %218 = load ptr, ptr %217, align 8, !tbaa !17
  store ptr %218, ptr @constructor_elements, align 8, !tbaa !6
  %219 = icmp eq ptr %218, null
  br i1 %219, label %230, label %220

220:                                              ; preds = %208
  %221 = load i32, ptr %218, align 8, !tbaa !113
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %230, label %223

223:                                              ; preds = %220
  %224 = load i64, ptr %199, align 8
  %225 = trunc i64 %224 to i32
  %226 = and i32 %225, 65535
  %227 = add nsw i32 %226, -15
  %228 = icmp ult i32 %227, 2
  br i1 %228, label %229, label %230

229:                                              ; preds = %223
  tail call fastcc void @set_nonincremental_init()
  br label %230

230:                                              ; preds = %208, %223, %220, %229, %204, %202
  %231 = icmp ne i32 %0, 1
  %232 = load i32, ptr @warn_missing_braces, align 4
  %233 = icmp eq i32 %232, 0
  %234 = select i1 %231, i1 true, i1 %233
  %235 = load i1, ptr @missing_braces_mentioned, align 4
  %236 = select i1 %234, i1 true, i1 %235
  br i1 %236, label %238, label %237

237:                                              ; preds = %230
  store i1 true, ptr @missing_braces_mentioned, align 4
  tail call fastcc void @warning_init(i32 noundef 128, ptr noundef nonnull @.str.187)
  br label %238

238:                                              ; preds = %237, %230
  %239 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %240 = load i64, ptr %239, align 8
  %241 = trunc i64 %240 to i16
  switch i16 %241, label %455 [
    i16 16, label %242
    i16 17, label %242
    i16 14, label %263
    i16 15, label %274
  ]

242:                                              ; preds = %238, %238
  %243 = getelementptr inbounds %struct.tree_type, ptr %239, i64 0, i32 1
  %244 = load ptr, ptr %243, align 8, !tbaa !17
  %245 = icmp eq ptr %244, null
  br i1 %245, label %260, label %246

246:                                              ; preds = %242, %256
  %247 = phi ptr [ %258, %256 ], [ %244, %242 ]
  %248 = getelementptr inbounds %struct.tree_decl_common, ptr %247, i64 0, i32 2
  %249 = load i64, ptr %248, align 8
  %250 = and i64 %249, 524288
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %246
  %253 = getelementptr inbounds %struct.tree_decl_minimal, ptr %247, i64 0, i32 3
  %254 = load ptr, ptr %253, align 8, !tbaa !17
  %255 = icmp eq ptr %254, null
  br i1 %255, label %256, label %260

256:                                              ; preds = %252
  %257 = getelementptr inbounds %struct.tree_common, ptr %247, i64 0, i32 1
  %258 = load ptr, ptr %257, align 8, !tbaa !17
  %259 = icmp eq ptr %258, null
  br i1 %259, label %260, label %246, !llvm.loop !168

260:                                              ; preds = %252, %256, %246, %242
  %261 = phi ptr [ null, %242 ], [ %247, %246 ], [ null, %256 ], [ %247, %252 ]
  store ptr %261, ptr @constructor_fields, align 8, !tbaa !6
  store ptr %261, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %262 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %262, ptr @constructor_bit_index, align 8, !tbaa !6
  br label %462

263:                                              ; preds = %238
  %264 = getelementptr inbounds %struct.tree_type, ptr %239, i64 0, i32 6
  %265 = load i32, ptr %264, align 4
  %266 = and i32 %265, 1023
  %267 = zext i32 %266 to i64
  %268 = shl nsw i64 -1, %267
  %269 = xor i64 %268, -1
  %270 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef %269) #20
  store ptr %270, ptr @constructor_max_index, align 8, !tbaa !6
  %271 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %272 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %273 = tail call ptr @convert(ptr noundef %271, ptr noundef %272) #20
  store ptr %273, ptr @constructor_index, align 8, !tbaa !6
  store ptr %273, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %462

274:                                              ; preds = %238
  %275 = getelementptr inbounds %struct.tree_type, ptr %239, i64 0, i32 1
  %276 = load ptr, ptr %275, align 8, !tbaa !17
  %277 = icmp eq ptr %276, null
  br i1 %277, label %304, label %278

278:                                              ; preds = %274
  %279 = getelementptr inbounds %struct.tree_type, ptr %276, i64 0, i32 14
  %280 = load ptr, ptr %279, align 8, !tbaa !17
  store ptr %280, ptr @constructor_max_index, align 8, !tbaa !6
  %281 = icmp eq ptr %280, null
  br i1 %281, label %282, label %289

282:                                              ; preds = %278
  %283 = getelementptr inbounds %struct.tree_type, ptr %239, i64 0, i32 2
  %284 = load ptr, ptr %283, align 8, !tbaa !17
  %285 = icmp eq ptr %284, null
  br i1 %285, label %296, label %286

286:                                              ; preds = %282
  %287 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef -1) #20
  store ptr %287, ptr @constructor_max_index, align 8, !tbaa !6
  %288 = icmp eq ptr %287, null
  br i1 %288, label %296, label %289

289:                                              ; preds = %278, %286
  %290 = phi ptr [ %287, %286 ], [ %280, %278 ]
  %291 = load i64, ptr %290, align 8
  %292 = and i64 %291, 65535
  %293 = icmp eq i64 %292, 23
  br i1 %293, label %296, label %294

294:                                              ; preds = %289
  %295 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef -1) #20
  store ptr %295, ptr @constructor_max_index, align 8, !tbaa !6
  br label %296

296:                                              ; preds = %282, %294, %289, %286
  %297 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %298 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %299 = getelementptr inbounds %struct.tree_type, ptr %298, i64 0, i32 1
  %300 = load ptr, ptr %299, align 8, !tbaa !17
  %301 = getelementptr inbounds %struct.tree_type, ptr %300, i64 0, i32 13
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  %303 = tail call ptr @convert(ptr noundef %297, ptr noundef %302) #20
  br label %306

304:                                              ; preds = %274
  %305 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  br label %306

306:                                              ; preds = %304, %296
  %307 = phi ptr [ %305, %304 ], [ %303, %296 ]
  store ptr %307, ptr @constructor_index, align 8, !tbaa !6
  store ptr %307, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br i1 %203, label %462, label %308

308:                                              ; preds = %306
  %309 = load i64, ptr %68, align 8
  %310 = and i64 %309, 65535
  %311 = icmp eq i64 %310, 28
  br i1 %311, label %312, label %462

312:                                              ; preds = %308
  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %2) #20
  %313 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %314 = load i64, ptr %313, align 8
  %315 = and i64 %314, 65535
  %316 = icmp eq i64 %315, 15
  br i1 %316, label %319, label %317

317:                                              ; preds = %312
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 7257, ptr noundef nonnull @.str.8) #20
  %318 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  br label %319

319:                                              ; preds = %317, %312
  %320 = phi ptr [ %313, %312 ], [ %318, %317 ]
  %321 = getelementptr inbounds %struct.tree_common, ptr %68, i64 0, i32 2
  %322 = load ptr, ptr %321, align 8, !tbaa !17
  %323 = getelementptr inbounds %struct.tree_common, ptr %322, i64 0, i32 2
  %324 = load ptr, ptr %323, align 8, !tbaa !17
  %325 = getelementptr inbounds %struct.tree_type, ptr %324, i64 0, i32 6
  %326 = load i32, ptr %325, align 4
  %327 = lshr i32 %326, 3
  %328 = and i32 %327, 127
  %329 = load ptr, ptr @integer_types, align 16, !tbaa !6
  %330 = getelementptr inbounds %struct.tree_type, ptr %329, i64 0, i32 6
  %331 = load i32, ptr %330, align 4
  %332 = and i32 %331, 1023
  %333 = getelementptr inbounds %struct.tree_common, ptr %320, i64 0, i32 2
  %334 = load ptr, ptr %333, align 8, !tbaa !17
  %335 = getelementptr inbounds %struct.tree_string, ptr %68, i64 0, i32 2
  %336 = getelementptr inbounds %struct.tree_string, ptr %68, i64 0, i32 1
  %337 = load i32, ptr %336, align 8, !tbaa !17
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i8, ptr %335, i64 %338
  %340 = icmp sgt i32 %337, 0
  br i1 %340, label %341, label %454

341:                                              ; preds = %319
  %342 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  %343 = icmp eq i32 %328, 1
  %344 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 1
  %345 = add nsw i32 %328, -1
  %346 = mul nsw i32 %345, %332
  %347 = add nsw i32 %346, 8
  %348 = icmp slt i32 %346, 56
  %349 = icmp eq i32 %347, 64
  %350 = add nsw i32 %346, -57
  %351 = zext i32 %350 to i64
  %352 = shl nuw i64 1, %351
  %353 = add nsw i32 %346, -56
  %354 = zext i32 %353 to i64
  %355 = shl nsw i64 -1, %354
  %356 = add nsw i32 %346, 7
  %357 = zext i32 %356 to i64
  %358 = shl nuw i64 1, %357
  %359 = zext i32 %347 to i64
  %360 = shl nsw i64 -1, %359
  %361 = and i32 %327, 1
  %362 = icmp eq i32 %328, 1
  %363 = sub nsw i32 %328, %361
  %364 = icmp eq i32 %361, 0
  br label %365

365:                                              ; preds = %447, %341
  %366 = phi ptr [ %342, %341 ], [ %452, %447 ]
  %367 = phi ptr [ %335, %341 ], [ %425, %447 ]
  %368 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %369 = tail call i32 @tree_int_cst_lt(ptr noundef %368, ptr noundef %366) #20
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %454

371:                                              ; preds = %365
  br i1 %343, label %372, label %376

372:                                              ; preds = %371
  %373 = getelementptr inbounds i8, ptr %367, i64 1
  %374 = load i8, ptr %367, align 1, !tbaa !17
  %375 = zext i8 %374 to i64
  store i64 %375, ptr %344, align 8, !tbaa !169
  store i64 0, ptr %2, align 16, !tbaa !169
  br label %424

376:                                              ; preds = %371
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %2, i8 0, i64 16, i1 false)
  %377 = icmp eq i32 %328, 0
  br i1 %377, label %424, label %378

378:                                              ; preds = %376, %378
  %379 = phi ptr [ %396, %378 ], [ %367, %376 ]
  %380 = phi i32 [ %407, %378 ], [ 0, %376 ]
  %381 = phi i32 [ %408, %378 ], [ 0, %376 ]
  %382 = mul nuw nsw i32 %380, %332
  %383 = getelementptr inbounds i8, ptr %379, i64 1
  %384 = load i8, ptr %379, align 1, !tbaa !17
  %385 = zext i8 %384 to i64
  %386 = and i32 %382, 62
  %387 = zext i32 %386 to i64
  %388 = shl i64 %385, %387
  %389 = icmp ult i32 %382, 64
  %390 = zext i1 %389 to i64
  %391 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 %390
  %392 = load i64, ptr %391, align 8, !tbaa !169
  %393 = or i64 %388, %392
  store i64 %393, ptr %391, align 8, !tbaa !169
  %394 = or i32 %380, 1
  %395 = mul nuw nsw i32 %394, %332
  %396 = getelementptr inbounds i8, ptr %379, i64 2
  %397 = load i8, ptr %383, align 1, !tbaa !17
  %398 = zext i8 %397 to i64
  %399 = and i32 %395, 63
  %400 = zext i32 %399 to i64
  %401 = shl i64 %398, %400
  %402 = icmp ult i32 %395, 64
  %403 = zext i1 %402 to i64
  %404 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 %403
  %405 = load i64, ptr %404, align 8, !tbaa !169
  %406 = or i64 %401, %405
  store i64 %406, ptr %404, align 8, !tbaa !169
  %407 = add nuw nsw i32 %380, 2
  %408 = add i32 %381, 2
  %409 = icmp eq i32 %408, %363
  br i1 %409, label %410, label %378, !llvm.loop !170

410:                                              ; preds = %378
  br i1 %364, label %424, label %411

411:                                              ; preds = %410
  %412 = mul nuw nsw i32 %407, %332
  %413 = getelementptr inbounds i8, ptr %396, i64 1
  %414 = load i8, ptr %396, align 1, !tbaa !17
  %415 = zext i8 %414 to i64
  %416 = and i32 %412, 63
  %417 = zext i32 %416 to i64
  %418 = shl i64 %415, %417
  %419 = icmp ult i32 %412, 64
  %420 = zext i1 %419 to i64
  %421 = getelementptr inbounds [2 x i64], ptr %2, i64 0, i64 %420
  %422 = load i64, ptr %421, align 8, !tbaa !169
  %423 = or i64 %418, %422
  store i64 %423, ptr %421, align 8, !tbaa !169
  br label %424

424:                                              ; preds = %376, %411, %410, %372
  %425 = phi ptr [ %373, %372 ], [ %367, %376 ], [ %396, %410 ], [ %413, %411 ]
  %426 = load i64, ptr %334, align 8
  %427 = and i64 %426, 2097152
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %447

429:                                              ; preds = %424
  br i1 %348, label %430, label %436

430:                                              ; preds = %429
  %431 = load i64, ptr %344, align 8, !tbaa !169
  %432 = and i64 %431, %358
  %433 = icmp eq i64 %432, 0
  br i1 %433, label %447, label %434

434:                                              ; preds = %430
  %435 = or i64 %431, %360
  store i64 %435, ptr %344, align 8, !tbaa !169
  store i64 -1, ptr %2, align 16, !tbaa !169
  br label %447

436:                                              ; preds = %429
  br i1 %349, label %437, label %441

437:                                              ; preds = %436
  %438 = load i64, ptr %344, align 8, !tbaa !169
  %439 = icmp slt i64 %438, 0
  br i1 %439, label %440, label %447

440:                                              ; preds = %437
  store i64 -1, ptr %2, align 16, !tbaa !169
  br label %447

441:                                              ; preds = %436
  %442 = load i64, ptr %2, align 16, !tbaa !169
  %443 = and i64 %442, %352
  %444 = icmp eq i64 %443, 0
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = or i64 %442, %355
  store i64 %446, ptr %2, align 16, !tbaa !169
  br label %447

447:                                              ; preds = %445, %441, %440, %437, %434, %430, %424
  %448 = load i64, ptr %344, align 8, !tbaa !169
  %449 = load i64, ptr %2, align 16, !tbaa !169
  %450 = tail call ptr @build_int_cst_wide(ptr noundef nonnull %334, i64 noundef %448, i64 noundef %449) #20
  tail call fastcc void @add_pending_init(ptr noundef %366, ptr noundef %450, ptr noundef null, i8 noundef zeroext 0)
  %451 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 20), align 16, !tbaa !6
  %452 = tail call ptr @size_binop_loc(i32 noundef 0, i32 noundef 63, ptr noundef %366, ptr noundef %451) #20
  %453 = icmp ult ptr %425, %339
  br i1 %453, label %365, label %454, !llvm.loop !171

454:                                              ; preds = %365, %447, %319
  store i32 0, ptr @constructor_incremental, align 4, !tbaa !21
  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %2) #20
  br label %462

455:                                              ; preds = %238
  %456 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %457 = icmp eq ptr %239, %456
  br i1 %457, label %460, label %458

458:                                              ; preds = %455
  tail call fastcc void @warning_init(i32 noundef 0, ptr noundef nonnull @.str.188)
  %459 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  br label %460

460:                                              ; preds = %458, %455
  %461 = phi ptr [ %459, %458 ], [ %239, %455 ]
  store ptr %461, ptr @constructor_fields, align 8, !tbaa !6
  store ptr %461, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %462

462:                                              ; preds = %260, %460, %454, %308, %306, %263, %201
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @process_init_element(ptr nocapture noundef byval(%struct.c_expr) align 8 %0, i8 noundef zeroext %1) local_unnamed_addr #9 {
  %3 = alloca %struct.c_expr, align 8
  %4 = alloca %struct.c_expr, align 8
  %5 = alloca %struct.expanded_location, align 8
  %6 = alloca %struct.c_expr, align 8
  %7 = alloca %struct.c_expr, align 8
  %8 = load ptr, ptr %0, align 8, !tbaa !64
  %9 = icmp eq ptr %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %2
  %11 = load i64, ptr %8, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 28
  br label %14

14:                                               ; preds = %10, %2
  %15 = phi i1 [ false, %2 ], [ %13, %10 ]
  %16 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  %17 = load i32, ptr %16, align 8, !tbaa !97
  %18 = icmp eq i32 %17, 28
  %19 = zext i1 %18 to i8
  store i32 0, ptr @designator_depth, align 4, !tbaa !21
  store i1 false, ptr @designator_erroneous, align 4
  %20 = load ptr, ptr @constructor_type, align 8
  %21 = icmp ne ptr %20, null
  %22 = select i1 %15, i1 %21, i1 false
  br i1 %22, label %23, label %49

23:                                               ; preds = %14
  %24 = load i64, ptr %20, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 15
  br i1 %26, label %27, label %49

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.tree_common, ptr %20, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = load i64, ptr %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 65535
  %33 = add nsw i32 %32, -6
  %34 = icmp ult i32 %33, 3
  br i1 %34, label %35, label %49

35:                                               ; preds = %27
  %36 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %37 = tail call i32 @integer_zerop(ptr noundef %36) #20
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %35
  %40 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %41 = getelementptr inbounds %struct.constructor_stack, ptr %40, i64 0, i32 12
  %42 = load ptr, ptr %41, align 8, !tbaa !158
  %43 = icmp eq ptr %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  tail call void @error_init(ptr noundef nonnull @.str.205)
  %45 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  br label %46

46:                                               ; preds = %44, %39
  %47 = phi ptr [ %45, %44 ], [ %40, %39 ]
  %48 = getelementptr inbounds %struct.constructor_stack, ptr %47, i64 0, i32 12
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %48, ptr noundef nonnull align 8 dereferenceable(24) %0, i64 24, i1 false), !tbaa.struct !172
  br label %634

49:                                               ; preds = %27, %35, %23, %14
  %50 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %51 = getelementptr inbounds %struct.constructor_stack, ptr %50, i64 0, i32 12
  %52 = load ptr, ptr %51, align 8, !tbaa !158
  %53 = icmp eq ptr %52, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %49
  tail call void @error_init(ptr noundef nonnull @.str.206)
  br label %634

55:                                               ; preds = %49
  %56 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %57 = icmp eq ptr %56, null
  br i1 %57, label %634, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %struct.constructor_stack, ptr %50, i64 0, i32 17
  %60 = load i8, ptr %59, align 1, !tbaa !160
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %92, label %62

62:                                               ; preds = %58, %86
  %63 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %64 = load i64, ptr %63, align 8
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 65535
  %67 = icmp eq i32 %66, 16
  br i1 %67, label %73, label %68

68:                                               ; preds = %62
  %69 = icmp eq i32 %66, 17
  %70 = load ptr, ptr @constructor_fields, align 8
  %71 = icmp eq ptr %70, null
  %72 = select i1 %69, i1 %71, i1 false
  br i1 %72, label %86, label %76

73:                                               ; preds = %62
  %74 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %75 = icmp eq ptr %74, null
  br i1 %75, label %86, label %92

76:                                               ; preds = %68
  %77 = and i32 %65, 65534
  %78 = icmp eq i32 %77, 14
  br i1 %78, label %79, label %92

79:                                               ; preds = %76
  %80 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %81 = icmp eq ptr %80, null
  br i1 %81, label %86, label %82

82:                                               ; preds = %79
  %83 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %84 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %80, ptr noundef %83) #20
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %79, %82, %73, %68
  %87 = phi ptr [ %3, %68 ], [ %3, %73 ], [ %4, %82 ], [ %4, %79 ]
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %87, i32 noundef 1)
  tail call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %87, i8 noundef zeroext 1)
  %88 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %89 = getelementptr inbounds %struct.constructor_stack, ptr %88, i64 0, i32 17
  %90 = load i8, ptr %89, align 1, !tbaa !160
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %62, !llvm.loop !173

92:                                               ; preds = %86, %82, %76, %73, %58
  %93 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %94 = icmp eq ptr %93, null
  br i1 %94, label %121, label %95

95:                                               ; preds = %92
  %96 = load i64, ptr %8, align 8
  %97 = trunc i64 %96 to i32
  %98 = and i32 %97, 65535
  %99 = icmp ne i32 %98, 119
  %100 = load i32, ptr @require_constant_value, align 4
  %101 = icmp eq i32 %100, 0
  %102 = select i1 %99, i1 true, i1 %101
  %103 = load i32, ptr @flag_isoc99, align 4
  %104 = icmp ne i32 %103, 0
  %105 = select i1 %102, i1 true, i1 %104
  br i1 %105, label %106, label %121

106:                                              ; preds = %95
  %107 = icmp eq i32 %98, 190
  br i1 %107, label %110, label %108

108:                                              ; preds = %106
  %109 = tail call ptr @c_save_expr(ptr noundef nonnull %8) #20
  br label %119

110:                                              ; preds = %106
  %111 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %112 = load ptr, ptr %111, align 8, !tbaa !17
  %113 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = tail call ptr @c_save_expr(ptr noundef %114) #20
  store ptr %115, ptr %0, align 8, !tbaa !64
  %116 = icmp eq ptr %112, null
  br i1 %116, label %121, label %117

117:                                              ; preds = %110
  %118 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %112, ptr noundef %115) #20
  br label %119

119:                                              ; preds = %117, %108
  %120 = phi ptr [ %109, %108 ], [ %118, %117 ]
  store ptr %120, ptr %0, align 8, !tbaa !64
  br label %121

121:                                              ; preds = %119, %110, %95, %92
  %122 = phi ptr [ %115, %110 ], [ %8, %95 ], [ %8, %92 ], [ %120, %119 ]
  %123 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  %124 = getelementptr inbounds %struct.expanded_location, ptr %5, i64 0, i32 3
  br label %125

125:                                              ; preds = %632, %121
  %126 = phi ptr [ %122, %121 ], [ %537, %632 ]
  %127 = icmp ne ptr %126, null
  %128 = icmp eq ptr %126, null
  %129 = getelementptr inbounds %struct.tree_common, ptr %126, i64 0, i32 2
  %130 = icmp eq ptr %126, null
  %131 = icmp ne ptr %126, null
  %132 = icmp eq ptr %126, null
  %133 = getelementptr inbounds %struct.tree_common, ptr %126, i64 0, i32 2
  %134 = icmp ne ptr %126, null
  %135 = icmp eq ptr %126, null
  %136 = getelementptr inbounds %struct.tree_common, ptr %126, i64 0, i32 2
  br label %137

137:                                              ; preds = %289, %125
  %138 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %139 = load i64, ptr %138, align 8
  %140 = trunc i64 %139 to i16
  switch i16 %140, label %522 [
    i16 16, label %141
    i16 17, label %290
    i16 15, label %401
    i16 14, label %491
  ]

141:                                              ; preds = %137
  %142 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %143 = icmp eq ptr %142, null
  br i1 %143, label %144, label %146

144:                                              ; preds = %141
  %145 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %145, i32 noundef 0, ptr noundef nonnull @.str.206)
  br label %633

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.tree_common, ptr %142, i64 0, i32 2
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = load ptr, ptr @global_trees, align 16
  %150 = icmp eq ptr %148, %149
  br i1 %150, label %154, label %151

151:                                              ; preds = %146
  %152 = getelementptr inbounds %struct.tree_type, ptr %148, i64 0, i32 16
  %153 = load ptr, ptr %152, align 8, !tbaa !17
  br label %154

154:                                              ; preds = %151, %146
  %155 = phi ptr [ %153, %151 ], [ %148, %146 ]
  %156 = load i64, ptr %155, align 8
  %157 = trunc i64 %156 to i32
  %158 = and i32 %157, 65535
  %159 = icmp ne i32 %158, 15
  %160 = load i32, ptr @require_constant_value, align 4
  %161 = icmp ne i32 %160, 0
  %162 = select i1 %159, i1 true, i1 %161
  br i1 %162, label %172, label %163

163:                                              ; preds = %154
  %164 = getelementptr inbounds %struct.tree_type, ptr %155, i64 0, i32 2
  %165 = load ptr, ptr %164, align 8, !tbaa !17
  %166 = icmp eq ptr %165, null
  br i1 %166, label %167, label %172

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.tree_common, ptr %142, i64 0, i32 1
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  %170 = icmp eq ptr %169, null
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  call void @error_init(ptr noundef nonnull @.str.207)
  br label %633

172:                                              ; preds = %167, %163, %154
  %173 = icmp eq i32 %158, 15
  %174 = and i1 %173, %134
  br i1 %174, label %175, label %187

175:                                              ; preds = %172
  %176 = getelementptr inbounds %struct.tree_common, ptr %155, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !17
  %178 = load i64, ptr %177, align 8
  %179 = trunc i64 %178 to i32
  %180 = and i32 %179, 65534
  %181 = icmp eq i32 %180, 6
  br i1 %181, label %186, label %182

182:                                              ; preds = %175
  %183 = and i32 %179, 65535
  %184 = icmp eq i32 %183, 8
  %185 = and i1 %15, %184
  br i1 %185, label %198, label %187

186:                                              ; preds = %175
  br i1 %15, label %198, label %187

187:                                              ; preds = %186, %182, %172
  %188 = icmp eq ptr %126, %149
  %189 = or i1 %135, %188
  br i1 %189, label %198, label %190

190:                                              ; preds = %187
  %191 = load ptr, ptr %136, align 8, !tbaa !17
  %192 = getelementptr inbounds %struct.tree_type, ptr %191, i64 0, i32 16
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  %194 = icmp ne ptr %193, %155
  %195 = add nsw i32 %158, -14
  %196 = icmp ult i32 %195, 4
  %197 = select i1 %194, i1 %196, i1 false
  br i1 %197, label %288, label %201

198:                                              ; preds = %187, %186, %182
  %199 = phi ptr [ %8, %182 ], [ %8, %186 ], [ %126, %187 ]
  %200 = icmp eq ptr %199, null
  br i1 %200, label %240, label %201

201:                                              ; preds = %190, %198
  %202 = phi ptr [ %199, %198 ], [ %126, %190 ]
  %203 = getelementptr i8, ptr %142, i64 32
  %204 = load ptr, ptr %203, align 8, !tbaa !17
  %205 = icmp eq ptr %204, null
  br i1 %205, label %210, label %206

206:                                              ; preds = %201
  %207 = getelementptr inbounds %struct.tree_identifier, ptr %204, i64 0, i32 1
  %208 = load ptr, ptr %207, align 8, !tbaa !17
  %209 = call ptr @identifier_to_locale(ptr noundef %208) #20
  br label %210

210:                                              ; preds = %206, %201
  %211 = phi ptr [ %209, %206 ], [ @.str.189, %201 ]
  %212 = load ptr, ptr @spelling, align 8, !tbaa !6
  %213 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %214 = ptrtoint ptr %212 to i64
  %215 = ptrtoint ptr %213 to i64
  %216 = sub i64 %214, %215
  %217 = lshr exact i64 %216, 4
  %218 = trunc i64 %217 to i32
  %219 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %220 = icmp sgt i32 %219, %218
  br i1 %220, label %229, label %221

221:                                              ; preds = %210
  %222 = add nsw i32 %219, 10
  store i32 %222, ptr @spelling_size, align 4, !tbaa !21
  %223 = sext i32 %222 to i64
  %224 = shl nsw i64 %223, 4
  %225 = call ptr @xrealloc(ptr noundef %213, i64 noundef %224) #20
  store ptr %225, ptr @spelling_base, align 8, !tbaa !6
  %226 = shl i64 %216, 28
  %227 = ashr i64 %226, 32
  %228 = getelementptr inbounds %struct.spelling, ptr %225, i64 %227
  br label %229

229:                                              ; preds = %210, %221
  %230 = phi ptr [ %228, %221 ], [ %212, %210 ]
  store i32 2, ptr %230, align 8, !tbaa !120
  %231 = getelementptr inbounds %struct.spelling, ptr %230, i64 0, i32 1
  store ptr %211, ptr %231, align 8, !tbaa !17
  %232 = getelementptr inbounds %struct.spelling, ptr %230, i64 1
  store ptr %232, ptr @spelling, align 8, !tbaa !6
  %233 = load ptr, ptr %123, align 8, !tbaa !98
  %234 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  call fastcc void @output_init_element(ptr noundef nonnull %202, ptr noundef %233, i8 noundef zeroext %19, ptr noundef nonnull %155, ptr noundef %234, i32 noundef 1, i8 noundef zeroext %1)
  %235 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %236 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds %struct.spelling, ptr %235, i64 %237
  store ptr %238, ptr @spelling, align 8, !tbaa !6
  %239 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  br label %271

240:                                              ; preds = %198
  %241 = getelementptr inbounds %struct.tree_decl_common, ptr %142, i64 0, i32 1
  %242 = load ptr, ptr %241, align 8, !tbaa !17
  %243 = icmp eq ptr %242, null
  br i1 %243, label %252, label %244

244:                                              ; preds = %240
  %245 = load i32, ptr @input_location, align 4, !tbaa !21
  %246 = call ptr @bit_position(ptr noundef nonnull %142) #20
  %247 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %248 = getelementptr inbounds %struct.tree_decl_common, ptr %247, i64 0, i32 1
  %249 = load ptr, ptr %248, align 8, !tbaa !17
  %250 = call ptr @size_binop_loc(i32 noundef %245, i32 noundef 63, ptr noundef %246, ptr noundef %249) #20
  store ptr %250, ptr @constructor_bit_index, align 8, !tbaa !6
  %251 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  br label %252

252:                                              ; preds = %244, %240
  %253 = phi ptr [ %251, %244 ], [ %142, %240 ]
  %254 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %255 = icmp eq ptr %254, %253
  br i1 %255, label %256, label %271

256:                                              ; preds = %252, %266
  %257 = phi ptr [ %259, %266 ], [ %253, %252 ]
  %258 = getelementptr inbounds %struct.tree_common, ptr %257, i64 0, i32 1
  %259 = load ptr, ptr %258, align 8, !tbaa !17
  %260 = icmp eq ptr %259, null
  br i1 %260, label %270, label %261

261:                                              ; preds = %256
  %262 = getelementptr inbounds %struct.tree_decl_common, ptr %259, i64 0, i32 2
  %263 = load i64, ptr %262, align 8
  %264 = and i64 %263, 524288
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %270, label %266

266:                                              ; preds = %261
  %267 = getelementptr inbounds %struct.tree_decl_minimal, ptr %259, i64 0, i32 3
  %268 = load ptr, ptr %267, align 8, !tbaa !17
  %269 = icmp eq ptr %268, null
  br i1 %269, label %256, label %270, !llvm.loop !174

270:                                              ; preds = %266, %256, %261
  store ptr %259, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %271

271:                                              ; preds = %270, %252, %229
  %272 = phi ptr [ %199, %270 ], [ null, %252 ], [ %202, %229 ]
  %273 = phi ptr [ %253, %270 ], [ %253, %252 ], [ %239, %229 ]
  br label %274

274:                                              ; preds = %284, %271
  %275 = phi ptr [ %273, %271 ], [ %277, %284 ]
  %276 = getelementptr inbounds %struct.tree_common, ptr %275, i64 0, i32 1
  %277 = load ptr, ptr %276, align 8, !tbaa !17
  %278 = icmp eq ptr %277, null
  br i1 %278, label %535, label %279

279:                                              ; preds = %274
  %280 = getelementptr inbounds %struct.tree_decl_common, ptr %277, i64 0, i32 2
  %281 = load i64, ptr %280, align 8
  %282 = and i64 %281, 524288
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %535, label %284

284:                                              ; preds = %279
  %285 = getelementptr inbounds %struct.tree_decl_minimal, ptr %277, i64 0, i32 3
  %286 = load ptr, ptr %285, align 8, !tbaa !17
  %287 = icmp eq ptr %286, null
  br i1 %287, label %274, label %535, !llvm.loop !175

288:                                              ; preds = %190
  call void @push_init_level(i32 noundef 1)
  br label %289

289:                                              ; preds = %288, %400, %490
  br label %137

290:                                              ; preds = %137
  %291 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %292 = icmp eq ptr %291, null
  br i1 %292, label %293, label %295

293:                                              ; preds = %290
  %294 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %294, i32 noundef 0, ptr noundef nonnull @.str.208)
  br label %633

295:                                              ; preds = %290
  %296 = getelementptr inbounds %struct.tree_common, ptr %291, i64 0, i32 2
  %297 = load ptr, ptr %296, align 8, !tbaa !17
  %298 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %299 = icmp eq ptr %297, %298
  br i1 %299, label %303, label %300

300:                                              ; preds = %295
  %301 = getelementptr inbounds %struct.tree_type, ptr %297, i64 0, i32 16
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  br label %303

303:                                              ; preds = %300, %295
  %304 = phi ptr [ %302, %300 ], [ %297, %295 ]
  %305 = load i64, ptr %304, align 8
  %306 = trunc i64 %305 to i32
  %307 = and i32 %306, 65535
  %308 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %5, i32 noundef %308) #20
  %309 = load i8, ptr %124, align 8, !tbaa !109
  %310 = icmp ne i8 %309, 0
  %311 = load i32, ptr @constructor_designated, align 4
  %312 = icmp ne i32 %311, 0
  %313 = select i1 %310, i1 true, i1 %312
  br i1 %313, label %323, label %314

314:                                              ; preds = %303
  br i1 %130, label %321, label %315

315:                                              ; preds = %314
  %316 = call i32 @integer_zerop(ptr noundef nonnull %126) #20
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %323

318:                                              ; preds = %315
  %319 = call i32 @real_zerop(ptr noundef nonnull %126) #20
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %323

321:                                              ; preds = %318, %314
  %322 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 202, ptr noundef nonnull @.str.209) #20
  br label %323

323:                                              ; preds = %321, %318, %315, %303
  %324 = icmp eq i32 %307, 15
  %325 = select i1 %131, i1 %324, i1 false
  br i1 %325, label %326, label %338

326:                                              ; preds = %323
  %327 = getelementptr inbounds %struct.tree_common, ptr %304, i64 0, i32 2
  %328 = load ptr, ptr %327, align 8, !tbaa !17
  %329 = load i64, ptr %328, align 8
  %330 = trunc i64 %329 to i32
  %331 = and i32 %330, 65534
  %332 = icmp eq i32 %331, 6
  br i1 %332, label %337, label %333

333:                                              ; preds = %326
  %334 = and i32 %330, 65535
  %335 = icmp eq i32 %334, 8
  %336 = and i1 %15, %335
  br i1 %336, label %350, label %338

337:                                              ; preds = %326
  br i1 %15, label %350, label %338

338:                                              ; preds = %337, %333, %323
  %339 = load ptr, ptr @global_trees, align 16
  %340 = icmp eq ptr %126, %339
  %341 = select i1 %132, i1 true, i1 %340
  br i1 %341, label %350, label %342

342:                                              ; preds = %338
  %343 = load ptr, ptr %133, align 8, !tbaa !17
  %344 = getelementptr inbounds %struct.tree_type, ptr %343, i64 0, i32 16
  %345 = load ptr, ptr %344, align 8, !tbaa !17
  %346 = icmp ne ptr %345, %304
  %347 = add nsw i32 %307, -14
  %348 = icmp ult i32 %347, 4
  %349 = select i1 %346, i1 %348, i1 false
  br i1 %349, label %400, label %353

350:                                              ; preds = %338, %337, %333
  %351 = phi ptr [ %8, %333 ], [ %8, %337 ], [ %126, %338 ]
  %352 = icmp eq ptr %351, null
  br i1 %352, label %392, label %353

353:                                              ; preds = %342, %350
  %354 = phi ptr [ %351, %350 ], [ %126, %342 ]
  %355 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %356 = getelementptr i8, ptr %355, i64 32
  %357 = load ptr, ptr %356, align 8, !tbaa !17
  %358 = icmp eq ptr %357, null
  br i1 %358, label %363, label %359

359:                                              ; preds = %353
  %360 = getelementptr inbounds %struct.tree_identifier, ptr %357, i64 0, i32 1
  %361 = load ptr, ptr %360, align 8, !tbaa !17
  %362 = call ptr @identifier_to_locale(ptr noundef %361) #20
  br label %363

363:                                              ; preds = %359, %353
  %364 = phi ptr [ %362, %359 ], [ @.str.189, %353 ]
  %365 = load ptr, ptr @spelling, align 8, !tbaa !6
  %366 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %367 = ptrtoint ptr %365 to i64
  %368 = ptrtoint ptr %366 to i64
  %369 = sub i64 %367, %368
  %370 = lshr exact i64 %369, 4
  %371 = trunc i64 %370 to i32
  %372 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %373 = icmp sgt i32 %372, %371
  br i1 %373, label %382, label %374

374:                                              ; preds = %363
  %375 = add nsw i32 %372, 10
  store i32 %375, ptr @spelling_size, align 4, !tbaa !21
  %376 = sext i32 %375 to i64
  %377 = shl nsw i64 %376, 4
  %378 = call ptr @xrealloc(ptr noundef %366, i64 noundef %377) #20
  store ptr %378, ptr @spelling_base, align 8, !tbaa !6
  %379 = shl i64 %369, 28
  %380 = ashr i64 %379, 32
  %381 = getelementptr inbounds %struct.spelling, ptr %378, i64 %380
  br label %382

382:                                              ; preds = %363, %374
  %383 = phi ptr [ %381, %374 ], [ %365, %363 ]
  store i32 2, ptr %383, align 8, !tbaa !120
  %384 = getelementptr inbounds %struct.spelling, ptr %383, i64 0, i32 1
  store ptr %364, ptr %384, align 8, !tbaa !17
  %385 = getelementptr inbounds %struct.spelling, ptr %383, i64 1
  store ptr %385, ptr @spelling, align 8, !tbaa !6
  %386 = load ptr, ptr %123, align 8, !tbaa !98
  %387 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  call fastcc void @output_init_element(ptr noundef nonnull %354, ptr noundef %386, i8 noundef zeroext %19, ptr noundef nonnull %304, ptr noundef %387, i32 noundef 1, i8 noundef zeroext %1)
  %388 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %389 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.spelling, ptr %388, i64 %390
  store ptr %391, ptr @spelling, align 8, !tbaa !6
  br label %398

392:                                              ; preds = %350
  %393 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %394 = getelementptr inbounds %struct.tree_decl_common, ptr %393, i64 0, i32 1
  %395 = load ptr, ptr %394, align 8, !tbaa !17
  store ptr %395, ptr @constructor_bit_index, align 8, !tbaa !6
  %396 = getelementptr inbounds %struct.tree_common, ptr %393, i64 0, i32 1
  %397 = load ptr, ptr %396, align 8, !tbaa !17
  store ptr %397, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %398

398:                                              ; preds = %382, %392
  %399 = phi ptr [ %354, %382 ], [ null, %392 ]
  store ptr null, ptr @constructor_fields, align 8, !tbaa !6
  br label %536

400:                                              ; preds = %342
  call void @push_init_level(i32 noundef 1)
  br label %289

401:                                              ; preds = %137
  %402 = getelementptr inbounds %struct.tree_common, ptr %138, i64 0, i32 2
  %403 = load ptr, ptr %402, align 8, !tbaa !17
  %404 = getelementptr inbounds %struct.tree_type, ptr %403, i64 0, i32 16
  %405 = load ptr, ptr %404, align 8, !tbaa !17
  %406 = load i64, ptr %405, align 8
  %407 = trunc i64 %406 to i32
  %408 = and i32 %407, 65535
  %409 = icmp eq i32 %408, 15
  %410 = select i1 %127, i1 %409, i1 false
  br i1 %410, label %411, label %423

411:                                              ; preds = %401
  %412 = getelementptr inbounds %struct.tree_common, ptr %405, i64 0, i32 2
  %413 = load ptr, ptr %412, align 8, !tbaa !17
  %414 = load i64, ptr %413, align 8
  %415 = trunc i64 %414 to i32
  %416 = and i32 %415, 65534
  %417 = icmp eq i32 %416, 6
  br i1 %417, label %422, label %418

418:                                              ; preds = %411
  %419 = and i32 %415, 65535
  %420 = icmp eq i32 %419, 8
  %421 = and i1 %15, %420
  br i1 %421, label %435, label %423

422:                                              ; preds = %411
  br i1 %15, label %435, label %423

423:                                              ; preds = %422, %418, %401
  %424 = load ptr, ptr @global_trees, align 16
  %425 = icmp eq ptr %126, %424
  %426 = select i1 %128, i1 true, i1 %425
  br i1 %426, label %435, label %427

427:                                              ; preds = %423
  %428 = load ptr, ptr %129, align 8, !tbaa !17
  %429 = getelementptr inbounds %struct.tree_type, ptr %428, i64 0, i32 16
  %430 = load ptr, ptr %429, align 8, !tbaa !17
  %431 = icmp ne ptr %430, %405
  %432 = add nsw i32 %408, -14
  %433 = icmp ult i32 %432, 4
  %434 = select i1 %431, i1 %433, i1 false
  br i1 %434, label %490, label %435

435:                                              ; preds = %422, %418, %423, %427
  %436 = phi ptr [ %126, %423 ], [ %126, %427 ], [ %8, %418 ], [ %8, %422 ]
  %437 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %438 = icmp eq ptr %437, null
  %439 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  br i1 %438, label %451, label %440

440:                                              ; preds = %435
  %441 = call i32 @tree_int_cst_lt(ptr noundef nonnull %437, ptr noundef %439) #20
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %449

443:                                              ; preds = %440
  %444 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %445 = call i32 @integer_all_onesp(ptr noundef %444) #20
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %449

447:                                              ; preds = %443
  %448 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  br label %451

449:                                              ; preds = %440, %443
  %450 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %450, i32 noundef 0, ptr noundef nonnull @.str.210)
  br label %633

451:                                              ; preds = %447, %435
  %452 = phi ptr [ %448, %447 ], [ %439, %435 ]
  %453 = icmp eq ptr %436, null
  br i1 %453, label %484, label %454

454:                                              ; preds = %451
  %455 = call i64 @tree_low_cst(ptr noundef %452, i32 noundef 1) #20
  %456 = load ptr, ptr @spelling, align 8, !tbaa !6
  %457 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %458 = ptrtoint ptr %456 to i64
  %459 = ptrtoint ptr %457 to i64
  %460 = sub i64 %458, %459
  %461 = lshr exact i64 %460, 4
  %462 = trunc i64 %461 to i32
  %463 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %464 = icmp sgt i32 %463, %462
  br i1 %464, label %473, label %465

465:                                              ; preds = %454
  %466 = add nsw i32 %463, 10
  store i32 %466, ptr @spelling_size, align 4, !tbaa !21
  %467 = sext i32 %466 to i64
  %468 = shl nsw i64 %467, 4
  %469 = call ptr @xrealloc(ptr noundef %457, i64 noundef %468) #20
  store ptr %469, ptr @spelling_base, align 8, !tbaa !6
  %470 = shl i64 %460, 28
  %471 = ashr i64 %470, 32
  %472 = getelementptr inbounds %struct.spelling, ptr %469, i64 %471
  br label %473

473:                                              ; preds = %454, %465
  %474 = phi ptr [ %472, %465 ], [ %456, %454 ]
  store i32 3, ptr %474, align 8, !tbaa !120
  %475 = getelementptr inbounds %struct.spelling, ptr %474, i64 0, i32 1
  store i64 %455, ptr %475, align 8, !tbaa !17
  %476 = getelementptr inbounds %struct.spelling, ptr %474, i64 1
  store ptr %476, ptr @spelling, align 8, !tbaa !6
  %477 = load ptr, ptr %123, align 8, !tbaa !98
  %478 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  call fastcc void @output_init_element(ptr noundef nonnull %436, ptr noundef %477, i8 noundef zeroext %19, ptr noundef nonnull %405, ptr noundef %478, i32 noundef 1, i8 noundef zeroext %1)
  %479 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %480 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds %struct.spelling, ptr %479, i64 %481
  store ptr %482, ptr @spelling, align 8, !tbaa !6
  %483 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  br label %484

484:                                              ; preds = %473, %451
  %485 = phi ptr [ %483, %473 ], [ %452, %451 ]
  %486 = load i32, ptr @input_location, align 4, !tbaa !21
  %487 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 20), align 16, !tbaa !6
  %488 = call ptr @size_binop_loc(i32 noundef %486, i32 noundef 63, ptr noundef %485, ptr noundef %487) #20
  store ptr %488, ptr @constructor_index, align 8, !tbaa !6
  br i1 %453, label %489, label %536

489:                                              ; preds = %484
  store ptr %488, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %536

490:                                              ; preds = %427
  call void @push_init_level(i32 noundef 1)
  br label %289

491:                                              ; preds = %137
  %492 = getelementptr inbounds %struct.tree_common, ptr %138, i64 0, i32 2
  %493 = load ptr, ptr %492, align 8, !tbaa !17
  %494 = getelementptr inbounds %struct.tree_type, ptr %493, i64 0, i32 16
  %495 = load ptr, ptr %494, align 8, !tbaa !17
  %496 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %497 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %498 = call i32 @tree_int_cst_lt(ptr noundef %496, ptr noundef %497) #20
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %500, label %520

500:                                              ; preds = %491
  %501 = icmp eq ptr %126, null
  br i1 %501, label %514, label %502

502:                                              ; preds = %500
  %503 = load i64, ptr %126, align 8
  %504 = and i64 %503, 65535
  %505 = icmp eq i64 %504, 27
  br i1 %505, label %506, label %510

506:                                              ; preds = %502
  %507 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %508 = getelementptr inbounds %struct.tree_type, ptr %507, i64 0, i32 16
  %509 = load ptr, ptr %508, align 8, !tbaa !17
  br label %510

510:                                              ; preds = %506, %502
  %511 = phi ptr [ %509, %506 ], [ %495, %502 ]
  %512 = load ptr, ptr %123, align 8, !tbaa !98
  %513 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  call fastcc void @output_init_element(ptr noundef nonnull %126, ptr noundef %512, i8 noundef zeroext %19, ptr noundef %511, ptr noundef %513, i32 noundef 1, i8 noundef zeroext %1)
  br label %514

514:                                              ; preds = %510, %500
  %515 = load i32, ptr @input_location, align 4, !tbaa !21
  %516 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %517 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 20), align 16, !tbaa !6
  %518 = call ptr @size_binop_loc(i32 noundef %515, i32 noundef 63, ptr noundef %516, ptr noundef %517) #20
  store ptr %518, ptr @constructor_index, align 8, !tbaa !6
  br i1 %501, label %519, label %536

519:                                              ; preds = %514
  store ptr %518, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %536

520:                                              ; preds = %491
  %521 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %521, i32 noundef 0, ptr noundef nonnull @.str.211)
  br label %633

522:                                              ; preds = %137
  %523 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %524 = icmp ne ptr %138, %523
  %525 = load ptr, ptr @constructor_fields, align 8
  %526 = icmp eq ptr %525, null
  %527 = select i1 %524, i1 %526, i1 false
  br i1 %527, label %528, label %530

528:                                              ; preds = %522
  %529 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %529, i32 noundef 0, ptr noundef nonnull @.str.212)
  br label %633

530:                                              ; preds = %522
  %531 = icmp eq ptr %126, null
  br i1 %531, label %534, label %532

532:                                              ; preds = %530
  %533 = load ptr, ptr %123, align 8, !tbaa !98
  call fastcc void @output_init_element(ptr noundef nonnull %126, ptr noundef %533, i8 noundef zeroext %19, ptr noundef nonnull %138, ptr noundef null, i32 noundef 1, i8 noundef zeroext %1)
  br label %534

534:                                              ; preds = %532, %530
  store ptr null, ptr @constructor_fields, align 8, !tbaa !6
  br label %536

535:                                              ; preds = %279, %274, %284
  store ptr %277, ptr @constructor_fields, align 8, !tbaa !6
  br label %536

536:                                              ; preds = %535, %514, %519, %484, %489, %398, %534
  %537 = phi ptr [ %272, %535 ], [ %126, %514 ], [ null, %519 ], [ %436, %484 ], [ null, %489 ], [ %399, %398 ], [ %126, %534 ]
  %538 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %539 = icmp eq ptr %538, null
  br i1 %539, label %633, label %540

540:                                              ; preds = %536
  store ptr null, ptr @constructor_range_stack, align 8, !tbaa !6
  %541 = getelementptr inbounds %struct.constructor_range_stack, ptr %538, i64 0, i32 2
  %542 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %543 = load ptr, ptr %541, align 8, !tbaa !176
  %544 = icmp eq ptr %542, %543
  br i1 %544, label %555, label %545

545:                                              ; preds = %540, %551
  %546 = phi ptr [ %552, %551 ], [ %542, %540 ]
  %547 = getelementptr inbounds %struct.constructor_stack, ptr %546, i64 0, i32 17
  %548 = load i8, ptr %547, align 1, !tbaa !160
  %549 = icmp eq i8 %548, 0
  br i1 %549, label %550, label %551

550:                                              ; preds = %545
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8096, ptr noundef nonnull @.str.8) #20
  br label %551

551:                                              ; preds = %545, %550
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %6, i32 noundef 1)
  call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %6, i8 noundef zeroext 1)
  %552 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %553 = load ptr, ptr %541, align 8, !tbaa !176
  %554 = icmp eq ptr %552, %553
  br i1 %554, label %555, label %545, !llvm.loop !178

555:                                              ; preds = %551, %540
  br label %556

556:                                              ; preds = %555, %572
  %557 = phi ptr [ %574, %572 ], [ %538, %555 ]
  %558 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 5
  %559 = load ptr, ptr %558, align 8, !tbaa !179
  %560 = icmp eq ptr %559, null
  br i1 %560, label %566, label %561

561:                                              ; preds = %556
  %562 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 4
  %563 = load ptr, ptr %562, align 8, !tbaa !180
  %564 = call i32 @tree_int_cst_equal(ptr noundef %563, ptr noundef nonnull %559) #20
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %575, label %566

566:                                              ; preds = %556, %561
  %567 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %568 = getelementptr inbounds %struct.constructor_stack, ptr %567, i64 0, i32 17
  %569 = load i8, ptr %568, align 1, !tbaa !160
  %570 = icmp eq i8 %569, 0
  br i1 %570, label %571, label %572

571:                                              ; preds = %566
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8103, ptr noundef nonnull @.str.8) #20
  br label %572

572:                                              ; preds = %566, %571
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %7, i32 noundef 1)
  call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %7, i8 noundef zeroext 1)
  %573 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 1
  %574 = load ptr, ptr %573, align 8, !tbaa !181
  br label %556, !llvm.loop !182

575:                                              ; preds = %561
  %576 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 5
  %577 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 4
  %578 = load i32, ptr @input_location, align 4, !tbaa !21
  %579 = load ptr, ptr %577, align 8, !tbaa !180
  %580 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 20), align 16, !tbaa !6
  %581 = call ptr @size_binop_loc(i32 noundef %578, i32 noundef 63, ptr noundef %579, ptr noundef %580) #20
  store ptr %581, ptr %577, align 8, !tbaa !180
  %582 = load ptr, ptr %576, align 8, !tbaa !179
  %583 = call i32 @tree_int_cst_equal(ptr noundef %581, ptr noundef %582) #20
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %590, label %585

585:                                              ; preds = %575
  %586 = getelementptr inbounds %struct.constructor_range_stack, ptr %557, i64 0, i32 1
  %587 = load ptr, ptr %586, align 8, !tbaa !181
  %588 = icmp eq ptr %587, null
  %589 = zext i1 %588 to i32
  br label %590

590:                                              ; preds = %585, %575
  %591 = phi i32 [ 0, %575 ], [ %589, %585 ]
  br label %592

592:                                              ; preds = %629, %590
  %593 = phi ptr [ %557, %590 ], [ %613, %629 ]
  %594 = phi i32 [ %591, %590 ], [ %612, %629 ]
  %595 = getelementptr inbounds %struct.constructor_range_stack, ptr %593, i64 0, i32 4
  %596 = load ptr, ptr %595, align 8, !tbaa !180
  store ptr %596, ptr @constructor_index, align 8, !tbaa !6
  %597 = getelementptr inbounds %struct.constructor_range_stack, ptr %593, i64 0, i32 6
  %598 = load ptr, ptr %597, align 8, !tbaa !183
  store ptr %598, ptr @constructor_fields, align 8, !tbaa !6
  %599 = icmp eq i32 %594, 0
  br i1 %599, label %610, label %600

600:                                              ; preds = %592
  %601 = getelementptr inbounds %struct.constructor_range_stack, ptr %593, i64 0, i32 5
  %602 = load ptr, ptr %601, align 8, !tbaa !179
  %603 = icmp eq ptr %602, null
  br i1 %603, label %610, label %604

604:                                              ; preds = %600
  %605 = getelementptr inbounds %struct.constructor_range_stack, ptr %593, i64 0, i32 3
  %606 = load ptr, ptr %605, align 8, !tbaa !184
  %607 = icmp eq ptr %596, %606
  br i1 %607, label %608, label %610

608:                                              ; preds = %604
  %609 = getelementptr inbounds %struct.constructor_range_stack, ptr %593, i64 0, i32 1
  store ptr null, ptr %609, align 8, !tbaa !181
  br label %610

610:                                              ; preds = %608, %604, %600, %592
  %611 = phi i1 [ true, %608 ], [ false, %604 ], [ false, %600 ], [ true, %592 ]
  %612 = phi i32 [ 0, %608 ], [ 1, %604 ], [ 1, %600 ], [ 0, %592 ]
  %613 = load ptr, ptr %593, align 8, !tbaa !185
  %614 = icmp eq ptr %613, null
  br i1 %614, label %630, label %615

615:                                              ; preds = %610
  call void @push_init_level(i32 noundef 2)
  %616 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %617 = getelementptr inbounds %struct.constructor_range_stack, ptr %613, i64 0, i32 2
  store ptr %616, ptr %617, align 8, !tbaa !176
  %618 = getelementptr inbounds %struct.constructor_range_stack, ptr %613, i64 0, i32 5
  %619 = load ptr, ptr %618, align 8, !tbaa !179
  %620 = icmp eq ptr %619, null
  br i1 %620, label %629, label %621

621:                                              ; preds = %615
  %622 = getelementptr inbounds %struct.constructor_range_stack, ptr %613, i64 0, i32 4
  %623 = load ptr, ptr %622, align 8, !tbaa !180
  %624 = call i32 @tree_int_cst_equal(ptr noundef %623, ptr noundef nonnull %619) #20
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %629, label %626

626:                                              ; preds = %621
  %627 = getelementptr inbounds %struct.constructor_range_stack, ptr %613, i64 0, i32 3
  %628 = load ptr, ptr %627, align 8, !tbaa !184
  store ptr %628, ptr %622, align 8, !tbaa !180
  br label %629

629:                                              ; preds = %626, %621, %615
  br label %592

630:                                              ; preds = %610
  br i1 %611, label %631, label %632

631:                                              ; preds = %630
  store ptr %538, ptr @constructor_range_stack, align 8, !tbaa !6
  br label %632

632:                                              ; preds = %631, %630
  br label %125

633:                                              ; preds = %536, %171, %144, %520, %449, %293, %528
  store ptr null, ptr @constructor_range_stack, align 8, !tbaa !6
  br label %634

634:                                              ; preds = %55, %633, %54, %46
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @pop_init_level(ptr noalias nocapture sret(%struct.c_expr) align 8 %0, i32 noundef %1) local_unnamed_addr #9 {
  %3 = alloca %struct.c_expr, align 8
  store ptr null, ptr %0, align 8, !tbaa !64
  %4 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 1
  store i32 0, ptr %4, align 8, !tbaa !97
  %5 = getelementptr inbounds %struct.c_expr, ptr %0, i64 0, i32 2
  store ptr null, ptr %5, align 8, !tbaa !98
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %2
  %8 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %9 = getelementptr inbounds %struct.constructor_stack, ptr %8, i64 0, i32 17
  %10 = load i8, ptr %9, align 1, !tbaa !160
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %7, %12
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %3, i32 noundef 1)
  tail call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %3, i8 noundef zeroext 1)
  %13 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %14 = getelementptr inbounds %struct.constructor_stack, ptr %13, i64 0, i32 17
  %15 = load i8, ptr %14, align 1, !tbaa !160
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %12, !llvm.loop !186

17:                                               ; preds = %12, %7
  %18 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %19 = icmp eq ptr %18, null
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 6626, ptr noundef nonnull @.str.8) #20
  br label %21

21:                                               ; preds = %20, %17, %2
  store i32 1, ptr @constructor_incremental, align 4, !tbaa !21
  tail call fastcc void @output_pending_init_elements(i32 noundef 1)
  %22 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %23 = load ptr, ptr @constructor_type, align 8
  %24 = icmp ne ptr %23, null
  %25 = load ptr, ptr @constructor_fields, align 8
  %26 = icmp ne ptr %25, null
  %27 = select i1 %24, i1 %26, i1 false
  br i1 %27, label %28, label %65

28:                                               ; preds = %21
  %29 = load i64, ptr %23, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 15
  br i1 %31, label %32, label %65

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.tree_type, ptr %23, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = icmp eq ptr %34, null
  br i1 %35, label %65, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.tree_type, ptr %34, i64 0, i32 14
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = icmp eq ptr %38, null
  br i1 %39, label %40, label %65

40:                                               ; preds = %36
  %41 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %42 = tail call i32 @integer_zerop(ptr noundef %41) #20
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %40
  store ptr null, ptr @constructor_type, align 8, !tbaa !6
  br label %132

45:                                               ; preds = %40
  %46 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %47 = getelementptr inbounds %struct.tree_type, ptr %46, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = icmp eq ptr %48, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %45
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 6648, ptr noundef nonnull @.str.8) #20
  br label %51

51:                                               ; preds = %45, %50
  %52 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %53 = icmp sgt i32 %52, 2
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @error_init(ptr noundef nonnull @.str.192)
  br label %57

55:                                               ; preds = %51
  %56 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void @pedwarn_init(i32 noundef %56, i32 noundef 834, ptr noundef nonnull @.str.162)
  br label %57

57:                                               ; preds = %55, %54
  %58 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %59 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  %63 = load ptr, ptr @constructor_type, align 8
  br label %65

64:                                               ; preds = %57
  store ptr null, ptr @constructor_type, align 8, !tbaa !6
  br label %132

65:                                               ; preds = %62, %36, %32, %28, %21
  %66 = phi ptr [ %63, %62 ], [ %23, %36 ], [ %23, %32 ], [ %23, %28 ], [ %23, %21 ]
  %67 = load i32, ptr @warn_missing_field_initializers, align 4, !tbaa !21
  %68 = icmp ne i32 %67, 0
  %69 = icmp ne ptr %66, null
  %70 = select i1 %68, i1 %69, i1 false
  br i1 %70, label %71, label %132

71:                                               ; preds = %65
  %72 = load i64, ptr %66, align 8
  %73 = and i64 %72, 65535
  %74 = icmp eq i64 %73, 16
  %75 = load ptr, ptr @constructor_unfilled_fields, align 8
  %76 = icmp ne ptr %75, null
  %77 = select i1 %74, i1 %76, i1 false
  br i1 %77, label %78, label %132

78:                                               ; preds = %71, %87
  %79 = phi ptr [ %90, %87 ], [ %75, %71 ]
  %80 = getelementptr inbounds %struct.tree_decl_common, ptr %79, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = icmp eq ptr %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %78
  %84 = tail call i32 @integer_zerop(ptr noundef nonnull %81) #20
  %85 = icmp eq i32 %84, 0
  %86 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br i1 %85, label %92, label %87

87:                                               ; preds = %83, %78
  %88 = phi ptr [ %79, %78 ], [ %86, %83 ]
  %89 = getelementptr inbounds %struct.tree_common, ptr %88, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !17
  store ptr %90, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %91 = icmp eq ptr %90, null
  br i1 %91, label %132, label %78, !llvm.loop !187

92:                                               ; preds = %83
  %93 = icmp eq ptr %86, null
  %94 = load i32, ptr @constructor_designated, align 4
  %95 = icmp ne i32 %94, 0
  %96 = select i1 %93, i1 true, i1 %95
  br i1 %96, label %132, label %97

97:                                               ; preds = %92
  %98 = getelementptr i8, ptr %86, i64 32
  %99 = load ptr, ptr %98, align 8, !tbaa !17
  %100 = icmp eq ptr %99, null
  br i1 %100, label %105, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.tree_identifier, ptr %99, i64 0, i32 1
  %103 = load ptr, ptr %102, align 8, !tbaa !17
  %104 = tail call ptr @identifier_to_locale(ptr noundef %103) #20
  br label %105

105:                                              ; preds = %101, %97
  %106 = phi ptr [ %104, %101 ], [ @.str.189, %97 ]
  %107 = load ptr, ptr @spelling, align 8, !tbaa !6
  %108 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %109 = ptrtoint ptr %107 to i64
  %110 = ptrtoint ptr %108 to i64
  %111 = sub i64 %109, %110
  %112 = lshr exact i64 %111, 4
  %113 = trunc i64 %112 to i32
  %114 = load i32, ptr @spelling_size, align 4, !tbaa !21
  %115 = icmp sgt i32 %114, %113
  br i1 %115, label %124, label %116

116:                                              ; preds = %105
  %117 = add nsw i32 %114, 10
  store i32 %117, ptr @spelling_size, align 4, !tbaa !21
  %118 = sext i32 %117 to i64
  %119 = shl nsw i64 %118, 4
  %120 = tail call ptr @xrealloc(ptr noundef %108, i64 noundef %119) #20
  store ptr %120, ptr @spelling_base, align 8, !tbaa !6
  %121 = shl i64 %111, 28
  %122 = ashr i64 %121, 32
  %123 = getelementptr inbounds %struct.spelling, ptr %120, i64 %122
  br label %124

124:                                              ; preds = %105, %116
  %125 = phi ptr [ %123, %116 ], [ %107, %105 ]
  store i32 2, ptr %125, align 8, !tbaa !120
  %126 = getelementptr inbounds %struct.spelling, ptr %125, i64 0, i32 1
  store ptr %106, ptr %126, align 8, !tbaa !17
  %127 = getelementptr inbounds %struct.spelling, ptr %125, i64 1
  store ptr %127, ptr @spelling, align 8, !tbaa !6
  tail call fastcc void @warning_init(i32 noundef 130, ptr noundef nonnull @.str.193)
  %128 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %129 = load i32, ptr @constructor_depth, align 4, !tbaa !21
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.spelling, ptr %128, i64 %130
  store ptr %131, ptr @spelling, align 8, !tbaa !6
  br label %132

132:                                              ; preds = %87, %64, %44, %92, %124, %71, %65
  %133 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 12
  %134 = load ptr, ptr %133, align 8, !tbaa !158
  %135 = icmp eq ptr %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %132
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 8 dereferenceable(24) %133, i64 24, i1 false), !tbaa.struct !172
  %137 = load ptr, ptr %0, align 8, !tbaa !64
  br label %188

138:                                              ; preds = %132
  %139 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %140 = icmp eq ptr %139, null
  br i1 %140, label %204, label %141

141:                                              ; preds = %138
  %142 = load i64, ptr %139, align 8
  %143 = trunc i64 %142 to i32
  %144 = and i32 %143, 65534
  %145 = add nsw i32 %144, -14
  %146 = icmp ult i32 %145, 4
  br i1 %146, label %165, label %147

147:                                              ; preds = %141
  %148 = load ptr, ptr @constructor_elements, align 8
  %149 = icmp eq ptr %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %147
  %151 = load i32, ptr %148, align 8, !tbaa !113
  switch i32 %151, label %158 [
    i32 0, label %152
    i32 1, label %162
  ]

152:                                              ; preds = %150, %147
  %153 = load i32, ptr @constructor_erroneous, align 4, !tbaa !21
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  tail call void @error_init(ptr noundef nonnull @.str.194)
  br label %156

156:                                              ; preds = %155, %152
  %157 = load ptr, ptr @global_trees, align 16, !tbaa !6
  store ptr %157, ptr %0, align 8, !tbaa !64
  br label %188

158:                                              ; preds = %150
  tail call void @error_init(ptr noundef nonnull @.str.195)
  %159 = load ptr, ptr @constructor_elements, align 8
  %160 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %159, i64 0, i32 2, i64 0, i32 1
  %161 = load ptr, ptr %160, align 8, !tbaa !115
  store ptr %161, ptr %0, align 8, !tbaa !64
  br label %188

162:                                              ; preds = %150
  %163 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %148, i64 0, i32 2, i64 0, i32 1
  %164 = load ptr, ptr %163, align 8, !tbaa !115
  store ptr %164, ptr %0, align 8, !tbaa !64
  br label %188

165:                                              ; preds = %141
  %166 = load i32, ptr @constructor_erroneous, align 4, !tbaa !21
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %170, label %168

168:                                              ; preds = %165
  %169 = load ptr, ptr @global_trees, align 16, !tbaa !6
  store ptr %169, ptr %0, align 8, !tbaa !64
  br label %188

170:                                              ; preds = %165
  %171 = load ptr, ptr @constructor_elements, align 8, !tbaa !6
  %172 = tail call ptr @build_constructor(ptr noundef nonnull %139, ptr noundef %171) #20
  store ptr %172, ptr %0, align 8, !tbaa !64
  %173 = load i32, ptr @constructor_constant, align 4, !tbaa !21
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %182, label %175

175:                                              ; preds = %170
  %176 = load i64, ptr %172, align 8
  %177 = or i64 %176, 131072
  store i64 %177, ptr %172, align 8
  %178 = load i32, ptr @constructor_simple, align 4
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %175
  %181 = or i64 %176, 67239936
  store i64 %181, ptr %172, align 8
  br label %182

182:                                              ; preds = %170, %180, %175
  %183 = load i32, ptr @constructor_nonconst, align 4, !tbaa !21
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %188, label %185

185:                                              ; preds = %182
  %186 = load i64, ptr %172, align 8
  %187 = or i64 %186, 17179869184
  store i64 %187, ptr %172, align 8
  br label %191

188:                                              ; preds = %182, %136, %168, %156, %162, %158
  %189 = phi ptr [ %169, %168 ], [ %157, %156 ], [ %164, %162 ], [ %161, %158 ], [ %137, %136 ], [ %172, %182 ]
  %190 = icmp eq ptr %189, null
  br i1 %190, label %204, label %191

191:                                              ; preds = %185, %188
  %192 = phi ptr [ %172, %185 ], [ %189, %188 ]
  %193 = load i64, ptr %192, align 8
  %194 = and i64 %193, 65535
  %195 = icmp eq i64 %194, 51
  br i1 %195, label %204, label %196

196:                                              ; preds = %191
  %197 = load i32, ptr @constructor_nonconst, align 4, !tbaa !21
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %202

199:                                              ; preds = %196
  %200 = load i32, ptr %4, align 8, !tbaa !97
  %201 = icmp eq i32 %200, 189
  br i1 %201, label %202, label %204

202:                                              ; preds = %199, %196
  %203 = phi i32 [ 189, %196 ], [ 0, %199 ]
  store i32 %203, ptr %4, align 8, !tbaa !97
  br label %204

204:                                              ; preds = %202, %138, %199, %191, %188
  %205 = phi i1 [ false, %199 ], [ false, %191 ], [ true, %188 ], [ true, %138 ], [ false, %202 ]
  %206 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 1
  %207 = load ptr, ptr %206, align 8, !tbaa !144
  store ptr %207, ptr @constructor_type, align 8, !tbaa !6
  %208 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 2
  %209 = load ptr, ptr %208, align 8, !tbaa !145
  store ptr %209, ptr @constructor_fields, align 8, !tbaa !6
  %210 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 3
  %211 = load ptr, ptr %210, align 8, !tbaa !146
  store ptr %211, ptr @constructor_index, align 8, !tbaa !6
  %212 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 4
  %213 = load ptr, ptr %212, align 8, !tbaa !147
  store ptr %213, ptr @constructor_max_index, align 8, !tbaa !6
  %214 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 5
  %215 = load ptr, ptr %214, align 8, !tbaa !148
  store ptr %215, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %216 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 6
  %217 = load ptr, ptr %216, align 8, !tbaa !149
  store ptr %217, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %218 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 7
  %219 = load ptr, ptr %218, align 8, !tbaa !150
  store ptr %219, ptr @constructor_bit_index, align 8, !tbaa !6
  %220 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 8
  %221 = load ptr, ptr %220, align 8, !tbaa !151
  store ptr %221, ptr @constructor_elements, align 8, !tbaa !6
  %222 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 14
  %223 = load i8, ptr %222, align 8, !tbaa !152
  %224 = sext i8 %223 to i32
  store i32 %224, ptr @constructor_constant, align 4, !tbaa !21
  %225 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 15
  %226 = load i8, ptr %225, align 1, !tbaa !153
  %227 = sext i8 %226 to i32
  store i32 %227, ptr @constructor_simple, align 4, !tbaa !21
  %228 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 16
  %229 = load i8, ptr %228, align 2, !tbaa !154
  %230 = sext i8 %229 to i32
  store i32 %230, ptr @constructor_nonconst, align 4, !tbaa !21
  %231 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 18
  %232 = load i8, ptr %231, align 4, !tbaa !155
  %233 = sext i8 %232 to i32
  store i32 %233, ptr @constructor_erroneous, align 4, !tbaa !21
  %234 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 20
  %235 = load i8, ptr %234, align 2, !tbaa !162
  %236 = sext i8 %235 to i32
  store i32 %236, ptr @constructor_incremental, align 4, !tbaa !21
  %237 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 21
  %238 = load i8, ptr %237, align 1, !tbaa !163
  %239 = sext i8 %238 to i32
  store i32 %239, ptr @constructor_designated, align 4, !tbaa !21
  %240 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 9
  %241 = load ptr, ptr %240, align 8, !tbaa !156
  store ptr %241, ptr @constructor_pending_elts, align 8, !tbaa !6
  %242 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 11
  %243 = load i32, ptr %242, align 4, !tbaa !157
  store i32 %243, ptr @constructor_depth, align 4, !tbaa !21
  %244 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 17
  %245 = load i8, ptr %244, align 1, !tbaa !160
  %246 = icmp eq i8 %245, 0
  br i1 %246, label %247, label %250

247:                                              ; preds = %204
  %248 = getelementptr inbounds %struct.constructor_stack, ptr %22, i64 0, i32 13
  %249 = load ptr, ptr %248, align 8, !tbaa !167
  store ptr %249, ptr @constructor_range_stack, align 8, !tbaa !6
  br label %250

250:                                              ; preds = %247, %204
  %251 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %252 = sext i32 %243 to i64
  %253 = getelementptr inbounds %struct.spelling, ptr %251, i64 %252
  store ptr %253, ptr @spelling, align 8, !tbaa !6
  %254 = load ptr, ptr %22, align 8, !tbaa !141
  store ptr %254, ptr @constructor_stack, align 8, !tbaa !6
  tail call void @free(ptr noundef nonnull %22)
  %255 = icmp eq ptr %254, null
  %256 = select i1 %205, i1 %255, i1 false
  br i1 %256, label %257, label %259

257:                                              ; preds = %250
  %258 = load ptr, ptr @global_trees, align 16, !tbaa !6
  store ptr %258, ptr %0, align 8, !tbaa !64
  br label %259

259:                                              ; preds = %257, %250
  ret void
}

declare i32 @tree_int_cst_lt(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @find_init_member(ptr noundef %0) unnamed_addr #9 {
  %2 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %3 = load i64, ptr %2, align 8
  %4 = trunc i64 %3 to i16
  switch i16 %4, label %81 [
    i16 15, label %5
    i16 16, label %34
    i16 17, label %64
  ]

5:                                                ; preds = %1
  %6 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %5
  %9 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %10 = tail call i32 @tree_int_cst_lt(ptr noundef %0, ptr noundef %9) #20
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call fastcc void @set_nonincremental_init()
  br label %13

13:                                               ; preds = %12, %8, %5
  %14 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %15 = icmp eq ptr %14, null
  br i1 %15, label %81, label %16

16:                                               ; preds = %13, %30
  %17 = phi ptr [ %32, %30 ], [ %14, %13 ]
  %18 = getelementptr inbounds %struct.init_node, ptr %17, i64 0, i32 4
  %19 = load ptr, ptr %18, align 8, !tbaa !188
  %20 = tail call i32 @tree_int_cst_lt(ptr noundef %0, ptr noundef %19) #20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %16
  %23 = load ptr, ptr %18, align 8, !tbaa !188
  %24 = tail call i32 @tree_int_cst_lt(ptr noundef %23, ptr noundef %0) #20
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.init_node, ptr %17, i64 0, i32 1
  br label %30

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.init_node, ptr %17, i64 0, i32 5
  br label %78

30:                                               ; preds = %16, %26
  %31 = phi ptr [ %27, %26 ], [ %17, %16 ]
  %32 = load ptr, ptr %31, align 8, !tbaa !6
  %33 = icmp eq ptr %32, null
  br i1 %33, label %81, label %16, !llvm.loop !190

34:                                               ; preds = %1
  %35 = tail call ptr @bit_position(ptr noundef %0) #20
  %36 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %34
  %39 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %40 = icmp eq ptr %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %38
  %42 = tail call ptr @bit_position(ptr noundef nonnull %39) #20
  %43 = tail call i32 @tree_int_cst_lt(ptr noundef %35, ptr noundef %42) #20
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %41, %38
  tail call fastcc void @set_nonincremental_init()
  br label %46

46:                                               ; preds = %45, %41, %34
  %47 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %48 = icmp eq ptr %47, null
  br i1 %48, label %81, label %49

49:                                               ; preds = %46, %54
  %50 = phi ptr [ %60, %54 ], [ %47, %46 ]
  %51 = getelementptr inbounds %struct.init_node, ptr %50, i64 0, i32 4
  %52 = load ptr, ptr %51, align 8, !tbaa !188
  %53 = icmp eq ptr %52, %0
  br i1 %53, label %62, label %54

54:                                               ; preds = %49
  %55 = tail call ptr @bit_position(ptr noundef %52) #20
  %56 = tail call i32 @tree_int_cst_lt(ptr noundef %35, ptr noundef %55) #20
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %struct.init_node, ptr %50, i64 0, i32 1
  %59 = select i1 %57, ptr %58, ptr %50
  %60 = load ptr, ptr %59, align 8, !tbaa !6
  %61 = icmp eq ptr %60, null
  br i1 %61, label %81, label %49, !llvm.loop !191

62:                                               ; preds = %49
  %63 = getelementptr inbounds %struct.init_node, ptr %50, i64 0, i32 5
  br label %78

64:                                               ; preds = %1
  %65 = load ptr, ptr @constructor_elements, align 8
  %66 = icmp eq ptr %65, null
  br i1 %66, label %81, label %67

67:                                               ; preds = %64
  %68 = load i32, ptr %65, align 8, !tbaa !113
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %81, label %70

70:                                               ; preds = %67
  %71 = add i32 %68, -1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %65, i64 0, i32 2, i64 %72
  %74 = load ptr, ptr %73, align 8, !tbaa !192
  %75 = icmp eq ptr %74, %0
  br i1 %75, label %76, label %81

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %65, i64 0, i32 2, i64 %72, i32 1
  br label %78

78:                                               ; preds = %28, %76, %62
  %79 = phi ptr [ %63, %62 ], [ %77, %76 ], [ %29, %28 ]
  %80 = load ptr, ptr %79, align 8, !tbaa !6
  br label %81

81:                                               ; preds = %54, %30, %78, %46, %13, %64, %70, %67, %1
  %82 = phi ptr [ null, %1 ], [ null, %67 ], [ null, %70 ], [ null, %64 ], [ null, %13 ], [ null, %46 ], [ %80, %78 ], [ null, %30 ], [ null, %54 ]
  ret ptr %82
}

declare i64 @tree_low_cst(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @set_nonincremental_init() unnamed_addr #9 {
  %1 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %2 = load i64, ptr %1, align 8
  %3 = trunc i64 %2 to i32
  %4 = and i32 %3, 65535
  %5 = add nsw i32 %4, -15
  %6 = icmp ult i32 %5, 2
  br i1 %6, label %7, label %59

7:                                                ; preds = %0, %17
  %8 = phi i64 [ %22, %17 ], [ 0, %0 ]
  %9 = load ptr, ptr @constructor_elements, align 8
  %10 = icmp eq ptr %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = load i32, ptr %9, align 8, !tbaa !113
  br label %13

13:                                               ; preds = %7, %11
  %14 = phi i32 [ %12, %11 ], [ 0, %7 ]
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %8, %15
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %9, i64 0, i32 2, i64 %8
  %19 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %9, i64 0, i32 2, i64 %8, i32 1
  %20 = load ptr, ptr %19, align 8, !tbaa !115
  %21 = load ptr, ptr %18, align 8, !tbaa !192
  tail call fastcc void @add_pending_init(ptr noundef %21, ptr noundef %20, ptr noundef null, i8 noundef zeroext 0)
  %22 = add nuw nsw i64 %8, 1
  br label %7, !llvm.loop !193

23:                                               ; preds = %13
  store ptr null, ptr @constructor_elements, align 8, !tbaa !6
  %24 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %25 = load i64, ptr %24, align 8
  %26 = trunc i64 %25 to i16
  switch i16 %26, label %58 [
    i16 16, label %27
    i16 15, label %45
  ]

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = icmp eq ptr %29, null
  br i1 %30, label %56, label %31

31:                                               ; preds = %27, %41
  %32 = phi ptr [ %43, %41 ], [ %29, %27 ]
  %33 = getelementptr inbounds %struct.tree_decl_common, ptr %32, i64 0, i32 2
  %34 = load i64, ptr %33, align 8
  %35 = and i64 %34, 524288
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %56, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.tree_decl_minimal, ptr %32, i64 0, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = icmp eq ptr %39, null
  br i1 %40, label %41, label %56

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = icmp eq ptr %43, null
  br i1 %44, label %56, label %31, !llvm.loop !194

45:                                               ; preds = %23
  %46 = getelementptr inbounds %struct.tree_type, ptr %24, i64 0, i32 1
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  %48 = icmp eq ptr %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %45
  %50 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %51 = getelementptr inbounds %struct.tree_type, ptr %47, i64 0, i32 13
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = tail call ptr @convert(ptr noundef %50, ptr noundef %52) #20
  store ptr %53, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %58

54:                                               ; preds = %45
  %55 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 19), align 8, !tbaa !6
  store ptr %55, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %58

56:                                               ; preds = %37, %41, %31, %27
  %57 = phi ptr [ null, %27 ], [ %32, %31 ], [ null, %41 ], [ %32, %37 ]
  store ptr %57, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %58

58:                                               ; preds = %56, %23, %54, %49
  store i32 0, ptr @constructor_incremental, align 4, !tbaa !21
  br label %59

59:                                               ; preds = %0, %58
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @warning_init(i32 noundef %0, ptr noundef %1) unnamed_addr #9 {
  %3 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef %0, ptr noundef nonnull @.str.180, ptr noundef %1) #20
  %4 = load ptr, ptr @spelling_base, align 8, !tbaa !6
  %5 = load ptr, ptr @spelling, align 8, !tbaa !6
  %6 = icmp ult ptr %4, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = alloca i8, align 16
  br label %63

9:                                                ; preds = %2, %23
  %10 = phi ptr [ %25, %23 ], [ %4, %2 ]
  %11 = phi i32 [ %24, %23 ], [ 0, %2 ]
  %12 = load i32, ptr %10, align 8, !tbaa !120
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  %15 = add nsw i32 %11, 25
  br label %23

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.spelling, ptr %10, i64 0, i32 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %18)
  %20 = trunc i64 %19 to i32
  %21 = add i32 %11, 1
  %22 = add i32 %21, %20
  br label %23

23:                                               ; preds = %16, %14
  %24 = phi i32 [ %15, %14 ], [ %22, %16 ]
  %25 = getelementptr inbounds %struct.spelling, ptr %10, i64 1
  %26 = icmp ult ptr %25, %5
  br i1 %26, label %9, label %27, !llvm.loop !122

27:                                               ; preds = %23
  %28 = add nsw i32 %24, 1
  %29 = sext i32 %28 to i64
  %30 = alloca i8, i64 %29, align 16
  br label %31

31:                                               ; preds = %27, %58
  %32 = phi ptr [ %59, %58 ], [ %5, %27 ]
  %33 = phi ptr [ %61, %58 ], [ %4, %27 ]
  %34 = phi ptr [ %60, %58 ], [ %30, %27 ]
  %35 = load i32, ptr %33, align 8, !tbaa !120
  switch i32 %35, label %45 [
    i32 3, label %36
    i32 2, label %43
  ]

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.spelling, ptr %33, i64 0, i32 1
  %38 = load i64, ptr %37, align 8, !tbaa !17
  %39 = call i32 (ptr, ptr, ...) @sprintf(ptr noundef nonnull dereferenceable(1) %34, ptr noundef nonnull dereferenceable(1) @.str.182, i64 noundef %38)
  %40 = call i64 @strlen(ptr noundef nonnull dereferenceable(1) %34)
  %41 = getelementptr inbounds i8, ptr %34, i64 %40
  %42 = load ptr, ptr @spelling, align 8, !tbaa !6
  br label %58

43:                                               ; preds = %31
  %44 = getelementptr inbounds i8, ptr %34, i64 1
  store i8 46, ptr %34, align 1, !tbaa !17
  br label %45

45:                                               ; preds = %43, %31
  %46 = phi ptr [ %44, %43 ], [ %34, %31 ]
  %47 = getelementptr inbounds %struct.spelling, ptr %33, i64 0, i32 1
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i8, ptr %48, align 1, !tbaa !17
  store i8 %49, ptr %46, align 1, !tbaa !17
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %45, %51
  %52 = phi ptr [ %54, %51 ], [ %48, %45 ]
  %53 = phi ptr [ %55, %51 ], [ %46, %45 ]
  %54 = getelementptr inbounds i8, ptr %52, i64 1
  %55 = getelementptr inbounds i8, ptr %53, i64 1
  %56 = load i8, ptr %54, align 1, !tbaa !17
  store i8 %56, ptr %55, align 1, !tbaa !17
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %51, !llvm.loop !123

58:                                               ; preds = %51, %45, %36
  %59 = phi ptr [ %42, %36 ], [ %32, %45 ], [ %32, %51 ]
  %60 = phi ptr [ %41, %36 ], [ %46, %45 ], [ %55, %51 ]
  %61 = getelementptr inbounds %struct.spelling, ptr %33, i64 1
  %62 = icmp ult ptr %61, %59
  br i1 %62, label %31, label %63, !llvm.loop !124

63:                                               ; preds = %58, %7
  %64 = phi ptr [ %8, %7 ], [ %30, %58 ]
  %65 = phi ptr [ %8, %7 ], [ %60, %58 ]
  store i8 0, ptr %65, align 1, !tbaa !17
  %66 = load i8, ptr %64, align 16, !tbaa !17
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %63
  %69 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef %0, ptr noundef nonnull @.str.181, ptr noundef nonnull %64) #20
  br label %70

70:                                               ; preds = %68, %63
  ret void
}

declare ptr @bit_position(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @add_pending_init(ptr noundef %0, ptr noundef %1, ptr noundef %2, i8 noundef zeroext %3) unnamed_addr #9 {
  %5 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %6 = load i64, ptr %5, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 15
  br i1 %8, label %9, label %44

9:                                                ; preds = %4
  %10 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %11 = icmp eq ptr %10, null
  br i1 %11, label %80, label %12

12:                                               ; preds = %9, %40
  %13 = phi ptr [ %42, %40 ], [ %10, %9 ]
  %14 = getelementptr inbounds %struct.init_node, ptr %13, i64 0, i32 4
  %15 = load ptr, ptr %14, align 8, !tbaa !188
  %16 = tail call i32 @tree_int_cst_lt(ptr noundef %0, ptr noundef %15) #20
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %40

18:                                               ; preds = %12
  %19 = load ptr, ptr %14, align 8, !tbaa !188
  %20 = tail call i32 @tree_int_cst_lt(ptr noundef %19, ptr noundef %0) #20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.init_node, ptr %13, i64 0, i32 1
  br label %40

24:                                               ; preds = %18
  %25 = icmp eq i8 %3, 0
  br i1 %25, label %26, label %37

26:                                               ; preds = %24
  %27 = getelementptr inbounds %struct.init_node, ptr %13, i64 0, i32 5
  %28 = load ptr, ptr %27, align 8, !tbaa !195
  %29 = load i64, ptr %28, align 8
  %30 = and i64 %29, 65536
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %26
  tail call fastcc void @warning_init(i32 noundef 0, ptr noundef nonnull @.str.190)
  br label %37

33:                                               ; preds = %26
  %34 = load i32, ptr @warn_override_init, align 4, !tbaa !21
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  tail call fastcc void @warning_init(i32 noundef 154, ptr noundef nonnull @.str.191)
  br label %37

37:                                               ; preds = %32, %36, %33, %24
  %38 = getelementptr inbounds %struct.init_node, ptr %13, i64 0, i32 5
  store ptr %1, ptr %38, align 8, !tbaa !195
  %39 = getelementptr inbounds %struct.init_node, ptr %13, i64 0, i32 6
  store ptr %2, ptr %39, align 8, !tbaa !196
  br label %216

40:                                               ; preds = %12, %22
  %41 = phi ptr [ %23, %22 ], [ %13, %12 ]
  %42 = load ptr, ptr %41, align 8, !tbaa !6
  %43 = icmp eq ptr %42, null
  br i1 %43, label %80, label %12, !llvm.loop !197

44:                                               ; preds = %4
  %45 = tail call ptr @bit_position(ptr noundef %0) #20
  %46 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %47 = icmp eq ptr %46, null
  br i1 %47, label %80, label %48

48:                                               ; preds = %44, %73
  %49 = phi ptr [ %75, %73 ], [ %46, %44 ]
  %50 = getelementptr inbounds %struct.init_node, ptr %49, i64 0, i32 4
  %51 = load ptr, ptr %50, align 8, !tbaa !188
  %52 = tail call ptr @bit_position(ptr noundef %51) #20
  %53 = tail call i32 @tree_int_cst_lt(ptr noundef %45, ptr noundef %52) #20
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %73

55:                                               ; preds = %48
  %56 = load ptr, ptr %50, align 8, !tbaa !188
  %57 = icmp eq ptr %56, %0
  br i1 %57, label %60, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %struct.init_node, ptr %49, i64 0, i32 1
  br label %73

60:                                               ; preds = %55
  %61 = icmp eq i8 %3, 0
  br i1 %61, label %62, label %77

62:                                               ; preds = %60
  %63 = getelementptr inbounds %struct.init_node, ptr %49, i64 0, i32 5
  %64 = load ptr, ptr %63, align 8, !tbaa !195
  %65 = load i64, ptr %64, align 8
  %66 = and i64 %65, 65536
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %69, label %68

68:                                               ; preds = %62
  tail call fastcc void @warning_init(i32 noundef 0, ptr noundef nonnull @.str.190)
  br label %77

69:                                               ; preds = %62
  %70 = load i32, ptr @warn_override_init, align 4, !tbaa !21
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %77, label %72

72:                                               ; preds = %69
  tail call fastcc void @warning_init(i32 noundef 154, ptr noundef nonnull @.str.191)
  br label %77

73:                                               ; preds = %48, %58
  %74 = phi ptr [ %59, %58 ], [ %49, %48 ]
  %75 = load ptr, ptr %74, align 8, !tbaa !6
  %76 = icmp eq ptr %75, null
  br i1 %76, label %80, label %48, !llvm.loop !198

77:                                               ; preds = %60, %69, %72, %68
  %78 = getelementptr inbounds %struct.init_node, ptr %49, i64 0, i32 5
  store ptr %1, ptr %78, align 8, !tbaa !195
  %79 = getelementptr inbounds %struct.init_node, ptr %49, i64 0, i32 6
  store ptr %2, ptr %79, align 8, !tbaa !196
  br label %216

80:                                               ; preds = %73, %40, %44, %9
  %81 = phi ptr [ @constructor_pending_elts, %9 ], [ @constructor_pending_elts, %44 ], [ %41, %40 ], [ %74, %73 ]
  %82 = phi ptr [ null, %9 ], [ null, %44 ], [ %13, %40 ], [ %49, %73 ]
  %83 = tail call ptr @ggc_alloc_stat(i64 noundef 56) #20
  %84 = getelementptr inbounds %struct.init_node, ptr %83, i64 0, i32 4
  store ptr %0, ptr %84, align 8, !tbaa !188
  %85 = getelementptr inbounds %struct.init_node, ptr %83, i64 0, i32 5
  store ptr %1, ptr %85, align 8, !tbaa !195
  %86 = getelementptr inbounds %struct.init_node, ptr %83, i64 0, i32 6
  store ptr %2, ptr %86, align 8, !tbaa !196
  store ptr %83, ptr %81, align 8, !tbaa !6
  %87 = getelementptr inbounds %struct.init_node, ptr %83, i64 0, i32 2
  store ptr %82, ptr %87, align 8, !tbaa !199
  %88 = getelementptr inbounds %struct.init_node, ptr %83, i64 0, i32 3
  store i32 0, ptr %88, align 8, !tbaa !200
  %89 = icmp eq ptr %82, null
  tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %83, i8 0, i64 16, i1 false)
  br i1 %89, label %216, label %90

90:                                               ; preds = %80, %211
  %91 = phi ptr [ %214, %211 ], [ %82, %80 ]
  %92 = phi ptr [ %91, %211 ], [ %83, %80 ]
  %93 = load ptr, ptr %91, align 8, !tbaa !201
  %94 = icmp eq ptr %92, %93
  %95 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 3
  %96 = load i32, ptr %95, align 8, !tbaa !200
  %97 = icmp eq i32 %96, 0
  br i1 %94, label %98, label %154

98:                                               ; preds = %90
  br i1 %97, label %211, label %99

99:                                               ; preds = %98
  %100 = icmp slt i32 %96, 0
  br i1 %100, label %101, label %153

101:                                              ; preds = %99
  %102 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 3
  %103 = load i32, ptr %102, align 8, !tbaa !200
  %104 = icmp slt i32 %103, 0
  %105 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 1
  %106 = load ptr, ptr %105, align 8, !tbaa !202
  br i1 %104, label %107, label %123

107:                                              ; preds = %101
  store ptr %106, ptr %91, align 8, !tbaa !201
  %108 = icmp eq ptr %106, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds %struct.init_node, ptr %106, i64 0, i32 2
  store ptr %91, ptr %110, align 8, !tbaa !199
  br label %111

111:                                              ; preds = %109, %107
  store ptr %91, ptr %105, align 8, !tbaa !202
  store i32 0, ptr %95, align 8, !tbaa !200
  store i32 0, ptr %102, align 8, !tbaa !200
  %112 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 2
  %113 = load ptr, ptr %112, align 8, !tbaa !199
  store ptr %92, ptr %112, align 8, !tbaa !199
  %114 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 2
  store ptr %113, ptr %114, align 8, !tbaa !199
  %115 = icmp eq ptr %113, null
  br i1 %115, label %122, label %116

116:                                              ; preds = %111
  %117 = load ptr, ptr %113, align 8, !tbaa !201
  %118 = icmp eq ptr %117, %91
  br i1 %118, label %119, label %120

119:                                              ; preds = %116
  store ptr %92, ptr %113, align 8, !tbaa !201
  br label %216

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.init_node, ptr %113, i64 0, i32 1
  store ptr %92, ptr %121, align 8, !tbaa !202
  br label %216

122:                                              ; preds = %111
  store ptr %92, ptr @constructor_pending_elts, align 8, !tbaa !6
  br label %216

123:                                              ; preds = %101
  %124 = load ptr, ptr %106, align 8, !tbaa !201
  store ptr %124, ptr %105, align 8, !tbaa !202
  %125 = icmp eq ptr %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %struct.init_node, ptr %124, i64 0, i32 2
  store ptr %92, ptr %127, align 8, !tbaa !199
  br label %128

128:                                              ; preds = %126, %123
  store ptr %92, ptr %106, align 8, !tbaa !201
  %129 = getelementptr inbounds %struct.init_node, ptr %106, i64 0, i32 1
  %130 = load ptr, ptr %129, align 8, !tbaa !202
  store ptr %130, ptr %91, align 8, !tbaa !201
  %131 = icmp eq ptr %130, null
  br i1 %131, label %134, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.init_node, ptr %130, i64 0, i32 2
  store ptr %91, ptr %133, align 8, !tbaa !199
  br label %134

134:                                              ; preds = %132, %128
  store ptr %91, ptr %129, align 8, !tbaa !202
  %135 = getelementptr inbounds %struct.init_node, ptr %106, i64 0, i32 3
  %136 = load i32, ptr %135, align 8, !tbaa !200
  %137 = lshr i32 %136, 31
  store i32 %137, ptr %95, align 8, !tbaa !200
  %138 = load i32, ptr %135, align 8, !tbaa !200
  %139 = icmp sgt i32 %138, 0
  %140 = sext i1 %139 to i32
  store i32 %140, ptr %102, align 8, !tbaa !200
  store i32 0, ptr %135, align 8, !tbaa !200
  %141 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 2
  %142 = load ptr, ptr %141, align 8, !tbaa !199
  store ptr %106, ptr %141, align 8, !tbaa !199
  %143 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 2
  store ptr %106, ptr %143, align 8, !tbaa !199
  %144 = getelementptr inbounds %struct.init_node, ptr %106, i64 0, i32 2
  store ptr %142, ptr %144, align 8, !tbaa !199
  %145 = icmp eq ptr %142, null
  br i1 %145, label %152, label %146

146:                                              ; preds = %134
  %147 = load ptr, ptr %142, align 8, !tbaa !201
  %148 = icmp eq ptr %147, %91
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  store ptr %106, ptr %142, align 8, !tbaa !201
  br label %216

150:                                              ; preds = %146
  %151 = getelementptr inbounds %struct.init_node, ptr %142, i64 0, i32 1
  store ptr %106, ptr %151, align 8, !tbaa !202
  br label %216

152:                                              ; preds = %134
  store ptr %106, ptr @constructor_pending_elts, align 8, !tbaa !6
  br label %216

153:                                              ; preds = %99
  store i32 0, ptr %95, align 8, !tbaa !200
  br label %216

154:                                              ; preds = %90
  br i1 %97, label %211, label %155

155:                                              ; preds = %154
  %156 = icmp sgt i32 %96, 0
  br i1 %156, label %157, label %210

157:                                              ; preds = %155
  %158 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 3
  %159 = load i32, ptr %158, align 8, !tbaa !200
  %160 = icmp sgt i32 %159, 0
  %161 = load ptr, ptr %92, align 8, !tbaa !201
  br i1 %160, label %162, label %179

162:                                              ; preds = %157
  %163 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 1
  store ptr %161, ptr %163, align 8, !tbaa !202
  %164 = icmp eq ptr %161, null
  br i1 %164, label %167, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %struct.init_node, ptr %161, i64 0, i32 2
  store ptr %91, ptr %166, align 8, !tbaa !199
  br label %167

167:                                              ; preds = %165, %162
  store ptr %91, ptr %92, align 8, !tbaa !201
  store i32 0, ptr %95, align 8, !tbaa !200
  store i32 0, ptr %158, align 8, !tbaa !200
  %168 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 2
  %169 = load ptr, ptr %168, align 8, !tbaa !199
  store ptr %92, ptr %168, align 8, !tbaa !199
  %170 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 2
  store ptr %169, ptr %170, align 8, !tbaa !199
  %171 = icmp eq ptr %169, null
  br i1 %171, label %178, label %172

172:                                              ; preds = %167
  %173 = load ptr, ptr %169, align 8, !tbaa !201
  %174 = icmp eq ptr %173, %91
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  store ptr %92, ptr %169, align 8, !tbaa !201
  br label %216

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.init_node, ptr %169, i64 0, i32 1
  store ptr %92, ptr %177, align 8, !tbaa !202
  br label %216

178:                                              ; preds = %167
  store ptr %92, ptr @constructor_pending_elts, align 8, !tbaa !6
  br label %216

179:                                              ; preds = %157
  %180 = getelementptr inbounds %struct.init_node, ptr %161, i64 0, i32 1
  %181 = load ptr, ptr %180, align 8, !tbaa !202
  store ptr %181, ptr %92, align 8, !tbaa !201
  %182 = icmp eq ptr %181, null
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.init_node, ptr %181, i64 0, i32 2
  store ptr %92, ptr %184, align 8, !tbaa !199
  br label %185

185:                                              ; preds = %183, %179
  store ptr %92, ptr %180, align 8, !tbaa !202
  %186 = load ptr, ptr %161, align 8, !tbaa !201
  %187 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 1
  store ptr %186, ptr %187, align 8, !tbaa !202
  %188 = icmp eq ptr %186, null
  br i1 %188, label %191, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %struct.init_node, ptr %186, i64 0, i32 2
  store ptr %91, ptr %190, align 8, !tbaa !199
  br label %191

191:                                              ; preds = %189, %185
  store ptr %91, ptr %161, align 8, !tbaa !201
  %192 = getelementptr inbounds %struct.init_node, ptr %161, i64 0, i32 3
  %193 = load i32, ptr %192, align 8, !tbaa !200
  %194 = lshr i32 %193, 31
  store i32 %194, ptr %158, align 8, !tbaa !200
  %195 = load i32, ptr %192, align 8, !tbaa !200
  %196 = icmp sgt i32 %195, 0
  %197 = sext i1 %196 to i32
  store i32 %197, ptr %95, align 8, !tbaa !200
  store i32 0, ptr %192, align 8, !tbaa !200
  %198 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 2
  %199 = load ptr, ptr %198, align 8, !tbaa !199
  store ptr %161, ptr %198, align 8, !tbaa !199
  %200 = getelementptr inbounds %struct.init_node, ptr %92, i64 0, i32 2
  store ptr %161, ptr %200, align 8, !tbaa !199
  %201 = getelementptr inbounds %struct.init_node, ptr %161, i64 0, i32 2
  store ptr %199, ptr %201, align 8, !tbaa !199
  %202 = icmp eq ptr %199, null
  br i1 %202, label %209, label %203

203:                                              ; preds = %191
  %204 = load ptr, ptr %199, align 8, !tbaa !201
  %205 = icmp eq ptr %204, %91
  br i1 %205, label %206, label %207

206:                                              ; preds = %203
  store ptr %161, ptr %199, align 8, !tbaa !201
  br label %216

207:                                              ; preds = %203
  %208 = getelementptr inbounds %struct.init_node, ptr %199, i64 0, i32 1
  store ptr %161, ptr %208, align 8, !tbaa !202
  br label %216

209:                                              ; preds = %191
  store ptr %161, ptr @constructor_pending_elts, align 8, !tbaa !6
  br label %216

210:                                              ; preds = %155
  store i32 0, ptr %95, align 8, !tbaa !200
  br label %216

211:                                              ; preds = %154, %98
  %212 = phi i32 [ -1, %98 ], [ 1, %154 ]
  store i32 %212, ptr %95, align 8, !tbaa !200
  %213 = getelementptr inbounds %struct.init_node, ptr %91, i64 0, i32 2
  %214 = load ptr, ptr %213, align 8, !tbaa !199
  %215 = icmp eq ptr %214, null
  br i1 %215, label %216, label %90

216:                                              ; preds = %211, %80, %175, %176, %178, %206, %207, %209, %119, %120, %122, %149, %150, %152, %210, %153, %77, %37
  ret void
}

declare ptr @ggc_alloc_stat(i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @output_pending_init_elements(i32 noundef %0) unnamed_addr #9 {
  %2 = load ptr, ptr @constructor_pending_elts, align 8, !tbaa !6
  %3 = icmp eq ptr %2, null
  br i1 %3, label %108, label %4

4:                                                ; preds = %1
  %5 = icmp ne i32 %0, 0
  br label %6

6:                                                ; preds = %71, %4
  %7 = phi ptr [ %2, %4 ], [ %72, %71 ]
  %8 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %9 = load i64, ptr %8, align 8
  %10 = trunc i64 %9 to i16
  switch i16 %10, label %71 [
    i16 15, label %11
    i16 16, label %53
    i16 17, label %53
  ]

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 4
  %13 = load ptr, ptr %12, align 8, !tbaa !188
  %14 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %15 = tail call i32 @tree_int_cst_equal(ptr noundef %13, ptr noundef %14) #20
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 5
  %19 = load ptr, ptr %18, align 8, !tbaa !195
  %20 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 6
  %21 = load ptr, ptr %20, align 8, !tbaa !196
  %22 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %23 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  tail call fastcc void @output_init_element(ptr noundef %19, ptr noundef %21, i8 noundef zeroext 1, ptr noundef %24, ptr noundef %25, i32 noundef 0, i8 noundef zeroext 0)
  br label %71

26:                                               ; preds = %11
  %27 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %28 = load ptr, ptr %12, align 8, !tbaa !188
  %29 = tail call i32 @tree_int_cst_lt(ptr noundef %27, ptr noundef %28) #20
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = load ptr, ptr %7, align 8, !tbaa !201
  %33 = icmp eq ptr %32, null
  br i1 %33, label %102, label %71

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 1
  %36 = load ptr, ptr %35, align 8, !tbaa !202
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %71

38:                                               ; preds = %34, %43
  %39 = phi ptr [ %41, %43 ], [ %7, %34 ]
  %40 = getelementptr inbounds %struct.init_node, ptr %39, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !199
  %42 = icmp eq ptr %41, null
  br i1 %42, label %108, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %struct.init_node, ptr %41, i64 0, i32 1
  %45 = load ptr, ptr %44, align 8, !tbaa !202
  %46 = icmp eq ptr %45, %39
  br i1 %46, label %38, label %47, !llvm.loop !203

47:                                               ; preds = %43
  %48 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %49 = getelementptr inbounds %struct.init_node, ptr %41, i64 0, i32 4
  %50 = load ptr, ptr %49, align 8, !tbaa !188
  %51 = tail call i32 @tree_int_cst_lt(ptr noundef %48, ptr noundef %50) #20
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %71, label %98

53:                                               ; preds = %6, %6
  %54 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %55 = icmp eq ptr %54, null
  br i1 %55, label %108, label %56

56:                                               ; preds = %53
  %57 = tail call ptr @bit_position(ptr noundef nonnull %54) #20
  %58 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 4
  %59 = load ptr, ptr %58, align 8, !tbaa !188
  %60 = tail call ptr @bit_position(ptr noundef %59) #20
  %61 = tail call i32 @tree_int_cst_equal(ptr noundef %60, ptr noundef %57) #20
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %56
  %64 = load ptr, ptr %58, align 8, !tbaa !188
  store ptr %64, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %65 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 5
  %66 = load ptr, ptr %65, align 8, !tbaa !195
  %67 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 6
  %68 = load ptr, ptr %67, align 8, !tbaa !196
  %69 = getelementptr inbounds %struct.tree_common, ptr %64, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !17
  tail call fastcc void @output_init_element(ptr noundef %66, ptr noundef %68, i8 noundef zeroext 1, ptr noundef %70, ptr noundef %64, i32 noundef 0, i8 noundef zeroext 0)
  br label %71

71:                                               ; preds = %63, %92, %76, %79, %6, %34, %31, %17, %47, %109, %115
  %72 = phi ptr [ %7, %17 ], [ %41, %47 ], [ %32, %31 ], [ %36, %34 ], [ %7, %6 ], [ %81, %79 ], [ %77, %76 ], [ %86, %92 ], [ %7, %63 ], [ %104, %109 ], [ %104, %115 ]
  br label %6, !llvm.loop !204

73:                                               ; preds = %56
  %74 = tail call i32 @tree_int_cst_lt(ptr noundef %57, ptr noundef %60) #20
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %73
  %77 = load ptr, ptr %7, align 8, !tbaa !201
  %78 = icmp eq ptr %77, null
  br i1 %78, label %102, label %71

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.init_node, ptr %7, i64 0, i32 1
  %81 = load ptr, ptr %80, align 8, !tbaa !202
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %71

83:                                               ; preds = %79, %88
  %84 = phi ptr [ %86, %88 ], [ %7, %79 ]
  %85 = getelementptr inbounds %struct.init_node, ptr %84, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !199
  %87 = icmp eq ptr %86, null
  br i1 %87, label %108, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.init_node, ptr %86, i64 0, i32 1
  %90 = load ptr, ptr %89, align 8, !tbaa !202
  %91 = icmp eq ptr %90, %84
  br i1 %91, label %83, label %92, !llvm.loop !205

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.init_node, ptr %86, i64 0, i32 4
  %94 = load ptr, ptr %93, align 8, !tbaa !188
  %95 = tail call ptr @bit_position(ptr noundef %94) #20
  %96 = tail call i32 @tree_int_cst_lt(ptr noundef %57, ptr noundef %95) #20
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %71, label %100

98:                                               ; preds = %47
  %99 = getelementptr inbounds %struct.init_node, ptr %41, i64 0, i32 4
  br label %102

100:                                              ; preds = %92
  %101 = getelementptr inbounds %struct.init_node, ptr %86, i64 0, i32 4
  br label %102

102:                                              ; preds = %76, %31, %100, %98
  %103 = phi ptr [ %99, %98 ], [ %101, %100 ], [ %58, %76 ], [ %12, %31 ]
  %104 = phi ptr [ %41, %98 ], [ %86, %100 ], [ %7, %76 ], [ %7, %31 ]
  %105 = load ptr, ptr %103, align 8, !tbaa !188
  %106 = icmp ne ptr %105, null
  %107 = select i1 %5, i1 %106, i1 false
  br i1 %107, label %109, label %108

108:                                              ; preds = %102, %53, %83, %38, %1
  ret void

109:                                              ; preds = %102
  %110 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %111 = load i64, ptr %110, align 8
  %112 = trunc i64 %111 to i16
  %113 = add i16 %112, -15
  %114 = icmp ult i16 %113, 3
  br i1 %114, label %115, label %71

115:                                              ; preds = %109
  %116 = sext i16 %113 to i64
  %117 = getelementptr inbounds [3 x ptr], ptr @switch.table.output_pending_init_elements, i64 0, i64 %116
  %118 = load ptr, ptr %117, align 8
  store ptr %105, ptr %118, align 8, !tbaa !6
  br label %71
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @output_init_element(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2, ptr noundef %3, ptr noundef %4, i32 noundef %5, i8 noundef zeroext %6) unnamed_addr #9 {
  %8 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %8) #20
  store i8 1, ptr %8, align 1, !tbaa !17
  %9 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %10 = icmp eq ptr %9, %3
  %11 = icmp eq ptr %9, %0
  %12 = or i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %7
  store i32 1, ptr @constructor_erroneous, align 4, !tbaa !21
  br label %387

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 15
  br i1 %19, label %20, label %56

20:                                               ; preds = %14
  %21 = load i64, ptr %0, align 8
  %22 = trunc i64 %21 to i16
  switch i16 %22, label %56 [
    i16 28, label %23
    i16 119, label %23
  ]

23:                                               ; preds = %20, %20
  %24 = and i64 %21, 65535
  %25 = icmp eq i64 %24, 28
  br i1 %25, label %26, label %38

26:                                               ; preds = %23
  %27 = load i64, ptr %3, align 8
  %28 = and i64 %27, 65535
  %29 = icmp eq i64 %28, 15
  br i1 %29, label %30, label %38

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !17
  %33 = load i64, ptr %32, align 8
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 65535
  %36 = add nsw i32 %35, -6
  %37 = icmp ult i32 %36, 3
  br i1 %37, label %56, label %38

38:                                               ; preds = %30, %26, %23
  %39 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 16
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 16
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %44 = tail call fastcc i32 @comptypes_internal(ptr noundef %40, ptr noundef %42, ptr noundef null)
  %45 = load ptr, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %46 = icmp eq ptr %45, %43
  br i1 %46, label %51, label %47

47:                                               ; preds = %38, %47
  %48 = phi ptr [ %49, %47 ], [ %45, %38 ]
  %49 = load ptr, ptr %48, align 8, !tbaa !37
  tail call void @free(ptr noundef %48)
  %50 = icmp eq ptr %49, %43
  br i1 %50, label %51, label %47, !llvm.loop !39

51:                                               ; preds = %47, %38
  store ptr %43, ptr @tagged_tu_seen_base, align 8, !tbaa !6
  %52 = icmp eq i32 %44, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %51
  %54 = load i32, ptr @input_location, align 4, !tbaa !21
  %55 = tail call fastcc ptr @array_to_pointer_conversion(i32 noundef %54, ptr noundef nonnull %0)
  br label %56

56:                                               ; preds = %30, %20, %53, %51, %14
  %57 = phi ptr [ %0, %51 ], [ %55, %53 ], [ %0, %14 ], [ %0, %20 ], [ %0, %30 ]
  %58 = load i64, ptr %57, align 8
  %59 = and i64 %58, 65535
  %60 = icmp eq i64 %59, 119
  %61 = load i32, ptr @require_constant_value, align 4
  %62 = icmp ne i32 %61, 0
  %63 = select i1 %60, i1 %62, i1 false
  %64 = load i32, ptr @flag_isoc99, align 4
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %63, i1 %65, i1 false
  %67 = icmp ne i32 %5, 0
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %77

69:                                               ; preds = %56
  %70 = getelementptr inbounds %struct.tree_exp, ptr %57, i64 0, i32 3
  %71 = load ptr, ptr %70, align 8, !tbaa !17
  %72 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = getelementptr inbounds %struct.tree_decl_common, ptr %73, i64 0, i32 5
  %75 = load ptr, ptr %74, align 8, !tbaa !17
  %76 = load i64, ptr %75, align 8
  br label %77

77:                                               ; preds = %69, %56
  %78 = phi i64 [ %76, %69 ], [ %58, %56 ]
  %79 = phi ptr [ %75, %69 ], [ %57, %56 ]
  %80 = getelementptr inbounds %struct.tree_common, ptr %79, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = and i64 %78, 134283263
  %83 = icmp eq i64 %82, 23
  br i1 %83, label %84, label %115

84:                                               ; preds = %77
  %85 = tail call i32 @integer_zerop(ptr noundef nonnull %79) #20
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %115, label %87

87:                                               ; preds = %84
  %88 = load i64, ptr %81, align 8
  %89 = trunc i64 %88 to i16
  switch i16 %89, label %114 [
    i16 6, label %115
    i16 7, label %115
    i16 8, label %115
    i16 10, label %90
  ]

90:                                               ; preds = %87
  %91 = getelementptr inbounds %struct.tree_common, ptr %81, i64 0, i32 2
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = load i64, ptr %92, align 8
  %94 = and i64 %93, 65535
  %95 = icmp eq i64 %94, 19
  br i1 %95, label %96, label %115

96:                                               ; preds = %90
  %97 = trunc i64 %93 to i32
  %98 = lshr i32 %97, 20
  %99 = and i32 %98, 1
  %100 = lshr i32 %97, 18
  %101 = and i32 %100, 2
  %102 = or i32 %99, %101
  %103 = getelementptr inbounds %struct.tree_type, ptr %92, i64 0, i32 6
  %104 = load i32, ptr %103, align 4
  %105 = lshr i32 %104, 11
  %106 = and i32 %105, 4
  %107 = lshr i64 %93, 48
  %108 = trunc i64 %107 to i32
  %109 = and i32 %108, 65280
  %110 = or i32 %102, %109
  %111 = or i32 %110, %106
  %112 = icmp eq i32 %111, 0
  %113 = zext i1 %112 to i8
  br label %115

114:                                              ; preds = %87
  br label %115

115:                                              ; preds = %77, %84, %87, %87, %87, %90, %96, %114
  %116 = phi i8 [ 0, %84 ], [ 0, %77 ], [ 1, %87 ], [ 0, %90 ], [ %113, %96 ], [ 1, %87 ], [ 1, %87 ], [ 0, %114 ]
  %117 = load i64, ptr %79, align 8
  %118 = and i64 %117, 65535
  %119 = icmp eq i64 %118, 190
  br i1 %119, label %120, label %124

120:                                              ; preds = %115
  %121 = load ptr, ptr %80, align 8, !tbaa !17
  %122 = getelementptr inbounds %struct.tree_exp, ptr %79, i64 0, i32 3
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  br label %124

124:                                              ; preds = %120, %115
  %125 = phi ptr [ %121, %120 ], [ null, %115 ]
  %126 = phi ptr [ %123, %120 ], [ %79, %115 ]
  %127 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %128 = trunc i32 %127 to i8
  %129 = call ptr @c_fully_fold(ptr noundef %126, i8 noundef zeroext %128, ptr noundef nonnull %8) #20
  %130 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %131 = icmp eq ptr %129, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %124
  store i32 1, ptr @constructor_erroneous, align 4, !tbaa !21
  br label %158

133:                                              ; preds = %124
  %134 = load i64, ptr %129, align 8
  %135 = and i64 %134, 131072
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %133
  store i32 0, ptr @constructor_constant, align 4, !tbaa !21
  br label %158

138:                                              ; preds = %133
  %139 = getelementptr inbounds %struct.tree_common, ptr %129, i64 0, i32 2
  %140 = load ptr, ptr %139, align 8, !tbaa !17
  %141 = call ptr @initializer_constant_valid_p(ptr noundef nonnull %129, ptr noundef %140) #20
  %142 = icmp eq ptr %141, null
  br i1 %142, label %157, label %143

143:                                              ; preds = %138
  %144 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %145 = load i64, ptr %144, align 8
  %146 = and i64 %145, 65534
  %147 = icmp eq i64 %146, 16
  br i1 %147, label %148, label %158

148:                                              ; preds = %143
  %149 = getelementptr inbounds %struct.tree_decl_common, ptr %4, i64 0, i32 2
  %150 = load i64, ptr %149, align 8
  %151 = and i64 %150, 524288
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %148
  %154 = load i64, ptr %129, align 8
  %155 = and i64 %154, 65535
  %156 = icmp eq i64 %155, 23
  br i1 %156, label %158, label %157

157:                                              ; preds = %153, %138
  store i32 0, ptr @constructor_simple, align 4, !tbaa !21
  br label %158

158:                                              ; preds = %143, %137, %157, %153, %148, %132
  %159 = load i8, ptr %8, align 1, !tbaa !17
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  store i32 1, ptr @constructor_nonconst, align 4, !tbaa !21
  br label %162

162:                                              ; preds = %161, %158
  %163 = getelementptr inbounds %struct.tree_common, ptr %129, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = call ptr @initializer_constant_valid_p(ptr noundef %129, ptr noundef %164) #20
  %166 = icmp eq ptr %165, null
  br i1 %166, label %167, label %178

167:                                              ; preds = %162
  %168 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %172, label %170

170:                                              ; preds = %167
  call void @error_init(ptr noundef nonnull @.str.170)
  %171 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %189

172:                                              ; preds = %167
  %173 = load i32, ptr @require_constant_elements, align 4, !tbaa !21
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %189, label %175

175:                                              ; preds = %172
  %176 = load i32, ptr @input_location, align 4, !tbaa !21
  %177 = call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %176, i32 noundef 0, ptr noundef nonnull @.str.172) #20
  br label %189

178:                                              ; preds = %162
  %179 = load i8, ptr %8, align 1, !tbaa !17
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %189

181:                                              ; preds = %178
  %182 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %183 = icmp ne i32 %182, 0
  %184 = load i32, ptr @require_constant_elements, align 4
  %185 = icmp ne i32 %184, 0
  %186 = select i1 %183, i1 true, i1 %185
  br i1 %186, label %187, label %189

187:                                              ; preds = %181
  %188 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @pedwarn_init(i32 noundef %188, i32 noundef 0, ptr noundef nonnull @.str.171)
  br label %189

189:                                              ; preds = %178, %187, %181, %170, %175, %172
  %190 = phi ptr [ %129, %178 ], [ %129, %187 ], [ %129, %181 ], [ %171, %170 ], [ %129, %175 ], [ %129, %172 ]
  %191 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %192 = icmp ne i32 %191, 0
  %193 = icmp ne ptr %4, null
  %194 = and i1 %193, %192
  br i1 %194, label %195, label %227

195:                                              ; preds = %189
  %196 = load i64, ptr %4, align 8
  %197 = and i64 %196, 65535
  %198 = icmp eq i64 %197, 31
  br i1 %198, label %199, label %228

199:                                              ; preds = %195
  %200 = getelementptr inbounds %struct.tree_field_decl, ptr %4, i64 0, i32 2
  %201 = load ptr, ptr %200, align 8, !tbaa !17
  %202 = icmp eq ptr %201, null
  br i1 %202, label %228, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.tree_type, ptr %201, i64 0, i32 16
  %205 = load ptr, ptr %204, align 8, !tbaa !17
  %206 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 16
  %207 = load ptr, ptr %206, align 8, !tbaa !17
  %208 = icmp eq ptr %205, %207
  br i1 %208, label %228, label %209

209:                                              ; preds = %203
  %210 = load i64, ptr %201, align 8
  %211 = and i64 %210, 65535
  %212 = icmp eq i64 %211, 6
  br i1 %212, label %213, label %228

213:                                              ; preds = %209
  %214 = icmp eq ptr %1, null
  br i1 %214, label %215, label %218

215:                                              ; preds = %213
  %216 = getelementptr inbounds %struct.tree_common, ptr %190, i64 0, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !17
  br label %218

218:                                              ; preds = %213, %215
  %219 = phi ptr [ %217, %215 ], [ %1, %213 ]
  %220 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %221 = icmp eq ptr %219, %220
  br i1 %221, label %228, label %222

222:                                              ; preds = %218
  %223 = getelementptr inbounds %struct.tree_type, ptr %219, i64 0, i32 16
  %224 = load ptr, ptr %223, align 8, !tbaa !17
  %225 = icmp eq ptr %224, %205
  br i1 %225, label %228, label %226

226:                                              ; preds = %222
  call fastcc void @warning_init(i32 noundef 49, ptr noundef nonnull @.str.56)
  br label %228

227:                                              ; preds = %189
  br i1 %193, label %228, label %249

228:                                              ; preds = %195, %199, %203, %209, %226, %222, %218, %227
  %229 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %230 = load ptr, ptr %229, align 8, !tbaa !17
  %231 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %232 = icmp eq ptr %230, %231
  br i1 %232, label %387, label %233

233:                                              ; preds = %228
  %234 = getelementptr inbounds %struct.tree_type, ptr %230, i64 0, i32 2
  %235 = load ptr, ptr %234, align 8, !tbaa !17
  %236 = icmp eq ptr %235, null
  br i1 %236, label %249, label %237

237:                                              ; preds = %233
  %238 = call i32 @integer_zerop(ptr noundef nonnull %235) #20
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %249, label %240

240:                                              ; preds = %237
  %241 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %242 = load i64, ptr %241, align 8
  %243 = and i64 %242, 65535
  %244 = icmp eq i64 %243, 15
  br i1 %244, label %387, label %245

245:                                              ; preds = %240
  %246 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 1
  %247 = load ptr, ptr %246, align 8, !tbaa !17
  %248 = icmp eq ptr %247, null
  br i1 %248, label %249, label %387

249:                                              ; preds = %245, %237, %233, %227
  %250 = icmp eq ptr %125, null
  br i1 %250, label %253, label %251

251:                                              ; preds = %249
  %252 = call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %125, ptr noundef %190) #20
  br label %253

253:                                              ; preds = %251, %249
  %254 = phi ptr [ %252, %251 ], [ %190, %249 ]
  %255 = load i32, ptr @input_location, align 4, !tbaa !21
  %256 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %257 = call fastcc ptr @digest_init(i32 noundef %255, ptr noundef %3, ptr noundef %254, ptr noundef %1, i8 noundef zeroext %116, i8 noundef zeroext %2, i32 noundef %256)
  %258 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %259 = icmp eq ptr %257, %258
  br i1 %259, label %260, label %261

260:                                              ; preds = %253
  store i32 1, ptr @constructor_erroneous, align 4, !tbaa !21
  br label %387

261:                                              ; preds = %253
  %262 = load i32, ptr @require_constant_value, align 4, !tbaa !21
  %263 = icmp ne i32 %262, 0
  %264 = load i32, ptr @require_constant_elements, align 4
  %265 = icmp ne i32 %264, 0
  %266 = select i1 %263, i1 true, i1 %265
  br i1 %266, label %267, label %268

267:                                              ; preds = %261
  call void @constant_expression_warning(ptr noundef %257) #20
  br label %268

268:                                              ; preds = %261, %267
  %269 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %270 = load i64, ptr %269, align 8
  %271 = and i64 %270, 65535
  %272 = icmp eq i64 %271, 15
  br i1 %272, label %273, label %292

273:                                              ; preds = %268
  %274 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %291, label %276

276:                                              ; preds = %273
  %277 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %278 = call i32 @tree_int_cst_equal(ptr noundef %4, ptr noundef %277) #20
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %283, label %280

280:                                              ; preds = %276
  %281 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %282 = load i64, ptr %281, align 8
  br label %292

283:                                              ; preds = %276
  %284 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %291, label %286

286:                                              ; preds = %283
  %287 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %288 = call i32 @tree_int_cst_lt(ptr noundef %4, ptr noundef %287) #20
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %291, label %290

290:                                              ; preds = %286
  call fastcc void @set_nonincremental_init()
  br label %291

291:                                              ; preds = %273, %290, %286, %283
  call fastcc void @add_pending_init(ptr noundef %4, ptr noundef %257, ptr noundef %1, i8 noundef zeroext %6)
  br label %387

292:                                              ; preds = %280, %268
  %293 = phi i64 [ %282, %280 ], [ %270, %268 ]
  %294 = phi ptr [ %281, %280 ], [ %269, %268 ]
  %295 = trunc i64 %293 to i16
  switch i16 %295, label %336 [
    i16 16, label %296
    i16 17, label %314
  ]

296:                                              ; preds = %292
  %297 = load i32, ptr @constructor_incremental, align 4, !tbaa !21
  %298 = icmp ne i32 %297, 0
  %299 = load ptr, ptr @constructor_unfilled_fields, align 8
  %300 = icmp eq ptr %299, %4
  %301 = select i1 %298, i1 %300, i1 false
  br i1 %301, label %336, label %302

302:                                              ; preds = %296
  %303 = icmp eq i32 %297, 0
  br i1 %303, label %313, label %304

304:                                              ; preds = %302
  %305 = icmp eq ptr %299, null
  br i1 %305, label %312, label %306

306:                                              ; preds = %304
  %307 = call ptr @bit_position(ptr noundef %4) #20
  %308 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  %309 = call ptr @bit_position(ptr noundef %308) #20
  %310 = call i32 @tree_int_cst_lt(ptr noundef %307, ptr noundef %309) #20
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %313, label %312

312:                                              ; preds = %306, %304
  call fastcc void @set_nonincremental_init()
  br label %313

313:                                              ; preds = %312, %306, %302
  call fastcc void @add_pending_init(ptr noundef %4, ptr noundef %257, ptr noundef %1, i8 noundef zeroext %6)
  br label %387

314:                                              ; preds = %292
  %315 = load ptr, ptr @constructor_elements, align 8
  %316 = icmp eq ptr %315, null
  br i1 %316, label %347, label %317

317:                                              ; preds = %314
  %318 = load i32, ptr %315, align 8, !tbaa !113
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %341, label %320

320:                                              ; preds = %317
  %321 = icmp eq i8 %6, 0
  br i1 %321, label %322, label %335

322:                                              ; preds = %320
  %323 = add i32 %318, -1
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %315, i64 0, i32 2, i64 %324, i32 1
  %326 = load ptr, ptr %325, align 8, !tbaa !115
  %327 = load i64, ptr %326, align 8
  %328 = and i64 %327, 65536
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %331, label %330

330:                                              ; preds = %322
  call fastcc void @warning_init(i32 noundef 0, ptr noundef nonnull @.str.190)
  br label %335

331:                                              ; preds = %322
  %332 = load i32, ptr @warn_override_init, align 4, !tbaa !21
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %335, label %334

334:                                              ; preds = %331
  call fastcc void @warning_init(i32 noundef 154, ptr noundef nonnull @.str.191)
  br label %335

335:                                              ; preds = %330, %334, %331, %320
  store ptr null, ptr @constructor_elements, align 8, !tbaa !6
  br label %347

336:                                              ; preds = %292, %296
  %337 = load ptr, ptr @constructor_elements, align 8, !tbaa !6
  %338 = icmp eq ptr %337, null
  br i1 %338, label %347, label %339

339:                                              ; preds = %336
  %340 = load i32, ptr %337, align 8, !tbaa !113
  br label %341

341:                                              ; preds = %339, %317
  %342 = phi i32 [ %340, %339 ], [ 0, %317 ]
  %343 = phi ptr [ %337, %339 ], [ %315, %317 ]
  %344 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %343, i64 0, i32 1
  %345 = load i32, ptr %344, align 4, !tbaa !206
  %346 = icmp eq i32 %345, %342
  br i1 %346, label %347, label %352

347:                                              ; preds = %314, %335, %341, %336
  %348 = phi ptr [ %343, %341 ], [ null, %336 ], [ null, %335 ], [ null, %314 ]
  %349 = call ptr @vec_gc_o_reserve(ptr noundef %348, i32 noundef 1, i64 noundef 8, i64 noundef 16) #20
  store ptr %349, ptr @constructor_elements, align 8, !tbaa !6
  %350 = load i32, ptr %349, align 8, !tbaa !113
  %351 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  br label %352

352:                                              ; preds = %341, %347
  %353 = phi ptr [ %294, %341 ], [ %351, %347 ]
  %354 = phi i32 [ %342, %341 ], [ %350, %347 ]
  %355 = phi ptr [ %343, %341 ], [ %349, %347 ]
  %356 = add i32 %354, 1
  store i32 %356, ptr %355, align 8, !tbaa !113
  %357 = zext i32 %354 to i64
  %358 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %355, i64 0, i32 2, i64 %357
  store ptr %4, ptr %358, align 8, !tbaa !192
  %359 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %355, i64 0, i32 2, i64 %357, i32 1
  store ptr %257, ptr %359, align 8, !tbaa !115
  %360 = load i64, ptr %353, align 8
  %361 = trunc i64 %360 to i16
  switch i16 %361, label %385 [
    i16 15, label %362
    i16 16, label %367
    i16 17, label %383
  ]

362:                                              ; preds = %352
  %363 = load i32, ptr @input_location, align 4, !tbaa !21
  %364 = load ptr, ptr @constructor_unfilled_index, align 8, !tbaa !6
  %365 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 20), align 16, !tbaa !6
  %366 = call ptr @size_binop_loc(i32 noundef %363, i32 noundef 63, ptr noundef %364, ptr noundef %365) #20
  store ptr %366, ptr @constructor_unfilled_index, align 8, !tbaa !6
  br label %385

367:                                              ; preds = %352
  %368 = load ptr, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %369

369:                                              ; preds = %379, %367
  %370 = phi ptr [ %368, %367 ], [ %372, %379 ]
  %371 = getelementptr inbounds %struct.tree_common, ptr %370, i64 0, i32 1
  %372 = load ptr, ptr %371, align 8, !tbaa !17
  %373 = icmp eq ptr %372, null
  br i1 %373, label %384, label %374

374:                                              ; preds = %369
  %375 = getelementptr inbounds %struct.tree_decl_common, ptr %372, i64 0, i32 2
  %376 = load i64, ptr %375, align 8
  %377 = and i64 %376, 524288
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %384, label %379

379:                                              ; preds = %374
  %380 = getelementptr inbounds %struct.tree_decl_minimal, ptr %372, i64 0, i32 3
  %381 = load ptr, ptr %380, align 8, !tbaa !17
  %382 = icmp eq ptr %381, null
  br i1 %382, label %369, label %384, !llvm.loop !207

383:                                              ; preds = %352
  store ptr null, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %385

384:                                              ; preds = %379, %369, %374
  store ptr %372, ptr @constructor_unfilled_fields, align 8, !tbaa !6
  br label %385

385:                                              ; preds = %384, %352, %383, %362
  br i1 %67, label %386, label %387

386:                                              ; preds = %385
  call fastcc void @output_pending_init_elements(i32 noundef 0)
  br label %387

387:                                              ; preds = %385, %386, %228, %240, %245, %313, %291, %260, %13
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %8) #20
  ret void
}

declare ptr @vec_gc_o_reserve(ptr noundef, i32 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @set_init_index(ptr noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call fastcc i32 @set_designator(i32 noundef 1), !range !47
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %112

5:                                                ; preds = %2
  store i1 true, ptr @designator_erroneous, align 4
  %6 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %7, align 8
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 65535
  %11 = add nsw i32 %10, -6
  %12 = icmp ult i32 %11, 3
  br i1 %12, label %13, label %23

13:                                               ; preds = %5
  %14 = icmp eq ptr %1, null
  br i1 %14, label %24, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = load i64, ptr %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  %21 = add nsw i32 %20, -6
  %22 = icmp ult i32 %21, 3
  br i1 %22, label %24, label %23

23:                                               ; preds = %15, %5
  tail call void @error_init(ptr noundef nonnull @.str.196)
  br label %112

24:                                               ; preds = %15, %13
  %25 = load i64, ptr %0, align 8
  %26 = and i64 %25, 65535
  %27 = icmp eq i64 %26, 23
  br i1 %27, label %35, label %28

28:                                               ; preds = %24
  %29 = tail call ptr @c_fully_fold(ptr noundef nonnull %0, i8 noundef zeroext 0, ptr noundef null) #20
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 23
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void @pedwarn_init(i32 noundef %34, i32 noundef 834, ptr noundef nonnull @.str.197)
  br label %35

35:                                               ; preds = %28, %33, %24
  %36 = phi ptr [ %29, %33 ], [ %29, %28 ], [ %0, %24 ]
  br i1 %14, label %53, label %37

37:                                               ; preds = %35
  %38 = load i64, ptr %1, align 8
  %39 = and i64 %38, 65535
  %40 = icmp eq i64 %39, 23
  br i1 %40, label %48, label %41

41:                                               ; preds = %37
  %42 = tail call ptr @c_fully_fold(ptr noundef nonnull %1, i8 noundef zeroext 0, ptr noundef null) #20
  %43 = load i64, ptr %42, align 8
  %44 = and i64 %43, 65535
  %45 = icmp eq i64 %44, 23
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = load i32, ptr @input_location, align 4, !tbaa !21
  tail call void @pedwarn_init(i32 noundef %47, i32 noundef 834, ptr noundef nonnull @.str.197)
  br label %48

48:                                               ; preds = %41, %46, %37
  %49 = phi ptr [ %42, %46 ], [ %42, %41 ], [ %1, %37 ]
  %50 = load i64, ptr %36, align 8
  %51 = and i64 %50, 65535
  %52 = icmp eq i64 %51, 23
  br i1 %52, label %58, label %57

53:                                               ; preds = %35
  %54 = load i64, ptr %36, align 8
  %55 = and i64 %54, 65535
  %56 = icmp eq i64 %55, 23
  br i1 %56, label %63, label %57

57:                                               ; preds = %53, %48
  tail call void @error_init(ptr noundef nonnull @.str.198)
  br label %112

58:                                               ; preds = %48
  %59 = load i64, ptr %49, align 8
  %60 = and i64 %59, 65535
  %61 = icmp eq i64 %60, 23
  br i1 %61, label %63, label %62

62:                                               ; preds = %58
  tail call void @error_init(ptr noundef nonnull @.str.198)
  br label %112

63:                                               ; preds = %53, %58
  %64 = phi ptr [ %49, %58 ], [ null, %53 ]
  %65 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %66 = load i64, ptr %65, align 8
  %67 = and i64 %66, 65535
  %68 = icmp eq i64 %67, 15
  br i1 %68, label %70, label %69

69:                                               ; preds = %63
  tail call void @error_init(ptr noundef nonnull @.str.199)
  br label %112

70:                                               ; preds = %63
  %71 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %36) #20
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  tail call void @error_init(ptr noundef nonnull @.str.200)
  br label %112

74:                                               ; preds = %70
  %75 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %76 = icmp eq ptr %75, null
  br i1 %76, label %81, label %77

77:                                               ; preds = %74
  %78 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %75, ptr noundef nonnull %36) #20
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  tail call void @error_init(ptr noundef nonnull @.str.200)
  br label %112

81:                                               ; preds = %77, %74
  tail call void @constant_expression_warning(ptr noundef nonnull %36) #20
  br i1 %14, label %100, label %82

82:                                               ; preds = %81
  tail call void @constant_expression_warning(ptr noundef nonnull %64) #20
  %83 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %84 = tail call ptr @convert(ptr noundef %83, ptr noundef nonnull %36) #20
  store ptr %84, ptr @constructor_index, align 8, !tbaa !6
  %85 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %36, ptr noundef nonnull %64) #20
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %103

87:                                               ; preds = %82
  %88 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %64, ptr noundef nonnull %36) #20
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %91, label %90

90:                                               ; preds = %87
  tail call void @error_init(ptr noundef nonnull @.str.201)
  br label %103

91:                                               ; preds = %87
  %92 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %93 = tail call ptr @convert(ptr noundef %92, ptr noundef nonnull %64) #20
  %94 = load ptr, ptr @constructor_max_index, align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %91
  %97 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %94, ptr noundef %93) #20
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %96
  tail call void @error_init(ptr noundef nonnull @.str.202)
  br label %103

100:                                              ; preds = %81
  %101 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %102 = tail call ptr @convert(ptr noundef %101, ptr noundef nonnull %36) #20
  store ptr %102, ptr @constructor_index, align 8, !tbaa !6
  br label %103

103:                                              ; preds = %82, %100, %91, %96, %99, %90
  %104 = phi ptr [ null, %90 ], [ null, %99 ], [ %93, %96 ], [ %93, %91 ], [ null, %100 ], [ null, %82 ]
  %105 = load i32, ptr @designator_depth, align 4, !tbaa !21
  %106 = add nsw i32 %105, 1
  store i32 %106, ptr @designator_depth, align 4, !tbaa !21
  store i1 false, ptr @designator_erroneous, align 4
  %107 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %108 = icmp ne ptr %107, null
  %109 = icmp ne ptr %104, null
  %110 = select i1 %108, i1 true, i1 %109
  br i1 %110, label %111, label %112

111:                                              ; preds = %103
  tail call fastcc void @push_range_stack(ptr noundef %104)
  br label %112

112:                                              ; preds = %62, %73, %111, %103, %80, %69, %2, %23, %57
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @set_designator(i32 noundef %0) unnamed_addr #9 {
  %2 = alloca %struct.c_expr, align 8
  %3 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %4 = icmp eq ptr %3, null
  br i1 %4, label %57, label %5

5:                                                ; preds = %1
  %6 = load i1, ptr @designator_erroneous, align 4
  br i1 %6, label %57, label %7

7:                                                ; preds = %5
  %8 = load i32, ptr @designator_depth, align 4, !tbaa !21
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %25

10:                                               ; preds = %7
  %11 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %12 = icmp eq ptr %11, null
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 6789, ptr noundef nonnull @.str.8) #20
  br label %14

14:                                               ; preds = %10, %13
  %15 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %16 = getelementptr inbounds %struct.constructor_stack, ptr %15, i64 0, i32 17
  %17 = load i8, ptr %16, align 1, !tbaa !160
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %14, %19
  call void @pop_init_level(ptr nonnull sret(%struct.c_expr) align 8 %2, i32 noundef 1)
  tail call void @process_init_element(ptr noundef nonnull byval(%struct.c_expr) align 8 %2, i8 noundef zeroext 1)
  %20 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %21 = getelementptr inbounds %struct.constructor_stack, ptr %20, i64 0, i32 17
  %22 = load i8, ptr %21, align 1, !tbaa !160
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %19, !llvm.loop !208

24:                                               ; preds = %19, %14
  store i32 1, ptr @constructor_designated, align 4, !tbaa !21
  br label %57

25:                                               ; preds = %7
  %26 = load i64, ptr %3, align 8
  %27 = trunc i64 %26 to i16
  switch i16 %27, label %37 [
    i16 16, label %28
    i16 17, label %28
    i16 15, label %34
  ]

28:                                               ; preds = %25, %25
  %29 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %30 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %33 = icmp eq ptr %31, %32
  br i1 %33, label %42, label %38

34:                                               ; preds = %25
  %35 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  br label %38

37:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 6811, ptr noundef nonnull @.str.8) #20
  unreachable

38:                                               ; preds = %28, %34
  %39 = phi ptr [ %36, %34 ], [ %31, %28 ]
  %40 = getelementptr inbounds %struct.tree_type, ptr %39, i64 0, i32 16
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  br label %42

42:                                               ; preds = %38, %28
  %43 = phi ptr [ %31, %28 ], [ %41, %38 ]
  %44 = load i64, ptr %43, align 8
  %45 = trunc i64 %44 to i32
  %46 = and i32 %45, 65535
  %47 = icmp ne i32 %0, 0
  %48 = icmp ne i32 %46, 15
  %49 = select i1 %47, i1 %48, i1 false
  br i1 %49, label %50, label %51

50:                                               ; preds = %42
  tail call void @error_init(ptr noundef nonnull @.str.199)
  br label %57

51:                                               ; preds = %42
  %52 = and i32 %45, 65534
  %53 = icmp eq i32 %52, 16
  %54 = select i1 %47, i1 true, i1 %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %51
  tail call void @error_init(ptr noundef nonnull @.str.203)
  br label %57

56:                                               ; preds = %51
  store i32 1, ptr @constructor_designated, align 4, !tbaa !21
  tail call void @push_init_level(i32 noundef 2)
  br label %57

57:                                               ; preds = %5, %1, %56, %55, %50, %24
  %58 = phi i32 [ 1, %50 ], [ 1, %55 ], [ 0, %56 ], [ 0, %24 ], [ 1, %1 ], [ 1, %5 ]
  ret i32 %58
}

declare i32 @tree_int_cst_sgn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @push_range_stack(ptr noundef %0) unnamed_addr #9 {
  %2 = tail call ptr @ggc_alloc_stat(i64 noundef 56) #20
  %3 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %4 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 1
  store ptr %3, ptr %4, align 8, !tbaa !181
  store ptr null, ptr %2, align 8, !tbaa !185
  %5 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %6 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 6
  store ptr %5, ptr %6, align 8, !tbaa !183
  %7 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %8 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 3
  store ptr %7, ptr %8, align 8, !tbaa !184
  %9 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 4
  store ptr %7, ptr %9, align 8, !tbaa !180
  %10 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %11 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 2
  store ptr %10, ptr %11, align 8, !tbaa !176
  %12 = getelementptr inbounds %struct.constructor_range_stack, ptr %2, i64 0, i32 5
  store ptr %0, ptr %12, align 8, !tbaa !179
  %13 = icmp eq ptr %3, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store ptr %2, ptr %3, align 8, !tbaa !185
  br label %15

15:                                               ; preds = %14, %1
  store ptr %2, ptr @constructor_range_stack, align 8, !tbaa !6
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @set_init_label(ptr noundef %0) local_unnamed_addr #9 {
  %2 = tail call fastcc i32 @set_designator(i32 noundef 0), !range !47
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %44

4:                                                ; preds = %1
  store i1 true, ptr @designator_erroneous, align 4
  %5 = load ptr, ptr @constructor_type, align 8, !tbaa !6
  %6 = load i64, ptr %5, align 8
  %7 = and i64 %6, 65534
  %8 = icmp eq i64 %7, 16
  br i1 %8, label %10, label %9

9:                                                ; preds = %4
  tail call void @error_init(ptr noundef nonnull @.str.203)
  br label %44

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = icmp eq ptr %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %10, %19
  %15 = phi ptr [ %21, %19 ], [ %12, %10 ]
  %16 = getelementptr inbounds %struct.tree_decl_minimal, ptr %15, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = icmp eq ptr %17, %0
  br i1 %18, label %24, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = icmp eq ptr %21, null
  br i1 %22, label %23, label %14, !llvm.loop !209

23:                                               ; preds = %19, %10
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.204, ptr noundef %0) #20
  br label %44

24:                                               ; preds = %14
  store ptr %15, ptr @constructor_fields, align 8, !tbaa !6
  %25 = load i32, ptr @designator_depth, align 4, !tbaa !21
  %26 = add nsw i32 %25, 1
  store i32 %26, ptr @designator_depth, align 4, !tbaa !21
  store i1 false, ptr @designator_erroneous, align 4
  %27 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %28 = icmp eq ptr %27, null
  br i1 %28, label %44, label %29

29:                                               ; preds = %24
  %30 = tail call ptr @ggc_alloc_stat(i64 noundef 56) #20
  %31 = load ptr, ptr @constructor_range_stack, align 8, !tbaa !6
  %32 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 1
  store ptr %31, ptr %32, align 8, !tbaa !181
  store ptr null, ptr %30, align 8, !tbaa !185
  %33 = load ptr, ptr @constructor_fields, align 8, !tbaa !6
  %34 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 6
  store ptr %33, ptr %34, align 8, !tbaa !183
  %35 = load ptr, ptr @constructor_index, align 8, !tbaa !6
  %36 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 3
  store ptr %35, ptr %36, align 8, !tbaa !184
  %37 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 4
  store ptr %35, ptr %37, align 8, !tbaa !180
  %38 = load ptr, ptr @constructor_stack, align 8, !tbaa !6
  %39 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 2
  store ptr %38, ptr %39, align 8, !tbaa !176
  %40 = getelementptr inbounds %struct.constructor_range_stack, ptr %30, i64 0, i32 5
  store ptr null, ptr %40, align 8, !tbaa !179
  %41 = icmp eq ptr %31, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %29
  store ptr %30, ptr %31, align 8, !tbaa !185
  br label %43

43:                                               ; preds = %29, %42
  store ptr %30, ptr @constructor_range_stack, align 8, !tbaa !6
  br label %44

44:                                               ; preds = %23, %43, %24, %1, %9
  ret void
}

declare ptr @c_save_expr(ptr noundef) local_unnamed_addr #3

declare i32 @real_zerop(ptr noundef) local_unnamed_addr #3

declare i32 @integer_all_onesp(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_asm_stmt(ptr noundef readnone %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = load i64, ptr %1, align 8
  %4 = and i64 %3, 134217728
  %5 = icmp eq i64 %4, 0
  %6 = icmp ne ptr %0, null
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = or i64 %3, 134217728
  store i64 %9, ptr %1, align 8
  br label %10

10:                                               ; preds = %8, %2
  %11 = tail call ptr @add_stmt(ptr noundef nonnull %1) #20
  ret ptr %11
}

declare ptr @add_stmt(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_asm_expr(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %6) local_unnamed_addr #9 {
  %8 = alloca ptr, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #20
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %9) #20
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %10) #20
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %11) #20
  %12 = tail call i32 @list_length(ptr noundef %3) #20
  %13 = tail call i32 @list_length(ptr noundef %2) #20
  %14 = sext i32 %13 to i64
  %15 = shl nsw i64 %14, 3
  %16 = alloca i8, i64 %15, align 16
  %17 = tail call ptr @resolve_asm_operand_names(ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %5) #20
  %18 = icmp eq ptr %2, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %107, %7
  %20 = icmp eq ptr %3, null
  br i1 %20, label %145, label %113

21:                                               ; preds = %7, %107
  %22 = phi i64 [ %109, %107 ], [ 0, %7 ]
  %23 = phi ptr [ %111, %107 ], [ %2, %7 ]
  %24 = getelementptr inbounds %struct.tree_list, ptr %23, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = call ptr @tree_strip_nop_conversions(ptr noundef %25) #20
  br label %27

27:                                               ; preds = %33, %21
  %28 = phi ptr [ %26, %21 ], [ %35, %33 ]
  %29 = load i64, ptr %28, align 8
  %30 = trunc i64 %29 to i16
  switch i16 %30, label %50 [
    i16 43, label %31
    i16 44, label %31
    i16 41, label %31
    i16 189, label %36
    i16 119, label %52
    i16 28, label %52
    i16 47, label %44
    i16 45, label %44
    i16 32, label %44
    i16 34, label %44
    i16 36, label %44
    i16 0, label %44
    i16 58, label %38
  ]

31:                                               ; preds = %27, %27, %27
  %32 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 0, i32 3
  br label %33

33:                                               ; preds = %36, %31
  %34 = phi ptr [ %32, %31 ], [ %37, %36 ]
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  br label %27

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 1
  br label %33

38:                                               ; preds = %27
  %39 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = load i64, ptr %40, align 8
  %42 = and i64 %41, 65535
  %43 = icmp eq i64 %42, 15
  br i1 %43, label %52, label %50

44:                                               ; preds = %27, %27, %27, %27, %27, %27
  %45 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %46 = load ptr, ptr %45, align 8, !tbaa !17
  %47 = load i64, ptr %46, align 8
  %48 = and i64 %47, 65534
  %49 = icmp eq i64 %48, 20
  br i1 %49, label %50, label %52

50:                                               ; preds = %27, %38, %44
  call void @lvalue_error(i32 noundef 4) #20
  %51 = load ptr, ptr @global_trees, align 16
  br label %86

52:                                               ; preds = %27, %27, %44, %38
  %53 = load ptr, ptr @global_trees, align 16
  %54 = icmp eq ptr %26, %53
  br i1 %54, label %86, label %55

55:                                               ; preds = %52
  %56 = load i64, ptr %26, align 8
  %57 = and i64 %56, 1048576
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %68

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.tree_common, ptr %26, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = load i64, ptr %61, align 8
  %63 = and i64 %62, 1048576
  %64 = icmp ne i64 %63, 0
  %65 = and i64 %62, 17179934718
  %66 = icmp eq i64 %65, 17179869200
  %67 = or i1 %64, %66
  br i1 %67, label %68, label %86

68:                                               ; preds = %59, %55
  br label %69

69:                                               ; preds = %68, %73
  %70 = phi ptr [ %75, %73 ], [ %26, %68 ]
  %71 = load i64, ptr %70, align 8
  %72 = trunc i64 %71 to i16
  switch i16 %72, label %85 [
    i16 41, label %73
    i16 32, label %84
  ]

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.tree_exp, ptr %70, i64 0, i32 3
  %75 = load ptr, ptr %74, align 8, !tbaa !17
  %76 = getelementptr inbounds %struct.tree_common, ptr %75, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !17
  %78 = load i64, ptr %77, align 8
  %79 = and i64 %78, 1048576
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %69

81:                                               ; preds = %73
  %82 = getelementptr inbounds %struct.tree_exp, ptr %70, i64 1
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  call void (ptr, ...) @error(ptr noundef nonnull @.str.125, ptr noundef %83) #20
  br label %86

84:                                               ; preds = %69
  call void (ptr, ...) @error(ptr noundef nonnull @.str.129, ptr noundef nonnull %70) #20
  br label %86

85:                                               ; preds = %69
  call void (ptr, ...) @error(ptr noundef nonnull @.str.133, ptr noundef nonnull %70) #20
  br label %86

86:                                               ; preds = %59, %85, %84, %81, %50, %52
  %87 = phi ptr [ %51, %50 ], [ %26, %52 ], [ %26, %81 ], [ %26, %84 ], [ %26, %85 ], [ %26, %59 ]
  %88 = getelementptr inbounds %struct.tree_list, ptr %23, i64 0, i32 1
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = getelementptr inbounds %struct.tree_list, ptr %89, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !17
  %92 = getelementptr inbounds %struct.tree_string, ptr %91, i64 0, i32 2
  store ptr %92, ptr %8, align 8, !tbaa !6
  %93 = getelementptr inbounds ptr, ptr %16, i64 %22
  store ptr %92, ptr %93, align 8, !tbaa !6
  %94 = trunc i64 %22 to i32
  %95 = call zeroext i8 @parse_output_constraint(ptr noundef nonnull %8, i32 noundef %94, i32 noundef %12, i32 noundef %13, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %11) #20
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %86
  %98 = load i8, ptr %10, align 1, !tbaa !17
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %100, label %107

100:                                              ; preds = %97
  %101 = call zeroext i8 @c_mark_addressable(ptr noundef %87), !range !70
  %102 = icmp eq i8 %101, 0
  %103 = load ptr, ptr @global_trees, align 16
  %104 = select i1 %102, ptr %103, ptr %87
  br label %107

105:                                              ; preds = %86
  %106 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %107

107:                                              ; preds = %100, %97, %105
  %108 = phi ptr [ %87, %97 ], [ %106, %105 ], [ %104, %100 ]
  store ptr %108, ptr %24, align 8, !tbaa !17
  %109 = add nuw i64 %22, 1
  %110 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 1
  %111 = load ptr, ptr %110, align 8, !tbaa !17
  %112 = icmp eq ptr %111, null
  br i1 %112, label %19, label %21, !llvm.loop !210

113:                                              ; preds = %19, %139
  %114 = phi ptr [ %143, %139 ], [ %3, %19 ]
  %115 = phi i32 [ %141, %139 ], [ 0, %19 ]
  %116 = getelementptr inbounds %struct.tree_list, ptr %114, i64 0, i32 1
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = getelementptr inbounds %struct.tree_list, ptr %117, i64 0, i32 2
  %119 = load ptr, ptr %118, align 8, !tbaa !17
  %120 = getelementptr inbounds %struct.tree_string, ptr %119, i64 0, i32 2
  store ptr %120, ptr %8, align 8, !tbaa !6
  %121 = getelementptr inbounds %struct.tree_list, ptr %114, i64 0, i32 2
  %122 = load ptr, ptr %121, align 8, !tbaa !17
  %123 = call zeroext i8 @parse_input_constraint(ptr noundef nonnull %8, i32 noundef %115, i32 noundef %12, i32 noundef %13, i32 noundef 0, ptr noundef nonnull %16, ptr noundef nonnull %9, ptr noundef nonnull %10) #20
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %137, label %125

125:                                              ; preds = %113
  %126 = load i8, ptr %10, align 1, !tbaa !17
  %127 = icmp eq i8 %126, 0
  %128 = load i8, ptr %9, align 1
  %129 = icmp ne i8 %128, 0
  %130 = select i1 %127, i1 %129, i1 false
  br i1 %130, label %131, label %139

131:                                              ; preds = %125
  %132 = call ptr @tree_strip_nop_conversions(ptr noundef %122) #20
  %133 = call zeroext i8 @c_mark_addressable(ptr noundef %132), !range !70
  %134 = icmp eq i8 %133, 0
  %135 = load ptr, ptr @global_trees, align 16
  %136 = select i1 %134, ptr %135, ptr %132
  br label %139

137:                                              ; preds = %113
  %138 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %139

139:                                              ; preds = %131, %125, %137
  %140 = phi ptr [ %122, %125 ], [ %138, %137 ], [ %136, %131 ]
  store ptr %140, ptr %121, align 8, !tbaa !17
  %141 = add nuw nsw i32 %115, 1
  %142 = getelementptr inbounds %struct.tree_common, ptr %114, i64 0, i32 1
  %143 = load ptr, ptr %142, align 8, !tbaa !17
  %144 = icmp eq ptr %143, null
  br i1 %144, label %145, label %113, !llvm.loop !211

145:                                              ; preds = %139, %19
  %146 = icmp eq ptr %5, null
  %147 = or i1 %18, %146
  br i1 %147, label %149, label %148

148:                                              ; preds = %145
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8245, ptr noundef nonnull @.str.8) #20
  br label %149

149:                                              ; preds = %145, %148
  %150 = call ptr (i32, i32, ...) @build_stmt(i32 noundef %0, i32 noundef 140, ptr noundef %17, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #20
  %151 = load i64, ptr %150, align 8
  %152 = and i8 %6, 1
  %153 = zext i8 %152 to i64
  %154 = shl nuw nsw i64 %153, 26
  %155 = and i64 %151, -201326593
  %156 = or i64 %155, %154
  %157 = icmp eq i32 %13, 0
  %158 = select i1 %157, i64 134217728, i64 0
  %159 = or i64 %156, %158
  store i64 %159, ptr %150, align 8
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %11) #20
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %10) #20
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %9) #20
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #20
  ret ptr %150
}

declare ptr @resolve_asm_operand_names(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @tree_strip_nop_conversions(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @parse_output_constraint(ptr noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @parse_input_constraint(ptr noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_stmt(i32 noundef, i32 noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_goto_label(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call ptr @lookup_label_for_goto(i32 noundef %0, ptr noundef %1) #20
  %4 = icmp eq ptr %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  %6 = load i64, ptr %3, align 8
  %7 = or i64 %6, 16777216
  store i64 %7, ptr %3, align 8
  %8 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %9 = tail call ptr @build1_stat(i32 noundef 134, ptr noundef %8, ptr noundef nonnull %3) #20
  %10 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 1
  store i32 %0, ptr %10, align 8, !tbaa !17
  %11 = tail call ptr @add_stmt(ptr noundef %9) #20
  br label %12

12:                                               ; preds = %2, %5
  %13 = phi ptr [ %11, %5 ], [ null, %2 ]
  ret ptr %13
}

declare ptr @lookup_label_for_goto(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_goto_ptr(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.213) #20
  %4 = tail call ptr @c_fully_fold(ptr noundef %1, i8 noundef zeroext 0, ptr noundef null) #20
  %5 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 39), align 8, !tbaa !6
  %6 = tail call ptr @convert(ptr noundef %5, ptr noundef %4) #20
  %7 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %8 = tail call ptr @build1_stat(i32 noundef 134, ptr noundef %7, ptr noundef %6) #20
  %9 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 1
  store i32 %0, ptr %9, align 8, !tbaa !17
  %10 = tail call ptr @add_stmt(ptr noundef %8) #20
  ret ptr %10
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_return(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = load i64, ptr %4, align 8
  %10 = and i64 %9, 524288
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.214) #20
  br label %14

14:                                               ; preds = %12, %3
  %15 = icmp eq ptr %1, null
  br i1 %15, label %71, label %16

16:                                               ; preds = %14
  %17 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = load i64, ptr %1, align 8
  %20 = and i64 %19, 134283263
  %21 = icmp eq i64 %20, 23
  br i1 %21, label %22, label %53

22:                                               ; preds = %16
  %23 = tail call i32 @integer_zerop(ptr noundef nonnull %1) #20
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %53, label %25

25:                                               ; preds = %22
  %26 = load i64, ptr %18, align 8
  %27 = trunc i64 %26 to i16
  switch i16 %27, label %52 [
    i16 6, label %53
    i16 7, label %53
    i16 8, label %53
    i16 10, label %28
  ]

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = load i64, ptr %30, align 8
  %32 = and i64 %31, 65535
  %33 = icmp eq i64 %32, 19
  br i1 %33, label %34, label %53

34:                                               ; preds = %28
  %35 = trunc i64 %31 to i32
  %36 = lshr i32 %35, 20
  %37 = and i32 %36, 1
  %38 = lshr i32 %35, 18
  %39 = and i32 %38, 2
  %40 = or i32 %37, %39
  %41 = getelementptr inbounds %struct.tree_type, ptr %30, i64 0, i32 6
  %42 = load i32, ptr %41, align 4
  %43 = lshr i32 %42, 11
  %44 = and i32 %43, 4
  %45 = lshr i64 %31, 48
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 65280
  %48 = or i32 %40, %47
  %49 = or i32 %48, %44
  %50 = icmp eq i32 %49, 0
  %51 = zext i1 %50 to i8
  br label %53

52:                                               ; preds = %25
  br label %53

53:                                               ; preds = %16, %22, %25, %25, %25, %28, %34, %52
  %54 = phi i8 [ 0, %22 ], [ 0, %16 ], [ 1, %25 ], [ 0, %28 ], [ %51, %34 ], [ 1, %25 ], [ 1, %25 ], [ 0, %52 ]
  %55 = load i64, ptr %1, align 8
  %56 = and i64 %55, 65535
  %57 = icmp eq i64 %56, 190
  br i1 %57, label %60, label %58

58:                                               ; preds = %53
  %59 = tail call ptr @c_fully_fold(ptr noundef nonnull %1, i8 noundef zeroext 0, ptr noundef null) #20
  br label %68

60:                                               ; preds = %53
  %61 = load ptr, ptr %17, align 8, !tbaa !17
  %62 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !17
  %64 = tail call ptr @c_fully_fold(ptr noundef %63, i8 noundef zeroext 0, ptr noundef null) #20
  %65 = icmp eq ptr %61, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  %67 = tail call ptr @build1_stat(i32 noundef 190, ptr noundef nonnull %61, ptr noundef %64) #20
  br label %68

68:                                               ; preds = %58, %60, %66
  %69 = phi ptr [ %67, %66 ], [ %64, %60 ], [ %59, %58 ]
  %70 = icmp eq ptr %69, null
  br i1 %70, label %71, label %85

71:                                               ; preds = %14, %68
  store i32 1, ptr @current_function_returns_null, align 4, !tbaa !21
  %72 = load i32, ptr @warn_return_type, align 4, !tbaa !21
  %73 = icmp ne i32 %72, 0
  %74 = load i32, ptr @flag_isoc99, align 4
  %75 = icmp ne i32 %74, 0
  %76 = select i1 %73, i1 true, i1 %75
  %77 = icmp ne ptr %8, null
  %78 = select i1 %76, i1 %77, i1 false
  br i1 %78, label %79, label %169

79:                                               ; preds = %71
  %80 = load i64, ptr %8, align 8
  %81 = and i64 %80, 65535
  %82 = icmp eq i64 %81, 19
  br i1 %82, label %169, label %83

83:                                               ; preds = %79
  %84 = select i1 %75, i32 0, i32 172
  tail call void (i32, i32, ptr, ...) @pedwarn_c99(i32 noundef %0, i32 noundef %84, ptr noundef nonnull @.str.215) #20
  br label %169

85:                                               ; preds = %68
  %86 = icmp eq ptr %8, null
  br i1 %86, label %91, label %87

87:                                               ; preds = %85
  %88 = load i64, ptr %8, align 8
  %89 = and i64 %88, 65535
  %90 = icmp eq i64 %89, 19
  br i1 %90, label %91, label %101

91:                                               ; preds = %87, %85
  store i32 1, ptr @current_function_returns_null, align 4, !tbaa !21
  %92 = getelementptr inbounds %struct.tree_common, ptr %69, i64 0, i32 2
  %93 = load ptr, ptr %92, align 8, !tbaa !17
  %94 = load i64, ptr %93, align 8
  %95 = and i64 %94, 65535
  %96 = icmp eq i64 %95, 19
  br i1 %96, label %99, label %97

97:                                               ; preds = %91
  %98 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.216) #20
  br label %169

99:                                               ; preds = %91
  %100 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef 834, ptr noundef nonnull @.str.217) #20
  br label %169

101:                                              ; preds = %87
  %102 = tail call fastcc ptr @convert_for_assignment(i32 noundef %0, ptr noundef nonnull %8, ptr noundef nonnull %69, ptr noundef %2, i32 noundef 3, i8 noundef zeroext %54, ptr noundef null, ptr noundef null, i32 noundef 0)
  %103 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %104 = getelementptr inbounds %struct.tree_decl_non_common, ptr %103, i64 0, i32 3
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  store i32 1, ptr @current_function_returns_value, align 4, !tbaa !21
  %106 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %107 = icmp eq ptr %102, %106
  br i1 %107, label %176, label %108

108:                                              ; preds = %101
  %109 = getelementptr inbounds %struct.tree_common, ptr %105, i64 0, i32 2
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = tail call ptr @convert(ptr noundef %110, ptr noundef %102) #20
  br label %112

112:                                              ; preds = %116, %108
  %113 = phi ptr [ %111, %108 ], [ %118, %116 ]
  %114 = load i64, ptr %113, align 8
  %115 = trunc i64 %114 to i16
  switch i16 %115, label %162 [
    i16 116, label %116
    i16 113, label %116
    i16 117, label %116
    i16 63, label %116
    i16 66, label %116
    i16 64, label %119
    i16 121, label %135
  ]

116:                                              ; preds = %133, %112, %112, %112, %112, %112
  %117 = getelementptr inbounds %struct.tree_exp, ptr %113, i64 0, i32 3
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  br label %112

119:                                              ; preds = %112
  %120 = getelementptr inbounds %struct.tree_exp, ptr %113, i64 1
  br label %121

121:                                              ; preds = %131, %119
  %122 = phi ptr [ %120, %119 ], [ %132, %131 ]
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  %124 = getelementptr inbounds %struct.tree_common, ptr %123, i64 0, i32 2
  %125 = load ptr, ptr %124, align 8, !tbaa !17
  %126 = load i64, ptr %125, align 8
  %127 = trunc i64 %126 to i16
  switch i16 %127, label %128 [
    i16 10, label %162
    i16 12, label %162
  ]

128:                                              ; preds = %121
  %129 = load i64, ptr %123, align 8
  %130 = trunc i64 %129 to i16
  switch i16 %130, label %133 [
    i16 116, label %131
    i16 113, label %131
    i16 117, label %131
  ]

131:                                              ; preds = %128, %128, %128
  %132 = getelementptr inbounds %struct.tree_exp, ptr %123, i64 0, i32 3
  br label %121, !llvm.loop !212

133:                                              ; preds = %128
  %134 = icmp eq i16 %127, 10
  br i1 %134, label %162, label %116

135:                                              ; preds = %112, %135
  %136 = phi ptr [ %138, %135 ], [ %113, %112 ]
  %137 = getelementptr inbounds %struct.tree_exp, ptr %136, i64 0, i32 3
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  %139 = load i64, ptr %138, align 8
  %140 = and i64 %139, 65535
  %141 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %140
  %142 = load i32, ptr %141, align 4, !tbaa !17
  %143 = icmp ne i32 %142, 4
  %144 = icmp eq i64 %140, 47
  %145 = or i1 %143, %144
  br i1 %145, label %146, label %135, !llvm.loop !213

146:                                              ; preds = %135
  %147 = icmp eq i32 %142, 3
  br i1 %147, label %148, label %162

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.tree_decl_common, ptr %138, i64 0, i32 2
  %150 = load i64, ptr %149, align 8
  %151 = and i64 %150, 33554432
  %152 = and i64 %139, 67108864
  %153 = or i64 %151, %152
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %162

155:                                              ; preds = %148
  %156 = getelementptr inbounds %struct.tree_decl_minimal, ptr %138, i64 0, i32 4
  %157 = load ptr, ptr %156, align 8, !tbaa !17
  %158 = load ptr, ptr @current_function_decl, align 8, !tbaa !6
  %159 = icmp eq ptr %157, %158
  br i1 %159, label %160, label %162

160:                                              ; preds = %155
  %161 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 0, ptr noundef nonnull @.str.218) #20
  br label %162

162:                                              ; preds = %133, %112, %121, %121, %160, %155, %148, %146
  %163 = load ptr, ptr %109, align 8, !tbaa !17
  %164 = tail call ptr @build2_stat(i32 noundef 53, ptr noundef %163, ptr noundef %105, ptr noundef %111) #20
  %165 = getelementptr inbounds %struct.tree_exp, ptr %164, i64 0, i32 1
  store i32 %0, ptr %165, align 8, !tbaa !17
  %166 = load i32, ptr @warn_sequence_point, align 4, !tbaa !21
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %169, label %168

168:                                              ; preds = %162
  tail call void @verify_sequence_points(ptr noundef nonnull %164) #20
  br label %169

169:                                              ; preds = %168, %162, %99, %97, %79, %83, %71
  %170 = phi ptr [ %69, %97 ], [ %69, %99 ], [ null, %83 ], [ null, %79 ], [ null, %71 ], [ %164, %162 ], [ %164, %168 ]
  %171 = phi i64 [ 0, %97 ], [ 0, %99 ], [ 8388608, %83 ], [ 0, %79 ], [ 0, %71 ], [ 0, %162 ], [ 0, %168 ]
  %172 = tail call ptr (i32, i32, ...) @build_stmt(i32 noundef %0, i32 noundef 135, ptr noundef %170) #20
  %173 = load i64, ptr %172, align 8
  %174 = or i64 %173, %171
  store i64 %174, ptr %172, align 8
  %175 = tail call ptr @add_stmt(ptr noundef nonnull %172) #20
  br label %176

176:                                              ; preds = %101, %169
  %177 = phi ptr [ %175, %169 ], [ null, %101 ]
  ret ptr %177
}

declare void @pedwarn_c99(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_start_case(i32 noundef %0, i32 noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = alloca %struct.expanded_location, align 8
  %5 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %6 = icmp eq ptr %5, %2
  br i1 %6, label %43, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i64, ptr %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = add nsw i32 %12, -6
  %14 = icmp ult i32 %13, 3
  br i1 %14, label %22, label %15

15:                                               ; preds = %7
  %16 = icmp eq ptr %9, %5
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  tail call void (i32, ptr, ...) @error_at(i32 noundef %1, ptr noundef nonnull @.str.219) #20
  %18 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %19

19:                                               ; preds = %17, %15
  %20 = phi ptr [ %18, %17 ], [ %5, %15 ]
  %21 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  br label %43

22:                                               ; preds = %7
  %23 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 16
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = load i32, ptr @input_location, align 4, !tbaa !21
  call void @expand_location(ptr nonnull sret(%struct.expanded_location) align 8 %4, i32 noundef %25) #20
  %26 = getelementptr inbounds %struct.expanded_location, ptr %4, i64 0, i32 3
  %27 = load i8, ptr %26, align 8, !tbaa !109
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %37

29:                                               ; preds = %22
  %30 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 7), align 8, !tbaa !6
  %31 = icmp eq ptr %24, %30
  %32 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 8), align 16
  %33 = icmp eq ptr %24, %32
  %34 = select i1 %31, i1 true, i1 %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %1, i32 noundef 202, ptr noundef nonnull @.str.220) #20
  br label %37

37:                                               ; preds = %29, %35, %22
  %38 = call ptr @c_fully_fold(ptr noundef nonnull %2, i8 noundef zeroext 0, ptr noundef null) #20
  %39 = call ptr @default_conversion(ptr noundef %38)
  %40 = load i32, ptr @warn_sequence_point, align 4, !tbaa !21
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  call void @verify_sequence_points(ptr noundef %39) #20
  br label %43

43:                                               ; preds = %37, %42, %19, %3
  %44 = phi ptr [ %20, %19 ], [ %2, %3 ], [ %9, %42 ], [ %9, %37 ]
  %45 = phi ptr [ %21, %19 ], [ %2, %3 ], [ %39, %42 ], [ %39, %37 ]
  %46 = call ptr @xmalloc(i64 noundef 40) #20
  %47 = call ptr @build3_stat(i32 noundef 138, ptr noundef %44, ptr noundef %45, ptr noundef null, ptr noundef null) #20
  store ptr %47, ptr %46, align 8, !tbaa !214
  %48 = getelementptr inbounds %struct.tree_exp, ptr %47, i64 0, i32 1
  store i32 %0, ptr %48, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.c_switch, ptr %46, i64 0, i32 1
  store ptr %44, ptr %49, align 8, !tbaa !216
  %50 = call ptr @splay_tree_new(ptr noundef nonnull @case_compare, ptr noundef null, ptr noundef null) #20
  %51 = getelementptr inbounds %struct.c_switch, ptr %46, i64 0, i32 2
  store ptr %50, ptr %51, align 8, !tbaa !217
  %52 = call ptr @c_get_switch_bindings() #20
  %53 = getelementptr inbounds %struct.c_switch, ptr %46, i64 0, i32 3
  store ptr %52, ptr %53, align 8, !tbaa !218
  %54 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %55 = getelementptr inbounds %struct.c_switch, ptr %46, i64 0, i32 4
  store ptr %54, ptr %55, align 8, !tbaa !219
  store ptr %46, ptr @c_switch_stack, align 8, !tbaa !6
  %56 = load ptr, ptr %46, align 8, !tbaa !214
  %57 = call ptr @add_stmt(ptr noundef %56) #20
  ret ptr %57
}

declare ptr @splay_tree_new(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @case_compare(i64 noundef, i64 noundef) #3

declare ptr @c_get_switch_bindings() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @do_case(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = icmp eq ptr %1, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = load i64, ptr %1, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 23
  br i1 %8, label %17, label %9

9:                                                ; preds = %5
  %10 = tail call ptr @c_fully_fold(ptr noundef nonnull %1, i8 noundef zeroext 0, ptr noundef null) #20
  %11 = load i64, ptr %10, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 23
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = load i32, ptr @input_location, align 4, !tbaa !21
  %16 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %15, i32 noundef 834, ptr noundef nonnull @.str.221) #20
  br label %17

17:                                               ; preds = %9, %14, %5, %3
  %18 = phi ptr [ %10, %14 ], [ %10, %9 ], [ %1, %5 ], [ null, %3 ]
  %19 = icmp eq ptr %2, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %17
  %21 = load i64, ptr %2, align 8
  %22 = and i64 %21, 65535
  %23 = icmp eq i64 %22, 23
  br i1 %23, label %32, label %24

24:                                               ; preds = %20
  %25 = tail call ptr @c_fully_fold(ptr noundef nonnull %2, i8 noundef zeroext 0, ptr noundef null) #20
  %26 = load i64, ptr %25, align 8
  %27 = and i64 %26, 65535
  %28 = icmp eq i64 %27, 23
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  %30 = load i32, ptr @input_location, align 4, !tbaa !21
  %31 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %30, i32 noundef 834, ptr noundef nonnull @.str.221) #20
  br label %32

32:                                               ; preds = %24, %29, %20, %17
  %33 = phi ptr [ %25, %29 ], [ %25, %24 ], [ %2, %20 ], [ null, %17 ]
  %34 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %35 = icmp eq ptr %34, null
  br i1 %35, label %36, label %40

36:                                               ; preds = %32
  %37 = icmp eq ptr %18, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %36
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.222) #20
  br label %70

39:                                               ; preds = %36
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.223) #20
  br label %70

40:                                               ; preds = %32
  %41 = getelementptr inbounds %struct.c_switch, ptr %34, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !218
  %43 = load ptr, ptr %34, align 8, !tbaa !214
  %44 = load i64, ptr %43, align 8
  %45 = and i64 %44, 65535
  %46 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !17
  %48 = add i32 %47, -4
  %49 = icmp ult i32 %48, 7
  br i1 %49, label %50, label %53

50:                                               ; preds = %40
  %51 = getelementptr inbounds %struct.tree_exp, ptr %43, i64 0, i32 1
  %52 = load i32, ptr %51, align 8, !tbaa !17
  br label %53

53:                                               ; preds = %40, %50
  %54 = phi i32 [ %52, %50 ], [ 0, %40 ]
  %55 = tail call zeroext i8 @c_check_switch_jump_warnings(ptr noundef %42, i32 noundef %54, i32 noundef %0) #20
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %70

57:                                               ; preds = %53
  %58 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %59 = getelementptr inbounds %struct.c_switch, ptr %58, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !217
  %61 = load ptr, ptr %58, align 8, !tbaa !214
  %62 = getelementptr inbounds %struct.tree_exp, ptr %61, i64 0, i32 3
  %63 = load ptr, ptr %62, align 8, !tbaa !17
  %64 = getelementptr inbounds %struct.c_switch, ptr %58, i64 0, i32 1
  %65 = load ptr, ptr %64, align 8, !tbaa !216
  %66 = tail call ptr @c_add_case_label(i32 noundef %0, ptr noundef %60, ptr noundef %63, ptr noundef %65, ptr noundef %18, ptr noundef %33) #20
  %67 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %68 = icmp eq ptr %66, %67
  %69 = select i1 %68, ptr null, ptr %66
  br label %70

70:                                               ; preds = %53, %38, %39, %57
  %71 = phi ptr [ %69, %57 ], [ null, %39 ], [ null, %38 ], [ null, %53 ]
  ret ptr %71
}

declare zeroext i8 @c_check_switch_jump_warnings(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @c_add_case_label(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_finish_case(ptr noundef %0) local_unnamed_addr #9 {
  %2 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %3 = load ptr, ptr %2, align 8, !tbaa !214
  %4 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  store ptr %0, ptr %4, align 8, !tbaa !17
  %5 = load ptr, ptr %2, align 8, !tbaa !214
  %6 = load i64, ptr %5, align 8
  %7 = and i64 %6, 65535
  %8 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !17
  %10 = add i32 %9, -4
  %11 = icmp ult i32 %10, 7
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 1
  %14 = load i32, ptr %13, align 8, !tbaa !17
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = getelementptr inbounds %struct.c_switch, ptr %2, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !217
  %19 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  tail call void @c_do_switch_warnings(ptr noundef %18, i32 noundef %16, ptr noundef %20, ptr noundef %22) #20
  %23 = getelementptr inbounds %struct.c_switch, ptr %2, i64 0, i32 4
  %24 = load ptr, ptr %23, align 8, !tbaa !219
  store ptr %24, ptr @c_switch_stack, align 8, !tbaa !6
  %25 = load ptr, ptr %17, align 8, !tbaa !217
  tail call void @splay_tree_delete(ptr noundef %25) #20
  %26 = getelementptr inbounds %struct.c_switch, ptr %2, i64 0, i32 3
  %27 = load ptr, ptr %26, align 8, !tbaa !218
  tail call void @c_release_switch_bindings(ptr noundef %27) #20
  tail call void @free(ptr noundef nonnull %2)
  ret void
}

declare void @c_do_switch_warnings(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @splay_tree_delete(ptr noundef) local_unnamed_addr #3

declare void @c_release_switch_bindings(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_finish_if_stmt(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i8 noundef zeroext %4) local_unnamed_addr #9 {
  %6 = load i32, ptr @warn_parentheses, align 4, !tbaa !21
  %7 = icmp ne i32 %6, 0
  %8 = icmp ne i8 %4, 0
  %9 = and i1 %8, %7
  %10 = icmp eq ptr %3, null
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %34

12:                                               ; preds = %5, %25
  %13 = phi ptr [ %26, %25 ], [ %2, %5 ]
  br label %14

14:                                               ; preds = %12, %27
  %15 = load i64, ptr %13, align 8
  %16 = trunc i64 %15 to i16
  switch i16 %16, label %27 [
    i16 56, label %28
    i16 58, label %17
    i16 147, label %20
    i16 131, label %22
    i16 130, label %22
  ]

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  br label %25

20:                                               ; preds = %14
  %21 = tail call ptr @expr_last(ptr noundef %2) #20
  br label %25

22:                                               ; preds = %14, %14
  %23 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %22, %20, %17
  %26 = phi ptr [ %19, %17 ], [ %21, %20 ], [ %24, %22 ]
  br label %12

27:                                               ; preds = %14
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8614, ptr noundef nonnull @.str.8) #20
  br label %14

28:                                               ; preds = %14
  %29 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 1, i32 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = icmp eq ptr %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 159, ptr noundef nonnull @.str.224) #20
  br label %34

34:                                               ; preds = %28, %32, %5
  %35 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %36 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %35, ptr noundef %1, ptr noundef %2, ptr noundef %3) #20
  %37 = getelementptr inbounds %struct.tree_exp, ptr %36, i64 0, i32 1
  store i32 %0, ptr %37, align 8, !tbaa !17
  %38 = tail call ptr @add_stmt(ptr noundef %36) #20
  ret void
}

declare ptr @expr_last(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @c_finish_loop(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, i8 noundef zeroext %6) local_unnamed_addr #9 {
  %8 = alloca ptr, align 8
  store ptr %4, ptr %8, align 8, !tbaa !6
  %9 = icmp eq ptr %1, null
  br i1 %9, label %18, label %10

10:                                               ; preds = %7
  %11 = tail call i32 @integer_zerop(ptr noundef nonnull %1) #20
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %10
  %14 = icmp eq i8 %6, 0
  br i1 %14, label %57, label %15

15:                                               ; preds = %13
  %16 = call ptr @build_and_jump(ptr noundef nonnull %8) #20
  %17 = getelementptr inbounds %struct.tree_exp, ptr %16, i64 0, i32 1
  store i32 %0, ptr %17, align 8, !tbaa !17
  br label %52

18:                                               ; preds = %10, %7
  %19 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %20 = tail call ptr @build1_stat(i32 noundef 133, ptr noundef %19, ptr noundef null) #20
  %21 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %22 = tail call ptr @build_and_jump(ptr noundef nonnull %21) #20
  br i1 %9, label %52, label %23

23:                                               ; preds = %18
  %24 = tail call i32 @integer_nonzerop(ptr noundef nonnull %1) #20
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %52

26:                                               ; preds = %23
  %27 = icmp eq i8 %6, 0
  br i1 %27, label %47, label %28

28:                                               ; preds = %26
  %29 = icmp eq ptr %2, null
  %30 = icmp ne ptr %5, null
  %31 = and i1 %29, %30
  %32 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  br i1 %31, label %37, label %33

33:                                               ; preds = %28
  %34 = tail call ptr @build1_stat(i32 noundef 133, ptr noundef %32, ptr noundef null) #20
  %35 = getelementptr inbounds %struct.tree_exp, ptr %34, i64 0, i32 3
  %36 = tail call ptr @build_and_jump(ptr noundef nonnull %35) #20
  br label %39

37:                                               ; preds = %28
  %38 = tail call ptr @build1_stat(i32 noundef 134, ptr noundef %32, ptr noundef nonnull %5) #20
  br label %39

39:                                               ; preds = %37, %33
  %40 = phi ptr [ %38, %37 ], [ %36, %33 ]
  %41 = phi ptr [ null, %37 ], [ %34, %33 ]
  %42 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 1
  store i32 %0, ptr %42, align 8, !tbaa !17
  %43 = tail call ptr @add_stmt(ptr noundef %40) #20
  %44 = call ptr @build_and_jump(ptr noundef nonnull %8) #20
  %45 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %46 = call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 56, ptr noundef %45, ptr noundef nonnull %1, ptr noundef %22, ptr noundef %44) #20
  br label %52

47:                                               ; preds = %26
  %48 = call ptr @build_and_jump(ptr noundef nonnull %8) #20
  %49 = load i32, ptr @input_location, align 4, !tbaa !21
  %50 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %51 = call ptr @fold_build3_stat_loc(i32 noundef %49, i32 noundef 56, ptr noundef %50, ptr noundef nonnull %1, ptr noundef %22, ptr noundef %48) #20
  br label %52

52:                                               ; preds = %18, %23, %47, %39, %15
  %53 = phi ptr [ %16, %15 ], [ %20, %39 ], [ %20, %47 ], [ %20, %23 ], [ %20, %18 ]
  %54 = phi ptr [ null, %15 ], [ %46, %39 ], [ %51, %47 ], [ %22, %23 ], [ %22, %18 ]
  %55 = phi ptr [ null, %15 ], [ %41, %39 ], [ null, %47 ], [ null, %23 ], [ null, %18 ]
  %56 = call ptr @add_stmt(ptr noundef %53) #20
  br label %57

57:                                               ; preds = %52, %13
  %58 = phi ptr [ null, %13 ], [ %54, %52 ]
  %59 = phi ptr [ null, %13 ], [ %55, %52 ]
  %60 = icmp eq ptr %3, null
  br i1 %60, label %63, label %61

61:                                               ; preds = %57
  %62 = call ptr @add_stmt(ptr noundef nonnull %3) #20
  br label %63

63:                                               ; preds = %61, %57
  %64 = icmp eq ptr %5, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %63
  %66 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %67 = call ptr @build1_stat(i32 noundef 133, ptr noundef %66, ptr noundef nonnull %5) #20
  %68 = call ptr @add_stmt(ptr noundef %67) #20
  br label %69

69:                                               ; preds = %65, %63
  %70 = icmp eq ptr %2, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %69
  %72 = call ptr @add_stmt(ptr noundef nonnull %2) #20
  br label %73

73:                                               ; preds = %71, %69
  %74 = icmp eq ptr %59, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %73
  %76 = call ptr @add_stmt(ptr noundef nonnull %59) #20
  br label %77

77:                                               ; preds = %75, %73
  %78 = icmp eq ptr %58, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = call ptr @add_stmt(ptr noundef nonnull %58) #20
  br label %81

81:                                               ; preds = %79, %77
  %82 = load ptr, ptr %8, align 8, !tbaa !6
  %83 = icmp eq ptr %82, null
  br i1 %83, label %88, label %84

84:                                               ; preds = %81
  %85 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %86 = call ptr @build1_stat(i32 noundef 133, ptr noundef %85, ptr noundef nonnull %82) #20
  %87 = call ptr @add_stmt(ptr noundef %86) #20
  br label %88

88:                                               ; preds = %84, %81
  ret void
}

declare ptr @build_and_jump(ptr noundef) local_unnamed_addr #3

declare i32 @integer_nonzerop(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_bc_stmt(i32 noundef %0, ptr nocapture noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = load ptr, ptr %1, align 8, !tbaa !6
  %5 = tail call ptr @current_stmt_tree() #20
  %6 = load ptr, ptr %5, align 8, !tbaa !220
  %7 = tail call zeroext i8 @block_may_fallthru(ptr noundef %6) #20
  %8 = icmp eq i8 %7, 0
  %9 = icmp eq ptr %4, null
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  br i1 %8, label %40, label %11

11:                                               ; preds = %10
  %12 = tail call ptr @create_artificial_label(i32 noundef %0) #20
  store ptr %12, ptr %1, align 8, !tbaa !6
  br label %30

13:                                               ; preds = %3
  %14 = load i64, ptr %4, align 8
  %15 = and i64 %14, 65535
  %16 = icmp eq i64 %15, 30
  br i1 %16, label %29, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !17
  switch i64 %19, label %28 [
    i64 0, label %20
    i64 1, label %24
  ]

20:                                               ; preds = %17
  %21 = icmp eq i8 %2, 0
  br i1 %21, label %23, label %22

22:                                               ; preds = %20
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.225) #20
  br label %40

23:                                               ; preds = %20
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.226) #20
  br label %40

24:                                               ; preds = %17
  %25 = icmp eq i8 %2, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %24
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8735, ptr noundef nonnull @.str.8) #20
  br label %27

27:                                               ; preds = %24, %26
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.227) #20
  br label %40

28:                                               ; preds = %17
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 8740, ptr noundef nonnull @.str.8) #20
  br label %29

29:                                               ; preds = %28, %13
  br i1 %8, label %40, label %30

30:                                               ; preds = %11, %29
  %31 = phi ptr [ %12, %11 ], [ %4, %29 ]
  %32 = icmp eq i8 %2, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  %34 = tail call ptr @build_predict_expr(i32 noundef 8, i32 noundef 0) #20
  %35 = tail call ptr @add_stmt(ptr noundef %34) #20
  br label %36

36:                                               ; preds = %33, %30
  %37 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %38 = tail call ptr @build1_stat(i32 noundef 134, ptr noundef %37, ptr noundef %31) #20
  %39 = tail call ptr @add_stmt(ptr noundef %38) #20
  br label %40

40:                                               ; preds = %10, %29, %22, %23, %36, %27
  %41 = phi ptr [ %39, %36 ], [ null, %27 ], [ null, %23 ], [ null, %22 ], [ null, %29 ], [ null, %10 ]
  ret ptr %41
}

declare zeroext i8 @block_may_fallthru(ptr noundef) local_unnamed_addr #3

declare ptr @current_stmt_tree() local_unnamed_addr #3

declare ptr @create_artificial_label(i32 noundef) local_unnamed_addr #3

declare ptr @build_predict_expr(i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_process_expr_stmt(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %59, label %4

4:                                                ; preds = %2
  %5 = tail call ptr @c_fully_fold(ptr noundef nonnull %1, i8 noundef zeroext 0, ptr noundef null) #20
  %6 = load i32, ptr @warn_sequence_point, align 4, !tbaa !21
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @verify_sequence_points(ptr noundef %5) #20
  br label %9

9:                                                ; preds = %8, %4
  %10 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %13 = icmp eq ptr %11, %12
  br i1 %13, label %22, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.tree_type, ptr %11, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %22

18:                                               ; preds = %14
  %19 = load i64, ptr %11, align 8
  %20 = trunc i64 %19 to i16
  switch i16 %20, label %21 [
    i16 19, label %22
    i16 15, label %22
  ]

21:                                               ; preds = %18
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.228) #20
  br label %22

22:                                               ; preds = %18, %18, %21, %14, %9
  %23 = tail call ptr @current_stmt_tree() #20
  %24 = load ptr, ptr %23, align 8, !tbaa !220
  %25 = load i64, ptr %24, align 8
  %26 = and i64 %25, 17179869184
  %27 = icmp ne i64 %26, 0
  %28 = load i32, ptr @warn_unused_value, align 4
  %29 = icmp eq i32 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = load ptr, ptr @global_trees, align 16
  %32 = icmp eq ptr %31, %5
  %33 = select i1 %30, i1 true, i1 %32
  br i1 %33, label %50, label %34

34:                                               ; preds = %22
  %35 = load i64, ptr %5, align 8
  %36 = and i64 %35, 65536
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %48

38:                                               ; preds = %34
  %39 = load ptr, ptr %10, align 8, !tbaa !17
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 65535
  %42 = icmp ne i64 %41, 19
  %43 = and i64 %35, 8388608
  %44 = icmp eq i64 %43, 0
  %45 = and i1 %44, %42
  br i1 %45, label %46, label %50

46:                                               ; preds = %38
  %47 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 229, ptr noundef nonnull @.str.229) #20
  br label %50

48:                                               ; preds = %34
  %49 = tail call i32 @warn_if_unused_value(ptr noundef nonnull %5, i32 noundef %0) #20
  br label %50

50:                                               ; preds = %48, %46, %38, %22
  %51 = load i64, ptr %5, align 8
  %52 = and i64 %51, 65535
  %53 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !17
  switch i32 %54, label %59 [
    i32 3, label %55
    i32 1, label %55
  ]

55:                                               ; preds = %50, %50
  %56 = load ptr, ptr %10, align 8, !tbaa !17
  %57 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %56, ptr noundef nonnull %5) #20
  %58 = getelementptr inbounds %struct.tree_exp, ptr %57, i64 0, i32 1
  store i32 %0, ptr %58, align 8, !tbaa !17
  br label %59

59:                                               ; preds = %55, %50, %2
  %60 = phi ptr [ null, %2 ], [ %57, %55 ], [ %5, %50 ]
  ret ptr %60
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_expr_stmt(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = icmp eq ptr %1, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %2
  %5 = tail call ptr @c_process_expr_stmt(i32 noundef %0, ptr noundef nonnull %1)
  %6 = tail call ptr @add_stmt(ptr noundef %5) #20
  br label %7

7:                                                ; preds = %2, %4
  %8 = phi ptr [ %6, %4 ], [ null, %2 ]
  ret ptr %8
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_begin_stmt_expr() local_unnamed_addr #9 {
  tail call void @keep_next_level() #20
  %1 = tail call ptr @push_stmt_list() #20
  tail call void @push_scope() #20
  %2 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %3 = icmp eq ptr %2, null
  br i1 %3, label %7, label %4

4:                                                ; preds = %0
  %5 = getelementptr inbounds %struct.c_switch, ptr %2, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !218
  br label %7

7:                                                ; preds = %0, %4
  %8 = phi ptr [ %6, %4 ], [ null, %0 ]
  tail call void @c_bindings_start_stmt_expr(ptr noundef %8) #20
  %9 = load i64, ptr %1, align 8
  %10 = or i64 %9, 17179869184
  store i64 %10, ptr %1, align 8
  ret ptr %1
}

declare void @keep_next_level() local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_begin_compound_stmt(i8 noundef zeroext %0) local_unnamed_addr #9 {
  %2 = tail call ptr @push_stmt_list() #20
  %3 = icmp eq i8 %0, 0
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void @push_scope() #20
  br label %5

5:                                                ; preds = %4, %1
  ret ptr %2
}

declare void @c_bindings_start_stmt_expr(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_stmt_expr(i32 noundef %0, ptr noundef %1) local_unnamed_addr #9 {
  %3 = tail call ptr @c_end_compound_stmt(i32 noundef %0, ptr noundef %1, i8 noundef zeroext 1)
  %4 = load ptr, ptr @c_switch_stack, align 8, !tbaa !6
  %5 = icmp eq ptr %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.c_switch, ptr %4, i64 0, i32 3
  %8 = load ptr, ptr %7, align 8, !tbaa !218
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi ptr [ %8, %6 ], [ null, %2 ]
  tail call void @c_bindings_end_stmt_expr(ptr noundef %10) #20
  %11 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %12 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  br label %13

13:                                               ; preds = %84, %9
  %14 = phi ptr [ %12, %9 ], [ %85, %84 ]
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i64, ptr %15, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 147
  br i1 %18, label %19, label %78

19:                                               ; preds = %13
  %20 = and i64 %16, 65536
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %138, label %22

22:                                               ; preds = %19
  %23 = load i32, ptr @warn_unused_value, align 4, !tbaa !21
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %71, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.tree_statement_list, ptr %15, i64 0, i32 1
  br label %27

27:                                               ; preds = %69, %25
  %28 = phi ptr [ %26, %25 ], [ %70, %69 ]
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = icmp eq ptr %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.tree_statement_list_node, ptr %29, i64 0, i32 1
  %33 = load ptr, ptr %32, align 8, !tbaa !222
  %34 = icmp eq ptr %33, null
  br i1 %34, label %74, label %35

35:                                               ; preds = %27, %31
  %36 = getelementptr i8, ptr %29, i64 16
  %37 = load ptr, ptr %36, align 8, !tbaa !224
  %38 = load i64, ptr %37, align 8
  %39 = and i64 %38, 65535
  %40 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %39
  %41 = load i32, ptr %40, align 4, !tbaa !17
  %42 = add i32 %41, -4
  %43 = icmp ult i32 %42, 7
  br i1 %43, label %44, label %49

44:                                               ; preds = %35
  %45 = getelementptr inbounds %struct.tree_exp, ptr %37, i64 0, i32 1
  %46 = load i32, ptr %45, align 8, !tbaa !17
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i32 %0, i32 %46
  br label %49

49:                                               ; preds = %44, %35
  %50 = phi i32 [ %0, %35 ], [ %48, %44 ]
  %51 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %52 = icmp eq ptr %51, %37
  br i1 %52, label %69, label %53

53:                                               ; preds = %49
  %54 = and i64 %38, 65536
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %67

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.tree_common, ptr %37, i64 0, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  %59 = load i64, ptr %58, align 8
  %60 = and i64 %59, 65535
  %61 = icmp ne i64 %60, 19
  %62 = and i64 %38, 8388608
  %63 = icmp eq i64 %62, 0
  %64 = and i1 %63, %61
  br i1 %64, label %65, label %69

65:                                               ; preds = %56
  %66 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %50, i32 noundef 229, ptr noundef nonnull @.str.229) #20
  br label %69

67:                                               ; preds = %53
  %68 = tail call i32 @warn_if_unused_value(ptr noundef nonnull %37, i32 noundef %50) #20
  br label %69

69:                                               ; preds = %49, %56, %65, %67
  %70 = getelementptr inbounds %struct.tree_statement_list_node, ptr %29, i64 0, i32 1
  br label %27, !llvm.loop !225

71:                                               ; preds = %22
  %72 = getelementptr inbounds %struct.tree_statement_list, ptr %15, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  br label %74

74:                                               ; preds = %31, %71
  %75 = phi ptr [ %73, %71 ], [ %29, %31 ]
  %76 = getelementptr inbounds %struct.tree_statement_list_node, ptr %75, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !6
  br label %78

78:                                               ; preds = %74, %13
  %79 = phi ptr [ %14, %13 ], [ %76, %74 ]
  %80 = phi ptr [ %15, %13 ], [ %77, %74 ]
  %81 = load i64, ptr %80, align 8
  %82 = and i64 %81, 65534
  %83 = icmp eq i64 %82, 130
  br i1 %83, label %84, label %86

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.tree_exp, ptr %80, i64 0, i32 3
  br label %13

86:                                               ; preds = %78
  %87 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %88 = icmp eq ptr %80, %87
  br i1 %88, label %138, label %89

89:                                               ; preds = %86
  %90 = load ptr, ptr %12, align 8, !tbaa !17
  %91 = icmp eq ptr %80, %90
  br i1 %91, label %92, label %99

92:                                               ; preds = %89
  %93 = load ptr, ptr %11, align 8, !tbaa !17
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %99

95:                                               ; preds = %92
  %96 = tail call ptr @c_wrap_maybe_const(ptr noundef nonnull %80, i8 noundef zeroext 1) #20
  %97 = load i64, ptr %96, align 8
  %98 = or i64 %97, 8388608
  store i64 %98, ptr %96, align 8
  br label %138

99:                                               ; preds = %92, %89
  %100 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8, !tbaa !17
  %102 = icmp eq ptr %101, null
  br i1 %102, label %138, label %103

103:                                              ; preds = %99
  %104 = load i64, ptr %101, align 8
  %105 = and i64 %104, 65535
  %106 = icmp eq i64 %105, 19
  br i1 %106, label %138, label %107

107:                                              ; preds = %103
  %108 = tail call ptr @create_tmp_var_raw(ptr noundef nonnull %101, ptr noundef null) #20
  %109 = load i64, ptr %80, align 8
  %110 = and i64 %109, 65535
  %111 = icmp eq i64 %110, 116
  br i1 %111, label %112, label %120

112:                                              ; preds = %107
  %113 = load ptr, ptr %100, align 8, !tbaa !17
  %114 = getelementptr inbounds %struct.tree_exp, ptr %80, i64 0, i32 3
  %115 = load ptr, ptr %114, align 8, !tbaa !17
  %116 = getelementptr inbounds %struct.tree_common, ptr %115, i64 0, i32 2
  %117 = load ptr, ptr %116, align 8, !tbaa !17
  %118 = icmp eq ptr %113, %117
  %119 = select i1 %118, ptr %115, ptr %80
  br label %120

120:                                              ; preds = %112, %107
  %121 = phi ptr [ %80, %107 ], [ %119, %112 ]
  %122 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %123 = tail call ptr @build2_stat(i32 noundef 53, ptr noundef %122, ptr noundef %108, ptr noundef %121) #20
  store ptr %123, ptr %79, align 8, !tbaa !6
  %124 = load i64, ptr %80, align 8
  %125 = and i64 %124, 65535
  %126 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %125
  %127 = load i32, ptr %126, align 4, !tbaa !17
  %128 = add i32 %127, -4
  %129 = icmp ult i32 %128, 7
  br i1 %129, label %130, label %133

130:                                              ; preds = %120
  %131 = getelementptr inbounds %struct.tree_exp, ptr %80, i64 0, i32 1
  %132 = load i32, ptr %131, align 8, !tbaa !17
  br label %133

133:                                              ; preds = %120, %130
  %134 = phi i32 [ %132, %130 ], [ 0, %120 ]
  %135 = getelementptr inbounds %struct.tree_exp, ptr %123, i64 0, i32 1
  store i32 %134, ptr %135, align 8, !tbaa !17
  %136 = tail call ptr @build4_stat(i32 noundef 55, ptr noundef nonnull %101, ptr noundef %108, ptr noundef nonnull %3, ptr noundef null, ptr noundef null) #20
  %137 = getelementptr inbounds %struct.tree_exp, ptr %136, i64 0, i32 1
  store i32 %0, ptr %137, align 8, !tbaa !17
  br label %138

138:                                              ; preds = %19, %99, %103, %86, %133, %95
  %139 = phi ptr [ %96, %95 ], [ %136, %133 ], [ %80, %86 ], [ %3, %103 ], [ %3, %99 ], [ %3, %19 ]
  ret ptr %139
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_end_compound_stmt(i32 noundef %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = icmp eq i8 %2, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = load i32, ptr @c_language, align 4, !tbaa !17
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void @objc_clear_super_receiver() #20
  br label %10

10:                                               ; preds = %9, %5
  %11 = tail call ptr @pop_scope() #20
  br label %12

12:                                               ; preds = %10, %3
  %13 = phi ptr [ %11, %10 ], [ null, %3 ]
  %14 = tail call ptr @pop_stmt_list(ptr noundef %1) #20
  %15 = tail call ptr @c_build_bind_expr(i32 noundef %0, ptr noundef %13, ptr noundef %14) #20
  %16 = tail call ptr @current_stmt_tree() #20
  %17 = load ptr, ptr %16, align 8, !tbaa !220
  %18 = icmp eq ptr %17, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %12
  %20 = tail call ptr @current_stmt_tree() #20
  %21 = load ptr, ptr %20, align 8, !tbaa !220
  %22 = load i64, ptr %21, align 8
  %23 = and i64 %22, 17179869184
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %19
  %26 = load i64, ptr %15, align 8
  %27 = and i64 %26, 65535
  %28 = icmp eq i64 %27, 58
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %31 = tail call ptr @build3_stat(i32 noundef 58, ptr noundef %30, ptr noundef null, ptr noundef nonnull %15, ptr noundef null) #20
  %32 = load i64, ptr %31, align 8
  %33 = or i64 %32, 65536
  store i64 %33, ptr %31, align 8
  %34 = getelementptr inbounds %struct.tree_exp, ptr %31, i64 0, i32 1
  store i32 %0, ptr %34, align 8, !tbaa !17
  br label %35

35:                                               ; preds = %29, %25, %19, %12
  %36 = phi ptr [ %31, %29 ], [ %15, %25 ], [ %15, %19 ], [ %15, %12 ]
  ret ptr %36
}

declare void @c_bindings_end_stmt_expr(ptr noundef) local_unnamed_addr #3

declare ptr @create_tmp_var_raw(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @push_stmt_list() local_unnamed_addr #3

declare void @push_scope() local_unnamed_addr #3

declare void @objc_clear_super_receiver() local_unnamed_addr #3

declare ptr @pop_scope() local_unnamed_addr #3

declare ptr @pop_stmt_list(ptr noundef) local_unnamed_addr #3

declare ptr @c_build_bind_expr(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @push_cleanup(ptr nocapture noundef readonly %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #9 {
  %4 = icmp eq i8 %2, 0
  %5 = select i1 %4, i32 131, i32 130
  %6 = getelementptr inbounds %struct.tree_decl_minimal, ptr %0, i64 0, i32 1
  %7 = load i32, ptr %6, align 8, !tbaa !17
  %8 = tail call ptr (i32, i32, ...) @build_stmt(i32 noundef %7, i32 noundef %5, ptr noundef null, ptr noundef %1) #20
  %9 = tail call ptr @add_stmt(ptr noundef %8) #20
  %10 = tail call ptr @current_stmt_tree() #20
  %11 = load ptr, ptr %10, align 8, !tbaa !220
  %12 = load i64, ptr %11, align 8
  %13 = and i64 %12, 17179869184
  %14 = tail call ptr @push_stmt_list() #20
  %15 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  store ptr %14, ptr %15, align 8, !tbaa !17
  %16 = load i64, ptr %14, align 8
  %17 = and i64 %16, -17179869185
  %18 = or i64 %17, %13
  store i64 %18, ptr %14, align 8
  ret void
}

declare ptr @excess_precision_type(ptr noundef) local_unnamed_addr #3

declare ptr @pointer_int_sum(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @pointer_diff(i32 noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #9 {
  %4 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 43), align 8, !tbaa !6
  %5 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = load i64, ptr %8, align 8
  %10 = lshr i64 %9, 56
  %11 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = load i64, ptr %14, align 8
  %16 = lshr i64 %15, 56
  %17 = trunc i64 %10 to i32
  %18 = trunc i64 %16 to i32
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %41, label %20

20:                                               ; preds = %3
  %21 = trunc i64 %16 to i8
  %22 = trunc i64 %10 to i8
  %23 = icmp eq i8 %22, %21
  br i1 %23, label %33, label %24

24:                                               ; preds = %20
  %25 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %26 = tail call zeroext i8 %25(i8 noundef zeroext %22, i8 noundef zeroext %21) #20
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 57, i32 5), align 8, !tbaa !43
  %30 = tail call zeroext i8 %29(i8 noundef zeroext %21, i8 noundef zeroext %22) #20
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  tail call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 3182, ptr noundef nonnull @.str.8) #20
  br label %33

33:                                               ; preds = %28, %24, %20, %32
  %34 = load ptr, ptr %5, align 8, !tbaa !17
  %35 = load ptr, ptr %11, align 8, !tbaa !17
  %36 = tail call fastcc ptr @common_pointer_type(ptr noundef %34, ptr noundef %35)
  %37 = tail call ptr @convert(ptr noundef %36, ptr noundef nonnull %1) #20
  %38 = tail call ptr @convert(ptr noundef %36, ptr noundef nonnull %2) #20
  %39 = getelementptr inbounds %struct.tree_common, ptr %37, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  br label %41

41:                                               ; preds = %33, %3
  %42 = phi ptr [ %40, %33 ], [ %6, %3 ]
  %43 = phi ptr [ %38, %33 ], [ %2, %3 ]
  %44 = phi ptr [ %37, %33 ], [ %1, %3 ]
  %45 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %46 = load i32, ptr %45, align 4
  %47 = and i32 %46, 1023
  %48 = getelementptr inbounds %struct.tree_common, ptr %44, i64 0, i32 2
  %49 = getelementptr inbounds %struct.tree_type, ptr %42, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = and i32 %50, 1023
  %52 = icmp ult i32 %47, %51
  br i1 %52, label %53, label %56

53:                                               ; preds = %41
  %54 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 3), align 8, !tbaa !226
  %55 = tail call ptr %54(i32 noundef %51, i32 noundef 0) #20
  br label %56

56:                                               ; preds = %41, %53
  %57 = phi ptr [ %55, %53 ], [ %4, %41 ]
  %58 = load i64, ptr %8, align 8
  %59 = and i64 %58, 65535
  %60 = icmp eq i64 %59, 19
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = load i32, ptr @pedantic, align 4, !tbaa !21
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, i32 162, i32 834
  %65 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %64, ptr noundef nonnull @.str.243) #20
  %66 = load i64, ptr %8, align 8
  br label %67

67:                                               ; preds = %61, %56
  %68 = phi i64 [ %66, %61 ], [ %58, %56 ]
  %69 = and i64 %68, 65535
  %70 = icmp eq i64 %69, 20
  br i1 %70, label %71, label %76

71:                                               ; preds = %67
  %72 = load i32, ptr @pedantic, align 4, !tbaa !21
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, i32 162, i32 834
  %75 = tail call zeroext i8 (i32, i32, ptr, ...) @pedwarn(i32 noundef %0, i32 noundef %74, ptr noundef nonnull @.str.244) #20
  br label %76

76:                                               ; preds = %71, %67
  %77 = load i64, ptr %44, align 8
  %78 = trunc i64 %77 to i16
  switch i16 %78, label %92 [
    i16 116, label %79
    i16 113, label %79
  ]

79:                                               ; preds = %76, %76
  %80 = load ptr, ptr %48, align 8, !tbaa !17
  %81 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 6
  %82 = load i32, ptr %81, align 4
  %83 = getelementptr inbounds %struct.tree_exp, ptr %44, i64 0, i32 3
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  %85 = getelementptr inbounds %struct.tree_common, ptr %84, i64 0, i32 2
  %86 = load ptr, ptr %85, align 8, !tbaa !17
  %87 = getelementptr inbounds %struct.tree_type, ptr %86, i64 0, i32 6
  %88 = load i32, ptr %87, align 4
  %89 = xor i32 %88, %82
  %90 = and i32 %89, 1023
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %93, label %92

92:                                               ; preds = %76, %79
  br label %93

93:                                               ; preds = %79, %92
  %94 = phi ptr [ %44, %92 ], [ %84, %79 ]
  %95 = load i64, ptr %43, align 8
  %96 = trunc i64 %95 to i16
  switch i16 %96, label %111 [
    i16 116, label %97
    i16 113, label %97
  ]

97:                                               ; preds = %93, %93
  %98 = getelementptr inbounds %struct.tree_common, ptr %43, i64 0, i32 2
  %99 = load ptr, ptr %98, align 8, !tbaa !17
  %100 = getelementptr inbounds %struct.tree_type, ptr %99, i64 0, i32 6
  %101 = load i32, ptr %100, align 4
  %102 = getelementptr inbounds %struct.tree_exp, ptr %43, i64 0, i32 3
  %103 = load ptr, ptr %102, align 8, !tbaa !17
  %104 = getelementptr inbounds %struct.tree_common, ptr %103, i64 0, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  %106 = getelementptr inbounds %struct.tree_type, ptr %105, i64 0, i32 6
  %107 = load i32, ptr %106, align 4
  %108 = xor i32 %107, %101
  %109 = and i32 %108, 1023
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %112, label %111

111:                                              ; preds = %93, %97
  br label %112

112:                                              ; preds = %97, %111
  %113 = phi ptr [ %43, %111 ], [ %103, %97 ]
  %114 = load i64, ptr %94, align 8
  %115 = and i64 %114, 65535
  %116 = icmp eq i64 %115, 63
  br i1 %116, label %117, label %121

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.tree_exp, ptr %94, i64 0, i32 3
  %119 = getelementptr inbounds %struct.tree_exp, ptr %94, i64 1
  %120 = load ptr, ptr %118, align 8, !tbaa !17
  br label %121

121:                                              ; preds = %112, %117
  %122 = phi ptr [ %120, %117 ], [ %94, %112 ]
  %123 = phi ptr [ %119, %117 ], [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), %112 ]
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = load i64, ptr %113, align 8
  %126 = and i64 %125, 65535
  %127 = icmp eq i64 %126, 63
  br i1 %127, label %128, label %132

128:                                              ; preds = %121
  %129 = getelementptr inbounds %struct.tree_exp, ptr %113, i64 0, i32 3
  %130 = getelementptr inbounds %struct.tree_exp, ptr %113, i64 1
  %131 = load ptr, ptr %129, align 8, !tbaa !17
  br label %132

132:                                              ; preds = %121, %128
  %133 = phi ptr [ %131, %128 ], [ %113, %121 ]
  %134 = phi ptr [ %130, %128 ], [ getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), %121 ]
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  %136 = tail call i32 @operand_equal_p(ptr noundef %122, ptr noundef %133, i32 noundef 0) #20
  %137 = icmp eq i32 %136, 0
  %138 = select i1 %137, ptr %43, ptr %135
  %139 = select i1 %137, ptr %44, ptr %124
  %140 = tail call ptr @convert(ptr noundef %57, ptr noundef %139) #20
  %141 = tail call ptr @convert(ptr noundef %57, ptr noundef %138) #20
  %142 = tail call ptr @build_binary_op(i32 noundef %0, i32 noundef 64, ptr noundef %140, ptr noundef %141, i32 noundef 0)
  %143 = load ptr, ptr %11, align 8, !tbaa !17
  %144 = getelementptr inbounds %struct.tree_common, ptr %143, i64 0, i32 2
  %145 = load ptr, ptr %144, align 8, !tbaa !17
  %146 = getelementptr inbounds %struct.tree_type, ptr %145, i64 0, i32 2
  %147 = load ptr, ptr %146, align 8, !tbaa !17
  %148 = icmp eq ptr %147, null
  br i1 %148, label %149, label %154

149:                                              ; preds = %132
  %150 = load i64, ptr %145, align 8
  %151 = and i64 %150, 65535
  %152 = icmp eq i64 %151, 19
  br i1 %152, label %154, label %153

153:                                              ; preds = %149
  tail call void (i32, ptr, ...) @error_at(i32 noundef %0, ptr noundef nonnull @.str.121) #20
  br label %154

154:                                              ; preds = %153, %149, %132
  %155 = load i64, ptr %8, align 8
  %156 = trunc i64 %155 to i16
  switch i16 %156, label %159 [
    i16 20, label %157
    i16 19, label %157
    i16 0, label %157
  ]

157:                                              ; preds = %154, %154, %154
  %158 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  br label %177

159:                                              ; preds = %154
  %160 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 2
  %161 = load ptr, ptr %160, align 8, !tbaa !17
  %162 = icmp eq ptr %161, null
  br i1 %162, label %163, label %165

163:                                              ; preds = %159
  tail call void (ptr, ...) @error(ptr noundef nonnull @.str.121) #20
  %164 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  br label %177

165:                                              ; preds = %159
  %166 = load i32, ptr @input_location, align 4, !tbaa !21
  %167 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 3
  %168 = load ptr, ptr %167, align 8, !tbaa !17
  %169 = load ptr, ptr @integer_types, align 16, !tbaa !6
  %170 = getelementptr inbounds %struct.tree_type, ptr %169, i64 0, i32 6
  %171 = load i32, ptr %170, align 4
  %172 = lshr i32 %171, 3
  %173 = and i32 %172, 127
  %174 = zext i32 %173 to i64
  %175 = tail call ptr @size_int_kind(i64 noundef %174, i32 noundef 0) #20
  %176 = tail call ptr @size_binop_loc(i32 noundef %166, i32 noundef 68, ptr noundef %168, ptr noundef %175) #20
  br label %177

177:                                              ; preds = %157, %163, %165
  %178 = phi ptr [ %158, %157 ], [ %176, %165 ], [ %164, %163 ]
  %179 = tail call ptr @convert(ptr noundef %57, ptr noundef %178) #20
  %180 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 76, ptr noundef %57, ptr noundef %142, ptr noundef %179) #20
  %181 = tail call ptr @convert(ptr noundef nonnull %4, ptr noundef %180) #20
  ret ptr %181
}

declare void @warn_for_div_by_zero(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @c_common_truthvalue_conversion(i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @decl_with_nonnull_addr_p(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @same_scalar_type_ignoring_signedness(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @binary_op_error(i32 noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @shorten_binary_op(ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @get_narrower(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @c_common_signed_or_unsigned_type(i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @shorten_compare(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @warn_for_sign_compare(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @fold_build2_initializer_loc(i32 noundef, i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @operand_equal_p(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define dso_local ptr @c_expr_to_decl(ptr noundef readonly %0, ptr nocapture noundef readnone %1, ptr nocapture noundef writeonly %2) local_unnamed_addr #17 {
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 119
  br i1 %6, label %7, label %16

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = load i64, ptr %11, align 8
  %13 = and i64 %12, 67108864
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %7
  store i8 1, ptr %2, align 1, !tbaa !17
  br label %16

16:                                               ; preds = %3, %7, %15
  %17 = phi ptr [ %11, %15 ], [ %11, %7 ], [ %0, %3 ]
  ret ptr %17
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_begin_omp_parallel() local_unnamed_addr #9 {
  tail call void @keep_next_level() #20
  %1 = tail call ptr @push_stmt_list() #20
  tail call void @push_scope() #20
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_omp_parallel(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @c_end_compound_stmt(i32 noundef %0, ptr noundef %2, i8 noundef zeroext 1)
  %5 = tail call ptr @make_node_stat(i32 noundef 153) #20
  %6 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %7 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !17
  %8 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %9 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  store ptr %1, ptr %9, align 8, !tbaa !17
  store ptr %4, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 1
  store i32 %0, ptr %10, align 8, !tbaa !17
  %11 = tail call ptr @add_stmt(ptr noundef %5) #20
  ret ptr %11
}

declare ptr @make_node_stat(i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_begin_omp_task() local_unnamed_addr #9 {
  tail call void @keep_next_level() #20
  %1 = tail call ptr @push_stmt_list() #20
  tail call void @push_scope() #20
  ret ptr %1
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_omp_task(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = tail call ptr @c_end_compound_stmt(i32 noundef %0, ptr noundef %2, i8 noundef zeroext 1)
  %5 = tail call ptr @make_node_stat(i32 noundef 154) #20
  %6 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %7 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  store ptr %6, ptr %7, align 8, !tbaa !17
  %8 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %9 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  store ptr %1, ptr %9, align 8, !tbaa !17
  store ptr %4, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 1
  store i32 %0, ptr %10, align 8, !tbaa !17
  %11 = tail call ptr @add_stmt(ptr noundef %5) #20
  ret ptr %11
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_finish_omp_clauses(ptr noundef %0) local_unnamed_addr #9 {
  %2 = alloca ptr, align 8
  %3 = alloca %struct.bitmap_head_def, align 8
  %4 = alloca %struct.bitmap_head_def, align 8
  %5 = alloca %struct.bitmap_head_def, align 8
  store ptr %0, ptr %2, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #20
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #20
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #20
  tail call void @bitmap_obstack_initialize(ptr noundef null) #20
  %6 = getelementptr inbounds %struct.bitmap_head_def, ptr %3, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %3, i8 0, i64 16, i1 false)
  store ptr @bitmap_default_obstack, ptr %6, align 8, !tbaa !234
  %7 = getelementptr inbounds %struct.bitmap_head_def, ptr %4, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %4, i8 0, i64 16, i1 false)
  store ptr @bitmap_default_obstack, ptr %7, align 8, !tbaa !234
  %8 = getelementptr inbounds %struct.bitmap_head_def, ptr %5, i64 0, i32 3
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  store ptr @bitmap_default_obstack, ptr %8, align 8, !tbaa !234
  %9 = icmp eq ptr %0, null
  br i1 %9, label %199, label %10

10:                                               ; preds = %1, %193
  %11 = phi ptr [ %194, %193 ], [ %0, %1 ]
  %12 = phi ptr [ %195, %193 ], [ %2, %1 ]
  %13 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 2
  %14 = load i32, ptr %13, align 4, !tbaa !17
  switch i32 %14, label %127 [
    i32 2, label %59
    i32 1, label %15
    i32 5, label %16
    i32 7, label %44
    i32 6, label %45
    i32 3, label %87
    i32 4, label %107
    i32 8, label %190
    i32 9, label %190
    i32 10, label %190
    i32 11, label %190
    i32 12, label %190
    i32 13, label %190
    i32 15, label %190
    i32 14, label %190
  ]

15:                                               ; preds = %10
  br label %59

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = load i64, ptr %20, align 8
  %22 = trunc i64 %21 to i16
  switch i16 %22, label %59 [
    i16 15, label %23
    i16 16, label %23
    i16 17, label %23
    i16 18, label %23
    i16 10, label %23
    i16 12, label %23
    i16 9, label %32
    i16 13, label %26
    i16 14, label %26
  ]

23:                                               ; preds = %16, %16, %16, %16, %16, %16
  %24 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %25 = load i32, ptr %24, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %25, ptr noundef nonnull @.str.251, ptr noundef nonnull %18) #20
  br label %59

26:                                               ; preds = %16, %16
  %27 = getelementptr inbounds %struct.tree_common, ptr %20, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = load i64, ptr %28, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 9
  br i1 %31, label %32, label %59

32:                                               ; preds = %16, %26
  %33 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 3
  %34 = load i32, ptr %33, align 8, !tbaa !17
  switch i32 %34, label %39 [
    i32 63, label %59
    i32 65, label %59
    i32 64, label %59
    i32 89, label %40
    i32 88, label %35
    i32 87, label %36
    i32 91, label %37
    i32 92, label %38
  ]

35:                                               ; preds = %32
  br label %40

36:                                               ; preds = %32
  br label %40

37:                                               ; preds = %32
  br label %40

38:                                               ; preds = %32
  br label %40

39:                                               ; preds = %32
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 10085, ptr noundef nonnull @.str.8) #20
  br label %59

40:                                               ; preds = %32, %38, %37, %36, %35
  %41 = phi ptr [ @.str.253, %35 ], [ @.str.254, %36 ], [ @.str.255, %37 ], [ @.str.256, %38 ], [ @.str.252, %32 ]
  %42 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %43 = load i32, ptr %42, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %43, ptr noundef nonnull @.str.257, ptr noundef nonnull %18, ptr noundef nonnull %41) #20
  br label %59

44:                                               ; preds = %10
  br label %59

45:                                               ; preds = %10
  %46 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  %48 = load i64, ptr %47, align 8
  %49 = and i64 %48, 65535
  %50 = icmp eq i64 %49, 32
  br i1 %50, label %51, label %56

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %47, i64 0, i32 4
  %53 = load i32, ptr %52, align 8
  %54 = and i32 %53, 49152
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %51, %45
  %57 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %58 = load i32, ptr %57, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %58, ptr noundef nonnull @.str.260, ptr noundef nonnull %47) #20
  br label %59

59:                                               ; preds = %39, %32, %32, %32, %40, %16, %10, %51, %56, %23, %26, %44, %15
  %60 = phi ptr [ @.str.259, %56 ], [ @.str.259, %51 ], [ @.str.258, %44 ], [ @.str.250, %23 ], [ @.str.250, %26 ], [ @.str.249, %15 ], [ @.str.248, %10 ], [ @.str.250, %16 ], [ @.str.250, %40 ], [ @.str.250, %32 ], [ @.str.250, %32 ], [ @.str.250, %32 ], [ @.str.250, %39 ]
  %61 = phi i1 [ false, %56 ], [ true, %51 ], [ true, %44 ], [ false, %23 ], [ true, %26 ], [ true, %15 ], [ true, %10 ], [ true, %16 ], [ false, %40 ], [ true, %32 ], [ true, %32 ], [ true, %32 ], [ true, %39 ]
  %62 = phi i1 [ true, %56 ], [ true, %51 ], [ true, %44 ], [ true, %23 ], [ true, %26 ], [ false, %15 ], [ true, %10 ], [ true, %16 ], [ true, %40 ], [ true, %32 ], [ true, %32 ], [ true, %32 ], [ true, %39 ]
  %63 = phi i8 [ 0, %56 ], [ 0, %51 ], [ 0, %44 ], [ 1, %23 ], [ 1, %26 ], [ 1, %15 ], [ 1, %10 ], [ 1, %16 ], [ 1, %40 ], [ 1, %32 ], [ 1, %32 ], [ 1, %32 ], [ 1, %39 ]
  %64 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  %66 = load i64, ptr %65, align 8
  %67 = trunc i64 %66 to i16
  switch i16 %67, label %68 [
    i16 32, label %71
    i16 34, label %71
  ]

68:                                               ; preds = %59
  %69 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %70 = load i32, ptr %69, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %70, ptr noundef nonnull @.str.261, ptr noundef nonnull %65, ptr noundef nonnull %60) #20
  br label %187

71:                                               ; preds = %59, %59
  %72 = getelementptr inbounds %struct.tree_decl_minimal, ptr %65, i64 0, i32 2
  %73 = load i32, ptr %72, align 4, !tbaa !17
  %74 = call i32 @bitmap_bit_p(ptr noundef nonnull %3, i32 noundef %73) #20
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %84

76:                                               ; preds = %71
  %77 = load i32, ptr %72, align 4, !tbaa !17
  %78 = call i32 @bitmap_bit_p(ptr noundef nonnull %4, i32 noundef %77) #20
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %84

80:                                               ; preds = %76
  %81 = load i32, ptr %72, align 4, !tbaa !17
  %82 = call i32 @bitmap_bit_p(ptr noundef nonnull %5, i32 noundef %81) #20
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %128, label %84

84:                                               ; preds = %80, %76, %71
  %85 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %86 = load i32, ptr %85, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %86, ptr noundef nonnull @.str.262, ptr noundef nonnull %65) #20
  br label %187

87:                                               ; preds = %10
  %88 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = load i64, ptr %89, align 8
  %91 = trunc i64 %90 to i16
  switch i16 %91, label %92 [
    i16 32, label %95
    i16 34, label %95
  ]

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %94 = load i32, ptr %93, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %94, ptr noundef nonnull @.str.264, ptr noundef nonnull %89) #20
  br label %187

95:                                               ; preds = %87, %87
  %96 = getelementptr inbounds %struct.tree_decl_minimal, ptr %89, i64 0, i32 2
  %97 = load i32, ptr %96, align 4, !tbaa !17
  %98 = call i32 @bitmap_bit_p(ptr noundef nonnull %3, i32 noundef %97) #20
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %104

100:                                              ; preds = %95
  %101 = load i32, ptr %96, align 4, !tbaa !17
  %102 = call i32 @bitmap_bit_p(ptr noundef nonnull %4, i32 noundef %101) #20
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %131, label %104

104:                                              ; preds = %100, %95
  %105 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %106 = load i32, ptr %105, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %106, ptr noundef nonnull @.str.262, ptr noundef nonnull %89) #20
  br label %187

107:                                              ; preds = %10
  %108 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %109 = load ptr, ptr %108, align 8, !tbaa !17
  %110 = load i64, ptr %109, align 8
  %111 = trunc i64 %110 to i16
  switch i16 %111, label %112 [
    i16 32, label %115
    i16 34, label %115
  ]

112:                                              ; preds = %107
  %113 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %114 = load i32, ptr %113, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %114, ptr noundef nonnull @.str.266, ptr noundef nonnull %109) #20
  br label %187

115:                                              ; preds = %107, %107
  %116 = getelementptr inbounds %struct.tree_decl_minimal, ptr %109, i64 0, i32 2
  %117 = load i32, ptr %116, align 4, !tbaa !17
  %118 = call i32 @bitmap_bit_p(ptr noundef nonnull %3, i32 noundef %117) #20
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %124

120:                                              ; preds = %115
  %121 = load i32, ptr %116, align 4, !tbaa !17
  %122 = call i32 @bitmap_bit_p(ptr noundef nonnull %5, i32 noundef %121) #20
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %131, label %124

124:                                              ; preds = %120, %115
  %125 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %126 = load i32, ptr %125, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %126, ptr noundef nonnull @.str.262, ptr noundef nonnull %109) #20
  br label %187

127:                                              ; preds = %10
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 10188, ptr noundef nonnull @.str.8) #20
  br label %190

128:                                              ; preds = %80
  %129 = load i32, ptr %72, align 4, !tbaa !17
  %130 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %3, i32 noundef %129) #20
  br i1 %61, label %139, label %187

131:                                              ; preds = %120, %100
  %132 = phi ptr [ %96, %100 ], [ %116, %120 ]
  %133 = phi ptr [ %4, %100 ], [ %5, %120 ]
  %134 = phi ptr [ @.str.263, %100 ], [ @.str.265, %120 ]
  %135 = load i32, ptr %132, align 4, !tbaa !17
  %136 = call zeroext i8 @bitmap_set_bit(ptr noundef nonnull %133, i32 noundef %135) #20
  %137 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 6
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  br label %141

139:                                              ; preds = %128
  %140 = load ptr, ptr %64, align 8, !tbaa !17
  br i1 %62, label %162, label %141

141:                                              ; preds = %131, %139
  %142 = phi ptr [ %138, %131 ], [ %140, %139 ]
  %143 = phi ptr [ %134, %131 ], [ %60, %139 ]
  %144 = phi i8 [ 1, %131 ], [ %63, %139 ]
  %145 = getelementptr inbounds %struct.tree_common, ptr %142, i64 0, i32 2
  %146 = load ptr, ptr %145, align 8, !tbaa !17
  %147 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %148 = icmp eq ptr %147, %142
  %149 = icmp eq ptr %146, %147
  %150 = select i1 %148, i1 true, i1 %149
  br i1 %150, label %157, label %151

151:                                              ; preds = %141
  %152 = getelementptr inbounds %struct.tree_type, ptr %146, i64 0, i32 2
  %153 = load ptr, ptr %152, align 8, !tbaa !17
  %154 = icmp eq ptr %153, null
  br i1 %154, label %155, label %157

155:                                              ; preds = %151
  call void @c_incomplete_type_error(ptr noundef nonnull %142, ptr noundef nonnull %146)
  %156 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %157

157:                                              ; preds = %141, %151, %155
  %158 = phi ptr [ %156, %155 ], [ %147, %151 ], [ %147, %141 ]
  %159 = phi ptr [ %156, %155 ], [ %142, %151 ], [ %147, %141 ]
  %160 = icmp eq ptr %159, %158
  %161 = zext i1 %160 to i8
  br label %162

162:                                              ; preds = %157, %139
  %163 = phi ptr [ %60, %139 ], [ %143, %157 ]
  %164 = phi i8 [ %63, %139 ], [ %144, %157 ]
  %165 = phi ptr [ %140, %139 ], [ %159, %157 ]
  %166 = phi i8 [ 0, %139 ], [ %161, %157 ]
  %167 = icmp eq i8 %164, 0
  br i1 %167, label %185, label %168

168:                                              ; preds = %162
  %169 = load i64, ptr %165, align 8
  %170 = and i64 %169, 65535
  %171 = icmp eq i64 %170, 32
  br i1 %171, label %172, label %177

172:                                              ; preds = %168
  %173 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %165, i64 0, i32 4
  %174 = load i32, ptr %173, align 8
  %175 = and i32 %174, 49152
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %181

177:                                              ; preds = %172, %168
  %178 = call i32 @c_omp_predetermined_sharing(ptr noundef nonnull %165) #20
  switch i32 %178, label %180 [
    i32 0, label %185
    i32 1, label %181
    i32 3, label %179
  ]

179:                                              ; preds = %177
  br label %181

180:                                              ; preds = %177
  call void @fancy_abort(ptr noundef nonnull @.str.7, i32 noundef 10219, ptr noundef nonnull @.str.8) #20
  br label %185

181:                                              ; preds = %177, %179, %172
  %182 = phi ptr [ @.str.267, %172 ], [ @.str.249, %179 ], [ @.str.248, %177 ]
  %183 = getelementptr inbounds %struct.tree_omp_clause, ptr %11, i64 0, i32 1
  %184 = load i32, ptr %183, align 8, !tbaa !17
  call void (i32, ptr, ...) @error_at(i32 noundef %184, ptr noundef nonnull @.str.268, ptr noundef nonnull %165, ptr noundef nonnull %182, ptr noundef %163) #20
  br label %187

185:                                              ; preds = %180, %177, %162
  %186 = icmp eq i8 %166, 0
  br i1 %186, label %190, label %187

187:                                              ; preds = %84, %68, %104, %92, %124, %112, %181, %128, %185
  %188 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 1
  %189 = load ptr, ptr %188, align 8, !tbaa !17
  store ptr %189, ptr %12, align 8, !tbaa !6
  br label %193

190:                                              ; preds = %185, %127, %10, %10, %10, %10, %10, %10, %10, %10
  %191 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 1
  %192 = load ptr, ptr %191, align 8, !tbaa !6
  br label %193

193:                                              ; preds = %190, %187
  %194 = phi ptr [ %192, %190 ], [ %189, %187 ]
  %195 = phi ptr [ %191, %190 ], [ %12, %187 ]
  %196 = icmp eq ptr %194, null
  br i1 %196, label %197, label %10, !llvm.loop !236

197:                                              ; preds = %193
  %198 = load ptr, ptr %2, align 8, !tbaa !6
  br label %199

199:                                              ; preds = %197, %1
  %200 = phi ptr [ %198, %197 ], [ null, %1 ]
  call void @bitmap_obstack_release(ptr noundef null) #20
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #20
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #20
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #20
  ret ptr %200
}

declare void @bitmap_obstack_initialize(ptr noundef) local_unnamed_addr #3

declare i32 @bitmap_bit_p(ptr noundef, i32 noundef) local_unnamed_addr #3

declare zeroext i8 @bitmap_set_bit(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @c_omp_predetermined_sharing(ptr noundef) local_unnamed_addr #3

declare void @bitmap_obstack_release(ptr noundef) local_unnamed_addr #3

declare ptr @build_variant_type_copy(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @c_build_va_arg(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #9 {
  %4 = load i32, ptr @warn_cxx_compat, align 4, !tbaa !21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = load i64, ptr %2, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 6
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %0, i32 noundef 49, ptr noundef nonnull @.str.270) #20
  br label %12

12:                                               ; preds = %10, %6, %3
  %13 = tail call ptr @build_va_arg(i32 noundef %0, ptr noundef %1, ptr noundef %2) #20
  ret ptr %13
}

declare ptr @build_va_arg(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #18

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #18

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #19

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #13 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #15 = { nofree norecurse nosync nounwind sspstrong memory(readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #18 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #19 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #20 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"openmp", i32 51}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{!"clang version 17.0.6"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !7, i64 8}
!11 = !{!"_IO_FILE", !12, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !12, i64 112, !12, i64 116, !13, i64 120, !14, i64 128, !8, i64 130, !8, i64 131, !7, i64 136, !13, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !13, i64 184, !12, i64 192, !8, i64 196}
!12 = !{!"int", !8, i64 0}
!13 = !{!"long", !8, i64 0}
!14 = !{!"short", !8, i64 0}
!15 = !{!11, !7, i64 16}
!16 = !{!"branch_weights", i32 2000, i32 1}
!17 = !{!8, !8, i64 0}
!18 = !{!11, !7, i64 40}
!19 = !{!11, !7, i64 48}
!20 = !{!11, !12, i64 0}
!21 = !{!12, !12, i64 0}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.mustprogress"}
!24 = !{!25, !7, i64 816}
!25 = !{!"gcc_target", !26, i64 0, !28, i64 368, !29, i64 664, !12, i64 744, !7, i64 752, !7, i64 760, !7, i64 768, !7, i64 776, !7, i64 784, !7, i64 792, !7, i64 800, !7, i64 808, !7, i64 816, !7, i64 824, !7, i64 832, !7, i64 840, !7, i64 848, !7, i64 856, !7, i64 864, !7, i64 872, !7, i64 880, !7, i64 888, !7, i64 896, !7, i64 904, !7, i64 912, !7, i64 920, !7, i64 928, !7, i64 936, !7, i64 944, !7, i64 952, !7, i64 960, !7, i64 968, !7, i64 976, !7, i64 984, !7, i64 992, !7, i64 1000, !7, i64 1008, !7, i64 1016, !7, i64 1024, !7, i64 1032, !7, i64 1040, !7, i64 1048, !7, i64 1056, !13, i64 1064, !13, i64 1072, !7, i64 1080, !7, i64 1088, !7, i64 1096, !7, i64 1104, !7, i64 1112, !7, i64 1120, !7, i64 1128, !7, i64 1136, !7, i64 1144, !7, i64 1152, !7, i64 1160, !7, i64 1168, !30, i64 1176, !7, i64 1232, !7, i64 1240, !7, i64 1248, !7, i64 1256, !7, i64 1264, !7, i64 1272, !7, i64 1280, !7, i64 1288, !7, i64 1296, !7, i64 1304, !7, i64 1312, !7, i64 1320, !7, i64 1328, !7, i64 1336, !7, i64 1344, !7, i64 1352, !7, i64 1360, !7, i64 1368, !7, i64 1376, !7, i64 1384, !7, i64 1392, !7, i64 1400, !7, i64 1408, !7, i64 1416, !7, i64 1424, !7, i64 1432, !7, i64 1440, !7, i64 1448, !7, i64 1456, !13, i64 1464, !31, i64 1472, !7, i64 1664, !7, i64 1672, !7, i64 1680, !7, i64 1688, !7, i64 1696, !7, i64 1704, !7, i64 1712, !7, i64 1720, !7, i64 1728, !7, i64 1736, !7, i64 1744, !7, i64 1752, !7, i64 1760, !7, i64 1768, !7, i64 1776, !32, i64 1784, !33, i64 1792, !34, i64 1896, !35, i64 1968, !7, i64 2016, !8, i64 2024, !8, i64 2025, !8, i64 2026, !8, i64 2027, !8, i64 2028, !8, i64 2029, !8, i64 2030, !8, i64 2031, !8, i64 2032, !8, i64 2033, !8, i64 2034, !8, i64 2035}
!26 = !{!"asm_out", !7, i64 0, !7, i64 8, !7, i64 16, !27, i64 24, !27, i64 56, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288, !7, i64 296, !7, i64 304, !7, i64 312, !7, i64 320, !7, i64 328, !7, i64 336, !7, i64 344, !7, i64 352, !7, i64 360}
!27 = !{!"asm_int_op", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!28 = !{!"sched", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288}
!29 = !{!"vectorize", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72}
!30 = !{!"addr_space", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!31 = !{!"calls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184}
!32 = !{!"c", !7, i64 0}
!33 = !{!"cxx", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96}
!34 = !{!"emutls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !8, i64 64, !8, i64 65}
!35 = !{!"target_option_hooks", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!36 = distinct !{!36, !23}
!37 = !{!38, !7, i64 0}
!38 = !{!"tagged_tu_seen_cache", !7, i64 0, !7, i64 8, !7, i64 16, !12, i64 24}
!39 = distinct !{!39, !23}
!40 = distinct !{!40, !23}
!41 = distinct !{!41, !23}
!42 = distinct !{!42, !23}
!43 = !{!25, !7, i64 1216}
!44 = distinct !{!44, !23}
!45 = !{!14, !14, i64 0}
!46 = !{!25, !7, i64 832}
!47 = !{i32 0, i32 2}
!48 = distinct !{!48, !23}
!49 = distinct !{!49, !23}
!50 = distinct !{!50, !23}
!51 = distinct !{!51, !23}
!52 = !{!38, !7, i64 8}
!53 = !{!38, !7, i64 16}
!54 = distinct !{!54, !23}
!55 = !{!38, !12, i64 24}
!56 = distinct !{!56, !23}
!57 = distinct !{!57, !23}
!58 = distinct !{!58, !23}
!59 = distinct !{!59, !23}
!60 = distinct !{!60, !23}
!61 = distinct !{!61, !23}
!62 = distinct !{!62, !23}
!63 = distinct !{!63, !23}
!64 = !{!65, !7, i64 0}
!65 = !{!"c_expr", !7, i64 0, !8, i64 8, !7, i64 16}
!66 = distinct !{!66, !23}
!67 = distinct !{!67, !23}
!68 = distinct !{!68, !23}
!69 = !{!25, !7, i64 1672}
!70 = !{i8 0, i8 2}
!71 = distinct !{!71, !23}
!72 = !{!25, !7, i64 1704}
!73 = distinct !{!73, !23}
!74 = !{!75, !7, i64 0}
!75 = !{!"lang_type", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!76 = !{!77, !12, i64 0}
!77 = !{!"sorted_fields_type", !12, i64 0, !8, i64 8}
!78 = distinct !{!78, !23}
!79 = distinct !{!79, !23}
!80 = distinct !{!80, !23}
!81 = distinct !{!81, !23}
!82 = distinct !{!82, !23}
!83 = distinct !{!83, !23}
!84 = !{!25, !7, i64 1680}
!85 = !{!86, !13, i64 40}
!86 = !{!"obstack", !13, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !13, i64 40, !12, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !12, i64 80, !12, i64 80, !12, i64 80}
!87 = !{!86, !7, i64 32}
!88 = !{!86, !7, i64 24}
!89 = !{!86, !7, i64 16}
!90 = !{!86, !12, i64 48}
!91 = !{!86, !7, i64 8}
!92 = !{!93, !7, i64 0}
!93 = !{!"maybe_used_decl", !7, i64 0, !12, i64 8, !7, i64 16}
!94 = !{!93, !12, i64 8}
!95 = !{!93, !7, i64 16}
!96 = distinct !{!96, !23}
!97 = !{!65, !8, i64 8}
!98 = !{!65, !7, i64 16}
!99 = !{!100, !12, i64 0}
!100 = !{!"VEC_tree_base", !12, i64 0, !12, i64 4, !8, i64 8}
!101 = distinct !{!101, !23}
!102 = distinct !{!102, !23}
!103 = distinct !{!103, !23}
!104 = !{!25, !7, i64 1480}
!105 = !{!25, !7, i64 1584}
!106 = distinct !{!106, !23}
!107 = distinct !{!107, !23}
!108 = distinct !{!108, !23}
!109 = !{!110, !8, i64 16}
!110 = !{!"", !7, i64 0, !12, i64 8, !12, i64 12, !8, i64 16}
!111 = distinct !{!111, !23}
!112 = distinct !{!112, !23}
!113 = !{!114, !12, i64 0}
!114 = !{!"VEC_constructor_elt_base", !12, i64 0, !12, i64 4, !8, i64 8}
!115 = !{!116, !7, i64 8}
!116 = !{!"constructor_elt_d", !7, i64 0, !7, i64 8}
!117 = distinct !{!117, !23}
!118 = distinct !{!118, !23}
!119 = distinct !{!119, !23}
!120 = !{!121, !12, i64 0}
!121 = !{!"spelling", !12, i64 0, !8, i64 8}
!122 = distinct !{!122, !23}
!123 = distinct !{!123, !23}
!124 = distinct !{!124, !23}
!125 = !{!126, !7, i64 0}
!126 = !{!"c_type_name", !7, i64 0, !7, i64 8}
!127 = distinct !{!127, !23}
!128 = distinct !{!128, !23}
!129 = !{!130, !7, i64 8}
!130 = !{!"initializer_stack", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !12, i64 56, !8, i64 60, !8, i64 61, !8, i64 62}
!131 = !{!130, !8, i64 61}
!132 = !{!130, !8, i64 62}
!133 = !{!130, !7, i64 16}
!134 = !{!130, !7, i64 24}
!135 = !{!130, !7, i64 32}
!136 = !{!130, !7, i64 40}
!137 = !{!130, !7, i64 48}
!138 = !{!130, !12, i64 56}
!139 = !{!130, !8, i64 60}
!140 = !{!130, !7, i64 0}
!141 = !{!142, !7, i64 0}
!142 = !{!"constructor_stack", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !12, i64 80, !12, i64 84, !65, i64 88, !7, i64 112, !8, i64 120, !8, i64 121, !8, i64 122, !8, i64 123, !8, i64 124, !8, i64 125, !8, i64 126, !8, i64 127}
!143 = distinct !{!143, !23}
!144 = !{!142, !7, i64 8}
!145 = !{!142, !7, i64 16}
!146 = !{!142, !7, i64 24}
!147 = !{!142, !7, i64 32}
!148 = !{!142, !7, i64 40}
!149 = !{!142, !7, i64 48}
!150 = !{!142, !7, i64 56}
!151 = !{!142, !7, i64 64}
!152 = !{!142, !8, i64 120}
!153 = !{!142, !8, i64 121}
!154 = !{!142, !8, i64 122}
!155 = !{!142, !8, i64 124}
!156 = !{!142, !7, i64 72}
!157 = !{!142, !12, i64 84}
!158 = !{!142, !7, i64 88}
!159 = !{!142, !8, i64 96}
!160 = !{!142, !8, i64 123}
!161 = !{!142, !8, i64 125}
!162 = !{!142, !8, i64 126}
!163 = !{!142, !8, i64 127}
!164 = distinct !{!164, !23}
!165 = distinct !{!165, !23}
!166 = !{!142, !7, i64 104}
!167 = !{!142, !7, i64 112}
!168 = distinct !{!168, !23}
!169 = !{!13, !13, i64 0}
!170 = distinct !{!170, !23}
!171 = distinct !{!171, !23}
!172 = !{i64 0, i64 8, !6, i64 8, i64 4, !17, i64 16, i64 8, !6}
!173 = distinct !{!173, !23}
!174 = distinct !{!174, !23}
!175 = distinct !{!175, !23}
!176 = !{!177, !7, i64 16}
!177 = !{!"constructor_range_stack", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!178 = distinct !{!178, !23}
!179 = !{!177, !7, i64 40}
!180 = !{!177, !7, i64 32}
!181 = !{!177, !7, i64 8}
!182 = distinct !{!182, !23}
!183 = !{!177, !7, i64 48}
!184 = !{!177, !7, i64 24}
!185 = !{!177, !7, i64 0}
!186 = distinct !{!186, !23}
!187 = distinct !{!187, !23}
!188 = !{!189, !7, i64 32}
!189 = !{!"init_node", !7, i64 0, !7, i64 8, !7, i64 16, !12, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!190 = distinct !{!190, !23}
!191 = distinct !{!191, !23}
!192 = !{!116, !7, i64 0}
!193 = distinct !{!193, !23}
!194 = distinct !{!194, !23}
!195 = !{!189, !7, i64 40}
!196 = !{!189, !7, i64 48}
!197 = distinct !{!197, !23}
!198 = distinct !{!198, !23}
!199 = !{!189, !7, i64 16}
!200 = !{!189, !12, i64 24}
!201 = !{!189, !7, i64 0}
!202 = !{!189, !7, i64 8}
!203 = distinct !{!203, !23}
!204 = distinct !{!204, !23}
!205 = distinct !{!205, !23}
!206 = !{!114, !12, i64 4}
!207 = distinct !{!207, !23}
!208 = distinct !{!208, !23}
!209 = distinct !{!209, !23}
!210 = distinct !{!210, !23}
!211 = distinct !{!211, !23}
!212 = distinct !{!212, !23}
!213 = distinct !{!213, !23}
!214 = !{!215, !7, i64 0}
!215 = !{!"c_switch", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32}
!216 = !{!215, !7, i64 8}
!217 = !{!215, !7, i64 16}
!218 = !{!215, !7, i64 24}
!219 = !{!215, !7, i64 32}
!220 = !{!221, !7, i64 0}
!221 = !{!"stmt_tree_s", !7, i64 0, !12, i64 8}
!222 = !{!223, !7, i64 8}
!223 = !{!"tree_statement_list_node", !7, i64 0, !7, i64 8, !7, i64 16}
!224 = !{!223, !7, i64 16}
!225 = distinct !{!225, !23}
!226 = !{!227, !7, i64 456}
!227 = !{!"lang_hooks", !7, i64 0, !13, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !228, i64 240, !229, i64 248, !230, i64 256, !231, i64 272, !232, i64 432, !233, i64 560, !7, i64 584, !7, i64 592, !7, i64 600, !7, i64 608, !7, i64 616, !7, i64 624, !7, i64 632, !7, i64 640, !7, i64 648, !7, i64 656, !7, i64 664, !8, i64 672}
!228 = !{!"lang_hooks_for_tree_inlining", !7, i64 0}
!229 = !{!"lang_hooks_for_callgraph", !7, i64 0}
!230 = !{!"lang_hooks_for_tree_dump", !7, i64 0, !7, i64 8}
!231 = !{!"lang_hooks_for_decls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152}
!232 = !{!"lang_hooks_for_types", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !8, i64 120}
!233 = !{!"lang_hooks_for_lto", !7, i64 0, !7, i64 8, !7, i64 16}
!234 = !{!235, !7, i64 24}
!235 = !{!"bitmap_head_def", !7, i64 0, !7, i64 8, !12, i64 16, !7, i64 24}
!236 = distinct !{!236, !23}
