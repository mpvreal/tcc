; ModuleID = 'fold-const.c'
source_filename = "fold-const.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.lang_hooks = type { ptr, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_tree_inlining = type { ptr }
%struct.lang_hooks_for_callgraph = type { ptr }
%struct.lang_hooks_for_tree_dump = type { ptr, ptr }
%struct.lang_hooks_for_decls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.lang_hooks_for_types = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8 }
%struct.lang_hooks_for_lto = type { ptr, ptr, ptr }
%struct.real_value = type { i32, [3 x i64] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.addr_space, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i64, %struct.calls, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, ptr, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { ptr, ptr, ptr, %struct.asm_int_op, %struct.asm_int_op, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.asm_int_op = type { ptr, ptr, ptr, ptr }
%struct.sched = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.vectorize = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.addr_space = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.calls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.c = type { ptr }
%struct.cxx = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.emutls = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i8, i8 }
%struct.target_option_hooks = type { ptr, ptr, ptr, ptr, ptr, ptr }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.tree_type = type { %struct.tree_common, ptr, ptr, ptr, ptr, i32, i32, i32, i32, ptr, ptr, %union.tree_type_symtab, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr }
%struct.tree_common = type { %struct.tree_base, ptr, ptr }
%struct.tree_base = type { i64 }
%union.tree_type_symtab = type { ptr }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_exp = type { %struct.tree_common, i32, ptr, [1 x ptr] }
%struct.tree_real_cst = type { %struct.tree_common, ptr }
%struct.tree_fixed_cst = type { %struct.tree_common, ptr }
%struct.fixed_value = type { %struct.double_int, i32 }
%struct.real_format = type { ptr, ptr, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.tree_vector = type { %struct.tree_common, ptr }
%struct.tree_list = type { %struct.tree_common, ptr, ptr }
%struct.tree_complex = type { %struct.tree_common, ptr, ptr }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, ptr, ptr, ptr, ptr, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, ptr, ptr, ptr, ptr }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, ptr, ptr, ptr, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, ptr }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, ptr, i40, i32, ptr, ptr, ptr, ptr, ptr }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, ptr, ptr }
%struct.tree_ssa_name = type { %struct.tree_common, ptr, ptr, i32, ptr, %struct.ssa_use_operand_d }
%struct.ssa_use_operand_d = type { ptr, ptr, %union.anon, ptr }
%union.anon = type { ptr }
%struct.tree_constructor = type { %struct.tree_common, ptr }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { ptr, ptr }

@pedantic_lvalues = dso_local local_unnamed_addr global i32 0, align 4
@stdout = external local_unnamed_addr global ptr, align 8
@stdin = external local_unnamed_addr global ptr, align 8
@folding_initializer = dso_local local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [13 x i8] c"fold-const.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@fold_deferring_overflow_warnings = internal unnamed_addr global i32 0, align 4
@fold_deferred_overflow_warning = internal unnamed_addr global ptr null, align 8
@fold_deferred_overflow_code = internal unnamed_addr global i32 0, align 4
@warn_strict_overflow = external local_unnamed_addr global i32, align 4
@.str.2 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@sizetype_tab = external local_unnamed_addr global [4 x ptr], align 16
@global_trees = external local_unnamed_addr global [131 x ptr], align 16
@mode_fbit = external local_unnamed_addr constant [87 x i8], align 16
@mode_class = external local_unnamed_addr constant [87 x i8], align 16
@real_format_for_mode = external local_unnamed_addr global [7 x ptr], align 16
@mode_inner = external local_unnamed_addr constant [87 x i8], align 16
@in_gimple_form = external local_unnamed_addr global i8, align 1
@flag_trapping_math = external local_unnamed_addr global i32, align 4
@flag_finite_math_only = external local_unnamed_addr global i32, align 4
@tree_code_type = external local_unnamed_addr constant [0 x i32], align 4
@flag_signed_zeros = external local_unnamed_addr global i32, align 4
@flag_wrapv = external local_unnamed_addr global i32, align 4
@flag_trapv = external local_unnamed_addr global i32, align 4
@flag_strict_overflow = external local_unnamed_addr global i32, align 4
@lang_hooks = external local_unnamed_addr global %struct.lang_hooks, align 8
@integer_types = external local_unnamed_addr global [11 x ptr], align 16
@tree_code_length = external local_unnamed_addr constant [0 x i8], align 1
@flag_rounding_math = external local_unnamed_addr global i32, align 4
@.str.3 = private unnamed_addr constant [65 x i8] c"assuming signed overflow does not occur when negating a division\00", align 1
@flag_evaluation_order = external local_unnamed_addr global i32, align 4
@flag_signaling_nans = external local_unnamed_addr global i32, align 4
@dconst0 = external global %struct.real_value, align 8
@flag_unsafe_math_optimizations = external local_unnamed_addr global i32, align 4
@flag_complex_method = external local_unnamed_addr global i32, align 4
@mode_size = external local_unnamed_addr global [87 x i8], align 16
@cfun = external local_unnamed_addr global ptr, align 8
@flag_syntax_only = external local_unnamed_addr global i32, align 4
@flag_associative_math = external local_unnamed_addr global i32, align 4
@dconst2 = external global %struct.real_value, align 8
@mode_precision = external local_unnamed_addr constant [87 x i16], align 16
@.str.4 = private unnamed_addr constant [72 x i8] c"assuming signed overflow does not occur when simplifying multiplication\00", align 1
@dconst1 = external global %struct.real_value, align 8
@flag_reciprocal_math = external local_unnamed_addr global i32, align 4
@optimize = external local_unnamed_addr global i32, align 4
@.str.5 = private unnamed_addr constant [70 x i8] c"assuming signed overflow does not occur when simplifying A / (B << N)\00", align 1
@.str.6 = private unnamed_addr constant [83 x i8] c"assuming signed overflow does not occur when distributing negation across division\00", align 1
@.str.7 = private unnamed_addr constant [66 x i8] c"assuming signed overflow does not occur when simplifying division\00", align 1
@.str.8 = private unnamed_addr constant [76 x i8] c"assuming signed overflow does not occur when simplifying X % (power of two)\00", align 1
@.str.9 = private unnamed_addr constant [65 x i8] c"assuming signed overflow does not occur when simplifying modulus\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"alias\00", align 1
@.str.11 = private unnamed_addr constant [87 x i8] c"assuming signed overflow does not occur when assuming that (X - c) > X is always false\00", align 1
@.str.12 = private unnamed_addr constant [87 x i8] c"assuming signed overflow does not occur when assuming that (X + c) < X is always false\00", align 1
@.str.13 = private unnamed_addr constant [87 x i8] c"assuming signed overflow does not occur when assuming that (X - c) <= X is always true\00", align 1
@.str.14 = private unnamed_addr constant [87 x i8] c"assuming signed overflow does not occur when assuming that (X + c) >= X is always true\00", align 1
@.str.15 = private unnamed_addr constant [86 x i8] c"assuming signed overflow does not occur when assuming that (X + c) > X is always true\00", align 1
@.str.16 = private unnamed_addr constant [86 x i8] c"assuming signed overflow does not occur when assuming that (X - c) < X is always true\00", align 1
@.str.17 = private unnamed_addr constant [88 x i8] c"assuming signed overflow does not occur when assuming that (X + c) <= X is always false\00", align 1
@.str.18 = private unnamed_addr constant [88 x i8] c"assuming signed overflow does not occur when assuming that (X - c) >= X is always false\00", align 1
@.str.19 = private unnamed_addr constant [95 x i8] c"assuming signed overflow does not occur when simplifying comparison of absolute value and zero\00", align 1
@extract_muldiv.depth = internal unnamed_addr global i32 0, align 4
@.str.20 = private unnamed_addr constant [68 x i8] c"assuming signed overflow does not occur when simplifying range test\00", align 1
@ix86_branch_cost = external local_unnamed_addr global i32, align 4
@word_mode = external local_unnamed_addr global i32, align 4
@.str.21 = private unnamed_addr constant [24 x i8] c"comparison is always %d\00", align 1
@.str.22 = private unnamed_addr constant [48 x i8] c"%<or%> of unmatched not-equal tests is always 1\00", align 1
@.str.23 = private unnamed_addr constant [54 x i8] c"%<and%> of mutually exclusive equal-tests is always 0\00", align 1
@.str.24 = private unnamed_addr constant [87 x i8] c"assuming signed overflow does not occur when changing X +- C1 cmp C2 to X cmp C1 +- C2\00", align 1
@.str.25 = private unnamed_addr constant [79 x i8] c"assuming pointer wraparound does not occur when comparing P +- C1 with P +- C2\00", align 1
@targetm = external local_unnamed_addr global %struct.gcc_target, align 8
@.str.26 = private unnamed_addr constant [85 x i8] c"assuming signed overflow does not occur when combining constants around a comparison\00", align 1
@.str.27 = private unnamed_addr constant [96 x i8] c"assuming signed overflow does not occur when eliminating multiplication in comparison with zero\00", align 1
@flag_errno_math = external local_unnamed_addr global i32, align 4
@.str.28 = private unnamed_addr constant [77 x i8] c"assuming signed overflow does not occur when reducing constant in comparison\00", align 1
@.str.29 = private unnamed_addr constant [50 x i8] c"comparison is always %d due to width of bit-field\00", align 1
@.str.30 = private unnamed_addr constant [8 x i8] c"GNU C++\00", align 1
@.str.31 = private unnamed_addr constant [18 x i8] c"GNU Objective-C++\00", align 1
@.str.32 = private unnamed_addr constant [96 x i8] c"assuming signed overflow does not occur when determining that expression is always non-negative\00", align 1
@flag_delete_null_pointer_checks = external local_unnamed_addr global i32, align 4
@.str.33 = private unnamed_addr constant [92 x i8] c"assuming signed overflow does not occur when determining that expression is always non-zero\00", align 1
@switch.table.fold_div_compare = private unnamed_addr constant [14 x i32] [i32 99, i32 100, i32 97, i32 98, i32 101, i32 102, i32 103, i32 104, i32 107, i32 108, i32 105, i32 106, i32 109, i32 110], align 4
@switch.table.maybe_canonicalize_comparison_1 = private unnamed_addr constant [4 x i32] [i32 99, i32 100, i32 97, i32 98], align 4

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @vprintf(ptr noalias nocapture noundef readonly %0, ptr noundef %1) local_unnamed_addr #0 {
  %3 = load ptr, ptr @stdout, align 8, !tbaa !6
  %4 = tail call i32 @vfprintf(ptr noundef %3, ptr noundef %0, ptr noundef %1)
  ret i32 %4
}

; Function Attrs: nofree nounwind
declare noundef i32 @vfprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ptr noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = tail call i32 @getc(ptr noundef %1)
  ret i32 %2
}

; Function Attrs: nofree nounwind
declare noundef i32 @getc(ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fgetc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #24
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

declare i32 @__uflow(ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getc_unlocked(ptr noundef %0) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %1
  %8 = tail call i32 @__uflow(ptr noundef nonnull %0) #24
  br label %13

9:                                                ; preds = %1
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #2 {
  %1 = load ptr, ptr @stdin, align 8, !tbaa !6
  %2 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 1
  %3 = load ptr, ptr %2, align 8, !tbaa !10
  %4 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !15
  %6 = icmp ult ptr %3, %5
  br i1 %6, label %9, label %7, !prof !16

7:                                                ; preds = %0
  %8 = tail call i32 @__uflow(ptr noundef nonnull %1) #24
  br label %13

9:                                                ; preds = %0
  %10 = getelementptr inbounds i8, ptr %3, i64 1
  store ptr %10, ptr %2, align 8, !tbaa !10
  %11 = load i8, ptr %3, align 1, !tbaa !17
  %12 = zext i8 %11 to i32
  br label %13

13:                                               ; preds = %9, %7
  %14 = phi i32 [ %8, %7 ], [ %12, %9 ]
  ret i32 %14
}

; Function Attrs: inlinehint nofree nounwind sspstrong uwtable
define dso_local i32 @putchar(i32 noundef %0) local_unnamed_addr #0 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = tail call i32 @putc(i32 noundef %0, ptr noundef %2)
  ret i32 %3
}

; Function Attrs: nofree nounwind
declare noundef i32 @putc(i32 noundef, ptr nocapture noundef) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @fputc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #24
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @__overflow(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putc_unlocked(i32 noundef %0, ptr noundef %1) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %1, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %2
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %1, i32 noundef %9) #24
  br label %15

11:                                               ; preds = %2
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @putchar_unlocked(i32 noundef %0) local_unnamed_addr #2 {
  %2 = load ptr, ptr @stdout, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 5
  %4 = load ptr, ptr %3, align 8, !tbaa !18
  %5 = getelementptr inbounds %struct._IO_FILE, ptr %2, i64 0, i32 6
  %6 = load ptr, ptr %5, align 8, !tbaa !19
  %7 = icmp ult ptr %4, %6
  br i1 %7, label %11, label %8, !prof !16

8:                                                ; preds = %1
  %9 = and i32 %0, 255
  %10 = tail call i32 @__overflow(ptr noundef nonnull %2, i32 noundef %9) #24
  br label %15

11:                                               ; preds = %1
  %12 = trunc i32 %0 to i8
  %13 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %13, ptr %3, align 8, !tbaa !18
  store i8 %12, ptr %4, align 1, !tbaa !17
  %14 = and i32 %0, 255
  br label %15

15:                                               ; preds = %11, %8
  %16 = phi i32 [ %10, %8 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @getline(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #2 {
  %4 = tail call i64 @__getdelim(ptr noundef %0, ptr noundef %1, i32 noundef 10, ptr noundef %2) #24
  ret i64 %4
}

declare i64 @__getdelim(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @feof_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 4
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable
define dso_local i32 @ferror_unlocked(ptr nocapture noundef readonly %0) local_unnamed_addr #4 {
  %2 = load i32, ptr %0, align 8, !tbaa !20
  %3 = lshr i32 %2, 5
  %4 = and i32 %3, 1
  ret i32 %4
}

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @tolower(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_tolower_loc() #24
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_tolower_loc() local_unnamed_addr #3

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable
define dso_local i32 @toupper(i32 noundef %0) local_unnamed_addr #5 {
  %2 = add i32 %0, 128
  %3 = icmp ult i32 %2, 384
  br i1 %3, label %4, label %10

4:                                                ; preds = %1
  %5 = tail call ptr @__ctype_toupper_loc() #24
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds i32, ptr %6, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !21
  br label %10

10:                                               ; preds = %1, %4
  %11 = phi i32 [ %9, %4 ], [ %0, %1 ]
  ret i32 %11
}

declare ptr @__ctype_toupper_loc() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i32 @atoi(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #24
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atol(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtol(ptr noundef %0, ptr noundef null, i32 noundef 10) #24
  ret i64 %2
}

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local i64 @atoll(ptr noundef %0) local_unnamed_addr #2 {
  %2 = tail call i64 @__isoc23_strtoll(ptr noundef %0, ptr noundef null, i32 noundef 10) #24
  ret i64 %2
}

declare i64 @__isoc23_strtoll(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind sspstrong uwtable
define dso_local ptr @bsearch(ptr noundef %0, ptr noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef readonly %4) local_unnamed_addr #2 {
  %6 = icmp eq i64 %2, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %5, %20
  %8 = phi i64 [ %22, %20 ], [ 0, %5 ]
  %9 = phi i64 [ %21, %20 ], [ %2, %5 ]
  %10 = add i64 %8, %9
  %11 = lshr i64 %10, 1
  %12 = mul i64 %11, %3
  %13 = getelementptr inbounds i8, ptr %1, i64 %12
  %14 = tail call i32 %4(ptr noundef %0, ptr noundef %13) #24
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %7
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add nuw i64 %11, 1
  br label %20

20:                                               ; preds = %7, %18
  %21 = phi i64 [ %9, %18 ], [ %11, %7 ]
  %22 = phi i64 [ %19, %18 ], [ %8, %7 ]
  %23 = icmp ult i64 %22, %21
  br i1 %23, label %7, label %24, !llvm.loop !22

24:                                               ; preds = %16, %20, %5
  %25 = phi ptr [ null, %5 ], [ null, %20 ], [ %13, %16 ]
  ret ptr %25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6

; Function Attrs: inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable
define dso_local nofpclass(nan inf) double @atof(ptr nocapture noundef readonly %0) local_unnamed_addr #7 {
  %2 = tail call fast nofpclass(nan inf) double @strtod(ptr nocapture noundef %0, ptr noundef null)
  ret double %2
}

; Function Attrs: mustprogress nofree nounwind willreturn
declare nofpclass(nan inf) double @strtod(ptr noundef readonly, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable
define dso_local i32 @fit_double_type(i64 noundef %0, i64 noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef readonly %4) local_unnamed_addr #9 {
  %6 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %7 = load i32, ptr %6, align 4
  %8 = and i32 %7, 1023
  %9 = load i64, ptr %4, align 8
  %10 = and i64 %9, 2097152
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %5
  %13 = and i64 %9, 65535
  %14 = icmp eq i64 %13, 8
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = lshr i32 %7, 10
  %17 = and i32 %16, 1
  br label %18

18:                                               ; preds = %12, %15, %5
  %19 = phi i32 [ 1, %5 ], [ 0, %12 ], [ %17, %15 ]
  %20 = icmp ugt i32 %8, 127
  br i1 %20, label %63, label %21

21:                                               ; preds = %18
  %22 = icmp ugt i32 %8, 64
  br i1 %22, label %25, label %23

23:                                               ; preds = %21
  %24 = icmp eq i32 %8, 64
  br i1 %24, label %38, label %32

25:                                               ; preds = %21
  %26 = add nsw i32 %8, -64
  %27 = zext i32 %26 to i64
  %28 = shl nsw i64 -1, %27
  %29 = xor i64 %28, -1
  %30 = and i64 %29, %1
  %31 = icmp eq i32 %19, 0
  br i1 %31, label %63, label %42

32:                                               ; preds = %23
  %33 = zext i32 %8 to i64
  %34 = shl nsw i64 -1, %33
  %35 = xor i64 %34, -1
  %36 = and i64 %35, %0
  %37 = icmp eq i32 %19, 0
  br i1 %37, label %63, label %53

38:                                               ; preds = %23
  %39 = icmp eq i32 %19, 0
  %40 = ashr i64 %0, 63
  %41 = select i1 %39, i64 0, i64 %40
  br label %63

42:                                               ; preds = %25
  %43 = add nsw i32 %8, -65
  %44 = zext i32 %43 to i64
  %45 = shl nuw nsw i64 1, %44
  %46 = and i64 %30, %45
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %63, label %48

48:                                               ; preds = %42
  %49 = add nsw i32 %8, -64
  %50 = zext i32 %49 to i64
  %51 = shl nsw i64 -1, %50
  %52 = or i64 %30, %51
  br label %63

53:                                               ; preds = %32
  %54 = add nsw i32 %8, -1
  %55 = zext i32 %54 to i64
  %56 = shl nuw i64 1, %55
  %57 = and i64 %36, %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = zext i32 %8 to i64
  %61 = shl nsw i64 -1, %60
  %62 = or i64 %36, %61
  br label %63

63:                                               ; preds = %38, %32, %18, %59, %53, %42, %48, %25
  %64 = phi i64 [ %30, %25 ], [ %52, %48 ], [ %30, %42 ], [ -1, %59 ], [ 0, %53 ], [ %1, %18 ], [ 0, %32 ], [ %41, %38 ]
  %65 = phi i64 [ %0, %25 ], [ %0, %48 ], [ %0, %42 ], [ %62, %59 ], [ %36, %53 ], [ %0, %18 ], [ %36, %32 ], [ %0, %38 ]
  store i64 %65, ptr %2, align 8, !tbaa !24
  store i64 %64, ptr %3, align 8, !tbaa !24
  %66 = icmp ne i64 %65, %0
  %67 = icmp ne i64 %64, %1
  %68 = select i1 %66, i1 true, i1 %67
  %69 = zext i1 %68 to i32
  ret i32 %69
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @force_fit_type_double(ptr noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, i8 noundef zeroext %4) local_unnamed_addr #10 {
  %6 = load i64, ptr %0, align 8
  %7 = and i64 %6, 2097152
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = and i64 %6, 65535
  %11 = icmp eq i64 %10, 8
  %12 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %13 = load i32, ptr %12, align 4
  br i1 %11, label %17, label %22

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %16 = load i32, ptr %15, align 4
  br label %22

17:                                               ; preds = %9
  %18 = and i32 %13, 1024
  %19 = icmp ne i32 %18, 0
  %20 = lshr i32 %13, 10
  %21 = and i32 %20, 1
  br label %22

22:                                               ; preds = %9, %14, %17
  %23 = phi i32 [ %16, %14 ], [ %13, %17 ], [ %13, %9 ]
  %24 = phi i1 [ true, %14 ], [ %19, %17 ], [ false, %9 ]
  %25 = phi i32 [ 1, %14 ], [ %21, %17 ], [ 0, %9 ]
  %26 = and i32 %23, 1023
  %27 = icmp ugt i32 %26, 127
  br i1 %27, label %66, label %28

28:                                               ; preds = %22
  %29 = icmp ugt i32 %26, 64
  br i1 %29, label %32, label %30

30:                                               ; preds = %28
  %31 = icmp eq i32 %26, 64
  br i1 %31, label %45, label %39

32:                                               ; preds = %28
  %33 = add nsw i32 %26, -64
  %34 = zext i32 %33 to i64
  %35 = shl nsw i64 -1, %34
  %36 = xor i64 %35, -1
  %37 = and i64 %36, %2
  %38 = icmp eq i32 %25, 0
  br i1 %38, label %66, label %49

39:                                               ; preds = %30
  %40 = zext i32 %26 to i64
  %41 = shl nsw i64 -1, %40
  %42 = xor i64 %41, -1
  %43 = and i64 %42, %1
  %44 = icmp eq i32 %25, 0
  br i1 %44, label %66, label %57

45:                                               ; preds = %30
  %46 = icmp eq i32 %25, 0
  %47 = ashr i64 %1, 63
  %48 = select i1 %46, i64 0, i64 %47
  br label %66

49:                                               ; preds = %32
  %50 = add nsw i32 %26, -65
  %51 = zext i32 %50 to i64
  %52 = shl nuw nsw i64 1, %51
  %53 = and i64 %37, %52
  %54 = icmp eq i64 %53, 0
  %55 = or i64 %35, %2
  %56 = select i1 %54, i64 %37, i64 %55
  br label %66

57:                                               ; preds = %39
  %58 = add nsw i32 %26, -1
  %59 = zext i32 %58 to i64
  %60 = shl nuw i64 1, %59
  %61 = and i64 %43, %60
  %62 = icmp ne i64 %61, 0
  %63 = or i64 %41, %1
  %64 = sext i1 %62 to i64
  %65 = select i1 %62, i64 %63, i64 %43
  br label %66

66:                                               ; preds = %57, %49, %45, %22, %32, %39
  %67 = phi i64 [ %37, %32 ], [ %2, %22 ], [ 0, %39 ], [ %56, %49 ], [ %48, %45 ], [ %64, %57 ]
  %68 = phi i64 [ %1, %32 ], [ %1, %22 ], [ %43, %39 ], [ %1, %49 ], [ %1, %45 ], [ %65, %57 ]
  %69 = icmp ne i64 %68, %1
  %70 = icmp ne i64 %67, %2
  %71 = icmp ne i8 %4, 0
  %72 = select i1 %71, i1 true, i1 %69
  %73 = select i1 %72, i1 true, i1 %70
  br i1 %73, label %74, label %87

74:                                               ; preds = %66
  %75 = icmp slt i32 %3, 0
  %76 = or i1 %75, %71
  %77 = icmp sgt i32 %3, 0
  %78 = select i1 %77, i1 %24, i1 false
  %79 = select i1 %76, i1 true, i1 %78
  br i1 %79, label %80, label %87

80:                                               ; preds = %74
  %81 = tail call ptr @make_node_stat(i32 noundef 23) #24
  %82 = getelementptr inbounds %struct.tree_int_cst, ptr %81, i64 0, i32 1
  store i64 %68, ptr %82, align 8, !tbaa !17
  %83 = getelementptr inbounds %struct.tree_int_cst, ptr %81, i64 0, i32 1, i32 1
  store i64 %67, ptr %83, align 8, !tbaa !17
  %84 = getelementptr inbounds %struct.tree_common, ptr %81, i64 0, i32 2
  store ptr %0, ptr %84, align 8, !tbaa !17
  %85 = load i64, ptr %81, align 8
  %86 = or i64 %85, 134217728
  store i64 %86, ptr %81, align 8
  br label %89

87:                                               ; preds = %74, %66
  %88 = tail call ptr @build_int_cst_wide(ptr noundef nonnull %0, i64 noundef %68, i64 noundef %67) #24
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi ptr [ %81, %80 ], [ %88, %87 ]
  ret ptr %90
}

declare ptr @make_node_stat(i32 noundef) local_unnamed_addr #3

declare ptr @build_int_cst_wide(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local i32 @add_double_with_sign(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5, i8 noundef zeroext %6) local_unnamed_addr #11 {
  %8 = add i64 %2, %0
  %9 = add i64 %3, %1
  %10 = icmp ult i64 %8, %0
  %11 = zext i1 %10 to i64
  %12 = add i64 %9, %11
  store i64 %8, ptr %4, align 8, !tbaa !24
  store i64 %12, ptr %5, align 8, !tbaa !24
  %13 = icmp eq i8 %6, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = icmp ult i64 %12, %1
  %16 = icmp eq i64 %12, %1
  %17 = and i1 %10, %16
  %18 = or i1 %15, %17
  %19 = zext i1 %18 to i32
  br label %27

20:                                               ; preds = %7
  %21 = xor i64 %1, %3
  %22 = xor i64 %21, -1
  %23 = xor i64 %12, %1
  %24 = and i64 %23, %22
  %25 = lshr i64 %24, 63
  %26 = trunc i64 %25 to i32
  br label %27

27:                                               ; preds = %20, %14
  %28 = phi i32 [ %19, %14 ], [ %26, %20 ]
  ret i32 %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local i32 @neg_double(i64 noundef %0, i64 noundef %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #11 {
  %5 = icmp eq i64 %0, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = sub nsw i64 0, %1
  %8 = icmp eq i64 %1, -9223372036854775808
  %9 = zext i1 %8 to i32
  br label %13

10:                                               ; preds = %4
  %11 = sub i64 0, %0
  %12 = xor i64 %1, -1
  br label %13

13:                                               ; preds = %10, %6
  %14 = phi i64 [ 0, %6 ], [ %11, %10 ]
  %15 = phi i64 [ %7, %6 ], [ %12, %10 ]
  %16 = phi i32 [ %9, %6 ], [ 0, %10 ]
  store i64 %14, ptr %2, align 8
  store i64 %15, ptr %3, align 8
  ret i32 %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local i32 @mul_double_with_sign(i64 noundef %0, i64 noundef %1, i64 noundef %2, i64 noundef %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5, i8 noundef zeroext %6) local_unnamed_addr #11 {
  %8 = and i64 %0, 4294967295
  %9 = lshr i64 %0, 32
  %10 = and i64 %1, 4294967295
  %11 = lshr i64 %1, 32
  %12 = and i64 %2, 4294967295
  %13 = lshr i64 %2, 32
  %14 = and i64 %3, 4294967295
  %15 = lshr i64 %3, 32
  %16 = mul nuw nsw i64 %12, %8
  %17 = and i64 %16, 4294967295
  %18 = lshr i64 %16, 32
  %19 = mul nuw nsw i64 %13, %8
  %20 = add nuw i64 %19, %18
  %21 = and i64 %20, 4294967295
  %22 = lshr i64 %20, 32
  %23 = mul nuw nsw i64 %14, %8
  %24 = add nuw i64 %23, %22
  %25 = and i64 %24, 4294967295
  %26 = lshr i64 %24, 32
  %27 = mul nuw nsw i64 %15, %8
  %28 = add nuw i64 %27, %26
  %29 = and i64 %28, 4294967295
  %30 = lshr i64 %28, 32
  %31 = mul nuw nsw i64 %12, %9
  %32 = add nuw i64 %31, %21
  %33 = lshr i64 %32, 32
  %34 = mul nuw nsw i64 %13, %9
  %35 = add nuw i64 %34, %33
  %36 = add nuw i64 %35, %25
  %37 = and i64 %36, 4294967295
  %38 = lshr i64 %36, 32
  %39 = mul nuw nsw i64 %14, %9
  %40 = add nuw i64 %39, %38
  %41 = add nuw i64 %40, %29
  %42 = and i64 %41, 4294967295
  %43 = lshr i64 %41, 32
  %44 = mul nuw nsw i64 %15, %9
  %45 = add nuw i64 %44, %43
  %46 = add nuw i64 %45, %30
  %47 = and i64 %46, 4294967295
  %48 = lshr i64 %46, 32
  %49 = mul nuw nsw i64 %12, %10
  %50 = add nuw i64 %49, %37
  %51 = and i64 %50, 4294967295
  %52 = lshr i64 %50, 32
  %53 = mul nuw nsw i64 %13, %10
  %54 = add nuw i64 %53, %52
  %55 = add nuw i64 %54, %42
  %56 = and i64 %55, 4294967295
  %57 = lshr i64 %55, 32
  %58 = mul nuw nsw i64 %14, %10
  %59 = add nuw i64 %58, %57
  %60 = add nuw i64 %59, %47
  %61 = and i64 %60, 4294967295
  %62 = lshr i64 %60, 32
  %63 = mul nuw nsw i64 %15, %10
  %64 = add nuw i64 %63, %62
  %65 = add nuw i64 %64, %48
  %66 = and i64 %65, 4294967295
  %67 = lshr i64 %65, 32
  %68 = mul nuw nsw i64 %12, %11
  %69 = add nuw i64 %68, %56
  %70 = lshr i64 %69, 32
  %71 = mul nuw nsw i64 %13, %11
  %72 = add nuw i64 %71, %70
  %73 = add nuw i64 %72, %61
  %74 = and i64 %73, 4294967295
  %75 = lshr i64 %73, 32
  %76 = mul nuw nsw i64 %14, %11
  %77 = add nuw i64 %76, %75
  %78 = add nuw i64 %77, %66
  %79 = lshr i64 %78, 32
  %80 = mul nuw nsw i64 %15, %11
  %81 = add nuw i64 %80, %79
  %82 = add nuw i64 %81, %67
  %83 = shl i64 %32, 32
  %84 = or i64 %83, %17
  store i64 %84, ptr %4, align 8, !tbaa !24
  %85 = shl i64 %69, 32
  %86 = or i64 %85, %51
  store i64 %86, ptr %5, align 8, !tbaa !24
  %87 = shl i64 %78, 32
  %88 = or i64 %87, %74
  %89 = icmp eq i8 %6, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %7
  %91 = or i64 %82, %88
  br label %129

92:                                               ; preds = %7
  %93 = icmp slt i64 %1, 0
  br i1 %93, label %94, label %105

94:                                               ; preds = %92
  %95 = icmp eq i64 %2, 0
  %96 = sub nsw i64 0, %3
  %97 = sub i64 0, %2
  %98 = xor i64 %3, -1
  %99 = select i1 %95, i64 %96, i64 %98
  %100 = sub i64 %88, %2
  %101 = add i64 %82, %99
  %102 = icmp ult i64 %100, %97
  %103 = zext i1 %102 to i64
  %104 = add i64 %101, %103
  br label %105

105:                                              ; preds = %94, %92
  %106 = phi i64 [ %100, %94 ], [ %88, %92 ]
  %107 = phi i64 [ %104, %94 ], [ %82, %92 ]
  %108 = icmp slt i64 %3, 0
  br i1 %108, label %109, label %120

109:                                              ; preds = %105
  %110 = icmp eq i64 %0, 0
  %111 = sub nsw i64 0, %1
  %112 = sub i64 0, %0
  %113 = xor i64 %1, -1
  %114 = select i1 %110, i64 %111, i64 %113
  %115 = sub i64 %106, %0
  %116 = add i64 %107, %114
  %117 = icmp ult i64 %115, %112
  %118 = zext i1 %117 to i64
  %119 = add i64 %116, %118
  br label %120

120:                                              ; preds = %109, %105
  %121 = phi i64 [ %115, %109 ], [ %106, %105 ]
  %122 = phi i64 [ %119, %109 ], [ %107, %105 ]
  %123 = icmp slt i64 %86, 0
  br i1 %123, label %124, label %127

124:                                              ; preds = %120
  %125 = and i64 %122, %121
  %126 = xor i64 %125, -1
  br label %129

127:                                              ; preds = %120
  %128 = or i64 %122, %121
  br label %129

129:                                              ; preds = %124, %127, %90
  %130 = phi i64 [ %91, %90 ], [ %126, %124 ], [ %128, %127 ]
  %131 = icmp ne i64 %130, 0
  %132 = zext i1 %131 to i32
  ret i32 %132
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #12

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable
define dso_local void @lshift_double(i64 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, ptr nocapture noundef %4, ptr nocapture noundef %5, i32 noundef %6) local_unnamed_addr #9 {
  %8 = icmp slt i64 %2, 0
  br i1 %8, label %9, label %53

9:                                                ; preds = %7
  %10 = sub nsw i64 0, %2
  %11 = icmp eq i32 %6, 0
  %12 = ashr i64 %1, 63
  %13 = select i1 %11, i64 0, i64 %12
  %14 = icmp ugt i64 %10, 127
  br i1 %14, label %15, label %16

15:                                               ; preds = %9
  store i64 0, ptr %5, align 8, !tbaa !24
  br label %28

16:                                               ; preds = %9
  %17 = icmp ugt i64 %10, 63
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  store i64 0, ptr %5, align 8, !tbaa !24
  %19 = sub nsw i64 -64, %2
  %20 = lshr i64 %1, %19
  br label %28

21:                                               ; preds = %16
  %22 = lshr i64 %1, %10
  store i64 %22, ptr %5, align 8, !tbaa !24
  %23 = lshr i64 %0, %10
  %24 = add nsw i64 %2, 63
  %25 = shl i64 %1, %24
  %26 = shl i64 %25, 1
  %27 = or i64 %26, %23
  br label %28

28:                                               ; preds = %21, %18, %15
  %29 = phi i64 [ %20, %18 ], [ %27, %21 ], [ 0, %15 ]
  store i64 %29, ptr %4, align 8, !tbaa !24
  %30 = zext i32 %3 to i64
  %31 = icmp ugt i64 %30, %10
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  store i64 %13, ptr %5, align 8, !tbaa !24
  store i64 %13, ptr %4, align 8, !tbaa !24
  br label %106

33:                                               ; preds = %28
  %34 = add nsw i64 %30, %2
  %35 = icmp sgt i64 %34, 127
  br i1 %35, label %106, label %36

36:                                               ; preds = %33
  %37 = icmp sgt i64 %34, 63
  br i1 %37, label %38, label %46

38:                                               ; preds = %36
  %39 = add nsw i64 %34, -64
  %40 = shl nsw i64 -1, %39
  %41 = xor i64 %40, -1
  %42 = load i64, ptr %5, align 8, !tbaa !24
  %43 = and i64 %42, %41
  %44 = shl nsw i64 %13, %39
  %45 = or i64 %43, %44
  store i64 %45, ptr %5, align 8, !tbaa !24
  br label %106

46:                                               ; preds = %36
  store i64 %13, ptr %5, align 8, !tbaa !24
  %47 = shl nsw i64 -1, %34
  %48 = xor i64 %47, -1
  %49 = load i64, ptr %4, align 8, !tbaa !24
  %50 = and i64 %49, %48
  %51 = shl nsw i64 %13, %34
  %52 = or i64 %50, %51
  store i64 %52, ptr %4, align 8, !tbaa !24
  br label %106

53:                                               ; preds = %7
  %54 = icmp ugt i64 %2, 127
  br i1 %54, label %55, label %56

55:                                               ; preds = %53
  store i64 0, ptr %5, align 8, !tbaa !24
  br label %68

56:                                               ; preds = %53
  %57 = icmp ugt i64 %2, 63
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = add nsw i64 %2, -64
  %60 = shl i64 %0, %59
  store i64 %60, ptr %5, align 8, !tbaa !24
  br label %68

61:                                               ; preds = %56
  %62 = shl i64 %1, %2
  %63 = sub nuw nsw i64 63, %2
  %64 = lshr i64 %0, %63
  %65 = lshr i64 %64, 1
  %66 = or i64 %65, %62
  store i64 %66, ptr %5, align 8, !tbaa !24
  %67 = shl i64 %0, %2
  br label %68

68:                                               ; preds = %58, %61, %55
  %69 = phi i64 [ 0, %58 ], [ %67, %61 ], [ 0, %55 ]
  store i64 %69, ptr %4, align 8, !tbaa !24
  %70 = icmp ugt i32 %3, 64
  br i1 %70, label %71, label %79

71:                                               ; preds = %68
  %72 = load i64, ptr %5, align 8, !tbaa !24
  %73 = add i32 %3, -65
  %74 = zext i32 %73 to i64
  %75 = lshr i64 %72, %74
  %76 = and i64 %75, 1
  %77 = sub nsw i64 0, %76
  %78 = icmp ugt i32 %3, 127
  br i1 %78, label %106, label %88

79:                                               ; preds = %68
  %80 = add nsw i32 %3, -1
  %81 = zext i32 %80 to i64
  %82 = lshr i64 %69, %81
  %83 = and i64 %82, 1
  %84 = sub nsw i64 0, %83
  %85 = icmp eq i32 %3, 64
  br i1 %85, label %86, label %98

86:                                               ; preds = %79
  %87 = load i64, ptr %5, align 8, !tbaa !24
  br label %88

88:                                               ; preds = %86, %71
  %89 = phi i64 [ %87, %86 ], [ %72, %71 ]
  %90 = phi i64 [ %84, %86 ], [ %77, %71 ]
  %91 = add nsw i32 %3, -64
  %92 = zext i32 %91 to i64
  %93 = shl nsw i64 -1, %92
  %94 = xor i64 %93, -1
  %95 = and i64 %89, %94
  %96 = shl nsw i64 %90, %92
  %97 = or i64 %95, %96
  store i64 %97, ptr %5, align 8, !tbaa !24
  br label %106

98:                                               ; preds = %79
  store i64 %84, ptr %5, align 8, !tbaa !24
  %99 = zext i32 %3 to i64
  %100 = shl nsw i64 -1, %99
  %101 = xor i64 %100, -1
  %102 = load i64, ptr %4, align 8, !tbaa !24
  %103 = and i64 %102, %101
  %104 = shl nsw i64 %84, %99
  %105 = or i64 %103, %104
  store i64 %105, ptr %4, align 8, !tbaa !24
  br label %106

106:                                              ; preds = %46, %38, %33, %32, %71, %98, %88
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable
define dso_local void @rshift_double(i64 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, ptr nocapture noundef %4, ptr nocapture noundef %5, i32 noundef %6) local_unnamed_addr #9 {
  %8 = icmp eq i32 %6, 0
  %9 = ashr i64 %1, 63
  %10 = select i1 %8, i64 0, i64 %9
  %11 = icmp sgt i64 %2, 127
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  store i64 0, ptr %5, align 8, !tbaa !24
  br label %25

13:                                               ; preds = %7
  %14 = icmp sgt i64 %2, 63
  br i1 %14, label %15, label %18

15:                                               ; preds = %13
  store i64 0, ptr %5, align 8, !tbaa !24
  %16 = add nsw i64 %2, -64
  %17 = lshr i64 %1, %16
  br label %25

18:                                               ; preds = %13
  %19 = lshr i64 %1, %2
  store i64 %19, ptr %5, align 8, !tbaa !24
  %20 = lshr i64 %0, %2
  %21 = sub i64 63, %2
  %22 = shl i64 %1, %21
  %23 = shl i64 %22, 1
  %24 = or i64 %23, %20
  br label %25

25:                                               ; preds = %15, %18, %12
  %26 = phi i64 [ %17, %15 ], [ %24, %18 ], [ 0, %12 ]
  store i64 %26, ptr %4, align 8, !tbaa !24
  %27 = zext i32 %3 to i64
  %28 = icmp sgt i64 %27, %2
  br i1 %28, label %30, label %29

29:                                               ; preds = %25
  store i64 %10, ptr %5, align 8, !tbaa !24
  store i64 %10, ptr %4, align 8, !tbaa !24
  br label %50

30:                                               ; preds = %25
  %31 = sub nsw i64 %27, %2
  %32 = icmp sgt i64 %31, 127
  br i1 %32, label %50, label %33

33:                                               ; preds = %30
  %34 = icmp sgt i64 %31, 63
  br i1 %34, label %35, label %43

35:                                               ; preds = %33
  %36 = add nsw i64 %31, -64
  %37 = shl nsw i64 -1, %36
  %38 = xor i64 %37, -1
  %39 = load i64, ptr %5, align 8, !tbaa !24
  %40 = and i64 %39, %38
  %41 = shl nsw i64 %10, %36
  %42 = or i64 %40, %41
  store i64 %42, ptr %5, align 8, !tbaa !24
  br label %50

43:                                               ; preds = %33
  store i64 %10, ptr %5, align 8, !tbaa !24
  %44 = shl nsw i64 -1, %31
  %45 = xor i64 %44, -1
  %46 = load i64, ptr %4, align 8, !tbaa !24
  %47 = and i64 %46, %45
  %48 = shl nsw i64 %10, %31
  %49 = or i64 %47, %48
  store i64 %49, ptr %4, align 8, !tbaa !24
  br label %50

50:                                               ; preds = %30, %43, %35, %29
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @lrotate_double(i64 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) local_unnamed_addr #13 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  %9 = zext i32 %3 to i64
  %10 = srem i64 %2, %9
  %11 = icmp slt i64 %10, 0
  %12 = select i1 %11, i64 %9, i64 0
  %13 = add nsw i64 %12, %10
  call void @lshift_double(i64 noundef %0, i64 noundef %1, i64 noundef %13, i32 noundef %3, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef 0)
  %14 = sub nsw i64 %9, %13
  %15 = icmp sgt i64 %14, 127
  br i1 %15, label %28, label %16

16:                                               ; preds = %6
  %17 = icmp sgt i64 %14, 63
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = add nsw i64 %14, -64
  %20 = lshr i64 %1, %19
  br label %28

21:                                               ; preds = %16
  %22 = lshr i64 %1, %14
  %23 = lshr i64 %0, %14
  %24 = sub nsw i64 63, %14
  %25 = shl i64 %1, %24
  %26 = shl i64 %25, 1
  %27 = or i64 %26, %23
  br label %28

28:                                               ; preds = %6, %21, %18
  %29 = phi i64 [ 0, %18 ], [ %22, %21 ], [ 0, %6 ]
  %30 = phi i64 [ %20, %18 ], [ %27, %21 ], [ 0, %6 ]
  %31 = icmp sgt i64 %13, 0
  br i1 %31, label %32, label %45

32:                                               ; preds = %28
  %33 = icmp ugt i64 %13, 127
  br i1 %33, label %45, label %34

34:                                               ; preds = %32
  %35 = icmp ugt i64 %13, 63
  br i1 %35, label %36, label %41

36:                                               ; preds = %34
  %37 = add nsw i64 %13, -64
  %38 = shl nsw i64 -1, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %29, %39
  br label %45

41:                                               ; preds = %34
  %42 = shl nsw i64 -1, %13
  %43 = xor i64 %42, -1
  %44 = and i64 %30, %43
  br label %45

45:                                               ; preds = %28, %32, %36, %41
  %46 = phi i64 [ %30, %32 ], [ %30, %36 ], [ %44, %41 ], [ 0, %28 ]
  %47 = phi i64 [ %29, %32 ], [ %40, %36 ], [ 0, %41 ], [ 0, %28 ]
  %48 = load i64, ptr %7, align 8, !tbaa !24
  %49 = or i64 %48, %46
  store i64 %49, ptr %4, align 8, !tbaa !24
  %50 = load i64, ptr %8, align 8, !tbaa !24
  %51 = or i64 %50, %47
  store i64 %51, ptr %5, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: write) uwtable
define dso_local void @rrotate_double(i64 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) local_unnamed_addr #13 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  %9 = zext i32 %3 to i64
  %10 = srem i64 %2, %9
  %11 = icmp slt i64 %10, 0
  %12 = select i1 %11, i64 %9, i64 0
  %13 = add nsw i64 %12, %10
  %14 = icmp sgt i64 %13, 127
  br i1 %14, label %27, label %15

15:                                               ; preds = %6
  %16 = icmp sgt i64 %13, 63
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = add nsw i64 %13, -64
  %19 = lshr i64 %1, %18
  br label %27

20:                                               ; preds = %15
  %21 = lshr i64 %1, %13
  %22 = lshr i64 %0, %13
  %23 = sub nsw i64 63, %13
  %24 = shl i64 %1, %23
  %25 = shl i64 %24, 1
  %26 = or i64 %25, %22
  br label %27

27:                                               ; preds = %6, %20, %17
  %28 = phi i64 [ 0, %17 ], [ %21, %20 ], [ 0, %6 ]
  %29 = phi i64 [ %19, %17 ], [ %26, %20 ], [ 0, %6 ]
  %30 = icmp slt i64 %13, %9
  %31 = sub nsw i64 %9, %13
  br i1 %30, label %32, label %45

32:                                               ; preds = %27
  %33 = icmp sgt i64 %31, 127
  br i1 %33, label %45, label %34

34:                                               ; preds = %32
  %35 = icmp sgt i64 %31, 63
  br i1 %35, label %36, label %41

36:                                               ; preds = %34
  %37 = add nsw i64 %31, -64
  %38 = shl nsw i64 -1, %37
  %39 = xor i64 %38, -1
  %40 = and i64 %28, %39
  br label %45

41:                                               ; preds = %34
  %42 = shl nsw i64 -1, %31
  %43 = xor i64 %42, -1
  %44 = and i64 %29, %43
  br label %45

45:                                               ; preds = %27, %32, %36, %41
  %46 = phi i64 [ %29, %32 ], [ %29, %36 ], [ %44, %41 ], [ 0, %27 ]
  %47 = phi i64 [ %28, %32 ], [ %40, %36 ], [ 0, %41 ], [ 0, %27 ]
  call void @lshift_double(i64 noundef %0, i64 noundef %1, i64 noundef %31, i32 noundef %3, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef 0)
  %48 = load i64, ptr %7, align 8, !tbaa !24
  %49 = or i64 %48, %46
  store i64 %49, ptr %4, align 8, !tbaa !24
  %50 = load i64, ptr %8, align 8, !tbaa !24
  %51 = or i64 %50, %47
  store i64 %51, ptr %5, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @div_and_round_double(i32 noundef %0, i32 noundef %1, i64 noundef %2, i64 noundef %3, i64 noundef %4, i64 noundef %5, ptr nocapture noundef %6, ptr nocapture noundef %7, ptr nocapture noundef %8, ptr nocapture noundef %9) local_unnamed_addr #10 {
  %11 = alloca [5 x i64], align 16
  %12 = alloca [4 x i64], align 16
  %13 = alloca [4 x i64], align 16
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 40, ptr nonnull %11) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %13) #24
  %16 = or i64 %5, %4
  %17 = icmp eq i64 %16, 0
  %18 = select i1 %17, i64 1, i64 %4
  %19 = zext i1 %17 to i32
  %20 = icmp eq i32 %1, 0
  br i1 %20, label %21, label %50

21:                                               ; preds = %10
  %22 = icmp slt i64 %3, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %21
  %24 = icmp eq i64 %2, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %23
  %26 = sub i64 0, %2
  %27 = xor i64 %3, -1
  br label %35

28:                                               ; preds = %23
  %29 = sub nsw i64 0, %3
  %30 = icmp eq i64 %3, -9223372036854775808
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = and i64 %18, %5
  %33 = icmp eq i64 %32, -1
  %34 = select i1 %33, i32 1, i32 %19
  br label %35

35:                                               ; preds = %25, %31, %28, %21
  %36 = phi i64 [ 0, %28 ], [ 0, %31 ], [ %2, %21 ], [ %26, %25 ]
  %37 = phi i64 [ %29, %28 ], [ -9223372036854775808, %31 ], [ %3, %21 ], [ %27, %25 ]
  %38 = phi i32 [ %19, %28 ], [ %34, %31 ], [ %19, %21 ], [ %19, %25 ]
  %39 = phi i32 [ -1, %28 ], [ -1, %31 ], [ 0, %21 ], [ -1, %25 ]
  %40 = icmp slt i64 %5, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %35
  %42 = xor i32 %39, -1
  %43 = icmp eq i64 %18, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = sub nsw i64 0, %5
  %46 = icmp eq i64 %37, 0
  br i1 %46, label %64, label %70

47:                                               ; preds = %41
  %48 = sub i64 0, %18
  %49 = xor i64 %5, -1
  br label %50

50:                                               ; preds = %47, %35, %10
  %51 = phi i64 [ %36, %35 ], [ %2, %10 ], [ %36, %47 ]
  %52 = phi i64 [ %37, %35 ], [ %3, %10 ], [ %37, %47 ]
  %53 = phi i64 [ %18, %35 ], [ %18, %10 ], [ %48, %47 ]
  %54 = phi i64 [ %5, %35 ], [ %5, %10 ], [ %49, %47 ]
  %55 = phi i32 [ %38, %35 ], [ %19, %10 ], [ %38, %47 ]
  %56 = phi i32 [ %39, %35 ], [ 0, %10 ], [ %42, %47 ]
  %57 = or i64 %54, %52
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %50
  store i64 0, ptr %9, align 8, !tbaa !24
  store i64 0, ptr %7, align 8, !tbaa !24
  %60 = udiv i64 %51, %53
  store i64 %60, ptr %6, align 8, !tbaa !24
  br label %312

61:                                               ; preds = %50
  %62 = icmp eq i64 %54, 0
  %63 = icmp eq i64 %52, 0
  br i1 %63, label %64, label %70

64:                                               ; preds = %44, %61
  %65 = phi i64 [ %36, %44 ], [ %51, %61 ]
  %66 = phi i64 [ 0, %44 ], [ %53, %61 ]
  %67 = phi i64 [ %45, %44 ], [ %54, %61 ]
  %68 = phi i32 [ %38, %44 ], [ %55, %61 ]
  %69 = phi i32 [ %42, %44 ], [ %56, %61 ]
  store i64 0, ptr %6, align 8, !tbaa !24
  store i64 0, ptr %7, align 8, !tbaa !24
  store i64 0, ptr %9, align 8, !tbaa !24
  store i64 %65, ptr %8, align 8, !tbaa !24
  br label %312

70:                                               ; preds = %44, %61
  %71 = phi i64 [ %36, %44 ], [ %51, %61 ]
  %72 = phi i64 [ %37, %44 ], [ %52, %61 ]
  %73 = phi i64 [ 0, %44 ], [ %53, %61 ]
  %74 = phi i64 [ %45, %44 ], [ %54, %61 ]
  %75 = phi i32 [ %38, %44 ], [ %55, %61 ]
  %76 = phi i32 [ %42, %44 ], [ %56, %61 ]
  %77 = phi i1 [ false, %44 ], [ %62, %61 ]
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(32) %13, i8 0, i64 32, i1 false)
  %78 = getelementptr inbounds i8, ptr %11, i64 32
  store i64 0, ptr %78, align 16
  %79 = and i64 %71, 4294967295
  store i64 %79, ptr %11, align 16, !tbaa !24
  %80 = lshr i64 %71, 32
  %81 = getelementptr inbounds i64, ptr %11, i64 1
  store i64 %80, ptr %81, align 8, !tbaa !24
  %82 = and i64 %72, 4294967295
  %83 = getelementptr inbounds i64, ptr %11, i64 2
  store i64 %82, ptr %83, align 16, !tbaa !24
  %84 = lshr i64 %72, 32
  %85 = getelementptr inbounds i64, ptr %11, i64 3
  store i64 %84, ptr %85, align 8, !tbaa !24
  %86 = and i64 %73, 4294967295
  store i64 %86, ptr %12, align 16, !tbaa !24
  %87 = lshr i64 %73, 32
  %88 = getelementptr inbounds i64, ptr %12, i64 1
  store i64 %87, ptr %88, align 8, !tbaa !24
  %89 = and i64 %74, 4294967295
  %90 = getelementptr inbounds i64, ptr %12, i64 2
  store i64 %89, ptr %90, align 16, !tbaa !24
  %91 = lshr i64 %74, 32
  %92 = getelementptr inbounds i64, ptr %12, i64 3
  store i64 %91, ptr %92, align 8, !tbaa !24
  %93 = icmp ult i64 %73, 4294967296
  %94 = and i1 %93, %77
  br i1 %94, label %95, label %115

95:                                               ; preds = %70
  %96 = trunc i64 %84 to i32
  %97 = trunc i64 %73 to i32
  %98 = udiv i32 %96, %97
  %99 = zext i32 %98 to i64
  %100 = trunc i64 %84 to i32
  %101 = trunc i64 %73 to i32
  %102 = urem i32 %100, %101
  %103 = zext i32 %102 to i64
  %104 = shl nuw i64 %103, 32
  %105 = or i64 %82, %104
  %106 = udiv i64 %105, %73
  %107 = urem i64 %105, %73
  %108 = shl nuw i64 %107, 32
  %109 = or i64 %80, %108
  %110 = udiv i64 %109, %73
  %111 = urem i64 %109, %73
  %112 = shl nuw i64 %111, 32
  %113 = or i64 %79, %112
  %114 = udiv i64 %113, %73
  br label %303

115:                                              ; preds = %70, %115
  %116 = phi i64 [ %120, %115 ], [ 3, %70 ]
  %117 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %116
  %118 = load i64, ptr %117, align 8, !tbaa !24
  %119 = icmp eq i64 %118, 0
  %120 = add i64 %116, -1
  br i1 %119, label %115, label %121

121:                                              ; preds = %115
  %122 = trunc i64 %116 to i32
  %123 = add nsw i64 %118, 1
  %124 = icmp ult i64 %123, 2147483649
  br i1 %124, label %125, label %166

125:                                              ; preds = %121
  %126 = udiv i64 4294967296, %123
  %127 = mul nuw i64 %80, %126
  %128 = mul nuw i64 %82, %126
  %129 = mul nuw i64 %84, %126
  %130 = mul nuw i64 %79, %126
  %131 = lshr i64 %130, 32
  %132 = add nuw i64 %127, %131
  %133 = lshr i64 %132, 32
  %134 = add nuw i64 %128, %133
  %135 = lshr i64 %134, 32
  %136 = add nuw i64 %129, %135
  %137 = insertelement <4 x i64> poison, i64 %130, i64 0
  %138 = insertelement <4 x i64> %137, i64 %132, i64 1
  %139 = insertelement <4 x i64> %138, i64 %134, i64 2
  %140 = insertelement <4 x i64> %139, i64 %136, i64 3
  %141 = and <4 x i64> %140, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  store <4 x i64> %141, ptr %11, align 16, !tbaa !24
  %142 = lshr i64 %136, 32
  %143 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 4
  store i64 %142, ptr %143, align 16, !tbaa !24
  %144 = mul nuw i64 %86, %126
  %145 = and i64 %144, 4294967295
  store i64 %145, ptr %12, align 16, !tbaa !24
  %146 = lshr i64 %144, 32
  %147 = icmp eq i64 %145, 0
  %148 = select i1 %147, i32 %122, i32 0
  %149 = mul nuw i64 %87, %126
  %150 = add nuw i64 %149, %146
  %151 = and i64 %150, 4294967295
  store i64 %151, ptr %88, align 8, !tbaa !24
  %152 = lshr i64 %150, 32
  %153 = icmp eq i64 %151, 0
  %154 = select i1 %153, i32 %148, i32 1
  %155 = mul nuw i64 %89, %126
  %156 = add nuw i64 %155, %152
  %157 = and i64 %156, 4294967295
  store i64 %157, ptr %90, align 16, !tbaa !24
  %158 = lshr i64 %156, 32
  %159 = icmp eq i64 %157, 0
  %160 = select i1 %159, i32 %154, i32 2
  %161 = mul nuw i64 %91, %126
  %162 = add nuw i64 %161, %158
  %163 = and i64 %162, 4294967295
  store i64 %163, ptr %92, align 8, !tbaa !24
  %164 = icmp eq i64 %163, 0
  %165 = select i1 %164, i32 %160, i32 3
  br label %166

166:                                              ; preds = %125, %121
  %167 = phi i32 [ %122, %121 ], [ %165, %125 ]
  %168 = sub i32 3, %167
  %169 = icmp sgt i32 %168, -1
  br i1 %169, label %170, label %303

170:                                              ; preds = %166
  %171 = sext i32 %167 to i64
  %172 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %171
  %173 = load i64, ptr %172, align 8, !tbaa !24
  %174 = add nsw i32 %167, -1
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %175
  %177 = icmp slt i32 %167, 0
  %178 = add i32 %167, 1
  %179 = zext i32 %168 to i64
  %180 = zext i32 %178 to i64
  %181 = and i64 %180, 1
  %182 = icmp eq i32 %167, 0
  %183 = and i64 %180, 4294967294
  %184 = icmp eq i64 %181, 0
  br label %185

185:                                              ; preds = %170, %290
  %186 = phi i64 [ %179, %170 ], [ %293, %290 ]
  %187 = add nsw i64 %186, %171
  %188 = add nsw i64 %187, 1
  %189 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %188
  %190 = load i64, ptr %189, align 8, !tbaa !24
  %191 = shl i64 %190, 32
  %192 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %187
  %193 = load i64, ptr %192, align 8, !tbaa !24
  %194 = add i64 %191, %193
  %195 = icmp eq i64 %190, %173
  br i1 %195, label %198, label %196

196:                                              ; preds = %185
  %197 = udiv i64 %194, %173
  br label %198

198:                                              ; preds = %185, %196
  %199 = phi i64 [ %197, %196 ], [ 4294967295, %185 ]
  %200 = mul i64 %199, %173
  %201 = sub i64 %194, %200
  %202 = icmp ult i64 %201, 4294967296
  br i1 %202, label %203, label %214

203:                                              ; preds = %198
  %204 = load i64, ptr %176, align 8, !tbaa !24
  %205 = mul i64 %204, %199
  %206 = shl nuw i64 %201, 32
  %207 = add nsw i64 %187, -1
  %208 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %207
  %209 = load i64, ptr %208, align 8, !tbaa !24
  %210 = add i64 %209, %206
  %211 = icmp ugt i64 %205, %210
  %212 = sext i1 %211 to i64
  %213 = add i64 %199, %212
  br label %214

214:                                              ; preds = %203, %198
  %215 = phi i64 [ %199, %198 ], [ %213, %203 ]
  br i1 %177, label %238, label %216

216:                                              ; preds = %214, %216
  %217 = phi i64 [ %233, %216 ], [ 0, %214 ]
  %218 = phi i64 [ %232, %216 ], [ 0, %214 ]
  %219 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %217
  %220 = load i64, ptr %219, align 8, !tbaa !24
  %221 = mul i64 %220, %215
  %222 = add i64 %221, %218
  %223 = lshr i64 %222, 32
  %224 = add nsw i64 %217, %186
  %225 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %224
  %226 = load i64, ptr %225, align 8, !tbaa !24
  %227 = and i64 %222, 4294967295
  %228 = sub i64 %226, %227
  %229 = and i64 %228, 4294967295
  store i64 %229, ptr %225, align 8, !tbaa !24
  %230 = icmp ugt i64 %228, 4294967295
  %231 = zext i1 %230 to i64
  %232 = add nuw nsw i64 %223, %231
  %233 = add nuw nsw i64 %217, 1
  %234 = icmp eq i64 %233, %180
  br i1 %234, label %235, label %216, !llvm.loop !25

235:                                              ; preds = %216
  %236 = load i64, ptr %189, align 8, !tbaa !24
  %237 = icmp slt i64 %236, %232
  br i1 %237, label %240, label %290

238:                                              ; preds = %214
  %239 = icmp slt i64 %190, 0
  br i1 %239, label %285, label %290

240:                                              ; preds = %235
  br i1 %177, label %285, label %241

241:                                              ; preds = %240
  br i1 %182, label %268, label %242

242:                                              ; preds = %241, %242
  %243 = phi i64 [ %265, %242 ], [ 0, %241 ]
  %244 = phi i64 [ %263, %242 ], [ 0, %241 ]
  %245 = phi i64 [ %266, %242 ], [ 0, %241 ]
  %246 = add nsw i64 %243, %186
  %247 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %246
  %248 = load i64, ptr %247, align 8, !tbaa !24
  %249 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %243
  %250 = load i64, ptr %249, align 16, !tbaa !24
  %251 = add i64 %248, %244
  %252 = add i64 %251, %250
  %253 = lshr i64 %252, 32
  %254 = and i64 %252, 4294967295
  store i64 %254, ptr %247, align 8, !tbaa !24
  %255 = or i64 %243, 1
  %256 = add nsw i64 %255, %186
  %257 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %256
  %258 = load i64, ptr %257, align 8, !tbaa !24
  %259 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %255
  %260 = load i64, ptr %259, align 8, !tbaa !24
  %261 = add i64 %258, %253
  %262 = add i64 %261, %260
  %263 = lshr i64 %262, 32
  %264 = and i64 %262, 4294967295
  store i64 %264, ptr %257, align 8, !tbaa !24
  %265 = add nuw nsw i64 %243, 2
  %266 = add i64 %245, 2
  %267 = icmp eq i64 %266, %183
  br i1 %267, label %268, label %242, !llvm.loop !26

268:                                              ; preds = %242, %241
  %269 = phi i64 [ undef, %241 ], [ %263, %242 ]
  %270 = phi i64 [ 0, %241 ], [ %265, %242 ]
  %271 = phi i64 [ 0, %241 ], [ %263, %242 ]
  br i1 %184, label %282, label %272

272:                                              ; preds = %268
  %273 = add nsw i64 %270, %186
  %274 = getelementptr inbounds [5 x i64], ptr %11, i64 0, i64 %273
  %275 = load i64, ptr %274, align 8, !tbaa !24
  %276 = getelementptr inbounds [4 x i64], ptr %12, i64 0, i64 %270
  %277 = load i64, ptr %276, align 8, !tbaa !24
  %278 = add i64 %275, %271
  %279 = add i64 %278, %277
  %280 = lshr i64 %279, 32
  %281 = and i64 %279, 4294967295
  store i64 %281, ptr %274, align 8, !tbaa !24
  br label %282

282:                                              ; preds = %268, %272
  %283 = phi i64 [ %269, %268 ], [ %280, %272 ]
  %284 = load i64, ptr %189, align 8, !tbaa !24
  br label %285

285:                                              ; preds = %238, %282, %240
  %286 = phi i64 [ %236, %240 ], [ %284, %282 ], [ %190, %238 ]
  %287 = phi i64 [ 0, %240 ], [ %283, %282 ], [ 0, %238 ]
  %288 = add i64 %215, -1
  %289 = add i64 %286, %287
  store i64 %289, ptr %189, align 8, !tbaa !24
  br label %290

290:                                              ; preds = %238, %285, %235
  %291 = phi i64 [ %288, %285 ], [ %215, %235 ], [ %215, %238 ]
  %292 = getelementptr inbounds [4 x i64], ptr %13, i64 0, i64 %186
  store i64 %291, ptr %292, align 8, !tbaa !24
  %293 = add nsw i64 %186, -1
  %294 = icmp sgt i64 %186, 0
  br i1 %294, label %185, label %295, !llvm.loop !27

295:                                              ; preds = %290
  %296 = load i64, ptr %13, align 16, !tbaa !24
  %297 = getelementptr inbounds i64, ptr %13, i64 1
  %298 = load i64, ptr %297, align 8, !tbaa !24
  %299 = getelementptr inbounds i64, ptr %13, i64 2
  %300 = load i64, ptr %299, align 16, !tbaa !24
  %301 = getelementptr inbounds i64, ptr %13, i64 3
  %302 = load i64, ptr %301, align 8, !tbaa !24
  br label %303

303:                                              ; preds = %295, %95, %166
  %304 = phi i64 [ %302, %295 ], [ %99, %95 ], [ 0, %166 ]
  %305 = phi i64 [ %300, %295 ], [ %106, %95 ], [ 0, %166 ]
  %306 = phi i64 [ %298, %295 ], [ %110, %95 ], [ 0, %166 ]
  %307 = phi i64 [ %296, %295 ], [ %114, %95 ], [ 0, %166 ]
  %308 = shl i64 %306, 32
  %309 = add i64 %308, %307
  store i64 %309, ptr %6, align 8, !tbaa !24
  %310 = shl i64 %304, 32
  %311 = add i64 %310, %305
  store i64 %311, ptr %7, align 8, !tbaa !24
  br label %312

312:                                              ; preds = %303, %64, %59
  %313 = phi i32 [ %76, %303 ], [ %69, %64 ], [ %56, %59 ]
  %314 = phi i32 [ %75, %303 ], [ %68, %64 ], [ %55, %59 ]
  %315 = phi i64 [ %74, %303 ], [ %67, %64 ], [ 0, %59 ]
  %316 = phi i64 [ %73, %303 ], [ %66, %64 ], [ %53, %59 ]
  %317 = icmp eq i32 %313, 0
  %318 = load i64, ptr %6, align 8, !tbaa !24
  %319 = load i64, ptr %7, align 8, !tbaa !24
  br i1 %317, label %327, label %320

320:                                              ; preds = %312
  %321 = icmp eq i64 %318, 0
  %322 = sub nsw i64 0, %319
  %323 = sub i64 0, %318
  %324 = xor i64 %319, -1
  %325 = select i1 %321, i64 %322, i64 %324
  store i64 %323, ptr %6, align 8
  store i64 %325, ptr %7, align 8
  %326 = load i64, ptr %6, align 8, !tbaa !24
  br label %327

327:                                              ; preds = %320, %312
  %328 = phi i64 [ %325, %320 ], [ %319, %312 ]
  %329 = phi i64 [ %326, %320 ], [ %318, %312 ]
  %330 = tail call i32 @mul_double_with_sign(i64 noundef %329, i64 noundef %328, i64 noundef %4, i64 noundef %5, ptr noundef %8, ptr noundef %9, i8 noundef zeroext 0), !range !28
  %331 = load i64, ptr %8, align 8, !tbaa !24
  %332 = load i64, ptr %9, align 8, !tbaa !24
  %333 = icmp eq i64 %331, 0
  %334 = sub nsw i64 0, %332
  %335 = sub i64 0, %331
  %336 = xor i64 %332, -1
  %337 = select i1 %333, i64 %334, i64 %336
  store i64 %335, ptr %8, align 8
  store i64 %337, ptr %9, align 8
  %338 = load i64, ptr %8, align 8, !tbaa !24
  %339 = add i64 %338, %2
  %340 = add i64 %337, %3
  %341 = icmp ult i64 %339, %2
  %342 = zext i1 %341 to i64
  %343 = add i64 %340, %342
  store i64 %339, ptr %8, align 8, !tbaa !24
  store i64 %343, ptr %9, align 8, !tbaa !24
  switch i32 %0, label %420 [
    i32 67, label %440
    i32 71, label %440
    i32 76, label %440
    i32 69, label %344
    i32 73, label %344
    i32 68, label %358
    i32 72, label %358
    i32 70, label %371
    i32 74, label %371
  ]

344:                                              ; preds = %327, %327
  br i1 %317, label %440, label %345

345:                                              ; preds = %344
  %346 = load i64, ptr %8, align 8, !tbaa !24
  %347 = icmp eq i64 %346, 0
  %348 = icmp eq i64 %343, 0
  %349 = select i1 %347, i1 %348, i1 false
  br i1 %349, label %440, label %350

350:                                              ; preds = %345
  %351 = load i64, ptr %6, align 8, !tbaa !24
  %352 = load i64, ptr %7, align 8, !tbaa !24
  %353 = add i64 %351, -1
  %354 = add i64 %352, -1
  %355 = icmp ne i64 %351, 0
  %356 = zext i1 %355 to i64
  %357 = add i64 %354, %356
  store i64 %353, ptr %6, align 8, !tbaa !24
  store i64 %357, ptr %7, align 8, !tbaa !24
  br label %422

358:                                              ; preds = %327, %327
  br i1 %317, label %359, label %440

359:                                              ; preds = %358
  %360 = load i64, ptr %8, align 8, !tbaa !24
  %361 = icmp eq i64 %360, 0
  %362 = icmp eq i64 %343, 0
  %363 = select i1 %361, i1 %362, i1 false
  br i1 %363, label %440, label %364

364:                                              ; preds = %359
  %365 = load i64, ptr %6, align 8, !tbaa !24
  %366 = load i64, ptr %7, align 8, !tbaa !24
  %367 = add i64 %365, 1
  %368 = icmp eq i64 %365, -1
  %369 = zext i1 %368 to i64
  %370 = add i64 %366, %369
  store i64 %367, ptr %6, align 8, !tbaa !24
  store i64 %370, ptr %7, align 8, !tbaa !24
  br label %422

371:                                              ; preds = %327, %327
  %372 = load i64, ptr %8, align 8, !tbaa !24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #24
  %373 = icmp slt i64 %343, 0
  br i1 %373, label %374, label %381

374:                                              ; preds = %371
  %375 = icmp eq i64 %372, 0
  br i1 %375, label %376, label %378

376:                                              ; preds = %374
  %377 = sub nsw i64 0, %343
  br label %381

378:                                              ; preds = %374
  %379 = sub i64 0, %372
  %380 = xor i64 %343, -1
  br label %381

381:                                              ; preds = %378, %376, %371
  %382 = phi i64 [ %372, %371 ], [ 0, %376 ], [ %379, %378 ]
  %383 = phi i64 [ %343, %371 ], [ %377, %376 ], [ %380, %378 ]
  %384 = icmp slt i64 %315, 0
  br i1 %384, label %385, label %392

385:                                              ; preds = %381
  %386 = icmp eq i64 %316, 0
  br i1 %386, label %387, label %389

387:                                              ; preds = %385
  %388 = sub nsw i64 0, %315
  br label %392

389:                                              ; preds = %385
  %390 = sub i64 0, %316
  %391 = xor i64 %315, -1
  br label %392

392:                                              ; preds = %389, %387, %381
  %393 = phi i64 [ %316, %381 ], [ 0, %387 ], [ %390, %389 ]
  %394 = phi i64 [ %315, %381 ], [ %388, %387 ], [ %391, %389 ]
  %395 = call i32 @mul_double_with_sign(i64 noundef 2, i64 noundef 0, i64 noundef %382, i64 noundef %383, ptr noundef nonnull %14, ptr noundef nonnull %15, i8 noundef zeroext 0), !range !28
  %396 = load i64, ptr %15, align 8, !tbaa !24
  %397 = icmp ult i64 %394, %396
  br i1 %397, label %403, label %398

398:                                              ; preds = %392
  %399 = icmp ne i64 %394, %396
  %400 = load i64, ptr %14, align 8
  %401 = icmp ugt i64 %393, %400
  %402 = select i1 %399, i1 true, i1 %401
  br i1 %402, label %439, label %403

403:                                              ; preds = %398, %392
  %404 = load i64, ptr %7, align 8, !tbaa !24
  %405 = icmp slt i64 %404, 0
  %406 = load i64, ptr %6, align 8, !tbaa !24
  br i1 %405, label %407, label %411

407:                                              ; preds = %403
  %408 = add i64 %406, -1
  %409 = add i64 %404, -1
  %410 = icmp ne i64 %406, 0
  br label %414

411:                                              ; preds = %403
  %412 = add i64 %406, 1
  %413 = icmp eq i64 %406, -1
  br label %414

414:                                              ; preds = %411, %407
  %415 = phi i1 [ %413, %411 ], [ %410, %407 ]
  %416 = phi i64 [ %404, %411 ], [ %409, %407 ]
  %417 = phi i64 [ %412, %411 ], [ %408, %407 ]
  %418 = zext i1 %415 to i64
  %419 = add nuw i64 %416, %418
  store i64 %417, ptr %6, align 8, !tbaa !24
  store i64 %419, ptr %7, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #24
  br label %422

420:                                              ; preds = %327
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 867, ptr noundef nonnull @.str.1) #24
  %421 = load i64, ptr %7, align 8, !tbaa !24
  br label %422

422:                                              ; preds = %414, %420, %364, %350
  %423 = phi i64 [ %419, %414 ], [ %421, %420 ], [ %370, %364 ], [ %357, %350 ]
  %424 = load i64, ptr %6, align 8, !tbaa !24
  %425 = tail call i32 @mul_double_with_sign(i64 noundef %424, i64 noundef %423, i64 noundef %4, i64 noundef %5, ptr noundef nonnull %8, ptr noundef nonnull %9, i8 noundef zeroext 0), !range !28
  %426 = load i64, ptr %8, align 8, !tbaa !24
  %427 = load i64, ptr %9, align 8, !tbaa !24
  %428 = icmp eq i64 %426, 0
  %429 = sub nsw i64 0, %427
  %430 = sub i64 0, %426
  %431 = xor i64 %427, -1
  %432 = select i1 %428, i64 %429, i64 %431
  store i64 %430, ptr %8, align 8
  store i64 %432, ptr %9, align 8
  %433 = load i64, ptr %8, align 8, !tbaa !24
  %434 = add i64 %433, %2
  %435 = add i64 %432, %3
  %436 = icmp ult i64 %434, %2
  %437 = zext i1 %436 to i64
  %438 = add i64 %435, %437
  store i64 %434, ptr %8, align 8, !tbaa !24
  store i64 %438, ptr %9, align 8, !tbaa !24
  br label %440

439:                                              ; preds = %398
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #24
  br label %440

440:                                              ; preds = %359, %345, %439, %358, %344, %327, %327, %327, %422
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 40, ptr nonnull %11) #24
  ret i32 %314
}

declare void @fancy_abort(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @div_if_zero_remainder(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #10 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  %8 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i64, ptr %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = lshr i32 %11, 21
  %13 = and i32 %12, 1
  %14 = and i64 %10, 65535
  %15 = icmp eq i64 %14, 8
  br i1 %15, label %16, label %22

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = and i32 %18, 1024
  %20 = icmp eq i32 %19, 0
  %21 = select i1 %20, i32 %13, i32 0
  br label %22

22:                                               ; preds = %16, %3
  %23 = phi i32 [ %13, %3 ], [ %21, %16 ]
  %24 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !17
  %26 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %27 = load i64, ptr %26, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1
  %29 = load i64, ptr %28, align 8, !tbaa !17
  %30 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !17
  %32 = call i32 @div_and_round_double(i32 noundef %0, i32 noundef %23, i64 noundef %25, i64 noundef %27, i64 noundef %29, i64 noundef %31, ptr noundef nonnull %4, ptr noundef nonnull %6, ptr noundef nonnull %5, ptr noundef nonnull %7), !range !28
  %33 = load i64, ptr %7, align 8, !tbaa !24
  %34 = icmp ne i64 %33, 0
  %35 = load i64, ptr %5, align 8
  %36 = icmp ne i64 %35, 0
  %37 = select i1 %34, i1 true, i1 %36
  br i1 %37, label %44, label %38

38:                                               ; preds = %22
  %39 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = load i64, ptr %4, align 8, !tbaa !24
  %42 = load i64, ptr %6, align 8, !tbaa !24
  %43 = tail call ptr @build_int_cst_wide(ptr noundef %40, i64 noundef %41, i64 noundef %42) #24
  br label %44

44:                                               ; preds = %22, %38
  %45 = phi ptr [ %43, %38 ], [ null, %22 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  ret ptr %45
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable
define dso_local void @fold_defer_overflow_warnings() local_unnamed_addr #14 {
  %1 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %2 = add nsw i32 %1, 1
  store i32 %2, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  ret void
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @fold_undefer_overflow_warnings(i8 noundef zeroext %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 958, ptr noundef nonnull @.str.1) #24
  %7 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  br label %8

8:                                                ; preds = %3, %6
  %9 = phi i32 [ %4, %3 ], [ %7, %6 ]
  %10 = add nsw i32 %9, -1
  store i32 %10, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %11 = icmp sgt i32 %9, 1
  %12 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  br i1 %11, label %13, label %21

13:                                               ; preds = %8
  %14 = icmp ne ptr %12, null
  %15 = icmp ne i32 %2, 0
  %16 = and i1 %15, %14
  %17 = load i32, ptr @fold_deferred_overflow_code, align 4
  %18 = icmp sgt i32 %17, %2
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %20, label %41

20:                                               ; preds = %13
  store i32 %2, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %41

21:                                               ; preds = %8
  store ptr null, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %22 = icmp eq i8 %0, 0
  %23 = icmp eq ptr %12, null
  %24 = select i1 %22, i1 true, i1 %23
  br i1 %24, label %41, label %25

25:                                               ; preds = %21
  %26 = load i32, ptr %1, align 8
  %27 = and i32 %26, 256
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = icmp eq i32 %2, 0
  %31 = load i32, ptr @fold_deferred_overflow_code, align 4
  %32 = icmp slt i32 %31, %2
  %33 = select i1 %30, i1 true, i1 %32
  %34 = select i1 %33, i32 %31, i32 %2
  %35 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %36 = icmp slt i32 %35, %34
  br i1 %36, label %41, label %37

37:                                               ; preds = %29
  %38 = getelementptr i8, ptr %1, i64 8
  %39 = load i32, ptr %38, align 8, !tbaa !17
  %40 = tail call zeroext i8 (i32, i32, ptr, ...) @warning_at(i32 noundef %39, i32 noundef 187, ptr noundef nonnull @.str.2, ptr noundef nonnull %12) #24
  br label %41

41:                                               ; preds = %29, %25, %21, %13, %20, %37
  ret void
}

declare zeroext i8 @warning_at(i32 noundef, i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local void @fold_undefer_and_ignore_overflow_warnings() local_unnamed_addr #10 {
  %1 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %2 = icmp sgt i32 %1, 0
  br i1 %2, label %5, label %3

3:                                                ; preds = %0
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 958, ptr noundef nonnull @.str.1) #24
  %4 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  br label %5

5:                                                ; preds = %3, %0
  %6 = phi i32 [ %1, %0 ], [ %4, %3 ]
  %7 = add nsw i32 %6, -1
  store i32 %7, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %8 = icmp sgt i32 %6, 1
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  store ptr null, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  br label %10

10:                                               ; preds = %5, %9
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define dso_local zeroext i8 @fold_deferring_overflow_warnings_p() local_unnamed_addr #15 {
  %1 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %2 = icmp sgt i32 %1, 0
  %3 = zext i1 %2 to i8
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @may_negate_without_overflow_p(ptr nocapture noundef readonly %0) local_unnamed_addr #10 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = icmp eq i64 %3, 23
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 1084, ptr noundef nonnull @.str.1) #24
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = load i64, ptr %8, align 8
  %10 = and i64 %9, 2097152
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %39

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = and i32 %14, 1023
  %16 = icmp ugt i32 %15, 64
  %17 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  br i1 %16, label %18, label %24

18:                                               ; preds = %12
  %19 = load i64, ptr %17, align 8, !tbaa !17
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %39

21:                                               ; preds = %18
  %22 = add nsw i32 %15, -64
  %23 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  br label %24

24:                                               ; preds = %12, %21
  %25 = phi ptr [ %23, %21 ], [ %17, %12 ]
  %26 = phi i32 [ %22, %21 ], [ %15, %12 ]
  %27 = load i64, ptr %25, align 8, !tbaa !17
  %28 = icmp ult i32 %26, 64
  %29 = zext i32 %26 to i64
  %30 = shl nsw i64 -1, %29
  %31 = xor i64 %30, -1
  %32 = select i1 %28, i64 %31, i64 -1
  %33 = and i64 %32, %27
  %34 = add nsw i32 %26, -1
  %35 = zext i32 %34 to i64
  %36 = shl nuw i64 1, %35
  %37 = icmp ne i64 %33, %36
  %38 = zext i1 %37 to i8
  br label %39

39:                                               ; preds = %18, %6, %24
  %40 = phi i8 [ %38, %24 ], [ 0, %6 ], [ 1, %18 ]
  ret i8 %40
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @int_const_binop(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) local_unnamed_addr #10 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  %11 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = lshr i32 %14, 21
  %16 = and i32 %15, 1
  %17 = and i64 %13, 65535
  %18 = icmp eq i64 %17, 8
  br i1 %18, label %19, label %24

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 6
  %21 = load i32, ptr %20, align 4
  %22 = and i32 %21, 1024
  %23 = icmp ne i32 %22, 0
  br label %24

24:                                               ; preds = %19, %4
  %25 = phi i1 [ false, %4 ], [ %23, %19 ]
  %26 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %27 = load i64, ptr %26, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %29 = load i64, ptr %28, align 8, !tbaa !17
  %30 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1
  %31 = load i64, ptr %30, align 8, !tbaa !17
  %32 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1, i32 1
  %33 = load i64, ptr %32, align 8, !tbaa !17
  switch i32 %0, label %250 [
    i32 87, label %34
    i32 88, label %37
    i32 89, label %40
    i32 84, label %43
    i32 83, label %45
    i32 86, label %51
    i32 85, label %53
    i32 63, label %101
    i32 64, label %113
    i32 65, label %129
    i32 67, label %131
    i32 69, label %131
    i32 68, label %131
    i32 76, label %131
    i32 70, label %153
    i32 71, label %173
    i32 73, label %173
    i32 72, label %173
    i32 74, label %195
    i32 80, label %201
    i32 81, label %201
  ]

34:                                               ; preds = %24
  %35 = or i64 %31, %27
  store i64 %35, ptr %7, align 8, !tbaa !24
  %36 = or i64 %33, %29
  store i64 %36, ptr %8, align 8, !tbaa !24
  br label %214

37:                                               ; preds = %24
  %38 = xor i64 %31, %27
  store i64 %38, ptr %7, align 8, !tbaa !24
  %39 = xor i64 %33, %29
  store i64 %39, ptr %8, align 8, !tbaa !24
  br label %214

40:                                               ; preds = %24
  %41 = and i64 %31, %27
  store i64 %41, ptr %7, align 8, !tbaa !24
  %42 = and i64 %33, %29
  store i64 %42, ptr %8, align 8, !tbaa !24
  br label %214

43:                                               ; preds = %24
  %44 = sub i64 0, %31
  br label %45

45:                                               ; preds = %24, %43
  %46 = phi i64 [ %31, %24 ], [ %44, %43 ]
  %47 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 6
  %48 = load i32, ptr %47, align 4
  %49 = and i32 %48, 1023
  %50 = xor i32 %16, 1
  call void @lshift_double(i64 noundef %27, i64 noundef %29, i64 noundef %46, i32 noundef %49, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef %50)
  br label %214

51:                                               ; preds = %24
  %52 = sub i64 0, %31
  br label %53

53:                                               ; preds = %24, %51
  %54 = phi i64 [ %31, %24 ], [ %52, %51 ]
  %55 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 6
  %56 = load i32, ptr %55, align 4
  %57 = and i32 %56, 1023
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  %58 = zext i32 %57 to i64
  %59 = srem i64 %54, %58
  %60 = icmp slt i64 %59, 0
  %61 = select i1 %60, i64 %58, i64 0
  %62 = add nsw i64 %61, %59
  call void @lshift_double(i64 noundef %27, i64 noundef %29, i64 noundef %62, i32 noundef %57, ptr noundef nonnull %5, ptr noundef nonnull %6, i32 noundef 0)
  %63 = sub nsw i64 %58, %62
  %64 = icmp sgt i64 %63, 127
  br i1 %64, label %77, label %65

65:                                               ; preds = %53
  %66 = icmp sgt i64 %63, 63
  br i1 %66, label %67, label %70

67:                                               ; preds = %65
  %68 = add nsw i64 %63, -64
  %69 = lshr i64 %29, %68
  br label %77

70:                                               ; preds = %65
  %71 = lshr i64 %29, %63
  %72 = lshr i64 %27, %63
  %73 = sub nsw i64 63, %63
  %74 = shl i64 %29, %73
  %75 = shl i64 %74, 1
  %76 = or i64 %75, %72
  br label %77

77:                                               ; preds = %70, %67, %53
  %78 = phi i64 [ 0, %67 ], [ %71, %70 ], [ 0, %53 ]
  %79 = phi i64 [ %69, %67 ], [ %76, %70 ], [ 0, %53 ]
  %80 = icmp sgt i64 %62, 0
  br i1 %80, label %81, label %94

81:                                               ; preds = %77
  %82 = icmp ugt i64 %62, 127
  br i1 %82, label %94, label %83

83:                                               ; preds = %81
  %84 = icmp ugt i64 %62, 63
  br i1 %84, label %85, label %90

85:                                               ; preds = %83
  %86 = add nsw i64 %62, -64
  %87 = shl nsw i64 -1, %86
  %88 = xor i64 %87, -1
  %89 = and i64 %78, %88
  br label %94

90:                                               ; preds = %83
  %91 = shl nsw i64 -1, %62
  %92 = xor i64 %91, -1
  %93 = and i64 %79, %92
  br label %94

94:                                               ; preds = %77, %81, %85, %90
  %95 = phi i64 [ %79, %81 ], [ %79, %85 ], [ %93, %90 ], [ 0, %77 ]
  %96 = phi i64 [ %78, %81 ], [ %89, %85 ], [ 0, %90 ], [ 0, %77 ]
  %97 = load i64, ptr %5, align 8, !tbaa !24
  %98 = or i64 %97, %95
  store i64 %98, ptr %7, align 8, !tbaa !24
  %99 = load i64, ptr %6, align 8, !tbaa !24
  %100 = or i64 %99, %96
  store i64 %100, ptr %8, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  br label %214

101:                                              ; preds = %24
  %102 = add i64 %31, %27
  %103 = add i64 %33, %29
  %104 = icmp ult i64 %102, %27
  %105 = zext i1 %104 to i64
  %106 = add i64 %103, %105
  store i64 %102, ptr %7, align 8, !tbaa !24
  store i64 %106, ptr %8, align 8, !tbaa !24
  %107 = xor i64 %33, %29
  %108 = xor i64 %107, -1
  %109 = xor i64 %106, %29
  %110 = and i64 %109, %108
  %111 = lshr i64 %110, 63
  %112 = trunc i64 %111 to i32
  br label %214

113:                                              ; preds = %24
  %114 = icmp eq i64 %31, 0
  %115 = sub nsw i64 0, %33
  %116 = xor i64 %33, -1
  %117 = select i1 %114, i64 %115, i64 %116
  %118 = sub i64 %27, %31
  %119 = add i64 %117, %29
  %120 = icmp ult i64 %118, %27
  %121 = zext i1 %120 to i64
  %122 = add i64 %119, %121
  store i64 %118, ptr %7, align 8, !tbaa !24
  store i64 %122, ptr %8, align 8, !tbaa !24
  %123 = xor i64 %122, %29
  %124 = xor i64 %33, %122
  %125 = xor i64 %124, -1
  %126 = and i64 %123, %125
  %127 = lshr i64 %126, 63
  %128 = trunc i64 %127 to i32
  br label %214

129:                                              ; preds = %24
  %130 = call i32 @mul_double_with_sign(i64 noundef %27, i64 noundef %29, i64 noundef %31, i64 noundef %33, ptr noundef nonnull %7, ptr noundef nonnull %8, i8 noundef zeroext 0), !range !28
  br label %214

131:                                              ; preds = %24, %24, %24, %24
  %132 = icmp eq i64 %33, 0
  %133 = icmp sgt i64 %31, 0
  %134 = select i1 %132, i1 %133, i1 false
  br i1 %134, label %135, label %153

135:                                              ; preds = %131
  %136 = load i64, ptr %1, align 8
  %137 = and i64 %136, 134217728
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %157

139:                                              ; preds = %135
  %140 = load i64, ptr %2, align 8
  %141 = and i64 %140, 134217728
  %142 = icmp eq i64 %141, 0
  %143 = icmp eq i64 %29, 0
  %144 = select i1 %142, i1 %143, i1 false
  %145 = icmp sgt i64 %27, -1
  %146 = select i1 %144, i1 %145, i1 false
  br i1 %146, label %147, label %157

147:                                              ; preds = %139
  %148 = icmp eq i32 %0, 68
  %149 = add nsw i64 %31, -1
  %150 = select i1 %148, i64 %149, i64 0
  %151 = add nuw i64 %150, %27
  %152 = udiv i64 %151, %31
  store i64 %152, ptr %7, align 8, !tbaa !24
  store i64 0, ptr %8, align 8, !tbaa !24
  br label %214

153:                                              ; preds = %131, %24
  %154 = icmp eq i64 %33, 0
  %155 = icmp eq i64 %31, 0
  %156 = select i1 %154, i1 %155, i1 false
  br i1 %156, label %250, label %157

157:                                              ; preds = %139, %135, %153
  %158 = phi i1 [ %154, %153 ], [ true, %135 ], [ true, %139 ]
  %159 = icmp eq i64 %31, 1
  %160 = select i1 %158, i1 %159, i1 false
  br i1 %160, label %161, label %162

161:                                              ; preds = %157
  store i64 %27, ptr %7, align 8, !tbaa !24
  store i64 %29, ptr %8, align 8, !tbaa !24
  br label %214

162:                                              ; preds = %157
  %163 = icmp eq i64 %27, %31
  %164 = icmp eq i64 %29, %33
  %165 = select i1 %163, i1 %164, i1 false
  br i1 %165, label %166, label %171

166:                                              ; preds = %162
  %167 = icmp eq i64 %27, 0
  %168 = icmp eq i64 %29, 0
  %169 = select i1 %167, i1 %168, i1 false
  br i1 %169, label %171, label %170

170:                                              ; preds = %166
  store i64 1, ptr %7, align 8, !tbaa !24
  store i64 0, ptr %8, align 8, !tbaa !24
  br label %214

171:                                              ; preds = %166, %162
  %172 = call i32 @div_and_round_double(i32 noundef %0, i32 noundef %16, i64 noundef %27, i64 noundef %29, i64 noundef %31, i64 noundef %33, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10), !range !28
  br label %214

173:                                              ; preds = %24, %24, %24
  %174 = icmp eq i64 %33, 0
  %175 = icmp sgt i64 %31, 0
  %176 = select i1 %174, i1 %175, i1 false
  br i1 %176, label %177, label %195

177:                                              ; preds = %173
  %178 = load i64, ptr %1, align 8
  %179 = and i64 %178, 134217728
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %199

181:                                              ; preds = %177
  %182 = load i64, ptr %2, align 8
  %183 = and i64 %182, 134217728
  %184 = icmp eq i64 %183, 0
  %185 = icmp eq i64 %29, 0
  %186 = select i1 %184, i1 %185, i1 false
  %187 = icmp sgt i64 %27, -1
  %188 = select i1 %186, i1 %187, i1 false
  br i1 %188, label %189, label %199

189:                                              ; preds = %181
  %190 = icmp eq i32 %0, 72
  %191 = add nsw i64 %31, -1
  %192 = select i1 %190, i64 %191, i64 0
  %193 = add nuw i64 %192, %27
  %194 = urem i64 %193, %31
  store i64 %194, ptr %7, align 8, !tbaa !24
  store i64 0, ptr %8, align 8, !tbaa !24
  br label %214

195:                                              ; preds = %173, %24
  %196 = icmp eq i64 %33, 0
  %197 = icmp eq i64 %31, 0
  %198 = select i1 %196, i1 %197, i1 false
  br i1 %198, label %250, label %199

199:                                              ; preds = %181, %177, %195
  %200 = call i32 @div_and_round_double(i32 noundef %0, i32 noundef %16, i64 noundef %27, i64 noundef %29, i64 noundef %31, i64 noundef %33, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %7, ptr noundef nonnull %8), !range !28
  br label %214

201:                                              ; preds = %24, %24
  %202 = icmp eq i32 %16, 0
  %203 = icmp eq i64 %29, %33
  %204 = icmp ult i64 %27, %31
  %205 = select i1 %203, i1 %204, i1 false
  %206 = icmp slt i64 %29, %33
  %207 = icmp ult i64 %29, %33
  %208 = select i1 %202, i1 %206, i1 %207
  %209 = select i1 %208, i1 true, i1 %205
  %210 = icmp ne i32 %0, 80
  %211 = xor i1 %210, %209
  br i1 %211, label %212, label %213

212:                                              ; preds = %201
  store i64 %27, ptr %7, align 8, !tbaa !24
  store i64 %29, ptr %8, align 8, !tbaa !24
  br label %214

213:                                              ; preds = %201
  store i64 %31, ptr %7, align 8, !tbaa !24
  store i64 %33, ptr %8, align 8, !tbaa !24
  br label %214

214:                                              ; preds = %212, %213, %199, %189, %171, %170, %161, %147, %129, %113, %101, %94, %45, %40, %37, %34
  %215 = phi i32 [ 0, %212 ], [ 0, %213 ], [ %200, %199 ], [ 0, %189 ], [ 0, %161 ], [ %172, %171 ], [ 0, %170 ], [ 0, %147 ], [ %130, %129 ], [ %128, %113 ], [ %112, %101 ], [ 0, %94 ], [ 0, %45 ], [ 0, %40 ], [ 0, %37 ], [ 0, %34 ]
  %216 = icmp eq i32 %3, 0
  %217 = load ptr, ptr %11, align 8, !tbaa !17
  %218 = load i64, ptr %7, align 8, !tbaa !24
  %219 = load i64, ptr %8, align 8, !tbaa !24
  br i1 %216, label %237, label %220

220:                                              ; preds = %214
  %221 = tail call ptr @build_int_cst_wide(ptr noundef %217, i64 noundef %218, i64 noundef %219) #24
  %222 = icmp eq i32 %16, 0
  %223 = select i1 %222, i1 true, i1 %25
  %224 = select i1 %223, i32 %215, i32 0
  %225 = load i64, ptr %1, align 8
  %226 = load i64, ptr %2, align 8
  %227 = or i64 %226, %225
  %228 = trunc i64 %227 to i32
  %229 = lshr i32 %228, 27
  %230 = and i32 %229, 1
  %231 = or i32 %230, %224
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %250, label %233

233:                                              ; preds = %220
  %234 = tail call ptr @copy_node_stat(ptr noundef %221) #24
  %235 = load i64, ptr %234, align 8
  %236 = or i64 %235, 134217728
  store i64 %236, ptr %234, align 8
  br label %250

237:                                              ; preds = %214
  %238 = icmp eq i32 %16, 0
  %239 = select i1 %238, i1 true, i1 %25
  %240 = select i1 %239, i32 %215, i32 0
  %241 = load i64, ptr %1, align 8
  %242 = load i64, ptr %2, align 8
  %243 = or i64 %242, %241
  %244 = trunc i64 %243 to i32
  %245 = lshr i32 %244, 27
  %246 = and i32 %245, 1
  %247 = or i32 %246, %240
  %248 = trunc i32 %247 to i8
  %249 = tail call ptr @force_fit_type_double(ptr noundef %217, i64 noundef %218, i64 noundef %219, i32 noundef 1, i8 noundef zeroext %248)
  br label %250

250:                                              ; preds = %237, %233, %220, %24, %195, %153
  %251 = phi ptr [ null, %153 ], [ null, %195 ], [ null, %24 ], [ %234, %233 ], [ %221, %220 ], [ %249, %237 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  ret ptr %251
}

declare ptr @copy_node_stat(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @size_int_kind(i64 noundef %0, i32 noundef %1) local_unnamed_addr #10 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds [4 x ptr], ptr @sizetype_tab, i64 0, i64 %3
  %5 = load ptr, ptr %4, align 8, !tbaa !6
  %6 = tail call ptr @build_int_cst(ptr noundef %5, i64 noundef %0) #24
  ret ptr %6
}

declare ptr @build_int_cst(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @size_binop_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %8 = icmp eq ptr %7, %2
  %9 = icmp eq ptr %7, %3
  %10 = or i1 %8, %9
  br i1 %10, label %103, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = load i64, ptr %6, align 8
  %15 = trunc i64 %14 to i16
  switch i16 %15, label %57 [
    i16 8, label %16
    i16 10, label %16
    i16 12, label %16
  ]

16:                                               ; preds = %11, %11, %11
  %17 = load i64, ptr %13, align 8
  %18 = trunc i64 %17 to i16
  switch i16 %18, label %57 [
    i16 8, label %19
    i16 10, label %19
    i16 12, label %19
  ]

19:                                               ; preds = %16, %16, %16
  %20 = add i32 %1, -83
  %21 = icmp ult i32 %20, 4
  br i1 %21, label %58, label %22

22:                                               ; preds = %19
  %23 = xor i64 %17, %14
  %24 = and i64 %23, 2097152
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %57

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %28 = load i32, ptr %27, align 4
  %29 = getelementptr inbounds %struct.tree_type, ptr %13, i64 0, i32 6
  %30 = load i32, ptr %29, align 4
  %31 = xor i32 %30, %28
  %32 = and i32 %31, 1023
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %57

34:                                               ; preds = %26
  %35 = and i64 %14, 65535
  %36 = icmp eq i64 %35, 14
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %39 = load i64, ptr %13, align 8
  br label %43

40:                                               ; preds = %34
  %41 = lshr i32 %28, 16
  %42 = and i32 %41, 255
  br label %43

43:                                               ; preds = %40, %37
  %44 = phi i64 [ %39, %37 ], [ %17, %40 ]
  %45 = phi i32 [ %38, %37 ], [ %42, %40 ]
  %46 = and i64 %44, 65535
  %47 = icmp eq i64 %46, 14
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = tail call i32 @vector_type_mode(ptr noundef nonnull %13) #24
  br label %54

50:                                               ; preds = %43
  %51 = load i32, ptr %29, align 4
  %52 = lshr i32 %51, 16
  %53 = and i32 %52, 255
  br label %54

54:                                               ; preds = %48, %50
  %55 = phi i32 [ %49, %48 ], [ %53, %50 ]
  %56 = icmp eq i32 %45, %55
  br i1 %56, label %58, label %57

57:                                               ; preds = %22, %26, %16, %11, %54
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2171, ptr noundef nonnull @.str.1) #24
  br label %58

58:                                               ; preds = %19, %54, %57
  %59 = load i64, ptr %2, align 8
  %60 = and i64 %59, 65535
  %61 = icmp eq i64 %60, 23
  br i1 %61, label %62, label %97

62:                                               ; preds = %58
  %63 = load i64, ptr %3, align 8
  %64 = and i64 %63, 65535
  %65 = icmp eq i64 %64, 23
  br i1 %65, label %66, label %97

66:                                               ; preds = %62
  switch i32 %1, label %95 [
    i32 63, label %67
    i32 64, label %81
    i32 65, label %88
  ]

67:                                               ; preds = %66
  %68 = tail call i32 @integer_zerop(ptr noundef nonnull %2) #24
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = load i64, ptr %2, align 8
  %72 = and i64 %71, 134217728
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %103, label %74

74:                                               ; preds = %70, %67
  %75 = tail call i32 @integer_zerop(ptr noundef nonnull %3) #24
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %74
  %78 = load i64, ptr %3, align 8
  %79 = and i64 %78, 134217728
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %103, label %95

81:                                               ; preds = %66
  %82 = tail call i32 @integer_zerop(ptr noundef nonnull %3) #24
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %95, label %84

84:                                               ; preds = %81
  %85 = load i64, ptr %3, align 8
  %86 = and i64 %85, 134217728
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %103, label %95

88:                                               ; preds = %66
  %89 = tail call i32 @integer_onep(ptr noundef nonnull %2) #24
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %88
  %92 = load i64, ptr %2, align 8
  %93 = and i64 %92, 134217728
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %103, label %95

95:                                               ; preds = %66, %84, %81, %88, %91, %74, %77
  %96 = tail call ptr @int_const_binop(i32 noundef %1, ptr noundef nonnull %2, ptr noundef nonnull %3, i32 noundef 0)
  br label %103

97:                                               ; preds = %62, %58
  %98 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %6, ptr noundef nonnull %2, ptr noundef nonnull %3)
  %99 = icmp eq ptr %98, null
  br i1 %99, label %100, label %103

100:                                              ; preds = %97
  %101 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef nonnull %6, ptr noundef nonnull %2, ptr noundef nonnull %3) #24
  %102 = getelementptr inbounds %struct.tree_exp, ptr %101, i64 0, i32 1
  store i32 %0, ptr %102, align 8, !tbaa !17
  br label %103

103:                                              ; preds = %100, %97, %4, %91, %84, %77, %70, %95
  %104 = phi ptr [ %96, %95 ], [ %3, %70 ], [ %2, %77 ], [ %2, %84 ], [ %3, %91 ], [ %7, %4 ], [ %98, %97 ], [ %101, %100 ]
  ret ptr %104
}

declare i32 @integer_zerop(ptr noundef) local_unnamed_addr #3

declare i32 @integer_onep(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %7 = icmp eq ptr %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #24
  %10 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 1
  store i32 %0, ptr %10, align 8, !tbaa !17
  br label %11

11:                                               ; preds = %8, %5
  %12 = phi ptr [ %6, %5 ], [ %9, %8 ]
  ret ptr %12
}

declare i32 @vector_type_mode(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @size_diffop_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %5, align 8
  %9 = trunc i64 %8 to i16
  switch i16 %9, label %48 [
    i16 8, label %10
    i16 10, label %10
    i16 12, label %10
  ]

10:                                               ; preds = %3, %3, %3
  %11 = load i64, ptr %7, align 8
  %12 = trunc i64 %11 to i16
  switch i16 %12, label %48 [
    i16 8, label %13
    i16 10, label %13
    i16 12, label %13
  ]

13:                                               ; preds = %10, %10, %10
  %14 = xor i64 %11, %8
  %15 = and i64 %14, 2097152
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %48

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.tree_type, ptr %5, i64 0, i32 6
  %19 = load i32, ptr %18, align 4
  %20 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 6
  %21 = load i32, ptr %20, align 4
  %22 = xor i32 %21, %19
  %23 = and i32 %22, 1023
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %48

25:                                               ; preds = %17
  %26 = and i64 %8, 65535
  %27 = icmp eq i64 %26, 14
  br i1 %27, label %28, label %31

28:                                               ; preds = %25
  %29 = tail call i32 @vector_type_mode(ptr noundef nonnull %5) #24
  %30 = load i64, ptr %7, align 8
  br label %34

31:                                               ; preds = %25
  %32 = lshr i32 %19, 16
  %33 = and i32 %32, 255
  br label %34

34:                                               ; preds = %31, %28
  %35 = phi i64 [ %30, %28 ], [ %11, %31 ]
  %36 = phi i32 [ %29, %28 ], [ %33, %31 ]
  %37 = and i64 %35, 65535
  %38 = icmp eq i64 %37, 14
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = tail call i32 @vector_type_mode(ptr noundef nonnull %7) #24
  br label %45

41:                                               ; preds = %34
  %42 = load i32, ptr %20, align 4
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  br label %45

45:                                               ; preds = %39, %41
  %46 = phi i32 [ %40, %39 ], [ %44, %41 ]
  %47 = icmp eq i32 %36, %46
  br i1 %47, label %49, label %48

48:                                               ; preds = %13, %17, %10, %3, %45
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2213, ptr noundef nonnull @.str.1) #24
  br label %49

49:                                               ; preds = %45, %48
  %50 = load i64, ptr %5, align 8
  %51 = and i64 %50, 2097152
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %96

55:                                               ; preds = %49
  %56 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %57 = icmp eq ptr %5, %56
  br i1 %57, label %58, label %60

58:                                               ; preds = %55
  %59 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 1), align 8, !tbaa !6
  br label %67

60:                                               ; preds = %55
  %61 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %62 = icmp eq ptr %5, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 3), align 8, !tbaa !6
  br label %67

65:                                               ; preds = %60
  %66 = tail call ptr @signed_type_for(ptr noundef nonnull %5) #24
  br label %67

67:                                               ; preds = %63, %65, %58
  %68 = phi ptr [ %59, %58 ], [ %64, %63 ], [ %66, %65 ]
  %69 = load i64, ptr %1, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 23
  br i1 %71, label %72, label %76

72:                                               ; preds = %67
  %73 = load i64, ptr %2, align 8
  %74 = and i64 %73, 65535
  %75 = icmp eq i64 %74, 23
  br i1 %75, label %80, label %76

76:                                               ; preds = %72, %67
  %77 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %68, ptr noundef nonnull %1)
  %78 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %68, ptr noundef nonnull %2)
  %79 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 64, ptr noundef %77, ptr noundef %78)
  br label %96

80:                                               ; preds = %72
  %81 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %1, ptr noundef nonnull %2) #24
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %80
  %84 = tail call ptr @build_int_cst(ptr noundef %68, i64 noundef 0) #24
  br label %96

85:                                               ; preds = %80
  %86 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %2, ptr noundef nonnull %1) #24
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %85
  %89 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %1, ptr noundef nonnull %2)
  %90 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %68, ptr noundef %89)
  br label %96

91:                                               ; preds = %85
  %92 = tail call ptr @build_int_cst(ptr noundef %68, i64 noundef 0) #24
  %93 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef nonnull %1)
  %94 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %68, ptr noundef %93)
  %95 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 64, ptr noundef %92, ptr noundef %94)
  br label %96

96:                                               ; preds = %91, %88, %83, %76, %53
  %97 = phi ptr [ %79, %76 ], [ %84, %83 ], [ %90, %88 ], [ %95, %91 ], [ %54, %53 ]
  ret ptr %97
}

declare ptr @signed_type_for(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %142, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %9 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  br label %10

10:                                               ; preds = %7, %78
  %11 = phi ptr [ %5, %7 ], [ %81, %78 ]
  %12 = phi ptr [ %2, %7 ], [ %79, %78 ]
  %13 = load i64, ptr %12, align 8
  %14 = and i64 %13, 65535
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %10
  %17 = load i64, ptr %1, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = load i64, ptr %11, align 8
  %22 = and i64 %21, 65535
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %20, %16, %10
  %25 = load ptr, ptr @global_trees, align 16, !tbaa !6
  br label %142

26:                                               ; preds = %20
  %27 = load ptr, ptr %8, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_type, ptr %11, i64 0, i32 16
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = icmp eq ptr %27, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %26
  %32 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %33 = icmp eq ptr %32, null
  br i1 %33, label %34, label %142

34:                                               ; preds = %31
  %35 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12) #24
  %36 = getelementptr inbounds %struct.tree_exp, ptr %35, i64 0, i32 1
  store i32 %0, ptr %36, align 8, !tbaa !17
  br label %142

37:                                               ; preds = %26
  %38 = trunc i64 %17 to i16
  switch i16 %38, label %204 [
    i16 10, label %39
    i16 12, label %39
    i16 8, label %54
    i16 6, label %54
    i16 7, label %54
    i16 5, label %54
    i16 9, label %97
    i16 11, label %119
    i16 13, label %139
    i16 14, label %178
    i16 19, label %197
  ]

39:                                               ; preds = %37, %37
  %40 = trunc i64 %21 to i16
  switch i16 %40, label %54 [
    i16 10, label %41
    i16 12, label %41
  ]

41:                                               ; preds = %39, %39
  %42 = load ptr, ptr %9, align 8, !tbaa !17
  %43 = load i64, ptr %42, align 8
  %44 = lshr i64 %43, 56
  %45 = trunc i64 %44 to i32
  %46 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  %48 = load i64, ptr %47, align 8
  %49 = lshr i64 %48, 56
  %50 = trunc i64 %49 to i32
  %51 = icmp eq i32 %45, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %41
  %53 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 114, ptr noundef nonnull %1, ptr noundef nonnull %12)
  br label %142

54:                                               ; preds = %39, %41, %37, %37, %37, %37
  %55 = icmp eq i64 %14, 23
  br i1 %55, label %56, label %61

56:                                               ; preds = %54
  %57 = tail call fastcc ptr @fold_convert_const(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %58 = icmp eq ptr %57, null
  br i1 %58, label %59, label %142

59:                                               ; preds = %56
  %60 = load i64, ptr %11, align 8
  br label %61

61:                                               ; preds = %59, %54
  %62 = phi i64 [ %60, %59 ], [ %21, %54 ]
  %63 = trunc i64 %62 to i16
  switch i16 %63, label %90 [
    i16 6, label %64
    i16 7, label %64
    i16 8, label %64
    i16 10, label %64
    i16 12, label %64
    i16 5, label %64
    i16 13, label %70
    i16 14, label %83
  ]

64:                                               ; preds = %61, %61, %61, %61, %61, %61
  %65 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %66 = icmp eq ptr %65, null
  br i1 %66, label %67, label %142

67:                                               ; preds = %64
  %68 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12) #24
  %69 = getelementptr inbounds %struct.tree_exp, ptr %68, i64 0, i32 1
  store i32 %0, ptr %69, align 8, !tbaa !17
  br label %142

70:                                               ; preds = %61, %128, %108
  %71 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %72 = load ptr, ptr %71, align 8, !tbaa !17
  %73 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef %72, ptr noundef nonnull %12)
  %74 = icmp eq ptr %73, null
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef %72, ptr noundef nonnull %12) #24
  %77 = getelementptr inbounds %struct.tree_exp, ptr %76, i64 0, i32 1
  store i32 %0, ptr %77, align 8, !tbaa !17
  br label %78

78:                                               ; preds = %70, %75
  %79 = phi ptr [ %73, %70 ], [ %76, %75 ]
  %80 = getelementptr inbounds %struct.tree_common, ptr %79, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = icmp eq ptr %81, %1
  br i1 %82, label %142, label %10

83:                                               ; preds = %61
  %84 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  %86 = getelementptr inbounds %struct.tree_type, ptr %11, i64 0, i32 2
  %87 = load ptr, ptr %86, align 8, !tbaa !17
  %88 = tail call i32 @tree_int_cst_equal(ptr noundef %85, ptr noundef %87) #24
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %61, %83
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2678, ptr noundef nonnull @.str.1) #24
  br label %91

91:                                               ; preds = %83, %90
  %92 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %93 = icmp eq ptr %92, null
  br i1 %93, label %94, label %142

94:                                               ; preds = %91
  %95 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12) #24
  %96 = getelementptr inbounds %struct.tree_exp, ptr %95, i64 0, i32 1
  store i32 %0, ptr %96, align 8, !tbaa !17
  br label %142

97:                                               ; preds = %37
  %98 = trunc i64 %13 to i16
  switch i16 %98, label %108 [
    i16 23, label %99
    i16 24, label %102
    i16 25, label %105
  ]

99:                                               ; preds = %97
  %100 = tail call fastcc ptr @fold_convert_const(i32 noundef 78, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %101 = icmp eq ptr %100, null
  br i1 %101, label %108, label %142

102:                                              ; preds = %97
  %103 = tail call fastcc ptr @fold_convert_const(i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %104 = icmp eq ptr %103, null
  br i1 %104, label %108, label %142

105:                                              ; preds = %97
  %106 = tail call fastcc ptr @fold_convert_const(i32 noundef 115, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %142

108:                                              ; preds = %97, %102, %105, %99
  %109 = load i64, ptr %11, align 8
  %110 = trunc i64 %109 to i16
  switch i16 %110, label %117 [
    i16 8, label %111
    i16 7, label %111
    i16 6, label %111
    i16 10, label %111
    i16 12, label %111
    i16 9, label %113
    i16 11, label %115
    i16 13, label %70
  ]

111:                                              ; preds = %108, %108, %108, %108, %108
  %112 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 78, ptr noundef nonnull %1, ptr noundef nonnull %12)
  br label %142

113:                                              ; preds = %108
  %114 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %12)
  br label %142

115:                                              ; preds = %108
  %116 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 115, ptr noundef nonnull %1, ptr noundef nonnull %12)
  br label %142

117:                                              ; preds = %108
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2719, ptr noundef nonnull @.str.1) #24
  %118 = load i64, ptr %12, align 8
  br label %119

119:                                              ; preds = %37, %117
  %120 = phi i64 [ %13, %37 ], [ %118, %117 ]
  %121 = trunc i64 %120 to i32
  %122 = and i32 %121, 65535
  %123 = add nsw i32 %122, -23
  %124 = icmp ult i32 %123, 3
  br i1 %124, label %125, label %128

125:                                              ; preds = %119
  %126 = tail call fastcc ptr @fold_convert_const(i32 noundef 115, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %127 = icmp eq ptr %126, null
  br i1 %127, label %128, label %205

128:                                              ; preds = %119, %125
  %129 = load i64, ptr %11, align 8
  %130 = trunc i64 %129 to i16
  switch i16 %130, label %137 [
    i16 11, label %131
    i16 8, label %131
    i16 6, label %131
    i16 7, label %131
    i16 9, label %131
    i16 13, label %70
  ]

131:                                              ; preds = %128, %128, %128, %128, %128
  %132 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 115, ptr noundef nonnull %1, ptr noundef nonnull %12)
  %133 = icmp eq ptr %132, null
  br i1 %133, label %134, label %142

134:                                              ; preds = %131
  %135 = tail call ptr @build1_stat(i32 noundef 115, ptr noundef nonnull %1, ptr noundef nonnull %12) #24
  %136 = getelementptr inbounds %struct.tree_exp, ptr %135, i64 0, i32 1
  store i32 %0, ptr %136, align 8, !tbaa !17
  br label %142

137:                                              ; preds = %128
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2745, ptr noundef nonnull @.str.1) #24
  %138 = load i64, ptr %11, align 8
  br label %139

139:                                              ; preds = %37, %137
  %140 = phi i64 [ %138, %137 ], [ %21, %37 ]
  %141 = trunc i64 %140 to i16
  switch i16 %141, label %177 [
    i16 8, label %144
    i16 7, label %144
    i16 6, label %144
    i16 10, label %144
    i16 12, label %144
    i16 9, label %144
    i16 11, label %144
    i16 13, label %151
  ]

142:                                              ; preds = %134, %131, %94, %91, %67, %64, %3, %24, %52, %111, %113, %115, %181, %195, %202, %205, %31, %34, %105, %102, %99, %56, %78, %165, %155, %144
  %143 = phi ptr [ %150, %144 ], [ %164, %155 ], [ %176, %165 ], [ %25, %24 ], [ %206, %205 ], [ %203, %202 ], [ %182, %181 ], [ %196, %195 ], [ %116, %115 ], [ %114, %113 ], [ %112, %111 ], [ %53, %52 ], [ %32, %31 ], [ %35, %34 ], [ %2, %3 ], [ %65, %64 ], [ %68, %67 ], [ %92, %91 ], [ %95, %94 ], [ %132, %131 ], [ %135, %134 ], [ %79, %78 ], [ %57, %56 ], [ %100, %99 ], [ %103, %102 ], [ %106, %105 ]
  ret ptr %143

144:                                              ; preds = %139, %139, %139, %139, %139, %139, %139
  %145 = load ptr, ptr %9, align 8, !tbaa !17
  %146 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %145, ptr noundef nonnull %12)
  %147 = load ptr, ptr %9, align 8, !tbaa !17
  %148 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %149 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %147, ptr noundef %148)
  %150 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %1, ptr noundef %146, ptr noundef %149)
  br label %142

151:                                              ; preds = %139
  %152 = load i64, ptr %12, align 8
  %153 = and i64 %152, 65535
  %154 = icmp eq i64 %153, 123
  br i1 %154, label %155, label %165

155:                                              ; preds = %151
  %156 = load ptr, ptr %9, align 8, !tbaa !17
  %157 = getelementptr inbounds %struct.tree_exp, ptr %12, i64 0, i32 3
  %158 = load ptr, ptr %157, align 8, !tbaa !17
  %159 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %156, ptr noundef %158)
  %160 = load ptr, ptr %9, align 8, !tbaa !17
  %161 = getelementptr inbounds %struct.tree_exp, ptr %12, i64 1
  %162 = load ptr, ptr %161, align 8, !tbaa !17
  %163 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %160, ptr noundef %162)
  %164 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %1, ptr noundef %159, ptr noundef %163)
  br label %142

165:                                              ; preds = %151
  %166 = tail call ptr @save_expr(ptr noundef nonnull %12) #24
  %167 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %168 = load ptr, ptr %167, align 8, !tbaa !17
  %169 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %168, ptr noundef %166)
  %170 = load ptr, ptr %167, align 8, !tbaa !17
  %171 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %170, ptr noundef %166)
  %172 = load ptr, ptr %9, align 8, !tbaa !17
  %173 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %172, ptr noundef %169)
  %174 = load ptr, ptr %9, align 8, !tbaa !17
  %175 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %174, ptr noundef %171)
  %176 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %1, ptr noundef %173, ptr noundef %175)
  br label %142

177:                                              ; preds = %139
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2782, ptr noundef nonnull @.str.1) #24
  br label %178

178:                                              ; preds = %37, %177
  %179 = tail call i32 @integer_zerop(ptr noundef nonnull %12) #24
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %183, label %181

181:                                              ; preds = %178
  %182 = tail call fastcc ptr @build_zero_vector(ptr noundef nonnull %1)
  br label %142

183:                                              ; preds = %178
  %184 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %185 = load ptr, ptr %184, align 8, !tbaa !17
  %186 = getelementptr inbounds %struct.tree_type, ptr %11, i64 0, i32 2
  %187 = load ptr, ptr %186, align 8, !tbaa !17
  %188 = tail call i32 @tree_int_cst_equal(ptr noundef %185, ptr noundef %187) #24
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %183
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2788, ptr noundef nonnull @.str.1) #24
  br label %191

191:                                              ; preds = %183, %190
  %192 = load i64, ptr %11, align 8
  %193 = trunc i64 %192 to i16
  switch i16 %193, label %194 [
    i16 6, label %195
    i16 7, label %195
    i16 8, label %195
    i16 10, label %195
    i16 12, label %195
    i16 14, label %195
  ]

194:                                              ; preds = %191
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2790, ptr noundef nonnull @.str.1) #24
  br label %195

195:                                              ; preds = %191, %191, %191, %191, %191, %191, %194
  %196 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 118, ptr noundef nonnull %1, ptr noundef nonnull %12)
  br label %142

197:                                              ; preds = %37
  %198 = tail call ptr @fold_ignored_result(ptr noundef nonnull %12)
  %199 = load i64, ptr %198, align 8
  %200 = and i64 %199, 65535
  %201 = icmp eq i64 %200, 53
  br i1 %201, label %205, label %202

202:                                              ; preds = %197
  %203 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 116, ptr noundef nonnull %1, ptr noundef nonnull %198)
  br label %142

204:                                              ; preds = %37
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2800, ptr noundef nonnull @.str.1) #24
  br label %205

205:                                              ; preds = %125, %197, %204
  %206 = phi ptr [ undef, %204 ], [ %198, %197 ], [ %126, %125 ]
  tail call void @protected_set_expr_location(ptr noundef %206, i32 noundef %0) #24
  br label %142
}

declare i32 @tree_int_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_lt(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @fold_convertible_p(ptr noundef readonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = icmp eq ptr %4, %0
  br i1 %5, label %43, label %6

6:                                                ; preds = %2
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = load i64, ptr %0, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %43, label %14

14:                                               ; preds = %10
  %15 = load i64, ptr %4, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %43, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 16
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 16
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = icmp eq ptr %20, %22
  br i1 %23, label %43, label %24

24:                                               ; preds = %18
  %25 = trunc i64 %11 to i16
  switch i16 %25, label %43 [
    i16 8, label %26
    i16 6, label %26
    i16 7, label %26
    i16 10, label %26
    i16 12, label %26
    i16 5, label %26
    i16 9, label %38
    i16 11, label %38
    i16 13, label %38
    i16 14, label %38
    i16 19, label %38
  ]

26:                                               ; preds = %24, %24, %24, %24, %24, %24
  %27 = trunc i64 %15 to i16
  switch i16 %27, label %36 [
    i16 6, label %43
    i16 7, label %43
    i16 8, label %43
    i16 10, label %43
    i16 12, label %43
    i16 5, label %43
    i16 14, label %28
  ]

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !17
  %33 = tail call i32 @tree_int_cst_equal(ptr noundef %30, ptr noundef %32) #24
  %34 = icmp ne i32 %33, 0
  %35 = zext i1 %34 to i8
  br label %36

36:                                               ; preds = %26, %28
  %37 = phi i8 [ %35, %28 ], [ 0, %26 ]
  br label %43

38:                                               ; preds = %24, %24, %24, %24, %24
  %39 = xor i64 %15, %11
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 0
  %42 = zext i1 %41 to i8
  br label %43

43:                                               ; preds = %24, %26, %26, %26, %26, %26, %26, %18, %6, %10, %14, %2, %38, %36
  %44 = phi i8 [ %42, %38 ], [ %37, %36 ], [ 1, %2 ], [ 0, %14 ], [ 0, %10 ], [ 0, %6 ], [ 1, %18 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 1, %26 ], [ 0, %24 ]
  ret i8 %44
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3) #24
  %9 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 1
  store i32 %0, ptr %9, align 8, !tbaa !17
  br label %10

10:                                               ; preds = %7, %4
  %11 = phi ptr [ %5, %4 ], [ %8, %7 ]
  ret ptr %11
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const(i32 noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #10 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.real_value, align 8
  %7 = alloca %struct.real_value, align 8
  %8 = alloca %struct.real_value, align 8
  %9 = alloca %struct.real_value, align 8
  %10 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = icmp eq ptr %11, %1
  br i1 %12, label %255, label %13

13:                                               ; preds = %3
  %14 = load i64, ptr %1, align 8
  %15 = trunc i64 %14 to i32
  %16 = trunc i64 %14 to i16
  switch i16 %16, label %255 [
    i16 10, label %17
    i16 12, label %17
    i16 6, label %17
    i16 7, label %17
    i16 8, label %17
    i16 5, label %17
    i16 9, label %237
    i16 11, label %246
  ]

17:                                               ; preds = %13, %13, %13, %13, %13, %13
  %18 = load i64, ptr %2, align 8
  %19 = trunc i64 %18 to i32
  %20 = trunc i64 %18 to i16
  switch i16 %20, label %255 [
    i16 23, label %21
    i16 24, label %71
    i16 25, label %118
  ]

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1
  %23 = load i64, ptr %22, align 8, !tbaa !17
  %24 = getelementptr inbounds %struct.tree_int_cst, ptr %2, i64 0, i32 1, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !17
  %26 = load i64, ptr %11, align 8
  %27 = trunc i64 %26 to i32
  %28 = and i32 %27, 65535
  %29 = trunc i64 %26 to i16
  switch i16 %29, label %30 [
    i16 10, label %54
    i16 12, label %54
  ]

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.tree_type, ptr %11, i64 0, i32 6
  %32 = load i32, ptr %31, align 4
  %33 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %34 = load i32, ptr %33, align 4
  %35 = xor i32 %34, %32
  %36 = and i32 %35, 1023
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %54

38:                                               ; preds = %30
  %39 = xor i64 %26, %14
  %40 = and i64 %39, 2097152
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %38
  %43 = icmp ne i32 %28, 8
  %44 = and i32 %32, 1024
  %45 = icmp eq i32 %44, 0
  %46 = or i1 %43, %45
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = and i64 %14, 65535
  %49 = icmp eq i64 %48, 8
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = lshr i32 %34, 10
  %52 = and i32 %51, 1
  %53 = xor i32 %52, 1
  br label %54

54:                                               ; preds = %50, %47, %42, %38, %30, %21, %21
  %55 = phi i32 [ 0, %21 ], [ 0, %21 ], [ 1, %38 ], [ 1, %30 ], [ 1, %47 ], [ %53, %50 ], [ 0, %42 ]
  %56 = icmp slt i64 %25, 0
  br i1 %56, label %57, label %64

57:                                               ; preds = %54
  %58 = lshr i32 %15, 21
  %59 = and i32 %58, 1
  %60 = lshr i32 %27, 21
  %61 = and i32 %60, 1
  %62 = icmp ult i32 %59, %61
  %63 = zext i1 %62 to i32
  br label %64

64:                                               ; preds = %54, %57
  %65 = phi i32 [ 0, %54 ], [ %63, %57 ]
  %66 = lshr i32 %19, 27
  %67 = and i32 %66, 1
  %68 = or i32 %65, %67
  %69 = trunc i32 %68 to i8
  %70 = tail call ptr @force_fit_type_double(ptr noundef nonnull %1, i64 noundef %23, i64 noundef %25, i32 noundef %55, i8 noundef zeroext %69)
  br label %255

71:                                               ; preds = %17
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #24
  %72 = getelementptr inbounds %struct.tree_real_cst, ptr %2, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(32) %73, i64 32, i1 false), !tbaa.struct !29
  %74 = icmp eq i32 %0, 77
  br i1 %74, label %75, label %76

75:                                               ; preds = %71
  call void @real_trunc(ptr noundef nonnull %6, i32 noundef 0, ptr noundef nonnull %7) #24
  br label %77

76:                                               ; preds = %71
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2317, ptr noundef nonnull @.str.1) #24
  br label %77

77:                                               ; preds = %76, %75
  %78 = call zeroext i8 @real_isnan(ptr noundef nonnull %6) #24
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  store i64 0, ptr %4, align 8, !tbaa !24
  store i64 0, ptr %5, align 8, !tbaa !24
  br label %107

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 13
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %8) #24
  call void @real_value_from_int_cst(ptr nonnull sret(%struct.real_value) align 8 %8, ptr noundef null, ptr noundef %83) #24
  %84 = call zeroext i8 @real_compare(i32 noundef 97, ptr noundef nonnull %6, ptr noundef nonnull %8) #24
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %91, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.tree_int_cst, ptr %83, i64 0, i32 1
  %88 = getelementptr inbounds %struct.tree_int_cst, ptr %83, i64 0, i32 1, i32 1
  %89 = load i64, ptr %88, align 8, !tbaa !17
  store i64 %89, ptr %4, align 8, !tbaa !24
  %90 = load i64, ptr %87, align 8, !tbaa !17
  store i64 %90, ptr %5, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %8) #24
  br label %107

91:                                               ; preds = %81
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %8) #24
  %92 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 14
  %93 = load ptr, ptr %92, align 8, !tbaa !17
  %94 = icmp eq ptr %93, null
  br i1 %94, label %104, label %95

95:                                               ; preds = %91
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #24
  call void @real_value_from_int_cst(ptr nonnull sret(%struct.real_value) align 8 %9, ptr noundef null, ptr noundef nonnull %93) #24
  %96 = call zeroext i8 @real_compare(i32 noundef 97, ptr noundef nonnull %9, ptr noundef nonnull %6) #24
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #24
  br label %104

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.tree_int_cst, ptr %93, i64 0, i32 1
  %101 = getelementptr inbounds %struct.tree_int_cst, ptr %93, i64 0, i32 1, i32 1
  %102 = load i64, ptr %101, align 8, !tbaa !17
  store i64 %102, ptr %4, align 8, !tbaa !24
  %103 = load i64, ptr %100, align 8, !tbaa !17
  store i64 %103, ptr %5, align 8, !tbaa !24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #24
  br label %107

104:                                              ; preds = %98, %91
  call void @real_to_integer2(ptr noundef nonnull %5, ptr noundef nonnull %4, ptr noundef nonnull %6) #24
  %105 = load i64, ptr %5, align 8, !tbaa !24
  %106 = load i64, ptr %4, align 8, !tbaa !24
  br label %107

107:                                              ; preds = %80, %86, %99, %104
  %108 = phi i64 [ %106, %104 ], [ %102, %99 ], [ %89, %86 ], [ 0, %80 ]
  %109 = phi i64 [ %105, %104 ], [ %103, %99 ], [ %90, %86 ], [ 0, %80 ]
  %110 = phi i32 [ 0, %104 ], [ 1, %99 ], [ 1, %86 ], [ 1, %80 ]
  %111 = load i64, ptr %2, align 8
  %112 = trunc i64 %111 to i32
  %113 = lshr i32 %112, 27
  %114 = and i32 %113, 1
  %115 = or i32 %114, %110
  %116 = trunc i32 %115 to i8
  %117 = call ptr @force_fit_type_double(ptr noundef nonnull %1, i64 noundef %109, i64 noundef %108, i32 noundef -1, i8 noundef zeroext %116)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  br label %255

118:                                              ; preds = %17
  %119 = getelementptr inbounds %struct.tree_fixed_cst, ptr %2, i64 0, i32 1
  %120 = load ptr, ptr %119, align 8, !tbaa !17
  %121 = load i64, ptr %120, align 8
  %122 = getelementptr inbounds i8, ptr %120, i64 8
  %123 = load i64, ptr %122, align 8
  %124 = getelementptr inbounds %struct.fixed_value, ptr %120, i64 0, i32 1
  %125 = load i32, ptr %124, align 8, !tbaa !30
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [87 x i8], ptr @mode_fbit, i64 0, i64 %126
  %128 = load i8, ptr %127, align 1, !tbaa !17
  %129 = icmp sgt i8 %128, -1
  br i1 %129, label %133, label %130

130:                                              ; preds = %118
  %131 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %126
  %132 = load i8, ptr %131, align 1, !tbaa !17
  br label %192

133:                                              ; preds = %118
  %134 = zext i8 %128 to i64
  %135 = sub nsw i64 0, %134
  %136 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %126
  %137 = load i8, ptr %136, align 1, !tbaa !17
  switch i8 %137, label %138 [
    i8 4, label %141
    i8 13, label %141
    i8 6, label %141
  ]

138:                                              ; preds = %133
  %139 = icmp eq i8 %137, 15
  %140 = zext i1 %139 to i32
  br label %141

141:                                              ; preds = %138, %133, %133, %133
  %142 = phi i32 [ 1, %133 ], [ %140, %138 ], [ 1, %133 ], [ 1, %133 ]
  %143 = icmp eq i8 %128, 0
  br i1 %143, label %163, label %144

144:                                              ; preds = %141
  %145 = icmp eq i32 %142, 0
  %146 = ashr i64 %123, 63
  %147 = select i1 %145, i64 0, i64 %146
  %148 = icmp ugt i8 %128, 63
  br i1 %148, label %149, label %166

149:                                              ; preds = %144
  %150 = add nsw i64 %134, -64
  %151 = lshr i64 %123, %150
  %152 = icmp eq i8 %128, 64
  br i1 %152, label %153, label %156

153:                                              ; preds = %149
  %154 = sub nuw nsw i64 64, %134
  %155 = shl nuw nsw i64 %147, %154
  br label %179

156:                                              ; preds = %149
  %157 = sub nuw nsw i64 128, %134
  %158 = shl nsw i64 -1, %157
  %159 = xor i64 %158, -1
  %160 = and i64 %151, %159
  %161 = shl nsw i64 %147, %157
  %162 = or i64 %161, %160
  br label %179

163:                                              ; preds = %141
  %164 = shl nuw nsw i64 %123, %135
  %165 = shl nuw nsw i64 %121, %135
  br label %183

166:                                              ; preds = %144
  %167 = lshr i64 %123, %134
  %168 = lshr i64 %121, %134
  %169 = sub nsw i64 63, %134
  %170 = shl i64 %123, %169
  %171 = shl i64 %170, 1
  %172 = or i64 %171, %168
  %173 = sub nsw i64 64, %134
  %174 = shl nsw i64 -1, %173
  %175 = xor i64 %174, -1
  %176 = and i64 %167, %175
  %177 = shl nsw i64 %147, %173
  %178 = or i64 %177, %176
  br label %183

179:                                              ; preds = %153, %156
  %180 = phi i64 [ %162, %156 ], [ %151, %153 ]
  %181 = phi i64 [ %147, %156 ], [ %155, %153 ]
  %182 = shl i64 %180, %150
  br label %192

183:                                              ; preds = %166, %163
  %184 = phi i64 [ %169, %166 ], [ 63, %163 ]
  %185 = phi i64 [ %172, %166 ], [ %165, %163 ]
  %186 = phi i64 [ %178, %166 ], [ %164, %163 ]
  %187 = shl i64 %186, %134
  %188 = lshr i64 %185, %184
  %189 = lshr i64 %188, 1
  %190 = or i64 %189, %187
  %191 = shl i64 %185, %134
  br label %192

192:                                              ; preds = %183, %179, %130
  %193 = phi i8 [ %132, %130 ], [ %137, %179 ], [ %137, %183 ]
  %194 = phi i64 [ 0, %130 ], [ %181, %179 ], [ %186, %183 ]
  %195 = phi i64 [ 0, %130 ], [ %180, %179 ], [ %185, %183 ]
  %196 = phi i64 [ 0, %130 ], [ %182, %179 ], [ %190, %183 ]
  %197 = phi i64 [ 0, %130 ], [ 0, %179 ], [ %191, %183 ]
  switch i8 %193, label %198 [
    i8 4, label %202
    i8 13, label %202
    i8 6, label %202
  ]

198:                                              ; preds = %192
  %199 = icmp eq i8 %193, 15
  %200 = icmp slt i64 %196, 0
  %201 = select i1 %199, i1 %200, i1 false
  br i1 %201, label %204, label %212

202:                                              ; preds = %192, %192, %192
  %203 = icmp slt i64 %196, 0
  br i1 %203, label %204, label %212

204:                                              ; preds = %202, %198
  %205 = icmp ne i64 %121, %197
  %206 = icmp ne i64 %123, %196
  %207 = select i1 %205, i1 true, i1 %206
  br i1 %207, label %208, label %212

208:                                              ; preds = %204
  %209 = tail call { i64, i64 } @double_int_add(i64 %195, i64 %194, i64 1, i64 0) #24
  %210 = extractvalue { i64, i64 } %209, 0
  %211 = extractvalue { i64, i64 } %209, 1
  br label %212

212:                                              ; preds = %208, %204, %202, %198
  %213 = phi i64 [ %211, %208 ], [ %194, %204 ], [ %194, %198 ], [ %194, %202 ]
  %214 = phi i64 [ %210, %208 ], [ %195, %204 ], [ %195, %198 ], [ %195, %202 ]
  %215 = icmp slt i64 %213, 0
  br i1 %215, label %216, label %228

216:                                              ; preds = %212
  %217 = load i64, ptr %1, align 8
  %218 = trunc i64 %217 to i32
  %219 = lshr i32 %218, 21
  %220 = and i32 %219, 1
  %221 = load ptr, ptr %10, align 8, !tbaa !17
  %222 = load i64, ptr %221, align 8
  %223 = trunc i64 %222 to i32
  %224 = lshr i32 %223, 21
  %225 = and i32 %224, 1
  %226 = icmp ult i32 %220, %225
  %227 = zext i1 %226 to i32
  br label %228

228:                                              ; preds = %212, %216
  %229 = phi i32 [ 0, %212 ], [ %227, %216 ]
  %230 = load i64, ptr %2, align 8
  %231 = trunc i64 %230 to i32
  %232 = lshr i32 %231, 27
  %233 = and i32 %232, 1
  %234 = or i32 %233, %229
  %235 = trunc i32 %234 to i8
  %236 = tail call ptr @force_fit_type_double(ptr noundef nonnull %1, i64 noundef %214, i64 noundef %213, i32 noundef -1, i8 noundef zeroext %235)
  br label %255

237:                                              ; preds = %13
  %238 = load i64, ptr %2, align 8
  %239 = trunc i64 %238 to i16
  switch i16 %239, label %255 [
    i16 23, label %240
    i16 24, label %242
    i16 25, label %244
  ]

240:                                              ; preds = %237
  %241 = tail call ptr @build_real_from_int_cst(ptr noundef nonnull %1, ptr noundef nonnull %2) #24
  br label %255

242:                                              ; preds = %237
  %243 = tail call fastcc ptr @fold_convert_const_real_from_real(ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %255

244:                                              ; preds = %237
  %245 = tail call fastcc ptr @fold_convert_const_real_from_fixed(ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %255

246:                                              ; preds = %13
  %247 = load i64, ptr %2, align 8
  %248 = trunc i64 %247 to i16
  switch i16 %248, label %255 [
    i16 25, label %249
    i16 23, label %251
    i16 24, label %253
  ]

249:                                              ; preds = %246
  %250 = tail call fastcc ptr @fold_convert_const_fixed_from_fixed(ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %255

251:                                              ; preds = %246
  %252 = tail call fastcc ptr @fold_convert_const_fixed_from_int(ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %255

253:                                              ; preds = %246
  %254 = tail call fastcc ptr @fold_convert_const_fixed_from_real(ptr noundef nonnull %1, ptr noundef nonnull %2)
  br label %255

255:                                              ; preds = %17, %237, %13, %246, %3, %253, %251, %249, %244, %242, %240, %228, %107, %64
  %256 = phi ptr [ %70, %64 ], [ %117, %107 ], [ %236, %228 ], [ %241, %240 ], [ %243, %242 ], [ %245, %244 ], [ %250, %249 ], [ %252, %251 ], [ %254, %253 ], [ %2, %3 ], [ null, %246 ], [ null, %13 ], [ null, %237 ], [ null, %17 ]
  ret ptr %256
}

declare ptr @save_expr(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @build_zero_vector(ptr noundef %0) unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %5 = tail call fastcc ptr @fold_convert_const(i32 noundef 116, ptr noundef %3, ptr noundef %4)
  %6 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %7 = load i32, ptr %6, align 4
  %8 = and i32 %7, 1023
  %9 = zext i32 %8 to i64
  %10 = shl nuw i64 1, %9
  %11 = trunc i64 %10 to i32
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %1, %13
  %14 = phi ptr [ %16, %13 ], [ null, %1 ]
  %15 = phi i32 [ %17, %13 ], [ 0, %1 ]
  %16 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %5, ptr noundef %14) #24
  %17 = add nuw nsw i32 %15, 1
  %18 = icmp eq i32 %17, %11
  br i1 %18, label %19, label %13, !llvm.loop !33

19:                                               ; preds = %13, %1
  %20 = phi ptr [ null, %1 ], [ %16, %13 ]
  %21 = tail call ptr @build_vector(ptr noundef %0, ptr noundef %20) #24
  ret ptr %21
}

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define dso_local ptr @fold_ignored_result(ptr noundef readonly %0) local_unnamed_addr #16 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65536
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  br label %51

7:                                                ; preds = %1, %48
  %8 = phi i64 [ %50, %48 ], [ %2, %1 ]
  %9 = phi ptr [ %49, %48 ], [ %0, %1 ]
  %10 = and i64 %8, 65535
  %11 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !17
  switch i32 %12, label %51 [
    i32 6, label %45
    i32 7, label %13
    i32 5, label %13
    i32 10, label %25
  ]

13:                                               ; preds = %7, %7
  %14 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %15 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 65536
  %19 = icmp eq i64 %18, 0
  %20 = load ptr, ptr %14, align 8, !tbaa !17
  br i1 %19, label %48, label %21

21:                                               ; preds = %13
  %22 = load i64, ptr %20, align 8
  %23 = and i64 %22, 65536
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %48, label %51

25:                                               ; preds = %7
  %26 = trunc i64 %8 to i16
  switch i16 %26, label %51 [
    i16 52, label %27
    i16 56, label %33
  ]

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = load i64, ptr %29, align 8
  %31 = and i64 %30, 65536
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %45, label %51

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = load i64, ptr %35, align 8
  %37 = and i64 %36, 65536
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1, i32 0, i32 1
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = load i64, ptr %41, align 8
  %43 = and i64 %42, 65536
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %27, %7, %39
  %46 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  br label %48

48:                                               ; preds = %45, %13, %21
  %49 = phi ptr [ %16, %21 ], [ %20, %13 ], [ %47, %45 ]
  %50 = load i64, ptr %49, align 8
  br label %7

51:                                               ; preds = %7, %25, %33, %39, %27, %21, %5
  %52 = phi ptr [ %6, %5 ], [ %9, %21 ], [ %9, %27 ], [ %9, %39 ], [ %9, %33 ], [ %9, %25 ], [ %9, %7 ]
  ret ptr %52
}

declare void @protected_set_expr_location(ptr noundef, i32 noundef) local_unnamed_addr #3

declare ptr @build_real_from_int_cst(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const_real_from_real(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  br label %14

14:                                               ; preds = %9, %7
  %15 = phi i32 [ %8, %7 ], [ %13, %9 ]
  %16 = getelementptr inbounds %struct.tree_real_cst, ptr %1, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  call void @real_convert(ptr noundef nonnull %3, i32 noundef %15, ptr noundef %17) #24
  %18 = call ptr @build_real(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.real_value) align 8 %3) #24
  %19 = load ptr, ptr %16, align 8, !tbaa !17
  %20 = call zeroext i8 @real_isinf(ptr noundef %19) #24
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %302, label %22

22:                                               ; preds = %14
  %23 = load i64, ptr %0, align 8
  %24 = and i64 %23, 65535
  %25 = icmp eq i64 %24, 14
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %28 = load i64, ptr %0, align 8
  br label %34

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %31 = load i32, ptr %30, align 4
  %32 = lshr i32 %31, 16
  %33 = and i32 %32, 255
  br label %34

34:                                               ; preds = %29, %26
  %35 = phi i64 [ %28, %26 ], [ %23, %29 ]
  %36 = phi i32 [ %27, %26 ], [ %33, %29 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %37
  %39 = load i8, ptr %38, align 1, !tbaa !17
  %40 = icmp eq i8 %39, 8
  br i1 %40, label %95, label %41

41:                                               ; preds = %34
  %42 = and i64 %35, 65535
  %43 = icmp eq i64 %42, 14
  br i1 %43, label %44, label %47

44:                                               ; preds = %41
  %45 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %46 = load i64, ptr %0, align 8
  br label %52

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %49 = load i32, ptr %48, align 4
  %50 = lshr i32 %49, 16
  %51 = and i32 %50, 255
  br label %52

52:                                               ; preds = %47, %44
  %53 = phi i64 [ %46, %44 ], [ %35, %47 ]
  %54 = phi i32 [ %45, %44 ], [ %51, %47 ]
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %55
  %57 = load i8, ptr %56, align 1, !tbaa !17
  %58 = icmp eq i8 %57, 9
  br i1 %58, label %95, label %59

59:                                               ; preds = %52
  %60 = and i64 %53, 65535
  %61 = icmp eq i64 %60, 14
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %64 = load i64, ptr %0, align 8
  br label %70

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %67 = load i32, ptr %66, align 4
  %68 = lshr i32 %67, 16
  %69 = and i32 %68, 255
  br label %70

70:                                               ; preds = %65, %62
  %71 = phi i64 [ %64, %62 ], [ %53, %65 ]
  %72 = phi i32 [ %63, %62 ], [ %69, %65 ]
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %73
  %75 = load i8, ptr %74, align 1, !tbaa !17
  %76 = icmp eq i8 %75, 11
  br i1 %76, label %95, label %77

77:                                               ; preds = %70
  %78 = and i64 %71, 65535
  %79 = icmp eq i64 %78, 14
  br i1 %79, label %80, label %82

80:                                               ; preds = %77
  %81 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %87

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %84 = load i32, ptr %83, align 4
  %85 = lshr i32 %84, 16
  %86 = and i32 %85, 255
  br label %87

87:                                               ; preds = %82, %80
  %88 = phi i32 [ %81, %80 ], [ %86, %82 ]
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %89
  %91 = load i8, ptr %90, align 1, !tbaa !17
  %92 = icmp eq i8 %91, 17
  br i1 %92, label %93, label %299

93:                                               ; preds = %87
  %94 = load i64, ptr %0, align 8
  br label %95

95:                                               ; preds = %93, %70, %52, %34
  %96 = phi i64 [ %94, %93 ], [ %71, %70 ], [ %53, %52 ], [ %35, %34 ]
  %97 = and i64 %96, 65535
  %98 = icmp eq i64 %97, 14
  br i1 %98, label %99, label %102

99:                                               ; preds = %95
  %100 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %101 = load i64, ptr %0, align 8
  br label %107

102:                                              ; preds = %95
  %103 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %104 = load i32, ptr %103, align 4
  %105 = lshr i32 %104, 16
  %106 = and i32 %105, 255
  br label %107

107:                                              ; preds = %102, %99
  %108 = phi i64 [ %101, %99 ], [ %96, %102 ]
  %109 = phi i32 [ %100, %99 ], [ %106, %102 ]
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %110
  %112 = load i8, ptr %111, align 1, !tbaa !17
  %113 = icmp eq i8 %112, 8
  br i1 %113, label %132, label %114

114:                                              ; preds = %107
  %115 = and i64 %108, 65535
  %116 = icmp eq i64 %115, 14
  br i1 %116, label %117, label %120

117:                                              ; preds = %114
  %118 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %119 = load i64, ptr %0, align 8
  br label %125

120:                                              ; preds = %114
  %121 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %122 = load i32, ptr %121, align 4
  %123 = lshr i32 %122, 16
  %124 = and i32 %123, 255
  br label %125

125:                                              ; preds = %120, %117
  %126 = phi i64 [ %119, %117 ], [ %108, %120 ]
  %127 = phi i32 [ %118, %117 ], [ %124, %120 ]
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %128
  %130 = load i8, ptr %129, align 1, !tbaa !17
  %131 = icmp eq i8 %130, 9
  br i1 %131, label %132, label %143

132:                                              ; preds = %125, %107
  %133 = phi i64 [ %126, %125 ], [ %108, %107 ]
  %134 = and i64 %133, 65535
  %135 = icmp eq i64 %134, 14
  br i1 %135, label %136, label %138

136:                                              ; preds = %132
  %137 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %159

138:                                              ; preds = %132
  %139 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %140 = load i32, ptr %139, align 4
  %141 = lshr i32 %140, 16
  %142 = and i32 %141, 255
  br label %159

143:                                              ; preds = %125
  %144 = and i64 %126, 65535
  %145 = icmp eq i64 %144, 14
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  %147 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %153

148:                                              ; preds = %143
  %149 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %150 = load i32, ptr %149, align 4
  %151 = lshr i32 %150, 16
  %152 = and i32 %151, 255
  br label %153

153:                                              ; preds = %148, %146
  %154 = phi i32 [ %147, %146 ], [ %152, %148 ]
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %155
  %157 = load i8, ptr %156, align 1, !tbaa !17
  %158 = zext i8 %157 to i32
  br label %159

159:                                              ; preds = %136, %138, %153
  %160 = phi i32 [ %158, %153 ], [ %137, %136 ], [ %142, %138 ]
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %161
  %163 = load i8, ptr %162, align 1, !tbaa !17
  %164 = icmp eq i8 %163, 9
  %165 = load i64, ptr %0, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 14
  br i1 %164, label %168, label %229

168:                                              ; preds = %159
  br i1 %167, label %169, label %172

169:                                              ; preds = %168
  %170 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %171 = load i64, ptr %0, align 8
  br label %177

172:                                              ; preds = %168
  %173 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %174 = load i32, ptr %173, align 4
  %175 = lshr i32 %174, 16
  %176 = and i32 %175, 255
  br label %177

177:                                              ; preds = %172, %169
  %178 = phi i64 [ %171, %169 ], [ %165, %172 ]
  %179 = phi i32 [ %170, %169 ], [ %176, %172 ]
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %180
  %182 = load i8, ptr %181, align 1, !tbaa !17
  %183 = icmp eq i8 %182, 8
  br i1 %183, label %202, label %184

184:                                              ; preds = %177
  %185 = and i64 %178, 65535
  %186 = icmp eq i64 %185, 14
  br i1 %186, label %187, label %190

187:                                              ; preds = %184
  %188 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %189 = load i64, ptr %0, align 8
  br label %195

190:                                              ; preds = %184
  %191 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %192 = load i32, ptr %191, align 4
  %193 = lshr i32 %192, 16
  %194 = and i32 %193, 255
  br label %195

195:                                              ; preds = %190, %187
  %196 = phi i64 [ %189, %187 ], [ %178, %190 ]
  %197 = phi i32 [ %188, %187 ], [ %194, %190 ]
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %198
  %200 = load i8, ptr %199, align 1, !tbaa !17
  %201 = icmp eq i8 %200, 9
  br i1 %201, label %202, label %213

202:                                              ; preds = %195, %177
  %203 = phi i64 [ %196, %195 ], [ %178, %177 ]
  %204 = and i64 %203, 65535
  %205 = icmp eq i64 %204, 14
  br i1 %205, label %206, label %208

206:                                              ; preds = %202
  %207 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %290

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %210 = load i32, ptr %209, align 4
  %211 = lshr i32 %210, 16
  %212 = and i32 %211, 255
  br label %290

213:                                              ; preds = %195
  %214 = and i64 %196, 65535
  %215 = icmp eq i64 %214, 14
  br i1 %215, label %216, label %218

216:                                              ; preds = %213
  %217 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %223

218:                                              ; preds = %213
  %219 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %220 = load i32, ptr %219, align 4
  %221 = lshr i32 %220, 16
  %222 = and i32 %221, 255
  br label %223

223:                                              ; preds = %218, %216
  %224 = phi i32 [ %217, %216 ], [ %222, %218 ]
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %225
  %227 = load i8, ptr %226, align 1, !tbaa !17
  %228 = zext i8 %227 to i32
  br label %290

229:                                              ; preds = %159
  br i1 %167, label %230, label %233

230:                                              ; preds = %229
  %231 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %232 = load i64, ptr %0, align 8
  br label %238

233:                                              ; preds = %229
  %234 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %235 = load i32, ptr %234, align 4
  %236 = lshr i32 %235, 16
  %237 = and i32 %236, 255
  br label %238

238:                                              ; preds = %233, %230
  %239 = phi i64 [ %232, %230 ], [ %165, %233 ]
  %240 = phi i32 [ %231, %230 ], [ %237, %233 ]
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %241
  %243 = load i8, ptr %242, align 1, !tbaa !17
  %244 = icmp eq i8 %243, 8
  br i1 %244, label %263, label %245

245:                                              ; preds = %238
  %246 = and i64 %239, 65535
  %247 = icmp eq i64 %246, 14
  br i1 %247, label %248, label %251

248:                                              ; preds = %245
  %249 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %250 = load i64, ptr %0, align 8
  br label %256

251:                                              ; preds = %245
  %252 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %253 = load i32, ptr %252, align 4
  %254 = lshr i32 %253, 16
  %255 = and i32 %254, 255
  br label %256

256:                                              ; preds = %251, %248
  %257 = phi i64 [ %250, %248 ], [ %239, %251 ]
  %258 = phi i32 [ %249, %248 ], [ %255, %251 ]
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %259
  %261 = load i8, ptr %260, align 1, !tbaa !17
  %262 = icmp eq i8 %261, 9
  br i1 %262, label %263, label %274

263:                                              ; preds = %256, %238
  %264 = phi i64 [ %257, %256 ], [ %239, %238 ]
  %265 = and i64 %264, 65535
  %266 = icmp eq i64 %265, 14
  br i1 %266, label %267, label %269

267:                                              ; preds = %263
  %268 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %290

269:                                              ; preds = %263
  %270 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %271 = load i32, ptr %270, align 4
  %272 = lshr i32 %271, 16
  %273 = and i32 %272, 255
  br label %290

274:                                              ; preds = %256
  %275 = and i64 %257, 65535
  %276 = icmp eq i64 %275, 14
  br i1 %276, label %277, label %279

277:                                              ; preds = %274
  %278 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %284

279:                                              ; preds = %274
  %280 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %281 = load i32, ptr %280, align 4
  %282 = lshr i32 %281, 16
  %283 = and i32 %282, 255
  br label %284

284:                                              ; preds = %279, %277
  %285 = phi i32 [ %278, %277 ], [ %283, %279 ]
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %286
  %288 = load i8, ptr %287, align 1, !tbaa !17
  %289 = zext i8 %288 to i32
  br label %290

290:                                              ; preds = %284, %269, %267, %223, %208, %206
  %291 = phi i32 [ %228, %223 ], [ %207, %206 ], [ %212, %208 ], [ %289, %284 ], [ %268, %267 ], [ %273, %269 ]
  %292 = add i32 %291, -38
  %293 = zext i32 %292 to i64
  %294 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %293
  %295 = load ptr, ptr %294, align 8, !tbaa !6
  %296 = getelementptr inbounds %struct.real_format, ptr %295, i64 0, i32 12
  %297 = load i8, ptr %296, align 1, !tbaa !34
  %298 = icmp eq i8 %297, 0
  br i1 %298, label %299, label %302

299:                                              ; preds = %290, %87
  %300 = load i64, ptr %18, align 8
  %301 = or i64 %300, 134217728
  br label %881

302:                                              ; preds = %290, %14
  %303 = load ptr, ptr %16, align 8, !tbaa !17
  %304 = call zeroext i8 @real_isnan(ptr noundef %303) #24
  %305 = icmp eq i8 %304, 0
  %306 = load i64, ptr %0, align 8
  br i1 %305, label %588, label %307

307:                                              ; preds = %302
  %308 = and i64 %306, 65535
  %309 = icmp eq i64 %308, 14
  br i1 %309, label %310, label %313

310:                                              ; preds = %307
  %311 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %312 = load i64, ptr %0, align 8
  br label %318

313:                                              ; preds = %307
  %314 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %315 = load i32, ptr %314, align 4
  %316 = lshr i32 %315, 16
  %317 = and i32 %316, 255
  br label %318

318:                                              ; preds = %313, %310
  %319 = phi i64 [ %312, %310 ], [ %306, %313 ]
  %320 = phi i32 [ %311, %310 ], [ %317, %313 ]
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %321
  %323 = load i8, ptr %322, align 1, !tbaa !17
  %324 = icmp eq i8 %323, 8
  br i1 %324, label %379, label %325

325:                                              ; preds = %318
  %326 = and i64 %319, 65535
  %327 = icmp eq i64 %326, 14
  br i1 %327, label %328, label %331

328:                                              ; preds = %325
  %329 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %330 = load i64, ptr %0, align 8
  br label %336

331:                                              ; preds = %325
  %332 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %333 = load i32, ptr %332, align 4
  %334 = lshr i32 %333, 16
  %335 = and i32 %334, 255
  br label %336

336:                                              ; preds = %331, %328
  %337 = phi i64 [ %330, %328 ], [ %319, %331 ]
  %338 = phi i32 [ %329, %328 ], [ %335, %331 ]
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %339
  %341 = load i8, ptr %340, align 1, !tbaa !17
  %342 = icmp eq i8 %341, 9
  br i1 %342, label %379, label %343

343:                                              ; preds = %336
  %344 = and i64 %337, 65535
  %345 = icmp eq i64 %344, 14
  br i1 %345, label %346, label %349

346:                                              ; preds = %343
  %347 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %348 = load i64, ptr %0, align 8
  br label %354

349:                                              ; preds = %343
  %350 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %351 = load i32, ptr %350, align 4
  %352 = lshr i32 %351, 16
  %353 = and i32 %352, 255
  br label %354

354:                                              ; preds = %349, %346
  %355 = phi i64 [ %348, %346 ], [ %337, %349 ]
  %356 = phi i32 [ %347, %346 ], [ %353, %349 ]
  %357 = zext i32 %356 to i64
  %358 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %357
  %359 = load i8, ptr %358, align 1, !tbaa !17
  %360 = icmp eq i8 %359, 11
  br i1 %360, label %379, label %361

361:                                              ; preds = %354
  %362 = and i64 %355, 65535
  %363 = icmp eq i64 %362, 14
  br i1 %363, label %364, label %366

364:                                              ; preds = %361
  %365 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %371

366:                                              ; preds = %361
  %367 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %368 = load i32, ptr %367, align 4
  %369 = lshr i32 %368, 16
  %370 = and i32 %369, 255
  br label %371

371:                                              ; preds = %366, %364
  %372 = phi i32 [ %365, %364 ], [ %370, %366 ]
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %373
  %375 = load i8, ptr %374, align 1, !tbaa !17
  %376 = icmp eq i8 %375, 17
  br i1 %376, label %377, label %585

377:                                              ; preds = %371
  %378 = load i64, ptr %0, align 8
  br label %379

379:                                              ; preds = %377, %354, %336, %318
  %380 = phi i64 [ %378, %377 ], [ %355, %354 ], [ %337, %336 ], [ %319, %318 ]
  %381 = and i64 %380, 65535
  %382 = icmp eq i64 %381, 14
  br i1 %382, label %383, label %386

383:                                              ; preds = %379
  %384 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %385 = load i64, ptr %0, align 8
  br label %391

386:                                              ; preds = %379
  %387 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %388 = load i32, ptr %387, align 4
  %389 = lshr i32 %388, 16
  %390 = and i32 %389, 255
  br label %391

391:                                              ; preds = %386, %383
  %392 = phi i64 [ %385, %383 ], [ %380, %386 ]
  %393 = phi i32 [ %384, %383 ], [ %390, %386 ]
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %394
  %396 = load i8, ptr %395, align 1, !tbaa !17
  %397 = icmp eq i8 %396, 8
  br i1 %397, label %416, label %398

398:                                              ; preds = %391
  %399 = and i64 %392, 65535
  %400 = icmp eq i64 %399, 14
  br i1 %400, label %401, label %404

401:                                              ; preds = %398
  %402 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %403 = load i64, ptr %0, align 8
  br label %409

404:                                              ; preds = %398
  %405 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %406 = load i32, ptr %405, align 4
  %407 = lshr i32 %406, 16
  %408 = and i32 %407, 255
  br label %409

409:                                              ; preds = %404, %401
  %410 = phi i64 [ %403, %401 ], [ %392, %404 ]
  %411 = phi i32 [ %402, %401 ], [ %408, %404 ]
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %412
  %414 = load i8, ptr %413, align 1, !tbaa !17
  %415 = icmp eq i8 %414, 9
  br i1 %415, label %416, label %427

416:                                              ; preds = %409, %391
  %417 = phi i64 [ %410, %409 ], [ %392, %391 ]
  %418 = and i64 %417, 65535
  %419 = icmp eq i64 %418, 14
  br i1 %419, label %420, label %422

420:                                              ; preds = %416
  %421 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %443

422:                                              ; preds = %416
  %423 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %424 = load i32, ptr %423, align 4
  %425 = lshr i32 %424, 16
  %426 = and i32 %425, 255
  br label %443

427:                                              ; preds = %409
  %428 = and i64 %410, 65535
  %429 = icmp eq i64 %428, 14
  br i1 %429, label %430, label %432

430:                                              ; preds = %427
  %431 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %437

432:                                              ; preds = %427
  %433 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %434 = load i32, ptr %433, align 4
  %435 = lshr i32 %434, 16
  %436 = and i32 %435, 255
  br label %437

437:                                              ; preds = %432, %430
  %438 = phi i32 [ %431, %430 ], [ %436, %432 ]
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %439
  %441 = load i8, ptr %440, align 1, !tbaa !17
  %442 = zext i8 %441 to i32
  br label %443

443:                                              ; preds = %420, %422, %437
  %444 = phi i32 [ %442, %437 ], [ %421, %420 ], [ %426, %422 ]
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %445
  %447 = load i8, ptr %446, align 1, !tbaa !17
  %448 = icmp eq i8 %447, 9
  %449 = load i64, ptr %0, align 8
  %450 = and i64 %449, 65535
  %451 = icmp eq i64 %450, 14
  br i1 %448, label %452, label %513

452:                                              ; preds = %443
  br i1 %451, label %453, label %456

453:                                              ; preds = %452
  %454 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %455 = load i64, ptr %0, align 8
  br label %461

456:                                              ; preds = %452
  %457 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %458 = load i32, ptr %457, align 4
  %459 = lshr i32 %458, 16
  %460 = and i32 %459, 255
  br label %461

461:                                              ; preds = %456, %453
  %462 = phi i64 [ %455, %453 ], [ %449, %456 ]
  %463 = phi i32 [ %454, %453 ], [ %460, %456 ]
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %464
  %466 = load i8, ptr %465, align 1, !tbaa !17
  %467 = icmp eq i8 %466, 8
  br i1 %467, label %486, label %468

468:                                              ; preds = %461
  %469 = and i64 %462, 65535
  %470 = icmp eq i64 %469, 14
  br i1 %470, label %471, label %474

471:                                              ; preds = %468
  %472 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %473 = load i64, ptr %0, align 8
  br label %479

474:                                              ; preds = %468
  %475 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %476 = load i32, ptr %475, align 4
  %477 = lshr i32 %476, 16
  %478 = and i32 %477, 255
  br label %479

479:                                              ; preds = %474, %471
  %480 = phi i64 [ %473, %471 ], [ %462, %474 ]
  %481 = phi i32 [ %472, %471 ], [ %478, %474 ]
  %482 = zext i32 %481 to i64
  %483 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %482
  %484 = load i8, ptr %483, align 1, !tbaa !17
  %485 = icmp eq i8 %484, 9
  br i1 %485, label %486, label %497

486:                                              ; preds = %479, %461
  %487 = phi i64 [ %480, %479 ], [ %462, %461 ]
  %488 = and i64 %487, 65535
  %489 = icmp eq i64 %488, 14
  br i1 %489, label %490, label %492

490:                                              ; preds = %486
  %491 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %574

492:                                              ; preds = %486
  %493 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %494 = load i32, ptr %493, align 4
  %495 = lshr i32 %494, 16
  %496 = and i32 %495, 255
  br label %574

497:                                              ; preds = %479
  %498 = and i64 %480, 65535
  %499 = icmp eq i64 %498, 14
  br i1 %499, label %500, label %502

500:                                              ; preds = %497
  %501 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %507

502:                                              ; preds = %497
  %503 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %504 = load i32, ptr %503, align 4
  %505 = lshr i32 %504, 16
  %506 = and i32 %505, 255
  br label %507

507:                                              ; preds = %502, %500
  %508 = phi i32 [ %501, %500 ], [ %506, %502 ]
  %509 = zext i32 %508 to i64
  %510 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %509
  %511 = load i8, ptr %510, align 1, !tbaa !17
  %512 = zext i8 %511 to i32
  br label %574

513:                                              ; preds = %443
  br i1 %451, label %514, label %517

514:                                              ; preds = %513
  %515 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %516 = load i64, ptr %0, align 8
  br label %522

517:                                              ; preds = %513
  %518 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %519 = load i32, ptr %518, align 4
  %520 = lshr i32 %519, 16
  %521 = and i32 %520, 255
  br label %522

522:                                              ; preds = %517, %514
  %523 = phi i64 [ %516, %514 ], [ %449, %517 ]
  %524 = phi i32 [ %515, %514 ], [ %521, %517 ]
  %525 = zext i32 %524 to i64
  %526 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %525
  %527 = load i8, ptr %526, align 1, !tbaa !17
  %528 = icmp eq i8 %527, 8
  br i1 %528, label %547, label %529

529:                                              ; preds = %522
  %530 = and i64 %523, 65535
  %531 = icmp eq i64 %530, 14
  br i1 %531, label %532, label %535

532:                                              ; preds = %529
  %533 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %534 = load i64, ptr %0, align 8
  br label %540

535:                                              ; preds = %529
  %536 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %537 = load i32, ptr %536, align 4
  %538 = lshr i32 %537, 16
  %539 = and i32 %538, 255
  br label %540

540:                                              ; preds = %535, %532
  %541 = phi i64 [ %534, %532 ], [ %523, %535 ]
  %542 = phi i32 [ %533, %532 ], [ %539, %535 ]
  %543 = zext i32 %542 to i64
  %544 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %543
  %545 = load i8, ptr %544, align 1, !tbaa !17
  %546 = icmp eq i8 %545, 9
  br i1 %546, label %547, label %558

547:                                              ; preds = %540, %522
  %548 = phi i64 [ %541, %540 ], [ %523, %522 ]
  %549 = and i64 %548, 65535
  %550 = icmp eq i64 %549, 14
  br i1 %550, label %551, label %553

551:                                              ; preds = %547
  %552 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %574

553:                                              ; preds = %547
  %554 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %555 = load i32, ptr %554, align 4
  %556 = lshr i32 %555, 16
  %557 = and i32 %556, 255
  br label %574

558:                                              ; preds = %540
  %559 = and i64 %541, 65535
  %560 = icmp eq i64 %559, 14
  br i1 %560, label %561, label %563

561:                                              ; preds = %558
  %562 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %568

563:                                              ; preds = %558
  %564 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %565 = load i32, ptr %564, align 4
  %566 = lshr i32 %565, 16
  %567 = and i32 %566, 255
  br label %568

568:                                              ; preds = %563, %561
  %569 = phi i32 [ %562, %561 ], [ %567, %563 ]
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %570
  %572 = load i8, ptr %571, align 1, !tbaa !17
  %573 = zext i8 %572 to i32
  br label %574

574:                                              ; preds = %568, %553, %551, %507, %492, %490
  %575 = phi i32 [ %512, %507 ], [ %491, %490 ], [ %496, %492 ], [ %573, %568 ], [ %552, %551 ], [ %557, %553 ]
  %576 = add i32 %575, -38
  %577 = zext i32 %576 to i64
  %578 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %577
  %579 = load ptr, ptr %578, align 8, !tbaa !6
  %580 = getelementptr inbounds %struct.real_format, ptr %579, i64 0, i32 11
  %581 = load i8, ptr %580, align 2, !tbaa !36
  %582 = icmp eq i8 %581, 0
  br i1 %582, label %585, label %583

583:                                              ; preds = %574
  %584 = load i64, ptr %0, align 8
  br label %588

585:                                              ; preds = %574, %371
  %586 = load i64, ptr %18, align 8
  %587 = or i64 %586, 134217728
  br label %881

588:                                              ; preds = %583, %302
  %589 = phi i64 [ %584, %583 ], [ %306, %302 ]
  %590 = and i64 %589, 65535
  %591 = icmp eq i64 %590, 14
  br i1 %591, label %592, label %595

592:                                              ; preds = %588
  %593 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %594 = load i64, ptr %0, align 8
  br label %600

595:                                              ; preds = %588
  %596 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %597 = load i32, ptr %596, align 4
  %598 = lshr i32 %597, 16
  %599 = and i32 %598, 255
  br label %600

600:                                              ; preds = %595, %592
  %601 = phi i64 [ %594, %592 ], [ %589, %595 ]
  %602 = phi i32 [ %593, %592 ], [ %599, %595 ]
  %603 = zext i32 %602 to i64
  %604 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %603
  %605 = load i8, ptr %604, align 1, !tbaa !17
  %606 = icmp eq i8 %605, 8
  br i1 %606, label %661, label %607

607:                                              ; preds = %600
  %608 = and i64 %601, 65535
  %609 = icmp eq i64 %608, 14
  br i1 %609, label %610, label %613

610:                                              ; preds = %607
  %611 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %612 = load i64, ptr %0, align 8
  br label %618

613:                                              ; preds = %607
  %614 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %615 = load i32, ptr %614, align 4
  %616 = lshr i32 %615, 16
  %617 = and i32 %616, 255
  br label %618

618:                                              ; preds = %613, %610
  %619 = phi i64 [ %612, %610 ], [ %601, %613 ]
  %620 = phi i32 [ %611, %610 ], [ %617, %613 ]
  %621 = zext i32 %620 to i64
  %622 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %621
  %623 = load i8, ptr %622, align 1, !tbaa !17
  %624 = icmp eq i8 %623, 9
  br i1 %624, label %661, label %625

625:                                              ; preds = %618
  %626 = and i64 %619, 65535
  %627 = icmp eq i64 %626, 14
  br i1 %627, label %628, label %631

628:                                              ; preds = %625
  %629 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %630 = load i64, ptr %0, align 8
  br label %636

631:                                              ; preds = %625
  %632 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %633 = load i32, ptr %632, align 4
  %634 = lshr i32 %633, 16
  %635 = and i32 %634, 255
  br label %636

636:                                              ; preds = %631, %628
  %637 = phi i64 [ %630, %628 ], [ %619, %631 ]
  %638 = phi i32 [ %629, %628 ], [ %635, %631 ]
  %639 = zext i32 %638 to i64
  %640 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %639
  %641 = load i8, ptr %640, align 1, !tbaa !17
  %642 = icmp eq i8 %641, 11
  br i1 %642, label %661, label %643

643:                                              ; preds = %636
  %644 = and i64 %637, 65535
  %645 = icmp eq i64 %644, 14
  br i1 %645, label %646, label %648

646:                                              ; preds = %643
  %647 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %653

648:                                              ; preds = %643
  %649 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %650 = load i32, ptr %649, align 4
  %651 = lshr i32 %650, 16
  %652 = and i32 %651, 255
  br label %653

653:                                              ; preds = %648, %646
  %654 = phi i32 [ %647, %646 ], [ %652, %648 ]
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %655
  %657 = load i8, ptr %656, align 1, !tbaa !17
  %658 = icmp eq i8 %657, 17
  br i1 %658, label %659, label %865

659:                                              ; preds = %653
  %660 = load i64, ptr %0, align 8
  br label %661

661:                                              ; preds = %659, %636, %618, %600
  %662 = phi i64 [ %660, %659 ], [ %637, %636 ], [ %619, %618 ], [ %601, %600 ]
  %663 = and i64 %662, 65535
  %664 = icmp eq i64 %663, 14
  br i1 %664, label %665, label %668

665:                                              ; preds = %661
  %666 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %667 = load i64, ptr %0, align 8
  br label %673

668:                                              ; preds = %661
  %669 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %670 = load i32, ptr %669, align 4
  %671 = lshr i32 %670, 16
  %672 = and i32 %671, 255
  br label %673

673:                                              ; preds = %668, %665
  %674 = phi i64 [ %667, %665 ], [ %662, %668 ]
  %675 = phi i32 [ %666, %665 ], [ %672, %668 ]
  %676 = zext i32 %675 to i64
  %677 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %676
  %678 = load i8, ptr %677, align 1, !tbaa !17
  %679 = icmp eq i8 %678, 8
  br i1 %679, label %698, label %680

680:                                              ; preds = %673
  %681 = and i64 %674, 65535
  %682 = icmp eq i64 %681, 14
  br i1 %682, label %683, label %686

683:                                              ; preds = %680
  %684 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %685 = load i64, ptr %0, align 8
  br label %691

686:                                              ; preds = %680
  %687 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %688 = load i32, ptr %687, align 4
  %689 = lshr i32 %688, 16
  %690 = and i32 %689, 255
  br label %691

691:                                              ; preds = %686, %683
  %692 = phi i64 [ %685, %683 ], [ %674, %686 ]
  %693 = phi i32 [ %684, %683 ], [ %690, %686 ]
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %694
  %696 = load i8, ptr %695, align 1, !tbaa !17
  %697 = icmp eq i8 %696, 9
  br i1 %697, label %698, label %709

698:                                              ; preds = %691, %673
  %699 = phi i64 [ %692, %691 ], [ %674, %673 ]
  %700 = and i64 %699, 65535
  %701 = icmp eq i64 %700, 14
  br i1 %701, label %702, label %704

702:                                              ; preds = %698
  %703 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %725

704:                                              ; preds = %698
  %705 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %706 = load i32, ptr %705, align 4
  %707 = lshr i32 %706, 16
  %708 = and i32 %707, 255
  br label %725

709:                                              ; preds = %691
  %710 = and i64 %692, 65535
  %711 = icmp eq i64 %710, 14
  br i1 %711, label %712, label %714

712:                                              ; preds = %709
  %713 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %719

714:                                              ; preds = %709
  %715 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %716 = load i32, ptr %715, align 4
  %717 = lshr i32 %716, 16
  %718 = and i32 %717, 255
  br label %719

719:                                              ; preds = %714, %712
  %720 = phi i32 [ %713, %712 ], [ %718, %714 ]
  %721 = zext i32 %720 to i64
  %722 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %721
  %723 = load i8, ptr %722, align 1, !tbaa !17
  %724 = zext i8 %723 to i32
  br label %725

725:                                              ; preds = %702, %704, %719
  %726 = phi i32 [ %724, %719 ], [ %703, %702 ], [ %708, %704 ]
  %727 = zext i32 %726 to i64
  %728 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %727
  %729 = load i8, ptr %728, align 1, !tbaa !17
  %730 = icmp eq i8 %729, 9
  %731 = load i64, ptr %0, align 8
  %732 = and i64 %731, 65535
  %733 = icmp eq i64 %732, 14
  br i1 %730, label %734, label %795

734:                                              ; preds = %725
  br i1 %733, label %735, label %738

735:                                              ; preds = %734
  %736 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %737 = load i64, ptr %0, align 8
  br label %743

738:                                              ; preds = %734
  %739 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %740 = load i32, ptr %739, align 4
  %741 = lshr i32 %740, 16
  %742 = and i32 %741, 255
  br label %743

743:                                              ; preds = %738, %735
  %744 = phi i64 [ %737, %735 ], [ %731, %738 ]
  %745 = phi i32 [ %736, %735 ], [ %742, %738 ]
  %746 = zext i32 %745 to i64
  %747 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %746
  %748 = load i8, ptr %747, align 1, !tbaa !17
  %749 = icmp eq i8 %748, 8
  br i1 %749, label %768, label %750

750:                                              ; preds = %743
  %751 = and i64 %744, 65535
  %752 = icmp eq i64 %751, 14
  br i1 %752, label %753, label %756

753:                                              ; preds = %750
  %754 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %755 = load i64, ptr %0, align 8
  br label %761

756:                                              ; preds = %750
  %757 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %758 = load i32, ptr %757, align 4
  %759 = lshr i32 %758, 16
  %760 = and i32 %759, 255
  br label %761

761:                                              ; preds = %756, %753
  %762 = phi i64 [ %755, %753 ], [ %744, %756 ]
  %763 = phi i32 [ %754, %753 ], [ %760, %756 ]
  %764 = zext i32 %763 to i64
  %765 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %764
  %766 = load i8, ptr %765, align 1, !tbaa !17
  %767 = icmp eq i8 %766, 9
  br i1 %767, label %768, label %779

768:                                              ; preds = %761, %743
  %769 = phi i64 [ %762, %761 ], [ %744, %743 ]
  %770 = and i64 %769, 65535
  %771 = icmp eq i64 %770, 14
  br i1 %771, label %772, label %774

772:                                              ; preds = %768
  %773 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %856

774:                                              ; preds = %768
  %775 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %776 = load i32, ptr %775, align 4
  %777 = lshr i32 %776, 16
  %778 = and i32 %777, 255
  br label %856

779:                                              ; preds = %761
  %780 = and i64 %762, 65535
  %781 = icmp eq i64 %780, 14
  br i1 %781, label %782, label %784

782:                                              ; preds = %779
  %783 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %789

784:                                              ; preds = %779
  %785 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %786 = load i32, ptr %785, align 4
  %787 = lshr i32 %786, 16
  %788 = and i32 %787, 255
  br label %789

789:                                              ; preds = %784, %782
  %790 = phi i32 [ %783, %782 ], [ %788, %784 ]
  %791 = zext i32 %790 to i64
  %792 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %791
  %793 = load i8, ptr %792, align 1, !tbaa !17
  %794 = zext i8 %793 to i32
  br label %856

795:                                              ; preds = %725
  br i1 %733, label %796, label %799

796:                                              ; preds = %795
  %797 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %798 = load i64, ptr %0, align 8
  br label %804

799:                                              ; preds = %795
  %800 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %801 = load i32, ptr %800, align 4
  %802 = lshr i32 %801, 16
  %803 = and i32 %802, 255
  br label %804

804:                                              ; preds = %799, %796
  %805 = phi i64 [ %798, %796 ], [ %731, %799 ]
  %806 = phi i32 [ %797, %796 ], [ %803, %799 ]
  %807 = zext i32 %806 to i64
  %808 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %807
  %809 = load i8, ptr %808, align 1, !tbaa !17
  %810 = icmp eq i8 %809, 8
  br i1 %810, label %829, label %811

811:                                              ; preds = %804
  %812 = and i64 %805, 65535
  %813 = icmp eq i64 %812, 14
  br i1 %813, label %814, label %817

814:                                              ; preds = %811
  %815 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %816 = load i64, ptr %0, align 8
  br label %822

817:                                              ; preds = %811
  %818 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %819 = load i32, ptr %818, align 4
  %820 = lshr i32 %819, 16
  %821 = and i32 %820, 255
  br label %822

822:                                              ; preds = %817, %814
  %823 = phi i64 [ %816, %814 ], [ %805, %817 ]
  %824 = phi i32 [ %815, %814 ], [ %821, %817 ]
  %825 = zext i32 %824 to i64
  %826 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %825
  %827 = load i8, ptr %826, align 1, !tbaa !17
  %828 = icmp eq i8 %827, 9
  br i1 %828, label %829, label %840

829:                                              ; preds = %822, %804
  %830 = phi i64 [ %823, %822 ], [ %805, %804 ]
  %831 = and i64 %830, 65535
  %832 = icmp eq i64 %831, 14
  br i1 %832, label %833, label %835

833:                                              ; preds = %829
  %834 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %856

835:                                              ; preds = %829
  %836 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %837 = load i32, ptr %836, align 4
  %838 = lshr i32 %837, 16
  %839 = and i32 %838, 255
  br label %856

840:                                              ; preds = %822
  %841 = and i64 %823, 65535
  %842 = icmp eq i64 %841, 14
  br i1 %842, label %843, label %845

843:                                              ; preds = %840
  %844 = call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %850

845:                                              ; preds = %840
  %846 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %847 = load i32, ptr %846, align 4
  %848 = lshr i32 %847, 16
  %849 = and i32 %848, 255
  br label %850

850:                                              ; preds = %845, %843
  %851 = phi i32 [ %844, %843 ], [ %849, %845 ]
  %852 = zext i32 %851 to i64
  %853 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %852
  %854 = load i8, ptr %853, align 1, !tbaa !17
  %855 = zext i8 %854 to i32
  br label %856

856:                                              ; preds = %850, %835, %833, %789, %774, %772
  %857 = phi i32 [ %794, %789 ], [ %773, %772 ], [ %778, %774 ], [ %855, %850 ], [ %834, %833 ], [ %839, %835 ]
  %858 = add i32 %857, -38
  %859 = zext i32 %858 to i64
  %860 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %859
  %861 = load ptr, ptr %860, align 8, !tbaa !6
  %862 = getelementptr inbounds %struct.real_format, ptr %861, i64 0, i32 12
  %863 = load i8, ptr %862, align 1, !tbaa !34
  %864 = icmp eq i8 %863, 0
  br i1 %864, label %865, label %875

865:                                              ; preds = %856, %653
  %866 = call zeroext i8 @real_isinf(ptr noundef nonnull %3) #24
  %867 = icmp eq i8 %866, 0
  br i1 %867, label %875, label %868

868:                                              ; preds = %865
  %869 = load ptr, ptr %16, align 8, !tbaa !17
  %870 = call zeroext i8 @real_isinf(ptr noundef %869) #24
  %871 = icmp eq i8 %870, 0
  br i1 %871, label %872, label %875

872:                                              ; preds = %868
  %873 = load i64, ptr %18, align 8
  %874 = or i64 %873, 134217728
  br label %881

875:                                              ; preds = %868, %865, %856
  %876 = load i64, ptr %1, align 8
  %877 = and i64 %876, 134217728
  %878 = load i64, ptr %18, align 8
  %879 = and i64 %878, -134217729
  %880 = or i64 %879, %877
  br label %881

881:                                              ; preds = %585, %875, %872, %299
  %882 = phi i64 [ %587, %585 ], [ %880, %875 ], [ %874, %872 ], [ %301, %299 ]
  store i64 %882, ptr %18, align 8
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #24
  ret ptr %18
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const_real_from_fixed(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %14

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = lshr i32 %11, 16
  %13 = and i32 %12, 255
  br label %14

14:                                               ; preds = %9, %7
  %15 = phi i32 [ %8, %7 ], [ %13, %9 ]
  %16 = getelementptr inbounds %struct.tree_fixed_cst, ptr %1, i64 0, i32 1
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  call void @real_convert_from_fixed(ptr noundef nonnull %3, i32 noundef %15, ptr noundef %17) #24
  %18 = call ptr @build_real(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.real_value) align 8 %3) #24
  %19 = load i64, ptr %1, align 8
  %20 = and i64 %19, 134217728
  %21 = load i64, ptr %18, align 8
  %22 = and i64 %21, -134217729
  %23 = or i64 %22, %20
  store i64 %23, ptr %18, align 8
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %3) #24
  ret ptr %18
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const_fixed_from_fixed(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca %struct.fixed_value, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %9 = load i64, ptr %0, align 8
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %12 = load i32, ptr %11, align 4
  %13 = lshr i32 %12, 16
  %14 = and i32 %13, 255
  br label %15

15:                                               ; preds = %10, %7
  %16 = phi i64 [ %9, %7 ], [ %4, %10 ]
  %17 = phi i32 [ %8, %7 ], [ %14, %10 ]
  %18 = getelementptr inbounds %struct.tree_fixed_cst, ptr %1, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = trunc i64 %16 to i32
  %21 = lshr i32 %20, 31
  %22 = trunc i32 %21 to i8
  %23 = call zeroext i8 @fixed_convert(ptr noundef nonnull %3, i32 noundef %17, ptr noundef %19, i8 noundef zeroext %22) #24
  %24 = call ptr @build_fixed(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.fixed_value) align 8 %3) #24
  %25 = zext i8 %23 to i32
  %26 = load i64, ptr %1, align 8
  %27 = trunc i64 %26 to i32
  %28 = lshr i32 %27, 27
  %29 = and i32 %28, 1
  %30 = or i32 %29, %25
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %15
  %33 = load i64, ptr %24, align 8
  %34 = or i64 %33, 134217728
  store i64 %34, ptr %24, align 8
  br label %35

35:                                               ; preds = %32, %15
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #24
  ret ptr %24
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const_fixed_from_int(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca %struct.fixed_value, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %9 = load i64, ptr %0, align 8
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %12 = load i32, ptr %11, align 4
  %13 = lshr i32 %12, 16
  %14 = and i32 %13, 255
  br label %15

15:                                               ; preds = %10, %7
  %16 = phi i64 [ %9, %7 ], [ %4, %10 ]
  %17 = phi i32 [ %8, %7 ], [ %14, %10 ]
  %18 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %19 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = load i64, ptr %20, align 8
  %22 = lshr i64 %21, 21
  %23 = trunc i64 %22 to i8
  %24 = and i8 %23, 1
  %25 = trunc i64 %16 to i32
  %26 = lshr i32 %25, 31
  %27 = trunc i32 %26 to i8
  %28 = load i64, ptr %18, align 8
  %29 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %30 = load i64, ptr %29, align 8
  %31 = call zeroext i8 @fixed_convert_from_int(ptr noundef nonnull %3, i32 noundef %17, i64 %28, i64 %30, i8 noundef zeroext %24, i8 noundef zeroext %27) #24
  %32 = call ptr @build_fixed(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.fixed_value) align 8 %3) #24
  %33 = zext i8 %31 to i32
  %34 = load i64, ptr %1, align 8
  %35 = trunc i64 %34 to i32
  %36 = lshr i32 %35, 27
  %37 = and i32 %36, 1
  %38 = or i32 %37, %33
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %15
  %41 = load i64, ptr %32, align 8
  %42 = or i64 %41, 134217728
  store i64 %42, ptr %32, align 8
  br label %43

43:                                               ; preds = %40, %15
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #24
  ret ptr %32
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_convert_const_fixed_from_real(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca %struct.fixed_value, align 8
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 14
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %9 = load i64, ptr %0, align 8
  br label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %12 = load i32, ptr %11, align 4
  %13 = lshr i32 %12, 16
  %14 = and i32 %13, 255
  br label %15

15:                                               ; preds = %10, %7
  %16 = phi i64 [ %9, %7 ], [ %4, %10 ]
  %17 = phi i32 [ %8, %7 ], [ %14, %10 ]
  %18 = getelementptr inbounds %struct.tree_real_cst, ptr %1, i64 0, i32 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = trunc i64 %16 to i32
  %21 = lshr i32 %20, 31
  %22 = trunc i32 %21 to i8
  %23 = call zeroext i8 @fixed_convert_from_real(ptr noundef nonnull %3, i32 noundef %17, ptr noundef %19, i8 noundef zeroext %22) #24
  %24 = call ptr @build_fixed(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.fixed_value) align 8 %3) #24
  %25 = zext i8 %23 to i32
  %26 = load i64, ptr %1, align 8
  %27 = trunc i64 %26 to i32
  %28 = lshr i32 %27, 27
  %29 = and i32 %28, 1
  %30 = or i32 %29, %25
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %15
  %33 = load i64, ptr %24, align 8
  %34 = or i64 %33, 134217728
  store i64 %34, ptr %24, align 8
  br label %35

35:                                               ; preds = %32, %15
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3) #24
  ret ptr %24
}

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #17

declare void @real_trunc(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @real_isnan(ptr noundef) local_unnamed_addr #3

declare void @real_value_from_int_cst(ptr sret(%struct.real_value) align 8, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @real_compare(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @real_to_integer2(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare { i64, i64 } @double_int_add(i64, i64, i64, i64) local_unnamed_addr #3

declare void @real_convert(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_real(ptr noundef, ptr noundef byval(%struct.real_value) align 8) local_unnamed_addr #3

declare zeroext i8 @real_isinf(ptr noundef) local_unnamed_addr #3

declare void @real_convert_from_fixed(ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @fixed_convert(ptr noundef, i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @build_fixed(ptr noundef, ptr noundef byval(%struct.fixed_value) align 8) local_unnamed_addr #3

declare zeroext i8 @fixed_convert_from_int(ptr noundef, i32 noundef, i64, i64, i8 noundef zeroext, i8 noundef zeroext) local_unnamed_addr #3

declare zeroext i8 @fixed_convert_from_real(ptr noundef, i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare ptr @tree_cons_stat(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_vector(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %2
  %6 = load i64, ptr %1, align 8
  %7 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %6)
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %11, ptr noundef nonnull %1) #24
  %13 = getelementptr inbounds %struct.tree_exp, ptr %12, i64 0, i32 1
  store i32 %0, ptr %13, align 8, !tbaa !17
  br label %14

14:                                               ; preds = %5, %2, %9
  %15 = phi ptr [ %12, %9 ], [ %1, %2 ], [ %1, %5 ]
  ret ptr %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal fastcc zeroext i8 @maybe_lvalue_p(i64 %0) unnamed_addr #18 {
  %2 = trunc i64 %0 to i16
  switch i16 %2, label %3 [
    i16 32, label %6
    i16 34, label %6
    i16 36, label %6
    i16 30, label %6
    i16 29, label %6
    i16 141, label %6
    i16 41, label %6
    i16 47, label %6
    i16 48, label %6
    i16 49, label %6
    i16 45, label %6
    i16 46, label %6
    i16 42, label %6
    i16 50, label %6
    i16 43, label %6
    i16 44, label %6
    i16 126, label %6
    i16 125, label %6
    i16 120, label %6
    i16 130, label %6
    i16 60, label %6
    i16 52, label %6
    i16 53, label %6
    i16 55, label %6
    i16 56, label %6
    i16 58, label %6
  ]

3:                                                ; preds = %1
  %4 = and i64 %0, 65532
  %5 = icmp ugt i64 %4, 187
  br i1 %5, label %6, label %7

6:                                                ; preds = %3, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  br label %7

7:                                                ; preds = %3, %6
  %8 = phi i8 [ 1, %6 ], [ 0, %3 ]
  ret i8 %8
}

declare ptr @build1_stat(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @invert_tree_comparison(i32 noundef %0, i8 noundef zeroext %1) local_unnamed_addr #10 {
  %3 = icmp ne i8 %1, 0
  %4 = load i32, ptr @flag_trapping_math, align 4
  %5 = icmp ne i32 %4, 0
  %6 = select i1 %3, i1 %5, i1 false
  br i1 %6, label %26, label %7

7:                                                ; preds = %2
  switch i32 %0, label %25 [
    i32 101, label %26
    i32 102, label %8
    i32 99, label %9
    i32 100, label %11
    i32 97, label %13
    i32 98, label %15
    i32 110, label %17
    i32 109, label %18
    i32 107, label %19
    i32 108, label %20
    i32 105, label %21
    i32 106, label %22
    i32 104, label %23
    i32 103, label %24
  ]

8:                                                ; preds = %7
  br label %26

9:                                                ; preds = %7
  %10 = select i1 %3, i32 106, i32 98
  br label %26

11:                                               ; preds = %7
  %12 = select i1 %3, i32 105, i32 97
  br label %26

13:                                               ; preds = %7
  %14 = select i1 %3, i32 108, i32 100
  br label %26

15:                                               ; preds = %7
  %16 = select i1 %3, i32 107, i32 99
  br label %26

17:                                               ; preds = %7
  br label %26

18:                                               ; preds = %7
  br label %26

19:                                               ; preds = %7
  br label %26

20:                                               ; preds = %7
  br label %26

21:                                               ; preds = %7
  br label %26

22:                                               ; preds = %7
  br label %26

23:                                               ; preds = %7
  br label %26

24:                                               ; preds = %7
  br label %26

25:                                               ; preds = %7
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2932, ptr noundef nonnull @.str.1) #24
  br label %26

26:                                               ; preds = %7, %2, %25, %24, %23, %22, %21, %20, %19, %18, %17, %15, %13, %11, %9, %8
  %27 = phi i32 [ 0, %25 ], [ 104, %24 ], [ 103, %23 ], [ 99, %22 ], [ 100, %21 ], [ 97, %20 ], [ 98, %19 ], [ 110, %18 ], [ 109, %17 ], [ %16, %15 ], [ %14, %13 ], [ %12, %11 ], [ %10, %9 ], [ 101, %8 ], [ 0, %2 ], [ 102, %7 ]
  ret i32 %27
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @swap_tree_comparison(i32 noundef %0) local_unnamed_addr #10 {
  %2 = add i32 %0, -97
  %3 = icmp ult i32 %2, 14
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %9

5:                                                ; preds = %1
  %6 = sext i32 %2 to i64
  %7 = getelementptr inbounds [14 x i32], ptr @switch.table.fold_div_compare, i64 0, i64 %6
  %8 = load i32, ptr %7, align 4
  br label %9

9:                                                ; preds = %5, %4
  %10 = phi i32 [ 0, %4 ], [ %8, %5 ]
  ret i32 %10
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @combine_comparisons(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6) local_unnamed_addr #10 {
  %8 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 14
  br i1 %12, label %13, label %16

13:                                               ; preds = %7
  %14 = tail call i32 @vector_type_mode(ptr noundef nonnull %9) #24
  %15 = load ptr, ptr %8, align 8, !tbaa !17
  br label %21

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 255
  br label %21

21:                                               ; preds = %16, %13
  %22 = phi ptr [ %15, %13 ], [ %9, %16 ]
  %23 = phi i32 [ %14, %13 ], [ %20, %16 ]
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !17
  %27 = icmp eq i8 %26, 8
  br i1 %27, label %85, label %28

28:                                               ; preds = %21
  %29 = load i64, ptr %22, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 14
  br i1 %31, label %32, label %35

32:                                               ; preds = %28
  %33 = tail call i32 @vector_type_mode(ptr noundef nonnull %22) #24
  %34 = load ptr, ptr %8, align 8, !tbaa !17
  br label %40

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.tree_type, ptr %22, i64 0, i32 6
  %37 = load i32, ptr %36, align 4
  %38 = lshr i32 %37, 16
  %39 = and i32 %38, 255
  br label %40

40:                                               ; preds = %35, %32
  %41 = phi ptr [ %34, %32 ], [ %22, %35 ]
  %42 = phi i32 [ %33, %32 ], [ %39, %35 ]
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %43
  %45 = load i8, ptr %44, align 1, !tbaa !17
  %46 = icmp eq i8 %45, 9
  br i1 %46, label %85, label %47

47:                                               ; preds = %40
  %48 = load i64, ptr %41, align 8
  %49 = and i64 %48, 65535
  %50 = icmp eq i64 %49, 14
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = tail call i32 @vector_type_mode(ptr noundef nonnull %41) #24
  %53 = load ptr, ptr %8, align 8, !tbaa !17
  br label %59

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.tree_type, ptr %41, i64 0, i32 6
  %56 = load i32, ptr %55, align 4
  %57 = lshr i32 %56, 16
  %58 = and i32 %57, 255
  br label %59

59:                                               ; preds = %54, %51
  %60 = phi ptr [ %53, %51 ], [ %41, %54 ]
  %61 = phi i32 [ %52, %51 ], [ %58, %54 ]
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !17
  %65 = icmp eq i8 %64, 11
  br i1 %65, label %85, label %66

66:                                               ; preds = %59
  %67 = load i64, ptr %60, align 8
  %68 = and i64 %67, 65535
  %69 = icmp eq i64 %68, 14
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = tail call i32 @vector_type_mode(ptr noundef nonnull %60) #24
  br label %77

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.tree_type, ptr %60, i64 0, i32 6
  %74 = load i32, ptr %73, align 4
  %75 = lshr i32 %74, 16
  %76 = and i32 %75, 255
  br label %77

77:                                               ; preds = %72, %70
  %78 = phi i32 [ %71, %70 ], [ %76, %72 ]
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %79
  %81 = load i8, ptr %80, align 1, !tbaa !17
  %82 = icmp eq i8 %81, 17
  br i1 %82, label %83, label %303

83:                                               ; preds = %77
  %84 = load ptr, ptr %8, align 8, !tbaa !17
  br label %85

85:                                               ; preds = %83, %59, %40, %21
  %86 = phi ptr [ %84, %83 ], [ %60, %59 ], [ %41, %40 ], [ %22, %21 ]
  %87 = load i64, ptr %86, align 8
  %88 = and i64 %87, 65535
  %89 = icmp eq i64 %88, 14
  br i1 %89, label %90, label %93

90:                                               ; preds = %85
  %91 = tail call i32 @vector_type_mode(ptr noundef nonnull %86) #24
  %92 = load ptr, ptr %8, align 8, !tbaa !17
  br label %98

93:                                               ; preds = %85
  %94 = getelementptr inbounds %struct.tree_type, ptr %86, i64 0, i32 6
  %95 = load i32, ptr %94, align 4
  %96 = lshr i32 %95, 16
  %97 = and i32 %96, 255
  br label %98

98:                                               ; preds = %93, %90
  %99 = phi ptr [ %92, %90 ], [ %86, %93 ]
  %100 = phi i32 [ %91, %90 ], [ %97, %93 ]
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %101
  %103 = load i8, ptr %102, align 1, !tbaa !17
  %104 = icmp eq i8 %103, 8
  br i1 %104, label %124, label %105

105:                                              ; preds = %98
  %106 = load i64, ptr %99, align 8
  %107 = and i64 %106, 65535
  %108 = icmp eq i64 %107, 14
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = tail call i32 @vector_type_mode(ptr noundef nonnull %99) #24
  %111 = load ptr, ptr %8, align 8, !tbaa !17
  br label %117

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.tree_type, ptr %99, i64 0, i32 6
  %114 = load i32, ptr %113, align 4
  %115 = lshr i32 %114, 16
  %116 = and i32 %115, 255
  br label %117

117:                                              ; preds = %112, %109
  %118 = phi ptr [ %111, %109 ], [ %99, %112 ]
  %119 = phi i32 [ %110, %109 ], [ %116, %112 ]
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %120
  %122 = load i8, ptr %121, align 1, !tbaa !17
  %123 = icmp eq i8 %122, 9
  br i1 %123, label %124, label %136

124:                                              ; preds = %117, %98
  %125 = phi ptr [ %118, %117 ], [ %99, %98 ]
  %126 = load i64, ptr %125, align 8
  %127 = and i64 %126, 65535
  %128 = icmp eq i64 %127, 14
  br i1 %128, label %129, label %131

129:                                              ; preds = %124
  %130 = tail call i32 @vector_type_mode(ptr noundef nonnull %125) #24
  br label %153

131:                                              ; preds = %124
  %132 = getelementptr inbounds %struct.tree_type, ptr %125, i64 0, i32 6
  %133 = load i32, ptr %132, align 4
  %134 = lshr i32 %133, 16
  %135 = and i32 %134, 255
  br label %153

136:                                              ; preds = %117
  %137 = load i64, ptr %118, align 8
  %138 = and i64 %137, 65535
  %139 = icmp eq i64 %138, 14
  br i1 %139, label %140, label %142

140:                                              ; preds = %136
  %141 = tail call i32 @vector_type_mode(ptr noundef nonnull %118) #24
  br label %147

142:                                              ; preds = %136
  %143 = getelementptr inbounds %struct.tree_type, ptr %118, i64 0, i32 6
  %144 = load i32, ptr %143, align 4
  %145 = lshr i32 %144, 16
  %146 = and i32 %145, 255
  br label %147

147:                                              ; preds = %142, %140
  %148 = phi i32 [ %141, %140 ], [ %146, %142 ]
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %149
  %151 = load i8, ptr %150, align 1, !tbaa !17
  %152 = zext i8 %151 to i32
  br label %153

153:                                              ; preds = %129, %131, %147
  %154 = phi i32 [ %152, %147 ], [ %130, %129 ], [ %135, %131 ]
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %155
  %157 = load i8, ptr %156, align 1, !tbaa !17
  %158 = icmp eq i8 %157, 9
  %159 = load ptr, ptr %8, align 8, !tbaa !17
  %160 = load i64, ptr %159, align 8
  %161 = and i64 %160, 65535
  %162 = icmp eq i64 %161, 14
  br i1 %158, label %163, label %227

163:                                              ; preds = %153
  br i1 %162, label %164, label %167

164:                                              ; preds = %163
  %165 = tail call i32 @vector_type_mode(ptr noundef nonnull %159) #24
  %166 = load ptr, ptr %8, align 8, !tbaa !17
  br label %172

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.tree_type, ptr %159, i64 0, i32 6
  %169 = load i32, ptr %168, align 4
  %170 = lshr i32 %169, 16
  %171 = and i32 %170, 255
  br label %172

172:                                              ; preds = %167, %164
  %173 = phi ptr [ %166, %164 ], [ %159, %167 ]
  %174 = phi i32 [ %165, %164 ], [ %171, %167 ]
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %175
  %177 = load i8, ptr %176, align 1, !tbaa !17
  %178 = icmp eq i8 %177, 8
  br i1 %178, label %198, label %179

179:                                              ; preds = %172
  %180 = load i64, ptr %173, align 8
  %181 = and i64 %180, 65535
  %182 = icmp eq i64 %181, 14
  br i1 %182, label %183, label %186

183:                                              ; preds = %179
  %184 = tail call i32 @vector_type_mode(ptr noundef nonnull %173) #24
  %185 = load ptr, ptr %8, align 8, !tbaa !17
  br label %191

186:                                              ; preds = %179
  %187 = getelementptr inbounds %struct.tree_type, ptr %173, i64 0, i32 6
  %188 = load i32, ptr %187, align 4
  %189 = lshr i32 %188, 16
  %190 = and i32 %189, 255
  br label %191

191:                                              ; preds = %186, %183
  %192 = phi ptr [ %185, %183 ], [ %173, %186 ]
  %193 = phi i32 [ %184, %183 ], [ %190, %186 ]
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %194
  %196 = load i8, ptr %195, align 1, !tbaa !17
  %197 = icmp eq i8 %196, 9
  br i1 %197, label %198, label %210

198:                                              ; preds = %191, %172
  %199 = phi ptr [ %192, %191 ], [ %173, %172 ]
  %200 = load i64, ptr %199, align 8
  %201 = and i64 %200, 65535
  %202 = icmp eq i64 %201, 14
  br i1 %202, label %203, label %205

203:                                              ; preds = %198
  %204 = tail call i32 @vector_type_mode(ptr noundef nonnull %199) #24
  br label %291

205:                                              ; preds = %198
  %206 = getelementptr inbounds %struct.tree_type, ptr %199, i64 0, i32 6
  %207 = load i32, ptr %206, align 4
  %208 = lshr i32 %207, 16
  %209 = and i32 %208, 255
  br label %291

210:                                              ; preds = %191
  %211 = load i64, ptr %192, align 8
  %212 = and i64 %211, 65535
  %213 = icmp eq i64 %212, 14
  br i1 %213, label %214, label %216

214:                                              ; preds = %210
  %215 = tail call i32 @vector_type_mode(ptr noundef nonnull %192) #24
  br label %221

216:                                              ; preds = %210
  %217 = getelementptr inbounds %struct.tree_type, ptr %192, i64 0, i32 6
  %218 = load i32, ptr %217, align 4
  %219 = lshr i32 %218, 16
  %220 = and i32 %219, 255
  br label %221

221:                                              ; preds = %216, %214
  %222 = phi i32 [ %215, %214 ], [ %220, %216 ]
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %223
  %225 = load i8, ptr %224, align 1, !tbaa !17
  %226 = zext i8 %225 to i32
  br label %291

227:                                              ; preds = %153
  br i1 %162, label %228, label %231

228:                                              ; preds = %227
  %229 = tail call i32 @vector_type_mode(ptr noundef nonnull %159) #24
  %230 = load ptr, ptr %8, align 8, !tbaa !17
  br label %236

231:                                              ; preds = %227
  %232 = getelementptr inbounds %struct.tree_type, ptr %159, i64 0, i32 6
  %233 = load i32, ptr %232, align 4
  %234 = lshr i32 %233, 16
  %235 = and i32 %234, 255
  br label %236

236:                                              ; preds = %231, %228
  %237 = phi ptr [ %230, %228 ], [ %159, %231 ]
  %238 = phi i32 [ %229, %228 ], [ %235, %231 ]
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %239
  %241 = load i8, ptr %240, align 1, !tbaa !17
  %242 = icmp eq i8 %241, 8
  br i1 %242, label %262, label %243

243:                                              ; preds = %236
  %244 = load i64, ptr %237, align 8
  %245 = and i64 %244, 65535
  %246 = icmp eq i64 %245, 14
  br i1 %246, label %247, label %250

247:                                              ; preds = %243
  %248 = tail call i32 @vector_type_mode(ptr noundef nonnull %237) #24
  %249 = load ptr, ptr %8, align 8, !tbaa !17
  br label %255

250:                                              ; preds = %243
  %251 = getelementptr inbounds %struct.tree_type, ptr %237, i64 0, i32 6
  %252 = load i32, ptr %251, align 4
  %253 = lshr i32 %252, 16
  %254 = and i32 %253, 255
  br label %255

255:                                              ; preds = %250, %247
  %256 = phi ptr [ %249, %247 ], [ %237, %250 ]
  %257 = phi i32 [ %248, %247 ], [ %254, %250 ]
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %258
  %260 = load i8, ptr %259, align 1, !tbaa !17
  %261 = icmp eq i8 %260, 9
  br i1 %261, label %262, label %274

262:                                              ; preds = %255, %236
  %263 = phi ptr [ %256, %255 ], [ %237, %236 ]
  %264 = load i64, ptr %263, align 8
  %265 = and i64 %264, 65535
  %266 = icmp eq i64 %265, 14
  br i1 %266, label %267, label %269

267:                                              ; preds = %262
  %268 = tail call i32 @vector_type_mode(ptr noundef nonnull %263) #24
  br label %291

269:                                              ; preds = %262
  %270 = getelementptr inbounds %struct.tree_type, ptr %263, i64 0, i32 6
  %271 = load i32, ptr %270, align 4
  %272 = lshr i32 %271, 16
  %273 = and i32 %272, 255
  br label %291

274:                                              ; preds = %255
  %275 = load i64, ptr %256, align 8
  %276 = and i64 %275, 65535
  %277 = icmp eq i64 %276, 14
  br i1 %277, label %278, label %280

278:                                              ; preds = %274
  %279 = tail call i32 @vector_type_mode(ptr noundef nonnull %256) #24
  br label %285

280:                                              ; preds = %274
  %281 = getelementptr inbounds %struct.tree_type, ptr %256, i64 0, i32 6
  %282 = load i32, ptr %281, align 4
  %283 = lshr i32 %282, 16
  %284 = and i32 %283, 255
  br label %285

285:                                              ; preds = %280, %278
  %286 = phi i32 [ %279, %278 ], [ %284, %280 ]
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %287
  %289 = load i8, ptr %288, align 1, !tbaa !17
  %290 = zext i8 %289 to i32
  br label %291

291:                                              ; preds = %285, %269, %267, %221, %205, %203
  %292 = phi i32 [ %226, %221 ], [ %204, %203 ], [ %209, %205 ], [ %290, %285 ], [ %268, %267 ], [ %273, %269 ]
  %293 = add i32 %292, -38
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %294
  %296 = load ptr, ptr %295, align 8, !tbaa !6
  %297 = getelementptr inbounds %struct.real_format, ptr %296, i64 0, i32 11
  %298 = load i8, ptr %297, align 2, !tbaa !36
  %299 = icmp eq i8 %298, 0
  br i1 %299, label %303, label %300

300:                                              ; preds = %291
  %301 = load i32, ptr @flag_finite_math_only, align 4, !tbaa !21
  %302 = icmp eq i32 %301, 0
  br label %303

303:                                              ; preds = %300, %291, %77
  %304 = phi i1 [ false, %291 ], [ false, %77 ], [ %302, %300 ]
  switch i32 %2, label %318 [
    i32 97, label %319
    i32 101, label %305
    i32 98, label %306
    i32 99, label %307
    i32 102, label %308
    i32 100, label %309
    i32 104, label %310
    i32 103, label %311
    i32 105, label %312
    i32 109, label %313
    i32 106, label %314
    i32 107, label %315
    i32 110, label %316
    i32 108, label %317
  ]

305:                                              ; preds = %303
  br label %319

306:                                              ; preds = %303
  br label %319

307:                                              ; preds = %303
  br label %319

308:                                              ; preds = %303
  br label %319

309:                                              ; preds = %303
  br label %319

310:                                              ; preds = %303
  br label %319

311:                                              ; preds = %303
  br label %319

312:                                              ; preds = %303
  br label %319

313:                                              ; preds = %303
  br label %319

314:                                              ; preds = %303
  br label %319

315:                                              ; preds = %303
  br label %319

316:                                              ; preds = %303
  br label %319

317:                                              ; preds = %303
  br label %319

318:                                              ; preds = %303
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 3017, ptr noundef nonnull @.str.1) #24
  br label %319

319:                                              ; preds = %303, %305, %306, %307, %308, %309, %310, %311, %312, %313, %314, %315, %316, %317, %318
  %320 = phi i1 [ true, %318 ], [ false, %317 ], [ true, %316 ], [ false, %315 ], [ false, %314 ], [ false, %313 ], [ false, %312 ], [ false, %311 ], [ true, %310 ], [ true, %309 ], [ false, %308 ], [ true, %307 ], [ true, %306 ], [ true, %305 ], [ true, %303 ]
  %321 = phi i1 [ true, %318 ], [ true, %317 ], [ true, %316 ], [ true, %315 ], [ true, %314 ], [ true, %313 ], [ true, %312 ], [ true, %311 ], [ true, %310 ], [ true, %309 ], [ true, %308 ], [ true, %307 ], [ true, %306 ], [ false, %305 ], [ true, %303 ]
  %322 = phi i8 [ 1, %318 ], [ 1, %317 ], [ 1, %316 ], [ 1, %315 ], [ 1, %314 ], [ 1, %313 ], [ 1, %312 ], [ 1, %311 ], [ 0, %310 ], [ 1, %309 ], [ 1, %308 ], [ 1, %307 ], [ 1, %306 ], [ 1, %305 ], [ 1, %303 ]
  %323 = phi i32 [ 0, %318 ], [ 14, %317 ], [ 5, %316 ], [ 12, %315 ], [ 11, %314 ], [ 10, %313 ], [ 9, %312 ], [ 8, %311 ], [ 7, %310 ], [ 6, %309 ], [ 13, %308 ], [ 4, %307 ], [ 3, %306 ], [ 2, %305 ], [ 1, %303 ]
  switch i32 %3, label %337 [
    i32 97, label %338
    i32 101, label %324
    i32 98, label %325
    i32 99, label %326
    i32 102, label %327
    i32 100, label %328
    i32 104, label %329
    i32 103, label %330
    i32 105, label %331
    i32 109, label %332
    i32 106, label %333
    i32 107, label %334
    i32 110, label %335
    i32 108, label %336
  ]

324:                                              ; preds = %319
  br label %338

325:                                              ; preds = %319
  br label %338

326:                                              ; preds = %319
  br label %338

327:                                              ; preds = %319
  br label %338

328:                                              ; preds = %319
  br label %338

329:                                              ; preds = %319
  br label %338

330:                                              ; preds = %319
  br label %338

331:                                              ; preds = %319
  br label %338

332:                                              ; preds = %319
  br label %338

333:                                              ; preds = %319
  br label %338

334:                                              ; preds = %319
  br label %338

335:                                              ; preds = %319
  br label %338

336:                                              ; preds = %319
  br label %338

337:                                              ; preds = %319
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 3017, ptr noundef nonnull @.str.1) #24
  br label %338

338:                                              ; preds = %319, %324, %325, %326, %327, %328, %329, %330, %331, %332, %333, %334, %335, %336, %337
  %339 = phi i1 [ true, %337 ], [ false, %336 ], [ true, %335 ], [ false, %334 ], [ false, %333 ], [ false, %332 ], [ false, %331 ], [ false, %330 ], [ true, %329 ], [ true, %328 ], [ false, %327 ], [ true, %326 ], [ true, %325 ], [ true, %324 ], [ true, %319 ]
  %340 = phi i1 [ true, %337 ], [ true, %336 ], [ true, %335 ], [ true, %334 ], [ true, %333 ], [ true, %332 ], [ true, %331 ], [ true, %330 ], [ true, %329 ], [ true, %328 ], [ true, %327 ], [ true, %326 ], [ true, %325 ], [ false, %324 ], [ true, %319 ]
  %341 = phi i8 [ 1, %337 ], [ 1, %336 ], [ 1, %335 ], [ 1, %334 ], [ 1, %333 ], [ 1, %332 ], [ 1, %331 ], [ 1, %330 ], [ 0, %329 ], [ 1, %328 ], [ 1, %327 ], [ 1, %326 ], [ 1, %325 ], [ 1, %324 ], [ 1, %319 ]
  %342 = phi i32 [ 0, %337 ], [ 14, %336 ], [ 5, %335 ], [ 12, %334 ], [ 11, %333 ], [ 10, %332 ], [ 9, %331 ], [ 8, %330 ], [ 7, %329 ], [ 6, %328 ], [ 13, %327 ], [ 4, %326 ], [ 3, %325 ], [ 2, %324 ], [ 1, %319 ]
  switch i32 %1, label %425 [
    i32 93, label %343
    i32 91, label %343
    i32 94, label %345
    i32 92, label %345
  ]

343:                                              ; preds = %338, %338
  %344 = and i32 %342, %323
  br label %347

345:                                              ; preds = %338, %338
  %346 = or i32 %342, %323
  br label %347

347:                                              ; preds = %345, %343
  %348 = phi i32 [ %346, %345 ], [ %344, %343 ]
  br i1 %304, label %351, label %349

349:                                              ; preds = %347
  %350 = and i32 %348, -9
  switch i32 %350, label %378 [
    i32 5, label %407
    i32 7, label %380
  ]

351:                                              ; preds = %347
  %352 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %378, label %354

354:                                              ; preds = %351
  %355 = and i1 %320, %321
  %356 = select i1 %355, i8 %322, i8 0
  %357 = and i1 %339, %340
  %358 = select i1 %357, i8 %341, i8 0
  %359 = select i1 %320, i32 91, i32 92
  %360 = icmp eq i32 %359, %1
  %361 = select i1 %360, i8 0, i8 %358
  %362 = icmp ne i8 %361, 0
  %363 = icmp eq i8 %356, 0
  %364 = and i1 %363, %362
  %365 = add nsw i32 %1, -91
  %366 = icmp ult i32 %365, 2
  %367 = and i1 %366, %364
  br i1 %367, label %425, label %368

368:                                              ; preds = %354
  %369 = and i32 %348, 8
  %370 = icmp eq i32 %369, 0
  %371 = icmp ne i32 %348, 2
  %372 = and i1 %371, %370
  %373 = icmp ne i32 %348, 7
  %374 = and i1 %373, %372
  %375 = or i8 %361, %356
  %376 = zext i1 %374 to i8
  %377 = icmp eq i8 %375, %376
  br i1 %377, label %378, label %425

378:                                              ; preds = %349, %351, %368
  %379 = phi i32 [ %348, %368 ], [ %348, %351 ], [ %350, %349 ]
  switch i32 %379, label %417 [
    i32 15, label %380
    i32 0, label %392
    i32 1, label %418
    i32 2, label %404
    i32 3, label %405
    i32 4, label %406
    i32 13, label %407
    i32 6, label %408
    i32 7, label %409
    i32 8, label %410
    i32 9, label %411
    i32 10, label %412
    i32 11, label %413
    i32 12, label %414
    i32 5, label %415
    i32 14, label %416
  ]

380:                                              ; preds = %378, %349
  %381 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %382 = icmp eq ptr %381, %4
  br i1 %382, label %383, label %385

383:                                              ; preds = %380
  %384 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  br label %425

385:                                              ; preds = %380
  %386 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %387 = icmp eq ptr %386, %4
  br i1 %387, label %388, label %390

388:                                              ; preds = %385
  %389 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  br label %425

390:                                              ; preds = %385
  %391 = tail call ptr @build_int_cst(ptr noundef %4, i64 noundef 1) #24
  br label %425

392:                                              ; preds = %378
  %393 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %394 = icmp eq ptr %393, %4
  br i1 %394, label %395, label %397

395:                                              ; preds = %392
  %396 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  br label %425

397:                                              ; preds = %392
  %398 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %399 = icmp eq ptr %398, %4
  br i1 %399, label %400, label %402

400:                                              ; preds = %397
  %401 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  br label %425

402:                                              ; preds = %397
  %403 = tail call ptr @build_int_cst(ptr noundef %4, i64 noundef 0) #24
  br label %425

404:                                              ; preds = %378
  br label %418

405:                                              ; preds = %378
  br label %418

406:                                              ; preds = %378
  br label %418

407:                                              ; preds = %378, %349
  br label %418

408:                                              ; preds = %378
  br label %418

409:                                              ; preds = %378
  br label %418

410:                                              ; preds = %378
  br label %418

411:                                              ; preds = %378
  br label %418

412:                                              ; preds = %378
  br label %418

413:                                              ; preds = %378
  br label %418

414:                                              ; preds = %378
  br label %418

415:                                              ; preds = %378
  br label %418

416:                                              ; preds = %378
  br label %418

417:                                              ; preds = %378
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 3062, ptr noundef nonnull @.str.1) #24
  br label %418

418:                                              ; preds = %378, %404, %405, %406, %407, %408, %409, %410, %411, %412, %413, %414, %415, %416, %417
  %419 = phi i32 [ 0, %417 ], [ 108, %416 ], [ 110, %415 ], [ 107, %414 ], [ 106, %413 ], [ 109, %412 ], [ 105, %411 ], [ 103, %410 ], [ 104, %409 ], [ 100, %408 ], [ 102, %407 ], [ 99, %406 ], [ 98, %405 ], [ 101, %404 ], [ 97, %378 ]
  %420 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %419, ptr noundef %4, ptr noundef nonnull %5, ptr noundef %6)
  %421 = icmp eq ptr %420, null
  br i1 %421, label %422, label %425

422:                                              ; preds = %418
  %423 = tail call ptr @build2_stat(i32 noundef %419, ptr noundef %4, ptr noundef nonnull %5, ptr noundef %6) #24
  %424 = getelementptr inbounds %struct.tree_exp, ptr %423, i64 0, i32 1
  store i32 %0, ptr %424, align 8, !tbaa !17
  br label %425

425:                                              ; preds = %422, %418, %402, %400, %395, %390, %388, %383, %354, %338, %368
  %426 = phi ptr [ null, %368 ], [ null, %338 ], [ null, %354 ], [ %384, %383 ], [ %389, %388 ], [ %391, %390 ], [ %396, %395 ], [ %401, %400 ], [ %403, %402 ], [ %420, %418 ], [ %423, %422 ]
  ret ptr %426
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @constant_boolean_node(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %4 = icmp eq ptr %3, %1
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = icmp eq i32 %0, 0
  %7 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %8 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %9 = select i1 %6, ptr %8, ptr %7
  br label %21

10:                                               ; preds = %2
  %11 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %12 = icmp eq ptr %11, %1
  br i1 %12, label %13, label %18

13:                                               ; preds = %10
  %14 = icmp eq i32 %0, 0
  %15 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %16 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %17 = select i1 %14, ptr %16, ptr %15
  br label %21

18:                                               ; preds = %10
  %19 = sext i32 %0 to i64
  %20 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %19) #24
  br label %21

21:                                               ; preds = %18, %13, %5
  %22 = phi ptr [ %9, %5 ], [ %17, %13 ], [ %20, %18 ]
  ret ptr %22
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @operand_equal_p(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = load i64, ptr %0, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %115, label %8

8:                                                ; preds = %3, %566
  %9 = phi i32 [ %573, %566 ], [ %6, %3 ]
  %10 = phi i32 [ 0, %566 ], [ %2, %3 ]
  %11 = phi ptr [ %570, %566 ], [ %1, %3 ]
  %12 = phi ptr [ %568, %566 ], [ %0, %3 ]
  %13 = and i32 %10, 1
  %14 = icmp eq i32 %13, 0
  br label %15

15:                                               ; preds = %8, %590
  %16 = phi i32 [ %9, %8 ], [ %597, %590 ]
  %17 = phi ptr [ %11, %8 ], [ %592, %590 ]
  %18 = phi ptr [ %12, %8 ], [ %594, %590 ]
  %19 = load i64, ptr %17, align 8
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 65535
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %115, label %23

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.tree_common, ptr %18, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %27 = icmp eq ptr %25, %26
  br i1 %27, label %115, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = icmp eq ptr %30, %26
  br i1 %31, label %115, label %32

32:                                               ; preds = %28
  %33 = icmp eq i32 %16, 23
  %34 = icmp eq i32 %21, 23
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %18, ptr noundef nonnull %17) #24
  br label %115

38:                                               ; preds = %32
  %39 = load i64, ptr %25, align 8
  %40 = load i64, ptr %30, align 8
  %41 = xor i64 %40, %39
  %42 = and i64 %41, 2097152
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %115

44:                                               ; preds = %38
  %45 = trunc i64 %39 to i32
  %46 = and i32 %45, 65535
  %47 = icmp eq i32 %46, 10
  %48 = icmp eq i32 %46, 12
  %49 = or i1 %47, %48
  %50 = trunc i64 %40 to i32
  %51 = and i32 %50, 65535
  %52 = icmp eq i32 %51, 10
  %53 = icmp eq i32 %51, 12
  %54 = or i1 %52, %53
  %55 = xor i1 %49, %54
  br i1 %55, label %115, label %56

56:                                               ; preds = %44
  %57 = trunc i64 %39 to i16
  switch i16 %57, label %72 [
    i16 10, label %58
    i16 12, label %58
  ]

58:                                               ; preds = %56, %56
  %59 = trunc i64 %40 to i16
  switch i16 %59, label %72 [
    i16 10, label %60
    i16 12, label %60
  ]

60:                                               ; preds = %58, %58
  %61 = getelementptr inbounds %struct.tree_common, ptr %25, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  %63 = load i64, ptr %62, align 8
  %64 = lshr i64 %63, 56
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  %68 = load i64, ptr %67, align 8
  %69 = lshr i64 %68, 56
  %70 = trunc i64 %69 to i32
  %71 = icmp eq i32 %65, %70
  br i1 %71, label %72, label %115

72:                                               ; preds = %58, %56, %60
  %73 = getelementptr inbounds %struct.tree_type, ptr %25, i64 0, i32 6
  %74 = load i32, ptr %73, align 4
  %75 = getelementptr inbounds %struct.tree_type, ptr %30, i64 0, i32 6
  %76 = load i32, ptr %75, align 4
  %77 = xor i32 %76, %74
  %78 = and i32 %77, 1023
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %115

80:                                               ; preds = %72
  %81 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %18) #24
  %82 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %17) #24
  %83 = load i64, ptr %81, align 8
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 65535
  %86 = load i64, ptr %82, align 8
  %87 = trunc i64 %86 to i32
  %88 = and i32 %87, 65535
  %89 = icmp eq i32 %85, %88
  br i1 %89, label %125, label %90

90:                                               ; preds = %80
  %91 = and i64 %83, 65535
  %92 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %91
  %93 = load i32, ptr %92, align 4, !tbaa !17
  %94 = icmp eq i32 %93, 5
  br i1 %94, label %95, label %125

95:                                               ; preds = %90
  %96 = and i64 %86, 65535
  %97 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %96
  %98 = load i32, ptr %97, align 4, !tbaa !17
  %99 = icmp eq i32 %98, 5
  br i1 %99, label %100, label %125

100:                                              ; preds = %95
  %101 = tail call i32 @swap_tree_comparison(i32 noundef %88)
  %102 = load i64, ptr %81, align 8
  %103 = trunc i64 %102 to i32
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, %101
  br i1 %105, label %108, label %106

106:                                              ; preds = %100
  %107 = load i64, ptr %82, align 8
  br label %125

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %112 = load ptr, ptr %111, align 8, !tbaa !17
  %113 = tail call i32 @operand_equal_p(ptr noundef %110, ptr noundef %112, i32 noundef %10)
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %117

115:                                              ; preds = %108, %889, %824, %895, %897, %903, %911, %815, %817, %793, %800, %780, %773, %751, %727, %734, %698, %700, %703, %724, %641, %655, %668, %670, %687, %613, %619, %606, %553, %559, %538, %533, %504, %199, %507, %192, %190, %36, %3, %666, %696, %859, %516, %28, %23, %15, %590, %44, %38, %60, %72, %168, %138, %131, %125, %175, %575, %582, %635, %632, %639, %749, %576, %566, %807, %786, %758, %741, %625, %545, %117
  %116 = phi i32 [ %124, %117 ], [ %552, %545 ], [ %631, %625 ], [ %748, %741 ], [ %765, %758 ], [ %792, %786 ], [ %814, %807 ], [ %37, %36 ], [ 0, %824 ], [ 0, %507 ], [ %198, %192 ], [ %191, %190 ], [ 1, %199 ], [ 1, %504 ], [ %537, %533 ], [ 0, %538 ], [ 0, %553 ], [ %565, %559 ], [ 1, %606 ], [ 0, %619 ], [ 0, %613 ], [ 0, %670 ], [ 0, %668 ], [ 0, %655 ], [ 0, %641 ], [ %689, %687 ], [ 0, %703 ], [ 0, %700 ], [ 0, %698 ], [ %726, %724 ], [ 0, %734 ], [ 0, %727 ], [ 0, %751 ], [ 1, %773 ], [ 0, %780 ], [ 0, %800 ], [ 0, %793 ], [ 0, %817 ], [ 0, %815 ], [ 0, %903 ], [ 0, %897 ], [ 0, %895 ], [ %915, %911 ], [ %894, %889 ], [ 0, %108 ], [ 0, %3 ], [ 0, %666 ], [ 0, %696 ], [ 0, %859 ], [ 0, %516 ], [ 0, %576 ], [ 0, %749 ], [ 0, %639 ], [ 0, %632 ], [ 0, %635 ], [ 0, %582 ], [ 0, %575 ], [ 1, %175 ], [ 0, %125 ], [ 0, %131 ], [ 0, %138 ], [ 0, %168 ], [ 0, %72 ], [ 0, %60 ], [ 0, %38 ], [ 0, %44 ], [ 0, %590 ], [ 0, %15 ], [ 0, %23 ], [ 0, %28 ], [ 0, %566 ]
  ret i32 %116

117:                                              ; preds = %108
  %118 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %119 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %120 = load ptr, ptr %119, align 8, !tbaa !17
  %121 = load ptr, ptr %118, align 8, !tbaa !17
  %122 = tail call i32 @operand_equal_p(ptr noundef %120, ptr noundef %121, i32 noundef %10)
  %123 = icmp ne i32 %122, 0
  %124 = zext i1 %123 to i32
  br label %115

125:                                              ; preds = %106, %95, %90, %80
  %126 = phi i64 [ %107, %106 ], [ %86, %95 ], [ %86, %90 ], [ %86, %80 ]
  %127 = phi i64 [ %102, %106 ], [ %83, %95 ], [ %83, %90 ], [ %83, %80 ]
  %128 = xor i64 %126, %127
  %129 = and i64 %128, 65535
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %115

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.tree_common, ptr %81, i64 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !17
  %134 = load i64, ptr %133, align 8
  %135 = trunc i64 %134 to i32
  %136 = and i32 %135, 65535
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %115, label %138

138:                                              ; preds = %131
  %139 = getelementptr inbounds %struct.tree_common, ptr %82, i64 0, i32 2
  %140 = load ptr, ptr %139, align 8, !tbaa !17
  %141 = load i64, ptr %140, align 8
  %142 = and i64 %141, 65535
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %115, label %144

144:                                              ; preds = %138
  %145 = icmp eq i32 %136, 14
  br i1 %145, label %146, label %150

146:                                              ; preds = %144
  %147 = tail call i32 @vector_type_mode(ptr noundef nonnull %133) #24
  %148 = load ptr, ptr %139, align 8, !tbaa !17
  %149 = load i64, ptr %148, align 8
  br label %155

150:                                              ; preds = %144
  %151 = getelementptr inbounds %struct.tree_type, ptr %133, i64 0, i32 6
  %152 = load i32, ptr %151, align 4
  %153 = lshr i32 %152, 16
  %154 = and i32 %153, 255
  br label %155

155:                                              ; preds = %150, %146
  %156 = phi i64 [ %149, %146 ], [ %141, %150 ]
  %157 = phi ptr [ %148, %146 ], [ %140, %150 ]
  %158 = phi i32 [ %147, %146 ], [ %154, %150 ]
  %159 = and i64 %156, 65535
  %160 = icmp eq i64 %159, 14
  br i1 %160, label %161, label %163

161:                                              ; preds = %155
  %162 = tail call i32 @vector_type_mode(ptr noundef nonnull %157) #24
  br label %168

163:                                              ; preds = %155
  %164 = getelementptr inbounds %struct.tree_type, ptr %157, i64 0, i32 6
  %165 = load i32, ptr %164, align 4
  %166 = lshr i32 %165, 16
  %167 = and i32 %166, 255
  br label %168

168:                                              ; preds = %163, %161
  %169 = phi i32 [ %162, %161 ], [ %167, %163 ]
  %170 = icmp eq i32 %158, %169
  br i1 %170, label %171, label %115

171:                                              ; preds = %168
  %172 = icmp eq ptr %81, %82
  %173 = and i1 %14, %172
  %174 = load i64, ptr %81, align 8
  br i1 %173, label %175, label %181

175:                                              ; preds = %171
  %176 = and i64 %174, 65535
  %177 = icmp eq i64 %176, 120
  %178 = and i64 %174, 65536
  %179 = icmp eq i64 %178, 0
  %180 = or i1 %177, %179
  br i1 %180, label %115, label %181

181:                                              ; preds = %175, %171
  %182 = and i64 %174, 131072
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %575, label %184

184:                                              ; preds = %181
  %185 = load i64, ptr %82, align 8
  %186 = and i64 %185, 131072
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %575, label %188

188:                                              ; preds = %184
  %189 = trunc i64 %174 to i16
  switch i16 %189, label %575 [
    i16 23, label %190
    i16 25, label %192
    i16 24, label %199
    i16 27, label %508
    i16 26, label %538
    i16 28, label %553
    i16 121, label %566
  ]

190:                                              ; preds = %188
  %191 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %81, ptr noundef nonnull %82) #24
  br label %115

192:                                              ; preds = %188
  %193 = getelementptr inbounds %struct.tree_fixed_cst, ptr %81, i64 0, i32 1
  %194 = load ptr, ptr %193, align 8, !tbaa !17
  %195 = getelementptr inbounds %struct.tree_fixed_cst, ptr %82, i64 0, i32 1
  %196 = load ptr, ptr %195, align 8, !tbaa !17
  %197 = tail call zeroext i8 @fixed_identical(ptr noundef %194, ptr noundef %196) #24
  %198 = zext i8 %197 to i32
  br label %115

199:                                              ; preds = %188
  %200 = getelementptr inbounds %struct.tree_real_cst, ptr %81, i64 0, i32 1
  %201 = load ptr, ptr %200, align 8, !tbaa !17
  %202 = getelementptr inbounds %struct.tree_real_cst, ptr %82, i64 0, i32 1
  %203 = load ptr, ptr %202, align 8, !tbaa !17
  %204 = tail call zeroext i8 @real_identical(ptr noundef %201, ptr noundef %203) #24
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %115

206:                                              ; preds = %199
  %207 = load ptr, ptr %132, align 8, !tbaa !17
  %208 = load i64, ptr %207, align 8
  %209 = and i64 %208, 65535
  %210 = icmp eq i64 %209, 14
  br i1 %210, label %211, label %214

211:                                              ; preds = %206
  %212 = tail call i32 @vector_type_mode(ptr noundef nonnull %207) #24
  %213 = load ptr, ptr %132, align 8, !tbaa !17
  br label %219

214:                                              ; preds = %206
  %215 = getelementptr inbounds %struct.tree_type, ptr %207, i64 0, i32 6
  %216 = load i32, ptr %215, align 4
  %217 = lshr i32 %216, 16
  %218 = and i32 %217, 255
  br label %219

219:                                              ; preds = %214, %211
  %220 = phi ptr [ %213, %211 ], [ %207, %214 ]
  %221 = phi i32 [ %212, %211 ], [ %218, %214 ]
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %222
  %224 = load i8, ptr %223, align 1, !tbaa !17
  %225 = icmp eq i8 %224, 8
  br i1 %225, label %283, label %226

226:                                              ; preds = %219
  %227 = load i64, ptr %220, align 8
  %228 = and i64 %227, 65535
  %229 = icmp eq i64 %228, 14
  br i1 %229, label %230, label %233

230:                                              ; preds = %226
  %231 = tail call i32 @vector_type_mode(ptr noundef nonnull %220) #24
  %232 = load ptr, ptr %132, align 8, !tbaa !17
  br label %238

233:                                              ; preds = %226
  %234 = getelementptr inbounds %struct.tree_type, ptr %220, i64 0, i32 6
  %235 = load i32, ptr %234, align 4
  %236 = lshr i32 %235, 16
  %237 = and i32 %236, 255
  br label %238

238:                                              ; preds = %233, %230
  %239 = phi ptr [ %232, %230 ], [ %220, %233 ]
  %240 = phi i32 [ %231, %230 ], [ %237, %233 ]
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %241
  %243 = load i8, ptr %242, align 1, !tbaa !17
  %244 = icmp eq i8 %243, 9
  br i1 %244, label %283, label %245

245:                                              ; preds = %238
  %246 = load i64, ptr %239, align 8
  %247 = and i64 %246, 65535
  %248 = icmp eq i64 %247, 14
  br i1 %248, label %249, label %252

249:                                              ; preds = %245
  %250 = tail call i32 @vector_type_mode(ptr noundef nonnull %239) #24
  %251 = load ptr, ptr %132, align 8, !tbaa !17
  br label %257

252:                                              ; preds = %245
  %253 = getelementptr inbounds %struct.tree_type, ptr %239, i64 0, i32 6
  %254 = load i32, ptr %253, align 4
  %255 = lshr i32 %254, 16
  %256 = and i32 %255, 255
  br label %257

257:                                              ; preds = %252, %249
  %258 = phi ptr [ %251, %249 ], [ %239, %252 ]
  %259 = phi i32 [ %250, %249 ], [ %256, %252 ]
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %260
  %262 = load i8, ptr %261, align 1, !tbaa !17
  %263 = icmp eq i8 %262, 11
  br i1 %263, label %283, label %264

264:                                              ; preds = %257
  %265 = load i64, ptr %258, align 8
  %266 = and i64 %265, 65535
  %267 = icmp eq i64 %266, 14
  br i1 %267, label %268, label %270

268:                                              ; preds = %264
  %269 = tail call i32 @vector_type_mode(ptr noundef nonnull %258) #24
  br label %275

270:                                              ; preds = %264
  %271 = getelementptr inbounds %struct.tree_type, ptr %258, i64 0, i32 6
  %272 = load i32, ptr %271, align 4
  %273 = lshr i32 %272, 16
  %274 = and i32 %273, 255
  br label %275

275:                                              ; preds = %270, %268
  %276 = phi i32 [ %269, %268 ], [ %274, %270 ]
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %277
  %279 = load i8, ptr %278, align 1, !tbaa !17
  %280 = icmp eq i8 %279, 17
  br i1 %280, label %281, label %501

281:                                              ; preds = %275
  %282 = load ptr, ptr %132, align 8, !tbaa !17
  br label %283

283:                                              ; preds = %281, %257, %238, %219
  %284 = phi ptr [ %282, %281 ], [ %258, %257 ], [ %239, %238 ], [ %220, %219 ]
  %285 = load i64, ptr %284, align 8
  %286 = and i64 %285, 65535
  %287 = icmp eq i64 %286, 14
  br i1 %287, label %288, label %291

288:                                              ; preds = %283
  %289 = tail call i32 @vector_type_mode(ptr noundef nonnull %284) #24
  %290 = load ptr, ptr %132, align 8, !tbaa !17
  br label %296

291:                                              ; preds = %283
  %292 = getelementptr inbounds %struct.tree_type, ptr %284, i64 0, i32 6
  %293 = load i32, ptr %292, align 4
  %294 = lshr i32 %293, 16
  %295 = and i32 %294, 255
  br label %296

296:                                              ; preds = %291, %288
  %297 = phi ptr [ %290, %288 ], [ %284, %291 ]
  %298 = phi i32 [ %289, %288 ], [ %295, %291 ]
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %299
  %301 = load i8, ptr %300, align 1, !tbaa !17
  %302 = icmp eq i8 %301, 8
  br i1 %302, label %322, label %303

303:                                              ; preds = %296
  %304 = load i64, ptr %297, align 8
  %305 = and i64 %304, 65535
  %306 = icmp eq i64 %305, 14
  br i1 %306, label %307, label %310

307:                                              ; preds = %303
  %308 = tail call i32 @vector_type_mode(ptr noundef nonnull %297) #24
  %309 = load ptr, ptr %132, align 8, !tbaa !17
  br label %315

310:                                              ; preds = %303
  %311 = getelementptr inbounds %struct.tree_type, ptr %297, i64 0, i32 6
  %312 = load i32, ptr %311, align 4
  %313 = lshr i32 %312, 16
  %314 = and i32 %313, 255
  br label %315

315:                                              ; preds = %310, %307
  %316 = phi ptr [ %309, %307 ], [ %297, %310 ]
  %317 = phi i32 [ %308, %307 ], [ %314, %310 ]
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %318
  %320 = load i8, ptr %319, align 1, !tbaa !17
  %321 = icmp eq i8 %320, 9
  br i1 %321, label %322, label %334

322:                                              ; preds = %315, %296
  %323 = phi ptr [ %316, %315 ], [ %297, %296 ]
  %324 = load i64, ptr %323, align 8
  %325 = and i64 %324, 65535
  %326 = icmp eq i64 %325, 14
  br i1 %326, label %327, label %329

327:                                              ; preds = %322
  %328 = tail call i32 @vector_type_mode(ptr noundef nonnull %323) #24
  br label %351

329:                                              ; preds = %322
  %330 = getelementptr inbounds %struct.tree_type, ptr %323, i64 0, i32 6
  %331 = load i32, ptr %330, align 4
  %332 = lshr i32 %331, 16
  %333 = and i32 %332, 255
  br label %351

334:                                              ; preds = %315
  %335 = load i64, ptr %316, align 8
  %336 = and i64 %335, 65535
  %337 = icmp eq i64 %336, 14
  br i1 %337, label %338, label %340

338:                                              ; preds = %334
  %339 = tail call i32 @vector_type_mode(ptr noundef nonnull %316) #24
  br label %345

340:                                              ; preds = %334
  %341 = getelementptr inbounds %struct.tree_type, ptr %316, i64 0, i32 6
  %342 = load i32, ptr %341, align 4
  %343 = lshr i32 %342, 16
  %344 = and i32 %343, 255
  br label %345

345:                                              ; preds = %340, %338
  %346 = phi i32 [ %339, %338 ], [ %344, %340 ]
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %347
  %349 = load i8, ptr %348, align 1, !tbaa !17
  %350 = zext i8 %349 to i32
  br label %351

351:                                              ; preds = %327, %329, %345
  %352 = phi i32 [ %350, %345 ], [ %328, %327 ], [ %333, %329 ]
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %353
  %355 = load i8, ptr %354, align 1, !tbaa !17
  %356 = icmp eq i8 %355, 9
  %357 = load ptr, ptr %132, align 8, !tbaa !17
  %358 = load i64, ptr %357, align 8
  %359 = and i64 %358, 65535
  %360 = icmp eq i64 %359, 14
  br i1 %356, label %361, label %425

361:                                              ; preds = %351
  br i1 %360, label %362, label %365

362:                                              ; preds = %361
  %363 = tail call i32 @vector_type_mode(ptr noundef nonnull %357) #24
  %364 = load ptr, ptr %132, align 8, !tbaa !17
  br label %370

365:                                              ; preds = %361
  %366 = getelementptr inbounds %struct.tree_type, ptr %357, i64 0, i32 6
  %367 = load i32, ptr %366, align 4
  %368 = lshr i32 %367, 16
  %369 = and i32 %368, 255
  br label %370

370:                                              ; preds = %365, %362
  %371 = phi ptr [ %364, %362 ], [ %357, %365 ]
  %372 = phi i32 [ %363, %362 ], [ %369, %365 ]
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %373
  %375 = load i8, ptr %374, align 1, !tbaa !17
  %376 = icmp eq i8 %375, 8
  br i1 %376, label %396, label %377

377:                                              ; preds = %370
  %378 = load i64, ptr %371, align 8
  %379 = and i64 %378, 65535
  %380 = icmp eq i64 %379, 14
  br i1 %380, label %381, label %384

381:                                              ; preds = %377
  %382 = tail call i32 @vector_type_mode(ptr noundef nonnull %371) #24
  %383 = load ptr, ptr %132, align 8, !tbaa !17
  br label %389

384:                                              ; preds = %377
  %385 = getelementptr inbounds %struct.tree_type, ptr %371, i64 0, i32 6
  %386 = load i32, ptr %385, align 4
  %387 = lshr i32 %386, 16
  %388 = and i32 %387, 255
  br label %389

389:                                              ; preds = %384, %381
  %390 = phi ptr [ %383, %381 ], [ %371, %384 ]
  %391 = phi i32 [ %382, %381 ], [ %388, %384 ]
  %392 = zext i32 %391 to i64
  %393 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %392
  %394 = load i8, ptr %393, align 1, !tbaa !17
  %395 = icmp eq i8 %394, 9
  br i1 %395, label %396, label %408

396:                                              ; preds = %389, %370
  %397 = phi ptr [ %390, %389 ], [ %371, %370 ]
  %398 = load i64, ptr %397, align 8
  %399 = and i64 %398, 65535
  %400 = icmp eq i64 %399, 14
  br i1 %400, label %401, label %403

401:                                              ; preds = %396
  %402 = tail call i32 @vector_type_mode(ptr noundef nonnull %397) #24
  br label %489

403:                                              ; preds = %396
  %404 = getelementptr inbounds %struct.tree_type, ptr %397, i64 0, i32 6
  %405 = load i32, ptr %404, align 4
  %406 = lshr i32 %405, 16
  %407 = and i32 %406, 255
  br label %489

408:                                              ; preds = %389
  %409 = load i64, ptr %390, align 8
  %410 = and i64 %409, 65535
  %411 = icmp eq i64 %410, 14
  br i1 %411, label %412, label %414

412:                                              ; preds = %408
  %413 = tail call i32 @vector_type_mode(ptr noundef nonnull %390) #24
  br label %419

414:                                              ; preds = %408
  %415 = getelementptr inbounds %struct.tree_type, ptr %390, i64 0, i32 6
  %416 = load i32, ptr %415, align 4
  %417 = lshr i32 %416, 16
  %418 = and i32 %417, 255
  br label %419

419:                                              ; preds = %414, %412
  %420 = phi i32 [ %413, %412 ], [ %418, %414 ]
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %421
  %423 = load i8, ptr %422, align 1, !tbaa !17
  %424 = zext i8 %423 to i32
  br label %489

425:                                              ; preds = %351
  br i1 %360, label %426, label %429

426:                                              ; preds = %425
  %427 = tail call i32 @vector_type_mode(ptr noundef nonnull %357) #24
  %428 = load ptr, ptr %132, align 8, !tbaa !17
  br label %434

429:                                              ; preds = %425
  %430 = getelementptr inbounds %struct.tree_type, ptr %357, i64 0, i32 6
  %431 = load i32, ptr %430, align 4
  %432 = lshr i32 %431, 16
  %433 = and i32 %432, 255
  br label %434

434:                                              ; preds = %429, %426
  %435 = phi ptr [ %428, %426 ], [ %357, %429 ]
  %436 = phi i32 [ %427, %426 ], [ %433, %429 ]
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %437
  %439 = load i8, ptr %438, align 1, !tbaa !17
  %440 = icmp eq i8 %439, 8
  br i1 %440, label %460, label %441

441:                                              ; preds = %434
  %442 = load i64, ptr %435, align 8
  %443 = and i64 %442, 65535
  %444 = icmp eq i64 %443, 14
  br i1 %444, label %445, label %448

445:                                              ; preds = %441
  %446 = tail call i32 @vector_type_mode(ptr noundef nonnull %435) #24
  %447 = load ptr, ptr %132, align 8, !tbaa !17
  br label %453

448:                                              ; preds = %441
  %449 = getelementptr inbounds %struct.tree_type, ptr %435, i64 0, i32 6
  %450 = load i32, ptr %449, align 4
  %451 = lshr i32 %450, 16
  %452 = and i32 %451, 255
  br label %453

453:                                              ; preds = %448, %445
  %454 = phi ptr [ %447, %445 ], [ %435, %448 ]
  %455 = phi i32 [ %446, %445 ], [ %452, %448 ]
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %456
  %458 = load i8, ptr %457, align 1, !tbaa !17
  %459 = icmp eq i8 %458, 9
  br i1 %459, label %460, label %472

460:                                              ; preds = %453, %434
  %461 = phi ptr [ %454, %453 ], [ %435, %434 ]
  %462 = load i64, ptr %461, align 8
  %463 = and i64 %462, 65535
  %464 = icmp eq i64 %463, 14
  br i1 %464, label %465, label %467

465:                                              ; preds = %460
  %466 = tail call i32 @vector_type_mode(ptr noundef nonnull %461) #24
  br label %489

467:                                              ; preds = %460
  %468 = getelementptr inbounds %struct.tree_type, ptr %461, i64 0, i32 6
  %469 = load i32, ptr %468, align 4
  %470 = lshr i32 %469, 16
  %471 = and i32 %470, 255
  br label %489

472:                                              ; preds = %453
  %473 = load i64, ptr %454, align 8
  %474 = and i64 %473, 65535
  %475 = icmp eq i64 %474, 14
  br i1 %475, label %476, label %478

476:                                              ; preds = %472
  %477 = tail call i32 @vector_type_mode(ptr noundef nonnull %454) #24
  br label %483

478:                                              ; preds = %472
  %479 = getelementptr inbounds %struct.tree_type, ptr %454, i64 0, i32 6
  %480 = load i32, ptr %479, align 4
  %481 = lshr i32 %480, 16
  %482 = and i32 %481, 255
  br label %483

483:                                              ; preds = %478, %476
  %484 = phi i32 [ %477, %476 ], [ %482, %478 ]
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %485
  %487 = load i8, ptr %486, align 1, !tbaa !17
  %488 = zext i8 %487 to i32
  br label %489

489:                                              ; preds = %483, %467, %465, %419, %403, %401
  %490 = phi i32 [ %424, %419 ], [ %402, %401 ], [ %407, %403 ], [ %488, %483 ], [ %466, %465 ], [ %471, %467 ]
  %491 = add i32 %490, -38
  %492 = zext i32 %491 to i64
  %493 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %492
  %494 = load ptr, ptr %493, align 8, !tbaa !6
  %495 = getelementptr inbounds %struct.real_format, ptr %494, i64 0, i32 14
  %496 = load i8, ptr %495, align 1, !tbaa !37
  %497 = icmp ne i8 %496, 0
  %498 = load i32, ptr @flag_signed_zeros, align 4
  %499 = icmp ne i32 %498, 0
  %500 = select i1 %497, i1 %499, i1 false
  br i1 %500, label %507, label %501

501:                                              ; preds = %489, %275
  %502 = tail call i32 @real_zerop(ptr noundef nonnull %81) #24
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %507, label %504

504:                                              ; preds = %501
  %505 = tail call i32 @real_zerop(ptr noundef nonnull %82) #24
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %507, label %115

507:                                              ; preds = %501, %504, %489
  br label %115

508:                                              ; preds = %188
  %509 = getelementptr inbounds %struct.tree_vector, ptr %81, i64 0, i32 1
  %510 = getelementptr inbounds %struct.tree_vector, ptr %82, i64 0, i32 1
  %511 = load ptr, ptr %510, align 8, !tbaa !17
  %512 = load ptr, ptr %509, align 8, !tbaa !17
  %513 = icmp ne ptr %512, null
  %514 = icmp ne ptr %511, null
  %515 = select i1 %513, i1 %514, i1 false
  br i1 %515, label %516, label %533

516:                                              ; preds = %508, %525
  %517 = phi ptr [ %529, %525 ], [ %512, %508 ]
  %518 = phi ptr [ %528, %525 ], [ %511, %508 ]
  %519 = getelementptr inbounds %struct.tree_list, ptr %517, i64 0, i32 2
  %520 = load ptr, ptr %519, align 8, !tbaa !17
  %521 = getelementptr inbounds %struct.tree_list, ptr %518, i64 0, i32 2
  %522 = load ptr, ptr %521, align 8, !tbaa !17
  %523 = tail call i32 @operand_equal_p(ptr noundef %520, ptr noundef %522, i32 noundef %10)
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %115, label %525

525:                                              ; preds = %516
  %526 = getelementptr inbounds %struct.tree_common, ptr %517, i64 0, i32 1
  %527 = getelementptr inbounds %struct.tree_common, ptr %518, i64 0, i32 1
  %528 = load ptr, ptr %527, align 8, !tbaa !17
  %529 = load ptr, ptr %526, align 8, !tbaa !17
  %530 = icmp ne ptr %529, null
  %531 = icmp ne ptr %528, null
  %532 = select i1 %530, i1 %531, i1 false
  br i1 %532, label %516, label %533, !llvm.loop !38

533:                                              ; preds = %525, %508
  %534 = phi ptr [ %511, %508 ], [ %528, %525 ]
  %535 = phi ptr [ %512, %508 ], [ %529, %525 ]
  %536 = icmp eq ptr %535, %534
  %537 = zext i1 %536 to i32
  br label %115

538:                                              ; preds = %188
  %539 = getelementptr inbounds %struct.tree_complex, ptr %81, i64 0, i32 1
  %540 = load ptr, ptr %539, align 8, !tbaa !17
  %541 = getelementptr inbounds %struct.tree_complex, ptr %82, i64 0, i32 1
  %542 = load ptr, ptr %541, align 8, !tbaa !17
  %543 = tail call i32 @operand_equal_p(ptr noundef %540, ptr noundef %542, i32 noundef %10)
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %115, label %545

545:                                              ; preds = %538
  %546 = getelementptr inbounds %struct.tree_complex, ptr %81, i64 0, i32 2
  %547 = load ptr, ptr %546, align 8, !tbaa !17
  %548 = getelementptr inbounds %struct.tree_complex, ptr %82, i64 0, i32 2
  %549 = load ptr, ptr %548, align 8, !tbaa !17
  %550 = tail call i32 @operand_equal_p(ptr noundef %547, ptr noundef %549, i32 noundef %10)
  %551 = icmp ne i32 %550, 0
  %552 = zext i1 %551 to i32
  br label %115

553:                                              ; preds = %188
  %554 = getelementptr inbounds %struct.tree_string, ptr %81, i64 0, i32 1
  %555 = load i32, ptr %554, align 8, !tbaa !17
  %556 = getelementptr inbounds %struct.tree_string, ptr %82, i64 0, i32 1
  %557 = load i32, ptr %556, align 8, !tbaa !17
  %558 = icmp eq i32 %555, %557
  br i1 %558, label %559, label %115

559:                                              ; preds = %553
  %560 = getelementptr inbounds %struct.tree_string, ptr %81, i64 0, i32 2
  %561 = getelementptr inbounds %struct.tree_string, ptr %82, i64 0, i32 2
  %562 = sext i32 %555 to i64
  %563 = tail call i32 @bcmp(ptr nonnull %560, ptr nonnull %561, i64 %562)
  %564 = icmp eq i32 %563, 0
  %565 = zext i1 %564 to i32
  br label %115

566:                                              ; preds = %188
  %567 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %568 = load ptr, ptr %567, align 8, !tbaa !17
  %569 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %570 = load ptr, ptr %569, align 8, !tbaa !17
  %571 = load i64, ptr %568, align 8
  %572 = trunc i64 %571 to i32
  %573 = and i32 %572, 65535
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %115, label %8

575:                                              ; preds = %188, %184, %181
  br i1 %14, label %576, label %115

576:                                              ; preds = %575
  %577 = and i64 %174, 65535
  %578 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %577
  %579 = load i32, ptr %578, align 4, !tbaa !17
  switch i32 %579, label %115 [
    i32 6, label %580
    i32 5, label %599
    i32 7, label %599
    i32 4, label %632
    i32 10, label %749
    i32 9, label %815
    i32 3, label %895
  ]

580:                                              ; preds = %576
  %581 = trunc i64 %174 to i16
  switch i16 %581, label %590 [
    i16 116, label %582
    i16 113, label %582
    i16 77, label %582
  ]

582:                                              ; preds = %580, %580, %580
  %583 = load ptr, ptr %132, align 8, !tbaa !17
  %584 = load i64, ptr %583, align 8
  %585 = load ptr, ptr %139, align 8, !tbaa !17
  %586 = load i64, ptr %585, align 8
  %587 = xor i64 %586, %584
  %588 = and i64 %587, 2097152
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %115

590:                                              ; preds = %749, %749, %639, %639, %639, %639, %639, %582, %580
  %591 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %592 = load ptr, ptr %591, align 8, !tbaa !17
  %593 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %594 = load ptr, ptr %593, align 8, !tbaa !17
  %595 = load i64, ptr %594, align 8
  %596 = trunc i64 %595 to i32
  %597 = and i32 %596, 65535
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %115, label %15

599:                                              ; preds = %576, %576
  %600 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %601 = load ptr, ptr %600, align 8, !tbaa !17
  %602 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %603 = load ptr, ptr %602, align 8, !tbaa !17
  %604 = tail call i32 @operand_equal_p(ptr noundef %601, ptr noundef %603, i32 noundef %10)
  %605 = icmp eq i32 %604, 0
  br i1 %605, label %613, label %606

606:                                              ; preds = %599
  %607 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %608 = load ptr, ptr %607, align 8, !tbaa !17
  %609 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %610 = load ptr, ptr %609, align 8, !tbaa !17
  %611 = tail call i32 @operand_equal_p(ptr noundef %608, ptr noundef %610, i32 noundef %10)
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %613, label %115

613:                                              ; preds = %606, %599
  %614 = load i64, ptr %81, align 8
  %615 = trunc i64 %614 to i32
  %616 = and i32 %615, 65535
  %617 = tail call zeroext i8 @commutative_tree_code(i32 noundef %616) #24
  %618 = icmp eq i8 %617, 0
  br i1 %618, label %115, label %619

619:                                              ; preds = %613
  %620 = load ptr, ptr %600, align 8, !tbaa !17
  %621 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %622 = load ptr, ptr %621, align 8, !tbaa !17
  %623 = tail call i32 @operand_equal_p(ptr noundef %620, ptr noundef %622, i32 noundef %10)
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %115, label %625

625:                                              ; preds = %619
  %626 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %627 = load ptr, ptr %626, align 8, !tbaa !17
  %628 = load ptr, ptr %602, align 8, !tbaa !17
  %629 = tail call i32 @operand_equal_p(ptr noundef %627, ptr noundef %628, i32 noundef %10)
  %630 = icmp ne i32 %629, 0
  %631 = zext i1 %630 to i32
  br label %115

632:                                              ; preds = %576
  %633 = and i64 %174, 65536
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %635, label %115

635:                                              ; preds = %632
  %636 = load i64, ptr %82, align 8
  %637 = and i64 %636, 65536
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %639, label %115

639:                                              ; preds = %635
  %640 = trunc i64 %174 to i16
  switch i16 %640, label %115 [
    i16 47, label %590
    i16 48, label %590
    i16 49, label %590
    i16 43, label %590
    i16 44, label %590
    i16 45, label %641
    i16 46, label %641
    i16 41, label %690
    i16 42, label %727
  ]

641:                                              ; preds = %639, %639
  %642 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %643 = load ptr, ptr %642, align 8, !tbaa !17
  %644 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %645 = load ptr, ptr %644, align 8, !tbaa !17
  %646 = tail call i32 @operand_equal_p(ptr noundef %643, ptr noundef %645, i32 noundef %10)
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %115, label %648

648:                                              ; preds = %641
  %649 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %650 = load ptr, ptr %649, align 8, !tbaa !17
  %651 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %652 = load ptr, ptr %651, align 8, !tbaa !17
  %653 = tail call i32 @tree_int_cst_equal(ptr noundef %650, ptr noundef %652) #24
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %655, label %660

655:                                              ; preds = %648
  %656 = load ptr, ptr %649, align 8, !tbaa !17
  %657 = load ptr, ptr %651, align 8, !tbaa !17
  %658 = tail call i32 @operand_equal_p(ptr noundef %656, ptr noundef %657, i32 noundef %10)
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %115, label %660

660:                                              ; preds = %655, %648
  %661 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1, i32 0, i32 1
  %662 = load ptr, ptr %661, align 8, !tbaa !17
  %663 = icmp eq ptr %662, null
  %664 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1, i32 0, i32 1
  %665 = load ptr, ptr %664, align 8, !tbaa !17
  br i1 %663, label %668, label %666

666:                                              ; preds = %660
  %667 = icmp eq ptr %665, null
  br i1 %667, label %115, label %670

668:                                              ; preds = %660
  %669 = icmp eq ptr %662, %665
  br i1 %669, label %673, label %115

670:                                              ; preds = %666
  %671 = tail call i32 @operand_equal_p(ptr noundef nonnull %662, ptr noundef nonnull %665, i32 noundef %10)
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %115, label %673

673:                                              ; preds = %670, %668
  %674 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1, i32 0, i32 2
  %675 = load ptr, ptr %674, align 8, !tbaa !17
  %676 = icmp eq ptr %675, null
  %677 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1, i32 0, i32 2
  %678 = load ptr, ptr %677, align 8, !tbaa !17
  br i1 %676, label %681, label %679

679:                                              ; preds = %673
  %680 = icmp eq ptr %678, null
  br i1 %680, label %681, label %684

681:                                              ; preds = %673, %679
  %682 = phi ptr [ null, %679 ], [ %678, %673 ]
  %683 = icmp eq ptr %675, %682
  br label %687

684:                                              ; preds = %679
  %685 = tail call i32 @operand_equal_p(ptr noundef nonnull %675, ptr noundef nonnull %678, i32 noundef %10)
  %686 = icmp ne i32 %685, 0
  br label %687

687:                                              ; preds = %684, %681
  %688 = phi i1 [ %683, %681 ], [ %686, %684 ]
  %689 = zext i1 %688 to i32
  br label %115

690:                                              ; preds = %639
  %691 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %692 = load ptr, ptr %691, align 8, !tbaa !17
  %693 = icmp eq ptr %692, null
  %694 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %695 = load ptr, ptr %694, align 8, !tbaa !17
  br i1 %693, label %698, label %696

696:                                              ; preds = %690
  %697 = icmp eq ptr %695, null
  br i1 %697, label %115, label %700

698:                                              ; preds = %690
  %699 = icmp eq ptr %692, %695
  br i1 %699, label %703, label %115

700:                                              ; preds = %696
  %701 = tail call i32 @operand_equal_p(ptr noundef nonnull %692, ptr noundef nonnull %695, i32 noundef %10)
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %115, label %703

703:                                              ; preds = %700, %698
  %704 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %705 = load ptr, ptr %704, align 8, !tbaa !17
  %706 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %707 = load ptr, ptr %706, align 8, !tbaa !17
  %708 = tail call i32 @operand_equal_p(ptr noundef %705, ptr noundef %707, i32 noundef %10)
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %115, label %710

710:                                              ; preds = %703
  %711 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1, i32 0, i32 1
  %712 = load ptr, ptr %711, align 8, !tbaa !17
  %713 = icmp eq ptr %712, null
  %714 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1, i32 0, i32 1
  %715 = load ptr, ptr %714, align 8, !tbaa !17
  br i1 %713, label %718, label %716

716:                                              ; preds = %710
  %717 = icmp eq ptr %715, null
  br i1 %717, label %718, label %721

718:                                              ; preds = %710, %716
  %719 = phi ptr [ null, %716 ], [ %715, %710 ]
  %720 = icmp eq ptr %712, %719
  br label %724

721:                                              ; preds = %716
  %722 = tail call i32 @operand_equal_p(ptr noundef nonnull %712, ptr noundef nonnull %715, i32 noundef %10)
  %723 = icmp ne i32 %722, 0
  br label %724

724:                                              ; preds = %721, %718
  %725 = phi i1 [ %720, %718 ], [ %723, %721 ]
  %726 = zext i1 %725 to i32
  br label %115

727:                                              ; preds = %639
  %728 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %729 = load ptr, ptr %728, align 8, !tbaa !17
  %730 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %731 = load ptr, ptr %730, align 8, !tbaa !17
  %732 = tail call i32 @operand_equal_p(ptr noundef %729, ptr noundef %731, i32 noundef %10)
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %115, label %734

734:                                              ; preds = %727
  %735 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %736 = load ptr, ptr %735, align 8, !tbaa !17
  %737 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %738 = load ptr, ptr %737, align 8, !tbaa !17
  %739 = tail call i32 @operand_equal_p(ptr noundef %736, ptr noundef %738, i32 noundef %10)
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %115, label %741

741:                                              ; preds = %734
  %742 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1, i32 0, i32 1
  %743 = load ptr, ptr %742, align 8, !tbaa !17
  %744 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1, i32 0, i32 1
  %745 = load ptr, ptr %744, align 8, !tbaa !17
  %746 = tail call i32 @operand_equal_p(ptr noundef %743, ptr noundef %745, i32 noundef %10)
  %747 = icmp ne i32 %746, 0
  %748 = zext i1 %747 to i32
  br label %115

749:                                              ; preds = %576
  %750 = trunc i64 %174 to i16
  switch i16 %750, label %115 [
    i16 121, label %590
    i16 96, label %590
    i16 91, label %751
    i16 92, label %751
    i16 93, label %766
    i16 94, label %766
    i16 95, label %766
    i16 56, label %793
  ]

751:                                              ; preds = %749, %749
  %752 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %753 = load ptr, ptr %752, align 8, !tbaa !17
  %754 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %755 = load ptr, ptr %754, align 8, !tbaa !17
  %756 = tail call i32 @operand_equal_p(ptr noundef %753, ptr noundef %755, i32 noundef %10)
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %115, label %758

758:                                              ; preds = %751
  %759 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %760 = load ptr, ptr %759, align 8, !tbaa !17
  %761 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %762 = load ptr, ptr %761, align 8, !tbaa !17
  %763 = tail call i32 @operand_equal_p(ptr noundef %760, ptr noundef %762, i32 noundef %10)
  %764 = icmp ne i32 %763, 0
  %765 = zext i1 %764 to i32
  br label %115

766:                                              ; preds = %749, %749, %749
  %767 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %768 = load ptr, ptr %767, align 8, !tbaa !17
  %769 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %770 = load ptr, ptr %769, align 8, !tbaa !17
  %771 = tail call i32 @operand_equal_p(ptr noundef %768, ptr noundef %770, i32 noundef %10)
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %780, label %773

773:                                              ; preds = %766
  %774 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %775 = load ptr, ptr %774, align 8, !tbaa !17
  %776 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %777 = load ptr, ptr %776, align 8, !tbaa !17
  %778 = tail call i32 @operand_equal_p(ptr noundef %775, ptr noundef %777, i32 noundef %10)
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %115

780:                                              ; preds = %773, %766
  %781 = load ptr, ptr %767, align 8, !tbaa !17
  %782 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %783 = load ptr, ptr %782, align 8, !tbaa !17
  %784 = tail call i32 @operand_equal_p(ptr noundef %781, ptr noundef %783, i32 noundef %10)
  %785 = icmp eq i32 %784, 0
  br i1 %785, label %115, label %786

786:                                              ; preds = %780
  %787 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %788 = load ptr, ptr %787, align 8, !tbaa !17
  %789 = load ptr, ptr %769, align 8, !tbaa !17
  %790 = tail call i32 @operand_equal_p(ptr noundef %788, ptr noundef %789, i32 noundef %10)
  %791 = icmp ne i32 %790, 0
  %792 = zext i1 %791 to i32
  br label %115

793:                                              ; preds = %749
  %794 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %795 = load ptr, ptr %794, align 8, !tbaa !17
  %796 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %797 = load ptr, ptr %796, align 8, !tbaa !17
  %798 = tail call i32 @operand_equal_p(ptr noundef %795, ptr noundef %797, i32 noundef %10)
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %115, label %800

800:                                              ; preds = %793
  %801 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %802 = load ptr, ptr %801, align 8, !tbaa !17
  %803 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %804 = load ptr, ptr %803, align 8, !tbaa !17
  %805 = tail call i32 @operand_equal_p(ptr noundef %802, ptr noundef %804, i32 noundef %10)
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %115, label %807

807:                                              ; preds = %800
  %808 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1, i32 0, i32 1
  %809 = load ptr, ptr %808, align 8, !tbaa !17
  %810 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1, i32 0, i32 1
  %811 = load ptr, ptr %810, align 8, !tbaa !17
  %812 = tail call i32 @operand_equal_p(ptr noundef %809, ptr noundef %811, i32 noundef %10)
  %813 = icmp ne i32 %812, 0
  %814 = zext i1 %813 to i32
  br label %115

815:                                              ; preds = %576
  %816 = icmp eq i64 %577, 59
  br i1 %816, label %817, label %115

817:                                              ; preds = %815
  %818 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 1
  %819 = load ptr, ptr %818, align 8, !tbaa !17
  %820 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 1
  %821 = load ptr, ptr %820, align 8, !tbaa !17
  %822 = tail call i32 @operand_equal_p(ptr noundef %819, ptr noundef %821, i32 noundef %10)
  %823 = icmp eq i32 %822, 0
  br i1 %823, label %115, label %824

824:                                              ; preds = %817
  %825 = tail call i32 @call_expr_flags(ptr noundef nonnull %81) #24
  %826 = and i32 %10, 2
  %827 = or i32 %826, 1
  %828 = and i32 %825, %827
  %829 = icmp eq i32 %828, 0
  br i1 %829, label %115, label %830

830:                                              ; preds = %824
  %831 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3
  %832 = load ptr, ptr %831, align 8, !tbaa !17
  %833 = getelementptr inbounds %struct.tree_int_cst, ptr %832, i64 0, i32 1
  %834 = load i64, ptr %833, align 8, !tbaa !17
  %835 = trunc i64 %834 to i32
  %836 = add nsw i32 %835, -3
  %837 = icmp sgt i32 %835, 3
  br i1 %837, label %838, label %841

838:                                              ; preds = %830
  %839 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3, i64 3
  %840 = load ptr, ptr %839, align 8, !tbaa !17
  br label %841

841:                                              ; preds = %830, %838
  %842 = phi i32 [ 1, %838 ], [ 0, %830 ]
  %843 = phi ptr [ %840, %838 ], [ null, %830 ]
  %844 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3
  %845 = load ptr, ptr %844, align 8, !tbaa !17
  %846 = getelementptr inbounds %struct.tree_int_cst, ptr %845, i64 0, i32 1
  %847 = load i64, ptr %846, align 8, !tbaa !17
  %848 = trunc i64 %847 to i32
  %849 = add nsw i32 %848, -3
  %850 = icmp sgt i32 %848, 3
  br i1 %850, label %853, label %851

851:                                              ; preds = %841
  %852 = icmp ne ptr %843, null
  br label %889

853:                                              ; preds = %841
  %854 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3, i64 3
  %855 = load ptr, ptr %854, align 8, !tbaa !17
  %856 = icmp ne ptr %843, null
  %857 = icmp ne ptr %855, null
  %858 = select i1 %856, i1 %857, i1 false
  br i1 %858, label %859, label %889

859:                                              ; preds = %853, %880
  %860 = phi ptr [ %884, %880 ], [ %855, %853 ]
  %861 = phi ptr [ %876, %880 ], [ %843, %853 ]
  %862 = phi i32 [ %875, %880 ], [ %842, %853 ]
  %863 = phi i32 [ %885, %880 ], [ 1, %853 ]
  %864 = tail call i32 @operand_equal_p(ptr noundef nonnull %861, ptr noundef nonnull %860, i32 noundef %10)
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %115, label %866

866:                                              ; preds = %859
  %867 = icmp slt i32 %862, %836
  br i1 %867, label %868, label %874

868:                                              ; preds = %866
  %869 = add nsw i32 %862, 3
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds %struct.tree_exp, ptr %81, i64 0, i32 3, i64 %870
  %872 = load ptr, ptr %871, align 8, !tbaa !17
  %873 = add nsw i32 %862, 1
  br label %874

874:                                              ; preds = %866, %868
  %875 = phi i32 [ %873, %868 ], [ %862, %866 ]
  %876 = phi ptr [ %872, %868 ], [ null, %866 ]
  %877 = icmp slt i32 %863, %849
  br i1 %877, label %880, label %878

878:                                              ; preds = %874
  %879 = icmp ne ptr %876, null
  br label %889

880:                                              ; preds = %874
  %881 = add nuw nsw i32 %863, 3
  %882 = zext i32 %881 to i64
  %883 = getelementptr inbounds %struct.tree_exp, ptr %82, i64 0, i32 3, i64 %882
  %884 = load ptr, ptr %883, align 8, !tbaa !17
  %885 = add nuw nsw i32 %863, 1
  %886 = icmp ne ptr %876, null
  %887 = icmp ne ptr %884, null
  %888 = select i1 %886, i1 %887, i1 false
  br i1 %888, label %859, label %889, !llvm.loop !39

889:                                              ; preds = %880, %878, %851, %853
  %890 = phi i1 [ %856, %853 ], [ %852, %851 ], [ %879, %878 ], [ %886, %880 ]
  %891 = phi i1 [ %857, %853 ], [ false, %851 ], [ false, %878 ], [ %887, %880 ]
  %892 = select i1 %890, i1 true, i1 %891
  %893 = xor i1 %892, true
  %894 = zext i1 %893 to i32
  br label %115

895:                                              ; preds = %576
  %896 = icmp eq i64 %577, 29
  br i1 %896, label %897, label %115

897:                                              ; preds = %895
  %898 = getelementptr inbounds %struct.tree_function_decl, ptr %81, i64 0, i32 5
  %899 = load i32, ptr %898, align 8
  %900 = lshr i32 %899, 11
  %901 = and i32 %900, 3
  %902 = icmp eq i32 %901, 0
  br i1 %902, label %115, label %903

903:                                              ; preds = %897
  %904 = getelementptr inbounds %struct.tree_function_decl, ptr %82, i64 0, i32 5
  %905 = load i32, ptr %904, align 8
  %906 = lshr i32 %905, 11
  %907 = and i32 %906, 3
  %908 = icmp ne i32 %907, 0
  %909 = icmp eq i32 %901, %907
  %910 = and i1 %908, %909
  br i1 %910, label %911, label %115

911:                                              ; preds = %903
  %912 = xor i32 %905, %899
  %913 = and i32 %912, 2047
  %914 = icmp eq i32 %913, 0
  %915 = zext i1 %914 to i32
  br label %115
}

declare ptr @tree_strip_nop_conversions(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @fixed_identical(ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @real_identical(ptr noundef, ptr noundef) local_unnamed_addr #3

declare i32 @real_zerop(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @commutative_tree_code(i32 noundef) local_unnamed_addr #3

declare i32 @call_expr_flags(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2)
  %6 = load i64, ptr %5, align 8
  %7 = and i64 %6, 65535
  %8 = icmp eq i64 %7, 116
  br i1 %8, label %9, label %72

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = load i64, ptr %11, align 8
  %13 = and i64 %12, 65535
  %14 = icmp eq i64 %13, 19
  br i1 %14, label %15, label %72

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = tail call i32 @integer_zerop(ptr noundef %17) #24
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %72, label %20

20:                                               ; preds = %15
  %21 = load i64, ptr %3, align 8
  %22 = and i64 %21, 65536
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %72, label %24

24:                                               ; preds = %20
  %25 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  br label %26

26:                                               ; preds = %24, %67
  %27 = phi i64 [ %69, %67 ], [ %21, %24 ]
  %28 = phi ptr [ %68, %67 ], [ %3, %24 ]
  %29 = and i64 %27, 65535
  %30 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !17
  switch i32 %31, label %70 [
    i32 6, label %64
    i32 7, label %32
    i32 5, label %32
    i32 10, label %44
  ]

32:                                               ; preds = %26, %26
  %33 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 0, i32 3
  %34 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 1
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = load i64, ptr %35, align 8
  %37 = and i64 %36, 65536
  %38 = icmp eq i64 %37, 0
  %39 = load ptr, ptr %33, align 8, !tbaa !17
  br i1 %38, label %67, label %40

40:                                               ; preds = %32
  %41 = load i64, ptr %39, align 8
  %42 = and i64 %41, 65536
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %67, label %70

44:                                               ; preds = %26
  %45 = trunc i64 %27 to i16
  switch i16 %45, label %70 [
    i16 52, label %46
    i16 56, label %52
  ]

46:                                               ; preds = %44
  %47 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = and i64 %49, 65536
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %64, label %70

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 1
  %54 = load ptr, ptr %53, align 8, !tbaa !17
  %55 = load i64, ptr %54, align 8
  %56 = and i64 %55, 65536
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %70

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 1, i32 0, i32 1
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = load i64, ptr %60, align 8
  %62 = and i64 %61, 65536
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %70

64:                                               ; preds = %46, %26, %58
  %65 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 0, i32 3
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  br label %67

67:                                               ; preds = %64, %40, %32
  %68 = phi ptr [ %35, %40 ], [ %39, %32 ], [ %66, %64 ]
  %69 = load i64, ptr %68, align 8
  br label %26

70:                                               ; preds = %26, %40, %44, %46, %52, %58
  %71 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %25, ptr noundef nonnull %28) #24
  br label %134

72:                                               ; preds = %20, %15, %9, %4
  %73 = load i64, ptr %3, align 8
  %74 = and i64 %73, 65536
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %122, label %76

76:                                               ; preds = %72, %117
  %77 = phi i64 [ %119, %117 ], [ %73, %72 ]
  %78 = phi ptr [ %118, %117 ], [ %3, %72 ]
  %79 = and i64 %77, 65535
  %80 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %79
  %81 = load i32, ptr %80, align 4, !tbaa !17
  switch i32 %81, label %120 [
    i32 6, label %114
    i32 7, label %82
    i32 5, label %82
    i32 10, label %94
  ]

82:                                               ; preds = %76, %76
  %83 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 0, i32 3
  %84 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 1
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  %86 = load i64, ptr %85, align 8
  %87 = and i64 %86, 65536
  %88 = icmp eq i64 %87, 0
  %89 = load ptr, ptr %83, align 8, !tbaa !17
  br i1 %88, label %117, label %90

90:                                               ; preds = %82
  %91 = load i64, ptr %89, align 8
  %92 = and i64 %91, 65536
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %117, label %120

94:                                               ; preds = %76
  %95 = trunc i64 %77 to i16
  switch i16 %95, label %120 [
    i16 52, label %96
    i16 56, label %102
  ]

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 1
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  %99 = load i64, ptr %98, align 8
  %100 = and i64 %99, 65536
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %114, label %120

102:                                              ; preds = %94
  %103 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 1
  %104 = load ptr, ptr %103, align 8, !tbaa !17
  %105 = load i64, ptr %104, align 8
  %106 = and i64 %105, 65536
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %120

108:                                              ; preds = %102
  %109 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 1, i32 0, i32 1
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = load i64, ptr %110, align 8
  %112 = and i64 %111, 65536
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %96, %76, %108
  %115 = getelementptr inbounds %struct.tree_exp, ptr %78, i64 0, i32 3
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  br label %117

117:                                              ; preds = %114, %90, %82
  %118 = phi ptr [ %85, %90 ], [ %89, %82 ], [ %116, %114 ]
  %119 = load i64, ptr %118, align 8
  br label %76

120:                                              ; preds = %76, %90, %94, %96, %102, %108
  %121 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %1, ptr noundef nonnull %78, ptr noundef nonnull %5) #24
  br label %134

122:                                              ; preds = %72
  %123 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %125, label %136

125:                                              ; preds = %122
  %126 = load i64, ptr %5, align 8
  %127 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %126)
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %136, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !17
  %132 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %131, ptr noundef nonnull %5) #24
  %133 = getelementptr inbounds %struct.tree_exp, ptr %132, i64 0, i32 1
  store i32 %0, ptr %133, align 8, !tbaa !17
  br label %136

134:                                              ; preds = %120, %70
  %135 = phi ptr [ %71, %70 ], [ %121, %120 ]
  tail call void @protected_set_expr_location(ptr noundef %135, i32 noundef %0) #24
  br label %136

136:                                              ; preds = %129, %125, %122, %134
  %137 = phi ptr [ %135, %134 ], [ %132, %129 ], [ %5, %122 ], [ %5, %125 ]
  ret ptr %137
}

declare ptr @build2_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2)
  %7 = load i64, ptr %4, align 8
  %8 = and i64 %7, 65536
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %5
  %11 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %1, ptr noundef nonnull %4, ptr noundef %6) #24
  %12 = getelementptr inbounds %struct.tree_exp, ptr %11, i64 0, i32 1
  store i32 %0, ptr %12, align 8, !tbaa !17
  br label %13

13:                                               ; preds = %10, %5
  %14 = phi ptr [ %11, %10 ], [ %6, %5 ]
  %15 = load i64, ptr %3, align 8
  %16 = and i64 %15, 65536
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %13
  %19 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %1, ptr noundef nonnull %3, ptr noundef %14) #24
  %20 = getelementptr inbounds %struct.tree_exp, ptr %19, i64 0, i32 1
  store i32 %0, ptr %20, align 8, !tbaa !17
  br label %21

21:                                               ; preds = %18, %13
  %22 = phi ptr [ %19, %18 ], [ %14, %13 ]
  %23 = load i64, ptr %22, align 8
  %24 = and i64 %23, 65535
  %25 = icmp ne i64 %24, 52
  %26 = load i8, ptr @in_gimple_form, align 1
  %27 = icmp eq i8 %26, 0
  %28 = select i1 %25, i1 %27, i1 false
  br i1 %28, label %29, label %37

29:                                               ; preds = %21
  %30 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %23)
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %34, ptr noundef nonnull %22) #24
  %36 = getelementptr inbounds %struct.tree_exp, ptr %35, i64 0, i32 1
  store i32 %0, ptr %36, align 8, !tbaa !17
  br label %37

37:                                               ; preds = %32, %29, %21
  %38 = phi ptr [ %22, %21 ], [ %35, %32 ], [ %22, %29 ]
  ret ptr %38
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = load i64, ptr %1, align 8
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 65535
  %8 = and i64 %5, 65535
  %9 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !17
  %11 = icmp eq i32 %10, 5
  br i1 %11, label %12, label %344

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = trunc i64 %17 to i16
  switch i16 %18, label %34 [
    i16 9, label %28
    i16 13, label %19
    i16 14, label %19
  ]

19:                                               ; preds = %12, %12
  %20 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = load i64, ptr %21, align 8
  %23 = and i64 %22, 65535
  %24 = icmp eq i64 %23, 9
  %25 = load i32, ptr @flag_trapping_math, align 4
  %26 = icmp ne i32 %25, 0
  %27 = select i1 %24, i1 %26, i1 false
  br i1 %27, label %31, label %34

28:                                               ; preds = %12
  %29 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %19, %28
  %32 = add nsw i32 %7, -105
  %33 = icmp ult i32 %32, -4
  br i1 %33, label %831, label %34

34:                                               ; preds = %12, %31, %28, %19
  %35 = and i64 %17, 65535
  %36 = icmp eq i64 %35, 14
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %39 = load i64, ptr %16, align 8
  br label %45

40:                                               ; preds = %34
  %41 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %42 = load i32, ptr %41, align 4
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  br label %45

45:                                               ; preds = %40, %37
  %46 = phi i64 [ %39, %37 ], [ %17, %40 ]
  %47 = phi i32 [ %38, %37 ], [ %44, %40 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !17
  %51 = icmp eq i8 %50, 8
  br i1 %51, label %106, label %52

52:                                               ; preds = %45
  %53 = and i64 %46, 65535
  %54 = icmp eq i64 %53, 14
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %57 = load i64, ptr %16, align 8
  br label %63

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %60 = load i32, ptr %59, align 4
  %61 = lshr i32 %60, 16
  %62 = and i32 %61, 255
  br label %63

63:                                               ; preds = %58, %55
  %64 = phi i64 [ %57, %55 ], [ %46, %58 ]
  %65 = phi i32 [ %56, %55 ], [ %62, %58 ]
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !17
  %69 = icmp eq i8 %68, 9
  br i1 %69, label %106, label %70

70:                                               ; preds = %63
  %71 = and i64 %64, 65535
  %72 = icmp eq i64 %71, 14
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %75 = load i64, ptr %16, align 8
  br label %81

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %78 = load i32, ptr %77, align 4
  %79 = lshr i32 %78, 16
  %80 = and i32 %79, 255
  br label %81

81:                                               ; preds = %76, %73
  %82 = phi i64 [ %75, %73 ], [ %64, %76 ]
  %83 = phi i32 [ %74, %73 ], [ %80, %76 ]
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %84
  %86 = load i8, ptr %85, align 1, !tbaa !17
  %87 = icmp eq i8 %86, 11
  br i1 %87, label %106, label %88

88:                                               ; preds = %81
  %89 = and i64 %82, 65535
  %90 = icmp eq i64 %89, 14
  br i1 %90, label %91, label %93

91:                                               ; preds = %88
  %92 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %98

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %95 = load i32, ptr %94, align 4
  %96 = lshr i32 %95, 16
  %97 = and i32 %96, 255
  br label %98

98:                                               ; preds = %93, %91
  %99 = phi i32 [ %92, %91 ], [ %97, %93 ]
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %100
  %102 = load i8, ptr %101, align 1, !tbaa !17
  %103 = icmp eq i8 %102, 17
  br i1 %103, label %104, label %316

104:                                              ; preds = %98
  %105 = load i64, ptr %16, align 8
  br label %106

106:                                              ; preds = %104, %81, %63, %45
  %107 = phi i64 [ %105, %104 ], [ %82, %81 ], [ %64, %63 ], [ %46, %45 ]
  %108 = and i64 %107, 65535
  %109 = icmp eq i64 %108, 14
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  %111 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %112 = load i64, ptr %16, align 8
  br label %118

113:                                              ; preds = %106
  %114 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %115 = load i32, ptr %114, align 4
  %116 = lshr i32 %115, 16
  %117 = and i32 %116, 255
  br label %118

118:                                              ; preds = %113, %110
  %119 = phi i64 [ %112, %110 ], [ %107, %113 ]
  %120 = phi i32 [ %111, %110 ], [ %117, %113 ]
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %121
  %123 = load i8, ptr %122, align 1, !tbaa !17
  %124 = icmp eq i8 %123, 8
  br i1 %124, label %143, label %125

125:                                              ; preds = %118
  %126 = and i64 %119, 65535
  %127 = icmp eq i64 %126, 14
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %130 = load i64, ptr %16, align 8
  br label %136

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %133 = load i32, ptr %132, align 4
  %134 = lshr i32 %133, 16
  %135 = and i32 %134, 255
  br label %136

136:                                              ; preds = %131, %128
  %137 = phi i64 [ %130, %128 ], [ %119, %131 ]
  %138 = phi i32 [ %129, %128 ], [ %135, %131 ]
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %139
  %141 = load i8, ptr %140, align 1, !tbaa !17
  %142 = icmp eq i8 %141, 9
  br i1 %142, label %143, label %154

143:                                              ; preds = %136, %118
  %144 = phi i64 [ %137, %136 ], [ %119, %118 ]
  %145 = and i64 %144, 65535
  %146 = icmp eq i64 %145, 14
  br i1 %146, label %147, label %149

147:                                              ; preds = %143
  %148 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %170

149:                                              ; preds = %143
  %150 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %151 = load i32, ptr %150, align 4
  %152 = lshr i32 %151, 16
  %153 = and i32 %152, 255
  br label %170

154:                                              ; preds = %136
  %155 = and i64 %137, 65535
  %156 = icmp eq i64 %155, 14
  br i1 %156, label %157, label %159

157:                                              ; preds = %154
  %158 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %164

159:                                              ; preds = %154
  %160 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %161 = load i32, ptr %160, align 4
  %162 = lshr i32 %161, 16
  %163 = and i32 %162, 255
  br label %164

164:                                              ; preds = %159, %157
  %165 = phi i32 [ %158, %157 ], [ %163, %159 ]
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %166
  %168 = load i8, ptr %167, align 1, !tbaa !17
  %169 = zext i8 %168 to i32
  br label %170

170:                                              ; preds = %147, %149, %164
  %171 = phi i32 [ %169, %164 ], [ %148, %147 ], [ %153, %149 ]
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %172
  %174 = load i8, ptr %173, align 1, !tbaa !17
  %175 = icmp eq i8 %174, 9
  %176 = load i64, ptr %16, align 8
  %177 = and i64 %176, 65535
  %178 = icmp eq i64 %177, 14
  br i1 %175, label %179, label %240

179:                                              ; preds = %170
  br i1 %178, label %180, label %183

180:                                              ; preds = %179
  %181 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %182 = load i64, ptr %16, align 8
  br label %188

183:                                              ; preds = %179
  %184 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %185 = load i32, ptr %184, align 4
  %186 = lshr i32 %185, 16
  %187 = and i32 %186, 255
  br label %188

188:                                              ; preds = %183, %180
  %189 = phi i64 [ %182, %180 ], [ %176, %183 ]
  %190 = phi i32 [ %181, %180 ], [ %187, %183 ]
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %191
  %193 = load i8, ptr %192, align 1, !tbaa !17
  %194 = icmp eq i8 %193, 8
  br i1 %194, label %213, label %195

195:                                              ; preds = %188
  %196 = and i64 %189, 65535
  %197 = icmp eq i64 %196, 14
  br i1 %197, label %198, label %201

198:                                              ; preds = %195
  %199 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %200 = load i64, ptr %16, align 8
  br label %206

201:                                              ; preds = %195
  %202 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %203 = load i32, ptr %202, align 4
  %204 = lshr i32 %203, 16
  %205 = and i32 %204, 255
  br label %206

206:                                              ; preds = %201, %198
  %207 = phi i64 [ %200, %198 ], [ %189, %201 ]
  %208 = phi i32 [ %199, %198 ], [ %205, %201 ]
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %209
  %211 = load i8, ptr %210, align 1, !tbaa !17
  %212 = icmp eq i8 %211, 9
  br i1 %212, label %213, label %224

213:                                              ; preds = %206, %188
  %214 = phi i64 [ %207, %206 ], [ %189, %188 ]
  %215 = and i64 %214, 65535
  %216 = icmp eq i64 %215, 14
  br i1 %216, label %217, label %219

217:                                              ; preds = %213
  %218 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %301

219:                                              ; preds = %213
  %220 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %221 = load i32, ptr %220, align 4
  %222 = lshr i32 %221, 16
  %223 = and i32 %222, 255
  br label %301

224:                                              ; preds = %206
  %225 = and i64 %207, 65535
  %226 = icmp eq i64 %225, 14
  br i1 %226, label %227, label %229

227:                                              ; preds = %224
  %228 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %234

229:                                              ; preds = %224
  %230 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %231 = load i32, ptr %230, align 4
  %232 = lshr i32 %231, 16
  %233 = and i32 %232, 255
  br label %234

234:                                              ; preds = %229, %227
  %235 = phi i32 [ %228, %227 ], [ %233, %229 ]
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %236
  %238 = load i8, ptr %237, align 1, !tbaa !17
  %239 = zext i8 %238 to i32
  br label %301

240:                                              ; preds = %170
  br i1 %178, label %241, label %244

241:                                              ; preds = %240
  %242 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %243 = load i64, ptr %16, align 8
  br label %249

244:                                              ; preds = %240
  %245 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %246 = load i32, ptr %245, align 4
  %247 = lshr i32 %246, 16
  %248 = and i32 %247, 255
  br label %249

249:                                              ; preds = %244, %241
  %250 = phi i64 [ %243, %241 ], [ %176, %244 ]
  %251 = phi i32 [ %242, %241 ], [ %248, %244 ]
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %252
  %254 = load i8, ptr %253, align 1, !tbaa !17
  %255 = icmp eq i8 %254, 8
  br i1 %255, label %274, label %256

256:                                              ; preds = %249
  %257 = and i64 %250, 65535
  %258 = icmp eq i64 %257, 14
  br i1 %258, label %259, label %262

259:                                              ; preds = %256
  %260 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  %261 = load i64, ptr %16, align 8
  br label %267

262:                                              ; preds = %256
  %263 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %264 = load i32, ptr %263, align 4
  %265 = lshr i32 %264, 16
  %266 = and i32 %265, 255
  br label %267

267:                                              ; preds = %262, %259
  %268 = phi i64 [ %261, %259 ], [ %250, %262 ]
  %269 = phi i32 [ %260, %259 ], [ %266, %262 ]
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %270
  %272 = load i8, ptr %271, align 1, !tbaa !17
  %273 = icmp eq i8 %272, 9
  br i1 %273, label %274, label %285

274:                                              ; preds = %267, %249
  %275 = phi i64 [ %268, %267 ], [ %250, %249 ]
  %276 = and i64 %275, 65535
  %277 = icmp eq i64 %276, 14
  br i1 %277, label %278, label %280

278:                                              ; preds = %274
  %279 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %301

280:                                              ; preds = %274
  %281 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %282 = load i32, ptr %281, align 4
  %283 = lshr i32 %282, 16
  %284 = and i32 %283, 255
  br label %301

285:                                              ; preds = %267
  %286 = and i64 %268, 65535
  %287 = icmp eq i64 %286, 14
  br i1 %287, label %288, label %290

288:                                              ; preds = %285
  %289 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %295

290:                                              ; preds = %285
  %291 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %292 = load i32, ptr %291, align 4
  %293 = lshr i32 %292, 16
  %294 = and i32 %293, 255
  br label %295

295:                                              ; preds = %290, %288
  %296 = phi i32 [ %289, %288 ], [ %294, %290 ]
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %297
  %299 = load i8, ptr %298, align 1, !tbaa !17
  %300 = zext i8 %299 to i32
  br label %301

301:                                              ; preds = %295, %280, %278, %234, %219, %217
  %302 = phi i32 [ %239, %234 ], [ %218, %217 ], [ %223, %219 ], [ %300, %295 ], [ %279, %278 ], [ %284, %280 ]
  %303 = add i32 %302, -38
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %304
  %306 = load ptr, ptr %305, align 8, !tbaa !6
  %307 = getelementptr inbounds %struct.real_format, ptr %306, i64 0, i32 11
  %308 = load i8, ptr %307, align 2, !tbaa !36
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %316, label %310

310:                                              ; preds = %301
  %311 = load i32, ptr @flag_finite_math_only, align 4, !tbaa !21
  %312 = icmp eq i32 %311, 0
  %313 = load i32, ptr @flag_trapping_math, align 4
  %314 = icmp ne i32 %313, 0
  %315 = select i1 %312, i1 %314, i1 false
  br i1 %315, label %831, label %316

316:                                              ; preds = %98, %301, %310
  %317 = phi i1 [ %312, %310 ], [ false, %301 ], [ false, %98 ]
  %318 = trunc i64 %5 to i16
  switch i16 %318, label %336 [
    i16 101, label %337
    i16 102, label %319
    i16 99, label %320
    i16 100, label %322
    i16 97, label %324
    i16 98, label %326
    i16 110, label %328
    i16 109, label %329
    i16 107, label %330
    i16 108, label %331
    i16 105, label %332
    i16 106, label %333
    i16 104, label %334
    i16 103, label %335
  ]

319:                                              ; preds = %316
  br label %337

320:                                              ; preds = %316
  %321 = select i1 %317, i32 106, i32 98
  br label %337

322:                                              ; preds = %316
  %323 = select i1 %317, i32 105, i32 97
  br label %337

324:                                              ; preds = %316
  %325 = select i1 %317, i32 108, i32 100
  br label %337

326:                                              ; preds = %316
  %327 = select i1 %317, i32 107, i32 99
  br label %337

328:                                              ; preds = %316
  br label %337

329:                                              ; preds = %316
  br label %337

330:                                              ; preds = %316
  br label %337

331:                                              ; preds = %316
  br label %337

332:                                              ; preds = %316
  br label %337

333:                                              ; preds = %316
  br label %337

334:                                              ; preds = %316
  br label %337

335:                                              ; preds = %316
  br label %337

336:                                              ; preds = %316
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2932, ptr noundef nonnull @.str.1) #24
  br label %831

337:                                              ; preds = %335, %334, %333, %332, %331, %330, %329, %328, %326, %324, %322, %320, %319, %316
  %338 = phi i32 [ 102, %316 ], [ 101, %319 ], [ %321, %320 ], [ %323, %322 ], [ %325, %324 ], [ %327, %326 ], [ 109, %328 ], [ 110, %329 ], [ 98, %330 ], [ 97, %331 ], [ 100, %332 ], [ 99, %333 ], [ 103, %334 ], [ 104, %335 ]
  %339 = load ptr, ptr %13, align 8, !tbaa !17
  %340 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %341 = load ptr, ptr %340, align 8, !tbaa !17
  %342 = tail call ptr @build2_stat(i32 noundef %338, ptr noundef %4, ptr noundef %339, ptr noundef %341) #24
  %343 = getelementptr inbounds %struct.tree_exp, ptr %342, i64 0, i32 1
  store i32 %0, ptr %343, align 8, !tbaa !17
  br label %831

344:                                              ; preds = %2
  %345 = trunc i64 %5 to i16
  switch i16 %345, label %831 [
    i16 23, label %346
    i16 93, label %366
    i16 94, label %429
    i16 95, label %492
    i16 91, label %508
    i16 92, label %571
    i16 96, label %634
    i16 56, label %637
    i16 52, label %695
    i16 117, label %726
    i16 116, label %752
    i16 113, label %752
    i16 78, label %758
    i16 89, label %787
    i16 120, label %795
    i16 61, label %797
  ]

346:                                              ; preds = %344
  %347 = tail call i32 @integer_zerop(ptr noundef nonnull %1) #24
  %348 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %349 = icmp eq ptr %348, %4
  br i1 %349, label %350, label %355

350:                                              ; preds = %346
  %351 = icmp eq i32 %347, 0
  %352 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %353 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %354 = select i1 %351, ptr %353, ptr %352
  br label %831

355:                                              ; preds = %346
  %356 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %357 = icmp eq ptr %356, %4
  br i1 %357, label %358, label %363

358:                                              ; preds = %355
  %359 = icmp eq i32 %347, 0
  %360 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %361 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %362 = select i1 %359, ptr %361, ptr %360
  br label %831

363:                                              ; preds = %355
  %364 = sext i32 %347 to i64
  %365 = tail call ptr @build_int_cst(ptr noundef %4, i64 noundef %364) #24
  br label %831

366:                                              ; preds = %344
  %367 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %368 = load ptr, ptr %367, align 8, !tbaa !17
  %369 = load i64, ptr %368, align 8
  %370 = and i64 %369, 65535
  %371 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %370
  %372 = load i32, ptr %371, align 4, !tbaa !17
  %373 = add i32 %372, -4
  %374 = icmp ult i32 %373, 7
  br i1 %374, label %375, label %378

375:                                              ; preds = %366
  %376 = getelementptr inbounds %struct.tree_exp, ptr %368, i64 0, i32 1
  %377 = load i32, ptr %376, align 8, !tbaa !17
  br label %378

378:                                              ; preds = %366, %375
  %379 = phi i32 [ %377, %375 ], [ 0, %366 ]
  %380 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %381 = load ptr, ptr %380, align 8, !tbaa !17
  %382 = load i64, ptr %381, align 8
  %383 = and i64 %382, 65535
  %384 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %383
  %385 = load i32, ptr %384, align 4, !tbaa !17
  %386 = add i32 %385, -4
  %387 = icmp ult i32 %386, 7
  br i1 %387, label %391, label %388

388:                                              ; preds = %378
  %389 = icmp eq i32 %379, 0
  %390 = select i1 %389, i32 %0, i32 %379
  br label %398

391:                                              ; preds = %378
  %392 = getelementptr inbounds %struct.tree_exp, ptr %381, i64 0, i32 1
  %393 = load i32, ptr %392, align 8, !tbaa !17
  %394 = freeze i32 %393
  %395 = icmp eq i32 %379, 0
  %396 = select i1 %395, i32 %0, i32 %379
  %397 = icmp eq i32 %394, 0
  br i1 %397, label %398, label %400

398:                                              ; preds = %388, %391
  %399 = phi i32 [ %390, %388 ], [ %396, %391 ]
  br label %400

400:                                              ; preds = %391, %398
  %401 = phi i32 [ %399, %398 ], [ %396, %391 ]
  %402 = phi i32 [ %0, %398 ], [ %394, %391 ]
  %403 = icmp eq i64 %370, 0
  br i1 %403, label %412, label %404

404:                                              ; preds = %400
  %405 = tail call ptr @fold_truth_not_expr(i32 noundef %401, ptr noundef nonnull %368)
  %406 = icmp eq ptr %405, null
  br i1 %406, label %407, label %412

407:                                              ; preds = %404
  %408 = getelementptr inbounds %struct.tree_common, ptr %368, i64 0, i32 2
  %409 = load ptr, ptr %408, align 8, !tbaa !17
  %410 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %409, ptr noundef nonnull %368) #24
  %411 = getelementptr inbounds %struct.tree_exp, ptr %410, i64 0, i32 1
  store i32 %401, ptr %411, align 8, !tbaa !17
  br label %412

412:                                              ; preds = %400, %404, %407
  %413 = phi ptr [ %368, %400 ], [ %405, %404 ], [ %410, %407 ]
  %414 = load ptr, ptr %380, align 8, !tbaa !17
  %415 = load i64, ptr %414, align 8
  %416 = and i64 %415, 65535
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %426, label %418

418:                                              ; preds = %412
  %419 = tail call ptr @fold_truth_not_expr(i32 noundef %402, ptr noundef nonnull %414)
  %420 = icmp eq ptr %419, null
  br i1 %420, label %421, label %426

421:                                              ; preds = %418
  %422 = getelementptr inbounds %struct.tree_common, ptr %414, i64 0, i32 2
  %423 = load ptr, ptr %422, align 8, !tbaa !17
  %424 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %423, ptr noundef nonnull %414) #24
  %425 = getelementptr inbounds %struct.tree_exp, ptr %424, i64 0, i32 1
  store i32 %402, ptr %425, align 8, !tbaa !17
  br label %426

426:                                              ; preds = %412, %418, %421
  %427 = phi ptr [ %414, %412 ], [ %419, %418 ], [ %424, %421 ]
  %428 = tail call ptr @build2_stat(i32 noundef 94, ptr noundef %4, ptr noundef nonnull %413, ptr noundef nonnull %427) #24
  br label %826

429:                                              ; preds = %344
  %430 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %431 = load ptr, ptr %430, align 8, !tbaa !17
  %432 = load i64, ptr %431, align 8
  %433 = and i64 %432, 65535
  %434 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %433
  %435 = load i32, ptr %434, align 4, !tbaa !17
  %436 = add i32 %435, -4
  %437 = icmp ult i32 %436, 7
  br i1 %437, label %438, label %441

438:                                              ; preds = %429
  %439 = getelementptr inbounds %struct.tree_exp, ptr %431, i64 0, i32 1
  %440 = load i32, ptr %439, align 8, !tbaa !17
  br label %441

441:                                              ; preds = %429, %438
  %442 = phi i32 [ %440, %438 ], [ 0, %429 ]
  %443 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %444 = load ptr, ptr %443, align 8, !tbaa !17
  %445 = load i64, ptr %444, align 8
  %446 = and i64 %445, 65535
  %447 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %446
  %448 = load i32, ptr %447, align 4, !tbaa !17
  %449 = add i32 %448, -4
  %450 = icmp ult i32 %449, 7
  br i1 %450, label %454, label %451

451:                                              ; preds = %441
  %452 = icmp eq i32 %442, 0
  %453 = select i1 %452, i32 %0, i32 %442
  br label %461

454:                                              ; preds = %441
  %455 = getelementptr inbounds %struct.tree_exp, ptr %444, i64 0, i32 1
  %456 = load i32, ptr %455, align 8, !tbaa !17
  %457 = freeze i32 %456
  %458 = icmp eq i32 %442, 0
  %459 = select i1 %458, i32 %0, i32 %442
  %460 = icmp eq i32 %457, 0
  br i1 %460, label %461, label %463

461:                                              ; preds = %451, %454
  %462 = phi i32 [ %453, %451 ], [ %459, %454 ]
  br label %463

463:                                              ; preds = %454, %461
  %464 = phi i32 [ %462, %461 ], [ %459, %454 ]
  %465 = phi i32 [ %0, %461 ], [ %457, %454 ]
  %466 = icmp eq i64 %433, 0
  br i1 %466, label %475, label %467

467:                                              ; preds = %463
  %468 = tail call ptr @fold_truth_not_expr(i32 noundef %464, ptr noundef nonnull %431)
  %469 = icmp eq ptr %468, null
  br i1 %469, label %470, label %475

470:                                              ; preds = %467
  %471 = getelementptr inbounds %struct.tree_common, ptr %431, i64 0, i32 2
  %472 = load ptr, ptr %471, align 8, !tbaa !17
  %473 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %472, ptr noundef nonnull %431) #24
  %474 = getelementptr inbounds %struct.tree_exp, ptr %473, i64 0, i32 1
  store i32 %464, ptr %474, align 8, !tbaa !17
  br label %475

475:                                              ; preds = %463, %467, %470
  %476 = phi ptr [ %431, %463 ], [ %468, %467 ], [ %473, %470 ]
  %477 = load ptr, ptr %443, align 8, !tbaa !17
  %478 = load i64, ptr %477, align 8
  %479 = and i64 %478, 65535
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %489, label %481

481:                                              ; preds = %475
  %482 = tail call ptr @fold_truth_not_expr(i32 noundef %465, ptr noundef nonnull %477)
  %483 = icmp eq ptr %482, null
  br i1 %483, label %484, label %489

484:                                              ; preds = %481
  %485 = getelementptr inbounds %struct.tree_common, ptr %477, i64 0, i32 2
  %486 = load ptr, ptr %485, align 8, !tbaa !17
  %487 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %486, ptr noundef nonnull %477) #24
  %488 = getelementptr inbounds %struct.tree_exp, ptr %487, i64 0, i32 1
  store i32 %465, ptr %488, align 8, !tbaa !17
  br label %489

489:                                              ; preds = %475, %481, %484
  %490 = phi ptr [ %477, %475 ], [ %482, %481 ], [ %487, %484 ]
  %491 = tail call ptr @build2_stat(i32 noundef 93, ptr noundef %4, ptr noundef nonnull %476, ptr noundef nonnull %490) #24
  br label %826

492:                                              ; preds = %344
  %493 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %494 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %495 = load ptr, ptr %494, align 8, !tbaa !17
  %496 = load i64, ptr %495, align 8
  %497 = and i64 %496, 65535
  %498 = icmp eq i64 %497, 96
  %499 = load ptr, ptr %493, align 8, !tbaa !17
  br i1 %498, label %500, label %504

500:                                              ; preds = %492
  %501 = getelementptr inbounds %struct.tree_exp, ptr %495, i64 0, i32 3
  %502 = load ptr, ptr %501, align 8, !tbaa !17
  %503 = tail call ptr @build2_stat(i32 noundef 95, ptr noundef %4, ptr noundef %499, ptr noundef %502) #24
  br label %826

504:                                              ; preds = %492
  %505 = tail call ptr @invert_truthvalue_loc(i32 noundef %0, ptr noundef %499)
  %506 = load ptr, ptr %494, align 8, !tbaa !17
  %507 = tail call ptr @build2_stat(i32 noundef 95, ptr noundef %4, ptr noundef %505, ptr noundef %506) #24
  br label %826

508:                                              ; preds = %344
  %509 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %510 = load ptr, ptr %509, align 8, !tbaa !17
  %511 = load i64, ptr %510, align 8
  %512 = and i64 %511, 65535
  %513 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %512
  %514 = load i32, ptr %513, align 4, !tbaa !17
  %515 = add i32 %514, -4
  %516 = icmp ult i32 %515, 7
  br i1 %516, label %517, label %520

517:                                              ; preds = %508
  %518 = getelementptr inbounds %struct.tree_exp, ptr %510, i64 0, i32 1
  %519 = load i32, ptr %518, align 8, !tbaa !17
  br label %520

520:                                              ; preds = %508, %517
  %521 = phi i32 [ %519, %517 ], [ 0, %508 ]
  %522 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %523 = load ptr, ptr %522, align 8, !tbaa !17
  %524 = load i64, ptr %523, align 8
  %525 = and i64 %524, 65535
  %526 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %525
  %527 = load i32, ptr %526, align 4, !tbaa !17
  %528 = add i32 %527, -4
  %529 = icmp ult i32 %528, 7
  br i1 %529, label %533, label %530

530:                                              ; preds = %520
  %531 = icmp eq i32 %521, 0
  %532 = select i1 %531, i32 %0, i32 %521
  br label %540

533:                                              ; preds = %520
  %534 = getelementptr inbounds %struct.tree_exp, ptr %523, i64 0, i32 1
  %535 = load i32, ptr %534, align 8, !tbaa !17
  %536 = freeze i32 %535
  %537 = icmp eq i32 %521, 0
  %538 = select i1 %537, i32 %0, i32 %521
  %539 = icmp eq i32 %536, 0
  br i1 %539, label %540, label %542

540:                                              ; preds = %530, %533
  %541 = phi i32 [ %532, %530 ], [ %538, %533 ]
  br label %542

542:                                              ; preds = %533, %540
  %543 = phi i32 [ %541, %540 ], [ %538, %533 ]
  %544 = phi i32 [ %0, %540 ], [ %536, %533 ]
  %545 = icmp eq i64 %512, 0
  br i1 %545, label %554, label %546

546:                                              ; preds = %542
  %547 = tail call ptr @fold_truth_not_expr(i32 noundef %543, ptr noundef nonnull %510)
  %548 = icmp eq ptr %547, null
  br i1 %548, label %549, label %554

549:                                              ; preds = %546
  %550 = getelementptr inbounds %struct.tree_common, ptr %510, i64 0, i32 2
  %551 = load ptr, ptr %550, align 8, !tbaa !17
  %552 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %551, ptr noundef nonnull %510) #24
  %553 = getelementptr inbounds %struct.tree_exp, ptr %552, i64 0, i32 1
  store i32 %543, ptr %553, align 8, !tbaa !17
  br label %554

554:                                              ; preds = %542, %546, %549
  %555 = phi ptr [ %510, %542 ], [ %547, %546 ], [ %552, %549 ]
  %556 = load ptr, ptr %522, align 8, !tbaa !17
  %557 = load i64, ptr %556, align 8
  %558 = and i64 %557, 65535
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %568, label %560

560:                                              ; preds = %554
  %561 = tail call ptr @fold_truth_not_expr(i32 noundef %544, ptr noundef nonnull %556)
  %562 = icmp eq ptr %561, null
  br i1 %562, label %563, label %568

563:                                              ; preds = %560
  %564 = getelementptr inbounds %struct.tree_common, ptr %556, i64 0, i32 2
  %565 = load ptr, ptr %564, align 8, !tbaa !17
  %566 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %565, ptr noundef nonnull %556) #24
  %567 = getelementptr inbounds %struct.tree_exp, ptr %566, i64 0, i32 1
  store i32 %544, ptr %567, align 8, !tbaa !17
  br label %568

568:                                              ; preds = %554, %560, %563
  %569 = phi ptr [ %556, %554 ], [ %561, %560 ], [ %566, %563 ]
  %570 = tail call ptr @build2_stat(i32 noundef 92, ptr noundef %4, ptr noundef nonnull %555, ptr noundef nonnull %569) #24
  br label %826

571:                                              ; preds = %344
  %572 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %573 = load ptr, ptr %572, align 8, !tbaa !17
  %574 = load i64, ptr %573, align 8
  %575 = and i64 %574, 65535
  %576 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %575
  %577 = load i32, ptr %576, align 4, !tbaa !17
  %578 = add i32 %577, -4
  %579 = icmp ult i32 %578, 7
  br i1 %579, label %580, label %583

580:                                              ; preds = %571
  %581 = getelementptr inbounds %struct.tree_exp, ptr %573, i64 0, i32 1
  %582 = load i32, ptr %581, align 8, !tbaa !17
  br label %583

583:                                              ; preds = %571, %580
  %584 = phi i32 [ %582, %580 ], [ 0, %571 ]
  %585 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %586 = load ptr, ptr %585, align 8, !tbaa !17
  %587 = load i64, ptr %586, align 8
  %588 = and i64 %587, 65535
  %589 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %588
  %590 = load i32, ptr %589, align 4, !tbaa !17
  %591 = add i32 %590, -4
  %592 = icmp ult i32 %591, 7
  br i1 %592, label %596, label %593

593:                                              ; preds = %583
  %594 = icmp eq i32 %584, 0
  %595 = select i1 %594, i32 %0, i32 %584
  br label %603

596:                                              ; preds = %583
  %597 = getelementptr inbounds %struct.tree_exp, ptr %586, i64 0, i32 1
  %598 = load i32, ptr %597, align 8, !tbaa !17
  %599 = freeze i32 %598
  %600 = icmp eq i32 %584, 0
  %601 = select i1 %600, i32 %0, i32 %584
  %602 = icmp eq i32 %599, 0
  br i1 %602, label %603, label %605

603:                                              ; preds = %593, %596
  %604 = phi i32 [ %595, %593 ], [ %601, %596 ]
  br label %605

605:                                              ; preds = %596, %603
  %606 = phi i32 [ %604, %603 ], [ %601, %596 ]
  %607 = phi i32 [ %0, %603 ], [ %599, %596 ]
  %608 = icmp eq i64 %575, 0
  br i1 %608, label %617, label %609

609:                                              ; preds = %605
  %610 = tail call ptr @fold_truth_not_expr(i32 noundef %606, ptr noundef nonnull %573)
  %611 = icmp eq ptr %610, null
  br i1 %611, label %612, label %617

612:                                              ; preds = %609
  %613 = getelementptr inbounds %struct.tree_common, ptr %573, i64 0, i32 2
  %614 = load ptr, ptr %613, align 8, !tbaa !17
  %615 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %614, ptr noundef nonnull %573) #24
  %616 = getelementptr inbounds %struct.tree_exp, ptr %615, i64 0, i32 1
  store i32 %606, ptr %616, align 8, !tbaa !17
  br label %617

617:                                              ; preds = %605, %609, %612
  %618 = phi ptr [ %573, %605 ], [ %610, %609 ], [ %615, %612 ]
  %619 = load ptr, ptr %585, align 8, !tbaa !17
  %620 = load i64, ptr %619, align 8
  %621 = and i64 %620, 65535
  %622 = icmp eq i64 %621, 0
  br i1 %622, label %631, label %623

623:                                              ; preds = %617
  %624 = tail call ptr @fold_truth_not_expr(i32 noundef %607, ptr noundef nonnull %619)
  %625 = icmp eq ptr %624, null
  br i1 %625, label %626, label %631

626:                                              ; preds = %623
  %627 = getelementptr inbounds %struct.tree_common, ptr %619, i64 0, i32 2
  %628 = load ptr, ptr %627, align 8, !tbaa !17
  %629 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %628, ptr noundef nonnull %619) #24
  %630 = getelementptr inbounds %struct.tree_exp, ptr %629, i64 0, i32 1
  store i32 %607, ptr %630, align 8, !tbaa !17
  br label %631

631:                                              ; preds = %617, %623, %626
  %632 = phi ptr [ %619, %617 ], [ %624, %623 ], [ %629, %626 ]
  %633 = tail call ptr @build2_stat(i32 noundef 91, ptr noundef %4, ptr noundef nonnull %618, ptr noundef nonnull %632) #24
  br label %826

634:                                              ; preds = %344
  %635 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %636 = load ptr, ptr %635, align 8, !tbaa !17
  br label %831

637:                                              ; preds = %344
  %638 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %639 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %640 = load ptr, ptr %639, align 8, !tbaa !17
  %641 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 0, i32 1
  %642 = load ptr, ptr %641, align 8, !tbaa !17
  %643 = load i64, ptr %640, align 8
  %644 = and i64 %643, 65535
  %645 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %644
  %646 = load i32, ptr %645, align 4, !tbaa !17
  %647 = add i32 %646, -4
  %648 = icmp ult i32 %647, 7
  br i1 %648, label %649, label %652

649:                                              ; preds = %637
  %650 = getelementptr inbounds %struct.tree_exp, ptr %640, i64 0, i32 1
  %651 = load i32, ptr %650, align 8, !tbaa !17
  br label %652

652:                                              ; preds = %637, %649
  %653 = phi i32 [ %651, %649 ], [ 0, %637 ]
  %654 = load i64, ptr %642, align 8
  %655 = and i64 %654, 65535
  %656 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %655
  %657 = load i32, ptr %656, align 4, !tbaa !17
  %658 = add i32 %657, -4
  %659 = icmp ult i32 %658, 7
  br i1 %659, label %663, label %660

660:                                              ; preds = %652
  %661 = icmp eq i32 %653, 0
  %662 = select i1 %661, i32 %0, i32 %653
  br label %670

663:                                              ; preds = %652
  %664 = getelementptr inbounds %struct.tree_exp, ptr %642, i64 0, i32 1
  %665 = load i32, ptr %664, align 8, !tbaa !17
  %666 = freeze i32 %665
  %667 = icmp eq i32 %653, 0
  %668 = select i1 %667, i32 %0, i32 %653
  %669 = icmp eq i32 %666, 0
  br i1 %669, label %670, label %672

670:                                              ; preds = %660, %663
  %671 = phi i32 [ %662, %660 ], [ %668, %663 ]
  br label %672

672:                                              ; preds = %663, %670
  %673 = phi i32 [ %671, %670 ], [ %668, %663 ]
  %674 = phi i32 [ %0, %670 ], [ %666, %663 ]
  %675 = load ptr, ptr %638, align 8, !tbaa !17
  %676 = getelementptr inbounds %struct.tree_common, ptr %640, i64 0, i32 2
  %677 = load ptr, ptr %676, align 8, !tbaa !17
  %678 = load i64, ptr %677, align 8
  %679 = and i64 %678, 65535
  %680 = icmp eq i64 %679, 19
  br i1 %680, label %683, label %681

681:                                              ; preds = %672
  %682 = tail call ptr @invert_truthvalue_loc(i32 noundef %673, ptr noundef nonnull %640)
  br label %683

683:                                              ; preds = %672, %681
  %684 = phi ptr [ %682, %681 ], [ %640, %672 ]
  %685 = getelementptr inbounds %struct.tree_common, ptr %642, i64 0, i32 2
  %686 = load ptr, ptr %685, align 8, !tbaa !17
  %687 = load i64, ptr %686, align 8
  %688 = and i64 %687, 65535
  %689 = icmp eq i64 %688, 19
  br i1 %689, label %692, label %690

690:                                              ; preds = %683
  %691 = tail call ptr @invert_truthvalue_loc(i32 noundef %674, ptr noundef nonnull %642)
  br label %692

692:                                              ; preds = %683, %690
  %693 = phi ptr [ %691, %690 ], [ %642, %683 ]
  %694 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %4, ptr noundef %675, ptr noundef %684, ptr noundef %693) #24
  br label %826

695:                                              ; preds = %344
  %696 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %697 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %698 = load ptr, ptr %697, align 8, !tbaa !17
  %699 = load i64, ptr %698, align 8
  %700 = and i64 %699, 65535
  %701 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %700
  %702 = load i32, ptr %701, align 4, !tbaa !17
  %703 = add i32 %702, -4
  %704 = icmp ult i32 %703, 7
  br i1 %704, label %705, label %710

705:                                              ; preds = %695
  %706 = getelementptr inbounds %struct.tree_exp, ptr %698, i64 0, i32 1
  %707 = load i32, ptr %706, align 8, !tbaa !17
  %708 = freeze i32 %707
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %710, label %711

710:                                              ; preds = %695, %705
  br label %711

711:                                              ; preds = %705, %710
  %712 = phi i32 [ %0, %710 ], [ %708, %705 ]
  %713 = load ptr, ptr %696, align 8, !tbaa !17
  %714 = icmp eq i64 %700, 0
  br i1 %714, label %723, label %715

715:                                              ; preds = %711
  %716 = tail call ptr @fold_truth_not_expr(i32 noundef %712, ptr noundef nonnull %698)
  %717 = icmp eq ptr %716, null
  br i1 %717, label %718, label %723

718:                                              ; preds = %715
  %719 = getelementptr inbounds %struct.tree_common, ptr %698, i64 0, i32 2
  %720 = load ptr, ptr %719, align 8, !tbaa !17
  %721 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %720, ptr noundef nonnull %698) #24
  %722 = getelementptr inbounds %struct.tree_exp, ptr %721, i64 0, i32 1
  store i32 %712, ptr %722, align 8, !tbaa !17
  br label %723

723:                                              ; preds = %711, %715, %718
  %724 = phi ptr [ %698, %711 ], [ %716, %715 ], [ %721, %718 ]
  %725 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %4, ptr noundef %713, ptr noundef nonnull %724) #24
  br label %826

726:                                              ; preds = %344
  %727 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %728 = load ptr, ptr %727, align 8, !tbaa !17
  %729 = load i64, ptr %728, align 8
  %730 = and i64 %729, 65535
  %731 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %730
  %732 = load i32, ptr %731, align 4, !tbaa !17
  %733 = add i32 %732, -4
  %734 = icmp ult i32 %733, 7
  br i1 %734, label %735, label %740

735:                                              ; preds = %726
  %736 = getelementptr inbounds %struct.tree_exp, ptr %728, i64 0, i32 1
  %737 = load i32, ptr %736, align 8, !tbaa !17
  %738 = freeze i32 %737
  %739 = icmp eq i32 %738, 0
  br i1 %739, label %740, label %741

740:                                              ; preds = %726, %735
  br label %741

741:                                              ; preds = %735, %740
  %742 = phi i32 [ %0, %740 ], [ %738, %735 ]
  %743 = icmp eq i64 %730, 0
  br i1 %743, label %831, label %744

744:                                              ; preds = %741
  %745 = tail call ptr @fold_truth_not_expr(i32 noundef %742, ptr noundef nonnull %728)
  %746 = icmp eq ptr %745, null
  br i1 %746, label %747, label %831

747:                                              ; preds = %744
  %748 = getelementptr inbounds %struct.tree_common, ptr %728, i64 0, i32 2
  %749 = load ptr, ptr %748, align 8, !tbaa !17
  %750 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %749, ptr noundef nonnull %728) #24
  %751 = getelementptr inbounds %struct.tree_exp, ptr %750, i64 0, i32 1
  store i32 %742, ptr %751, align 8, !tbaa !17
  br label %831

752:                                              ; preds = %344, %344
  %753 = load i64, ptr %4, align 8
  %754 = and i64 %753, 65535
  %755 = icmp eq i64 %754, 7
  br i1 %755, label %756, label %758

756:                                              ; preds = %752
  %757 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef nonnull %4, ptr noundef nonnull %1) #24
  br label %826

758:                                              ; preds = %752, %344
  %759 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %760 = load ptr, ptr %759, align 8, !tbaa !17
  %761 = load i64, ptr %760, align 8
  %762 = and i64 %761, 65535
  %763 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %762
  %764 = load i32, ptr %763, align 4, !tbaa !17
  %765 = add i32 %764, -4
  %766 = icmp ult i32 %765, 7
  br i1 %766, label %767, label %772

767:                                              ; preds = %758
  %768 = getelementptr inbounds %struct.tree_exp, ptr %760, i64 0, i32 1
  %769 = load i32, ptr %768, align 8, !tbaa !17
  %770 = freeze i32 %769
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %772, label %773

772:                                              ; preds = %758, %767
  br label %773

773:                                              ; preds = %767, %772
  %774 = phi i32 [ %0, %772 ], [ %770, %767 ]
  %775 = icmp eq i64 %762, 0
  br i1 %775, label %784, label %776

776:                                              ; preds = %773
  %777 = tail call ptr @fold_truth_not_expr(i32 noundef %774, ptr noundef nonnull %760)
  %778 = icmp eq ptr %777, null
  br i1 %778, label %779, label %784

779:                                              ; preds = %776
  %780 = getelementptr inbounds %struct.tree_common, ptr %760, i64 0, i32 2
  %781 = load ptr, ptr %780, align 8, !tbaa !17
  %782 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %781, ptr noundef nonnull %760) #24
  %783 = getelementptr inbounds %struct.tree_exp, ptr %782, i64 0, i32 1
  store i32 %774, ptr %783, align 8, !tbaa !17
  br label %784

784:                                              ; preds = %773, %776, %779
  %785 = phi ptr [ %760, %773 ], [ %777, %776 ], [ %782, %779 ]
  %786 = tail call ptr @build1_stat(i32 noundef %7, ptr noundef %4, ptr noundef nonnull %785) #24
  br label %826

787:                                              ; preds = %344
  %788 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %789 = load ptr, ptr %788, align 8, !tbaa !17
  %790 = tail call i32 @integer_onep(ptr noundef %789) #24
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %831, label %792

792:                                              ; preds = %787
  %793 = tail call ptr @build_int_cst(ptr noundef %4, i64 noundef 0) #24
  %794 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %4, ptr noundef nonnull %1, ptr noundef %793) #24
  br label %826

795:                                              ; preds = %344
  %796 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %4, ptr noundef nonnull %1) #24
  br label %826

797:                                              ; preds = %344
  %798 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %799 = load ptr, ptr %798, align 8, !tbaa !17
  %800 = load i64, ptr %799, align 8
  %801 = and i64 %800, 65535
  %802 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %801
  %803 = load i32, ptr %802, align 4, !tbaa !17
  %804 = add i32 %803, -4
  %805 = icmp ult i32 %804, 7
  br i1 %805, label %806, label %811

806:                                              ; preds = %797
  %807 = getelementptr inbounds %struct.tree_exp, ptr %799, i64 0, i32 1
  %808 = load i32, ptr %807, align 8, !tbaa !17
  %809 = freeze i32 %808
  %810 = icmp eq i32 %809, 0
  br i1 %810, label %811, label %812

811:                                              ; preds = %797, %806
  br label %812

812:                                              ; preds = %806, %811
  %813 = phi i32 [ %0, %811 ], [ %809, %806 ]
  %814 = icmp eq i64 %801, 0
  br i1 %814, label %823, label %815

815:                                              ; preds = %812
  %816 = tail call ptr @fold_truth_not_expr(i32 noundef %813, ptr noundef nonnull %799)
  %817 = icmp eq ptr %816, null
  br i1 %817, label %818, label %823

818:                                              ; preds = %815
  %819 = getelementptr inbounds %struct.tree_common, ptr %799, i64 0, i32 2
  %820 = load ptr, ptr %819, align 8, !tbaa !17
  %821 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %820, ptr noundef nonnull %799) #24
  %822 = getelementptr inbounds %struct.tree_exp, ptr %821, i64 0, i32 1
  store i32 %813, ptr %822, align 8, !tbaa !17
  br label %823

823:                                              ; preds = %812, %815, %818
  %824 = phi ptr [ %799, %812 ], [ %816, %815 ], [ %821, %818 ]
  %825 = tail call ptr @build1_stat(i32 noundef 61, ptr noundef %4, ptr noundef nonnull %824) #24
  br label %826

826:                                              ; preds = %500, %504, %823, %795, %792, %784, %756, %723, %692, %631, %568, %489, %426
  %827 = phi ptr [ %825, %823 ], [ %796, %795 ], [ %794, %792 ], [ %786, %784 ], [ %757, %756 ], [ %725, %723 ], [ %694, %692 ], [ %633, %631 ], [ %570, %568 ], [ %503, %500 ], [ %507, %504 ], [ %491, %489 ], [ %428, %426 ]
  %828 = icmp eq ptr %827, null
  br i1 %828, label %831, label %829

829:                                              ; preds = %826
  %830 = getelementptr inbounds %struct.tree_exp, ptr %827, i64 0, i32 1
  store i32 %0, ptr %830, align 8, !tbaa !17
  br label %831

831:                                              ; preds = %344, %747, %744, %741, %363, %358, %350, %336, %310, %826, %829, %787, %337, %31, %634
  %832 = phi ptr [ %636, %634 ], [ %342, %337 ], [ null, %31 ], [ null, %787 ], [ %827, %829 ], [ null, %826 ], [ null, %310 ], [ null, %336 ], [ %354, %350 ], [ %362, %358 ], [ %365, %363 ], [ %728, %741 ], [ %745, %744 ], [ %750, %747 ], [ null, %344 ]
  ret ptr %832
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @invert_truthvalue_loc(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = load i64, ptr %1, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %1)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %14

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %11, ptr noundef nonnull %1) #24
  %13 = getelementptr inbounds %struct.tree_exp, ptr %12, i64 0, i32 1
  store i32 %0, ptr %13, align 8, !tbaa !17
  br label %14

14:                                               ; preds = %6, %9, %2
  %15 = phi ptr [ %1, %2 ], [ %7, %6 ], [ %12, %9 ]
  ret ptr %15
}

declare ptr @build3_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @make_range(ptr noundef %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3, ptr nocapture noundef writeonly %4) local_unnamed_addr #10 {
  %6 = alloca i32, align 4
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  %9 = load i64, ptr %0, align 8
  %10 = and i64 %9, 65535
  %11 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %10
  %12 = load i32, ptr %11, align 4, !tbaa !17
  %13 = add i32 %12, -4
  %14 = icmp ult i32 %13, 7
  br i1 %14, label %15, label %18

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %17 = load i32, ptr %16, align 8, !tbaa !17
  br label %18

18:                                               ; preds = %5, %15
  %19 = phi i32 [ %17, %15 ], [ 0, %5 ]
  %20 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = tail call ptr @build_int_cst(ptr noundef %21, i64 noundef 0) #24
  br label %23

23:                                               ; preds = %409, %18
  %24 = phi ptr [ null, %18 ], [ %86, %409 ]
  %25 = phi ptr [ null, %18 ], [ %87, %409 ]
  %26 = phi ptr [ null, %18 ], [ %88, %409 ]
  %27 = phi i32 [ 0, %18 ], [ %410, %409 ]
  %28 = phi ptr [ %22, %18 ], [ %411, %409 ]
  %29 = phi ptr [ %22, %18 ], [ %412, %409 ]
  %30 = phi ptr [ %0, %18 ], [ %86, %409 ]
  br label %31

31:                                               ; preds = %23, %228
  %32 = phi ptr [ %24, %23 ], [ %86, %228 ]
  %33 = phi ptr [ %25, %23 ], [ %87, %228 ]
  %34 = phi ptr [ %26, %23 ], [ %88, %228 ]
  %35 = phi ptr [ %28, %23 ], [ %201, %228 ]
  %36 = phi ptr [ %29, %23 ], [ %229, %228 ]
  %37 = phi ptr [ %30, %23 ], [ %86, %228 ]
  br label %38

38:                                               ; preds = %31, %257
  %39 = phi ptr [ %86, %257 ], [ %32, %31 ]
  %40 = phi ptr [ %87, %257 ], [ %33, %31 ]
  %41 = phi ptr [ %88, %257 ], [ %34, %31 ]
  %42 = phi ptr [ %260, %257 ], [ %37, %31 ]
  %43 = load i64, ptr %42, align 8
  %44 = getelementptr inbounds %struct.tree_common, ptr %42, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = and i64 %43, 65535
  %47 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %46
  %48 = load i32, ptr %47, align 4, !tbaa !17
  %49 = add i32 %48, -4
  %50 = icmp ult i32 %49, 7
  br i1 %50, label %51, label %85

51:                                               ; preds = %38
  %52 = icmp eq i32 %48, 9
  br i1 %52, label %53, label %59

53:                                               ; preds = %51
  %54 = getelementptr inbounds %struct.tree_exp, ptr %42, i64 0, i32 3
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = getelementptr inbounds %struct.tree_int_cst, ptr %55, i64 0, i32 1
  %57 = load i64, ptr %56, align 8, !tbaa !17
  %58 = trunc i64 %57 to i32
  br label %63

59:                                               ; preds = %51
  %60 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %46
  %61 = load i8, ptr %60, align 1, !tbaa !17
  %62 = zext i8 %61 to i32
  br label %63

63:                                               ; preds = %53, %59
  %64 = phi i32 [ %58, %53 ], [ %62, %59 ]
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.tree_exp, ptr %42, i64 0, i32 3
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  br label %69

69:                                               ; preds = %66, %63
  %70 = phi ptr [ %68, %66 ], [ %39, %63 ]
  %71 = add nsw i32 %48, -5
  %72 = icmp ult i32 %71, 3
  br i1 %72, label %73, label %76

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.tree_common, ptr %70, i64 0, i32 2
  %75 = load ptr, ptr %74, align 8, !tbaa !17
  br label %76

76:                                               ; preds = %69, %73
  %77 = phi ptr [ %75, %73 ], [ %41, %69 ]
  switch i32 %48, label %85 [
    i32 7, label %82
    i32 5, label %82
    i32 10, label %78
  ]

78:                                               ; preds = %76
  %79 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %46
  %80 = load i8, ptr %79, align 1, !tbaa !17
  %81 = icmp ugt i8 %80, 1
  br i1 %81, label %82, label %85

82:                                               ; preds = %76, %76, %78
  %83 = getelementptr inbounds %struct.tree_exp, ptr %42, i64 1
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  br label %85

85:                                               ; preds = %76, %78, %82, %38
  %86 = phi ptr [ %70, %82 ], [ %70, %78 ], [ %39, %38 ], [ %70, %76 ]
  %87 = phi ptr [ %84, %82 ], [ %40, %78 ], [ %40, %38 ], [ %40, %76 ]
  %88 = phi ptr [ %77, %82 ], [ %77, %78 ], [ %41, %38 ], [ %77, %76 ]
  %89 = trunc i64 %43 to i16
  switch i16 %89, label %628 [
    i16 96, label %90
    i16 101, label %93
    i16 102, label %93
    i16 97, label %93
    i16 98, label %93
    i16 100, label %93
    i16 99, label %93
    i16 79, label %173
    i16 90, label %230
    i16 63, label %262
    i16 64, label %262
    i16 116, label %373
    i16 113, label %373
    i16 117, label %373
  ]

90:                                               ; preds = %85
  %91 = icmp eq i32 %27, 0
  %92 = zext i1 %91 to i32
  br label %409

93:                                               ; preds = %85, %85, %85, %85, %85, %85
  %94 = icmp eq ptr %35, null
  %95 = icmp eq ptr %36, null
  %96 = select i1 %94, i1 true, i1 %95
  br i1 %96, label %628, label %97

97:                                               ; preds = %93
  %98 = tail call i32 @integer_zerop(ptr noundef nonnull %35) #24
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %628, label %100

100:                                              ; preds = %97
  %101 = tail call i32 @integer_zerop(ptr noundef nonnull %36) #24
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %628, label %103

103:                                              ; preds = %100
  %104 = load i64, ptr %87, align 8
  %105 = and i64 %104, 65535
  %106 = icmp eq i64 %105, 23
  br i1 %106, label %107, label %628

107:                                              ; preds = %103
  switch i16 %89, label %119 [
    i16 102, label %120
    i16 101, label %108
    i16 99, label %111
    i16 100, label %112
    i16 97, label %115
    i16 98, label %116
  ]

108:                                              ; preds = %107
  %109 = icmp eq i32 %27, 0
  %110 = zext i1 %109 to i32
  br label %120

111:                                              ; preds = %107
  br label %120

112:                                              ; preds = %107
  %113 = icmp eq i32 %27, 0
  %114 = zext i1 %113 to i32
  br label %120

115:                                              ; preds = %107
  br label %120

116:                                              ; preds = %107
  %117 = icmp eq i32 %27, 0
  %118 = zext i1 %117 to i32
  br label %120

119:                                              ; preds = %107
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4719, ptr noundef nonnull @.str.1) #24
  br label %120

120:                                              ; preds = %107, %119, %116, %115, %112, %111, %108
  %121 = phi i32 [ %27, %119 ], [ %118, %116 ], [ %27, %115 ], [ %114, %112 ], [ %27, %111 ], [ %110, %108 ], [ %27, %107 ]
  %122 = phi ptr [ %35, %119 ], [ null, %116 ], [ %87, %115 ], [ %87, %112 ], [ null, %111 ], [ %87, %108 ], [ %87, %107 ]
  %123 = phi ptr [ %36, %119 ], [ %87, %116 ], [ null, %115 ], [ null, %112 ], [ %87, %111 ], [ %87, %108 ], [ %87, %107 ]
  %124 = load i64, ptr %88, align 8
  %125 = and i64 %124, 2097152
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %409, label %127

127:                                              ; preds = %120
  %128 = icmp eq ptr %122, null
  %129 = icmp eq ptr %123, null
  %130 = select i1 %128, i1 true, i1 %129
  br i1 %130, label %131, label %409

131:                                              ; preds = %127
  %132 = tail call ptr @build_int_cst(ptr noundef nonnull %88, i64 noundef 0) #24
  %133 = call zeroext i8 @merge_ranges(ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef %121, ptr noundef %122, ptr noundef %123, i32 noundef 1, ptr noundef %132, ptr noundef null), !range !40
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %628, label %135

135:                                              ; preds = %131
  %136 = load i32, ptr %6, align 4, !tbaa !21
  %137 = load ptr, ptr %7, align 8, !tbaa !6
  %138 = load ptr, ptr %8, align 8, !tbaa !6
  %139 = icmp eq ptr %138, null
  %140 = icmp ne ptr %137, null
  %141 = select i1 %139, i1 %140, i1 false
  br i1 %141, label %142, label %409

142:                                              ; preds = %135
  %143 = tail call i32 @integer_zerop(ptr noundef nonnull %137) #24
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %409

145:                                              ; preds = %142
  %146 = icmp eq i32 %136, 0
  %147 = zext i1 %146 to i32
  %148 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %149 = icmp eq ptr %148, null
  br i1 %149, label %166, label %150

150:                                              ; preds = %145
  %151 = getelementptr inbounds %struct.tree_common, ptr %137, i64 0, i32 2
  %152 = load ptr, ptr %151, align 8, !tbaa !17
  %153 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %152, ptr noundef nonnull %148)
  %154 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef %152, ptr noundef nonnull %137, ptr noundef %153)
  %155 = icmp eq ptr %154, null
  br i1 %155, label %156, label %159

156:                                              ; preds = %150
  %157 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %152, ptr noundef nonnull %137, ptr noundef %153) #24
  %158 = getelementptr inbounds %struct.tree_exp, ptr %157, i64 0, i32 1
  store i32 0, ptr %158, align 8, !tbaa !17
  br label %159

159:                                              ; preds = %150, %156
  %160 = phi ptr [ %154, %150 ], [ %157, %156 ]
  %161 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %160) #24
  %162 = load i64, ptr %161, align 8
  %163 = and i64 %162, 65535
  %164 = icmp eq i64 %163, 23
  %165 = select i1 %164, ptr %161, ptr null
  br label %170

166:                                              ; preds = %145
  %167 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 64), align 4, !tbaa !17
  %168 = icmp eq i32 %167, 5
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

170:                                              ; preds = %159, %166
  %171 = phi ptr [ %165, %159 ], [ null, %166 ]
  %172 = tail call ptr @build_int_cst(ptr noundef nonnull %88, i64 noundef 0) #24
  br label %409

173:                                              ; preds = %85
  %174 = tail call ptr @build_int_cst(ptr noundef %45, i64 noundef 0) #24
  %175 = icmp ne ptr %174, null
  %176 = icmp ne ptr %36, null
  %177 = and i1 %176, %175
  br i1 %177, label %178, label %196

178:                                              ; preds = %173
  %179 = icmp eq ptr %45, null
  %180 = getelementptr inbounds %struct.tree_common, ptr %174, i64 0, i32 2
  %181 = load ptr, ptr %180, align 8, !tbaa !17
  %182 = select i1 %179, ptr %181, ptr %45
  %183 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %181, ptr noundef nonnull %36)
  %184 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef %182, ptr noundef nonnull %174, ptr noundef %183)
  %185 = icmp eq ptr %184, null
  br i1 %185, label %186, label %189

186:                                              ; preds = %178
  %187 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %182, ptr noundef nonnull %174, ptr noundef %183) #24
  %188 = getelementptr inbounds %struct.tree_exp, ptr %187, i64 0, i32 1
  store i32 0, ptr %188, align 8, !tbaa !17
  br label %189

189:                                              ; preds = %178, %186
  %190 = phi ptr [ %184, %178 ], [ %187, %186 ]
  %191 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %190) #24
  %192 = load i64, ptr %191, align 8
  %193 = and i64 %192, 65535
  %194 = icmp eq i64 %193, 23
  %195 = select i1 %194, ptr %191, ptr null
  br label %200

196:                                              ; preds = %173
  %197 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 64), align 4, !tbaa !17
  %198 = icmp eq i32 %197, 5
  br i1 %198, label %199, label %200

199:                                              ; preds = %196
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

200:                                              ; preds = %189, %196
  %201 = phi ptr [ %195, %189 ], [ null, %196 ]
  store ptr %201, ptr %7, align 8, !tbaa !6
  %202 = tail call ptr @build_int_cst(ptr noundef %45, i64 noundef 0) #24
  %203 = icmp ne ptr %202, null
  %204 = icmp ne ptr %35, null
  %205 = and i1 %204, %203
  br i1 %205, label %206, label %224

206:                                              ; preds = %200
  %207 = icmp eq ptr %45, null
  %208 = getelementptr inbounds %struct.tree_common, ptr %202, i64 0, i32 2
  %209 = load ptr, ptr %208, align 8, !tbaa !17
  %210 = select i1 %207, ptr %209, ptr %45
  %211 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %209, ptr noundef nonnull %35)
  %212 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef %210, ptr noundef nonnull %202, ptr noundef %211)
  %213 = icmp eq ptr %212, null
  br i1 %213, label %214, label %217

214:                                              ; preds = %206
  %215 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %210, ptr noundef nonnull %202, ptr noundef %211) #24
  %216 = getelementptr inbounds %struct.tree_exp, ptr %215, i64 0, i32 1
  store i32 0, ptr %216, align 8, !tbaa !17
  br label %217

217:                                              ; preds = %206, %214
  %218 = phi ptr [ %212, %206 ], [ %215, %214 ]
  %219 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %218) #24
  %220 = load i64, ptr %219, align 8
  %221 = and i64 %220, 65535
  %222 = icmp eq i64 %221, 23
  %223 = select i1 %222, ptr %219, ptr null
  br label %228

224:                                              ; preds = %200
  %225 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 64), align 4, !tbaa !17
  %226 = icmp eq i32 %225, 5
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

228:                                              ; preds = %217, %224
  %229 = phi ptr [ %223, %217 ], [ null, %224 ]
  store ptr %229, ptr %8, align 8, !tbaa !6
  br label %31

230:                                              ; preds = %85
  %231 = icmp eq ptr %86, null
  br i1 %231, label %257, label %232

232:                                              ; preds = %230
  %233 = load i64, ptr %86, align 8
  %234 = and i64 %233, 65535
  %235 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %234
  %236 = load i32, ptr %235, align 4, !tbaa !17
  %237 = add i32 %236, -4
  %238 = icmp ult i32 %237, 7
  br i1 %238, label %239, label %242

239:                                              ; preds = %232
  %240 = getelementptr inbounds %struct.tree_exp, ptr %86, i64 0, i32 1
  %241 = load i32, ptr %240, align 8, !tbaa !17
  br label %242

242:                                              ; preds = %239, %232
  %243 = phi i32 [ %241, %239 ], [ 0, %232 ]
  %244 = getelementptr inbounds %struct.tree_common, ptr %86, i64 0, i32 2
  %245 = load ptr, ptr %244, align 8, !tbaa !17
  %246 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %86) #24
  %247 = tail call fastcc ptr @fold_negate_expr(i32 noundef %243, ptr noundef %246)
  %248 = icmp eq ptr %247, null
  br i1 %248, label %249, label %254

249:                                              ; preds = %242
  %250 = getelementptr inbounds %struct.tree_common, ptr %246, i64 0, i32 2
  %251 = load ptr, ptr %250, align 8, !tbaa !17
  %252 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %251, ptr noundef %246) #24
  %253 = getelementptr inbounds %struct.tree_exp, ptr %252, i64 0, i32 1
  store i32 %243, ptr %253, align 8, !tbaa !17
  br label %254

254:                                              ; preds = %249, %242
  %255 = phi ptr [ %247, %242 ], [ %252, %249 ]
  %256 = tail call ptr @fold_convert_loc(i32 noundef %243, ptr noundef %245, ptr noundef nonnull %255)
  br label %257

257:                                              ; preds = %230, %254
  %258 = phi ptr [ %256, %254 ], [ null, %230 ]
  %259 = tail call ptr @build_int_cst(ptr noundef %45, i64 noundef 1) #24
  %260 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %45, ptr noundef %258, ptr noundef %259) #24
  %261 = getelementptr inbounds %struct.tree_exp, ptr %260, i64 0, i32 1
  store i32 %19, ptr %261, align 8, !tbaa !17
  br label %38

262:                                              ; preds = %85, %85
  %263 = load i64, ptr %87, align 8
  %264 = and i64 %263, 65535
  %265 = icmp eq i64 %264, 23
  br i1 %265, label %266, label %628

266:                                              ; preds = %262
  %267 = load i64, ptr %88, align 8
  %268 = and i64 %267, 2097152
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %279

270:                                              ; preds = %266
  %271 = load i32, ptr @flag_wrapv, align 4
  %272 = icmp eq i32 %271, 0
  %273 = load i32, ptr @flag_trapv, align 4
  %274 = icmp eq i32 %273, 0
  %275 = select i1 %272, i1 %274, i1 false
  %276 = load i32, ptr @flag_strict_overflow, align 4
  %277 = icmp ne i32 %276, 0
  %278 = select i1 %275, i1 %277, i1 false
  br i1 %278, label %279, label %628

279:                                              ; preds = %270, %266
  %280 = icmp eq i64 %46, 64
  %281 = select i1 %280, i32 63, i32 64
  %282 = tail call fastcc ptr @range_binop(i32 noundef %281, ptr noundef nonnull %88, ptr noundef %35, i32 noundef 0, ptr noundef nonnull %87, i32 noundef 0)
  store ptr %282, ptr %7, align 8, !tbaa !6
  %283 = tail call fastcc ptr @range_binop(i32 noundef %281, ptr noundef nonnull %88, ptr noundef %36, i32 noundef 1, ptr noundef nonnull %87, i32 noundef 0)
  store ptr %283, ptr %8, align 8, !tbaa !6
  %284 = icmp eq ptr %282, null
  br i1 %284, label %289, label %285

285:                                              ; preds = %279
  %286 = load i64, ptr %282, align 8
  %287 = and i64 %286, 134217728
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %289, label %628

289:                                              ; preds = %285, %279
  %290 = icmp eq ptr %283, null
  br i1 %290, label %295, label %291

291:                                              ; preds = %289
  %292 = load i64, ptr %283, align 8
  %293 = and i64 %292, 134217728
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %628

295:                                              ; preds = %291, %289
  %296 = load i64, ptr %88, align 8
  %297 = and i64 %296, 2097152
  %298 = icmp eq i64 %297, 0
  %299 = load i32, ptr @flag_wrapv, align 4
  %300 = icmp eq i32 %299, 0
  %301 = select i1 %298, i1 %300, i1 false
  %302 = load i32, ptr @flag_trapv, align 4
  %303 = icmp eq i32 %302, 0
  %304 = select i1 %301, i1 %303, i1 false
  %305 = load i32, ptr @flag_strict_overflow, align 4
  %306 = icmp ne i32 %305, 0
  %307 = select i1 %304, i1 %306, i1 false
  br i1 %307, label %308, label %309

308:                                              ; preds = %295
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %309

309:                                              ; preds = %308, %295
  %310 = icmp ne ptr %282, null
  %311 = icmp ne ptr %283, null
  %312 = select i1 %310, i1 %311, i1 false
  br i1 %312, label %313, label %409

313:                                              ; preds = %309
  %314 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %283, ptr noundef nonnull %282) #24
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %409, label %316

316:                                              ; preds = %313
  %317 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %318 = icmp eq ptr %317, null
  br i1 %318, label %328, label %319

319:                                              ; preds = %316
  %320 = getelementptr inbounds %struct.tree_common, ptr %283, i64 0, i32 2
  %321 = load ptr, ptr %320, align 8, !tbaa !17
  %322 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %321, ptr noundef nonnull %317)
  %323 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 63, ptr noundef nonnull %88, ptr noundef nonnull %283, ptr noundef %322)
  %324 = icmp eq ptr %323, null
  br i1 %324, label %325, label %332

325:                                              ; preds = %319
  %326 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef nonnull %88, ptr noundef nonnull %283, ptr noundef %322) #24
  %327 = getelementptr inbounds %struct.tree_exp, ptr %326, i64 0, i32 1
  store i32 0, ptr %327, align 8, !tbaa !17
  br label %332

328:                                              ; preds = %316
  %329 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 63), align 4, !tbaa !17
  %330 = icmp eq i32 %329, 5
  br i1 %330, label %331, label %357

331:                                              ; preds = %328
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

332:                                              ; preds = %325, %319
  %333 = phi ptr [ %323, %319 ], [ %326, %325 ]
  %334 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %333) #24
  %335 = load i64, ptr %334, align 8
  %336 = and i64 %335, 65535
  %337 = icmp eq i64 %336, 23
  %338 = select i1 %337, ptr %334, ptr null
  %339 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %340 = icmp eq ptr %339, null
  br i1 %340, label %357, label %341

341:                                              ; preds = %332
  %342 = getelementptr inbounds %struct.tree_common, ptr %282, i64 0, i32 2
  %343 = load ptr, ptr %342, align 8, !tbaa !17
  %344 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %343, ptr noundef nonnull %339)
  %345 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef nonnull %88, ptr noundef nonnull %282, ptr noundef %344)
  %346 = icmp eq ptr %345, null
  br i1 %346, label %347, label %350

347:                                              ; preds = %341
  %348 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef nonnull %88, ptr noundef nonnull %282, ptr noundef %344) #24
  %349 = getelementptr inbounds %struct.tree_exp, ptr %348, i64 0, i32 1
  store i32 0, ptr %349, align 8, !tbaa !17
  br label %350

350:                                              ; preds = %341, %347
  %351 = phi ptr [ %345, %341 ], [ %348, %347 ]
  %352 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %351) #24
  %353 = load i64, ptr %352, align 8
  %354 = and i64 %353, 65535
  %355 = icmp eq i64 %354, 23
  %356 = select i1 %355, ptr %352, ptr null
  br label %362

357:                                              ; preds = %328, %332
  %358 = phi ptr [ %338, %332 ], [ null, %328 ]
  %359 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 64), align 4, !tbaa !17
  %360 = icmp eq i32 %359, 5
  br i1 %360, label %361, label %362

361:                                              ; preds = %357
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

362:                                              ; preds = %350, %357
  %363 = phi ptr [ %338, %350 ], [ %358, %357 ]
  %364 = phi ptr [ %356, %350 ], [ null, %357 ]
  %365 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %282, ptr noundef %363) #24
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %370, label %367

367:                                              ; preds = %362
  %368 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %283, ptr noundef %364) #24
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %370, label %409

370:                                              ; preds = %367, %362
  %371 = icmp eq i32 %27, 0
  %372 = zext i1 %371 to i32
  br label %409

373:                                              ; preds = %85, %85, %85
  %374 = getelementptr inbounds %struct.tree_type, ptr %88, i64 0, i32 6
  %375 = load i32, ptr %374, align 4
  %376 = and i32 %375, 1023
  %377 = getelementptr inbounds %struct.tree_type, ptr %45, i64 0, i32 6
  %378 = load i32, ptr %377, align 4
  %379 = and i32 %378, 1023
  %380 = icmp ugt i32 %376, %379
  br i1 %380, label %628, label %381

381:                                              ; preds = %373
  %382 = load i64, ptr %88, align 8
  %383 = trunc i64 %382 to i32
  %384 = and i32 %383, 65535
  %385 = add nsw i32 %384, -6
  %386 = icmp ult i32 %385, 3
  br i1 %386, label %387, label %628

387:                                              ; preds = %381
  %388 = icmp eq ptr %35, null
  br i1 %388, label %392, label %389

389:                                              ; preds = %387
  %390 = tail call i32 @int_fits_type_p(ptr noundef nonnull %35, ptr noundef nonnull %88) #24
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %628, label %392

392:                                              ; preds = %389, %387
  %393 = icmp eq ptr %36, null
  br i1 %393, label %397, label %394

394:                                              ; preds = %392
  %395 = tail call i32 @int_fits_type_p(ptr noundef nonnull %36, ptr noundef nonnull %88) #24
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %628, label %397

397:                                              ; preds = %394, %392
  store ptr %35, ptr %7, align 8, !tbaa !6
  store ptr %36, ptr %8, align 8, !tbaa !6
  br i1 %388, label %400, label %398

398:                                              ; preds = %397
  %399 = tail call ptr @fold_convert_loc(i32 noundef %19, ptr noundef nonnull %88, ptr noundef nonnull %35)
  store ptr %399, ptr %7, align 8, !tbaa !6
  br label %400

400:                                              ; preds = %398, %397
  %401 = phi ptr [ %399, %398 ], [ null, %397 ]
  br i1 %393, label %404, label %402

402:                                              ; preds = %400
  %403 = tail call ptr @fold_convert_loc(i32 noundef %19, ptr noundef nonnull %88, ptr noundef nonnull %36)
  store ptr %403, ptr %8, align 8, !tbaa !6
  br label %404

404:                                              ; preds = %402, %400
  %405 = phi ptr [ %403, %402 ], [ null, %400 ]
  %406 = load i64, ptr %45, align 8
  %407 = and i64 %406, 2097152
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %413, label %409

409:                                              ; preds = %404, %413, %623, %370, %367, %313, %309, %120, %127, %170, %142, %135, %90
  %410 = phi i32 [ %27, %404 ], [ %27, %413 ], [ %625, %623 ], [ %372, %370 ], [ %27, %367 ], [ %27, %313 ], [ %27, %309 ], [ %121, %120 ], [ %121, %127 ], [ %147, %170 ], [ %136, %142 ], [ %136, %135 ], [ %92, %90 ]
  %411 = phi ptr [ %401, %404 ], [ %401, %413 ], [ %626, %623 ], [ %363, %370 ], [ null, %367 ], [ %282, %313 ], [ %282, %309 ], [ %122, %120 ], [ %122, %127 ], [ %172, %170 ], [ %137, %142 ], [ %137, %135 ], [ %35, %90 ]
  %412 = phi ptr [ %405, %404 ], [ %405, %413 ], [ %627, %623 ], [ %364, %370 ], [ null, %367 ], [ %283, %313 ], [ %283, %309 ], [ %123, %120 ], [ %123, %127 ], [ %171, %170 ], [ null, %142 ], [ %138, %135 ], [ %36, %90 ]
  br label %23

413:                                              ; preds = %404
  %414 = load i64, ptr %88, align 8
  %415 = and i64 %414, 2097152
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %409, label %417

417:                                              ; preds = %413
  %418 = and i64 %414, 65535
  %419 = icmp eq i64 %418, 14
  br i1 %419, label %420, label %423

420:                                              ; preds = %417
  %421 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %422 = load i64, ptr %88, align 8
  br label %427

423:                                              ; preds = %417
  %424 = load i32, ptr %374, align 4
  %425 = lshr i32 %424, 16
  %426 = and i32 %425, 255
  br label %427

427:                                              ; preds = %423, %420
  %428 = phi i64 [ %422, %420 ], [ %414, %423 ]
  %429 = phi i32 [ %421, %420 ], [ %426, %423 ]
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %430
  %432 = load i8, ptr %431, align 1, !tbaa !17
  %433 = icmp eq i8 %432, 4
  br i1 %433, label %553, label %434

434:                                              ; preds = %427
  %435 = and i64 %428, 65535
  %436 = icmp eq i64 %435, 14
  br i1 %436, label %437, label %440

437:                                              ; preds = %434
  %438 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %439 = load i64, ptr %88, align 8
  br label %444

440:                                              ; preds = %434
  %441 = load i32, ptr %374, align 4
  %442 = lshr i32 %441, 16
  %443 = and i32 %442, 255
  br label %444

444:                                              ; preds = %440, %437
  %445 = phi i64 [ %439, %437 ], [ %428, %440 ]
  %446 = phi i32 [ %438, %437 ], [ %443, %440 ]
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %447
  %449 = load i8, ptr %448, align 1, !tbaa !17
  %450 = icmp eq i8 %449, 13
  br i1 %450, label %553, label %451

451:                                              ; preds = %444
  %452 = and i64 %445, 65535
  %453 = icmp eq i64 %452, 14
  br i1 %453, label %454, label %457

454:                                              ; preds = %451
  %455 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %456 = load i64, ptr %88, align 8
  br label %461

457:                                              ; preds = %451
  %458 = load i32, ptr %374, align 4
  %459 = lshr i32 %458, 16
  %460 = and i32 %459, 255
  br label %461

461:                                              ; preds = %457, %454
  %462 = phi i64 [ %456, %454 ], [ %445, %457 ]
  %463 = phi i32 [ %455, %454 ], [ %460, %457 ]
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %464
  %466 = load i8, ptr %465, align 1, !tbaa !17
  %467 = icmp eq i8 %466, 6
  br i1 %467, label %553, label %468

468:                                              ; preds = %461
  %469 = and i64 %462, 65535
  %470 = icmp eq i64 %469, 14
  br i1 %470, label %471, label %474

471:                                              ; preds = %468
  %472 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %473 = load i64, ptr %88, align 8
  br label %478

474:                                              ; preds = %468
  %475 = load i32, ptr %374, align 4
  %476 = lshr i32 %475, 16
  %477 = and i32 %476, 255
  br label %478

478:                                              ; preds = %474, %471
  %479 = phi i64 [ %473, %471 ], [ %462, %474 ]
  %480 = phi i32 [ %472, %471 ], [ %477, %474 ]
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %481
  %483 = load i8, ptr %482, align 1, !tbaa !17
  %484 = icmp eq i8 %483, 15
  br i1 %484, label %553, label %485

485:                                              ; preds = %478
  %486 = and i64 %479, 65535
  %487 = icmp eq i64 %486, 14
  br i1 %487, label %488, label %491

488:                                              ; preds = %485
  %489 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %490 = load i64, ptr %88, align 8
  br label %495

491:                                              ; preds = %485
  %492 = load i32, ptr %374, align 4
  %493 = lshr i32 %492, 16
  %494 = and i32 %493, 255
  br label %495

495:                                              ; preds = %491, %488
  %496 = phi i64 [ %490, %488 ], [ %479, %491 ]
  %497 = phi i32 [ %489, %488 ], [ %494, %491 ]
  %498 = zext i32 %497 to i64
  %499 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %498
  %500 = load i8, ptr %499, align 1, !tbaa !17
  %501 = icmp eq i8 %500, 5
  br i1 %501, label %553, label %502

502:                                              ; preds = %495
  %503 = and i64 %496, 65535
  %504 = icmp eq i64 %503, 14
  br i1 %504, label %505, label %508

505:                                              ; preds = %502
  %506 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %507 = load i64, ptr %88, align 8
  br label %512

508:                                              ; preds = %502
  %509 = load i32, ptr %374, align 4
  %510 = lshr i32 %509, 16
  %511 = and i32 %510, 255
  br label %512

512:                                              ; preds = %508, %505
  %513 = phi i64 [ %507, %505 ], [ %496, %508 ]
  %514 = phi i32 [ %506, %505 ], [ %511, %508 ]
  %515 = zext i32 %514 to i64
  %516 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %515
  %517 = load i8, ptr %516, align 1, !tbaa !17
  %518 = icmp eq i8 %517, 14
  br i1 %518, label %553, label %519

519:                                              ; preds = %512
  %520 = and i64 %513, 65535
  %521 = icmp eq i64 %520, 14
  br i1 %521, label %522, label %525

522:                                              ; preds = %519
  %523 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %524 = load i64, ptr %88, align 8
  br label %529

525:                                              ; preds = %519
  %526 = load i32, ptr %374, align 4
  %527 = lshr i32 %526, 16
  %528 = and i32 %527, 255
  br label %529

529:                                              ; preds = %525, %522
  %530 = phi i64 [ %524, %522 ], [ %513, %525 ]
  %531 = phi i32 [ %523, %522 ], [ %528, %525 ]
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %532
  %534 = load i8, ptr %533, align 1, !tbaa !17
  %535 = icmp eq i8 %534, 7
  br i1 %535, label %553, label %536

536:                                              ; preds = %529
  %537 = and i64 %530, 65535
  %538 = icmp eq i64 %537, 14
  br i1 %538, label %539, label %542

539:                                              ; preds = %536
  %540 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %541 = load i64, ptr %88, align 8
  br label %546

542:                                              ; preds = %536
  %543 = load i32, ptr %374, align 4
  %544 = lshr i32 %543, 16
  %545 = and i32 %544, 255
  br label %546

546:                                              ; preds = %542, %539
  %547 = phi i64 [ %541, %539 ], [ %530, %542 ]
  %548 = phi i32 [ %540, %539 ], [ %545, %542 ]
  %549 = zext i32 %548 to i64
  %550 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %549
  %551 = load i8, ptr %550, align 1, !tbaa !17
  %552 = icmp eq i8 %551, 16
  br i1 %552, label %553, label %571

553:                                              ; preds = %546, %529, %512, %495, %478, %461, %444, %427
  %554 = phi i64 [ %547, %546 ], [ %530, %529 ], [ %513, %512 ], [ %496, %495 ], [ %479, %478 ], [ %462, %461 ], [ %445, %444 ], [ %428, %427 ]
  %555 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %556 = and i64 %554, 65535
  %557 = icmp eq i64 %556, 14
  br i1 %557, label %558, label %561

558:                                              ; preds = %553
  %559 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  %560 = load i64, ptr %88, align 8
  br label %565

561:                                              ; preds = %553
  %562 = load i32, ptr %374, align 4
  %563 = lshr i32 %562, 16
  %564 = and i32 %563, 255
  br label %565

565:                                              ; preds = %561, %558
  %566 = phi i64 [ %560, %558 ], [ %554, %561 ]
  %567 = phi i32 [ %559, %558 ], [ %564, %561 ]
  %568 = trunc i64 %566 to i32
  %569 = lshr i32 %568, 31
  %570 = tail call ptr %555(i32 noundef %567, i32 noundef %569) #24
  br label %584

571:                                              ; preds = %546
  %572 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %573 = and i64 %547, 65535
  %574 = icmp eq i64 %573, 14
  br i1 %574, label %575, label %577

575:                                              ; preds = %571
  %576 = tail call i32 @vector_type_mode(ptr noundef nonnull %88) #24
  br label %581

577:                                              ; preds = %571
  %578 = load i32, ptr %374, align 4
  %579 = lshr i32 %578, 16
  %580 = and i32 %579, 255
  br label %581

581:                                              ; preds = %577, %575
  %582 = phi i32 [ %576, %575 ], [ %580, %577 ]
  %583 = tail call ptr %572(i32 noundef %582, i32 noundef 1) #24
  br label %584

584:                                              ; preds = %581, %565
  %585 = phi ptr [ %570, %565 ], [ %583, %581 ]
  %586 = getelementptr inbounds %struct.tree_type, ptr %585, i64 0, i32 14
  %587 = load ptr, ptr %586, align 8, !tbaa !17
  %588 = icmp eq ptr %587, null
  br i1 %588, label %589, label %592

589:                                              ; preds = %584
  %590 = getelementptr inbounds %struct.tree_type, ptr %88, i64 0, i32 14
  %591 = load ptr, ptr %590, align 8, !tbaa !17
  br label %592

592:                                              ; preds = %584, %589
  %593 = phi ptr [ %591, %589 ], [ %587, %584 ]
  %594 = load i32, ptr %377, align 4
  %595 = load i32, ptr %374, align 4
  %596 = xor i32 %595, %594
  %597 = and i32 %596, 1023
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %599, label %607

599:                                              ; preds = %592
  %600 = tail call ptr @fold_convert_loc(i32 noundef %19, ptr noundef nonnull %88, ptr noundef %593)
  %601 = tail call ptr @build_int_cst(ptr noundef nonnull %88, i64 noundef 1) #24
  %602 = tail call ptr @fold_binary_loc(i32 noundef %19, i32 noundef 84, ptr noundef nonnull %88, ptr noundef %600, ptr noundef %601)
  %603 = icmp eq ptr %602, null
  br i1 %603, label %604, label %607

604:                                              ; preds = %599
  %605 = tail call ptr @build2_stat(i32 noundef 84, ptr noundef nonnull %88, ptr noundef %600, ptr noundef %601) #24
  %606 = getelementptr inbounds %struct.tree_exp, ptr %605, i64 0, i32 1
  store i32 %19, ptr %606, align 8, !tbaa !17
  br label %607

607:                                              ; preds = %604, %599, %592
  %608 = phi ptr [ %593, %592 ], [ %602, %599 ], [ %605, %604 ]
  %609 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %610 = tail call ptr @fold_convert_loc(i32 noundef %19, ptr noundef nonnull %88, ptr noundef %609)
  br i1 %388, label %617, label %611

611:                                              ; preds = %607
  %612 = call zeroext i8 @merge_ranges(ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef 1, ptr noundef %401, ptr noundef %405, i32 noundef 1, ptr noundef %610, ptr noundef %608), !range !40
  %613 = icmp eq i8 %612, 0
  br i1 %613, label %628, label %614

614:                                              ; preds = %611
  %615 = load i32, ptr %6, align 4, !tbaa !21
  %616 = icmp eq i32 %615, %27
  br label %623

617:                                              ; preds = %607
  %618 = call zeroext i8 @merge_ranges(ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, i32 noundef 0, ptr noundef %401, ptr noundef %405, i32 noundef 1, ptr noundef %610, ptr noundef %608), !range !40
  %619 = icmp eq i8 %618, 0
  br i1 %619, label %636, label %620

620:                                              ; preds = %617
  %621 = load i32, ptr %6, align 4, !tbaa !21
  %622 = icmp ne i32 %27, %621
  br label %623

623:                                              ; preds = %614, %620
  %624 = phi i1 [ %616, %614 ], [ %622, %620 ]
  %625 = zext i1 %624 to i32
  %626 = load ptr, ptr %7, align 8, !tbaa !6
  %627 = load ptr, ptr %8, align 8, !tbaa !6
  br label %409

628:                                              ; preds = %389, %394, %373, %285, %291, %270, %262, %131, %93, %97, %100, %103, %381, %611, %85
  %629 = phi i32 [ %27, %85 ], [ %27, %389 ], [ %27, %394 ], [ %27, %373 ], [ %27, %285 ], [ %27, %291 ], [ %27, %270 ], [ %27, %262 ], [ %121, %131 ], [ %27, %93 ], [ %27, %97 ], [ %27, %100 ], [ %27, %103 ], [ %27, %381 ], [ %27, %611 ]
  %630 = phi ptr [ %35, %85 ], [ %35, %389 ], [ %35, %394 ], [ %35, %373 ], [ %35, %285 ], [ %35, %291 ], [ %35, %270 ], [ %35, %262 ], [ %122, %131 ], [ %35, %93 ], [ %35, %97 ], [ %35, %100 ], [ %35, %103 ], [ %35, %381 ], [ %35, %611 ]
  %631 = phi ptr [ %36, %85 ], [ %36, %389 ], [ %36, %394 ], [ %36, %373 ], [ %36, %285 ], [ %36, %291 ], [ %36, %270 ], [ %36, %262 ], [ %123, %131 ], [ %36, %93 ], [ %36, %97 ], [ %36, %100 ], [ %36, %103 ], [ %36, %381 ], [ %36, %611 ]
  %632 = getelementptr inbounds %struct.tree_common, ptr %42, i64 0, i32 2
  %633 = load i64, ptr %42, align 8
  %634 = and i64 %633, 65535
  %635 = icmp eq i64 %634, 23
  br i1 %635, label %641, label %710

636:                                              ; preds = %617
  %637 = getelementptr inbounds %struct.tree_common, ptr %42, i64 0, i32 2
  %638 = load i64, ptr %42, align 8
  %639 = and i64 %638, 65535
  %640 = icmp eq i64 %639, 23
  br i1 %640, label %661, label %710

641:                                              ; preds = %628
  %642 = icmp eq ptr %630, null
  br i1 %642, label %661, label %643

643:                                              ; preds = %641
  %644 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %645 = icmp eq ptr %644, null
  %646 = load ptr, ptr %632, align 8, !tbaa !17
  %647 = select i1 %645, ptr %646, ptr %644
  %648 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %646, ptr noundef nonnull %630)
  %649 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 100, ptr noundef %647, ptr noundef nonnull %42, ptr noundef %648)
  %650 = icmp eq ptr %649, null
  br i1 %650, label %651, label %654

651:                                              ; preds = %643
  %652 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %647, ptr noundef nonnull %42, ptr noundef %648) #24
  %653 = getelementptr inbounds %struct.tree_exp, ptr %652, i64 0, i32 1
  store i32 0, ptr %653, align 8, !tbaa !17
  br label %654

654:                                              ; preds = %643, %651
  %655 = phi ptr [ %649, %643 ], [ %652, %651 ]
  %656 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %655) #24
  %657 = load i64, ptr %656, align 8
  %658 = and i64 %657, 65535
  %659 = icmp eq i64 %658, 23
  %660 = select i1 %659, ptr %656, ptr null
  br label %669

661:                                              ; preds = %636, %641
  %662 = phi ptr [ %632, %641 ], [ %637, %636 ]
  %663 = phi i32 [ %629, %641 ], [ %27, %636 ]
  %664 = phi ptr [ %631, %641 ], [ %36, %636 ]
  %665 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 100), align 4, !tbaa !17
  %666 = icmp eq i32 %665, 5
  %667 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %668 = select i1 %666, ptr %667, ptr null
  br label %669

669:                                              ; preds = %661, %654
  %670 = phi ptr [ %632, %654 ], [ %662, %661 ]
  %671 = phi i32 [ %629, %654 ], [ %663, %661 ]
  %672 = phi ptr [ %631, %654 ], [ %664, %661 ]
  %673 = phi ptr [ %660, %654 ], [ %668, %661 ]
  %674 = tail call i32 @integer_onep(ptr noundef %673) #24
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %706, label %676

676:                                              ; preds = %669
  %677 = icmp eq ptr %672, null
  br i1 %677, label %696, label %678

678:                                              ; preds = %676
  %679 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %680 = icmp eq ptr %679, null
  %681 = load ptr, ptr %670, align 8, !tbaa !17
  %682 = select i1 %680, ptr %681, ptr %679
  %683 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %681, ptr noundef nonnull %672)
  %684 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 98, ptr noundef %682, ptr noundef nonnull %42, ptr noundef %683)
  %685 = icmp eq ptr %684, null
  br i1 %685, label %686, label %689

686:                                              ; preds = %678
  %687 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %682, ptr noundef nonnull %42, ptr noundef %683) #24
  %688 = getelementptr inbounds %struct.tree_exp, ptr %687, i64 0, i32 1
  store i32 0, ptr %688, align 8, !tbaa !17
  br label %689

689:                                              ; preds = %678, %686
  %690 = phi ptr [ %684, %678 ], [ %687, %686 ]
  %691 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %690) #24
  %692 = load i64, ptr %691, align 8
  %693 = and i64 %692, 65535
  %694 = icmp eq i64 %693, 23
  %695 = select i1 %694, ptr %691, ptr null
  br label %701

696:                                              ; preds = %676
  %697 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 98), align 4, !tbaa !17
  %698 = icmp eq i32 %697, 5
  %699 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %700 = select i1 %698, ptr %699, ptr null
  br label %701

701:                                              ; preds = %696, %689
  %702 = phi ptr [ %695, %689 ], [ %700, %696 ]
  %703 = tail call i32 @integer_onep(ptr noundef %702) #24
  %704 = icmp ne i32 %703, 0
  %705 = zext i1 %704 to i32
  br label %706

706:                                              ; preds = %701, %669
  %707 = phi i32 [ 0, %669 ], [ %705, %701 ]
  %708 = icmp eq i32 %671, %707
  %709 = zext i1 %708 to i32
  br label %710

710:                                              ; preds = %636, %706, %628
  %711 = phi i32 [ %709, %706 ], [ %629, %628 ], [ %27, %636 ]
  %712 = phi ptr [ null, %706 ], [ %630, %628 ], [ null, %636 ]
  %713 = phi ptr [ null, %706 ], [ %631, %628 ], [ %36, %636 ]
  %714 = phi ptr [ null, %706 ], [ %42, %628 ], [ %42, %636 ]
  store i32 %711, ptr %1, align 4, !tbaa !21
  store ptr %712, ptr %2, align 8, !tbaa !6
  store ptr %713, ptr %3, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #24
  ret ptr %714
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @merge_ranges(ptr nocapture noundef writeonly %0, ptr nocapture noundef writeonly %1, ptr nocapture noundef writeonly %2, i32 noundef %3, ptr noundef %4, ptr noundef %5, i32 noundef %6, ptr noundef %7, ptr noundef %8) local_unnamed_addr #10 {
  %10 = icmp eq ptr %4, null
  %11 = icmp eq ptr %7, null
  %12 = and i1 %10, %11
  br i1 %12, label %48, label %13

13:                                               ; preds = %9
  %14 = icmp ne ptr %4, null
  %15 = icmp ne ptr %7, null
  %16 = and i1 %14, %15
  br i1 %16, label %17, label %36

17:                                               ; preds = %13
  %18 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %19 = icmp eq ptr %18, null
  %20 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = select i1 %19, ptr %21, ptr %18
  %23 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %21, ptr noundef nonnull %7)
  %24 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 101, ptr noundef %22, ptr noundef nonnull %4, ptr noundef %23)
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %29

26:                                               ; preds = %17
  %27 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %22, ptr noundef nonnull %4, ptr noundef %23) #24
  %28 = getelementptr inbounds %struct.tree_exp, ptr %27, i64 0, i32 1
  store i32 0, ptr %28, align 8, !tbaa !17
  br label %29

29:                                               ; preds = %17, %26
  %30 = phi ptr [ %24, %17 ], [ %27, %26 ]
  %31 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %30) #24
  %32 = load i64, ptr %31, align 8
  %33 = and i64 %32, 65535
  %34 = icmp eq i64 %33, 23
  %35 = select i1 %34, ptr %31, ptr null
  br label %44

36:                                               ; preds = %13
  %37 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 101), align 4, !tbaa !17
  %38 = icmp eq i32 %37, 5
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = xor i1 %14, %15
  %41 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %42 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %43 = select i1 %40, ptr %42, ptr %41
  br label %44

44:                                               ; preds = %29, %36, %39
  %45 = phi ptr [ %35, %29 ], [ %43, %39 ], [ null, %36 ]
  %46 = tail call i32 @integer_onep(ptr noundef %45) #24
  %47 = icmp ne i32 %46, 0
  br label %48

48:                                               ; preds = %9, %44
  %49 = phi i1 [ %47, %44 ], [ true, %9 ]
  %50 = icmp eq ptr %5, null
  %51 = icmp eq ptr %8, null
  %52 = and i1 %50, %51
  br i1 %52, label %88, label %53

53:                                               ; preds = %48
  %54 = icmp ne ptr %5, null
  %55 = icmp ne ptr %8, null
  %56 = and i1 %54, %55
  br i1 %56, label %57, label %76

57:                                               ; preds = %53
  %58 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %59 = icmp eq ptr %58, null
  %60 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = select i1 %59, ptr %61, ptr %58
  %63 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %61, ptr noundef nonnull %8)
  %64 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 101, ptr noundef %62, ptr noundef nonnull %5, ptr noundef %63)
  %65 = icmp eq ptr %64, null
  br i1 %65, label %66, label %69

66:                                               ; preds = %57
  %67 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %62, ptr noundef nonnull %5, ptr noundef %63) #24
  %68 = getelementptr inbounds %struct.tree_exp, ptr %67, i64 0, i32 1
  store i32 0, ptr %68, align 8, !tbaa !17
  br label %69

69:                                               ; preds = %57, %66
  %70 = phi ptr [ %64, %57 ], [ %67, %66 ]
  %71 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %70) #24
  %72 = load i64, ptr %71, align 8
  %73 = and i64 %72, 65535
  %74 = icmp eq i64 %73, 23
  %75 = select i1 %74, ptr %71, ptr null
  br label %84

76:                                               ; preds = %53
  %77 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 101), align 4, !tbaa !17
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %79, label %84

79:                                               ; preds = %76
  %80 = xor i1 %54, %55
  %81 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %82 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %83 = select i1 %80, ptr %82, ptr %81
  br label %84

84:                                               ; preds = %69, %76, %79
  %85 = phi ptr [ %75, %69 ], [ %83, %79 ], [ null, %76 ]
  %86 = tail call i32 @integer_onep(ptr noundef %85) #24
  %87 = icmp ne i32 %86, 0
  br label %88

88:                                               ; preds = %48, %84
  %89 = phi i1 [ %87, %84 ], [ true, %48 ]
  %90 = icmp ne ptr %4, null
  %91 = icmp ne ptr %7, null
  %92 = and i1 %90, %91
  br i1 %92, label %93, label %112

93:                                               ; preds = %88
  %94 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %95 = icmp eq ptr %94, null
  %96 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %97 = load ptr, ptr %96, align 8, !tbaa !17
  %98 = select i1 %95, ptr %97, ptr %94
  %99 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %97, ptr noundef nonnull %7)
  %100 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 99, ptr noundef %98, ptr noundef nonnull %4, ptr noundef %99)
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %105

102:                                              ; preds = %93
  %103 = tail call ptr @build2_stat(i32 noundef 99, ptr noundef %98, ptr noundef nonnull %4, ptr noundef %99) #24
  %104 = getelementptr inbounds %struct.tree_exp, ptr %103, i64 0, i32 1
  store i32 0, ptr %104, align 8, !tbaa !17
  br label %105

105:                                              ; preds = %93, %102
  %106 = phi ptr [ %100, %93 ], [ %103, %102 ]
  %107 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %106) #24
  %108 = load i64, ptr %107, align 8
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 23
  %111 = select i1 %110, ptr %107, ptr null
  br label %121

112:                                              ; preds = %88
  %113 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 99), align 4, !tbaa !17
  %114 = icmp eq i32 %113, 5
  br i1 %114, label %115, label %121

115:                                              ; preds = %112
  %116 = xor i1 %90, true
  %117 = or i1 %91, %116
  %118 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %119 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %120 = select i1 %117, ptr %119, ptr %118
  br label %121

121:                                              ; preds = %105, %112, %115
  %122 = phi ptr [ %111, %105 ], [ %120, %115 ], [ null, %112 ]
  %123 = tail call i32 @integer_onep(ptr noundef %122) #24
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %162

125:                                              ; preds = %121
  br i1 %49, label %126, label %163

126:                                              ; preds = %125
  %127 = icmp ne ptr %8, null
  %128 = icmp ne ptr %5, null
  %129 = and i1 %128, %127
  br i1 %129, label %130, label %149

130:                                              ; preds = %126
  %131 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %132 = icmp eq ptr %131, null
  %133 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %134 = load ptr, ptr %133, align 8, !tbaa !17
  %135 = select i1 %132, ptr %134, ptr %131
  %136 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %134, ptr noundef nonnull %5)
  %137 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 99, ptr noundef %135, ptr noundef nonnull %8, ptr noundef %136)
  %138 = icmp eq ptr %137, null
  br i1 %138, label %139, label %142

139:                                              ; preds = %130
  %140 = tail call ptr @build2_stat(i32 noundef 99, ptr noundef %135, ptr noundef nonnull %8, ptr noundef %136) #24
  %141 = getelementptr inbounds %struct.tree_exp, ptr %140, i64 0, i32 1
  store i32 0, ptr %141, align 8, !tbaa !17
  br label %142

142:                                              ; preds = %130, %139
  %143 = phi ptr [ %137, %130 ], [ %140, %139 ]
  %144 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %143) #24
  %145 = load i64, ptr %144, align 8
  %146 = and i64 %145, 65535
  %147 = icmp eq i64 %146, 23
  %148 = select i1 %147, ptr %144, ptr null
  br label %158

149:                                              ; preds = %126
  %150 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 99), align 4, !tbaa !17
  %151 = icmp eq i32 %150, 5
  br i1 %151, label %152, label %158

152:                                              ; preds = %149
  %153 = xor i1 %128, true
  %154 = or i1 %127, %153
  %155 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %156 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %157 = select i1 %154, ptr %156, ptr %155
  br label %158

158:                                              ; preds = %142, %149, %152
  %159 = phi ptr [ %148, %142 ], [ %157, %152 ], [ null, %149 ]
  %160 = tail call i32 @integer_onep(ptr noundef %159) #24
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %163, label %162

162:                                              ; preds = %158, %121
  br label %163

163:                                              ; preds = %162, %158, %125
  %164 = phi ptr [ %5, %162 ], [ %8, %158 ], [ %8, %125 ]
  %165 = phi ptr [ %4, %162 ], [ %7, %158 ], [ %7, %125 ]
  %166 = phi i32 [ %3, %162 ], [ %6, %158 ], [ %6, %125 ]
  %167 = phi ptr [ %8, %162 ], [ %5, %158 ], [ %5, %125 ]
  %168 = phi ptr [ %7, %162 ], [ %4, %158 ], [ %4, %125 ]
  %169 = phi i32 [ %6, %162 ], [ %3, %158 ], [ %3, %125 ]
  %170 = icmp ne ptr %167, null
  %171 = icmp ne ptr %165, null
  %172 = and i1 %171, %170
  br i1 %172, label %173, label %192

173:                                              ; preds = %163
  %174 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %175 = icmp eq ptr %174, null
  %176 = getelementptr inbounds %struct.tree_common, ptr %167, i64 0, i32 2
  %177 = load ptr, ptr %176, align 8, !tbaa !17
  %178 = select i1 %175, ptr %177, ptr %174
  %179 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %177, ptr noundef nonnull %165)
  %180 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 97, ptr noundef %178, ptr noundef nonnull %167, ptr noundef %179)
  %181 = icmp eq ptr %180, null
  br i1 %181, label %182, label %185

182:                                              ; preds = %173
  %183 = tail call ptr @build2_stat(i32 noundef 97, ptr noundef %178, ptr noundef nonnull %167, ptr noundef %179) #24
  %184 = getelementptr inbounds %struct.tree_exp, ptr %183, i64 0, i32 1
  store i32 0, ptr %184, align 8, !tbaa !17
  br label %185

185:                                              ; preds = %173, %182
  %186 = phi ptr [ %180, %173 ], [ %183, %182 ]
  %187 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %186) #24
  %188 = load i64, ptr %187, align 8
  %189 = and i64 %188, 65535
  %190 = icmp eq i64 %189, 23
  %191 = select i1 %190, ptr %187, ptr null
  br label %197

192:                                              ; preds = %163
  %193 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 97), align 4, !tbaa !17
  %194 = icmp eq i32 %193, 5
  %195 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %196 = select i1 %194, ptr %195, ptr null
  br label %197

197:                                              ; preds = %192, %185
  %198 = phi ptr [ %191, %185 ], [ %196, %192 ]
  %199 = tail call i32 @integer_onep(ptr noundef %198) #24
  %200 = icmp ne ptr %164, null
  %201 = and i1 %200, %170
  br i1 %201, label %202, label %221

202:                                              ; preds = %197
  %203 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %204 = icmp eq ptr %203, null
  %205 = getelementptr inbounds %struct.tree_common, ptr %164, i64 0, i32 2
  %206 = load ptr, ptr %205, align 8, !tbaa !17
  %207 = select i1 %204, ptr %206, ptr %203
  %208 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %206, ptr noundef nonnull %167)
  %209 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 98, ptr noundef %207, ptr noundef nonnull %164, ptr noundef %208)
  %210 = icmp eq ptr %209, null
  br i1 %210, label %211, label %214

211:                                              ; preds = %202
  %212 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %207, ptr noundef nonnull %164, ptr noundef %208) #24
  %213 = getelementptr inbounds %struct.tree_exp, ptr %212, i64 0, i32 1
  store i32 0, ptr %213, align 8, !tbaa !17
  br label %214

214:                                              ; preds = %202, %211
  %215 = phi ptr [ %209, %202 ], [ %212, %211 ]
  %216 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %215) #24
  %217 = load i64, ptr %216, align 8
  %218 = and i64 %217, 65535
  %219 = icmp eq i64 %218, 23
  %220 = select i1 %219, ptr %216, ptr null
  br label %230

221:                                              ; preds = %197
  %222 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 98), align 4, !tbaa !17
  %223 = icmp eq i32 %222, 5
  br i1 %223, label %224, label %230

224:                                              ; preds = %221
  %225 = xor i1 %200, true
  %226 = and i1 %170, %225
  %227 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %228 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %229 = select i1 %226, ptr %228, ptr %227
  br label %230

230:                                              ; preds = %214, %221, %224
  %231 = phi ptr [ %220, %214 ], [ %229, %224 ], [ null, %221 ]
  %232 = tail call i32 @integer_onep(ptr noundef %231) #24
  %233 = icmp ne i32 %169, 0
  %234 = icmp ne i32 %166, 0
  %235 = and i1 %234, %233
  br i1 %235, label %236, label %241

236:                                              ; preds = %230
  %237 = icmp eq i32 %199, 0
  br i1 %237, label %238, label %448

238:                                              ; preds = %236
  %239 = icmp eq i32 %232, 0
  %240 = select i1 %239, ptr %167, ptr %164
  br label %448

241:                                              ; preds = %230
  %242 = icmp eq i32 %169, 0
  %243 = or i1 %234, %242
  br i1 %243, label %274, label %244

244:                                              ; preds = %241
  %245 = icmp eq i32 %199, 0
  br i1 %245, label %246, label %448

246:                                              ; preds = %244
  %247 = select i1 %49, i1 %89, i1 false
  br i1 %247, label %448, label %248

248:                                              ; preds = %246
  %249 = icmp ne i32 %232, 0
  %250 = select i1 %249, i1 %49, i1 false
  br i1 %250, label %251, label %268

251:                                              ; preds = %248
  %252 = getelementptr inbounds %struct.tree_common, ptr %164, i64 0, i32 2
  %253 = load ptr, ptr %252, align 8, !tbaa !17
  %254 = load i64, ptr %253, align 8
  %255 = trunc i64 %254 to i32
  %256 = and i32 %255, 65535
  %257 = add nsw i32 %256, -6
  %258 = icmp ult i32 %257, 3
  br i1 %258, label %259, label %264

259:                                              ; preds = %251
  %260 = getelementptr inbounds %struct.tree_type, ptr %253, i64 0, i32 14
  %261 = load ptr, ptr %260, align 8, !tbaa !17
  %262 = tail call i32 @operand_equal_p(ptr noundef nonnull %164, ptr noundef %261, i32 noundef 0)
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %264, label %452

264:                                              ; preds = %251, %259
  %265 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %266 = tail call fastcc ptr @range_binop(i32 noundef 63, ptr noundef null, ptr noundef nonnull %164, i32 noundef 0, ptr noundef %265, i32 noundef 0)
  %267 = icmp eq ptr %266, null
  br i1 %267, label %452, label %448

268:                                              ; preds = %248
  %269 = icmp eq i32 %232, 0
  %270 = select i1 %269, i1 true, i1 %89
  br i1 %270, label %271, label %452

271:                                              ; preds = %268
  %272 = tail call fastcc ptr @range_predecessor(ptr noundef %165)
  %273 = icmp eq ptr %272, null
  br i1 %273, label %452, label %448

274:                                              ; preds = %241
  %275 = and i1 %234, %242
  %276 = icmp eq i32 %199, 0
  br i1 %275, label %277, label %298

277:                                              ; preds = %274
  br i1 %276, label %278, label %448

278:                                              ; preds = %277
  %279 = icmp ne i32 %232, 0
  %280 = select i1 %279, i1 true, i1 %89
  br i1 %280, label %448, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds %struct.tree_common, ptr %167, i64 0, i32 2
  %283 = load ptr, ptr %282, align 8, !tbaa !17
  %284 = load i64, ptr %283, align 8
  %285 = trunc i64 %284 to i32
  %286 = and i32 %285, 65535
  %287 = add nsw i32 %286, -6
  %288 = icmp ult i32 %287, 3
  br i1 %288, label %289, label %294

289:                                              ; preds = %281
  %290 = getelementptr inbounds %struct.tree_type, ptr %283, i64 0, i32 14
  %291 = load ptr, ptr %290, align 8, !tbaa !17
  %292 = tail call i32 @operand_equal_p(ptr noundef nonnull %167, ptr noundef %291, i32 noundef 0)
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %452

294:                                              ; preds = %281, %289
  %295 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %296 = tail call fastcc ptr @range_binop(i32 noundef 63, ptr noundef null, ptr noundef nonnull %167, i32 noundef 0, ptr noundef %295, i32 noundef 0)
  %297 = icmp eq ptr %296, null
  br i1 %297, label %452, label %448

298:                                              ; preds = %274
  br i1 %276, label %445, label %299

299:                                              ; preds = %298
  %300 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %301 = getelementptr inbounds %struct.tree_common, ptr %167, i64 0, i32 2
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  %303 = load i64, ptr %302, align 8
  %304 = trunc i64 %303 to i32
  %305 = and i32 %304, 65535
  %306 = add nsw i32 %305, -6
  %307 = icmp ult i32 %306, 3
  br i1 %307, label %308, label %313

308:                                              ; preds = %299
  %309 = getelementptr inbounds %struct.tree_type, ptr %302, i64 0, i32 14
  %310 = load ptr, ptr %309, align 8, !tbaa !17
  %311 = tail call i32 @operand_equal_p(ptr noundef nonnull %167, ptr noundef %310, i32 noundef 0)
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %336

313:                                              ; preds = %299, %308
  %314 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %315 = tail call fastcc ptr @range_binop(i32 noundef 63, ptr noundef null, ptr noundef nonnull %167, i32 noundef 0, ptr noundef %314, i32 noundef 0)
  %316 = icmp ne ptr %315, null
  %317 = and i1 %171, %316
  br i1 %317, label %318, label %336

318:                                              ; preds = %313
  %319 = icmp eq ptr %300, null
  %320 = getelementptr inbounds %struct.tree_common, ptr %315, i64 0, i32 2
  %321 = load ptr, ptr %320, align 8, !tbaa !17
  %322 = select i1 %319, ptr %321, ptr %300
  %323 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %321, ptr noundef nonnull %165)
  %324 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 101, ptr noundef %322, ptr noundef nonnull %315, ptr noundef %323)
  %325 = icmp eq ptr %324, null
  br i1 %325, label %326, label %329

326:                                              ; preds = %318
  %327 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %322, ptr noundef nonnull %315, ptr noundef %323) #24
  %328 = getelementptr inbounds %struct.tree_exp, ptr %327, i64 0, i32 1
  store i32 0, ptr %328, align 8, !tbaa !17
  br label %329

329:                                              ; preds = %318, %326
  %330 = phi ptr [ %324, %318 ], [ %327, %326 ]
  %331 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %330) #24
  %332 = load i64, ptr %331, align 8
  %333 = and i64 %332, 65535
  %334 = icmp eq i64 %333, 23
  %335 = select i1 %334, ptr %331, ptr null
  br label %358

336:                                              ; preds = %308, %313
  %337 = phi i1 [ %316, %313 ], [ false, %308 ]
  %338 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 101), align 4, !tbaa !17
  %339 = icmp eq i32 %338, 5
  br i1 %339, label %340, label %358

340:                                              ; preds = %336
  %341 = and i1 %171, %337
  %342 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %343 = icmp eq ptr %342, %300
  br i1 %343, label %344, label %348

344:                                              ; preds = %340
  %345 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %346 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %347 = select i1 %341, ptr %345, ptr %346
  br label %358

348:                                              ; preds = %340
  %349 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %350 = icmp eq ptr %349, %300
  br i1 %350, label %351, label %355

351:                                              ; preds = %348
  %352 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %353 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %354 = select i1 %341, ptr %352, ptr %353
  br label %358

355:                                              ; preds = %348
  %356 = zext i1 %341 to i64
  %357 = tail call ptr @build_int_cst(ptr noundef %300, i64 noundef %356) #24
  br label %358

358:                                              ; preds = %355, %351, %344, %329, %336
  %359 = phi ptr [ %335, %329 ], [ null, %336 ], [ %347, %344 ], [ %354, %351 ], [ %357, %355 ]
  %360 = tail call i32 @integer_onep(ptr noundef %359) #24
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %362, label %448

362:                                              ; preds = %358
  %363 = icmp eq ptr %168, null
  br i1 %363, label %398, label %364

364:                                              ; preds = %362
  %365 = load i64, ptr %168, align 8
  %366 = and i64 %365, 65535
  %367 = icmp eq i64 %366, 23
  br i1 %367, label %368, label %398

368:                                              ; preds = %364
  %369 = getelementptr inbounds %struct.tree_common, ptr %168, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !17
  %371 = load i64, ptr %370, align 8
  %372 = trunc i64 %371 to i16
  switch i16 %372, label %398 [
    i16 6, label %373
    i16 8, label %385
    i16 10, label %391
  ]

373:                                              ; preds = %368
  %374 = getelementptr inbounds %struct.tree_type, ptr %370, i64 0, i32 6
  %375 = load i32, ptr %374, align 4
  %376 = and i32 %375, 1023
  %377 = lshr i32 %375, 16
  %378 = and i32 %377, 255
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %379
  %381 = load i8, ptr %380, align 1, !tbaa !17
  %382 = zext i8 %381 to i32
  %383 = shl nuw nsw i32 %382, 3
  %384 = icmp eq i32 %376, %383
  br i1 %384, label %385, label %398

385:                                              ; preds = %373, %368
  %386 = getelementptr inbounds %struct.tree_type, ptr %370, i64 0, i32 13
  %387 = load ptr, ptr %386, align 8, !tbaa !17
  %388 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %168, ptr noundef %387) #24
  %389 = icmp eq i32 %388, 0
  %390 = select i1 %389, ptr %168, ptr null
  br label %398

391:                                              ; preds = %368
  %392 = and i64 %371, 2097152
  %393 = icmp eq i64 %392, 0
  br i1 %393, label %398, label %394

394:                                              ; preds = %391
  %395 = tail call i32 @integer_zerop(ptr noundef nonnull %168) #24
  %396 = icmp eq i32 %395, 0
  %397 = select i1 %396, ptr %168, ptr null
  br label %398

398:                                              ; preds = %394, %385, %373, %391, %368, %364, %362
  %399 = phi ptr [ %168, %368 ], [ %168, %391 ], [ %168, %373 ], [ %168, %364 ], [ null, %362 ], [ %390, %385 ], [ %397, %394 ]
  %400 = icmp eq ptr %164, null
  br i1 %400, label %435, label %401

401:                                              ; preds = %398
  %402 = load i64, ptr %164, align 8
  %403 = and i64 %402, 65535
  %404 = icmp eq i64 %403, 23
  br i1 %404, label %405, label %452

405:                                              ; preds = %401
  %406 = getelementptr inbounds %struct.tree_common, ptr %164, i64 0, i32 2
  %407 = load ptr, ptr %406, align 8, !tbaa !17
  %408 = load i64, ptr %407, align 8
  %409 = trunc i64 %408 to i16
  switch i16 %409, label %452 [
    i16 6, label %410
    i16 8, label %422
    i16 10, label %427
  ]

410:                                              ; preds = %405
  %411 = getelementptr inbounds %struct.tree_type, ptr %407, i64 0, i32 6
  %412 = load i32, ptr %411, align 4
  %413 = and i32 %412, 1023
  %414 = lshr i32 %412, 16
  %415 = and i32 %414, 255
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %416
  %418 = load i8, ptr %417, align 1, !tbaa !17
  %419 = zext i8 %418 to i32
  %420 = shl nuw nsw i32 %419, 3
  %421 = icmp eq i32 %413, %420
  br i1 %421, label %422, label %452

422:                                              ; preds = %410, %405
  %423 = getelementptr inbounds %struct.tree_type, ptr %407, i64 0, i32 14
  %424 = load ptr, ptr %423, align 8, !tbaa !17
  %425 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %164, ptr noundef %424) #24
  %426 = icmp ne i32 %425, 0
  br label %435

427:                                              ; preds = %405
  %428 = and i64 %408, 2097152
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %452, label %430

430:                                              ; preds = %427
  %431 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %432 = tail call fastcc ptr @range_binop(i32 noundef 63, ptr noundef null, ptr noundef nonnull %164, i32 noundef 1, ptr noundef %431, i32 noundef 1)
  %433 = tail call i32 @integer_zerop(ptr noundef %432) #24
  %434 = icmp ne i32 %433, 0
  br label %435

435:                                              ; preds = %430, %422, %398
  %436 = phi i1 [ true, %398 ], [ %426, %422 ], [ %434, %430 ]
  %437 = icmp eq ptr %399, null
  %438 = and i1 %437, %436
  br i1 %438, label %439, label %452

439:                                              ; preds = %435
  %440 = tail call fastcc ptr @range_successor(ptr noundef nonnull %167)
  %441 = tail call fastcc ptr @range_predecessor(ptr noundef %165)
  %442 = icmp eq ptr %440, null
  %443 = icmp eq ptr %441, null
  %444 = select i1 %442, i1 true, i1 %443
  br i1 %444, label %452, label %448

445:                                              ; preds = %298
  %446 = icmp eq i32 %232, 0
  %447 = select i1 %446, ptr %164, ptr %167
  br label %448

448:                                              ; preds = %445, %439, %358, %278, %277, %246, %244, %238, %236, %271, %264, %294
  %449 = phi i32 [ 1, %294 ], [ 1, %264 ], [ 1, %271 ], [ 0, %236 ], [ 1, %238 ], [ 1, %244 ], [ 0, %246 ], [ 1, %277 ], [ 0, %278 ], [ 0, %358 ], [ 1, %439 ], [ 0, %445 ]
  %450 = phi ptr [ %296, %294 ], [ %266, %264 ], [ %168, %271 ], [ null, %236 ], [ %165, %238 ], [ %168, %244 ], [ null, %246 ], [ %165, %277 ], [ null, %278 ], [ %168, %358 ], [ %440, %439 ], [ %168, %445 ]
  %451 = phi ptr [ %164, %294 ], [ %167, %264 ], [ %272, %271 ], [ null, %236 ], [ %240, %238 ], [ %167, %244 ], [ null, %246 ], [ %164, %277 ], [ null, %278 ], [ %164, %358 ], [ %441, %439 ], [ %447, %445 ]
  store i32 %449, ptr %0, align 4, !tbaa !21
  store ptr %450, ptr %1, align 8, !tbaa !6
  store ptr %451, ptr %2, align 8, !tbaa !6
  br label %452

452:                                              ; preds = %401, %410, %427, %405, %289, %259, %435, %439, %294, %268, %271, %264, %448
  %453 = phi i8 [ 1, %448 ], [ 0, %264 ], [ 0, %271 ], [ 0, %268 ], [ 0, %294 ], [ 0, %439 ], [ 0, %435 ], [ 0, %259 ], [ 0, %289 ], [ 0, %405 ], [ 0, %427 ], [ 0, %410 ], [ 0, %401 ]
  ret i8 %453
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @range_binop(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, i32 noundef %5) unnamed_addr #10 {
  %7 = icmp ne ptr %2, null
  %8 = icmp ne ptr %4, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %28

10:                                               ; preds = %6
  %11 = icmp eq ptr %1, null
  %12 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = select i1 %11, ptr %13, ptr %1
  %15 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %13, ptr noundef nonnull %4)
  %16 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %0, ptr noundef %14, ptr noundef nonnull %2, ptr noundef %15)
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %10
  %19 = tail call ptr @build2_stat(i32 noundef %0, ptr noundef %14, ptr noundef nonnull %2, ptr noundef %15) #24
  %20 = getelementptr inbounds %struct.tree_exp, ptr %19, i64 0, i32 1
  store i32 0, ptr %20, align 8, !tbaa !17
  br label %21

21:                                               ; preds = %10, %18
  %22 = phi ptr [ %16, %10 ], [ %19, %18 ]
  %23 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %22) #24
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 23
  %27 = select i1 %26, ptr %23, ptr null
  br label %71

28:                                               ; preds = %6
  %29 = zext i32 %0 to i64
  %30 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !17
  %32 = icmp eq i32 %31, 5
  br i1 %32, label %33, label %71

33:                                               ; preds = %28
  %34 = icmp eq i32 %3, 0
  %35 = select i1 %34, i32 -1, i32 1
  %36 = select i1 %7, i32 0, i32 %35
  %37 = icmp eq i32 %5, 0
  %38 = select i1 %37, i32 -1, i32 1
  %39 = select i1 %8, i32 0, i32 %38
  switch i32 %0, label %52 [
    i32 101, label %40
    i32 102, label %42
    i32 97, label %44
    i32 98, label %46
    i32 99, label %48
    i32 100, label %50
  ]

40:                                               ; preds = %33
  %41 = icmp eq i32 %36, %39
  br label %53

42:                                               ; preds = %33
  %43 = icmp ne i32 %36, %39
  br label %53

44:                                               ; preds = %33
  %45 = icmp slt i32 %36, %39
  br label %53

46:                                               ; preds = %33
  %47 = icmp sle i32 %36, %39
  br label %53

48:                                               ; preds = %33
  %49 = icmp sgt i32 %36, %39
  br label %53

50:                                               ; preds = %33
  %51 = icmp sge i32 %36, %39
  br label %53

52:                                               ; preds = %33
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

53:                                               ; preds = %50, %48, %46, %44, %42, %40
  %54 = phi i1 [ %51, %50 ], [ %49, %48 ], [ %47, %46 ], [ %45, %44 ], [ %43, %42 ], [ %41, %40 ]
  %55 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %56 = icmp eq ptr %55, %1
  br i1 %56, label %57, label %61

57:                                               ; preds = %53
  %58 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %59 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %60 = select i1 %54, ptr %58, ptr %59
  br label %71

61:                                               ; preds = %53
  %62 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %63 = icmp eq ptr %62, %1
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %66 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %67 = select i1 %54, ptr %65, ptr %66
  br label %71

68:                                               ; preds = %61
  %69 = zext i1 %54 to i64
  %70 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %69) #24
  br label %71

71:                                               ; preds = %68, %64, %57, %28, %21
  %72 = phi ptr [ %27, %21 ], [ null, %28 ], [ %60, %57 ], [ %67, %64 ], [ %70, %68 ]
  ret ptr %72
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @negate_expr(ptr noundef %0) unnamed_addr #10 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %28, label %3

3:                                                ; preds = %1
  %4 = load i64, ptr %0, align 8
  %5 = and i64 %4, 65535
  %6 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !17
  %8 = add i32 %7, -4
  %9 = icmp ult i32 %8, 7
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !17
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi i32 [ %12, %10 ], [ 0, %3 ]
  %15 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %0) #24
  %18 = tail call fastcc ptr @fold_negate_expr(i32 noundef %14, ptr noundef %17)
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %22, ptr noundef %17) #24
  %24 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 1
  store i32 %14, ptr %24, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %20, %13
  %26 = phi ptr [ %18, %13 ], [ %23, %20 ]
  %27 = tail call ptr @fold_convert_loc(i32 noundef %14, ptr noundef %16, ptr noundef nonnull %26)
  br label %28

28:                                               ; preds = %1, %25
  %29 = phi ptr [ %27, %25 ], [ null, %1 ]
  ret ptr %29
}

declare i32 @int_fits_type_p(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @tree_strip_sign_nop_conversions(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_negate_expr(i32 noundef %0, ptr noundef %1) unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = load i64, ptr %1, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %1897 [
    i16 90, label %9
    i16 23, label %24
    i16 24, label %38
    i16 25, label %46
    i16 26, label %48
    i16 123, label %121
    i16 124, label %136
    i16 79, label %148
    i16 63, label %151
    i16 64, label %751
    i16 65, label %1334
    i16 75, label %7
    i16 67, label %1673
    i16 70, label %1673
    i16 69, label %1673
    i16 68, label %1673
    i16 76, label %1673
    i16 116, label %1836
    i16 59, label %1849
    i16 84, label %1863
  ]

7:                                                ; preds = %2
  %8 = load i64, ptr %4, align 8
  br label %1338

9:                                                ; preds = %2
  %10 = load i64, ptr %4, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = add nsw i32 %12, -6
  %14 = icmp ult i32 %13, 3
  br i1 %14, label %15, label %1897

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = tail call ptr @build_int_cst(ptr noundef nonnull %4, i64 noundef 1) #24
  %19 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %4, ptr noundef %17, ptr noundef %18)
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %1898

21:                                               ; preds = %15
  %22 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef nonnull %4, ptr noundef %17, ptr noundef %18) #24
  %23 = getelementptr inbounds %struct.tree_exp, ptr %22, i64 0, i32 1
  store i32 %0, ptr %23, align 8, !tbaa !17
  br label %1898

24:                                               ; preds = %2
  %25 = tail call fastcc ptr @fold_negate_const(ptr noundef nonnull %1, ptr noundef %4)
  %26 = load i64, ptr %25, align 8
  %27 = load i64, ptr %1, align 8
  %28 = xor i64 %27, %26
  %29 = and i64 %28, 134217728
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %1898, label %31

31:                                               ; preds = %24
  %32 = load i64, ptr %4, align 8
  %33 = and i64 %32, 2097152
  %34 = icmp eq i64 %33, 0
  %35 = load i32, ptr @flag_trapv, align 4
  %36 = icmp ne i32 %35, 0
  %37 = select i1 %34, i1 %36, i1 false
  br i1 %37, label %1897, label %1898

38:                                               ; preds = %2
  %39 = tail call fastcc ptr @fold_negate_const(ptr noundef nonnull %1, ptr noundef %4)
  %40 = load i64, ptr %39, align 8
  %41 = and i64 %40, 134217728
  %42 = icmp ne i64 %41, 0
  %43 = load i32, ptr @flag_trapping_math, align 4
  %44 = icmp ne i32 %43, 0
  %45 = select i1 %42, i1 %44, i1 false
  br i1 %45, label %1897, label %1898

46:                                               ; preds = %2
  %47 = tail call fastcc ptr @fold_negate_const(ptr noundef nonnull %1, ptr noundef %4)
  br label %1898

48:                                               ; preds = %2
  %49 = getelementptr inbounds %struct.tree_complex, ptr %1, i64 0, i32 1
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = icmp eq ptr %50, null
  br i1 %51, label %77, label %52

52:                                               ; preds = %48
  %53 = load i64, ptr %50, align 8
  %54 = and i64 %53, 65535
  %55 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %54
  %56 = load i32, ptr %55, align 4, !tbaa !17
  %57 = add i32 %56, -4
  %58 = icmp ult i32 %57, 7
  br i1 %58, label %59, label %62

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.tree_exp, ptr %50, i64 0, i32 1
  %61 = load i32, ptr %60, align 8, !tbaa !17
  br label %62

62:                                               ; preds = %59, %52
  %63 = phi i32 [ %61, %59 ], [ 0, %52 ]
  %64 = getelementptr inbounds %struct.tree_common, ptr %50, i64 0, i32 2
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  %66 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %50) #24
  %67 = tail call fastcc ptr @fold_negate_expr(i32 noundef %63, ptr noundef %66)
  %68 = icmp eq ptr %67, null
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = getelementptr inbounds %struct.tree_common, ptr %66, i64 0, i32 2
  %71 = load ptr, ptr %70, align 8, !tbaa !17
  %72 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %71, ptr noundef %66) #24
  %73 = getelementptr inbounds %struct.tree_exp, ptr %72, i64 0, i32 1
  store i32 %63, ptr %73, align 8, !tbaa !17
  br label %74

74:                                               ; preds = %69, %62
  %75 = phi ptr [ %67, %62 ], [ %72, %69 ]
  %76 = tail call ptr @fold_convert_loc(i32 noundef %63, ptr noundef %65, ptr noundef nonnull %75)
  br label %77

77:                                               ; preds = %48, %74
  %78 = phi ptr [ %76, %74 ], [ null, %48 ]
  %79 = getelementptr inbounds %struct.tree_complex, ptr %1, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = icmp eq ptr %80, null
  br i1 %81, label %107, label %82

82:                                               ; preds = %77
  %83 = load i64, ptr %80, align 8
  %84 = and i64 %83, 65535
  %85 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !17
  %87 = add i32 %86, -4
  %88 = icmp ult i32 %87, 7
  br i1 %88, label %89, label %92

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.tree_exp, ptr %80, i64 0, i32 1
  %91 = load i32, ptr %90, align 8, !tbaa !17
  br label %92

92:                                               ; preds = %89, %82
  %93 = phi i32 [ %91, %89 ], [ 0, %82 ]
  %94 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %95 = load ptr, ptr %94, align 8, !tbaa !17
  %96 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %80) #24
  %97 = tail call fastcc ptr @fold_negate_expr(i32 noundef %93, ptr noundef %96)
  %98 = icmp eq ptr %97, null
  br i1 %98, label %99, label %104

99:                                               ; preds = %92
  %100 = getelementptr inbounds %struct.tree_common, ptr %96, i64 0, i32 2
  %101 = load ptr, ptr %100, align 8, !tbaa !17
  %102 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %101, ptr noundef %96) #24
  %103 = getelementptr inbounds %struct.tree_exp, ptr %102, i64 0, i32 1
  store i32 %93, ptr %103, align 8, !tbaa !17
  br label %104

104:                                              ; preds = %99, %92
  %105 = phi ptr [ %97, %92 ], [ %102, %99 ]
  %106 = tail call ptr @fold_convert_loc(i32 noundef %93, ptr noundef %95, ptr noundef nonnull %105)
  br label %107

107:                                              ; preds = %77, %104
  %108 = phi ptr [ %106, %104 ], [ null, %77 ]
  %109 = load i64, ptr %78, align 8
  %110 = trunc i64 %109 to i16
  switch i16 %110, label %1897 [
    i16 24, label %111
    i16 23, label %115
  ]

111:                                              ; preds = %107
  %112 = load i64, ptr %108, align 8
  %113 = and i64 %112, 65535
  %114 = icmp eq i64 %113, 24
  br i1 %114, label %119, label %1897

115:                                              ; preds = %107
  %116 = load i64, ptr %108, align 8
  %117 = and i64 %116, 65535
  %118 = icmp eq i64 %117, 23
  br i1 %118, label %119, label %1897

119:                                              ; preds = %111, %115
  %120 = tail call ptr @build_complex(ptr noundef %4, ptr noundef nonnull %78, ptr noundef nonnull %108) #24
  br label %1898

121:                                              ; preds = %2
  %122 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %1)
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %1897, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %126 = load ptr, ptr %125, align 8, !tbaa !17
  %127 = tail call fastcc ptr @fold_negate_expr(i32 noundef %0, ptr noundef %126)
  %128 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %129 = load ptr, ptr %128, align 8, !tbaa !17
  %130 = tail call fastcc ptr @fold_negate_expr(i32 noundef %0, ptr noundef %129)
  %131 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 123, ptr noundef %4, ptr noundef %127, ptr noundef %130)
  %132 = icmp eq ptr %131, null
  br i1 %132, label %133, label %1898

133:                                              ; preds = %124
  %134 = tail call ptr @build2_stat(i32 noundef 123, ptr noundef %4, ptr noundef %127, ptr noundef %130) #24
  %135 = getelementptr inbounds %struct.tree_exp, ptr %134, i64 0, i32 1
  store i32 %0, ptr %135, align 8, !tbaa !17
  br label %1898

136:                                              ; preds = %2
  %137 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %1)
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %1897, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %141 = load ptr, ptr %140, align 8, !tbaa !17
  %142 = tail call fastcc ptr @fold_negate_expr(i32 noundef %0, ptr noundef %141)
  %143 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 124, ptr noundef %4, ptr noundef %142)
  %144 = icmp eq ptr %143, null
  br i1 %144, label %145, label %1898

145:                                              ; preds = %139
  %146 = tail call ptr @build1_stat(i32 noundef 124, ptr noundef %4, ptr noundef %142) #24
  %147 = getelementptr inbounds %struct.tree_exp, ptr %146, i64 0, i32 1
  store i32 %0, ptr %147, align 8, !tbaa !17
  br label %1898

148:                                              ; preds = %2
  %149 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %150 = load ptr, ptr %149, align 8, !tbaa !17
  br label %1898

151:                                              ; preds = %2
  %152 = load i64, ptr %4, align 8
  %153 = and i64 %152, 65535
  %154 = icmp eq i64 %153, 14
  br i1 %154, label %155, label %158

155:                                              ; preds = %151
  %156 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %157 = load i64, ptr %4, align 8
  br label %163

158:                                              ; preds = %151
  %159 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %160 = load i32, ptr %159, align 4
  %161 = lshr i32 %160, 16
  %162 = and i32 %161, 255
  br label %163

163:                                              ; preds = %158, %155
  %164 = phi i64 [ %157, %155 ], [ %152, %158 ]
  %165 = phi i32 [ %156, %155 ], [ %162, %158 ]
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %166
  %168 = load i8, ptr %167, align 1, !tbaa !17
  %169 = icmp eq i8 %168, 8
  br i1 %169, label %224, label %170

170:                                              ; preds = %163
  %171 = and i64 %164, 65535
  %172 = icmp eq i64 %171, 14
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %175 = load i64, ptr %4, align 8
  br label %181

176:                                              ; preds = %170
  %177 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %178 = load i32, ptr %177, align 4
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  br label %181

181:                                              ; preds = %176, %173
  %182 = phi i64 [ %175, %173 ], [ %164, %176 ]
  %183 = phi i32 [ %174, %173 ], [ %180, %176 ]
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %184
  %186 = load i8, ptr %185, align 1, !tbaa !17
  %187 = icmp eq i8 %186, 9
  br i1 %187, label %224, label %188

188:                                              ; preds = %181
  %189 = and i64 %182, 65535
  %190 = icmp eq i64 %189, 14
  br i1 %190, label %191, label %194

191:                                              ; preds = %188
  %192 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %193 = load i64, ptr %4, align 8
  br label %199

194:                                              ; preds = %188
  %195 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %196 = load i32, ptr %195, align 4
  %197 = lshr i32 %196, 16
  %198 = and i32 %197, 255
  br label %199

199:                                              ; preds = %194, %191
  %200 = phi i64 [ %193, %191 ], [ %182, %194 ]
  %201 = phi i32 [ %192, %191 ], [ %198, %194 ]
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %202
  %204 = load i8, ptr %203, align 1, !tbaa !17
  %205 = icmp eq i8 %204, 11
  br i1 %205, label %224, label %206

206:                                              ; preds = %199
  %207 = and i64 %200, 65535
  %208 = icmp eq i64 %207, 14
  br i1 %208, label %209, label %212

209:                                              ; preds = %206
  %210 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %211 = load i64, ptr %4, align 8
  br label %217

212:                                              ; preds = %206
  %213 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %214 = load i32, ptr %213, align 4
  %215 = lshr i32 %214, 16
  %216 = and i32 %215, 255
  br label %217

217:                                              ; preds = %212, %209
  %218 = phi i64 [ %211, %209 ], [ %200, %212 ]
  %219 = phi i32 [ %210, %209 ], [ %216, %212 ]
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %220
  %222 = load i8, ptr %221, align 1, !tbaa !17
  %223 = icmp eq i8 %222, 17
  br i1 %223, label %224, label %433

224:                                              ; preds = %217, %199, %181, %163
  %225 = phi i64 [ %200, %199 ], [ %182, %181 ], [ %164, %163 ], [ %218, %217 ]
  %226 = and i64 %225, 65535
  %227 = icmp eq i64 %226, 14
  br i1 %227, label %228, label %231

228:                                              ; preds = %224
  %229 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %230 = load i64, ptr %4, align 8
  br label %236

231:                                              ; preds = %224
  %232 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %233 = load i32, ptr %232, align 4
  %234 = lshr i32 %233, 16
  %235 = and i32 %234, 255
  br label %236

236:                                              ; preds = %231, %228
  %237 = phi i64 [ %230, %228 ], [ %225, %231 ]
  %238 = phi i32 [ %229, %228 ], [ %235, %231 ]
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %239
  %241 = load i8, ptr %240, align 1, !tbaa !17
  %242 = icmp eq i8 %241, 8
  br i1 %242, label %261, label %243

243:                                              ; preds = %236
  %244 = and i64 %237, 65535
  %245 = icmp eq i64 %244, 14
  br i1 %245, label %246, label %249

246:                                              ; preds = %243
  %247 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %248 = load i64, ptr %4, align 8
  br label %254

249:                                              ; preds = %243
  %250 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %251 = load i32, ptr %250, align 4
  %252 = lshr i32 %251, 16
  %253 = and i32 %252, 255
  br label %254

254:                                              ; preds = %249, %246
  %255 = phi i64 [ %248, %246 ], [ %237, %249 ]
  %256 = phi i32 [ %247, %246 ], [ %253, %249 ]
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %257
  %259 = load i8, ptr %258, align 1, !tbaa !17
  %260 = icmp eq i8 %259, 9
  br i1 %260, label %261, label %272

261:                                              ; preds = %254, %236
  %262 = phi i64 [ %255, %254 ], [ %237, %236 ]
  %263 = and i64 %262, 65535
  %264 = icmp eq i64 %263, 14
  br i1 %264, label %265, label %267

265:                                              ; preds = %261
  %266 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %288

267:                                              ; preds = %261
  %268 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %269 = load i32, ptr %268, align 4
  %270 = lshr i32 %269, 16
  %271 = and i32 %270, 255
  br label %288

272:                                              ; preds = %254
  %273 = and i64 %255, 65535
  %274 = icmp eq i64 %273, 14
  br i1 %274, label %275, label %277

275:                                              ; preds = %272
  %276 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %282

277:                                              ; preds = %272
  %278 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %279 = load i32, ptr %278, align 4
  %280 = lshr i32 %279, 16
  %281 = and i32 %280, 255
  br label %282

282:                                              ; preds = %277, %275
  %283 = phi i32 [ %276, %275 ], [ %281, %277 ]
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %284
  %286 = load i8, ptr %285, align 1, !tbaa !17
  %287 = zext i8 %286 to i32
  br label %288

288:                                              ; preds = %265, %267, %282
  %289 = phi i32 [ %287, %282 ], [ %266, %265 ], [ %271, %267 ]
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %290
  %292 = load i8, ptr %291, align 1, !tbaa !17
  %293 = icmp eq i8 %292, 9
  %294 = load i64, ptr %4, align 8
  %295 = and i64 %294, 65535
  %296 = icmp eq i64 %295, 14
  br i1 %293, label %297, label %358

297:                                              ; preds = %288
  br i1 %296, label %298, label %301

298:                                              ; preds = %297
  %299 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %300 = load i64, ptr %4, align 8
  br label %306

301:                                              ; preds = %297
  %302 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %303 = load i32, ptr %302, align 4
  %304 = lshr i32 %303, 16
  %305 = and i32 %304, 255
  br label %306

306:                                              ; preds = %301, %298
  %307 = phi i64 [ %300, %298 ], [ %294, %301 ]
  %308 = phi i32 [ %299, %298 ], [ %305, %301 ]
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %309
  %311 = load i8, ptr %310, align 1, !tbaa !17
  %312 = icmp eq i8 %311, 8
  br i1 %312, label %331, label %313

313:                                              ; preds = %306
  %314 = and i64 %307, 65535
  %315 = icmp eq i64 %314, 14
  br i1 %315, label %316, label %319

316:                                              ; preds = %313
  %317 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %318 = load i64, ptr %4, align 8
  br label %324

319:                                              ; preds = %313
  %320 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %321 = load i32, ptr %320, align 4
  %322 = lshr i32 %321, 16
  %323 = and i32 %322, 255
  br label %324

324:                                              ; preds = %319, %316
  %325 = phi i64 [ %318, %316 ], [ %307, %319 ]
  %326 = phi i32 [ %317, %316 ], [ %323, %319 ]
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %327
  %329 = load i8, ptr %328, align 1, !tbaa !17
  %330 = icmp eq i8 %329, 9
  br i1 %330, label %331, label %342

331:                                              ; preds = %324, %306
  %332 = phi i64 [ %325, %324 ], [ %307, %306 ]
  %333 = and i64 %332, 65535
  %334 = icmp eq i64 %333, 14
  br i1 %334, label %335, label %337

335:                                              ; preds = %331
  %336 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %419

337:                                              ; preds = %331
  %338 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %339 = load i32, ptr %338, align 4
  %340 = lshr i32 %339, 16
  %341 = and i32 %340, 255
  br label %419

342:                                              ; preds = %324
  %343 = and i64 %325, 65535
  %344 = icmp eq i64 %343, 14
  br i1 %344, label %345, label %347

345:                                              ; preds = %342
  %346 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %352

347:                                              ; preds = %342
  %348 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %349 = load i32, ptr %348, align 4
  %350 = lshr i32 %349, 16
  %351 = and i32 %350, 255
  br label %352

352:                                              ; preds = %347, %345
  %353 = phi i32 [ %346, %345 ], [ %351, %347 ]
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %354
  %356 = load i8, ptr %355, align 1, !tbaa !17
  %357 = zext i8 %356 to i32
  br label %419

358:                                              ; preds = %288
  br i1 %296, label %359, label %362

359:                                              ; preds = %358
  %360 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %361 = load i64, ptr %4, align 8
  br label %367

362:                                              ; preds = %358
  %363 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %364 = load i32, ptr %363, align 4
  %365 = lshr i32 %364, 16
  %366 = and i32 %365, 255
  br label %367

367:                                              ; preds = %362, %359
  %368 = phi i64 [ %361, %359 ], [ %294, %362 ]
  %369 = phi i32 [ %360, %359 ], [ %366, %362 ]
  %370 = zext i32 %369 to i64
  %371 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %370
  %372 = load i8, ptr %371, align 1, !tbaa !17
  %373 = icmp eq i8 %372, 8
  br i1 %373, label %392, label %374

374:                                              ; preds = %367
  %375 = and i64 %368, 65535
  %376 = icmp eq i64 %375, 14
  br i1 %376, label %377, label %380

377:                                              ; preds = %374
  %378 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %379 = load i64, ptr %4, align 8
  br label %385

380:                                              ; preds = %374
  %381 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %382 = load i32, ptr %381, align 4
  %383 = lshr i32 %382, 16
  %384 = and i32 %383, 255
  br label %385

385:                                              ; preds = %380, %377
  %386 = phi i64 [ %379, %377 ], [ %368, %380 ]
  %387 = phi i32 [ %378, %377 ], [ %384, %380 ]
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %388
  %390 = load i8, ptr %389, align 1, !tbaa !17
  %391 = icmp eq i8 %390, 9
  br i1 %391, label %392, label %403

392:                                              ; preds = %385, %367
  %393 = phi i64 [ %386, %385 ], [ %368, %367 ]
  %394 = and i64 %393, 65535
  %395 = icmp eq i64 %394, 14
  br i1 %395, label %396, label %398

396:                                              ; preds = %392
  %397 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %419

398:                                              ; preds = %392
  %399 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %400 = load i32, ptr %399, align 4
  %401 = lshr i32 %400, 16
  %402 = and i32 %401, 255
  br label %419

403:                                              ; preds = %385
  %404 = and i64 %386, 65535
  %405 = icmp eq i64 %404, 14
  br i1 %405, label %406, label %408

406:                                              ; preds = %403
  %407 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %413

408:                                              ; preds = %403
  %409 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %410 = load i32, ptr %409, align 4
  %411 = lshr i32 %410, 16
  %412 = and i32 %411, 255
  br label %413

413:                                              ; preds = %408, %406
  %414 = phi i32 [ %407, %406 ], [ %412, %408 ]
  %415 = zext i32 %414 to i64
  %416 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %415
  %417 = load i8, ptr %416, align 1, !tbaa !17
  %418 = zext i8 %417 to i32
  br label %419

419:                                              ; preds = %413, %398, %396, %352, %337, %335
  %420 = phi i32 [ %357, %352 ], [ %336, %335 ], [ %341, %337 ], [ %418, %413 ], [ %397, %396 ], [ %402, %398 ]
  %421 = add i32 %420, -38
  %422 = zext i32 %421 to i64
  %423 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %422
  %424 = load ptr, ptr %423, align 8, !tbaa !6
  %425 = getelementptr inbounds %struct.real_format, ptr %424, i64 0, i32 10
  %426 = load i8, ptr %425, align 1, !tbaa !49
  %427 = icmp ne i8 %426, 0
  %428 = load i32, ptr @flag_rounding_math, align 4
  %429 = icmp ne i32 %428, 0
  %430 = select i1 %427, i1 %429, i1 false
  br i1 %430, label %1897, label %431

431:                                              ; preds = %419
  %432 = load i64, ptr %4, align 8
  br label %433

433:                                              ; preds = %431, %217
  %434 = phi i64 [ %432, %431 ], [ %218, %217 ]
  %435 = and i64 %434, 65535
  %436 = icmp eq i64 %435, 14
  br i1 %436, label %437, label %440

437:                                              ; preds = %433
  %438 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %439 = load i64, ptr %4, align 8
  br label %445

440:                                              ; preds = %433
  %441 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %442 = load i32, ptr %441, align 4
  %443 = lshr i32 %442, 16
  %444 = and i32 %443, 255
  br label %445

445:                                              ; preds = %440, %437
  %446 = phi i64 [ %439, %437 ], [ %434, %440 ]
  %447 = phi i32 [ %438, %437 ], [ %444, %440 ]
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %448
  %450 = load i8, ptr %449, align 1, !tbaa !17
  %451 = icmp eq i8 %450, 8
  br i1 %451, label %506, label %452

452:                                              ; preds = %445
  %453 = and i64 %446, 65535
  %454 = icmp eq i64 %453, 14
  br i1 %454, label %455, label %458

455:                                              ; preds = %452
  %456 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %457 = load i64, ptr %4, align 8
  br label %463

458:                                              ; preds = %452
  %459 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %460 = load i32, ptr %459, align 4
  %461 = lshr i32 %460, 16
  %462 = and i32 %461, 255
  br label %463

463:                                              ; preds = %458, %455
  %464 = phi i64 [ %457, %455 ], [ %446, %458 ]
  %465 = phi i32 [ %456, %455 ], [ %462, %458 ]
  %466 = zext i32 %465 to i64
  %467 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %466
  %468 = load i8, ptr %467, align 1, !tbaa !17
  %469 = icmp eq i8 %468, 9
  br i1 %469, label %506, label %470

470:                                              ; preds = %463
  %471 = and i64 %464, 65535
  %472 = icmp eq i64 %471, 14
  br i1 %472, label %473, label %476

473:                                              ; preds = %470
  %474 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %475 = load i64, ptr %4, align 8
  br label %481

476:                                              ; preds = %470
  %477 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %478 = load i32, ptr %477, align 4
  %479 = lshr i32 %478, 16
  %480 = and i32 %479, 255
  br label %481

481:                                              ; preds = %476, %473
  %482 = phi i64 [ %475, %473 ], [ %464, %476 ]
  %483 = phi i32 [ %474, %473 ], [ %480, %476 ]
  %484 = zext i32 %483 to i64
  %485 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %484
  %486 = load i8, ptr %485, align 1, !tbaa !17
  %487 = icmp eq i8 %486, 11
  br i1 %487, label %506, label %488

488:                                              ; preds = %481
  %489 = and i64 %482, 65535
  %490 = icmp eq i64 %489, 14
  br i1 %490, label %491, label %493

491:                                              ; preds = %488
  %492 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %498

493:                                              ; preds = %488
  %494 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %495 = load i32, ptr %494, align 4
  %496 = lshr i32 %495, 16
  %497 = and i32 %496, 255
  br label %498

498:                                              ; preds = %493, %491
  %499 = phi i32 [ %492, %491 ], [ %497, %493 ]
  %500 = zext i32 %499 to i64
  %501 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %500
  %502 = load i8, ptr %501, align 1, !tbaa !17
  %503 = icmp eq i8 %502, 17
  br i1 %503, label %504, label %713

504:                                              ; preds = %498
  %505 = load i64, ptr %4, align 8
  br label %506

506:                                              ; preds = %504, %481, %463, %445
  %507 = phi i64 [ %505, %504 ], [ %482, %481 ], [ %464, %463 ], [ %446, %445 ]
  %508 = and i64 %507, 65535
  %509 = icmp eq i64 %508, 14
  br i1 %509, label %510, label %513

510:                                              ; preds = %506
  %511 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %512 = load i64, ptr %4, align 8
  br label %518

513:                                              ; preds = %506
  %514 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %515 = load i32, ptr %514, align 4
  %516 = lshr i32 %515, 16
  %517 = and i32 %516, 255
  br label %518

518:                                              ; preds = %513, %510
  %519 = phi i64 [ %512, %510 ], [ %507, %513 ]
  %520 = phi i32 [ %511, %510 ], [ %517, %513 ]
  %521 = zext i32 %520 to i64
  %522 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %521
  %523 = load i8, ptr %522, align 1, !tbaa !17
  %524 = icmp eq i8 %523, 8
  br i1 %524, label %543, label %525

525:                                              ; preds = %518
  %526 = and i64 %519, 65535
  %527 = icmp eq i64 %526, 14
  br i1 %527, label %528, label %531

528:                                              ; preds = %525
  %529 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %530 = load i64, ptr %4, align 8
  br label %536

531:                                              ; preds = %525
  %532 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %533 = load i32, ptr %532, align 4
  %534 = lshr i32 %533, 16
  %535 = and i32 %534, 255
  br label %536

536:                                              ; preds = %531, %528
  %537 = phi i64 [ %530, %528 ], [ %519, %531 ]
  %538 = phi i32 [ %529, %528 ], [ %535, %531 ]
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %539
  %541 = load i8, ptr %540, align 1, !tbaa !17
  %542 = icmp eq i8 %541, 9
  br i1 %542, label %543, label %554

543:                                              ; preds = %536, %518
  %544 = phi i64 [ %537, %536 ], [ %519, %518 ]
  %545 = and i64 %544, 65535
  %546 = icmp eq i64 %545, 14
  br i1 %546, label %547, label %549

547:                                              ; preds = %543
  %548 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %570

549:                                              ; preds = %543
  %550 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %551 = load i32, ptr %550, align 4
  %552 = lshr i32 %551, 16
  %553 = and i32 %552, 255
  br label %570

554:                                              ; preds = %536
  %555 = and i64 %537, 65535
  %556 = icmp eq i64 %555, 14
  br i1 %556, label %557, label %559

557:                                              ; preds = %554
  %558 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %564

559:                                              ; preds = %554
  %560 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %561 = load i32, ptr %560, align 4
  %562 = lshr i32 %561, 16
  %563 = and i32 %562, 255
  br label %564

564:                                              ; preds = %559, %557
  %565 = phi i32 [ %558, %557 ], [ %563, %559 ]
  %566 = zext i32 %565 to i64
  %567 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %566
  %568 = load i8, ptr %567, align 1, !tbaa !17
  %569 = zext i8 %568 to i32
  br label %570

570:                                              ; preds = %547, %549, %564
  %571 = phi i32 [ %569, %564 ], [ %548, %547 ], [ %553, %549 ]
  %572 = zext i32 %571 to i64
  %573 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %572
  %574 = load i8, ptr %573, align 1, !tbaa !17
  %575 = icmp eq i8 %574, 9
  %576 = load i64, ptr %4, align 8
  %577 = and i64 %576, 65535
  %578 = icmp eq i64 %577, 14
  br i1 %575, label %579, label %640

579:                                              ; preds = %570
  br i1 %578, label %580, label %583

580:                                              ; preds = %579
  %581 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %582 = load i64, ptr %4, align 8
  br label %588

583:                                              ; preds = %579
  %584 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %585 = load i32, ptr %584, align 4
  %586 = lshr i32 %585, 16
  %587 = and i32 %586, 255
  br label %588

588:                                              ; preds = %583, %580
  %589 = phi i64 [ %582, %580 ], [ %576, %583 ]
  %590 = phi i32 [ %581, %580 ], [ %587, %583 ]
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %591
  %593 = load i8, ptr %592, align 1, !tbaa !17
  %594 = icmp eq i8 %593, 8
  br i1 %594, label %613, label %595

595:                                              ; preds = %588
  %596 = and i64 %589, 65535
  %597 = icmp eq i64 %596, 14
  br i1 %597, label %598, label %601

598:                                              ; preds = %595
  %599 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %600 = load i64, ptr %4, align 8
  br label %606

601:                                              ; preds = %595
  %602 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %603 = load i32, ptr %602, align 4
  %604 = lshr i32 %603, 16
  %605 = and i32 %604, 255
  br label %606

606:                                              ; preds = %601, %598
  %607 = phi i64 [ %600, %598 ], [ %589, %601 ]
  %608 = phi i32 [ %599, %598 ], [ %605, %601 ]
  %609 = zext i32 %608 to i64
  %610 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %609
  %611 = load i8, ptr %610, align 1, !tbaa !17
  %612 = icmp eq i8 %611, 9
  br i1 %612, label %613, label %624

613:                                              ; preds = %606, %588
  %614 = phi i64 [ %607, %606 ], [ %589, %588 ]
  %615 = and i64 %614, 65535
  %616 = icmp eq i64 %615, 14
  br i1 %616, label %617, label %619

617:                                              ; preds = %613
  %618 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %701

619:                                              ; preds = %613
  %620 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %621 = load i32, ptr %620, align 4
  %622 = lshr i32 %621, 16
  %623 = and i32 %622, 255
  br label %701

624:                                              ; preds = %606
  %625 = and i64 %607, 65535
  %626 = icmp eq i64 %625, 14
  br i1 %626, label %627, label %629

627:                                              ; preds = %624
  %628 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %634

629:                                              ; preds = %624
  %630 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %631 = load i32, ptr %630, align 4
  %632 = lshr i32 %631, 16
  %633 = and i32 %632, 255
  br label %634

634:                                              ; preds = %629, %627
  %635 = phi i32 [ %628, %627 ], [ %633, %629 ]
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %636
  %638 = load i8, ptr %637, align 1, !tbaa !17
  %639 = zext i8 %638 to i32
  br label %701

640:                                              ; preds = %570
  br i1 %578, label %641, label %644

641:                                              ; preds = %640
  %642 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %643 = load i64, ptr %4, align 8
  br label %649

644:                                              ; preds = %640
  %645 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %646 = load i32, ptr %645, align 4
  %647 = lshr i32 %646, 16
  %648 = and i32 %647, 255
  br label %649

649:                                              ; preds = %644, %641
  %650 = phi i64 [ %643, %641 ], [ %576, %644 ]
  %651 = phi i32 [ %642, %641 ], [ %648, %644 ]
  %652 = zext i32 %651 to i64
  %653 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %652
  %654 = load i8, ptr %653, align 1, !tbaa !17
  %655 = icmp eq i8 %654, 8
  br i1 %655, label %674, label %656

656:                                              ; preds = %649
  %657 = and i64 %650, 65535
  %658 = icmp eq i64 %657, 14
  br i1 %658, label %659, label %662

659:                                              ; preds = %656
  %660 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %661 = load i64, ptr %4, align 8
  br label %667

662:                                              ; preds = %656
  %663 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %664 = load i32, ptr %663, align 4
  %665 = lshr i32 %664, 16
  %666 = and i32 %665, 255
  br label %667

667:                                              ; preds = %662, %659
  %668 = phi i64 [ %661, %659 ], [ %650, %662 ]
  %669 = phi i32 [ %660, %659 ], [ %666, %662 ]
  %670 = zext i32 %669 to i64
  %671 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %670
  %672 = load i8, ptr %671, align 1, !tbaa !17
  %673 = icmp eq i8 %672, 9
  br i1 %673, label %674, label %685

674:                                              ; preds = %667, %649
  %675 = phi i64 [ %668, %667 ], [ %650, %649 ]
  %676 = and i64 %675, 65535
  %677 = icmp eq i64 %676, 14
  br i1 %677, label %678, label %680

678:                                              ; preds = %674
  %679 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %701

680:                                              ; preds = %674
  %681 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %682 = load i32, ptr %681, align 4
  %683 = lshr i32 %682, 16
  %684 = and i32 %683, 255
  br label %701

685:                                              ; preds = %667
  %686 = and i64 %668, 65535
  %687 = icmp eq i64 %686, 14
  br i1 %687, label %688, label %690

688:                                              ; preds = %685
  %689 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %695

690:                                              ; preds = %685
  %691 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %692 = load i32, ptr %691, align 4
  %693 = lshr i32 %692, 16
  %694 = and i32 %693, 255
  br label %695

695:                                              ; preds = %690, %688
  %696 = phi i32 [ %689, %688 ], [ %694, %690 ]
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %697
  %699 = load i8, ptr %698, align 1, !tbaa !17
  %700 = zext i8 %699 to i32
  br label %701

701:                                              ; preds = %695, %680, %678, %634, %619, %617
  %702 = phi i32 [ %639, %634 ], [ %618, %617 ], [ %623, %619 ], [ %700, %695 ], [ %679, %678 ], [ %684, %680 ]
  %703 = add i32 %702, -38
  %704 = zext i32 %703 to i64
  %705 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %704
  %706 = load ptr, ptr %705, align 8, !tbaa !6
  %707 = getelementptr inbounds %struct.real_format, ptr %706, i64 0, i32 14
  %708 = load i8, ptr %707, align 1, !tbaa !37
  %709 = icmp ne i8 %708, 0
  %710 = load i32, ptr @flag_signed_zeros, align 4
  %711 = icmp ne i32 %710, 0
  %712 = select i1 %709, i1 %711, i1 false
  br i1 %712, label %1897, label %713

713:                                              ; preds = %701, %498
  %714 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %715 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %716 = load ptr, ptr %715, align 8, !tbaa !17
  %717 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %716)
  %718 = icmp eq i8 %717, 0
  br i1 %718, label %719, label %721

719:                                              ; preds = %713
  %720 = load ptr, ptr %714, align 8, !tbaa !17
  br label %742

721:                                              ; preds = %713
  %722 = load ptr, ptr %715, align 8, !tbaa !17
  %723 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %724 = icmp eq i32 %723, 0
  br i1 %724, label %738, label %725

725:                                              ; preds = %721
  %726 = load ptr, ptr %714, align 8, !tbaa !17
  %727 = load i64, ptr %726, align 8
  %728 = and i64 %727, 131072
  %729 = icmp eq i64 %728, 0
  br i1 %729, label %730, label %738

730:                                              ; preds = %725
  %731 = load i64, ptr %722, align 8
  %732 = and i64 %731, 131072
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %738

734:                                              ; preds = %730
  %735 = or i64 %731, %727
  %736 = and i64 %735, 65536
  %737 = icmp eq i64 %736, 0
  br i1 %737, label %738, label %742

738:                                              ; preds = %725, %730, %721, %734
  %739 = tail call fastcc ptr @negate_expr(ptr noundef %722)
  %740 = load ptr, ptr %714, align 8, !tbaa !17
  %741 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %4, ptr noundef %739, ptr noundef %740)
  br label %1898

742:                                              ; preds = %719, %734
  %743 = phi ptr [ %720, %719 ], [ %726, %734 ]
  %744 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %743)
  %745 = icmp eq i8 %744, 0
  br i1 %745, label %1897, label %746

746:                                              ; preds = %742
  %747 = load ptr, ptr %714, align 8, !tbaa !17
  %748 = tail call fastcc ptr @negate_expr(ptr noundef %747)
  %749 = load ptr, ptr %715, align 8, !tbaa !17
  %750 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %4, ptr noundef %748, ptr noundef %749)
  br label %1898

751:                                              ; preds = %2
  %752 = load i64, ptr %4, align 8
  %753 = and i64 %752, 65535
  %754 = icmp eq i64 %753, 14
  br i1 %754, label %755, label %758

755:                                              ; preds = %751
  %756 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %757 = load i64, ptr %4, align 8
  br label %763

758:                                              ; preds = %751
  %759 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %760 = load i32, ptr %759, align 4
  %761 = lshr i32 %760, 16
  %762 = and i32 %761, 255
  br label %763

763:                                              ; preds = %758, %755
  %764 = phi i64 [ %757, %755 ], [ %752, %758 ]
  %765 = phi i32 [ %756, %755 ], [ %762, %758 ]
  %766 = zext i32 %765 to i64
  %767 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %766
  %768 = load i8, ptr %767, align 1, !tbaa !17
  %769 = icmp eq i8 %768, 8
  br i1 %769, label %824, label %770

770:                                              ; preds = %763
  %771 = and i64 %764, 65535
  %772 = icmp eq i64 %771, 14
  br i1 %772, label %773, label %776

773:                                              ; preds = %770
  %774 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %775 = load i64, ptr %4, align 8
  br label %781

776:                                              ; preds = %770
  %777 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %778 = load i32, ptr %777, align 4
  %779 = lshr i32 %778, 16
  %780 = and i32 %779, 255
  br label %781

781:                                              ; preds = %776, %773
  %782 = phi i64 [ %775, %773 ], [ %764, %776 ]
  %783 = phi i32 [ %774, %773 ], [ %780, %776 ]
  %784 = zext i32 %783 to i64
  %785 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %784
  %786 = load i8, ptr %785, align 1, !tbaa !17
  %787 = icmp eq i8 %786, 9
  br i1 %787, label %824, label %788

788:                                              ; preds = %781
  %789 = and i64 %782, 65535
  %790 = icmp eq i64 %789, 14
  br i1 %790, label %791, label %794

791:                                              ; preds = %788
  %792 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %793 = load i64, ptr %4, align 8
  br label %799

794:                                              ; preds = %788
  %795 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %796 = load i32, ptr %795, align 4
  %797 = lshr i32 %796, 16
  %798 = and i32 %797, 255
  br label %799

799:                                              ; preds = %794, %791
  %800 = phi i64 [ %793, %791 ], [ %782, %794 ]
  %801 = phi i32 [ %792, %791 ], [ %798, %794 ]
  %802 = zext i32 %801 to i64
  %803 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %802
  %804 = load i8, ptr %803, align 1, !tbaa !17
  %805 = icmp eq i8 %804, 11
  br i1 %805, label %824, label %806

806:                                              ; preds = %799
  %807 = and i64 %800, 65535
  %808 = icmp eq i64 %807, 14
  br i1 %808, label %809, label %812

809:                                              ; preds = %806
  %810 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %811 = load i64, ptr %4, align 8
  br label %817

812:                                              ; preds = %806
  %813 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %814 = load i32, ptr %813, align 4
  %815 = lshr i32 %814, 16
  %816 = and i32 %815, 255
  br label %817

817:                                              ; preds = %812, %809
  %818 = phi i64 [ %811, %809 ], [ %800, %812 ]
  %819 = phi i32 [ %810, %809 ], [ %816, %812 ]
  %820 = zext i32 %819 to i64
  %821 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %820
  %822 = load i8, ptr %821, align 1, !tbaa !17
  %823 = icmp eq i8 %822, 17
  br i1 %823, label %824, label %1033

824:                                              ; preds = %817, %799, %781, %763
  %825 = phi i64 [ %800, %799 ], [ %782, %781 ], [ %764, %763 ], [ %818, %817 ]
  %826 = and i64 %825, 65535
  %827 = icmp eq i64 %826, 14
  br i1 %827, label %828, label %831

828:                                              ; preds = %824
  %829 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %830 = load i64, ptr %4, align 8
  br label %836

831:                                              ; preds = %824
  %832 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %833 = load i32, ptr %832, align 4
  %834 = lshr i32 %833, 16
  %835 = and i32 %834, 255
  br label %836

836:                                              ; preds = %831, %828
  %837 = phi i64 [ %830, %828 ], [ %825, %831 ]
  %838 = phi i32 [ %829, %828 ], [ %835, %831 ]
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %839
  %841 = load i8, ptr %840, align 1, !tbaa !17
  %842 = icmp eq i8 %841, 8
  br i1 %842, label %861, label %843

843:                                              ; preds = %836
  %844 = and i64 %837, 65535
  %845 = icmp eq i64 %844, 14
  br i1 %845, label %846, label %849

846:                                              ; preds = %843
  %847 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %848 = load i64, ptr %4, align 8
  br label %854

849:                                              ; preds = %843
  %850 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %851 = load i32, ptr %850, align 4
  %852 = lshr i32 %851, 16
  %853 = and i32 %852, 255
  br label %854

854:                                              ; preds = %849, %846
  %855 = phi i64 [ %848, %846 ], [ %837, %849 ]
  %856 = phi i32 [ %847, %846 ], [ %853, %849 ]
  %857 = zext i32 %856 to i64
  %858 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %857
  %859 = load i8, ptr %858, align 1, !tbaa !17
  %860 = icmp eq i8 %859, 9
  br i1 %860, label %861, label %872

861:                                              ; preds = %854, %836
  %862 = phi i64 [ %855, %854 ], [ %837, %836 ]
  %863 = and i64 %862, 65535
  %864 = icmp eq i64 %863, 14
  br i1 %864, label %865, label %867

865:                                              ; preds = %861
  %866 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %888

867:                                              ; preds = %861
  %868 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %869 = load i32, ptr %868, align 4
  %870 = lshr i32 %869, 16
  %871 = and i32 %870, 255
  br label %888

872:                                              ; preds = %854
  %873 = and i64 %855, 65535
  %874 = icmp eq i64 %873, 14
  br i1 %874, label %875, label %877

875:                                              ; preds = %872
  %876 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %882

877:                                              ; preds = %872
  %878 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %879 = load i32, ptr %878, align 4
  %880 = lshr i32 %879, 16
  %881 = and i32 %880, 255
  br label %882

882:                                              ; preds = %877, %875
  %883 = phi i32 [ %876, %875 ], [ %881, %877 ]
  %884 = zext i32 %883 to i64
  %885 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %884
  %886 = load i8, ptr %885, align 1, !tbaa !17
  %887 = zext i8 %886 to i32
  br label %888

888:                                              ; preds = %865, %867, %882
  %889 = phi i32 [ %887, %882 ], [ %866, %865 ], [ %871, %867 ]
  %890 = zext i32 %889 to i64
  %891 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %890
  %892 = load i8, ptr %891, align 1, !tbaa !17
  %893 = icmp eq i8 %892, 9
  %894 = load i64, ptr %4, align 8
  %895 = and i64 %894, 65535
  %896 = icmp eq i64 %895, 14
  br i1 %893, label %897, label %958

897:                                              ; preds = %888
  br i1 %896, label %898, label %901

898:                                              ; preds = %897
  %899 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %900 = load i64, ptr %4, align 8
  br label %906

901:                                              ; preds = %897
  %902 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %903 = load i32, ptr %902, align 4
  %904 = lshr i32 %903, 16
  %905 = and i32 %904, 255
  br label %906

906:                                              ; preds = %901, %898
  %907 = phi i64 [ %900, %898 ], [ %894, %901 ]
  %908 = phi i32 [ %899, %898 ], [ %905, %901 ]
  %909 = zext i32 %908 to i64
  %910 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %909
  %911 = load i8, ptr %910, align 1, !tbaa !17
  %912 = icmp eq i8 %911, 8
  br i1 %912, label %931, label %913

913:                                              ; preds = %906
  %914 = and i64 %907, 65535
  %915 = icmp eq i64 %914, 14
  br i1 %915, label %916, label %919

916:                                              ; preds = %913
  %917 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %918 = load i64, ptr %4, align 8
  br label %924

919:                                              ; preds = %913
  %920 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %921 = load i32, ptr %920, align 4
  %922 = lshr i32 %921, 16
  %923 = and i32 %922, 255
  br label %924

924:                                              ; preds = %919, %916
  %925 = phi i64 [ %918, %916 ], [ %907, %919 ]
  %926 = phi i32 [ %917, %916 ], [ %923, %919 ]
  %927 = zext i32 %926 to i64
  %928 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %927
  %929 = load i8, ptr %928, align 1, !tbaa !17
  %930 = icmp eq i8 %929, 9
  br i1 %930, label %931, label %942

931:                                              ; preds = %924, %906
  %932 = phi i64 [ %925, %924 ], [ %907, %906 ]
  %933 = and i64 %932, 65535
  %934 = icmp eq i64 %933, 14
  br i1 %934, label %935, label %937

935:                                              ; preds = %931
  %936 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1019

937:                                              ; preds = %931
  %938 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %939 = load i32, ptr %938, align 4
  %940 = lshr i32 %939, 16
  %941 = and i32 %940, 255
  br label %1019

942:                                              ; preds = %924
  %943 = and i64 %925, 65535
  %944 = icmp eq i64 %943, 14
  br i1 %944, label %945, label %947

945:                                              ; preds = %942
  %946 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %952

947:                                              ; preds = %942
  %948 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %949 = load i32, ptr %948, align 4
  %950 = lshr i32 %949, 16
  %951 = and i32 %950, 255
  br label %952

952:                                              ; preds = %947, %945
  %953 = phi i32 [ %946, %945 ], [ %951, %947 ]
  %954 = zext i32 %953 to i64
  %955 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %954
  %956 = load i8, ptr %955, align 1, !tbaa !17
  %957 = zext i8 %956 to i32
  br label %1019

958:                                              ; preds = %888
  br i1 %896, label %959, label %962

959:                                              ; preds = %958
  %960 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %961 = load i64, ptr %4, align 8
  br label %967

962:                                              ; preds = %958
  %963 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %964 = load i32, ptr %963, align 4
  %965 = lshr i32 %964, 16
  %966 = and i32 %965, 255
  br label %967

967:                                              ; preds = %962, %959
  %968 = phi i64 [ %961, %959 ], [ %894, %962 ]
  %969 = phi i32 [ %960, %959 ], [ %966, %962 ]
  %970 = zext i32 %969 to i64
  %971 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %970
  %972 = load i8, ptr %971, align 1, !tbaa !17
  %973 = icmp eq i8 %972, 8
  br i1 %973, label %992, label %974

974:                                              ; preds = %967
  %975 = and i64 %968, 65535
  %976 = icmp eq i64 %975, 14
  br i1 %976, label %977, label %980

977:                                              ; preds = %974
  %978 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %979 = load i64, ptr %4, align 8
  br label %985

980:                                              ; preds = %974
  %981 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %982 = load i32, ptr %981, align 4
  %983 = lshr i32 %982, 16
  %984 = and i32 %983, 255
  br label %985

985:                                              ; preds = %980, %977
  %986 = phi i64 [ %979, %977 ], [ %968, %980 ]
  %987 = phi i32 [ %978, %977 ], [ %984, %980 ]
  %988 = zext i32 %987 to i64
  %989 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %988
  %990 = load i8, ptr %989, align 1, !tbaa !17
  %991 = icmp eq i8 %990, 9
  br i1 %991, label %992, label %1003

992:                                              ; preds = %985, %967
  %993 = phi i64 [ %986, %985 ], [ %968, %967 ]
  %994 = and i64 %993, 65535
  %995 = icmp eq i64 %994, 14
  br i1 %995, label %996, label %998

996:                                              ; preds = %992
  %997 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1019

998:                                              ; preds = %992
  %999 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1000 = load i32, ptr %999, align 4
  %1001 = lshr i32 %1000, 16
  %1002 = and i32 %1001, 255
  br label %1019

1003:                                             ; preds = %985
  %1004 = and i64 %986, 65535
  %1005 = icmp eq i64 %1004, 14
  br i1 %1005, label %1006, label %1008

1006:                                             ; preds = %1003
  %1007 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1013

1008:                                             ; preds = %1003
  %1009 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1010 = load i32, ptr %1009, align 4
  %1011 = lshr i32 %1010, 16
  %1012 = and i32 %1011, 255
  br label %1013

1013:                                             ; preds = %1008, %1006
  %1014 = phi i32 [ %1007, %1006 ], [ %1012, %1008 ]
  %1015 = zext i32 %1014 to i64
  %1016 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1015
  %1017 = load i8, ptr %1016, align 1, !tbaa !17
  %1018 = zext i8 %1017 to i32
  br label %1019

1019:                                             ; preds = %1013, %998, %996, %952, %937, %935
  %1020 = phi i32 [ %957, %952 ], [ %936, %935 ], [ %941, %937 ], [ %1018, %1013 ], [ %997, %996 ], [ %1002, %998 ]
  %1021 = add i32 %1020, -38
  %1022 = zext i32 %1021 to i64
  %1023 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1022
  %1024 = load ptr, ptr %1023, align 8, !tbaa !6
  %1025 = getelementptr inbounds %struct.real_format, ptr %1024, i64 0, i32 10
  %1026 = load i8, ptr %1025, align 1, !tbaa !49
  %1027 = icmp ne i8 %1026, 0
  %1028 = load i32, ptr @flag_rounding_math, align 4
  %1029 = icmp ne i32 %1028, 0
  %1030 = select i1 %1027, i1 %1029, i1 false
  br i1 %1030, label %1897, label %1031

1031:                                             ; preds = %1019
  %1032 = load i64, ptr %4, align 8
  br label %1033

1033:                                             ; preds = %1031, %817
  %1034 = phi i64 [ %1032, %1031 ], [ %818, %817 ]
  %1035 = and i64 %1034, 65535
  %1036 = icmp eq i64 %1035, 14
  br i1 %1036, label %1037, label %1040

1037:                                             ; preds = %1033
  %1038 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1039 = load i64, ptr %4, align 8
  br label %1045

1040:                                             ; preds = %1033
  %1041 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1042 = load i32, ptr %1041, align 4
  %1043 = lshr i32 %1042, 16
  %1044 = and i32 %1043, 255
  br label %1045

1045:                                             ; preds = %1040, %1037
  %1046 = phi i64 [ %1039, %1037 ], [ %1034, %1040 ]
  %1047 = phi i32 [ %1038, %1037 ], [ %1044, %1040 ]
  %1048 = zext i32 %1047 to i64
  %1049 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1048
  %1050 = load i8, ptr %1049, align 1, !tbaa !17
  %1051 = icmp eq i8 %1050, 8
  br i1 %1051, label %1106, label %1052

1052:                                             ; preds = %1045
  %1053 = and i64 %1046, 65535
  %1054 = icmp eq i64 %1053, 14
  br i1 %1054, label %1055, label %1058

1055:                                             ; preds = %1052
  %1056 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1057 = load i64, ptr %4, align 8
  br label %1063

1058:                                             ; preds = %1052
  %1059 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1060 = load i32, ptr %1059, align 4
  %1061 = lshr i32 %1060, 16
  %1062 = and i32 %1061, 255
  br label %1063

1063:                                             ; preds = %1058, %1055
  %1064 = phi i64 [ %1057, %1055 ], [ %1046, %1058 ]
  %1065 = phi i32 [ %1056, %1055 ], [ %1062, %1058 ]
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1066
  %1068 = load i8, ptr %1067, align 1, !tbaa !17
  %1069 = icmp eq i8 %1068, 9
  br i1 %1069, label %1106, label %1070

1070:                                             ; preds = %1063
  %1071 = and i64 %1064, 65535
  %1072 = icmp eq i64 %1071, 14
  br i1 %1072, label %1073, label %1076

1073:                                             ; preds = %1070
  %1074 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1075 = load i64, ptr %4, align 8
  br label %1081

1076:                                             ; preds = %1070
  %1077 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1078 = load i32, ptr %1077, align 4
  %1079 = lshr i32 %1078, 16
  %1080 = and i32 %1079, 255
  br label %1081

1081:                                             ; preds = %1076, %1073
  %1082 = phi i64 [ %1075, %1073 ], [ %1064, %1076 ]
  %1083 = phi i32 [ %1074, %1073 ], [ %1080, %1076 ]
  %1084 = zext i32 %1083 to i64
  %1085 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1084
  %1086 = load i8, ptr %1085, align 1, !tbaa !17
  %1087 = icmp eq i8 %1086, 11
  br i1 %1087, label %1106, label %1088

1088:                                             ; preds = %1081
  %1089 = and i64 %1082, 65535
  %1090 = icmp eq i64 %1089, 14
  br i1 %1090, label %1091, label %1093

1091:                                             ; preds = %1088
  %1092 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1098

1093:                                             ; preds = %1088
  %1094 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1095 = load i32, ptr %1094, align 4
  %1096 = lshr i32 %1095, 16
  %1097 = and i32 %1096, 255
  br label %1098

1098:                                             ; preds = %1093, %1091
  %1099 = phi i32 [ %1092, %1091 ], [ %1097, %1093 ]
  %1100 = zext i32 %1099 to i64
  %1101 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1100
  %1102 = load i8, ptr %1101, align 1, !tbaa !17
  %1103 = icmp eq i8 %1102, 17
  br i1 %1103, label %1104, label %1313

1104:                                             ; preds = %1098
  %1105 = load i64, ptr %4, align 8
  br label %1106

1106:                                             ; preds = %1104, %1081, %1063, %1045
  %1107 = phi i64 [ %1105, %1104 ], [ %1082, %1081 ], [ %1064, %1063 ], [ %1046, %1045 ]
  %1108 = and i64 %1107, 65535
  %1109 = icmp eq i64 %1108, 14
  br i1 %1109, label %1110, label %1113

1110:                                             ; preds = %1106
  %1111 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1112 = load i64, ptr %4, align 8
  br label %1118

1113:                                             ; preds = %1106
  %1114 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1115 = load i32, ptr %1114, align 4
  %1116 = lshr i32 %1115, 16
  %1117 = and i32 %1116, 255
  br label %1118

1118:                                             ; preds = %1113, %1110
  %1119 = phi i64 [ %1112, %1110 ], [ %1107, %1113 ]
  %1120 = phi i32 [ %1111, %1110 ], [ %1117, %1113 ]
  %1121 = zext i32 %1120 to i64
  %1122 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1121
  %1123 = load i8, ptr %1122, align 1, !tbaa !17
  %1124 = icmp eq i8 %1123, 8
  br i1 %1124, label %1143, label %1125

1125:                                             ; preds = %1118
  %1126 = and i64 %1119, 65535
  %1127 = icmp eq i64 %1126, 14
  br i1 %1127, label %1128, label %1131

1128:                                             ; preds = %1125
  %1129 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1130 = load i64, ptr %4, align 8
  br label %1136

1131:                                             ; preds = %1125
  %1132 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1133 = load i32, ptr %1132, align 4
  %1134 = lshr i32 %1133, 16
  %1135 = and i32 %1134, 255
  br label %1136

1136:                                             ; preds = %1131, %1128
  %1137 = phi i64 [ %1130, %1128 ], [ %1119, %1131 ]
  %1138 = phi i32 [ %1129, %1128 ], [ %1135, %1131 ]
  %1139 = zext i32 %1138 to i64
  %1140 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1139
  %1141 = load i8, ptr %1140, align 1, !tbaa !17
  %1142 = icmp eq i8 %1141, 9
  br i1 %1142, label %1143, label %1154

1143:                                             ; preds = %1136, %1118
  %1144 = phi i64 [ %1137, %1136 ], [ %1119, %1118 ]
  %1145 = and i64 %1144, 65535
  %1146 = icmp eq i64 %1145, 14
  br i1 %1146, label %1147, label %1149

1147:                                             ; preds = %1143
  %1148 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1170

1149:                                             ; preds = %1143
  %1150 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1151 = load i32, ptr %1150, align 4
  %1152 = lshr i32 %1151, 16
  %1153 = and i32 %1152, 255
  br label %1170

1154:                                             ; preds = %1136
  %1155 = and i64 %1137, 65535
  %1156 = icmp eq i64 %1155, 14
  br i1 %1156, label %1157, label %1159

1157:                                             ; preds = %1154
  %1158 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1164

1159:                                             ; preds = %1154
  %1160 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1161 = load i32, ptr %1160, align 4
  %1162 = lshr i32 %1161, 16
  %1163 = and i32 %1162, 255
  br label %1164

1164:                                             ; preds = %1159, %1157
  %1165 = phi i32 [ %1158, %1157 ], [ %1163, %1159 ]
  %1166 = zext i32 %1165 to i64
  %1167 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1166
  %1168 = load i8, ptr %1167, align 1, !tbaa !17
  %1169 = zext i8 %1168 to i32
  br label %1170

1170:                                             ; preds = %1147, %1149, %1164
  %1171 = phi i32 [ %1169, %1164 ], [ %1148, %1147 ], [ %1153, %1149 ]
  %1172 = zext i32 %1171 to i64
  %1173 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1172
  %1174 = load i8, ptr %1173, align 1, !tbaa !17
  %1175 = icmp eq i8 %1174, 9
  %1176 = load i64, ptr %4, align 8
  %1177 = and i64 %1176, 65535
  %1178 = icmp eq i64 %1177, 14
  br i1 %1175, label %1179, label %1240

1179:                                             ; preds = %1170
  br i1 %1178, label %1180, label %1183

1180:                                             ; preds = %1179
  %1181 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1182 = load i64, ptr %4, align 8
  br label %1188

1183:                                             ; preds = %1179
  %1184 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1185 = load i32, ptr %1184, align 4
  %1186 = lshr i32 %1185, 16
  %1187 = and i32 %1186, 255
  br label %1188

1188:                                             ; preds = %1183, %1180
  %1189 = phi i64 [ %1182, %1180 ], [ %1176, %1183 ]
  %1190 = phi i32 [ %1181, %1180 ], [ %1187, %1183 ]
  %1191 = zext i32 %1190 to i64
  %1192 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1191
  %1193 = load i8, ptr %1192, align 1, !tbaa !17
  %1194 = icmp eq i8 %1193, 8
  br i1 %1194, label %1213, label %1195

1195:                                             ; preds = %1188
  %1196 = and i64 %1189, 65535
  %1197 = icmp eq i64 %1196, 14
  br i1 %1197, label %1198, label %1201

1198:                                             ; preds = %1195
  %1199 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1200 = load i64, ptr %4, align 8
  br label %1206

1201:                                             ; preds = %1195
  %1202 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1203 = load i32, ptr %1202, align 4
  %1204 = lshr i32 %1203, 16
  %1205 = and i32 %1204, 255
  br label %1206

1206:                                             ; preds = %1201, %1198
  %1207 = phi i64 [ %1200, %1198 ], [ %1189, %1201 ]
  %1208 = phi i32 [ %1199, %1198 ], [ %1205, %1201 ]
  %1209 = zext i32 %1208 to i64
  %1210 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1209
  %1211 = load i8, ptr %1210, align 1, !tbaa !17
  %1212 = icmp eq i8 %1211, 9
  br i1 %1212, label %1213, label %1224

1213:                                             ; preds = %1206, %1188
  %1214 = phi i64 [ %1207, %1206 ], [ %1189, %1188 ]
  %1215 = and i64 %1214, 65535
  %1216 = icmp eq i64 %1215, 14
  br i1 %1216, label %1217, label %1219

1217:                                             ; preds = %1213
  %1218 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1301

1219:                                             ; preds = %1213
  %1220 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1221 = load i32, ptr %1220, align 4
  %1222 = lshr i32 %1221, 16
  %1223 = and i32 %1222, 255
  br label %1301

1224:                                             ; preds = %1206
  %1225 = and i64 %1207, 65535
  %1226 = icmp eq i64 %1225, 14
  br i1 %1226, label %1227, label %1229

1227:                                             ; preds = %1224
  %1228 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1234

1229:                                             ; preds = %1224
  %1230 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1231 = load i32, ptr %1230, align 4
  %1232 = lshr i32 %1231, 16
  %1233 = and i32 %1232, 255
  br label %1234

1234:                                             ; preds = %1229, %1227
  %1235 = phi i32 [ %1228, %1227 ], [ %1233, %1229 ]
  %1236 = zext i32 %1235 to i64
  %1237 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1236
  %1238 = load i8, ptr %1237, align 1, !tbaa !17
  %1239 = zext i8 %1238 to i32
  br label %1301

1240:                                             ; preds = %1170
  br i1 %1178, label %1241, label %1244

1241:                                             ; preds = %1240
  %1242 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1243 = load i64, ptr %4, align 8
  br label %1249

1244:                                             ; preds = %1240
  %1245 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1246 = load i32, ptr %1245, align 4
  %1247 = lshr i32 %1246, 16
  %1248 = and i32 %1247, 255
  br label %1249

1249:                                             ; preds = %1244, %1241
  %1250 = phi i64 [ %1243, %1241 ], [ %1176, %1244 ]
  %1251 = phi i32 [ %1242, %1241 ], [ %1248, %1244 ]
  %1252 = zext i32 %1251 to i64
  %1253 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1252
  %1254 = load i8, ptr %1253, align 1, !tbaa !17
  %1255 = icmp eq i8 %1254, 8
  br i1 %1255, label %1274, label %1256

1256:                                             ; preds = %1249
  %1257 = and i64 %1250, 65535
  %1258 = icmp eq i64 %1257, 14
  br i1 %1258, label %1259, label %1262

1259:                                             ; preds = %1256
  %1260 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1261 = load i64, ptr %4, align 8
  br label %1267

1262:                                             ; preds = %1256
  %1263 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1264 = load i32, ptr %1263, align 4
  %1265 = lshr i32 %1264, 16
  %1266 = and i32 %1265, 255
  br label %1267

1267:                                             ; preds = %1262, %1259
  %1268 = phi i64 [ %1261, %1259 ], [ %1250, %1262 ]
  %1269 = phi i32 [ %1260, %1259 ], [ %1266, %1262 ]
  %1270 = zext i32 %1269 to i64
  %1271 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1270
  %1272 = load i8, ptr %1271, align 1, !tbaa !17
  %1273 = icmp eq i8 %1272, 9
  br i1 %1273, label %1274, label %1285

1274:                                             ; preds = %1267, %1249
  %1275 = phi i64 [ %1268, %1267 ], [ %1250, %1249 ]
  %1276 = and i64 %1275, 65535
  %1277 = icmp eq i64 %1276, 14
  br i1 %1277, label %1278, label %1280

1278:                                             ; preds = %1274
  %1279 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1301

1280:                                             ; preds = %1274
  %1281 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1282 = load i32, ptr %1281, align 4
  %1283 = lshr i32 %1282, 16
  %1284 = and i32 %1283, 255
  br label %1301

1285:                                             ; preds = %1267
  %1286 = and i64 %1268, 65535
  %1287 = icmp eq i64 %1286, 14
  br i1 %1287, label %1288, label %1290

1288:                                             ; preds = %1285
  %1289 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1295

1290:                                             ; preds = %1285
  %1291 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1292 = load i32, ptr %1291, align 4
  %1293 = lshr i32 %1292, 16
  %1294 = and i32 %1293, 255
  br label %1295

1295:                                             ; preds = %1290, %1288
  %1296 = phi i32 [ %1289, %1288 ], [ %1294, %1290 ]
  %1297 = zext i32 %1296 to i64
  %1298 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1297
  %1299 = load i8, ptr %1298, align 1, !tbaa !17
  %1300 = zext i8 %1299 to i32
  br label %1301

1301:                                             ; preds = %1295, %1280, %1278, %1234, %1219, %1217
  %1302 = phi i32 [ %1239, %1234 ], [ %1218, %1217 ], [ %1223, %1219 ], [ %1300, %1295 ], [ %1279, %1278 ], [ %1284, %1280 ]
  %1303 = add i32 %1302, -38
  %1304 = zext i32 %1303 to i64
  %1305 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1304
  %1306 = load ptr, ptr %1305, align 8, !tbaa !6
  %1307 = getelementptr inbounds %struct.real_format, ptr %1306, i64 0, i32 14
  %1308 = load i8, ptr %1307, align 1, !tbaa !37
  %1309 = icmp ne i8 %1308, 0
  %1310 = load i32, ptr @flag_signed_zeros, align 4
  %1311 = icmp ne i32 %1310, 0
  %1312 = select i1 %1309, i1 %1311, i1 false
  br i1 %1312, label %1897, label %1313

1313:                                             ; preds = %1301, %1098
  %1314 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %1315 = load ptr, ptr %1314, align 8, !tbaa !17
  %1316 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %1317 = load ptr, ptr %1316, align 8, !tbaa !17
  %1318 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %1319 = icmp eq i32 %1318, 0
  br i1 %1319, label %1332, label %1320

1320:                                             ; preds = %1313
  %1321 = load i64, ptr %1315, align 8
  %1322 = and i64 %1321, 131072
  %1323 = icmp eq i64 %1322, 0
  br i1 %1323, label %1324, label %1332

1324:                                             ; preds = %1320
  %1325 = load i64, ptr %1317, align 8
  %1326 = and i64 %1325, 131072
  %1327 = icmp eq i64 %1326, 0
  br i1 %1327, label %1328, label %1332

1328:                                             ; preds = %1324
  %1329 = or i64 %1325, %1321
  %1330 = and i64 %1329, 65536
  %1331 = icmp eq i64 %1330, 0
  br i1 %1331, label %1332, label %1897

1332:                                             ; preds = %1320, %1324, %1313, %1328
  %1333 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %4, ptr noundef %1317, ptr noundef %1315)
  br label %1898

1334:                                             ; preds = %2
  %1335 = load i64, ptr %4, align 8
  %1336 = and i64 %1335, 2097152
  %1337 = icmp eq i64 %1336, 0
  br i1 %1337, label %1338, label %1897

1338:                                             ; preds = %7, %1334
  %1339 = phi i64 [ %8, %7 ], [ %1335, %1334 ]
  %1340 = and i64 %1339, 65535
  %1341 = icmp eq i64 %1340, 14
  br i1 %1341, label %1342, label %1345

1342:                                             ; preds = %1338
  %1343 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1344 = load i64, ptr %4, align 8
  br label %1350

1345:                                             ; preds = %1338
  %1346 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1347 = load i32, ptr %1346, align 4
  %1348 = lshr i32 %1347, 16
  %1349 = and i32 %1348, 255
  br label %1350

1350:                                             ; preds = %1345, %1342
  %1351 = phi i64 [ %1344, %1342 ], [ %1339, %1345 ]
  %1352 = phi i32 [ %1343, %1342 ], [ %1349, %1345 ]
  %1353 = zext i32 %1352 to i64
  %1354 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1353
  %1355 = load i8, ptr %1354, align 1, !tbaa !17
  %1356 = icmp eq i8 %1355, 8
  br i1 %1356, label %1411, label %1357

1357:                                             ; preds = %1350
  %1358 = and i64 %1351, 65535
  %1359 = icmp eq i64 %1358, 14
  br i1 %1359, label %1360, label %1363

1360:                                             ; preds = %1357
  %1361 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1362 = load i64, ptr %4, align 8
  br label %1368

1363:                                             ; preds = %1357
  %1364 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1365 = load i32, ptr %1364, align 4
  %1366 = lshr i32 %1365, 16
  %1367 = and i32 %1366, 255
  br label %1368

1368:                                             ; preds = %1363, %1360
  %1369 = phi i64 [ %1362, %1360 ], [ %1351, %1363 ]
  %1370 = phi i32 [ %1361, %1360 ], [ %1367, %1363 ]
  %1371 = zext i32 %1370 to i64
  %1372 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1371
  %1373 = load i8, ptr %1372, align 1, !tbaa !17
  %1374 = icmp eq i8 %1373, 9
  br i1 %1374, label %1411, label %1375

1375:                                             ; preds = %1368
  %1376 = and i64 %1369, 65535
  %1377 = icmp eq i64 %1376, 14
  br i1 %1377, label %1378, label %1381

1378:                                             ; preds = %1375
  %1379 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1380 = load i64, ptr %4, align 8
  br label %1386

1381:                                             ; preds = %1375
  %1382 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1383 = load i32, ptr %1382, align 4
  %1384 = lshr i32 %1383, 16
  %1385 = and i32 %1384, 255
  br label %1386

1386:                                             ; preds = %1381, %1378
  %1387 = phi i64 [ %1380, %1378 ], [ %1369, %1381 ]
  %1388 = phi i32 [ %1379, %1378 ], [ %1385, %1381 ]
  %1389 = zext i32 %1388 to i64
  %1390 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1389
  %1391 = load i8, ptr %1390, align 1, !tbaa !17
  %1392 = icmp eq i8 %1391, 11
  br i1 %1392, label %1411, label %1393

1393:                                             ; preds = %1386
  %1394 = and i64 %1387, 65535
  %1395 = icmp eq i64 %1394, 14
  br i1 %1395, label %1396, label %1398

1396:                                             ; preds = %1393
  %1397 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1403

1398:                                             ; preds = %1393
  %1399 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1400 = load i32, ptr %1399, align 4
  %1401 = lshr i32 %1400, 16
  %1402 = and i32 %1401, 255
  br label %1403

1403:                                             ; preds = %1398, %1396
  %1404 = phi i32 [ %1397, %1396 ], [ %1402, %1398 ]
  %1405 = zext i32 %1404 to i64
  %1406 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1405
  %1407 = load i8, ptr %1406, align 1, !tbaa !17
  %1408 = icmp eq i8 %1407, 17
  br i1 %1408, label %1409, label %1618

1409:                                             ; preds = %1403
  %1410 = load i64, ptr %4, align 8
  br label %1411

1411:                                             ; preds = %1409, %1386, %1368, %1350
  %1412 = phi i64 [ %1410, %1409 ], [ %1387, %1386 ], [ %1369, %1368 ], [ %1351, %1350 ]
  %1413 = and i64 %1412, 65535
  %1414 = icmp eq i64 %1413, 14
  br i1 %1414, label %1415, label %1418

1415:                                             ; preds = %1411
  %1416 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1417 = load i64, ptr %4, align 8
  br label %1423

1418:                                             ; preds = %1411
  %1419 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1420 = load i32, ptr %1419, align 4
  %1421 = lshr i32 %1420, 16
  %1422 = and i32 %1421, 255
  br label %1423

1423:                                             ; preds = %1418, %1415
  %1424 = phi i64 [ %1417, %1415 ], [ %1412, %1418 ]
  %1425 = phi i32 [ %1416, %1415 ], [ %1422, %1418 ]
  %1426 = zext i32 %1425 to i64
  %1427 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1426
  %1428 = load i8, ptr %1427, align 1, !tbaa !17
  %1429 = icmp eq i8 %1428, 8
  br i1 %1429, label %1448, label %1430

1430:                                             ; preds = %1423
  %1431 = and i64 %1424, 65535
  %1432 = icmp eq i64 %1431, 14
  br i1 %1432, label %1433, label %1436

1433:                                             ; preds = %1430
  %1434 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1435 = load i64, ptr %4, align 8
  br label %1441

1436:                                             ; preds = %1430
  %1437 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1438 = load i32, ptr %1437, align 4
  %1439 = lshr i32 %1438, 16
  %1440 = and i32 %1439, 255
  br label %1441

1441:                                             ; preds = %1436, %1433
  %1442 = phi i64 [ %1435, %1433 ], [ %1424, %1436 ]
  %1443 = phi i32 [ %1434, %1433 ], [ %1440, %1436 ]
  %1444 = zext i32 %1443 to i64
  %1445 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1444
  %1446 = load i8, ptr %1445, align 1, !tbaa !17
  %1447 = icmp eq i8 %1446, 9
  br i1 %1447, label %1448, label %1459

1448:                                             ; preds = %1441, %1423
  %1449 = phi i64 [ %1442, %1441 ], [ %1424, %1423 ]
  %1450 = and i64 %1449, 65535
  %1451 = icmp eq i64 %1450, 14
  br i1 %1451, label %1452, label %1454

1452:                                             ; preds = %1448
  %1453 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1475

1454:                                             ; preds = %1448
  %1455 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1456 = load i32, ptr %1455, align 4
  %1457 = lshr i32 %1456, 16
  %1458 = and i32 %1457, 255
  br label %1475

1459:                                             ; preds = %1441
  %1460 = and i64 %1442, 65535
  %1461 = icmp eq i64 %1460, 14
  br i1 %1461, label %1462, label %1464

1462:                                             ; preds = %1459
  %1463 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1469

1464:                                             ; preds = %1459
  %1465 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1466 = load i32, ptr %1465, align 4
  %1467 = lshr i32 %1466, 16
  %1468 = and i32 %1467, 255
  br label %1469

1469:                                             ; preds = %1464, %1462
  %1470 = phi i32 [ %1463, %1462 ], [ %1468, %1464 ]
  %1471 = zext i32 %1470 to i64
  %1472 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1471
  %1473 = load i8, ptr %1472, align 1, !tbaa !17
  %1474 = zext i8 %1473 to i32
  br label %1475

1475:                                             ; preds = %1452, %1454, %1469
  %1476 = phi i32 [ %1474, %1469 ], [ %1453, %1452 ], [ %1458, %1454 ]
  %1477 = zext i32 %1476 to i64
  %1478 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1477
  %1479 = load i8, ptr %1478, align 1, !tbaa !17
  %1480 = icmp eq i8 %1479, 9
  %1481 = load i64, ptr %4, align 8
  %1482 = and i64 %1481, 65535
  %1483 = icmp eq i64 %1482, 14
  br i1 %1480, label %1484, label %1545

1484:                                             ; preds = %1475
  br i1 %1483, label %1485, label %1488

1485:                                             ; preds = %1484
  %1486 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1487 = load i64, ptr %4, align 8
  br label %1493

1488:                                             ; preds = %1484
  %1489 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1490 = load i32, ptr %1489, align 4
  %1491 = lshr i32 %1490, 16
  %1492 = and i32 %1491, 255
  br label %1493

1493:                                             ; preds = %1488, %1485
  %1494 = phi i64 [ %1487, %1485 ], [ %1481, %1488 ]
  %1495 = phi i32 [ %1486, %1485 ], [ %1492, %1488 ]
  %1496 = zext i32 %1495 to i64
  %1497 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1496
  %1498 = load i8, ptr %1497, align 1, !tbaa !17
  %1499 = icmp eq i8 %1498, 8
  br i1 %1499, label %1518, label %1500

1500:                                             ; preds = %1493
  %1501 = and i64 %1494, 65535
  %1502 = icmp eq i64 %1501, 14
  br i1 %1502, label %1503, label %1506

1503:                                             ; preds = %1500
  %1504 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1505 = load i64, ptr %4, align 8
  br label %1511

1506:                                             ; preds = %1500
  %1507 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1508 = load i32, ptr %1507, align 4
  %1509 = lshr i32 %1508, 16
  %1510 = and i32 %1509, 255
  br label %1511

1511:                                             ; preds = %1506, %1503
  %1512 = phi i64 [ %1505, %1503 ], [ %1494, %1506 ]
  %1513 = phi i32 [ %1504, %1503 ], [ %1510, %1506 ]
  %1514 = zext i32 %1513 to i64
  %1515 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1514
  %1516 = load i8, ptr %1515, align 1, !tbaa !17
  %1517 = icmp eq i8 %1516, 9
  br i1 %1517, label %1518, label %1529

1518:                                             ; preds = %1511, %1493
  %1519 = phi i64 [ %1512, %1511 ], [ %1494, %1493 ]
  %1520 = and i64 %1519, 65535
  %1521 = icmp eq i64 %1520, 14
  br i1 %1521, label %1522, label %1524

1522:                                             ; preds = %1518
  %1523 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1606

1524:                                             ; preds = %1518
  %1525 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1526 = load i32, ptr %1525, align 4
  %1527 = lshr i32 %1526, 16
  %1528 = and i32 %1527, 255
  br label %1606

1529:                                             ; preds = %1511
  %1530 = and i64 %1512, 65535
  %1531 = icmp eq i64 %1530, 14
  br i1 %1531, label %1532, label %1534

1532:                                             ; preds = %1529
  %1533 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1539

1534:                                             ; preds = %1529
  %1535 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1536 = load i32, ptr %1535, align 4
  %1537 = lshr i32 %1536, 16
  %1538 = and i32 %1537, 255
  br label %1539

1539:                                             ; preds = %1534, %1532
  %1540 = phi i32 [ %1533, %1532 ], [ %1538, %1534 ]
  %1541 = zext i32 %1540 to i64
  %1542 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1541
  %1543 = load i8, ptr %1542, align 1, !tbaa !17
  %1544 = zext i8 %1543 to i32
  br label %1606

1545:                                             ; preds = %1475
  br i1 %1483, label %1546, label %1549

1546:                                             ; preds = %1545
  %1547 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1548 = load i64, ptr %4, align 8
  br label %1554

1549:                                             ; preds = %1545
  %1550 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1551 = load i32, ptr %1550, align 4
  %1552 = lshr i32 %1551, 16
  %1553 = and i32 %1552, 255
  br label %1554

1554:                                             ; preds = %1549, %1546
  %1555 = phi i64 [ %1548, %1546 ], [ %1481, %1549 ]
  %1556 = phi i32 [ %1547, %1546 ], [ %1553, %1549 ]
  %1557 = zext i32 %1556 to i64
  %1558 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1557
  %1559 = load i8, ptr %1558, align 1, !tbaa !17
  %1560 = icmp eq i8 %1559, 8
  br i1 %1560, label %1579, label %1561

1561:                                             ; preds = %1554
  %1562 = and i64 %1555, 65535
  %1563 = icmp eq i64 %1562, 14
  br i1 %1563, label %1564, label %1567

1564:                                             ; preds = %1561
  %1565 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  %1566 = load i64, ptr %4, align 8
  br label %1572

1567:                                             ; preds = %1561
  %1568 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1569 = load i32, ptr %1568, align 4
  %1570 = lshr i32 %1569, 16
  %1571 = and i32 %1570, 255
  br label %1572

1572:                                             ; preds = %1567, %1564
  %1573 = phi i64 [ %1566, %1564 ], [ %1555, %1567 ]
  %1574 = phi i32 [ %1565, %1564 ], [ %1571, %1567 ]
  %1575 = zext i32 %1574 to i64
  %1576 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1575
  %1577 = load i8, ptr %1576, align 1, !tbaa !17
  %1578 = icmp eq i8 %1577, 9
  br i1 %1578, label %1579, label %1590

1579:                                             ; preds = %1572, %1554
  %1580 = phi i64 [ %1573, %1572 ], [ %1555, %1554 ]
  %1581 = and i64 %1580, 65535
  %1582 = icmp eq i64 %1581, 14
  br i1 %1582, label %1583, label %1585

1583:                                             ; preds = %1579
  %1584 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1606

1585:                                             ; preds = %1579
  %1586 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1587 = load i32, ptr %1586, align 4
  %1588 = lshr i32 %1587, 16
  %1589 = and i32 %1588, 255
  br label %1606

1590:                                             ; preds = %1572
  %1591 = and i64 %1573, 65535
  %1592 = icmp eq i64 %1591, 14
  br i1 %1592, label %1593, label %1595

1593:                                             ; preds = %1590
  %1594 = tail call i32 @vector_type_mode(ptr noundef nonnull %4) #24
  br label %1600

1595:                                             ; preds = %1590
  %1596 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1597 = load i32, ptr %1596, align 4
  %1598 = lshr i32 %1597, 16
  %1599 = and i32 %1598, 255
  br label %1600

1600:                                             ; preds = %1595, %1593
  %1601 = phi i32 [ %1594, %1593 ], [ %1599, %1595 ]
  %1602 = zext i32 %1601 to i64
  %1603 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1602
  %1604 = load i8, ptr %1603, align 1, !tbaa !17
  %1605 = zext i8 %1604 to i32
  br label %1606

1606:                                             ; preds = %1600, %1585, %1583, %1539, %1524, %1522
  %1607 = phi i32 [ %1544, %1539 ], [ %1523, %1522 ], [ %1528, %1524 ], [ %1605, %1600 ], [ %1584, %1583 ], [ %1589, %1585 ]
  %1608 = add i32 %1607, -38
  %1609 = zext i32 %1608 to i64
  %1610 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1609
  %1611 = load ptr, ptr %1610, align 8, !tbaa !6
  %1612 = getelementptr inbounds %struct.real_format, ptr %1611, i64 0, i32 10
  %1613 = load i8, ptr %1612, align 1, !tbaa !49
  %1614 = icmp ne i8 %1613, 0
  %1615 = load i32, ptr @flag_rounding_math, align 4
  %1616 = icmp ne i32 %1615, 0
  %1617 = select i1 %1614, i1 %1616, i1 false
  br i1 %1617, label %1897, label %1618

1618:                                             ; preds = %1606, %1403
  %1619 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %1620 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %1621 = load ptr, ptr %1620, align 8, !tbaa !17
  %1622 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1621)
  %1623 = icmp eq i8 %1622, 0
  br i1 %1623, label %1662, label %1624

1624:                                             ; preds = %1618
  %1625 = load i64, ptr %1, align 8
  %1626 = trunc i64 %1625 to i32
  %1627 = and i32 %1626, 65535
  %1628 = load ptr, ptr %1619, align 8, !tbaa !17
  %1629 = icmp eq ptr %1621, null
  br i1 %1629, label %1655, label %1630

1630:                                             ; preds = %1624
  %1631 = load i64, ptr %1621, align 8
  %1632 = and i64 %1631, 65535
  %1633 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1632
  %1634 = load i32, ptr %1633, align 4, !tbaa !17
  %1635 = add i32 %1634, -4
  %1636 = icmp ult i32 %1635, 7
  br i1 %1636, label %1637, label %1640

1637:                                             ; preds = %1630
  %1638 = getelementptr inbounds %struct.tree_exp, ptr %1621, i64 0, i32 1
  %1639 = load i32, ptr %1638, align 8, !tbaa !17
  br label %1640

1640:                                             ; preds = %1637, %1630
  %1641 = phi i32 [ %1639, %1637 ], [ 0, %1630 ]
  %1642 = getelementptr inbounds %struct.tree_common, ptr %1621, i64 0, i32 2
  %1643 = load ptr, ptr %1642, align 8, !tbaa !17
  %1644 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %1621) #24
  %1645 = tail call fastcc ptr @fold_negate_expr(i32 noundef %1641, ptr noundef %1644)
  %1646 = icmp eq ptr %1645, null
  br i1 %1646, label %1647, label %1652

1647:                                             ; preds = %1640
  %1648 = getelementptr inbounds %struct.tree_common, ptr %1644, i64 0, i32 2
  %1649 = load ptr, ptr %1648, align 8, !tbaa !17
  %1650 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %1649, ptr noundef %1644) #24
  %1651 = getelementptr inbounds %struct.tree_exp, ptr %1650, i64 0, i32 1
  store i32 %1641, ptr %1651, align 8, !tbaa !17
  br label %1652

1652:                                             ; preds = %1647, %1640
  %1653 = phi ptr [ %1645, %1640 ], [ %1650, %1647 ]
  %1654 = tail call ptr @fold_convert_loc(i32 noundef %1641, ptr noundef %1643, ptr noundef nonnull %1653)
  br label %1655

1655:                                             ; preds = %1624, %1652
  %1656 = phi ptr [ %1654, %1652 ], [ null, %1624 ]
  %1657 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1627, ptr noundef nonnull %4, ptr noundef %1628, ptr noundef %1656)
  %1658 = icmp eq ptr %1657, null
  br i1 %1658, label %1659, label %1898

1659:                                             ; preds = %1655
  %1660 = tail call ptr @build2_stat(i32 noundef %1627, ptr noundef nonnull %4, ptr noundef %1628, ptr noundef %1656) #24
  %1661 = getelementptr inbounds %struct.tree_exp, ptr %1660, i64 0, i32 1
  store i32 %0, ptr %1661, align 8, !tbaa !17
  br label %1898

1662:                                             ; preds = %1618
  %1663 = load ptr, ptr %1619, align 8, !tbaa !17
  %1664 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1663)
  %1665 = icmp eq i8 %1664, 0
  br i1 %1665, label %1897, label %1666

1666:                                             ; preds = %1662
  %1667 = load i64, ptr %1, align 8
  %1668 = trunc i64 %1667 to i32
  %1669 = and i32 %1668, 65535
  %1670 = tail call fastcc ptr @negate_expr(ptr noundef %1663)
  %1671 = load ptr, ptr %1620, align 8, !tbaa !17
  %1672 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1669, ptr noundef nonnull %4, ptr noundef %1670, ptr noundef %1671)
  br label %1898

1673:                                             ; preds = %2, %2, %2, %2, %2
  %1674 = load i64, ptr %4, align 8
  %1675 = trunc i64 %1674 to i32
  %1676 = and i32 %1675, 65535
  %1677 = add nsw i32 %1676, -6
  %1678 = icmp ult i32 %1677, 3
  br i1 %1678, label %1679, label %1691

1679:                                             ; preds = %1673
  %1680 = and i64 %1674, 2097152
  %1681 = icmp eq i64 %1680, 0
  %1682 = load i32, ptr @flag_wrapv, align 4
  %1683 = icmp eq i32 %1682, 0
  %1684 = select i1 %1681, i1 %1683, i1 false
  %1685 = load i32, ptr @flag_trapv, align 4
  %1686 = icmp eq i32 %1685, 0
  %1687 = select i1 %1684, i1 %1686, i1 false
  %1688 = load i32, ptr @flag_strict_overflow, align 4
  %1689 = icmp ne i32 %1688, 0
  %1690 = select i1 %1687, i1 %1689, i1 false
  br i1 %1690, label %1691, label %1897

1691:                                             ; preds = %1673, %1679
  %1692 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %1693 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %1694 = load ptr, ptr %1693, align 8, !tbaa !17
  %1695 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1694)
  %1696 = icmp eq i8 %1695, 0
  br i1 %1696, label %1772, label %1697

1697:                                             ; preds = %1691
  %1698 = load i64, ptr %4, align 8
  %1699 = trunc i64 %1698 to i32
  %1700 = and i32 %1699, 65535
  %1701 = add nsw i32 %1700, -6
  %1702 = icmp ult i32 %1701, 3
  br i1 %1702, label %1703, label %1730

1703:                                             ; preds = %1697
  %1704 = load i64, ptr %1694, align 8
  %1705 = and i64 %1704, 65535
  %1706 = icmp eq i64 %1705, 23
  br i1 %1706, label %1707, label %1710

1707:                                             ; preds = %1703
  %1708 = tail call i32 @integer_onep(ptr noundef nonnull %1694) #24
  %1709 = icmp eq i32 %1708, 0
  br i1 %1709, label %1725, label %1710

1710:                                             ; preds = %1707, %1703
  %1711 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %1712 = icmp sgt i32 %1711, 0
  br i1 %1712, label %1713, label %1720

1713:                                             ; preds = %1710
  %1714 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %1715 = icmp eq ptr %1714, null
  %1716 = load i32, ptr @fold_deferred_overflow_code, align 4
  %1717 = icmp ugt i32 %1716, 4
  %1718 = select i1 %1715, i1 true, i1 %1717
  br i1 %1718, label %1719, label %1725

1719:                                             ; preds = %1713
  store ptr @.str.3, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 4, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %1725

1720:                                             ; preds = %1710
  %1721 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %1722 = icmp slt i32 %1721, 4
  br i1 %1722, label %1725, label %1723

1723:                                             ; preds = %1720
  %1724 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef nonnull @.str.3) #24
  br label %1725

1725:                                             ; preds = %1723, %1720, %1719, %1713, %1707
  %1726 = load i64, ptr %1, align 8
  %1727 = trunc i64 %1726 to i32
  %1728 = and i32 %1727, 65535
  %1729 = load ptr, ptr %1692, align 8, !tbaa !17
  br label %1736

1730:                                             ; preds = %1697
  %1731 = load i64, ptr %1, align 8
  %1732 = trunc i64 %1731 to i32
  %1733 = and i32 %1732, 65535
  %1734 = load ptr, ptr %1692, align 8, !tbaa !17
  %1735 = icmp eq ptr %1694, null
  br i1 %1735, label %1763, label %1736

1736:                                             ; preds = %1725, %1730
  %1737 = phi ptr [ %1729, %1725 ], [ %1734, %1730 ]
  %1738 = phi i32 [ %1728, %1725 ], [ %1733, %1730 ]
  %1739 = load i64, ptr %1694, align 8
  %1740 = and i64 %1739, 65535
  %1741 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1740
  %1742 = load i32, ptr %1741, align 4, !tbaa !17
  %1743 = add i32 %1742, -4
  %1744 = icmp ult i32 %1743, 7
  br i1 %1744, label %1745, label %1748

1745:                                             ; preds = %1736
  %1746 = getelementptr inbounds %struct.tree_exp, ptr %1694, i64 0, i32 1
  %1747 = load i32, ptr %1746, align 8, !tbaa !17
  br label %1748

1748:                                             ; preds = %1745, %1736
  %1749 = phi i32 [ %1747, %1745 ], [ 0, %1736 ]
  %1750 = getelementptr inbounds %struct.tree_common, ptr %1694, i64 0, i32 2
  %1751 = load ptr, ptr %1750, align 8, !tbaa !17
  %1752 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %1694) #24
  %1753 = tail call fastcc ptr @fold_negate_expr(i32 noundef %1749, ptr noundef %1752)
  %1754 = icmp eq ptr %1753, null
  br i1 %1754, label %1755, label %1760

1755:                                             ; preds = %1748
  %1756 = getelementptr inbounds %struct.tree_common, ptr %1752, i64 0, i32 2
  %1757 = load ptr, ptr %1756, align 8, !tbaa !17
  %1758 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %1757, ptr noundef %1752) #24
  %1759 = getelementptr inbounds %struct.tree_exp, ptr %1758, i64 0, i32 1
  store i32 %1749, ptr %1759, align 8, !tbaa !17
  br label %1760

1760:                                             ; preds = %1755, %1748
  %1761 = phi ptr [ %1753, %1748 ], [ %1758, %1755 ]
  %1762 = tail call ptr @fold_convert_loc(i32 noundef %1749, ptr noundef %1751, ptr noundef nonnull %1761)
  br label %1763

1763:                                             ; preds = %1730, %1760
  %1764 = phi ptr [ %1737, %1760 ], [ %1734, %1730 ]
  %1765 = phi i32 [ %1738, %1760 ], [ %1733, %1730 ]
  %1766 = phi ptr [ %1762, %1760 ], [ null, %1730 ]
  %1767 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1765, ptr noundef nonnull %4, ptr noundef %1764, ptr noundef %1766)
  %1768 = icmp eq ptr %1767, null
  br i1 %1768, label %1769, label %1898

1769:                                             ; preds = %1763
  %1770 = tail call ptr @build2_stat(i32 noundef %1765, ptr noundef nonnull %4, ptr noundef %1764, ptr noundef %1766) #24
  %1771 = getelementptr inbounds %struct.tree_exp, ptr %1770, i64 0, i32 1
  store i32 %0, ptr %1771, align 8, !tbaa !17
  br label %1898

1772:                                             ; preds = %1691
  %1773 = load ptr, ptr %1692, align 8, !tbaa !17
  %1774 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1773)
  %1775 = icmp eq i8 %1774, 0
  br i1 %1775, label %1897, label %1776

1776:                                             ; preds = %1772
  %1777 = load i64, ptr %4, align 8
  %1778 = trunc i64 %1777 to i32
  %1779 = and i32 %1778, 65535
  %1780 = add nsw i32 %1779, -6
  %1781 = icmp ult i32 %1780, 3
  br i1 %1781, label %1782, label %1796

1782:                                             ; preds = %1776
  %1783 = load i64, ptr %1773, align 8
  %1784 = and i64 %1783, 65535
  %1785 = icmp eq i64 %1784, 23
  br i1 %1785, label %1786, label %1791

1786:                                             ; preds = %1782
  %1787 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 13
  %1788 = load ptr, ptr %1787, align 8, !tbaa !17
  %1789 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %1773, ptr noundef %1788) #24
  %1790 = icmp eq i32 %1789, 0
  br i1 %1790, label %1792, label %1791

1791:                                             ; preds = %1786, %1782
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.3, i32 noundef 4)
  br label %1792

1792:                                             ; preds = %1791, %1786
  %1793 = load i64, ptr %1, align 8
  %1794 = trunc i64 %1793 to i32
  %1795 = and i32 %1794, 65535
  br label %1801

1796:                                             ; preds = %1776
  %1797 = load i64, ptr %1, align 8
  %1798 = trunc i64 %1797 to i32
  %1799 = and i32 %1798, 65535
  %1800 = icmp eq ptr %1773, null
  br i1 %1800, label %1827, label %1801

1801:                                             ; preds = %1792, %1796
  %1802 = phi i32 [ %1795, %1792 ], [ %1799, %1796 ]
  %1803 = load i64, ptr %1773, align 8
  %1804 = and i64 %1803, 65535
  %1805 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1804
  %1806 = load i32, ptr %1805, align 4, !tbaa !17
  %1807 = add i32 %1806, -4
  %1808 = icmp ult i32 %1807, 7
  br i1 %1808, label %1809, label %1812

1809:                                             ; preds = %1801
  %1810 = getelementptr inbounds %struct.tree_exp, ptr %1773, i64 0, i32 1
  %1811 = load i32, ptr %1810, align 8, !tbaa !17
  br label %1812

1812:                                             ; preds = %1809, %1801
  %1813 = phi i32 [ %1811, %1809 ], [ 0, %1801 ]
  %1814 = getelementptr inbounds %struct.tree_common, ptr %1773, i64 0, i32 2
  %1815 = load ptr, ptr %1814, align 8, !tbaa !17
  %1816 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %1773) #24
  %1817 = tail call fastcc ptr @fold_negate_expr(i32 noundef %1813, ptr noundef %1816)
  %1818 = icmp eq ptr %1817, null
  br i1 %1818, label %1819, label %1824

1819:                                             ; preds = %1812
  %1820 = getelementptr inbounds %struct.tree_common, ptr %1816, i64 0, i32 2
  %1821 = load ptr, ptr %1820, align 8, !tbaa !17
  %1822 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %1821, ptr noundef %1816) #24
  %1823 = getelementptr inbounds %struct.tree_exp, ptr %1822, i64 0, i32 1
  store i32 %1813, ptr %1823, align 8, !tbaa !17
  br label %1824

1824:                                             ; preds = %1819, %1812
  %1825 = phi ptr [ %1817, %1812 ], [ %1822, %1819 ]
  %1826 = tail call ptr @fold_convert_loc(i32 noundef %1813, ptr noundef %1815, ptr noundef nonnull %1825)
  br label %1827

1827:                                             ; preds = %1796, %1824
  %1828 = phi i32 [ %1802, %1824 ], [ %1799, %1796 ]
  %1829 = phi ptr [ %1826, %1824 ], [ null, %1796 ]
  %1830 = load ptr, ptr %1693, align 8, !tbaa !17
  %1831 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1828, ptr noundef nonnull %4, ptr noundef %1829, ptr noundef %1830)
  %1832 = icmp eq ptr %1831, null
  br i1 %1832, label %1833, label %1898

1833:                                             ; preds = %1827
  %1834 = tail call ptr @build2_stat(i32 noundef %1828, ptr noundef nonnull %4, ptr noundef %1829, ptr noundef %1830) #24
  %1835 = getelementptr inbounds %struct.tree_exp, ptr %1834, i64 0, i32 1
  store i32 %0, ptr %1835, align 8, !tbaa !17
  br label %1898

1836:                                             ; preds = %2
  %1837 = load i64, ptr %4, align 8
  %1838 = and i64 %1837, 65535
  %1839 = icmp eq i64 %1838, 9
  br i1 %1839, label %1840, label %1897

1840:                                             ; preds = %1836
  %1841 = tail call ptr @strip_float_extensions(ptr noundef nonnull %1) #24
  %1842 = icmp eq ptr %1841, %1
  br i1 %1842, label %1897, label %1843

1843:                                             ; preds = %1840
  %1844 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1841)
  %1845 = icmp eq i8 %1844, 0
  br i1 %1845, label %1897, label %1846

1846:                                             ; preds = %1843
  %1847 = tail call fastcc ptr @negate_expr(ptr noundef %1841)
  %1848 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %4, ptr noundef %1847)
  br label %1898

1849:                                             ; preds = %2
  %1850 = tail call i32 @builtin_mathfn_code(ptr noundef nonnull %1) #24
  %1851 = tail call fastcc zeroext i8 @negate_mathfn_p(i32 noundef %1850), !range !40
  %1852 = icmp eq i8 %1851, 0
  br i1 %1852, label %1897, label %1853

1853:                                             ; preds = %1849
  %1854 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1, i32 0, i32 2
  %1855 = load ptr, ptr %1854, align 8, !tbaa !17
  %1856 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1855)
  %1857 = icmp eq i8 %1856, 0
  br i1 %1857, label %1897, label %1858

1858:                                             ; preds = %1853
  %1859 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %1) #24
  %1860 = load ptr, ptr %1854, align 8, !tbaa !17
  %1861 = tail call fastcc ptr @negate_expr(ptr noundef %1860)
  %1862 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %1859, i32 noundef 1, ptr noundef %1861) #24
  br label %1898

1863:                                             ; preds = %2
  %1864 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %1865 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  %1866 = load ptr, ptr %1865, align 8, !tbaa !17
  %1867 = load i64, ptr %1866, align 8
  %1868 = and i64 %1867, 65535
  %1869 = icmp eq i64 %1868, 23
  br i1 %1869, label %1870, label %1897

1870:                                             ; preds = %1863
  %1871 = getelementptr inbounds %struct.tree_int_cst, ptr %1866, i64 0, i32 1, i32 1
  %1872 = load i64, ptr %1871, align 8, !tbaa !17
  %1873 = icmp eq i64 %1872, 0
  br i1 %1873, label %1874, label %1897

1874:                                             ; preds = %1870
  %1875 = getelementptr inbounds %struct.tree_int_cst, ptr %1866, i64 0, i32 1
  %1876 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %1877 = load i32, ptr %1876, align 4
  %1878 = and i32 %1877, 1023
  %1879 = add nsw i32 %1878, -1
  %1880 = sext i32 %1879 to i64
  %1881 = load i64, ptr %1875, align 8, !tbaa !17
  %1882 = icmp eq i64 %1881, %1880
  br i1 %1882, label %1883, label %1897

1883:                                             ; preds = %1874
  %1884 = load i64, ptr %4, align 8
  %1885 = and i64 %1884, 2097152
  %1886 = icmp eq i64 %1885, 0
  br i1 %1886, label %1889, label %1887

1887:                                             ; preds = %1883
  %1888 = tail call ptr @signed_type_for(ptr noundef nonnull %4) #24
  br label %1891

1889:                                             ; preds = %1883
  %1890 = tail call ptr @unsigned_type_for(ptr noundef nonnull %4) #24
  br label %1891

1891:                                             ; preds = %1887, %1889
  %1892 = phi ptr [ %1888, %1887 ], [ %1890, %1889 ]
  %1893 = load ptr, ptr %1864, align 8, !tbaa !17
  %1894 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1892, ptr noundef %1893)
  %1895 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 84, ptr noundef %1892, ptr noundef %1894, ptr noundef nonnull %1866)
  %1896 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %4, ptr noundef %1895)
  br label %1898

1897:                                             ; preds = %107, %1870, %1874, %111, %115, %1772, %9, %2, %1863, %1849, %1853, %1836, %1843, %1840, %1679, %1606, %1662, %1334, %1328, %1019, %1301, %419, %701, %742, %136, %121, %38, %31
  br label %1898

1898:                                             ; preds = %1833, %1827, %1769, %1763, %1891, %1659, %1655, %145, %139, %133, %124, %119, %21, %15, %38, %24, %31, %1897, %1858, %1846, %1666, %1332, %746, %738, %148, %46
  %1899 = phi ptr [ null, %1897 ], [ %1896, %1891 ], [ %1862, %1858 ], [ %1848, %1846 ], [ %1672, %1666 ], [ %1333, %1332 ], [ %741, %738 ], [ %750, %746 ], [ %150, %148 ], [ %120, %119 ], [ %47, %46 ], [ %25, %31 ], [ %25, %24 ], [ %39, %38 ], [ %19, %15 ], [ %22, %21 ], [ %131, %124 ], [ %134, %133 ], [ %143, %139 ], [ %146, %145 ], [ %1657, %1655 ], [ %1660, %1659 ], [ %1834, %1833 ], [ %1831, %1827 ], [ %1770, %1769 ], [ %1767, %1763 ]
  ret ptr %1899
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_negate_const(ptr nocapture noundef readonly %0, ptr noundef %1) unnamed_addr #10 {
  %3 = alloca %struct.real_value, align 8
  %4 = alloca %struct.fixed_value, align 8
  %5 = load i64, ptr %0, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %61 [
    i16 23, label %7
    i16 24, label %37
    i16 25, label %41
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  %9 = load i64, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !17
  %12 = icmp eq i64 %9, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %7
  %14 = sub nsw i64 0, %11
  %15 = icmp eq i64 %11, -9223372036854775808
  %16 = zext i1 %15 to i32
  br label %20

17:                                               ; preds = %7
  %18 = sub i64 0, %9
  %19 = xor i64 %11, -1
  br label %20

20:                                               ; preds = %13, %17
  %21 = phi i64 [ 0, %13 ], [ %18, %17 ]
  %22 = phi i64 [ %14, %13 ], [ %19, %17 ]
  %23 = phi i32 [ %16, %13 ], [ 0, %17 ]
  %24 = trunc i64 %5 to i32
  %25 = lshr i32 %24, 27
  %26 = and i32 %25, 1
  %27 = or i32 %23, %26
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %20
  %30 = load i64, ptr %1, align 8
  %31 = and i64 %30, 2097152
  %32 = icmp eq i64 %31, 0
  %33 = zext i1 %32 to i8
  br label %34

34:                                               ; preds = %29, %20
  %35 = phi i8 [ 0, %20 ], [ %33, %29 ]
  %36 = tail call ptr @force_fit_type_double(ptr noundef %1, i64 noundef %21, i64 noundef %22, i32 noundef 1, i8 noundef zeroext %35)
  br label %62

37:                                               ; preds = %2
  %38 = getelementptr inbounds %struct.tree_real_cst, ptr %0, i64 0, i32 1
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  call void @real_arithmetic2(ptr nonnull sret(%struct.real_value) align 8 %3, i32 noundef 79, ptr noundef %39, ptr noundef null) #24
  %40 = call ptr @build_real(ptr noundef %1, ptr noundef nonnull byval(%struct.real_value) align 8 %3) #24
  br label %62

41:                                               ; preds = %2
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %4) #24
  %42 = getelementptr inbounds %struct.tree_fixed_cst, ptr %0, i64 0, i32 1
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = load i64, ptr %1, align 8
  %45 = trunc i64 %44 to i32
  %46 = lshr i32 %45, 31
  %47 = trunc i32 %46 to i8
  %48 = call zeroext i8 @fixed_arithmetic(ptr noundef nonnull %4, i32 noundef 79, ptr noundef %43, ptr noundef null, i8 noundef zeroext %47) #24
  %49 = call ptr @build_fixed(ptr noundef nonnull %1, ptr noundef nonnull byval(%struct.fixed_value) align 8 %4) #24
  %50 = zext i8 %48 to i32
  %51 = load i64, ptr %0, align 8
  %52 = trunc i64 %51 to i32
  %53 = lshr i32 %52, 27
  %54 = and i32 %53, 1
  %55 = or i32 %54, %50
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %41
  %58 = load i64, ptr %49, align 8
  %59 = or i64 %58, 134217728
  store i64 %59, ptr %49, align 8
  br label %60

60:                                               ; preds = %57, %41
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %4) #24
  br label %62

61:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 15819, ptr noundef nonnull @.str.1) #24
  br label %62

62:                                               ; preds = %61, %60, %37, %34
  %63 = phi ptr [ null, %61 ], [ %49, %60 ], [ %40, %37 ], [ %36, %34 ]
  ret ptr %63
}

declare ptr @build_complex(ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @negate_expr_p(ptr noundef %0) unnamed_addr #10 {
  %2 = icmp eq ptr %0, null
  br i1 %2, label %41, label %3

3:                                                ; preds = %1, %65
  %4 = phi ptr [ %66, %65 ], [ %0, %1 ]
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %4) #24
  %8 = load i64, ptr %7, align 8
  %9 = trunc i64 %8 to i16
  switch i16 %9, label %1615 [
    i16 23, label %10
    i16 90, label %19
    i16 25, label %41
    i16 79, label %41
    i16 24, label %32
    i16 26, label %36
    i16 123, label %49
    i16 124, label %60
    i16 63, label %68
    i16 64, label %653
    i16 65, label %1235
    i16 75, label %1241
    i16 67, label %1552
    i16 70, label %1552
    i16 69, label %1552
    i16 68, label %1552
    i16 76, label %1552
    i16 116, label %1583
    i16 59, label %1590
    i16 84, label %1596
  ]

10:                                               ; preds = %3
  %11 = load i64, ptr %6, align 8
  %12 = and i64 %11, 2097152
  %13 = icmp ne i64 %12, 0
  %14 = load i32, ptr @flag_wrapv, align 4
  %15 = icmp ne i32 %14, 0
  %16 = select i1 %13, i1 true, i1 %15
  br i1 %16, label %41, label %17

17:                                               ; preds = %10
  %18 = tail call zeroext i8 @may_negate_without_overflow_p(ptr noundef nonnull %7), !range !40
  br label %41

19:                                               ; preds = %3
  %20 = load i64, ptr %6, align 8
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 65535
  %23 = add nsw i32 %22, -6
  %24 = icmp ult i32 %23, 3
  br i1 %24, label %25, label %41

25:                                               ; preds = %19
  %26 = and i64 %20, 2097152
  %27 = icmp ne i64 %26, 0
  %28 = load i32, ptr @flag_wrapv, align 4
  %29 = icmp ne i32 %28, 0
  %30 = select i1 %27, i1 true, i1 %29
  %31 = zext i1 %30 to i8
  br label %41

32:                                               ; preds = %3
  %33 = getelementptr inbounds %struct.tree_real_cst, ptr %7, i64 0, i32 1
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = tail call zeroext i8 @real_isneg(ptr noundef %34) #24
  br label %41

36:                                               ; preds = %3
  %37 = getelementptr inbounds %struct.tree_complex, ptr %7, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %38)
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %1230, %1226, %1220, %1215, %19, %1606, %1572, %1541, %921, %1203, %49, %36, %25, %10, %1615, %32, %17, %1, %65, %3, %3, %618, %336, %649, %636, %645, %640, %1577, %1546, %54, %43
  %42 = phi i8 [ %48, %43 ], [ %59, %54 ], [ %1551, %1546 ], [ %1582, %1577 ], [ 0, %1615 ], [ %35, %32 ], [ %18, %17 ], [ 1, %10 ], [ %31, %25 ], [ 0, %19 ], [ 0, %36 ], [ 0, %49 ], [ 0, %921 ], [ 0, %1203 ], [ 1, %1541 ], [ 1, %1572 ], [ 1, %1606 ], [ %1234, %1230 ], [ 1, %1215 ], [ 1, %1226 ], [ 1, %1220 ], [ 0, %1 ], [ 1, %640 ], [ 1, %645 ], [ 1, %636 ], [ 1, %649 ], [ 0, %336 ], [ 0, %618 ], [ 1, %3 ], [ 1, %3 ], [ 0, %65 ]
  ret i8 %42

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.tree_complex, ptr %7, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %45)
  %47 = icmp ne i8 %46, 0
  %48 = zext i1 %47 to i8
  br label %41

49:                                               ; preds = %3
  %50 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %51)
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %41, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %56)
  %58 = icmp ne i8 %57, 0
  %59 = zext i1 %58 to i8
  br label %41

60:                                               ; preds = %3
  %61 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  br label %62

62:                                               ; preds = %630, %1594, %60
  %63 = phi ptr [ %61, %60 ], [ %1595, %1594 ], [ %631, %630 ]
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  br label %65

65:                                               ; preds = %62, %649, %1587
  %66 = phi ptr [ %1588, %1587 ], [ %641, %649 ], [ %64, %62 ]
  %67 = icmp eq ptr %66, null
  br i1 %67, label %41, label %3

68:                                               ; preds = %3
  %69 = load i64, ptr %6, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 14
  br i1 %71, label %72, label %75

72:                                               ; preds = %68
  %73 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %74 = load i64, ptr %6, align 8
  br label %80

75:                                               ; preds = %68
  %76 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %77 = load i32, ptr %76, align 4
  %78 = lshr i32 %77, 16
  %79 = and i32 %78, 255
  br label %80

80:                                               ; preds = %75, %72
  %81 = phi i64 [ %74, %72 ], [ %69, %75 ]
  %82 = phi i32 [ %73, %72 ], [ %79, %75 ]
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %83
  %85 = load i8, ptr %84, align 1, !tbaa !17
  %86 = icmp eq i8 %85, 8
  br i1 %86, label %141, label %87

87:                                               ; preds = %80
  %88 = and i64 %81, 65535
  %89 = icmp eq i64 %88, 14
  br i1 %89, label %90, label %93

90:                                               ; preds = %87
  %91 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %92 = load i64, ptr %6, align 8
  br label %98

93:                                               ; preds = %87
  %94 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %95 = load i32, ptr %94, align 4
  %96 = lshr i32 %95, 16
  %97 = and i32 %96, 255
  br label %98

98:                                               ; preds = %93, %90
  %99 = phi i64 [ %92, %90 ], [ %81, %93 ]
  %100 = phi i32 [ %91, %90 ], [ %97, %93 ]
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %101
  %103 = load i8, ptr %102, align 1, !tbaa !17
  %104 = icmp eq i8 %103, 9
  br i1 %104, label %141, label %105

105:                                              ; preds = %98
  %106 = and i64 %99, 65535
  %107 = icmp eq i64 %106, 14
  br i1 %107, label %108, label %111

108:                                              ; preds = %105
  %109 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %110 = load i64, ptr %6, align 8
  br label %116

111:                                              ; preds = %105
  %112 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %113 = load i32, ptr %112, align 4
  %114 = lshr i32 %113, 16
  %115 = and i32 %114, 255
  br label %116

116:                                              ; preds = %111, %108
  %117 = phi i64 [ %110, %108 ], [ %99, %111 ]
  %118 = phi i32 [ %109, %108 ], [ %115, %111 ]
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %119
  %121 = load i8, ptr %120, align 1, !tbaa !17
  %122 = icmp eq i8 %121, 11
  br i1 %122, label %141, label %123

123:                                              ; preds = %116
  %124 = and i64 %117, 65535
  %125 = icmp eq i64 %124, 14
  br i1 %125, label %126, label %129

126:                                              ; preds = %123
  %127 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %128 = load i64, ptr %6, align 8
  br label %134

129:                                              ; preds = %123
  %130 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %131 = load i32, ptr %130, align 4
  %132 = lshr i32 %131, 16
  %133 = and i32 %132, 255
  br label %134

134:                                              ; preds = %129, %126
  %135 = phi i64 [ %128, %126 ], [ %117, %129 ]
  %136 = phi i32 [ %127, %126 ], [ %133, %129 ]
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %137
  %139 = load i8, ptr %138, align 1, !tbaa !17
  %140 = icmp eq i8 %139, 17
  br i1 %140, label %141, label %350

141:                                              ; preds = %134, %116, %98, %80
  %142 = phi i64 [ %117, %116 ], [ %99, %98 ], [ %81, %80 ], [ %135, %134 ]
  %143 = and i64 %142, 65535
  %144 = icmp eq i64 %143, 14
  br i1 %144, label %145, label %148

145:                                              ; preds = %141
  %146 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %147 = load i64, ptr %6, align 8
  br label %153

148:                                              ; preds = %141
  %149 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %150 = load i32, ptr %149, align 4
  %151 = lshr i32 %150, 16
  %152 = and i32 %151, 255
  br label %153

153:                                              ; preds = %148, %145
  %154 = phi i64 [ %147, %145 ], [ %142, %148 ]
  %155 = phi i32 [ %146, %145 ], [ %152, %148 ]
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %156
  %158 = load i8, ptr %157, align 1, !tbaa !17
  %159 = icmp eq i8 %158, 8
  br i1 %159, label %178, label %160

160:                                              ; preds = %153
  %161 = and i64 %154, 65535
  %162 = icmp eq i64 %161, 14
  br i1 %162, label %163, label %166

163:                                              ; preds = %160
  %164 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %165 = load i64, ptr %6, align 8
  br label %171

166:                                              ; preds = %160
  %167 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %168 = load i32, ptr %167, align 4
  %169 = lshr i32 %168, 16
  %170 = and i32 %169, 255
  br label %171

171:                                              ; preds = %166, %163
  %172 = phi i64 [ %165, %163 ], [ %154, %166 ]
  %173 = phi i32 [ %164, %163 ], [ %170, %166 ]
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %174
  %176 = load i8, ptr %175, align 1, !tbaa !17
  %177 = icmp eq i8 %176, 9
  br i1 %177, label %178, label %189

178:                                              ; preds = %171, %153
  %179 = phi i64 [ %172, %171 ], [ %154, %153 ]
  %180 = and i64 %179, 65535
  %181 = icmp eq i64 %180, 14
  br i1 %181, label %182, label %184

182:                                              ; preds = %178
  %183 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %205

184:                                              ; preds = %178
  %185 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %186 = load i32, ptr %185, align 4
  %187 = lshr i32 %186, 16
  %188 = and i32 %187, 255
  br label %205

189:                                              ; preds = %171
  %190 = and i64 %172, 65535
  %191 = icmp eq i64 %190, 14
  br i1 %191, label %192, label %194

192:                                              ; preds = %189
  %193 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %199

194:                                              ; preds = %189
  %195 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %196 = load i32, ptr %195, align 4
  %197 = lshr i32 %196, 16
  %198 = and i32 %197, 255
  br label %199

199:                                              ; preds = %194, %192
  %200 = phi i32 [ %193, %192 ], [ %198, %194 ]
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %201
  %203 = load i8, ptr %202, align 1, !tbaa !17
  %204 = zext i8 %203 to i32
  br label %205

205:                                              ; preds = %182, %184, %199
  %206 = phi i32 [ %204, %199 ], [ %183, %182 ], [ %188, %184 ]
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %207
  %209 = load i8, ptr %208, align 1, !tbaa !17
  %210 = icmp eq i8 %209, 9
  %211 = load i64, ptr %6, align 8
  %212 = and i64 %211, 65535
  %213 = icmp eq i64 %212, 14
  br i1 %210, label %214, label %275

214:                                              ; preds = %205
  br i1 %213, label %215, label %218

215:                                              ; preds = %214
  %216 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %217 = load i64, ptr %6, align 8
  br label %223

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %220 = load i32, ptr %219, align 4
  %221 = lshr i32 %220, 16
  %222 = and i32 %221, 255
  br label %223

223:                                              ; preds = %218, %215
  %224 = phi i64 [ %217, %215 ], [ %211, %218 ]
  %225 = phi i32 [ %216, %215 ], [ %222, %218 ]
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %226
  %228 = load i8, ptr %227, align 1, !tbaa !17
  %229 = icmp eq i8 %228, 8
  br i1 %229, label %248, label %230

230:                                              ; preds = %223
  %231 = and i64 %224, 65535
  %232 = icmp eq i64 %231, 14
  br i1 %232, label %233, label %236

233:                                              ; preds = %230
  %234 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %235 = load i64, ptr %6, align 8
  br label %241

236:                                              ; preds = %230
  %237 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %238 = load i32, ptr %237, align 4
  %239 = lshr i32 %238, 16
  %240 = and i32 %239, 255
  br label %241

241:                                              ; preds = %236, %233
  %242 = phi i64 [ %235, %233 ], [ %224, %236 ]
  %243 = phi i32 [ %234, %233 ], [ %240, %236 ]
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %244
  %246 = load i8, ptr %245, align 1, !tbaa !17
  %247 = icmp eq i8 %246, 9
  br i1 %247, label %248, label %259

248:                                              ; preds = %241, %223
  %249 = phi i64 [ %242, %241 ], [ %224, %223 ]
  %250 = and i64 %249, 65535
  %251 = icmp eq i64 %250, 14
  br i1 %251, label %252, label %254

252:                                              ; preds = %248
  %253 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %336

254:                                              ; preds = %248
  %255 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %256 = load i32, ptr %255, align 4
  %257 = lshr i32 %256, 16
  %258 = and i32 %257, 255
  br label %336

259:                                              ; preds = %241
  %260 = and i64 %242, 65535
  %261 = icmp eq i64 %260, 14
  br i1 %261, label %262, label %264

262:                                              ; preds = %259
  %263 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %269

264:                                              ; preds = %259
  %265 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %266 = load i32, ptr %265, align 4
  %267 = lshr i32 %266, 16
  %268 = and i32 %267, 255
  br label %269

269:                                              ; preds = %264, %262
  %270 = phi i32 [ %263, %262 ], [ %268, %264 ]
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %271
  %273 = load i8, ptr %272, align 1, !tbaa !17
  %274 = zext i8 %273 to i32
  br label %336

275:                                              ; preds = %205
  br i1 %213, label %276, label %279

276:                                              ; preds = %275
  %277 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %278 = load i64, ptr %6, align 8
  br label %284

279:                                              ; preds = %275
  %280 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %281 = load i32, ptr %280, align 4
  %282 = lshr i32 %281, 16
  %283 = and i32 %282, 255
  br label %284

284:                                              ; preds = %279, %276
  %285 = phi i64 [ %278, %276 ], [ %211, %279 ]
  %286 = phi i32 [ %277, %276 ], [ %283, %279 ]
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %287
  %289 = load i8, ptr %288, align 1, !tbaa !17
  %290 = icmp eq i8 %289, 8
  br i1 %290, label %309, label %291

291:                                              ; preds = %284
  %292 = and i64 %285, 65535
  %293 = icmp eq i64 %292, 14
  br i1 %293, label %294, label %297

294:                                              ; preds = %291
  %295 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %296 = load i64, ptr %6, align 8
  br label %302

297:                                              ; preds = %291
  %298 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %299 = load i32, ptr %298, align 4
  %300 = lshr i32 %299, 16
  %301 = and i32 %300, 255
  br label %302

302:                                              ; preds = %297, %294
  %303 = phi i64 [ %296, %294 ], [ %285, %297 ]
  %304 = phi i32 [ %295, %294 ], [ %301, %297 ]
  %305 = zext i32 %304 to i64
  %306 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %305
  %307 = load i8, ptr %306, align 1, !tbaa !17
  %308 = icmp eq i8 %307, 9
  br i1 %308, label %309, label %320

309:                                              ; preds = %302, %284
  %310 = phi i64 [ %303, %302 ], [ %285, %284 ]
  %311 = and i64 %310, 65535
  %312 = icmp eq i64 %311, 14
  br i1 %312, label %313, label %315

313:                                              ; preds = %309
  %314 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %336

315:                                              ; preds = %309
  %316 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %317 = load i32, ptr %316, align 4
  %318 = lshr i32 %317, 16
  %319 = and i32 %318, 255
  br label %336

320:                                              ; preds = %302
  %321 = and i64 %303, 65535
  %322 = icmp eq i64 %321, 14
  br i1 %322, label %323, label %325

323:                                              ; preds = %320
  %324 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %330

325:                                              ; preds = %320
  %326 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %327 = load i32, ptr %326, align 4
  %328 = lshr i32 %327, 16
  %329 = and i32 %328, 255
  br label %330

330:                                              ; preds = %325, %323
  %331 = phi i32 [ %324, %323 ], [ %329, %325 ]
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %332
  %334 = load i8, ptr %333, align 1, !tbaa !17
  %335 = zext i8 %334 to i32
  br label %336

336:                                              ; preds = %330, %315, %313, %269, %254, %252
  %337 = phi i32 [ %274, %269 ], [ %253, %252 ], [ %258, %254 ], [ %335, %330 ], [ %314, %313 ], [ %319, %315 ]
  %338 = add i32 %337, -38
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %339
  %341 = load ptr, ptr %340, align 8, !tbaa !6
  %342 = getelementptr inbounds %struct.real_format, ptr %341, i64 0, i32 10
  %343 = load i8, ptr %342, align 1, !tbaa !49
  %344 = icmp ne i8 %343, 0
  %345 = load i32, ptr @flag_rounding_math, align 4
  %346 = icmp ne i32 %345, 0
  %347 = select i1 %344, i1 %346, i1 false
  br i1 %347, label %41, label %348

348:                                              ; preds = %336
  %349 = load i64, ptr %6, align 8
  br label %350

350:                                              ; preds = %348, %134
  %351 = phi i64 [ %349, %348 ], [ %135, %134 ]
  %352 = and i64 %351, 65535
  %353 = icmp eq i64 %352, 14
  br i1 %353, label %354, label %357

354:                                              ; preds = %350
  %355 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %356 = load i64, ptr %6, align 8
  br label %362

357:                                              ; preds = %350
  %358 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %359 = load i32, ptr %358, align 4
  %360 = lshr i32 %359, 16
  %361 = and i32 %360, 255
  br label %362

362:                                              ; preds = %357, %354
  %363 = phi i64 [ %356, %354 ], [ %351, %357 ]
  %364 = phi i32 [ %355, %354 ], [ %361, %357 ]
  %365 = zext i32 %364 to i64
  %366 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %365
  %367 = load i8, ptr %366, align 1, !tbaa !17
  %368 = icmp eq i8 %367, 8
  br i1 %368, label %423, label %369

369:                                              ; preds = %362
  %370 = and i64 %363, 65535
  %371 = icmp eq i64 %370, 14
  br i1 %371, label %372, label %375

372:                                              ; preds = %369
  %373 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %374 = load i64, ptr %6, align 8
  br label %380

375:                                              ; preds = %369
  %376 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %377 = load i32, ptr %376, align 4
  %378 = lshr i32 %377, 16
  %379 = and i32 %378, 255
  br label %380

380:                                              ; preds = %375, %372
  %381 = phi i64 [ %374, %372 ], [ %363, %375 ]
  %382 = phi i32 [ %373, %372 ], [ %379, %375 ]
  %383 = zext i32 %382 to i64
  %384 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %383
  %385 = load i8, ptr %384, align 1, !tbaa !17
  %386 = icmp eq i8 %385, 9
  br i1 %386, label %423, label %387

387:                                              ; preds = %380
  %388 = and i64 %381, 65535
  %389 = icmp eq i64 %388, 14
  br i1 %389, label %390, label %393

390:                                              ; preds = %387
  %391 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %392 = load i64, ptr %6, align 8
  br label %398

393:                                              ; preds = %387
  %394 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %395 = load i32, ptr %394, align 4
  %396 = lshr i32 %395, 16
  %397 = and i32 %396, 255
  br label %398

398:                                              ; preds = %393, %390
  %399 = phi i64 [ %392, %390 ], [ %381, %393 ]
  %400 = phi i32 [ %391, %390 ], [ %397, %393 ]
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %401
  %403 = load i8, ptr %402, align 1, !tbaa !17
  %404 = icmp eq i8 %403, 11
  br i1 %404, label %423, label %405

405:                                              ; preds = %398
  %406 = and i64 %399, 65535
  %407 = icmp eq i64 %406, 14
  br i1 %407, label %408, label %410

408:                                              ; preds = %405
  %409 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %415

410:                                              ; preds = %405
  %411 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %412 = load i32, ptr %411, align 4
  %413 = lshr i32 %412, 16
  %414 = and i32 %413, 255
  br label %415

415:                                              ; preds = %410, %408
  %416 = phi i32 [ %409, %408 ], [ %414, %410 ]
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %417
  %419 = load i8, ptr %418, align 1, !tbaa !17
  %420 = icmp eq i8 %419, 17
  br i1 %420, label %421, label %630

421:                                              ; preds = %415
  %422 = load i64, ptr %6, align 8
  br label %423

423:                                              ; preds = %421, %398, %380, %362
  %424 = phi i64 [ %422, %421 ], [ %399, %398 ], [ %381, %380 ], [ %363, %362 ]
  %425 = and i64 %424, 65535
  %426 = icmp eq i64 %425, 14
  br i1 %426, label %427, label %430

427:                                              ; preds = %423
  %428 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %429 = load i64, ptr %6, align 8
  br label %435

430:                                              ; preds = %423
  %431 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %432 = load i32, ptr %431, align 4
  %433 = lshr i32 %432, 16
  %434 = and i32 %433, 255
  br label %435

435:                                              ; preds = %430, %427
  %436 = phi i64 [ %429, %427 ], [ %424, %430 ]
  %437 = phi i32 [ %428, %427 ], [ %434, %430 ]
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %438
  %440 = load i8, ptr %439, align 1, !tbaa !17
  %441 = icmp eq i8 %440, 8
  br i1 %441, label %460, label %442

442:                                              ; preds = %435
  %443 = and i64 %436, 65535
  %444 = icmp eq i64 %443, 14
  br i1 %444, label %445, label %448

445:                                              ; preds = %442
  %446 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %447 = load i64, ptr %6, align 8
  br label %453

448:                                              ; preds = %442
  %449 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %450 = load i32, ptr %449, align 4
  %451 = lshr i32 %450, 16
  %452 = and i32 %451, 255
  br label %453

453:                                              ; preds = %448, %445
  %454 = phi i64 [ %447, %445 ], [ %436, %448 ]
  %455 = phi i32 [ %446, %445 ], [ %452, %448 ]
  %456 = zext i32 %455 to i64
  %457 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %456
  %458 = load i8, ptr %457, align 1, !tbaa !17
  %459 = icmp eq i8 %458, 9
  br i1 %459, label %460, label %471

460:                                              ; preds = %453, %435
  %461 = phi i64 [ %454, %453 ], [ %436, %435 ]
  %462 = and i64 %461, 65535
  %463 = icmp eq i64 %462, 14
  br i1 %463, label %464, label %466

464:                                              ; preds = %460
  %465 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %487

466:                                              ; preds = %460
  %467 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %468 = load i32, ptr %467, align 4
  %469 = lshr i32 %468, 16
  %470 = and i32 %469, 255
  br label %487

471:                                              ; preds = %453
  %472 = and i64 %454, 65535
  %473 = icmp eq i64 %472, 14
  br i1 %473, label %474, label %476

474:                                              ; preds = %471
  %475 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %481

476:                                              ; preds = %471
  %477 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %478 = load i32, ptr %477, align 4
  %479 = lshr i32 %478, 16
  %480 = and i32 %479, 255
  br label %481

481:                                              ; preds = %476, %474
  %482 = phi i32 [ %475, %474 ], [ %480, %476 ]
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %483
  %485 = load i8, ptr %484, align 1, !tbaa !17
  %486 = zext i8 %485 to i32
  br label %487

487:                                              ; preds = %464, %466, %481
  %488 = phi i32 [ %486, %481 ], [ %465, %464 ], [ %470, %466 ]
  %489 = zext i32 %488 to i64
  %490 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %489
  %491 = load i8, ptr %490, align 1, !tbaa !17
  %492 = icmp eq i8 %491, 9
  %493 = load i64, ptr %6, align 8
  %494 = and i64 %493, 65535
  %495 = icmp eq i64 %494, 14
  br i1 %492, label %496, label %557

496:                                              ; preds = %487
  br i1 %495, label %497, label %500

497:                                              ; preds = %496
  %498 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %499 = load i64, ptr %6, align 8
  br label %505

500:                                              ; preds = %496
  %501 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %502 = load i32, ptr %501, align 4
  %503 = lshr i32 %502, 16
  %504 = and i32 %503, 255
  br label %505

505:                                              ; preds = %500, %497
  %506 = phi i64 [ %499, %497 ], [ %493, %500 ]
  %507 = phi i32 [ %498, %497 ], [ %504, %500 ]
  %508 = zext i32 %507 to i64
  %509 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %508
  %510 = load i8, ptr %509, align 1, !tbaa !17
  %511 = icmp eq i8 %510, 8
  br i1 %511, label %530, label %512

512:                                              ; preds = %505
  %513 = and i64 %506, 65535
  %514 = icmp eq i64 %513, 14
  br i1 %514, label %515, label %518

515:                                              ; preds = %512
  %516 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %517 = load i64, ptr %6, align 8
  br label %523

518:                                              ; preds = %512
  %519 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %520 = load i32, ptr %519, align 4
  %521 = lshr i32 %520, 16
  %522 = and i32 %521, 255
  br label %523

523:                                              ; preds = %518, %515
  %524 = phi i64 [ %517, %515 ], [ %506, %518 ]
  %525 = phi i32 [ %516, %515 ], [ %522, %518 ]
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %526
  %528 = load i8, ptr %527, align 1, !tbaa !17
  %529 = icmp eq i8 %528, 9
  br i1 %529, label %530, label %541

530:                                              ; preds = %523, %505
  %531 = phi i64 [ %524, %523 ], [ %506, %505 ]
  %532 = and i64 %531, 65535
  %533 = icmp eq i64 %532, 14
  br i1 %533, label %534, label %536

534:                                              ; preds = %530
  %535 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %618

536:                                              ; preds = %530
  %537 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %538 = load i32, ptr %537, align 4
  %539 = lshr i32 %538, 16
  %540 = and i32 %539, 255
  br label %618

541:                                              ; preds = %523
  %542 = and i64 %524, 65535
  %543 = icmp eq i64 %542, 14
  br i1 %543, label %544, label %546

544:                                              ; preds = %541
  %545 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %551

546:                                              ; preds = %541
  %547 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %548 = load i32, ptr %547, align 4
  %549 = lshr i32 %548, 16
  %550 = and i32 %549, 255
  br label %551

551:                                              ; preds = %546, %544
  %552 = phi i32 [ %545, %544 ], [ %550, %546 ]
  %553 = zext i32 %552 to i64
  %554 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %553
  %555 = load i8, ptr %554, align 1, !tbaa !17
  %556 = zext i8 %555 to i32
  br label %618

557:                                              ; preds = %487
  br i1 %495, label %558, label %561

558:                                              ; preds = %557
  %559 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %560 = load i64, ptr %6, align 8
  br label %566

561:                                              ; preds = %557
  %562 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %563 = load i32, ptr %562, align 4
  %564 = lshr i32 %563, 16
  %565 = and i32 %564, 255
  br label %566

566:                                              ; preds = %561, %558
  %567 = phi i64 [ %560, %558 ], [ %493, %561 ]
  %568 = phi i32 [ %559, %558 ], [ %565, %561 ]
  %569 = zext i32 %568 to i64
  %570 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %569
  %571 = load i8, ptr %570, align 1, !tbaa !17
  %572 = icmp eq i8 %571, 8
  br i1 %572, label %591, label %573

573:                                              ; preds = %566
  %574 = and i64 %567, 65535
  %575 = icmp eq i64 %574, 14
  br i1 %575, label %576, label %579

576:                                              ; preds = %573
  %577 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %578 = load i64, ptr %6, align 8
  br label %584

579:                                              ; preds = %573
  %580 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %581 = load i32, ptr %580, align 4
  %582 = lshr i32 %581, 16
  %583 = and i32 %582, 255
  br label %584

584:                                              ; preds = %579, %576
  %585 = phi i64 [ %578, %576 ], [ %567, %579 ]
  %586 = phi i32 [ %577, %576 ], [ %583, %579 ]
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %587
  %589 = load i8, ptr %588, align 1, !tbaa !17
  %590 = icmp eq i8 %589, 9
  br i1 %590, label %591, label %602

591:                                              ; preds = %584, %566
  %592 = phi i64 [ %585, %584 ], [ %567, %566 ]
  %593 = and i64 %592, 65535
  %594 = icmp eq i64 %593, 14
  br i1 %594, label %595, label %597

595:                                              ; preds = %591
  %596 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %618

597:                                              ; preds = %591
  %598 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %599 = load i32, ptr %598, align 4
  %600 = lshr i32 %599, 16
  %601 = and i32 %600, 255
  br label %618

602:                                              ; preds = %584
  %603 = and i64 %585, 65535
  %604 = icmp eq i64 %603, 14
  br i1 %604, label %605, label %607

605:                                              ; preds = %602
  %606 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %612

607:                                              ; preds = %602
  %608 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %609 = load i32, ptr %608, align 4
  %610 = lshr i32 %609, 16
  %611 = and i32 %610, 255
  br label %612

612:                                              ; preds = %607, %605
  %613 = phi i32 [ %606, %605 ], [ %611, %607 ]
  %614 = zext i32 %613 to i64
  %615 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %614
  %616 = load i8, ptr %615, align 1, !tbaa !17
  %617 = zext i8 %616 to i32
  br label %618

618:                                              ; preds = %612, %597, %595, %551, %536, %534
  %619 = phi i32 [ %556, %551 ], [ %535, %534 ], [ %540, %536 ], [ %617, %612 ], [ %596, %595 ], [ %601, %597 ]
  %620 = add i32 %619, -38
  %621 = zext i32 %620 to i64
  %622 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %621
  %623 = load ptr, ptr %622, align 8, !tbaa !6
  %624 = getelementptr inbounds %struct.real_format, ptr %623, i64 0, i32 14
  %625 = load i8, ptr %624, align 1, !tbaa !37
  %626 = icmp ne i8 %625, 0
  %627 = load i32, ptr @flag_signed_zeros, align 4
  %628 = icmp ne i32 %627, 0
  %629 = select i1 %626, i1 %628, i1 false
  br i1 %629, label %41, label %630

630:                                              ; preds = %618, %415
  %631 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %632 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %633 = load ptr, ptr %632, align 8, !tbaa !17
  %634 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %633)
  %635 = icmp eq i8 %634, 0
  br i1 %635, label %62, label %636

636:                                              ; preds = %630
  %637 = load ptr, ptr %632, align 8, !tbaa !17
  %638 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %639 = icmp eq i32 %638, 0
  br i1 %639, label %41, label %640

640:                                              ; preds = %636
  %641 = load ptr, ptr %631, align 8, !tbaa !17
  %642 = load i64, ptr %641, align 8
  %643 = and i64 %642, 131072
  %644 = icmp eq i64 %643, 0
  br i1 %644, label %645, label %41

645:                                              ; preds = %640
  %646 = load i64, ptr %637, align 8
  %647 = and i64 %646, 131072
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %649, label %41

649:                                              ; preds = %645
  %650 = or i64 %646, %642
  %651 = and i64 %650, 65536
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %41, label %65

653:                                              ; preds = %3
  %654 = load i64, ptr %6, align 8
  %655 = and i64 %654, 65535
  %656 = icmp eq i64 %655, 14
  br i1 %656, label %657, label %660

657:                                              ; preds = %653
  %658 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %659 = load i64, ptr %6, align 8
  br label %665

660:                                              ; preds = %653
  %661 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %662 = load i32, ptr %661, align 4
  %663 = lshr i32 %662, 16
  %664 = and i32 %663, 255
  br label %665

665:                                              ; preds = %660, %657
  %666 = phi i64 [ %659, %657 ], [ %654, %660 ]
  %667 = phi i32 [ %658, %657 ], [ %664, %660 ]
  %668 = zext i32 %667 to i64
  %669 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %668
  %670 = load i8, ptr %669, align 1, !tbaa !17
  %671 = icmp eq i8 %670, 8
  br i1 %671, label %726, label %672

672:                                              ; preds = %665
  %673 = and i64 %666, 65535
  %674 = icmp eq i64 %673, 14
  br i1 %674, label %675, label %678

675:                                              ; preds = %672
  %676 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %677 = load i64, ptr %6, align 8
  br label %683

678:                                              ; preds = %672
  %679 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %680 = load i32, ptr %679, align 4
  %681 = lshr i32 %680, 16
  %682 = and i32 %681, 255
  br label %683

683:                                              ; preds = %678, %675
  %684 = phi i64 [ %677, %675 ], [ %666, %678 ]
  %685 = phi i32 [ %676, %675 ], [ %682, %678 ]
  %686 = zext i32 %685 to i64
  %687 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %686
  %688 = load i8, ptr %687, align 1, !tbaa !17
  %689 = icmp eq i8 %688, 9
  br i1 %689, label %726, label %690

690:                                              ; preds = %683
  %691 = and i64 %684, 65535
  %692 = icmp eq i64 %691, 14
  br i1 %692, label %693, label %696

693:                                              ; preds = %690
  %694 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %695 = load i64, ptr %6, align 8
  br label %701

696:                                              ; preds = %690
  %697 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %698 = load i32, ptr %697, align 4
  %699 = lshr i32 %698, 16
  %700 = and i32 %699, 255
  br label %701

701:                                              ; preds = %696, %693
  %702 = phi i64 [ %695, %693 ], [ %684, %696 ]
  %703 = phi i32 [ %694, %693 ], [ %700, %696 ]
  %704 = zext i32 %703 to i64
  %705 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %704
  %706 = load i8, ptr %705, align 1, !tbaa !17
  %707 = icmp eq i8 %706, 11
  br i1 %707, label %726, label %708

708:                                              ; preds = %701
  %709 = and i64 %702, 65535
  %710 = icmp eq i64 %709, 14
  br i1 %710, label %711, label %714

711:                                              ; preds = %708
  %712 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %713 = load i64, ptr %6, align 8
  br label %719

714:                                              ; preds = %708
  %715 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %716 = load i32, ptr %715, align 4
  %717 = lshr i32 %716, 16
  %718 = and i32 %717, 255
  br label %719

719:                                              ; preds = %714, %711
  %720 = phi i64 [ %713, %711 ], [ %702, %714 ]
  %721 = phi i32 [ %712, %711 ], [ %718, %714 ]
  %722 = zext i32 %721 to i64
  %723 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %722
  %724 = load i8, ptr %723, align 1, !tbaa !17
  %725 = icmp eq i8 %724, 17
  br i1 %725, label %726, label %935

726:                                              ; preds = %719, %701, %683, %665
  %727 = phi i64 [ %702, %701 ], [ %684, %683 ], [ %666, %665 ], [ %720, %719 ]
  %728 = and i64 %727, 65535
  %729 = icmp eq i64 %728, 14
  br i1 %729, label %730, label %733

730:                                              ; preds = %726
  %731 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %732 = load i64, ptr %6, align 8
  br label %738

733:                                              ; preds = %726
  %734 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %735 = load i32, ptr %734, align 4
  %736 = lshr i32 %735, 16
  %737 = and i32 %736, 255
  br label %738

738:                                              ; preds = %733, %730
  %739 = phi i64 [ %732, %730 ], [ %727, %733 ]
  %740 = phi i32 [ %731, %730 ], [ %737, %733 ]
  %741 = zext i32 %740 to i64
  %742 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %741
  %743 = load i8, ptr %742, align 1, !tbaa !17
  %744 = icmp eq i8 %743, 8
  br i1 %744, label %763, label %745

745:                                              ; preds = %738
  %746 = and i64 %739, 65535
  %747 = icmp eq i64 %746, 14
  br i1 %747, label %748, label %751

748:                                              ; preds = %745
  %749 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %750 = load i64, ptr %6, align 8
  br label %756

751:                                              ; preds = %745
  %752 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %753 = load i32, ptr %752, align 4
  %754 = lshr i32 %753, 16
  %755 = and i32 %754, 255
  br label %756

756:                                              ; preds = %751, %748
  %757 = phi i64 [ %750, %748 ], [ %739, %751 ]
  %758 = phi i32 [ %749, %748 ], [ %755, %751 ]
  %759 = zext i32 %758 to i64
  %760 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %759
  %761 = load i8, ptr %760, align 1, !tbaa !17
  %762 = icmp eq i8 %761, 9
  br i1 %762, label %763, label %774

763:                                              ; preds = %756, %738
  %764 = phi i64 [ %757, %756 ], [ %739, %738 ]
  %765 = and i64 %764, 65535
  %766 = icmp eq i64 %765, 14
  br i1 %766, label %767, label %769

767:                                              ; preds = %763
  %768 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %790

769:                                              ; preds = %763
  %770 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %771 = load i32, ptr %770, align 4
  %772 = lshr i32 %771, 16
  %773 = and i32 %772, 255
  br label %790

774:                                              ; preds = %756
  %775 = and i64 %757, 65535
  %776 = icmp eq i64 %775, 14
  br i1 %776, label %777, label %779

777:                                              ; preds = %774
  %778 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %784

779:                                              ; preds = %774
  %780 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %781 = load i32, ptr %780, align 4
  %782 = lshr i32 %781, 16
  %783 = and i32 %782, 255
  br label %784

784:                                              ; preds = %779, %777
  %785 = phi i32 [ %778, %777 ], [ %783, %779 ]
  %786 = zext i32 %785 to i64
  %787 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %786
  %788 = load i8, ptr %787, align 1, !tbaa !17
  %789 = zext i8 %788 to i32
  br label %790

790:                                              ; preds = %767, %769, %784
  %791 = phi i32 [ %789, %784 ], [ %768, %767 ], [ %773, %769 ]
  %792 = zext i32 %791 to i64
  %793 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %792
  %794 = load i8, ptr %793, align 1, !tbaa !17
  %795 = icmp eq i8 %794, 9
  %796 = load i64, ptr %6, align 8
  %797 = and i64 %796, 65535
  %798 = icmp eq i64 %797, 14
  br i1 %795, label %799, label %860

799:                                              ; preds = %790
  br i1 %798, label %800, label %803

800:                                              ; preds = %799
  %801 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %802 = load i64, ptr %6, align 8
  br label %808

803:                                              ; preds = %799
  %804 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %805 = load i32, ptr %804, align 4
  %806 = lshr i32 %805, 16
  %807 = and i32 %806, 255
  br label %808

808:                                              ; preds = %803, %800
  %809 = phi i64 [ %802, %800 ], [ %796, %803 ]
  %810 = phi i32 [ %801, %800 ], [ %807, %803 ]
  %811 = zext i32 %810 to i64
  %812 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %811
  %813 = load i8, ptr %812, align 1, !tbaa !17
  %814 = icmp eq i8 %813, 8
  br i1 %814, label %833, label %815

815:                                              ; preds = %808
  %816 = and i64 %809, 65535
  %817 = icmp eq i64 %816, 14
  br i1 %817, label %818, label %821

818:                                              ; preds = %815
  %819 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %820 = load i64, ptr %6, align 8
  br label %826

821:                                              ; preds = %815
  %822 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %823 = load i32, ptr %822, align 4
  %824 = lshr i32 %823, 16
  %825 = and i32 %824, 255
  br label %826

826:                                              ; preds = %821, %818
  %827 = phi i64 [ %820, %818 ], [ %809, %821 ]
  %828 = phi i32 [ %819, %818 ], [ %825, %821 ]
  %829 = zext i32 %828 to i64
  %830 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %829
  %831 = load i8, ptr %830, align 1, !tbaa !17
  %832 = icmp eq i8 %831, 9
  br i1 %832, label %833, label %844

833:                                              ; preds = %826, %808
  %834 = phi i64 [ %827, %826 ], [ %809, %808 ]
  %835 = and i64 %834, 65535
  %836 = icmp eq i64 %835, 14
  br i1 %836, label %837, label %839

837:                                              ; preds = %833
  %838 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %921

839:                                              ; preds = %833
  %840 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %841 = load i32, ptr %840, align 4
  %842 = lshr i32 %841, 16
  %843 = and i32 %842, 255
  br label %921

844:                                              ; preds = %826
  %845 = and i64 %827, 65535
  %846 = icmp eq i64 %845, 14
  br i1 %846, label %847, label %849

847:                                              ; preds = %844
  %848 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %854

849:                                              ; preds = %844
  %850 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %851 = load i32, ptr %850, align 4
  %852 = lshr i32 %851, 16
  %853 = and i32 %852, 255
  br label %854

854:                                              ; preds = %849, %847
  %855 = phi i32 [ %848, %847 ], [ %853, %849 ]
  %856 = zext i32 %855 to i64
  %857 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %856
  %858 = load i8, ptr %857, align 1, !tbaa !17
  %859 = zext i8 %858 to i32
  br label %921

860:                                              ; preds = %790
  br i1 %798, label %861, label %864

861:                                              ; preds = %860
  %862 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %863 = load i64, ptr %6, align 8
  br label %869

864:                                              ; preds = %860
  %865 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %866 = load i32, ptr %865, align 4
  %867 = lshr i32 %866, 16
  %868 = and i32 %867, 255
  br label %869

869:                                              ; preds = %864, %861
  %870 = phi i64 [ %863, %861 ], [ %796, %864 ]
  %871 = phi i32 [ %862, %861 ], [ %868, %864 ]
  %872 = zext i32 %871 to i64
  %873 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %872
  %874 = load i8, ptr %873, align 1, !tbaa !17
  %875 = icmp eq i8 %874, 8
  br i1 %875, label %894, label %876

876:                                              ; preds = %869
  %877 = and i64 %870, 65535
  %878 = icmp eq i64 %877, 14
  br i1 %878, label %879, label %882

879:                                              ; preds = %876
  %880 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %881 = load i64, ptr %6, align 8
  br label %887

882:                                              ; preds = %876
  %883 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %884 = load i32, ptr %883, align 4
  %885 = lshr i32 %884, 16
  %886 = and i32 %885, 255
  br label %887

887:                                              ; preds = %882, %879
  %888 = phi i64 [ %881, %879 ], [ %870, %882 ]
  %889 = phi i32 [ %880, %879 ], [ %886, %882 ]
  %890 = zext i32 %889 to i64
  %891 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %890
  %892 = load i8, ptr %891, align 1, !tbaa !17
  %893 = icmp eq i8 %892, 9
  br i1 %893, label %894, label %905

894:                                              ; preds = %887, %869
  %895 = phi i64 [ %888, %887 ], [ %870, %869 ]
  %896 = and i64 %895, 65535
  %897 = icmp eq i64 %896, 14
  br i1 %897, label %898, label %900

898:                                              ; preds = %894
  %899 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %921

900:                                              ; preds = %894
  %901 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %902 = load i32, ptr %901, align 4
  %903 = lshr i32 %902, 16
  %904 = and i32 %903, 255
  br label %921

905:                                              ; preds = %887
  %906 = and i64 %888, 65535
  %907 = icmp eq i64 %906, 14
  br i1 %907, label %908, label %910

908:                                              ; preds = %905
  %909 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %915

910:                                              ; preds = %905
  %911 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %912 = load i32, ptr %911, align 4
  %913 = lshr i32 %912, 16
  %914 = and i32 %913, 255
  br label %915

915:                                              ; preds = %910, %908
  %916 = phi i32 [ %909, %908 ], [ %914, %910 ]
  %917 = zext i32 %916 to i64
  %918 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %917
  %919 = load i8, ptr %918, align 1, !tbaa !17
  %920 = zext i8 %919 to i32
  br label %921

921:                                              ; preds = %915, %900, %898, %854, %839, %837
  %922 = phi i32 [ %859, %854 ], [ %838, %837 ], [ %843, %839 ], [ %920, %915 ], [ %899, %898 ], [ %904, %900 ]
  %923 = add i32 %922, -38
  %924 = zext i32 %923 to i64
  %925 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %924
  %926 = load ptr, ptr %925, align 8, !tbaa !6
  %927 = getelementptr inbounds %struct.real_format, ptr %926, i64 0, i32 10
  %928 = load i8, ptr %927, align 1, !tbaa !49
  %929 = icmp ne i8 %928, 0
  %930 = load i32, ptr @flag_rounding_math, align 4
  %931 = icmp ne i32 %930, 0
  %932 = select i1 %929, i1 %931, i1 false
  br i1 %932, label %41, label %933

933:                                              ; preds = %921
  %934 = load i64, ptr %6, align 8
  br label %935

935:                                              ; preds = %933, %719
  %936 = phi i64 [ %934, %933 ], [ %720, %719 ]
  %937 = and i64 %936, 65535
  %938 = icmp eq i64 %937, 14
  br i1 %938, label %939, label %942

939:                                              ; preds = %935
  %940 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %941 = load i64, ptr %6, align 8
  br label %947

942:                                              ; preds = %935
  %943 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %944 = load i32, ptr %943, align 4
  %945 = lshr i32 %944, 16
  %946 = and i32 %945, 255
  br label %947

947:                                              ; preds = %942, %939
  %948 = phi i64 [ %941, %939 ], [ %936, %942 ]
  %949 = phi i32 [ %940, %939 ], [ %946, %942 ]
  %950 = zext i32 %949 to i64
  %951 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %950
  %952 = load i8, ptr %951, align 1, !tbaa !17
  %953 = icmp eq i8 %952, 8
  br i1 %953, label %1008, label %954

954:                                              ; preds = %947
  %955 = and i64 %948, 65535
  %956 = icmp eq i64 %955, 14
  br i1 %956, label %957, label %960

957:                                              ; preds = %954
  %958 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %959 = load i64, ptr %6, align 8
  br label %965

960:                                              ; preds = %954
  %961 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %962 = load i32, ptr %961, align 4
  %963 = lshr i32 %962, 16
  %964 = and i32 %963, 255
  br label %965

965:                                              ; preds = %960, %957
  %966 = phi i64 [ %959, %957 ], [ %948, %960 ]
  %967 = phi i32 [ %958, %957 ], [ %964, %960 ]
  %968 = zext i32 %967 to i64
  %969 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %968
  %970 = load i8, ptr %969, align 1, !tbaa !17
  %971 = icmp eq i8 %970, 9
  br i1 %971, label %1008, label %972

972:                                              ; preds = %965
  %973 = and i64 %966, 65535
  %974 = icmp eq i64 %973, 14
  br i1 %974, label %975, label %978

975:                                              ; preds = %972
  %976 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %977 = load i64, ptr %6, align 8
  br label %983

978:                                              ; preds = %972
  %979 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %980 = load i32, ptr %979, align 4
  %981 = lshr i32 %980, 16
  %982 = and i32 %981, 255
  br label %983

983:                                              ; preds = %978, %975
  %984 = phi i64 [ %977, %975 ], [ %966, %978 ]
  %985 = phi i32 [ %976, %975 ], [ %982, %978 ]
  %986 = zext i32 %985 to i64
  %987 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %986
  %988 = load i8, ptr %987, align 1, !tbaa !17
  %989 = icmp eq i8 %988, 11
  br i1 %989, label %1008, label %990

990:                                              ; preds = %983
  %991 = and i64 %984, 65535
  %992 = icmp eq i64 %991, 14
  br i1 %992, label %993, label %995

993:                                              ; preds = %990
  %994 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1000

995:                                              ; preds = %990
  %996 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %997 = load i32, ptr %996, align 4
  %998 = lshr i32 %997, 16
  %999 = and i32 %998, 255
  br label %1000

1000:                                             ; preds = %995, %993
  %1001 = phi i32 [ %994, %993 ], [ %999, %995 ]
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1002
  %1004 = load i8, ptr %1003, align 1, !tbaa !17
  %1005 = icmp eq i8 %1004, 17
  br i1 %1005, label %1006, label %1215

1006:                                             ; preds = %1000
  %1007 = load i64, ptr %6, align 8
  br label %1008

1008:                                             ; preds = %1006, %983, %965, %947
  %1009 = phi i64 [ %1007, %1006 ], [ %984, %983 ], [ %966, %965 ], [ %948, %947 ]
  %1010 = and i64 %1009, 65535
  %1011 = icmp eq i64 %1010, 14
  br i1 %1011, label %1012, label %1015

1012:                                             ; preds = %1008
  %1013 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1014 = load i64, ptr %6, align 8
  br label %1020

1015:                                             ; preds = %1008
  %1016 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1017 = load i32, ptr %1016, align 4
  %1018 = lshr i32 %1017, 16
  %1019 = and i32 %1018, 255
  br label %1020

1020:                                             ; preds = %1015, %1012
  %1021 = phi i64 [ %1014, %1012 ], [ %1009, %1015 ]
  %1022 = phi i32 [ %1013, %1012 ], [ %1019, %1015 ]
  %1023 = zext i32 %1022 to i64
  %1024 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1023
  %1025 = load i8, ptr %1024, align 1, !tbaa !17
  %1026 = icmp eq i8 %1025, 8
  br i1 %1026, label %1045, label %1027

1027:                                             ; preds = %1020
  %1028 = and i64 %1021, 65535
  %1029 = icmp eq i64 %1028, 14
  br i1 %1029, label %1030, label %1033

1030:                                             ; preds = %1027
  %1031 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1032 = load i64, ptr %6, align 8
  br label %1038

1033:                                             ; preds = %1027
  %1034 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1035 = load i32, ptr %1034, align 4
  %1036 = lshr i32 %1035, 16
  %1037 = and i32 %1036, 255
  br label %1038

1038:                                             ; preds = %1033, %1030
  %1039 = phi i64 [ %1032, %1030 ], [ %1021, %1033 ]
  %1040 = phi i32 [ %1031, %1030 ], [ %1037, %1033 ]
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1041
  %1043 = load i8, ptr %1042, align 1, !tbaa !17
  %1044 = icmp eq i8 %1043, 9
  br i1 %1044, label %1045, label %1056

1045:                                             ; preds = %1038, %1020
  %1046 = phi i64 [ %1039, %1038 ], [ %1021, %1020 ]
  %1047 = and i64 %1046, 65535
  %1048 = icmp eq i64 %1047, 14
  br i1 %1048, label %1049, label %1051

1049:                                             ; preds = %1045
  %1050 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1072

1051:                                             ; preds = %1045
  %1052 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1053 = load i32, ptr %1052, align 4
  %1054 = lshr i32 %1053, 16
  %1055 = and i32 %1054, 255
  br label %1072

1056:                                             ; preds = %1038
  %1057 = and i64 %1039, 65535
  %1058 = icmp eq i64 %1057, 14
  br i1 %1058, label %1059, label %1061

1059:                                             ; preds = %1056
  %1060 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1066

1061:                                             ; preds = %1056
  %1062 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1063 = load i32, ptr %1062, align 4
  %1064 = lshr i32 %1063, 16
  %1065 = and i32 %1064, 255
  br label %1066

1066:                                             ; preds = %1061, %1059
  %1067 = phi i32 [ %1060, %1059 ], [ %1065, %1061 ]
  %1068 = zext i32 %1067 to i64
  %1069 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1068
  %1070 = load i8, ptr %1069, align 1, !tbaa !17
  %1071 = zext i8 %1070 to i32
  br label %1072

1072:                                             ; preds = %1049, %1051, %1066
  %1073 = phi i32 [ %1071, %1066 ], [ %1050, %1049 ], [ %1055, %1051 ]
  %1074 = zext i32 %1073 to i64
  %1075 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1074
  %1076 = load i8, ptr %1075, align 1, !tbaa !17
  %1077 = icmp eq i8 %1076, 9
  %1078 = load i64, ptr %6, align 8
  %1079 = and i64 %1078, 65535
  %1080 = icmp eq i64 %1079, 14
  br i1 %1077, label %1081, label %1142

1081:                                             ; preds = %1072
  br i1 %1080, label %1082, label %1085

1082:                                             ; preds = %1081
  %1083 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1084 = load i64, ptr %6, align 8
  br label %1090

1085:                                             ; preds = %1081
  %1086 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1087 = load i32, ptr %1086, align 4
  %1088 = lshr i32 %1087, 16
  %1089 = and i32 %1088, 255
  br label %1090

1090:                                             ; preds = %1085, %1082
  %1091 = phi i64 [ %1084, %1082 ], [ %1078, %1085 ]
  %1092 = phi i32 [ %1083, %1082 ], [ %1089, %1085 ]
  %1093 = zext i32 %1092 to i64
  %1094 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1093
  %1095 = load i8, ptr %1094, align 1, !tbaa !17
  %1096 = icmp eq i8 %1095, 8
  br i1 %1096, label %1115, label %1097

1097:                                             ; preds = %1090
  %1098 = and i64 %1091, 65535
  %1099 = icmp eq i64 %1098, 14
  br i1 %1099, label %1100, label %1103

1100:                                             ; preds = %1097
  %1101 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1102 = load i64, ptr %6, align 8
  br label %1108

1103:                                             ; preds = %1097
  %1104 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1105 = load i32, ptr %1104, align 4
  %1106 = lshr i32 %1105, 16
  %1107 = and i32 %1106, 255
  br label %1108

1108:                                             ; preds = %1103, %1100
  %1109 = phi i64 [ %1102, %1100 ], [ %1091, %1103 ]
  %1110 = phi i32 [ %1101, %1100 ], [ %1107, %1103 ]
  %1111 = zext i32 %1110 to i64
  %1112 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1111
  %1113 = load i8, ptr %1112, align 1, !tbaa !17
  %1114 = icmp eq i8 %1113, 9
  br i1 %1114, label %1115, label %1126

1115:                                             ; preds = %1108, %1090
  %1116 = phi i64 [ %1109, %1108 ], [ %1091, %1090 ]
  %1117 = and i64 %1116, 65535
  %1118 = icmp eq i64 %1117, 14
  br i1 %1118, label %1119, label %1121

1119:                                             ; preds = %1115
  %1120 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1203

1121:                                             ; preds = %1115
  %1122 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1123 = load i32, ptr %1122, align 4
  %1124 = lshr i32 %1123, 16
  %1125 = and i32 %1124, 255
  br label %1203

1126:                                             ; preds = %1108
  %1127 = and i64 %1109, 65535
  %1128 = icmp eq i64 %1127, 14
  br i1 %1128, label %1129, label %1131

1129:                                             ; preds = %1126
  %1130 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1136

1131:                                             ; preds = %1126
  %1132 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1133 = load i32, ptr %1132, align 4
  %1134 = lshr i32 %1133, 16
  %1135 = and i32 %1134, 255
  br label %1136

1136:                                             ; preds = %1131, %1129
  %1137 = phi i32 [ %1130, %1129 ], [ %1135, %1131 ]
  %1138 = zext i32 %1137 to i64
  %1139 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1138
  %1140 = load i8, ptr %1139, align 1, !tbaa !17
  %1141 = zext i8 %1140 to i32
  br label %1203

1142:                                             ; preds = %1072
  br i1 %1080, label %1143, label %1146

1143:                                             ; preds = %1142
  %1144 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1145 = load i64, ptr %6, align 8
  br label %1151

1146:                                             ; preds = %1142
  %1147 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1148 = load i32, ptr %1147, align 4
  %1149 = lshr i32 %1148, 16
  %1150 = and i32 %1149, 255
  br label %1151

1151:                                             ; preds = %1146, %1143
  %1152 = phi i64 [ %1145, %1143 ], [ %1078, %1146 ]
  %1153 = phi i32 [ %1144, %1143 ], [ %1150, %1146 ]
  %1154 = zext i32 %1153 to i64
  %1155 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1154
  %1156 = load i8, ptr %1155, align 1, !tbaa !17
  %1157 = icmp eq i8 %1156, 8
  br i1 %1157, label %1176, label %1158

1158:                                             ; preds = %1151
  %1159 = and i64 %1152, 65535
  %1160 = icmp eq i64 %1159, 14
  br i1 %1160, label %1161, label %1164

1161:                                             ; preds = %1158
  %1162 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  %1163 = load i64, ptr %6, align 8
  br label %1169

1164:                                             ; preds = %1158
  %1165 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1166 = load i32, ptr %1165, align 4
  %1167 = lshr i32 %1166, 16
  %1168 = and i32 %1167, 255
  br label %1169

1169:                                             ; preds = %1164, %1161
  %1170 = phi i64 [ %1163, %1161 ], [ %1152, %1164 ]
  %1171 = phi i32 [ %1162, %1161 ], [ %1168, %1164 ]
  %1172 = zext i32 %1171 to i64
  %1173 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1172
  %1174 = load i8, ptr %1173, align 1, !tbaa !17
  %1175 = icmp eq i8 %1174, 9
  br i1 %1175, label %1176, label %1187

1176:                                             ; preds = %1169, %1151
  %1177 = phi i64 [ %1170, %1169 ], [ %1152, %1151 ]
  %1178 = and i64 %1177, 65535
  %1179 = icmp eq i64 %1178, 14
  br i1 %1179, label %1180, label %1182

1180:                                             ; preds = %1176
  %1181 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1203

1182:                                             ; preds = %1176
  %1183 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1184 = load i32, ptr %1183, align 4
  %1185 = lshr i32 %1184, 16
  %1186 = and i32 %1185, 255
  br label %1203

1187:                                             ; preds = %1169
  %1188 = and i64 %1170, 65535
  %1189 = icmp eq i64 %1188, 14
  br i1 %1189, label %1190, label %1192

1190:                                             ; preds = %1187
  %1191 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %1197

1192:                                             ; preds = %1187
  %1193 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1194 = load i32, ptr %1193, align 4
  %1195 = lshr i32 %1194, 16
  %1196 = and i32 %1195, 255
  br label %1197

1197:                                             ; preds = %1192, %1190
  %1198 = phi i32 [ %1191, %1190 ], [ %1196, %1192 ]
  %1199 = zext i32 %1198 to i64
  %1200 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1199
  %1201 = load i8, ptr %1200, align 1, !tbaa !17
  %1202 = zext i8 %1201 to i32
  br label %1203

1203:                                             ; preds = %1197, %1182, %1180, %1136, %1121, %1119
  %1204 = phi i32 [ %1141, %1136 ], [ %1120, %1119 ], [ %1125, %1121 ], [ %1202, %1197 ], [ %1181, %1180 ], [ %1186, %1182 ]
  %1205 = add i32 %1204, -38
  %1206 = zext i32 %1205 to i64
  %1207 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1206
  %1208 = load ptr, ptr %1207, align 8, !tbaa !6
  %1209 = getelementptr inbounds %struct.real_format, ptr %1208, i64 0, i32 14
  %1210 = load i8, ptr %1209, align 1, !tbaa !37
  %1211 = icmp ne i8 %1210, 0
  %1212 = load i32, ptr @flag_signed_zeros, align 4
  %1213 = icmp ne i32 %1212, 0
  %1214 = select i1 %1211, i1 %1213, i1 false
  br i1 %1214, label %41, label %1215

1215:                                             ; preds = %1203, %1000
  %1216 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %1217 = load ptr, ptr %1216, align 8, !tbaa !17
  %1218 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %1219 = icmp eq i32 %1218, 0
  br i1 %1219, label %41, label %1220

1220:                                             ; preds = %1215
  %1221 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %1222 = load ptr, ptr %1221, align 8, !tbaa !17
  %1223 = load i64, ptr %1222, align 8
  %1224 = and i64 %1223, 131072
  %1225 = icmp eq i64 %1224, 0
  br i1 %1225, label %1226, label %41

1226:                                             ; preds = %1220
  %1227 = load i64, ptr %1217, align 8
  %1228 = and i64 %1227, 131072
  %1229 = icmp eq i64 %1228, 0
  br i1 %1229, label %1230, label %41

1230:                                             ; preds = %1226
  %1231 = or i64 %1227, %1223
  %1232 = and i64 %1231, 65536
  %1233 = icmp eq i64 %1232, 0
  %1234 = zext i1 %1233 to i8
  br label %41

1235:                                             ; preds = %3
  %1236 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %1237 = load ptr, ptr %1236, align 8, !tbaa !17
  %1238 = load i64, ptr %1237, align 8
  %1239 = and i64 %1238, 2097152
  %1240 = icmp eq i64 %1239, 0
  br i1 %1240, label %1245, label %1615

1241:                                             ; preds = %3
  %1242 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %1243 = load ptr, ptr %1242, align 8, !tbaa !17
  %1244 = load i64, ptr %1243, align 8
  br label %1245

1245:                                             ; preds = %1241, %1235
  %1246 = phi i64 [ %1244, %1241 ], [ %1238, %1235 ]
  %1247 = phi ptr [ %1243, %1241 ], [ %1237, %1235 ]
  %1248 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %1249 = and i64 %1246, 65535
  %1250 = icmp eq i64 %1249, 14
  br i1 %1250, label %1251, label %1254

1251:                                             ; preds = %1245
  %1252 = tail call i32 @vector_type_mode(ptr noundef nonnull %1247) #24
  %1253 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1259

1254:                                             ; preds = %1245
  %1255 = getelementptr inbounds %struct.tree_type, ptr %1247, i64 0, i32 6
  %1256 = load i32, ptr %1255, align 4
  %1257 = lshr i32 %1256, 16
  %1258 = and i32 %1257, 255
  br label %1259

1259:                                             ; preds = %1254, %1251
  %1260 = phi ptr [ %1253, %1251 ], [ %1247, %1254 ]
  %1261 = phi i32 [ %1252, %1251 ], [ %1258, %1254 ]
  %1262 = zext i32 %1261 to i64
  %1263 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1262
  %1264 = load i8, ptr %1263, align 1, !tbaa !17
  %1265 = icmp eq i8 %1264, 8
  br i1 %1265, label %1323, label %1266

1266:                                             ; preds = %1259
  %1267 = load i64, ptr %1260, align 8
  %1268 = and i64 %1267, 65535
  %1269 = icmp eq i64 %1268, 14
  br i1 %1269, label %1270, label %1273

1270:                                             ; preds = %1266
  %1271 = tail call i32 @vector_type_mode(ptr noundef nonnull %1260) #24
  %1272 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1278

1273:                                             ; preds = %1266
  %1274 = getelementptr inbounds %struct.tree_type, ptr %1260, i64 0, i32 6
  %1275 = load i32, ptr %1274, align 4
  %1276 = lshr i32 %1275, 16
  %1277 = and i32 %1276, 255
  br label %1278

1278:                                             ; preds = %1273, %1270
  %1279 = phi ptr [ %1272, %1270 ], [ %1260, %1273 ]
  %1280 = phi i32 [ %1271, %1270 ], [ %1277, %1273 ]
  %1281 = zext i32 %1280 to i64
  %1282 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1281
  %1283 = load i8, ptr %1282, align 1, !tbaa !17
  %1284 = icmp eq i8 %1283, 9
  br i1 %1284, label %1323, label %1285

1285:                                             ; preds = %1278
  %1286 = load i64, ptr %1279, align 8
  %1287 = and i64 %1286, 65535
  %1288 = icmp eq i64 %1287, 14
  br i1 %1288, label %1289, label %1292

1289:                                             ; preds = %1285
  %1290 = tail call i32 @vector_type_mode(ptr noundef nonnull %1279) #24
  %1291 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1297

1292:                                             ; preds = %1285
  %1293 = getelementptr inbounds %struct.tree_type, ptr %1279, i64 0, i32 6
  %1294 = load i32, ptr %1293, align 4
  %1295 = lshr i32 %1294, 16
  %1296 = and i32 %1295, 255
  br label %1297

1297:                                             ; preds = %1292, %1289
  %1298 = phi ptr [ %1291, %1289 ], [ %1279, %1292 ]
  %1299 = phi i32 [ %1290, %1289 ], [ %1296, %1292 ]
  %1300 = zext i32 %1299 to i64
  %1301 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1300
  %1302 = load i8, ptr %1301, align 1, !tbaa !17
  %1303 = icmp eq i8 %1302, 11
  br i1 %1303, label %1323, label %1304

1304:                                             ; preds = %1297
  %1305 = load i64, ptr %1298, align 8
  %1306 = and i64 %1305, 65535
  %1307 = icmp eq i64 %1306, 14
  br i1 %1307, label %1308, label %1310

1308:                                             ; preds = %1304
  %1309 = tail call i32 @vector_type_mode(ptr noundef nonnull %1298) #24
  br label %1315

1310:                                             ; preds = %1304
  %1311 = getelementptr inbounds %struct.tree_type, ptr %1298, i64 0, i32 6
  %1312 = load i32, ptr %1311, align 4
  %1313 = lshr i32 %1312, 16
  %1314 = and i32 %1313, 255
  br label %1315

1315:                                             ; preds = %1310, %1308
  %1316 = phi i32 [ %1309, %1308 ], [ %1314, %1310 ]
  %1317 = zext i32 %1316 to i64
  %1318 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1317
  %1319 = load i8, ptr %1318, align 1, !tbaa !17
  %1320 = icmp eq i8 %1319, 17
  br i1 %1320, label %1321, label %1541

1321:                                             ; preds = %1315
  %1322 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1323

1323:                                             ; preds = %1321, %1297, %1278, %1259
  %1324 = phi ptr [ %1322, %1321 ], [ %1298, %1297 ], [ %1279, %1278 ], [ %1260, %1259 ]
  %1325 = load i64, ptr %1324, align 8
  %1326 = and i64 %1325, 65535
  %1327 = icmp eq i64 %1326, 14
  br i1 %1327, label %1328, label %1331

1328:                                             ; preds = %1323
  %1329 = tail call i32 @vector_type_mode(ptr noundef nonnull %1324) #24
  %1330 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1336

1331:                                             ; preds = %1323
  %1332 = getelementptr inbounds %struct.tree_type, ptr %1324, i64 0, i32 6
  %1333 = load i32, ptr %1332, align 4
  %1334 = lshr i32 %1333, 16
  %1335 = and i32 %1334, 255
  br label %1336

1336:                                             ; preds = %1331, %1328
  %1337 = phi ptr [ %1330, %1328 ], [ %1324, %1331 ]
  %1338 = phi i32 [ %1329, %1328 ], [ %1335, %1331 ]
  %1339 = zext i32 %1338 to i64
  %1340 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1339
  %1341 = load i8, ptr %1340, align 1, !tbaa !17
  %1342 = icmp eq i8 %1341, 8
  br i1 %1342, label %1362, label %1343

1343:                                             ; preds = %1336
  %1344 = load i64, ptr %1337, align 8
  %1345 = and i64 %1344, 65535
  %1346 = icmp eq i64 %1345, 14
  br i1 %1346, label %1347, label %1350

1347:                                             ; preds = %1343
  %1348 = tail call i32 @vector_type_mode(ptr noundef nonnull %1337) #24
  %1349 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1355

1350:                                             ; preds = %1343
  %1351 = getelementptr inbounds %struct.tree_type, ptr %1337, i64 0, i32 6
  %1352 = load i32, ptr %1351, align 4
  %1353 = lshr i32 %1352, 16
  %1354 = and i32 %1353, 255
  br label %1355

1355:                                             ; preds = %1350, %1347
  %1356 = phi ptr [ %1349, %1347 ], [ %1337, %1350 ]
  %1357 = phi i32 [ %1348, %1347 ], [ %1354, %1350 ]
  %1358 = zext i32 %1357 to i64
  %1359 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1358
  %1360 = load i8, ptr %1359, align 1, !tbaa !17
  %1361 = icmp eq i8 %1360, 9
  br i1 %1361, label %1362, label %1374

1362:                                             ; preds = %1355, %1336
  %1363 = phi ptr [ %1356, %1355 ], [ %1337, %1336 ]
  %1364 = load i64, ptr %1363, align 8
  %1365 = and i64 %1364, 65535
  %1366 = icmp eq i64 %1365, 14
  br i1 %1366, label %1367, label %1369

1367:                                             ; preds = %1362
  %1368 = tail call i32 @vector_type_mode(ptr noundef nonnull %1363) #24
  br label %1391

1369:                                             ; preds = %1362
  %1370 = getelementptr inbounds %struct.tree_type, ptr %1363, i64 0, i32 6
  %1371 = load i32, ptr %1370, align 4
  %1372 = lshr i32 %1371, 16
  %1373 = and i32 %1372, 255
  br label %1391

1374:                                             ; preds = %1355
  %1375 = load i64, ptr %1356, align 8
  %1376 = and i64 %1375, 65535
  %1377 = icmp eq i64 %1376, 14
  br i1 %1377, label %1378, label %1380

1378:                                             ; preds = %1374
  %1379 = tail call i32 @vector_type_mode(ptr noundef nonnull %1356) #24
  br label %1385

1380:                                             ; preds = %1374
  %1381 = getelementptr inbounds %struct.tree_type, ptr %1356, i64 0, i32 6
  %1382 = load i32, ptr %1381, align 4
  %1383 = lshr i32 %1382, 16
  %1384 = and i32 %1383, 255
  br label %1385

1385:                                             ; preds = %1380, %1378
  %1386 = phi i32 [ %1379, %1378 ], [ %1384, %1380 ]
  %1387 = zext i32 %1386 to i64
  %1388 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1387
  %1389 = load i8, ptr %1388, align 1, !tbaa !17
  %1390 = zext i8 %1389 to i32
  br label %1391

1391:                                             ; preds = %1367, %1369, %1385
  %1392 = phi i32 [ %1390, %1385 ], [ %1368, %1367 ], [ %1373, %1369 ]
  %1393 = zext i32 %1392 to i64
  %1394 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1393
  %1395 = load i8, ptr %1394, align 1, !tbaa !17
  %1396 = icmp eq i8 %1395, 9
  %1397 = load ptr, ptr %1248, align 8, !tbaa !17
  %1398 = load i64, ptr %1397, align 8
  %1399 = and i64 %1398, 65535
  %1400 = icmp eq i64 %1399, 14
  br i1 %1396, label %1401, label %1465

1401:                                             ; preds = %1391
  br i1 %1400, label %1402, label %1405

1402:                                             ; preds = %1401
  %1403 = tail call i32 @vector_type_mode(ptr noundef nonnull %1397) #24
  %1404 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1410

1405:                                             ; preds = %1401
  %1406 = getelementptr inbounds %struct.tree_type, ptr %1397, i64 0, i32 6
  %1407 = load i32, ptr %1406, align 4
  %1408 = lshr i32 %1407, 16
  %1409 = and i32 %1408, 255
  br label %1410

1410:                                             ; preds = %1405, %1402
  %1411 = phi ptr [ %1404, %1402 ], [ %1397, %1405 ]
  %1412 = phi i32 [ %1403, %1402 ], [ %1409, %1405 ]
  %1413 = zext i32 %1412 to i64
  %1414 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1413
  %1415 = load i8, ptr %1414, align 1, !tbaa !17
  %1416 = icmp eq i8 %1415, 8
  br i1 %1416, label %1436, label %1417

1417:                                             ; preds = %1410
  %1418 = load i64, ptr %1411, align 8
  %1419 = and i64 %1418, 65535
  %1420 = icmp eq i64 %1419, 14
  br i1 %1420, label %1421, label %1424

1421:                                             ; preds = %1417
  %1422 = tail call i32 @vector_type_mode(ptr noundef nonnull %1411) #24
  %1423 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1429

1424:                                             ; preds = %1417
  %1425 = getelementptr inbounds %struct.tree_type, ptr %1411, i64 0, i32 6
  %1426 = load i32, ptr %1425, align 4
  %1427 = lshr i32 %1426, 16
  %1428 = and i32 %1427, 255
  br label %1429

1429:                                             ; preds = %1424, %1421
  %1430 = phi ptr [ %1423, %1421 ], [ %1411, %1424 ]
  %1431 = phi i32 [ %1422, %1421 ], [ %1428, %1424 ]
  %1432 = zext i32 %1431 to i64
  %1433 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1432
  %1434 = load i8, ptr %1433, align 1, !tbaa !17
  %1435 = icmp eq i8 %1434, 9
  br i1 %1435, label %1436, label %1448

1436:                                             ; preds = %1429, %1410
  %1437 = phi ptr [ %1430, %1429 ], [ %1411, %1410 ]
  %1438 = load i64, ptr %1437, align 8
  %1439 = and i64 %1438, 65535
  %1440 = icmp eq i64 %1439, 14
  br i1 %1440, label %1441, label %1443

1441:                                             ; preds = %1436
  %1442 = tail call i32 @vector_type_mode(ptr noundef nonnull %1437) #24
  br label %1529

1443:                                             ; preds = %1436
  %1444 = getelementptr inbounds %struct.tree_type, ptr %1437, i64 0, i32 6
  %1445 = load i32, ptr %1444, align 4
  %1446 = lshr i32 %1445, 16
  %1447 = and i32 %1446, 255
  br label %1529

1448:                                             ; preds = %1429
  %1449 = load i64, ptr %1430, align 8
  %1450 = and i64 %1449, 65535
  %1451 = icmp eq i64 %1450, 14
  br i1 %1451, label %1452, label %1454

1452:                                             ; preds = %1448
  %1453 = tail call i32 @vector_type_mode(ptr noundef nonnull %1430) #24
  br label %1459

1454:                                             ; preds = %1448
  %1455 = getelementptr inbounds %struct.tree_type, ptr %1430, i64 0, i32 6
  %1456 = load i32, ptr %1455, align 4
  %1457 = lshr i32 %1456, 16
  %1458 = and i32 %1457, 255
  br label %1459

1459:                                             ; preds = %1454, %1452
  %1460 = phi i32 [ %1453, %1452 ], [ %1458, %1454 ]
  %1461 = zext i32 %1460 to i64
  %1462 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1461
  %1463 = load i8, ptr %1462, align 1, !tbaa !17
  %1464 = zext i8 %1463 to i32
  br label %1529

1465:                                             ; preds = %1391
  br i1 %1400, label %1466, label %1469

1466:                                             ; preds = %1465
  %1467 = tail call i32 @vector_type_mode(ptr noundef nonnull %1397) #24
  %1468 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1474

1469:                                             ; preds = %1465
  %1470 = getelementptr inbounds %struct.tree_type, ptr %1397, i64 0, i32 6
  %1471 = load i32, ptr %1470, align 4
  %1472 = lshr i32 %1471, 16
  %1473 = and i32 %1472, 255
  br label %1474

1474:                                             ; preds = %1469, %1466
  %1475 = phi ptr [ %1468, %1466 ], [ %1397, %1469 ]
  %1476 = phi i32 [ %1467, %1466 ], [ %1473, %1469 ]
  %1477 = zext i32 %1476 to i64
  %1478 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1477
  %1479 = load i8, ptr %1478, align 1, !tbaa !17
  %1480 = icmp eq i8 %1479, 8
  br i1 %1480, label %1500, label %1481

1481:                                             ; preds = %1474
  %1482 = load i64, ptr %1475, align 8
  %1483 = and i64 %1482, 65535
  %1484 = icmp eq i64 %1483, 14
  br i1 %1484, label %1485, label %1488

1485:                                             ; preds = %1481
  %1486 = tail call i32 @vector_type_mode(ptr noundef nonnull %1475) #24
  %1487 = load ptr, ptr %1248, align 8, !tbaa !17
  br label %1493

1488:                                             ; preds = %1481
  %1489 = getelementptr inbounds %struct.tree_type, ptr %1475, i64 0, i32 6
  %1490 = load i32, ptr %1489, align 4
  %1491 = lshr i32 %1490, 16
  %1492 = and i32 %1491, 255
  br label %1493

1493:                                             ; preds = %1488, %1485
  %1494 = phi ptr [ %1487, %1485 ], [ %1475, %1488 ]
  %1495 = phi i32 [ %1486, %1485 ], [ %1492, %1488 ]
  %1496 = zext i32 %1495 to i64
  %1497 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1496
  %1498 = load i8, ptr %1497, align 1, !tbaa !17
  %1499 = icmp eq i8 %1498, 9
  br i1 %1499, label %1500, label %1512

1500:                                             ; preds = %1493, %1474
  %1501 = phi ptr [ %1494, %1493 ], [ %1475, %1474 ]
  %1502 = load i64, ptr %1501, align 8
  %1503 = and i64 %1502, 65535
  %1504 = icmp eq i64 %1503, 14
  br i1 %1504, label %1505, label %1507

1505:                                             ; preds = %1500
  %1506 = tail call i32 @vector_type_mode(ptr noundef nonnull %1501) #24
  br label %1529

1507:                                             ; preds = %1500
  %1508 = getelementptr inbounds %struct.tree_type, ptr %1501, i64 0, i32 6
  %1509 = load i32, ptr %1508, align 4
  %1510 = lshr i32 %1509, 16
  %1511 = and i32 %1510, 255
  br label %1529

1512:                                             ; preds = %1493
  %1513 = load i64, ptr %1494, align 8
  %1514 = and i64 %1513, 65535
  %1515 = icmp eq i64 %1514, 14
  br i1 %1515, label %1516, label %1518

1516:                                             ; preds = %1512
  %1517 = tail call i32 @vector_type_mode(ptr noundef nonnull %1494) #24
  br label %1523

1518:                                             ; preds = %1512
  %1519 = getelementptr inbounds %struct.tree_type, ptr %1494, i64 0, i32 6
  %1520 = load i32, ptr %1519, align 4
  %1521 = lshr i32 %1520, 16
  %1522 = and i32 %1521, 255
  br label %1523

1523:                                             ; preds = %1518, %1516
  %1524 = phi i32 [ %1517, %1516 ], [ %1522, %1518 ]
  %1525 = zext i32 %1524 to i64
  %1526 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1525
  %1527 = load i8, ptr %1526, align 1, !tbaa !17
  %1528 = zext i8 %1527 to i32
  br label %1529

1529:                                             ; preds = %1523, %1507, %1505, %1459, %1443, %1441
  %1530 = phi i32 [ %1464, %1459 ], [ %1442, %1441 ], [ %1447, %1443 ], [ %1528, %1523 ], [ %1506, %1505 ], [ %1511, %1507 ]
  %1531 = add i32 %1530, -38
  %1532 = zext i32 %1531 to i64
  %1533 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1532
  %1534 = load ptr, ptr %1533, align 8, !tbaa !6
  %1535 = getelementptr inbounds %struct.real_format, ptr %1534, i64 0, i32 10
  %1536 = load i8, ptr %1535, align 1, !tbaa !49
  %1537 = icmp ne i8 %1536, 0
  %1538 = load i32, ptr @flag_rounding_math, align 4
  %1539 = icmp ne i32 %1538, 0
  %1540 = select i1 %1537, i1 %1539, i1 false
  br i1 %1540, label %1615, label %1541

1541:                                             ; preds = %1529, %1315
  %1542 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %1543 = load ptr, ptr %1542, align 8, !tbaa !17
  %1544 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1543)
  %1545 = icmp eq i8 %1544, 0
  br i1 %1545, label %1546, label %41

1546:                                             ; preds = %1541
  %1547 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %1548 = load ptr, ptr %1547, align 8, !tbaa !17
  %1549 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1548)
  %1550 = icmp ne i8 %1549, 0
  %1551 = zext i1 %1550 to i8
  br label %41

1552:                                             ; preds = %3, %3, %3, %3, %3
  %1553 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %1554 = load ptr, ptr %1553, align 8, !tbaa !17
  %1555 = load i64, ptr %1554, align 8
  %1556 = trunc i64 %1555 to i32
  %1557 = and i32 %1556, 65535
  %1558 = add nsw i32 %1557, -6
  %1559 = icmp ult i32 %1558, 3
  br i1 %1559, label %1560, label %1572

1560:                                             ; preds = %1552
  %1561 = and i64 %1555, 2097152
  %1562 = icmp eq i64 %1561, 0
  %1563 = load i32, ptr @flag_wrapv, align 4
  %1564 = icmp eq i32 %1563, 0
  %1565 = select i1 %1562, i1 %1564, i1 false
  %1566 = load i32, ptr @flag_trapv, align 4
  %1567 = icmp eq i32 %1566, 0
  %1568 = select i1 %1565, i1 %1567, i1 false
  %1569 = load i32, ptr @flag_strict_overflow, align 4
  %1570 = icmp ne i32 %1569, 0
  %1571 = select i1 %1568, i1 %1570, i1 false
  br i1 %1571, label %1572, label %1615

1572:                                             ; preds = %1552, %1560
  %1573 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %1574 = load ptr, ptr %1573, align 8, !tbaa !17
  %1575 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1574)
  %1576 = icmp eq i8 %1575, 0
  br i1 %1576, label %1577, label %41

1577:                                             ; preds = %1572
  %1578 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %1579 = load ptr, ptr %1578, align 8, !tbaa !17
  %1580 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %1579)
  %1581 = icmp ne i8 %1580, 0
  %1582 = zext i1 %1581 to i8
  br label %41

1583:                                             ; preds = %3
  %1584 = load i64, ptr %6, align 8
  %1585 = and i64 %1584, 65535
  %1586 = icmp eq i64 %1585, 9
  br i1 %1586, label %1587, label %1615

1587:                                             ; preds = %1583
  %1588 = tail call ptr @strip_float_extensions(ptr noundef nonnull %7) #24
  %1589 = icmp eq ptr %1588, %7
  br i1 %1589, label %1615, label %65

1590:                                             ; preds = %3
  %1591 = tail call i32 @builtin_mathfn_code(ptr noundef nonnull %7) #24
  %1592 = tail call fastcc zeroext i8 @negate_mathfn_p(i32 noundef %1591), !range !40
  %1593 = icmp eq i8 %1592, 0
  br i1 %1593, label %1615, label %1594

1594:                                             ; preds = %1590
  %1595 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1, i32 0, i32 2
  br label %62

1596:                                             ; preds = %3
  %1597 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %1598 = load ptr, ptr %1597, align 8, !tbaa !17
  %1599 = load i64, ptr %1598, align 8
  %1600 = and i64 %1599, 65535
  %1601 = icmp eq i64 %1600, 23
  br i1 %1601, label %1602, label %1615

1602:                                             ; preds = %1596
  %1603 = getelementptr inbounds %struct.tree_int_cst, ptr %1598, i64 0, i32 1, i32 1
  %1604 = load i64, ptr %1603, align 8, !tbaa !17
  %1605 = icmp eq i64 %1604, 0
  br i1 %1605, label %1606, label %1615

1606:                                             ; preds = %1602
  %1607 = getelementptr inbounds %struct.tree_int_cst, ptr %1598, i64 0, i32 1
  %1608 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %1609 = load i32, ptr %1608, align 4
  %1610 = and i32 %1609, 1023
  %1611 = add nsw i32 %1610, -1
  %1612 = sext i32 %1611 to i64
  %1613 = load i64, ptr %1607, align 8, !tbaa !17
  %1614 = icmp eq i64 %1613, %1612
  br i1 %1614, label %41, label %1615

1615:                                             ; preds = %1587, %3, %1590, %1583, %1602, %1606, %1596, %1560, %1529, %1235
  br label %41
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc void @fold_overflow_warning(ptr noundef %0, i32 noundef %1) unnamed_addr #10 {
  %3 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %7 = icmp eq ptr %6, null
  %8 = load i32, ptr @fold_deferred_overflow_code, align 4
  %9 = icmp ugt i32 %8, %1
  %10 = select i1 %7, i1 true, i1 %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %5
  store ptr %0, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 %1, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %17

12:                                               ; preds = %2
  %13 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %14 = icmp slt i32 %13, %1
  br i1 %14, label %17, label %15

15:                                               ; preds = %12
  %16 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef %0) #24
  br label %17

17:                                               ; preds = %5, %12, %15, %11
  ret void
}

declare ptr @strip_float_extensions(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable
define internal fastcc zeroext i8 @negate_mathfn_p(i32 noundef %0) unnamed_addr #15 {
  switch i32 %0, label %6 [
    i32 6, label %7
    i32 7, label %7
    i32 11, label %7
    i32 8, label %7
    i32 9, label %7
    i32 10, label %7
    i32 12, label %7
    i32 16, label %7
    i32 20, label %7
    i32 17, label %7
    i32 18, label %7
    i32 19, label %7
    i32 264, label %7
    i32 265, label %7
    i32 269, label %7
    i32 266, label %7
    i32 267, label %7
    i32 268, label %7
    i32 270, label %7
    i32 271, label %7
    i32 275, label %7
    i32 272, label %7
    i32 273, label %7
    i32 274, label %7
    i32 21, label %7
    i32 22, label %7
    i32 23, label %7
    i32 303, label %7
    i32 304, label %7
    i32 305, label %7
    i32 309, label %7
    i32 310, label %7
    i32 314, label %7
    i32 311, label %7
    i32 312, label %7
    i32 313, label %7
    i32 318, label %7
    i32 319, label %7
    i32 323, label %7
    i32 320, label %7
    i32 321, label %7
    i32 322, label %7
    i32 39, label %7
    i32 43, label %7
    i32 44, label %7
    i32 135, label %7
    i32 136, label %7
    i32 137, label %7
    i32 156, label %7
    i32 157, label %7
    i32 158, label %7
    i32 198, label %7
    i32 199, label %7
    i32 200, label %7
    i32 219, label %7
    i32 223, label %7
    i32 227, label %7
    i32 224, label %7
    i32 225, label %7
    i32 226, label %7
    i32 231, label %7
    i32 232, label %7
    i32 236, label %7
    i32 233, label %7
    i32 234, label %7
    i32 235, label %7
    i32 240, label %7
    i32 241, label %7
    i32 242, label %7
    i32 132, label %2
    i32 133, label %2
    i32 134, label %2
    i32 153, label %2
    i32 154, label %2
    i32 155, label %2
    i32 171, label %2
    i32 172, label %2
    i32 173, label %2
    i32 195, label %2
    i32 196, label %2
    i32 197, label %2
  ]

2:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %3 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %4 = icmp eq i32 %3, 0
  %5 = zext i1 %4 to i8
  br label %7

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %6, %2
  %8 = phi i8 [ 0, %6 ], [ %5, %2 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i8 %8
}

declare i32 @builtin_mathfn_code(ptr noundef) local_unnamed_addr #3

declare ptr @get_callee_fndecl(ptr noundef) local_unnamed_addr #3

declare ptr @build_call_expr_loc(i32 noundef, ptr noundef, i32 noundef, ...) local_unnamed_addr #3

declare ptr @unsigned_type_for(ptr noundef) local_unnamed_addr #3

declare void @real_arithmetic2(ptr sret(%struct.real_value) align 8, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare zeroext i8 @fixed_arithmetic(ptr noundef, i32 noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare zeroext i8 @real_isneg(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @warning(i32 noundef, ptr noundef, ...) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_range_check(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5) local_unnamed_addr #10 {
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %15, label %8

8:                                                ; preds = %6
  %9 = icmp eq ptr %4, null
  %10 = icmp eq ptr %5, null
  %11 = and i1 %10, %9
  br i1 %11, label %30, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  br i1 %9, label %32, label %42

15:                                               ; preds = %6
  %16 = tail call ptr @build_range_check(i32 noundef %0, ptr noundef %1, ptr noundef nonnull %2, i32 noundef 1, ptr noundef %4, ptr noundef %5)
  %17 = icmp eq ptr %16, null
  br i1 %17, label %234, label %18

18:                                               ; preds = %15
  %19 = load i64, ptr %16, align 8
  %20 = and i64 %19, 65535
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %234, label %22

22:                                               ; preds = %18
  %23 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %16) #25
  %24 = icmp eq ptr %23, null
  br i1 %24, label %25, label %234

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %27, ptr noundef nonnull %16) #24
  %29 = getelementptr inbounds %struct.tree_exp, ptr %28, i64 0, i32 1
  store i32 %0, ptr %29, align 8, !tbaa !17
  br label %234

30:                                               ; preds = %8
  %31 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef 1) #24
  br label %234

32:                                               ; preds = %217, %12
  %33 = phi ptr [ %2, %12 ], [ %218, %217 ]
  %34 = phi ptr [ %5, %12 ], [ %190, %217 ]
  %35 = phi ptr [ %14, %12 ], [ %222, %217 ]
  %36 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %35, ptr noundef %34)
  %37 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 98, ptr noundef %1, ptr noundef nonnull %33, ptr noundef %36)
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %234

39:                                               ; preds = %32
  %40 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %1, ptr noundef nonnull %33, ptr noundef %36) #24
  %41 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 1
  store i32 %0, ptr %41, align 8, !tbaa !17
  br label %234

42:                                               ; preds = %12, %217
  %43 = phi ptr [ %222, %217 ], [ %14, %12 ]
  %44 = phi ptr [ %190, %217 ], [ %5, %12 ]
  %45 = phi ptr [ %219, %217 ], [ %4, %12 ]
  %46 = phi ptr [ %218, %217 ], [ %2, %12 ]
  %47 = phi i1 [ false, %217 ], [ %10, %12 ]
  br i1 %47, label %48, label %55

48:                                               ; preds = %42
  %49 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %43, ptr noundef nonnull %45)
  %50 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 100, ptr noundef %1, ptr noundef nonnull %46, ptr noundef %49)
  %51 = icmp eq ptr %50, null
  br i1 %51, label %52, label %234

52:                                               ; preds = %48
  %53 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %1, ptr noundef nonnull %46, ptr noundef %49) #24
  %54 = getelementptr inbounds %struct.tree_exp, ptr %53, i64 0, i32 1
  store i32 %0, ptr %54, align 8, !tbaa !17
  br label %234

55:                                               ; preds = %42
  %56 = tail call i32 @operand_equal_p(ptr noundef nonnull %45, ptr noundef nonnull %44, i32 noundef 0)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %65, label %58

58:                                               ; preds = %55
  %59 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %43, ptr noundef nonnull %45)
  %60 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 101, ptr noundef %1, ptr noundef nonnull %46, ptr noundef %59)
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %234

62:                                               ; preds = %58
  %63 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %1, ptr noundef nonnull %46, ptr noundef %59) #24
  %64 = getelementptr inbounds %struct.tree_exp, ptr %63, i64 0, i32 1
  store i32 %0, ptr %64, align 8, !tbaa !17
  br label %234

65:                                               ; preds = %55
  %66 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %90, label %68

68:                                               ; preds = %65
  %69 = load i64, ptr %43, align 8
  %70 = and i64 %69, 2097152
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %79

72:                                               ; preds = %68
  %73 = tail call ptr @unsigned_type_for(ptr noundef nonnull %43) #24
  %74 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %73, ptr noundef nonnull %44)
  %75 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %73, ptr noundef nonnull %46)
  %76 = icmp eq ptr %74, null
  br i1 %76, label %77, label %79

77:                                               ; preds = %72
  %78 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef 1) #24
  br label %234

79:                                               ; preds = %68, %72
  %80 = phi ptr [ %75, %72 ], [ %46, %68 ]
  %81 = phi ptr [ %74, %72 ], [ %44, %68 ]
  %82 = getelementptr inbounds %struct.tree_common, ptr %80, i64 0, i32 2
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %83, ptr noundef nonnull %81)
  %85 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 98, ptr noundef %1, ptr noundef nonnull %80, ptr noundef %84)
  %86 = icmp eq ptr %85, null
  br i1 %86, label %87, label %234

87:                                               ; preds = %79
  %88 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %1, ptr noundef nonnull %80, ptr noundef %84) #24
  %89 = getelementptr inbounds %struct.tree_exp, ptr %88, i64 0, i32 1
  store i32 %0, ptr %89, align 8, !tbaa !17
  br label %234

90:                                               ; preds = %65
  %91 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %146, label %93

93:                                               ; preds = %90
  %94 = load i64, ptr %44, align 8
  %95 = and i64 %94, 65535
  %96 = icmp eq i64 %95, 23
  br i1 %96, label %97, label %146

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.tree_type, ptr %43, i64 0, i32 6
  %99 = load i32, ptr %98, align 4
  %100 = and i32 %99, 1023
  %101 = icmp ult i32 %100, 65
  br i1 %101, label %102, label %107

102:                                              ; preds = %97
  %103 = add nsw i32 %100, -1
  %104 = zext i32 %103 to i64
  %105 = shl nsw i64 -1, %104
  %106 = xor i64 %105, -1
  br label %112

107:                                              ; preds = %97
  %108 = add nsw i32 %100, -65
  %109 = zext i32 %108 to i64
  %110 = shl nsw i64 -1, %109
  %111 = xor i64 %110, -1
  br label %112

112:                                              ; preds = %107, %102
  %113 = phi i64 [ %106, %102 ], [ -1, %107 ]
  %114 = phi i64 [ 0, %102 ], [ %111, %107 ]
  %115 = getelementptr inbounds %struct.tree_int_cst, ptr %44, i64 0, i32 1, i32 1
  %116 = load i64, ptr %115, align 8, !tbaa !17
  %117 = icmp eq i64 %116, %114
  br i1 %117, label %118, label %146

118:                                              ; preds = %112
  %119 = getelementptr inbounds %struct.tree_int_cst, ptr %44, i64 0, i32 1
  %120 = load i64, ptr %119, align 8, !tbaa !17
  %121 = icmp eq i64 %120, %113
  br i1 %121, label %122, label %146

122:                                              ; preds = %118
  %123 = load i64, ptr %43, align 8
  %124 = and i64 %123, 2097152
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %141, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.tree_type, ptr %43, i64 0, i32 6
  %128 = tail call ptr @signed_type_for(ptr noundef nonnull %43) #24
  %129 = getelementptr inbounds %struct.tree_type, ptr %128, i64 0, i32 6
  %130 = load i32, ptr %129, align 4
  %131 = and i32 %130, 1023
  %132 = load i32, ptr %127, align 4
  %133 = and i32 %132, 1023
  %134 = icmp eq i32 %131, %133
  br i1 %134, label %138, label %135

135:                                              ; preds = %126
  %136 = zext i32 %133 to i64
  %137 = tail call ptr @build_nonstandard_integer_type(i64 noundef %136, i32 noundef 0) #24
  br label %138

138:                                              ; preds = %126, %135
  %139 = phi ptr [ %137, %135 ], [ %128, %126 ]
  %140 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %139, ptr noundef nonnull %46)
  br label %141

141:                                              ; preds = %122, %138
  %142 = phi ptr [ %139, %138 ], [ %43, %122 ]
  %143 = phi ptr [ %140, %138 ], [ %46, %122 ]
  %144 = tail call ptr @build_int_cst(ptr noundef %142, i64 noundef 0) #24
  %145 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 99, ptr noundef %1, ptr noundef %143, ptr noundef %144)
  br label %234

146:                                              ; preds = %112, %118, %93, %90
  %147 = load i64, ptr %43, align 8
  %148 = trunc i64 %147 to i32
  %149 = and i32 %148, 65534
  %150 = icmp eq i32 %149, 6
  br i1 %150, label %151, label %160

151:                                              ; preds = %146
  %152 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 3), align 8, !tbaa !50
  %153 = getelementptr inbounds %struct.tree_type, ptr %43, i64 0, i32 6
  %154 = load i32, ptr %153, align 4
  %155 = and i32 %154, 1023
  %156 = lshr i32 %148, 21
  %157 = and i32 %156, 1
  %158 = tail call ptr %152(i32 noundef %155, i32 noundef %157) #24
  %159 = load i64, ptr %158, align 8
  br label %160

160:                                              ; preds = %146, %151
  %161 = phi i64 [ %159, %151 ], [ %147, %146 ]
  %162 = phi ptr [ %158, %151 ], [ %43, %146 ]
  %163 = and i64 %161, 65535
  %164 = icmp eq i64 %163, 8
  br i1 %164, label %165, label %185

165:                                              ; preds = %160
  %166 = and i64 %161, 2097152
  %167 = icmp ne i64 %166, 0
  %168 = load i32, ptr @flag_wrapv, align 4
  %169 = icmp ne i32 %168, 0
  %170 = select i1 %167, i1 true, i1 %169
  br i1 %170, label %185, label %171

171:                                              ; preds = %165
  %172 = tail call ptr @unsigned_type_for(ptr noundef nonnull %162) #24
  %173 = getelementptr inbounds %struct.tree_type, ptr %162, i64 0, i32 14
  %174 = load ptr, ptr %173, align 8, !tbaa !17
  %175 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %172, ptr noundef %174)
  %176 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %177 = tail call fastcc ptr @range_binop(i32 noundef 63, ptr noundef null, ptr noundef %175, i32 noundef 1, ptr noundef %176, i32 noundef 1)
  %178 = getelementptr inbounds %struct.tree_type, ptr %162, i64 0, i32 13
  %179 = load ptr, ptr %178, align 8, !tbaa !17
  %180 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %172, ptr noundef %179)
  %181 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %182 = tail call fastcc ptr @range_binop(i32 noundef 102, ptr noundef %181, ptr noundef %180, i32 noundef 1, ptr noundef %177, i32 noundef 1)
  %183 = tail call i32 @integer_zerop(ptr noundef %182) #24
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %234, label %185

185:                                              ; preds = %171, %165, %160
  %186 = phi ptr [ %162, %165 ], [ %172, %171 ], [ %162, %160 ]
  %187 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %186, ptr noundef nonnull %44)
  %188 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %186, ptr noundef nonnull %45)
  %189 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %186, ptr noundef nonnull %46)
  %190 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %187, ptr noundef %188)
  %191 = load i64, ptr %186, align 8
  %192 = trunc i64 %191 to i16
  switch i16 %192, label %223 [
    i16 10, label %193
    i16 12, label %193
  ]

193:                                              ; preds = %185, %185
  %194 = icmp eq ptr %190, null
  br i1 %194, label %234, label %195

195:                                              ; preds = %193
  %196 = load i64, ptr %190, align 8
  %197 = and i64 %196, 134217728
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %234

199:                                              ; preds = %195
  %200 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %201 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %200, ptr noundef %188)
  %202 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %203 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 79, ptr noundef %202, ptr noundef %201)
  %204 = icmp eq ptr %203, null
  br i1 %204, label %205, label %208

205:                                              ; preds = %199
  %206 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %202, ptr noundef %201) #24
  %207 = getelementptr inbounds %struct.tree_exp, ptr %206, i64 0, i32 1
  store i32 %0, ptr %207, align 8, !tbaa !17
  br label %208

208:                                              ; preds = %199, %205
  %209 = phi ptr [ %203, %199 ], [ %206, %205 ]
  %210 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 66, ptr noundef nonnull %186, ptr noundef %189, ptr noundef nonnull %209)
  %211 = icmp eq ptr %210, null
  br i1 %211, label %212, label %217

212:                                              ; preds = %208
  %213 = tail call ptr @build2_stat(i32 noundef 66, ptr noundef nonnull %186, ptr noundef %189, ptr noundef nonnull %209) #24
  br label %214

214:                                              ; preds = %212, %232
  %215 = phi ptr [ %233, %232 ], [ %213, %212 ]
  %216 = getelementptr inbounds %struct.tree_exp, ptr %215, i64 0, i32 1
  store i32 %0, ptr %216, align 8, !tbaa !17
  br label %217

217:                                              ; preds = %214, %229, %208
  %218 = phi ptr [ %210, %208 ], [ %230, %229 ], [ %215, %214 ]
  %219 = tail call ptr @build_int_cst(ptr noundef nonnull %186, i64 noundef 0) #24
  %220 = icmp eq ptr %219, null
  %221 = getelementptr inbounds %struct.tree_common, ptr %218, i64 0, i32 2
  %222 = load ptr, ptr %221, align 8, !tbaa !17
  br i1 %220, label %32, label %42

223:                                              ; preds = %185
  %224 = icmp eq ptr %190, null
  br i1 %224, label %234, label %225

225:                                              ; preds = %223
  %226 = load i64, ptr %190, align 8
  %227 = and i64 %226, 134217728
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %234

229:                                              ; preds = %225
  %230 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %186, ptr noundef %189, ptr noundef %188)
  %231 = icmp eq ptr %230, null
  br i1 %231, label %232, label %217

232:                                              ; preds = %229
  %233 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef nonnull %186, ptr noundef %189, ptr noundef %188) #24
  br label %214

234:                                              ; preds = %223, %225, %193, %195, %171, %141, %77, %87, %79, %62, %58, %52, %48, %39, %32, %25, %22, %18, %15, %30
  %235 = phi ptr [ %31, %30 ], [ %145, %141 ], [ null, %15 ], [ %16, %18 ], [ %23, %22 ], [ %28, %25 ], [ %37, %32 ], [ %40, %39 ], [ %50, %48 ], [ %53, %52 ], [ %60, %58 ], [ %63, %62 ], [ %78, %77 ], [ %85, %79 ], [ %88, %87 ], [ null, %171 ], [ null, %195 ], [ null, %193 ], [ null, %225 ], [ null, %223 ]
  ret ptr %235
}

declare ptr @build_nonstandard_integer_type(i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @const_binop(i32 noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #10 {
  %4 = alloca %struct.real_value, align 8
  %5 = alloca %struct.real_value, align 8
  %6 = alloca %struct.real_value, align 8
  %7 = alloca %struct.real_value, align 8
  %8 = alloca %struct.fixed_value, align 8
  %9 = alloca %struct.fixed_value, align 16
  %10 = alloca %struct.fixed_value, align 8
  %11 = icmp ne ptr %1, null
  %12 = icmp ne ptr %2, null
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %392

14:                                               ; preds = %3
  %15 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %1) #24
  %16 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %2) #24
  %17 = load i64, ptr %15, align 8
  %18 = trunc i64 %17 to i16
  switch i16 %18, label %327 [
    i16 23, label %19
    i16 24, label %21
    i16 25, label %192
    i16 26, label %225
  ]

19:                                               ; preds = %14
  %20 = tail call ptr @int_const_binop(i32 noundef %0, ptr noundef nonnull %15, ptr noundef %16, i32 noundef 0)
  br label %392

21:                                               ; preds = %14
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #24
  switch i32 %0, label %190 [
    i32 63, label %22
    i32 64, label %22
    i32 65, label %22
    i32 75, label %22
    i32 80, label %22
    i32 81, label %22
  ]

22:                                               ; preds = %21, %21, %21, %21, %21, %21
  %23 = getelementptr inbounds %struct.tree_real_cst, ptr %15, i64 0, i32 1
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %4, ptr noundef nonnull align 8 dereferenceable(32) %24, i64 32, i1 false), !tbaa.struct !29
  %25 = getelementptr inbounds %struct.tree_real_cst, ptr %16, i64 0, i32 1
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %5, ptr noundef nonnull align 8 dereferenceable(32) %26, i64 32, i1 false), !tbaa.struct !29
  %27 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = load i64, ptr %28, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 14
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = tail call i32 @vector_type_mode(ptr noundef nonnull %28) #24
  br label %39

34:                                               ; preds = %22
  %35 = getelementptr inbounds %struct.tree_type, ptr %28, i64 0, i32 6
  %36 = load i32, ptr %35, align 4
  %37 = lshr i32 %36, 16
  %38 = and i32 %37, 255
  br label %39

39:                                               ; preds = %34, %32
  %40 = phi i32 [ %33, %32 ], [ %38, %34 ]
  %41 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %72, label %43

43:                                               ; preds = %39
  %44 = zext i32 %40 to i64
  %45 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %44
  %46 = load i8, ptr %45, align 1, !tbaa !17
  switch i8 %46, label %72 [
    i8 8, label %47
    i8 9, label %47
    i8 11, label %47
    i8 17, label %47
  ]

47:                                               ; preds = %43, %43, %43, %43
  %48 = and i8 %46, -2
  %49 = icmp eq i8 %48, 8
  br i1 %49, label %54, label %50

50:                                               ; preds = %47
  %51 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %44
  %52 = load i8, ptr %51, align 1, !tbaa !17
  %53 = zext i8 %52 to i32
  br label %54

54:                                               ; preds = %50, %47
  %55 = phi i32 [ %40, %47 ], [ %53, %50 ]
  %56 = add i32 %55, -38
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %57
  %59 = load ptr, ptr %58, align 8, !tbaa !6
  %60 = getelementptr inbounds %struct.real_format, ptr %59, i64 0, i32 11
  %61 = load i8, ptr %60, align 2, !tbaa !36
  %62 = icmp eq i8 %61, 0
  %63 = load i32, ptr @flag_finite_math_only, align 4
  %64 = icmp ne i32 %63, 0
  %65 = select i1 %62, i1 true, i1 %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %54
  %67 = call zeroext i8 @real_isnan(ptr noundef nonnull %4) #24
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %190

69:                                               ; preds = %66
  %70 = call zeroext i8 @real_isnan(ptr noundef nonnull %5) #24
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %190

72:                                               ; preds = %43, %69, %54, %39
  %73 = icmp eq i32 %0, 75
  br i1 %73, label %74, label %100

74:                                               ; preds = %72
  %75 = call zeroext i8 @real_compare(i32 noundef 101, ptr noundef nonnull %5, ptr noundef nonnull @dconst0) #24
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %100, label %77

77:                                               ; preds = %74
  %78 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %190

80:                                               ; preds = %77
  %81 = zext i32 %40 to i64
  %82 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %81
  %83 = load i8, ptr %82, align 1, !tbaa !17
  switch i8 %83, label %190 [
    i8 8, label %84
    i8 9, label %84
    i8 11, label %84
    i8 17, label %84
  ]

84:                                               ; preds = %80, %80, %80, %80
  %85 = and i8 %83, -2
  %86 = icmp eq i8 %85, 8
  br i1 %86, label %91, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %81
  %89 = load i8, ptr %88, align 1, !tbaa !17
  %90 = zext i8 %89 to i32
  br label %91

91:                                               ; preds = %87, %84
  %92 = phi i32 [ %40, %84 ], [ %90, %87 ]
  %93 = add i32 %92, -38
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %94
  %96 = load ptr, ptr %95, align 8, !tbaa !6
  %97 = getelementptr inbounds %struct.real_format, ptr %96, i64 0, i32 12
  %98 = load i8, ptr %97, align 1, !tbaa !34
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %190, label %100

100:                                              ; preds = %91, %74, %72
  %101 = call zeroext i8 @real_isnan(ptr noundef nonnull %4) #24
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %190

103:                                              ; preds = %100
  %104 = call zeroext i8 @real_isnan(ptr noundef nonnull %5) #24
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %106, label %190

106:                                              ; preds = %103
  %107 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %6, i32 noundef %0, ptr noundef nonnull %4, ptr noundef nonnull %5) #24
  call void @real_convert(ptr noundef nonnull %7, i32 noundef %40, ptr noundef nonnull %6) #24
  %108 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %139, label %110

110:                                              ; preds = %106
  %111 = zext i32 %40 to i64
  %112 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %111
  %113 = load i8, ptr %112, align 1, !tbaa !17
  switch i8 %113, label %139 [
    i8 8, label %114
    i8 9, label %114
    i8 11, label %114
    i8 17, label %114
  ]

114:                                              ; preds = %110, %110, %110, %110
  %115 = and i8 %113, -2
  %116 = icmp eq i8 %115, 8
  br i1 %116, label %121, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %111
  %119 = load i8, ptr %118, align 1, !tbaa !17
  %120 = zext i8 %119 to i32
  br label %121

121:                                              ; preds = %117, %114
  %122 = phi i32 [ %40, %114 ], [ %120, %117 ]
  %123 = add i32 %122, -38
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %124
  %126 = load ptr, ptr %125, align 8, !tbaa !6
  %127 = getelementptr inbounds %struct.real_format, ptr %126, i64 0, i32 12
  %128 = load i8, ptr %127, align 1, !tbaa !34
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %139, label %130

130:                                              ; preds = %121
  %131 = call zeroext i8 @real_isinf(ptr noundef nonnull %7) #24
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %139, label %133

133:                                              ; preds = %130
  %134 = call zeroext i8 @real_isinf(ptr noundef nonnull %4) #24
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %133
  %137 = call zeroext i8 @real_isinf(ptr noundef nonnull %5) #24
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %190, label %139

139:                                              ; preds = %110, %136, %133, %130, %121, %106
  %140 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %176

142:                                              ; preds = %139
  %143 = zext i32 %40 to i64
  %144 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %143
  %145 = load i8, ptr %144, align 1, !tbaa !17
  switch i8 %145, label %181 [
    i8 8, label %146
    i8 9, label %146
    i8 11, label %146
    i8 17, label %146
  ]

146:                                              ; preds = %142, %142, %142, %142
  %147 = and i8 %145, -2
  %148 = icmp eq i8 %147, 8
  br i1 %148, label %156, label %149

149:                                              ; preds = %146
  %150 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %143
  %151 = load i8, ptr %150, align 1, !tbaa !17
  %152 = zext i8 %151 to i64
  %153 = add nuw nsw i64 %152, 4294967258
  %154 = and i64 %153, 4294967295
  %155 = zext i8 %151 to i32
  br label %159

156:                                              ; preds = %146
  %157 = add i32 %40, -38
  %158 = zext i32 %157 to i64
  br label %159

159:                                              ; preds = %149, %156
  %160 = phi i64 [ %158, %156 ], [ %154, %149 ]
  %161 = phi i32 [ %40, %156 ], [ %155, %149 ]
  %162 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %160
  %163 = load ptr, ptr %162, align 8, !tbaa !6
  %164 = getelementptr inbounds %struct.real_format, ptr %163, i64 0, i32 4
  %165 = load i32, ptr %164, align 8, !tbaa !51
  %166 = add i32 %161, -38
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %167
  %169 = load ptr, ptr %168, align 8, !tbaa !6
  %170 = getelementptr inbounds %struct.real_format, ptr %169, i64 0, i32 3
  %171 = load i32, ptr %170, align 4, !tbaa !52
  %172 = icmp sge i32 %165, %171
  %173 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %174 = icmp ne i32 %173, 0
  %175 = select i1 %172, i1 true, i1 %174
  br i1 %175, label %181, label %176

176:                                              ; preds = %159, %139
  %177 = icmp eq i8 %107, 0
  br i1 %177, label %178, label %190

178:                                              ; preds = %176
  %179 = call zeroext i8 @real_identical(ptr noundef nonnull %7, ptr noundef nonnull %6) #24
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %190, label %181

181:                                              ; preds = %142, %178, %159
  %182 = call ptr @build_real(ptr noundef nonnull %28, ptr noundef nonnull byval(%struct.real_value) align 8 %7) #24
  %183 = load i64, ptr %15, align 8
  %184 = load i64, ptr %16, align 8
  %185 = or i64 %184, %183
  %186 = and i64 %185, 134217728
  %187 = load i64, ptr %182, align 8
  %188 = and i64 %187, -134217729
  %189 = or i64 %188, %186
  store i64 %189, ptr %182, align 8
  br label %190

190:                                              ; preds = %176, %178, %136, %103, %100, %77, %91, %80, %66, %69, %21, %181
  %191 = phi ptr [ %182, %181 ], [ null, %21 ], [ null, %69 ], [ null, %66 ], [ null, %80 ], [ null, %91 ], [ null, %77 ], [ %15, %100 ], [ %16, %103 ], [ null, %136 ], [ null, %178 ], [ null, %176 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #24
  br label %392

192:                                              ; preds = %14
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %10) #24
  switch i32 %0, label %223 [
    i32 63, label %193
    i32 64, label %193
    i32 65, label %193
    i32 67, label %193
    i32 83, label %196
    i32 84, label %196
  ]

193:                                              ; preds = %192, %192, %192, %192
  %194 = getelementptr inbounds %struct.tree_fixed_cst, ptr %16, i64 0, i32 1
  %195 = load ptr, ptr %194, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 16 dereferenceable(24) %9, ptr noundef nonnull align 8 dereferenceable(24) %195, i64 24, i1 false), !tbaa.struct !53
  br label %200

196:                                              ; preds = %192, %192
  %197 = getelementptr inbounds %struct.tree_int_cst, ptr %16, i64 0, i32 1
  %198 = load <2 x i64>, ptr %197, align 8, !tbaa !17
  store <2 x i64> %198, ptr %9, align 16, !tbaa !24
  %199 = getelementptr inbounds %struct.fixed_value, ptr %9, i64 0, i32 1
  store i32 16, ptr %199, align 16, !tbaa !30
  br label %200

200:                                              ; preds = %196, %193
  %201 = getelementptr inbounds %struct.tree_fixed_cst, ptr %15, i64 0, i32 1
  %202 = load ptr, ptr %201, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %8, ptr noundef nonnull align 8 dereferenceable(24) %202, i64 24, i1 false), !tbaa.struct !53
  %203 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %204 = load ptr, ptr %203, align 8, !tbaa !17
  %205 = load i64, ptr %204, align 8
  %206 = trunc i64 %205 to i32
  %207 = lshr i32 %206, 31
  %208 = trunc i32 %207 to i8
  %209 = call zeroext i8 @fixed_arithmetic(ptr noundef nonnull %10, i32 noundef %0, ptr noundef nonnull %8, ptr noundef nonnull %9, i8 noundef zeroext %208) #24
  %210 = call ptr @build_fixed(ptr noundef nonnull %204, ptr noundef nonnull byval(%struct.fixed_value) align 8 %10) #24
  %211 = zext i8 %209 to i32
  %212 = load i64, ptr %15, align 8
  %213 = load i64, ptr %16, align 8
  %214 = or i64 %213, %212
  %215 = trunc i64 %214 to i32
  %216 = lshr i32 %215, 27
  %217 = and i32 %216, 1
  %218 = or i32 %217, %211
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %223, label %220

220:                                              ; preds = %200
  %221 = load i64, ptr %210, align 8
  %222 = or i64 %221, 134217728
  store i64 %222, ptr %210, align 8
  br label %223

223:                                              ; preds = %200, %220, %192
  %224 = phi ptr [ null, %192 ], [ %210, %220 ], [ %210, %200 ]
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %8) #24
  br label %392

225:                                              ; preds = %14
  %226 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %227 = load ptr, ptr %226, align 8, !tbaa !17
  %228 = getelementptr inbounds %struct.tree_complex, ptr %15, i64 0, i32 1
  %229 = load ptr, ptr %228, align 8, !tbaa !17
  %230 = getelementptr inbounds %struct.tree_complex, ptr %15, i64 0, i32 2
  %231 = load ptr, ptr %230, align 8, !tbaa !17
  %232 = getelementptr inbounds %struct.tree_complex, ptr %16, i64 0, i32 1
  %233 = load ptr, ptr %232, align 8, !tbaa !17
  %234 = getelementptr inbounds %struct.tree_complex, ptr %16, i64 0, i32 2
  %235 = load ptr, ptr %234, align 8, !tbaa !17
  switch i32 %0, label %392 [
    i32 63, label %236
    i32 64, label %236
    i32 65, label %239
    i32 75, label %256
    i32 67, label %266
    i32 68, label %266
    i32 69, label %266
    i32 70, label %266
  ]

236:                                              ; preds = %225, %225
  %237 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %229, ptr noundef %233)
  %238 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %231, ptr noundef %235)
  br label %317

239:                                              ; preds = %225
  %240 = load i64, ptr %227, align 8
  %241 = and i64 %240, 65535
  %242 = icmp eq i64 %241, 13
  br i1 %242, label %243, label %249

243:                                              ; preds = %239
  %244 = getelementptr inbounds %struct.tree_common, ptr %227, i64 0, i32 2
  %245 = load ptr, ptr %244, align 8, !tbaa !17
  %246 = load i64, ptr %245, align 8
  %247 = and i64 %246, 65535
  %248 = icmp eq i64 %247, 9
  br i1 %248, label %392, label %249

249:                                              ; preds = %243, %239
  %250 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %233)
  %251 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %235)
  %252 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %250, ptr noundef %251)
  %253 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %235)
  %254 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %233)
  %255 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %253, ptr noundef %254)
  br label %317

256:                                              ; preds = %225
  %257 = load i64, ptr %227, align 8
  %258 = and i64 %257, 65535
  %259 = icmp eq i64 %258, 13
  br i1 %259, label %260, label %266

260:                                              ; preds = %256
  %261 = getelementptr inbounds %struct.tree_common, ptr %227, i64 0, i32 2
  %262 = load ptr, ptr %261, align 8, !tbaa !17
  %263 = load i64, ptr %262, align 8
  %264 = and i64 %263, 65535
  %265 = icmp eq i64 %264, 9
  br i1 %265, label %392, label %266

266:                                              ; preds = %256, %260, %225, %225, %225, %225
  %267 = load i32, ptr @flag_complex_method, align 4, !tbaa !21
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %281

269:                                              ; preds = %266
  %270 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %233, ptr noundef %233)
  %271 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %235, ptr noundef %235)
  %272 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %270, ptr noundef %271)
  %273 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %233)
  %274 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %235)
  %275 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %273, ptr noundef %274)
  %276 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %233)
  %277 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %235)
  %278 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %276, ptr noundef %277)
  %279 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %275, ptr noundef %272)
  %280 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %278, ptr noundef %272)
  br label %317

281:                                              ; preds = %266
  %282 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %283 = getelementptr inbounds %struct.tree_common, ptr %227, i64 0, i32 2
  %284 = load ptr, ptr %283, align 8, !tbaa !17
  %285 = tail call ptr @fold_abs_const(ptr noundef %233, ptr noundef %284)
  %286 = load ptr, ptr %283, align 8, !tbaa !17
  %287 = tail call ptr @fold_abs_const(ptr noundef %235, ptr noundef %286)
  %288 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 97, ptr noundef %282, ptr noundef %285, ptr noundef %287)
  %289 = icmp eq ptr %288, null
  br i1 %289, label %290, label %293

290:                                              ; preds = %281
  %291 = tail call ptr @build2_stat(i32 noundef 97, ptr noundef %282, ptr noundef %285, ptr noundef %287) #24
  %292 = getelementptr inbounds %struct.tree_exp, ptr %291, i64 0, i32 1
  store i32 0, ptr %292, align 8, !tbaa !17
  br label %293

293:                                              ; preds = %281, %290
  %294 = phi ptr [ %288, %281 ], [ %291, %290 ]
  %295 = tail call i32 @integer_nonzerop(ptr noundef nonnull %294) #24
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %307, label %297

297:                                              ; preds = %293
  %298 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %233, ptr noundef %235)
  %299 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %233, ptr noundef %298)
  %300 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %235, ptr noundef %299)
  %301 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %298)
  %302 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %301, ptr noundef %231)
  %303 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %302, ptr noundef %300)
  %304 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %298)
  %305 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %304, ptr noundef %229)
  %306 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %305, ptr noundef %300)
  br label %317

307:                                              ; preds = %293
  %308 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %235, ptr noundef %233)
  %309 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %235, ptr noundef %308)
  %310 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %233, ptr noundef %309)
  %311 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %231, ptr noundef %308)
  %312 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef %311, ptr noundef %229)
  %313 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %312, ptr noundef %310)
  %314 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef %229, ptr noundef %308)
  %315 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %231, ptr noundef %314)
  %316 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %315, ptr noundef %310)
  br label %317

317:                                              ; preds = %297, %307, %269, %249, %236
  %318 = phi ptr [ %280, %269 ], [ %255, %249 ], [ %238, %236 ], [ %306, %297 ], [ %316, %307 ]
  %319 = phi ptr [ %279, %269 ], [ %252, %249 ], [ %237, %236 ], [ %303, %297 ], [ %313, %307 ]
  %320 = icmp ne ptr %319, null
  %321 = icmp ne ptr %318, null
  %322 = select i1 %320, i1 %321, i1 false
  br i1 %322, label %325, label %323

323:                                              ; preds = %317
  %324 = load i64, ptr %15, align 8
  br label %327

325:                                              ; preds = %317
  %326 = tail call ptr @build_complex(ptr noundef %227, ptr noundef nonnull %319, ptr noundef nonnull %318) #24
  br label %392

327:                                              ; preds = %323, %14
  %328 = phi i64 [ %324, %323 ], [ %17, %14 ]
  %329 = and i64 %328, 65535
  %330 = icmp eq i64 %329, 27
  br i1 %330, label %331, label %392

331:                                              ; preds = %327
  %332 = getelementptr inbounds %struct.tree_common, ptr %15, i64 0, i32 2
  %333 = load ptr, ptr %332, align 8, !tbaa !17
  %334 = getelementptr inbounds %struct.tree_type, ptr %333, i64 0, i32 6
  %335 = load i32, ptr %334, align 4
  %336 = and i32 %335, 1023
  %337 = zext i32 %336 to i64
  %338 = shl nuw i64 1, %337
  %339 = trunc i64 %338 to i32
  %340 = load i64, ptr %16, align 8
  %341 = and i64 %340, 65535
  %342 = icmp eq i64 %341, 27
  br i1 %342, label %343, label %392

343:                                              ; preds = %331
  %344 = icmp sgt i32 %339, 0
  br i1 %344, label %345, label %388

345:                                              ; preds = %343
  %346 = getelementptr inbounds %struct.tree_vector, ptr %16, i64 0, i32 1
  %347 = load ptr, ptr %346, align 8, !tbaa !17
  %348 = getelementptr inbounds %struct.tree_vector, ptr %15, i64 0, i32 1
  %349 = load ptr, ptr %348, align 8, !tbaa !17
  %350 = getelementptr inbounds %struct.tree_common, ptr %333, i64 0, i32 2
  br label %351

351:                                              ; preds = %345, %384
  %352 = phi ptr [ null, %345 ], [ %385, %384 ]
  %353 = phi ptr [ %347, %345 ], [ %380, %384 ]
  %354 = phi ptr [ %349, %345 ], [ %367, %384 ]
  %355 = phi i32 [ 0, %345 ], [ %386, %384 ]
  %356 = icmp eq ptr %354, null
  br i1 %356, label %357, label %361

357:                                              ; preds = %351
  %358 = load ptr, ptr %350, align 8, !tbaa !17
  %359 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %360 = tail call fastcc ptr @fold_convert_const(i32 noundef 116, ptr noundef %358, ptr noundef %359)
  br label %366

361:                                              ; preds = %351
  %362 = getelementptr inbounds %struct.tree_list, ptr %354, i64 0, i32 2
  %363 = load ptr, ptr %362, align 8, !tbaa !17
  %364 = getelementptr inbounds %struct.tree_common, ptr %354, i64 0, i32 1
  %365 = load ptr, ptr %364, align 8, !tbaa !17
  br label %366

366:                                              ; preds = %361, %357
  %367 = phi ptr [ %365, %361 ], [ null, %357 ]
  %368 = phi ptr [ %363, %361 ], [ %360, %357 ]
  %369 = icmp eq ptr %353, null
  br i1 %369, label %370, label %374

370:                                              ; preds = %366
  %371 = load ptr, ptr %350, align 8, !tbaa !17
  %372 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %373 = tail call fastcc ptr @fold_convert_const(i32 noundef 116, ptr noundef %371, ptr noundef %372)
  br label %379

374:                                              ; preds = %366
  %375 = getelementptr inbounds %struct.tree_list, ptr %353, i64 0, i32 2
  %376 = load ptr, ptr %375, align 8, !tbaa !17
  %377 = getelementptr inbounds %struct.tree_common, ptr %353, i64 0, i32 1
  %378 = load ptr, ptr %377, align 8, !tbaa !17
  br label %379

379:                                              ; preds = %374, %370
  %380 = phi ptr [ %378, %374 ], [ null, %370 ]
  %381 = phi ptr [ %376, %374 ], [ %373, %370 ]
  %382 = tail call fastcc ptr @const_binop(i32 noundef %0, ptr noundef %368, ptr noundef %381)
  %383 = icmp eq ptr %382, null
  br i1 %383, label %392, label %384

384:                                              ; preds = %379
  %385 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef nonnull %382, ptr noundef %352) #24
  %386 = add nuw nsw i32 %355, 1
  %387 = icmp eq i32 %386, %339
  br i1 %387, label %388, label %351, !llvm.loop !54

388:                                              ; preds = %384, %343
  %389 = phi ptr [ null, %343 ], [ %385, %384 ]
  %390 = tail call ptr @nreverse(ptr noundef %389) #24
  %391 = tail call ptr @build_vector(ptr noundef %333, ptr noundef %390) #24
  br label %392

392:                                              ; preds = %379, %225, %260, %243, %325, %327, %388, %331, %3, %223, %190, %19
  %393 = phi ptr [ %20, %19 ], [ %191, %190 ], [ %224, %223 ], [ null, %3 ], [ %391, %388 ], [ null, %331 ], [ null, %327 ], [ null, %225 ], [ null, %260 ], [ null, %243 ], [ %326, %325 ], [ null, %379 ]
  ret ptr %393
}

declare zeroext i8 @real_arithmetic(ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_abs_const(ptr noundef readonly %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = alloca %struct.real_value, align 8
  %4 = load i64, ptr %0, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %55 [
    i16 23, label %6
    i16 24, label %47
  ]

6:                                                ; preds = %2
  %7 = load i64, ptr %1, align 8
  %8 = and i64 %7, 2097152
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %56

10:                                               ; preds = %6
  %11 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 15), align 8, !tbaa !6
  %12 = getelementptr inbounds %struct.tree_int_cst, ptr %11, i64 0, i32 1
  %13 = getelementptr inbounds %struct.tree_int_cst, ptr %11, i64 0, i32 1, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  %17 = load i64, ptr %16, align 8, !tbaa !17
  %18 = icmp slt i64 %14, %17
  br i1 %18, label %56, label %19

19:                                               ; preds = %10
  %20 = icmp eq i64 %14, %17
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  %22 = load i64, ptr %12, align 8, !tbaa !17
  %23 = load i64, ptr %15, align 8, !tbaa !17
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %56, label %27

25:                                               ; preds = %19
  %26 = load i64, ptr %15, align 8, !tbaa !17
  br label %27

27:                                               ; preds = %25, %21
  %28 = phi i64 [ %26, %25 ], [ %23, %21 ]
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27
  %31 = sub nsw i64 0, %17
  %32 = icmp eq i64 %17, -9223372036854775808
  %33 = zext i1 %32 to i32
  br label %37

34:                                               ; preds = %27
  %35 = sub i64 0, %28
  %36 = xor i64 %17, -1
  br label %37

37:                                               ; preds = %30, %34
  %38 = phi i64 [ 0, %30 ], [ %35, %34 ]
  %39 = phi i64 [ %31, %30 ], [ %36, %34 ]
  %40 = phi i32 [ %33, %30 ], [ 0, %34 ]
  %41 = trunc i64 %4 to i32
  %42 = lshr i32 %41, 27
  %43 = and i32 %42, 1
  %44 = or i32 %40, %43
  %45 = trunc i32 %44 to i8
  %46 = tail call ptr @force_fit_type_double(ptr noundef nonnull %1, i64 noundef %38, i64 noundef %39, i32 noundef -1, i8 noundef zeroext %45)
  br label %56

47:                                               ; preds = %2
  %48 = getelementptr inbounds %struct.tree_real_cst, ptr %0, i64 0, i32 1
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  %50 = tail call zeroext i8 @real_isneg(ptr noundef %49) #24
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %47
  %53 = load ptr, ptr %48, align 8, !tbaa !17
  call void @real_arithmetic2(ptr nonnull sret(%struct.real_value) align 8 %3, i32 noundef 79, ptr noundef %53, ptr noundef null) #24
  %54 = call ptr @build_real(ptr noundef %1, ptr noundef nonnull byval(%struct.real_value) align 8 %3) #24
  br label %56

55:                                               ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 15867, ptr noundef nonnull @.str.1) #24
  br label %56

56:                                               ; preds = %47, %10, %21, %6, %52, %37, %55
  %57 = phi ptr [ null, %55 ], [ %54, %52 ], [ %46, %37 ], [ %0, %6 ], [ %0, %21 ], [ %0, %10 ], [ %0, %47 ]
  ret ptr %57
}

declare i32 @integer_nonzerop(ptr noundef) local_unnamed_addr #3

declare ptr @nreverse(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @range_successor(ptr noundef %0) unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 14
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef %11, i32 noundef 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %36

14:                                               ; preds = %1, %9
  %15 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %16 = icmp eq ptr %15, null
  br i1 %16, label %32, label %17

17:                                               ; preds = %14
  %18 = load ptr, ptr %2, align 8, !tbaa !17
  %19 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %18, ptr noundef nonnull %15)
  %20 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 63, ptr noundef %18, ptr noundef nonnull %0, ptr noundef %19)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef %18, ptr noundef nonnull %0, ptr noundef %19) #24
  %24 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 1
  store i32 0, ptr %24, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %17, %22
  %26 = phi ptr [ %20, %17 ], [ %23, %22 ]
  %27 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %26) #24
  %28 = load i64, ptr %27, align 8
  %29 = and i64 %28, 65535
  %30 = icmp eq i64 %29, 23
  %31 = select i1 %30, ptr %27, ptr null
  br label %36

32:                                               ; preds = %14
  %33 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 63), align 4, !tbaa !17
  %34 = icmp eq i32 %33, 5
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

36:                                               ; preds = %32, %25, %9
  %37 = phi ptr [ null, %9 ], [ %31, %25 ], [ null, %32 ]
  ret ptr %37
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @range_predecessor(ptr noundef %0) unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %3 = load ptr, ptr %2, align 8, !tbaa !17
  %4 = load i64, ptr %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = and i32 %5, 65535
  %7 = add nsw i32 %6, -6
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %9, label %14

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 13
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef %11, i32 noundef 0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %36

14:                                               ; preds = %1, %9
  %15 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %16 = icmp eq ptr %15, null
  br i1 %16, label %32, label %17

17:                                               ; preds = %14
  %18 = load ptr, ptr %2, align 8, !tbaa !17
  %19 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %18, ptr noundef nonnull %15)
  %20 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef %18, ptr noundef nonnull %0, ptr noundef %19)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %18, ptr noundef nonnull %0, ptr noundef %19) #24
  %24 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 1
  store i32 0, ptr %24, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %17, %22
  %26 = phi ptr [ %20, %17 ], [ %23, %22 ]
  %27 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %26) #24
  %28 = load i64, ptr %27, align 8
  %29 = and i64 %28, 65535
  %30 = icmp eq i64 %29, 23
  %31 = select i1 %30, ptr %27, ptr null
  br label %36

32:                                               ; preds = %14
  %33 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 64), align 4, !tbaa !17
  %34 = icmp eq i32 %33, 5
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 4625, ptr noundef nonnull @.str.1) #24
  unreachable

36:                                               ; preds = %32, %25, %9
  %37 = phi ptr [ null, %9 ], [ %31, %25 ], [ null, %32 ]
  ret ptr %37
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @fold_real_zero_addition_p(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = tail call i32 @real_zerop(ptr noundef %1) #24
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %867, label %6

6:                                                ; preds = %3
  %7 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %8 = icmp eq i32 %7, 0
  %9 = load i64, ptr %0, align 8
  br i1 %8, label %291, label %10

10:                                               ; preds = %6
  %11 = and i64 %9, 65535
  %12 = icmp eq i64 %11, 14
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %15 = load i64, ptr %0, align 8
  br label %21

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = lshr i32 %18, 16
  %20 = and i32 %19, 255
  br label %21

21:                                               ; preds = %16, %13
  %22 = phi i64 [ %15, %13 ], [ %9, %16 ]
  %23 = phi i32 [ %14, %13 ], [ %20, %16 ]
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %24
  %26 = load i8, ptr %25, align 1, !tbaa !17
  %27 = icmp eq i8 %26, 8
  br i1 %27, label %82, label %28

28:                                               ; preds = %21
  %29 = and i64 %22, 65535
  %30 = icmp eq i64 %29, 14
  br i1 %30, label %31, label %34

31:                                               ; preds = %28
  %32 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %33 = load i64, ptr %0, align 8
  br label %39

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %36 = load i32, ptr %35, align 4
  %37 = lshr i32 %36, 16
  %38 = and i32 %37, 255
  br label %39

39:                                               ; preds = %34, %31
  %40 = phi i64 [ %33, %31 ], [ %22, %34 ]
  %41 = phi i32 [ %32, %31 ], [ %38, %34 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !17
  %45 = icmp eq i8 %44, 9
  br i1 %45, label %82, label %46

46:                                               ; preds = %39
  %47 = and i64 %40, 65535
  %48 = icmp eq i64 %47, 14
  br i1 %48, label %49, label %52

49:                                               ; preds = %46
  %50 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %51 = load i64, ptr %0, align 8
  br label %57

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %54 = load i32, ptr %53, align 4
  %55 = lshr i32 %54, 16
  %56 = and i32 %55, 255
  br label %57

57:                                               ; preds = %52, %49
  %58 = phi i64 [ %51, %49 ], [ %40, %52 ]
  %59 = phi i32 [ %50, %49 ], [ %56, %52 ]
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %60
  %62 = load i8, ptr %61, align 1, !tbaa !17
  %63 = icmp eq i8 %62, 11
  br i1 %63, label %82, label %64

64:                                               ; preds = %57
  %65 = and i64 %58, 65535
  %66 = icmp eq i64 %65, 14
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %69 = load i64, ptr %0, align 8
  br label %75

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %72 = load i32, ptr %71, align 4
  %73 = lshr i32 %72, 16
  %74 = and i32 %73, 255
  br label %75

75:                                               ; preds = %70, %67
  %76 = phi i64 [ %69, %67 ], [ %58, %70 ]
  %77 = phi i32 [ %68, %67 ], [ %74, %70 ]
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %78
  %80 = load i8, ptr %79, align 1, !tbaa !17
  %81 = icmp eq i8 %80, 17
  br i1 %81, label %82, label %291

82:                                               ; preds = %75, %57, %39, %21
  %83 = phi i64 [ %58, %57 ], [ %40, %39 ], [ %22, %21 ], [ %76, %75 ]
  %84 = and i64 %83, 65535
  %85 = icmp eq i64 %84, 14
  br i1 %85, label %86, label %89

86:                                               ; preds = %82
  %87 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %88 = load i64, ptr %0, align 8
  br label %94

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %91 = load i32, ptr %90, align 4
  %92 = lshr i32 %91, 16
  %93 = and i32 %92, 255
  br label %94

94:                                               ; preds = %89, %86
  %95 = phi i64 [ %88, %86 ], [ %83, %89 ]
  %96 = phi i32 [ %87, %86 ], [ %93, %89 ]
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %97
  %99 = load i8, ptr %98, align 1, !tbaa !17
  %100 = icmp eq i8 %99, 8
  br i1 %100, label %119, label %101

101:                                              ; preds = %94
  %102 = and i64 %95, 65535
  %103 = icmp eq i64 %102, 14
  br i1 %103, label %104, label %107

104:                                              ; preds = %101
  %105 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %106 = load i64, ptr %0, align 8
  br label %112

107:                                              ; preds = %101
  %108 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %109 = load i32, ptr %108, align 4
  %110 = lshr i32 %109, 16
  %111 = and i32 %110, 255
  br label %112

112:                                              ; preds = %107, %104
  %113 = phi i64 [ %106, %104 ], [ %95, %107 ]
  %114 = phi i32 [ %105, %104 ], [ %111, %107 ]
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !17
  %118 = icmp eq i8 %117, 9
  br i1 %118, label %119, label %130

119:                                              ; preds = %112, %94
  %120 = phi i64 [ %113, %112 ], [ %95, %94 ]
  %121 = and i64 %120, 65535
  %122 = icmp eq i64 %121, 14
  br i1 %122, label %123, label %125

123:                                              ; preds = %119
  %124 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %146

125:                                              ; preds = %119
  %126 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %127 = load i32, ptr %126, align 4
  %128 = lshr i32 %127, 16
  %129 = and i32 %128, 255
  br label %146

130:                                              ; preds = %112
  %131 = and i64 %113, 65535
  %132 = icmp eq i64 %131, 14
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %140

135:                                              ; preds = %130
  %136 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %137 = load i32, ptr %136, align 4
  %138 = lshr i32 %137, 16
  %139 = and i32 %138, 255
  br label %140

140:                                              ; preds = %135, %133
  %141 = phi i32 [ %134, %133 ], [ %139, %135 ]
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %142
  %144 = load i8, ptr %143, align 1, !tbaa !17
  %145 = zext i8 %144 to i32
  br label %146

146:                                              ; preds = %123, %125, %140
  %147 = phi i32 [ %145, %140 ], [ %124, %123 ], [ %129, %125 ]
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %148
  %150 = load i8, ptr %149, align 1, !tbaa !17
  %151 = icmp eq i8 %150, 9
  %152 = load i64, ptr %0, align 8
  %153 = and i64 %152, 65535
  %154 = icmp eq i64 %153, 14
  br i1 %151, label %155, label %216

155:                                              ; preds = %146
  br i1 %154, label %156, label %159

156:                                              ; preds = %155
  %157 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %158 = load i64, ptr %0, align 8
  br label %164

159:                                              ; preds = %155
  %160 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %161 = load i32, ptr %160, align 4
  %162 = lshr i32 %161, 16
  %163 = and i32 %162, 255
  br label %164

164:                                              ; preds = %159, %156
  %165 = phi i64 [ %158, %156 ], [ %152, %159 ]
  %166 = phi i32 [ %157, %156 ], [ %163, %159 ]
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %167
  %169 = load i8, ptr %168, align 1, !tbaa !17
  %170 = icmp eq i8 %169, 8
  br i1 %170, label %189, label %171

171:                                              ; preds = %164
  %172 = and i64 %165, 65535
  %173 = icmp eq i64 %172, 14
  br i1 %173, label %174, label %177

174:                                              ; preds = %171
  %175 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %176 = load i64, ptr %0, align 8
  br label %182

177:                                              ; preds = %171
  %178 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %179 = load i32, ptr %178, align 4
  %180 = lshr i32 %179, 16
  %181 = and i32 %180, 255
  br label %182

182:                                              ; preds = %177, %174
  %183 = phi i64 [ %176, %174 ], [ %165, %177 ]
  %184 = phi i32 [ %175, %174 ], [ %181, %177 ]
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %185
  %187 = load i8, ptr %186, align 1, !tbaa !17
  %188 = icmp eq i8 %187, 9
  br i1 %188, label %189, label %200

189:                                              ; preds = %182, %164
  %190 = phi i64 [ %183, %182 ], [ %165, %164 ]
  %191 = and i64 %190, 65535
  %192 = icmp eq i64 %191, 14
  br i1 %192, label %193, label %195

193:                                              ; preds = %189
  %194 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %277

195:                                              ; preds = %189
  %196 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %197 = load i32, ptr %196, align 4
  %198 = lshr i32 %197, 16
  %199 = and i32 %198, 255
  br label %277

200:                                              ; preds = %182
  %201 = and i64 %183, 65535
  %202 = icmp eq i64 %201, 14
  br i1 %202, label %203, label %205

203:                                              ; preds = %200
  %204 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %210

205:                                              ; preds = %200
  %206 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %207 = load i32, ptr %206, align 4
  %208 = lshr i32 %207, 16
  %209 = and i32 %208, 255
  br label %210

210:                                              ; preds = %205, %203
  %211 = phi i32 [ %204, %203 ], [ %209, %205 ]
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %212
  %214 = load i8, ptr %213, align 1, !tbaa !17
  %215 = zext i8 %214 to i32
  br label %277

216:                                              ; preds = %146
  br i1 %154, label %217, label %220

217:                                              ; preds = %216
  %218 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %219 = load i64, ptr %0, align 8
  br label %225

220:                                              ; preds = %216
  %221 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %222 = load i32, ptr %221, align 4
  %223 = lshr i32 %222, 16
  %224 = and i32 %223, 255
  br label %225

225:                                              ; preds = %220, %217
  %226 = phi i64 [ %219, %217 ], [ %152, %220 ]
  %227 = phi i32 [ %218, %217 ], [ %224, %220 ]
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %228
  %230 = load i8, ptr %229, align 1, !tbaa !17
  %231 = icmp eq i8 %230, 8
  br i1 %231, label %250, label %232

232:                                              ; preds = %225
  %233 = and i64 %226, 65535
  %234 = icmp eq i64 %233, 14
  br i1 %234, label %235, label %238

235:                                              ; preds = %232
  %236 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %237 = load i64, ptr %0, align 8
  br label %243

238:                                              ; preds = %232
  %239 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %240 = load i32, ptr %239, align 4
  %241 = lshr i32 %240, 16
  %242 = and i32 %241, 255
  br label %243

243:                                              ; preds = %238, %235
  %244 = phi i64 [ %237, %235 ], [ %226, %238 ]
  %245 = phi i32 [ %236, %235 ], [ %242, %238 ]
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %246
  %248 = load i8, ptr %247, align 1, !tbaa !17
  %249 = icmp eq i8 %248, 9
  br i1 %249, label %250, label %261

250:                                              ; preds = %243, %225
  %251 = phi i64 [ %244, %243 ], [ %226, %225 ]
  %252 = and i64 %251, 65535
  %253 = icmp eq i64 %252, 14
  br i1 %253, label %254, label %256

254:                                              ; preds = %250
  %255 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %277

256:                                              ; preds = %250
  %257 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %258 = load i32, ptr %257, align 4
  %259 = lshr i32 %258, 16
  %260 = and i32 %259, 255
  br label %277

261:                                              ; preds = %243
  %262 = and i64 %244, 65535
  %263 = icmp eq i64 %262, 14
  br i1 %263, label %264, label %266

264:                                              ; preds = %261
  %265 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %271

266:                                              ; preds = %261
  %267 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %268 = load i32, ptr %267, align 4
  %269 = lshr i32 %268, 16
  %270 = and i32 %269, 255
  br label %271

271:                                              ; preds = %266, %264
  %272 = phi i32 [ %265, %264 ], [ %270, %266 ]
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %273
  %275 = load i8, ptr %274, align 1, !tbaa !17
  %276 = zext i8 %275 to i32
  br label %277

277:                                              ; preds = %271, %256, %254, %210, %195, %193
  %278 = phi i32 [ %215, %210 ], [ %194, %193 ], [ %199, %195 ], [ %276, %271 ], [ %255, %254 ], [ %260, %256 ]
  %279 = add i32 %278, -38
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %280
  %282 = load ptr, ptr %281, align 8, !tbaa !6
  %283 = getelementptr inbounds %struct.real_format, ptr %282, i64 0, i32 11
  %284 = load i8, ptr %283, align 2, !tbaa !36
  %285 = icmp eq i8 %284, 0
  %286 = load i32, ptr @flag_finite_math_only, align 4
  %287 = icmp ne i32 %286, 0
  %288 = select i1 %285, i1 true, i1 %287
  br i1 %288, label %289, label %867

289:                                              ; preds = %277
  %290 = load i64, ptr %0, align 8
  br label %291

291:                                              ; preds = %289, %75, %6
  %292 = phi i64 [ %290, %289 ], [ %76, %75 ], [ %9, %6 ]
  %293 = and i64 %292, 65535
  %294 = icmp eq i64 %293, 14
  br i1 %294, label %295, label %298

295:                                              ; preds = %291
  %296 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %297 = load i64, ptr %0, align 8
  br label %303

298:                                              ; preds = %291
  %299 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %300 = load i32, ptr %299, align 4
  %301 = lshr i32 %300, 16
  %302 = and i32 %301, 255
  br label %303

303:                                              ; preds = %298, %295
  %304 = phi i64 [ %297, %295 ], [ %292, %298 ]
  %305 = phi i32 [ %296, %295 ], [ %302, %298 ]
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %306
  %308 = load i8, ptr %307, align 1, !tbaa !17
  %309 = icmp eq i8 %308, 8
  br i1 %309, label %364, label %310

310:                                              ; preds = %303
  %311 = and i64 %304, 65535
  %312 = icmp eq i64 %311, 14
  br i1 %312, label %313, label %316

313:                                              ; preds = %310
  %314 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %315 = load i64, ptr %0, align 8
  br label %321

316:                                              ; preds = %310
  %317 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %318 = load i32, ptr %317, align 4
  %319 = lshr i32 %318, 16
  %320 = and i32 %319, 255
  br label %321

321:                                              ; preds = %316, %313
  %322 = phi i64 [ %315, %313 ], [ %304, %316 ]
  %323 = phi i32 [ %314, %313 ], [ %320, %316 ]
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %324
  %326 = load i8, ptr %325, align 1, !tbaa !17
  %327 = icmp eq i8 %326, 9
  br i1 %327, label %364, label %328

328:                                              ; preds = %321
  %329 = and i64 %322, 65535
  %330 = icmp eq i64 %329, 14
  br i1 %330, label %331, label %334

331:                                              ; preds = %328
  %332 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %333 = load i64, ptr %0, align 8
  br label %339

334:                                              ; preds = %328
  %335 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %336 = load i32, ptr %335, align 4
  %337 = lshr i32 %336, 16
  %338 = and i32 %337, 255
  br label %339

339:                                              ; preds = %334, %331
  %340 = phi i64 [ %333, %331 ], [ %322, %334 ]
  %341 = phi i32 [ %332, %331 ], [ %338, %334 ]
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %342
  %344 = load i8, ptr %343, align 1, !tbaa !17
  %345 = icmp eq i8 %344, 11
  br i1 %345, label %364, label %346

346:                                              ; preds = %339
  %347 = and i64 %340, 65535
  %348 = icmp eq i64 %347, 14
  br i1 %348, label %349, label %351

349:                                              ; preds = %346
  %350 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %356

351:                                              ; preds = %346
  %352 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %353 = load i32, ptr %352, align 4
  %354 = lshr i32 %353, 16
  %355 = and i32 %354, 255
  br label %356

356:                                              ; preds = %351, %349
  %357 = phi i32 [ %350, %349 ], [ %355, %351 ]
  %358 = zext i32 %357 to i64
  %359 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %358
  %360 = load i8, ptr %359, align 1, !tbaa !17
  %361 = icmp eq i8 %360, 17
  br i1 %361, label %362, label %867

362:                                              ; preds = %356
  %363 = load i64, ptr %0, align 8
  br label %364

364:                                              ; preds = %362, %339, %321, %303
  %365 = phi i64 [ %363, %362 ], [ %340, %339 ], [ %322, %321 ], [ %304, %303 ]
  %366 = and i64 %365, 65535
  %367 = icmp eq i64 %366, 14
  br i1 %367, label %368, label %371

368:                                              ; preds = %364
  %369 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %370 = load i64, ptr %0, align 8
  br label %376

371:                                              ; preds = %364
  %372 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %373 = load i32, ptr %372, align 4
  %374 = lshr i32 %373, 16
  %375 = and i32 %374, 255
  br label %376

376:                                              ; preds = %371, %368
  %377 = phi i64 [ %370, %368 ], [ %365, %371 ]
  %378 = phi i32 [ %369, %368 ], [ %375, %371 ]
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %379
  %381 = load i8, ptr %380, align 1, !tbaa !17
  %382 = icmp eq i8 %381, 8
  br i1 %382, label %401, label %383

383:                                              ; preds = %376
  %384 = and i64 %377, 65535
  %385 = icmp eq i64 %384, 14
  br i1 %385, label %386, label %389

386:                                              ; preds = %383
  %387 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %388 = load i64, ptr %0, align 8
  br label %394

389:                                              ; preds = %383
  %390 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %391 = load i32, ptr %390, align 4
  %392 = lshr i32 %391, 16
  %393 = and i32 %392, 255
  br label %394

394:                                              ; preds = %389, %386
  %395 = phi i64 [ %388, %386 ], [ %377, %389 ]
  %396 = phi i32 [ %387, %386 ], [ %393, %389 ]
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %397
  %399 = load i8, ptr %398, align 1, !tbaa !17
  %400 = icmp eq i8 %399, 9
  br i1 %400, label %401, label %412

401:                                              ; preds = %394, %376
  %402 = phi i64 [ %395, %394 ], [ %377, %376 ]
  %403 = and i64 %402, 65535
  %404 = icmp eq i64 %403, 14
  br i1 %404, label %405, label %407

405:                                              ; preds = %401
  %406 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %428

407:                                              ; preds = %401
  %408 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %409 = load i32, ptr %408, align 4
  %410 = lshr i32 %409, 16
  %411 = and i32 %410, 255
  br label %428

412:                                              ; preds = %394
  %413 = and i64 %395, 65535
  %414 = icmp eq i64 %413, 14
  br i1 %414, label %415, label %417

415:                                              ; preds = %412
  %416 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %422

417:                                              ; preds = %412
  %418 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %419 = load i32, ptr %418, align 4
  %420 = lshr i32 %419, 16
  %421 = and i32 %420, 255
  br label %422

422:                                              ; preds = %417, %415
  %423 = phi i32 [ %416, %415 ], [ %421, %417 ]
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %424
  %426 = load i8, ptr %425, align 1, !tbaa !17
  %427 = zext i8 %426 to i32
  br label %428

428:                                              ; preds = %405, %407, %422
  %429 = phi i32 [ %427, %422 ], [ %406, %405 ], [ %411, %407 ]
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %430
  %432 = load i8, ptr %431, align 1, !tbaa !17
  %433 = icmp eq i8 %432, 9
  %434 = load i64, ptr %0, align 8
  %435 = and i64 %434, 65535
  %436 = icmp eq i64 %435, 14
  br i1 %433, label %437, label %498

437:                                              ; preds = %428
  br i1 %436, label %438, label %441

438:                                              ; preds = %437
  %439 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %440 = load i64, ptr %0, align 8
  br label %446

441:                                              ; preds = %437
  %442 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %443 = load i32, ptr %442, align 4
  %444 = lshr i32 %443, 16
  %445 = and i32 %444, 255
  br label %446

446:                                              ; preds = %441, %438
  %447 = phi i64 [ %440, %438 ], [ %434, %441 ]
  %448 = phi i32 [ %439, %438 ], [ %445, %441 ]
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %449
  %451 = load i8, ptr %450, align 1, !tbaa !17
  %452 = icmp eq i8 %451, 8
  br i1 %452, label %471, label %453

453:                                              ; preds = %446
  %454 = and i64 %447, 65535
  %455 = icmp eq i64 %454, 14
  br i1 %455, label %456, label %459

456:                                              ; preds = %453
  %457 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %458 = load i64, ptr %0, align 8
  br label %464

459:                                              ; preds = %453
  %460 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %461 = load i32, ptr %460, align 4
  %462 = lshr i32 %461, 16
  %463 = and i32 %462, 255
  br label %464

464:                                              ; preds = %459, %456
  %465 = phi i64 [ %458, %456 ], [ %447, %459 ]
  %466 = phi i32 [ %457, %456 ], [ %463, %459 ]
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %467
  %469 = load i8, ptr %468, align 1, !tbaa !17
  %470 = icmp eq i8 %469, 9
  br i1 %470, label %471, label %482

471:                                              ; preds = %464, %446
  %472 = phi i64 [ %465, %464 ], [ %447, %446 ]
  %473 = and i64 %472, 65535
  %474 = icmp eq i64 %473, 14
  br i1 %474, label %475, label %477

475:                                              ; preds = %471
  %476 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %559

477:                                              ; preds = %471
  %478 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %479 = load i32, ptr %478, align 4
  %480 = lshr i32 %479, 16
  %481 = and i32 %480, 255
  br label %559

482:                                              ; preds = %464
  %483 = and i64 %465, 65535
  %484 = icmp eq i64 %483, 14
  br i1 %484, label %485, label %487

485:                                              ; preds = %482
  %486 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %492

487:                                              ; preds = %482
  %488 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %489 = load i32, ptr %488, align 4
  %490 = lshr i32 %489, 16
  %491 = and i32 %490, 255
  br label %492

492:                                              ; preds = %487, %485
  %493 = phi i32 [ %486, %485 ], [ %491, %487 ]
  %494 = zext i32 %493 to i64
  %495 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %494
  %496 = load i8, ptr %495, align 1, !tbaa !17
  %497 = zext i8 %496 to i32
  br label %559

498:                                              ; preds = %428
  br i1 %436, label %499, label %502

499:                                              ; preds = %498
  %500 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %501 = load i64, ptr %0, align 8
  br label %507

502:                                              ; preds = %498
  %503 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %504 = load i32, ptr %503, align 4
  %505 = lshr i32 %504, 16
  %506 = and i32 %505, 255
  br label %507

507:                                              ; preds = %502, %499
  %508 = phi i64 [ %501, %499 ], [ %434, %502 ]
  %509 = phi i32 [ %500, %499 ], [ %506, %502 ]
  %510 = zext i32 %509 to i64
  %511 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %510
  %512 = load i8, ptr %511, align 1, !tbaa !17
  %513 = icmp eq i8 %512, 8
  br i1 %513, label %532, label %514

514:                                              ; preds = %507
  %515 = and i64 %508, 65535
  %516 = icmp eq i64 %515, 14
  br i1 %516, label %517, label %520

517:                                              ; preds = %514
  %518 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %519 = load i64, ptr %0, align 8
  br label %525

520:                                              ; preds = %514
  %521 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %522 = load i32, ptr %521, align 4
  %523 = lshr i32 %522, 16
  %524 = and i32 %523, 255
  br label %525

525:                                              ; preds = %520, %517
  %526 = phi i64 [ %519, %517 ], [ %508, %520 ]
  %527 = phi i32 [ %518, %517 ], [ %524, %520 ]
  %528 = zext i32 %527 to i64
  %529 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %528
  %530 = load i8, ptr %529, align 1, !tbaa !17
  %531 = icmp eq i8 %530, 9
  br i1 %531, label %532, label %543

532:                                              ; preds = %525, %507
  %533 = phi i64 [ %526, %525 ], [ %508, %507 ]
  %534 = and i64 %533, 65535
  %535 = icmp eq i64 %534, 14
  br i1 %535, label %536, label %538

536:                                              ; preds = %532
  %537 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %559

538:                                              ; preds = %532
  %539 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %540 = load i32, ptr %539, align 4
  %541 = lshr i32 %540, 16
  %542 = and i32 %541, 255
  br label %559

543:                                              ; preds = %525
  %544 = and i64 %526, 65535
  %545 = icmp eq i64 %544, 14
  br i1 %545, label %546, label %548

546:                                              ; preds = %543
  %547 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %553

548:                                              ; preds = %543
  %549 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %550 = load i32, ptr %549, align 4
  %551 = lshr i32 %550, 16
  %552 = and i32 %551, 255
  br label %553

553:                                              ; preds = %548, %546
  %554 = phi i32 [ %547, %546 ], [ %552, %548 ]
  %555 = zext i32 %554 to i64
  %556 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %555
  %557 = load i8, ptr %556, align 1, !tbaa !17
  %558 = zext i8 %557 to i32
  br label %559

559:                                              ; preds = %553, %538, %536, %492, %477, %475
  %560 = phi i32 [ %497, %492 ], [ %476, %475 ], [ %481, %477 ], [ %558, %553 ], [ %537, %536 ], [ %542, %538 ]
  %561 = add i32 %560, -38
  %562 = zext i32 %561 to i64
  %563 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %562
  %564 = load ptr, ptr %563, align 8, !tbaa !6
  %565 = getelementptr inbounds %struct.real_format, ptr %564, i64 0, i32 14
  %566 = load i8, ptr %565, align 1, !tbaa !37
  %567 = icmp ne i8 %566, 0
  %568 = load i32, ptr @flag_signed_zeros, align 4
  %569 = icmp ne i32 %568, 0
  %570 = select i1 %567, i1 %569, i1 false
  br i1 %570, label %571, label %867

571:                                              ; preds = %559
  %572 = load i64, ptr %1, align 8
  %573 = and i64 %572, 65535
  %574 = icmp eq i64 %573, 24
  br i1 %574, label %575, label %583

575:                                              ; preds = %571
  %576 = getelementptr inbounds %struct.tree_real_cst, ptr %1, i64 0, i32 1
  %577 = load ptr, ptr %576, align 8, !tbaa !17
  %578 = tail call zeroext i8 @real_isnegzero(ptr noundef %577) #24
  %579 = icmp eq i8 %578, 0
  br i1 %579, label %583, label %580

580:                                              ; preds = %575
  %581 = icmp eq i32 %2, 0
  %582 = zext i1 %581 to i32
  br label %583

583:                                              ; preds = %580, %575, %571
  %584 = phi i32 [ %582, %580 ], [ %2, %575 ], [ %2, %571 ]
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %867, label %586

586:                                              ; preds = %583
  %587 = load i64, ptr %0, align 8
  %588 = and i64 %587, 65535
  %589 = icmp eq i64 %588, 14
  br i1 %589, label %590, label %593

590:                                              ; preds = %586
  %591 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %592 = load i64, ptr %0, align 8
  br label %598

593:                                              ; preds = %586
  %594 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %595 = load i32, ptr %594, align 4
  %596 = lshr i32 %595, 16
  %597 = and i32 %596, 255
  br label %598

598:                                              ; preds = %593, %590
  %599 = phi i64 [ %592, %590 ], [ %587, %593 ]
  %600 = phi i32 [ %591, %590 ], [ %597, %593 ]
  %601 = zext i32 %600 to i64
  %602 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %601
  %603 = load i8, ptr %602, align 1, !tbaa !17
  %604 = icmp eq i8 %603, 8
  br i1 %604, label %659, label %605

605:                                              ; preds = %598
  %606 = and i64 %599, 65535
  %607 = icmp eq i64 %606, 14
  br i1 %607, label %608, label %611

608:                                              ; preds = %605
  %609 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %610 = load i64, ptr %0, align 8
  br label %616

611:                                              ; preds = %605
  %612 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %613 = load i32, ptr %612, align 4
  %614 = lshr i32 %613, 16
  %615 = and i32 %614, 255
  br label %616

616:                                              ; preds = %611, %608
  %617 = phi i64 [ %610, %608 ], [ %599, %611 ]
  %618 = phi i32 [ %609, %608 ], [ %615, %611 ]
  %619 = zext i32 %618 to i64
  %620 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %619
  %621 = load i8, ptr %620, align 1, !tbaa !17
  %622 = icmp eq i8 %621, 9
  br i1 %622, label %659, label %623

623:                                              ; preds = %616
  %624 = and i64 %617, 65535
  %625 = icmp eq i64 %624, 14
  br i1 %625, label %626, label %629

626:                                              ; preds = %623
  %627 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %628 = load i64, ptr %0, align 8
  br label %634

629:                                              ; preds = %623
  %630 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %631 = load i32, ptr %630, align 4
  %632 = lshr i32 %631, 16
  %633 = and i32 %632, 255
  br label %634

634:                                              ; preds = %629, %626
  %635 = phi i64 [ %628, %626 ], [ %617, %629 ]
  %636 = phi i32 [ %627, %626 ], [ %633, %629 ]
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %637
  %639 = load i8, ptr %638, align 1, !tbaa !17
  %640 = icmp eq i8 %639, 11
  br i1 %640, label %659, label %641

641:                                              ; preds = %634
  %642 = and i64 %635, 65535
  %643 = icmp eq i64 %642, 14
  br i1 %643, label %644, label %646

644:                                              ; preds = %641
  %645 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %651

646:                                              ; preds = %641
  %647 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %648 = load i32, ptr %647, align 4
  %649 = lshr i32 %648, 16
  %650 = and i32 %649, 255
  br label %651

651:                                              ; preds = %646, %644
  %652 = phi i32 [ %645, %644 ], [ %650, %646 ]
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %653
  %655 = load i8, ptr %654, align 1, !tbaa !17
  %656 = icmp eq i8 %655, 17
  br i1 %656, label %657, label %867

657:                                              ; preds = %651
  %658 = load i64, ptr %0, align 8
  br label %659

659:                                              ; preds = %657, %634, %616, %598
  %660 = phi i64 [ %658, %657 ], [ %635, %634 ], [ %617, %616 ], [ %599, %598 ]
  %661 = and i64 %660, 65535
  %662 = icmp eq i64 %661, 14
  br i1 %662, label %663, label %666

663:                                              ; preds = %659
  %664 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %665 = load i64, ptr %0, align 8
  br label %671

666:                                              ; preds = %659
  %667 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %668 = load i32, ptr %667, align 4
  %669 = lshr i32 %668, 16
  %670 = and i32 %669, 255
  br label %671

671:                                              ; preds = %666, %663
  %672 = phi i64 [ %665, %663 ], [ %660, %666 ]
  %673 = phi i32 [ %664, %663 ], [ %670, %666 ]
  %674 = zext i32 %673 to i64
  %675 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %674
  %676 = load i8, ptr %675, align 1, !tbaa !17
  %677 = icmp eq i8 %676, 8
  br i1 %677, label %696, label %678

678:                                              ; preds = %671
  %679 = and i64 %672, 65535
  %680 = icmp eq i64 %679, 14
  br i1 %680, label %681, label %684

681:                                              ; preds = %678
  %682 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %683 = load i64, ptr %0, align 8
  br label %689

684:                                              ; preds = %678
  %685 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %686 = load i32, ptr %685, align 4
  %687 = lshr i32 %686, 16
  %688 = and i32 %687, 255
  br label %689

689:                                              ; preds = %684, %681
  %690 = phi i64 [ %683, %681 ], [ %672, %684 ]
  %691 = phi i32 [ %682, %681 ], [ %688, %684 ]
  %692 = zext i32 %691 to i64
  %693 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %692
  %694 = load i8, ptr %693, align 1, !tbaa !17
  %695 = icmp eq i8 %694, 9
  br i1 %695, label %696, label %707

696:                                              ; preds = %689, %671
  %697 = phi i64 [ %690, %689 ], [ %672, %671 ]
  %698 = and i64 %697, 65535
  %699 = icmp eq i64 %698, 14
  br i1 %699, label %700, label %702

700:                                              ; preds = %696
  %701 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %723

702:                                              ; preds = %696
  %703 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %704 = load i32, ptr %703, align 4
  %705 = lshr i32 %704, 16
  %706 = and i32 %705, 255
  br label %723

707:                                              ; preds = %689
  %708 = and i64 %690, 65535
  %709 = icmp eq i64 %708, 14
  br i1 %709, label %710, label %712

710:                                              ; preds = %707
  %711 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %717

712:                                              ; preds = %707
  %713 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %714 = load i32, ptr %713, align 4
  %715 = lshr i32 %714, 16
  %716 = and i32 %715, 255
  br label %717

717:                                              ; preds = %712, %710
  %718 = phi i32 [ %711, %710 ], [ %716, %712 ]
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %719
  %721 = load i8, ptr %720, align 1, !tbaa !17
  %722 = zext i8 %721 to i32
  br label %723

723:                                              ; preds = %700, %702, %717
  %724 = phi i32 [ %722, %717 ], [ %701, %700 ], [ %706, %702 ]
  %725 = zext i32 %724 to i64
  %726 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %725
  %727 = load i8, ptr %726, align 1, !tbaa !17
  %728 = icmp eq i8 %727, 9
  %729 = load i64, ptr %0, align 8
  %730 = and i64 %729, 65535
  %731 = icmp eq i64 %730, 14
  br i1 %728, label %732, label %793

732:                                              ; preds = %723
  br i1 %731, label %733, label %736

733:                                              ; preds = %732
  %734 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %735 = load i64, ptr %0, align 8
  br label %741

736:                                              ; preds = %732
  %737 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %738 = load i32, ptr %737, align 4
  %739 = lshr i32 %738, 16
  %740 = and i32 %739, 255
  br label %741

741:                                              ; preds = %736, %733
  %742 = phi i64 [ %735, %733 ], [ %729, %736 ]
  %743 = phi i32 [ %734, %733 ], [ %740, %736 ]
  %744 = zext i32 %743 to i64
  %745 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %744
  %746 = load i8, ptr %745, align 1, !tbaa !17
  %747 = icmp eq i8 %746, 8
  br i1 %747, label %766, label %748

748:                                              ; preds = %741
  %749 = and i64 %742, 65535
  %750 = icmp eq i64 %749, 14
  br i1 %750, label %751, label %754

751:                                              ; preds = %748
  %752 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %753 = load i64, ptr %0, align 8
  br label %759

754:                                              ; preds = %748
  %755 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %756 = load i32, ptr %755, align 4
  %757 = lshr i32 %756, 16
  %758 = and i32 %757, 255
  br label %759

759:                                              ; preds = %754, %751
  %760 = phi i64 [ %753, %751 ], [ %742, %754 ]
  %761 = phi i32 [ %752, %751 ], [ %758, %754 ]
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %762
  %764 = load i8, ptr %763, align 1, !tbaa !17
  %765 = icmp eq i8 %764, 9
  br i1 %765, label %766, label %777

766:                                              ; preds = %759, %741
  %767 = phi i64 [ %760, %759 ], [ %742, %741 ]
  %768 = and i64 %767, 65535
  %769 = icmp eq i64 %768, 14
  br i1 %769, label %770, label %772

770:                                              ; preds = %766
  %771 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %854

772:                                              ; preds = %766
  %773 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %774 = load i32, ptr %773, align 4
  %775 = lshr i32 %774, 16
  %776 = and i32 %775, 255
  br label %854

777:                                              ; preds = %759
  %778 = and i64 %760, 65535
  %779 = icmp eq i64 %778, 14
  br i1 %779, label %780, label %782

780:                                              ; preds = %777
  %781 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %787

782:                                              ; preds = %777
  %783 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %784 = load i32, ptr %783, align 4
  %785 = lshr i32 %784, 16
  %786 = and i32 %785, 255
  br label %787

787:                                              ; preds = %782, %780
  %788 = phi i32 [ %781, %780 ], [ %786, %782 ]
  %789 = zext i32 %788 to i64
  %790 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %789
  %791 = load i8, ptr %790, align 1, !tbaa !17
  %792 = zext i8 %791 to i32
  br label %854

793:                                              ; preds = %723
  br i1 %731, label %794, label %797

794:                                              ; preds = %793
  %795 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %796 = load i64, ptr %0, align 8
  br label %802

797:                                              ; preds = %793
  %798 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %799 = load i32, ptr %798, align 4
  %800 = lshr i32 %799, 16
  %801 = and i32 %800, 255
  br label %802

802:                                              ; preds = %797, %794
  %803 = phi i64 [ %796, %794 ], [ %729, %797 ]
  %804 = phi i32 [ %795, %794 ], [ %801, %797 ]
  %805 = zext i32 %804 to i64
  %806 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %805
  %807 = load i8, ptr %806, align 1, !tbaa !17
  %808 = icmp eq i8 %807, 8
  br i1 %808, label %827, label %809

809:                                              ; preds = %802
  %810 = and i64 %803, 65535
  %811 = icmp eq i64 %810, 14
  br i1 %811, label %812, label %815

812:                                              ; preds = %809
  %813 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %814 = load i64, ptr %0, align 8
  br label %820

815:                                              ; preds = %809
  %816 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %817 = load i32, ptr %816, align 4
  %818 = lshr i32 %817, 16
  %819 = and i32 %818, 255
  br label %820

820:                                              ; preds = %815, %812
  %821 = phi i64 [ %814, %812 ], [ %803, %815 ]
  %822 = phi i32 [ %813, %812 ], [ %819, %815 ]
  %823 = zext i32 %822 to i64
  %824 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %823
  %825 = load i8, ptr %824, align 1, !tbaa !17
  %826 = icmp eq i8 %825, 9
  br i1 %826, label %827, label %838

827:                                              ; preds = %820, %802
  %828 = phi i64 [ %821, %820 ], [ %803, %802 ]
  %829 = and i64 %828, 65535
  %830 = icmp eq i64 %829, 14
  br i1 %830, label %831, label %833

831:                                              ; preds = %827
  %832 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %854

833:                                              ; preds = %827
  %834 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %835 = load i32, ptr %834, align 4
  %836 = lshr i32 %835, 16
  %837 = and i32 %836, 255
  br label %854

838:                                              ; preds = %820
  %839 = and i64 %821, 65535
  %840 = icmp eq i64 %839, 14
  br i1 %840, label %841, label %843

841:                                              ; preds = %838
  %842 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %848

843:                                              ; preds = %838
  %844 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %845 = load i32, ptr %844, align 4
  %846 = lshr i32 %845, 16
  %847 = and i32 %846, 255
  br label %848

848:                                              ; preds = %843, %841
  %849 = phi i32 [ %842, %841 ], [ %847, %843 ]
  %850 = zext i32 %849 to i64
  %851 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %850
  %852 = load i8, ptr %851, align 1, !tbaa !17
  %853 = zext i8 %852 to i32
  br label %854

854:                                              ; preds = %848, %833, %831, %787, %772, %770
  %855 = phi i32 [ %792, %787 ], [ %771, %770 ], [ %776, %772 ], [ %853, %848 ], [ %832, %831 ], [ %837, %833 ]
  %856 = add i32 %855, -38
  %857 = zext i32 %856 to i64
  %858 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %857
  %859 = load ptr, ptr %858, align 8, !tbaa !6
  %860 = getelementptr inbounds %struct.real_format, ptr %859, i64 0, i32 10
  %861 = load i8, ptr %860, align 1, !tbaa !49
  %862 = icmp eq i8 %861, 0
  br i1 %862, label %867, label %863

863:                                              ; preds = %854
  %864 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %865 = icmp eq i32 %864, 0
  %866 = zext i1 %865 to i8
  br label %867

867:                                              ; preds = %583, %863, %854, %651, %356, %559, %277, %3
  %868 = phi i8 [ 0, %3 ], [ 0, %277 ], [ 1, %559 ], [ 1, %356 ], [ 0, %583 ], [ 1, %854 ], [ 1, %651 ], [ %866, %863 ]
  ret i8 %868
}

declare zeroext i8 @real_isnegzero(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_single_bit_test(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = icmp eq i32 %1, 101
  %7 = add i32 %1, -101
  %8 = icmp ult i32 %7, 2
  br i1 %8, label %9, label %97

9:                                                ; preds = %5
  %10 = load i64, ptr %2, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 89
  br i1 %12, label %13, label %97

13:                                               ; preds = %9
  %14 = tail call i32 @integer_zerop(ptr noundef %3) #24
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %97, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = tail call i32 @integer_pow2p(ptr noundef %18) #24
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %97, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = load ptr, ptr %17, align 8, !tbaa !17
  %27 = tail call i32 @tree_log2(ptr noundef %26) #24
  %28 = load i64, ptr %25, align 8
  %29 = and i64 %28, 65535
  %30 = icmp eq i64 %29, 14
  br i1 %30, label %31, label %33

31:                                               ; preds = %21
  %32 = tail call i32 @vector_type_mode(ptr noundef nonnull %25) #24
  br label %38

33:                                               ; preds = %21
  %34 = getelementptr inbounds %struct.tree_type, ptr %25, i64 0, i32 6
  %35 = load i32, ptr %34, align 4
  %36 = lshr i32 %35, 16
  %37 = and i32 %36, 255
  br label %38

38:                                               ; preds = %33, %31
  %39 = phi i32 [ %32, %31 ], [ %37, %33 ]
  %40 = tail call fastcc ptr @fold_single_bit_test_into_sign_test(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %3, ptr noundef %4)
  %41 = icmp eq ptr %40, null
  br i1 %41, label %42, label %97

42:                                               ; preds = %38
  %43 = load i64, ptr %23, align 8
  %44 = and i64 %43, 65535
  %45 = icmp eq i64 %44, 84
  br i1 %45, label %46, label %74

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %48 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %49 = load ptr, ptr %48, align 8, !tbaa !17
  %50 = load i64, ptr %49, align 8
  %51 = and i64 %50, 65535
  %52 = icmp eq i64 %51, 23
  br i1 %52, label %53, label %74

53:                                               ; preds = %46
  %54 = getelementptr inbounds %struct.tree_int_cst, ptr %49, i64 0, i32 1, i32 1
  %55 = load i64, ptr %54, align 8, !tbaa !17
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %74

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.tree_type, ptr %25, i64 0, i32 6
  %59 = load i32, ptr %58, align 4
  %60 = and i32 %59, 1023
  %61 = icmp slt i32 %27, %60
  br i1 %61, label %62, label %74

62:                                               ; preds = %57
  %63 = sub nsw i32 %27, %60
  %64 = sext i32 %63 to i64
  %65 = tail call i32 @compare_tree_int(ptr noundef nonnull %49, i64 noundef %64) #24
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %74

67:                                               ; preds = %62
  %68 = load ptr, ptr %48, align 8, !tbaa !17
  %69 = getelementptr inbounds %struct.tree_int_cst, ptr %68, i64 0, i32 1
  %70 = load i64, ptr %69, align 8, !tbaa !17
  %71 = trunc i64 %70 to i32
  %72 = add i32 %27, %71
  %73 = load ptr, ptr %47, align 8, !tbaa !17
  br label %74

74:                                               ; preds = %67, %62, %57, %53, %46, %42
  %75 = phi i32 [ %72, %67 ], [ %27, %62 ], [ %27, %57 ], [ %27, %53 ], [ %27, %46 ], [ %27, %42 ]
  %76 = phi ptr [ %73, %67 ], [ %23, %62 ], [ %23, %57 ], [ %23, %53 ], [ %23, %46 ], [ %23, %42 ]
  %77 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %78 = tail call ptr %77(i32 noundef %39, i32 noundef 0) #24
  %79 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %80 = tail call ptr %79(i32 noundef %39, i32 noundef 1) #24
  %81 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %80, ptr noundef %76)
  %82 = icmp eq i32 %75, 0
  br i1 %82, label %88, label %83

83:                                               ; preds = %74
  %84 = sext i32 %75 to i64
  %85 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %86 = tail call ptr @build_int_cst(ptr noundef %85, i64 noundef %84) #24
  %87 = tail call ptr @build2_stat(i32 noundef 84, ptr noundef %80, ptr noundef %81, ptr noundef %86) #24
  br label %88

88:                                               ; preds = %83, %74
  %89 = phi ptr [ %87, %83 ], [ %81, %74 ]
  %90 = tail call ptr @build_int_cst(ptr noundef %80, i64 noundef 1) #24
  br i1 %6, label %91, label %93

91:                                               ; preds = %88
  %92 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %80, ptr noundef %89, ptr noundef %90)
  br label %93

93:                                               ; preds = %91, %88
  %94 = phi ptr [ %92, %91 ], [ %89, %88 ]
  %95 = tail call ptr @build2_stat(i32 noundef 89, ptr noundef %80, ptr noundef %94, ptr noundef %90) #24
  %96 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef %95)
  br label %97

97:                                               ; preds = %9, %13, %16, %5, %93, %38
  %98 = phi ptr [ %96, %93 ], [ %40, %38 ], [ null, %5 ], [ null, %16 ], [ null, %13 ], [ null, %9 ]
  ret ptr %98
}

declare i32 @integer_pow2p(ptr noundef) local_unnamed_addr #3

declare i32 @tree_log2(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_single_bit_test_into_sign_test(i32 noundef %0, i32 noundef %1, ptr nocapture noundef readonly %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = icmp eq i32 %1, 101
  %7 = add i32 %1, -101
  %8 = icmp ult i32 %7, 2
  br i1 %8, label %9, label %113

9:                                                ; preds = %5
  %10 = load i64, ptr %2, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 89
  br i1 %12, label %13, label %113

13:                                               ; preds = %9
  %14 = tail call i32 @integer_zerop(ptr noundef %3) #24
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %113, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = tail call i32 @integer_pow2p(ptr noundef %18) #24
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %113, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = load ptr, ptr %17, align 8, !tbaa !17
  %25 = getelementptr inbounds %struct.tree_int_cst, ptr %24, i64 0, i32 1
  %26 = getelementptr inbounds %struct.tree_int_cst, ptr %24, i64 0, i32 1, i32 1
  %27 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  br label %29

29:                                               ; preds = %76, %21
  %30 = phi ptr [ %28, %21 ], [ %80, %76 ]
  %31 = phi ptr [ %23, %21 ], [ %78, %76 ]
  %32 = load i64, ptr %30, align 8
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 65535
  %35 = add nsw i32 %34, -6
  %36 = icmp ult i32 %35, 3
  br i1 %36, label %37, label %113

37:                                               ; preds = %29
  %38 = load i64, ptr %24, align 8
  %39 = and i64 %38, 134283263
  %40 = icmp eq i64 %39, 23
  br i1 %40, label %41, label %113

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.tree_type, ptr %30, i64 0, i32 6
  %43 = load i32, ptr %42, align 4
  %44 = and i32 %43, 1023
  %45 = icmp ugt i32 %44, 64
  br i1 %45, label %46, label %53

46:                                               ; preds = %41
  %47 = add nsw i32 %44, -65
  %48 = zext i32 %47 to i64
  %49 = shl nuw i64 1, %48
  %50 = sub nsw i32 128, %44
  %51 = zext i32 %50 to i64
  %52 = lshr i64 -1, %51
  br label %60

53:                                               ; preds = %41
  %54 = add nsw i32 %44, -1
  %55 = zext i32 %54 to i64
  %56 = shl nuw i64 1, %55
  %57 = sub nuw nsw i32 64, %44
  %58 = zext i32 %57 to i64
  %59 = lshr i64 -1, %58
  br label %60

60:                                               ; preds = %53, %46
  %61 = phi i64 [ 0, %46 ], [ %56, %53 ]
  %62 = phi i64 [ %52, %46 ], [ 0, %53 ]
  %63 = phi i64 [ %49, %46 ], [ 0, %53 ]
  %64 = phi i64 [ -1, %46 ], [ %59, %53 ]
  %65 = load i64, ptr %26, align 8, !tbaa !17
  %66 = and i64 %65, %62
  %67 = icmp eq i64 %66, %63
  br i1 %67, label %68, label %72

68:                                               ; preds = %60
  %69 = load i64, ptr %25, align 8, !tbaa !17
  %70 = and i64 %69, %64
  %71 = icmp eq i64 %70, %61
  br i1 %71, label %85, label %72

72:                                               ; preds = %68, %60
  %73 = load i64, ptr %31, align 8
  %74 = and i64 %73, 65535
  %75 = icmp eq i64 %74, 116
  br i1 %75, label %76, label %113

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.tree_exp, ptr %31, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8, !tbaa !17
  %79 = getelementptr inbounds %struct.tree_common, ptr %78, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = getelementptr inbounds %struct.tree_type, ptr %80, i64 0, i32 6
  %82 = load i32, ptr %81, align 4
  %83 = and i32 %82, 1023
  %84 = icmp ult i32 %83, %44
  br i1 %84, label %29, label %113

85:                                               ; preds = %68
  %86 = getelementptr inbounds %struct.tree_common, ptr %31, i64 0, i32 2
  %87 = and i64 %32, 65535
  %88 = icmp eq i64 %87, 14
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = tail call i32 @vector_type_mode(ptr noundef nonnull %30) #24
  br label %94

91:                                               ; preds = %85
  %92 = lshr i32 %43, 16
  %93 = and i32 %92, 255
  br label %94

94:                                               ; preds = %91, %89
  %95 = phi i32 [ %90, %89 ], [ %93, %91 ]
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %96
  %98 = load i8, ptr %97, align 1, !tbaa !17
  %99 = zext i8 %98 to i32
  %100 = shl nuw nsw i32 %99, 3
  %101 = icmp eq i32 %44, %100
  br i1 %101, label %102, label %113

102:                                              ; preds = %94
  %103 = load ptr, ptr %86, align 8, !tbaa !17
  %104 = tail call ptr @signed_type_for(ptr noundef %103) #24
  %105 = select i1 %6, i32 100, i32 97
  %106 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %104, ptr noundef nonnull %31)
  %107 = tail call ptr @build_int_cst(ptr noundef %104, i64 noundef 0) #24
  %108 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %105, ptr noundef %4, ptr noundef %106, ptr noundef %107)
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %113

110:                                              ; preds = %102
  %111 = tail call ptr @build2_stat(i32 noundef %105, ptr noundef %4, ptr noundef %106, ptr noundef %107) #24
  %112 = getelementptr inbounds %struct.tree_exp, ptr %111, i64 0, i32 1
  store i32 %0, ptr %112, align 8, !tbaa !17
  br label %113

113:                                              ; preds = %72, %76, %37, %29, %94, %9, %13, %16, %5, %102, %110
  %114 = phi ptr [ %108, %102 ], [ %111, %110 ], [ null, %5 ], [ null, %16 ], [ null, %13 ], [ null, %9 ], [ null, %94 ], [ null, %29 ], [ null, %37 ], [ null, %76 ], [ null, %72 ]
  ret ptr %114
}

declare i32 @compare_tree_int(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable
define internal fastcc ptr @sign_bit_p(ptr noundef readonly %0, ptr nocapture noundef readonly %1) unnamed_addr #16 {
  %3 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %4 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %5 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  br label %7

7:                                                ; preds = %54, %2
  %8 = phi ptr [ %6, %2 ], [ %58, %54 ]
  %9 = phi ptr [ %0, %2 ], [ %56, %54 ]
  %10 = load i64, ptr %8, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = add nsw i32 %12, -6
  %14 = icmp ult i32 %13, 3
  br i1 %14, label %15, label %63

15:                                               ; preds = %7
  %16 = load i64, ptr %1, align 8
  %17 = and i64 %16, 134283263
  %18 = icmp eq i64 %17, 23
  br i1 %18, label %19, label %63

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %21 = load i32, ptr %20, align 4
  %22 = and i32 %21, 1023
  %23 = icmp ugt i32 %22, 64
  br i1 %23, label %24, label %31

24:                                               ; preds = %19
  %25 = add nsw i32 %22, -65
  %26 = zext i32 %25 to i64
  %27 = shl nuw i64 1, %26
  %28 = sub nsw i32 128, %22
  %29 = zext i32 %28 to i64
  %30 = lshr i64 -1, %29
  br label %38

31:                                               ; preds = %19
  %32 = add nsw i32 %22, -1
  %33 = zext i32 %32 to i64
  %34 = shl nuw i64 1, %33
  %35 = sub nuw nsw i32 64, %22
  %36 = zext i32 %35 to i64
  %37 = lshr i64 -1, %36
  br label %38

38:                                               ; preds = %31, %24
  %39 = phi i64 [ 0, %24 ], [ %34, %31 ]
  %40 = phi i64 [ %30, %24 ], [ 0, %31 ]
  %41 = phi i64 [ %27, %24 ], [ 0, %31 ]
  %42 = phi i64 [ -1, %24 ], [ %37, %31 ]
  %43 = load i64, ptr %4, align 8, !tbaa !17
  %44 = and i64 %43, %40
  %45 = icmp eq i64 %44, %41
  br i1 %45, label %46, label %50

46:                                               ; preds = %38
  %47 = load i64, ptr %3, align 8, !tbaa !17
  %48 = and i64 %47, %42
  %49 = icmp eq i64 %48, %39
  br i1 %49, label %63, label %50

50:                                               ; preds = %46, %38
  %51 = load i64, ptr %9, align 8
  %52 = and i64 %51, 65535
  %53 = icmp eq i64 %52, 116
  br i1 %53, label %54, label %63

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = getelementptr inbounds %struct.tree_common, ptr %56, i64 0, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  %59 = getelementptr inbounds %struct.tree_type, ptr %58, i64 0, i32 6
  %60 = load i32, ptr %59, align 4
  %61 = and i32 %60, 1023
  %62 = icmp ult i32 %61, %22
  br i1 %62, label %7, label %63

63:                                               ; preds = %7, %50, %54, %46, %15
  %64 = phi ptr [ null, %7 ], [ null, %15 ], [ %9, %46 ], [ null, %54 ], [ null, %50 ]
  ret ptr %64
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_swap_operands_p(ptr noundef %0, ptr noundef %1, i8 noundef zeroext %2) local_unnamed_addr #10 {
  %4 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %0) #24
  %5 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %1) #24
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 65535
  %9 = icmp eq i32 %8, 23
  br i1 %9, label %74, label %10

10:                                               ; preds = %3
  %11 = load i64, ptr %4, align 8
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 65535
  %14 = icmp eq i32 %13, 23
  br i1 %14, label %74, label %15

15:                                               ; preds = %10
  %16 = icmp eq i32 %8, 24
  br i1 %16, label %74, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %13, 24
  br i1 %18, label %74, label %19

19:                                               ; preds = %17
  %20 = icmp eq i32 %8, 25
  br i1 %20, label %74, label %21

21:                                               ; preds = %19
  %22 = icmp eq i32 %13, 25
  br i1 %22, label %74, label %23

23:                                               ; preds = %21
  %24 = icmp eq i32 %8, 26
  br i1 %24, label %74, label %25

25:                                               ; preds = %23
  %26 = icmp eq i32 %13, 26
  br i1 %26, label %74, label %27

27:                                               ; preds = %25
  %28 = and i64 %6, 131072
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %74

30:                                               ; preds = %27
  %31 = and i64 %11, 131072
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %74

33:                                               ; preds = %30
  %34 = load ptr, ptr @cfun, align 8, !tbaa !6
  %35 = tail call zeroext i8 @optimize_function_for_size_p(ptr noundef %34) #24
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %74

37:                                               ; preds = %33
  %38 = icmp ne i8 %2, 0
  %39 = load i32, ptr @flag_evaluation_order, align 4
  %40 = icmp ne i32 %39, 0
  %41 = select i1 %38, i1 %40, i1 false
  %42 = load i64, ptr %4, align 8
  br i1 %41, label %43, label %50

43:                                               ; preds = %37
  %44 = and i64 %42, 65536
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %74

46:                                               ; preds = %43
  %47 = load i64, ptr %5, align 8
  %48 = and i64 %47, 65536
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %74

50:                                               ; preds = %46, %37
  %51 = and i64 %42, 65535
  %52 = icmp eq i64 %51, 141
  %53 = load i64, ptr %5, align 8
  %54 = and i64 %53, 65535
  %55 = icmp eq i64 %54, 141
  br i1 %52, label %56, label %65

56:                                               ; preds = %50
  br i1 %55, label %57, label %63

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.tree_ssa_name, ptr %4, i64 0, i32 3
  %59 = load i32, ptr %58, align 8, !tbaa !17
  %60 = getelementptr inbounds %struct.tree_ssa_name, ptr %5, i64 0, i32 3
  %61 = load i32, ptr %60, align 8, !tbaa !17
  %62 = icmp ugt i32 %59, %61
  br i1 %62, label %74, label %63

63:                                               ; preds = %57, %56
  %64 = icmp ne i64 %54, 141
  br label %74

65:                                               ; preds = %50
  br i1 %55, label %74, label %66

66:                                               ; preds = %65
  %67 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %54
  %68 = load i32, ptr %67, align 4, !tbaa !17
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %51
  %72 = load i32, ptr %71, align 4, !tbaa !17
  %73 = icmp eq i32 %72, 3
  br label %74

74:                                               ; preds = %63, %65, %70, %66, %57, %43, %46, %33, %30, %27, %25, %23, %21, %19, %17, %15, %10, %3
  %75 = phi i1 [ false, %3 ], [ true, %10 ], [ false, %15 ], [ true, %17 ], [ false, %19 ], [ true, %21 ], [ false, %23 ], [ true, %25 ], [ false, %27 ], [ true, %30 ], [ false, %33 ], [ false, %46 ], [ false, %43 ], [ true, %57 ], [ %64, %63 ], [ false, %66 ], [ %73, %70 ], [ false, %65 ]
  %76 = zext i1 %75 to i8
  ret i8 %76
}

declare zeroext i8 @optimize_function_for_size_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @native_encode_expr(ptr nocapture noundef readonly %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = alloca [6 x i64], align 16
  %5 = load i64, ptr %0, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %140 [
    i16 23, label %7
    i16 24, label %51
    i16 26, label %135
    i16 27, label %152
    i16 28, label %215
  ]

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i64, ptr %9, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 14
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = tail call i32 @vector_type_mode(ptr noundef nonnull %9) #24
  br label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %17 = load i32, ptr %16, align 4
  %18 = lshr i32 %17, 16
  %19 = and i32 %18, 255
  br label %20

20:                                               ; preds = %15, %13
  %21 = phi i32 [ %14, %13 ], [ %19, %15 ]
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %22
  %24 = load i8, ptr %23, align 1, !tbaa !17
  %25 = zext i8 %24 to i32
  %26 = icmp sgt i32 %25, %2
  %27 = icmp eq i8 %24, 0
  %28 = or i1 %27, %26
  br i1 %28, label %140, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  %31 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  %32 = zext i8 %24 to i64
  br label %33

33:                                               ; preds = %45, %29
  %34 = phi i64 [ 0, %29 ], [ %49, %45 ]
  %35 = shl nsw i64 %34, 3
  %36 = icmp ult i64 %35, 64
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = load i64, ptr %31, align 8, !tbaa !17
  %39 = lshr i64 %38, %35
  br label %45

40:                                               ; preds = %33
  %41 = load i64, ptr %30, align 8, !tbaa !17
  %42 = add nuw nsw i64 %35, 4294967232
  %43 = and i64 %42, 4294967288
  %44 = ashr i64 %41, %43
  br label %45

45:                                               ; preds = %40, %37
  %46 = phi i64 [ %39, %37 ], [ %44, %40 ]
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds i8, ptr %1, i64 %34
  store i8 %47, ptr %48, align 1, !tbaa !17
  %49 = add nuw nsw i64 %34, 1
  %50 = icmp eq i64 %49, %32
  br i1 %50, label %140, label %33, !llvm.loop !55

51:                                               ; preds = %3
  %52 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = load i64, ptr %53, align 8
  %55 = and i64 %54, 65535
  %56 = icmp eq i64 %55, 14
  br i1 %56, label %57, label %59

57:                                               ; preds = %51
  %58 = tail call i32 @vector_type_mode(ptr noundef nonnull %53) #24
  br label %64

59:                                               ; preds = %51
  %60 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 6
  %61 = load i32, ptr %60, align 4
  %62 = lshr i32 %61, 16
  %63 = and i32 %62, 255
  br label %64

64:                                               ; preds = %59, %57
  %65 = phi i32 [ %58, %57 ], [ %63, %59 ]
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !17
  %69 = zext i8 %68 to i32
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %4) #24
  %70 = icmp sgt i32 %69, %2
  br i1 %70, label %133, label %71

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.tree_real_cst, ptr %0, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = load i64, ptr %53, align 8
  %75 = and i64 %74, 65535
  %76 = icmp eq i64 %75, 14
  br i1 %76, label %77, label %79

77:                                               ; preds = %71
  %78 = tail call i32 @vector_type_mode(ptr noundef nonnull %53) #24
  br label %84

79:                                               ; preds = %71
  %80 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 6
  %81 = load i32, ptr %80, align 4
  %82 = lshr i32 %81, 16
  %83 = and i32 %82, 255
  br label %84

84:                                               ; preds = %79, %77
  %85 = phi i32 [ %78, %77 ], [ %83, %79 ]
  %86 = call i64 @real_to_target(ptr noundef nonnull %4, ptr noundef %73, i32 noundef %85) #24
  %87 = icmp eq i8 %68, 0
  br i1 %87, label %133, label %88

88:                                               ; preds = %84
  %89 = shl nuw nsw i32 %69, 3
  %90 = zext i32 %89 to i64
  %91 = call i64 @llvm.umax.i64(i64 %90, i64 8)
  %92 = add nsw i64 %91, -1
  %93 = lshr i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = icmp ult i64 %91, 25
  br i1 %95, label %118, label %96

96:                                               ; preds = %88
  %97 = and i64 %94, 4611686018427387900
  %98 = shl i64 %97, 3
  br label %99

99:                                               ; preds = %99, %96
  %100 = phi i64 [ 0, %96 ], [ %113, %99 ]
  %101 = phi <4 x i64> [ <i64 0, i64 8, i64 16, i64 24>, %96 ], [ %114, %99 ]
  %102 = and i64 %100, 2305843009213693948
  %103 = lshr exact i64 %100, 2
  %104 = and i64 %103, 134217727
  %105 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 %104
  %106 = load i64, ptr %105, align 8, !tbaa !24
  %107 = insertelement <4 x i64> poison, i64 %106, i64 0
  %108 = shufflevector <4 x i64> %107, <4 x i64> poison, <4 x i32> zeroinitializer
  %109 = and <4 x i64> %101, <i64 24, i64 24, i64 24, i64 24>
  %110 = ashr <4 x i64> %108, %109
  %111 = trunc <4 x i64> %110 to <4 x i8>
  %112 = getelementptr inbounds i8, ptr %1, i64 %102
  store <4 x i8> %111, ptr %112, align 1, !tbaa !17
  %113 = add nuw i64 %100, 4
  %114 = add <4 x i64> %101, <i64 32, i64 32, i64 32, i64 32>
  %115 = icmp eq i64 %113, %97
  br i1 %115, label %116, label %99, !llvm.loop !56

116:                                              ; preds = %99
  %117 = icmp eq i64 %94, %97
  br i1 %117, label %133, label %118

118:                                              ; preds = %88, %116
  %119 = phi i64 [ 0, %88 ], [ %98, %116 ]
  br label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ %131, %120 ], [ %119, %118 ]
  %122 = lshr exact i64 %121, 3
  %123 = lshr i64 %121, 5
  %124 = and i64 %123, 134217727
  %125 = getelementptr inbounds [6 x i64], ptr %4, i64 0, i64 %124
  %126 = load i64, ptr %125, align 8, !tbaa !24
  %127 = and i64 %121, 24
  %128 = ashr i64 %126, %127
  %129 = trunc i64 %128 to i8
  %130 = getelementptr inbounds i8, ptr %1, i64 %122
  store i8 %129, ptr %130, align 1, !tbaa !17
  %131 = add nuw nsw i64 %121, 8
  %132 = icmp ult i64 %131, %90
  br i1 %132, label %120, label %133, !llvm.loop !59

133:                                              ; preds = %120, %116, %64, %84
  %134 = phi i32 [ 0, %64 ], [ 0, %84 ], [ %69, %116 ], [ %69, %120 ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %4) #24
  br label %140

135:                                              ; preds = %3
  %136 = getelementptr inbounds %struct.tree_complex, ptr %0, i64 0, i32 1
  %137 = load ptr, ptr %136, align 8, !tbaa !17
  %138 = tail call i32 @native_encode_expr(ptr noundef %137, ptr noundef %1, i32 noundef %2)
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %258, %241, %236, %227, %221, %215, %135, %20, %3, %133, %175, %45, %210, %197, %203, %142
  %141 = phi i32 [ %151, %142 ], [ %134, %133 ], [ 0, %3 ], [ 0, %20 ], [ 0, %135 ], [ %259, %258 ], [ 0, %236 ], [ 0, %227 ], [ 0, %221 ], [ 0, %215 ], [ 0, %241 ], [ 0, %175 ], [ %25, %45 ], [ 0, %203 ], [ 0, %197 ], [ %185, %210 ]
  ret i32 %141

142:                                              ; preds = %135
  %143 = getelementptr inbounds %struct.tree_complex, ptr %0, i64 0, i32 2
  %144 = load ptr, ptr %143, align 8, !tbaa !17
  %145 = sext i32 %138 to i64
  %146 = getelementptr inbounds i8, ptr %1, i64 %145
  %147 = sub nsw i32 %2, %138
  %148 = tail call i32 @native_encode_expr(ptr noundef %144, ptr noundef nonnull %146, i32 noundef %147)
  %149 = icmp eq i32 %148, %138
  %150 = add nsw i32 %148, %138
  %151 = select i1 %149, i32 %150, i32 0
  br label %140

152:                                              ; preds = %3
  %153 = getelementptr inbounds %struct.tree_vector, ptr %0, i64 0, i32 1
  %154 = load ptr, ptr %153, align 8, !tbaa !17
  %155 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %156 = load ptr, ptr %155, align 8, !tbaa !17
  %157 = getelementptr inbounds %struct.tree_type, ptr %156, i64 0, i32 6
  %158 = load i32, ptr %157, align 4
  %159 = and i32 %158, 1023
  %160 = zext i32 %159 to i64
  %161 = shl nuw i64 1, %160
  %162 = trunc i64 %161 to i32
  %163 = getelementptr inbounds %struct.tree_common, ptr %156, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = load i64, ptr %164, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 14
  br i1 %167, label %168, label %170

168:                                              ; preds = %152
  %169 = tail call i32 @vector_type_mode(ptr noundef nonnull %164) #24
  br label %175

170:                                              ; preds = %152
  %171 = getelementptr inbounds %struct.tree_type, ptr %164, i64 0, i32 6
  %172 = load i32, ptr %171, align 4
  %173 = lshr i32 %172, 16
  %174 = and i32 %173, 255
  br label %175

175:                                              ; preds = %170, %168
  %176 = phi i32 [ %169, %168 ], [ %174, %170 ]
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %177
  %179 = load i8, ptr %178, align 1, !tbaa !17
  %180 = zext i8 %179 to i32
  %181 = icmp sgt i32 %162, 0
  br i1 %181, label %182, label %140

182:                                              ; preds = %175
  %183 = zext i8 %179 to i64
  %184 = zext i8 %179 to i64
  %185 = mul i32 %180, %162
  br label %186

186:                                              ; preds = %182, %210
  %187 = phi i64 [ 0, %182 ], [ %212, %210 ]
  %188 = phi ptr [ %154, %182 ], [ %211, %210 ]
  %189 = phi i32 [ 0, %182 ], [ %213, %210 ]
  %190 = icmp eq ptr %188, null
  br i1 %190, label %203, label %191

191:                                              ; preds = %186
  %192 = getelementptr inbounds %struct.tree_list, ptr %188, i64 0, i32 2
  %193 = load ptr, ptr %192, align 8, !tbaa !17
  %194 = getelementptr inbounds %struct.tree_common, ptr %188, i64 0, i32 1
  %195 = load ptr, ptr %194, align 8, !tbaa !17
  %196 = icmp eq ptr %193, null
  br i1 %196, label %203, label %197

197:                                              ; preds = %191
  %198 = getelementptr inbounds i8, ptr %1, i64 %187
  %199 = trunc i64 %187 to i32
  %200 = sub nsw i32 %2, %199
  %201 = tail call i32 @native_encode_expr(ptr noundef nonnull %193, ptr noundef %198, i32 noundef %200)
  %202 = icmp eq i32 %201, %180
  br i1 %202, label %210, label %140

203:                                              ; preds = %186, %191
  %204 = phi ptr [ %195, %191 ], [ null, %186 ]
  %205 = add nuw nsw i64 %187, %184
  %206 = trunc i64 %205 to i32
  %207 = icmp sgt i32 %206, %2
  br i1 %207, label %140, label %208

208:                                              ; preds = %203
  %209 = getelementptr inbounds i8, ptr %1, i64 %187
  tail call void @llvm.memset.p0.i64(ptr align 1 %209, i8 0, i64 %183, i1 false)
  br label %210

210:                                              ; preds = %208, %197
  %211 = phi ptr [ %204, %208 ], [ %195, %197 ]
  %212 = add nuw nsw i64 %187, %183
  %213 = add nuw nsw i32 %189, 1
  %214 = icmp eq i32 %213, %162
  br i1 %214, label %140, label %186, !llvm.loop !60

215:                                              ; preds = %3
  %216 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %217 = load ptr, ptr %216, align 8, !tbaa !17
  %218 = load i64, ptr %217, align 8
  %219 = and i64 %218, 65535
  %220 = icmp eq i64 %219, 15
  br i1 %220, label %221, label %140

221:                                              ; preds = %215
  %222 = getelementptr inbounds %struct.tree_common, ptr %217, i64 0, i32 2
  %223 = load ptr, ptr %222, align 8, !tbaa !17
  %224 = load i64, ptr %223, align 8
  %225 = and i64 %224, 65535
  %226 = icmp eq i64 %225, 8
  br i1 %226, label %227, label %140

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.tree_type, ptr %223, i64 0, i32 6
  %229 = load i32, ptr %228, align 4
  %230 = lshr i32 %229, 16
  %231 = and i32 %230, 255
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %232
  %234 = load i8, ptr %233, align 1, !tbaa !17
  %235 = icmp eq i8 %234, 1
  br i1 %235, label %236, label %140

236:                                              ; preds = %227
  %237 = getelementptr inbounds %struct.tree_type, ptr %217, i64 0, i32 3
  %238 = load ptr, ptr %237, align 8, !tbaa !17
  %239 = tail call i32 @host_integerp(ptr noundef %238, i32 noundef 0) #24
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %140, label %241

241:                                              ; preds = %236
  %242 = load ptr, ptr %237, align 8, !tbaa !17
  %243 = tail call i64 @tree_low_cst(ptr noundef %242, i32 noundef 0) #24
  %244 = sext i32 %2 to i64
  %245 = icmp sgt i64 %243, %244
  br i1 %245, label %140, label %246

246:                                              ; preds = %241
  %247 = getelementptr inbounds %struct.tree_string, ptr %0, i64 0, i32 1
  %248 = load i32, ptr %247, align 8, !tbaa !17
  %249 = sext i32 %248 to i64
  %250 = icmp sgt i64 %243, %249
  %251 = getelementptr inbounds %struct.tree_string, ptr %0, i64 0, i32 2
  br i1 %250, label %252, label %257

252:                                              ; preds = %246
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr nonnull align 4 %251, i64 %249, i1 false)
  %253 = load i32, ptr %247, align 8, !tbaa !17
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i8, ptr %1, i64 %254
  %256 = sub nsw i64 %243, %254
  tail call void @llvm.memset.p0.i64(ptr align 1 %255, i8 0, i64 %256, i1 false)
  br label %258

257:                                              ; preds = %246
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1, ptr nonnull align 4 %251, i64 %243, i1 false)
  br label %258

258:                                              ; preds = %257, %252
  %259 = trunc i64 %243 to i32
  br label %140
}

declare i64 @real_to_target(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @host_integerp(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i64 @tree_low_cst(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @native_interpret_expr(ptr noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = alloca %struct.real_value, align 8
  %5 = alloca [6 x i64], align 16
  %6 = load i64, ptr %0, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %235 [
    i16 8, label %8
    i16 6, label %8
    i16 7, label %8
    i16 9, label %101
    i16 13, label %157
    i16 14, label %188
  ]

8:                                                ; preds = %3, %3, %3
  %9 = and i64 %6, 65535
  %10 = icmp eq i64 %9, 14
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %18

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %15 = load i32, ptr %14, align 4
  %16 = lshr i32 %15, 16
  %17 = and i32 %16, 255
  br label %18

18:                                               ; preds = %13, %11
  %19 = phi i32 [ %12, %11 ], [ %17, %13 ]
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %20
  %22 = load i8, ptr %21, align 1, !tbaa !17
  %23 = zext i8 %22 to i32
  %24 = icmp sgt i32 %23, %2
  %25 = icmp ugt i8 %22, 16
  %26 = or i1 %25, %24
  br i1 %26, label %235, label %27

27:                                               ; preds = %18
  %28 = icmp eq i8 %22, 0
  br i1 %28, label %97, label %29

29:                                               ; preds = %27
  %30 = zext i8 %22 to i64
  %31 = and i64 %30, 1
  %32 = icmp eq i8 %22, 1
  br i1 %32, label %76, label %33

33:                                               ; preds = %29
  %34 = and i64 %30, 254
  br label %35

35:                                               ; preds = %70, %33
  %36 = phi i64 [ 0, %33 ], [ %73, %70 ]
  %37 = phi i64 [ 0, %33 ], [ %72, %70 ]
  %38 = phi i64 [ 0, %33 ], [ %71, %70 ]
  %39 = phi i64 [ 0, %33 ], [ %74, %70 ]
  %40 = shl nsw i64 %36, 3
  %41 = getelementptr inbounds i8, ptr %1, i64 %36
  %42 = load i8, ptr %41, align 1, !tbaa !17
  %43 = icmp ult i64 %40, 64
  %44 = zext i8 %42 to i64
  br i1 %43, label %45, label %48

45:                                               ; preds = %35
  %46 = shl i64 %44, %40
  %47 = or i64 %46, %38
  br label %53

48:                                               ; preds = %35
  %49 = add nuw nsw i64 %40, 4294967232
  %50 = and i64 %49, 4294967280
  %51 = shl i64 %44, %50
  %52 = or i64 %51, %37
  br label %53

53:                                               ; preds = %48, %45
  %54 = phi i64 [ %47, %45 ], [ %38, %48 ]
  %55 = phi i64 [ %37, %45 ], [ %52, %48 ]
  %56 = or i64 %36, 1
  %57 = shl nsw i64 %56, 3
  %58 = getelementptr inbounds i8, ptr %1, i64 %56
  %59 = load i8, ptr %58, align 1, !tbaa !17
  %60 = icmp ult i64 %57, 64
  %61 = zext i8 %59 to i64
  br i1 %60, label %67, label %62

62:                                               ; preds = %53
  %63 = add nuw nsw i64 %57, 4294967232
  %64 = and i64 %63, 4294967288
  %65 = shl i64 %61, %64
  %66 = or i64 %65, %55
  br label %70

67:                                               ; preds = %53
  %68 = shl i64 %61, %57
  %69 = or i64 %68, %54
  br label %70

70:                                               ; preds = %67, %62
  %71 = phi i64 [ %69, %67 ], [ %54, %62 ]
  %72 = phi i64 [ %55, %67 ], [ %66, %62 ]
  %73 = add nuw nsw i64 %36, 2
  %74 = add i64 %39, 2
  %75 = icmp eq i64 %74, %34
  br i1 %75, label %76, label %35, !llvm.loop !61

76:                                               ; preds = %70, %29
  %77 = phi i64 [ undef, %29 ], [ %71, %70 ]
  %78 = phi i64 [ undef, %29 ], [ %72, %70 ]
  %79 = phi i64 [ 0, %29 ], [ %73, %70 ]
  %80 = phi i64 [ 0, %29 ], [ %72, %70 ]
  %81 = phi i64 [ 0, %29 ], [ %71, %70 ]
  %82 = icmp eq i64 %31, 0
  br i1 %82, label %97, label %83

83:                                               ; preds = %76
  %84 = shl nsw i64 %79, 3
  %85 = getelementptr inbounds i8, ptr %1, i64 %79
  %86 = load i8, ptr %85, align 1, !tbaa !17
  %87 = icmp ult i64 %84, 64
  %88 = zext i8 %86 to i64
  br i1 %87, label %94, label %89

89:                                               ; preds = %83
  %90 = add nuw nsw i64 %84, 4294967232
  %91 = and i64 %90, 4294967288
  %92 = shl i64 %88, %91
  %93 = or i64 %92, %80
  br label %97

94:                                               ; preds = %83
  %95 = shl i64 %88, %84
  %96 = or i64 %95, %81
  br label %97

97:                                               ; preds = %76, %94, %89, %27
  %98 = phi i64 [ 0, %27 ], [ %77, %76 ], [ %96, %94 ], [ %81, %89 ]
  %99 = phi i64 [ 0, %27 ], [ %78, %76 ], [ %80, %94 ], [ %93, %89 ]
  %100 = tail call ptr @build_int_cst_wide_type(ptr noundef nonnull %0, i64 noundef %98, i64 noundef %99) #24
  br label %235

101:                                              ; preds = %3
  %102 = and i64 %6, 65535
  %103 = icmp eq i64 %102, 14
  br i1 %103, label %104, label %107

104:                                              ; preds = %101
  %105 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %106 = load i64, ptr %0, align 8
  br label %112

107:                                              ; preds = %101
  %108 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %109 = load i32, ptr %108, align 4
  %110 = lshr i32 %109, 16
  %111 = and i32 %110, 255
  br label %112

112:                                              ; preds = %107, %104
  %113 = phi i64 [ %106, %104 ], [ %6, %107 ]
  %114 = phi i32 [ %105, %104 ], [ %111, %107 ]
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %5) #24
  %115 = and i64 %113, 65535
  %116 = icmp eq i64 %115, 14
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %124

119:                                              ; preds = %112
  %120 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %121 = load i32, ptr %120, align 4
  %122 = lshr i32 %121, 16
  %123 = and i32 %122, 255
  br label %124

124:                                              ; preds = %119, %117
  %125 = phi i32 [ %118, %117 ], [ %123, %119 ]
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %126
  %128 = load i8, ptr %127, align 1, !tbaa !17
  %129 = zext i8 %128 to i32
  %130 = icmp sgt i32 %129, %2
  %131 = icmp ugt i8 %128, 24
  %132 = or i1 %131, %130
  br i1 %132, label %155, label %133

133:                                              ; preds = %124
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(48) %5, i8 0, i64 48, i1 false)
  %134 = icmp eq i8 %128, 0
  br i1 %134, label %153, label %135

135:                                              ; preds = %133
  %136 = shl nuw nsw i32 %129, 3
  %137 = zext i32 %136 to i64
  br label %138

138:                                              ; preds = %138, %135
  %139 = phi i64 [ 0, %135 ], [ %151, %138 ]
  %140 = lshr exact i64 %139, 3
  %141 = getelementptr inbounds i8, ptr %1, i64 %140
  %142 = load i8, ptr %141, align 1, !tbaa !17
  %143 = zext i8 %142 to i64
  %144 = and i64 %139, 24
  %145 = shl nuw nsw i64 %143, %144
  %146 = lshr i64 %139, 5
  %147 = and i64 %146, 134217727
  %148 = getelementptr inbounds [6 x i64], ptr %5, i64 0, i64 %147
  %149 = load i64, ptr %148, align 8, !tbaa !24
  %150 = or i64 %145, %149
  store i64 %150, ptr %148, align 8, !tbaa !24
  %151 = add nuw nsw i64 %139, 8
  %152 = icmp ult i64 %151, %137
  br i1 %152, label %138, label %153, !llvm.loop !62

153:                                              ; preds = %138, %133
  call void @real_from_target(ptr noundef nonnull %4, ptr noundef nonnull %5, i32 noundef %114) #24
  %154 = call ptr @build_real(ptr noundef nonnull %0, ptr noundef nonnull byval(%struct.real_value) align 8 %4) #24
  br label %155

155:                                              ; preds = %124, %153
  %156 = phi ptr [ %154, %153 ], [ null, %124 ]
  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %4) #24
  br label %235

157:                                              ; preds = %3
  %158 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %159 = load ptr, ptr %158, align 8, !tbaa !17
  %160 = load i64, ptr %159, align 8
  %161 = and i64 %160, 65535
  %162 = icmp eq i64 %161, 14
  br i1 %162, label %163, label %165

163:                                              ; preds = %157
  %164 = tail call i32 @vector_type_mode(ptr noundef nonnull %159) #24
  br label %170

165:                                              ; preds = %157
  %166 = getelementptr inbounds %struct.tree_type, ptr %159, i64 0, i32 6
  %167 = load i32, ptr %166, align 4
  %168 = lshr i32 %167, 16
  %169 = and i32 %168, 255
  br label %170

170:                                              ; preds = %165, %163
  %171 = phi i32 [ %164, %163 ], [ %169, %165 ]
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %172
  %174 = load i8, ptr %173, align 1, !tbaa !17
  %175 = zext i8 %174 to i32
  %176 = shl nuw nsw i32 %175, 1
  %177 = icmp sgt i32 %176, %2
  br i1 %177, label %235, label %178

178:                                              ; preds = %170
  %179 = tail call ptr @native_interpret_expr(ptr noundef nonnull %159, ptr noundef %1, i32 noundef %175)
  %180 = icmp eq ptr %179, null
  br i1 %180, label %235, label %181

181:                                              ; preds = %178
  %182 = zext i8 %174 to i64
  %183 = getelementptr inbounds i8, ptr %1, i64 %182
  %184 = tail call ptr @native_interpret_expr(ptr noundef nonnull %159, ptr noundef %183, i32 noundef %175)
  %185 = icmp eq ptr %184, null
  br i1 %185, label %235, label %186

186:                                              ; preds = %181
  %187 = tail call ptr @build_complex(ptr noundef nonnull %0, ptr noundef nonnull %179, ptr noundef nonnull %184) #24
  br label %235

188:                                              ; preds = %3
  %189 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %190 = load ptr, ptr %189, align 8, !tbaa !17
  %191 = load i64, ptr %190, align 8
  %192 = and i64 %191, 65535
  %193 = icmp eq i64 %192, 14
  br i1 %193, label %194, label %196

194:                                              ; preds = %188
  %195 = tail call i32 @vector_type_mode(ptr noundef nonnull %190) #24
  br label %201

196:                                              ; preds = %188
  %197 = getelementptr inbounds %struct.tree_type, ptr %190, i64 0, i32 6
  %198 = load i32, ptr %197, align 4
  %199 = lshr i32 %198, 16
  %200 = and i32 %199, 255
  br label %201

201:                                              ; preds = %196, %194
  %202 = phi i32 [ %195, %194 ], [ %200, %196 ]
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %203
  %205 = load i8, ptr %204, align 1, !tbaa !17
  %206 = zext i8 %205 to i32
  %207 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %208 = load i32, ptr %207, align 4
  %209 = and i32 %208, 1023
  %210 = zext i32 %209 to i64
  %211 = shl nuw i64 1, %210
  %212 = trunc i64 %211 to i32
  %213 = mul nsw i32 %212, %206
  %214 = icmp sgt i32 %213, %2
  br i1 %214, label %235, label %215

215:                                              ; preds = %201
  %216 = icmp sgt i32 %212, 0
  br i1 %216, label %217, label %232

217:                                              ; preds = %215
  %218 = shl i64 4294967296, %210
  %219 = ashr exact i64 %218, 32
  %220 = zext i8 %205 to i64
  br label %221

221:                                              ; preds = %217, %229
  %222 = phi i64 [ %219, %217 ], [ %224, %229 ]
  %223 = phi ptr [ null, %217 ], [ %230, %229 ]
  %224 = add nsw i64 %222, -1
  %225 = mul nsw i64 %224, %220
  %226 = getelementptr inbounds i8, ptr %1, i64 %225
  %227 = tail call ptr @native_interpret_expr(ptr noundef nonnull %190, ptr noundef %226, i32 noundef %206)
  %228 = icmp eq ptr %227, null
  br i1 %228, label %235, label %229

229:                                              ; preds = %221
  %230 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef nonnull %227, ptr noundef %223) #24
  %231 = icmp sgt i64 %222, 1
  br i1 %231, label %221, label %232, !llvm.loop !63

232:                                              ; preds = %229, %215
  %233 = phi ptr [ null, %215 ], [ %230, %229 ]
  %234 = tail call ptr @build_vector(ptr noundef nonnull %0, ptr noundef %233) #24
  br label %235

235:                                              ; preds = %221, %232, %201, %186, %181, %178, %170, %97, %18, %3, %155
  %236 = phi ptr [ %156, %155 ], [ null, %3 ], [ %100, %97 ], [ null, %18 ], [ %187, %186 ], [ null, %170 ], [ null, %178 ], [ null, %181 ], [ %234, %232 ], [ null, %201 ], [ null, %221 ]
  ret ptr %236
}

declare ptr @build_int_cst_wide_type(ptr noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

declare void @real_from_target(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_fold_addr_expr_with_type_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = load i64, ptr %1, align 8
  %5 = and i64 %4, 65535
  %6 = icmp eq i64 %5, 150
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = load i64, ptr %9, align 8
  br label %11

11:                                               ; preds = %7, %3
  %12 = phi i64 [ %10, %7 ], [ %4, %3 ]
  %13 = phi ptr [ %9, %7 ], [ %1, %3 ]
  %14 = trunc i64 %12 to i16
  switch i16 %14, label %36 [
    i16 47, label %15
    i16 49, label %15
    i16 118, label %24
  ]

15:                                               ; preds = %11, %11
  %16 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 0, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.tree_common, ptr %17, i64 0, i32 2
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = icmp eq ptr %19, %2
  br i1 %20, label %39, label %21

21:                                               ; preds = %15
  %22 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %2, ptr noundef nonnull %17) #24
  %23 = getelementptr inbounds %struct.tree_exp, ptr %22, i64 0, i32 1
  store i32 %0, ptr %23, align 8, !tbaa !17
  br label %39

24:                                               ; preds = %11
  %25 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = getelementptr inbounds %struct.tree_common, ptr %26, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = tail call ptr @build_pointer_type(ptr noundef %28) #24
  %30 = tail call ptr @build_fold_addr_expr_with_type_loc(i32 noundef %0, ptr noundef %26, ptr noundef %29)
  %31 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %32 = load ptr, ptr %31, align 8, !tbaa !17
  %33 = icmp eq ptr %32, %2
  br i1 %33, label %39, label %34

34:                                               ; preds = %24
  %35 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %30)
  br label %39

36:                                               ; preds = %11
  %37 = tail call ptr @build1_stat(i32 noundef 121, ptr noundef %2, ptr noundef nonnull %13) #24
  %38 = getelementptr inbounds %struct.tree_exp, ptr %37, i64 0, i32 1
  store i32 %0, ptr %38, align 8, !tbaa !17
  br label %39

39:                                               ; preds = %36, %34, %24, %15, %21
  %40 = phi ptr [ %22, %21 ], [ %17, %15 ], [ %35, %34 ], [ %30, %24 ], [ %37, %36 ]
  ret ptr %40
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_fold_addr_expr_loc(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = tail call ptr @build_pointer_type(ptr noundef %4) #24
  %6 = tail call ptr @build_fold_addr_expr_with_type_loc(i32 noundef %0, ptr noundef %1, ptr noundef %5)
  ret ptr %6
}

declare ptr @build_pointer_type(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca ptr, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !17
  %14 = add i32 %13, -4
  %15 = icmp ult i32 %14, 7
  br i1 %15, label %16, label %20

16:                                               ; preds = %4
  %17 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %11
  %18 = load i8, ptr %17, align 1, !tbaa !17
  %19 = icmp eq i8 %18, 1
  br i1 %19, label %21, label %20

20:                                               ; preds = %16, %4
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 8353, ptr noundef nonnull @.str.1) #24
  br label %21

21:                                               ; preds = %16, %20
  %22 = icmp eq ptr %3, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  switch i32 %1, label %26 [
    i32 116, label %24
    i32 113, label %24
    i32 82, label %24
    i32 78, label %24
  ]

24:                                               ; preds = %23, %23, %23, %23
  %25 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %3) #24
  br label %28

26:                                               ; preds = %23
  %27 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %3) #24
  br label %28

28:                                               ; preds = %24, %26, %21
  %29 = phi ptr [ %25, %24 ], [ %27, %26 ], [ null, %21 ]
  %30 = icmp eq i32 %13, 6
  br i1 %30, label %31, label %195

31:                                               ; preds = %28
  %32 = load i64, ptr %29, align 8
  %33 = trunc i64 %32 to i16
  switch i16 %33, label %158 [
    i16 52, label %34
    i16 56, label %50
  ]

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %38, ptr noundef %40)
  %42 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %41)
  %43 = icmp eq ptr %42, null
  br i1 %43, label %44, label %47

44:                                               ; preds = %34
  %45 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %41) #24
  %46 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 1
  store i32 %0, ptr %46, align 8, !tbaa !17
  br label %47

47:                                               ; preds = %34, %44
  %48 = phi ptr [ %42, %34 ], [ %45, %44 ]
  %49 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %2, ptr noundef %36, ptr noundef nonnull %48) #24
  br label %1135

50:                                               ; preds = %31
  %51 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %52 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1, i32 0, i32 1
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = load i64, ptr %57, align 8
  %59 = and i64 %58, 65535
  %60 = icmp eq i64 %59, 19
  br i1 %60, label %70, label %61

61:                                               ; preds = %50
  %62 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %63 = load ptr, ptr %62, align 8, !tbaa !17
  %64 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %63, ptr noundef nonnull %53)
  %65 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %64)
  %66 = icmp eq ptr %65, null
  br i1 %66, label %67, label %70

67:                                               ; preds = %61
  %68 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %64) #24
  %69 = getelementptr inbounds %struct.tree_exp, ptr %68, i64 0, i32 1
  store i32 %0, ptr %69, align 8, !tbaa !17
  br label %70

70:                                               ; preds = %67, %61, %50
  %71 = phi ptr [ %53, %50 ], [ %65, %61 ], [ %68, %67 ]
  %72 = getelementptr inbounds %struct.tree_common, ptr %55, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = load i64, ptr %73, align 8
  %75 = and i64 %74, 65535
  %76 = icmp eq i64 %75, 19
  br i1 %76, label %86, label %77

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !17
  %80 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %79, ptr noundef nonnull %55)
  %81 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %80)
  %82 = icmp eq ptr %81, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %77
  %84 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %80) #24
  %85 = getelementptr inbounds %struct.tree_exp, ptr %84, i64 0, i32 1
  store i32 %0, ptr %85, align 8, !tbaa !17
  br label %86

86:                                               ; preds = %83, %77, %70
  %87 = phi ptr [ %55, %70 ], [ %81, %77 ], [ %84, %83 ]
  %88 = load ptr, ptr %51, align 8, !tbaa !17
  %89 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 56), align 4, !tbaa !17
  %90 = icmp eq i32 %89, 9
  br i1 %90, label %91, label %92

91:                                               ; preds = %86
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %92

92:                                               ; preds = %91, %86
  %93 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef 56, ptr noundef %2, ptr noundef %88, ptr noundef nonnull %71, ptr noundef nonnull %87)
  %94 = icmp eq ptr %93, null
  br i1 %94, label %95, label %98

95:                                               ; preds = %92
  %96 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %2, ptr noundef %88, ptr noundef nonnull %71, ptr noundef nonnull %87) #24
  %97 = getelementptr inbounds %struct.tree_exp, ptr %96, i64 0, i32 1
  store i32 %0, ptr %97, align 8, !tbaa !17
  br label %98

98:                                               ; preds = %92, %95
  %99 = phi ptr [ %93, %92 ], [ %96, %95 ]
  switch i32 %1, label %1135 [
    i32 117, label %100
    i32 116, label %100
    i32 113, label %100
  ]

100:                                              ; preds = %98, %98, %98
  %101 = load i64, ptr %99, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 56
  br i1 %103, label %104, label %1135

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.tree_exp, ptr %99, i64 0, i32 3
  %106 = getelementptr inbounds %struct.tree_exp, ptr %99, i64 1
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  %108 = load i64, ptr %107, align 8
  %109 = trunc i64 %108 to i32
  %110 = and i32 %109, 65535
  %111 = icmp eq i32 %110, %1
  br i1 %111, label %112, label %1135

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.tree_exp, ptr %99, i64 1, i32 0, i32 1
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = load i64, ptr %114, align 8
  %116 = trunc i64 %115 to i32
  %117 = and i32 %116, 65535
  %118 = icmp ne i32 %117, %1
  %119 = icmp eq i32 %117, 19
  %120 = or i1 %119, %118
  br i1 %120, label %1135, label %121

121:                                              ; preds = %112
  %122 = getelementptr inbounds %struct.tree_exp, ptr %107, i64 0, i32 3
  %123 = load ptr, ptr %122, align 8, !tbaa !17
  %124 = getelementptr inbounds %struct.tree_common, ptr %123, i64 0, i32 2
  %125 = load ptr, ptr %124, align 8, !tbaa !17
  %126 = getelementptr inbounds %struct.tree_exp, ptr %114, i64 0, i32 3
  %127 = load ptr, ptr %126, align 8, !tbaa !17
  %128 = getelementptr inbounds %struct.tree_common, ptr %127, i64 0, i32 2
  %129 = load ptr, ptr %128, align 8, !tbaa !17
  %130 = icmp eq ptr %125, %129
  br i1 %130, label %131, label %1135

131:                                              ; preds = %121
  %132 = getelementptr inbounds %struct.tree_common, ptr %99, i64 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !17
  %134 = load i64, ptr %133, align 8
  %135 = trunc i64 %134 to i32
  %136 = and i32 %135, 65535
  %137 = add nsw i32 %136, -6
  %138 = icmp ult i32 %137, 3
  br i1 %138, label %139, label %153

139:                                              ; preds = %131
  %140 = load i64, ptr %125, align 8
  %141 = trunc i64 %140 to i32
  %142 = and i32 %141, 65535
  %143 = add nsw i32 %142, -6
  %144 = icmp ult i32 %143, 3
  br i1 %144, label %145, label %153

145:                                              ; preds = %139
  %146 = getelementptr inbounds %struct.tree_type, ptr %133, i64 0, i32 6
  %147 = load i32, ptr %146, align 4
  %148 = and i32 %147, 1023
  %149 = icmp ugt i32 %148, 32
  %150 = load i32, ptr @flag_syntax_only, align 4
  %151 = icmp ne i32 %150, 0
  %152 = select i1 %149, i1 true, i1 %151
  br i1 %152, label %153, label %1135

153:                                              ; preds = %139, %131, %145
  %154 = load ptr, ptr %105, align 8, !tbaa !17
  %155 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %125, ptr noundef %154, ptr noundef nonnull %123, ptr noundef nonnull %127) #24
  %156 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %155) #24
  %157 = getelementptr inbounds %struct.tree_exp, ptr %156, i64 0, i32 1
  store i32 %0, ptr %157, align 8, !tbaa !17
  br label %1135

158:                                              ; preds = %31
  %159 = and i64 %32, 65535
  %160 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %159
  %161 = load i32, ptr %160, align 4, !tbaa !17
  %162 = icmp eq i32 %161, 5
  br i1 %162, label %163, label %195

163:                                              ; preds = %158
  %164 = load i64, ptr %2, align 8
  %165 = trunc i64 %164 to i16
  switch i16 %165, label %169 [
    i16 7, label %166
    i16 8, label %195
  ]

166:                                              ; preds = %163
  %167 = tail call ptr @copy_node_stat(ptr noundef nonnull %29) #24
  %168 = getelementptr inbounds %struct.tree_common, ptr %167, i64 0, i32 2
  store ptr %2, ptr %168, align 8, !tbaa !17
  br label %1135

169:                                              ; preds = %163
  %170 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %171 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %170)
  %172 = icmp eq ptr %171, null
  br i1 %172, label %173, label %176

173:                                              ; preds = %169
  %174 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef nonnull %2, ptr noundef %170) #24
  %175 = getelementptr inbounds %struct.tree_exp, ptr %174, i64 0, i32 1
  store i32 %0, ptr %175, align 8, !tbaa !17
  br label %176

176:                                              ; preds = %169, %173
  %177 = phi ptr [ %171, %169 ], [ %174, %173 ]
  %178 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %179 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %178)
  %180 = icmp eq ptr %179, null
  br i1 %180, label %181, label %184

181:                                              ; preds = %176
  %182 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef nonnull %2, ptr noundef %178) #24
  %183 = getelementptr inbounds %struct.tree_exp, ptr %182, i64 0, i32 1
  store i32 %0, ptr %183, align 8, !tbaa !17
  br label %184

184:                                              ; preds = %176, %181
  %185 = phi ptr [ %179, %176 ], [ %182, %181 ]
  %186 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 56), align 4, !tbaa !17
  %187 = icmp eq i32 %186, 9
  br i1 %187, label %188, label %189

188:                                              ; preds = %184
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %189

189:                                              ; preds = %188, %184
  %190 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef 56, ptr noundef nonnull %2, ptr noundef nonnull %29, ptr noundef nonnull %177, ptr noundef nonnull %185)
  %191 = icmp eq ptr %190, null
  br i1 %191, label %192, label %1135

192:                                              ; preds = %189
  %193 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef nonnull %2, ptr noundef nonnull %29, ptr noundef nonnull %177, ptr noundef nonnull %185) #24
  %194 = getelementptr inbounds %struct.tree_exp, ptr %193, i64 0, i32 1
  store i32 %0, ptr %194, align 8, !tbaa !17
  br label %1135

195:                                              ; preds = %163, %158, %28
  switch i32 %1, label %1135 [
    i32 112, label %196
    i32 116, label %206
    i32 113, label %206
    i32 78, label %206
    i32 77, label %206
    i32 114, label %720
    i32 115, label %725
    i32 118, label %727
    i32 79, label %779
    i32 82, label %784
    i32 124, label %821
    i32 90, label %858
    i32 96, label %985
    i32 43, label %1000
    i32 44, label %1060
    i32 47, label %1122
  ]

196:                                              ; preds = %195
  %197 = load i64, ptr %3, align 8
  %198 = and i64 %197, 65535
  %199 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %198
  %200 = load i32, ptr %199, align 4, !tbaa !17
  %201 = icmp eq i32 %200, 1
  %202 = icmp eq i64 %198, 112
  %203 = or i1 %201, %202
  br i1 %203, label %204, label %1135

204:                                              ; preds = %196
  %205 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %3)
  br label %1135

206:                                              ; preds = %195, %195, %195, %195
  %207 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %208 = load ptr, ptr %207, align 8, !tbaa !17
  %209 = icmp eq ptr %208, %2
  br i1 %209, label %1135, label %210

210:                                              ; preds = %206
  %211 = load i64, ptr %3, align 8
  %212 = and i64 %211, 65535
  %213 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %212
  %214 = load i32, ptr %213, align 4, !tbaa !17
  %215 = icmp eq i32 %214, 5
  br i1 %215, label %216, label %234

216:                                              ; preds = %210
  %217 = load i64, ptr %2, align 8
  %218 = trunc i64 %217 to i32
  %219 = and i32 %218, 65535
  %220 = add nsw i32 %219, -6
  %221 = icmp ult i32 %220, 3
  br i1 %221, label %222, label %234

222:                                              ; preds = %216
  %223 = trunc i64 %211 to i32
  %224 = and i32 %223, 65535
  %225 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %226 = load ptr, ptr %225, align 8, !tbaa !17
  %227 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %228 = load ptr, ptr %227, align 8, !tbaa !17
  %229 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %224, ptr noundef nonnull %2, ptr noundef %226, ptr noundef %228)
  %230 = icmp eq ptr %229, null
  br i1 %230, label %231, label %1135

231:                                              ; preds = %222
  %232 = tail call ptr @build2_stat(i32 noundef %224, ptr noundef nonnull %2, ptr noundef %226, ptr noundef %228) #24
  %233 = getelementptr inbounds %struct.tree_exp, ptr %232, i64 0, i32 1
  store i32 %0, ptr %233, align 8, !tbaa !17
  br label %1135

234:                                              ; preds = %216, %210
  %235 = trunc i64 %211 to i16
  switch i16 %235, label %469 [
    i16 116, label %236
    i16 113, label %236
  ]

236:                                              ; preds = %234, %234
  %237 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %238 = load ptr, ptr %237, align 8, !tbaa !17
  %239 = getelementptr inbounds %struct.tree_common, ptr %238, i64 0, i32 2
  %240 = load ptr, ptr %239, align 8, !tbaa !17
  %241 = load i64, ptr %240, align 8
  %242 = trunc i64 %241 to i32
  %243 = and i32 %242, 65535
  %244 = add nsw i32 %243, -6
  %245 = icmp ult i32 %244, 3
  %246 = trunc i64 %241 to i16
  switch i16 %246, label %253 [
    i16 9, label %254
    i16 13, label %247
    i16 14, label %247
  ]

247:                                              ; preds = %236, %236
  %248 = getelementptr inbounds %struct.tree_common, ptr %240, i64 0, i32 2
  %249 = load ptr, ptr %248, align 8, !tbaa !17
  %250 = load i64, ptr %249, align 8
  %251 = and i64 %250, 65535
  %252 = icmp eq i64 %251, 9
  br label %254

253:                                              ; preds = %236
  br label %254

254:                                              ; preds = %236, %253, %247
  %255 = phi i1 [ true, %236 ], [ %252, %247 ], [ false, %253 ]
  %256 = and i64 %241, 65535
  %257 = icmp eq i64 %256, 14
  %258 = getelementptr inbounds %struct.tree_type, ptr %240, i64 0, i32 6
  %259 = load i32, ptr %258, align 4
  %260 = and i32 %259, 1023
  %261 = lshr i32 %242, 21
  %262 = and i32 %261, 1
  %263 = load i64, ptr %208, align 8
  %264 = trunc i64 %263 to i32
  %265 = and i32 %264, 65535
  %266 = add nsw i32 %265, -6
  %267 = icmp ult i32 %266, 3
  %268 = icmp eq i32 %265, 10
  %269 = icmp eq i32 %265, 12
  %270 = or i1 %268, %269
  %271 = trunc i64 %263 to i16
  switch i16 %271, label %278 [
    i16 9, label %279
    i16 13, label %272
    i16 14, label %272
  ]

272:                                              ; preds = %254, %254
  %273 = getelementptr inbounds %struct.tree_common, ptr %208, i64 0, i32 2
  %274 = load ptr, ptr %273, align 8, !tbaa !17
  %275 = load i64, ptr %274, align 8
  %276 = and i64 %275, 65535
  %277 = icmp eq i64 %276, 9
  br label %279

278:                                              ; preds = %254
  br label %279

279:                                              ; preds = %254, %278, %272
  %280 = phi i1 [ true, %254 ], [ %277, %272 ], [ false, %278 ]
  %281 = and i64 %263, 65535
  %282 = icmp eq i64 %281, 14
  %283 = getelementptr inbounds %struct.tree_type, ptr %208, i64 0, i32 6
  %284 = load i32, ptr %283, align 4
  %285 = and i32 %284, 1023
  %286 = lshr i32 %264, 21
  %287 = and i32 %286, 1
  %288 = load i64, ptr %2, align 8
  %289 = trunc i64 %288 to i32
  %290 = and i32 %289, 65535
  %291 = add nsw i32 %290, -6
  %292 = icmp ult i32 %291, 3
  %293 = trunc i64 %288 to i16
  switch i16 %293, label %300 [
    i16 9, label %301
    i16 13, label %294
    i16 14, label %294
  ]

294:                                              ; preds = %279, %279
  %295 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %296 = load ptr, ptr %295, align 8, !tbaa !17
  %297 = load i64, ptr %296, align 8
  %298 = and i64 %297, 65535
  %299 = icmp eq i64 %298, 9
  br label %301

300:                                              ; preds = %279
  br label %301

301:                                              ; preds = %279, %300, %294
  %302 = phi i1 [ true, %279 ], [ %299, %294 ], [ false, %300 ]
  %303 = and i64 %288, 65535
  %304 = icmp eq i64 %303, 14
  %305 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %306 = load i32, ptr %305, align 4
  %307 = and i32 %306, 1023
  %308 = getelementptr inbounds %struct.tree_type, ptr %240, i64 0, i32 16
  %309 = load ptr, ptr %308, align 8, !tbaa !17
  %310 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 16
  %311 = load ptr, ptr %310, align 8, !tbaa !17
  %312 = icmp eq ptr %309, %311
  br i1 %312, label %313, label %322

313:                                              ; preds = %301
  %314 = or i1 %267, %270
  %315 = and i1 %314, %292
  %316 = select i1 %280, i1 %302, i1 false
  %317 = select i1 %315, i1 true, i1 %316
  %318 = icmp uge i32 %285, %307
  %319 = select i1 %317, i1 %318, i1 false
  br i1 %319, label %320, label %322

320:                                              ; preds = %313
  %321 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef nonnull %238)
  br label %1135

322:                                              ; preds = %313, %301
  %323 = and i1 %245, %267
  %324 = select i1 %280, i1 %255, i1 false
  %325 = select i1 %323, i1 true, i1 %324
  %326 = and i1 %257, %282
  %327 = or i1 %326, %325
  %328 = xor i1 %327, true
  %329 = icmp ult i32 %285, %260
  %330 = select i1 %328, i1 true, i1 %329
  br i1 %330, label %384, label %331

331:                                              ; preds = %322
  %332 = icmp eq i32 %287, %262
  %333 = or i1 %282, %332
  %334 = or i1 %333, %280
  br i1 %334, label %335, label %384

335:                                              ; preds = %331
  br i1 %304, label %336, label %338

336:                                              ; preds = %335
  %337 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %341

338:                                              ; preds = %335
  %339 = lshr i32 %306, 16
  %340 = and i32 %339, 255
  br label %341

341:                                              ; preds = %338, %336
  %342 = phi i32 [ %337, %336 ], [ %340, %338 ]
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %343
  %345 = load i8, ptr %344, align 1, !tbaa !17
  %346 = zext i8 %345 to i32
  %347 = shl nuw nsw i32 %346, 3
  %348 = icmp eq i32 %307, %347
  br i1 %348, label %375, label %349

349:                                              ; preds = %341
  %350 = load i64, ptr %2, align 8
  %351 = and i64 %350, 65535
  %352 = icmp eq i64 %351, 14
  br i1 %352, label %353, label %355

353:                                              ; preds = %349
  %354 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %359

355:                                              ; preds = %349
  %356 = load i32, ptr %305, align 4
  %357 = lshr i32 %356, 16
  %358 = and i32 %357, 255
  br label %359

359:                                              ; preds = %355, %353
  %360 = phi i32 [ %354, %353 ], [ %358, %355 ]
  %361 = load i64, ptr %208, align 8
  %362 = and i64 %361, 65535
  %363 = icmp eq i64 %362, 14
  br i1 %363, label %364, label %366

364:                                              ; preds = %359
  %365 = tail call i32 @vector_type_mode(ptr noundef nonnull %208) #24
  br label %370

366:                                              ; preds = %359
  %367 = load i32, ptr %283, align 4
  %368 = lshr i32 %367, 16
  %369 = and i32 %368, 255
  br label %370

370:                                              ; preds = %366, %364
  %371 = phi i32 [ %365, %364 ], [ %369, %366 ]
  %372 = icmp eq i32 %360, %371
  %373 = freeze i1 %372
  br i1 %373, label %384, label %374

374:                                              ; preds = %370
  switch i16 %293, label %376 [
    i16 12, label %382
    i16 10, label %382
  ]

375:                                              ; preds = %341
  switch i16 %293, label %376 [
    i16 12, label %382
    i16 10, label %382
  ]

376:                                              ; preds = %375, %374
  %377 = icmp ne i32 %285, %260
  %378 = select i1 %304, i1 %377, i1 false
  br i1 %378, label %384, label %379

379:                                              ; preds = %376
  %380 = load ptr, ptr %237, align 8, !tbaa !17
  %381 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %380)
  br label %1135

382:                                              ; preds = %375, %375, %374, %374
  %383 = icmp ult i32 %260, %285
  br label %397

384:                                              ; preds = %376, %370, %331, %322
  %385 = and i1 %323, %292
  %386 = icmp ult i32 %260, %285
  %387 = select i1 %385, i1 %386, i1 false
  br i1 %387, label %388, label %397

388:                                              ; preds = %384
  %389 = icmp uge i32 %285, %307
  %390 = icmp eq i32 %262, 0
  %391 = or i1 %390, %389
  %392 = icmp ne i32 %287, 0
  %393 = or i1 %392, %391
  br i1 %393, label %397, label %394

394:                                              ; preds = %388
  %395 = load ptr, ptr %237, align 8, !tbaa !17
  %396 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %395)
  br label %1135

397:                                              ; preds = %382, %388, %384
  %398 = phi i1 [ %383, %382 ], [ true, %388 ], [ %386, %384 ]
  %399 = select i1 %255, i1 true, i1 %280
  %400 = select i1 %399, i1 true, i1 %302
  %401 = or i1 %257, %400
  %402 = or i1 %282, %401
  %403 = or i1 %304, %402
  br i1 %403, label %469, label %404

404:                                              ; preds = %397
  %405 = icmp ult i32 %285, %307
  %406 = select i1 %329, i1 %405, i1 false
  br i1 %406, label %469, label %407

407:                                              ; preds = %404
  %408 = icmp ne i32 %287, %262
  %409 = and i1 %408, %323
  %410 = select i1 %409, i1 %405, i1 false
  br i1 %410, label %469, label %411

411:                                              ; preds = %407
  %412 = icmp ne i32 %287, 0
  %413 = select i1 %412, i1 %398, i1 false
  %414 = and i64 %288, 2097152
  %415 = icmp ne i64 %414, 0
  %416 = select i1 %415, i1 %405, i1 false
  %417 = xor i1 %416, %413
  br i1 %417, label %469, label %418

418:                                              ; preds = %411
  switch i16 %246, label %421 [
    i16 12, label %419
    i16 10, label %419
  ]

419:                                              ; preds = %418, %418
  %420 = icmp eq i32 %285, %307
  br i1 %420, label %421, label %469

421:                                              ; preds = %418, %419
  switch i16 %293, label %424 [
    i16 12, label %422
    i16 10, label %422
  ]

422:                                              ; preds = %421, %421
  %423 = icmp eq i32 %260, %285
  br i1 %423, label %424, label %469

424:                                              ; preds = %421, %422
  %425 = load i64, ptr %2, align 8
  %426 = and i64 %425, 65535
  %427 = icmp eq i64 %426, 14
  br i1 %427, label %428, label %430

428:                                              ; preds = %424
  %429 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %434

430:                                              ; preds = %424
  %431 = load i32, ptr %305, align 4
  %432 = lshr i32 %431, 16
  %433 = and i32 %432, 255
  br label %434

434:                                              ; preds = %430, %428
  %435 = phi i32 [ %429, %428 ], [ %433, %430 ]
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %436
  %438 = load i8, ptr %437, align 1, !tbaa !17
  %439 = zext i8 %438 to i32
  %440 = shl nuw nsw i32 %439, 3
  %441 = icmp eq i32 %307, %440
  br i1 %441, label %466, label %442

442:                                              ; preds = %434
  %443 = load i64, ptr %2, align 8
  %444 = and i64 %443, 65535
  %445 = icmp eq i64 %444, 14
  br i1 %445, label %446, label %448

446:                                              ; preds = %442
  %447 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %452

448:                                              ; preds = %442
  %449 = load i32, ptr %305, align 4
  %450 = lshr i32 %449, 16
  %451 = and i32 %450, 255
  br label %452

452:                                              ; preds = %448, %446
  %453 = phi i32 [ %447, %446 ], [ %451, %448 ]
  %454 = load i64, ptr %208, align 8
  %455 = and i64 %454, 65535
  %456 = icmp eq i64 %455, 14
  br i1 %456, label %457, label %459

457:                                              ; preds = %452
  %458 = tail call i32 @vector_type_mode(ptr noundef nonnull %208) #24
  br label %463

459:                                              ; preds = %452
  %460 = load i32, ptr %283, align 4
  %461 = lshr i32 %460, 16
  %462 = and i32 %461, 255
  br label %463

463:                                              ; preds = %459, %457
  %464 = phi i32 [ %458, %457 ], [ %462, %459 ]
  %465 = icmp eq i32 %453, %464
  br i1 %465, label %469, label %466

466:                                              ; preds = %463, %434
  %467 = load ptr, ptr %237, align 8, !tbaa !17
  %468 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %467)
  br label %1135

469:                                              ; preds = %397, %411, %419, %422, %463, %404, %407, %234
  %470 = load i64, ptr %3, align 8
  %471 = and i64 %470, 65535
  %472 = icmp eq i64 %471, 121
  br i1 %472, label %473, label %504

473:                                              ; preds = %469
  %474 = load i64, ptr %2, align 8
  %475 = trunc i64 %474 to i16
  switch i16 %475, label %504 [
    i16 10, label %476
    i16 12, label %476
  ]

476:                                              ; preds = %473, %473
  %477 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %478 = load ptr, ptr %477, align 8, !tbaa !17
  %479 = load i64, ptr %478, align 8
  %480 = tail call fastcc zeroext i8 @handled_component_p(i64 %479)
  %481 = icmp eq i8 %480, 0
  br i1 %481, label %504, label %482

482:                                              ; preds = %476
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #24
  %483 = call ptr @get_inner_reference(ptr noundef nonnull %478, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10, i8 noundef zeroext 0) #24
  %484 = load ptr, ptr %7, align 8, !tbaa !6
  %485 = icmp eq ptr %484, null
  %486 = load i64, ptr %6, align 8
  %487 = icmp eq i64 %486, 0
  %488 = select i1 %485, i1 %487, i1 false
  br i1 %488, label %489, label %499

489:                                              ; preds = %482
  %490 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %491 = load ptr, ptr %490, align 8, !tbaa !17
  %492 = getelementptr inbounds %struct.tree_type, ptr %491, i64 0, i32 16
  %493 = load ptr, ptr %492, align 8, !tbaa !17
  %494 = getelementptr inbounds %struct.tree_common, ptr %483, i64 0, i32 2
  %495 = load ptr, ptr %494, align 8, !tbaa !17
  %496 = getelementptr inbounds %struct.tree_type, ptr %495, i64 0, i32 16
  %497 = load ptr, ptr %496, align 8, !tbaa !17
  %498 = icmp eq ptr %493, %497
  br i1 %498, label %501, label %499

499:                                              ; preds = %489, %482
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  %500 = load i64, ptr %3, align 8
  br label %504

501:                                              ; preds = %489
  %502 = call ptr @build_fold_addr_expr_loc(i32 noundef %0, ptr noundef nonnull %483)
  %503 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %502)
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  br label %1135

504:                                              ; preds = %499, %473, %476, %469
  %505 = phi i64 [ %500, %499 ], [ %470, %473 ], [ %470, %476 ], [ %470, %469 ]
  %506 = and i64 %505, 65535
  %507 = icmp eq i64 %506, 53
  br i1 %507, label %508, label %535

508:                                              ; preds = %504
  %509 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %510 = load ptr, ptr %509, align 8, !tbaa !17
  %511 = load i64, ptr %510, align 8
  %512 = and i64 %511, 131072
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %598, label %514

514:                                              ; preds = %508
  %515 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %516 = load ptr, ptr %515, align 8, !tbaa !17
  %517 = load i64, ptr %516, align 8
  %518 = and i64 %517, 65535
  %519 = icmp eq i64 %518, 41
  br i1 %519, label %520, label %527

520:                                              ; preds = %514
  %521 = getelementptr inbounds %struct.tree_exp, ptr %516, i64 1
  %522 = load ptr, ptr %521, align 8, !tbaa !17
  %523 = getelementptr inbounds %struct.tree_decl_common, ptr %522, i64 0, i32 2
  %524 = load i64, ptr %523, align 8
  %525 = and i64 %524, 33554432
  %526 = icmp eq i64 %525, 0
  br i1 %526, label %527, label %598

527:                                              ; preds = %520, %514
  %528 = call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %510)
  %529 = getelementptr inbounds %struct.tree_common, ptr %528, i64 0, i32 2
  %530 = load ptr, ptr %529, align 8, !tbaa !17
  %531 = call ptr @build2_stat(i32 noundef 52, ptr noundef %530, ptr noundef nonnull %3, ptr noundef %528) #24
  %532 = load i64, ptr %531, align 8
  %533 = or i64 %532, 25165824
  store i64 %533, ptr %531, align 8
  %534 = getelementptr inbounds %struct.tree_exp, ptr %531, i64 0, i32 1
  store i32 %0, ptr %534, align 8, !tbaa !17
  br label %1135

535:                                              ; preds = %504
  %536 = load i64, ptr %2, align 8
  %537 = and i64 %536, 65535
  %538 = icmp eq i64 %537, 8
  %539 = icmp eq i64 %506, 89
  %540 = and i1 %539, %538
  br i1 %540, label %541, label %598

541:                                              ; preds = %535
  %542 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %543 = load ptr, ptr %542, align 8, !tbaa !17
  %544 = load i64, ptr %543, align 8
  %545 = and i64 %544, 65535
  %546 = icmp eq i64 %545, 23
  br i1 %546, label %547, label %598

547:                                              ; preds = %541
  %548 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %549 = load ptr, ptr %548, align 8, !tbaa !17
  %550 = load ptr, ptr %207, align 8, !tbaa !17
  %551 = load i64, ptr %550, align 8
  %552 = and i64 %551, 2097152
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %554, label %585

554:                                              ; preds = %547
  %555 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %556 = load i32, ptr %555, align 4
  %557 = and i32 %556, 1023
  %558 = getelementptr inbounds %struct.tree_type, ptr %550, i64 0, i32 6
  %559 = load i32, ptr %558, align 4
  %560 = and i32 %559, 1023
  %561 = icmp ugt i32 %557, %560
  br i1 %561, label %562, label %585

562:                                              ; preds = %554
  %563 = getelementptr inbounds %struct.tree_common, ptr %543, i64 0, i32 2
  %564 = load ptr, ptr %563, align 8, !tbaa !17
  %565 = getelementptr inbounds %struct.tree_type, ptr %564, i64 0, i32 6
  %566 = load i32, ptr %565, align 4
  %567 = and i32 %566, 1023
  %568 = icmp ult i32 %567, 65
  br i1 %568, label %569, label %598

569:                                              ; preds = %562
  %570 = call i32 @host_integerp(ptr noundef nonnull %543, i32 noundef 1) #24
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %598, label %572

572:                                              ; preds = %569
  %573 = call i64 @tree_low_cst(ptr noundef nonnull %543, i32 noundef 1) #24
  %574 = load ptr, ptr %563, align 8, !tbaa !17
  %575 = getelementptr inbounds %struct.tree_type, ptr %574, i64 0, i32 6
  %576 = load i32, ptr %575, align 4
  %577 = and i32 %576, 1023
  %578 = add nsw i32 %577, -1
  %579 = zext i32 %578 to i64
  %580 = shl nsw i64 -1, %579
  %581 = and i64 %580, %573
  %582 = icmp eq i64 %581, 0
  br i1 %582, label %583, label %598

583:                                              ; preds = %572
  %584 = load i64, ptr %543, align 8
  br label %585

585:                                              ; preds = %583, %547, %554
  %586 = phi i64 [ %584, %583 ], [ %544, %547 ], [ %544, %554 ]
  %587 = getelementptr inbounds %struct.tree_int_cst, ptr %543, i64 0, i32 1
  %588 = load i64, ptr %587, align 8, !tbaa !17
  %589 = getelementptr inbounds %struct.tree_int_cst, ptr %543, i64 0, i32 1, i32 1
  %590 = load i64, ptr %589, align 8, !tbaa !17
  %591 = trunc i64 %586 to i32
  %592 = lshr i32 %591, 27
  %593 = trunc i32 %592 to i8
  %594 = and i8 %593, 1
  %595 = call ptr @force_fit_type_double(ptr noundef nonnull %2, i64 noundef %588, i64 noundef %590, i32 noundef 0, i8 noundef zeroext %594)
  %596 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %549)
  %597 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %2, ptr noundef %596, ptr noundef %595)
  br label %1135

598:                                              ; preds = %508, %520, %562, %569, %572, %541, %535
  %599 = load i64, ptr %2, align 8
  %600 = trunc i64 %599 to i16
  switch i16 %600, label %627 [
    i16 10, label %601
    i16 12, label %601
  ]

601:                                              ; preds = %598, %598
  %602 = load i64, ptr %29, align 8
  %603 = and i64 %602, 65535
  %604 = icmp eq i64 %603, 66
  br i1 %604, label %605, label %718

605:                                              ; preds = %601
  %606 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %607 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %608 = load ptr, ptr %607, align 8, !tbaa !17
  %609 = load i64, ptr %608, align 8
  %610 = trunc i64 %609 to i32
  %611 = and i32 %610, 65535
  %612 = icmp eq i32 %611, 23
  %613 = load ptr, ptr %606, align 8, !tbaa !17
  br i1 %612, label %620, label %614

614:                                              ; preds = %605
  %615 = load i64, ptr %613, align 8
  %616 = and i64 %615, 65535
  %617 = icmp eq i64 %616, 116
  %618 = icmp eq i32 %611, 116
  %619 = or i1 %618, %617
  br i1 %619, label %620, label %718

620:                                              ; preds = %614, %605
  %621 = trunc i64 %602 to i32
  %622 = and i32 %621, 65535
  %623 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %613)
  %624 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %625 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %624, ptr noundef nonnull %608)
  %626 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %622, ptr noundef nonnull %2, ptr noundef %623, ptr noundef %625)
  br label %1135

627:                                              ; preds = %598
  %628 = trunc i64 %599 to i32
  %629 = and i32 %628, 65535
  %630 = add nsw i32 %629, -6
  %631 = icmp ult i32 %630, 3
  br i1 %631, label %632, label %718

632:                                              ; preds = %627
  %633 = load i64, ptr %3, align 8
  %634 = trunc i64 %633 to i16
  switch i16 %634, label %718 [
    i16 90, label %635
    i16 65, label %674
  ]

635:                                              ; preds = %632
  %636 = load ptr, ptr %207, align 8, !tbaa !17
  %637 = load i64, ptr %636, align 8
  %638 = trunc i64 %637 to i32
  %639 = and i32 %638, 65535
  %640 = add nsw i32 %639, -6
  %641 = icmp ult i32 %640, 3
  br i1 %641, label %642, label %718

642:                                              ; preds = %635
  %643 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %644 = load ptr, ptr %643, align 8, !tbaa !17
  %645 = load i64, ptr %644, align 8
  %646 = trunc i64 %645 to i16
  switch i16 %646, label %718 [
    i16 116, label %647
    i16 113, label %647
  ]

647:                                              ; preds = %642, %642
  %648 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %649 = load i32, ptr %648, align 4
  %650 = getelementptr inbounds %struct.tree_type, ptr %636, i64 0, i32 6
  %651 = load i32, ptr %650, align 4
  %652 = xor i32 %651, %649
  %653 = and i32 %652, 1023
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %655, label %718

655:                                              ; preds = %647
  %656 = getelementptr inbounds %struct.tree_exp, ptr %644, i64 0, i32 3
  %657 = load ptr, ptr %656, align 8, !tbaa !17
  %658 = getelementptr inbounds %struct.tree_common, ptr %657, i64 0, i32 2
  %659 = load ptr, ptr %658, align 8, !tbaa !17
  %660 = load i64, ptr %659, align 8
  %661 = trunc i64 %660 to i32
  %662 = and i32 %661, 65535
  %663 = add nsw i32 %662, -6
  %664 = icmp ult i32 %663, 3
  br i1 %664, label %665, label %718

665:                                              ; preds = %655
  %666 = and i32 %649, 1023
  %667 = getelementptr inbounds %struct.tree_type, ptr %659, i64 0, i32 6
  %668 = load i32, ptr %667, align 4
  %669 = and i32 %668, 1023
  %670 = icmp ugt i32 %666, %669
  br i1 %670, label %718, label %671

671:                                              ; preds = %665
  %672 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %657)
  %673 = call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %672)
  br label %1135

674:                                              ; preds = %632
  %675 = load ptr, ptr %207, align 8, !tbaa !17
  %676 = load i64, ptr %675, align 8
  %677 = trunc i64 %676 to i32
  %678 = and i32 %677, 65535
  %679 = add nsw i32 %678, -6
  %680 = icmp ult i32 %679, 3
  br i1 %680, label %681, label %718

681:                                              ; preds = %674
  %682 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %683 = load i32, ptr %682, align 4
  %684 = and i32 %683, 1023
  %685 = getelementptr inbounds %struct.tree_type, ptr %675, i64 0, i32 6
  %686 = load i32, ptr %685, align 4
  %687 = and i32 %686, 1023
  %688 = icmp ult i32 %684, %687
  br i1 %688, label %689, label %718

689:                                              ; preds = %681
  %690 = and i64 %599, 2097152
  %691 = icmp ne i64 %690, 0
  %692 = load i32, ptr @flag_wrapv, align 4
  %693 = icmp ne i32 %692, 0
  %694 = select i1 %691, i1 true, i1 %693
  br i1 %694, label %704, label %695

695:                                              ; preds = %689
  %696 = call ptr @unsigned_type_for(ptr noundef nonnull %2) #24
  %697 = getelementptr inbounds %struct.tree_type, ptr %696, i64 0, i32 6
  %698 = load i32, ptr %697, align 4
  %699 = load ptr, ptr %207, align 8, !tbaa !17
  %700 = getelementptr inbounds %struct.tree_type, ptr %699, i64 0, i32 6
  %701 = load i32, ptr %700, align 4
  %702 = and i32 %698, 1023
  %703 = and i32 %701, 1023
  br label %704

704:                                              ; preds = %689, %695
  %705 = phi i32 [ %687, %689 ], [ %703, %695 ]
  %706 = phi i32 [ %684, %689 ], [ %702, %695 ]
  %707 = phi ptr [ %2, %689 ], [ %696, %695 ]
  %708 = icmp ult i32 %706, %705
  br i1 %708, label %709, label %718

709:                                              ; preds = %704
  %710 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %711 = load ptr, ptr %710, align 8, !tbaa !17
  %712 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %707, ptr noundef %711)
  %713 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %714 = load ptr, ptr %713, align 8, !tbaa !17
  %715 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %707, ptr noundef %714)
  %716 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %707, ptr noundef %712, ptr noundef %715)
  %717 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %716)
  br label %1135

718:                                              ; preds = %632, %647, %665, %642, %635, %655, %601, %614, %627, %704, %674, %681
  %719 = call fastcc ptr @fold_convert_const(i32 noundef %1, ptr noundef nonnull %2, ptr noundef nonnull %3)
  br label %1135

720:                                              ; preds = %195
  %721 = tail call i32 @integer_zerop(ptr noundef %29) #24
  %722 = icmp eq i32 %721, 0
  br i1 %722, label %1135, label %723

723:                                              ; preds = %720
  %724 = tail call fastcc ptr @fold_convert_const(i32 noundef 114, ptr noundef %2, ptr noundef %29)
  br label %1135

725:                                              ; preds = %195
  %726 = tail call fastcc ptr @fold_convert_const(i32 noundef 115, ptr noundef %2, ptr noundef %29)
  br label %1135

727:                                              ; preds = %195
  %728 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %729 = load ptr, ptr %728, align 8, !tbaa !17
  %730 = icmp eq ptr %729, %2
  br i1 %730, label %1135, label %731

731:                                              ; preds = %727
  %732 = load i64, ptr %3, align 8
  %733 = and i64 %732, 65535
  %734 = icmp eq i64 %733, 118
  br i1 %734, label %735, label %739

735:                                              ; preds = %731
  %736 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %737 = load ptr, ptr %736, align 8, !tbaa !17
  %738 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 118, ptr noundef %2, ptr noundef %737)
  br label %1135

739:                                              ; preds = %731
  %740 = load i64, ptr %2, align 8
  %741 = trunc i64 %740 to i16
  switch i16 %741, label %755 [
    i16 6, label %742
    i16 7, label %742
    i16 8, label %742
    i16 10, label %742
    i16 12, label %742
  ]

742:                                              ; preds = %739, %739, %739, %739, %739
  %743 = load i64, ptr %729, align 8
  %744 = trunc i64 %743 to i16
  switch i16 %744, label %755 [
    i16 6, label %745
    i16 7, label %745
    i16 8, label %745
    i16 10, label %745
    i16 12, label %745
  ]

745:                                              ; preds = %742, %742, %742, %742, %742
  %746 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %747 = load i32, ptr %746, align 4
  %748 = getelementptr inbounds %struct.tree_type, ptr %729, i64 0, i32 6
  %749 = load i32, ptr %748, align 4
  %750 = xor i32 %749, %747
  %751 = and i32 %750, 1023
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %753, label %755

753:                                              ; preds = %745
  %754 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %3)
  br label %1135

755:                                              ; preds = %742, %739, %745
  %756 = trunc i64 %732 to i16
  switch i16 %756, label %777 [
    i16 116, label %757
    i16 113, label %757
  ]

757:                                              ; preds = %755, %755
  %758 = load i64, ptr %729, align 8
  %759 = trunc i64 %758 to i16
  switch i16 %759, label %777 [
    i16 6, label %760
    i16 7, label %760
    i16 8, label %760
    i16 10, label %760
    i16 12, label %760
  ]

760:                                              ; preds = %757, %757, %757, %757, %757
  %761 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %762 = load ptr, ptr %761, align 8, !tbaa !17
  %763 = getelementptr inbounds %struct.tree_common, ptr %762, i64 0, i32 2
  %764 = load ptr, ptr %763, align 8, !tbaa !17
  %765 = load i64, ptr %764, align 8
  %766 = trunc i64 %765 to i16
  switch i16 %766, label %777 [
    i16 6, label %767
    i16 7, label %767
    i16 8, label %767
    i16 10, label %767
    i16 12, label %767
  ]

767:                                              ; preds = %760, %760, %760, %760, %760
  %768 = getelementptr inbounds %struct.tree_type, ptr %729, i64 0, i32 6
  %769 = load i32, ptr %768, align 4
  %770 = getelementptr inbounds %struct.tree_type, ptr %764, i64 0, i32 6
  %771 = load i32, ptr %770, align 4
  %772 = xor i32 %771, %769
  %773 = and i32 %772, 1023
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %775, label %777

775:                                              ; preds = %767
  %776 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 118, ptr noundef nonnull %2, ptr noundef nonnull %762)
  br label %1135

777:                                              ; preds = %760, %757, %755, %767
  %778 = tail call fastcc ptr @fold_view_convert_expr(ptr noundef nonnull %2, ptr noundef nonnull %3)
  br label %1135

779:                                              ; preds = %195
  %780 = tail call fastcc ptr @fold_negate_expr(i32 noundef %0, ptr noundef %29)
  %781 = icmp eq ptr %780, null
  br i1 %781, label %1135, label %782

782:                                              ; preds = %779
  %783 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %780)
  br label %1135

784:                                              ; preds = %195
  %785 = load i64, ptr %29, align 8
  %786 = trunc i64 %785 to i16
  switch i16 %786, label %805 [
    i16 23, label %787
    i16 24, label %787
    i16 79, label %789
    i16 116, label %793
  ]

787:                                              ; preds = %784, %784
  %788 = tail call ptr @fold_abs_const(ptr noundef nonnull %29, ptr noundef %2)
  br label %1135

789:                                              ; preds = %784
  %790 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %791 = load ptr, ptr %790, align 8, !tbaa !17
  %792 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 82, ptr noundef %2, ptr noundef %791)
  br label %1135

793:                                              ; preds = %784
  %794 = load i64, ptr %2, align 8
  %795 = and i64 %794, 65535
  %796 = icmp eq i64 %795, 9
  br i1 %796, label %797, label %805

797:                                              ; preds = %793
  %798 = tail call ptr @strip_float_extensions(ptr noundef nonnull %29) #24
  %799 = icmp eq ptr %798, %29
  br i1 %799, label %811, label %800

800:                                              ; preds = %797
  %801 = getelementptr inbounds %struct.tree_common, ptr %798, i64 0, i32 2
  %802 = load ptr, ptr %801, align 8, !tbaa !17
  %803 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 82, ptr noundef %802, ptr noundef %798)
  %804 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %803)
  br label %1135

805:                                              ; preds = %784, %793
  %806 = and i64 %785, 65535
  %807 = icmp eq i64 %806, 82
  br i1 %807, label %1135, label %808

808:                                              ; preds = %805
  %809 = tail call zeroext i8 @tree_expr_nonnegative_p(ptr noundef nonnull %29)
  %810 = icmp eq i8 %809, 0
  br i1 %810, label %811, label %1135

811:                                              ; preds = %797, %808
  %812 = load i64, ptr %2, align 8
  %813 = and i64 %812, 65535
  %814 = icmp eq i64 %813, 9
  br i1 %814, label %815, label %1135

815:                                              ; preds = %811
  %816 = tail call ptr @fold_strip_sign_ops(ptr noundef nonnull %29)
  %817 = icmp eq ptr %816, null
  br i1 %817, label %1135, label %818

818:                                              ; preds = %815
  %819 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %816)
  %820 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 82, ptr noundef nonnull %2, ptr noundef %819)
  br label %1135

821:                                              ; preds = %195
  %822 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %823 = load ptr, ptr %822, align 8, !tbaa !17
  %824 = load i64, ptr %823, align 8
  %825 = and i64 %824, 65535
  %826 = icmp eq i64 %825, 13
  br i1 %826, label %829, label %827

827:                                              ; preds = %821
  %828 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %29)
  br label %1135

829:                                              ; preds = %821
  %830 = load i64, ptr %29, align 8
  %831 = trunc i64 %830 to i16
  switch i16 %831, label %1135 [
    i16 123, label %832
    i16 26, label %843
    i16 124, label %854
  ]

832:                                              ; preds = %829
  %833 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %834 = load ptr, ptr %833, align 8, !tbaa !17
  %835 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %836 = load ptr, ptr %835, align 8, !tbaa !17
  %837 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %834, ptr noundef %836)
  %838 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %839 = load ptr, ptr %838, align 8, !tbaa !17
  %840 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %834, ptr noundef %839)
  %841 = tail call fastcc ptr @negate_expr(ptr noundef %840)
  %842 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef %2, ptr noundef %837, ptr noundef %841)
  br label %1135

843:                                              ; preds = %829
  %844 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %845 = load ptr, ptr %844, align 8, !tbaa !17
  %846 = getelementptr inbounds %struct.tree_complex, ptr %29, i64 0, i32 1
  %847 = load ptr, ptr %846, align 8, !tbaa !17
  %848 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %845, ptr noundef %847)
  %849 = getelementptr inbounds %struct.tree_complex, ptr %29, i64 0, i32 2
  %850 = load ptr, ptr %849, align 8, !tbaa !17
  %851 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %845, ptr noundef %850)
  %852 = tail call fastcc ptr @negate_expr(ptr noundef %851)
  %853 = tail call ptr @build_complex(ptr noundef %2, ptr noundef %848, ptr noundef %852) #24
  br label %1135

854:                                              ; preds = %829
  %855 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %856 = load ptr, ptr %855, align 8, !tbaa !17
  %857 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %856)
  br label %1135

858:                                              ; preds = %195
  %859 = load i64, ptr %29, align 8
  %860 = trunc i64 %859 to i16
  switch i16 %860, label %867 [
    i16 23, label %861
    i16 90, label %863
  ]

861:                                              ; preds = %858
  %862 = tail call fastcc ptr @fold_not_const(ptr noundef nonnull %29, ptr noundef %2)
  br label %1135

863:                                              ; preds = %858
  %864 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %865 = load ptr, ptr %864, align 8, !tbaa !17
  %866 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %865)
  br label %1135

867:                                              ; preds = %858
  %868 = load i64, ptr %2, align 8
  %869 = trunc i64 %868 to i32
  %870 = and i32 %869, 65535
  %871 = add nsw i32 %870, -6
  %872 = icmp ult i32 %871, 3
  br i1 %872, label %873, label %904

873:                                              ; preds = %867
  %874 = trunc i64 %859 to i16
  switch i16 %874, label %888 [
    i16 79, label %875
    i16 64, label %881
  ]

875:                                              ; preds = %873
  %876 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %877 = load ptr, ptr %876, align 8, !tbaa !17
  %878 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %877)
  %879 = tail call ptr @build_int_cst(ptr noundef nonnull %2, i64 noundef 1) #24
  %880 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef %878, ptr noundef %879)
  br label %1135

881:                                              ; preds = %873
  %882 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %883 = load ptr, ptr %882, align 8, !tbaa !17
  %884 = tail call i32 @integer_onep(ptr noundef %883) #24
  %885 = icmp eq i32 %884, 0
  br i1 %885, label %886, label %899

886:                                              ; preds = %881
  %887 = load i64, ptr %29, align 8
  br label %888

888:                                              ; preds = %873, %886
  %889 = phi i64 [ %887, %886 ], [ %859, %873 ]
  %890 = and i64 %889, 65535
  %891 = icmp eq i64 %890, 63
  br i1 %891, label %892, label %904

892:                                              ; preds = %888
  %893 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %894 = load ptr, ptr %893, align 8, !tbaa !17
  %895 = tail call i32 @integer_all_onesp(ptr noundef %894) #24
  %896 = icmp eq i32 %895, 0
  br i1 %896, label %897, label %899

897:                                              ; preds = %892
  %898 = load i64, ptr %29, align 8
  br label %904

899:                                              ; preds = %892, %881
  %900 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %901 = load ptr, ptr %900, align 8, !tbaa !17
  %902 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %901)
  %903 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 79, ptr noundef nonnull %2, ptr noundef %902)
  br label %1135

904:                                              ; preds = %897, %867, %888
  %905 = phi i64 [ %898, %897 ], [ %859, %867 ], [ %889, %888 ]
  %906 = and i64 %905, 65535
  %907 = icmp eq i64 %906, 88
  br i1 %907, label %908, label %921

908:                                              ; preds = %904
  %909 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %910 = load ptr, ptr %909, align 8, !tbaa !17
  %911 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %910)
  %912 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %911)
  %913 = icmp eq ptr %912, null
  br i1 %913, label %914, label %916

914:                                              ; preds = %908
  %915 = load i64, ptr %29, align 8
  br label %921

916:                                              ; preds = %908
  %917 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %918 = load ptr, ptr %917, align 8, !tbaa !17
  %919 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %918)
  %920 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef nonnull %2, ptr noundef nonnull %912, ptr noundef %919)
  br label %1135

921:                                              ; preds = %914, %904
  %922 = phi i64 [ %915, %914 ], [ %905, %904 ]
  %923 = and i64 %922, 65535
  %924 = icmp eq i64 %923, 88
  br i1 %924, label %925, label %938

925:                                              ; preds = %921
  %926 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %927 = load ptr, ptr %926, align 8, !tbaa !17
  %928 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %927)
  %929 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %928)
  %930 = icmp eq ptr %929, null
  br i1 %930, label %931, label %933

931:                                              ; preds = %925
  %932 = load i64, ptr %29, align 8
  br label %938

933:                                              ; preds = %925
  %934 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %935 = load ptr, ptr %934, align 8, !tbaa !17
  %936 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %935)
  %937 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef nonnull %2, ptr noundef %936, ptr noundef nonnull %929)
  br label %1135

938:                                              ; preds = %931, %921
  %939 = phi i64 [ %932, %931 ], [ %922, %921 ]
  %940 = and i64 %939, 65535
  %941 = icmp eq i64 %940, 27
  br i1 %941, label %942, label %1135

942:                                              ; preds = %938
  %943 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %944 = load i32, ptr %943, align 4
  %945 = and i32 %944, 1023
  %946 = zext i32 %945 to i64
  %947 = shl nuw i64 1, %946
  %948 = trunc i64 %947 to i32
  %949 = icmp sgt i32 %948, 0
  br i1 %949, label %950, label %977

950:                                              ; preds = %942
  %951 = getelementptr inbounds %struct.tree_vector, ptr %29, i64 0, i32 1
  %952 = load ptr, ptr %951, align 8, !tbaa !17
  %953 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  br label %954

954:                                              ; preds = %950, %971
  %955 = phi i32 [ 0, %950 ], [ %975, %971 ]
  %956 = phi ptr [ null, %950 ], [ %974, %971 ]
  %957 = phi ptr [ %952, %950 ], [ %972, %971 ]
  %958 = icmp eq ptr %957, null
  br i1 %958, label %968, label %959

959:                                              ; preds = %954
  %960 = getelementptr inbounds %struct.tree_list, ptr %957, i64 0, i32 2
  %961 = load ptr, ptr %960, align 8, !tbaa !17
  %962 = load ptr, ptr %953, align 8, !tbaa !17
  %963 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef %962, ptr noundef %961)
  %964 = icmp eq ptr %963, null
  br i1 %964, label %977, label %965

965:                                              ; preds = %959
  %966 = getelementptr inbounds %struct.tree_common, ptr %957, i64 0, i32 1
  %967 = load ptr, ptr %966, align 8, !tbaa !17
  br label %971

968:                                              ; preds = %954
  %969 = load ptr, ptr %953, align 8, !tbaa !17
  %970 = tail call ptr @build_int_cst(ptr noundef %969, i64 noundef -1) #24
  br label %971

971:                                              ; preds = %968, %965
  %972 = phi ptr [ %967, %965 ], [ null, %968 ]
  %973 = phi ptr [ %963, %965 ], [ %970, %968 ]
  %974 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %973, ptr noundef %956) #24
  %975 = add nuw nsw i32 %955, 1
  %976 = icmp eq i32 %975, %948
  br i1 %976, label %981, label %954, !llvm.loop !64

977:                                              ; preds = %959, %942
  %978 = phi ptr [ null, %942 ], [ %956, %959 ]
  %979 = phi i32 [ 0, %942 ], [ %955, %959 ]
  %980 = icmp eq i32 %979, %948
  br i1 %980, label %981, label %1135

981:                                              ; preds = %971, %977
  %982 = phi ptr [ %978, %977 ], [ %974, %971 ]
  %983 = tail call ptr @nreverse(ptr noundef %982) #24
  %984 = tail call ptr @build_vector(ptr noundef nonnull %2, ptr noundef %983) #24
  br label %1135

985:                                              ; preds = %195
  %986 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %987 = load ptr, ptr %986, align 8, !tbaa !17
  %988 = load i64, ptr %987, align 8
  %989 = and i64 %988, 65535
  %990 = icmp eq i64 %989, 7
  br i1 %990, label %994, label %991

991:                                              ; preds = %985
  %992 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %993 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %992, ptr noundef nonnull %29)
  br label %994

994:                                              ; preds = %991, %985
  %995 = phi ptr [ %993, %991 ], [ %29, %985 ]
  %996 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef %995)
  %997 = icmp eq ptr %996, null
  br i1 %997, label %1135, label %998

998:                                              ; preds = %994
  %999 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %996)
  br label %1135

1000:                                             ; preds = %195
  %1001 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %1002 = load ptr, ptr %1001, align 8, !tbaa !17
  %1003 = load i64, ptr %1002, align 8
  %1004 = and i64 %1003, 65535
  %1005 = icmp eq i64 %1004, 13
  br i1 %1005, label %1008, label %1006

1006:                                             ; preds = %1000
  %1007 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %29)
  br label %1135

1008:                                             ; preds = %1000
  %1009 = load i64, ptr %29, align 8
  %1010 = trunc i64 %1009 to i16
  switch i16 %1010, label %1135 [
    i16 123, label %1011
    i16 26, label %1017
    i16 63, label %1021
    i16 64, label %1021
    i16 124, label %1034
    i16 59, label %1041
  ]

1011:                                             ; preds = %1008
  %1012 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1013 = load ptr, ptr %1012, align 8, !tbaa !17
  %1014 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %1015 = load ptr, ptr %1014, align 8, !tbaa !17
  %1016 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1013, ptr noundef %1015)
  br label %1135

1017:                                             ; preds = %1008
  %1018 = getelementptr inbounds %struct.tree_complex, ptr %29, i64 0, i32 1
  %1019 = load ptr, ptr %1018, align 8, !tbaa !17
  %1020 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1019)
  br label %1135

1021:                                             ; preds = %1008, %1008
  %1022 = trunc i64 %1009 to i32
  %1023 = and i32 %1022, 65535
  %1024 = getelementptr inbounds %struct.tree_common, ptr %1002, i64 0, i32 2
  %1025 = load ptr, ptr %1024, align 8, !tbaa !17
  %1026 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1027 = load ptr, ptr %1026, align 8, !tbaa !17
  %1028 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %1025, ptr noundef %1027)
  %1029 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %1030 = load ptr, ptr %1029, align 8, !tbaa !17
  %1031 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %1025, ptr noundef %1030)
  %1032 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1023, ptr noundef %1025, ptr noundef %1028, ptr noundef %1031)
  %1033 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1032)
  br label %1135

1034:                                             ; preds = %1008
  %1035 = getelementptr inbounds %struct.tree_common, ptr %1002, i64 0, i32 2
  %1036 = load ptr, ptr %1035, align 8, !tbaa !17
  %1037 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1038 = load ptr, ptr %1037, align 8, !tbaa !17
  %1039 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %1036, ptr noundef %1038)
  %1040 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1039)
  br label %1135

1041:                                             ; preds = %1008
  %1042 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %29) #24
  %1043 = icmp eq ptr %1042, null
  br i1 %1043, label %1135, label %1044

1044:                                             ; preds = %1041
  %1045 = getelementptr inbounds %struct.tree_function_decl, ptr %1042, i64 0, i32 5
  %1046 = load i32, ptr %1045, align 8
  %1047 = and i32 %1046, 6144
  %1048 = icmp eq i32 %1047, 6144
  br i1 %1048, label %1049, label %1135

1049:                                             ; preds = %1044
  %1050 = and i32 %1046, 2047
  %1051 = add nsw i32 %1050, -285
  %1052 = icmp ult i32 %1051, 3
  br i1 %1052, label %1053, label %1135

1053:                                             ; preds = %1049
  %1054 = tail call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 30) #24
  %1055 = icmp eq ptr %1054, null
  br i1 %1055, label %1135, label %1056

1056:                                             ; preds = %1053
  %1057 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1, i32 0, i32 2
  %1058 = load ptr, ptr %1057, align 8, !tbaa !17
  %1059 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %1054, i32 noundef 1, ptr noundef %1058) #24
  br label %1135

1060:                                             ; preds = %195
  %1061 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %1062 = load ptr, ptr %1061, align 8, !tbaa !17
  %1063 = load i64, ptr %1062, align 8
  %1064 = and i64 %1063, 65535
  %1065 = icmp eq i64 %1064, 13
  br i1 %1065, label %1069, label %1066

1066:                                             ; preds = %1060
  %1067 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %1068 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1067)
  br label %1135

1069:                                             ; preds = %1060
  %1070 = load i64, ptr %29, align 8
  %1071 = trunc i64 %1070 to i16
  switch i16 %1071, label %1135 [
    i16 123, label %1072
    i16 26, label %1078
    i16 63, label %1082
    i16 64, label %1082
    i16 124, label %1095
    i16 59, label %1103
  ]

1072:                                             ; preds = %1069
  %1073 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1074 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %1075 = load ptr, ptr %1074, align 8, !tbaa !17
  %1076 = load ptr, ptr %1073, align 8, !tbaa !17
  %1077 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1075, ptr noundef %1076)
  br label %1135

1078:                                             ; preds = %1069
  %1079 = getelementptr inbounds %struct.tree_complex, ptr %29, i64 0, i32 2
  %1080 = load ptr, ptr %1079, align 8, !tbaa !17
  %1081 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1080)
  br label %1135

1082:                                             ; preds = %1069, %1069
  %1083 = trunc i64 %1070 to i32
  %1084 = and i32 %1083, 65535
  %1085 = getelementptr inbounds %struct.tree_common, ptr %1062, i64 0, i32 2
  %1086 = load ptr, ptr %1085, align 8, !tbaa !17
  %1087 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1088 = load ptr, ptr %1087, align 8, !tbaa !17
  %1089 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %1086, ptr noundef %1088)
  %1090 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1
  %1091 = load ptr, ptr %1090, align 8, !tbaa !17
  %1092 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %1086, ptr noundef %1091)
  %1093 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1084, ptr noundef %1086, ptr noundef %1089, ptr noundef %1092)
  %1094 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1093)
  br label %1135

1095:                                             ; preds = %1069
  %1096 = getelementptr inbounds %struct.tree_common, ptr %1062, i64 0, i32 2
  %1097 = load ptr, ptr %1096, align 8, !tbaa !17
  %1098 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 0, i32 3
  %1099 = load ptr, ptr %1098, align 8, !tbaa !17
  %1100 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %1097, ptr noundef %1099)
  %1101 = tail call fastcc ptr @negate_expr(ptr noundef %1100)
  %1102 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1101)
  br label %1135

1103:                                             ; preds = %1069
  %1104 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %29) #24
  %1105 = icmp eq ptr %1104, null
  br i1 %1105, label %1135, label %1106

1106:                                             ; preds = %1103
  %1107 = getelementptr inbounds %struct.tree_function_decl, ptr %1104, i64 0, i32 5
  %1108 = load i32, ptr %1107, align 8
  %1109 = and i32 %1108, 6144
  %1110 = icmp eq i32 %1109, 6144
  br i1 %1110, label %1111, label %1135

1111:                                             ; preds = %1106
  %1112 = and i32 %1108, 2047
  %1113 = add nsw i32 %1112, -285
  %1114 = icmp ult i32 %1113, 3
  br i1 %1114, label %1115, label %1135

1115:                                             ; preds = %1111
  %1116 = tail call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 219) #24
  %1117 = icmp eq ptr %1116, null
  br i1 %1117, label %1135, label %1118

1118:                                             ; preds = %1115
  %1119 = getelementptr inbounds %struct.tree_exp, ptr %29, i64 1, i32 0, i32 2
  %1120 = load ptr, ptr %1119, align 8, !tbaa !17
  %1121 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %1116, i32 noundef 1, ptr noundef %1120) #24
  br label %1135

1122:                                             ; preds = %195
  %1123 = load i64, ptr %3, align 8
  %1124 = and i64 %1123, 65535
  %1125 = icmp eq i64 %1124, 121
  br i1 %1125, label %1126, label %1135

1126:                                             ; preds = %1122
  %1127 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %1128 = load ptr, ptr %1127, align 8, !tbaa !17
  %1129 = load i64, ptr %1128, align 8
  %1130 = trunc i64 %1129 to i16
  switch i16 %1130, label %1134 [
    i16 32, label %1131
    i16 34, label %1131
    i16 36, label %1131
  ]

1131:                                             ; preds = %1126, %1126, %1126
  %1132 = and i64 %1129, 1048576
  %1133 = icmp eq i64 %1132, 0
  br i1 %1133, label %1135, label %1134

1134:                                             ; preds = %1126, %1131
  br label %1135

1135:                                             ; preds = %1103, %1106, %1115, %1111, %1041, %1044, %1053, %1049, %1069, %1118, %1008, %1056, %938, %977, %981, %800, %709, %585, %501, %320, %379, %394, %466, %231, %222, %192, %189, %195, %1122, %1134, %1131, %994, %829, %811, %815, %808, %805, %779, %727, %720, %206, %196, %100, %104, %112, %121, %153, %145, %98, %1095, %1082, %1078, %1072, %1066, %1034, %1021, %1017, %1011, %1006, %998, %933, %916, %899, %875, %863, %861, %854, %843, %832, %827, %818, %789, %787, %782, %777, %775, %753, %735, %725, %723, %718, %671, %620, %527, %204, %166, %47
  %1136 = phi ptr [ %49, %47 ], [ %167, %166 ], [ %1068, %1066 ], [ %1077, %1072 ], [ %1081, %1078 ], [ %1094, %1082 ], [ %1102, %1095 ], [ %1121, %1118 ], [ %1007, %1006 ], [ %1016, %1011 ], [ %1020, %1017 ], [ %1033, %1021 ], [ %1040, %1034 ], [ %1059, %1056 ], [ %999, %998 ], [ %862, %861 ], [ %866, %863 ], [ %880, %875 ], [ %903, %899 ], [ %920, %916 ], [ %937, %933 ], [ %828, %827 ], [ %842, %832 ], [ %853, %843 ], [ %857, %854 ], [ %788, %787 ], [ %792, %789 ], [ %820, %818 ], [ %804, %800 ], [ %783, %782 ], [ %738, %735 ], [ %754, %753 ], [ %776, %775 ], [ %778, %777 ], [ %726, %725 ], [ %724, %723 ], [ %626, %620 ], [ %673, %671 ], [ %719, %718 ], [ %597, %585 ], [ %531, %527 ], [ %503, %501 ], [ %205, %204 ], [ %156, %153 ], [ %99, %145 ], [ %99, %121 ], [ %99, %112 ], [ %99, %104 ], [ %99, %100 ], [ %99, %98 ], [ null, %196 ], [ %3, %206 ], [ null, %720 ], [ %3, %727 ], [ null, %779 ], [ %29, %805 ], [ %29, %808 ], [ null, %815 ], [ null, %811 ], [ null, %829 ], [ null, %994 ], [ %1128, %1131 ], [ null, %1134 ], [ null, %1122 ], [ null, %195 ], [ %190, %189 ], [ %193, %192 ], [ %229, %222 ], [ %232, %231 ], [ %321, %320 ], [ %468, %466 ], [ %396, %394 ], [ %381, %379 ], [ %717, %709 ], [ %984, %981 ], [ null, %977 ], [ null, %938 ], [ null, %1008 ], [ null, %1069 ], [ null, %1049 ], [ null, %1053 ], [ null, %1044 ], [ null, %1041 ], [ null, %1111 ], [ null, %1115 ], [ null, %1106 ], [ null, %1103 ]
  ret ptr %1136
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) local_unnamed_addr #10 {
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !17
  %10 = icmp eq i32 %9, 9
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %12

12:                                               ; preds = %6, %11
  %13 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %14 = icmp eq ptr %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = tail call ptr @build3_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #24
  %17 = getelementptr inbounds %struct.tree_exp, ptr %16, i64 0, i32 1
  store i32 %0, ptr %17, align 8, !tbaa !17
  br label %18

18:                                               ; preds = %15, %12
  %19 = phi ptr [ %13, %12 ], [ %16, %15 ]
  ret ptr %19
}

; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable
define internal fastcc zeroext i8 @handled_component_p(i64 %0) unnamed_addr #19 {
  %2 = trunc i64 %0 to i16
  switch i16 %2, label %3 [
    i16 42, label %4
    i16 41, label %4
    i16 45, label %4
    i16 46, label %4
    i16 118, label %4
    i16 43, label %4
    i16 44, label %4
  ]

3:                                                ; preds = %1
  br label %4

4:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %3
  %5 = phi i8 [ 0, %3 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ], [ 1, %1 ]
  ret i8 %5
}

declare ptr @get_inner_reference(ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_view_convert_expr(ptr noundef %0, ptr nocapture noundef readonly %1) unnamed_addr #10 {
  %3 = alloca [64 x i8], align 16
  call void @llvm.lifetime.start.p0(i64 64, ptr nonnull %3) #24
  %4 = call i32 @native_encode_expr(ptr noundef %1, ptr noundef nonnull %3, i32 noundef 64)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = call ptr @native_interpret_expr(ptr noundef %0, ptr noundef nonnull %3, i32 noundef %4)
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi ptr [ %7, %6 ], [ null, %2 ]
  call void @llvm.lifetime.end.p0(i64 64, ptr nonnull %3) #24
  ret ptr %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_expr_nonnegative_p(ptr noundef %0) local_unnamed_addr #10 {
  %2 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2) #24
  store i8 0, ptr %2, align 1, !tbaa !17
  %3 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %0, ptr noundef nonnull %2)
  %4 = load i8, ptr %2, align 1, !tbaa !17
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %6
  %10 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %11 = icmp eq ptr %10, null
  %12 = load i32, ptr @fold_deferred_overflow_code, align 4
  %13 = icmp ugt i32 %12, 4
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %9
  store ptr @.str.32, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 4, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %21

16:                                               ; preds = %6
  %17 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %18 = icmp slt i32 %17, 4
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef nonnull @.str.32) #24
  br label %21

21:                                               ; preds = %19, %16, %15, %9, %1
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2) #24
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_strip_sign_ops(ptr noundef %0) local_unnamed_addr #10 {
  %2 = load i64, ptr %0, align 8
  %3 = and i64 %2, 65535
  %4 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %3
  %5 = load i32, ptr %4, align 4, !tbaa !17
  %6 = add i32 %5, -4
  %7 = icmp ult i32 %6, 7
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %10 = load i32, ptr %9, align 8, !tbaa !17
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %1 ]
  %13 = trunc i64 %2 to i16
  switch i16 %13, label %415 [
    i16 82, label %14
    i16 79, label %14
    i16 65, label %21
    i16 75, label %21
    i16 52, label %345
    i16 56, label %360
    i16 59, label %392
  ]

14:                                               ; preds = %11, %11
  %15 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = tail call ptr @fold_strip_sign_ops(ptr noundef %16)
  %18 = icmp eq ptr %17, null
  br i1 %18, label %19, label %415

19:                                               ; preds = %14
  %20 = load ptr, ptr %15, align 8, !tbaa !17
  br label %415

21:                                               ; preds = %11, %11
  %22 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = load i64, ptr %23, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 14
  br i1 %26, label %27, label %30

27:                                               ; preds = %21
  %28 = tail call i32 @vector_type_mode(ptr noundef nonnull %23) #24
  %29 = load ptr, ptr %22, align 8, !tbaa !17
  br label %35

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.tree_type, ptr %23, i64 0, i32 6
  %32 = load i32, ptr %31, align 4
  %33 = lshr i32 %32, 16
  %34 = and i32 %33, 255
  br label %35

35:                                               ; preds = %30, %27
  %36 = phi ptr [ %29, %27 ], [ %23, %30 ]
  %37 = phi i32 [ %28, %27 ], [ %34, %30 ]
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %38
  %40 = load i8, ptr %39, align 1, !tbaa !17
  %41 = icmp eq i8 %40, 8
  br i1 %41, label %99, label %42

42:                                               ; preds = %35
  %43 = load i64, ptr %36, align 8
  %44 = and i64 %43, 65535
  %45 = icmp eq i64 %44, 14
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = tail call i32 @vector_type_mode(ptr noundef nonnull %36) #24
  %48 = load ptr, ptr %22, align 8, !tbaa !17
  br label %54

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.tree_type, ptr %36, i64 0, i32 6
  %51 = load i32, ptr %50, align 4
  %52 = lshr i32 %51, 16
  %53 = and i32 %52, 255
  br label %54

54:                                               ; preds = %49, %46
  %55 = phi ptr [ %48, %46 ], [ %36, %49 ]
  %56 = phi i32 [ %47, %46 ], [ %53, %49 ]
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %57
  %59 = load i8, ptr %58, align 1, !tbaa !17
  %60 = icmp eq i8 %59, 9
  br i1 %60, label %99, label %61

61:                                               ; preds = %54
  %62 = load i64, ptr %55, align 8
  %63 = and i64 %62, 65535
  %64 = icmp eq i64 %63, 14
  br i1 %64, label %65, label %68

65:                                               ; preds = %61
  %66 = tail call i32 @vector_type_mode(ptr noundef nonnull %55) #24
  %67 = load ptr, ptr %22, align 8, !tbaa !17
  br label %73

68:                                               ; preds = %61
  %69 = getelementptr inbounds %struct.tree_type, ptr %55, i64 0, i32 6
  %70 = load i32, ptr %69, align 4
  %71 = lshr i32 %70, 16
  %72 = and i32 %71, 255
  br label %73

73:                                               ; preds = %68, %65
  %74 = phi ptr [ %67, %65 ], [ %55, %68 ]
  %75 = phi i32 [ %66, %65 ], [ %72, %68 ]
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %76
  %78 = load i8, ptr %77, align 1, !tbaa !17
  %79 = icmp eq i8 %78, 11
  br i1 %79, label %99, label %80

80:                                               ; preds = %73
  %81 = load i64, ptr %74, align 8
  %82 = and i64 %81, 65535
  %83 = icmp eq i64 %82, 14
  br i1 %83, label %84, label %86

84:                                               ; preds = %80
  %85 = tail call i32 @vector_type_mode(ptr noundef nonnull %74) #24
  br label %91

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.tree_type, ptr %74, i64 0, i32 6
  %88 = load i32, ptr %87, align 4
  %89 = lshr i32 %88, 16
  %90 = and i32 %89, 255
  br label %91

91:                                               ; preds = %86, %84
  %92 = phi i32 [ %85, %84 ], [ %90, %86 ]
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %93
  %95 = load i8, ptr %94, align 1, !tbaa !17
  %96 = icmp eq i8 %95, 17
  br i1 %96, label %97, label %317

97:                                               ; preds = %91
  %98 = load ptr, ptr %22, align 8, !tbaa !17
  br label %99

99:                                               ; preds = %97, %73, %54, %35
  %100 = phi ptr [ %98, %97 ], [ %74, %73 ], [ %55, %54 ], [ %36, %35 ]
  %101 = load i64, ptr %100, align 8
  %102 = and i64 %101, 65535
  %103 = icmp eq i64 %102, 14
  br i1 %103, label %104, label %107

104:                                              ; preds = %99
  %105 = tail call i32 @vector_type_mode(ptr noundef nonnull %100) #24
  %106 = load ptr, ptr %22, align 8, !tbaa !17
  br label %112

107:                                              ; preds = %99
  %108 = getelementptr inbounds %struct.tree_type, ptr %100, i64 0, i32 6
  %109 = load i32, ptr %108, align 4
  %110 = lshr i32 %109, 16
  %111 = and i32 %110, 255
  br label %112

112:                                              ; preds = %107, %104
  %113 = phi ptr [ %106, %104 ], [ %100, %107 ]
  %114 = phi i32 [ %105, %104 ], [ %111, %107 ]
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %115
  %117 = load i8, ptr %116, align 1, !tbaa !17
  %118 = icmp eq i8 %117, 8
  br i1 %118, label %138, label %119

119:                                              ; preds = %112
  %120 = load i64, ptr %113, align 8
  %121 = and i64 %120, 65535
  %122 = icmp eq i64 %121, 14
  br i1 %122, label %123, label %126

123:                                              ; preds = %119
  %124 = tail call i32 @vector_type_mode(ptr noundef nonnull %113) #24
  %125 = load ptr, ptr %22, align 8, !tbaa !17
  br label %131

126:                                              ; preds = %119
  %127 = getelementptr inbounds %struct.tree_type, ptr %113, i64 0, i32 6
  %128 = load i32, ptr %127, align 4
  %129 = lshr i32 %128, 16
  %130 = and i32 %129, 255
  br label %131

131:                                              ; preds = %126, %123
  %132 = phi ptr [ %125, %123 ], [ %113, %126 ]
  %133 = phi i32 [ %124, %123 ], [ %130, %126 ]
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %134
  %136 = load i8, ptr %135, align 1, !tbaa !17
  %137 = icmp eq i8 %136, 9
  br i1 %137, label %138, label %150

138:                                              ; preds = %131, %112
  %139 = phi ptr [ %132, %131 ], [ %113, %112 ]
  %140 = load i64, ptr %139, align 8
  %141 = and i64 %140, 65535
  %142 = icmp eq i64 %141, 14
  br i1 %142, label %143, label %145

143:                                              ; preds = %138
  %144 = tail call i32 @vector_type_mode(ptr noundef nonnull %139) #24
  br label %167

145:                                              ; preds = %138
  %146 = getelementptr inbounds %struct.tree_type, ptr %139, i64 0, i32 6
  %147 = load i32, ptr %146, align 4
  %148 = lshr i32 %147, 16
  %149 = and i32 %148, 255
  br label %167

150:                                              ; preds = %131
  %151 = load i64, ptr %132, align 8
  %152 = and i64 %151, 65535
  %153 = icmp eq i64 %152, 14
  br i1 %153, label %154, label %156

154:                                              ; preds = %150
  %155 = tail call i32 @vector_type_mode(ptr noundef nonnull %132) #24
  br label %161

156:                                              ; preds = %150
  %157 = getelementptr inbounds %struct.tree_type, ptr %132, i64 0, i32 6
  %158 = load i32, ptr %157, align 4
  %159 = lshr i32 %158, 16
  %160 = and i32 %159, 255
  br label %161

161:                                              ; preds = %156, %154
  %162 = phi i32 [ %155, %154 ], [ %160, %156 ]
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %163
  %165 = load i8, ptr %164, align 1, !tbaa !17
  %166 = zext i8 %165 to i32
  br label %167

167:                                              ; preds = %143, %145, %161
  %168 = phi i32 [ %166, %161 ], [ %144, %143 ], [ %149, %145 ]
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %169
  %171 = load i8, ptr %170, align 1, !tbaa !17
  %172 = icmp eq i8 %171, 9
  %173 = load ptr, ptr %22, align 8, !tbaa !17
  %174 = load i64, ptr %173, align 8
  %175 = and i64 %174, 65535
  %176 = icmp eq i64 %175, 14
  br i1 %172, label %177, label %241

177:                                              ; preds = %167
  br i1 %176, label %178, label %181

178:                                              ; preds = %177
  %179 = tail call i32 @vector_type_mode(ptr noundef nonnull %173) #24
  %180 = load ptr, ptr %22, align 8, !tbaa !17
  br label %186

181:                                              ; preds = %177
  %182 = getelementptr inbounds %struct.tree_type, ptr %173, i64 0, i32 6
  %183 = load i32, ptr %182, align 4
  %184 = lshr i32 %183, 16
  %185 = and i32 %184, 255
  br label %186

186:                                              ; preds = %181, %178
  %187 = phi ptr [ %180, %178 ], [ %173, %181 ]
  %188 = phi i32 [ %179, %178 ], [ %185, %181 ]
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %189
  %191 = load i8, ptr %190, align 1, !tbaa !17
  %192 = icmp eq i8 %191, 8
  br i1 %192, label %212, label %193

193:                                              ; preds = %186
  %194 = load i64, ptr %187, align 8
  %195 = and i64 %194, 65535
  %196 = icmp eq i64 %195, 14
  br i1 %196, label %197, label %200

197:                                              ; preds = %193
  %198 = tail call i32 @vector_type_mode(ptr noundef nonnull %187) #24
  %199 = load ptr, ptr %22, align 8, !tbaa !17
  br label %205

200:                                              ; preds = %193
  %201 = getelementptr inbounds %struct.tree_type, ptr %187, i64 0, i32 6
  %202 = load i32, ptr %201, align 4
  %203 = lshr i32 %202, 16
  %204 = and i32 %203, 255
  br label %205

205:                                              ; preds = %200, %197
  %206 = phi ptr [ %199, %197 ], [ %187, %200 ]
  %207 = phi i32 [ %198, %197 ], [ %204, %200 ]
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %208
  %210 = load i8, ptr %209, align 1, !tbaa !17
  %211 = icmp eq i8 %210, 9
  br i1 %211, label %212, label %224

212:                                              ; preds = %205, %186
  %213 = phi ptr [ %206, %205 ], [ %187, %186 ]
  %214 = load i64, ptr %213, align 8
  %215 = and i64 %214, 65535
  %216 = icmp eq i64 %215, 14
  br i1 %216, label %217, label %219

217:                                              ; preds = %212
  %218 = tail call i32 @vector_type_mode(ptr noundef nonnull %213) #24
  br label %305

219:                                              ; preds = %212
  %220 = getelementptr inbounds %struct.tree_type, ptr %213, i64 0, i32 6
  %221 = load i32, ptr %220, align 4
  %222 = lshr i32 %221, 16
  %223 = and i32 %222, 255
  br label %305

224:                                              ; preds = %205
  %225 = load i64, ptr %206, align 8
  %226 = and i64 %225, 65535
  %227 = icmp eq i64 %226, 14
  br i1 %227, label %228, label %230

228:                                              ; preds = %224
  %229 = tail call i32 @vector_type_mode(ptr noundef nonnull %206) #24
  br label %235

230:                                              ; preds = %224
  %231 = getelementptr inbounds %struct.tree_type, ptr %206, i64 0, i32 6
  %232 = load i32, ptr %231, align 4
  %233 = lshr i32 %232, 16
  %234 = and i32 %233, 255
  br label %235

235:                                              ; preds = %230, %228
  %236 = phi i32 [ %229, %228 ], [ %234, %230 ]
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %237
  %239 = load i8, ptr %238, align 1, !tbaa !17
  %240 = zext i8 %239 to i32
  br label %305

241:                                              ; preds = %167
  br i1 %176, label %242, label %245

242:                                              ; preds = %241
  %243 = tail call i32 @vector_type_mode(ptr noundef nonnull %173) #24
  %244 = load ptr, ptr %22, align 8, !tbaa !17
  br label %250

245:                                              ; preds = %241
  %246 = getelementptr inbounds %struct.tree_type, ptr %173, i64 0, i32 6
  %247 = load i32, ptr %246, align 4
  %248 = lshr i32 %247, 16
  %249 = and i32 %248, 255
  br label %250

250:                                              ; preds = %245, %242
  %251 = phi ptr [ %244, %242 ], [ %173, %245 ]
  %252 = phi i32 [ %243, %242 ], [ %249, %245 ]
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %253
  %255 = load i8, ptr %254, align 1, !tbaa !17
  %256 = icmp eq i8 %255, 8
  br i1 %256, label %276, label %257

257:                                              ; preds = %250
  %258 = load i64, ptr %251, align 8
  %259 = and i64 %258, 65535
  %260 = icmp eq i64 %259, 14
  br i1 %260, label %261, label %264

261:                                              ; preds = %257
  %262 = tail call i32 @vector_type_mode(ptr noundef nonnull %251) #24
  %263 = load ptr, ptr %22, align 8, !tbaa !17
  br label %269

264:                                              ; preds = %257
  %265 = getelementptr inbounds %struct.tree_type, ptr %251, i64 0, i32 6
  %266 = load i32, ptr %265, align 4
  %267 = lshr i32 %266, 16
  %268 = and i32 %267, 255
  br label %269

269:                                              ; preds = %264, %261
  %270 = phi ptr [ %263, %261 ], [ %251, %264 ]
  %271 = phi i32 [ %262, %261 ], [ %268, %264 ]
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %272
  %274 = load i8, ptr %273, align 1, !tbaa !17
  %275 = icmp eq i8 %274, 9
  br i1 %275, label %276, label %288

276:                                              ; preds = %269, %250
  %277 = phi ptr [ %270, %269 ], [ %251, %250 ]
  %278 = load i64, ptr %277, align 8
  %279 = and i64 %278, 65535
  %280 = icmp eq i64 %279, 14
  br i1 %280, label %281, label %283

281:                                              ; preds = %276
  %282 = tail call i32 @vector_type_mode(ptr noundef nonnull %277) #24
  br label %305

283:                                              ; preds = %276
  %284 = getelementptr inbounds %struct.tree_type, ptr %277, i64 0, i32 6
  %285 = load i32, ptr %284, align 4
  %286 = lshr i32 %285, 16
  %287 = and i32 %286, 255
  br label %305

288:                                              ; preds = %269
  %289 = load i64, ptr %270, align 8
  %290 = and i64 %289, 65535
  %291 = icmp eq i64 %290, 14
  br i1 %291, label %292, label %294

292:                                              ; preds = %288
  %293 = tail call i32 @vector_type_mode(ptr noundef nonnull %270) #24
  br label %299

294:                                              ; preds = %288
  %295 = getelementptr inbounds %struct.tree_type, ptr %270, i64 0, i32 6
  %296 = load i32, ptr %295, align 4
  %297 = lshr i32 %296, 16
  %298 = and i32 %297, 255
  br label %299

299:                                              ; preds = %294, %292
  %300 = phi i32 [ %293, %292 ], [ %298, %294 ]
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %301
  %303 = load i8, ptr %302, align 1, !tbaa !17
  %304 = zext i8 %303 to i32
  br label %305

305:                                              ; preds = %299, %283, %281, %235, %219, %217
  %306 = phi i32 [ %240, %235 ], [ %218, %217 ], [ %223, %219 ], [ %304, %299 ], [ %282, %281 ], [ %287, %283 ]
  %307 = add i32 %306, -38
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %308
  %310 = load ptr, ptr %309, align 8, !tbaa !6
  %311 = getelementptr inbounds %struct.real_format, ptr %310, i64 0, i32 10
  %312 = load i8, ptr %311, align 1, !tbaa !49
  %313 = icmp ne i8 %312, 0
  %314 = load i32, ptr @flag_rounding_math, align 4
  %315 = icmp ne i32 %314, 0
  %316 = select i1 %313, i1 %315, i1 false
  br i1 %316, label %415, label %317

317:                                              ; preds = %305, %91
  %318 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %319 = load ptr, ptr %318, align 8, !tbaa !17
  %320 = tail call ptr @fold_strip_sign_ops(ptr noundef %319)
  %321 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %322 = load ptr, ptr %321, align 8, !tbaa !17
  %323 = tail call ptr @fold_strip_sign_ops(ptr noundef %322)
  %324 = icmp ne ptr %320, null
  %325 = icmp ne ptr %323, null
  %326 = select i1 %324, i1 true, i1 %325
  br i1 %326, label %327, label %415

327:                                              ; preds = %317
  %328 = load i64, ptr %0, align 8
  %329 = trunc i64 %328 to i32
  %330 = and i32 %329, 65535
  %331 = load ptr, ptr %22, align 8, !tbaa !17
  br i1 %324, label %334, label %332

332:                                              ; preds = %327
  %333 = load ptr, ptr %318, align 8, !tbaa !17
  br label %334

334:                                              ; preds = %327, %332
  %335 = phi ptr [ %333, %332 ], [ %320, %327 ]
  br i1 %325, label %338, label %336

336:                                              ; preds = %334
  %337 = load ptr, ptr %321, align 8, !tbaa !17
  br label %338

338:                                              ; preds = %334, %336
  %339 = phi ptr [ %337, %336 ], [ %323, %334 ]
  %340 = tail call ptr @fold_binary_loc(i32 noundef %12, i32 noundef %330, ptr noundef %331, ptr noundef %335, ptr noundef %339)
  %341 = icmp eq ptr %340, null
  br i1 %341, label %342, label %415

342:                                              ; preds = %338
  %343 = tail call ptr @build2_stat(i32 noundef %330, ptr noundef %331, ptr noundef %335, ptr noundef %339) #24
  %344 = getelementptr inbounds %struct.tree_exp, ptr %343, i64 0, i32 1
  store i32 %12, ptr %344, align 8, !tbaa !17
  br label %415

345:                                              ; preds = %11
  %346 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %347 = load ptr, ptr %346, align 8, !tbaa !17
  %348 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %349 = load ptr, ptr %348, align 8, !tbaa !17
  %350 = tail call ptr @fold_strip_sign_ops(ptr noundef %349)
  %351 = icmp eq ptr %350, null
  br i1 %351, label %415, label %352

352:                                              ; preds = %345
  %353 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %354 = load ptr, ptr %353, align 8, !tbaa !17
  %355 = tail call ptr @fold_binary_loc(i32 noundef %12, i32 noundef 52, ptr noundef %354, ptr noundef %347, ptr noundef nonnull %350)
  %356 = icmp eq ptr %355, null
  br i1 %356, label %357, label %415

357:                                              ; preds = %352
  %358 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %354, ptr noundef %347, ptr noundef nonnull %350) #24
  %359 = getelementptr inbounds %struct.tree_exp, ptr %358, i64 0, i32 1
  store i32 %12, ptr %359, align 8, !tbaa !17
  br label %415

360:                                              ; preds = %11
  %361 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %362 = load ptr, ptr %361, align 8, !tbaa !17
  %363 = tail call ptr @fold_strip_sign_ops(ptr noundef %362)
  %364 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 1
  %365 = load ptr, ptr %364, align 8, !tbaa !17
  %366 = tail call ptr @fold_strip_sign_ops(ptr noundef %365)
  %367 = icmp ne ptr %363, null
  %368 = icmp ne ptr %366, null
  %369 = select i1 %367, i1 true, i1 %368
  br i1 %369, label %370, label %415

370:                                              ; preds = %360
  %371 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %372 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %373 = load ptr, ptr %372, align 8, !tbaa !17
  %374 = load ptr, ptr %371, align 8, !tbaa !17
  br i1 %367, label %377, label %375

375:                                              ; preds = %370
  %376 = load ptr, ptr %361, align 8, !tbaa !17
  br label %377

377:                                              ; preds = %370, %375
  %378 = phi ptr [ %376, %375 ], [ %363, %370 ]
  br i1 %368, label %381, label %379

379:                                              ; preds = %377
  %380 = load ptr, ptr %364, align 8, !tbaa !17
  br label %381

381:                                              ; preds = %377, %379
  %382 = phi ptr [ %380, %379 ], [ %366, %377 ]
  %383 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 56), align 4, !tbaa !17
  %384 = icmp eq i32 %383, 9
  br i1 %384, label %385, label %386

385:                                              ; preds = %381
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %386

386:                                              ; preds = %385, %381
  %387 = tail call ptr @fold_ternary_loc(i32 noundef %12, i32 noundef 56, ptr noundef %373, ptr noundef %374, ptr noundef %378, ptr noundef %382)
  %388 = icmp eq ptr %387, null
  br i1 %388, label %389, label %415

389:                                              ; preds = %386
  %390 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %373, ptr noundef %374, ptr noundef %378, ptr noundef %382) #24
  %391 = getelementptr inbounds %struct.tree_exp, ptr %390, i64 0, i32 1
  store i32 %12, ptr %391, align 8, !tbaa !17
  br label %415

392:                                              ; preds = %11
  %393 = tail call i32 @builtin_mathfn_code(ptr noundef nonnull %0) #24
  %394 = add i32 %393, -27
  %395 = icmp ult i32 %394, 3
  br i1 %395, label %396, label %404

396:                                              ; preds = %392
  %397 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %398 = load ptr, ptr %397, align 8, !tbaa !17
  %399 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %400 = load ptr, ptr %399, align 8, !tbaa !17
  %401 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %402 = load ptr, ptr %401, align 8, !tbaa !17
  %403 = tail call ptr @omit_one_operand_loc(i32 noundef %12, ptr noundef %402, ptr noundef %398, ptr noundef %400)
  br label %415

404:                                              ; preds = %392
  %405 = tail call fastcc zeroext i8 @negate_mathfn_p(i32 noundef %393), !range !40
  %406 = icmp eq i8 %405, 0
  br i1 %406, label %415, label %407

407:                                              ; preds = %404
  %408 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %409 = load ptr, ptr %408, align 8, !tbaa !17
  %410 = tail call ptr @fold_strip_sign_ops(ptr noundef %409)
  %411 = icmp eq ptr %410, null
  br i1 %411, label %415, label %412

412:                                              ; preds = %407
  %413 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %0) #24
  %414 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %12, ptr noundef %413, i32 noundef 1, ptr noundef nonnull %410) #24
  br label %415

415:                                              ; preds = %407, %404, %317, %345, %360, %11, %396, %412, %389, %386, %357, %352, %342, %338, %305, %19, %14
  %416 = phi ptr [ %20, %19 ], [ %17, %14 ], [ null, %305 ], [ %340, %338 ], [ %343, %342 ], [ %355, %352 ], [ %358, %357 ], [ %387, %386 ], [ %390, %389 ], [ %414, %412 ], [ %403, %396 ], [ null, %11 ], [ null, %360 ], [ null, %345 ], [ null, %317 ], [ null, %404 ], [ null, %407 ]
  ret ptr %416
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_not_const(ptr nocapture noundef readonly %0, ptr noundef %1) unnamed_addr #10 {
  %3 = load i64, ptr %0, align 8
  %4 = and i64 %3, 65535
  %5 = icmp eq i64 %4, 23
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 15881, ptr noundef nonnull @.str.1) #24
  %7 = load i64, ptr %0, align 8
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i64 [ %3, %2 ], [ %7, %6 ]
  %10 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1
  %11 = load i64, ptr %10, align 8, !tbaa !17
  %12 = xor i64 %11, -1
  %13 = getelementptr inbounds %struct.tree_int_cst, ptr %0, i64 0, i32 1, i32 1
  %14 = load i64, ptr %13, align 8, !tbaa !17
  %15 = xor i64 %14, -1
  %16 = trunc i64 %9 to i32
  %17 = lshr i32 %16, 27
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = tail call ptr @force_fit_type_double(ptr noundef %1, i64 noundef %12, i64 noundef %15, i32 noundef 0, i8 noundef zeroext %19)
  ret ptr %20
}

declare i32 @integer_all_onesp(ptr noundef) local_unnamed_addr #3

declare ptr @mathfn_built_in(ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_unary_ignore_overflow_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %4
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 23
  br i1 %10, label %11, label %20

11:                                               ; preds = %7
  %12 = load i64, ptr %3, align 8
  %13 = and i64 %12, 65535
  %14 = icmp eq i64 %13, 23
  br i1 %14, label %15, label %20

15:                                               ; preds = %11
  switch i32 %1, label %20 [
    i32 116, label %16
    i32 113, label %16
  ]

16:                                               ; preds = %15, %15
  %17 = and i64 %12, 134217728
  %18 = and i64 %8, -134217729
  %19 = or i64 %17, %18
  store i64 %19, ptr %5, align 8
  br label %20

20:                                               ; preds = %15, %16, %11, %7, %4
  ret ptr %5
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = alloca i8, align 1
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca i64, align 8
  %14 = alloca %struct.real_value, align 8
  %15 = alloca %struct.real_value, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.real_value, align 8
  %18 = alloca %struct.real_value, align 8
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %19
  %21 = load i32, ptr %20, align 4, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #24
  %22 = add i32 %21, -4
  %23 = icmp ult i32 %22, 7
  br i1 %23, label %24, label %32

24:                                               ; preds = %5
  %25 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %19
  %26 = load i8, ptr %25, align 1, !tbaa !17
  %27 = icmp eq i8 %26, 2
  %28 = icmp ne ptr %3, null
  %29 = and i1 %28, %27
  %30 = icmp ne ptr %4, null
  %31 = and i1 %30, %29
  br i1 %31, label %33, label %32

32:                                               ; preds = %24, %5
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 10078, ptr noundef nonnull @.str.1) #24
  br label %33

33:                                               ; preds = %24, %32
  %34 = icmp eq i32 %21, 5
  %35 = and i32 %1, -2
  %36 = icmp eq i32 %35, 80
  %37 = or i1 %36, %34
  br i1 %37, label %38, label %41

38:                                               ; preds = %33
  %39 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %3) #24
  %40 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %4) #24
  br label %44

41:                                               ; preds = %33
  %42 = tail call ptr @tree_strip_nop_conversions(ptr noundef %3) #24
  %43 = tail call ptr @tree_strip_nop_conversions(ptr noundef %4) #24
  br label %44

44:                                               ; preds = %41, %38
  %45 = phi ptr [ %40, %38 ], [ %43, %41 ]
  %46 = phi ptr [ %39, %38 ], [ %42, %41 ]
  %47 = load i64, ptr %46, align 8
  %48 = trunc i64 %47 to i16
  switch i16 %48, label %93 [
    i16 23, label %49
    i16 24, label %53
    i16 25, label %57
    i16 26, label %60
    i16 27, label %64
  ]

49:                                               ; preds = %44
  %50 = load i64, ptr %45, align 8
  %51 = and i64 %50, 65535
  %52 = icmp eq i64 %51, 23
  br i1 %52, label %68, label %93

53:                                               ; preds = %44
  %54 = load i64, ptr %45, align 8
  %55 = and i64 %54, 65535
  %56 = icmp eq i64 %55, 24
  br i1 %56, label %68, label %93

57:                                               ; preds = %44
  %58 = load i64, ptr %45, align 8
  %59 = trunc i64 %58 to i16
  switch i16 %59, label %93 [
    i16 25, label %68
    i16 23, label %68
  ]

60:                                               ; preds = %44
  %61 = load i64, ptr %45, align 8
  %62 = and i64 %61, 65535
  %63 = icmp eq i64 %62, 26
  br i1 %63, label %68, label %93

64:                                               ; preds = %44
  %65 = load i64, ptr %45, align 8
  %66 = and i64 %65, 65535
  %67 = icmp eq i64 %66, 27
  br i1 %67, label %68, label %93

68:                                               ; preds = %57, %57, %64, %60, %53, %49
  %69 = icmp eq i32 %21, 7
  br i1 %69, label %70, label %81

70:                                               ; preds = %68
  %71 = load i64, ptr %2, align 8
  %72 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = load i64, ptr %73, align 8
  %75 = xor i64 %74, %71
  %76 = and i64 %75, 2147483648
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %79, label %78

78:                                               ; preds = %70
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 10120, ptr noundef nonnull @.str.1) #24
  br label %79

79:                                               ; preds = %70, %78
  %80 = tail call fastcc ptr @const_binop(i32 noundef %1, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %84

81:                                               ; preds = %68
  br i1 %34, label %82, label %93

82:                                               ; preds = %81
  %83 = tail call fastcc ptr @fold_relational_const(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %84

84:                                               ; preds = %82, %79
  %85 = phi ptr [ %80, %79 ], [ %83, %82 ]
  %86 = icmp eq ptr %85, null
  br i1 %86, label %93, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %struct.tree_common, ptr %85, i64 0, i32 2
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = icmp eq ptr %89, %2
  br i1 %90, label %14075, label %91

91:                                               ; preds = %87
  %92 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %85)
  br label %14075

93:                                               ; preds = %57, %44, %81, %49, %53, %60, %84, %64
  %94 = tail call zeroext i8 @commutative_tree_code(i32 noundef %1) #24
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %105, label %96

96:                                               ; preds = %93
  %97 = tail call zeroext i8 @tree_swap_operands_p(ptr noundef nonnull %46, ptr noundef %45, i8 noundef zeroext 1), !range !40
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %96
  %100 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %4, ptr noundef %3)
  %101 = icmp eq ptr %100, null
  br i1 %101, label %102, label %14075

102:                                              ; preds = %99
  %103 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %4, ptr noundef %3) #24
  %104 = getelementptr inbounds %struct.tree_exp, ptr %103, i64 0, i32 1
  store i32 %0, ptr %104, align 8, !tbaa !17
  br label %14075

105:                                              ; preds = %96, %93
  %106 = icmp eq i32 %1, 89
  %107 = icmp eq i32 %1, 87
  %108 = icmp eq i32 %1, 101
  %109 = icmp eq i32 %1, 102
  switch i32 %1, label %227 [
    i32 102, label %110
    i32 101, label %110
    i32 89, label %110
    i32 87, label %110
  ]

110:                                              ; preds = %105, %105, %105, %105
  %111 = load i64, ptr %46, align 8
  %112 = trunc i64 %111 to i32
  %113 = and i32 %112, 65535
  %114 = and i64 %111, 65535
  %115 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %114
  %116 = load i32, ptr %115, align 4, !tbaa !17
  %117 = icmp eq i32 %116, 5
  %118 = icmp eq i32 %113, 93
  %119 = or i1 %117, %118
  %120 = icmp eq i32 %113, 91
  %121 = or i1 %120, %119
  %122 = and i32 %112, 65533
  %123 = icmp eq i32 %122, 92
  %124 = or i1 %123, %121
  %125 = add nsw i32 %113, -95
  %126 = icmp ult i32 %125, 2
  %127 = or i1 %126, %124
  %128 = load i64, ptr %45, align 8
  br i1 %127, label %129, label %155

129:                                              ; preds = %110
  %130 = trunc i64 %128 to i32
  %131 = and i32 %130, 65535
  %132 = and i64 %128, 65535
  %133 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %132
  %134 = load i32, ptr %133, align 4, !tbaa !17
  %135 = icmp eq i32 %134, 5
  %136 = icmp eq i32 %131, 93
  %137 = or i1 %136, %135
  %138 = icmp eq i32 %131, 91
  %139 = or i1 %138, %137
  %140 = and i32 %130, 65533
  %141 = icmp eq i32 %140, 92
  %142 = or i1 %141, %139
  %143 = add nsw i32 %131, -95
  %144 = icmp ult i32 %143, 2
  %145 = or i1 %144, %142
  br i1 %145, label %198, label %146

146:                                              ; preds = %129
  %147 = icmp eq i64 %132, 89
  br i1 %147, label %148, label %155

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %150 = load ptr, ptr %149, align 8, !tbaa !17
  %151 = tail call i32 @integer_onep(ptr noundef %150) #24
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %198

153:                                              ; preds = %148
  %154 = load i64, ptr %45, align 8
  br label %155

155:                                              ; preds = %153, %146, %110
  %156 = phi i64 [ %154, %153 ], [ %128, %146 ], [ %128, %110 ]
  %157 = trunc i64 %156 to i32
  %158 = and i32 %157, 65535
  %159 = and i64 %156, 65535
  %160 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %159
  %161 = load i32, ptr %160, align 4, !tbaa !17
  %162 = icmp eq i32 %161, 5
  %163 = icmp eq i32 %158, 93
  %164 = or i1 %162, %163
  %165 = icmp eq i32 %158, 91
  %166 = or i1 %165, %164
  %167 = and i32 %157, 65533
  %168 = icmp eq i32 %167, 92
  %169 = or i1 %168, %166
  %170 = add nsw i32 %158, -95
  %171 = icmp ult i32 %170, 2
  %172 = or i1 %171, %169
  br i1 %172, label %173, label %227

173:                                              ; preds = %155
  %174 = load i64, ptr %46, align 8
  %175 = trunc i64 %174 to i32
  %176 = and i32 %175, 65535
  %177 = and i64 %174, 65535
  %178 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %177
  %179 = load i32, ptr %178, align 4, !tbaa !17
  %180 = icmp eq i32 %179, 5
  %181 = icmp eq i32 %176, 93
  %182 = or i1 %180, %181
  %183 = icmp eq i32 %176, 91
  %184 = or i1 %183, %182
  %185 = and i32 %175, 65533
  %186 = icmp eq i32 %185, 92
  %187 = or i1 %186, %184
  %188 = add nsw i32 %176, -95
  %189 = icmp ult i32 %188, 2
  %190 = or i1 %189, %187
  br i1 %190, label %198, label %191

191:                                              ; preds = %173
  %192 = icmp eq i64 %177, 89
  br i1 %192, label %193, label %227

193:                                              ; preds = %191
  %194 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %195 = load ptr, ptr %194, align 8, !tbaa !17
  %196 = tail call i32 @integer_onep(ptr noundef %195) #24
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %227, label %198

198:                                              ; preds = %193, %173, %148, %129
  %199 = select i1 %107, i32 94, i32 95
  %200 = select i1 %106, i32 93, i32 %199
  %201 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %202 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %201, ptr noundef nonnull %46)
  %203 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %204 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %203, ptr noundef nonnull %45)
  %205 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %200, ptr noundef %201, ptr noundef %202, ptr noundef %204)
  %206 = icmp eq ptr %205, null
  br i1 %206, label %207, label %210

207:                                              ; preds = %198
  %208 = tail call ptr @build2_stat(i32 noundef %200, ptr noundef %201, ptr noundef %202, ptr noundef %204) #24
  %209 = getelementptr inbounds %struct.tree_exp, ptr %208, i64 0, i32 1
  store i32 %0, ptr %209, align 8, !tbaa !17
  br label %210

210:                                              ; preds = %198, %207
  %211 = phi ptr [ %205, %198 ], [ %208, %207 ]
  br i1 %108, label %212, label %224

212:                                              ; preds = %210
  %213 = load i64, ptr %211, align 8
  %214 = and i64 %213, 65535
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %224, label %216

216:                                              ; preds = %212
  %217 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %211) #25
  %218 = icmp eq ptr %217, null
  br i1 %218, label %219, label %224

219:                                              ; preds = %216
  %220 = getelementptr inbounds %struct.tree_common, ptr %211, i64 0, i32 2
  %221 = load ptr, ptr %220, align 8, !tbaa !17
  %222 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %221, ptr noundef nonnull %211) #24
  %223 = getelementptr inbounds %struct.tree_exp, ptr %222, i64 0, i32 1
  store i32 %0, ptr %223, align 8, !tbaa !17
  br label %224

224:                                              ; preds = %219, %216, %212, %210
  %225 = phi ptr [ %211, %210 ], [ %211, %212 ], [ %217, %216 ], [ %222, %219 ]
  %226 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %225)
  br label %14075

227:                                              ; preds = %105, %193, %191, %155
  switch i32 %21, label %305 [
    i32 7, label %228
    i32 5, label %228
  ]

228:                                              ; preds = %227, %227
  %229 = load i64, ptr %46, align 8
  %230 = and i64 %229, 65535
  %231 = icmp eq i64 %230, 52
  br i1 %231, label %232, label %248

232:                                              ; preds = %228
  %233 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %234 = load ptr, ptr %233, align 8, !tbaa !17
  %235 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %236 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %237 = load ptr, ptr %236, align 8, !tbaa !17
  %238 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %234, ptr noundef %237)
  %239 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %238, ptr noundef %4)
  %240 = icmp eq ptr %239, null
  br i1 %240, label %241, label %244

241:                                              ; preds = %232
  %242 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %238, ptr noundef %4) #24
  %243 = getelementptr inbounds %struct.tree_exp, ptr %242, i64 0, i32 1
  store i32 %0, ptr %243, align 8, !tbaa !17
  br label %244

244:                                              ; preds = %232, %241
  %245 = phi ptr [ %239, %232 ], [ %242, %241 ]
  %246 = load ptr, ptr %235, align 8, !tbaa !17
  %247 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %2, ptr noundef %246, ptr noundef nonnull %245) #24
  br label %14073

248:                                              ; preds = %228
  %249 = load i64, ptr %45, align 8
  %250 = and i64 %249, 65535
  %251 = icmp eq i64 %250, 52
  br i1 %251, label %252, label %283

252:                                              ; preds = %248
  %253 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %254 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %255 = icmp ne i32 %254, 0
  %256 = and i64 %229, 131072
  %257 = icmp eq i64 %256, 0
  %258 = and i1 %257, %255
  br i1 %258, label %259, label %268

259:                                              ; preds = %252
  %260 = load ptr, ptr %253, align 8, !tbaa !17
  %261 = load i64, ptr %260, align 8
  %262 = and i64 %261, 131072
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %268

264:                                              ; preds = %259
  %265 = or i64 %261, %229
  %266 = and i64 %265, 65536
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %283

268:                                              ; preds = %259, %252, %264
  %269 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %270 = load ptr, ptr %269, align 8, !tbaa !17
  %271 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %272 = load ptr, ptr %271, align 8, !tbaa !17
  %273 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %270, ptr noundef %272)
  %274 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %273)
  %275 = icmp eq ptr %274, null
  br i1 %275, label %276, label %279

276:                                              ; preds = %268
  %277 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %273) #24
  %278 = getelementptr inbounds %struct.tree_exp, ptr %277, i64 0, i32 1
  store i32 %0, ptr %278, align 8, !tbaa !17
  br label %279

279:                                              ; preds = %268, %276
  %280 = phi ptr [ %274, %268 ], [ %277, %276 ]
  %281 = load ptr, ptr %253, align 8, !tbaa !17
  %282 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %2, ptr noundef %281, ptr noundef nonnull %280) #24
  br label %14073

283:                                              ; preds = %264, %248
  %284 = icmp eq i64 %230, 56
  br i1 %284, label %289, label %285

285:                                              ; preds = %283
  %286 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %230
  %287 = load i32, ptr %286, align 4, !tbaa !17
  %288 = icmp eq i32 %287, 5
  br i1 %288, label %289, label %295

289:                                              ; preds = %285, %283
  %290 = tail call fastcc ptr @fold_binary_op_with_conditional_arg(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 1)
  %291 = icmp eq ptr %290, null
  br i1 %291, label %292, label %14075

292:                                              ; preds = %289
  %293 = load i64, ptr %45, align 8
  %294 = and i64 %293, 65535
  br label %295

295:                                              ; preds = %292, %285
  %296 = phi i64 [ %294, %292 ], [ %250, %285 ]
  %297 = icmp eq i64 %296, 56
  br i1 %297, label %302, label %298

298:                                              ; preds = %295
  %299 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %296
  %300 = load i32, ptr %299, align 4, !tbaa !17
  %301 = icmp eq i32 %300, 5
  br i1 %301, label %302, label %305

302:                                              ; preds = %298, %295
  %303 = tail call fastcc ptr @fold_binary_op_with_conditional_arg(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef nonnull %45, ptr noundef nonnull %46, i32 noundef 0)
  %304 = icmp eq ptr %303, null
  br i1 %304, label %305, label %14075

305:                                              ; preds = %227, %298, %302
  switch i32 %1, label %14075 [
    i32 66, label %306
    i32 63, label %390
    i32 64, label %1706
    i32 65, label %3068
    i32 87, label %6209
    i32 88, label %6489
    i32 89, label %6767
    i32 75, label %7307
    i32 67, label %10307
    i32 69, label %10307
    i32 70, label %10356
    i32 68, label %10356
    i32 76, label %10356
    i32 72, label %10488
    i32 73, label %10488
    i32 74, label %10488
    i32 71, label %10488
    i32 85, label %10608
    i32 86, label %10608
    i32 84, label %10613
    i32 83, label %10625
    i32 80, label %10843
    i32 81, label %10864
    i32 91, label %10887
    i32 93, label %10892
    i32 92, label %11067
    i32 94, label %11076
    i32 95, label %11146
    i32 101, label %11199
    i32 102, label %11199
    i32 97, label %12187
    i32 99, label %12187
    i32 98, label %12187
    i32 100, label %12187
    i32 103, label %13942
    i32 104, label %13942
    i32 105, label %13942
    i32 106, label %13942
    i32 107, label %13942
    i32 108, label %13942
    i32 109, label %13942
    i32 110, label %13942
    i32 52, label %14041
    i32 123, label %14059
    i32 148, label %14072
  ]

306:                                              ; preds = %305
  %307 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %312, label %309

309:                                              ; preds = %306
  %310 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45)
  %311 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %310)
  br label %14075

312:                                              ; preds = %306
  %313 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %318, label %315

315:                                              ; preds = %312
  %316 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %317 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %316)
  br label %14075

318:                                              ; preds = %312
  %319 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %320 = load ptr, ptr %319, align 8, !tbaa !17
  %321 = load i64, ptr %320, align 8
  %322 = trunc i64 %321 to i32
  %323 = and i32 %322, 65535
  %324 = add nsw i32 %323, -6
  %325 = icmp ult i32 %324, 3
  br i1 %325, label %326, label %341

326:                                              ; preds = %318
  %327 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %328 = load ptr, ptr %327, align 8, !tbaa !17
  %329 = load i64, ptr %328, align 8
  %330 = trunc i64 %329 to i32
  %331 = and i32 %330, 65535
  %332 = add nsw i32 %331, -6
  %333 = icmp ult i32 %332, 3
  br i1 %333, label %334, label %341

334:                                              ; preds = %326
  %335 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %336 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %335, ptr noundef nonnull %45)
  %337 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %338 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %337, ptr noundef nonnull %46)
  %339 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %335, ptr noundef %336, ptr noundef %338)
  %340 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %339)
  br label %14075

341:                                              ; preds = %326, %318
  %342 = trunc i64 %321 to i16
  switch i16 %342, label %356 [
    i16 10, label %343
    i16 12, label %343
  ]

343:                                              ; preds = %341, %341
  %344 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %345 = load ptr, ptr %344, align 8, !tbaa !17
  %346 = load i64, ptr %345, align 8
  %347 = trunc i64 %346 to i32
  %348 = and i32 %347, 65535
  %349 = add nsw i32 %348, -6
  %350 = icmp ult i32 %349, 3
  br i1 %350, label %351, label %356

351:                                              ; preds = %343
  %352 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %353 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %354 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %353, ptr noundef nonnull %46)
  %355 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 66, ptr noundef %2, ptr noundef %352, ptr noundef %354)
  br label %14075

356:                                              ; preds = %343, %341
  %357 = load i64, ptr %46, align 8
  %358 = trunc i64 %357 to i16
  switch i16 %358, label %380 [
    i16 66, label %359
    i16 23, label %373
  ]

359:                                              ; preds = %356
  %360 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %361 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %362 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %363 = load ptr, ptr %362, align 8, !tbaa !17
  %364 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %360, ptr noundef %363)
  %365 = load ptr, ptr %361, align 8, !tbaa !17
  %366 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %367 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %366, ptr noundef nonnull %45)
  %368 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %366, ptr noundef %364, ptr noundef %367)
  %369 = getelementptr inbounds %struct.tree_common, ptr %365, i64 0, i32 2
  %370 = load ptr, ptr %369, align 8, !tbaa !17
  %371 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 66, ptr noundef %370, ptr noundef %365, ptr noundef %368)
  %372 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %371)
  br label %14075

373:                                              ; preds = %356
  %374 = load i64, ptr %45, align 8
  %375 = and i64 %374, 65535
  %376 = icmp eq i64 %375, 23
  br i1 %376, label %377, label %380

377:                                              ; preds = %373
  %378 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %379 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %378)
  br label %14075

380:                                              ; preds = %356, %373
  %381 = and i64 %357, 65535
  %382 = icmp eq i64 %381, 121
  br i1 %382, label %383, label %14075

383:                                              ; preds = %380
  %384 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %385 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %384, ptr noundef nonnull %45)
  %386 = tail call fastcc ptr @try_move_mult_to_index(i32 noundef %0, ptr noundef nonnull %46, ptr noundef %385)
  %387 = icmp eq ptr %386, null
  br i1 %387, label %14075, label %388

388:                                              ; preds = %383
  %389 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %386)
  br label %14075

390:                                              ; preds = %305
  %391 = load i64, ptr %45, align 8
  %392 = and i64 %391, 65535
  %393 = icmp eq i64 %392, 79
  br i1 %393, label %394, label %400

394:                                              ; preds = %390
  %395 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %396 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %397 = load ptr, ptr %396, align 8, !tbaa !17
  %398 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %397)
  %399 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef %2, ptr noundef %395, ptr noundef %398)
  br label %14075

400:                                              ; preds = %390
  %401 = load i64, ptr %46, align 8
  %402 = and i64 %401, 65535
  %403 = icmp eq i64 %402, 79
  br i1 %403, label %404, label %419

404:                                              ; preds = %400
  %405 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %406 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %414, label %408

408:                                              ; preds = %404
  %409 = load ptr, ptr %405, align 8, !tbaa !17
  %410 = load i64, ptr %409, align 8
  %411 = or i64 %410, %391
  %412 = and i64 %411, 196608
  %413 = icmp eq i64 %412, 65536
  br i1 %413, label %425, label %414

414:                                              ; preds = %408, %404
  %415 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %416 = load ptr, ptr %405, align 8, !tbaa !17
  %417 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %416)
  %418 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef %2, ptr noundef %415, ptr noundef %417)
  br label %14075

419:                                              ; preds = %400
  %420 = load i64, ptr %2, align 8
  %421 = trunc i64 %420 to i32
  %422 = and i32 %421, 65535
  %423 = add nsw i32 %422, -6
  %424 = icmp ult i32 %423, 3
  br i1 %424, label %431, label %518

425:                                              ; preds = %408
  %426 = load i64, ptr %2, align 8
  %427 = trunc i64 %426 to i32
  %428 = and i32 %427, 65535
  %429 = add nsw i32 %428, -6
  %430 = icmp ult i32 %429, 3
  br i1 %430, label %443, label %518

431:                                              ; preds = %419
  %432 = icmp eq i64 %402, 90
  br i1 %432, label %433, label %443

433:                                              ; preds = %431
  %434 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %436, label %438

436:                                              ; preds = %433
  %437 = load i64, ptr %46, align 8
  br label %443

438:                                              ; preds = %433
  %439 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %440 = load ptr, ptr %439, align 8, !tbaa !17
  %441 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %440)
  %442 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 79, ptr noundef nonnull %2, ptr noundef %441)
  br label %14075

443:                                              ; preds = %436, %425, %431
  %444 = phi i64 [ %437, %436 ], [ %401, %425 ], [ %401, %431 ]
  %445 = and i64 %444, 65535
  %446 = icmp eq i64 %445, 90
  br i1 %446, label %447, label %463

447:                                              ; preds = %443
  %448 = load i64, ptr %2, align 8
  %449 = and i64 %448, 2097152
  %450 = icmp eq i64 %449, 0
  %451 = load i32, ptr @flag_trapv, align 4
  %452 = icmp ne i32 %451, 0
  %453 = select i1 %450, i1 %452, i1 false
  br i1 %453, label %463, label %454

454:                                              ; preds = %447
  %455 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %456 = load ptr, ptr %455, align 8, !tbaa !17
  %457 = tail call ptr @tree_strip_nop_conversions(ptr noundef %456) #24
  %458 = tail call i32 @operand_equal_p(ptr noundef %457, ptr noundef nonnull %45, i32 noundef 0)
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %463, label %460

460:                                              ; preds = %454
  %461 = tail call ptr @build_int_cst_type(ptr noundef nonnull %2, i64 noundef -1) #24
  %462 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %461, ptr noundef nonnull %45)
  br label %14075

463:                                              ; preds = %454, %447, %443
  %464 = load i64, ptr %45, align 8
  %465 = and i64 %464, 65535
  %466 = icmp eq i64 %465, 90
  br i1 %466, label %467, label %485

467:                                              ; preds = %463
  %468 = load i64, ptr %2, align 8
  %469 = and i64 %468, 2097152
  %470 = icmp eq i64 %469, 0
  %471 = load i32, ptr @flag_trapv, align 4
  %472 = icmp ne i32 %471, 0
  %473 = select i1 %470, i1 %472, i1 false
  br i1 %473, label %485, label %474

474:                                              ; preds = %467
  %475 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %476 = load ptr, ptr %475, align 8, !tbaa !17
  %477 = tail call ptr @tree_strip_nop_conversions(ptr noundef %476) #24
  %478 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %477, i32 noundef 0)
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %482

480:                                              ; preds = %474
  %481 = load i64, ptr %45, align 8
  br label %485

482:                                              ; preds = %474
  %483 = tail call ptr @build_int_cst_type(ptr noundef nonnull %2, i64 noundef -1) #24
  %484 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %483, ptr noundef nonnull %46)
  br label %14075

485:                                              ; preds = %480, %467, %463
  %486 = phi i64 [ %481, %480 ], [ %464, %467 ], [ %464, %463 ]
  %487 = and i64 %486, 65535
  %488 = icmp eq i64 %487, 65
  br i1 %488, label %489, label %518

489:                                              ; preds = %485
  %490 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %491 = load ptr, ptr %490, align 8, !tbaa !17
  %492 = load i64, ptr %491, align 8
  %493 = and i64 %492, 65535
  %494 = icmp eq i64 %493, 67
  br i1 %494, label %495, label %518

495:                                              ; preds = %489
  %496 = getelementptr inbounds %struct.tree_exp, ptr %491, i64 0, i32 3
  %497 = load ptr, ptr %496, align 8, !tbaa !17
  %498 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %497, i32 noundef 0)
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %518, label %500

500:                                              ; preds = %495
  %501 = load ptr, ptr %490, align 8, !tbaa !17
  %502 = getelementptr inbounds %struct.tree_exp, ptr %501, i64 1
  %503 = load ptr, ptr %502, align 8, !tbaa !17
  %504 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %505 = load ptr, ptr %504, align 8, !tbaa !17
  %506 = getelementptr inbounds %struct.tree_common, ptr %505, i64 0, i32 2
  %507 = load ptr, ptr %506, align 8, !tbaa !17
  %508 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 63, ptr noundef %507, ptr noundef %505, ptr noundef %503)
  %509 = icmp eq ptr %508, null
  br i1 %509, label %518, label %510

510:                                              ; preds = %500
  %511 = tail call i32 @integer_zerop(ptr noundef nonnull %508) #24
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %518, label %513

513:                                              ; preds = %510
  %514 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %515 = load ptr, ptr %514, align 8, !tbaa !17
  %516 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 71, ptr noundef %515, ptr noundef nonnull %46, ptr noundef %503)
  %517 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %516)
  br label %14075

518:                                              ; preds = %500, %510, %425, %419, %485, %489, %495
  %519 = load i64, ptr %46, align 8
  %520 = and i64 %519, 65535
  %521 = icmp eq i64 %520, 65
  br i1 %521, label %526, label %522

522:                                              ; preds = %518
  %523 = load i64, ptr %45, align 8
  %524 = and i64 %523, 65535
  %525 = icmp eq i64 %524, 65
  br i1 %525, label %526, label %547

526:                                              ; preds = %522, %518
  %527 = load i64, ptr %2, align 8
  %528 = and i64 %527, 2147483648
  %529 = icmp eq i64 %528, 0
  br i1 %529, label %530, label %547

530:                                              ; preds = %526
  %531 = trunc i64 %527 to i16
  switch i16 %531, label %544 [
    i16 9, label %541
    i16 13, label %532
    i16 14, label %532
  ]

532:                                              ; preds = %530, %530
  %533 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %534 = load ptr, ptr %533, align 8, !tbaa !17
  %535 = load i64, ptr %534, align 8
  %536 = and i64 %535, 65535
  %537 = icmp ne i64 %536, 9
  %538 = load i32, ptr @flag_associative_math, align 4
  %539 = icmp ne i32 %538, 0
  %540 = select i1 %537, i1 true, i1 %539
  br i1 %540, label %544, label %547

541:                                              ; preds = %530
  %542 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %547, label %544

544:                                              ; preds = %530, %541, %532
  %545 = tail call fastcc ptr @fold_plusminus_mult_expr(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %546 = icmp eq ptr %545, null
  br i1 %546, label %547, label %14075

547:                                              ; preds = %544, %532, %541, %526, %522
  %548 = load i64, ptr %2, align 8
  %549 = trunc i64 %548 to i16
  switch i16 %549, label %556 [
    i16 9, label %645
    i16 13, label %550
    i16 14, label %550
  ]

550:                                              ; preds = %547, %547
  %551 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %552 = load ptr, ptr %551, align 8, !tbaa !17
  %553 = load i64, ptr %552, align 8
  %554 = and i64 %553, 65535
  %555 = icmp eq i64 %554, 9
  br i1 %555, label %645, label %556

556:                                              ; preds = %547, %550
  %557 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %562, label %559

559:                                              ; preds = %556
  %560 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %561 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %560)
  br label %14075

562:                                              ; preds = %556
  %563 = load i64, ptr %46, align 8
  %564 = and i64 %563, 65535
  %565 = icmp eq i64 %564, 89
  %566 = load i64, ptr %45, align 8
  %567 = and i64 %566, 65535
  %568 = icmp eq i64 %567, 89
  %569 = select i1 %565, i1 %568, i1 false
  br i1 %569, label %570, label %590

570:                                              ; preds = %562
  %571 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %572 = load ptr, ptr %571, align 8, !tbaa !17
  %573 = load i64, ptr %572, align 8
  %574 = and i64 %573, 65535
  %575 = icmp eq i64 %574, 23
  br i1 %575, label %576, label %600

576:                                              ; preds = %570
  %577 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %578 = load ptr, ptr %577, align 8, !tbaa !17
  %579 = load i64, ptr %578, align 8
  %580 = and i64 %579, 65535
  %581 = icmp eq i64 %580, 23
  br i1 %581, label %582, label %600

582:                                              ; preds = %576
  %583 = tail call fastcc ptr @const_binop(i32 noundef 89, ptr noundef nonnull %572, ptr noundef nonnull %578)
  %584 = tail call i32 @integer_zerop(ptr noundef %583) #24
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %6209

586:                                              ; preds = %582
  %587 = load i64, ptr %46, align 8
  %588 = load i64, ptr %45, align 8
  %589 = and i64 %588, 65535
  br label %590

590:                                              ; preds = %586, %562
  %591 = phi i64 [ %589, %586 ], [ %567, %562 ]
  %592 = phi i64 [ %588, %586 ], [ %566, %562 ]
  %593 = phi i64 [ %587, %586 ], [ %563, %562 ]
  %594 = trunc i64 %593 to i32
  %595 = and i32 %594, 65535
  %596 = add nsw i32 %595, -63
  %597 = icmp ult i32 %596, 2
  %598 = icmp eq i64 %591, 65
  %599 = select i1 %597, i1 %598, i1 false
  br i1 %599, label %611, label %600

600:                                              ; preds = %570, %576, %590
  %601 = phi i64 [ %593, %590 ], [ %563, %576 ], [ %563, %570 ]
  %602 = phi i64 [ %592, %590 ], [ %566, %576 ], [ %566, %570 ]
  %603 = phi i64 [ %591, %590 ], [ 89, %576 ], [ 89, %570 ]
  %604 = trunc i64 %602 to i32
  %605 = and i32 %604, 65535
  %606 = add nsw i32 %605, -63
  %607 = icmp ult i32 %606, 2
  %608 = and i64 %601, 65535
  %609 = icmp eq i64 %608, 65
  %610 = and i1 %609, %607
  br i1 %610, label %611, label %1415

611:                                              ; preds = %600, %590
  %612 = phi i64 [ 65, %590 ], [ %603, %600 ]
  %613 = icmp eq i64 %612, 65
  %614 = select i1 %613, ptr %45, ptr %46
  %615 = select i1 %613, ptr %46, ptr %45
  %616 = load i64, ptr %615, align 8
  %617 = trunc i64 %616 to i32
  %618 = and i32 %617, 65535
  %619 = getelementptr inbounds %struct.tree_exp, ptr %615, i64 0, i32 3
  %620 = load ptr, ptr %619, align 8, !tbaa !17
  %621 = getelementptr inbounds %struct.tree_exp, ptr %615, i64 1
  %622 = load ptr, ptr %621, align 8, !tbaa !17
  %623 = tail call ptr @tree_strip_nop_conversions(ptr noundef %620) #24
  %624 = tail call ptr @tree_strip_nop_conversions(ptr noundef %622) #24
  %625 = load i64, ptr %623, align 8
  %626 = and i64 %625, 65535
  %627 = icmp eq i64 %626, 65
  %628 = load i64, ptr %624, align 8
  %629 = and i64 %628, 65535
  %630 = icmp eq i64 %629, 65
  br i1 %627, label %631, label %638

631:                                              ; preds = %611
  br i1 %630, label %1415, label %632

632:                                              ; preds = %631
  %633 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %623)
  %634 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %614)
  %635 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %633, ptr noundef %634)
  %636 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %624)
  %637 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %618, ptr noundef nonnull %2, ptr noundef %635, ptr noundef %636)
  br label %14075

638:                                              ; preds = %611
  br i1 %630, label %639, label %1415

639:                                              ; preds = %638
  %640 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %623)
  %641 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %614)
  %642 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %624)
  %643 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %618, ptr noundef nonnull %2, ptr noundef %641, ptr noundef %642)
  %644 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %640, ptr noundef %643)
  br label %14075

645:                                              ; preds = %547, %550
  %646 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %647 = load ptr, ptr %646, align 8, !tbaa !17
  %648 = tail call zeroext i8 @fold_real_zero_addition_p(ptr noundef %647, ptr noundef nonnull %45, i32 noundef 0), !range !40
  %649 = icmp eq i8 %648, 0
  br i1 %649, label %653, label %650

650:                                              ; preds = %645
  %651 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %652 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %651)
  br label %14075

653:                                              ; preds = %645
  %654 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %655 = load ptr, ptr %654, align 8, !tbaa !17
  %656 = tail call zeroext i8 @fold_real_zero_addition_p(ptr noundef %655, ptr noundef nonnull %46, i32 noundef 0), !range !40
  %657 = icmp eq i8 %656, 0
  br i1 %657, label %661, label %658

658:                                              ; preds = %653
  %659 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45)
  %660 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %659)
  br label %14075

661:                                              ; preds = %653
  %662 = load i64, ptr %45, align 8
  %663 = and i64 %662, 65535
  %664 = icmp eq i64 %663, 24
  br i1 %664, label %665, label %682

665:                                              ; preds = %661
  %666 = getelementptr inbounds %struct.tree_real_cst, ptr %45, i64 0, i32 1
  %667 = load ptr, ptr %666, align 8, !tbaa !17
  %668 = tail call zeroext i8 @real_isneg(ptr noundef %667) #24
  %669 = icmp eq i8 %668, 0
  br i1 %669, label %682, label %670

670:                                              ; preds = %665
  %671 = tail call fastcc ptr @fold_negate_const(ptr noundef nonnull %45, ptr noundef nonnull %2)
  %672 = load i64, ptr %45, align 8
  %673 = and i64 %672, 134217728
  %674 = icmp ne i64 %673, 0
  %675 = load i32, ptr @flag_trapping_math, align 4
  %676 = icmp ne i32 %675, 0
  %677 = select i1 %674, i1 %676, i1 false
  br i1 %677, label %682, label %678

678:                                              ; preds = %670
  %679 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %680 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %671)
  %681 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef %679, ptr noundef %680)
  br label %14075

682:                                              ; preds = %670, %665, %661
  %683 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %684 = icmp eq i32 %683, 0
  %685 = load ptr, ptr %646, align 8, !tbaa !17
  br i1 %684, label %982, label %686

686:                                              ; preds = %682
  %687 = load i64, ptr %685, align 8
  %688 = and i64 %687, 65535
  %689 = icmp eq i64 %688, 14
  br i1 %689, label %690, label %693

690:                                              ; preds = %686
  %691 = tail call i32 @vector_type_mode(ptr noundef nonnull %685) #24
  %692 = load ptr, ptr %646, align 8, !tbaa !17
  br label %698

693:                                              ; preds = %686
  %694 = getelementptr inbounds %struct.tree_type, ptr %685, i64 0, i32 6
  %695 = load i32, ptr %694, align 4
  %696 = lshr i32 %695, 16
  %697 = and i32 %696, 255
  br label %698

698:                                              ; preds = %693, %690
  %699 = phi ptr [ %692, %690 ], [ %685, %693 ]
  %700 = phi i32 [ %691, %690 ], [ %697, %693 ]
  %701 = zext i32 %700 to i64
  %702 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %701
  %703 = load i8, ptr %702, align 1, !tbaa !17
  %704 = icmp eq i8 %703, 8
  br i1 %704, label %762, label %705

705:                                              ; preds = %698
  %706 = load i64, ptr %699, align 8
  %707 = and i64 %706, 65535
  %708 = icmp eq i64 %707, 14
  br i1 %708, label %709, label %712

709:                                              ; preds = %705
  %710 = tail call i32 @vector_type_mode(ptr noundef nonnull %699) #24
  %711 = load ptr, ptr %646, align 8, !tbaa !17
  br label %717

712:                                              ; preds = %705
  %713 = getelementptr inbounds %struct.tree_type, ptr %699, i64 0, i32 6
  %714 = load i32, ptr %713, align 4
  %715 = lshr i32 %714, 16
  %716 = and i32 %715, 255
  br label %717

717:                                              ; preds = %712, %709
  %718 = phi ptr [ %711, %709 ], [ %699, %712 ]
  %719 = phi i32 [ %710, %709 ], [ %716, %712 ]
  %720 = zext i32 %719 to i64
  %721 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %720
  %722 = load i8, ptr %721, align 1, !tbaa !17
  %723 = icmp eq i8 %722, 9
  br i1 %723, label %762, label %724

724:                                              ; preds = %717
  %725 = load i64, ptr %718, align 8
  %726 = and i64 %725, 65535
  %727 = icmp eq i64 %726, 14
  br i1 %727, label %728, label %731

728:                                              ; preds = %724
  %729 = tail call i32 @vector_type_mode(ptr noundef nonnull %718) #24
  %730 = load ptr, ptr %646, align 8, !tbaa !17
  br label %736

731:                                              ; preds = %724
  %732 = getelementptr inbounds %struct.tree_type, ptr %718, i64 0, i32 6
  %733 = load i32, ptr %732, align 4
  %734 = lshr i32 %733, 16
  %735 = and i32 %734, 255
  br label %736

736:                                              ; preds = %731, %728
  %737 = phi ptr [ %730, %728 ], [ %718, %731 ]
  %738 = phi i32 [ %729, %728 ], [ %735, %731 ]
  %739 = zext i32 %738 to i64
  %740 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %739
  %741 = load i8, ptr %740, align 1, !tbaa !17
  %742 = icmp eq i8 %741, 11
  br i1 %742, label %762, label %743

743:                                              ; preds = %736
  %744 = load i64, ptr %737, align 8
  %745 = and i64 %744, 65535
  %746 = icmp eq i64 %745, 14
  br i1 %746, label %747, label %750

747:                                              ; preds = %743
  %748 = tail call i32 @vector_type_mode(ptr noundef nonnull %737) #24
  %749 = load ptr, ptr %646, align 8, !tbaa !17
  br label %755

750:                                              ; preds = %743
  %751 = getelementptr inbounds %struct.tree_type, ptr %737, i64 0, i32 6
  %752 = load i32, ptr %751, align 4
  %753 = lshr i32 %752, 16
  %754 = and i32 %753, 255
  br label %755

755:                                              ; preds = %750, %747
  %756 = phi ptr [ %749, %747 ], [ %737, %750 ]
  %757 = phi i32 [ %748, %747 ], [ %754, %750 ]
  %758 = zext i32 %757 to i64
  %759 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %758
  %760 = load i8, ptr %759, align 1, !tbaa !17
  %761 = icmp eq i8 %760, 17
  br i1 %761, label %762, label %982

762:                                              ; preds = %755, %736, %717, %698
  %763 = phi ptr [ %737, %736 ], [ %718, %717 ], [ %699, %698 ], [ %756, %755 ]
  %764 = load i64, ptr %763, align 8
  %765 = and i64 %764, 65535
  %766 = icmp eq i64 %765, 14
  br i1 %766, label %767, label %770

767:                                              ; preds = %762
  %768 = tail call i32 @vector_type_mode(ptr noundef nonnull %763) #24
  %769 = load ptr, ptr %646, align 8, !tbaa !17
  br label %775

770:                                              ; preds = %762
  %771 = getelementptr inbounds %struct.tree_type, ptr %763, i64 0, i32 6
  %772 = load i32, ptr %771, align 4
  %773 = lshr i32 %772, 16
  %774 = and i32 %773, 255
  br label %775

775:                                              ; preds = %770, %767
  %776 = phi ptr [ %769, %767 ], [ %763, %770 ]
  %777 = phi i32 [ %768, %767 ], [ %774, %770 ]
  %778 = zext i32 %777 to i64
  %779 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %778
  %780 = load i8, ptr %779, align 1, !tbaa !17
  %781 = icmp eq i8 %780, 8
  br i1 %781, label %801, label %782

782:                                              ; preds = %775
  %783 = load i64, ptr %776, align 8
  %784 = and i64 %783, 65535
  %785 = icmp eq i64 %784, 14
  br i1 %785, label %786, label %789

786:                                              ; preds = %782
  %787 = tail call i32 @vector_type_mode(ptr noundef nonnull %776) #24
  %788 = load ptr, ptr %646, align 8, !tbaa !17
  br label %794

789:                                              ; preds = %782
  %790 = getelementptr inbounds %struct.tree_type, ptr %776, i64 0, i32 6
  %791 = load i32, ptr %790, align 4
  %792 = lshr i32 %791, 16
  %793 = and i32 %792, 255
  br label %794

794:                                              ; preds = %789, %786
  %795 = phi ptr [ %788, %786 ], [ %776, %789 ]
  %796 = phi i32 [ %787, %786 ], [ %793, %789 ]
  %797 = zext i32 %796 to i64
  %798 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %797
  %799 = load i8, ptr %798, align 1, !tbaa !17
  %800 = icmp eq i8 %799, 9
  br i1 %800, label %801, label %813

801:                                              ; preds = %794, %775
  %802 = phi ptr [ %795, %794 ], [ %776, %775 ]
  %803 = load i64, ptr %802, align 8
  %804 = and i64 %803, 65535
  %805 = icmp eq i64 %804, 14
  br i1 %805, label %806, label %808

806:                                              ; preds = %801
  %807 = tail call i32 @vector_type_mode(ptr noundef nonnull %802) #24
  br label %830

808:                                              ; preds = %801
  %809 = getelementptr inbounds %struct.tree_type, ptr %802, i64 0, i32 6
  %810 = load i32, ptr %809, align 4
  %811 = lshr i32 %810, 16
  %812 = and i32 %811, 255
  br label %830

813:                                              ; preds = %794
  %814 = load i64, ptr %795, align 8
  %815 = and i64 %814, 65535
  %816 = icmp eq i64 %815, 14
  br i1 %816, label %817, label %819

817:                                              ; preds = %813
  %818 = tail call i32 @vector_type_mode(ptr noundef nonnull %795) #24
  br label %824

819:                                              ; preds = %813
  %820 = getelementptr inbounds %struct.tree_type, ptr %795, i64 0, i32 6
  %821 = load i32, ptr %820, align 4
  %822 = lshr i32 %821, 16
  %823 = and i32 %822, 255
  br label %824

824:                                              ; preds = %819, %817
  %825 = phi i32 [ %818, %817 ], [ %823, %819 ]
  %826 = zext i32 %825 to i64
  %827 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %826
  %828 = load i8, ptr %827, align 1, !tbaa !17
  %829 = zext i8 %828 to i32
  br label %830

830:                                              ; preds = %806, %808, %824
  %831 = phi i32 [ %829, %824 ], [ %807, %806 ], [ %812, %808 ]
  %832 = zext i32 %831 to i64
  %833 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %832
  %834 = load i8, ptr %833, align 1, !tbaa !17
  %835 = icmp eq i8 %834, 9
  %836 = load ptr, ptr %646, align 8, !tbaa !17
  %837 = load i64, ptr %836, align 8
  %838 = and i64 %837, 65535
  %839 = icmp eq i64 %838, 14
  br i1 %835, label %840, label %904

840:                                              ; preds = %830
  br i1 %839, label %841, label %844

841:                                              ; preds = %840
  %842 = tail call i32 @vector_type_mode(ptr noundef nonnull %836) #24
  %843 = load ptr, ptr %646, align 8, !tbaa !17
  br label %849

844:                                              ; preds = %840
  %845 = getelementptr inbounds %struct.tree_type, ptr %836, i64 0, i32 6
  %846 = load i32, ptr %845, align 4
  %847 = lshr i32 %846, 16
  %848 = and i32 %847, 255
  br label %849

849:                                              ; preds = %844, %841
  %850 = phi ptr [ %843, %841 ], [ %836, %844 ]
  %851 = phi i32 [ %842, %841 ], [ %848, %844 ]
  %852 = zext i32 %851 to i64
  %853 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %852
  %854 = load i8, ptr %853, align 1, !tbaa !17
  %855 = icmp eq i8 %854, 8
  br i1 %855, label %875, label %856

856:                                              ; preds = %849
  %857 = load i64, ptr %850, align 8
  %858 = and i64 %857, 65535
  %859 = icmp eq i64 %858, 14
  br i1 %859, label %860, label %863

860:                                              ; preds = %856
  %861 = tail call i32 @vector_type_mode(ptr noundef nonnull %850) #24
  %862 = load ptr, ptr %646, align 8, !tbaa !17
  br label %868

863:                                              ; preds = %856
  %864 = getelementptr inbounds %struct.tree_type, ptr %850, i64 0, i32 6
  %865 = load i32, ptr %864, align 4
  %866 = lshr i32 %865, 16
  %867 = and i32 %866, 255
  br label %868

868:                                              ; preds = %863, %860
  %869 = phi ptr [ %862, %860 ], [ %850, %863 ]
  %870 = phi i32 [ %861, %860 ], [ %867, %863 ]
  %871 = zext i32 %870 to i64
  %872 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %871
  %873 = load i8, ptr %872, align 1, !tbaa !17
  %874 = icmp eq i8 %873, 9
  br i1 %874, label %875, label %887

875:                                              ; preds = %868, %849
  %876 = phi ptr [ %869, %868 ], [ %850, %849 ]
  %877 = load i64, ptr %876, align 8
  %878 = and i64 %877, 65535
  %879 = icmp eq i64 %878, 14
  br i1 %879, label %880, label %882

880:                                              ; preds = %875
  %881 = tail call i32 @vector_type_mode(ptr noundef nonnull %876) #24
  br label %968

882:                                              ; preds = %875
  %883 = getelementptr inbounds %struct.tree_type, ptr %876, i64 0, i32 6
  %884 = load i32, ptr %883, align 4
  %885 = lshr i32 %884, 16
  %886 = and i32 %885, 255
  br label %968

887:                                              ; preds = %868
  %888 = load i64, ptr %869, align 8
  %889 = and i64 %888, 65535
  %890 = icmp eq i64 %889, 14
  br i1 %890, label %891, label %893

891:                                              ; preds = %887
  %892 = tail call i32 @vector_type_mode(ptr noundef nonnull %869) #24
  br label %898

893:                                              ; preds = %887
  %894 = getelementptr inbounds %struct.tree_type, ptr %869, i64 0, i32 6
  %895 = load i32, ptr %894, align 4
  %896 = lshr i32 %895, 16
  %897 = and i32 %896, 255
  br label %898

898:                                              ; preds = %893, %891
  %899 = phi i32 [ %892, %891 ], [ %897, %893 ]
  %900 = zext i32 %899 to i64
  %901 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %900
  %902 = load i8, ptr %901, align 1, !tbaa !17
  %903 = zext i8 %902 to i32
  br label %968

904:                                              ; preds = %830
  br i1 %839, label %905, label %908

905:                                              ; preds = %904
  %906 = tail call i32 @vector_type_mode(ptr noundef nonnull %836) #24
  %907 = load ptr, ptr %646, align 8, !tbaa !17
  br label %913

908:                                              ; preds = %904
  %909 = getelementptr inbounds %struct.tree_type, ptr %836, i64 0, i32 6
  %910 = load i32, ptr %909, align 4
  %911 = lshr i32 %910, 16
  %912 = and i32 %911, 255
  br label %913

913:                                              ; preds = %908, %905
  %914 = phi ptr [ %907, %905 ], [ %836, %908 ]
  %915 = phi i32 [ %906, %905 ], [ %912, %908 ]
  %916 = zext i32 %915 to i64
  %917 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %916
  %918 = load i8, ptr %917, align 1, !tbaa !17
  %919 = icmp eq i8 %918, 8
  br i1 %919, label %939, label %920

920:                                              ; preds = %913
  %921 = load i64, ptr %914, align 8
  %922 = and i64 %921, 65535
  %923 = icmp eq i64 %922, 14
  br i1 %923, label %924, label %927

924:                                              ; preds = %920
  %925 = tail call i32 @vector_type_mode(ptr noundef nonnull %914) #24
  %926 = load ptr, ptr %646, align 8, !tbaa !17
  br label %932

927:                                              ; preds = %920
  %928 = getelementptr inbounds %struct.tree_type, ptr %914, i64 0, i32 6
  %929 = load i32, ptr %928, align 4
  %930 = lshr i32 %929, 16
  %931 = and i32 %930, 255
  br label %932

932:                                              ; preds = %927, %924
  %933 = phi ptr [ %926, %924 ], [ %914, %927 ]
  %934 = phi i32 [ %925, %924 ], [ %931, %927 ]
  %935 = zext i32 %934 to i64
  %936 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %935
  %937 = load i8, ptr %936, align 1, !tbaa !17
  %938 = icmp eq i8 %937, 9
  br i1 %938, label %939, label %951

939:                                              ; preds = %932, %913
  %940 = phi ptr [ %933, %932 ], [ %914, %913 ]
  %941 = load i64, ptr %940, align 8
  %942 = and i64 %941, 65535
  %943 = icmp eq i64 %942, 14
  br i1 %943, label %944, label %946

944:                                              ; preds = %939
  %945 = tail call i32 @vector_type_mode(ptr noundef nonnull %940) #24
  br label %968

946:                                              ; preds = %939
  %947 = getelementptr inbounds %struct.tree_type, ptr %940, i64 0, i32 6
  %948 = load i32, ptr %947, align 4
  %949 = lshr i32 %948, 16
  %950 = and i32 %949, 255
  br label %968

951:                                              ; preds = %932
  %952 = load i64, ptr %933, align 8
  %953 = and i64 %952, 65535
  %954 = icmp eq i64 %953, 14
  br i1 %954, label %955, label %957

955:                                              ; preds = %951
  %956 = tail call i32 @vector_type_mode(ptr noundef nonnull %933) #24
  br label %962

957:                                              ; preds = %951
  %958 = getelementptr inbounds %struct.tree_type, ptr %933, i64 0, i32 6
  %959 = load i32, ptr %958, align 4
  %960 = lshr i32 %959, 16
  %961 = and i32 %960, 255
  br label %962

962:                                              ; preds = %957, %955
  %963 = phi i32 [ %956, %955 ], [ %961, %957 ]
  %964 = zext i32 %963 to i64
  %965 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %964
  %966 = load i8, ptr %965, align 1, !tbaa !17
  %967 = zext i8 %966 to i32
  br label %968

968:                                              ; preds = %962, %946, %944, %898, %882, %880
  %969 = phi i32 [ %903, %898 ], [ %881, %880 ], [ %886, %882 ], [ %967, %962 ], [ %945, %944 ], [ %950, %946 ]
  %970 = add i32 %969, -38
  %971 = zext i32 %970 to i64
  %972 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %971
  %973 = load ptr, ptr %972, align 8, !tbaa !6
  %974 = getelementptr inbounds %struct.real_format, ptr %973, i64 0, i32 11
  %975 = load i8, ptr %974, align 2, !tbaa !36
  %976 = icmp eq i8 %975, 0
  %977 = load i32, ptr @flag_finite_math_only, align 4
  %978 = icmp ne i32 %977, 0
  %979 = select i1 %976, i1 true, i1 %978
  br i1 %979, label %980, label %1348

980:                                              ; preds = %968
  %981 = load ptr, ptr %646, align 8, !tbaa !17
  br label %982

982:                                              ; preds = %980, %755, %682
  %983 = phi ptr [ %981, %980 ], [ %756, %755 ], [ %685, %682 ]
  %984 = load i64, ptr %983, align 8
  %985 = and i64 %984, 65535
  %986 = icmp eq i64 %985, 14
  br i1 %986, label %987, label %990

987:                                              ; preds = %982
  %988 = tail call i32 @vector_type_mode(ptr noundef nonnull %983) #24
  %989 = load ptr, ptr %646, align 8, !tbaa !17
  br label %995

990:                                              ; preds = %982
  %991 = getelementptr inbounds %struct.tree_type, ptr %983, i64 0, i32 6
  %992 = load i32, ptr %991, align 4
  %993 = lshr i32 %992, 16
  %994 = and i32 %993, 255
  br label %995

995:                                              ; preds = %990, %987
  %996 = phi ptr [ %989, %987 ], [ %983, %990 ]
  %997 = phi i32 [ %988, %987 ], [ %994, %990 ]
  %998 = zext i32 %997 to i64
  %999 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %998
  %1000 = load i8, ptr %999, align 1, !tbaa !17
  %1001 = icmp eq i8 %1000, 8
  br i1 %1001, label %1059, label %1002

1002:                                             ; preds = %995
  %1003 = load i64, ptr %996, align 8
  %1004 = and i64 %1003, 65535
  %1005 = icmp eq i64 %1004, 14
  br i1 %1005, label %1006, label %1009

1006:                                             ; preds = %1002
  %1007 = tail call i32 @vector_type_mode(ptr noundef nonnull %996) #24
  %1008 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1014

1009:                                             ; preds = %1002
  %1010 = getelementptr inbounds %struct.tree_type, ptr %996, i64 0, i32 6
  %1011 = load i32, ptr %1010, align 4
  %1012 = lshr i32 %1011, 16
  %1013 = and i32 %1012, 255
  br label %1014

1014:                                             ; preds = %1009, %1006
  %1015 = phi ptr [ %1008, %1006 ], [ %996, %1009 ]
  %1016 = phi i32 [ %1007, %1006 ], [ %1013, %1009 ]
  %1017 = zext i32 %1016 to i64
  %1018 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1017
  %1019 = load i8, ptr %1018, align 1, !tbaa !17
  %1020 = icmp eq i8 %1019, 9
  br i1 %1020, label %1059, label %1021

1021:                                             ; preds = %1014
  %1022 = load i64, ptr %1015, align 8
  %1023 = and i64 %1022, 65535
  %1024 = icmp eq i64 %1023, 14
  br i1 %1024, label %1025, label %1028

1025:                                             ; preds = %1021
  %1026 = tail call i32 @vector_type_mode(ptr noundef nonnull %1015) #24
  %1027 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1033

1028:                                             ; preds = %1021
  %1029 = getelementptr inbounds %struct.tree_type, ptr %1015, i64 0, i32 6
  %1030 = load i32, ptr %1029, align 4
  %1031 = lshr i32 %1030, 16
  %1032 = and i32 %1031, 255
  br label %1033

1033:                                             ; preds = %1028, %1025
  %1034 = phi ptr [ %1027, %1025 ], [ %1015, %1028 ]
  %1035 = phi i32 [ %1026, %1025 ], [ %1032, %1028 ]
  %1036 = zext i32 %1035 to i64
  %1037 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1036
  %1038 = load i8, ptr %1037, align 1, !tbaa !17
  %1039 = icmp eq i8 %1038, 11
  br i1 %1039, label %1059, label %1040

1040:                                             ; preds = %1033
  %1041 = load i64, ptr %1034, align 8
  %1042 = and i64 %1041, 65535
  %1043 = icmp eq i64 %1042, 14
  br i1 %1043, label %1044, label %1047

1044:                                             ; preds = %1040
  %1045 = tail call i32 @vector_type_mode(ptr noundef nonnull %1034) #24
  %1046 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1052

1047:                                             ; preds = %1040
  %1048 = getelementptr inbounds %struct.tree_type, ptr %1034, i64 0, i32 6
  %1049 = load i32, ptr %1048, align 4
  %1050 = lshr i32 %1049, 16
  %1051 = and i32 %1050, 255
  br label %1052

1052:                                             ; preds = %1047, %1044
  %1053 = phi ptr [ %1046, %1044 ], [ %1034, %1047 ]
  %1054 = phi i32 [ %1045, %1044 ], [ %1051, %1047 ]
  %1055 = zext i32 %1054 to i64
  %1056 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1055
  %1057 = load i8, ptr %1056, align 1, !tbaa !17
  %1058 = icmp eq i8 %1057, 17
  br i1 %1058, label %1059, label %1279

1059:                                             ; preds = %1052, %1033, %1014, %995
  %1060 = phi ptr [ %1034, %1033 ], [ %1015, %1014 ], [ %996, %995 ], [ %1053, %1052 ]
  %1061 = load i64, ptr %1060, align 8
  %1062 = and i64 %1061, 65535
  %1063 = icmp eq i64 %1062, 14
  br i1 %1063, label %1064, label %1067

1064:                                             ; preds = %1059
  %1065 = tail call i32 @vector_type_mode(ptr noundef nonnull %1060) #24
  %1066 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1072

1067:                                             ; preds = %1059
  %1068 = getelementptr inbounds %struct.tree_type, ptr %1060, i64 0, i32 6
  %1069 = load i32, ptr %1068, align 4
  %1070 = lshr i32 %1069, 16
  %1071 = and i32 %1070, 255
  br label %1072

1072:                                             ; preds = %1067, %1064
  %1073 = phi ptr [ %1066, %1064 ], [ %1060, %1067 ]
  %1074 = phi i32 [ %1065, %1064 ], [ %1071, %1067 ]
  %1075 = zext i32 %1074 to i64
  %1076 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1075
  %1077 = load i8, ptr %1076, align 1, !tbaa !17
  %1078 = icmp eq i8 %1077, 8
  br i1 %1078, label %1098, label %1079

1079:                                             ; preds = %1072
  %1080 = load i64, ptr %1073, align 8
  %1081 = and i64 %1080, 65535
  %1082 = icmp eq i64 %1081, 14
  br i1 %1082, label %1083, label %1086

1083:                                             ; preds = %1079
  %1084 = tail call i32 @vector_type_mode(ptr noundef nonnull %1073) #24
  %1085 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1091

1086:                                             ; preds = %1079
  %1087 = getelementptr inbounds %struct.tree_type, ptr %1073, i64 0, i32 6
  %1088 = load i32, ptr %1087, align 4
  %1089 = lshr i32 %1088, 16
  %1090 = and i32 %1089, 255
  br label %1091

1091:                                             ; preds = %1086, %1083
  %1092 = phi ptr [ %1085, %1083 ], [ %1073, %1086 ]
  %1093 = phi i32 [ %1084, %1083 ], [ %1090, %1086 ]
  %1094 = zext i32 %1093 to i64
  %1095 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1094
  %1096 = load i8, ptr %1095, align 1, !tbaa !17
  %1097 = icmp eq i8 %1096, 9
  br i1 %1097, label %1098, label %1110

1098:                                             ; preds = %1091, %1072
  %1099 = phi ptr [ %1092, %1091 ], [ %1073, %1072 ]
  %1100 = load i64, ptr %1099, align 8
  %1101 = and i64 %1100, 65535
  %1102 = icmp eq i64 %1101, 14
  br i1 %1102, label %1103, label %1105

1103:                                             ; preds = %1098
  %1104 = tail call i32 @vector_type_mode(ptr noundef nonnull %1099) #24
  br label %1127

1105:                                             ; preds = %1098
  %1106 = getelementptr inbounds %struct.tree_type, ptr %1099, i64 0, i32 6
  %1107 = load i32, ptr %1106, align 4
  %1108 = lshr i32 %1107, 16
  %1109 = and i32 %1108, 255
  br label %1127

1110:                                             ; preds = %1091
  %1111 = load i64, ptr %1092, align 8
  %1112 = and i64 %1111, 65535
  %1113 = icmp eq i64 %1112, 14
  br i1 %1113, label %1114, label %1116

1114:                                             ; preds = %1110
  %1115 = tail call i32 @vector_type_mode(ptr noundef nonnull %1092) #24
  br label %1121

1116:                                             ; preds = %1110
  %1117 = getelementptr inbounds %struct.tree_type, ptr %1092, i64 0, i32 6
  %1118 = load i32, ptr %1117, align 4
  %1119 = lshr i32 %1118, 16
  %1120 = and i32 %1119, 255
  br label %1121

1121:                                             ; preds = %1116, %1114
  %1122 = phi i32 [ %1115, %1114 ], [ %1120, %1116 ]
  %1123 = zext i32 %1122 to i64
  %1124 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1123
  %1125 = load i8, ptr %1124, align 1, !tbaa !17
  %1126 = zext i8 %1125 to i32
  br label %1127

1127:                                             ; preds = %1103, %1105, %1121
  %1128 = phi i32 [ %1126, %1121 ], [ %1104, %1103 ], [ %1109, %1105 ]
  %1129 = zext i32 %1128 to i64
  %1130 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1129
  %1131 = load i8, ptr %1130, align 1, !tbaa !17
  %1132 = icmp eq i8 %1131, 9
  %1133 = load ptr, ptr %646, align 8, !tbaa !17
  %1134 = load i64, ptr %1133, align 8
  %1135 = and i64 %1134, 65535
  %1136 = icmp eq i64 %1135, 14
  br i1 %1132, label %1137, label %1201

1137:                                             ; preds = %1127
  br i1 %1136, label %1138, label %1141

1138:                                             ; preds = %1137
  %1139 = tail call i32 @vector_type_mode(ptr noundef nonnull %1133) #24
  %1140 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1146

1141:                                             ; preds = %1137
  %1142 = getelementptr inbounds %struct.tree_type, ptr %1133, i64 0, i32 6
  %1143 = load i32, ptr %1142, align 4
  %1144 = lshr i32 %1143, 16
  %1145 = and i32 %1144, 255
  br label %1146

1146:                                             ; preds = %1141, %1138
  %1147 = phi ptr [ %1140, %1138 ], [ %1133, %1141 ]
  %1148 = phi i32 [ %1139, %1138 ], [ %1145, %1141 ]
  %1149 = zext i32 %1148 to i64
  %1150 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1149
  %1151 = load i8, ptr %1150, align 1, !tbaa !17
  %1152 = icmp eq i8 %1151, 8
  br i1 %1152, label %1172, label %1153

1153:                                             ; preds = %1146
  %1154 = load i64, ptr %1147, align 8
  %1155 = and i64 %1154, 65535
  %1156 = icmp eq i64 %1155, 14
  br i1 %1156, label %1157, label %1160

1157:                                             ; preds = %1153
  %1158 = tail call i32 @vector_type_mode(ptr noundef nonnull %1147) #24
  %1159 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1165

1160:                                             ; preds = %1153
  %1161 = getelementptr inbounds %struct.tree_type, ptr %1147, i64 0, i32 6
  %1162 = load i32, ptr %1161, align 4
  %1163 = lshr i32 %1162, 16
  %1164 = and i32 %1163, 255
  br label %1165

1165:                                             ; preds = %1160, %1157
  %1166 = phi ptr [ %1159, %1157 ], [ %1147, %1160 ]
  %1167 = phi i32 [ %1158, %1157 ], [ %1164, %1160 ]
  %1168 = zext i32 %1167 to i64
  %1169 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1168
  %1170 = load i8, ptr %1169, align 1, !tbaa !17
  %1171 = icmp eq i8 %1170, 9
  br i1 %1171, label %1172, label %1184

1172:                                             ; preds = %1165, %1146
  %1173 = phi ptr [ %1166, %1165 ], [ %1147, %1146 ]
  %1174 = load i64, ptr %1173, align 8
  %1175 = and i64 %1174, 65535
  %1176 = icmp eq i64 %1175, 14
  br i1 %1176, label %1177, label %1179

1177:                                             ; preds = %1172
  %1178 = tail call i32 @vector_type_mode(ptr noundef nonnull %1173) #24
  br label %1265

1179:                                             ; preds = %1172
  %1180 = getelementptr inbounds %struct.tree_type, ptr %1173, i64 0, i32 6
  %1181 = load i32, ptr %1180, align 4
  %1182 = lshr i32 %1181, 16
  %1183 = and i32 %1182, 255
  br label %1265

1184:                                             ; preds = %1165
  %1185 = load i64, ptr %1166, align 8
  %1186 = and i64 %1185, 65535
  %1187 = icmp eq i64 %1186, 14
  br i1 %1187, label %1188, label %1190

1188:                                             ; preds = %1184
  %1189 = tail call i32 @vector_type_mode(ptr noundef nonnull %1166) #24
  br label %1195

1190:                                             ; preds = %1184
  %1191 = getelementptr inbounds %struct.tree_type, ptr %1166, i64 0, i32 6
  %1192 = load i32, ptr %1191, align 4
  %1193 = lshr i32 %1192, 16
  %1194 = and i32 %1193, 255
  br label %1195

1195:                                             ; preds = %1190, %1188
  %1196 = phi i32 [ %1189, %1188 ], [ %1194, %1190 ]
  %1197 = zext i32 %1196 to i64
  %1198 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1197
  %1199 = load i8, ptr %1198, align 1, !tbaa !17
  %1200 = zext i8 %1199 to i32
  br label %1265

1201:                                             ; preds = %1127
  br i1 %1136, label %1202, label %1205

1202:                                             ; preds = %1201
  %1203 = tail call i32 @vector_type_mode(ptr noundef nonnull %1133) #24
  %1204 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1210

1205:                                             ; preds = %1201
  %1206 = getelementptr inbounds %struct.tree_type, ptr %1133, i64 0, i32 6
  %1207 = load i32, ptr %1206, align 4
  %1208 = lshr i32 %1207, 16
  %1209 = and i32 %1208, 255
  br label %1210

1210:                                             ; preds = %1205, %1202
  %1211 = phi ptr [ %1204, %1202 ], [ %1133, %1205 ]
  %1212 = phi i32 [ %1203, %1202 ], [ %1209, %1205 ]
  %1213 = zext i32 %1212 to i64
  %1214 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1213
  %1215 = load i8, ptr %1214, align 1, !tbaa !17
  %1216 = icmp eq i8 %1215, 8
  br i1 %1216, label %1236, label %1217

1217:                                             ; preds = %1210
  %1218 = load i64, ptr %1211, align 8
  %1219 = and i64 %1218, 65535
  %1220 = icmp eq i64 %1219, 14
  br i1 %1220, label %1221, label %1224

1221:                                             ; preds = %1217
  %1222 = tail call i32 @vector_type_mode(ptr noundef nonnull %1211) #24
  %1223 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1229

1224:                                             ; preds = %1217
  %1225 = getelementptr inbounds %struct.tree_type, ptr %1211, i64 0, i32 6
  %1226 = load i32, ptr %1225, align 4
  %1227 = lshr i32 %1226, 16
  %1228 = and i32 %1227, 255
  br label %1229

1229:                                             ; preds = %1224, %1221
  %1230 = phi ptr [ %1223, %1221 ], [ %1211, %1224 ]
  %1231 = phi i32 [ %1222, %1221 ], [ %1228, %1224 ]
  %1232 = zext i32 %1231 to i64
  %1233 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1232
  %1234 = load i8, ptr %1233, align 1, !tbaa !17
  %1235 = icmp eq i8 %1234, 9
  br i1 %1235, label %1236, label %1248

1236:                                             ; preds = %1229, %1210
  %1237 = phi ptr [ %1230, %1229 ], [ %1211, %1210 ]
  %1238 = load i64, ptr %1237, align 8
  %1239 = and i64 %1238, 65535
  %1240 = icmp eq i64 %1239, 14
  br i1 %1240, label %1241, label %1243

1241:                                             ; preds = %1236
  %1242 = tail call i32 @vector_type_mode(ptr noundef nonnull %1237) #24
  br label %1265

1243:                                             ; preds = %1236
  %1244 = getelementptr inbounds %struct.tree_type, ptr %1237, i64 0, i32 6
  %1245 = load i32, ptr %1244, align 4
  %1246 = lshr i32 %1245, 16
  %1247 = and i32 %1246, 255
  br label %1265

1248:                                             ; preds = %1229
  %1249 = load i64, ptr %1230, align 8
  %1250 = and i64 %1249, 65535
  %1251 = icmp eq i64 %1250, 14
  br i1 %1251, label %1252, label %1254

1252:                                             ; preds = %1248
  %1253 = tail call i32 @vector_type_mode(ptr noundef nonnull %1230) #24
  br label %1259

1254:                                             ; preds = %1248
  %1255 = getelementptr inbounds %struct.tree_type, ptr %1230, i64 0, i32 6
  %1256 = load i32, ptr %1255, align 4
  %1257 = lshr i32 %1256, 16
  %1258 = and i32 %1257, 255
  br label %1259

1259:                                             ; preds = %1254, %1252
  %1260 = phi i32 [ %1253, %1252 ], [ %1258, %1254 ]
  %1261 = zext i32 %1260 to i64
  %1262 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1261
  %1263 = load i8, ptr %1262, align 1, !tbaa !17
  %1264 = zext i8 %1263 to i32
  br label %1265

1265:                                             ; preds = %1259, %1243, %1241, %1195, %1179, %1177
  %1266 = phi i32 [ %1200, %1195 ], [ %1178, %1177 ], [ %1183, %1179 ], [ %1264, %1259 ], [ %1242, %1241 ], [ %1247, %1243 ]
  %1267 = add i32 %1266, -38
  %1268 = zext i32 %1267 to i64
  %1269 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1268
  %1270 = load ptr, ptr %1269, align 8, !tbaa !6
  %1271 = getelementptr inbounds %struct.real_format, ptr %1270, i64 0, i32 14
  %1272 = load i8, ptr %1271, align 1, !tbaa !37
  %1273 = icmp ne i8 %1272, 0
  %1274 = load i32, ptr @flag_signed_zeros, align 4
  %1275 = icmp ne i32 %1274, 0
  %1276 = select i1 %1273, i1 %1275, i1 false
  br i1 %1276, label %1348, label %1277

1277:                                             ; preds = %1265
  %1278 = load ptr, ptr %646, align 8, !tbaa !17
  br label %1279

1279:                                             ; preds = %1277, %1052
  %1280 = phi ptr [ %1278, %1277 ], [ %1053, %1052 ]
  %1281 = load i64, ptr %1280, align 8
  %1282 = and i64 %1281, 65535
  %1283 = icmp eq i64 %1282, 13
  br i1 %1283, label %1284, label %1348

1284:                                             ; preds = %1279
  %1285 = getelementptr inbounds %struct.tree_common, ptr %1280, i64 0, i32 2
  %1286 = load ptr, ptr %1285, align 8, !tbaa !17
  %1287 = load i64, ptr %1286, align 8
  %1288 = and i64 %1287, 65535
  %1289 = icmp eq i64 %1288, 9
  br i1 %1289, label %1290, label %1348

1290:                                             ; preds = %1284
  %1291 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef nonnull %1286, ptr noundef nonnull %46)
  %1292 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 44, ptr noundef nonnull %1286, ptr noundef nonnull %46)
  %1293 = icmp eq ptr %1291, null
  br i1 %1293, label %1298, label %1294

1294:                                             ; preds = %1290
  %1295 = tail call i32 @real_zerop(ptr noundef nonnull %1291) #24
  %1296 = and i32 %1295, 255
  %1297 = icmp eq i32 %1296, 0
  br i1 %1297, label %1298, label %1307

1298:                                             ; preds = %1294, %1290
  %1299 = phi i32 [ %1295, %1294 ], [ 0, %1290 ]
  %1300 = icmp eq ptr %1292, null
  br i1 %1300, label %1348, label %1301

1301:                                             ; preds = %1298
  %1302 = tail call i32 @real_zerop(ptr noundef nonnull %1292) #24
  %1303 = and i32 %1302, 255
  %1304 = icmp eq i32 %1303, 0
  br i1 %1304, label %1348, label %1305

1305:                                             ; preds = %1301
  %1306 = and i32 %1299, 255
  br label %1307

1307:                                             ; preds = %1305, %1294
  %1308 = phi i32 [ %1306, %1305 ], [ %1296, %1294 ]
  %1309 = phi i32 [ %1302, %1305 ], [ 0, %1294 ]
  %1310 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef nonnull %1286, ptr noundef nonnull %45)
  %1311 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 44, ptr noundef nonnull %1286, ptr noundef nonnull %45)
  %1312 = icmp ne i32 %1308, 0
  %1313 = icmp ne ptr %1311, null
  %1314 = select i1 %1312, i1 %1313, i1 false
  br i1 %1314, label %1315, label %1330

1315:                                             ; preds = %1307
  %1316 = tail call i32 @real_zerop(ptr noundef nonnull %1311) #24
  %1317 = icmp eq i32 %1316, 0
  br i1 %1317, label %1330, label %1318

1318:                                             ; preds = %1315
  %1319 = icmp eq ptr %1310, null
  br i1 %1319, label %1320, label %1322

1320:                                             ; preds = %1318
  %1321 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef nonnull %1286, ptr noundef nonnull %45) #24
  br label %1322

1322:                                             ; preds = %1318, %1320
  %1323 = phi ptr [ %1321, %1320 ], [ %1310, %1318 ]
  %1324 = icmp eq ptr %1292, null
  br i1 %1324, label %1325, label %1327

1325:                                             ; preds = %1322
  %1326 = tail call ptr @build1_stat(i32 noundef 44, ptr noundef nonnull %1286, ptr noundef nonnull %46) #24
  br label %1327

1327:                                             ; preds = %1322, %1325
  %1328 = phi ptr [ %1326, %1325 ], [ %1292, %1322 ]
  %1329 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %1323, ptr noundef %1328)
  br label %14075

1330:                                             ; preds = %1315, %1307
  %1331 = and i32 %1309, 255
  %1332 = icmp ne i32 %1331, 0
  %1333 = icmp ne ptr %1310, null
  %1334 = select i1 %1332, i1 %1333, i1 false
  br i1 %1334, label %1335, label %1348

1335:                                             ; preds = %1330
  %1336 = tail call i32 @real_zerop(ptr noundef nonnull %1310) #24
  %1337 = icmp eq i32 %1336, 0
  br i1 %1337, label %1348, label %1338

1338:                                             ; preds = %1335
  br i1 %1293, label %1339, label %1341

1339:                                             ; preds = %1338
  %1340 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef nonnull %1286, ptr noundef nonnull %46) #24
  br label %1341

1341:                                             ; preds = %1338, %1339
  %1342 = phi ptr [ %1340, %1339 ], [ %1291, %1338 ]
  br i1 %1313, label %1345, label %1343

1343:                                             ; preds = %1341
  %1344 = tail call ptr @build1_stat(i32 noundef 44, ptr noundef nonnull %1286, ptr noundef nonnull %45) #24
  br label %1345

1345:                                             ; preds = %1341, %1343
  %1346 = phi ptr [ %1344, %1343 ], [ %1311, %1341 ]
  %1347 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %1342, ptr noundef %1346)
  br label %14075

1348:                                             ; preds = %1335, %1330, %1298, %1301, %1265, %968, %1284, %1279
  %1349 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %1350 = icmp eq i32 %1349, 0
  br i1 %1350, label %1360, label %1351

1351:                                             ; preds = %1348
  %1352 = load i64, ptr %46, align 8
  %1353 = trunc i64 %1352 to i16
  switch i16 %1353, label %1360 [
    i16 75, label %1354
    i16 65, label %1354
  ]

1354:                                             ; preds = %1351, %1351
  %1355 = load i64, ptr %45, align 8
  %1356 = trunc i64 %1355 to i16
  switch i16 %1356, label %1360 [
    i16 75, label %1357
    i16 65, label %1357
  ]

1357:                                             ; preds = %1354, %1354
  %1358 = tail call fastcc ptr @distribute_real_division(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %1359 = icmp eq ptr %1358, null
  br i1 %1359, label %1360, label %14075

1360:                                             ; preds = %1354, %1351, %1357, %1348
  %1361 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %1362 = icmp eq i32 %1361, 0
  br i1 %1362, label %1370, label %1363

1363:                                             ; preds = %1360
  %1364 = load i64, ptr %2, align 8
  %1365 = and i64 %1364, 65535
  %1366 = icmp eq i64 %1365, 9
  br i1 %1366, label %1367, label %1370

1367:                                             ; preds = %1363
  %1368 = tail call ptr @build_real(ptr noundef nonnull %2, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst2) #24
  %1369 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %1368)
  br label %14075

1370:                                             ; preds = %1363, %1360
  %1371 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %1372 = icmp eq i32 %1371, 0
  br i1 %1372, label %1415, label %1373

1373:                                             ; preds = %1370
  %1374 = load i64, ptr %45, align 8
  %1375 = and i64 %1374, 65535
  %1376 = icmp eq i64 %1375, 63
  %1377 = load i64, ptr %46, align 8
  %1378 = and i64 %1377, 65535
  br i1 %1376, label %1379, label %1396

1379:                                             ; preds = %1373
  %1380 = icmp eq i64 %1378, 65
  br i1 %1380, label %1415, label %1381

1381:                                             ; preds = %1379
  %1382 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1383 = load ptr, ptr %1382, align 8, !tbaa !17
  %1384 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1385 = load ptr, ptr %1384, align 8, !tbaa !17
  %1386 = load i64, ptr %1385, align 8
  %1387 = and i64 %1386, 65535
  %1388 = icmp eq i64 %1387, 65
  br i1 %1388, label %1389, label %1396

1389:                                             ; preds = %1381
  %1390 = load i64, ptr %1383, align 8
  %1391 = and i64 %1390, 65535
  %1392 = icmp eq i64 %1391, 65
  br i1 %1392, label %1393, label %1396

1393:                                             ; preds = %1389
  %1394 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef nonnull %1383)
  %1395 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %1394, ptr noundef nonnull %1385)
  br label %14075

1396:                                             ; preds = %1373, %1389, %1381
  %1397 = icmp ne i64 %1378, 63
  %1398 = icmp eq i64 %1375, 65
  %1399 = or i1 %1398, %1397
  br i1 %1399, label %1415, label %1400

1400:                                             ; preds = %1396
  %1401 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1402 = load ptr, ptr %1401, align 8, !tbaa !17
  %1403 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %1404 = load ptr, ptr %1403, align 8, !tbaa !17
  %1405 = load i64, ptr %1404, align 8
  %1406 = and i64 %1405, 65535
  %1407 = icmp eq i64 %1406, 65
  br i1 %1407, label %1408, label %1415

1408:                                             ; preds = %1400
  %1409 = load i64, ptr %1402, align 8
  %1410 = and i64 %1409, 65535
  %1411 = icmp eq i64 %1410, 65
  br i1 %1411, label %1412, label %1415

1412:                                             ; preds = %1408
  %1413 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef nonnull %1404, ptr noundef nonnull %45)
  %1414 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef nonnull %1402, ptr noundef %1413)
  br label %14075

1415:                                             ; preds = %1379, %1400, %1408, %1370, %631, %638, %600, %6736, %6740, %6758, %6472, %6476, %1396
  %1416 = phi i32 [ 87, %6476 ], [ 87, %6472 ], [ 88, %6758 ], [ 88, %6740 ], [ 88, %6736 ], [ 63, %1396 ], [ 63, %600 ], [ 63, %638 ], [ 63, %631 ], [ 63, %1370 ], [ 63, %1408 ], [ 63, %1400 ], [ 63, %1379 ]
  %1417 = load i64, ptr %46, align 8
  %1418 = trunc i64 %1417 to i32
  %1419 = and i32 %1418, 65535
  %1420 = load i64, ptr %45, align 8
  %1421 = trunc i64 %1420 to i32
  %1422 = and i32 %1421, 65535
  %1423 = icmp eq i32 %1419, 84
  %1424 = icmp eq i32 %1422, 83
  %1425 = select i1 %1423, i1 %1424, i1 false
  br i1 %1425, label %1430, label %1426

1426:                                             ; preds = %1415
  %1427 = icmp eq i32 %1422, 84
  %1428 = icmp eq i32 %1419, 83
  %1429 = and i1 %1428, %1427
  br i1 %1429, label %1430, label %1572

1430:                                             ; preds = %1426, %1415
  %1431 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1432 = load ptr, ptr %1431, align 8, !tbaa !17
  %1433 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1434 = load ptr, ptr %1433, align 8, !tbaa !17
  %1435 = tail call i32 @operand_equal_p(ptr noundef %1432, ptr noundef %1434, i32 noundef 0)
  %1436 = icmp eq i32 %1435, 0
  br i1 %1436, label %1572, label %1437

1437:                                             ; preds = %1430
  %1438 = load ptr, ptr %1431, align 8, !tbaa !17
  %1439 = getelementptr inbounds %struct.tree_common, ptr %1438, i64 0, i32 2
  %1440 = load ptr, ptr %1439, align 8, !tbaa !17
  %1441 = load i64, ptr %1440, align 8
  %1442 = and i64 %1441, 2097152
  %1443 = icmp eq i64 %1442, 0
  br i1 %1443, label %1572, label %1444

1444:                                             ; preds = %1437
  %1445 = getelementptr inbounds %struct.tree_type, ptr %1440, i64 0, i32 6
  %1446 = load i32, ptr %1445, align 4
  %1447 = and i32 %1446, 1023
  %1448 = and i64 %1441, 65535
  %1449 = icmp eq i64 %1448, 14
  br i1 %1449, label %1450, label %1452

1450:                                             ; preds = %1444
  %1451 = tail call i32 @vector_type_mode(ptr noundef nonnull %1440) #24
  br label %1455

1452:                                             ; preds = %1444
  %1453 = lshr i32 %1446, 16
  %1454 = and i32 %1453, 255
  br label %1455

1455:                                             ; preds = %1452, %1450
  %1456 = phi i32 [ %1451, %1450 ], [ %1454, %1452 ]
  %1457 = zext i32 %1456 to i64
  %1458 = getelementptr inbounds [87 x i16], ptr @mode_precision, i64 0, i64 %1457
  %1459 = load i16, ptr %1458, align 2, !tbaa !65
  %1460 = zext i16 %1459 to i32
  %1461 = icmp eq i32 %1447, %1460
  br i1 %1461, label %1462, label %1572

1462:                                             ; preds = %1455
  %1463 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %1464 = load ptr, ptr %1463, align 8, !tbaa !17
  %1465 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1466 = load ptr, ptr %1465, align 8, !tbaa !17
  %1467 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1464) #24
  %1468 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1466) #24
  %1469 = load i64, ptr %1467, align 8
  %1470 = trunc i64 %1469 to i32
  %1471 = and i32 %1470, 65535
  %1472 = load i64, ptr %1468, align 8
  %1473 = trunc i64 %1472 to i32
  %1474 = and i32 %1473, 65535
  %1475 = icmp eq i32 %1471, 23
  %1476 = icmp eq i32 %1474, 23
  %1477 = select i1 %1475, i1 %1476, i1 false
  br i1 %1477, label %1478, label %1506

1478:                                             ; preds = %1462
  %1479 = getelementptr inbounds %struct.tree_int_cst, ptr %1467, i64 0, i32 1
  %1480 = getelementptr inbounds %struct.tree_int_cst, ptr %1467, i64 0, i32 1, i32 1
  %1481 = load i64, ptr %1480, align 8, !tbaa !17
  %1482 = icmp eq i64 %1481, 0
  br i1 %1482, label %1483, label %1572

1483:                                             ; preds = %1478
  %1484 = getelementptr inbounds %struct.tree_int_cst, ptr %1468, i64 0, i32 1, i32 1
  %1485 = load i64, ptr %1484, align 8, !tbaa !17
  %1486 = icmp eq i64 %1485, 0
  br i1 %1486, label %1487, label %1572

1487:                                             ; preds = %1483
  %1488 = getelementptr inbounds %struct.tree_int_cst, ptr %1468, i64 0, i32 1
  %1489 = load i64, ptr %1479, align 8, !tbaa !17
  %1490 = load i64, ptr %1488, align 8, !tbaa !17
  %1491 = add i64 %1490, %1489
  %1492 = load ptr, ptr %1431, align 8, !tbaa !17
  %1493 = getelementptr inbounds %struct.tree_common, ptr %1492, i64 0, i32 2
  %1494 = load ptr, ptr %1493, align 8, !tbaa !17
  %1495 = getelementptr inbounds %struct.tree_type, ptr %1494, i64 0, i32 6
  %1496 = load i32, ptr %1495, align 4
  %1497 = and i32 %1496, 1023
  %1498 = zext i32 %1497 to i64
  %1499 = icmp eq i64 %1491, %1498
  br i1 %1499, label %1500, label %1572

1500:                                             ; preds = %1487
  %1501 = icmp eq i32 %1419, 83
  %1502 = select i1 %1501, ptr %1467, ptr %1468
  %1503 = tail call ptr @build2_stat(i32 noundef 85, ptr noundef nonnull %1494, ptr noundef nonnull %1492, ptr noundef nonnull %1502) #24
  %1504 = getelementptr inbounds %struct.tree_exp, ptr %1503, i64 0, i32 1
  store i32 %0, ptr %1504, align 8, !tbaa !17
  %1505 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1503)
  br label %14075

1506:                                             ; preds = %1462
  %1507 = icmp eq i32 %1474, 64
  br i1 %1507, label %1508, label %1539

1508:                                             ; preds = %1506
  %1509 = getelementptr inbounds %struct.tree_exp, ptr %1468, i64 0, i32 3
  %1510 = load ptr, ptr %1509, align 8, !tbaa !17
  %1511 = getelementptr inbounds %struct.tree_exp, ptr %1468, i64 1
  %1512 = load ptr, ptr %1511, align 8, !tbaa !17
  %1513 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1510) #24
  %1514 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1512) #24
  %1515 = load i64, ptr %1513, align 8
  %1516 = and i64 %1515, 65535
  %1517 = icmp eq i64 %1516, 23
  br i1 %1517, label %1518, label %1572

1518:                                             ; preds = %1508
  %1519 = load ptr, ptr %1431, align 8, !tbaa !17
  %1520 = getelementptr inbounds %struct.tree_common, ptr %1519, i64 0, i32 2
  %1521 = load ptr, ptr %1520, align 8, !tbaa !17
  %1522 = getelementptr inbounds %struct.tree_type, ptr %1521, i64 0, i32 6
  %1523 = load i32, ptr %1522, align 4
  %1524 = and i32 %1523, 1023
  %1525 = zext i32 %1524 to i64
  %1526 = tail call i32 @compare_tree_int(ptr noundef nonnull %1513, i64 noundef %1525) #24
  %1527 = icmp eq i32 %1526, 0
  br i1 %1527, label %1528, label %1572

1528:                                             ; preds = %1518
  %1529 = tail call i32 @operand_equal_p(ptr noundef nonnull %1467, ptr noundef %1514, i32 noundef 0)
  %1530 = icmp eq i32 %1529, 0
  br i1 %1530, label %1572, label %1531

1531:                                             ; preds = %1528
  %1532 = icmp eq i32 %1419, 83
  %1533 = select i1 %1532, i32 85, i32 86
  %1534 = load ptr, ptr %1431, align 8, !tbaa !17
  %1535 = getelementptr inbounds %struct.tree_common, ptr %1534, i64 0, i32 2
  %1536 = load ptr, ptr %1535, align 8, !tbaa !17
  %1537 = tail call ptr @build2_stat(i32 noundef %1533, ptr noundef %1536, ptr noundef %1534, ptr noundef nonnull %1467) #24
  %1538 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1537)
  br label %14075

1539:                                             ; preds = %1506
  %1540 = icmp eq i32 %1471, 64
  br i1 %1540, label %1541, label %1572

1541:                                             ; preds = %1539
  %1542 = getelementptr inbounds %struct.tree_exp, ptr %1467, i64 0, i32 3
  %1543 = load ptr, ptr %1542, align 8, !tbaa !17
  %1544 = getelementptr inbounds %struct.tree_exp, ptr %1467, i64 1
  %1545 = load ptr, ptr %1544, align 8, !tbaa !17
  %1546 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1543) #24
  %1547 = tail call ptr @tree_strip_nop_conversions(ptr noundef %1545) #24
  %1548 = load i64, ptr %1546, align 8
  %1549 = and i64 %1548, 65535
  %1550 = icmp eq i64 %1549, 23
  br i1 %1550, label %1551, label %1572

1551:                                             ; preds = %1541
  %1552 = load ptr, ptr %1431, align 8, !tbaa !17
  %1553 = getelementptr inbounds %struct.tree_common, ptr %1552, i64 0, i32 2
  %1554 = load ptr, ptr %1553, align 8, !tbaa !17
  %1555 = getelementptr inbounds %struct.tree_type, ptr %1554, i64 0, i32 6
  %1556 = load i32, ptr %1555, align 4
  %1557 = and i32 %1556, 1023
  %1558 = zext i32 %1557 to i64
  %1559 = tail call i32 @compare_tree_int(ptr noundef nonnull %1546, i64 noundef %1558) #24
  %1560 = icmp eq i32 %1559, 0
  br i1 %1560, label %1561, label %1572

1561:                                             ; preds = %1551
  %1562 = tail call i32 @operand_equal_p(ptr noundef nonnull %1468, ptr noundef %1547, i32 noundef 0)
  %1563 = icmp eq i32 %1562, 0
  br i1 %1563, label %1572, label %1564

1564:                                             ; preds = %1561
  %1565 = icmp eq i32 %1419, 83
  %1566 = select i1 %1565, i32 86, i32 85
  %1567 = load ptr, ptr %1431, align 8, !tbaa !17
  %1568 = getelementptr inbounds %struct.tree_common, ptr %1567, i64 0, i32 2
  %1569 = load ptr, ptr %1568, align 8, !tbaa !17
  %1570 = tail call ptr @build2_stat(i32 noundef %1566, ptr noundef %1569, ptr noundef %1567, ptr noundef nonnull %1468) #24
  %1571 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1570)
  br label %14075

1572:                                             ; preds = %7285, %7298, %7278, %7281, %6203, %5728, %5742, %1541, %1551, %1561, %1508, %1518, %1528, %1487, %1483, %1478, %1539, %1426, %1430, %1437, %1455, %6200, %6196, %7131, %10884, %10861, %7137, %7143, %7152, %7163, %3229, %3225, %5756, %3043, %3047, %3062, %3053, %3065
  %1573 = phi i32 [ 81, %10884 ], [ 80, %10861 ], [ 89, %7163 ], [ 89, %7152 ], [ 89, %7143 ], [ 89, %7137 ], [ 65, %5756 ], [ 65, %3229 ], [ 65, %3225 ], [ 64, %3047 ], [ 64, %3065 ], [ 64, %3062 ], [ 64, %3053 ], [ 64, %3043 ], [ 89, %7131 ], [ 65, %6196 ], [ 65, %6200 ], [ %1416, %1455 ], [ %1416, %1437 ], [ %1416, %1430 ], [ %1416, %1426 ], [ %1416, %1539 ], [ %1416, %1478 ], [ %1416, %1483 ], [ %1416, %1487 ], [ %1416, %1528 ], [ %1416, %1518 ], [ %1416, %1508 ], [ %1416, %1561 ], [ %1416, %1551 ], [ %1416, %1541 ], [ 65, %5742 ], [ 65, %5728 ], [ 65, %6203 ], [ 89, %7281 ], [ 89, %7278 ], [ 89, %7298 ], [ 89, %7285 ]
  %1574 = load i64, ptr %2, align 8
  %1575 = trunc i64 %1574 to i16
  switch i16 %1575, label %1588 [
    i16 9, label %1585
    i16 13, label %1576
    i16 14, label %1576
  ]

1576:                                             ; preds = %1572, %1572
  %1577 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %1578 = load ptr, ptr %1577, align 8, !tbaa !17
  %1579 = load i64, ptr %1578, align 8
  %1580 = and i64 %1579, 65535
  %1581 = icmp ne i64 %1580, 9
  %1582 = load i32, ptr @flag_associative_math, align 4
  %1583 = icmp ne i32 %1582, 0
  %1584 = select i1 %1581, i1 true, i1 %1583
  br i1 %1584, label %1588, label %14075

1585:                                             ; preds = %1572
  %1586 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %1587 = icmp eq i32 %1586, 0
  br i1 %1587, label %14075, label %1588

1588:                                             ; preds = %1572, %1585, %1576
  %1589 = and i64 %1574, 2147483648
  %1590 = icmp eq i64 %1589, 0
  br i1 %1590, label %1591, label %14075

1591:                                             ; preds = %1588
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #24
  %1592 = call fastcc ptr @split_tree(ptr noundef %46, i32 noundef %1573, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, i32 noundef 0)
  %1593 = icmp eq i32 %1573, 64
  %1594 = zext i1 %1593 to i32
  %1595 = call fastcc ptr @split_tree(ptr noundef %45, i32 noundef %1573, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %12, i32 noundef %1594)
  %1596 = load i64, ptr %2, align 8
  %1597 = trunc i64 %1596 to i32
  %1598 = and i32 %1597, 65535
  %1599 = icmp eq i32 %1598, 10
  br i1 %1599, label %1605, label %1600

1600:                                             ; preds = %1591
  %1601 = icmp eq i32 %1598, 12
  %1602 = load i32, ptr @flag_strict_overflow, align 4
  %1603 = icmp ne i32 %1602, 0
  %1604 = select i1 %1601, i1 %1603, i1 false
  br i1 %1604, label %1621, label %1608

1605:                                             ; preds = %1591
  %1606 = load i32, ptr @flag_strict_overflow, align 4, !tbaa !21
  %1607 = icmp eq i32 %1606, 0
  br i1 %1607, label %1644, label %1621

1608:                                             ; preds = %1600
  %1609 = add nsw i32 %1598, -6
  %1610 = icmp ult i32 %1609, 3
  br i1 %1610, label %1611, label %1644

1611:                                             ; preds = %1608
  %1612 = and i64 %1596, 2097152
  %1613 = icmp ne i64 %1612, 0
  %1614 = load i32, ptr @flag_wrapv, align 4
  %1615 = icmp ne i32 %1614, 0
  %1616 = select i1 %1613, i1 true, i1 %1615
  %1617 = icmp eq ptr %1592, null
  %1618 = select i1 %1616, i1 true, i1 %1617
  %1619 = icmp eq ptr %1595, null
  %1620 = select i1 %1618, i1 true, i1 %1619
  br i1 %1620, label %1644, label %1625

1621:                                             ; preds = %1600, %1605
  %1622 = icmp eq ptr %1592, null
  %1623 = icmp eq ptr %1595, null
  %1624 = select i1 %1622, i1 true, i1 %1623
  br i1 %1624, label %1644, label %1625

1625:                                             ; preds = %1621, %1611
  %1626 = load i64, ptr %1592, align 8
  %1627 = and i64 %1626, 65535
  %1628 = icmp eq i64 %1627, 79
  br i1 %1628, label %1629, label %1632

1629:                                             ; preds = %1625
  %1630 = getelementptr inbounds %struct.tree_exp, ptr %1592, i64 0, i32 3
  %1631 = load ptr, ptr %1630, align 8, !tbaa !17
  br label %1632

1632:                                             ; preds = %1629, %1625
  %1633 = phi ptr [ %1631, %1629 ], [ %1592, %1625 ]
  %1634 = load i64, ptr %1595, align 8
  %1635 = and i64 %1634, 65535
  %1636 = icmp eq i64 %1635, 79
  br i1 %1636, label %1637, label %1640

1637:                                             ; preds = %1632
  %1638 = getelementptr inbounds %struct.tree_exp, ptr %1595, i64 0, i32 3
  %1639 = load ptr, ptr %1638, align 8, !tbaa !17
  br label %1640

1640:                                             ; preds = %1632, %1637
  %1641 = phi ptr [ %1639, %1637 ], [ %1595, %1632 ]
  %1642 = call i32 @operand_equal_p(ptr noundef %1633, ptr noundef %1641, i32 noundef 0)
  %1643 = icmp eq i32 %1642, 0
  br i1 %1643, label %1705, label %1644

1644:                                             ; preds = %1605, %1608, %1611, %1621, %1640
  %1645 = load ptr, ptr %7, align 8, !tbaa !6
  %1646 = load ptr, ptr %10, align 8, !tbaa !6
  %1647 = load ptr, ptr %8, align 8, !tbaa !6
  %1648 = load ptr, ptr %11, align 8, !tbaa !6
  %1649 = load ptr, ptr %9, align 8, !tbaa !6
  %1650 = load ptr, ptr %12, align 8, !tbaa !6
  %1651 = insertelement <8 x ptr> poison, ptr %1592, i64 0
  %1652 = insertelement <8 x ptr> %1651, ptr %1595, i64 1
  %1653 = insertelement <8 x ptr> %1652, ptr %1645, i64 2
  %1654 = insertelement <8 x ptr> %1653, ptr %1646, i64 3
  %1655 = insertelement <8 x ptr> %1654, ptr %1647, i64 4
  %1656 = insertelement <8 x ptr> %1655, ptr %1648, i64 5
  %1657 = insertelement <8 x ptr> %1656, ptr %1649, i64 6
  %1658 = insertelement <8 x ptr> %1657, ptr %1650, i64 7
  %1659 = icmp ne <8 x ptr> %1658, zeroinitializer
  %1660 = bitcast <8 x i1> %1659 to i8
  %1661 = call i8 @llvm.ctpop.i8(i8 %1660), !range !66
  %1662 = icmp ugt i8 %1661, 2
  br i1 %1662, label %1663, label %1705

1663:                                             ; preds = %1644
  %1664 = select i1 %1593, i32 63, i32 %1573
  %1665 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1592, ptr noundef %1595, i32 noundef %1664, ptr noundef nonnull %2)
  %1666 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1645, ptr noundef %1646, i32 noundef %1664, ptr noundef nonnull %2)
  store ptr %1666, ptr %7, align 8, !tbaa !6
  %1667 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1647, ptr noundef %1648, i32 noundef %1664, ptr noundef nonnull %2)
  store ptr %1667, ptr %8, align 8, !tbaa !6
  %1668 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1649, ptr noundef %1650, i32 noundef %1664, ptr noundef nonnull %2)
  store ptr %1668, ptr %9, align 8, !tbaa !6
  %1669 = icmp ne ptr %1668, null
  %1670 = icmp ne ptr %1667, null
  %1671 = select i1 %1669, i1 %1670, i1 false
  br i1 %1671, label %1672, label %1687

1672:                                             ; preds = %1663
  %1673 = load i64, ptr %1667, align 8
  %1674 = and i64 %1673, 65535
  %1675 = icmp eq i64 %1674, 23
  br i1 %1675, label %1676, label %1685

1676:                                             ; preds = %1672
  %1677 = load i64, ptr %1668, align 8
  %1678 = and i64 %1677, 65535
  %1679 = icmp eq i64 %1678, 23
  br i1 %1679, label %1680, label %1685

1680:                                             ; preds = %1676
  %1681 = call i32 @tree_int_cst_lt(ptr noundef nonnull %1667, ptr noundef nonnull %1668) #24
  %1682 = icmp eq i32 %1681, 0
  br i1 %1682, label %1685, label %1683

1683:                                             ; preds = %1680
  %1684 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef nonnull %1668, ptr noundef nonnull %1667, i32 noundef 64, ptr noundef nonnull %2)
  store ptr %1684, ptr %9, align 8, !tbaa !6
  store ptr null, ptr %8, align 8, !tbaa !6
  br label %1687

1685:                                             ; preds = %1672, %1676, %1680
  %1686 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef nonnull %1667, ptr noundef nonnull %1668, i32 noundef 64, ptr noundef nonnull %2)
  store ptr %1686, ptr %8, align 8, !tbaa !6
  store ptr null, ptr %9, align 8, !tbaa !6
  br label %1698

1687:                                             ; preds = %1683, %1663
  %1688 = phi ptr [ null, %1683 ], [ %1667, %1663 ]
  %1689 = phi ptr [ %1684, %1683 ], [ %1668, %1663 ]
  %1690 = icmp eq ptr %1689, null
  br i1 %1690, label %1698, label %1691

1691:                                             ; preds = %1687
  %1692 = icmp eq ptr %1666, null
  br i1 %1692, label %1693, label %1695

1693:                                             ; preds = %1691
  %1694 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1665, ptr noundef nonnull %1689, i32 noundef 64, ptr noundef nonnull %2)
  br label %1702

1695:                                             ; preds = %1691
  %1696 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef nonnull %1666, ptr noundef nonnull %1689, i32 noundef 64, ptr noundef nonnull %2)
  %1697 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1665, ptr noundef %1696, i32 noundef 63, ptr noundef nonnull %2)
  br label %1702

1698:                                             ; preds = %1685, %1687
  %1699 = phi ptr [ %1686, %1685 ], [ %1688, %1687 ]
  %1700 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1666, ptr noundef %1699, i32 noundef %1664, ptr noundef nonnull %2)
  %1701 = call fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1665, ptr noundef %1700, i32 noundef %1664, ptr noundef nonnull %2)
  br label %1702

1702:                                             ; preds = %1693, %1695, %1698
  %1703 = phi ptr [ %1694, %1693 ], [ %1697, %1695 ], [ %1701, %1698 ]
  %1704 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1703)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  br label %14075

1705:                                             ; preds = %1640, %1644
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  br label %14075

1706:                                             ; preds = %305
  %1707 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %1708 = load ptr, ptr %1707, align 8, !tbaa !17
  %1709 = load i64, ptr %1708, align 8
  %1710 = trunc i64 %1709 to i16
  switch i16 %1710, label %1746 [
    i16 10, label %1711
    i16 12, label %1711
  ]

1711:                                             ; preds = %1706, %1706
  %1712 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %1713 = load ptr, ptr %1712, align 8, !tbaa !17
  %1714 = load i64, ptr %1713, align 8
  %1715 = trunc i64 %1714 to i16
  switch i16 %1715, label %1746 [
    i16 10, label %1716
    i16 12, label %1716
  ]

1716:                                             ; preds = %1711, %1711
  %1717 = load i64, ptr %46, align 8
  %1718 = and i64 %1717, 65535
  %1719 = icmp eq i64 %1718, 66
  br i1 %1719, label %1720, label %1746

1720:                                             ; preds = %1716
  %1721 = load i64, ptr %45, align 8
  %1722 = and i64 %1721, 65535
  %1723 = icmp eq i64 %1722, 66
  %1724 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1725 = load ptr, ptr %1724, align 8, !tbaa !17
  %1726 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1725)
  %1727 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %1728 = load ptr, ptr %1727, align 8, !tbaa !17
  %1729 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1728)
  br i1 %1723, label %1730, label %1740

1730:                                             ; preds = %1720
  %1731 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1732 = load ptr, ptr %1731, align 8, !tbaa !17
  %1733 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1732)
  %1734 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1735 = load ptr, ptr %1734, align 8, !tbaa !17
  %1736 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1735)
  %1737 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef %2, ptr noundef %1726, ptr noundef %1733)
  %1738 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef %2, ptr noundef %1729, ptr noundef %1736)
  %1739 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %2, ptr noundef %1737, ptr noundef %1738)
  br label %14075

1740:                                             ; preds = %1720
  %1741 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %1742 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 64, ptr noundef %2, ptr noundef %1726, ptr noundef %1741)
  %1743 = icmp eq ptr %1742, null
  br i1 %1743, label %1746, label %1744

1744:                                             ; preds = %1740
  %1745 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %2, ptr noundef nonnull %1742, ptr noundef %1729)
  br label %14075

1746:                                             ; preds = %1740, %1716, %1711, %1706
  %1747 = load i64, ptr %45, align 8
  %1748 = and i64 %1747, 65535
  %1749 = icmp eq i64 %1748, 79
  br i1 %1749, label %1750, label %1755

1750:                                             ; preds = %1746
  %1751 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1752 = load ptr, ptr %1751, align 8, !tbaa !17
  %1753 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1752)
  %1754 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %2, ptr noundef %3, ptr noundef %1753)
  br label %14075

1755:                                             ; preds = %1746
  %1756 = load i64, ptr %46, align 8
  %1757 = and i64 %1756, 65535
  %1758 = icmp eq i64 %1757, 79
  br i1 %1758, label %1759, label %1798

1759:                                             ; preds = %1755
  %1760 = load i64, ptr %2, align 8
  %1761 = trunc i64 %1760 to i16
  switch i16 %1761, label %1768 [
    i16 9, label %1773
    i16 13, label %1762
    i16 14, label %1762
  ]

1762:                                             ; preds = %1759, %1759
  %1763 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %1764 = load ptr, ptr %1763, align 8, !tbaa !17
  %1765 = load i64, ptr %1764, align 8
  %1766 = and i64 %1765, 65535
  %1767 = icmp eq i64 %1766, 9
  br i1 %1767, label %1773, label %1798

1768:                                             ; preds = %1759
  %1769 = trunc i64 %1760 to i32
  %1770 = and i32 %1769, 65535
  %1771 = add nsw i32 %1770, -6
  %1772 = icmp ult i32 %1771, 3
  br i1 %1772, label %1773, label %1798

1773:                                             ; preds = %1768, %1759, %1762
  %1774 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %45)
  %1775 = icmp eq i8 %1774, 0
  br i1 %1775, label %1798, label %1776

1776:                                             ; preds = %1773
  %1777 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %1778 = icmp eq i32 %1777, 0
  br i1 %1778, label %1791, label %1779

1779:                                             ; preds = %1776
  %1780 = load i64, ptr %46, align 8
  %1781 = and i64 %1780, 131072
  %1782 = icmp eq i64 %1781, 0
  br i1 %1782, label %1783, label %1791

1783:                                             ; preds = %1779
  %1784 = load i64, ptr %45, align 8
  %1785 = and i64 %1784, 131072
  %1786 = icmp eq i64 %1785, 0
  br i1 %1786, label %1787, label %1791

1787:                                             ; preds = %1783
  %1788 = or i64 %1784, %1780
  %1789 = and i64 %1788, 65536
  %1790 = icmp eq i64 %1789, 0
  br i1 %1790, label %1791, label %1798

1791:                                             ; preds = %1779, %1783, %1776, %1787
  %1792 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %1793 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1792)
  %1794 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1795 = load ptr, ptr %1794, align 8, !tbaa !17
  %1796 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1795)
  %1797 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef %1793, ptr noundef %1796)
  br label %14075

1798:                                             ; preds = %1762, %1768, %1787, %1773, %1755
  %1799 = load i64, ptr %2, align 8
  %1800 = trunc i64 %1799 to i32
  %1801 = and i32 %1800, 65535
  %1802 = add nsw i32 %1801, -6
  %1803 = icmp ult i32 %1802, 3
  br i1 %1803, label %1804, label %1823

1804:                                             ; preds = %1798
  %1805 = load i64, ptr %46, align 8
  %1806 = and i64 %1805, 65535
  %1807 = icmp eq i64 %1806, 79
  br i1 %1807, label %1808, label %1823

1808:                                             ; preds = %1804
  %1809 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %1810 = icmp eq i32 %1809, 0
  %1811 = load i64, ptr %2, align 8
  br i1 %1810, label %1823, label %1812

1812:                                             ; preds = %1808
  %1813 = and i64 %1811, 2097152
  %1814 = icmp eq i64 %1813, 0
  %1815 = load i32, ptr @flag_trapv, align 4
  %1816 = icmp ne i32 %1815, 0
  %1817 = select i1 %1814, i1 %1816, i1 false
  br i1 %1817, label %1823, label %1818

1818:                                             ; preds = %1812
  %1819 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1820 = load ptr, ptr %1819, align 8, !tbaa !17
  %1821 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1820)
  %1822 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %1821)
  br label %14075

1823:                                             ; preds = %1798, %1812, %1808, %1804
  %1824 = phi i64 [ %1799, %1798 ], [ %1811, %1812 ], [ %1811, %1808 ], [ %1799, %1804 ]
  %1825 = trunc i64 %1824 to i32
  %1826 = and i32 %1825, 65535
  %1827 = add nsw i32 %1826, -6
  %1828 = icmp ult i32 %1827, 3
  br i1 %1828, label %1829, label %1839

1829:                                             ; preds = %1823
  %1830 = tail call i32 @integer_all_onesp(ptr noundef nonnull %46) #24
  %1831 = icmp eq i32 %1830, 0
  br i1 %1831, label %1832, label %1837

1832:                                             ; preds = %1829
  %1833 = load i64, ptr %2, align 8
  %1834 = trunc i64 %1833 to i32
  %1835 = and i32 %1834, 65535
  %1836 = add nsw i32 %1835, -6
  br label %1839

1837:                                             ; preds = %1829
  %1838 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %4)
  br label %14075

1839:                                             ; preds = %1832, %1823
  %1840 = phi i32 [ %1836, %1832 ], [ %1827, %1823 ]
  %1841 = icmp ult i32 %1840, 3
  br i1 %1841, label %1842, label %1871

1842:                                             ; preds = %1839
  %1843 = load i64, ptr %45, align 8
  %1844 = and i64 %1843, 65535
  %1845 = icmp eq i64 %1844, 65
  br i1 %1845, label %1846, label %1871

1846:                                             ; preds = %1842
  %1847 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1848 = load ptr, ptr %1847, align 8, !tbaa !17
  %1849 = load i64, ptr %1848, align 8
  %1850 = and i64 %1849, 65535
  %1851 = icmp eq i64 %1850, 67
  br i1 %1851, label %1852, label %1871

1852:                                             ; preds = %1846
  %1853 = getelementptr inbounds %struct.tree_exp, ptr %1848, i64 0, i32 3
  %1854 = load ptr, ptr %1853, align 8, !tbaa !17
  %1855 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %1854, i32 noundef 0)
  %1856 = icmp eq i32 %1855, 0
  br i1 %1856, label %1871, label %1857

1857:                                             ; preds = %1852
  %1858 = load ptr, ptr %1847, align 8, !tbaa !17
  %1859 = getelementptr inbounds %struct.tree_exp, ptr %1858, i64 1
  %1860 = load ptr, ptr %1859, align 8, !tbaa !17
  %1861 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1862 = load ptr, ptr %1861, align 8, !tbaa !17
  %1863 = tail call i32 @operand_equal_p(ptr noundef %1860, ptr noundef %1862, i32 noundef 0)
  %1864 = icmp eq i32 %1863, 0
  br i1 %1864, label %1871, label %1865

1865:                                             ; preds = %1857
  %1866 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %1867 = load ptr, ptr %1866, align 8, !tbaa !17
  %1868 = load ptr, ptr %1861, align 8, !tbaa !17
  %1869 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 71, ptr noundef %1867, ptr noundef nonnull %46, ptr noundef %1868)
  %1870 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1869)
  br label %14075

1871:                                             ; preds = %1839, %1857, %1852, %1846, %1842
  %1872 = load i64, ptr %2, align 8
  %1873 = trunc i64 %1872 to i16
  switch i16 %1873, label %1880 [
    i16 9, label %1950
    i16 13, label %1874
    i16 14, label %1874
  ]

1874:                                             ; preds = %1871, %1871
  %1875 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %1876 = load ptr, ptr %1875, align 8, !tbaa !17
  %1877 = load i64, ptr %1876, align 8
  %1878 = and i64 %1877, 65535
  %1879 = icmp eq i64 %1878, 9
  br i1 %1879, label %1950, label %1880

1880:                                             ; preds = %1871, %1874
  %1881 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %1882 = icmp eq i32 %1881, 0
  br i1 %1882, label %1886, label %1883

1883:                                             ; preds = %1880
  %1884 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45)
  %1885 = tail call fastcc ptr @negate_expr(ptr noundef %1884)
  br label %14075

1886:                                             ; preds = %1880
  %1887 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %1888 = icmp eq i32 %1887, 0
  br i1 %1888, label %1892, label %1889

1889:                                             ; preds = %1886
  %1890 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %1891 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %1890)
  br label %14075

1892:                                             ; preds = %1886
  %1893 = load i64, ptr %46, align 8
  %1894 = and i64 %1893, 65536
  %1895 = icmp eq i64 %1894, 0
  br i1 %1895, label %1896, label %1923

1896:                                             ; preds = %1892
  %1897 = load i64, ptr %45, align 8
  %1898 = and i64 %1897, 65535
  %1899 = icmp eq i64 %1898, 89
  br i1 %1899, label %1900, label %1923

1900:                                             ; preds = %1896
  %1901 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1902 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1903 = load ptr, ptr %1902, align 8, !tbaa !17
  %1904 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %1903, i32 noundef 0)
  %1905 = icmp eq i32 %1904, 0
  %1906 = load ptr, ptr %1901, align 8, !tbaa !17
  br i1 %1905, label %1912, label %1907

1907:                                             ; preds = %1900
  %1908 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1906)
  %1909 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %1908)
  %1910 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %1911 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %2, ptr noundef %1909, ptr noundef %1910)
  br label %14075

1912:                                             ; preds = %1900
  %1913 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %1906, i32 noundef 0)
  %1914 = icmp eq i32 %1913, 0
  br i1 %1914, label %1915, label %1917

1915:                                             ; preds = %1912
  %1916 = load i64, ptr %46, align 8
  br label %1923

1917:                                             ; preds = %1912
  %1918 = load ptr, ptr %1902, align 8, !tbaa !17
  %1919 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %1918)
  %1920 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %1919)
  %1921 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %1922 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %2, ptr noundef %1920, ptr noundef %1921)
  br label %14075

1923:                                             ; preds = %1915, %1896, %1892
  %1924 = phi i64 [ %1916, %1915 ], [ %1893, %1896 ], [ %1893, %1892 ]
  %1925 = and i64 %1924, 65535
  %1926 = icmp eq i64 %1925, 89
  br i1 %1926, label %1927, label %1965

1927:                                             ; preds = %1923
  %1928 = load i64, ptr %45, align 8
  %1929 = and i64 %1928, 65535
  %1930 = icmp eq i64 %1929, 89
  br i1 %1930, label %1931, label %1965

1931:                                             ; preds = %1927
  %1932 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %1933 = load ptr, ptr %1932, align 8, !tbaa !17
  %1934 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %1935 = load ptr, ptr %1934, align 8, !tbaa !17
  %1936 = tail call i32 @operand_equal_p(ptr noundef %1933, ptr noundef %1935, i32 noundef 0)
  %1937 = icmp eq i32 %1936, 0
  br i1 %1937, label %1965, label %1938

1938:                                             ; preds = %1931
  %1939 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %1940 = load ptr, ptr %1939, align 8, !tbaa !17
  %1941 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %1942 = load ptr, ptr %1941, align 8, !tbaa !17
  %1943 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef nonnull %2, ptr noundef %1940)
  %1944 = tail call i32 @operand_equal_p(ptr noundef %1943, ptr noundef %1942, i32 noundef 0)
  %1945 = icmp eq i32 %1944, 0
  br i1 %1945, label %1965, label %1946

1946:                                             ; preds = %1938
  %1947 = load ptr, ptr %1932, align 8, !tbaa !17
  %1948 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef nonnull %2, ptr noundef %1947, ptr noundef %1942)
  %1949 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef %1948, ptr noundef %1942)
  br label %14075

1950:                                             ; preds = %1871, %1874
  %1951 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %1952 = load ptr, ptr %1951, align 8, !tbaa !17
  %1953 = tail call zeroext i8 @fold_real_zero_addition_p(ptr noundef %1952, ptr noundef nonnull %45, i32 noundef 1), !range !40
  %1954 = icmp eq i8 %1953, 0
  br i1 %1954, label %1958, label %1955

1955:                                             ; preds = %1950
  %1956 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %1957 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %1956)
  br label %14075

1958:                                             ; preds = %1950
  %1959 = load ptr, ptr %1707, align 8, !tbaa !17
  %1960 = tail call zeroext i8 @fold_real_zero_addition_p(ptr noundef %1959, ptr noundef nonnull %46, i32 noundef 0), !range !40
  %1961 = icmp eq i8 %1960, 0
  br i1 %1961, label %1965, label %1962

1962:                                             ; preds = %1958
  %1963 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45)
  %1964 = tail call fastcc ptr @negate_expr(ptr noundef %1963)
  br label %14075

1965:                                             ; preds = %1938, %1958, %1923, %1927, %1931
  %1966 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %1967 = icmp eq i32 %1966, 0
  br i1 %1967, label %2264, label %1968

1968:                                             ; preds = %1965
  %1969 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %1970 = load ptr, ptr %1969, align 8, !tbaa !17
  %1971 = load i64, ptr %1970, align 8
  %1972 = and i64 %1971, 65535
  %1973 = icmp eq i64 %1972, 14
  br i1 %1973, label %1974, label %1977

1974:                                             ; preds = %1968
  %1975 = tail call i32 @vector_type_mode(ptr noundef nonnull %1970) #24
  %1976 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %1982

1977:                                             ; preds = %1968
  %1978 = getelementptr inbounds %struct.tree_type, ptr %1970, i64 0, i32 6
  %1979 = load i32, ptr %1978, align 4
  %1980 = lshr i32 %1979, 16
  %1981 = and i32 %1980, 255
  br label %1982

1982:                                             ; preds = %1977, %1974
  %1983 = phi ptr [ %1976, %1974 ], [ %1970, %1977 ]
  %1984 = phi i32 [ %1975, %1974 ], [ %1981, %1977 ]
  %1985 = zext i32 %1984 to i64
  %1986 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1985
  %1987 = load i8, ptr %1986, align 1, !tbaa !17
  %1988 = icmp eq i8 %1987, 8
  br i1 %1988, label %2046, label %1989

1989:                                             ; preds = %1982
  %1990 = load i64, ptr %1983, align 8
  %1991 = and i64 %1990, 65535
  %1992 = icmp eq i64 %1991, 14
  br i1 %1992, label %1993, label %1996

1993:                                             ; preds = %1989
  %1994 = tail call i32 @vector_type_mode(ptr noundef nonnull %1983) #24
  %1995 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2001

1996:                                             ; preds = %1989
  %1997 = getelementptr inbounds %struct.tree_type, ptr %1983, i64 0, i32 6
  %1998 = load i32, ptr %1997, align 4
  %1999 = lshr i32 %1998, 16
  %2000 = and i32 %1999, 255
  br label %2001

2001:                                             ; preds = %1996, %1993
  %2002 = phi ptr [ %1995, %1993 ], [ %1983, %1996 ]
  %2003 = phi i32 [ %1994, %1993 ], [ %2000, %1996 ]
  %2004 = zext i32 %2003 to i64
  %2005 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2004
  %2006 = load i8, ptr %2005, align 1, !tbaa !17
  %2007 = icmp eq i8 %2006, 9
  br i1 %2007, label %2046, label %2008

2008:                                             ; preds = %2001
  %2009 = load i64, ptr %2002, align 8
  %2010 = and i64 %2009, 65535
  %2011 = icmp eq i64 %2010, 14
  br i1 %2011, label %2012, label %2015

2012:                                             ; preds = %2008
  %2013 = tail call i32 @vector_type_mode(ptr noundef nonnull %2002) #24
  %2014 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2020

2015:                                             ; preds = %2008
  %2016 = getelementptr inbounds %struct.tree_type, ptr %2002, i64 0, i32 6
  %2017 = load i32, ptr %2016, align 4
  %2018 = lshr i32 %2017, 16
  %2019 = and i32 %2018, 255
  br label %2020

2020:                                             ; preds = %2015, %2012
  %2021 = phi ptr [ %2014, %2012 ], [ %2002, %2015 ]
  %2022 = phi i32 [ %2013, %2012 ], [ %2019, %2015 ]
  %2023 = zext i32 %2022 to i64
  %2024 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2023
  %2025 = load i8, ptr %2024, align 1, !tbaa !17
  %2026 = icmp eq i8 %2025, 11
  br i1 %2026, label %2046, label %2027

2027:                                             ; preds = %2020
  %2028 = load i64, ptr %2021, align 8
  %2029 = and i64 %2028, 65535
  %2030 = icmp eq i64 %2029, 14
  br i1 %2030, label %2031, label %2033

2031:                                             ; preds = %2027
  %2032 = tail call i32 @vector_type_mode(ptr noundef nonnull %2021) #24
  br label %2038

2033:                                             ; preds = %2027
  %2034 = getelementptr inbounds %struct.tree_type, ptr %2021, i64 0, i32 6
  %2035 = load i32, ptr %2034, align 4
  %2036 = lshr i32 %2035, 16
  %2037 = and i32 %2036, 255
  br label %2038

2038:                                             ; preds = %2033, %2031
  %2039 = phi i32 [ %2032, %2031 ], [ %2037, %2033 ]
  %2040 = zext i32 %2039 to i64
  %2041 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2040
  %2042 = load i8, ptr %2041, align 1, !tbaa !17
  %2043 = icmp eq i8 %2042, 17
  br i1 %2043, label %2044, label %2264

2044:                                             ; preds = %2038
  %2045 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2046

2046:                                             ; preds = %2044, %2020, %2001, %1982
  %2047 = phi ptr [ %2045, %2044 ], [ %2021, %2020 ], [ %2002, %2001 ], [ %1983, %1982 ]
  %2048 = load i64, ptr %2047, align 8
  %2049 = and i64 %2048, 65535
  %2050 = icmp eq i64 %2049, 14
  br i1 %2050, label %2051, label %2054

2051:                                             ; preds = %2046
  %2052 = tail call i32 @vector_type_mode(ptr noundef nonnull %2047) #24
  %2053 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2059

2054:                                             ; preds = %2046
  %2055 = getelementptr inbounds %struct.tree_type, ptr %2047, i64 0, i32 6
  %2056 = load i32, ptr %2055, align 4
  %2057 = lshr i32 %2056, 16
  %2058 = and i32 %2057, 255
  br label %2059

2059:                                             ; preds = %2054, %2051
  %2060 = phi ptr [ %2053, %2051 ], [ %2047, %2054 ]
  %2061 = phi i32 [ %2052, %2051 ], [ %2058, %2054 ]
  %2062 = zext i32 %2061 to i64
  %2063 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2062
  %2064 = load i8, ptr %2063, align 1, !tbaa !17
  %2065 = icmp eq i8 %2064, 8
  br i1 %2065, label %2085, label %2066

2066:                                             ; preds = %2059
  %2067 = load i64, ptr %2060, align 8
  %2068 = and i64 %2067, 65535
  %2069 = icmp eq i64 %2068, 14
  br i1 %2069, label %2070, label %2073

2070:                                             ; preds = %2066
  %2071 = tail call i32 @vector_type_mode(ptr noundef nonnull %2060) #24
  %2072 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2078

2073:                                             ; preds = %2066
  %2074 = getelementptr inbounds %struct.tree_type, ptr %2060, i64 0, i32 6
  %2075 = load i32, ptr %2074, align 4
  %2076 = lshr i32 %2075, 16
  %2077 = and i32 %2076, 255
  br label %2078

2078:                                             ; preds = %2073, %2070
  %2079 = phi ptr [ %2072, %2070 ], [ %2060, %2073 ]
  %2080 = phi i32 [ %2071, %2070 ], [ %2077, %2073 ]
  %2081 = zext i32 %2080 to i64
  %2082 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2081
  %2083 = load i8, ptr %2082, align 1, !tbaa !17
  %2084 = icmp eq i8 %2083, 9
  br i1 %2084, label %2085, label %2097

2085:                                             ; preds = %2078, %2059
  %2086 = phi ptr [ %2079, %2078 ], [ %2060, %2059 ]
  %2087 = load i64, ptr %2086, align 8
  %2088 = and i64 %2087, 65535
  %2089 = icmp eq i64 %2088, 14
  br i1 %2089, label %2090, label %2092

2090:                                             ; preds = %2085
  %2091 = tail call i32 @vector_type_mode(ptr noundef nonnull %2086) #24
  br label %2114

2092:                                             ; preds = %2085
  %2093 = getelementptr inbounds %struct.tree_type, ptr %2086, i64 0, i32 6
  %2094 = load i32, ptr %2093, align 4
  %2095 = lshr i32 %2094, 16
  %2096 = and i32 %2095, 255
  br label %2114

2097:                                             ; preds = %2078
  %2098 = load i64, ptr %2079, align 8
  %2099 = and i64 %2098, 65535
  %2100 = icmp eq i64 %2099, 14
  br i1 %2100, label %2101, label %2103

2101:                                             ; preds = %2097
  %2102 = tail call i32 @vector_type_mode(ptr noundef nonnull %2079) #24
  br label %2108

2103:                                             ; preds = %2097
  %2104 = getelementptr inbounds %struct.tree_type, ptr %2079, i64 0, i32 6
  %2105 = load i32, ptr %2104, align 4
  %2106 = lshr i32 %2105, 16
  %2107 = and i32 %2106, 255
  br label %2108

2108:                                             ; preds = %2103, %2101
  %2109 = phi i32 [ %2102, %2101 ], [ %2107, %2103 ]
  %2110 = zext i32 %2109 to i64
  %2111 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2110
  %2112 = load i8, ptr %2111, align 1, !tbaa !17
  %2113 = zext i8 %2112 to i32
  br label %2114

2114:                                             ; preds = %2090, %2092, %2108
  %2115 = phi i32 [ %2113, %2108 ], [ %2091, %2090 ], [ %2096, %2092 ]
  %2116 = zext i32 %2115 to i64
  %2117 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2116
  %2118 = load i8, ptr %2117, align 1, !tbaa !17
  %2119 = icmp eq i8 %2118, 9
  %2120 = load ptr, ptr %1969, align 8, !tbaa !17
  %2121 = load i64, ptr %2120, align 8
  %2122 = and i64 %2121, 65535
  %2123 = icmp eq i64 %2122, 14
  br i1 %2119, label %2124, label %2188

2124:                                             ; preds = %2114
  br i1 %2123, label %2125, label %2128

2125:                                             ; preds = %2124
  %2126 = tail call i32 @vector_type_mode(ptr noundef nonnull %2120) #24
  %2127 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2133

2128:                                             ; preds = %2124
  %2129 = getelementptr inbounds %struct.tree_type, ptr %2120, i64 0, i32 6
  %2130 = load i32, ptr %2129, align 4
  %2131 = lshr i32 %2130, 16
  %2132 = and i32 %2131, 255
  br label %2133

2133:                                             ; preds = %2128, %2125
  %2134 = phi ptr [ %2127, %2125 ], [ %2120, %2128 ]
  %2135 = phi i32 [ %2126, %2125 ], [ %2132, %2128 ]
  %2136 = zext i32 %2135 to i64
  %2137 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2136
  %2138 = load i8, ptr %2137, align 1, !tbaa !17
  %2139 = icmp eq i8 %2138, 8
  br i1 %2139, label %2159, label %2140

2140:                                             ; preds = %2133
  %2141 = load i64, ptr %2134, align 8
  %2142 = and i64 %2141, 65535
  %2143 = icmp eq i64 %2142, 14
  br i1 %2143, label %2144, label %2147

2144:                                             ; preds = %2140
  %2145 = tail call i32 @vector_type_mode(ptr noundef nonnull %2134) #24
  %2146 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2152

2147:                                             ; preds = %2140
  %2148 = getelementptr inbounds %struct.tree_type, ptr %2134, i64 0, i32 6
  %2149 = load i32, ptr %2148, align 4
  %2150 = lshr i32 %2149, 16
  %2151 = and i32 %2150, 255
  br label %2152

2152:                                             ; preds = %2147, %2144
  %2153 = phi ptr [ %2146, %2144 ], [ %2134, %2147 ]
  %2154 = phi i32 [ %2145, %2144 ], [ %2151, %2147 ]
  %2155 = zext i32 %2154 to i64
  %2156 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2155
  %2157 = load i8, ptr %2156, align 1, !tbaa !17
  %2158 = icmp eq i8 %2157, 9
  br i1 %2158, label %2159, label %2171

2159:                                             ; preds = %2152, %2133
  %2160 = phi ptr [ %2153, %2152 ], [ %2134, %2133 ]
  %2161 = load i64, ptr %2160, align 8
  %2162 = and i64 %2161, 65535
  %2163 = icmp eq i64 %2162, 14
  br i1 %2163, label %2164, label %2166

2164:                                             ; preds = %2159
  %2165 = tail call i32 @vector_type_mode(ptr noundef nonnull %2160) #24
  br label %2252

2166:                                             ; preds = %2159
  %2167 = getelementptr inbounds %struct.tree_type, ptr %2160, i64 0, i32 6
  %2168 = load i32, ptr %2167, align 4
  %2169 = lshr i32 %2168, 16
  %2170 = and i32 %2169, 255
  br label %2252

2171:                                             ; preds = %2152
  %2172 = load i64, ptr %2153, align 8
  %2173 = and i64 %2172, 65535
  %2174 = icmp eq i64 %2173, 14
  br i1 %2174, label %2175, label %2177

2175:                                             ; preds = %2171
  %2176 = tail call i32 @vector_type_mode(ptr noundef nonnull %2153) #24
  br label %2182

2177:                                             ; preds = %2171
  %2178 = getelementptr inbounds %struct.tree_type, ptr %2153, i64 0, i32 6
  %2179 = load i32, ptr %2178, align 4
  %2180 = lshr i32 %2179, 16
  %2181 = and i32 %2180, 255
  br label %2182

2182:                                             ; preds = %2177, %2175
  %2183 = phi i32 [ %2176, %2175 ], [ %2181, %2177 ]
  %2184 = zext i32 %2183 to i64
  %2185 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2184
  %2186 = load i8, ptr %2185, align 1, !tbaa !17
  %2187 = zext i8 %2186 to i32
  br label %2252

2188:                                             ; preds = %2114
  br i1 %2123, label %2189, label %2192

2189:                                             ; preds = %2188
  %2190 = tail call i32 @vector_type_mode(ptr noundef nonnull %2120) #24
  %2191 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2197

2192:                                             ; preds = %2188
  %2193 = getelementptr inbounds %struct.tree_type, ptr %2120, i64 0, i32 6
  %2194 = load i32, ptr %2193, align 4
  %2195 = lshr i32 %2194, 16
  %2196 = and i32 %2195, 255
  br label %2197

2197:                                             ; preds = %2192, %2189
  %2198 = phi ptr [ %2191, %2189 ], [ %2120, %2192 ]
  %2199 = phi i32 [ %2190, %2189 ], [ %2196, %2192 ]
  %2200 = zext i32 %2199 to i64
  %2201 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2200
  %2202 = load i8, ptr %2201, align 1, !tbaa !17
  %2203 = icmp eq i8 %2202, 8
  br i1 %2203, label %2223, label %2204

2204:                                             ; preds = %2197
  %2205 = load i64, ptr %2198, align 8
  %2206 = and i64 %2205, 65535
  %2207 = icmp eq i64 %2206, 14
  br i1 %2207, label %2208, label %2211

2208:                                             ; preds = %2204
  %2209 = tail call i32 @vector_type_mode(ptr noundef nonnull %2198) #24
  %2210 = load ptr, ptr %1969, align 8, !tbaa !17
  br label %2216

2211:                                             ; preds = %2204
  %2212 = getelementptr inbounds %struct.tree_type, ptr %2198, i64 0, i32 6
  %2213 = load i32, ptr %2212, align 4
  %2214 = lshr i32 %2213, 16
  %2215 = and i32 %2214, 255
  br label %2216

2216:                                             ; preds = %2211, %2208
  %2217 = phi ptr [ %2210, %2208 ], [ %2198, %2211 ]
  %2218 = phi i32 [ %2209, %2208 ], [ %2215, %2211 ]
  %2219 = zext i32 %2218 to i64
  %2220 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2219
  %2221 = load i8, ptr %2220, align 1, !tbaa !17
  %2222 = icmp eq i8 %2221, 9
  br i1 %2222, label %2223, label %2235

2223:                                             ; preds = %2216, %2197
  %2224 = phi ptr [ %2217, %2216 ], [ %2198, %2197 ]
  %2225 = load i64, ptr %2224, align 8
  %2226 = and i64 %2225, 65535
  %2227 = icmp eq i64 %2226, 14
  br i1 %2227, label %2228, label %2230

2228:                                             ; preds = %2223
  %2229 = tail call i32 @vector_type_mode(ptr noundef nonnull %2224) #24
  br label %2252

2230:                                             ; preds = %2223
  %2231 = getelementptr inbounds %struct.tree_type, ptr %2224, i64 0, i32 6
  %2232 = load i32, ptr %2231, align 4
  %2233 = lshr i32 %2232, 16
  %2234 = and i32 %2233, 255
  br label %2252

2235:                                             ; preds = %2216
  %2236 = load i64, ptr %2217, align 8
  %2237 = and i64 %2236, 65535
  %2238 = icmp eq i64 %2237, 14
  br i1 %2238, label %2239, label %2241

2239:                                             ; preds = %2235
  %2240 = tail call i32 @vector_type_mode(ptr noundef nonnull %2217) #24
  br label %2246

2241:                                             ; preds = %2235
  %2242 = getelementptr inbounds %struct.tree_type, ptr %2217, i64 0, i32 6
  %2243 = load i32, ptr %2242, align 4
  %2244 = lshr i32 %2243, 16
  %2245 = and i32 %2244, 255
  br label %2246

2246:                                             ; preds = %2241, %2239
  %2247 = phi i32 [ %2240, %2239 ], [ %2245, %2241 ]
  %2248 = zext i32 %2247 to i64
  %2249 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2248
  %2250 = load i8, ptr %2249, align 1, !tbaa !17
  %2251 = zext i8 %2250 to i32
  br label %2252

2252:                                             ; preds = %2246, %2230, %2228, %2182, %2166, %2164
  %2253 = phi i32 [ %2187, %2182 ], [ %2165, %2164 ], [ %2170, %2166 ], [ %2251, %2246 ], [ %2229, %2228 ], [ %2234, %2230 ]
  %2254 = add i32 %2253, -38
  %2255 = zext i32 %2254 to i64
  %2256 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2255
  %2257 = load ptr, ptr %2256, align 8, !tbaa !6
  %2258 = getelementptr inbounds %struct.real_format, ptr %2257, i64 0, i32 11
  %2259 = load i8, ptr %2258, align 2, !tbaa !36
  %2260 = icmp eq i8 %2259, 0
  %2261 = load i32, ptr @flag_finite_math_only, align 4
  %2262 = icmp ne i32 %2261, 0
  %2263 = select i1 %2260, i1 true, i1 %2262
  br i1 %2263, label %2264, label %2633

2264:                                             ; preds = %2252, %2038, %1965
  %2265 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %2266 = load ptr, ptr %2265, align 8, !tbaa !17
  %2267 = load i64, ptr %2266, align 8
  %2268 = and i64 %2267, 65535
  %2269 = icmp eq i64 %2268, 14
  br i1 %2269, label %2270, label %2273

2270:                                             ; preds = %2264
  %2271 = tail call i32 @vector_type_mode(ptr noundef nonnull %2266) #24
  %2272 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2278

2273:                                             ; preds = %2264
  %2274 = getelementptr inbounds %struct.tree_type, ptr %2266, i64 0, i32 6
  %2275 = load i32, ptr %2274, align 4
  %2276 = lshr i32 %2275, 16
  %2277 = and i32 %2276, 255
  br label %2278

2278:                                             ; preds = %2273, %2270
  %2279 = phi ptr [ %2272, %2270 ], [ %2266, %2273 ]
  %2280 = phi i32 [ %2271, %2270 ], [ %2277, %2273 ]
  %2281 = zext i32 %2280 to i64
  %2282 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2281
  %2283 = load i8, ptr %2282, align 1, !tbaa !17
  %2284 = icmp eq i8 %2283, 8
  br i1 %2284, label %2342, label %2285

2285:                                             ; preds = %2278
  %2286 = load i64, ptr %2279, align 8
  %2287 = and i64 %2286, 65535
  %2288 = icmp eq i64 %2287, 14
  br i1 %2288, label %2289, label %2292

2289:                                             ; preds = %2285
  %2290 = tail call i32 @vector_type_mode(ptr noundef nonnull %2279) #24
  %2291 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2297

2292:                                             ; preds = %2285
  %2293 = getelementptr inbounds %struct.tree_type, ptr %2279, i64 0, i32 6
  %2294 = load i32, ptr %2293, align 4
  %2295 = lshr i32 %2294, 16
  %2296 = and i32 %2295, 255
  br label %2297

2297:                                             ; preds = %2292, %2289
  %2298 = phi ptr [ %2291, %2289 ], [ %2279, %2292 ]
  %2299 = phi i32 [ %2290, %2289 ], [ %2296, %2292 ]
  %2300 = zext i32 %2299 to i64
  %2301 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2300
  %2302 = load i8, ptr %2301, align 1, !tbaa !17
  %2303 = icmp eq i8 %2302, 9
  br i1 %2303, label %2342, label %2304

2304:                                             ; preds = %2297
  %2305 = load i64, ptr %2298, align 8
  %2306 = and i64 %2305, 65535
  %2307 = icmp eq i64 %2306, 14
  br i1 %2307, label %2308, label %2311

2308:                                             ; preds = %2304
  %2309 = tail call i32 @vector_type_mode(ptr noundef nonnull %2298) #24
  %2310 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2316

2311:                                             ; preds = %2304
  %2312 = getelementptr inbounds %struct.tree_type, ptr %2298, i64 0, i32 6
  %2313 = load i32, ptr %2312, align 4
  %2314 = lshr i32 %2313, 16
  %2315 = and i32 %2314, 255
  br label %2316

2316:                                             ; preds = %2311, %2308
  %2317 = phi ptr [ %2310, %2308 ], [ %2298, %2311 ]
  %2318 = phi i32 [ %2309, %2308 ], [ %2315, %2311 ]
  %2319 = zext i32 %2318 to i64
  %2320 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2319
  %2321 = load i8, ptr %2320, align 1, !tbaa !17
  %2322 = icmp eq i8 %2321, 11
  br i1 %2322, label %2342, label %2323

2323:                                             ; preds = %2316
  %2324 = load i64, ptr %2317, align 8
  %2325 = and i64 %2324, 65535
  %2326 = icmp eq i64 %2325, 14
  br i1 %2326, label %2327, label %2330

2327:                                             ; preds = %2323
  %2328 = tail call i32 @vector_type_mode(ptr noundef nonnull %2317) #24
  %2329 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2335

2330:                                             ; preds = %2323
  %2331 = getelementptr inbounds %struct.tree_type, ptr %2317, i64 0, i32 6
  %2332 = load i32, ptr %2331, align 4
  %2333 = lshr i32 %2332, 16
  %2334 = and i32 %2333, 255
  br label %2335

2335:                                             ; preds = %2330, %2327
  %2336 = phi ptr [ %2329, %2327 ], [ %2317, %2330 ]
  %2337 = phi i32 [ %2328, %2327 ], [ %2334, %2330 ]
  %2338 = zext i32 %2337 to i64
  %2339 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2338
  %2340 = load i8, ptr %2339, align 1, !tbaa !17
  %2341 = icmp eq i8 %2340, 17
  br i1 %2341, label %2342, label %2562

2342:                                             ; preds = %2335, %2316, %2297, %2278
  %2343 = phi ptr [ %2317, %2316 ], [ %2298, %2297 ], [ %2279, %2278 ], [ %2336, %2335 ]
  %2344 = load i64, ptr %2343, align 8
  %2345 = and i64 %2344, 65535
  %2346 = icmp eq i64 %2345, 14
  br i1 %2346, label %2347, label %2350

2347:                                             ; preds = %2342
  %2348 = tail call i32 @vector_type_mode(ptr noundef nonnull %2343) #24
  %2349 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2355

2350:                                             ; preds = %2342
  %2351 = getelementptr inbounds %struct.tree_type, ptr %2343, i64 0, i32 6
  %2352 = load i32, ptr %2351, align 4
  %2353 = lshr i32 %2352, 16
  %2354 = and i32 %2353, 255
  br label %2355

2355:                                             ; preds = %2350, %2347
  %2356 = phi ptr [ %2349, %2347 ], [ %2343, %2350 ]
  %2357 = phi i32 [ %2348, %2347 ], [ %2354, %2350 ]
  %2358 = zext i32 %2357 to i64
  %2359 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2358
  %2360 = load i8, ptr %2359, align 1, !tbaa !17
  %2361 = icmp eq i8 %2360, 8
  br i1 %2361, label %2381, label %2362

2362:                                             ; preds = %2355
  %2363 = load i64, ptr %2356, align 8
  %2364 = and i64 %2363, 65535
  %2365 = icmp eq i64 %2364, 14
  br i1 %2365, label %2366, label %2369

2366:                                             ; preds = %2362
  %2367 = tail call i32 @vector_type_mode(ptr noundef nonnull %2356) #24
  %2368 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2374

2369:                                             ; preds = %2362
  %2370 = getelementptr inbounds %struct.tree_type, ptr %2356, i64 0, i32 6
  %2371 = load i32, ptr %2370, align 4
  %2372 = lshr i32 %2371, 16
  %2373 = and i32 %2372, 255
  br label %2374

2374:                                             ; preds = %2369, %2366
  %2375 = phi ptr [ %2368, %2366 ], [ %2356, %2369 ]
  %2376 = phi i32 [ %2367, %2366 ], [ %2373, %2369 ]
  %2377 = zext i32 %2376 to i64
  %2378 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2377
  %2379 = load i8, ptr %2378, align 1, !tbaa !17
  %2380 = icmp eq i8 %2379, 9
  br i1 %2380, label %2381, label %2393

2381:                                             ; preds = %2374, %2355
  %2382 = phi ptr [ %2375, %2374 ], [ %2356, %2355 ]
  %2383 = load i64, ptr %2382, align 8
  %2384 = and i64 %2383, 65535
  %2385 = icmp eq i64 %2384, 14
  br i1 %2385, label %2386, label %2388

2386:                                             ; preds = %2381
  %2387 = tail call i32 @vector_type_mode(ptr noundef nonnull %2382) #24
  br label %2410

2388:                                             ; preds = %2381
  %2389 = getelementptr inbounds %struct.tree_type, ptr %2382, i64 0, i32 6
  %2390 = load i32, ptr %2389, align 4
  %2391 = lshr i32 %2390, 16
  %2392 = and i32 %2391, 255
  br label %2410

2393:                                             ; preds = %2374
  %2394 = load i64, ptr %2375, align 8
  %2395 = and i64 %2394, 65535
  %2396 = icmp eq i64 %2395, 14
  br i1 %2396, label %2397, label %2399

2397:                                             ; preds = %2393
  %2398 = tail call i32 @vector_type_mode(ptr noundef nonnull %2375) #24
  br label %2404

2399:                                             ; preds = %2393
  %2400 = getelementptr inbounds %struct.tree_type, ptr %2375, i64 0, i32 6
  %2401 = load i32, ptr %2400, align 4
  %2402 = lshr i32 %2401, 16
  %2403 = and i32 %2402, 255
  br label %2404

2404:                                             ; preds = %2399, %2397
  %2405 = phi i32 [ %2398, %2397 ], [ %2403, %2399 ]
  %2406 = zext i32 %2405 to i64
  %2407 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2406
  %2408 = load i8, ptr %2407, align 1, !tbaa !17
  %2409 = zext i8 %2408 to i32
  br label %2410

2410:                                             ; preds = %2386, %2388, %2404
  %2411 = phi i32 [ %2409, %2404 ], [ %2387, %2386 ], [ %2392, %2388 ]
  %2412 = zext i32 %2411 to i64
  %2413 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2412
  %2414 = load i8, ptr %2413, align 1, !tbaa !17
  %2415 = icmp eq i8 %2414, 9
  %2416 = load ptr, ptr %2265, align 8, !tbaa !17
  %2417 = load i64, ptr %2416, align 8
  %2418 = and i64 %2417, 65535
  %2419 = icmp eq i64 %2418, 14
  br i1 %2415, label %2420, label %2484

2420:                                             ; preds = %2410
  br i1 %2419, label %2421, label %2424

2421:                                             ; preds = %2420
  %2422 = tail call i32 @vector_type_mode(ptr noundef nonnull %2416) #24
  %2423 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2429

2424:                                             ; preds = %2420
  %2425 = getelementptr inbounds %struct.tree_type, ptr %2416, i64 0, i32 6
  %2426 = load i32, ptr %2425, align 4
  %2427 = lshr i32 %2426, 16
  %2428 = and i32 %2427, 255
  br label %2429

2429:                                             ; preds = %2424, %2421
  %2430 = phi ptr [ %2423, %2421 ], [ %2416, %2424 ]
  %2431 = phi i32 [ %2422, %2421 ], [ %2428, %2424 ]
  %2432 = zext i32 %2431 to i64
  %2433 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2432
  %2434 = load i8, ptr %2433, align 1, !tbaa !17
  %2435 = icmp eq i8 %2434, 8
  br i1 %2435, label %2455, label %2436

2436:                                             ; preds = %2429
  %2437 = load i64, ptr %2430, align 8
  %2438 = and i64 %2437, 65535
  %2439 = icmp eq i64 %2438, 14
  br i1 %2439, label %2440, label %2443

2440:                                             ; preds = %2436
  %2441 = tail call i32 @vector_type_mode(ptr noundef nonnull %2430) #24
  %2442 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2448

2443:                                             ; preds = %2436
  %2444 = getelementptr inbounds %struct.tree_type, ptr %2430, i64 0, i32 6
  %2445 = load i32, ptr %2444, align 4
  %2446 = lshr i32 %2445, 16
  %2447 = and i32 %2446, 255
  br label %2448

2448:                                             ; preds = %2443, %2440
  %2449 = phi ptr [ %2442, %2440 ], [ %2430, %2443 ]
  %2450 = phi i32 [ %2441, %2440 ], [ %2447, %2443 ]
  %2451 = zext i32 %2450 to i64
  %2452 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2451
  %2453 = load i8, ptr %2452, align 1, !tbaa !17
  %2454 = icmp eq i8 %2453, 9
  br i1 %2454, label %2455, label %2467

2455:                                             ; preds = %2448, %2429
  %2456 = phi ptr [ %2449, %2448 ], [ %2430, %2429 ]
  %2457 = load i64, ptr %2456, align 8
  %2458 = and i64 %2457, 65535
  %2459 = icmp eq i64 %2458, 14
  br i1 %2459, label %2460, label %2462

2460:                                             ; preds = %2455
  %2461 = tail call i32 @vector_type_mode(ptr noundef nonnull %2456) #24
  br label %2548

2462:                                             ; preds = %2455
  %2463 = getelementptr inbounds %struct.tree_type, ptr %2456, i64 0, i32 6
  %2464 = load i32, ptr %2463, align 4
  %2465 = lshr i32 %2464, 16
  %2466 = and i32 %2465, 255
  br label %2548

2467:                                             ; preds = %2448
  %2468 = load i64, ptr %2449, align 8
  %2469 = and i64 %2468, 65535
  %2470 = icmp eq i64 %2469, 14
  br i1 %2470, label %2471, label %2473

2471:                                             ; preds = %2467
  %2472 = tail call i32 @vector_type_mode(ptr noundef nonnull %2449) #24
  br label %2478

2473:                                             ; preds = %2467
  %2474 = getelementptr inbounds %struct.tree_type, ptr %2449, i64 0, i32 6
  %2475 = load i32, ptr %2474, align 4
  %2476 = lshr i32 %2475, 16
  %2477 = and i32 %2476, 255
  br label %2478

2478:                                             ; preds = %2473, %2471
  %2479 = phi i32 [ %2472, %2471 ], [ %2477, %2473 ]
  %2480 = zext i32 %2479 to i64
  %2481 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2480
  %2482 = load i8, ptr %2481, align 1, !tbaa !17
  %2483 = zext i8 %2482 to i32
  br label %2548

2484:                                             ; preds = %2410
  br i1 %2419, label %2485, label %2488

2485:                                             ; preds = %2484
  %2486 = tail call i32 @vector_type_mode(ptr noundef nonnull %2416) #24
  %2487 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2493

2488:                                             ; preds = %2484
  %2489 = getelementptr inbounds %struct.tree_type, ptr %2416, i64 0, i32 6
  %2490 = load i32, ptr %2489, align 4
  %2491 = lshr i32 %2490, 16
  %2492 = and i32 %2491, 255
  br label %2493

2493:                                             ; preds = %2488, %2485
  %2494 = phi ptr [ %2487, %2485 ], [ %2416, %2488 ]
  %2495 = phi i32 [ %2486, %2485 ], [ %2492, %2488 ]
  %2496 = zext i32 %2495 to i64
  %2497 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2496
  %2498 = load i8, ptr %2497, align 1, !tbaa !17
  %2499 = icmp eq i8 %2498, 8
  br i1 %2499, label %2519, label %2500

2500:                                             ; preds = %2493
  %2501 = load i64, ptr %2494, align 8
  %2502 = and i64 %2501, 65535
  %2503 = icmp eq i64 %2502, 14
  br i1 %2503, label %2504, label %2507

2504:                                             ; preds = %2500
  %2505 = tail call i32 @vector_type_mode(ptr noundef nonnull %2494) #24
  %2506 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2512

2507:                                             ; preds = %2500
  %2508 = getelementptr inbounds %struct.tree_type, ptr %2494, i64 0, i32 6
  %2509 = load i32, ptr %2508, align 4
  %2510 = lshr i32 %2509, 16
  %2511 = and i32 %2510, 255
  br label %2512

2512:                                             ; preds = %2507, %2504
  %2513 = phi ptr [ %2506, %2504 ], [ %2494, %2507 ]
  %2514 = phi i32 [ %2505, %2504 ], [ %2511, %2507 ]
  %2515 = zext i32 %2514 to i64
  %2516 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2515
  %2517 = load i8, ptr %2516, align 1, !tbaa !17
  %2518 = icmp eq i8 %2517, 9
  br i1 %2518, label %2519, label %2531

2519:                                             ; preds = %2512, %2493
  %2520 = phi ptr [ %2513, %2512 ], [ %2494, %2493 ]
  %2521 = load i64, ptr %2520, align 8
  %2522 = and i64 %2521, 65535
  %2523 = icmp eq i64 %2522, 14
  br i1 %2523, label %2524, label %2526

2524:                                             ; preds = %2519
  %2525 = tail call i32 @vector_type_mode(ptr noundef nonnull %2520) #24
  br label %2548

2526:                                             ; preds = %2519
  %2527 = getelementptr inbounds %struct.tree_type, ptr %2520, i64 0, i32 6
  %2528 = load i32, ptr %2527, align 4
  %2529 = lshr i32 %2528, 16
  %2530 = and i32 %2529, 255
  br label %2548

2531:                                             ; preds = %2512
  %2532 = load i64, ptr %2513, align 8
  %2533 = and i64 %2532, 65535
  %2534 = icmp eq i64 %2533, 14
  br i1 %2534, label %2535, label %2537

2535:                                             ; preds = %2531
  %2536 = tail call i32 @vector_type_mode(ptr noundef nonnull %2513) #24
  br label %2542

2537:                                             ; preds = %2531
  %2538 = getelementptr inbounds %struct.tree_type, ptr %2513, i64 0, i32 6
  %2539 = load i32, ptr %2538, align 4
  %2540 = lshr i32 %2539, 16
  %2541 = and i32 %2540, 255
  br label %2542

2542:                                             ; preds = %2537, %2535
  %2543 = phi i32 [ %2536, %2535 ], [ %2541, %2537 ]
  %2544 = zext i32 %2543 to i64
  %2545 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2544
  %2546 = load i8, ptr %2545, align 1, !tbaa !17
  %2547 = zext i8 %2546 to i32
  br label %2548

2548:                                             ; preds = %2542, %2526, %2524, %2478, %2462, %2460
  %2549 = phi i32 [ %2483, %2478 ], [ %2461, %2460 ], [ %2466, %2462 ], [ %2547, %2542 ], [ %2525, %2524 ], [ %2530, %2526 ]
  %2550 = add i32 %2549, -38
  %2551 = zext i32 %2550 to i64
  %2552 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2551
  %2553 = load ptr, ptr %2552, align 8, !tbaa !6
  %2554 = getelementptr inbounds %struct.real_format, ptr %2553, i64 0, i32 14
  %2555 = load i8, ptr %2554, align 1, !tbaa !37
  %2556 = icmp ne i8 %2555, 0
  %2557 = load i32, ptr @flag_signed_zeros, align 4
  %2558 = icmp ne i32 %2557, 0
  %2559 = select i1 %2556, i1 %2558, i1 false
  br i1 %2559, label %2633, label %2560

2560:                                             ; preds = %2548
  %2561 = load ptr, ptr %2265, align 8, !tbaa !17
  br label %2562

2562:                                             ; preds = %2560, %2335
  %2563 = phi ptr [ %2561, %2560 ], [ %2336, %2335 ]
  %2564 = load i64, ptr %2563, align 8
  %2565 = and i64 %2564, 65535
  %2566 = icmp eq i64 %2565, 13
  br i1 %2566, label %2567, label %2633

2567:                                             ; preds = %2562
  %2568 = getelementptr inbounds %struct.tree_common, ptr %2563, i64 0, i32 2
  %2569 = load ptr, ptr %2568, align 8, !tbaa !17
  %2570 = load i64, ptr %2569, align 8
  %2571 = and i64 %2570, 65535
  %2572 = icmp eq i64 %2571, 9
  br i1 %2572, label %2573, label %2633

2573:                                             ; preds = %2567
  %2574 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef nonnull %2569, ptr noundef nonnull %46)
  %2575 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 44, ptr noundef nonnull %2569, ptr noundef nonnull %46)
  %2576 = icmp eq ptr %2574, null
  br i1 %2576, label %2581, label %2577

2577:                                             ; preds = %2573
  %2578 = tail call i32 @real_zerop(ptr noundef nonnull %2574) #24
  %2579 = and i32 %2578, 255
  %2580 = icmp eq i32 %2579, 0
  br i1 %2580, label %2581, label %2590

2581:                                             ; preds = %2577, %2573
  %2582 = phi i32 [ %2578, %2577 ], [ 0, %2573 ]
  %2583 = icmp eq ptr %2575, null
  br i1 %2583, label %2633, label %2584

2584:                                             ; preds = %2581
  %2585 = tail call i32 @real_zerop(ptr noundef nonnull %2575) #24
  %2586 = and i32 %2585, 255
  %2587 = icmp eq i32 %2586, 0
  br i1 %2587, label %2633, label %2588

2588:                                             ; preds = %2584
  %2589 = and i32 %2582, 255
  br label %2590

2590:                                             ; preds = %2588, %2577
  %2591 = phi i32 [ %2589, %2588 ], [ %2579, %2577 ]
  %2592 = phi i32 [ %2585, %2588 ], [ 0, %2577 ]
  %2593 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef nonnull %2569, ptr noundef nonnull %45)
  %2594 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 44, ptr noundef nonnull %2569, ptr noundef nonnull %45)
  %2595 = icmp ne i32 %2591, 0
  %2596 = icmp ne ptr %2594, null
  %2597 = select i1 %2595, i1 %2596, i1 false
  br i1 %2597, label %2598, label %2614

2598:                                             ; preds = %2590
  %2599 = tail call i32 @real_zerop(ptr noundef nonnull %2594) #24
  %2600 = icmp eq i32 %2599, 0
  br i1 %2600, label %2614, label %2601

2601:                                             ; preds = %2598
  %2602 = icmp eq ptr %2593, null
  br i1 %2602, label %2603, label %2605

2603:                                             ; preds = %2601
  %2604 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef nonnull %2569, ptr noundef nonnull %45) #24
  br label %2605

2605:                                             ; preds = %2601, %2603
  %2606 = phi ptr [ %2604, %2603 ], [ %2593, %2601 ]
  %2607 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 79, ptr noundef nonnull %2569, ptr noundef %2606)
  %2608 = icmp eq ptr %2575, null
  br i1 %2608, label %2609, label %2611

2609:                                             ; preds = %2605
  %2610 = tail call ptr @build1_stat(i32 noundef 44, ptr noundef nonnull %2569, ptr noundef nonnull %46) #24
  br label %2611

2611:                                             ; preds = %2605, %2609
  %2612 = phi ptr [ %2610, %2609 ], [ %2575, %2605 ]
  %2613 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %2607, ptr noundef %2612)
  br label %14075

2614:                                             ; preds = %2598, %2590
  %2615 = and i32 %2592, 255
  %2616 = icmp ne i32 %2615, 0
  %2617 = icmp ne ptr %2593, null
  %2618 = select i1 %2616, i1 %2617, i1 false
  br i1 %2618, label %2619, label %2633

2619:                                             ; preds = %2614
  %2620 = tail call i32 @real_zerop(ptr noundef nonnull %2593) #24
  %2621 = icmp eq i32 %2620, 0
  br i1 %2621, label %2633, label %2622

2622:                                             ; preds = %2619
  br i1 %2576, label %2623, label %2625

2623:                                             ; preds = %2622
  %2624 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef nonnull %2569, ptr noundef nonnull %46) #24
  br label %2625

2625:                                             ; preds = %2622, %2623
  %2626 = phi ptr [ %2624, %2623 ], [ %2574, %2622 ]
  br i1 %2596, label %2629, label %2627

2627:                                             ; preds = %2625
  %2628 = tail call ptr @build1_stat(i32 noundef 44, ptr noundef nonnull %2569, ptr noundef nonnull %45) #24
  br label %2629

2629:                                             ; preds = %2625, %2627
  %2630 = phi ptr [ %2628, %2627 ], [ %2594, %2625 ]
  %2631 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 79, ptr noundef nonnull %2569, ptr noundef %2630)
  %2632 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %2626, ptr noundef %2631)
  br label %14075

2633:                                             ; preds = %2619, %2614, %2581, %2584, %2548, %2252, %2567, %2562
  %2634 = load i64, ptr %2, align 8
  %2635 = trunc i64 %2634 to i16
  switch i16 %2635, label %2921 [
    i16 9, label %2642
    i16 13, label %2636
    i16 14, label %2636
  ]

2636:                                             ; preds = %2633, %2633
  %2637 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %2638 = load ptr, ptr %2637, align 8, !tbaa !17
  %2639 = load i64, ptr %2638, align 8
  %2640 = and i64 %2639, 65535
  %2641 = icmp eq i64 %2640, 9
  br i1 %2641, label %2642, label %2921

2642:                                             ; preds = %2633, %2636
  %2643 = and i64 %2634, 65535
  %2644 = icmp eq i64 %2643, 14
  br i1 %2644, label %2645, label %2648

2645:                                             ; preds = %2642
  %2646 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2647 = load i64, ptr %2, align 8
  br label %2653

2648:                                             ; preds = %2642
  %2649 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2650 = load i32, ptr %2649, align 4
  %2651 = lshr i32 %2650, 16
  %2652 = and i32 %2651, 255
  br label %2653

2653:                                             ; preds = %2648, %2645
  %2654 = phi i64 [ %2647, %2645 ], [ %2634, %2648 ]
  %2655 = phi i32 [ %2646, %2645 ], [ %2652, %2648 ]
  %2656 = zext i32 %2655 to i64
  %2657 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2656
  %2658 = load i8, ptr %2657, align 1, !tbaa !17
  %2659 = icmp eq i8 %2658, 8
  br i1 %2659, label %2714, label %2660

2660:                                             ; preds = %2653
  %2661 = and i64 %2654, 65535
  %2662 = icmp eq i64 %2661, 14
  br i1 %2662, label %2663, label %2666

2663:                                             ; preds = %2660
  %2664 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2665 = load i64, ptr %2, align 8
  br label %2671

2666:                                             ; preds = %2660
  %2667 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2668 = load i32, ptr %2667, align 4
  %2669 = lshr i32 %2668, 16
  %2670 = and i32 %2669, 255
  br label %2671

2671:                                             ; preds = %2666, %2663
  %2672 = phi i64 [ %2665, %2663 ], [ %2654, %2666 ]
  %2673 = phi i32 [ %2664, %2663 ], [ %2670, %2666 ]
  %2674 = zext i32 %2673 to i64
  %2675 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2674
  %2676 = load i8, ptr %2675, align 1, !tbaa !17
  %2677 = icmp eq i8 %2676, 9
  br i1 %2677, label %2714, label %2678

2678:                                             ; preds = %2671
  %2679 = and i64 %2672, 65535
  %2680 = icmp eq i64 %2679, 14
  br i1 %2680, label %2681, label %2684

2681:                                             ; preds = %2678
  %2682 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2683 = load i64, ptr %2, align 8
  br label %2689

2684:                                             ; preds = %2678
  %2685 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2686 = load i32, ptr %2685, align 4
  %2687 = lshr i32 %2686, 16
  %2688 = and i32 %2687, 255
  br label %2689

2689:                                             ; preds = %2684, %2681
  %2690 = phi i64 [ %2683, %2681 ], [ %2672, %2684 ]
  %2691 = phi i32 [ %2682, %2681 ], [ %2688, %2684 ]
  %2692 = zext i32 %2691 to i64
  %2693 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2692
  %2694 = load i8, ptr %2693, align 1, !tbaa !17
  %2695 = icmp eq i8 %2694, 11
  br i1 %2695, label %2714, label %2696

2696:                                             ; preds = %2689
  %2697 = and i64 %2690, 65535
  %2698 = icmp eq i64 %2697, 14
  br i1 %2698, label %2699, label %2701

2699:                                             ; preds = %2696
  %2700 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2706

2701:                                             ; preds = %2696
  %2702 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2703 = load i32, ptr %2702, align 4
  %2704 = lshr i32 %2703, 16
  %2705 = and i32 %2704, 255
  br label %2706

2706:                                             ; preds = %2701, %2699
  %2707 = phi i32 [ %2700, %2699 ], [ %2705, %2701 ]
  %2708 = zext i32 %2707 to i64
  %2709 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2708
  %2710 = load i8, ptr %2709, align 1, !tbaa !17
  %2711 = icmp eq i8 %2710, 17
  br i1 %2711, label %2712, label %2921

2712:                                             ; preds = %2706
  %2713 = load i64, ptr %2, align 8
  br label %2714

2714:                                             ; preds = %2712, %2689, %2671, %2653
  %2715 = phi i64 [ %2713, %2712 ], [ %2690, %2689 ], [ %2672, %2671 ], [ %2654, %2653 ]
  %2716 = and i64 %2715, 65535
  %2717 = icmp eq i64 %2716, 14
  br i1 %2717, label %2718, label %2721

2718:                                             ; preds = %2714
  %2719 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2720 = load i64, ptr %2, align 8
  br label %2726

2721:                                             ; preds = %2714
  %2722 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2723 = load i32, ptr %2722, align 4
  %2724 = lshr i32 %2723, 16
  %2725 = and i32 %2724, 255
  br label %2726

2726:                                             ; preds = %2721, %2718
  %2727 = phi i64 [ %2720, %2718 ], [ %2715, %2721 ]
  %2728 = phi i32 [ %2719, %2718 ], [ %2725, %2721 ]
  %2729 = zext i32 %2728 to i64
  %2730 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2729
  %2731 = load i8, ptr %2730, align 1, !tbaa !17
  %2732 = icmp eq i8 %2731, 8
  br i1 %2732, label %2751, label %2733

2733:                                             ; preds = %2726
  %2734 = and i64 %2727, 65535
  %2735 = icmp eq i64 %2734, 14
  br i1 %2735, label %2736, label %2739

2736:                                             ; preds = %2733
  %2737 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2738 = load i64, ptr %2, align 8
  br label %2744

2739:                                             ; preds = %2733
  %2740 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2741 = load i32, ptr %2740, align 4
  %2742 = lshr i32 %2741, 16
  %2743 = and i32 %2742, 255
  br label %2744

2744:                                             ; preds = %2739, %2736
  %2745 = phi i64 [ %2738, %2736 ], [ %2727, %2739 ]
  %2746 = phi i32 [ %2737, %2736 ], [ %2743, %2739 ]
  %2747 = zext i32 %2746 to i64
  %2748 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2747
  %2749 = load i8, ptr %2748, align 1, !tbaa !17
  %2750 = icmp eq i8 %2749, 9
  br i1 %2750, label %2751, label %2762

2751:                                             ; preds = %2744, %2726
  %2752 = phi i64 [ %2745, %2744 ], [ %2727, %2726 ]
  %2753 = and i64 %2752, 65535
  %2754 = icmp eq i64 %2753, 14
  br i1 %2754, label %2755, label %2757

2755:                                             ; preds = %2751
  %2756 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2778

2757:                                             ; preds = %2751
  %2758 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2759 = load i32, ptr %2758, align 4
  %2760 = lshr i32 %2759, 16
  %2761 = and i32 %2760, 255
  br label %2778

2762:                                             ; preds = %2744
  %2763 = and i64 %2745, 65535
  %2764 = icmp eq i64 %2763, 14
  br i1 %2764, label %2765, label %2767

2765:                                             ; preds = %2762
  %2766 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2772

2767:                                             ; preds = %2762
  %2768 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2769 = load i32, ptr %2768, align 4
  %2770 = lshr i32 %2769, 16
  %2771 = and i32 %2770, 255
  br label %2772

2772:                                             ; preds = %2767, %2765
  %2773 = phi i32 [ %2766, %2765 ], [ %2771, %2767 ]
  %2774 = zext i32 %2773 to i64
  %2775 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2774
  %2776 = load i8, ptr %2775, align 1, !tbaa !17
  %2777 = zext i8 %2776 to i32
  br label %2778

2778:                                             ; preds = %2755, %2757, %2772
  %2779 = phi i32 [ %2777, %2772 ], [ %2756, %2755 ], [ %2761, %2757 ]
  %2780 = zext i32 %2779 to i64
  %2781 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2780
  %2782 = load i8, ptr %2781, align 1, !tbaa !17
  %2783 = icmp eq i8 %2782, 9
  %2784 = load i64, ptr %2, align 8
  %2785 = and i64 %2784, 65535
  %2786 = icmp eq i64 %2785, 14
  br i1 %2783, label %2787, label %2848

2787:                                             ; preds = %2778
  br i1 %2786, label %2788, label %2791

2788:                                             ; preds = %2787
  %2789 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2790 = load i64, ptr %2, align 8
  br label %2796

2791:                                             ; preds = %2787
  %2792 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2793 = load i32, ptr %2792, align 4
  %2794 = lshr i32 %2793, 16
  %2795 = and i32 %2794, 255
  br label %2796

2796:                                             ; preds = %2791, %2788
  %2797 = phi i64 [ %2790, %2788 ], [ %2784, %2791 ]
  %2798 = phi i32 [ %2789, %2788 ], [ %2795, %2791 ]
  %2799 = zext i32 %2798 to i64
  %2800 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2799
  %2801 = load i8, ptr %2800, align 1, !tbaa !17
  %2802 = icmp eq i8 %2801, 8
  br i1 %2802, label %2821, label %2803

2803:                                             ; preds = %2796
  %2804 = and i64 %2797, 65535
  %2805 = icmp eq i64 %2804, 14
  br i1 %2805, label %2806, label %2809

2806:                                             ; preds = %2803
  %2807 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2808 = load i64, ptr %2, align 8
  br label %2814

2809:                                             ; preds = %2803
  %2810 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2811 = load i32, ptr %2810, align 4
  %2812 = lshr i32 %2811, 16
  %2813 = and i32 %2812, 255
  br label %2814

2814:                                             ; preds = %2809, %2806
  %2815 = phi i64 [ %2808, %2806 ], [ %2797, %2809 ]
  %2816 = phi i32 [ %2807, %2806 ], [ %2813, %2809 ]
  %2817 = zext i32 %2816 to i64
  %2818 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2817
  %2819 = load i8, ptr %2818, align 1, !tbaa !17
  %2820 = icmp eq i8 %2819, 9
  br i1 %2820, label %2821, label %2832

2821:                                             ; preds = %2814, %2796
  %2822 = phi i64 [ %2815, %2814 ], [ %2797, %2796 ]
  %2823 = and i64 %2822, 65535
  %2824 = icmp eq i64 %2823, 14
  br i1 %2824, label %2825, label %2827

2825:                                             ; preds = %2821
  %2826 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2909

2827:                                             ; preds = %2821
  %2828 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2829 = load i32, ptr %2828, align 4
  %2830 = lshr i32 %2829, 16
  %2831 = and i32 %2830, 255
  br label %2909

2832:                                             ; preds = %2814
  %2833 = and i64 %2815, 65535
  %2834 = icmp eq i64 %2833, 14
  br i1 %2834, label %2835, label %2837

2835:                                             ; preds = %2832
  %2836 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2842

2837:                                             ; preds = %2832
  %2838 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2839 = load i32, ptr %2838, align 4
  %2840 = lshr i32 %2839, 16
  %2841 = and i32 %2840, 255
  br label %2842

2842:                                             ; preds = %2837, %2835
  %2843 = phi i32 [ %2836, %2835 ], [ %2841, %2837 ]
  %2844 = zext i32 %2843 to i64
  %2845 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2844
  %2846 = load i8, ptr %2845, align 1, !tbaa !17
  %2847 = zext i8 %2846 to i32
  br label %2909

2848:                                             ; preds = %2778
  br i1 %2786, label %2849, label %2852

2849:                                             ; preds = %2848
  %2850 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2851 = load i64, ptr %2, align 8
  br label %2857

2852:                                             ; preds = %2848
  %2853 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2854 = load i32, ptr %2853, align 4
  %2855 = lshr i32 %2854, 16
  %2856 = and i32 %2855, 255
  br label %2857

2857:                                             ; preds = %2852, %2849
  %2858 = phi i64 [ %2851, %2849 ], [ %2784, %2852 ]
  %2859 = phi i32 [ %2850, %2849 ], [ %2856, %2852 ]
  %2860 = zext i32 %2859 to i64
  %2861 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2860
  %2862 = load i8, ptr %2861, align 1, !tbaa !17
  %2863 = icmp eq i8 %2862, 8
  br i1 %2863, label %2882, label %2864

2864:                                             ; preds = %2857
  %2865 = and i64 %2858, 65535
  %2866 = icmp eq i64 %2865, 14
  br i1 %2866, label %2867, label %2870

2867:                                             ; preds = %2864
  %2868 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %2869 = load i64, ptr %2, align 8
  br label %2875

2870:                                             ; preds = %2864
  %2871 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2872 = load i32, ptr %2871, align 4
  %2873 = lshr i32 %2872, 16
  %2874 = and i32 %2873, 255
  br label %2875

2875:                                             ; preds = %2870, %2867
  %2876 = phi i64 [ %2869, %2867 ], [ %2858, %2870 ]
  %2877 = phi i32 [ %2868, %2867 ], [ %2874, %2870 ]
  %2878 = zext i32 %2877 to i64
  %2879 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2878
  %2880 = load i8, ptr %2879, align 1, !tbaa !17
  %2881 = icmp eq i8 %2880, 9
  br i1 %2881, label %2882, label %2893

2882:                                             ; preds = %2875, %2857
  %2883 = phi i64 [ %2876, %2875 ], [ %2858, %2857 ]
  %2884 = and i64 %2883, 65535
  %2885 = icmp eq i64 %2884, 14
  br i1 %2885, label %2886, label %2888

2886:                                             ; preds = %2882
  %2887 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2909

2888:                                             ; preds = %2882
  %2889 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2890 = load i32, ptr %2889, align 4
  %2891 = lshr i32 %2890, 16
  %2892 = and i32 %2891, 255
  br label %2909

2893:                                             ; preds = %2875
  %2894 = and i64 %2876, 65535
  %2895 = icmp eq i64 %2894, 14
  br i1 %2895, label %2896, label %2898

2896:                                             ; preds = %2893
  %2897 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %2903

2898:                                             ; preds = %2893
  %2899 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %2900 = load i32, ptr %2899, align 4
  %2901 = lshr i32 %2900, 16
  %2902 = and i32 %2901, 255
  br label %2903

2903:                                             ; preds = %2898, %2896
  %2904 = phi i32 [ %2897, %2896 ], [ %2902, %2898 ]
  %2905 = zext i32 %2904 to i64
  %2906 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2905
  %2907 = load i8, ptr %2906, align 1, !tbaa !17
  %2908 = zext i8 %2907 to i32
  br label %2909

2909:                                             ; preds = %2903, %2888, %2886, %2842, %2827, %2825
  %2910 = phi i32 [ %2847, %2842 ], [ %2826, %2825 ], [ %2831, %2827 ], [ %2908, %2903 ], [ %2887, %2886 ], [ %2892, %2888 ]
  %2911 = add i32 %2910, -38
  %2912 = zext i32 %2911 to i64
  %2913 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2912
  %2914 = load ptr, ptr %2913, align 8, !tbaa !6
  %2915 = getelementptr inbounds %struct.real_format, ptr %2914, i64 0, i32 11
  %2916 = load i8, ptr %2915, align 2, !tbaa !36
  %2917 = icmp eq i8 %2916, 0
  %2918 = load i32, ptr @flag_finite_math_only, align 4
  %2919 = icmp ne i32 %2918, 0
  %2920 = select i1 %2917, i1 true, i1 %2919
  br i1 %2920, label %2921, label %2927

2921:                                             ; preds = %2633, %2909, %2706, %2636
  %2922 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %2923 = icmp eq i32 %2922, 0
  br i1 %2923, label %2927, label %2924

2924:                                             ; preds = %2921
  %2925 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %2926 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %2925)
  br label %14075

2927:                                             ; preds = %2909, %2921
  %2928 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %45)
  %2929 = icmp eq i8 %2928, 0
  br i1 %2929, label %2961, label %2930

2930:                                             ; preds = %2927
  %2931 = load i64, ptr %2, align 8
  %2932 = trunc i64 %2931 to i16
  switch i16 %2932, label %2950 [
    i16 9, label %2939
    i16 13, label %2933
    i16 14, label %2933
  ]

2933:                                             ; preds = %2930, %2930
  %2934 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %2935 = load ptr, ptr %2934, align 8, !tbaa !17
  %2936 = load i64, ptr %2935, align 8
  %2937 = and i64 %2936, 65535
  %2938 = icmp eq i64 %2937, 9
  br i1 %2938, label %2939, label %2950

2939:                                             ; preds = %2930, %2933
  %2940 = load i64, ptr %45, align 8
  %2941 = and i64 %2940, 65535
  %2942 = icmp eq i64 %2941, 24
  br i1 %2942, label %2943, label %2956

2943:                                             ; preds = %2939
  %2944 = getelementptr inbounds %struct.tree_real_cst, ptr %45, i64 0, i32 1
  %2945 = load ptr, ptr %2944, align 8, !tbaa !17
  %2946 = tail call zeroext i8 @real_isneg(ptr noundef %2945) #24
  %2947 = icmp eq i8 %2946, 0
  br i1 %2947, label %2948, label %2956

2948:                                             ; preds = %2943
  %2949 = load i64, ptr %2, align 8
  br label %2950

2950:                                             ; preds = %2948, %2930, %2933
  %2951 = phi i64 [ %2949, %2948 ], [ %2931, %2930 ], [ %2931, %2933 ]
  %2952 = trunc i64 %2951 to i32
  %2953 = and i32 %2952, 65535
  %2954 = add nsw i32 %2953, -6
  %2955 = icmp ult i32 %2954, 3
  br i1 %2955, label %2956, label %2961

2956:                                             ; preds = %2950, %2943, %2939
  %2957 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %2958 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %2959 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %2958)
  %2960 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %2957, ptr noundef %2959)
  br label %14075

2961:                                             ; preds = %2950, %2927
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #24
  %2962 = load i64, ptr %46, align 8
  %2963 = and i64 %2962, 65535
  %2964 = icmp eq i64 %2963, 121
  br i1 %2964, label %2969, label %2965

2965:                                             ; preds = %2961
  %2966 = load i64, ptr %45, align 8
  %2967 = and i64 %2966, 65535
  %2968 = icmp eq i64 %2967, 121
  br i1 %2968, label %2969, label %2977

2969:                                             ; preds = %2965, %2961
  %2970 = call zeroext i8 @ptr_difference_const(ptr noundef nonnull %46, ptr noundef nonnull %45, ptr noundef nonnull %13), !range !40
  %2971 = icmp eq i8 %2970, 0
  br i1 %2971, label %2972, label %2974

2972:                                             ; preds = %2969
  %2973 = load i64, ptr %46, align 8
  br label %2977

2974:                                             ; preds = %2969
  %2975 = load i64, ptr %13, align 8, !tbaa !24
  %2976 = tail call ptr @build_int_cst_type(ptr noundef nonnull %2, i64 noundef %2975) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #24
  br label %14075

2977:                                             ; preds = %2972, %2965
  %2978 = phi i64 [ %2973, %2972 ], [ %2962, %2965 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #24
  %2979 = and i64 %2978, 65535
  %2980 = icmp eq i64 %2979, 121
  br i1 %2980, label %2981, label %3015

2981:                                             ; preds = %2977
  %2982 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %2983 = load ptr, ptr %2982, align 8, !tbaa !17
  %2984 = load i64, ptr %2983, align 8
  %2985 = and i64 %2984, 65535
  %2986 = icmp eq i64 %2985, 45
  br i1 %2986, label %2987, label %3015

2987:                                             ; preds = %2981
  %2988 = load i64, ptr %45, align 8
  %2989 = and i64 %2988, 65535
  %2990 = icmp eq i64 %2989, 121
  br i1 %2990, label %2991, label %3015

2991:                                             ; preds = %2987
  %2992 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %2993 = load ptr, ptr %2992, align 8, !tbaa !17
  %2994 = load i64, ptr %2993, align 8
  %2995 = and i64 %2994, 65535
  %2996 = icmp eq i64 %2995, 45
  br i1 %2996, label %2997, label %3015

2997:                                             ; preds = %2991
  %2998 = getelementptr inbounds %struct.tree_exp, ptr %2983, i64 0, i32 3
  %2999 = load ptr, ptr %2998, align 8, !tbaa !17
  %3000 = getelementptr inbounds %struct.tree_exp, ptr %2993, i64 0, i32 3
  %3001 = load ptr, ptr %3000, align 8, !tbaa !17
  %3002 = tail call i32 @operand_equal_p(ptr noundef %2999, ptr noundef %3001, i32 noundef 0)
  %3003 = icmp eq i32 %3002, 0
  br i1 %3003, label %3015, label %3004

3004:                                             ; preds = %2997
  %3005 = getelementptr inbounds %struct.tree_exp, ptr %2983, i64 1
  %3006 = load ptr, ptr %3005, align 8, !tbaa !17
  %3007 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3006)
  %3008 = getelementptr inbounds %struct.tree_exp, ptr %2993, i64 1
  %3009 = load ptr, ptr %3008, align 8, !tbaa !17
  %3010 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3009)
  %3011 = tail call ptr @array_ref_element_size(ptr noundef nonnull %2983) #24
  %3012 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef nonnull %2, ptr noundef %3007, ptr noundef %3010) #24
  %3013 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3011)
  %3014 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %3012, ptr noundef %3013)
  br label %14075

3015:                                             ; preds = %2997, %2991, %2987, %2981, %2977
  %3016 = load i64, ptr %2, align 8
  %3017 = trunc i64 %3016 to i16
  switch i16 %3017, label %3039 [
    i16 9, label %3027
    i16 13, label %3018
    i16 14, label %3018
  ]

3018:                                             ; preds = %3015, %3015
  %3019 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %3020 = load ptr, ptr %3019, align 8, !tbaa !17
  %3021 = load i64, ptr %3020, align 8
  %3022 = and i64 %3021, 65535
  %3023 = icmp eq i64 %3022, 9
  %3024 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %3025 = icmp ne i32 %3024, 0
  %3026 = select i1 %3023, i1 %3025, i1 false
  br i1 %3026, label %3030, label %3039

3027:                                             ; preds = %3015
  %3028 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %3029 = icmp eq i32 %3028, 0
  br i1 %3029, label %3039, label %3030

3030:                                             ; preds = %3018, %3027
  %3031 = load i64, ptr %46, align 8
  %3032 = trunc i64 %3031 to i16
  switch i16 %3032, label %3039 [
    i16 75, label %3033
    i16 65, label %3033
  ]

3033:                                             ; preds = %3030, %3030
  %3034 = load i64, ptr %45, align 8
  %3035 = trunc i64 %3034 to i16
  switch i16 %3035, label %3039 [
    i16 75, label %3036
    i16 65, label %3036
  ]

3036:                                             ; preds = %3033, %3033
  %3037 = tail call fastcc ptr @distribute_real_division(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %3038 = icmp eq ptr %3037, null
  br i1 %3038, label %3039, label %14075

3039:                                             ; preds = %3033, %3030, %3015, %3036, %3027, %3018
  %3040 = load i64, ptr %46, align 8
  %3041 = and i64 %3040, 65535
  %3042 = icmp eq i64 %3041, 65
  br i1 %3042, label %3047, label %3043

3043:                                             ; preds = %3039
  %3044 = load i64, ptr %45, align 8
  %3045 = and i64 %3044, 65535
  %3046 = icmp eq i64 %3045, 65
  br i1 %3046, label %3047, label %1572

3047:                                             ; preds = %3043, %3039
  %3048 = load i64, ptr %2, align 8
  %3049 = and i64 %3048, 2147483648
  %3050 = icmp eq i64 %3049, 0
  br i1 %3050, label %3051, label %1572

3051:                                             ; preds = %3047
  %3052 = trunc i64 %3048 to i16
  switch i16 %3052, label %3065 [
    i16 9, label %3062
    i16 13, label %3053
    i16 14, label %3053
  ]

3053:                                             ; preds = %3051, %3051
  %3054 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %3055 = load ptr, ptr %3054, align 8, !tbaa !17
  %3056 = load i64, ptr %3055, align 8
  %3057 = and i64 %3056, 65535
  %3058 = icmp ne i64 %3057, 9
  %3059 = load i32, ptr @flag_associative_math, align 4
  %3060 = icmp ne i32 %3059, 0
  %3061 = select i1 %3058, i1 true, i1 %3060
  br i1 %3061, label %3065, label %1572

3062:                                             ; preds = %3051
  %3063 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %3064 = icmp eq i32 %3063, 0
  br i1 %3064, label %1572, label %3065

3065:                                             ; preds = %3051, %3062, %3053
  %3066 = tail call fastcc ptr @fold_plusminus_mult_expr(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %3067 = icmp eq ptr %3066, null
  br i1 %3067, label %1572, label %14075

3068:                                             ; preds = %305
  %3069 = load i64, ptr %46, align 8
  %3070 = and i64 %3069, 65535
  %3071 = icmp eq i64 %3070, 79
  br i1 %3071, label %3072, label %3082

3072:                                             ; preds = %3068
  %3073 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %45)
  %3074 = icmp eq i8 %3073, 0
  br i1 %3074, label %3082, label %3075

3075:                                             ; preds = %3072
  %3076 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %3077 = load ptr, ptr %3076, align 8, !tbaa !17
  %3078 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %3077)
  %3079 = tail call fastcc ptr @negate_expr(ptr noundef %45)
  %3080 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %3079)
  %3081 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %3078, ptr noundef %3080)
  br label %14075

3082:                                             ; preds = %3072, %3068
  %3083 = load i64, ptr %45, align 8
  %3084 = and i64 %3083, 65535
  %3085 = icmp eq i64 %3084, 79
  br i1 %3085, label %3086, label %3096

3086:                                             ; preds = %3082
  %3087 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %46)
  %3088 = icmp eq i8 %3087, 0
  br i1 %3088, label %3096, label %3089

3089:                                             ; preds = %3086
  %3090 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %3091 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %3090)
  %3092 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %3093 = load ptr, ptr %3092, align 8, !tbaa !17
  %3094 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %3093)
  %3095 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %3091, ptr noundef %3094)
  br label %14075

3096:                                             ; preds = %3086, %3082
  %3097 = load i64, ptr %2, align 8
  %3098 = trunc i64 %3097 to i16
  switch i16 %3098, label %3105 [
    i16 9, label %3236
    i16 13, label %3099
    i16 14, label %3099
  ]

3099:                                             ; preds = %3096, %3096
  %3100 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %3101 = load ptr, ptr %3100, align 8, !tbaa !17
  %3102 = load i64, ptr %3101, align 8
  %3103 = and i64 %3102, 65535
  %3104 = icmp eq i64 %3103, 9
  br i1 %3104, label %3236, label %3105

3105:                                             ; preds = %3096, %3099
  %3106 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %3107 = icmp eq i32 %3106, 0
  br i1 %3107, label %3110, label %3108

3108:                                             ; preds = %3105
  %3109 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45, ptr noundef nonnull %46)
  br label %14075

3110:                                             ; preds = %3105
  %3111 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %3112 = icmp eq i32 %3111, 0
  br i1 %3112, label %3116, label %3113

3113:                                             ; preds = %3110
  %3114 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %3115 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %3114)
  br label %14075

3116:                                             ; preds = %3110
  %3117 = tail call i32 @integer_all_onesp(ptr noundef nonnull %45) #24
  %3118 = icmp eq i32 %3117, 0
  br i1 %3118, label %3122, label %3119

3119:                                             ; preds = %3116
  %3120 = tail call fastcc ptr @negate_expr(ptr noundef %3)
  %3121 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3120)
  br label %14075

3122:                                             ; preds = %3116
  %3123 = load i64, ptr %45, align 8
  %3124 = and i64 %3123, 65535
  %3125 = icmp eq i64 %3124, 23
  br i1 %3125, label %3126, label %3143

3126:                                             ; preds = %3122
  %3127 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %45) #24
  %3128 = icmp eq i32 %3127, -1
  br i1 %3128, label %3129, label %3143

3129:                                             ; preds = %3126
  %3130 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %46)
  %3131 = icmp eq i8 %3130, 0
  br i1 %3131, label %3143, label %3132

3132:                                             ; preds = %3129
  %3133 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %3134 = icmp eq ptr %3133, %45
  br i1 %3134, label %3143, label %3135

3135:                                             ; preds = %3132
  %3136 = load i64, ptr %3133, align 8
  %3137 = and i64 %3136, 134217728
  %3138 = icmp eq i64 %3137, 0
  br i1 %3138, label %3139, label %3143

3139:                                             ; preds = %3135
  %3140 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %3141 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3140)
  %3142 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %3141, ptr noundef nonnull %3133)
  br label %14075

3143:                                             ; preds = %3135, %3132, %3129, %3126, %3122
  %3144 = load i64, ptr %45, align 8
  %3145 = and i64 %3144, 65535
  %3146 = icmp eq i64 %3145, 83
  br i1 %3146, label %3147, label %3156

3147:                                             ; preds = %3143
  %3148 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %3149 = load ptr, ptr %3148, align 8, !tbaa !17
  %3150 = tail call i32 @integer_onep(ptr noundef %3149) #24
  %3151 = icmp eq i32 %3150, 0
  br i1 %3151, label %3156, label %3152

3152:                                             ; preds = %3147
  %3153 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %3154 = load ptr, ptr %3153, align 8, !tbaa !17
  %3155 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 83, ptr noundef nonnull %2, ptr noundef %3, ptr noundef %3154)
  br label %14075

3156:                                             ; preds = %3147, %3143
  %3157 = load i64, ptr %46, align 8
  %3158 = and i64 %3157, 65535
  %3159 = icmp eq i64 %3158, 83
  br i1 %3159, label %3160, label %3171

3160:                                             ; preds = %3156
  %3161 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %3162 = load ptr, ptr %3161, align 8, !tbaa !17
  %3163 = tail call i32 @integer_onep(ptr noundef %3162) #24
  %3164 = icmp eq i32 %3163, 0
  br i1 %3164, label %3165, label %3167

3165:                                             ; preds = %3160
  %3166 = load i64, ptr %46, align 8
  br label %3171

3167:                                             ; preds = %3160
  %3168 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %3169 = load ptr, ptr %3168, align 8, !tbaa !17
  %3170 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 83, ptr noundef nonnull %2, ptr noundef %4, ptr noundef %3169)
  br label %14075

3171:                                             ; preds = %3165, %3156
  %3172 = phi i64 [ %3166, %3165 ], [ %3157, %3156 ]
  %3173 = and i64 %3172, 65535
  %3174 = icmp eq i64 %3173, 63
  %3175 = load i64, ptr %45, align 8
  %3176 = and i64 %3175, 65535
  %3177 = icmp eq i64 %3176, 23
  %3178 = select i1 %3174, i1 %3177, i1 false
  br i1 %3178, label %3179, label %3195

3179:                                             ; preds = %3171
  %3180 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %3181 = load ptr, ptr %3180, align 8, !tbaa !17
  %3182 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %3183 = load ptr, ptr %3182, align 8, !tbaa !17
  %3184 = tail call i32 @operand_equal_p(ptr noundef %3181, ptr noundef %3183, i32 noundef 0)
  %3185 = icmp eq i32 %3184, 0
  br i1 %3185, label %3186, label %3188

3186:                                             ; preds = %3179
  %3187 = load i64, ptr %45, align 8
  br label %3195

3188:                                             ; preds = %3179
  %3189 = load ptr, ptr %3180, align 8, !tbaa !17
  %3190 = load ptr, ptr %3182, align 8, !tbaa !17
  %3191 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %3189, ptr noundef %3190)
  %3192 = tail call ptr @build_int_cst(ptr noundef nonnull %2, i64 noundef 2) #24
  %3193 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %3192, ptr noundef nonnull %45)
  %3194 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %3191, ptr noundef %3193)
  br label %14075

3195:                                             ; preds = %3186, %3171
  %3196 = phi i64 [ %3187, %3186 ], [ %3175, %3171 ]
  store i8 0, ptr %6, align 1, !tbaa !17
  %3197 = and i64 %3196, 65535
  %3198 = icmp eq i64 %3197, 23
  br i1 %3198, label %3199, label %3214

3199:                                             ; preds = %3195
  %3200 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %3201 = icmp sgt i32 %3200, 3
  br i1 %3201, label %3214, label %3202

3202:                                             ; preds = %3199
  %3203 = add nsw i32 %3200, 1
  store i32 %3203, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %3204 = call fastcc ptr @extract_muldiv_1(ptr noundef %3, ptr noundef nonnull %45, i32 noundef 65, ptr noundef null, ptr noundef nonnull %6)
  %3205 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %3206 = add nsw i32 %3205, -1
  store i32 %3206, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %3207 = icmp eq ptr %3204, null
  br i1 %3207, label %3214, label %3208

3208:                                             ; preds = %3202
  %3209 = load i8, ptr %6, align 1, !tbaa !17
  %3210 = icmp eq i8 %3209, 0
  br i1 %3210, label %3212, label %3211

3211:                                             ; preds = %3208
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.4, i32 noundef 4)
  br label %3212

3212:                                             ; preds = %3211, %3208
  %3213 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %3204)
  br label %14075

3214:                                             ; preds = %3199, %3202, %3195
  %3215 = load i64, ptr %46, align 8
  %3216 = and i64 %3215, 65535
  %3217 = icmp eq i64 %3216, 124
  br i1 %3217, label %3218, label %3225

3218:                                             ; preds = %3214
  %3219 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %3220 = load ptr, ptr %3219, align 8, !tbaa !17
  %3221 = call i32 @operand_equal_p(ptr noundef %3220, ptr noundef nonnull %45, i32 noundef 0)
  %3222 = icmp eq i32 %3221, 0
  br i1 %3222, label %3225, label %3223

3223:                                             ; preds = %3218
  %3224 = call fastcc ptr @fold_mult_zconjz(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45)
  br label %14075

3225:                                             ; preds = %3218, %3214
  %3226 = load i64, ptr %45, align 8
  %3227 = and i64 %3226, 65535
  %3228 = icmp eq i64 %3227, 124
  br i1 %3228, label %3229, label %1572

3229:                                             ; preds = %3225
  %3230 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %3231 = load ptr, ptr %3230, align 8, !tbaa !17
  %3232 = call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %3231, i32 noundef 0)
  %3233 = icmp eq i32 %3232, 0
  br i1 %3233, label %1572, label %3234

3234:                                             ; preds = %3229
  %3235 = call fastcc ptr @fold_mult_zconjz(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  br label %14075

3236:                                             ; preds = %3096, %3099
  %3237 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %3238 = load ptr, ptr %3237, align 8, !tbaa !17
  %3239 = load i64, ptr %3238, align 8
  %3240 = and i64 %3239, 65535
  %3241 = icmp eq i64 %3240, 14
  br i1 %3241, label %3242, label %3245

3242:                                             ; preds = %3236
  %3243 = tail call i32 @vector_type_mode(ptr noundef nonnull %3238) #24
  %3244 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3250

3245:                                             ; preds = %3236
  %3246 = getelementptr inbounds %struct.tree_type, ptr %3238, i64 0, i32 6
  %3247 = load i32, ptr %3246, align 4
  %3248 = lshr i32 %3247, 16
  %3249 = and i32 %3248, 255
  br label %3250

3250:                                             ; preds = %3245, %3242
  %3251 = phi ptr [ %3244, %3242 ], [ %3238, %3245 ]
  %3252 = phi i32 [ %3243, %3242 ], [ %3249, %3245 ]
  %3253 = zext i32 %3252 to i64
  %3254 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3253
  %3255 = load i8, ptr %3254, align 1, !tbaa !17
  %3256 = icmp eq i8 %3255, 8
  br i1 %3256, label %3314, label %3257

3257:                                             ; preds = %3250
  %3258 = load i64, ptr %3251, align 8
  %3259 = and i64 %3258, 65535
  %3260 = icmp eq i64 %3259, 14
  br i1 %3260, label %3261, label %3264

3261:                                             ; preds = %3257
  %3262 = tail call i32 @vector_type_mode(ptr noundef nonnull %3251) #24
  %3263 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3269

3264:                                             ; preds = %3257
  %3265 = getelementptr inbounds %struct.tree_type, ptr %3251, i64 0, i32 6
  %3266 = load i32, ptr %3265, align 4
  %3267 = lshr i32 %3266, 16
  %3268 = and i32 %3267, 255
  br label %3269

3269:                                             ; preds = %3264, %3261
  %3270 = phi ptr [ %3263, %3261 ], [ %3251, %3264 ]
  %3271 = phi i32 [ %3262, %3261 ], [ %3268, %3264 ]
  %3272 = zext i32 %3271 to i64
  %3273 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3272
  %3274 = load i8, ptr %3273, align 1, !tbaa !17
  %3275 = icmp eq i8 %3274, 9
  br i1 %3275, label %3314, label %3276

3276:                                             ; preds = %3269
  %3277 = load i64, ptr %3270, align 8
  %3278 = and i64 %3277, 65535
  %3279 = icmp eq i64 %3278, 14
  br i1 %3279, label %3280, label %3283

3280:                                             ; preds = %3276
  %3281 = tail call i32 @vector_type_mode(ptr noundef nonnull %3270) #24
  %3282 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3288

3283:                                             ; preds = %3276
  %3284 = getelementptr inbounds %struct.tree_type, ptr %3270, i64 0, i32 6
  %3285 = load i32, ptr %3284, align 4
  %3286 = lshr i32 %3285, 16
  %3287 = and i32 %3286, 255
  br label %3288

3288:                                             ; preds = %3283, %3280
  %3289 = phi ptr [ %3282, %3280 ], [ %3270, %3283 ]
  %3290 = phi i32 [ %3281, %3280 ], [ %3287, %3283 ]
  %3291 = zext i32 %3290 to i64
  %3292 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3291
  %3293 = load i8, ptr %3292, align 1, !tbaa !17
  %3294 = icmp eq i8 %3293, 11
  br i1 %3294, label %3314, label %3295

3295:                                             ; preds = %3288
  %3296 = load i64, ptr %3289, align 8
  %3297 = and i64 %3296, 65535
  %3298 = icmp eq i64 %3297, 14
  br i1 %3298, label %3299, label %3302

3299:                                             ; preds = %3295
  %3300 = tail call i32 @vector_type_mode(ptr noundef nonnull %3289) #24
  %3301 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3307

3302:                                             ; preds = %3295
  %3303 = getelementptr inbounds %struct.tree_type, ptr %3289, i64 0, i32 6
  %3304 = load i32, ptr %3303, align 4
  %3305 = lshr i32 %3304, 16
  %3306 = and i32 %3305, 255
  br label %3307

3307:                                             ; preds = %3302, %3299
  %3308 = phi ptr [ %3301, %3299 ], [ %3289, %3302 ]
  %3309 = phi i32 [ %3300, %3299 ], [ %3306, %3302 ]
  %3310 = zext i32 %3309 to i64
  %3311 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3310
  %3312 = load i8, ptr %3311, align 1, !tbaa !17
  %3313 = icmp eq i8 %3312, 17
  br i1 %3313, label %3314, label %3534

3314:                                             ; preds = %3307, %3288, %3269, %3250
  %3315 = phi ptr [ %3289, %3288 ], [ %3270, %3269 ], [ %3251, %3250 ], [ %3308, %3307 ]
  %3316 = load i64, ptr %3315, align 8
  %3317 = and i64 %3316, 65535
  %3318 = icmp eq i64 %3317, 14
  br i1 %3318, label %3319, label %3322

3319:                                             ; preds = %3314
  %3320 = tail call i32 @vector_type_mode(ptr noundef nonnull %3315) #24
  %3321 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3327

3322:                                             ; preds = %3314
  %3323 = getelementptr inbounds %struct.tree_type, ptr %3315, i64 0, i32 6
  %3324 = load i32, ptr %3323, align 4
  %3325 = lshr i32 %3324, 16
  %3326 = and i32 %3325, 255
  br label %3327

3327:                                             ; preds = %3322, %3319
  %3328 = phi ptr [ %3321, %3319 ], [ %3315, %3322 ]
  %3329 = phi i32 [ %3320, %3319 ], [ %3326, %3322 ]
  %3330 = zext i32 %3329 to i64
  %3331 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3330
  %3332 = load i8, ptr %3331, align 1, !tbaa !17
  %3333 = icmp eq i8 %3332, 8
  br i1 %3333, label %3353, label %3334

3334:                                             ; preds = %3327
  %3335 = load i64, ptr %3328, align 8
  %3336 = and i64 %3335, 65535
  %3337 = icmp eq i64 %3336, 14
  br i1 %3337, label %3338, label %3341

3338:                                             ; preds = %3334
  %3339 = tail call i32 @vector_type_mode(ptr noundef nonnull %3328) #24
  %3340 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3346

3341:                                             ; preds = %3334
  %3342 = getelementptr inbounds %struct.tree_type, ptr %3328, i64 0, i32 6
  %3343 = load i32, ptr %3342, align 4
  %3344 = lshr i32 %3343, 16
  %3345 = and i32 %3344, 255
  br label %3346

3346:                                             ; preds = %3341, %3338
  %3347 = phi ptr [ %3340, %3338 ], [ %3328, %3341 ]
  %3348 = phi i32 [ %3339, %3338 ], [ %3345, %3341 ]
  %3349 = zext i32 %3348 to i64
  %3350 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3349
  %3351 = load i8, ptr %3350, align 1, !tbaa !17
  %3352 = icmp eq i8 %3351, 9
  br i1 %3352, label %3353, label %3365

3353:                                             ; preds = %3346, %3327
  %3354 = phi ptr [ %3347, %3346 ], [ %3328, %3327 ]
  %3355 = load i64, ptr %3354, align 8
  %3356 = and i64 %3355, 65535
  %3357 = icmp eq i64 %3356, 14
  br i1 %3357, label %3358, label %3360

3358:                                             ; preds = %3353
  %3359 = tail call i32 @vector_type_mode(ptr noundef nonnull %3354) #24
  br label %3382

3360:                                             ; preds = %3353
  %3361 = getelementptr inbounds %struct.tree_type, ptr %3354, i64 0, i32 6
  %3362 = load i32, ptr %3361, align 4
  %3363 = lshr i32 %3362, 16
  %3364 = and i32 %3363, 255
  br label %3382

3365:                                             ; preds = %3346
  %3366 = load i64, ptr %3347, align 8
  %3367 = and i64 %3366, 65535
  %3368 = icmp eq i64 %3367, 14
  br i1 %3368, label %3369, label %3371

3369:                                             ; preds = %3365
  %3370 = tail call i32 @vector_type_mode(ptr noundef nonnull %3347) #24
  br label %3376

3371:                                             ; preds = %3365
  %3372 = getelementptr inbounds %struct.tree_type, ptr %3347, i64 0, i32 6
  %3373 = load i32, ptr %3372, align 4
  %3374 = lshr i32 %3373, 16
  %3375 = and i32 %3374, 255
  br label %3376

3376:                                             ; preds = %3371, %3369
  %3377 = phi i32 [ %3370, %3369 ], [ %3375, %3371 ]
  %3378 = zext i32 %3377 to i64
  %3379 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3378
  %3380 = load i8, ptr %3379, align 1, !tbaa !17
  %3381 = zext i8 %3380 to i32
  br label %3382

3382:                                             ; preds = %3358, %3360, %3376
  %3383 = phi i32 [ %3381, %3376 ], [ %3359, %3358 ], [ %3364, %3360 ]
  %3384 = zext i32 %3383 to i64
  %3385 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3384
  %3386 = load i8, ptr %3385, align 1, !tbaa !17
  %3387 = icmp eq i8 %3386, 9
  %3388 = load ptr, ptr %3237, align 8, !tbaa !17
  %3389 = load i64, ptr %3388, align 8
  %3390 = and i64 %3389, 65535
  %3391 = icmp eq i64 %3390, 14
  br i1 %3387, label %3392, label %3456

3392:                                             ; preds = %3382
  br i1 %3391, label %3393, label %3396

3393:                                             ; preds = %3392
  %3394 = tail call i32 @vector_type_mode(ptr noundef nonnull %3388) #24
  %3395 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3401

3396:                                             ; preds = %3392
  %3397 = getelementptr inbounds %struct.tree_type, ptr %3388, i64 0, i32 6
  %3398 = load i32, ptr %3397, align 4
  %3399 = lshr i32 %3398, 16
  %3400 = and i32 %3399, 255
  br label %3401

3401:                                             ; preds = %3396, %3393
  %3402 = phi ptr [ %3395, %3393 ], [ %3388, %3396 ]
  %3403 = phi i32 [ %3394, %3393 ], [ %3400, %3396 ]
  %3404 = zext i32 %3403 to i64
  %3405 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3404
  %3406 = load i8, ptr %3405, align 1, !tbaa !17
  %3407 = icmp eq i8 %3406, 8
  br i1 %3407, label %3427, label %3408

3408:                                             ; preds = %3401
  %3409 = load i64, ptr %3402, align 8
  %3410 = and i64 %3409, 65535
  %3411 = icmp eq i64 %3410, 14
  br i1 %3411, label %3412, label %3415

3412:                                             ; preds = %3408
  %3413 = tail call i32 @vector_type_mode(ptr noundef nonnull %3402) #24
  %3414 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3420

3415:                                             ; preds = %3408
  %3416 = getelementptr inbounds %struct.tree_type, ptr %3402, i64 0, i32 6
  %3417 = load i32, ptr %3416, align 4
  %3418 = lshr i32 %3417, 16
  %3419 = and i32 %3418, 255
  br label %3420

3420:                                             ; preds = %3415, %3412
  %3421 = phi ptr [ %3414, %3412 ], [ %3402, %3415 ]
  %3422 = phi i32 [ %3413, %3412 ], [ %3419, %3415 ]
  %3423 = zext i32 %3422 to i64
  %3424 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3423
  %3425 = load i8, ptr %3424, align 1, !tbaa !17
  %3426 = icmp eq i8 %3425, 9
  br i1 %3426, label %3427, label %3439

3427:                                             ; preds = %3420, %3401
  %3428 = phi ptr [ %3421, %3420 ], [ %3402, %3401 ]
  %3429 = load i64, ptr %3428, align 8
  %3430 = and i64 %3429, 65535
  %3431 = icmp eq i64 %3430, 14
  br i1 %3431, label %3432, label %3434

3432:                                             ; preds = %3427
  %3433 = tail call i32 @vector_type_mode(ptr noundef nonnull %3428) #24
  br label %3520

3434:                                             ; preds = %3427
  %3435 = getelementptr inbounds %struct.tree_type, ptr %3428, i64 0, i32 6
  %3436 = load i32, ptr %3435, align 4
  %3437 = lshr i32 %3436, 16
  %3438 = and i32 %3437, 255
  br label %3520

3439:                                             ; preds = %3420
  %3440 = load i64, ptr %3421, align 8
  %3441 = and i64 %3440, 65535
  %3442 = icmp eq i64 %3441, 14
  br i1 %3442, label %3443, label %3445

3443:                                             ; preds = %3439
  %3444 = tail call i32 @vector_type_mode(ptr noundef nonnull %3421) #24
  br label %3450

3445:                                             ; preds = %3439
  %3446 = getelementptr inbounds %struct.tree_type, ptr %3421, i64 0, i32 6
  %3447 = load i32, ptr %3446, align 4
  %3448 = lshr i32 %3447, 16
  %3449 = and i32 %3448, 255
  br label %3450

3450:                                             ; preds = %3445, %3443
  %3451 = phi i32 [ %3444, %3443 ], [ %3449, %3445 ]
  %3452 = zext i32 %3451 to i64
  %3453 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3452
  %3454 = load i8, ptr %3453, align 1, !tbaa !17
  %3455 = zext i8 %3454 to i32
  br label %3520

3456:                                             ; preds = %3382
  br i1 %3391, label %3457, label %3460

3457:                                             ; preds = %3456
  %3458 = tail call i32 @vector_type_mode(ptr noundef nonnull %3388) #24
  %3459 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3465

3460:                                             ; preds = %3456
  %3461 = getelementptr inbounds %struct.tree_type, ptr %3388, i64 0, i32 6
  %3462 = load i32, ptr %3461, align 4
  %3463 = lshr i32 %3462, 16
  %3464 = and i32 %3463, 255
  br label %3465

3465:                                             ; preds = %3460, %3457
  %3466 = phi ptr [ %3459, %3457 ], [ %3388, %3460 ]
  %3467 = phi i32 [ %3458, %3457 ], [ %3464, %3460 ]
  %3468 = zext i32 %3467 to i64
  %3469 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3468
  %3470 = load i8, ptr %3469, align 1, !tbaa !17
  %3471 = icmp eq i8 %3470, 8
  br i1 %3471, label %3491, label %3472

3472:                                             ; preds = %3465
  %3473 = load i64, ptr %3466, align 8
  %3474 = and i64 %3473, 65535
  %3475 = icmp eq i64 %3474, 14
  br i1 %3475, label %3476, label %3479

3476:                                             ; preds = %3472
  %3477 = tail call i32 @vector_type_mode(ptr noundef nonnull %3466) #24
  %3478 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3484

3479:                                             ; preds = %3472
  %3480 = getelementptr inbounds %struct.tree_type, ptr %3466, i64 0, i32 6
  %3481 = load i32, ptr %3480, align 4
  %3482 = lshr i32 %3481, 16
  %3483 = and i32 %3482, 255
  br label %3484

3484:                                             ; preds = %3479, %3476
  %3485 = phi ptr [ %3478, %3476 ], [ %3466, %3479 ]
  %3486 = phi i32 [ %3477, %3476 ], [ %3483, %3479 ]
  %3487 = zext i32 %3486 to i64
  %3488 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3487
  %3489 = load i8, ptr %3488, align 1, !tbaa !17
  %3490 = icmp eq i8 %3489, 9
  br i1 %3490, label %3491, label %3503

3491:                                             ; preds = %3484, %3465
  %3492 = phi ptr [ %3485, %3484 ], [ %3466, %3465 ]
  %3493 = load i64, ptr %3492, align 8
  %3494 = and i64 %3493, 65535
  %3495 = icmp eq i64 %3494, 14
  br i1 %3495, label %3496, label %3498

3496:                                             ; preds = %3491
  %3497 = tail call i32 @vector_type_mode(ptr noundef nonnull %3492) #24
  br label %3520

3498:                                             ; preds = %3491
  %3499 = getelementptr inbounds %struct.tree_type, ptr %3492, i64 0, i32 6
  %3500 = load i32, ptr %3499, align 4
  %3501 = lshr i32 %3500, 16
  %3502 = and i32 %3501, 255
  br label %3520

3503:                                             ; preds = %3484
  %3504 = load i64, ptr %3485, align 8
  %3505 = and i64 %3504, 65535
  %3506 = icmp eq i64 %3505, 14
  br i1 %3506, label %3507, label %3509

3507:                                             ; preds = %3503
  %3508 = tail call i32 @vector_type_mode(ptr noundef nonnull %3485) #24
  br label %3514

3509:                                             ; preds = %3503
  %3510 = getelementptr inbounds %struct.tree_type, ptr %3485, i64 0, i32 6
  %3511 = load i32, ptr %3510, align 4
  %3512 = lshr i32 %3511, 16
  %3513 = and i32 %3512, 255
  br label %3514

3514:                                             ; preds = %3509, %3507
  %3515 = phi i32 [ %3508, %3507 ], [ %3513, %3509 ]
  %3516 = zext i32 %3515 to i64
  %3517 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3516
  %3518 = load i8, ptr %3517, align 1, !tbaa !17
  %3519 = zext i8 %3518 to i32
  br label %3520

3520:                                             ; preds = %3514, %3498, %3496, %3450, %3434, %3432
  %3521 = phi i32 [ %3455, %3450 ], [ %3433, %3432 ], [ %3438, %3434 ], [ %3519, %3514 ], [ %3497, %3496 ], [ %3502, %3498 ]
  %3522 = add i32 %3521, -38
  %3523 = zext i32 %3522 to i64
  %3524 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %3523
  %3525 = load ptr, ptr %3524, align 8, !tbaa !6
  %3526 = getelementptr inbounds %struct.real_format, ptr %3525, i64 0, i32 11
  %3527 = load i8, ptr %3526, align 2, !tbaa !36
  %3528 = icmp eq i8 %3527, 0
  %3529 = load i32, ptr @flag_finite_math_only, align 4
  %3530 = icmp ne i32 %3529, 0
  %3531 = select i1 %3528, i1 true, i1 %3530
  br i1 %3531, label %3532, label %3834

3532:                                             ; preds = %3520
  %3533 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3534

3534:                                             ; preds = %3532, %3307
  %3535 = phi ptr [ %3533, %3532 ], [ %3308, %3307 ]
  %3536 = load i64, ptr %3535, align 8
  %3537 = and i64 %3536, 65535
  %3538 = icmp eq i64 %3537, 14
  br i1 %3538, label %3539, label %3542

3539:                                             ; preds = %3534
  %3540 = tail call i32 @vector_type_mode(ptr noundef nonnull %3535) #24
  %3541 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3547

3542:                                             ; preds = %3534
  %3543 = getelementptr inbounds %struct.tree_type, ptr %3535, i64 0, i32 6
  %3544 = load i32, ptr %3543, align 4
  %3545 = lshr i32 %3544, 16
  %3546 = and i32 %3545, 255
  br label %3547

3547:                                             ; preds = %3542, %3539
  %3548 = phi ptr [ %3541, %3539 ], [ %3535, %3542 ]
  %3549 = phi i32 [ %3540, %3539 ], [ %3546, %3542 ]
  %3550 = zext i32 %3549 to i64
  %3551 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3550
  %3552 = load i8, ptr %3551, align 1, !tbaa !17
  %3553 = icmp eq i8 %3552, 8
  br i1 %3553, label %3611, label %3554

3554:                                             ; preds = %3547
  %3555 = load i64, ptr %3548, align 8
  %3556 = and i64 %3555, 65535
  %3557 = icmp eq i64 %3556, 14
  br i1 %3557, label %3558, label %3561

3558:                                             ; preds = %3554
  %3559 = tail call i32 @vector_type_mode(ptr noundef nonnull %3548) #24
  %3560 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3566

3561:                                             ; preds = %3554
  %3562 = getelementptr inbounds %struct.tree_type, ptr %3548, i64 0, i32 6
  %3563 = load i32, ptr %3562, align 4
  %3564 = lshr i32 %3563, 16
  %3565 = and i32 %3564, 255
  br label %3566

3566:                                             ; preds = %3561, %3558
  %3567 = phi ptr [ %3560, %3558 ], [ %3548, %3561 ]
  %3568 = phi i32 [ %3559, %3558 ], [ %3565, %3561 ]
  %3569 = zext i32 %3568 to i64
  %3570 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3569
  %3571 = load i8, ptr %3570, align 1, !tbaa !17
  %3572 = icmp eq i8 %3571, 9
  br i1 %3572, label %3611, label %3573

3573:                                             ; preds = %3566
  %3574 = load i64, ptr %3567, align 8
  %3575 = and i64 %3574, 65535
  %3576 = icmp eq i64 %3575, 14
  br i1 %3576, label %3577, label %3580

3577:                                             ; preds = %3573
  %3578 = tail call i32 @vector_type_mode(ptr noundef nonnull %3567) #24
  %3579 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3585

3580:                                             ; preds = %3573
  %3581 = getelementptr inbounds %struct.tree_type, ptr %3567, i64 0, i32 6
  %3582 = load i32, ptr %3581, align 4
  %3583 = lshr i32 %3582, 16
  %3584 = and i32 %3583, 255
  br label %3585

3585:                                             ; preds = %3580, %3577
  %3586 = phi ptr [ %3579, %3577 ], [ %3567, %3580 ]
  %3587 = phi i32 [ %3578, %3577 ], [ %3584, %3580 ]
  %3588 = zext i32 %3587 to i64
  %3589 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3588
  %3590 = load i8, ptr %3589, align 1, !tbaa !17
  %3591 = icmp eq i8 %3590, 11
  br i1 %3591, label %3611, label %3592

3592:                                             ; preds = %3585
  %3593 = load i64, ptr %3586, align 8
  %3594 = and i64 %3593, 65535
  %3595 = icmp eq i64 %3594, 14
  br i1 %3595, label %3596, label %3598

3596:                                             ; preds = %3592
  %3597 = tail call i32 @vector_type_mode(ptr noundef nonnull %3586) #24
  br label %3603

3598:                                             ; preds = %3592
  %3599 = getelementptr inbounds %struct.tree_type, ptr %3586, i64 0, i32 6
  %3600 = load i32, ptr %3599, align 4
  %3601 = lshr i32 %3600, 16
  %3602 = and i32 %3601, 255
  br label %3603

3603:                                             ; preds = %3598, %3596
  %3604 = phi i32 [ %3597, %3596 ], [ %3602, %3598 ]
  %3605 = zext i32 %3604 to i64
  %3606 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3605
  %3607 = load i8, ptr %3606, align 1, !tbaa !17
  %3608 = icmp eq i8 %3607, 17
  br i1 %3608, label %3609, label %3829

3609:                                             ; preds = %3603
  %3610 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3611

3611:                                             ; preds = %3609, %3585, %3566, %3547
  %3612 = phi ptr [ %3610, %3609 ], [ %3586, %3585 ], [ %3567, %3566 ], [ %3548, %3547 ]
  %3613 = load i64, ptr %3612, align 8
  %3614 = and i64 %3613, 65535
  %3615 = icmp eq i64 %3614, 14
  br i1 %3615, label %3616, label %3619

3616:                                             ; preds = %3611
  %3617 = tail call i32 @vector_type_mode(ptr noundef nonnull %3612) #24
  %3618 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3624

3619:                                             ; preds = %3611
  %3620 = getelementptr inbounds %struct.tree_type, ptr %3612, i64 0, i32 6
  %3621 = load i32, ptr %3620, align 4
  %3622 = lshr i32 %3621, 16
  %3623 = and i32 %3622, 255
  br label %3624

3624:                                             ; preds = %3619, %3616
  %3625 = phi ptr [ %3618, %3616 ], [ %3612, %3619 ]
  %3626 = phi i32 [ %3617, %3616 ], [ %3623, %3619 ]
  %3627 = zext i32 %3626 to i64
  %3628 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3627
  %3629 = load i8, ptr %3628, align 1, !tbaa !17
  %3630 = icmp eq i8 %3629, 8
  br i1 %3630, label %3650, label %3631

3631:                                             ; preds = %3624
  %3632 = load i64, ptr %3625, align 8
  %3633 = and i64 %3632, 65535
  %3634 = icmp eq i64 %3633, 14
  br i1 %3634, label %3635, label %3638

3635:                                             ; preds = %3631
  %3636 = tail call i32 @vector_type_mode(ptr noundef nonnull %3625) #24
  %3637 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3643

3638:                                             ; preds = %3631
  %3639 = getelementptr inbounds %struct.tree_type, ptr %3625, i64 0, i32 6
  %3640 = load i32, ptr %3639, align 4
  %3641 = lshr i32 %3640, 16
  %3642 = and i32 %3641, 255
  br label %3643

3643:                                             ; preds = %3638, %3635
  %3644 = phi ptr [ %3637, %3635 ], [ %3625, %3638 ]
  %3645 = phi i32 [ %3636, %3635 ], [ %3642, %3638 ]
  %3646 = zext i32 %3645 to i64
  %3647 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3646
  %3648 = load i8, ptr %3647, align 1, !tbaa !17
  %3649 = icmp eq i8 %3648, 9
  br i1 %3649, label %3650, label %3662

3650:                                             ; preds = %3643, %3624
  %3651 = phi ptr [ %3644, %3643 ], [ %3625, %3624 ]
  %3652 = load i64, ptr %3651, align 8
  %3653 = and i64 %3652, 65535
  %3654 = icmp eq i64 %3653, 14
  br i1 %3654, label %3655, label %3657

3655:                                             ; preds = %3650
  %3656 = tail call i32 @vector_type_mode(ptr noundef nonnull %3651) #24
  br label %3679

3657:                                             ; preds = %3650
  %3658 = getelementptr inbounds %struct.tree_type, ptr %3651, i64 0, i32 6
  %3659 = load i32, ptr %3658, align 4
  %3660 = lshr i32 %3659, 16
  %3661 = and i32 %3660, 255
  br label %3679

3662:                                             ; preds = %3643
  %3663 = load i64, ptr %3644, align 8
  %3664 = and i64 %3663, 65535
  %3665 = icmp eq i64 %3664, 14
  br i1 %3665, label %3666, label %3668

3666:                                             ; preds = %3662
  %3667 = tail call i32 @vector_type_mode(ptr noundef nonnull %3644) #24
  br label %3673

3668:                                             ; preds = %3662
  %3669 = getelementptr inbounds %struct.tree_type, ptr %3644, i64 0, i32 6
  %3670 = load i32, ptr %3669, align 4
  %3671 = lshr i32 %3670, 16
  %3672 = and i32 %3671, 255
  br label %3673

3673:                                             ; preds = %3668, %3666
  %3674 = phi i32 [ %3667, %3666 ], [ %3672, %3668 ]
  %3675 = zext i32 %3674 to i64
  %3676 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3675
  %3677 = load i8, ptr %3676, align 1, !tbaa !17
  %3678 = zext i8 %3677 to i32
  br label %3679

3679:                                             ; preds = %3655, %3657, %3673
  %3680 = phi i32 [ %3678, %3673 ], [ %3656, %3655 ], [ %3661, %3657 ]
  %3681 = zext i32 %3680 to i64
  %3682 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3681
  %3683 = load i8, ptr %3682, align 1, !tbaa !17
  %3684 = icmp eq i8 %3683, 9
  %3685 = load ptr, ptr %3237, align 8, !tbaa !17
  %3686 = load i64, ptr %3685, align 8
  %3687 = and i64 %3686, 65535
  %3688 = icmp eq i64 %3687, 14
  br i1 %3684, label %3689, label %3753

3689:                                             ; preds = %3679
  br i1 %3688, label %3690, label %3693

3690:                                             ; preds = %3689
  %3691 = tail call i32 @vector_type_mode(ptr noundef nonnull %3685) #24
  %3692 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3698

3693:                                             ; preds = %3689
  %3694 = getelementptr inbounds %struct.tree_type, ptr %3685, i64 0, i32 6
  %3695 = load i32, ptr %3694, align 4
  %3696 = lshr i32 %3695, 16
  %3697 = and i32 %3696, 255
  br label %3698

3698:                                             ; preds = %3693, %3690
  %3699 = phi ptr [ %3692, %3690 ], [ %3685, %3693 ]
  %3700 = phi i32 [ %3691, %3690 ], [ %3697, %3693 ]
  %3701 = zext i32 %3700 to i64
  %3702 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3701
  %3703 = load i8, ptr %3702, align 1, !tbaa !17
  %3704 = icmp eq i8 %3703, 8
  br i1 %3704, label %3724, label %3705

3705:                                             ; preds = %3698
  %3706 = load i64, ptr %3699, align 8
  %3707 = and i64 %3706, 65535
  %3708 = icmp eq i64 %3707, 14
  br i1 %3708, label %3709, label %3712

3709:                                             ; preds = %3705
  %3710 = tail call i32 @vector_type_mode(ptr noundef nonnull %3699) #24
  %3711 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3717

3712:                                             ; preds = %3705
  %3713 = getelementptr inbounds %struct.tree_type, ptr %3699, i64 0, i32 6
  %3714 = load i32, ptr %3713, align 4
  %3715 = lshr i32 %3714, 16
  %3716 = and i32 %3715, 255
  br label %3717

3717:                                             ; preds = %3712, %3709
  %3718 = phi ptr [ %3711, %3709 ], [ %3699, %3712 ]
  %3719 = phi i32 [ %3710, %3709 ], [ %3716, %3712 ]
  %3720 = zext i32 %3719 to i64
  %3721 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3720
  %3722 = load i8, ptr %3721, align 1, !tbaa !17
  %3723 = icmp eq i8 %3722, 9
  br i1 %3723, label %3724, label %3736

3724:                                             ; preds = %3717, %3698
  %3725 = phi ptr [ %3718, %3717 ], [ %3699, %3698 ]
  %3726 = load i64, ptr %3725, align 8
  %3727 = and i64 %3726, 65535
  %3728 = icmp eq i64 %3727, 14
  br i1 %3728, label %3729, label %3731

3729:                                             ; preds = %3724
  %3730 = tail call i32 @vector_type_mode(ptr noundef nonnull %3725) #24
  br label %3817

3731:                                             ; preds = %3724
  %3732 = getelementptr inbounds %struct.tree_type, ptr %3725, i64 0, i32 6
  %3733 = load i32, ptr %3732, align 4
  %3734 = lshr i32 %3733, 16
  %3735 = and i32 %3734, 255
  br label %3817

3736:                                             ; preds = %3717
  %3737 = load i64, ptr %3718, align 8
  %3738 = and i64 %3737, 65535
  %3739 = icmp eq i64 %3738, 14
  br i1 %3739, label %3740, label %3742

3740:                                             ; preds = %3736
  %3741 = tail call i32 @vector_type_mode(ptr noundef nonnull %3718) #24
  br label %3747

3742:                                             ; preds = %3736
  %3743 = getelementptr inbounds %struct.tree_type, ptr %3718, i64 0, i32 6
  %3744 = load i32, ptr %3743, align 4
  %3745 = lshr i32 %3744, 16
  %3746 = and i32 %3745, 255
  br label %3747

3747:                                             ; preds = %3742, %3740
  %3748 = phi i32 [ %3741, %3740 ], [ %3746, %3742 ]
  %3749 = zext i32 %3748 to i64
  %3750 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3749
  %3751 = load i8, ptr %3750, align 1, !tbaa !17
  %3752 = zext i8 %3751 to i32
  br label %3817

3753:                                             ; preds = %3679
  br i1 %3688, label %3754, label %3757

3754:                                             ; preds = %3753
  %3755 = tail call i32 @vector_type_mode(ptr noundef nonnull %3685) #24
  %3756 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3762

3757:                                             ; preds = %3753
  %3758 = getelementptr inbounds %struct.tree_type, ptr %3685, i64 0, i32 6
  %3759 = load i32, ptr %3758, align 4
  %3760 = lshr i32 %3759, 16
  %3761 = and i32 %3760, 255
  br label %3762

3762:                                             ; preds = %3757, %3754
  %3763 = phi ptr [ %3756, %3754 ], [ %3685, %3757 ]
  %3764 = phi i32 [ %3755, %3754 ], [ %3761, %3757 ]
  %3765 = zext i32 %3764 to i64
  %3766 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3765
  %3767 = load i8, ptr %3766, align 1, !tbaa !17
  %3768 = icmp eq i8 %3767, 8
  br i1 %3768, label %3788, label %3769

3769:                                             ; preds = %3762
  %3770 = load i64, ptr %3763, align 8
  %3771 = and i64 %3770, 65535
  %3772 = icmp eq i64 %3771, 14
  br i1 %3772, label %3773, label %3776

3773:                                             ; preds = %3769
  %3774 = tail call i32 @vector_type_mode(ptr noundef nonnull %3763) #24
  %3775 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3781

3776:                                             ; preds = %3769
  %3777 = getelementptr inbounds %struct.tree_type, ptr %3763, i64 0, i32 6
  %3778 = load i32, ptr %3777, align 4
  %3779 = lshr i32 %3778, 16
  %3780 = and i32 %3779, 255
  br label %3781

3781:                                             ; preds = %3776, %3773
  %3782 = phi ptr [ %3775, %3773 ], [ %3763, %3776 ]
  %3783 = phi i32 [ %3774, %3773 ], [ %3780, %3776 ]
  %3784 = zext i32 %3783 to i64
  %3785 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3784
  %3786 = load i8, ptr %3785, align 1, !tbaa !17
  %3787 = icmp eq i8 %3786, 9
  br i1 %3787, label %3788, label %3800

3788:                                             ; preds = %3781, %3762
  %3789 = phi ptr [ %3782, %3781 ], [ %3763, %3762 ]
  %3790 = load i64, ptr %3789, align 8
  %3791 = and i64 %3790, 65535
  %3792 = icmp eq i64 %3791, 14
  br i1 %3792, label %3793, label %3795

3793:                                             ; preds = %3788
  %3794 = tail call i32 @vector_type_mode(ptr noundef nonnull %3789) #24
  br label %3817

3795:                                             ; preds = %3788
  %3796 = getelementptr inbounds %struct.tree_type, ptr %3789, i64 0, i32 6
  %3797 = load i32, ptr %3796, align 4
  %3798 = lshr i32 %3797, 16
  %3799 = and i32 %3798, 255
  br label %3817

3800:                                             ; preds = %3781
  %3801 = load i64, ptr %3782, align 8
  %3802 = and i64 %3801, 65535
  %3803 = icmp eq i64 %3802, 14
  br i1 %3803, label %3804, label %3806

3804:                                             ; preds = %3800
  %3805 = tail call i32 @vector_type_mode(ptr noundef nonnull %3782) #24
  br label %3811

3806:                                             ; preds = %3800
  %3807 = getelementptr inbounds %struct.tree_type, ptr %3782, i64 0, i32 6
  %3808 = load i32, ptr %3807, align 4
  %3809 = lshr i32 %3808, 16
  %3810 = and i32 %3809, 255
  br label %3811

3811:                                             ; preds = %3806, %3804
  %3812 = phi i32 [ %3805, %3804 ], [ %3810, %3806 ]
  %3813 = zext i32 %3812 to i64
  %3814 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3813
  %3815 = load i8, ptr %3814, align 1, !tbaa !17
  %3816 = zext i8 %3815 to i32
  br label %3817

3817:                                             ; preds = %3811, %3795, %3793, %3747, %3731, %3729
  %3818 = phi i32 [ %3752, %3747 ], [ %3730, %3729 ], [ %3735, %3731 ], [ %3816, %3811 ], [ %3794, %3793 ], [ %3799, %3795 ]
  %3819 = add i32 %3818, -38
  %3820 = zext i32 %3819 to i64
  %3821 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %3820
  %3822 = load ptr, ptr %3821, align 8, !tbaa !6
  %3823 = getelementptr inbounds %struct.real_format, ptr %3822, i64 0, i32 14
  %3824 = load i8, ptr %3823, align 1, !tbaa !37
  %3825 = icmp ne i8 %3824, 0
  %3826 = load i32, ptr @flag_signed_zeros, align 4
  %3827 = icmp ne i32 %3826, 0
  %3828 = select i1 %3825, i1 %3827, i1 false
  br i1 %3828, label %3834, label %3829

3829:                                             ; preds = %3817, %3603
  %3830 = tail call i32 @real_zerop(ptr noundef nonnull %45) #24
  %3831 = icmp eq i32 %3830, 0
  br i1 %3831, label %3834, label %3832

3832:                                             ; preds = %3829
  %3833 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45, ptr noundef nonnull %46)
  br label %14075

3834:                                             ; preds = %3817, %3520, %3829
  %3835 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %3836 = icmp eq i32 %3835, 0
  %3837 = load ptr, ptr %3237, align 8, !tbaa !17
  br i1 %3836, label %4133, label %3838

3838:                                             ; preds = %3834
  %3839 = load i64, ptr %3837, align 8
  %3840 = and i64 %3839, 65535
  %3841 = icmp eq i64 %3840, 14
  br i1 %3841, label %3842, label %3845

3842:                                             ; preds = %3838
  %3843 = tail call i32 @vector_type_mode(ptr noundef nonnull %3837) #24
  %3844 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3850

3845:                                             ; preds = %3838
  %3846 = getelementptr inbounds %struct.tree_type, ptr %3837, i64 0, i32 6
  %3847 = load i32, ptr %3846, align 4
  %3848 = lshr i32 %3847, 16
  %3849 = and i32 %3848, 255
  br label %3850

3850:                                             ; preds = %3845, %3842
  %3851 = phi ptr [ %3844, %3842 ], [ %3837, %3845 ]
  %3852 = phi i32 [ %3843, %3842 ], [ %3849, %3845 ]
  %3853 = zext i32 %3852 to i64
  %3854 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3853
  %3855 = load i8, ptr %3854, align 1, !tbaa !17
  %3856 = icmp eq i8 %3855, 8
  br i1 %3856, label %3914, label %3857

3857:                                             ; preds = %3850
  %3858 = load i64, ptr %3851, align 8
  %3859 = and i64 %3858, 65535
  %3860 = icmp eq i64 %3859, 14
  br i1 %3860, label %3861, label %3864

3861:                                             ; preds = %3857
  %3862 = tail call i32 @vector_type_mode(ptr noundef nonnull %3851) #24
  %3863 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3869

3864:                                             ; preds = %3857
  %3865 = getelementptr inbounds %struct.tree_type, ptr %3851, i64 0, i32 6
  %3866 = load i32, ptr %3865, align 4
  %3867 = lshr i32 %3866, 16
  %3868 = and i32 %3867, 255
  br label %3869

3869:                                             ; preds = %3864, %3861
  %3870 = phi ptr [ %3863, %3861 ], [ %3851, %3864 ]
  %3871 = phi i32 [ %3862, %3861 ], [ %3868, %3864 ]
  %3872 = zext i32 %3871 to i64
  %3873 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3872
  %3874 = load i8, ptr %3873, align 1, !tbaa !17
  %3875 = icmp eq i8 %3874, 9
  br i1 %3875, label %3914, label %3876

3876:                                             ; preds = %3869
  %3877 = load i64, ptr %3870, align 8
  %3878 = and i64 %3877, 65535
  %3879 = icmp eq i64 %3878, 14
  br i1 %3879, label %3880, label %3883

3880:                                             ; preds = %3876
  %3881 = tail call i32 @vector_type_mode(ptr noundef nonnull %3870) #24
  %3882 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3888

3883:                                             ; preds = %3876
  %3884 = getelementptr inbounds %struct.tree_type, ptr %3870, i64 0, i32 6
  %3885 = load i32, ptr %3884, align 4
  %3886 = lshr i32 %3885, 16
  %3887 = and i32 %3886, 255
  br label %3888

3888:                                             ; preds = %3883, %3880
  %3889 = phi ptr [ %3882, %3880 ], [ %3870, %3883 ]
  %3890 = phi i32 [ %3881, %3880 ], [ %3887, %3883 ]
  %3891 = zext i32 %3890 to i64
  %3892 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3891
  %3893 = load i8, ptr %3892, align 1, !tbaa !17
  %3894 = icmp eq i8 %3893, 11
  br i1 %3894, label %3914, label %3895

3895:                                             ; preds = %3888
  %3896 = load i64, ptr %3889, align 8
  %3897 = and i64 %3896, 65535
  %3898 = icmp eq i64 %3897, 14
  br i1 %3898, label %3899, label %3902

3899:                                             ; preds = %3895
  %3900 = tail call i32 @vector_type_mode(ptr noundef nonnull %3889) #24
  %3901 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3907

3902:                                             ; preds = %3895
  %3903 = getelementptr inbounds %struct.tree_type, ptr %3889, i64 0, i32 6
  %3904 = load i32, ptr %3903, align 4
  %3905 = lshr i32 %3904, 16
  %3906 = and i32 %3905, 255
  br label %3907

3907:                                             ; preds = %3902, %3899
  %3908 = phi ptr [ %3901, %3899 ], [ %3889, %3902 ]
  %3909 = phi i32 [ %3900, %3899 ], [ %3906, %3902 ]
  %3910 = zext i32 %3909 to i64
  %3911 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3910
  %3912 = load i8, ptr %3911, align 1, !tbaa !17
  %3913 = icmp eq i8 %3912, 17
  br i1 %3913, label %3914, label %4133

3914:                                             ; preds = %3907, %3888, %3869, %3850
  %3915 = phi ptr [ %3889, %3888 ], [ %3870, %3869 ], [ %3851, %3850 ], [ %3908, %3907 ]
  %3916 = load i64, ptr %3915, align 8
  %3917 = and i64 %3916, 65535
  %3918 = icmp eq i64 %3917, 14
  br i1 %3918, label %3919, label %3922

3919:                                             ; preds = %3914
  %3920 = tail call i32 @vector_type_mode(ptr noundef nonnull %3915) #24
  %3921 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3927

3922:                                             ; preds = %3914
  %3923 = getelementptr inbounds %struct.tree_type, ptr %3915, i64 0, i32 6
  %3924 = load i32, ptr %3923, align 4
  %3925 = lshr i32 %3924, 16
  %3926 = and i32 %3925, 255
  br label %3927

3927:                                             ; preds = %3922, %3919
  %3928 = phi ptr [ %3921, %3919 ], [ %3915, %3922 ]
  %3929 = phi i32 [ %3920, %3919 ], [ %3926, %3922 ]
  %3930 = zext i32 %3929 to i64
  %3931 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3930
  %3932 = load i8, ptr %3931, align 1, !tbaa !17
  %3933 = icmp eq i8 %3932, 8
  br i1 %3933, label %3953, label %3934

3934:                                             ; preds = %3927
  %3935 = load i64, ptr %3928, align 8
  %3936 = and i64 %3935, 65535
  %3937 = icmp eq i64 %3936, 14
  br i1 %3937, label %3938, label %3941

3938:                                             ; preds = %3934
  %3939 = tail call i32 @vector_type_mode(ptr noundef nonnull %3928) #24
  %3940 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %3946

3941:                                             ; preds = %3934
  %3942 = getelementptr inbounds %struct.tree_type, ptr %3928, i64 0, i32 6
  %3943 = load i32, ptr %3942, align 4
  %3944 = lshr i32 %3943, 16
  %3945 = and i32 %3944, 255
  br label %3946

3946:                                             ; preds = %3941, %3938
  %3947 = phi ptr [ %3940, %3938 ], [ %3928, %3941 ]
  %3948 = phi i32 [ %3939, %3938 ], [ %3945, %3941 ]
  %3949 = zext i32 %3948 to i64
  %3950 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3949
  %3951 = load i8, ptr %3950, align 1, !tbaa !17
  %3952 = icmp eq i8 %3951, 9
  br i1 %3952, label %3953, label %3965

3953:                                             ; preds = %3946, %3927
  %3954 = phi ptr [ %3947, %3946 ], [ %3928, %3927 ]
  %3955 = load i64, ptr %3954, align 8
  %3956 = and i64 %3955, 65535
  %3957 = icmp eq i64 %3956, 14
  br i1 %3957, label %3958, label %3960

3958:                                             ; preds = %3953
  %3959 = tail call i32 @vector_type_mode(ptr noundef nonnull %3954) #24
  br label %3982

3960:                                             ; preds = %3953
  %3961 = getelementptr inbounds %struct.tree_type, ptr %3954, i64 0, i32 6
  %3962 = load i32, ptr %3961, align 4
  %3963 = lshr i32 %3962, 16
  %3964 = and i32 %3963, 255
  br label %3982

3965:                                             ; preds = %3946
  %3966 = load i64, ptr %3947, align 8
  %3967 = and i64 %3966, 65535
  %3968 = icmp eq i64 %3967, 14
  br i1 %3968, label %3969, label %3971

3969:                                             ; preds = %3965
  %3970 = tail call i32 @vector_type_mode(ptr noundef nonnull %3947) #24
  br label %3976

3971:                                             ; preds = %3965
  %3972 = getelementptr inbounds %struct.tree_type, ptr %3947, i64 0, i32 6
  %3973 = load i32, ptr %3972, align 4
  %3974 = lshr i32 %3973, 16
  %3975 = and i32 %3974, 255
  br label %3976

3976:                                             ; preds = %3971, %3969
  %3977 = phi i32 [ %3970, %3969 ], [ %3975, %3971 ]
  %3978 = zext i32 %3977 to i64
  %3979 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %3978
  %3980 = load i8, ptr %3979, align 1, !tbaa !17
  %3981 = zext i8 %3980 to i32
  br label %3982

3982:                                             ; preds = %3958, %3960, %3976
  %3983 = phi i32 [ %3981, %3976 ], [ %3959, %3958 ], [ %3964, %3960 ]
  %3984 = zext i32 %3983 to i64
  %3985 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %3984
  %3986 = load i8, ptr %3985, align 1, !tbaa !17
  %3987 = icmp eq i8 %3986, 9
  %3988 = load ptr, ptr %3237, align 8, !tbaa !17
  %3989 = load i64, ptr %3988, align 8
  %3990 = and i64 %3989, 65535
  %3991 = icmp eq i64 %3990, 14
  br i1 %3987, label %3992, label %4056

3992:                                             ; preds = %3982
  br i1 %3991, label %3993, label %3996

3993:                                             ; preds = %3992
  %3994 = tail call i32 @vector_type_mode(ptr noundef nonnull %3988) #24
  %3995 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4001

3996:                                             ; preds = %3992
  %3997 = getelementptr inbounds %struct.tree_type, ptr %3988, i64 0, i32 6
  %3998 = load i32, ptr %3997, align 4
  %3999 = lshr i32 %3998, 16
  %4000 = and i32 %3999, 255
  br label %4001

4001:                                             ; preds = %3996, %3993
  %4002 = phi ptr [ %3995, %3993 ], [ %3988, %3996 ]
  %4003 = phi i32 [ %3994, %3993 ], [ %4000, %3996 ]
  %4004 = zext i32 %4003 to i64
  %4005 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4004
  %4006 = load i8, ptr %4005, align 1, !tbaa !17
  %4007 = icmp eq i8 %4006, 8
  br i1 %4007, label %4027, label %4008

4008:                                             ; preds = %4001
  %4009 = load i64, ptr %4002, align 8
  %4010 = and i64 %4009, 65535
  %4011 = icmp eq i64 %4010, 14
  br i1 %4011, label %4012, label %4015

4012:                                             ; preds = %4008
  %4013 = tail call i32 @vector_type_mode(ptr noundef nonnull %4002) #24
  %4014 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4020

4015:                                             ; preds = %4008
  %4016 = getelementptr inbounds %struct.tree_type, ptr %4002, i64 0, i32 6
  %4017 = load i32, ptr %4016, align 4
  %4018 = lshr i32 %4017, 16
  %4019 = and i32 %4018, 255
  br label %4020

4020:                                             ; preds = %4015, %4012
  %4021 = phi ptr [ %4014, %4012 ], [ %4002, %4015 ]
  %4022 = phi i32 [ %4013, %4012 ], [ %4019, %4015 ]
  %4023 = zext i32 %4022 to i64
  %4024 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4023
  %4025 = load i8, ptr %4024, align 1, !tbaa !17
  %4026 = icmp eq i8 %4025, 9
  br i1 %4026, label %4027, label %4039

4027:                                             ; preds = %4020, %4001
  %4028 = phi ptr [ %4021, %4020 ], [ %4002, %4001 ]
  %4029 = load i64, ptr %4028, align 8
  %4030 = and i64 %4029, 65535
  %4031 = icmp eq i64 %4030, 14
  br i1 %4031, label %4032, label %4034

4032:                                             ; preds = %4027
  %4033 = tail call i32 @vector_type_mode(ptr noundef nonnull %4028) #24
  br label %4120

4034:                                             ; preds = %4027
  %4035 = getelementptr inbounds %struct.tree_type, ptr %4028, i64 0, i32 6
  %4036 = load i32, ptr %4035, align 4
  %4037 = lshr i32 %4036, 16
  %4038 = and i32 %4037, 255
  br label %4120

4039:                                             ; preds = %4020
  %4040 = load i64, ptr %4021, align 8
  %4041 = and i64 %4040, 65535
  %4042 = icmp eq i64 %4041, 14
  br i1 %4042, label %4043, label %4045

4043:                                             ; preds = %4039
  %4044 = tail call i32 @vector_type_mode(ptr noundef nonnull %4021) #24
  br label %4050

4045:                                             ; preds = %4039
  %4046 = getelementptr inbounds %struct.tree_type, ptr %4021, i64 0, i32 6
  %4047 = load i32, ptr %4046, align 4
  %4048 = lshr i32 %4047, 16
  %4049 = and i32 %4048, 255
  br label %4050

4050:                                             ; preds = %4045, %4043
  %4051 = phi i32 [ %4044, %4043 ], [ %4049, %4045 ]
  %4052 = zext i32 %4051 to i64
  %4053 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4052
  %4054 = load i8, ptr %4053, align 1, !tbaa !17
  %4055 = zext i8 %4054 to i32
  br label %4120

4056:                                             ; preds = %3982
  br i1 %3991, label %4057, label %4060

4057:                                             ; preds = %4056
  %4058 = tail call i32 @vector_type_mode(ptr noundef nonnull %3988) #24
  %4059 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4065

4060:                                             ; preds = %4056
  %4061 = getelementptr inbounds %struct.tree_type, ptr %3988, i64 0, i32 6
  %4062 = load i32, ptr %4061, align 4
  %4063 = lshr i32 %4062, 16
  %4064 = and i32 %4063, 255
  br label %4065

4065:                                             ; preds = %4060, %4057
  %4066 = phi ptr [ %4059, %4057 ], [ %3988, %4060 ]
  %4067 = phi i32 [ %4058, %4057 ], [ %4064, %4060 ]
  %4068 = zext i32 %4067 to i64
  %4069 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4068
  %4070 = load i8, ptr %4069, align 1, !tbaa !17
  %4071 = icmp eq i8 %4070, 8
  br i1 %4071, label %4091, label %4072

4072:                                             ; preds = %4065
  %4073 = load i64, ptr %4066, align 8
  %4074 = and i64 %4073, 65535
  %4075 = icmp eq i64 %4074, 14
  br i1 %4075, label %4076, label %4079

4076:                                             ; preds = %4072
  %4077 = tail call i32 @vector_type_mode(ptr noundef nonnull %4066) #24
  %4078 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4084

4079:                                             ; preds = %4072
  %4080 = getelementptr inbounds %struct.tree_type, ptr %4066, i64 0, i32 6
  %4081 = load i32, ptr %4080, align 4
  %4082 = lshr i32 %4081, 16
  %4083 = and i32 %4082, 255
  br label %4084

4084:                                             ; preds = %4079, %4076
  %4085 = phi ptr [ %4078, %4076 ], [ %4066, %4079 ]
  %4086 = phi i32 [ %4077, %4076 ], [ %4083, %4079 ]
  %4087 = zext i32 %4086 to i64
  %4088 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4087
  %4089 = load i8, ptr %4088, align 1, !tbaa !17
  %4090 = icmp eq i8 %4089, 9
  br i1 %4090, label %4091, label %4103

4091:                                             ; preds = %4084, %4065
  %4092 = phi ptr [ %4085, %4084 ], [ %4066, %4065 ]
  %4093 = load i64, ptr %4092, align 8
  %4094 = and i64 %4093, 65535
  %4095 = icmp eq i64 %4094, 14
  br i1 %4095, label %4096, label %4098

4096:                                             ; preds = %4091
  %4097 = tail call i32 @vector_type_mode(ptr noundef nonnull %4092) #24
  br label %4120

4098:                                             ; preds = %4091
  %4099 = getelementptr inbounds %struct.tree_type, ptr %4092, i64 0, i32 6
  %4100 = load i32, ptr %4099, align 4
  %4101 = lshr i32 %4100, 16
  %4102 = and i32 %4101, 255
  br label %4120

4103:                                             ; preds = %4084
  %4104 = load i64, ptr %4085, align 8
  %4105 = and i64 %4104, 65535
  %4106 = icmp eq i64 %4105, 14
  br i1 %4106, label %4107, label %4109

4107:                                             ; preds = %4103
  %4108 = tail call i32 @vector_type_mode(ptr noundef nonnull %4085) #24
  br label %4114

4109:                                             ; preds = %4103
  %4110 = getelementptr inbounds %struct.tree_type, ptr %4085, i64 0, i32 6
  %4111 = load i32, ptr %4110, align 4
  %4112 = lshr i32 %4111, 16
  %4113 = and i32 %4112, 255
  br label %4114

4114:                                             ; preds = %4109, %4107
  %4115 = phi i32 [ %4108, %4107 ], [ %4113, %4109 ]
  %4116 = zext i32 %4115 to i64
  %4117 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4116
  %4118 = load i8, ptr %4117, align 1, !tbaa !17
  %4119 = zext i8 %4118 to i32
  br label %4120

4120:                                             ; preds = %4114, %4098, %4096, %4050, %4034, %4032
  %4121 = phi i32 [ %4055, %4050 ], [ %4033, %4032 ], [ %4038, %4034 ], [ %4119, %4114 ], [ %4097, %4096 ], [ %4102, %4098 ]
  %4122 = add i32 %4121, -38
  %4123 = zext i32 %4122 to i64
  %4124 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %4123
  %4125 = load ptr, ptr %4124, align 8, !tbaa !6
  %4126 = getelementptr inbounds %struct.real_format, ptr %4125, i64 0, i32 11
  %4127 = load i8, ptr %4126, align 2, !tbaa !36
  %4128 = icmp eq i8 %4127, 0
  %4129 = load i32, ptr @flag_finite_math_only, align 4
  %4130 = icmp ne i32 %4129, 0
  %4131 = select i1 %4128, i1 true, i1 %4130
  %4132 = load ptr, ptr %3237, align 8, !tbaa !17
  br i1 %4131, label %4133, label %4447

4133:                                             ; preds = %4120, %3907, %3834
  %4134 = phi ptr [ %3908, %3907 ], [ %3837, %3834 ], [ %4132, %4120 ]
  %4135 = load i64, ptr %4134, align 8
  %4136 = and i64 %4135, 65535
  %4137 = icmp eq i64 %4136, 14
  br i1 %4137, label %4138, label %4141

4138:                                             ; preds = %4133
  %4139 = tail call i32 @vector_type_mode(ptr noundef nonnull %4134) #24
  %4140 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4146

4141:                                             ; preds = %4133
  %4142 = getelementptr inbounds %struct.tree_type, ptr %4134, i64 0, i32 6
  %4143 = load i32, ptr %4142, align 4
  %4144 = lshr i32 %4143, 16
  %4145 = and i32 %4144, 255
  br label %4146

4146:                                             ; preds = %4141, %4138
  %4147 = phi ptr [ %4140, %4138 ], [ %4134, %4141 ]
  %4148 = phi i32 [ %4139, %4138 ], [ %4145, %4141 ]
  %4149 = zext i32 %4148 to i64
  %4150 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4149
  %4151 = load i8, ptr %4150, align 1, !tbaa !17
  %4152 = icmp eq i8 %4151, 8
  br i1 %4152, label %4210, label %4153

4153:                                             ; preds = %4146
  %4154 = load i64, ptr %4147, align 8
  %4155 = and i64 %4154, 65535
  %4156 = icmp eq i64 %4155, 14
  br i1 %4156, label %4157, label %4160

4157:                                             ; preds = %4153
  %4158 = tail call i32 @vector_type_mode(ptr noundef nonnull %4147) #24
  %4159 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4165

4160:                                             ; preds = %4153
  %4161 = getelementptr inbounds %struct.tree_type, ptr %4147, i64 0, i32 6
  %4162 = load i32, ptr %4161, align 4
  %4163 = lshr i32 %4162, 16
  %4164 = and i32 %4163, 255
  br label %4165

4165:                                             ; preds = %4160, %4157
  %4166 = phi ptr [ %4159, %4157 ], [ %4147, %4160 ]
  %4167 = phi i32 [ %4158, %4157 ], [ %4164, %4160 ]
  %4168 = zext i32 %4167 to i64
  %4169 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4168
  %4170 = load i8, ptr %4169, align 1, !tbaa !17
  %4171 = icmp eq i8 %4170, 9
  br i1 %4171, label %4210, label %4172

4172:                                             ; preds = %4165
  %4173 = load i64, ptr %4166, align 8
  %4174 = and i64 %4173, 65535
  %4175 = icmp eq i64 %4174, 14
  br i1 %4175, label %4176, label %4179

4176:                                             ; preds = %4172
  %4177 = tail call i32 @vector_type_mode(ptr noundef nonnull %4166) #24
  %4178 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4184

4179:                                             ; preds = %4172
  %4180 = getelementptr inbounds %struct.tree_type, ptr %4166, i64 0, i32 6
  %4181 = load i32, ptr %4180, align 4
  %4182 = lshr i32 %4181, 16
  %4183 = and i32 %4182, 255
  br label %4184

4184:                                             ; preds = %4179, %4176
  %4185 = phi ptr [ %4178, %4176 ], [ %4166, %4179 ]
  %4186 = phi i32 [ %4177, %4176 ], [ %4183, %4179 ]
  %4187 = zext i32 %4186 to i64
  %4188 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4187
  %4189 = load i8, ptr %4188, align 1, !tbaa !17
  %4190 = icmp eq i8 %4189, 11
  br i1 %4190, label %4210, label %4191

4191:                                             ; preds = %4184
  %4192 = load i64, ptr %4185, align 8
  %4193 = and i64 %4192, 65535
  %4194 = icmp eq i64 %4193, 14
  br i1 %4194, label %4195, label %4197

4195:                                             ; preds = %4191
  %4196 = tail call i32 @vector_type_mode(ptr noundef nonnull %4185) #24
  br label %4202

4197:                                             ; preds = %4191
  %4198 = getelementptr inbounds %struct.tree_type, ptr %4185, i64 0, i32 6
  %4199 = load i32, ptr %4198, align 4
  %4200 = lshr i32 %4199, 16
  %4201 = and i32 %4200, 255
  br label %4202

4202:                                             ; preds = %4197, %4195
  %4203 = phi i32 [ %4196, %4195 ], [ %4201, %4197 ]
  %4204 = zext i32 %4203 to i64
  %4205 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4204
  %4206 = load i8, ptr %4205, align 1, !tbaa !17
  %4207 = icmp eq i8 %4206, 17
  br i1 %4207, label %4208, label %4439

4208:                                             ; preds = %4202
  %4209 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4210

4210:                                             ; preds = %4208, %4184, %4165, %4146
  %4211 = phi ptr [ %4209, %4208 ], [ %4185, %4184 ], [ %4166, %4165 ], [ %4147, %4146 ]
  %4212 = load i64, ptr %4211, align 8
  %4213 = and i64 %4212, 65535
  %4214 = icmp eq i64 %4213, 14
  br i1 %4214, label %4215, label %4218

4215:                                             ; preds = %4210
  %4216 = tail call i32 @vector_type_mode(ptr noundef nonnull %4211) #24
  %4217 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4223

4218:                                             ; preds = %4210
  %4219 = getelementptr inbounds %struct.tree_type, ptr %4211, i64 0, i32 6
  %4220 = load i32, ptr %4219, align 4
  %4221 = lshr i32 %4220, 16
  %4222 = and i32 %4221, 255
  br label %4223

4223:                                             ; preds = %4218, %4215
  %4224 = phi ptr [ %4217, %4215 ], [ %4211, %4218 ]
  %4225 = phi i32 [ %4216, %4215 ], [ %4222, %4218 ]
  %4226 = zext i32 %4225 to i64
  %4227 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4226
  %4228 = load i8, ptr %4227, align 1, !tbaa !17
  %4229 = icmp eq i8 %4228, 8
  br i1 %4229, label %4249, label %4230

4230:                                             ; preds = %4223
  %4231 = load i64, ptr %4224, align 8
  %4232 = and i64 %4231, 65535
  %4233 = icmp eq i64 %4232, 14
  br i1 %4233, label %4234, label %4237

4234:                                             ; preds = %4230
  %4235 = tail call i32 @vector_type_mode(ptr noundef nonnull %4224) #24
  %4236 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4242

4237:                                             ; preds = %4230
  %4238 = getelementptr inbounds %struct.tree_type, ptr %4224, i64 0, i32 6
  %4239 = load i32, ptr %4238, align 4
  %4240 = lshr i32 %4239, 16
  %4241 = and i32 %4240, 255
  br label %4242

4242:                                             ; preds = %4237, %4234
  %4243 = phi ptr [ %4236, %4234 ], [ %4224, %4237 ]
  %4244 = phi i32 [ %4235, %4234 ], [ %4241, %4237 ]
  %4245 = zext i32 %4244 to i64
  %4246 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4245
  %4247 = load i8, ptr %4246, align 1, !tbaa !17
  %4248 = icmp eq i8 %4247, 9
  br i1 %4248, label %4249, label %4261

4249:                                             ; preds = %4242, %4223
  %4250 = phi ptr [ %4243, %4242 ], [ %4224, %4223 ]
  %4251 = load i64, ptr %4250, align 8
  %4252 = and i64 %4251, 65535
  %4253 = icmp eq i64 %4252, 14
  br i1 %4253, label %4254, label %4256

4254:                                             ; preds = %4249
  %4255 = tail call i32 @vector_type_mode(ptr noundef nonnull %4250) #24
  br label %4278

4256:                                             ; preds = %4249
  %4257 = getelementptr inbounds %struct.tree_type, ptr %4250, i64 0, i32 6
  %4258 = load i32, ptr %4257, align 4
  %4259 = lshr i32 %4258, 16
  %4260 = and i32 %4259, 255
  br label %4278

4261:                                             ; preds = %4242
  %4262 = load i64, ptr %4243, align 8
  %4263 = and i64 %4262, 65535
  %4264 = icmp eq i64 %4263, 14
  br i1 %4264, label %4265, label %4267

4265:                                             ; preds = %4261
  %4266 = tail call i32 @vector_type_mode(ptr noundef nonnull %4243) #24
  br label %4272

4267:                                             ; preds = %4261
  %4268 = getelementptr inbounds %struct.tree_type, ptr %4243, i64 0, i32 6
  %4269 = load i32, ptr %4268, align 4
  %4270 = lshr i32 %4269, 16
  %4271 = and i32 %4270, 255
  br label %4272

4272:                                             ; preds = %4267, %4265
  %4273 = phi i32 [ %4266, %4265 ], [ %4271, %4267 ]
  %4274 = zext i32 %4273 to i64
  %4275 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4274
  %4276 = load i8, ptr %4275, align 1, !tbaa !17
  %4277 = zext i8 %4276 to i32
  br label %4278

4278:                                             ; preds = %4254, %4256, %4272
  %4279 = phi i32 [ %4277, %4272 ], [ %4255, %4254 ], [ %4260, %4256 ]
  %4280 = zext i32 %4279 to i64
  %4281 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4280
  %4282 = load i8, ptr %4281, align 1, !tbaa !17
  %4283 = icmp eq i8 %4282, 9
  %4284 = load ptr, ptr %3237, align 8, !tbaa !17
  %4285 = load i64, ptr %4284, align 8
  %4286 = and i64 %4285, 65535
  %4287 = icmp eq i64 %4286, 14
  br i1 %4283, label %4288, label %4352

4288:                                             ; preds = %4278
  br i1 %4287, label %4289, label %4292

4289:                                             ; preds = %4288
  %4290 = tail call i32 @vector_type_mode(ptr noundef nonnull %4284) #24
  %4291 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4297

4292:                                             ; preds = %4288
  %4293 = getelementptr inbounds %struct.tree_type, ptr %4284, i64 0, i32 6
  %4294 = load i32, ptr %4293, align 4
  %4295 = lshr i32 %4294, 16
  %4296 = and i32 %4295, 255
  br label %4297

4297:                                             ; preds = %4292, %4289
  %4298 = phi ptr [ %4291, %4289 ], [ %4284, %4292 ]
  %4299 = phi i32 [ %4290, %4289 ], [ %4296, %4292 ]
  %4300 = zext i32 %4299 to i64
  %4301 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4300
  %4302 = load i8, ptr %4301, align 1, !tbaa !17
  %4303 = icmp eq i8 %4302, 8
  br i1 %4303, label %4323, label %4304

4304:                                             ; preds = %4297
  %4305 = load i64, ptr %4298, align 8
  %4306 = and i64 %4305, 65535
  %4307 = icmp eq i64 %4306, 14
  br i1 %4307, label %4308, label %4311

4308:                                             ; preds = %4304
  %4309 = tail call i32 @vector_type_mode(ptr noundef nonnull %4298) #24
  %4310 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4316

4311:                                             ; preds = %4304
  %4312 = getelementptr inbounds %struct.tree_type, ptr %4298, i64 0, i32 6
  %4313 = load i32, ptr %4312, align 4
  %4314 = lshr i32 %4313, 16
  %4315 = and i32 %4314, 255
  br label %4316

4316:                                             ; preds = %4311, %4308
  %4317 = phi ptr [ %4310, %4308 ], [ %4298, %4311 ]
  %4318 = phi i32 [ %4309, %4308 ], [ %4315, %4311 ]
  %4319 = zext i32 %4318 to i64
  %4320 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4319
  %4321 = load i8, ptr %4320, align 1, !tbaa !17
  %4322 = icmp eq i8 %4321, 9
  br i1 %4322, label %4323, label %4335

4323:                                             ; preds = %4316, %4297
  %4324 = phi ptr [ %4317, %4316 ], [ %4298, %4297 ]
  %4325 = load i64, ptr %4324, align 8
  %4326 = and i64 %4325, 65535
  %4327 = icmp eq i64 %4326, 14
  br i1 %4327, label %4328, label %4330

4328:                                             ; preds = %4323
  %4329 = tail call i32 @vector_type_mode(ptr noundef nonnull %4324) #24
  br label %4416

4330:                                             ; preds = %4323
  %4331 = getelementptr inbounds %struct.tree_type, ptr %4324, i64 0, i32 6
  %4332 = load i32, ptr %4331, align 4
  %4333 = lshr i32 %4332, 16
  %4334 = and i32 %4333, 255
  br label %4416

4335:                                             ; preds = %4316
  %4336 = load i64, ptr %4317, align 8
  %4337 = and i64 %4336, 65535
  %4338 = icmp eq i64 %4337, 14
  br i1 %4338, label %4339, label %4341

4339:                                             ; preds = %4335
  %4340 = tail call i32 @vector_type_mode(ptr noundef nonnull %4317) #24
  br label %4346

4341:                                             ; preds = %4335
  %4342 = getelementptr inbounds %struct.tree_type, ptr %4317, i64 0, i32 6
  %4343 = load i32, ptr %4342, align 4
  %4344 = lshr i32 %4343, 16
  %4345 = and i32 %4344, 255
  br label %4346

4346:                                             ; preds = %4341, %4339
  %4347 = phi i32 [ %4340, %4339 ], [ %4345, %4341 ]
  %4348 = zext i32 %4347 to i64
  %4349 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4348
  %4350 = load i8, ptr %4349, align 1, !tbaa !17
  %4351 = zext i8 %4350 to i32
  br label %4416

4352:                                             ; preds = %4278
  br i1 %4287, label %4353, label %4356

4353:                                             ; preds = %4352
  %4354 = tail call i32 @vector_type_mode(ptr noundef nonnull %4284) #24
  %4355 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4361

4356:                                             ; preds = %4352
  %4357 = getelementptr inbounds %struct.tree_type, ptr %4284, i64 0, i32 6
  %4358 = load i32, ptr %4357, align 4
  %4359 = lshr i32 %4358, 16
  %4360 = and i32 %4359, 255
  br label %4361

4361:                                             ; preds = %4356, %4353
  %4362 = phi ptr [ %4355, %4353 ], [ %4284, %4356 ]
  %4363 = phi i32 [ %4354, %4353 ], [ %4360, %4356 ]
  %4364 = zext i32 %4363 to i64
  %4365 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4364
  %4366 = load i8, ptr %4365, align 1, !tbaa !17
  %4367 = icmp eq i8 %4366, 8
  br i1 %4367, label %4387, label %4368

4368:                                             ; preds = %4361
  %4369 = load i64, ptr %4362, align 8
  %4370 = and i64 %4369, 65535
  %4371 = icmp eq i64 %4370, 14
  br i1 %4371, label %4372, label %4375

4372:                                             ; preds = %4368
  %4373 = tail call i32 @vector_type_mode(ptr noundef nonnull %4362) #24
  %4374 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4380

4375:                                             ; preds = %4368
  %4376 = getelementptr inbounds %struct.tree_type, ptr %4362, i64 0, i32 6
  %4377 = load i32, ptr %4376, align 4
  %4378 = lshr i32 %4377, 16
  %4379 = and i32 %4378, 255
  br label %4380

4380:                                             ; preds = %4375, %4372
  %4381 = phi ptr [ %4374, %4372 ], [ %4362, %4375 ]
  %4382 = phi i32 [ %4373, %4372 ], [ %4379, %4375 ]
  %4383 = zext i32 %4382 to i64
  %4384 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4383
  %4385 = load i8, ptr %4384, align 1, !tbaa !17
  %4386 = icmp eq i8 %4385, 9
  br i1 %4386, label %4387, label %4399

4387:                                             ; preds = %4380, %4361
  %4388 = phi ptr [ %4381, %4380 ], [ %4362, %4361 ]
  %4389 = load i64, ptr %4388, align 8
  %4390 = and i64 %4389, 65535
  %4391 = icmp eq i64 %4390, 14
  br i1 %4391, label %4392, label %4394

4392:                                             ; preds = %4387
  %4393 = tail call i32 @vector_type_mode(ptr noundef nonnull %4388) #24
  br label %4416

4394:                                             ; preds = %4387
  %4395 = getelementptr inbounds %struct.tree_type, ptr %4388, i64 0, i32 6
  %4396 = load i32, ptr %4395, align 4
  %4397 = lshr i32 %4396, 16
  %4398 = and i32 %4397, 255
  br label %4416

4399:                                             ; preds = %4380
  %4400 = load i64, ptr %4381, align 8
  %4401 = and i64 %4400, 65535
  %4402 = icmp eq i64 %4401, 14
  br i1 %4402, label %4403, label %4405

4403:                                             ; preds = %4399
  %4404 = tail call i32 @vector_type_mode(ptr noundef nonnull %4381) #24
  br label %4410

4405:                                             ; preds = %4399
  %4406 = getelementptr inbounds %struct.tree_type, ptr %4381, i64 0, i32 6
  %4407 = load i32, ptr %4406, align 4
  %4408 = lshr i32 %4407, 16
  %4409 = and i32 %4408, 255
  br label %4410

4410:                                             ; preds = %4405, %4403
  %4411 = phi i32 [ %4404, %4403 ], [ %4409, %4405 ]
  %4412 = zext i32 %4411 to i64
  %4413 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4412
  %4414 = load i8, ptr %4413, align 1, !tbaa !17
  %4415 = zext i8 %4414 to i32
  br label %4416

4416:                                             ; preds = %4410, %4394, %4392, %4346, %4330, %4328
  %4417 = phi i32 [ %4351, %4346 ], [ %4329, %4328 ], [ %4334, %4330 ], [ %4415, %4410 ], [ %4393, %4392 ], [ %4398, %4394 ]
  %4418 = add i32 %4417, -38
  %4419 = zext i32 %4418 to i64
  %4420 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %4419
  %4421 = load ptr, ptr %4420, align 8, !tbaa !6
  %4422 = getelementptr inbounds %struct.real_format, ptr %4421, i64 0, i32 14
  %4423 = load i8, ptr %4422, align 1, !tbaa !37
  %4424 = icmp ne i8 %4423, 0
  %4425 = load i32, ptr @flag_signed_zeros, align 4
  %4426 = icmp ne i32 %4425, 0
  %4427 = select i1 %4424, i1 %4426, i1 false
  br i1 %4427, label %4428, label %4439

4428:                                             ; preds = %4416
  %4429 = load ptr, ptr %3237, align 8, !tbaa !17
  %4430 = load i64, ptr %4429, align 8
  %4431 = and i64 %4430, 65535
  %4432 = icmp eq i64 %4431, 13
  br i1 %4432, label %4433, label %4439

4433:                                             ; preds = %4428
  %4434 = getelementptr inbounds %struct.tree_common, ptr %4429, i64 0, i32 2
  %4435 = load ptr, ptr %4434, align 8, !tbaa !17
  %4436 = load i64, ptr %4435, align 8
  %4437 = and i64 %4436, 65535
  %4438 = icmp eq i64 %4437, 9
  br i1 %4438, label %4447, label %4439

4439:                                             ; preds = %4433, %4428, %4416, %4202
  %4440 = tail call i32 @real_onep(ptr noundef nonnull %45) #24
  %4441 = icmp eq i32 %4440, 0
  br i1 %4441, label %4442, label %4444

4442:                                             ; preds = %4439
  %4443 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4447

4444:                                             ; preds = %4439
  %4445 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %4446 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %4445)
  br label %14075

4447:                                             ; preds = %4442, %4120, %4433
  %4448 = phi ptr [ %4443, %4442 ], [ %4132, %4120 ], [ %4429, %4433 ]
  %4449 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %4450 = icmp eq i32 %4449, 0
  br i1 %4450, label %4747, label %4451

4451:                                             ; preds = %4447
  %4452 = load i64, ptr %4448, align 8
  %4453 = and i64 %4452, 65535
  %4454 = icmp eq i64 %4453, 14
  br i1 %4454, label %4455, label %4458

4455:                                             ; preds = %4451
  %4456 = tail call i32 @vector_type_mode(ptr noundef nonnull %4448) #24
  %4457 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4463

4458:                                             ; preds = %4451
  %4459 = getelementptr inbounds %struct.tree_type, ptr %4448, i64 0, i32 6
  %4460 = load i32, ptr %4459, align 4
  %4461 = lshr i32 %4460, 16
  %4462 = and i32 %4461, 255
  br label %4463

4463:                                             ; preds = %4458, %4455
  %4464 = phi ptr [ %4457, %4455 ], [ %4448, %4458 ]
  %4465 = phi i32 [ %4456, %4455 ], [ %4462, %4458 ]
  %4466 = zext i32 %4465 to i64
  %4467 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4466
  %4468 = load i8, ptr %4467, align 1, !tbaa !17
  %4469 = icmp eq i8 %4468, 8
  br i1 %4469, label %4527, label %4470

4470:                                             ; preds = %4463
  %4471 = load i64, ptr %4464, align 8
  %4472 = and i64 %4471, 65535
  %4473 = icmp eq i64 %4472, 14
  br i1 %4473, label %4474, label %4477

4474:                                             ; preds = %4470
  %4475 = tail call i32 @vector_type_mode(ptr noundef nonnull %4464) #24
  %4476 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4482

4477:                                             ; preds = %4470
  %4478 = getelementptr inbounds %struct.tree_type, ptr %4464, i64 0, i32 6
  %4479 = load i32, ptr %4478, align 4
  %4480 = lshr i32 %4479, 16
  %4481 = and i32 %4480, 255
  br label %4482

4482:                                             ; preds = %4477, %4474
  %4483 = phi ptr [ %4476, %4474 ], [ %4464, %4477 ]
  %4484 = phi i32 [ %4475, %4474 ], [ %4481, %4477 ]
  %4485 = zext i32 %4484 to i64
  %4486 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4485
  %4487 = load i8, ptr %4486, align 1, !tbaa !17
  %4488 = icmp eq i8 %4487, 9
  br i1 %4488, label %4527, label %4489

4489:                                             ; preds = %4482
  %4490 = load i64, ptr %4483, align 8
  %4491 = and i64 %4490, 65535
  %4492 = icmp eq i64 %4491, 14
  br i1 %4492, label %4493, label %4496

4493:                                             ; preds = %4489
  %4494 = tail call i32 @vector_type_mode(ptr noundef nonnull %4483) #24
  %4495 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4501

4496:                                             ; preds = %4489
  %4497 = getelementptr inbounds %struct.tree_type, ptr %4483, i64 0, i32 6
  %4498 = load i32, ptr %4497, align 4
  %4499 = lshr i32 %4498, 16
  %4500 = and i32 %4499, 255
  br label %4501

4501:                                             ; preds = %4496, %4493
  %4502 = phi ptr [ %4495, %4493 ], [ %4483, %4496 ]
  %4503 = phi i32 [ %4494, %4493 ], [ %4500, %4496 ]
  %4504 = zext i32 %4503 to i64
  %4505 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4504
  %4506 = load i8, ptr %4505, align 1, !tbaa !17
  %4507 = icmp eq i8 %4506, 11
  br i1 %4507, label %4527, label %4508

4508:                                             ; preds = %4501
  %4509 = load i64, ptr %4502, align 8
  %4510 = and i64 %4509, 65535
  %4511 = icmp eq i64 %4510, 14
  br i1 %4511, label %4512, label %4515

4512:                                             ; preds = %4508
  %4513 = tail call i32 @vector_type_mode(ptr noundef nonnull %4502) #24
  %4514 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4520

4515:                                             ; preds = %4508
  %4516 = getelementptr inbounds %struct.tree_type, ptr %4502, i64 0, i32 6
  %4517 = load i32, ptr %4516, align 4
  %4518 = lshr i32 %4517, 16
  %4519 = and i32 %4518, 255
  br label %4520

4520:                                             ; preds = %4515, %4512
  %4521 = phi ptr [ %4514, %4512 ], [ %4502, %4515 ]
  %4522 = phi i32 [ %4513, %4512 ], [ %4519, %4515 ]
  %4523 = zext i32 %4522 to i64
  %4524 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4523
  %4525 = load i8, ptr %4524, align 1, !tbaa !17
  %4526 = icmp eq i8 %4525, 17
  br i1 %4526, label %4527, label %4747

4527:                                             ; preds = %4520, %4501, %4482, %4463
  %4528 = phi ptr [ %4502, %4501 ], [ %4483, %4482 ], [ %4464, %4463 ], [ %4521, %4520 ]
  %4529 = load i64, ptr %4528, align 8
  %4530 = and i64 %4529, 65535
  %4531 = icmp eq i64 %4530, 14
  br i1 %4531, label %4532, label %4535

4532:                                             ; preds = %4527
  %4533 = tail call i32 @vector_type_mode(ptr noundef nonnull %4528) #24
  %4534 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4540

4535:                                             ; preds = %4527
  %4536 = getelementptr inbounds %struct.tree_type, ptr %4528, i64 0, i32 6
  %4537 = load i32, ptr %4536, align 4
  %4538 = lshr i32 %4537, 16
  %4539 = and i32 %4538, 255
  br label %4540

4540:                                             ; preds = %4535, %4532
  %4541 = phi ptr [ %4534, %4532 ], [ %4528, %4535 ]
  %4542 = phi i32 [ %4533, %4532 ], [ %4539, %4535 ]
  %4543 = zext i32 %4542 to i64
  %4544 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4543
  %4545 = load i8, ptr %4544, align 1, !tbaa !17
  %4546 = icmp eq i8 %4545, 8
  br i1 %4546, label %4566, label %4547

4547:                                             ; preds = %4540
  %4548 = load i64, ptr %4541, align 8
  %4549 = and i64 %4548, 65535
  %4550 = icmp eq i64 %4549, 14
  br i1 %4550, label %4551, label %4554

4551:                                             ; preds = %4547
  %4552 = tail call i32 @vector_type_mode(ptr noundef nonnull %4541) #24
  %4553 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4559

4554:                                             ; preds = %4547
  %4555 = getelementptr inbounds %struct.tree_type, ptr %4541, i64 0, i32 6
  %4556 = load i32, ptr %4555, align 4
  %4557 = lshr i32 %4556, 16
  %4558 = and i32 %4557, 255
  br label %4559

4559:                                             ; preds = %4554, %4551
  %4560 = phi ptr [ %4553, %4551 ], [ %4541, %4554 ]
  %4561 = phi i32 [ %4552, %4551 ], [ %4558, %4554 ]
  %4562 = zext i32 %4561 to i64
  %4563 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4562
  %4564 = load i8, ptr %4563, align 1, !tbaa !17
  %4565 = icmp eq i8 %4564, 9
  br i1 %4565, label %4566, label %4578

4566:                                             ; preds = %4559, %4540
  %4567 = phi ptr [ %4560, %4559 ], [ %4541, %4540 ]
  %4568 = load i64, ptr %4567, align 8
  %4569 = and i64 %4568, 65535
  %4570 = icmp eq i64 %4569, 14
  br i1 %4570, label %4571, label %4573

4571:                                             ; preds = %4566
  %4572 = tail call i32 @vector_type_mode(ptr noundef nonnull %4567) #24
  br label %4595

4573:                                             ; preds = %4566
  %4574 = getelementptr inbounds %struct.tree_type, ptr %4567, i64 0, i32 6
  %4575 = load i32, ptr %4574, align 4
  %4576 = lshr i32 %4575, 16
  %4577 = and i32 %4576, 255
  br label %4595

4578:                                             ; preds = %4559
  %4579 = load i64, ptr %4560, align 8
  %4580 = and i64 %4579, 65535
  %4581 = icmp eq i64 %4580, 14
  br i1 %4581, label %4582, label %4584

4582:                                             ; preds = %4578
  %4583 = tail call i32 @vector_type_mode(ptr noundef nonnull %4560) #24
  br label %4589

4584:                                             ; preds = %4578
  %4585 = getelementptr inbounds %struct.tree_type, ptr %4560, i64 0, i32 6
  %4586 = load i32, ptr %4585, align 4
  %4587 = lshr i32 %4586, 16
  %4588 = and i32 %4587, 255
  br label %4589

4589:                                             ; preds = %4584, %4582
  %4590 = phi i32 [ %4583, %4582 ], [ %4588, %4584 ]
  %4591 = zext i32 %4590 to i64
  %4592 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4591
  %4593 = load i8, ptr %4592, align 1, !tbaa !17
  %4594 = zext i8 %4593 to i32
  br label %4595

4595:                                             ; preds = %4571, %4573, %4589
  %4596 = phi i32 [ %4594, %4589 ], [ %4572, %4571 ], [ %4577, %4573 ]
  %4597 = zext i32 %4596 to i64
  %4598 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4597
  %4599 = load i8, ptr %4598, align 1, !tbaa !17
  %4600 = icmp eq i8 %4599, 9
  %4601 = load ptr, ptr %3237, align 8, !tbaa !17
  %4602 = load i64, ptr %4601, align 8
  %4603 = and i64 %4602, 65535
  %4604 = icmp eq i64 %4603, 14
  br i1 %4600, label %4605, label %4669

4605:                                             ; preds = %4595
  br i1 %4604, label %4606, label %4609

4606:                                             ; preds = %4605
  %4607 = tail call i32 @vector_type_mode(ptr noundef nonnull %4601) #24
  %4608 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4614

4609:                                             ; preds = %4605
  %4610 = getelementptr inbounds %struct.tree_type, ptr %4601, i64 0, i32 6
  %4611 = load i32, ptr %4610, align 4
  %4612 = lshr i32 %4611, 16
  %4613 = and i32 %4612, 255
  br label %4614

4614:                                             ; preds = %4609, %4606
  %4615 = phi ptr [ %4608, %4606 ], [ %4601, %4609 ]
  %4616 = phi i32 [ %4607, %4606 ], [ %4613, %4609 ]
  %4617 = zext i32 %4616 to i64
  %4618 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4617
  %4619 = load i8, ptr %4618, align 1, !tbaa !17
  %4620 = icmp eq i8 %4619, 8
  br i1 %4620, label %4640, label %4621

4621:                                             ; preds = %4614
  %4622 = load i64, ptr %4615, align 8
  %4623 = and i64 %4622, 65535
  %4624 = icmp eq i64 %4623, 14
  br i1 %4624, label %4625, label %4628

4625:                                             ; preds = %4621
  %4626 = tail call i32 @vector_type_mode(ptr noundef nonnull %4615) #24
  %4627 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4633

4628:                                             ; preds = %4621
  %4629 = getelementptr inbounds %struct.tree_type, ptr %4615, i64 0, i32 6
  %4630 = load i32, ptr %4629, align 4
  %4631 = lshr i32 %4630, 16
  %4632 = and i32 %4631, 255
  br label %4633

4633:                                             ; preds = %4628, %4625
  %4634 = phi ptr [ %4627, %4625 ], [ %4615, %4628 ]
  %4635 = phi i32 [ %4626, %4625 ], [ %4632, %4628 ]
  %4636 = zext i32 %4635 to i64
  %4637 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4636
  %4638 = load i8, ptr %4637, align 1, !tbaa !17
  %4639 = icmp eq i8 %4638, 9
  br i1 %4639, label %4640, label %4652

4640:                                             ; preds = %4633, %4614
  %4641 = phi ptr [ %4634, %4633 ], [ %4615, %4614 ]
  %4642 = load i64, ptr %4641, align 8
  %4643 = and i64 %4642, 65535
  %4644 = icmp eq i64 %4643, 14
  br i1 %4644, label %4645, label %4647

4645:                                             ; preds = %4640
  %4646 = tail call i32 @vector_type_mode(ptr noundef nonnull %4641) #24
  br label %4733

4647:                                             ; preds = %4640
  %4648 = getelementptr inbounds %struct.tree_type, ptr %4641, i64 0, i32 6
  %4649 = load i32, ptr %4648, align 4
  %4650 = lshr i32 %4649, 16
  %4651 = and i32 %4650, 255
  br label %4733

4652:                                             ; preds = %4633
  %4653 = load i64, ptr %4634, align 8
  %4654 = and i64 %4653, 65535
  %4655 = icmp eq i64 %4654, 14
  br i1 %4655, label %4656, label %4658

4656:                                             ; preds = %4652
  %4657 = tail call i32 @vector_type_mode(ptr noundef nonnull %4634) #24
  br label %4663

4658:                                             ; preds = %4652
  %4659 = getelementptr inbounds %struct.tree_type, ptr %4634, i64 0, i32 6
  %4660 = load i32, ptr %4659, align 4
  %4661 = lshr i32 %4660, 16
  %4662 = and i32 %4661, 255
  br label %4663

4663:                                             ; preds = %4658, %4656
  %4664 = phi i32 [ %4657, %4656 ], [ %4662, %4658 ]
  %4665 = zext i32 %4664 to i64
  %4666 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4665
  %4667 = load i8, ptr %4666, align 1, !tbaa !17
  %4668 = zext i8 %4667 to i32
  br label %4733

4669:                                             ; preds = %4595
  br i1 %4604, label %4670, label %4673

4670:                                             ; preds = %4669
  %4671 = tail call i32 @vector_type_mode(ptr noundef nonnull %4601) #24
  %4672 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4678

4673:                                             ; preds = %4669
  %4674 = getelementptr inbounds %struct.tree_type, ptr %4601, i64 0, i32 6
  %4675 = load i32, ptr %4674, align 4
  %4676 = lshr i32 %4675, 16
  %4677 = and i32 %4676, 255
  br label %4678

4678:                                             ; preds = %4673, %4670
  %4679 = phi ptr [ %4672, %4670 ], [ %4601, %4673 ]
  %4680 = phi i32 [ %4671, %4670 ], [ %4677, %4673 ]
  %4681 = zext i32 %4680 to i64
  %4682 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4681
  %4683 = load i8, ptr %4682, align 1, !tbaa !17
  %4684 = icmp eq i8 %4683, 8
  br i1 %4684, label %4704, label %4685

4685:                                             ; preds = %4678
  %4686 = load i64, ptr %4679, align 8
  %4687 = and i64 %4686, 65535
  %4688 = icmp eq i64 %4687, 14
  br i1 %4688, label %4689, label %4692

4689:                                             ; preds = %4685
  %4690 = tail call i32 @vector_type_mode(ptr noundef nonnull %4679) #24
  %4691 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4697

4692:                                             ; preds = %4685
  %4693 = getelementptr inbounds %struct.tree_type, ptr %4679, i64 0, i32 6
  %4694 = load i32, ptr %4693, align 4
  %4695 = lshr i32 %4694, 16
  %4696 = and i32 %4695, 255
  br label %4697

4697:                                             ; preds = %4692, %4689
  %4698 = phi ptr [ %4691, %4689 ], [ %4679, %4692 ]
  %4699 = phi i32 [ %4690, %4689 ], [ %4696, %4692 ]
  %4700 = zext i32 %4699 to i64
  %4701 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4700
  %4702 = load i8, ptr %4701, align 1, !tbaa !17
  %4703 = icmp eq i8 %4702, 9
  br i1 %4703, label %4704, label %4716

4704:                                             ; preds = %4697, %4678
  %4705 = phi ptr [ %4698, %4697 ], [ %4679, %4678 ]
  %4706 = load i64, ptr %4705, align 8
  %4707 = and i64 %4706, 65535
  %4708 = icmp eq i64 %4707, 14
  br i1 %4708, label %4709, label %4711

4709:                                             ; preds = %4704
  %4710 = tail call i32 @vector_type_mode(ptr noundef nonnull %4705) #24
  br label %4733

4711:                                             ; preds = %4704
  %4712 = getelementptr inbounds %struct.tree_type, ptr %4705, i64 0, i32 6
  %4713 = load i32, ptr %4712, align 4
  %4714 = lshr i32 %4713, 16
  %4715 = and i32 %4714, 255
  br label %4733

4716:                                             ; preds = %4697
  %4717 = load i64, ptr %4698, align 8
  %4718 = and i64 %4717, 65535
  %4719 = icmp eq i64 %4718, 14
  br i1 %4719, label %4720, label %4722

4720:                                             ; preds = %4716
  %4721 = tail call i32 @vector_type_mode(ptr noundef nonnull %4698) #24
  br label %4727

4722:                                             ; preds = %4716
  %4723 = getelementptr inbounds %struct.tree_type, ptr %4698, i64 0, i32 6
  %4724 = load i32, ptr %4723, align 4
  %4725 = lshr i32 %4724, 16
  %4726 = and i32 %4725, 255
  br label %4727

4727:                                             ; preds = %4722, %4720
  %4728 = phi i32 [ %4721, %4720 ], [ %4726, %4722 ]
  %4729 = zext i32 %4728 to i64
  %4730 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4729
  %4731 = load i8, ptr %4730, align 1, !tbaa !17
  %4732 = zext i8 %4731 to i32
  br label %4733

4733:                                             ; preds = %4727, %4711, %4709, %4663, %4647, %4645
  %4734 = phi i32 [ %4668, %4663 ], [ %4646, %4645 ], [ %4651, %4647 ], [ %4732, %4727 ], [ %4710, %4709 ], [ %4715, %4711 ]
  %4735 = add i32 %4734, -38
  %4736 = zext i32 %4735 to i64
  %4737 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %4736
  %4738 = load ptr, ptr %4737, align 8, !tbaa !6
  %4739 = getelementptr inbounds %struct.real_format, ptr %4738, i64 0, i32 11
  %4740 = load i8, ptr %4739, align 2, !tbaa !36
  %4741 = icmp eq i8 %4740, 0
  %4742 = load i32, ptr @flag_finite_math_only, align 4
  %4743 = icmp ne i32 %4742, 0
  %4744 = select i1 %4741, i1 true, i1 %4743
  br i1 %4744, label %4745, label %5059

4745:                                             ; preds = %4733
  %4746 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4747

4747:                                             ; preds = %4745, %4520, %4447
  %4748 = phi ptr [ %4746, %4745 ], [ %4521, %4520 ], [ %4448, %4447 ]
  %4749 = load i64, ptr %4748, align 8
  %4750 = and i64 %4749, 65535
  %4751 = icmp eq i64 %4750, 14
  br i1 %4751, label %4752, label %4755

4752:                                             ; preds = %4747
  %4753 = tail call i32 @vector_type_mode(ptr noundef nonnull %4748) #24
  %4754 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4760

4755:                                             ; preds = %4747
  %4756 = getelementptr inbounds %struct.tree_type, ptr %4748, i64 0, i32 6
  %4757 = load i32, ptr %4756, align 4
  %4758 = lshr i32 %4757, 16
  %4759 = and i32 %4758, 255
  br label %4760

4760:                                             ; preds = %4755, %4752
  %4761 = phi ptr [ %4754, %4752 ], [ %4748, %4755 ]
  %4762 = phi i32 [ %4753, %4752 ], [ %4759, %4755 ]
  %4763 = zext i32 %4762 to i64
  %4764 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4763
  %4765 = load i8, ptr %4764, align 1, !tbaa !17
  %4766 = icmp eq i8 %4765, 8
  br i1 %4766, label %4824, label %4767

4767:                                             ; preds = %4760
  %4768 = load i64, ptr %4761, align 8
  %4769 = and i64 %4768, 65535
  %4770 = icmp eq i64 %4769, 14
  br i1 %4770, label %4771, label %4774

4771:                                             ; preds = %4767
  %4772 = tail call i32 @vector_type_mode(ptr noundef nonnull %4761) #24
  %4773 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4779

4774:                                             ; preds = %4767
  %4775 = getelementptr inbounds %struct.tree_type, ptr %4761, i64 0, i32 6
  %4776 = load i32, ptr %4775, align 4
  %4777 = lshr i32 %4776, 16
  %4778 = and i32 %4777, 255
  br label %4779

4779:                                             ; preds = %4774, %4771
  %4780 = phi ptr [ %4773, %4771 ], [ %4761, %4774 ]
  %4781 = phi i32 [ %4772, %4771 ], [ %4778, %4774 ]
  %4782 = zext i32 %4781 to i64
  %4783 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4782
  %4784 = load i8, ptr %4783, align 1, !tbaa !17
  %4785 = icmp eq i8 %4784, 9
  br i1 %4785, label %4824, label %4786

4786:                                             ; preds = %4779
  %4787 = load i64, ptr %4780, align 8
  %4788 = and i64 %4787, 65535
  %4789 = icmp eq i64 %4788, 14
  br i1 %4789, label %4790, label %4793

4790:                                             ; preds = %4786
  %4791 = tail call i32 @vector_type_mode(ptr noundef nonnull %4780) #24
  %4792 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4798

4793:                                             ; preds = %4786
  %4794 = getelementptr inbounds %struct.tree_type, ptr %4780, i64 0, i32 6
  %4795 = load i32, ptr %4794, align 4
  %4796 = lshr i32 %4795, 16
  %4797 = and i32 %4796, 255
  br label %4798

4798:                                             ; preds = %4793, %4790
  %4799 = phi ptr [ %4792, %4790 ], [ %4780, %4793 ]
  %4800 = phi i32 [ %4791, %4790 ], [ %4797, %4793 ]
  %4801 = zext i32 %4800 to i64
  %4802 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4801
  %4803 = load i8, ptr %4802, align 1, !tbaa !17
  %4804 = icmp eq i8 %4803, 11
  br i1 %4804, label %4824, label %4805

4805:                                             ; preds = %4798
  %4806 = load i64, ptr %4799, align 8
  %4807 = and i64 %4806, 65535
  %4808 = icmp eq i64 %4807, 14
  br i1 %4808, label %4809, label %4811

4809:                                             ; preds = %4805
  %4810 = tail call i32 @vector_type_mode(ptr noundef nonnull %4799) #24
  br label %4816

4811:                                             ; preds = %4805
  %4812 = getelementptr inbounds %struct.tree_type, ptr %4799, i64 0, i32 6
  %4813 = load i32, ptr %4812, align 4
  %4814 = lshr i32 %4813, 16
  %4815 = and i32 %4814, 255
  br label %4816

4816:                                             ; preds = %4811, %4809
  %4817 = phi i32 [ %4810, %4809 ], [ %4815, %4811 ]
  %4818 = zext i32 %4817 to i64
  %4819 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4818
  %4820 = load i8, ptr %4819, align 1, !tbaa !17
  %4821 = icmp eq i8 %4820, 17
  br i1 %4821, label %4822, label %5053

4822:                                             ; preds = %4816
  %4823 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4824

4824:                                             ; preds = %4822, %4798, %4779, %4760
  %4825 = phi ptr [ %4823, %4822 ], [ %4799, %4798 ], [ %4780, %4779 ], [ %4761, %4760 ]
  %4826 = load i64, ptr %4825, align 8
  %4827 = and i64 %4826, 65535
  %4828 = icmp eq i64 %4827, 14
  br i1 %4828, label %4829, label %4832

4829:                                             ; preds = %4824
  %4830 = tail call i32 @vector_type_mode(ptr noundef nonnull %4825) #24
  %4831 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4837

4832:                                             ; preds = %4824
  %4833 = getelementptr inbounds %struct.tree_type, ptr %4825, i64 0, i32 6
  %4834 = load i32, ptr %4833, align 4
  %4835 = lshr i32 %4834, 16
  %4836 = and i32 %4835, 255
  br label %4837

4837:                                             ; preds = %4832, %4829
  %4838 = phi ptr [ %4831, %4829 ], [ %4825, %4832 ]
  %4839 = phi i32 [ %4830, %4829 ], [ %4836, %4832 ]
  %4840 = zext i32 %4839 to i64
  %4841 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4840
  %4842 = load i8, ptr %4841, align 1, !tbaa !17
  %4843 = icmp eq i8 %4842, 8
  br i1 %4843, label %4863, label %4844

4844:                                             ; preds = %4837
  %4845 = load i64, ptr %4838, align 8
  %4846 = and i64 %4845, 65535
  %4847 = icmp eq i64 %4846, 14
  br i1 %4847, label %4848, label %4851

4848:                                             ; preds = %4844
  %4849 = tail call i32 @vector_type_mode(ptr noundef nonnull %4838) #24
  %4850 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4856

4851:                                             ; preds = %4844
  %4852 = getelementptr inbounds %struct.tree_type, ptr %4838, i64 0, i32 6
  %4853 = load i32, ptr %4852, align 4
  %4854 = lshr i32 %4853, 16
  %4855 = and i32 %4854, 255
  br label %4856

4856:                                             ; preds = %4851, %4848
  %4857 = phi ptr [ %4850, %4848 ], [ %4838, %4851 ]
  %4858 = phi i32 [ %4849, %4848 ], [ %4855, %4851 ]
  %4859 = zext i32 %4858 to i64
  %4860 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4859
  %4861 = load i8, ptr %4860, align 1, !tbaa !17
  %4862 = icmp eq i8 %4861, 9
  br i1 %4862, label %4863, label %4875

4863:                                             ; preds = %4856, %4837
  %4864 = phi ptr [ %4857, %4856 ], [ %4838, %4837 ]
  %4865 = load i64, ptr %4864, align 8
  %4866 = and i64 %4865, 65535
  %4867 = icmp eq i64 %4866, 14
  br i1 %4867, label %4868, label %4870

4868:                                             ; preds = %4863
  %4869 = tail call i32 @vector_type_mode(ptr noundef nonnull %4864) #24
  br label %4892

4870:                                             ; preds = %4863
  %4871 = getelementptr inbounds %struct.tree_type, ptr %4864, i64 0, i32 6
  %4872 = load i32, ptr %4871, align 4
  %4873 = lshr i32 %4872, 16
  %4874 = and i32 %4873, 255
  br label %4892

4875:                                             ; preds = %4856
  %4876 = load i64, ptr %4857, align 8
  %4877 = and i64 %4876, 65535
  %4878 = icmp eq i64 %4877, 14
  br i1 %4878, label %4879, label %4881

4879:                                             ; preds = %4875
  %4880 = tail call i32 @vector_type_mode(ptr noundef nonnull %4857) #24
  br label %4886

4881:                                             ; preds = %4875
  %4882 = getelementptr inbounds %struct.tree_type, ptr %4857, i64 0, i32 6
  %4883 = load i32, ptr %4882, align 4
  %4884 = lshr i32 %4883, 16
  %4885 = and i32 %4884, 255
  br label %4886

4886:                                             ; preds = %4881, %4879
  %4887 = phi i32 [ %4880, %4879 ], [ %4885, %4881 ]
  %4888 = zext i32 %4887 to i64
  %4889 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4888
  %4890 = load i8, ptr %4889, align 1, !tbaa !17
  %4891 = zext i8 %4890 to i32
  br label %4892

4892:                                             ; preds = %4868, %4870, %4886
  %4893 = phi i32 [ %4891, %4886 ], [ %4869, %4868 ], [ %4874, %4870 ]
  %4894 = zext i32 %4893 to i64
  %4895 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4894
  %4896 = load i8, ptr %4895, align 1, !tbaa !17
  %4897 = icmp eq i8 %4896, 9
  %4898 = load ptr, ptr %3237, align 8, !tbaa !17
  %4899 = load i64, ptr %4898, align 8
  %4900 = and i64 %4899, 65535
  %4901 = icmp eq i64 %4900, 14
  br i1 %4897, label %4902, label %4966

4902:                                             ; preds = %4892
  br i1 %4901, label %4903, label %4906

4903:                                             ; preds = %4902
  %4904 = tail call i32 @vector_type_mode(ptr noundef nonnull %4898) #24
  %4905 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4911

4906:                                             ; preds = %4902
  %4907 = getelementptr inbounds %struct.tree_type, ptr %4898, i64 0, i32 6
  %4908 = load i32, ptr %4907, align 4
  %4909 = lshr i32 %4908, 16
  %4910 = and i32 %4909, 255
  br label %4911

4911:                                             ; preds = %4906, %4903
  %4912 = phi ptr [ %4905, %4903 ], [ %4898, %4906 ]
  %4913 = phi i32 [ %4904, %4903 ], [ %4910, %4906 ]
  %4914 = zext i32 %4913 to i64
  %4915 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4914
  %4916 = load i8, ptr %4915, align 1, !tbaa !17
  %4917 = icmp eq i8 %4916, 8
  br i1 %4917, label %4937, label %4918

4918:                                             ; preds = %4911
  %4919 = load i64, ptr %4912, align 8
  %4920 = and i64 %4919, 65535
  %4921 = icmp eq i64 %4920, 14
  br i1 %4921, label %4922, label %4925

4922:                                             ; preds = %4918
  %4923 = tail call i32 @vector_type_mode(ptr noundef nonnull %4912) #24
  %4924 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4930

4925:                                             ; preds = %4918
  %4926 = getelementptr inbounds %struct.tree_type, ptr %4912, i64 0, i32 6
  %4927 = load i32, ptr %4926, align 4
  %4928 = lshr i32 %4927, 16
  %4929 = and i32 %4928, 255
  br label %4930

4930:                                             ; preds = %4925, %4922
  %4931 = phi ptr [ %4924, %4922 ], [ %4912, %4925 ]
  %4932 = phi i32 [ %4923, %4922 ], [ %4929, %4925 ]
  %4933 = zext i32 %4932 to i64
  %4934 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4933
  %4935 = load i8, ptr %4934, align 1, !tbaa !17
  %4936 = icmp eq i8 %4935, 9
  br i1 %4936, label %4937, label %4949

4937:                                             ; preds = %4930, %4911
  %4938 = phi ptr [ %4931, %4930 ], [ %4912, %4911 ]
  %4939 = load i64, ptr %4938, align 8
  %4940 = and i64 %4939, 65535
  %4941 = icmp eq i64 %4940, 14
  br i1 %4941, label %4942, label %4944

4942:                                             ; preds = %4937
  %4943 = tail call i32 @vector_type_mode(ptr noundef nonnull %4938) #24
  br label %5030

4944:                                             ; preds = %4937
  %4945 = getelementptr inbounds %struct.tree_type, ptr %4938, i64 0, i32 6
  %4946 = load i32, ptr %4945, align 4
  %4947 = lshr i32 %4946, 16
  %4948 = and i32 %4947, 255
  br label %5030

4949:                                             ; preds = %4930
  %4950 = load i64, ptr %4931, align 8
  %4951 = and i64 %4950, 65535
  %4952 = icmp eq i64 %4951, 14
  br i1 %4952, label %4953, label %4955

4953:                                             ; preds = %4949
  %4954 = tail call i32 @vector_type_mode(ptr noundef nonnull %4931) #24
  br label %4960

4955:                                             ; preds = %4949
  %4956 = getelementptr inbounds %struct.tree_type, ptr %4931, i64 0, i32 6
  %4957 = load i32, ptr %4956, align 4
  %4958 = lshr i32 %4957, 16
  %4959 = and i32 %4958, 255
  br label %4960

4960:                                             ; preds = %4955, %4953
  %4961 = phi i32 [ %4954, %4953 ], [ %4959, %4955 ]
  %4962 = zext i32 %4961 to i64
  %4963 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %4962
  %4964 = load i8, ptr %4963, align 1, !tbaa !17
  %4965 = zext i8 %4964 to i32
  br label %5030

4966:                                             ; preds = %4892
  br i1 %4901, label %4967, label %4970

4967:                                             ; preds = %4966
  %4968 = tail call i32 @vector_type_mode(ptr noundef nonnull %4898) #24
  %4969 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4975

4970:                                             ; preds = %4966
  %4971 = getelementptr inbounds %struct.tree_type, ptr %4898, i64 0, i32 6
  %4972 = load i32, ptr %4971, align 4
  %4973 = lshr i32 %4972, 16
  %4974 = and i32 %4973, 255
  br label %4975

4975:                                             ; preds = %4970, %4967
  %4976 = phi ptr [ %4969, %4967 ], [ %4898, %4970 ]
  %4977 = phi i32 [ %4968, %4967 ], [ %4974, %4970 ]
  %4978 = zext i32 %4977 to i64
  %4979 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4978
  %4980 = load i8, ptr %4979, align 1, !tbaa !17
  %4981 = icmp eq i8 %4980, 8
  br i1 %4981, label %5001, label %4982

4982:                                             ; preds = %4975
  %4983 = load i64, ptr %4976, align 8
  %4984 = and i64 %4983, 65535
  %4985 = icmp eq i64 %4984, 14
  br i1 %4985, label %4986, label %4989

4986:                                             ; preds = %4982
  %4987 = tail call i32 @vector_type_mode(ptr noundef nonnull %4976) #24
  %4988 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %4994

4989:                                             ; preds = %4982
  %4990 = getelementptr inbounds %struct.tree_type, ptr %4976, i64 0, i32 6
  %4991 = load i32, ptr %4990, align 4
  %4992 = lshr i32 %4991, 16
  %4993 = and i32 %4992, 255
  br label %4994

4994:                                             ; preds = %4989, %4986
  %4995 = phi ptr [ %4988, %4986 ], [ %4976, %4989 ]
  %4996 = phi i32 [ %4987, %4986 ], [ %4993, %4989 ]
  %4997 = zext i32 %4996 to i64
  %4998 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %4997
  %4999 = load i8, ptr %4998, align 1, !tbaa !17
  %5000 = icmp eq i8 %4999, 9
  br i1 %5000, label %5001, label %5013

5001:                                             ; preds = %4994, %4975
  %5002 = phi ptr [ %4995, %4994 ], [ %4976, %4975 ]
  %5003 = load i64, ptr %5002, align 8
  %5004 = and i64 %5003, 65535
  %5005 = icmp eq i64 %5004, 14
  br i1 %5005, label %5006, label %5008

5006:                                             ; preds = %5001
  %5007 = tail call i32 @vector_type_mode(ptr noundef nonnull %5002) #24
  br label %5030

5008:                                             ; preds = %5001
  %5009 = getelementptr inbounds %struct.tree_type, ptr %5002, i64 0, i32 6
  %5010 = load i32, ptr %5009, align 4
  %5011 = lshr i32 %5010, 16
  %5012 = and i32 %5011, 255
  br label %5030

5013:                                             ; preds = %4994
  %5014 = load i64, ptr %4995, align 8
  %5015 = and i64 %5014, 65535
  %5016 = icmp eq i64 %5015, 14
  br i1 %5016, label %5017, label %5019

5017:                                             ; preds = %5013
  %5018 = tail call i32 @vector_type_mode(ptr noundef nonnull %4995) #24
  br label %5024

5019:                                             ; preds = %5013
  %5020 = getelementptr inbounds %struct.tree_type, ptr %4995, i64 0, i32 6
  %5021 = load i32, ptr %5020, align 4
  %5022 = lshr i32 %5021, 16
  %5023 = and i32 %5022, 255
  br label %5024

5024:                                             ; preds = %5019, %5017
  %5025 = phi i32 [ %5018, %5017 ], [ %5023, %5019 ]
  %5026 = zext i32 %5025 to i64
  %5027 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5026
  %5028 = load i8, ptr %5027, align 1, !tbaa !17
  %5029 = zext i8 %5028 to i32
  br label %5030

5030:                                             ; preds = %5024, %5008, %5006, %4960, %4944, %4942
  %5031 = phi i32 [ %4965, %4960 ], [ %4943, %4942 ], [ %4948, %4944 ], [ %5029, %5024 ], [ %5007, %5006 ], [ %5012, %5008 ]
  %5032 = add i32 %5031, -38
  %5033 = zext i32 %5032 to i64
  %5034 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %5033
  %5035 = load ptr, ptr %5034, align 8, !tbaa !6
  %5036 = getelementptr inbounds %struct.real_format, ptr %5035, i64 0, i32 14
  %5037 = load i8, ptr %5036, align 1, !tbaa !37
  %5038 = icmp ne i8 %5037, 0
  %5039 = load i32, ptr @flag_signed_zeros, align 4
  %5040 = icmp ne i32 %5039, 0
  %5041 = select i1 %5038, i1 %5040, i1 false
  br i1 %5041, label %5042, label %5053

5042:                                             ; preds = %5030
  %5043 = load ptr, ptr %3237, align 8, !tbaa !17
  %5044 = load i64, ptr %5043, align 8
  %5045 = and i64 %5044, 65535
  %5046 = icmp eq i64 %5045, 13
  br i1 %5046, label %5047, label %5053

5047:                                             ; preds = %5042
  %5048 = getelementptr inbounds %struct.tree_common, ptr %5043, i64 0, i32 2
  %5049 = load ptr, ptr %5048, align 8, !tbaa !17
  %5050 = load i64, ptr %5049, align 8
  %5051 = and i64 %5050, 65535
  %5052 = icmp eq i64 %5051, 9
  br i1 %5052, label %5059, label %5053

5053:                                             ; preds = %5047, %5042, %5030, %4816
  %5054 = tail call i32 @real_minus_onep(ptr noundef nonnull %45) #24
  %5055 = icmp eq i32 %5054, 0
  br i1 %5055, label %5059, label %5056

5056:                                             ; preds = %5053
  %5057 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %5058 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %5057)
  br label %14075

5059:                                             ; preds = %4733, %5053, %5047
  %5060 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %5061 = icmp eq i32 %5060, 0
  br i1 %5061, label %5083, label %5062

5062:                                             ; preds = %5059
  %5063 = load i64, ptr %46, align 8
  %5064 = and i64 %5063, 65535
  %5065 = icmp eq i64 %5064, 75
  br i1 %5065, label %5066, label %5083

5066:                                             ; preds = %5062
  %5067 = load i64, ptr %45, align 8
  %5068 = and i64 %5067, 65535
  %5069 = icmp eq i64 %5068, 24
  br i1 %5069, label %5070, label %5083

5070:                                             ; preds = %5066
  %5071 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %5072 = load ptr, ptr %5071, align 8, !tbaa !17
  %5073 = load i64, ptr %5072, align 8
  %5074 = and i64 %5073, 65535
  %5075 = icmp eq i64 %5074, 24
  br i1 %5075, label %5076, label %5083

5076:                                             ; preds = %5070
  %5077 = tail call fastcc ptr @const_binop(i32 noundef 65, ptr noundef nonnull %5072, ptr noundef nonnull %45)
  %5078 = icmp eq ptr %5077, null
  br i1 %5078, label %5083, label %5079

5079:                                             ; preds = %5076
  %5080 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %5081 = load ptr, ptr %5080, align 8, !tbaa !17
  %5082 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef nonnull %2, ptr noundef nonnull %5077, ptr noundef %5081)
  br label %14075

5083:                                             ; preds = %5076, %5070, %5066, %5062, %5059
  %5084 = tail call i32 @operand_equal_p(ptr noundef %46, ptr noundef %45, i32 noundef 0)
  %5085 = icmp eq i32 %5084, 0
  br i1 %5085, label %5092, label %5086

5086:                                             ; preds = %5083
  %5087 = tail call ptr @fold_strip_sign_ops(ptr noundef %46)
  %5088 = icmp eq ptr %5087, null
  br i1 %5088, label %5092, label %5089

5089:                                             ; preds = %5086
  %5090 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %5087)
  %5091 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %5090, ptr noundef %5090)
  br label %14075

5092:                                             ; preds = %5086, %5083
  %5093 = load ptr, ptr %3237, align 8, !tbaa !17
  %5094 = load i64, ptr %5093, align 8
  %5095 = and i64 %5094, 65535
  %5096 = icmp eq i64 %5095, 14
  br i1 %5096, label %5097, label %5100

5097:                                             ; preds = %5092
  %5098 = tail call i32 @vector_type_mode(ptr noundef nonnull %5093) #24
  %5099 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5105

5100:                                             ; preds = %5092
  %5101 = getelementptr inbounds %struct.tree_type, ptr %5093, i64 0, i32 6
  %5102 = load i32, ptr %5101, align 4
  %5103 = lshr i32 %5102, 16
  %5104 = and i32 %5103, 255
  br label %5105

5105:                                             ; preds = %5100, %5097
  %5106 = phi ptr [ %5099, %5097 ], [ %5093, %5100 ]
  %5107 = phi i32 [ %5098, %5097 ], [ %5104, %5100 ]
  %5108 = zext i32 %5107 to i64
  %5109 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5108
  %5110 = load i8, ptr %5109, align 1, !tbaa !17
  %5111 = icmp eq i8 %5110, 8
  br i1 %5111, label %5169, label %5112

5112:                                             ; preds = %5105
  %5113 = load i64, ptr %5106, align 8
  %5114 = and i64 %5113, 65535
  %5115 = icmp eq i64 %5114, 14
  br i1 %5115, label %5116, label %5119

5116:                                             ; preds = %5112
  %5117 = tail call i32 @vector_type_mode(ptr noundef nonnull %5106) #24
  %5118 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5124

5119:                                             ; preds = %5112
  %5120 = getelementptr inbounds %struct.tree_type, ptr %5106, i64 0, i32 6
  %5121 = load i32, ptr %5120, align 4
  %5122 = lshr i32 %5121, 16
  %5123 = and i32 %5122, 255
  br label %5124

5124:                                             ; preds = %5119, %5116
  %5125 = phi ptr [ %5118, %5116 ], [ %5106, %5119 ]
  %5126 = phi i32 [ %5117, %5116 ], [ %5123, %5119 ]
  %5127 = zext i32 %5126 to i64
  %5128 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5127
  %5129 = load i8, ptr %5128, align 1, !tbaa !17
  %5130 = icmp eq i8 %5129, 9
  br i1 %5130, label %5169, label %5131

5131:                                             ; preds = %5124
  %5132 = load i64, ptr %5125, align 8
  %5133 = and i64 %5132, 65535
  %5134 = icmp eq i64 %5133, 14
  br i1 %5134, label %5135, label %5138

5135:                                             ; preds = %5131
  %5136 = tail call i32 @vector_type_mode(ptr noundef nonnull %5125) #24
  %5137 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5143

5138:                                             ; preds = %5131
  %5139 = getelementptr inbounds %struct.tree_type, ptr %5125, i64 0, i32 6
  %5140 = load i32, ptr %5139, align 4
  %5141 = lshr i32 %5140, 16
  %5142 = and i32 %5141, 255
  br label %5143

5143:                                             ; preds = %5138, %5135
  %5144 = phi ptr [ %5137, %5135 ], [ %5125, %5138 ]
  %5145 = phi i32 [ %5136, %5135 ], [ %5142, %5138 ]
  %5146 = zext i32 %5145 to i64
  %5147 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5146
  %5148 = load i8, ptr %5147, align 1, !tbaa !17
  %5149 = icmp eq i8 %5148, 11
  br i1 %5149, label %5169, label %5150

5150:                                             ; preds = %5143
  %5151 = load i64, ptr %5144, align 8
  %5152 = and i64 %5151, 65535
  %5153 = icmp eq i64 %5152, 14
  br i1 %5153, label %5154, label %5157

5154:                                             ; preds = %5150
  %5155 = tail call i32 @vector_type_mode(ptr noundef nonnull %5144) #24
  %5156 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5162

5157:                                             ; preds = %5150
  %5158 = getelementptr inbounds %struct.tree_type, ptr %5144, i64 0, i32 6
  %5159 = load i32, ptr %5158, align 4
  %5160 = lshr i32 %5159, 16
  %5161 = and i32 %5160, 255
  br label %5162

5162:                                             ; preds = %5157, %5154
  %5163 = phi ptr [ %5156, %5154 ], [ %5144, %5157 ]
  %5164 = phi i32 [ %5155, %5154 ], [ %5161, %5157 ]
  %5165 = zext i32 %5164 to i64
  %5166 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5165
  %5167 = load i8, ptr %5166, align 1, !tbaa !17
  %5168 = icmp eq i8 %5167, 17
  br i1 %5168, label %5169, label %5389

5169:                                             ; preds = %5162, %5143, %5124, %5105
  %5170 = phi ptr [ %5144, %5143 ], [ %5125, %5124 ], [ %5106, %5105 ], [ %5163, %5162 ]
  %5171 = load i64, ptr %5170, align 8
  %5172 = and i64 %5171, 65535
  %5173 = icmp eq i64 %5172, 14
  br i1 %5173, label %5174, label %5177

5174:                                             ; preds = %5169
  %5175 = tail call i32 @vector_type_mode(ptr noundef nonnull %5170) #24
  %5176 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5182

5177:                                             ; preds = %5169
  %5178 = getelementptr inbounds %struct.tree_type, ptr %5170, i64 0, i32 6
  %5179 = load i32, ptr %5178, align 4
  %5180 = lshr i32 %5179, 16
  %5181 = and i32 %5180, 255
  br label %5182

5182:                                             ; preds = %5177, %5174
  %5183 = phi ptr [ %5176, %5174 ], [ %5170, %5177 ]
  %5184 = phi i32 [ %5175, %5174 ], [ %5181, %5177 ]
  %5185 = zext i32 %5184 to i64
  %5186 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5185
  %5187 = load i8, ptr %5186, align 1, !tbaa !17
  %5188 = icmp eq i8 %5187, 8
  br i1 %5188, label %5208, label %5189

5189:                                             ; preds = %5182
  %5190 = load i64, ptr %5183, align 8
  %5191 = and i64 %5190, 65535
  %5192 = icmp eq i64 %5191, 14
  br i1 %5192, label %5193, label %5196

5193:                                             ; preds = %5189
  %5194 = tail call i32 @vector_type_mode(ptr noundef nonnull %5183) #24
  %5195 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5201

5196:                                             ; preds = %5189
  %5197 = getelementptr inbounds %struct.tree_type, ptr %5183, i64 0, i32 6
  %5198 = load i32, ptr %5197, align 4
  %5199 = lshr i32 %5198, 16
  %5200 = and i32 %5199, 255
  br label %5201

5201:                                             ; preds = %5196, %5193
  %5202 = phi ptr [ %5195, %5193 ], [ %5183, %5196 ]
  %5203 = phi i32 [ %5194, %5193 ], [ %5200, %5196 ]
  %5204 = zext i32 %5203 to i64
  %5205 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5204
  %5206 = load i8, ptr %5205, align 1, !tbaa !17
  %5207 = icmp eq i8 %5206, 9
  br i1 %5207, label %5208, label %5220

5208:                                             ; preds = %5201, %5182
  %5209 = phi ptr [ %5202, %5201 ], [ %5183, %5182 ]
  %5210 = load i64, ptr %5209, align 8
  %5211 = and i64 %5210, 65535
  %5212 = icmp eq i64 %5211, 14
  br i1 %5212, label %5213, label %5215

5213:                                             ; preds = %5208
  %5214 = tail call i32 @vector_type_mode(ptr noundef nonnull %5209) #24
  br label %5237

5215:                                             ; preds = %5208
  %5216 = getelementptr inbounds %struct.tree_type, ptr %5209, i64 0, i32 6
  %5217 = load i32, ptr %5216, align 4
  %5218 = lshr i32 %5217, 16
  %5219 = and i32 %5218, 255
  br label %5237

5220:                                             ; preds = %5201
  %5221 = load i64, ptr %5202, align 8
  %5222 = and i64 %5221, 65535
  %5223 = icmp eq i64 %5222, 14
  br i1 %5223, label %5224, label %5226

5224:                                             ; preds = %5220
  %5225 = tail call i32 @vector_type_mode(ptr noundef nonnull %5202) #24
  br label %5231

5226:                                             ; preds = %5220
  %5227 = getelementptr inbounds %struct.tree_type, ptr %5202, i64 0, i32 6
  %5228 = load i32, ptr %5227, align 4
  %5229 = lshr i32 %5228, 16
  %5230 = and i32 %5229, 255
  br label %5231

5231:                                             ; preds = %5226, %5224
  %5232 = phi i32 [ %5225, %5224 ], [ %5230, %5226 ]
  %5233 = zext i32 %5232 to i64
  %5234 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5233
  %5235 = load i8, ptr %5234, align 1, !tbaa !17
  %5236 = zext i8 %5235 to i32
  br label %5237

5237:                                             ; preds = %5213, %5215, %5231
  %5238 = phi i32 [ %5236, %5231 ], [ %5214, %5213 ], [ %5219, %5215 ]
  %5239 = zext i32 %5238 to i64
  %5240 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5239
  %5241 = load i8, ptr %5240, align 1, !tbaa !17
  %5242 = icmp eq i8 %5241, 9
  %5243 = load ptr, ptr %3237, align 8, !tbaa !17
  %5244 = load i64, ptr %5243, align 8
  %5245 = and i64 %5244, 65535
  %5246 = icmp eq i64 %5245, 14
  br i1 %5242, label %5247, label %5311

5247:                                             ; preds = %5237
  br i1 %5246, label %5248, label %5251

5248:                                             ; preds = %5247
  %5249 = tail call i32 @vector_type_mode(ptr noundef nonnull %5243) #24
  %5250 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5256

5251:                                             ; preds = %5247
  %5252 = getelementptr inbounds %struct.tree_type, ptr %5243, i64 0, i32 6
  %5253 = load i32, ptr %5252, align 4
  %5254 = lshr i32 %5253, 16
  %5255 = and i32 %5254, 255
  br label %5256

5256:                                             ; preds = %5251, %5248
  %5257 = phi ptr [ %5250, %5248 ], [ %5243, %5251 ]
  %5258 = phi i32 [ %5249, %5248 ], [ %5255, %5251 ]
  %5259 = zext i32 %5258 to i64
  %5260 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5259
  %5261 = load i8, ptr %5260, align 1, !tbaa !17
  %5262 = icmp eq i8 %5261, 8
  br i1 %5262, label %5282, label %5263

5263:                                             ; preds = %5256
  %5264 = load i64, ptr %5257, align 8
  %5265 = and i64 %5264, 65535
  %5266 = icmp eq i64 %5265, 14
  br i1 %5266, label %5267, label %5270

5267:                                             ; preds = %5263
  %5268 = tail call i32 @vector_type_mode(ptr noundef nonnull %5257) #24
  %5269 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5275

5270:                                             ; preds = %5263
  %5271 = getelementptr inbounds %struct.tree_type, ptr %5257, i64 0, i32 6
  %5272 = load i32, ptr %5271, align 4
  %5273 = lshr i32 %5272, 16
  %5274 = and i32 %5273, 255
  br label %5275

5275:                                             ; preds = %5270, %5267
  %5276 = phi ptr [ %5269, %5267 ], [ %5257, %5270 ]
  %5277 = phi i32 [ %5268, %5267 ], [ %5274, %5270 ]
  %5278 = zext i32 %5277 to i64
  %5279 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5278
  %5280 = load i8, ptr %5279, align 1, !tbaa !17
  %5281 = icmp eq i8 %5280, 9
  br i1 %5281, label %5282, label %5294

5282:                                             ; preds = %5275, %5256
  %5283 = phi ptr [ %5276, %5275 ], [ %5257, %5256 ]
  %5284 = load i64, ptr %5283, align 8
  %5285 = and i64 %5284, 65535
  %5286 = icmp eq i64 %5285, 14
  br i1 %5286, label %5287, label %5289

5287:                                             ; preds = %5282
  %5288 = tail call i32 @vector_type_mode(ptr noundef nonnull %5283) #24
  br label %5375

5289:                                             ; preds = %5282
  %5290 = getelementptr inbounds %struct.tree_type, ptr %5283, i64 0, i32 6
  %5291 = load i32, ptr %5290, align 4
  %5292 = lshr i32 %5291, 16
  %5293 = and i32 %5292, 255
  br label %5375

5294:                                             ; preds = %5275
  %5295 = load i64, ptr %5276, align 8
  %5296 = and i64 %5295, 65535
  %5297 = icmp eq i64 %5296, 14
  br i1 %5297, label %5298, label %5300

5298:                                             ; preds = %5294
  %5299 = tail call i32 @vector_type_mode(ptr noundef nonnull %5276) #24
  br label %5305

5300:                                             ; preds = %5294
  %5301 = getelementptr inbounds %struct.tree_type, ptr %5276, i64 0, i32 6
  %5302 = load i32, ptr %5301, align 4
  %5303 = lshr i32 %5302, 16
  %5304 = and i32 %5303, 255
  br label %5305

5305:                                             ; preds = %5300, %5298
  %5306 = phi i32 [ %5299, %5298 ], [ %5304, %5300 ]
  %5307 = zext i32 %5306 to i64
  %5308 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5307
  %5309 = load i8, ptr %5308, align 1, !tbaa !17
  %5310 = zext i8 %5309 to i32
  br label %5375

5311:                                             ; preds = %5237
  br i1 %5246, label %5312, label %5315

5312:                                             ; preds = %5311
  %5313 = tail call i32 @vector_type_mode(ptr noundef nonnull %5243) #24
  %5314 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5320

5315:                                             ; preds = %5311
  %5316 = getelementptr inbounds %struct.tree_type, ptr %5243, i64 0, i32 6
  %5317 = load i32, ptr %5316, align 4
  %5318 = lshr i32 %5317, 16
  %5319 = and i32 %5318, 255
  br label %5320

5320:                                             ; preds = %5315, %5312
  %5321 = phi ptr [ %5314, %5312 ], [ %5243, %5315 ]
  %5322 = phi i32 [ %5313, %5312 ], [ %5319, %5315 ]
  %5323 = zext i32 %5322 to i64
  %5324 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5323
  %5325 = load i8, ptr %5324, align 1, !tbaa !17
  %5326 = icmp eq i8 %5325, 8
  br i1 %5326, label %5346, label %5327

5327:                                             ; preds = %5320
  %5328 = load i64, ptr %5321, align 8
  %5329 = and i64 %5328, 65535
  %5330 = icmp eq i64 %5329, 14
  br i1 %5330, label %5331, label %5334

5331:                                             ; preds = %5327
  %5332 = tail call i32 @vector_type_mode(ptr noundef nonnull %5321) #24
  %5333 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5339

5334:                                             ; preds = %5327
  %5335 = getelementptr inbounds %struct.tree_type, ptr %5321, i64 0, i32 6
  %5336 = load i32, ptr %5335, align 4
  %5337 = lshr i32 %5336, 16
  %5338 = and i32 %5337, 255
  br label %5339

5339:                                             ; preds = %5334, %5331
  %5340 = phi ptr [ %5333, %5331 ], [ %5321, %5334 ]
  %5341 = phi i32 [ %5332, %5331 ], [ %5338, %5334 ]
  %5342 = zext i32 %5341 to i64
  %5343 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5342
  %5344 = load i8, ptr %5343, align 1, !tbaa !17
  %5345 = icmp eq i8 %5344, 9
  br i1 %5345, label %5346, label %5358

5346:                                             ; preds = %5339, %5320
  %5347 = phi ptr [ %5340, %5339 ], [ %5321, %5320 ]
  %5348 = load i64, ptr %5347, align 8
  %5349 = and i64 %5348, 65535
  %5350 = icmp eq i64 %5349, 14
  br i1 %5350, label %5351, label %5353

5351:                                             ; preds = %5346
  %5352 = tail call i32 @vector_type_mode(ptr noundef nonnull %5347) #24
  br label %5375

5353:                                             ; preds = %5346
  %5354 = getelementptr inbounds %struct.tree_type, ptr %5347, i64 0, i32 6
  %5355 = load i32, ptr %5354, align 4
  %5356 = lshr i32 %5355, 16
  %5357 = and i32 %5356, 255
  br label %5375

5358:                                             ; preds = %5339
  %5359 = load i64, ptr %5340, align 8
  %5360 = and i64 %5359, 65535
  %5361 = icmp eq i64 %5360, 14
  br i1 %5361, label %5362, label %5364

5362:                                             ; preds = %5358
  %5363 = tail call i32 @vector_type_mode(ptr noundef nonnull %5340) #24
  br label %5369

5364:                                             ; preds = %5358
  %5365 = getelementptr inbounds %struct.tree_type, ptr %5340, i64 0, i32 6
  %5366 = load i32, ptr %5365, align 4
  %5367 = lshr i32 %5366, 16
  %5368 = and i32 %5367, 255
  br label %5369

5369:                                             ; preds = %5364, %5362
  %5370 = phi i32 [ %5363, %5362 ], [ %5368, %5364 ]
  %5371 = zext i32 %5370 to i64
  %5372 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5371
  %5373 = load i8, ptr %5372, align 1, !tbaa !17
  %5374 = zext i8 %5373 to i32
  br label %5375

5375:                                             ; preds = %5369, %5353, %5351, %5305, %5289, %5287
  %5376 = phi i32 [ %5310, %5305 ], [ %5288, %5287 ], [ %5293, %5289 ], [ %5374, %5369 ], [ %5352, %5351 ], [ %5357, %5353 ]
  %5377 = add i32 %5376, -38
  %5378 = zext i32 %5377 to i64
  %5379 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %5378
  %5380 = load ptr, ptr %5379, align 8, !tbaa !6
  %5381 = getelementptr inbounds %struct.real_format, ptr %5380, i64 0, i32 11
  %5382 = load i8, ptr %5381, align 2, !tbaa !36
  %5383 = icmp eq i8 %5382, 0
  %5384 = load i32, ptr @flag_finite_math_only, align 4
  %5385 = icmp ne i32 %5384, 0
  %5386 = select i1 %5383, i1 true, i1 %5385
  br i1 %5386, label %5387, label %5728

5387:                                             ; preds = %5375
  %5388 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5389

5389:                                             ; preds = %5387, %5162
  %5390 = phi ptr [ %5388, %5387 ], [ %5163, %5162 ]
  %5391 = load i64, ptr %5390, align 8
  %5392 = and i64 %5391, 65535
  %5393 = icmp eq i64 %5392, 14
  br i1 %5393, label %5394, label %5397

5394:                                             ; preds = %5389
  %5395 = tail call i32 @vector_type_mode(ptr noundef nonnull %5390) #24
  %5396 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5402

5397:                                             ; preds = %5389
  %5398 = getelementptr inbounds %struct.tree_type, ptr %5390, i64 0, i32 6
  %5399 = load i32, ptr %5398, align 4
  %5400 = lshr i32 %5399, 16
  %5401 = and i32 %5400, 255
  br label %5402

5402:                                             ; preds = %5397, %5394
  %5403 = phi ptr [ %5396, %5394 ], [ %5390, %5397 ]
  %5404 = phi i32 [ %5395, %5394 ], [ %5401, %5397 ]
  %5405 = zext i32 %5404 to i64
  %5406 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5405
  %5407 = load i8, ptr %5406, align 1, !tbaa !17
  %5408 = icmp eq i8 %5407, 8
  br i1 %5408, label %5466, label %5409

5409:                                             ; preds = %5402
  %5410 = load i64, ptr %5403, align 8
  %5411 = and i64 %5410, 65535
  %5412 = icmp eq i64 %5411, 14
  br i1 %5412, label %5413, label %5416

5413:                                             ; preds = %5409
  %5414 = tail call i32 @vector_type_mode(ptr noundef nonnull %5403) #24
  %5415 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5421

5416:                                             ; preds = %5409
  %5417 = getelementptr inbounds %struct.tree_type, ptr %5403, i64 0, i32 6
  %5418 = load i32, ptr %5417, align 4
  %5419 = lshr i32 %5418, 16
  %5420 = and i32 %5419, 255
  br label %5421

5421:                                             ; preds = %5416, %5413
  %5422 = phi ptr [ %5415, %5413 ], [ %5403, %5416 ]
  %5423 = phi i32 [ %5414, %5413 ], [ %5420, %5416 ]
  %5424 = zext i32 %5423 to i64
  %5425 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5424
  %5426 = load i8, ptr %5425, align 1, !tbaa !17
  %5427 = icmp eq i8 %5426, 9
  br i1 %5427, label %5466, label %5428

5428:                                             ; preds = %5421
  %5429 = load i64, ptr %5422, align 8
  %5430 = and i64 %5429, 65535
  %5431 = icmp eq i64 %5430, 14
  br i1 %5431, label %5432, label %5435

5432:                                             ; preds = %5428
  %5433 = tail call i32 @vector_type_mode(ptr noundef nonnull %5422) #24
  %5434 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5440

5435:                                             ; preds = %5428
  %5436 = getelementptr inbounds %struct.tree_type, ptr %5422, i64 0, i32 6
  %5437 = load i32, ptr %5436, align 4
  %5438 = lshr i32 %5437, 16
  %5439 = and i32 %5438, 255
  br label %5440

5440:                                             ; preds = %5435, %5432
  %5441 = phi ptr [ %5434, %5432 ], [ %5422, %5435 ]
  %5442 = phi i32 [ %5433, %5432 ], [ %5439, %5435 ]
  %5443 = zext i32 %5442 to i64
  %5444 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5443
  %5445 = load i8, ptr %5444, align 1, !tbaa !17
  %5446 = icmp eq i8 %5445, 11
  br i1 %5446, label %5466, label %5447

5447:                                             ; preds = %5440
  %5448 = load i64, ptr %5441, align 8
  %5449 = and i64 %5448, 65535
  %5450 = icmp eq i64 %5449, 14
  br i1 %5450, label %5451, label %5454

5451:                                             ; preds = %5447
  %5452 = tail call i32 @vector_type_mode(ptr noundef nonnull %5441) #24
  %5453 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5459

5454:                                             ; preds = %5447
  %5455 = getelementptr inbounds %struct.tree_type, ptr %5441, i64 0, i32 6
  %5456 = load i32, ptr %5455, align 4
  %5457 = lshr i32 %5456, 16
  %5458 = and i32 %5457, 255
  br label %5459

5459:                                             ; preds = %5454, %5451
  %5460 = phi ptr [ %5453, %5451 ], [ %5441, %5454 ]
  %5461 = phi i32 [ %5452, %5451 ], [ %5458, %5454 ]
  %5462 = zext i32 %5461 to i64
  %5463 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5462
  %5464 = load i8, ptr %5463, align 1, !tbaa !17
  %5465 = icmp eq i8 %5464, 17
  br i1 %5465, label %5466, label %5686

5466:                                             ; preds = %5459, %5440, %5421, %5402
  %5467 = phi ptr [ %5441, %5440 ], [ %5422, %5421 ], [ %5403, %5402 ], [ %5460, %5459 ]
  %5468 = load i64, ptr %5467, align 8
  %5469 = and i64 %5468, 65535
  %5470 = icmp eq i64 %5469, 14
  br i1 %5470, label %5471, label %5474

5471:                                             ; preds = %5466
  %5472 = tail call i32 @vector_type_mode(ptr noundef nonnull %5467) #24
  %5473 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5479

5474:                                             ; preds = %5466
  %5475 = getelementptr inbounds %struct.tree_type, ptr %5467, i64 0, i32 6
  %5476 = load i32, ptr %5475, align 4
  %5477 = lshr i32 %5476, 16
  %5478 = and i32 %5477, 255
  br label %5479

5479:                                             ; preds = %5474, %5471
  %5480 = phi ptr [ %5473, %5471 ], [ %5467, %5474 ]
  %5481 = phi i32 [ %5472, %5471 ], [ %5478, %5474 ]
  %5482 = zext i32 %5481 to i64
  %5483 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5482
  %5484 = load i8, ptr %5483, align 1, !tbaa !17
  %5485 = icmp eq i8 %5484, 8
  br i1 %5485, label %5505, label %5486

5486:                                             ; preds = %5479
  %5487 = load i64, ptr %5480, align 8
  %5488 = and i64 %5487, 65535
  %5489 = icmp eq i64 %5488, 14
  br i1 %5489, label %5490, label %5493

5490:                                             ; preds = %5486
  %5491 = tail call i32 @vector_type_mode(ptr noundef nonnull %5480) #24
  %5492 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5498

5493:                                             ; preds = %5486
  %5494 = getelementptr inbounds %struct.tree_type, ptr %5480, i64 0, i32 6
  %5495 = load i32, ptr %5494, align 4
  %5496 = lshr i32 %5495, 16
  %5497 = and i32 %5496, 255
  br label %5498

5498:                                             ; preds = %5493, %5490
  %5499 = phi ptr [ %5492, %5490 ], [ %5480, %5493 ]
  %5500 = phi i32 [ %5491, %5490 ], [ %5497, %5493 ]
  %5501 = zext i32 %5500 to i64
  %5502 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5501
  %5503 = load i8, ptr %5502, align 1, !tbaa !17
  %5504 = icmp eq i8 %5503, 9
  br i1 %5504, label %5505, label %5517

5505:                                             ; preds = %5498, %5479
  %5506 = phi ptr [ %5499, %5498 ], [ %5480, %5479 ]
  %5507 = load i64, ptr %5506, align 8
  %5508 = and i64 %5507, 65535
  %5509 = icmp eq i64 %5508, 14
  br i1 %5509, label %5510, label %5512

5510:                                             ; preds = %5505
  %5511 = tail call i32 @vector_type_mode(ptr noundef nonnull %5506) #24
  br label %5534

5512:                                             ; preds = %5505
  %5513 = getelementptr inbounds %struct.tree_type, ptr %5506, i64 0, i32 6
  %5514 = load i32, ptr %5513, align 4
  %5515 = lshr i32 %5514, 16
  %5516 = and i32 %5515, 255
  br label %5534

5517:                                             ; preds = %5498
  %5518 = load i64, ptr %5499, align 8
  %5519 = and i64 %5518, 65535
  %5520 = icmp eq i64 %5519, 14
  br i1 %5520, label %5521, label %5523

5521:                                             ; preds = %5517
  %5522 = tail call i32 @vector_type_mode(ptr noundef nonnull %5499) #24
  br label %5528

5523:                                             ; preds = %5517
  %5524 = getelementptr inbounds %struct.tree_type, ptr %5499, i64 0, i32 6
  %5525 = load i32, ptr %5524, align 4
  %5526 = lshr i32 %5525, 16
  %5527 = and i32 %5526, 255
  br label %5528

5528:                                             ; preds = %5523, %5521
  %5529 = phi i32 [ %5522, %5521 ], [ %5527, %5523 ]
  %5530 = zext i32 %5529 to i64
  %5531 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5530
  %5532 = load i8, ptr %5531, align 1, !tbaa !17
  %5533 = zext i8 %5532 to i32
  br label %5534

5534:                                             ; preds = %5510, %5512, %5528
  %5535 = phi i32 [ %5533, %5528 ], [ %5511, %5510 ], [ %5516, %5512 ]
  %5536 = zext i32 %5535 to i64
  %5537 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5536
  %5538 = load i8, ptr %5537, align 1, !tbaa !17
  %5539 = icmp eq i8 %5538, 9
  %5540 = load ptr, ptr %3237, align 8, !tbaa !17
  %5541 = load i64, ptr %5540, align 8
  %5542 = and i64 %5541, 65535
  %5543 = icmp eq i64 %5542, 14
  br i1 %5539, label %5544, label %5608

5544:                                             ; preds = %5534
  br i1 %5543, label %5545, label %5548

5545:                                             ; preds = %5544
  %5546 = tail call i32 @vector_type_mode(ptr noundef nonnull %5540) #24
  %5547 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5553

5548:                                             ; preds = %5544
  %5549 = getelementptr inbounds %struct.tree_type, ptr %5540, i64 0, i32 6
  %5550 = load i32, ptr %5549, align 4
  %5551 = lshr i32 %5550, 16
  %5552 = and i32 %5551, 255
  br label %5553

5553:                                             ; preds = %5548, %5545
  %5554 = phi ptr [ %5547, %5545 ], [ %5540, %5548 ]
  %5555 = phi i32 [ %5546, %5545 ], [ %5552, %5548 ]
  %5556 = zext i32 %5555 to i64
  %5557 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5556
  %5558 = load i8, ptr %5557, align 1, !tbaa !17
  %5559 = icmp eq i8 %5558, 8
  br i1 %5559, label %5579, label %5560

5560:                                             ; preds = %5553
  %5561 = load i64, ptr %5554, align 8
  %5562 = and i64 %5561, 65535
  %5563 = icmp eq i64 %5562, 14
  br i1 %5563, label %5564, label %5567

5564:                                             ; preds = %5560
  %5565 = tail call i32 @vector_type_mode(ptr noundef nonnull %5554) #24
  %5566 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5572

5567:                                             ; preds = %5560
  %5568 = getelementptr inbounds %struct.tree_type, ptr %5554, i64 0, i32 6
  %5569 = load i32, ptr %5568, align 4
  %5570 = lshr i32 %5569, 16
  %5571 = and i32 %5570, 255
  br label %5572

5572:                                             ; preds = %5567, %5564
  %5573 = phi ptr [ %5566, %5564 ], [ %5554, %5567 ]
  %5574 = phi i32 [ %5565, %5564 ], [ %5571, %5567 ]
  %5575 = zext i32 %5574 to i64
  %5576 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5575
  %5577 = load i8, ptr %5576, align 1, !tbaa !17
  %5578 = icmp eq i8 %5577, 9
  br i1 %5578, label %5579, label %5591

5579:                                             ; preds = %5572, %5553
  %5580 = phi ptr [ %5573, %5572 ], [ %5554, %5553 ]
  %5581 = load i64, ptr %5580, align 8
  %5582 = and i64 %5581, 65535
  %5583 = icmp eq i64 %5582, 14
  br i1 %5583, label %5584, label %5586

5584:                                             ; preds = %5579
  %5585 = tail call i32 @vector_type_mode(ptr noundef nonnull %5580) #24
  br label %5672

5586:                                             ; preds = %5579
  %5587 = getelementptr inbounds %struct.tree_type, ptr %5580, i64 0, i32 6
  %5588 = load i32, ptr %5587, align 4
  %5589 = lshr i32 %5588, 16
  %5590 = and i32 %5589, 255
  br label %5672

5591:                                             ; preds = %5572
  %5592 = load i64, ptr %5573, align 8
  %5593 = and i64 %5592, 65535
  %5594 = icmp eq i64 %5593, 14
  br i1 %5594, label %5595, label %5597

5595:                                             ; preds = %5591
  %5596 = tail call i32 @vector_type_mode(ptr noundef nonnull %5573) #24
  br label %5602

5597:                                             ; preds = %5591
  %5598 = getelementptr inbounds %struct.tree_type, ptr %5573, i64 0, i32 6
  %5599 = load i32, ptr %5598, align 4
  %5600 = lshr i32 %5599, 16
  %5601 = and i32 %5600, 255
  br label %5602

5602:                                             ; preds = %5597, %5595
  %5603 = phi i32 [ %5596, %5595 ], [ %5601, %5597 ]
  %5604 = zext i32 %5603 to i64
  %5605 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5604
  %5606 = load i8, ptr %5605, align 1, !tbaa !17
  %5607 = zext i8 %5606 to i32
  br label %5672

5608:                                             ; preds = %5534
  br i1 %5543, label %5609, label %5612

5609:                                             ; preds = %5608
  %5610 = tail call i32 @vector_type_mode(ptr noundef nonnull %5540) #24
  %5611 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5617

5612:                                             ; preds = %5608
  %5613 = getelementptr inbounds %struct.tree_type, ptr %5540, i64 0, i32 6
  %5614 = load i32, ptr %5613, align 4
  %5615 = lshr i32 %5614, 16
  %5616 = and i32 %5615, 255
  br label %5617

5617:                                             ; preds = %5612, %5609
  %5618 = phi ptr [ %5611, %5609 ], [ %5540, %5612 ]
  %5619 = phi i32 [ %5610, %5609 ], [ %5616, %5612 ]
  %5620 = zext i32 %5619 to i64
  %5621 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5620
  %5622 = load i8, ptr %5621, align 1, !tbaa !17
  %5623 = icmp eq i8 %5622, 8
  br i1 %5623, label %5643, label %5624

5624:                                             ; preds = %5617
  %5625 = load i64, ptr %5618, align 8
  %5626 = and i64 %5625, 65535
  %5627 = icmp eq i64 %5626, 14
  br i1 %5627, label %5628, label %5631

5628:                                             ; preds = %5624
  %5629 = tail call i32 @vector_type_mode(ptr noundef nonnull %5618) #24
  %5630 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5636

5631:                                             ; preds = %5624
  %5632 = getelementptr inbounds %struct.tree_type, ptr %5618, i64 0, i32 6
  %5633 = load i32, ptr %5632, align 4
  %5634 = lshr i32 %5633, 16
  %5635 = and i32 %5634, 255
  br label %5636

5636:                                             ; preds = %5631, %5628
  %5637 = phi ptr [ %5630, %5628 ], [ %5618, %5631 ]
  %5638 = phi i32 [ %5629, %5628 ], [ %5635, %5631 ]
  %5639 = zext i32 %5638 to i64
  %5640 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5639
  %5641 = load i8, ptr %5640, align 1, !tbaa !17
  %5642 = icmp eq i8 %5641, 9
  br i1 %5642, label %5643, label %5655

5643:                                             ; preds = %5636, %5617
  %5644 = phi ptr [ %5637, %5636 ], [ %5618, %5617 ]
  %5645 = load i64, ptr %5644, align 8
  %5646 = and i64 %5645, 65535
  %5647 = icmp eq i64 %5646, 14
  br i1 %5647, label %5648, label %5650

5648:                                             ; preds = %5643
  %5649 = tail call i32 @vector_type_mode(ptr noundef nonnull %5644) #24
  br label %5672

5650:                                             ; preds = %5643
  %5651 = getelementptr inbounds %struct.tree_type, ptr %5644, i64 0, i32 6
  %5652 = load i32, ptr %5651, align 4
  %5653 = lshr i32 %5652, 16
  %5654 = and i32 %5653, 255
  br label %5672

5655:                                             ; preds = %5636
  %5656 = load i64, ptr %5637, align 8
  %5657 = and i64 %5656, 65535
  %5658 = icmp eq i64 %5657, 14
  br i1 %5658, label %5659, label %5661

5659:                                             ; preds = %5655
  %5660 = tail call i32 @vector_type_mode(ptr noundef nonnull %5637) #24
  br label %5666

5661:                                             ; preds = %5655
  %5662 = getelementptr inbounds %struct.tree_type, ptr %5637, i64 0, i32 6
  %5663 = load i32, ptr %5662, align 4
  %5664 = lshr i32 %5663, 16
  %5665 = and i32 %5664, 255
  br label %5666

5666:                                             ; preds = %5661, %5659
  %5667 = phi i32 [ %5660, %5659 ], [ %5665, %5661 ]
  %5668 = zext i32 %5667 to i64
  %5669 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5668
  %5670 = load i8, ptr %5669, align 1, !tbaa !17
  %5671 = zext i8 %5670 to i32
  br label %5672

5672:                                             ; preds = %5666, %5650, %5648, %5602, %5586, %5584
  %5673 = phi i32 [ %5607, %5602 ], [ %5585, %5584 ], [ %5590, %5586 ], [ %5671, %5666 ], [ %5649, %5648 ], [ %5654, %5650 ]
  %5674 = add i32 %5673, -38
  %5675 = zext i32 %5674 to i64
  %5676 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %5675
  %5677 = load ptr, ptr %5676, align 8, !tbaa !6
  %5678 = getelementptr inbounds %struct.real_format, ptr %5677, i64 0, i32 14
  %5679 = load i8, ptr %5678, align 1, !tbaa !37
  %5680 = icmp ne i8 %5679, 0
  %5681 = load i32, ptr @flag_signed_zeros, align 4
  %5682 = icmp ne i32 %5681, 0
  %5683 = select i1 %5680, i1 %5682, i1 false
  br i1 %5683, label %5728, label %5684

5684:                                             ; preds = %5672
  %5685 = load ptr, ptr %3237, align 8, !tbaa !17
  br label %5686

5686:                                             ; preds = %5684, %5459
  %5687 = phi ptr [ %5685, %5684 ], [ %5460, %5459 ]
  %5688 = load i64, ptr %5687, align 8
  %5689 = and i64 %5688, 65535
  %5690 = icmp eq i64 %5689, 13
  br i1 %5690, label %5691, label %5728

5691:                                             ; preds = %5686
  %5692 = getelementptr inbounds %struct.tree_common, ptr %5687, i64 0, i32 2
  %5693 = load ptr, ptr %5692, align 8, !tbaa !17
  %5694 = load i64, ptr %5693, align 8
  %5695 = and i64 %5694, 65535
  %5696 = icmp eq i64 %5695, 9
  br i1 %5696, label %5697, label %5728

5697:                                             ; preds = %5691
  %5698 = load i64, ptr %45, align 8
  %5699 = and i64 %5698, 65535
  %5700 = icmp eq i64 %5699, 26
  br i1 %5700, label %5701, label %5728

5701:                                             ; preds = %5697
  %5702 = getelementptr inbounds %struct.tree_complex, ptr %45, i64 0, i32 1
  %5703 = load ptr, ptr %5702, align 8, !tbaa !17
  %5704 = tail call i32 @real_zerop(ptr noundef %5703) #24
  %5705 = icmp eq i32 %5704, 0
  br i1 %5705, label %5728, label %5706

5706:                                             ; preds = %5701
  %5707 = load ptr, ptr %3237, align 8, !tbaa !17
  %5708 = getelementptr inbounds %struct.tree_common, ptr %5707, i64 0, i32 2
  %5709 = load ptr, ptr %5708, align 8, !tbaa !17
  %5710 = getelementptr inbounds %struct.tree_complex, ptr %45, i64 0, i32 2
  %5711 = load ptr, ptr %5710, align 8, !tbaa !17
  %5712 = tail call i32 @real_onep(ptr noundef %5711) #24
  %5713 = icmp eq i32 %5712, 0
  br i1 %5713, label %5719, label %5714

5714:                                             ; preds = %5706
  %5715 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %5709, ptr noundef nonnull %46)
  %5716 = tail call fastcc ptr @negate_expr(ptr noundef %5715)
  %5717 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %5709, ptr noundef nonnull %46)
  %5718 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %5716, ptr noundef %5717)
  br label %14075

5719:                                             ; preds = %5706
  %5720 = load ptr, ptr %5710, align 8, !tbaa !17
  %5721 = tail call i32 @real_minus_onep(ptr noundef %5720) #24
  %5722 = icmp eq i32 %5721, 0
  br i1 %5722, label %5728, label %5723

5723:                                             ; preds = %5719
  %5724 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef %5709, ptr noundef nonnull %46)
  %5725 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %5709, ptr noundef nonnull %46)
  %5726 = tail call fastcc ptr @negate_expr(ptr noundef %5725)
  %5727 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %2, ptr noundef %5724, ptr noundef %5726)
  br label %14075

5728:                                             ; preds = %5719, %5672, %5375, %5701, %5697, %5691, %5686
  %5729 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %5730 = icmp eq i32 %5729, 0
  br i1 %5730, label %1572, label %5731

5731:                                             ; preds = %5728
  %5732 = load i64, ptr %46, align 8
  %5733 = and i64 %5732, 65535
  %5734 = icmp eq i64 %5733, 124
  br i1 %5734, label %5735, label %5745

5735:                                             ; preds = %5731
  %5736 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %5737 = load ptr, ptr %5736, align 8, !tbaa !17
  %5738 = tail call i32 @operand_equal_p(ptr noundef %5737, ptr noundef %45, i32 noundef 0)
  %5739 = icmp eq i32 %5738, 0
  br i1 %5739, label %5742, label %5740

5740:                                             ; preds = %5735
  %5741 = tail call fastcc ptr @fold_mult_zconjz(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %45)
  br label %14075

5742:                                             ; preds = %5735
  %5743 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %5744 = icmp eq i32 %5743, 0
  br i1 %5744, label %1572, label %5745

5745:                                             ; preds = %5731, %5742
  %5746 = load i64, ptr %45, align 8
  %5747 = and i64 %5746, 65535
  %5748 = icmp eq i64 %5747, 124
  br i1 %5748, label %5749, label %5759

5749:                                             ; preds = %5745
  %5750 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %5751 = load ptr, ptr %5750, align 8, !tbaa !17
  %5752 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %5751, i32 noundef 0)
  %5753 = icmp eq i32 %5752, 0
  br i1 %5753, label %5756, label %5754

5754:                                             ; preds = %5749
  %5755 = tail call fastcc ptr @fold_mult_zconjz(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  br label %14075

5756:                                             ; preds = %5749
  %5757 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %5758 = icmp eq i32 %5757, 0
  br i1 %5758, label %1572, label %5759

5759:                                             ; preds = %5745, %5756
  %5760 = tail call i32 @builtin_mathfn_code(ptr noundef nonnull %46) #24
  %5761 = tail call i32 @builtin_mathfn_code(ptr noundef nonnull %45) #24
  %5762 = icmp eq i32 %5760, %5761
  br i1 %5762, label %5763, label %6075

5763:                                             ; preds = %5759
  switch i32 %5760, label %6075 [
    i32 230, label %5764
    i32 229, label %5764
    i32 228, label %5764
    i32 23, label %5764
    i32 22, label %5764
    i32 21, label %5764
    i32 183, label %6064
    i32 182, label %6064
    i32 181, label %6064
    i32 53, label %6064
    i32 52, label %6064
    i32 51, label %6064
    i32 50, label %6064
    i32 49, label %6064
    i32 48, label %6064
    i32 47, label %6064
    i32 46, label %6064
    i32 45, label %6064
  ]

5764:                                             ; preds = %5763, %5763, %5763, %5763, %5763, %5763
  %5765 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %5766 = load ptr, ptr %5765, align 8, !tbaa !17
  %5767 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %5768 = load ptr, ptr %5767, align 8, !tbaa !17
  %5769 = add nsw i32 %5760, -228
  %5770 = icmp ult i32 %5769, 3
  br i1 %5770, label %5771, label %6057

5771:                                             ; preds = %5764
  %5772 = tail call i32 @operand_equal_p(ptr noundef %5766, ptr noundef %5768, i32 noundef 0)
  %5773 = icmp eq i32 %5772, 0
  br i1 %5773, label %6057, label %5774

5774:                                             ; preds = %5771
  %5775 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %5776 = icmp eq i32 %5775, 0
  br i1 %5776, label %14075, label %5777

5777:                                             ; preds = %5774
  %5778 = load i64, ptr %2, align 8
  %5779 = and i64 %5778, 65535
  %5780 = icmp eq i64 %5779, 14
  br i1 %5780, label %5781, label %5784

5781:                                             ; preds = %5777
  %5782 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5783 = load i64, ptr %2, align 8
  br label %5789

5784:                                             ; preds = %5777
  %5785 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5786 = load i32, ptr %5785, align 4
  %5787 = lshr i32 %5786, 16
  %5788 = and i32 %5787, 255
  br label %5789

5789:                                             ; preds = %5784, %5781
  %5790 = phi i64 [ %5783, %5781 ], [ %5778, %5784 ]
  %5791 = phi i32 [ %5782, %5781 ], [ %5788, %5784 ]
  %5792 = zext i32 %5791 to i64
  %5793 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5792
  %5794 = load i8, ptr %5793, align 1, !tbaa !17
  %5795 = icmp eq i8 %5794, 8
  br i1 %5795, label %5850, label %5796

5796:                                             ; preds = %5789
  %5797 = and i64 %5790, 65535
  %5798 = icmp eq i64 %5797, 14
  br i1 %5798, label %5799, label %5802

5799:                                             ; preds = %5796
  %5800 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5801 = load i64, ptr %2, align 8
  br label %5807

5802:                                             ; preds = %5796
  %5803 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5804 = load i32, ptr %5803, align 4
  %5805 = lshr i32 %5804, 16
  %5806 = and i32 %5805, 255
  br label %5807

5807:                                             ; preds = %5802, %5799
  %5808 = phi i64 [ %5801, %5799 ], [ %5790, %5802 ]
  %5809 = phi i32 [ %5800, %5799 ], [ %5806, %5802 ]
  %5810 = zext i32 %5809 to i64
  %5811 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5810
  %5812 = load i8, ptr %5811, align 1, !tbaa !17
  %5813 = icmp eq i8 %5812, 9
  br i1 %5813, label %5850, label %5814

5814:                                             ; preds = %5807
  %5815 = and i64 %5808, 65535
  %5816 = icmp eq i64 %5815, 14
  br i1 %5816, label %5817, label %5820

5817:                                             ; preds = %5814
  %5818 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5819 = load i64, ptr %2, align 8
  br label %5825

5820:                                             ; preds = %5814
  %5821 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5822 = load i32, ptr %5821, align 4
  %5823 = lshr i32 %5822, 16
  %5824 = and i32 %5823, 255
  br label %5825

5825:                                             ; preds = %5820, %5817
  %5826 = phi i64 [ %5819, %5817 ], [ %5808, %5820 ]
  %5827 = phi i32 [ %5818, %5817 ], [ %5824, %5820 ]
  %5828 = zext i32 %5827 to i64
  %5829 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5828
  %5830 = load i8, ptr %5829, align 1, !tbaa !17
  %5831 = icmp eq i8 %5830, 11
  br i1 %5831, label %5850, label %5832

5832:                                             ; preds = %5825
  %5833 = and i64 %5826, 65535
  %5834 = icmp eq i64 %5833, 14
  br i1 %5834, label %5835, label %5837

5835:                                             ; preds = %5832
  %5836 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %5842

5837:                                             ; preds = %5832
  %5838 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5839 = load i32, ptr %5838, align 4
  %5840 = lshr i32 %5839, 16
  %5841 = and i32 %5840, 255
  br label %5842

5842:                                             ; preds = %5837, %5835
  %5843 = phi i32 [ %5836, %5835 ], [ %5841, %5837 ]
  %5844 = zext i32 %5843 to i64
  %5845 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5844
  %5846 = load i8, ptr %5845, align 1, !tbaa !17
  %5847 = icmp eq i8 %5846, 17
  br i1 %5847, label %5848, label %14075

5848:                                             ; preds = %5842
  %5849 = load i64, ptr %2, align 8
  br label %5850

5850:                                             ; preds = %5848, %5825, %5807, %5789
  %5851 = phi i64 [ %5849, %5848 ], [ %5826, %5825 ], [ %5808, %5807 ], [ %5790, %5789 ]
  %5852 = and i64 %5851, 65535
  %5853 = icmp eq i64 %5852, 14
  br i1 %5853, label %5854, label %5857

5854:                                             ; preds = %5850
  %5855 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5856 = load i64, ptr %2, align 8
  br label %5862

5857:                                             ; preds = %5850
  %5858 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5859 = load i32, ptr %5858, align 4
  %5860 = lshr i32 %5859, 16
  %5861 = and i32 %5860, 255
  br label %5862

5862:                                             ; preds = %5857, %5854
  %5863 = phi i64 [ %5856, %5854 ], [ %5851, %5857 ]
  %5864 = phi i32 [ %5855, %5854 ], [ %5861, %5857 ]
  %5865 = zext i32 %5864 to i64
  %5866 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5865
  %5867 = load i8, ptr %5866, align 1, !tbaa !17
  %5868 = icmp eq i8 %5867, 8
  br i1 %5868, label %5887, label %5869

5869:                                             ; preds = %5862
  %5870 = and i64 %5863, 65535
  %5871 = icmp eq i64 %5870, 14
  br i1 %5871, label %5872, label %5875

5872:                                             ; preds = %5869
  %5873 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5874 = load i64, ptr %2, align 8
  br label %5880

5875:                                             ; preds = %5869
  %5876 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5877 = load i32, ptr %5876, align 4
  %5878 = lshr i32 %5877, 16
  %5879 = and i32 %5878, 255
  br label %5880

5880:                                             ; preds = %5875, %5872
  %5881 = phi i64 [ %5874, %5872 ], [ %5863, %5875 ]
  %5882 = phi i32 [ %5873, %5872 ], [ %5879, %5875 ]
  %5883 = zext i32 %5882 to i64
  %5884 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5883
  %5885 = load i8, ptr %5884, align 1, !tbaa !17
  %5886 = icmp eq i8 %5885, 9
  br i1 %5886, label %5887, label %5898

5887:                                             ; preds = %5880, %5862
  %5888 = phi i64 [ %5881, %5880 ], [ %5863, %5862 ]
  %5889 = and i64 %5888, 65535
  %5890 = icmp eq i64 %5889, 14
  br i1 %5890, label %5891, label %5893

5891:                                             ; preds = %5887
  %5892 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %5914

5893:                                             ; preds = %5887
  %5894 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5895 = load i32, ptr %5894, align 4
  %5896 = lshr i32 %5895, 16
  %5897 = and i32 %5896, 255
  br label %5914

5898:                                             ; preds = %5880
  %5899 = and i64 %5881, 65535
  %5900 = icmp eq i64 %5899, 14
  br i1 %5900, label %5901, label %5903

5901:                                             ; preds = %5898
  %5902 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %5908

5903:                                             ; preds = %5898
  %5904 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5905 = load i32, ptr %5904, align 4
  %5906 = lshr i32 %5905, 16
  %5907 = and i32 %5906, 255
  br label %5908

5908:                                             ; preds = %5903, %5901
  %5909 = phi i32 [ %5902, %5901 ], [ %5907, %5903 ]
  %5910 = zext i32 %5909 to i64
  %5911 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5910
  %5912 = load i8, ptr %5911, align 1, !tbaa !17
  %5913 = zext i8 %5912 to i32
  br label %5914

5914:                                             ; preds = %5891, %5893, %5908
  %5915 = phi i32 [ %5913, %5908 ], [ %5892, %5891 ], [ %5897, %5893 ]
  %5916 = zext i32 %5915 to i64
  %5917 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5916
  %5918 = load i8, ptr %5917, align 1, !tbaa !17
  %5919 = icmp eq i8 %5918, 9
  %5920 = load i64, ptr %2, align 8
  %5921 = and i64 %5920, 65535
  %5922 = icmp eq i64 %5921, 14
  br i1 %5919, label %5923, label %5984

5923:                                             ; preds = %5914
  br i1 %5922, label %5924, label %5927

5924:                                             ; preds = %5923
  %5925 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5926 = load i64, ptr %2, align 8
  br label %5932

5927:                                             ; preds = %5923
  %5928 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5929 = load i32, ptr %5928, align 4
  %5930 = lshr i32 %5929, 16
  %5931 = and i32 %5930, 255
  br label %5932

5932:                                             ; preds = %5927, %5924
  %5933 = phi i64 [ %5926, %5924 ], [ %5920, %5927 ]
  %5934 = phi i32 [ %5925, %5924 ], [ %5931, %5927 ]
  %5935 = zext i32 %5934 to i64
  %5936 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5935
  %5937 = load i8, ptr %5936, align 1, !tbaa !17
  %5938 = icmp eq i8 %5937, 8
  br i1 %5938, label %5957, label %5939

5939:                                             ; preds = %5932
  %5940 = and i64 %5933, 65535
  %5941 = icmp eq i64 %5940, 14
  br i1 %5941, label %5942, label %5945

5942:                                             ; preds = %5939
  %5943 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5944 = load i64, ptr %2, align 8
  br label %5950

5945:                                             ; preds = %5939
  %5946 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5947 = load i32, ptr %5946, align 4
  %5948 = lshr i32 %5947, 16
  %5949 = and i32 %5948, 255
  br label %5950

5950:                                             ; preds = %5945, %5942
  %5951 = phi i64 [ %5944, %5942 ], [ %5933, %5945 ]
  %5952 = phi i32 [ %5943, %5942 ], [ %5949, %5945 ]
  %5953 = zext i32 %5952 to i64
  %5954 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5953
  %5955 = load i8, ptr %5954, align 1, !tbaa !17
  %5956 = icmp eq i8 %5955, 9
  br i1 %5956, label %5957, label %5968

5957:                                             ; preds = %5950, %5932
  %5958 = phi i64 [ %5951, %5950 ], [ %5933, %5932 ]
  %5959 = and i64 %5958, 65535
  %5960 = icmp eq i64 %5959, 14
  br i1 %5960, label %5961, label %5963

5961:                                             ; preds = %5957
  %5962 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %6045

5963:                                             ; preds = %5957
  %5964 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5965 = load i32, ptr %5964, align 4
  %5966 = lshr i32 %5965, 16
  %5967 = and i32 %5966, 255
  br label %6045

5968:                                             ; preds = %5950
  %5969 = and i64 %5951, 65535
  %5970 = icmp eq i64 %5969, 14
  br i1 %5970, label %5971, label %5973

5971:                                             ; preds = %5968
  %5972 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %5978

5973:                                             ; preds = %5968
  %5974 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5975 = load i32, ptr %5974, align 4
  %5976 = lshr i32 %5975, 16
  %5977 = and i32 %5976, 255
  br label %5978

5978:                                             ; preds = %5973, %5971
  %5979 = phi i32 [ %5972, %5971 ], [ %5977, %5973 ]
  %5980 = zext i32 %5979 to i64
  %5981 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %5980
  %5982 = load i8, ptr %5981, align 1, !tbaa !17
  %5983 = zext i8 %5982 to i32
  br label %6045

5984:                                             ; preds = %5914
  br i1 %5922, label %5985, label %5988

5985:                                             ; preds = %5984
  %5986 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %5987 = load i64, ptr %2, align 8
  br label %5993

5988:                                             ; preds = %5984
  %5989 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %5990 = load i32, ptr %5989, align 4
  %5991 = lshr i32 %5990, 16
  %5992 = and i32 %5991, 255
  br label %5993

5993:                                             ; preds = %5988, %5985
  %5994 = phi i64 [ %5987, %5985 ], [ %5920, %5988 ]
  %5995 = phi i32 [ %5986, %5985 ], [ %5992, %5988 ]
  %5996 = zext i32 %5995 to i64
  %5997 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %5996
  %5998 = load i8, ptr %5997, align 1, !tbaa !17
  %5999 = icmp eq i8 %5998, 8
  br i1 %5999, label %6018, label %6000

6000:                                             ; preds = %5993
  %6001 = and i64 %5994, 65535
  %6002 = icmp eq i64 %6001, 14
  br i1 %6002, label %6003, label %6006

6003:                                             ; preds = %6000
  %6004 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  %6005 = load i64, ptr %2, align 8
  br label %6011

6006:                                             ; preds = %6000
  %6007 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %6008 = load i32, ptr %6007, align 4
  %6009 = lshr i32 %6008, 16
  %6010 = and i32 %6009, 255
  br label %6011

6011:                                             ; preds = %6006, %6003
  %6012 = phi i64 [ %6005, %6003 ], [ %5994, %6006 ]
  %6013 = phi i32 [ %6004, %6003 ], [ %6010, %6006 ]
  %6014 = zext i32 %6013 to i64
  %6015 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %6014
  %6016 = load i8, ptr %6015, align 1, !tbaa !17
  %6017 = icmp eq i8 %6016, 9
  br i1 %6017, label %6018, label %6029

6018:                                             ; preds = %6011, %5993
  %6019 = phi i64 [ %6012, %6011 ], [ %5994, %5993 ]
  %6020 = and i64 %6019, 65535
  %6021 = icmp eq i64 %6020, 14
  br i1 %6021, label %6022, label %6024

6022:                                             ; preds = %6018
  %6023 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %6045

6024:                                             ; preds = %6018
  %6025 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %6026 = load i32, ptr %6025, align 4
  %6027 = lshr i32 %6026, 16
  %6028 = and i32 %6027, 255
  br label %6045

6029:                                             ; preds = %6011
  %6030 = and i64 %6012, 65535
  %6031 = icmp eq i64 %6030, 14
  br i1 %6031, label %6032, label %6034

6032:                                             ; preds = %6029
  %6033 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %6039

6034:                                             ; preds = %6029
  %6035 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %6036 = load i32, ptr %6035, align 4
  %6037 = lshr i32 %6036, 16
  %6038 = and i32 %6037, 255
  br label %6039

6039:                                             ; preds = %6034, %6032
  %6040 = phi i32 [ %6033, %6032 ], [ %6038, %6034 ]
  %6041 = zext i32 %6040 to i64
  %6042 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %6041
  %6043 = load i8, ptr %6042, align 1, !tbaa !17
  %6044 = zext i8 %6043 to i32
  br label %6045

6045:                                             ; preds = %6039, %6024, %6022, %5978, %5963, %5961
  %6046 = phi i32 [ %5983, %5978 ], [ %5962, %5961 ], [ %5967, %5963 ], [ %6044, %6039 ], [ %6023, %6022 ], [ %6028, %6024 ]
  %6047 = add i32 %6046, -38
  %6048 = zext i32 %6047 to i64
  %6049 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %6048
  %6050 = load ptr, ptr %6049, align 8, !tbaa !6
  %6051 = getelementptr inbounds %struct.real_format, ptr %6050, i64 0, i32 11
  %6052 = load i8, ptr %6051, align 2, !tbaa !36
  %6053 = icmp eq i8 %6052, 0
  %6054 = load i32, ptr @flag_finite_math_only, align 4
  %6055 = icmp ne i32 %6054, 0
  %6056 = select i1 %6053, i1 true, i1 %6055
  br i1 %6056, label %14075, label %6057

6057:                                             ; preds = %5764, %6045, %5771
  %6058 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6059 = load ptr, ptr %6058, align 8, !tbaa !17
  %6060 = getelementptr inbounds %struct.tree_exp, ptr %6059, i64 0, i32 3
  %6061 = load ptr, ptr %6060, align 8, !tbaa !17
  %6062 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %5766, ptr noundef %5768)
  %6063 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6061, i32 noundef 1, ptr noundef %6062) #24
  br label %14075

6064:                                             ; preds = %5763, %5763, %5763, %5763, %5763, %5763, %5763, %5763, %5763, %5763, %5763, %5763
  %6065 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6066 = load ptr, ptr %6065, align 8, !tbaa !17
  %6067 = getelementptr inbounds %struct.tree_exp, ptr %6066, i64 0, i32 3
  %6068 = load ptr, ptr %6067, align 8, !tbaa !17
  %6069 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %6070 = load ptr, ptr %6069, align 8, !tbaa !17
  %6071 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %6072 = load ptr, ptr %6071, align 8, !tbaa !17
  %6073 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %6070, ptr noundef %6072)
  %6074 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6068, i32 noundef 1, ptr noundef %6073) #24
  br label %14075

6075:                                             ; preds = %5763, %5759
  %6076 = icmp eq i32 %5760, 180
  %6077 = icmp eq i32 %5761, 180
  %6078 = and i1 %6076, %6077
  br i1 %6078, label %6087, label %6079

6079:                                             ; preds = %6075
  %6080 = icmp eq i32 %5760, 184
  %6081 = icmp eq i32 %5761, 184
  %6082 = and i1 %6080, %6081
  br i1 %6082, label %6087, label %6083

6083:                                             ; preds = %6079
  %6084 = icmp eq i32 %5760, 188
  %6085 = icmp eq i32 %5761, 188
  %6086 = and i1 %6084, %6085
  br i1 %6086, label %6087, label %6115

6087:                                             ; preds = %6083, %6079, %6075
  %6088 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %6089 = load ptr, ptr %6088, align 8, !tbaa !17
  %6090 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 1
  %6091 = load ptr, ptr %6090, align 8, !tbaa !17
  %6092 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %6093 = load ptr, ptr %6092, align 8, !tbaa !17
  %6094 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 1
  %6095 = load ptr, ptr %6094, align 8, !tbaa !17
  %6096 = tail call i32 @operand_equal_p(ptr noundef %6091, ptr noundef %6095, i32 noundef 0)
  %6097 = icmp eq i32 %6096, 0
  br i1 %6097, label %6105, label %6098

6098:                                             ; preds = %6087
  %6099 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6100 = load ptr, ptr %6099, align 8, !tbaa !17
  %6101 = getelementptr inbounds %struct.tree_exp, ptr %6100, i64 0, i32 3
  %6102 = load ptr, ptr %6101, align 8, !tbaa !17
  %6103 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef nonnull %2, ptr noundef %6089, ptr noundef %6093)
  %6104 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6102, i32 noundef 2, ptr noundef %6103, ptr noundef %6091) #24
  br label %14075

6105:                                             ; preds = %6087
  %6106 = tail call i32 @operand_equal_p(ptr noundef %6089, ptr noundef %6093, i32 noundef 0)
  %6107 = icmp eq i32 %6106, 0
  br i1 %6107, label %6152, label %6108

6108:                                             ; preds = %6105
  %6109 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6110 = load ptr, ptr %6109, align 8, !tbaa !17
  %6111 = getelementptr inbounds %struct.tree_exp, ptr %6110, i64 0, i32 3
  %6112 = load ptr, ptr %6111, align 8, !tbaa !17
  %6113 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %2, ptr noundef %6091, ptr noundef %6095)
  %6114 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6112, i32 noundef 2, ptr noundef %6089, ptr noundef %6113) #24
  br label %14075

6115:                                             ; preds = %6083
  %6116 = icmp eq i32 %5760, 231
  %6117 = icmp eq i32 %5761, 30
  %6118 = and i1 %6116, %6117
  br i1 %6118, label %6139, label %6119

6119:                                             ; preds = %6115
  %6120 = icmp eq i32 %5760, 232
  %6121 = icmp eq i32 %5761, 31
  %6122 = and i1 %6120, %6121
  br i1 %6122, label %6139, label %6123

6123:                                             ; preds = %6119
  %6124 = icmp eq i32 %5760, 236
  %6125 = icmp eq i32 %5761, 35
  %6126 = and i1 %6124, %6125
  br i1 %6126, label %6139, label %6127

6127:                                             ; preds = %6123
  %6128 = icmp eq i32 %5760, 30
  %6129 = icmp eq i32 %5761, 231
  %6130 = and i1 %6128, %6129
  br i1 %6130, label %6139, label %6131

6131:                                             ; preds = %6127
  %6132 = icmp eq i32 %5760, 31
  %6133 = icmp eq i32 %5761, 232
  %6134 = and i1 %6132, %6133
  br i1 %6134, label %6139, label %6135

6135:                                             ; preds = %6131
  %6136 = icmp eq i32 %5760, 35
  %6137 = icmp eq i32 %5761, 236
  %6138 = and i1 %6136, %6137
  br i1 %6138, label %6139, label %6152

6139:                                             ; preds = %6135, %6131, %6127, %6123, %6119, %6115
  %6140 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %6141 = load ptr, ptr %6140, align 8, !tbaa !17
  %6142 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %6143 = load ptr, ptr %6142, align 8, !tbaa !17
  %6144 = tail call i32 @operand_equal_p(ptr noundef %6141, ptr noundef %6143, i32 noundef 0)
  %6145 = icmp eq i32 %6144, 0
  br i1 %6145, label %6152, label %6146

6146:                                             ; preds = %6139
  %6147 = tail call ptr @mathfn_built_in(ptr noundef nonnull %2, i32 noundef 219) #24
  %6148 = icmp eq ptr %6147, null
  br i1 %6148, label %6152, label %6149

6149:                                             ; preds = %6146
  %6150 = load ptr, ptr %6140, align 8, !tbaa !17
  %6151 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %6147, i32 noundef 1, ptr noundef %6150) #24
  br label %14075

6152:                                             ; preds = %6146, %6105, %6139, %6135
  switch i32 %5761, label %6174 [
    i32 188, label %6153
    i32 184, label %6153
    i32 180, label %6153
  ]

6153:                                             ; preds = %6152, %6152, %6152
  %6154 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 1
  %6155 = load ptr, ptr %6154, align 8, !tbaa !17
  %6156 = load i64, ptr %6155, align 8
  %6157 = and i64 %6156, 134283263
  %6158 = icmp eq i64 %6157, 24
  br i1 %6158, label %6159, label %6174

6159:                                             ; preds = %6153
  %6160 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %6161 = load ptr, ptr %6160, align 8, !tbaa !17
  %6162 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6161, i32 noundef 0)
  %6163 = icmp eq i32 %6162, 0
  br i1 %6163, label %6174, label %6164

6164:                                             ; preds = %6159
  %6165 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6166 = load ptr, ptr %6165, align 8, !tbaa !17
  %6167 = getelementptr inbounds %struct.tree_exp, ptr %6166, i64 0, i32 3
  %6168 = load ptr, ptr %6167, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %14) #24
  %6169 = getelementptr inbounds %struct.tree_real_cst, ptr %6155, i64 0, i32 1
  %6170 = load ptr, ptr %6169, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %14, ptr noundef nonnull align 8 dereferenceable(32) %6170, i64 32, i1 false), !tbaa.struct !29
  %6171 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %14, i32 noundef 63, ptr noundef nonnull %14, ptr noundef nonnull @dconst1) #24
  %6172 = call ptr @build_real(ptr noundef nonnull %2, ptr noundef nonnull byval(%struct.real_value) align 8 %14) #24
  %6173 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6168, i32 noundef 2, ptr noundef nonnull %46, ptr noundef %6172) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %14) #24
  br label %14075

6174:                                             ; preds = %6153, %6159, %6152
  switch i32 %5760, label %6196 [
    i32 188, label %6175
    i32 184, label %6175
    i32 180, label %6175
  ]

6175:                                             ; preds = %6174, %6174, %6174
  %6176 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 1
  %6177 = load ptr, ptr %6176, align 8, !tbaa !17
  %6178 = load i64, ptr %6177, align 8
  %6179 = and i64 %6178, 134283263
  %6180 = icmp eq i64 %6179, 24
  br i1 %6180, label %6181, label %6196

6181:                                             ; preds = %6175
  %6182 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %6183 = load ptr, ptr %6182, align 8, !tbaa !17
  %6184 = tail call i32 @operand_equal_p(ptr noundef nonnull %45, ptr noundef %6183, i32 noundef 0)
  %6185 = icmp eq i32 %6184, 0
  br i1 %6185, label %6196, label %6186

6186:                                             ; preds = %6181
  %6187 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6188 = load ptr, ptr %6187, align 8, !tbaa !17
  %6189 = getelementptr inbounds %struct.tree_exp, ptr %6188, i64 0, i32 3
  %6190 = load ptr, ptr %6189, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15) #24
  %6191 = getelementptr inbounds %struct.tree_real_cst, ptr %6177, i64 0, i32 1
  %6192 = load ptr, ptr %6191, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 8 dereferenceable(32) %6192, i64 32, i1 false), !tbaa.struct !29
  %6193 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %15, i32 noundef 63, ptr noundef nonnull %15, ptr noundef nonnull @dconst1) #24
  %6194 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 %15) #24
  %6195 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %6190, i32 noundef 2, ptr noundef nonnull %45, ptr noundef %6194) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15) #24
  br label %14075

6196:                                             ; preds = %6175, %6181, %6174
  %6197 = load ptr, ptr @cfun, align 8, !tbaa !6
  %6198 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %6197) #24
  %6199 = icmp eq i8 %6198, 0
  br i1 %6199, label %1572, label %6200

6200:                                             ; preds = %6196
  %6201 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %6202 = icmp eq i32 %6201, 0
  br i1 %6202, label %1572, label %6203

6203:                                             ; preds = %6200
  %6204 = tail call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 180) #24
  %6205 = icmp eq ptr %6204, null
  br i1 %6205, label %1572, label %6206

6206:                                             ; preds = %6203
  %6207 = tail call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst2) #24
  %6208 = tail call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %6204, i32 noundef 2, ptr noundef nonnull %46, ptr noundef %6207) #24
  br label %14075

6209:                                             ; preds = %6554, %582, %305
  %6210 = tail call i32 @integer_all_onesp(ptr noundef %45) #24
  %6211 = icmp eq i32 %6210, 0
  br i1 %6211, label %6214, label %6212

6212:                                             ; preds = %6209
  %6213 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45, ptr noundef nonnull %46)
  br label %14075

6214:                                             ; preds = %6209
  %6215 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %6216 = icmp eq i32 %6215, 0
  br i1 %6216, label %6220, label %6217

6217:                                             ; preds = %6214
  %6218 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6219 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %6218)
  br label %14075

6220:                                             ; preds = %6214
  %6221 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %6222 = icmp eq i32 %6221, 0
  br i1 %6222, label %6226, label %6223

6223:                                             ; preds = %6220
  %6224 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6225 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %6224)
  br label %14075

6226:                                             ; preds = %6220
  %6227 = load i64, ptr %46, align 8
  %6228 = and i64 %6227, 65535
  %6229 = icmp eq i64 %6228, 90
  br i1 %6229, label %6230, label %6240

6230:                                             ; preds = %6226
  %6231 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6232 = load ptr, ptr %6231, align 8, !tbaa !17
  %6233 = tail call i32 @operand_equal_p(ptr noundef %6232, ptr noundef %45, i32 noundef 0)
  %6234 = icmp eq i32 %6233, 0
  br i1 %6234, label %6240, label %6235

6235:                                             ; preds = %6230
  %6236 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6237 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6236)
  %6238 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6237)
  %6239 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6238, ptr noundef %45)
  br label %14075

6240:                                             ; preds = %6230, %6226
  %6241 = load i64, ptr %45, align 8
  %6242 = and i64 %6241, 65535
  %6243 = icmp eq i64 %6242, 90
  br i1 %6243, label %6244, label %6254

6244:                                             ; preds = %6240
  %6245 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6246 = load ptr, ptr %6245, align 8, !tbaa !17
  %6247 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6246, i32 noundef 0)
  %6248 = icmp eq i32 %6247, 0
  br i1 %6248, label %6254, label %6249

6249:                                             ; preds = %6244
  %6250 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6251 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6250)
  %6252 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6251)
  %6253 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6252, ptr noundef nonnull %46)
  br label %14075

6254:                                             ; preds = %6244, %6240
  %6255 = load i64, ptr %46, align 8
  %6256 = and i64 %6255, 65535
  %6257 = icmp eq i64 %6256, 89
  br i1 %6257, label %6258, label %6385

6258:                                             ; preds = %6254
  %6259 = load i64, ptr %45, align 8
  %6260 = and i64 %6259, 65535
  %6261 = icmp eq i64 %6260, 23
  br i1 %6261, label %6265, label %6262

6262:                                             ; preds = %6258
  %6263 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6264 = load ptr, ptr %6263, align 8, !tbaa !17
  br label %6375

6265:                                             ; preds = %6258
  %6266 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6267 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6268 = load ptr, ptr %6267, align 8, !tbaa !17
  %6269 = load i64, ptr %6268, align 8
  %6270 = and i64 %6269, 65535
  %6271 = icmp eq i64 %6270, 23
  br i1 %6271, label %6272, label %6375

6272:                                             ; preds = %6265
  %6273 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %6274 = load i32, ptr %6273, align 4
  %6275 = and i32 %6274, 1023
  %6276 = getelementptr inbounds %struct.tree_int_cst, ptr %6268, i64 0, i32 1
  %6277 = getelementptr inbounds %struct.tree_int_cst, ptr %6268, i64 0, i32 1, i32 1
  %6278 = load i64, ptr %6277, align 8, !tbaa !17
  %6279 = load i64, ptr %6276, align 8, !tbaa !17
  %6280 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %6281 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %6282 = load i64, ptr %6281, align 8, !tbaa !17
  %6283 = load i64, ptr %6280, align 8, !tbaa !17
  %6284 = and i64 %6282, %6278
  %6285 = icmp eq i64 %6284, %6278
  %6286 = and i64 %6283, %6279
  %6287 = icmp eq i64 %6286, %6279
  %6288 = select i1 %6285, i1 %6287, i1 false
  br i1 %6288, label %6289, label %6292

6289:                                             ; preds = %6272
  %6290 = load ptr, ptr %6266, align 8, !tbaa !17
  %6291 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %45, ptr noundef %6290)
  br label %14075

6292:                                             ; preds = %6272
  %6293 = icmp ugt i32 %6275, 64
  %6294 = sub nsw i32 128, %6275
  %6295 = zext i32 %6294 to i64
  %6296 = lshr i64 -1, %6295
  %6297 = sub nuw nsw i32 64, %6275
  %6298 = zext i32 %6297 to i64
  %6299 = lshr i64 -1, %6298
  %6300 = select i1 %6293, i64 %6296, i64 0
  %6301 = select i1 %6293, i64 -1, i64 %6299
  %6302 = or i64 %6282, %6278
  %6303 = xor i64 %6302, -1
  %6304 = and i64 %6300, %6303
  %6305 = icmp eq i64 %6304, 0
  br i1 %6305, label %6306, label %6314

6306:                                             ; preds = %6292
  %6307 = or i64 %6283, %6279
  %6308 = xor i64 %6307, -1
  %6309 = and i64 %6301, %6308
  %6310 = icmp eq i64 %6309, 0
  br i1 %6310, label %6311, label %6314

6311:                                             ; preds = %6306
  %6312 = load ptr, ptr %6266, align 8, !tbaa !17
  %6313 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 87, ptr noundef nonnull %2, ptr noundef %6312, ptr noundef nonnull %45)
  br label %14075

6314:                                             ; preds = %6306, %6292
  %6315 = and i64 %6300, %6278
  %6316 = and i64 %6301, %6279
  %6317 = and i64 %6300, %6282
  %6318 = and i64 %6301, %6283
  %6319 = xor i64 %6317, -1
  %6320 = and i64 %6315, %6319
  %6321 = xor i64 %6318, -1
  %6322 = and i64 %6316, %6321
  %6323 = icmp ugt i32 %6275, 7
  br i1 %6323, label %6324, label %6364

6324:                                             ; preds = %6314
  %6325 = or i64 %6316, %6318
  %6326 = and i64 %6325, 255
  %6327 = icmp eq i64 %6326, 255
  br i1 %6327, label %6328, label %6332

6328:                                             ; preds = %6324
  %6329 = and i64 %6316, -256
  %6330 = or i64 %6329, %6315
  %6331 = icmp eq i64 %6330, 0
  br i1 %6331, label %6358, label %6332

6332:                                             ; preds = %6324, %6328
  %6333 = icmp ugt i32 %6275, 15
  br i1 %6333, label %6334, label %6358, !llvm.loop !67

6334:                                             ; preds = %6332
  %6335 = and i64 %6325, 65535
  %6336 = icmp eq i64 %6335, 65535
  br i1 %6336, label %6337, label %6341

6337:                                             ; preds = %6334
  %6338 = and i64 %6316, -65536
  %6339 = or i64 %6338, %6315
  %6340 = icmp eq i64 %6339, 0
  br i1 %6340, label %6358, label %6341

6341:                                             ; preds = %6337, %6334
  %6342 = icmp ugt i32 %6275, 31
  br i1 %6342, label %6343, label %6358, !llvm.loop !67

6343:                                             ; preds = %6341
  %6344 = and i64 %6325, 4294967295
  %6345 = icmp eq i64 %6344, 4294967295
  br i1 %6345, label %6346, label %6350

6346:                                             ; preds = %6343
  %6347 = and i64 %6316, -4294967296
  %6348 = or i64 %6347, %6315
  %6349 = icmp eq i64 %6348, 0
  br i1 %6349, label %6358, label %6350

6350:                                             ; preds = %6346, %6343
  %6351 = icmp ugt i32 %6275, 63
  br i1 %6351, label %6352, label %6358, !llvm.loop !67

6352:                                             ; preds = %6350
  %6353 = icmp eq i64 %6325, -1
  %6354 = icmp eq i64 %6315, 0
  %6355 = and i1 %6353, %6354
  %6356 = select i1 %6355, i64 -1, i64 %6322
  %6357 = select i1 %6355, i64 0, i64 %6320
  br label %6358

6358:                                             ; preds = %6352, %6350, %6346, %6341, %6337, %6332, %6328
  %6359 = phi i64 [ %6322, %6332 ], [ 255, %6328 ], [ 65535, %6337 ], [ %6322, %6341 ], [ 4294967295, %6346 ], [ %6322, %6350 ], [ %6356, %6352 ]
  %6360 = phi i64 [ %6320, %6332 ], [ 0, %6328 ], [ 0, %6337 ], [ %6320, %6341 ], [ 0, %6346 ], [ %6320, %6350 ], [ %6357, %6352 ]
  %6361 = icmp eq i64 %6360, %6315
  %6362 = icmp eq i64 %6359, %6316
  %6363 = select i1 %6361, i1 %6362, i1 false
  br i1 %6363, label %6375, label %6368

6364:                                             ; preds = %6314
  %6365 = icmp eq i64 %6320, %6315
  %6366 = icmp eq i64 %6322, %6316
  %6367 = select i1 %6365, i1 %6366, i1 false
  br i1 %6367, label %6375, label %6368

6368:                                             ; preds = %6364, %6358
  %6369 = phi i64 [ %6320, %6364 ], [ %6360, %6358 ]
  %6370 = phi i64 [ %6322, %6364 ], [ %6359, %6358 ]
  %6371 = load ptr, ptr %6266, align 8, !tbaa !17
  %6372 = tail call ptr @build_int_cst_wide(ptr noundef %2, i64 noundef %6370, i64 noundef %6369) #24
  %6373 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6371, ptr noundef %6372)
  %6374 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 87, ptr noundef %2, ptr noundef %6373, ptr noundef %45)
  br label %14075

6375:                                             ; preds = %6262, %6358, %6265, %6364
  %6376 = phi ptr [ %6264, %6262 ], [ %6268, %6358 ], [ %6268, %6265 ], [ %6268, %6364 ]
  %6377 = tail call i32 @operand_equal_p(ptr noundef %6376, ptr noundef %45, i32 noundef 0)
  %6378 = icmp eq i32 %6377, 0
  br i1 %6378, label %6379, label %6381

6379:                                             ; preds = %6375
  %6380 = load i64, ptr %46, align 8
  br label %6385

6381:                                             ; preds = %6375
  %6382 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6383 = load ptr, ptr %6382, align 8, !tbaa !17
  %6384 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45, ptr noundef %6383)
  br label %14075

6385:                                             ; preds = %6254, %6379
  %6386 = phi i64 [ %6380, %6379 ], [ %6255, %6254 ]
  %6387 = and i64 %6386, 65535
  %6388 = icmp eq i64 %6387, 89
  br i1 %6388, label %6389, label %6413

6389:                                             ; preds = %6385
  %6390 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6391 = load ptr, ptr %6390, align 8, !tbaa !17
  %6392 = tail call i32 @operand_equal_p(ptr noundef %6391, ptr noundef %45, i32 noundef 0)
  %6393 = icmp eq i32 %6392, 0
  br i1 %6393, label %6413, label %6394

6394:                                             ; preds = %6389
  %6395 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6396 = load ptr, ptr %6395, align 8, !tbaa !17
  %6397 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6398 = icmp eq i32 %6397, 0
  br i1 %6398, label %6411, label %6399

6399:                                             ; preds = %6394
  %6400 = load i64, ptr %6396, align 8
  %6401 = and i64 %6400, 131072
  %6402 = icmp eq i64 %6401, 0
  br i1 %6402, label %6403, label %6411

6403:                                             ; preds = %6399
  %6404 = load i64, ptr %45, align 8
  %6405 = and i64 %6404, 131072
  %6406 = icmp eq i64 %6405, 0
  br i1 %6406, label %6407, label %6411

6407:                                             ; preds = %6403
  %6408 = or i64 %6404, %6400
  %6409 = and i64 %6408, 65536
  %6410 = icmp eq i64 %6409, 0
  br i1 %6410, label %6411, label %6413

6411:                                             ; preds = %6399, %6403, %6394, %6407
  %6412 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45, ptr noundef %6396)
  br label %14075

6413:                                             ; preds = %6407, %6389, %6385
  %6414 = load i64, ptr %45, align 8
  %6415 = and i64 %6414, 65535
  %6416 = icmp eq i64 %6415, 89
  br i1 %6416, label %6417, label %6441

6417:                                             ; preds = %6413
  %6418 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6419 = load ptr, ptr %6418, align 8, !tbaa !17
  %6420 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6419, i32 noundef 0)
  %6421 = icmp eq i32 %6420, 0
  br i1 %6421, label %6441, label %6422

6422:                                             ; preds = %6417
  %6423 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6424 = load ptr, ptr %6423, align 8, !tbaa !17
  %6425 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6426 = icmp eq i32 %6425, 0
  br i1 %6426, label %6439, label %6427

6427:                                             ; preds = %6422
  %6428 = load i64, ptr %46, align 8
  %6429 = and i64 %6428, 131072
  %6430 = icmp eq i64 %6429, 0
  br i1 %6430, label %6431, label %6439

6431:                                             ; preds = %6427
  %6432 = load i64, ptr %6424, align 8
  %6433 = and i64 %6432, 131072
  %6434 = icmp eq i64 %6433, 0
  br i1 %6434, label %6435, label %6439

6435:                                             ; preds = %6431
  %6436 = or i64 %6432, %6428
  %6437 = and i64 %6436, 65536
  %6438 = icmp eq i64 %6437, 0
  br i1 %6438, label %6439, label %6441

6439:                                             ; preds = %6427, %6431, %6422, %6435
  %6440 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %6424)
  br label %14075

6441:                                             ; preds = %6435, %6417, %6413
  %6442 = load i64, ptr %45, align 8
  %6443 = and i64 %6442, 65535
  %6444 = icmp eq i64 %6443, 89
  br i1 %6444, label %6445, label %6469

6445:                                             ; preds = %6441
  %6446 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6447 = load ptr, ptr %6446, align 8, !tbaa !17
  %6448 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6447, i32 noundef 0)
  %6449 = icmp eq i32 %6448, 0
  br i1 %6449, label %6469, label %6450

6450:                                             ; preds = %6445
  %6451 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6452 = load ptr, ptr %6451, align 8, !tbaa !17
  %6453 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6454 = icmp eq i32 %6453, 0
  br i1 %6454, label %6467, label %6455

6455:                                             ; preds = %6450
  %6456 = load i64, ptr %46, align 8
  %6457 = and i64 %6456, 131072
  %6458 = icmp eq i64 %6457, 0
  br i1 %6458, label %6459, label %6467

6459:                                             ; preds = %6455
  %6460 = load i64, ptr %6452, align 8
  %6461 = and i64 %6460, 131072
  %6462 = icmp eq i64 %6461, 0
  br i1 %6462, label %6463, label %6467

6463:                                             ; preds = %6459
  %6464 = or i64 %6460, %6456
  %6465 = and i64 %6464, 65536
  %6466 = icmp eq i64 %6465, 0
  br i1 %6466, label %6467, label %6469

6467:                                             ; preds = %6455, %6459, %6450, %6463
  %6468 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %6452)
  br label %14075

6469:                                             ; preds = %6463, %6445, %6441
  %6470 = tail call fastcc ptr @distribute_bit_expr(i32 noundef %0, i32 noundef 87, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %6471 = icmp eq ptr %6470, null
  br i1 %6471, label %6472, label %14075

6472:                                             ; preds = %6469
  %6473 = load i64, ptr %46, align 8
  %6474 = and i64 %6473, 65535
  %6475 = icmp eq i64 %6474, 90
  br i1 %6475, label %6476, label %1415

6476:                                             ; preds = %6472
  %6477 = load i64, ptr %45, align 8
  %6478 = and i64 %6477, 65535
  %6479 = icmp eq i64 %6478, 90
  br i1 %6479, label %6480, label %1415

6480:                                             ; preds = %6476
  %6481 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6482 = load ptr, ptr %6481, align 8, !tbaa !17
  %6483 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6482)
  %6484 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6485 = load ptr, ptr %6484, align 8, !tbaa !17
  %6486 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6485)
  %6487 = tail call ptr @build2_stat(i32 noundef 89, ptr noundef %2, ptr noundef %6483, ptr noundef %6486) #24
  %6488 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6487)
  br label %14075

6489:                                             ; preds = %305
  %6490 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %6491 = icmp eq i32 %6490, 0
  br i1 %6491, label %6495, label %6492

6492:                                             ; preds = %6489
  %6493 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6494 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %6493)
  br label %14075

6495:                                             ; preds = %6489
  %6496 = tail call i32 @integer_all_onesp(ptr noundef %45) #24
  %6497 = icmp eq i32 %6496, 0
  br i1 %6497, label %6500, label %6498

6498:                                             ; preds = %6495
  %6499 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %3)
  br label %14075

6500:                                             ; preds = %6495
  %6501 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %6502 = icmp eq i32 %6501, 0
  br i1 %6502, label %6506, label %6503

6503:                                             ; preds = %6500
  %6504 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6505 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6504, ptr noundef nonnull %46)
  br label %14075

6506:                                             ; preds = %6500
  %6507 = load i64, ptr %46, align 8
  %6508 = and i64 %6507, 65535
  %6509 = icmp eq i64 %6508, 90
  br i1 %6509, label %6510, label %6520

6510:                                             ; preds = %6506
  %6511 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6512 = load ptr, ptr %6511, align 8, !tbaa !17
  %6513 = tail call i32 @operand_equal_p(ptr noundef %6512, ptr noundef %45, i32 noundef 0)
  %6514 = icmp eq i32 %6513, 0
  br i1 %6514, label %6520, label %6515

6515:                                             ; preds = %6510
  %6516 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6517 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6516)
  %6518 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6517)
  %6519 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6518, ptr noundef %45)
  br label %14075

6520:                                             ; preds = %6510, %6506
  %6521 = load i64, ptr %45, align 8
  %6522 = and i64 %6521, 65535
  %6523 = icmp eq i64 %6522, 90
  br i1 %6523, label %6524, label %6534

6524:                                             ; preds = %6520
  %6525 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6526 = load ptr, ptr %6525, align 8, !tbaa !17
  %6527 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6526, i32 noundef 0)
  %6528 = icmp eq i32 %6527, 0
  br i1 %6528, label %6534, label %6529

6529:                                             ; preds = %6524
  %6530 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6531 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6530)
  %6532 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6531)
  %6533 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6532, ptr noundef nonnull %46)
  br label %14075

6534:                                             ; preds = %6524, %6520
  %6535 = load i64, ptr %46, align 8
  %6536 = and i64 %6535, 65535
  %6537 = icmp eq i64 %6536, 89
  br i1 %6537, label %6538, label %6560

6538:                                             ; preds = %6534
  %6539 = load i64, ptr %45, align 8
  %6540 = and i64 %6539, 65535
  %6541 = icmp eq i64 %6540, 89
  br i1 %6541, label %6542, label %6560

6542:                                             ; preds = %6538
  %6543 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6544 = load ptr, ptr %6543, align 8, !tbaa !17
  %6545 = load i64, ptr %6544, align 8
  %6546 = and i64 %6545, 65535
  %6547 = icmp eq i64 %6546, 23
  br i1 %6547, label %6548, label %6560

6548:                                             ; preds = %6542
  %6549 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6550 = load ptr, ptr %6549, align 8, !tbaa !17
  %6551 = load i64, ptr %6550, align 8
  %6552 = and i64 %6551, 65535
  %6553 = icmp eq i64 %6552, 23
  br i1 %6553, label %6554, label %6560

6554:                                             ; preds = %6548
  %6555 = tail call fastcc ptr @const_binop(i32 noundef 89, ptr noundef nonnull %6544, ptr noundef nonnull %6550)
  %6556 = tail call i32 @integer_zerop(ptr noundef %6555) #24
  %6557 = icmp eq i32 %6556, 0
  br i1 %6557, label %6558, label %6209

6558:                                             ; preds = %6554
  %6559 = load i64, ptr %46, align 8
  br label %6560

6560:                                             ; preds = %6558, %6548, %6542, %6538, %6534
  %6561 = phi i64 [ %6559, %6558 ], [ %6535, %6548 ], [ %6535, %6542 ], [ %6535, %6538 ], [ %6535, %6534 ]
  %6562 = and i64 %6561, 65535
  %6563 = icmp eq i64 %6562, 87
  br i1 %6563, label %6564, label %6580

6564:                                             ; preds = %6560
  %6565 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6566 = load ptr, ptr %6565, align 8, !tbaa !17
  %6567 = tail call i32 @operand_equal_p(ptr noundef %6566, ptr noundef nonnull %45, i32 noundef 0)
  %6568 = icmp eq i32 %6567, 0
  br i1 %6568, label %6569, label %6571

6569:                                             ; preds = %6564
  %6570 = load i64, ptr %46, align 8
  br label %6580

6571:                                             ; preds = %6564
  %6572 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6573 = load ptr, ptr %6572, align 8, !tbaa !17
  %6574 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %6575 = load ptr, ptr %6574, align 8, !tbaa !17
  %6576 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %6575, ptr noundef nonnull %45)
  %6577 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6573)
  %6578 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6576)
  %6579 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6577, ptr noundef %6578)
  br label %14075

6580:                                             ; preds = %6569, %6560
  %6581 = phi i64 [ %6570, %6569 ], [ %6561, %6560 ]
  %6582 = and i64 %6581, 65535
  %6583 = icmp eq i64 %6582, 87
  br i1 %6583, label %6584, label %6598

6584:                                             ; preds = %6580
  %6585 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6586 = load ptr, ptr %6585, align 8, !tbaa !17
  %6587 = tail call i32 @operand_equal_p(ptr noundef %6586, ptr noundef nonnull %45, i32 noundef 0)
  %6588 = icmp eq i32 %6587, 0
  br i1 %6588, label %6598, label %6589

6589:                                             ; preds = %6584
  %6590 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6591 = load ptr, ptr %6590, align 8, !tbaa !17
  %6592 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %6593 = load ptr, ptr %6592, align 8, !tbaa !17
  %6594 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %6593, ptr noundef nonnull %45)
  %6595 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6591)
  %6596 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6594)
  %6597 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6595, ptr noundef %6596)
  br label %14075

6598:                                             ; preds = %6584, %6580
  %6599 = load i64, ptr %45, align 8
  %6600 = and i64 %6599, 65535
  %6601 = icmp eq i64 %6600, 87
  br i1 %6601, label %6602, label %6618

6602:                                             ; preds = %6598
  %6603 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6604 = load ptr, ptr %6603, align 8, !tbaa !17
  %6605 = tail call i32 @operand_equal_p(ptr noundef %6604, ptr noundef nonnull %46, i32 noundef 0)
  %6606 = icmp eq i32 %6605, 0
  br i1 %6606, label %6607, label %6609

6607:                                             ; preds = %6602
  %6608 = load i64, ptr %45, align 8
  br label %6618

6609:                                             ; preds = %6602
  %6610 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6611 = load ptr, ptr %6610, align 8, !tbaa !17
  %6612 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %6613 = load ptr, ptr %6612, align 8, !tbaa !17
  %6614 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %6613, ptr noundef nonnull %46)
  %6615 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6611)
  %6616 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6614)
  %6617 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6615, ptr noundef %6616)
  br label %14075

6618:                                             ; preds = %6607, %6598
  %6619 = phi i64 [ %6608, %6607 ], [ %6599, %6598 ]
  %6620 = and i64 %6619, 65535
  %6621 = icmp eq i64 %6620, 87
  br i1 %6621, label %6622, label %6636

6622:                                             ; preds = %6618
  %6623 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6624 = load ptr, ptr %6623, align 8, !tbaa !17
  %6625 = tail call i32 @operand_equal_p(ptr noundef %6624, ptr noundef nonnull %46, i32 noundef 0)
  %6626 = icmp eq i32 %6625, 0
  br i1 %6626, label %6636, label %6627

6627:                                             ; preds = %6622
  %6628 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6629 = load ptr, ptr %6628, align 8, !tbaa !17
  %6630 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %6631 = load ptr, ptr %6630, align 8, !tbaa !17
  %6632 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %6631, ptr noundef nonnull %46)
  %6633 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6629)
  %6634 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6632)
  %6635 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6633, ptr noundef %6634)
  br label %14075

6636:                                             ; preds = %6622, %6618
  %6637 = load i64, ptr %46, align 8
  %6638 = trunc i64 %6637 to i16
  switch i16 %6638, label %6669 [
    i16 90, label %6639
    i16 89, label %6656
  ]

6639:                                             ; preds = %6636
  %6640 = load i64, ptr %45, align 8
  %6641 = trunc i64 %6640 to i16
  switch i16 %6641, label %6669 [
    i16 90, label %6642
    i16 23, label %6650
  ]

6642:                                             ; preds = %6639
  %6643 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6644 = load ptr, ptr %6643, align 8, !tbaa !17
  %6645 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6644)
  %6646 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6647 = load ptr, ptr %6646, align 8, !tbaa !17
  %6648 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6647)
  %6649 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %2, ptr noundef %6645, ptr noundef %6648)
  br label %14075

6650:                                             ; preds = %6639
  %6651 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6652 = load ptr, ptr %6651, align 8, !tbaa !17
  %6653 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6652)
  %6654 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef nonnull %45)
  %6655 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %2, ptr noundef %6653, ptr noundef %6654)
  br label %14075

6656:                                             ; preds = %6636
  %6657 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6658 = load ptr, ptr %6657, align 8, !tbaa !17
  %6659 = tail call i32 @integer_onep(ptr noundef %6658) #24
  %6660 = icmp eq i32 %6659, 0
  br i1 %6660, label %6669, label %6661

6661:                                             ; preds = %6656
  %6662 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %6663 = icmp eq i32 %6662, 0
  br i1 %6663, label %6669, label %6664

6664:                                             ; preds = %6661
  %6665 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %6666 = load ptr, ptr %6665, align 8, !tbaa !17
  %6667 = tail call ptr @build_int_cst(ptr noundef %6666, i64 noundef 0) #24
  %6668 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %6667)
  br label %14075

6669:                                             ; preds = %6639, %6636, %6661, %6656
  %6670 = load i64, ptr %46, align 8
  %6671 = and i64 %6670, 65535
  %6672 = icmp eq i64 %6671, 89
  br i1 %6672, label %6673, label %6687

6673:                                             ; preds = %6669
  %6674 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6675 = load ptr, ptr %6674, align 8, !tbaa !17
  %6676 = tail call i32 @operand_equal_p(ptr noundef %6675, ptr noundef nonnull %45, i32 noundef 0)
  %6677 = icmp eq i32 %6676, 0
  br i1 %6677, label %6678, label %6680

6678:                                             ; preds = %6673
  %6679 = load i64, ptr %46, align 8
  br label %6687

6680:                                             ; preds = %6673
  %6681 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6682 = load ptr, ptr %6681, align 8, !tbaa !17
  %6683 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6682)
  %6684 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6683)
  %6685 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %6686 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6684, ptr noundef %6685)
  br label %14075

6687:                                             ; preds = %6678, %6669
  %6688 = phi i64 [ %6679, %6678 ], [ %6670, %6669 ]
  %6689 = and i64 %6688, 65535
  %6690 = icmp eq i64 %6689, 89
  br i1 %6690, label %6691, label %6718

6691:                                             ; preds = %6687
  %6692 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6693 = load ptr, ptr %6692, align 8, !tbaa !17
  %6694 = tail call i32 @operand_equal_p(ptr noundef %6693, ptr noundef nonnull %45, i32 noundef 0)
  %6695 = icmp eq i32 %6694, 0
  br i1 %6695, label %6718, label %6696

6696:                                             ; preds = %6691
  %6697 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6698 = load ptr, ptr %6697, align 8, !tbaa !17
  %6699 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6700 = icmp eq i32 %6699, 0
  br i1 %6700, label %6713, label %6701

6701:                                             ; preds = %6696
  %6702 = load i64, ptr %6698, align 8
  %6703 = and i64 %6702, 131072
  %6704 = icmp eq i64 %6703, 0
  br i1 %6704, label %6705, label %6713

6705:                                             ; preds = %6701
  %6706 = load i64, ptr %45, align 8
  %6707 = and i64 %6706, 131072
  %6708 = icmp eq i64 %6707, 0
  br i1 %6708, label %6709, label %6713

6709:                                             ; preds = %6705
  %6710 = or i64 %6706, %6702
  %6711 = and i64 %6710, 65536
  %6712 = icmp eq i64 %6711, 0
  br i1 %6712, label %6713, label %6718

6713:                                             ; preds = %6701, %6705, %6696, %6709
  %6714 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6698)
  %6715 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6714)
  %6716 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %6717 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6715, ptr noundef %6716)
  br label %14075

6718:                                             ; preds = %6709, %6691, %6687
  %6719 = load i64, ptr %45, align 8
  %6720 = and i64 %6719, 65535
  %6721 = icmp eq i64 %6720, 89
  br i1 %6721, label %6722, label %6736

6722:                                             ; preds = %6718
  %6723 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6724 = load ptr, ptr %6723, align 8, !tbaa !17
  %6725 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6724, i32 noundef 0)
  %6726 = icmp eq i32 %6725, 0
  br i1 %6726, label %6727, label %6729

6727:                                             ; preds = %6722
  %6728 = load i64, ptr %45, align 8
  br label %6736

6729:                                             ; preds = %6722
  %6730 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6731 = load ptr, ptr %6730, align 8, !tbaa !17
  %6732 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6731)
  %6733 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6734 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6732)
  %6735 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6733, ptr noundef %6734)
  br label %14075

6736:                                             ; preds = %6727, %6718
  %6737 = phi i64 [ %6728, %6727 ], [ %6719, %6718 ]
  %6738 = and i64 %6737, 65535
  %6739 = icmp eq i64 %6738, 89
  br i1 %6739, label %6740, label %1415

6740:                                             ; preds = %6736
  %6741 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6742 = load ptr, ptr %6741, align 8, !tbaa !17
  %6743 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6742, i32 noundef 0)
  %6744 = icmp eq i32 %6743, 0
  br i1 %6744, label %1415, label %6745

6745:                                             ; preds = %6740
  %6746 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6747 = load ptr, ptr %6746, align 8, !tbaa !17
  %6748 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6749 = icmp eq i32 %6748, 0
  br i1 %6749, label %6762, label %6750

6750:                                             ; preds = %6745
  %6751 = load i64, ptr %46, align 8
  %6752 = and i64 %6751, 131072
  %6753 = icmp eq i64 %6752, 0
  br i1 %6753, label %6754, label %6762

6754:                                             ; preds = %6750
  %6755 = load i64, ptr %6747, align 8
  %6756 = and i64 %6755, 131072
  %6757 = icmp eq i64 %6756, 0
  br i1 %6757, label %6758, label %6762

6758:                                             ; preds = %6754
  %6759 = or i64 %6755, %6751
  %6760 = and i64 %6759, 65536
  %6761 = icmp eq i64 %6760, 0
  br i1 %6761, label %6762, label %1415

6762:                                             ; preds = %6750, %6754, %6745, %6758
  %6763 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6747)
  %6764 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6763)
  %6765 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6766 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6764, ptr noundef %6765)
  br label %14075

6767:                                             ; preds = %305
  %6768 = tail call i32 @integer_all_onesp(ptr noundef %45) #24
  %6769 = icmp eq i32 %6768, 0
  br i1 %6769, label %6773, label %6770

6770:                                             ; preds = %6767
  %6771 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6772 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %6771)
  br label %14075

6773:                                             ; preds = %6767
  %6774 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %6775 = icmp eq i32 %6774, 0
  br i1 %6775, label %6778, label %6776

6776:                                             ; preds = %6773
  %6777 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45, ptr noundef nonnull %46)
  br label %14075

6778:                                             ; preds = %6773
  %6779 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %6780 = icmp eq i32 %6779, 0
  br i1 %6780, label %6784, label %6781

6781:                                             ; preds = %6778
  %6782 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %6783 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %6782)
  br label %14075

6784:                                             ; preds = %6778
  %6785 = load i64, ptr %46, align 8
  %6786 = and i64 %6785, 65535
  %6787 = icmp eq i64 %6786, 90
  br i1 %6787, label %6788, label %6796

6788:                                             ; preds = %6784
  %6789 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6790 = load ptr, ptr %6789, align 8, !tbaa !17
  %6791 = tail call i32 @operand_equal_p(ptr noundef %6790, ptr noundef %45, i32 noundef 0)
  %6792 = icmp eq i32 %6791, 0
  br i1 %6792, label %6796, label %6793

6793:                                             ; preds = %6788
  %6794 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6795 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6794, ptr noundef %45)
  br label %14075

6796:                                             ; preds = %6788, %6784
  %6797 = load i64, ptr %45, align 8
  %6798 = and i64 %6797, 65535
  %6799 = icmp eq i64 %6798, 90
  br i1 %6799, label %6800, label %6808

6800:                                             ; preds = %6796
  %6801 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6802 = load ptr, ptr %6801, align 8, !tbaa !17
  %6803 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6802, i32 noundef 0)
  %6804 = icmp eq i32 %6803, 0
  br i1 %6804, label %6808, label %6805

6805:                                             ; preds = %6800
  %6806 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %6807 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6806, ptr noundef nonnull %46)
  br label %14075

6808:                                             ; preds = %6800, %6796
  %6809 = load i64, ptr %46, align 8
  %6810 = and i64 %6809, 65535
  %6811 = icmp eq i64 %6810, 87
  br i1 %6811, label %6812, label %6842

6812:                                             ; preds = %6808
  %6813 = load i64, ptr %45, align 8
  %6814 = and i64 %6813, 65535
  %6815 = icmp eq i64 %6814, 23
  %6816 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6817 = load ptr, ptr %6816, align 8, !tbaa !17
  br i1 %6815, label %6818, label %6833

6818:                                             ; preds = %6812
  %6819 = load i64, ptr %6817, align 8
  %6820 = and i64 %6819, 65535
  %6821 = icmp eq i64 %6820, 23
  br i1 %6821, label %6822, label %6833

6822:                                             ; preds = %6818
  %6823 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6824 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %6825 = load ptr, ptr %6823, align 8, !tbaa !17
  %6826 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6825)
  %6827 = load ptr, ptr %6816, align 8, !tbaa !17
  %6828 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6827)
  %6829 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6826, ptr noundef %6824)
  %6830 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6828, ptr noundef %6824)
  %6831 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 87, ptr noundef %2, ptr noundef %6829, ptr noundef %6830)
  %6832 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6831)
  br label %14075

6833:                                             ; preds = %6812, %6818
  %6834 = tail call i32 @operand_equal_p(ptr noundef %6817, ptr noundef nonnull %45, i32 noundef 0)
  %6835 = icmp eq i32 %6834, 0
  br i1 %6835, label %6836, label %6838

6836:                                             ; preds = %6833
  %6837 = load i64, ptr %46, align 8
  br label %6842

6838:                                             ; preds = %6833
  %6839 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6840 = load ptr, ptr %6839, align 8, !tbaa !17
  %6841 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45, ptr noundef %6840)
  br label %14075

6842:                                             ; preds = %6836, %6808
  %6843 = phi i64 [ %6837, %6836 ], [ %6809, %6808 ]
  %6844 = and i64 %6843, 65535
  %6845 = icmp eq i64 %6844, 87
  br i1 %6845, label %6846, label %6870

6846:                                             ; preds = %6842
  %6847 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6848 = load ptr, ptr %6847, align 8, !tbaa !17
  %6849 = tail call i32 @operand_equal_p(ptr noundef %6848, ptr noundef nonnull %45, i32 noundef 0)
  %6850 = icmp eq i32 %6849, 0
  br i1 %6850, label %6870, label %6851

6851:                                             ; preds = %6846
  %6852 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6853 = load ptr, ptr %6852, align 8, !tbaa !17
  %6854 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6855 = icmp eq i32 %6854, 0
  br i1 %6855, label %6868, label %6856

6856:                                             ; preds = %6851
  %6857 = load i64, ptr %6853, align 8
  %6858 = and i64 %6857, 131072
  %6859 = icmp eq i64 %6858, 0
  br i1 %6859, label %6860, label %6868

6860:                                             ; preds = %6856
  %6861 = load i64, ptr %45, align 8
  %6862 = and i64 %6861, 131072
  %6863 = icmp eq i64 %6862, 0
  br i1 %6863, label %6864, label %6868

6864:                                             ; preds = %6860
  %6865 = or i64 %6861, %6857
  %6866 = and i64 %6865, 65536
  %6867 = icmp eq i64 %6866, 0
  br i1 %6867, label %6868, label %6870

6868:                                             ; preds = %6856, %6860, %6851, %6864
  %6869 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45, ptr noundef %6853)
  br label %14075

6870:                                             ; preds = %6864, %6846, %6842
  %6871 = load i64, ptr %45, align 8
  %6872 = and i64 %6871, 65535
  %6873 = icmp eq i64 %6872, 87
  br i1 %6873, label %6874, label %6898

6874:                                             ; preds = %6870
  %6875 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6876 = load ptr, ptr %6875, align 8, !tbaa !17
  %6877 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6876, i32 noundef 0)
  %6878 = icmp eq i32 %6877, 0
  br i1 %6878, label %6898, label %6879

6879:                                             ; preds = %6874
  %6880 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6881 = load ptr, ptr %6880, align 8, !tbaa !17
  %6882 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6883 = icmp eq i32 %6882, 0
  br i1 %6883, label %6896, label %6884

6884:                                             ; preds = %6879
  %6885 = load i64, ptr %46, align 8
  %6886 = and i64 %6885, 131072
  %6887 = icmp eq i64 %6886, 0
  br i1 %6887, label %6888, label %6896

6888:                                             ; preds = %6884
  %6889 = load i64, ptr %6881, align 8
  %6890 = and i64 %6889, 131072
  %6891 = icmp eq i64 %6890, 0
  br i1 %6891, label %6892, label %6896

6892:                                             ; preds = %6888
  %6893 = or i64 %6889, %6885
  %6894 = and i64 %6893, 65536
  %6895 = icmp eq i64 %6894, 0
  br i1 %6895, label %6896, label %6898

6896:                                             ; preds = %6884, %6888, %6879, %6892
  %6897 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %6881)
  br label %14075

6898:                                             ; preds = %6892, %6874, %6870
  %6899 = load i64, ptr %45, align 8
  %6900 = and i64 %6899, 65535
  %6901 = icmp eq i64 %6900, 87
  br i1 %6901, label %6902, label %6926

6902:                                             ; preds = %6898
  %6903 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %6904 = load ptr, ptr %6903, align 8, !tbaa !17
  %6905 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %6904, i32 noundef 0)
  %6906 = icmp eq i32 %6905, 0
  br i1 %6906, label %6926, label %6907

6907:                                             ; preds = %6902
  %6908 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %6909 = load ptr, ptr %6908, align 8, !tbaa !17
  %6910 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6911 = icmp eq i32 %6910, 0
  br i1 %6911, label %6924, label %6912

6912:                                             ; preds = %6907
  %6913 = load i64, ptr %46, align 8
  %6914 = and i64 %6913, 131072
  %6915 = icmp eq i64 %6914, 0
  br i1 %6915, label %6916, label %6924

6916:                                             ; preds = %6912
  %6917 = load i64, ptr %6909, align 8
  %6918 = and i64 %6917, 131072
  %6919 = icmp eq i64 %6918, 0
  br i1 %6919, label %6920, label %6924

6920:                                             ; preds = %6916
  %6921 = or i64 %6917, %6913
  %6922 = and i64 %6921, 65536
  %6923 = icmp eq i64 %6922, 0
  br i1 %6923, label %6924, label %6926

6924:                                             ; preds = %6912, %6916, %6907, %6920
  %6925 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %6909)
  br label %14075

6926:                                             ; preds = %6920, %6902, %6898
  %6927 = load i64, ptr %46, align 8
  %6928 = and i64 %6927, 65535
  %6929 = icmp eq i64 %6928, 88
  br i1 %6929, label %6930, label %6948

6930:                                             ; preds = %6926
  %6931 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6932 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6933 = load ptr, ptr %6932, align 8, !tbaa !17
  %6934 = tail call i32 @integer_onep(ptr noundef %6933) #24
  %6935 = icmp eq i32 %6934, 0
  br i1 %6935, label %6948, label %6936

6936:                                             ; preds = %6930
  %6937 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %6938 = icmp eq i32 %6937, 0
  br i1 %6938, label %6948, label %6939

6939:                                             ; preds = %6936
  %6940 = load ptr, ptr %6931, align 8, !tbaa !17
  %6941 = getelementptr inbounds %struct.tree_common, ptr %6940, i64 0, i32 2
  %6942 = load ptr, ptr %6941, align 8, !tbaa !17
  %6943 = tail call ptr @build_int_cst(ptr noundef %6942, i64 noundef 1) #24
  %6944 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %6942, ptr noundef %6940, ptr noundef %6943)
  %6945 = load ptr, ptr %6941, align 8, !tbaa !17
  %6946 = tail call ptr @build_int_cst(ptr noundef %6945, i64 noundef 0) #24
  %6947 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %6944, ptr noundef %6946)
  br label %14075

6948:                                             ; preds = %6936, %6930, %6926
  %6949 = load i64, ptr %46, align 8
  %6950 = and i64 %6949, 65535
  %6951 = icmp eq i64 %6950, 90
  br i1 %6951, label %6952, label %6967

6952:                                             ; preds = %6948
  %6953 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %6954 = icmp eq i32 %6953, 0
  br i1 %6954, label %6955, label %6957

6955:                                             ; preds = %6952
  %6956 = load i64, ptr %46, align 8
  br label %6967

6957:                                             ; preds = %6952
  %6958 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6959 = load ptr, ptr %6958, align 8, !tbaa !17
  %6960 = getelementptr inbounds %struct.tree_common, ptr %6959, i64 0, i32 2
  %6961 = load ptr, ptr %6960, align 8, !tbaa !17
  %6962 = tail call ptr @build_int_cst(ptr noundef %6961, i64 noundef 1) #24
  %6963 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %6961, ptr noundef %6959, ptr noundef %6962)
  %6964 = load ptr, ptr %6960, align 8, !tbaa !17
  %6965 = tail call ptr @build_int_cst(ptr noundef %6964, i64 noundef 0) #24
  %6966 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %6963, ptr noundef %6965)
  br label %14075

6967:                                             ; preds = %6955, %6948
  %6968 = phi i64 [ %6956, %6955 ], [ %6949, %6948 ]
  %6969 = and i64 %6968, 65535
  %6970 = icmp eq i64 %6969, 88
  br i1 %6970, label %6971, label %6985

6971:                                             ; preds = %6967
  %6972 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6973 = load ptr, ptr %6972, align 8, !tbaa !17
  %6974 = tail call i32 @operand_equal_p(ptr noundef %6973, ptr noundef nonnull %45, i32 noundef 0)
  %6975 = icmp eq i32 %6974, 0
  br i1 %6975, label %6976, label %6978

6976:                                             ; preds = %6971
  %6977 = load i64, ptr %46, align 8
  br label %6985

6978:                                             ; preds = %6971
  %6979 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6980 = load ptr, ptr %6979, align 8, !tbaa !17
  %6981 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6980)
  %6982 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %6981)
  %6983 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %6984 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %6982, ptr noundef %6983)
  br label %14075

6985:                                             ; preds = %6976, %6967
  %6986 = phi i64 [ %6977, %6976 ], [ %6968, %6967 ]
  %6987 = and i64 %6986, 65535
  %6988 = icmp eq i64 %6987, 88
  br i1 %6988, label %6989, label %7016

6989:                                             ; preds = %6985
  %6990 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %6991 = load ptr, ptr %6990, align 8, !tbaa !17
  %6992 = tail call i32 @operand_equal_p(ptr noundef %6991, ptr noundef nonnull %45, i32 noundef 0)
  %6993 = icmp eq i32 %6992, 0
  br i1 %6993, label %7016, label %6994

6994:                                             ; preds = %6989
  %6995 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %6996 = load ptr, ptr %6995, align 8, !tbaa !17
  %6997 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %6998 = icmp eq i32 %6997, 0
  br i1 %6998, label %7011, label %6999

6999:                                             ; preds = %6994
  %7000 = load i64, ptr %6996, align 8
  %7001 = and i64 %7000, 131072
  %7002 = icmp eq i64 %7001, 0
  br i1 %7002, label %7003, label %7011

7003:                                             ; preds = %6999
  %7004 = load i64, ptr %45, align 8
  %7005 = and i64 %7004, 131072
  %7006 = icmp eq i64 %7005, 0
  br i1 %7006, label %7007, label %7011

7007:                                             ; preds = %7003
  %7008 = or i64 %7004, %7000
  %7009 = and i64 %7008, 65536
  %7010 = icmp eq i64 %7009, 0
  br i1 %7010, label %7011, label %7016

7011:                                             ; preds = %6999, %7003, %6994, %7007
  %7012 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %6996)
  %7013 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %7012)
  %7014 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  %7015 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %7013, ptr noundef %7014)
  br label %14075

7016:                                             ; preds = %7007, %6989, %6985
  %7017 = load i64, ptr %45, align 8
  %7018 = and i64 %7017, 65535
  %7019 = icmp eq i64 %7018, 88
  br i1 %7019, label %7020, label %7034

7020:                                             ; preds = %7016
  %7021 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %7022 = load ptr, ptr %7021, align 8, !tbaa !17
  %7023 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %7022, i32 noundef 0)
  %7024 = icmp eq i32 %7023, 0
  br i1 %7024, label %7025, label %7027

7025:                                             ; preds = %7020
  %7026 = load i64, ptr %45, align 8
  br label %7034

7027:                                             ; preds = %7020
  %7028 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %7029 = load ptr, ptr %7028, align 8, !tbaa !17
  %7030 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7029)
  %7031 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %7032 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %7030)
  %7033 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %7031, ptr noundef %7032)
  br label %14075

7034:                                             ; preds = %7025, %7016
  %7035 = phi i64 [ %7026, %7025 ], [ %7017, %7016 ]
  %7036 = and i64 %7035, 65535
  %7037 = icmp eq i64 %7036, 88
  br i1 %7037, label %7038, label %7065

7038:                                             ; preds = %7034
  %7039 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %7040 = load ptr, ptr %7039, align 8, !tbaa !17
  %7041 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %7040, i32 noundef 0)
  %7042 = icmp eq i32 %7041, 0
  br i1 %7042, label %7065, label %7043

7043:                                             ; preds = %7038
  %7044 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %7045 = load ptr, ptr %7044, align 8, !tbaa !17
  %7046 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %7047 = icmp eq i32 %7046, 0
  br i1 %7047, label %7060, label %7048

7048:                                             ; preds = %7043
  %7049 = load i64, ptr %46, align 8
  %7050 = and i64 %7049, 131072
  %7051 = icmp eq i64 %7050, 0
  br i1 %7051, label %7052, label %7060

7052:                                             ; preds = %7048
  %7053 = load i64, ptr %7045, align 8
  %7054 = and i64 %7053, 131072
  %7055 = icmp eq i64 %7054, 0
  br i1 %7055, label %7056, label %7060

7056:                                             ; preds = %7052
  %7057 = or i64 %7053, %7049
  %7058 = and i64 %7057, 65536
  %7059 = icmp eq i64 %7058, 0
  br i1 %7059, label %7060, label %7065

7060:                                             ; preds = %7048, %7052, %7043, %7056
  %7061 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7045)
  %7062 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %7061)
  %7063 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %7064 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %7062, ptr noundef %7063)
  br label %14075

7065:                                             ; preds = %7056, %7038, %7034
  %7066 = tail call fastcc ptr @distribute_bit_expr(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %7067 = icmp eq ptr %7066, null
  br i1 %7067, label %7068, label %14075

7068:                                             ; preds = %7065
  %7069 = load i64, ptr %45, align 8
  %7070 = and i64 %7069, 65535
  %7071 = icmp eq i64 %7070, 23
  %7072 = load i64, ptr %46, align 8
  %7073 = and i64 %7072, 65535
  br i1 %7071, label %7074, label %7098

7074:                                             ; preds = %7068
  %7075 = icmp eq i64 %7073, 116
  br i1 %7075, label %7076, label %7111

7076:                                             ; preds = %7074
  %7077 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %7078 = load ptr, ptr %7077, align 8, !tbaa !17
  %7079 = getelementptr inbounds %struct.tree_common, ptr %7078, i64 0, i32 2
  %7080 = load ptr, ptr %7079, align 8, !tbaa !17
  %7081 = load i64, ptr %7080, align 8
  %7082 = and i64 %7081, 2097152
  %7083 = icmp eq i64 %7082, 0
  br i1 %7083, label %7111, label %7084

7084:                                             ; preds = %7076
  %7085 = getelementptr inbounds %struct.tree_type, ptr %7080, i64 0, i32 6
  %7086 = load i32, ptr %7085, align 4
  %7087 = and i32 %7086, 1023
  %7088 = icmp ult i32 %7087, 32
  br i1 %7088, label %7089, label %7111

7089:                                             ; preds = %7084
  %7090 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %7091 = load i64, ptr %7090, align 8, !tbaa !17
  %7092 = zext i32 %7087 to i64
  %7093 = shl nsw i64 -1, %7092
  %7094 = or i64 %7091, %7093
  %7095 = icmp eq i64 %7094, -1
  br i1 %7095, label %7096, label %7111

7096:                                             ; preds = %7089
  %7097 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %7078)
  br label %14075

7098:                                             ; preds = %7068
  %7099 = icmp eq i64 %7073, 90
  %7100 = icmp eq i64 %7070, 90
  %7101 = and i1 %7100, %7099
  br i1 %7101, label %7102, label %7111

7102:                                             ; preds = %7098
  %7103 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %7104 = load ptr, ptr %7103, align 8, !tbaa !17
  %7105 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7104)
  %7106 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %7107 = load ptr, ptr %7106, align 8, !tbaa !17
  %7108 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7107)
  %7109 = tail call ptr @build2_stat(i32 noundef 87, ptr noundef %2, ptr noundef %7105, ptr noundef %7108) #24
  %7110 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2, ptr noundef %7109)
  br label %14075

7111:                                             ; preds = %7074, %7076, %7089, %7084, %7098
  %7112 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %7113 = load ptr, ptr %7112, align 8, !tbaa !17
  %7114 = load i64, ptr %7113, align 8
  %7115 = trunc i64 %7114 to i16
  switch i16 %7115, label %7131 [
    i16 10, label %7116
    i16 12, label %7116
  ]

7116:                                             ; preds = %7111, %7111
  %7117 = tail call i32 @host_integerp(ptr noundef nonnull %45, i32 noundef 1) #24
  %7118 = icmp eq i32 %7117, 0
  br i1 %7118, label %7131, label %7119

7119:                                             ; preds = %7116
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #24
  %7120 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %7121 = load i64, ptr %7120, align 8, !tbaa !17
  %7122 = tail call i32 @integer_onep(ptr noundef nonnull %45) #24
  %7123 = trunc i32 %7122 to i8
  %7124 = call fastcc i64 @get_pointer_modulus_and_residue(ptr noundef nonnull %46, ptr noundef nonnull %16, i8 noundef zeroext %7123)
  %7125 = icmp ult i64 %7121, %7124
  br i1 %7125, label %7126, label %7130

7126:                                             ; preds = %7119
  %7127 = load i64, ptr %16, align 8, !tbaa !24
  %7128 = and i64 %7127, %7121
  %7129 = tail call ptr @build_int_cst(ptr noundef %2, i64 noundef %7128) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #24
  br label %14075

7130:                                             ; preds = %7119
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #24
  br label %7131

7131:                                             ; preds = %7130, %7111, %7116
  %7132 = load i64, ptr %46, align 8
  %7133 = trunc i64 %7132 to i32
  %7134 = and i32 %7133, 65535
  %7135 = add nsw i32 %7134, -83
  %7136 = icmp ult i32 %7135, 2
  br i1 %7136, label %7137, label %1572

7137:                                             ; preds = %7131
  %7138 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %7139 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %7140 = load ptr, ptr %7139, align 8, !tbaa !17
  %7141 = tail call i32 @host_integerp(ptr noundef %7140, i32 noundef 1) #24
  %7142 = icmp eq i32 %7141, 0
  br i1 %7142, label %1572, label %7143

7143:                                             ; preds = %7137
  %7144 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %7145 = load ptr, ptr %7144, align 8, !tbaa !17
  %7146 = load i64, ptr %7145, align 8
  %7147 = trunc i64 %7146 to i32
  %7148 = lshr i32 %7147, 21
  %7149 = and i32 %7148, 1
  %7150 = tail call i32 @host_integerp(ptr noundef nonnull %45, i32 noundef %7149) #24
  %7151 = icmp eq i32 %7150, 0
  br i1 %7151, label %1572, label %7152

7152:                                             ; preds = %7143
  %7153 = load ptr, ptr %7139, align 8, !tbaa !17
  %7154 = tail call i64 @tree_low_cst(ptr noundef %7153, i32 noundef 1) #24
  %7155 = load ptr, ptr %7112, align 8, !tbaa !17
  %7156 = getelementptr inbounds %struct.tree_type, ptr %7155, i64 0, i32 6
  %7157 = load i32, ptr %7156, align 4
  %7158 = and i32 %7157, 1023
  %7159 = zext i32 %7158 to i64
  %7160 = icmp slt i64 %7154, %7159
  %7161 = icmp ult i32 %7158, 65
  %7162 = and i1 %7161, %7160
  br i1 %7162, label %7163, label %1572

7163:                                             ; preds = %7152
  %7164 = load ptr, ptr %7139, align 8, !tbaa !17
  %7165 = tail call i64 @tree_low_cst(ptr noundef %7164, i32 noundef 1) #24
  %7166 = icmp sgt i64 %7165, 0
  br i1 %7166, label %7167, label %1572

7167:                                             ; preds = %7163
  %7168 = load ptr, ptr %7139, align 8, !tbaa !17
  %7169 = tail call i64 @tree_low_cst(ptr noundef %7168, i32 noundef 1) #24
  %7170 = trunc i64 %7169 to i32
  %7171 = load ptr, ptr %7144, align 8, !tbaa !17
  %7172 = load i64, ptr %7171, align 8
  %7173 = trunc i64 %7172 to i32
  %7174 = lshr i32 %7173, 21
  %7175 = and i32 %7174, 1
  %7176 = tail call i64 @tree_low_cst(ptr noundef nonnull %45, i32 noundef %7175) #24
  %7177 = load ptr, ptr %7112, align 8, !tbaa !17
  %7178 = load i64, ptr %46, align 8
  %7179 = trunc i64 %7178 to i16
  switch i16 %7179, label %7270 [
    i16 83, label %7180
    i16 84, label %7184
  ]

7180:                                             ; preds = %7167
  %7181 = and i64 %7169, 4294967295
  %7182 = shl nsw i64 -1, %7181
  %7183 = xor i64 %7182, -1
  br label %7270

7184:                                             ; preds = %7167
  %7185 = getelementptr inbounds %struct.tree_type, ptr %7177, i64 0, i32 6
  %7186 = load i32, ptr %7185, align 4
  %7187 = and i32 %7186, 1023
  %7188 = load i64, ptr %7177, align 8
  %7189 = and i64 %7188, 65535
  %7190 = icmp eq i64 %7189, 14
  br i1 %7190, label %7191, label %7193

7191:                                             ; preds = %7184
  %7192 = tail call i32 @vector_type_mode(ptr noundef nonnull %7177) #24
  br label %7196

7193:                                             ; preds = %7184
  %7194 = lshr i32 %7186, 16
  %7195 = and i32 %7194, 255
  br label %7196

7196:                                             ; preds = %7193, %7191
  %7197 = phi i32 [ %7192, %7191 ], [ %7195, %7193 ]
  %7198 = zext i32 %7197 to i64
  %7199 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %7198
  %7200 = load i8, ptr %7199, align 1, !tbaa !17
  %7201 = zext i8 %7200 to i32
  %7202 = shl nuw nsw i32 %7201, 3
  %7203 = icmp eq i32 %7187, %7202
  br i1 %7203, label %7204, label %7270

7204:                                             ; preds = %7196
  %7205 = load ptr, ptr %7112, align 8, !tbaa !17
  %7206 = getelementptr inbounds %struct.tree_type, ptr %7205, i64 0, i32 6
  %7207 = load i32, ptr %7206, align 4
  %7208 = and i32 %7207, 1023
  %7209 = load ptr, ptr %7138, align 8, !tbaa !17
  %7210 = load i64, ptr %7209, align 8
  %7211 = and i64 %7210, 65535
  %7212 = icmp eq i64 %7211, 116
  br i1 %7212, label %7213, label %7247

7213:                                             ; preds = %7204
  %7214 = getelementptr inbounds %struct.tree_exp, ptr %7209, i64 0, i32 3
  %7215 = load ptr, ptr %7214, align 8, !tbaa !17
  %7216 = getelementptr inbounds %struct.tree_common, ptr %7215, i64 0, i32 2
  %7217 = load ptr, ptr %7216, align 8, !tbaa !17
  %7218 = load i64, ptr %7217, align 8
  %7219 = and i64 %7218, 2097152
  %7220 = icmp eq i64 %7219, 0
  br i1 %7220, label %7247, label %7221

7221:                                             ; preds = %7213
  %7222 = getelementptr inbounds %struct.tree_type, ptr %7217, i64 0, i32 6
  %7223 = load i32, ptr %7222, align 4
  %7224 = and i32 %7223, 1023
  %7225 = and i64 %7218, 65535
  %7226 = icmp eq i64 %7225, 14
  br i1 %7226, label %7227, label %7229

7227:                                             ; preds = %7221
  %7228 = tail call i32 @vector_type_mode(ptr noundef nonnull %7217) #24
  br label %7232

7229:                                             ; preds = %7221
  %7230 = lshr i32 %7223, 16
  %7231 = and i32 %7230, 255
  br label %7232

7232:                                             ; preds = %7229, %7227
  %7233 = phi i32 [ %7228, %7227 ], [ %7231, %7229 ]
  %7234 = zext i32 %7233 to i64
  %7235 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %7234
  %7236 = load i8, ptr %7235, align 1, !tbaa !17
  %7237 = zext i8 %7236 to i32
  %7238 = shl nuw nsw i32 %7237, 3
  %7239 = icmp eq i32 %7224, %7238
  br i1 %7239, label %7240, label %7247

7240:                                             ; preds = %7232
  %7241 = load i32, ptr %7222, align 4
  %7242 = and i32 %7241, 1023
  %7243 = icmp ult i32 %7242, %7208
  br i1 %7243, label %7244, label %7247

7244:                                             ; preds = %7240
  %7245 = icmp ugt i32 %7242, %7170
  %7246 = select i1 %7245, ptr %7217, ptr %7177
  br label %7247

7247:                                             ; preds = %7244, %7232, %7240, %7213, %7204
  %7248 = phi i32 [ %7208, %7213 ], [ %7208, %7204 ], [ %7208, %7240 ], [ %7208, %7232 ], [ %7242, %7244 ]
  %7249 = phi ptr [ %7177, %7213 ], [ %7177, %7204 ], [ %7177, %7240 ], [ %7177, %7232 ], [ %7246, %7244 ]
  %7250 = sub i64 64, %7169
  %7251 = and i64 %7250, 4294967295
  %7252 = lshr i64 -1, %7251
  %7253 = sub i32 %7248, %7170
  %7254 = zext i32 %7253 to i64
  %7255 = shl i64 %7252, %7254
  %7256 = load ptr, ptr %7112, align 8, !tbaa !17
  %7257 = load i64, ptr %7256, align 8
  %7258 = and i64 %7257, 2097152
  %7259 = icmp eq i64 %7258, 0
  br i1 %7259, label %7260, label %7270

7260:                                             ; preds = %7247
  %7261 = getelementptr inbounds %struct.tree_type, ptr %7256, i64 0, i32 6
  %7262 = load i32, ptr %7261, align 4
  %7263 = and i32 %7262, 1023
  %7264 = icmp eq i32 %7248, %7263
  br i1 %7264, label %7265, label %7270

7265:                                             ; preds = %7260
  %7266 = and i64 %7255, %7176
  %7267 = icmp eq i64 %7266, 0
  br i1 %7267, label %7268, label %7270

7268:                                             ; preds = %7265
  %7269 = tail call ptr @unsigned_type_for(ptr noundef nonnull %7256) #24
  br label %7270

7270:                                             ; preds = %7247, %7260, %7268, %7265, %7167, %7196, %7180
  %7271 = phi ptr [ %7177, %7180 ], [ %7177, %7196 ], [ %7177, %7167 ], [ %7249, %7247 ], [ %7269, %7268 ], [ %7249, %7260 ], [ %7249, %7265 ]
  %7272 = phi i64 [ %7183, %7180 ], [ 0, %7196 ], [ 0, %7167 ], [ %7255, %7247 ], [ %7255, %7268 ], [ %7255, %7260 ], [ 0, %7265 ]
  %7273 = and i64 %7272, %7176
  %7274 = icmp eq i64 %7273, %7176
  br i1 %7274, label %7275, label %7278

7275:                                             ; preds = %7270
  %7276 = tail call ptr @build_int_cst(ptr noundef %2, i64 noundef 0) #24
  %7277 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7276, ptr noundef nonnull %46)
  br label %14075

7278:                                             ; preds = %7270
  %7279 = or i64 %7272, %7176
  %7280 = icmp eq i64 %7279, %7176
  br i1 %7280, label %1572, label %7281

7281:                                             ; preds = %7278
  %7282 = add i64 %7279, 1
  %7283 = and i64 %7282, %7279
  %7284 = icmp eq i64 %7283, 0
  br i1 %7284, label %7285, label %1572

7285:                                             ; preds = %7281
  switch i64 %7279, label %1572 [
    i64 255, label %7286
    i64 65535, label %7286
    i64 4294967295, label %7286
    i64 -1, label %7286
  ]

7286:                                             ; preds = %7285, %7285, %7285, %7285
  %7287 = load ptr, ptr %7112, align 8, !tbaa !17
  %7288 = icmp eq ptr %7271, %7287
  br i1 %7288, label %7298, label %7289

7289:                                             ; preds = %7286
  %7290 = load i64, ptr %46, align 8
  %7291 = trunc i64 %7290 to i32
  %7292 = and i32 %7291, 65535
  %7293 = load ptr, ptr %7138, align 8, !tbaa !17
  %7294 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %7271, ptr noundef %7293)
  %7295 = load ptr, ptr %7139, align 8, !tbaa !17
  %7296 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %7292, ptr noundef %7271, ptr noundef %7294, ptr noundef %7295)
  %7297 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7296)
  br label %7298

7298:                                             ; preds = %7286, %7289
  %7299 = phi ptr [ %7297, %7289 ], [ %3, %7286 ]
  %7300 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %7301 = load ptr, ptr %7300, align 8, !tbaa !17
  %7302 = tail call ptr @build_int_cst_type(ptr noundef %7301, i64 noundef %7279) #24
  %7303 = tail call i32 @tree_int_cst_equal(ptr noundef %7302, ptr noundef nonnull %45) #24
  %7304 = icmp eq i32 %7303, 0
  br i1 %7304, label %7305, label %1572

7305:                                             ; preds = %7298
  %7306 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %7299, ptr noundef %7302)
  br label %14075

7307:                                             ; preds = %305
  %7308 = load i64, ptr %45, align 8
  %7309 = and i64 %7308, 65535
  %7310 = icmp eq i64 %7309, 24
  br i1 %7310, label %7311, label %7607

7311:                                             ; preds = %7307
  %7312 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %7313 = load ptr, ptr %7312, align 8, !tbaa !17
  %7314 = load i64, ptr %7313, align 8
  %7315 = and i64 %7314, 65535
  %7316 = icmp eq i64 %7315, 14
  br i1 %7316, label %7317, label %7320

7317:                                             ; preds = %7311
  %7318 = tail call i32 @vector_type_mode(ptr noundef nonnull %7313) #24
  %7319 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7325

7320:                                             ; preds = %7311
  %7321 = getelementptr inbounds %struct.tree_type, ptr %7313, i64 0, i32 6
  %7322 = load i32, ptr %7321, align 4
  %7323 = lshr i32 %7322, 16
  %7324 = and i32 %7323, 255
  br label %7325

7325:                                             ; preds = %7320, %7317
  %7326 = phi ptr [ %7319, %7317 ], [ %7313, %7320 ]
  %7327 = phi i32 [ %7318, %7317 ], [ %7324, %7320 ]
  %7328 = zext i32 %7327 to i64
  %7329 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7328
  %7330 = load i8, ptr %7329, align 1, !tbaa !17
  %7331 = icmp eq i8 %7330, 8
  br i1 %7331, label %7389, label %7332

7332:                                             ; preds = %7325
  %7333 = load i64, ptr %7326, align 8
  %7334 = and i64 %7333, 65535
  %7335 = icmp eq i64 %7334, 14
  br i1 %7335, label %7336, label %7339

7336:                                             ; preds = %7332
  %7337 = tail call i32 @vector_type_mode(ptr noundef nonnull %7326) #24
  %7338 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7344

7339:                                             ; preds = %7332
  %7340 = getelementptr inbounds %struct.tree_type, ptr %7326, i64 0, i32 6
  %7341 = load i32, ptr %7340, align 4
  %7342 = lshr i32 %7341, 16
  %7343 = and i32 %7342, 255
  br label %7344

7344:                                             ; preds = %7339, %7336
  %7345 = phi ptr [ %7338, %7336 ], [ %7326, %7339 ]
  %7346 = phi i32 [ %7337, %7336 ], [ %7343, %7339 ]
  %7347 = zext i32 %7346 to i64
  %7348 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7347
  %7349 = load i8, ptr %7348, align 1, !tbaa !17
  %7350 = icmp eq i8 %7349, 9
  br i1 %7350, label %7389, label %7351

7351:                                             ; preds = %7344
  %7352 = load i64, ptr %7345, align 8
  %7353 = and i64 %7352, 65535
  %7354 = icmp eq i64 %7353, 14
  br i1 %7354, label %7355, label %7358

7355:                                             ; preds = %7351
  %7356 = tail call i32 @vector_type_mode(ptr noundef nonnull %7345) #24
  %7357 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7363

7358:                                             ; preds = %7351
  %7359 = getelementptr inbounds %struct.tree_type, ptr %7345, i64 0, i32 6
  %7360 = load i32, ptr %7359, align 4
  %7361 = lshr i32 %7360, 16
  %7362 = and i32 %7361, 255
  br label %7363

7363:                                             ; preds = %7358, %7355
  %7364 = phi ptr [ %7357, %7355 ], [ %7345, %7358 ]
  %7365 = phi i32 [ %7356, %7355 ], [ %7362, %7358 ]
  %7366 = zext i32 %7365 to i64
  %7367 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7366
  %7368 = load i8, ptr %7367, align 1, !tbaa !17
  %7369 = icmp eq i8 %7368, 11
  br i1 %7369, label %7389, label %7370

7370:                                             ; preds = %7363
  %7371 = load i64, ptr %7364, align 8
  %7372 = and i64 %7371, 65535
  %7373 = icmp eq i64 %7372, 14
  br i1 %7373, label %7374, label %7376

7374:                                             ; preds = %7370
  %7375 = tail call i32 @vector_type_mode(ptr noundef nonnull %7364) #24
  br label %7381

7376:                                             ; preds = %7370
  %7377 = getelementptr inbounds %struct.tree_type, ptr %7364, i64 0, i32 6
  %7378 = load i32, ptr %7377, align 4
  %7379 = lshr i32 %7378, 16
  %7380 = and i32 %7379, 255
  br label %7381

7381:                                             ; preds = %7376, %7374
  %7382 = phi i32 [ %7375, %7374 ], [ %7380, %7376 ]
  %7383 = zext i32 %7382 to i64
  %7384 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7383
  %7385 = load i8, ptr %7384, align 1, !tbaa !17
  %7386 = icmp eq i8 %7385, 17
  br i1 %7386, label %7387, label %7604

7387:                                             ; preds = %7381
  %7388 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7389

7389:                                             ; preds = %7387, %7363, %7344, %7325
  %7390 = phi ptr [ %7388, %7387 ], [ %7364, %7363 ], [ %7345, %7344 ], [ %7326, %7325 ]
  %7391 = load i64, ptr %7390, align 8
  %7392 = and i64 %7391, 65535
  %7393 = icmp eq i64 %7392, 14
  br i1 %7393, label %7394, label %7397

7394:                                             ; preds = %7389
  %7395 = tail call i32 @vector_type_mode(ptr noundef nonnull %7390) #24
  %7396 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7402

7397:                                             ; preds = %7389
  %7398 = getelementptr inbounds %struct.tree_type, ptr %7390, i64 0, i32 6
  %7399 = load i32, ptr %7398, align 4
  %7400 = lshr i32 %7399, 16
  %7401 = and i32 %7400, 255
  br label %7402

7402:                                             ; preds = %7397, %7394
  %7403 = phi ptr [ %7396, %7394 ], [ %7390, %7397 ]
  %7404 = phi i32 [ %7395, %7394 ], [ %7401, %7397 ]
  %7405 = zext i32 %7404 to i64
  %7406 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7405
  %7407 = load i8, ptr %7406, align 1, !tbaa !17
  %7408 = icmp eq i8 %7407, 8
  br i1 %7408, label %7428, label %7409

7409:                                             ; preds = %7402
  %7410 = load i64, ptr %7403, align 8
  %7411 = and i64 %7410, 65535
  %7412 = icmp eq i64 %7411, 14
  br i1 %7412, label %7413, label %7416

7413:                                             ; preds = %7409
  %7414 = tail call i32 @vector_type_mode(ptr noundef nonnull %7403) #24
  %7415 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7421

7416:                                             ; preds = %7409
  %7417 = getelementptr inbounds %struct.tree_type, ptr %7403, i64 0, i32 6
  %7418 = load i32, ptr %7417, align 4
  %7419 = lshr i32 %7418, 16
  %7420 = and i32 %7419, 255
  br label %7421

7421:                                             ; preds = %7416, %7413
  %7422 = phi ptr [ %7415, %7413 ], [ %7403, %7416 ]
  %7423 = phi i32 [ %7414, %7413 ], [ %7420, %7416 ]
  %7424 = zext i32 %7423 to i64
  %7425 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7424
  %7426 = load i8, ptr %7425, align 1, !tbaa !17
  %7427 = icmp eq i8 %7426, 9
  br i1 %7427, label %7428, label %7440

7428:                                             ; preds = %7421, %7402
  %7429 = phi ptr [ %7422, %7421 ], [ %7403, %7402 ]
  %7430 = load i64, ptr %7429, align 8
  %7431 = and i64 %7430, 65535
  %7432 = icmp eq i64 %7431, 14
  br i1 %7432, label %7433, label %7435

7433:                                             ; preds = %7428
  %7434 = tail call i32 @vector_type_mode(ptr noundef nonnull %7429) #24
  br label %7457

7435:                                             ; preds = %7428
  %7436 = getelementptr inbounds %struct.tree_type, ptr %7429, i64 0, i32 6
  %7437 = load i32, ptr %7436, align 4
  %7438 = lshr i32 %7437, 16
  %7439 = and i32 %7438, 255
  br label %7457

7440:                                             ; preds = %7421
  %7441 = load i64, ptr %7422, align 8
  %7442 = and i64 %7441, 65535
  %7443 = icmp eq i64 %7442, 14
  br i1 %7443, label %7444, label %7446

7444:                                             ; preds = %7440
  %7445 = tail call i32 @vector_type_mode(ptr noundef nonnull %7422) #24
  br label %7451

7446:                                             ; preds = %7440
  %7447 = getelementptr inbounds %struct.tree_type, ptr %7422, i64 0, i32 6
  %7448 = load i32, ptr %7447, align 4
  %7449 = lshr i32 %7448, 16
  %7450 = and i32 %7449, 255
  br label %7451

7451:                                             ; preds = %7446, %7444
  %7452 = phi i32 [ %7445, %7444 ], [ %7450, %7446 ]
  %7453 = zext i32 %7452 to i64
  %7454 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7453
  %7455 = load i8, ptr %7454, align 1, !tbaa !17
  %7456 = zext i8 %7455 to i32
  br label %7457

7457:                                             ; preds = %7433, %7435, %7451
  %7458 = phi i32 [ %7456, %7451 ], [ %7434, %7433 ], [ %7439, %7435 ]
  %7459 = zext i32 %7458 to i64
  %7460 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7459
  %7461 = load i8, ptr %7460, align 1, !tbaa !17
  %7462 = icmp eq i8 %7461, 9
  %7463 = load ptr, ptr %7312, align 8, !tbaa !17
  %7464 = load i64, ptr %7463, align 8
  %7465 = and i64 %7464, 65535
  %7466 = icmp eq i64 %7465, 14
  br i1 %7462, label %7467, label %7531

7467:                                             ; preds = %7457
  br i1 %7466, label %7468, label %7471

7468:                                             ; preds = %7467
  %7469 = tail call i32 @vector_type_mode(ptr noundef nonnull %7463) #24
  %7470 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7476

7471:                                             ; preds = %7467
  %7472 = getelementptr inbounds %struct.tree_type, ptr %7463, i64 0, i32 6
  %7473 = load i32, ptr %7472, align 4
  %7474 = lshr i32 %7473, 16
  %7475 = and i32 %7474, 255
  br label %7476

7476:                                             ; preds = %7471, %7468
  %7477 = phi ptr [ %7470, %7468 ], [ %7463, %7471 ]
  %7478 = phi i32 [ %7469, %7468 ], [ %7475, %7471 ]
  %7479 = zext i32 %7478 to i64
  %7480 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7479
  %7481 = load i8, ptr %7480, align 1, !tbaa !17
  %7482 = icmp eq i8 %7481, 8
  br i1 %7482, label %7502, label %7483

7483:                                             ; preds = %7476
  %7484 = load i64, ptr %7477, align 8
  %7485 = and i64 %7484, 65535
  %7486 = icmp eq i64 %7485, 14
  br i1 %7486, label %7487, label %7490

7487:                                             ; preds = %7483
  %7488 = tail call i32 @vector_type_mode(ptr noundef nonnull %7477) #24
  %7489 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7495

7490:                                             ; preds = %7483
  %7491 = getelementptr inbounds %struct.tree_type, ptr %7477, i64 0, i32 6
  %7492 = load i32, ptr %7491, align 4
  %7493 = lshr i32 %7492, 16
  %7494 = and i32 %7493, 255
  br label %7495

7495:                                             ; preds = %7490, %7487
  %7496 = phi ptr [ %7489, %7487 ], [ %7477, %7490 ]
  %7497 = phi i32 [ %7488, %7487 ], [ %7494, %7490 ]
  %7498 = zext i32 %7497 to i64
  %7499 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7498
  %7500 = load i8, ptr %7499, align 1, !tbaa !17
  %7501 = icmp eq i8 %7500, 9
  br i1 %7501, label %7502, label %7514

7502:                                             ; preds = %7495, %7476
  %7503 = phi ptr [ %7496, %7495 ], [ %7477, %7476 ]
  %7504 = load i64, ptr %7503, align 8
  %7505 = and i64 %7504, 65535
  %7506 = icmp eq i64 %7505, 14
  br i1 %7506, label %7507, label %7509

7507:                                             ; preds = %7502
  %7508 = tail call i32 @vector_type_mode(ptr noundef nonnull %7503) #24
  br label %7595

7509:                                             ; preds = %7502
  %7510 = getelementptr inbounds %struct.tree_type, ptr %7503, i64 0, i32 6
  %7511 = load i32, ptr %7510, align 4
  %7512 = lshr i32 %7511, 16
  %7513 = and i32 %7512, 255
  br label %7595

7514:                                             ; preds = %7495
  %7515 = load i64, ptr %7496, align 8
  %7516 = and i64 %7515, 65535
  %7517 = icmp eq i64 %7516, 14
  br i1 %7517, label %7518, label %7520

7518:                                             ; preds = %7514
  %7519 = tail call i32 @vector_type_mode(ptr noundef nonnull %7496) #24
  br label %7525

7520:                                             ; preds = %7514
  %7521 = getelementptr inbounds %struct.tree_type, ptr %7496, i64 0, i32 6
  %7522 = load i32, ptr %7521, align 4
  %7523 = lshr i32 %7522, 16
  %7524 = and i32 %7523, 255
  br label %7525

7525:                                             ; preds = %7520, %7518
  %7526 = phi i32 [ %7519, %7518 ], [ %7524, %7520 ]
  %7527 = zext i32 %7526 to i64
  %7528 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7527
  %7529 = load i8, ptr %7528, align 1, !tbaa !17
  %7530 = zext i8 %7529 to i32
  br label %7595

7531:                                             ; preds = %7457
  br i1 %7466, label %7532, label %7535

7532:                                             ; preds = %7531
  %7533 = tail call i32 @vector_type_mode(ptr noundef nonnull %7463) #24
  %7534 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7540

7535:                                             ; preds = %7531
  %7536 = getelementptr inbounds %struct.tree_type, ptr %7463, i64 0, i32 6
  %7537 = load i32, ptr %7536, align 4
  %7538 = lshr i32 %7537, 16
  %7539 = and i32 %7538, 255
  br label %7540

7540:                                             ; preds = %7535, %7532
  %7541 = phi ptr [ %7534, %7532 ], [ %7463, %7535 ]
  %7542 = phi i32 [ %7533, %7532 ], [ %7539, %7535 ]
  %7543 = zext i32 %7542 to i64
  %7544 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7543
  %7545 = load i8, ptr %7544, align 1, !tbaa !17
  %7546 = icmp eq i8 %7545, 8
  br i1 %7546, label %7566, label %7547

7547:                                             ; preds = %7540
  %7548 = load i64, ptr %7541, align 8
  %7549 = and i64 %7548, 65535
  %7550 = icmp eq i64 %7549, 14
  br i1 %7550, label %7551, label %7554

7551:                                             ; preds = %7547
  %7552 = tail call i32 @vector_type_mode(ptr noundef nonnull %7541) #24
  %7553 = load ptr, ptr %7312, align 8, !tbaa !17
  br label %7559

7554:                                             ; preds = %7547
  %7555 = getelementptr inbounds %struct.tree_type, ptr %7541, i64 0, i32 6
  %7556 = load i32, ptr %7555, align 4
  %7557 = lshr i32 %7556, 16
  %7558 = and i32 %7557, 255
  br label %7559

7559:                                             ; preds = %7554, %7551
  %7560 = phi ptr [ %7553, %7551 ], [ %7541, %7554 ]
  %7561 = phi i32 [ %7552, %7551 ], [ %7558, %7554 ]
  %7562 = zext i32 %7561 to i64
  %7563 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7562
  %7564 = load i8, ptr %7563, align 1, !tbaa !17
  %7565 = icmp eq i8 %7564, 9
  br i1 %7565, label %7566, label %7578

7566:                                             ; preds = %7559, %7540
  %7567 = phi ptr [ %7560, %7559 ], [ %7541, %7540 ]
  %7568 = load i64, ptr %7567, align 8
  %7569 = and i64 %7568, 65535
  %7570 = icmp eq i64 %7569, 14
  br i1 %7570, label %7571, label %7573

7571:                                             ; preds = %7566
  %7572 = tail call i32 @vector_type_mode(ptr noundef nonnull %7567) #24
  br label %7595

7573:                                             ; preds = %7566
  %7574 = getelementptr inbounds %struct.tree_type, ptr %7567, i64 0, i32 6
  %7575 = load i32, ptr %7574, align 4
  %7576 = lshr i32 %7575, 16
  %7577 = and i32 %7576, 255
  br label %7595

7578:                                             ; preds = %7559
  %7579 = load i64, ptr %7560, align 8
  %7580 = and i64 %7579, 65535
  %7581 = icmp eq i64 %7580, 14
  br i1 %7581, label %7582, label %7584

7582:                                             ; preds = %7578
  %7583 = tail call i32 @vector_type_mode(ptr noundef nonnull %7560) #24
  br label %7589

7584:                                             ; preds = %7578
  %7585 = getelementptr inbounds %struct.tree_type, ptr %7560, i64 0, i32 6
  %7586 = load i32, ptr %7585, align 4
  %7587 = lshr i32 %7586, 16
  %7588 = and i32 %7587, 255
  br label %7589

7589:                                             ; preds = %7584, %7582
  %7590 = phi i32 [ %7583, %7582 ], [ %7588, %7584 ]
  %7591 = zext i32 %7590 to i64
  %7592 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7591
  %7593 = load i8, ptr %7592, align 1, !tbaa !17
  %7594 = zext i8 %7593 to i32
  br label %7595

7595:                                             ; preds = %7589, %7573, %7571, %7525, %7509, %7507
  %7596 = phi i32 [ %7530, %7525 ], [ %7508, %7507 ], [ %7513, %7509 ], [ %7594, %7589 ], [ %7572, %7571 ], [ %7577, %7573 ]
  %7597 = add i32 %7596, -38
  %7598 = zext i32 %7597 to i64
  %7599 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %7598
  %7600 = load ptr, ptr %7599, align 8, !tbaa !6
  %7601 = getelementptr inbounds %struct.real_format, ptr %7600, i64 0, i32 12
  %7602 = load i8, ptr %7601, align 1, !tbaa !34
  %7603 = icmp eq i8 %7602, 0
  br i1 %7603, label %7604, label %7607

7604:                                             ; preds = %7595, %7381
  %7605 = tail call i32 @real_zerop(ptr noundef nonnull %45) #24
  %7606 = icmp eq i32 %7605, 0
  br i1 %7606, label %7607, label %14075

7607:                                             ; preds = %7604, %7595, %7307
  %7608 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %7609 = load ptr, ptr %7608, align 8, !tbaa !17
  %7610 = load i64, ptr %7609, align 8
  %7611 = and i64 %7610, 65535
  %7612 = icmp eq i64 %7611, 9
  br i1 %7612, label %7613, label %7661

7613:                                             ; preds = %7607
  %7614 = getelementptr inbounds %struct.tree_type, ptr %7609, i64 0, i32 6
  %7615 = load i32, ptr %7614, align 4
  %7616 = lshr i32 %7615, 16
  %7617 = and i32 %7616, 255
  %7618 = zext i32 %7617 to i64
  %7619 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7618
  %7620 = load i8, ptr %7619, align 1, !tbaa !17
  switch i8 %7620, label %7652 [
    i8 9, label %7625
    i8 8, label %7625
    i8 11, label %7621
    i8 17, label %7621
  ]

7621:                                             ; preds = %7613, %7613
  %7622 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7618
  %7623 = load i8, ptr %7622, align 1, !tbaa !17
  %7624 = zext i8 %7623 to i32
  br label %7625

7625:                                             ; preds = %7613, %7613, %7621
  %7626 = phi i32 [ %7617, %7613 ], [ %7624, %7621 ], [ %7617, %7613 ]
  %7627 = add nsw i32 %7626, -38
  %7628 = zext i32 %7627 to i64
  %7629 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %7628
  %7630 = load ptr, ptr %7629, align 8, !tbaa !6
  %7631 = getelementptr inbounds %struct.real_format, ptr %7630, i64 0, i32 11
  %7632 = load i8, ptr %7631, align 2, !tbaa !36
  %7633 = icmp eq i8 %7632, 0
  %7634 = load i32, ptr @flag_finite_math_only, align 4
  %7635 = icmp ne i32 %7634, 0
  %7636 = select i1 %7633, i1 true, i1 %7635
  br i1 %7636, label %7637, label %7661

7637:                                             ; preds = %7625
  switch i8 %7620, label %7652 [
    i8 9, label %7642
    i8 8, label %7642
    i8 11, label %7638
    i8 17, label %7638
  ]

7638:                                             ; preds = %7637, %7637
  %7639 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7618
  %7640 = load i8, ptr %7639, align 1, !tbaa !17
  %7641 = zext i8 %7640 to i32
  br label %7642

7642:                                             ; preds = %7637, %7637, %7638
  %7643 = phi i32 [ %7617, %7637 ], [ %7641, %7638 ], [ %7617, %7637 ]
  %7644 = add nsw i32 %7643, -38
  %7645 = zext i32 %7644 to i64
  %7646 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %7645
  %7647 = load ptr, ptr %7646, align 8, !tbaa !6
  %7648 = getelementptr inbounds %struct.real_format, ptr %7647, i64 0, i32 12
  %7649 = load i8, ptr %7648, align 1, !tbaa !34
  %7650 = icmp eq i8 %7649, 0
  %7651 = select i1 %7650, i1 true, i1 %7635
  br i1 %7651, label %7652, label %7661

7652:                                             ; preds = %7637, %7613, %7642
  %7653 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %7654 = icmp eq i32 %7653, 0
  %7655 = load ptr, ptr %7608, align 8, !tbaa !17
  br i1 %7654, label %7656, label %7658

7656:                                             ; preds = %7652
  %7657 = load i64, ptr %7655, align 8
  br label %7661

7658:                                             ; preds = %7652
  %7659 = tail call ptr @build_real(ptr noundef %7655, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1) #24
  %7660 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %7659, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %14075

7661:                                             ; preds = %7656, %7642, %7625, %7607
  %7662 = phi i64 [ %7610, %7642 ], [ %7610, %7625 ], [ %7657, %7656 ], [ %7610, %7607 ]
  %7663 = phi ptr [ %7609, %7642 ], [ %7609, %7625 ], [ %7655, %7656 ], [ %7609, %7607 ]
  %7664 = and i64 %7662, 65535
  %7665 = icmp eq i64 %7664, 13
  br i1 %7665, label %7666, label %8243

7666:                                             ; preds = %7661
  %7667 = getelementptr inbounds %struct.tree_common, ptr %7663, i64 0, i32 2
  %7668 = load ptr, ptr %7667, align 8, !tbaa !17
  %7669 = load i64, ptr %7668, align 8
  %7670 = and i64 %7669, 65535
  %7671 = icmp eq i64 %7670, 9
  br i1 %7671, label %7672, label %8243

7672:                                             ; preds = %7666
  %7673 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %7674 = icmp eq i32 %7673, 0
  br i1 %7674, label %8243, label %7675

7675:                                             ; preds = %7672
  %7676 = load ptr, ptr %7608, align 8, !tbaa !17
  %7677 = getelementptr inbounds %struct.tree_common, ptr %7676, i64 0, i32 2
  %7678 = load ptr, ptr %7677, align 8, !tbaa !17
  %7679 = load i64, ptr %7678, align 8
  %7680 = and i64 %7679, 65535
  %7681 = icmp eq i64 %7680, 14
  br i1 %7681, label %7682, label %7685

7682:                                             ; preds = %7675
  %7683 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7684 = load i64, ptr %7678, align 8
  br label %7690

7685:                                             ; preds = %7675
  %7686 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7687 = load i32, ptr %7686, align 4
  %7688 = lshr i32 %7687, 16
  %7689 = and i32 %7688, 255
  br label %7690

7690:                                             ; preds = %7685, %7682
  %7691 = phi i64 [ %7684, %7682 ], [ %7679, %7685 ]
  %7692 = phi i32 [ %7683, %7682 ], [ %7689, %7685 ]
  %7693 = zext i32 %7692 to i64
  %7694 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7693
  %7695 = load i8, ptr %7694, align 1, !tbaa !17
  %7696 = icmp eq i8 %7695, 8
  br i1 %7696, label %7751, label %7697

7697:                                             ; preds = %7690
  %7698 = and i64 %7691, 65535
  %7699 = icmp eq i64 %7698, 14
  br i1 %7699, label %7700, label %7703

7700:                                             ; preds = %7697
  %7701 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7702 = load i64, ptr %7678, align 8
  br label %7708

7703:                                             ; preds = %7697
  %7704 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7705 = load i32, ptr %7704, align 4
  %7706 = lshr i32 %7705, 16
  %7707 = and i32 %7706, 255
  br label %7708

7708:                                             ; preds = %7703, %7700
  %7709 = phi i64 [ %7702, %7700 ], [ %7691, %7703 ]
  %7710 = phi i32 [ %7701, %7700 ], [ %7707, %7703 ]
  %7711 = zext i32 %7710 to i64
  %7712 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7711
  %7713 = load i8, ptr %7712, align 1, !tbaa !17
  %7714 = icmp eq i8 %7713, 9
  br i1 %7714, label %7751, label %7715

7715:                                             ; preds = %7708
  %7716 = and i64 %7709, 65535
  %7717 = icmp eq i64 %7716, 14
  br i1 %7717, label %7718, label %7721

7718:                                             ; preds = %7715
  %7719 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7720 = load i64, ptr %7678, align 8
  br label %7726

7721:                                             ; preds = %7715
  %7722 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7723 = load i32, ptr %7722, align 4
  %7724 = lshr i32 %7723, 16
  %7725 = and i32 %7724, 255
  br label %7726

7726:                                             ; preds = %7721, %7718
  %7727 = phi i64 [ %7720, %7718 ], [ %7709, %7721 ]
  %7728 = phi i32 [ %7719, %7718 ], [ %7725, %7721 ]
  %7729 = zext i32 %7728 to i64
  %7730 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7729
  %7731 = load i8, ptr %7730, align 1, !tbaa !17
  %7732 = icmp eq i8 %7731, 11
  br i1 %7732, label %7751, label %7733

7733:                                             ; preds = %7726
  %7734 = and i64 %7727, 65535
  %7735 = icmp eq i64 %7734, 14
  br i1 %7735, label %7736, label %7739

7736:                                             ; preds = %7733
  %7737 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7738 = load i64, ptr %7678, align 8
  br label %7744

7739:                                             ; preds = %7733
  %7740 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7741 = load i32, ptr %7740, align 4
  %7742 = lshr i32 %7741, 16
  %7743 = and i32 %7742, 255
  br label %7744

7744:                                             ; preds = %7739, %7736
  %7745 = phi i64 [ %7738, %7736 ], [ %7727, %7739 ]
  %7746 = phi i32 [ %7737, %7736 ], [ %7743, %7739 ]
  %7747 = zext i32 %7746 to i64
  %7748 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7747
  %7749 = load i8, ptr %7748, align 1, !tbaa !17
  %7750 = icmp eq i8 %7749, 17
  br i1 %7750, label %7751, label %7960

7751:                                             ; preds = %7744, %7726, %7708, %7690
  %7752 = phi i64 [ %7727, %7726 ], [ %7709, %7708 ], [ %7691, %7690 ], [ %7745, %7744 ]
  %7753 = and i64 %7752, 65535
  %7754 = icmp eq i64 %7753, 14
  br i1 %7754, label %7755, label %7758

7755:                                             ; preds = %7751
  %7756 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7757 = load i64, ptr %7678, align 8
  br label %7763

7758:                                             ; preds = %7751
  %7759 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7760 = load i32, ptr %7759, align 4
  %7761 = lshr i32 %7760, 16
  %7762 = and i32 %7761, 255
  br label %7763

7763:                                             ; preds = %7758, %7755
  %7764 = phi i64 [ %7757, %7755 ], [ %7752, %7758 ]
  %7765 = phi i32 [ %7756, %7755 ], [ %7762, %7758 ]
  %7766 = zext i32 %7765 to i64
  %7767 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7766
  %7768 = load i8, ptr %7767, align 1, !tbaa !17
  %7769 = icmp eq i8 %7768, 8
  br i1 %7769, label %7788, label %7770

7770:                                             ; preds = %7763
  %7771 = and i64 %7764, 65535
  %7772 = icmp eq i64 %7771, 14
  br i1 %7772, label %7773, label %7776

7773:                                             ; preds = %7770
  %7774 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7775 = load i64, ptr %7678, align 8
  br label %7781

7776:                                             ; preds = %7770
  %7777 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7778 = load i32, ptr %7777, align 4
  %7779 = lshr i32 %7778, 16
  %7780 = and i32 %7779, 255
  br label %7781

7781:                                             ; preds = %7776, %7773
  %7782 = phi i64 [ %7775, %7773 ], [ %7764, %7776 ]
  %7783 = phi i32 [ %7774, %7773 ], [ %7780, %7776 ]
  %7784 = zext i32 %7783 to i64
  %7785 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7784
  %7786 = load i8, ptr %7785, align 1, !tbaa !17
  %7787 = icmp eq i8 %7786, 9
  br i1 %7787, label %7788, label %7799

7788:                                             ; preds = %7781, %7763
  %7789 = phi i64 [ %7782, %7781 ], [ %7764, %7763 ]
  %7790 = and i64 %7789, 65535
  %7791 = icmp eq i64 %7790, 14
  br i1 %7791, label %7792, label %7794

7792:                                             ; preds = %7788
  %7793 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7815

7794:                                             ; preds = %7788
  %7795 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7796 = load i32, ptr %7795, align 4
  %7797 = lshr i32 %7796, 16
  %7798 = and i32 %7797, 255
  br label %7815

7799:                                             ; preds = %7781
  %7800 = and i64 %7782, 65535
  %7801 = icmp eq i64 %7800, 14
  br i1 %7801, label %7802, label %7804

7802:                                             ; preds = %7799
  %7803 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7809

7804:                                             ; preds = %7799
  %7805 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7806 = load i32, ptr %7805, align 4
  %7807 = lshr i32 %7806, 16
  %7808 = and i32 %7807, 255
  br label %7809

7809:                                             ; preds = %7804, %7802
  %7810 = phi i32 [ %7803, %7802 ], [ %7808, %7804 ]
  %7811 = zext i32 %7810 to i64
  %7812 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7811
  %7813 = load i8, ptr %7812, align 1, !tbaa !17
  %7814 = zext i8 %7813 to i32
  br label %7815

7815:                                             ; preds = %7792, %7794, %7809
  %7816 = phi i32 [ %7814, %7809 ], [ %7793, %7792 ], [ %7798, %7794 ]
  %7817 = zext i32 %7816 to i64
  %7818 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7817
  %7819 = load i8, ptr %7818, align 1, !tbaa !17
  %7820 = icmp eq i8 %7819, 9
  %7821 = load i64, ptr %7678, align 8
  %7822 = and i64 %7821, 65535
  %7823 = icmp eq i64 %7822, 14
  br i1 %7820, label %7824, label %7885

7824:                                             ; preds = %7815
  br i1 %7823, label %7825, label %7828

7825:                                             ; preds = %7824
  %7826 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7827 = load i64, ptr %7678, align 8
  br label %7833

7828:                                             ; preds = %7824
  %7829 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7830 = load i32, ptr %7829, align 4
  %7831 = lshr i32 %7830, 16
  %7832 = and i32 %7831, 255
  br label %7833

7833:                                             ; preds = %7828, %7825
  %7834 = phi i64 [ %7827, %7825 ], [ %7821, %7828 ]
  %7835 = phi i32 [ %7826, %7825 ], [ %7832, %7828 ]
  %7836 = zext i32 %7835 to i64
  %7837 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7836
  %7838 = load i8, ptr %7837, align 1, !tbaa !17
  %7839 = icmp eq i8 %7838, 8
  br i1 %7839, label %7858, label %7840

7840:                                             ; preds = %7833
  %7841 = and i64 %7834, 65535
  %7842 = icmp eq i64 %7841, 14
  br i1 %7842, label %7843, label %7846

7843:                                             ; preds = %7840
  %7844 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7845 = load i64, ptr %7678, align 8
  br label %7851

7846:                                             ; preds = %7840
  %7847 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7848 = load i32, ptr %7847, align 4
  %7849 = lshr i32 %7848, 16
  %7850 = and i32 %7849, 255
  br label %7851

7851:                                             ; preds = %7846, %7843
  %7852 = phi i64 [ %7845, %7843 ], [ %7834, %7846 ]
  %7853 = phi i32 [ %7844, %7843 ], [ %7850, %7846 ]
  %7854 = zext i32 %7853 to i64
  %7855 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7854
  %7856 = load i8, ptr %7855, align 1, !tbaa !17
  %7857 = icmp eq i8 %7856, 9
  br i1 %7857, label %7858, label %7869

7858:                                             ; preds = %7851, %7833
  %7859 = phi i64 [ %7852, %7851 ], [ %7834, %7833 ]
  %7860 = and i64 %7859, 65535
  %7861 = icmp eq i64 %7860, 14
  br i1 %7861, label %7862, label %7864

7862:                                             ; preds = %7858
  %7863 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7946

7864:                                             ; preds = %7858
  %7865 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7866 = load i32, ptr %7865, align 4
  %7867 = lshr i32 %7866, 16
  %7868 = and i32 %7867, 255
  br label %7946

7869:                                             ; preds = %7851
  %7870 = and i64 %7852, 65535
  %7871 = icmp eq i64 %7870, 14
  br i1 %7871, label %7872, label %7874

7872:                                             ; preds = %7869
  %7873 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7879

7874:                                             ; preds = %7869
  %7875 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7876 = load i32, ptr %7875, align 4
  %7877 = lshr i32 %7876, 16
  %7878 = and i32 %7877, 255
  br label %7879

7879:                                             ; preds = %7874, %7872
  %7880 = phi i32 [ %7873, %7872 ], [ %7878, %7874 ]
  %7881 = zext i32 %7880 to i64
  %7882 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7881
  %7883 = load i8, ptr %7882, align 1, !tbaa !17
  %7884 = zext i8 %7883 to i32
  br label %7946

7885:                                             ; preds = %7815
  br i1 %7823, label %7886, label %7889

7886:                                             ; preds = %7885
  %7887 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7888 = load i64, ptr %7678, align 8
  br label %7894

7889:                                             ; preds = %7885
  %7890 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7891 = load i32, ptr %7890, align 4
  %7892 = lshr i32 %7891, 16
  %7893 = and i32 %7892, 255
  br label %7894

7894:                                             ; preds = %7889, %7886
  %7895 = phi i64 [ %7888, %7886 ], [ %7821, %7889 ]
  %7896 = phi i32 [ %7887, %7886 ], [ %7893, %7889 ]
  %7897 = zext i32 %7896 to i64
  %7898 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7897
  %7899 = load i8, ptr %7898, align 1, !tbaa !17
  %7900 = icmp eq i8 %7899, 8
  br i1 %7900, label %7919, label %7901

7901:                                             ; preds = %7894
  %7902 = and i64 %7895, 65535
  %7903 = icmp eq i64 %7902, 14
  br i1 %7903, label %7904, label %7907

7904:                                             ; preds = %7901
  %7905 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7906 = load i64, ptr %7678, align 8
  br label %7912

7907:                                             ; preds = %7901
  %7908 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7909 = load i32, ptr %7908, align 4
  %7910 = lshr i32 %7909, 16
  %7911 = and i32 %7910, 255
  br label %7912

7912:                                             ; preds = %7907, %7904
  %7913 = phi i64 [ %7906, %7904 ], [ %7895, %7907 ]
  %7914 = phi i32 [ %7905, %7904 ], [ %7911, %7907 ]
  %7915 = zext i32 %7914 to i64
  %7916 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7915
  %7917 = load i8, ptr %7916, align 1, !tbaa !17
  %7918 = icmp eq i8 %7917, 9
  br i1 %7918, label %7919, label %7930

7919:                                             ; preds = %7912, %7894
  %7920 = phi i64 [ %7913, %7912 ], [ %7895, %7894 ]
  %7921 = and i64 %7920, 65535
  %7922 = icmp eq i64 %7921, 14
  br i1 %7922, label %7923, label %7925

7923:                                             ; preds = %7919
  %7924 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7946

7925:                                             ; preds = %7919
  %7926 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7927 = load i32, ptr %7926, align 4
  %7928 = lshr i32 %7927, 16
  %7929 = and i32 %7928, 255
  br label %7946

7930:                                             ; preds = %7912
  %7931 = and i64 %7913, 65535
  %7932 = icmp eq i64 %7931, 14
  br i1 %7932, label %7933, label %7935

7933:                                             ; preds = %7930
  %7934 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %7940

7935:                                             ; preds = %7930
  %7936 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7937 = load i32, ptr %7936, align 4
  %7938 = lshr i32 %7937, 16
  %7939 = and i32 %7938, 255
  br label %7940

7940:                                             ; preds = %7935, %7933
  %7941 = phi i32 [ %7934, %7933 ], [ %7939, %7935 ]
  %7942 = zext i32 %7941 to i64
  %7943 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %7942
  %7944 = load i8, ptr %7943, align 1, !tbaa !17
  %7945 = zext i8 %7944 to i32
  br label %7946

7946:                                             ; preds = %7940, %7925, %7923, %7879, %7864, %7862
  %7947 = phi i32 [ %7884, %7879 ], [ %7863, %7862 ], [ %7868, %7864 ], [ %7945, %7940 ], [ %7924, %7923 ], [ %7929, %7925 ]
  %7948 = add i32 %7947, -38
  %7949 = zext i32 %7948 to i64
  %7950 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %7949
  %7951 = load ptr, ptr %7950, align 8, !tbaa !6
  %7952 = getelementptr inbounds %struct.real_format, ptr %7951, i64 0, i32 11
  %7953 = load i8, ptr %7952, align 2, !tbaa !36
  %7954 = icmp eq i8 %7953, 0
  %7955 = load i32, ptr @flag_finite_math_only, align 4
  %7956 = icmp ne i32 %7955, 0
  %7957 = select i1 %7954, i1 true, i1 %7956
  br i1 %7957, label %7958, label %8243

7958:                                             ; preds = %7946
  %7959 = load i64, ptr %7678, align 8
  br label %7960

7960:                                             ; preds = %7958, %7744
  %7961 = phi i64 [ %7959, %7958 ], [ %7745, %7744 ]
  %7962 = and i64 %7961, 65535
  %7963 = icmp eq i64 %7962, 14
  br i1 %7963, label %7964, label %7967

7964:                                             ; preds = %7960
  %7965 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7966 = load i64, ptr %7678, align 8
  br label %7972

7967:                                             ; preds = %7960
  %7968 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7969 = load i32, ptr %7968, align 4
  %7970 = lshr i32 %7969, 16
  %7971 = and i32 %7970, 255
  br label %7972

7972:                                             ; preds = %7967, %7964
  %7973 = phi i64 [ %7966, %7964 ], [ %7961, %7967 ]
  %7974 = phi i32 [ %7965, %7964 ], [ %7971, %7967 ]
  %7975 = zext i32 %7974 to i64
  %7976 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7975
  %7977 = load i8, ptr %7976, align 1, !tbaa !17
  %7978 = icmp eq i8 %7977, 8
  br i1 %7978, label %8033, label %7979

7979:                                             ; preds = %7972
  %7980 = and i64 %7973, 65535
  %7981 = icmp eq i64 %7980, 14
  br i1 %7981, label %7982, label %7985

7982:                                             ; preds = %7979
  %7983 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %7984 = load i64, ptr %7678, align 8
  br label %7990

7985:                                             ; preds = %7979
  %7986 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %7987 = load i32, ptr %7986, align 4
  %7988 = lshr i32 %7987, 16
  %7989 = and i32 %7988, 255
  br label %7990

7990:                                             ; preds = %7985, %7982
  %7991 = phi i64 [ %7984, %7982 ], [ %7973, %7985 ]
  %7992 = phi i32 [ %7983, %7982 ], [ %7989, %7985 ]
  %7993 = zext i32 %7992 to i64
  %7994 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %7993
  %7995 = load i8, ptr %7994, align 1, !tbaa !17
  %7996 = icmp eq i8 %7995, 9
  br i1 %7996, label %8033, label %7997

7997:                                             ; preds = %7990
  %7998 = and i64 %7991, 65535
  %7999 = icmp eq i64 %7998, 14
  br i1 %7999, label %8000, label %8003

8000:                                             ; preds = %7997
  %8001 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8002 = load i64, ptr %7678, align 8
  br label %8008

8003:                                             ; preds = %7997
  %8004 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8005 = load i32, ptr %8004, align 4
  %8006 = lshr i32 %8005, 16
  %8007 = and i32 %8006, 255
  br label %8008

8008:                                             ; preds = %8003, %8000
  %8009 = phi i64 [ %8002, %8000 ], [ %7991, %8003 ]
  %8010 = phi i32 [ %8001, %8000 ], [ %8007, %8003 ]
  %8011 = zext i32 %8010 to i64
  %8012 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8011
  %8013 = load i8, ptr %8012, align 1, !tbaa !17
  %8014 = icmp eq i8 %8013, 11
  br i1 %8014, label %8033, label %8015

8015:                                             ; preds = %8008
  %8016 = and i64 %8009, 65535
  %8017 = icmp eq i64 %8016, 14
  br i1 %8017, label %8018, label %8020

8018:                                             ; preds = %8015
  %8019 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8025

8020:                                             ; preds = %8015
  %8021 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8022 = load i32, ptr %8021, align 4
  %8023 = lshr i32 %8022, 16
  %8024 = and i32 %8023, 255
  br label %8025

8025:                                             ; preds = %8020, %8018
  %8026 = phi i32 [ %8019, %8018 ], [ %8024, %8020 ]
  %8027 = zext i32 %8026 to i64
  %8028 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8027
  %8029 = load i8, ptr %8028, align 1, !tbaa !17
  %8030 = icmp eq i8 %8029, 17
  br i1 %8030, label %8031, label %8240

8031:                                             ; preds = %8025
  %8032 = load i64, ptr %7678, align 8
  br label %8033

8033:                                             ; preds = %8031, %8008, %7990, %7972
  %8034 = phi i64 [ %8032, %8031 ], [ %8009, %8008 ], [ %7991, %7990 ], [ %7973, %7972 ]
  %8035 = and i64 %8034, 65535
  %8036 = icmp eq i64 %8035, 14
  br i1 %8036, label %8037, label %8040

8037:                                             ; preds = %8033
  %8038 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8039 = load i64, ptr %7678, align 8
  br label %8045

8040:                                             ; preds = %8033
  %8041 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8042 = load i32, ptr %8041, align 4
  %8043 = lshr i32 %8042, 16
  %8044 = and i32 %8043, 255
  br label %8045

8045:                                             ; preds = %8040, %8037
  %8046 = phi i64 [ %8039, %8037 ], [ %8034, %8040 ]
  %8047 = phi i32 [ %8038, %8037 ], [ %8044, %8040 ]
  %8048 = zext i32 %8047 to i64
  %8049 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8048
  %8050 = load i8, ptr %8049, align 1, !tbaa !17
  %8051 = icmp eq i8 %8050, 8
  br i1 %8051, label %8070, label %8052

8052:                                             ; preds = %8045
  %8053 = and i64 %8046, 65535
  %8054 = icmp eq i64 %8053, 14
  br i1 %8054, label %8055, label %8058

8055:                                             ; preds = %8052
  %8056 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8057 = load i64, ptr %7678, align 8
  br label %8063

8058:                                             ; preds = %8052
  %8059 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8060 = load i32, ptr %8059, align 4
  %8061 = lshr i32 %8060, 16
  %8062 = and i32 %8061, 255
  br label %8063

8063:                                             ; preds = %8058, %8055
  %8064 = phi i64 [ %8057, %8055 ], [ %8046, %8058 ]
  %8065 = phi i32 [ %8056, %8055 ], [ %8062, %8058 ]
  %8066 = zext i32 %8065 to i64
  %8067 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8066
  %8068 = load i8, ptr %8067, align 1, !tbaa !17
  %8069 = icmp eq i8 %8068, 9
  br i1 %8069, label %8070, label %8081

8070:                                             ; preds = %8063, %8045
  %8071 = phi i64 [ %8064, %8063 ], [ %8046, %8045 ]
  %8072 = and i64 %8071, 65535
  %8073 = icmp eq i64 %8072, 14
  br i1 %8073, label %8074, label %8076

8074:                                             ; preds = %8070
  %8075 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8097

8076:                                             ; preds = %8070
  %8077 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8078 = load i32, ptr %8077, align 4
  %8079 = lshr i32 %8078, 16
  %8080 = and i32 %8079, 255
  br label %8097

8081:                                             ; preds = %8063
  %8082 = and i64 %8064, 65535
  %8083 = icmp eq i64 %8082, 14
  br i1 %8083, label %8084, label %8086

8084:                                             ; preds = %8081
  %8085 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8091

8086:                                             ; preds = %8081
  %8087 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8088 = load i32, ptr %8087, align 4
  %8089 = lshr i32 %8088, 16
  %8090 = and i32 %8089, 255
  br label %8091

8091:                                             ; preds = %8086, %8084
  %8092 = phi i32 [ %8085, %8084 ], [ %8090, %8086 ]
  %8093 = zext i32 %8092 to i64
  %8094 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8093
  %8095 = load i8, ptr %8094, align 1, !tbaa !17
  %8096 = zext i8 %8095 to i32
  br label %8097

8097:                                             ; preds = %8074, %8076, %8091
  %8098 = phi i32 [ %8096, %8091 ], [ %8075, %8074 ], [ %8080, %8076 ]
  %8099 = zext i32 %8098 to i64
  %8100 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8099
  %8101 = load i8, ptr %8100, align 1, !tbaa !17
  %8102 = icmp eq i8 %8101, 9
  %8103 = load i64, ptr %7678, align 8
  %8104 = and i64 %8103, 65535
  %8105 = icmp eq i64 %8104, 14
  br i1 %8102, label %8106, label %8167

8106:                                             ; preds = %8097
  br i1 %8105, label %8107, label %8110

8107:                                             ; preds = %8106
  %8108 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8109 = load i64, ptr %7678, align 8
  br label %8115

8110:                                             ; preds = %8106
  %8111 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8112 = load i32, ptr %8111, align 4
  %8113 = lshr i32 %8112, 16
  %8114 = and i32 %8113, 255
  br label %8115

8115:                                             ; preds = %8110, %8107
  %8116 = phi i64 [ %8109, %8107 ], [ %8103, %8110 ]
  %8117 = phi i32 [ %8108, %8107 ], [ %8114, %8110 ]
  %8118 = zext i32 %8117 to i64
  %8119 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8118
  %8120 = load i8, ptr %8119, align 1, !tbaa !17
  %8121 = icmp eq i8 %8120, 8
  br i1 %8121, label %8140, label %8122

8122:                                             ; preds = %8115
  %8123 = and i64 %8116, 65535
  %8124 = icmp eq i64 %8123, 14
  br i1 %8124, label %8125, label %8128

8125:                                             ; preds = %8122
  %8126 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8127 = load i64, ptr %7678, align 8
  br label %8133

8128:                                             ; preds = %8122
  %8129 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8130 = load i32, ptr %8129, align 4
  %8131 = lshr i32 %8130, 16
  %8132 = and i32 %8131, 255
  br label %8133

8133:                                             ; preds = %8128, %8125
  %8134 = phi i64 [ %8127, %8125 ], [ %8116, %8128 ]
  %8135 = phi i32 [ %8126, %8125 ], [ %8132, %8128 ]
  %8136 = zext i32 %8135 to i64
  %8137 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8136
  %8138 = load i8, ptr %8137, align 1, !tbaa !17
  %8139 = icmp eq i8 %8138, 9
  br i1 %8139, label %8140, label %8151

8140:                                             ; preds = %8133, %8115
  %8141 = phi i64 [ %8134, %8133 ], [ %8116, %8115 ]
  %8142 = and i64 %8141, 65535
  %8143 = icmp eq i64 %8142, 14
  br i1 %8143, label %8144, label %8146

8144:                                             ; preds = %8140
  %8145 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8228

8146:                                             ; preds = %8140
  %8147 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8148 = load i32, ptr %8147, align 4
  %8149 = lshr i32 %8148, 16
  %8150 = and i32 %8149, 255
  br label %8228

8151:                                             ; preds = %8133
  %8152 = and i64 %8134, 65535
  %8153 = icmp eq i64 %8152, 14
  br i1 %8153, label %8154, label %8156

8154:                                             ; preds = %8151
  %8155 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8161

8156:                                             ; preds = %8151
  %8157 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8158 = load i32, ptr %8157, align 4
  %8159 = lshr i32 %8158, 16
  %8160 = and i32 %8159, 255
  br label %8161

8161:                                             ; preds = %8156, %8154
  %8162 = phi i32 [ %8155, %8154 ], [ %8160, %8156 ]
  %8163 = zext i32 %8162 to i64
  %8164 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8163
  %8165 = load i8, ptr %8164, align 1, !tbaa !17
  %8166 = zext i8 %8165 to i32
  br label %8228

8167:                                             ; preds = %8097
  br i1 %8105, label %8168, label %8171

8168:                                             ; preds = %8167
  %8169 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8170 = load i64, ptr %7678, align 8
  br label %8176

8171:                                             ; preds = %8167
  %8172 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8173 = load i32, ptr %8172, align 4
  %8174 = lshr i32 %8173, 16
  %8175 = and i32 %8174, 255
  br label %8176

8176:                                             ; preds = %8171, %8168
  %8177 = phi i64 [ %8170, %8168 ], [ %8103, %8171 ]
  %8178 = phi i32 [ %8169, %8168 ], [ %8175, %8171 ]
  %8179 = zext i32 %8178 to i64
  %8180 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8179
  %8181 = load i8, ptr %8180, align 1, !tbaa !17
  %8182 = icmp eq i8 %8181, 8
  br i1 %8182, label %8201, label %8183

8183:                                             ; preds = %8176
  %8184 = and i64 %8177, 65535
  %8185 = icmp eq i64 %8184, 14
  br i1 %8185, label %8186, label %8189

8186:                                             ; preds = %8183
  %8187 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  %8188 = load i64, ptr %7678, align 8
  br label %8194

8189:                                             ; preds = %8183
  %8190 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8191 = load i32, ptr %8190, align 4
  %8192 = lshr i32 %8191, 16
  %8193 = and i32 %8192, 255
  br label %8194

8194:                                             ; preds = %8189, %8186
  %8195 = phi i64 [ %8188, %8186 ], [ %8177, %8189 ]
  %8196 = phi i32 [ %8187, %8186 ], [ %8193, %8189 ]
  %8197 = zext i32 %8196 to i64
  %8198 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8197
  %8199 = load i8, ptr %8198, align 1, !tbaa !17
  %8200 = icmp eq i8 %8199, 9
  br i1 %8200, label %8201, label %8212

8201:                                             ; preds = %8194, %8176
  %8202 = phi i64 [ %8195, %8194 ], [ %8177, %8176 ]
  %8203 = and i64 %8202, 65535
  %8204 = icmp eq i64 %8203, 14
  br i1 %8204, label %8205, label %8207

8205:                                             ; preds = %8201
  %8206 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8228

8207:                                             ; preds = %8201
  %8208 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8209 = load i32, ptr %8208, align 4
  %8210 = lshr i32 %8209, 16
  %8211 = and i32 %8210, 255
  br label %8228

8212:                                             ; preds = %8194
  %8213 = and i64 %8195, 65535
  %8214 = icmp eq i64 %8213, 14
  br i1 %8214, label %8215, label %8217

8215:                                             ; preds = %8212
  %8216 = tail call i32 @vector_type_mode(ptr noundef nonnull %7678) #24
  br label %8222

8217:                                             ; preds = %8212
  %8218 = getelementptr inbounds %struct.tree_type, ptr %7678, i64 0, i32 6
  %8219 = load i32, ptr %8218, align 4
  %8220 = lshr i32 %8219, 16
  %8221 = and i32 %8220, 255
  br label %8222

8222:                                             ; preds = %8217, %8215
  %8223 = phi i32 [ %8216, %8215 ], [ %8221, %8217 ]
  %8224 = zext i32 %8223 to i64
  %8225 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8224
  %8226 = load i8, ptr %8225, align 1, !tbaa !17
  %8227 = zext i8 %8226 to i32
  br label %8228

8228:                                             ; preds = %8222, %8207, %8205, %8161, %8146, %8144
  %8229 = phi i32 [ %8166, %8161 ], [ %8145, %8144 ], [ %8150, %8146 ], [ %8227, %8222 ], [ %8206, %8205 ], [ %8211, %8207 ]
  %8230 = add i32 %8229, -38
  %8231 = zext i32 %8230 to i64
  %8232 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %8231
  %8233 = load ptr, ptr %8232, align 8, !tbaa !6
  %8234 = getelementptr inbounds %struct.real_format, ptr %8233, i64 0, i32 12
  %8235 = load i8, ptr %8234, align 1, !tbaa !34
  %8236 = icmp eq i8 %8235, 0
  %8237 = load i32, ptr @flag_finite_math_only, align 4
  %8238 = icmp ne i32 %8237, 0
  %8239 = select i1 %8236, i1 true, i1 %8238
  br i1 %8239, label %8240, label %8243

8240:                                             ; preds = %8025, %8228
  %8241 = tail call ptr @build_real(ptr noundef nonnull %7678, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1) #24
  %8242 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %8241, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %14075

8243:                                             ; preds = %7946, %8228, %7672, %7666, %7661
  %8244 = load i64, ptr %46, align 8
  %8245 = and i64 %8244, 65535
  %8246 = icmp eq i64 %8245, 79
  br i1 %8246, label %8247, label %8255

8247:                                             ; preds = %8243
  %8248 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %45)
  %8249 = icmp eq i8 %8248, 0
  br i1 %8249, label %8255, label %8250

8250:                                             ; preds = %8247
  %8251 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %8252 = load ptr, ptr %8251, align 8, !tbaa !17
  %8253 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %8254 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %8252, ptr noundef %8253)
  br label %14075

8255:                                             ; preds = %8247, %8243
  %8256 = load i64, ptr %45, align 8
  %8257 = and i64 %8256, 65535
  %8258 = icmp eq i64 %8257, 79
  br i1 %8258, label %8259, label %8267

8259:                                             ; preds = %8255
  %8260 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %46)
  %8261 = icmp eq i8 %8260, 0
  br i1 %8261, label %8267, label %8262

8262:                                             ; preds = %8259
  %8263 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %8264 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %8265 = load ptr, ptr %8264, align 8, !tbaa !17
  %8266 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %8263, ptr noundef %8265)
  br label %14075

8267:                                             ; preds = %8259, %8255
  %8268 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %8269 = icmp eq i32 %8268, 0
  br i1 %8269, label %8565, label %8270

8270:                                             ; preds = %8267
  %8271 = load ptr, ptr %7608, align 8, !tbaa !17
  %8272 = load i64, ptr %8271, align 8
  %8273 = and i64 %8272, 65535
  %8274 = icmp eq i64 %8273, 14
  br i1 %8274, label %8275, label %8278

8275:                                             ; preds = %8270
  %8276 = tail call i32 @vector_type_mode(ptr noundef nonnull %8271) #24
  %8277 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8283

8278:                                             ; preds = %8270
  %8279 = getelementptr inbounds %struct.tree_type, ptr %8271, i64 0, i32 6
  %8280 = load i32, ptr %8279, align 4
  %8281 = lshr i32 %8280, 16
  %8282 = and i32 %8281, 255
  br label %8283

8283:                                             ; preds = %8278, %8275
  %8284 = phi ptr [ %8277, %8275 ], [ %8271, %8278 ]
  %8285 = phi i32 [ %8276, %8275 ], [ %8282, %8278 ]
  %8286 = zext i32 %8285 to i64
  %8287 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8286
  %8288 = load i8, ptr %8287, align 1, !tbaa !17
  %8289 = icmp eq i8 %8288, 8
  br i1 %8289, label %8347, label %8290

8290:                                             ; preds = %8283
  %8291 = load i64, ptr %8284, align 8
  %8292 = and i64 %8291, 65535
  %8293 = icmp eq i64 %8292, 14
  br i1 %8293, label %8294, label %8297

8294:                                             ; preds = %8290
  %8295 = tail call i32 @vector_type_mode(ptr noundef nonnull %8284) #24
  %8296 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8302

8297:                                             ; preds = %8290
  %8298 = getelementptr inbounds %struct.tree_type, ptr %8284, i64 0, i32 6
  %8299 = load i32, ptr %8298, align 4
  %8300 = lshr i32 %8299, 16
  %8301 = and i32 %8300, 255
  br label %8302

8302:                                             ; preds = %8297, %8294
  %8303 = phi ptr [ %8296, %8294 ], [ %8284, %8297 ]
  %8304 = phi i32 [ %8295, %8294 ], [ %8301, %8297 ]
  %8305 = zext i32 %8304 to i64
  %8306 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8305
  %8307 = load i8, ptr %8306, align 1, !tbaa !17
  %8308 = icmp eq i8 %8307, 9
  br i1 %8308, label %8347, label %8309

8309:                                             ; preds = %8302
  %8310 = load i64, ptr %8303, align 8
  %8311 = and i64 %8310, 65535
  %8312 = icmp eq i64 %8311, 14
  br i1 %8312, label %8313, label %8316

8313:                                             ; preds = %8309
  %8314 = tail call i32 @vector_type_mode(ptr noundef nonnull %8303) #24
  %8315 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8321

8316:                                             ; preds = %8309
  %8317 = getelementptr inbounds %struct.tree_type, ptr %8303, i64 0, i32 6
  %8318 = load i32, ptr %8317, align 4
  %8319 = lshr i32 %8318, 16
  %8320 = and i32 %8319, 255
  br label %8321

8321:                                             ; preds = %8316, %8313
  %8322 = phi ptr [ %8315, %8313 ], [ %8303, %8316 ]
  %8323 = phi i32 [ %8314, %8313 ], [ %8320, %8316 ]
  %8324 = zext i32 %8323 to i64
  %8325 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8324
  %8326 = load i8, ptr %8325, align 1, !tbaa !17
  %8327 = icmp eq i8 %8326, 11
  br i1 %8327, label %8347, label %8328

8328:                                             ; preds = %8321
  %8329 = load i64, ptr %8322, align 8
  %8330 = and i64 %8329, 65535
  %8331 = icmp eq i64 %8330, 14
  br i1 %8331, label %8332, label %8334

8332:                                             ; preds = %8328
  %8333 = tail call i32 @vector_type_mode(ptr noundef nonnull %8322) #24
  br label %8339

8334:                                             ; preds = %8328
  %8335 = getelementptr inbounds %struct.tree_type, ptr %8322, i64 0, i32 6
  %8336 = load i32, ptr %8335, align 4
  %8337 = lshr i32 %8336, 16
  %8338 = and i32 %8337, 255
  br label %8339

8339:                                             ; preds = %8334, %8332
  %8340 = phi i32 [ %8333, %8332 ], [ %8338, %8334 ]
  %8341 = zext i32 %8340 to i64
  %8342 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8341
  %8343 = load i8, ptr %8342, align 1, !tbaa !17
  %8344 = icmp eq i8 %8343, 17
  br i1 %8344, label %8345, label %8565

8345:                                             ; preds = %8339
  %8346 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8347

8347:                                             ; preds = %8345, %8321, %8302, %8283
  %8348 = phi ptr [ %8346, %8345 ], [ %8322, %8321 ], [ %8303, %8302 ], [ %8284, %8283 ]
  %8349 = load i64, ptr %8348, align 8
  %8350 = and i64 %8349, 65535
  %8351 = icmp eq i64 %8350, 14
  br i1 %8351, label %8352, label %8355

8352:                                             ; preds = %8347
  %8353 = tail call i32 @vector_type_mode(ptr noundef nonnull %8348) #24
  %8354 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8360

8355:                                             ; preds = %8347
  %8356 = getelementptr inbounds %struct.tree_type, ptr %8348, i64 0, i32 6
  %8357 = load i32, ptr %8356, align 4
  %8358 = lshr i32 %8357, 16
  %8359 = and i32 %8358, 255
  br label %8360

8360:                                             ; preds = %8355, %8352
  %8361 = phi ptr [ %8354, %8352 ], [ %8348, %8355 ]
  %8362 = phi i32 [ %8353, %8352 ], [ %8359, %8355 ]
  %8363 = zext i32 %8362 to i64
  %8364 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8363
  %8365 = load i8, ptr %8364, align 1, !tbaa !17
  %8366 = icmp eq i8 %8365, 8
  br i1 %8366, label %8386, label %8367

8367:                                             ; preds = %8360
  %8368 = load i64, ptr %8361, align 8
  %8369 = and i64 %8368, 65535
  %8370 = icmp eq i64 %8369, 14
  br i1 %8370, label %8371, label %8374

8371:                                             ; preds = %8367
  %8372 = tail call i32 @vector_type_mode(ptr noundef nonnull %8361) #24
  %8373 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8379

8374:                                             ; preds = %8367
  %8375 = getelementptr inbounds %struct.tree_type, ptr %8361, i64 0, i32 6
  %8376 = load i32, ptr %8375, align 4
  %8377 = lshr i32 %8376, 16
  %8378 = and i32 %8377, 255
  br label %8379

8379:                                             ; preds = %8374, %8371
  %8380 = phi ptr [ %8373, %8371 ], [ %8361, %8374 ]
  %8381 = phi i32 [ %8372, %8371 ], [ %8378, %8374 ]
  %8382 = zext i32 %8381 to i64
  %8383 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8382
  %8384 = load i8, ptr %8383, align 1, !tbaa !17
  %8385 = icmp eq i8 %8384, 9
  br i1 %8385, label %8386, label %8398

8386:                                             ; preds = %8379, %8360
  %8387 = phi ptr [ %8380, %8379 ], [ %8361, %8360 ]
  %8388 = load i64, ptr %8387, align 8
  %8389 = and i64 %8388, 65535
  %8390 = icmp eq i64 %8389, 14
  br i1 %8390, label %8391, label %8393

8391:                                             ; preds = %8386
  %8392 = tail call i32 @vector_type_mode(ptr noundef nonnull %8387) #24
  br label %8415

8393:                                             ; preds = %8386
  %8394 = getelementptr inbounds %struct.tree_type, ptr %8387, i64 0, i32 6
  %8395 = load i32, ptr %8394, align 4
  %8396 = lshr i32 %8395, 16
  %8397 = and i32 %8396, 255
  br label %8415

8398:                                             ; preds = %8379
  %8399 = load i64, ptr %8380, align 8
  %8400 = and i64 %8399, 65535
  %8401 = icmp eq i64 %8400, 14
  br i1 %8401, label %8402, label %8404

8402:                                             ; preds = %8398
  %8403 = tail call i32 @vector_type_mode(ptr noundef nonnull %8380) #24
  br label %8409

8404:                                             ; preds = %8398
  %8405 = getelementptr inbounds %struct.tree_type, ptr %8380, i64 0, i32 6
  %8406 = load i32, ptr %8405, align 4
  %8407 = lshr i32 %8406, 16
  %8408 = and i32 %8407, 255
  br label %8409

8409:                                             ; preds = %8404, %8402
  %8410 = phi i32 [ %8403, %8402 ], [ %8408, %8404 ]
  %8411 = zext i32 %8410 to i64
  %8412 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8411
  %8413 = load i8, ptr %8412, align 1, !tbaa !17
  %8414 = zext i8 %8413 to i32
  br label %8415

8415:                                             ; preds = %8391, %8393, %8409
  %8416 = phi i32 [ %8414, %8409 ], [ %8392, %8391 ], [ %8397, %8393 ]
  %8417 = zext i32 %8416 to i64
  %8418 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8417
  %8419 = load i8, ptr %8418, align 1, !tbaa !17
  %8420 = icmp eq i8 %8419, 9
  %8421 = load ptr, ptr %7608, align 8, !tbaa !17
  %8422 = load i64, ptr %8421, align 8
  %8423 = and i64 %8422, 65535
  %8424 = icmp eq i64 %8423, 14
  br i1 %8420, label %8425, label %8489

8425:                                             ; preds = %8415
  br i1 %8424, label %8426, label %8429

8426:                                             ; preds = %8425
  %8427 = tail call i32 @vector_type_mode(ptr noundef nonnull %8421) #24
  %8428 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8434

8429:                                             ; preds = %8425
  %8430 = getelementptr inbounds %struct.tree_type, ptr %8421, i64 0, i32 6
  %8431 = load i32, ptr %8430, align 4
  %8432 = lshr i32 %8431, 16
  %8433 = and i32 %8432, 255
  br label %8434

8434:                                             ; preds = %8429, %8426
  %8435 = phi ptr [ %8428, %8426 ], [ %8421, %8429 ]
  %8436 = phi i32 [ %8427, %8426 ], [ %8433, %8429 ]
  %8437 = zext i32 %8436 to i64
  %8438 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8437
  %8439 = load i8, ptr %8438, align 1, !tbaa !17
  %8440 = icmp eq i8 %8439, 8
  br i1 %8440, label %8460, label %8441

8441:                                             ; preds = %8434
  %8442 = load i64, ptr %8435, align 8
  %8443 = and i64 %8442, 65535
  %8444 = icmp eq i64 %8443, 14
  br i1 %8444, label %8445, label %8448

8445:                                             ; preds = %8441
  %8446 = tail call i32 @vector_type_mode(ptr noundef nonnull %8435) #24
  %8447 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8453

8448:                                             ; preds = %8441
  %8449 = getelementptr inbounds %struct.tree_type, ptr %8435, i64 0, i32 6
  %8450 = load i32, ptr %8449, align 4
  %8451 = lshr i32 %8450, 16
  %8452 = and i32 %8451, 255
  br label %8453

8453:                                             ; preds = %8448, %8445
  %8454 = phi ptr [ %8447, %8445 ], [ %8435, %8448 ]
  %8455 = phi i32 [ %8446, %8445 ], [ %8452, %8448 ]
  %8456 = zext i32 %8455 to i64
  %8457 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8456
  %8458 = load i8, ptr %8457, align 1, !tbaa !17
  %8459 = icmp eq i8 %8458, 9
  br i1 %8459, label %8460, label %8472

8460:                                             ; preds = %8453, %8434
  %8461 = phi ptr [ %8454, %8453 ], [ %8435, %8434 ]
  %8462 = load i64, ptr %8461, align 8
  %8463 = and i64 %8462, 65535
  %8464 = icmp eq i64 %8463, 14
  br i1 %8464, label %8465, label %8467

8465:                                             ; preds = %8460
  %8466 = tail call i32 @vector_type_mode(ptr noundef nonnull %8461) #24
  br label %8553

8467:                                             ; preds = %8460
  %8468 = getelementptr inbounds %struct.tree_type, ptr %8461, i64 0, i32 6
  %8469 = load i32, ptr %8468, align 4
  %8470 = lshr i32 %8469, 16
  %8471 = and i32 %8470, 255
  br label %8553

8472:                                             ; preds = %8453
  %8473 = load i64, ptr %8454, align 8
  %8474 = and i64 %8473, 65535
  %8475 = icmp eq i64 %8474, 14
  br i1 %8475, label %8476, label %8478

8476:                                             ; preds = %8472
  %8477 = tail call i32 @vector_type_mode(ptr noundef nonnull %8454) #24
  br label %8483

8478:                                             ; preds = %8472
  %8479 = getelementptr inbounds %struct.tree_type, ptr %8454, i64 0, i32 6
  %8480 = load i32, ptr %8479, align 4
  %8481 = lshr i32 %8480, 16
  %8482 = and i32 %8481, 255
  br label %8483

8483:                                             ; preds = %8478, %8476
  %8484 = phi i32 [ %8477, %8476 ], [ %8482, %8478 ]
  %8485 = zext i32 %8484 to i64
  %8486 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8485
  %8487 = load i8, ptr %8486, align 1, !tbaa !17
  %8488 = zext i8 %8487 to i32
  br label %8553

8489:                                             ; preds = %8415
  br i1 %8424, label %8490, label %8493

8490:                                             ; preds = %8489
  %8491 = tail call i32 @vector_type_mode(ptr noundef nonnull %8421) #24
  %8492 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8498

8493:                                             ; preds = %8489
  %8494 = getelementptr inbounds %struct.tree_type, ptr %8421, i64 0, i32 6
  %8495 = load i32, ptr %8494, align 4
  %8496 = lshr i32 %8495, 16
  %8497 = and i32 %8496, 255
  br label %8498

8498:                                             ; preds = %8493, %8490
  %8499 = phi ptr [ %8492, %8490 ], [ %8421, %8493 ]
  %8500 = phi i32 [ %8491, %8490 ], [ %8497, %8493 ]
  %8501 = zext i32 %8500 to i64
  %8502 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8501
  %8503 = load i8, ptr %8502, align 1, !tbaa !17
  %8504 = icmp eq i8 %8503, 8
  br i1 %8504, label %8524, label %8505

8505:                                             ; preds = %8498
  %8506 = load i64, ptr %8499, align 8
  %8507 = and i64 %8506, 65535
  %8508 = icmp eq i64 %8507, 14
  br i1 %8508, label %8509, label %8512

8509:                                             ; preds = %8505
  %8510 = tail call i32 @vector_type_mode(ptr noundef nonnull %8499) #24
  %8511 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8517

8512:                                             ; preds = %8505
  %8513 = getelementptr inbounds %struct.tree_type, ptr %8499, i64 0, i32 6
  %8514 = load i32, ptr %8513, align 4
  %8515 = lshr i32 %8514, 16
  %8516 = and i32 %8515, 255
  br label %8517

8517:                                             ; preds = %8512, %8509
  %8518 = phi ptr [ %8511, %8509 ], [ %8499, %8512 ]
  %8519 = phi i32 [ %8510, %8509 ], [ %8516, %8512 ]
  %8520 = zext i32 %8519 to i64
  %8521 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8520
  %8522 = load i8, ptr %8521, align 1, !tbaa !17
  %8523 = icmp eq i8 %8522, 9
  br i1 %8523, label %8524, label %8536

8524:                                             ; preds = %8517, %8498
  %8525 = phi ptr [ %8518, %8517 ], [ %8499, %8498 ]
  %8526 = load i64, ptr %8525, align 8
  %8527 = and i64 %8526, 65535
  %8528 = icmp eq i64 %8527, 14
  br i1 %8528, label %8529, label %8531

8529:                                             ; preds = %8524
  %8530 = tail call i32 @vector_type_mode(ptr noundef nonnull %8525) #24
  br label %8553

8531:                                             ; preds = %8524
  %8532 = getelementptr inbounds %struct.tree_type, ptr %8525, i64 0, i32 6
  %8533 = load i32, ptr %8532, align 4
  %8534 = lshr i32 %8533, 16
  %8535 = and i32 %8534, 255
  br label %8553

8536:                                             ; preds = %8517
  %8537 = load i64, ptr %8518, align 8
  %8538 = and i64 %8537, 65535
  %8539 = icmp eq i64 %8538, 14
  br i1 %8539, label %8540, label %8542

8540:                                             ; preds = %8536
  %8541 = tail call i32 @vector_type_mode(ptr noundef nonnull %8518) #24
  br label %8547

8542:                                             ; preds = %8536
  %8543 = getelementptr inbounds %struct.tree_type, ptr %8518, i64 0, i32 6
  %8544 = load i32, ptr %8543, align 4
  %8545 = lshr i32 %8544, 16
  %8546 = and i32 %8545, 255
  br label %8547

8547:                                             ; preds = %8542, %8540
  %8548 = phi i32 [ %8541, %8540 ], [ %8546, %8542 ]
  %8549 = zext i32 %8548 to i64
  %8550 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8549
  %8551 = load i8, ptr %8550, align 1, !tbaa !17
  %8552 = zext i8 %8551 to i32
  br label %8553

8553:                                             ; preds = %8547, %8531, %8529, %8483, %8467, %8465
  %8554 = phi i32 [ %8488, %8483 ], [ %8466, %8465 ], [ %8471, %8467 ], [ %8552, %8547 ], [ %8530, %8529 ], [ %8535, %8531 ]
  %8555 = add i32 %8554, -38
  %8556 = zext i32 %8555 to i64
  %8557 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %8556
  %8558 = load ptr, ptr %8557, align 8, !tbaa !6
  %8559 = getelementptr inbounds %struct.real_format, ptr %8558, i64 0, i32 11
  %8560 = load i8, ptr %8559, align 2, !tbaa !36
  %8561 = icmp eq i8 %8560, 0
  %8562 = load i32, ptr @flag_finite_math_only, align 4
  %8563 = icmp ne i32 %8562, 0
  %8564 = select i1 %8561, i1 true, i1 %8563
  br i1 %8564, label %8565, label %8571

8565:                                             ; preds = %8553, %8339, %8267
  %8566 = tail call i32 @real_onep(ptr noundef nonnull %45) #24
  %8567 = icmp eq i32 %8566, 0
  br i1 %8567, label %8571, label %8568

8568:                                             ; preds = %8565
  %8569 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %8570 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %8569)
  br label %14075

8571:                                             ; preds = %8553, %8565
  %8572 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %8573 = icmp eq i32 %8572, 0
  br i1 %8573, label %8869, label %8574

8574:                                             ; preds = %8571
  %8575 = load ptr, ptr %7608, align 8, !tbaa !17
  %8576 = load i64, ptr %8575, align 8
  %8577 = and i64 %8576, 65535
  %8578 = icmp eq i64 %8577, 14
  br i1 %8578, label %8579, label %8582

8579:                                             ; preds = %8574
  %8580 = tail call i32 @vector_type_mode(ptr noundef nonnull %8575) #24
  %8581 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8587

8582:                                             ; preds = %8574
  %8583 = getelementptr inbounds %struct.tree_type, ptr %8575, i64 0, i32 6
  %8584 = load i32, ptr %8583, align 4
  %8585 = lshr i32 %8584, 16
  %8586 = and i32 %8585, 255
  br label %8587

8587:                                             ; preds = %8582, %8579
  %8588 = phi ptr [ %8581, %8579 ], [ %8575, %8582 ]
  %8589 = phi i32 [ %8580, %8579 ], [ %8586, %8582 ]
  %8590 = zext i32 %8589 to i64
  %8591 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8590
  %8592 = load i8, ptr %8591, align 1, !tbaa !17
  %8593 = icmp eq i8 %8592, 8
  br i1 %8593, label %8651, label %8594

8594:                                             ; preds = %8587
  %8595 = load i64, ptr %8588, align 8
  %8596 = and i64 %8595, 65535
  %8597 = icmp eq i64 %8596, 14
  br i1 %8597, label %8598, label %8601

8598:                                             ; preds = %8594
  %8599 = tail call i32 @vector_type_mode(ptr noundef nonnull %8588) #24
  %8600 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8606

8601:                                             ; preds = %8594
  %8602 = getelementptr inbounds %struct.tree_type, ptr %8588, i64 0, i32 6
  %8603 = load i32, ptr %8602, align 4
  %8604 = lshr i32 %8603, 16
  %8605 = and i32 %8604, 255
  br label %8606

8606:                                             ; preds = %8601, %8598
  %8607 = phi ptr [ %8600, %8598 ], [ %8588, %8601 ]
  %8608 = phi i32 [ %8599, %8598 ], [ %8605, %8601 ]
  %8609 = zext i32 %8608 to i64
  %8610 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8609
  %8611 = load i8, ptr %8610, align 1, !tbaa !17
  %8612 = icmp eq i8 %8611, 9
  br i1 %8612, label %8651, label %8613

8613:                                             ; preds = %8606
  %8614 = load i64, ptr %8607, align 8
  %8615 = and i64 %8614, 65535
  %8616 = icmp eq i64 %8615, 14
  br i1 %8616, label %8617, label %8620

8617:                                             ; preds = %8613
  %8618 = tail call i32 @vector_type_mode(ptr noundef nonnull %8607) #24
  %8619 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8625

8620:                                             ; preds = %8613
  %8621 = getelementptr inbounds %struct.tree_type, ptr %8607, i64 0, i32 6
  %8622 = load i32, ptr %8621, align 4
  %8623 = lshr i32 %8622, 16
  %8624 = and i32 %8623, 255
  br label %8625

8625:                                             ; preds = %8620, %8617
  %8626 = phi ptr [ %8619, %8617 ], [ %8607, %8620 ]
  %8627 = phi i32 [ %8618, %8617 ], [ %8624, %8620 ]
  %8628 = zext i32 %8627 to i64
  %8629 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8628
  %8630 = load i8, ptr %8629, align 1, !tbaa !17
  %8631 = icmp eq i8 %8630, 11
  br i1 %8631, label %8651, label %8632

8632:                                             ; preds = %8625
  %8633 = load i64, ptr %8626, align 8
  %8634 = and i64 %8633, 65535
  %8635 = icmp eq i64 %8634, 14
  br i1 %8635, label %8636, label %8638

8636:                                             ; preds = %8632
  %8637 = tail call i32 @vector_type_mode(ptr noundef nonnull %8626) #24
  br label %8643

8638:                                             ; preds = %8632
  %8639 = getelementptr inbounds %struct.tree_type, ptr %8626, i64 0, i32 6
  %8640 = load i32, ptr %8639, align 4
  %8641 = lshr i32 %8640, 16
  %8642 = and i32 %8641, 255
  br label %8643

8643:                                             ; preds = %8638, %8636
  %8644 = phi i32 [ %8637, %8636 ], [ %8642, %8638 ]
  %8645 = zext i32 %8644 to i64
  %8646 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8645
  %8647 = load i8, ptr %8646, align 1, !tbaa !17
  %8648 = icmp eq i8 %8647, 17
  br i1 %8648, label %8649, label %8869

8649:                                             ; preds = %8643
  %8650 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8651

8651:                                             ; preds = %8649, %8625, %8606, %8587
  %8652 = phi ptr [ %8650, %8649 ], [ %8626, %8625 ], [ %8607, %8606 ], [ %8588, %8587 ]
  %8653 = load i64, ptr %8652, align 8
  %8654 = and i64 %8653, 65535
  %8655 = icmp eq i64 %8654, 14
  br i1 %8655, label %8656, label %8659

8656:                                             ; preds = %8651
  %8657 = tail call i32 @vector_type_mode(ptr noundef nonnull %8652) #24
  %8658 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8664

8659:                                             ; preds = %8651
  %8660 = getelementptr inbounds %struct.tree_type, ptr %8652, i64 0, i32 6
  %8661 = load i32, ptr %8660, align 4
  %8662 = lshr i32 %8661, 16
  %8663 = and i32 %8662, 255
  br label %8664

8664:                                             ; preds = %8659, %8656
  %8665 = phi ptr [ %8658, %8656 ], [ %8652, %8659 ]
  %8666 = phi i32 [ %8657, %8656 ], [ %8663, %8659 ]
  %8667 = zext i32 %8666 to i64
  %8668 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8667
  %8669 = load i8, ptr %8668, align 1, !tbaa !17
  %8670 = icmp eq i8 %8669, 8
  br i1 %8670, label %8690, label %8671

8671:                                             ; preds = %8664
  %8672 = load i64, ptr %8665, align 8
  %8673 = and i64 %8672, 65535
  %8674 = icmp eq i64 %8673, 14
  br i1 %8674, label %8675, label %8678

8675:                                             ; preds = %8671
  %8676 = tail call i32 @vector_type_mode(ptr noundef nonnull %8665) #24
  %8677 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8683

8678:                                             ; preds = %8671
  %8679 = getelementptr inbounds %struct.tree_type, ptr %8665, i64 0, i32 6
  %8680 = load i32, ptr %8679, align 4
  %8681 = lshr i32 %8680, 16
  %8682 = and i32 %8681, 255
  br label %8683

8683:                                             ; preds = %8678, %8675
  %8684 = phi ptr [ %8677, %8675 ], [ %8665, %8678 ]
  %8685 = phi i32 [ %8676, %8675 ], [ %8682, %8678 ]
  %8686 = zext i32 %8685 to i64
  %8687 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8686
  %8688 = load i8, ptr %8687, align 1, !tbaa !17
  %8689 = icmp eq i8 %8688, 9
  br i1 %8689, label %8690, label %8702

8690:                                             ; preds = %8683, %8664
  %8691 = phi ptr [ %8684, %8683 ], [ %8665, %8664 ]
  %8692 = load i64, ptr %8691, align 8
  %8693 = and i64 %8692, 65535
  %8694 = icmp eq i64 %8693, 14
  br i1 %8694, label %8695, label %8697

8695:                                             ; preds = %8690
  %8696 = tail call i32 @vector_type_mode(ptr noundef nonnull %8691) #24
  br label %8719

8697:                                             ; preds = %8690
  %8698 = getelementptr inbounds %struct.tree_type, ptr %8691, i64 0, i32 6
  %8699 = load i32, ptr %8698, align 4
  %8700 = lshr i32 %8699, 16
  %8701 = and i32 %8700, 255
  br label %8719

8702:                                             ; preds = %8683
  %8703 = load i64, ptr %8684, align 8
  %8704 = and i64 %8703, 65535
  %8705 = icmp eq i64 %8704, 14
  br i1 %8705, label %8706, label %8708

8706:                                             ; preds = %8702
  %8707 = tail call i32 @vector_type_mode(ptr noundef nonnull %8684) #24
  br label %8713

8708:                                             ; preds = %8702
  %8709 = getelementptr inbounds %struct.tree_type, ptr %8684, i64 0, i32 6
  %8710 = load i32, ptr %8709, align 4
  %8711 = lshr i32 %8710, 16
  %8712 = and i32 %8711, 255
  br label %8713

8713:                                             ; preds = %8708, %8706
  %8714 = phi i32 [ %8707, %8706 ], [ %8712, %8708 ]
  %8715 = zext i32 %8714 to i64
  %8716 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8715
  %8717 = load i8, ptr %8716, align 1, !tbaa !17
  %8718 = zext i8 %8717 to i32
  br label %8719

8719:                                             ; preds = %8695, %8697, %8713
  %8720 = phi i32 [ %8718, %8713 ], [ %8696, %8695 ], [ %8701, %8697 ]
  %8721 = zext i32 %8720 to i64
  %8722 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8721
  %8723 = load i8, ptr %8722, align 1, !tbaa !17
  %8724 = icmp eq i8 %8723, 9
  %8725 = load ptr, ptr %7608, align 8, !tbaa !17
  %8726 = load i64, ptr %8725, align 8
  %8727 = and i64 %8726, 65535
  %8728 = icmp eq i64 %8727, 14
  br i1 %8724, label %8729, label %8793

8729:                                             ; preds = %8719
  br i1 %8728, label %8730, label %8733

8730:                                             ; preds = %8729
  %8731 = tail call i32 @vector_type_mode(ptr noundef nonnull %8725) #24
  %8732 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8738

8733:                                             ; preds = %8729
  %8734 = getelementptr inbounds %struct.tree_type, ptr %8725, i64 0, i32 6
  %8735 = load i32, ptr %8734, align 4
  %8736 = lshr i32 %8735, 16
  %8737 = and i32 %8736, 255
  br label %8738

8738:                                             ; preds = %8733, %8730
  %8739 = phi ptr [ %8732, %8730 ], [ %8725, %8733 ]
  %8740 = phi i32 [ %8731, %8730 ], [ %8737, %8733 ]
  %8741 = zext i32 %8740 to i64
  %8742 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8741
  %8743 = load i8, ptr %8742, align 1, !tbaa !17
  %8744 = icmp eq i8 %8743, 8
  br i1 %8744, label %8764, label %8745

8745:                                             ; preds = %8738
  %8746 = load i64, ptr %8739, align 8
  %8747 = and i64 %8746, 65535
  %8748 = icmp eq i64 %8747, 14
  br i1 %8748, label %8749, label %8752

8749:                                             ; preds = %8745
  %8750 = tail call i32 @vector_type_mode(ptr noundef nonnull %8739) #24
  %8751 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8757

8752:                                             ; preds = %8745
  %8753 = getelementptr inbounds %struct.tree_type, ptr %8739, i64 0, i32 6
  %8754 = load i32, ptr %8753, align 4
  %8755 = lshr i32 %8754, 16
  %8756 = and i32 %8755, 255
  br label %8757

8757:                                             ; preds = %8752, %8749
  %8758 = phi ptr [ %8751, %8749 ], [ %8739, %8752 ]
  %8759 = phi i32 [ %8750, %8749 ], [ %8756, %8752 ]
  %8760 = zext i32 %8759 to i64
  %8761 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8760
  %8762 = load i8, ptr %8761, align 1, !tbaa !17
  %8763 = icmp eq i8 %8762, 9
  br i1 %8763, label %8764, label %8776

8764:                                             ; preds = %8757, %8738
  %8765 = phi ptr [ %8758, %8757 ], [ %8739, %8738 ]
  %8766 = load i64, ptr %8765, align 8
  %8767 = and i64 %8766, 65535
  %8768 = icmp eq i64 %8767, 14
  br i1 %8768, label %8769, label %8771

8769:                                             ; preds = %8764
  %8770 = tail call i32 @vector_type_mode(ptr noundef nonnull %8765) #24
  br label %8857

8771:                                             ; preds = %8764
  %8772 = getelementptr inbounds %struct.tree_type, ptr %8765, i64 0, i32 6
  %8773 = load i32, ptr %8772, align 4
  %8774 = lshr i32 %8773, 16
  %8775 = and i32 %8774, 255
  br label %8857

8776:                                             ; preds = %8757
  %8777 = load i64, ptr %8758, align 8
  %8778 = and i64 %8777, 65535
  %8779 = icmp eq i64 %8778, 14
  br i1 %8779, label %8780, label %8782

8780:                                             ; preds = %8776
  %8781 = tail call i32 @vector_type_mode(ptr noundef nonnull %8758) #24
  br label %8787

8782:                                             ; preds = %8776
  %8783 = getelementptr inbounds %struct.tree_type, ptr %8758, i64 0, i32 6
  %8784 = load i32, ptr %8783, align 4
  %8785 = lshr i32 %8784, 16
  %8786 = and i32 %8785, 255
  br label %8787

8787:                                             ; preds = %8782, %8780
  %8788 = phi i32 [ %8781, %8780 ], [ %8786, %8782 ]
  %8789 = zext i32 %8788 to i64
  %8790 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8789
  %8791 = load i8, ptr %8790, align 1, !tbaa !17
  %8792 = zext i8 %8791 to i32
  br label %8857

8793:                                             ; preds = %8719
  br i1 %8728, label %8794, label %8797

8794:                                             ; preds = %8793
  %8795 = tail call i32 @vector_type_mode(ptr noundef nonnull %8725) #24
  %8796 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8802

8797:                                             ; preds = %8793
  %8798 = getelementptr inbounds %struct.tree_type, ptr %8725, i64 0, i32 6
  %8799 = load i32, ptr %8798, align 4
  %8800 = lshr i32 %8799, 16
  %8801 = and i32 %8800, 255
  br label %8802

8802:                                             ; preds = %8797, %8794
  %8803 = phi ptr [ %8796, %8794 ], [ %8725, %8797 ]
  %8804 = phi i32 [ %8795, %8794 ], [ %8801, %8797 ]
  %8805 = zext i32 %8804 to i64
  %8806 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8805
  %8807 = load i8, ptr %8806, align 1, !tbaa !17
  %8808 = icmp eq i8 %8807, 8
  br i1 %8808, label %8828, label %8809

8809:                                             ; preds = %8802
  %8810 = load i64, ptr %8803, align 8
  %8811 = and i64 %8810, 65535
  %8812 = icmp eq i64 %8811, 14
  br i1 %8812, label %8813, label %8816

8813:                                             ; preds = %8809
  %8814 = tail call i32 @vector_type_mode(ptr noundef nonnull %8803) #24
  %8815 = load ptr, ptr %7608, align 8, !tbaa !17
  br label %8821

8816:                                             ; preds = %8809
  %8817 = getelementptr inbounds %struct.tree_type, ptr %8803, i64 0, i32 6
  %8818 = load i32, ptr %8817, align 4
  %8819 = lshr i32 %8818, 16
  %8820 = and i32 %8819, 255
  br label %8821

8821:                                             ; preds = %8816, %8813
  %8822 = phi ptr [ %8815, %8813 ], [ %8803, %8816 ]
  %8823 = phi i32 [ %8814, %8813 ], [ %8820, %8816 ]
  %8824 = zext i32 %8823 to i64
  %8825 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %8824
  %8826 = load i8, ptr %8825, align 1, !tbaa !17
  %8827 = icmp eq i8 %8826, 9
  br i1 %8827, label %8828, label %8840

8828:                                             ; preds = %8821, %8802
  %8829 = phi ptr [ %8822, %8821 ], [ %8803, %8802 ]
  %8830 = load i64, ptr %8829, align 8
  %8831 = and i64 %8830, 65535
  %8832 = icmp eq i64 %8831, 14
  br i1 %8832, label %8833, label %8835

8833:                                             ; preds = %8828
  %8834 = tail call i32 @vector_type_mode(ptr noundef nonnull %8829) #24
  br label %8857

8835:                                             ; preds = %8828
  %8836 = getelementptr inbounds %struct.tree_type, ptr %8829, i64 0, i32 6
  %8837 = load i32, ptr %8836, align 4
  %8838 = lshr i32 %8837, 16
  %8839 = and i32 %8838, 255
  br label %8857

8840:                                             ; preds = %8821
  %8841 = load i64, ptr %8822, align 8
  %8842 = and i64 %8841, 65535
  %8843 = icmp eq i64 %8842, 14
  br i1 %8843, label %8844, label %8846

8844:                                             ; preds = %8840
  %8845 = tail call i32 @vector_type_mode(ptr noundef nonnull %8822) #24
  br label %8851

8846:                                             ; preds = %8840
  %8847 = getelementptr inbounds %struct.tree_type, ptr %8822, i64 0, i32 6
  %8848 = load i32, ptr %8847, align 4
  %8849 = lshr i32 %8848, 16
  %8850 = and i32 %8849, 255
  br label %8851

8851:                                             ; preds = %8846, %8844
  %8852 = phi i32 [ %8845, %8844 ], [ %8850, %8846 ]
  %8853 = zext i32 %8852 to i64
  %8854 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %8853
  %8855 = load i8, ptr %8854, align 1, !tbaa !17
  %8856 = zext i8 %8855 to i32
  br label %8857

8857:                                             ; preds = %8851, %8835, %8833, %8787, %8771, %8769
  %8858 = phi i32 [ %8792, %8787 ], [ %8770, %8769 ], [ %8775, %8771 ], [ %8856, %8851 ], [ %8834, %8833 ], [ %8839, %8835 ]
  %8859 = add i32 %8858, -38
  %8860 = zext i32 %8859 to i64
  %8861 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %8860
  %8862 = load ptr, ptr %8861, align 8, !tbaa !6
  %8863 = getelementptr inbounds %struct.real_format, ptr %8862, i64 0, i32 11
  %8864 = load i8, ptr %8863, align 2, !tbaa !36
  %8865 = icmp eq i8 %8864, 0
  %8866 = load i32, ptr @flag_finite_math_only, align 4
  %8867 = icmp ne i32 %8866, 0
  %8868 = select i1 %8865, i1 true, i1 %8867
  br i1 %8868, label %8869, label %8876

8869:                                             ; preds = %8857, %8643, %8571
  %8870 = tail call i32 @real_minus_onep(ptr noundef nonnull %45) #24
  %8871 = icmp eq i32 %8870, 0
  br i1 %8871, label %8876, label %8872

8872:                                             ; preds = %8869
  %8873 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %8874 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %8873)
  %8875 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %8874)
  br label %14075

8876:                                             ; preds = %8857, %8869
  %8877 = load i64, ptr %45, align 8
  %8878 = and i64 %8877, 65535
  %8879 = icmp eq i64 %8878, 24
  br i1 %8879, label %8880, label %8915

8880:                                             ; preds = %8876
  %8881 = load i32, ptr @flag_reciprocal_math, align 4, !tbaa !21
  %8882 = icmp eq i32 %8881, 0
  br i1 %8882, label %8889, label %8883

8883:                                             ; preds = %8880
  %8884 = tail call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1) #24
  %8885 = tail call fastcc ptr @const_binop(i32 noundef 75, ptr noundef %8884, ptr noundef nonnull %45)
  %8886 = icmp eq ptr %8885, null
  br i1 %8886, label %8889, label %8887

8887:                                             ; preds = %8883
  %8888 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %8885)
  br label %14075

8889:                                             ; preds = %8883, %8880
  %8890 = load i32, ptr @optimize, align 4, !tbaa !21
  %8891 = icmp eq i32 %8890, 0
  br i1 %8891, label %8915, label %8892

8892:                                             ; preds = %8889
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %17) #24
  %8893 = getelementptr inbounds %struct.tree_real_cst, ptr %45, i64 0, i32 1
  %8894 = load ptr, ptr %8893, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %17, ptr noundef nonnull align 8 dereferenceable(32) %8894, i64 32, i1 false), !tbaa.struct !29
  %8895 = load ptr, ptr %7608, align 8, !tbaa !17
  %8896 = load i64, ptr %8895, align 8
  %8897 = and i64 %8896, 65535
  %8898 = icmp eq i64 %8897, 14
  br i1 %8898, label %8899, label %8901

8899:                                             ; preds = %8892
  %8900 = tail call i32 @vector_type_mode(ptr noundef nonnull %8895) #24
  br label %8906

8901:                                             ; preds = %8892
  %8902 = getelementptr inbounds %struct.tree_type, ptr %8895, i64 0, i32 6
  %8903 = load i32, ptr %8902, align 4
  %8904 = lshr i32 %8903, 16
  %8905 = and i32 %8904, 255
  br label %8906

8906:                                             ; preds = %8901, %8899
  %8907 = phi i32 [ %8900, %8899 ], [ %8905, %8901 ]
  %8908 = call zeroext i8 @exact_real_inverse(i32 noundef %8907, ptr noundef nonnull %17) #24
  %8909 = icmp eq i8 %8908, 0
  br i1 %8909, label %8910, label %8911

8910:                                             ; preds = %8906
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17) #24
  br label %8915

8911:                                             ; preds = %8906
  %8912 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 %17) #24
  %8913 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %8914 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %8913, ptr noundef %8912)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %17) #24
  br label %14075

8915:                                             ; preds = %8910, %8889, %8876
  %8916 = load i32, ptr @flag_reciprocal_math, align 4, !tbaa !21
  %8917 = icmp eq i32 %8916, 0
  br i1 %8917, label %8954, label %8918

8918:                                             ; preds = %8915
  %8919 = load i64, ptr %46, align 8
  %8920 = and i64 %8919, 65535
  %8921 = icmp eq i64 %8920, 75
  br i1 %8921, label %8922, label %8929

8922:                                             ; preds = %8918
  %8923 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %8924 = load ptr, ptr %8923, align 8, !tbaa !17
  %8925 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %8926 = load ptr, ptr %8925, align 8, !tbaa !17
  %8927 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %8926, ptr noundef nonnull %45)
  %8928 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %8924, ptr noundef %8927)
  br label %14075

8929:                                             ; preds = %8918
  %8930 = load i64, ptr %45, align 8
  %8931 = trunc i64 %8930 to i16
  switch i16 %8931, label %8954 [
    i16 75, label %8932
    i16 65, label %8939
  ]

8932:                                             ; preds = %8929
  %8933 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %8934 = load ptr, ptr %8933, align 8, !tbaa !17
  %8935 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %8934)
  %8936 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %8937 = load ptr, ptr %8936, align 8, !tbaa !17
  %8938 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %8935, ptr noundef %8937)
  br label %14075

8939:                                             ; preds = %8929
  %8940 = icmp eq i64 %8920, 24
  br i1 %8940, label %8941, label %8954

8941:                                             ; preds = %8939
  %8942 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %8943 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %8944 = load ptr, ptr %8943, align 8, !tbaa !17
  %8945 = load i64, ptr %8944, align 8
  %8946 = and i64 %8945, 65535
  %8947 = icmp eq i64 %8946, 24
  br i1 %8947, label %8948, label %8954

8948:                                             ; preds = %8941
  %8949 = call fastcc ptr @const_binop(i32 noundef 75, ptr noundef nonnull %46, ptr noundef nonnull %8944)
  %8950 = icmp eq ptr %8949, null
  br i1 %8950, label %8954, label %8951

8951:                                             ; preds = %8948
  %8952 = load ptr, ptr %8942, align 8, !tbaa !17
  %8953 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef nonnull %8949, ptr noundef %8952)
  br label %14075

8954:                                             ; preds = %8929, %8948, %8915, %8941, %8939
  %8955 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %8956 = icmp eq i32 %8955, 0
  br i1 %8956, label %14075, label %8957

8957:                                             ; preds = %8954
  %8958 = call i32 @builtin_mathfn_code(ptr noundef nonnull %46) #24
  %8959 = call i32 @builtin_mathfn_code(ptr noundef nonnull %45) #24
  %8960 = icmp eq i32 %8958, 219
  %8961 = icmp eq i32 %8959, 30
  %8962 = select i1 %8960, i1 %8961, i1 false
  br i1 %8962, label %8971, label %8963

8963:                                             ; preds = %8957
  %8964 = icmp eq i32 %8958, 223
  %8965 = icmp eq i32 %8959, 31
  %8966 = select i1 %8964, i1 %8965, i1 false
  br i1 %8966, label %8971, label %8967

8967:                                             ; preds = %8963
  %8968 = icmp eq i32 %8958, 227
  %8969 = icmp eq i32 %8959, 35
  %8970 = select i1 %8968, i1 %8969, i1 false
  br i1 %8970, label %8971, label %8984

8971:                                             ; preds = %8967, %8963, %8957
  %8972 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %8973 = load ptr, ptr %8972, align 8, !tbaa !17
  %8974 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %8975 = load ptr, ptr %8974, align 8, !tbaa !17
  %8976 = call i32 @operand_equal_p(ptr noundef %8973, ptr noundef %8975, i32 noundef 0)
  %8977 = icmp eq i32 %8976, 0
  br i1 %8977, label %10241, label %8978

8978:                                             ; preds = %8971
  %8979 = call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 231) #24
  %8980 = icmp eq ptr %8979, null
  br i1 %8980, label %10241, label %8981

8981:                                             ; preds = %8978
  %8982 = load ptr, ptr %8972, align 8, !tbaa !17
  %8983 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %8979, i32 noundef 1, ptr noundef %8982) #24
  br label %14075

8984:                                             ; preds = %8967
  %8985 = icmp eq i32 %8958, 30
  %8986 = icmp eq i32 %8959, 219
  %8987 = select i1 %8985, i1 %8986, i1 false
  br i1 %8987, label %8996, label %8988

8988:                                             ; preds = %8984
  %8989 = icmp eq i32 %8958, 31
  %8990 = icmp eq i32 %8959, 223
  %8991 = select i1 %8989, i1 %8990, i1 false
  br i1 %8991, label %8996, label %8992

8992:                                             ; preds = %8988
  %8993 = icmp eq i32 %8958, 35
  %8994 = icmp eq i32 %8959, 227
  %8995 = select i1 %8993, i1 %8994, i1 false
  br i1 %8995, label %8996, label %9011

8996:                                             ; preds = %8992, %8988, %8984
  %8997 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %8998 = load ptr, ptr %8997, align 8, !tbaa !17
  %8999 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %9000 = load ptr, ptr %8999, align 8, !tbaa !17
  %9001 = call i32 @operand_equal_p(ptr noundef %8998, ptr noundef %9000, i32 noundef 0)
  %9002 = icmp eq i32 %9001, 0
  br i1 %9002, label %10241, label %9003

9003:                                             ; preds = %8996
  %9004 = call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 231) #24
  %9005 = icmp eq ptr %9004, null
  br i1 %9005, label %10241, label %9006

9006:                                             ; preds = %9003
  %9007 = load ptr, ptr %8997, align 8, !tbaa !17
  %9008 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %9004, i32 noundef 1, ptr noundef %9007) #24
  %9009 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1) #24
  %9010 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %9009, ptr noundef %9008)
  br label %14075

9011:                                             ; preds = %8992
  %9012 = icmp eq i32 %8959, 231
  %9013 = select i1 %8960, i1 %9012, i1 false
  %9014 = icmp eq i32 %8959, 232
  %9015 = select i1 %8964, i1 %9014, i1 false
  %9016 = select i1 %9013, i1 true, i1 %9015
  %9017 = icmp eq i32 %8959, 236
  %9018 = select i1 %8968, i1 %9017, i1 false
  %9019 = select i1 %9016, i1 true, i1 %9018
  br i1 %9019, label %9020, label %9625

9020:                                             ; preds = %9011
  %9021 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %9022 = load ptr, ptr %9021, align 8, !tbaa !17
  %9023 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %9024 = load ptr, ptr %9023, align 8, !tbaa !17
  %9025 = getelementptr inbounds %struct.tree_common, ptr %9022, i64 0, i32 2
  %9026 = load ptr, ptr %9025, align 8, !tbaa !17
  %9027 = load i64, ptr %9026, align 8
  %9028 = and i64 %9027, 65535
  %9029 = icmp eq i64 %9028, 14
  br i1 %9029, label %9030, label %9033

9030:                                             ; preds = %9020
  %9031 = call i32 @vector_type_mode(ptr noundef nonnull %9026) #24
  %9032 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9038

9033:                                             ; preds = %9020
  %9034 = getelementptr inbounds %struct.tree_type, ptr %9026, i64 0, i32 6
  %9035 = load i32, ptr %9034, align 4
  %9036 = lshr i32 %9035, 16
  %9037 = and i32 %9036, 255
  br label %9038

9038:                                             ; preds = %9033, %9030
  %9039 = phi ptr [ %9032, %9030 ], [ %9026, %9033 ]
  %9040 = phi i32 [ %9031, %9030 ], [ %9037, %9033 ]
  %9041 = zext i32 %9040 to i64
  %9042 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9041
  %9043 = load i8, ptr %9042, align 1, !tbaa !17
  %9044 = icmp eq i8 %9043, 8
  br i1 %9044, label %9102, label %9045

9045:                                             ; preds = %9038
  %9046 = load i64, ptr %9039, align 8
  %9047 = and i64 %9046, 65535
  %9048 = icmp eq i64 %9047, 14
  br i1 %9048, label %9049, label %9052

9049:                                             ; preds = %9045
  %9050 = call i32 @vector_type_mode(ptr noundef nonnull %9039) #24
  %9051 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9057

9052:                                             ; preds = %9045
  %9053 = getelementptr inbounds %struct.tree_type, ptr %9039, i64 0, i32 6
  %9054 = load i32, ptr %9053, align 4
  %9055 = lshr i32 %9054, 16
  %9056 = and i32 %9055, 255
  br label %9057

9057:                                             ; preds = %9052, %9049
  %9058 = phi ptr [ %9051, %9049 ], [ %9039, %9052 ]
  %9059 = phi i32 [ %9050, %9049 ], [ %9056, %9052 ]
  %9060 = zext i32 %9059 to i64
  %9061 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9060
  %9062 = load i8, ptr %9061, align 1, !tbaa !17
  %9063 = icmp eq i8 %9062, 9
  br i1 %9063, label %9102, label %9064

9064:                                             ; preds = %9057
  %9065 = load i64, ptr %9058, align 8
  %9066 = and i64 %9065, 65535
  %9067 = icmp eq i64 %9066, 14
  br i1 %9067, label %9068, label %9071

9068:                                             ; preds = %9064
  %9069 = call i32 @vector_type_mode(ptr noundef nonnull %9058) #24
  %9070 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9076

9071:                                             ; preds = %9064
  %9072 = getelementptr inbounds %struct.tree_type, ptr %9058, i64 0, i32 6
  %9073 = load i32, ptr %9072, align 4
  %9074 = lshr i32 %9073, 16
  %9075 = and i32 %9074, 255
  br label %9076

9076:                                             ; preds = %9071, %9068
  %9077 = phi ptr [ %9070, %9068 ], [ %9058, %9071 ]
  %9078 = phi i32 [ %9069, %9068 ], [ %9075, %9071 ]
  %9079 = zext i32 %9078 to i64
  %9080 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9079
  %9081 = load i8, ptr %9080, align 1, !tbaa !17
  %9082 = icmp eq i8 %9081, 11
  br i1 %9082, label %9102, label %9083

9083:                                             ; preds = %9076
  %9084 = load i64, ptr %9077, align 8
  %9085 = and i64 %9084, 65535
  %9086 = icmp eq i64 %9085, 14
  br i1 %9086, label %9087, label %9090

9087:                                             ; preds = %9083
  %9088 = call i32 @vector_type_mode(ptr noundef nonnull %9077) #24
  %9089 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9095

9090:                                             ; preds = %9083
  %9091 = getelementptr inbounds %struct.tree_type, ptr %9077, i64 0, i32 6
  %9092 = load i32, ptr %9091, align 4
  %9093 = lshr i32 %9092, 16
  %9094 = and i32 %9093, 255
  br label %9095

9095:                                             ; preds = %9090, %9087
  %9096 = phi ptr [ %9089, %9087 ], [ %9077, %9090 ]
  %9097 = phi i32 [ %9088, %9087 ], [ %9094, %9090 ]
  %9098 = zext i32 %9097 to i64
  %9099 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9098
  %9100 = load i8, ptr %9099, align 1, !tbaa !17
  %9101 = icmp eq i8 %9100, 17
  br i1 %9101, label %9102, label %9322

9102:                                             ; preds = %9095, %9076, %9057, %9038
  %9103 = phi ptr [ %9077, %9076 ], [ %9058, %9057 ], [ %9039, %9038 ], [ %9096, %9095 ]
  %9104 = load i64, ptr %9103, align 8
  %9105 = and i64 %9104, 65535
  %9106 = icmp eq i64 %9105, 14
  br i1 %9106, label %9107, label %9110

9107:                                             ; preds = %9102
  %9108 = call i32 @vector_type_mode(ptr noundef nonnull %9103) #24
  %9109 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9115

9110:                                             ; preds = %9102
  %9111 = getelementptr inbounds %struct.tree_type, ptr %9103, i64 0, i32 6
  %9112 = load i32, ptr %9111, align 4
  %9113 = lshr i32 %9112, 16
  %9114 = and i32 %9113, 255
  br label %9115

9115:                                             ; preds = %9110, %9107
  %9116 = phi ptr [ %9109, %9107 ], [ %9103, %9110 ]
  %9117 = phi i32 [ %9108, %9107 ], [ %9114, %9110 ]
  %9118 = zext i32 %9117 to i64
  %9119 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9118
  %9120 = load i8, ptr %9119, align 1, !tbaa !17
  %9121 = icmp eq i8 %9120, 8
  br i1 %9121, label %9141, label %9122

9122:                                             ; preds = %9115
  %9123 = load i64, ptr %9116, align 8
  %9124 = and i64 %9123, 65535
  %9125 = icmp eq i64 %9124, 14
  br i1 %9125, label %9126, label %9129

9126:                                             ; preds = %9122
  %9127 = call i32 @vector_type_mode(ptr noundef nonnull %9116) #24
  %9128 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9134

9129:                                             ; preds = %9122
  %9130 = getelementptr inbounds %struct.tree_type, ptr %9116, i64 0, i32 6
  %9131 = load i32, ptr %9130, align 4
  %9132 = lshr i32 %9131, 16
  %9133 = and i32 %9132, 255
  br label %9134

9134:                                             ; preds = %9129, %9126
  %9135 = phi ptr [ %9128, %9126 ], [ %9116, %9129 ]
  %9136 = phi i32 [ %9127, %9126 ], [ %9133, %9129 ]
  %9137 = zext i32 %9136 to i64
  %9138 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9137
  %9139 = load i8, ptr %9138, align 1, !tbaa !17
  %9140 = icmp eq i8 %9139, 9
  br i1 %9140, label %9141, label %9153

9141:                                             ; preds = %9134, %9115
  %9142 = phi ptr [ %9135, %9134 ], [ %9116, %9115 ]
  %9143 = load i64, ptr %9142, align 8
  %9144 = and i64 %9143, 65535
  %9145 = icmp eq i64 %9144, 14
  br i1 %9145, label %9146, label %9148

9146:                                             ; preds = %9141
  %9147 = call i32 @vector_type_mode(ptr noundef nonnull %9142) #24
  br label %9170

9148:                                             ; preds = %9141
  %9149 = getelementptr inbounds %struct.tree_type, ptr %9142, i64 0, i32 6
  %9150 = load i32, ptr %9149, align 4
  %9151 = lshr i32 %9150, 16
  %9152 = and i32 %9151, 255
  br label %9170

9153:                                             ; preds = %9134
  %9154 = load i64, ptr %9135, align 8
  %9155 = and i64 %9154, 65535
  %9156 = icmp eq i64 %9155, 14
  br i1 %9156, label %9157, label %9159

9157:                                             ; preds = %9153
  %9158 = call i32 @vector_type_mode(ptr noundef nonnull %9135) #24
  br label %9164

9159:                                             ; preds = %9153
  %9160 = getelementptr inbounds %struct.tree_type, ptr %9135, i64 0, i32 6
  %9161 = load i32, ptr %9160, align 4
  %9162 = lshr i32 %9161, 16
  %9163 = and i32 %9162, 255
  br label %9164

9164:                                             ; preds = %9159, %9157
  %9165 = phi i32 [ %9158, %9157 ], [ %9163, %9159 ]
  %9166 = zext i32 %9165 to i64
  %9167 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9166
  %9168 = load i8, ptr %9167, align 1, !tbaa !17
  %9169 = zext i8 %9168 to i32
  br label %9170

9170:                                             ; preds = %9146, %9148, %9164
  %9171 = phi i32 [ %9169, %9164 ], [ %9147, %9146 ], [ %9152, %9148 ]
  %9172 = zext i32 %9171 to i64
  %9173 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9172
  %9174 = load i8, ptr %9173, align 1, !tbaa !17
  %9175 = icmp eq i8 %9174, 9
  %9176 = load ptr, ptr %9025, align 8, !tbaa !17
  %9177 = load i64, ptr %9176, align 8
  %9178 = and i64 %9177, 65535
  %9179 = icmp eq i64 %9178, 14
  br i1 %9175, label %9180, label %9244

9180:                                             ; preds = %9170
  br i1 %9179, label %9181, label %9184

9181:                                             ; preds = %9180
  %9182 = call i32 @vector_type_mode(ptr noundef nonnull %9176) #24
  %9183 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9189

9184:                                             ; preds = %9180
  %9185 = getelementptr inbounds %struct.tree_type, ptr %9176, i64 0, i32 6
  %9186 = load i32, ptr %9185, align 4
  %9187 = lshr i32 %9186, 16
  %9188 = and i32 %9187, 255
  br label %9189

9189:                                             ; preds = %9184, %9181
  %9190 = phi ptr [ %9183, %9181 ], [ %9176, %9184 ]
  %9191 = phi i32 [ %9182, %9181 ], [ %9188, %9184 ]
  %9192 = zext i32 %9191 to i64
  %9193 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9192
  %9194 = load i8, ptr %9193, align 1, !tbaa !17
  %9195 = icmp eq i8 %9194, 8
  br i1 %9195, label %9215, label %9196

9196:                                             ; preds = %9189
  %9197 = load i64, ptr %9190, align 8
  %9198 = and i64 %9197, 65535
  %9199 = icmp eq i64 %9198, 14
  br i1 %9199, label %9200, label %9203

9200:                                             ; preds = %9196
  %9201 = call i32 @vector_type_mode(ptr noundef nonnull %9190) #24
  %9202 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9208

9203:                                             ; preds = %9196
  %9204 = getelementptr inbounds %struct.tree_type, ptr %9190, i64 0, i32 6
  %9205 = load i32, ptr %9204, align 4
  %9206 = lshr i32 %9205, 16
  %9207 = and i32 %9206, 255
  br label %9208

9208:                                             ; preds = %9203, %9200
  %9209 = phi ptr [ %9202, %9200 ], [ %9190, %9203 ]
  %9210 = phi i32 [ %9201, %9200 ], [ %9207, %9203 ]
  %9211 = zext i32 %9210 to i64
  %9212 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9211
  %9213 = load i8, ptr %9212, align 1, !tbaa !17
  %9214 = icmp eq i8 %9213, 9
  br i1 %9214, label %9215, label %9227

9215:                                             ; preds = %9208, %9189
  %9216 = phi ptr [ %9209, %9208 ], [ %9190, %9189 ]
  %9217 = load i64, ptr %9216, align 8
  %9218 = and i64 %9217, 65535
  %9219 = icmp eq i64 %9218, 14
  br i1 %9219, label %9220, label %9222

9220:                                             ; preds = %9215
  %9221 = call i32 @vector_type_mode(ptr noundef nonnull %9216) #24
  br label %9308

9222:                                             ; preds = %9215
  %9223 = getelementptr inbounds %struct.tree_type, ptr %9216, i64 0, i32 6
  %9224 = load i32, ptr %9223, align 4
  %9225 = lshr i32 %9224, 16
  %9226 = and i32 %9225, 255
  br label %9308

9227:                                             ; preds = %9208
  %9228 = load i64, ptr %9209, align 8
  %9229 = and i64 %9228, 65535
  %9230 = icmp eq i64 %9229, 14
  br i1 %9230, label %9231, label %9233

9231:                                             ; preds = %9227
  %9232 = call i32 @vector_type_mode(ptr noundef nonnull %9209) #24
  br label %9238

9233:                                             ; preds = %9227
  %9234 = getelementptr inbounds %struct.tree_type, ptr %9209, i64 0, i32 6
  %9235 = load i32, ptr %9234, align 4
  %9236 = lshr i32 %9235, 16
  %9237 = and i32 %9236, 255
  br label %9238

9238:                                             ; preds = %9233, %9231
  %9239 = phi i32 [ %9232, %9231 ], [ %9237, %9233 ]
  %9240 = zext i32 %9239 to i64
  %9241 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9240
  %9242 = load i8, ptr %9241, align 1, !tbaa !17
  %9243 = zext i8 %9242 to i32
  br label %9308

9244:                                             ; preds = %9170
  br i1 %9179, label %9245, label %9248

9245:                                             ; preds = %9244
  %9246 = call i32 @vector_type_mode(ptr noundef nonnull %9176) #24
  %9247 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9253

9248:                                             ; preds = %9244
  %9249 = getelementptr inbounds %struct.tree_type, ptr %9176, i64 0, i32 6
  %9250 = load i32, ptr %9249, align 4
  %9251 = lshr i32 %9250, 16
  %9252 = and i32 %9251, 255
  br label %9253

9253:                                             ; preds = %9248, %9245
  %9254 = phi ptr [ %9247, %9245 ], [ %9176, %9248 ]
  %9255 = phi i32 [ %9246, %9245 ], [ %9252, %9248 ]
  %9256 = zext i32 %9255 to i64
  %9257 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9256
  %9258 = load i8, ptr %9257, align 1, !tbaa !17
  %9259 = icmp eq i8 %9258, 8
  br i1 %9259, label %9279, label %9260

9260:                                             ; preds = %9253
  %9261 = load i64, ptr %9254, align 8
  %9262 = and i64 %9261, 65535
  %9263 = icmp eq i64 %9262, 14
  br i1 %9263, label %9264, label %9267

9264:                                             ; preds = %9260
  %9265 = call i32 @vector_type_mode(ptr noundef nonnull %9254) #24
  %9266 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9272

9267:                                             ; preds = %9260
  %9268 = getelementptr inbounds %struct.tree_type, ptr %9254, i64 0, i32 6
  %9269 = load i32, ptr %9268, align 4
  %9270 = lshr i32 %9269, 16
  %9271 = and i32 %9270, 255
  br label %9272

9272:                                             ; preds = %9267, %9264
  %9273 = phi ptr [ %9266, %9264 ], [ %9254, %9267 ]
  %9274 = phi i32 [ %9265, %9264 ], [ %9271, %9267 ]
  %9275 = zext i32 %9274 to i64
  %9276 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9275
  %9277 = load i8, ptr %9276, align 1, !tbaa !17
  %9278 = icmp eq i8 %9277, 9
  br i1 %9278, label %9279, label %9291

9279:                                             ; preds = %9272, %9253
  %9280 = phi ptr [ %9273, %9272 ], [ %9254, %9253 ]
  %9281 = load i64, ptr %9280, align 8
  %9282 = and i64 %9281, 65535
  %9283 = icmp eq i64 %9282, 14
  br i1 %9283, label %9284, label %9286

9284:                                             ; preds = %9279
  %9285 = call i32 @vector_type_mode(ptr noundef nonnull %9280) #24
  br label %9308

9286:                                             ; preds = %9279
  %9287 = getelementptr inbounds %struct.tree_type, ptr %9280, i64 0, i32 6
  %9288 = load i32, ptr %9287, align 4
  %9289 = lshr i32 %9288, 16
  %9290 = and i32 %9289, 255
  br label %9308

9291:                                             ; preds = %9272
  %9292 = load i64, ptr %9273, align 8
  %9293 = and i64 %9292, 65535
  %9294 = icmp eq i64 %9293, 14
  br i1 %9294, label %9295, label %9297

9295:                                             ; preds = %9291
  %9296 = call i32 @vector_type_mode(ptr noundef nonnull %9273) #24
  br label %9302

9297:                                             ; preds = %9291
  %9298 = getelementptr inbounds %struct.tree_type, ptr %9273, i64 0, i32 6
  %9299 = load i32, ptr %9298, align 4
  %9300 = lshr i32 %9299, 16
  %9301 = and i32 %9300, 255
  br label %9302

9302:                                             ; preds = %9297, %9295
  %9303 = phi i32 [ %9296, %9295 ], [ %9301, %9297 ]
  %9304 = zext i32 %9303 to i64
  %9305 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9304
  %9306 = load i8, ptr %9305, align 1, !tbaa !17
  %9307 = zext i8 %9306 to i32
  br label %9308

9308:                                             ; preds = %9302, %9286, %9284, %9238, %9222, %9220
  %9309 = phi i32 [ %9243, %9238 ], [ %9221, %9220 ], [ %9226, %9222 ], [ %9307, %9302 ], [ %9285, %9284 ], [ %9290, %9286 ]
  %9310 = add i32 %9309, -38
  %9311 = zext i32 %9310 to i64
  %9312 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %9311
  %9313 = load ptr, ptr %9312, align 8, !tbaa !6
  %9314 = getelementptr inbounds %struct.real_format, ptr %9313, i64 0, i32 11
  %9315 = load i8, ptr %9314, align 2, !tbaa !36
  %9316 = icmp eq i8 %9315, 0
  %9317 = load i32, ptr @flag_finite_math_only, align 4
  %9318 = icmp ne i32 %9317, 0
  %9319 = select i1 %9316, i1 true, i1 %9318
  br i1 %9319, label %9320, label %10241

9320:                                             ; preds = %9308
  %9321 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9322

9322:                                             ; preds = %9320, %9095
  %9323 = phi ptr [ %9321, %9320 ], [ %9096, %9095 ]
  %9324 = load i64, ptr %9323, align 8
  %9325 = and i64 %9324, 65535
  %9326 = icmp eq i64 %9325, 14
  br i1 %9326, label %9327, label %9330

9327:                                             ; preds = %9322
  %9328 = call i32 @vector_type_mode(ptr noundef nonnull %9323) #24
  %9329 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9335

9330:                                             ; preds = %9322
  %9331 = getelementptr inbounds %struct.tree_type, ptr %9323, i64 0, i32 6
  %9332 = load i32, ptr %9331, align 4
  %9333 = lshr i32 %9332, 16
  %9334 = and i32 %9333, 255
  br label %9335

9335:                                             ; preds = %9330, %9327
  %9336 = phi ptr [ %9329, %9327 ], [ %9323, %9330 ]
  %9337 = phi i32 [ %9328, %9327 ], [ %9334, %9330 ]
  %9338 = zext i32 %9337 to i64
  %9339 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9338
  %9340 = load i8, ptr %9339, align 1, !tbaa !17
  %9341 = icmp eq i8 %9340, 8
  br i1 %9341, label %9399, label %9342

9342:                                             ; preds = %9335
  %9343 = load i64, ptr %9336, align 8
  %9344 = and i64 %9343, 65535
  %9345 = icmp eq i64 %9344, 14
  br i1 %9345, label %9346, label %9349

9346:                                             ; preds = %9342
  %9347 = call i32 @vector_type_mode(ptr noundef nonnull %9336) #24
  %9348 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9354

9349:                                             ; preds = %9342
  %9350 = getelementptr inbounds %struct.tree_type, ptr %9336, i64 0, i32 6
  %9351 = load i32, ptr %9350, align 4
  %9352 = lshr i32 %9351, 16
  %9353 = and i32 %9352, 255
  br label %9354

9354:                                             ; preds = %9349, %9346
  %9355 = phi ptr [ %9348, %9346 ], [ %9336, %9349 ]
  %9356 = phi i32 [ %9347, %9346 ], [ %9353, %9349 ]
  %9357 = zext i32 %9356 to i64
  %9358 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9357
  %9359 = load i8, ptr %9358, align 1, !tbaa !17
  %9360 = icmp eq i8 %9359, 9
  br i1 %9360, label %9399, label %9361

9361:                                             ; preds = %9354
  %9362 = load i64, ptr %9355, align 8
  %9363 = and i64 %9362, 65535
  %9364 = icmp eq i64 %9363, 14
  br i1 %9364, label %9365, label %9368

9365:                                             ; preds = %9361
  %9366 = call i32 @vector_type_mode(ptr noundef nonnull %9355) #24
  %9367 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9373

9368:                                             ; preds = %9361
  %9369 = getelementptr inbounds %struct.tree_type, ptr %9355, i64 0, i32 6
  %9370 = load i32, ptr %9369, align 4
  %9371 = lshr i32 %9370, 16
  %9372 = and i32 %9371, 255
  br label %9373

9373:                                             ; preds = %9368, %9365
  %9374 = phi ptr [ %9367, %9365 ], [ %9355, %9368 ]
  %9375 = phi i32 [ %9366, %9365 ], [ %9372, %9368 ]
  %9376 = zext i32 %9375 to i64
  %9377 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9376
  %9378 = load i8, ptr %9377, align 1, !tbaa !17
  %9379 = icmp eq i8 %9378, 11
  br i1 %9379, label %9399, label %9380

9380:                                             ; preds = %9373
  %9381 = load i64, ptr %9374, align 8
  %9382 = and i64 %9381, 65535
  %9383 = icmp eq i64 %9382, 14
  br i1 %9383, label %9384, label %9386

9384:                                             ; preds = %9380
  %9385 = call i32 @vector_type_mode(ptr noundef nonnull %9374) #24
  br label %9391

9386:                                             ; preds = %9380
  %9387 = getelementptr inbounds %struct.tree_type, ptr %9374, i64 0, i32 6
  %9388 = load i32, ptr %9387, align 4
  %9389 = lshr i32 %9388, 16
  %9390 = and i32 %9389, 255
  br label %9391

9391:                                             ; preds = %9386, %9384
  %9392 = phi i32 [ %9385, %9384 ], [ %9390, %9386 ]
  %9393 = zext i32 %9392 to i64
  %9394 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9393
  %9395 = load i8, ptr %9394, align 1, !tbaa !17
  %9396 = icmp eq i8 %9395, 17
  br i1 %9396, label %9397, label %9617

9397:                                             ; preds = %9391
  %9398 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9399

9399:                                             ; preds = %9397, %9373, %9354, %9335
  %9400 = phi ptr [ %9398, %9397 ], [ %9374, %9373 ], [ %9355, %9354 ], [ %9336, %9335 ]
  %9401 = load i64, ptr %9400, align 8
  %9402 = and i64 %9401, 65535
  %9403 = icmp eq i64 %9402, 14
  br i1 %9403, label %9404, label %9407

9404:                                             ; preds = %9399
  %9405 = call i32 @vector_type_mode(ptr noundef nonnull %9400) #24
  %9406 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9412

9407:                                             ; preds = %9399
  %9408 = getelementptr inbounds %struct.tree_type, ptr %9400, i64 0, i32 6
  %9409 = load i32, ptr %9408, align 4
  %9410 = lshr i32 %9409, 16
  %9411 = and i32 %9410, 255
  br label %9412

9412:                                             ; preds = %9407, %9404
  %9413 = phi ptr [ %9406, %9404 ], [ %9400, %9407 ]
  %9414 = phi i32 [ %9405, %9404 ], [ %9411, %9407 ]
  %9415 = zext i32 %9414 to i64
  %9416 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9415
  %9417 = load i8, ptr %9416, align 1, !tbaa !17
  %9418 = icmp eq i8 %9417, 8
  br i1 %9418, label %9438, label %9419

9419:                                             ; preds = %9412
  %9420 = load i64, ptr %9413, align 8
  %9421 = and i64 %9420, 65535
  %9422 = icmp eq i64 %9421, 14
  br i1 %9422, label %9423, label %9426

9423:                                             ; preds = %9419
  %9424 = call i32 @vector_type_mode(ptr noundef nonnull %9413) #24
  %9425 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9431

9426:                                             ; preds = %9419
  %9427 = getelementptr inbounds %struct.tree_type, ptr %9413, i64 0, i32 6
  %9428 = load i32, ptr %9427, align 4
  %9429 = lshr i32 %9428, 16
  %9430 = and i32 %9429, 255
  br label %9431

9431:                                             ; preds = %9426, %9423
  %9432 = phi ptr [ %9425, %9423 ], [ %9413, %9426 ]
  %9433 = phi i32 [ %9424, %9423 ], [ %9430, %9426 ]
  %9434 = zext i32 %9433 to i64
  %9435 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9434
  %9436 = load i8, ptr %9435, align 1, !tbaa !17
  %9437 = icmp eq i8 %9436, 9
  br i1 %9437, label %9438, label %9450

9438:                                             ; preds = %9431, %9412
  %9439 = phi ptr [ %9432, %9431 ], [ %9413, %9412 ]
  %9440 = load i64, ptr %9439, align 8
  %9441 = and i64 %9440, 65535
  %9442 = icmp eq i64 %9441, 14
  br i1 %9442, label %9443, label %9445

9443:                                             ; preds = %9438
  %9444 = call i32 @vector_type_mode(ptr noundef nonnull %9439) #24
  br label %9467

9445:                                             ; preds = %9438
  %9446 = getelementptr inbounds %struct.tree_type, ptr %9439, i64 0, i32 6
  %9447 = load i32, ptr %9446, align 4
  %9448 = lshr i32 %9447, 16
  %9449 = and i32 %9448, 255
  br label %9467

9450:                                             ; preds = %9431
  %9451 = load i64, ptr %9432, align 8
  %9452 = and i64 %9451, 65535
  %9453 = icmp eq i64 %9452, 14
  br i1 %9453, label %9454, label %9456

9454:                                             ; preds = %9450
  %9455 = call i32 @vector_type_mode(ptr noundef nonnull %9432) #24
  br label %9461

9456:                                             ; preds = %9450
  %9457 = getelementptr inbounds %struct.tree_type, ptr %9432, i64 0, i32 6
  %9458 = load i32, ptr %9457, align 4
  %9459 = lshr i32 %9458, 16
  %9460 = and i32 %9459, 255
  br label %9461

9461:                                             ; preds = %9456, %9454
  %9462 = phi i32 [ %9455, %9454 ], [ %9460, %9456 ]
  %9463 = zext i32 %9462 to i64
  %9464 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9463
  %9465 = load i8, ptr %9464, align 1, !tbaa !17
  %9466 = zext i8 %9465 to i32
  br label %9467

9467:                                             ; preds = %9443, %9445, %9461
  %9468 = phi i32 [ %9466, %9461 ], [ %9444, %9443 ], [ %9449, %9445 ]
  %9469 = zext i32 %9468 to i64
  %9470 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9469
  %9471 = load i8, ptr %9470, align 1, !tbaa !17
  %9472 = icmp eq i8 %9471, 9
  %9473 = load ptr, ptr %9025, align 8, !tbaa !17
  %9474 = load i64, ptr %9473, align 8
  %9475 = and i64 %9474, 65535
  %9476 = icmp eq i64 %9475, 14
  br i1 %9472, label %9477, label %9541

9477:                                             ; preds = %9467
  br i1 %9476, label %9478, label %9481

9478:                                             ; preds = %9477
  %9479 = call i32 @vector_type_mode(ptr noundef nonnull %9473) #24
  %9480 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9486

9481:                                             ; preds = %9477
  %9482 = getelementptr inbounds %struct.tree_type, ptr %9473, i64 0, i32 6
  %9483 = load i32, ptr %9482, align 4
  %9484 = lshr i32 %9483, 16
  %9485 = and i32 %9484, 255
  br label %9486

9486:                                             ; preds = %9481, %9478
  %9487 = phi ptr [ %9480, %9478 ], [ %9473, %9481 ]
  %9488 = phi i32 [ %9479, %9478 ], [ %9485, %9481 ]
  %9489 = zext i32 %9488 to i64
  %9490 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9489
  %9491 = load i8, ptr %9490, align 1, !tbaa !17
  %9492 = icmp eq i8 %9491, 8
  br i1 %9492, label %9512, label %9493

9493:                                             ; preds = %9486
  %9494 = load i64, ptr %9487, align 8
  %9495 = and i64 %9494, 65535
  %9496 = icmp eq i64 %9495, 14
  br i1 %9496, label %9497, label %9500

9497:                                             ; preds = %9493
  %9498 = call i32 @vector_type_mode(ptr noundef nonnull %9487) #24
  %9499 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9505

9500:                                             ; preds = %9493
  %9501 = getelementptr inbounds %struct.tree_type, ptr %9487, i64 0, i32 6
  %9502 = load i32, ptr %9501, align 4
  %9503 = lshr i32 %9502, 16
  %9504 = and i32 %9503, 255
  br label %9505

9505:                                             ; preds = %9500, %9497
  %9506 = phi ptr [ %9499, %9497 ], [ %9487, %9500 ]
  %9507 = phi i32 [ %9498, %9497 ], [ %9504, %9500 ]
  %9508 = zext i32 %9507 to i64
  %9509 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9508
  %9510 = load i8, ptr %9509, align 1, !tbaa !17
  %9511 = icmp eq i8 %9510, 9
  br i1 %9511, label %9512, label %9524

9512:                                             ; preds = %9505, %9486
  %9513 = phi ptr [ %9506, %9505 ], [ %9487, %9486 ]
  %9514 = load i64, ptr %9513, align 8
  %9515 = and i64 %9514, 65535
  %9516 = icmp eq i64 %9515, 14
  br i1 %9516, label %9517, label %9519

9517:                                             ; preds = %9512
  %9518 = call i32 @vector_type_mode(ptr noundef nonnull %9513) #24
  br label %9605

9519:                                             ; preds = %9512
  %9520 = getelementptr inbounds %struct.tree_type, ptr %9513, i64 0, i32 6
  %9521 = load i32, ptr %9520, align 4
  %9522 = lshr i32 %9521, 16
  %9523 = and i32 %9522, 255
  br label %9605

9524:                                             ; preds = %9505
  %9525 = load i64, ptr %9506, align 8
  %9526 = and i64 %9525, 65535
  %9527 = icmp eq i64 %9526, 14
  br i1 %9527, label %9528, label %9530

9528:                                             ; preds = %9524
  %9529 = call i32 @vector_type_mode(ptr noundef nonnull %9506) #24
  br label %9535

9530:                                             ; preds = %9524
  %9531 = getelementptr inbounds %struct.tree_type, ptr %9506, i64 0, i32 6
  %9532 = load i32, ptr %9531, align 4
  %9533 = lshr i32 %9532, 16
  %9534 = and i32 %9533, 255
  br label %9535

9535:                                             ; preds = %9530, %9528
  %9536 = phi i32 [ %9529, %9528 ], [ %9534, %9530 ]
  %9537 = zext i32 %9536 to i64
  %9538 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9537
  %9539 = load i8, ptr %9538, align 1, !tbaa !17
  %9540 = zext i8 %9539 to i32
  br label %9605

9541:                                             ; preds = %9467
  br i1 %9476, label %9542, label %9545

9542:                                             ; preds = %9541
  %9543 = call i32 @vector_type_mode(ptr noundef nonnull %9473) #24
  %9544 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9550

9545:                                             ; preds = %9541
  %9546 = getelementptr inbounds %struct.tree_type, ptr %9473, i64 0, i32 6
  %9547 = load i32, ptr %9546, align 4
  %9548 = lshr i32 %9547, 16
  %9549 = and i32 %9548, 255
  br label %9550

9550:                                             ; preds = %9545, %9542
  %9551 = phi ptr [ %9544, %9542 ], [ %9473, %9545 ]
  %9552 = phi i32 [ %9543, %9542 ], [ %9549, %9545 ]
  %9553 = zext i32 %9552 to i64
  %9554 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9553
  %9555 = load i8, ptr %9554, align 1, !tbaa !17
  %9556 = icmp eq i8 %9555, 8
  br i1 %9556, label %9576, label %9557

9557:                                             ; preds = %9550
  %9558 = load i64, ptr %9551, align 8
  %9559 = and i64 %9558, 65535
  %9560 = icmp eq i64 %9559, 14
  br i1 %9560, label %9561, label %9564

9561:                                             ; preds = %9557
  %9562 = call i32 @vector_type_mode(ptr noundef nonnull %9551) #24
  %9563 = load ptr, ptr %9025, align 8, !tbaa !17
  br label %9569

9564:                                             ; preds = %9557
  %9565 = getelementptr inbounds %struct.tree_type, ptr %9551, i64 0, i32 6
  %9566 = load i32, ptr %9565, align 4
  %9567 = lshr i32 %9566, 16
  %9568 = and i32 %9567, 255
  br label %9569

9569:                                             ; preds = %9564, %9561
  %9570 = phi ptr [ %9563, %9561 ], [ %9551, %9564 ]
  %9571 = phi i32 [ %9562, %9561 ], [ %9568, %9564 ]
  %9572 = zext i32 %9571 to i64
  %9573 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9572
  %9574 = load i8, ptr %9573, align 1, !tbaa !17
  %9575 = icmp eq i8 %9574, 9
  br i1 %9575, label %9576, label %9588

9576:                                             ; preds = %9569, %9550
  %9577 = phi ptr [ %9570, %9569 ], [ %9551, %9550 ]
  %9578 = load i64, ptr %9577, align 8
  %9579 = and i64 %9578, 65535
  %9580 = icmp eq i64 %9579, 14
  br i1 %9580, label %9581, label %9583

9581:                                             ; preds = %9576
  %9582 = call i32 @vector_type_mode(ptr noundef nonnull %9577) #24
  br label %9605

9583:                                             ; preds = %9576
  %9584 = getelementptr inbounds %struct.tree_type, ptr %9577, i64 0, i32 6
  %9585 = load i32, ptr %9584, align 4
  %9586 = lshr i32 %9585, 16
  %9587 = and i32 %9586, 255
  br label %9605

9588:                                             ; preds = %9569
  %9589 = load i64, ptr %9570, align 8
  %9590 = and i64 %9589, 65535
  %9591 = icmp eq i64 %9590, 14
  br i1 %9591, label %9592, label %9594

9592:                                             ; preds = %9588
  %9593 = call i32 @vector_type_mode(ptr noundef nonnull %9570) #24
  br label %9599

9594:                                             ; preds = %9588
  %9595 = getelementptr inbounds %struct.tree_type, ptr %9570, i64 0, i32 6
  %9596 = load i32, ptr %9595, align 4
  %9597 = lshr i32 %9596, 16
  %9598 = and i32 %9597, 255
  br label %9599

9599:                                             ; preds = %9594, %9592
  %9600 = phi i32 [ %9593, %9592 ], [ %9598, %9594 ]
  %9601 = zext i32 %9600 to i64
  %9602 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9601
  %9603 = load i8, ptr %9602, align 1, !tbaa !17
  %9604 = zext i8 %9603 to i32
  br label %9605

9605:                                             ; preds = %9599, %9583, %9581, %9535, %9519, %9517
  %9606 = phi i32 [ %9540, %9535 ], [ %9518, %9517 ], [ %9523, %9519 ], [ %9604, %9599 ], [ %9582, %9581 ], [ %9587, %9583 ]
  %9607 = add i32 %9606, -38
  %9608 = zext i32 %9607 to i64
  %9609 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %9608
  %9610 = load ptr, ptr %9609, align 8, !tbaa !6
  %9611 = getelementptr inbounds %struct.real_format, ptr %9610, i64 0, i32 12
  %9612 = load i8, ptr %9611, align 1, !tbaa !34
  %9613 = icmp eq i8 %9612, 0
  %9614 = load i32, ptr @flag_finite_math_only, align 4
  %9615 = icmp ne i32 %9614, 0
  %9616 = select i1 %9613, i1 true, i1 %9615
  br i1 %9616, label %9617, label %10241

9617:                                             ; preds = %9605, %9391
  %9618 = call i32 @operand_equal_p(ptr noundef nonnull %9022, ptr noundef %9024, i32 noundef 0)
  %9619 = icmp eq i32 %9618, 0
  br i1 %9619, label %10241, label %9620

9620:                                             ; preds = %9617
  %9621 = call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 30) #24
  %9622 = icmp eq ptr %9621, null
  br i1 %9622, label %10241, label %9623

9623:                                             ; preds = %9620
  %9624 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %9621, i32 noundef 1, ptr noundef nonnull %9022) #24
  br label %14075

9625:                                             ; preds = %9011
  %9626 = icmp eq i32 %8958, 231
  %9627 = select i1 %9626, i1 %8986, i1 false
  %9628 = icmp eq i32 %8958, 232
  %9629 = select i1 %9628, i1 %8990, i1 false
  %9630 = select i1 %9627, i1 true, i1 %9629
  %9631 = icmp eq i32 %8958, 236
  %9632 = select i1 %9631, i1 %8994, i1 false
  %9633 = select i1 %9630, i1 true, i1 %9632
  br i1 %9633, label %9634, label %10241

9634:                                             ; preds = %9625
  %9635 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %9636 = load ptr, ptr %9635, align 8, !tbaa !17
  %9637 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %9638 = load ptr, ptr %9637, align 8, !tbaa !17
  %9639 = getelementptr inbounds %struct.tree_common, ptr %9636, i64 0, i32 2
  %9640 = load ptr, ptr %9639, align 8, !tbaa !17
  %9641 = load i64, ptr %9640, align 8
  %9642 = and i64 %9641, 65535
  %9643 = icmp eq i64 %9642, 14
  br i1 %9643, label %9644, label %9647

9644:                                             ; preds = %9634
  %9645 = call i32 @vector_type_mode(ptr noundef nonnull %9640) #24
  %9646 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9652

9647:                                             ; preds = %9634
  %9648 = getelementptr inbounds %struct.tree_type, ptr %9640, i64 0, i32 6
  %9649 = load i32, ptr %9648, align 4
  %9650 = lshr i32 %9649, 16
  %9651 = and i32 %9650, 255
  br label %9652

9652:                                             ; preds = %9647, %9644
  %9653 = phi ptr [ %9646, %9644 ], [ %9640, %9647 ]
  %9654 = phi i32 [ %9645, %9644 ], [ %9651, %9647 ]
  %9655 = zext i32 %9654 to i64
  %9656 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9655
  %9657 = load i8, ptr %9656, align 1, !tbaa !17
  %9658 = icmp eq i8 %9657, 8
  br i1 %9658, label %9716, label %9659

9659:                                             ; preds = %9652
  %9660 = load i64, ptr %9653, align 8
  %9661 = and i64 %9660, 65535
  %9662 = icmp eq i64 %9661, 14
  br i1 %9662, label %9663, label %9666

9663:                                             ; preds = %9659
  %9664 = call i32 @vector_type_mode(ptr noundef nonnull %9653) #24
  %9665 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9671

9666:                                             ; preds = %9659
  %9667 = getelementptr inbounds %struct.tree_type, ptr %9653, i64 0, i32 6
  %9668 = load i32, ptr %9667, align 4
  %9669 = lshr i32 %9668, 16
  %9670 = and i32 %9669, 255
  br label %9671

9671:                                             ; preds = %9666, %9663
  %9672 = phi ptr [ %9665, %9663 ], [ %9653, %9666 ]
  %9673 = phi i32 [ %9664, %9663 ], [ %9670, %9666 ]
  %9674 = zext i32 %9673 to i64
  %9675 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9674
  %9676 = load i8, ptr %9675, align 1, !tbaa !17
  %9677 = icmp eq i8 %9676, 9
  br i1 %9677, label %9716, label %9678

9678:                                             ; preds = %9671
  %9679 = load i64, ptr %9672, align 8
  %9680 = and i64 %9679, 65535
  %9681 = icmp eq i64 %9680, 14
  br i1 %9681, label %9682, label %9685

9682:                                             ; preds = %9678
  %9683 = call i32 @vector_type_mode(ptr noundef nonnull %9672) #24
  %9684 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9690

9685:                                             ; preds = %9678
  %9686 = getelementptr inbounds %struct.tree_type, ptr %9672, i64 0, i32 6
  %9687 = load i32, ptr %9686, align 4
  %9688 = lshr i32 %9687, 16
  %9689 = and i32 %9688, 255
  br label %9690

9690:                                             ; preds = %9685, %9682
  %9691 = phi ptr [ %9684, %9682 ], [ %9672, %9685 ]
  %9692 = phi i32 [ %9683, %9682 ], [ %9689, %9685 ]
  %9693 = zext i32 %9692 to i64
  %9694 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9693
  %9695 = load i8, ptr %9694, align 1, !tbaa !17
  %9696 = icmp eq i8 %9695, 11
  br i1 %9696, label %9716, label %9697

9697:                                             ; preds = %9690
  %9698 = load i64, ptr %9691, align 8
  %9699 = and i64 %9698, 65535
  %9700 = icmp eq i64 %9699, 14
  br i1 %9700, label %9701, label %9704

9701:                                             ; preds = %9697
  %9702 = call i32 @vector_type_mode(ptr noundef nonnull %9691) #24
  %9703 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9709

9704:                                             ; preds = %9697
  %9705 = getelementptr inbounds %struct.tree_type, ptr %9691, i64 0, i32 6
  %9706 = load i32, ptr %9705, align 4
  %9707 = lshr i32 %9706, 16
  %9708 = and i32 %9707, 255
  br label %9709

9709:                                             ; preds = %9704, %9701
  %9710 = phi ptr [ %9703, %9701 ], [ %9691, %9704 ]
  %9711 = phi i32 [ %9702, %9701 ], [ %9708, %9704 ]
  %9712 = zext i32 %9711 to i64
  %9713 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9712
  %9714 = load i8, ptr %9713, align 1, !tbaa !17
  %9715 = icmp eq i8 %9714, 17
  br i1 %9715, label %9716, label %9936

9716:                                             ; preds = %9709, %9690, %9671, %9652
  %9717 = phi ptr [ %9691, %9690 ], [ %9672, %9671 ], [ %9653, %9652 ], [ %9710, %9709 ]
  %9718 = load i64, ptr %9717, align 8
  %9719 = and i64 %9718, 65535
  %9720 = icmp eq i64 %9719, 14
  br i1 %9720, label %9721, label %9724

9721:                                             ; preds = %9716
  %9722 = call i32 @vector_type_mode(ptr noundef nonnull %9717) #24
  %9723 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9729

9724:                                             ; preds = %9716
  %9725 = getelementptr inbounds %struct.tree_type, ptr %9717, i64 0, i32 6
  %9726 = load i32, ptr %9725, align 4
  %9727 = lshr i32 %9726, 16
  %9728 = and i32 %9727, 255
  br label %9729

9729:                                             ; preds = %9724, %9721
  %9730 = phi ptr [ %9723, %9721 ], [ %9717, %9724 ]
  %9731 = phi i32 [ %9722, %9721 ], [ %9728, %9724 ]
  %9732 = zext i32 %9731 to i64
  %9733 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9732
  %9734 = load i8, ptr %9733, align 1, !tbaa !17
  %9735 = icmp eq i8 %9734, 8
  br i1 %9735, label %9755, label %9736

9736:                                             ; preds = %9729
  %9737 = load i64, ptr %9730, align 8
  %9738 = and i64 %9737, 65535
  %9739 = icmp eq i64 %9738, 14
  br i1 %9739, label %9740, label %9743

9740:                                             ; preds = %9736
  %9741 = call i32 @vector_type_mode(ptr noundef nonnull %9730) #24
  %9742 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9748

9743:                                             ; preds = %9736
  %9744 = getelementptr inbounds %struct.tree_type, ptr %9730, i64 0, i32 6
  %9745 = load i32, ptr %9744, align 4
  %9746 = lshr i32 %9745, 16
  %9747 = and i32 %9746, 255
  br label %9748

9748:                                             ; preds = %9743, %9740
  %9749 = phi ptr [ %9742, %9740 ], [ %9730, %9743 ]
  %9750 = phi i32 [ %9741, %9740 ], [ %9747, %9743 ]
  %9751 = zext i32 %9750 to i64
  %9752 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9751
  %9753 = load i8, ptr %9752, align 1, !tbaa !17
  %9754 = icmp eq i8 %9753, 9
  br i1 %9754, label %9755, label %9767

9755:                                             ; preds = %9748, %9729
  %9756 = phi ptr [ %9749, %9748 ], [ %9730, %9729 ]
  %9757 = load i64, ptr %9756, align 8
  %9758 = and i64 %9757, 65535
  %9759 = icmp eq i64 %9758, 14
  br i1 %9759, label %9760, label %9762

9760:                                             ; preds = %9755
  %9761 = call i32 @vector_type_mode(ptr noundef nonnull %9756) #24
  br label %9784

9762:                                             ; preds = %9755
  %9763 = getelementptr inbounds %struct.tree_type, ptr %9756, i64 0, i32 6
  %9764 = load i32, ptr %9763, align 4
  %9765 = lshr i32 %9764, 16
  %9766 = and i32 %9765, 255
  br label %9784

9767:                                             ; preds = %9748
  %9768 = load i64, ptr %9749, align 8
  %9769 = and i64 %9768, 65535
  %9770 = icmp eq i64 %9769, 14
  br i1 %9770, label %9771, label %9773

9771:                                             ; preds = %9767
  %9772 = call i32 @vector_type_mode(ptr noundef nonnull %9749) #24
  br label %9778

9773:                                             ; preds = %9767
  %9774 = getelementptr inbounds %struct.tree_type, ptr %9749, i64 0, i32 6
  %9775 = load i32, ptr %9774, align 4
  %9776 = lshr i32 %9775, 16
  %9777 = and i32 %9776, 255
  br label %9778

9778:                                             ; preds = %9773, %9771
  %9779 = phi i32 [ %9772, %9771 ], [ %9777, %9773 ]
  %9780 = zext i32 %9779 to i64
  %9781 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9780
  %9782 = load i8, ptr %9781, align 1, !tbaa !17
  %9783 = zext i8 %9782 to i32
  br label %9784

9784:                                             ; preds = %9760, %9762, %9778
  %9785 = phi i32 [ %9783, %9778 ], [ %9761, %9760 ], [ %9766, %9762 ]
  %9786 = zext i32 %9785 to i64
  %9787 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9786
  %9788 = load i8, ptr %9787, align 1, !tbaa !17
  %9789 = icmp eq i8 %9788, 9
  %9790 = load ptr, ptr %9639, align 8, !tbaa !17
  %9791 = load i64, ptr %9790, align 8
  %9792 = and i64 %9791, 65535
  %9793 = icmp eq i64 %9792, 14
  br i1 %9789, label %9794, label %9858

9794:                                             ; preds = %9784
  br i1 %9793, label %9795, label %9798

9795:                                             ; preds = %9794
  %9796 = call i32 @vector_type_mode(ptr noundef nonnull %9790) #24
  %9797 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9803

9798:                                             ; preds = %9794
  %9799 = getelementptr inbounds %struct.tree_type, ptr %9790, i64 0, i32 6
  %9800 = load i32, ptr %9799, align 4
  %9801 = lshr i32 %9800, 16
  %9802 = and i32 %9801, 255
  br label %9803

9803:                                             ; preds = %9798, %9795
  %9804 = phi ptr [ %9797, %9795 ], [ %9790, %9798 ]
  %9805 = phi i32 [ %9796, %9795 ], [ %9802, %9798 ]
  %9806 = zext i32 %9805 to i64
  %9807 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9806
  %9808 = load i8, ptr %9807, align 1, !tbaa !17
  %9809 = icmp eq i8 %9808, 8
  br i1 %9809, label %9829, label %9810

9810:                                             ; preds = %9803
  %9811 = load i64, ptr %9804, align 8
  %9812 = and i64 %9811, 65535
  %9813 = icmp eq i64 %9812, 14
  br i1 %9813, label %9814, label %9817

9814:                                             ; preds = %9810
  %9815 = call i32 @vector_type_mode(ptr noundef nonnull %9804) #24
  %9816 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9822

9817:                                             ; preds = %9810
  %9818 = getelementptr inbounds %struct.tree_type, ptr %9804, i64 0, i32 6
  %9819 = load i32, ptr %9818, align 4
  %9820 = lshr i32 %9819, 16
  %9821 = and i32 %9820, 255
  br label %9822

9822:                                             ; preds = %9817, %9814
  %9823 = phi ptr [ %9816, %9814 ], [ %9804, %9817 ]
  %9824 = phi i32 [ %9815, %9814 ], [ %9821, %9817 ]
  %9825 = zext i32 %9824 to i64
  %9826 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9825
  %9827 = load i8, ptr %9826, align 1, !tbaa !17
  %9828 = icmp eq i8 %9827, 9
  br i1 %9828, label %9829, label %9841

9829:                                             ; preds = %9822, %9803
  %9830 = phi ptr [ %9823, %9822 ], [ %9804, %9803 ]
  %9831 = load i64, ptr %9830, align 8
  %9832 = and i64 %9831, 65535
  %9833 = icmp eq i64 %9832, 14
  br i1 %9833, label %9834, label %9836

9834:                                             ; preds = %9829
  %9835 = call i32 @vector_type_mode(ptr noundef nonnull %9830) #24
  br label %9922

9836:                                             ; preds = %9829
  %9837 = getelementptr inbounds %struct.tree_type, ptr %9830, i64 0, i32 6
  %9838 = load i32, ptr %9837, align 4
  %9839 = lshr i32 %9838, 16
  %9840 = and i32 %9839, 255
  br label %9922

9841:                                             ; preds = %9822
  %9842 = load i64, ptr %9823, align 8
  %9843 = and i64 %9842, 65535
  %9844 = icmp eq i64 %9843, 14
  br i1 %9844, label %9845, label %9847

9845:                                             ; preds = %9841
  %9846 = call i32 @vector_type_mode(ptr noundef nonnull %9823) #24
  br label %9852

9847:                                             ; preds = %9841
  %9848 = getelementptr inbounds %struct.tree_type, ptr %9823, i64 0, i32 6
  %9849 = load i32, ptr %9848, align 4
  %9850 = lshr i32 %9849, 16
  %9851 = and i32 %9850, 255
  br label %9852

9852:                                             ; preds = %9847, %9845
  %9853 = phi i32 [ %9846, %9845 ], [ %9851, %9847 ]
  %9854 = zext i32 %9853 to i64
  %9855 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9854
  %9856 = load i8, ptr %9855, align 1, !tbaa !17
  %9857 = zext i8 %9856 to i32
  br label %9922

9858:                                             ; preds = %9784
  br i1 %9793, label %9859, label %9862

9859:                                             ; preds = %9858
  %9860 = call i32 @vector_type_mode(ptr noundef nonnull %9790) #24
  %9861 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9867

9862:                                             ; preds = %9858
  %9863 = getelementptr inbounds %struct.tree_type, ptr %9790, i64 0, i32 6
  %9864 = load i32, ptr %9863, align 4
  %9865 = lshr i32 %9864, 16
  %9866 = and i32 %9865, 255
  br label %9867

9867:                                             ; preds = %9862, %9859
  %9868 = phi ptr [ %9861, %9859 ], [ %9790, %9862 ]
  %9869 = phi i32 [ %9860, %9859 ], [ %9866, %9862 ]
  %9870 = zext i32 %9869 to i64
  %9871 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9870
  %9872 = load i8, ptr %9871, align 1, !tbaa !17
  %9873 = icmp eq i8 %9872, 8
  br i1 %9873, label %9893, label %9874

9874:                                             ; preds = %9867
  %9875 = load i64, ptr %9868, align 8
  %9876 = and i64 %9875, 65535
  %9877 = icmp eq i64 %9876, 14
  br i1 %9877, label %9878, label %9881

9878:                                             ; preds = %9874
  %9879 = call i32 @vector_type_mode(ptr noundef nonnull %9868) #24
  %9880 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9886

9881:                                             ; preds = %9874
  %9882 = getelementptr inbounds %struct.tree_type, ptr %9868, i64 0, i32 6
  %9883 = load i32, ptr %9882, align 4
  %9884 = lshr i32 %9883, 16
  %9885 = and i32 %9884, 255
  br label %9886

9886:                                             ; preds = %9881, %9878
  %9887 = phi ptr [ %9880, %9878 ], [ %9868, %9881 ]
  %9888 = phi i32 [ %9879, %9878 ], [ %9885, %9881 ]
  %9889 = zext i32 %9888 to i64
  %9890 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9889
  %9891 = load i8, ptr %9890, align 1, !tbaa !17
  %9892 = icmp eq i8 %9891, 9
  br i1 %9892, label %9893, label %9905

9893:                                             ; preds = %9886, %9867
  %9894 = phi ptr [ %9887, %9886 ], [ %9868, %9867 ]
  %9895 = load i64, ptr %9894, align 8
  %9896 = and i64 %9895, 65535
  %9897 = icmp eq i64 %9896, 14
  br i1 %9897, label %9898, label %9900

9898:                                             ; preds = %9893
  %9899 = call i32 @vector_type_mode(ptr noundef nonnull %9894) #24
  br label %9922

9900:                                             ; preds = %9893
  %9901 = getelementptr inbounds %struct.tree_type, ptr %9894, i64 0, i32 6
  %9902 = load i32, ptr %9901, align 4
  %9903 = lshr i32 %9902, 16
  %9904 = and i32 %9903, 255
  br label %9922

9905:                                             ; preds = %9886
  %9906 = load i64, ptr %9887, align 8
  %9907 = and i64 %9906, 65535
  %9908 = icmp eq i64 %9907, 14
  br i1 %9908, label %9909, label %9911

9909:                                             ; preds = %9905
  %9910 = call i32 @vector_type_mode(ptr noundef nonnull %9887) #24
  br label %9916

9911:                                             ; preds = %9905
  %9912 = getelementptr inbounds %struct.tree_type, ptr %9887, i64 0, i32 6
  %9913 = load i32, ptr %9912, align 4
  %9914 = lshr i32 %9913, 16
  %9915 = and i32 %9914, 255
  br label %9916

9916:                                             ; preds = %9911, %9909
  %9917 = phi i32 [ %9910, %9909 ], [ %9915, %9911 ]
  %9918 = zext i32 %9917 to i64
  %9919 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %9918
  %9920 = load i8, ptr %9919, align 1, !tbaa !17
  %9921 = zext i8 %9920 to i32
  br label %9922

9922:                                             ; preds = %9916, %9900, %9898, %9852, %9836, %9834
  %9923 = phi i32 [ %9857, %9852 ], [ %9835, %9834 ], [ %9840, %9836 ], [ %9921, %9916 ], [ %9899, %9898 ], [ %9904, %9900 ]
  %9924 = add i32 %9923, -38
  %9925 = zext i32 %9924 to i64
  %9926 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %9925
  %9927 = load ptr, ptr %9926, align 8, !tbaa !6
  %9928 = getelementptr inbounds %struct.real_format, ptr %9927, i64 0, i32 11
  %9929 = load i8, ptr %9928, align 2, !tbaa !36
  %9930 = icmp eq i8 %9929, 0
  %9931 = load i32, ptr @flag_finite_math_only, align 4
  %9932 = icmp ne i32 %9931, 0
  %9933 = select i1 %9930, i1 true, i1 %9932
  br i1 %9933, label %9934, label %10241

9934:                                             ; preds = %9922
  %9935 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9936

9936:                                             ; preds = %9934, %9709
  %9937 = phi ptr [ %9935, %9934 ], [ %9710, %9709 ]
  %9938 = load i64, ptr %9937, align 8
  %9939 = and i64 %9938, 65535
  %9940 = icmp eq i64 %9939, 14
  br i1 %9940, label %9941, label %9944

9941:                                             ; preds = %9936
  %9942 = call i32 @vector_type_mode(ptr noundef nonnull %9937) #24
  %9943 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9949

9944:                                             ; preds = %9936
  %9945 = getelementptr inbounds %struct.tree_type, ptr %9937, i64 0, i32 6
  %9946 = load i32, ptr %9945, align 4
  %9947 = lshr i32 %9946, 16
  %9948 = and i32 %9947, 255
  br label %9949

9949:                                             ; preds = %9944, %9941
  %9950 = phi ptr [ %9943, %9941 ], [ %9937, %9944 ]
  %9951 = phi i32 [ %9942, %9941 ], [ %9948, %9944 ]
  %9952 = zext i32 %9951 to i64
  %9953 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9952
  %9954 = load i8, ptr %9953, align 1, !tbaa !17
  %9955 = icmp eq i8 %9954, 8
  br i1 %9955, label %10013, label %9956

9956:                                             ; preds = %9949
  %9957 = load i64, ptr %9950, align 8
  %9958 = and i64 %9957, 65535
  %9959 = icmp eq i64 %9958, 14
  br i1 %9959, label %9960, label %9963

9960:                                             ; preds = %9956
  %9961 = call i32 @vector_type_mode(ptr noundef nonnull %9950) #24
  %9962 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9968

9963:                                             ; preds = %9956
  %9964 = getelementptr inbounds %struct.tree_type, ptr %9950, i64 0, i32 6
  %9965 = load i32, ptr %9964, align 4
  %9966 = lshr i32 %9965, 16
  %9967 = and i32 %9966, 255
  br label %9968

9968:                                             ; preds = %9963, %9960
  %9969 = phi ptr [ %9962, %9960 ], [ %9950, %9963 ]
  %9970 = phi i32 [ %9961, %9960 ], [ %9967, %9963 ]
  %9971 = zext i32 %9970 to i64
  %9972 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9971
  %9973 = load i8, ptr %9972, align 1, !tbaa !17
  %9974 = icmp eq i8 %9973, 9
  br i1 %9974, label %10013, label %9975

9975:                                             ; preds = %9968
  %9976 = load i64, ptr %9969, align 8
  %9977 = and i64 %9976, 65535
  %9978 = icmp eq i64 %9977, 14
  br i1 %9978, label %9979, label %9982

9979:                                             ; preds = %9975
  %9980 = call i32 @vector_type_mode(ptr noundef nonnull %9969) #24
  %9981 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %9987

9982:                                             ; preds = %9975
  %9983 = getelementptr inbounds %struct.tree_type, ptr %9969, i64 0, i32 6
  %9984 = load i32, ptr %9983, align 4
  %9985 = lshr i32 %9984, 16
  %9986 = and i32 %9985, 255
  br label %9987

9987:                                             ; preds = %9982, %9979
  %9988 = phi ptr [ %9981, %9979 ], [ %9969, %9982 ]
  %9989 = phi i32 [ %9980, %9979 ], [ %9986, %9982 ]
  %9990 = zext i32 %9989 to i64
  %9991 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %9990
  %9992 = load i8, ptr %9991, align 1, !tbaa !17
  %9993 = icmp eq i8 %9992, 11
  br i1 %9993, label %10013, label %9994

9994:                                             ; preds = %9987
  %9995 = load i64, ptr %9988, align 8
  %9996 = and i64 %9995, 65535
  %9997 = icmp eq i64 %9996, 14
  br i1 %9997, label %9998, label %10000

9998:                                             ; preds = %9994
  %9999 = call i32 @vector_type_mode(ptr noundef nonnull %9988) #24
  br label %10005

10000:                                            ; preds = %9994
  %10001 = getelementptr inbounds %struct.tree_type, ptr %9988, i64 0, i32 6
  %10002 = load i32, ptr %10001, align 4
  %10003 = lshr i32 %10002, 16
  %10004 = and i32 %10003, 255
  br label %10005

10005:                                            ; preds = %10000, %9998
  %10006 = phi i32 [ %9999, %9998 ], [ %10004, %10000 ]
  %10007 = zext i32 %10006 to i64
  %10008 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10007
  %10009 = load i8, ptr %10008, align 1, !tbaa !17
  %10010 = icmp eq i8 %10009, 17
  br i1 %10010, label %10011, label %10231

10011:                                            ; preds = %10005
  %10012 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10013

10013:                                            ; preds = %10011, %9987, %9968, %9949
  %10014 = phi ptr [ %10012, %10011 ], [ %9988, %9987 ], [ %9969, %9968 ], [ %9950, %9949 ]
  %10015 = load i64, ptr %10014, align 8
  %10016 = and i64 %10015, 65535
  %10017 = icmp eq i64 %10016, 14
  br i1 %10017, label %10018, label %10021

10018:                                            ; preds = %10013
  %10019 = call i32 @vector_type_mode(ptr noundef nonnull %10014) #24
  %10020 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10026

10021:                                            ; preds = %10013
  %10022 = getelementptr inbounds %struct.tree_type, ptr %10014, i64 0, i32 6
  %10023 = load i32, ptr %10022, align 4
  %10024 = lshr i32 %10023, 16
  %10025 = and i32 %10024, 255
  br label %10026

10026:                                            ; preds = %10021, %10018
  %10027 = phi ptr [ %10020, %10018 ], [ %10014, %10021 ]
  %10028 = phi i32 [ %10019, %10018 ], [ %10025, %10021 ]
  %10029 = zext i32 %10028 to i64
  %10030 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10029
  %10031 = load i8, ptr %10030, align 1, !tbaa !17
  %10032 = icmp eq i8 %10031, 8
  br i1 %10032, label %10052, label %10033

10033:                                            ; preds = %10026
  %10034 = load i64, ptr %10027, align 8
  %10035 = and i64 %10034, 65535
  %10036 = icmp eq i64 %10035, 14
  br i1 %10036, label %10037, label %10040

10037:                                            ; preds = %10033
  %10038 = call i32 @vector_type_mode(ptr noundef nonnull %10027) #24
  %10039 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10045

10040:                                            ; preds = %10033
  %10041 = getelementptr inbounds %struct.tree_type, ptr %10027, i64 0, i32 6
  %10042 = load i32, ptr %10041, align 4
  %10043 = lshr i32 %10042, 16
  %10044 = and i32 %10043, 255
  br label %10045

10045:                                            ; preds = %10040, %10037
  %10046 = phi ptr [ %10039, %10037 ], [ %10027, %10040 ]
  %10047 = phi i32 [ %10038, %10037 ], [ %10044, %10040 ]
  %10048 = zext i32 %10047 to i64
  %10049 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10048
  %10050 = load i8, ptr %10049, align 1, !tbaa !17
  %10051 = icmp eq i8 %10050, 9
  br i1 %10051, label %10052, label %10064

10052:                                            ; preds = %10045, %10026
  %10053 = phi ptr [ %10046, %10045 ], [ %10027, %10026 ]
  %10054 = load i64, ptr %10053, align 8
  %10055 = and i64 %10054, 65535
  %10056 = icmp eq i64 %10055, 14
  br i1 %10056, label %10057, label %10059

10057:                                            ; preds = %10052
  %10058 = call i32 @vector_type_mode(ptr noundef nonnull %10053) #24
  br label %10081

10059:                                            ; preds = %10052
  %10060 = getelementptr inbounds %struct.tree_type, ptr %10053, i64 0, i32 6
  %10061 = load i32, ptr %10060, align 4
  %10062 = lshr i32 %10061, 16
  %10063 = and i32 %10062, 255
  br label %10081

10064:                                            ; preds = %10045
  %10065 = load i64, ptr %10046, align 8
  %10066 = and i64 %10065, 65535
  %10067 = icmp eq i64 %10066, 14
  br i1 %10067, label %10068, label %10070

10068:                                            ; preds = %10064
  %10069 = call i32 @vector_type_mode(ptr noundef nonnull %10046) #24
  br label %10075

10070:                                            ; preds = %10064
  %10071 = getelementptr inbounds %struct.tree_type, ptr %10046, i64 0, i32 6
  %10072 = load i32, ptr %10071, align 4
  %10073 = lshr i32 %10072, 16
  %10074 = and i32 %10073, 255
  br label %10075

10075:                                            ; preds = %10070, %10068
  %10076 = phi i32 [ %10069, %10068 ], [ %10074, %10070 ]
  %10077 = zext i32 %10076 to i64
  %10078 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %10077
  %10079 = load i8, ptr %10078, align 1, !tbaa !17
  %10080 = zext i8 %10079 to i32
  br label %10081

10081:                                            ; preds = %10057, %10059, %10075
  %10082 = phi i32 [ %10080, %10075 ], [ %10058, %10057 ], [ %10063, %10059 ]
  %10083 = zext i32 %10082 to i64
  %10084 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10083
  %10085 = load i8, ptr %10084, align 1, !tbaa !17
  %10086 = icmp eq i8 %10085, 9
  %10087 = load ptr, ptr %9639, align 8, !tbaa !17
  %10088 = load i64, ptr %10087, align 8
  %10089 = and i64 %10088, 65535
  %10090 = icmp eq i64 %10089, 14
  br i1 %10086, label %10091, label %10155

10091:                                            ; preds = %10081
  br i1 %10090, label %10092, label %10095

10092:                                            ; preds = %10091
  %10093 = call i32 @vector_type_mode(ptr noundef nonnull %10087) #24
  %10094 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10100

10095:                                            ; preds = %10091
  %10096 = getelementptr inbounds %struct.tree_type, ptr %10087, i64 0, i32 6
  %10097 = load i32, ptr %10096, align 4
  %10098 = lshr i32 %10097, 16
  %10099 = and i32 %10098, 255
  br label %10100

10100:                                            ; preds = %10095, %10092
  %10101 = phi ptr [ %10094, %10092 ], [ %10087, %10095 ]
  %10102 = phi i32 [ %10093, %10092 ], [ %10099, %10095 ]
  %10103 = zext i32 %10102 to i64
  %10104 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10103
  %10105 = load i8, ptr %10104, align 1, !tbaa !17
  %10106 = icmp eq i8 %10105, 8
  br i1 %10106, label %10126, label %10107

10107:                                            ; preds = %10100
  %10108 = load i64, ptr %10101, align 8
  %10109 = and i64 %10108, 65535
  %10110 = icmp eq i64 %10109, 14
  br i1 %10110, label %10111, label %10114

10111:                                            ; preds = %10107
  %10112 = call i32 @vector_type_mode(ptr noundef nonnull %10101) #24
  %10113 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10119

10114:                                            ; preds = %10107
  %10115 = getelementptr inbounds %struct.tree_type, ptr %10101, i64 0, i32 6
  %10116 = load i32, ptr %10115, align 4
  %10117 = lshr i32 %10116, 16
  %10118 = and i32 %10117, 255
  br label %10119

10119:                                            ; preds = %10114, %10111
  %10120 = phi ptr [ %10113, %10111 ], [ %10101, %10114 ]
  %10121 = phi i32 [ %10112, %10111 ], [ %10118, %10114 ]
  %10122 = zext i32 %10121 to i64
  %10123 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10122
  %10124 = load i8, ptr %10123, align 1, !tbaa !17
  %10125 = icmp eq i8 %10124, 9
  br i1 %10125, label %10126, label %10138

10126:                                            ; preds = %10119, %10100
  %10127 = phi ptr [ %10120, %10119 ], [ %10101, %10100 ]
  %10128 = load i64, ptr %10127, align 8
  %10129 = and i64 %10128, 65535
  %10130 = icmp eq i64 %10129, 14
  br i1 %10130, label %10131, label %10133

10131:                                            ; preds = %10126
  %10132 = call i32 @vector_type_mode(ptr noundef nonnull %10127) #24
  br label %10219

10133:                                            ; preds = %10126
  %10134 = getelementptr inbounds %struct.tree_type, ptr %10127, i64 0, i32 6
  %10135 = load i32, ptr %10134, align 4
  %10136 = lshr i32 %10135, 16
  %10137 = and i32 %10136, 255
  br label %10219

10138:                                            ; preds = %10119
  %10139 = load i64, ptr %10120, align 8
  %10140 = and i64 %10139, 65535
  %10141 = icmp eq i64 %10140, 14
  br i1 %10141, label %10142, label %10144

10142:                                            ; preds = %10138
  %10143 = call i32 @vector_type_mode(ptr noundef nonnull %10120) #24
  br label %10149

10144:                                            ; preds = %10138
  %10145 = getelementptr inbounds %struct.tree_type, ptr %10120, i64 0, i32 6
  %10146 = load i32, ptr %10145, align 4
  %10147 = lshr i32 %10146, 16
  %10148 = and i32 %10147, 255
  br label %10149

10149:                                            ; preds = %10144, %10142
  %10150 = phi i32 [ %10143, %10142 ], [ %10148, %10144 ]
  %10151 = zext i32 %10150 to i64
  %10152 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %10151
  %10153 = load i8, ptr %10152, align 1, !tbaa !17
  %10154 = zext i8 %10153 to i32
  br label %10219

10155:                                            ; preds = %10081
  br i1 %10090, label %10156, label %10159

10156:                                            ; preds = %10155
  %10157 = call i32 @vector_type_mode(ptr noundef nonnull %10087) #24
  %10158 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10164

10159:                                            ; preds = %10155
  %10160 = getelementptr inbounds %struct.tree_type, ptr %10087, i64 0, i32 6
  %10161 = load i32, ptr %10160, align 4
  %10162 = lshr i32 %10161, 16
  %10163 = and i32 %10162, 255
  br label %10164

10164:                                            ; preds = %10159, %10156
  %10165 = phi ptr [ %10158, %10156 ], [ %10087, %10159 ]
  %10166 = phi i32 [ %10157, %10156 ], [ %10163, %10159 ]
  %10167 = zext i32 %10166 to i64
  %10168 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10167
  %10169 = load i8, ptr %10168, align 1, !tbaa !17
  %10170 = icmp eq i8 %10169, 8
  br i1 %10170, label %10190, label %10171

10171:                                            ; preds = %10164
  %10172 = load i64, ptr %10165, align 8
  %10173 = and i64 %10172, 65535
  %10174 = icmp eq i64 %10173, 14
  br i1 %10174, label %10175, label %10178

10175:                                            ; preds = %10171
  %10176 = call i32 @vector_type_mode(ptr noundef nonnull %10165) #24
  %10177 = load ptr, ptr %9639, align 8, !tbaa !17
  br label %10183

10178:                                            ; preds = %10171
  %10179 = getelementptr inbounds %struct.tree_type, ptr %10165, i64 0, i32 6
  %10180 = load i32, ptr %10179, align 4
  %10181 = lshr i32 %10180, 16
  %10182 = and i32 %10181, 255
  br label %10183

10183:                                            ; preds = %10178, %10175
  %10184 = phi ptr [ %10177, %10175 ], [ %10165, %10178 ]
  %10185 = phi i32 [ %10176, %10175 ], [ %10182, %10178 ]
  %10186 = zext i32 %10185 to i64
  %10187 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %10186
  %10188 = load i8, ptr %10187, align 1, !tbaa !17
  %10189 = icmp eq i8 %10188, 9
  br i1 %10189, label %10190, label %10202

10190:                                            ; preds = %10183, %10164
  %10191 = phi ptr [ %10184, %10183 ], [ %10165, %10164 ]
  %10192 = load i64, ptr %10191, align 8
  %10193 = and i64 %10192, 65535
  %10194 = icmp eq i64 %10193, 14
  br i1 %10194, label %10195, label %10197

10195:                                            ; preds = %10190
  %10196 = call i32 @vector_type_mode(ptr noundef nonnull %10191) #24
  br label %10219

10197:                                            ; preds = %10190
  %10198 = getelementptr inbounds %struct.tree_type, ptr %10191, i64 0, i32 6
  %10199 = load i32, ptr %10198, align 4
  %10200 = lshr i32 %10199, 16
  %10201 = and i32 %10200, 255
  br label %10219

10202:                                            ; preds = %10183
  %10203 = load i64, ptr %10184, align 8
  %10204 = and i64 %10203, 65535
  %10205 = icmp eq i64 %10204, 14
  br i1 %10205, label %10206, label %10208

10206:                                            ; preds = %10202
  %10207 = call i32 @vector_type_mode(ptr noundef nonnull %10184) #24
  br label %10213

10208:                                            ; preds = %10202
  %10209 = getelementptr inbounds %struct.tree_type, ptr %10184, i64 0, i32 6
  %10210 = load i32, ptr %10209, align 4
  %10211 = lshr i32 %10210, 16
  %10212 = and i32 %10211, 255
  br label %10213

10213:                                            ; preds = %10208, %10206
  %10214 = phi i32 [ %10207, %10206 ], [ %10212, %10208 ]
  %10215 = zext i32 %10214 to i64
  %10216 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %10215
  %10217 = load i8, ptr %10216, align 1, !tbaa !17
  %10218 = zext i8 %10217 to i32
  br label %10219

10219:                                            ; preds = %10213, %10197, %10195, %10149, %10133, %10131
  %10220 = phi i32 [ %10154, %10149 ], [ %10132, %10131 ], [ %10137, %10133 ], [ %10218, %10213 ], [ %10196, %10195 ], [ %10201, %10197 ]
  %10221 = add i32 %10220, -38
  %10222 = zext i32 %10221 to i64
  %10223 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %10222
  %10224 = load ptr, ptr %10223, align 8, !tbaa !6
  %10225 = getelementptr inbounds %struct.real_format, ptr %10224, i64 0, i32 12
  %10226 = load i8, ptr %10225, align 1, !tbaa !34
  %10227 = icmp eq i8 %10226, 0
  %10228 = load i32, ptr @flag_finite_math_only, align 4
  %10229 = icmp ne i32 %10228, 0
  %10230 = select i1 %10227, i1 true, i1 %10229
  br i1 %10230, label %10231, label %10241

10231:                                            ; preds = %10219, %10005
  %10232 = call i32 @operand_equal_p(ptr noundef nonnull %9636, ptr noundef %9638, i32 noundef 0)
  %10233 = icmp eq i32 %10232, 0
  br i1 %10233, label %10241, label %10234

10234:                                            ; preds = %10231
  %10235 = call ptr @mathfn_built_in(ptr noundef %2, i32 noundef 30) #24
  %10236 = icmp eq ptr %10235, null
  br i1 %10236, label %10241, label %10237

10237:                                            ; preds = %10234
  %10238 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef nonnull %10235, i32 noundef 1, ptr noundef nonnull %9636) #24
  %10239 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst1) #24
  %10240 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %10239, ptr noundef %10238)
  br label %14075

10241:                                            ; preds = %9625, %10234, %10231, %9922, %10219, %9620, %9617, %9308, %9605, %9003, %8978, %8971, %8996
  switch i32 %8958, label %10263 [
    i32 188, label %10242
    i32 184, label %10242
    i32 180, label %10242
  ]

10242:                                            ; preds = %10241, %10241, %10241
  %10243 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 1
  %10244 = load ptr, ptr %10243, align 8, !tbaa !17
  %10245 = load i64, ptr %10244, align 8
  %10246 = and i64 %10245, 134283263
  %10247 = icmp eq i64 %10246, 24
  br i1 %10247, label %10248, label %10263

10248:                                            ; preds = %10242
  %10249 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %10250 = load ptr, ptr %10249, align 8, !tbaa !17
  %10251 = call i32 @operand_equal_p(ptr noundef %45, ptr noundef %10250, i32 noundef 0)
  %10252 = icmp eq i32 %10251, 0
  br i1 %10252, label %10263, label %10253

10253:                                            ; preds = %10248
  %10254 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10255 = load ptr, ptr %10254, align 8, !tbaa !17
  %10256 = getelementptr inbounds %struct.tree_exp, ptr %10255, i64 0, i32 3
  %10257 = load ptr, ptr %10256, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %18) #24
  %10258 = getelementptr inbounds %struct.tree_real_cst, ptr %10244, i64 0, i32 1
  %10259 = load ptr, ptr %10258, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %18, ptr noundef nonnull align 8 dereferenceable(32) %10259, i64 32, i1 false), !tbaa.struct !29
  %10260 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %18, i32 noundef 64, ptr noundef nonnull %18, ptr noundef nonnull @dconst1) #24
  %10261 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 %18) #24
  %10262 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %10257, i32 noundef 2, ptr noundef %45, ptr noundef %10261) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %18) #24
  br label %14075

10263:                                            ; preds = %10242, %10248, %10241
  switch i32 %8959, label %14075 [
    i32 230, label %10264
    i32 229, label %10264
    i32 228, label %10264
    i32 23, label %10264
    i32 22, label %10264
    i32 21, label %10264
    i32 183, label %10283
    i32 182, label %10283
    i32 181, label %10283
    i32 53, label %10283
    i32 52, label %10283
    i32 51, label %10283
    i32 50, label %10283
    i32 49, label %10283
    i32 48, label %10283
    i32 47, label %10283
    i32 46, label %10283
    i32 45, label %10283
    i32 188, label %10294
    i32 184, label %10294
    i32 180, label %10294
  ]

10264:                                            ; preds = %10263, %10263, %10263, %10263, %10263, %10263
  %10265 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %10266 = load ptr, ptr %10265, align 8, !tbaa !17
  %10267 = load i64, ptr %10266, align 8
  %10268 = and i64 %10267, 65535
  %10269 = icmp eq i64 %10268, 75
  br i1 %10269, label %10270, label %10282

10270:                                            ; preds = %10264
  %10271 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %10272 = load ptr, ptr %10271, align 8, !tbaa !17
  %10273 = getelementptr inbounds %struct.tree_exp, ptr %10272, i64 0, i32 3
  %10274 = load ptr, ptr %10273, align 8, !tbaa !17
  %10275 = getelementptr inbounds %struct.tree_exp, ptr %10266, i64 0, i32 3
  %10276 = load ptr, ptr %10275, align 8, !tbaa !17
  %10277 = getelementptr inbounds %struct.tree_exp, ptr %10266, i64 1
  %10278 = load ptr, ptr %10277, align 8, !tbaa !17
  %10279 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 75, ptr noundef %2, ptr noundef %10278, ptr noundef %10276)
  %10280 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %10274, i32 noundef 1, ptr noundef %10279) #24
  %10281 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %10280)
  br label %14075

10282:                                            ; preds = %10264
  switch i32 %8959, label %14075 [
    i32 183, label %10283
    i32 182, label %10283
    i32 181, label %10283
    i32 53, label %10283
    i32 52, label %10283
    i32 51, label %10283
    i32 50, label %10283
    i32 49, label %10283
    i32 48, label %10283
    i32 47, label %10283
    i32 46, label %10283
    i32 45, label %10283
    i32 188, label %10294
    i32 184, label %10294
    i32 180, label %10294
  ]

10283:                                            ; preds = %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10263, %10282, %10282, %10282, %10282, %10282, %10282, %10282, %10282, %10282, %10282, %10282, %10282
  %10284 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %10285 = load ptr, ptr %10284, align 8, !tbaa !17
  %10286 = getelementptr inbounds %struct.tree_exp, ptr %10285, i64 0, i32 3
  %10287 = load ptr, ptr %10286, align 8, !tbaa !17
  %10288 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %10289 = load ptr, ptr %10288, align 8, !tbaa !17
  %10290 = call fastcc ptr @negate_expr(ptr noundef %10289)
  %10291 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10290)
  %10292 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %10287, i32 noundef 1, ptr noundef %10291) #24
  %10293 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %46, ptr noundef %10292)
  br label %14075

10294:                                            ; preds = %10263, %10263, %10263, %10282, %10282, %10282
  %10295 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %10296 = load ptr, ptr %10295, align 8, !tbaa !17
  %10297 = getelementptr inbounds %struct.tree_exp, ptr %10296, i64 0, i32 3
  %10298 = load ptr, ptr %10297, align 8, !tbaa !17
  %10299 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 0, i32 2
  %10300 = load ptr, ptr %10299, align 8, !tbaa !17
  %10301 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1, i32 1
  %10302 = load ptr, ptr %10301, align 8, !tbaa !17
  %10303 = call fastcc ptr @negate_expr(ptr noundef %10302)
  %10304 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10303)
  %10305 = call ptr (i32, ptr, i32, ...) @build_call_expr_loc(i32 noundef %0, ptr noundef %10298, i32 noundef 2, ptr noundef %10300, ptr noundef %10304) #24
  %10306 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %46, ptr noundef %10305)
  br label %14075

10307:                                            ; preds = %305, %305
  store i8 0, ptr %6, align 1, !tbaa !17
  %10308 = load i64, ptr %45, align 8
  %10309 = and i64 %10308, 65535
  %10310 = icmp eq i64 %10309, 83
  br i1 %10310, label %10311, label %10343

10311:                                            ; preds = %10307
  %10312 = load i64, ptr %2, align 8
  %10313 = and i64 %10312, 2097152
  %10314 = icmp eq i64 %10313, 0
  br i1 %10314, label %10315, label %10318

10315:                                            ; preds = %10311
  %10316 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %10317 = icmp eq i8 %10316, 0
  br i1 %10317, label %10343, label %10318

10318:                                            ; preds = %10315, %10311
  %10319 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %10320 = load ptr, ptr %10319, align 8, !tbaa !17
  %10321 = tail call i32 @integer_pow2p(ptr noundef %10320) #24
  %10322 = icmp eq i32 %10321, 0
  br i1 %10322, label %10343, label %10323

10323:                                            ; preds = %10318
  %10324 = tail call i32 @tree_int_cst_sgn(ptr noundef %10320) #24
  %10325 = icmp sgt i32 %10324, 0
  br i1 %10325, label %10326, label %10343

10326:                                            ; preds = %10323
  %10327 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %10328 = load ptr, ptr %10327, align 8, !tbaa !17
  %10329 = getelementptr inbounds %struct.tree_int_cst, ptr %10320, i64 0, i32 1
  %10330 = load i64, ptr %10329, align 8, !tbaa !17
  %10331 = tail call i32 @exact_log2(i64 noundef %10330) #24
  %10332 = sext i32 %10331 to i64
  %10333 = load i8, ptr %6, align 1, !tbaa !17
  %10334 = icmp eq i8 %10333, 0
  br i1 %10334, label %10336, label %10335

10335:                                            ; preds = %10326
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.5, i32 noundef 4)
  br label %10336

10336:                                            ; preds = %10326, %10335
  %10337 = getelementptr inbounds %struct.tree_common, ptr %10328, i64 0, i32 2
  %10338 = load ptr, ptr %10337, align 8, !tbaa !17
  %10339 = tail call ptr @build_int_cst(ptr noundef null, i64 noundef %10332) #24
  %10340 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 63, ptr noundef %10338, ptr noundef %10328, ptr noundef %10339)
  %10341 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %10342 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 84, ptr noundef nonnull %2, ptr noundef %10341, ptr noundef %10340)
  br label %14075

10343:                                            ; preds = %10318, %10323, %10315, %10307
  %10344 = load i64, ptr %2, align 8
  %10345 = trunc i64 %10344 to i32
  %10346 = and i32 %10345, 65535
  %10347 = add nsw i32 %10346, -6
  %10348 = icmp ult i32 %10347, 3
  br i1 %10348, label %10349, label %10356

10349:                                            ; preds = %10343
  %10350 = and i64 %10344, 2097152
  %10351 = icmp ne i64 %10350, 0
  %10352 = icmp eq i32 %1, 69
  %10353 = and i1 %10352, %10351
  br i1 %10353, label %10354, label %10356

10354:                                            ; preds = %10349
  %10355 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 67, ptr noundef nonnull %2, ptr noundef %3, ptr noundef %4)
  br label %14075

10356:                                            ; preds = %10343, %10349, %305, %305, %305
  %10357 = tail call i32 @integer_onep(ptr noundef %45) #24
  %10358 = icmp eq i32 %10357, 0
  br i1 %10358, label %10362, label %10359

10359:                                            ; preds = %10356
  %10360 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %10361 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %10360)
  br label %14075

10362:                                            ; preds = %10356
  %10363 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %10364 = icmp eq i32 %10363, 0
  br i1 %10364, label %10365, label %14075

10365:                                            ; preds = %10362
  %10366 = load i64, ptr %2, align 8
  %10367 = and i64 %10366, 2097152
  %10368 = icmp eq i64 %10367, 0
  br i1 %10368, label %10369, label %10384

10369:                                            ; preds = %10365
  %10370 = load i64, ptr %45, align 8
  %10371 = and i64 %10370, 65535
  %10372 = icmp eq i64 %10371, 23
  br i1 %10372, label %10373, label %10384

10373:                                            ; preds = %10369
  %10374 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %10375 = load i64, ptr %10374, align 8, !tbaa !17
  %10376 = icmp eq i64 %10375, -1
  br i1 %10376, label %10377, label %10384

10377:                                            ; preds = %10373
  %10378 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %10379 = load i64, ptr %10378, align 8, !tbaa !17
  %10380 = icmp eq i64 %10379, -1
  br i1 %10380, label %10381, label %10384

10381:                                            ; preds = %10377
  %10382 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %10383 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10382)
  br label %14075

10384:                                            ; preds = %10377, %10373, %10369, %10365
  %10385 = trunc i64 %10366 to i32
  %10386 = and i32 %10385, 65535
  %10387 = add nsw i32 %10386, -6
  %10388 = icmp ult i32 %10387, 3
  br i1 %10388, label %10389, label %10399

10389:                                            ; preds = %10384
  %10390 = load i32, ptr @flag_wrapv, align 4
  %10391 = icmp eq i32 %10390, 0
  %10392 = select i1 %10368, i1 %10391, i1 false
  %10393 = load i32, ptr @flag_trapv, align 4
  %10394 = icmp eq i32 %10393, 0
  %10395 = select i1 %10392, i1 %10394, i1 false
  %10396 = load i32, ptr @flag_strict_overflow, align 4
  %10397 = icmp ne i32 %10396, 0
  %10398 = select i1 %10395, i1 %10397, i1 false
  br i1 %10398, label %10399, label %10429

10399:                                            ; preds = %10384, %10389
  %10400 = load i64, ptr %46, align 8
  %10401 = and i64 %10400, 65535
  %10402 = icmp eq i64 %10401, 79
  br i1 %10402, label %10403, label %10420

10403:                                            ; preds = %10399
  %10404 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef %45)
  %10405 = icmp eq i8 %10404, 0
  %10406 = load i64, ptr %2, align 8
  %10407 = trunc i64 %10406 to i32
  %10408 = and i32 %10407, 65535
  %10409 = add nsw i32 %10408, -6
  br i1 %10405, label %10420, label %10410

10410:                                            ; preds = %10403
  %10411 = icmp ult i32 %10409, 3
  br i1 %10411, label %10412, label %10413

10412:                                            ; preds = %10410
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.6, i32 noundef 4)
  br label %10413

10413:                                            ; preds = %10410, %10412
  %10414 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10415 = load ptr, ptr %10414, align 8, !tbaa !17
  %10416 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10415)
  %10417 = tail call fastcc ptr @negate_expr(ptr noundef %45)
  %10418 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10417)
  %10419 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %10416, ptr noundef %10418)
  br label %14075

10420:                                            ; preds = %10403, %10399
  %10421 = phi i32 [ %10387, %10399 ], [ %10409, %10403 ]
  %10422 = phi i64 [ %10366, %10399 ], [ %10406, %10403 ]
  %10423 = icmp ult i32 %10421, 3
  br i1 %10423, label %10424, label %10441

10424:                                            ; preds = %10420
  %10425 = load i32, ptr @flag_wrapv, align 4
  %10426 = load i32, ptr @flag_trapv, align 4
  %10427 = load i32, ptr @flag_strict_overflow, align 4
  %10428 = and i64 %10422, 2097152
  br label %10429

10429:                                            ; preds = %10424, %10389
  %10430 = phi i64 [ %10428, %10424 ], [ %10367, %10389 ]
  %10431 = phi i32 [ %10427, %10424 ], [ %10396, %10389 ]
  %10432 = phi i32 [ %10426, %10424 ], [ %10393, %10389 ]
  %10433 = phi i32 [ %10425, %10424 ], [ %10390, %10389 ]
  %10434 = icmp eq i64 %10430, 0
  %10435 = icmp eq i32 %10433, 0
  %10436 = select i1 %10434, i1 %10435, i1 false
  %10437 = icmp eq i32 %10432, 0
  %10438 = select i1 %10436, i1 %10437, i1 false
  %10439 = icmp ne i32 %10431, 0
  %10440 = select i1 %10438, i1 %10439, i1 false
  br i1 %10440, label %10441, label %10462

10441:                                            ; preds = %10420, %10429
  %10442 = load i64, ptr %45, align 8
  %10443 = and i64 %10442, 65535
  %10444 = icmp eq i64 %10443, 79
  br i1 %10444, label %10445, label %10462

10445:                                            ; preds = %10441
  %10446 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %46)
  %10447 = icmp eq i8 %10446, 0
  br i1 %10447, label %10462, label %10448

10448:                                            ; preds = %10445
  %10449 = load i64, ptr %2, align 8
  %10450 = trunc i64 %10449 to i32
  %10451 = and i32 %10450, 65535
  %10452 = add nsw i32 %10451, -6
  %10453 = icmp ult i32 %10452, 3
  br i1 %10453, label %10454, label %10455

10454:                                            ; preds = %10448
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.6, i32 noundef 4)
  br label %10455

10455:                                            ; preds = %10448, %10454
  %10456 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %46)
  %10457 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10456)
  %10458 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %10459 = load ptr, ptr %10458, align 8, !tbaa !17
  %10460 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10459)
  %10461 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %10457, ptr noundef %10460)
  br label %14075

10462:                                            ; preds = %10445, %10441, %10429
  %10463 = icmp eq i32 %35, 68
  br i1 %10463, label %10464, label %10469

10464:                                            ; preds = %10462
  %10465 = tail call i32 @multiple_of_p(ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %45)
  %10466 = icmp eq i32 %10465, 0
  br i1 %10466, label %10469, label %10467

10467:                                            ; preds = %10464
  %10468 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 76, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10469:                                            ; preds = %10462, %10464
  store i8 0, ptr %6, align 1, !tbaa !17
  %10470 = load i64, ptr %45, align 8
  %10471 = and i64 %10470, 65535
  %10472 = icmp eq i64 %10471, 23
  br i1 %10472, label %10473, label %14075

10473:                                            ; preds = %10469
  %10474 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10475 = icmp sgt i32 %10474, 3
  br i1 %10475, label %14075, label %10476

10476:                                            ; preds = %10473
  %10477 = add nsw i32 %10474, 1
  store i32 %10477, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10478 = call fastcc ptr @extract_muldiv_1(ptr noundef %3, ptr noundef nonnull %45, i32 noundef %1, ptr noundef null, ptr noundef nonnull %6)
  %10479 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10480 = add nsw i32 %10479, -1
  store i32 %10480, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10481 = icmp eq ptr %10478, null
  br i1 %10481, label %14075, label %10482

10482:                                            ; preds = %10476
  %10483 = load i8, ptr %6, align 1, !tbaa !17
  %10484 = icmp eq i8 %10483, 0
  br i1 %10484, label %10486, label %10485

10485:                                            ; preds = %10482
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.7, i32 noundef 4)
  br label %10486

10486:                                            ; preds = %10485, %10482
  %10487 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %10478)
  br label %14075

10488:                                            ; preds = %305, %305, %305, %305
  %10489 = tail call i32 @integer_onep(ptr noundef %45) #24
  %10490 = icmp eq i32 %10489, 0
  br i1 %10490, label %10494, label %10491

10491:                                            ; preds = %10488
  %10492 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %10493 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10492, ptr noundef nonnull %46)
  br label %14075

10494:                                            ; preds = %10488
  %10495 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %10496 = icmp eq i32 %10495, 0
  br i1 %10496, label %10497, label %14075

10497:                                            ; preds = %10494
  %10498 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %10499 = icmp eq i32 %10498, 0
  br i1 %10499, label %10503, label %10500

10500:                                            ; preds = %10497
  %10501 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %10502 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10501, ptr noundef %45)
  br label %14075

10503:                                            ; preds = %10497
  %10504 = load i64, ptr %2, align 8
  %10505 = and i64 %10504, 2097152
  %10506 = icmp eq i64 %10505, 0
  br i1 %10506, label %10507, label %10522

10507:                                            ; preds = %10503
  %10508 = load i64, ptr %45, align 8
  %10509 = and i64 %10508, 65535
  %10510 = icmp eq i64 %10509, 23
  br i1 %10510, label %10511, label %10522

10511:                                            ; preds = %10507
  %10512 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %10513 = load i64, ptr %10512, align 8, !tbaa !17
  %10514 = icmp eq i64 %10513, -1
  br i1 %10514, label %10515, label %10522

10515:                                            ; preds = %10511
  %10516 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %10517 = load i64, ptr %10516, align 8, !tbaa !17
  %10518 = icmp eq i64 %10517, -1
  br i1 %10518, label %10519, label %10522

10519:                                            ; preds = %10515
  %10520 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %10521 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10520, ptr noundef nonnull %46)
  br label %14075

10522:                                            ; preds = %10515, %10511, %10507, %10503
  store i8 0, ptr %6, align 1, !tbaa !17
  %10523 = icmp eq i32 %1, 71
  switch i32 %1, label %10589 [
    i32 73, label %10524
    i32 71, label %10524
  ]

10524:                                            ; preds = %10522, %10522
  br i1 %10506, label %10525, label %10528

10525:                                            ; preds = %10524
  %10526 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %10527 = icmp eq i8 %10526, 0
  br i1 %10527, label %10554, label %10528

10528:                                            ; preds = %10525, %10524
  %10529 = load i64, ptr %45, align 8
  %10530 = and i64 %10529, 65535
  %10531 = icmp eq i64 %10530, 83
  br i1 %10531, label %10532, label %10535

10532:                                            ; preds = %10528
  %10533 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %10534 = load ptr, ptr %10533, align 8, !tbaa !17
  br label %10535

10535:                                            ; preds = %10532, %10528
  %10536 = phi ptr [ %10534, %10532 ], [ %45, %10528 ]
  %10537 = tail call i32 @integer_pow2p(ptr noundef %10536) #24
  %10538 = icmp eq i32 %10537, 0
  br i1 %10538, label %10554, label %10539

10539:                                            ; preds = %10535
  %10540 = tail call i32 @tree_int_cst_sgn(ptr noundef %10536) #24
  %10541 = icmp sgt i32 %10540, 0
  br i1 %10541, label %10542, label %10554

10542:                                            ; preds = %10539
  %10543 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %10544 = load ptr, ptr %10543, align 8, !tbaa !17
  %10545 = tail call ptr @build_int_cst(ptr noundef %10544, i64 noundef 1) #24
  %10546 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 64, ptr noundef %10544, ptr noundef nonnull %45, ptr noundef %10545)
  %10547 = load i8, ptr %6, align 1, !tbaa !17
  %10548 = icmp eq i8 %10547, 0
  br i1 %10548, label %10550, label %10549

10549:                                            ; preds = %10542
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.8, i32 noundef 4)
  br label %10550

10550:                                            ; preds = %10542, %10549
  %10551 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %10552 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10546)
  %10553 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %2, ptr noundef %10551, ptr noundef %10552)
  br label %14075

10554:                                            ; preds = %10535, %10539, %10525
  br i1 %10523, label %10555, label %10589

10555:                                            ; preds = %10554
  %10556 = load i64, ptr %2, align 8
  %10557 = and i64 %10556, 2097152
  %10558 = icmp eq i64 %10557, 0
  br i1 %10558, label %10559, label %10589

10559:                                            ; preds = %10555
  %10560 = load i64, ptr %45, align 8
  %10561 = and i64 %10560, 134283263
  %10562 = icmp eq i64 %10561, 23
  %10563 = load i32, ptr @flag_trapv, align 4
  br i1 %10562, label %10564, label %10578

10564:                                            ; preds = %10559
  %10565 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %10566 = load i64, ptr %10565, align 8, !tbaa !17
  %10567 = icmp slt i64 %10566, 0
  %10568 = icmp eq i32 %10563, 0
  %10569 = select i1 %10567, i1 %10568, i1 false
  br i1 %10569, label %10570, label %10578

10570:                                            ; preds = %10564
  %10571 = tail call fastcc ptr @sign_bit_p(ptr noundef nonnull %45, ptr noundef nonnull %45)
  %10572 = icmp eq ptr %10571, null
  br i1 %10572, label %10573, label %10578

10573:                                            ; preds = %10570
  %10574 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %10575 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %10576 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10575)
  %10577 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 71, ptr noundef nonnull %2, ptr noundef %10574, ptr noundef %10576)
  br label %14075

10578:                                            ; preds = %10559, %10564, %10570
  %10579 = and i64 %10560, 65535
  %10580 = icmp eq i64 %10579, 79
  %10581 = icmp eq i32 %10563, 0
  %10582 = select i1 %10580, i1 %10581, i1 false
  br i1 %10582, label %10583, label %10589

10583:                                            ; preds = %10578
  %10584 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46)
  %10585 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %10586 = load ptr, ptr %10585, align 8, !tbaa !17
  %10587 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10586)
  %10588 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 71, ptr noundef nonnull %2, ptr noundef %10584, ptr noundef %10587)
  br label %14075

10589:                                            ; preds = %10522, %10555, %10554, %10578
  %10590 = load i64, ptr %45, align 8
  %10591 = and i64 %10590, 65535
  %10592 = icmp eq i64 %10591, 23
  br i1 %10592, label %10593, label %14075

10593:                                            ; preds = %10589
  %10594 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10595 = icmp sgt i32 %10594, 3
  br i1 %10595, label %14075, label %10596

10596:                                            ; preds = %10593
  %10597 = add nsw i32 %10594, 1
  store i32 %10597, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10598 = call fastcc ptr @extract_muldiv_1(ptr noundef %3, ptr noundef nonnull %45, i32 noundef %1, ptr noundef null, ptr noundef nonnull %6)
  %10599 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10600 = add nsw i32 %10599, -1
  store i32 %10600, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %10601 = icmp eq ptr %10598, null
  br i1 %10601, label %14075, label %10602

10602:                                            ; preds = %10596
  %10603 = load i8, ptr %6, align 1, !tbaa !17
  %10604 = icmp eq i8 %10603, 0
  br i1 %10604, label %10606, label %10605

10605:                                            ; preds = %10602
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.9, i32 noundef 4)
  br label %10606

10606:                                            ; preds = %10605, %10602
  %10607 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %10598)
  br label %14075

10608:                                            ; preds = %305, %305
  %10609 = tail call i32 @integer_all_onesp(ptr noundef nonnull %46) #24
  %10610 = icmp eq i32 %10609, 0
  br i1 %10610, label %10625, label %10611

10611:                                            ; preds = %10608
  %10612 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10613:                                            ; preds = %305
  %10614 = tail call i32 @integer_all_onesp(ptr noundef nonnull %46) #24
  %10615 = icmp eq i32 %10614, 0
  br i1 %10615, label %10625, label %10616

10616:                                            ; preds = %10613
  %10617 = load i64, ptr %2, align 8
  %10618 = and i64 %10617, 2097152
  %10619 = icmp eq i64 %10618, 0
  br i1 %10619, label %10620, label %10625

10620:                                            ; preds = %10616
  %10621 = tail call zeroext i8 @tree_expr_nonnegative_p(ptr noundef %45)
  %10622 = icmp eq i8 %10621, 0
  br i1 %10622, label %10625, label %10623

10623:                                            ; preds = %10620
  %10624 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10625:                                            ; preds = %305, %10620, %10616, %10613, %10608
  %10626 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %10627 = icmp eq i32 %10626, 0
  br i1 %10627, label %10631, label %10628

10628:                                            ; preds = %10625
  %10629 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %10630 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %10629)
  br label %14075

10631:                                            ; preds = %10625
  %10632 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %10633 = icmp eq i32 %10632, 0
  br i1 %10633, label %10636, label %10634

10634:                                            ; preds = %10631
  %10635 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10636:                                            ; preds = %10631
  %10637 = load i64, ptr %45, align 8
  %10638 = and i64 %10637, 65535
  %10639 = icmp eq i64 %10638, 23
  br i1 %10639, label %10640, label %10643

10640:                                            ; preds = %10636
  %10641 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %45) #24
  %10642 = icmp slt i32 %10641, 0
  br i1 %10642, label %14075, label %10643

10643:                                            ; preds = %10640, %10636
  %10644 = load i64, ptr %3, align 8
  %10645 = trunc i64 %10644 to i32
  %10646 = and i32 %10645, 65535
  %10647 = icmp eq i32 %10646, %1
  br i1 %10647, label %10648, label %10700

10648:                                            ; preds = %10643
  %10649 = tail call i32 @host_integerp(ptr noundef nonnull %45, i32 noundef 0) #24
  %10650 = icmp eq i32 %10649, 0
  br i1 %10650, label %10700, label %10651

10651:                                            ; preds = %10648
  %10652 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %10653 = load i64, ptr %10652, align 8, !tbaa !17
  %10654 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %10655 = load i32, ptr %10654, align 4
  %10656 = and i32 %10655, 1023
  %10657 = zext i32 %10656 to i64
  %10658 = icmp ult i64 %10653, %10657
  br i1 %10658, label %10659, label %10700

10659:                                            ; preds = %10651
  %10660 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10661 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10662 = load ptr, ptr %10661, align 8, !tbaa !17
  %10663 = tail call i32 @host_integerp(ptr noundef %10662, i32 noundef 0) #24
  %10664 = icmp eq i32 %10663, 0
  br i1 %10664, label %10700, label %10665

10665:                                            ; preds = %10659
  %10666 = load ptr, ptr %10661, align 8, !tbaa !17
  %10667 = getelementptr inbounds %struct.tree_int_cst, ptr %10666, i64 0, i32 1
  %10668 = load i64, ptr %10667, align 8, !tbaa !17
  %10669 = load i32, ptr %10654, align 4
  %10670 = and i32 %10669, 1023
  %10671 = zext i32 %10670 to i64
  %10672 = icmp ult i64 %10668, %10671
  br i1 %10672, label %10673, label %10700

10673:                                            ; preds = %10665
  %10674 = load i64, ptr %10652, align 8, !tbaa !17
  %10675 = add i64 %10674, %10668
  %10676 = icmp slt i64 %10675, %10671
  br i1 %10676, label %10695, label %10677

10677:                                            ; preds = %10673
  %10678 = add nsw i32 %1, -85
  %10679 = icmp ult i32 %10678, 2
  br i1 %10679, label %10680, label %10682

10680:                                            ; preds = %10677
  %10681 = urem i64 %10675, %10671
  br label %10695

10682:                                            ; preds = %10677
  %10683 = load i64, ptr %2, align 8
  %10684 = and i64 %10683, 2097152
  %10685 = icmp ne i64 %10684, 0
  %10686 = icmp eq i32 %1, 83
  %10687 = or i1 %10686, %10685
  br i1 %10687, label %10688, label %10692

10688:                                            ; preds = %10682
  %10689 = tail call ptr @build_int_cst(ptr noundef nonnull %2, i64 noundef 0) #24
  %10690 = load ptr, ptr %10660, align 8, !tbaa !17
  %10691 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10689, ptr noundef %10690)
  br label %14075

10692:                                            ; preds = %10682
  %10693 = add nsw i32 %10670, -1
  %10694 = sext i32 %10693 to i64
  br label %10695

10695:                                            ; preds = %10680, %10692, %10673
  %10696 = phi i64 [ %10681, %10680 ], [ %10694, %10692 ], [ %10675, %10673 ]
  %10697 = load ptr, ptr %10660, align 8, !tbaa !17
  %10698 = tail call ptr @build_int_cst(ptr noundef nonnull %2, i64 noundef %10696) #24
  %10699 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %2, ptr noundef %10697, ptr noundef %10698)
  br label %14075

10700:                                            ; preds = %10665, %10659, %10651, %10648, %10643
  %10701 = icmp eq i32 %1, 83
  br i1 %10701, label %10702, label %10706

10702:                                            ; preds = %10700
  %10703 = load i64, ptr %46, align 8
  %10704 = and i64 %10703, 65535
  %10705 = icmp eq i64 %10704, 84
  br i1 %10705, label %10716, label %10819

10706:                                            ; preds = %10700
  %10707 = load i64, ptr %2, align 8
  %10708 = and i64 %10707, 2097152
  %10709 = icmp ne i64 %10708, 0
  %10710 = icmp eq i32 %1, 84
  %10711 = and i1 %10710, %10709
  br i1 %10711, label %10712, label %10750

10712:                                            ; preds = %10706
  %10713 = load i64, ptr %46, align 8
  %10714 = and i64 %10713, 65535
  %10715 = icmp eq i64 %10714, 83
  br i1 %10715, label %10716, label %10819

10716:                                            ; preds = %10712, %10702
  %10717 = tail call i32 @host_integerp(ptr noundef nonnull %45, i32 noundef 0) #24
  %10718 = icmp eq i32 %10717, 0
  br i1 %10718, label %10819, label %10719

10719:                                            ; preds = %10716
  %10720 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %10721 = load i64, ptr %10720, align 8, !tbaa !17
  %10722 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %10723 = load i32, ptr %10722, align 4
  %10724 = and i32 %10723, 1023
  %10725 = zext i32 %10724 to i64
  %10726 = icmp ult i64 %10721, %10725
  br i1 %10726, label %10727, label %10819

10727:                                            ; preds = %10719
  %10728 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10729 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10730 = load ptr, ptr %10729, align 8, !tbaa !17
  %10731 = tail call i32 @host_integerp(ptr noundef %10730, i32 noundef 0) #24
  %10732 = icmp eq i32 %10731, 0
  br i1 %10732, label %10819, label %10733

10733:                                            ; preds = %10727
  %10734 = load ptr, ptr %10729, align 8, !tbaa !17
  %10735 = getelementptr inbounds %struct.tree_int_cst, ptr %10734, i64 0, i32 1
  %10736 = load i64, ptr %10735, align 8, !tbaa !17
  %10737 = load i32, ptr %10722, align 4
  %10738 = and i32 %10737, 1023
  %10739 = zext i32 %10738 to i64
  %10740 = icmp ult i64 %10736, %10739
  br i1 %10740, label %10741, label %10819

10741:                                            ; preds = %10733
  %10742 = load i64, ptr %10720, align 8, !tbaa !17
  %10743 = icmp eq i64 %10736, %10742
  br i1 %10743, label %10744, label %10819

10744:                                            ; preds = %10741
  %10745 = load ptr, ptr %10728, align 8, !tbaa !17
  %10746 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %10745)
  %10747 = tail call ptr @build_int_cst(ptr noundef nonnull %2, i64 noundef -1) #24
  %10748 = tail call ptr @int_const_binop(i32 noundef %1, ptr noundef %10747, ptr noundef nonnull %45, i32 noundef 0)
  %10749 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %2, ptr noundef %10746, ptr noundef %10748)
  br label %14075

10750:                                            ; preds = %10706
  switch i32 %1, label %10819 [
    i32 85, label %10751
    i32 86, label %10765
  ]

10751:                                            ; preds = %10750
  %10752 = load i64, ptr %45, align 8
  %10753 = and i64 %10752, 65535
  %10754 = icmp eq i64 %10753, 23
  br i1 %10754, label %10755, label %10842

10755:                                            ; preds = %10751
  %10756 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %10757 = load ptr, ptr %10756, align 8, !tbaa !17
  %10758 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %10759 = load i32, ptr %10758, align 4
  %10760 = and i32 %10759, 1023
  %10761 = zext i32 %10760 to i64
  %10762 = tail call ptr @build_int_cst(ptr noundef %10757, i64 noundef %10761) #24
  %10763 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef %10762, ptr noundef nonnull %45)
  %10764 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 86, ptr noundef nonnull %2, ptr noundef nonnull %3, ptr noundef %10763)
  br label %14075

10765:                                            ; preds = %10750
  %10766 = load i64, ptr %45, align 8
  %10767 = and i64 %10766, 65535
  %10768 = icmp eq i64 %10767, 23
  br i1 %10768, label %10769, label %10842

10769:                                            ; preds = %10765
  %10770 = load i64, ptr %46, align 8
  %10771 = trunc i64 %10770 to i32
  %10772 = and i32 %10771, 65535
  %10773 = add nsw i32 %10772, -87
  %10774 = icmp ult i32 %10773, 3
  br i1 %10774, label %10775, label %10788

10775:                                            ; preds = %10769
  %10776 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10777 = load ptr, ptr %10776, align 8, !tbaa !17
  %10778 = load i64, ptr %10777, align 8
  %10779 = and i64 %10778, 65535
  %10780 = icmp eq i64 %10779, 23
  br i1 %10780, label %10781, label %10788

10781:                                            ; preds = %10775
  %10782 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10783 = load ptr, ptr %10782, align 8, !tbaa !17
  %10784 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 86, ptr noundef nonnull %2, ptr noundef %10783, ptr noundef nonnull %45)
  %10785 = load ptr, ptr %10776, align 8, !tbaa !17
  %10786 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 86, ptr noundef nonnull %2, ptr noundef %10785, ptr noundef nonnull %45)
  %10787 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %10772, ptr noundef nonnull %2, ptr noundef %10784, ptr noundef %10786)
  br label %14075

10788:                                            ; preds = %10775, %10769
  %10789 = and i64 %10770, 65535
  %10790 = icmp eq i64 %10789, 86
  br i1 %10790, label %10791, label %10842

10791:                                            ; preds = %10788
  %10792 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10793 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10794 = load ptr, ptr %10793, align 8, !tbaa !17
  %10795 = load i64, ptr %10794, align 8
  %10796 = and i64 %10795, 65535
  %10797 = icmp eq i64 %10796, 23
  br i1 %10797, label %10798, label %10842

10798:                                            ; preds = %10791
  %10799 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %10800 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %10801 = load i64, ptr %10800, align 8, !tbaa !17
  %10802 = icmp eq i64 %10801, 0
  br i1 %10802, label %10803, label %10842

10803:                                            ; preds = %10798
  %10804 = getelementptr inbounds %struct.tree_int_cst, ptr %10794, i64 0, i32 1, i32 1
  %10805 = load i64, ptr %10804, align 8, !tbaa !17
  %10806 = icmp eq i64 %10805, 0
  br i1 %10806, label %10807, label %10842

10807:                                            ; preds = %10803
  %10808 = getelementptr inbounds %struct.tree_int_cst, ptr %10794, i64 0, i32 1
  %10809 = load i64, ptr %10799, align 8, !tbaa !17
  %10810 = load i64, ptr %10808, align 8, !tbaa !17
  %10811 = add i64 %10810, %10809
  %10812 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %10813 = load i32, ptr %10812, align 4
  %10814 = and i32 %10813, 1023
  %10815 = zext i32 %10814 to i64
  %10816 = icmp eq i64 %10811, %10815
  br i1 %10816, label %10817, label %10842

10817:                                            ; preds = %10807
  %10818 = load ptr, ptr %10792, align 8, !tbaa !17
  br label %14075

10819:                                            ; preds = %10750, %10741, %10733, %10727, %10719, %10716, %10712, %10702
  %10820 = load i64, ptr %46, align 8
  %10821 = and i64 %10820, 65535
  %10822 = icmp eq i64 %10821, 89
  br i1 %10822, label %10823, label %10842

10823:                                            ; preds = %10819
  %10824 = load i64, ptr %45, align 8
  %10825 = and i64 %10824, 65535
  %10826 = icmp eq i64 %10825, 23
  br i1 %10826, label %10827, label %10842

10827:                                            ; preds = %10823
  %10828 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10829 = load ptr, ptr %10828, align 8, !tbaa !17
  %10830 = load i64, ptr %10829, align 8
  %10831 = and i64 %10830, 65535
  %10832 = icmp eq i64 %10831, 23
  br i1 %10832, label %10833, label %10842

10833:                                            ; preds = %10827
  %10834 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10835 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %10829)
  %10836 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %10835, ptr noundef nonnull %45)
  %10837 = load ptr, ptr %10834, align 8, !tbaa !17
  %10838 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10837)
  %10839 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %10838, ptr noundef nonnull %45)
  %10840 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %10839, ptr noundef %10836)
  %10841 = icmp eq ptr %10840, null
  br i1 %10841, label %10842, label %14075

10842:                                            ; preds = %10751, %10788, %10791, %10798, %10803, %10807, %10765, %10833, %10827, %10823, %10819
  br label %14075

10843:                                            ; preds = %305
  %10844 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %10845 = icmp eq i32 %10844, 0
  br i1 %10845, label %10848, label %10846

10846:                                            ; preds = %10843
  %10847 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10848:                                            ; preds = %10843
  %10849 = load i64, ptr %2, align 8
  %10850 = trunc i64 %10849 to i32
  %10851 = and i32 %10850, 65535
  %10852 = add nsw i32 %10851, -6
  %10853 = icmp ult i32 %10852, 3
  br i1 %10853, label %10854, label %10861

10854:                                            ; preds = %10848
  %10855 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 13
  %10856 = load ptr, ptr %10855, align 8, !tbaa !17
  %10857 = tail call i32 @operand_equal_p(ptr noundef %45, ptr noundef %10856, i32 noundef 1)
  %10858 = icmp eq i32 %10857, 0
  br i1 %10858, label %10861, label %10859

10859:                                            ; preds = %10854
  %10860 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %45, ptr noundef nonnull %46)
  br label %14075

10861:                                            ; preds = %10848, %10854
  %10862 = tail call fastcc ptr @fold_minmax(i32 noundef %0, i32 noundef 80, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %45)
  %10863 = icmp eq ptr %10862, null
  br i1 %10863, label %1572, label %14075

10864:                                            ; preds = %305
  %10865 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %10866 = icmp eq i32 %10865, 0
  br i1 %10866, label %10869, label %10867

10867:                                            ; preds = %10864
  %10868 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %45)
  br label %14075

10869:                                            ; preds = %10864
  %10870 = load i64, ptr %2, align 8
  %10871 = trunc i64 %10870 to i32
  %10872 = and i32 %10871, 65535
  %10873 = add nsw i32 %10872, -6
  %10874 = icmp ult i32 %10873, 3
  br i1 %10874, label %10875, label %10884

10875:                                            ; preds = %10869
  %10876 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 14
  %10877 = load ptr, ptr %10876, align 8, !tbaa !17
  %10878 = icmp eq ptr %10877, null
  br i1 %10878, label %10884, label %10879

10879:                                            ; preds = %10875
  %10880 = tail call i32 @operand_equal_p(ptr noundef %45, ptr noundef nonnull %10877, i32 noundef 1)
  %10881 = icmp eq i32 %10880, 0
  br i1 %10881, label %10884, label %10882

10882:                                            ; preds = %10879
  %10883 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef %45, ptr noundef nonnull %46)
  br label %14075

10884:                                            ; preds = %10869, %10879, %10875
  %10885 = tail call fastcc ptr @fold_minmax(i32 noundef %0, i32 noundef 81, ptr noundef nonnull %2, ptr noundef nonnull %46, ptr noundef %45)
  %10886 = icmp eq ptr %10885, null
  br i1 %10886, label %1572, label %14075

10887:                                            ; preds = %305
  %10888 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %10889 = icmp eq i32 %10888, 0
  br i1 %10889, label %10892, label %10890

10890:                                            ; preds = %10887
  %10891 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  br label %14075

10892:                                            ; preds = %10887, %305
  %10893 = load i64, ptr %46, align 8
  %10894 = and i64 %10893, 65535
  %10895 = icmp eq i64 %10894, 23
  br i1 %10895, label %10896, label %10902

10896:                                            ; preds = %10892
  %10897 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %10898 = icmp eq i32 %10897, 0
  br i1 %10898, label %10899, label %10902

10899:                                            ; preds = %10896
  %10900 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45)
  %10901 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %10900)
  br label %14075

10902:                                            ; preds = %10896, %10892
  %10903 = load i64, ptr %45, align 8
  %10904 = and i64 %10903, 65535
  %10905 = icmp eq i64 %10904, 23
  br i1 %10905, label %10906, label %10918

10906:                                            ; preds = %10902
  %10907 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %10908 = icmp eq i32 %10907, 0
  br i1 %10908, label %10909, label %10918

10909:                                            ; preds = %10906
  %10910 = icmp eq i32 %1, 91
  br i1 %10910, label %10911, label %10915

10911:                                            ; preds = %10909
  %10912 = load i64, ptr %46, align 8
  %10913 = and i64 %10912, 65536
  %10914 = icmp eq i64 %10913, 0
  br i1 %10914, label %10915, label %10918

10915:                                            ; preds = %10911, %10909
  %10916 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %10917 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %10916)
  br label %14075

10918:                                            ; preds = %10911, %10906, %10902
  %10919 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %10920 = icmp eq i32 %10919, 0
  br i1 %10920, label %10923, label %10921

10921:                                            ; preds = %10918
  %10922 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45, ptr noundef nonnull %46)
  br label %14075

10923:                                            ; preds = %10918
  %10924 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %10925 = icmp eq i32 %10924, 0
  br i1 %10925, label %10928, label %10926

10926:                                            ; preds = %10923
  %10927 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %14075

10928:                                            ; preds = %10923
  %10929 = load i64, ptr %46, align 8
  %10930 = and i64 %10929, 65535
  %10931 = icmp eq i64 %10930, 96
  br i1 %10931, label %10932, label %10940

10932:                                            ; preds = %10928
  %10933 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10934 = load ptr, ptr %10933, align 8, !tbaa !17
  %10935 = tail call i32 @operand_equal_p(ptr noundef %10934, ptr noundef nonnull %45, i32 noundef 0)
  %10936 = icmp eq i32 %10935, 0
  br i1 %10936, label %10940, label %10937

10937:                                            ; preds = %10932
  %10938 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %10939 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10938, ptr noundef nonnull %45)
  br label %14075

10940:                                            ; preds = %10932, %10928
  %10941 = load i64, ptr %45, align 8
  %10942 = and i64 %10941, 65535
  %10943 = icmp eq i64 %10942, 96
  br i1 %10943, label %10944, label %10952

10944:                                            ; preds = %10940
  %10945 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %10946 = load ptr, ptr %10945, align 8, !tbaa !17
  %10947 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %10946, i32 noundef 0)
  %10948 = icmp eq i32 %10947, 0
  br i1 %10948, label %10952, label %10949

10949:                                            ; preds = %10944
  %10950 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %10951 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %10950, ptr noundef nonnull %46)
  br label %14075

10952:                                            ; preds = %10944, %10940
  %10953 = load i64, ptr %46, align 8
  %10954 = and i64 %10953, 65536
  %10955 = icmp eq i64 %10954, 0
  br i1 %10955, label %10956, label %10976

10956:                                            ; preds = %10952
  %10957 = load i64, ptr %45, align 8
  %10958 = and i64 %10957, 65536
  %10959 = icmp eq i64 %10958, 0
  br i1 %10959, label %10960, label %10976

10960:                                            ; preds = %10956
  %10961 = tail call fastcc ptr @fold_to_nonsharp_ineq_using_bound(i32 noundef %0, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %10962 = icmp eq ptr %10961, null
  br i1 %10962, label %10968, label %10963

10963:                                            ; preds = %10960
  %10964 = tail call i32 @operand_equal_p(ptr noundef nonnull %10961, ptr noundef nonnull %46, i32 noundef 0)
  %10965 = icmp eq i32 %10964, 0
  br i1 %10965, label %10966, label %10968

10966:                                            ; preds = %10963
  %10967 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %10961, ptr noundef nonnull %45)
  br label %14075

10968:                                            ; preds = %10963, %10960
  %10969 = tail call fastcc ptr @fold_to_nonsharp_ineq_using_bound(i32 noundef %0, ptr noundef nonnull %45, ptr noundef nonnull %46)
  %10970 = icmp eq ptr %10969, null
  br i1 %10970, label %10976, label %10971

10971:                                            ; preds = %10968
  %10972 = tail call i32 @operand_equal_p(ptr noundef nonnull %10969, ptr noundef nonnull %45, i32 noundef 0)
  %10973 = icmp eq i32 %10972, 0
  br i1 %10973, label %10974, label %10976

10974:                                            ; preds = %10971
  %10975 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %10969)
  br label %14075

10976:                                            ; preds = %11134, %11138, %10952, %10956, %10971, %10968
  %10977 = load i32, ptr @optimize, align 4, !tbaa !21
  %10978 = icmp eq i32 %10977, 0
  br i1 %10978, label %14075, label %10979

10979:                                            ; preds = %10976
  %10980 = load i64, ptr %46, align 8
  %10981 = trunc i64 %10980 to i32
  %10982 = and i32 %10981, 65535
  %10983 = load i64, ptr %45, align 8
  %10984 = trunc i64 %10983 to i32
  %10985 = and i32 %10984, 65535
  %10986 = icmp eq i32 %10982, %10985
  %10987 = add nsw i32 %10982, -91
  %10988 = icmp ult i32 %10987, 4
  %10989 = and i1 %10986, %10988
  br i1 %10989, label %10990, label %11048

10990:                                            ; preds = %10979
  %10991 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %10992 = load ptr, ptr %10991, align 8, !tbaa !17
  %10993 = load i64, ptr %10992, align 8
  %10994 = and i64 %10993, 65536
  %10995 = icmp eq i64 %10994, 0
  br i1 %10995, label %10996, label %11048

10996:                                            ; preds = %10990
  %10997 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %10998 = load ptr, ptr %10997, align 8, !tbaa !17
  %10999 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %11000 = load ptr, ptr %10999, align 8, !tbaa !17
  %11001 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %11002 = load ptr, ptr %11001, align 8, !tbaa !17
  %11003 = tail call i32 @operand_equal_p(ptr noundef %10998, ptr noundef %11000, i32 noundef 0)
  %11004 = icmp eq i32 %11003, 0
  br i1 %11004, label %11011, label %11005

11005:                                            ; preds = %10996
  %11006 = load i64, ptr %46, align 8
  %11007 = trunc i64 %11006 to i32
  %11008 = and i32 %11007, 65535
  %11009 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %10992, ptr noundef %11002)
  %11010 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11008, ptr noundef %2, ptr noundef %10998, ptr noundef %11009)
  br label %14075

11011:                                            ; preds = %10996
  %11012 = add nsw i32 %10982, -93
  %11013 = icmp ult i32 %11012, 2
  %11014 = add nsw i32 %1, -93
  %11015 = icmp ult i32 %11014, 2
  %11016 = select i1 %11013, i1 %11015, i1 false
  br i1 %11016, label %11017, label %11035

11017:                                            ; preds = %11011
  %11018 = tail call i32 @operand_equal_p(ptr noundef %10998, ptr noundef %11002, i32 noundef 0)
  %11019 = icmp eq i32 %11018, 0
  br i1 %11019, label %11026, label %11020

11020:                                            ; preds = %11017
  %11021 = load i64, ptr %46, align 8
  %11022 = trunc i64 %11021 to i32
  %11023 = and i32 %11022, 65535
  %11024 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %10992, ptr noundef %11000)
  %11025 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11023, ptr noundef %2, ptr noundef %10998, ptr noundef %11024)
  br label %14075

11026:                                            ; preds = %11017
  %11027 = tail call i32 @operand_equal_p(ptr noundef nonnull %10992, ptr noundef %11000, i32 noundef 0)
  %11028 = icmp eq i32 %11027, 0
  br i1 %11028, label %11039, label %11029

11029:                                            ; preds = %11026
  %11030 = load i64, ptr %46, align 8
  %11031 = trunc i64 %11030 to i32
  %11032 = and i32 %11031, 65535
  %11033 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %10998, ptr noundef %11002)
  %11034 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11032, ptr noundef %2, ptr noundef nonnull %10992, ptr noundef %11033)
  br label %14075

11035:                                            ; preds = %11011
  %11036 = load i64, ptr %11000, align 8
  %11037 = and i64 %11036, 65536
  %11038 = icmp eq i64 %11037, 0
  br i1 %11038, label %11039, label %11048

11039:                                            ; preds = %11026, %11035
  %11040 = tail call i32 @operand_equal_p(ptr noundef nonnull %10992, ptr noundef %11002, i32 noundef 0)
  %11041 = icmp eq i32 %11040, 0
  br i1 %11041, label %11048, label %11042

11042:                                            ; preds = %11039
  %11043 = load i64, ptr %46, align 8
  %11044 = trunc i64 %11043 to i32
  %11045 = and i32 %11044, 65535
  %11046 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %10998, ptr noundef %11000)
  %11047 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11045, ptr noundef %2, ptr noundef %11046, ptr noundef nonnull %10992)
  br label %14075

11048:                                            ; preds = %11035, %11039, %10990, %10979
  %11049 = tail call fastcc ptr @fold_range_test(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %11050 = icmp eq ptr %11049, null
  br i1 %11050, label %11051, label %14075

11051:                                            ; preds = %11048
  %11052 = load i64, ptr %46, align 8
  %11053 = trunc i64 %11052 to i32
  %11054 = and i32 %11053, 65535
  %11055 = icmp eq i32 %11054, %1
  br i1 %11055, label %11056, label %11065

11056:                                            ; preds = %11051
  %11057 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11058 = load ptr, ptr %11057, align 8, !tbaa !17
  %11059 = tail call fastcc ptr @fold_truthop(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11058, ptr noundef nonnull %45)
  %11060 = icmp eq ptr %11059, null
  br i1 %11060, label %11065, label %11061

11061:                                            ; preds = %11056
  %11062 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11063 = load ptr, ptr %11062, align 8, !tbaa !17
  %11064 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11063, ptr noundef nonnull %11059)
  br label %14075

11065:                                            ; preds = %11056, %11051
  %11066 = tail call fastcc ptr @fold_truthop(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %14075

11067:                                            ; preds = %305
  %11068 = load i64, ptr %46, align 8
  %11069 = and i64 %11068, 65535
  %11070 = icmp eq i64 %11069, 23
  br i1 %11070, label %11071, label %11076

11071:                                            ; preds = %11067
  %11072 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %11073 = icmp eq i32 %11072, 0
  br i1 %11073, label %11074, label %11076

11074:                                            ; preds = %11071
  %11075 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  br label %14075

11076:                                            ; preds = %11067, %11071, %305
  %11077 = load i64, ptr %46, align 8
  %11078 = and i64 %11077, 65535
  %11079 = icmp eq i64 %11078, 23
  br i1 %11079, label %11080, label %11086

11080:                                            ; preds = %11076
  %11081 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %11082 = icmp eq i32 %11081, 0
  br i1 %11082, label %11086, label %11083

11083:                                            ; preds = %11080
  %11084 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %45)
  %11085 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11084)
  br label %14075

11086:                                            ; preds = %11080, %11076
  %11087 = load i64, ptr %45, align 8
  %11088 = and i64 %11087, 65535
  %11089 = icmp eq i64 %11088, 23
  br i1 %11089, label %11090, label %11102

11090:                                            ; preds = %11086
  %11091 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11092 = icmp eq i32 %11091, 0
  br i1 %11092, label %11102, label %11093

11093:                                            ; preds = %11090
  %11094 = icmp eq i32 %1, 92
  br i1 %11094, label %11095, label %11099

11095:                                            ; preds = %11093
  %11096 = load i64, ptr %46, align 8
  %11097 = and i64 %11096, 65536
  %11098 = icmp eq i64 %11097, 0
  br i1 %11098, label %11099, label %11102

11099:                                            ; preds = %11095, %11093
  %11100 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11101 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11100)
  br label %14075

11102:                                            ; preds = %11095, %11090, %11086
  %11103 = load i64, ptr %45, align 8
  %11104 = and i64 %11103, 65535
  %11105 = icmp eq i64 %11104, 23
  br i1 %11105, label %11106, label %11111

11106:                                            ; preds = %11102
  %11107 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11108 = icmp eq i32 %11107, 0
  br i1 %11108, label %11109, label %11111

11109:                                            ; preds = %11106
  %11110 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45, ptr noundef nonnull %46)
  br label %14075

11111:                                            ; preds = %11106, %11102
  %11112 = load i64, ptr %46, align 8
  %11113 = and i64 %11112, 65535
  %11114 = icmp eq i64 %11113, 23
  br i1 %11114, label %11115, label %11122

11115:                                            ; preds = %11111
  %11116 = tail call i32 @integer_zerop(ptr noundef nonnull %46) #24
  %11117 = icmp eq i32 %11116, 0
  br i1 %11117, label %11120, label %11118

11118:                                            ; preds = %11115
  %11119 = load i64, ptr %46, align 8
  br label %11122

11120:                                            ; preds = %11115
  %11121 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  br label %14075

11122:                                            ; preds = %11118, %11111
  %11123 = phi i64 [ %11119, %11118 ], [ %11112, %11111 ]
  %11124 = and i64 %11123, 65535
  %11125 = icmp eq i64 %11124, 96
  br i1 %11125, label %11126, label %11134

11126:                                            ; preds = %11122
  %11127 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11128 = load ptr, ptr %11127, align 8, !tbaa !17
  %11129 = tail call i32 @operand_equal_p(ptr noundef %11128, ptr noundef nonnull %45, i32 noundef 0)
  %11130 = icmp eq i32 %11129, 0
  br i1 %11130, label %11134, label %11131

11131:                                            ; preds = %11126
  %11132 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %11133 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11132, ptr noundef nonnull %45)
  br label %14075

11134:                                            ; preds = %11126, %11122
  %11135 = load i64, ptr %45, align 8
  %11136 = and i64 %11135, 65535
  %11137 = icmp eq i64 %11136, 96
  br i1 %11137, label %11138, label %10976

11138:                                            ; preds = %11134
  %11139 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %11140 = load ptr, ptr %11139, align 8, !tbaa !17
  %11141 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %11140, i32 noundef 0)
  %11142 = icmp eq i32 %11141, 0
  br i1 %11142, label %10976, label %11143

11143:                                            ; preds = %11138
  %11144 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %11145 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11144, ptr noundef nonnull %46)
  br label %14075

11146:                                            ; preds = %305
  %11147 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %11148 = icmp eq i32 %11147, 0
  br i1 %11148, label %11152, label %11149

11149:                                            ; preds = %11146
  %11150 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11151 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11150)
  br label %14075

11152:                                            ; preds = %11146
  %11153 = tail call i32 @integer_onep(ptr noundef %45) #24
  %11154 = icmp eq i32 %11153, 0
  br i1 %11154, label %11169, label %11155

11155:                                            ; preds = %11152
  %11156 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %11157 = load ptr, ptr %11156, align 8, !tbaa !17
  %11158 = load i64, ptr %11157, align 8
  %11159 = and i64 %11158, 65535
  %11160 = icmp eq i64 %11159, 7
  br i1 %11160, label %11163, label %11161

11161:                                            ; preds = %11155
  %11162 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 96, ptr noundef nonnull %11157, ptr noundef nonnull %46)
  br label %11165

11163:                                            ; preds = %11155
  %11164 = tail call ptr @invert_truthvalue_loc(i32 noundef %0, ptr noundef nonnull %46)
  br label %11165

11165:                                            ; preds = %11163, %11161
  %11166 = phi ptr [ %11162, %11161 ], [ %11164, %11163 ]
  %11167 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11166)
  %11168 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11167)
  br label %14075

11169:                                            ; preds = %11152
  %11170 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %45, i32 noundef 0)
  %11171 = icmp eq i32 %11170, 0
  br i1 %11171, label %11175, label %11172

11172:                                            ; preds = %11169
  %11173 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %11174 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11173, ptr noundef nonnull %46)
  br label %14075

11175:                                            ; preds = %11169
  %11176 = load i64, ptr %46, align 8
  %11177 = and i64 %11176, 65535
  %11178 = icmp eq i64 %11177, 96
  br i1 %11178, label %11179, label %11187

11179:                                            ; preds = %11175
  %11180 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11181 = load ptr, ptr %11180, align 8, !tbaa !17
  %11182 = tail call i32 @operand_equal_p(ptr noundef %11181, ptr noundef %45, i32 noundef 0)
  %11183 = icmp eq i32 %11182, 0
  br i1 %11183, label %11187, label %11184

11184:                                            ; preds = %11179
  %11185 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %11186 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11185, ptr noundef %45)
  br label %14075

11187:                                            ; preds = %11179, %11175
  %11188 = load i64, ptr %45, align 8
  %11189 = and i64 %11188, 65535
  %11190 = icmp eq i64 %11189, 96
  br i1 %11190, label %11191, label %14075

11191:                                            ; preds = %11187
  %11192 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %11193 = load ptr, ptr %11192, align 8, !tbaa !17
  %11194 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef %11193, i32 noundef 0)
  %11195 = icmp eq i32 %11194, 0
  br i1 %11195, label %14075, label %11196

11196:                                            ; preds = %11191
  %11197 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %11198 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11197, ptr noundef nonnull %46)
  br label %14075

11199:                                            ; preds = %305, %305
  %11200 = tail call fastcc ptr @fold_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %11201 = icmp eq ptr %11200, null
  br i1 %11201, label %11202, label %14075

11202:                                            ; preds = %11199
  %11203 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %11204 = load ptr, ptr %11203, align 8, !tbaa !17
  %11205 = load i64, ptr %11204, align 8
  %11206 = and i64 %11205, 65535
  %11207 = icmp eq i64 %11206, 7
  br i1 %11207, label %11208, label %11218

11208:                                            ; preds = %11202
  %11209 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %11210 = icmp ne i32 %11209, 0
  %11211 = and i1 %109, %11210
  br i1 %11211, label %11215, label %11212

11212:                                            ; preds = %11208
  %11213 = load ptr, ptr %11203, align 8, !tbaa !17
  %11214 = load i64, ptr %11213, align 8
  br label %11218

11215:                                            ; preds = %11208
  %11216 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11217 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11216)
  br label %14075

11218:                                            ; preds = %11212, %11202
  %11219 = phi i64 [ %11214, %11212 ], [ %11205, %11202 ]
  %11220 = and i64 %11219, 65535
  %11221 = icmp eq i64 %11220, 7
  br i1 %11221, label %11222, label %11232

11222:                                            ; preds = %11218
  %11223 = tail call i32 @integer_onep(ptr noundef %45) #24
  %11224 = icmp ne i32 %11223, 0
  %11225 = and i1 %108, %11224
  br i1 %11225, label %11229, label %11226

11226:                                            ; preds = %11222
  %11227 = load ptr, ptr %11203, align 8, !tbaa !17
  %11228 = load i64, ptr %11227, align 8
  br label %11232

11229:                                            ; preds = %11222
  %11230 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11231 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11230)
  br label %14075

11232:                                            ; preds = %11226, %11218
  %11233 = phi i64 [ %11228, %11226 ], [ %11219, %11218 ]
  %11234 = and i64 %11233, 65535
  %11235 = icmp eq i64 %11234, 7
  br i1 %11235, label %11236, label %11246

11236:                                            ; preds = %11232
  %11237 = tail call i32 @integer_onep(ptr noundef %45) #24
  %11238 = icmp ne i32 %11237, 0
  %11239 = and i1 %109, %11238
  br i1 %11239, label %11243, label %11240

11240:                                            ; preds = %11236
  %11241 = load ptr, ptr %11203, align 8, !tbaa !17
  %11242 = load i64, ptr %11241, align 8
  br label %11246

11243:                                            ; preds = %11236
  %11244 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11245 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 96, ptr noundef %2, ptr noundef %11244)
  br label %14075

11246:                                            ; preds = %11240, %11232
  %11247 = phi i64 [ %11242, %11240 ], [ %11233, %11232 ]
  %11248 = and i64 %11247, 65535
  %11249 = icmp eq i64 %11248, 7
  br i1 %11249, label %11250, label %11257

11250:                                            ; preds = %11246
  %11251 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %11252 = icmp ne i32 %11251, 0
  %11253 = and i1 %108, %11252
  br i1 %11253, label %11254, label %11257

11254:                                            ; preds = %11250
  %11255 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11256 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 96, ptr noundef %2, ptr noundef %11255)
  br label %14075

11257:                                            ; preds = %11250, %11246
  %11258 = load i64, ptr %46, align 8
  %11259 = and i64 %11258, 65535
  %11260 = icmp eq i64 %11259, 96
  br i1 %11260, label %11261, label %11270

11261:                                            ; preds = %11257
  %11262 = tail call i32 @integer_zerop(ptr noundef %45) #24
  %11263 = icmp ne i32 %11262, 0
  %11264 = and i1 %109, %11263
  br i1 %11264, label %11267, label %11265

11265:                                            ; preds = %11261
  %11266 = load i64, ptr %46, align 8
  br label %11270

11267:                                            ; preds = %11261
  %11268 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  %11269 = tail call ptr @non_lvalue_loc(i32 noundef %0, ptr noundef %11268)
  br label %14075

11270:                                            ; preds = %11265, %11257
  %11271 = phi i64 [ %11266, %11265 ], [ %11258, %11257 ]
  %11272 = and i64 %11271, 65535
  %11273 = icmp eq i64 %11272, 121
  br i1 %11273, label %11274, label %11327

11274:                                            ; preds = %11270
  %11275 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11276 = load ptr, ptr %11275, align 8, !tbaa !17
  %11277 = load i64, ptr %11276, align 8
  %11278 = trunc i64 %11277 to i16
  switch i16 %11278, label %11327 [
    i16 32, label %11279
    i16 29, label %11279
  ]

11279:                                            ; preds = %11274, %11274
  %11280 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %11276, i64 0, i32 4
  %11281 = load i32, ptr %11280, align 8
  %11282 = and i32 %11281, 128
  %11283 = icmp eq i32 %11282, 0
  br i1 %11283, label %11284, label %11327

11284:                                            ; preds = %11279
  %11285 = getelementptr inbounds %struct.tree_decl_common, ptr %11276, i64 0, i32 6
  %11286 = load ptr, ptr %11285, align 8, !tbaa !17
  %11287 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.10, ptr noundef %11286) #24
  %11288 = icmp eq ptr %11287, null
  br i1 %11288, label %11289, label %11327

11289:                                            ; preds = %11284
  %11290 = load ptr, ptr %11275, align 8, !tbaa !17
  %11291 = getelementptr inbounds %struct.tree_decl_common, ptr %11290, i64 0, i32 2
  %11292 = load i64, ptr %11291, align 8
  %11293 = and i64 %11292, 33554432
  %11294 = icmp eq i64 %11293, 0
  br i1 %11294, label %11295, label %11327

11295:                                            ; preds = %11289
  %11296 = load i64, ptr %45, align 8
  %11297 = and i64 %11296, 65535
  %11298 = icmp eq i64 %11297, 121
  br i1 %11298, label %11299, label %11327

11299:                                            ; preds = %11295
  %11300 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %11301 = load ptr, ptr %11300, align 8, !tbaa !17
  %11302 = load i64, ptr %11301, align 8
  %11303 = trunc i64 %11302 to i16
  switch i16 %11303, label %11327 [
    i16 32, label %11304
    i16 29, label %11304
  ]

11304:                                            ; preds = %11299, %11299
  %11305 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %11301, i64 0, i32 4
  %11306 = load i32, ptr %11305, align 8
  %11307 = and i32 %11306, 128
  %11308 = icmp eq i32 %11307, 0
  br i1 %11308, label %11309, label %11327

11309:                                            ; preds = %11304
  %11310 = getelementptr inbounds %struct.tree_decl_common, ptr %11301, i64 0, i32 6
  %11311 = load ptr, ptr %11310, align 8, !tbaa !17
  %11312 = tail call ptr @lookup_attribute(ptr noundef nonnull @.str.10, ptr noundef %11311) #24
  %11313 = icmp eq ptr %11312, null
  br i1 %11313, label %11314, label %11327

11314:                                            ; preds = %11309
  %11315 = load ptr, ptr %11300, align 8, !tbaa !17
  %11316 = getelementptr inbounds %struct.tree_decl_common, ptr %11315, i64 0, i32 2
  %11317 = load i64, ptr %11316, align 8
  %11318 = and i64 %11317, 33554432
  %11319 = icmp eq i64 %11318, 0
  br i1 %11319, label %11320, label %11327

11320:                                            ; preds = %11314
  %11321 = load ptr, ptr %11275, align 8, !tbaa !17
  %11322 = icmp eq ptr %11321, %11315
  %11323 = icmp ne i32 %1, 101
  %11324 = select i1 %11322, i1 %108, i1 %11323
  %11325 = zext i1 %11324 to i32
  %11326 = tail call ptr @constant_boolean_node(i32 noundef %11325, ptr noundef %2)
  br label %14075

11327:                                            ; preds = %11299, %11274, %11314, %11309, %11304, %11295, %11289, %11284, %11279, %11270
  %11328 = load i64, ptr %45, align 8
  %11329 = and i64 %11328, 65535
  %11330 = icmp eq i64 %11329, 23
  br i1 %11330, label %11331, label %11360

11331:                                            ; preds = %11327
  %11332 = load i64, ptr %46, align 8
  %11333 = trunc i64 %11332 to i32
  %11334 = and i32 %11333, 65535
  %11335 = add nsw i32 %11334, -63
  %11336 = icmp ult i32 %11335, 2
  br i1 %11336, label %11337, label %11360

11337:                                            ; preds = %11331
  %11338 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11339 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11340 = load ptr, ptr %11339, align 8, !tbaa !17
  %11341 = load i64, ptr %11340, align 8
  %11342 = and i64 %11341, 65535
  %11343 = icmp eq i64 %11342, 23
  br i1 %11343, label %11344, label %11360

11344:                                            ; preds = %11337
  %11345 = and i64 %11332, 65535
  %11346 = icmp eq i64 %11345, 63
  %11347 = select i1 %11346, i32 64, i32 63
  %11348 = load ptr, ptr %11203, align 8, !tbaa !17
  %11349 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11348, ptr noundef nonnull %45)
  %11350 = load ptr, ptr %11339, align 8, !tbaa !17
  %11351 = tail call fastcc ptr @const_binop(i32 noundef %11347, ptr noundef %11349, ptr noundef %11350)
  %11352 = icmp eq ptr %11351, null
  br i1 %11352, label %11360, label %11353

11353:                                            ; preds = %11344
  %11354 = load i64, ptr %11351, align 8
  %11355 = and i64 %11354, 134217728
  %11356 = icmp eq i64 %11355, 0
  br i1 %11356, label %11357, label %11360

11357:                                            ; preds = %11353
  %11358 = load ptr, ptr %11338, align 8, !tbaa !17
  %11359 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11358, ptr noundef nonnull %11351)
  br label %14075

11360:                                            ; preds = %11331, %11353, %11344, %11337, %11327
  %11361 = load i64, ptr %46, align 8
  %11362 = and i64 %11361, 65535
  %11363 = icmp eq i64 %11362, 79
  br i1 %11363, label %11364, label %11379

11364:                                            ; preds = %11360
  %11365 = load i64, ptr %45, align 8
  %11366 = and i64 %11365, 65535
  %11367 = icmp eq i64 %11366, 23
  br i1 %11367, label %11368, label %11379

11368:                                            ; preds = %11364
  %11369 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %11370 = icmp eq ptr %11369, null
  br i1 %11370, label %11379, label %11371

11371:                                            ; preds = %11368
  %11372 = load i64, ptr %11369, align 8
  %11373 = and i64 %11372, 134283263
  %11374 = icmp eq i64 %11373, 23
  br i1 %11374, label %11375, label %11379

11375:                                            ; preds = %11371
  %11376 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11377 = load ptr, ptr %11376, align 8, !tbaa !17
  %11378 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11377, ptr noundef nonnull %11369)
  br label %14075

11379:                                            ; preds = %11371, %11368, %11364, %11360
  %11380 = load i64, ptr %46, align 8
  %11381 = and i64 %11380, 65535
  %11382 = icmp eq i64 %11381, 88
  br i1 %11382, label %11383, label %11401

11383:                                            ; preds = %11379
  %11384 = load i64, ptr %45, align 8
  %11385 = and i64 %11384, 65535
  %11386 = icmp eq i64 %11385, 23
  br i1 %11386, label %11387, label %11401

11387:                                            ; preds = %11383
  %11388 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11389 = load ptr, ptr %11388, align 8, !tbaa !17
  %11390 = load i64, ptr %11389, align 8
  %11391 = and i64 %11390, 65535
  %11392 = icmp eq i64 %11391, 23
  br i1 %11392, label %11393, label %11401

11393:                                            ; preds = %11387
  %11394 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11395 = load ptr, ptr %11394, align 8, !tbaa !17
  %11396 = load ptr, ptr %11203, align 8, !tbaa !17
  %11397 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11396, ptr noundef nonnull %45)
  %11398 = load ptr, ptr %11388, align 8, !tbaa !17
  %11399 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %11396, ptr noundef %11397, ptr noundef %11398)
  %11400 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11395, ptr noundef %11399)
  br label %14075

11401:                                            ; preds = %11387, %11383, %11379
  %11402 = trunc i64 %11380 to i16
  switch i16 %11402, label %11421 [
    i16 63, label %11403
    i16 66, label %11403
    i16 64, label %11403
  ]

11403:                                            ; preds = %11401, %11401, %11401
  %11404 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11405 = load ptr, ptr %11404, align 8, !tbaa !17
  %11406 = tail call i32 @operand_equal_p(ptr noundef %11405, ptr noundef nonnull %45, i32 noundef 0)
  %11407 = icmp eq i32 %11406, 0
  br i1 %11407, label %11421, label %11408

11408:                                            ; preds = %11403
  %11409 = load ptr, ptr %11203, align 8, !tbaa !17
  %11410 = load i64, ptr %11409, align 8
  %11411 = trunc i64 %11410 to i16
  switch i16 %11411, label %11421 [
    i16 6, label %11412
    i16 7, label %11412
    i16 8, label %11412
    i16 10, label %11412
    i16 12, label %11412
  ]

11412:                                            ; preds = %11408, %11408, %11408, %11408, %11408
  %11413 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11414 = load ptr, ptr %11413, align 8, !tbaa !17
  %11415 = getelementptr inbounds %struct.tree_common, ptr %11414, i64 0, i32 2
  %11416 = load ptr, ptr %11415, align 8, !tbaa !17
  %11417 = tail call ptr @build_int_cst(ptr noundef %11416, i64 noundef 0) #24
  %11418 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11414, ptr noundef %11417)
  %11419 = load ptr, ptr %11404, align 8, !tbaa !17
  %11420 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11418, ptr noundef %11419, ptr noundef nonnull %45)
  br label %14075

11421:                                            ; preds = %11408, %11401, %11403
  %11422 = load i64, ptr %46, align 8
  %11423 = and i64 %11422, 65535
  %11424 = icmp eq i64 %11423, 64
  br i1 %11424, label %11425, label %11448

11425:                                            ; preds = %11421
  %11426 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11427 = load ptr, ptr %11426, align 8, !tbaa !17
  %11428 = load i64, ptr %11427, align 8
  %11429 = and i64 %11428, 65535
  %11430 = icmp eq i64 %11429, 23
  br i1 %11430, label %11431, label %11448

11431:                                            ; preds = %11425
  %11432 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11433 = load ptr, ptr %11432, align 8, !tbaa !17
  %11434 = tail call i32 @operand_equal_p(ptr noundef %11433, ptr noundef nonnull %45, i32 noundef 0)
  %11435 = icmp eq i32 %11434, 0
  br i1 %11435, label %11448, label %11436

11436:                                            ; preds = %11431
  %11437 = load ptr, ptr %11426, align 8, !tbaa !17
  %11438 = getelementptr inbounds %struct.tree_int_cst, ptr %11437, i64 0, i32 1
  %11439 = load i64, ptr %11438, align 8, !tbaa !17
  %11440 = and i64 %11439, 1
  %11441 = icmp eq i64 %11440, 0
  br i1 %11441, label %11448, label %11442

11442:                                            ; preds = %11436
  %11443 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %11444 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %11445 = select i1 %109, ptr %11443, ptr %11444
  %11446 = load ptr, ptr %11432, align 8, !tbaa !17
  %11447 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11445, ptr noundef %11446, ptr noundef nonnull %45)
  br label %14075

11448:                                            ; preds = %11436, %11431, %11425, %11421
  %11449 = load i64, ptr %46, align 8
  %11450 = and i64 %11449, 65535
  %11451 = icmp eq i64 %11450, 64
  br i1 %11451, label %11452, label %11463

11452:                                            ; preds = %11448
  %11453 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11454 = icmp eq i32 %11453, 0
  br i1 %11454, label %11455, label %11457

11455:                                            ; preds = %11452
  %11456 = load i64, ptr %46, align 8
  br label %11463

11457:                                            ; preds = %11452
  %11458 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11459 = load ptr, ptr %11458, align 8, !tbaa !17
  %11460 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11461 = load ptr, ptr %11460, align 8, !tbaa !17
  %11462 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11459, ptr noundef %11461)
  br label %14075

11463:                                            ; preds = %11455, %11448
  %11464 = phi i64 [ %11456, %11455 ], [ %11449, %11448 ]
  %11465 = and i64 %11464, 65535
  %11466 = icmp eq i64 %11465, 82
  br i1 %11466, label %11467, label %11479

11467:                                            ; preds = %11463
  %11468 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11469 = icmp eq i32 %11468, 0
  br i1 %11469, label %11470, label %11475

11470:                                            ; preds = %11467
  %11471 = tail call i32 @real_zerop(ptr noundef nonnull %45) #24
  %11472 = icmp eq i32 %11471, 0
  br i1 %11472, label %11473, label %11475

11473:                                            ; preds = %11470
  %11474 = load i64, ptr %46, align 8
  br label %11479

11475:                                            ; preds = %11470, %11467
  %11476 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11477 = load ptr, ptr %11476, align 8, !tbaa !17
  %11478 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11477, ptr noundef nonnull %45)
  br label %14075

11479:                                            ; preds = %11473, %11463
  %11480 = phi i64 [ %11474, %11473 ], [ %11464, %11463 ]
  %11481 = and i64 %11480, 65535
  %11482 = icmp eq i64 %11481, 89
  br i1 %11482, label %11483, label %11534

11483:                                            ; preds = %11479
  %11484 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11485 = icmp eq i32 %11484, 0
  br i1 %11485, label %11534, label %11486

11486:                                            ; preds = %11483
  %11487 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11488 = load ptr, ptr %11487, align 8, !tbaa !17
  %11489 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11490 = load ptr, ptr %11489, align 8, !tbaa !17
  %11491 = load i64, ptr %11488, align 8
  %11492 = and i64 %11491, 65535
  %11493 = icmp eq i64 %11492, 83
  br i1 %11493, label %11494, label %11512

11494:                                            ; preds = %11486
  %11495 = getelementptr inbounds %struct.tree_exp, ptr %11488, i64 0, i32 3
  %11496 = load ptr, ptr %11495, align 8, !tbaa !17
  %11497 = tail call i32 @integer_onep(ptr noundef %11496) #24
  %11498 = icmp eq i32 %11497, 0
  br i1 %11498, label %11512, label %11499

11499:                                            ; preds = %11494
  %11500 = getelementptr inbounds %struct.tree_common, ptr %11488, i64 0, i32 2
  %11501 = load ptr, ptr %11500, align 8, !tbaa !17
  %11502 = getelementptr inbounds %struct.tree_exp, ptr %11488, i64 1
  %11503 = load ptr, ptr %11502, align 8, !tbaa !17
  %11504 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 84, ptr noundef %11501, ptr noundef %11490, ptr noundef %11503)
  %11505 = load ptr, ptr %11203, align 8, !tbaa !17
  %11506 = tail call ptr @build_int_cst(ptr noundef %11505, i64 noundef 1) #24
  %11507 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11505, ptr noundef %11504, ptr noundef %11506)
  %11508 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11509 = load ptr, ptr %11508, align 8, !tbaa !17
  %11510 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11509, ptr noundef %11507)
  %11511 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11510, ptr noundef nonnull %45)
  br label %14075

11512:                                            ; preds = %11494, %11486
  %11513 = load i64, ptr %11490, align 8
  %11514 = and i64 %11513, 65535
  %11515 = icmp eq i64 %11514, 83
  br i1 %11515, label %11516, label %11534

11516:                                            ; preds = %11512
  %11517 = getelementptr inbounds %struct.tree_exp, ptr %11490, i64 0, i32 3
  %11518 = load ptr, ptr %11517, align 8, !tbaa !17
  %11519 = tail call i32 @integer_onep(ptr noundef %11518) #24
  %11520 = icmp eq i32 %11519, 0
  br i1 %11520, label %11534, label %11521

11521:                                            ; preds = %11516
  %11522 = getelementptr inbounds %struct.tree_common, ptr %11490, i64 0, i32 2
  %11523 = load ptr, ptr %11522, align 8, !tbaa !17
  %11524 = getelementptr inbounds %struct.tree_exp, ptr %11490, i64 1
  %11525 = load ptr, ptr %11524, align 8, !tbaa !17
  %11526 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 84, ptr noundef %11523, ptr noundef nonnull %11488, ptr noundef %11525)
  %11527 = load ptr, ptr %11203, align 8, !tbaa !17
  %11528 = tail call ptr @build_int_cst(ptr noundef %11527, i64 noundef 1) #24
  %11529 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11527, ptr noundef %11526, ptr noundef %11528)
  %11530 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11531 = load ptr, ptr %11530, align 8, !tbaa !17
  %11532 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11531, ptr noundef %11529)
  %11533 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11532, ptr noundef nonnull %45)
  br label %14075

11534:                                            ; preds = %11516, %11512, %11483, %11479
  %11535 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11536 = icmp eq i32 %11535, 0
  br i1 %11536, label %11567, label %11537

11537:                                            ; preds = %11534
  %11538 = load ptr, ptr %11203, align 8, !tbaa !17
  %11539 = load i64, ptr %11538, align 8
  %11540 = and i64 %11539, 2097152
  %11541 = icmp eq i64 %11540, 0
  br i1 %11541, label %11542, label %11567

11542:                                            ; preds = %11537
  %11543 = load i64, ptr %46, align 8
  %11544 = trunc i64 %11543 to i32
  %11545 = and i32 %11544, 65535
  %11546 = add nsw i32 %11545, -71
  %11547 = icmp ult i32 %11546, 4
  br i1 %11547, label %11548, label %11567

11548:                                            ; preds = %11542
  %11549 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11550 = load ptr, ptr %11549, align 8, !tbaa !17
  %11551 = tail call i32 @integer_pow2p(ptr noundef %11550) #24
  %11552 = icmp eq i32 %11551, 0
  br i1 %11552, label %11567, label %11553

11553:                                            ; preds = %11548
  %11554 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11555 = load ptr, ptr %11203, align 8, !tbaa !17
  %11556 = tail call ptr @unsigned_type_for(ptr noundef %11555) #24
  %11557 = load i64, ptr %46, align 8
  %11558 = trunc i64 %11557 to i32
  %11559 = and i32 %11558, 65535
  %11560 = load ptr, ptr %11554, align 8, !tbaa !17
  %11561 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11556, ptr noundef %11560)
  %11562 = load ptr, ptr %11549, align 8, !tbaa !17
  %11563 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11556, ptr noundef %11562)
  %11564 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11559, ptr noundef %11556, ptr noundef %11561, ptr noundef %11563)
  %11565 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11556, ptr noundef nonnull %45)
  %11566 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11564, ptr noundef %11565)
  br label %14075

11567:                                            ; preds = %11542, %11548, %11537, %11534
  %11568 = load i64, ptr %46, align 8
  %11569 = and i64 %11568, 65535
  %11570 = icmp eq i64 %11569, 89
  br i1 %11570, label %11571, label %11633

11571:                                            ; preds = %11567
  %11572 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11573 = load ptr, ptr %11572, align 8, !tbaa !17
  %11574 = load i64, ptr %11573, align 8
  %11575 = and i64 %11574, 65535
  %11576 = icmp eq i64 %11575, 84
  br i1 %11576, label %11577, label %11633

11577:                                            ; preds = %11571
  %11578 = getelementptr inbounds %struct.tree_exp, ptr %11573, i64 1
  %11579 = load ptr, ptr %11578, align 8, !tbaa !17
  %11580 = load i64, ptr %11579, align 8
  %11581 = and i64 %11580, 65535
  %11582 = icmp eq i64 %11581, 23
  br i1 %11582, label %11583, label %11633

11583:                                            ; preds = %11577
  %11584 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11585 = load ptr, ptr %11584, align 8, !tbaa !17
  %11586 = tail call i32 @integer_pow2p(ptr noundef %11585) #24
  %11587 = icmp eq i32 %11586, 0
  br i1 %11587, label %11633, label %11588

11588:                                            ; preds = %11583
  %11589 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11590 = icmp eq i32 %11589, 0
  br i1 %11590, label %11633, label %11591

11591:                                            ; preds = %11588
  %11592 = load ptr, ptr %11203, align 8, !tbaa !17
  %11593 = getelementptr inbounds %struct.tree_type, ptr %11592, i64 0, i32 6
  %11594 = load i32, ptr %11593, align 4
  %11595 = and i32 %11594, 1023
  %11596 = zext i32 %11595 to i64
  %11597 = load ptr, ptr %11572, align 8, !tbaa !17
  %11598 = getelementptr inbounds %struct.tree_exp, ptr %11597, i64 0, i32 3
  %11599 = getelementptr inbounds %struct.tree_exp, ptr %11597, i64 1
  %11600 = load ptr, ptr %11599, align 8, !tbaa !17
  %11601 = getelementptr inbounds %struct.tree_int_cst, ptr %11600, i64 0, i32 1
  %11602 = getelementptr inbounds %struct.tree_int_cst, ptr %11600, i64 0, i32 1, i32 1
  %11603 = load i64, ptr %11602, align 8, !tbaa !17
  %11604 = icmp eq i64 %11603, 0
  br i1 %11604, label %11605, label %11633

11605:                                            ; preds = %11591
  %11606 = load i64, ptr %11601, align 8, !tbaa !17
  %11607 = icmp ult i64 %11606, %11596
  br i1 %11607, label %11608, label %11633

11608:                                            ; preds = %11605
  %11609 = load ptr, ptr %11584, align 8, !tbaa !17
  %11610 = load ptr, ptr %11598, align 8, !tbaa !17
  %11611 = tail call i32 @tree_log2(ptr noundef %11609) #24
  %11612 = sext i32 %11611 to i64
  %11613 = load i64, ptr %11601, align 8, !tbaa !17
  %11614 = add i64 %11613, %11612
  %11615 = icmp ult i64 %11614, %11596
  br i1 %11615, label %11616, label %11620

11616:                                            ; preds = %11608
  %11617 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 83, ptr noundef nonnull %11592, ptr noundef %11609, ptr noundef nonnull %11600)
  %11618 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %11592, ptr noundef %11610, ptr noundef %11617)
  %11619 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11618, ptr noundef nonnull %45)
  br label %14075

11620:                                            ; preds = %11608
  %11621 = load i64, ptr %11592, align 8
  %11622 = and i64 %11621, 2097152
  %11623 = icmp eq i64 %11622, 0
  br i1 %11623, label %11624, label %11628

11624:                                            ; preds = %11620
  %11625 = select i1 %108, i32 100, i32 97
  %11626 = tail call ptr @build_int_cst(ptr noundef nonnull %11592, i64 noundef 0) #24
  %11627 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11625, ptr noundef %2, ptr noundef %11610, ptr noundef %11626)
  br label %14075

11628:                                            ; preds = %11620
  %11629 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %11630 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %11631 = select i1 %108, ptr %11629, ptr %11630
  %11632 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11631, ptr noundef %11610)
  br label %14075

11633:                                            ; preds = %11605, %11591, %11588, %11583, %11577, %11571, %11567
  br i1 %109, label %11634, label %11648

11634:                                            ; preds = %11633
  %11635 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11636 = icmp eq i32 %11635, 0
  br i1 %11636, label %11648, label %11637

11637:                                            ; preds = %11634
  %11638 = load i64, ptr %46, align 8
  %11639 = and i64 %11638, 65535
  %11640 = icmp eq i64 %11639, 89
  br i1 %11640, label %11641, label %11648

11641:                                            ; preds = %11637
  %11642 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11643 = load ptr, ptr %11642, align 8, !tbaa !17
  %11644 = tail call i32 @integer_onep(ptr noundef %11643) #24
  %11645 = icmp eq i32 %11644, 0
  br i1 %11645, label %11648, label %11646

11646:                                            ; preds = %11641
  %11647 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %46)
  br label %14075

11648:                                            ; preds = %11641, %11637, %11634, %11633
  %11649 = load i64, ptr %46, align 8
  %11650 = and i64 %11649, 65535
  %11651 = icmp eq i64 %11650, 89
  br i1 %11651, label %11652, label %11667

11652:                                            ; preds = %11648
  %11653 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11654 = load ptr, ptr %11653, align 8, !tbaa !17
  %11655 = tail call i32 @integer_pow2p(ptr noundef %11654) #24
  %11656 = icmp eq i32 %11655, 0
  br i1 %11656, label %11667, label %11657

11657:                                            ; preds = %11652
  %11658 = load ptr, ptr %11653, align 8, !tbaa !17
  %11659 = tail call i32 @operand_equal_p(ptr noundef %11658, ptr noundef nonnull %45, i32 noundef 0)
  %11660 = icmp eq i32 %11659, 0
  br i1 %11660, label %11667, label %11661

11661:                                            ; preds = %11657
  %11662 = select i1 %108, i32 102, i32 101
  %11663 = load ptr, ptr %11203, align 8, !tbaa !17
  %11664 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %11665 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11663, ptr noundef %11664)
  %11666 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11662, ptr noundef %2, ptr noundef nonnull %46, ptr noundef %11665)
  br label %14075

11667:                                            ; preds = %11657, %11652, %11648
  %11668 = tail call fastcc ptr @fold_single_bit_test_into_sign_test(i32 noundef %0, i32 noundef %1, ptr noundef nonnull %46, ptr noundef nonnull %45, ptr noundef %2)
  %11669 = icmp eq ptr %11668, null
  br i1 %11669, label %11670, label %14075

11670:                                            ; preds = %11667
  %11671 = load i64, ptr %46, align 8
  %11672 = and i64 %11671, 65535
  %11673 = icmp eq i64 %11672, 89
  br i1 %11673, label %11674, label %11699

11674:                                            ; preds = %11670
  %11675 = load i64, ptr %45, align 8
  %11676 = and i64 %11675, 65535
  %11677 = icmp eq i64 %11676, 23
  br i1 %11677, label %11678, label %11699

11678:                                            ; preds = %11674
  %11679 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11680 = load ptr, ptr %11679, align 8, !tbaa !17
  %11681 = load i64, ptr %11680, align 8
  %11682 = and i64 %11681, 65535
  %11683 = icmp eq i64 %11682, 23
  br i1 %11683, label %11684, label %11699

11684:                                            ; preds = %11678
  %11685 = getelementptr inbounds %struct.tree_common, ptr %11680, i64 0, i32 2
  %11686 = load ptr, ptr %11685, align 8, !tbaa !17
  %11687 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %11686, ptr noundef nonnull %11680)
  %11688 = load ptr, ptr %11203, align 8, !tbaa !17
  %11689 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11688, ptr noundef nonnull %45, ptr noundef %11687)
  %11690 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %11691 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %11692 = tail call i32 @integer_nonzerop(ptr noundef %11689) #24
  %11693 = icmp eq i32 %11692, 0
  br i1 %11693, label %11694, label %11696

11694:                                            ; preds = %11684
  %11695 = load i64, ptr %46, align 8
  br label %11699

11696:                                            ; preds = %11684
  %11697 = select i1 %108, ptr %11690, ptr %11691
  %11698 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11697, ptr noundef nonnull %46)
  br label %14075

11699:                                            ; preds = %11694, %11678, %11674, %11670
  %11700 = phi i64 [ %11695, %11694 ], [ %11671, %11678 ], [ %11671, %11674 ], [ %11671, %11670 ]
  %11701 = and i64 %11700, 65535
  %11702 = icmp eq i64 %11701, 87
  br i1 %11702, label %11703, label %11729

11703:                                            ; preds = %11699
  %11704 = load i64, ptr %45, align 8
  %11705 = and i64 %11704, 65535
  %11706 = icmp eq i64 %11705, 23
  br i1 %11706, label %11707, label %11729

11707:                                            ; preds = %11703
  %11708 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11709 = load ptr, ptr %11708, align 8, !tbaa !17
  %11710 = load i64, ptr %11709, align 8
  %11711 = and i64 %11710, 65535
  %11712 = icmp eq i64 %11711, 23
  br i1 %11712, label %11713, label %11729

11713:                                            ; preds = %11707
  %11714 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11715 = load ptr, ptr %11714, align 8, !tbaa !17
  %11716 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %11715, ptr noundef nonnull %45)
  %11717 = load ptr, ptr %11203, align 8, !tbaa !17
  %11718 = load ptr, ptr %11708, align 8, !tbaa !17
  %11719 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11717, ptr noundef %11718, ptr noundef %11716)
  %11720 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %11721 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %11722 = tail call i32 @integer_nonzerop(ptr noundef %11719) #24
  %11723 = icmp eq i32 %11722, 0
  br i1 %11723, label %11724, label %11726

11724:                                            ; preds = %11713
  %11725 = load i64, ptr %46, align 8
  br label %11729

11726:                                            ; preds = %11713
  %11727 = select i1 %108, ptr %11720, ptr %11721
  %11728 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %11727, ptr noundef nonnull %46)
  br label %14075

11729:                                            ; preds = %11724, %11707, %11703, %11699
  %11730 = phi i64 [ %11725, %11724 ], [ %11700, %11707 ], [ %11700, %11703 ], [ %11700, %11699 ]
  %11731 = trunc i64 %11730 to i32
  %11732 = and i32 %11731, 65535
  %11733 = add nsw i32 %11732, -41
  %11734 = icmp ult i32 %11733, 2
  br i1 %11734, label %11735, label %11747

11735:                                            ; preds = %11729
  %11736 = load i32, ptr @optimize, align 4, !tbaa !21
  %11737 = icmp eq i32 %11736, 0
  br i1 %11737, label %11738, label %11742

11738:                                            ; preds = %11735
  %11739 = load i64, ptr %45, align 8
  %11740 = and i64 %11739, 65535
  %11741 = icmp eq i64 %11740, 23
  br i1 %11741, label %11742, label %11747

11742:                                            ; preds = %11738, %11735
  %11743 = tail call fastcc ptr @optimize_bit_field_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %11744 = icmp eq ptr %11743, null
  br i1 %11744, label %11745, label %14075

11745:                                            ; preds = %11742
  %11746 = load i64, ptr %46, align 8
  br label %11747

11747:                                            ; preds = %11745, %11729, %11738
  %11748 = phi i64 [ %11746, %11745 ], [ %11730, %11729 ], [ %11730, %11738 ]
  %11749 = and i64 %11748, 65535
  %11750 = icmp eq i64 %11749, 59
  br i1 %11750, label %11751, label %11783

11751:                                            ; preds = %11747
  %11752 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11753 = icmp eq i32 %11752, 0
  br i1 %11753, label %11783, label %11754

11754:                                            ; preds = %11751
  %11755 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %46) #24
  %11756 = icmp eq ptr %11755, null
  br i1 %11756, label %11783, label %11757

11757:                                            ; preds = %11754
  %11758 = getelementptr inbounds %struct.tree_function_decl, ptr %11755, i64 0, i32 5
  %11759 = load i32, ptr %11758, align 8
  %11760 = and i32 %11759, 8191
  %11761 = icmp eq i32 %11760, 6489
  br i1 %11761, label %11762, label %11783

11762:                                            ; preds = %11757
  %11763 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11764 = load ptr, ptr %11763, align 8, !tbaa !17
  %11765 = getelementptr inbounds %struct.tree_int_cst, ptr %11764, i64 0, i32 1
  %11766 = load i64, ptr %11765, align 8, !tbaa !17
  %11767 = and i64 %11766, 4294967295
  %11768 = icmp eq i64 %11767, 4
  br i1 %11768, label %11769, label %11783

11769:                                            ; preds = %11762
  %11770 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1, i32 0, i32 2
  %11771 = load ptr, ptr %11770, align 8, !tbaa !17
  %11772 = getelementptr inbounds %struct.tree_common, ptr %11771, i64 0, i32 2
  %11773 = load ptr, ptr %11772, align 8, !tbaa !17
  %11774 = load i64, ptr %11773, align 8
  %11775 = and i64 %11774, 65535
  %11776 = icmp eq i64 %11775, 10
  br i1 %11776, label %11777, label %11783

11777:                                            ; preds = %11769
  %11778 = tail call ptr @build_fold_indirect_ref_loc(i32 noundef %0, ptr noundef nonnull %11771)
  %11779 = getelementptr inbounds %struct.tree_common, ptr %11778, i64 0, i32 2
  %11780 = load ptr, ptr %11779, align 8, !tbaa !17
  %11781 = tail call ptr @build_int_cst(ptr noundef %11780, i64 noundef 0) #24
  %11782 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11778, ptr noundef %11781)
  br label %14075

11783:                                            ; preds = %11754, %11757, %11762, %11769, %11751, %11747
  %11784 = load i64, ptr %46, align 8
  %11785 = and i64 %11784, 65535
  %11786 = icmp eq i64 %11785, 84
  br i1 %11786, label %11787, label %11826

11787:                                            ; preds = %11783
  %11788 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11789 = icmp eq i32 %11788, 0
  br i1 %11789, label %11826, label %11790

11790:                                            ; preds = %11787
  %11791 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11792 = load ptr, ptr %11791, align 8, !tbaa !17
  %11793 = load i64, ptr %11792, align 8
  %11794 = and i64 %11793, 65535
  %11795 = icmp eq i64 %11794, 23
  br i1 %11795, label %11796, label %11826

11796:                                            ; preds = %11790
  %11797 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11798 = load ptr, ptr %11797, align 8, !tbaa !17
  %11799 = getelementptr inbounds %struct.tree_common, ptr %11798, i64 0, i32 2
  %11800 = load ptr, ptr %11799, align 8, !tbaa !17
  %11801 = getelementptr inbounds %struct.tree_int_cst, ptr %11792, i64 0, i32 1, i32 1
  %11802 = load i64, ptr %11801, align 8, !tbaa !17
  %11803 = icmp eq i64 %11802, 0
  br i1 %11803, label %11804, label %11826

11804:                                            ; preds = %11796
  %11805 = getelementptr inbounds %struct.tree_int_cst, ptr %11792, i64 0, i32 1
  %11806 = load i64, ptr %11805, align 8, !tbaa !17
  %11807 = getelementptr inbounds %struct.tree_type, ptr %11800, i64 0, i32 6
  %11808 = load i32, ptr %11807, align 4
  %11809 = and i32 %11808, 1023
  %11810 = add nsw i32 %11809, -1
  %11811 = sext i32 %11810 to i64
  %11812 = icmp eq i64 %11806, %11811
  br i1 %11812, label %11813, label %11826

11813:                                            ; preds = %11804
  %11814 = load i64, ptr %11800, align 8
  %11815 = and i64 %11814, 2097152
  %11816 = icmp eq i64 %11815, 0
  br i1 %11816, label %11820, label %11817

11817:                                            ; preds = %11813
  %11818 = tail call ptr @signed_type_for(ptr noundef nonnull %11800) #24
  %11819 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %11818, ptr noundef nonnull %11798)
  br label %11820

11820:                                            ; preds = %11813, %11817
  %11821 = phi ptr [ %11819, %11817 ], [ %11798, %11813 ]
  %11822 = phi ptr [ %11818, %11817 ], [ %11800, %11813 ]
  %11823 = select i1 %108, i32 100, i32 97
  %11824 = tail call ptr @build_int_cst(ptr noundef %11822, i64 noundef 0) #24
  %11825 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11823, ptr noundef %2, ptr noundef %11821, ptr noundef %11824)
  br label %14075

11826:                                            ; preds = %11796, %11804, %11790, %11787, %11783
  %11827 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11828 = icmp ne i32 %11827, 0
  %11829 = load i64, ptr %46, align 8
  %11830 = and i64 %11829, 65535
  %11831 = icmp eq i64 %11830, 88
  %11832 = select i1 %11828, i1 %11831, i1 false
  br i1 %11832, label %11833, label %11839

11833:                                            ; preds = %11826
  %11834 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11835 = load ptr, ptr %11834, align 8, !tbaa !17
  %11836 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11837 = load ptr, ptr %11836, align 8, !tbaa !17
  %11838 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11835, ptr noundef %11837)
  br label %14075

11839:                                            ; preds = %11826
  br i1 %11831, label %11840, label %11854

11840:                                            ; preds = %11839
  %11841 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11842 = load ptr, ptr %11841, align 8, !tbaa !17
  %11843 = tail call i32 @operand_equal_p(ptr noundef %11842, ptr noundef nonnull %45, i32 noundef 0)
  %11844 = icmp eq i32 %11843, 0
  br i1 %11844, label %11845, label %11847

11845:                                            ; preds = %11840
  %11846 = load i64, ptr %46, align 8
  br label %11854

11847:                                            ; preds = %11840
  %11848 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11849 = load ptr, ptr %11848, align 8, !tbaa !17
  %11850 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11851 = load ptr, ptr %11850, align 8, !tbaa !17
  %11852 = tail call ptr @build_int_cst(ptr noundef %11851, i64 noundef 0) #24
  %11853 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11849, ptr noundef %11852)
  br label %14075

11854:                                            ; preds = %11845, %11839
  %11855 = phi i64 [ %11846, %11845 ], [ %11829, %11839 ]
  %11856 = and i64 %11855, 65535
  %11857 = icmp eq i64 %11856, 88
  br i1 %11857, label %11858, label %11885

11858:                                            ; preds = %11854
  %11859 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11860 = load ptr, ptr %11859, align 8, !tbaa !17
  %11861 = tail call i32 @operand_equal_p(ptr noundef %11860, ptr noundef nonnull %45, i32 noundef 0)
  %11862 = icmp eq i32 %11861, 0
  br i1 %11862, label %11885, label %11863

11863:                                            ; preds = %11858
  %11864 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11865 = load ptr, ptr %11864, align 8, !tbaa !17
  %11866 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %11867 = icmp eq i32 %11866, 0
  br i1 %11867, label %11880, label %11868

11868:                                            ; preds = %11863
  %11869 = load i64, ptr %11865, align 8
  %11870 = and i64 %11869, 131072
  %11871 = icmp eq i64 %11870, 0
  br i1 %11871, label %11872, label %11880

11872:                                            ; preds = %11868
  %11873 = load i64, ptr %45, align 8
  %11874 = and i64 %11873, 131072
  %11875 = icmp eq i64 %11874, 0
  br i1 %11875, label %11876, label %11880

11876:                                            ; preds = %11872
  %11877 = or i64 %11873, %11869
  %11878 = and i64 %11877, 65536
  %11879 = icmp eq i64 %11878, 0
  br i1 %11879, label %11880, label %11885

11880:                                            ; preds = %11868, %11872, %11863, %11876
  %11881 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11882 = load ptr, ptr %11881, align 8, !tbaa !17
  %11883 = tail call ptr @build_int_cst(ptr noundef %11882, i64 noundef 0) #24
  %11884 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11865, ptr noundef %11883)
  br label %14075

11885:                                            ; preds = %11876, %11858, %11854
  %11886 = load i64, ptr %46, align 8
  %11887 = trunc i64 %11886 to i16
  switch i16 %11887, label %11928 [
    i16 88, label %11888
    i16 89, label %11905
  ]

11888:                                            ; preds = %11885
  %11889 = load i64, ptr %45, align 8
  %11890 = and i64 %11889, 65535
  %11891 = icmp eq i64 %11890, 23
  br i1 %11891, label %11892, label %11928

11892:                                            ; preds = %11888
  %11893 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11894 = load ptr, ptr %11893, align 8, !tbaa !17
  %11895 = load i64, ptr %11894, align 8
  %11896 = and i64 %11895, 65535
  %11897 = icmp eq i64 %11896, 23
  br i1 %11897, label %11898, label %11928

11898:                                            ; preds = %11892
  %11899 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11900 = load ptr, ptr %11899, align 8, !tbaa !17
  %11901 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %11902 = load ptr, ptr %11901, align 8, !tbaa !17
  %11903 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %11902, ptr noundef nonnull %11894, ptr noundef nonnull %45)
  %11904 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %11900, ptr noundef %11903)
  br label %14075

11905:                                            ; preds = %11885
  %11906 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11907 = load ptr, ptr %11906, align 8, !tbaa !17
  %11908 = load i64, ptr %11907, align 8
  %11909 = and i64 %11908, 65535
  %11910 = icmp eq i64 %11909, 90
  br i1 %11910, label %11911, label %11928

11911:                                            ; preds = %11905
  %11912 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11913 = icmp eq i32 %11912, 0
  br i1 %11913, label %11928, label %11914

11914:                                            ; preds = %11911
  %11915 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11916 = load ptr, ptr %11915, align 8, !tbaa !17
  %11917 = tail call i32 @integer_pow2p(ptr noundef %11916) #24
  %11918 = icmp eq i32 %11917, 0
  br i1 %11918, label %11928, label %11919

11919:                                            ; preds = %11914
  %11920 = load ptr, ptr %11203, align 8, !tbaa !17
  %11921 = load ptr, ptr %11906, align 8, !tbaa !17
  %11922 = getelementptr inbounds %struct.tree_exp, ptr %11921, i64 0, i32 3
  %11923 = load ptr, ptr %11922, align 8, !tbaa !17
  %11924 = load ptr, ptr %11915, align 8, !tbaa !17
  %11925 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11920, ptr noundef %11923, ptr noundef %11924)
  %11926 = select i1 %108, i32 102, i32 101
  %11927 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11926, ptr noundef %2, ptr noundef %11925, ptr noundef nonnull %45)
  br label %14075

11928:                                            ; preds = %11885, %11888, %11892, %11914, %11911, %11905
  %11929 = load i64, ptr %46, align 8
  %11930 = and i64 %11929, 65535
  %11931 = icmp eq i64 %11930, 88
  br i1 %11931, label %11932, label %11960

11932:                                            ; preds = %11928
  %11933 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11934 = load ptr, ptr %11933, align 8, !tbaa !17
  %11935 = load i64, ptr %11934, align 8
  %11936 = and i64 %11935, 65535
  %11937 = icmp eq i64 %11936, 89
  br i1 %11937, label %11938, label %11960

11938:                                            ; preds = %11932
  %11939 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11940 = icmp eq i32 %11939, 0
  br i1 %11940, label %11960, label %11941

11941:                                            ; preds = %11938
  %11942 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11943 = load ptr, ptr %11942, align 8, !tbaa !17
  %11944 = tail call i32 @integer_pow2p(ptr noundef %11943) #24
  %11945 = icmp eq i32 %11944, 0
  br i1 %11945, label %11960, label %11946

11946:                                            ; preds = %11941
  %11947 = load ptr, ptr %11933, align 8, !tbaa !17
  %11948 = getelementptr inbounds %struct.tree_exp, ptr %11947, i64 1
  %11949 = load ptr, ptr %11948, align 8, !tbaa !17
  %11950 = load ptr, ptr %11942, align 8, !tbaa !17
  %11951 = tail call i32 @operand_equal_p(ptr noundef %11949, ptr noundef %11950, i32 noundef 1)
  %11952 = icmp eq i32 %11951, 0
  br i1 %11952, label %11960, label %11953

11953:                                            ; preds = %11946
  %11954 = load ptr, ptr %11933, align 8, !tbaa !17
  %11955 = select i1 %108, i32 102, i32 101
  %11956 = getelementptr inbounds %struct.tree_common, ptr %11954, i64 0, i32 2
  %11957 = load ptr, ptr %11956, align 8, !tbaa !17
  %11958 = tail call ptr @build_int_cst(ptr noundef %11957, i64 noundef 0) #24
  %11959 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11955, ptr noundef %2, ptr noundef %11954, ptr noundef %11958)
  br label %14075

11960:                                            ; preds = %11946, %11941, %11938, %11932, %11928
  %11961 = load i64, ptr %46, align 8
  %11962 = and i64 %11961, 65535
  %11963 = icmp eq i64 %11962, 89
  br i1 %11963, label %11964, label %11998

11964:                                            ; preds = %11960
  %11965 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %11966 = load ptr, ptr %11965, align 8, !tbaa !17
  %11967 = load i64, ptr %11966, align 8
  %11968 = and i64 %11967, 65535
  %11969 = icmp eq i64 %11968, 88
  br i1 %11969, label %11970, label %11998

11970:                                            ; preds = %11964
  %11971 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %11972 = icmp eq i32 %11971, 0
  br i1 %11972, label %11998, label %11973

11973:                                            ; preds = %11970
  %11974 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %11975 = load ptr, ptr %11974, align 8, !tbaa !17
  %11976 = tail call i32 @integer_pow2p(ptr noundef %11975) #24
  %11977 = icmp eq i32 %11976, 0
  br i1 %11977, label %11998, label %11978

11978:                                            ; preds = %11973
  %11979 = load ptr, ptr %11965, align 8, !tbaa !17
  %11980 = getelementptr inbounds %struct.tree_exp, ptr %11979, i64 1
  %11981 = load ptr, ptr %11980, align 8, !tbaa !17
  %11982 = load ptr, ptr %11974, align 8, !tbaa !17
  %11983 = tail call i32 @operand_equal_p(ptr noundef %11981, ptr noundef %11982, i32 noundef 1)
  %11984 = icmp eq i32 %11983, 0
  br i1 %11984, label %11998, label %11985

11985:                                            ; preds = %11978
  %11986 = load ptr, ptr %11965, align 8, !tbaa !17
  %11987 = getelementptr inbounds %struct.tree_exp, ptr %11986, i64 0, i32 3
  %11988 = load ptr, ptr %11987, align 8, !tbaa !17
  %11989 = getelementptr inbounds %struct.tree_common, ptr %11988, i64 0, i32 2
  %11990 = load ptr, ptr %11989, align 8, !tbaa !17
  %11991 = load ptr, ptr %11974, align 8, !tbaa !17
  %11992 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %11990, ptr noundef %11988, ptr noundef %11991)
  %11993 = select i1 %108, i32 102, i32 101
  %11994 = getelementptr inbounds %struct.tree_common, ptr %11992, i64 0, i32 2
  %11995 = load ptr, ptr %11994, align 8, !tbaa !17
  %11996 = tail call ptr @build_int_cst(ptr noundef %11995, i64 noundef 0) #24
  %11997 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %11993, ptr noundef %2, ptr noundef %11992, ptr noundef %11996)
  br label %14075

11998:                                            ; preds = %11978, %11973, %11970, %11964, %11960
  %11999 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %12000 = icmp eq i32 %11999, 0
  br i1 %12000, label %12008, label %12001

12001:                                            ; preds = %11998
  %12002 = tail call zeroext i8 @tree_expr_nonzero_p(ptr noundef nonnull %46)
  %12003 = icmp eq i8 %12002, 0
  br i1 %12003, label %12008, label %12004

12004:                                            ; preds = %12001
  %12005 = zext i1 %109 to i32
  %12006 = tail call ptr @constant_boolean_node(i32 noundef %12005, ptr noundef %2)
  %12007 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %12006, ptr noundef nonnull %46)
  br label %14075

12008:                                            ; preds = %12001, %11998
  %12009 = load i64, ptr %46, align 8
  %12010 = trunc i64 %12009 to i16
  switch i16 %12010, label %12068 [
    i16 79, label %12011
    i16 89, label %12021
  ]

12011:                                            ; preds = %12008
  %12012 = load i64, ptr %45, align 8
  %12013 = and i64 %12012, 65535
  %12014 = icmp eq i64 %12013, 79
  br i1 %12014, label %12015, label %12068

12015:                                            ; preds = %12011
  %12016 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %12017 = load ptr, ptr %12016, align 8, !tbaa !17
  %12018 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %12019 = load ptr, ptr %12018, align 8, !tbaa !17
  %12020 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12017, ptr noundef %12019)
  br label %14075

12021:                                            ; preds = %12008
  %12022 = load i64, ptr %45, align 8
  %12023 = and i64 %12022, 65535
  %12024 = icmp eq i64 %12023, 89
  br i1 %12024, label %12025, label %12068

12025:                                            ; preds = %12021
  %12026 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %12027 = load ptr, ptr %12026, align 8, !tbaa !17
  %12028 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %12029 = load ptr, ptr %12028, align 8, !tbaa !17
  %12030 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %12031 = load ptr, ptr %12030, align 8, !tbaa !17
  %12032 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %12033 = load ptr, ptr %12032, align 8, !tbaa !17
  %12034 = load ptr, ptr %11203, align 8, !tbaa !17
  %12035 = tail call i32 @operand_equal_p(ptr noundef %12029, ptr noundef %12033, i32 noundef 0)
  %12036 = icmp eq i32 %12035, 0
  br i1 %12036, label %12042, label %12037

12037:                                            ; preds = %12025
  %12038 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12034, ptr noundef %12027, ptr noundef %12031)
  %12039 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %12034, ptr noundef %12038, ptr noundef %12029)
  %12040 = tail call ptr @build_int_cst(ptr noundef %12034, i64 noundef 0) #24
  %12041 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12039, ptr noundef %12040)
  br label %14075

12042:                                            ; preds = %12025
  %12043 = tail call i32 @operand_equal_p(ptr noundef %12029, ptr noundef %12031, i32 noundef 0)
  %12044 = icmp eq i32 %12043, 0
  br i1 %12044, label %12050, label %12045

12045:                                            ; preds = %12042
  %12046 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12034, ptr noundef %12027, ptr noundef %12033)
  %12047 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %12034, ptr noundef %12046, ptr noundef %12029)
  %12048 = tail call ptr @build_int_cst(ptr noundef %12034, i64 noundef 0) #24
  %12049 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12047, ptr noundef %12048)
  br label %14075

12050:                                            ; preds = %12042
  %12051 = tail call i32 @operand_equal_p(ptr noundef %12027, ptr noundef %12033, i32 noundef 0)
  %12052 = icmp eq i32 %12051, 0
  br i1 %12052, label %12058, label %12053

12053:                                            ; preds = %12050
  %12054 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12034, ptr noundef %12029, ptr noundef %12031)
  %12055 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %12034, ptr noundef %12054, ptr noundef %12027)
  %12056 = tail call ptr @build_int_cst(ptr noundef %12034, i64 noundef 0) #24
  %12057 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12055, ptr noundef %12056)
  br label %14075

12058:                                            ; preds = %12050
  %12059 = tail call i32 @operand_equal_p(ptr noundef %12027, ptr noundef %12031, i32 noundef 0)
  %12060 = icmp eq i32 %12059, 0
  br i1 %12060, label %12061, label %12063

12061:                                            ; preds = %12058
  %12062 = load i64, ptr %46, align 8
  br label %12068

12063:                                            ; preds = %12058
  %12064 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12034, ptr noundef %12029, ptr noundef %12033)
  %12065 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %12034, ptr noundef %12064, ptr noundef %12027)
  %12066 = tail call ptr @build_int_cst(ptr noundef %12034, i64 noundef 0) #24
  %12067 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12065, ptr noundef %12066)
  br label %14075

12068:                                            ; preds = %12061, %12008, %12011, %12021
  %12069 = phi i64 [ %12062, %12061 ], [ %12009, %12008 ], [ %12009, %12011 ], [ %12009, %12021 ]
  %12070 = and i64 %12069, 65535
  %12071 = icmp eq i64 %12070, 88
  br i1 %12071, label %12072, label %12117

12072:                                            ; preds = %12068
  %12073 = load i64, ptr %45, align 8
  %12074 = and i64 %12073, 65535
  %12075 = icmp eq i64 %12074, 88
  br i1 %12075, label %12076, label %12117

12076:                                            ; preds = %12072
  %12077 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %12078 = load ptr, ptr %12077, align 8, !tbaa !17
  %12079 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %12080 = load ptr, ptr %12079, align 8, !tbaa !17
  %12081 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %12082 = load ptr, ptr %12081, align 8, !tbaa !17
  %12083 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %12084 = load ptr, ptr %12083, align 8, !tbaa !17
  %12085 = load ptr, ptr %11203, align 8, !tbaa !17
  %12086 = tail call i32 @operand_equal_p(ptr noundef %12080, ptr noundef %12084, i32 noundef 0)
  %12087 = icmp eq i32 %12086, 0
  br i1 %12087, label %12090, label %12088

12088:                                            ; preds = %12076
  %12089 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12078, ptr noundef %12082)
  br label %14075

12090:                                            ; preds = %12076
  %12091 = tail call i32 @operand_equal_p(ptr noundef %12080, ptr noundef %12082, i32 noundef 0)
  %12092 = icmp eq i32 %12091, 0
  br i1 %12092, label %12095, label %12093

12093:                                            ; preds = %12090
  %12094 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12078, ptr noundef %12084)
  br label %14075

12095:                                            ; preds = %12090
  %12096 = tail call i32 @operand_equal_p(ptr noundef %12078, ptr noundef %12084, i32 noundef 0)
  %12097 = icmp eq i32 %12096, 0
  br i1 %12097, label %12100, label %12098

12098:                                            ; preds = %12095
  %12099 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12080, ptr noundef %12082)
  br label %14075

12100:                                            ; preds = %12095
  %12101 = tail call i32 @operand_equal_p(ptr noundef %12078, ptr noundef %12082, i32 noundef 0)
  %12102 = icmp eq i32 %12101, 0
  br i1 %12102, label %12105, label %12103

12103:                                            ; preds = %12100
  %12104 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12080, ptr noundef %12084)
  br label %14075

12105:                                            ; preds = %12100
  %12106 = load i64, ptr %12080, align 8
  %12107 = and i64 %12106, 65535
  %12108 = icmp eq i64 %12107, 23
  br i1 %12108, label %12109, label %12117

12109:                                            ; preds = %12105
  %12110 = load i64, ptr %12084, align 8
  %12111 = and i64 %12110, 65535
  %12112 = icmp eq i64 %12111, 23
  br i1 %12112, label %12113, label %12117

12113:                                            ; preds = %12109
  %12114 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12085, ptr noundef nonnull %12080, ptr noundef nonnull %12084)
  %12115 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 88, ptr noundef %12085, ptr noundef %12078, ptr noundef %12114)
  %12116 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12115, ptr noundef %12082)
  br label %14075

12117:                                            ; preds = %12109, %12105, %12072, %12068
  %12118 = load i64, ptr %46, align 8
  %12119 = trunc i64 %12118 to i16
  switch i16 %12119, label %14075 [
    i16 123, label %12120
    i16 26, label %12120
  ]

12120:                                            ; preds = %12117, %12117
  %12121 = load i64, ptr %45, align 8
  %12122 = trunc i64 %12121 to i16
  switch i16 %12122, label %14075 [
    i16 123, label %12123
    i16 26, label %12123
  ]

12123:                                            ; preds = %12120, %12120
  %12124 = and i64 %12118, 65535
  %12125 = icmp eq i64 %12124, 123
  %12126 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %12127 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %12128 = getelementptr inbounds %struct.tree_complex, ptr %46, i64 0, i32 1
  %12129 = getelementptr inbounds %struct.tree_complex, ptr %46, i64 0, i32 2
  %12130 = select i1 %12125, ptr %12126, ptr %12128
  %12131 = select i1 %12125, ptr %12127, ptr %12129
  %12132 = load ptr, ptr %12131, align 8, !tbaa !17
  %12133 = load ptr, ptr %12130, align 8, !tbaa !17
  %12134 = and i64 %12121, 65535
  %12135 = icmp eq i64 %12134, 123
  %12136 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %12137 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %12138 = getelementptr inbounds %struct.tree_complex, ptr %45, i64 0, i32 1
  %12139 = getelementptr inbounds %struct.tree_complex, ptr %45, i64 0, i32 2
  %12140 = select i1 %12135, ptr %12136, ptr %12138
  %12141 = select i1 %12135, ptr %12137, ptr %12139
  %12142 = load ptr, ptr %12141, align 8, !tbaa !17
  %12143 = load ptr, ptr %12140, align 8, !tbaa !17
  %12144 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12133, ptr noundef %12143)
  %12145 = icmp eq ptr %12144, null
  br i1 %12145, label %12165, label %12146

12146:                                            ; preds = %12123
  %12147 = load i64, ptr %12144, align 8
  %12148 = and i64 %12147, 65535
  %12149 = icmp eq i64 %12148, 23
  br i1 %12149, label %12150, label %12165

12150:                                            ; preds = %12146
  %12151 = tail call i32 @integer_zerop(ptr noundef nonnull %12144) #24
  %12152 = icmp eq i32 %12151, 0
  br i1 %12152, label %12159, label %12153

12153:                                            ; preds = %12150
  br i1 %108, label %12154, label %12157

12154:                                            ; preds = %12153
  %12155 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !6
  %12156 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %12155, ptr noundef %12132, ptr noundef %12142)
  br label %14075

12157:                                            ; preds = %12153
  %12158 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %12132, ptr noundef %12142)
  br label %14075

12159:                                            ; preds = %12150
  br i1 %109, label %12160, label %12163

12160:                                            ; preds = %12159
  %12161 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !6
  %12162 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %12161, ptr noundef %12132, ptr noundef %12142)
  br label %14075

12163:                                            ; preds = %12159
  %12164 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %12132, ptr noundef %12142)
  br label %14075

12165:                                            ; preds = %12146, %12123
  %12166 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %12132, ptr noundef %12142)
  %12167 = icmp eq ptr %12166, null
  br i1 %12167, label %14075, label %12168

12168:                                            ; preds = %12165
  %12169 = load i64, ptr %12166, align 8
  %12170 = and i64 %12169, 65535
  %12171 = icmp eq i64 %12170, 23
  br i1 %12171, label %12172, label %14075

12172:                                            ; preds = %12168
  %12173 = tail call i32 @integer_zerop(ptr noundef nonnull %12166) #24
  %12174 = icmp eq i32 %12173, 0
  br i1 %12174, label %12181, label %12175

12175:                                            ; preds = %12172
  br i1 %108, label %12176, label %12179

12176:                                            ; preds = %12175
  %12177 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !6
  %12178 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %12177, ptr noundef %12133, ptr noundef %12143)
  br label %14075

12179:                                            ; preds = %12175
  %12180 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %12133, ptr noundef %12143)
  br label %14075

12181:                                            ; preds = %12172
  br i1 %109, label %12182, label %12185

12182:                                            ; preds = %12181
  %12183 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !6
  %12184 = tail call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %12183, ptr noundef %12133, ptr noundef %12143)
  br label %14075

12185:                                            ; preds = %12181
  %12186 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %12133, ptr noundef %12143)
  br label %14075

12187:                                            ; preds = %305, %305, %305, %305
  %12188 = tail call fastcc ptr @fold_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %12189 = icmp eq ptr %12188, null
  br i1 %12189, label %12190, label %14075

12190:                                            ; preds = %12187
  %12191 = load i64, ptr %46, align 8
  %12192 = trunc i64 %12191 to i32
  %12193 = and i32 %12192, 65535
  %12194 = add nsw i32 %12193, -63
  %12195 = icmp ult i32 %12194, 2
  br i1 %12195, label %12196, label %13377

12196:                                            ; preds = %12190
  %12197 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %12198 = load ptr, ptr %12197, align 8, !tbaa !17
  %12199 = tail call i32 @operand_equal_p(ptr noundef %12198, ptr noundef %45, i32 noundef 0)
  %12200 = icmp eq i32 %12199, 0
  br i1 %12200, label %13377, label %12201

12201:                                            ; preds = %12196
  %12202 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 1
  %12203 = load ptr, ptr %12202, align 8, !tbaa !17
  %12204 = load i64, ptr %12203, align 8
  %12205 = and i64 %12204, 65535
  %12206 = icmp eq i64 %12205, 24
  br i1 %12206, label %12207, label %12511

12207:                                            ; preds = %12201
  %12208 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %12209 = icmp eq i32 %12208, 0
  br i1 %12209, label %12531, label %12210

12210:                                            ; preds = %12207
  %12211 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %12212 = load ptr, ptr %12211, align 8, !tbaa !17
  %12213 = load i64, ptr %12212, align 8
  %12214 = and i64 %12213, 65535
  %12215 = icmp eq i64 %12214, 14
  br i1 %12215, label %12216, label %12219

12216:                                            ; preds = %12210
  %12217 = tail call i32 @vector_type_mode(ptr noundef nonnull %12212) #24
  %12218 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12224

12219:                                            ; preds = %12210
  %12220 = getelementptr inbounds %struct.tree_type, ptr %12212, i64 0, i32 6
  %12221 = load i32, ptr %12220, align 4
  %12222 = lshr i32 %12221, 16
  %12223 = and i32 %12222, 255
  br label %12224

12224:                                            ; preds = %12219, %12216
  %12225 = phi ptr [ %12218, %12216 ], [ %12212, %12219 ]
  %12226 = phi i32 [ %12217, %12216 ], [ %12223, %12219 ]
  %12227 = zext i32 %12226 to i64
  %12228 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12227
  %12229 = load i8, ptr %12228, align 1, !tbaa !17
  %12230 = icmp eq i8 %12229, 8
  br i1 %12230, label %12290, label %12231

12231:                                            ; preds = %12224
  %12232 = load i64, ptr %12225, align 8
  %12233 = and i64 %12232, 65535
  %12234 = icmp eq i64 %12233, 14
  br i1 %12234, label %12235, label %12238

12235:                                            ; preds = %12231
  %12236 = tail call i32 @vector_type_mode(ptr noundef nonnull %12225) #24
  %12237 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12243

12238:                                            ; preds = %12231
  %12239 = getelementptr inbounds %struct.tree_type, ptr %12225, i64 0, i32 6
  %12240 = load i32, ptr %12239, align 4
  %12241 = lshr i32 %12240, 16
  %12242 = and i32 %12241, 255
  br label %12243

12243:                                            ; preds = %12238, %12235
  %12244 = phi ptr [ %12237, %12235 ], [ %12225, %12238 ]
  %12245 = phi i32 [ %12236, %12235 ], [ %12242, %12238 ]
  %12246 = zext i32 %12245 to i64
  %12247 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12246
  %12248 = load i8, ptr %12247, align 1, !tbaa !17
  %12249 = icmp eq i8 %12248, 9
  br i1 %12249, label %12290, label %12250

12250:                                            ; preds = %12243
  %12251 = load i64, ptr %12244, align 8
  %12252 = and i64 %12251, 65535
  %12253 = icmp eq i64 %12252, 14
  br i1 %12253, label %12254, label %12257

12254:                                            ; preds = %12250
  %12255 = tail call i32 @vector_type_mode(ptr noundef nonnull %12244) #24
  %12256 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12262

12257:                                            ; preds = %12250
  %12258 = getelementptr inbounds %struct.tree_type, ptr %12244, i64 0, i32 6
  %12259 = load i32, ptr %12258, align 4
  %12260 = lshr i32 %12259, 16
  %12261 = and i32 %12260, 255
  br label %12262

12262:                                            ; preds = %12257, %12254
  %12263 = phi ptr [ %12256, %12254 ], [ %12244, %12257 ]
  %12264 = phi i32 [ %12255, %12254 ], [ %12261, %12257 ]
  %12265 = zext i32 %12264 to i64
  %12266 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12265
  %12267 = load i8, ptr %12266, align 1, !tbaa !17
  %12268 = icmp eq i8 %12267, 11
  br i1 %12268, label %12290, label %12269

12269:                                            ; preds = %12262
  %12270 = load i64, ptr %12263, align 8
  %12271 = and i64 %12270, 65535
  %12272 = icmp eq i64 %12271, 14
  br i1 %12272, label %12273, label %12275

12273:                                            ; preds = %12269
  %12274 = tail call i32 @vector_type_mode(ptr noundef nonnull %12263) #24
  br label %12280

12275:                                            ; preds = %12269
  %12276 = getelementptr inbounds %struct.tree_type, ptr %12263, i64 0, i32 6
  %12277 = load i32, ptr %12276, align 4
  %12278 = lshr i32 %12277, 16
  %12279 = and i32 %12278, 255
  br label %12280

12280:                                            ; preds = %12275, %12273
  %12281 = phi i32 [ %12274, %12273 ], [ %12279, %12275 ]
  %12282 = zext i32 %12281 to i64
  %12283 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12282
  %12284 = load i8, ptr %12283, align 1, !tbaa !17
  %12285 = icmp eq i8 %12284, 17
  br i1 %12285, label %12288, label %12286

12286:                                            ; preds = %12280
  %12287 = load ptr, ptr %12202, align 8, !tbaa !17
  br label %12531

12288:                                            ; preds = %12280
  %12289 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12290

12290:                                            ; preds = %12288, %12262, %12243, %12224
  %12291 = phi ptr [ %12289, %12288 ], [ %12263, %12262 ], [ %12244, %12243 ], [ %12225, %12224 ]
  %12292 = load i64, ptr %12291, align 8
  %12293 = and i64 %12292, 65535
  %12294 = icmp eq i64 %12293, 14
  br i1 %12294, label %12295, label %12298

12295:                                            ; preds = %12290
  %12296 = tail call i32 @vector_type_mode(ptr noundef nonnull %12291) #24
  %12297 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12303

12298:                                            ; preds = %12290
  %12299 = getelementptr inbounds %struct.tree_type, ptr %12291, i64 0, i32 6
  %12300 = load i32, ptr %12299, align 4
  %12301 = lshr i32 %12300, 16
  %12302 = and i32 %12301, 255
  br label %12303

12303:                                            ; preds = %12298, %12295
  %12304 = phi ptr [ %12297, %12295 ], [ %12291, %12298 ]
  %12305 = phi i32 [ %12296, %12295 ], [ %12302, %12298 ]
  %12306 = zext i32 %12305 to i64
  %12307 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12306
  %12308 = load i8, ptr %12307, align 1, !tbaa !17
  %12309 = icmp eq i8 %12308, 8
  br i1 %12309, label %12329, label %12310

12310:                                            ; preds = %12303
  %12311 = load i64, ptr %12304, align 8
  %12312 = and i64 %12311, 65535
  %12313 = icmp eq i64 %12312, 14
  br i1 %12313, label %12314, label %12317

12314:                                            ; preds = %12310
  %12315 = tail call i32 @vector_type_mode(ptr noundef nonnull %12304) #24
  %12316 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12322

12317:                                            ; preds = %12310
  %12318 = getelementptr inbounds %struct.tree_type, ptr %12304, i64 0, i32 6
  %12319 = load i32, ptr %12318, align 4
  %12320 = lshr i32 %12319, 16
  %12321 = and i32 %12320, 255
  br label %12322

12322:                                            ; preds = %12317, %12314
  %12323 = phi ptr [ %12316, %12314 ], [ %12304, %12317 ]
  %12324 = phi i32 [ %12315, %12314 ], [ %12321, %12317 ]
  %12325 = zext i32 %12324 to i64
  %12326 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12325
  %12327 = load i8, ptr %12326, align 1, !tbaa !17
  %12328 = icmp eq i8 %12327, 9
  br i1 %12328, label %12329, label %12341

12329:                                            ; preds = %12322, %12303
  %12330 = phi ptr [ %12323, %12322 ], [ %12304, %12303 ]
  %12331 = load i64, ptr %12330, align 8
  %12332 = and i64 %12331, 65535
  %12333 = icmp eq i64 %12332, 14
  br i1 %12333, label %12334, label %12336

12334:                                            ; preds = %12329
  %12335 = tail call i32 @vector_type_mode(ptr noundef nonnull %12330) #24
  br label %12358

12336:                                            ; preds = %12329
  %12337 = getelementptr inbounds %struct.tree_type, ptr %12330, i64 0, i32 6
  %12338 = load i32, ptr %12337, align 4
  %12339 = lshr i32 %12338, 16
  %12340 = and i32 %12339, 255
  br label %12358

12341:                                            ; preds = %12322
  %12342 = load i64, ptr %12323, align 8
  %12343 = and i64 %12342, 65535
  %12344 = icmp eq i64 %12343, 14
  br i1 %12344, label %12345, label %12347

12345:                                            ; preds = %12341
  %12346 = tail call i32 @vector_type_mode(ptr noundef nonnull %12323) #24
  br label %12352

12347:                                            ; preds = %12341
  %12348 = getelementptr inbounds %struct.tree_type, ptr %12323, i64 0, i32 6
  %12349 = load i32, ptr %12348, align 4
  %12350 = lshr i32 %12349, 16
  %12351 = and i32 %12350, 255
  br label %12352

12352:                                            ; preds = %12347, %12345
  %12353 = phi i32 [ %12346, %12345 ], [ %12351, %12347 ]
  %12354 = zext i32 %12353 to i64
  %12355 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12354
  %12356 = load i8, ptr %12355, align 1, !tbaa !17
  %12357 = zext i8 %12356 to i32
  br label %12358

12358:                                            ; preds = %12334, %12336, %12352
  %12359 = phi i32 [ %12357, %12352 ], [ %12335, %12334 ], [ %12340, %12336 ]
  %12360 = zext i32 %12359 to i64
  %12361 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12360
  %12362 = load i8, ptr %12361, align 1, !tbaa !17
  %12363 = icmp eq i8 %12362, 9
  %12364 = load ptr, ptr %12211, align 8, !tbaa !17
  %12365 = load i64, ptr %12364, align 8
  %12366 = and i64 %12365, 65535
  %12367 = icmp eq i64 %12366, 14
  br i1 %12363, label %12368, label %12432

12368:                                            ; preds = %12358
  br i1 %12367, label %12369, label %12372

12369:                                            ; preds = %12368
  %12370 = tail call i32 @vector_type_mode(ptr noundef nonnull %12364) #24
  %12371 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12377

12372:                                            ; preds = %12368
  %12373 = getelementptr inbounds %struct.tree_type, ptr %12364, i64 0, i32 6
  %12374 = load i32, ptr %12373, align 4
  %12375 = lshr i32 %12374, 16
  %12376 = and i32 %12375, 255
  br label %12377

12377:                                            ; preds = %12372, %12369
  %12378 = phi ptr [ %12371, %12369 ], [ %12364, %12372 ]
  %12379 = phi i32 [ %12370, %12369 ], [ %12376, %12372 ]
  %12380 = zext i32 %12379 to i64
  %12381 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12380
  %12382 = load i8, ptr %12381, align 1, !tbaa !17
  %12383 = icmp eq i8 %12382, 8
  br i1 %12383, label %12403, label %12384

12384:                                            ; preds = %12377
  %12385 = load i64, ptr %12378, align 8
  %12386 = and i64 %12385, 65535
  %12387 = icmp eq i64 %12386, 14
  br i1 %12387, label %12388, label %12391

12388:                                            ; preds = %12384
  %12389 = tail call i32 @vector_type_mode(ptr noundef nonnull %12378) #24
  %12390 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12396

12391:                                            ; preds = %12384
  %12392 = getelementptr inbounds %struct.tree_type, ptr %12378, i64 0, i32 6
  %12393 = load i32, ptr %12392, align 4
  %12394 = lshr i32 %12393, 16
  %12395 = and i32 %12394, 255
  br label %12396

12396:                                            ; preds = %12391, %12388
  %12397 = phi ptr [ %12390, %12388 ], [ %12378, %12391 ]
  %12398 = phi i32 [ %12389, %12388 ], [ %12395, %12391 ]
  %12399 = zext i32 %12398 to i64
  %12400 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12399
  %12401 = load i8, ptr %12400, align 1, !tbaa !17
  %12402 = icmp eq i8 %12401, 9
  br i1 %12402, label %12403, label %12415

12403:                                            ; preds = %12396, %12377
  %12404 = phi ptr [ %12397, %12396 ], [ %12378, %12377 ]
  %12405 = load i64, ptr %12404, align 8
  %12406 = and i64 %12405, 65535
  %12407 = icmp eq i64 %12406, 14
  br i1 %12407, label %12408, label %12410

12408:                                            ; preds = %12403
  %12409 = tail call i32 @vector_type_mode(ptr noundef nonnull %12404) #24
  br label %12496

12410:                                            ; preds = %12403
  %12411 = getelementptr inbounds %struct.tree_type, ptr %12404, i64 0, i32 6
  %12412 = load i32, ptr %12411, align 4
  %12413 = lshr i32 %12412, 16
  %12414 = and i32 %12413, 255
  br label %12496

12415:                                            ; preds = %12396
  %12416 = load i64, ptr %12397, align 8
  %12417 = and i64 %12416, 65535
  %12418 = icmp eq i64 %12417, 14
  br i1 %12418, label %12419, label %12421

12419:                                            ; preds = %12415
  %12420 = tail call i32 @vector_type_mode(ptr noundef nonnull %12397) #24
  br label %12426

12421:                                            ; preds = %12415
  %12422 = getelementptr inbounds %struct.tree_type, ptr %12397, i64 0, i32 6
  %12423 = load i32, ptr %12422, align 4
  %12424 = lshr i32 %12423, 16
  %12425 = and i32 %12424, 255
  br label %12426

12426:                                            ; preds = %12421, %12419
  %12427 = phi i32 [ %12420, %12419 ], [ %12425, %12421 ]
  %12428 = zext i32 %12427 to i64
  %12429 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12428
  %12430 = load i8, ptr %12429, align 1, !tbaa !17
  %12431 = zext i8 %12430 to i32
  br label %12496

12432:                                            ; preds = %12358
  br i1 %12367, label %12433, label %12436

12433:                                            ; preds = %12432
  %12434 = tail call i32 @vector_type_mode(ptr noundef nonnull %12364) #24
  %12435 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12441

12436:                                            ; preds = %12432
  %12437 = getelementptr inbounds %struct.tree_type, ptr %12364, i64 0, i32 6
  %12438 = load i32, ptr %12437, align 4
  %12439 = lshr i32 %12438, 16
  %12440 = and i32 %12439, 255
  br label %12441

12441:                                            ; preds = %12436, %12433
  %12442 = phi ptr [ %12435, %12433 ], [ %12364, %12436 ]
  %12443 = phi i32 [ %12434, %12433 ], [ %12440, %12436 ]
  %12444 = zext i32 %12443 to i64
  %12445 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12444
  %12446 = load i8, ptr %12445, align 1, !tbaa !17
  %12447 = icmp eq i8 %12446, 8
  br i1 %12447, label %12467, label %12448

12448:                                            ; preds = %12441
  %12449 = load i64, ptr %12442, align 8
  %12450 = and i64 %12449, 65535
  %12451 = icmp eq i64 %12450, 14
  br i1 %12451, label %12452, label %12455

12452:                                            ; preds = %12448
  %12453 = tail call i32 @vector_type_mode(ptr noundef nonnull %12442) #24
  %12454 = load ptr, ptr %12211, align 8, !tbaa !17
  br label %12460

12455:                                            ; preds = %12448
  %12456 = getelementptr inbounds %struct.tree_type, ptr %12442, i64 0, i32 6
  %12457 = load i32, ptr %12456, align 4
  %12458 = lshr i32 %12457, 16
  %12459 = and i32 %12458, 255
  br label %12460

12460:                                            ; preds = %12455, %12452
  %12461 = phi ptr [ %12454, %12452 ], [ %12442, %12455 ]
  %12462 = phi i32 [ %12453, %12452 ], [ %12459, %12455 ]
  %12463 = zext i32 %12462 to i64
  %12464 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12463
  %12465 = load i8, ptr %12464, align 1, !tbaa !17
  %12466 = icmp eq i8 %12465, 9
  br i1 %12466, label %12467, label %12479

12467:                                            ; preds = %12460, %12441
  %12468 = phi ptr [ %12461, %12460 ], [ %12442, %12441 ]
  %12469 = load i64, ptr %12468, align 8
  %12470 = and i64 %12469, 65535
  %12471 = icmp eq i64 %12470, 14
  br i1 %12471, label %12472, label %12474

12472:                                            ; preds = %12467
  %12473 = tail call i32 @vector_type_mode(ptr noundef nonnull %12468) #24
  br label %12496

12474:                                            ; preds = %12467
  %12475 = getelementptr inbounds %struct.tree_type, ptr %12468, i64 0, i32 6
  %12476 = load i32, ptr %12475, align 4
  %12477 = lshr i32 %12476, 16
  %12478 = and i32 %12477, 255
  br label %12496

12479:                                            ; preds = %12460
  %12480 = load i64, ptr %12461, align 8
  %12481 = and i64 %12480, 65535
  %12482 = icmp eq i64 %12481, 14
  br i1 %12482, label %12483, label %12485

12483:                                            ; preds = %12479
  %12484 = tail call i32 @vector_type_mode(ptr noundef nonnull %12461) #24
  br label %12490

12485:                                            ; preds = %12479
  %12486 = getelementptr inbounds %struct.tree_type, ptr %12461, i64 0, i32 6
  %12487 = load i32, ptr %12486, align 4
  %12488 = lshr i32 %12487, 16
  %12489 = and i32 %12488, 255
  br label %12490

12490:                                            ; preds = %12485, %12483
  %12491 = phi i32 [ %12484, %12483 ], [ %12489, %12485 ]
  %12492 = zext i32 %12491 to i64
  %12493 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12492
  %12494 = load i8, ptr %12493, align 1, !tbaa !17
  %12495 = zext i8 %12494 to i32
  br label %12496

12496:                                            ; preds = %12490, %12474, %12472, %12426, %12410, %12408
  %12497 = phi i32 [ %12431, %12426 ], [ %12409, %12408 ], [ %12414, %12410 ], [ %12495, %12490 ], [ %12473, %12472 ], [ %12478, %12474 ]
  %12498 = add i32 %12497, -38
  %12499 = zext i32 %12498 to i64
  %12500 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %12499
  %12501 = load ptr, ptr %12500, align 8, !tbaa !6
  %12502 = getelementptr inbounds %struct.real_format, ptr %12501, i64 0, i32 11
  %12503 = load i8, ptr %12502, align 2, !tbaa !36
  %12504 = icmp eq i8 %12503, 0
  %12505 = load i32, ptr @flag_finite_math_only, align 4
  %12506 = icmp ne i32 %12505, 0
  %12507 = select i1 %12504, i1 true, i1 %12506
  %12508 = load ptr, ptr %12202, align 8, !tbaa !17
  br i1 %12507, label %12531, label %12509

12509:                                            ; preds = %12496
  %12510 = load i64, ptr %12508, align 8
  br label %12511

12511:                                            ; preds = %12509, %12201
  %12512 = phi i64 [ %12510, %12509 ], [ %12204, %12201 ]
  %12513 = phi ptr [ %12508, %12509 ], [ %12203, %12201 ]
  %12514 = and i64 %12512, 65535
  %12515 = icmp eq i64 %12514, 23
  br i1 %12515, label %12516, label %13377

12516:                                            ; preds = %12511
  %12517 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %12518 = load ptr, ptr %12517, align 8, !tbaa !17
  %12519 = load i64, ptr %12518, align 8
  %12520 = and i64 %12519, 2097152
  %12521 = icmp eq i64 %12520, 0
  %12522 = load i32, ptr @flag_wrapv, align 4
  %12523 = icmp eq i32 %12522, 0
  %12524 = select i1 %12521, i1 %12523, i1 false
  %12525 = load i32, ptr @flag_trapv, align 4
  %12526 = icmp eq i32 %12525, 0
  %12527 = select i1 %12524, i1 %12526, i1 false
  %12528 = load i32, ptr @flag_strict_overflow, align 4
  %12529 = icmp ne i32 %12528, 0
  %12530 = select i1 %12527, i1 %12529, i1 false
  br i1 %12530, label %12531, label %13377

12531:                                            ; preds = %12286, %12516, %12496, %12207
  %12532 = phi ptr [ %12287, %12286 ], [ %12513, %12516 ], [ %12508, %12496 ], [ %12203, %12207 ]
  %12533 = load i64, ptr %46, align 8
  %12534 = trunc i64 %12533 to i32
  %12535 = and i32 %12534, 65535
  %12536 = load i64, ptr %12532, align 8
  %12537 = and i64 %12536, 65535
  %12538 = icmp eq i64 %12537, 24
  br i1 %12538, label %12539, label %12545

12539:                                            ; preds = %12531
  %12540 = getelementptr inbounds %struct.tree_real_cst, ptr %12532, i64 0, i32 1
  %12541 = load ptr, ptr %12540, align 8, !tbaa !17
  %12542 = tail call zeroext i8 @real_isneg(ptr noundef %12541) #24
  %12543 = icmp eq i8 %12542, 0
  %12544 = select i1 %12543, i32 1, i32 -1
  br label %12547

12545:                                            ; preds = %12531
  %12546 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %12532) #24
  br label %12547

12547:                                            ; preds = %12545, %12539
  %12548 = phi i32 [ %12544, %12539 ], [ %12546, %12545 ]
  %12549 = icmp eq i32 %1, 99
  br i1 %12549, label %12550, label %12580

12550:                                            ; preds = %12547
  %12551 = icmp eq i32 %12535, 64
  %12552 = icmp sgt i32 %12548, -1
  %12553 = select i1 %12551, i1 %12552, i1 false
  br i1 %12553, label %12558, label %12554

12554:                                            ; preds = %12550
  %12555 = icmp eq i32 %12535, 63
  %12556 = icmp slt i32 %12548, 1
  %12557 = select i1 %12555, i1 %12556, i1 false
  br i1 %12557, label %12558, label %12612

12558:                                            ; preds = %12554, %12550
  %12559 = load i64, ptr %12532, align 8
  %12560 = and i64 %12559, 65535
  %12561 = icmp eq i64 %12560, 23
  br i1 %12561, label %12562, label %12578

12562:                                            ; preds = %12558
  %12563 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %12564 = load ptr, ptr %12563, align 8, !tbaa !17
  %12565 = load i64, ptr %12564, align 8
  %12566 = and i64 %12565, 2097152
  %12567 = icmp eq i64 %12566, 0
  %12568 = load i32, ptr @flag_wrapv, align 4
  %12569 = icmp eq i32 %12568, 0
  %12570 = select i1 %12567, i1 %12569, i1 false
  %12571 = load i32, ptr @flag_trapv, align 4
  %12572 = icmp eq i32 %12571, 0
  %12573 = select i1 %12570, i1 %12572, i1 false
  %12574 = load i32, ptr @flag_strict_overflow, align 4
  %12575 = icmp ne i32 %12574, 0
  %12576 = select i1 %12573, i1 %12575, i1 false
  br i1 %12576, label %12577, label %12578

12577:                                            ; preds = %12562
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.11, i32 noundef 1)
  br label %12578

12578:                                            ; preds = %12577, %12562, %12558
  %12579 = tail call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %14075

12580:                                            ; preds = %12547
  %12581 = icmp eq i32 %1, 97
  br i1 %12581, label %12582, label %12612

12582:                                            ; preds = %12580
  %12583 = icmp eq i32 %12535, 63
  %12584 = icmp sgt i32 %12548, -1
  %12585 = select i1 %12583, i1 %12584, i1 false
  br i1 %12585, label %12590, label %12586

12586:                                            ; preds = %12582
  %12587 = icmp eq i32 %12535, 64
  %12588 = icmp slt i32 %12548, 1
  %12589 = select i1 %12587, i1 %12588, i1 false
  br i1 %12589, label %12590, label %12612

12590:                                            ; preds = %12586, %12582
  %12591 = load i64, ptr %12532, align 8
  %12592 = and i64 %12591, 65535
  %12593 = icmp eq i64 %12592, 23
  br i1 %12593, label %12594, label %12610

12594:                                            ; preds = %12590
  %12595 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %12596 = load ptr, ptr %12595, align 8, !tbaa !17
  %12597 = load i64, ptr %12596, align 8
  %12598 = and i64 %12597, 2097152
  %12599 = icmp eq i64 %12598, 0
  %12600 = load i32, ptr @flag_wrapv, align 4
  %12601 = icmp eq i32 %12600, 0
  %12602 = select i1 %12599, i1 %12601, i1 false
  %12603 = load i32, ptr @flag_trapv, align 4
  %12604 = icmp eq i32 %12603, 0
  %12605 = select i1 %12602, i1 %12604, i1 false
  %12606 = load i32, ptr @flag_strict_overflow, align 4
  %12607 = icmp ne i32 %12606, 0
  %12608 = select i1 %12605, i1 %12607, i1 false
  br i1 %12608, label %12609, label %12610

12609:                                            ; preds = %12594
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.12, i32 noundef 1)
  br label %12610

12610:                                            ; preds = %12609, %12594, %12590
  %12611 = tail call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %14075

12612:                                            ; preds = %12554, %12586, %12580
  %12613 = phi i1 [ true, %12586 ], [ false, %12580 ], [ false, %12554 ]
  %12614 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %12615 = load ptr, ptr %12614, align 8, !tbaa !17
  %12616 = load i64, ptr %12615, align 8
  %12617 = and i64 %12616, 65535
  %12618 = icmp eq i64 %12617, 14
  br i1 %12618, label %12619, label %12622

12619:                                            ; preds = %12612
  %12620 = tail call i32 @vector_type_mode(ptr noundef nonnull %12615) #24
  %12621 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12627

12622:                                            ; preds = %12612
  %12623 = getelementptr inbounds %struct.tree_type, ptr %12615, i64 0, i32 6
  %12624 = load i32, ptr %12623, align 4
  %12625 = lshr i32 %12624, 16
  %12626 = and i32 %12625, 255
  br label %12627

12627:                                            ; preds = %12622, %12619
  %12628 = phi ptr [ %12621, %12619 ], [ %12615, %12622 ]
  %12629 = phi i32 [ %12620, %12619 ], [ %12626, %12622 ]
  %12630 = zext i32 %12629 to i64
  %12631 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12630
  %12632 = load i8, ptr %12631, align 1, !tbaa !17
  %12633 = icmp eq i8 %12632, 8
  br i1 %12633, label %12691, label %12634

12634:                                            ; preds = %12627
  %12635 = load i64, ptr %12628, align 8
  %12636 = and i64 %12635, 65535
  %12637 = icmp eq i64 %12636, 14
  br i1 %12637, label %12638, label %12641

12638:                                            ; preds = %12634
  %12639 = tail call i32 @vector_type_mode(ptr noundef nonnull %12628) #24
  %12640 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12646

12641:                                            ; preds = %12634
  %12642 = getelementptr inbounds %struct.tree_type, ptr %12628, i64 0, i32 6
  %12643 = load i32, ptr %12642, align 4
  %12644 = lshr i32 %12643, 16
  %12645 = and i32 %12644, 255
  br label %12646

12646:                                            ; preds = %12641, %12638
  %12647 = phi ptr [ %12640, %12638 ], [ %12628, %12641 ]
  %12648 = phi i32 [ %12639, %12638 ], [ %12645, %12641 ]
  %12649 = zext i32 %12648 to i64
  %12650 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12649
  %12651 = load i8, ptr %12650, align 1, !tbaa !17
  %12652 = icmp eq i8 %12651, 9
  br i1 %12652, label %12691, label %12653

12653:                                            ; preds = %12646
  %12654 = load i64, ptr %12647, align 8
  %12655 = and i64 %12654, 65535
  %12656 = icmp eq i64 %12655, 14
  br i1 %12656, label %12657, label %12660

12657:                                            ; preds = %12653
  %12658 = tail call i32 @vector_type_mode(ptr noundef nonnull %12647) #24
  %12659 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12665

12660:                                            ; preds = %12653
  %12661 = getelementptr inbounds %struct.tree_type, ptr %12647, i64 0, i32 6
  %12662 = load i32, ptr %12661, align 4
  %12663 = lshr i32 %12662, 16
  %12664 = and i32 %12663, 255
  br label %12665

12665:                                            ; preds = %12660, %12657
  %12666 = phi ptr [ %12659, %12657 ], [ %12647, %12660 ]
  %12667 = phi i32 [ %12658, %12657 ], [ %12664, %12660 ]
  %12668 = zext i32 %12667 to i64
  %12669 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12668
  %12670 = load i8, ptr %12669, align 1, !tbaa !17
  %12671 = icmp eq i8 %12670, 11
  br i1 %12671, label %12691, label %12672

12672:                                            ; preds = %12665
  %12673 = load i64, ptr %12666, align 8
  %12674 = and i64 %12673, 65535
  %12675 = icmp eq i64 %12674, 14
  br i1 %12675, label %12676, label %12678

12676:                                            ; preds = %12672
  %12677 = tail call i32 @vector_type_mode(ptr noundef nonnull %12666) #24
  br label %12683

12678:                                            ; preds = %12672
  %12679 = getelementptr inbounds %struct.tree_type, ptr %12666, i64 0, i32 6
  %12680 = load i32, ptr %12679, align 4
  %12681 = lshr i32 %12680, 16
  %12682 = and i32 %12681, 255
  br label %12683

12683:                                            ; preds = %12678, %12676
  %12684 = phi i32 [ %12677, %12676 ], [ %12682, %12678 ]
  %12685 = zext i32 %12684 to i64
  %12686 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12685
  %12687 = load i8, ptr %12686, align 1, !tbaa !17
  %12688 = icmp eq i8 %12687, 17
  br i1 %12688, label %12689, label %12911

12689:                                            ; preds = %12683
  %12690 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12691

12691:                                            ; preds = %12689, %12665, %12646, %12627
  %12692 = phi ptr [ %12690, %12689 ], [ %12666, %12665 ], [ %12647, %12646 ], [ %12628, %12627 ]
  %12693 = load i64, ptr %12692, align 8
  %12694 = and i64 %12693, 65535
  %12695 = icmp eq i64 %12694, 14
  br i1 %12695, label %12696, label %12699

12696:                                            ; preds = %12691
  %12697 = tail call i32 @vector_type_mode(ptr noundef nonnull %12692) #24
  %12698 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12704

12699:                                            ; preds = %12691
  %12700 = getelementptr inbounds %struct.tree_type, ptr %12692, i64 0, i32 6
  %12701 = load i32, ptr %12700, align 4
  %12702 = lshr i32 %12701, 16
  %12703 = and i32 %12702, 255
  br label %12704

12704:                                            ; preds = %12699, %12696
  %12705 = phi ptr [ %12698, %12696 ], [ %12692, %12699 ]
  %12706 = phi i32 [ %12697, %12696 ], [ %12703, %12699 ]
  %12707 = zext i32 %12706 to i64
  %12708 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12707
  %12709 = load i8, ptr %12708, align 1, !tbaa !17
  %12710 = icmp eq i8 %12709, 8
  br i1 %12710, label %12730, label %12711

12711:                                            ; preds = %12704
  %12712 = load i64, ptr %12705, align 8
  %12713 = and i64 %12712, 65535
  %12714 = icmp eq i64 %12713, 14
  br i1 %12714, label %12715, label %12718

12715:                                            ; preds = %12711
  %12716 = tail call i32 @vector_type_mode(ptr noundef nonnull %12705) #24
  %12717 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12723

12718:                                            ; preds = %12711
  %12719 = getelementptr inbounds %struct.tree_type, ptr %12705, i64 0, i32 6
  %12720 = load i32, ptr %12719, align 4
  %12721 = lshr i32 %12720, 16
  %12722 = and i32 %12721, 255
  br label %12723

12723:                                            ; preds = %12718, %12715
  %12724 = phi ptr [ %12717, %12715 ], [ %12705, %12718 ]
  %12725 = phi i32 [ %12716, %12715 ], [ %12722, %12718 ]
  %12726 = zext i32 %12725 to i64
  %12727 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12726
  %12728 = load i8, ptr %12727, align 1, !tbaa !17
  %12729 = icmp eq i8 %12728, 9
  br i1 %12729, label %12730, label %12742

12730:                                            ; preds = %12723, %12704
  %12731 = phi ptr [ %12724, %12723 ], [ %12705, %12704 ]
  %12732 = load i64, ptr %12731, align 8
  %12733 = and i64 %12732, 65535
  %12734 = icmp eq i64 %12733, 14
  br i1 %12734, label %12735, label %12737

12735:                                            ; preds = %12730
  %12736 = tail call i32 @vector_type_mode(ptr noundef nonnull %12731) #24
  br label %12759

12737:                                            ; preds = %12730
  %12738 = getelementptr inbounds %struct.tree_type, ptr %12731, i64 0, i32 6
  %12739 = load i32, ptr %12738, align 4
  %12740 = lshr i32 %12739, 16
  %12741 = and i32 %12740, 255
  br label %12759

12742:                                            ; preds = %12723
  %12743 = load i64, ptr %12724, align 8
  %12744 = and i64 %12743, 65535
  %12745 = icmp eq i64 %12744, 14
  br i1 %12745, label %12746, label %12748

12746:                                            ; preds = %12742
  %12747 = tail call i32 @vector_type_mode(ptr noundef nonnull %12724) #24
  br label %12753

12748:                                            ; preds = %12742
  %12749 = getelementptr inbounds %struct.tree_type, ptr %12724, i64 0, i32 6
  %12750 = load i32, ptr %12749, align 4
  %12751 = lshr i32 %12750, 16
  %12752 = and i32 %12751, 255
  br label %12753

12753:                                            ; preds = %12748, %12746
  %12754 = phi i32 [ %12747, %12746 ], [ %12752, %12748 ]
  %12755 = zext i32 %12754 to i64
  %12756 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12755
  %12757 = load i8, ptr %12756, align 1, !tbaa !17
  %12758 = zext i8 %12757 to i32
  br label %12759

12759:                                            ; preds = %12735, %12737, %12753
  %12760 = phi i32 [ %12758, %12753 ], [ %12736, %12735 ], [ %12741, %12737 ]
  %12761 = zext i32 %12760 to i64
  %12762 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12761
  %12763 = load i8, ptr %12762, align 1, !tbaa !17
  %12764 = icmp eq i8 %12763, 9
  %12765 = load ptr, ptr %12614, align 8, !tbaa !17
  %12766 = load i64, ptr %12765, align 8
  %12767 = and i64 %12766, 65535
  %12768 = icmp eq i64 %12767, 14
  br i1 %12764, label %12769, label %12833

12769:                                            ; preds = %12759
  br i1 %12768, label %12770, label %12773

12770:                                            ; preds = %12769
  %12771 = tail call i32 @vector_type_mode(ptr noundef nonnull %12765) #24
  %12772 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12778

12773:                                            ; preds = %12769
  %12774 = getelementptr inbounds %struct.tree_type, ptr %12765, i64 0, i32 6
  %12775 = load i32, ptr %12774, align 4
  %12776 = lshr i32 %12775, 16
  %12777 = and i32 %12776, 255
  br label %12778

12778:                                            ; preds = %12773, %12770
  %12779 = phi ptr [ %12772, %12770 ], [ %12765, %12773 ]
  %12780 = phi i32 [ %12771, %12770 ], [ %12777, %12773 ]
  %12781 = zext i32 %12780 to i64
  %12782 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12781
  %12783 = load i8, ptr %12782, align 1, !tbaa !17
  %12784 = icmp eq i8 %12783, 8
  br i1 %12784, label %12804, label %12785

12785:                                            ; preds = %12778
  %12786 = load i64, ptr %12779, align 8
  %12787 = and i64 %12786, 65535
  %12788 = icmp eq i64 %12787, 14
  br i1 %12788, label %12789, label %12792

12789:                                            ; preds = %12785
  %12790 = tail call i32 @vector_type_mode(ptr noundef nonnull %12779) #24
  %12791 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12797

12792:                                            ; preds = %12785
  %12793 = getelementptr inbounds %struct.tree_type, ptr %12779, i64 0, i32 6
  %12794 = load i32, ptr %12793, align 4
  %12795 = lshr i32 %12794, 16
  %12796 = and i32 %12795, 255
  br label %12797

12797:                                            ; preds = %12792, %12789
  %12798 = phi ptr [ %12791, %12789 ], [ %12779, %12792 ]
  %12799 = phi i32 [ %12790, %12789 ], [ %12796, %12792 ]
  %12800 = zext i32 %12799 to i64
  %12801 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12800
  %12802 = load i8, ptr %12801, align 1, !tbaa !17
  %12803 = icmp eq i8 %12802, 9
  br i1 %12803, label %12804, label %12816

12804:                                            ; preds = %12797, %12778
  %12805 = phi ptr [ %12798, %12797 ], [ %12779, %12778 ]
  %12806 = load i64, ptr %12805, align 8
  %12807 = and i64 %12806, 65535
  %12808 = icmp eq i64 %12807, 14
  br i1 %12808, label %12809, label %12811

12809:                                            ; preds = %12804
  %12810 = tail call i32 @vector_type_mode(ptr noundef nonnull %12805) #24
  br label %12897

12811:                                            ; preds = %12804
  %12812 = getelementptr inbounds %struct.tree_type, ptr %12805, i64 0, i32 6
  %12813 = load i32, ptr %12812, align 4
  %12814 = lshr i32 %12813, 16
  %12815 = and i32 %12814, 255
  br label %12897

12816:                                            ; preds = %12797
  %12817 = load i64, ptr %12798, align 8
  %12818 = and i64 %12817, 65535
  %12819 = icmp eq i64 %12818, 14
  br i1 %12819, label %12820, label %12822

12820:                                            ; preds = %12816
  %12821 = tail call i32 @vector_type_mode(ptr noundef nonnull %12798) #24
  br label %12827

12822:                                            ; preds = %12816
  %12823 = getelementptr inbounds %struct.tree_type, ptr %12798, i64 0, i32 6
  %12824 = load i32, ptr %12823, align 4
  %12825 = lshr i32 %12824, 16
  %12826 = and i32 %12825, 255
  br label %12827

12827:                                            ; preds = %12822, %12820
  %12828 = phi i32 [ %12821, %12820 ], [ %12826, %12822 ]
  %12829 = zext i32 %12828 to i64
  %12830 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12829
  %12831 = load i8, ptr %12830, align 1, !tbaa !17
  %12832 = zext i8 %12831 to i32
  br label %12897

12833:                                            ; preds = %12759
  br i1 %12768, label %12834, label %12837

12834:                                            ; preds = %12833
  %12835 = tail call i32 @vector_type_mode(ptr noundef nonnull %12765) #24
  %12836 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12842

12837:                                            ; preds = %12833
  %12838 = getelementptr inbounds %struct.tree_type, ptr %12765, i64 0, i32 6
  %12839 = load i32, ptr %12838, align 4
  %12840 = lshr i32 %12839, 16
  %12841 = and i32 %12840, 255
  br label %12842

12842:                                            ; preds = %12837, %12834
  %12843 = phi ptr [ %12836, %12834 ], [ %12765, %12837 ]
  %12844 = phi i32 [ %12835, %12834 ], [ %12841, %12837 ]
  %12845 = zext i32 %12844 to i64
  %12846 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12845
  %12847 = load i8, ptr %12846, align 1, !tbaa !17
  %12848 = icmp eq i8 %12847, 8
  br i1 %12848, label %12868, label %12849

12849:                                            ; preds = %12842
  %12850 = load i64, ptr %12843, align 8
  %12851 = and i64 %12850, 65535
  %12852 = icmp eq i64 %12851, 14
  br i1 %12852, label %12853, label %12856

12853:                                            ; preds = %12849
  %12854 = tail call i32 @vector_type_mode(ptr noundef nonnull %12843) #24
  %12855 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12861

12856:                                            ; preds = %12849
  %12857 = getelementptr inbounds %struct.tree_type, ptr %12843, i64 0, i32 6
  %12858 = load i32, ptr %12857, align 4
  %12859 = lshr i32 %12858, 16
  %12860 = and i32 %12859, 255
  br label %12861

12861:                                            ; preds = %12856, %12853
  %12862 = phi ptr [ %12855, %12853 ], [ %12843, %12856 ]
  %12863 = phi i32 [ %12854, %12853 ], [ %12860, %12856 ]
  %12864 = zext i32 %12863 to i64
  %12865 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12864
  %12866 = load i8, ptr %12865, align 1, !tbaa !17
  %12867 = icmp eq i8 %12866, 9
  br i1 %12867, label %12868, label %12880

12868:                                            ; preds = %12861, %12842
  %12869 = phi ptr [ %12862, %12861 ], [ %12843, %12842 ]
  %12870 = load i64, ptr %12869, align 8
  %12871 = and i64 %12870, 65535
  %12872 = icmp eq i64 %12871, 14
  br i1 %12872, label %12873, label %12875

12873:                                            ; preds = %12868
  %12874 = tail call i32 @vector_type_mode(ptr noundef nonnull %12869) #24
  br label %12897

12875:                                            ; preds = %12868
  %12876 = getelementptr inbounds %struct.tree_type, ptr %12869, i64 0, i32 6
  %12877 = load i32, ptr %12876, align 4
  %12878 = lshr i32 %12877, 16
  %12879 = and i32 %12878, 255
  br label %12897

12880:                                            ; preds = %12861
  %12881 = load i64, ptr %12862, align 8
  %12882 = and i64 %12881, 65535
  %12883 = icmp eq i64 %12882, 14
  br i1 %12883, label %12884, label %12886

12884:                                            ; preds = %12880
  %12885 = tail call i32 @vector_type_mode(ptr noundef nonnull %12862) #24
  br label %12891

12886:                                            ; preds = %12880
  %12887 = getelementptr inbounds %struct.tree_type, ptr %12862, i64 0, i32 6
  %12888 = load i32, ptr %12887, align 4
  %12889 = lshr i32 %12888, 16
  %12890 = and i32 %12889, 255
  br label %12891

12891:                                            ; preds = %12886, %12884
  %12892 = phi i32 [ %12885, %12884 ], [ %12890, %12886 ]
  %12893 = zext i32 %12892 to i64
  %12894 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %12893
  %12895 = load i8, ptr %12894, align 1, !tbaa !17
  %12896 = zext i8 %12895 to i32
  br label %12897

12897:                                            ; preds = %12891, %12875, %12873, %12827, %12811, %12809
  %12898 = phi i32 [ %12832, %12827 ], [ %12810, %12809 ], [ %12815, %12811 ], [ %12896, %12891 ], [ %12874, %12873 ], [ %12879, %12875 ]
  %12899 = add i32 %12898, -38
  %12900 = zext i32 %12899 to i64
  %12901 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %12900
  %12902 = load ptr, ptr %12901, align 8, !tbaa !6
  %12903 = getelementptr inbounds %struct.real_format, ptr %12902, i64 0, i32 11
  %12904 = load i8, ptr %12903, align 2, !tbaa !36
  %12905 = icmp eq i8 %12904, 0
  %12906 = load i32, ptr @flag_finite_math_only, align 4
  %12907 = icmp ne i32 %12906, 0
  %12908 = select i1 %12905, i1 true, i1 %12907
  %12909 = icmp eq i32 %1, 98
  %12910 = and i1 %12909, %12908
  br i1 %12910, label %12913, label %12942

12911:                                            ; preds = %12683
  %12912 = icmp eq i32 %1, 98
  br i1 %12912, label %12913, label %12942

12913:                                            ; preds = %12897, %12911
  %12914 = icmp eq i32 %12535, 64
  %12915 = icmp sgt i32 %12548, -1
  %12916 = select i1 %12914, i1 %12915, i1 false
  br i1 %12916, label %12921, label %12917

12917:                                            ; preds = %12913
  %12918 = icmp eq i32 %12535, 63
  %12919 = icmp slt i32 %12548, 1
  %12920 = select i1 %12918, i1 %12919, i1 false
  br i1 %12920, label %12921, label %12942

12921:                                            ; preds = %12917, %12913
  %12922 = load i64, ptr %12532, align 8
  %12923 = and i64 %12922, 65535
  %12924 = icmp eq i64 %12923, 23
  br i1 %12924, label %12925, label %12940

12925:                                            ; preds = %12921
  %12926 = load ptr, ptr %12614, align 8, !tbaa !17
  %12927 = load i64, ptr %12926, align 8
  %12928 = and i64 %12927, 2097152
  %12929 = icmp eq i64 %12928, 0
  %12930 = load i32, ptr @flag_wrapv, align 4
  %12931 = icmp eq i32 %12930, 0
  %12932 = select i1 %12929, i1 %12931, i1 false
  %12933 = load i32, ptr @flag_trapv, align 4
  %12934 = icmp eq i32 %12933, 0
  %12935 = select i1 %12932, i1 %12934, i1 false
  %12936 = load i32, ptr @flag_strict_overflow, align 4
  %12937 = icmp ne i32 %12936, 0
  %12938 = select i1 %12935, i1 %12937, i1 false
  br i1 %12938, label %12939, label %12940

12939:                                            ; preds = %12925
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.13, i32 noundef 1)
  br label %12940

12940:                                            ; preds = %12939, %12925, %12921
  %12941 = tail call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %14075

12942:                                            ; preds = %12897, %12917, %12911
  %12943 = load ptr, ptr %12614, align 8, !tbaa !17
  %12944 = load i64, ptr %12943, align 8
  %12945 = and i64 %12944, 65535
  %12946 = icmp eq i64 %12945, 14
  br i1 %12946, label %12947, label %12950

12947:                                            ; preds = %12942
  %12948 = tail call i32 @vector_type_mode(ptr noundef nonnull %12943) #24
  %12949 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12955

12950:                                            ; preds = %12942
  %12951 = getelementptr inbounds %struct.tree_type, ptr %12943, i64 0, i32 6
  %12952 = load i32, ptr %12951, align 4
  %12953 = lshr i32 %12952, 16
  %12954 = and i32 %12953, 255
  br label %12955

12955:                                            ; preds = %12950, %12947
  %12956 = phi ptr [ %12949, %12947 ], [ %12943, %12950 ]
  %12957 = phi i32 [ %12948, %12947 ], [ %12954, %12950 ]
  %12958 = zext i32 %12957 to i64
  %12959 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12958
  %12960 = load i8, ptr %12959, align 1, !tbaa !17
  %12961 = icmp eq i8 %12960, 8
  br i1 %12961, label %13019, label %12962

12962:                                            ; preds = %12955
  %12963 = load i64, ptr %12956, align 8
  %12964 = and i64 %12963, 65535
  %12965 = icmp eq i64 %12964, 14
  br i1 %12965, label %12966, label %12969

12966:                                            ; preds = %12962
  %12967 = tail call i32 @vector_type_mode(ptr noundef nonnull %12956) #24
  %12968 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12974

12969:                                            ; preds = %12962
  %12970 = getelementptr inbounds %struct.tree_type, ptr %12956, i64 0, i32 6
  %12971 = load i32, ptr %12970, align 4
  %12972 = lshr i32 %12971, 16
  %12973 = and i32 %12972, 255
  br label %12974

12974:                                            ; preds = %12969, %12966
  %12975 = phi ptr [ %12968, %12966 ], [ %12956, %12969 ]
  %12976 = phi i32 [ %12967, %12966 ], [ %12973, %12969 ]
  %12977 = zext i32 %12976 to i64
  %12978 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12977
  %12979 = load i8, ptr %12978, align 1, !tbaa !17
  %12980 = icmp eq i8 %12979, 9
  br i1 %12980, label %13019, label %12981

12981:                                            ; preds = %12974
  %12982 = load i64, ptr %12975, align 8
  %12983 = and i64 %12982, 65535
  %12984 = icmp eq i64 %12983, 14
  br i1 %12984, label %12985, label %12988

12985:                                            ; preds = %12981
  %12986 = tail call i32 @vector_type_mode(ptr noundef nonnull %12975) #24
  %12987 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %12993

12988:                                            ; preds = %12981
  %12989 = getelementptr inbounds %struct.tree_type, ptr %12975, i64 0, i32 6
  %12990 = load i32, ptr %12989, align 4
  %12991 = lshr i32 %12990, 16
  %12992 = and i32 %12991, 255
  br label %12993

12993:                                            ; preds = %12988, %12985
  %12994 = phi ptr [ %12987, %12985 ], [ %12975, %12988 ]
  %12995 = phi i32 [ %12986, %12985 ], [ %12992, %12988 ]
  %12996 = zext i32 %12995 to i64
  %12997 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %12996
  %12998 = load i8, ptr %12997, align 1, !tbaa !17
  %12999 = icmp eq i8 %12998, 11
  br i1 %12999, label %13019, label %13000

13000:                                            ; preds = %12993
  %13001 = load i64, ptr %12994, align 8
  %13002 = and i64 %13001, 65535
  %13003 = icmp eq i64 %13002, 14
  br i1 %13003, label %13004, label %13006

13004:                                            ; preds = %13000
  %13005 = tail call i32 @vector_type_mode(ptr noundef nonnull %12994) #24
  br label %13011

13006:                                            ; preds = %13000
  %13007 = getelementptr inbounds %struct.tree_type, ptr %12994, i64 0, i32 6
  %13008 = load i32, ptr %13007, align 4
  %13009 = lshr i32 %13008, 16
  %13010 = and i32 %13009, 255
  br label %13011

13011:                                            ; preds = %13006, %13004
  %13012 = phi i32 [ %13005, %13004 ], [ %13010, %13006 ]
  %13013 = zext i32 %13012 to i64
  %13014 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13013
  %13015 = load i8, ptr %13014, align 1, !tbaa !17
  %13016 = icmp eq i8 %13015, 17
  br i1 %13016, label %13017, label %13239

13017:                                            ; preds = %13011
  %13018 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13019

13019:                                            ; preds = %13017, %12993, %12974, %12955
  %13020 = phi ptr [ %13018, %13017 ], [ %12994, %12993 ], [ %12975, %12974 ], [ %12956, %12955 ]
  %13021 = load i64, ptr %13020, align 8
  %13022 = and i64 %13021, 65535
  %13023 = icmp eq i64 %13022, 14
  br i1 %13023, label %13024, label %13027

13024:                                            ; preds = %13019
  %13025 = tail call i32 @vector_type_mode(ptr noundef nonnull %13020) #24
  %13026 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13032

13027:                                            ; preds = %13019
  %13028 = getelementptr inbounds %struct.tree_type, ptr %13020, i64 0, i32 6
  %13029 = load i32, ptr %13028, align 4
  %13030 = lshr i32 %13029, 16
  %13031 = and i32 %13030, 255
  br label %13032

13032:                                            ; preds = %13027, %13024
  %13033 = phi ptr [ %13026, %13024 ], [ %13020, %13027 ]
  %13034 = phi i32 [ %13025, %13024 ], [ %13031, %13027 ]
  %13035 = zext i32 %13034 to i64
  %13036 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13035
  %13037 = load i8, ptr %13036, align 1, !tbaa !17
  %13038 = icmp eq i8 %13037, 8
  br i1 %13038, label %13058, label %13039

13039:                                            ; preds = %13032
  %13040 = load i64, ptr %13033, align 8
  %13041 = and i64 %13040, 65535
  %13042 = icmp eq i64 %13041, 14
  br i1 %13042, label %13043, label %13046

13043:                                            ; preds = %13039
  %13044 = tail call i32 @vector_type_mode(ptr noundef nonnull %13033) #24
  %13045 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13051

13046:                                            ; preds = %13039
  %13047 = getelementptr inbounds %struct.tree_type, ptr %13033, i64 0, i32 6
  %13048 = load i32, ptr %13047, align 4
  %13049 = lshr i32 %13048, 16
  %13050 = and i32 %13049, 255
  br label %13051

13051:                                            ; preds = %13046, %13043
  %13052 = phi ptr [ %13045, %13043 ], [ %13033, %13046 ]
  %13053 = phi i32 [ %13044, %13043 ], [ %13050, %13046 ]
  %13054 = zext i32 %13053 to i64
  %13055 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13054
  %13056 = load i8, ptr %13055, align 1, !tbaa !17
  %13057 = icmp eq i8 %13056, 9
  br i1 %13057, label %13058, label %13070

13058:                                            ; preds = %13051, %13032
  %13059 = phi ptr [ %13052, %13051 ], [ %13033, %13032 ]
  %13060 = load i64, ptr %13059, align 8
  %13061 = and i64 %13060, 65535
  %13062 = icmp eq i64 %13061, 14
  br i1 %13062, label %13063, label %13065

13063:                                            ; preds = %13058
  %13064 = tail call i32 @vector_type_mode(ptr noundef nonnull %13059) #24
  br label %13087

13065:                                            ; preds = %13058
  %13066 = getelementptr inbounds %struct.tree_type, ptr %13059, i64 0, i32 6
  %13067 = load i32, ptr %13066, align 4
  %13068 = lshr i32 %13067, 16
  %13069 = and i32 %13068, 255
  br label %13087

13070:                                            ; preds = %13051
  %13071 = load i64, ptr %13052, align 8
  %13072 = and i64 %13071, 65535
  %13073 = icmp eq i64 %13072, 14
  br i1 %13073, label %13074, label %13076

13074:                                            ; preds = %13070
  %13075 = tail call i32 @vector_type_mode(ptr noundef nonnull %13052) #24
  br label %13081

13076:                                            ; preds = %13070
  %13077 = getelementptr inbounds %struct.tree_type, ptr %13052, i64 0, i32 6
  %13078 = load i32, ptr %13077, align 4
  %13079 = lshr i32 %13078, 16
  %13080 = and i32 %13079, 255
  br label %13081

13081:                                            ; preds = %13076, %13074
  %13082 = phi i32 [ %13075, %13074 ], [ %13080, %13076 ]
  %13083 = zext i32 %13082 to i64
  %13084 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13083
  %13085 = load i8, ptr %13084, align 1, !tbaa !17
  %13086 = zext i8 %13085 to i32
  br label %13087

13087:                                            ; preds = %13063, %13065, %13081
  %13088 = phi i32 [ %13086, %13081 ], [ %13064, %13063 ], [ %13069, %13065 ]
  %13089 = zext i32 %13088 to i64
  %13090 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13089
  %13091 = load i8, ptr %13090, align 1, !tbaa !17
  %13092 = icmp eq i8 %13091, 9
  %13093 = load ptr, ptr %12614, align 8, !tbaa !17
  %13094 = load i64, ptr %13093, align 8
  %13095 = and i64 %13094, 65535
  %13096 = icmp eq i64 %13095, 14
  br i1 %13092, label %13097, label %13161

13097:                                            ; preds = %13087
  br i1 %13096, label %13098, label %13101

13098:                                            ; preds = %13097
  %13099 = tail call i32 @vector_type_mode(ptr noundef nonnull %13093) #24
  %13100 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13106

13101:                                            ; preds = %13097
  %13102 = getelementptr inbounds %struct.tree_type, ptr %13093, i64 0, i32 6
  %13103 = load i32, ptr %13102, align 4
  %13104 = lshr i32 %13103, 16
  %13105 = and i32 %13104, 255
  br label %13106

13106:                                            ; preds = %13101, %13098
  %13107 = phi ptr [ %13100, %13098 ], [ %13093, %13101 ]
  %13108 = phi i32 [ %13099, %13098 ], [ %13105, %13101 ]
  %13109 = zext i32 %13108 to i64
  %13110 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13109
  %13111 = load i8, ptr %13110, align 1, !tbaa !17
  %13112 = icmp eq i8 %13111, 8
  br i1 %13112, label %13132, label %13113

13113:                                            ; preds = %13106
  %13114 = load i64, ptr %13107, align 8
  %13115 = and i64 %13114, 65535
  %13116 = icmp eq i64 %13115, 14
  br i1 %13116, label %13117, label %13120

13117:                                            ; preds = %13113
  %13118 = tail call i32 @vector_type_mode(ptr noundef nonnull %13107) #24
  %13119 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13125

13120:                                            ; preds = %13113
  %13121 = getelementptr inbounds %struct.tree_type, ptr %13107, i64 0, i32 6
  %13122 = load i32, ptr %13121, align 4
  %13123 = lshr i32 %13122, 16
  %13124 = and i32 %13123, 255
  br label %13125

13125:                                            ; preds = %13120, %13117
  %13126 = phi ptr [ %13119, %13117 ], [ %13107, %13120 ]
  %13127 = phi i32 [ %13118, %13117 ], [ %13124, %13120 ]
  %13128 = zext i32 %13127 to i64
  %13129 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13128
  %13130 = load i8, ptr %13129, align 1, !tbaa !17
  %13131 = icmp eq i8 %13130, 9
  br i1 %13131, label %13132, label %13144

13132:                                            ; preds = %13125, %13106
  %13133 = phi ptr [ %13126, %13125 ], [ %13107, %13106 ]
  %13134 = load i64, ptr %13133, align 8
  %13135 = and i64 %13134, 65535
  %13136 = icmp eq i64 %13135, 14
  br i1 %13136, label %13137, label %13139

13137:                                            ; preds = %13132
  %13138 = tail call i32 @vector_type_mode(ptr noundef nonnull %13133) #24
  br label %13225

13139:                                            ; preds = %13132
  %13140 = getelementptr inbounds %struct.tree_type, ptr %13133, i64 0, i32 6
  %13141 = load i32, ptr %13140, align 4
  %13142 = lshr i32 %13141, 16
  %13143 = and i32 %13142, 255
  br label %13225

13144:                                            ; preds = %13125
  %13145 = load i64, ptr %13126, align 8
  %13146 = and i64 %13145, 65535
  %13147 = icmp eq i64 %13146, 14
  br i1 %13147, label %13148, label %13150

13148:                                            ; preds = %13144
  %13149 = tail call i32 @vector_type_mode(ptr noundef nonnull %13126) #24
  br label %13155

13150:                                            ; preds = %13144
  %13151 = getelementptr inbounds %struct.tree_type, ptr %13126, i64 0, i32 6
  %13152 = load i32, ptr %13151, align 4
  %13153 = lshr i32 %13152, 16
  %13154 = and i32 %13153, 255
  br label %13155

13155:                                            ; preds = %13150, %13148
  %13156 = phi i32 [ %13149, %13148 ], [ %13154, %13150 ]
  %13157 = zext i32 %13156 to i64
  %13158 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13157
  %13159 = load i8, ptr %13158, align 1, !tbaa !17
  %13160 = zext i8 %13159 to i32
  br label %13225

13161:                                            ; preds = %13087
  br i1 %13096, label %13162, label %13165

13162:                                            ; preds = %13161
  %13163 = tail call i32 @vector_type_mode(ptr noundef nonnull %13093) #24
  %13164 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13170

13165:                                            ; preds = %13161
  %13166 = getelementptr inbounds %struct.tree_type, ptr %13093, i64 0, i32 6
  %13167 = load i32, ptr %13166, align 4
  %13168 = lshr i32 %13167, 16
  %13169 = and i32 %13168, 255
  br label %13170

13170:                                            ; preds = %13165, %13162
  %13171 = phi ptr [ %13164, %13162 ], [ %13093, %13165 ]
  %13172 = phi i32 [ %13163, %13162 ], [ %13169, %13165 ]
  %13173 = zext i32 %13172 to i64
  %13174 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13173
  %13175 = load i8, ptr %13174, align 1, !tbaa !17
  %13176 = icmp eq i8 %13175, 8
  br i1 %13176, label %13196, label %13177

13177:                                            ; preds = %13170
  %13178 = load i64, ptr %13171, align 8
  %13179 = and i64 %13178, 65535
  %13180 = icmp eq i64 %13179, 14
  br i1 %13180, label %13181, label %13184

13181:                                            ; preds = %13177
  %13182 = tail call i32 @vector_type_mode(ptr noundef nonnull %13171) #24
  %13183 = load ptr, ptr %12614, align 8, !tbaa !17
  br label %13189

13184:                                            ; preds = %13177
  %13185 = getelementptr inbounds %struct.tree_type, ptr %13171, i64 0, i32 6
  %13186 = load i32, ptr %13185, align 4
  %13187 = lshr i32 %13186, 16
  %13188 = and i32 %13187, 255
  br label %13189

13189:                                            ; preds = %13184, %13181
  %13190 = phi ptr [ %13183, %13181 ], [ %13171, %13184 ]
  %13191 = phi i32 [ %13182, %13181 ], [ %13188, %13184 ]
  %13192 = zext i32 %13191 to i64
  %13193 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13192
  %13194 = load i8, ptr %13193, align 1, !tbaa !17
  %13195 = icmp eq i8 %13194, 9
  br i1 %13195, label %13196, label %13208

13196:                                            ; preds = %13189, %13170
  %13197 = phi ptr [ %13190, %13189 ], [ %13171, %13170 ]
  %13198 = load i64, ptr %13197, align 8
  %13199 = and i64 %13198, 65535
  %13200 = icmp eq i64 %13199, 14
  br i1 %13200, label %13201, label %13203

13201:                                            ; preds = %13196
  %13202 = tail call i32 @vector_type_mode(ptr noundef nonnull %13197) #24
  br label %13225

13203:                                            ; preds = %13196
  %13204 = getelementptr inbounds %struct.tree_type, ptr %13197, i64 0, i32 6
  %13205 = load i32, ptr %13204, align 4
  %13206 = lshr i32 %13205, 16
  %13207 = and i32 %13206, 255
  br label %13225

13208:                                            ; preds = %13189
  %13209 = load i64, ptr %13190, align 8
  %13210 = and i64 %13209, 65535
  %13211 = icmp eq i64 %13210, 14
  br i1 %13211, label %13212, label %13214

13212:                                            ; preds = %13208
  %13213 = tail call i32 @vector_type_mode(ptr noundef nonnull %13190) #24
  br label %13219

13214:                                            ; preds = %13208
  %13215 = getelementptr inbounds %struct.tree_type, ptr %13190, i64 0, i32 6
  %13216 = load i32, ptr %13215, align 4
  %13217 = lshr i32 %13216, 16
  %13218 = and i32 %13217, 255
  br label %13219

13219:                                            ; preds = %13214, %13212
  %13220 = phi i32 [ %13213, %13212 ], [ %13218, %13214 ]
  %13221 = zext i32 %13220 to i64
  %13222 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13221
  %13223 = load i8, ptr %13222, align 1, !tbaa !17
  %13224 = zext i8 %13223 to i32
  br label %13225

13225:                                            ; preds = %13219, %13203, %13201, %13155, %13139, %13137
  %13226 = phi i32 [ %13160, %13155 ], [ %13138, %13137 ], [ %13143, %13139 ], [ %13224, %13219 ], [ %13202, %13201 ], [ %13207, %13203 ]
  %13227 = add i32 %13226, -38
  %13228 = zext i32 %13227 to i64
  %13229 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %13228
  %13230 = load ptr, ptr %13229, align 8, !tbaa !6
  %13231 = getelementptr inbounds %struct.real_format, ptr %13230, i64 0, i32 11
  %13232 = load i8, ptr %13231, align 2, !tbaa !36
  %13233 = icmp eq i8 %13232, 0
  %13234 = load i32, ptr @flag_finite_math_only, align 4
  %13235 = icmp ne i32 %13234, 0
  %13236 = select i1 %13233, i1 true, i1 %13235
  %13237 = icmp eq i32 %1, 100
  %13238 = and i1 %13237, %13236
  br i1 %13238, label %13241, label %13270

13239:                                            ; preds = %13011
  %13240 = icmp eq i32 %1, 100
  br i1 %13240, label %13241, label %13270

13241:                                            ; preds = %13225, %13239
  %13242 = icmp eq i32 %12535, 63
  %13243 = icmp sgt i32 %12548, -1
  %13244 = select i1 %13242, i1 %13243, i1 false
  br i1 %13244, label %13249, label %13245

13245:                                            ; preds = %13241
  %13246 = icmp eq i32 %12535, 64
  %13247 = icmp slt i32 %12548, 1
  %13248 = select i1 %13246, i1 %13247, i1 false
  br i1 %13248, label %13249, label %13270

13249:                                            ; preds = %13245, %13241
  %13250 = load i64, ptr %12532, align 8
  %13251 = and i64 %13250, 65535
  %13252 = icmp eq i64 %13251, 23
  br i1 %13252, label %13253, label %13268

13253:                                            ; preds = %13249
  %13254 = load ptr, ptr %12614, align 8, !tbaa !17
  %13255 = load i64, ptr %13254, align 8
  %13256 = and i64 %13255, 2097152
  %13257 = icmp eq i64 %13256, 0
  %13258 = load i32, ptr @flag_wrapv, align 4
  %13259 = icmp eq i32 %13258, 0
  %13260 = select i1 %13257, i1 %13259, i1 false
  %13261 = load i32, ptr @flag_trapv, align 4
  %13262 = icmp eq i32 %13261, 0
  %13263 = select i1 %13260, i1 %13262, i1 false
  %13264 = load i32, ptr @flag_strict_overflow, align 4
  %13265 = icmp ne i32 %13264, 0
  %13266 = select i1 %13263, i1 %13265, i1 false
  br i1 %13266, label %13267, label %13268

13267:                                            ; preds = %13253
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.14, i32 noundef 1)
  br label %13268

13268:                                            ; preds = %13267, %13253, %13249
  %13269 = tail call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %14075

13270:                                            ; preds = %13225, %13245, %13239
  %13271 = load i64, ptr %12532, align 8
  %13272 = and i64 %13271, 65535
  %13273 = icmp eq i64 %13272, 23
  br i1 %13273, label %13274, label %13377

13274:                                            ; preds = %13270
  br i1 %12549, label %13275, label %13300

13275:                                            ; preds = %13274
  %13276 = icmp eq i32 %12535, 63
  %13277 = icmp sgt i32 %12548, 0
  %13278 = select i1 %13276, i1 %13277, i1 false
  br i1 %13278, label %13283, label %13279

13279:                                            ; preds = %13275
  %13280 = icmp eq i32 %12535, 64
  %13281 = icmp slt i32 %12548, 0
  %13282 = select i1 %13280, i1 %13281, i1 false
  br i1 %13282, label %13283, label %13300

13283:                                            ; preds = %13279, %13275
  %13284 = load ptr, ptr %12614, align 8, !tbaa !17
  %13285 = load i64, ptr %13284, align 8
  %13286 = and i64 %13285, 2097152
  %13287 = icmp eq i64 %13286, 0
  %13288 = load i32, ptr @flag_wrapv, align 4
  %13289 = icmp eq i32 %13288, 0
  %13290 = select i1 %13287, i1 %13289, i1 false
  %13291 = load i32, ptr @flag_trapv, align 4
  %13292 = icmp eq i32 %13291, 0
  %13293 = select i1 %13290, i1 %13292, i1 false
  %13294 = load i32, ptr @flag_strict_overflow, align 4
  %13295 = icmp ne i32 %13294, 0
  %13296 = select i1 %13293, i1 %13295, i1 false
  br i1 %13296, label %13297, label %13298

13297:                                            ; preds = %13283
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.15, i32 noundef 1)
  br label %13298

13298:                                            ; preds = %13297, %13283
  %13299 = tail call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %14075

13300:                                            ; preds = %13279, %13274
  br i1 %12613, label %13301, label %13326

13301:                                            ; preds = %13300
  %13302 = icmp eq i32 %12535, 64
  %13303 = icmp sgt i32 %12548, 0
  %13304 = select i1 %13302, i1 %13303, i1 false
  br i1 %13304, label %13309, label %13305

13305:                                            ; preds = %13301
  %13306 = icmp eq i32 %12535, 63
  %13307 = icmp slt i32 %12548, 0
  %13308 = select i1 %13306, i1 %13307, i1 false
  br i1 %13308, label %13309, label %13326

13309:                                            ; preds = %13305, %13301
  %13310 = load ptr, ptr %12614, align 8, !tbaa !17
  %13311 = load i64, ptr %13310, align 8
  %13312 = and i64 %13311, 2097152
  %13313 = icmp eq i64 %13312, 0
  %13314 = load i32, ptr @flag_wrapv, align 4
  %13315 = icmp eq i32 %13314, 0
  %13316 = select i1 %13313, i1 %13315, i1 false
  %13317 = load i32, ptr @flag_trapv, align 4
  %13318 = icmp eq i32 %13317, 0
  %13319 = select i1 %13316, i1 %13318, i1 false
  %13320 = load i32, ptr @flag_strict_overflow, align 4
  %13321 = icmp ne i32 %13320, 0
  %13322 = select i1 %13319, i1 %13321, i1 false
  br i1 %13322, label %13323, label %13324

13323:                                            ; preds = %13309
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.16, i32 noundef 1)
  br label %13324

13324:                                            ; preds = %13323, %13309
  %13325 = tail call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %14075

13326:                                            ; preds = %13305, %13300
  switch i32 %1, label %13377 [
    i32 98, label %13327
    i32 100, label %13352
  ]

13327:                                            ; preds = %13326
  %13328 = icmp eq i32 %12535, 63
  %13329 = icmp sgt i32 %12548, 0
  %13330 = select i1 %13328, i1 %13329, i1 false
  br i1 %13330, label %13335, label %13331

13331:                                            ; preds = %13327
  %13332 = icmp eq i32 %12535, 64
  %13333 = icmp slt i32 %12548, 0
  %13334 = select i1 %13332, i1 %13333, i1 false
  br i1 %13334, label %13335, label %13377

13335:                                            ; preds = %13331, %13327
  %13336 = load ptr, ptr %12614, align 8, !tbaa !17
  %13337 = load i64, ptr %13336, align 8
  %13338 = and i64 %13337, 2097152
  %13339 = icmp eq i64 %13338, 0
  %13340 = load i32, ptr @flag_wrapv, align 4
  %13341 = icmp eq i32 %13340, 0
  %13342 = select i1 %13339, i1 %13341, i1 false
  %13343 = load i32, ptr @flag_trapv, align 4
  %13344 = icmp eq i32 %13343, 0
  %13345 = select i1 %13342, i1 %13344, i1 false
  %13346 = load i32, ptr @flag_strict_overflow, align 4
  %13347 = icmp ne i32 %13346, 0
  %13348 = select i1 %13345, i1 %13347, i1 false
  br i1 %13348, label %13349, label %13350

13349:                                            ; preds = %13335
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.17, i32 noundef 1)
  br label %13350

13350:                                            ; preds = %13349, %13335
  %13351 = tail call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %14075

13352:                                            ; preds = %13326
  %13353 = icmp eq i32 %12535, 64
  %13354 = icmp sgt i32 %12548, 0
  %13355 = select i1 %13353, i1 %13354, i1 false
  br i1 %13355, label %13360, label %13356

13356:                                            ; preds = %13352
  %13357 = icmp eq i32 %12535, 63
  %13358 = icmp slt i32 %12548, 0
  %13359 = select i1 %13357, i1 %13358, i1 false
  br i1 %13359, label %13360, label %13377

13360:                                            ; preds = %13356, %13352
  %13361 = load ptr, ptr %12614, align 8, !tbaa !17
  %13362 = load i64, ptr %13361, align 8
  %13363 = and i64 %13362, 2097152
  %13364 = icmp eq i64 %13363, 0
  %13365 = load i32, ptr @flag_wrapv, align 4
  %13366 = icmp eq i32 %13365, 0
  %13367 = select i1 %13364, i1 %13366, i1 false
  %13368 = load i32, ptr @flag_trapv, align 4
  %13369 = icmp eq i32 %13368, 0
  %13370 = select i1 %13367, i1 %13369, i1 false
  %13371 = load i32, ptr @flag_strict_overflow, align 4
  %13372 = icmp ne i32 %13371, 0
  %13373 = select i1 %13370, i1 %13372, i1 false
  br i1 %13373, label %13374, label %13375

13374:                                            ; preds = %13360
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.18, i32 noundef 1)
  br label %13375

13375:                                            ; preds = %13374, %13360
  %13376 = tail call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %14075

13377:                                            ; preds = %13326, %13356, %13270, %13331, %12190, %12516, %12511, %12196
  %13378 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %13379 = load ptr, ptr %13378, align 8, !tbaa !17
  %13380 = getelementptr inbounds %struct.tree_type, ptr %13379, i64 0, i32 6
  %13381 = load i32, ptr %13380, align 4
  %13382 = and i32 %13381, 1023
  %13383 = load i64, ptr %45, align 8
  %13384 = and i64 %13383, 65535
  %13385 = icmp eq i64 %13384, 23
  %13386 = icmp ult i32 %13382, 129
  %13387 = select i1 %13385, i1 %13386, i1 false
  br i1 %13387, label %13388, label %13533

13388:                                            ; preds = %13377
  %13389 = load i64, ptr %13379, align 8
  %13390 = trunc i64 %13389 to i16
  switch i16 %13390, label %13533 [
    i16 6, label %13391
    i16 7, label %13391
    i16 8, label %13391
    i16 10, label %13391
    i16 12, label %13391
  ]

13391:                                            ; preds = %13388, %13388, %13388, %13388, %13388
  %13392 = icmp ult i32 %13382, 65
  br i1 %13392, label %13393, label %13403

13393:                                            ; preds = %13391
  %13394 = add nsw i32 %13382, -1
  %13395 = zext i32 %13394 to i64
  %13396 = shl nsw i64 -1, %13395
  %13397 = xor i64 %13396, -1
  %13398 = and i64 %13389, 2097152
  %13399 = icmp eq i64 %13398, 0
  br i1 %13399, label %13414, label %13400

13400:                                            ; preds = %13393
  %13401 = shl i64 2, %13395
  %13402 = add i64 %13401, -1
  br label %13414

13403:                                            ; preds = %13391
  %13404 = add nsw i32 %13382, -64
  %13405 = add nsw i32 %13382, -65
  %13406 = zext i32 %13405 to i64
  %13407 = shl nsw i64 -1, %13406
  %13408 = xor i64 %13407, -1
  %13409 = and i64 %13389, 2097152
  %13410 = icmp eq i64 %13409, 0
  br i1 %13410, label %13414, label %13411

13411:                                            ; preds = %13403
  %13412 = shl i64 2, %13406
  %13413 = add i64 %13412, -1
  br label %13414

13414:                                            ; preds = %13403, %13393, %13411, %13400
  %13415 = phi i32 [ %13382, %13400 ], [ %13404, %13411 ], [ %13382, %13393 ], [ %13404, %13403 ]
  %13416 = phi i64 [ 0, %13400 ], [ %13408, %13411 ], [ 0, %13393 ], [ %13408, %13403 ]
  %13417 = phi i64 [ %13397, %13400 ], [ -1, %13411 ], [ %13397, %13393 ], [ -1, %13403 ]
  %13418 = phi i64 [ 0, %13400 ], [ %13413, %13411 ], [ 0, %13393 ], [ %13408, %13403 ]
  %13419 = phi i64 [ %13402, %13400 ], [ -1, %13411 ], [ %13397, %13393 ], [ -1, %13403 ]
  %13420 = phi i64 [ 0, %13400 ], [ 0, %13411 ], [ -1, %13393 ], [ %13407, %13403 ]
  %13421 = phi i64 [ 0, %13400 ], [ 0, %13411 ], [ %13396, %13393 ], [ 0, %13403 ]
  %13422 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1
  %13423 = getelementptr inbounds %struct.tree_int_cst, ptr %45, i64 0, i32 1, i32 1
  %13424 = load i64, ptr %13423, align 8, !tbaa !17
  %13425 = icmp eq i64 %13424, %13418
  br i1 %13425, label %13426, label %13458

13426:                                            ; preds = %13414
  %13427 = load i64, ptr %13422, align 8, !tbaa !17
  %13428 = icmp eq i64 %13427, %13419
  br i1 %13428, label %13429, label %13440

13429:                                            ; preds = %13426
  switch i32 %1, label %13559 [
    i32 99, label %13430
    i32 100, label %13433
    i32 98, label %13435
    i32 97, label %13438
  ]

13430:                                            ; preds = %13429
  %13431 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %13432 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13431, ptr noundef nonnull %46)
  br label %14075

13433:                                            ; preds = %13429
  %13434 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %14075

13435:                                            ; preds = %13429
  %13436 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %13437 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13436, ptr noundef nonnull %46)
  br label %14075

13438:                                            ; preds = %13429
  %13439 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %14075

13440:                                            ; preds = %13426
  %13441 = add i64 %13419, -1
  %13442 = icmp eq i64 %13427, %13441
  br i1 %13442, label %13443, label %13458

13443:                                            ; preds = %13440
  switch i32 %1, label %13559 [
    i32 99, label %13444
    i32 98, label %13451
  ]

13444:                                            ; preds = %13443
  %13445 = tail call ptr @build_int_cst(ptr noundef nonnull %13379, i64 noundef 1) #24
  %13446 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef nonnull %45, ptr noundef %13445)
  %13447 = getelementptr inbounds %struct.tree_common, ptr %13446, i64 0, i32 2
  %13448 = load ptr, ptr %13447, align 8, !tbaa !17
  %13449 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13448, ptr noundef nonnull %46)
  %13450 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %13449, ptr noundef %13446)
  br label %14075

13451:                                            ; preds = %13443
  %13452 = tail call ptr @build_int_cst(ptr noundef nonnull %13379, i64 noundef 1) #24
  %13453 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef nonnull %45, ptr noundef %13452)
  %13454 = getelementptr inbounds %struct.tree_common, ptr %13453, i64 0, i32 2
  %13455 = load ptr, ptr %13454, align 8, !tbaa !17
  %13456 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13455, ptr noundef nonnull %46)
  %13457 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %13456, ptr noundef %13453)
  br label %14075

13458:                                            ; preds = %13414, %13440
  %13459 = icmp eq i64 %13424, %13420
  br i1 %13459, label %13460, label %13493

13460:                                            ; preds = %13458
  %13461 = load i64, ptr %13422, align 8, !tbaa !17
  %13462 = icmp eq i64 %13461, %13421
  br i1 %13462, label %13463, label %13475

13463:                                            ; preds = %13460
  switch i32 %1, label %13464 [
    i32 97, label %13465
    i32 98, label %13468
    i32 100, label %13470
    i32 99, label %13473
  ]

13464:                                            ; preds = %13463
  store i8 0, ptr %6, align 1, !tbaa !17
  br label %13560

13465:                                            ; preds = %13463
  %13466 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %13467 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13466, ptr noundef nonnull %46)
  br label %14075

13468:                                            ; preds = %13463
  %13469 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %14075

13470:                                            ; preds = %13463
  %13471 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %13472 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13471, ptr noundef nonnull %46)
  br label %14075

13473:                                            ; preds = %13463
  %13474 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %14075

13475:                                            ; preds = %13460
  %13476 = add i64 %13421, 1
  %13477 = icmp eq i64 %13461, %13476
  br i1 %13477, label %13478, label %13493

13478:                                            ; preds = %13475
  switch i32 %1, label %13559 [
    i32 100, label %13479
    i32 97, label %13486
    i32 98, label %13537
  ]

13479:                                            ; preds = %13478
  %13480 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %13481 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef nonnull %45, ptr noundef %13480)
  %13482 = getelementptr inbounds %struct.tree_common, ptr %13481, i64 0, i32 2
  %13483 = load ptr, ptr %13482, align 8, !tbaa !17
  %13484 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13483, ptr noundef nonnull %46)
  %13485 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %2, ptr noundef %13484, ptr noundef %13481)
  br label %14075

13486:                                            ; preds = %13478
  %13487 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %13488 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef nonnull %45, ptr noundef %13487)
  %13489 = getelementptr inbounds %struct.tree_common, ptr %13488, i64 0, i32 2
  %13490 = load ptr, ptr %13489, align 8, !tbaa !17
  %13491 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13490, ptr noundef nonnull %46)
  %13492 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %13491, ptr noundef %13488)
  br label %14075

13493:                                            ; preds = %13458, %13475
  %13494 = icmp eq i64 %13424, %13416
  br i1 %13494, label %13495, label %13533

13495:                                            ; preds = %13493
  %13496 = load i64, ptr %13422, align 8, !tbaa !17
  %13497 = icmp ne i64 %13496, %13417
  %13498 = and i64 %13389, 2097152
  %13499 = icmp eq i64 %13498, 0
  %13500 = or i1 %13499, %13497
  br i1 %13500, label %13533, label %13501

13501:                                            ; preds = %13495
  %13502 = and i64 %13389, 65535
  %13503 = icmp eq i64 %13502, 14
  br i1 %13503, label %13504, label %13506

13504:                                            ; preds = %13501
  %13505 = tail call i32 @vector_type_mode(ptr noundef nonnull %13379) #24
  br label %13509

13506:                                            ; preds = %13501
  %13507 = lshr i32 %13381, 16
  %13508 = and i32 %13507, 255
  br label %13509

13509:                                            ; preds = %13506, %13504
  %13510 = phi i32 [ %13505, %13504 ], [ %13508, %13506 ]
  %13511 = zext i32 %13510 to i64
  %13512 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %13511
  %13513 = load i8, ptr %13512, align 1, !tbaa !17
  %13514 = zext i8 %13513 to i32
  %13515 = shl nuw nsw i32 %13514, 3
  %13516 = icmp eq i32 %13415, %13515
  br i1 %13516, label %13517, label %13533

13517:                                            ; preds = %13509
  %13518 = load i64, ptr %13379, align 8
  %13519 = trunc i64 %13518 to i32
  %13520 = and i32 %13519, 65535
  %13521 = add nsw i32 %13520, -6
  %13522 = icmp ult i32 %13521, 3
  %13523 = icmp eq i32 %35, 98
  %13524 = and i1 %13523, %13522
  br i1 %13524, label %13525, label %13533

13525:                                            ; preds = %13517
  %13526 = icmp eq i32 %1, 98
  %13527 = load ptr, ptr %13378, align 8, !tbaa !17
  %13528 = tail call ptr @signed_type_for(ptr noundef %13527) #24
  %13529 = select i1 %13526, i32 100, i32 97
  %13530 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13528, ptr noundef nonnull %46)
  %13531 = tail call ptr @build_int_cst(ptr noundef %13528, i64 noundef 0) #24
  %13532 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %13529, ptr noundef %2, ptr noundef %13530, ptr noundef %13531)
  br label %14075

13533:                                            ; preds = %13509, %13495, %13493, %13517, %13388, %13377
  %13534 = icmp eq i32 %1, 98
  br i1 %13534, label %13535, label %13559

13535:                                            ; preds = %13533
  %13536 = load i64, ptr %45, align 8
  br label %13537

13537:                                            ; preds = %13535, %13478
  %13538 = phi i64 [ %13536, %13535 ], [ %13383, %13478 ]
  %13539 = and i64 %13538, 65535
  %13540 = icmp eq i64 %13539, 23
  br i1 %13540, label %13541, label %14075

13541:                                            ; preds = %13537
  %13542 = load i64, ptr %46, align 8
  %13543 = and i64 %13542, 131071
  %13544 = icmp eq i64 %13543, 82
  br i1 %13544, label %13545, label %14075

13545:                                            ; preds = %13541
  %13546 = tail call fastcc ptr @negate_expr(ptr noundef nonnull %45)
  %13547 = icmp eq ptr %13546, null
  br i1 %13547, label %14075, label %13548

13548:                                            ; preds = %13545
  %13549 = load i64, ptr %13546, align 8
  %13550 = and i64 %13549, 134283263
  %13551 = icmp eq i64 %13550, 23
  br i1 %13551, label %13552, label %14075

13552:                                            ; preds = %13548
  %13553 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 3
  %13554 = load ptr, ptr %13553, align 8, !tbaa !17
  %13555 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %2, ptr noundef %13554, ptr noundef nonnull %13546) #24
  %13556 = load ptr, ptr %13553, align 8, !tbaa !17
  %13557 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %2, ptr noundef %13556, ptr noundef nonnull %45) #24
  %13558 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 91, ptr noundef %2, ptr noundef %13555, ptr noundef %13557)
  br label %14075

13559:                                            ; preds = %13443, %13478, %13429, %13533
  store i8 0, ptr %6, align 1, !tbaa !17
  switch i32 %1, label %14075 [
    i32 100, label %13560
    i32 97, label %13872
  ]

13560:                                            ; preds = %13559, %13464
  %13561 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %13562 = icmp eq i32 %13561, 0
  br i1 %13562, label %13563, label %13862

13563:                                            ; preds = %13560
  %13564 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %13565 = load ptr, ptr %13564, align 8, !tbaa !17
  %13566 = load i64, ptr %13565, align 8
  %13567 = and i64 %13566, 65535
  %13568 = icmp eq i64 %13567, 14
  br i1 %13568, label %13569, label %13572

13569:                                            ; preds = %13563
  %13570 = tail call i32 @vector_type_mode(ptr noundef nonnull %13565) #24
  %13571 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13577

13572:                                            ; preds = %13563
  %13573 = getelementptr inbounds %struct.tree_type, ptr %13565, i64 0, i32 6
  %13574 = load i32, ptr %13573, align 4
  %13575 = lshr i32 %13574, 16
  %13576 = and i32 %13575, 255
  br label %13577

13577:                                            ; preds = %13572, %13569
  %13578 = phi ptr [ %13571, %13569 ], [ %13565, %13572 ]
  %13579 = phi i32 [ %13570, %13569 ], [ %13576, %13572 ]
  %13580 = zext i32 %13579 to i64
  %13581 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13580
  %13582 = load i8, ptr %13581, align 1, !tbaa !17
  %13583 = icmp eq i8 %13582, 8
  br i1 %13583, label %13641, label %13584

13584:                                            ; preds = %13577
  %13585 = load i64, ptr %13578, align 8
  %13586 = and i64 %13585, 65535
  %13587 = icmp eq i64 %13586, 14
  br i1 %13587, label %13588, label %13591

13588:                                            ; preds = %13584
  %13589 = tail call i32 @vector_type_mode(ptr noundef nonnull %13578) #24
  %13590 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13596

13591:                                            ; preds = %13584
  %13592 = getelementptr inbounds %struct.tree_type, ptr %13578, i64 0, i32 6
  %13593 = load i32, ptr %13592, align 4
  %13594 = lshr i32 %13593, 16
  %13595 = and i32 %13594, 255
  br label %13596

13596:                                            ; preds = %13591, %13588
  %13597 = phi ptr [ %13590, %13588 ], [ %13578, %13591 ]
  %13598 = phi i32 [ %13589, %13588 ], [ %13595, %13591 ]
  %13599 = zext i32 %13598 to i64
  %13600 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13599
  %13601 = load i8, ptr %13600, align 1, !tbaa !17
  %13602 = icmp eq i8 %13601, 9
  br i1 %13602, label %13641, label %13603

13603:                                            ; preds = %13596
  %13604 = load i64, ptr %13597, align 8
  %13605 = and i64 %13604, 65535
  %13606 = icmp eq i64 %13605, 14
  br i1 %13606, label %13607, label %13610

13607:                                            ; preds = %13603
  %13608 = tail call i32 @vector_type_mode(ptr noundef nonnull %13597) #24
  %13609 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13615

13610:                                            ; preds = %13603
  %13611 = getelementptr inbounds %struct.tree_type, ptr %13597, i64 0, i32 6
  %13612 = load i32, ptr %13611, align 4
  %13613 = lshr i32 %13612, 16
  %13614 = and i32 %13613, 255
  br label %13615

13615:                                            ; preds = %13610, %13607
  %13616 = phi ptr [ %13609, %13607 ], [ %13597, %13610 ]
  %13617 = phi i32 [ %13608, %13607 ], [ %13614, %13610 ]
  %13618 = zext i32 %13617 to i64
  %13619 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13618
  %13620 = load i8, ptr %13619, align 1, !tbaa !17
  %13621 = icmp eq i8 %13620, 11
  br i1 %13621, label %13641, label %13622

13622:                                            ; preds = %13615
  %13623 = load i64, ptr %13616, align 8
  %13624 = and i64 %13623, 65535
  %13625 = icmp eq i64 %13624, 14
  br i1 %13625, label %13626, label %13628

13626:                                            ; preds = %13622
  %13627 = tail call i32 @vector_type_mode(ptr noundef nonnull %13616) #24
  br label %13633

13628:                                            ; preds = %13622
  %13629 = getelementptr inbounds %struct.tree_type, ptr %13616, i64 0, i32 6
  %13630 = load i32, ptr %13629, align 4
  %13631 = lshr i32 %13630, 16
  %13632 = and i32 %13631, 255
  br label %13633

13633:                                            ; preds = %13628, %13626
  %13634 = phi i32 [ %13627, %13626 ], [ %13632, %13628 ]
  %13635 = zext i32 %13634 to i64
  %13636 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13635
  %13637 = load i8, ptr %13636, align 1, !tbaa !17
  %13638 = icmp eq i8 %13637, 17
  br i1 %13638, label %13639, label %13859

13639:                                            ; preds = %13633
  %13640 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13641

13641:                                            ; preds = %13639, %13615, %13596, %13577
  %13642 = phi ptr [ %13640, %13639 ], [ %13616, %13615 ], [ %13597, %13596 ], [ %13578, %13577 ]
  %13643 = load i64, ptr %13642, align 8
  %13644 = and i64 %13643, 65535
  %13645 = icmp eq i64 %13644, 14
  br i1 %13645, label %13646, label %13649

13646:                                            ; preds = %13641
  %13647 = tail call i32 @vector_type_mode(ptr noundef nonnull %13642) #24
  %13648 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13654

13649:                                            ; preds = %13641
  %13650 = getelementptr inbounds %struct.tree_type, ptr %13642, i64 0, i32 6
  %13651 = load i32, ptr %13650, align 4
  %13652 = lshr i32 %13651, 16
  %13653 = and i32 %13652, 255
  br label %13654

13654:                                            ; preds = %13649, %13646
  %13655 = phi ptr [ %13648, %13646 ], [ %13642, %13649 ]
  %13656 = phi i32 [ %13647, %13646 ], [ %13653, %13649 ]
  %13657 = zext i32 %13656 to i64
  %13658 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13657
  %13659 = load i8, ptr %13658, align 1, !tbaa !17
  %13660 = icmp eq i8 %13659, 8
  br i1 %13660, label %13680, label %13661

13661:                                            ; preds = %13654
  %13662 = load i64, ptr %13655, align 8
  %13663 = and i64 %13662, 65535
  %13664 = icmp eq i64 %13663, 14
  br i1 %13664, label %13665, label %13668

13665:                                            ; preds = %13661
  %13666 = tail call i32 @vector_type_mode(ptr noundef nonnull %13655) #24
  %13667 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13673

13668:                                            ; preds = %13661
  %13669 = getelementptr inbounds %struct.tree_type, ptr %13655, i64 0, i32 6
  %13670 = load i32, ptr %13669, align 4
  %13671 = lshr i32 %13670, 16
  %13672 = and i32 %13671, 255
  br label %13673

13673:                                            ; preds = %13668, %13665
  %13674 = phi ptr [ %13667, %13665 ], [ %13655, %13668 ]
  %13675 = phi i32 [ %13666, %13665 ], [ %13672, %13668 ]
  %13676 = zext i32 %13675 to i64
  %13677 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13676
  %13678 = load i8, ptr %13677, align 1, !tbaa !17
  %13679 = icmp eq i8 %13678, 9
  br i1 %13679, label %13680, label %13692

13680:                                            ; preds = %13673, %13654
  %13681 = phi ptr [ %13674, %13673 ], [ %13655, %13654 ]
  %13682 = load i64, ptr %13681, align 8
  %13683 = and i64 %13682, 65535
  %13684 = icmp eq i64 %13683, 14
  br i1 %13684, label %13685, label %13687

13685:                                            ; preds = %13680
  %13686 = tail call i32 @vector_type_mode(ptr noundef nonnull %13681) #24
  br label %13709

13687:                                            ; preds = %13680
  %13688 = getelementptr inbounds %struct.tree_type, ptr %13681, i64 0, i32 6
  %13689 = load i32, ptr %13688, align 4
  %13690 = lshr i32 %13689, 16
  %13691 = and i32 %13690, 255
  br label %13709

13692:                                            ; preds = %13673
  %13693 = load i64, ptr %13674, align 8
  %13694 = and i64 %13693, 65535
  %13695 = icmp eq i64 %13694, 14
  br i1 %13695, label %13696, label %13698

13696:                                            ; preds = %13692
  %13697 = tail call i32 @vector_type_mode(ptr noundef nonnull %13674) #24
  br label %13703

13698:                                            ; preds = %13692
  %13699 = getelementptr inbounds %struct.tree_type, ptr %13674, i64 0, i32 6
  %13700 = load i32, ptr %13699, align 4
  %13701 = lshr i32 %13700, 16
  %13702 = and i32 %13701, 255
  br label %13703

13703:                                            ; preds = %13698, %13696
  %13704 = phi i32 [ %13697, %13696 ], [ %13702, %13698 ]
  %13705 = zext i32 %13704 to i64
  %13706 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13705
  %13707 = load i8, ptr %13706, align 1, !tbaa !17
  %13708 = zext i8 %13707 to i32
  br label %13709

13709:                                            ; preds = %13685, %13687, %13703
  %13710 = phi i32 [ %13708, %13703 ], [ %13686, %13685 ], [ %13691, %13687 ]
  %13711 = zext i32 %13710 to i64
  %13712 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13711
  %13713 = load i8, ptr %13712, align 1, !tbaa !17
  %13714 = icmp eq i8 %13713, 9
  %13715 = load ptr, ptr %13564, align 8, !tbaa !17
  %13716 = load i64, ptr %13715, align 8
  %13717 = and i64 %13716, 65535
  %13718 = icmp eq i64 %13717, 14
  br i1 %13714, label %13719, label %13783

13719:                                            ; preds = %13709
  br i1 %13718, label %13720, label %13723

13720:                                            ; preds = %13719
  %13721 = tail call i32 @vector_type_mode(ptr noundef nonnull %13715) #24
  %13722 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13728

13723:                                            ; preds = %13719
  %13724 = getelementptr inbounds %struct.tree_type, ptr %13715, i64 0, i32 6
  %13725 = load i32, ptr %13724, align 4
  %13726 = lshr i32 %13725, 16
  %13727 = and i32 %13726, 255
  br label %13728

13728:                                            ; preds = %13723, %13720
  %13729 = phi ptr [ %13722, %13720 ], [ %13715, %13723 ]
  %13730 = phi i32 [ %13721, %13720 ], [ %13727, %13723 ]
  %13731 = zext i32 %13730 to i64
  %13732 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13731
  %13733 = load i8, ptr %13732, align 1, !tbaa !17
  %13734 = icmp eq i8 %13733, 8
  br i1 %13734, label %13754, label %13735

13735:                                            ; preds = %13728
  %13736 = load i64, ptr %13729, align 8
  %13737 = and i64 %13736, 65535
  %13738 = icmp eq i64 %13737, 14
  br i1 %13738, label %13739, label %13742

13739:                                            ; preds = %13735
  %13740 = tail call i32 @vector_type_mode(ptr noundef nonnull %13729) #24
  %13741 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13747

13742:                                            ; preds = %13735
  %13743 = getelementptr inbounds %struct.tree_type, ptr %13729, i64 0, i32 6
  %13744 = load i32, ptr %13743, align 4
  %13745 = lshr i32 %13744, 16
  %13746 = and i32 %13745, 255
  br label %13747

13747:                                            ; preds = %13742, %13739
  %13748 = phi ptr [ %13741, %13739 ], [ %13729, %13742 ]
  %13749 = phi i32 [ %13740, %13739 ], [ %13746, %13742 ]
  %13750 = zext i32 %13749 to i64
  %13751 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13750
  %13752 = load i8, ptr %13751, align 1, !tbaa !17
  %13753 = icmp eq i8 %13752, 9
  br i1 %13753, label %13754, label %13766

13754:                                            ; preds = %13747, %13728
  %13755 = phi ptr [ %13748, %13747 ], [ %13729, %13728 ]
  %13756 = load i64, ptr %13755, align 8
  %13757 = and i64 %13756, 65535
  %13758 = icmp eq i64 %13757, 14
  br i1 %13758, label %13759, label %13761

13759:                                            ; preds = %13754
  %13760 = tail call i32 @vector_type_mode(ptr noundef nonnull %13755) #24
  br label %13847

13761:                                            ; preds = %13754
  %13762 = getelementptr inbounds %struct.tree_type, ptr %13755, i64 0, i32 6
  %13763 = load i32, ptr %13762, align 4
  %13764 = lshr i32 %13763, 16
  %13765 = and i32 %13764, 255
  br label %13847

13766:                                            ; preds = %13747
  %13767 = load i64, ptr %13748, align 8
  %13768 = and i64 %13767, 65535
  %13769 = icmp eq i64 %13768, 14
  br i1 %13769, label %13770, label %13772

13770:                                            ; preds = %13766
  %13771 = tail call i32 @vector_type_mode(ptr noundef nonnull %13748) #24
  br label %13777

13772:                                            ; preds = %13766
  %13773 = getelementptr inbounds %struct.tree_type, ptr %13748, i64 0, i32 6
  %13774 = load i32, ptr %13773, align 4
  %13775 = lshr i32 %13774, 16
  %13776 = and i32 %13775, 255
  br label %13777

13777:                                            ; preds = %13772, %13770
  %13778 = phi i32 [ %13771, %13770 ], [ %13776, %13772 ]
  %13779 = zext i32 %13778 to i64
  %13780 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13779
  %13781 = load i8, ptr %13780, align 1, !tbaa !17
  %13782 = zext i8 %13781 to i32
  br label %13847

13783:                                            ; preds = %13709
  br i1 %13718, label %13784, label %13787

13784:                                            ; preds = %13783
  %13785 = tail call i32 @vector_type_mode(ptr noundef nonnull %13715) #24
  %13786 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13792

13787:                                            ; preds = %13783
  %13788 = getelementptr inbounds %struct.tree_type, ptr %13715, i64 0, i32 6
  %13789 = load i32, ptr %13788, align 4
  %13790 = lshr i32 %13789, 16
  %13791 = and i32 %13790, 255
  br label %13792

13792:                                            ; preds = %13787, %13784
  %13793 = phi ptr [ %13786, %13784 ], [ %13715, %13787 ]
  %13794 = phi i32 [ %13785, %13784 ], [ %13791, %13787 ]
  %13795 = zext i32 %13794 to i64
  %13796 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13795
  %13797 = load i8, ptr %13796, align 1, !tbaa !17
  %13798 = icmp eq i8 %13797, 8
  br i1 %13798, label %13818, label %13799

13799:                                            ; preds = %13792
  %13800 = load i64, ptr %13793, align 8
  %13801 = and i64 %13800, 65535
  %13802 = icmp eq i64 %13801, 14
  br i1 %13802, label %13803, label %13806

13803:                                            ; preds = %13799
  %13804 = tail call i32 @vector_type_mode(ptr noundef nonnull %13793) #24
  %13805 = load ptr, ptr %13564, align 8, !tbaa !17
  br label %13811

13806:                                            ; preds = %13799
  %13807 = getelementptr inbounds %struct.tree_type, ptr %13793, i64 0, i32 6
  %13808 = load i32, ptr %13807, align 4
  %13809 = lshr i32 %13808, 16
  %13810 = and i32 %13809, 255
  br label %13811

13811:                                            ; preds = %13806, %13803
  %13812 = phi ptr [ %13805, %13803 ], [ %13793, %13806 ]
  %13813 = phi i32 [ %13804, %13803 ], [ %13810, %13806 ]
  %13814 = zext i32 %13813 to i64
  %13815 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %13814
  %13816 = load i8, ptr %13815, align 1, !tbaa !17
  %13817 = icmp eq i8 %13816, 9
  br i1 %13817, label %13818, label %13830

13818:                                            ; preds = %13811, %13792
  %13819 = phi ptr [ %13812, %13811 ], [ %13793, %13792 ]
  %13820 = load i64, ptr %13819, align 8
  %13821 = and i64 %13820, 65535
  %13822 = icmp eq i64 %13821, 14
  br i1 %13822, label %13823, label %13825

13823:                                            ; preds = %13818
  %13824 = tail call i32 @vector_type_mode(ptr noundef nonnull %13819) #24
  br label %13847

13825:                                            ; preds = %13818
  %13826 = getelementptr inbounds %struct.tree_type, ptr %13819, i64 0, i32 6
  %13827 = load i32, ptr %13826, align 4
  %13828 = lshr i32 %13827, 16
  %13829 = and i32 %13828, 255
  br label %13847

13830:                                            ; preds = %13811
  %13831 = load i64, ptr %13812, align 8
  %13832 = and i64 %13831, 65535
  %13833 = icmp eq i64 %13832, 14
  br i1 %13833, label %13834, label %13836

13834:                                            ; preds = %13830
  %13835 = tail call i32 @vector_type_mode(ptr noundef nonnull %13812) #24
  br label %13841

13836:                                            ; preds = %13830
  %13837 = getelementptr inbounds %struct.tree_type, ptr %13812, i64 0, i32 6
  %13838 = load i32, ptr %13837, align 4
  %13839 = lshr i32 %13838, 16
  %13840 = and i32 %13839, 255
  br label %13841

13841:                                            ; preds = %13836, %13834
  %13842 = phi i32 [ %13835, %13834 ], [ %13840, %13836 ]
  %13843 = zext i32 %13842 to i64
  %13844 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %13843
  %13845 = load i8, ptr %13844, align 1, !tbaa !17
  %13846 = zext i8 %13845 to i32
  br label %13847

13847:                                            ; preds = %13841, %13825, %13823, %13777, %13761, %13759
  %13848 = phi i32 [ %13782, %13777 ], [ %13760, %13759 ], [ %13765, %13761 ], [ %13846, %13841 ], [ %13824, %13823 ], [ %13829, %13825 ]
  %13849 = add i32 %13848, -38
  %13850 = zext i32 %13849 to i64
  %13851 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %13850
  %13852 = load ptr, ptr %13851, align 8, !tbaa !6
  %13853 = getelementptr inbounds %struct.real_format, ptr %13852, i64 0, i32 11
  %13854 = load i8, ptr %13853, align 2, !tbaa !36
  %13855 = icmp eq i8 %13854, 0
  %13856 = load i32, ptr @flag_finite_math_only, align 4
  %13857 = icmp ne i32 %13856, 0
  %13858 = select i1 %13855, i1 true, i1 %13857
  br i1 %13858, label %13859, label %13888

13859:                                            ; preds = %13847, %13633
  %13860 = tail call i32 @real_zerop(ptr noundef nonnull %45) #24
  %13861 = icmp eq i32 %13860, 0
  br i1 %13861, label %13888, label %13862

13862:                                            ; preds = %13859, %13560
  %13863 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %46, ptr noundef nonnull %6)
  %13864 = icmp eq i8 %13863, 0
  br i1 %13864, label %13888, label %13865

13865:                                            ; preds = %13862
  %13866 = load i8, ptr %6, align 1, !tbaa !17
  %13867 = icmp eq i8 %13866, 0
  br i1 %13867, label %13869, label %13868

13868:                                            ; preds = %13865
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.19, i32 noundef 2)
  br label %13869

13869:                                            ; preds = %13868, %13865
  %13870 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %13871 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13870, ptr noundef nonnull %46)
  br label %14075

13872:                                            ; preds = %13559
  %13873 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %13874 = icmp eq i32 %13873, 0
  br i1 %13874, label %13875, label %13878

13875:                                            ; preds = %13872
  %13876 = tail call i32 @real_zerop(ptr noundef nonnull %45) #24
  %13877 = icmp eq i32 %13876, 0
  br i1 %13877, label %13888, label %13878

13878:                                            ; preds = %13875, %13872
  %13879 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %46, ptr noundef nonnull %6)
  %13880 = icmp eq i8 %13879, 0
  br i1 %13880, label %13888, label %13881

13881:                                            ; preds = %13878
  %13882 = load i8, ptr %6, align 1, !tbaa !17
  %13883 = icmp eq i8 %13882, 0
  br i1 %13883, label %13885, label %13884

13884:                                            ; preds = %13881
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.19, i32 noundef 2)
  br label %13885

13885:                                            ; preds = %13884, %13881
  %13886 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %13887 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13886, ptr noundef nonnull %46)
  br label %14075

13888:                                            ; preds = %13859, %13862, %13847, %13875, %13878
  %13889 = phi i32 [ 101, %13878 ], [ 101, %13875 ], [ 102, %13847 ], [ 102, %13862 ], [ 102, %13859 ]
  %13890 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %13891 = load ptr, ptr %13890, align 8, !tbaa !17
  %13892 = load i64, ptr %13891, align 8
  %13893 = and i64 %13892, 2097152
  %13894 = icmp eq i64 %13893, 0
  br i1 %13894, label %13912, label %13895

13895:                                            ; preds = %13888
  %13896 = load i64, ptr %45, align 8
  %13897 = and i64 %13896, 65535
  %13898 = icmp eq i64 %13897, 83
  br i1 %13898, label %13899, label %13912

13899:                                            ; preds = %13895
  %13900 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %13901 = load ptr, ptr %13900, align 8, !tbaa !17
  %13902 = tail call i32 @integer_onep(ptr noundef %13901) #24
  %13903 = icmp eq i32 %13902, 0
  br i1 %13903, label %13912, label %13904

13904:                                            ; preds = %13899
  %13905 = load ptr, ptr %13890, align 8, !tbaa !17
  %13906 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 1
  %13907 = load ptr, ptr %13906, align 8, !tbaa !17
  %13908 = tail call ptr @build2_stat(i32 noundef 84, ptr noundef %13905, ptr noundef nonnull %46, ptr noundef %13907) #24
  %13909 = load ptr, ptr %13890, align 8, !tbaa !17
  %13910 = tail call ptr @build_int_cst(ptr noundef %13909, i64 noundef 0) #24
  %13911 = tail call ptr @build2_stat(i32 noundef %13889, ptr noundef %2, ptr noundef %13908, ptr noundef %13910) #24
  br label %14073

13912:                                            ; preds = %13899, %13895, %13888
  switch i32 %1, label %14075 [
    i32 100, label %13913
    i32 97, label %13913
  ]

13913:                                            ; preds = %13912, %13912
  %13914 = load ptr, ptr %13890, align 8, !tbaa !17
  %13915 = load i64, ptr %13914, align 8
  %13916 = and i64 %13915, 2097152
  %13917 = icmp eq i64 %13916, 0
  br i1 %13917, label %14075, label %13918

13918:                                            ; preds = %13913
  %13919 = load i64, ptr %45, align 8
  %13920 = trunc i64 %13919 to i16
  switch i16 %13920, label %14075 [
    i16 116, label %13921
    i16 113, label %13921
  ]

13921:                                            ; preds = %13918, %13918
  %13922 = getelementptr inbounds %struct.tree_exp, ptr %45, i64 0, i32 3
  %13923 = load ptr, ptr %13922, align 8, !tbaa !17
  %13924 = load i64, ptr %13923, align 8
  %13925 = and i64 %13924, 65535
  %13926 = icmp eq i64 %13925, 83
  br i1 %13926, label %13927, label %14075

13927:                                            ; preds = %13921
  %13928 = getelementptr inbounds %struct.tree_exp, ptr %13923, i64 0, i32 3
  %13929 = load ptr, ptr %13928, align 8, !tbaa !17
  %13930 = tail call i32 @integer_onep(ptr noundef %13929) #24
  %13931 = icmp eq i32 %13930, 0
  br i1 %13931, label %14075, label %13932

13932:                                            ; preds = %13927
  %13933 = load ptr, ptr %13890, align 8, !tbaa !17
  %13934 = load ptr, ptr %13922, align 8, !tbaa !17
  %13935 = getelementptr inbounds %struct.tree_exp, ptr %13934, i64 1
  %13936 = load ptr, ptr %13935, align 8, !tbaa !17
  %13937 = tail call ptr @build2_stat(i32 noundef 84, ptr noundef %13933, ptr noundef nonnull %46, ptr noundef %13936) #24
  %13938 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13933, ptr noundef %13937)
  %13939 = load ptr, ptr %13890, align 8, !tbaa !17
  %13940 = tail call ptr @build_int_cst(ptr noundef %13939, i64 noundef 0) #24
  %13941 = tail call ptr @build2_stat(i32 noundef %13889, ptr noundef %2, ptr noundef %13938, ptr noundef %13940) #24
  br label %14073

13942:                                            ; preds = %305, %305, %305, %305, %305, %305, %305, %305
  %13943 = load i64, ptr %46, align 8
  %13944 = and i64 %13943, 65535
  %13945 = icmp eq i64 %13944, 24
  br i1 %13945, label %13946, label %13955

13946:                                            ; preds = %13942
  %13947 = load i64, ptr %45, align 8
  %13948 = and i64 %13947, 65535
  %13949 = icmp eq i64 %13948, 24
  br i1 %13949, label %13950, label %13955

13950:                                            ; preds = %13946
  %13951 = tail call fastcc ptr @fold_relational_const(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45)
  %13952 = icmp eq ptr %13951, null
  br i1 %13952, label %13953, label %14075

13953:                                            ; preds = %13950
  %13954 = load i64, ptr %46, align 8
  br label %13955

13955:                                            ; preds = %13953, %13946, %13942
  %13956 = phi i64 [ %13954, %13953 ], [ %13943, %13946 ], [ %13943, %13942 ]
  %13957 = and i64 %13956, 65535
  %13958 = icmp eq i64 %13957, 24
  br i1 %13958, label %13959, label %13976

13959:                                            ; preds = %13955
  %13960 = getelementptr inbounds %struct.tree_real_cst, ptr %46, i64 0, i32 1
  %13961 = load ptr, ptr %13960, align 8, !tbaa !17
  %13962 = tail call zeroext i8 @real_isnan(ptr noundef %13961) #24
  %13963 = icmp eq i8 %13962, 0
  br i1 %13963, label %13976, label %13964

13964:                                            ; preds = %13959
  %13965 = icmp eq i32 %1, 110
  %13966 = load i32, ptr @flag_trapping_math, align 4
  %13967 = icmp ne i32 %13966, 0
  %13968 = select i1 %13965, i1 %13967, i1 false
  br i1 %13968, label %13976, label %13969

13969:                                            ; preds = %13964
  %13970 = icmp eq i32 %1, 104
  %13971 = or i1 %13970, %13965
  %13972 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %13973 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %13974 = select i1 %13971, ptr %13972, ptr %13973
  %13975 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13974, ptr noundef %45)
  br label %14075

13976:                                            ; preds = %13964, %13959, %13955
  %13977 = load i64, ptr %45, align 8
  %13978 = and i64 %13977, 65535
  %13979 = icmp eq i64 %13978, 24
  br i1 %13979, label %13980, label %13997

13980:                                            ; preds = %13976
  %13981 = getelementptr inbounds %struct.tree_real_cst, ptr %45, i64 0, i32 1
  %13982 = load ptr, ptr %13981, align 8, !tbaa !17
  %13983 = tail call zeroext i8 @real_isnan(ptr noundef %13982) #24
  %13984 = icmp eq i8 %13983, 0
  br i1 %13984, label %13997, label %13985

13985:                                            ; preds = %13980
  %13986 = icmp eq i32 %1, 110
  %13987 = load i32, ptr @flag_trapping_math, align 4
  %13988 = icmp ne i32 %13987, 0
  %13989 = select i1 %13986, i1 %13988, i1 false
  br i1 %13989, label %14013, label %13990

13990:                                            ; preds = %13985
  %13991 = icmp eq i32 %1, 104
  %13992 = or i1 %13991, %13986
  %13993 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %13994 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %13995 = select i1 %13992, ptr %13993, ptr %13994
  %13996 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %13995, ptr noundef nonnull %46)
  br label %14075

13997:                                            ; preds = %13980, %13976
  switch i32 %1, label %14003 [
    i32 109, label %13998
    i32 108, label %13998
    i32 106, label %13998
  ]

13998:                                            ; preds = %13997, %13997, %13997
  %13999 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %14000 = icmp eq i32 %13999, 0
  br i1 %14000, label %14013, label %14001

14001:                                            ; preds = %13998
  %14002 = tail call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %14075

14003:                                            ; preds = %13997
  %14004 = load i32, ptr @flag_trapping_math, align 4
  %14005 = icmp ne i32 %1, 110
  %14006 = icmp ne i32 %14004, 0
  %14007 = select i1 %14005, i1 true, i1 %14006
  br i1 %14007, label %14013, label %14008

14008:                                            ; preds = %14003
  %14009 = tail call i32 @operand_equal_p(ptr noundef nonnull %46, ptr noundef nonnull %45, i32 noundef 0)
  %14010 = icmp eq i32 %14009, 0
  br i1 %14010, label %14013, label %14011

14011:                                            ; preds = %14008
  %14012 = tail call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %14075

14013:                                            ; preds = %13985, %13998, %14008, %14003
  %14014 = tail call ptr @strip_float_extensions(ptr noundef nonnull %46) #24
  %14015 = tail call ptr @strip_float_extensions(ptr noundef nonnull %45) #24
  %14016 = getelementptr inbounds %struct.tree_common, ptr %14014, i64 0, i32 2
  %14017 = load ptr, ptr %14016, align 8, !tbaa !17
  %14018 = getelementptr inbounds %struct.tree_common, ptr %14015, i64 0, i32 2
  %14019 = load ptr, ptr %14018, align 8, !tbaa !17
  %14020 = getelementptr inbounds %struct.tree_type, ptr %14019, i64 0, i32 6
  %14021 = load i32, ptr %14020, align 4
  %14022 = and i32 %14021, 1023
  %14023 = getelementptr inbounds %struct.tree_type, ptr %14017, i64 0, i32 6
  %14024 = load i32, ptr %14023, align 4
  %14025 = and i32 %14024, 1023
  %14026 = icmp ugt i32 %14022, %14025
  %14027 = select i1 %14026, ptr %14019, ptr %14017
  %14028 = getelementptr inbounds %struct.tree_type, ptr %14027, i64 0, i32 6
  %14029 = load i32, ptr %14028, align 4
  %14030 = and i32 %14029, 1023
  %14031 = getelementptr inbounds %struct.tree_common, ptr %46, i64 0, i32 2
  %14032 = load ptr, ptr %14031, align 8, !tbaa !17
  %14033 = getelementptr inbounds %struct.tree_type, ptr %14032, i64 0, i32 6
  %14034 = load i32, ptr %14033, align 4
  %14035 = and i32 %14034, 1023
  %14036 = icmp ult i32 %14030, %14035
  br i1 %14036, label %14037, label %14075

14037:                                            ; preds = %14013
  %14038 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %14027, ptr noundef nonnull %14014)
  %14039 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %14027, ptr noundef nonnull %14015)
  %14040 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %14038, ptr noundef %14039)
  br label %14075

14041:                                            ; preds = %305
  %14042 = load i64, ptr %46, align 8
  %14043 = and i64 %14042, 65536
  %14044 = icmp eq i64 %14043, 0
  br i1 %14044, label %14045, label %14075

14045:                                            ; preds = %14041
  %14046 = load i64, ptr %45, align 8
  %14047 = and i64 %14046, 131072
  %14048 = icmp eq i64 %14047, 0
  br i1 %14048, label %14049, label %14075

14049:                                            ; preds = %14045
  %14050 = tail call i32 @integer_zerop(ptr noundef nonnull %45) #24
  %14051 = icmp eq i32 %14050, 0
  br i1 %14051, label %14054, label %14052

14052:                                            ; preds = %14049
  %14053 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %2, ptr noundef nonnull %45) #24
  br label %14056

14054:                                            ; preds = %14049
  %14055 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %45)
  br label %14056

14056:                                            ; preds = %14054, %14052
  %14057 = phi ptr [ %14053, %14052 ], [ %14055, %14054 ]
  %14058 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %14057)
  br label %14075

14059:                                            ; preds = %305
  %14060 = load i64, ptr %46, align 8
  %14061 = trunc i64 %14060 to i16
  switch i16 %14061, label %14075 [
    i16 24, label %14062
    i16 23, label %14066
  ]

14062:                                            ; preds = %14059
  %14063 = load i64, ptr %45, align 8
  %14064 = and i64 %14063, 65535
  %14065 = icmp eq i64 %14064, 24
  br i1 %14065, label %14070, label %14075

14066:                                            ; preds = %14059
  %14067 = load i64, ptr %45, align 8
  %14068 = and i64 %14067, 65535
  %14069 = icmp eq i64 %14068, 23
  br i1 %14069, label %14070, label %14075

14070:                                            ; preds = %14066, %14062
  %14071 = tail call ptr @build_complex(ptr noundef %2, ptr noundef nonnull %46, ptr noundef nonnull %45) #24
  br label %14075

14072:                                            ; preds = %305
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 13699, ptr noundef nonnull @.str.1) #24
  br label %14075

14073:                                            ; preds = %13932, %13904, %279, %244
  %14074 = phi ptr [ %247, %244 ], [ %282, %279 ], [ %13911, %13904 ], [ %13941, %13932 ]
  tail call void @protected_set_expr_location(ptr noundef %14074, i32 noundef %0) #24
  br label %14075

14075:                                            ; preds = %13559, %13548, %13545, %13541, %13537, %14037, %14013, %14059, %10263, %14062, %13375, %13350, %13324, %13298, %13268, %12940, %12610, %12578, %12185, %12182, %12179, %12176, %12163, %12160, %12157, %12154, %12113, %12103, %12098, %12093, %12088, %12063, %12053, %12045, %12037, %11616, %11624, %11628, %11042, %11029, %11020, %11005, %10593, %10473, %10270, %8981, %9006, %9623, %10237, %10253, %10294, %10283, %6368, %6311, %6289, %6108, %6098, %6057, %6045, %5842, %5774, %6149, %6164, %6186, %6206, %6064, %5723, %5714, %13525, %13479, %13486, %13465, %13468, %13470, %13473, %13444, %13451, %13430, %13433, %13435, %13438, %12117, %12120, %12165, %12168, %11820, %11777, %11726, %11696, %11499, %11521, %10744, %10550, %10336, %8954, %10282, %8951, %8911, %8240, %7275, %7305, %7126, %7096, %5089, %5079, %3004, %2974, %2629, %2611, %1946, %1744, %1585, %1588, %1576, %1705, %1702, %1564, %1531, %1500, %1412, %1393, %1345, %1327, %632, %639, %513, %482, %460, %102, %99, %14072, %305, %14066, %14041, %14045, %13950, %13913, %13921, %13927, %13912, %13918, %12187, %11742, %11667, %11199, %11187, %11191, %11065, %11048, %10976, %10884, %10861, %10688, %10695, %10640, %10589, %10596, %10494, %10469, %10476, %10362, %7604, %7065, %6469, %3036, %1357, %380, %383, %302, %289, %87, %91, %544, %3065, %10833, %14073, %14070, %14056, %14011, %14001, %13990, %13969, %13885, %13869, %13552, %12015, %12004, %11985, %11953, %11919, %11898, %11880, %11847, %11833, %11661, %11646, %11553, %11475, %11457, %11442, %11412, %11393, %11375, %11357, %11320, %11267, %11254, %11243, %11229, %11215, %11196, %11184, %11172, %11165, %11149, %11143, %11131, %11120, %11109, %11099, %11083, %11074, %11061, %10974, %10966, %10949, %10937, %10926, %10921, %10915, %10899, %10890, %10882, %10867, %10859, %10846, %10842, %10817, %10781, %10755, %10634, %10628, %10623, %10611, %10606, %10583, %10573, %10519, %10500, %10491, %10486, %10467, %10455, %10413, %10381, %10359, %10354, %8932, %8922, %8887, %8872, %8568, %8262, %8250, %7658, %7102, %7060, %7027, %7011, %6978, %6957, %6939, %6924, %6896, %6868, %6838, %6822, %6805, %6793, %6781, %6776, %6770, %6762, %6729, %6713, %6680, %6664, %6650, %6642, %6627, %6609, %6589, %6571, %6529, %6515, %6503, %6498, %6492, %6480, %6467, %6439, %6411, %6381, %6249, %6235, %6223, %6217, %6212, %5754, %5740, %5056, %4444, %3832, %3234, %3223, %3212, %3188, %3167, %3152, %3139, %3119, %3113, %3108, %3089, %3075, %2956, %2924, %1962, %1955, %1917, %1907, %1889, %1883, %1865, %1837, %1818, %1791, %1750, %1730, %1367, %678, %658, %650, %559, %438, %414, %394, %388, %377, %359, %351, %334, %315, %309, %224
  %14076 = phi ptr [ %226, %224 ], [ %14074, %14073 ], [ %14071, %14070 ], [ %14058, %14056 ], [ %14002, %14001 ], [ %14012, %14011 ], [ %13996, %13990 ], [ %13975, %13969 ], [ %13871, %13869 ], [ %13887, %13885 ], [ %13558, %13552 ], [ %11217, %11215 ], [ %11231, %11229 ], [ %11245, %11243 ], [ %11256, %11254 ], [ %11269, %11267 ], [ %11400, %11393 ], [ %11420, %11412 ], [ %11447, %11442 ], [ %11462, %11457 ], [ %11478, %11475 ], [ %11647, %11646 ], [ %11666, %11661 ], [ %11838, %11833 ], [ %11853, %11847 ], [ %11884, %11880 ], [ %11904, %11898 ], [ %11927, %11919 ], [ %11959, %11953 ], [ %11997, %11985 ], [ %12007, %12004 ], [ %12020, %12015 ], [ %11825, %11820 ], [ %11782, %11777 ], [ %11728, %11726 ], [ %11698, %11696 ], [ %11566, %11553 ], [ %11378, %11375 ], [ %11359, %11357 ], [ %11326, %11320 ], [ %11151, %11149 ], [ %11168, %11165 ], [ %11174, %11172 ], [ %11186, %11184 ], [ %11198, %11196 ], [ %11085, %11083 ], [ %11101, %11099 ], [ %11133, %11131 ], [ %11145, %11143 ], [ %11064, %11061 ], [ %11121, %11120 ], [ %11110, %11109 ], [ %11075, %11074 ], [ %10922, %10921 ], [ %10927, %10926 ], [ %10939, %10937 ], [ %10951, %10949 ], [ %10975, %10974 ], [ %10967, %10966 ], [ %10917, %10915 ], [ %10901, %10899 ], [ %10891, %10890 ], [ %10868, %10867 ], [ %10883, %10882 ], [ %10847, %10846 ], [ %10860, %10859 ], [ %10630, %10628 ], [ %10635, %10634 ], [ %10764, %10755 ], [ %10787, %10781 ], [ %10818, %10817 ], [ null, %10842 ], [ %10840, %10833 ], [ %10624, %10623 ], [ %10612, %10611 ], [ %10493, %10491 ], [ %10502, %10500 ], [ %10607, %10606 ], [ %10588, %10583 ], [ %10577, %10573 ], [ %10553, %10550 ], [ %10521, %10519 ], [ %10361, %10359 ], [ %10419, %10413 ], [ %10461, %10455 ], [ %10468, %10467 ], [ %10487, %10486 ], [ %10383, %10381 ], [ %10355, %10354 ], [ %10342, %10336 ], [ %7660, %7658 ], [ %8254, %8250 ], [ %8266, %8262 ], [ %8570, %8568 ], [ %8875, %8872 ], [ %8888, %8887 ], [ %8928, %8922 ], [ %8938, %8932 ], [ %8953, %8951 ], [ %8914, %8911 ], [ %8242, %8240 ], [ %6772, %6770 ], [ %6777, %6776 ], [ %6783, %6781 ], [ %6795, %6793 ], [ %6807, %6805 ], [ %6832, %6822 ], [ %6841, %6838 ], [ %6869, %6868 ], [ %6897, %6896 ], [ %6925, %6924 ], [ %6947, %6939 ], [ %6966, %6957 ], [ %6984, %6978 ], [ %7015, %7011 ], [ %7033, %7027 ], [ %7064, %7060 ], [ %7110, %7102 ], [ %7097, %7096 ], [ %6494, %6492 ], [ %6499, %6498 ], [ %6505, %6503 ], [ %6519, %6515 ], [ %6533, %6529 ], [ %6213, %6212 ], [ %6219, %6217 ], [ %6225, %6223 ], [ %6239, %6235 ], [ %6253, %6249 ], [ %6384, %6381 ], [ %6412, %6411 ], [ %6440, %6439 ], [ %6468, %6467 ], [ %6488, %6480 ], [ %6579, %6571 ], [ %6597, %6589 ], [ %6617, %6609 ], [ %6635, %6627 ], [ %6649, %6642 ], [ %6655, %6650 ], [ %6668, %6664 ], [ %6686, %6680 ], [ %6717, %6713 ], [ %6735, %6729 ], [ %6766, %6762 ], [ %3081, %3075 ], [ %3095, %3089 ], [ %5741, %5740 ], [ %5755, %5754 ], [ %5091, %5089 ], [ %5082, %5079 ], [ %5058, %5056 ], [ %4446, %4444 ], [ %3833, %3832 ], [ %3109, %3108 ], [ %3115, %3113 ], [ %3121, %3119 ], [ %3155, %3152 ], [ %3170, %3167 ], [ %3194, %3188 ], [ %3213, %3212 ], [ %3224, %3223 ], [ %3235, %3234 ], [ %3142, %3139 ], [ %1739, %1730 ], [ %1754, %1750 ], [ %1797, %1791 ], [ %1838, %1837 ], [ %1870, %1865 ], [ %1957, %1955 ], [ %1964, %1962 ], [ %2926, %2924 ], [ %2960, %2956 ], [ %3066, %3065 ], [ %3014, %3004 ], [ %2976, %2974 ], [ %1885, %1883 ], [ %1891, %1889 ], [ %1949, %1946 ], [ %1911, %1907 ], [ %1922, %1917 ], [ %1822, %1818 ], [ %1745, %1744 ], [ %399, %394 ], [ %418, %414 ], [ %442, %438 ], [ %652, %650 ], [ %660, %658 ], [ %1369, %1367 ], [ %1414, %1412 ], [ %1395, %1393 ], [ %681, %678 ], [ %561, %559 ], [ %545, %544 ], [ %517, %513 ], [ %484, %482 ], [ %462, %460 ], [ %311, %309 ], [ %317, %315 ], [ %340, %334 ], [ %355, %351 ], [ %372, %359 ], [ %379, %377 ], [ %389, %388 ], [ %92, %91 ], [ %85, %87 ], [ %290, %289 ], [ %303, %302 ], [ null, %383 ], [ null, %380 ], [ %1358, %1357 ], [ %3037, %3036 ], [ %6470, %6469 ], [ %7066, %7065 ], [ null, %7604 ], [ null, %10362 ], [ null, %10476 ], [ null, %10469 ], [ null, %10494 ], [ null, %10596 ], [ null, %10589 ], [ null, %10640 ], [ %10699, %10695 ], [ %10691, %10688 ], [ %10862, %10861 ], [ %10885, %10884 ], [ null, %10976 ], [ %11049, %11048 ], [ %11066, %11065 ], [ null, %11191 ], [ null, %11187 ], [ %11200, %11199 ], [ %11668, %11667 ], [ %11743, %11742 ], [ %12188, %12187 ], [ null, %13918 ], [ null, %13912 ], [ null, %13927 ], [ null, %13921 ], [ null, %13913 ], [ %13951, %13950 ], [ null, %14045 ], [ null, %14041 ], [ null, %14066 ], [ null, %305 ], [ null, %14072 ], [ %100, %99 ], [ %103, %102 ], [ %637, %632 ], [ %644, %639 ], [ %1329, %1327 ], [ %1347, %1345 ], [ %1505, %1500 ], [ %1538, %1531 ], [ %1571, %1564 ], [ %1704, %1702 ], [ null, %1705 ], [ null, %1576 ], [ null, %1588 ], [ null, %1585 ], [ %2613, %2611 ], [ %2632, %2629 ], [ %7129, %7126 ], [ %7277, %7275 ], [ %7306, %7305 ], [ null, %10282 ], [ null, %8954 ], [ %10749, %10744 ], [ %11511, %11499 ], [ %11533, %11521 ], [ null, %12168 ], [ null, %12165 ], [ null, %12120 ], [ null, %12117 ], [ %13532, %13525 ], [ %13485, %13479 ], [ %13492, %13486 ], [ %13467, %13465 ], [ %13469, %13468 ], [ %13472, %13470 ], [ %13474, %13473 ], [ %13450, %13444 ], [ %13457, %13451 ], [ %13432, %13430 ], [ %13434, %13433 ], [ %13437, %13435 ], [ %13439, %13438 ], [ %5727, %5723 ], [ %5718, %5714 ], [ %5766, %5774 ], [ %5766, %5842 ], [ %5766, %6045 ], [ %6063, %6057 ], [ %6151, %6149 ], [ %6173, %6164 ], [ %6195, %6186 ], [ %6208, %6206 ], [ %6074, %6064 ], [ %6114, %6108 ], [ %6104, %6098 ], [ %6374, %6368 ], [ %6313, %6311 ], [ %6291, %6289 ], [ %10281, %10270 ], [ %8983, %8981 ], [ %9010, %9006 ], [ %9624, %9623 ], [ %10240, %10237 ], [ %10262, %10253 ], [ %10306, %10294 ], [ %10293, %10283 ], [ null, %10473 ], [ null, %10593 ], [ %11047, %11042 ], [ %11034, %11029 ], [ %11025, %11020 ], [ %11010, %11005 ], [ %11627, %11624 ], [ %11632, %11628 ], [ %11619, %11616 ], [ %12067, %12063 ], [ %12057, %12053 ], [ %12049, %12045 ], [ %12041, %12037 ], [ %12116, %12113 ], [ %12104, %12103 ], [ %12099, %12098 ], [ %12094, %12093 ], [ %12089, %12088 ], [ %12186, %12185 ], [ %12184, %12182 ], [ %12180, %12179 ], [ %12178, %12176 ], [ %12164, %12163 ], [ %12162, %12160 ], [ %12158, %12157 ], [ %12156, %12154 ], [ %13376, %13375 ], [ %13351, %13350 ], [ %13325, %13324 ], [ %13299, %13298 ], [ %13269, %13268 ], [ %12941, %12940 ], [ %12611, %12610 ], [ %12579, %12578 ], [ null, %14062 ], [ null, %10263 ], [ null, %14059 ], [ null, %14013 ], [ %14040, %14037 ], [ null, %13537 ], [ null, %13541 ], [ null, %13545 ], [ null, %13548 ], [ null, %13559 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #24
  ret ptr %14076
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_relational_const(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #10 {
  %5 = load i64, ptr %2, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %120 [
    i16 24, label %7
    i16 25, label %65
    i16 26, label %93
  ]

7:                                                ; preds = %4
  %8 = load i64, ptr %3, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 24
  br i1 %10, label %11, label %120

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.tree_real_cst, ptr %2, i64 0, i32 1
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = getelementptr inbounds %struct.tree_real_cst, ptr %3, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = tail call zeroext i8 @real_isnan(ptr noundef %13) #24
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = tail call zeroext i8 @real_isnan(ptr noundef %15) #24
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %45, label %21

21:                                               ; preds = %18, %11
  switch i32 %0, label %26 [
    i32 101, label %27
    i32 104, label %27
    i32 102, label %22
    i32 103, label %22
    i32 105, label %22
    i32 106, label %22
    i32 107, label %22
    i32 108, label %22
    i32 109, label %22
    i32 97, label %23
    i32 98, label %23
    i32 99, label %23
    i32 100, label %23
    i32 110, label %23
  ]

22:                                               ; preds = %21, %21, %21, %21, %21, %21, %21
  br label %27

23:                                               ; preds = %21, %21, %21, %21, %21
  %24 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %27, label %201

26:                                               ; preds = %21
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 15939, ptr noundef nonnull @.str.1) #24
  unreachable

27:                                               ; preds = %23, %21, %21, %22
  %28 = phi i1 [ false, %22 ], [ true, %21 ], [ true, %21 ], [ true, %23 ]
  %29 = phi i64 [ 1, %22 ], [ 0, %21 ], [ 0, %21 ], [ 0, %23 ]
  %30 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %31 = icmp eq ptr %30, %1
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %34 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %35 = select i1 %28, ptr %34, ptr %33
  br label %201

36:                                               ; preds = %27
  %37 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %38 = icmp eq ptr %37, %1
  br i1 %38, label %39, label %43

39:                                               ; preds = %36
  %40 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %41 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %42 = select i1 %28, ptr %41, ptr %40
  br label %201

43:                                               ; preds = %36
  %44 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %29) #24
  br label %201

45:                                               ; preds = %18
  %46 = tail call zeroext i8 @real_compare(i32 noundef %0, ptr noundef %13, ptr noundef %15) #24
  %47 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %48 = icmp eq ptr %47, %1
  br i1 %48, label %49, label %54

49:                                               ; preds = %45
  %50 = icmp eq i8 %46, 0
  %51 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %52 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %53 = select i1 %50, ptr %52, ptr %51
  br label %201

54:                                               ; preds = %45
  %55 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %56 = icmp eq ptr %55, %1
  br i1 %56, label %57, label %62

57:                                               ; preds = %54
  %58 = icmp eq i8 %46, 0
  %59 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %60 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %61 = select i1 %58, ptr %60, ptr %59
  br label %201

62:                                               ; preds = %54
  %63 = zext i8 %46 to i64
  %64 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %63) #24
  br label %201

65:                                               ; preds = %4
  %66 = load i64, ptr %3, align 8
  %67 = and i64 %66, 65535
  %68 = icmp eq i64 %67, 25
  br i1 %68, label %69, label %120

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.tree_fixed_cst, ptr %2, i64 0, i32 1
  %71 = load ptr, ptr %70, align 8, !tbaa !17
  %72 = getelementptr inbounds %struct.tree_fixed_cst, ptr %3, i64 0, i32 1
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = tail call zeroext i8 @fixed_compare(i32 noundef %0, ptr noundef %71, ptr noundef %73) #24
  %75 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %76 = icmp eq ptr %75, %1
  br i1 %76, label %77, label %82

77:                                               ; preds = %69
  %78 = icmp eq i8 %74, 0
  %79 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %80 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %81 = select i1 %78, ptr %80, ptr %79
  br label %201

82:                                               ; preds = %69
  %83 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %84 = icmp eq ptr %83, %1
  br i1 %84, label %85, label %90

85:                                               ; preds = %82
  %86 = icmp eq i8 %74, 0
  %87 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %88 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %89 = select i1 %86, ptr %88, ptr %87
  br label %201

90:                                               ; preds = %82
  %91 = zext i8 %74 to i64
  %92 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %91) #24
  br label %201

93:                                               ; preds = %4
  %94 = load i64, ptr %3, align 8
  %95 = and i64 %94, 65535
  %96 = icmp eq i64 %95, 26
  br i1 %96, label %97, label %120

97:                                               ; preds = %93
  %98 = getelementptr inbounds %struct.tree_complex, ptr %2, i64 0, i32 1
  %99 = load ptr, ptr %98, align 8, !tbaa !17
  %100 = getelementptr inbounds %struct.tree_complex, ptr %3, i64 0, i32 1
  %101 = load ptr, ptr %100, align 8, !tbaa !17
  %102 = tail call fastcc ptr @fold_relational_const(i32 noundef %0, ptr noundef %1, ptr noundef %99, ptr noundef %101)
  %103 = getelementptr inbounds %struct.tree_complex, ptr %2, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !17
  %105 = getelementptr inbounds %struct.tree_complex, ptr %3, i64 0, i32 2
  %106 = load ptr, ptr %105, align 8, !tbaa !17
  %107 = tail call fastcc ptr @fold_relational_const(i32 noundef %0, ptr noundef %1, ptr noundef %104, ptr noundef %106)
  switch i32 %0, label %201 [
    i32 101, label %108
    i32 102, label %114
  ]

108:                                              ; preds = %97
  %109 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 91, ptr noundef %1, ptr noundef %102, ptr noundef %107)
  %110 = icmp eq ptr %109, null
  br i1 %110, label %111, label %201

111:                                              ; preds = %108
  %112 = tail call ptr @build2_stat(i32 noundef 91, ptr noundef %1, ptr noundef %102, ptr noundef %107) #24
  %113 = getelementptr inbounds %struct.tree_exp, ptr %112, i64 0, i32 1
  store i32 0, ptr %113, align 8, !tbaa !17
  br label %201

114:                                              ; preds = %97
  %115 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 92, ptr noundef %1, ptr noundef %102, ptr noundef %107)
  %116 = icmp eq ptr %115, null
  br i1 %116, label %117, label %201

117:                                              ; preds = %114
  %118 = tail call ptr @build2_stat(i32 noundef 92, ptr noundef %1, ptr noundef %102, ptr noundef %107) #24
  %119 = getelementptr inbounds %struct.tree_exp, ptr %118, i64 0, i32 1
  store i32 0, ptr %119, align 8, !tbaa !17
  br label %201

120:                                              ; preds = %4, %7, %65, %93
  %121 = and i32 %0, -2
  %122 = icmp eq i32 %121, 98
  br i1 %122, label %123, label %125

123:                                              ; preds = %120
  switch i32 %0, label %124 [
    i32 98, label %130
    i32 99, label %134
  ]

124:                                              ; preds = %123
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %134

125:                                              ; preds = %120
  %126 = and i32 %0, -3
  %127 = icmp eq i32 %126, 100
  br i1 %127, label %128, label %134

128:                                              ; preds = %125
  switch i32 %0, label %133 [
    i32 101, label %134
    i32 102, label %129
    i32 100, label %130
  ]

129:                                              ; preds = %128
  br label %134

130:                                              ; preds = %128, %123
  %131 = phi ptr [ %3, %128 ], [ %2, %123 ]
  %132 = phi ptr [ %2, %128 ], [ %3, %123 ]
  br label %134

133:                                              ; preds = %128
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2932, ptr noundef nonnull @.str.1) #24
  br label %134

134:                                              ; preds = %124, %123, %133, %130, %129, %128, %125
  %135 = phi i32 [ 0, %125 ], [ 1, %133 ], [ 1, %130 ], [ 1, %129 ], [ 1, %128 ], [ 0, %123 ], [ 0, %124 ]
  %136 = phi ptr [ %2, %125 ], [ %2, %133 ], [ %132, %130 ], [ %2, %129 ], [ %2, %128 ], [ %3, %123 ], [ %3, %124 ]
  %137 = phi ptr [ %3, %125 ], [ %3, %133 ], [ %131, %130 ], [ %3, %129 ], [ %3, %128 ], [ %2, %123 ], [ %2, %124 ]
  %138 = phi i32 [ %0, %125 ], [ 0, %133 ], [ 97, %130 ], [ 101, %129 ], [ 102, %128 ], [ 97, %123 ], [ 0, %124 ]
  %139 = load i64, ptr %136, align 8
  %140 = and i64 %139, 65535
  %141 = icmp eq i64 %140, 23
  br i1 %141, label %142, label %201

142:                                              ; preds = %134
  %143 = load i64, ptr %137, align 8
  %144 = and i64 %143, 65535
  %145 = icmp eq i64 %144, 23
  br i1 %145, label %146, label %201

146:                                              ; preds = %142
  %147 = icmp eq i32 %138, 101
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  %149 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %136, ptr noundef nonnull %137) #24
  br label %180

150:                                              ; preds = %146
  %151 = getelementptr inbounds %struct.tree_common, ptr %136, i64 0, i32 2
  %152 = load ptr, ptr %151, align 8, !tbaa !17
  %153 = load i64, ptr %152, align 8
  %154 = and i64 %153, 2097152
  %155 = icmp eq i64 %154, 0
  %156 = getelementptr inbounds %struct.tree_int_cst, ptr %136, i64 0, i32 1
  %157 = getelementptr inbounds %struct.tree_int_cst, ptr %136, i64 0, i32 1, i32 1
  %158 = load i64, ptr %157, align 8, !tbaa !17
  %159 = getelementptr inbounds %struct.tree_int_cst, ptr %137, i64 0, i32 1
  %160 = getelementptr inbounds %struct.tree_int_cst, ptr %137, i64 0, i32 1, i32 1
  %161 = load i64, ptr %160, align 8, !tbaa !17
  br i1 %155, label %171, label %162

162:                                              ; preds = %150
  %163 = icmp ult i64 %158, %161
  br i1 %163, label %180, label %164

164:                                              ; preds = %162
  %165 = icmp eq i64 %158, %161
  br i1 %165, label %166, label %180

166:                                              ; preds = %164
  %167 = load i64, ptr %156, align 8, !tbaa !17
  %168 = load i64, ptr %159, align 8, !tbaa !17
  %169 = icmp ult i64 %167, %168
  %170 = zext i1 %169 to i32
  br label %180

171:                                              ; preds = %150
  %172 = icmp slt i64 %158, %161
  br i1 %172, label %180, label %173

173:                                              ; preds = %171
  %174 = icmp eq i64 %158, %161
  br i1 %174, label %175, label %180

175:                                              ; preds = %173
  %176 = load i64, ptr %156, align 8, !tbaa !17
  %177 = load i64, ptr %159, align 8, !tbaa !17
  %178 = icmp ult i64 %176, %177
  %179 = zext i1 %178 to i32
  br label %180

180:                                              ; preds = %171, %175, %173, %162, %166, %164, %148
  %181 = phi i32 [ %149, %148 ], [ 1, %162 ], [ 0, %164 ], [ %170, %166 ], [ 1, %171 ], [ 0, %173 ], [ %179, %175 ]
  %182 = xor i32 %181, %135
  %183 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %184 = icmp eq ptr %183, %1
  br i1 %184, label %185, label %190

185:                                              ; preds = %180
  %186 = icmp eq i32 %182, 0
  %187 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %188 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %189 = select i1 %186, ptr %188, ptr %187
  br label %201

190:                                              ; preds = %180
  %191 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %192 = icmp eq ptr %191, %1
  br i1 %192, label %193, label %198

193:                                              ; preds = %190
  %194 = icmp eq i32 %182, 0
  %195 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  %196 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  %197 = select i1 %194, ptr %196, ptr %195
  br label %201

198:                                              ; preds = %190
  %199 = sext i32 %182 to i64
  %200 = tail call ptr @build_int_cst(ptr noundef %1, i64 noundef %199) #24
  br label %201

201:                                              ; preds = %198, %193, %185, %117, %114, %111, %108, %90, %85, %77, %62, %57, %49, %43, %39, %32, %134, %142, %97, %23
  %202 = phi ptr [ null, %23 ], [ null, %97 ], [ null, %142 ], [ null, %134 ], [ %35, %32 ], [ %42, %39 ], [ %44, %43 ], [ %53, %49 ], [ %61, %57 ], [ %64, %62 ], [ %81, %77 ], [ %89, %85 ], [ %92, %90 ], [ %109, %108 ], [ %112, %111 ], [ %115, %114 ], [ %118, %117 ], [ %189, %185 ], [ %197, %193 ], [ %200, %198 ]
  ret ptr %202
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_binary_op_with_conditional_arg(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4, ptr noundef %5, ptr noundef %6, i32 noundef %7) unnamed_addr #10 {
  %9 = icmp eq i32 %7, 0
  %10 = select i1 %9, ptr %4, ptr %3
  %11 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = select i1 %9, ptr %3, ptr %4
  %14 = getelementptr inbounds %struct.tree_common, ptr %13, i64 0, i32 2
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = load i64, ptr %6, align 8
  %17 = and i64 %16, 131072
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %127, label %19

19:                                               ; preds = %8
  %20 = load i64, ptr %5, align 8
  %21 = and i64 %20, 65535
  %22 = icmp eq i64 %21, 56
  br i1 %22, label %23, label %41

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 0, i32 3
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_exp, ptr %5, i64 1, i32 0, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = getelementptr inbounds %struct.tree_common, ptr %27, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = load i64, ptr %31, align 8
  %33 = and i64 %32, 65535
  %34 = icmp eq i64 %33, 19
  %35 = getelementptr inbounds %struct.tree_common, ptr %29, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = load i64, ptr %36, align 8
  %38 = and i64 %37, 65535
  %39 = icmp eq i64 %38, 19
  %40 = select i1 %39, ptr %29, ptr null
  br i1 %34, label %70, label %72

41:                                               ; preds = %19
  %42 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  %45 = icmp eq ptr %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  br label %60

48:                                               ; preds = %41
  %49 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %50 = icmp eq ptr %49, %43
  br i1 %50, label %51, label %53

51:                                               ; preds = %48
  %52 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16
  br label %56

53:                                               ; preds = %48
  %54 = tail call ptr @build_int_cst(ptr noundef %43, i64 noundef 1) #24
  %55 = load ptr, ptr getelementptr inbounds ([11 x ptr], ptr @integer_types, i64 0, i64 5), align 8, !tbaa !6
  br label %56

56:                                               ; preds = %51, %53
  %57 = phi ptr [ %44, %51 ], [ %55, %53 ]
  %58 = phi ptr [ %52, %51 ], [ %54, %53 ]
  %59 = icmp eq ptr %57, %43
  br i1 %59, label %60, label %63

60:                                               ; preds = %46, %56
  %61 = phi ptr [ %47, %46 ], [ %58, %56 ]
  %62 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  br label %72

63:                                               ; preds = %56
  %64 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 47), align 8, !tbaa !6
  %65 = icmp eq ptr %64, %43
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  %67 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8
  br label %72

68:                                               ; preds = %63
  %69 = tail call ptr @build_int_cst(ptr noundef %43, i64 noundef 0) #24
  br label %72

70:                                               ; preds = %23
  %71 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %15, ptr noundef nonnull %6)
  br label %91

72:                                               ; preds = %23, %60, %66, %68
  %73 = phi ptr [ %5, %68 ], [ %5, %66 ], [ %5, %60 ], [ %25, %23 ]
  %74 = phi ptr [ %58, %68 ], [ %58, %66 ], [ %61, %60 ], [ %27, %23 ]
  %75 = phi ptr [ %69, %68 ], [ %67, %66 ], [ %62, %60 ], [ %29, %23 ]
  %76 = phi ptr [ null, %68 ], [ null, %66 ], [ null, %60 ], [ %40, %23 ]
  %77 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %15, ptr noundef nonnull %6)
  %78 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %12, ptr noundef %74)
  br i1 %9, label %85, label %79

79:                                               ; preds = %72
  %80 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %78, ptr noundef %77)
  %81 = icmp eq ptr %80, null
  br i1 %81, label %82, label %91

82:                                               ; preds = %79
  %83 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %78, ptr noundef %77) #24
  %84 = getelementptr inbounds %struct.tree_exp, ptr %83, i64 0, i32 1
  store i32 %0, ptr %84, align 8, !tbaa !17
  br label %91

85:                                               ; preds = %72
  %86 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %77, ptr noundef %78)
  %87 = icmp eq ptr %86, null
  br i1 %87, label %88, label %91

88:                                               ; preds = %85
  %89 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %77, ptr noundef %78) #24
  %90 = getelementptr inbounds %struct.tree_exp, ptr %89, i64 0, i32 1
  store i32 %0, ptr %90, align 8, !tbaa !17
  br label %91

91:                                               ; preds = %88, %85, %82, %79, %70
  %92 = phi ptr [ %71, %70 ], [ %77, %79 ], [ %77, %82 ], [ %77, %85 ], [ %77, %88 ]
  %93 = phi ptr [ %40, %70 ], [ %76, %79 ], [ %76, %82 ], [ %76, %85 ], [ %76, %88 ]
  %94 = phi ptr [ %29, %70 ], [ %75, %79 ], [ %75, %82 ], [ %75, %85 ], [ %75, %88 ]
  %95 = phi ptr [ %25, %70 ], [ %73, %79 ], [ %73, %82 ], [ %73, %85 ], [ %73, %88 ]
  %96 = phi ptr [ %27, %70 ], [ %80, %79 ], [ %83, %82 ], [ %86, %85 ], [ %89, %88 ]
  %97 = icmp eq ptr %93, null
  br i1 %97, label %98, label %113

98:                                               ; preds = %91
  %99 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %12, ptr noundef %94)
  br i1 %9, label %105, label %100

100:                                              ; preds = %98
  %101 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %99, ptr noundef %92)
  %102 = icmp eq ptr %101, null
  br i1 %102, label %103, label %113

103:                                              ; preds = %100
  %104 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %99, ptr noundef %92) #24
  br label %110

105:                                              ; preds = %98
  %106 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %92, ptr noundef %99)
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %113

108:                                              ; preds = %105
  %109 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %92, ptr noundef %99) #24
  br label %110

110:                                              ; preds = %103, %108
  %111 = phi ptr [ %109, %108 ], [ %104, %103 ]
  %112 = getelementptr inbounds %struct.tree_exp, ptr %111, i64 0, i32 1
  store i32 %0, ptr %112, align 8, !tbaa !17
  br label %113

113:                                              ; preds = %110, %105, %100, %91
  %114 = phi ptr [ %93, %91 ], [ %101, %100 ], [ %106, %105 ], [ %111, %110 ]
  %115 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 56), align 4, !tbaa !17
  %116 = icmp eq i32 %115, 9
  br i1 %116, label %117, label %118

117:                                              ; preds = %113
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %118

118:                                              ; preds = %117, %113
  %119 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef 56, ptr noundef %2, ptr noundef %95, ptr noundef nonnull %96, ptr noundef nonnull %114)
  %120 = icmp eq ptr %119, null
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %2, ptr noundef %95, ptr noundef nonnull %96, ptr noundef nonnull %114) #24
  %123 = getelementptr inbounds %struct.tree_exp, ptr %122, i64 0, i32 1
  store i32 %0, ptr %123, align 8, !tbaa !17
  br label %124

124:                                              ; preds = %118, %121
  %125 = phi ptr [ %119, %118 ], [ %122, %121 ]
  %126 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %125)
  br label %127

127:                                              ; preds = %8, %124
  %128 = phi ptr [ %126, %124 ], [ null, %8 ]
  ret ptr %128
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @try_move_mult_to_index(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2) unnamed_addr #10 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = tail call ptr @tree_strip_nop_conversions(ptr noundef %2) #24
  %11 = load i64, ptr %10, align 8
  %12 = trunc i64 %11 to i16
  switch i16 %12, label %27 [
    i16 65, label %13
    i16 23, label %29
  ]

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = tail call ptr @tree_strip_nop_conversions(ptr noundef %15) #24
  %19 = tail call ptr @tree_strip_nop_conversions(ptr noundef %17) #24
  %20 = load i64, ptr %18, align 8
  %21 = and i64 %20, 65535
  %22 = icmp eq i64 %21, 23
  br i1 %22, label %29, label %23

23:                                               ; preds = %13
  %24 = load i64, ptr %19, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 23
  br i1 %26, label %29, label %172

27:                                               ; preds = %3
  %28 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  br label %29

29:                                               ; preds = %23, %13, %3, %27
  %30 = phi ptr [ %10, %27 ], [ %10, %3 ], [ %19, %13 ], [ %18, %23 ]
  %31 = phi ptr [ %28, %27 ], [ null, %3 ], [ %18, %13 ], [ %19, %23 ]
  %32 = icmp eq ptr %31, null
  %33 = getelementptr inbounds %struct.tree_int_cst, ptr %10, i64 0, i32 1
  %34 = getelementptr inbounds %struct.tree_int_cst, ptr %10, i64 0, i32 1, i32 1
  %35 = getelementptr inbounds %struct.tree_common, ptr %10, i64 0, i32 2
  br label %36

36:                                               ; preds = %134, %29
  %37 = phi ptr [ %9, %29 ], [ %138, %134 ]
  %38 = phi ptr [ %30, %29 ], [ %135, %134 ]
  %39 = phi i8 [ 0, %29 ], [ %136, %134 ]
  %40 = load i64, ptr %37, align 8
  %41 = and i64 %40, 65535
  %42 = icmp eq i64 %41, 45
  br i1 %42, label %43, label %132

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.tree_exp, ptr %37, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = load i64, ptr %45, align 8
  %47 = and i64 %46, 65535
  %48 = icmp eq i64 %47, 45
  %49 = select i1 %48, i8 1, i8 %39
  %50 = getelementptr inbounds %struct.tree_common, ptr %45, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = getelementptr inbounds %struct.tree_type, ptr %51, i64 0, i32 1
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = icmp eq ptr %53, null
  br i1 %54, label %134, label %55

55:                                               ; preds = %43
  %56 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = tail call ptr @array_ref_element_size(ptr noundef nonnull %37) #24
  %59 = load i64, ptr %58, align 8
  %60 = and i64 %59, 65535
  %61 = icmp eq i64 %60, 23
  br i1 %61, label %62, label %134

62:                                               ; preds = %55
  br i1 %32, label %66, label %63

63:                                               ; preds = %62
  %64 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %58, ptr noundef nonnull %31) #24
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %134, label %102

66:                                               ; preds = %62
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  %67 = getelementptr inbounds %struct.tree_common, ptr %58, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  %69 = load i64, ptr %68, align 8
  %70 = trunc i64 %69 to i32
  %71 = lshr i32 %70, 21
  %72 = and i32 %71, 1
  %73 = and i64 %69, 65535
  %74 = icmp eq i64 %73, 8
  br i1 %74, label %75, label %81

75:                                               ; preds = %66
  %76 = getelementptr inbounds %struct.tree_type, ptr %68, i64 0, i32 6
  %77 = load i32, ptr %76, align 4
  %78 = and i32 %77, 1024
  %79 = icmp eq i32 %78, 0
  %80 = select i1 %79, i32 %72, i32 0
  br label %81

81:                                               ; preds = %75, %66
  %82 = phi i32 [ %72, %66 ], [ %80, %75 ]
  %83 = load i64, ptr %33, align 8, !tbaa !17
  %84 = load i64, ptr %34, align 8, !tbaa !17
  %85 = getelementptr inbounds %struct.tree_int_cst, ptr %58, i64 0, i32 1
  %86 = load i64, ptr %85, align 8, !tbaa !17
  %87 = getelementptr inbounds %struct.tree_int_cst, ptr %58, i64 0, i32 1, i32 1
  %88 = load i64, ptr %87, align 8, !tbaa !17
  %89 = call i32 @div_and_round_double(i32 noundef 76, i32 noundef %82, i64 noundef %83, i64 noundef %84, i64 noundef %86, i64 noundef %88, ptr noundef nonnull %4, ptr noundef nonnull %6, ptr noundef nonnull %5, ptr noundef nonnull %7), !range !28
  %90 = load i64, ptr %7, align 8, !tbaa !24
  %91 = icmp ne i64 %90, 0
  %92 = load i64, ptr %5, align 8
  %93 = icmp ne i64 %92, 0
  %94 = select i1 %91, i1 true, i1 %93
  br i1 %94, label %95, label %96

95:                                               ; preds = %81
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  br label %134

96:                                               ; preds = %81
  %97 = load ptr, ptr %35, align 8, !tbaa !17
  %98 = load i64, ptr %4, align 8, !tbaa !24
  %99 = load i64, ptr %6, align 8, !tbaa !24
  %100 = tail call ptr @build_int_cst_wide(ptr noundef %97, i64 noundef %98, i64 noundef %99) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  %101 = icmp eq ptr %100, null
  br i1 %101, label %134, label %102

102:                                              ; preds = %96, %63
  %103 = phi ptr [ %38, %63 ], [ %100, %96 ]
  %104 = icmp eq i8 %49, 0
  br i1 %104, label %139, label %105

105:                                              ; preds = %102
  %106 = getelementptr inbounds %struct.tree_exp, ptr %37, i64 1
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  %108 = load i64, ptr %107, align 8
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 23
  br i1 %110, label %111, label %134

111:                                              ; preds = %105
  %112 = getelementptr inbounds %struct.tree_type, ptr %53, i64 0, i32 14
  %113 = load ptr, ptr %112, align 8, !tbaa !17
  %114 = icmp eq ptr %113, null
  br i1 %114, label %134, label %115

115:                                              ; preds = %111
  %116 = load i64, ptr %113, align 8
  %117 = and i64 %116, 65535
  %118 = icmp eq i64 %117, 23
  br i1 %118, label %119, label %134

119:                                              ; preds = %115
  %120 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %57, ptr noundef nonnull %107)
  %121 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %57, ptr noundef %103)
  %122 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 63, ptr noundef %57, ptr noundef %120, ptr noundef %121)
  %123 = icmp eq ptr %122, null
  br i1 %123, label %134, label %124

124:                                              ; preds = %119
  %125 = load i64, ptr %122, align 8
  %126 = and i64 %125, 65535
  %127 = icmp eq i64 %126, 23
  br i1 %127, label %128, label %134

128:                                              ; preds = %124
  %129 = load ptr, ptr %112, align 8, !tbaa !17
  %130 = tail call i32 @tree_int_cst_lt(ptr noundef %129, ptr noundef nonnull %122) #24
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %139, label %134

132:                                              ; preds = %36
  %133 = trunc i64 %40 to i16
  switch i16 %133, label %172 [
    i16 42, label %134
    i16 41, label %134
    i16 45, label %134
    i16 46, label %134
    i16 118, label %134
    i16 43, label %134
    i16 44, label %134
  ]

134:                                              ; preds = %96, %128, %119, %124, %105, %111, %115, %95, %63, %55, %43, %132, %132, %132, %132, %132, %132, %132
  %135 = phi ptr [ %38, %132 ], [ %38, %132 ], [ %38, %132 ], [ %38, %132 ], [ %38, %132 ], [ %38, %132 ], [ %38, %132 ], [ %38, %95 ], [ %38, %63 ], [ %38, %55 ], [ %38, %43 ], [ %103, %115 ], [ %103, %111 ], [ %103, %105 ], [ %103, %124 ], [ %103, %119 ], [ %103, %128 ], [ %38, %96 ]
  %136 = phi i8 [ 0, %132 ], [ 0, %132 ], [ 0, %132 ], [ 0, %132 ], [ 0, %132 ], [ 0, %132 ], [ 0, %132 ], [ %49, %95 ], [ %49, %63 ], [ %49, %55 ], [ %49, %43 ], [ %49, %115 ], [ %49, %111 ], [ %49, %105 ], [ %49, %124 ], [ %49, %119 ], [ %49, %128 ], [ %49, %96 ]
  %137 = getelementptr inbounds %struct.tree_exp, ptr %37, i64 0, i32 3
  %138 = load ptr, ptr %137, align 8, !tbaa !17
  br label %36

139:                                              ; preds = %128, %102
  %140 = load ptr, ptr %8, align 8, !tbaa !17
  %141 = tail call ptr @copy_node_stat(ptr noundef %140) #24
  %142 = getelementptr inbounds %struct.tree_exp, ptr %141, i64 0, i32 1
  store i32 %0, ptr %142, align 8, !tbaa !17
  %143 = icmp eq ptr %140, %37
  br i1 %143, label %152, label %144

144:                                              ; preds = %139, %144
  %145 = phi ptr [ %149, %144 ], [ %141, %139 ]
  %146 = phi ptr [ %148, %144 ], [ %140, %139 ]
  %147 = getelementptr inbounds %struct.tree_exp, ptr %146, i64 0, i32 3
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = tail call ptr @copy_node_stat(ptr noundef %148) #24
  %150 = getelementptr inbounds %struct.tree_exp, ptr %145, i64 0, i32 3
  store ptr %149, ptr %150, align 8, !tbaa !17
  %151 = icmp eq ptr %148, %37
  br i1 %151, label %152, label %144, !llvm.loop !68

152:                                              ; preds = %144, %139
  %153 = phi ptr [ %141, %139 ], [ %149, %144 ]
  %154 = getelementptr inbounds %struct.tree_exp, ptr %153, i64 1
  %155 = load ptr, ptr %154, align 8, !tbaa !17
  %156 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %57, ptr noundef %155)
  %157 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %57, ptr noundef %103)
  %158 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 63, ptr noundef %57, ptr noundef %156, ptr noundef %157)
  %159 = icmp eq ptr %158, null
  br i1 %159, label %160, label %163

160:                                              ; preds = %152
  %161 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef %57, ptr noundef %156, ptr noundef %157) #24
  %162 = getelementptr inbounds %struct.tree_exp, ptr %161, i64 0, i32 1
  store i32 %0, ptr %162, align 8, !tbaa !17
  br label %163

163:                                              ; preds = %152, %160
  %164 = phi ptr [ %158, %152 ], [ %161, %160 ]
  store ptr %164, ptr %154, align 8, !tbaa !17
  %165 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  %167 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 121, ptr noundef %166, ptr noundef %141)
  %168 = icmp eq ptr %167, null
  br i1 %168, label %169, label %172

169:                                              ; preds = %163
  %170 = tail call ptr @build1_stat(i32 noundef 121, ptr noundef %166, ptr noundef %141) #24
  %171 = getelementptr inbounds %struct.tree_exp, ptr %170, i64 0, i32 1
  store i32 %0, ptr %171, align 8, !tbaa !17
  br label %172

172:                                              ; preds = %132, %169, %163, %23
  %173 = phi ptr [ null, %23 ], [ %167, %163 ], [ %170, %169 ], [ null, %132 ]
  ret ptr %173
}

declare ptr @build_int_cst_type(ptr noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_plusminus_mult_expr(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = load i64, ptr %3, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %15 [
    i16 65, label %8
    i16 23, label %13
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  br label %85

13:                                               ; preds = %5
  %14 = tail call ptr @build_one_cst(ptr noundef %2) #24
  br label %85

15:                                               ; preds = %5
  %16 = load i64, ptr %2, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 14
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  %20 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %26

21:                                               ; preds = %15
  %22 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %23 = load i32, ptr %22, align 4
  %24 = lshr i32 %23, 16
  %25 = and i32 %24, 255
  br label %26

26:                                               ; preds = %21, %19
  %27 = phi i32 [ %20, %19 ], [ %25, %21 ]
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %28
  %30 = load i8, ptr %29, align 1, !tbaa !17
  %31 = icmp eq i8 %30, 4
  br i1 %31, label %275, label %32

32:                                               ; preds = %26
  %33 = load i64, ptr %2, align 8
  %34 = and i64 %33, 65535
  %35 = icmp eq i64 %34, 14
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %43

38:                                               ; preds = %32
  %39 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %40 = load i32, ptr %39, align 4
  %41 = lshr i32 %40, 16
  %42 = and i32 %41, 255
  br label %43

43:                                               ; preds = %38, %36
  %44 = phi i32 [ %37, %36 ], [ %42, %38 ]
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %45
  %47 = load i8, ptr %46, align 1, !tbaa !17
  %48 = icmp eq i8 %47, 13
  br i1 %48, label %275, label %49

49:                                               ; preds = %43
  %50 = load i64, ptr %2, align 8
  %51 = and i64 %50, 65535
  %52 = icmp eq i64 %51, 14
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %60

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %57 = load i32, ptr %56, align 4
  %58 = lshr i32 %57, 16
  %59 = and i32 %58, 255
  br label %60

60:                                               ; preds = %55, %53
  %61 = phi i32 [ %54, %53 ], [ %59, %55 ]
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %62
  %64 = load i8, ptr %63, align 1, !tbaa !17
  %65 = icmp eq i8 %64, 5
  br i1 %65, label %275, label %66

66:                                               ; preds = %60
  %67 = load i64, ptr %2, align 8
  %68 = and i64 %67, 65535
  %69 = icmp eq i64 %68, 14
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %77

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %74 = load i32, ptr %73, align 4
  %75 = lshr i32 %74, 16
  %76 = and i32 %75, 255
  br label %77

77:                                               ; preds = %72, %70
  %78 = phi i32 [ %71, %70 ], [ %76, %72 ]
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %79
  %81 = load i8, ptr %80, align 1, !tbaa !17
  %82 = icmp eq i8 %81, 14
  br i1 %82, label %275, label %83

83:                                               ; preds = %77
  %84 = tail call ptr @build_one_cst(ptr noundef nonnull %2) #24
  br label %85

85:                                               ; preds = %13, %83, %8
  %86 = phi ptr [ %10, %8 ], [ %14, %13 ], [ %3, %83 ]
  %87 = phi ptr [ %12, %8 ], [ %3, %13 ], [ %84, %83 ]
  %88 = load i64, ptr %4, align 8
  %89 = trunc i64 %88 to i16
  switch i16 %89, label %130 [
    i16 65, label %90
    i16 23, label %95
  ]

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %92 = load ptr, ptr %91, align 8, !tbaa !17
  %93 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %94 = load ptr, ptr %93, align 8, !tbaa !17
  br label %200

95:                                               ; preds = %85
  %96 = tail call ptr @build_one_cst(ptr noundef %2) #24
  %97 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1, i32 1
  %98 = load i64, ptr %97, align 8, !tbaa !17
  %99 = icmp eq i64 %98, -1
  br i1 %99, label %100, label %200

100:                                              ; preds = %95
  %101 = tail call fastcc zeroext i8 @negate_expr_p(ptr noundef nonnull %4)
  %102 = icmp ne i8 %101, 0
  %103 = icmp eq i32 %1, 63
  %104 = and i1 %103, %102
  br i1 %104, label %105, label %200

105:                                              ; preds = %100
  %106 = load i64, ptr %4, align 8
  %107 = and i64 %106, 65535
  %108 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %107
  %109 = load i32, ptr %108, align 4, !tbaa !17
  %110 = add i32 %109, -4
  %111 = icmp ult i32 %110, 7
  br i1 %111, label %112, label %115

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 1
  %114 = load i32, ptr %113, align 8, !tbaa !17
  br label %115

115:                                              ; preds = %112, %105
  %116 = phi i32 [ %114, %112 ], [ 0, %105 ]
  %117 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  %119 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %4) #24
  %120 = tail call fastcc ptr @fold_negate_expr(i32 noundef %116, ptr noundef %119)
  %121 = icmp eq ptr %120, null
  br i1 %121, label %122, label %127

122:                                              ; preds = %115
  %123 = getelementptr inbounds %struct.tree_common, ptr %119, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %124, ptr noundef %119) #24
  %126 = getelementptr inbounds %struct.tree_exp, ptr %125, i64 0, i32 1
  store i32 %116, ptr %126, align 8, !tbaa !17
  br label %127

127:                                              ; preds = %115, %122
  %128 = phi ptr [ %120, %115 ], [ %125, %122 ]
  %129 = tail call ptr @fold_convert_loc(i32 noundef %116, ptr noundef %118, ptr noundef nonnull %128)
  br label %200

130:                                              ; preds = %85
  %131 = load i64, ptr %2, align 8
  %132 = and i64 %131, 65535
  %133 = icmp eq i64 %132, 14
  br i1 %133, label %134, label %136

134:                                              ; preds = %130
  %135 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %141

136:                                              ; preds = %130
  %137 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %138 = load i32, ptr %137, align 4
  %139 = lshr i32 %138, 16
  %140 = and i32 %139, 255
  br label %141

141:                                              ; preds = %136, %134
  %142 = phi i32 [ %135, %134 ], [ %140, %136 ]
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %143
  %145 = load i8, ptr %144, align 1, !tbaa !17
  %146 = icmp eq i8 %145, 4
  br i1 %146, label %275, label %147

147:                                              ; preds = %141
  %148 = load i64, ptr %2, align 8
  %149 = and i64 %148, 65535
  %150 = icmp eq i64 %149, 14
  br i1 %150, label %151, label %153

151:                                              ; preds = %147
  %152 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %158

153:                                              ; preds = %147
  %154 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %155 = load i32, ptr %154, align 4
  %156 = lshr i32 %155, 16
  %157 = and i32 %156, 255
  br label %158

158:                                              ; preds = %153, %151
  %159 = phi i32 [ %152, %151 ], [ %157, %153 ]
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %160
  %162 = load i8, ptr %161, align 1, !tbaa !17
  %163 = icmp eq i8 %162, 13
  br i1 %163, label %275, label %164

164:                                              ; preds = %158
  %165 = load i64, ptr %2, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 14
  br i1 %167, label %168, label %170

168:                                              ; preds = %164
  %169 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %175

170:                                              ; preds = %164
  %171 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %172 = load i32, ptr %171, align 4
  %173 = lshr i32 %172, 16
  %174 = and i32 %173, 255
  br label %175

175:                                              ; preds = %170, %168
  %176 = phi i32 [ %169, %168 ], [ %174, %170 ]
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %177
  %179 = load i8, ptr %178, align 1, !tbaa !17
  %180 = icmp eq i8 %179, 5
  br i1 %180, label %275, label %181

181:                                              ; preds = %175
  %182 = load i64, ptr %2, align 8
  %183 = and i64 %182, 65535
  %184 = icmp eq i64 %183, 14
  br i1 %184, label %185, label %187

185:                                              ; preds = %181
  %186 = tail call i32 @vector_type_mode(ptr noundef nonnull %2) #24
  br label %192

187:                                              ; preds = %181
  %188 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %189 = load i32, ptr %188, align 4
  %190 = lshr i32 %189, 16
  %191 = and i32 %190, 255
  br label %192

192:                                              ; preds = %187, %185
  %193 = phi i32 [ %186, %185 ], [ %191, %187 ]
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %194
  %196 = load i8, ptr %195, align 1, !tbaa !17
  %197 = icmp eq i8 %196, 14
  br i1 %197, label %275, label %198

198:                                              ; preds = %192
  %199 = tail call ptr @build_one_cst(ptr noundef nonnull %2) #24
  br label %200

200:                                              ; preds = %95, %100, %198, %127, %90
  %201 = phi i32 [ %1, %90 ], [ 64, %127 ], [ %1, %198 ], [ %1, %100 ], [ %1, %95 ]
  %202 = phi ptr [ %92, %90 ], [ %96, %127 ], [ %4, %198 ], [ %96, %100 ], [ %96, %95 ]
  %203 = phi ptr [ %94, %90 ], [ %129, %127 ], [ %199, %198 ], [ %4, %100 ], [ %4, %95 ]
  %204 = tail call i32 @operand_equal_p(ptr noundef %87, ptr noundef %203, i32 noundef 0)
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %254

206:                                              ; preds = %200
  %207 = tail call i32 @operand_equal_p(ptr noundef %86, ptr noundef %202, i32 noundef 0)
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %254

209:                                              ; preds = %206
  %210 = tail call i32 @operand_equal_p(ptr noundef %86, ptr noundef %203, i32 noundef 0)
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %254

212:                                              ; preds = %209
  %213 = tail call i32 @operand_equal_p(ptr noundef %87, ptr noundef %202, i32 noundef 0)
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %254

215:                                              ; preds = %212
  %216 = tail call i32 @host_integerp(ptr noundef %87, i32 noundef 0) #24
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %275, label %218

218:                                              ; preds = %215
  %219 = tail call i32 @host_integerp(ptr noundef %203, i32 noundef 0) #24
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %275, label %221

221:                                              ; preds = %218
  %222 = getelementptr inbounds %struct.tree_int_cst, ptr %87, i64 0, i32 1
  %223 = load i64, ptr %222, align 8, !tbaa !17
  %224 = getelementptr inbounds %struct.tree_int_cst, ptr %203, i64 0, i32 1
  %225 = load i64, ptr %224, align 8, !tbaa !17
  %226 = tail call i64 @llvm.abs.i64(i64 %223, i1 true)
  %227 = tail call i64 @llvm.abs.i64(i64 %225, i1 true)
  %228 = icmp ult i64 %226, %227
  %229 = select i1 %228, ptr %202, ptr %86
  %230 = select i1 %228, ptr %86, ptr %202
  %231 = select i1 %228, i64 %225, i64 %223
  %232 = select i1 %228, i64 %223, i64 %225
  %233 = select i1 %228, ptr %87, ptr %203
  %234 = trunc i64 %232 to i32
  %235 = tail call i32 @llvm.abs.i32(i32 %234, i1 true)
  %236 = zext i32 %235 to i64
  %237 = tail call i32 @exact_log2(i64 noundef %236) #24
  %238 = icmp sgt i32 %237, 0
  br i1 %238, label %239, label %275

239:                                              ; preds = %221
  %240 = srem i64 %231, %232
  %241 = sdiv i64 %231, %232
  %242 = icmp eq i64 %240, 0
  br i1 %242, label %243, label %275

243:                                              ; preds = %239
  %244 = load i64, ptr %230, align 8
  %245 = and i64 %244, 65535
  %246 = icmp eq i64 %245, 23
  br i1 %246, label %275, label %247

247:                                              ; preds = %243
  %248 = getelementptr inbounds %struct.tree_common, ptr %229, i64 0, i32 2
  %249 = load ptr, ptr %248, align 8, !tbaa !17
  %250 = tail call ptr @build_int_cst(ptr noundef %249, i64 noundef %241) #24
  %251 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 65, ptr noundef %249, ptr noundef %229, ptr noundef %250)
  %252 = select i1 %228, ptr %86, ptr %251
  %253 = select i1 %228, ptr %251, ptr %202
  br label %254

254:                                              ; preds = %247, %212, %209, %206, %200
  %255 = phi ptr [ %86, %200 ], [ %87, %206 ], [ %87, %209 ], [ %86, %212 ], [ %252, %247 ]
  %256 = phi ptr [ %202, %200 ], [ %203, %206 ], [ %202, %209 ], [ %203, %212 ], [ %253, %247 ]
  %257 = phi ptr [ %87, %200 ], [ %86, %206 ], [ %86, %209 ], [ %87, %212 ], [ %233, %247 ]
  %258 = icmp eq ptr %257, null
  br i1 %258, label %275, label %259

259:                                              ; preds = %254
  %260 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %255)
  %261 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %256)
  %262 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %201, ptr noundef %2, ptr noundef %260, ptr noundef %261)
  %263 = icmp eq ptr %262, null
  br i1 %263, label %264, label %267

264:                                              ; preds = %259
  %265 = tail call ptr @build2_stat(i32 noundef %201, ptr noundef %2, ptr noundef %260, ptr noundef %261) #24
  %266 = getelementptr inbounds %struct.tree_exp, ptr %265, i64 0, i32 1
  store i32 %0, ptr %266, align 8, !tbaa !17
  br label %267

267:                                              ; preds = %259, %264
  %268 = phi ptr [ %262, %259 ], [ %265, %264 ]
  %269 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %257)
  %270 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef nonnull %268, ptr noundef %269)
  %271 = icmp eq ptr %270, null
  br i1 %271, label %272, label %275

272:                                              ; preds = %267
  %273 = tail call ptr @build2_stat(i32 noundef 65, ptr noundef %2, ptr noundef nonnull %268, ptr noundef %269) #24
  %274 = getelementptr inbounds %struct.tree_exp, ptr %273, i64 0, i32 1
  store i32 %0, ptr %274, align 8, !tbaa !17
  br label %275

275:                                              ; preds = %221, %239, %243, %215, %218, %272, %267, %254, %141, %158, %175, %192, %26, %43, %60, %77
  %276 = phi ptr [ null, %77 ], [ null, %60 ], [ null, %43 ], [ null, %26 ], [ null, %192 ], [ null, %175 ], [ null, %158 ], [ null, %141 ], [ null, %254 ], [ %270, %267 ], [ %273, %272 ], [ null, %218 ], [ null, %215 ], [ null, %243 ], [ null, %239 ], [ null, %221 ]
  ret ptr %276
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @distribute_real_division(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) unnamed_addr #10 {
  %6 = alloca %struct.real_value, align 8
  %7 = alloca %struct.real_value, align 8
  %8 = load i64, ptr %3, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 65
  %11 = load i64, ptr %4, align 8
  %12 = and i64 %11, 65535
  %13 = icmp eq i64 %12, 65
  %14 = xor i1 %10, %13
  br i1 %14, label %41, label %15

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = tail call i32 @operand_equal_p(ptr noundef %17, ptr noundef %19, i32 noundef 0)
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %41, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %24 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %25 = select i1 %10, i32 65, i32 75
  %26 = load ptr, ptr %24, align 8, !tbaa !17
  %27 = load ptr, ptr %23, align 8, !tbaa !17
  %28 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %26, ptr noundef %27)
  %29 = icmp eq ptr %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %22
  %31 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %26, ptr noundef %27) #24
  %32 = getelementptr inbounds %struct.tree_exp, ptr %31, i64 0, i32 1
  store i32 %0, ptr %32, align 8, !tbaa !17
  br label %33

33:                                               ; preds = %22, %30
  %34 = phi ptr [ %28, %22 ], [ %31, %30 ]
  %35 = load ptr, ptr %16, align 8, !tbaa !17
  %36 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %25, ptr noundef %2, ptr noundef nonnull %34, ptr noundef %35)
  %37 = icmp eq ptr %36, null
  br i1 %37, label %38, label %81

38:                                               ; preds = %33
  %39 = tail call ptr @build2_stat(i32 noundef %25, ptr noundef %2, ptr noundef nonnull %34, ptr noundef %35) #24
  %40 = getelementptr inbounds %struct.tree_exp, ptr %39, i64 0, i32 1
  store i32 %0, ptr %40, align 8, !tbaa !17
  br label %81

41:                                               ; preds = %15, %5
  %42 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = tail call i32 @operand_equal_p(ptr noundef %43, ptr noundef %45, i32 noundef 0)
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %81, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = load i64, ptr %50, align 8
  %52 = and i64 %51, 65535
  %53 = icmp eq i64 %52, 24
  br i1 %53, label %54, label %81

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = load i64, ptr %56, align 8
  %58 = and i64 %57, 65535
  %59 = icmp eq i64 %58, 24
  br i1 %59, label %60, label %81

60:                                               ; preds = %54
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #24
  %61 = getelementptr inbounds %struct.tree_real_cst, ptr %50, i64 0, i32 1
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(32) %62, i64 32, i1 false), !tbaa.struct !29
  %63 = getelementptr inbounds %struct.tree_real_cst, ptr %56, i64 0, i32 1
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(32) %64, i64 32, i1 false), !tbaa.struct !29
  br i1 %10, label %67, label %65

65:                                               ; preds = %60
  %66 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %6, i32 noundef 75, ptr noundef nonnull @dconst1, ptr noundef nonnull %6) #24
  br label %67

67:                                               ; preds = %65, %60
  br i1 %13, label %70, label %68

68:                                               ; preds = %67
  %69 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %7, i32 noundef 75, ptr noundef nonnull @dconst1, ptr noundef nonnull %7) #24
  br label %70

70:                                               ; preds = %68, %67
  %71 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %6, i32 noundef %1, ptr noundef nonnull %6, ptr noundef nonnull %7) #24
  %72 = load ptr, ptr %42, align 8, !tbaa !17
  %73 = call ptr @build_real(ptr noundef %2, ptr noundef nonnull byval(%struct.real_value) align 8 %6) #24
  %74 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 65, ptr noundef %2, ptr noundef %72, ptr noundef %73)
  %75 = icmp eq ptr %74, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %70
  %77 = call ptr @build2_stat(i32 noundef 65, ptr noundef %2, ptr noundef %72, ptr noundef %73) #24
  %78 = getelementptr inbounds %struct.tree_exp, ptr %77, i64 0, i32 1
  store i32 %0, ptr %78, align 8, !tbaa !17
  br label %79

79:                                               ; preds = %70, %76
  %80 = phi ptr [ %74, %70 ], [ %77, %76 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  br label %81

81:                                               ; preds = %38, %33, %41, %48, %54, %79
  %82 = phi ptr [ %80, %79 ], [ null, %54 ], [ null, %48 ], [ null, %41 ], [ %36, %33 ], [ %39, %38 ]
  ret ptr %82
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @split_tree(ptr noundef %0, i32 noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr nocapture noundef %4, i32 noundef %5) unnamed_addr #10 {
  store ptr null, ptr %2, align 8, !tbaa !6
  store ptr null, ptr %3, align 8, !tbaa !6
  store ptr null, ptr %4, align 8, !tbaa !6
  %7 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %0) #24
  %8 = load i64, ptr %7, align 8
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 65535
  %11 = add nsw i32 %10, -23
  %12 = icmp ult i32 %11, 3
  br i1 %12, label %13, label %14

13:                                               ; preds = %6
  store ptr %7, ptr %3, align 8, !tbaa !6
  br label %165

14:                                               ; preds = %6
  %15 = icmp eq i32 %10, %1
  br i1 %15, label %16, label %18

16:                                               ; preds = %14
  %17 = and i64 %8, 65535
  br label %45

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tree_common, ptr %7, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = load i64, ptr %20, align 8
  %22 = trunc i64 %21 to i16
  switch i16 %22, label %35 [
    i16 9, label %32
    i16 13, label %23
    i16 14, label %23
  ]

23:                                               ; preds = %18, %18
  %24 = getelementptr inbounds %struct.tree_common, ptr %20, i64 0, i32 2
  %25 = load ptr, ptr %24, align 8, !tbaa !17
  %26 = load i64, ptr %25, align 8
  %27 = and i64 %26, 65535
  %28 = icmp ne i64 %27, 9
  %29 = load i32, ptr @flag_associative_math, align 4
  %30 = icmp ne i32 %29, 0
  %31 = select i1 %28, i1 true, i1 %30
  br i1 %31, label %35, label %161

32:                                               ; preds = %18
  %33 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %161, label %35

35:                                               ; preds = %18, %32, %23
  %36 = and i64 %21, 2147549183
  %37 = icmp eq i64 %36, 2147483659
  br i1 %37, label %161, label %38

38:                                               ; preds = %35
  switch i32 %1, label %161 [
    i32 63, label %39
    i32 64, label %42
  ]

39:                                               ; preds = %38
  %40 = and i64 %8, 65535
  %41 = icmp eq i64 %40, 64
  br i1 %41, label %45, label %161

42:                                               ; preds = %38
  %43 = and i64 %8, 65535
  %44 = icmp eq i64 %43, 63
  br i1 %44, label %45, label %161

45:                                               ; preds = %16, %42, %39
  %46 = phi i64 [ %17, %16 ], [ 63, %42 ], [ 64, %39 ]
  %47 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 0, i32 3
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.tree_exp, ptr %7, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = icmp eq i64 %46, 64
  %52 = zext i1 %51 to i32
  %53 = load i64, ptr %48, align 8
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 65535
  %56 = add nsw i32 %55, -23
  %57 = icmp ult i32 %56, 3
  br i1 %57, label %66, label %58

58:                                               ; preds = %45
  %59 = load i64, ptr %50, align 8
  %60 = trunc i64 %59 to i32
  %61 = and i32 %60, 65535
  %62 = add nsw i32 %61, -23
  %63 = icmp ult i32 %62, 3
  br i1 %63, label %64, label %67

64:                                               ; preds = %58
  store ptr %50, ptr %3, align 8, !tbaa !6
  %65 = load i64, ptr %48, align 8
  br label %67

66:                                               ; preds = %45
  store ptr %48, ptr %3, align 8, !tbaa !6
  br label %73

67:                                               ; preds = %64, %58
  %68 = phi i64 [ %53, %58 ], [ %65, %64 ]
  %69 = phi ptr [ %50, %58 ], [ null, %64 ]
  %70 = phi i32 [ 0, %58 ], [ %52, %64 ]
  %71 = and i64 %68, 131072
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %82

73:                                               ; preds = %66, %67
  %74 = phi i32 [ %70, %67 ], [ 0, %66 ]
  %75 = phi ptr [ %69, %67 ], [ %50, %66 ]
  %76 = phi ptr [ %48, %67 ], [ null, %66 ]
  %77 = icmp eq ptr %75, null
  br i1 %77, label %88, label %78

78:                                               ; preds = %73
  %79 = load i64, ptr %75, align 8
  %80 = and i64 %79, 131072
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %78, %67
  %83 = phi ptr [ %48, %67 ], [ %75, %78 ]
  %84 = phi i32 [ %70, %67 ], [ %74, %78 ]
  %85 = phi ptr [ null, %67 ], [ %76, %78 ]
  %86 = phi ptr [ %69, %67 ], [ null, %78 ]
  %87 = phi i32 [ 0, %67 ], [ %52, %78 ]
  store ptr %83, ptr %2, align 8, !tbaa !6
  br label %88

88:                                               ; preds = %82, %73, %78
  %89 = phi i32 [ %74, %78 ], [ %74, %73 ], [ %84, %82 ]
  %90 = phi ptr [ %76, %78 ], [ %76, %73 ], [ %85, %82 ]
  %91 = phi ptr [ %75, %78 ], [ null, %73 ], [ %86, %82 ]
  %92 = phi i32 [ 0, %78 ], [ 0, %73 ], [ %87, %82 ]
  %93 = icmp eq ptr %90, null
  %94 = icmp eq ptr %91, null
  %95 = select i1 %94, ptr %90, ptr %7
  %96 = select i1 %93, ptr %91, ptr %95
  %97 = icmp eq i32 %89, 0
  br i1 %97, label %100, label %98

98:                                               ; preds = %88
  %99 = load ptr, ptr %3, align 8, !tbaa !6
  store ptr %99, ptr %4, align 8, !tbaa !6
  store ptr null, ptr %3, align 8, !tbaa !6
  br label %100

100:                                              ; preds = %98, %88
  %101 = icmp eq i32 %92, 0
  br i1 %101, label %132, label %102

102:                                              ; preds = %100
  %103 = load ptr, ptr %2, align 8, !tbaa !6
  %104 = icmp eq ptr %103, null
  br i1 %104, label %130, label %105

105:                                              ; preds = %102
  %106 = load i64, ptr %103, align 8
  %107 = and i64 %106, 65535
  %108 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %107
  %109 = load i32, ptr %108, align 4, !tbaa !17
  %110 = add i32 %109, -4
  %111 = icmp ult i32 %110, 7
  br i1 %111, label %112, label %115

112:                                              ; preds = %105
  %113 = getelementptr inbounds %struct.tree_exp, ptr %103, i64 0, i32 1
  %114 = load i32, ptr %113, align 8, !tbaa !17
  br label %115

115:                                              ; preds = %112, %105
  %116 = phi i32 [ %114, %112 ], [ 0, %105 ]
  %117 = getelementptr inbounds %struct.tree_common, ptr %103, i64 0, i32 2
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  %119 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %103) #24
  %120 = tail call fastcc ptr @fold_negate_expr(i32 noundef %116, ptr noundef %119)
  %121 = icmp eq ptr %120, null
  br i1 %121, label %122, label %127

122:                                              ; preds = %115
  %123 = getelementptr inbounds %struct.tree_common, ptr %119, i64 0, i32 2
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %124, ptr noundef %119) #24
  %126 = getelementptr inbounds %struct.tree_exp, ptr %125, i64 0, i32 1
  store i32 %116, ptr %126, align 8, !tbaa !17
  br label %127

127:                                              ; preds = %122, %115
  %128 = phi ptr [ %120, %115 ], [ %125, %122 ]
  %129 = tail call ptr @fold_convert_loc(i32 noundef %116, ptr noundef %118, ptr noundef nonnull %128)
  br label %130

130:                                              ; preds = %102, %127
  %131 = phi ptr [ %129, %127 ], [ null, %102 ]
  store ptr %131, ptr %2, align 8, !tbaa !6
  br label %132

132:                                              ; preds = %130, %100
  %133 = and i1 %51, %93
  br i1 %133, label %134, label %165

134:                                              ; preds = %132
  %135 = icmp eq ptr %96, null
  br i1 %135, label %165, label %136

136:                                              ; preds = %134
  %137 = load i64, ptr %96, align 8
  %138 = and i64 %137, 65535
  %139 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %138
  %140 = load i32, ptr %139, align 4, !tbaa !17
  %141 = add i32 %140, -4
  %142 = icmp ult i32 %141, 7
  br i1 %142, label %143, label %146

143:                                              ; preds = %136
  %144 = getelementptr inbounds %struct.tree_exp, ptr %96, i64 0, i32 1
  %145 = load i32, ptr %144, align 8, !tbaa !17
  br label %146

146:                                              ; preds = %143, %136
  %147 = phi i32 [ %145, %143 ], [ 0, %136 ]
  %148 = getelementptr inbounds %struct.tree_common, ptr %96, i64 0, i32 2
  %149 = load ptr, ptr %148, align 8, !tbaa !17
  %150 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %96) #24
  %151 = tail call fastcc ptr @fold_negate_expr(i32 noundef %147, ptr noundef %150)
  %152 = icmp eq ptr %151, null
  br i1 %152, label %153, label %158

153:                                              ; preds = %146
  %154 = getelementptr inbounds %struct.tree_common, ptr %150, i64 0, i32 2
  %155 = load ptr, ptr %154, align 8, !tbaa !17
  %156 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %155, ptr noundef %150) #24
  %157 = getelementptr inbounds %struct.tree_exp, ptr %156, i64 0, i32 1
  store i32 %147, ptr %157, align 8, !tbaa !17
  br label %158

158:                                              ; preds = %153, %146
  %159 = phi ptr [ %151, %146 ], [ %156, %153 ]
  %160 = tail call ptr @fold_convert_loc(i32 noundef %147, ptr noundef %149, ptr noundef nonnull %159)
  br label %165

161:                                              ; preds = %39, %38, %35, %23, %42, %32
  %162 = and i64 %8, 131072
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %165, label %164

164:                                              ; preds = %161
  store ptr %7, ptr %2, align 8, !tbaa !6
  br label %165

165:                                              ; preds = %158, %134, %161, %132, %164, %13
  %166 = phi ptr [ null, %13 ], [ null, %164 ], [ %96, %132 ], [ %7, %161 ], [ %160, %158 ], [ null, %134 ]
  %167 = icmp eq i32 %5, 0
  br i1 %167, label %234, label %168

168:                                              ; preds = %165
  %169 = load ptr, ptr %3, align 8, !tbaa !6
  %170 = icmp eq ptr %169, null
  br i1 %170, label %172, label %171

171:                                              ; preds = %168
  store ptr %169, ptr %4, align 8, !tbaa !6
  br label %176

172:                                              ; preds = %168
  %173 = load ptr, ptr %4, align 8, !tbaa !6
  %174 = icmp eq ptr %173, null
  br i1 %174, label %178, label %175

175:                                              ; preds = %172
  store ptr %173, ptr %3, align 8, !tbaa !6
  br label %176

176:                                              ; preds = %171, %175
  %177 = phi ptr [ %4, %175 ], [ %3, %171 ]
  store ptr null, ptr %177, align 8, !tbaa !6
  br label %178

178:                                              ; preds = %176, %172
  %179 = load ptr, ptr %2, align 8, !tbaa !6
  %180 = icmp eq ptr %179, null
  br i1 %180, label %206, label %181

181:                                              ; preds = %178
  %182 = load i64, ptr %179, align 8
  %183 = and i64 %182, 65535
  %184 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %183
  %185 = load i32, ptr %184, align 4, !tbaa !17
  %186 = add i32 %185, -4
  %187 = icmp ult i32 %186, 7
  br i1 %187, label %188, label %191

188:                                              ; preds = %181
  %189 = getelementptr inbounds %struct.tree_exp, ptr %179, i64 0, i32 1
  %190 = load i32, ptr %189, align 8, !tbaa !17
  br label %191

191:                                              ; preds = %188, %181
  %192 = phi i32 [ %190, %188 ], [ 0, %181 ]
  %193 = getelementptr inbounds %struct.tree_common, ptr %179, i64 0, i32 2
  %194 = load ptr, ptr %193, align 8, !tbaa !17
  %195 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %179) #24
  %196 = tail call fastcc ptr @fold_negate_expr(i32 noundef %192, ptr noundef %195)
  %197 = icmp eq ptr %196, null
  br i1 %197, label %198, label %203

198:                                              ; preds = %191
  %199 = getelementptr inbounds %struct.tree_common, ptr %195, i64 0, i32 2
  %200 = load ptr, ptr %199, align 8, !tbaa !17
  %201 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %200, ptr noundef %195) #24
  %202 = getelementptr inbounds %struct.tree_exp, ptr %201, i64 0, i32 1
  store i32 %192, ptr %202, align 8, !tbaa !17
  br label %203

203:                                              ; preds = %198, %191
  %204 = phi ptr [ %196, %191 ], [ %201, %198 ]
  %205 = tail call ptr @fold_convert_loc(i32 noundef %192, ptr noundef %194, ptr noundef nonnull %204)
  br label %206

206:                                              ; preds = %178, %203
  %207 = phi ptr [ %205, %203 ], [ null, %178 ]
  store ptr %207, ptr %2, align 8, !tbaa !6
  %208 = icmp eq ptr %166, null
  br i1 %208, label %234, label %209

209:                                              ; preds = %206
  %210 = load i64, ptr %166, align 8
  %211 = and i64 %210, 65535
  %212 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %211
  %213 = load i32, ptr %212, align 4, !tbaa !17
  %214 = add i32 %213, -4
  %215 = icmp ult i32 %214, 7
  br i1 %215, label %216, label %219

216:                                              ; preds = %209
  %217 = getelementptr inbounds %struct.tree_exp, ptr %166, i64 0, i32 1
  %218 = load i32, ptr %217, align 8, !tbaa !17
  br label %219

219:                                              ; preds = %216, %209
  %220 = phi i32 [ %218, %216 ], [ 0, %209 ]
  %221 = getelementptr inbounds %struct.tree_common, ptr %166, i64 0, i32 2
  %222 = load ptr, ptr %221, align 8, !tbaa !17
  %223 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %166) #24
  %224 = tail call fastcc ptr @fold_negate_expr(i32 noundef %220, ptr noundef %223)
  %225 = icmp eq ptr %224, null
  br i1 %225, label %226, label %231

226:                                              ; preds = %219
  %227 = getelementptr inbounds %struct.tree_common, ptr %223, i64 0, i32 2
  %228 = load ptr, ptr %227, align 8, !tbaa !17
  %229 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %228, ptr noundef %223) #24
  %230 = getelementptr inbounds %struct.tree_exp, ptr %229, i64 0, i32 1
  store i32 %220, ptr %230, align 8, !tbaa !17
  br label %231

231:                                              ; preds = %226, %219
  %232 = phi ptr [ %224, %219 ], [ %229, %226 ]
  %233 = tail call ptr @fold_convert_loc(i32 noundef %220, ptr noundef %222, ptr noundef nonnull %232)
  br label %234

234:                                              ; preds = %231, %206, %165
  %235 = phi ptr [ %166, %165 ], [ %233, %231 ], [ null, %206 ]
  ret ptr %235
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @associate_trees(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = icmp eq ptr %1, null
  br i1 %6, label %61, label %7

7:                                                ; preds = %5
  %8 = icmp eq ptr %2, null
  br i1 %8, label %61, label %9

9:                                                ; preds = %7
  %10 = load i64, ptr %1, align 8
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = icmp eq i32 %12, %3
  br i1 %13, label %23, label %14

14:                                               ; preds = %9
  %15 = load i64, ptr %2, align 8
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 65535
  %18 = icmp eq i32 %17, %3
  %19 = icmp eq i32 %12, 64
  %20 = or i1 %19, %18
  %21 = icmp eq i32 %17, 64
  %22 = or i1 %21, %20
  br i1 %22, label %23, label %53

23:                                               ; preds = %14, %9
  switch i32 %3, label %49 [
    i32 63, label %24
    i32 64, label %36
  ]

24:                                               ; preds = %23
  %25 = and i64 %10, 65535
  %26 = icmp eq i64 %25, 79
  br i1 %26, label %41, label %27

27:                                               ; preds = %24
  %28 = load i64, ptr %2, align 8
  %29 = and i64 %28, 65535
  %30 = icmp eq i64 %29, 79
  br i1 %30, label %41, label %31

31:                                               ; preds = %27
  %32 = tail call i32 @integer_zerop(ptr noundef nonnull %2) #24
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %49, label %34

34:                                               ; preds = %31
  %35 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %1)
  br label %61

36:                                               ; preds = %23
  %37 = tail call i32 @integer_zerop(ptr noundef nonnull %2) #24
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %36
  %40 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %1)
  br label %61

41:                                               ; preds = %27, %24
  %42 = phi ptr [ %2, %24 ], [ %1, %27 ]
  %43 = phi ptr [ %1, %24 ], [ %2, %27 ]
  %44 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %42)
  %45 = getelementptr inbounds %struct.tree_exp, ptr %43, i64 0, i32 3
  %46 = load ptr, ptr %45, align 8, !tbaa !17
  %47 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef %46)
  %48 = tail call ptr @build2_stat(i32 noundef 64, ptr noundef %4, ptr noundef %44, ptr noundef %47) #24
  br label %49

49:                                               ; preds = %41, %23, %36, %31
  %50 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %1)
  %51 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %2)
  %52 = tail call ptr @build2_stat(i32 noundef %3, ptr noundef %4, ptr noundef %50, ptr noundef %51) #24
  tail call void @protected_set_expr_location(ptr noundef %52, i32 noundef %0) #24
  br label %61

53:                                               ; preds = %14
  %54 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %1)
  %55 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %4, ptr noundef nonnull %2)
  %56 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %3, ptr noundef %4, ptr noundef %54, ptr noundef %55)
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %61

58:                                               ; preds = %53
  %59 = tail call ptr @build2_stat(i32 noundef %3, ptr noundef %4, ptr noundef %54, ptr noundef %55) #24
  %60 = getelementptr inbounds %struct.tree_exp, ptr %59, i64 0, i32 1
  store i32 %0, ptr %60, align 8, !tbaa !17
  br label %61

61:                                               ; preds = %58, %53, %7, %5, %49, %39, %34
  %62 = phi ptr [ %52, %49 ], [ %35, %34 ], [ %40, %39 ], [ %2, %5 ], [ %1, %7 ], [ %56, %53 ], [ %59, %58 ]
  ret ptr %62
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @ptr_difference_const(ptr noundef %0, ptr noundef %1, ptr nocapture noundef writeonly %2) local_unnamed_addr #10 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca ptr, align 8
  %15 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %15) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #24
  %16 = load i64, ptr %0, align 8
  %17 = and i64 %16, 65535
  %18 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %17
  %19 = load i32, ptr %18, align 4, !tbaa !17
  %20 = add i32 %19, -4
  %21 = icmp ult i32 %20, 7
  br i1 %21, label %22, label %25

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %24 = load i32, ptr %23, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %22, %3
  %26 = phi i32 [ %24, %22 ], [ 0, %3 ]
  %27 = icmp eq i64 %17, 121
  br i1 %27, label %28, label %36

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = call ptr @get_inner_reference(ptr noundef %30, ptr noundef nonnull %11, ptr noundef nonnull %12, ptr noundef nonnull %14, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %10, i8 noundef zeroext 0) #24
  %32 = getelementptr inbounds %struct.tree_common, ptr %31, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = call ptr @build_pointer_type(ptr noundef %33) #24
  %35 = call ptr @build_fold_addr_expr_with_type_loc(i32 noundef %26, ptr noundef %31, ptr noundef %34)
  br label %37

36:                                               ; preds = %25
  store i64 0, ptr %12, align 8, !tbaa !24
  store ptr null, ptr %14, align 8, !tbaa !6
  br label %37

37:                                               ; preds = %28, %36
  %38 = phi ptr [ %35, %28 ], [ %0, %36 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  %39 = load i64, ptr %1, align 8
  %40 = and i64 %39, 65535
  %41 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %40
  %42 = load i32, ptr %41, align 4, !tbaa !17
  %43 = add i32 %42, -4
  %44 = icmp ult i32 %43, 7
  br i1 %44, label %45, label %48

45:                                               ; preds = %37
  %46 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 1
  %47 = load i32, ptr %46, align 8, !tbaa !17
  br label %48

48:                                               ; preds = %45, %37
  %49 = phi i32 [ %47, %45 ], [ 0, %37 ]
  %50 = icmp eq i64 %40, 121
  br i1 %50, label %51, label %59

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = call ptr @get_inner_reference(ptr noundef %53, ptr noundef nonnull %7, ptr noundef nonnull %13, ptr noundef nonnull %15, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %6, i8 noundef zeroext 0) #24
  %55 = getelementptr inbounds %struct.tree_common, ptr %54, i64 0, i32 2
  %56 = load ptr, ptr %55, align 8, !tbaa !17
  %57 = call ptr @build_pointer_type(ptr noundef %56) #24
  %58 = call ptr @build_fold_addr_expr_with_type_loc(i32 noundef %49, ptr noundef %54, ptr noundef %57)
  br label %60

59:                                               ; preds = %48
  store i64 0, ptr %13, align 8, !tbaa !24
  store ptr null, ptr %15, align 8, !tbaa !6
  br label %60

60:                                               ; preds = %51, %59
  %61 = phi ptr [ %58, %51 ], [ %1, %59 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #24
  %62 = load i64, ptr %12, align 8, !tbaa !24
  %63 = and i64 %62, 7
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %110

65:                                               ; preds = %60
  %66 = load i64, ptr %13, align 8, !tbaa !24
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %110

69:                                               ; preds = %65
  %70 = call i32 @operand_equal_p(ptr noundef %38, ptr noundef %61, i32 noundef 0)
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %110, label %72

72:                                               ; preds = %69
  %73 = load ptr, ptr %14, align 8, !tbaa !6
  %74 = icmp ne ptr %73, null
  %75 = load ptr, ptr %15, align 8
  %76 = icmp ne ptr %75, null
  %77 = select i1 %74, i1 %76, i1 false
  br i1 %77, label %78, label %101

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.tree_common, ptr %73, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = getelementptr inbounds %struct.tree_common, ptr %75, i64 0, i32 2
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  %83 = icmp eq ptr %80, %82
  br i1 %83, label %87, label %84

84:                                               ; preds = %78
  %85 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %80, ptr noundef nonnull %75)
  store ptr %85, ptr %15, align 8, !tbaa !6
  %86 = load ptr, ptr %14, align 8, !tbaa !6
  br label %87

87:                                               ; preds = %84, %78
  %88 = phi ptr [ %85, %84 ], [ %75, %78 ]
  %89 = phi ptr [ %86, %84 ], [ %73, %78 ]
  %90 = call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 64, ptr noundef %80, ptr noundef %89, ptr noundef %88)
  %91 = icmp eq ptr %90, null
  br i1 %91, label %92, label %95

92:                                               ; preds = %87
  %93 = call ptr @build2_stat(i32 noundef 64, ptr noundef %80, ptr noundef %89, ptr noundef %88) #24
  %94 = getelementptr inbounds %struct.tree_exp, ptr %93, i64 0, i32 1
  store i32 0, ptr %94, align 8, !tbaa !17
  br label %95

95:                                               ; preds = %87, %92
  %96 = phi ptr [ %90, %87 ], [ %93, %92 ]
  %97 = call zeroext i8 @cst_and_fits_in_hwi(ptr noundef nonnull %96) #24
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %110, label %99

99:                                               ; preds = %95
  %100 = call i64 @int_cst_value(ptr noundef nonnull %96) #24
  br label %103

101:                                              ; preds = %72
  %102 = select i1 %74, i1 true, i1 %76
  br i1 %102, label %110, label %103

103:                                              ; preds = %101, %99
  %104 = phi i64 [ %100, %99 ], [ 0, %101 ]
  %105 = load i64, ptr %12, align 8, !tbaa !24
  %106 = load i64, ptr %13, align 8, !tbaa !24
  %107 = sub nsw i64 %105, %106
  %108 = sdiv i64 %107, 8
  %109 = add nsw i64 %108, %104
  store i64 %109, ptr %2, align 8, !tbaa !24
  br label %110

110:                                              ; preds = %101, %95, %60, %65, %69, %103
  %111 = phi i8 [ 1, %103 ], [ 0, %69 ], [ 0, %65 ], [ 0, %60 ], [ 0, %95 ], [ 0, %101 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #24
  ret i8 %111
}

declare ptr @array_ref_element_size(ptr noundef) local_unnamed_addr #3

declare i32 @tree_int_cst_sgn(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_mult_zconjz(i32 noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load i64, ptr %2, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %18 [
    i16 123, label %8
    i16 26, label %13
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  br label %32

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.tree_complex, ptr %2, i64 0, i32 1
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = getelementptr inbounds %struct.tree_complex, ptr %2, i64 0, i32 2
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  br label %32

18:                                               ; preds = %3
  %19 = tail call ptr @save_expr(ptr noundef nonnull %2) #24
  %20 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 43, ptr noundef %5, ptr noundef %19)
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %18
  %23 = tail call ptr @build1_stat(i32 noundef 43, ptr noundef %5, ptr noundef %19) #24
  %24 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 1
  store i32 %0, ptr %24, align 8, !tbaa !17
  br label %25

25:                                               ; preds = %18, %22
  %26 = phi ptr [ %20, %18 ], [ %23, %22 ]
  %27 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 44, ptr noundef %5, ptr noundef %19)
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = tail call ptr @build1_stat(i32 noundef 44, ptr noundef %5, ptr noundef %19) #24
  %31 = getelementptr inbounds %struct.tree_exp, ptr %30, i64 0, i32 1
  store i32 %0, ptr %31, align 8, !tbaa !17
  br label %32

32:                                               ; preds = %29, %25, %13, %8
  %33 = phi ptr [ %10, %8 ], [ %15, %13 ], [ %26, %25 ], [ %26, %29 ]
  %34 = phi ptr [ %12, %8 ], [ %17, %13 ], [ %27, %25 ], [ %30, %29 ]
  %35 = tail call ptr @save_expr(ptr noundef %33) #24
  %36 = tail call ptr @save_expr(ptr noundef %34) #24
  %37 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 65, ptr noundef %5, ptr noundef %35, ptr noundef %35)
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %42

39:                                               ; preds = %32
  %40 = tail call ptr @build2_stat(i32 noundef 65, ptr noundef %5, ptr noundef %35, ptr noundef %35) #24
  %41 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 1
  store i32 %0, ptr %41, align 8, !tbaa !17
  br label %42

42:                                               ; preds = %32, %39
  %43 = phi ptr [ %37, %32 ], [ %40, %39 ]
  %44 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 65, ptr noundef %5, ptr noundef %36, ptr noundef %36)
  %45 = icmp eq ptr %44, null
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = tail call ptr @build2_stat(i32 noundef 65, ptr noundef %5, ptr noundef %36, ptr noundef %36) #24
  %48 = getelementptr inbounds %struct.tree_exp, ptr %47, i64 0, i32 1
  store i32 %0, ptr %48, align 8, !tbaa !17
  br label %49

49:                                               ; preds = %42, %46
  %50 = phi ptr [ %44, %42 ], [ %47, %46 ]
  %51 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 63, ptr noundef %5, ptr noundef nonnull %43, ptr noundef nonnull %50)
  %52 = icmp eq ptr %51, null
  br i1 %52, label %53, label %56

53:                                               ; preds = %49
  %54 = tail call ptr @build2_stat(i32 noundef 63, ptr noundef %5, ptr noundef nonnull %43, ptr noundef nonnull %50) #24
  %55 = getelementptr inbounds %struct.tree_exp, ptr %54, i64 0, i32 1
  store i32 %0, ptr %55, align 8, !tbaa !17
  br label %56

56:                                               ; preds = %49, %53
  %57 = phi ptr [ %51, %49 ], [ %54, %53 ]
  %58 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %59 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %5, ptr noundef %58)
  %60 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 123, ptr noundef nonnull %1, ptr noundef nonnull %57, ptr noundef %59)
  %61 = icmp eq ptr %60, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %56
  %63 = tail call ptr @build2_stat(i32 noundef 123, ptr noundef nonnull %1, ptr noundef nonnull %57, ptr noundef %59) #24
  %64 = getelementptr inbounds %struct.tree_exp, ptr %63, i64 0, i32 1
  store i32 %0, ptr %64, align 8, !tbaa !17
  br label %65

65:                                               ; preds = %56, %62
  %66 = phi ptr [ %60, %56 ], [ %63, %62 ]
  ret ptr %66
}

declare i32 @real_onep(ptr noundef) local_unnamed_addr #3

declare i32 @real_minus_onep(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @optimize_function_for_speed_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @distribute_bit_expr(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) unnamed_addr #10 {
  %6 = load i64, ptr %3, align 8
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 65535
  %9 = load i64, ptr %4, align 8
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 65535
  %12 = icmp ne i32 %8, %11
  %13 = icmp eq i32 %8, %1
  %14 = or i1 %13, %12
  br i1 %14, label %68, label %15

15:                                               ; preds = %5
  %16 = trunc i64 %6 to i16
  switch i16 %16, label %68 [
    i16 89, label %17
    i16 87, label %17
  ]

17:                                               ; preds = %15, %15
  %18 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = tail call i32 @operand_equal_p(ptr noundef %19, ptr noundef %21, i32 noundef 0)
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  br i1 %23, label %27, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  br label %43

27:                                               ; preds = %17
  %28 = load ptr, ptr %18, align 8, !tbaa !17
  %29 = load ptr, ptr %24, align 8, !tbaa !17
  %30 = tail call i32 @operand_equal_p(ptr noundef %28, ptr noundef %29, i32 noundef 0)
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  br i1 %31, label %33, label %43

33:                                               ; preds = %27
  %34 = load ptr, ptr %32, align 8, !tbaa !17
  %35 = load ptr, ptr %20, align 8, !tbaa !17
  %36 = tail call i32 @operand_equal_p(ptr noundef %34, ptr noundef %35, i32 noundef 0)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %33
  %39 = load ptr, ptr %32, align 8, !tbaa !17
  %40 = load ptr, ptr %24, align 8, !tbaa !17
  %41 = tail call i32 @operand_equal_p(ptr noundef %39, ptr noundef %40, i32 noundef 0)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %68, label %43

43:                                               ; preds = %27, %38, %33, %25
  %44 = phi ptr [ %18, %25 ], [ %32, %33 ], [ %32, %38 ], [ %18, %27 ]
  %45 = phi ptr [ %26, %25 ], [ %18, %33 ], [ %18, %38 ], [ %32, %27 ]
  %46 = phi ptr [ %24, %25 ], [ %24, %33 ], [ %20, %38 ], [ %20, %27 ]
  %47 = load ptr, ptr %46, align 8, !tbaa !17
  %48 = load ptr, ptr %45, align 8, !tbaa !17
  %49 = load ptr, ptr %44, align 8, !tbaa !17
  %50 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %49)
  %51 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %48)
  %52 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %47)
  %53 = load i64, ptr %3, align 8
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 65535
  %56 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %51, ptr noundef %52)
  %57 = icmp eq ptr %56, null
  br i1 %57, label %58, label %61

58:                                               ; preds = %43
  %59 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %51, ptr noundef %52) #24
  %60 = getelementptr inbounds %struct.tree_exp, ptr %59, i64 0, i32 1
  store i32 %0, ptr %60, align 8, !tbaa !17
  br label %61

61:                                               ; preds = %43, %58
  %62 = phi ptr [ %56, %43 ], [ %59, %58 ]
  %63 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %55, ptr noundef %2, ptr noundef %50, ptr noundef nonnull %62)
  %64 = icmp eq ptr %63, null
  br i1 %64, label %65, label %68

65:                                               ; preds = %61
  %66 = tail call ptr @build2_stat(i32 noundef %55, ptr noundef %2, ptr noundef %50, ptr noundef nonnull %62) #24
  %67 = getelementptr inbounds %struct.tree_exp, ptr %66, i64 0, i32 1
  store i32 %0, ptr %67, align 8, !tbaa !17
  br label %68

68:                                               ; preds = %65, %61, %38, %5, %15
  %69 = phi ptr [ null, %15 ], [ null, %5 ], [ null, %38 ], [ %63, %61 ], [ %66, %65 ]
  ret ptr %69
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i64 @get_pointer_modulus_and_residue(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, i8 noundef zeroext %2) unnamed_addr #10 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca ptr, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i64 0, ptr %1, align 8, !tbaa !24
  %10 = load i64, ptr %0, align 8
  %11 = trunc i64 %10 to i16
  switch i16 %11, label %79 [
    i16 121, label %12
    i16 66, label %49
  ]

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = load i64, ptr %14, align 8
  %16 = trunc i64 %15 to i16
  switch i16 %16, label %33 [
    i16 42, label %17
    i16 41, label %17
    i16 45, label %17
    i16 46, label %17
    i16 118, label %17
    i16 43, label %17
    i16 44, label %17
  ]

17:                                               ; preds = %12, %12, %12, %12, %12, %12, %12
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %9) #24
  %18 = call ptr @get_inner_reference(ptr noundef nonnull %14, ptr noundef nonnull %4, ptr noundef nonnull %5, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %8, ptr noundef nonnull %9, i8 noundef zeroext 0) #24
  %19 = load i64, ptr %5, align 8, !tbaa !24
  %20 = sdiv i64 %19, 8
  store i64 %20, ptr %1, align 8, !tbaa !24
  %21 = load ptr, ptr %6, align 8, !tbaa !6
  %22 = icmp eq ptr %21, null
  br i1 %22, label %31, label %23

23:                                               ; preds = %17
  %24 = load i64, ptr %21, align 8
  %25 = and i64 %24, 65535
  %26 = icmp eq i64 %25, 23
  br i1 %26, label %27, label %78

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.tree_int_cst, ptr %21, i64 0, i32 1
  %29 = load i64, ptr %28, align 8, !tbaa !17
  %30 = add i64 %29, %20
  store i64 %30, ptr %1, align 8, !tbaa !24
  br label %31

31:                                               ; preds = %17, %27
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  %32 = load i64, ptr %18, align 8
  br label %33

33:                                               ; preds = %12, %31
  %34 = phi i64 [ %32, %31 ], [ %15, %12 ]
  %35 = phi ptr [ %18, %31 ], [ %14, %12 ]
  %36 = and i64 %34, 65535
  %37 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %36
  %38 = load i32, ptr %37, align 4, !tbaa !17
  %39 = icmp eq i32 %38, 3
  br i1 %39, label %40, label %79

40:                                               ; preds = %33
  %41 = icmp eq i8 %2, 0
  %42 = icmp eq i64 %36, 29
  %43 = and i1 %41, %42
  br i1 %43, label %79, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.tree_decl_common, ptr %35, i64 0, i32 3
  %46 = load i32, ptr %45, align 8, !tbaa !17
  %47 = lshr i32 %46, 3
  %48 = zext i32 %47 to i64
  br label %79

49:                                               ; preds = %3
  %50 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = tail call ptr @tree_strip_nop_conversions(ptr noundef %51) #24
  %53 = tail call fastcc i64 @get_pointer_modulus_and_residue(ptr noundef %52, ptr noundef nonnull %1, i8 noundef zeroext %2)
  %54 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = tail call ptr @tree_strip_nop_conversions(ptr noundef %55) #24
  %57 = load i64, ptr %56, align 8
  %58 = trunc i64 %57 to i16
  switch i16 %58, label %79 [
    i16 23, label %59
    i16 65, label %64
  ]

59:                                               ; preds = %49
  %60 = getelementptr inbounds %struct.tree_int_cst, ptr %56, i64 0, i32 1
  %61 = load i64, ptr %60, align 8, !tbaa !17
  %62 = load i64, ptr %1, align 8, !tbaa !24
  %63 = add i64 %62, %61
  store i64 %63, ptr %1, align 8, !tbaa !24
  br label %79

64:                                               ; preds = %49
  %65 = getelementptr inbounds %struct.tree_exp, ptr %56, i64 1
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  %67 = load i64, ptr %66, align 8
  %68 = and i64 %67, 65535
  %69 = icmp eq i64 %68, 23
  br i1 %69, label %70, label %79

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.tree_int_cst, ptr %66, i64 0, i32 1
  %72 = load i64, ptr %71, align 8, !tbaa !17
  %73 = sub i64 0, %72
  %74 = and i64 %72, %73
  %75 = icmp eq i64 %74, 0
  %76 = tail call i64 @llvm.umin.i64(i64 %53, i64 %74)
  %77 = select i1 %75, i64 %53, i64 %76
  br label %79

78:                                               ; preds = %23
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #24
  br label %79

79:                                               ; preds = %64, %49, %33, %40, %3, %59, %70, %78, %44
  %80 = phi i64 [ %48, %44 ], [ 1, %78 ], [ %53, %59 ], [ %77, %70 ], [ 1, %3 ], [ 1, %40 ], [ 1, %33 ], [ 1, %49 ], [ 1, %64 ]
  ret i64 %80
}

declare zeroext i8 @exact_real_inverse(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #10 {
  %3 = load ptr, ptr @global_trees, align 16, !tbaa !6
  %4 = icmp eq ptr %3, %0
  br i1 %4, label %58, label %5

5:                                                ; preds = %2
  %6 = load i64, ptr %0, align 8
  %7 = and i64 %6, 65535
  %8 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %7
  %9 = load i32, ptr %8, align 4, !tbaa !17
  switch i32 %9, label %30 [
    i32 7, label %10
    i32 5, label %10
    i32 6, label %20
    i32 1, label %28
    i32 3, label %28
    i32 4, label %28
  ]

10:                                               ; preds = %5, %5
  %11 = trunc i64 %6 to i32
  %12 = and i32 %11, 65535
  %13 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = tail call zeroext i8 @tree_binary_nonnegative_warnv_p(i32 noundef %12, ptr noundef %14, ptr noundef %16, ptr noundef %18, ptr noundef %1)
  br label %58

20:                                               ; preds = %5
  %21 = trunc i64 %6 to i32
  %22 = and i32 %21, 65535
  %23 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = tail call zeroext i8 @tree_unary_nonnegative_warnv_p(i32 noundef %22, ptr noundef %24, ptr noundef %26, ptr noundef %1)
  br label %58

28:                                               ; preds = %5, %5, %5
  %29 = tail call zeroext i8 @tree_single_nonnegative_warnv_p(ptr noundef nonnull %0, ptr noundef %1), !range !40
  br label %58

30:                                               ; preds = %5
  %31 = trunc i64 %6 to i16
  switch i16 %31, label %56 [
    i16 93, label %32
    i16 94, label %32
    i16 95, label %32
    i16 96, label %42
    i16 56, label %54
    i16 51, label %54
    i16 50, label %54
    i16 148, label %54
    i16 121, label %54
    i16 150, label %54
    i16 141, label %54
  ]

32:                                               ; preds = %30, %30, %30
  %33 = trunc i64 %6 to i32
  %34 = and i32 %33, 65535
  %35 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = tail call zeroext i8 @tree_binary_nonnegative_warnv_p(i32 noundef %34, ptr noundef %36, ptr noundef %38, ptr noundef %40, ptr noundef %1)
  br label %58

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = load i64, ptr %44, align 8
  %46 = and i64 %45, 2097152
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.tree_type, ptr %44, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = and i32 %50, 1023
  %52 = icmp ne i32 %51, 1
  %53 = zext i1 %52 to i8
  br label %58

54:                                               ; preds = %30, %30, %30, %30, %30, %30, %30
  %55 = tail call zeroext i8 @tree_single_nonnegative_warnv_p(ptr noundef nonnull %0, ptr noundef %1), !range !40
  br label %58

56:                                               ; preds = %30
  %57 = tail call zeroext i8 @tree_invalid_nonnegative_warnv_p(ptr noundef nonnull %0, ptr noundef %1)
  br label %58

58:                                               ; preds = %48, %42, %2, %56, %54, %32, %28, %20, %10
  %59 = phi i8 [ %57, %56 ], [ %55, %54 ], [ %41, %32 ], [ %29, %28 ], [ %27, %20 ], [ %19, %10 ], [ 0, %2 ], [ 1, %42 ], [ %53, %48 ]
  ret i8 %59
}

declare i32 @exact_log2(i64 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local i32 @multiple_of_p(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = tail call i32 @operand_equal_p(ptr noundef %1, ptr noundef %2, i32 noundef 0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %27

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  br label %8

8:                                                ; preds = %6, %90
  %9 = phi ptr [ %1, %6 ], [ %91, %90 ]
  %10 = load i64, ptr %0, align 8
  %11 = and i64 %10, 65535
  %12 = icmp eq i64 %11, 8
  br i1 %12, label %13, label %27

13:                                               ; preds = %8
  %14 = load i64, ptr %9, align 8
  %15 = trunc i64 %14 to i16
  switch i16 %15, label %27 [
    i16 89, label %19
    i16 65, label %22
    i16 63, label %35
    i16 64, label %35
    i16 83, label %46
    i16 116, label %75
    i16 120, label %16
    i16 23, label %94
  ]

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  br label %90

19:                                               ; preds = %13
  %20 = tail call i32 @integer_pow2p(ptr noundef %2) #24
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %13, %19
  %23 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !17
  %25 = tail call i32 @multiple_of_p(ptr noundef nonnull %0, ptr noundef %24, ptr noundef %2)
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %94, %98, %105, %108, %35, %22, %19, %111, %3, %90, %8, %83, %75, %13, %46, %71, %67, %63, %52, %40, %29
  %28 = phi i32 [ %34, %29 ], [ %45, %40 ], [ %113, %111 ], [ 0, %19 ], [ 1, %22 ], [ 0, %35 ], [ 0, %108 ], [ 0, %105 ], [ 0, %98 ], [ 0, %94 ], [ 1, %3 ], [ 0, %52 ], [ 0, %63 ], [ 0, %67 ], [ 0, %71 ], [ 0, %46 ], [ 0, %13 ], [ 0, %75 ], [ 0, %83 ], [ 0, %8 ], [ 1, %90 ]
  ret i32 %28

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = tail call i32 @multiple_of_p(ptr noundef nonnull %0, ptr noundef %31, ptr noundef %2)
  %33 = icmp ne i32 %32, 0
  %34 = zext i1 %33 to i32
  br label %27

35:                                               ; preds = %13, %13
  %36 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  %38 = tail call i32 @multiple_of_p(ptr noundef nonnull %0, ptr noundef %37, ptr noundef %2)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %27, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = tail call i32 @multiple_of_p(ptr noundef nonnull %0, ptr noundef %42, ptr noundef %2)
  %44 = icmp ne i32 %43, 0
  %45 = zext i1 %44 to i32
  br label %27

46:                                               ; preds = %13
  %47 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 1
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = load i64, ptr %48, align 8
  %50 = and i64 %49, 65535
  %51 = icmp eq i64 %50, 23
  br i1 %51, label %52, label %27

52:                                               ; preds = %46
  %53 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  %54 = getelementptr inbounds %struct.tree_common, ptr %53, i64 0, i32 2
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = getelementptr inbounds %struct.tree_type, ptr %55, i64 0, i32 6
  %57 = load i32, ptr %56, align 4
  %58 = and i32 %57, 1023
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.tree_int_cst, ptr %48, i64 0, i32 1
  %61 = load i64, ptr %60, align 8, !tbaa !17
  %62 = icmp ult i64 %61, %59
  br i1 %62, label %63, label %27

63:                                               ; preds = %52
  %64 = getelementptr inbounds %struct.tree_int_cst, ptr %48, i64 0, i32 1, i32 1
  %65 = load i64, ptr %64, align 8, !tbaa !17
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %27

67:                                               ; preds = %63
  %68 = tail call fastcc ptr @const_binop(i32 noundef 83, ptr noundef nonnull %53, ptr noundef nonnull %48)
  %69 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %0, ptr noundef %68)
  %70 = icmp eq ptr %69, null
  br i1 %70, label %27, label %71

71:                                               ; preds = %67
  %72 = load i64, ptr %69, align 8
  %73 = and i64 %72, 134217728
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %90, label %27

75:                                               ; preds = %13
  %76 = getelementptr inbounds %struct.tree_exp, ptr %9, i64 0, i32 3
  %77 = load ptr, ptr %76, align 8, !tbaa !17
  %78 = getelementptr inbounds %struct.tree_common, ptr %77, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !17
  %80 = load i64, ptr %79, align 8
  %81 = and i64 %80, 65535
  %82 = icmp eq i64 %81, 8
  br i1 %82, label %83, label %27

83:                                               ; preds = %75
  %84 = load i32, ptr %7, align 4
  %85 = and i32 %84, 1023
  %86 = getelementptr inbounds %struct.tree_type, ptr %79, i64 0, i32 6
  %87 = load i32, ptr %86, align 4
  %88 = and i32 %87, 1023
  %89 = icmp ult i32 %85, %88
  br i1 %89, label %27, label %90

90:                                               ; preds = %83, %16, %71
  %91 = phi ptr [ %69, %71 ], [ %18, %16 ], [ %77, %83 ]
  %92 = tail call i32 @operand_equal_p(ptr noundef %91, ptr noundef %2, i32 noundef 0)
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %8, label %27

94:                                               ; preds = %13
  %95 = load i64, ptr %2, align 8
  %96 = and i64 %95, 65535
  %97 = icmp eq i64 %96, 23
  br i1 %97, label %98, label %27

98:                                               ; preds = %94
  %99 = tail call i32 @integer_zerop(ptr noundef nonnull %2) #24
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %27

101:                                              ; preds = %98
  %102 = load i64, ptr %0, align 8
  %103 = and i64 %102, 2097152
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %111, label %105

105:                                              ; preds = %101
  %106 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %9) #24
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %27, label %108

108:                                              ; preds = %105
  %109 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %2) #24
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %27, label %111

111:                                              ; preds = %108, %101
  %112 = tail call ptr @int_const_binop(i32 noundef 71, ptr noundef nonnull %9, ptr noundef nonnull %2, i32 noundef 0)
  %113 = tail call i32 @integer_zerop(ptr noundef %112) #24
  br label %27
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_minmax(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = icmp eq i32 %1, 80
  %7 = select i1 %6, i32 81, i32 80
  %8 = load i64, ptr %3, align 8
  %9 = trunc i64 %8 to i32
  %10 = and i32 %9, 65535
  %11 = icmp eq i32 %10, %7
  br i1 %11, label %12, label %25

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = tail call i32 @operand_equal_p(ptr noundef %14, ptr noundef %4, i32 noundef 0)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %12
  %18 = load i64, ptr %3, align 8
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 65535
  br label %25

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %23 = load ptr, ptr %22, align 8, !tbaa !17
  %24 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %4, ptr noundef %23)
  br label %110

25:                                               ; preds = %17, %5
  %26 = phi i32 [ %20, %17 ], [ %10, %5 ]
  %27 = icmp eq i32 %26, %7
  br i1 %27, label %28, label %52

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = tail call i32 @operand_equal_p(ptr noundef %30, ptr noundef %4, i32 noundef 0)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %52, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %33
  %39 = load i64, ptr %35, align 8
  %40 = and i64 %39, 131072
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = load i64, ptr %4, align 8
  %44 = and i64 %43, 131072
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %42
  %47 = or i64 %43, %39
  %48 = and i64 %47, 65536
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %38, %42, %33, %46
  %51 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %4, ptr noundef %35)
  br label %110

52:                                               ; preds = %46, %28, %25
  %53 = load i64, ptr %4, align 8
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 65535
  %56 = icmp eq i32 %55, %7
  br i1 %56, label %57, label %81

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = tail call i32 @operand_equal_p(ptr noundef nonnull %3, ptr noundef %59, i32 noundef 0)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %81, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %79, label %67

67:                                               ; preds = %62
  %68 = load i64, ptr %3, align 8
  %69 = and i64 %68, 131072
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %79

71:                                               ; preds = %67
  %72 = load i64, ptr %64, align 8
  %73 = and i64 %72, 131072
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %71
  %76 = or i64 %72, %68
  %77 = and i64 %76, 65536
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %67, %71, %62, %75
  %80 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %64)
  br label %110

81:                                               ; preds = %75, %57, %52
  %82 = load i64, ptr %4, align 8
  %83 = trunc i64 %82 to i32
  %84 = and i32 %83, 65535
  %85 = icmp eq i32 %84, %7
  br i1 %85, label %86, label %110

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = tail call i32 @operand_equal_p(ptr noundef nonnull %3, ptr noundef %88, i32 noundef 0)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %110, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %93 = load ptr, ptr %92, align 8, !tbaa !17
  %94 = load i32, ptr @flag_evaluation_order, align 4, !tbaa !21
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %108, label %96

96:                                               ; preds = %91
  %97 = load i64, ptr %3, align 8
  %98 = and i64 %97, 131072
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %108

100:                                              ; preds = %96
  %101 = load i64, ptr %93, align 8
  %102 = and i64 %101, 131072
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %100
  %105 = or i64 %101, %97
  %106 = and i64 %105, 65536
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %96, %100, %91, %104
  %109 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %93)
  br label %110

110:                                              ; preds = %81, %86, %104, %108, %79, %50, %21
  %111 = phi ptr [ %24, %21 ], [ %51, %50 ], [ %80, %79 ], [ %109, %108 ], [ null, %104 ], [ null, %86 ], [ null, %81 ]
  ret ptr %111
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_to_nonsharp_ineq_using_bound(i32 noundef %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load i64, ptr %2, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %58 [
    i16 97, label %8
    i16 99, label %10
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  br label %12

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  br label %12

12:                                               ; preds = %10, %8
  %13 = phi ptr [ %9, %8 ], [ %11, %10 ]
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = trunc i64 %17 to i16
  switch i16 %18, label %58 [
    i16 6, label %19
    i16 7, label %19
    i16 8, label %19
    i16 10, label %19
    i16 12, label %19
  ]

19:                                               ; preds = %12, %12, %12, %12, %12
  %20 = load i64, ptr %1, align 8
  %21 = trunc i64 %20 to i16
  switch i16 %21, label %58 [
    i16 97, label %22
    i16 99, label %25
  ]

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %24 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  br label %28

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %27 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 1
  br label %28

28:                                               ; preds = %25, %22
  %29 = phi ptr [ %24, %22 ], [ %26, %25 ]
  %30 = phi ptr [ %23, %22 ], [ %27, %25 ]
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = load ptr, ptr %29, align 8, !tbaa !17
  %33 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = icmp eq ptr %34, %16
  br i1 %35, label %36, label %58

36:                                               ; preds = %28
  switch i16 %18, label %44 [
    i16 10, label %37
    i16 12, label %37
  ]

37:                                               ; preds = %36, %36
  %38 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 1), align 8, !tbaa !6
  %39 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %38, ptr noundef nonnull %14)
  %40 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 1), align 8, !tbaa !6
  %41 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %40, ptr noundef nonnull %32)
  %42 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 1), align 8, !tbaa !6
  %43 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 64, ptr noundef %42, ptr noundef %41, ptr noundef %39)
  br label %46

44:                                               ; preds = %36
  %45 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 64, ptr noundef nonnull %16, ptr noundef nonnull %32, ptr noundef nonnull %14)
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi ptr [ %43, %37 ], [ %45, %44 ]
  %48 = icmp eq ptr %47, null
  br i1 %48, label %58, label %49

49:                                               ; preds = %46
  %50 = tail call i32 @integer_onep(ptr noundef nonnull %47) #24
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %49
  %53 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 100, ptr noundef %5, ptr noundef nonnull %14, ptr noundef %31)
  %54 = icmp eq ptr %53, null
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %5, ptr noundef nonnull %14, ptr noundef %31) #24
  %57 = getelementptr inbounds %struct.tree_exp, ptr %56, i64 0, i32 1
  store i32 %0, ptr %57, align 8, !tbaa !17
  br label %58

58:                                               ; preds = %55, %52, %46, %49, %28, %19, %12, %3
  %59 = phi ptr [ null, %3 ], [ null, %12 ], [ null, %19 ], [ null, %28 ], [ null, %49 ], [ null, %46 ], [ %53, %52 ], [ %56, %55 ]
  ret ptr %59
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_range_test(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca ptr, align 8
  %10 = alloca ptr, align 8
  %11 = alloca ptr, align 8
  %12 = alloca ptr, align 8
  %13 = alloca ptr, align 8
  %14 = alloca ptr, align 8
  %15 = alloca i8, align 1
  %16 = and i32 %1, -3
  %17 = icmp eq i32 %16, 92
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #24
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %15) #24
  store i8 0, ptr %15, align 1, !tbaa !17
  %18 = call ptr @make_range(ptr noundef %3, ptr noundef nonnull %6, ptr noundef nonnull %9, ptr noundef nonnull %12, ptr noundef nonnull %15)
  %19 = call ptr @make_range(ptr noundef %4, ptr noundef nonnull %7, ptr noundef nonnull %10, ptr noundef nonnull %13, ptr noundef nonnull %15)
  br i1 %17, label %20, label %27

20:                                               ; preds = %5
  %21 = load i32, ptr %6, align 4, !tbaa !21
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i32
  store i32 %23, ptr %6, align 4, !tbaa !21
  %24 = load i32, ptr %7, align 4, !tbaa !21
  %25 = icmp eq i32 %24, 0
  %26 = zext i1 %25 to i32
  store i32 %26, ptr %7, align 4, !tbaa !21
  br label %27

27:                                               ; preds = %20, %5
  %28 = icmp eq ptr %18, null
  %29 = icmp eq ptr %19, null
  %30 = select i1 %28, i1 true, i1 %29
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = tail call i32 @operand_equal_p(ptr noundef nonnull %18, ptr noundef nonnull %19, i32 noundef 0)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %82, label %34

34:                                               ; preds = %31, %27
  %35 = load i32, ptr %6, align 4, !tbaa !21
  %36 = load ptr, ptr %9, align 8, !tbaa !6
  %37 = load ptr, ptr %12, align 8, !tbaa !6
  %38 = load i32, ptr %7, align 4, !tbaa !21
  %39 = load ptr, ptr %10, align 8, !tbaa !6
  %40 = load ptr, ptr %13, align 8, !tbaa !6
  %41 = call zeroext i8 @merge_ranges(ptr noundef nonnull %8, ptr noundef nonnull %11, ptr noundef nonnull %14, i32 noundef %35, ptr noundef %36, ptr noundef %37, i32 noundef %38, ptr noundef %39, ptr noundef %40), !range !40
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %82, label %43

43:                                               ; preds = %34
  %44 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %45 = select i1 %29, ptr %44, ptr %19
  %46 = select i1 %28, ptr %45, ptr %18
  %47 = load i32, ptr %8, align 4, !tbaa !21
  %48 = load ptr, ptr %11, align 8, !tbaa !6
  %49 = load ptr, ptr %14, align 8, !tbaa !6
  %50 = tail call ptr @build_range_check(i32 noundef 0, ptr noundef %2, ptr noundef %46, i32 noundef %47, ptr noundef %48, ptr noundef %49)
  %51 = icmp eq ptr %50, null
  br i1 %51, label %82, label %52

52:                                               ; preds = %43
  %53 = load i8, ptr %15, align 1, !tbaa !17
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %52
  %56 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %55
  %59 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %60 = icmp eq ptr %59, null
  %61 = load i32, ptr @fold_deferred_overflow_code, align 4
  %62 = icmp ugt i32 %61, 3
  %63 = select i1 %60, i1 true, i1 %62
  br i1 %63, label %64, label %70

64:                                               ; preds = %58
  store ptr @.str.20, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 3, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %70

65:                                               ; preds = %55
  %66 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %67 = icmp slt i32 %66, 3
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef nonnull @.str.20) #24
  br label %70

70:                                               ; preds = %68, %65, %64, %58, %52
  br i1 %17, label %71, label %170

71:                                               ; preds = %70
  %72 = load i64, ptr %50, align 8
  %73 = and i64 %72, 65535
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %170, label %75

75:                                               ; preds = %71
  %76 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %50) #25
  %77 = icmp eq ptr %76, null
  br i1 %77, label %78, label %170

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.tree_common, ptr %50, i64 0, i32 2
  %80 = load ptr, ptr %79, align 8, !tbaa !17
  %81 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %80, ptr noundef nonnull %50) #24
  br label %167

82:                                               ; preds = %43, %34, %31
  %83 = load ptr, ptr @cfun, align 8, !tbaa !6
  %84 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %83) #24
  %85 = icmp eq i8 %84, 0
  %86 = load i32, ptr @ix86_branch_cost, align 4
  %87 = icmp sgt i32 %86, 1
  %88 = select i1 %85, i1 true, i1 %87
  %89 = icmp ne ptr %18, null
  %90 = select i1 %88, i1 %89, i1 false
  %91 = icmp ne ptr %19, null
  %92 = select i1 %90, i1 %91, i1 false
  br i1 %92, label %93, label %170

93:                                               ; preds = %82
  %94 = icmp eq i32 %1, 91
  %95 = add i32 %1, -91
  %96 = icmp ult i32 %95, 2
  br i1 %96, label %97, label %170

97:                                               ; preds = %93
  %98 = tail call i32 @operand_equal_p(ptr noundef nonnull %18, ptr noundef nonnull %19, i32 noundef 0)
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %170, label %100

100:                                              ; preds = %97
  %101 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %18) #24
  %102 = load i64, ptr %101, align 8
  %103 = and i64 %102, 65535
  %104 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %103
  %105 = load i32, ptr %104, align 4, !tbaa !17
  %106 = icmp eq i32 %105, 1
  %107 = icmp eq i64 %103, 141
  %108 = or i1 %106, %107
  br i1 %108, label %127, label %109

109:                                              ; preds = %100
  %110 = icmp eq i32 %105, 3
  %111 = and i64 %102, 786432
  %112 = icmp eq i64 %111, 0
  %113 = and i1 %110, %112
  br i1 %113, label %114, label %130

114:                                              ; preds = %109
  %115 = getelementptr inbounds %struct.tree_decl_common, ptr %101, i64 0, i32 2
  %116 = load i64, ptr %115, align 8
  %117 = and i64 %102, 134217728
  %118 = and i64 %116, 33554688
  %119 = or i64 %118, %117
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %130

121:                                              ; preds = %114
  %122 = and i64 %102, 67108864
  %123 = icmp ne i64 %122, 0
  %124 = and i64 %116, 16777216
  %125 = icmp eq i64 %124, 0
  %126 = and i1 %123, %125
  br i1 %126, label %130, label %127

127:                                              ; preds = %121, %100
  %128 = select i1 %94, i32 93, i32 94
  %129 = tail call ptr @build2_stat(i32 noundef %128, ptr noundef %2, ptr noundef %3, ptr noundef %4) #24
  br label %167

130:                                              ; preds = %121, %109, %114
  %131 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 33), align 8, !tbaa !69
  %132 = tail call i32 %131() #24
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %170

134:                                              ; preds = %130
  %135 = load i64, ptr %18, align 8
  %136 = and i64 %135, 131072
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %134
  %139 = tail call zeroext i8 @contains_placeholder_p(ptr noundef nonnull %18) #24
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %141, label %170

141:                                              ; preds = %138, %134
  %142 = tail call ptr @save_expr(ptr noundef nonnull %18) #24
  %143 = load i32, ptr %6, align 4
  %144 = icmp eq i32 %143, 0
  %145 = zext i1 %144 to i32
  %146 = select i1 %17, i32 %145, i32 %143
  %147 = load ptr, ptr %9, align 8, !tbaa !6
  %148 = load ptr, ptr %12, align 8, !tbaa !6
  %149 = tail call ptr @build_range_check(i32 noundef %0, ptr noundef %2, ptr noundef %142, i32 noundef %146, ptr noundef %147, ptr noundef %148)
  %150 = icmp eq ptr %149, null
  br i1 %150, label %170, label %151

151:                                              ; preds = %141
  %152 = load i32, ptr %7, align 4
  %153 = icmp eq i32 %152, 0
  %154 = zext i1 %153 to i32
  %155 = select i1 %17, i32 %154, i32 %152
  %156 = load ptr, ptr %10, align 8, !tbaa !6
  %157 = load ptr, ptr %13, align 8, !tbaa !6
  %158 = tail call ptr @build_range_check(i32 noundef %0, ptr noundef %2, ptr noundef %142, i32 noundef %155, ptr noundef %156, ptr noundef %157)
  %159 = icmp eq ptr %158, null
  br i1 %159, label %170, label %160

160:                                              ; preds = %151
  %161 = load i8, ptr %15, align 1, !tbaa !17
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %164, label %163

163:                                              ; preds = %160
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.20, i32 noundef 3)
  br label %164

164:                                              ; preds = %160, %163
  %165 = select i1 %94, i32 93, i32 94
  %166 = tail call ptr @build2_stat(i32 noundef %165, ptr noundef %2, ptr noundef nonnull %149, ptr noundef nonnull %158) #24
  br label %167

167:                                              ; preds = %127, %78, %164
  %168 = phi ptr [ %166, %164 ], [ %81, %78 ], [ %129, %127 ]
  %169 = getelementptr inbounds %struct.tree_exp, ptr %168, i64 0, i32 1
  store i32 %0, ptr %169, align 8, !tbaa !17
  br label %170

170:                                              ; preds = %167, %141, %151, %138, %130, %93, %97, %82, %75, %71, %70
  %171 = phi ptr [ %50, %70 ], [ %50, %71 ], [ %76, %75 ], [ null, %82 ], [ null, %97 ], [ null, %93 ], [ null, %130 ], [ null, %138 ], [ null, %151 ], [ null, %141 ], [ %168, %167 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %6) #24
  ret ptr %171
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_truthop(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca ptr, align 8
  %23 = alloca ptr, align 8
  %24 = alloca ptr, align 8
  %25 = alloca ptr, align 8
  %26 = alloca ptr, align 8
  %27 = alloca ptr, align 8
  %28 = alloca ptr, align 8
  %29 = alloca ptr, align 8
  %30 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %18) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %19) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %20) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %21) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %22) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %23) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %24) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %25) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %26) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %27) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %28) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %29) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %30) #24
  %31 = load i64, ptr %3, align 8
  %32 = and i64 %31, 65536
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %633

34:                                               ; preds = %5
  %35 = load i64, ptr %4, align 8
  %36 = and i64 %35, 65536
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %633

38:                                               ; preds = %34
  %39 = trunc i64 %31 to i32
  %40 = and i32 %39, 65535
  %41 = trunc i64 %35 to i32
  %42 = and i32 %41, 65535
  %43 = icmp eq i32 %40, 89
  br i1 %43, label %44, label %54

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !17
  %47 = tail call i32 @integer_onep(ptr noundef %46) #24
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = tail call ptr @build_int_cst(ptr noundef %51, i64 noundef 0) #24
  %53 = tail call ptr @build2_stat(i32 noundef 102, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %52) #24
  br label %54

54:                                               ; preds = %49, %44, %38
  %55 = phi i32 [ 102, %49 ], [ 89, %44 ], [ %40, %38 ]
  %56 = phi ptr [ %53, %49 ], [ %3, %44 ], [ %3, %38 ]
  %57 = freeze i32 %55
  %58 = icmp eq i32 %42, 89
  br i1 %58, label %59, label %69

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = tail call i32 @integer_onep(ptr noundef %61) #24
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %69, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %66 = load ptr, ptr %65, align 8, !tbaa !17
  %67 = tail call ptr @build_int_cst(ptr noundef %66, i64 noundef 0) #24
  %68 = tail call ptr @build2_stat(i32 noundef 102, ptr noundef %2, ptr noundef nonnull %4, ptr noundef %67) #24
  br label %69

69:                                               ; preds = %64, %59, %54
  %70 = phi i32 [ 102, %64 ], [ 89, %59 ], [ %42, %54 ]
  %71 = phi ptr [ %68, %64 ], [ %4, %59 ], [ %4, %54 ]
  %72 = zext i32 %57 to i64
  %73 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %72
  %74 = load i32, ptr %73, align 4, !tbaa !17
  %75 = icmp eq i32 %74, 5
  br i1 %75, label %76, label %633

76:                                               ; preds = %69
  %77 = zext i32 %70 to i64
  %78 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %77
  %79 = load i32, ptr %78, align 4, !tbaa !17
  %80 = icmp eq i32 %79, 5
  br i1 %80, label %81, label %633

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.tree_exp, ptr %56, i64 0, i32 3
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = getelementptr inbounds %struct.tree_exp, ptr %56, i64 1
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  %86 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 0, i32 3
  %87 = load ptr, ptr %86, align 8, !tbaa !17
  %88 = getelementptr inbounds %struct.tree_exp, ptr %71, i64 1
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = tail call ptr @tree_strip_nop_conversions(ptr noundef %83) #24
  %91 = load i64, ptr %90, align 8
  %92 = and i64 %91, 65535
  %93 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %92
  %94 = load i32, ptr %93, align 4, !tbaa !17
  %95 = icmp eq i32 %94, 1
  %96 = icmp eq i64 %92, 141
  %97 = or i1 %95, %96
  br i1 %97, label %116, label %98

98:                                               ; preds = %81
  %99 = icmp eq i32 %94, 3
  %100 = and i64 %91, 786432
  %101 = icmp eq i64 %100, 0
  %102 = and i1 %99, %101
  br i1 %102, label %103, label %162

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.tree_decl_common, ptr %90, i64 0, i32 2
  %105 = load i64, ptr %104, align 8
  %106 = and i64 %91, 134217728
  %107 = and i64 %105, 33554688
  %108 = or i64 %107, %106
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %162

110:                                              ; preds = %103
  %111 = and i64 %91, 67108864
  %112 = icmp ne i64 %111, 0
  %113 = and i64 %105, 16777216
  %114 = icmp eq i64 %113, 0
  %115 = and i1 %112, %114
  br i1 %115, label %162, label %116

116:                                              ; preds = %110, %81
  %117 = tail call ptr @tree_strip_nop_conversions(ptr noundef %85) #24
  %118 = load i64, ptr %117, align 8
  %119 = and i64 %118, 65535
  %120 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %119
  %121 = load i32, ptr %120, align 4, !tbaa !17
  %122 = icmp eq i32 %121, 1
  %123 = icmp eq i64 %119, 141
  %124 = or i1 %122, %123
  br i1 %124, label %143, label %125

125:                                              ; preds = %116
  %126 = icmp eq i32 %121, 3
  %127 = and i64 %118, 786432
  %128 = icmp eq i64 %127, 0
  %129 = and i1 %126, %128
  br i1 %129, label %130, label %162

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.tree_decl_common, ptr %117, i64 0, i32 2
  %132 = load i64, ptr %131, align 8
  %133 = and i64 %118, 134217728
  %134 = and i64 %132, 33554688
  %135 = or i64 %134, %133
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %162

137:                                              ; preds = %130
  %138 = and i64 %118, 67108864
  %139 = icmp ne i64 %138, 0
  %140 = and i64 %132, 16777216
  %141 = icmp eq i64 %140, 0
  %142 = and i1 %139, %141
  br i1 %142, label %162, label %143

143:                                              ; preds = %137, %116
  %144 = tail call i32 @operand_equal_p(ptr noundef %83, ptr noundef %87, i32 noundef 0)
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %152, label %146

146:                                              ; preds = %143
  %147 = tail call i32 @operand_equal_p(ptr noundef %85, ptr noundef %89, i32 noundef 0)
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %152, label %149

149:                                              ; preds = %146
  %150 = tail call ptr @combine_comparisons(i32 noundef %0, i32 noundef %1, i32 noundef %57, i32 noundef %70, ptr noundef %2, ptr noundef %83, ptr noundef %85)
  %151 = icmp eq ptr %150, null
  br i1 %151, label %162, label %633

152:                                              ; preds = %146, %143
  %153 = tail call i32 @operand_equal_p(ptr noundef %83, ptr noundef %89, i32 noundef 0)
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %162, label %155

155:                                              ; preds = %152
  %156 = tail call i32 @operand_equal_p(ptr noundef %85, ptr noundef %87, i32 noundef 0)
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %155
  %159 = tail call i32 @swap_tree_comparison(i32 noundef %70)
  %160 = tail call ptr @combine_comparisons(i32 noundef %0, i32 noundef %1, i32 noundef %57, i32 noundef %159, ptr noundef %2, ptr noundef %83, ptr noundef %85)
  %161 = icmp eq ptr %160, null
  br i1 %161, label %162, label %633

162:                                              ; preds = %137, %110, %125, %130, %98, %103, %152, %155, %158, %149
  %163 = icmp eq i32 %1, 93
  %164 = icmp eq i32 %1, 91
  %165 = or i1 %163, %164
  %166 = select i1 %165, i32 93, i32 94
  %167 = load ptr, ptr @cfun, align 8, !tbaa !6
  %168 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %167) #24
  %169 = icmp eq i8 %168, 0
  %170 = load i32, ptr @ix86_branch_cost, align 4
  %171 = icmp sgt i32 %170, 1
  %172 = select i1 %169, i1 true, i1 %171
  br i1 %172, label %173, label %259

173:                                              ; preds = %162
  %174 = getelementptr inbounds %struct.tree_common, ptr %87, i64 0, i32 2
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = load i64, ptr %175, align 8
  %177 = trunc i64 %176 to i16
  switch i16 %177, label %184 [
    i16 9, label %259
    i16 13, label %178
    i16 14, label %178
  ]

178:                                              ; preds = %173, %173
  %179 = getelementptr inbounds %struct.tree_common, ptr %175, i64 0, i32 2
  %180 = load ptr, ptr %179, align 8, !tbaa !17
  %181 = load i64, ptr %180, align 8
  %182 = and i64 %181, 65535
  %183 = icmp eq i64 %182, 9
  br i1 %183, label %259, label %184

184:                                              ; preds = %173, %178
  %185 = tail call fastcc i32 @simple_operand_p(ptr noundef nonnull %87), !range !28
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %259, label %187

187:                                              ; preds = %184
  %188 = tail call fastcc i32 @simple_operand_p(ptr noundef %89), !range !28
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %259, label %190

190:                                              ; preds = %187
  %191 = icmp eq i32 %57, 102
  br i1 %191, label %192, label %217

192:                                              ; preds = %190
  switch i32 %1, label %193 [
    i32 93, label %244
    i32 91, label %244
  ]

193:                                              ; preds = %192
  %194 = tail call i32 @integer_zerop(ptr noundef %85) #24
  %195 = icmp ne i32 %194, 0
  %196 = icmp eq i32 %70, 102
  %197 = and i1 %196, %195
  br i1 %197, label %198, label %244

198:                                              ; preds = %193
  %199 = tail call i32 @integer_zerop(ptr noundef %89) #24
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %244, label %201

201:                                              ; preds = %198
  %202 = getelementptr inbounds %struct.tree_common, ptr %83, i64 0, i32 2
  %203 = load ptr, ptr %202, align 8, !tbaa !17
  %204 = load ptr, ptr %174, align 8, !tbaa !17
  %205 = icmp eq ptr %203, %204
  br i1 %205, label %206, label %244

206:                                              ; preds = %201
  %207 = load i64, ptr %203, align 8
  %208 = trunc i64 %207 to i32
  %209 = and i32 %208, 65535
  %210 = add nsw i32 %209, -6
  %211 = icmp ult i32 %210, 3
  br i1 %211, label %212, label %244

212:                                              ; preds = %206
  %213 = tail call ptr @build2_stat(i32 noundef 87, ptr noundef nonnull %203, ptr noundef nonnull %83, ptr noundef nonnull %87) #24
  %214 = load ptr, ptr %202, align 8, !tbaa !17
  %215 = tail call ptr @build_int_cst(ptr noundef %214, i64 noundef 0) #24
  %216 = tail call ptr @build2_stat(i32 noundef 102, ptr noundef %2, ptr noundef %213, ptr noundef %215) #24
  br label %630

217:                                              ; preds = %190
  %218 = icmp eq i32 %57, 101
  %219 = and i1 %165, %218
  br i1 %219, label %220, label %244

220:                                              ; preds = %217
  %221 = tail call i32 @integer_zerop(ptr noundef %85) #24
  %222 = icmp ne i32 %221, 0
  %223 = icmp eq i32 %70, 101
  %224 = and i1 %223, %222
  br i1 %224, label %225, label %244

225:                                              ; preds = %220
  %226 = tail call i32 @integer_zerop(ptr noundef %89) #24
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %244, label %228

228:                                              ; preds = %225
  %229 = getelementptr inbounds %struct.tree_common, ptr %83, i64 0, i32 2
  %230 = load ptr, ptr %229, align 8, !tbaa !17
  %231 = load ptr, ptr %174, align 8, !tbaa !17
  %232 = icmp eq ptr %230, %231
  br i1 %232, label %233, label %244

233:                                              ; preds = %228
  %234 = load i64, ptr %230, align 8
  %235 = trunc i64 %234 to i32
  %236 = and i32 %235, 65535
  %237 = add nsw i32 %236, -6
  %238 = icmp ult i32 %237, 3
  br i1 %238, label %239, label %244

239:                                              ; preds = %233
  %240 = tail call ptr @build2_stat(i32 noundef 87, ptr noundef nonnull %230, ptr noundef nonnull %83, ptr noundef nonnull %87) #24
  %241 = load ptr, ptr %229, align 8, !tbaa !17
  %242 = tail call ptr @build_int_cst(ptr noundef %241, i64 noundef 0) #24
  %243 = tail call ptr @build2_stat(i32 noundef 101, ptr noundef %2, ptr noundef %240, ptr noundef %242) #24
  br label %630

244:                                              ; preds = %193, %198, %201, %192, %192, %206, %233, %228, %225, %220, %217
  %245 = load ptr, ptr @cfun, align 8, !tbaa !6
  %246 = tail call zeroext i8 @optimize_function_for_speed_p(ptr noundef %245) #24
  %247 = icmp eq i8 %246, 0
  %248 = load i32, ptr @ix86_branch_cost, align 4
  %249 = icmp sgt i32 %248, 1
  %250 = select i1 %247, i1 true, i1 %249
  br i1 %250, label %251, label %259

251:                                              ; preds = %244
  %252 = icmp eq i32 %166, %1
  %253 = icmp eq ptr %56, %3
  %254 = select i1 %252, i1 %253, i1 false
  %255 = icmp eq ptr %71, %4
  %256 = select i1 %254, i1 %255, i1 false
  br i1 %256, label %633, label %257

257:                                              ; preds = %251
  %258 = tail call ptr @build2_stat(i32 noundef %166, ptr noundef %2, ptr noundef nonnull %56, ptr noundef nonnull %71) #24
  br label %630

259:                                              ; preds = %173, %244, %187, %184, %178, %162
  %260 = add nsw i32 %57, -103
  %261 = icmp ult i32 %260, -2
  %262 = add nsw i32 %70, -103
  %263 = icmp ult i32 %262, -2
  %264 = select i1 %261, i1 true, i1 %263
  br i1 %264, label %633, label %265

265:                                              ; preds = %259
  store i32 0, ptr %30, align 4, !tbaa !21
  %266 = call fastcc ptr @decode_field_reference(i32 noundef %0, ptr noundef %83, ptr noundef nonnull %6, ptr noundef nonnull %7, ptr noundef nonnull %18, ptr noundef nonnull %14, ptr noundef nonnull %30, ptr noundef nonnull %22, ptr noundef nonnull %26)
  %267 = call fastcc ptr @decode_field_reference(i32 noundef %0, ptr noundef %85, ptr noundef nonnull %8, ptr noundef nonnull %9, ptr noundef nonnull %19, ptr noundef nonnull %15, ptr noundef nonnull %30, ptr noundef nonnull %23, ptr noundef nonnull %27)
  %268 = call fastcc ptr @decode_field_reference(i32 noundef %0, ptr noundef %87, ptr noundef nonnull %10, ptr noundef nonnull %11, ptr noundef nonnull %20, ptr noundef nonnull %16, ptr noundef nonnull %30, ptr noundef nonnull %24, ptr noundef nonnull %28)
  %269 = call fastcc ptr @decode_field_reference(i32 noundef %0, ptr noundef %89, ptr noundef nonnull %12, ptr noundef nonnull %13, ptr noundef nonnull %21, ptr noundef nonnull %17, ptr noundef nonnull %30, ptr noundef nonnull %25, ptr noundef nonnull %29)
  %270 = load i32, ptr %30, align 4, !tbaa !21
  %271 = icmp ne i32 %270, 0
  %272 = icmp eq ptr %266, null
  %273 = select i1 %271, i1 true, i1 %272
  %274 = icmp eq ptr %268, null
  %275 = select i1 %273, i1 true, i1 %274
  br i1 %275, label %633, label %276

276:                                              ; preds = %265
  %277 = call i32 @operand_equal_p(ptr noundef nonnull %266, ptr noundef nonnull %268, i32 noundef 0)
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %633, label %279

279:                                              ; preds = %276
  %280 = load i64, ptr %85, align 8
  %281 = and i64 %280, 65535
  %282 = icmp eq i64 %281, 23
  br i1 %282, label %283, label %287

283:                                              ; preds = %279
  %284 = load i64, ptr %89, align 8
  %285 = and i64 %284, 65535
  %286 = icmp eq i64 %285, 23
  br i1 %286, label %294, label %287

287:                                              ; preds = %283, %279
  %288 = icmp eq ptr %267, null
  %289 = icmp eq ptr %269, null
  %290 = select i1 %288, i1 true, i1 %289
  br i1 %290, label %633, label %291

291:                                              ; preds = %287
  %292 = call i32 @operand_equal_p(ptr noundef nonnull %267, ptr noundef nonnull %269, i32 noundef 0)
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %633, label %297

294:                                              ; preds = %283
  %295 = select i1 %165, i32 101, i32 102
  %296 = icmp eq i32 %57, %295
  br i1 %296, label %310, label %302

297:                                              ; preds = %291
  %298 = select i1 %165, i32 101, i32 102
  %299 = icmp eq i32 %57, %298
  %300 = icmp eq i32 %70, %298
  %301 = and i1 %299, %300
  br i1 %301, label %321, label %633

302:                                              ; preds = %294
  %303 = call i32 @integer_zerop(ptr noundef nonnull %85) #24
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %633, label %305

305:                                              ; preds = %302
  %306 = load ptr, ptr %22, align 8, !tbaa !6
  %307 = call i32 @integer_pow2p(ptr noundef %306) #24
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %633, label %309

309:                                              ; preds = %305
  store i32 1, ptr %14, align 4, !tbaa !21
  br label %310

310:                                              ; preds = %309, %294
  %311 = phi ptr [ %306, %309 ], [ %85, %294 ]
  %312 = icmp eq i32 %70, %295
  br i1 %312, label %321, label %313

313:                                              ; preds = %310
  %314 = call i32 @integer_zerop(ptr noundef nonnull %89) #24
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %633, label %316

316:                                              ; preds = %313
  %317 = load ptr, ptr %24, align 8, !tbaa !6
  %318 = call i32 @integer_pow2p(ptr noundef %317) #24
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %633, label %320

320:                                              ; preds = %316
  store i32 1, ptr %16, align 4, !tbaa !21
  br label %321

321:                                              ; preds = %297, %320, %310
  %322 = phi ptr [ %311, %320 ], [ %311, %310 ], [ null, %297 ]
  %323 = phi i32 [ %295, %320 ], [ %70, %310 ], [ %70, %297 ]
  %324 = phi ptr [ %317, %320 ], [ %89, %310 ], [ null, %297 ]
  %325 = load i64, ptr %7, align 8
  %326 = load i64, ptr %11, align 8
  %327 = call i64 @llvm.smin.i64(i64 %325, i64 %326)
  %328 = load i64, ptr %6, align 8, !tbaa !24
  %329 = add nsw i64 %328, %325
  %330 = load i64, ptr %10, align 8, !tbaa !24
  %331 = add nsw i64 %330, %326
  %332 = call i64 @llvm.smax.i64(i64 %329, i64 %331)
  %333 = sub nsw i64 %332, %327
  %334 = trunc i64 %333 to i32
  %335 = trunc i64 %327 to i32
  %336 = getelementptr inbounds %struct.tree_common, ptr %266, i64 0, i32 2
  %337 = load ptr, ptr %336, align 8, !tbaa !17
  %338 = getelementptr inbounds %struct.tree_type, ptr %337, i64 0, i32 7
  %339 = load i32, ptr %338, align 8, !tbaa !17
  %340 = load i32, ptr @word_mode, align 4, !tbaa !17
  %341 = load i32, ptr %30, align 4, !tbaa !21
  %342 = call i32 @get_best_mode(i32 noundef %334, i32 noundef %335, i32 noundef %339, i32 noundef %340, i32 noundef %341) #24
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %633, label %344

344:                                              ; preds = %321
  %345 = zext i32 %342 to i64
  %346 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %345
  %347 = load i8, ptr %346, align 1, !tbaa !17
  %348 = zext i8 %347 to i64
  %349 = shl nuw nsw i64 %348, 3
  %350 = sub nsw i64 0, %349
  %351 = and i64 %327, %350
  %352 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 3), align 8, !tbaa !50
  %353 = trunc i64 %349 to i32
  %354 = call ptr %352(i32 noundef %353, i32 noundef 1) #24
  %355 = load i64, ptr %7, align 8, !tbaa !24
  %356 = sub nsw i64 %355, %351
  %357 = load i64, ptr %11, align 8, !tbaa !24
  %358 = sub nsw i64 %357, %351
  %359 = load ptr, ptr %22, align 8, !tbaa !6
  %360 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef %359)
  %361 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %362 = call ptr @build_int_cst(ptr noundef %361, i64 noundef %356) #24
  %363 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %360, ptr noundef %362)
  store ptr %363, ptr %22, align 8, !tbaa !6
  %364 = load ptr, ptr %24, align 8, !tbaa !6
  %365 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef %364)
  %366 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %367 = call ptr @build_int_cst(ptr noundef %366, i64 noundef %358) #24
  %368 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %365, ptr noundef %367)
  store ptr %368, ptr %24, align 8, !tbaa !6
  %369 = icmp eq ptr %322, null
  br i1 %369, label %389, label %370

370:                                              ; preds = %344
  %371 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef nonnull %322)
  %372 = load i64, ptr %6, align 8, !tbaa !24
  %373 = trunc i64 %372 to i32
  %374 = load i32, ptr %14, align 4, !tbaa !21
  %375 = load ptr, ptr %26, align 8, !tbaa !6
  %376 = call fastcc ptr @unextend(ptr noundef %371, i32 noundef %373, i32 noundef %374, ptr noundef %375)
  %377 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %378 = call ptr @build_int_cst(ptr noundef %377, i64 noundef %356) #24
  %379 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %376, ptr noundef %378)
  %380 = call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %354, ptr noundef %363)
  %381 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %379, ptr noundef %380)
  %382 = call i32 @integer_zerop(ptr noundef %381) #24
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %389

384:                                              ; preds = %370
  %385 = xor i1 %165, true
  %386 = zext i1 %385 to i32
  %387 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.21, i32 noundef %386) #24
  %388 = call ptr @constant_boolean_node(i32 noundef %386, ptr noundef %2)
  br label %633

389:                                              ; preds = %370, %344
  %390 = phi ptr [ %379, %370 ], [ null, %344 ]
  %391 = icmp eq ptr %324, null
  br i1 %391, label %411, label %392

392:                                              ; preds = %389
  %393 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef nonnull %324)
  %394 = load i64, ptr %10, align 8, !tbaa !24
  %395 = trunc i64 %394 to i32
  %396 = load i32, ptr %16, align 4, !tbaa !21
  %397 = load ptr, ptr %28, align 8, !tbaa !6
  %398 = call fastcc ptr @unextend(ptr noundef %393, i32 noundef %395, i32 noundef %396, ptr noundef %397)
  %399 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %400 = call ptr @build_int_cst(ptr noundef %399, i64 noundef %358) #24
  %401 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %398, ptr noundef %400)
  %402 = call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %354, ptr noundef %368)
  %403 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %401, ptr noundef %402)
  %404 = call i32 @integer_zerop(ptr noundef %403) #24
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %406, label %411

406:                                              ; preds = %392
  %407 = xor i1 %165, true
  %408 = zext i1 %407 to i32
  %409 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.21, i32 noundef %408) #24
  %410 = call ptr @constant_boolean_node(i32 noundef %408, ptr noundef %2)
  br label %633

411:                                              ; preds = %392, %389
  %412 = phi ptr [ %401, %392 ], [ null, %389 ]
  %413 = icmp eq ptr %390, null
  br i1 %413, label %414, label %596

414:                                              ; preds = %411
  %415 = load i64, ptr %6, align 8, !tbaa !24
  %416 = load i64, ptr %8, align 8, !tbaa !24
  %417 = icmp eq i64 %415, %416
  br i1 %417, label %418, label %633

418:                                              ; preds = %414
  %419 = load i64, ptr %10, align 8, !tbaa !24
  %420 = load i64, ptr %12, align 8, !tbaa !24
  %421 = icmp eq i64 %419, %420
  br i1 %421, label %422, label %633

422:                                              ; preds = %418
  %423 = load i32, ptr %14, align 4, !tbaa !21
  %424 = load i32, ptr %15, align 4, !tbaa !21
  %425 = icmp eq i32 %423, %424
  br i1 %425, label %426, label %633

426:                                              ; preds = %422
  %427 = load i32, ptr %16, align 4, !tbaa !21
  %428 = load i32, ptr %17, align 4, !tbaa !21
  %429 = icmp eq i32 %427, %428
  br i1 %429, label %430, label %633

430:                                              ; preds = %426
  %431 = load i64, ptr %7, align 8, !tbaa !24
  %432 = load i64, ptr %11, align 8, !tbaa !24
  %433 = sub nsw i64 %431, %432
  %434 = load i64, ptr %9, align 8
  %435 = load i64, ptr %13, align 8
  %436 = sub nsw i64 %434, %435
  %437 = icmp eq i64 %433, %436
  br i1 %437, label %438, label %633

438:                                              ; preds = %430
  %439 = call i64 @llvm.smin.i64(i64 %434, i64 %435)
  %440 = add nsw i64 %434, %415
  %441 = add nsw i64 %435, %419
  %442 = call i64 @llvm.smax.i64(i64 %440, i64 %441)
  %443 = sub nsw i64 %442, %439
  %444 = trunc i64 %443 to i32
  %445 = trunc i64 %439 to i32
  %446 = getelementptr inbounds %struct.tree_common, ptr %267, i64 0, i32 2
  %447 = load ptr, ptr %446, align 8, !tbaa !17
  %448 = getelementptr inbounds %struct.tree_type, ptr %447, i64 0, i32 7
  %449 = load i32, ptr %448, align 8, !tbaa !17
  %450 = load i32, ptr @word_mode, align 4, !tbaa !17
  %451 = load i32, ptr %30, align 4, !tbaa !21
  %452 = call i32 @get_best_mode(i32 noundef %444, i32 noundef %445, i32 noundef %449, i32 noundef %450, i32 noundef %451) #24
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %633, label %454

454:                                              ; preds = %438
  %455 = zext i32 %452 to i64
  %456 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %455
  %457 = load i8, ptr %456, align 1, !tbaa !17
  %458 = zext i8 %457 to i64
  %459 = shl nuw nsw i64 %458, 3
  %460 = sub nsw i64 0, %459
  %461 = and i64 %439, %460
  %462 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 3), align 8, !tbaa !50
  %463 = trunc i64 %459 to i32
  %464 = call ptr %462(i32 noundef %463, i32 noundef 1) #24
  %465 = load i64, ptr %9, align 8, !tbaa !24
  %466 = sub nsw i64 %465, %461
  %467 = load i64, ptr %13, align 8, !tbaa !24
  %468 = sub nsw i64 %467, %461
  %469 = load ptr, ptr %23, align 8, !tbaa !6
  %470 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %464, ptr noundef %469)
  %471 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %472 = call ptr @build_int_cst(ptr noundef %471, i64 noundef %466) #24
  %473 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %470, ptr noundef %472)
  %474 = load ptr, ptr %25, align 8, !tbaa !6
  %475 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %464, ptr noundef %474)
  %476 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %477 = call ptr @build_int_cst(ptr noundef %476, i64 noundef %468) #24
  %478 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %475, ptr noundef %477)
  store ptr %478, ptr %25, align 8, !tbaa !6
  %479 = call fastcc ptr @const_binop(i32 noundef 87, ptr noundef %363, ptr noundef %368)
  %480 = call fastcc ptr @const_binop(i32 noundef 87, ptr noundef %473, ptr noundef %478)
  %481 = icmp eq i64 %349, %459
  %482 = icmp eq i64 %356, %466
  %483 = select i1 %481, i1 %482, i1 false
  br i1 %483, label %484, label %512

484:                                              ; preds = %454
  %485 = load i32, ptr %14, align 4, !tbaa !21
  %486 = icmp ne i32 %485, 0
  %487 = load i32, ptr %16, align 4
  %488 = icmp ne i32 %487, 0
  %489 = select i1 %486, i1 true, i1 %488
  %490 = zext i1 %489 to i32
  %491 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %266, ptr noundef %354, i64 noundef %349, i64 noundef %351, i32 noundef %490)
  %492 = call fastcc i32 @all_ones_mask_p(ptr noundef %479, i32 noundef %353)
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %494, label %496

494:                                              ; preds = %484
  %495 = call ptr @build2_stat(i32 noundef 89, ptr noundef %354, ptr noundef %491, ptr noundef %479) #24
  br label %496

496:                                              ; preds = %494, %484
  %497 = phi ptr [ %491, %484 ], [ %495, %494 ]
  %498 = load i32, ptr %15, align 4, !tbaa !21
  %499 = icmp ne i32 %498, 0
  %500 = load i32, ptr %17, align 4
  %501 = icmp ne i32 %500, 0
  %502 = select i1 %499, i1 true, i1 %501
  %503 = zext i1 %502 to i32
  %504 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %267, ptr noundef %464, i64 noundef %349, i64 noundef %461, i32 noundef %503)
  %505 = call fastcc i32 @all_ones_mask_p(ptr noundef %480, i32 noundef %463)
  %506 = icmp eq i32 %505, 0
  br i1 %506, label %507, label %509

507:                                              ; preds = %496
  %508 = call ptr @build2_stat(i32 noundef 89, ptr noundef %464, ptr noundef %504, ptr noundef %480) #24
  br label %509

509:                                              ; preds = %507, %496
  %510 = phi ptr [ %504, %496 ], [ %508, %507 ]
  %511 = call ptr @build2_stat(i32 noundef %323, ptr noundef %2, ptr noundef %497, ptr noundef %510) #24
  br label %630

512:                                              ; preds = %454
  %513 = load i64, ptr %6, align 8, !tbaa !24
  %514 = load i64, ptr %7, align 8
  %515 = add nsw i64 %514, %513
  %516 = load i64, ptr %11, align 8
  %517 = icmp eq i64 %515, %516
  br i1 %517, label %518, label %526

518:                                              ; preds = %512
  %519 = load i64, ptr %8, align 8, !tbaa !24
  %520 = load i64, ptr %9, align 8, !tbaa !24
  %521 = add nsw i64 %520, %519
  %522 = load i64, ptr %13, align 8, !tbaa !24
  %523 = icmp eq i64 %521, %522
  br i1 %523, label %524, label %526

524:                                              ; preds = %518
  %525 = load i64, ptr %10, align 8, !tbaa !24
  br label %536

526:                                              ; preds = %518, %512
  %527 = load i64, ptr %10, align 8, !tbaa !24
  %528 = add nsw i64 %527, %516
  %529 = icmp eq i64 %514, %528
  br i1 %529, label %530, label %633

530:                                              ; preds = %526
  %531 = load i64, ptr %9, align 8, !tbaa !24
  %532 = load i64, ptr %13, align 8, !tbaa !24
  %533 = load i64, ptr %12, align 8, !tbaa !24
  %534 = add nsw i64 %533, %532
  %535 = icmp eq i64 %531, %534
  br i1 %535, label %536, label %633

536:                                              ; preds = %524, %530
  %537 = phi i64 [ %525, %524 ], [ %527, %530 ]
  %538 = add nsw i64 %537, %513
  %539 = call i64 @llvm.smin.i64(i64 %514, i64 %516)
  %540 = load i32, ptr %14, align 4, !tbaa !21
  %541 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %266, ptr noundef %354, i64 noundef %538, i64 noundef %539, i32 noundef %540)
  %542 = load i64, ptr %8, align 8, !tbaa !24
  %543 = load i64, ptr %12, align 8, !tbaa !24
  %544 = add nsw i64 %543, %542
  %545 = load i64, ptr %9, align 8
  %546 = load i64, ptr %13, align 8
  %547 = call i64 @llvm.smin.i64(i64 %545, i64 %546)
  %548 = load i32, ptr %15, align 4, !tbaa !21
  %549 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %267, ptr noundef %464, i64 noundef %544, i64 noundef %547, i32 noundef %548)
  %550 = call i64 @llvm.smin.i64(i64 %356, i64 %358)
  %551 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %552 = call ptr @build_int_cst(ptr noundef %551, i64 noundef %550) #24
  %553 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %479, ptr noundef %552)
  store ptr %553, ptr %22, align 8, !tbaa !6
  %554 = call i64 @llvm.smin.i64(i64 %466, i64 %468)
  %555 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %556 = call ptr @build_int_cst(ptr noundef %555, i64 noundef %554) #24
  %557 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %480, ptr noundef %556)
  store ptr %557, ptr %23, align 8, !tbaa !6
  %558 = icmp eq ptr %354, %464
  br i1 %558, label %569, label %559

559:                                              ; preds = %536
  %560 = icmp ugt i64 %349, %459
  br i1 %560, label %561, label %564

561:                                              ; preds = %559
  %562 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %464, ptr noundef %541)
  %563 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %464, ptr noundef %553)
  store ptr %563, ptr %22, align 8, !tbaa !6
  br label %569

564:                                              ; preds = %559
  %565 = icmp ult i64 %349, %459
  br i1 %565, label %566, label %569

566:                                              ; preds = %564
  %567 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef %549)
  %568 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %354, ptr noundef %557)
  store ptr %568, ptr %23, align 8, !tbaa !6
  br label %569

569:                                              ; preds = %561, %566, %564, %536
  %570 = phi ptr [ %557, %561 ], [ %568, %566 ], [ %557, %564 ], [ %557, %536 ]
  %571 = phi ptr [ %563, %561 ], [ %553, %566 ], [ %553, %564 ], [ %553, %536 ]
  %572 = phi ptr [ %549, %561 ], [ %567, %566 ], [ %549, %564 ], [ %549, %536 ]
  %573 = phi ptr [ %562, %561 ], [ %541, %566 ], [ %541, %564 ], [ %541, %536 ]
  %574 = phi ptr [ %464, %561 ], [ %354, %566 ], [ %354, %564 ], [ %354, %536 ]
  %575 = load i64, ptr %6, align 8, !tbaa !24
  %576 = load i64, ptr %10, align 8, !tbaa !24
  %577 = add nsw i64 %576, %575
  %578 = trunc i64 %577 to i32
  %579 = call fastcc i32 @all_ones_mask_p(ptr noundef %571, i32 noundef %578)
  %580 = icmp eq i32 %579, 0
  br i1 %580, label %581, label %583

581:                                              ; preds = %569
  %582 = call ptr @build2_stat(i32 noundef 89, ptr noundef %574, ptr noundef %573, ptr noundef %571) #24
  br label %583

583:                                              ; preds = %581, %569
  %584 = phi ptr [ %573, %569 ], [ %582, %581 ]
  %585 = load i64, ptr %8, align 8, !tbaa !24
  %586 = load i64, ptr %12, align 8, !tbaa !24
  %587 = add nsw i64 %586, %585
  %588 = trunc i64 %587 to i32
  %589 = call fastcc i32 @all_ones_mask_p(ptr noundef %570, i32 noundef %588)
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %591, label %593

591:                                              ; preds = %583
  %592 = call ptr @build2_stat(i32 noundef 89, ptr noundef %574, ptr noundef %572, ptr noundef %570) #24
  br label %593

593:                                              ; preds = %591, %583
  %594 = phi ptr [ %572, %583 ], [ %592, %591 ]
  %595 = call ptr @build2_stat(i32 noundef %323, ptr noundef %2, ptr noundef %584, ptr noundef %594) #24
  br label %630

596:                                              ; preds = %411
  %597 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %363, ptr noundef %368)
  %598 = call i32 @integer_zerop(ptr noundef %597) #24
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %600, label %612

600:                                              ; preds = %596
  %601 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %597, ptr noundef nonnull %390)
  %602 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %597, ptr noundef %412)
  %603 = call i32 @simple_cst_equal(ptr noundef %601, ptr noundef %602) #24
  %604 = icmp eq i32 %603, 1
  br i1 %604, label %612, label %605

605:                                              ; preds = %600
  switch i32 %1, label %606 [
    i32 93, label %609
    i32 91, label %609
  ]

606:                                              ; preds = %605
  %607 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.22) #24
  %608 = call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %633

609:                                              ; preds = %605, %605
  %610 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.23) #24
  %611 = call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %633

612:                                              ; preds = %600, %596
  %613 = load i32, ptr %14, align 4, !tbaa !21
  %614 = icmp ne i32 %613, 0
  %615 = load i32, ptr %16, align 4
  %616 = icmp ne i32 %615, 0
  %617 = select i1 %614, i1 true, i1 %616
  %618 = zext i1 %617 to i32
  %619 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %266, ptr noundef %354, i64 noundef %349, i64 noundef %351, i32 noundef %618)
  %620 = call fastcc ptr @const_binop(i32 noundef 87, ptr noundef %363, ptr noundef %368)
  %621 = call fastcc i32 @all_ones_mask_p(ptr noundef %620, i32 noundef %353)
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %623, label %626

623:                                              ; preds = %612
  %624 = call ptr @build2_stat(i32 noundef 89, ptr noundef %354, ptr noundef %619, ptr noundef %620) #24
  %625 = getelementptr inbounds %struct.tree_exp, ptr %624, i64 0, i32 1
  store i32 %0, ptr %625, align 8, !tbaa !17
  br label %626

626:                                              ; preds = %623, %612
  %627 = phi ptr [ %619, %612 ], [ %624, %623 ]
  %628 = call fastcc ptr @const_binop(i32 noundef 87, ptr noundef nonnull %390, ptr noundef %412)
  %629 = call ptr @build2_stat(i32 noundef %323, ptr noundef %2, ptr noundef %627, ptr noundef %628) #24
  br label %630

630:                                              ; preds = %593, %626, %509, %257, %239, %212
  %631 = phi ptr [ %511, %509 ], [ %595, %593 ], [ %629, %626 ], [ %216, %212 ], [ %243, %239 ], [ %258, %257 ]
  %632 = getelementptr inbounds %struct.tree_exp, ptr %631, i64 0, i32 1
  store i32 %0, ptr %632, align 8, !tbaa !17
  br label %633

633:                                              ; preds = %297, %158, %149, %526, %530, %438, %414, %418, %422, %426, %430, %321, %313, %316, %302, %305, %287, %291, %265, %276, %259, %251, %69, %76, %5, %34, %630, %609, %606, %406, %384
  %634 = phi ptr [ %631, %630 ], [ %608, %606 ], [ %611, %609 ], [ %410, %406 ], [ %388, %384 ], [ null, %34 ], [ null, %5 ], [ null, %76 ], [ null, %69 ], [ null, %251 ], [ null, %259 ], [ null, %276 ], [ null, %265 ], [ null, %291 ], [ null, %287 ], [ null, %305 ], [ null, %302 ], [ null, %316 ], [ null, %313 ], [ null, %321 ], [ null, %430 ], [ null, %426 ], [ null, %422 ], [ null, %418 ], [ null, %414 ], [ null, %438 ], [ null, %530 ], [ null, %526 ], [ %160, %158 ], [ %150, %149 ], [ null, %297 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %30) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %29) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %28) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %27) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %26) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %25) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %24) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %23) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %22) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %21) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %20) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %19) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %18) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  ret ptr %634
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i8, align 1
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.real_value, align 8
  %16 = alloca %struct.real_value, align 8
  %17 = alloca ptr, align 8
  %18 = alloca ptr, align 8
  %19 = alloca i32, align 4
  %20 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %3) #24
  %21 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %4) #24
  %22 = tail call fastcc ptr @fold_relational_const(i32 noundef %1, ptr noundef %2, ptr noundef %20, ptr noundef %21)
  %23 = icmp eq ptr %22, null
  br i1 %23, label %24, label %2454

24:                                               ; preds = %5
  %25 = tail call zeroext i8 @tree_swap_operands_p(ptr noundef %20, ptr noundef %21, i8 noundef zeroext 1), !range !40
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %42, label %27

27:                                               ; preds = %24
  %28 = add i32 %1, -97
  %29 = icmp ult i32 %28, 14
  br i1 %29, label %31, label %30

30:                                               ; preds = %27
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %35

31:                                               ; preds = %27
  %32 = sext i32 %28 to i64
  %33 = getelementptr inbounds [14 x i32], ptr @switch.table.fold_div_compare, i64 0, i64 %32
  %34 = load i32, ptr %33, align 4
  br label %35

35:                                               ; preds = %31, %30
  %36 = phi i32 [ 0, %30 ], [ %34, %31 ]
  %37 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %36, ptr noundef %2, ptr noundef %4, ptr noundef %3)
  %38 = icmp eq ptr %37, null
  br i1 %38, label %39, label %2454

39:                                               ; preds = %35
  %40 = tail call ptr @build2_stat(i32 noundef %36, ptr noundef %2, ptr noundef %4, ptr noundef %3) #24
  %41 = getelementptr inbounds %struct.tree_exp, ptr %40, i64 0, i32 1
  store i32 %0, ptr %41, align 8, !tbaa !17
  br label %2454

42:                                               ; preds = %24
  %43 = load i64, ptr %20, align 8
  %44 = trunc i64 %43 to i32
  %45 = and i32 %44, 65535
  %46 = add nsw i32 %45, -63
  %47 = icmp ult i32 %46, 2
  br i1 %47, label %48, label %118

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %50 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = load i64, ptr %51, align 8
  %53 = and i64 %52, 134283263
  %54 = icmp eq i64 %53, 23
  br i1 %54, label %55, label %118

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = load i64, ptr %57, align 8
  %59 = and i64 %58, 2097152
  %60 = icmp eq i64 %59, 0
  %61 = load i32, ptr @flag_wrapv, align 4
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %60, i1 %62, i1 false
  %64 = load i32, ptr @flag_trapv, align 4
  %65 = icmp eq i32 %64, 0
  %66 = select i1 %63, i1 %65, i1 false
  %67 = load i32, ptr @flag_strict_overflow, align 4
  %68 = icmp ne i32 %67, 0
  %69 = select i1 %66, i1 %68, i1 false
  br i1 %69, label %70, label %118

70:                                               ; preds = %55
  %71 = load i64, ptr %21, align 8
  %72 = and i64 %71, 134283263
  %73 = icmp eq i64 %72, 23
  br i1 %73, label %74, label %118

74:                                               ; preds = %70
  %75 = load ptr, ptr %49, align 8, !tbaa !17
  %76 = and i64 %43, 65535
  %77 = icmp eq i64 %76, 63
  %78 = select i1 %77, i32 64, i32 63
  %79 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %78, ptr noundef nonnull %57, ptr noundef nonnull %21, ptr noundef nonnull %51)
  %80 = load i64, ptr %79, align 8
  %81 = and i64 %80, 134283263
  %82 = icmp eq i64 %81, 134217751
  br i1 %82, label %83, label %103

83:                                               ; preds = %74
  %84 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %51) #24
  %85 = load i64, ptr %20, align 8
  %86 = and i64 %85, 65535
  %87 = icmp eq i64 %86, 64
  %88 = sub nsw i32 0, %84
  %89 = select i1 %87, i32 %88, i32 %84
  %90 = icmp eq i32 %89, -1
  br i1 %90, label %91, label %93

91:                                               ; preds = %83
  %92 = tail call i32 @swap_tree_comparison(i32 noundef %1)
  br label %93

93:                                               ; preds = %91, %83
  %94 = phi i32 [ %92, %91 ], [ %1, %83 ]
  switch i32 %94, label %95 [
    i32 101, label %97
    i32 98, label %97
    i32 97, label %97
    i32 102, label %100
    i32 100, label %100
    i32 99, label %100
  ]

95:                                               ; preds = %93
  %96 = load i64, ptr %79, align 8
  br label %103

97:                                               ; preds = %93, %93, %93
  %98 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !6
  %99 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %98, ptr noundef %75)
  br label %2454

100:                                              ; preds = %93, %93, %93
  %101 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !6
  %102 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %101, ptr noundef %75)
  br label %2454

103:                                              ; preds = %95, %74
  %104 = phi i64 [ %96, %95 ], [ %80, %74 ]
  %105 = trunc i64 %104 to i32
  %106 = and i32 %105, 65535
  %107 = load i64, ptr %21, align 8
  %108 = trunc i64 %107 to i32
  %109 = and i32 %108, 65535
  %110 = icmp eq i32 %106, %109
  br i1 %110, label %111, label %118

111:                                              ; preds = %103
  %112 = icmp ne i32 %106, 23
  %113 = and i64 %104, 134217728
  %114 = icmp eq i64 %113, 0
  %115 = or i1 %114, %112
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  tail call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.24, i32 noundef 3)
  %117 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %75, ptr noundef nonnull %79)
  br label %2454

118:                                              ; preds = %103, %111, %42, %70, %55, %48
  %119 = getelementptr inbounds %struct.tree_common, ptr %20, i64 0, i32 2
  %120 = load ptr, ptr %119, align 8, !tbaa !17
  %121 = load i64, ptr %120, align 8
  %122 = trunc i64 %121 to i16
  switch i16 %122, label %403 [
    i16 10, label %123
    i16 12, label %123
  ]

123:                                              ; preds = %118, %118
  %124 = load i64, ptr %20, align 8
  %125 = freeze i64 %124
  %126 = trunc i64 %125 to i16
  switch i16 %126, label %127 [
    i16 121, label %130
    i16 66, label %130
  ]

127:                                              ; preds = %123
  %128 = load i64, ptr %21, align 8
  %129 = trunc i64 %128 to i16
  switch i16 %129, label %403 [
    i16 121, label %130
    i16 66, label %130
  ]

130:                                              ; preds = %123, %123, %127, %127
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  store ptr null, ptr %7, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  store ptr null, ptr %8, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  store i64 0, ptr %10, align 8, !tbaa !24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #24
  store i64 0, ptr %11, align 8, !tbaa !24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #24
  %131 = load i64, ptr %20, align 8
  %132 = trunc i64 %131 to i16
  switch i16 %132, label %148 [
    i16 121, label %133
    i16 66, label %143
  ]

133:                                              ; preds = %130
  %134 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  %136 = call ptr @get_inner_reference(ptr noundef %135, ptr noundef nonnull %9, ptr noundef nonnull %10, ptr noundef nonnull %7, ptr noundef nonnull %12, ptr noundef nonnull %14, ptr noundef nonnull %13, i8 noundef zeroext 0) #24
  %137 = load i64, ptr %136, align 8
  %138 = and i64 %137, 65535
  %139 = icmp eq i64 %138, 47
  br i1 %139, label %140, label %148

140:                                              ; preds = %133
  %141 = getelementptr inbounds %struct.tree_exp, ptr %136, i64 0, i32 3
  %142 = load ptr, ptr %141, align 8, !tbaa !17
  br label %148

143:                                              ; preds = %130
  %144 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %145 = load ptr, ptr %144, align 8, !tbaa !17
  %146 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %147 = load ptr, ptr %146, align 8, !tbaa !17
  store ptr %147, ptr %7, align 8, !tbaa !6
  br label %148

148:                                              ; preds = %130, %133, %143, %140
  %149 = phi i1 [ false, %140 ], [ false, %143 ], [ true, %133 ], [ false, %130 ]
  %150 = phi i1 [ true, %140 ], [ true, %143 ], [ false, %133 ], [ true, %130 ]
  %151 = phi i8 [ 0, %140 ], [ 0, %143 ], [ 1, %133 ], [ 0, %130 ]
  %152 = phi ptr [ %142, %140 ], [ %145, %143 ], [ %136, %133 ], [ %20, %130 ]
  %153 = load i64, ptr %21, align 8
  %154 = trunc i64 %153 to i16
  switch i16 %154, label %170 [
    i16 121, label %155
    i16 66, label %165
  ]

155:                                              ; preds = %148
  %156 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %157 = load ptr, ptr %156, align 8, !tbaa !17
  %158 = call ptr @get_inner_reference(ptr noundef %157, ptr noundef nonnull %9, ptr noundef nonnull %11, ptr noundef nonnull %8, ptr noundef nonnull %12, ptr noundef nonnull %14, ptr noundef nonnull %13, i8 noundef zeroext 0) #24
  %159 = load i64, ptr %158, align 8
  %160 = and i64 %159, 65535
  %161 = icmp eq i64 %160, 47
  br i1 %161, label %162, label %170

162:                                              ; preds = %155
  %163 = getelementptr inbounds %struct.tree_exp, ptr %158, i64 0, i32 3
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  br label %170

165:                                              ; preds = %148
  %166 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %167 = load ptr, ptr %166, align 8, !tbaa !17
  %168 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 1
  %169 = load ptr, ptr %168, align 8, !tbaa !17
  store ptr %169, ptr %8, align 8, !tbaa !6
  br label %170

170:                                              ; preds = %148, %155, %165, %162
  %171 = phi i1 [ false, %162 ], [ false, %165 ], [ true, %155 ], [ false, %148 ]
  %172 = phi i1 [ true, %162 ], [ true, %165 ], [ false, %155 ], [ true, %148 ]
  %173 = phi i8 [ 0, %162 ], [ 0, %165 ], [ 1, %155 ], [ 0, %148 ]
  %174 = phi ptr [ %164, %162 ], [ %167, %165 ], [ %158, %155 ], [ %21, %148 ]
  %175 = icmp eq i8 %151, %173
  br i1 %175, label %176, label %296

176:                                              ; preds = %170
  %177 = call i32 @operand_equal_p(ptr noundef %152, ptr noundef %174, i32 noundef 0)
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %296, label %179

179:                                              ; preds = %176
  %180 = load ptr, ptr %7, align 8, !tbaa !6
  %181 = load ptr, ptr %8, align 8
  %182 = icmp eq ptr %180, %181
  br i1 %182, label %190, label %183

183:                                              ; preds = %179
  %184 = icmp ne ptr %180, null
  %185 = icmp ne ptr %181, null
  %186 = and i1 %184, %185
  br i1 %186, label %187, label %250

187:                                              ; preds = %183
  %188 = call i32 @operand_equal_p(ptr noundef nonnull %180, ptr noundef nonnull %181, i32 noundef 0)
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %250, label %190

190:                                              ; preds = %187, %179
  %191 = add i32 %1, -101
  %192 = icmp ult i32 %191, 2
  %193 = load i32, ptr @flag_strict_overflow, align 4
  %194 = icmp ne i32 %193, 0
  %195 = select i1 %192, i1 true, i1 %194
  br i1 %195, label %196, label %250

196:                                              ; preds = %190
  %197 = add i32 %1, -103
  %198 = icmp ult i32 %197, -2
  br i1 %198, label %199, label %213

199:                                              ; preds = %196
  %200 = load i64, ptr %10, align 8, !tbaa !24
  %201 = load i64, ptr %11, align 8, !tbaa !24
  %202 = icmp eq i64 %200, %201
  br i1 %202, label %213, label %203

203:                                              ; preds = %199
  %204 = load ptr, ptr %7, align 8, !tbaa !6
  %205 = call fastcc zeroext i8 @pointer_may_wrap_p(ptr noundef %152, ptr noundef %204, i64 noundef %200), !range !40
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %207, label %212

207:                                              ; preds = %203
  %208 = load ptr, ptr %8, align 8, !tbaa !6
  %209 = load i64, ptr %11, align 8, !tbaa !24
  %210 = call fastcc zeroext i8 @pointer_may_wrap_p(ptr noundef %174, ptr noundef %208, i64 noundef %209), !range !40
  %211 = icmp eq i8 %210, 0
  br i1 %211, label %213, label %212

212:                                              ; preds = %207, %203
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.25, i32 noundef 2)
  br label %213

213:                                              ; preds = %212, %207, %199, %196
  switch i32 %1, label %398 [
    i32 101, label %214
    i32 102, label %220
    i32 97, label %226
    i32 98, label %232
    i32 100, label %238
    i32 99, label %244
  ]

214:                                              ; preds = %213
  %215 = load i64, ptr %10, align 8, !tbaa !24
  %216 = load i64, ptr %11, align 8, !tbaa !24
  %217 = icmp eq i64 %215, %216
  %218 = zext i1 %217 to i32
  %219 = call ptr @constant_boolean_node(i32 noundef %218, ptr noundef %2)
  br label %401

220:                                              ; preds = %213
  %221 = load i64, ptr %10, align 8, !tbaa !24
  %222 = load i64, ptr %11, align 8, !tbaa !24
  %223 = icmp ne i64 %221, %222
  %224 = zext i1 %223 to i32
  %225 = call ptr @constant_boolean_node(i32 noundef %224, ptr noundef %2)
  br label %401

226:                                              ; preds = %213
  %227 = load i64, ptr %10, align 8, !tbaa !24
  %228 = load i64, ptr %11, align 8, !tbaa !24
  %229 = icmp slt i64 %227, %228
  %230 = zext i1 %229 to i32
  %231 = call ptr @constant_boolean_node(i32 noundef %230, ptr noundef %2)
  br label %401

232:                                              ; preds = %213
  %233 = load i64, ptr %10, align 8, !tbaa !24
  %234 = load i64, ptr %11, align 8, !tbaa !24
  %235 = icmp sle i64 %233, %234
  %236 = zext i1 %235 to i32
  %237 = call ptr @constant_boolean_node(i32 noundef %236, ptr noundef %2)
  br label %401

238:                                              ; preds = %213
  %239 = load i64, ptr %10, align 8, !tbaa !24
  %240 = load i64, ptr %11, align 8, !tbaa !24
  %241 = icmp sge i64 %239, %240
  %242 = zext i1 %241 to i32
  %243 = call ptr @constant_boolean_node(i32 noundef %242, ptr noundef %2)
  br label %401

244:                                              ; preds = %213
  %245 = load i64, ptr %10, align 8, !tbaa !24
  %246 = load i64, ptr %11, align 8, !tbaa !24
  %247 = icmp sgt i64 %245, %246
  %248 = zext i1 %247 to i32
  %249 = call ptr @constant_boolean_node(i32 noundef %248, ptr noundef %2)
  br label %401

250:                                              ; preds = %190, %187, %183
  %251 = load i64, ptr %10, align 8, !tbaa !24
  %252 = load i64, ptr %11, align 8, !tbaa !24
  %253 = icmp eq i64 %251, %252
  br i1 %253, label %254, label %398

254:                                              ; preds = %250
  %255 = add i32 %1, -101
  %256 = icmp ult i32 %255, 2
  %257 = load i32, ptr @flag_strict_overflow, align 4
  %258 = icmp ne i32 %257, 0
  %259 = select i1 %256, i1 true, i1 %258
  br i1 %259, label %260, label %398

260:                                              ; preds = %254
  %261 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 41), align 8, !tbaa !6
  %262 = call ptr @signed_type_for(ptr noundef %261) #24
  %263 = load ptr, ptr %7, align 8, !tbaa !6
  %264 = icmp eq ptr %263, null
  br i1 %264, label %265, label %267

265:                                              ; preds = %260
  %266 = call ptr @build_int_cst(ptr noundef %262, i64 noundef 0) #24
  br label %269

267:                                              ; preds = %260
  %268 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %262, ptr noundef nonnull %263)
  br label %269

269:                                              ; preds = %267, %265
  %270 = phi ptr [ %268, %267 ], [ %266, %265 ]
  store ptr %270, ptr %7, align 8, !tbaa !6
  %271 = load ptr, ptr %8, align 8, !tbaa !6
  %272 = icmp eq ptr %271, null
  br i1 %272, label %273, label %275

273:                                              ; preds = %269
  %274 = call ptr @build_int_cst(ptr noundef %262, i64 noundef 0) #24
  br label %277

275:                                              ; preds = %269
  %276 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %262, ptr noundef nonnull %271)
  br label %277

277:                                              ; preds = %275, %273
  %278 = phi ptr [ %276, %275 ], [ %274, %273 ]
  store ptr %278, ptr %8, align 8, !tbaa !6
  %279 = add i32 %1, -103
  %280 = icmp ult i32 %279, -2
  br i1 %280, label %281, label %292

281:                                              ; preds = %277
  %282 = load ptr, ptr %7, align 8, !tbaa !6
  %283 = load i64, ptr %10, align 8, !tbaa !24
  %284 = call fastcc zeroext i8 @pointer_may_wrap_p(ptr noundef %152, ptr noundef %282, i64 noundef %283), !range !40
  %285 = icmp eq i8 %284, 0
  br i1 %285, label %286, label %291

286:                                              ; preds = %281
  %287 = load ptr, ptr %8, align 8, !tbaa !6
  %288 = load i64, ptr %11, align 8, !tbaa !24
  %289 = call fastcc zeroext i8 @pointer_may_wrap_p(ptr noundef %174, ptr noundef %287, i64 noundef %288), !range !40
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %292, label %291

291:                                              ; preds = %286, %281
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.25, i32 noundef 3)
  br label %292

292:                                              ; preds = %291, %286, %277
  %293 = load ptr, ptr %7, align 8, !tbaa !6
  %294 = load ptr, ptr %8, align 8, !tbaa !6
  %295 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %293, ptr noundef %294)
  br label %401

296:                                              ; preds = %176, %170
  %297 = and i1 %149, %171
  %298 = icmp ne ptr %152, %174
  %299 = select i1 %297, i1 %298, i1 false
  br i1 %299, label %300, label %359

300:                                              ; preds = %296
  %301 = load i64, ptr %20, align 8
  %302 = and i64 %301, 65535
  %303 = icmp eq i64 %302, 121
  br i1 %303, label %304, label %359

304:                                              ; preds = %300
  %305 = load i64, ptr %21, align 8
  %306 = and i64 %305, 65535
  %307 = icmp eq i64 %306, 121
  br i1 %307, label %308, label %359

308:                                              ; preds = %304
  %309 = load i64, ptr %152, align 8
  %310 = trunc i64 %309 to i16
  switch i16 %310, label %323 [
    i16 32, label %311
    i16 34, label %311
  ]

311:                                              ; preds = %308, %308
  %312 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 49), align 8, !tbaa !70
  %313 = call zeroext i8 %312(ptr noundef nonnull %152) #24
  %314 = icmp eq i8 %313, 0
  %315 = load i64, ptr %174, align 8
  br i1 %314, label %316, label %331

316:                                              ; preds = %311
  %317 = and i64 %315, 65535
  %318 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %317
  %319 = load i32, ptr %318, align 4, !tbaa !17
  %320 = icmp eq i32 %319, 1
  br i1 %320, label %331, label %321

321:                                              ; preds = %316
  %322 = load i64, ptr %152, align 8
  br label %323

323:                                              ; preds = %321, %308
  %324 = phi i64 [ %322, %321 ], [ %309, %308 ]
  %325 = and i64 %324, 65535
  %326 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %325
  %327 = load i32, ptr %326, align 4, !tbaa !17
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %329, label %359

329:                                              ; preds = %323
  %330 = load i64, ptr %174, align 8
  br label %331

331:                                              ; preds = %329, %316, %311
  %332 = phi i64 [ %330, %329 ], [ %315, %316 ], [ %315, %311 ]
  %333 = trunc i64 %332 to i16
  switch i16 %333, label %346 [
    i16 32, label %334
    i16 34, label %334
  ]

334:                                              ; preds = %331, %331
  %335 = load ptr, ptr getelementptr inbounds (%struct.gcc_target, ptr @targetm, i64 0, i32 49), align 8, !tbaa !70
  %336 = call zeroext i8 %335(ptr noundef nonnull %174) #24
  %337 = icmp eq i8 %336, 0
  br i1 %337, label %338, label %352

338:                                              ; preds = %334
  %339 = load i64, ptr %152, align 8
  %340 = and i64 %339, 65535
  %341 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %340
  %342 = load i32, ptr %341, align 4, !tbaa !17
  %343 = icmp eq i32 %342, 1
  br i1 %343, label %352, label %344

344:                                              ; preds = %338
  %345 = load i64, ptr %174, align 8
  br label %346

346:                                              ; preds = %344, %331
  %347 = phi i64 [ %345, %344 ], [ %332, %331 ]
  %348 = and i64 %347, 65535
  %349 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %348
  %350 = load i32, ptr %349, align 4, !tbaa !17
  %351 = icmp eq i32 %350, 1
  br i1 %351, label %352, label %359

352:                                              ; preds = %346, %338, %334
  switch i32 %1, label %398 [
    i32 101, label %353
    i32 102, label %356
  ]

353:                                              ; preds = %352
  %354 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 25), align 8, !tbaa !6
  %355 = call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %354, ptr noundef nonnull %20, ptr noundef nonnull %21)
  br label %401

356:                                              ; preds = %352
  %357 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 26), align 16, !tbaa !6
  %358 = call ptr @omit_two_operands_loc(i32 noundef %0, ptr noundef %2, ptr noundef %357, ptr noundef nonnull %20, ptr noundef nonnull %21)
  br label %401

359:                                              ; preds = %346, %323, %304, %300, %296
  %360 = load i64, ptr %10, align 8, !tbaa !24
  %361 = load i64, ptr %11, align 8, !tbaa !24
  %362 = icmp eq i64 %360, %361
  br i1 %362, label %363, label %398

363:                                              ; preds = %359
  br i1 %149, label %364, label %368

364:                                              ; preds = %363
  %365 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %366 = load ptr, ptr %365, align 8, !tbaa !17
  %367 = icmp eq ptr %152, %366
  br i1 %367, label %398, label %370

368:                                              ; preds = %363
  %369 = icmp eq ptr %152, %20
  br i1 %369, label %398, label %370

370:                                              ; preds = %368, %364
  br i1 %171, label %371, label %375

371:                                              ; preds = %370
  %372 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %373 = load ptr, ptr %372, align 8, !tbaa !17
  %374 = icmp eq ptr %174, %373
  br i1 %374, label %398, label %377

375:                                              ; preds = %370
  %376 = icmp eq ptr %174, %21
  br i1 %376, label %398, label %377

377:                                              ; preds = %375, %371
  %378 = load ptr, ptr %7, align 8, !tbaa !6
  %379 = load ptr, ptr %8, align 8
  %380 = icmp eq ptr %378, %379
  br i1 %380, label %388, label %381

381:                                              ; preds = %377
  %382 = icmp ne ptr %378, null
  %383 = icmp ne ptr %379, null
  %384 = and i1 %382, %383
  br i1 %384, label %385, label %398

385:                                              ; preds = %381
  %386 = call i32 @operand_equal_p(ptr noundef nonnull %378, ptr noundef nonnull %379, i32 noundef 0)
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %398, label %388

388:                                              ; preds = %385, %377
  br i1 %150, label %391, label %389

389:                                              ; preds = %388
  %390 = call ptr @build_fold_addr_expr_loc(i32 noundef %0, ptr noundef %152)
  br label %391

391:                                              ; preds = %389, %388
  %392 = phi ptr [ %390, %389 ], [ %152, %388 ]
  br i1 %172, label %395, label %393

393:                                              ; preds = %391
  %394 = call ptr @build_fold_addr_expr_loc(i32 noundef %0, ptr noundef %174)
  br label %395

395:                                              ; preds = %393, %391
  %396 = phi ptr [ %394, %393 ], [ %174, %391 ]
  %397 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %392, ptr noundef %396)
  br label %401

398:                                              ; preds = %352, %385, %381, %375, %371, %368, %364, %359, %213, %254, %250
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  %399 = load ptr, ptr %119, align 8, !tbaa !17
  %400 = load i64, ptr %399, align 8
  br label %403

401:                                              ; preds = %395, %356, %353, %292, %244, %238, %232, %226, %220, %214
  %402 = phi ptr [ %249, %244 ], [ %243, %238 ], [ %237, %232 ], [ %231, %226 ], [ %225, %220 ], [ %219, %214 ], [ %295, %292 ], [ %355, %353 ], [ %358, %356 ], [ %397, %395 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  br label %2454

403:                                              ; preds = %398, %127, %118
  %404 = phi i64 [ %400, %398 ], [ %121, %127 ], [ %121, %118 ]
  %405 = and i64 %404, 2097152
  %406 = icmp eq i64 %405, 0
  %407 = load i32, ptr @flag_wrapv, align 4
  %408 = icmp eq i32 %407, 0
  %409 = select i1 %406, i1 %408, i1 false
  %410 = load i32, ptr @flag_trapv, align 4
  %411 = icmp eq i32 %410, 0
  %412 = select i1 %409, i1 %411, i1 false
  %413 = load i32, ptr @flag_strict_overflow, align 4
  %414 = icmp ne i32 %413, 0
  %415 = select i1 %412, i1 %414, i1 false
  br i1 %415, label %416, label %487

416:                                              ; preds = %403
  %417 = load i64, ptr %20, align 8
  %418 = trunc i64 %417 to i32
  %419 = and i32 %418, 65535
  %420 = add nsw i32 %419, -63
  %421 = icmp ult i32 %420, 2
  br i1 %421, label %422, label %487

422:                                              ; preds = %416
  %423 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %424 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %425 = load ptr, ptr %424, align 8, !tbaa !17
  %426 = load i64, ptr %425, align 8
  %427 = and i64 %426, 134283263
  %428 = icmp eq i64 %427, 23
  br i1 %428, label %429, label %487

429:                                              ; preds = %422
  %430 = load i64, ptr %21, align 8
  %431 = trunc i64 %430 to i32
  %432 = and i32 %431, 65535
  %433 = add nsw i32 %432, -63
  %434 = icmp ult i32 %433, 2
  br i1 %434, label %435, label %487

435:                                              ; preds = %429
  %436 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 1
  %437 = load ptr, ptr %436, align 8, !tbaa !17
  %438 = load i64, ptr %437, align 8
  %439 = and i64 %438, 134283263
  %440 = icmp eq i64 %439, 23
  br i1 %440, label %441, label %487

441:                                              ; preds = %435
  %442 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %443 = load ptr, ptr %423, align 8, !tbaa !17
  %444 = load ptr, ptr %442, align 8, !tbaa !17
  %445 = xor i64 %430, %417
  %446 = and i64 %445, 65535
  %447 = icmp eq i64 %446, 0
  %448 = select i1 %447, i32 64, i32 63
  %449 = call ptr @int_const_binop(i32 noundef %448, ptr noundef nonnull %437, ptr noundef nonnull %425, i32 noundef 0)
  %450 = load i64, ptr %449, align 8
  %451 = and i64 %450, 134217728
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %453, label %465

453:                                              ; preds = %441
  %454 = call i32 @tree_int_cst_compare(ptr noundef nonnull %437, ptr noundef nonnull %449) #24
  %455 = call i32 @tree_int_cst_sgn(ptr noundef nonnull %437) #24
  %456 = icmp eq i32 %454, %455
  br i1 %456, label %457, label %465

457:                                              ; preds = %453
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.26, i32 noundef 3)
  %458 = load i64, ptr %21, align 8
  %459 = trunc i64 %458 to i32
  %460 = and i32 %459, 65535
  %461 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %462 = load ptr, ptr %461, align 8, !tbaa !17
  %463 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %460, ptr noundef %462, ptr noundef %444, ptr noundef nonnull %449)
  %464 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %443, ptr noundef %463)
  br label %2454

465:                                              ; preds = %453, %441
  %466 = load i64, ptr %20, align 8
  %467 = load i64, ptr %21, align 8
  %468 = xor i64 %467, %466
  %469 = and i64 %468, 65535
  %470 = icmp eq i64 %469, 0
  %471 = select i1 %470, i32 64, i32 63
  %472 = call ptr @int_const_binop(i32 noundef %471, ptr noundef nonnull %425, ptr noundef nonnull %437, i32 noundef 0)
  %473 = load i64, ptr %472, align 8
  %474 = and i64 %473, 134217728
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %487

476:                                              ; preds = %465
  %477 = call i32 @tree_int_cst_compare(ptr noundef nonnull %425, ptr noundef nonnull %472) #24
  %478 = call i32 @tree_int_cst_sgn(ptr noundef nonnull %425) #24
  %479 = icmp eq i32 %477, %478
  br i1 %479, label %480, label %487

480:                                              ; preds = %476
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.26, i32 noundef 3)
  %481 = load i64, ptr %20, align 8
  %482 = trunc i64 %481 to i32
  %483 = and i32 %482, 65535
  %484 = load ptr, ptr %119, align 8, !tbaa !17
  %485 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %483, ptr noundef %484, ptr noundef %443, ptr noundef nonnull %472)
  %486 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %485, ptr noundef %444)
  br label %2454

487:                                              ; preds = %465, %476, %429, %416, %435, %422, %403
  %488 = load ptr, ptr %119, align 8, !tbaa !17
  %489 = load i64, ptr %488, align 8
  %490 = and i64 %489, 2097152
  %491 = icmp eq i64 %490, 0
  %492 = load i32, ptr @flag_wrapv, align 4
  %493 = icmp eq i32 %492, 0
  %494 = select i1 %491, i1 %493, i1 false
  %495 = load i32, ptr @flag_trapv, align 4
  %496 = icmp eq i32 %495, 0
  %497 = select i1 %494, i1 %496, i1 false
  %498 = load i32, ptr @flag_strict_overflow, align 4
  %499 = icmp ne i32 %498, 0
  %500 = select i1 %497, i1 %499, i1 false
  br i1 %500, label %501, label %530

501:                                              ; preds = %487
  %502 = load i64, ptr %20, align 8
  %503 = and i64 %502, 65535
  %504 = icmp eq i64 %503, 65
  br i1 %504, label %505, label %530

505:                                              ; preds = %501
  %506 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %507 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %508 = load ptr, ptr %507, align 8, !tbaa !17
  %509 = load i64, ptr %508, align 8
  %510 = and i64 %509, 134283263
  %511 = icmp eq i64 %510, 23
  br i1 %511, label %512, label %530

512:                                              ; preds = %505
  %513 = call i32 @integer_zerop(ptr noundef %21) #24
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %530, label %515

515:                                              ; preds = %512
  %516 = load ptr, ptr %507, align 8, !tbaa !17
  %517 = load ptr, ptr %506, align 8, !tbaa !17
  %518 = call i32 @integer_zerop(ptr noundef %516) #24
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %522, label %520

520:                                              ; preds = %515
  %521 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %516, ptr noundef %21)
  br label %2454

522:                                              ; preds = %515
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.27, i32 noundef 3)
  %523 = call i32 @tree_int_cst_sgn(ptr noundef %516) #24
  %524 = icmp slt i32 %523, 0
  br i1 %524, label %525, label %527

525:                                              ; preds = %522
  %526 = call i32 @swap_tree_comparison(i32 noundef %1)
  br label %527

527:                                              ; preds = %525, %522
  %528 = phi i32 [ %526, %525 ], [ %1, %522 ]
  %529 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %528, ptr noundef %2, ptr noundef %517, ptr noundef %21)
  br label %2454

530:                                              ; preds = %512, %505, %501, %487
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #24
  store i8 0, ptr %6, align 1, !tbaa !17
  %531 = call fastcc ptr @maybe_canonicalize_comparison_1(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef nonnull %6)
  %532 = icmp eq ptr %531, null
  br i1 %532, label %551, label %533

533:                                              ; preds = %530
  %534 = load i8, ptr %6, align 1, !tbaa !17
  %535 = icmp eq i8 %534, 0
  br i1 %535, label %567, label %536

536:                                              ; preds = %533
  %537 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %538 = icmp sgt i32 %537, 0
  br i1 %538, label %539, label %546

539:                                              ; preds = %536
  %540 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %541 = icmp eq ptr %540, null
  %542 = load i32, ptr @fold_deferred_overflow_code, align 4
  %543 = icmp ugt i32 %542, 5
  %544 = select i1 %541, i1 true, i1 %543
  br i1 %544, label %545, label %567

545:                                              ; preds = %539
  store ptr @.str.28, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 5, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %567

546:                                              ; preds = %536
  %547 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %548 = icmp slt i32 %547, 5
  br i1 %548, label %567, label %549

549:                                              ; preds = %546
  %550 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef nonnull @.str.28) #24
  br label %567

551:                                              ; preds = %530
  %552 = add i32 %1, -97
  %553 = icmp ult i32 %552, 14
  br i1 %553, label %555, label %554

554:                                              ; preds = %551
  call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %559

555:                                              ; preds = %551
  %556 = sext i32 %552 to i64
  %557 = getelementptr inbounds [14 x i32], ptr @switch.table.fold_div_compare, i64 0, i64 %556
  %558 = load i32, ptr %557, align 4
  br label %559

559:                                              ; preds = %555, %554
  %560 = phi i32 [ 0, %554 ], [ %558, %555 ]
  store i8 0, ptr %6, align 1, !tbaa !17
  %561 = call fastcc ptr @maybe_canonicalize_comparison_1(i32 noundef %0, i32 noundef %560, ptr noundef %2, ptr noundef %4, ptr noundef %3, ptr noundef nonnull %6)
  %562 = icmp ne ptr %561, null
  %563 = load i8, ptr %6, align 1
  %564 = icmp ne i8 %563, 0
  %565 = select i1 %562, i1 %564, i1 false
  br i1 %565, label %566, label %569

566:                                              ; preds = %559
  call fastcc void @fold_overflow_warning(ptr noundef nonnull @.str.28, i32 noundef 5)
  br label %567

567:                                              ; preds = %533, %566, %539, %545, %546, %549
  %568 = phi ptr [ %531, %549 ], [ %531, %546 ], [ %531, %545 ], [ %531, %539 ], [ %561, %566 ], [ %531, %533 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #24
  br label %2454

569:                                              ; preds = %559
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #24
  %570 = icmp eq ptr %561, null
  br i1 %570, label %571, label %2454

571:                                              ; preds = %569
  %572 = load ptr, ptr %119, align 8, !tbaa !17
  %573 = load i64, ptr %572, align 8
  %574 = trunc i64 %573 to i16
  switch i16 %574, label %1334 [
    i16 9, label %581
    i16 13, label %575
    i16 14, label %575
  ]

575:                                              ; preds = %571, %571
  %576 = getelementptr inbounds %struct.tree_common, ptr %572, i64 0, i32 2
  %577 = load ptr, ptr %576, align 8, !tbaa !17
  %578 = load i64, ptr %577, align 8
  %579 = and i64 %578, 65535
  %580 = icmp eq i64 %579, 9
  br i1 %580, label %581, label %1334

581:                                              ; preds = %571, %575
  %582 = call ptr @strip_float_extensions(ptr noundef nonnull %20) #24
  %583 = call ptr @strip_float_extensions(ptr noundef %21) #24
  %584 = getelementptr inbounds %struct.tree_common, ptr %582, i64 0, i32 2
  %585 = load ptr, ptr %584, align 8, !tbaa !17
  %586 = getelementptr inbounds %struct.tree_common, ptr %583, i64 0, i32 2
  %587 = load ptr, ptr %586, align 8, !tbaa !17
  %588 = getelementptr inbounds %struct.tree_type, ptr %587, i64 0, i32 6
  %589 = load i32, ptr %588, align 4
  %590 = and i32 %589, 1023
  %591 = getelementptr inbounds %struct.tree_type, ptr %585, i64 0, i32 6
  %592 = load i32, ptr %591, align 4
  %593 = and i32 %592, 1023
  %594 = icmp ugt i32 %590, %593
  %595 = select i1 %594, ptr %587, ptr %585
  %596 = getelementptr inbounds %struct.tree_type, ptr %595, i64 0, i32 6
  %597 = load i32, ptr %596, align 4
  %598 = and i32 %597, 1023
  %599 = load ptr, ptr %119, align 8, !tbaa !17
  %600 = getelementptr inbounds %struct.tree_type, ptr %599, i64 0, i32 6
  %601 = load i32, ptr %600, align 4
  %602 = and i32 %601, 1023
  %603 = icmp ult i32 %598, %602
  br i1 %603, label %604, label %608

604:                                              ; preds = %581
  %605 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %595, ptr noundef nonnull %582)
  %606 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %595, ptr noundef nonnull %583)
  %607 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %605, ptr noundef %606)
  br label %2454

608:                                              ; preds = %581
  %609 = load i64, ptr %20, align 8
  %610 = and i64 %609, 65535
  %611 = icmp eq i64 %610, 79
  %612 = load i64, ptr %21, align 8
  %613 = and i64 %612, 65535
  %614 = icmp eq i64 %613, 79
  %615 = select i1 %611, i1 %614, i1 false
  br i1 %615, label %616, label %622

616:                                              ; preds = %608
  %617 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %618 = load ptr, ptr %617, align 8, !tbaa !17
  %619 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %620 = load ptr, ptr %619, align 8, !tbaa !17
  %621 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %618, ptr noundef %620)
  br label %2454

622:                                              ; preds = %608
  %623 = icmp eq i64 %613, 24
  br i1 %623, label %624, label %1256

624:                                              ; preds = %622
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %15) #24
  %625 = getelementptr inbounds %struct.tree_real_cst, ptr %21, i64 0, i32 1
  %626 = load ptr, ptr %625, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %15, ptr noundef nonnull align 8 dereferenceable(32) %626, i64 32, i1 false), !tbaa.struct !29
  %627 = load i64, ptr %20, align 8
  %628 = and i64 %627, 65535
  %629 = icmp eq i64 %628, 79
  br i1 %629, label %630, label %638

630:                                              ; preds = %624
  %631 = call i32 @swap_tree_comparison(i32 noundef %1)
  %632 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %633 = load ptr, ptr %632, align 8, !tbaa !17
  %634 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %635 = load ptr, ptr %634, align 8, !tbaa !17
  call void @real_arithmetic2(ptr nonnull sret(%struct.real_value) align 8 %16, i32 noundef 79, ptr noundef nonnull %15, ptr noundef null) #24
  %636 = call ptr @build_real(ptr noundef %635, ptr noundef nonnull byval(%struct.real_value) align 8 %16) #24
  %637 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %631, ptr noundef %2, ptr noundef %633, ptr noundef %636)
  br label %1253

638:                                              ; preds = %624
  %639 = call zeroext i8 @real_isnegzero(ptr noundef nonnull %15) #24
  %640 = icmp eq i8 %639, 0
  br i1 %640, label %646, label %641

641:                                              ; preds = %638
  %642 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %643 = load ptr, ptr %642, align 8, !tbaa !17
  %644 = call ptr @build_real(ptr noundef %643, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst0) #24
  %645 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef %644)
  br label %1253

646:                                              ; preds = %638
  %647 = call zeroext i8 @real_isnan(ptr noundef nonnull %15) #24
  %648 = icmp eq i8 %647, 0
  br i1 %648, label %954, label %649

649:                                              ; preds = %646
  %650 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %651 = icmp eq i32 %650, 0
  br i1 %651, label %948, label %652

652:                                              ; preds = %649
  %653 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %654 = load ptr, ptr %653, align 8, !tbaa !17
  %655 = load i64, ptr %654, align 8
  %656 = and i64 %655, 65535
  %657 = icmp eq i64 %656, 14
  br i1 %657, label %658, label %661

658:                                              ; preds = %652
  %659 = call i32 @vector_type_mode(ptr noundef nonnull %654) #24
  %660 = load ptr, ptr %653, align 8, !tbaa !17
  br label %666

661:                                              ; preds = %652
  %662 = getelementptr inbounds %struct.tree_type, ptr %654, i64 0, i32 6
  %663 = load i32, ptr %662, align 4
  %664 = lshr i32 %663, 16
  %665 = and i32 %664, 255
  br label %666

666:                                              ; preds = %661, %658
  %667 = phi ptr [ %660, %658 ], [ %654, %661 ]
  %668 = phi i32 [ %659, %658 ], [ %665, %661 ]
  %669 = zext i32 %668 to i64
  %670 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %669
  %671 = load i8, ptr %670, align 1, !tbaa !17
  %672 = icmp eq i8 %671, 8
  br i1 %672, label %730, label %673

673:                                              ; preds = %666
  %674 = load i64, ptr %667, align 8
  %675 = and i64 %674, 65535
  %676 = icmp eq i64 %675, 14
  br i1 %676, label %677, label %680

677:                                              ; preds = %673
  %678 = call i32 @vector_type_mode(ptr noundef nonnull %667) #24
  %679 = load ptr, ptr %653, align 8, !tbaa !17
  br label %685

680:                                              ; preds = %673
  %681 = getelementptr inbounds %struct.tree_type, ptr %667, i64 0, i32 6
  %682 = load i32, ptr %681, align 4
  %683 = lshr i32 %682, 16
  %684 = and i32 %683, 255
  br label %685

685:                                              ; preds = %680, %677
  %686 = phi ptr [ %679, %677 ], [ %667, %680 ]
  %687 = phi i32 [ %678, %677 ], [ %684, %680 ]
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %688
  %690 = load i8, ptr %689, align 1, !tbaa !17
  %691 = icmp eq i8 %690, 9
  br i1 %691, label %730, label %692

692:                                              ; preds = %685
  %693 = load i64, ptr %686, align 8
  %694 = and i64 %693, 65535
  %695 = icmp eq i64 %694, 14
  br i1 %695, label %696, label %699

696:                                              ; preds = %692
  %697 = call i32 @vector_type_mode(ptr noundef nonnull %686) #24
  %698 = load ptr, ptr %653, align 8, !tbaa !17
  br label %704

699:                                              ; preds = %692
  %700 = getelementptr inbounds %struct.tree_type, ptr %686, i64 0, i32 6
  %701 = load i32, ptr %700, align 4
  %702 = lshr i32 %701, 16
  %703 = and i32 %702, 255
  br label %704

704:                                              ; preds = %699, %696
  %705 = phi ptr [ %698, %696 ], [ %686, %699 ]
  %706 = phi i32 [ %697, %696 ], [ %703, %699 ]
  %707 = zext i32 %706 to i64
  %708 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %707
  %709 = load i8, ptr %708, align 1, !tbaa !17
  %710 = icmp eq i8 %709, 11
  br i1 %710, label %730, label %711

711:                                              ; preds = %704
  %712 = load i64, ptr %705, align 8
  %713 = and i64 %712, 65535
  %714 = icmp eq i64 %713, 14
  br i1 %714, label %715, label %717

715:                                              ; preds = %711
  %716 = call i32 @vector_type_mode(ptr noundef nonnull %705) #24
  br label %722

717:                                              ; preds = %711
  %718 = getelementptr inbounds %struct.tree_type, ptr %705, i64 0, i32 6
  %719 = load i32, ptr %718, align 4
  %720 = lshr i32 %719, 16
  %721 = and i32 %720, 255
  br label %722

722:                                              ; preds = %717, %715
  %723 = phi i32 [ %716, %715 ], [ %721, %717 ]
  %724 = zext i32 %723 to i64
  %725 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %724
  %726 = load i8, ptr %725, align 1, !tbaa !17
  %727 = icmp eq i8 %726, 17
  br i1 %727, label %728, label %948

728:                                              ; preds = %722
  %729 = load ptr, ptr %653, align 8, !tbaa !17
  br label %730

730:                                              ; preds = %728, %704, %685, %666
  %731 = phi ptr [ %729, %728 ], [ %705, %704 ], [ %686, %685 ], [ %667, %666 ]
  %732 = load i64, ptr %731, align 8
  %733 = and i64 %732, 65535
  %734 = icmp eq i64 %733, 14
  br i1 %734, label %735, label %738

735:                                              ; preds = %730
  %736 = call i32 @vector_type_mode(ptr noundef nonnull %731) #24
  %737 = load ptr, ptr %653, align 8, !tbaa !17
  br label %743

738:                                              ; preds = %730
  %739 = getelementptr inbounds %struct.tree_type, ptr %731, i64 0, i32 6
  %740 = load i32, ptr %739, align 4
  %741 = lshr i32 %740, 16
  %742 = and i32 %741, 255
  br label %743

743:                                              ; preds = %738, %735
  %744 = phi ptr [ %737, %735 ], [ %731, %738 ]
  %745 = phi i32 [ %736, %735 ], [ %742, %738 ]
  %746 = zext i32 %745 to i64
  %747 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %746
  %748 = load i8, ptr %747, align 1, !tbaa !17
  %749 = icmp eq i8 %748, 8
  br i1 %749, label %769, label %750

750:                                              ; preds = %743
  %751 = load i64, ptr %744, align 8
  %752 = and i64 %751, 65535
  %753 = icmp eq i64 %752, 14
  br i1 %753, label %754, label %757

754:                                              ; preds = %750
  %755 = call i32 @vector_type_mode(ptr noundef nonnull %744) #24
  %756 = load ptr, ptr %653, align 8, !tbaa !17
  br label %762

757:                                              ; preds = %750
  %758 = getelementptr inbounds %struct.tree_type, ptr %744, i64 0, i32 6
  %759 = load i32, ptr %758, align 4
  %760 = lshr i32 %759, 16
  %761 = and i32 %760, 255
  br label %762

762:                                              ; preds = %757, %754
  %763 = phi ptr [ %756, %754 ], [ %744, %757 ]
  %764 = phi i32 [ %755, %754 ], [ %761, %757 ]
  %765 = zext i32 %764 to i64
  %766 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %765
  %767 = load i8, ptr %766, align 1, !tbaa !17
  %768 = icmp eq i8 %767, 9
  br i1 %768, label %769, label %781

769:                                              ; preds = %762, %743
  %770 = phi ptr [ %763, %762 ], [ %744, %743 ]
  %771 = load i64, ptr %770, align 8
  %772 = and i64 %771, 65535
  %773 = icmp eq i64 %772, 14
  br i1 %773, label %774, label %776

774:                                              ; preds = %769
  %775 = call i32 @vector_type_mode(ptr noundef nonnull %770) #24
  br label %798

776:                                              ; preds = %769
  %777 = getelementptr inbounds %struct.tree_type, ptr %770, i64 0, i32 6
  %778 = load i32, ptr %777, align 4
  %779 = lshr i32 %778, 16
  %780 = and i32 %779, 255
  br label %798

781:                                              ; preds = %762
  %782 = load i64, ptr %763, align 8
  %783 = and i64 %782, 65535
  %784 = icmp eq i64 %783, 14
  br i1 %784, label %785, label %787

785:                                              ; preds = %781
  %786 = call i32 @vector_type_mode(ptr noundef nonnull %763) #24
  br label %792

787:                                              ; preds = %781
  %788 = getelementptr inbounds %struct.tree_type, ptr %763, i64 0, i32 6
  %789 = load i32, ptr %788, align 4
  %790 = lshr i32 %789, 16
  %791 = and i32 %790, 255
  br label %792

792:                                              ; preds = %787, %785
  %793 = phi i32 [ %786, %785 ], [ %791, %787 ]
  %794 = zext i32 %793 to i64
  %795 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %794
  %796 = load i8, ptr %795, align 1, !tbaa !17
  %797 = zext i8 %796 to i32
  br label %798

798:                                              ; preds = %774, %776, %792
  %799 = phi i32 [ %797, %792 ], [ %775, %774 ], [ %780, %776 ]
  %800 = zext i32 %799 to i64
  %801 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %800
  %802 = load i8, ptr %801, align 1, !tbaa !17
  %803 = icmp eq i8 %802, 9
  %804 = load ptr, ptr %653, align 8, !tbaa !17
  %805 = load i64, ptr %804, align 8
  %806 = and i64 %805, 65535
  %807 = icmp eq i64 %806, 14
  br i1 %803, label %808, label %872

808:                                              ; preds = %798
  br i1 %807, label %809, label %812

809:                                              ; preds = %808
  %810 = call i32 @vector_type_mode(ptr noundef nonnull %804) #24
  %811 = load ptr, ptr %653, align 8, !tbaa !17
  br label %817

812:                                              ; preds = %808
  %813 = getelementptr inbounds %struct.tree_type, ptr %804, i64 0, i32 6
  %814 = load i32, ptr %813, align 4
  %815 = lshr i32 %814, 16
  %816 = and i32 %815, 255
  br label %817

817:                                              ; preds = %812, %809
  %818 = phi ptr [ %811, %809 ], [ %804, %812 ]
  %819 = phi i32 [ %810, %809 ], [ %816, %812 ]
  %820 = zext i32 %819 to i64
  %821 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %820
  %822 = load i8, ptr %821, align 1, !tbaa !17
  %823 = icmp eq i8 %822, 8
  br i1 %823, label %843, label %824

824:                                              ; preds = %817
  %825 = load i64, ptr %818, align 8
  %826 = and i64 %825, 65535
  %827 = icmp eq i64 %826, 14
  br i1 %827, label %828, label %831

828:                                              ; preds = %824
  %829 = call i32 @vector_type_mode(ptr noundef nonnull %818) #24
  %830 = load ptr, ptr %653, align 8, !tbaa !17
  br label %836

831:                                              ; preds = %824
  %832 = getelementptr inbounds %struct.tree_type, ptr %818, i64 0, i32 6
  %833 = load i32, ptr %832, align 4
  %834 = lshr i32 %833, 16
  %835 = and i32 %834, 255
  br label %836

836:                                              ; preds = %831, %828
  %837 = phi ptr [ %830, %828 ], [ %818, %831 ]
  %838 = phi i32 [ %829, %828 ], [ %835, %831 ]
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %839
  %841 = load i8, ptr %840, align 1, !tbaa !17
  %842 = icmp eq i8 %841, 9
  br i1 %842, label %843, label %855

843:                                              ; preds = %836, %817
  %844 = phi ptr [ %837, %836 ], [ %818, %817 ]
  %845 = load i64, ptr %844, align 8
  %846 = and i64 %845, 65535
  %847 = icmp eq i64 %846, 14
  br i1 %847, label %848, label %850

848:                                              ; preds = %843
  %849 = call i32 @vector_type_mode(ptr noundef nonnull %844) #24
  br label %936

850:                                              ; preds = %843
  %851 = getelementptr inbounds %struct.tree_type, ptr %844, i64 0, i32 6
  %852 = load i32, ptr %851, align 4
  %853 = lshr i32 %852, 16
  %854 = and i32 %853, 255
  br label %936

855:                                              ; preds = %836
  %856 = load i64, ptr %837, align 8
  %857 = and i64 %856, 65535
  %858 = icmp eq i64 %857, 14
  br i1 %858, label %859, label %861

859:                                              ; preds = %855
  %860 = call i32 @vector_type_mode(ptr noundef nonnull %837) #24
  br label %866

861:                                              ; preds = %855
  %862 = getelementptr inbounds %struct.tree_type, ptr %837, i64 0, i32 6
  %863 = load i32, ptr %862, align 4
  %864 = lshr i32 %863, 16
  %865 = and i32 %864, 255
  br label %866

866:                                              ; preds = %861, %859
  %867 = phi i32 [ %860, %859 ], [ %865, %861 ]
  %868 = zext i32 %867 to i64
  %869 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %868
  %870 = load i8, ptr %869, align 1, !tbaa !17
  %871 = zext i8 %870 to i32
  br label %936

872:                                              ; preds = %798
  br i1 %807, label %873, label %876

873:                                              ; preds = %872
  %874 = call i32 @vector_type_mode(ptr noundef nonnull %804) #24
  %875 = load ptr, ptr %653, align 8, !tbaa !17
  br label %881

876:                                              ; preds = %872
  %877 = getelementptr inbounds %struct.tree_type, ptr %804, i64 0, i32 6
  %878 = load i32, ptr %877, align 4
  %879 = lshr i32 %878, 16
  %880 = and i32 %879, 255
  br label %881

881:                                              ; preds = %876, %873
  %882 = phi ptr [ %875, %873 ], [ %804, %876 ]
  %883 = phi i32 [ %874, %873 ], [ %880, %876 ]
  %884 = zext i32 %883 to i64
  %885 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %884
  %886 = load i8, ptr %885, align 1, !tbaa !17
  %887 = icmp eq i8 %886, 8
  br i1 %887, label %907, label %888

888:                                              ; preds = %881
  %889 = load i64, ptr %882, align 8
  %890 = and i64 %889, 65535
  %891 = icmp eq i64 %890, 14
  br i1 %891, label %892, label %895

892:                                              ; preds = %888
  %893 = call i32 @vector_type_mode(ptr noundef nonnull %882) #24
  %894 = load ptr, ptr %653, align 8, !tbaa !17
  br label %900

895:                                              ; preds = %888
  %896 = getelementptr inbounds %struct.tree_type, ptr %882, i64 0, i32 6
  %897 = load i32, ptr %896, align 4
  %898 = lshr i32 %897, 16
  %899 = and i32 %898, 255
  br label %900

900:                                              ; preds = %895, %892
  %901 = phi ptr [ %894, %892 ], [ %882, %895 ]
  %902 = phi i32 [ %893, %892 ], [ %899, %895 ]
  %903 = zext i32 %902 to i64
  %904 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %903
  %905 = load i8, ptr %904, align 1, !tbaa !17
  %906 = icmp eq i8 %905, 9
  br i1 %906, label %907, label %919

907:                                              ; preds = %900, %881
  %908 = phi ptr [ %901, %900 ], [ %882, %881 ]
  %909 = load i64, ptr %908, align 8
  %910 = and i64 %909, 65535
  %911 = icmp eq i64 %910, 14
  br i1 %911, label %912, label %914

912:                                              ; preds = %907
  %913 = call i32 @vector_type_mode(ptr noundef nonnull %908) #24
  br label %936

914:                                              ; preds = %907
  %915 = getelementptr inbounds %struct.tree_type, ptr %908, i64 0, i32 6
  %916 = load i32, ptr %915, align 4
  %917 = lshr i32 %916, 16
  %918 = and i32 %917, 255
  br label %936

919:                                              ; preds = %900
  %920 = load i64, ptr %901, align 8
  %921 = and i64 %920, 65535
  %922 = icmp eq i64 %921, 14
  br i1 %922, label %923, label %925

923:                                              ; preds = %919
  %924 = call i32 @vector_type_mode(ptr noundef nonnull %901) #24
  br label %930

925:                                              ; preds = %919
  %926 = getelementptr inbounds %struct.tree_type, ptr %901, i64 0, i32 6
  %927 = load i32, ptr %926, align 4
  %928 = lshr i32 %927, 16
  %929 = and i32 %928, 255
  br label %930

930:                                              ; preds = %925, %923
  %931 = phi i32 [ %924, %923 ], [ %929, %925 ]
  %932 = zext i32 %931 to i64
  %933 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %932
  %934 = load i8, ptr %933, align 1, !tbaa !17
  %935 = zext i8 %934 to i32
  br label %936

936:                                              ; preds = %930, %914, %912, %866, %850, %848
  %937 = phi i32 [ %871, %866 ], [ %849, %848 ], [ %854, %850 ], [ %935, %930 ], [ %913, %912 ], [ %918, %914 ]
  %938 = add i32 %937, -38
  %939 = zext i32 %938 to i64
  %940 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %939
  %941 = load ptr, ptr %940, align 8, !tbaa !6
  %942 = getelementptr inbounds %struct.real_format, ptr %941, i64 0, i32 11
  %943 = load i8, ptr %942, align 2, !tbaa !36
  %944 = icmp eq i8 %943, 0
  %945 = load i32, ptr @flag_finite_math_only, align 4
  %946 = icmp ne i32 %945, 0
  %947 = select i1 %944, i1 true, i1 %946
  br i1 %947, label %948, label %954

948:                                              ; preds = %936, %722, %649
  %949 = icmp eq i32 %1, 102
  %950 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %951 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %952 = select i1 %949, ptr %950, ptr %951
  %953 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %952, ptr noundef nonnull %20)
  br label %1253

954:                                              ; preds = %936, %646
  %955 = call zeroext i8 @real_isinf(ptr noundef nonnull %15) #24
  %956 = icmp eq i8 %955, 0
  br i1 %956, label %1255, label %957

957:                                              ; preds = %954
  %958 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %959 = load ptr, ptr %958, align 8, !tbaa !17
  %960 = load i64, ptr %959, align 8
  %961 = and i64 %960, 65535
  %962 = icmp eq i64 %961, 14
  br i1 %962, label %963, label %966

963:                                              ; preds = %957
  %964 = call i32 @vector_type_mode(ptr noundef nonnull %959) #24
  %965 = load ptr, ptr %958, align 8, !tbaa !17
  br label %971

966:                                              ; preds = %957
  %967 = getelementptr inbounds %struct.tree_type, ptr %959, i64 0, i32 6
  %968 = load i32, ptr %967, align 4
  %969 = lshr i32 %968, 16
  %970 = and i32 %969, 255
  br label %971

971:                                              ; preds = %966, %963
  %972 = phi ptr [ %965, %963 ], [ %959, %966 ]
  %973 = phi i32 [ %964, %963 ], [ %970, %966 ]
  %974 = zext i32 %973 to i64
  %975 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %974
  %976 = load i8, ptr %975, align 1, !tbaa !17
  %977 = icmp eq i8 %976, 8
  br i1 %977, label %1035, label %978

978:                                              ; preds = %971
  %979 = load i64, ptr %972, align 8
  %980 = and i64 %979, 65535
  %981 = icmp eq i64 %980, 14
  br i1 %981, label %982, label %985

982:                                              ; preds = %978
  %983 = call i32 @vector_type_mode(ptr noundef nonnull %972) #24
  %984 = load ptr, ptr %958, align 8, !tbaa !17
  br label %990

985:                                              ; preds = %978
  %986 = getelementptr inbounds %struct.tree_type, ptr %972, i64 0, i32 6
  %987 = load i32, ptr %986, align 4
  %988 = lshr i32 %987, 16
  %989 = and i32 %988, 255
  br label %990

990:                                              ; preds = %985, %982
  %991 = phi ptr [ %984, %982 ], [ %972, %985 ]
  %992 = phi i32 [ %983, %982 ], [ %989, %985 ]
  %993 = zext i32 %992 to i64
  %994 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %993
  %995 = load i8, ptr %994, align 1, !tbaa !17
  %996 = icmp eq i8 %995, 9
  br i1 %996, label %1035, label %997

997:                                              ; preds = %990
  %998 = load i64, ptr %991, align 8
  %999 = and i64 %998, 65535
  %1000 = icmp eq i64 %999, 14
  br i1 %1000, label %1001, label %1004

1001:                                             ; preds = %997
  %1002 = call i32 @vector_type_mode(ptr noundef nonnull %991) #24
  %1003 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1009

1004:                                             ; preds = %997
  %1005 = getelementptr inbounds %struct.tree_type, ptr %991, i64 0, i32 6
  %1006 = load i32, ptr %1005, align 4
  %1007 = lshr i32 %1006, 16
  %1008 = and i32 %1007, 255
  br label %1009

1009:                                             ; preds = %1004, %1001
  %1010 = phi ptr [ %1003, %1001 ], [ %991, %1004 ]
  %1011 = phi i32 [ %1002, %1001 ], [ %1008, %1004 ]
  %1012 = zext i32 %1011 to i64
  %1013 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1012
  %1014 = load i8, ptr %1013, align 1, !tbaa !17
  %1015 = icmp eq i8 %1014, 11
  br i1 %1015, label %1035, label %1016

1016:                                             ; preds = %1009
  %1017 = load i64, ptr %1010, align 8
  %1018 = and i64 %1017, 65535
  %1019 = icmp eq i64 %1018, 14
  br i1 %1019, label %1020, label %1022

1020:                                             ; preds = %1016
  %1021 = call i32 @vector_type_mode(ptr noundef nonnull %1010) #24
  br label %1027

1022:                                             ; preds = %1016
  %1023 = getelementptr inbounds %struct.tree_type, ptr %1010, i64 0, i32 6
  %1024 = load i32, ptr %1023, align 4
  %1025 = lshr i32 %1024, 16
  %1026 = and i32 %1025, 255
  br label %1027

1027:                                             ; preds = %1022, %1020
  %1028 = phi i32 [ %1021, %1020 ], [ %1026, %1022 ]
  %1029 = zext i32 %1028 to i64
  %1030 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1029
  %1031 = load i8, ptr %1030, align 1, !tbaa !17
  %1032 = icmp eq i8 %1031, 17
  br i1 %1032, label %1033, label %1255

1033:                                             ; preds = %1027
  %1034 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1035

1035:                                             ; preds = %1033, %1009, %990, %971
  %1036 = phi ptr [ %1034, %1033 ], [ %1010, %1009 ], [ %991, %990 ], [ %972, %971 ]
  %1037 = load i64, ptr %1036, align 8
  %1038 = and i64 %1037, 65535
  %1039 = icmp eq i64 %1038, 14
  br i1 %1039, label %1040, label %1043

1040:                                             ; preds = %1035
  %1041 = call i32 @vector_type_mode(ptr noundef nonnull %1036) #24
  %1042 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1048

1043:                                             ; preds = %1035
  %1044 = getelementptr inbounds %struct.tree_type, ptr %1036, i64 0, i32 6
  %1045 = load i32, ptr %1044, align 4
  %1046 = lshr i32 %1045, 16
  %1047 = and i32 %1046, 255
  br label %1048

1048:                                             ; preds = %1043, %1040
  %1049 = phi ptr [ %1042, %1040 ], [ %1036, %1043 ]
  %1050 = phi i32 [ %1041, %1040 ], [ %1047, %1043 ]
  %1051 = zext i32 %1050 to i64
  %1052 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1051
  %1053 = load i8, ptr %1052, align 1, !tbaa !17
  %1054 = icmp eq i8 %1053, 8
  br i1 %1054, label %1074, label %1055

1055:                                             ; preds = %1048
  %1056 = load i64, ptr %1049, align 8
  %1057 = and i64 %1056, 65535
  %1058 = icmp eq i64 %1057, 14
  br i1 %1058, label %1059, label %1062

1059:                                             ; preds = %1055
  %1060 = call i32 @vector_type_mode(ptr noundef nonnull %1049) #24
  %1061 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1067

1062:                                             ; preds = %1055
  %1063 = getelementptr inbounds %struct.tree_type, ptr %1049, i64 0, i32 6
  %1064 = load i32, ptr %1063, align 4
  %1065 = lshr i32 %1064, 16
  %1066 = and i32 %1065, 255
  br label %1067

1067:                                             ; preds = %1062, %1059
  %1068 = phi ptr [ %1061, %1059 ], [ %1049, %1062 ]
  %1069 = phi i32 [ %1060, %1059 ], [ %1066, %1062 ]
  %1070 = zext i32 %1069 to i64
  %1071 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1070
  %1072 = load i8, ptr %1071, align 1, !tbaa !17
  %1073 = icmp eq i8 %1072, 9
  br i1 %1073, label %1074, label %1086

1074:                                             ; preds = %1067, %1048
  %1075 = phi ptr [ %1068, %1067 ], [ %1049, %1048 ]
  %1076 = load i64, ptr %1075, align 8
  %1077 = and i64 %1076, 65535
  %1078 = icmp eq i64 %1077, 14
  br i1 %1078, label %1079, label %1081

1079:                                             ; preds = %1074
  %1080 = call i32 @vector_type_mode(ptr noundef nonnull %1075) #24
  br label %1103

1081:                                             ; preds = %1074
  %1082 = getelementptr inbounds %struct.tree_type, ptr %1075, i64 0, i32 6
  %1083 = load i32, ptr %1082, align 4
  %1084 = lshr i32 %1083, 16
  %1085 = and i32 %1084, 255
  br label %1103

1086:                                             ; preds = %1067
  %1087 = load i64, ptr %1068, align 8
  %1088 = and i64 %1087, 65535
  %1089 = icmp eq i64 %1088, 14
  br i1 %1089, label %1090, label %1092

1090:                                             ; preds = %1086
  %1091 = call i32 @vector_type_mode(ptr noundef nonnull %1068) #24
  br label %1097

1092:                                             ; preds = %1086
  %1093 = getelementptr inbounds %struct.tree_type, ptr %1068, i64 0, i32 6
  %1094 = load i32, ptr %1093, align 4
  %1095 = lshr i32 %1094, 16
  %1096 = and i32 %1095, 255
  br label %1097

1097:                                             ; preds = %1092, %1090
  %1098 = phi i32 [ %1091, %1090 ], [ %1096, %1092 ]
  %1099 = zext i32 %1098 to i64
  %1100 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1099
  %1101 = load i8, ptr %1100, align 1, !tbaa !17
  %1102 = zext i8 %1101 to i32
  br label %1103

1103:                                             ; preds = %1079, %1081, %1097
  %1104 = phi i32 [ %1102, %1097 ], [ %1080, %1079 ], [ %1085, %1081 ]
  %1105 = zext i32 %1104 to i64
  %1106 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1105
  %1107 = load i8, ptr %1106, align 1, !tbaa !17
  %1108 = icmp eq i8 %1107, 9
  %1109 = load ptr, ptr %958, align 8, !tbaa !17
  %1110 = load i64, ptr %1109, align 8
  %1111 = and i64 %1110, 65535
  %1112 = icmp eq i64 %1111, 14
  br i1 %1108, label %1113, label %1177

1113:                                             ; preds = %1103
  br i1 %1112, label %1114, label %1117

1114:                                             ; preds = %1113
  %1115 = call i32 @vector_type_mode(ptr noundef nonnull %1109) #24
  %1116 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1122

1117:                                             ; preds = %1113
  %1118 = getelementptr inbounds %struct.tree_type, ptr %1109, i64 0, i32 6
  %1119 = load i32, ptr %1118, align 4
  %1120 = lshr i32 %1119, 16
  %1121 = and i32 %1120, 255
  br label %1122

1122:                                             ; preds = %1117, %1114
  %1123 = phi ptr [ %1116, %1114 ], [ %1109, %1117 ]
  %1124 = phi i32 [ %1115, %1114 ], [ %1121, %1117 ]
  %1125 = zext i32 %1124 to i64
  %1126 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1125
  %1127 = load i8, ptr %1126, align 1, !tbaa !17
  %1128 = icmp eq i8 %1127, 8
  br i1 %1128, label %1148, label %1129

1129:                                             ; preds = %1122
  %1130 = load i64, ptr %1123, align 8
  %1131 = and i64 %1130, 65535
  %1132 = icmp eq i64 %1131, 14
  br i1 %1132, label %1133, label %1136

1133:                                             ; preds = %1129
  %1134 = call i32 @vector_type_mode(ptr noundef nonnull %1123) #24
  %1135 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1141

1136:                                             ; preds = %1129
  %1137 = getelementptr inbounds %struct.tree_type, ptr %1123, i64 0, i32 6
  %1138 = load i32, ptr %1137, align 4
  %1139 = lshr i32 %1138, 16
  %1140 = and i32 %1139, 255
  br label %1141

1141:                                             ; preds = %1136, %1133
  %1142 = phi ptr [ %1135, %1133 ], [ %1123, %1136 ]
  %1143 = phi i32 [ %1134, %1133 ], [ %1140, %1136 ]
  %1144 = zext i32 %1143 to i64
  %1145 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1144
  %1146 = load i8, ptr %1145, align 1, !tbaa !17
  %1147 = icmp eq i8 %1146, 9
  br i1 %1147, label %1148, label %1160

1148:                                             ; preds = %1141, %1122
  %1149 = phi ptr [ %1142, %1141 ], [ %1123, %1122 ]
  %1150 = load i64, ptr %1149, align 8
  %1151 = and i64 %1150, 65535
  %1152 = icmp eq i64 %1151, 14
  br i1 %1152, label %1153, label %1155

1153:                                             ; preds = %1148
  %1154 = call i32 @vector_type_mode(ptr noundef nonnull %1149) #24
  br label %1241

1155:                                             ; preds = %1148
  %1156 = getelementptr inbounds %struct.tree_type, ptr %1149, i64 0, i32 6
  %1157 = load i32, ptr %1156, align 4
  %1158 = lshr i32 %1157, 16
  %1159 = and i32 %1158, 255
  br label %1241

1160:                                             ; preds = %1141
  %1161 = load i64, ptr %1142, align 8
  %1162 = and i64 %1161, 65535
  %1163 = icmp eq i64 %1162, 14
  br i1 %1163, label %1164, label %1166

1164:                                             ; preds = %1160
  %1165 = call i32 @vector_type_mode(ptr noundef nonnull %1142) #24
  br label %1171

1166:                                             ; preds = %1160
  %1167 = getelementptr inbounds %struct.tree_type, ptr %1142, i64 0, i32 6
  %1168 = load i32, ptr %1167, align 4
  %1169 = lshr i32 %1168, 16
  %1170 = and i32 %1169, 255
  br label %1171

1171:                                             ; preds = %1166, %1164
  %1172 = phi i32 [ %1165, %1164 ], [ %1170, %1166 ]
  %1173 = zext i32 %1172 to i64
  %1174 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1173
  %1175 = load i8, ptr %1174, align 1, !tbaa !17
  %1176 = zext i8 %1175 to i32
  br label %1241

1177:                                             ; preds = %1103
  br i1 %1112, label %1178, label %1181

1178:                                             ; preds = %1177
  %1179 = call i32 @vector_type_mode(ptr noundef nonnull %1109) #24
  %1180 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1186

1181:                                             ; preds = %1177
  %1182 = getelementptr inbounds %struct.tree_type, ptr %1109, i64 0, i32 6
  %1183 = load i32, ptr %1182, align 4
  %1184 = lshr i32 %1183, 16
  %1185 = and i32 %1184, 255
  br label %1186

1186:                                             ; preds = %1181, %1178
  %1187 = phi ptr [ %1180, %1178 ], [ %1109, %1181 ]
  %1188 = phi i32 [ %1179, %1178 ], [ %1185, %1181 ]
  %1189 = zext i32 %1188 to i64
  %1190 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1189
  %1191 = load i8, ptr %1190, align 1, !tbaa !17
  %1192 = icmp eq i8 %1191, 8
  br i1 %1192, label %1212, label %1193

1193:                                             ; preds = %1186
  %1194 = load i64, ptr %1187, align 8
  %1195 = and i64 %1194, 65535
  %1196 = icmp eq i64 %1195, 14
  br i1 %1196, label %1197, label %1200

1197:                                             ; preds = %1193
  %1198 = call i32 @vector_type_mode(ptr noundef nonnull %1187) #24
  %1199 = load ptr, ptr %958, align 8, !tbaa !17
  br label %1205

1200:                                             ; preds = %1193
  %1201 = getelementptr inbounds %struct.tree_type, ptr %1187, i64 0, i32 6
  %1202 = load i32, ptr %1201, align 4
  %1203 = lshr i32 %1202, 16
  %1204 = and i32 %1203, 255
  br label %1205

1205:                                             ; preds = %1200, %1197
  %1206 = phi ptr [ %1199, %1197 ], [ %1187, %1200 ]
  %1207 = phi i32 [ %1198, %1197 ], [ %1204, %1200 ]
  %1208 = zext i32 %1207 to i64
  %1209 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1208
  %1210 = load i8, ptr %1209, align 1, !tbaa !17
  %1211 = icmp eq i8 %1210, 9
  br i1 %1211, label %1212, label %1224

1212:                                             ; preds = %1205, %1186
  %1213 = phi ptr [ %1206, %1205 ], [ %1187, %1186 ]
  %1214 = load i64, ptr %1213, align 8
  %1215 = and i64 %1214, 65535
  %1216 = icmp eq i64 %1215, 14
  br i1 %1216, label %1217, label %1219

1217:                                             ; preds = %1212
  %1218 = call i32 @vector_type_mode(ptr noundef nonnull %1213) #24
  br label %1241

1219:                                             ; preds = %1212
  %1220 = getelementptr inbounds %struct.tree_type, ptr %1213, i64 0, i32 6
  %1221 = load i32, ptr %1220, align 4
  %1222 = lshr i32 %1221, 16
  %1223 = and i32 %1222, 255
  br label %1241

1224:                                             ; preds = %1205
  %1225 = load i64, ptr %1206, align 8
  %1226 = and i64 %1225, 65535
  %1227 = icmp eq i64 %1226, 14
  br i1 %1227, label %1228, label %1230

1228:                                             ; preds = %1224
  %1229 = call i32 @vector_type_mode(ptr noundef nonnull %1206) #24
  br label %1235

1230:                                             ; preds = %1224
  %1231 = getelementptr inbounds %struct.tree_type, ptr %1206, i64 0, i32 6
  %1232 = load i32, ptr %1231, align 4
  %1233 = lshr i32 %1232, 16
  %1234 = and i32 %1233, 255
  br label %1235

1235:                                             ; preds = %1230, %1228
  %1236 = phi i32 [ %1229, %1228 ], [ %1234, %1230 ]
  %1237 = zext i32 %1236 to i64
  %1238 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1237
  %1239 = load i8, ptr %1238, align 1, !tbaa !17
  %1240 = zext i8 %1239 to i32
  br label %1241

1241:                                             ; preds = %1235, %1219, %1217, %1171, %1155, %1153
  %1242 = phi i32 [ %1176, %1171 ], [ %1154, %1153 ], [ %1159, %1155 ], [ %1240, %1235 ], [ %1218, %1217 ], [ %1223, %1219 ]
  %1243 = add i32 %1242, -38
  %1244 = zext i32 %1243 to i64
  %1245 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1244
  %1246 = load ptr, ptr %1245, align 8, !tbaa !6
  %1247 = getelementptr inbounds %struct.real_format, ptr %1246, i64 0, i32 12
  %1248 = load i8, ptr %1247, align 1, !tbaa !34
  %1249 = icmp eq i8 %1248, 0
  br i1 %1249, label %1255, label %1250

1250:                                             ; preds = %1241
  %1251 = call fastcc ptr @fold_inf_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef nonnull %21)
  %1252 = icmp eq ptr %1251, null
  br i1 %1252, label %1255, label %1253

1253:                                             ; preds = %630, %641, %948, %1250
  %1254 = phi ptr [ %1251, %1250 ], [ %953, %948 ], [ %645, %641 ], [ %637, %630 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15) #24
  br label %2454

1255:                                             ; preds = %954, %1027, %1241, %1250
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %15) #24
  br label %1256

1256:                                             ; preds = %1255, %622
  %1257 = load i32, ptr @flag_unsafe_math_optimizations, align 4, !tbaa !21
  %1258 = icmp eq i32 %1257, 0
  br i1 %1258, label %1289, label %1259

1259:                                             ; preds = %1256
  %1260 = load i64, ptr %21, align 8
  %1261 = and i64 %1260, 65535
  %1262 = icmp eq i64 %1261, 24
  br i1 %1262, label %1263, label %1289

1263:                                             ; preds = %1259
  %1264 = load i64, ptr %20, align 8
  %1265 = trunc i64 %1264 to i32
  %1266 = and i32 %1265, 65535
  %1267 = add nsw i32 %1266, -63
  %1268 = icmp ult i32 %1267, 2
  br i1 %1268, label %1269, label %1289

1269:                                             ; preds = %1263
  %1270 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %1271 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %1272 = load ptr, ptr %1271, align 8, !tbaa !17
  %1273 = load i64, ptr %1272, align 8
  %1274 = and i64 %1273, 65535
  %1275 = icmp eq i64 %1274, 24
  br i1 %1275, label %1276, label %1289

1276:                                             ; preds = %1269
  %1277 = and i64 %1264, 65535
  %1278 = icmp eq i64 %1277, 63
  %1279 = select i1 %1278, i32 64, i32 63
  %1280 = call fastcc ptr @const_binop(i32 noundef %1279, ptr noundef nonnull %21, ptr noundef nonnull %1272)
  %1281 = icmp eq ptr %1280, null
  br i1 %1281, label %1289, label %1282

1282:                                             ; preds = %1276
  %1283 = load i64, ptr %1280, align 8
  %1284 = and i64 %1283, 134217728
  %1285 = icmp eq i64 %1284, 0
  br i1 %1285, label %1286, label %1289

1286:                                             ; preds = %1282
  %1287 = load ptr, ptr %1270, align 8, !tbaa !17
  %1288 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %1287, ptr noundef nonnull %1280)
  br label %2454

1289:                                             ; preds = %1263, %1282, %1276, %1269, %1259, %1256
  %1290 = load i32, ptr @flag_associative_math, align 4, !tbaa !21
  %1291 = icmp eq i32 %1290, 0
  br i1 %1291, label %1318, label %1292

1292:                                             ; preds = %1289
  %1293 = load i64, ptr %21, align 8
  %1294 = and i64 %1293, 65535
  %1295 = icmp eq i64 %1294, 24
  br i1 %1295, label %1296, label %1318

1296:                                             ; preds = %1292
  %1297 = load i64, ptr %20, align 8
  %1298 = and i64 %1297, 65535
  %1299 = icmp eq i64 %1298, 64
  br i1 %1299, label %1300, label %1318

1300:                                             ; preds = %1296
  %1301 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %1302 = load ptr, ptr %1301, align 8, !tbaa !17
  %1303 = load i64, ptr %1302, align 8
  %1304 = and i64 %1303, 65535
  %1305 = icmp eq i64 %1304, 24
  br i1 %1305, label %1306, label %1318

1306:                                             ; preds = %1300
  %1307 = call fastcc ptr @const_binop(i32 noundef 64, ptr noundef nonnull %1302, ptr noundef nonnull %21)
  %1308 = icmp eq ptr %1307, null
  br i1 %1308, label %1318, label %1309

1309:                                             ; preds = %1306
  %1310 = load i64, ptr %1307, align 8
  %1311 = and i64 %1310, 134217728
  %1312 = icmp eq i64 %1311, 0
  br i1 %1312, label %1313, label %1318

1313:                                             ; preds = %1309
  %1314 = call i32 @swap_tree_comparison(i32 noundef %1)
  %1315 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %1316 = load ptr, ptr %1315, align 8, !tbaa !17
  %1317 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1314, ptr noundef %2, ptr noundef %1316, ptr noundef nonnull %1307)
  br label %2454

1318:                                             ; preds = %1309, %1306, %1300, %1296, %1292, %1289
  %1319 = load i64, ptr %21, align 8
  %1320 = and i64 %1319, 65535
  %1321 = icmp ne i64 %1320, 24
  %1322 = load i32, ptr @flag_unsafe_math_optimizations, align 4
  %1323 = icmp eq i32 %1322, 0
  %1324 = select i1 %1321, i1 true, i1 %1323
  %1325 = load i32, ptr @flag_errno_math, align 4
  %1326 = icmp ne i32 %1325, 0
  %1327 = select i1 %1324, i1 true, i1 %1326
  br i1 %1327, label %1334, label %1328

1328:                                             ; preds = %1318
  %1329 = call i32 @builtin_mathfn_code(ptr noundef nonnull %20) #24
  %1330 = icmp eq i32 %1329, 721
  br i1 %1330, label %1334, label %1331

1331:                                             ; preds = %1328
  %1332 = call fastcc ptr @fold_mathfn_compare(i32 noundef %0, i32 noundef %1329, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef nonnull %21)
  %1333 = icmp eq ptr %1332, null
  br i1 %1333, label %1334, label %2454

1334:                                             ; preds = %1331, %1328, %1318, %571, %575
  %1335 = load ptr, ptr %119, align 8, !tbaa !17
  %1336 = load i64, ptr %1335, align 8
  %1337 = and i64 %1336, 65535
  %1338 = icmp eq i64 %1337, 8
  br i1 %1338, label %1339, label %1348

1339:                                             ; preds = %1334
  %1340 = load i64, ptr %20, align 8
  %1341 = trunc i64 %1340 to i16
  switch i16 %1341, label %1348 [
    i16 116, label %1342
    i16 113, label %1342
  ]

1342:                                             ; preds = %1339, %1339
  %1343 = call fastcc ptr @fold_widened_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef %21)
  %1344 = icmp eq ptr %1343, null
  br i1 %1344, label %1345, label %2454

1345:                                             ; preds = %1342
  %1346 = call fastcc ptr @fold_sign_changed_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef %21)
  %1347 = icmp eq ptr %1346, null
  br i1 %1347, label %1348, label %2454

1348:                                             ; preds = %1339, %1345, %1334
  %1349 = load i64, ptr %21, align 8
  %1350 = and i64 %1349, 65535
  %1351 = icmp eq i64 %1350, 23
  br i1 %1351, label %1352, label %1365

1352:                                             ; preds = %1348
  %1353 = load i64, ptr %20, align 8
  %1354 = and i64 %1353, 65534
  %1355 = icmp eq i64 %1354, 80
  br i1 %1355, label %1356, label %1365

1356:                                             ; preds = %1352
  %1357 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %1358 = load ptr, ptr %1357, align 8, !tbaa !17
  %1359 = load i64, ptr %1358, align 8
  %1360 = and i64 %1359, 65535
  %1361 = icmp eq i64 %1360, 23
  br i1 %1361, label %1362, label %1365

1362:                                             ; preds = %1356
  %1363 = call fastcc ptr @optimize_minmax_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %1364 = icmp eq ptr %1363, null
  br i1 %1364, label %1365, label %2454

1365:                                             ; preds = %1352, %1362, %1356, %1348
  %1366 = call i32 @operand_equal_p(ptr noundef nonnull %20, ptr noundef nonnull %21, i32 noundef 0)
  %1367 = icmp eq i32 %1366, 0
  br i1 %1367, label %2287, label %1368

1368:                                             ; preds = %1365
  switch i32 %1, label %2286 [
    i32 101, label %1369
    i32 100, label %1674
    i32 98, label %1674
    i32 102, label %1981
    i32 99, label %2284
    i32 97, label %2284
  ]

1369:                                             ; preds = %1368
  %1370 = load ptr, ptr %119, align 8, !tbaa !17
  %1371 = load i64, ptr %1370, align 8
  %1372 = trunc i64 %1371 to i16
  switch i16 %1372, label %1672 [
    i16 9, label %1379
    i16 13, label %1373
    i16 14, label %1373
  ]

1373:                                             ; preds = %1369, %1369
  %1374 = getelementptr inbounds %struct.tree_common, ptr %1370, i64 0, i32 2
  %1375 = load ptr, ptr %1374, align 8, !tbaa !17
  %1376 = load i64, ptr %1375, align 8
  %1377 = and i64 %1376, 65535
  %1378 = icmp eq i64 %1377, 9
  br i1 %1378, label %1379, label %1672

1379:                                             ; preds = %1369, %1373
  %1380 = and i64 %1371, 65535
  %1381 = icmp eq i64 %1380, 14
  br i1 %1381, label %1382, label %1385

1382:                                             ; preds = %1379
  %1383 = call i32 @vector_type_mode(ptr noundef nonnull %1370) #24
  %1384 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1390

1385:                                             ; preds = %1379
  %1386 = getelementptr inbounds %struct.tree_type, ptr %1370, i64 0, i32 6
  %1387 = load i32, ptr %1386, align 4
  %1388 = lshr i32 %1387, 16
  %1389 = and i32 %1388, 255
  br label %1390

1390:                                             ; preds = %1385, %1382
  %1391 = phi ptr [ %1384, %1382 ], [ %1370, %1385 ]
  %1392 = phi i32 [ %1383, %1382 ], [ %1389, %1385 ]
  %1393 = zext i32 %1392 to i64
  %1394 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1393
  %1395 = load i8, ptr %1394, align 1, !tbaa !17
  %1396 = icmp eq i8 %1395, 8
  br i1 %1396, label %1454, label %1397

1397:                                             ; preds = %1390
  %1398 = load i64, ptr %1391, align 8
  %1399 = and i64 %1398, 65535
  %1400 = icmp eq i64 %1399, 14
  br i1 %1400, label %1401, label %1404

1401:                                             ; preds = %1397
  %1402 = call i32 @vector_type_mode(ptr noundef nonnull %1391) #24
  %1403 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1409

1404:                                             ; preds = %1397
  %1405 = getelementptr inbounds %struct.tree_type, ptr %1391, i64 0, i32 6
  %1406 = load i32, ptr %1405, align 4
  %1407 = lshr i32 %1406, 16
  %1408 = and i32 %1407, 255
  br label %1409

1409:                                             ; preds = %1404, %1401
  %1410 = phi ptr [ %1403, %1401 ], [ %1391, %1404 ]
  %1411 = phi i32 [ %1402, %1401 ], [ %1408, %1404 ]
  %1412 = zext i32 %1411 to i64
  %1413 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1412
  %1414 = load i8, ptr %1413, align 1, !tbaa !17
  %1415 = icmp eq i8 %1414, 9
  br i1 %1415, label %1454, label %1416

1416:                                             ; preds = %1409
  %1417 = load i64, ptr %1410, align 8
  %1418 = and i64 %1417, 65535
  %1419 = icmp eq i64 %1418, 14
  br i1 %1419, label %1420, label %1423

1420:                                             ; preds = %1416
  %1421 = call i32 @vector_type_mode(ptr noundef nonnull %1410) #24
  %1422 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1428

1423:                                             ; preds = %1416
  %1424 = getelementptr inbounds %struct.tree_type, ptr %1410, i64 0, i32 6
  %1425 = load i32, ptr %1424, align 4
  %1426 = lshr i32 %1425, 16
  %1427 = and i32 %1426, 255
  br label %1428

1428:                                             ; preds = %1423, %1420
  %1429 = phi ptr [ %1422, %1420 ], [ %1410, %1423 ]
  %1430 = phi i32 [ %1421, %1420 ], [ %1427, %1423 ]
  %1431 = zext i32 %1430 to i64
  %1432 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1431
  %1433 = load i8, ptr %1432, align 1, !tbaa !17
  %1434 = icmp eq i8 %1433, 11
  br i1 %1434, label %1454, label %1435

1435:                                             ; preds = %1428
  %1436 = load i64, ptr %1429, align 8
  %1437 = and i64 %1436, 65535
  %1438 = icmp eq i64 %1437, 14
  br i1 %1438, label %1439, label %1441

1439:                                             ; preds = %1435
  %1440 = call i32 @vector_type_mode(ptr noundef nonnull %1429) #24
  br label %1446

1441:                                             ; preds = %1435
  %1442 = getelementptr inbounds %struct.tree_type, ptr %1429, i64 0, i32 6
  %1443 = load i32, ptr %1442, align 4
  %1444 = lshr i32 %1443, 16
  %1445 = and i32 %1444, 255
  br label %1446

1446:                                             ; preds = %1441, %1439
  %1447 = phi i32 [ %1440, %1439 ], [ %1445, %1441 ]
  %1448 = zext i32 %1447 to i64
  %1449 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1448
  %1450 = load i8, ptr %1449, align 1, !tbaa !17
  %1451 = icmp eq i8 %1450, 17
  br i1 %1451, label %1452, label %1672

1452:                                             ; preds = %1446
  %1453 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1454

1454:                                             ; preds = %1452, %1428, %1409, %1390
  %1455 = phi ptr [ %1453, %1452 ], [ %1429, %1428 ], [ %1410, %1409 ], [ %1391, %1390 ]
  %1456 = load i64, ptr %1455, align 8
  %1457 = and i64 %1456, 65535
  %1458 = icmp eq i64 %1457, 14
  br i1 %1458, label %1459, label %1462

1459:                                             ; preds = %1454
  %1460 = call i32 @vector_type_mode(ptr noundef nonnull %1455) #24
  %1461 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1467

1462:                                             ; preds = %1454
  %1463 = getelementptr inbounds %struct.tree_type, ptr %1455, i64 0, i32 6
  %1464 = load i32, ptr %1463, align 4
  %1465 = lshr i32 %1464, 16
  %1466 = and i32 %1465, 255
  br label %1467

1467:                                             ; preds = %1462, %1459
  %1468 = phi ptr [ %1461, %1459 ], [ %1455, %1462 ]
  %1469 = phi i32 [ %1460, %1459 ], [ %1466, %1462 ]
  %1470 = zext i32 %1469 to i64
  %1471 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1470
  %1472 = load i8, ptr %1471, align 1, !tbaa !17
  %1473 = icmp eq i8 %1472, 8
  br i1 %1473, label %1493, label %1474

1474:                                             ; preds = %1467
  %1475 = load i64, ptr %1468, align 8
  %1476 = and i64 %1475, 65535
  %1477 = icmp eq i64 %1476, 14
  br i1 %1477, label %1478, label %1481

1478:                                             ; preds = %1474
  %1479 = call i32 @vector_type_mode(ptr noundef nonnull %1468) #24
  %1480 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1486

1481:                                             ; preds = %1474
  %1482 = getelementptr inbounds %struct.tree_type, ptr %1468, i64 0, i32 6
  %1483 = load i32, ptr %1482, align 4
  %1484 = lshr i32 %1483, 16
  %1485 = and i32 %1484, 255
  br label %1486

1486:                                             ; preds = %1481, %1478
  %1487 = phi ptr [ %1480, %1478 ], [ %1468, %1481 ]
  %1488 = phi i32 [ %1479, %1478 ], [ %1485, %1481 ]
  %1489 = zext i32 %1488 to i64
  %1490 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1489
  %1491 = load i8, ptr %1490, align 1, !tbaa !17
  %1492 = icmp eq i8 %1491, 9
  br i1 %1492, label %1493, label %1505

1493:                                             ; preds = %1486, %1467
  %1494 = phi ptr [ %1487, %1486 ], [ %1468, %1467 ]
  %1495 = load i64, ptr %1494, align 8
  %1496 = and i64 %1495, 65535
  %1497 = icmp eq i64 %1496, 14
  br i1 %1497, label %1498, label %1500

1498:                                             ; preds = %1493
  %1499 = call i32 @vector_type_mode(ptr noundef nonnull %1494) #24
  br label %1522

1500:                                             ; preds = %1493
  %1501 = getelementptr inbounds %struct.tree_type, ptr %1494, i64 0, i32 6
  %1502 = load i32, ptr %1501, align 4
  %1503 = lshr i32 %1502, 16
  %1504 = and i32 %1503, 255
  br label %1522

1505:                                             ; preds = %1486
  %1506 = load i64, ptr %1487, align 8
  %1507 = and i64 %1506, 65535
  %1508 = icmp eq i64 %1507, 14
  br i1 %1508, label %1509, label %1511

1509:                                             ; preds = %1505
  %1510 = call i32 @vector_type_mode(ptr noundef nonnull %1487) #24
  br label %1516

1511:                                             ; preds = %1505
  %1512 = getelementptr inbounds %struct.tree_type, ptr %1487, i64 0, i32 6
  %1513 = load i32, ptr %1512, align 4
  %1514 = lshr i32 %1513, 16
  %1515 = and i32 %1514, 255
  br label %1516

1516:                                             ; preds = %1511, %1509
  %1517 = phi i32 [ %1510, %1509 ], [ %1515, %1511 ]
  %1518 = zext i32 %1517 to i64
  %1519 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1518
  %1520 = load i8, ptr %1519, align 1, !tbaa !17
  %1521 = zext i8 %1520 to i32
  br label %1522

1522:                                             ; preds = %1498, %1500, %1516
  %1523 = phi i32 [ %1521, %1516 ], [ %1499, %1498 ], [ %1504, %1500 ]
  %1524 = zext i32 %1523 to i64
  %1525 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1524
  %1526 = load i8, ptr %1525, align 1, !tbaa !17
  %1527 = icmp eq i8 %1526, 9
  %1528 = load ptr, ptr %119, align 8, !tbaa !17
  %1529 = load i64, ptr %1528, align 8
  %1530 = and i64 %1529, 65535
  %1531 = icmp eq i64 %1530, 14
  br i1 %1527, label %1532, label %1596

1532:                                             ; preds = %1522
  br i1 %1531, label %1533, label %1536

1533:                                             ; preds = %1532
  %1534 = call i32 @vector_type_mode(ptr noundef nonnull %1528) #24
  %1535 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1541

1536:                                             ; preds = %1532
  %1537 = getelementptr inbounds %struct.tree_type, ptr %1528, i64 0, i32 6
  %1538 = load i32, ptr %1537, align 4
  %1539 = lshr i32 %1538, 16
  %1540 = and i32 %1539, 255
  br label %1541

1541:                                             ; preds = %1536, %1533
  %1542 = phi ptr [ %1535, %1533 ], [ %1528, %1536 ]
  %1543 = phi i32 [ %1534, %1533 ], [ %1540, %1536 ]
  %1544 = zext i32 %1543 to i64
  %1545 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1544
  %1546 = load i8, ptr %1545, align 1, !tbaa !17
  %1547 = icmp eq i8 %1546, 8
  br i1 %1547, label %1567, label %1548

1548:                                             ; preds = %1541
  %1549 = load i64, ptr %1542, align 8
  %1550 = and i64 %1549, 65535
  %1551 = icmp eq i64 %1550, 14
  br i1 %1551, label %1552, label %1555

1552:                                             ; preds = %1548
  %1553 = call i32 @vector_type_mode(ptr noundef nonnull %1542) #24
  %1554 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1560

1555:                                             ; preds = %1548
  %1556 = getelementptr inbounds %struct.tree_type, ptr %1542, i64 0, i32 6
  %1557 = load i32, ptr %1556, align 4
  %1558 = lshr i32 %1557, 16
  %1559 = and i32 %1558, 255
  br label %1560

1560:                                             ; preds = %1555, %1552
  %1561 = phi ptr [ %1554, %1552 ], [ %1542, %1555 ]
  %1562 = phi i32 [ %1553, %1552 ], [ %1559, %1555 ]
  %1563 = zext i32 %1562 to i64
  %1564 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1563
  %1565 = load i8, ptr %1564, align 1, !tbaa !17
  %1566 = icmp eq i8 %1565, 9
  br i1 %1566, label %1567, label %1579

1567:                                             ; preds = %1560, %1541
  %1568 = phi ptr [ %1561, %1560 ], [ %1542, %1541 ]
  %1569 = load i64, ptr %1568, align 8
  %1570 = and i64 %1569, 65535
  %1571 = icmp eq i64 %1570, 14
  br i1 %1571, label %1572, label %1574

1572:                                             ; preds = %1567
  %1573 = call i32 @vector_type_mode(ptr noundef nonnull %1568) #24
  br label %1660

1574:                                             ; preds = %1567
  %1575 = getelementptr inbounds %struct.tree_type, ptr %1568, i64 0, i32 6
  %1576 = load i32, ptr %1575, align 4
  %1577 = lshr i32 %1576, 16
  %1578 = and i32 %1577, 255
  br label %1660

1579:                                             ; preds = %1560
  %1580 = load i64, ptr %1561, align 8
  %1581 = and i64 %1580, 65535
  %1582 = icmp eq i64 %1581, 14
  br i1 %1582, label %1583, label %1585

1583:                                             ; preds = %1579
  %1584 = call i32 @vector_type_mode(ptr noundef nonnull %1561) #24
  br label %1590

1585:                                             ; preds = %1579
  %1586 = getelementptr inbounds %struct.tree_type, ptr %1561, i64 0, i32 6
  %1587 = load i32, ptr %1586, align 4
  %1588 = lshr i32 %1587, 16
  %1589 = and i32 %1588, 255
  br label %1590

1590:                                             ; preds = %1585, %1583
  %1591 = phi i32 [ %1584, %1583 ], [ %1589, %1585 ]
  %1592 = zext i32 %1591 to i64
  %1593 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1592
  %1594 = load i8, ptr %1593, align 1, !tbaa !17
  %1595 = zext i8 %1594 to i32
  br label %1660

1596:                                             ; preds = %1522
  br i1 %1531, label %1597, label %1600

1597:                                             ; preds = %1596
  %1598 = call i32 @vector_type_mode(ptr noundef nonnull %1528) #24
  %1599 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1605

1600:                                             ; preds = %1596
  %1601 = getelementptr inbounds %struct.tree_type, ptr %1528, i64 0, i32 6
  %1602 = load i32, ptr %1601, align 4
  %1603 = lshr i32 %1602, 16
  %1604 = and i32 %1603, 255
  br label %1605

1605:                                             ; preds = %1600, %1597
  %1606 = phi ptr [ %1599, %1597 ], [ %1528, %1600 ]
  %1607 = phi i32 [ %1598, %1597 ], [ %1604, %1600 ]
  %1608 = zext i32 %1607 to i64
  %1609 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1608
  %1610 = load i8, ptr %1609, align 1, !tbaa !17
  %1611 = icmp eq i8 %1610, 8
  br i1 %1611, label %1631, label %1612

1612:                                             ; preds = %1605
  %1613 = load i64, ptr %1606, align 8
  %1614 = and i64 %1613, 65535
  %1615 = icmp eq i64 %1614, 14
  br i1 %1615, label %1616, label %1619

1616:                                             ; preds = %1612
  %1617 = call i32 @vector_type_mode(ptr noundef nonnull %1606) #24
  %1618 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1624

1619:                                             ; preds = %1612
  %1620 = getelementptr inbounds %struct.tree_type, ptr %1606, i64 0, i32 6
  %1621 = load i32, ptr %1620, align 4
  %1622 = lshr i32 %1621, 16
  %1623 = and i32 %1622, 255
  br label %1624

1624:                                             ; preds = %1619, %1616
  %1625 = phi ptr [ %1618, %1616 ], [ %1606, %1619 ]
  %1626 = phi i32 [ %1617, %1616 ], [ %1623, %1619 ]
  %1627 = zext i32 %1626 to i64
  %1628 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1627
  %1629 = load i8, ptr %1628, align 1, !tbaa !17
  %1630 = icmp eq i8 %1629, 9
  br i1 %1630, label %1631, label %1643

1631:                                             ; preds = %1624, %1605
  %1632 = phi ptr [ %1625, %1624 ], [ %1606, %1605 ]
  %1633 = load i64, ptr %1632, align 8
  %1634 = and i64 %1633, 65535
  %1635 = icmp eq i64 %1634, 14
  br i1 %1635, label %1636, label %1638

1636:                                             ; preds = %1631
  %1637 = call i32 @vector_type_mode(ptr noundef nonnull %1632) #24
  br label %1660

1638:                                             ; preds = %1631
  %1639 = getelementptr inbounds %struct.tree_type, ptr %1632, i64 0, i32 6
  %1640 = load i32, ptr %1639, align 4
  %1641 = lshr i32 %1640, 16
  %1642 = and i32 %1641, 255
  br label %1660

1643:                                             ; preds = %1624
  %1644 = load i64, ptr %1625, align 8
  %1645 = and i64 %1644, 65535
  %1646 = icmp eq i64 %1645, 14
  br i1 %1646, label %1647, label %1649

1647:                                             ; preds = %1643
  %1648 = call i32 @vector_type_mode(ptr noundef nonnull %1625) #24
  br label %1654

1649:                                             ; preds = %1643
  %1650 = getelementptr inbounds %struct.tree_type, ptr %1625, i64 0, i32 6
  %1651 = load i32, ptr %1650, align 4
  %1652 = lshr i32 %1651, 16
  %1653 = and i32 %1652, 255
  br label %1654

1654:                                             ; preds = %1649, %1647
  %1655 = phi i32 [ %1648, %1647 ], [ %1653, %1649 ]
  %1656 = zext i32 %1655 to i64
  %1657 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1656
  %1658 = load i8, ptr %1657, align 1, !tbaa !17
  %1659 = zext i8 %1658 to i32
  br label %1660

1660:                                             ; preds = %1654, %1638, %1636, %1590, %1574, %1572
  %1661 = phi i32 [ %1595, %1590 ], [ %1573, %1572 ], [ %1578, %1574 ], [ %1659, %1654 ], [ %1637, %1636 ], [ %1642, %1638 ]
  %1662 = add i32 %1661, -38
  %1663 = zext i32 %1662 to i64
  %1664 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1663
  %1665 = load ptr, ptr %1664, align 8, !tbaa !6
  %1666 = getelementptr inbounds %struct.real_format, ptr %1665, i64 0, i32 11
  %1667 = load i8, ptr %1666, align 2, !tbaa !36
  %1668 = icmp eq i8 %1667, 0
  %1669 = load i32, ptr @flag_finite_math_only, align 4
  %1670 = icmp ne i32 %1669, 0
  %1671 = select i1 %1668, i1 true, i1 %1670
  br i1 %1671, label %1672, label %2287

1672:                                             ; preds = %1369, %1660, %1446, %1373
  %1673 = call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %2454

1674:                                             ; preds = %1368, %1368
  %1675 = load ptr, ptr %119, align 8, !tbaa !17
  %1676 = load i64, ptr %1675, align 8
  %1677 = trunc i64 %1676 to i16
  switch i16 %1677, label %1977 [
    i16 9, label %1684
    i16 13, label %1678
    i16 14, label %1678
  ]

1678:                                             ; preds = %1674, %1674
  %1679 = getelementptr inbounds %struct.tree_common, ptr %1675, i64 0, i32 2
  %1680 = load ptr, ptr %1679, align 8, !tbaa !17
  %1681 = load i64, ptr %1680, align 8
  %1682 = and i64 %1681, 65535
  %1683 = icmp eq i64 %1682, 9
  br i1 %1683, label %1684, label %1977

1684:                                             ; preds = %1674, %1678
  %1685 = and i64 %1676, 65535
  %1686 = icmp eq i64 %1685, 14
  br i1 %1686, label %1687, label %1690

1687:                                             ; preds = %1684
  %1688 = call i32 @vector_type_mode(ptr noundef nonnull %1675) #24
  %1689 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1695

1690:                                             ; preds = %1684
  %1691 = getelementptr inbounds %struct.tree_type, ptr %1675, i64 0, i32 6
  %1692 = load i32, ptr %1691, align 4
  %1693 = lshr i32 %1692, 16
  %1694 = and i32 %1693, 255
  br label %1695

1695:                                             ; preds = %1690, %1687
  %1696 = phi ptr [ %1689, %1687 ], [ %1675, %1690 ]
  %1697 = phi i32 [ %1688, %1687 ], [ %1694, %1690 ]
  %1698 = zext i32 %1697 to i64
  %1699 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1698
  %1700 = load i8, ptr %1699, align 1, !tbaa !17
  %1701 = icmp eq i8 %1700, 8
  br i1 %1701, label %1759, label %1702

1702:                                             ; preds = %1695
  %1703 = load i64, ptr %1696, align 8
  %1704 = and i64 %1703, 65535
  %1705 = icmp eq i64 %1704, 14
  br i1 %1705, label %1706, label %1709

1706:                                             ; preds = %1702
  %1707 = call i32 @vector_type_mode(ptr noundef nonnull %1696) #24
  %1708 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1714

1709:                                             ; preds = %1702
  %1710 = getelementptr inbounds %struct.tree_type, ptr %1696, i64 0, i32 6
  %1711 = load i32, ptr %1710, align 4
  %1712 = lshr i32 %1711, 16
  %1713 = and i32 %1712, 255
  br label %1714

1714:                                             ; preds = %1709, %1706
  %1715 = phi ptr [ %1708, %1706 ], [ %1696, %1709 ]
  %1716 = phi i32 [ %1707, %1706 ], [ %1713, %1709 ]
  %1717 = zext i32 %1716 to i64
  %1718 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1717
  %1719 = load i8, ptr %1718, align 1, !tbaa !17
  %1720 = icmp eq i8 %1719, 9
  br i1 %1720, label %1759, label %1721

1721:                                             ; preds = %1714
  %1722 = load i64, ptr %1715, align 8
  %1723 = and i64 %1722, 65535
  %1724 = icmp eq i64 %1723, 14
  br i1 %1724, label %1725, label %1728

1725:                                             ; preds = %1721
  %1726 = call i32 @vector_type_mode(ptr noundef nonnull %1715) #24
  %1727 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1733

1728:                                             ; preds = %1721
  %1729 = getelementptr inbounds %struct.tree_type, ptr %1715, i64 0, i32 6
  %1730 = load i32, ptr %1729, align 4
  %1731 = lshr i32 %1730, 16
  %1732 = and i32 %1731, 255
  br label %1733

1733:                                             ; preds = %1728, %1725
  %1734 = phi ptr [ %1727, %1725 ], [ %1715, %1728 ]
  %1735 = phi i32 [ %1726, %1725 ], [ %1732, %1728 ]
  %1736 = zext i32 %1735 to i64
  %1737 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1736
  %1738 = load i8, ptr %1737, align 1, !tbaa !17
  %1739 = icmp eq i8 %1738, 11
  br i1 %1739, label %1759, label %1740

1740:                                             ; preds = %1733
  %1741 = load i64, ptr %1734, align 8
  %1742 = and i64 %1741, 65535
  %1743 = icmp eq i64 %1742, 14
  br i1 %1743, label %1744, label %1746

1744:                                             ; preds = %1740
  %1745 = call i32 @vector_type_mode(ptr noundef nonnull %1734) #24
  br label %1751

1746:                                             ; preds = %1740
  %1747 = getelementptr inbounds %struct.tree_type, ptr %1734, i64 0, i32 6
  %1748 = load i32, ptr %1747, align 4
  %1749 = lshr i32 %1748, 16
  %1750 = and i32 %1749, 255
  br label %1751

1751:                                             ; preds = %1746, %1744
  %1752 = phi i32 [ %1745, %1744 ], [ %1750, %1746 ]
  %1753 = zext i32 %1752 to i64
  %1754 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1753
  %1755 = load i8, ptr %1754, align 1, !tbaa !17
  %1756 = icmp eq i8 %1755, 17
  br i1 %1756, label %1757, label %1977

1757:                                             ; preds = %1751
  %1758 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1759

1759:                                             ; preds = %1757, %1733, %1714, %1695
  %1760 = phi ptr [ %1758, %1757 ], [ %1734, %1733 ], [ %1715, %1714 ], [ %1696, %1695 ]
  %1761 = load i64, ptr %1760, align 8
  %1762 = and i64 %1761, 65535
  %1763 = icmp eq i64 %1762, 14
  br i1 %1763, label %1764, label %1767

1764:                                             ; preds = %1759
  %1765 = call i32 @vector_type_mode(ptr noundef nonnull %1760) #24
  %1766 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1772

1767:                                             ; preds = %1759
  %1768 = getelementptr inbounds %struct.tree_type, ptr %1760, i64 0, i32 6
  %1769 = load i32, ptr %1768, align 4
  %1770 = lshr i32 %1769, 16
  %1771 = and i32 %1770, 255
  br label %1772

1772:                                             ; preds = %1767, %1764
  %1773 = phi ptr [ %1766, %1764 ], [ %1760, %1767 ]
  %1774 = phi i32 [ %1765, %1764 ], [ %1771, %1767 ]
  %1775 = zext i32 %1774 to i64
  %1776 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1775
  %1777 = load i8, ptr %1776, align 1, !tbaa !17
  %1778 = icmp eq i8 %1777, 8
  br i1 %1778, label %1798, label %1779

1779:                                             ; preds = %1772
  %1780 = load i64, ptr %1773, align 8
  %1781 = and i64 %1780, 65535
  %1782 = icmp eq i64 %1781, 14
  br i1 %1782, label %1783, label %1786

1783:                                             ; preds = %1779
  %1784 = call i32 @vector_type_mode(ptr noundef nonnull %1773) #24
  %1785 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1791

1786:                                             ; preds = %1779
  %1787 = getelementptr inbounds %struct.tree_type, ptr %1773, i64 0, i32 6
  %1788 = load i32, ptr %1787, align 4
  %1789 = lshr i32 %1788, 16
  %1790 = and i32 %1789, 255
  br label %1791

1791:                                             ; preds = %1786, %1783
  %1792 = phi ptr [ %1785, %1783 ], [ %1773, %1786 ]
  %1793 = phi i32 [ %1784, %1783 ], [ %1790, %1786 ]
  %1794 = zext i32 %1793 to i64
  %1795 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1794
  %1796 = load i8, ptr %1795, align 1, !tbaa !17
  %1797 = icmp eq i8 %1796, 9
  br i1 %1797, label %1798, label %1810

1798:                                             ; preds = %1791, %1772
  %1799 = phi ptr [ %1792, %1791 ], [ %1773, %1772 ]
  %1800 = load i64, ptr %1799, align 8
  %1801 = and i64 %1800, 65535
  %1802 = icmp eq i64 %1801, 14
  br i1 %1802, label %1803, label %1805

1803:                                             ; preds = %1798
  %1804 = call i32 @vector_type_mode(ptr noundef nonnull %1799) #24
  br label %1827

1805:                                             ; preds = %1798
  %1806 = getelementptr inbounds %struct.tree_type, ptr %1799, i64 0, i32 6
  %1807 = load i32, ptr %1806, align 4
  %1808 = lshr i32 %1807, 16
  %1809 = and i32 %1808, 255
  br label %1827

1810:                                             ; preds = %1791
  %1811 = load i64, ptr %1792, align 8
  %1812 = and i64 %1811, 65535
  %1813 = icmp eq i64 %1812, 14
  br i1 %1813, label %1814, label %1816

1814:                                             ; preds = %1810
  %1815 = call i32 @vector_type_mode(ptr noundef nonnull %1792) #24
  br label %1821

1816:                                             ; preds = %1810
  %1817 = getelementptr inbounds %struct.tree_type, ptr %1792, i64 0, i32 6
  %1818 = load i32, ptr %1817, align 4
  %1819 = lshr i32 %1818, 16
  %1820 = and i32 %1819, 255
  br label %1821

1821:                                             ; preds = %1816, %1814
  %1822 = phi i32 [ %1815, %1814 ], [ %1820, %1816 ]
  %1823 = zext i32 %1822 to i64
  %1824 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1823
  %1825 = load i8, ptr %1824, align 1, !tbaa !17
  %1826 = zext i8 %1825 to i32
  br label %1827

1827:                                             ; preds = %1803, %1805, %1821
  %1828 = phi i32 [ %1826, %1821 ], [ %1804, %1803 ], [ %1809, %1805 ]
  %1829 = zext i32 %1828 to i64
  %1830 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1829
  %1831 = load i8, ptr %1830, align 1, !tbaa !17
  %1832 = icmp eq i8 %1831, 9
  %1833 = load ptr, ptr %119, align 8, !tbaa !17
  %1834 = load i64, ptr %1833, align 8
  %1835 = and i64 %1834, 65535
  %1836 = icmp eq i64 %1835, 14
  br i1 %1832, label %1837, label %1901

1837:                                             ; preds = %1827
  br i1 %1836, label %1838, label %1841

1838:                                             ; preds = %1837
  %1839 = call i32 @vector_type_mode(ptr noundef nonnull %1833) #24
  %1840 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1846

1841:                                             ; preds = %1837
  %1842 = getelementptr inbounds %struct.tree_type, ptr %1833, i64 0, i32 6
  %1843 = load i32, ptr %1842, align 4
  %1844 = lshr i32 %1843, 16
  %1845 = and i32 %1844, 255
  br label %1846

1846:                                             ; preds = %1841, %1838
  %1847 = phi ptr [ %1840, %1838 ], [ %1833, %1841 ]
  %1848 = phi i32 [ %1839, %1838 ], [ %1845, %1841 ]
  %1849 = zext i32 %1848 to i64
  %1850 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1849
  %1851 = load i8, ptr %1850, align 1, !tbaa !17
  %1852 = icmp eq i8 %1851, 8
  br i1 %1852, label %1872, label %1853

1853:                                             ; preds = %1846
  %1854 = load i64, ptr %1847, align 8
  %1855 = and i64 %1854, 65535
  %1856 = icmp eq i64 %1855, 14
  br i1 %1856, label %1857, label %1860

1857:                                             ; preds = %1853
  %1858 = call i32 @vector_type_mode(ptr noundef nonnull %1847) #24
  %1859 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1865

1860:                                             ; preds = %1853
  %1861 = getelementptr inbounds %struct.tree_type, ptr %1847, i64 0, i32 6
  %1862 = load i32, ptr %1861, align 4
  %1863 = lshr i32 %1862, 16
  %1864 = and i32 %1863, 255
  br label %1865

1865:                                             ; preds = %1860, %1857
  %1866 = phi ptr [ %1859, %1857 ], [ %1847, %1860 ]
  %1867 = phi i32 [ %1858, %1857 ], [ %1864, %1860 ]
  %1868 = zext i32 %1867 to i64
  %1869 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1868
  %1870 = load i8, ptr %1869, align 1, !tbaa !17
  %1871 = icmp eq i8 %1870, 9
  br i1 %1871, label %1872, label %1884

1872:                                             ; preds = %1865, %1846
  %1873 = phi ptr [ %1866, %1865 ], [ %1847, %1846 ]
  %1874 = load i64, ptr %1873, align 8
  %1875 = and i64 %1874, 65535
  %1876 = icmp eq i64 %1875, 14
  br i1 %1876, label %1877, label %1879

1877:                                             ; preds = %1872
  %1878 = call i32 @vector_type_mode(ptr noundef nonnull %1873) #24
  br label %1965

1879:                                             ; preds = %1872
  %1880 = getelementptr inbounds %struct.tree_type, ptr %1873, i64 0, i32 6
  %1881 = load i32, ptr %1880, align 4
  %1882 = lshr i32 %1881, 16
  %1883 = and i32 %1882, 255
  br label %1965

1884:                                             ; preds = %1865
  %1885 = load i64, ptr %1866, align 8
  %1886 = and i64 %1885, 65535
  %1887 = icmp eq i64 %1886, 14
  br i1 %1887, label %1888, label %1890

1888:                                             ; preds = %1884
  %1889 = call i32 @vector_type_mode(ptr noundef nonnull %1866) #24
  br label %1895

1890:                                             ; preds = %1884
  %1891 = getelementptr inbounds %struct.tree_type, ptr %1866, i64 0, i32 6
  %1892 = load i32, ptr %1891, align 4
  %1893 = lshr i32 %1892, 16
  %1894 = and i32 %1893, 255
  br label %1895

1895:                                             ; preds = %1890, %1888
  %1896 = phi i32 [ %1889, %1888 ], [ %1894, %1890 ]
  %1897 = zext i32 %1896 to i64
  %1898 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1897
  %1899 = load i8, ptr %1898, align 1, !tbaa !17
  %1900 = zext i8 %1899 to i32
  br label %1965

1901:                                             ; preds = %1827
  br i1 %1836, label %1902, label %1905

1902:                                             ; preds = %1901
  %1903 = call i32 @vector_type_mode(ptr noundef nonnull %1833) #24
  %1904 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1910

1905:                                             ; preds = %1901
  %1906 = getelementptr inbounds %struct.tree_type, ptr %1833, i64 0, i32 6
  %1907 = load i32, ptr %1906, align 4
  %1908 = lshr i32 %1907, 16
  %1909 = and i32 %1908, 255
  br label %1910

1910:                                             ; preds = %1905, %1902
  %1911 = phi ptr [ %1904, %1902 ], [ %1833, %1905 ]
  %1912 = phi i32 [ %1903, %1902 ], [ %1909, %1905 ]
  %1913 = zext i32 %1912 to i64
  %1914 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1913
  %1915 = load i8, ptr %1914, align 1, !tbaa !17
  %1916 = icmp eq i8 %1915, 8
  br i1 %1916, label %1936, label %1917

1917:                                             ; preds = %1910
  %1918 = load i64, ptr %1911, align 8
  %1919 = and i64 %1918, 65535
  %1920 = icmp eq i64 %1919, 14
  br i1 %1920, label %1921, label %1924

1921:                                             ; preds = %1917
  %1922 = call i32 @vector_type_mode(ptr noundef nonnull %1911) #24
  %1923 = load ptr, ptr %119, align 8, !tbaa !17
  br label %1929

1924:                                             ; preds = %1917
  %1925 = getelementptr inbounds %struct.tree_type, ptr %1911, i64 0, i32 6
  %1926 = load i32, ptr %1925, align 4
  %1927 = lshr i32 %1926, 16
  %1928 = and i32 %1927, 255
  br label %1929

1929:                                             ; preds = %1924, %1921
  %1930 = phi ptr [ %1923, %1921 ], [ %1911, %1924 ]
  %1931 = phi i32 [ %1922, %1921 ], [ %1928, %1924 ]
  %1932 = zext i32 %1931 to i64
  %1933 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1932
  %1934 = load i8, ptr %1933, align 1, !tbaa !17
  %1935 = icmp eq i8 %1934, 9
  br i1 %1935, label %1936, label %1948

1936:                                             ; preds = %1929, %1910
  %1937 = phi ptr [ %1930, %1929 ], [ %1911, %1910 ]
  %1938 = load i64, ptr %1937, align 8
  %1939 = and i64 %1938, 65535
  %1940 = icmp eq i64 %1939, 14
  br i1 %1940, label %1941, label %1943

1941:                                             ; preds = %1936
  %1942 = call i32 @vector_type_mode(ptr noundef nonnull %1937) #24
  br label %1965

1943:                                             ; preds = %1936
  %1944 = getelementptr inbounds %struct.tree_type, ptr %1937, i64 0, i32 6
  %1945 = load i32, ptr %1944, align 4
  %1946 = lshr i32 %1945, 16
  %1947 = and i32 %1946, 255
  br label %1965

1948:                                             ; preds = %1929
  %1949 = load i64, ptr %1930, align 8
  %1950 = and i64 %1949, 65535
  %1951 = icmp eq i64 %1950, 14
  br i1 %1951, label %1952, label %1954

1952:                                             ; preds = %1948
  %1953 = call i32 @vector_type_mode(ptr noundef nonnull %1930) #24
  br label %1959

1954:                                             ; preds = %1948
  %1955 = getelementptr inbounds %struct.tree_type, ptr %1930, i64 0, i32 6
  %1956 = load i32, ptr %1955, align 4
  %1957 = lshr i32 %1956, 16
  %1958 = and i32 %1957, 255
  br label %1959

1959:                                             ; preds = %1954, %1952
  %1960 = phi i32 [ %1953, %1952 ], [ %1958, %1954 ]
  %1961 = zext i32 %1960 to i64
  %1962 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1961
  %1963 = load i8, ptr %1962, align 1, !tbaa !17
  %1964 = zext i8 %1963 to i32
  br label %1965

1965:                                             ; preds = %1959, %1943, %1941, %1895, %1879, %1877
  %1966 = phi i32 [ %1900, %1895 ], [ %1878, %1877 ], [ %1883, %1879 ], [ %1964, %1959 ], [ %1942, %1941 ], [ %1947, %1943 ]
  %1967 = add i32 %1966, -38
  %1968 = zext i32 %1967 to i64
  %1969 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1968
  %1970 = load ptr, ptr %1969, align 8, !tbaa !6
  %1971 = getelementptr inbounds %struct.real_format, ptr %1970, i64 0, i32 11
  %1972 = load i8, ptr %1971, align 2, !tbaa !36
  %1973 = icmp eq i8 %1972, 0
  %1974 = load i32, ptr @flag_finite_math_only, align 4
  %1975 = icmp ne i32 %1974, 0
  %1976 = select i1 %1973, i1 true, i1 %1975
  br i1 %1976, label %1977, label %1979

1977:                                             ; preds = %1674, %1965, %1751, %1678
  %1978 = call ptr @constant_boolean_node(i32 noundef 1, ptr noundef %2)
  br label %2454

1979:                                             ; preds = %1965
  %1980 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef nonnull %20, ptr noundef nonnull %21)
  br label %2454

1981:                                             ; preds = %1368
  %1982 = load ptr, ptr %119, align 8, !tbaa !17
  %1983 = load i64, ptr %1982, align 8
  %1984 = trunc i64 %1983 to i16
  switch i16 %1984, label %2284 [
    i16 9, label %1991
    i16 13, label %1985
    i16 14, label %1985
  ]

1985:                                             ; preds = %1981, %1981
  %1986 = getelementptr inbounds %struct.tree_common, ptr %1982, i64 0, i32 2
  %1987 = load ptr, ptr %1986, align 8, !tbaa !17
  %1988 = load i64, ptr %1987, align 8
  %1989 = and i64 %1988, 65535
  %1990 = icmp eq i64 %1989, 9
  br i1 %1990, label %1991, label %2284

1991:                                             ; preds = %1981, %1985
  %1992 = and i64 %1983, 65535
  %1993 = icmp eq i64 %1992, 14
  br i1 %1993, label %1994, label %1997

1994:                                             ; preds = %1991
  %1995 = call i32 @vector_type_mode(ptr noundef nonnull %1982) #24
  %1996 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2002

1997:                                             ; preds = %1991
  %1998 = getelementptr inbounds %struct.tree_type, ptr %1982, i64 0, i32 6
  %1999 = load i32, ptr %1998, align 4
  %2000 = lshr i32 %1999, 16
  %2001 = and i32 %2000, 255
  br label %2002

2002:                                             ; preds = %1997, %1994
  %2003 = phi ptr [ %1996, %1994 ], [ %1982, %1997 ]
  %2004 = phi i32 [ %1995, %1994 ], [ %2001, %1997 ]
  %2005 = zext i32 %2004 to i64
  %2006 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2005
  %2007 = load i8, ptr %2006, align 1, !tbaa !17
  %2008 = icmp eq i8 %2007, 8
  br i1 %2008, label %2066, label %2009

2009:                                             ; preds = %2002
  %2010 = load i64, ptr %2003, align 8
  %2011 = and i64 %2010, 65535
  %2012 = icmp eq i64 %2011, 14
  br i1 %2012, label %2013, label %2016

2013:                                             ; preds = %2009
  %2014 = call i32 @vector_type_mode(ptr noundef nonnull %2003) #24
  %2015 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2021

2016:                                             ; preds = %2009
  %2017 = getelementptr inbounds %struct.tree_type, ptr %2003, i64 0, i32 6
  %2018 = load i32, ptr %2017, align 4
  %2019 = lshr i32 %2018, 16
  %2020 = and i32 %2019, 255
  br label %2021

2021:                                             ; preds = %2016, %2013
  %2022 = phi ptr [ %2015, %2013 ], [ %2003, %2016 ]
  %2023 = phi i32 [ %2014, %2013 ], [ %2020, %2016 ]
  %2024 = zext i32 %2023 to i64
  %2025 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2024
  %2026 = load i8, ptr %2025, align 1, !tbaa !17
  %2027 = icmp eq i8 %2026, 9
  br i1 %2027, label %2066, label %2028

2028:                                             ; preds = %2021
  %2029 = load i64, ptr %2022, align 8
  %2030 = and i64 %2029, 65535
  %2031 = icmp eq i64 %2030, 14
  br i1 %2031, label %2032, label %2035

2032:                                             ; preds = %2028
  %2033 = call i32 @vector_type_mode(ptr noundef nonnull %2022) #24
  %2034 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2040

2035:                                             ; preds = %2028
  %2036 = getelementptr inbounds %struct.tree_type, ptr %2022, i64 0, i32 6
  %2037 = load i32, ptr %2036, align 4
  %2038 = lshr i32 %2037, 16
  %2039 = and i32 %2038, 255
  br label %2040

2040:                                             ; preds = %2035, %2032
  %2041 = phi ptr [ %2034, %2032 ], [ %2022, %2035 ]
  %2042 = phi i32 [ %2033, %2032 ], [ %2039, %2035 ]
  %2043 = zext i32 %2042 to i64
  %2044 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2043
  %2045 = load i8, ptr %2044, align 1, !tbaa !17
  %2046 = icmp eq i8 %2045, 11
  br i1 %2046, label %2066, label %2047

2047:                                             ; preds = %2040
  %2048 = load i64, ptr %2041, align 8
  %2049 = and i64 %2048, 65535
  %2050 = icmp eq i64 %2049, 14
  br i1 %2050, label %2051, label %2053

2051:                                             ; preds = %2047
  %2052 = call i32 @vector_type_mode(ptr noundef nonnull %2041) #24
  br label %2058

2053:                                             ; preds = %2047
  %2054 = getelementptr inbounds %struct.tree_type, ptr %2041, i64 0, i32 6
  %2055 = load i32, ptr %2054, align 4
  %2056 = lshr i32 %2055, 16
  %2057 = and i32 %2056, 255
  br label %2058

2058:                                             ; preds = %2053, %2051
  %2059 = phi i32 [ %2052, %2051 ], [ %2057, %2053 ]
  %2060 = zext i32 %2059 to i64
  %2061 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2060
  %2062 = load i8, ptr %2061, align 1, !tbaa !17
  %2063 = icmp eq i8 %2062, 17
  br i1 %2063, label %2064, label %2284

2064:                                             ; preds = %2058
  %2065 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2066

2066:                                             ; preds = %2064, %2040, %2021, %2002
  %2067 = phi ptr [ %2065, %2064 ], [ %2041, %2040 ], [ %2022, %2021 ], [ %2003, %2002 ]
  %2068 = load i64, ptr %2067, align 8
  %2069 = and i64 %2068, 65535
  %2070 = icmp eq i64 %2069, 14
  br i1 %2070, label %2071, label %2074

2071:                                             ; preds = %2066
  %2072 = call i32 @vector_type_mode(ptr noundef nonnull %2067) #24
  %2073 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2079

2074:                                             ; preds = %2066
  %2075 = getelementptr inbounds %struct.tree_type, ptr %2067, i64 0, i32 6
  %2076 = load i32, ptr %2075, align 4
  %2077 = lshr i32 %2076, 16
  %2078 = and i32 %2077, 255
  br label %2079

2079:                                             ; preds = %2074, %2071
  %2080 = phi ptr [ %2073, %2071 ], [ %2067, %2074 ]
  %2081 = phi i32 [ %2072, %2071 ], [ %2078, %2074 ]
  %2082 = zext i32 %2081 to i64
  %2083 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2082
  %2084 = load i8, ptr %2083, align 1, !tbaa !17
  %2085 = icmp eq i8 %2084, 8
  br i1 %2085, label %2105, label %2086

2086:                                             ; preds = %2079
  %2087 = load i64, ptr %2080, align 8
  %2088 = and i64 %2087, 65535
  %2089 = icmp eq i64 %2088, 14
  br i1 %2089, label %2090, label %2093

2090:                                             ; preds = %2086
  %2091 = call i32 @vector_type_mode(ptr noundef nonnull %2080) #24
  %2092 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2098

2093:                                             ; preds = %2086
  %2094 = getelementptr inbounds %struct.tree_type, ptr %2080, i64 0, i32 6
  %2095 = load i32, ptr %2094, align 4
  %2096 = lshr i32 %2095, 16
  %2097 = and i32 %2096, 255
  br label %2098

2098:                                             ; preds = %2093, %2090
  %2099 = phi ptr [ %2092, %2090 ], [ %2080, %2093 ]
  %2100 = phi i32 [ %2091, %2090 ], [ %2097, %2093 ]
  %2101 = zext i32 %2100 to i64
  %2102 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2101
  %2103 = load i8, ptr %2102, align 1, !tbaa !17
  %2104 = icmp eq i8 %2103, 9
  br i1 %2104, label %2105, label %2117

2105:                                             ; preds = %2098, %2079
  %2106 = phi ptr [ %2099, %2098 ], [ %2080, %2079 ]
  %2107 = load i64, ptr %2106, align 8
  %2108 = and i64 %2107, 65535
  %2109 = icmp eq i64 %2108, 14
  br i1 %2109, label %2110, label %2112

2110:                                             ; preds = %2105
  %2111 = call i32 @vector_type_mode(ptr noundef nonnull %2106) #24
  br label %2134

2112:                                             ; preds = %2105
  %2113 = getelementptr inbounds %struct.tree_type, ptr %2106, i64 0, i32 6
  %2114 = load i32, ptr %2113, align 4
  %2115 = lshr i32 %2114, 16
  %2116 = and i32 %2115, 255
  br label %2134

2117:                                             ; preds = %2098
  %2118 = load i64, ptr %2099, align 8
  %2119 = and i64 %2118, 65535
  %2120 = icmp eq i64 %2119, 14
  br i1 %2120, label %2121, label %2123

2121:                                             ; preds = %2117
  %2122 = call i32 @vector_type_mode(ptr noundef nonnull %2099) #24
  br label %2128

2123:                                             ; preds = %2117
  %2124 = getelementptr inbounds %struct.tree_type, ptr %2099, i64 0, i32 6
  %2125 = load i32, ptr %2124, align 4
  %2126 = lshr i32 %2125, 16
  %2127 = and i32 %2126, 255
  br label %2128

2128:                                             ; preds = %2123, %2121
  %2129 = phi i32 [ %2122, %2121 ], [ %2127, %2123 ]
  %2130 = zext i32 %2129 to i64
  %2131 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2130
  %2132 = load i8, ptr %2131, align 1, !tbaa !17
  %2133 = zext i8 %2132 to i32
  br label %2134

2134:                                             ; preds = %2110, %2112, %2128
  %2135 = phi i32 [ %2133, %2128 ], [ %2111, %2110 ], [ %2116, %2112 ]
  %2136 = zext i32 %2135 to i64
  %2137 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2136
  %2138 = load i8, ptr %2137, align 1, !tbaa !17
  %2139 = icmp eq i8 %2138, 9
  %2140 = load ptr, ptr %119, align 8, !tbaa !17
  %2141 = load i64, ptr %2140, align 8
  %2142 = and i64 %2141, 65535
  %2143 = icmp eq i64 %2142, 14
  br i1 %2139, label %2144, label %2208

2144:                                             ; preds = %2134
  br i1 %2143, label %2145, label %2148

2145:                                             ; preds = %2144
  %2146 = call i32 @vector_type_mode(ptr noundef nonnull %2140) #24
  %2147 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2153

2148:                                             ; preds = %2144
  %2149 = getelementptr inbounds %struct.tree_type, ptr %2140, i64 0, i32 6
  %2150 = load i32, ptr %2149, align 4
  %2151 = lshr i32 %2150, 16
  %2152 = and i32 %2151, 255
  br label %2153

2153:                                             ; preds = %2148, %2145
  %2154 = phi ptr [ %2147, %2145 ], [ %2140, %2148 ]
  %2155 = phi i32 [ %2146, %2145 ], [ %2152, %2148 ]
  %2156 = zext i32 %2155 to i64
  %2157 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2156
  %2158 = load i8, ptr %2157, align 1, !tbaa !17
  %2159 = icmp eq i8 %2158, 8
  br i1 %2159, label %2179, label %2160

2160:                                             ; preds = %2153
  %2161 = load i64, ptr %2154, align 8
  %2162 = and i64 %2161, 65535
  %2163 = icmp eq i64 %2162, 14
  br i1 %2163, label %2164, label %2167

2164:                                             ; preds = %2160
  %2165 = call i32 @vector_type_mode(ptr noundef nonnull %2154) #24
  %2166 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2172

2167:                                             ; preds = %2160
  %2168 = getelementptr inbounds %struct.tree_type, ptr %2154, i64 0, i32 6
  %2169 = load i32, ptr %2168, align 4
  %2170 = lshr i32 %2169, 16
  %2171 = and i32 %2170, 255
  br label %2172

2172:                                             ; preds = %2167, %2164
  %2173 = phi ptr [ %2166, %2164 ], [ %2154, %2167 ]
  %2174 = phi i32 [ %2165, %2164 ], [ %2171, %2167 ]
  %2175 = zext i32 %2174 to i64
  %2176 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2175
  %2177 = load i8, ptr %2176, align 1, !tbaa !17
  %2178 = icmp eq i8 %2177, 9
  br i1 %2178, label %2179, label %2191

2179:                                             ; preds = %2172, %2153
  %2180 = phi ptr [ %2173, %2172 ], [ %2154, %2153 ]
  %2181 = load i64, ptr %2180, align 8
  %2182 = and i64 %2181, 65535
  %2183 = icmp eq i64 %2182, 14
  br i1 %2183, label %2184, label %2186

2184:                                             ; preds = %2179
  %2185 = call i32 @vector_type_mode(ptr noundef nonnull %2180) #24
  br label %2272

2186:                                             ; preds = %2179
  %2187 = getelementptr inbounds %struct.tree_type, ptr %2180, i64 0, i32 6
  %2188 = load i32, ptr %2187, align 4
  %2189 = lshr i32 %2188, 16
  %2190 = and i32 %2189, 255
  br label %2272

2191:                                             ; preds = %2172
  %2192 = load i64, ptr %2173, align 8
  %2193 = and i64 %2192, 65535
  %2194 = icmp eq i64 %2193, 14
  br i1 %2194, label %2195, label %2197

2195:                                             ; preds = %2191
  %2196 = call i32 @vector_type_mode(ptr noundef nonnull %2173) #24
  br label %2202

2197:                                             ; preds = %2191
  %2198 = getelementptr inbounds %struct.tree_type, ptr %2173, i64 0, i32 6
  %2199 = load i32, ptr %2198, align 4
  %2200 = lshr i32 %2199, 16
  %2201 = and i32 %2200, 255
  br label %2202

2202:                                             ; preds = %2197, %2195
  %2203 = phi i32 [ %2196, %2195 ], [ %2201, %2197 ]
  %2204 = zext i32 %2203 to i64
  %2205 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2204
  %2206 = load i8, ptr %2205, align 1, !tbaa !17
  %2207 = zext i8 %2206 to i32
  br label %2272

2208:                                             ; preds = %2134
  br i1 %2143, label %2209, label %2212

2209:                                             ; preds = %2208
  %2210 = call i32 @vector_type_mode(ptr noundef nonnull %2140) #24
  %2211 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2217

2212:                                             ; preds = %2208
  %2213 = getelementptr inbounds %struct.tree_type, ptr %2140, i64 0, i32 6
  %2214 = load i32, ptr %2213, align 4
  %2215 = lshr i32 %2214, 16
  %2216 = and i32 %2215, 255
  br label %2217

2217:                                             ; preds = %2212, %2209
  %2218 = phi ptr [ %2211, %2209 ], [ %2140, %2212 ]
  %2219 = phi i32 [ %2210, %2209 ], [ %2216, %2212 ]
  %2220 = zext i32 %2219 to i64
  %2221 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2220
  %2222 = load i8, ptr %2221, align 1, !tbaa !17
  %2223 = icmp eq i8 %2222, 8
  br i1 %2223, label %2243, label %2224

2224:                                             ; preds = %2217
  %2225 = load i64, ptr %2218, align 8
  %2226 = and i64 %2225, 65535
  %2227 = icmp eq i64 %2226, 14
  br i1 %2227, label %2228, label %2231

2228:                                             ; preds = %2224
  %2229 = call i32 @vector_type_mode(ptr noundef nonnull %2218) #24
  %2230 = load ptr, ptr %119, align 8, !tbaa !17
  br label %2236

2231:                                             ; preds = %2224
  %2232 = getelementptr inbounds %struct.tree_type, ptr %2218, i64 0, i32 6
  %2233 = load i32, ptr %2232, align 4
  %2234 = lshr i32 %2233, 16
  %2235 = and i32 %2234, 255
  br label %2236

2236:                                             ; preds = %2231, %2228
  %2237 = phi ptr [ %2230, %2228 ], [ %2218, %2231 ]
  %2238 = phi i32 [ %2229, %2228 ], [ %2235, %2231 ]
  %2239 = zext i32 %2238 to i64
  %2240 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2239
  %2241 = load i8, ptr %2240, align 1, !tbaa !17
  %2242 = icmp eq i8 %2241, 9
  br i1 %2242, label %2243, label %2255

2243:                                             ; preds = %2236, %2217
  %2244 = phi ptr [ %2237, %2236 ], [ %2218, %2217 ]
  %2245 = load i64, ptr %2244, align 8
  %2246 = and i64 %2245, 65535
  %2247 = icmp eq i64 %2246, 14
  br i1 %2247, label %2248, label %2250

2248:                                             ; preds = %2243
  %2249 = call i32 @vector_type_mode(ptr noundef nonnull %2244) #24
  br label %2272

2250:                                             ; preds = %2243
  %2251 = getelementptr inbounds %struct.tree_type, ptr %2244, i64 0, i32 6
  %2252 = load i32, ptr %2251, align 4
  %2253 = lshr i32 %2252, 16
  %2254 = and i32 %2253, 255
  br label %2272

2255:                                             ; preds = %2236
  %2256 = load i64, ptr %2237, align 8
  %2257 = and i64 %2256, 65535
  %2258 = icmp eq i64 %2257, 14
  br i1 %2258, label %2259, label %2261

2259:                                             ; preds = %2255
  %2260 = call i32 @vector_type_mode(ptr noundef nonnull %2237) #24
  br label %2266

2261:                                             ; preds = %2255
  %2262 = getelementptr inbounds %struct.tree_type, ptr %2237, i64 0, i32 6
  %2263 = load i32, ptr %2262, align 4
  %2264 = lshr i32 %2263, 16
  %2265 = and i32 %2264, 255
  br label %2266

2266:                                             ; preds = %2261, %2259
  %2267 = phi i32 [ %2260, %2259 ], [ %2265, %2261 ]
  %2268 = zext i32 %2267 to i64
  %2269 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2268
  %2270 = load i8, ptr %2269, align 1, !tbaa !17
  %2271 = zext i8 %2270 to i32
  br label %2272

2272:                                             ; preds = %2266, %2250, %2248, %2202, %2186, %2184
  %2273 = phi i32 [ %2207, %2202 ], [ %2185, %2184 ], [ %2190, %2186 ], [ %2271, %2266 ], [ %2249, %2248 ], [ %2254, %2250 ]
  %2274 = add i32 %2273, -38
  %2275 = zext i32 %2274 to i64
  %2276 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2275
  %2277 = load ptr, ptr %2276, align 8, !tbaa !6
  %2278 = getelementptr inbounds %struct.real_format, ptr %2277, i64 0, i32 11
  %2279 = load i8, ptr %2278, align 2, !tbaa !36
  %2280 = icmp eq i8 %2279, 0
  %2281 = load i32, ptr @flag_finite_math_only, align 4
  %2282 = icmp ne i32 %2281, 0
  %2283 = select i1 %2280, i1 true, i1 %2282
  br i1 %2283, label %2284, label %2287

2284:                                             ; preds = %1981, %1985, %2058, %2272, %1368, %1368
  %2285 = call ptr @constant_boolean_node(i32 noundef 0, ptr noundef %2)
  br label %2454

2286:                                             ; preds = %1368
  call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 9779, ptr noundef nonnull @.str.1) #24
  br label %2287

2287:                                             ; preds = %2286, %1660, %2272, %1365
  %2288 = load i64, ptr %21, align 8
  %2289 = and i64 %2288, 65535
  %2290 = icmp ne i64 %2289, 23
  %2291 = load i64, ptr %20, align 8
  %2292 = and i64 %2291, 65535
  %2293 = icmp eq i64 %2292, 23
  %2294 = select i1 %2290, i1 true, i1 %2293
  br i1 %2294, label %2399, label %2295

2295:                                             ; preds = %2287
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %17) #24
  store ptr null, ptr %17, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %18) #24
  store ptr null, ptr %18, align 8, !tbaa !6
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %19) #24
  store i32 0, ptr %19, align 4, !tbaa !21
  %2296 = call fastcc i32 @twoval_comparison_p(ptr noundef nonnull %20, ptr noundef nonnull %17, ptr noundef nonnull %18, ptr noundef nonnull %19), !range !28
  %2297 = icmp ne i32 %2296, 0
  %2298 = load ptr, ptr %17, align 8
  %2299 = icmp ne ptr %2298, null
  %2300 = select i1 %2297, i1 %2299, i1 false
  %2301 = load ptr, ptr %18, align 8
  %2302 = icmp ne ptr %2301, null
  %2303 = select i1 %2300, i1 %2302, i1 false
  br i1 %2303, label %2304, label %2395

2304:                                             ; preds = %2295
  %2305 = load i64, ptr %2298, align 8
  %2306 = and i64 %2305, 131072
  %2307 = icmp eq i64 %2306, 0
  br i1 %2307, label %2312, label %2308

2308:                                             ; preds = %2304
  %2309 = load i64, ptr %2301, align 8
  %2310 = and i64 %2309, 131072
  %2311 = icmp eq i64 %2310, 0
  br i1 %2311, label %2312, label %2395

2312:                                             ; preds = %2308, %2304
  %2313 = getelementptr inbounds %struct.tree_common, ptr %2298, i64 0, i32 2
  %2314 = load ptr, ptr %2313, align 8, !tbaa !17
  %2315 = getelementptr inbounds %struct.tree_common, ptr %2301, i64 0, i32 2
  %2316 = load ptr, ptr %2315, align 8, !tbaa !17
  %2317 = icmp eq ptr %2314, %2316
  br i1 %2317, label %2318, label %2395

2318:                                             ; preds = %2312
  %2319 = load i64, ptr %2314, align 8
  %2320 = trunc i64 %2319 to i32
  %2321 = and i32 %2320, 65535
  %2322 = add nsw i32 %2321, -6
  %2323 = icmp ult i32 %2322, 3
  br i1 %2323, label %2324, label %2395

2324:                                             ; preds = %2318
  %2325 = getelementptr inbounds %struct.tree_type, ptr %2314, i64 0, i32 14
  %2326 = load ptr, ptr %2325, align 8, !tbaa !17
  %2327 = icmp eq ptr %2326, null
  br i1 %2327, label %2395, label %2328

2328:                                             ; preds = %2324
  %2329 = getelementptr inbounds %struct.tree_type, ptr %2314, i64 0, i32 13
  %2330 = load ptr, ptr %2329, align 8, !tbaa !17
  %2331 = call i32 @operand_equal_p(ptr noundef %2330, ptr noundef nonnull %2326, i32 noundef 0)
  %2332 = icmp eq i32 %2331, 0
  br i1 %2332, label %2333, label %2395

2333:                                             ; preds = %2328
  %2334 = load ptr, ptr %17, align 8, !tbaa !6
  %2335 = getelementptr inbounds %struct.tree_common, ptr %2334, i64 0, i32 2
  %2336 = load ptr, ptr %2335, align 8, !tbaa !17
  %2337 = getelementptr inbounds %struct.tree_type, ptr %2336, i64 0, i32 14
  %2338 = load ptr, ptr %2337, align 8, !tbaa !17
  %2339 = getelementptr inbounds %struct.tree_type, ptr %2336, i64 0, i32 13
  %2340 = load ptr, ptr %2339, align 8, !tbaa !17
  %2341 = load ptr, ptr %18, align 8, !tbaa !6
  %2342 = call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef nonnull %20, ptr noundef %2334, ptr noundef %2338, ptr noundef %2341, ptr noundef %2340)
  %2343 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %2342, ptr noundef nonnull %21)
  %2344 = load ptr, ptr %17, align 8, !tbaa !6
  %2345 = load ptr, ptr %18, align 8, !tbaa !6
  %2346 = call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef nonnull %20, ptr noundef %2344, ptr noundef %2338, ptr noundef %2345, ptr noundef %2338)
  %2347 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %2346, ptr noundef nonnull %21)
  %2348 = load ptr, ptr %17, align 8, !tbaa !6
  %2349 = load ptr, ptr %18, align 8, !tbaa !6
  %2350 = call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef nonnull %20, ptr noundef %2348, ptr noundef %2340, ptr noundef %2349, ptr noundef %2338)
  %2351 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %2350, ptr noundef nonnull %21)
  %2352 = load i64, ptr %2343, align 8
  %2353 = and i64 %2352, 65535
  %2354 = icmp eq i64 %2353, 23
  br i1 %2354, label %2355, label %2395

2355:                                             ; preds = %2333
  %2356 = load i64, ptr %2347, align 8
  %2357 = and i64 %2356, 65535
  %2358 = icmp eq i64 %2357, 23
  br i1 %2358, label %2359, label %2395

2359:                                             ; preds = %2355
  %2360 = load i64, ptr %2351, align 8
  %2361 = and i64 %2360, 65535
  %2362 = icmp eq i64 %2361, 23
  br i1 %2362, label %2363, label %2395

2363:                                             ; preds = %2359
  %2364 = call i32 @integer_onep(ptr noundef nonnull %2343) #24
  %2365 = shl nsw i32 %2364, 2
  %2366 = call i32 @integer_onep(ptr noundef nonnull %2347) #24
  %2367 = shl nsw i32 %2366, 1
  %2368 = add nsw i32 %2367, %2365
  %2369 = call i32 @integer_onep(ptr noundef nonnull %2351) #24
  %2370 = add nsw i32 %2368, %2369
  switch i32 %2370, label %2383 [
    i32 0, label %2371
    i32 1, label %2374
    i32 2, label %2375
    i32 3, label %2376
    i32 4, label %2377
    i32 5, label %2378
    i32 6, label %2379
    i32 7, label %2380
  ]

2371:                                             ; preds = %2363
  %2372 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %2373 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %2372, ptr noundef nonnull %20)
  br label %2397

2374:                                             ; preds = %2363
  br label %2383

2375:                                             ; preds = %2363
  br label %2383

2376:                                             ; preds = %2363
  br label %2383

2377:                                             ; preds = %2363
  br label %2383

2378:                                             ; preds = %2363
  br label %2383

2379:                                             ; preds = %2363
  br label %2383

2380:                                             ; preds = %2363
  %2381 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %2382 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %2381, ptr noundef nonnull %20)
  br label %2397

2383:                                             ; preds = %2363, %2379, %2378, %2377, %2376, %2375, %2374
  %2384 = phi i32 [ %1, %2363 ], [ 100, %2379 ], [ 102, %2378 ], [ 99, %2377 ], [ 98, %2376 ], [ 101, %2375 ], [ 97, %2374 ]
  %2385 = load i32, ptr %19, align 4, !tbaa !21
  %2386 = icmp eq i32 %2385, 0
  %2387 = load ptr, ptr %17, align 8, !tbaa !6
  %2388 = load ptr, ptr %18, align 8, !tbaa !6
  br i1 %2386, label %2393, label %2389

2389:                                             ; preds = %2383
  %2390 = call ptr @build2_stat(i32 noundef %2384, ptr noundef %2, ptr noundef %2387, ptr noundef %2388) #24
  %2391 = call ptr @save_expr(ptr noundef %2390) #24
  %2392 = getelementptr inbounds %struct.tree_exp, ptr %2391, i64 0, i32 1
  store i32 %0, ptr %2392, align 8, !tbaa !17
  br label %2397

2393:                                             ; preds = %2383
  %2394 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %2384, ptr noundef %2, ptr noundef %2387, ptr noundef %2388)
  br label %2397

2395:                                             ; preds = %2359, %2355, %2333, %2318, %2328, %2324, %2312, %2308, %2295
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %19) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #24
  %2396 = load i64, ptr %20, align 8
  br label %2399

2397:                                             ; preds = %2389, %2393, %2380, %2371
  %2398 = phi ptr [ %2373, %2371 ], [ %2382, %2380 ], [ %2394, %2393 ], [ %2391, %2389 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %19) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %18) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %17) #24
  br label %2454

2399:                                             ; preds = %2395, %2287
  %2400 = phi i64 [ %2396, %2395 ], [ %2291, %2287 ]
  %2401 = trunc i64 %2400 to i16
  switch i16 %2401, label %2427 [
    i16 67, label %2402
    i16 76, label %2402
  ]

2402:                                             ; preds = %2399, %2399
  %2403 = load i64, ptr %21, align 8
  %2404 = and i64 %2403, 65535
  %2405 = icmp eq i64 %2404, 23
  br i1 %2405, label %2406, label %2427

2406:                                             ; preds = %2402
  %2407 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 1
  %2408 = load ptr, ptr %2407, align 8, !tbaa !17
  %2409 = load i64, ptr %2408, align 8
  %2410 = and i64 %2409, 65535
  %2411 = icmp eq i64 %2410, 23
  br i1 %2411, label %2412, label %2427

2412:                                             ; preds = %2406
  %2413 = call i32 @integer_zerop(ptr noundef nonnull %2408) #24
  %2414 = icmp eq i32 %2413, 0
  br i1 %2414, label %2415, label %2427

2415:                                             ; preds = %2412
  %2416 = load ptr, ptr %2407, align 8, !tbaa !17
  %2417 = load i64, ptr %2416, align 8
  %2418 = and i64 %2417, 134217728
  %2419 = icmp eq i64 %2418, 0
  br i1 %2419, label %2420, label %2427

2420:                                             ; preds = %2415
  %2421 = load i64, ptr %21, align 8
  %2422 = and i64 %2421, 134217728
  %2423 = icmp eq i64 %2422, 0
  br i1 %2423, label %2424, label %2427

2424:                                             ; preds = %2420
  %2425 = call fastcc ptr @fold_div_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %20, ptr noundef nonnull %21)
  %2426 = icmp eq ptr %2425, null
  br i1 %2426, label %2427, label %2454

2427:                                             ; preds = %2399, %2424, %2420, %2415, %2412, %2406, %2402
  %2428 = load i64, ptr %20, align 8
  %2429 = and i64 %2428, 65535
  %2430 = icmp eq i64 %2429, 90
  br i1 %2430, label %2431, label %2454

2431:                                             ; preds = %2427
  %2432 = load i64, ptr %21, align 8
  %2433 = trunc i64 %2432 to i16
  switch i16 %2433, label %2454 [
    i16 90, label %2434
    i16 23, label %2444
  ]

2434:                                             ; preds = %2431
  %2435 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %2436 = load ptr, ptr %2435, align 8, !tbaa !17
  %2437 = getelementptr inbounds %struct.tree_common, ptr %2436, i64 0, i32 2
  %2438 = load ptr, ptr %2437, align 8, !tbaa !17
  %2439 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 3
  %2440 = load ptr, ptr %2439, align 8, !tbaa !17
  %2441 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2438, ptr noundef %2440)
  %2442 = load ptr, ptr %2435, align 8, !tbaa !17
  %2443 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %2441, ptr noundef %2442)
  br label %2454

2444:                                             ; preds = %2431
  %2445 = getelementptr inbounds %struct.tree_exp, ptr %20, i64 0, i32 3
  %2446 = load ptr, ptr %2445, align 8, !tbaa !17
  %2447 = getelementptr inbounds %struct.tree_common, ptr %2446, i64 0, i32 2
  %2448 = load ptr, ptr %2447, align 8, !tbaa !17
  %2449 = call i32 @swap_tree_comparison(i32 noundef %1)
  %2450 = load ptr, ptr %2445, align 8, !tbaa !17
  %2451 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2448, ptr noundef nonnull %21)
  %2452 = call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 90, ptr noundef %2448, ptr noundef %2451)
  %2453 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %2449, ptr noundef %2, ptr noundef %2450, ptr noundef %2452)
  br label %2454

2454:                                             ; preds = %2431, %1331, %1253, %1286, %1313, %616, %604, %100, %97, %2427, %2397, %567, %457, %480, %401, %116, %39, %35, %2424, %1362, %1345, %1342, %569, %520, %527, %5, %2444, %2434, %2284, %1979, %1977, %1672
  %2455 = phi ptr [ %2443, %2434 ], [ %2453, %2444 ], [ %2398, %2397 ], [ %2285, %2284 ], [ %1978, %1977 ], [ %1980, %1979 ], [ %1673, %1672 ], [ %402, %401 ], [ %22, %5 ], [ %521, %520 ], [ %529, %527 ], [ %561, %569 ], [ %1343, %1342 ], [ %1346, %1345 ], [ %1363, %1362 ], [ %2425, %2424 ], [ %37, %35 ], [ %40, %39 ], [ %117, %116 ], [ %486, %480 ], [ %464, %457 ], [ %568, %567 ], [ null, %2427 ], [ %102, %100 ], [ %99, %97 ], [ %1332, %1331 ], [ %1254, %1253 ], [ %1288, %1286 ], [ %1317, %1313 ], [ %621, %616 ], [ %607, %604 ], [ null, %2431 ]
  ret ptr %2455
}

declare ptr @lookup_attribute(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @optimize_bit_field_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %9) #24
  %17 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = load i64, ptr %4, align 8
  %20 = and i64 %19, 65535
  %21 = icmp eq i64 %20, 23
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %11) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %12) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %13) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #24
  store i32 0, ptr %14, align 4, !tbaa !21
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #24
  store i32 0, ptr %15, align 4, !tbaa !21
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %16) #24
  %22 = call ptr @get_inner_reference(ptr noundef %3, ptr noundef nonnull %7, ptr noundef nonnull %6, ptr noundef nonnull %16, ptr noundef nonnull %10, ptr noundef nonnull %12, ptr noundef nonnull %14, i8 noundef zeroext 0) #24
  %23 = icmp eq ptr %22, %3
  br i1 %23, label %196, label %24

24:                                               ; preds = %5
  %25 = load i64, ptr %7, align 8
  %26 = load i32, ptr %10, align 4, !tbaa !17
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1, !tbaa !17
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = icmp eq i64 %25, %31
  %33 = icmp slt i64 %25, 0
  %34 = or i1 %33, %32
  %35 = load ptr, ptr %16, align 8
  %36 = icmp ne ptr %35, null
  %37 = select i1 %34, i1 true, i1 %36
  br i1 %37, label %196, label %38

38:                                               ; preds = %24
  %39 = load i64, ptr %22, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 62
  br i1 %41, label %196, label %42

42:                                               ; preds = %38
  br i1 %21, label %65, label %43

43:                                               ; preds = %42
  %44 = call ptr @get_inner_reference(ptr noundef nonnull %4, ptr noundef nonnull %9, ptr noundef nonnull %8, ptr noundef nonnull %16, ptr noundef nonnull %11, ptr noundef nonnull %13, ptr noundef nonnull %15, i8 noundef zeroext 0) #24
  %45 = icmp eq ptr %44, %4
  br i1 %45, label %196, label %46

46:                                               ; preds = %43
  %47 = load i64, ptr %6, align 8, !tbaa !24
  %48 = load i64, ptr %8, align 8, !tbaa !24
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %50, label %196

50:                                               ; preds = %46
  %51 = load i64, ptr %7, align 8, !tbaa !24
  %52 = load i64, ptr %9, align 8, !tbaa !24
  %53 = icmp eq i64 %51, %52
  br i1 %53, label %54, label %196

54:                                               ; preds = %50
  %55 = load i32, ptr %12, align 4, !tbaa !21
  %56 = load i32, ptr %13, align 4, !tbaa !21
  %57 = icmp ne i32 %55, %56
  %58 = load ptr, ptr %16, align 8
  %59 = icmp ne ptr %58, null
  %60 = select i1 %57, i1 true, i1 %59
  br i1 %60, label %196, label %61

61:                                               ; preds = %54
  %62 = load i64, ptr %44, align 8
  %63 = and i64 %62, 65535
  %64 = icmp eq i64 %63, 62
  br i1 %64, label %196, label %71

65:                                               ; preds = %42
  %66 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  %68 = getelementptr inbounds %struct.tree_type, ptr %67, i64 0, i32 7
  %69 = load i32, ptr %68, align 8, !tbaa !17
  %70 = load i64, ptr %6, align 8, !tbaa !24
  br label %83

71:                                               ; preds = %61
  %72 = getelementptr inbounds %struct.tree_common, ptr %22, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = getelementptr inbounds %struct.tree_type, ptr %73, i64 0, i32 7
  %75 = load i32, ptr %74, align 8, !tbaa !17
  %76 = getelementptr inbounds %struct.tree_common, ptr %44, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !17
  %78 = getelementptr inbounds %struct.tree_type, ptr %77, i64 0, i32 7
  %79 = load i32, ptr %78, align 8, !tbaa !17
  %80 = call i32 @llvm.umin.i32(i32 %75, i32 %79)
  %81 = load i32, ptr %15, align 4
  %82 = icmp ne i32 %81, 0
  br label %83

83:                                               ; preds = %71, %65
  %84 = phi i1 [ false, %65 ], [ %82, %71 ]
  %85 = phi i64 [ %70, %65 ], [ %47, %71 ]
  %86 = phi i64 [ %25, %65 ], [ %51, %71 ]
  %87 = phi ptr [ null, %65 ], [ %44, %71 ]
  %88 = phi i32 [ %69, %65 ], [ %80, %71 ]
  %89 = trunc i64 %86 to i32
  %90 = trunc i64 %85 to i32
  %91 = load i32, ptr @word_mode, align 4, !tbaa !17
  %92 = load i32, ptr %14, align 4, !tbaa !21
  %93 = icmp ne i32 %92, 0
  %94 = select i1 %93, i1 true, i1 %84
  %95 = zext i1 %94 to i32
  %96 = call i32 @get_best_mode(i32 noundef %89, i32 noundef %90, i32 noundef %88, i32 noundef %91, i32 noundef %95) #24
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %196, label %98

98:                                               ; preds = %83
  %99 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %100 = call ptr %99(i32 noundef %96, i32 noundef 0) #24
  %101 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 2), align 8, !tbaa !41
  %102 = call ptr %101(i32 noundef %96, i32 noundef 1) #24
  %103 = zext i32 %96 to i64
  %104 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %103
  %105 = load i8, ptr %104, align 1, !tbaa !17
  %106 = zext i8 %105 to i64
  %107 = shl nuw nsw i64 %106, 3
  %108 = load i64, ptr %6, align 8, !tbaa !24
  %109 = sub nsw i64 0, %107
  %110 = and i64 %108, %109
  %111 = sub nsw i64 %108, %110
  store i64 %111, ptr %6, align 8, !tbaa !24
  %112 = load i64, ptr %7, align 8, !tbaa !24
  %113 = icmp eq i64 %107, %112
  br i1 %113, label %196, label %114

114:                                              ; preds = %98
  %115 = call ptr @build_int_cst_type(ptr noundef %102, i64 noundef -1) #24
  %116 = load i64, ptr %7, align 8, !tbaa !24
  %117 = sub nsw i64 %107, %116
  %118 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %119 = call ptr @build_int_cst(ptr noundef %118, i64 noundef %117) #24
  %120 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %115, ptr noundef %119)
  %121 = load i64, ptr %7, align 8, !tbaa !24
  %122 = load i64, ptr %6, align 8, !tbaa !24
  %123 = add i64 %121, %122
  %124 = sub i64 %107, %123
  %125 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %126 = call ptr @build_int_cst(ptr noundef %125, i64 noundef %124) #24
  %127 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %120, ptr noundef %126)
  br i1 %21, label %134, label %128

128:                                              ; preds = %114
  %129 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %22, ptr noundef %102, i64 noundef %107, i64 noundef %110, i32 noundef 1)
  %130 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %102, ptr noundef %129, ptr noundef %127)
  %131 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef %87, ptr noundef %102, i64 noundef %107, i64 noundef %110, i32 noundef 1)
  %132 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %102, ptr noundef %131, ptr noundef %127)
  %133 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %130, ptr noundef %132)
  br label %196

134:                                              ; preds = %114
  %135 = load i32, ptr %12, align 4, !tbaa !21
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %150, label %137

137:                                              ; preds = %134
  %138 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %102, ptr noundef nonnull %4)
  %139 = load i64, ptr %7, align 8, !tbaa !24
  %140 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %141 = call ptr @build_int_cst(ptr noundef %140, i64 noundef %139) #24
  %142 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %138, ptr noundef %141)
  %143 = call i32 @integer_zerop(ptr noundef %142) #24
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %167

145:                                              ; preds = %137
  %146 = icmp eq i32 %1, 102
  %147 = zext i1 %146 to i32
  %148 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.29, i32 noundef %147) #24
  %149 = call ptr @constant_boolean_node(i32 noundef %147, ptr noundef %2)
  br label %196

150:                                              ; preds = %134
  %151 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %100, ptr noundef nonnull %4)
  %152 = load i64, ptr %7, align 8, !tbaa !24
  %153 = add nsw i64 %152, -1
  %154 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %155 = call ptr @build_int_cst(ptr noundef %154, i64 noundef %153) #24
  %156 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %151, ptr noundef %155)
  %157 = call i32 @integer_zerop(ptr noundef %156) #24
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %167

159:                                              ; preds = %150
  %160 = call i32 @integer_all_onesp(ptr noundef %156) #24
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %167

162:                                              ; preds = %159
  %163 = icmp eq i32 %1, 102
  %164 = zext i1 %163 to i32
  %165 = call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 0, ptr noundef nonnull @.str.29, i32 noundef %164) #24
  %166 = call ptr @constant_boolean_node(i32 noundef %164, ptr noundef %2)
  br label %196

167:                                              ; preds = %150, %159, %137
  %168 = load i64, ptr %7, align 8, !tbaa !24
  %169 = icmp eq i64 %168, 1
  br i1 %169, label %170, label %177

170:                                              ; preds = %167
  %171 = call i32 @integer_zerop(ptr noundef nonnull %4) #24
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %177

173:                                              ; preds = %170
  %174 = icmp eq i32 %1, 101
  %175 = select i1 %174, i32 102, i32 101
  %176 = call ptr @build_int_cst(ptr noundef %18, i64 noundef 0) #24
  br label %177

177:                                              ; preds = %173, %170, %167
  %178 = phi ptr [ %4, %170 ], [ %176, %173 ], [ %4, %167 ]
  %179 = phi i32 [ %1, %170 ], [ %175, %173 ], [ %1, %167 ]
  %180 = call fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef nonnull %22, ptr noundef %102, i64 noundef %107, i64 noundef %110, i32 noundef 1)
  %181 = load i32, ptr %14, align 4, !tbaa !21
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %186, label %183

183:                                              ; preds = %177
  %184 = load i64, ptr %180, align 8
  %185 = or i64 %184, 589824
  store i64 %185, ptr %180, align 8
  br label %186

186:                                              ; preds = %183, %177
  %187 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %102, ptr noundef %178)
  %188 = load i64, ptr %6, align 8, !tbaa !24
  %189 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %190 = call ptr @build_int_cst(ptr noundef %189, i64 noundef %188) #24
  %191 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %187, ptr noundef %190)
  %192 = call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %191, ptr noundef %127)
  %193 = call ptr @build2_stat(i32 noundef 89, ptr noundef %102, ptr noundef %180, ptr noundef %127) #24
  %194 = call ptr @build2_stat(i32 noundef %179, ptr noundef %2, ptr noundef %193, ptr noundef %192) #24
  %195 = getelementptr inbounds %struct.tree_exp, ptr %194, i64 0, i32 1
  store i32 %0, ptr %195, align 8, !tbaa !17
  br label %196

196:                                              ; preds = %162, %98, %83, %43, %46, %50, %54, %61, %5, %24, %38, %186, %145, %128
  %197 = phi ptr [ %194, %186 ], [ %149, %145 ], [ %166, %162 ], [ %133, %128 ], [ null, %38 ], [ null, %24 ], [ null, %5 ], [ null, %61 ], [ null, %54 ], [ null, %50 ], [ null, %46 ], [ null, %43 ], [ null, %83 ], [ null, %98 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %16) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %13) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %12) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %11) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %10) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %9) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %8) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  ret ptr %197
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @build_fold_indirect_ref_loc(i32 noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = tail call ptr @fold_indirect_ref_1(i32 noundef %0, ptr noundef %6, ptr noundef %1)
  %8 = icmp eq ptr %7, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = tail call ptr @build1_stat(i32 noundef 47, ptr noundef %6, ptr noundef nonnull %1) #24
  %11 = getelementptr inbounds %struct.tree_exp, ptr %10, i64 0, i32 1
  store i32 %0, ptr %11, align 8, !tbaa !17
  br label %12

12:                                               ; preds = %2, %9
  %13 = phi ptr [ %10, %9 ], [ %7, %2 ]
  ret ptr %13
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_expr_nonzero_p(ptr noundef %0) local_unnamed_addr #10 {
  %2 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %2) #24
  store i8 0, ptr %2, align 1, !tbaa !17
  %3 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %0, ptr noundef nonnull %2)
  %4 = load i8, ptr %2, align 1, !tbaa !17
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = load i32, ptr @fold_deferring_overflow_warnings, align 4, !tbaa !21
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %6
  %10 = load ptr, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  %11 = icmp eq ptr %10, null
  %12 = load i32, ptr @fold_deferred_overflow_code, align 4
  %13 = icmp ugt i32 %12, 4
  %14 = select i1 %11, i1 true, i1 %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %9
  store ptr @.str.33, ptr @fold_deferred_overflow_warning, align 8, !tbaa !6
  store i32 4, ptr @fold_deferred_overflow_code, align 4, !tbaa !17
  br label %21

16:                                               ; preds = %6
  %17 = load i32, ptr @warn_strict_overflow, align 4, !tbaa !21
  %18 = icmp slt i32 %17, 4
  br i1 %18, label %21, label %19

19:                                               ; preds = %16
  %20 = tail call zeroext i8 (i32, ptr, ...) @warning(i32 noundef 187, ptr noundef nonnull @.str.33) #24
  br label %21

21:                                               ; preds = %19, %16, %15, %9, %1
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %2) #24
  ret i8 %3
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %1) unnamed_addr #10 {
  %3 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %2
  %6 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %5
  %9 = load i64, ptr %1, align 8
  %10 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %9)
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %14, ptr noundef nonnull %1) #24
  %16 = getelementptr inbounds %struct.tree_exp, ptr %15, i64 0, i32 1
  store i32 %0, ptr %16, align 8, !tbaa !17
  br label %18

17:                                               ; preds = %2
  tail call void @protected_set_expr_location(ptr noundef %1, i32 noundef %0) #24
  br label %18

18:                                               ; preds = %12, %8, %5, %17
  %19 = phi ptr [ %1, %17 ], [ %15, %12 ], [ %1, %5 ], [ %1, %8 ]
  ret ptr %19
}

declare zeroext i8 @fixed_compare(i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @build_one_cst(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @extract_muldiv_1(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i8, align 1
  %7 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = load i64, ptr %0, align 8
  %10 = freeze i64 %9
  %11 = trunc i64 %10 to i32
  %12 = and i32 %11, 65535
  %13 = icmp eq ptr %3, null
  br i1 %13, label %46, label %14

14:                                               ; preds = %5
  %15 = load i64, ptr %3, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 14
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = tail call i32 @vector_type_mode(ptr noundef nonnull %3) #24
  br label %25

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.tree_type, ptr %3, i64 0, i32 6
  %22 = load i32, ptr %21, align 4
  %23 = lshr i32 %22, 16
  %24 = and i32 %23, 255
  br label %25

25:                                               ; preds = %20, %18
  %26 = phi i32 [ %19, %18 ], [ %24, %20 ]
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %27
  %29 = load i8, ptr %28, align 1, !tbaa !17
  %30 = load i64, ptr %8, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 14
  br i1 %32, label %33, label %35

33:                                               ; preds = %25
  %34 = tail call i32 @vector_type_mode(ptr noundef nonnull %8) #24
  br label %40

35:                                               ; preds = %25
  %36 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %37 = load i32, ptr %36, align 4
  %38 = lshr i32 %37, 16
  %39 = and i32 %38, 255
  br label %40

40:                                               ; preds = %35, %33
  %41 = phi i32 [ %34, %33 ], [ %39, %35 ]
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %42
  %44 = load i8, ptr %43, align 1, !tbaa !17
  %45 = icmp ugt i8 %29, %44
  br i1 %45, label %47, label %46

46:                                               ; preds = %40, %5
  br label %47

47:                                               ; preds = %40, %46
  %48 = phi ptr [ %8, %46 ], [ %3, %40 ]
  %49 = icmp eq i32 %12, %2
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #24
  %50 = tail call i32 @integer_zerop(ptr noundef %1) #24
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %582

52:                                               ; preds = %47
  %53 = and i64 %10, 65535
  %54 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %53
  %55 = load i32, ptr %54, align 4, !tbaa !17
  switch i32 %55, label %64 [
    i32 6, label %56
    i32 7, label %59
  ]

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  br label %64

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %63 = load ptr, ptr %62, align 8, !tbaa !17
  br label %64

64:                                               ; preds = %52, %56, %59
  %65 = phi ptr [ %61, %59 ], [ %58, %56 ], [ null, %52 ]
  %66 = phi ptr [ %63, %59 ], [ null, %56 ], [ null, %52 ]
  %67 = trunc i64 %10 to i16
  switch i16 %67, label %576 [
    i16 23, label %68
    i16 116, label %78
    i16 113, label %78
    i16 117, label %78
    i16 82, label %156
    i16 79, label %181
    i16 80, label %193
    i16 81, label %193
    i16 83, label %228
    i16 84, label %228
    i16 63, label %275
    i16 64, label %275
    i16 65, label %390
    i16 67, label %428
    i16 68, label %428
    i16 69, label %428
    i16 70, label %428
    i16 76, label %428
  ]

68:                                               ; preds = %64
  %69 = icmp eq i32 %2, 65
  br i1 %69, label %74, label %70

70:                                               ; preds = %68
  %71 = tail call fastcc ptr @const_binop(i32 noundef 71, ptr noundef nonnull %0, ptr noundef %1)
  %72 = tail call i32 @integer_zerop(ptr noundef %71) #24
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %576, label %74

74:                                               ; preds = %70, %68
  %75 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %0)
  %76 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %1)
  %77 = tail call fastcc ptr @const_binop(i32 noundef %2, ptr noundef %75, ptr noundef %76)
  br label %582

78:                                               ; preds = %64, %64, %64
  %79 = load i64, ptr %65, align 8
  %80 = and i64 %79, 65535
  %81 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %80
  %82 = load i32, ptr %81, align 4, !tbaa !17
  switch i32 %82, label %83 [
    i32 5, label %86
    i32 6, label %86
    i32 7, label %86
    i32 9, label %86
    i32 10, label %86
  ]

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %85 = load ptr, ptr %84, align 8, !tbaa !17
  br label %137

86:                                               ; preds = %78, %78, %78, %78, %78
  %87 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %88 = load ptr, ptr %87, align 8, !tbaa !17
  %89 = load i64, ptr %88, align 8
  %90 = and i64 %89, 2097152
  %91 = icmp ne i64 %90, 0
  %92 = load i32, ptr @flag_wrapv, align 4
  %93 = icmp ne i32 %92, 0
  %94 = select i1 %91, i1 true, i1 %93
  br i1 %94, label %98, label %95

95:                                               ; preds = %86
  %96 = getelementptr inbounds %struct.tree_type, ptr %88, i64 0, i32 6
  %97 = load i32, ptr %96, align 4
  br label %112

98:                                               ; preds = %86
  %99 = and i64 %89, 65535
  %100 = icmp ne i64 %99, 8
  %101 = getelementptr inbounds %struct.tree_type, ptr %88, i64 0, i32 6
  %102 = load i32, ptr %101, align 4
  %103 = and i32 %102, 1024
  %104 = icmp eq i32 %103, 0
  %105 = select i1 %100, i1 true, i1 %104
  br i1 %105, label %106, label %112

106:                                              ; preds = %98
  %107 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 6
  %108 = load i32, ptr %107, align 4
  %109 = and i32 %108, 1023
  %110 = and i32 %102, 1023
  %111 = icmp ugt i32 %109, %110
  br i1 %111, label %576, label %112

112:                                              ; preds = %98, %95, %106
  %113 = phi i32 [ %97, %95 ], [ %102, %106 ], [ %102, %98 ]
  %114 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %115 = load i32, ptr %114, align 4
  %116 = and i32 %115, 1023
  %117 = and i32 %113, 1023
  %118 = icmp ult i32 %116, %117
  br i1 %118, label %576, label %119

119:                                              ; preds = %112
  %120 = icmp eq i32 %2, 65
  br i1 %120, label %126, label %121

121:                                              ; preds = %119
  %122 = load i64, ptr %48, align 8
  %123 = xor i64 %122, %89
  %124 = and i64 %123, 2097152
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %576

126:                                              ; preds = %121, %119
  %127 = load i32, ptr @flag_trapv, align 4
  %128 = icmp ne i32 %127, 0
  %129 = select i1 %94, i1 true, i1 %128
  %130 = load i32, ptr @flag_strict_overflow, align 4
  %131 = icmp eq i32 %130, 0
  %132 = select i1 %129, i1 true, i1 %131
  br i1 %132, label %137, label %133

133:                                              ; preds = %126
  %134 = load i64, ptr %8, align 8
  %135 = and i64 %134, 2097152
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %576

137:                                              ; preds = %83, %133, %126
  %138 = phi ptr [ %85, %83 ], [ %88, %133 ], [ %88, %126 ]
  %139 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %138, ptr noundef %1)
  %140 = icmp eq ptr %139, null
  br i1 %140, label %576, label %141

141:                                              ; preds = %137
  %142 = load i64, ptr %139, align 8
  %143 = and i64 %142, 134283263
  %144 = icmp eq i64 %143, 23
  br i1 %144, label %145, label %576

145:                                              ; preds = %141
  %146 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %147 = icmp sgt i32 %146, 3
  br i1 %147, label %576, label %148

148:                                              ; preds = %145
  %149 = icmp eq i32 %2, 65
  %150 = select i1 %149, ptr %48, ptr null
  %151 = add nsw i32 %146, 1
  store i32 %151, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %152 = tail call fastcc ptr @extract_muldiv_1(ptr noundef nonnull %65, ptr noundef nonnull %139, i32 noundef %2, ptr noundef %150, ptr noundef %4)
  %153 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %154 = add nsw i32 %153, -1
  store i32 %154, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %155 = icmp eq ptr %152, null
  br i1 %155, label %576, label %582

156:                                              ; preds = %64
  %157 = load i64, ptr %48, align 8
  %158 = and i64 %157, 2097152
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %178, label %160

160:                                              ; preds = %156
  %161 = load i64, ptr %8, align 8
  %162 = and i64 %161, 2097152
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %178

164:                                              ; preds = %160
  %165 = tail call ptr @signed_type_for(ptr noundef nonnull %48) #24
  %166 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %167 = icmp sgt i32 %166, 3
  br i1 %167, label %576, label %168

168:                                              ; preds = %164
  %169 = add nsw i32 %166, 1
  store i32 %169, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %170 = tail call fastcc ptr @extract_muldiv_1(ptr noundef %65, ptr noundef %1, i32 noundef %2, ptr noundef %165, ptr noundef %4)
  %171 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %172 = add nsw i32 %171, -1
  store i32 %172, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %173 = icmp eq ptr %170, null
  br i1 %173, label %576, label %174

174:                                              ; preds = %168
  %175 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %165, ptr noundef nonnull %170)
  %176 = tail call ptr @fold_build1_stat_loc(i32 noundef 0, i32 noundef 82, ptr noundef %165, ptr noundef %175)
  %177 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %176)
  br label %582

178:                                              ; preds = %160, %156
  %179 = tail call i32 @tree_int_cst_sgn(ptr noundef %1) #24
  %180 = icmp eq i32 %179, -1
  br i1 %180, label %576, label %181

181:                                              ; preds = %178, %64
  %182 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %183 = icmp sgt i32 %182, 3
  br i1 %183, label %576, label %184

184:                                              ; preds = %181
  %185 = add nsw i32 %182, 1
  store i32 %185, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %186 = tail call fastcc ptr @extract_muldiv_1(ptr noundef %65, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  %187 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %188 = add nsw i32 %187, -1
  store i32 %188, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %189 = icmp eq ptr %186, null
  br i1 %189, label %576, label %190

190:                                              ; preds = %184
  %191 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %186)
  %192 = tail call ptr @fold_build1_stat_loc(i32 noundef 0, i32 noundef %12, ptr noundef %48, ptr noundef %191)
  br label %582

193:                                              ; preds = %64, %64
  %194 = load i64, ptr %48, align 8
  %195 = load i64, ptr %8, align 8
  %196 = xor i64 %195, %194
  %197 = and i64 %196, 2097152
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %576

199:                                              ; preds = %193
  store i8 0, ptr %6, align 1, !tbaa !17
  %200 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %201 = icmp sgt i32 %200, 3
  br i1 %201, label %576, label %202

202:                                              ; preds = %199
  %203 = add nsw i32 %200, 1
  store i32 %203, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %204 = call fastcc ptr @extract_muldiv_1(ptr noundef %65, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef nonnull %6)
  %205 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %206 = add nsw i32 %205, -1
  store i32 %206, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %207 = icmp eq ptr %204, null
  %208 = icmp sgt i32 %205, 4
  %209 = select i1 %207, i1 true, i1 %208
  br i1 %209, label %576, label %210

210:                                              ; preds = %202
  store i32 %205, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %211 = call fastcc ptr @extract_muldiv_1(ptr noundef %66, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef nonnull %6)
  %212 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %213 = add nsw i32 %212, -1
  store i32 %213, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %214 = icmp eq ptr %211, null
  br i1 %214, label %576, label %215

215:                                              ; preds = %210
  %216 = call i32 @tree_int_cst_sgn(ptr noundef %1) #24
  %217 = icmp slt i32 %216, 0
  %218 = icmp eq i32 %12, 80
  %219 = select i1 %218, i32 81, i32 80
  %220 = select i1 %217, i32 %219, i32 %12
  %221 = load i8, ptr %6, align 1, !tbaa !17
  %222 = icmp eq i8 %221, 0
  br i1 %222, label %224, label %223

223:                                              ; preds = %215
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %224

224:                                              ; preds = %223, %215
  %225 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef nonnull %204)
  %226 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef nonnull %211)
  %227 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %220, ptr noundef nonnull %48, ptr noundef %225, ptr noundef %226)
  br label %582

228:                                              ; preds = %64, %64
  %229 = load i64, ptr %66, align 8
  %230 = and i64 %229, 65535
  %231 = icmp eq i64 %230, 23
  br i1 %231, label %232, label %576

232:                                              ; preds = %228
  %233 = icmp eq i32 %12, 84
  br i1 %233, label %240, label %234

234:                                              ; preds = %232
  %235 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %236 = load ptr, ptr %235, align 8, !tbaa !17
  %237 = load i64, ptr %236, align 8
  %238 = and i64 %237, 2097152
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %576, label %240

240:                                              ; preds = %234, %232
  %241 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 18), align 16, !tbaa !6
  %242 = getelementptr inbounds %struct.tree_common, ptr %241, i64 0, i32 2
  %243 = load ptr, ptr %242, align 8, !tbaa !17
  %244 = getelementptr inbounds %struct.tree_type, ptr %243, i64 0, i32 6
  %245 = load i32, ptr %244, align 4
  %246 = and i32 %245, 1023
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds %struct.tree_int_cst, ptr %66, i64 0, i32 1
  %249 = load i64, ptr %248, align 8, !tbaa !17
  %250 = icmp ult i64 %249, %247
  br i1 %250, label %251, label %576

251:                                              ; preds = %240
  %252 = getelementptr inbounds %struct.tree_int_cst, ptr %66, i64 0, i32 1, i32 1
  %253 = load i64, ptr %252, align 8, !tbaa !17
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %576

255:                                              ; preds = %251
  %256 = tail call fastcc ptr @const_binop(i32 noundef 83, ptr noundef nonnull %241, ptr noundef nonnull %66)
  %257 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %256)
  %258 = icmp eq ptr %257, null
  br i1 %258, label %576, label %259

259:                                              ; preds = %255
  %260 = load i64, ptr %257, align 8
  %261 = and i64 %260, 134217728
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %576

263:                                              ; preds = %259
  %264 = icmp eq i32 %12, 83
  %265 = select i1 %264, i32 65, i32 69
  %266 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %65)
  %267 = tail call ptr @build2_stat(i32 noundef %265, ptr noundef %48, ptr noundef %266, ptr noundef nonnull %257) #24
  %268 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %269 = icmp sgt i32 %268, 3
  br i1 %269, label %582, label %270

270:                                              ; preds = %263
  %271 = add nsw i32 %268, 1
  store i32 %271, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %272 = tail call fastcc ptr @extract_muldiv_1(ptr noundef %267, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  %273 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %274 = add nsw i32 %273, -1
  store i32 %274, ptr @extract_muldiv.depth, align 4, !tbaa !21
  br label %582

275:                                              ; preds = %64, %64
  store i8 0, ptr %6, align 1, !tbaa !17
  %276 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %277 = icmp sgt i32 %276, 3
  br i1 %277, label %307, label %278

278:                                              ; preds = %275
  %279 = add nsw i32 %276, 1
  store i32 %279, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %280 = call fastcc ptr @extract_muldiv_1(ptr noundef %65, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef nonnull %6)
  %281 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %282 = add nsw i32 %281, -1
  store i32 %282, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %283 = icmp sgt i32 %281, 4
  br i1 %283, label %307, label %284

284:                                              ; preds = %278
  store i32 %281, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %285 = call fastcc ptr @extract_muldiv_1(ptr noundef %66, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef nonnull %6)
  %286 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %287 = add nsw i32 %286, -1
  store i32 %287, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %288 = icmp ne ptr %280, null
  %289 = icmp ne ptr %285, null
  %290 = select i1 %288, i1 %289, i1 false
  br i1 %290, label %291, label %307

291:                                              ; preds = %284
  %292 = icmp eq i32 %2, 65
  br i1 %292, label %299, label %293

293:                                              ; preds = %291
  %294 = call i32 @multiple_of_p(ptr noundef %48, ptr noundef %65, ptr noundef %1)
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %307, label %296

296:                                              ; preds = %293
  %297 = call i32 @multiple_of_p(ptr noundef %48, ptr noundef %66, ptr noundef %1)
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %307, label %299

299:                                              ; preds = %296, %291
  %300 = load i8, ptr %6, align 1, !tbaa !17
  %301 = icmp eq i8 %300, 0
  br i1 %301, label %303, label %302

302:                                              ; preds = %299
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %303

303:                                              ; preds = %302, %299
  %304 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %280)
  %305 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %285)
  %306 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %12, ptr noundef %48, ptr noundef %304, ptr noundef %305)
  br label %582

307:                                              ; preds = %275, %278, %296, %293, %284
  %308 = phi ptr [ %285, %296 ], [ %285, %293 ], [ %285, %284 ], [ null, %278 ], [ null, %275 ]
  %309 = phi ptr [ %280, %296 ], [ %280, %293 ], [ %280, %284 ], [ %280, %278 ], [ null, %275 ]
  %310 = icmp eq i32 %12, 64
  br i1 %310, label %311, label %317

311:                                              ; preds = %307
  %312 = call fastcc ptr @negate_expr(ptr noundef %66)
  %313 = load i64, ptr %65, align 8
  %314 = and i64 %313, 65535
  %315 = icmp eq i64 %314, 23
  br i1 %315, label %316, label %317

316:                                              ; preds = %311
  br label %317

317:                                              ; preds = %311, %316, %307
  %318 = phi ptr [ %308, %316 ], [ %309, %311 ], [ %309, %307 ]
  %319 = phi i32 [ 63, %316 ], [ 63, %311 ], [ %12, %307 ]
  %320 = phi ptr [ %312, %316 ], [ %65, %311 ], [ %65, %307 ]
  %321 = phi ptr [ %65, %316 ], [ %312, %311 ], [ %66, %307 ]
  %322 = load i64, ptr %321, align 8
  %323 = and i64 %322, 65535
  %324 = icmp eq i64 %323, 23
  br i1 %324, label %325, label %576

325:                                              ; preds = %317
  %326 = call i32 @tree_int_cst_sgn(ptr noundef nonnull %321) #24
  %327 = icmp slt i32 %326, 0
  br i1 %327, label %331, label %328

328:                                              ; preds = %325
  %329 = call i32 @tree_int_cst_sgn(ptr noundef %1) #24
  %330 = icmp slt i32 %329, 0
  br i1 %330, label %331, label %333

331:                                              ; preds = %328, %325
  switch i32 %2, label %576 [
    i32 68, label %336
    i32 69, label %332
    i32 65, label %341
    i32 72, label %335
    i32 73, label %335
  ]

332:                                              ; preds = %331
  br label %336

333:                                              ; preds = %328
  %334 = icmp eq i32 %2, 65
  br i1 %334, label %341, label %335

335:                                              ; preds = %331, %331, %333
  br label %336

336:                                              ; preds = %331, %335, %332
  %337 = phi i32 [ 69, %331 ], [ 68, %332 ], [ %2, %335 ]
  %338 = call fastcc ptr @const_binop(i32 noundef 71, ptr noundef nonnull %321, ptr noundef %1)
  %339 = call i32 @integer_zerop(ptr noundef %338) #24
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %576, label %341

341:                                              ; preds = %331, %336, %333
  %342 = phi i1 [ false, %336 ], [ true, %333 ], [ true, %331 ]
  %343 = phi i32 [ %337, %336 ], [ 65, %333 ], [ %2, %331 ]
  %344 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %321)
  %345 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %1)
  %346 = call fastcc ptr @const_binop(i32 noundef %343, ptr noundef %344, ptr noundef %345)
  %347 = icmp eq ptr %346, null
  br i1 %347, label %576, label %348

348:                                              ; preds = %341
  %349 = load i64, ptr %346, align 8
  %350 = and i64 %349, 134217728
  %351 = icmp eq i64 %350, 0
  %352 = load i64, ptr %48, align 8
  %353 = and i64 %352, 2097152
  br i1 %351, label %359, label %354

354:                                              ; preds = %348
  %355 = icmp ne i64 %353, 0
  %356 = load i32, ptr @flag_wrapv, align 4
  %357 = icmp ne i32 %356, 0
  %358 = select i1 %355, i1 true, i1 %357
  br i1 %358, label %359, label %576

359:                                              ; preds = %348, %354
  %360 = icmp eq i64 %353, 0
  br i1 %360, label %373, label %361

361:                                              ; preds = %359
  %362 = and i64 %352, 65535
  %363 = icmp eq i64 %362, 8
  br i1 %363, label %364, label %371

364:                                              ; preds = %361
  %365 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 6
  %366 = load i32, ptr %365, align 4
  %367 = and i32 %366, 1024
  %368 = icmp ne i32 %367, 0
  %369 = icmp eq ptr %48, %8
  %370 = select i1 %368, i1 true, i1 %369
  br i1 %370, label %373, label %576

371:                                              ; preds = %361
  %372 = icmp eq ptr %48, %8
  br i1 %372, label %373, label %576

373:                                              ; preds = %371, %364, %359
  %374 = icmp eq ptr %318, null
  br i1 %374, label %384, label %375

375:                                              ; preds = %373
  %376 = load i64, ptr %318, align 8
  %377 = trunc i64 %376 to i32
  %378 = and i32 %377, 65535
  %379 = icmp ne i32 %378, %343
  %380 = or i1 %342, %379
  br i1 %380, label %381, label %384

381:                                              ; preds = %375
  %382 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef nonnull %318)
  %383 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %319, ptr noundef nonnull %48, ptr noundef %382, ptr noundef nonnull %346)
  br label %582

384:                                              ; preds = %375, %373
  br i1 %342, label %385, label %576

385:                                              ; preds = %384
  %386 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %320)
  %387 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %1)
  %388 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef 65, ptr noundef nonnull %48, ptr noundef %386, ptr noundef %387)
  %389 = call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %319, ptr noundef nonnull %48, ptr noundef %388, ptr noundef nonnull %346)
  br label %582

390:                                              ; preds = %64
  %391 = add i32 %2, -71
  %392 = icmp ult i32 %391, 4
  br i1 %392, label %393, label %428

393:                                              ; preds = %390
  %394 = load ptr, ptr %7, align 8, !tbaa !17
  %395 = load i64, ptr %394, align 8
  %396 = and i64 %395, 2097152
  %397 = icmp eq i64 %396, 0
  %398 = load i32, ptr @flag_wrapv, align 4
  %399 = icmp eq i32 %398, 0
  %400 = select i1 %397, i1 %399, i1 false
  %401 = load i32, ptr @flag_trapv, align 4
  %402 = icmp eq i32 %401, 0
  %403 = select i1 %400, i1 %402, i1 false
  %404 = load i32, ptr @flag_strict_overflow, align 4
  %405 = icmp ne i32 %404, 0
  %406 = select i1 %403, i1 %405, i1 false
  br i1 %406, label %415, label %407

407:                                              ; preds = %393
  %408 = and i64 %395, 65535
  %409 = icmp eq i64 %408, 8
  br i1 %409, label %410, label %428

410:                                              ; preds = %407
  %411 = getelementptr inbounds %struct.tree_type, ptr %394, i64 0, i32 6
  %412 = load i32, ptr %411, align 4
  %413 = and i32 %412, 1024
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %428, label %415

415:                                              ; preds = %393, %410
  %416 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %417 = load ptr, ptr %416, align 8, !tbaa !17
  %418 = load i64, ptr %417, align 8
  %419 = and i64 %418, 65535
  %420 = icmp eq i64 %419, 23
  br i1 %420, label %421, label %428

421:                                              ; preds = %415
  %422 = tail call fastcc ptr @const_binop(i32 noundef 71, ptr noundef %66, ptr noundef %1)
  %423 = tail call i32 @integer_zerop(ptr noundef %422) #24
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %428, label %425

425:                                              ; preds = %421
  store i8 1, ptr %4, align 1, !tbaa !17
  %426 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %427 = tail call ptr @omit_one_operand_loc(i32 noundef 0, ptr noundef %8, ptr noundef %426, ptr noundef %65)
  br label %582

428:                                              ; preds = %407, %410, %415, %421, %390, %64, %64, %64, %64, %64
  br i1 %49, label %429, label %446

429:                                              ; preds = %428
  %430 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %431 = icmp sgt i32 %430, 3
  br i1 %431, label %446, label %432

432:                                              ; preds = %429
  %433 = add nsw i32 %430, 1
  store i32 %433, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %434 = tail call fastcc ptr @extract_muldiv_1(ptr noundef %65, ptr noundef %1, i32 noundef %2, ptr noundef %3, ptr noundef %4)
  %435 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %436 = add nsw i32 %435, -1
  store i32 %436, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %437 = icmp eq ptr %434, null
  br i1 %437, label %446, label %438

438:                                              ; preds = %432
  %439 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %434)
  %440 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %66)
  %441 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %2, ptr noundef %48, ptr noundef %439, ptr noundef %440)
  %442 = icmp eq ptr %441, null
  br i1 %442, label %443, label %582

443:                                              ; preds = %438
  %444 = tail call ptr @build2_stat(i32 noundef %2, ptr noundef %48, ptr noundef %439, ptr noundef %440) #24
  %445 = getelementptr inbounds %struct.tree_exp, ptr %444, i64 0, i32 1
  store i32 0, ptr %445, align 8, !tbaa !17
  br label %582

446:                                              ; preds = %429, %432, %428
  %447 = icmp eq i32 %12, 65
  %448 = icmp eq i32 %2, 65
  %449 = and i1 %448, %447
  br i1 %449, label %450, label %467

450:                                              ; preds = %446
  %451 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %452 = icmp sgt i32 %451, 3
  br i1 %452, label %467, label %453

453:                                              ; preds = %450
  %454 = add nsw i32 %451, 1
  store i32 %454, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %455 = tail call fastcc ptr @extract_muldiv_1(ptr noundef %66, ptr noundef %1, i32 noundef 65, ptr noundef %3, ptr noundef %4)
  %456 = load i32, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %457 = add nsw i32 %456, -1
  store i32 %457, ptr @extract_muldiv.depth, align 4, !tbaa !21
  %458 = icmp eq ptr %455, null
  br i1 %458, label %467, label %459

459:                                              ; preds = %453
  %460 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %65)
  %461 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %455)
  %462 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef 65, ptr noundef %48, ptr noundef %460, ptr noundef %461)
  %463 = icmp eq ptr %462, null
  br i1 %463, label %464, label %582

464:                                              ; preds = %459
  %465 = tail call ptr @build2_stat(i32 noundef 65, ptr noundef %48, ptr noundef %460, ptr noundef %461) #24
  %466 = getelementptr inbounds %struct.tree_exp, ptr %465, i64 0, i32 1
  store i32 0, ptr %466, align 8, !tbaa !17
  br label %582

467:                                              ; preds = %450, %453, %446
  %468 = load i64, ptr %66, align 8
  %469 = and i64 %468, 65535
  %470 = icmp eq i64 %469, 23
  br i1 %470, label %471, label %582

471:                                              ; preds = %467
  br i1 %49, label %472, label %502

472:                                              ; preds = %471
  %473 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef nonnull %66)
  %474 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %48, ptr noundef %1)
  %475 = tail call ptr @int_const_binop(i32 noundef 65, ptr noundef %473, ptr noundef %474, i32 noundef 1)
  %476 = icmp eq ptr %475, null
  br i1 %476, label %502, label %477

477:                                              ; preds = %472
  %478 = getelementptr inbounds %struct.tree_int_cst, ptr %475, i64 0, i32 1
  %479 = load i64, ptr %478, align 8, !tbaa !17
  %480 = getelementptr inbounds %struct.tree_int_cst, ptr %475, i64 0, i32 1, i32 1
  %481 = load i64, ptr %480, align 8, !tbaa !17
  %482 = load i64, ptr %48, align 8
  %483 = and i64 %482, 2097152
  %484 = icmp ne i64 %483, 0
  %485 = icmp ne i32 %2, 65
  %486 = and i1 %485, %484
  %487 = select i1 %486, i32 -1, i32 1
  %488 = load i64, ptr %475, align 8
  %489 = trunc i64 %488 to i32
  %490 = lshr i32 %489, 27
  %491 = trunc i32 %490 to i8
  %492 = and i8 %491, 1
  %493 = tail call ptr @force_fit_type_double(ptr noundef %48, i64 noundef %479, i64 noundef %481, i32 noundef %487, i8 noundef zeroext %492)
  %494 = icmp eq ptr %493, null
  br i1 %494, label %502, label %495

495:                                              ; preds = %477
  %496 = load i64, ptr %493, align 8
  %497 = and i64 %496, 134217728
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %499, label %502

499:                                              ; preds = %495
  %500 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %65)
  %501 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %2, ptr noundef nonnull %48, ptr noundef %500, ptr noundef nonnull %493)
  br label %582

502:                                              ; preds = %495, %477, %472, %471
  %503 = load i64, ptr %48, align 8
  %504 = and i64 %503, 2097152
  %505 = icmp eq i64 %504, 0
  %506 = load i32, ptr @flag_wrapv, align 4
  %507 = icmp eq i32 %506, 0
  %508 = select i1 %505, i1 %507, i1 false
  %509 = load i32, ptr @flag_trapv, align 4
  %510 = icmp eq i32 %509, 0
  %511 = select i1 %508, i1 %510, i1 false
  %512 = load i32, ptr @flag_strict_overflow, align 4
  %513 = icmp ne i32 %512, 0
  %514 = select i1 %511, i1 %513, i1 false
  br i1 %514, label %523, label %515

515:                                              ; preds = %502
  %516 = and i64 %503, 65535
  %517 = icmp eq i64 %516, 8
  br i1 %517, label %518, label %576

518:                                              ; preds = %515
  %519 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 6
  %520 = load i32, ptr %519, align 4
  %521 = and i32 %520, 1024
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %576, label %523

523:                                              ; preds = %502, %518
  %524 = icmp eq i32 %12, 76
  %525 = and i1 %448, %524
  br i1 %525, label %530, label %526

526:                                              ; preds = %523
  br i1 %447, label %527, label %576

527:                                              ; preds = %526
  %528 = add i32 %2, -65
  %529 = icmp ult i32 %528, 10
  br i1 %529, label %577, label %530

530:                                              ; preds = %577, %527, %523
  %531 = tail call fastcc ptr @const_binop(i32 noundef 71, ptr noundef nonnull %66, ptr noundef %1)
  %532 = tail call i32 @integer_zerop(ptr noundef %531) #24
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %553, label %534

534:                                              ; preds = %530
  %535 = load i64, ptr %48, align 8
  %536 = and i64 %535, 2097152
  %537 = icmp eq i64 %536, 0
  %538 = load i32, ptr @flag_wrapv, align 4
  %539 = icmp eq i32 %538, 0
  %540 = select i1 %537, i1 %539, i1 false
  %541 = load i32, ptr @flag_trapv, align 4
  %542 = icmp eq i32 %541, 0
  %543 = select i1 %540, i1 %542, i1 false
  %544 = load i32, ptr @flag_strict_overflow, align 4
  %545 = icmp ne i32 %544, 0
  %546 = select i1 %543, i1 %545, i1 false
  br i1 %546, label %547, label %548

547:                                              ; preds = %534
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %548

548:                                              ; preds = %547, %534
  %549 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %65)
  %550 = tail call fastcc ptr @const_binop(i32 noundef 67, ptr noundef nonnull %66, ptr noundef %1)
  %551 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %550)
  %552 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %12, ptr noundef nonnull %48, ptr noundef %549, ptr noundef %551)
  br label %582

553:                                              ; preds = %530
  %554 = tail call fastcc ptr @const_binop(i32 noundef 71, ptr noundef %1, ptr noundef nonnull %66)
  %555 = tail call i32 @integer_zerop(ptr noundef %554) #24
  %556 = icmp eq i32 %555, 0
  br i1 %556, label %576, label %557

557:                                              ; preds = %553
  %558 = load i64, ptr %48, align 8
  %559 = and i64 %558, 2097152
  %560 = icmp eq i64 %559, 0
  %561 = load i32, ptr @flag_wrapv, align 4
  %562 = icmp eq i32 %561, 0
  %563 = select i1 %560, i1 %562, i1 false
  %564 = load i32, ptr @flag_trapv, align 4
  %565 = icmp eq i32 %564, 0
  %566 = select i1 %563, i1 %565, i1 false
  %567 = load i32, ptr @flag_strict_overflow, align 4
  %568 = icmp ne i32 %567, 0
  %569 = select i1 %566, i1 %568, i1 false
  br i1 %569, label %570, label %571

570:                                              ; preds = %557
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %571

571:                                              ; preds = %570, %557
  %572 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %65)
  %573 = tail call fastcc ptr @const_binop(i32 noundef 67, ptr noundef %1, ptr noundef nonnull %66)
  %574 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %48, ptr noundef %573)
  %575 = tail call ptr @fold_build2_stat_loc(i32 noundef 0, i32 noundef %2, ptr noundef nonnull %48, ptr noundef %572, ptr noundef %574)
  br label %582

576:                                              ; preds = %331, %199, %181, %164, %168, %145, %526, %364, %64, %515, %518, %553, %384, %371, %336, %341, %354, %317, %228, %234, %240, %251, %255, %259, %202, %210, %193, %184, %178, %137, %141, %148, %106, %112, %121, %133, %70
  br label %582

577:                                              ; preds = %527
  %578 = trunc i32 %528 to i16
  %579 = lshr i16 961, %578
  %580 = and i16 %579, 1
  %581 = icmp eq i16 %580, 0
  br i1 %581, label %530, label %582

582:                                              ; preds = %577, %464, %459, %443, %438, %270, %263, %174, %467, %148, %47, %576, %571, %548, %499, %425, %385, %381, %303, %224, %190, %74
  %583 = phi ptr [ null, %576 ], [ %552, %548 ], [ %575, %571 ], [ %501, %499 ], [ %427, %425 ], [ %306, %303 ], [ %383, %381 ], [ %389, %385 ], [ %227, %224 ], [ %192, %190 ], [ %177, %174 ], [ %77, %74 ], [ null, %47 ], [ %152, %148 ], [ null, %467 ], [ %272, %270 ], [ null, %263 ], [ %441, %438 ], [ %444, %443 ], [ %462, %459 ], [ %465, %464 ], [ null, %577 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #24
  ret ptr %583
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @simple_operand_p(ptr noundef %0) unnamed_addr #10 {
  %2 = tail call ptr @tree_strip_nop_conversions(ptr noundef %0) #24
  %3 = load i64, ptr %2, align 8
  %4 = and i64 %3, 65535
  %5 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %4
  %6 = load i32, ptr %5, align 4, !tbaa !17
  %7 = icmp eq i32 %6, 1
  %8 = icmp eq i64 %4, 141
  %9 = or i1 %7, %8
  br i1 %9, label %29, label %10

10:                                               ; preds = %1
  %11 = icmp eq i32 %6, 3
  %12 = and i64 %3, 786432
  %13 = icmp eq i64 %12, 0
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %29

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.tree_decl_common, ptr %2, i64 0, i32 2
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %3, 134217728
  %19 = and i64 %17, 33554688
  %20 = or i64 %19, %18
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %15
  %23 = and i64 %3, 67108864
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %22
  %26 = trunc i64 %17 to i32
  %27 = lshr i32 %26, 24
  %28 = and i32 %27, 1
  br label %29

29:                                               ; preds = %10, %15, %25, %22, %1
  %30 = phi i32 [ 1, %1 ], [ 0, %15 ], [ 0, %10 ], [ 1, %22 ], [ %28, %25 ]
  ret i32 %30
}

declare zeroext i8 @contains_placeholder_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @decode_field_reference(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr nocapture noundef writeonly %7, ptr nocapture noundef writeonly %8) unnamed_addr #10 {
  %10 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #24
  %11 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = and i32 %14, 65535
  %16 = add nsw i32 %15, -6
  %17 = icmp ult i32 %16, 3
  br i1 %17, label %18, label %96

18:                                               ; preds = %9
  %19 = load i64, ptr %1, align 8
  %20 = trunc i64 %19 to i16
  switch i16 %20, label %22 [
    i16 116, label %21
    i16 113, label %21
    i16 117, label %21
  ]

21:                                               ; preds = %18, %18, %18
  br label %22

22:                                               ; preds = %18, %21
  %23 = phi ptr [ %12, %21 ], [ null, %18 ]
  %24 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %1) #24
  %25 = load i64, ptr %24, align 8
  %26 = and i64 %25, 65535
  %27 = icmp eq i64 %26, 89
  br i1 %27, label %28, label %38

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.tree_exp, ptr %24, i64 0, i32 3
  %30 = getelementptr inbounds %struct.tree_exp, ptr %24, i64 1
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = load ptr, ptr %29, align 8, !tbaa !17
  %33 = tail call ptr @tree_strip_nop_conversions(ptr noundef %32) #24
  %34 = tail call ptr @tree_strip_nop_conversions(ptr noundef %31) #24
  %35 = load i64, ptr %34, align 8
  %36 = and i64 %35, 65535
  %37 = icmp eq i64 %36, 23
  br i1 %37, label %38, label %96

38:                                               ; preds = %28, %22
  %39 = phi ptr [ %34, %28 ], [ null, %22 ]
  %40 = phi ptr [ %33, %28 ], [ %24, %22 ]
  %41 = call ptr @get_inner_reference(ptr noundef %40, ptr noundef %2, ptr noundef %3, ptr noundef nonnull %10, ptr noundef %4, ptr noundef %5, ptr noundef %6, i8 noundef zeroext 0) #24
  %42 = icmp eq ptr %41, %40
  %43 = icmp eq ptr %39, null
  %44 = and i1 %43, %42
  br i1 %44, label %96, label %45

45:                                               ; preds = %38
  %46 = load i64, ptr %2, align 8, !tbaa !24
  %47 = icmp slt i64 %46, 0
  %48 = load ptr, ptr %10, align 8
  %49 = icmp ne ptr %48, null
  %50 = select i1 %47, i1 true, i1 %49
  br i1 %50, label %96, label %51

51:                                               ; preds = %45
  %52 = load i64, ptr %41, align 8
  %53 = and i64 %52, 65535
  %54 = icmp eq i64 %53, 62
  br i1 %54, label %96, label %55

55:                                               ; preds = %51
  %56 = icmp eq ptr %23, null
  br i1 %56, label %68, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.tree_type, ptr %23, i64 0, i32 6
  %59 = load i32, ptr %58, align 4
  %60 = and i32 %59, 1023
  %61 = zext i32 %60 to i64
  %62 = icmp eq i64 %46, %61
  br i1 %62, label %63, label %68

63:                                               ; preds = %57
  %64 = load i64, ptr %23, align 8
  %65 = trunc i64 %64 to i32
  %66 = lshr i32 %65, 21
  %67 = and i32 %66, 1
  store i32 %67, ptr %5, align 4, !tbaa !21
  br label %68

68:                                               ; preds = %63, %57, %55
  %69 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 34, i32 3), align 8, !tbaa !50
  %70 = trunc i64 %46 to i32
  %71 = call ptr %69(i32 noundef %70, i32 noundef 1) #24
  %72 = getelementptr inbounds %struct.tree_type, ptr %71, i64 0, i32 6
  %73 = load i32, ptr %72, align 4
  %74 = and i32 %73, 1023
  %75 = call ptr @build_int_cst_type(ptr noundef %71, i64 noundef -1) #24
  %76 = zext i32 %74 to i64
  %77 = load i64, ptr %2, align 8, !tbaa !24
  %78 = sub nsw i64 %76, %77
  %79 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %80 = call ptr @build_int_cst(ptr noundef %79, i64 noundef %78) #24
  %81 = call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %75, ptr noundef %80)
  %82 = load i64, ptr %2, align 8, !tbaa !24
  %83 = sub nsw i64 %76, %82
  %84 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %85 = call ptr @build_int_cst(ptr noundef %84, i64 noundef %83) #24
  %86 = call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %81, ptr noundef %85)
  br i1 %43, label %94, label %87

87:                                               ; preds = %68
  %88 = call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %71, ptr noundef nonnull %39)
  %89 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %71, ptr noundef %88, ptr noundef %86)
  %90 = icmp eq ptr %89, null
  br i1 %90, label %91, label %94

91:                                               ; preds = %87
  %92 = call ptr @build2_stat(i32 noundef 89, ptr noundef nonnull %71, ptr noundef %88, ptr noundef %86) #24
  %93 = getelementptr inbounds %struct.tree_exp, ptr %92, i64 0, i32 1
  store i32 %0, ptr %93, align 8, !tbaa !17
  br label %94

94:                                               ; preds = %91, %87, %68
  %95 = phi ptr [ %86, %68 ], [ %89, %87 ], [ %92, %91 ]
  store ptr %95, ptr %7, align 8, !tbaa !6
  store ptr %39, ptr %8, align 8, !tbaa !6
  br label %96

96:                                               ; preds = %9, %45, %51, %38, %28, %94
  %97 = phi ptr [ %41, %94 ], [ null, %9 ], [ null, %28 ], [ null, %38 ], [ null, %51 ], [ null, %45 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #24
  ret ptr %97
}

declare i32 @get_best_mode(i32 noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @unextend(ptr noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3) unnamed_addr #10 {
  %5 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = icmp eq i64 %8, 14
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call i32 @vector_type_mode(ptr noundef nonnull %6) #24
  br label %17

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = lshr i32 %14, 16
  %16 = and i32 %15, 255
  br label %17

17:                                               ; preds = %12, %10
  %18 = phi i32 [ %11, %10 ], [ %16, %12 ]
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %19
  %21 = load i8, ptr %20, align 1, !tbaa !17
  %22 = zext i8 %21 to i32
  %23 = shl nuw nsw i32 %22, 3
  %24 = icmp eq i32 %23, %1
  %25 = icmp ne i32 %2, 0
  %26 = or i1 %25, %24
  br i1 %26, label %71, label %27

27:                                               ; preds = %17
  %28 = add nsw i32 %1, -1
  %29 = sext i32 %28 to i64
  %30 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %31 = tail call ptr @build_int_cst(ptr noundef %30, i64 noundef %29) #24
  %32 = tail call fastcc ptr @const_binop(i32 noundef 84, ptr noundef nonnull %0, ptr noundef %31)
  %33 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %34 = tail call ptr @build_int_cst(ptr noundef %33, i64 noundef 1) #24
  %35 = tail call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %32, ptr noundef %34)
  %36 = load i64, ptr %6, align 8
  %37 = and i64 %36, 2097152
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %27
  %40 = tail call ptr @signed_type_for(ptr noundef nonnull %6) #24
  %41 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %40, ptr noundef %35)
  br label %42

42:                                               ; preds = %39, %27
  %43 = phi ptr [ %41, %39 ], [ %35, %27 ]
  %44 = add nsw i32 %23, -1
  %45 = sext i32 %44 to i64
  %46 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %47 = tail call ptr @build_int_cst(ptr noundef %46, i64 noundef %45) #24
  %48 = tail call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %43, ptr noundef %47)
  %49 = xor i32 %1, -1
  %50 = add i32 %23, %49
  %51 = sext i32 %50 to i64
  %52 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %53 = tail call ptr @build_int_cst(ptr noundef %52, i64 noundef %51) #24
  %54 = tail call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %48, ptr noundef %53)
  %55 = icmp eq ptr %3, null
  br i1 %55, label %60, label %56

56:                                               ; preds = %42
  %57 = load ptr, ptr %5, align 8, !tbaa !17
  %58 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %57, ptr noundef nonnull %3)
  %59 = tail call fastcc ptr @const_binop(i32 noundef 89, ptr noundef %54, ptr noundef %58)
  br label %60

60:                                               ; preds = %56, %42
  %61 = phi ptr [ %59, %56 ], [ %54, %42 ]
  %62 = load i64, ptr %6, align 8
  %63 = and i64 %62, 2097152
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %60
  %66 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %6, ptr noundef %61)
  br label %67

67:                                               ; preds = %65, %60
  %68 = phi ptr [ %66, %65 ], [ %61, %60 ]
  %69 = tail call fastcc ptr @const_binop(i32 noundef 88, ptr noundef nonnull %0, ptr noundef %68)
  %70 = tail call ptr @fold_convert_loc(i32 noundef 0, ptr noundef nonnull %6, ptr noundef %69)
  br label %71

71:                                               ; preds = %17, %67
  %72 = phi ptr [ %70, %67 ], [ %0, %17 ]
  ret ptr %72
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @make_bit_field_ref(i32 noundef %0, ptr noundef %1, ptr noundef %2, i64 noundef %3, i64 noundef %4, i32 noundef %5) unnamed_addr #10 {
  %7 = icmp eq i64 %4, 0
  br i1 %7, label %8, label %23

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = load i64, ptr %10, align 8
  %14 = trunc i64 %13 to i16
  switch i16 %14, label %23 [
    i16 6, label %15
    i16 7, label %15
    i16 8, label %15
    i16 10, label %15
    i16 12, label %15
  ]

15:                                               ; preds = %8, %8, %8, %8, %8
  %16 = tail call i32 @host_integerp(ptr noundef %12, i32 noundef 0) #24
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %15
  %19 = tail call i64 @tree_low_cst(ptr noundef %12, i32 noundef 0) #24
  %20 = icmp eq i64 %19, %3
  br i1 %20, label %21, label %23

21:                                               ; preds = %18
  %22 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %1)
  br label %48

23:                                               ; preds = %15, %18, %8, %6
  %24 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %25 = load i32, ptr %24, align 4
  %26 = and i32 %25, 1023
  %27 = zext i32 %26 to i64
  %28 = icmp eq i64 %27, %3
  br i1 %28, label %29, label %35

29:                                               ; preds = %23
  %30 = load i64, ptr %2, align 8
  %31 = icmp ne i32 %5, 0
  %32 = and i64 %30, 2097152
  %33 = icmp ne i64 %32, 0
  %34 = xor i1 %31, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %29, %23
  %36 = tail call ptr @build_nonstandard_integer_type(i64 noundef %3, i32 noundef 0) #24
  br label %37

37:                                               ; preds = %35, %29
  %38 = phi ptr [ %36, %35 ], [ %2, %29 ]
  %39 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %40 = tail call ptr @build_int_cst(ptr noundef %39, i64 noundef %3) #24
  %41 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %42 = tail call ptr @build_int_cst(ptr noundef %41, i64 noundef %4) #24
  %43 = tail call ptr @build3_stat(i32 noundef 42, ptr noundef %38, ptr noundef %1, ptr noundef %40, ptr noundef %42) #24
  %44 = getelementptr inbounds %struct.tree_exp, ptr %43, i64 0, i32 1
  store i32 %0, ptr %44, align 8, !tbaa !17
  %45 = icmp eq ptr %38, %2
  br i1 %45, label %48, label %46

46:                                               ; preds = %37
  %47 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %2, ptr noundef nonnull %43)
  br label %48

48:                                               ; preds = %21, %37, %46
  %49 = phi ptr [ %22, %21 ], [ %47, %46 ], [ %43, %37 ]
  ret ptr %49
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @all_ones_mask_p(ptr noundef %0, i32 noundef %1) unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %6 = load i32, ptr %5, align 4
  %7 = and i32 %6, 1023
  %8 = tail call ptr @signed_type_for(ptr noundef %4) #24
  %9 = tail call ptr @build_int_cst_type(ptr noundef %8, i64 noundef -1) #24
  %10 = sub i32 %7, %1
  %11 = zext i32 %10 to i64
  %12 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %13 = tail call ptr @build_int_cst(ptr noundef %12, i64 noundef %11) #24
  %14 = tail call fastcc ptr @const_binop(i32 noundef 83, ptr noundef %9, ptr noundef %13)
  %15 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %16 = tail call ptr @build_int_cst(ptr noundef %15, i64 noundef %11) #24
  %17 = tail call fastcc ptr @const_binop(i32 noundef 84, ptr noundef %14, ptr noundef %16)
  %18 = tail call i32 @tree_int_cst_equal(ptr noundef %0, ptr noundef %17) #24
  ret i32 %18
}

declare i32 @simple_cst_equal(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc zeroext i8 @pointer_may_wrap_p(ptr nocapture noundef readonly %0, ptr noundef readonly %1, i64 noundef %2) unnamed_addr #10 {
  %4 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %5 = load ptr, ptr %4, align 8, !tbaa !17
  %6 = load i64, ptr %5, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %54 [
    i16 10, label %8
    i16 12, label %8
  ]

8:                                                ; preds = %3, %3
  %9 = icmp slt i64 %2, 0
  br i1 %9, label %54, label %10

10:                                               ; preds = %8
  %11 = icmp eq ptr %1, null
  br i1 %11, label %21, label %12

12:                                               ; preds = %10
  %13 = load i64, ptr %1, align 8
  %14 = and i64 %13, 134283263
  %15 = icmp eq i64 %14, 23
  br i1 %15, label %16, label %54

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %18 = load i64, ptr %17, align 8, !tbaa !17
  %19 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %20 = load i64, ptr %19, align 8, !tbaa !17
  br label %21

21:                                               ; preds = %10, %16
  %22 = phi i64 [ %18, %16 ], [ 0, %10 ]
  %23 = phi i64 [ %20, %16 ], [ 0, %10 ]
  %24 = lshr i64 %2, 3
  %25 = add i64 %22, %24
  %26 = icmp ult i64 %25, %22
  %27 = zext i1 %26 to i64
  %28 = add i64 %23, %27
  %29 = or i64 %28, %23
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %54

31:                                               ; preds = %21
  %32 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = tail call i64 @int_size_in_bytes(ptr noundef %33) #24
  %35 = icmp slt i64 %34, 1
  br i1 %35, label %54, label %36

36:                                               ; preds = %31
  %37 = load i64, ptr %0, align 8
  %38 = and i64 %37, 65535
  %39 = icmp eq i64 %38, 121
  br i1 %39, label %40, label %50

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = getelementptr inbounds %struct.tree_common, ptr %42, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = tail call i64 @int_size_in_bytes(ptr noundef %44) #24
  %46 = icmp sgt i64 %45, 0
  %47 = icmp slt i64 %34, %45
  %48 = and i1 %46, %47
  %49 = select i1 %48, i64 %45, i64 %34
  br label %50

50:                                               ; preds = %40, %36
  %51 = phi i64 [ %49, %40 ], [ %34, %36 ]
  %52 = icmp ugt i64 %25, %51
  %53 = zext i1 %52 to i8
  br label %54

54:                                               ; preds = %31, %21, %12, %8, %3, %50
  %55 = phi i8 [ %53, %50 ], [ 1, %3 ], [ 1, %8 ], [ 1, %12 ], [ 1, %21 ], [ 1, %31 ]
  ret i8 %55
}

declare i32 @tree_int_cst_compare(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_inf_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef readonly %4) unnamed_addr #10 {
  %6 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #24
  %7 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %8 = load ptr, ptr %7, align 8, !tbaa !17
  %9 = load i64, ptr %8, align 8
  %10 = and i64 %9, 65535
  %11 = icmp eq i64 %10, 14
  br i1 %11, label %12, label %14

12:                                               ; preds = %5
  %13 = tail call i32 @vector_type_mode(ptr noundef nonnull %8) #24
  br label %19

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.tree_type, ptr %8, i64 0, i32 6
  %16 = load i32, ptr %15, align 4
  %17 = lshr i32 %16, 16
  %18 = and i32 %17, 255
  br label %19

19:                                               ; preds = %14, %12
  %20 = phi i32 [ %13, %12 ], [ %18, %14 ]
  %21 = getelementptr inbounds %struct.tree_real_cst, ptr %4, i64 0, i32 1
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  %23 = tail call zeroext i8 @real_isneg(ptr noundef %22) #24
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %19
  switch i32 %1, label %26 [
    i32 106, label %166
    i32 105, label %166
    i32 108, label %166
    i32 107, label %166
    i32 98, label %97
    i32 97, label %28
    i32 99, label %107
    i32 100, label %57
    i32 101, label %97
    i32 102, label %117
    i32 103, label %166
    i32 104, label %166
    i32 109, label %166
    i32 110, label %166
  ]

26:                                               ; preds = %25
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %166

27:                                               ; preds = %19
  switch i32 %1, label %166 [
    i32 99, label %28
    i32 98, label %57
    i32 101, label %97
    i32 100, label %97
    i32 97, label %107
    i32 102, label %117
  ]

28:                                               ; preds = %25, %27
  %29 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %54, label %31

31:                                               ; preds = %28
  %32 = zext i32 %20 to i64
  %33 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %32
  %34 = load i8, ptr %33, align 1, !tbaa !17
  switch i8 %34, label %54 [
    i8 8, label %35
    i8 9, label %35
    i8 11, label %35
    i8 17, label %35
  ]

35:                                               ; preds = %31, %31, %31, %31
  %36 = and i8 %34, -2
  %37 = icmp eq i8 %36, 8
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %32
  %40 = load i8, ptr %39, align 1, !tbaa !17
  %41 = zext i8 %40 to i32
  br label %42

42:                                               ; preds = %38, %35
  %43 = phi i32 [ %20, %35 ], [ %41, %38 ]
  %44 = add i32 %43, -38
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %45
  %47 = load ptr, ptr %46, align 8, !tbaa !6
  %48 = getelementptr inbounds %struct.real_format, ptr %47, i64 0, i32 11
  %49 = load i8, ptr %48, align 2, !tbaa !36
  %50 = icmp eq i8 %49, 0
  %51 = load i32, ptr @flag_finite_math_only, align 4
  %52 = icmp ne i32 %51, 0
  %53 = select i1 %50, i1 true, i1 %52
  br i1 %53, label %54, label %166

54:                                               ; preds = %31, %42, %28
  %55 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %56 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %55, ptr noundef nonnull %3)
  br label %166

57:                                               ; preds = %25, %27
  %58 = zext i32 %20 to i64
  %59 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %58
  %60 = load i8, ptr %59, align 1, !tbaa !17
  switch i8 %60, label %80 [
    i8 8, label %61
    i8 9, label %61
    i8 11, label %61
    i8 17, label %61
  ]

61:                                               ; preds = %57, %57, %57, %57
  %62 = and i8 %60, -2
  %63 = icmp eq i8 %62, 8
  br i1 %63, label %68, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %58
  %66 = load i8, ptr %65, align 1, !tbaa !17
  %67 = zext i8 %66 to i32
  br label %68

68:                                               ; preds = %64, %61
  %69 = phi i32 [ %20, %61 ], [ %67, %64 ]
  %70 = add i32 %69, -38
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %71
  %73 = load ptr, ptr %72, align 8, !tbaa !6
  %74 = getelementptr inbounds %struct.real_format, ptr %73, i64 0, i32 11
  %75 = load i8, ptr %74, align 2, !tbaa !36
  %76 = icmp eq i8 %75, 0
  %77 = load i32, ptr @flag_finite_math_only, align 4
  %78 = icmp ne i32 %77, 0
  %79 = select i1 %76, i1 true, i1 %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %57, %68
  %81 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %82 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %81, ptr noundef nonnull %3)
  br label %166

83:                                               ; preds = %68
  %84 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 33), align 8, !tbaa !69
  %85 = tail call i32 %84() #24
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %166

87:                                               ; preds = %83
  %88 = load i64, ptr %3, align 8
  %89 = and i64 %88, 131072
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %87
  %92 = tail call zeroext i8 @contains_placeholder_p(ptr noundef nonnull %3) #24
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %166

94:                                               ; preds = %91, %87
  %95 = tail call ptr @save_expr(ptr noundef nonnull %3) #24
  %96 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %95, ptr noundef %95)
  br label %166

97:                                               ; preds = %25, %25, %27, %27
  %98 = phi i32 [ 97, %25 ], [ 97, %25 ], [ 99, %27 ], [ 99, %27 ]
  %99 = zext i8 %23 to i32
  call void @real_maxval(ptr noundef nonnull %6, i32 noundef %99, i32 noundef %20) #24
  %100 = load ptr, ptr %7, align 8, !tbaa !17
  %101 = call ptr @build_real(ptr noundef %100, ptr noundef nonnull byval(%struct.real_value) align 8 %6) #24
  %102 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %98, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %101)
  %103 = icmp eq ptr %102, null
  br i1 %103, label %104, label %166

104:                                              ; preds = %97
  %105 = call ptr @build2_stat(i32 noundef %98, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %101) #24
  %106 = getelementptr inbounds %struct.tree_exp, ptr %105, i64 0, i32 1
  store i32 %0, ptr %106, align 8, !tbaa !17
  br label %166

107:                                              ; preds = %25, %27
  %108 = phi i32 [ 100, %25 ], [ 98, %27 ]
  %109 = zext i8 %23 to i32
  call void @real_maxval(ptr noundef nonnull %6, i32 noundef %109, i32 noundef %20) #24
  %110 = load ptr, ptr %7, align 8, !tbaa !17
  %111 = call ptr @build_real(ptr noundef %110, ptr noundef nonnull byval(%struct.real_value) align 8 %6) #24
  %112 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %108, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %111)
  %113 = icmp eq ptr %112, null
  br i1 %113, label %114, label %166

114:                                              ; preds = %107
  %115 = call ptr @build2_stat(i32 noundef %108, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %111) #24
  %116 = getelementptr inbounds %struct.tree_exp, ptr %115, i64 0, i32 1
  store i32 %0, ptr %116, align 8, !tbaa !17
  br label %166

117:                                              ; preds = %25, %27
  %118 = zext i8 %23 to i32
  call void @real_maxval(ptr noundef nonnull %6, i32 noundef %118, i32 noundef %20) #24
  %119 = zext i32 %20 to i64
  %120 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %119
  %121 = load i8, ptr %120, align 1, !tbaa !17
  switch i8 %121, label %141 [
    i8 8, label %122
    i8 9, label %122
    i8 11, label %122
    i8 17, label %122
  ]

122:                                              ; preds = %117, %117, %117, %117
  %123 = and i8 %121, -2
  %124 = icmp eq i8 %123, 8
  br i1 %124, label %129, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %119
  %127 = load i8, ptr %126, align 1, !tbaa !17
  %128 = zext i8 %127 to i32
  br label %129

129:                                              ; preds = %125, %122
  %130 = phi i32 [ %20, %122 ], [ %128, %125 ]
  %131 = add i32 %130, -38
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %132
  %134 = load ptr, ptr %133, align 8, !tbaa !6
  %135 = getelementptr inbounds %struct.real_format, ptr %134, i64 0, i32 11
  %136 = load i8, ptr %135, align 2, !tbaa !36
  %137 = icmp eq i8 %136, 0
  %138 = load i32, ptr @flag_finite_math_only, align 4
  %139 = icmp ne i32 %138, 0
  %140 = select i1 %137, i1 true, i1 %139
  br i1 %140, label %141, label %150

141:                                              ; preds = %117, %129
  %142 = select i1 %24, i32 98, i32 100
  %143 = load ptr, ptr %7, align 8, !tbaa !17
  %144 = call ptr @build_real(ptr noundef %143, ptr noundef nonnull byval(%struct.real_value) align 8 %6) #24
  %145 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %142, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %144)
  %146 = icmp eq ptr %145, null
  br i1 %146, label %147, label %166

147:                                              ; preds = %141
  %148 = call ptr @build2_stat(i32 noundef %142, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %144) #24
  %149 = getelementptr inbounds %struct.tree_exp, ptr %148, i64 0, i32 1
  store i32 %0, ptr %149, align 8, !tbaa !17
  br label %166

150:                                              ; preds = %129
  %151 = select i1 %24, i32 99, i32 97
  %152 = load ptr, ptr %7, align 8, !tbaa !17
  %153 = call ptr @build_real(ptr noundef %152, ptr noundef nonnull byval(%struct.real_value) align 8 %6) #24
  %154 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %151, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %153)
  %155 = icmp eq ptr %154, null
  br i1 %155, label %156, label %159

156:                                              ; preds = %150
  %157 = call ptr @build2_stat(i32 noundef %151, ptr noundef %2, ptr noundef nonnull %3, ptr noundef %153) #24
  %158 = getelementptr inbounds %struct.tree_exp, ptr %157, i64 0, i32 1
  store i32 %0, ptr %158, align 8, !tbaa !17
  br label %159

159:                                              ; preds = %150, %156
  %160 = phi ptr [ %154, %150 ], [ %157, %156 ]
  %161 = call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 96, ptr noundef %2, ptr noundef nonnull %160)
  %162 = icmp eq ptr %161, null
  br i1 %162, label %163, label %166

163:                                              ; preds = %159
  %164 = call ptr @build1_stat(i32 noundef 96, ptr noundef %2, ptr noundef nonnull %160) #24
  %165 = getelementptr inbounds %struct.tree_exp, ptr %164, i64 0, i32 1
  store i32 %0, ptr %165, align 8, !tbaa !17
  br label %166

166:                                              ; preds = %25, %25, %25, %25, %25, %25, %25, %25, %26, %163, %159, %147, %141, %114, %107, %104, %97, %91, %83, %27, %42, %94, %80, %54
  %167 = phi ptr [ %82, %80 ], [ %96, %94 ], [ %56, %54 ], [ null, %42 ], [ null, %27 ], [ null, %83 ], [ null, %91 ], [ %102, %97 ], [ %105, %104 ], [ %112, %107 ], [ %115, %114 ], [ %145, %141 ], [ %148, %147 ], [ %161, %159 ], [ %164, %163 ], [ null, %26 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %25 ], [ null, %25 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  ret ptr %167
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_mathfn_compare(i32 noundef %0, i32 noundef %1, i32 noundef %2, ptr noundef %3, ptr nocapture noundef readonly %4, ptr nocapture noundef readonly %5) unnamed_addr #10 {
  %7 = alloca %struct.real_value, align 8
  %8 = alloca %struct.real_value, align 8
  %9 = alloca %struct.real_value, align 8
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #24
  %10 = add i32 %1, -228
  %11 = icmp ult i32 %10, 3
  br i1 %11, label %12, label %289

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1, i32 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %16, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 14
  br i1 %19, label %20, label %22

20:                                               ; preds = %12
  %21 = tail call i32 @vector_type_mode(ptr noundef nonnull %16) #24
  br label %27

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 6
  %24 = load i32, ptr %23, align 4
  %25 = lshr i32 %24, 16
  %26 = and i32 %25, 255
  br label %27

27:                                               ; preds = %22, %20
  %28 = phi i32 [ %21, %20 ], [ %26, %22 ]
  %29 = getelementptr inbounds %struct.tree_real_cst, ptr %5, i64 0, i32 1
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %7, ptr noundef nonnull align 8 dereferenceable(32) %30, i64 32, i1 false), !tbaa.struct !29
  %31 = call zeroext i8 @real_isneg(ptr noundef nonnull %7) #24
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %72, label %33

33:                                               ; preds = %27
  switch i32 %2, label %37 [
    i32 101, label %34
    i32 98, label %34
    i32 97, label %34
    i32 102, label %60
  ]

34:                                               ; preds = %33, %33, %33
  %35 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %36 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %3, ptr noundef %35, ptr noundef %14)
  br label %289

37:                                               ; preds = %33
  %38 = zext i32 %28 to i64
  %39 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %38
  %40 = load i8, ptr %39, align 1, !tbaa !17
  switch i8 %40, label %60 [
    i8 8, label %41
    i8 9, label %41
    i8 11, label %41
    i8 17, label %41
  ]

41:                                               ; preds = %37, %37, %37, %37
  %42 = and i8 %40, -2
  %43 = icmp eq i8 %42, 8
  br i1 %43, label %48, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %38
  %46 = load i8, ptr %45, align 1, !tbaa !17
  %47 = zext i8 %46 to i32
  br label %48

48:                                               ; preds = %44, %41
  %49 = phi i32 [ %28, %41 ], [ %47, %44 ]
  %50 = add i32 %49, -38
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %51
  %53 = load ptr, ptr %52, align 8, !tbaa !6
  %54 = getelementptr inbounds %struct.real_format, ptr %53, i64 0, i32 11
  %55 = load i8, ptr %54, align 2, !tbaa !36
  %56 = icmp eq i8 %55, 0
  %57 = load i32, ptr @flag_finite_math_only, align 4
  %58 = icmp ne i32 %57, 0
  %59 = select i1 %56, i1 true, i1 %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %37, %33, %48
  %61 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %62 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %3, ptr noundef %61, ptr noundef %14)
  br label %289

63:                                               ; preds = %48
  %64 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  %66 = call ptr @build_real(ptr noundef %65, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst0) #24
  %67 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 100, ptr noundef %3, ptr noundef %14, ptr noundef %66)
  %68 = icmp eq ptr %67, null
  br i1 %68, label %69, label %289

69:                                               ; preds = %63
  %70 = call ptr @build2_stat(i32 noundef 100, ptr noundef %3, ptr noundef nonnull %14, ptr noundef %66) #24
  %71 = getelementptr inbounds %struct.tree_exp, ptr %70, i64 0, i32 1
  store i32 %0, ptr %71, align 8, !tbaa !17
  br label %289

72:                                               ; preds = %27
  %73 = add i32 %2, -99
  %74 = icmp ult i32 %73, 2
  br i1 %74, label %75, label %125

75:                                               ; preds = %72
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %8) #24
  %76 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %8, i32 noundef 65, ptr noundef nonnull %7, ptr noundef nonnull %7) #24
  call void @real_convert(ptr noundef nonnull %8, i32 noundef %28, ptr noundef nonnull %8) #24
  %77 = call zeroext i8 @real_isinf(ptr noundef nonnull %8) #24
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %114, label %79

79:                                               ; preds = %75
  %80 = zext i32 %28 to i64
  %81 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %80
  %82 = load i8, ptr %81, align 1, !tbaa !17
  switch i8 %82, label %111 [
    i8 8, label %83
    i8 9, label %83
    i8 11, label %83
    i8 17, label %83
  ]

83:                                               ; preds = %79, %79, %79, %79
  %84 = and i8 %82, -2
  %85 = icmp eq i8 %84, 8
  br i1 %85, label %90, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %80
  %88 = load i8, ptr %87, align 1, !tbaa !17
  %89 = zext i8 %88 to i32
  br label %90

90:                                               ; preds = %86, %83
  %91 = phi i32 [ %28, %83 ], [ %89, %86 ]
  %92 = add i32 %91, -38
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %93
  %95 = load ptr, ptr %94, align 8, !tbaa !6
  %96 = getelementptr inbounds %struct.real_format, ptr %95, i64 0, i32 12
  %97 = load i8, ptr %96, align 1, !tbaa !34
  %98 = icmp eq i8 %97, 0
  %99 = load i32, ptr @flag_finite_math_only, align 4
  %100 = icmp ne i32 %99, 0
  %101 = select i1 %98, i1 true, i1 %100
  br i1 %101, label %111, label %102

102:                                              ; preds = %90
  %103 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %104 = load ptr, ptr %103, align 8, !tbaa !17
  %105 = call ptr @build_real(ptr noundef %104, ptr noundef nonnull byval(%struct.real_value) align 8 %8) #24
  %106 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 101, ptr noundef %3, ptr noundef %14, ptr noundef %105)
  %107 = icmp eq ptr %106, null
  br i1 %107, label %108, label %123

108:                                              ; preds = %102
  %109 = call ptr @build2_stat(i32 noundef 101, ptr noundef %3, ptr noundef nonnull %14, ptr noundef %105) #24
  %110 = getelementptr inbounds %struct.tree_exp, ptr %109, i64 0, i32 1
  store i32 %0, ptr %110, align 8, !tbaa !17
  br label %123

111:                                              ; preds = %79, %90
  %112 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %113 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %3, ptr noundef %112, ptr noundef %14)
  br label %123

114:                                              ; preds = %75
  %115 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %116 = load ptr, ptr %115, align 8, !tbaa !17
  %117 = call ptr @build_real(ptr noundef %116, ptr noundef nonnull byval(%struct.real_value) align 8 %8) #24
  %118 = call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %2, ptr noundef %3, ptr noundef %14, ptr noundef %117)
  %119 = icmp eq ptr %118, null
  br i1 %119, label %120, label %123

120:                                              ; preds = %114
  %121 = call ptr @build2_stat(i32 noundef %2, ptr noundef %3, ptr noundef nonnull %14, ptr noundef %117) #24
  %122 = getelementptr inbounds %struct.tree_exp, ptr %121, i64 0, i32 1
  store i32 %0, ptr %122, align 8, !tbaa !17
  br label %123

123:                                              ; preds = %120, %114, %108, %102, %111
  %124 = phi ptr [ %113, %111 ], [ %106, %102 ], [ %109, %108 ], [ %118, %114 ], [ %121, %120 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %8) #24
  br label %289

125:                                              ; preds = %72
  %126 = add i32 %2, -97
  %127 = icmp ult i32 %126, 2
  br i1 %127, label %128, label %289

128:                                              ; preds = %125
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %9) #24
  %129 = call zeroext i8 @real_arithmetic(ptr noundef nonnull %9, i32 noundef 65, ptr noundef nonnull %7, ptr noundef nonnull %7) #24
  call void @real_convert(ptr noundef nonnull %9, i32 noundef %28, ptr noundef nonnull %9) #24
  %130 = call zeroext i8 @real_isinf(ptr noundef nonnull %9) #24
  %131 = icmp eq i8 %130, 0
  %132 = zext i32 %28 to i64
  %133 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %132
  %134 = load i8, ptr %133, align 1, !tbaa !17
  br i1 %131, label %238, label %135

135:                                              ; preds = %128
  switch i8 %134, label %171 [
    i8 8, label %136
    i8 9, label %136
    i8 11, label %136
    i8 17, label %136
  ]

136:                                              ; preds = %135, %135, %135, %135
  %137 = and i8 %134, -2
  %138 = icmp eq i8 %137, 8
  br i1 %138, label %143, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %132
  %141 = load i8, ptr %140, align 1, !tbaa !17
  %142 = zext i8 %141 to i32
  br label %143

143:                                              ; preds = %139, %136
  %144 = phi i32 [ %28, %136 ], [ %142, %139 ]
  %145 = add i32 %144, -38
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %146
  %148 = load ptr, ptr %147, align 8, !tbaa !6
  %149 = getelementptr inbounds %struct.real_format, ptr %148, i64 0, i32 11
  %150 = load i8, ptr %149, align 2, !tbaa !36
  %151 = icmp eq i8 %150, 0
  %152 = load i32, ptr @flag_finite_math_only, align 4
  %153 = icmp ne i32 %152, 0
  %154 = select i1 %151, i1 true, i1 %153
  br i1 %154, label %155, label %174

155:                                              ; preds = %143
  switch i8 %134, label %171 [
    i8 8, label %156
    i8 9, label %156
    i8 11, label %156
    i8 17, label %156
  ]

156:                                              ; preds = %155, %155, %155, %155
  br i1 %138, label %161, label %157

157:                                              ; preds = %156
  %158 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %132
  %159 = load i8, ptr %158, align 1, !tbaa !17
  %160 = zext i8 %159 to i32
  br label %161

161:                                              ; preds = %157, %156
  %162 = phi i32 [ %28, %156 ], [ %160, %157 ]
  %163 = add i32 %162, -38
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %164
  %166 = load ptr, ptr %165, align 8, !tbaa !6
  %167 = getelementptr inbounds %struct.real_format, ptr %166, i64 0, i32 12
  %168 = load i8, ptr %167, align 1, !tbaa !34
  %169 = icmp eq i8 %168, 0
  %170 = select i1 %169, i1 true, i1 %153
  br i1 %170, label %171, label %174

171:                                              ; preds = %135, %155, %161
  %172 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %173 = call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %3, ptr noundef %172, ptr noundef %14)
  br label %286

174:                                              ; preds = %161, %143
  switch i8 %134, label %190 [
    i8 8, label %175
    i8 9, label %175
    i8 11, label %175
    i8 17, label %175
  ]

175:                                              ; preds = %174, %174, %174, %174
  br i1 %138, label %180, label %176

176:                                              ; preds = %175
  %177 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %132
  %178 = load i8, ptr %177, align 1, !tbaa !17
  %179 = zext i8 %178 to i32
  br label %180

180:                                              ; preds = %176, %175
  %181 = phi i32 [ %28, %175 ], [ %179, %176 ]
  %182 = add i32 %181, -38
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %183
  %185 = load ptr, ptr %184, align 8, !tbaa !6
  %186 = getelementptr inbounds %struct.real_format, ptr %185, i64 0, i32 11
  %187 = load i8, ptr %186, align 2, !tbaa !36
  %188 = icmp eq i8 %187, 0
  %189 = select i1 %188, i1 true, i1 %153
  br i1 %189, label %190, label %195

190:                                              ; preds = %174, %180
  %191 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %192 = load ptr, ptr %191, align 8, !tbaa !17
  %193 = call ptr @build_real(ptr noundef %192, ptr noundef nonnull byval(%struct.real_value) align 8 %9) #24
  %194 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %3, ptr noundef %14, ptr noundef %193)
  br label %286

195:                                              ; preds = %180
  switch i8 %134, label %210 [
    i8 8, label %196
    i8 9, label %196
    i8 11, label %196
    i8 17, label %196
  ]

196:                                              ; preds = %195, %195, %195, %195
  br i1 %138, label %201, label %197

197:                                              ; preds = %196
  %198 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %132
  %199 = load i8, ptr %198, align 1, !tbaa !17
  %200 = zext i8 %199 to i32
  br label %201

201:                                              ; preds = %197, %196
  %202 = phi i32 [ %28, %196 ], [ %200, %197 ]
  %203 = add i32 %202, -38
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %204
  %206 = load ptr, ptr %205, align 8, !tbaa !6
  %207 = getelementptr inbounds %struct.real_format, ptr %206, i64 0, i32 12
  %208 = load i8, ptr %207, align 1, !tbaa !34
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %210, label %215

210:                                              ; preds = %195, %201
  %211 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %212 = load ptr, ptr %211, align 8, !tbaa !17
  %213 = call ptr @build_real(ptr noundef %212, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst0) #24
  %214 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 100, ptr noundef %3, ptr noundef %14, ptr noundef %213)
  br label %286

215:                                              ; preds = %201
  %216 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 33), align 8, !tbaa !69
  %217 = call i32 %216() #24
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %286

219:                                              ; preds = %215
  %220 = icmp eq ptr %14, null
  br i1 %220, label %228, label %221

221:                                              ; preds = %219
  %222 = load i64, ptr %14, align 8
  %223 = and i64 %222, 131072
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %228

225:                                              ; preds = %221
  %226 = call zeroext i8 @contains_placeholder_p(ptr noundef nonnull %14) #24
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %228, label %286

228:                                              ; preds = %225, %221, %219
  %229 = call ptr @save_expr(ptr noundef %14) #24
  %230 = getelementptr inbounds %struct.tree_common, ptr %229, i64 0, i32 2
  %231 = load ptr, ptr %230, align 8, !tbaa !17
  %232 = call ptr @build_real(ptr noundef %231, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst0) #24
  %233 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 100, ptr noundef %3, ptr noundef %229, ptr noundef %232)
  %234 = load ptr, ptr %230, align 8, !tbaa !17
  %235 = call ptr @build_real(ptr noundef %234, ptr noundef nonnull byval(%struct.real_value) align 8 %9) #24
  %236 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 102, ptr noundef %3, ptr noundef %229, ptr noundef %235)
  %237 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 91, ptr noundef %3, ptr noundef %233, ptr noundef %236)
  br label %286

238:                                              ; preds = %128
  switch i8 %134, label %258 [
    i8 8, label %239
    i8 9, label %239
    i8 11, label %239
    i8 17, label %239
  ]

239:                                              ; preds = %238, %238, %238, %238
  %240 = and i8 %134, -2
  %241 = icmp eq i8 %240, 8
  br i1 %241, label %246, label %242

242:                                              ; preds = %239
  %243 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %132
  %244 = load i8, ptr %243, align 1, !tbaa !17
  %245 = zext i8 %244 to i32
  br label %246

246:                                              ; preds = %242, %239
  %247 = phi i32 [ %28, %239 ], [ %245, %242 ]
  %248 = add i32 %247, -38
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %249
  %251 = load ptr, ptr %250, align 8, !tbaa !6
  %252 = getelementptr inbounds %struct.real_format, ptr %251, i64 0, i32 11
  %253 = load i8, ptr %252, align 2, !tbaa !36
  %254 = icmp eq i8 %253, 0
  %255 = load i32, ptr @flag_finite_math_only, align 4
  %256 = icmp ne i32 %255, 0
  %257 = select i1 %254, i1 true, i1 %256
  br i1 %257, label %258, label %263

258:                                              ; preds = %238, %246
  %259 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %260 = load ptr, ptr %259, align 8, !tbaa !17
  %261 = call ptr @build_real(ptr noundef %260, ptr noundef nonnull byval(%struct.real_value) align 8 %9) #24
  %262 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %2, ptr noundef %3, ptr noundef %14, ptr noundef %261)
  br label %286

263:                                              ; preds = %246
  %264 = load ptr, ptr getelementptr inbounds (%struct.lang_hooks, ptr @lang_hooks, i64 0, i32 33), align 8, !tbaa !69
  %265 = call i32 %264() #24
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %267, label %288

267:                                              ; preds = %263
  %268 = icmp eq ptr %14, null
  br i1 %268, label %276, label %269

269:                                              ; preds = %267
  %270 = load i64, ptr %14, align 8
  %271 = and i64 %270, 131072
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %276

273:                                              ; preds = %269
  %274 = call zeroext i8 @contains_placeholder_p(ptr noundef nonnull %14) #24
  %275 = icmp eq i8 %274, 0
  br i1 %275, label %276, label %288

276:                                              ; preds = %273, %269, %267
  %277 = call ptr @save_expr(ptr noundef %14) #24
  %278 = getelementptr inbounds %struct.tree_common, ptr %277, i64 0, i32 2
  %279 = load ptr, ptr %278, align 8, !tbaa !17
  %280 = call ptr @build_real(ptr noundef %279, ptr noundef nonnull byval(%struct.real_value) align 8 @dconst0) #24
  %281 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 100, ptr noundef %3, ptr noundef %277, ptr noundef %280)
  %282 = load ptr, ptr %278, align 8, !tbaa !17
  %283 = call ptr @build_real(ptr noundef %282, ptr noundef nonnull byval(%struct.real_value) align 8 %9) #24
  %284 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef %2, ptr noundef %3, ptr noundef %277, ptr noundef %283)
  %285 = call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 91, ptr noundef %3, ptr noundef %281, ptr noundef %284)
  br label %286

286:                                              ; preds = %171, %190, %210, %228, %258, %276, %225, %215
  %287 = phi ptr [ null, %215 ], [ null, %225 ], [ %285, %276 ], [ %262, %258 ], [ %237, %228 ], [ %214, %210 ], [ %194, %190 ], [ %173, %171 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #24
  br label %289

288:                                              ; preds = %263, %273
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %9) #24
  br label %289

289:                                              ; preds = %286, %69, %63, %123, %60, %34, %6, %125, %288
  %290 = phi ptr [ null, %288 ], [ null, %125 ], [ null, %6 ], [ %287, %286 ], [ %70, %69 ], [ %67, %63 ], [ %124, %123 ], [ %62, %60 ], [ %36, %34 ]
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #24
  ret ptr %290
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_widened_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = tail call ptr @get_unwidened(ptr noundef %3, ptr noundef null) #24
  %7 = icmp eq ptr %6, %3
  br i1 %7, label %128, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.tree_type, ptr %12, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = and i32 %14, 1023
  %16 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 6
  %17 = load i32, ptr %16, align 4
  %18 = and i32 %17, 1023
  %19 = icmp ugt i32 %15, %18
  br i1 %19, label %20, label %128

20:                                               ; preds = %8
  %21 = tail call ptr @get_unwidened(ptr noundef %4, ptr noundef null) #24
  %22 = add i32 %1, -101
  %23 = icmp ult i32 %22, 2
  br i1 %23, label %31, label %24

24:                                               ; preds = %20
  %25 = load ptr, ptr %11, align 8, !tbaa !17
  %26 = load i64, ptr %25, align 8
  %27 = load i64, ptr %10, align 8
  %28 = xor i64 %27, %26
  %29 = and i64 %28, 2097152
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %68

31:                                               ; preds = %24, %20
  %32 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = icmp eq ptr %33, %10
  br i1 %34, label %61, label %35

35:                                               ; preds = %31
  %36 = load i32, ptr %16, align 4
  %37 = and i32 %36, 1023
  %38 = getelementptr inbounds %struct.tree_type, ptr %33, i64 0, i32 6
  %39 = load i32, ptr %38, align 4
  %40 = and i32 %39, 1023
  %41 = icmp ult i32 %37, %40
  br i1 %41, label %48, label %42

42:                                               ; preds = %35
  %43 = load i64, ptr %10, align 8
  %44 = load i64, ptr %33, align 8
  %45 = xor i64 %44, %43
  %46 = and i64 %45, 2097152
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %42, %35
  %49 = load i64, ptr %21, align 8
  %50 = and i64 %49, 65535
  %51 = icmp eq i64 %50, 23
  br i1 %51, label %52, label %68

52:                                               ; preds = %48
  %53 = load i64, ptr %10, align 8
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 65535
  %56 = add nsw i32 %55, -7
  %57 = icmp ult i32 %56, 2
  br i1 %57, label %58, label %68

58:                                               ; preds = %52
  %59 = tail call i32 @int_fits_type_p(ptr noundef nonnull %21, ptr noundef nonnull %10) #24
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %58, %42, %31
  %62 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %10, ptr noundef nonnull %21)
  %63 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %6, ptr noundef %62)
  %64 = icmp eq ptr %63, null
  br i1 %64, label %65, label %128

65:                                               ; preds = %61
  %66 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %6, ptr noundef %62) #24
  %67 = getelementptr inbounds %struct.tree_exp, ptr %66, i64 0, i32 1
  store i32 %0, ptr %67, align 8, !tbaa !17
  br label %128

68:                                               ; preds = %52, %58, %48, %24
  %69 = load i64, ptr %21, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 23
  br i1 %71, label %72, label %128

72:                                               ; preds = %68
  %73 = load i64, ptr %10, align 8
  %74 = and i64 %73, 65535
  %75 = icmp eq i64 %74, 8
  br i1 %75, label %76, label %128

76:                                               ; preds = %72
  %77 = tail call i32 @int_fits_type_p(ptr noundef nonnull %21, ptr noundef nonnull %10) #24
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %128, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %struct.tree_common, ptr %21, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = tail call ptr @lower_bound_in_type(ptr noundef %81, ptr noundef nonnull %10) #24
  %83 = tail call ptr @upper_bound_in_type(ptr noundef %81, ptr noundef nonnull %10) #24
  %84 = tail call fastcc ptr @fold_relational_const(i32 noundef 97, ptr noundef %2, ptr noundef %83, ptr noundef nonnull %21)
  %85 = tail call i32 @integer_nonzerop(ptr noundef %84) #24
  %86 = trunc i32 %85 to i8
  %87 = tail call fastcc ptr @fold_relational_const(i32 noundef 97, ptr noundef %2, ptr noundef nonnull %21, ptr noundef %82)
  %88 = tail call i32 @integer_nonzerop(ptr noundef %87) #24
  %89 = trunc i32 %88 to i8
  switch i32 %1, label %128 [
    i32 101, label %90
    i32 102, label %99
    i32 97, label %108
    i32 98, label %108
    i32 99, label %118
    i32 100, label %118
  ]

90:                                               ; preds = %79
  %91 = and i32 %85, 255
  %92 = icmp ne i32 %91, 0
  %93 = and i32 %88, 255
  %94 = icmp ne i32 %93, 0
  %95 = select i1 %92, i1 true, i1 %94
  br i1 %95, label %96, label %128

96:                                               ; preds = %90
  %97 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %98 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %97, ptr noundef nonnull %3)
  br label %128

99:                                               ; preds = %79
  %100 = and i32 %85, 255
  %101 = icmp ne i32 %100, 0
  %102 = and i32 %88, 255
  %103 = icmp ne i32 %102, 0
  %104 = select i1 %101, i1 true, i1 %103
  br i1 %104, label %105, label %128

105:                                              ; preds = %99
  %106 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %107 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %106, ptr noundef nonnull %3)
  br label %128

108:                                              ; preds = %79, %79
  %109 = icmp eq i8 %86, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %108
  %111 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %112 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %111, ptr noundef nonnull %3)
  br label %128

113:                                              ; preds = %108
  %114 = icmp eq i8 %89, 0
  br i1 %114, label %128, label %115

115:                                              ; preds = %113
  %116 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %117 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %116, ptr noundef nonnull %3)
  br label %128

118:                                              ; preds = %79, %79
  %119 = icmp eq i8 %86, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %118
  %121 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %122 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %121, ptr noundef nonnull %3)
  br label %128

123:                                              ; preds = %118
  %124 = icmp eq i8 %89, 0
  br i1 %124, label %128, label %125

125:                                              ; preds = %123
  %126 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %127 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %126, ptr noundef nonnull %3)
  br label %128

128:                                              ; preds = %113, %65, %61, %90, %99, %123, %79, %68, %72, %76, %8, %5, %125, %120, %115, %110, %105, %96
  %129 = phi ptr [ %122, %120 ], [ %127, %125 ], [ %112, %110 ], [ %117, %115 ], [ %107, %105 ], [ %98, %96 ], [ null, %5 ], [ null, %8 ], [ null, %76 ], [ null, %72 ], [ null, %68 ], [ null, %79 ], [ null, %123 ], [ null, %99 ], [ null, %90 ], [ %63, %61 ], [ %66, %65 ], [ null, %113 ]
  ret ptr %129
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_sign_changed_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr noundef %4) unnamed_addr #10 {
  %6 = load i64, ptr %3, align 8
  %7 = trunc i64 %6 to i16
  switch i16 %7, label %77 [
    i16 116, label %8
    i16 113, label %8
  ]

8:                                                ; preds = %5, %5
  %9 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.tree_common, ptr %12, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_type, ptr %14, i64 0, i32 6
  %16 = load i32, ptr %15, align 4
  %17 = getelementptr inbounds %struct.tree_type, ptr %10, i64 0, i32 6
  %18 = load i32, ptr %17, align 4
  %19 = xor i32 %18, %16
  %20 = and i32 %19, 1023
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %77

22:                                               ; preds = %8
  %23 = load i64, ptr %4, align 8
  %24 = trunc i64 %23 to i32
  %25 = trunc i64 %23 to i16
  switch i16 %25, label %77 [
    i16 23, label %32
    i16 116, label %26
    i16 113, label %26
  ]

26:                                               ; preds = %22, %22
  %27 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %30 = load ptr, ptr %29, align 8, !tbaa !17
  %31 = icmp eq ptr %30, %14
  br i1 %31, label %32, label %77

32:                                               ; preds = %22, %26
  %33 = load i64, ptr %14, align 8
  %34 = load i64, ptr %10, align 8
  %35 = xor i64 %34, %33
  %36 = and i64 %35, 2097152
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %53

38:                                               ; preds = %32
  %39 = trunc i64 %33 to i32
  %40 = and i32 %39, 65535
  %41 = icmp eq i32 %40, 10
  %42 = icmp eq i32 %40, 12
  %43 = or i1 %41, %42
  %44 = trunc i64 %34 to i32
  %45 = and i32 %44, 65535
  %46 = icmp eq i32 %45, 10
  %47 = icmp eq i32 %45, 12
  %48 = or i1 %46, %47
  %49 = xor i1 %43, %48
  %50 = add i32 %1, -103
  %51 = icmp ult i32 %50, -2
  %52 = and i1 %51, %49
  br i1 %52, label %77, label %56

53:                                               ; preds = %32
  %54 = add i32 %1, -101
  %55 = icmp ult i32 %54, 2
  br i1 %55, label %56, label %77

56:                                               ; preds = %53, %38
  %57 = and i64 %23, 65535
  %58 = icmp eq i64 %57, 23
  br i1 %58, label %59, label %68

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1
  %61 = load i64, ptr %60, align 8, !tbaa !17
  %62 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1, i32 1
  %63 = load i64, ptr %62, align 8, !tbaa !17
  %64 = lshr i32 %24, 27
  %65 = trunc i32 %64 to i8
  %66 = and i8 %65, 1
  %67 = tail call ptr @force_fit_type_double(ptr noundef nonnull %14, i64 noundef %61, i64 noundef %63, i32 noundef 0, i8 noundef zeroext %66)
  br label %70

68:                                               ; preds = %56
  %69 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %14, ptr noundef nonnull %4)
  br label %70

70:                                               ; preds = %68, %59
  %71 = phi ptr [ %67, %59 ], [ %69, %68 ]
  %72 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef nonnull %12, ptr noundef %71)
  %73 = icmp eq ptr %72, null
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef nonnull %12, ptr noundef %71) #24
  %76 = getelementptr inbounds %struct.tree_exp, ptr %75, i64 0, i32 1
  store i32 %0, ptr %76, align 8, !tbaa !17
  br label %77

77:                                               ; preds = %74, %70, %53, %38, %26, %22, %8, %5
  %78 = phi ptr [ null, %5 ], [ null, %8 ], [ null, %22 ], [ null, %26 ], [ null, %38 ], [ null, %53 ], [ %72, %70 ], [ %75, %74 ]
  ret ptr %78
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @optimize_minmax_comparison(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef %3) #24
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 65535
  %10 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  %11 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 1
  %12 = load ptr, ptr %11, align 8, !tbaa !17
  %13 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %14, ptr noundef %4)
  %16 = tail call i32 @tree_int_cst_equal(ptr noundef %12, ptr noundef %15) #24
  %17 = tail call i32 @tree_int_cst_lt(ptr noundef %12, ptr noundef %15) #24
  %18 = load ptr, ptr %10, align 8, !tbaa !17
  %19 = add nsw i32 %9, -82
  %20 = icmp ult i32 %19, -2
  br i1 %20, label %48, label %21

21:                                               ; preds = %5
  %22 = load i64, ptr %15, align 8
  %23 = and i64 %22, 134283263
  %24 = icmp eq i64 %23, 23
  br i1 %24, label %25, label %48

25:                                               ; preds = %21
  %26 = load i64, ptr %12, align 8
  %27 = and i64 %26, 134283263
  %28 = icmp eq i64 %27, 23
  br i1 %28, label %29, label %48

29:                                               ; preds = %25
  switch i32 %1, label %48 [
    i32 99, label %78
    i32 101, label %54
    i32 100, label %50
    i32 102, label %32
    i32 97, label %30
    i32 98, label %31
  ]

30:                                               ; preds = %29
  br label %32

31:                                               ; preds = %29
  br label %32

32:                                               ; preds = %29, %30, %31
  %33 = phi i32 [ 99, %31 ], [ 100, %30 ], [ 101, %29 ]
  %34 = tail call fastcc ptr @optimize_minmax_comparison(i32 noundef %0, i32 noundef %33, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  %35 = icmp eq ptr %34, null
  br i1 %35, label %48, label %36

36:                                               ; preds = %32
  %37 = load i64, ptr %34, align 8
  %38 = and i64 %37, 65535
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %36
  %41 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %34) #25
  %42 = icmp eq ptr %41, null
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = getelementptr inbounds %struct.tree_common, ptr %34, i64 0, i32 2
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = tail call ptr @build1_stat(i32 noundef 96, ptr noundef %45, ptr noundef nonnull %34) #24
  %47 = getelementptr inbounds %struct.tree_exp, ptr %46, i64 0, i32 1
  store i32 %0, ptr %47, align 8, !tbaa !17
  br label %48

48:                                               ; preds = %29, %43, %40, %36, %32, %21, %25, %5, %93, %90, %86, %84, %76, %73, %70, %66, %63, %58, %50
  %49 = phi ptr [ %53, %50 ], [ %85, %84 ], [ %88, %86 ], [ %92, %90 ], [ %94, %93 ], [ %59, %58 ], [ %64, %63 ], [ %68, %66 ], [ %71, %70 ], [ %75, %73 ], [ %77, %76 ], [ null, %5 ], [ null, %25 ], [ null, %21 ], [ null, %32 ], [ null, %29 ], [ %34, %36 ], [ %41, %40 ], [ %46, %43 ]
  ret ptr %49

50:                                               ; preds = %29
  %51 = tail call fastcc ptr @optimize_minmax_comparison(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef nonnull %6, ptr noundef nonnull %15)
  %52 = tail call fastcc ptr @optimize_minmax_comparison(i32 noundef %0, i32 noundef 99, ptr noundef %2, ptr noundef nonnull %6, ptr noundef nonnull %15)
  %53 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 92, ptr noundef %2, ptr noundef %51, ptr noundef %52)
  br label %48

54:                                               ; preds = %29
  %55 = icmp eq i32 %9, 81
  %56 = icmp ne i32 %16, 0
  %57 = select i1 %55, i1 %56, i1 false
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 98, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48

60:                                               ; preds = %54
  %61 = icmp ne i32 %17, 0
  %62 = select i1 %55, i1 %61, i1 false
  br i1 %62, label %63, label %65

63:                                               ; preds = %60
  %64 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48

65:                                               ; preds = %60
  br i1 %55, label %66, label %69

66:                                               ; preds = %65
  %67 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %68 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %67, ptr noundef %18)
  br label %48

69:                                               ; preds = %65
  br i1 %56, label %70, label %72

70:                                               ; preds = %69
  %71 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 100, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48

72:                                               ; preds = %69
  br i1 %61, label %73, label %76

73:                                               ; preds = %72
  %74 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %75 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %74, ptr noundef %18)
  br label %48

76:                                               ; preds = %72
  %77 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 101, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48

78:                                               ; preds = %29
  %79 = icmp eq i32 %9, 81
  %80 = icmp ne i32 %16, 0
  %81 = icmp ne i32 %17, 0
  %82 = select i1 %80, i1 true, i1 %81
  br i1 %79, label %83, label %89

83:                                               ; preds = %78
  br i1 %82, label %84, label %86

84:                                               ; preds = %83
  %85 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 99, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48

86:                                               ; preds = %83
  %87 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %88 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %87, ptr noundef %18)
  br label %48

89:                                               ; preds = %78
  br i1 %82, label %90, label %93

90:                                               ; preds = %89
  %91 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %92 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %91, ptr noundef %18)
  br label %48

93:                                               ; preds = %89
  %94 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 99, ptr noundef %2, ptr noundef %18, ptr noundef nonnull %15)
  br label %48
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @twoval_comparison_p(ptr nocapture noundef readonly %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) unnamed_addr #10 {
  br label %5

5:                                                ; preds = %33, %4
  %6 = phi ptr [ %0, %4 ], [ %35, %33 ]
  %7 = load i64, ptr %6, align 8
  %8 = and i64 %7, 65535
  %9 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !17
  %11 = icmp eq i32 %10, 10
  %12 = icmp eq i64 %8, 96
  %13 = and i1 %11, %12
  br i1 %13, label %31, label %14

14:                                               ; preds = %5
  br i1 %11, label %15, label %30

15:                                               ; preds = %14
  %16 = trunc i64 %7 to i16
  switch i16 %16, label %92 [
    i16 92, label %36
    i16 91, label %36
    i16 52, label %36
    i16 120, label %17
    i16 56, label %43
  ]

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = load i64, ptr %19, align 8
  %21 = and i64 %20, 65536
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %92

23:                                               ; preds = %17
  %24 = load ptr, ptr %1, align 8, !tbaa !6
  %25 = icmp eq ptr %24, null
  br i1 %25, label %26, label %92

26:                                               ; preds = %23
  %27 = load ptr, ptr %2, align 8, !tbaa !6
  %28 = icmp eq ptr %27, null
  br i1 %28, label %29, label %92

29:                                               ; preds = %26
  store i32 1, ptr %3, align 4, !tbaa !21
  br label %31

30:                                               ; preds = %14
  switch i32 %10, label %94 [
    i32 6, label %31
    i32 7, label %36
    i32 1, label %92
    i32 5, label %55
  ]

31:                                               ; preds = %5, %29, %30
  %32 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  br label %33

33:                                               ; preds = %31, %41, %53
  %34 = phi ptr [ %32, %31 ], [ %42, %41 ], [ %54, %53 ]
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  br label %5

36:                                               ; preds = %15, %15, %15, %30
  %37 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = tail call fastcc i32 @twoval_comparison_p(ptr noundef %38, ptr noundef %1, ptr noundef %2, ptr noundef %3), !range !28
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %92, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 1
  br label %33

43:                                               ; preds = %15
  %44 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  %45 = load ptr, ptr %44, align 8, !tbaa !17
  %46 = tail call fastcc i32 @twoval_comparison_p(ptr noundef %45, ptr noundef %1, ptr noundef %2, ptr noundef %3), !range !28
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %92, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 1
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = tail call fastcc i32 @twoval_comparison_p(ptr noundef %50, ptr noundef %1, ptr noundef %2, ptr noundef %3), !range !28
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %92, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 1, i32 0, i32 1
  br label %33

55:                                               ; preds = %30
  %56 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 0, i32 3
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.tree_exp, ptr %6, i64 1
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = tail call i32 @operand_equal_p(ptr noundef %57, ptr noundef %59, i32 noundef 0)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %94

62:                                               ; preds = %55
  %63 = load ptr, ptr %1, align 8, !tbaa !6
  %64 = icmp eq ptr %63, null
  %65 = load ptr, ptr %56, align 8, !tbaa !17
  br i1 %64, label %66, label %67

66:                                               ; preds = %62
  store ptr %65, ptr %1, align 8, !tbaa !6
  br label %78

67:                                               ; preds = %62
  %68 = tail call i32 @operand_equal_p(ptr noundef nonnull %63, ptr noundef %65, i32 noundef 0)
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %78

70:                                               ; preds = %67
  %71 = load ptr, ptr %2, align 8, !tbaa !6
  %72 = icmp eq ptr %71, null
  %73 = load ptr, ptr %56, align 8, !tbaa !17
  br i1 %72, label %74, label %75

74:                                               ; preds = %70
  store ptr %73, ptr %2, align 8, !tbaa !6
  br label %78

75:                                               ; preds = %70
  %76 = tail call i32 @operand_equal_p(ptr noundef nonnull %71, ptr noundef %73, i32 noundef 0)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %94, label %78

78:                                               ; preds = %67, %75, %74, %66
  %79 = load ptr, ptr %1, align 8, !tbaa !6
  %80 = load ptr, ptr %58, align 8, !tbaa !17
  %81 = tail call i32 @operand_equal_p(ptr noundef %79, ptr noundef %80, i32 noundef 0)
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %91

83:                                               ; preds = %78
  %84 = load ptr, ptr %2, align 8, !tbaa !6
  %85 = icmp eq ptr %84, null
  %86 = load ptr, ptr %58, align 8, !tbaa !17
  br i1 %85, label %87, label %88

87:                                               ; preds = %83
  store ptr %86, ptr %2, align 8, !tbaa !6
  br label %91

88:                                               ; preds = %83
  %89 = tail call i32 @operand_equal_p(ptr noundef nonnull %84, ptr noundef %86, i32 noundef 0)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %87, %88, %78
  br label %94

92:                                               ; preds = %15, %26, %23, %36, %30, %48, %43, %17
  %93 = phi i32 [ 0, %15 ], [ 0, %17 ], [ 0, %43 ], [ 0, %48 ], [ %10, %30 ], [ 0, %36 ], [ 0, %23 ], [ 0, %26 ]
  br label %94

94:                                               ; preds = %30, %92, %88, %75, %55, %91
  %95 = phi i32 [ 1, %91 ], [ 0, %55 ], [ 0, %75 ], [ 0, %88 ], [ %93, %92 ], [ 0, %30 ]
  ret i32 %95
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @eval_subst(i32 noundef %0, ptr noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) unnamed_addr #10 {
  br label %7

7:                                                ; preds = %52, %6
  %8 = phi ptr [ %1, %6 ], [ %54, %52 ]
  %9 = load i64, ptr %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = and i32 %10, 65535
  %12 = and i64 %9, 65535
  %13 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !17
  %15 = icmp eq i32 %14, 10
  %16 = icmp eq i32 %11, 96
  %17 = and i1 %15, %16
  %18 = xor i1 %15, true
  %19 = or i1 %16, %18
  %20 = select i1 %17, i32 6, i32 %14
  %21 = add nsw i32 %11, -91
  %22 = icmp ult i32 %21, 2
  %23 = select i1 %22, i32 7, i32 10
  %24 = select i1 %19, i32 %20, i32 %23
  switch i32 %24, label %115 [
    i32 6, label %25
    i32 7, label %35
    i32 10, label %48
    i32 5, label %77
  ]

25:                                               ; preds = %7
  %26 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %27 = load ptr, ptr %26, align 8, !tbaa !17
  %28 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %29, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %31 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %11, ptr noundef %27, ptr noundef %30)
  %32 = icmp eq ptr %31, null
  br i1 %32, label %33, label %115

33:                                               ; preds = %25
  %34 = tail call ptr @build1_stat(i32 noundef %11, ptr noundef %27, ptr noundef %30) #24
  br label %112

35:                                               ; preds = %7
  %36 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  %38 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %39, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %41 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 1
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %42, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %44 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %11, ptr noundef %37, ptr noundef %40, ptr noundef %43)
  %45 = icmp eq ptr %44, null
  br i1 %45, label %46, label %115

46:                                               ; preds = %35
  %47 = tail call ptr @build2_stat(i32 noundef %11, ptr noundef %37, ptr noundef %40, ptr noundef %43) #24
  br label %112

48:                                               ; preds = %7
  %49 = trunc i64 %9 to i16
  switch i16 %49, label %77 [
    i16 120, label %50
    i16 52, label %55
    i16 56, label %57
  ]

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  br label %52

52:                                               ; preds = %50, %55
  %53 = phi ptr [ %51, %50 ], [ %56, %55 ]
  %54 = load ptr, ptr %53, align 8, !tbaa !17
  br label %7

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 1
  br label %52

57:                                               ; preds = %48
  %58 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  %62 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %61, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %63 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 1
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %64, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %66 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 1, i32 0, i32 1
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  %68 = tail call fastcc ptr @eval_subst(i32 noundef %0, ptr noundef %67, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %69 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 56), align 4, !tbaa !17
  %70 = icmp eq i32 %69, 9
  br i1 %70, label %71, label %72

71:                                               ; preds = %57
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %72

72:                                               ; preds = %71, %57
  %73 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef 56, ptr noundef %59, ptr noundef %62, ptr noundef %65, ptr noundef %68)
  %74 = icmp eq ptr %73, null
  br i1 %74, label %75, label %115

75:                                               ; preds = %72
  %76 = tail call ptr @build3_stat(i32 noundef 56, ptr noundef %59, ptr noundef %62, ptr noundef %65, ptr noundef %68) #24
  br label %112

77:                                               ; preds = %48, %7
  %78 = getelementptr inbounds %struct.tree_common, ptr %8, i64 0, i32 2
  %79 = load ptr, ptr %78, align 8, !tbaa !17
  %80 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 0, i32 3
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = getelementptr inbounds %struct.tree_exp, ptr %8, i64 1
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = icmp eq ptr %81, %2
  br i1 %84, label %94, label %85

85:                                               ; preds = %77
  %86 = tail call i32 @operand_equal_p(ptr noundef %81, ptr noundef %2, i32 noundef 0)
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %94

88:                                               ; preds = %85
  %89 = icmp eq ptr %81, %4
  br i1 %89, label %93, label %90

90:                                               ; preds = %88
  %91 = tail call i32 @operand_equal_p(ptr noundef %81, ptr noundef %4, i32 noundef 0)
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %90, %88
  br label %94

94:                                               ; preds = %77, %85, %90, %93
  %95 = phi ptr [ %5, %93 ], [ %81, %90 ], [ %3, %85 ], [ %3, %77 ]
  %96 = icmp eq ptr %83, %2
  br i1 %96, label %106, label %97

97:                                               ; preds = %94
  %98 = tail call i32 @operand_equal_p(ptr noundef %83, ptr noundef %2, i32 noundef 0)
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %97
  %101 = icmp eq ptr %83, %4
  br i1 %101, label %105, label %102

102:                                              ; preds = %100
  %103 = tail call i32 @operand_equal_p(ptr noundef %83, ptr noundef %4, i32 noundef 0)
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %106, label %105

105:                                              ; preds = %102, %100
  br label %106

106:                                              ; preds = %94, %97, %102, %105
  %107 = phi ptr [ %5, %105 ], [ %83, %102 ], [ %3, %97 ], [ %3, %94 ]
  %108 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %11, ptr noundef %79, ptr noundef %95, ptr noundef %107)
  %109 = icmp eq ptr %108, null
  br i1 %109, label %110, label %115

110:                                              ; preds = %106
  %111 = tail call ptr @build2_stat(i32 noundef %11, ptr noundef %79, ptr noundef %95, ptr noundef %107) #24
  br label %112

112:                                              ; preds = %33, %46, %75, %110
  %113 = phi ptr [ %111, %110 ], [ %76, %75 ], [ %47, %46 ], [ %34, %33 ]
  %114 = getelementptr inbounds %struct.tree_exp, ptr %113, i64 0, i32 1
  store i32 %0, ptr %114, align 8, !tbaa !17
  br label %115

115:                                              ; preds = %7, %112, %106, %72, %35, %25
  %116 = phi ptr [ %31, %25 ], [ %44, %35 ], [ %73, %72 ], [ %108, %106 ], [ %113, %112 ], [ %8, %7 ]
  ret ptr %116
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_div_compare(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr nocapture noundef readonly %3, ptr noundef %4) unnamed_addr #10 {
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #24
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #24
  %12 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = load i64, ptr %13, align 8
  %15 = lshr i64 %14, 21
  %16 = trunc i64 %15 to i8
  %17 = and i8 %16, 1
  %18 = getelementptr inbounds %struct.tree_int_cst, ptr %11, i64 0, i32 1
  %19 = load i64, ptr %18, align 8, !tbaa !17
  %20 = getelementptr inbounds %struct.tree_int_cst, ptr %11, i64 0, i32 1, i32 1
  %21 = load i64, ptr %20, align 8, !tbaa !17
  %22 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1
  %23 = load i64, ptr %22, align 8, !tbaa !17
  %24 = getelementptr inbounds %struct.tree_int_cst, ptr %4, i64 0, i32 1, i32 1
  %25 = load i64, ptr %24, align 8, !tbaa !17
  %26 = call i32 @mul_double_with_sign(i64 noundef %19, i64 noundef %21, i64 noundef %23, i64 noundef %25, ptr noundef nonnull %6, ptr noundef nonnull %7, i8 noundef zeroext %17), !range !28
  %27 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = load i64, ptr %6, align 8, !tbaa !24
  %30 = load i64, ptr %7, align 8, !tbaa !24
  %31 = trunc i32 %26 to i8
  %32 = tail call ptr @force_fit_type_double(ptr noundef %28, i64 noundef %29, i64 noundef %30, i32 noundef -1, i8 noundef zeroext %31)
  %33 = icmp eq i8 %17, 0
  br i1 %33, label %109, label %34

34:                                               ; preds = %5
  %35 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %36 = load ptr, ptr %35, align 8, !tbaa !17
  %37 = tail call ptr @build_int_cst(ptr noundef %36, i64 noundef 1) #24
  %38 = load ptr, ptr %35, align 8, !tbaa !17
  %39 = load i64, ptr %38, align 8
  %40 = and i64 %39, 65535
  %41 = icmp eq i64 %40, 8
  br i1 %41, label %42, label %47

42:                                               ; preds = %34
  %43 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 6
  %44 = load i32, ptr %43, align 4
  %45 = and i32 %44, 1024
  %46 = icmp ne i32 %45, 0
  br label %47

47:                                               ; preds = %34, %42
  %48 = phi i1 [ false, %34 ], [ %46, %42 ]
  %49 = load i64, ptr %18, align 8, !tbaa !17
  %50 = load i64, ptr %20, align 8, !tbaa !17
  %51 = getelementptr inbounds %struct.tree_int_cst, ptr %37, i64 0, i32 1
  %52 = load i64, ptr %51, align 8, !tbaa !17
  %53 = getelementptr inbounds %struct.tree_int_cst, ptr %37, i64 0, i32 1, i32 1
  %54 = load i64, ptr %53, align 8, !tbaa !17
  %55 = icmp eq i64 %52, 0
  %56 = sub nsw i64 0, %54
  %57 = xor i64 %54, -1
  %58 = select i1 %55, i64 %56, i64 %57
  %59 = sub i64 %49, %52
  %60 = add i64 %58, %50
  %61 = icmp ult i64 %59, %49
  %62 = zext i1 %61 to i64
  %63 = add i64 %60, %62
  %64 = xor i64 %63, %50
  %65 = xor i64 %54, %63
  %66 = xor i64 %65, -1
  %67 = and i64 %64, %66
  %68 = lshr i64 %67, 63
  %69 = trunc i64 %68 to i32
  %70 = and i64 %39, 2097152
  %71 = icmp eq i64 %70, 0
  %72 = select i1 %71, i1 true, i1 %48
  %73 = select i1 %72, i32 %69, i32 0
  %74 = load i64, ptr %11, align 8
  %75 = load i64, ptr %37, align 8
  %76 = or i64 %75, %74
  %77 = trunc i64 %76 to i32
  %78 = lshr i32 %77, 27
  %79 = and i32 %78, 1
  %80 = or i32 %73, %79
  %81 = trunc i32 %80 to i8
  %82 = tail call ptr @force_fit_type_double(ptr noundef nonnull %38, i64 noundef %59, i64 noundef %63, i32 noundef 1, i8 noundef zeroext %81)
  %83 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1
  %84 = load i64, ptr %83, align 8, !tbaa !17
  %85 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1, i32 1
  %86 = load i64, ptr %85, align 8, !tbaa !17
  %87 = getelementptr inbounds %struct.tree_int_cst, ptr %82, i64 0, i32 1
  %88 = load i64, ptr %87, align 8, !tbaa !17
  %89 = getelementptr inbounds %struct.tree_int_cst, ptr %82, i64 0, i32 1, i32 1
  %90 = load i64, ptr %89, align 8, !tbaa !17
  %91 = add i64 %88, %84
  %92 = add i64 %90, %86
  %93 = icmp ult i64 %91, %84
  %94 = zext i1 %93 to i64
  %95 = add i64 %92, %94
  %96 = icmp ult i64 %95, %86
  %97 = icmp eq i64 %95, %86
  %98 = and i1 %93, %97
  %99 = or i1 %96, %98
  %100 = zext i1 %99 to i32
  %101 = load ptr, ptr %27, align 8, !tbaa !17
  %102 = load i64, ptr %32, align 8
  %103 = trunc i64 %102 to i32
  %104 = lshr i32 %103, 27
  %105 = and i32 %104, 1
  %106 = or i32 %105, %100
  %107 = trunc i32 %106 to i8
  %108 = tail call ptr @force_fit_type_double(ptr noundef %101, i64 noundef %91, i64 noundef %95, i32 noundef -1, i8 noundef zeroext %107)
  br label %413

109:                                              ; preds = %5
  %110 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %11) #24
  %111 = icmp sgt i32 %110, -1
  br i1 %111, label %112, label %260

112:                                              ; preds = %109
  %113 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = tail call ptr @build_int_cst(ptr noundef %114, i64 noundef 1) #24
  %116 = load ptr, ptr %113, align 8, !tbaa !17
  %117 = load i64, ptr %116, align 8
  %118 = and i64 %117, 65535
  %119 = icmp eq i64 %118, 8
  br i1 %119, label %120, label %125

120:                                              ; preds = %112
  %121 = getelementptr inbounds %struct.tree_type, ptr %116, i64 0, i32 6
  %122 = load i32, ptr %121, align 4
  %123 = and i32 %122, 1024
  %124 = icmp ne i32 %123, 0
  br label %125

125:                                              ; preds = %112, %120
  %126 = phi i1 [ false, %112 ], [ %124, %120 ]
  %127 = load i64, ptr %18, align 8, !tbaa !17
  %128 = load i64, ptr %20, align 8, !tbaa !17
  %129 = getelementptr inbounds %struct.tree_int_cst, ptr %115, i64 0, i32 1
  %130 = load i64, ptr %129, align 8, !tbaa !17
  %131 = getelementptr inbounds %struct.tree_int_cst, ptr %115, i64 0, i32 1, i32 1
  %132 = load i64, ptr %131, align 8, !tbaa !17
  %133 = icmp eq i64 %130, 0
  %134 = sub nsw i64 0, %132
  %135 = xor i64 %132, -1
  %136 = select i1 %133, i64 %134, i64 %135
  %137 = sub i64 %127, %130
  %138 = add i64 %136, %128
  %139 = icmp ult i64 %137, %127
  %140 = zext i1 %139 to i64
  %141 = add i64 %138, %140
  %142 = xor i64 %141, %128
  %143 = xor i64 %132, %141
  %144 = xor i64 %143, -1
  %145 = and i64 %142, %144
  %146 = lshr i64 %145, 63
  %147 = trunc i64 %146 to i32
  %148 = and i64 %117, 2097152
  %149 = icmp eq i64 %148, 0
  %150 = select i1 %149, i1 true, i1 %126
  %151 = select i1 %150, i32 %147, i32 0
  %152 = load i64, ptr %11, align 8
  %153 = load i64, ptr %115, align 8
  %154 = or i64 %153, %152
  %155 = trunc i64 %154 to i32
  %156 = lshr i32 %155, 27
  %157 = and i32 %156, 1
  %158 = or i32 %151, %157
  %159 = trunc i32 %158 to i8
  %160 = tail call ptr @force_fit_type_double(ptr noundef nonnull %116, i64 noundef %137, i64 noundef %141, i32 noundef 1, i8 noundef zeroext %159)
  %161 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %4) #24
  switch i32 %161, label %259 [
    i32 -1, label %162
    i32 0, label %211
    i32 1, label %214
  ]

162:                                              ; preds = %125
  %163 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = load i64, ptr %164, align 8
  %166 = and i64 %165, 65535
  %167 = icmp eq i64 %166, 8
  br i1 %167, label %168, label %173

168:                                              ; preds = %162
  %169 = getelementptr inbounds %struct.tree_type, ptr %164, i64 0, i32 6
  %170 = load i32, ptr %169, align 4
  %171 = and i32 %170, 1024
  %172 = icmp ne i32 %171, 0
  br label %173

173:                                              ; preds = %162, %168
  %174 = phi i1 [ false, %162 ], [ %172, %168 ]
  %175 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1
  %176 = load i64, ptr %175, align 8, !tbaa !17
  %177 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1, i32 1
  %178 = load i64, ptr %177, align 8, !tbaa !17
  %179 = getelementptr inbounds %struct.tree_int_cst, ptr %160, i64 0, i32 1
  %180 = load i64, ptr %179, align 8, !tbaa !17
  %181 = getelementptr inbounds %struct.tree_int_cst, ptr %160, i64 0, i32 1, i32 1
  %182 = load i64, ptr %181, align 8, !tbaa !17
  %183 = icmp eq i64 %180, 0
  %184 = sub nsw i64 0, %182
  %185 = xor i64 %182, -1
  %186 = select i1 %183, i64 %184, i64 %185
  %187 = sub i64 %176, %180
  %188 = add i64 %186, %178
  %189 = icmp ult i64 %187, %176
  %190 = zext i1 %189 to i64
  %191 = add i64 %188, %190
  %192 = xor i64 %191, %178
  %193 = xor i64 %182, %191
  %194 = xor i64 %193, -1
  %195 = and i64 %192, %194
  %196 = lshr i64 %195, 63
  %197 = trunc i64 %196 to i32
  %198 = and i64 %165, 2097152
  %199 = icmp eq i64 %198, 0
  %200 = select i1 %199, i1 true, i1 %174
  %201 = select i1 %200, i32 %197, i32 0
  %202 = load i64, ptr %32, align 8
  %203 = load i64, ptr %160, align 8
  %204 = or i64 %203, %202
  %205 = trunc i64 %204 to i32
  %206 = lshr i32 %205, 27
  %207 = and i32 %206, 1
  %208 = or i32 %201, %207
  %209 = trunc i32 %208 to i8
  %210 = tail call ptr @force_fit_type_double(ptr noundef nonnull %164, i64 noundef %187, i64 noundef %191, i32 noundef 1, i8 noundef zeroext %209)
  br label %413

211:                                              ; preds = %125
  %212 = load ptr, ptr %12, align 8, !tbaa !17
  %213 = tail call fastcc ptr @fold_negate_const(ptr noundef %160, ptr noundef %212)
  br label %413

214:                                              ; preds = %125
  %215 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %216 = load ptr, ptr %215, align 8, !tbaa !17
  %217 = load i64, ptr %216, align 8
  %218 = and i64 %217, 65535
  %219 = icmp eq i64 %218, 8
  br i1 %219, label %220, label %225

220:                                              ; preds = %214
  %221 = getelementptr inbounds %struct.tree_type, ptr %216, i64 0, i32 6
  %222 = load i32, ptr %221, align 4
  %223 = and i32 %222, 1024
  %224 = icmp ne i32 %223, 0
  br label %225

225:                                              ; preds = %214, %220
  %226 = phi i1 [ false, %214 ], [ %224, %220 ]
  %227 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1
  %228 = load i64, ptr %227, align 8, !tbaa !17
  %229 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1, i32 1
  %230 = load i64, ptr %229, align 8, !tbaa !17
  %231 = getelementptr inbounds %struct.tree_int_cst, ptr %160, i64 0, i32 1
  %232 = load i64, ptr %231, align 8, !tbaa !17
  %233 = getelementptr inbounds %struct.tree_int_cst, ptr %160, i64 0, i32 1, i32 1
  %234 = load i64, ptr %233, align 8, !tbaa !17
  %235 = add i64 %232, %228
  %236 = add i64 %234, %230
  %237 = icmp ult i64 %235, %228
  %238 = zext i1 %237 to i64
  %239 = add i64 %236, %238
  %240 = xor i64 %230, %234
  %241 = xor i64 %240, -1
  %242 = xor i64 %239, %230
  %243 = and i64 %242, %241
  %244 = lshr i64 %243, 63
  %245 = trunc i64 %244 to i32
  %246 = and i64 %217, 2097152
  %247 = icmp eq i64 %246, 0
  %248 = select i1 %247, i1 true, i1 %226
  %249 = select i1 %248, i32 %245, i32 0
  %250 = load i64, ptr %32, align 8
  %251 = load i64, ptr %160, align 8
  %252 = or i64 %251, %250
  %253 = trunc i64 %252 to i32
  %254 = lshr i32 %253, 27
  %255 = and i32 %254, 1
  %256 = or i32 %249, %255
  %257 = trunc i32 %256 to i8
  %258 = tail call ptr @force_fit_type_double(ptr noundef nonnull %216, i64 noundef %235, i64 noundef %239, i32 noundef 1, i8 noundef zeroext %257)
  br label %413

259:                                              ; preds = %125
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 7116, ptr noundef nonnull @.str.1) #24
  br label %413

260:                                              ; preds = %109
  %261 = add i32 %1, -97
  %262 = icmp ult i32 %261, 14
  br i1 %262, label %264, label %263

263:                                              ; preds = %260
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %268

264:                                              ; preds = %260
  %265 = sext i32 %261 to i64
  %266 = getelementptr inbounds [14 x i32], ptr @switch.table.fold_div_compare, i64 0, i64 %265
  %267 = load i32, ptr %266, align 4
  br label %268

268:                                              ; preds = %264, %263
  %269 = phi i32 [ 0, %263 ], [ %267, %264 ]
  %270 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %271 = load ptr, ptr %270, align 8, !tbaa !17
  %272 = tail call ptr @build_int_cst(ptr noundef %271, i64 noundef 1) #24
  %273 = load ptr, ptr %270, align 8, !tbaa !17
  %274 = load i64, ptr %273, align 8
  %275 = and i64 %274, 65535
  %276 = icmp eq i64 %275, 8
  br i1 %276, label %277, label %282

277:                                              ; preds = %268
  %278 = getelementptr inbounds %struct.tree_type, ptr %273, i64 0, i32 6
  %279 = load i32, ptr %278, align 4
  %280 = and i32 %279, 1024
  %281 = icmp ne i32 %280, 0
  br label %282

282:                                              ; preds = %268, %277
  %283 = phi i1 [ false, %268 ], [ %281, %277 ]
  %284 = load i64, ptr %18, align 8, !tbaa !17
  %285 = load i64, ptr %20, align 8, !tbaa !17
  %286 = getelementptr inbounds %struct.tree_int_cst, ptr %272, i64 0, i32 1
  %287 = load i64, ptr %286, align 8, !tbaa !17
  %288 = getelementptr inbounds %struct.tree_int_cst, ptr %272, i64 0, i32 1, i32 1
  %289 = load i64, ptr %288, align 8, !tbaa !17
  %290 = add i64 %287, %284
  %291 = add i64 %289, %285
  %292 = icmp ult i64 %290, %284
  %293 = zext i1 %292 to i64
  %294 = add i64 %291, %293
  %295 = xor i64 %285, %289
  %296 = xor i64 %295, -1
  %297 = xor i64 %294, %285
  %298 = and i64 %297, %296
  %299 = lshr i64 %298, 63
  %300 = trunc i64 %299 to i32
  %301 = and i64 %274, 2097152
  %302 = icmp eq i64 %301, 0
  %303 = select i1 %302, i1 true, i1 %283
  %304 = select i1 %303, i32 %300, i32 0
  %305 = load i64, ptr %11, align 8
  %306 = load i64, ptr %272, align 8
  %307 = or i64 %306, %305
  %308 = trunc i64 %307 to i32
  %309 = lshr i32 %308, 27
  %310 = and i32 %309, 1
  %311 = or i32 %304, %310
  %312 = trunc i32 %311 to i8
  %313 = tail call ptr @force_fit_type_double(ptr noundef nonnull %273, i64 noundef %290, i64 noundef %294, i32 noundef 1, i8 noundef zeroext %312)
  %314 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %4) #24
  switch i32 %314, label %412 [
    i32 -1, label %315
    i32 0, label %364
    i32 1, label %367
  ]

315:                                              ; preds = %282
  %316 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %317 = load ptr, ptr %316, align 8, !tbaa !17
  %318 = load i64, ptr %317, align 8
  %319 = and i64 %318, 65535
  %320 = icmp eq i64 %319, 8
  br i1 %320, label %321, label %326

321:                                              ; preds = %315
  %322 = getelementptr inbounds %struct.tree_type, ptr %317, i64 0, i32 6
  %323 = load i32, ptr %322, align 4
  %324 = and i32 %323, 1024
  %325 = icmp ne i32 %324, 0
  br label %326

326:                                              ; preds = %315, %321
  %327 = phi i1 [ false, %315 ], [ %325, %321 ]
  %328 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1
  %329 = load i64, ptr %328, align 8, !tbaa !17
  %330 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1, i32 1
  %331 = load i64, ptr %330, align 8, !tbaa !17
  %332 = getelementptr inbounds %struct.tree_int_cst, ptr %313, i64 0, i32 1
  %333 = load i64, ptr %332, align 8, !tbaa !17
  %334 = getelementptr inbounds %struct.tree_int_cst, ptr %313, i64 0, i32 1, i32 1
  %335 = load i64, ptr %334, align 8, !tbaa !17
  %336 = icmp eq i64 %333, 0
  %337 = sub nsw i64 0, %335
  %338 = xor i64 %335, -1
  %339 = select i1 %336, i64 %337, i64 %338
  %340 = sub i64 %329, %333
  %341 = add i64 %339, %331
  %342 = icmp ult i64 %340, %329
  %343 = zext i1 %342 to i64
  %344 = add i64 %341, %343
  %345 = xor i64 %344, %331
  %346 = xor i64 %335, %344
  %347 = xor i64 %346, -1
  %348 = and i64 %345, %347
  %349 = lshr i64 %348, 63
  %350 = trunc i64 %349 to i32
  %351 = and i64 %318, 2097152
  %352 = icmp eq i64 %351, 0
  %353 = select i1 %352, i1 true, i1 %327
  %354 = select i1 %353, i32 %350, i32 0
  %355 = load i64, ptr %32, align 8
  %356 = load i64, ptr %313, align 8
  %357 = or i64 %356, %355
  %358 = trunc i64 %357 to i32
  %359 = lshr i32 %358, 27
  %360 = and i32 %359, 1
  %361 = or i32 %354, %360
  %362 = trunc i32 %361 to i8
  %363 = tail call ptr @force_fit_type_double(ptr noundef nonnull %317, i64 noundef %340, i64 noundef %344, i32 noundef 1, i8 noundef zeroext %362)
  br label %413

364:                                              ; preds = %282
  %365 = load ptr, ptr %12, align 8, !tbaa !17
  %366 = tail call fastcc ptr @fold_negate_const(ptr noundef %313, ptr noundef %365)
  br label %413

367:                                              ; preds = %282
  %368 = getelementptr inbounds %struct.tree_common, ptr %32, i64 0, i32 2
  %369 = load ptr, ptr %368, align 8, !tbaa !17
  %370 = load i64, ptr %369, align 8
  %371 = and i64 %370, 65535
  %372 = icmp eq i64 %371, 8
  br i1 %372, label %373, label %378

373:                                              ; preds = %367
  %374 = getelementptr inbounds %struct.tree_type, ptr %369, i64 0, i32 6
  %375 = load i32, ptr %374, align 4
  %376 = and i32 %375, 1024
  %377 = icmp ne i32 %376, 0
  br label %378

378:                                              ; preds = %367, %373
  %379 = phi i1 [ false, %367 ], [ %377, %373 ]
  %380 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1
  %381 = load i64, ptr %380, align 8, !tbaa !17
  %382 = getelementptr inbounds %struct.tree_int_cst, ptr %32, i64 0, i32 1, i32 1
  %383 = load i64, ptr %382, align 8, !tbaa !17
  %384 = getelementptr inbounds %struct.tree_int_cst, ptr %313, i64 0, i32 1
  %385 = load i64, ptr %384, align 8, !tbaa !17
  %386 = getelementptr inbounds %struct.tree_int_cst, ptr %313, i64 0, i32 1, i32 1
  %387 = load i64, ptr %386, align 8, !tbaa !17
  %388 = add i64 %385, %381
  %389 = add i64 %387, %383
  %390 = icmp ult i64 %388, %381
  %391 = zext i1 %390 to i64
  %392 = add i64 %389, %391
  %393 = xor i64 %383, %387
  %394 = xor i64 %393, -1
  %395 = xor i64 %392, %383
  %396 = and i64 %395, %394
  %397 = lshr i64 %396, 63
  %398 = trunc i64 %397 to i32
  %399 = and i64 %370, 2097152
  %400 = icmp eq i64 %399, 0
  %401 = select i1 %400, i1 true, i1 %379
  %402 = select i1 %401, i32 %398, i32 0
  %403 = load i64, ptr %32, align 8
  %404 = load i64, ptr %313, align 8
  %405 = or i64 %404, %403
  %406 = trunc i64 %405 to i32
  %407 = lshr i32 %406, 27
  %408 = and i32 %407, 1
  %409 = or i32 %402, %408
  %410 = trunc i32 %409 to i8
  %411 = tail call ptr @force_fit_type_double(ptr noundef nonnull %369, i64 noundef %388, i64 noundef %392, i32 noundef 1, i8 noundef zeroext %410)
  br label %413

412:                                              ; preds = %282
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 7145, ptr noundef nonnull @.str.1) #24
  br label %413

413:                                              ; preds = %259, %225, %211, %173, %412, %378, %364, %326, %47
  %414 = phi ptr [ %108, %47 ], [ undef, %259 ], [ %258, %225 ], [ %160, %211 ], [ %32, %173 ], [ undef, %412 ], [ %32, %378 ], [ %366, %364 ], [ %363, %326 ]
  %415 = phi ptr [ %32, %47 ], [ undef, %259 ], [ %32, %225 ], [ %213, %211 ], [ %210, %173 ], [ undef, %412 ], [ %411, %378 ], [ %313, %364 ], [ %32, %326 ]
  %416 = phi i32 [ %1, %47 ], [ %1, %259 ], [ %1, %225 ], [ %1, %211 ], [ %1, %173 ], [ %269, %412 ], [ %269, %378 ], [ %269, %364 ], [ %269, %326 ]
  %417 = phi i1 [ true, %47 ], [ true, %259 ], [ true, %225 ], [ true, %211 ], [ false, %173 ], [ true, %412 ], [ false, %378 ], [ true, %364 ], [ true, %326 ]
  switch i32 %416, label %530 [
    i32 101, label %418
    i32 102, label %444
    i32 97, label %470
    i32 98, label %485
    i32 99, label %500
    i32 100, label %515
  ]

418:                                              ; preds = %413
  %419 = load i64, ptr %415, align 8
  %420 = and i64 %419, 134217728
  %421 = icmp eq i64 %420, 0
  %422 = load i64, ptr %414, align 8
  %423 = and i64 %422, 134217728
  %424 = icmp eq i64 %423, 0
  br i1 %421, label %429, label %425

425:                                              ; preds = %418
  br i1 %424, label %436, label %426

426:                                              ; preds = %425
  %427 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %428 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %427, ptr noundef nonnull %9)
  br label %530

429:                                              ; preds = %418
  br i1 %424, label %442, label %430

430:                                              ; preds = %429
  %431 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 100, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415)
  %432 = icmp eq ptr %431, null
  br i1 %432, label %433, label %530

433:                                              ; preds = %430
  %434 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415) #24
  %435 = getelementptr inbounds %struct.tree_exp, ptr %434, i64 0, i32 1
  store i32 %0, ptr %435, align 8, !tbaa !17
  br label %530

436:                                              ; preds = %425
  %437 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 98, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414)
  %438 = icmp eq ptr %437, null
  br i1 %438, label %439, label %530

439:                                              ; preds = %436
  %440 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414) #24
  %441 = getelementptr inbounds %struct.tree_exp, ptr %440, i64 0, i32 1
  store i32 %0, ptr %441, align 8, !tbaa !17
  br label %530

442:                                              ; preds = %429
  %443 = tail call ptr @build_range_check(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %9, i32 noundef 1, ptr noundef nonnull %415, ptr noundef nonnull %414)
  br label %530

444:                                              ; preds = %413
  %445 = load i64, ptr %415, align 8
  %446 = and i64 %445, 134217728
  %447 = icmp eq i64 %446, 0
  %448 = load i64, ptr %414, align 8
  %449 = and i64 %448, 134217728
  %450 = icmp eq i64 %449, 0
  br i1 %447, label %455, label %451

451:                                              ; preds = %444
  br i1 %450, label %462, label %452

452:                                              ; preds = %451
  %453 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16, !tbaa !6
  %454 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %453, ptr noundef nonnull %9)
  br label %530

455:                                              ; preds = %444
  br i1 %450, label %468, label %456

456:                                              ; preds = %455
  %457 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 97, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415)
  %458 = icmp eq ptr %457, null
  br i1 %458, label %459, label %530

459:                                              ; preds = %456
  %460 = tail call ptr @build2_stat(i32 noundef 97, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415) #24
  %461 = getelementptr inbounds %struct.tree_exp, ptr %460, i64 0, i32 1
  store i32 %0, ptr %461, align 8, !tbaa !17
  br label %530

462:                                              ; preds = %451
  %463 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 99, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414)
  %464 = icmp eq ptr %463, null
  br i1 %464, label %465, label %530

465:                                              ; preds = %462
  %466 = tail call ptr @build2_stat(i32 noundef 99, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414) #24
  %467 = getelementptr inbounds %struct.tree_exp, ptr %466, i64 0, i32 1
  store i32 %0, ptr %467, align 8, !tbaa !17
  br label %530

468:                                              ; preds = %455
  %469 = tail call ptr @build_range_check(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %9, i32 noundef 0, ptr noundef nonnull %415, ptr noundef nonnull %414)
  br label %530

470:                                              ; preds = %413
  %471 = load i64, ptr %415, align 8
  %472 = and i64 %471, 134217728
  %473 = icmp eq i64 %472, 0
  br i1 %473, label %479, label %474

474:                                              ; preds = %470
  %475 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %476 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %477 = select i1 %417, ptr %476, ptr %475
  %478 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %477, ptr noundef nonnull %9)
  br label %530

479:                                              ; preds = %470
  %480 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 97, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415)
  %481 = icmp eq ptr %480, null
  br i1 %481, label %482, label %530

482:                                              ; preds = %479
  %483 = tail call ptr @build2_stat(i32 noundef 97, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415) #24
  %484 = getelementptr inbounds %struct.tree_exp, ptr %483, i64 0, i32 1
  store i32 %0, ptr %484, align 8, !tbaa !17
  br label %530

485:                                              ; preds = %413
  %486 = load i64, ptr %414, align 8
  %487 = and i64 %486, 134217728
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %494, label %489

489:                                              ; preds = %485
  %490 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %491 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %492 = select i1 %417, ptr %491, ptr %490
  %493 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %492, ptr noundef nonnull %9)
  br label %530

494:                                              ; preds = %485
  %495 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 98, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414)
  %496 = icmp eq ptr %495, null
  br i1 %496, label %497, label %530

497:                                              ; preds = %494
  %498 = tail call ptr @build2_stat(i32 noundef 98, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414) #24
  %499 = getelementptr inbounds %struct.tree_exp, ptr %498, i64 0, i32 1
  store i32 %0, ptr %499, align 8, !tbaa !17
  br label %530

500:                                              ; preds = %413
  %501 = load i64, ptr %414, align 8
  %502 = and i64 %501, 134217728
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %509, label %504

504:                                              ; preds = %500
  %505 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %506 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %507 = select i1 %417, ptr %506, ptr %505
  %508 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %507, ptr noundef nonnull %9)
  br label %530

509:                                              ; preds = %500
  %510 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 99, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414)
  %511 = icmp eq ptr %510, null
  br i1 %511, label %512, label %530

512:                                              ; preds = %509
  %513 = tail call ptr @build2_stat(i32 noundef 99, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %414) #24
  %514 = getelementptr inbounds %struct.tree_exp, ptr %513, i64 0, i32 1
  store i32 %0, ptr %514, align 8, !tbaa !17
  br label %530

515:                                              ; preds = %413
  %516 = load i64, ptr %415, align 8
  %517 = and i64 %516, 134217728
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %524, label %519

519:                                              ; preds = %515
  %520 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 14), align 16
  %521 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8
  %522 = select i1 %417, ptr %521, ptr %520
  %523 = tail call ptr @omit_one_operand_loc(i32 noundef %0, ptr noundef %2, ptr noundef %522, ptr noundef nonnull %9)
  br label %530

524:                                              ; preds = %515
  %525 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef 100, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415)
  %526 = icmp eq ptr %525, null
  br i1 %526, label %527, label %530

527:                                              ; preds = %524
  %528 = tail call ptr @build2_stat(i32 noundef 100, ptr noundef %2, ptr noundef nonnull %9, ptr noundef nonnull %415) #24
  %529 = getelementptr inbounds %struct.tree_exp, ptr %528, i64 0, i32 1
  store i32 %0, ptr %529, align 8, !tbaa !17
  br label %530

530:                                              ; preds = %527, %524, %512, %509, %497, %494, %482, %479, %465, %462, %459, %456, %439, %436, %433, %430, %413, %519, %504, %489, %474, %468, %452, %442, %426
  %531 = phi ptr [ %523, %519 ], [ %508, %504 ], [ %493, %489 ], [ %478, %474 ], [ %454, %452 ], [ %469, %468 ], [ %428, %426 ], [ %443, %442 ], [ null, %413 ], [ %431, %430 ], [ %434, %433 ], [ %437, %436 ], [ %440, %439 ], [ %457, %456 ], [ %460, %459 ], [ %463, %462 ], [ %466, %465 ], [ %480, %479 ], [ %483, %482 ], [ %495, %494 ], [ %498, %497 ], [ %510, %509 ], [ %513, %512 ], [ %525, %524 ], [ %528, %527 ]
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #24
  ret ptr %531
}

declare i64 @int_size_in_bytes(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @maybe_canonicalize_comparison_1(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr nocapture noundef writeonly %5) unnamed_addr #10 {
  %7 = load i64, ptr %3, align 8
  %8 = trunc i64 %7 to i32
  %9 = and i32 %8, 65535
  %10 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = load i64, ptr %11, align 8
  %13 = and i64 %12, 2097152
  %14 = icmp eq i64 %13, 0
  %15 = load i32, ptr @flag_wrapv, align 4
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %14, i1 %16, i1 false
  %18 = load i32, ptr @flag_trapv, align 4
  %19 = icmp eq i32 %18, 0
  %20 = select i1 %17, i1 %19, i1 false
  %21 = load i32, ptr @flag_strict_overflow, align 4
  %22 = icmp ne i32 %21, 0
  %23 = select i1 %20, i1 %22, i1 false
  br i1 %23, label %24, label %35

24:                                               ; preds = %6
  %25 = trunc i64 %12 to i16
  switch i16 %25, label %26 [
    i16 10, label %35
    i16 12, label %35
  ]

26:                                               ; preds = %24
  %27 = add nsw i32 %9, -63
  %28 = icmp ult i32 %27, 2
  br i1 %28, label %29, label %35

29:                                               ; preds = %26
  %30 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = load i64, ptr %31, align 8
  %33 = and i64 %32, 65535
  %34 = icmp eq i64 %33, 23
  br i1 %34, label %37, label %143

35:                                               ; preds = %24, %24, %26, %6
  %36 = icmp eq i32 %9, 23
  br i1 %36, label %37, label %143

37:                                               ; preds = %29, %35
  %38 = phi i1 [ true, %35 ], [ false, %29 ]
  %39 = phi ptr [ %3, %35 ], [ %31, %29 ]
  %40 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %39) #24
  %41 = tail call i32 @integer_zerop(ptr noundef nonnull %39) #24
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %143

43:                                               ; preds = %37
  %44 = load i64, ptr %39, align 8
  %45 = and i64 %44, 134217728
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %143

47:                                               ; preds = %43
  br i1 %38, label %48, label %62

48:                                               ; preds = %47
  %49 = icmp eq i32 %1, 98
  %50 = icmp eq i32 %40, 1
  %51 = select i1 %49, i1 %50, i1 false
  br i1 %51, label %81, label %52

52:                                               ; preds = %48
  %53 = icmp eq i32 %1, 97
  %54 = icmp eq i32 %40, -1
  %55 = select i1 %53, i1 %54, i1 false
  br i1 %55, label %81, label %56

56:                                               ; preds = %52
  %57 = icmp eq i32 %1, 99
  %58 = select i1 %57, i1 %50, i1 false
  br i1 %58, label %81, label %59

59:                                               ; preds = %56
  %60 = icmp eq i32 %1, 100
  %61 = select i1 %60, i1 %54, i1 false
  br i1 %61, label %81, label %143

62:                                               ; preds = %47
  switch i32 %1, label %143 [
    i32 97, label %63
    i32 99, label %67
    i32 98, label %71
    i32 100, label %75
  ]

63:                                               ; preds = %62
  %64 = icmp eq i32 %40, -1
  %65 = select i1 %64, i32 63, i32 64
  %66 = icmp eq i32 %9, %65
  br i1 %66, label %79, label %143

67:                                               ; preds = %62
  %68 = icmp eq i32 %40, -1
  %69 = select i1 %68, i32 64, i32 63
  %70 = icmp eq i32 %9, %69
  br i1 %70, label %79, label %143

71:                                               ; preds = %62
  %72 = icmp eq i32 %40, -1
  %73 = select i1 %72, i32 64, i32 63
  %74 = icmp eq i32 %9, %73
  br i1 %74, label %79, label %143

75:                                               ; preds = %62
  %76 = icmp eq i32 %40, -1
  %77 = select i1 %76, i32 63, i32 64
  %78 = icmp eq i32 %9, %77
  br i1 %78, label %79, label %143

79:                                               ; preds = %75, %71, %67, %63
  %80 = phi i32 [ 98, %63 ], [ 100, %67 ], [ 97, %71 ], [ 99, %75 ]
  store i8 1, ptr %5, align 1, !tbaa !17
  br label %81

81:                                               ; preds = %48, %52, %56, %59, %79
  %82 = phi i32 [ %80, %79 ], [ 97, %48 ], [ 98, %52 ], [ 100, %56 ], [ 99, %59 ]
  %83 = getelementptr inbounds %struct.tree_common, ptr %39, i64 0, i32 2
  %84 = load ptr, ptr %83, align 8, !tbaa !17
  %85 = load i64, ptr %84, align 8
  %86 = trunc i64 %85 to i32
  %87 = and i32 %86, 65535
  %88 = add nsw i32 %87, -6
  %89 = icmp ult i32 %88, 3
  br i1 %89, label %90, label %105

90:                                               ; preds = %81
  switch i32 %40, label %105 [
    i32 1, label %91
    i32 -1, label %98
  ]

91:                                               ; preds = %90
  %92 = getelementptr inbounds %struct.tree_type, ptr %84, i64 0, i32 13
  %93 = load ptr, ptr %92, align 8, !tbaa !17
  %94 = icmp eq ptr %93, null
  br i1 %94, label %105, label %95

95:                                               ; preds = %91
  %96 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %39, ptr noundef nonnull %93) #24
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %105, label %143

98:                                               ; preds = %90
  %99 = getelementptr inbounds %struct.tree_type, ptr %84, i64 0, i32 14
  %100 = load ptr, ptr %99, align 8, !tbaa !17
  %101 = icmp eq ptr %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %98
  %103 = tail call i32 @tree_int_cst_equal(ptr noundef nonnull %39, ptr noundef nonnull %100) #24
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %143

105:                                              ; preds = %91, %95, %81, %90, %102, %98
  %106 = icmp eq i32 %40, -1
  %107 = select i1 %106, i32 63, i32 64
  %108 = load ptr, ptr %83, align 8, !tbaa !17
  %109 = tail call ptr @build_int_cst(ptr noundef %108, i64 noundef 1) #24
  %110 = tail call ptr @int_const_binop(i32 noundef %107, ptr noundef nonnull %39, ptr noundef %109, i32 noundef 0)
  br i1 %38, label %120, label %111

111:                                              ; preds = %105
  %112 = load ptr, ptr %10, align 8, !tbaa !17
  %113 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %114 = load ptr, ptr %113, align 8, !tbaa !17
  %115 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %9, ptr noundef %112, ptr noundef %114, ptr noundef %110)
  %116 = icmp eq ptr %115, null
  br i1 %116, label %117, label %134

117:                                              ; preds = %111
  %118 = tail call ptr @build2_stat(i32 noundef %9, ptr noundef %112, ptr noundef %114, ptr noundef %110) #24
  %119 = getelementptr inbounds %struct.tree_exp, ptr %118, i64 0, i32 1
  store i32 %0, ptr %119, align 8, !tbaa !17
  br label %134

120:                                              ; preds = %105
  %121 = add i32 %82, -97
  %122 = icmp ult i32 %121, 4
  br i1 %122, label %124, label %123

123:                                              ; preds = %120
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 2971, ptr noundef nonnull @.str.1) #24
  br label %128

124:                                              ; preds = %120
  %125 = sext i32 %121 to i64
  %126 = getelementptr inbounds [4 x i32], ptr @switch.table.maybe_canonicalize_comparison_1, i64 0, i64 %125
  %127 = load i32, ptr %126, align 4
  br label %128

128:                                              ; preds = %124, %123
  %129 = phi i32 [ 0, %123 ], [ %127, %124 ]
  %130 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %129, ptr noundef %2, ptr noundef %4, ptr noundef %110)
  %131 = icmp eq ptr %130, null
  br i1 %131, label %132, label %143

132:                                              ; preds = %128
  %133 = tail call ptr @build2_stat(i32 noundef %129, ptr noundef %2, ptr noundef %4, ptr noundef %110) #24
  br label %140

134:                                              ; preds = %117, %111
  %135 = phi ptr [ %118, %117 ], [ %115, %111 ]
  %136 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %82, ptr noundef %2, ptr noundef nonnull %135, ptr noundef %4)
  %137 = icmp eq ptr %136, null
  br i1 %137, label %138, label %143

138:                                              ; preds = %134
  %139 = tail call ptr @build2_stat(i32 noundef %82, ptr noundef %2, ptr noundef nonnull %135, ptr noundef %4) #24
  br label %140

140:                                              ; preds = %132, %138
  %141 = phi ptr [ %139, %138 ], [ %133, %132 ]
  %142 = getelementptr inbounds %struct.tree_exp, ptr %141, i64 0, i32 1
  store i32 %0, ptr %142, align 8, !tbaa !17
  br label %143

143:                                              ; preds = %140, %134, %128, %71, %67, %63, %95, %102, %75, %62, %59, %37, %43, %35, %29
  %144 = phi ptr [ null, %29 ], [ null, %35 ], [ null, %43 ], [ null, %37 ], [ null, %59 ], [ null, %62 ], [ null, %75 ], [ null, %102 ], [ null, %95 ], [ null, %63 ], [ null, %67 ], [ null, %71 ], [ %130, %128 ], [ %136, %134 ], [ %141, %140 ]
  ret ptr %144
}

declare void @real_maxval(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

declare ptr @get_unwidened(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @lower_bound_in_type(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @upper_bound_in_type(ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_ternary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) local_unnamed_addr #10 {
  %7 = alloca ptr, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %8
  %10 = load i32, ptr %9, align 4, !tbaa !17
  %11 = add i32 %10, -4
  %12 = icmp ult i32 %11, 7
  br i1 %12, label %13, label %17

13:                                               ; preds = %6
  %14 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %8
  %15 = load i8, ptr %14, align 1, !tbaa !17
  %16 = icmp eq i8 %15, 3
  br i1 %16, label %18, label %17

17:                                               ; preds = %13, %6
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 13754, ptr noundef nonnull @.str.1) #24
  br label %18

18:                                               ; preds = %13, %17
  %19 = icmp eq ptr %3, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %18
  %21 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %3) #24
  br label %22

22:                                               ; preds = %20, %18
  %23 = phi ptr [ %21, %20 ], [ null, %18 ]
  %24 = icmp eq ptr %4, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %4) #24
  br label %27

27:                                               ; preds = %25, %22
  %28 = phi ptr [ %26, %25 ], [ null, %22 ]
  switch i32 %1, label %1323 [
    i32 41, label %29
    i32 56, label %54
    i32 59, label %1218
    i32 42, label %1219
  ]

29:                                               ; preds = %27
  %30 = load i64, ptr %23, align 8
  %31 = and i64 %30, 65535
  %32 = icmp eq i64 %31, 51
  br i1 %32, label %33, label %1323

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %35 = load ptr, ptr %34, align 8, !tbaa !17
  %36 = tail call zeroext i8 @type_contains_placeholder_p(ptr noundef %35) #24
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %1323

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.tree_constructor, ptr %23, i64 0, i32 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = icmp eq ptr %40, null
  br i1 %41, label %1323, label %42

42:                                               ; preds = %38
  %43 = load i32, ptr %40, align 8, !tbaa !82
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %48, %42
  %46 = phi i64 [ %53, %48 ], [ 0, %42 ]
  %47 = icmp eq i64 %46, %44
  br i1 %47, label %1323, label %48

48:                                               ; preds = %45
  %49 = and i64 %46, 4294967295
  %50 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %40, i64 0, i32 2, i64 %49
  %51 = load ptr, ptr %50, align 8, !tbaa !84
  %52 = icmp eq ptr %51, %28
  %53 = add nuw nsw i64 %46, 1
  br i1 %52, label %1320, label %45, !llvm.loop !86

54:                                               ; preds = %27
  %55 = load i64, ptr %23, align 8
  %56 = and i64 %55, 65535
  %57 = icmp eq i64 %56, 23
  br i1 %57, label %58, label %95

58:                                               ; preds = %54
  %59 = tail call i32 @integer_zerop(ptr noundef nonnull %23) #24
  %60 = icmp eq i32 %59, 0
  %61 = select i1 %60, ptr %5, ptr %4
  %62 = tail call i32 @integer_zerop(ptr noundef nonnull %23) #24
  %63 = icmp eq i32 %62, 0
  %64 = select i1 %63, ptr %4, ptr %5
  %65 = load i64, ptr %61, align 8
  %66 = and i64 %65, 65536
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %58
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7)
  store ptr %61, ptr %7, align 8, !tbaa !6
  %69 = call ptr @walk_tree_without_duplicates_1(ptr noundef nonnull %7, ptr noundef nonnull @contains_label_1, ptr noundef null, ptr noundef null) #24
  %70 = icmp eq ptr %69, null
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7)
  br i1 %70, label %71, label %1323

71:                                               ; preds = %68, %58
  %72 = getelementptr inbounds %struct.tree_common, ptr %64, i64 0, i32 2
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = load i64, ptr %73, align 8
  %75 = and i64 %74, 65535
  %76 = icmp eq i64 %75, 19
  br i1 %76, label %77, label %81

77:                                               ; preds = %71
  %78 = load i64, ptr %2, align 8
  %79 = and i64 %78, 65535
  %80 = icmp eq i64 %79, 19
  br i1 %80, label %81, label %1323

81:                                               ; preds = %77, %71
  %82 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %81
  %85 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %1323

87:                                               ; preds = %84
  %88 = load i64, ptr %64, align 8
  %89 = call fastcc zeroext i8 @maybe_lvalue_p(i64 %88)
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %1323, label %91

91:                                               ; preds = %87
  %92 = call ptr @build1_stat(i32 noundef 117, ptr noundef nonnull %73, ptr noundef nonnull %64) #24
  %93 = getelementptr inbounds %struct.tree_exp, ptr %92, i64 0, i32 1
  store i32 %0, ptr %93, align 8, !tbaa !17
  br label %1323

94:                                               ; preds = %81
  call void @protected_set_expr_location(ptr noundef nonnull %64, i32 noundef %0) #24
  br label %1323

95:                                               ; preds = %54
  %96 = tail call i32 @operand_equal_p(ptr noundef %28, ptr noundef %5, i32 noundef 0)
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %190, label %98

98:                                               ; preds = %95
  %99 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %28)
  %100 = load i64, ptr %99, align 8
  %101 = and i64 %100, 65535
  %102 = icmp eq i64 %101, 116
  br i1 %102, label %103, label %122

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.tree_common, ptr %99, i64 0, i32 2
  %105 = load ptr, ptr %104, align 8, !tbaa !17
  %106 = load i64, ptr %105, align 8
  %107 = and i64 %106, 65535
  %108 = icmp eq i64 %107, 19
  br i1 %108, label %109, label %122

109:                                              ; preds = %103
  %110 = getelementptr inbounds %struct.tree_exp, ptr %99, i64 0, i32 3
  %111 = load ptr, ptr %110, align 8, !tbaa !17
  %112 = tail call i32 @integer_zerop(ptr noundef %111) #24
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %122, label %114

114:                                              ; preds = %109
  %115 = load i64, ptr %23, align 8
  %116 = and i64 %115, 65536
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %122, label %118

118:                                              ; preds = %114
  %119 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 38), align 16, !tbaa !6
  %120 = tail call ptr @fold_ignored_result(ptr noundef nonnull %23)
  %121 = tail call ptr @build1_stat(i32 noundef 116, ptr noundef %119, ptr noundef %120) #24
  br label %188

122:                                              ; preds = %114, %109, %103, %98
  %123 = load i64, ptr %23, align 8
  %124 = and i64 %123, 65536
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %172, label %126

126:                                              ; preds = %122, %167
  %127 = phi i64 [ %169, %167 ], [ %123, %122 ]
  %128 = phi ptr [ %168, %167 ], [ %23, %122 ]
  %129 = and i64 %127, 65535
  %130 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %129
  %131 = load i32, ptr %130, align 4, !tbaa !17
  switch i32 %131, label %170 [
    i32 6, label %164
    i32 7, label %132
    i32 5, label %132
    i32 10, label %144
  ]

132:                                              ; preds = %126, %126
  %133 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 0, i32 3
  %134 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 1
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  %136 = load i64, ptr %135, align 8
  %137 = and i64 %136, 65536
  %138 = icmp eq i64 %137, 0
  %139 = load ptr, ptr %133, align 8, !tbaa !17
  br i1 %138, label %167, label %140

140:                                              ; preds = %132
  %141 = load i64, ptr %139, align 8
  %142 = and i64 %141, 65536
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %167, label %170

144:                                              ; preds = %126
  %145 = trunc i64 %127 to i16
  switch i16 %145, label %170 [
    i16 52, label %146
    i16 56, label %152
  ]

146:                                              ; preds = %144
  %147 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 1
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = load i64, ptr %148, align 8
  %150 = and i64 %149, 65536
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %164, label %170

152:                                              ; preds = %144
  %153 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 1
  %154 = load ptr, ptr %153, align 8, !tbaa !17
  %155 = load i64, ptr %154, align 8
  %156 = and i64 %155, 65536
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %170

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 1, i32 0, i32 1
  %160 = load ptr, ptr %159, align 8, !tbaa !17
  %161 = load i64, ptr %160, align 8
  %162 = and i64 %161, 65536
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %170

164:                                              ; preds = %146, %126, %158
  %165 = getelementptr inbounds %struct.tree_exp, ptr %128, i64 0, i32 3
  %166 = load ptr, ptr %165, align 8, !tbaa !17
  br label %167

167:                                              ; preds = %164, %140, %132
  %168 = phi ptr [ %135, %140 ], [ %139, %132 ], [ %166, %164 ]
  %169 = load i64, ptr %168, align 8
  br label %126

170:                                              ; preds = %126, %140, %144, %146, %152, %158
  %171 = tail call ptr @build2_stat(i32 noundef 52, ptr noundef %2, ptr noundef nonnull %128, ptr noundef nonnull %99) #24
  br label %188

172:                                              ; preds = %122
  %173 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %187, label %175

175:                                              ; preds = %172
  %176 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %177 = icmp eq i8 %176, 0
  br i1 %177, label %178, label %1323

178:                                              ; preds = %175
  %179 = load i64, ptr %99, align 8
  %180 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %179)
  %181 = icmp eq i8 %180, 0
  br i1 %181, label %1323, label %182

182:                                              ; preds = %178
  %183 = getelementptr inbounds %struct.tree_common, ptr %99, i64 0, i32 2
  %184 = load ptr, ptr %183, align 8, !tbaa !17
  %185 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %184, ptr noundef nonnull %99) #24
  %186 = getelementptr inbounds %struct.tree_exp, ptr %185, i64 0, i32 1
  store i32 %0, ptr %186, align 8, !tbaa !17
  br label %1323

187:                                              ; preds = %172
  tail call void @protected_set_expr_location(ptr noundef nonnull %99, i32 noundef %0) #24
  br label %1323

188:                                              ; preds = %170, %118
  %189 = phi ptr [ %121, %118 ], [ %171, %170 ]
  tail call void @protected_set_expr_location(ptr noundef %189, i32 noundef %0) #24
  br label %1323

190:                                              ; preds = %95
  %191 = load i64, ptr %23, align 8
  %192 = and i64 %191, 65535
  %193 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %192
  %194 = load i32, ptr %193, align 4, !tbaa !17
  %195 = icmp eq i32 %194, 5
  br i1 %195, label %196, label %502

196:                                              ; preds = %190
  %197 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %198 = load ptr, ptr %197, align 8, !tbaa !17
  %199 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %200 = load ptr, ptr %199, align 8, !tbaa !17
  %201 = tail call fastcc i32 @operand_equal_for_comparison_p(ptr noundef %198, ptr noundef %28, ptr noundef %200), !range !28
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %502, label %203

203:                                              ; preds = %196
  %204 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %205 = load ptr, ptr %204, align 8, !tbaa !17
  %206 = load i64, ptr %205, align 8
  %207 = and i64 %206, 65535
  %208 = icmp eq i64 %207, 14
  br i1 %208, label %209, label %212

209:                                              ; preds = %203
  %210 = tail call i32 @vector_type_mode(ptr noundef nonnull %205) #24
  %211 = load ptr, ptr %204, align 8, !tbaa !17
  br label %217

212:                                              ; preds = %203
  %213 = getelementptr inbounds %struct.tree_type, ptr %205, i64 0, i32 6
  %214 = load i32, ptr %213, align 4
  %215 = lshr i32 %214, 16
  %216 = and i32 %215, 255
  br label %217

217:                                              ; preds = %212, %209
  %218 = phi ptr [ %211, %209 ], [ %205, %212 ]
  %219 = phi i32 [ %210, %209 ], [ %216, %212 ]
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %220
  %222 = load i8, ptr %221, align 1, !tbaa !17
  %223 = icmp eq i8 %222, 8
  br i1 %223, label %281, label %224

224:                                              ; preds = %217
  %225 = load i64, ptr %218, align 8
  %226 = and i64 %225, 65535
  %227 = icmp eq i64 %226, 14
  br i1 %227, label %228, label %231

228:                                              ; preds = %224
  %229 = tail call i32 @vector_type_mode(ptr noundef nonnull %218) #24
  %230 = load ptr, ptr %204, align 8, !tbaa !17
  br label %236

231:                                              ; preds = %224
  %232 = getelementptr inbounds %struct.tree_type, ptr %218, i64 0, i32 6
  %233 = load i32, ptr %232, align 4
  %234 = lshr i32 %233, 16
  %235 = and i32 %234, 255
  br label %236

236:                                              ; preds = %231, %228
  %237 = phi ptr [ %230, %228 ], [ %218, %231 ]
  %238 = phi i32 [ %229, %228 ], [ %235, %231 ]
  %239 = zext i32 %238 to i64
  %240 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %239
  %241 = load i8, ptr %240, align 1, !tbaa !17
  %242 = icmp eq i8 %241, 9
  br i1 %242, label %281, label %243

243:                                              ; preds = %236
  %244 = load i64, ptr %237, align 8
  %245 = and i64 %244, 65535
  %246 = icmp eq i64 %245, 14
  br i1 %246, label %247, label %250

247:                                              ; preds = %243
  %248 = tail call i32 @vector_type_mode(ptr noundef nonnull %237) #24
  %249 = load ptr, ptr %204, align 8, !tbaa !17
  br label %255

250:                                              ; preds = %243
  %251 = getelementptr inbounds %struct.tree_type, ptr %237, i64 0, i32 6
  %252 = load i32, ptr %251, align 4
  %253 = lshr i32 %252, 16
  %254 = and i32 %253, 255
  br label %255

255:                                              ; preds = %250, %247
  %256 = phi ptr [ %249, %247 ], [ %237, %250 ]
  %257 = phi i32 [ %248, %247 ], [ %254, %250 ]
  %258 = zext i32 %257 to i64
  %259 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %258
  %260 = load i8, ptr %259, align 1, !tbaa !17
  %261 = icmp eq i8 %260, 11
  br i1 %261, label %281, label %262

262:                                              ; preds = %255
  %263 = load i64, ptr %256, align 8
  %264 = and i64 %263, 65535
  %265 = icmp eq i64 %264, 14
  br i1 %265, label %266, label %268

266:                                              ; preds = %262
  %267 = tail call i32 @vector_type_mode(ptr noundef nonnull %256) #24
  br label %273

268:                                              ; preds = %262
  %269 = getelementptr inbounds %struct.tree_type, ptr %256, i64 0, i32 6
  %270 = load i32, ptr %269, align 4
  %271 = lshr i32 %270, 16
  %272 = and i32 %271, 255
  br label %273

273:                                              ; preds = %268, %266
  %274 = phi i32 [ %267, %266 ], [ %272, %268 ]
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %275
  %277 = load i8, ptr %276, align 1, !tbaa !17
  %278 = icmp eq i8 %277, 17
  br i1 %278, label %279, label %499

279:                                              ; preds = %273
  %280 = load ptr, ptr %204, align 8, !tbaa !17
  br label %281

281:                                              ; preds = %279, %255, %236, %217
  %282 = phi ptr [ %280, %279 ], [ %256, %255 ], [ %237, %236 ], [ %218, %217 ]
  %283 = load i64, ptr %282, align 8
  %284 = and i64 %283, 65535
  %285 = icmp eq i64 %284, 14
  br i1 %285, label %286, label %289

286:                                              ; preds = %281
  %287 = tail call i32 @vector_type_mode(ptr noundef nonnull %282) #24
  %288 = load ptr, ptr %204, align 8, !tbaa !17
  br label %294

289:                                              ; preds = %281
  %290 = getelementptr inbounds %struct.tree_type, ptr %282, i64 0, i32 6
  %291 = load i32, ptr %290, align 4
  %292 = lshr i32 %291, 16
  %293 = and i32 %292, 255
  br label %294

294:                                              ; preds = %289, %286
  %295 = phi ptr [ %288, %286 ], [ %282, %289 ]
  %296 = phi i32 [ %287, %286 ], [ %293, %289 ]
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %297
  %299 = load i8, ptr %298, align 1, !tbaa !17
  %300 = icmp eq i8 %299, 8
  br i1 %300, label %320, label %301

301:                                              ; preds = %294
  %302 = load i64, ptr %295, align 8
  %303 = and i64 %302, 65535
  %304 = icmp eq i64 %303, 14
  br i1 %304, label %305, label %308

305:                                              ; preds = %301
  %306 = tail call i32 @vector_type_mode(ptr noundef nonnull %295) #24
  %307 = load ptr, ptr %204, align 8, !tbaa !17
  br label %313

308:                                              ; preds = %301
  %309 = getelementptr inbounds %struct.tree_type, ptr %295, i64 0, i32 6
  %310 = load i32, ptr %309, align 4
  %311 = lshr i32 %310, 16
  %312 = and i32 %311, 255
  br label %313

313:                                              ; preds = %308, %305
  %314 = phi ptr [ %307, %305 ], [ %295, %308 ]
  %315 = phi i32 [ %306, %305 ], [ %312, %308 ]
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %316
  %318 = load i8, ptr %317, align 1, !tbaa !17
  %319 = icmp eq i8 %318, 9
  br i1 %319, label %320, label %332

320:                                              ; preds = %313, %294
  %321 = phi ptr [ %314, %313 ], [ %295, %294 ]
  %322 = load i64, ptr %321, align 8
  %323 = and i64 %322, 65535
  %324 = icmp eq i64 %323, 14
  br i1 %324, label %325, label %327

325:                                              ; preds = %320
  %326 = tail call i32 @vector_type_mode(ptr noundef nonnull %321) #24
  br label %349

327:                                              ; preds = %320
  %328 = getelementptr inbounds %struct.tree_type, ptr %321, i64 0, i32 6
  %329 = load i32, ptr %328, align 4
  %330 = lshr i32 %329, 16
  %331 = and i32 %330, 255
  br label %349

332:                                              ; preds = %313
  %333 = load i64, ptr %314, align 8
  %334 = and i64 %333, 65535
  %335 = icmp eq i64 %334, 14
  br i1 %335, label %336, label %338

336:                                              ; preds = %332
  %337 = tail call i32 @vector_type_mode(ptr noundef nonnull %314) #24
  br label %343

338:                                              ; preds = %332
  %339 = getelementptr inbounds %struct.tree_type, ptr %314, i64 0, i32 6
  %340 = load i32, ptr %339, align 4
  %341 = lshr i32 %340, 16
  %342 = and i32 %341, 255
  br label %343

343:                                              ; preds = %338, %336
  %344 = phi i32 [ %337, %336 ], [ %342, %338 ]
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %345
  %347 = load i8, ptr %346, align 1, !tbaa !17
  %348 = zext i8 %347 to i32
  br label %349

349:                                              ; preds = %325, %327, %343
  %350 = phi i32 [ %348, %343 ], [ %326, %325 ], [ %331, %327 ]
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %351
  %353 = load i8, ptr %352, align 1, !tbaa !17
  %354 = icmp eq i8 %353, 9
  %355 = load ptr, ptr %204, align 8, !tbaa !17
  %356 = load i64, ptr %355, align 8
  %357 = and i64 %356, 65535
  %358 = icmp eq i64 %357, 14
  br i1 %354, label %359, label %423

359:                                              ; preds = %349
  br i1 %358, label %360, label %363

360:                                              ; preds = %359
  %361 = tail call i32 @vector_type_mode(ptr noundef nonnull %355) #24
  %362 = load ptr, ptr %204, align 8, !tbaa !17
  br label %368

363:                                              ; preds = %359
  %364 = getelementptr inbounds %struct.tree_type, ptr %355, i64 0, i32 6
  %365 = load i32, ptr %364, align 4
  %366 = lshr i32 %365, 16
  %367 = and i32 %366, 255
  br label %368

368:                                              ; preds = %363, %360
  %369 = phi ptr [ %362, %360 ], [ %355, %363 ]
  %370 = phi i32 [ %361, %360 ], [ %367, %363 ]
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %371
  %373 = load i8, ptr %372, align 1, !tbaa !17
  %374 = icmp eq i8 %373, 8
  br i1 %374, label %394, label %375

375:                                              ; preds = %368
  %376 = load i64, ptr %369, align 8
  %377 = and i64 %376, 65535
  %378 = icmp eq i64 %377, 14
  br i1 %378, label %379, label %382

379:                                              ; preds = %375
  %380 = tail call i32 @vector_type_mode(ptr noundef nonnull %369) #24
  %381 = load ptr, ptr %204, align 8, !tbaa !17
  br label %387

382:                                              ; preds = %375
  %383 = getelementptr inbounds %struct.tree_type, ptr %369, i64 0, i32 6
  %384 = load i32, ptr %383, align 4
  %385 = lshr i32 %384, 16
  %386 = and i32 %385, 255
  br label %387

387:                                              ; preds = %382, %379
  %388 = phi ptr [ %381, %379 ], [ %369, %382 ]
  %389 = phi i32 [ %380, %379 ], [ %386, %382 ]
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %390
  %392 = load i8, ptr %391, align 1, !tbaa !17
  %393 = icmp eq i8 %392, 9
  br i1 %393, label %394, label %406

394:                                              ; preds = %387, %368
  %395 = phi ptr [ %388, %387 ], [ %369, %368 ]
  %396 = load i64, ptr %395, align 8
  %397 = and i64 %396, 65535
  %398 = icmp eq i64 %397, 14
  br i1 %398, label %399, label %401

399:                                              ; preds = %394
  %400 = tail call i32 @vector_type_mode(ptr noundef nonnull %395) #24
  br label %487

401:                                              ; preds = %394
  %402 = getelementptr inbounds %struct.tree_type, ptr %395, i64 0, i32 6
  %403 = load i32, ptr %402, align 4
  %404 = lshr i32 %403, 16
  %405 = and i32 %404, 255
  br label %487

406:                                              ; preds = %387
  %407 = load i64, ptr %388, align 8
  %408 = and i64 %407, 65535
  %409 = icmp eq i64 %408, 14
  br i1 %409, label %410, label %412

410:                                              ; preds = %406
  %411 = tail call i32 @vector_type_mode(ptr noundef nonnull %388) #24
  br label %417

412:                                              ; preds = %406
  %413 = getelementptr inbounds %struct.tree_type, ptr %388, i64 0, i32 6
  %414 = load i32, ptr %413, align 4
  %415 = lshr i32 %414, 16
  %416 = and i32 %415, 255
  br label %417

417:                                              ; preds = %412, %410
  %418 = phi i32 [ %411, %410 ], [ %416, %412 ]
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %419
  %421 = load i8, ptr %420, align 1, !tbaa !17
  %422 = zext i8 %421 to i32
  br label %487

423:                                              ; preds = %349
  br i1 %358, label %424, label %427

424:                                              ; preds = %423
  %425 = tail call i32 @vector_type_mode(ptr noundef nonnull %355) #24
  %426 = load ptr, ptr %204, align 8, !tbaa !17
  br label %432

427:                                              ; preds = %423
  %428 = getelementptr inbounds %struct.tree_type, ptr %355, i64 0, i32 6
  %429 = load i32, ptr %428, align 4
  %430 = lshr i32 %429, 16
  %431 = and i32 %430, 255
  br label %432

432:                                              ; preds = %427, %424
  %433 = phi ptr [ %426, %424 ], [ %355, %427 ]
  %434 = phi i32 [ %425, %424 ], [ %431, %427 ]
  %435 = zext i32 %434 to i64
  %436 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %435
  %437 = load i8, ptr %436, align 1, !tbaa !17
  %438 = icmp eq i8 %437, 8
  br i1 %438, label %458, label %439

439:                                              ; preds = %432
  %440 = load i64, ptr %433, align 8
  %441 = and i64 %440, 65535
  %442 = icmp eq i64 %441, 14
  br i1 %442, label %443, label %446

443:                                              ; preds = %439
  %444 = tail call i32 @vector_type_mode(ptr noundef nonnull %433) #24
  %445 = load ptr, ptr %204, align 8, !tbaa !17
  br label %451

446:                                              ; preds = %439
  %447 = getelementptr inbounds %struct.tree_type, ptr %433, i64 0, i32 6
  %448 = load i32, ptr %447, align 4
  %449 = lshr i32 %448, 16
  %450 = and i32 %449, 255
  br label %451

451:                                              ; preds = %446, %443
  %452 = phi ptr [ %445, %443 ], [ %433, %446 ]
  %453 = phi i32 [ %444, %443 ], [ %450, %446 ]
  %454 = zext i32 %453 to i64
  %455 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %454
  %456 = load i8, ptr %455, align 1, !tbaa !17
  %457 = icmp eq i8 %456, 9
  br i1 %457, label %458, label %470

458:                                              ; preds = %451, %432
  %459 = phi ptr [ %452, %451 ], [ %433, %432 ]
  %460 = load i64, ptr %459, align 8
  %461 = and i64 %460, 65535
  %462 = icmp eq i64 %461, 14
  br i1 %462, label %463, label %465

463:                                              ; preds = %458
  %464 = tail call i32 @vector_type_mode(ptr noundef nonnull %459) #24
  br label %487

465:                                              ; preds = %458
  %466 = getelementptr inbounds %struct.tree_type, ptr %459, i64 0, i32 6
  %467 = load i32, ptr %466, align 4
  %468 = lshr i32 %467, 16
  %469 = and i32 %468, 255
  br label %487

470:                                              ; preds = %451
  %471 = load i64, ptr %452, align 8
  %472 = and i64 %471, 65535
  %473 = icmp eq i64 %472, 14
  br i1 %473, label %474, label %476

474:                                              ; preds = %470
  %475 = tail call i32 @vector_type_mode(ptr noundef nonnull %452) #24
  br label %481

476:                                              ; preds = %470
  %477 = getelementptr inbounds %struct.tree_type, ptr %452, i64 0, i32 6
  %478 = load i32, ptr %477, align 4
  %479 = lshr i32 %478, 16
  %480 = and i32 %479, 255
  br label %481

481:                                              ; preds = %476, %474
  %482 = phi i32 [ %475, %474 ], [ %480, %476 ]
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %483
  %485 = load i8, ptr %484, align 1, !tbaa !17
  %486 = zext i8 %485 to i32
  br label %487

487:                                              ; preds = %481, %465, %463, %417, %401, %399
  %488 = phi i32 [ %422, %417 ], [ %400, %399 ], [ %405, %401 ], [ %486, %481 ], [ %464, %463 ], [ %469, %465 ]
  %489 = add i32 %488, -38
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %490
  %492 = load ptr, ptr %491, align 8, !tbaa !6
  %493 = getelementptr inbounds %struct.real_format, ptr %492, i64 0, i32 14
  %494 = load i8, ptr %493, align 1, !tbaa !37
  %495 = icmp ne i8 %494, 0
  %496 = load i32, ptr @flag_signed_zeros, align 4
  %497 = icmp ne i32 %496, 0
  %498 = select i1 %495, i1 %497, i1 false
  br i1 %498, label %502, label %499

499:                                              ; preds = %487, %273
  %500 = tail call fastcc ptr @fold_cond_expr_with_comparison(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %23, ptr noundef %4, ptr noundef %5)
  %501 = icmp eq ptr %500, null
  br i1 %501, label %502, label %1323

502:                                              ; preds = %499, %487, %196, %190
  %503 = load i64, ptr %23, align 8
  %504 = and i64 %503, 65535
  %505 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %504
  %506 = load i32, ptr %505, align 4, !tbaa !17
  %507 = icmp eq i32 %506, 5
  br i1 %507, label %508, label %823

508:                                              ; preds = %502
  %509 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %510 = load ptr, ptr %509, align 8, !tbaa !17
  %511 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %512 = load ptr, ptr %511, align 8, !tbaa !17
  %513 = tail call fastcc i32 @operand_equal_for_comparison_p(ptr noundef %510, ptr noundef %5, ptr noundef %512), !range !28
  %514 = icmp eq i32 %513, 0
  br i1 %514, label %823, label %515

515:                                              ; preds = %508
  %516 = getelementptr inbounds %struct.tree_common, ptr %5, i64 0, i32 2
  %517 = load ptr, ptr %516, align 8, !tbaa !17
  %518 = load i64, ptr %517, align 8
  %519 = and i64 %518, 65535
  %520 = icmp eq i64 %519, 14
  br i1 %520, label %521, label %524

521:                                              ; preds = %515
  %522 = tail call i32 @vector_type_mode(ptr noundef nonnull %517) #24
  %523 = load ptr, ptr %516, align 8, !tbaa !17
  br label %529

524:                                              ; preds = %515
  %525 = getelementptr inbounds %struct.tree_type, ptr %517, i64 0, i32 6
  %526 = load i32, ptr %525, align 4
  %527 = lshr i32 %526, 16
  %528 = and i32 %527, 255
  br label %529

529:                                              ; preds = %524, %521
  %530 = phi ptr [ %523, %521 ], [ %517, %524 ]
  %531 = phi i32 [ %522, %521 ], [ %528, %524 ]
  %532 = zext i32 %531 to i64
  %533 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %532
  %534 = load i8, ptr %533, align 1, !tbaa !17
  %535 = icmp eq i8 %534, 8
  br i1 %535, label %593, label %536

536:                                              ; preds = %529
  %537 = load i64, ptr %530, align 8
  %538 = and i64 %537, 65535
  %539 = icmp eq i64 %538, 14
  br i1 %539, label %540, label %543

540:                                              ; preds = %536
  %541 = tail call i32 @vector_type_mode(ptr noundef nonnull %530) #24
  %542 = load ptr, ptr %516, align 8, !tbaa !17
  br label %548

543:                                              ; preds = %536
  %544 = getelementptr inbounds %struct.tree_type, ptr %530, i64 0, i32 6
  %545 = load i32, ptr %544, align 4
  %546 = lshr i32 %545, 16
  %547 = and i32 %546, 255
  br label %548

548:                                              ; preds = %543, %540
  %549 = phi ptr [ %542, %540 ], [ %530, %543 ]
  %550 = phi i32 [ %541, %540 ], [ %547, %543 ]
  %551 = zext i32 %550 to i64
  %552 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %551
  %553 = load i8, ptr %552, align 1, !tbaa !17
  %554 = icmp eq i8 %553, 9
  br i1 %554, label %593, label %555

555:                                              ; preds = %548
  %556 = load i64, ptr %549, align 8
  %557 = and i64 %556, 65535
  %558 = icmp eq i64 %557, 14
  br i1 %558, label %559, label %562

559:                                              ; preds = %555
  %560 = tail call i32 @vector_type_mode(ptr noundef nonnull %549) #24
  %561 = load ptr, ptr %516, align 8, !tbaa !17
  br label %567

562:                                              ; preds = %555
  %563 = getelementptr inbounds %struct.tree_type, ptr %549, i64 0, i32 6
  %564 = load i32, ptr %563, align 4
  %565 = lshr i32 %564, 16
  %566 = and i32 %565, 255
  br label %567

567:                                              ; preds = %562, %559
  %568 = phi ptr [ %561, %559 ], [ %549, %562 ]
  %569 = phi i32 [ %560, %559 ], [ %566, %562 ]
  %570 = zext i32 %569 to i64
  %571 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %570
  %572 = load i8, ptr %571, align 1, !tbaa !17
  %573 = icmp eq i8 %572, 11
  br i1 %573, label %593, label %574

574:                                              ; preds = %567
  %575 = load i64, ptr %568, align 8
  %576 = and i64 %575, 65535
  %577 = icmp eq i64 %576, 14
  br i1 %577, label %578, label %580

578:                                              ; preds = %574
  %579 = tail call i32 @vector_type_mode(ptr noundef nonnull %568) #24
  br label %585

580:                                              ; preds = %574
  %581 = getelementptr inbounds %struct.tree_type, ptr %568, i64 0, i32 6
  %582 = load i32, ptr %581, align 4
  %583 = lshr i32 %582, 16
  %584 = and i32 %583, 255
  br label %585

585:                                              ; preds = %580, %578
  %586 = phi i32 [ %579, %578 ], [ %584, %580 ]
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %587
  %589 = load i8, ptr %588, align 1, !tbaa !17
  %590 = icmp eq i8 %589, 17
  br i1 %590, label %591, label %811

591:                                              ; preds = %585
  %592 = load ptr, ptr %516, align 8, !tbaa !17
  br label %593

593:                                              ; preds = %591, %567, %548, %529
  %594 = phi ptr [ %592, %591 ], [ %568, %567 ], [ %549, %548 ], [ %530, %529 ]
  %595 = load i64, ptr %594, align 8
  %596 = and i64 %595, 65535
  %597 = icmp eq i64 %596, 14
  br i1 %597, label %598, label %601

598:                                              ; preds = %593
  %599 = tail call i32 @vector_type_mode(ptr noundef nonnull %594) #24
  %600 = load ptr, ptr %516, align 8, !tbaa !17
  br label %606

601:                                              ; preds = %593
  %602 = getelementptr inbounds %struct.tree_type, ptr %594, i64 0, i32 6
  %603 = load i32, ptr %602, align 4
  %604 = lshr i32 %603, 16
  %605 = and i32 %604, 255
  br label %606

606:                                              ; preds = %601, %598
  %607 = phi ptr [ %600, %598 ], [ %594, %601 ]
  %608 = phi i32 [ %599, %598 ], [ %605, %601 ]
  %609 = zext i32 %608 to i64
  %610 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %609
  %611 = load i8, ptr %610, align 1, !tbaa !17
  %612 = icmp eq i8 %611, 8
  br i1 %612, label %632, label %613

613:                                              ; preds = %606
  %614 = load i64, ptr %607, align 8
  %615 = and i64 %614, 65535
  %616 = icmp eq i64 %615, 14
  br i1 %616, label %617, label %620

617:                                              ; preds = %613
  %618 = tail call i32 @vector_type_mode(ptr noundef nonnull %607) #24
  %619 = load ptr, ptr %516, align 8, !tbaa !17
  br label %625

620:                                              ; preds = %613
  %621 = getelementptr inbounds %struct.tree_type, ptr %607, i64 0, i32 6
  %622 = load i32, ptr %621, align 4
  %623 = lshr i32 %622, 16
  %624 = and i32 %623, 255
  br label %625

625:                                              ; preds = %620, %617
  %626 = phi ptr [ %619, %617 ], [ %607, %620 ]
  %627 = phi i32 [ %618, %617 ], [ %624, %620 ]
  %628 = zext i32 %627 to i64
  %629 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %628
  %630 = load i8, ptr %629, align 1, !tbaa !17
  %631 = icmp eq i8 %630, 9
  br i1 %631, label %632, label %644

632:                                              ; preds = %625, %606
  %633 = phi ptr [ %626, %625 ], [ %607, %606 ]
  %634 = load i64, ptr %633, align 8
  %635 = and i64 %634, 65535
  %636 = icmp eq i64 %635, 14
  br i1 %636, label %637, label %639

637:                                              ; preds = %632
  %638 = tail call i32 @vector_type_mode(ptr noundef nonnull %633) #24
  br label %661

639:                                              ; preds = %632
  %640 = getelementptr inbounds %struct.tree_type, ptr %633, i64 0, i32 6
  %641 = load i32, ptr %640, align 4
  %642 = lshr i32 %641, 16
  %643 = and i32 %642, 255
  br label %661

644:                                              ; preds = %625
  %645 = load i64, ptr %626, align 8
  %646 = and i64 %645, 65535
  %647 = icmp eq i64 %646, 14
  br i1 %647, label %648, label %650

648:                                              ; preds = %644
  %649 = tail call i32 @vector_type_mode(ptr noundef nonnull %626) #24
  br label %655

650:                                              ; preds = %644
  %651 = getelementptr inbounds %struct.tree_type, ptr %626, i64 0, i32 6
  %652 = load i32, ptr %651, align 4
  %653 = lshr i32 %652, 16
  %654 = and i32 %653, 255
  br label %655

655:                                              ; preds = %650, %648
  %656 = phi i32 [ %649, %648 ], [ %654, %650 ]
  %657 = zext i32 %656 to i64
  %658 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %657
  %659 = load i8, ptr %658, align 1, !tbaa !17
  %660 = zext i8 %659 to i32
  br label %661

661:                                              ; preds = %637, %639, %655
  %662 = phi i32 [ %660, %655 ], [ %638, %637 ], [ %643, %639 ]
  %663 = zext i32 %662 to i64
  %664 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %663
  %665 = load i8, ptr %664, align 1, !tbaa !17
  %666 = icmp eq i8 %665, 9
  %667 = load ptr, ptr %516, align 8, !tbaa !17
  %668 = load i64, ptr %667, align 8
  %669 = and i64 %668, 65535
  %670 = icmp eq i64 %669, 14
  br i1 %666, label %671, label %735

671:                                              ; preds = %661
  br i1 %670, label %672, label %675

672:                                              ; preds = %671
  %673 = tail call i32 @vector_type_mode(ptr noundef nonnull %667) #24
  %674 = load ptr, ptr %516, align 8, !tbaa !17
  br label %680

675:                                              ; preds = %671
  %676 = getelementptr inbounds %struct.tree_type, ptr %667, i64 0, i32 6
  %677 = load i32, ptr %676, align 4
  %678 = lshr i32 %677, 16
  %679 = and i32 %678, 255
  br label %680

680:                                              ; preds = %675, %672
  %681 = phi ptr [ %674, %672 ], [ %667, %675 ]
  %682 = phi i32 [ %673, %672 ], [ %679, %675 ]
  %683 = zext i32 %682 to i64
  %684 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %683
  %685 = load i8, ptr %684, align 1, !tbaa !17
  %686 = icmp eq i8 %685, 8
  br i1 %686, label %706, label %687

687:                                              ; preds = %680
  %688 = load i64, ptr %681, align 8
  %689 = and i64 %688, 65535
  %690 = icmp eq i64 %689, 14
  br i1 %690, label %691, label %694

691:                                              ; preds = %687
  %692 = tail call i32 @vector_type_mode(ptr noundef nonnull %681) #24
  %693 = load ptr, ptr %516, align 8, !tbaa !17
  br label %699

694:                                              ; preds = %687
  %695 = getelementptr inbounds %struct.tree_type, ptr %681, i64 0, i32 6
  %696 = load i32, ptr %695, align 4
  %697 = lshr i32 %696, 16
  %698 = and i32 %697, 255
  br label %699

699:                                              ; preds = %694, %691
  %700 = phi ptr [ %693, %691 ], [ %681, %694 ]
  %701 = phi i32 [ %692, %691 ], [ %698, %694 ]
  %702 = zext i32 %701 to i64
  %703 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %702
  %704 = load i8, ptr %703, align 1, !tbaa !17
  %705 = icmp eq i8 %704, 9
  br i1 %705, label %706, label %718

706:                                              ; preds = %699, %680
  %707 = phi ptr [ %700, %699 ], [ %681, %680 ]
  %708 = load i64, ptr %707, align 8
  %709 = and i64 %708, 65535
  %710 = icmp eq i64 %709, 14
  br i1 %710, label %711, label %713

711:                                              ; preds = %706
  %712 = tail call i32 @vector_type_mode(ptr noundef nonnull %707) #24
  br label %799

713:                                              ; preds = %706
  %714 = getelementptr inbounds %struct.tree_type, ptr %707, i64 0, i32 6
  %715 = load i32, ptr %714, align 4
  %716 = lshr i32 %715, 16
  %717 = and i32 %716, 255
  br label %799

718:                                              ; preds = %699
  %719 = load i64, ptr %700, align 8
  %720 = and i64 %719, 65535
  %721 = icmp eq i64 %720, 14
  br i1 %721, label %722, label %724

722:                                              ; preds = %718
  %723 = tail call i32 @vector_type_mode(ptr noundef nonnull %700) #24
  br label %729

724:                                              ; preds = %718
  %725 = getelementptr inbounds %struct.tree_type, ptr %700, i64 0, i32 6
  %726 = load i32, ptr %725, align 4
  %727 = lshr i32 %726, 16
  %728 = and i32 %727, 255
  br label %729

729:                                              ; preds = %724, %722
  %730 = phi i32 [ %723, %722 ], [ %728, %724 ]
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %731
  %733 = load i8, ptr %732, align 1, !tbaa !17
  %734 = zext i8 %733 to i32
  br label %799

735:                                              ; preds = %661
  br i1 %670, label %736, label %739

736:                                              ; preds = %735
  %737 = tail call i32 @vector_type_mode(ptr noundef nonnull %667) #24
  %738 = load ptr, ptr %516, align 8, !tbaa !17
  br label %744

739:                                              ; preds = %735
  %740 = getelementptr inbounds %struct.tree_type, ptr %667, i64 0, i32 6
  %741 = load i32, ptr %740, align 4
  %742 = lshr i32 %741, 16
  %743 = and i32 %742, 255
  br label %744

744:                                              ; preds = %739, %736
  %745 = phi ptr [ %738, %736 ], [ %667, %739 ]
  %746 = phi i32 [ %737, %736 ], [ %743, %739 ]
  %747 = zext i32 %746 to i64
  %748 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %747
  %749 = load i8, ptr %748, align 1, !tbaa !17
  %750 = icmp eq i8 %749, 8
  br i1 %750, label %770, label %751

751:                                              ; preds = %744
  %752 = load i64, ptr %745, align 8
  %753 = and i64 %752, 65535
  %754 = icmp eq i64 %753, 14
  br i1 %754, label %755, label %758

755:                                              ; preds = %751
  %756 = tail call i32 @vector_type_mode(ptr noundef nonnull %745) #24
  %757 = load ptr, ptr %516, align 8, !tbaa !17
  br label %763

758:                                              ; preds = %751
  %759 = getelementptr inbounds %struct.tree_type, ptr %745, i64 0, i32 6
  %760 = load i32, ptr %759, align 4
  %761 = lshr i32 %760, 16
  %762 = and i32 %761, 255
  br label %763

763:                                              ; preds = %758, %755
  %764 = phi ptr [ %757, %755 ], [ %745, %758 ]
  %765 = phi i32 [ %756, %755 ], [ %762, %758 ]
  %766 = zext i32 %765 to i64
  %767 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %766
  %768 = load i8, ptr %767, align 1, !tbaa !17
  %769 = icmp eq i8 %768, 9
  br i1 %769, label %770, label %782

770:                                              ; preds = %763, %744
  %771 = phi ptr [ %764, %763 ], [ %745, %744 ]
  %772 = load i64, ptr %771, align 8
  %773 = and i64 %772, 65535
  %774 = icmp eq i64 %773, 14
  br i1 %774, label %775, label %777

775:                                              ; preds = %770
  %776 = tail call i32 @vector_type_mode(ptr noundef nonnull %771) #24
  br label %799

777:                                              ; preds = %770
  %778 = getelementptr inbounds %struct.tree_type, ptr %771, i64 0, i32 6
  %779 = load i32, ptr %778, align 4
  %780 = lshr i32 %779, 16
  %781 = and i32 %780, 255
  br label %799

782:                                              ; preds = %763
  %783 = load i64, ptr %764, align 8
  %784 = and i64 %783, 65535
  %785 = icmp eq i64 %784, 14
  br i1 %785, label %786, label %788

786:                                              ; preds = %782
  %787 = tail call i32 @vector_type_mode(ptr noundef nonnull %764) #24
  br label %793

788:                                              ; preds = %782
  %789 = getelementptr inbounds %struct.tree_type, ptr %764, i64 0, i32 6
  %790 = load i32, ptr %789, align 4
  %791 = lshr i32 %790, 16
  %792 = and i32 %791, 255
  br label %793

793:                                              ; preds = %788, %786
  %794 = phi i32 [ %787, %786 ], [ %792, %788 ]
  %795 = zext i32 %794 to i64
  %796 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %795
  %797 = load i8, ptr %796, align 1, !tbaa !17
  %798 = zext i8 %797 to i32
  br label %799

799:                                              ; preds = %793, %777, %775, %729, %713, %711
  %800 = phi i32 [ %734, %729 ], [ %712, %711 ], [ %717, %713 ], [ %798, %793 ], [ %776, %775 ], [ %781, %777 ]
  %801 = add i32 %800, -38
  %802 = zext i32 %801 to i64
  %803 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %802
  %804 = load ptr, ptr %803, align 8, !tbaa !6
  %805 = getelementptr inbounds %struct.real_format, ptr %804, i64 0, i32 14
  %806 = load i8, ptr %805, align 1, !tbaa !37
  %807 = icmp ne i8 %806, 0
  %808 = load i32, ptr @flag_signed_zeros, align 4
  %809 = icmp ne i32 %808, 0
  %810 = select i1 %807, i1 %809, i1 false
  br i1 %810, label %823, label %811

811:                                              ; preds = %799, %585
  %812 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %23)
  %813 = icmp eq ptr %812, null
  br i1 %813, label %823, label %814

814:                                              ; preds = %811
  %815 = load i64, ptr %812, align 8
  %816 = and i64 %815, 65535
  %817 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %816
  %818 = load i32, ptr %817, align 4, !tbaa !17
  %819 = icmp eq i32 %818, 5
  br i1 %819, label %820, label %823

820:                                              ; preds = %814
  %821 = tail call fastcc ptr @fold_cond_expr_with_comparison(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %812, ptr noundef nonnull %5, ptr noundef %4)
  %822 = icmp eq ptr %821, null
  br i1 %822, label %823, label %1323

823:                                              ; preds = %811, %814, %820, %799, %508, %502
  %824 = load i64, ptr %23, align 8
  %825 = trunc i64 %824 to i32
  %826 = and i32 %825, 65535
  %827 = and i64 %824, 65535
  %828 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %827
  %829 = load i32, ptr %828, align 4, !tbaa !17
  %830 = icmp eq i32 %829, 5
  %831 = icmp eq i32 %826, 93
  %832 = or i1 %830, %831
  %833 = icmp eq i32 %826, 91
  %834 = or i1 %833, %832
  %835 = and i32 %825, 65533
  %836 = icmp eq i32 %835, 92
  %837 = or i1 %836, %834
  %838 = add nsw i32 %826, -95
  %839 = icmp ult i32 %838, 2
  %840 = or i1 %839, %837
  br i1 %840, label %841, label %849

841:                                              ; preds = %823
  %842 = tail call zeroext i8 @tree_swap_operands_p(ptr noundef %4, ptr noundef %5, i8 noundef zeroext 0), !range !40
  %843 = icmp eq i8 %842, 0
  br i1 %843, label %849, label %844

844:                                              ; preds = %841
  %845 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %23)
  %846 = icmp eq ptr %845, null
  br i1 %846, label %849, label %847

847:                                              ; preds = %844
  %848 = tail call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 56, ptr noundef %2, ptr noundef nonnull %845, ptr noundef %5, ptr noundef %4)
  br label %1323

849:                                              ; preds = %844, %841, %823
  %850 = tail call i32 @integer_onep(ptr noundef %4) #24
  %851 = icmp eq i32 %850, 0
  br i1 %851, label %861, label %852

852:                                              ; preds = %849
  %853 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %861, label %855

855:                                              ; preds = %852
  %856 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %857 = load ptr, ptr %856, align 8, !tbaa !17
  %858 = icmp eq ptr %857, %2
  br i1 %858, label %859, label %861

859:                                              ; preds = %855
  %860 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef nonnull %23)
  br label %1323

861:                                              ; preds = %855, %852, %849
  %862 = tail call i32 @integer_zerop(ptr noundef %4) #24
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %864, label %866

864:                                              ; preds = %861
  %865 = load i64, ptr %23, align 8
  br label %891

866:                                              ; preds = %861
  %867 = tail call i32 @integer_onep(ptr noundef %5) #24
  %868 = icmp eq i32 %867, 0
  %869 = load i64, ptr %23, align 8
  br i1 %868, label %891, label %870

870:                                              ; preds = %866
  %871 = trunc i64 %869 to i32
  %872 = and i32 %871, 65535
  %873 = and i64 %869, 65535
  %874 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %873
  %875 = load i32, ptr %874, align 4, !tbaa !17
  %876 = icmp eq i32 %875, 5
  %877 = icmp eq i32 %872, 93
  %878 = or i1 %876, %877
  %879 = icmp eq i32 %872, 91
  %880 = or i1 %879, %878
  %881 = and i32 %871, 65533
  %882 = icmp eq i32 %881, 92
  %883 = or i1 %882, %880
  %884 = add nsw i32 %872, -95
  %885 = icmp ult i32 %884, 2
  %886 = or i1 %885, %883
  br i1 %886, label %887, label %891

887:                                              ; preds = %870
  %888 = tail call ptr @invert_truthvalue_loc(i32 noundef %0, ptr noundef nonnull %23)
  %889 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %888)
  %890 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %889)
  br label %1323

891:                                              ; preds = %864, %870, %866
  %892 = phi i64 [ %865, %864 ], [ %869, %870 ], [ %869, %866 ]
  %893 = and i64 %892, 65535
  %894 = icmp eq i64 %893, 97
  br i1 %894, label %895, label %975

895:                                              ; preds = %891
  %896 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %897 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %898 = load ptr, ptr %897, align 8, !tbaa !17
  %899 = tail call i32 @integer_zerop(ptr noundef %898) #24
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %975, label %901

901:                                              ; preds = %895
  %902 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %903 = icmp eq i32 %902, 0
  br i1 %903, label %975, label %904

904:                                              ; preds = %901
  %905 = load ptr, ptr %896, align 8, !tbaa !17
  %906 = tail call fastcc ptr @sign_bit_p(ptr noundef %905, ptr noundef %28)
  %907 = icmp eq ptr %906, null
  br i1 %907, label %975, label %908

908:                                              ; preds = %904
  %909 = getelementptr inbounds %struct.tree_common, ptr %906, i64 0, i32 2
  %910 = load ptr, ptr %909, align 8, !tbaa !17
  %911 = getelementptr inbounds %struct.tree_type, ptr %910, i64 0, i32 6
  %912 = load i32, ptr %911, align 4
  %913 = and i32 %912, 1023
  %914 = getelementptr inbounds %struct.tree_common, ptr %28, i64 0, i32 2
  %915 = load ptr, ptr %914, align 8, !tbaa !17
  %916 = getelementptr inbounds %struct.tree_type, ptr %915, i64 0, i32 6
  %917 = load i32, ptr %916, align 4
  %918 = and i32 %917, 1023
  %919 = icmp ult i32 %913, %918
  br i1 %919, label %920, label %969

920:                                              ; preds = %908
  %921 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 6
  %922 = load i32, ptr %921, align 4
  %923 = and i32 %922, 1023
  %924 = icmp ult i32 %913, %923
  br i1 %924, label %925, label %969

925:                                              ; preds = %920
  %926 = tail call i32 @llvm.umin.i32(i32 %918, i32 %923)
  %927 = icmp ugt i32 %926, 64
  %928 = sub nsw i32 128, %926
  %929 = zext i32 %928 to i64
  %930 = lshr i64 -1, %929
  %931 = sub nuw nsw i32 64, %926
  %932 = zext i32 %931 to i64
  %933 = lshr i64 -1, %932
  %934 = select i1 %927, i64 -2, i64 %933
  %935 = select i1 %927, i64 %930, i64 0
  %936 = icmp ugt i32 %913, 64
  %937 = sub nuw nsw i32 64, %913
  %938 = zext i32 %937 to i64
  %939 = lshr i64 -1, %938
  %940 = xor i64 %939, -1
  %941 = and i64 %934, %940
  %942 = select i1 %936, i64 0, i64 %941
  %943 = getelementptr inbounds %struct.tree_int_cst, ptr %28, i64 0, i32 1
  %944 = getelementptr inbounds %struct.tree_int_cst, ptr %28, i64 0, i32 1, i32 1
  %945 = load i64, ptr %944, align 8, !tbaa !17
  %946 = and i64 %945, %935
  %947 = icmp eq i64 %946, %935
  br i1 %947, label %948, label %954

948:                                              ; preds = %925
  %949 = load i64, ptr %943, align 8, !tbaa !17
  %950 = and i64 %949, %942
  %951 = icmp eq i64 %950, %942
  br i1 %951, label %952, label %954

952:                                              ; preds = %948
  %953 = tail call ptr @signed_type_for(ptr noundef nonnull %910) #24
  br label %962

954:                                              ; preds = %948, %925
  %955 = icmp eq i64 %946, 0
  br i1 %955, label %956, label %975

956:                                              ; preds = %954
  %957 = load i64, ptr %943, align 8, !tbaa !17
  %958 = and i64 %957, %942
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %960, label %975

960:                                              ; preds = %956
  %961 = tail call ptr @unsigned_type_for(ptr noundef nonnull %910) #24
  br label %962

962:                                              ; preds = %952, %960
  %963 = phi ptr [ %953, %952 ], [ %961, %960 ]
  %964 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %963, ptr noundef nonnull %906)
  %965 = icmp eq ptr %964, null
  br i1 %965, label %975, label %966

966:                                              ; preds = %962
  %967 = getelementptr inbounds %struct.tree_common, ptr %964, i64 0, i32 2
  %968 = load ptr, ptr %967, align 8, !tbaa !17
  br label %969

969:                                              ; preds = %966, %908, %920
  %970 = phi ptr [ %968, %966 ], [ %910, %920 ], [ %910, %908 ]
  %971 = phi ptr [ %964, %966 ], [ %906, %920 ], [ %906, %908 ]
  %972 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %970, ptr noundef nonnull %28)
  %973 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %970, ptr noundef nonnull %971, ptr noundef %972)
  %974 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %973)
  br label %1323

975:                                              ; preds = %954, %956, %962, %904, %901, %895, %891
  %976 = load i64, ptr %23, align 8
  %977 = and i64 %976, 65535
  %978 = icmp eq i64 %977, 89
  br i1 %978, label %979, label %1014

979:                                              ; preds = %975
  %980 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %981 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %982 = load ptr, ptr %981, align 8, !tbaa !17
  %983 = tail call i32 @integer_onep(ptr noundef %982) #24
  %984 = icmp eq i32 %983, 0
  br i1 %984, label %1014, label %985

985:                                              ; preds = %979
  %986 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %987 = icmp eq i32 %986, 0
  br i1 %987, label %1014, label %988

988:                                              ; preds = %985
  %989 = tail call i32 @integer_pow2p(ptr noundef %28) #24
  %990 = icmp eq i32 %989, 0
  br i1 %990, label %1014, label %991

991:                                              ; preds = %988
  %992 = load ptr, ptr %980, align 8, !tbaa !17
  %993 = tail call ptr @tree_strip_nop_conversions(ptr noundef %992) #24
  %994 = load i64, ptr %993, align 8
  %995 = and i64 %994, 65535
  %996 = icmp eq i64 %995, 84
  br i1 %996, label %997, label %1014

997:                                              ; preds = %991
  %998 = getelementptr inbounds %struct.tree_exp, ptr %993, i64 0, i32 3
  %999 = getelementptr inbounds %struct.tree_exp, ptr %993, i64 1
  %1000 = load ptr, ptr %999, align 8, !tbaa !17
  %1001 = load i64, ptr %1000, align 8
  %1002 = and i64 %1001, 65535
  %1003 = icmp eq i64 %1002, 23
  br i1 %1003, label %1004, label %1014

1004:                                             ; preds = %997
  %1005 = tail call i32 @tree_log2(ptr noundef %28) #24
  %1006 = sext i32 %1005 to i64
  %1007 = load ptr, ptr %999, align 8, !tbaa !17
  %1008 = getelementptr inbounds %struct.tree_int_cst, ptr %1007, i64 0, i32 1
  %1009 = load i64, ptr %1008, align 8, !tbaa !17
  %1010 = icmp eq i64 %1009, %1006
  br i1 %1010, label %1011, label %1014

1011:                                             ; preds = %1004
  %1012 = load ptr, ptr %998, align 8, !tbaa !17
  %1013 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 89, ptr noundef %2, ptr noundef %1012, ptr noundef %28)
  br label %1323

1014:                                             ; preds = %991, %997, %1004, %988, %985, %979, %975
  %1015 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %1016 = icmp eq i32 %1015, 0
  br i1 %1016, label %1044, label %1017

1017:                                             ; preds = %1014
  %1018 = load i64, ptr %23, align 8
  %1019 = and i64 %1018, 65535
  %1020 = icmp eq i64 %1019, 102
  br i1 %1020, label %1021, label %1044

1021:                                             ; preds = %1017
  %1022 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 0, i32 3
  %1023 = getelementptr inbounds %struct.tree_exp, ptr %23, i64 1
  %1024 = load ptr, ptr %1023, align 8, !tbaa !17
  %1025 = tail call i32 @integer_zerop(ptr noundef %1024) #24
  %1026 = icmp eq i32 %1025, 0
  br i1 %1026, label %1044, label %1027

1027:                                             ; preds = %1021
  %1028 = tail call i32 @integer_pow2p(ptr noundef %28) #24
  %1029 = icmp eq i32 %1028, 0
  br i1 %1029, label %1044, label %1030

1030:                                             ; preds = %1027
  %1031 = load ptr, ptr %1022, align 8, !tbaa !17
  %1032 = load i64, ptr %1031, align 8
  %1033 = and i64 %1032, 65535
  %1034 = icmp eq i64 %1033, 89
  br i1 %1034, label %1035, label %1044

1035:                                             ; preds = %1030
  %1036 = getelementptr inbounds %struct.tree_exp, ptr %1031, i64 1
  %1037 = load ptr, ptr %1036, align 8, !tbaa !17
  %1038 = tail call i32 @operand_equal_p(ptr noundef %1037, ptr noundef %28, i32 noundef 1)
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %1044, label %1040

1040:                                             ; preds = %1035
  %1041 = load ptr, ptr %1022, align 8, !tbaa !17
  %1042 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1041)
  %1043 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %1042)
  br label %1323

1044:                                             ; preds = %1035, %1030, %1027, %1021, %1017, %1014
  %1045 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1086, label %1047

1047:                                             ; preds = %1044
  %1048 = load i64, ptr %23, align 8
  %1049 = trunc i64 %1048 to i32
  %1050 = and i32 %1049, 65535
  %1051 = and i64 %1048, 65535
  %1052 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1051
  %1053 = load i32, ptr %1052, align 4, !tbaa !17
  %1054 = icmp eq i32 %1053, 5
  %1055 = icmp eq i32 %1050, 93
  %1056 = or i1 %1054, %1055
  %1057 = icmp eq i32 %1050, 91
  %1058 = or i1 %1057, %1056
  %1059 = and i32 %1049, 65533
  %1060 = icmp eq i32 %1059, 92
  %1061 = or i1 %1060, %1058
  %1062 = add nsw i32 %1050, -95
  %1063 = icmp ult i32 %1062, 2
  %1064 = or i1 %1063, %1061
  br i1 %1064, label %1065, label %1086

1065:                                             ; preds = %1047
  %1066 = load i64, ptr %28, align 8
  %1067 = trunc i64 %1066 to i32
  %1068 = and i32 %1067, 65535
  %1069 = and i64 %1066, 65535
  %1070 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1069
  %1071 = load i32, ptr %1070, align 4, !tbaa !17
  %1072 = icmp eq i32 %1071, 5
  %1073 = icmp eq i32 %1068, 93
  %1074 = or i1 %1072, %1073
  %1075 = icmp eq i32 %1068, 91
  %1076 = or i1 %1075, %1074
  %1077 = and i32 %1067, 65533
  %1078 = icmp eq i32 %1077, 92
  %1079 = or i1 %1078, %1076
  %1080 = add nsw i32 %1068, -95
  %1081 = icmp ult i32 %1080, 2
  %1082 = or i1 %1081, %1079
  br i1 %1082, label %1083, label %1086

1083:                                             ; preds = %1065
  %1084 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %23)
  %1085 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 91, ptr noundef %2, ptr noundef %1084, ptr noundef nonnull %28)
  br label %1323

1086:                                             ; preds = %1065, %1047, %1044
  %1087 = tail call i32 @integer_onep(ptr noundef %5) #24
  %1088 = icmp eq i32 %1087, 0
  br i1 %1088, label %1131, label %1089

1089:                                             ; preds = %1086
  %1090 = load i64, ptr %23, align 8
  %1091 = trunc i64 %1090 to i32
  %1092 = and i32 %1091, 65535
  %1093 = and i64 %1090, 65535
  %1094 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1093
  %1095 = load i32, ptr %1094, align 4, !tbaa !17
  %1096 = icmp eq i32 %1095, 5
  %1097 = icmp eq i32 %1092, 93
  %1098 = or i1 %1096, %1097
  %1099 = icmp eq i32 %1092, 91
  %1100 = or i1 %1099, %1098
  %1101 = and i32 %1091, 65533
  %1102 = icmp eq i32 %1101, 92
  %1103 = or i1 %1102, %1100
  %1104 = add nsw i32 %1092, -95
  %1105 = icmp ult i32 %1104, 2
  %1106 = or i1 %1105, %1103
  br i1 %1106, label %1107, label %1131

1107:                                             ; preds = %1089
  %1108 = load i64, ptr %28, align 8
  %1109 = trunc i64 %1108 to i32
  %1110 = and i32 %1109, 65535
  %1111 = and i64 %1108, 65535
  %1112 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1111
  %1113 = load i32, ptr %1112, align 4, !tbaa !17
  %1114 = icmp eq i32 %1113, 5
  %1115 = icmp eq i32 %1110, 93
  %1116 = or i1 %1114, %1115
  %1117 = icmp eq i32 %1110, 91
  %1118 = or i1 %1117, %1116
  %1119 = and i32 %1109, 65533
  %1120 = icmp eq i32 %1119, 92
  %1121 = or i1 %1120, %1118
  %1122 = add nsw i32 %1110, -95
  %1123 = icmp ult i32 %1122, 2
  %1124 = or i1 %1123, %1121
  br i1 %1124, label %1125, label %1131

1125:                                             ; preds = %1107
  %1126 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %23)
  %1127 = icmp eq ptr %1126, null
  br i1 %1127, label %1131, label %1128

1128:                                             ; preds = %1125
  %1129 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %1126)
  %1130 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 92, ptr noundef %2, ptr noundef %1129, ptr noundef nonnull %28)
  br label %1323

1131:                                             ; preds = %1125, %1107, %1089, %1086
  %1132 = tail call i32 @integer_zerop(ptr noundef %28) #24
  %1133 = icmp eq i32 %1132, 0
  br i1 %1133, label %1176, label %1134

1134:                                             ; preds = %1131
  %1135 = load i64, ptr %23, align 8
  %1136 = trunc i64 %1135 to i32
  %1137 = and i32 %1136, 65535
  %1138 = and i64 %1135, 65535
  %1139 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1138
  %1140 = load i32, ptr %1139, align 4, !tbaa !17
  %1141 = icmp eq i32 %1140, 5
  %1142 = icmp eq i32 %1137, 93
  %1143 = or i1 %1141, %1142
  %1144 = icmp eq i32 %1137, 91
  %1145 = or i1 %1144, %1143
  %1146 = and i32 %1136, 65533
  %1147 = icmp eq i32 %1146, 92
  %1148 = or i1 %1147, %1145
  %1149 = add nsw i32 %1137, -95
  %1150 = icmp ult i32 %1149, 2
  %1151 = or i1 %1150, %1148
  br i1 %1151, label %1152, label %1176

1152:                                             ; preds = %1134
  %1153 = load i64, ptr %5, align 8
  %1154 = trunc i64 %1153 to i32
  %1155 = and i32 %1154, 65535
  %1156 = and i64 %1153, 65535
  %1157 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1156
  %1158 = load i32, ptr %1157, align 4, !tbaa !17
  %1159 = icmp eq i32 %1158, 5
  %1160 = icmp eq i32 %1155, 93
  %1161 = or i1 %1159, %1160
  %1162 = icmp eq i32 %1155, 91
  %1163 = or i1 %1162, %1161
  %1164 = and i32 %1154, 65533
  %1165 = icmp eq i32 %1164, 92
  %1166 = or i1 %1165, %1163
  %1167 = add nsw i32 %1155, -95
  %1168 = icmp ult i32 %1167, 2
  %1169 = or i1 %1168, %1166
  br i1 %1169, label %1170, label %1176

1170:                                             ; preds = %1152
  %1171 = tail call ptr @fold_truth_not_expr(i32 noundef %0, ptr noundef nonnull %23)
  %1172 = icmp eq ptr %1171, null
  br i1 %1172, label %1176, label %1173

1173:                                             ; preds = %1170
  %1174 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %1171)
  %1175 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 91, ptr noundef %2, ptr noundef %1174, ptr noundef nonnull %5)
  br label %1323

1176:                                             ; preds = %1170, %1152, %1134, %1131
  %1177 = tail call i32 @integer_onep(ptr noundef %28) #24
  %1178 = icmp eq i32 %1177, 0
  br i1 %1178, label %1323, label %1179

1179:                                             ; preds = %1176
  %1180 = load i64, ptr %23, align 8
  %1181 = trunc i64 %1180 to i32
  %1182 = and i32 %1181, 65535
  %1183 = and i64 %1180, 65535
  %1184 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1183
  %1185 = load i32, ptr %1184, align 4, !tbaa !17
  %1186 = icmp eq i32 %1185, 5
  %1187 = icmp eq i32 %1182, 93
  %1188 = or i1 %1186, %1187
  %1189 = icmp eq i32 %1182, 91
  %1190 = or i1 %1189, %1188
  %1191 = and i32 %1181, 65533
  %1192 = icmp eq i32 %1191, 92
  %1193 = or i1 %1192, %1190
  %1194 = add nsw i32 %1182, -95
  %1195 = icmp ult i32 %1194, 2
  %1196 = or i1 %1195, %1193
  br i1 %1196, label %1197, label %1323

1197:                                             ; preds = %1179
  %1198 = load i64, ptr %5, align 8
  %1199 = trunc i64 %1198 to i32
  %1200 = and i32 %1199, 65535
  %1201 = and i64 %1198, 65535
  %1202 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %1201
  %1203 = load i32, ptr %1202, align 4, !tbaa !17
  %1204 = icmp eq i32 %1203, 5
  %1205 = icmp eq i32 %1200, 93
  %1206 = or i1 %1204, %1205
  %1207 = icmp eq i32 %1200, 91
  %1208 = or i1 %1207, %1206
  %1209 = and i32 %1199, 65533
  %1210 = icmp eq i32 %1209, 92
  %1211 = or i1 %1210, %1208
  %1212 = add nsw i32 %1200, -95
  %1213 = icmp ult i32 %1212, 2
  %1214 = or i1 %1213, %1211
  br i1 %1214, label %1215, label %1323

1215:                                             ; preds = %1197
  %1216 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %23)
  %1217 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 92, ptr noundef %2, ptr noundef %1216, ptr noundef nonnull %5)
  br label %1323

1218:                                             ; preds = %27
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14031, ptr noundef nonnull @.str.1) #24
  br label %1219

1219:                                             ; preds = %27, %1218
  %1220 = load i64, ptr %23, align 8
  %1221 = trunc i64 %1220 to i16
  switch i16 %1221, label %1300 [
    i16 27, label %1225
    i16 51, label %1222
  ]

1222:                                             ; preds = %1219
  %1223 = and i64 %1220, 131072
  %1224 = icmp eq i64 %1223, 0
  br i1 %1224, label %1300, label %1225

1225:                                             ; preds = %1219, %1222
  %1226 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %1227 = load ptr, ptr %1226, align 8, !tbaa !17
  %1228 = getelementptr inbounds %struct.tree_common, ptr %1227, i64 0, i32 2
  %1229 = load ptr, ptr %1228, align 8, !tbaa !17
  %1230 = icmp eq ptr %1229, %2
  br i1 %1230, label %1231, label %1300

1231:                                             ; preds = %1225
  %1232 = tail call i64 @tree_low_cst(ptr noundef %28, i32 noundef 1) #24
  %1233 = tail call i64 @tree_low_cst(ptr noundef %5, i32 noundef 1) #24
  %1234 = icmp eq i64 %1232, 0
  br i1 %1234, label %1300, label %1235

1235:                                             ; preds = %1231
  %1236 = getelementptr inbounds %struct.tree_type, ptr %2, i64 0, i32 2
  %1237 = load ptr, ptr %1236, align 8, !tbaa !17
  %1238 = tail call i32 @simple_cst_equal(ptr noundef %28, ptr noundef %1237) #24
  %1239 = icmp eq i32 %1238, 1
  br i1 %1239, label %1240, label %1300

1240:                                             ; preds = %1235
  %1241 = urem i64 %1233, %1232
  %1242 = udiv i64 %1233, %1232
  %1243 = icmp eq i64 %1241, 0
  br i1 %1243, label %1244, label %1300

1244:                                             ; preds = %1240
  %1245 = load ptr, ptr %1226, align 8, !tbaa !17
  %1246 = getelementptr inbounds %struct.tree_type, ptr %1245, i64 0, i32 6
  %1247 = load i32, ptr %1246, align 4
  %1248 = and i32 %1247, 1023
  %1249 = zext i32 %1248 to i64
  %1250 = lshr i64 %1242, %1249
  %1251 = icmp eq i64 %1250, 0
  br i1 %1251, label %1252, label %1300

1252:                                             ; preds = %1244
  %1253 = load i64, ptr %23, align 8
  %1254 = and i64 %1253, 65535
  %1255 = icmp eq i64 %1254, 27
  br i1 %1255, label %1258, label %1256

1256:                                             ; preds = %1252
  %1257 = getelementptr inbounds %struct.tree_constructor, ptr %23, i64 0, i32 1
  br label %1261

1258:                                             ; preds = %1252
  %1259 = getelementptr inbounds %struct.tree_vector, ptr %23, i64 0, i32 1
  %1260 = load ptr, ptr %1259, align 8, !tbaa !17
  br label %1277

1261:                                             ; preds = %1256, %1272
  %1262 = phi ptr [ %1275, %1272 ], [ null, %1256 ]
  %1263 = phi i64 [ %1276, %1272 ], [ 0, %1256 ]
  %1264 = load ptr, ptr %1257, align 8, !tbaa !17
  %1265 = icmp eq ptr %1264, null
  br i1 %1265, label %1268, label %1266

1266:                                             ; preds = %1261
  %1267 = load i32, ptr %1264, align 8, !tbaa !82
  br label %1268

1268:                                             ; preds = %1261, %1266
  %1269 = phi i32 [ %1267, %1266 ], [ 0, %1261 ]
  %1270 = zext i32 %1269 to i64
  %1271 = icmp ult i64 %1263, %1270
  br i1 %1271, label %1272, label %1277

1272:                                             ; preds = %1268
  %1273 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %1264, i64 0, i32 2, i64 %1263, i32 1
  %1274 = load ptr, ptr %1273, align 8, !tbaa !87
  %1275 = tail call ptr @tree_cons_stat(ptr noundef null, ptr noundef %1274, ptr noundef %1262) #24
  %1276 = add nuw nsw i64 %1263, 1
  br label %1261, !llvm.loop !88

1277:                                             ; preds = %1268, %1258
  %1278 = phi ptr [ %1260, %1258 ], [ %1262, %1268 ]
  %1279 = icmp ule i64 %1232, %1233
  %1280 = icmp ne ptr %1278, null
  %1281 = select i1 %1279, i1 %1280, i1 false
  br i1 %1281, label %1282, label %1291

1282:                                             ; preds = %1277, %1282
  %1283 = phi ptr [ %1287, %1282 ], [ %1278, %1277 ]
  %1284 = phi i64 [ %1285, %1282 ], [ %1242, %1277 ]
  %1285 = add i64 %1284, -1
  %1286 = getelementptr inbounds %struct.tree_common, ptr %1283, i64 0, i32 1
  %1287 = load ptr, ptr %1286, align 8, !tbaa !17
  %1288 = icmp ne i64 %1285, 0
  %1289 = icmp ne ptr %1287, null
  %1290 = select i1 %1288, i1 %1289, i1 false
  br i1 %1290, label %1282, label %1291, !llvm.loop !89

1291:                                             ; preds = %1282, %1277
  %1292 = phi ptr [ %1278, %1277 ], [ %1287, %1282 ]
  %1293 = phi i1 [ %1280, %1277 ], [ %1289, %1282 ]
  br i1 %1293, label %1294, label %1297

1294:                                             ; preds = %1291
  %1295 = getelementptr inbounds %struct.tree_list, ptr %1292, i64 0, i32 2
  %1296 = load ptr, ptr %1295, align 8, !tbaa !17
  br label %1323

1297:                                             ; preds = %1291
  %1298 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 13), align 8, !tbaa !6
  %1299 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef %1298)
  br label %1323

1300:                                             ; preds = %1231, %1235, %1240, %1244, %1219, %1225, %1222
  %1301 = getelementptr inbounds %struct.tree_common, ptr %23, i64 0, i32 2
  %1302 = load ptr, ptr %1301, align 8, !tbaa !17
  %1303 = load i64, ptr %1302, align 8
  %1304 = trunc i64 %1303 to i32
  %1305 = and i32 %1304, 65535
  %1306 = add nsw i32 %1305, -6
  %1307 = icmp ult i32 %1306, 3
  br i1 %1307, label %1308, label %1323

1308:                                             ; preds = %1300
  %1309 = getelementptr inbounds %struct.tree_type, ptr %1302, i64 0, i32 6
  %1310 = load i32, ptr %1309, align 4
  %1311 = and i32 %1310, 1023
  %1312 = zext i32 %1311 to i64
  %1313 = tail call i64 @tree_low_cst(ptr noundef %28, i32 noundef 1) #24
  %1314 = icmp eq i64 %1313, %1312
  br i1 %1314, label %1315, label %1323

1315:                                             ; preds = %1308
  %1316 = tail call i32 @integer_zerop(ptr noundef %5) #24
  %1317 = icmp eq i32 %1316, 0
  br i1 %1317, label %1323, label %1318

1318:                                             ; preds = %1315
  %1319 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2, ptr noundef nonnull %23)
  br label %1323

1320:                                             ; preds = %48
  %1321 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %40, i64 0, i32 2, i64 %49, i32 1
  %1322 = load ptr, ptr %1321, align 8, !tbaa !87
  br label %1323

1323:                                             ; preds = %45, %1320, %38, %1297, %1294, %1011, %188, %175, %178, %182, %187, %94, %91, %87, %84, %29, %33, %1300, %27, %1308, %1315, %1176, %1179, %1197, %820, %499, %77, %68, %1318, %1215, %1173, %1128, %1083, %1040, %969, %887, %859, %847
  %1324 = phi ptr [ %1319, %1318 ], [ %848, %847 ], [ %860, %859 ], [ %890, %887 ], [ %974, %969 ], [ %1043, %1040 ], [ %1085, %1083 ], [ %1130, %1128 ], [ %1175, %1173 ], [ %1217, %1215 ], [ %1013, %1011 ], [ null, %77 ], [ null, %68 ], [ %500, %499 ], [ %821, %820 ], [ null, %1197 ], [ null, %1179 ], [ null, %1176 ], [ null, %1300 ], [ null, %1315 ], [ null, %1308 ], [ null, %27 ], [ null, %33 ], [ null, %29 ], [ %64, %94 ], [ %92, %91 ], [ %64, %84 ], [ %64, %87 ], [ %189, %188 ], [ %99, %187 ], [ %185, %182 ], [ %99, %175 ], [ %99, %178 ], [ %1296, %1294 ], [ %1299, %1297 ], [ %1322, %1320 ], [ null, %38 ], [ null, %45 ]
  ret ptr %1324
}

declare zeroext i8 @type_contains_placeholder_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc i32 @operand_equal_for_comparison_p(ptr noundef %0, ptr noundef %1, ptr noundef %2) unnamed_addr #10 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %4) #24
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %5) #24
  %6 = tail call i32 @operand_equal_p(ptr noundef %0, ptr noundef %1, i32 noundef 0)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %61

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %10 = load ptr, ptr %9, align 8, !tbaa !17
  %11 = load i64, ptr %10, align 8
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 65535
  %14 = add nsw i32 %13, -6
  %15 = icmp ult i32 %14, 3
  br i1 %15, label %16, label %61

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %18 = load ptr, ptr %17, align 8, !tbaa !17
  %19 = load i64, ptr %18, align 8
  %20 = trunc i64 %19 to i32
  %21 = and i32 %20, 65535
  %22 = add nsw i32 %21, -6
  %23 = icmp ult i32 %22, 3
  br i1 %23, label %24, label %61

24:                                               ; preds = %16
  %25 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %0) #24
  %26 = tail call ptr @tree_strip_nop_conversions(ptr noundef nonnull %1) #24
  %27 = tail call i32 @operand_equal_p(ptr noundef %25, ptr noundef %26, i32 noundef 0)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %61

29:                                               ; preds = %24
  %30 = call ptr @get_narrower(ptr noundef nonnull %1, ptr noundef nonnull %4) #24
  %31 = call ptr @get_narrower(ptr noundef %2, ptr noundef nonnull %5) #24
  %32 = load ptr, ptr %17, align 8, !tbaa !17
  %33 = getelementptr inbounds %struct.tree_type, ptr %32, i64 0, i32 6
  %34 = load i32, ptr %33, align 4
  %35 = and i32 %34, 1023
  %36 = load i32, ptr %4, align 4, !tbaa !21
  %37 = load i32, ptr %5, align 4, !tbaa !21
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %60

39:                                               ; preds = %29
  %40 = getelementptr inbounds %struct.tree_common, ptr %30, i64 0, i32 2
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = getelementptr inbounds %struct.tree_type, ptr %41, i64 0, i32 6
  %43 = load i32, ptr %42, align 4
  %44 = and i32 %43, 1023
  %45 = icmp ult i32 %44, %35
  br i1 %45, label %46, label %60

46:                                               ; preds = %39
  %47 = getelementptr inbounds %struct.tree_common, ptr %31, i64 0, i32 2
  %48 = load ptr, ptr %47, align 8, !tbaa !17
  %49 = getelementptr inbounds %struct.tree_type, ptr %48, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = and i32 %50, 1023
  %52 = icmp ult i32 %51, %35
  br i1 %52, label %53, label %60

53:                                               ; preds = %46
  %54 = load ptr, ptr %9, align 8, !tbaa !17
  %55 = call ptr @signed_or_unsigned_type_for(i32 noundef %36, ptr noundef nonnull %41) #24
  %56 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %55, ptr noundef nonnull %30)
  %57 = call ptr @fold_convert_loc(i32 noundef 0, ptr noundef %54, ptr noundef %56)
  %58 = call i32 @operand_equal_p(ptr noundef nonnull %0, ptr noundef %57, i32 noundef 0)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %53, %46, %39, %29
  br label %61

61:                                               ; preds = %16, %8, %24, %3, %53, %60
  %62 = phi i32 [ 0, %60 ], [ 1, %53 ], [ 1, %3 ], [ 0, %16 ], [ 0, %8 ], [ 1, %24 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %5) #24
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %4) #24
  ret i32 %62
}

; Function Attrs: nounwind sspstrong uwtable
define internal fastcc ptr @fold_cond_expr_with_comparison(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) unnamed_addr #10 {
  %6 = load i64, ptr %2, align 8
  %7 = trunc i64 %6 to i32
  %8 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 1
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  %14 = tail call ptr @tree_strip_nop_conversions(ptr noundef %3) #24
  %15 = tail call ptr @tree_strip_nop_conversions(ptr noundef %4) #24
  %16 = load i64, ptr %1, align 8
  %17 = and i64 %16, 65535
  %18 = icmp eq i64 %17, 14
  br i1 %18, label %19, label %22

19:                                               ; preds = %5
  %20 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %21 = load i64, ptr %1, align 8
  br label %27

22:                                               ; preds = %5
  %23 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %24 = load i32, ptr %23, align 4
  %25 = lshr i32 %24, 16
  %26 = and i32 %25, 255
  br label %27

27:                                               ; preds = %22, %19
  %28 = phi i64 [ %21, %19 ], [ %16, %22 ]
  %29 = phi i32 [ %20, %19 ], [ %26, %22 ]
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %30
  %32 = load i8, ptr %31, align 1, !tbaa !17
  %33 = icmp eq i8 %32, 8
  br i1 %33, label %88, label %34

34:                                               ; preds = %27
  %35 = and i64 %28, 65535
  %36 = icmp eq i64 %35, 14
  br i1 %36, label %37, label %40

37:                                               ; preds = %34
  %38 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %39 = load i64, ptr %1, align 8
  br label %45

40:                                               ; preds = %34
  %41 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %42 = load i32, ptr %41, align 4
  %43 = lshr i32 %42, 16
  %44 = and i32 %43, 255
  br label %45

45:                                               ; preds = %40, %37
  %46 = phi i64 [ %39, %37 ], [ %28, %40 ]
  %47 = phi i32 [ %38, %37 ], [ %44, %40 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %48
  %50 = load i8, ptr %49, align 1, !tbaa !17
  %51 = icmp eq i8 %50, 9
  br i1 %51, label %88, label %52

52:                                               ; preds = %45
  %53 = and i64 %46, 65535
  %54 = icmp eq i64 %53, 14
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %57 = load i64, ptr %1, align 8
  br label %63

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %60 = load i32, ptr %59, align 4
  %61 = lshr i32 %60, 16
  %62 = and i32 %61, 255
  br label %63

63:                                               ; preds = %58, %55
  %64 = phi i64 [ %57, %55 ], [ %46, %58 ]
  %65 = phi i32 [ %56, %55 ], [ %62, %58 ]
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %66
  %68 = load i8, ptr %67, align 1, !tbaa !17
  %69 = icmp eq i8 %68, 11
  br i1 %69, label %88, label %70

70:                                               ; preds = %63
  %71 = and i64 %64, 65535
  %72 = icmp eq i64 %71, 14
  br i1 %72, label %73, label %75

73:                                               ; preds = %70
  %74 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %80

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %77 = load i32, ptr %76, align 4
  %78 = lshr i32 %77, 16
  %79 = and i32 %78, 255
  br label %80

80:                                               ; preds = %75, %73
  %81 = phi i32 [ %74, %73 ], [ %79, %75 ]
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %82
  %84 = load i8, ptr %83, align 1, !tbaa !17
  %85 = icmp eq i8 %84, 17
  br i1 %85, label %86, label %295

86:                                               ; preds = %80
  %87 = load i64, ptr %1, align 8
  br label %88

88:                                               ; preds = %86, %63, %45, %27
  %89 = phi i64 [ %87, %86 ], [ %64, %63 ], [ %46, %45 ], [ %28, %27 ]
  %90 = and i64 %89, 65535
  %91 = icmp eq i64 %90, 14
  br i1 %91, label %92, label %95

92:                                               ; preds = %88
  %93 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %94 = load i64, ptr %1, align 8
  br label %100

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %97 = load i32, ptr %96, align 4
  %98 = lshr i32 %97, 16
  %99 = and i32 %98, 255
  br label %100

100:                                              ; preds = %95, %92
  %101 = phi i64 [ %94, %92 ], [ %89, %95 ]
  %102 = phi i32 [ %93, %92 ], [ %99, %95 ]
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %103
  %105 = load i8, ptr %104, align 1, !tbaa !17
  %106 = icmp eq i8 %105, 8
  br i1 %106, label %125, label %107

107:                                              ; preds = %100
  %108 = and i64 %101, 65535
  %109 = icmp eq i64 %108, 14
  br i1 %109, label %110, label %113

110:                                              ; preds = %107
  %111 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %112 = load i64, ptr %1, align 8
  br label %118

113:                                              ; preds = %107
  %114 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %115 = load i32, ptr %114, align 4
  %116 = lshr i32 %115, 16
  %117 = and i32 %116, 255
  br label %118

118:                                              ; preds = %113, %110
  %119 = phi i64 [ %112, %110 ], [ %101, %113 ]
  %120 = phi i32 [ %111, %110 ], [ %117, %113 ]
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %121
  %123 = load i8, ptr %122, align 1, !tbaa !17
  %124 = icmp eq i8 %123, 9
  br i1 %124, label %125, label %136

125:                                              ; preds = %118, %100
  %126 = phi i64 [ %119, %118 ], [ %101, %100 ]
  %127 = and i64 %126, 65535
  %128 = icmp eq i64 %127, 14
  br i1 %128, label %129, label %131

129:                                              ; preds = %125
  %130 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %152

131:                                              ; preds = %125
  %132 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %133 = load i32, ptr %132, align 4
  %134 = lshr i32 %133, 16
  %135 = and i32 %134, 255
  br label %152

136:                                              ; preds = %118
  %137 = and i64 %119, 65535
  %138 = icmp eq i64 %137, 14
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %146

141:                                              ; preds = %136
  %142 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %143 = load i32, ptr %142, align 4
  %144 = lshr i32 %143, 16
  %145 = and i32 %144, 255
  br label %146

146:                                              ; preds = %141, %139
  %147 = phi i32 [ %140, %139 ], [ %145, %141 ]
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %148
  %150 = load i8, ptr %149, align 1, !tbaa !17
  %151 = zext i8 %150 to i32
  br label %152

152:                                              ; preds = %129, %131, %146
  %153 = phi i32 [ %151, %146 ], [ %130, %129 ], [ %135, %131 ]
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %154
  %156 = load i8, ptr %155, align 1, !tbaa !17
  %157 = icmp eq i8 %156, 9
  %158 = load i64, ptr %1, align 8
  %159 = and i64 %158, 65535
  %160 = icmp eq i64 %159, 14
  br i1 %157, label %161, label %222

161:                                              ; preds = %152
  br i1 %160, label %162, label %165

162:                                              ; preds = %161
  %163 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %164 = load i64, ptr %1, align 8
  br label %170

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %167 = load i32, ptr %166, align 4
  %168 = lshr i32 %167, 16
  %169 = and i32 %168, 255
  br label %170

170:                                              ; preds = %165, %162
  %171 = phi i64 [ %164, %162 ], [ %158, %165 ]
  %172 = phi i32 [ %163, %162 ], [ %169, %165 ]
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %173
  %175 = load i8, ptr %174, align 1, !tbaa !17
  %176 = icmp eq i8 %175, 8
  br i1 %176, label %195, label %177

177:                                              ; preds = %170
  %178 = and i64 %171, 65535
  %179 = icmp eq i64 %178, 14
  br i1 %179, label %180, label %183

180:                                              ; preds = %177
  %181 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %182 = load i64, ptr %1, align 8
  br label %188

183:                                              ; preds = %177
  %184 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %185 = load i32, ptr %184, align 4
  %186 = lshr i32 %185, 16
  %187 = and i32 %186, 255
  br label %188

188:                                              ; preds = %183, %180
  %189 = phi i64 [ %182, %180 ], [ %171, %183 ]
  %190 = phi i32 [ %181, %180 ], [ %187, %183 ]
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %191
  %193 = load i8, ptr %192, align 1, !tbaa !17
  %194 = icmp eq i8 %193, 9
  br i1 %194, label %195, label %206

195:                                              ; preds = %188, %170
  %196 = phi i64 [ %189, %188 ], [ %171, %170 ]
  %197 = and i64 %196, 65535
  %198 = icmp eq i64 %197, 14
  br i1 %198, label %199, label %201

199:                                              ; preds = %195
  %200 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %283

201:                                              ; preds = %195
  %202 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %203 = load i32, ptr %202, align 4
  %204 = lshr i32 %203, 16
  %205 = and i32 %204, 255
  br label %283

206:                                              ; preds = %188
  %207 = and i64 %189, 65535
  %208 = icmp eq i64 %207, 14
  br i1 %208, label %209, label %211

209:                                              ; preds = %206
  %210 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %216

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %213 = load i32, ptr %212, align 4
  %214 = lshr i32 %213, 16
  %215 = and i32 %214, 255
  br label %216

216:                                              ; preds = %211, %209
  %217 = phi i32 [ %210, %209 ], [ %215, %211 ]
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %218
  %220 = load i8, ptr %219, align 1, !tbaa !17
  %221 = zext i8 %220 to i32
  br label %283

222:                                              ; preds = %152
  br i1 %160, label %223, label %226

223:                                              ; preds = %222
  %224 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %225 = load i64, ptr %1, align 8
  br label %231

226:                                              ; preds = %222
  %227 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %228 = load i32, ptr %227, align 4
  %229 = lshr i32 %228, 16
  %230 = and i32 %229, 255
  br label %231

231:                                              ; preds = %226, %223
  %232 = phi i64 [ %225, %223 ], [ %158, %226 ]
  %233 = phi i32 [ %224, %223 ], [ %230, %226 ]
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %234
  %236 = load i8, ptr %235, align 1, !tbaa !17
  %237 = icmp eq i8 %236, 8
  br i1 %237, label %256, label %238

238:                                              ; preds = %231
  %239 = and i64 %232, 65535
  %240 = icmp eq i64 %239, 14
  br i1 %240, label %241, label %244

241:                                              ; preds = %238
  %242 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %243 = load i64, ptr %1, align 8
  br label %249

244:                                              ; preds = %238
  %245 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %246 = load i32, ptr %245, align 4
  %247 = lshr i32 %246, 16
  %248 = and i32 %247, 255
  br label %249

249:                                              ; preds = %244, %241
  %250 = phi i64 [ %243, %241 ], [ %232, %244 ]
  %251 = phi i32 [ %242, %241 ], [ %248, %244 ]
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %252
  %254 = load i8, ptr %253, align 1, !tbaa !17
  %255 = icmp eq i8 %254, 9
  br i1 %255, label %256, label %267

256:                                              ; preds = %249, %231
  %257 = phi i64 [ %250, %249 ], [ %232, %231 ]
  %258 = and i64 %257, 65535
  %259 = icmp eq i64 %258, 14
  br i1 %259, label %260, label %262

260:                                              ; preds = %256
  %261 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %283

262:                                              ; preds = %256
  %263 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %264 = load i32, ptr %263, align 4
  %265 = lshr i32 %264, 16
  %266 = and i32 %265, 255
  br label %283

267:                                              ; preds = %249
  %268 = and i64 %250, 65535
  %269 = icmp eq i64 %268, 14
  br i1 %269, label %270, label %272

270:                                              ; preds = %267
  %271 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %277

272:                                              ; preds = %267
  %273 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %274 = load i32, ptr %273, align 4
  %275 = lshr i32 %274, 16
  %276 = and i32 %275, 255
  br label %277

277:                                              ; preds = %272, %270
  %278 = phi i32 [ %271, %270 ], [ %276, %272 ]
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %279
  %281 = load i8, ptr %280, align 1, !tbaa !17
  %282 = zext i8 %281 to i32
  br label %283

283:                                              ; preds = %277, %262, %260, %216, %201, %199
  %284 = phi i32 [ %221, %216 ], [ %200, %199 ], [ %205, %201 ], [ %282, %277 ], [ %261, %260 ], [ %266, %262 ]
  %285 = add i32 %284, -38
  %286 = zext i32 %285 to i64
  %287 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %286
  %288 = load ptr, ptr %287, align 8, !tbaa !6
  %289 = getelementptr inbounds %struct.real_format, ptr %288, i64 0, i32 14
  %290 = load i8, ptr %289, align 1, !tbaa !37
  %291 = icmp ne i8 %290, 0
  %292 = load i32, ptr @flag_signed_zeros, align 4
  %293 = icmp ne i32 %292, 0
  %294 = select i1 %291, i1 %293, i1 false
  br i1 %294, label %450, label %295

295:                                              ; preds = %283, %80
  %296 = getelementptr inbounds %struct.tree_common, ptr %11, i64 0, i32 2
  %297 = load ptr, ptr %296, align 8, !tbaa !17
  %298 = load i64, ptr %297, align 8
  %299 = trunc i64 %298 to i16
  switch i16 %299, label %309 [
    i16 9, label %306
    i16 13, label %300
    i16 14, label %300
  ]

300:                                              ; preds = %295, %295
  %301 = getelementptr inbounds %struct.tree_common, ptr %297, i64 0, i32 2
  %302 = load ptr, ptr %301, align 8, !tbaa !17
  %303 = load i64, ptr %302, align 8
  %304 = and i64 %303, 65535
  %305 = icmp eq i64 %304, 9
  br i1 %305, label %306, label %309

306:                                              ; preds = %295, %300
  %307 = tail call i32 @real_zerop(ptr noundef nonnull %11) #24
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %450, label %312

309:                                              ; preds = %295, %300
  %310 = tail call i32 @integer_zerop(ptr noundef nonnull %11) #24
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %450, label %312

312:                                              ; preds = %309, %306
  %313 = load i64, ptr %15, align 8
  %314 = and i64 %313, 65535
  %315 = icmp eq i64 %314, 79
  br i1 %315, label %316, label %321

316:                                              ; preds = %312
  %317 = getelementptr inbounds %struct.tree_exp, ptr %15, i64 0, i32 3
  %318 = load ptr, ptr %317, align 8, !tbaa !17
  %319 = tail call i32 @operand_equal_p(ptr noundef %318, ptr noundef %14, i32 noundef 0)
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %343

321:                                              ; preds = %316, %312
  %322 = load i64, ptr %14, align 8
  %323 = and i64 %322, 65535
  %324 = icmp eq i64 %323, 64
  br i1 %324, label %325, label %450

325:                                              ; preds = %321
  %326 = load i64, ptr %15, align 8
  %327 = and i64 %326, 65535
  %328 = icmp eq i64 %327, 64
  br i1 %328, label %329, label %450

329:                                              ; preds = %325
  %330 = getelementptr inbounds %struct.tree_exp, ptr %14, i64 0, i32 3
  %331 = load ptr, ptr %330, align 8, !tbaa !17
  %332 = getelementptr inbounds %struct.tree_exp, ptr %15, i64 1
  %333 = load ptr, ptr %332, align 8, !tbaa !17
  %334 = tail call i32 @operand_equal_p(ptr noundef %331, ptr noundef %333, i32 noundef 0)
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %450, label %336

336:                                              ; preds = %329
  %337 = getelementptr inbounds %struct.tree_exp, ptr %15, i64 0, i32 3
  %338 = getelementptr inbounds %struct.tree_exp, ptr %14, i64 1
  %339 = load ptr, ptr %338, align 8, !tbaa !17
  %340 = load ptr, ptr %337, align 8, !tbaa !17
  %341 = tail call i32 @operand_equal_p(ptr noundef %339, ptr noundef %340, i32 noundef 0)
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %450, label %343

343:                                              ; preds = %336, %316
  %344 = trunc i64 %6 to i16
  switch i16 %344, label %444 [
    i16 101, label %345
    i16 109, label %345
    i16 102, label %350
    i16 110, label %350
    i16 108, label %353
    i16 107, label %353
    i16 100, label %356
    i16 99, label %356
    i16 106, label %393
    i16 105, label %393
    i16 98, label %396
    i16 97, label %396
  ]

345:                                              ; preds = %343, %343
  %346 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %13, ptr noundef %14)
  %347 = tail call fastcc ptr @negate_expr(ptr noundef %346)
  %348 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %347)
  %349 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %348)
  br label %2418

350:                                              ; preds = %343, %343
  %351 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %14)
  %352 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %351)
  br label %2418

353:                                              ; preds = %343, %343
  %354 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %355 = icmp eq i32 %354, 0
  br i1 %355, label %356, label %450

356:                                              ; preds = %353, %343, %343
  %357 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %358 = load ptr, ptr %357, align 8, !tbaa !17
  %359 = load i64, ptr %358, align 8
  %360 = and i64 %359, 2097152
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %367, label %362

362:                                              ; preds = %356
  %363 = tail call ptr @signed_type_for(ptr noundef nonnull %358) #24
  %364 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %363, ptr noundef nonnull %14)
  %365 = getelementptr inbounds %struct.tree_common, ptr %364, i64 0, i32 2
  %366 = load ptr, ptr %365, align 8, !tbaa !17
  br label %367

367:                                              ; preds = %362, %356
  %368 = phi ptr [ %366, %362 ], [ %358, %356 ]
  %369 = phi ptr [ %364, %362 ], [ %14, %356 ]
  %370 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 82, ptr noundef %368, ptr noundef nonnull %369)
  %371 = icmp eq ptr %370, null
  br i1 %371, label %372, label %375

372:                                              ; preds = %367
  %373 = tail call ptr @build1_stat(i32 noundef 82, ptr noundef %368, ptr noundef nonnull %369) #24
  %374 = getelementptr inbounds %struct.tree_exp, ptr %373, i64 0, i32 1
  store i32 %0, ptr %374, align 8, !tbaa !17
  br label %375

375:                                              ; preds = %367, %372
  %376 = phi ptr [ %370, %367 ], [ %373, %372 ]
  %377 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %376)
  %378 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %379 = icmp eq i32 %378, 0
  br i1 %379, label %392, label %380

380:                                              ; preds = %375
  %381 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %382 = icmp eq i8 %381, 0
  br i1 %382, label %383, label %2418

383:                                              ; preds = %380
  %384 = load i64, ptr %377, align 8
  %385 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %384)
  %386 = icmp eq i8 %385, 0
  br i1 %386, label %2418, label %387

387:                                              ; preds = %383
  %388 = getelementptr inbounds %struct.tree_common, ptr %377, i64 0, i32 2
  %389 = load ptr, ptr %388, align 8, !tbaa !17
  %390 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %389, ptr noundef nonnull %377) #24
  %391 = getelementptr inbounds %struct.tree_exp, ptr %390, i64 0, i32 1
  store i32 %0, ptr %391, align 8, !tbaa !17
  br label %2418

392:                                              ; preds = %375
  tail call void @protected_set_expr_location(ptr noundef %377, i32 noundef %0) #24
  br label %2418

393:                                              ; preds = %343, %343
  %394 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %450

396:                                              ; preds = %393, %343, %343
  %397 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %398 = load ptr, ptr %397, align 8, !tbaa !17
  %399 = load i64, ptr %398, align 8
  %400 = and i64 %399, 2097152
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %407, label %402

402:                                              ; preds = %396
  %403 = tail call ptr @signed_type_for(ptr noundef nonnull %398) #24
  %404 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %403, ptr noundef nonnull %14)
  %405 = getelementptr inbounds %struct.tree_common, ptr %404, i64 0, i32 2
  %406 = load ptr, ptr %405, align 8, !tbaa !17
  br label %407

407:                                              ; preds = %402, %396
  %408 = phi ptr [ %406, %402 ], [ %398, %396 ]
  %409 = phi ptr [ %404, %402 ], [ %14, %396 ]
  %410 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef 82, ptr noundef %408, ptr noundef nonnull %409)
  %411 = icmp eq ptr %410, null
  br i1 %411, label %412, label %415

412:                                              ; preds = %407
  %413 = tail call ptr @build1_stat(i32 noundef 82, ptr noundef %408, ptr noundef nonnull %409) #24
  %414 = getelementptr inbounds %struct.tree_exp, ptr %413, i64 0, i32 1
  store i32 %0, ptr %414, align 8, !tbaa !17
  br label %415

415:                                              ; preds = %407, %412
  %416 = phi ptr [ %410, %407 ], [ %413, %412 ]
  %417 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %416)
  %418 = icmp eq ptr %417, null
  br i1 %418, label %2418, label %419

419:                                              ; preds = %415
  %420 = load i64, ptr %417, align 8
  %421 = and i64 %420, 65535
  %422 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %421
  %423 = load i32, ptr %422, align 4, !tbaa !17
  %424 = add i32 %423, -4
  %425 = icmp ult i32 %424, 7
  br i1 %425, label %426, label %429

426:                                              ; preds = %419
  %427 = getelementptr inbounds %struct.tree_exp, ptr %417, i64 0, i32 1
  %428 = load i32, ptr %427, align 8, !tbaa !17
  br label %429

429:                                              ; preds = %426, %419
  %430 = phi i32 [ %428, %426 ], [ 0, %419 ]
  %431 = getelementptr inbounds %struct.tree_common, ptr %417, i64 0, i32 2
  %432 = load ptr, ptr %431, align 8, !tbaa !17
  %433 = tail call ptr @tree_strip_sign_nop_conversions(ptr noundef nonnull %417) #24
  %434 = tail call fastcc ptr @fold_negate_expr(i32 noundef %430, ptr noundef %433)
  %435 = icmp eq ptr %434, null
  br i1 %435, label %436, label %441

436:                                              ; preds = %429
  %437 = getelementptr inbounds %struct.tree_common, ptr %433, i64 0, i32 2
  %438 = load ptr, ptr %437, align 8, !tbaa !17
  %439 = tail call ptr @build1_stat(i32 noundef 79, ptr noundef %438, ptr noundef %433) #24
  %440 = getelementptr inbounds %struct.tree_exp, ptr %439, i64 0, i32 1
  store i32 %430, ptr %440, align 8, !tbaa !17
  br label %441

441:                                              ; preds = %436, %429
  %442 = phi ptr [ %434, %429 ], [ %439, %436 ]
  %443 = tail call ptr @fold_convert_loc(i32 noundef %430, ptr noundef %432, ptr noundef nonnull %442)
  br label %2418

444:                                              ; preds = %343
  %445 = and i64 %6, 65535
  %446 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %445
  %447 = load i32, ptr %446, align 4, !tbaa !17
  %448 = icmp eq i32 %447, 5
  br i1 %448, label %450, label %449

449:                                              ; preds = %444
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 5405, ptr noundef nonnull @.str.1) #24
  br label %450

450:                                              ; preds = %449, %444, %353, %393, %283, %336, %329, %325, %321, %309, %306
  %451 = load i64, ptr %1, align 8
  %452 = and i64 %451, 65535
  %453 = icmp eq i64 %452, 14
  br i1 %453, label %454, label %457

454:                                              ; preds = %450
  %455 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %456 = load i64, ptr %1, align 8
  br label %462

457:                                              ; preds = %450
  %458 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %459 = load i32, ptr %458, align 4
  %460 = lshr i32 %459, 16
  %461 = and i32 %460, 255
  br label %462

462:                                              ; preds = %457, %454
  %463 = phi i64 [ %456, %454 ], [ %451, %457 ]
  %464 = phi i32 [ %455, %454 ], [ %461, %457 ]
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %465
  %467 = load i8, ptr %466, align 1, !tbaa !17
  %468 = icmp eq i8 %467, 8
  br i1 %468, label %523, label %469

469:                                              ; preds = %462
  %470 = and i64 %463, 65535
  %471 = icmp eq i64 %470, 14
  br i1 %471, label %472, label %475

472:                                              ; preds = %469
  %473 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %474 = load i64, ptr %1, align 8
  br label %480

475:                                              ; preds = %469
  %476 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %477 = load i32, ptr %476, align 4
  %478 = lshr i32 %477, 16
  %479 = and i32 %478, 255
  br label %480

480:                                              ; preds = %475, %472
  %481 = phi i64 [ %474, %472 ], [ %463, %475 ]
  %482 = phi i32 [ %473, %472 ], [ %479, %475 ]
  %483 = zext i32 %482 to i64
  %484 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %483
  %485 = load i8, ptr %484, align 1, !tbaa !17
  %486 = icmp eq i8 %485, 9
  br i1 %486, label %523, label %487

487:                                              ; preds = %480
  %488 = and i64 %481, 65535
  %489 = icmp eq i64 %488, 14
  br i1 %489, label %490, label %493

490:                                              ; preds = %487
  %491 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %492 = load i64, ptr %1, align 8
  br label %498

493:                                              ; preds = %487
  %494 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %495 = load i32, ptr %494, align 4
  %496 = lshr i32 %495, 16
  %497 = and i32 %496, 255
  br label %498

498:                                              ; preds = %493, %490
  %499 = phi i64 [ %492, %490 ], [ %481, %493 ]
  %500 = phi i32 [ %491, %490 ], [ %497, %493 ]
  %501 = zext i32 %500 to i64
  %502 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %501
  %503 = load i8, ptr %502, align 1, !tbaa !17
  %504 = icmp eq i8 %503, 11
  br i1 %504, label %523, label %505

505:                                              ; preds = %498
  %506 = and i64 %499, 65535
  %507 = icmp eq i64 %506, 14
  br i1 %507, label %508, label %510

508:                                              ; preds = %505
  %509 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %515

510:                                              ; preds = %505
  %511 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %512 = load i32, ptr %511, align 4
  %513 = lshr i32 %512, 16
  %514 = and i32 %513, 255
  br label %515

515:                                              ; preds = %510, %508
  %516 = phi i32 [ %509, %508 ], [ %514, %510 ]
  %517 = zext i32 %516 to i64
  %518 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %517
  %519 = load i8, ptr %518, align 1, !tbaa !17
  %520 = icmp eq i8 %519, 17
  br i1 %520, label %521, label %730

521:                                              ; preds = %515
  %522 = load i64, ptr %1, align 8
  br label %523

523:                                              ; preds = %521, %498, %480, %462
  %524 = phi i64 [ %522, %521 ], [ %499, %498 ], [ %481, %480 ], [ %463, %462 ]
  %525 = and i64 %524, 65535
  %526 = icmp eq i64 %525, 14
  br i1 %526, label %527, label %530

527:                                              ; preds = %523
  %528 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %529 = load i64, ptr %1, align 8
  br label %535

530:                                              ; preds = %523
  %531 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %532 = load i32, ptr %531, align 4
  %533 = lshr i32 %532, 16
  %534 = and i32 %533, 255
  br label %535

535:                                              ; preds = %530, %527
  %536 = phi i64 [ %529, %527 ], [ %524, %530 ]
  %537 = phi i32 [ %528, %527 ], [ %534, %530 ]
  %538 = zext i32 %537 to i64
  %539 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %538
  %540 = load i8, ptr %539, align 1, !tbaa !17
  %541 = icmp eq i8 %540, 8
  br i1 %541, label %560, label %542

542:                                              ; preds = %535
  %543 = and i64 %536, 65535
  %544 = icmp eq i64 %543, 14
  br i1 %544, label %545, label %548

545:                                              ; preds = %542
  %546 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %547 = load i64, ptr %1, align 8
  br label %553

548:                                              ; preds = %542
  %549 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %550 = load i32, ptr %549, align 4
  %551 = lshr i32 %550, 16
  %552 = and i32 %551, 255
  br label %553

553:                                              ; preds = %548, %545
  %554 = phi i64 [ %547, %545 ], [ %536, %548 ]
  %555 = phi i32 [ %546, %545 ], [ %552, %548 ]
  %556 = zext i32 %555 to i64
  %557 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %556
  %558 = load i8, ptr %557, align 1, !tbaa !17
  %559 = icmp eq i8 %558, 9
  br i1 %559, label %560, label %571

560:                                              ; preds = %553, %535
  %561 = phi i64 [ %554, %553 ], [ %536, %535 ]
  %562 = and i64 %561, 65535
  %563 = icmp eq i64 %562, 14
  br i1 %563, label %564, label %566

564:                                              ; preds = %560
  %565 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %587

566:                                              ; preds = %560
  %567 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %568 = load i32, ptr %567, align 4
  %569 = lshr i32 %568, 16
  %570 = and i32 %569, 255
  br label %587

571:                                              ; preds = %553
  %572 = and i64 %554, 65535
  %573 = icmp eq i64 %572, 14
  br i1 %573, label %574, label %576

574:                                              ; preds = %571
  %575 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %581

576:                                              ; preds = %571
  %577 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %578 = load i32, ptr %577, align 4
  %579 = lshr i32 %578, 16
  %580 = and i32 %579, 255
  br label %581

581:                                              ; preds = %576, %574
  %582 = phi i32 [ %575, %574 ], [ %580, %576 ]
  %583 = zext i32 %582 to i64
  %584 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %583
  %585 = load i8, ptr %584, align 1, !tbaa !17
  %586 = zext i8 %585 to i32
  br label %587

587:                                              ; preds = %564, %566, %581
  %588 = phi i32 [ %586, %581 ], [ %565, %564 ], [ %570, %566 ]
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %589
  %591 = load i8, ptr %590, align 1, !tbaa !17
  %592 = icmp eq i8 %591, 9
  %593 = load i64, ptr %1, align 8
  %594 = and i64 %593, 65535
  %595 = icmp eq i64 %594, 14
  br i1 %592, label %596, label %657

596:                                              ; preds = %587
  br i1 %595, label %597, label %600

597:                                              ; preds = %596
  %598 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %599 = load i64, ptr %1, align 8
  br label %605

600:                                              ; preds = %596
  %601 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %602 = load i32, ptr %601, align 4
  %603 = lshr i32 %602, 16
  %604 = and i32 %603, 255
  br label %605

605:                                              ; preds = %600, %597
  %606 = phi i64 [ %599, %597 ], [ %593, %600 ]
  %607 = phi i32 [ %598, %597 ], [ %604, %600 ]
  %608 = zext i32 %607 to i64
  %609 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %608
  %610 = load i8, ptr %609, align 1, !tbaa !17
  %611 = icmp eq i8 %610, 8
  br i1 %611, label %630, label %612

612:                                              ; preds = %605
  %613 = and i64 %606, 65535
  %614 = icmp eq i64 %613, 14
  br i1 %614, label %615, label %618

615:                                              ; preds = %612
  %616 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %617 = load i64, ptr %1, align 8
  br label %623

618:                                              ; preds = %612
  %619 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %620 = load i32, ptr %619, align 4
  %621 = lshr i32 %620, 16
  %622 = and i32 %621, 255
  br label %623

623:                                              ; preds = %618, %615
  %624 = phi i64 [ %617, %615 ], [ %606, %618 ]
  %625 = phi i32 [ %616, %615 ], [ %622, %618 ]
  %626 = zext i32 %625 to i64
  %627 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %626
  %628 = load i8, ptr %627, align 1, !tbaa !17
  %629 = icmp eq i8 %628, 9
  br i1 %629, label %630, label %641

630:                                              ; preds = %623, %605
  %631 = phi i64 [ %624, %623 ], [ %606, %605 ]
  %632 = and i64 %631, 65535
  %633 = icmp eq i64 %632, 14
  br i1 %633, label %634, label %636

634:                                              ; preds = %630
  %635 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %718

636:                                              ; preds = %630
  %637 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %638 = load i32, ptr %637, align 4
  %639 = lshr i32 %638, 16
  %640 = and i32 %639, 255
  br label %718

641:                                              ; preds = %623
  %642 = and i64 %624, 65535
  %643 = icmp eq i64 %642, 14
  br i1 %643, label %644, label %646

644:                                              ; preds = %641
  %645 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %651

646:                                              ; preds = %641
  %647 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %648 = load i32, ptr %647, align 4
  %649 = lshr i32 %648, 16
  %650 = and i32 %649, 255
  br label %651

651:                                              ; preds = %646, %644
  %652 = phi i32 [ %645, %644 ], [ %650, %646 ]
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %653
  %655 = load i8, ptr %654, align 1, !tbaa !17
  %656 = zext i8 %655 to i32
  br label %718

657:                                              ; preds = %587
  br i1 %595, label %658, label %661

658:                                              ; preds = %657
  %659 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %660 = load i64, ptr %1, align 8
  br label %666

661:                                              ; preds = %657
  %662 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %663 = load i32, ptr %662, align 4
  %664 = lshr i32 %663, 16
  %665 = and i32 %664, 255
  br label %666

666:                                              ; preds = %661, %658
  %667 = phi i64 [ %660, %658 ], [ %593, %661 ]
  %668 = phi i32 [ %659, %658 ], [ %665, %661 ]
  %669 = zext i32 %668 to i64
  %670 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %669
  %671 = load i8, ptr %670, align 1, !tbaa !17
  %672 = icmp eq i8 %671, 8
  br i1 %672, label %691, label %673

673:                                              ; preds = %666
  %674 = and i64 %667, 65535
  %675 = icmp eq i64 %674, 14
  br i1 %675, label %676, label %679

676:                                              ; preds = %673
  %677 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %678 = load i64, ptr %1, align 8
  br label %684

679:                                              ; preds = %673
  %680 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %681 = load i32, ptr %680, align 4
  %682 = lshr i32 %681, 16
  %683 = and i32 %682, 255
  br label %684

684:                                              ; preds = %679, %676
  %685 = phi i64 [ %678, %676 ], [ %667, %679 ]
  %686 = phi i32 [ %677, %676 ], [ %683, %679 ]
  %687 = zext i32 %686 to i64
  %688 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %687
  %689 = load i8, ptr %688, align 1, !tbaa !17
  %690 = icmp eq i8 %689, 9
  br i1 %690, label %691, label %702

691:                                              ; preds = %684, %666
  %692 = phi i64 [ %685, %684 ], [ %667, %666 ]
  %693 = and i64 %692, 65535
  %694 = icmp eq i64 %693, 14
  br i1 %694, label %695, label %697

695:                                              ; preds = %691
  %696 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %718

697:                                              ; preds = %691
  %698 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %699 = load i32, ptr %698, align 4
  %700 = lshr i32 %699, 16
  %701 = and i32 %700, 255
  br label %718

702:                                              ; preds = %684
  %703 = and i64 %685, 65535
  %704 = icmp eq i64 %703, 14
  br i1 %704, label %705, label %707

705:                                              ; preds = %702
  %706 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %712

707:                                              ; preds = %702
  %708 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %709 = load i32, ptr %708, align 4
  %710 = lshr i32 %709, 16
  %711 = and i32 %710, 255
  br label %712

712:                                              ; preds = %707, %705
  %713 = phi i32 [ %706, %705 ], [ %711, %707 ]
  %714 = zext i32 %713 to i64
  %715 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %714
  %716 = load i8, ptr %715, align 1, !tbaa !17
  %717 = zext i8 %716 to i32
  br label %718

718:                                              ; preds = %712, %697, %695, %651, %636, %634
  %719 = phi i32 [ %656, %651 ], [ %635, %634 ], [ %640, %636 ], [ %717, %712 ], [ %696, %695 ], [ %701, %697 ]
  %720 = add i32 %719, -38
  %721 = zext i32 %720 to i64
  %722 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %721
  %723 = load ptr, ptr %722, align 8, !tbaa !6
  %724 = getelementptr inbounds %struct.real_format, ptr %723, i64 0, i32 14
  %725 = load i8, ptr %724, align 1, !tbaa !37
  %726 = icmp ne i8 %725, 0
  %727 = load i32, ptr @flag_signed_zeros, align 4
  %728 = icmp ne i32 %727, 0
  %729 = select i1 %726, i1 %728, i1 false
  br i1 %729, label %757, label %730

730:                                              ; preds = %718, %515
  %731 = tail call i32 @integer_zerop(ptr noundef %11) #24
  %732 = icmp eq i32 %731, 0
  br i1 %732, label %757, label %733

733:                                              ; preds = %730
  %734 = tail call i32 @integer_zerop(ptr noundef %15) #24
  %735 = icmp eq i32 %734, 0
  br i1 %735, label %757, label %736

736:                                              ; preds = %733
  %737 = trunc i64 %6 to i16
  switch i16 %737, label %757 [
    i16 102, label %738
    i16 101, label %755
  ]

738:                                              ; preds = %736
  %739 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %14)
  %740 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %754, label %742

742:                                              ; preds = %738
  %743 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %744 = icmp eq i8 %743, 0
  br i1 %744, label %745, label %2418

745:                                              ; preds = %742
  %746 = load i64, ptr %739, align 8
  %747 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %746)
  %748 = icmp eq i8 %747, 0
  br i1 %748, label %2418, label %749

749:                                              ; preds = %745
  %750 = getelementptr inbounds %struct.tree_common, ptr %739, i64 0, i32 2
  %751 = load ptr, ptr %750, align 8, !tbaa !17
  %752 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %751, ptr noundef nonnull %739) #24
  %753 = getelementptr inbounds %struct.tree_exp, ptr %752, i64 0, i32 1
  store i32 %0, ptr %753, align 8, !tbaa !17
  br label %2418

754:                                              ; preds = %738
  tail call void @protected_set_expr_location(ptr noundef %739, i32 noundef %0) #24
  br label %2418

755:                                              ; preds = %736
  %756 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 0) #24
  br label %2418

757:                                              ; preds = %736, %718, %733, %730
  %758 = load i64, ptr %1, align 8
  %759 = and i64 %758, 65535
  %760 = icmp eq i64 %759, 14
  br i1 %760, label %761, label %764

761:                                              ; preds = %757
  %762 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %763 = load i64, ptr %1, align 8
  br label %769

764:                                              ; preds = %757
  %765 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %766 = load i32, ptr %765, align 4
  %767 = lshr i32 %766, 16
  %768 = and i32 %767, 255
  br label %769

769:                                              ; preds = %764, %761
  %770 = phi i64 [ %763, %761 ], [ %758, %764 ]
  %771 = phi i32 [ %762, %761 ], [ %768, %764 ]
  %772 = zext i32 %771 to i64
  %773 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %772
  %774 = load i8, ptr %773, align 1, !tbaa !17
  %775 = icmp eq i8 %774, 8
  br i1 %775, label %830, label %776

776:                                              ; preds = %769
  %777 = and i64 %770, 65535
  %778 = icmp eq i64 %777, 14
  br i1 %778, label %779, label %782

779:                                              ; preds = %776
  %780 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %781 = load i64, ptr %1, align 8
  br label %787

782:                                              ; preds = %776
  %783 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %784 = load i32, ptr %783, align 4
  %785 = lshr i32 %784, 16
  %786 = and i32 %785, 255
  br label %787

787:                                              ; preds = %782, %779
  %788 = phi i64 [ %781, %779 ], [ %770, %782 ]
  %789 = phi i32 [ %780, %779 ], [ %786, %782 ]
  %790 = zext i32 %789 to i64
  %791 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %790
  %792 = load i8, ptr %791, align 1, !tbaa !17
  %793 = icmp eq i8 %792, 9
  br i1 %793, label %830, label %794

794:                                              ; preds = %787
  %795 = and i64 %788, 65535
  %796 = icmp eq i64 %795, 14
  br i1 %796, label %797, label %800

797:                                              ; preds = %794
  %798 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %799 = load i64, ptr %1, align 8
  br label %805

800:                                              ; preds = %794
  %801 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %802 = load i32, ptr %801, align 4
  %803 = lshr i32 %802, 16
  %804 = and i32 %803, 255
  br label %805

805:                                              ; preds = %800, %797
  %806 = phi i64 [ %799, %797 ], [ %788, %800 ]
  %807 = phi i32 [ %798, %797 ], [ %804, %800 ]
  %808 = zext i32 %807 to i64
  %809 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %808
  %810 = load i8, ptr %809, align 1, !tbaa !17
  %811 = icmp eq i8 %810, 11
  br i1 %811, label %830, label %812

812:                                              ; preds = %805
  %813 = and i64 %806, 65535
  %814 = icmp eq i64 %813, 14
  br i1 %814, label %815, label %817

815:                                              ; preds = %812
  %816 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %822

817:                                              ; preds = %812
  %818 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %819 = load i32, ptr %818, align 4
  %820 = lshr i32 %819, 16
  %821 = and i32 %820, 255
  br label %822

822:                                              ; preds = %817, %815
  %823 = phi i32 [ %816, %815 ], [ %821, %817 ]
  %824 = zext i32 %823 to i64
  %825 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %824
  %826 = load i8, ptr %825, align 1, !tbaa !17
  %827 = icmp eq i8 %826, 17
  br i1 %827, label %828, label %1037

828:                                              ; preds = %822
  %829 = load i64, ptr %1, align 8
  br label %830

830:                                              ; preds = %828, %805, %787, %769
  %831 = phi i64 [ %829, %828 ], [ %806, %805 ], [ %788, %787 ], [ %770, %769 ]
  %832 = and i64 %831, 65535
  %833 = icmp eq i64 %832, 14
  br i1 %833, label %834, label %837

834:                                              ; preds = %830
  %835 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %836 = load i64, ptr %1, align 8
  br label %842

837:                                              ; preds = %830
  %838 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %839 = load i32, ptr %838, align 4
  %840 = lshr i32 %839, 16
  %841 = and i32 %840, 255
  br label %842

842:                                              ; preds = %837, %834
  %843 = phi i64 [ %836, %834 ], [ %831, %837 ]
  %844 = phi i32 [ %835, %834 ], [ %841, %837 ]
  %845 = zext i32 %844 to i64
  %846 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %845
  %847 = load i8, ptr %846, align 1, !tbaa !17
  %848 = icmp eq i8 %847, 8
  br i1 %848, label %867, label %849

849:                                              ; preds = %842
  %850 = and i64 %843, 65535
  %851 = icmp eq i64 %850, 14
  br i1 %851, label %852, label %855

852:                                              ; preds = %849
  %853 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %854 = load i64, ptr %1, align 8
  br label %860

855:                                              ; preds = %849
  %856 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %857 = load i32, ptr %856, align 4
  %858 = lshr i32 %857, 16
  %859 = and i32 %858, 255
  br label %860

860:                                              ; preds = %855, %852
  %861 = phi i64 [ %854, %852 ], [ %843, %855 ]
  %862 = phi i32 [ %853, %852 ], [ %859, %855 ]
  %863 = zext i32 %862 to i64
  %864 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %863
  %865 = load i8, ptr %864, align 1, !tbaa !17
  %866 = icmp eq i8 %865, 9
  br i1 %866, label %867, label %878

867:                                              ; preds = %860, %842
  %868 = phi i64 [ %861, %860 ], [ %843, %842 ]
  %869 = and i64 %868, 65535
  %870 = icmp eq i64 %869, 14
  br i1 %870, label %871, label %873

871:                                              ; preds = %867
  %872 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %894

873:                                              ; preds = %867
  %874 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %875 = load i32, ptr %874, align 4
  %876 = lshr i32 %875, 16
  %877 = and i32 %876, 255
  br label %894

878:                                              ; preds = %860
  %879 = and i64 %861, 65535
  %880 = icmp eq i64 %879, 14
  br i1 %880, label %881, label %883

881:                                              ; preds = %878
  %882 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %888

883:                                              ; preds = %878
  %884 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %885 = load i32, ptr %884, align 4
  %886 = lshr i32 %885, 16
  %887 = and i32 %886, 255
  br label %888

888:                                              ; preds = %883, %881
  %889 = phi i32 [ %882, %881 ], [ %887, %883 ]
  %890 = zext i32 %889 to i64
  %891 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %890
  %892 = load i8, ptr %891, align 1, !tbaa !17
  %893 = zext i8 %892 to i32
  br label %894

894:                                              ; preds = %871, %873, %888
  %895 = phi i32 [ %893, %888 ], [ %872, %871 ], [ %877, %873 ]
  %896 = zext i32 %895 to i64
  %897 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %896
  %898 = load i8, ptr %897, align 1, !tbaa !17
  %899 = icmp eq i8 %898, 9
  %900 = load i64, ptr %1, align 8
  %901 = and i64 %900, 65535
  %902 = icmp eq i64 %901, 14
  br i1 %899, label %903, label %964

903:                                              ; preds = %894
  br i1 %902, label %904, label %907

904:                                              ; preds = %903
  %905 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %906 = load i64, ptr %1, align 8
  br label %912

907:                                              ; preds = %903
  %908 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %909 = load i32, ptr %908, align 4
  %910 = lshr i32 %909, 16
  %911 = and i32 %910, 255
  br label %912

912:                                              ; preds = %907, %904
  %913 = phi i64 [ %906, %904 ], [ %900, %907 ]
  %914 = phi i32 [ %905, %904 ], [ %911, %907 ]
  %915 = zext i32 %914 to i64
  %916 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %915
  %917 = load i8, ptr %916, align 1, !tbaa !17
  %918 = icmp eq i8 %917, 8
  br i1 %918, label %937, label %919

919:                                              ; preds = %912
  %920 = and i64 %913, 65535
  %921 = icmp eq i64 %920, 14
  br i1 %921, label %922, label %925

922:                                              ; preds = %919
  %923 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %924 = load i64, ptr %1, align 8
  br label %930

925:                                              ; preds = %919
  %926 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %927 = load i32, ptr %926, align 4
  %928 = lshr i32 %927, 16
  %929 = and i32 %928, 255
  br label %930

930:                                              ; preds = %925, %922
  %931 = phi i64 [ %924, %922 ], [ %913, %925 ]
  %932 = phi i32 [ %923, %922 ], [ %929, %925 ]
  %933 = zext i32 %932 to i64
  %934 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %933
  %935 = load i8, ptr %934, align 1, !tbaa !17
  %936 = icmp eq i8 %935, 9
  br i1 %936, label %937, label %948

937:                                              ; preds = %930, %912
  %938 = phi i64 [ %931, %930 ], [ %913, %912 ]
  %939 = and i64 %938, 65535
  %940 = icmp eq i64 %939, 14
  br i1 %940, label %941, label %943

941:                                              ; preds = %937
  %942 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %1025

943:                                              ; preds = %937
  %944 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %945 = load i32, ptr %944, align 4
  %946 = lshr i32 %945, 16
  %947 = and i32 %946, 255
  br label %1025

948:                                              ; preds = %930
  %949 = and i64 %931, 65535
  %950 = icmp eq i64 %949, 14
  br i1 %950, label %951, label %953

951:                                              ; preds = %948
  %952 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %958

953:                                              ; preds = %948
  %954 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %955 = load i32, ptr %954, align 4
  %956 = lshr i32 %955, 16
  %957 = and i32 %956, 255
  br label %958

958:                                              ; preds = %953, %951
  %959 = phi i32 [ %952, %951 ], [ %957, %953 ]
  %960 = zext i32 %959 to i64
  %961 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %960
  %962 = load i8, ptr %961, align 1, !tbaa !17
  %963 = zext i8 %962 to i32
  br label %1025

964:                                              ; preds = %894
  br i1 %902, label %965, label %968

965:                                              ; preds = %964
  %966 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %967 = load i64, ptr %1, align 8
  br label %973

968:                                              ; preds = %964
  %969 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %970 = load i32, ptr %969, align 4
  %971 = lshr i32 %970, 16
  %972 = and i32 %971, 255
  br label %973

973:                                              ; preds = %968, %965
  %974 = phi i64 [ %967, %965 ], [ %900, %968 ]
  %975 = phi i32 [ %966, %965 ], [ %972, %968 ]
  %976 = zext i32 %975 to i64
  %977 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %976
  %978 = load i8, ptr %977, align 1, !tbaa !17
  %979 = icmp eq i8 %978, 8
  br i1 %979, label %998, label %980

980:                                              ; preds = %973
  %981 = and i64 %974, 65535
  %982 = icmp eq i64 %981, 14
  br i1 %982, label %983, label %986

983:                                              ; preds = %980
  %984 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  %985 = load i64, ptr %1, align 8
  br label %991

986:                                              ; preds = %980
  %987 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %988 = load i32, ptr %987, align 4
  %989 = lshr i32 %988, 16
  %990 = and i32 %989, 255
  br label %991

991:                                              ; preds = %986, %983
  %992 = phi i64 [ %985, %983 ], [ %974, %986 ]
  %993 = phi i32 [ %984, %983 ], [ %990, %986 ]
  %994 = zext i32 %993 to i64
  %995 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %994
  %996 = load i8, ptr %995, align 1, !tbaa !17
  %997 = icmp eq i8 %996, 9
  br i1 %997, label %998, label %1009

998:                                              ; preds = %991, %973
  %999 = phi i64 [ %992, %991 ], [ %974, %973 ]
  %1000 = and i64 %999, 65535
  %1001 = icmp eq i64 %1000, 14
  br i1 %1001, label %1002, label %1004

1002:                                             ; preds = %998
  %1003 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %1025

1004:                                             ; preds = %998
  %1005 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %1006 = load i32, ptr %1005, align 4
  %1007 = lshr i32 %1006, 16
  %1008 = and i32 %1007, 255
  br label %1025

1009:                                             ; preds = %991
  %1010 = and i64 %992, 65535
  %1011 = icmp eq i64 %1010, 14
  br i1 %1011, label %1012, label %1014

1012:                                             ; preds = %1009
  %1013 = tail call i32 @vector_type_mode(ptr noundef nonnull %1) #24
  br label %1019

1014:                                             ; preds = %1009
  %1015 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %1016 = load i32, ptr %1015, align 4
  %1017 = lshr i32 %1016, 16
  %1018 = and i32 %1017, 255
  br label %1019

1019:                                             ; preds = %1014, %1012
  %1020 = phi i32 [ %1013, %1012 ], [ %1018, %1014 ]
  %1021 = zext i32 %1020 to i64
  %1022 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1021
  %1023 = load i8, ptr %1022, align 1, !tbaa !17
  %1024 = zext i8 %1023 to i32
  br label %1025

1025:                                             ; preds = %1019, %1004, %1002, %958, %943, %941
  %1026 = phi i32 [ %963, %958 ], [ %942, %941 ], [ %947, %943 ], [ %1024, %1019 ], [ %1003, %1002 ], [ %1008, %1004 ]
  %1027 = add i32 %1026, -38
  %1028 = zext i32 %1027 to i64
  %1029 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1028
  %1030 = load ptr, ptr %1029, align 8, !tbaa !6
  %1031 = getelementptr inbounds %struct.real_format, ptr %1030, i64 0, i32 14
  %1032 = load i8, ptr %1031, align 1, !tbaa !37
  %1033 = icmp ne i8 %1032, 0
  %1034 = load i32, ptr @flag_signed_zeros, align 4
  %1035 = icmp ne i32 %1034, 0
  %1036 = select i1 %1033, i1 %1035, i1 false
  br i1 %1036, label %2326, label %1037

1037:                                             ; preds = %1025, %822
  %1038 = tail call fastcc i32 @operand_equal_for_comparison_p(ptr noundef %11, ptr noundef %15, ptr noundef %9), !range !28
  %1039 = icmp eq i32 %1038, 0
  br i1 %1039, label %2326, label %1040

1040:                                             ; preds = %1037
  %1041 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %1042 = icmp eq i8 %1041, 0
  br i1 %1042, label %1043, label %1058

1043:                                             ; preds = %1040
  %1044 = load ptr, ptr @lang_hooks, align 8, !tbaa !90
  %1045 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %1044, ptr noundef nonnull dereferenceable(8) @.str.30)
  %1046 = icmp eq i32 %1045, 0
  br i1 %1046, label %1050, label %1047

1047:                                             ; preds = %1043
  %1048 = tail call i32 @strcmp(ptr noundef nonnull dereferenceable(1) %1044, ptr noundef nonnull dereferenceable(18) @.str.31)
  %1049 = icmp eq i32 %1048, 0
  br i1 %1049, label %1050, label %1058

1050:                                             ; preds = %1047, %1043
  %1051 = load i64, ptr %14, align 8
  %1052 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %1051)
  %1053 = icmp eq i8 %1052, 0
  br i1 %1053, label %1058, label %1054

1054:                                             ; preds = %1050
  %1055 = load i64, ptr %15, align 8
  %1056 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %1055)
  %1057 = icmp eq i8 %1056, 0
  br i1 %1057, label %1058, label %2326

1058:                                             ; preds = %1054, %1050, %1047, %1040
  %1059 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %1060 = load ptr, ptr %1059, align 8, !tbaa !17
  %1061 = getelementptr inbounds %struct.tree_type, ptr %1060, i64 0, i32 16
  %1062 = load ptr, ptr %1061, align 8, !tbaa !17
  %1063 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 16
  %1064 = load ptr, ptr %1063, align 8, !tbaa !17
  %1065 = icmp eq ptr %1062, %1064
  %1066 = select i1 %1065, ptr %14, ptr %9
  %1067 = select i1 %1065, ptr %15, ptr %11
  %1068 = select i1 %1065, ptr %1, ptr %1060
  %1069 = trunc i64 %6 to i16
  switch i16 %1069, label %2320 [
    i16 101, label %1070
    i16 102, label %1073
    i16 98, label %1076
    i16 97, label %1076
    i16 106, label %1076
    i16 105, label %1076
    i16 100, label %1399
    i16 99, label %1399
    i16 108, label %1399
    i16 107, label %1399
    i16 109, label %1722
    i16 110, label %2021
  ]

1070:                                             ; preds = %1058
  %1071 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %15)
  %1072 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %1071)
  br label %2418

1073:                                             ; preds = %1058
  %1074 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %14)
  %1075 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %1074)
  br label %2418

1076:                                             ; preds = %1058, %1058, %1058, %1058
  %1077 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %1078 = load ptr, ptr %1077, align 8, !tbaa !17
  %1079 = load i64, ptr %1078, align 8
  %1080 = and i64 %1079, 65535
  %1081 = icmp eq i64 %1080, 14
  br i1 %1081, label %1082, label %1085

1082:                                             ; preds = %1076
  %1083 = tail call i32 @vector_type_mode(ptr noundef nonnull %1078) #24
  %1084 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1090

1085:                                             ; preds = %1076
  %1086 = getelementptr inbounds %struct.tree_type, ptr %1078, i64 0, i32 6
  %1087 = load i32, ptr %1086, align 4
  %1088 = lshr i32 %1087, 16
  %1089 = and i32 %1088, 255
  br label %1090

1090:                                             ; preds = %1085, %1082
  %1091 = phi ptr [ %1084, %1082 ], [ %1078, %1085 ]
  %1092 = phi i32 [ %1083, %1082 ], [ %1089, %1085 ]
  %1093 = zext i32 %1092 to i64
  %1094 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1093
  %1095 = load i8, ptr %1094, align 1, !tbaa !17
  %1096 = icmp eq i8 %1095, 8
  br i1 %1096, label %1154, label %1097

1097:                                             ; preds = %1090
  %1098 = load i64, ptr %1091, align 8
  %1099 = and i64 %1098, 65535
  %1100 = icmp eq i64 %1099, 14
  br i1 %1100, label %1101, label %1104

1101:                                             ; preds = %1097
  %1102 = tail call i32 @vector_type_mode(ptr noundef nonnull %1091) #24
  %1103 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1109

1104:                                             ; preds = %1097
  %1105 = getelementptr inbounds %struct.tree_type, ptr %1091, i64 0, i32 6
  %1106 = load i32, ptr %1105, align 4
  %1107 = lshr i32 %1106, 16
  %1108 = and i32 %1107, 255
  br label %1109

1109:                                             ; preds = %1104, %1101
  %1110 = phi ptr [ %1103, %1101 ], [ %1091, %1104 ]
  %1111 = phi i32 [ %1102, %1101 ], [ %1108, %1104 ]
  %1112 = zext i32 %1111 to i64
  %1113 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1112
  %1114 = load i8, ptr %1113, align 1, !tbaa !17
  %1115 = icmp eq i8 %1114, 9
  br i1 %1115, label %1154, label %1116

1116:                                             ; preds = %1109
  %1117 = load i64, ptr %1110, align 8
  %1118 = and i64 %1117, 65535
  %1119 = icmp eq i64 %1118, 14
  br i1 %1119, label %1120, label %1123

1120:                                             ; preds = %1116
  %1121 = tail call i32 @vector_type_mode(ptr noundef nonnull %1110) #24
  %1122 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1128

1123:                                             ; preds = %1116
  %1124 = getelementptr inbounds %struct.tree_type, ptr %1110, i64 0, i32 6
  %1125 = load i32, ptr %1124, align 4
  %1126 = lshr i32 %1125, 16
  %1127 = and i32 %1126, 255
  br label %1128

1128:                                             ; preds = %1123, %1120
  %1129 = phi ptr [ %1122, %1120 ], [ %1110, %1123 ]
  %1130 = phi i32 [ %1121, %1120 ], [ %1127, %1123 ]
  %1131 = zext i32 %1130 to i64
  %1132 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1131
  %1133 = load i8, ptr %1132, align 1, !tbaa !17
  %1134 = icmp eq i8 %1133, 11
  br i1 %1134, label %1154, label %1135

1135:                                             ; preds = %1128
  %1136 = load i64, ptr %1129, align 8
  %1137 = and i64 %1136, 65535
  %1138 = icmp eq i64 %1137, 14
  br i1 %1138, label %1139, label %1141

1139:                                             ; preds = %1135
  %1140 = tail call i32 @vector_type_mode(ptr noundef nonnull %1129) #24
  br label %1146

1141:                                             ; preds = %1135
  %1142 = getelementptr inbounds %struct.tree_type, ptr %1129, i64 0, i32 6
  %1143 = load i32, ptr %1142, align 4
  %1144 = lshr i32 %1143, 16
  %1145 = and i32 %1144, 255
  br label %1146

1146:                                             ; preds = %1141, %1139
  %1147 = phi i32 [ %1140, %1139 ], [ %1145, %1141 ]
  %1148 = zext i32 %1147 to i64
  %1149 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1148
  %1150 = load i8, ptr %1149, align 1, !tbaa !17
  %1151 = icmp eq i8 %1150, 17
  br i1 %1151, label %1152, label %1372

1152:                                             ; preds = %1146
  %1153 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1154

1154:                                             ; preds = %1152, %1128, %1109, %1090
  %1155 = phi ptr [ %1153, %1152 ], [ %1129, %1128 ], [ %1110, %1109 ], [ %1091, %1090 ]
  %1156 = load i64, ptr %1155, align 8
  %1157 = and i64 %1156, 65535
  %1158 = icmp eq i64 %1157, 14
  br i1 %1158, label %1159, label %1162

1159:                                             ; preds = %1154
  %1160 = tail call i32 @vector_type_mode(ptr noundef nonnull %1155) #24
  %1161 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1167

1162:                                             ; preds = %1154
  %1163 = getelementptr inbounds %struct.tree_type, ptr %1155, i64 0, i32 6
  %1164 = load i32, ptr %1163, align 4
  %1165 = lshr i32 %1164, 16
  %1166 = and i32 %1165, 255
  br label %1167

1167:                                             ; preds = %1162, %1159
  %1168 = phi ptr [ %1161, %1159 ], [ %1155, %1162 ]
  %1169 = phi i32 [ %1160, %1159 ], [ %1166, %1162 ]
  %1170 = zext i32 %1169 to i64
  %1171 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1170
  %1172 = load i8, ptr %1171, align 1, !tbaa !17
  %1173 = icmp eq i8 %1172, 8
  br i1 %1173, label %1193, label %1174

1174:                                             ; preds = %1167
  %1175 = load i64, ptr %1168, align 8
  %1176 = and i64 %1175, 65535
  %1177 = icmp eq i64 %1176, 14
  br i1 %1177, label %1178, label %1181

1178:                                             ; preds = %1174
  %1179 = tail call i32 @vector_type_mode(ptr noundef nonnull %1168) #24
  %1180 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1186

1181:                                             ; preds = %1174
  %1182 = getelementptr inbounds %struct.tree_type, ptr %1168, i64 0, i32 6
  %1183 = load i32, ptr %1182, align 4
  %1184 = lshr i32 %1183, 16
  %1185 = and i32 %1184, 255
  br label %1186

1186:                                             ; preds = %1181, %1178
  %1187 = phi ptr [ %1180, %1178 ], [ %1168, %1181 ]
  %1188 = phi i32 [ %1179, %1178 ], [ %1185, %1181 ]
  %1189 = zext i32 %1188 to i64
  %1190 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1189
  %1191 = load i8, ptr %1190, align 1, !tbaa !17
  %1192 = icmp eq i8 %1191, 9
  br i1 %1192, label %1193, label %1205

1193:                                             ; preds = %1186, %1167
  %1194 = phi ptr [ %1187, %1186 ], [ %1168, %1167 ]
  %1195 = load i64, ptr %1194, align 8
  %1196 = and i64 %1195, 65535
  %1197 = icmp eq i64 %1196, 14
  br i1 %1197, label %1198, label %1200

1198:                                             ; preds = %1193
  %1199 = tail call i32 @vector_type_mode(ptr noundef nonnull %1194) #24
  br label %1222

1200:                                             ; preds = %1193
  %1201 = getelementptr inbounds %struct.tree_type, ptr %1194, i64 0, i32 6
  %1202 = load i32, ptr %1201, align 4
  %1203 = lshr i32 %1202, 16
  %1204 = and i32 %1203, 255
  br label %1222

1205:                                             ; preds = %1186
  %1206 = load i64, ptr %1187, align 8
  %1207 = and i64 %1206, 65535
  %1208 = icmp eq i64 %1207, 14
  br i1 %1208, label %1209, label %1211

1209:                                             ; preds = %1205
  %1210 = tail call i32 @vector_type_mode(ptr noundef nonnull %1187) #24
  br label %1216

1211:                                             ; preds = %1205
  %1212 = getelementptr inbounds %struct.tree_type, ptr %1187, i64 0, i32 6
  %1213 = load i32, ptr %1212, align 4
  %1214 = lshr i32 %1213, 16
  %1215 = and i32 %1214, 255
  br label %1216

1216:                                             ; preds = %1211, %1209
  %1217 = phi i32 [ %1210, %1209 ], [ %1215, %1211 ]
  %1218 = zext i32 %1217 to i64
  %1219 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1218
  %1220 = load i8, ptr %1219, align 1, !tbaa !17
  %1221 = zext i8 %1220 to i32
  br label %1222

1222:                                             ; preds = %1198, %1200, %1216
  %1223 = phi i32 [ %1221, %1216 ], [ %1199, %1198 ], [ %1204, %1200 ]
  %1224 = zext i32 %1223 to i64
  %1225 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1224
  %1226 = load i8, ptr %1225, align 1, !tbaa !17
  %1227 = icmp eq i8 %1226, 9
  %1228 = load ptr, ptr %1077, align 8, !tbaa !17
  %1229 = load i64, ptr %1228, align 8
  %1230 = and i64 %1229, 65535
  %1231 = icmp eq i64 %1230, 14
  br i1 %1227, label %1232, label %1296

1232:                                             ; preds = %1222
  br i1 %1231, label %1233, label %1236

1233:                                             ; preds = %1232
  %1234 = tail call i32 @vector_type_mode(ptr noundef nonnull %1228) #24
  %1235 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1241

1236:                                             ; preds = %1232
  %1237 = getelementptr inbounds %struct.tree_type, ptr %1228, i64 0, i32 6
  %1238 = load i32, ptr %1237, align 4
  %1239 = lshr i32 %1238, 16
  %1240 = and i32 %1239, 255
  br label %1241

1241:                                             ; preds = %1236, %1233
  %1242 = phi ptr [ %1235, %1233 ], [ %1228, %1236 ]
  %1243 = phi i32 [ %1234, %1233 ], [ %1240, %1236 ]
  %1244 = zext i32 %1243 to i64
  %1245 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1244
  %1246 = load i8, ptr %1245, align 1, !tbaa !17
  %1247 = icmp eq i8 %1246, 8
  br i1 %1247, label %1267, label %1248

1248:                                             ; preds = %1241
  %1249 = load i64, ptr %1242, align 8
  %1250 = and i64 %1249, 65535
  %1251 = icmp eq i64 %1250, 14
  br i1 %1251, label %1252, label %1255

1252:                                             ; preds = %1248
  %1253 = tail call i32 @vector_type_mode(ptr noundef nonnull %1242) #24
  %1254 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1260

1255:                                             ; preds = %1248
  %1256 = getelementptr inbounds %struct.tree_type, ptr %1242, i64 0, i32 6
  %1257 = load i32, ptr %1256, align 4
  %1258 = lshr i32 %1257, 16
  %1259 = and i32 %1258, 255
  br label %1260

1260:                                             ; preds = %1255, %1252
  %1261 = phi ptr [ %1254, %1252 ], [ %1242, %1255 ]
  %1262 = phi i32 [ %1253, %1252 ], [ %1259, %1255 ]
  %1263 = zext i32 %1262 to i64
  %1264 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1263
  %1265 = load i8, ptr %1264, align 1, !tbaa !17
  %1266 = icmp eq i8 %1265, 9
  br i1 %1266, label %1267, label %1279

1267:                                             ; preds = %1260, %1241
  %1268 = phi ptr [ %1261, %1260 ], [ %1242, %1241 ]
  %1269 = load i64, ptr %1268, align 8
  %1270 = and i64 %1269, 65535
  %1271 = icmp eq i64 %1270, 14
  br i1 %1271, label %1272, label %1274

1272:                                             ; preds = %1267
  %1273 = tail call i32 @vector_type_mode(ptr noundef nonnull %1268) #24
  br label %1360

1274:                                             ; preds = %1267
  %1275 = getelementptr inbounds %struct.tree_type, ptr %1268, i64 0, i32 6
  %1276 = load i32, ptr %1275, align 4
  %1277 = lshr i32 %1276, 16
  %1278 = and i32 %1277, 255
  br label %1360

1279:                                             ; preds = %1260
  %1280 = load i64, ptr %1261, align 8
  %1281 = and i64 %1280, 65535
  %1282 = icmp eq i64 %1281, 14
  br i1 %1282, label %1283, label %1285

1283:                                             ; preds = %1279
  %1284 = tail call i32 @vector_type_mode(ptr noundef nonnull %1261) #24
  br label %1290

1285:                                             ; preds = %1279
  %1286 = getelementptr inbounds %struct.tree_type, ptr %1261, i64 0, i32 6
  %1287 = load i32, ptr %1286, align 4
  %1288 = lshr i32 %1287, 16
  %1289 = and i32 %1288, 255
  br label %1290

1290:                                             ; preds = %1285, %1283
  %1291 = phi i32 [ %1284, %1283 ], [ %1289, %1285 ]
  %1292 = zext i32 %1291 to i64
  %1293 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1292
  %1294 = load i8, ptr %1293, align 1, !tbaa !17
  %1295 = zext i8 %1294 to i32
  br label %1360

1296:                                             ; preds = %1222
  br i1 %1231, label %1297, label %1300

1297:                                             ; preds = %1296
  %1298 = tail call i32 @vector_type_mode(ptr noundef nonnull %1228) #24
  %1299 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1305

1300:                                             ; preds = %1296
  %1301 = getelementptr inbounds %struct.tree_type, ptr %1228, i64 0, i32 6
  %1302 = load i32, ptr %1301, align 4
  %1303 = lshr i32 %1302, 16
  %1304 = and i32 %1303, 255
  br label %1305

1305:                                             ; preds = %1300, %1297
  %1306 = phi ptr [ %1299, %1297 ], [ %1228, %1300 ]
  %1307 = phi i32 [ %1298, %1297 ], [ %1304, %1300 ]
  %1308 = zext i32 %1307 to i64
  %1309 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1308
  %1310 = load i8, ptr %1309, align 1, !tbaa !17
  %1311 = icmp eq i8 %1310, 8
  br i1 %1311, label %1331, label %1312

1312:                                             ; preds = %1305
  %1313 = load i64, ptr %1306, align 8
  %1314 = and i64 %1313, 65535
  %1315 = icmp eq i64 %1314, 14
  br i1 %1315, label %1316, label %1319

1316:                                             ; preds = %1312
  %1317 = tail call i32 @vector_type_mode(ptr noundef nonnull %1306) #24
  %1318 = load ptr, ptr %1077, align 8, !tbaa !17
  br label %1324

1319:                                             ; preds = %1312
  %1320 = getelementptr inbounds %struct.tree_type, ptr %1306, i64 0, i32 6
  %1321 = load i32, ptr %1320, align 4
  %1322 = lshr i32 %1321, 16
  %1323 = and i32 %1322, 255
  br label %1324

1324:                                             ; preds = %1319, %1316
  %1325 = phi ptr [ %1318, %1316 ], [ %1306, %1319 ]
  %1326 = phi i32 [ %1317, %1316 ], [ %1323, %1319 ]
  %1327 = zext i32 %1326 to i64
  %1328 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1327
  %1329 = load i8, ptr %1328, align 1, !tbaa !17
  %1330 = icmp eq i8 %1329, 9
  br i1 %1330, label %1331, label %1343

1331:                                             ; preds = %1324, %1305
  %1332 = phi ptr [ %1325, %1324 ], [ %1306, %1305 ]
  %1333 = load i64, ptr %1332, align 8
  %1334 = and i64 %1333, 65535
  %1335 = icmp eq i64 %1334, 14
  br i1 %1335, label %1336, label %1338

1336:                                             ; preds = %1331
  %1337 = tail call i32 @vector_type_mode(ptr noundef nonnull %1332) #24
  br label %1360

1338:                                             ; preds = %1331
  %1339 = getelementptr inbounds %struct.tree_type, ptr %1332, i64 0, i32 6
  %1340 = load i32, ptr %1339, align 4
  %1341 = lshr i32 %1340, 16
  %1342 = and i32 %1341, 255
  br label %1360

1343:                                             ; preds = %1324
  %1344 = load i64, ptr %1325, align 8
  %1345 = and i64 %1344, 65535
  %1346 = icmp eq i64 %1345, 14
  br i1 %1346, label %1347, label %1349

1347:                                             ; preds = %1343
  %1348 = tail call i32 @vector_type_mode(ptr noundef nonnull %1325) #24
  br label %1354

1349:                                             ; preds = %1343
  %1350 = getelementptr inbounds %struct.tree_type, ptr %1325, i64 0, i32 6
  %1351 = load i32, ptr %1350, align 4
  %1352 = lshr i32 %1351, 16
  %1353 = and i32 %1352, 255
  br label %1354

1354:                                             ; preds = %1349, %1347
  %1355 = phi i32 [ %1348, %1347 ], [ %1353, %1349 ]
  %1356 = zext i32 %1355 to i64
  %1357 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1356
  %1358 = load i8, ptr %1357, align 1, !tbaa !17
  %1359 = zext i8 %1358 to i32
  br label %1360

1360:                                             ; preds = %1354, %1338, %1336, %1290, %1274, %1272
  %1361 = phi i32 [ %1295, %1290 ], [ %1273, %1272 ], [ %1278, %1274 ], [ %1359, %1354 ], [ %1337, %1336 ], [ %1342, %1338 ]
  %1362 = add i32 %1361, -38
  %1363 = zext i32 %1362 to i64
  %1364 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1363
  %1365 = load ptr, ptr %1364, align 8, !tbaa !6
  %1366 = getelementptr inbounds %struct.real_format, ptr %1365, i64 0, i32 11
  %1367 = load i8, ptr %1366, align 2, !tbaa !36
  %1368 = icmp eq i8 %1367, 0
  %1369 = load i32, ptr @flag_finite_math_only, align 4
  %1370 = icmp ne i32 %1369, 0
  %1371 = select i1 %1368, i1 true, i1 %1370
  br i1 %1371, label %1372, label %2326

1372:                                             ; preds = %1360, %1146
  %1373 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1068, ptr noundef %1066)
  %1374 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1068, ptr noundef %1067)
  %1375 = and i32 %7, 65527
  %1376 = icmp eq i32 %1375, 98
  br i1 %1376, label %1377, label %1379

1377:                                             ; preds = %1372
  %1378 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 80, ptr noundef %1068, ptr noundef %1373, ptr noundef %1374)
  br label %1381

1379:                                             ; preds = %1372
  %1380 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 80, ptr noundef %1068, ptr noundef %1374, ptr noundef %1373)
  br label %1381

1381:                                             ; preds = %1379, %1377
  %1382 = phi ptr [ %1378, %1377 ], [ %1380, %1379 ]
  %1383 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %1382)
  %1384 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %1385 = icmp eq i32 %1384, 0
  br i1 %1385, label %1398, label %1386

1386:                                             ; preds = %1381
  %1387 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %1388 = icmp eq i8 %1387, 0
  br i1 %1388, label %1389, label %2418

1389:                                             ; preds = %1386
  %1390 = load i64, ptr %1383, align 8
  %1391 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %1390)
  %1392 = icmp eq i8 %1391, 0
  br i1 %1392, label %2418, label %1393

1393:                                             ; preds = %1389
  %1394 = getelementptr inbounds %struct.tree_common, ptr %1383, i64 0, i32 2
  %1395 = load ptr, ptr %1394, align 8, !tbaa !17
  %1396 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %1395, ptr noundef nonnull %1383) #24
  %1397 = getelementptr inbounds %struct.tree_exp, ptr %1396, i64 0, i32 1
  store i32 %0, ptr %1397, align 8, !tbaa !17
  br label %2418

1398:                                             ; preds = %1381
  tail call void @protected_set_expr_location(ptr noundef %1383, i32 noundef %0) #24
  br label %2418

1399:                                             ; preds = %1058, %1058, %1058, %1058
  %1400 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %1401 = load ptr, ptr %1400, align 8, !tbaa !17
  %1402 = load i64, ptr %1401, align 8
  %1403 = and i64 %1402, 65535
  %1404 = icmp eq i64 %1403, 14
  br i1 %1404, label %1405, label %1408

1405:                                             ; preds = %1399
  %1406 = tail call i32 @vector_type_mode(ptr noundef nonnull %1401) #24
  %1407 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1413

1408:                                             ; preds = %1399
  %1409 = getelementptr inbounds %struct.tree_type, ptr %1401, i64 0, i32 6
  %1410 = load i32, ptr %1409, align 4
  %1411 = lshr i32 %1410, 16
  %1412 = and i32 %1411, 255
  br label %1413

1413:                                             ; preds = %1408, %1405
  %1414 = phi ptr [ %1407, %1405 ], [ %1401, %1408 ]
  %1415 = phi i32 [ %1406, %1405 ], [ %1412, %1408 ]
  %1416 = zext i32 %1415 to i64
  %1417 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1416
  %1418 = load i8, ptr %1417, align 1, !tbaa !17
  %1419 = icmp eq i8 %1418, 8
  br i1 %1419, label %1477, label %1420

1420:                                             ; preds = %1413
  %1421 = load i64, ptr %1414, align 8
  %1422 = and i64 %1421, 65535
  %1423 = icmp eq i64 %1422, 14
  br i1 %1423, label %1424, label %1427

1424:                                             ; preds = %1420
  %1425 = tail call i32 @vector_type_mode(ptr noundef nonnull %1414) #24
  %1426 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1432

1427:                                             ; preds = %1420
  %1428 = getelementptr inbounds %struct.tree_type, ptr %1414, i64 0, i32 6
  %1429 = load i32, ptr %1428, align 4
  %1430 = lshr i32 %1429, 16
  %1431 = and i32 %1430, 255
  br label %1432

1432:                                             ; preds = %1427, %1424
  %1433 = phi ptr [ %1426, %1424 ], [ %1414, %1427 ]
  %1434 = phi i32 [ %1425, %1424 ], [ %1431, %1427 ]
  %1435 = zext i32 %1434 to i64
  %1436 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1435
  %1437 = load i8, ptr %1436, align 1, !tbaa !17
  %1438 = icmp eq i8 %1437, 9
  br i1 %1438, label %1477, label %1439

1439:                                             ; preds = %1432
  %1440 = load i64, ptr %1433, align 8
  %1441 = and i64 %1440, 65535
  %1442 = icmp eq i64 %1441, 14
  br i1 %1442, label %1443, label %1446

1443:                                             ; preds = %1439
  %1444 = tail call i32 @vector_type_mode(ptr noundef nonnull %1433) #24
  %1445 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1451

1446:                                             ; preds = %1439
  %1447 = getelementptr inbounds %struct.tree_type, ptr %1433, i64 0, i32 6
  %1448 = load i32, ptr %1447, align 4
  %1449 = lshr i32 %1448, 16
  %1450 = and i32 %1449, 255
  br label %1451

1451:                                             ; preds = %1446, %1443
  %1452 = phi ptr [ %1445, %1443 ], [ %1433, %1446 ]
  %1453 = phi i32 [ %1444, %1443 ], [ %1450, %1446 ]
  %1454 = zext i32 %1453 to i64
  %1455 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1454
  %1456 = load i8, ptr %1455, align 1, !tbaa !17
  %1457 = icmp eq i8 %1456, 11
  br i1 %1457, label %1477, label %1458

1458:                                             ; preds = %1451
  %1459 = load i64, ptr %1452, align 8
  %1460 = and i64 %1459, 65535
  %1461 = icmp eq i64 %1460, 14
  br i1 %1461, label %1462, label %1464

1462:                                             ; preds = %1458
  %1463 = tail call i32 @vector_type_mode(ptr noundef nonnull %1452) #24
  br label %1469

1464:                                             ; preds = %1458
  %1465 = getelementptr inbounds %struct.tree_type, ptr %1452, i64 0, i32 6
  %1466 = load i32, ptr %1465, align 4
  %1467 = lshr i32 %1466, 16
  %1468 = and i32 %1467, 255
  br label %1469

1469:                                             ; preds = %1464, %1462
  %1470 = phi i32 [ %1463, %1462 ], [ %1468, %1464 ]
  %1471 = zext i32 %1470 to i64
  %1472 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1471
  %1473 = load i8, ptr %1472, align 1, !tbaa !17
  %1474 = icmp eq i8 %1473, 17
  br i1 %1474, label %1475, label %1695

1475:                                             ; preds = %1469
  %1476 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1477

1477:                                             ; preds = %1475, %1451, %1432, %1413
  %1478 = phi ptr [ %1476, %1475 ], [ %1452, %1451 ], [ %1433, %1432 ], [ %1414, %1413 ]
  %1479 = load i64, ptr %1478, align 8
  %1480 = and i64 %1479, 65535
  %1481 = icmp eq i64 %1480, 14
  br i1 %1481, label %1482, label %1485

1482:                                             ; preds = %1477
  %1483 = tail call i32 @vector_type_mode(ptr noundef nonnull %1478) #24
  %1484 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1490

1485:                                             ; preds = %1477
  %1486 = getelementptr inbounds %struct.tree_type, ptr %1478, i64 0, i32 6
  %1487 = load i32, ptr %1486, align 4
  %1488 = lshr i32 %1487, 16
  %1489 = and i32 %1488, 255
  br label %1490

1490:                                             ; preds = %1485, %1482
  %1491 = phi ptr [ %1484, %1482 ], [ %1478, %1485 ]
  %1492 = phi i32 [ %1483, %1482 ], [ %1489, %1485 ]
  %1493 = zext i32 %1492 to i64
  %1494 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1493
  %1495 = load i8, ptr %1494, align 1, !tbaa !17
  %1496 = icmp eq i8 %1495, 8
  br i1 %1496, label %1516, label %1497

1497:                                             ; preds = %1490
  %1498 = load i64, ptr %1491, align 8
  %1499 = and i64 %1498, 65535
  %1500 = icmp eq i64 %1499, 14
  br i1 %1500, label %1501, label %1504

1501:                                             ; preds = %1497
  %1502 = tail call i32 @vector_type_mode(ptr noundef nonnull %1491) #24
  %1503 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1509

1504:                                             ; preds = %1497
  %1505 = getelementptr inbounds %struct.tree_type, ptr %1491, i64 0, i32 6
  %1506 = load i32, ptr %1505, align 4
  %1507 = lshr i32 %1506, 16
  %1508 = and i32 %1507, 255
  br label %1509

1509:                                             ; preds = %1504, %1501
  %1510 = phi ptr [ %1503, %1501 ], [ %1491, %1504 ]
  %1511 = phi i32 [ %1502, %1501 ], [ %1508, %1504 ]
  %1512 = zext i32 %1511 to i64
  %1513 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1512
  %1514 = load i8, ptr %1513, align 1, !tbaa !17
  %1515 = icmp eq i8 %1514, 9
  br i1 %1515, label %1516, label %1528

1516:                                             ; preds = %1509, %1490
  %1517 = phi ptr [ %1510, %1509 ], [ %1491, %1490 ]
  %1518 = load i64, ptr %1517, align 8
  %1519 = and i64 %1518, 65535
  %1520 = icmp eq i64 %1519, 14
  br i1 %1520, label %1521, label %1523

1521:                                             ; preds = %1516
  %1522 = tail call i32 @vector_type_mode(ptr noundef nonnull %1517) #24
  br label %1545

1523:                                             ; preds = %1516
  %1524 = getelementptr inbounds %struct.tree_type, ptr %1517, i64 0, i32 6
  %1525 = load i32, ptr %1524, align 4
  %1526 = lshr i32 %1525, 16
  %1527 = and i32 %1526, 255
  br label %1545

1528:                                             ; preds = %1509
  %1529 = load i64, ptr %1510, align 8
  %1530 = and i64 %1529, 65535
  %1531 = icmp eq i64 %1530, 14
  br i1 %1531, label %1532, label %1534

1532:                                             ; preds = %1528
  %1533 = tail call i32 @vector_type_mode(ptr noundef nonnull %1510) #24
  br label %1539

1534:                                             ; preds = %1528
  %1535 = getelementptr inbounds %struct.tree_type, ptr %1510, i64 0, i32 6
  %1536 = load i32, ptr %1535, align 4
  %1537 = lshr i32 %1536, 16
  %1538 = and i32 %1537, 255
  br label %1539

1539:                                             ; preds = %1534, %1532
  %1540 = phi i32 [ %1533, %1532 ], [ %1538, %1534 ]
  %1541 = zext i32 %1540 to i64
  %1542 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1541
  %1543 = load i8, ptr %1542, align 1, !tbaa !17
  %1544 = zext i8 %1543 to i32
  br label %1545

1545:                                             ; preds = %1521, %1523, %1539
  %1546 = phi i32 [ %1544, %1539 ], [ %1522, %1521 ], [ %1527, %1523 ]
  %1547 = zext i32 %1546 to i64
  %1548 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1547
  %1549 = load i8, ptr %1548, align 1, !tbaa !17
  %1550 = icmp eq i8 %1549, 9
  %1551 = load ptr, ptr %1400, align 8, !tbaa !17
  %1552 = load i64, ptr %1551, align 8
  %1553 = and i64 %1552, 65535
  %1554 = icmp eq i64 %1553, 14
  br i1 %1550, label %1555, label %1619

1555:                                             ; preds = %1545
  br i1 %1554, label %1556, label %1559

1556:                                             ; preds = %1555
  %1557 = tail call i32 @vector_type_mode(ptr noundef nonnull %1551) #24
  %1558 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1564

1559:                                             ; preds = %1555
  %1560 = getelementptr inbounds %struct.tree_type, ptr %1551, i64 0, i32 6
  %1561 = load i32, ptr %1560, align 4
  %1562 = lshr i32 %1561, 16
  %1563 = and i32 %1562, 255
  br label %1564

1564:                                             ; preds = %1559, %1556
  %1565 = phi ptr [ %1558, %1556 ], [ %1551, %1559 ]
  %1566 = phi i32 [ %1557, %1556 ], [ %1563, %1559 ]
  %1567 = zext i32 %1566 to i64
  %1568 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1567
  %1569 = load i8, ptr %1568, align 1, !tbaa !17
  %1570 = icmp eq i8 %1569, 8
  br i1 %1570, label %1590, label %1571

1571:                                             ; preds = %1564
  %1572 = load i64, ptr %1565, align 8
  %1573 = and i64 %1572, 65535
  %1574 = icmp eq i64 %1573, 14
  br i1 %1574, label %1575, label %1578

1575:                                             ; preds = %1571
  %1576 = tail call i32 @vector_type_mode(ptr noundef nonnull %1565) #24
  %1577 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1583

1578:                                             ; preds = %1571
  %1579 = getelementptr inbounds %struct.tree_type, ptr %1565, i64 0, i32 6
  %1580 = load i32, ptr %1579, align 4
  %1581 = lshr i32 %1580, 16
  %1582 = and i32 %1581, 255
  br label %1583

1583:                                             ; preds = %1578, %1575
  %1584 = phi ptr [ %1577, %1575 ], [ %1565, %1578 ]
  %1585 = phi i32 [ %1576, %1575 ], [ %1582, %1578 ]
  %1586 = zext i32 %1585 to i64
  %1587 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1586
  %1588 = load i8, ptr %1587, align 1, !tbaa !17
  %1589 = icmp eq i8 %1588, 9
  br i1 %1589, label %1590, label %1602

1590:                                             ; preds = %1583, %1564
  %1591 = phi ptr [ %1584, %1583 ], [ %1565, %1564 ]
  %1592 = load i64, ptr %1591, align 8
  %1593 = and i64 %1592, 65535
  %1594 = icmp eq i64 %1593, 14
  br i1 %1594, label %1595, label %1597

1595:                                             ; preds = %1590
  %1596 = tail call i32 @vector_type_mode(ptr noundef nonnull %1591) #24
  br label %1683

1597:                                             ; preds = %1590
  %1598 = getelementptr inbounds %struct.tree_type, ptr %1591, i64 0, i32 6
  %1599 = load i32, ptr %1598, align 4
  %1600 = lshr i32 %1599, 16
  %1601 = and i32 %1600, 255
  br label %1683

1602:                                             ; preds = %1583
  %1603 = load i64, ptr %1584, align 8
  %1604 = and i64 %1603, 65535
  %1605 = icmp eq i64 %1604, 14
  br i1 %1605, label %1606, label %1608

1606:                                             ; preds = %1602
  %1607 = tail call i32 @vector_type_mode(ptr noundef nonnull %1584) #24
  br label %1613

1608:                                             ; preds = %1602
  %1609 = getelementptr inbounds %struct.tree_type, ptr %1584, i64 0, i32 6
  %1610 = load i32, ptr %1609, align 4
  %1611 = lshr i32 %1610, 16
  %1612 = and i32 %1611, 255
  br label %1613

1613:                                             ; preds = %1608, %1606
  %1614 = phi i32 [ %1607, %1606 ], [ %1612, %1608 ]
  %1615 = zext i32 %1614 to i64
  %1616 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1615
  %1617 = load i8, ptr %1616, align 1, !tbaa !17
  %1618 = zext i8 %1617 to i32
  br label %1683

1619:                                             ; preds = %1545
  br i1 %1554, label %1620, label %1623

1620:                                             ; preds = %1619
  %1621 = tail call i32 @vector_type_mode(ptr noundef nonnull %1551) #24
  %1622 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1628

1623:                                             ; preds = %1619
  %1624 = getelementptr inbounds %struct.tree_type, ptr %1551, i64 0, i32 6
  %1625 = load i32, ptr %1624, align 4
  %1626 = lshr i32 %1625, 16
  %1627 = and i32 %1626, 255
  br label %1628

1628:                                             ; preds = %1623, %1620
  %1629 = phi ptr [ %1622, %1620 ], [ %1551, %1623 ]
  %1630 = phi i32 [ %1621, %1620 ], [ %1627, %1623 ]
  %1631 = zext i32 %1630 to i64
  %1632 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1631
  %1633 = load i8, ptr %1632, align 1, !tbaa !17
  %1634 = icmp eq i8 %1633, 8
  br i1 %1634, label %1654, label %1635

1635:                                             ; preds = %1628
  %1636 = load i64, ptr %1629, align 8
  %1637 = and i64 %1636, 65535
  %1638 = icmp eq i64 %1637, 14
  br i1 %1638, label %1639, label %1642

1639:                                             ; preds = %1635
  %1640 = tail call i32 @vector_type_mode(ptr noundef nonnull %1629) #24
  %1641 = load ptr, ptr %1400, align 8, !tbaa !17
  br label %1647

1642:                                             ; preds = %1635
  %1643 = getelementptr inbounds %struct.tree_type, ptr %1629, i64 0, i32 6
  %1644 = load i32, ptr %1643, align 4
  %1645 = lshr i32 %1644, 16
  %1646 = and i32 %1645, 255
  br label %1647

1647:                                             ; preds = %1642, %1639
  %1648 = phi ptr [ %1641, %1639 ], [ %1629, %1642 ]
  %1649 = phi i32 [ %1640, %1639 ], [ %1646, %1642 ]
  %1650 = zext i32 %1649 to i64
  %1651 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1650
  %1652 = load i8, ptr %1651, align 1, !tbaa !17
  %1653 = icmp eq i8 %1652, 9
  br i1 %1653, label %1654, label %1666

1654:                                             ; preds = %1647, %1628
  %1655 = phi ptr [ %1648, %1647 ], [ %1629, %1628 ]
  %1656 = load i64, ptr %1655, align 8
  %1657 = and i64 %1656, 65535
  %1658 = icmp eq i64 %1657, 14
  br i1 %1658, label %1659, label %1661

1659:                                             ; preds = %1654
  %1660 = tail call i32 @vector_type_mode(ptr noundef nonnull %1655) #24
  br label %1683

1661:                                             ; preds = %1654
  %1662 = getelementptr inbounds %struct.tree_type, ptr %1655, i64 0, i32 6
  %1663 = load i32, ptr %1662, align 4
  %1664 = lshr i32 %1663, 16
  %1665 = and i32 %1664, 255
  br label %1683

1666:                                             ; preds = %1647
  %1667 = load i64, ptr %1648, align 8
  %1668 = and i64 %1667, 65535
  %1669 = icmp eq i64 %1668, 14
  br i1 %1669, label %1670, label %1672

1670:                                             ; preds = %1666
  %1671 = tail call i32 @vector_type_mode(ptr noundef nonnull %1648) #24
  br label %1677

1672:                                             ; preds = %1666
  %1673 = getelementptr inbounds %struct.tree_type, ptr %1648, i64 0, i32 6
  %1674 = load i32, ptr %1673, align 4
  %1675 = lshr i32 %1674, 16
  %1676 = and i32 %1675, 255
  br label %1677

1677:                                             ; preds = %1672, %1670
  %1678 = phi i32 [ %1671, %1670 ], [ %1676, %1672 ]
  %1679 = zext i32 %1678 to i64
  %1680 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1679
  %1681 = load i8, ptr %1680, align 1, !tbaa !17
  %1682 = zext i8 %1681 to i32
  br label %1683

1683:                                             ; preds = %1677, %1661, %1659, %1613, %1597, %1595
  %1684 = phi i32 [ %1618, %1613 ], [ %1596, %1595 ], [ %1601, %1597 ], [ %1682, %1677 ], [ %1660, %1659 ], [ %1665, %1661 ]
  %1685 = add i32 %1684, -38
  %1686 = zext i32 %1685 to i64
  %1687 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %1686
  %1688 = load ptr, ptr %1687, align 8, !tbaa !6
  %1689 = getelementptr inbounds %struct.real_format, ptr %1688, i64 0, i32 11
  %1690 = load i8, ptr %1689, align 2, !tbaa !36
  %1691 = icmp eq i8 %1690, 0
  %1692 = load i32, ptr @flag_finite_math_only, align 4
  %1693 = icmp ne i32 %1692, 0
  %1694 = select i1 %1691, i1 true, i1 %1693
  br i1 %1694, label %1695, label %2326

1695:                                             ; preds = %1683, %1469
  %1696 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1068, ptr noundef %1066)
  %1697 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %1068, ptr noundef %1067)
  %1698 = and i32 %7, 65527
  %1699 = icmp eq i32 %1698, 100
  br i1 %1699, label %1700, label %1702

1700:                                             ; preds = %1695
  %1701 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 81, ptr noundef %1068, ptr noundef %1696, ptr noundef %1697)
  br label %1704

1702:                                             ; preds = %1695
  %1703 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 81, ptr noundef %1068, ptr noundef %1697, ptr noundef %1696)
  br label %1704

1704:                                             ; preds = %1702, %1700
  %1705 = phi ptr [ %1701, %1700 ], [ %1703, %1702 ]
  %1706 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %1705)
  %1707 = load i32, ptr @pedantic_lvalues, align 4, !tbaa !21
  %1708 = icmp eq i32 %1707, 0
  br i1 %1708, label %1721, label %1709

1709:                                             ; preds = %1704
  %1710 = load i8, ptr @in_gimple_form, align 1, !tbaa !17
  %1711 = icmp eq i8 %1710, 0
  br i1 %1711, label %1712, label %2418

1712:                                             ; preds = %1709
  %1713 = load i64, ptr %1706, align 8
  %1714 = tail call fastcc zeroext i8 @maybe_lvalue_p(i64 %1713)
  %1715 = icmp eq i8 %1714, 0
  br i1 %1715, label %2418, label %1716

1716:                                             ; preds = %1712
  %1717 = getelementptr inbounds %struct.tree_common, ptr %1706, i64 0, i32 2
  %1718 = load ptr, ptr %1717, align 8, !tbaa !17
  %1719 = tail call ptr @build1_stat(i32 noundef 117, ptr noundef %1718, ptr noundef nonnull %1706) #24
  %1720 = getelementptr inbounds %struct.tree_exp, ptr %1719, i64 0, i32 1
  store i32 %0, ptr %1720, align 8, !tbaa !17
  br label %2418

1721:                                             ; preds = %1704
  tail call void @protected_set_expr_location(ptr noundef %1706, i32 noundef %0) #24
  br label %2418

1722:                                             ; preds = %1058
  %1723 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %1724 = load ptr, ptr %1723, align 8, !tbaa !17
  %1725 = load i64, ptr %1724, align 8
  %1726 = and i64 %1725, 65535
  %1727 = icmp eq i64 %1726, 14
  br i1 %1727, label %1728, label %1731

1728:                                             ; preds = %1722
  %1729 = tail call i32 @vector_type_mode(ptr noundef nonnull %1724) #24
  %1730 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1736

1731:                                             ; preds = %1722
  %1732 = getelementptr inbounds %struct.tree_type, ptr %1724, i64 0, i32 6
  %1733 = load i32, ptr %1732, align 4
  %1734 = lshr i32 %1733, 16
  %1735 = and i32 %1734, 255
  br label %1736

1736:                                             ; preds = %1731, %1728
  %1737 = phi ptr [ %1730, %1728 ], [ %1724, %1731 ]
  %1738 = phi i32 [ %1729, %1728 ], [ %1735, %1731 ]
  %1739 = zext i32 %1738 to i64
  %1740 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1739
  %1741 = load i8, ptr %1740, align 1, !tbaa !17
  %1742 = icmp eq i8 %1741, 8
  br i1 %1742, label %1800, label %1743

1743:                                             ; preds = %1736
  %1744 = load i64, ptr %1737, align 8
  %1745 = and i64 %1744, 65535
  %1746 = icmp eq i64 %1745, 14
  br i1 %1746, label %1747, label %1750

1747:                                             ; preds = %1743
  %1748 = tail call i32 @vector_type_mode(ptr noundef nonnull %1737) #24
  %1749 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1755

1750:                                             ; preds = %1743
  %1751 = getelementptr inbounds %struct.tree_type, ptr %1737, i64 0, i32 6
  %1752 = load i32, ptr %1751, align 4
  %1753 = lshr i32 %1752, 16
  %1754 = and i32 %1753, 255
  br label %1755

1755:                                             ; preds = %1750, %1747
  %1756 = phi ptr [ %1749, %1747 ], [ %1737, %1750 ]
  %1757 = phi i32 [ %1748, %1747 ], [ %1754, %1750 ]
  %1758 = zext i32 %1757 to i64
  %1759 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1758
  %1760 = load i8, ptr %1759, align 1, !tbaa !17
  %1761 = icmp eq i8 %1760, 9
  br i1 %1761, label %1800, label %1762

1762:                                             ; preds = %1755
  %1763 = load i64, ptr %1756, align 8
  %1764 = and i64 %1763, 65535
  %1765 = icmp eq i64 %1764, 14
  br i1 %1765, label %1766, label %1769

1766:                                             ; preds = %1762
  %1767 = tail call i32 @vector_type_mode(ptr noundef nonnull %1756) #24
  %1768 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1774

1769:                                             ; preds = %1762
  %1770 = getelementptr inbounds %struct.tree_type, ptr %1756, i64 0, i32 6
  %1771 = load i32, ptr %1770, align 4
  %1772 = lshr i32 %1771, 16
  %1773 = and i32 %1772, 255
  br label %1774

1774:                                             ; preds = %1769, %1766
  %1775 = phi ptr [ %1768, %1766 ], [ %1756, %1769 ]
  %1776 = phi i32 [ %1767, %1766 ], [ %1773, %1769 ]
  %1777 = zext i32 %1776 to i64
  %1778 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1777
  %1779 = load i8, ptr %1778, align 1, !tbaa !17
  %1780 = icmp eq i8 %1779, 11
  br i1 %1780, label %1800, label %1781

1781:                                             ; preds = %1774
  %1782 = load i64, ptr %1775, align 8
  %1783 = and i64 %1782, 65535
  %1784 = icmp eq i64 %1783, 14
  br i1 %1784, label %1785, label %1787

1785:                                             ; preds = %1781
  %1786 = tail call i32 @vector_type_mode(ptr noundef nonnull %1775) #24
  br label %1792

1787:                                             ; preds = %1781
  %1788 = getelementptr inbounds %struct.tree_type, ptr %1775, i64 0, i32 6
  %1789 = load i32, ptr %1788, align 4
  %1790 = lshr i32 %1789, 16
  %1791 = and i32 %1790, 255
  br label %1792

1792:                                             ; preds = %1787, %1785
  %1793 = phi i32 [ %1786, %1785 ], [ %1791, %1787 ]
  %1794 = zext i32 %1793 to i64
  %1795 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1794
  %1796 = load i8, ptr %1795, align 1, !tbaa !17
  %1797 = icmp eq i8 %1796, 17
  br i1 %1797, label %1798, label %2018

1798:                                             ; preds = %1792
  %1799 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1800

1800:                                             ; preds = %1798, %1774, %1755, %1736
  %1801 = phi ptr [ %1799, %1798 ], [ %1775, %1774 ], [ %1756, %1755 ], [ %1737, %1736 ]
  %1802 = load i64, ptr %1801, align 8
  %1803 = and i64 %1802, 65535
  %1804 = icmp eq i64 %1803, 14
  br i1 %1804, label %1805, label %1808

1805:                                             ; preds = %1800
  %1806 = tail call i32 @vector_type_mode(ptr noundef nonnull %1801) #24
  %1807 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1813

1808:                                             ; preds = %1800
  %1809 = getelementptr inbounds %struct.tree_type, ptr %1801, i64 0, i32 6
  %1810 = load i32, ptr %1809, align 4
  %1811 = lshr i32 %1810, 16
  %1812 = and i32 %1811, 255
  br label %1813

1813:                                             ; preds = %1808, %1805
  %1814 = phi ptr [ %1807, %1805 ], [ %1801, %1808 ]
  %1815 = phi i32 [ %1806, %1805 ], [ %1812, %1808 ]
  %1816 = zext i32 %1815 to i64
  %1817 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1816
  %1818 = load i8, ptr %1817, align 1, !tbaa !17
  %1819 = icmp eq i8 %1818, 8
  br i1 %1819, label %1839, label %1820

1820:                                             ; preds = %1813
  %1821 = load i64, ptr %1814, align 8
  %1822 = and i64 %1821, 65535
  %1823 = icmp eq i64 %1822, 14
  br i1 %1823, label %1824, label %1827

1824:                                             ; preds = %1820
  %1825 = tail call i32 @vector_type_mode(ptr noundef nonnull %1814) #24
  %1826 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1832

1827:                                             ; preds = %1820
  %1828 = getelementptr inbounds %struct.tree_type, ptr %1814, i64 0, i32 6
  %1829 = load i32, ptr %1828, align 4
  %1830 = lshr i32 %1829, 16
  %1831 = and i32 %1830, 255
  br label %1832

1832:                                             ; preds = %1827, %1824
  %1833 = phi ptr [ %1826, %1824 ], [ %1814, %1827 ]
  %1834 = phi i32 [ %1825, %1824 ], [ %1831, %1827 ]
  %1835 = zext i32 %1834 to i64
  %1836 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1835
  %1837 = load i8, ptr %1836, align 1, !tbaa !17
  %1838 = icmp eq i8 %1837, 9
  br i1 %1838, label %1839, label %1851

1839:                                             ; preds = %1832, %1813
  %1840 = phi ptr [ %1833, %1832 ], [ %1814, %1813 ]
  %1841 = load i64, ptr %1840, align 8
  %1842 = and i64 %1841, 65535
  %1843 = icmp eq i64 %1842, 14
  br i1 %1843, label %1844, label %1846

1844:                                             ; preds = %1839
  %1845 = tail call i32 @vector_type_mode(ptr noundef nonnull %1840) #24
  br label %1868

1846:                                             ; preds = %1839
  %1847 = getelementptr inbounds %struct.tree_type, ptr %1840, i64 0, i32 6
  %1848 = load i32, ptr %1847, align 4
  %1849 = lshr i32 %1848, 16
  %1850 = and i32 %1849, 255
  br label %1868

1851:                                             ; preds = %1832
  %1852 = load i64, ptr %1833, align 8
  %1853 = and i64 %1852, 65535
  %1854 = icmp eq i64 %1853, 14
  br i1 %1854, label %1855, label %1857

1855:                                             ; preds = %1851
  %1856 = tail call i32 @vector_type_mode(ptr noundef nonnull %1833) #24
  br label %1862

1857:                                             ; preds = %1851
  %1858 = getelementptr inbounds %struct.tree_type, ptr %1833, i64 0, i32 6
  %1859 = load i32, ptr %1858, align 4
  %1860 = lshr i32 %1859, 16
  %1861 = and i32 %1860, 255
  br label %1862

1862:                                             ; preds = %1857, %1855
  %1863 = phi i32 [ %1856, %1855 ], [ %1861, %1857 ]
  %1864 = zext i32 %1863 to i64
  %1865 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1864
  %1866 = load i8, ptr %1865, align 1, !tbaa !17
  %1867 = zext i8 %1866 to i32
  br label %1868

1868:                                             ; preds = %1844, %1846, %1862
  %1869 = phi i32 [ %1867, %1862 ], [ %1845, %1844 ], [ %1850, %1846 ]
  %1870 = zext i32 %1869 to i64
  %1871 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1870
  %1872 = load i8, ptr %1871, align 1, !tbaa !17
  %1873 = icmp eq i8 %1872, 9
  %1874 = load ptr, ptr %1723, align 8, !tbaa !17
  %1875 = load i64, ptr %1874, align 8
  %1876 = and i64 %1875, 65535
  %1877 = icmp eq i64 %1876, 14
  br i1 %1873, label %1878, label %1942

1878:                                             ; preds = %1868
  br i1 %1877, label %1879, label %1882

1879:                                             ; preds = %1878
  %1880 = tail call i32 @vector_type_mode(ptr noundef nonnull %1874) #24
  %1881 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1887

1882:                                             ; preds = %1878
  %1883 = getelementptr inbounds %struct.tree_type, ptr %1874, i64 0, i32 6
  %1884 = load i32, ptr %1883, align 4
  %1885 = lshr i32 %1884, 16
  %1886 = and i32 %1885, 255
  br label %1887

1887:                                             ; preds = %1882, %1879
  %1888 = phi ptr [ %1881, %1879 ], [ %1874, %1882 ]
  %1889 = phi i32 [ %1880, %1879 ], [ %1886, %1882 ]
  %1890 = zext i32 %1889 to i64
  %1891 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1890
  %1892 = load i8, ptr %1891, align 1, !tbaa !17
  %1893 = icmp eq i8 %1892, 8
  br i1 %1893, label %1913, label %1894

1894:                                             ; preds = %1887
  %1895 = load i64, ptr %1888, align 8
  %1896 = and i64 %1895, 65535
  %1897 = icmp eq i64 %1896, 14
  br i1 %1897, label %1898, label %1901

1898:                                             ; preds = %1894
  %1899 = tail call i32 @vector_type_mode(ptr noundef nonnull %1888) #24
  %1900 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1906

1901:                                             ; preds = %1894
  %1902 = getelementptr inbounds %struct.tree_type, ptr %1888, i64 0, i32 6
  %1903 = load i32, ptr %1902, align 4
  %1904 = lshr i32 %1903, 16
  %1905 = and i32 %1904, 255
  br label %1906

1906:                                             ; preds = %1901, %1898
  %1907 = phi ptr [ %1900, %1898 ], [ %1888, %1901 ]
  %1908 = phi i32 [ %1899, %1898 ], [ %1905, %1901 ]
  %1909 = zext i32 %1908 to i64
  %1910 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1909
  %1911 = load i8, ptr %1910, align 1, !tbaa !17
  %1912 = icmp eq i8 %1911, 9
  br i1 %1912, label %1913, label %1925

1913:                                             ; preds = %1906, %1887
  %1914 = phi ptr [ %1907, %1906 ], [ %1888, %1887 ]
  %1915 = load i64, ptr %1914, align 8
  %1916 = and i64 %1915, 65535
  %1917 = icmp eq i64 %1916, 14
  br i1 %1917, label %1918, label %1920

1918:                                             ; preds = %1913
  %1919 = tail call i32 @vector_type_mode(ptr noundef nonnull %1914) #24
  br label %2006

1920:                                             ; preds = %1913
  %1921 = getelementptr inbounds %struct.tree_type, ptr %1914, i64 0, i32 6
  %1922 = load i32, ptr %1921, align 4
  %1923 = lshr i32 %1922, 16
  %1924 = and i32 %1923, 255
  br label %2006

1925:                                             ; preds = %1906
  %1926 = load i64, ptr %1907, align 8
  %1927 = and i64 %1926, 65535
  %1928 = icmp eq i64 %1927, 14
  br i1 %1928, label %1929, label %1931

1929:                                             ; preds = %1925
  %1930 = tail call i32 @vector_type_mode(ptr noundef nonnull %1907) #24
  br label %1936

1931:                                             ; preds = %1925
  %1932 = getelementptr inbounds %struct.tree_type, ptr %1907, i64 0, i32 6
  %1933 = load i32, ptr %1932, align 4
  %1934 = lshr i32 %1933, 16
  %1935 = and i32 %1934, 255
  br label %1936

1936:                                             ; preds = %1931, %1929
  %1937 = phi i32 [ %1930, %1929 ], [ %1935, %1931 ]
  %1938 = zext i32 %1937 to i64
  %1939 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %1938
  %1940 = load i8, ptr %1939, align 1, !tbaa !17
  %1941 = zext i8 %1940 to i32
  br label %2006

1942:                                             ; preds = %1868
  br i1 %1877, label %1943, label %1946

1943:                                             ; preds = %1942
  %1944 = tail call i32 @vector_type_mode(ptr noundef nonnull %1874) #24
  %1945 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1951

1946:                                             ; preds = %1942
  %1947 = getelementptr inbounds %struct.tree_type, ptr %1874, i64 0, i32 6
  %1948 = load i32, ptr %1947, align 4
  %1949 = lshr i32 %1948, 16
  %1950 = and i32 %1949, 255
  br label %1951

1951:                                             ; preds = %1946, %1943
  %1952 = phi ptr [ %1945, %1943 ], [ %1874, %1946 ]
  %1953 = phi i32 [ %1944, %1943 ], [ %1950, %1946 ]
  %1954 = zext i32 %1953 to i64
  %1955 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1954
  %1956 = load i8, ptr %1955, align 1, !tbaa !17
  %1957 = icmp eq i8 %1956, 8
  br i1 %1957, label %1977, label %1958

1958:                                             ; preds = %1951
  %1959 = load i64, ptr %1952, align 8
  %1960 = and i64 %1959, 65535
  %1961 = icmp eq i64 %1960, 14
  br i1 %1961, label %1962, label %1965

1962:                                             ; preds = %1958
  %1963 = tail call i32 @vector_type_mode(ptr noundef nonnull %1952) #24
  %1964 = load ptr, ptr %1723, align 8, !tbaa !17
  br label %1970

1965:                                             ; preds = %1958
  %1966 = getelementptr inbounds %struct.tree_type, ptr %1952, i64 0, i32 6
  %1967 = load i32, ptr %1966, align 4
  %1968 = lshr i32 %1967, 16
  %1969 = and i32 %1968, 255
  br label %1970

1970:                                             ; preds = %1965, %1962
  %1971 = phi ptr [ %1964, %1962 ], [ %1952, %1965 ]
  %1972 = phi i32 [ %1963, %1962 ], [ %1969, %1965 ]
  %1973 = zext i32 %1972 to i64
  %1974 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %1973
  %1975 = load i8, ptr %1974, align 1, !tbaa !17
  %1976 = icmp eq i8 %1975, 9
  br i1 %1976, label %1977, label %1989

1977:                                             ; preds = %1970, %1951
  %1978 = phi ptr [ %1971, %1970 ], [ %1952, %1951 ]
  %1979 = load i64, ptr %1978, align 8
  %1980 = and i64 %1979, 65535
  %1981 = icmp eq i64 %1980, 14
  br i1 %1981, label %1982, label %1984

1982:                                             ; preds = %1977
  %1983 = tail call i32 @vector_type_mode(ptr noundef nonnull %1978) #24
  br label %2006

1984:                                             ; preds = %1977
  %1985 = getelementptr inbounds %struct.tree_type, ptr %1978, i64 0, i32 6
  %1986 = load i32, ptr %1985, align 4
  %1987 = lshr i32 %1986, 16
  %1988 = and i32 %1987, 255
  br label %2006

1989:                                             ; preds = %1970
  %1990 = load i64, ptr %1971, align 8
  %1991 = and i64 %1990, 65535
  %1992 = icmp eq i64 %1991, 14
  br i1 %1992, label %1993, label %1995

1993:                                             ; preds = %1989
  %1994 = tail call i32 @vector_type_mode(ptr noundef nonnull %1971) #24
  br label %2000

1995:                                             ; preds = %1989
  %1996 = getelementptr inbounds %struct.tree_type, ptr %1971, i64 0, i32 6
  %1997 = load i32, ptr %1996, align 4
  %1998 = lshr i32 %1997, 16
  %1999 = and i32 %1998, 255
  br label %2000

2000:                                             ; preds = %1995, %1993
  %2001 = phi i32 [ %1994, %1993 ], [ %1999, %1995 ]
  %2002 = zext i32 %2001 to i64
  %2003 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2002
  %2004 = load i8, ptr %2003, align 1, !tbaa !17
  %2005 = zext i8 %2004 to i32
  br label %2006

2006:                                             ; preds = %2000, %1984, %1982, %1936, %1920, %1918
  %2007 = phi i32 [ %1941, %1936 ], [ %1919, %1918 ], [ %1924, %1920 ], [ %2005, %2000 ], [ %1983, %1982 ], [ %1988, %1984 ]
  %2008 = add i32 %2007, -38
  %2009 = zext i32 %2008 to i64
  %2010 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2009
  %2011 = load ptr, ptr %2010, align 8, !tbaa !6
  %2012 = getelementptr inbounds %struct.real_format, ptr %2011, i64 0, i32 11
  %2013 = load i8, ptr %2012, align 2, !tbaa !36
  %2014 = icmp eq i8 %2013, 0
  %2015 = load i32, ptr @flag_finite_math_only, align 4
  %2016 = icmp ne i32 %2015, 0
  %2017 = select i1 %2014, i1 true, i1 %2016
  br i1 %2017, label %2018, label %2326

2018:                                             ; preds = %2006, %1792
  %2019 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %15)
  %2020 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2019)
  br label %2418

2021:                                             ; preds = %1058
  %2022 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %2023 = load ptr, ptr %2022, align 8, !tbaa !17
  %2024 = load i64, ptr %2023, align 8
  %2025 = and i64 %2024, 65535
  %2026 = icmp eq i64 %2025, 14
  br i1 %2026, label %2027, label %2030

2027:                                             ; preds = %2021
  %2028 = tail call i32 @vector_type_mode(ptr noundef nonnull %2023) #24
  %2029 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2035

2030:                                             ; preds = %2021
  %2031 = getelementptr inbounds %struct.tree_type, ptr %2023, i64 0, i32 6
  %2032 = load i32, ptr %2031, align 4
  %2033 = lshr i32 %2032, 16
  %2034 = and i32 %2033, 255
  br label %2035

2035:                                             ; preds = %2030, %2027
  %2036 = phi ptr [ %2029, %2027 ], [ %2023, %2030 ]
  %2037 = phi i32 [ %2028, %2027 ], [ %2034, %2030 ]
  %2038 = zext i32 %2037 to i64
  %2039 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2038
  %2040 = load i8, ptr %2039, align 1, !tbaa !17
  %2041 = icmp eq i8 %2040, 8
  br i1 %2041, label %2099, label %2042

2042:                                             ; preds = %2035
  %2043 = load i64, ptr %2036, align 8
  %2044 = and i64 %2043, 65535
  %2045 = icmp eq i64 %2044, 14
  br i1 %2045, label %2046, label %2049

2046:                                             ; preds = %2042
  %2047 = tail call i32 @vector_type_mode(ptr noundef nonnull %2036) #24
  %2048 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2054

2049:                                             ; preds = %2042
  %2050 = getelementptr inbounds %struct.tree_type, ptr %2036, i64 0, i32 6
  %2051 = load i32, ptr %2050, align 4
  %2052 = lshr i32 %2051, 16
  %2053 = and i32 %2052, 255
  br label %2054

2054:                                             ; preds = %2049, %2046
  %2055 = phi ptr [ %2048, %2046 ], [ %2036, %2049 ]
  %2056 = phi i32 [ %2047, %2046 ], [ %2053, %2049 ]
  %2057 = zext i32 %2056 to i64
  %2058 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2057
  %2059 = load i8, ptr %2058, align 1, !tbaa !17
  %2060 = icmp eq i8 %2059, 9
  br i1 %2060, label %2099, label %2061

2061:                                             ; preds = %2054
  %2062 = load i64, ptr %2055, align 8
  %2063 = and i64 %2062, 65535
  %2064 = icmp eq i64 %2063, 14
  br i1 %2064, label %2065, label %2068

2065:                                             ; preds = %2061
  %2066 = tail call i32 @vector_type_mode(ptr noundef nonnull %2055) #24
  %2067 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2073

2068:                                             ; preds = %2061
  %2069 = getelementptr inbounds %struct.tree_type, ptr %2055, i64 0, i32 6
  %2070 = load i32, ptr %2069, align 4
  %2071 = lshr i32 %2070, 16
  %2072 = and i32 %2071, 255
  br label %2073

2073:                                             ; preds = %2068, %2065
  %2074 = phi ptr [ %2067, %2065 ], [ %2055, %2068 ]
  %2075 = phi i32 [ %2066, %2065 ], [ %2072, %2068 ]
  %2076 = zext i32 %2075 to i64
  %2077 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2076
  %2078 = load i8, ptr %2077, align 1, !tbaa !17
  %2079 = icmp eq i8 %2078, 11
  br i1 %2079, label %2099, label %2080

2080:                                             ; preds = %2073
  %2081 = load i64, ptr %2074, align 8
  %2082 = and i64 %2081, 65535
  %2083 = icmp eq i64 %2082, 14
  br i1 %2083, label %2084, label %2086

2084:                                             ; preds = %2080
  %2085 = tail call i32 @vector_type_mode(ptr noundef nonnull %2074) #24
  br label %2091

2086:                                             ; preds = %2080
  %2087 = getelementptr inbounds %struct.tree_type, ptr %2074, i64 0, i32 6
  %2088 = load i32, ptr %2087, align 4
  %2089 = lshr i32 %2088, 16
  %2090 = and i32 %2089, 255
  br label %2091

2091:                                             ; preds = %2086, %2084
  %2092 = phi i32 [ %2085, %2084 ], [ %2090, %2086 ]
  %2093 = zext i32 %2092 to i64
  %2094 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2093
  %2095 = load i8, ptr %2094, align 1, !tbaa !17
  %2096 = icmp eq i8 %2095, 17
  br i1 %2096, label %2097, label %2317

2097:                                             ; preds = %2091
  %2098 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2099

2099:                                             ; preds = %2097, %2073, %2054, %2035
  %2100 = phi ptr [ %2098, %2097 ], [ %2074, %2073 ], [ %2055, %2054 ], [ %2036, %2035 ]
  %2101 = load i64, ptr %2100, align 8
  %2102 = and i64 %2101, 65535
  %2103 = icmp eq i64 %2102, 14
  br i1 %2103, label %2104, label %2107

2104:                                             ; preds = %2099
  %2105 = tail call i32 @vector_type_mode(ptr noundef nonnull %2100) #24
  %2106 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2112

2107:                                             ; preds = %2099
  %2108 = getelementptr inbounds %struct.tree_type, ptr %2100, i64 0, i32 6
  %2109 = load i32, ptr %2108, align 4
  %2110 = lshr i32 %2109, 16
  %2111 = and i32 %2110, 255
  br label %2112

2112:                                             ; preds = %2107, %2104
  %2113 = phi ptr [ %2106, %2104 ], [ %2100, %2107 ]
  %2114 = phi i32 [ %2105, %2104 ], [ %2111, %2107 ]
  %2115 = zext i32 %2114 to i64
  %2116 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2115
  %2117 = load i8, ptr %2116, align 1, !tbaa !17
  %2118 = icmp eq i8 %2117, 8
  br i1 %2118, label %2138, label %2119

2119:                                             ; preds = %2112
  %2120 = load i64, ptr %2113, align 8
  %2121 = and i64 %2120, 65535
  %2122 = icmp eq i64 %2121, 14
  br i1 %2122, label %2123, label %2126

2123:                                             ; preds = %2119
  %2124 = tail call i32 @vector_type_mode(ptr noundef nonnull %2113) #24
  %2125 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2131

2126:                                             ; preds = %2119
  %2127 = getelementptr inbounds %struct.tree_type, ptr %2113, i64 0, i32 6
  %2128 = load i32, ptr %2127, align 4
  %2129 = lshr i32 %2128, 16
  %2130 = and i32 %2129, 255
  br label %2131

2131:                                             ; preds = %2126, %2123
  %2132 = phi ptr [ %2125, %2123 ], [ %2113, %2126 ]
  %2133 = phi i32 [ %2124, %2123 ], [ %2130, %2126 ]
  %2134 = zext i32 %2133 to i64
  %2135 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2134
  %2136 = load i8, ptr %2135, align 1, !tbaa !17
  %2137 = icmp eq i8 %2136, 9
  br i1 %2137, label %2138, label %2150

2138:                                             ; preds = %2131, %2112
  %2139 = phi ptr [ %2132, %2131 ], [ %2113, %2112 ]
  %2140 = load i64, ptr %2139, align 8
  %2141 = and i64 %2140, 65535
  %2142 = icmp eq i64 %2141, 14
  br i1 %2142, label %2143, label %2145

2143:                                             ; preds = %2138
  %2144 = tail call i32 @vector_type_mode(ptr noundef nonnull %2139) #24
  br label %2167

2145:                                             ; preds = %2138
  %2146 = getelementptr inbounds %struct.tree_type, ptr %2139, i64 0, i32 6
  %2147 = load i32, ptr %2146, align 4
  %2148 = lshr i32 %2147, 16
  %2149 = and i32 %2148, 255
  br label %2167

2150:                                             ; preds = %2131
  %2151 = load i64, ptr %2132, align 8
  %2152 = and i64 %2151, 65535
  %2153 = icmp eq i64 %2152, 14
  br i1 %2153, label %2154, label %2156

2154:                                             ; preds = %2150
  %2155 = tail call i32 @vector_type_mode(ptr noundef nonnull %2132) #24
  br label %2161

2156:                                             ; preds = %2150
  %2157 = getelementptr inbounds %struct.tree_type, ptr %2132, i64 0, i32 6
  %2158 = load i32, ptr %2157, align 4
  %2159 = lshr i32 %2158, 16
  %2160 = and i32 %2159, 255
  br label %2161

2161:                                             ; preds = %2156, %2154
  %2162 = phi i32 [ %2155, %2154 ], [ %2160, %2156 ]
  %2163 = zext i32 %2162 to i64
  %2164 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2163
  %2165 = load i8, ptr %2164, align 1, !tbaa !17
  %2166 = zext i8 %2165 to i32
  br label %2167

2167:                                             ; preds = %2143, %2145, %2161
  %2168 = phi i32 [ %2166, %2161 ], [ %2144, %2143 ], [ %2149, %2145 ]
  %2169 = zext i32 %2168 to i64
  %2170 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2169
  %2171 = load i8, ptr %2170, align 1, !tbaa !17
  %2172 = icmp eq i8 %2171, 9
  %2173 = load ptr, ptr %2022, align 8, !tbaa !17
  %2174 = load i64, ptr %2173, align 8
  %2175 = and i64 %2174, 65535
  %2176 = icmp eq i64 %2175, 14
  br i1 %2172, label %2177, label %2241

2177:                                             ; preds = %2167
  br i1 %2176, label %2178, label %2181

2178:                                             ; preds = %2177
  %2179 = tail call i32 @vector_type_mode(ptr noundef nonnull %2173) #24
  %2180 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2186

2181:                                             ; preds = %2177
  %2182 = getelementptr inbounds %struct.tree_type, ptr %2173, i64 0, i32 6
  %2183 = load i32, ptr %2182, align 4
  %2184 = lshr i32 %2183, 16
  %2185 = and i32 %2184, 255
  br label %2186

2186:                                             ; preds = %2181, %2178
  %2187 = phi ptr [ %2180, %2178 ], [ %2173, %2181 ]
  %2188 = phi i32 [ %2179, %2178 ], [ %2185, %2181 ]
  %2189 = zext i32 %2188 to i64
  %2190 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2189
  %2191 = load i8, ptr %2190, align 1, !tbaa !17
  %2192 = icmp eq i8 %2191, 8
  br i1 %2192, label %2212, label %2193

2193:                                             ; preds = %2186
  %2194 = load i64, ptr %2187, align 8
  %2195 = and i64 %2194, 65535
  %2196 = icmp eq i64 %2195, 14
  br i1 %2196, label %2197, label %2200

2197:                                             ; preds = %2193
  %2198 = tail call i32 @vector_type_mode(ptr noundef nonnull %2187) #24
  %2199 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2205

2200:                                             ; preds = %2193
  %2201 = getelementptr inbounds %struct.tree_type, ptr %2187, i64 0, i32 6
  %2202 = load i32, ptr %2201, align 4
  %2203 = lshr i32 %2202, 16
  %2204 = and i32 %2203, 255
  br label %2205

2205:                                             ; preds = %2200, %2197
  %2206 = phi ptr [ %2199, %2197 ], [ %2187, %2200 ]
  %2207 = phi i32 [ %2198, %2197 ], [ %2204, %2200 ]
  %2208 = zext i32 %2207 to i64
  %2209 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2208
  %2210 = load i8, ptr %2209, align 1, !tbaa !17
  %2211 = icmp eq i8 %2210, 9
  br i1 %2211, label %2212, label %2224

2212:                                             ; preds = %2205, %2186
  %2213 = phi ptr [ %2206, %2205 ], [ %2187, %2186 ]
  %2214 = load i64, ptr %2213, align 8
  %2215 = and i64 %2214, 65535
  %2216 = icmp eq i64 %2215, 14
  br i1 %2216, label %2217, label %2219

2217:                                             ; preds = %2212
  %2218 = tail call i32 @vector_type_mode(ptr noundef nonnull %2213) #24
  br label %2305

2219:                                             ; preds = %2212
  %2220 = getelementptr inbounds %struct.tree_type, ptr %2213, i64 0, i32 6
  %2221 = load i32, ptr %2220, align 4
  %2222 = lshr i32 %2221, 16
  %2223 = and i32 %2222, 255
  br label %2305

2224:                                             ; preds = %2205
  %2225 = load i64, ptr %2206, align 8
  %2226 = and i64 %2225, 65535
  %2227 = icmp eq i64 %2226, 14
  br i1 %2227, label %2228, label %2230

2228:                                             ; preds = %2224
  %2229 = tail call i32 @vector_type_mode(ptr noundef nonnull %2206) #24
  br label %2235

2230:                                             ; preds = %2224
  %2231 = getelementptr inbounds %struct.tree_type, ptr %2206, i64 0, i32 6
  %2232 = load i32, ptr %2231, align 4
  %2233 = lshr i32 %2232, 16
  %2234 = and i32 %2233, 255
  br label %2235

2235:                                             ; preds = %2230, %2228
  %2236 = phi i32 [ %2229, %2228 ], [ %2234, %2230 ]
  %2237 = zext i32 %2236 to i64
  %2238 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2237
  %2239 = load i8, ptr %2238, align 1, !tbaa !17
  %2240 = zext i8 %2239 to i32
  br label %2305

2241:                                             ; preds = %2167
  br i1 %2176, label %2242, label %2245

2242:                                             ; preds = %2241
  %2243 = tail call i32 @vector_type_mode(ptr noundef nonnull %2173) #24
  %2244 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2250

2245:                                             ; preds = %2241
  %2246 = getelementptr inbounds %struct.tree_type, ptr %2173, i64 0, i32 6
  %2247 = load i32, ptr %2246, align 4
  %2248 = lshr i32 %2247, 16
  %2249 = and i32 %2248, 255
  br label %2250

2250:                                             ; preds = %2245, %2242
  %2251 = phi ptr [ %2244, %2242 ], [ %2173, %2245 ]
  %2252 = phi i32 [ %2243, %2242 ], [ %2249, %2245 ]
  %2253 = zext i32 %2252 to i64
  %2254 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2253
  %2255 = load i8, ptr %2254, align 1, !tbaa !17
  %2256 = icmp eq i8 %2255, 8
  br i1 %2256, label %2276, label %2257

2257:                                             ; preds = %2250
  %2258 = load i64, ptr %2251, align 8
  %2259 = and i64 %2258, 65535
  %2260 = icmp eq i64 %2259, 14
  br i1 %2260, label %2261, label %2264

2261:                                             ; preds = %2257
  %2262 = tail call i32 @vector_type_mode(ptr noundef nonnull %2251) #24
  %2263 = load ptr, ptr %2022, align 8, !tbaa !17
  br label %2269

2264:                                             ; preds = %2257
  %2265 = getelementptr inbounds %struct.tree_type, ptr %2251, i64 0, i32 6
  %2266 = load i32, ptr %2265, align 4
  %2267 = lshr i32 %2266, 16
  %2268 = and i32 %2267, 255
  br label %2269

2269:                                             ; preds = %2264, %2261
  %2270 = phi ptr [ %2263, %2261 ], [ %2251, %2264 ]
  %2271 = phi i32 [ %2262, %2261 ], [ %2268, %2264 ]
  %2272 = zext i32 %2271 to i64
  %2273 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %2272
  %2274 = load i8, ptr %2273, align 1, !tbaa !17
  %2275 = icmp eq i8 %2274, 9
  br i1 %2275, label %2276, label %2288

2276:                                             ; preds = %2269, %2250
  %2277 = phi ptr [ %2270, %2269 ], [ %2251, %2250 ]
  %2278 = load i64, ptr %2277, align 8
  %2279 = and i64 %2278, 65535
  %2280 = icmp eq i64 %2279, 14
  br i1 %2280, label %2281, label %2283

2281:                                             ; preds = %2276
  %2282 = tail call i32 @vector_type_mode(ptr noundef nonnull %2277) #24
  br label %2305

2283:                                             ; preds = %2276
  %2284 = getelementptr inbounds %struct.tree_type, ptr %2277, i64 0, i32 6
  %2285 = load i32, ptr %2284, align 4
  %2286 = lshr i32 %2285, 16
  %2287 = and i32 %2286, 255
  br label %2305

2288:                                             ; preds = %2269
  %2289 = load i64, ptr %2270, align 8
  %2290 = and i64 %2289, 65535
  %2291 = icmp eq i64 %2290, 14
  br i1 %2291, label %2292, label %2294

2292:                                             ; preds = %2288
  %2293 = tail call i32 @vector_type_mode(ptr noundef nonnull %2270) #24
  br label %2299

2294:                                             ; preds = %2288
  %2295 = getelementptr inbounds %struct.tree_type, ptr %2270, i64 0, i32 6
  %2296 = load i32, ptr %2295, align 4
  %2297 = lshr i32 %2296, 16
  %2298 = and i32 %2297, 255
  br label %2299

2299:                                             ; preds = %2294, %2292
  %2300 = phi i32 [ %2293, %2292 ], [ %2298, %2294 ]
  %2301 = zext i32 %2300 to i64
  %2302 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %2301
  %2303 = load i8, ptr %2302, align 1, !tbaa !17
  %2304 = zext i8 %2303 to i32
  br label %2305

2305:                                             ; preds = %2299, %2283, %2281, %2235, %2219, %2217
  %2306 = phi i32 [ %2240, %2235 ], [ %2218, %2217 ], [ %2223, %2219 ], [ %2304, %2299 ], [ %2282, %2281 ], [ %2287, %2283 ]
  %2307 = add i32 %2306, -38
  %2308 = zext i32 %2307 to i64
  %2309 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %2308
  %2310 = load ptr, ptr %2309, align 8, !tbaa !6
  %2311 = getelementptr inbounds %struct.real_format, ptr %2310, i64 0, i32 11
  %2312 = load i8, ptr %2311, align 2, !tbaa !36
  %2313 = icmp eq i8 %2312, 0
  %2314 = load i32, ptr @flag_finite_math_only, align 4
  %2315 = icmp ne i32 %2314, 0
  %2316 = select i1 %2313, i1 true, i1 %2315
  br i1 %2316, label %2317, label %2326

2317:                                             ; preds = %2305, %2091
  %2318 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %14)
  %2319 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2318)
  br label %2418

2320:                                             ; preds = %1058
  %2321 = and i64 %6, 65535
  %2322 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %2321
  %2323 = load i32, ptr %2322, align 4, !tbaa !17
  %2324 = icmp eq i32 %2323, 5
  br i1 %2324, label %2326, label %2325

2325:                                             ; preds = %2320
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 5524, ptr noundef nonnull @.str.1) #24
  br label %2326

2326:                                             ; preds = %2325, %2320, %2305, %2006, %1683, %1360, %1025, %1054, %1037
  %2327 = load i64, ptr %1, align 8
  %2328 = trunc i64 %2327 to i32
  %2329 = and i32 %2328, 65535
  %2330 = add nsw i32 %2329, -6
  %2331 = icmp ult i32 %2330, 3
  br i1 %2331, label %2332, label %2418

2332:                                             ; preds = %2326
  %2333 = load i64, ptr %11, align 8
  %2334 = and i64 %2333, 65535
  %2335 = icmp eq i64 %2334, 23
  br i1 %2335, label %2336, label %2418

2336:                                             ; preds = %2332
  %2337 = load i64, ptr %15, align 8
  %2338 = and i64 %2337, 65535
  %2339 = icmp eq i64 %2338, 23
  br i1 %2339, label %2340, label %2418

2340:                                             ; preds = %2336
  %2341 = trunc i64 %6 to i16
  switch i16 %2341, label %2417 [
    i16 101, label %2342
    i16 97, label %2349
    i16 98, label %2366
    i16 99, label %2383
    i16 100, label %2400
    i16 102, label %2418
  ]

2342:                                             ; preds = %2340
  %2343 = load i64, ptr %14, align 8
  %2344 = and i64 %2343, 65535
  %2345 = icmp eq i64 %2344, 23
  br i1 %2345, label %2418, label %2346

2346:                                             ; preds = %2342
  %2347 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef nonnull %11)
  %2348 = tail call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 56, ptr noundef nonnull %1, ptr noundef nonnull %2, ptr noundef %2347, ptr noundef nonnull %15)
  br label %2418

2349:                                             ; preds = %2340
  %2350 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 14
  %2351 = load ptr, ptr %2350, align 8, !tbaa !17
  %2352 = tail call i32 @operand_equal_p(ptr noundef nonnull %15, ptr noundef %2351, i32 noundef 1)
  %2353 = icmp eq i32 %2352, 0
  br i1 %2353, label %2354, label %2418

2354:                                             ; preds = %2349
  %2355 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 1) #24
  %2356 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef nonnull %15, ptr noundef %2355)
  %2357 = tail call i32 @operand_equal_p(ptr noundef nonnull %11, ptr noundef %2356, i32 noundef 1)
  %2358 = icmp eq i32 %2357, 0
  br i1 %2358, label %2418, label %2359

2359:                                             ; preds = %2354
  %2360 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %2361 = load ptr, ptr %2360, align 8, !tbaa !17
  %2362 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2361, ptr noundef nonnull %15)
  %2363 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 80, ptr noundef %2361, ptr noundef %9, ptr noundef %2362)
  %2364 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2363)
  %2365 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2364)
  br label %2418

2366:                                             ; preds = %2340
  %2367 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 13
  %2368 = load ptr, ptr %2367, align 8, !tbaa !17
  %2369 = tail call i32 @operand_equal_p(ptr noundef nonnull %15, ptr noundef %2368, i32 noundef 1)
  %2370 = icmp eq i32 %2369, 0
  br i1 %2370, label %2371, label %2418

2371:                                             ; preds = %2366
  %2372 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 1) #24
  %2373 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef nonnull %15, ptr noundef %2372)
  %2374 = tail call i32 @operand_equal_p(ptr noundef nonnull %11, ptr noundef %2373, i32 noundef 1)
  %2375 = icmp eq i32 %2374, 0
  br i1 %2375, label %2418, label %2376

2376:                                             ; preds = %2371
  %2377 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %2378 = load ptr, ptr %2377, align 8, !tbaa !17
  %2379 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2378, ptr noundef nonnull %15)
  %2380 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 80, ptr noundef %2378, ptr noundef %9, ptr noundef %2379)
  %2381 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2380)
  %2382 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2381)
  br label %2418

2383:                                             ; preds = %2340
  %2384 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 13
  %2385 = load ptr, ptr %2384, align 8, !tbaa !17
  %2386 = tail call i32 @operand_equal_p(ptr noundef nonnull %15, ptr noundef %2385, i32 noundef 1)
  %2387 = icmp eq i32 %2386, 0
  br i1 %2387, label %2388, label %2418

2388:                                             ; preds = %2383
  %2389 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 1) #24
  %2390 = tail call fastcc ptr @const_binop(i32 noundef 64, ptr noundef nonnull %15, ptr noundef %2389)
  %2391 = tail call i32 @operand_equal_p(ptr noundef nonnull %11, ptr noundef %2390, i32 noundef 1)
  %2392 = icmp eq i32 %2391, 0
  br i1 %2392, label %2418, label %2393

2393:                                             ; preds = %2388
  %2394 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %2395 = load ptr, ptr %2394, align 8, !tbaa !17
  %2396 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2395, ptr noundef nonnull %15)
  %2397 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 81, ptr noundef %2395, ptr noundef %9, ptr noundef %2396)
  %2398 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2397)
  %2399 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2398)
  br label %2418

2400:                                             ; preds = %2340
  %2401 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 14
  %2402 = load ptr, ptr %2401, align 8, !tbaa !17
  %2403 = tail call i32 @operand_equal_p(ptr noundef nonnull %15, ptr noundef %2402, i32 noundef 1)
  %2404 = icmp eq i32 %2403, 0
  br i1 %2404, label %2405, label %2418

2405:                                             ; preds = %2400
  %2406 = tail call ptr @build_int_cst(ptr noundef nonnull %1, i64 noundef 1) #24
  %2407 = tail call fastcc ptr @const_binop(i32 noundef 63, ptr noundef nonnull %15, ptr noundef %2406)
  %2408 = tail call i32 @operand_equal_p(ptr noundef nonnull %11, ptr noundef %2407, i32 noundef 1)
  %2409 = icmp eq i32 %2408, 0
  br i1 %2409, label %2418, label %2410

2410:                                             ; preds = %2405
  %2411 = getelementptr inbounds %struct.tree_common, ptr %9, i64 0, i32 2
  %2412 = load ptr, ptr %2411, align 8, !tbaa !17
  %2413 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef %2412, ptr noundef nonnull %15)
  %2414 = tail call ptr @fold_build2_stat_loc(i32 noundef %0, i32 noundef 81, ptr noundef %2412, ptr noundef %9, ptr noundef %2413)
  %2415 = tail call ptr @fold_convert_loc(i32 noundef %0, ptr noundef nonnull %1, ptr noundef %2414)
  %2416 = tail call fastcc ptr @pedantic_non_lvalue_loc(i32 noundef %0, ptr noundef %2415)
  br label %2418

2417:                                             ; preds = %2340
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 5618, ptr noundef nonnull @.str.1) #24
  br label %2418

2418:                                             ; preds = %1721, %1716, %1712, %1709, %1398, %1393, %1389, %1386, %1070, %1073, %2018, %2317, %754, %749, %745, %742, %441, %415, %392, %387, %383, %380, %2326, %2332, %2336, %2400, %2405, %2383, %2388, %2366, %2371, %2349, %2354, %2342, %2417, %2340, %2410, %2393, %2376, %2359, %2346, %755, %350, %345
  %2419 = phi ptr [ %2416, %2410 ], [ %2399, %2393 ], [ %2382, %2376 ], [ %2365, %2359 ], [ %2348, %2346 ], [ %756, %755 ], [ %352, %350 ], [ %349, %345 ], [ null, %2326 ], [ null, %2340 ], [ null, %2417 ], [ null, %2342 ], [ null, %2354 ], [ null, %2349 ], [ null, %2371 ], [ null, %2366 ], [ null, %2388 ], [ null, %2383 ], [ null, %2405 ], [ null, %2400 ], [ null, %2336 ], [ null, %2332 ], [ %377, %392 ], [ %390, %387 ], [ %377, %380 ], [ %377, %383 ], [ %443, %441 ], [ null, %415 ], [ %739, %754 ], [ %752, %749 ], [ %739, %742 ], [ %739, %745 ], [ %1706, %1712 ], [ %1706, %1709 ], [ %1719, %1716 ], [ %1706, %1721 ], [ %1383, %1389 ], [ %1383, %1386 ], [ %1396, %1393 ], [ %1383, %1398 ], [ %1072, %1070 ], [ %1075, %1073 ], [ %2020, %2018 ], [ %2319, %2317 ]
  ret ptr %2419
}

declare ptr @walk_tree_without_duplicates_1(ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable
define internal ptr @contains_label_1(ptr nocapture noundef readonly %0, ptr nocapture noundef writeonly %1, ptr nocapture readnone %2) #20 {
  %4 = load ptr, ptr %0, align 8, !tbaa !6
  %5 = load i64, ptr %4, align 8
  %6 = trunc i64 %5 to i16
  switch i16 %6, label %8 [
    i16 133, label %9
    i16 134, label %7
  ]

7:                                                ; preds = %3
  store i32 0, ptr %1, align 4, !tbaa !21
  br label %8

8:                                                ; preds = %3, %7
  br label %9

9:                                                ; preds = %3, %8
  %10 = phi ptr [ null, %8 ], [ %4, %3 ]
  ret ptr %10
}

declare ptr @get_narrower(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @signed_or_unsigned_type_for(i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
declare i32 @strcmp(ptr nocapture noundef, ptr nocapture noundef) local_unnamed_addr #21

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold(ptr noundef %0) local_unnamed_addr #10 {
  br label %2

2:                                                ; preds = %145, %1
  %3 = phi ptr [ %0, %1 ], [ %147, %145 ]
  %4 = load i64, ptr %3, align 8
  %5 = and i64 %4, 65535
  %6 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %5
  %7 = load i32, ptr %6, align 4, !tbaa !17
  %8 = add i32 %7, -4
  %9 = icmp ult i32 %8, 7
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 1
  %12 = load i32, ptr %11, align 8, !tbaa !17
  br label %13

13:                                               ; preds = %2, %10
  %14 = phi i32 [ %12, %10 ], [ 0, %2 ]
  switch i32 %7, label %21 [
    i32 1, label %148
    i32 9, label %15
  ]

15:                                               ; preds = %13
  %16 = icmp eq i64 %5, 59
  br i1 %16, label %17, label %148

17:                                               ; preds = %15
  %18 = tail call ptr @fold_call_expr(i32 noundef %14, ptr noundef nonnull %3, i8 noundef zeroext 0) #24
  %19 = icmp eq ptr %18, null
  %20 = select i1 %19, ptr %3, ptr %18
  br label %148

21:                                               ; preds = %13
  br i1 %9, label %22, label %61

22:                                               ; preds = %21
  %23 = getelementptr inbounds [0 x i8], ptr @tree_code_length, i64 0, i64 %5
  %24 = load i8, ptr %23, align 1, !tbaa !17
  switch i8 %24, label %61 [
    i8 1, label %25
    i8 2, label %35
    i8 3, label %47
  ]

25:                                               ; preds = %22
  %26 = trunc i64 %4 to i32
  %27 = and i32 %26, 65535
  %28 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = tail call ptr @fold_unary_loc(i32 noundef %14, i32 noundef %27, ptr noundef %29, ptr noundef %31)
  %33 = icmp eq ptr %32, null
  %34 = select i1 %33, ptr %3, ptr %32
  br label %148

35:                                               ; preds = %22
  %36 = trunc i64 %4 to i32
  %37 = and i32 %36, 65535
  %38 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %39 = load ptr, ptr %38, align 8, !tbaa !17
  %40 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %41 = load ptr, ptr %40, align 8, !tbaa !17
  %42 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = tail call ptr @fold_binary_loc(i32 noundef %14, i32 noundef %37, ptr noundef %39, ptr noundef %41, ptr noundef %43)
  %45 = icmp eq ptr %44, null
  %46 = select i1 %45, ptr %3, ptr %44
  br label %148

47:                                               ; preds = %22
  %48 = trunc i64 %4 to i32
  %49 = and i32 %48, 65535
  %50 = getelementptr inbounds %struct.tree_common, ptr %3, i64 0, i32 2
  %51 = load ptr, ptr %50, align 8, !tbaa !17
  %52 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %53 = load ptr, ptr %52, align 8, !tbaa !17
  %54 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %55 = load ptr, ptr %54, align 8, !tbaa !17
  %56 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1, i32 0, i32 1
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = tail call ptr @fold_ternary_loc(i32 noundef %14, i32 noundef %49, ptr noundef %51, ptr noundef %53, ptr noundef %55, ptr noundef %57)
  %59 = icmp eq ptr %58, null
  %60 = select i1 %59, ptr %3, ptr %58
  br label %148

61:                                               ; preds = %22, %21
  %62 = trunc i64 %4 to i16
  switch i16 %62, label %148 [
    i16 45, label %63
    i16 33, label %145
  ]

63:                                               ; preds = %61
  %64 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %65 = load ptr, ptr %64, align 8, !tbaa !17
  %66 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 1
  %67 = load ptr, ptr %66, align 8, !tbaa !17
  %68 = load i64, ptr %67, align 8
  %69 = and i64 %68, 65535
  %70 = icmp eq i64 %69, 23
  br i1 %70, label %71, label %148

71:                                               ; preds = %63
  %72 = load i64, ptr %65, align 8
  %73 = and i64 %72, 65535
  %74 = icmp eq i64 %73, 51
  br i1 %74, label %75, label %148

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.tree_common, ptr %65, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !17
  %78 = tail call zeroext i8 @type_contains_placeholder_p(ptr noundef %77) #24
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %148

80:                                               ; preds = %75
  %81 = getelementptr inbounds %struct.tree_constructor, ptr %65, i64 0, i32 1
  %82 = load ptr, ptr %81, align 8, !tbaa !17
  %83 = icmp eq ptr %82, null
  br i1 %83, label %148, label %84

84:                                               ; preds = %80
  %85 = load i32, ptr %82, align 8, !tbaa !82
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %148, label %87

87:                                               ; preds = %84
  %88 = zext i32 %85 to i64
  br label %89

89:                                               ; preds = %87, %138
  %90 = phi i64 [ %140, %138 ], [ 0, %87 ]
  %91 = phi i64 [ %139, %138 ], [ %88, %87 ]
  %92 = add i64 %90, %91
  %93 = lshr i64 %92, 1
  %94 = and i64 %93, 4294967295
  %95 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %82, i64 0, i32 2, i64 %94
  %96 = load ptr, ptr %95, align 8, !tbaa !84
  %97 = load i64, ptr %96, align 8
  %98 = and i64 %97, 65535
  %99 = icmp eq i64 %98, 23
  br i1 %99, label %100, label %107

100:                                              ; preds = %89
  %101 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %96, ptr noundef nonnull %67) #24
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  %104 = load i64, ptr %96, align 8
  br label %107

105:                                              ; preds = %100
  %106 = add nuw i64 %93, 1
  br label %138

107:                                              ; preds = %103, %89
  %108 = phi i64 [ %104, %103 ], [ %97, %89 ]
  %109 = and i64 %108, 65535
  %110 = icmp eq i64 %109, 23
  br i1 %110, label %111, label %116

111:                                              ; preds = %107
  %112 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %67, ptr noundef nonnull %96) #24
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %138

114:                                              ; preds = %111
  %115 = load i64, ptr %96, align 8
  br label %116

116:                                              ; preds = %114, %107
  %117 = phi i64 [ %115, %114 ], [ %108, %107 ]
  %118 = and i64 %117, 65535
  %119 = icmp eq i64 %118, 111
  br i1 %119, label %120, label %129

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.tree_exp, ptr %96, i64 1
  %122 = load ptr, ptr %121, align 8, !tbaa !17
  %123 = tail call i32 @tree_int_cst_lt(ptr noundef %122, ptr noundef nonnull %67) #24
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %120
  %126 = load i64, ptr %96, align 8
  br label %129

127:                                              ; preds = %120
  %128 = add nuw i64 %93, 1
  br label %138

129:                                              ; preds = %125, %116
  %130 = phi i64 [ %126, %125 ], [ %117, %116 ]
  %131 = and i64 %130, 65535
  %132 = icmp eq i64 %131, 111
  br i1 %132, label %133, label %142

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.tree_exp, ptr %96, i64 0, i32 3
  %135 = load ptr, ptr %134, align 8, !tbaa !17
  %136 = tail call i32 @tree_int_cst_lt(ptr noundef nonnull %67, ptr noundef %135) #24
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %142, label %138

138:                                              ; preds = %105, %127, %111, %133
  %139 = phi i64 [ %91, %105 ], [ %91, %127 ], [ %93, %111 ], [ %93, %133 ]
  %140 = phi i64 [ %106, %105 ], [ %128, %127 ], [ %90, %111 ], [ %90, %133 ]
  %141 = icmp eq i64 %140, %139
  br i1 %141, label %148, label %89, !llvm.loop !91

142:                                              ; preds = %129, %133
  %143 = getelementptr inbounds %struct.VEC_constructor_elt_base, ptr %82, i64 0, i32 2, i64 %94, i32 1
  %144 = load ptr, ptr %143, align 8, !tbaa !87
  br label %148

145:                                              ; preds = %61
  %146 = getelementptr inbounds %struct.tree_decl_common, ptr %3, i64 0, i32 5
  %147 = load ptr, ptr %146, align 8, !tbaa !17
  br label %2

148:                                              ; preds = %61, %13, %138, %80, %84, %25, %35, %47, %63, %71, %75, %142, %15, %17
  %149 = phi ptr [ %20, %17 ], [ %3, %15 ], [ %144, %142 ], [ %3, %75 ], [ %3, %71 ], [ %3, %63 ], [ %34, %25 ], [ %46, %35 ], [ %60, %47 ], [ %3, %84 ], [ %3, %80 ], [ %3, %138 ], [ %3, %13 ], [ %3, %61 ]
  ret ptr %149
}

declare ptr @fold_call_expr(i32 noundef, ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build_call_array_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = tail call ptr @fold_builtin_call_array(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) #24
  ret ptr %6
}

declare ptr @fold_builtin_call_array(i32 noundef, ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build1_initializer_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %6 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %7 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %8 = load i32, ptr @flag_trapv, align 4, !tbaa !21
  %9 = load i32, ptr @folding_initializer, align 4, !tbaa !21
  store i32 0, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 0, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 0, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 0, ptr @flag_trapv, align 4, !tbaa !21
  store i32 1, ptr @folding_initializer, align 4, !tbaa !21
  %10 = tail call ptr @fold_unary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3) #25
  %11 = icmp eq ptr %10, null
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = tail call ptr @build1_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3) #24
  %14 = getelementptr inbounds %struct.tree_exp, ptr %13, i64 0, i32 1
  store i32 %0, ptr %14, align 8, !tbaa !17
  br label %15

15:                                               ; preds = %4, %12
  %16 = phi ptr [ %10, %4 ], [ %13, %12 ]
  store i32 %5, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 %6, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 %7, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 %8, ptr @flag_trapv, align 4, !tbaa !21
  store i32 %9, ptr @folding_initializer, align 4, !tbaa !21
  ret ptr %16
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build2_initializer_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %7 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %8 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %9 = load i32, ptr @flag_trapv, align 4, !tbaa !21
  %10 = load i32, ptr @folding_initializer, align 4, !tbaa !21
  store i32 0, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 0, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 0, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 0, ptr @flag_trapv, align 4, !tbaa !21
  store i32 1, ptr @folding_initializer, align 4, !tbaa !21
  %11 = tail call ptr @fold_binary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #25
  %12 = icmp eq ptr %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %5
  %14 = tail call ptr @build2_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4) #24
  %15 = getelementptr inbounds %struct.tree_exp, ptr %14, i64 0, i32 1
  store i32 %0, ptr %15, align 8, !tbaa !17
  br label %16

16:                                               ; preds = %5, %13
  %17 = phi ptr [ %11, %5 ], [ %14, %13 ]
  store i32 %6, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 %7, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 %8, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 %9, ptr @flag_trapv, align 4, !tbaa !21
  store i32 %10, ptr @folding_initializer, align 4, !tbaa !21
  ret ptr %17
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build3_initializer_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) local_unnamed_addr #10 {
  %7 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %8 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %9 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %10 = load i32, ptr @flag_trapv, align 4, !tbaa !21
  %11 = load i32, ptr @folding_initializer, align 4, !tbaa !21
  store i32 0, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 0, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 0, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 0, ptr @flag_trapv, align 4, !tbaa !21
  store i32 1, ptr @folding_initializer, align 4, !tbaa !21
  %12 = sext i32 %1 to i64
  %13 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %12
  %14 = load i32, ptr %13, align 4, !tbaa !17
  %15 = icmp eq i32 %14, 9
  br i1 %15, label %16, label %17

16:                                               ; preds = %6
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 14569, ptr noundef nonnull @.str.1) #24
  br label %17

17:                                               ; preds = %16, %6
  %18 = tail call ptr @fold_ternary_loc(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #25
  %19 = icmp eq ptr %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  %21 = tail call ptr @build3_stat(i32 noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %4, ptr noundef %5) #24
  %22 = getelementptr inbounds %struct.tree_exp, ptr %21, i64 0, i32 1
  store i32 %0, ptr %22, align 8, !tbaa !17
  br label %23

23:                                               ; preds = %17, %20
  %24 = phi ptr [ %18, %17 ], [ %21, %20 ]
  store i32 %7, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 %8, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 %9, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 %10, ptr @flag_trapv, align 4, !tbaa !21
  store i32 %11, ptr @folding_initializer, align 4, !tbaa !21
  ret ptr %24
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build_call_array_initializer_loc(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) local_unnamed_addr #10 {
  %6 = load i32, ptr @flag_signaling_nans, align 4, !tbaa !21
  %7 = load i32, ptr @flag_trapping_math, align 4, !tbaa !21
  %8 = load i32, ptr @flag_rounding_math, align 4, !tbaa !21
  %9 = load i32, ptr @flag_trapv, align 4, !tbaa !21
  %10 = load i32, ptr @folding_initializer, align 4, !tbaa !21
  store i32 0, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 0, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 0, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 0, ptr @flag_trapv, align 4, !tbaa !21
  store i32 1, ptr @folding_initializer, align 4, !tbaa !21
  %11 = tail call ptr @fold_builtin_call_array(i32 noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4) #24
  store i32 %6, ptr @flag_signaling_nans, align 4, !tbaa !21
  store i32 %7, ptr @flag_trapping_math, align 4, !tbaa !21
  store i32 %8, ptr @flag_rounding_math, align 4, !tbaa !21
  store i32 %9, ptr @flag_trapv, align 4, !tbaa !21
  store i32 %10, ptr @folding_initializer, align 4, !tbaa !21
  ret ptr %11
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_unary_nonnegative_warnv_p(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #10 {
  %5 = load i64, ptr %1, align 8
  %6 = and i64 %5, 2097152
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %72

8:                                                ; preds = %4
  switch i32 %0, label %57 [
    i32 82, label %9
    i32 117, label %24
    i32 78, label %24
    i32 77, label %24
    i32 116, label %26
  ]

9:                                                ; preds = %8
  %10 = trunc i64 %5 to i32
  %11 = and i32 %10, 65535
  %12 = add nsw i32 %11, -6
  %13 = icmp ult i32 %12, 3
  br i1 %13, label %14, label %72

14:                                               ; preds = %9
  %15 = load i32, ptr @flag_wrapv, align 4
  %16 = icmp eq i32 %15, 0
  %17 = load i32, ptr @flag_trapv, align 4
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  %20 = load i32, ptr @flag_strict_overflow, align 4
  %21 = icmp ne i32 %20, 0
  %22 = select i1 %19, i1 %21, i1 false
  br i1 %22, label %23, label %72

23:                                               ; preds = %14
  store i8 1, ptr %3, align 1, !tbaa !17
  br label %72

24:                                               ; preds = %8, %8, %8
  %25 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %3)
  br label %72

26:                                               ; preds = %8
  %27 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %28 = load ptr, ptr %27, align 8, !tbaa !17
  %29 = trunc i64 %5 to i16
  switch i16 %29, label %72 [
    i16 9, label %30
    i16 8, label %40
  ]

30:                                               ; preds = %26
  %31 = load i64, ptr %28, align 8
  %32 = trunc i64 %31 to i16
  switch i16 %32, label %72 [
    i16 9, label %33
    i16 8, label %35
  ]

33:                                               ; preds = %30
  %34 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %2, ptr noundef %3)
  br label %72

35:                                               ; preds = %30
  %36 = and i64 %31, 2097152
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %72

38:                                               ; preds = %35
  %39 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %2, ptr noundef %3)
  br label %72

40:                                               ; preds = %26
  %41 = load i64, ptr %28, align 8
  %42 = trunc i64 %41 to i16
  switch i16 %42, label %72 [
    i16 9, label %43
    i16 8, label %45
  ]

43:                                               ; preds = %40
  %44 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %2, ptr noundef %3)
  br label %72

45:                                               ; preds = %40
  %46 = getelementptr inbounds %struct.tree_type, ptr %28, i64 0, i32 6
  %47 = load i32, ptr %46, align 4
  %48 = and i32 %47, 1023
  %49 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %50 = load i32, ptr %49, align 4
  %51 = and i32 %50, 1023
  %52 = icmp ult i32 %48, %51
  %53 = lshr i64 %41, 21
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = select i1 %52, i8 %55, i8 0
  br label %72

57:                                               ; preds = %8
  %58 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %59 = load i32, ptr %58, align 4
  %60 = and i32 %59, 1023
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %71, label %62

62:                                               ; preds = %57
  %63 = sext i32 %0 to i64
  %64 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %63
  %65 = load i32, ptr %64, align 4, !tbaa !17
  %66 = freeze i32 %65
  %67 = icmp eq i32 %66, 5
  %68 = add i32 %0, -91
  %69 = icmp ult i32 %68, 6
  %70 = or i1 %69, %67
  br i1 %70, label %72, label %71

71:                                               ; preds = %57, %62
  br label %72

72:                                               ; preds = %35, %45, %43, %38, %33, %14, %30, %26, %40, %71, %62, %9, %4, %24, %23
  %73 = phi i8 [ %25, %24 ], [ 1, %23 ], [ 1, %4 ], [ 1, %9 ], [ 0, %71 ], [ 1, %62 ], [ 0, %40 ], [ 0, %26 ], [ 0, %30 ], [ 0, %14 ], [ 1, %35 ], [ %56, %45 ], [ %44, %43 ], [ %39, %38 ], [ %34, %33 ]
  ret i8 %73
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_binary_nonnegative_warnv_p(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef writeonly %4) local_unnamed_addr #10 {
  %6 = load i64, ptr %1, align 8
  %7 = and i64 %6, 2097152
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %212

9:                                                ; preds = %5
  switch i32 %0, label %197 [
    i32 66, label %10
    i32 63, label %10
    i32 65, label %66
    i32 89, label %181
    i32 81, label %181
    i32 87, label %188
    i32 88, label %188
    i32 80, label %188
    i32 75, label %188
    i32 67, label %188
    i32 68, label %188
    i32 69, label %188
    i32 70, label %188
    i32 71, label %195
    i32 72, label %195
    i32 73, label %195
    i32 74, label %195
  ]

10:                                               ; preds = %9, %9
  %11 = trunc i64 %6 to i16
  switch i16 %11, label %25 [
    i16 9, label %18
    i16 13, label %12
    i16 14, label %12
  ]

12:                                               ; preds = %10, %10
  %13 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = load i64, ptr %14, align 8
  %16 = and i64 %15, 65535
  %17 = icmp eq i64 %16, 9
  br i1 %17, label %18, label %25

18:                                               ; preds = %10, %12
  %19 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %212, label %21

21:                                               ; preds = %18
  %22 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %23 = icmp ne i8 %22, 0
  %24 = zext i1 %23 to i8
  br label %212

25:                                               ; preds = %10, %12
  %26 = and i64 %6, 65535
  %27 = icmp eq i64 %26, 8
  br i1 %27, label %28, label %212

28:                                               ; preds = %25
  %29 = load i64, ptr %2, align 8
  %30 = and i64 %29, 65535
  %31 = icmp eq i64 %30, 116
  br i1 %31, label %32, label %212

32:                                               ; preds = %28
  %33 = load i64, ptr %3, align 8
  %34 = and i64 %33, 65535
  %35 = icmp eq i64 %34, 116
  br i1 %35, label %36, label %212

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = getelementptr inbounds %struct.tree_common, ptr %38, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = getelementptr inbounds %struct.tree_common, ptr %42, i64 0, i32 2
  %44 = load ptr, ptr %43, align 8, !tbaa !17
  %45 = load i64, ptr %40, align 8
  %46 = and i64 %45, 2162687
  %47 = icmp eq i64 %46, 2097160
  br i1 %47, label %48, label %212

48:                                               ; preds = %36
  %49 = load i64, ptr %44, align 8
  %50 = and i64 %49, 2162687
  %51 = icmp eq i64 %50, 2097160
  br i1 %51, label %52, label %212

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.tree_type, ptr %40, i64 0, i32 6
  %54 = load i32, ptr %53, align 4
  %55 = and i32 %54, 1023
  %56 = getelementptr inbounds %struct.tree_type, ptr %44, i64 0, i32 6
  %57 = load i32, ptr %56, align 4
  %58 = and i32 %57, 1023
  %59 = tail call i32 @llvm.umax.i32(i32 %55, i32 %58)
  %60 = add nuw nsw i32 %59, 1
  %61 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %62 = load i32, ptr %61, align 4
  %63 = and i32 %62, 1023
  %64 = icmp ult i32 %60, %63
  %65 = zext i1 %64 to i8
  br label %212

66:                                               ; preds = %9
  %67 = trunc i64 %6 to i16
  switch i16 %67, label %84 [
    i16 9, label %74
    i16 13, label %68
    i16 14, label %68
  ]

68:                                               ; preds = %66, %66
  %69 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %70 = load ptr, ptr %69, align 8, !tbaa !17
  %71 = load i64, ptr %70, align 8
  %72 = and i64 %71, 65535
  %73 = icmp eq i64 %72, 9
  br i1 %73, label %74, label %84

74:                                               ; preds = %66, %68
  %75 = tail call i32 @operand_equal_p(ptr noundef %2, ptr noundef %3, i32 noundef 0)
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %212

77:                                               ; preds = %74
  %78 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %212, label %80

80:                                               ; preds = %77
  %81 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %82 = icmp ne i8 %81, 0
  %83 = zext i1 %82 to i8
  br label %212

84:                                               ; preds = %66, %68
  %85 = and i64 %6, 65535
  %86 = icmp eq i64 %85, 8
  br i1 %86, label %87, label %212

87:                                               ; preds = %84
  %88 = load i64, ptr %2, align 8
  %89 = trunc i64 %88 to i16
  switch i16 %89, label %212 [
    i16 116, label %90
    i16 23, label %90
  ]

90:                                               ; preds = %87, %87
  %91 = load i64, ptr %3, align 8
  %92 = trunc i64 %91 to i16
  switch i16 %92, label %212 [
    i16 116, label %93
    i16 23, label %93
  ]

93:                                               ; preds = %90, %90
  %94 = and i64 %88, 65535
  %95 = icmp eq i64 %94, 116
  br i1 %95, label %96, label %99

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.tree_exp, ptr %2, i64 0, i32 3
  %98 = load ptr, ptr %97, align 8, !tbaa !17
  br label %99

99:                                               ; preds = %93, %96
  %100 = phi ptr [ %98, %96 ], [ %2, %93 ]
  %101 = getelementptr inbounds %struct.tree_common, ptr %100, i64 0, i32 2
  %102 = load ptr, ptr %101, align 8, !tbaa !17
  %103 = and i64 %91, 65535
  %104 = icmp eq i64 %103, 116
  br i1 %104, label %105, label %108

105:                                              ; preds = %99
  %106 = getelementptr inbounds %struct.tree_exp, ptr %3, i64 0, i32 3
  %107 = load ptr, ptr %106, align 8, !tbaa !17
  br label %108

108:                                              ; preds = %99, %105
  %109 = phi ptr [ %107, %105 ], [ %3, %99 ]
  %110 = getelementptr inbounds %struct.tree_common, ptr %109, i64 0, i32 2
  %111 = load ptr, ptr %110, align 8, !tbaa !17
  %112 = load i64, ptr %102, align 8
  %113 = lshr i64 %112, 21
  %114 = trunc i64 %113 to i8
  %115 = and i8 %114, 1
  %116 = load i64, ptr %111, align 8
  %117 = lshr i64 %116, 21
  %118 = trunc i64 %117 to i8
  %119 = and i8 %118, 1
  %120 = icmp eq i64 %94, 23
  br i1 %120, label %121, label %128

121:                                              ; preds = %108
  %122 = icmp eq i8 %115, 0
  br i1 %122, label %123, label %128

123:                                              ; preds = %121
  %124 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %2) #24
  %125 = icmp sgt i32 %124, -1
  %126 = zext i1 %125 to i8
  %127 = load i64, ptr %3, align 8
  br label %128

128:                                              ; preds = %121, %123, %108
  %129 = phi i64 [ %91, %108 ], [ %91, %121 ], [ %127, %123 ]
  %130 = phi i8 [ %115, %108 ], [ 1, %121 ], [ %126, %123 ]
  %131 = and i64 %129, 65535
  %132 = icmp eq i64 %131, 23
  br i1 %132, label %133, label %139

133:                                              ; preds = %128
  %134 = icmp eq i8 %119, 0
  br i1 %134, label %135, label %139

135:                                              ; preds = %133
  %136 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %3) #24
  %137 = icmp sgt i32 %136, -1
  %138 = zext i1 %137 to i8
  br label %139

139:                                              ; preds = %133, %135, %128
  %140 = phi i8 [ %119, %128 ], [ 1, %133 ], [ %138, %135 ]
  %141 = load i64, ptr %102, align 8
  %142 = and i64 %141, 65535
  %143 = icmp eq i64 %142, 8
  %144 = icmp ne i8 %130, 0
  %145 = select i1 %143, i1 %144, i1 false
  br i1 %145, label %146, label %212

146:                                              ; preds = %139
  %147 = load i64, ptr %111, align 8
  %148 = and i64 %147, 65535
  %149 = icmp eq i64 %148, 8
  %150 = icmp ne i8 %140, 0
  %151 = select i1 %149, i1 %150, i1 false
  br i1 %151, label %152, label %212

152:                                              ; preds = %146
  %153 = load i64, ptr %2, align 8
  %154 = and i64 %153, 65535
  %155 = icmp eq i64 %154, 23
  br i1 %155, label %156, label %158

156:                                              ; preds = %152
  %157 = tail call i32 @tree_int_cst_min_precision(ptr noundef nonnull %2, i8 noundef zeroext 1) #24
  br label %162

158:                                              ; preds = %152
  %159 = getelementptr inbounds %struct.tree_type, ptr %102, i64 0, i32 6
  %160 = load i32, ptr %159, align 4
  %161 = and i32 %160, 1023
  br label %162

162:                                              ; preds = %158, %156
  %163 = phi i32 [ %157, %156 ], [ %161, %158 ]
  %164 = load i64, ptr %3, align 8
  %165 = and i64 %164, 65535
  %166 = icmp eq i64 %165, 23
  br i1 %166, label %167, label %169

167:                                              ; preds = %162
  %168 = tail call i32 @tree_int_cst_min_precision(ptr noundef nonnull %3, i8 noundef zeroext 1) #24
  br label %173

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.tree_type, ptr %111, i64 0, i32 6
  %171 = load i32, ptr %170, align 4
  %172 = and i32 %171, 1023
  br label %173

173:                                              ; preds = %167, %169
  %174 = phi i32 [ %168, %167 ], [ %172, %169 ]
  %175 = add i32 %174, %163
  %176 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %177 = load i32, ptr %176, align 4
  %178 = and i32 %177, 1023
  %179 = icmp ult i32 %175, %178
  %180 = zext i1 %179 to i8
  br label %212

181:                                              ; preds = %9, %9
  %182 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %184, label %212

184:                                              ; preds = %181
  %185 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %186 = icmp ne i8 %185, 0
  %187 = zext i1 %186 to i8
  br label %212

188:                                              ; preds = %9, %9, %9, %9, %9, %9, %9, %9
  %189 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %212, label %191

191:                                              ; preds = %188
  %192 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %193 = icmp ne i8 %192, 0
  %194 = zext i1 %193 to i8
  br label %212

195:                                              ; preds = %9, %9, %9, %9
  %196 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %212

197:                                              ; preds = %9
  %198 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %199 = load i32, ptr %198, align 4
  %200 = and i32 %199, 1023
  %201 = icmp eq i32 %200, 1
  br i1 %201, label %211, label %202

202:                                              ; preds = %197
  %203 = sext i32 %0 to i64
  %204 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %203
  %205 = load i32, ptr %204, align 4, !tbaa !17
  %206 = freeze i32 %205
  %207 = icmp eq i32 %206, 5
  %208 = add i32 %0, -91
  %209 = icmp ult i32 %208, 6
  %210 = or i1 %209, %207
  br i1 %210, label %212, label %211

211:                                              ; preds = %197, %202
  br label %212

212:                                              ; preds = %139, %146, %36, %48, %32, %28, %25, %211, %202, %84, %87, %90, %173, %52, %188, %191, %181, %184, %77, %80, %74, %18, %21, %5, %195
  %213 = phi i8 [ %196, %195 ], [ %180, %173 ], [ %65, %52 ], [ 1, %5 ], [ 0, %18 ], [ %24, %21 ], [ 1, %74 ], [ 0, %77 ], [ %83, %80 ], [ 1, %181 ], [ %187, %184 ], [ 0, %188 ], [ %194, %191 ], [ 0, %90 ], [ 0, %87 ], [ 0, %84 ], [ 0, %211 ], [ 1, %202 ], [ 0, %25 ], [ 0, %28 ], [ 0, %32 ], [ 0, %48 ], [ 0, %36 ], [ 0, %146 ], [ 0, %139 ]
  ret i8 %213
}

declare i32 @tree_int_cst_min_precision(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_single_nonnegative_warnv_p(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = load i64, ptr %4, align 8
  %6 = and i64 %5, 2097152
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %51

8:                                                ; preds = %2
  %9 = load i64, ptr %0, align 8
  %10 = trunc i64 %9 to i16
  switch i16 %10, label %34 [
    i16 23, label %11
    i16 24, label %14
    i16 25, label %19
    i16 56, label %24
  ]

11:                                               ; preds = %8
  %12 = tail call i32 @tree_int_cst_sgn(ptr noundef nonnull %0) #24
  %13 = icmp sgt i32 %12, -1
  br label %51

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.tree_real_cst, ptr %0, i64 0, i32 1
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = tail call zeroext i8 @real_isneg(ptr noundef %16) #24
  %18 = icmp eq i8 %17, 0
  br label %51

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.tree_fixed_cst, ptr %0, i64 0, i32 1
  %21 = load ptr, ptr %20, align 8, !tbaa !17
  %22 = tail call zeroext i8 @fixed_isneg(ptr noundef %21) #24
  %23 = icmp eq i8 %22, 0
  br label %51

24:                                               ; preds = %8
  %25 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %26 = load ptr, ptr %25, align 8, !tbaa !17
  %27 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %26, ptr noundef %1)
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %51, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 1
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %31, ptr noundef %1)
  %33 = icmp ne i8 %32, 0
  br label %51

34:                                               ; preds = %8
  %35 = getelementptr inbounds %struct.tree_type, ptr %4, i64 0, i32 6
  %36 = load i32, ptr %35, align 4
  %37 = and i32 %36, 1023
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %50, label %39

39:                                               ; preds = %34
  %40 = trunc i64 %9 to i32
  %41 = and i32 %40, 65535
  %42 = and i64 %9, 65535
  %43 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %42
  %44 = load i32, ptr %43, align 4, !tbaa !17
  %45 = freeze i32 %44
  %46 = icmp eq i32 %45, 5
  %47 = add nsw i32 %41, -91
  %48 = icmp ult i32 %47, 6
  %49 = or i1 %48, %46
  br i1 %49, label %51, label %50

50:                                               ; preds = %34, %39
  br label %51

51:                                               ; preds = %50, %39, %24, %29, %2, %19, %14, %11
  %52 = phi i1 [ %23, %19 ], [ %18, %14 ], [ %13, %11 ], [ true, %2 ], [ false, %24 ], [ %33, %29 ], [ false, %50 ], [ true, %39 ]
  %53 = zext i1 %52 to i8
  ret i8 %53
}

declare zeroext i8 @fixed_isneg(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_call_nonnegative_warnv_p(ptr noundef %0, ptr noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef writeonly %4) local_unnamed_addr #10 {
  %6 = alloca %struct.real_value, align 8
  %7 = alloca %struct.real_value, align 8
  %8 = icmp eq ptr %1, null
  br i1 %8, label %345, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.tree_function_decl, ptr %1, i64 0, i32 5
  %11 = load i32, ptr %10, align 8
  %12 = and i32 %11, 6144
  %13 = icmp eq i32 %12, 6144
  br i1 %13, label %14, label %345

14:                                               ; preds = %9
  %15 = and i32 %11, 2047
  switch i32 %15, label %345 [
    i32 0, label %359
    i32 1, label %359
    i32 5, label %359
    i32 2, label %359
    i32 3, label %359
    i32 4, label %359
    i32 252, label %359
    i32 253, label %359
    i32 254, label %359
    i32 32, label %359
    i32 33, label %359
    i32 34, label %359
    i32 40, label %359
    i32 41, label %359
    i32 42, label %359
    i32 45, label %359
    i32 52, label %359
    i32 53, label %359
    i32 46, label %359
    i32 47, label %359
    i32 48, label %359
    i32 49, label %359
    i32 50, label %359
    i32 51, label %359
    i32 57, label %359
    i32 58, label %359
    i32 59, label %359
    i32 60, label %359
    i32 61, label %359
    i32 62, label %359
    i32 90, label %359
    i32 91, label %359
    i32 92, label %359
    i32 181, label %359
    i32 182, label %359
    i32 183, label %359
    i32 449, label %359
    i32 451, label %359
    i32 452, label %359
    i32 493, label %359
    i32 495, label %359
    i32 496, label %359
    i32 497, label %359
    i32 499, label %359
    i32 500, label %359
    i32 419, label %359
    i32 420, label %359
    i32 228, label %16
    i32 229, label %16
    i32 230, label %16
    i32 8, label %298
    i32 9, label %298
    i32 10, label %298
    i32 12, label %298
    i32 16, label %298
    i32 20, label %298
    i32 17, label %298
    i32 18, label %298
    i32 19, label %298
    i32 21, label %298
    i32 22, label %298
    i32 23, label %298
    i32 24, label %298
    i32 25, label %298
    i32 26, label %298
    i32 39, label %298
    i32 43, label %298
    i32 44, label %298
    i32 54, label %298
    i32 55, label %298
    i32 56, label %298
    i32 63, label %298
    i32 64, label %298
    i32 65, label %298
    i32 75, label %298
    i32 76, label %298
    i32 77, label %298
    i32 78, label %298
    i32 79, label %298
    i32 80, label %298
    i32 111, label %298
    i32 112, label %298
    i32 113, label %298
    i32 114, label %298
    i32 115, label %298
    i32 116, label %298
    i32 117, label %298
    i32 118, label %298
    i32 119, label %298
    i32 126, label %298
    i32 127, label %298
    i32 128, label %298
    i32 129, label %298
    i32 130, label %298
    i32 131, label %298
    i32 132, label %298
    i32 133, label %298
    i32 134, label %298
    i32 135, label %298
    i32 136, label %298
    i32 137, label %298
    i32 153, label %298
    i32 154, label %298
    i32 155, label %298
    i32 156, label %298
    i32 157, label %298
    i32 158, label %298
    i32 159, label %298
    i32 160, label %298
    i32 161, label %298
    i32 171, label %298
    i32 172, label %298
    i32 173, label %298
    i32 195, label %298
    i32 196, label %298
    i32 197, label %298
    i32 198, label %298
    i32 199, label %298
    i32 200, label %298
    i32 201, label %298
    i32 202, label %298
    i32 203, label %298
    i32 204, label %298
    i32 205, label %298
    i32 206, label %298
    i32 207, label %298
    i32 208, label %298
    i32 209, label %298
    i32 210, label %298
    i32 211, label %298
    i32 212, label %298
    i32 216, label %298
    i32 217, label %298
    i32 218, label %298
    i32 224, label %298
    i32 225, label %298
    i32 226, label %298
    i32 233, label %298
    i32 234, label %298
    i32 235, label %298
    i32 240, label %298
    i32 241, label %298
    i32 242, label %298
    i32 69, label %300
    i32 70, label %300
    i32 71, label %300
    i32 72, label %307
    i32 73, label %307
    i32 74, label %307
    i32 27, label %314
    i32 28, label %314
    i32 29, label %314
    i32 185, label %316
    i32 186, label %316
    i32 187, label %316
    i32 180, label %327
    i32 184, label %327
    i32 188, label %327
  ]

16:                                               ; preds = %14, %14, %14
  %17 = load i64, ptr %0, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 14
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %22 = load i64, ptr %0, align 8
  br label %28

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %25 = load i32, ptr %24, align 4
  %26 = lshr i32 %25, 16
  %27 = and i32 %26, 255
  br label %28

28:                                               ; preds = %23, %20
  %29 = phi i64 [ %22, %20 ], [ %17, %23 ]
  %30 = phi i32 [ %21, %20 ], [ %27, %23 ]
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %31
  %33 = load i8, ptr %32, align 1, !tbaa !17
  %34 = icmp eq i8 %33, 8
  br i1 %34, label %89, label %35

35:                                               ; preds = %28
  %36 = and i64 %29, 65535
  %37 = icmp eq i64 %36, 14
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %40 = load i64, ptr %0, align 8
  br label %46

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %43 = load i32, ptr %42, align 4
  %44 = lshr i32 %43, 16
  %45 = and i32 %44, 255
  br label %46

46:                                               ; preds = %41, %38
  %47 = phi i64 [ %40, %38 ], [ %29, %41 ]
  %48 = phi i32 [ %39, %38 ], [ %45, %41 ]
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %49
  %51 = load i8, ptr %50, align 1, !tbaa !17
  %52 = icmp eq i8 %51, 9
  br i1 %52, label %89, label %53

53:                                               ; preds = %46
  %54 = and i64 %47, 65535
  %55 = icmp eq i64 %54, 14
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %58 = load i64, ptr %0, align 8
  br label %64

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %61 = load i32, ptr %60, align 4
  %62 = lshr i32 %61, 16
  %63 = and i32 %62, 255
  br label %64

64:                                               ; preds = %59, %56
  %65 = phi i64 [ %58, %56 ], [ %47, %59 ]
  %66 = phi i32 [ %57, %56 ], [ %63, %59 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %67
  %69 = load i8, ptr %68, align 1, !tbaa !17
  %70 = icmp eq i8 %69, 11
  br i1 %70, label %89, label %71

71:                                               ; preds = %64
  %72 = and i64 %65, 65535
  %73 = icmp eq i64 %72, 14
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %81

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %78 = load i32, ptr %77, align 4
  %79 = lshr i32 %78, 16
  %80 = and i32 %79, 255
  br label %81

81:                                               ; preds = %76, %74
  %82 = phi i32 [ %75, %74 ], [ %80, %76 ]
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %83
  %85 = load i8, ptr %84, align 1, !tbaa !17
  %86 = icmp eq i8 %85, 17
  br i1 %86, label %87, label %359

87:                                               ; preds = %81
  %88 = load i64, ptr %0, align 8
  br label %89

89:                                               ; preds = %87, %64, %46, %28
  %90 = phi i64 [ %88, %87 ], [ %65, %64 ], [ %47, %46 ], [ %29, %28 ]
  %91 = and i64 %90, 65535
  %92 = icmp eq i64 %91, 14
  br i1 %92, label %93, label %96

93:                                               ; preds = %89
  %94 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %95 = load i64, ptr %0, align 8
  br label %101

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %98 = load i32, ptr %97, align 4
  %99 = lshr i32 %98, 16
  %100 = and i32 %99, 255
  br label %101

101:                                              ; preds = %96, %93
  %102 = phi i64 [ %95, %93 ], [ %90, %96 ]
  %103 = phi i32 [ %94, %93 ], [ %100, %96 ]
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %104
  %106 = load i8, ptr %105, align 1, !tbaa !17
  %107 = icmp eq i8 %106, 8
  br i1 %107, label %126, label %108

108:                                              ; preds = %101
  %109 = and i64 %102, 65535
  %110 = icmp eq i64 %109, 14
  br i1 %110, label %111, label %114

111:                                              ; preds = %108
  %112 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %113 = load i64, ptr %0, align 8
  br label %119

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %116 = load i32, ptr %115, align 4
  %117 = lshr i32 %116, 16
  %118 = and i32 %117, 255
  br label %119

119:                                              ; preds = %114, %111
  %120 = phi i64 [ %113, %111 ], [ %102, %114 ]
  %121 = phi i32 [ %112, %111 ], [ %118, %114 ]
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %122
  %124 = load i8, ptr %123, align 1, !tbaa !17
  %125 = icmp eq i8 %124, 9
  br i1 %125, label %126, label %137

126:                                              ; preds = %119, %101
  %127 = phi i64 [ %120, %119 ], [ %102, %101 ]
  %128 = and i64 %127, 65535
  %129 = icmp eq i64 %128, 14
  br i1 %129, label %130, label %132

130:                                              ; preds = %126
  %131 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %153

132:                                              ; preds = %126
  %133 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %134 = load i32, ptr %133, align 4
  %135 = lshr i32 %134, 16
  %136 = and i32 %135, 255
  br label %153

137:                                              ; preds = %119
  %138 = and i64 %120, 65535
  %139 = icmp eq i64 %138, 14
  br i1 %139, label %140, label %142

140:                                              ; preds = %137
  %141 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %147

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %144 = load i32, ptr %143, align 4
  %145 = lshr i32 %144, 16
  %146 = and i32 %145, 255
  br label %147

147:                                              ; preds = %142, %140
  %148 = phi i32 [ %141, %140 ], [ %146, %142 ]
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %149
  %151 = load i8, ptr %150, align 1, !tbaa !17
  %152 = zext i8 %151 to i32
  br label %153

153:                                              ; preds = %130, %132, %147
  %154 = phi i32 [ %152, %147 ], [ %131, %130 ], [ %136, %132 ]
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %155
  %157 = load i8, ptr %156, align 1, !tbaa !17
  %158 = icmp eq i8 %157, 9
  %159 = load i64, ptr %0, align 8
  %160 = and i64 %159, 65535
  %161 = icmp eq i64 %160, 14
  br i1 %158, label %162, label %223

162:                                              ; preds = %153
  br i1 %161, label %163, label %166

163:                                              ; preds = %162
  %164 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %165 = load i64, ptr %0, align 8
  br label %171

166:                                              ; preds = %162
  %167 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %168 = load i32, ptr %167, align 4
  %169 = lshr i32 %168, 16
  %170 = and i32 %169, 255
  br label %171

171:                                              ; preds = %166, %163
  %172 = phi i64 [ %165, %163 ], [ %159, %166 ]
  %173 = phi i32 [ %164, %163 ], [ %170, %166 ]
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %174
  %176 = load i8, ptr %175, align 1, !tbaa !17
  %177 = icmp eq i8 %176, 8
  br i1 %177, label %196, label %178

178:                                              ; preds = %171
  %179 = and i64 %172, 65535
  %180 = icmp eq i64 %179, 14
  br i1 %180, label %181, label %184

181:                                              ; preds = %178
  %182 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %183 = load i64, ptr %0, align 8
  br label %189

184:                                              ; preds = %178
  %185 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %186 = load i32, ptr %185, align 4
  %187 = lshr i32 %186, 16
  %188 = and i32 %187, 255
  br label %189

189:                                              ; preds = %184, %181
  %190 = phi i64 [ %183, %181 ], [ %172, %184 ]
  %191 = phi i32 [ %182, %181 ], [ %188, %184 ]
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %192
  %194 = load i8, ptr %193, align 1, !tbaa !17
  %195 = icmp eq i8 %194, 9
  br i1 %195, label %196, label %207

196:                                              ; preds = %189, %171
  %197 = phi i64 [ %190, %189 ], [ %172, %171 ]
  %198 = and i64 %197, 65535
  %199 = icmp eq i64 %198, 14
  br i1 %199, label %200, label %202

200:                                              ; preds = %196
  %201 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %284

202:                                              ; preds = %196
  %203 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %204 = load i32, ptr %203, align 4
  %205 = lshr i32 %204, 16
  %206 = and i32 %205, 255
  br label %284

207:                                              ; preds = %189
  %208 = and i64 %190, 65535
  %209 = icmp eq i64 %208, 14
  br i1 %209, label %210, label %212

210:                                              ; preds = %207
  %211 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %217

212:                                              ; preds = %207
  %213 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %214 = load i32, ptr %213, align 4
  %215 = lshr i32 %214, 16
  %216 = and i32 %215, 255
  br label %217

217:                                              ; preds = %212, %210
  %218 = phi i32 [ %211, %210 ], [ %216, %212 ]
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %219
  %221 = load i8, ptr %220, align 1, !tbaa !17
  %222 = zext i8 %221 to i32
  br label %284

223:                                              ; preds = %153
  br i1 %161, label %224, label %227

224:                                              ; preds = %223
  %225 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %226 = load i64, ptr %0, align 8
  br label %232

227:                                              ; preds = %223
  %228 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %229 = load i32, ptr %228, align 4
  %230 = lshr i32 %229, 16
  %231 = and i32 %230, 255
  br label %232

232:                                              ; preds = %227, %224
  %233 = phi i64 [ %226, %224 ], [ %159, %227 ]
  %234 = phi i32 [ %225, %224 ], [ %231, %227 ]
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %235
  %237 = load i8, ptr %236, align 1, !tbaa !17
  %238 = icmp eq i8 %237, 8
  br i1 %238, label %257, label %239

239:                                              ; preds = %232
  %240 = and i64 %233, 65535
  %241 = icmp eq i64 %240, 14
  br i1 %241, label %242, label %245

242:                                              ; preds = %239
  %243 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  %244 = load i64, ptr %0, align 8
  br label %250

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %247 = load i32, ptr %246, align 4
  %248 = lshr i32 %247, 16
  %249 = and i32 %248, 255
  br label %250

250:                                              ; preds = %245, %242
  %251 = phi i64 [ %244, %242 ], [ %233, %245 ]
  %252 = phi i32 [ %243, %242 ], [ %249, %245 ]
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %253
  %255 = load i8, ptr %254, align 1, !tbaa !17
  %256 = icmp eq i8 %255, 9
  br i1 %256, label %257, label %268

257:                                              ; preds = %250, %232
  %258 = phi i64 [ %251, %250 ], [ %233, %232 ]
  %259 = and i64 %258, 65535
  %260 = icmp eq i64 %259, 14
  br i1 %260, label %261, label %263

261:                                              ; preds = %257
  %262 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %284

263:                                              ; preds = %257
  %264 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %265 = load i32, ptr %264, align 4
  %266 = lshr i32 %265, 16
  %267 = and i32 %266, 255
  br label %284

268:                                              ; preds = %250
  %269 = and i64 %251, 65535
  %270 = icmp eq i64 %269, 14
  br i1 %270, label %271, label %273

271:                                              ; preds = %268
  %272 = tail call i32 @vector_type_mode(ptr noundef nonnull %0) #24
  br label %278

273:                                              ; preds = %268
  %274 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %275 = load i32, ptr %274, align 4
  %276 = lshr i32 %275, 16
  %277 = and i32 %276, 255
  br label %278

278:                                              ; preds = %273, %271
  %279 = phi i32 [ %272, %271 ], [ %277, %273 ]
  %280 = zext i32 %279 to i64
  %281 = getelementptr inbounds [87 x i8], ptr @mode_inner, i64 0, i64 %280
  %282 = load i8, ptr %281, align 1, !tbaa !17
  %283 = zext i8 %282 to i32
  br label %284

284:                                              ; preds = %278, %263, %261, %217, %202, %200
  %285 = phi i32 [ %222, %217 ], [ %201, %200 ], [ %206, %202 ], [ %283, %278 ], [ %262, %261 ], [ %267, %263 ]
  %286 = add i32 %285, -38
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds [7 x ptr], ptr @real_format_for_mode, i64 0, i64 %287
  %289 = load ptr, ptr %288, align 8, !tbaa !6
  %290 = getelementptr inbounds %struct.real_format, ptr %289, i64 0, i32 14
  %291 = load i8, ptr %290, align 1, !tbaa !37
  %292 = icmp ne i8 %291, 0
  %293 = load i32, ptr @flag_signed_zeros, align 4
  %294 = icmp ne i32 %293, 0
  %295 = select i1 %292, i1 %294, i1 false
  br i1 %295, label %296, label %359

296:                                              ; preds = %284
  %297 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %359

298:                                              ; preds = %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14
  %299 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %359

300:                                              ; preds = %14, %14, %14
  %301 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %302 = icmp eq i8 %301, 0
  br i1 %302, label %303, label %359

303:                                              ; preds = %300
  %304 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %305 = icmp ne i8 %304, 0
  %306 = zext i1 %305 to i8
  br label %359

307:                                              ; preds = %14, %14, %14
  %308 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  %309 = icmp eq i8 %308, 0
  br i1 %309, label %359, label %310

310:                                              ; preds = %307
  %311 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  %312 = icmp ne i8 %311, 0
  %313 = zext i1 %312 to i8
  br label %359

314:                                              ; preds = %14, %14, %14
  %315 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef %4)
  br label %359

316:                                              ; preds = %14, %14, %14
  %317 = load i64, ptr %3, align 8
  %318 = and i64 %317, 65535
  %319 = icmp eq i64 %318, 23
  br i1 %319, label %320, label %325

320:                                              ; preds = %316
  %321 = getelementptr inbounds %struct.tree_int_cst, ptr %3, i64 0, i32 1
  %322 = load i64, ptr %321, align 8, !tbaa !17
  %323 = and i64 %322, 1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %359, label %325

325:                                              ; preds = %320, %316
  %326 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %359

327:                                              ; preds = %14, %14, %14
  %328 = load i64, ptr %3, align 8
  %329 = and i64 %328, 65535
  %330 = icmp eq i64 %329, 24
  br i1 %330, label %331, label %343

331:                                              ; preds = %327
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6) #24
  %332 = getelementptr inbounds %struct.tree_real_cst, ptr %3, i64 0, i32 1
  %333 = load ptr, ptr %332, align 8, !tbaa !17
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(32) %6, ptr noundef nonnull align 8 dereferenceable(32) %333, i64 32, i1 false), !tbaa.struct !29
  %334 = call i64 @real_to_integer(ptr noundef nonnull %6) #24
  %335 = and i64 %334, 1
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %341

337:                                              ; preds = %331
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7) #24
  %338 = ashr i64 %334, 63
  call void @real_from_integer(ptr noundef nonnull %7, i32 noundef 0, i64 noundef %334, i64 noundef %338, i32 noundef 0) #24
  %339 = call zeroext i8 @real_identical(ptr noundef nonnull %6, ptr noundef nonnull %7) #24
  %340 = icmp eq i8 %339, 0
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7) #24
  br i1 %340, label %341, label %342

341:                                              ; preds = %331, %337
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  br label %343

342:                                              ; preds = %337
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6) #24
  br label %359

343:                                              ; preds = %341, %327
  %344 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %359

345:                                              ; preds = %14, %9, %5
  %346 = getelementptr inbounds %struct.tree_type, ptr %0, i64 0, i32 6
  %347 = load i32, ptr %346, align 4
  %348 = and i32 %347, 1023
  %349 = icmp eq i32 %348, 1
  br i1 %349, label %350, label %354

350:                                              ; preds = %345
  %351 = load i64, ptr %0, align 8
  %352 = and i64 %351, 2097152
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %358, label %354

354:                                              ; preds = %350, %345
  %355 = load i32, ptr getelementptr inbounds ([0 x i32], ptr @tree_code_type, i64 0, i64 59), align 4, !tbaa !17
  %356 = freeze i32 %355
  %357 = icmp eq i32 %356, 5
  br i1 %357, label %359, label %358

358:                                              ; preds = %354, %350
  br label %359

359:                                              ; preds = %358, %354, %342, %320, %307, %310, %300, %303, %81, %284, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %14, %343, %325, %314, %298, %296
  %360 = phi i8 [ 1, %342 ], [ %344, %343 ], [ %326, %325 ], [ %315, %314 ], [ %299, %298 ], [ %297, %296 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %14 ], [ 1, %284 ], [ 1, %81 ], [ 1, %300 ], [ %306, %303 ], [ 0, %307 ], [ %313, %310 ], [ 1, %320 ], [ 0, %358 ], [ 1, %354 ]
  ret i8 %360
}

declare i64 @real_to_integer(ptr noundef) local_unnamed_addr #3

declare void @real_from_integer(ptr noundef, i32 noundef, i64 noundef, i64 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_invalid_nonnegative_warnv_p(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #10 {
  %3 = load i64, ptr %0, align 8
  %4 = trunc i64 %3 to i32
  %5 = and i32 %4, 65535
  %6 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %8, 2097152
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %95

11:                                               ; preds = %2
  %12 = trunc i64 %3 to i16
  switch i16 %12, label %80 [
    i16 55, label %13
    i16 59, label %48
    i16 52, label %67
    i16 53, label %67
    i16 58, label %71
    i16 120, label %76
  ]

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %15 = load ptr, ptr %14, align 8, !tbaa !17
  %16 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %17 = load ptr, ptr %16, align 8, !tbaa !17
  %18 = load i64, ptr %17, align 8
  %19 = and i64 %18, 65535
  %20 = icmp eq i64 %19, 19
  br i1 %20, label %23, label %21

21:                                               ; preds = %13
  %22 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef nonnull %17, ptr noundef %1)
  br label %95

23:                                               ; preds = %13, %37
  %24 = phi i64 [ %39, %37 ], [ %18, %13 ]
  %25 = phi ptr [ %38, %37 ], [ %17, %13 ]
  %26 = trunc i64 %24 to i16
  switch i16 %26, label %95 [
    i16 58, label %27
    i16 131, label %31
    i16 130, label %31
    i16 147, label %35
    i16 53, label %40
  ]

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 1
  %29 = load ptr, ptr %28, align 8, !tbaa !17
  %30 = tail call ptr @expr_last(ptr noundef %29) #24
  br label %37

31:                                               ; preds = %23, %23
  %32 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 0, i32 3
  %33 = load ptr, ptr %32, align 8, !tbaa !17
  %34 = tail call ptr @expr_last(ptr noundef %33) #24
  br label %37

35:                                               ; preds = %23
  %36 = tail call ptr @expr_last(ptr noundef nonnull %25) #24
  br label %37

37:                                               ; preds = %31, %35, %27
  %38 = phi ptr [ %30, %27 ], [ %34, %31 ], [ %36, %35 ]
  %39 = load i64, ptr %38, align 8
  br label %23

40:                                               ; preds = %23
  %41 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 0, i32 3
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = icmp eq ptr %42, %15
  br i1 %43, label %44, label %95

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.tree_exp, ptr %25, i64 1
  %46 = load ptr, ptr %45, align 8, !tbaa !17
  %47 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %46, ptr noundef %1)
  br label %95

48:                                               ; preds = %11
  %49 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = getelementptr inbounds %struct.tree_int_cst, ptr %50, i64 0, i32 1
  %52 = load i64, ptr %51, align 8, !tbaa !17
  %53 = trunc i64 %52 to i32
  %54 = icmp sgt i32 %53, 3
  br i1 %54, label %55, label %62

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = icmp eq i32 %53, 4
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 1
  %61 = load ptr, ptr %60, align 8, !tbaa !17
  br label %62

62:                                               ; preds = %48, %55, %59
  %63 = phi ptr [ %57, %59 ], [ %57, %55 ], [ null, %48 ]
  %64 = phi ptr [ %61, %59 ], [ null, %55 ], [ null, %48 ]
  %65 = tail call ptr @get_callee_fndecl(ptr noundef nonnull %0) #24
  %66 = tail call zeroext i8 @tree_call_nonnegative_warnv_p(ptr noundef nonnull %7, ptr noundef %65, ptr noundef %63, ptr noundef %64, ptr noundef %1)
  br label %95

67:                                               ; preds = %11, %11
  %68 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %69 = load ptr, ptr %68, align 8, !tbaa !17
  %70 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %69, ptr noundef %1)
  br label %95

71:                                               ; preds = %11
  %72 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %73 = load ptr, ptr %72, align 8, !tbaa !17
  %74 = tail call ptr @expr_last(ptr noundef %73) #24
  %75 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %74, ptr noundef %1)
  br label %95

76:                                               ; preds = %11
  %77 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %78 = load ptr, ptr %77, align 8, !tbaa !17
  %79 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %78, ptr noundef %1)
  br label %95

80:                                               ; preds = %11
  %81 = getelementptr inbounds %struct.tree_type, ptr %7, i64 0, i32 6
  %82 = load i32, ptr %81, align 4
  %83 = and i32 %82, 1023
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %94, label %85

85:                                               ; preds = %80
  %86 = and i64 %3, 65535
  %87 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %86
  %88 = load i32, ptr %87, align 4, !tbaa !17
  %89 = freeze i32 %88
  %90 = icmp eq i32 %89, 5
  %91 = add nsw i32 %5, -91
  %92 = icmp ult i32 %91, 6
  %93 = or i1 %92, %90
  br i1 %93, label %95, label %94

94:                                               ; preds = %80, %85
  br label %95

95:                                               ; preds = %23, %94, %85, %21, %44, %40, %2, %76, %71, %67, %62
  %96 = phi i8 [ %79, %76 ], [ %75, %71 ], [ %70, %67 ], [ %66, %62 ], [ 1, %2 ], [ %47, %44 ], [ %22, %21 ], [ 0, %40 ], [ 0, %94 ], [ 1, %85 ], [ 0, %23 ]
  ret i8 %96
}

declare ptr @expr_last(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_unary_nonzero_warnv_p(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr nocapture noundef writeonly %3) local_unnamed_addr #10 {
  switch i32 %0, label %23 [
    i32 82, label %5
    i32 116, label %7
    i32 117, label %21
  ]

5:                                                ; preds = %4
  %6 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef %3)
  br label %23

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.tree_common, ptr %2, i64 0, i32 2
  %9 = load ptr, ptr %8, align 8, !tbaa !17
  %10 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 6
  %11 = load i32, ptr %10, align 4
  %12 = and i32 %11, 1023
  %13 = getelementptr inbounds %struct.tree_type, ptr %9, i64 0, i32 6
  %14 = load i32, ptr %13, align 4
  %15 = and i32 %14, 1023
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %23, label %17

17:                                               ; preds = %7
  %18 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef nonnull %2, ptr noundef %3)
  %19 = icmp ne i8 %18, 0
  %20 = zext i1 %19 to i8
  br label %23

21:                                               ; preds = %4
  %22 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef %3)
  br label %23

23:                                               ; preds = %4, %7, %17, %21, %5
  %24 = phi i8 [ %22, %21 ], [ %6, %5 ], [ 0, %7 ], [ %20, %17 ], [ 0, %4 ]
  ret i8 %24
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #10 {
  br label %3

3:                                                ; preds = %61, %2
  %4 = phi ptr [ %0, %2 ], [ %62, %61 ]
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i16
  switch i16 %8, label %28 [
    i16 6, label %9
    i16 7, label %9
    i16 8, label %9
    i16 10, label %9
    i16 12, label %9
  ]

9:                                                ; preds = %3, %3, %3, %3, %3
  %10 = load i64, ptr %4, align 8
  %11 = and i64 %10, 65535
  %12 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %11
  %13 = load i32, ptr %12, align 4, !tbaa !17
  switch i32 %13, label %44 [
    i32 6, label %14
    i32 7, label %34
    i32 5, label %34
    i32 1, label %42
    i32 3, label %42
    i32 4, label %42
  ]

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = trunc i64 %10 to i16
  switch i16 %17, label %28 [
    i16 82, label %61
    i16 116, label %18
    i16 117, label %61
  ]

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %20 = load ptr, ptr %19, align 8, !tbaa !17
  %21 = getelementptr inbounds %struct.tree_type, ptr %6, i64 0, i32 6
  %22 = load i32, ptr %21, align 4
  %23 = and i32 %22, 1023
  %24 = getelementptr inbounds %struct.tree_type, ptr %20, i64 0, i32 6
  %25 = load i32, ptr %24, align 4
  %26 = and i32 %25, 1023
  %27 = icmp ult i32 %23, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %18, %65, %54, %46, %42, %34, %14, %44, %3, %30
  %29 = phi i8 [ %33, %30 ], [ %66, %65 ], [ %55, %54 ], [ %53, %46 ], [ %43, %42 ], [ %41, %34 ], [ 0, %18 ], [ 0, %14 ], [ 0, %44 ], [ 0, %3 ]
  ret i8 %29

30:                                               ; preds = %18
  %31 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef nonnull %16, ptr noundef %1)
  %32 = icmp ne i8 %31, 0
  %33 = zext i1 %32 to i8
  br label %28

34:                                               ; preds = %9, %9
  %35 = trunc i64 %10 to i32
  %36 = and i32 %35, 65535
  %37 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = tail call zeroext i8 @tree_binary_nonzero_warnv_p(i32 noundef %36, ptr noundef nonnull %6, ptr noundef %38, ptr noundef %40, ptr noundef %1)
  br label %28

42:                                               ; preds = %9, %9, %9
  %43 = tail call zeroext i8 @tree_single_nonzero_warnv_p(ptr noundef nonnull %4, ptr noundef %1), !range !40
  br label %28

44:                                               ; preds = %9
  %45 = trunc i64 %10 to i16
  switch i16 %45, label %28 [
    i16 59, label %65
    i16 93, label %46
    i16 94, label %46
    i16 95, label %46
    i16 56, label %54
    i16 51, label %54
    i16 50, label %54
    i16 148, label %54
    i16 121, label %54
    i16 150, label %54
    i16 141, label %54
    i16 52, label %56
    i16 53, label %56
    i16 58, label %56
    i16 120, label %63
  ]

46:                                               ; preds = %44, %44, %44
  %47 = trunc i64 %10 to i32
  %48 = and i32 %47, 65535
  %49 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %50 = load ptr, ptr %49, align 8, !tbaa !17
  %51 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = tail call zeroext i8 @tree_binary_nonzero_warnv_p(i32 noundef %48, ptr noundef nonnull %6, ptr noundef %50, ptr noundef %52, ptr noundef %1)
  br label %28

54:                                               ; preds = %44, %44, %44, %44, %44, %44, %44
  %55 = tail call zeroext i8 @tree_single_nonzero_warnv_p(ptr noundef nonnull %4, ptr noundef %1), !range !40
  br label %28

56:                                               ; preds = %44, %44, %44
  %57 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  br label %58

58:                                               ; preds = %63, %56
  %59 = phi ptr [ %57, %56 ], [ %64, %63 ]
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  br label %61

61:                                               ; preds = %58, %14, %14
  %62 = phi ptr [ %16, %14 ], [ %16, %14 ], [ %60, %58 ]
  br label %3

63:                                               ; preds = %44
  %64 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  br label %58

65:                                               ; preds = %44
  %66 = tail call zeroext i8 @alloca_call_p(ptr noundef nonnull %4) #24
  br label %28
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_binary_nonzero_warnv_p(i32 noundef %0, ptr nocapture noundef readonly %1, ptr noundef %2, ptr noundef %3, ptr nocapture noundef writeonly %4) local_unnamed_addr #10 {
  %6 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %6) #24
  switch i32 %0, label %92 [
    i32 66, label %7
    i32 63, label %7
    i32 65, label %33
    i32 80, label %53
    i32 81, label %63
    i32 87, label %85
  ]

7:                                                ; preds = %5, %5
  %8 = load i64, ptr %1, align 8
  %9 = and i64 %8, 2097152
  %10 = icmp eq i64 %9, 0
  %11 = load i32, ptr @flag_wrapv, align 4
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %10, i1 %12, i1 false
  %14 = load i32, ptr @flag_trapv, align 4
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %13, i1 %15, i1 false
  %17 = load i32, ptr @flag_strict_overflow, align 4
  %18 = icmp ne i32 %17, 0
  %19 = select i1 %16, i1 %18, i1 false
  br i1 %19, label %20, label %92

20:                                               ; preds = %7
  %21 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef nonnull %6)
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %92, label %23

23:                                               ; preds = %20
  %24 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %92, label %26

26:                                               ; preds = %23
  %27 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef %4)
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %92

29:                                               ; preds = %26
  %30 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef %4)
  %31 = icmp ne i8 %30, 0
  %32 = zext i1 %31 to i8
  br label %92

33:                                               ; preds = %5
  %34 = load i64, ptr %1, align 8
  %35 = and i64 %34, 2097152
  %36 = icmp eq i64 %35, 0
  %37 = load i32, ptr @flag_wrapv, align 4
  %38 = icmp eq i32 %37, 0
  %39 = select i1 %36, i1 %38, i1 false
  %40 = load i32, ptr @flag_trapv, align 4
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %39, i1 %41, i1 false
  %43 = load i32, ptr @flag_strict_overflow, align 4
  %44 = icmp ne i32 %43, 0
  %45 = select i1 %42, i1 %44, i1 false
  br i1 %45, label %46, label %92

46:                                               ; preds = %33
  %47 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef %4)
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %92, label %49

49:                                               ; preds = %46
  %50 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef %4)
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %92, label %52

52:                                               ; preds = %49
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %92

53:                                               ; preds = %5
  store i8 0, ptr %6, align 1, !tbaa !17
  %54 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef nonnull %6)
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %92, label %56

56:                                               ; preds = %53
  %57 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %58 = icmp ne i8 %57, 0
  %59 = load i8, ptr %6, align 1
  %60 = icmp ne i8 %59, 0
  %61 = select i1 %58, i1 %60, i1 false
  br i1 %61, label %62, label %92

62:                                               ; preds = %56
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %92

63:                                               ; preds = %5
  store i8 0, ptr %6, align 1, !tbaa !17
  %64 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef nonnull %6)
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %63
  %67 = load i8, ptr %6, align 1, !tbaa !17
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %70, label %69

69:                                               ; preds = %66
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %70

70:                                               ; preds = %69, %66
  %71 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef %4)
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %92

73:                                               ; preds = %70
  %74 = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %2, ptr noundef %4)
  br label %92

75:                                               ; preds = %63
  %76 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %92, label %78

78:                                               ; preds = %75
  %79 = call zeroext i8 @tree_expr_nonnegative_warnv_p(ptr noundef %3, ptr noundef nonnull %6)
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %92, label %81

81:                                               ; preds = %78
  %82 = load i8, ptr %6, align 1, !tbaa !17
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %92, label %84

84:                                               ; preds = %81
  store i8 1, ptr %4, align 1, !tbaa !17
  br label %92

85:                                               ; preds = %5
  %86 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %3, ptr noundef %4)
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %85
  %89 = tail call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %2, ptr noundef %4)
  %90 = icmp ne i8 %89, 0
  %91 = zext i1 %90 to i8
  br label %92

92:                                               ; preds = %7, %46, %49, %33, %62, %56, %53, %75, %78, %5, %85, %88, %81, %84, %70, %26, %29, %20, %23, %73, %52
  %93 = phi i8 [ %74, %73 ], [ 1, %52 ], [ 0, %23 ], [ 0, %20 ], [ 1, %26 ], [ %32, %29 ], [ 1, %70 ], [ 1, %84 ], [ 1, %81 ], [ 1, %85 ], [ %91, %88 ], [ 0, %5 ], [ 0, %78 ], [ 0, %75 ], [ 0, %53 ], [ 0, %56 ], [ 0, %62 ], [ 0, %33 ], [ 0, %49 ], [ 0, %46 ], [ 0, %7 ]
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %6) #24
  ret i8 %93
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local zeroext i8 @tree_single_nonzero_warnv_p(ptr noundef %0, ptr nocapture noundef writeonly %1) local_unnamed_addr #10 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %3) #24
  %4 = load i64, ptr %0, align 8
  %5 = trunc i64 %4 to i16
  switch i16 %5, label %49 [
    i16 23, label %6
    i16 121, label %9
    i16 56, label %35
  ]

6:                                                ; preds = %2
  %7 = tail call i32 @integer_zerop(ptr noundef nonnull %0) #24
  %8 = icmp eq i32 %7, 0
  br label %49

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = tail call ptr @get_base_address(ptr noundef %11) #24
  %13 = icmp eq ptr %12, null
  br i1 %13, label %49, label %14

14:                                               ; preds = %9
  %15 = load i64, ptr %12, align 8
  %16 = and i64 %15, 65535
  %17 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %16
  %18 = load i32, ptr %17, align 4, !tbaa !17
  %19 = icmp eq i32 %18, 3
  br i1 %19, label %20, label %33

20:                                               ; preds = %14
  %21 = load i32, ptr @flag_delete_null_pointer_checks, align 4, !tbaa !21
  %22 = icmp ne i32 %21, 0
  %23 = and i64 %15, 67174399
  %24 = icmp eq i64 %23, 32
  %25 = or i1 %24, %22
  br i1 %25, label %26, label %33

26:                                               ; preds = %20
  %27 = trunc i64 %15 to i16
  switch i16 %27, label %49 [
    i16 32, label %28
    i16 29, label %28
  ]

28:                                               ; preds = %26, %26
  %29 = getelementptr inbounds %struct.tree_decl_with_vis, ptr %12, i64 0, i32 4
  %30 = load i32, ptr %29, align 8
  %31 = and i32 %30, 128
  %32 = icmp eq i32 %31, 0
  br label %49

33:                                               ; preds = %20, %14
  %34 = icmp eq i32 %18, 1
  br label %49

35:                                               ; preds = %2
  store i8 0, ptr %3, align 1, !tbaa !17
  %36 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %37 = load ptr, ptr %36, align 8, !tbaa !17
  %38 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %37, ptr noundef nonnull %3)
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1, i32 0, i32 1
  %42 = load ptr, ptr %41, align 8, !tbaa !17
  %43 = call zeroext i8 @tree_expr_nonzero_warnv_p(ptr noundef %42, ptr noundef nonnull %3)
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %40
  %46 = load i8, ptr %3, align 1, !tbaa !17
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  store i8 1, ptr %1, align 1, !tbaa !17
  br label %49

49:                                               ; preds = %40, %35, %2, %45, %48, %9, %26, %28, %33, %6
  %50 = phi i1 [ %8, %6 ], [ false, %9 ], [ %32, %28 ], [ true, %26 ], [ %34, %33 ], [ true, %48 ], [ true, %45 ], [ false, %2 ], [ false, %35 ], [ false, %40 ]
  %51 = zext i1 %50 to i8
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %3) #24
  ret i8 %51
}

declare ptr @get_base_address(ptr noundef) local_unnamed_addr #3

declare zeroext i8 @alloca_call_p(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_binary_to_constant(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3) local_unnamed_addr #10 {
  %5 = tail call ptr @fold_binary_loc(i32 noundef 0, i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3)
  %6 = icmp eq ptr %5, null
  br i1 %6, label %12, label %7

7:                                                ; preds = %4
  %8 = load i64, ptr %5, align 8
  %9 = and i64 %8, 131072
  %10 = icmp eq i64 %9, 0
  %11 = select i1 %10, ptr null, ptr %5
  br label %12

12:                                               ; preds = %7, %4
  %13 = phi ptr [ null, %4 ], [ %11, %7 ]
  ret ptr %13
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_unary_to_constant(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = tail call ptr @fold_unary_loc(i32 noundef 0, i32 noundef %0, ptr noundef %1, ptr noundef %2)
  %5 = icmp eq ptr %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = load i64, ptr %4, align 8
  %8 = and i64 %7, 131072
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, ptr null, ptr %4
  br label %11

11:                                               ; preds = %6, %3
  %12 = phi ptr [ null, %3 ], [ %10, %6 ]
  ret ptr %12
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_read_from_constant_string(ptr noundef %0) local_unnamed_addr #10 {
  %2 = alloca ptr, align 8
  %3 = load i64, ptr %0, align 8
  %4 = trunc i64 %3 to i16
  switch i16 %4, label %139 [
    i16 47, label %5
    i16 45, label %5
  ]

5:                                                ; preds = %1, %1
  %6 = getelementptr inbounds %struct.tree_common, ptr %0, i64 0, i32 2
  %7 = load ptr, ptr %6, align 8, !tbaa !17
  %8 = load i64, ptr %7, align 8
  %9 = and i64 %8, 65535
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %139

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 3
  %13 = load ptr, ptr %12, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %2) #24
  %14 = and i64 %3, 65535
  %15 = getelementptr inbounds [0 x i32], ptr @tree_code_type, i64 0, i64 %14
  %16 = load i32, ptr %15, align 4, !tbaa !17
  %17 = add i32 %16, -4
  %18 = icmp ult i32 %17, 7
  br i1 %18, label %19, label %22

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 0, i32 1
  %21 = load i32, ptr %20, align 8, !tbaa !17
  br label %22

22:                                               ; preds = %11, %19
  %23 = phi i32 [ %21, %19 ], [ 0, %11 ]
  %24 = icmp eq i64 %14, 47
  br i1 %24, label %25, label %27

25:                                               ; preds = %22
  %26 = call ptr @string_constant(ptr noundef %13, ptr noundef nonnull %2) #24
  br label %39

27:                                               ; preds = %22
  %28 = tail call ptr @array_ref_low_bound(ptr noundef nonnull %0) #24
  %29 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %30 = getelementptr inbounds %struct.tree_exp, ptr %0, i64 1
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = tail call ptr @fold_convert_loc(i32 noundef %23, ptr noundef %29, ptr noundef %31)
  store ptr %32, ptr %2, align 8, !tbaa !6
  %33 = tail call i32 @integer_zerop(ptr noundef %28) #24
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %27
  %36 = load ptr, ptr @sizetype_tab, align 16, !tbaa !6
  %37 = tail call ptr @fold_convert_loc(i32 noundef %23, ptr noundef %36, ptr noundef %28)
  %38 = tail call ptr @size_diffop_loc(i32 noundef %23, ptr noundef %32, ptr noundef %37)
  store ptr %38, ptr %2, align 8, !tbaa !6
  br label %39

39:                                               ; preds = %27, %35, %25
  %40 = phi ptr [ %26, %25 ], [ %13, %35 ], [ %13, %27 ]
  %41 = icmp eq ptr %40, null
  br i1 %41, label %128, label %42

42:                                               ; preds = %39
  %43 = load ptr, ptr %6, align 8, !tbaa !17
  %44 = load i64, ptr %43, align 8
  %45 = and i64 %44, 65535
  %46 = icmp eq i64 %45, 14
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = call i32 @vector_type_mode(ptr noundef nonnull %43) #24
  br label %54

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.tree_type, ptr %43, i64 0, i32 6
  %51 = load i32, ptr %50, align 4
  %52 = lshr i32 %51, 16
  %53 = and i32 %52, 255
  br label %54

54:                                               ; preds = %49, %47
  %55 = phi i32 [ %48, %47 ], [ %53, %49 ]
  %56 = getelementptr inbounds %struct.tree_common, ptr %40, i64 0, i32 2
  %57 = load ptr, ptr %56, align 8, !tbaa !17
  %58 = getelementptr inbounds %struct.tree_common, ptr %57, i64 0, i32 2
  %59 = load ptr, ptr %58, align 8, !tbaa !17
  %60 = load i64, ptr %59, align 8
  %61 = and i64 %60, 65535
  %62 = icmp eq i64 %61, 14
  br i1 %62, label %63, label %65

63:                                               ; preds = %54
  %64 = call i32 @vector_type_mode(ptr noundef nonnull %59) #24
  br label %70

65:                                               ; preds = %54
  %66 = getelementptr inbounds %struct.tree_type, ptr %59, i64 0, i32 6
  %67 = load i32, ptr %66, align 4
  %68 = lshr i32 %67, 16
  %69 = and i32 %68, 255
  br label %70

70:                                               ; preds = %65, %63
  %71 = phi i32 [ %64, %63 ], [ %69, %65 ]
  %72 = icmp eq i32 %55, %71
  br i1 %72, label %73, label %128

73:                                               ; preds = %70
  %74 = load i64, ptr %40, align 8
  %75 = and i64 %74, 65535
  %76 = icmp eq i64 %75, 28
  br i1 %76, label %77, label %128

77:                                               ; preds = %73
  %78 = load ptr, ptr %2, align 8, !tbaa !6
  %79 = load i64, ptr %78, align 8
  %80 = and i64 %79, 65535
  %81 = icmp eq i64 %80, 23
  br i1 %81, label %82, label %128

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.tree_string, ptr %40, i64 0, i32 1
  %84 = load i32, ptr %83, align 8, !tbaa !17
  %85 = sext i32 %84 to i64
  %86 = call i32 @compare_tree_int(ptr noundef nonnull %78, i64 noundef %85) #24
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %128

88:                                               ; preds = %82
  %89 = load ptr, ptr %56, align 8, !tbaa !17
  %90 = getelementptr inbounds %struct.tree_common, ptr %89, i64 0, i32 2
  %91 = load ptr, ptr %90, align 8, !tbaa !17
  %92 = load i64, ptr %91, align 8
  %93 = and i64 %92, 65535
  %94 = icmp eq i64 %93, 14
  br i1 %94, label %95, label %97

95:                                               ; preds = %88
  %96 = call i32 @vector_type_mode(ptr noundef nonnull %91) #24
  br label %102

97:                                               ; preds = %88
  %98 = getelementptr inbounds %struct.tree_type, ptr %91, i64 0, i32 6
  %99 = load i32, ptr %98, align 4
  %100 = lshr i32 %99, 16
  %101 = and i32 %100, 255
  br label %102

102:                                              ; preds = %97, %95
  %103 = phi i32 [ %96, %95 ], [ %101, %97 ]
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds [87 x i8], ptr @mode_class, i64 0, i64 %104
  %106 = load i8, ptr %105, align 1, !tbaa !17
  %107 = icmp eq i8 %106, 2
  br i1 %107, label %108, label %128

108:                                              ; preds = %102
  %109 = load ptr, ptr %56, align 8, !tbaa !17
  %110 = getelementptr inbounds %struct.tree_common, ptr %109, i64 0, i32 2
  %111 = load ptr, ptr %110, align 8, !tbaa !17
  %112 = load i64, ptr %111, align 8
  %113 = and i64 %112, 65535
  %114 = icmp eq i64 %113, 14
  br i1 %114, label %115, label %117

115:                                              ; preds = %108
  %116 = call i32 @vector_type_mode(ptr noundef nonnull %111) #24
  br label %122

117:                                              ; preds = %108
  %118 = getelementptr inbounds %struct.tree_type, ptr %111, i64 0, i32 6
  %119 = load i32, ptr %118, align 4
  %120 = lshr i32 %119, 16
  %121 = and i32 %120, 255
  br label %122

122:                                              ; preds = %117, %115
  %123 = phi i32 [ %116, %115 ], [ %121, %117 ]
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [87 x i8], ptr @mode_size, i64 0, i64 %124
  %126 = load i8, ptr %125, align 1, !tbaa !17
  %127 = icmp eq i8 %126, 1
  br i1 %127, label %129, label %128

128:                                              ; preds = %122, %102, %82, %77, %73, %70, %39
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #24
  br label %139

129:                                              ; preds = %122
  %130 = load ptr, ptr %6, align 8, !tbaa !17
  %131 = getelementptr inbounds %struct.tree_string, ptr %40, i64 0, i32 2
  %132 = load ptr, ptr %2, align 8, !tbaa !6
  %133 = getelementptr inbounds %struct.tree_int_cst, ptr %132, i64 0, i32 1
  %134 = load i64, ptr %133, align 8, !tbaa !17
  %135 = getelementptr inbounds i8, ptr %131, i64 %134
  %136 = load i8, ptr %135, align 1, !tbaa !17
  %137 = sext i8 %136 to i64
  %138 = call ptr @build_int_cst_type(ptr noundef %130, i64 noundef %137) #24
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %2) #24
  br label %139

139:                                              ; preds = %5, %1, %128, %129
  %140 = phi ptr [ %138, %129 ], [ null, %128 ], [ null, %1 ], [ null, %5 ]
  ret ptr %140
}

declare ptr @string_constant(ptr noundef, ptr noundef) local_unnamed_addr #3

declare ptr @array_ref_low_bound(ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_build_cleanup_point_expr(ptr noundef %0, ptr noundef %1) local_unnamed_addr #10 {
  %3 = load i64, ptr %1, align 8
  %4 = and i64 %3, 65536
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %25, label %6

6:                                                ; preds = %2
  %7 = and i64 %3, 65535
  %8 = icmp eq i64 %7, 135
  br i1 %8, label %9, label %23

9:                                                ; preds = %6
  %10 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %11 = load ptr, ptr %10, align 8, !tbaa !17
  %12 = icmp eq ptr %11, null
  br i1 %12, label %25, label %13

13:                                               ; preds = %9
  %14 = load i64, ptr %11, align 8
  %15 = and i64 %14, 65536
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.tree_exp, ptr %11, i64 1
  %19 = load ptr, ptr %18, align 8, !tbaa !17
  %20 = load i64, ptr %19, align 8
  %21 = and i64 %20, 65536
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %17, %6
  %24 = tail call ptr @build1_stat(i32 noundef 61, ptr noundef %0, ptr noundef nonnull %1) #24
  br label %25

25:                                               ; preds = %9, %13, %17, %2, %23
  %26 = phi ptr [ %1, %17 ], [ %24, %23 ], [ %1, %2 ], [ %1, %13 ], [ %1, %9 ]
  ret ptr %26
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_indirect_ref_1(i32 noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #10 {
  %4 = tail call ptr @tree_strip_nop_conversions(ptr noundef %2) #24
  %5 = getelementptr inbounds %struct.tree_common, ptr %4, i64 0, i32 2
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = load i64, ptr %6, align 8
  %8 = trunc i64 %7 to i16
  switch i16 %8, label %186 [
    i16 10, label %9
    i16 12, label %9
  ]

9:                                                ; preds = %3, %3
  %10 = load i64, ptr %4, align 8
  %11 = trunc i64 %10 to i16
  switch i16 %11, label %112 [
    i16 121, label %12
    i16 66, label %66
  ]

12:                                               ; preds = %9
  %13 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = getelementptr inbounds %struct.tree_common, ptr %14, i64 0, i32 2
  %16 = load ptr, ptr %15, align 8, !tbaa !17
  %17 = load i64, ptr %14, align 8
  %18 = and i64 %17, 65535
  %19 = icmp eq i64 %18, 33
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.tree_decl_common, ptr %14, i64 0, i32 5
  %22 = load ptr, ptr %21, align 8, !tbaa !17
  br label %186

23:                                               ; preds = %12
  %24 = icmp eq ptr %16, %1
  br i1 %24, label %25, label %29

25:                                               ; preds = %23
  %26 = tail call ptr @fold_read_from_constant_string(ptr noundef nonnull %14)
  %27 = icmp eq ptr %26, null
  %28 = select i1 %27, ptr %14, ptr %26
  br label %186

29:                                               ; preds = %23
  %30 = load i64, ptr %16, align 8
  %31 = trunc i64 %30 to i16
  switch i16 %31, label %112 [
    i16 15, label %32
    i16 13, label %50
    i16 14, label %56
  ]

32:                                               ; preds = %29
  %33 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %34 = load ptr, ptr %33, align 8, !tbaa !17
  %35 = icmp eq ptr %34, %1
  br i1 %35, label %36, label %112

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.tree_type, ptr %16, i64 0, i32 1
  %38 = load ptr, ptr %37, align 8, !tbaa !17
  %39 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 17), align 8, !tbaa !6
  %40 = icmp eq ptr %38, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.tree_type, ptr %38, i64 0, i32 13
  %43 = load ptr, ptr %42, align 8, !tbaa !17
  %44 = icmp eq ptr %43, null
  %45 = select i1 %44, ptr %39, ptr %43
  br label %46

46:                                               ; preds = %41, %36
  %47 = phi ptr [ %39, %36 ], [ %45, %41 ]
  %48 = tail call ptr @build4_stat(i32 noundef 45, ptr noundef %1, ptr noundef nonnull %14, ptr noundef %47, ptr noundef null, ptr noundef null) #24
  %49 = getelementptr inbounds %struct.tree_exp, ptr %48, i64 0, i32 1
  store i32 %0, ptr %49, align 8, !tbaa !17
  br label %186

50:                                               ; preds = %29
  %51 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %52 = load ptr, ptr %51, align 8, !tbaa !17
  %53 = icmp eq ptr %52, %1
  br i1 %53, label %54, label %112

54:                                               ; preds = %50
  %55 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 43, ptr noundef %1, ptr noundef nonnull %14)
  br label %186

56:                                               ; preds = %29
  %57 = getelementptr inbounds %struct.tree_common, ptr %16, i64 0, i32 2
  %58 = load ptr, ptr %57, align 8, !tbaa !17
  %59 = icmp eq ptr %58, %1
  br i1 %59, label %60, label %112

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %62 = load ptr, ptr %61, align 8, !tbaa !17
  %63 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %64 = tail call ptr @build_int_cst(ptr noundef %63, i64 noundef 0) #24
  %65 = tail call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 42, ptr noundef %1, ptr noundef nonnull %14, ptr noundef %62, ptr noundef %64)
  br label %186

66:                                               ; preds = %9
  %67 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  %69 = load i64, ptr %68, align 8
  %70 = and i64 %69, 65535
  %71 = icmp eq i64 %70, 23
  br i1 %71, label %72, label %112

72:                                               ; preds = %66
  %73 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %74 = load ptr, ptr %73, align 8, !tbaa !17
  %75 = tail call ptr @tree_strip_nop_conversions(ptr noundef %74) #24
  %76 = load i64, ptr %75, align 8
  %77 = and i64 %76, 65535
  %78 = icmp eq i64 %77, 121
  br i1 %78, label %79, label %112

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.tree_common, ptr %75, i64 0, i32 2
  %81 = load ptr, ptr %80, align 8, !tbaa !17
  %82 = getelementptr inbounds %struct.tree_common, ptr %81, i64 0, i32 2
  %83 = load ptr, ptr %82, align 8, !tbaa !17
  %84 = load i64, ptr %83, align 8
  %85 = and i64 %84, 65535
  %86 = icmp eq i64 %85, 14
  br i1 %86, label %87, label %112

87:                                               ; preds = %79
  %88 = getelementptr inbounds %struct.tree_common, ptr %83, i64 0, i32 2
  %89 = load ptr, ptr %88, align 8, !tbaa !17
  %90 = icmp eq ptr %89, %1
  br i1 %90, label %91, label %112

91:                                               ; preds = %87
  %92 = tail call i64 @tree_low_cst(ptr noundef nonnull %68, i32 noundef 0) #24
  %93 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 2
  %94 = load ptr, ptr %93, align 8, !tbaa !17
  %95 = tail call i64 @tree_low_cst(ptr noundef %94, i32 noundef 0) #24
  %96 = sdiv i64 %95, 8
  %97 = shl nsw i64 %92, 3
  %98 = load ptr, ptr getelementptr inbounds ([4 x ptr], ptr @sizetype_tab, i64 0, i64 2), align 16, !tbaa !6
  %99 = tail call ptr @build_int_cst(ptr noundef %98, i64 noundef %97) #24
  %100 = udiv i64 %92, %96
  %101 = load ptr, ptr %82, align 8, !tbaa !17
  %102 = getelementptr inbounds %struct.tree_type, ptr %101, i64 0, i32 6
  %103 = load i32, ptr %102, align 4
  %104 = and i32 %103, 1023
  %105 = zext i32 %104 to i64
  %106 = shl nuw i64 1, %105
  %107 = icmp ugt i64 %100, %106
  br i1 %107, label %112, label %108

108:                                              ; preds = %91
  %109 = getelementptr inbounds %struct.tree_exp, ptr %75, i64 0, i32 3
  %110 = load ptr, ptr %109, align 8, !tbaa !17
  %111 = tail call ptr @fold_build3_stat_loc(i32 noundef %0, i32 noundef 42, ptr noundef nonnull %1, ptr noundef %110, ptr noundef %94, ptr noundef %99)
  br label %186

112:                                              ; preds = %9, %56, %50, %32, %29, %91, %72, %79, %87, %66
  %113 = load i64, ptr %4, align 8
  %114 = and i64 %113, 65535
  %115 = icmp eq i64 %114, 66
  br i1 %115, label %116, label %150

116:                                              ; preds = %112
  %117 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 1
  %118 = load ptr, ptr %117, align 8, !tbaa !17
  %119 = load i64, ptr %118, align 8
  %120 = and i64 %119, 65535
  %121 = icmp eq i64 %120, 23
  br i1 %121, label %122, label %150

122:                                              ; preds = %116
  %123 = getelementptr inbounds %struct.tree_exp, ptr %4, i64 0, i32 3
  %124 = load ptr, ptr %123, align 8, !tbaa !17
  %125 = tail call ptr @tree_strip_nop_conversions(ptr noundef %124) #24
  %126 = load i64, ptr %125, align 8
  %127 = and i64 %126, 65535
  %128 = icmp eq i64 %127, 121
  br i1 %128, label %129, label %150

129:                                              ; preds = %122
  %130 = getelementptr inbounds %struct.tree_common, ptr %125, i64 0, i32 2
  %131 = load ptr, ptr %130, align 8, !tbaa !17
  %132 = getelementptr inbounds %struct.tree_common, ptr %131, i64 0, i32 2
  %133 = load ptr, ptr %132, align 8, !tbaa !17
  %134 = load i64, ptr %133, align 8
  %135 = and i64 %134, 65535
  %136 = icmp eq i64 %135, 13
  br i1 %136, label %137, label %150

137:                                              ; preds = %129
  %138 = getelementptr inbounds %struct.tree_common, ptr %133, i64 0, i32 2
  %139 = load ptr, ptr %138, align 8, !tbaa !17
  %140 = icmp eq ptr %139, %1
  br i1 %140, label %141, label %150

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.tree_type, ptr %1, i64 0, i32 3
  %143 = load ptr, ptr %142, align 8, !tbaa !17
  %144 = tail call i32 @tree_int_cst_equal(ptr noundef %143, ptr noundef nonnull %118) #24
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %150, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %struct.tree_exp, ptr %125, i64 0, i32 3
  %148 = load ptr, ptr %147, align 8, !tbaa !17
  %149 = tail call ptr @fold_build1_stat_loc(i32 noundef %0, i32 noundef 44, ptr noundef nonnull %1, ptr noundef %148)
  br label %186

150:                                              ; preds = %141, %122, %129, %137, %116, %112
  %151 = getelementptr inbounds %struct.tree_common, ptr %6, i64 0, i32 2
  %152 = load ptr, ptr %151, align 8, !tbaa !17
  %153 = load i64, ptr %152, align 8
  %154 = and i64 %153, 65535
  %155 = icmp eq i64 %154, 15
  br i1 %155, label %156, label %186

156:                                              ; preds = %150
  %157 = getelementptr inbounds %struct.tree_common, ptr %152, i64 0, i32 2
  %158 = load ptr, ptr %157, align 8, !tbaa !17
  %159 = icmp eq ptr %158, %1
  br i1 %159, label %160, label %186

160:                                              ; preds = %156
  %161 = load ptr, ptr getelementptr inbounds ([131 x ptr], ptr @global_trees, i64 0, i64 17), align 8, !tbaa !6
  %162 = load ptr, ptr %5, align 8, !tbaa !17
  %163 = getelementptr inbounds %struct.tree_common, ptr %162, i64 0, i32 2
  %164 = load ptr, ptr %163, align 8, !tbaa !17
  %165 = tail call ptr @fold_indirect_ref_1(i32 noundef %0, ptr noundef %164, ptr noundef nonnull %4)
  %166 = icmp eq ptr %165, null
  br i1 %166, label %167, label %170

167:                                              ; preds = %160
  %168 = tail call ptr @build1_stat(i32 noundef 47, ptr noundef %164, ptr noundef nonnull %4) #24
  %169 = getelementptr inbounds %struct.tree_exp, ptr %168, i64 0, i32 1
  store i32 %0, ptr %169, align 8, !tbaa !17
  br label %170

170:                                              ; preds = %160, %167
  %171 = phi ptr [ %168, %167 ], [ %165, %160 ]
  %172 = getelementptr inbounds %struct.tree_common, ptr %171, i64 0, i32 2
  %173 = load ptr, ptr %172, align 8, !tbaa !17
  %174 = getelementptr inbounds %struct.tree_type, ptr %173, i64 0, i32 1
  %175 = load ptr, ptr %174, align 8, !tbaa !17
  %176 = icmp eq ptr %175, null
  br i1 %176, label %182, label %177

177:                                              ; preds = %170
  %178 = getelementptr inbounds %struct.tree_type, ptr %175, i64 0, i32 13
  %179 = load ptr, ptr %178, align 8, !tbaa !17
  %180 = icmp eq ptr %179, null
  %181 = select i1 %180, ptr %161, ptr %179
  br label %182

182:                                              ; preds = %177, %170
  %183 = phi ptr [ %161, %170 ], [ %181, %177 ]
  %184 = tail call ptr @build4_stat(i32 noundef 45, ptr noundef %1, ptr noundef nonnull %171, ptr noundef %183, ptr noundef null, ptr noundef null) #24
  %185 = getelementptr inbounds %struct.tree_exp, ptr %184, i64 0, i32 1
  store i32 %0, ptr %185, align 8, !tbaa !17
  br label %186

186:                                              ; preds = %60, %54, %46, %25, %20, %146, %108, %150, %156, %3, %182
  %187 = phi ptr [ %184, %182 ], [ %149, %146 ], [ %111, %108 ], [ null, %3 ], [ null, %156 ], [ null, %150 ], [ %65, %60 ], [ %55, %54 ], [ %48, %46 ], [ %28, %25 ], [ %22, %20 ]
  ret ptr %187
}

declare ptr @build4_stat(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) local_unnamed_addr #3

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @fold_indirect_ref_loc(i32 noundef %0, ptr noundef readonly %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %4 = load ptr, ptr %3, align 8, !tbaa !17
  %5 = getelementptr inbounds %struct.tree_exp, ptr %1, i64 0, i32 3
  %6 = load ptr, ptr %5, align 8, !tbaa !17
  %7 = tail call ptr @fold_indirect_ref_1(i32 noundef %0, ptr noundef %4, ptr noundef %6)
  %8 = icmp eq ptr %7, null
  %9 = select i1 %8, ptr %1, ptr %7
  ret ptr %9
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @round_up_loc(i32 noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 16264, ptr noundef nonnull @.str.1) #24
  br label %8

6:                                                ; preds = %3
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %83, label %8

8:                                                ; preds = %5, %6
  %9 = load i64, ptr %1, align 8
  %10 = and i64 %9, 65535
  %11 = icmp eq i64 %10, 23
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = sext i32 %2 to i64
  %16 = tail call ptr @build_int_cst(ptr noundef %14, i64 noundef %15) #24
  %17 = load ptr, ptr %13, align 8, !tbaa !17
  %18 = tail call i32 @multiple_of_p(ptr noundef %17, ptr noundef nonnull %1, ptr noundef %16)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %83

20:                                               ; preds = %12
  %21 = tail call i32 @llvm.ctpop.i32(i32 %2), !range !92
  %22 = icmp ult i32 %21, 2
  br i1 %22, label %23, label %72

23:                                               ; preds = %20
  %24 = load i64, ptr %1, align 8
  br label %30

25:                                               ; preds = %8
  %26 = tail call i32 @llvm.ctpop.i32(i32 %2), !range !92
  %27 = icmp ult i32 %26, 2
  br i1 %27, label %30, label %28

28:                                               ; preds = %25
  %29 = sext i32 %2 to i64
  br label %74

30:                                               ; preds = %23, %25
  %31 = phi i64 [ %24, %23 ], [ %9, %25 ]
  %32 = sub i32 0, %2
  %33 = and i64 %31, 65535
  %34 = icmp eq i64 %33, 23
  %35 = add nsw i32 %2, -1
  %36 = sext i32 %35 to i64
  br i1 %34, label %37, label %62

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1
  %39 = load i64, ptr %38, align 8, !tbaa !17
  %40 = and i64 %39, %36
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %83, label %42

42:                                               ; preds = %37
  %43 = trunc i64 %31 to i32
  %44 = lshr i32 %43, 27
  %45 = trunc i32 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.tree_int_cst, ptr %1, i64 0, i32 1, i32 1
  %48 = load i64, ptr %47, align 8, !tbaa !17
  %49 = sext i32 %32 to i64
  %50 = and i64 %39, %49
  %51 = sext i32 %2 to i64
  %52 = add i64 %50, %51
  %53 = icmp eq i64 %52, 0
  %54 = add i64 %48, 1
  %55 = select i1 %53, i64 %54, i64 %48
  %56 = or i64 %54, %52
  %57 = icmp eq i64 %56, 0
  %58 = select i1 %57, i8 1, i8 %46
  %59 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %60 = load ptr, ptr %59, align 8, !tbaa !17
  %61 = tail call ptr @force_fit_type_double(ptr noundef %60, i64 noundef %52, i64 noundef %55, i32 noundef -1, i8 noundef zeroext %58)
  br label %83

62:                                               ; preds = %30
  %63 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %64 = load ptr, ptr %63, align 8, !tbaa !17
  %65 = tail call ptr @build_int_cst(ptr noundef %64, i64 noundef %36) #24
  %66 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 63, ptr noundef nonnull %1, ptr noundef %65)
  %67 = getelementptr inbounds %struct.tree_common, ptr %66, i64 0, i32 2
  %68 = load ptr, ptr %67, align 8, !tbaa !17
  %69 = sext i32 %32 to i64
  %70 = tail call ptr @build_int_cst(ptr noundef %68, i64 noundef %69) #24
  %71 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 89, ptr noundef %66, ptr noundef %70)
  br label %83

72:                                               ; preds = %20
  %73 = icmp eq ptr %16, null
  br i1 %73, label %74, label %79

74:                                               ; preds = %28, %72
  %75 = phi i64 [ %29, %28 ], [ %15, %72 ]
  %76 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %77 = load ptr, ptr %76, align 8, !tbaa !17
  %78 = tail call ptr @build_int_cst(ptr noundef %77, i64 noundef %75) #24
  br label %79

79:                                               ; preds = %74, %72
  %80 = phi ptr [ %16, %72 ], [ %78, %74 ]
  %81 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 68, ptr noundef nonnull %1, ptr noundef %80)
  %82 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 65, ptr noundef %81, ptr noundef %80)
  br label %83

83:                                               ; preds = %62, %79, %42, %37, %12, %6
  %84 = phi ptr [ %1, %6 ], [ %1, %12 ], [ %61, %42 ], [ %1, %37 ], [ %71, %62 ], [ %82, %79 ]
  ret ptr %84
}

; Function Attrs: nounwind sspstrong uwtable
define dso_local ptr @round_down_loc(i32 noundef %0, ptr noundef %1, i32 noundef %2) local_unnamed_addr #10 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void @fancy_abort(ptr noundef nonnull @.str, i32 noundef 16334, ptr noundef nonnull @.str.1) #24
  br label %8

6:                                                ; preds = %3
  %7 = icmp eq i32 %2, 1
  br i1 %7, label %46, label %8

8:                                                ; preds = %5, %6
  %9 = load i64, ptr %1, align 8
  %10 = and i64 %9, 65535
  %11 = icmp eq i64 %10, 23
  br i1 %11, label %23, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %14 = load ptr, ptr %13, align 8, !tbaa !17
  %15 = sext i32 %2 to i64
  %16 = tail call ptr @build_int_cst(ptr noundef %14, i64 noundef %15) #24
  %17 = load ptr, ptr %13, align 8, !tbaa !17
  %18 = tail call i32 @multiple_of_p(ptr noundef %17, ptr noundef nonnull %1, ptr noundef %16)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %46

20:                                               ; preds = %12
  %21 = tail call i32 @llvm.ctpop.i32(i32 %2), !range !92
  %22 = icmp ult i32 %21, 2
  br i1 %22, label %28, label %35

23:                                               ; preds = %8
  %24 = tail call i32 @llvm.ctpop.i32(i32 %2), !range !92
  %25 = icmp ult i32 %24, 2
  br i1 %25, label %28, label %26

26:                                               ; preds = %23
  %27 = sext i32 %2 to i64
  br label %37

28:                                               ; preds = %23, %20
  %29 = sub nsw i32 0, %2
  %30 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %31 = load ptr, ptr %30, align 8, !tbaa !17
  %32 = sext i32 %29 to i64
  %33 = tail call ptr @build_int_cst(ptr noundef %31, i64 noundef %32) #24
  %34 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 89, ptr noundef nonnull %1, ptr noundef %33)
  br label %46

35:                                               ; preds = %20
  %36 = icmp eq ptr %16, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %26, %35
  %38 = phi i64 [ %27, %26 ], [ %15, %35 ]
  %39 = getelementptr inbounds %struct.tree_common, ptr %1, i64 0, i32 2
  %40 = load ptr, ptr %39, align 8, !tbaa !17
  %41 = tail call ptr @build_int_cst(ptr noundef %40, i64 noundef %38) #24
  br label %42

42:                                               ; preds = %37, %35
  %43 = phi ptr [ %16, %35 ], [ %41, %37 ]
  %44 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 69, ptr noundef nonnull %1, ptr noundef %43)
  %45 = tail call ptr @size_binop_loc(i32 noundef %0, i32 noundef 65, ptr noundef %44, ptr noundef %43)
  br label %46

46:                                               ; preds = %28, %42, %12, %6
  %47 = phi ptr [ %1, %6 ], [ %1, %12 ], [ %34, %28 ], [ %45, %42 ]
  ret ptr %47
}

declare zeroext i8 @cst_and_fits_in_hwi(ptr noundef) local_unnamed_addr #3

declare i64 @int_cst_value(ptr noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind willreturn memory(argmem: read)
declare i32 @bcmp(ptr nocapture, ptr nocapture, i64) local_unnamed_addr #22

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.abs.i64(i64, i1 immarg) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umin.i64(i64, i64) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctpop.i32(i32) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umax.i32(i32, i32) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #23

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.ctpop.i8(i8) #23

attributes #0 = { inlinehint nofree nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #2 = { inlinehint nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #5 = { inlinehint mustprogress nofree nounwind sspstrong willreturn memory(read) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #7 = { inlinehint mustprogress nofree nounwind sspstrong willreturn uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #8 = { mustprogress nofree nounwind willreturn "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #9 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: readwrite) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #10 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #11 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #13 = { mustprogress nofree nosync nounwind sspstrong willreturn memory(argmem: write) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(readwrite, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #15 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: none, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #16 = { nofree norecurse nosync nounwind sspstrong memory(read, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #17 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #18 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #19 = { inlinehint mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #20 = { mustprogress nofree norecurse nosync nounwind sspstrong willreturn memory(read, argmem: readwrite, inaccessiblemem: none) uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #21 = { mustprogress nofree nounwind willreturn memory(argmem: read) "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #22 = { nofree nounwind willreturn memory(argmem: read) }
attributes #23 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #24 = { nounwind }
attributes #25 = { "function-inline-cost-multiplier"="2" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"openmp", i32 51}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{!"clang version 17.0.6"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !7, i64 8}
!11 = !{!"_IO_FILE", !12, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !12, i64 112, !12, i64 116, !13, i64 120, !14, i64 128, !8, i64 130, !8, i64 131, !7, i64 136, !13, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !13, i64 184, !12, i64 192, !8, i64 196}
!12 = !{!"int", !8, i64 0}
!13 = !{!"long", !8, i64 0}
!14 = !{!"short", !8, i64 0}
!15 = !{!11, !7, i64 16}
!16 = !{!"branch_weights", i32 2000, i32 1}
!17 = !{!8, !8, i64 0}
!18 = !{!11, !7, i64 40}
!19 = !{!11, !7, i64 48}
!20 = !{!11, !12, i64 0}
!21 = !{!12, !12, i64 0}
!22 = distinct !{!22, !23}
!23 = !{!"llvm.loop.mustprogress"}
!24 = !{!13, !13, i64 0}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !23}
!27 = distinct !{!27, !23}
!28 = !{i32 0, i32 2}
!29 = !{i64 0, i64 4, !21, i64 0, i64 4, !21, i64 0, i64 4, !21, i64 0, i64 4, !21, i64 0, i64 4, !21, i64 0, i64 4, !21, i64 8, i64 24, !17}
!30 = !{!31, !8, i64 16}
!31 = !{!"fixed_value", !32, i64 0, !8, i64 16}
!32 = !{!"", !13, i64 0, !13, i64 8}
!33 = distinct !{!33, !23}
!34 = !{!35, !8, i64 47}
!35 = !{!"real_format", !7, i64 0, !7, i64 8, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !8, i64 44, !8, i64 45, !8, i64 46, !8, i64 47, !8, i64 48, !8, i64 49, !8, i64 50, !8, i64 51}
!36 = !{!35, !8, i64 46}
!37 = !{!35, !8, i64 49}
!38 = distinct !{!38, !23}
!39 = distinct !{!39, !23}
!40 = !{i8 0, i8 2}
!41 = !{!42, !7, i64 448}
!42 = !{!"lang_hooks", !7, i64 0, !13, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !43, i64 240, !44, i64 248, !45, i64 256, !46, i64 272, !47, i64 432, !48, i64 560, !7, i64 584, !7, i64 592, !7, i64 600, !7, i64 608, !7, i64 616, !7, i64 624, !7, i64 632, !7, i64 640, !7, i64 648, !7, i64 656, !7, i64 664, !8, i64 672}
!43 = !{!"lang_hooks_for_tree_inlining", !7, i64 0}
!44 = !{!"lang_hooks_for_callgraph", !7, i64 0}
!45 = !{!"lang_hooks_for_tree_dump", !7, i64 0, !7, i64 8}
!46 = !{!"lang_hooks_for_decls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152}
!47 = !{!"lang_hooks_for_types", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !8, i64 120}
!48 = !{!"lang_hooks_for_lto", !7, i64 0, !7, i64 8, !7, i64 16}
!49 = !{!35, !8, i64 45}
!50 = !{!42, !7, i64 456}
!51 = !{!35, !12, i64 24}
!52 = !{!35, !12, i64 20}
!53 = !{i64 0, i64 8, !24, i64 8, i64 8, !24, i64 16, i64 4, !17}
!54 = distinct !{!54, !23}
!55 = distinct !{!55, !23}
!56 = distinct !{!56, !23, !57, !58}
!57 = !{!"llvm.loop.isvectorized", i32 1}
!58 = !{!"llvm.loop.unroll.runtime.disable"}
!59 = distinct !{!59, !23, !58, !57}
!60 = distinct !{!60, !23}
!61 = distinct !{!61, !23}
!62 = distinct !{!62, !23}
!63 = distinct !{!63, !23}
!64 = distinct !{!64, !23}
!65 = !{!14, !14, i64 0}
!66 = !{i8 0, i8 9}
!67 = distinct !{!67, !23}
!68 = distinct !{!68, !23}
!69 = !{!42, !7, i64 272}
!70 = !{!71, !7, i64 1112}
!71 = !{!"gcc_target", !72, i64 0, !74, i64 368, !75, i64 664, !12, i64 744, !7, i64 752, !7, i64 760, !7, i64 768, !7, i64 776, !7, i64 784, !7, i64 792, !7, i64 800, !7, i64 808, !7, i64 816, !7, i64 824, !7, i64 832, !7, i64 840, !7, i64 848, !7, i64 856, !7, i64 864, !7, i64 872, !7, i64 880, !7, i64 888, !7, i64 896, !7, i64 904, !7, i64 912, !7, i64 920, !7, i64 928, !7, i64 936, !7, i64 944, !7, i64 952, !7, i64 960, !7, i64 968, !7, i64 976, !7, i64 984, !7, i64 992, !7, i64 1000, !7, i64 1008, !7, i64 1016, !7, i64 1024, !7, i64 1032, !7, i64 1040, !7, i64 1048, !7, i64 1056, !13, i64 1064, !13, i64 1072, !7, i64 1080, !7, i64 1088, !7, i64 1096, !7, i64 1104, !7, i64 1112, !7, i64 1120, !7, i64 1128, !7, i64 1136, !7, i64 1144, !7, i64 1152, !7, i64 1160, !7, i64 1168, !76, i64 1176, !7, i64 1232, !7, i64 1240, !7, i64 1248, !7, i64 1256, !7, i64 1264, !7, i64 1272, !7, i64 1280, !7, i64 1288, !7, i64 1296, !7, i64 1304, !7, i64 1312, !7, i64 1320, !7, i64 1328, !7, i64 1336, !7, i64 1344, !7, i64 1352, !7, i64 1360, !7, i64 1368, !7, i64 1376, !7, i64 1384, !7, i64 1392, !7, i64 1400, !7, i64 1408, !7, i64 1416, !7, i64 1424, !7, i64 1432, !7, i64 1440, !7, i64 1448, !7, i64 1456, !13, i64 1464, !77, i64 1472, !7, i64 1664, !7, i64 1672, !7, i64 1680, !7, i64 1688, !7, i64 1696, !7, i64 1704, !7, i64 1712, !7, i64 1720, !7, i64 1728, !7, i64 1736, !7, i64 1744, !7, i64 1752, !7, i64 1760, !7, i64 1768, !7, i64 1776, !78, i64 1784, !79, i64 1792, !80, i64 1896, !81, i64 1968, !7, i64 2016, !8, i64 2024, !8, i64 2025, !8, i64 2026, !8, i64 2027, !8, i64 2028, !8, i64 2029, !8, i64 2030, !8, i64 2031, !8, i64 2032, !8, i64 2033, !8, i64 2034, !8, i64 2035}
!72 = !{!"asm_out", !7, i64 0, !7, i64 8, !7, i64 16, !73, i64 24, !73, i64 56, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288, !7, i64 296, !7, i64 304, !7, i64 312, !7, i64 320, !7, i64 328, !7, i64 336, !7, i64 344, !7, i64 352, !7, i64 360}
!73 = !{!"asm_int_op", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24}
!74 = !{!"sched", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184, !7, i64 192, !7, i64 200, !7, i64 208, !7, i64 216, !7, i64 224, !7, i64 232, !7, i64 240, !7, i64 248, !7, i64 256, !7, i64 264, !7, i64 272, !7, i64 280, !7, i64 288}
!75 = !{!"vectorize", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72}
!76 = !{!"addr_space", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48}
!77 = !{!"calls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !7, i64 128, !7, i64 136, !7, i64 144, !7, i64 152, !7, i64 160, !7, i64 168, !7, i64 176, !7, i64 184}
!78 = !{!"c", !7, i64 0}
!79 = !{!"cxx", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !7, i64 88, !7, i64 96}
!80 = !{!"emutls", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !7, i64 56, !8, i64 64, !8, i64 65}
!81 = !{!"target_option_hooks", !7, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !7, i64 32, !7, i64 40}
!82 = !{!83, !12, i64 0}
!83 = !{!"VEC_constructor_elt_base", !12, i64 0, !12, i64 4, !8, i64 8}
!84 = !{!85, !7, i64 0}
!85 = !{!"constructor_elt_d", !7, i64 0, !7, i64 8}
!86 = distinct !{!86, !23}
!87 = !{!85, !7, i64 8}
!88 = distinct !{!88, !23}
!89 = distinct !{!89, !23}
!90 = !{!42, !7, i64 0}
!91 = distinct !{!91, !23}
!92 = !{i32 0, i32 33}
