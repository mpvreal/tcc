; ModuleID = 'x264_src/output/flv.c'
source_filename = "x264_src/output/flv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.cli_output_t = type { ptr, ptr, ptr, ptr, ptr }
%struct.flv_buffer = type { ptr, i32, i32, ptr, i64 }
%struct.x264_param_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.anon, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, [16 x i8], [16 x i8], [16 x i8], [16 x i8], [64 x i8], [64 x i8], ptr, ptr, i32, i32, ptr, %struct.anon.0, %struct.anon.1, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr }
%struct.anon = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.0 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, [2 x i32], i32, i32 }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, float, float, float, i32, float, i32, i32, i32, ptr, i32, ptr, float, float, float, ptr, i32, ptr }
%struct.flv_hnd_t = type { ptr, ptr, i32, i64, i64, i64, i64, i64, i64, i64, i8, i64, i64, i32, i32, i32, i32 }
%struct.x264_nal_t = type { i32, i32, i32, ptr }
%struct.x264_picture_t = type { i32, i32, i32, i32, i64, i64, ptr, %struct.x264_image_t, %struct.x264_hrd_t, ptr }
%struct.x264_image_t = type { i32, i32, [4 x i32], [4 x ptr] }
%struct.x264_hrd_t = type { double, double, double, double }

@flv_output = dso_local local_unnamed_addr constant %struct.cli_output_t { ptr @open_file, ptr @set_param, ptr @write_headers, ptr @write_frame, ptr @close_file }, align 8
@.str = private unnamed_addr constant [4 x i8] c"FLV\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"onMetaData\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"height\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"framerate\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"videocodecid\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"duration\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"filesize\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"videodatarate\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [117 x i8] c"flv [warning]: duplicate DTS %ld generated by rounding\0A               current internal decoding framerate: %.6f fps\0A\00", align 1
@.str.11 = private unnamed_addr constant [120 x i8] c"flv [warning]: duplicate CTS %ld generated by rounding\0A               current internal composition framerate: %.6f fps\0A\00", align 1

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @open_file(ptr noundef %0, ptr nocapture noundef writeonly %1) #0 {
  %3 = tail call dereferenceable_or_null(120) ptr @calloc(i64 1, i64 120)
  store ptr null, ptr %1, align 8, !tbaa !5
  %4 = icmp eq ptr %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  %6 = tail call ptr @flv_create_writer(ptr noundef %0) #9
  store ptr %6, ptr %3, align 8, !tbaa !9
  %7 = icmp eq ptr %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %5
  tail call void @x264_put_tag(ptr noundef nonnull %6, ptr noundef nonnull @.str) #9
  tail call void @x264_put_byte(ptr noundef nonnull %6, i8 noundef zeroext 1) #9
  tail call void @x264_put_byte(ptr noundef nonnull %6, i8 noundef zeroext 1) #9
  tail call void @x264_put_be32(ptr noundef nonnull %6, i32 noundef 9) #9
  tail call void @x264_put_be32(ptr noundef nonnull %6, i32 noundef 0) #9
  %9 = tail call i32 @flv_flush_data(ptr noundef nonnull %6) #9
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  store ptr %3, ptr %1, align 8, !tbaa !5
  br label %12

12:                                               ; preds = %8, %5, %2, %11
  %13 = phi i32 [ 0, %11 ], [ -1, %2 ], [ -1, %5 ], [ -1, %8 ]
  ret i32 %13
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @set_param(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 18) #9
  %4 = getelementptr inbounds %struct.flv_buffer, ptr %3, i64 0, i32 1
  %5 = load i32, ptr %4, align 8, !tbaa !13
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_be32(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 2) #9
  tail call void @x264_put_amf_string(ptr noundef %3, ptr noundef nonnull @.str.1) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 8) #9
  tail call void @x264_put_be32(ptr noundef %3, i32 noundef 7) #9
  tail call void @x264_put_amf_string(ptr noundef %3, ptr noundef nonnull @.str.2) #9
  %6 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 5
  %7 = load i32, ptr %6, align 4, !tbaa !15
  %8 = sitofp i32 %7 to double
  tail call void @x264_put_amf_double(ptr noundef %3, double noundef nofpclass(nan inf) %8) #9
  tail call void @x264_put_amf_string(ptr noundef %3, ptr noundef nonnull @.str.3) #9
  %9 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 6
  %10 = load i32, ptr %9, align 8, !tbaa !21
  %11 = sitofp i32 %10 to double
  tail call void @x264_put_amf_double(ptr noundef %3, double noundef nofpclass(nan inf) %11) #9
  tail call void @x264_put_amf_string(ptr noundef %3, ptr noundef nonnull @.str.4) #9
  %12 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 47
  %13 = load i32, ptr %12, align 8, !tbaa !22
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 48
  %17 = load i32, ptr %16, align 4, !tbaa !23
  %18 = uitofp i32 %17 to double
  %19 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 49
  %20 = load i32, ptr %19, align 8, !tbaa !24
  %21 = uitofp i32 %20 to double
  %22 = fdiv fast double %18, %21
  br label %31

23:                                               ; preds = %2
  %24 = load i32, ptr %4, align 8, !tbaa !13
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.flv_buffer, ptr %3, i64 0, i32 4
  %27 = load i64, ptr %26, align 8, !tbaa !25
  %28 = add nuw nsw i64 %25, 1
  %29 = add i64 %28, %27
  %30 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 6
  store i64 %29, ptr %30, align 8, !tbaa !26
  br label %31

31:                                               ; preds = %23, %15
  %32 = phi double [ 0.000000e+00, %23 ], [ %22, %15 ]
  tail call void @x264_put_amf_double(ptr noundef nonnull %3, double noundef nofpclass(nan inf) %32) #9
  tail call void @x264_put_amf_string(ptr noundef nonnull %3, ptr noundef nonnull @.str.5) #9
  tail call void @x264_put_amf_double(ptr noundef nonnull %3, double noundef nofpclass(nan inf) 7.000000e+00) #9
  tail call void @x264_put_amf_string(ptr noundef nonnull %3, ptr noundef nonnull @.str.6) #9
  %33 = load i32, ptr %4, align 8, !tbaa !13
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.flv_buffer, ptr %3, i64 0, i32 4
  %36 = load i64, ptr %35, align 8, !tbaa !25
  %37 = add nuw nsw i64 %34, 1
  %38 = add i64 %37, %36
  %39 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 7
  store i64 %38, ptr %39, align 8, !tbaa !27
  tail call void @x264_put_amf_double(ptr noundef nonnull %3, double noundef nofpclass(nan inf) 0.000000e+00) #9
  tail call void @x264_put_amf_string(ptr noundef nonnull %3, ptr noundef nonnull @.str.7) #9
  %40 = load i32, ptr %4, align 8, !tbaa !13
  %41 = zext i32 %40 to i64
  %42 = load i64, ptr %35, align 8, !tbaa !25
  %43 = add nuw nsw i64 %41, 1
  %44 = add i64 %43, %42
  %45 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 8
  store i64 %44, ptr %45, align 8, !tbaa !28
  tail call void @x264_put_amf_double(ptr noundef nonnull %3, double noundef nofpclass(nan inf) 0.000000e+00) #9
  tail call void @x264_put_amf_string(ptr noundef nonnull %3, ptr noundef nonnull @.str.8) #9
  %46 = load i32, ptr %4, align 8, !tbaa !13
  %47 = zext i32 %46 to i64
  %48 = load i64, ptr %35, align 8, !tbaa !25
  %49 = add nuw nsw i64 %47, 1
  %50 = add i64 %49, %48
  %51 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 9
  store i64 %50, ptr %51, align 8, !tbaa !29
  tail call void @x264_put_amf_double(ptr noundef nonnull %3, double noundef nofpclass(nan inf) 0.000000e+00) #9
  tail call void @x264_put_amf_string(ptr noundef nonnull %3, ptr noundef nonnull @.str.9) #9
  tail call void @x264_put_byte(ptr noundef nonnull %3, i8 noundef zeroext 9) #9
  %52 = load i32, ptr %4, align 8, !tbaa !13
  %53 = sub i32 %52, %5
  %54 = add i32 %53, -10
  tail call void @rewrite_amf_be24(ptr noundef nonnull %3, i32 noundef %54, i32 noundef %5) #9
  %55 = add i32 %53, 1
  tail call void @x264_put_be32(ptr noundef nonnull %3, i32 noundef %55) #9
  %56 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 48
  %57 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 3
  %58 = load <2 x i32>, ptr %56, align 4, !tbaa !30
  %59 = zext <2 x i32> %58 to <2 x i64>
  store <2 x i64> %59, ptr %57, align 8, !tbaa !31
  %60 = getelementptr inbounds %struct.x264_param_t, ptr %1, i64 0, i32 50
  %61 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 13
  %62 = load <2 x i32>, ptr %60, align 4, !tbaa !30
  store <2 x i32> %62, ptr %61, align 8, !tbaa !30
  %63 = load i32, ptr %12, align 8, !tbaa !22
  %64 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 15
  store i32 %63, ptr %64, align 8, !tbaa !32
  ret i32 0
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @write_headers(ptr nocapture noundef %0, ptr nocapture noundef readonly %1) #0 {
  %3 = load ptr, ptr %0, align 8, !tbaa !9
  %4 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 0, i32 2
  %5 = load i32, ptr %4, align 8, !tbaa !33
  %6 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 1, i32 2
  %7 = load i32, ptr %6, align 8, !tbaa !33
  %8 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 2, i32 2
  %9 = load i32, ptr %8, align 8, !tbaa !33
  %10 = sext i32 %9 to i64
  %11 = tail call noalias ptr @malloc(i64 noundef %10) #10
  %12 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 1
  store ptr %11, ptr %12, align 8, !tbaa !35
  %13 = icmp eq ptr %11, null
  br i1 %13, label %49, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 2
  store i32 %9, ptr %15, align 8, !tbaa !36
  %16 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 2, i32 3
  %17 = load ptr, ptr %16, align 8, !tbaa !37
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %11, ptr align 1 %17, i64 %10, i1 false)
  %18 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 0, i32 3
  %19 = load ptr, ptr %18, align 8, !tbaa !37
  %20 = getelementptr inbounds i8, ptr %19, i64 4
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 9) #9
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 0) #9
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  %21 = getelementptr inbounds %struct.flv_buffer, ptr %3, i64 0, i32 1
  %22 = load i32, ptr %21, align 8, !tbaa !13
  %23 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 16
  store i32 %22, ptr %23, align 4, !tbaa !38
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 23) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 0) #9
  tail call void @x264_put_be24(ptr noundef %3, i32 noundef 0) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 1) #9
  %24 = getelementptr inbounds i8, ptr %19, i64 5
  %25 = load i8, ptr %24, align 1, !tbaa !39
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext %25) #9
  %26 = getelementptr inbounds i8, ptr %19, i64 6
  %27 = load i8, ptr %26, align 1, !tbaa !39
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext %27) #9
  %28 = getelementptr inbounds i8, ptr %19, i64 7
  %29 = load i8, ptr %28, align 1, !tbaa !39
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext %29) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext -1) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext -31) #9
  %30 = add nsw i32 %5, -4
  %31 = trunc i32 %30 to i16
  tail call void @x264_put_be16(ptr noundef %3, i16 noundef zeroext %31) #9
  %32 = tail call i32 @flv_append_data(ptr noundef %3, ptr noundef nonnull %20, i32 noundef %30) #9
  tail call void @x264_put_byte(ptr noundef %3, i8 noundef zeroext 1) #9
  %33 = add nsw i32 %7, -4
  %34 = trunc i32 %33 to i16
  tail call void @x264_put_be16(ptr noundef %3, i16 noundef zeroext %34) #9
  %35 = getelementptr inbounds %struct.x264_nal_t, ptr %1, i64 1, i32 3
  %36 = load ptr, ptr %35, align 8, !tbaa !37
  %37 = getelementptr inbounds i8, ptr %36, i64 4
  %38 = tail call i32 @flv_append_data(ptr noundef %3, ptr noundef nonnull %37, i32 noundef %33) #9
  %39 = load i32, ptr %21, align 8, !tbaa !13
  %40 = load i32, ptr %23, align 4, !tbaa !38
  %41 = sub i32 %39, %40
  %42 = add i32 %40, -10
  tail call void @rewrite_amf_be24(ptr noundef %3, i32 noundef %41, i32 noundef %42) #9
  %43 = add i32 %41, 11
  tail call void @x264_put_be32(ptr noundef %3, i32 noundef %43) #9
  %44 = tail call i32 @flv_flush_data(ptr noundef %3) #9
  %45 = add i32 %7, %5
  %46 = add i32 %45, %9
  %47 = icmp sgt i32 %44, -1
  %48 = select i1 %47, i32 %46, i32 -1
  br label %49

49:                                               ; preds = %2, %14
  %50 = phi i32 [ %48, %14 ], [ -1, %2 ]
  ret i32 %50
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @write_frame(ptr nocapture noundef %0, ptr noundef %1, i32 noundef %2, ptr nocapture noundef readonly %3) #0 {
  %5 = load ptr, ptr %0, align 8, !tbaa !9
  %6 = getelementptr inbounds %struct.x264_picture_t, ptr %3, i64 0, i32 5
  %7 = load i64, ptr %6, align 8, !tbaa !40
  %8 = mul nsw i64 %7, 1000
  %9 = sitofp i64 %8 to double
  %10 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 13
  %11 = load i32, ptr %10, align 8, !tbaa !45
  %12 = uitofp i32 %11 to double
  %13 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 14
  %14 = load i32, ptr %13, align 4, !tbaa !46
  %15 = uitofp i32 %14 to double
  %16 = fdiv fast double %12, %15
  %17 = fmul fast double %16, %9
  %18 = fadd fast double %17, 5.000000e-01
  %19 = fptosi double %18 to i64
  %20 = getelementptr inbounds %struct.x264_picture_t, ptr %3, i64 0, i32 4
  %21 = load i64, ptr %20, align 8, !tbaa !47
  %22 = mul nsw i64 %21, 1000
  %23 = sitofp i64 %22 to double
  %24 = fmul fast double %16, %23
  %25 = fadd fast double %24, 5.000000e-01
  %26 = fptosi double %25 to i64
  %27 = sub nsw i64 %26, %19
  %28 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 5
  %29 = load i64, ptr %28, align 8, !tbaa !48
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %71, label %31

31:                                               ; preds = %4
  %32 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 11
  %33 = load i64, ptr %32, align 8, !tbaa !49
  %34 = mul nsw i64 %33, 1000
  %35 = sitofp i64 %34 to double
  %36 = fmul fast double %16, %35
  %37 = fadd fast double %36, 5.000000e-01
  %38 = fptosi double %37 to i64
  %39 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 12
  %40 = load i64, ptr %39, align 8, !tbaa !50
  %41 = mul nsw i64 %40, 1000
  %42 = sitofp i64 %41 to double
  %43 = fmul fast double %16, %42
  %44 = fadd fast double %43, 5.000000e-01
  %45 = fptosi double %44 to i64
  %46 = icmp eq i64 %38, %19
  br i1 %46, label %47, label %55

47:                                               ; preds = %31
  %48 = sub nsw i64 %7, %33
  %49 = sitofp i64 %48 to double
  %50 = fmul fast double %49, %12
  %51 = fdiv fast double %15, %50
  %52 = load ptr, ptr @stderr, align 8, !tbaa !5
  %53 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %52, ptr noundef nonnull @.str.10, i64 noundef %19, double noundef nofpclass(nan inf) %51) #11
  %54 = load i64, ptr %20, align 8, !tbaa !47
  br label %55

55:                                               ; preds = %47, %31
  %56 = phi i64 [ %54, %47 ], [ %21, %31 ]
  %57 = icmp eq i64 %45, %26
  br i1 %57, label %58, label %71

58:                                               ; preds = %55
  %59 = load i32, ptr %13, align 4, !tbaa !46
  %60 = uitofp i32 %59 to double
  %61 = load i32, ptr %10, align 8, !tbaa !45
  %62 = uitofp i32 %61 to double
  %63 = load i64, ptr %39, align 8, !tbaa !50
  %64 = sub nsw i64 %56, %63
  %65 = sitofp i64 %64 to double
  %66 = fmul fast double %65, %62
  %67 = fdiv fast double %60, %66
  %68 = load ptr, ptr @stderr, align 8, !tbaa !5
  %69 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %68, ptr noundef nonnull @.str.11, i64 noundef %26, double noundef nofpclass(nan inf) %67) #11
  %70 = load i64, ptr %20, align 8, !tbaa !47
  br label %71

71:                                               ; preds = %55, %58, %4
  %72 = phi i64 [ %56, %55 ], [ %70, %58 ], [ %21, %4 ]
  %73 = load i64, ptr %6, align 8, !tbaa !40
  %74 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 11
  store i64 %73, ptr %74, align 8, !tbaa !49
  %75 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 12
  store i64 %72, ptr %75, align 8, !tbaa !50
  tail call void @x264_put_byte(ptr noundef %5, i8 noundef zeroext 9) #9
  tail call void @x264_put_be24(ptr noundef %5, i32 noundef 0) #9
  %76 = trunc i64 %19 to i32
  tail call void @x264_put_be24(ptr noundef %5, i32 noundef %76) #9
  %77 = lshr i64 %19, 24
  %78 = trunc i64 %77 to i8
  tail call void @x264_put_byte(ptr noundef %5, i8 noundef zeroext %78) #9
  tail call void @x264_put_be24(ptr noundef %5, i32 noundef 0) #9
  %79 = getelementptr inbounds %struct.flv_buffer, ptr %5, i64 0, i32 1
  %80 = load i32, ptr %79, align 8, !tbaa !13
  %81 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 16
  store i32 %80, ptr %81, align 4, !tbaa !38
  %82 = getelementptr inbounds %struct.x264_picture_t, ptr %3, i64 0, i32 3
  %83 = load i32, ptr %82, align 4, !tbaa !51
  %84 = icmp eq i32 %83, 0
  %85 = select i1 %84, i8 39, i8 23
  tail call void @x264_put_byte(ptr noundef %5, i8 noundef zeroext %85) #9
  tail call void @x264_put_byte(ptr noundef %5, i8 noundef zeroext 1) #9
  %86 = trunc i64 %27 to i32
  tail call void @x264_put_be24(ptr noundef %5, i32 noundef %86) #9
  %87 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 1
  %88 = load ptr, ptr %87, align 8, !tbaa !35
  %89 = icmp eq ptr %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %71
  %91 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 2
  %92 = load i32, ptr %91, align 8, !tbaa !36
  %93 = tail call i32 @flv_append_data(ptr noundef nonnull %5, ptr noundef nonnull %88, i32 noundef %92) #9
  %94 = load ptr, ptr %87, align 8, !tbaa !35
  tail call void @free(ptr noundef %94) #9
  store ptr null, ptr %87, align 8, !tbaa !35
  br label %95

95:                                               ; preds = %90, %71
  %96 = tail call i32 @flv_append_data(ptr noundef nonnull %5, ptr noundef %1, i32 noundef %2) #9
  %97 = load i32, ptr %79, align 8, !tbaa !13
  %98 = load i32, ptr %81, align 4, !tbaa !38
  %99 = sub i32 %97, %98
  %100 = add i32 %98, -10
  tail call void @rewrite_amf_be24(ptr noundef nonnull %5, i32 noundef %99, i32 noundef %100) #9
  %101 = add i32 %99, 11
  tail call void @x264_put_be32(ptr noundef nonnull %5, i32 noundef %101) #9
  %102 = tail call i32 @flv_flush_data(ptr noundef nonnull %5) #9
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %107, label %104

104:                                              ; preds = %95
  %105 = load i64, ptr %28, align 8, !tbaa !48
  %106 = add nsw i64 %105, 1
  store i64 %106, ptr %28, align 8, !tbaa !48
  br label %107

107:                                              ; preds = %95, %104
  %108 = phi i32 [ %2, %104 ], [ -1, %95 ]
  ret i32 %108
}

; Function Attrs: nounwind sspstrong uwtable
define internal i32 @close_file(ptr nocapture noundef %0, i64 noundef %1, i64 noundef %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = load ptr, ptr %0, align 8, !tbaa !9
  %9 = tail call i32 @flv_flush_data(ptr noundef %8) #9
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %68, label %11

11:                                               ; preds = %3
  %12 = shl nsw i64 %1, 1
  %13 = sub nsw i64 %12, %2
  %14 = sitofp i64 %13 to double
  %15 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 13
  %16 = load i32, ptr %15, align 8, !tbaa !45
  %17 = uitofp i32 %16 to double
  %18 = fmul fast double %17, %14
  %19 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 14
  %20 = load i32, ptr %19, align 4, !tbaa !46
  %21 = uitofp i32 %20 to double
  %22 = fdiv fast double %18, %21
  %23 = getelementptr inbounds %struct.flv_buffer, ptr %8, i64 0, i32 3
  %24 = load ptr, ptr %23, align 8, !tbaa !52
  %25 = tail call i64 @ftell(ptr noundef %24)
  %26 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 6
  %27 = load i64, ptr %26, align 8, !tbaa !26
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %39, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 5
  %31 = load i64, ptr %30, align 8, !tbaa !48
  %32 = sitofp i64 %31 to double
  %33 = fdiv fast double %32, %22
  %34 = load ptr, ptr %23, align 8, !tbaa !52
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %7) #9
  %35 = tail call i64 @dbl2int(double noundef nofpclass(nan inf) %33) #9
  %36 = tail call i64 @llvm.bswap.i64(i64 %35)
  store i64 %36, ptr %7, align 8, !tbaa !31
  %37 = tail call i32 @fseek(ptr noundef %34, i64 noundef %27, i32 noundef 0)
  %38 = call i64 @fwrite(ptr noundef nonnull %7, i64 noundef 8, i64 noundef 1, ptr noundef %34)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %7) #9
  br label %39

39:                                               ; preds = %29, %11
  %40 = load ptr, ptr %23, align 8, !tbaa !52
  %41 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 7
  %42 = load i64, ptr %41, align 8, !tbaa !27
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %6) #9
  %43 = tail call i64 @dbl2int(double noundef nofpclass(nan inf) %22) #9
  %44 = tail call i64 @llvm.bswap.i64(i64 %43)
  store i64 %44, ptr %6, align 8, !tbaa !31
  %45 = tail call i32 @fseek(ptr noundef %40, i64 noundef %42, i32 noundef 0)
  %46 = call i64 @fwrite(ptr noundef nonnull %6, i64 noundef 8, i64 noundef 1, ptr noundef %40)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %6) #9
  %47 = load ptr, ptr %23, align 8, !tbaa !52
  %48 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 8
  %49 = load i64, ptr %48, align 8, !tbaa !28
  %50 = uitofp i64 %25 to double
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5) #9
  %51 = tail call i64 @dbl2int(double noundef nofpclass(nan inf) %50) #9
  %52 = tail call i64 @llvm.bswap.i64(i64 %51)
  store i64 %52, ptr %5, align 8, !tbaa !31
  %53 = tail call i32 @fseek(ptr noundef %47, i64 noundef %49, i32 noundef 0)
  %54 = call i64 @fwrite(ptr noundef nonnull %5, i64 noundef 8, i64 noundef 1, ptr noundef %47)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5) #9
  %55 = load ptr, ptr %23, align 8, !tbaa !52
  %56 = getelementptr inbounds %struct.flv_hnd_t, ptr %0, i64 0, i32 9
  %57 = load i64, ptr %56, align 8, !tbaa !29
  %58 = shl i64 %25, 3
  %59 = uitofp i64 %58 to double
  %60 = fmul fast double %22, 1.000000e+03
  %61 = fdiv fast double %59, %60
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #9
  %62 = tail call i64 @dbl2int(double noundef nofpclass(nan inf) %61) #9
  %63 = tail call i64 @llvm.bswap.i64(i64 %62)
  store i64 %63, ptr %4, align 8, !tbaa !31
  %64 = tail call i32 @fseek(ptr noundef %55, i64 noundef %57, i32 noundef 0)
  %65 = call i64 @fwrite(ptr noundef nonnull %4, i64 noundef 8, i64 noundef 1, ptr noundef %55)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #9
  %66 = load ptr, ptr %23, align 8, !tbaa !52
  %67 = tail call i32 @fclose(ptr noundef %66)
  tail call void @free(ptr noundef nonnull %0) #9
  tail call void @free(ptr noundef nonnull %8) #9
  br label %68

68:                                               ; preds = %3, %39
  %69 = phi i32 [ 0, %39 ], [ -1, %3 ]
  ret i32 %69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #2

declare ptr @flv_create_writer(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

declare void @x264_put_tag(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @x264_put_byte(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @x264_put_be32(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @flv_flush_data(ptr noundef) local_unnamed_addr #3

declare void @x264_put_be24(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @x264_put_amf_string(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @x264_put_amf_double(ptr noundef, double noundef nofpclass(nan inf)) local_unnamed_addr #3

declare void @rewrite_amf_be24(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

declare void @x264_put_be16(ptr noundef, i16 noundef zeroext) local_unnamed_addr #3

declare i32 @flv_append_data(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #5

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @ftell(ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #5

declare i64 @dbl2int(double noundef nofpclass(nan inf)) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.bswap.i64(i64) #7

; Function Attrs: nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #8

attributes #0 = { nounwind sspstrong uwtable "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nofree nounwind "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #6 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "approx-func-fp-math"="true" "denormal-fp-math"="preserve-sign,preserve-sign" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cmov,+crc32,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" }
attributes #7 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #9 = { nounwind }
attributes #10 = { nounwind allocsize(0) }
attributes #11 = { cold }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 17.0.6"}
!5 = !{!6, !6, i64 0}
!6 = !{!"any pointer", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = !{!10, !6, i64 0}
!10 = !{!"", !6, i64 0, !6, i64 8, !11, i64 16, !12, i64 24, !12, i64 32, !12, i64 40, !12, i64 48, !12, i64 56, !12, i64 64, !12, i64 72, !7, i64 80, !12, i64 88, !12, i64 96, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116}
!11 = !{!"int", !7, i64 0}
!12 = !{!"long", !7, i64 0}
!13 = !{!14, !11, i64 8}
!14 = !{!"flv_buffer", !6, i64 0, !11, i64 8, !11, i64 12, !6, i64 16, !12, i64 24}
!15 = !{!16, !11, i64 20}
!16 = !{!"x264_param_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !17, i64 44, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96, !11, i64 100, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !11, i64 128, !11, i64 132, !11, i64 136, !11, i64 140, !11, i64 144, !6, i64 152, !7, i64 160, !7, i64 176, !7, i64 192, !7, i64 208, !7, i64 224, !7, i64 288, !6, i64 352, !6, i64 360, !11, i64 368, !11, i64 372, !6, i64 376, !18, i64 384, !20, i64 488, !11, i64 632, !11, i64 636, !11, i64 640, !11, i64 644, !11, i64 648, !11, i64 652, !11, i64 656, !11, i64 660, !11, i64 664, !11, i64 668, !11, i64 672, !11, i64 676, !11, i64 680, !11, i64 684, !11, i64 688, !11, i64 692, !6, i64 696}
!17 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32}
!18 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !11, i64 48, !11, i64 52, !11, i64 56, !11, i64 60, !11, i64 64, !11, i64 68, !19, i64 72, !19, i64 76, !11, i64 80, !7, i64 84, !11, i64 92, !11, i64 96}
!19 = !{!"float", !7, i64 0}
!20 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !19, i64 24, !19, i64 28, !19, i64 32, !11, i64 36, !11, i64 40, !19, i64 44, !19, i64 48, !19, i64 52, !11, i64 56, !19, i64 60, !11, i64 64, !11, i64 68, !11, i64 72, !6, i64 80, !11, i64 88, !6, i64 96, !19, i64 104, !19, i64 108, !19, i64 112, !6, i64 120, !11, i64 128, !6, i64 136}
!21 = !{!16, !11, i64 24}
!22 = !{!16, !11, i64 648}
!23 = !{!16, !11, i64 652}
!24 = !{!16, !11, i64 656}
!25 = !{!14, !12, i64 24}
!26 = !{!10, !12, i64 48}
!27 = !{!10, !12, i64 56}
!28 = !{!10, !12, i64 64}
!29 = !{!10, !12, i64 72}
!30 = !{!11, !11, i64 0}
!31 = !{!12, !12, i64 0}
!32 = !{!10, !11, i64 112}
!33 = !{!34, !11, i64 8}
!34 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !6, i64 16}
!35 = !{!10, !6, i64 8}
!36 = !{!10, !11, i64 16}
!37 = !{!34, !6, i64 16}
!38 = !{!10, !11, i64 116}
!39 = !{!7, !7, i64 0}
!40 = !{!41, !12, i64 24}
!41 = !{!"", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !12, i64 16, !12, i64 24, !6, i64 32, !42, i64 40, !43, i64 96, !6, i64 128}
!42 = !{!"", !11, i64 0, !11, i64 4, !7, i64 8, !7, i64 24}
!43 = !{!"", !44, i64 0, !44, i64 8, !44, i64 16, !44, i64 24}
!44 = !{!"double", !7, i64 0}
!45 = !{!10, !11, i64 104}
!46 = !{!10, !11, i64 108}
!47 = !{!41, !12, i64 16}
!48 = !{!10, !12, i64 40}
!49 = !{!10, !12, i64 88}
!50 = !{!10, !12, i64 96}
!51 = !{!41, !11, i64 12}
!52 = !{!14, !6, i64 16}
